{
    "cloudstack_05a7bec": {
        "bug_id": "cloudstack_05a7bec",
        "commit": "https://github.com/apache/cloudstack/commit/05a7beccfe9c2cd406908062b8833ff4c8a98431",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/engine/schema/src/com/cloud/vm/dao/DomainRouterDao.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/vm/dao/DomainRouterDao.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 0,
                "filename": "engine/schema/src/com/cloud/vm/dao/DomainRouterDao.java",
                "patch": "@@ -156,4 +156,6 @@\n     List<DomainRouterVO> listRunningByDataCenter(long dcId);\n \n     List<DomainRouterVO> listStopped(long networkId);\n+\n+    List<DomainRouterVO> listIncludingRemovedByVpcId(long vpcId);\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/engine/schema/src/com/cloud/vm/dao/DomainRouterDao.java",
                "sha": "ef8829ef0189de87be29b323502f5e28bed6af84",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/engine/schema/src/com/cloud/vm/dao/DomainRouterDaoImpl.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/vm/dao/DomainRouterDaoImpl.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 0,
                "filename": "engine/schema/src/com/cloud/vm/dao/DomainRouterDaoImpl.java",
                "patch": "@@ -432,4 +432,12 @@ public void removeRouterFromGuestNetwork(final long routerId, final long guestNe\n         sc.setParameters(\"states\", State.Stopped);\n         return listBy(sc);\n     }\n+\n+    @Override\n+    public List<DomainRouterVO> listIncludingRemovedByVpcId(long vpcId) {\n+        SearchCriteria<DomainRouterVO> sc = VpcSearch.create();\n+        sc.setParameters(\"vpcId\", vpcId);\n+        sc.setParameters(\"role\", Role.VIRTUAL_ROUTER);\n+        return listIncludingRemovedBy(sc);\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/engine/schema/src/com/cloud/vm/dao/DomainRouterDaoImpl.java",
                "sha": "85a8a936b5cc2c494039861ac58fbd04020d212c",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/pom.xml",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/pom.xml?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 3,
                "filename": "plugins/network-elements/nuage-vsp/pom.xml",
                "patch": "@@ -28,11 +28,17 @@\n     <version>4.9.0-SNAPSHOT</version>\n     <relativePath>../../pom.xml</relativePath>\n   </parent>\n+  <repositories>\n+    <repository>\n+      <id>nuage-vsp</id>\n+      <url>http://cs.mv.nuagenetworks.net/releases/</url>\n+    </repository>\n+  </repositories>\n   <dependencies>\n     <dependency>\n-      <groupId>org.apache.commons</groupId>\n-      <artifactId>commons-lang3</artifactId>\n-      <version>${cs.commons-lang3.version}</version>\n+      <groupId>net.nuage.vsp</groupId>\n+      <artifactId>nuage-vsp-acs-client</artifactId>\n+      <version>3.2.8.0</version>\n     </dependency>\n   </dependencies>\n   <build>",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/pom.xml",
                "sha": "7369ba5fa7790538fb9c561f3e2766fc9ca30d6a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/resources/META-INF/cloudstack/vsp/spring-vsp-context.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/resources/META-INF/cloudstack/vsp/spring-vsp-context.xml?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 1,
                "filename": "plugins/network-elements/nuage-vsp/resources/META-INF/cloudstack/vsp/spring-vsp-context.xml",
                "patch": "@@ -37,5 +37,5 @@\n         <property name=\"name\" value=\"NuageVspElement\" />\n     </bean>\n \t<bean id=\"NuageVspManager\" class=\"com.cloud.network.manager.NuageVspManagerImpl\" />\n-  \t<bean id=\"NuageVspSync\" class=\"com.cloud.network.sync.NuageVspSyncImpl\" />\n+    <bean id=\"NuageVspEntityBuilder\" class=\"com.cloud.util.NuageVspEntityBuilder\" />\n </beans>",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/resources/META-INF/cloudstack/vsp/spring-vsp-context.xml",
                "sha": "c447c441c9254e9d7d08e20b550337f6353fa483",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/2d825dd07f9b1acf19f6d98f5a247e069724c443/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/VspResourceAnswer.java",
                "changes": 60,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/VspResourceAnswer.java?ref=2d825dd07f9b1acf19f6d98f5a247e069724c443",
                "deletions": 60,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/VspResourceAnswer.java",
                "patch": "@@ -1,60 +0,0 @@\n-//\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-//\n-\n-package com.cloud.agent.api;\n-\n-public class VspResourceAnswer extends Answer {\n-\n-    private String _resourceInfo;\n-\n-    public VspResourceAnswer(Command cmd, String resourceInfo, String details) {\n-        super(cmd, true, details);\n-        this._resourceInfo = resourceInfo;\n-    }\n-\n-    public VspResourceAnswer(VspResourceCommand cmd, boolean success, String details) {\n-        super(cmd, success, details);\n-    }\n-\n-    public VspResourceAnswer(VspResourceCommand cmd, Exception e) {\n-        super(cmd, e);\n-    }\n-\n-    public String getResourceInfo() {\n-        return this._resourceInfo;\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) return true;\n-        if (o == null || getClass() != o.getClass()) return false;\n-\n-        VspResourceAnswer that = (VspResourceAnswer) o;\n-\n-        if (_resourceInfo != null ? !_resourceInfo.equals(that._resourceInfo) : that._resourceInfo != null)\n-            return false;\n-\n-        return true;\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return _resourceInfo != null ? _resourceInfo.hashCode() : 0;\n-    }\n-}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2d825dd07f9b1acf19f6d98f5a247e069724c443/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/VspResourceAnswer.java",
                "sha": "979dcd315f22c237fd5fcd034225fe488203863a",
                "status": "removed"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/2d825dd07f9b1acf19f6d98f5a247e069724c443/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/VspResourceCommand.java",
                "changes": 119,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/VspResourceCommand.java?ref=2d825dd07f9b1acf19f6d98f5a247e069724c443",
                "deletions": 119,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/VspResourceCommand.java",
                "patch": "@@ -1,119 +0,0 @@\n-//\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-//\n-\n-package com.cloud.agent.api;\n-\n-public class VspResourceCommand extends Command {\n-\n-    private final String _method;\n-    private final String _resource;\n-    private final String _resourceId;\n-    private final String _childResource;\n-    private final Object _entityDetails;\n-    private final String _resourceFilter;\n-    private final String _proxyUserUuid;\n-    private final String _proxyUserDomainuuid;\n-\n-    public VspResourceCommand(String method, String resource, String resourceId, String childResource, Object entityDetails, String resourceFilter, String proxyUserUuid,\n-            String proxyUserDomainuuid) {\n-        super();\n-        this._method = method;\n-        this._resource = resource;\n-        this._resourceId = resourceId;\n-        this._childResource = childResource;\n-        this._entityDetails = entityDetails;\n-        this._resourceFilter = resourceFilter;\n-        this._proxyUserUuid = proxyUserUuid;\n-        this._proxyUserDomainuuid = proxyUserDomainuuid;\n-    }\n-\n-    public String getRequestType() {\n-        return _method;\n-    }\n-\n-    public String getResource() {\n-        return _resource;\n-    }\n-\n-    public String getResourceId() {\n-        return _resourceId;\n-    }\n-\n-    public String getChildResource() {\n-        return _childResource;\n-    }\n-\n-    public Object getEntityDetails() {\n-        return _entityDetails;\n-    }\n-\n-    public String getResourceFilter() {\n-        return _resourceFilter;\n-    }\n-\n-    public String getProxyUserUuid() {\n-        return _proxyUserUuid;\n-    }\n-\n-    public String getProxyUserDomainuuid() {\n-        return _proxyUserDomainuuid;\n-    }\n-\n-    @Override\n-    public boolean executeInSequence() {\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) return true;\n-        if (o == null || getClass() != o.getClass()) return false;\n-\n-        VspResourceCommand that = (VspResourceCommand) o;\n-\n-        if (_childResource != null ? !_childResource.equals(that._childResource) : that._childResource != null)\n-            return false;\n-        if (_entityDetails != null ? !_entityDetails.equals(that._entityDetails) : that._entityDetails != null)\n-            return false;\n-        if (_method != null ? !_method.equals(that._method) : that._method != null) return false;\n-        if (_proxyUserDomainuuid != null ? !_proxyUserDomainuuid.equals(that._proxyUserDomainuuid) : that._proxyUserDomainuuid != null)\n-            return false;\n-        if (_proxyUserUuid != null ? !_proxyUserUuid.equals(that._proxyUserUuid) : that._proxyUserUuid != null)\n-            return false;\n-        if (_resource != null ? !_resource.equals(that._resource) : that._resource != null) return false;\n-        if (_resourceFilter != null ? !_resourceFilter.equals(that._resourceFilter) : that._resourceFilter != null)\n-            return false;\n-        if (_resourceId != null ? !_resourceId.equals(that._resourceId) : that._resourceId != null) return false;\n-\n-        return true;\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        int result = _method != null ? _method.hashCode() : 0;\n-        result = 31 * result + (_resource != null ? _resource.hashCode() : 0);\n-        result = 31 * result + (_resourceId != null ? _resourceId.hashCode() : 0);\n-        result = 31 * result + (_childResource != null ? _childResource.hashCode() : 0);\n-        result = 31 * result + (_entityDetails != null ? _entityDetails.hashCode() : 0);\n-        result = 31 * result + (_resourceFilter != null ? _resourceFilter.hashCode() : 0);\n-        result = 31 * result + (_proxyUserUuid != null ? _proxyUserUuid.hashCode() : 0);\n-        result = 31 * result + (_proxyUserDomainuuid != null ? _proxyUserDomainuuid.hashCode() : 0);\n-        return result;\n-    }\n-}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2d825dd07f9b1acf19f6d98f5a247e069724c443/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/VspResourceCommand.java",
                "sha": "6e03dabc1be85d2f483bdb016f08bf1fb3cf7b36",
                "status": "removed"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/element/ApplyAclRuleVspCommand.java",
                "changes": 184,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/element/ApplyAclRuleVspCommand.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 167,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/element/ApplyAclRuleVspCommand.java",
                "patch": "@@ -19,173 +19,43 @@\n \n package com.cloud.agent.api.element;\n \n-import com.cloud.agent.api.CmdBuilder;\n import com.cloud.agent.api.Command;\n+import net.nuage.vsp.acs.client.api.model.VspAclRule;\n+import net.nuage.vsp.acs.client.api.model.VspNetwork;\n \n import java.util.List;\n-import java.util.Map;\n \n public class ApplyAclRuleVspCommand extends Command {\n \n-    private final boolean _networkAcl;\n-    private final String _networkUuid;\n-    private final String _networkDomainUuid;\n-    private final String _vpcOrSubnetUuid;\n-    private final String _networkName;\n-    private final boolean _isL2Network;\n-    private final List<Map<String, Object>> _aclRules;\n-    private final long _networkId;\n-    private final boolean _egressDefaultPolicy;\n-    private final Boolean _acsIngressAcl;\n+    private final VspAclRule.ACLType _aclType;\n+    private final VspNetwork _network;\n+    private final List<VspAclRule> _aclRules;\n     private final boolean _networkReset;\n-    private final String _domainTemplateName;\n \n-    private ApplyAclRuleVspCommand(boolean networkAcl, String networkUuid, String networkDomainUuid, String vpcOrSubnetUuid, String networkName, boolean isL2Network,\n-            List<Map<String, Object>> aclRules, long networkId, boolean egressDefaultPolicy, Boolean acsIngressAcl, boolean networkReset, String domainTemplateName) {\n+    public ApplyAclRuleVspCommand(VspAclRule.ACLType aclType, VspNetwork network, List<VspAclRule> aclRules, boolean networkReset) {\n         super();\n-        this._networkAcl = networkAcl;\n-        this._networkUuid = networkUuid;\n-        this._networkDomainUuid = networkDomainUuid;\n-        this._vpcOrSubnetUuid = vpcOrSubnetUuid;\n-        this._networkName = networkName;\n-        this._isL2Network = isL2Network;\n+        this._aclType = aclType;\n+        this._network = network;\n         this._aclRules = aclRules;\n-        this._networkId = networkId;\n-        this._egressDefaultPolicy = egressDefaultPolicy;\n-        this._acsIngressAcl = acsIngressAcl;\n         this._networkReset = networkReset;\n-        this._domainTemplateName = domainTemplateName;\n     }\n \n-    public boolean isNetworkAcl() {\n-        return _networkAcl;\n+    public VspAclRule.ACLType getAclType() {\n+        return _aclType;\n     }\n \n-    public String getNetworkUuid() {\n-        return _networkUuid;\n+    public VspNetwork getNetwork() {\n+        return _network;\n     }\n \n-    public String getNetworkDomainUuid() {\n-        return _networkDomainUuid;\n-    }\n-\n-    public String getVpcOrSubnetUuid() {\n-        return _vpcOrSubnetUuid;\n-    }\n-\n-    public String getNetworkName() {\n-        return _networkName;\n-    }\n-\n-    public boolean isL2Network() {\n-        return _isL2Network;\n-    }\n-\n-    public List<Map<String, Object>> getAclRules() {\n+    public List<VspAclRule> getAclRules() {\n         return _aclRules;\n     }\n \n-    public long getNetworkId() {\n-        return _networkId;\n-    }\n-\n-    public boolean isEgressDefaultPolicy() {\n-        return _egressDefaultPolicy;\n-    }\n-\n-    public Boolean getAcsIngressAcl() {\n-        return _acsIngressAcl;\n-    }\n-\n     public boolean isNetworkReset() {\n         return _networkReset;\n     }\n \n-    public String getDomainTemplateName() {\n-        return _domainTemplateName;\n-    }\n-\n-    public static class Builder implements CmdBuilder<ApplyAclRuleVspCommand> {\n-        private boolean _networkAcl;\n-        private String _networkUuid;\n-        private String _networkDomainUuid;\n-        private String _vpcOrSubnetUuid;\n-        private String _networkName;\n-        private boolean _isL2Network;\n-        private List<Map<String, Object>> _aclRules;\n-        private long _networkId;\n-        private boolean _egressDefaultPolicy;\n-        private Boolean _acsIngressAcl;\n-        private boolean _networkReset;\n-        private String _domainTemplateName;\n-\n-        public Builder networkAcl(boolean networkAcl) {\n-            this._networkAcl = networkAcl;\n-            return this;\n-        }\n-\n-        public Builder networkUuid(String networkUuid) {\n-            this._networkUuid = networkUuid;\n-            return this;\n-        }\n-\n-        public Builder networkDomainUuid(String networkDomainUuid) {\n-            this._networkDomainUuid = networkDomainUuid;\n-            return this;\n-        }\n-\n-        public Builder vpcOrSubnetUuid(String vpcOrSubnetUuid) {\n-            this._vpcOrSubnetUuid = vpcOrSubnetUuid;\n-            return this;\n-        }\n-\n-        public Builder networkName(String networkName) {\n-            this._networkName = networkName;\n-            return this;\n-        }\n-\n-        public Builder isL2Network(boolean isL2Network) {\n-            this._isL2Network = isL2Network;\n-            return this;\n-        }\n-\n-        public Builder aclRules(List<Map<String, Object>> aclRules) {\n-            this._aclRules = aclRules;\n-            return this;\n-        }\n-\n-        public Builder networkId(long networkId) {\n-            this._networkId = networkId;\n-            return this;\n-        }\n-\n-        public Builder egressDefaultPolicy(boolean egressDefaultPolicy) {\n-            this._egressDefaultPolicy = egressDefaultPolicy;\n-            return this;\n-        }\n-\n-        public Builder acsIngressAcl(Boolean acsIngressAcl) {\n-            this._acsIngressAcl = acsIngressAcl;\n-            return this;\n-        }\n-\n-        public Builder networkReset(boolean networkReset) {\n-            this._networkReset = networkReset;\n-            return this;\n-        }\n-\n-        public Builder domainTemplateName(String domainTemplateName) {\n-            this._domainTemplateName = domainTemplateName;\n-            return this;\n-        }\n-\n-        @Override\n-        public ApplyAclRuleVspCommand build() {\n-            return new ApplyAclRuleVspCommand(_networkAcl, _networkUuid, _networkDomainUuid, _vpcOrSubnetUuid, _networkName, _isL2Network, _aclRules,\n-                    _networkId, _egressDefaultPolicy, _acsIngressAcl, _networkReset, _domainTemplateName);\n-        }\n-    }\n-\n     @Override\n     public boolean executeInSequence() {\n         return false;\n@@ -199,41 +69,21 @@ public boolean equals(Object o) {\n \n         ApplyAclRuleVspCommand that = (ApplyAclRuleVspCommand) o;\n \n-        if (_egressDefaultPolicy != that._egressDefaultPolicy) return false;\n-        if (_isL2Network != that._isL2Network) return false;\n-        if (_networkAcl != that._networkAcl) return false;\n-        if (_networkId != that._networkId) return false;\n         if (_networkReset != that._networkReset) return false;\n         if (_aclRules != null ? !_aclRules.equals(that._aclRules) : that._aclRules != null) return false;\n-        if (_acsIngressAcl != null ? !_acsIngressAcl.equals(that._acsIngressAcl) : that._acsIngressAcl != null)\n-            return false;\n-        if (_domainTemplateName != null ? !_domainTemplateName.equals(that._domainTemplateName) : that._domainTemplateName != null)\n-            return false;\n-        if (_networkDomainUuid != null ? !_networkDomainUuid.equals(that._networkDomainUuid) : that._networkDomainUuid != null)\n-            return false;\n-        if (_networkName != null ? !_networkName.equals(that._networkName) : that._networkName != null) return false;\n-        if (_networkUuid != null ? !_networkUuid.equals(that._networkUuid) : that._networkUuid != null) return false;\n-        if (_vpcOrSubnetUuid != null ? !_vpcOrSubnetUuid.equals(that._vpcOrSubnetUuid) : that._vpcOrSubnetUuid != null)\n-            return false;\n+        if (_aclType != that._aclType) return false;\n+        if (_network != null ? !_network.equals(that._network) : that._network != null) return false;\n \n         return true;\n     }\n \n     @Override\n     public int hashCode() {\n         int result = super.hashCode();\n-        result = 31 * result + (_networkAcl ? 1 : 0);\n-        result = 31 * result + (_networkUuid != null ? _networkUuid.hashCode() : 0);\n-        result = 31 * result + (_networkDomainUuid != null ? _networkDomainUuid.hashCode() : 0);\n-        result = 31 * result + (_vpcOrSubnetUuid != null ? _vpcOrSubnetUuid.hashCode() : 0);\n-        result = 31 * result + (_networkName != null ? _networkName.hashCode() : 0);\n-        result = 31 * result + (_isL2Network ? 1 : 0);\n+        result = 31 * result + (_aclType != null ? _aclType.hashCode() : 0);\n+        result = 31 * result + (_network != null ? _network.hashCode() : 0);\n         result = 31 * result + (_aclRules != null ? _aclRules.hashCode() : 0);\n-        result = 31 * result + (int) (_networkId ^ (_networkId >>> 32));\n-        result = 31 * result + (_egressDefaultPolicy ? 1 : 0);\n-        result = 31 * result + (_acsIngressAcl != null ? _acsIngressAcl.hashCode() : 0);\n         result = 31 * result + (_networkReset ? 1 : 0);\n-        result = 31 * result + (_domainTemplateName != null ? _domainTemplateName.hashCode() : 0);\n         return result;\n     }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/element/ApplyAclRuleVspCommand.java",
                "sha": "50cace6ffcb81ecfe4dd24b01945b60a815dfd9a",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/element/ApplyStaticNatVspCommand.java",
                "changes": 101,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/element/ApplyStaticNatVspCommand.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 90,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/element/ApplyStaticNatVspCommand.java",
                "patch": "@@ -19,100 +19,31 @@\n \n package com.cloud.agent.api.element;\n \n-import com.cloud.agent.api.CmdBuilder;\n import com.cloud.agent.api.Command;\n+import net.nuage.vsp.acs.client.api.model.VspNetwork;\n+import net.nuage.vsp.acs.client.api.model.VspStaticNat;\n \n import java.util.List;\n-import java.util.Map;\n \n public class ApplyStaticNatVspCommand extends Command {\n \n-    private final String _networkDomainUuid;\n-    private final String _networkUuid;\n-    private final String _vpcOrSubnetUuid;\n-    private final boolean _isL3Network;\n-    private final boolean _isVpc;\n-    private final List<Map<String, Object>> _staticNatDetails;\n+    private final VspNetwork _network;\n+    private final List<VspStaticNat> _staticNatDetails;\n \n-    private ApplyStaticNatVspCommand(String networkDomainUuid, String networkUuid, String vpcOrSubnetUuid, boolean isL3Network, boolean isVpc,\n-            List<Map<String, Object>> staticNatDetails) {\n+    public ApplyStaticNatVspCommand(VspNetwork network, List<VspStaticNat> staticNatDetails) {\n         super();\n-        this._networkDomainUuid = networkDomainUuid;\n-        this._networkUuid = networkUuid;\n-        this._vpcOrSubnetUuid = vpcOrSubnetUuid;\n-        this._isL3Network = isL3Network;\n-        this._isVpc = isVpc;\n+        this._network = network;\n         this._staticNatDetails = staticNatDetails;\n     }\n \n-    public String getNetworkDomainUuid() {\n-        return _networkDomainUuid;\n+    public VspNetwork getNetwork() {\n+        return _network;\n     }\n \n-    public String getNetworkUuid() {\n-        return _networkUuid;\n-    }\n-\n-    public String getVpcOrSubnetUuid() {\n-        return _vpcOrSubnetUuid;\n-    }\n-\n-    public boolean isL3Network() {\n-        return _isL3Network;\n-    }\n-\n-    public boolean isVpc() {\n-        return _isVpc;\n-    }\n-\n-    public List<Map<String, Object>> getStaticNatDetails() {\n+    public List<VspStaticNat> getStaticNatDetails() {\n         return _staticNatDetails;\n     }\n \n-    public static class Builder implements CmdBuilder<ApplyStaticNatVspCommand> {\n-        private String _networkDomainUuid;\n-        private String _networkUuid;\n-        private String _vpcOrSubnetUuid;\n-        private boolean _isL3Network;\n-        private boolean _isVpc;\n-        private List<Map<String, Object>> _staticNatDetails;\n-\n-        public Builder networkDomainUuid(String networkDomainUuid) {\n-            this._networkDomainUuid = networkDomainUuid;\n-            return this;\n-        }\n-\n-        public Builder networkUuid(String networkUuid) {\n-            this._networkUuid = networkUuid;\n-            return this;\n-        }\n-\n-        public Builder vpcOrSubnetUuid(String vpcOrSubnetUuid) {\n-            this._vpcOrSubnetUuid = vpcOrSubnetUuid;\n-            return this;\n-        }\n-\n-        public Builder isL3Network(boolean isL3Network) {\n-            this._isL3Network = isL3Network;\n-            return this;\n-        }\n-\n-        public Builder isVpc(boolean isVpc) {\n-            this._isVpc = isVpc;\n-            return this;\n-        }\n-\n-        public Builder staticNatDetails(List<Map<String, Object>> staticNatDetails) {\n-            this._staticNatDetails = staticNatDetails;\n-            return this;\n-        }\n-\n-        @Override\n-        public ApplyStaticNatVspCommand build() {\n-            return new ApplyStaticNatVspCommand(_networkDomainUuid, _networkUuid, _vpcOrSubnetUuid, _isL3Network, _isVpc, _staticNatDetails);\n-        }\n-    }\n-\n     @Override\n     public boolean executeInSequence() {\n         return false;\n@@ -126,27 +57,17 @@ public boolean equals(Object o) {\n \n         ApplyStaticNatVspCommand that = (ApplyStaticNatVspCommand) o;\n \n-        if (_isL3Network != that._isL3Network) return false;\n-        if (_isVpc != that._isVpc) return false;\n-        if (_networkDomainUuid != null ? !_networkDomainUuid.equals(that._networkDomainUuid) : that._networkDomainUuid != null)\n-            return false;\n-        if (_networkUuid != null ? !_networkUuid.equals(that._networkUuid) : that._networkUuid != null) return false;\n+        if (_network != null ? !_network.equals(that._network) : that._network != null) return false;\n         if (_staticNatDetails != null ? !_staticNatDetails.equals(that._staticNatDetails) : that._staticNatDetails != null)\n             return false;\n-        if (_vpcOrSubnetUuid != null ? !_vpcOrSubnetUuid.equals(that._vpcOrSubnetUuid) : that._vpcOrSubnetUuid != null)\n-            return false;\n \n         return true;\n     }\n \n     @Override\n     public int hashCode() {\n         int result = super.hashCode();\n-        result = 31 * result + (_networkDomainUuid != null ? _networkDomainUuid.hashCode() : 0);\n-        result = 31 * result + (_networkUuid != null ? _networkUuid.hashCode() : 0);\n-        result = 31 * result + (_vpcOrSubnetUuid != null ? _vpcOrSubnetUuid.hashCode() : 0);\n-        result = 31 * result + (_isL3Network ? 1 : 0);\n-        result = 31 * result + (_isVpc ? 1 : 0);\n+        result = 31 * result + (_network != null ? _network.hashCode() : 0);\n         result = 31 * result + (_staticNatDetails != null ? _staticNatDetails.hashCode() : 0);\n         return result;\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/element/ApplyStaticNatVspCommand.java",
                "sha": "500f091919b662578d582c999dd1817e7f5c00e7",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/element/ImplementVspCommand.java",
                "changes": 238,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/element/ImplementVspCommand.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 217,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/element/ImplementVspCommand.java",
                "patch": "@@ -19,220 +19,48 @@\n \n package com.cloud.agent.api.element;\n \n-import com.cloud.agent.api.CmdBuilder;\n import com.cloud.agent.api.Command;\n+import net.nuage.vsp.acs.client.api.model.VspAclRule;\n+import net.nuage.vsp.acs.client.api.model.VspNetwork;\n \n import java.util.List;\n-import java.util.Map;\n \n public class ImplementVspCommand extends Command {\n \n-    private final long _networkId;\n-    private final String _networkDomainUuid;\n-    private final String _networkUuid;\n-    private final String _networkName;\n-    private final String _vpcOrSubnetUuid;\n-    private final boolean _isL2Network;\n-    private final boolean _isL3Network;\n-    private final boolean _isVpc;\n-    private final boolean _isShared;\n-    private final String _domainTemplateName;\n-    private final boolean _isFirewallServiceSupported;\n+    private final VspNetwork _network;\n     private final List<String> _dnsServers;\n-    private final List<Map<String, Object>> _ingressFirewallRules;\n-    private final List<Map<String, Object>> _egressFirewallRules;\n-    private final List<String> _acsFipUuid;\n-    private final boolean _egressDefaultPolicy;\n+    private final List<VspAclRule> _ingressFirewallRules;\n+    private final List<VspAclRule> _egressFirewallRules;\n+    private final List<String> _floatingIpUuids;\n \n-    private ImplementVspCommand(long networkId, String networkDomainUuid, String networkUuid, String networkName, String vpcOrSubnetUuid, boolean isL2Network, boolean isL3Network,\n-            boolean isVpc, boolean isShared, String domainTemplateName, boolean isFirewallServiceSupported, List<String> dnsServers, List<Map<String, Object>> ingressFirewallRules,\n-            List<Map<String, Object>> egressFirewallRules, List<String> acsFipUuid, boolean egressDefaultPolicy) {\n+    public ImplementVspCommand(VspNetwork network, List<String> dnsServers, List<VspAclRule> ingressFirewallRules,\n+            List<VspAclRule> egressFirewallRules, List<String> floatingIpUuids) {\n         super();\n-        this._networkId = networkId;\n-        this._networkDomainUuid = networkDomainUuid;\n-        this._networkUuid = networkUuid;\n-        this._networkName = networkName;\n-        this._vpcOrSubnetUuid = vpcOrSubnetUuid;\n-        this._isL2Network = isL2Network;\n-        this._isL3Network = isL3Network;\n-        this._isVpc = isVpc;\n-        this._isShared = isShared;\n-        this._domainTemplateName = domainTemplateName;\n-        this._isFirewallServiceSupported = isFirewallServiceSupported;\n+        this._network = network;\n         this._dnsServers = dnsServers;\n         this._ingressFirewallRules = ingressFirewallRules;\n         this._egressFirewallRules = egressFirewallRules;\n-        this._acsFipUuid = acsFipUuid;\n-        this._egressDefaultPolicy = egressDefaultPolicy;\n+        this._floatingIpUuids = floatingIpUuids;\n     }\n \n-    public long getNetworkId() {\n-        return _networkId;\n-    }\n-\n-    public String getNetworkDomainUuid() {\n-        return _networkDomainUuid;\n-    }\n-\n-    public String getNetworkUuid() {\n-        return _networkUuid;\n-    }\n-\n-    public String getNetworkName() {\n-        return _networkName;\n-    }\n-\n-    public String getVpcOrSubnetUuid() {\n-        return _vpcOrSubnetUuid;\n-    }\n-\n-    public boolean isL2Network() {\n-        return _isL2Network;\n-    }\n-\n-    public boolean isL3Network() {\n-        return _isL3Network;\n-    }\n-\n-    public boolean isVpc() {\n-        return _isVpc;\n-    }\n-\n-    public boolean isShared() {\n-        return _isShared;\n-    }\n-\n-    public String getDomainTemplateName() {\n-        return _domainTemplateName;\n-    }\n-\n-    public boolean isFirewallServiceSupported() {\n-        return _isFirewallServiceSupported;\n+    public VspNetwork getNetwork() {\n+        return _network;\n     }\n \n     public List<String> getDnsServers() {\n         return _dnsServers;\n     }\n \n-    public List<Map<String, Object>> getIngressFirewallRules() {\n+    public List<VspAclRule> getIngressFirewallRules() {\n         return _ingressFirewallRules;\n     }\n \n-    public List<Map<String, Object>> getEgressFirewallRules() {\n+    public List<VspAclRule> getEgressFirewallRules() {\n         return _egressFirewallRules;\n     }\n \n-    public List<String> getAcsFipUuid() {\n-        return _acsFipUuid;\n-    }\n-\n-    public boolean isEgressDefaultPolicy() {\n-        return _egressDefaultPolicy;\n-    }\n-\n-    public static class Builder implements CmdBuilder<ImplementVspCommand> {\n-        private long _networkId;\n-        private String _networkDomainUuid;\n-        private String _networkUuid;\n-        private String _networkName;\n-        private String _vpcOrSubnetUuid;\n-        private boolean _isL2Network;\n-        private boolean _isL3Network;\n-        private boolean _isVpc;\n-        private boolean _isShared;\n-        private String _domainTemplateName;\n-        private boolean _isFirewallServiceSupported;\n-        private List<String> _dnsServers;\n-        private List<Map<String, Object>> _ingressFirewallRules;\n-        private List<Map<String, Object>> _egressFirewallRules;\n-        private List<String> _acsFipUuid;\n-        private boolean _egressDefaultPolicy;\n-\n-        public Builder networkId(long networkId) {\n-            this._networkId = networkId;\n-            return this;\n-        }\n-\n-        public Builder networkDomainUuid(String networkDomainUuid) {\n-            this._networkDomainUuid = networkDomainUuid;\n-            return this;\n-        }\n-\n-        public Builder networkUuid(String networkUuid) {\n-            this._networkUuid = networkUuid;\n-            return this;\n-        }\n-\n-        public Builder networkName(String networkName) {\n-            this._networkName = networkName;\n-            return this;\n-        }\n-\n-        public Builder vpcOrSubnetUuid(String vpcOrSubnetUuid) {\n-            this._vpcOrSubnetUuid = vpcOrSubnetUuid;\n-            return this;\n-        }\n-\n-        public Builder isL2Network(boolean isL2Network) {\n-            this._isL2Network = isL2Network;\n-            return this;\n-        }\n-\n-        public Builder isL3Network(boolean isL3Network) {\n-            this._isL3Network = isL3Network;\n-            return this;\n-        }\n-\n-        public Builder isVpc(boolean isVpc) {\n-            this._isVpc = isVpc;\n-            return this;\n-        }\n-\n-        public Builder isShared(boolean isShared) {\n-            this._isShared = isShared;\n-            return this;\n-        }\n-\n-        public Builder domainTemplateName(String domainTemplateName) {\n-            this._domainTemplateName = domainTemplateName;\n-            return this;\n-        }\n-\n-        public Builder isFirewallServiceSupported(boolean isFirewallServiceSupported) {\n-            this._isFirewallServiceSupported = isFirewallServiceSupported;\n-            return this;\n-        }\n-\n-        public Builder dnsServers(List<String> dnsServers) {\n-            this._dnsServers = dnsServers;\n-            return this;\n-        }\n-\n-        public Builder ingressFirewallRules(List<Map<String, Object>> ingressFirewallRules) {\n-            this._ingressFirewallRules = ingressFirewallRules;\n-            return this;\n-        }\n-\n-        public Builder egressFirewallRules(List<Map<String, Object>> egressFirewallRules) {\n-            this._egressFirewallRules = egressFirewallRules;\n-            return this;\n-        }\n-\n-        public Builder acsFipUuid(List<String> acsFipUuid) {\n-            this._acsFipUuid = acsFipUuid;\n-            return this;\n-        }\n-\n-        public Builder egressDefaultPolicy(boolean egressDefaultPolicy) {\n-            this._egressDefaultPolicy = egressDefaultPolicy;\n-            return this;\n-        }\n-\n-        @Override\n-        public ImplementVspCommand build() {\n-            return new ImplementVspCommand(_networkId, _networkDomainUuid, _networkUuid, _networkName, _vpcOrSubnetUuid, _isL2Network, _isL3Network, _isVpc, _isShared,\n-                    _domainTemplateName, _isFirewallServiceSupported, _dnsServers, _ingressFirewallRules, _egressFirewallRules, _acsFipUuid, _egressDefaultPolicy);\n-        }\n+    public List<String> getFloatingIpUuids() {\n+        return _floatingIpUuids;\n     }\n \n     @Override\n@@ -248,50 +76,26 @@ public boolean equals(Object o) {\n \n         ImplementVspCommand that = (ImplementVspCommand) o;\n \n-        if (_egressDefaultPolicy != that._egressDefaultPolicy) return false;\n-        if (_isFirewallServiceSupported != that._isFirewallServiceSupported) return false;\n-        if (_isL2Network != that._isL2Network) return false;\n-        if (_isL3Network != that._isL3Network) return false;\n-        if (_isShared != that._isShared) return false;\n-        if (_isVpc != that._isVpc) return false;\n-        if (_networkId != that._networkId) return false;\n-        if (_acsFipUuid != null ? !_acsFipUuid.equals(that._acsFipUuid) : that._acsFipUuid != null) return false;\n         if (_dnsServers != null ? !_dnsServers.equals(that._dnsServers) : that._dnsServers != null) return false;\n-        if (_domainTemplateName != null ? !_domainTemplateName.equals(that._domainTemplateName) : that._domainTemplateName != null)\n-            return false;\n         if (_egressFirewallRules != null ? !_egressFirewallRules.equals(that._egressFirewallRules) : that._egressFirewallRules != null)\n             return false;\n-        if (_ingressFirewallRules != null ? !_ingressFirewallRules.equals(that._ingressFirewallRules) : that._ingressFirewallRules != null)\n+        if (_floatingIpUuids != null ? !_floatingIpUuids.equals(that._floatingIpUuids) : that._floatingIpUuids != null)\n             return false;\n-        if (_networkDomainUuid != null ? !_networkDomainUuid.equals(that._networkDomainUuid) : that._networkDomainUuid != null)\n-            return false;\n-        if (_networkName != null ? !_networkName.equals(that._networkName) : that._networkName != null) return false;\n-        if (_networkUuid != null ? !_networkUuid.equals(that._networkUuid) : that._networkUuid != null) return false;\n-        if (_vpcOrSubnetUuid != null ? !_vpcOrSubnetUuid.equals(that._vpcOrSubnetUuid) : that._vpcOrSubnetUuid != null)\n+        if (_ingressFirewallRules != null ? !_ingressFirewallRules.equals(that._ingressFirewallRules) : that._ingressFirewallRules != null)\n             return false;\n+        if (_network != null ? !_network.equals(that._network) : that._network != null) return false;\n \n         return true;\n     }\n \n     @Override\n     public int hashCode() {\n         int result = super.hashCode();\n-        result = 31 * result + (int) (_networkId ^ (_networkId >>> 32));\n-        result = 31 * result + (_networkDomainUuid != null ? _networkDomainUuid.hashCode() : 0);\n-        result = 31 * result + (_networkUuid != null ? _networkUuid.hashCode() : 0);\n-        result = 31 * result + (_networkName != null ? _networkName.hashCode() : 0);\n-        result = 31 * result + (_vpcOrSubnetUuid != null ? _vpcOrSubnetUuid.hashCode() : 0);\n-        result = 31 * result + (_isL2Network ? 1 : 0);\n-        result = 31 * result + (_isL3Network ? 1 : 0);\n-        result = 31 * result + (_isVpc ? 1 : 0);\n-        result = 31 * result + (_isShared ? 1 : 0);\n-        result = 31 * result + (_domainTemplateName != null ? _domainTemplateName.hashCode() : 0);\n-        result = 31 * result + (_isFirewallServiceSupported ? 1 : 0);\n+        result = 31 * result + (_network != null ? _network.hashCode() : 0);\n         result = 31 * result + (_dnsServers != null ? _dnsServers.hashCode() : 0);\n         result = 31 * result + (_ingressFirewallRules != null ? _ingressFirewallRules.hashCode() : 0);\n         result = 31 * result + (_egressFirewallRules != null ? _egressFirewallRules.hashCode() : 0);\n-        result = 31 * result + (_acsFipUuid != null ? _acsFipUuid.hashCode() : 0);\n-        result = 31 * result + (_egressDefaultPolicy ? 1 : 0);\n+        result = 31 * result + (_floatingIpUuids != null ? _floatingIpUuids.hashCode() : 0);\n         return result;\n     }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/element/ImplementVspCommand.java",
                "sha": "2145f601722162904d68470bbc97190bc1a878ad",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/element/ShutDownVpcVspCommand.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/element/ShutDownVpcVspCommand.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 26,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/element/ShutDownVpcVspCommand.java",
                "patch": "@@ -19,20 +19,23 @@\n \n package com.cloud.agent.api.element;\n \n-import com.cloud.agent.api.CmdBuilder;\n import com.cloud.agent.api.Command;\n \n+import java.util.List;\n+\n public class ShutDownVpcVspCommand extends Command {\n \n     private final String _domainUuid;\n     private final String _vpcUuid;\n     private final String _domainTemplateName;\n+    private final List<String> _domainRouterUuids;\n \n-    private ShutDownVpcVspCommand(String domainUuid, String vpcUuid, String domainTemplateName) {\n+    public ShutDownVpcVspCommand(String domainUuid, String vpcUuid, String domainTemplateName, List<String> domainRouterUuids) {\n         super();\n         this._domainUuid = domainUuid;\n         this._vpcUuid = vpcUuid;\n         this._domainTemplateName = domainTemplateName;\n+        this._domainRouterUuids = domainRouterUuids;\n     }\n \n     public String getDomainUuid() {\n@@ -47,30 +50,8 @@ public String getDomainTemplateName() {\n         return _domainTemplateName;\n     }\n \n-    public static class Builder implements CmdBuilder<ShutDownVpcVspCommand> {\n-        private String _domainUuid;\n-        private String _vpcUuid;\n-        private String _domainTemplateName;\n-\n-        public Builder domainUuid(String domainUuid) {\n-            this._domainUuid = domainUuid;\n-            return this;\n-        }\n-\n-        public Builder vpcUuid(String vpcUuid) {\n-            this._vpcUuid = vpcUuid;\n-            return this;\n-        }\n-\n-        public Builder domainTemplateName(String domainTemplateName) {\n-            this._domainTemplateName = domainTemplateName;\n-            return this;\n-        }\n-\n-        @Override\n-        public ShutDownVpcVspCommand build() {\n-            return new ShutDownVpcVspCommand(_domainUuid, _vpcUuid, _domainTemplateName);\n-        }\n+    public List<String> getDomainRouterUuids() {\n+        return _domainRouterUuids;\n     }\n \n     @Override\n@@ -86,6 +67,8 @@ public boolean equals(Object o) {\n \n         ShutDownVpcVspCommand that = (ShutDownVpcVspCommand) o;\n \n+        if (_domainRouterUuids != null ? !_domainRouterUuids.equals(that._domainRouterUuids) : that._domainRouterUuids != null)\n+            return false;\n         if (_domainTemplateName != null ? !_domainTemplateName.equals(that._domainTemplateName) : that._domainTemplateName != null)\n             return false;\n         if (_domainUuid != null ? !_domainUuid.equals(that._domainUuid) : that._domainUuid != null) return false;\n@@ -100,6 +83,7 @@ public int hashCode() {\n         result = 31 * result + (_domainUuid != null ? _domainUuid.hashCode() : 0);\n         result = 31 * result + (_vpcUuid != null ? _vpcUuid.hashCode() : 0);\n         result = 31 * result + (_domainTemplateName != null ? _domainTemplateName.hashCode() : 0);\n+        result = 31 * result + (_domainRouterUuids != null ? _domainRouterUuids.hashCode() : 0);\n         return result;\n     }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/element/ShutDownVpcVspCommand.java",
                "sha": "6ad4ec6c401fdf7c72029a73edf313ad25e36646",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/guru/DeallocateVmVspCommand.java",
                "changes": 187,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/guru/DeallocateVmVspCommand.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 165,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/guru/DeallocateVmVspCommand.java",
                "patch": "@@ -19,156 +19,34 @@\n \n package com.cloud.agent.api.guru;\n \n-import com.cloud.agent.api.CmdBuilder;\n import com.cloud.agent.api.Command;\n+import net.nuage.vsp.acs.client.api.model.VspNetwork;\n+import net.nuage.vsp.acs.client.api.model.VspNic;\n+import net.nuage.vsp.acs.client.api.model.VspVm;\n \n public class DeallocateVmVspCommand extends Command {\n \n-    private final String _networkUuid;\n-    private final String _nicFromDdUuid;\n-    private final String _nicMacAddress;\n-    private final String _nicIp4Address;\n-    private final boolean _isL3Network;\n-    private final boolean _isSharedNetwork;\n-    private final String _vpcUuid;\n-    private final String _networksDomainUuid;\n-    private final String _vmInstanceName;\n-    private final String _vmUuid;\n-    private final boolean _isExpungingState;\n+    private final VspNetwork _network;\n+    private final VspVm _vm;\n+    private final VspNic _nic;\n \n-    private DeallocateVmVspCommand(String networkUuid, String nicFromDdUuid, String nicMacAddress, String nicIp4Address, boolean isL3Network, boolean isSharedNetwork, String vpcUuid,\n-            String networksDomainUuid, String vmInstanceName, String vmUuid, boolean isExpungingState) {\n+    public DeallocateVmVspCommand(VspNetwork network, VspVm vm, VspNic nic) {\n         super();\n-        this._networkUuid = networkUuid;\n-        this._nicFromDdUuid = nicFromDdUuid;\n-        this._nicMacAddress = nicMacAddress;\n-        this._nicIp4Address = nicIp4Address;\n-        this._isL3Network = isL3Network;\n-        this._isSharedNetwork = isSharedNetwork;\n-        this._vpcUuid = vpcUuid;\n-        this._networksDomainUuid = networksDomainUuid;\n-        this._vmInstanceName = vmInstanceName;\n-        this._vmUuid = vmUuid;\n-        this._isExpungingState = isExpungingState;\n+        this._network = network;\n+        this._vm = vm;\n+        this._nic = nic;\n     }\n \n-    public String getNetworkUuid() {\n-        return _networkUuid;\n+    public VspNetwork getNetwork() {\n+        return this._network;\n     }\n \n-    public String getNicFromDdUuid() {\n-        return _nicFromDdUuid;\n+    public VspVm getVm() {\n+        return this._vm;\n     }\n \n-    public String getNicMacAddress() {\n-        return _nicMacAddress;\n-    }\n-\n-    public String getNicIp4Address() {\n-        return _nicIp4Address;\n-    }\n-\n-    public boolean isL3Network() {\n-        return _isL3Network;\n-    }\n-\n-    public boolean isSharedNetwork() {\n-        return _isSharedNetwork;\n-    }\n-\n-    public String getVpcUuid() {\n-        return _vpcUuid;\n-    }\n-\n-    public String getNetworksDomainUuid() {\n-        return _networksDomainUuid;\n-    }\n-\n-    public String getVmInstanceName() {\n-        return _vmInstanceName;\n-    }\n-\n-    public String getVmUuid() {\n-        return _vmUuid;\n-    }\n-\n-    public boolean isExpungingState() {\n-        return _isExpungingState;\n-    }\n-\n-    public static class Builder implements CmdBuilder<DeallocateVmVspCommand> {\n-        private String _networkUuid;\n-        private String _nicFromDdUuid;\n-        private String _nicMacAddress;\n-        private String _nicIp4Address;\n-        private boolean _isL3Network;\n-        private boolean _isSharedNetwork;\n-        private String _vpcUuid;\n-        private String _networksDomainUuid;\n-        private String _vmInstanceName;\n-        private String _vmUuid;\n-        private boolean _isExpungingState;\n-\n-        public Builder networkUuid(String networkUuid) {\n-            this._networkUuid = networkUuid;\n-            return this;\n-        }\n-\n-        public Builder nicFromDbUuid(String nicFromDbUuid) {\n-            this._nicFromDdUuid = nicFromDbUuid;\n-            return this;\n-        }\n-\n-        public Builder nicMacAddress(String nicMacAddress) {\n-            this._nicMacAddress = nicMacAddress;\n-            return this;\n-        }\n-\n-        public Builder nicIp4Address(String nicIp4Address) {\n-            this._nicIp4Address = nicIp4Address;\n-            return this;\n-        }\n-\n-        public Builder isL3Network(boolean isL3Network) {\n-            this._isL3Network = isL3Network;\n-            return this;\n-        }\n-\n-        public Builder isSharedNetwork(boolean isSharedNetwork) {\n-            this._isSharedNetwork = isSharedNetwork;\n-            return this;\n-        }\n-\n-        public Builder vpcUuid(String vpcUuid) {\n-            this._vpcUuid = vpcUuid;\n-            return this;\n-        }\n-\n-        public Builder networksDomainUuid(String networksDomainUuid) {\n-            this._networksDomainUuid = networksDomainUuid;\n-            return this;\n-        }\n-\n-        public Builder vmInstanceName(String vmInstanceName) {\n-            this._vmInstanceName = vmInstanceName;\n-            return this;\n-        }\n-\n-        public Builder vmUuid(String vmUuid) {\n-            this._vmUuid = vmUuid;\n-            return this;\n-        }\n-\n-        public Builder isExpungingState(boolean isExpungingState) {\n-            this._isExpungingState = isExpungingState;\n-            return this;\n-        }\n-\n-        @Override\n-        public DeallocateVmVspCommand build() {\n-            return new DeallocateVmVspCommand(_networkUuid,_nicFromDdUuid, _nicMacAddress, _nicIp4Address, _isL3Network, _isSharedNetwork, _vpcUuid,\n-                    _networksDomainUuid, _vmInstanceName, _vmUuid, _isExpungingState);\n-        }\n+    public VspNic getNic() {\n+        return this._nic;\n     }\n \n     @Override\n@@ -184,40 +62,19 @@ public boolean equals(Object o) {\n \n         DeallocateVmVspCommand that = (DeallocateVmVspCommand) o;\n \n-        if (_isExpungingState != that._isExpungingState) return false;\n-        if (_isL3Network != that._isL3Network) return false;\n-        if (_isSharedNetwork != that._isSharedNetwork) return false;\n-        if (_networkUuid != null ? !_networkUuid.equals(that._networkUuid) : that._networkUuid != null) return false;\n-        if (_networksDomainUuid != null ? !_networksDomainUuid.equals(that._networksDomainUuid) : that._networksDomainUuid != null)\n-            return false;\n-        if (_nicFromDdUuid != null ? !_nicFromDdUuid.equals(that._nicFromDdUuid) : that._nicFromDdUuid != null)\n-            return false;\n-        if (_nicIp4Address != null ? !_nicIp4Address.equals(that._nicIp4Address) : that._nicIp4Address != null)\n-            return false;\n-        if (_nicMacAddress != null ? !_nicMacAddress.equals(that._nicMacAddress) : that._nicMacAddress != null)\n-            return false;\n-        if (_vmInstanceName != null ? !_vmInstanceName.equals(that._vmInstanceName) : that._vmInstanceName != null)\n-            return false;\n-        if (_vmUuid != null ? !_vmUuid.equals(that._vmUuid) : that._vmUuid != null) return false;\n-        if (_vpcUuid != null ? !_vpcUuid.equals(that._vpcUuid) : that._vpcUuid != null) return false;\n+        if (_network != null ? !_network.equals(that._network) : that._network != null) return false;\n+        if (_nic != null ? !_nic.equals(that._nic) : that._nic != null) return false;\n+        if (_vm != null ? !_vm.equals(that._vm) : that._vm != null) return false;\n \n         return true;\n     }\n \n     @Override\n     public int hashCode() {\n         int result = super.hashCode();\n-        result = 31 * result + (_networkUuid != null ? _networkUuid.hashCode() : 0);\n-        result = 31 * result + (_nicFromDdUuid != null ? _nicFromDdUuid.hashCode() : 0);\n-        result = 31 * result + (_nicMacAddress != null ? _nicMacAddress.hashCode() : 0);\n-        result = 31 * result + (_nicIp4Address != null ? _nicIp4Address.hashCode() : 0);\n-        result = 31 * result + (_isL3Network ? 1 : 0);\n-        result = 31 * result + (_isSharedNetwork ? 1 : 0);\n-        result = 31 * result + (_vpcUuid != null ? _vpcUuid.hashCode() : 0);\n-        result = 31 * result + (_networksDomainUuid != null ? _networksDomainUuid.hashCode() : 0);\n-        result = 31 * result + (_vmInstanceName != null ? _vmInstanceName.hashCode() : 0);\n-        result = 31 * result + (_vmUuid != null ? _vmUuid.hashCode() : 0);\n-        result = 31 * result + (_isExpungingState ? 1 : 0);\n+        result = 31 * result + (_network != null ? _network.hashCode() : 0);\n+        result = 31 * result + (_vm != null ? _vm.hashCode() : 0);\n+        result = 31 * result + (_nic != null ? _nic.hashCode() : 0);\n         return result;\n     }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/guru/DeallocateVmVspCommand.java",
                "sha": "10dffccaccd2cc7450ea519866ed698ac5f705a6",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/guru/ImplementNetworkVspCommand.java",
                "changes": 304,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/guru/ImplementNetworkVspCommand.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 296,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/guru/ImplementNetworkVspCommand.java",
                "patch": "@@ -19,272 +19,30 @@\n \n package com.cloud.agent.api.guru;\n \n-import com.cloud.agent.api.CmdBuilder;\n import com.cloud.agent.api.Command;\n+import net.nuage.vsp.acs.client.api.model.VspNetwork;\n \n-import java.util.Collection;\n import java.util.List;\n \n public class ImplementNetworkVspCommand extends Command {\n \n-    private final String _networkDomainName;\n-    private final String _networkDomainPath;\n-    private final String _networkDomainUuid;\n-    private final String _networkAccountName;\n-    private final String _networkAccountUuid;\n-    private final String _networkName;\n-    private final String _networkCidr;\n-    private final String _networkGateway;\n-    private final Long _networkAclId;\n+    private final VspNetwork _network;\n     private final List<String> _dnsServers;\n-    private final List<String> _gatewaySystemIds;\n-    private final String _networkUuid;\n-    private final boolean _isL3Network;\n-    private final boolean _isVpc;\n-    private final boolean _isSharedNetwork;\n-    private final String _vpcName;\n-    private final String _vpcUuid;\n-    private final boolean _defaultEgressPolicy;\n-    private final List<String[]> _ipAddressRange;\n-    private final String _domainTemplateName;\n \n-    private ImplementNetworkVspCommand(String networkDomainName, String networkDomainPath, String networkDomainUuid, String networkAccountName, String networkAccountUuid,\n-            String networkName, String networkCidr, String networkGateway, Long networkAclId, List<String> dnsServers, List<String> gatewaySystemIds, String networkUuid,\n-            boolean isL3Network, boolean isVpc, boolean isSharedNetwork, String vpcName, String vpcUuid, boolean defaultEgressPolicy, List<String[]> ipAddressRange,\n-            String domainTemplateName) {\n+    public ImplementNetworkVspCommand(VspNetwork network, List<String> dnsServers) {\n         super();\n-        this._networkDomainName = networkDomainName;\n-        this._networkDomainPath = networkDomainPath;\n-        this._networkDomainUuid = networkDomainUuid;\n-        this._networkAccountName = networkAccountName;\n-        this._networkAccountUuid = networkAccountUuid;\n-        this._networkName = networkName;\n-        this._networkCidr = networkCidr;\n-        this._networkGateway = networkGateway;\n-        this._networkAclId = networkAclId;\n+        this._network = network;\n         this._dnsServers = dnsServers;\n-        this._gatewaySystemIds = gatewaySystemIds;\n-        this._networkUuid = networkUuid;\n-        this._isL3Network = isL3Network;\n-        this._isVpc = isVpc;\n-        this._isSharedNetwork = isSharedNetwork;\n-        this._vpcName = vpcName;\n-        this._vpcUuid = vpcUuid;\n-        this._defaultEgressPolicy = defaultEgressPolicy;\n-        this._ipAddressRange = ipAddressRange;\n-        this._domainTemplateName = domainTemplateName;\n     }\n \n-    public String getNetworkDomainName() {\n-        return _networkDomainName;\n-    }\n-\n-    public String getNetworkDomainPath() {\n-        return _networkDomainPath;\n-    }\n-\n-    public String getNetworkDomainUuid() {\n-        return _networkDomainUuid;\n-    }\n-\n-    public String getNetworkAccountName() {\n-        return _networkAccountName;\n-    }\n-\n-    public String getNetworkAccountUuid() {\n-        return _networkAccountUuid;\n-    }\n-\n-    public String getNetworkName() {\n-        return _networkName;\n-    }\n-\n-    public String getNetworkCidr() {\n-        return _networkCidr;\n-    }\n-\n-    public String getNetworkGateway() {\n-        return _networkGateway;\n-    }\n-\n-    public Long getNetworkAclId() {\n-        return _networkAclId;\n+    public VspNetwork getNetwork() {\n+        return _network;\n     }\n \n     public List<String> getDnsServers() {\n         return _dnsServers;\n     }\n \n-    public List<String> getGatewaySystemIds() {\n-        return _gatewaySystemIds;\n-    }\n-\n-    public String getNetworkUuid() {\n-        return _networkUuid;\n-    }\n-\n-    public boolean isL3Network() {\n-        return _isL3Network;\n-    }\n-\n-    public boolean isVpc() {\n-        return _isVpc;\n-    }\n-\n-    public boolean isSharedNetwork() {\n-        return _isSharedNetwork;\n-    }\n-\n-    public String getVpcName() {\n-        return _vpcName;\n-    }\n-\n-    public String getVpcUuid() {\n-        return _vpcUuid;\n-    }\n-\n-    public boolean isDefaultEgressPolicy() {\n-        return _defaultEgressPolicy;\n-    }\n-\n-    public Collection<String[]> getIpAddressRange() {\n-        return _ipAddressRange;\n-    }\n-\n-    public String getDomainTemplateName() {\n-        return _domainTemplateName;\n-    }\n-\n-    public static class Builder implements CmdBuilder<ImplementNetworkVspCommand> {\n-        private String _networkDomainName;\n-        private String _networkDomainPath;\n-        private String _networkDomainUuid;\n-        private String _networkAccountName;\n-        private String _networkAccountUuid;\n-        private String _networkName;\n-        private String _networkCidr;\n-        private String _networkGateway;\n-        private Long _networkAclId;\n-        private List<String> _dnsServers;\n-        private List<String> _gatewaySystemIds;\n-        private String _networkUuid;\n-        private boolean _isL3Network;\n-        private boolean _isVpc;\n-        private boolean _isSharedNetwork;\n-        private String _vpcName;\n-        private String _vpcUuid;\n-        private boolean _defaultEgressPolicy;\n-        private List<String[]> _ipAddressRange;\n-        private String _domainTemplateName;\n-\n-        public Builder networkDomainName(String networkDomainName) {\n-            this._networkDomainName = networkDomainName;\n-            return this;\n-        }\n-\n-        public Builder networkDomainPath(String networkDomainPath) {\n-            this._networkDomainPath = networkDomainPath;\n-            return this;\n-        }\n-\n-        public Builder networkDomainUuid(String networkDomainUuid) {\n-            this._networkDomainUuid = networkDomainUuid;\n-            return this;\n-        }\n-\n-        public Builder networkAccountName(String networkAccountName) {\n-            this._networkAccountName = networkAccountName;\n-            return this;\n-        }\n-\n-        public Builder networkAccountUuid(String networkAccountUuid) {\n-            this._networkAccountUuid = networkAccountUuid;\n-            return this;\n-        }\n-\n-        public Builder networkName(String networkName) {\n-            this._networkName = networkName;\n-            return this;\n-        }\n-\n-        public Builder networkCidr(String networkCidr) {\n-            this._networkCidr = networkCidr;\n-            return this;\n-        }\n-\n-        public Builder networkGateway(String networkGateway) {\n-            this._networkGateway = networkGateway;\n-            return this;\n-        }\n-\n-        public Builder networkAclId(Long networkAclId) {\n-            this._networkAclId = networkAclId;\n-            return this;\n-        }\n-\n-        public Builder dnsServers(List<String> dnsServers) {\n-            this._dnsServers = dnsServers;\n-            return this;\n-        }\n-\n-        public Builder gatewaySystemIds(List<String> gatewaySystemIds) {\n-            this._gatewaySystemIds = gatewaySystemIds;\n-            return this;\n-        }\n-\n-        public Builder networkUuid(String networkUuid) {\n-            this._networkUuid = networkUuid;\n-            return this;\n-        }\n-\n-        public Builder isL3Network(boolean isL3Network) {\n-            this._isL3Network = isL3Network;\n-            return this;\n-        }\n-\n-        public Builder isVpc(boolean isVpc) {\n-            this._isVpc = isVpc;\n-            return this;\n-        }\n-\n-        public Builder isSharedNetwork(boolean isSharedNetwork) {\n-            this._isSharedNetwork = isSharedNetwork;\n-            return this;\n-        }\n-\n-        public Builder vpcName(String vpcName) {\n-            this._vpcName = vpcName;\n-            return this;\n-        }\n-\n-        public Builder vpcUuid(String vpcUuid) {\n-            this._vpcUuid = vpcUuid;\n-            return this;\n-        }\n-\n-        public Builder defaultEgressPolicy(boolean defaultEgressPolicy) {\n-            this._defaultEgressPolicy = defaultEgressPolicy;\n-            return this;\n-        }\n-\n-        public Builder ipAddressRange(List<String[]> ipAddressRange) {\n-            this._ipAddressRange = ipAddressRange;\n-            return this;\n-        }\n-\n-        public Builder domainTemplateName(String domainTemplateName) {\n-            this._domainTemplateName = domainTemplateName;\n-            return this;\n-        }\n-\n-        @Override\n-        public ImplementNetworkVspCommand build() {\n-            return new ImplementNetworkVspCommand(_networkDomainName, _networkDomainPath, _networkDomainUuid, _networkAccountName, _networkAccountUuid, _networkName,\n-                    _networkCidr, _networkGateway, _networkAclId, _dnsServers, _gatewaySystemIds, _networkUuid, _isL3Network, _isVpc, _isSharedNetwork, _vpcName, _vpcUuid,\n-                    _defaultEgressPolicy, _ipAddressRange, _domainTemplateName);\n-        }\n-    }\n-\n     @Override\n     public boolean executeInSequence() {\n         return false;\n@@ -298,63 +56,17 @@ public boolean equals(Object o) {\n \n         ImplementNetworkVspCommand that = (ImplementNetworkVspCommand) o;\n \n-        if (_defaultEgressPolicy != that._defaultEgressPolicy) return false;\n-        if (_isL3Network != that._isL3Network) return false;\n-        if (_isSharedNetwork != that._isSharedNetwork) return false;\n-        if (_isVpc != that._isVpc) return false;\n         if (_dnsServers != null ? !_dnsServers.equals(that._dnsServers) : that._dnsServers != null) return false;\n-        if (_domainTemplateName != null ? !_domainTemplateName.equals(that._domainTemplateName) : that._domainTemplateName != null)\n-            return false;\n-        if (_gatewaySystemIds != null ? !_gatewaySystemIds.equals(that._gatewaySystemIds) : that._gatewaySystemIds != null)\n-            return false;\n-        if (_ipAddressRange != null ? !_ipAddressRange.equals(that._ipAddressRange) : that._ipAddressRange != null)\n-            return false;\n-        if (_networkAccountName != null ? !_networkAccountName.equals(that._networkAccountName) : that._networkAccountName != null)\n-            return false;\n-        if (_networkAccountUuid != null ? !_networkAccountUuid.equals(that._networkAccountUuid) : that._networkAccountUuid != null)\n-            return false;\n-        if (_networkAclId != null ? !_networkAclId.equals(that._networkAclId) : that._networkAclId != null)\n-            return false;\n-        if (_networkCidr != null ? !_networkCidr.equals(that._networkCidr) : that._networkCidr != null) return false;\n-        if (_networkDomainName != null ? !_networkDomainName.equals(that._networkDomainName) : that._networkDomainName != null)\n-            return false;\n-        if (_networkDomainPath != null ? !_networkDomainPath.equals(that._networkDomainPath) : that._networkDomainPath != null)\n-            return false;\n-        if (_networkDomainUuid != null ? !_networkDomainUuid.equals(that._networkDomainUuid) : that._networkDomainUuid != null)\n-            return false;\n-        if (_networkGateway != null ? !_networkGateway.equals(that._networkGateway) : that._networkGateway != null)\n-            return false;\n-        if (_networkName != null ? !_networkName.equals(that._networkName) : that._networkName != null) return false;\n-        if (_networkUuid != null ? !_networkUuid.equals(that._networkUuid) : that._networkUuid != null) return false;\n-        if (_vpcName != null ? !_vpcName.equals(that._vpcName) : that._vpcName != null) return false;\n-        if (_vpcUuid != null ? !_vpcUuid.equals(that._vpcUuid) : that._vpcUuid != null) return false;\n+        if (_network != null ? !_network.equals(that._network) : that._network != null) return false;\n \n         return true;\n     }\n \n     @Override\n     public int hashCode() {\n         int result = super.hashCode();\n-        result = 31 * result + (_networkDomainName != null ? _networkDomainName.hashCode() : 0);\n-        result = 31 * result + (_networkDomainPath != null ? _networkDomainPath.hashCode() : 0);\n-        result = 31 * result + (_networkDomainUuid != null ? _networkDomainUuid.hashCode() : 0);\n-        result = 31 * result + (_networkAccountName != null ? _networkAccountName.hashCode() : 0);\n-        result = 31 * result + (_networkAccountUuid != null ? _networkAccountUuid.hashCode() : 0);\n-        result = 31 * result + (_networkName != null ? _networkName.hashCode() : 0);\n-        result = 31 * result + (_networkCidr != null ? _networkCidr.hashCode() : 0);\n-        result = 31 * result + (_networkGateway != null ? _networkGateway.hashCode() : 0);\n-        result = 31 * result + (_networkAclId != null ? _networkAclId.hashCode() : 0);\n+        result = 31 * result + (_network != null ? _network.hashCode() : 0);\n         result = 31 * result + (_dnsServers != null ? _dnsServers.hashCode() : 0);\n-        result = 31 * result + (_gatewaySystemIds != null ? _gatewaySystemIds.hashCode() : 0);\n-        result = 31 * result + (_networkUuid != null ? _networkUuid.hashCode() : 0);\n-        result = 31 * result + (_isL3Network ? 1 : 0);\n-        result = 31 * result + (_isVpc ? 1 : 0);\n-        result = 31 * result + (_isSharedNetwork ? 1 : 0);\n-        result = 31 * result + (_vpcName != null ? _vpcName.hashCode() : 0);\n-        result = 31 * result + (_vpcUuid != null ? _vpcUuid.hashCode() : 0);\n-        result = 31 * result + (_defaultEgressPolicy ? 1 : 0);\n-        result = 31 * result + (_ipAddressRange != null ? _ipAddressRange.hashCode() : 0);\n-        result = 31 * result + (_domainTemplateName != null ? _domainTemplateName.hashCode() : 0);\n         return result;\n     }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/guru/ImplementNetworkVspCommand.java",
                "sha": "bb3575690d2b3fd3fd3f843624584e72967b10f8",
                "status": "modified"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/guru/ReserveVmInterfaceVspCommand.java",
                "changes": 369,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/guru/ReserveVmInterfaceVspCommand.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 340,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/guru/ReserveVmInterfaceVspCommand.java",
                "patch": "@@ -19,303 +19,41 @@\n \n package com.cloud.agent.api.guru;\n \n-import com.cloud.agent.api.CmdBuilder;\n import com.cloud.agent.api.Command;\n+import net.nuage.vsp.acs.client.api.model.VspNetwork;\n+import net.nuage.vsp.acs.client.api.model.VspNic;\n+import net.nuage.vsp.acs.client.api.model.VspStaticNat;\n+import net.nuage.vsp.acs.client.api.model.VspVm;\n \n public class ReserveVmInterfaceVspCommand extends Command {\n \n-    private final String _nicUuid;\n-    private final String _nicMacAddress;\n-    private final String _networkUuid;\n-    private final boolean _isL3Network;\n-    private final boolean _isSharedNetwork;\n-    private final String _vpcUuid;\n-    private final String _networkDomainUuid;\n-    private final String _networksAccountUuid;\n-    private final boolean _isDomainRouter;\n-    private final String _domainRouterIp;\n-    private final String _vmInstanceName;\n-    private final String _vmUuid;\n-    private final String _vmUserName;\n-    private final String _vmUserDomainName;\n-    private final boolean _useStaticIp;\n-    private final String _staticIp;\n-    private final String _staticNatIpUuid;\n-    private final String _staticNatIpAddress;\n-    private final boolean _isStaticNatIpAllocated;\n-    private final boolean _isOneToOneNat;\n-    private final String _staticNatVlanUuid;\n-    private final String _staticNatVlanGateway;\n-    private final String _staticNatVlanNetmask;\n+    private final VspNetwork _network;\n+    private final VspVm _vm;\n+    private final VspNic _nic;\n+    private final VspStaticNat _staticNat;\n \n-    private ReserveVmInterfaceVspCommand(String nicUuid, String nicMacAddress, String networkUuid, boolean isL3Network, boolean isSharedNetwork, String vpcUuid, String networkDomainUuid,\n-            String networksAccountUuid, boolean isDomainRouter, String domainRouterIp, String vmInstanceName, String vmUuid, String vmUserName, String vmUserDomainName,\n-            boolean useStaticIp, String staticIp, String staticNatIpUuid, String staticNatIpAddress, boolean isStaticNatIpAllocated, boolean isOneToOneNat, String staticNatVlanUuid,\n-            String staticNatVlanGateway, String staticNatVlanNetmask) {\n+    public ReserveVmInterfaceVspCommand(VspNetwork network, VspVm vm, VspNic nic, VspStaticNat staticNat) {\n         super();\n-        this._nicUuid = nicUuid;\n-        this._nicMacAddress = nicMacAddress;\n-        this._networkUuid = networkUuid;\n-        this._isL3Network = isL3Network;\n-        this._isSharedNetwork = isSharedNetwork;\n-        this._vpcUuid = vpcUuid;\n-        this._networkDomainUuid = networkDomainUuid;\n-        this._networksAccountUuid = networksAccountUuid;\n-        this._isDomainRouter = isDomainRouter;\n-        this._domainRouterIp = domainRouterIp;\n-        this._vmInstanceName = vmInstanceName;\n-        this._vmUuid = vmUuid;\n-        this._vmUserName = vmUserName;\n-        this._vmUserDomainName = vmUserDomainName;\n-        this._useStaticIp = useStaticIp;\n-        this._staticIp = staticIp;\n-        this._staticNatIpUuid = staticNatIpUuid;\n-        this._staticNatIpAddress = staticNatIpAddress;\n-        this._isStaticNatIpAllocated = isStaticNatIpAllocated;\n-        this._isOneToOneNat = isOneToOneNat;\n-        this._staticNatVlanUuid = staticNatVlanUuid;\n-        this._staticNatVlanGateway = staticNatVlanGateway;\n-        this._staticNatVlanNetmask = staticNatVlanNetmask;\n+        this._network = network;\n+        this._vm = vm;\n+        this._nic = nic;\n+        this._staticNat = staticNat;\n     }\n \n-    public String getNicUuid() {\n-        return _nicUuid;\n+    public VspNetwork getNetwork() {\n+        return _network;\n     }\n \n-    public String getNicMacAddress() {\n-        return _nicMacAddress;\n+    public VspVm getVm() {\n+        return _vm;\n     }\n \n-    public String getNetworkUuid() {\n-        return _networkUuid;\n+    public VspNic getNic() {\n+        return _nic;\n     }\n \n-    public boolean isL3Network() {\n-        return _isL3Network;\n-    }\n-\n-    public boolean isSharedNetwork() {\n-        return _isSharedNetwork;\n-    }\n-\n-    public String getVpcUuid() {\n-        return _vpcUuid;\n-    }\n-\n-    public String getNetworkDomainUuid() {\n-        return _networkDomainUuid;\n-    }\n-\n-    public String getNetworksAccountUuid() {\n-        return _networksAccountUuid;\n-    }\n-\n-    public boolean isDomainRouter() {\n-        return _isDomainRouter;\n-    }\n-\n-    public String getDomainRouterIp() {\n-        return _domainRouterIp;\n-    }\n-\n-    public String getVmInstanceName() {\n-        return _vmInstanceName;\n-    }\n-\n-    public String getVmUuid() {\n-        return _vmUuid;\n-    }\n-\n-    public String getVmUserName() {\n-        return _vmUserName;\n-    }\n-\n-    public String getVmUserDomainName() {\n-        return _vmUserDomainName;\n-    }\n-\n-    public boolean useStaticIp() {\n-        return _useStaticIp;\n-    }\n-\n-    public String getStaticIp() {\n-        return _staticIp;\n-    }\n-\n-    public String getStaticNatIpUuid() {\n-        return _staticNatIpUuid;\n-    }\n-\n-    public String getStaticNatIpAddress() {\n-        return _staticNatIpAddress;\n-    }\n-\n-    public boolean isStaticNatIpAllocated() {\n-        return _isStaticNatIpAllocated;\n-    }\n-\n-    public boolean isOneToOneNat() {\n-        return _isOneToOneNat;\n-    }\n-\n-    public String getStaticNatVlanUuid() {\n-        return _staticNatVlanUuid;\n-    }\n-\n-    public String getStaticNatVlanGateway() {\n-        return _staticNatVlanGateway;\n-    }\n-\n-    public String getStaticNatVlanNetmask() {\n-        return _staticNatVlanNetmask;\n-    }\n-\n-    public static class Builder implements CmdBuilder<ReserveVmInterfaceVspCommand> {\n-        private String _nicUuid;\n-        private String _nicMacAddress;\n-        private String _networkUuid;\n-        private boolean _isL3Network;\n-        private boolean _isSharedNetwork;\n-        private String _vpcUuid;\n-        private String _networkDomainUuid;\n-        private String _networksAccountUuid;\n-        private boolean _isDomainRouter;\n-        private String _domainRouterIp;\n-        private String _vmInstanceName;\n-        private String _vmUuid;\n-        private String _vmUserName;\n-        private String _vmUserDomainName;\n-        private boolean _useStaticIp;\n-        private String _staticIp;\n-        private String _staticNatIpUuid;\n-        private String _staticNatIpAddress;\n-        private boolean _isStaticNatIpAllocated;\n-        private boolean _isOneToOneNat;\n-        private String _staticNatVlanUuid;\n-        private String _staticNatVlanGateway;\n-        private String _staticNatVlanNetmask;\n-\n-        public Builder nicUuid(String nicUuid) {\n-            this._nicUuid = nicUuid;\n-            return this;\n-        }\n-\n-        public Builder nicMacAddress(String nicMacAddress) {\n-            this._nicMacAddress = nicMacAddress;\n-            return this;\n-        }\n-\n-        public Builder networkUuid(String networkUuid) {\n-            this._networkUuid = networkUuid;\n-            return this;\n-        }\n-\n-        public Builder isL3Network(boolean isL3Network) {\n-            this._isL3Network = isL3Network;\n-            return this;\n-        }\n-\n-        public Builder isSharedNetwork(boolean isSharedNetwork) {\n-            this._isSharedNetwork = isSharedNetwork;\n-            return this;\n-        }\n-\n-        public Builder vpcUuid(String vpcUuid) {\n-            this._vpcUuid = vpcUuid;\n-            return this;\n-        }\n-\n-        public Builder networkDomainUuid(String networkDomainUuid) {\n-            this._networkDomainUuid = networkDomainUuid;\n-            return this;\n-        }\n-\n-        public Builder networksAccountUuid(String networksAccountUuid) {\n-            this._networksAccountUuid = networksAccountUuid;\n-            return this;\n-        }\n-\n-        public Builder isDomainRouter(boolean isDomainRouter) {\n-            this._isDomainRouter = isDomainRouter;\n-            return this;\n-        }\n-\n-        public Builder domainRouterIp(String domainRouterIp) {\n-            this._domainRouterIp = domainRouterIp;\n-            return this;\n-        }\n-\n-        public Builder vmInstanceName(String vmInstanceName) {\n-            this._vmInstanceName = vmInstanceName;\n-            return this;\n-        }\n-\n-        public Builder vmUuid(String vmUuid) {\n-            this._vmUuid = vmUuid;\n-            return this;\n-        }\n-\n-        public Builder vmUserName(String vmUserName) {\n-            this._vmUserName = vmUserName;\n-            return this;\n-        }\n-\n-        public Builder vmUserDomainName(String vmUserDomainName) {\n-            this._vmUserDomainName = vmUserDomainName;\n-            return this;\n-        }\n-\n-        public Builder useStaticIp(boolean useStaticIp) {\n-            this._useStaticIp = useStaticIp;\n-            return this;\n-        }\n-\n-        public Builder staticIp(String staticIp) {\n-            this._staticIp = staticIp;\n-            return this;\n-        }\n-\n-        public Builder staticNatIpUuid(String staticNatIpUuid) {\n-            this._staticNatIpUuid = staticNatIpUuid;\n-            return this;\n-        }\n-\n-        public Builder staticNatIpAddress(String staticNatIpAddress) {\n-            this._staticNatIpAddress = staticNatIpAddress;\n-            return this;\n-        }\n-\n-        public Builder isStaticNatIpAllocated(boolean isStaticNatIpAllocated) {\n-            this._isStaticNatIpAllocated = isStaticNatIpAllocated;\n-            return this;\n-        }\n-\n-        public Builder isOneToOneNat(boolean isOneToOneNat) {\n-            this._isOneToOneNat = isOneToOneNat;\n-            return this;\n-        }\n-\n-        public Builder staticNatVlanUuid(String staticNatVlanUuid) {\n-            this._staticNatVlanUuid = staticNatVlanUuid;\n-            return this;\n-        }\n-\n-        public Builder staticNatVlanGateway(String staticNatVlanGateway) {\n-            this._staticNatVlanGateway = staticNatVlanGateway;\n-            return this;\n-        }\n-\n-        public Builder staticNatVlanNetmask(String staticNatVlanNetmask) {\n-            this._staticNatVlanNetmask = staticNatVlanNetmask;\n-            return this;\n-        }\n-\n-        @Override\n-        public ReserveVmInterfaceVspCommand build() {\n-            return new ReserveVmInterfaceVspCommand(_nicUuid, _nicMacAddress, _networkUuid, _isL3Network, _isSharedNetwork, _vpcUuid, _networkDomainUuid, _networksAccountUuid,\n-                    _isDomainRouter, _domainRouterIp, _vmInstanceName, _vmUuid, _vmUserName, _vmUserDomainName, _useStaticIp, _staticIp, _staticNatIpUuid, _staticNatIpAddress,\n-                    _isStaticNatIpAllocated, _isOneToOneNat, _staticNatVlanUuid, _staticNatVlanGateway, _staticNatVlanNetmask);\n-        }\n+    public VspStaticNat getStaticNat() {\n+        return _staticNat;\n     }\n \n     @Override\n@@ -331,70 +69,21 @@ public boolean equals(Object o) {\n \n         ReserveVmInterfaceVspCommand that = (ReserveVmInterfaceVspCommand) o;\n \n-        if (_isDomainRouter != that._isDomainRouter) return false;\n-        if (_isL3Network != that._isL3Network) return false;\n-        if (_isOneToOneNat != that._isOneToOneNat) return false;\n-        if (_isSharedNetwork != that._isSharedNetwork) return false;\n-        if (_isStaticNatIpAllocated != that._isStaticNatIpAllocated) return false;\n-        if (_useStaticIp != that._useStaticIp) return false;\n-        if (_domainRouterIp != null ? !_domainRouterIp.equals(that._domainRouterIp) : that._domainRouterIp != null)\n-            return false;\n-        if (_networkDomainUuid != null ? !_networkDomainUuid.equals(that._networkDomainUuid) : that._networkDomainUuid != null)\n-            return false;\n-        if (_networkUuid != null ? !_networkUuid.equals(that._networkUuid) : that._networkUuid != null) return false;\n-        if (_networksAccountUuid != null ? !_networksAccountUuid.equals(that._networksAccountUuid) : that._networksAccountUuid != null)\n-            return false;\n-        if (_nicMacAddress != null ? !_nicMacAddress.equals(that._nicMacAddress) : that._nicMacAddress != null)\n-            return false;\n-        if (_nicUuid != null ? !_nicUuid.equals(that._nicUuid) : that._nicUuid != null) return false;\n-        if (_staticIp != null ? !_staticIp.equals(that._staticIp) : that._staticIp != null) return false;\n-        if (_staticNatIpAddress != null ? !_staticNatIpAddress.equals(that._staticNatIpAddress) : that._staticNatIpAddress != null)\n-            return false;\n-        if (_staticNatIpUuid != null ? !_staticNatIpUuid.equals(that._staticNatIpUuid) : that._staticNatIpUuid != null)\n-            return false;\n-        if (_staticNatVlanGateway != null ? !_staticNatVlanGateway.equals(that._staticNatVlanGateway) : that._staticNatVlanGateway != null)\n-            return false;\n-        if (_staticNatVlanNetmask != null ? !_staticNatVlanNetmask.equals(that._staticNatVlanNetmask) : that._staticNatVlanNetmask != null)\n-            return false;\n-        if (_staticNatVlanUuid != null ? !_staticNatVlanUuid.equals(that._staticNatVlanUuid) : that._staticNatVlanUuid != null)\n-            return false;\n-        if (_vmInstanceName != null ? !_vmInstanceName.equals(that._vmInstanceName) : that._vmInstanceName != null)\n-            return false;\n-        if (_vmUserDomainName != null ? !_vmUserDomainName.equals(that._vmUserDomainName) : that._vmUserDomainName != null)\n-            return false;\n-        if (_vmUserName != null ? !_vmUserName.equals(that._vmUserName) : that._vmUserName != null) return false;\n-        if (_vmUuid != null ? !_vmUuid.equals(that._vmUuid) : that._vmUuid != null) return false;\n-        if (_vpcUuid != null ? !_vpcUuid.equals(that._vpcUuid) : that._vpcUuid != null) return false;\n+        if (_network != null ? !_network.equals(that._network) : that._network != null) return false;\n+        if (_nic != null ? !_nic.equals(that._nic) : that._nic != null) return false;\n+        if (_staticNat != null ? !_staticNat.equals(that._staticNat) : that._staticNat != null) return false;\n+        if (_vm != null ? !_vm.equals(that._vm) : that._vm != null) return false;\n \n         return true;\n     }\n \n     @Override\n     public int hashCode() {\n         int result = super.hashCode();\n-        result = 31 * result + (_nicUuid != null ? _nicUuid.hashCode() : 0);\n-        result = 31 * result + (_nicMacAddress != null ? _nicMacAddress.hashCode() : 0);\n-        result = 31 * result + (_networkUuid != null ? _networkUuid.hashCode() : 0);\n-        result = 31 * result + (_isL3Network ? 1 : 0);\n-        result = 31 * result + (_isSharedNetwork ? 1 : 0);\n-        result = 31 * result + (_vpcUuid != null ? _vpcUuid.hashCode() : 0);\n-        result = 31 * result + (_networkDomainUuid != null ? _networkDomainUuid.hashCode() : 0);\n-        result = 31 * result + (_networksAccountUuid != null ? _networksAccountUuid.hashCode() : 0);\n-        result = 31 * result + (_isDomainRouter ? 1 : 0);\n-        result = 31 * result + (_domainRouterIp != null ? _domainRouterIp.hashCode() : 0);\n-        result = 31 * result + (_vmInstanceName != null ? _vmInstanceName.hashCode() : 0);\n-        result = 31 * result + (_vmUuid != null ? _vmUuid.hashCode() : 0);\n-        result = 31 * result + (_vmUserName != null ? _vmUserName.hashCode() : 0);\n-        result = 31 * result + (_vmUserDomainName != null ? _vmUserDomainName.hashCode() : 0);\n-        result = 31 * result + (_useStaticIp ? 1 : 0);\n-        result = 31 * result + (_staticIp != null ? _staticIp.hashCode() : 0);\n-        result = 31 * result + (_staticNatIpUuid != null ? _staticNatIpUuid.hashCode() : 0);\n-        result = 31 * result + (_staticNatIpAddress != null ? _staticNatIpAddress.hashCode() : 0);\n-        result = 31 * result + (_isStaticNatIpAllocated ? 1 : 0);\n-        result = 31 * result + (_isOneToOneNat ? 1 : 0);\n-        result = 31 * result + (_staticNatVlanUuid != null ? _staticNatVlanUuid.hashCode() : 0);\n-        result = 31 * result + (_staticNatVlanGateway != null ? _staticNatVlanGateway.hashCode() : 0);\n-        result = 31 * result + (_staticNatVlanNetmask != null ? _staticNatVlanNetmask.hashCode() : 0);\n+        result = 31 * result + (_network != null ? _network.hashCode() : 0);\n+        result = 31 * result + (_vm != null ? _vm.hashCode() : 0);\n+        result = 31 * result + (_nic != null ? _nic.hashCode() : 0);\n+        result = 31 * result + (_staticNat != null ? _staticNat.hashCode() : 0);\n         return result;\n     }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/guru/ReserveVmInterfaceVspCommand.java",
                "sha": "299b9a6ec73bd5798736d5778c32bdaefd6b11c9",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/guru/TrashNetworkVspCommand.java",
                "changes": 101,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/guru/TrashNetworkVspCommand.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 93,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/guru/TrashNetworkVspCommand.java",
                "patch": "@@ -19,94 +19,20 @@\n \n package com.cloud.agent.api.guru;\n \n-import com.cloud.agent.api.CmdBuilder;\n import com.cloud.agent.api.Command;\n+import net.nuage.vsp.acs.client.api.model.VspNetwork;\n \n public class TrashNetworkVspCommand extends Command {\n \n-    private final String _domainUuid;\n-    private final String _networkUuid;\n-    private final boolean _isL3Network;\n-    private final boolean _isSharedNetwork;\n-    private final String _vpcUuid;\n-    private final String _domainTemplateName;\n+    private final VspNetwork _network;\n \n-    private TrashNetworkVspCommand(String domainUuid, String networkUuid, boolean isL3Network, boolean isSharedNetwork, String vpcUuid, String domainTemplateName) {\n+    public TrashNetworkVspCommand(VspNetwork network) {\n         super();\n-        this._domainUuid = domainUuid;\n-        this._networkUuid = networkUuid;\n-        this._isL3Network = isL3Network;\n-        this._isSharedNetwork = isSharedNetwork;\n-        this._vpcUuid = vpcUuid;\n-        this._domainTemplateName = domainTemplateName;\n+        this._network = network;\n     }\n \n-    public String getDomainUuid() {\n-        return _domainUuid;\n-    }\n-\n-    public String getNetworkUuid() {\n-        return _networkUuid;\n-    }\n-\n-    public boolean isL3Network() {\n-        return _isL3Network;\n-    }\n-\n-    public boolean isSharedNetwork() {\n-        return _isSharedNetwork;\n-    }\n-\n-    public String getVpcUuid() {\n-        return _vpcUuid;\n-    }\n-\n-    public String getDomainTemplateName() {\n-        return _domainTemplateName;\n-    }\n-\n-    public static class Builder implements CmdBuilder<TrashNetworkVspCommand> {\n-        private String _domainUuid;\n-        private String _networkUuid;\n-        private boolean _isL3Network;\n-        private boolean _isSharedNetwork;\n-        private String _vpcUuid;\n-        private String _domainTemplateName;\n-\n-        public Builder domainUuid(String domainUuid) {\n-            this._domainUuid = domainUuid;\n-            return this;\n-        }\n-\n-        public Builder networkUuid(String networkUuid) {\n-            this._networkUuid = networkUuid;\n-            return this;\n-        }\n-\n-        public Builder isL3Network(boolean isL3Network) {\n-            this._isL3Network = isL3Network;\n-            return this;\n-        }\n-\n-        public Builder isSharedNetwork(boolean isSharedNetwork) {\n-            this._isSharedNetwork = isSharedNetwork;\n-            return this;\n-        }\n-\n-        public Builder vpcUuid(String vpcUuid) {\n-            this._vpcUuid = vpcUuid;\n-            return this;\n-        }\n-\n-        public Builder domainTemplateName(String domainTemplateName) {\n-            this._domainTemplateName = domainTemplateName;\n-            return this;\n-        }\n-\n-        @Override\n-        public TrashNetworkVspCommand build() {\n-            return new TrashNetworkVspCommand(_domainUuid, _networkUuid, _isL3Network, _isSharedNetwork, _vpcUuid, _domainTemplateName);\n-        }\n+    public VspNetwork getNetwork() {\n+        return _network;\n     }\n \n     @Override\n@@ -122,26 +48,15 @@ public boolean equals(Object o) {\n \n         TrashNetworkVspCommand that = (TrashNetworkVspCommand) o;\n \n-        if (_isL3Network != that._isL3Network) return false;\n-        if (_isSharedNetwork != that._isSharedNetwork) return false;\n-        if (_domainTemplateName != null ? !_domainTemplateName.equals(that._domainTemplateName) : that._domainTemplateName != null)\n-            return false;\n-        if (_domainUuid != null ? !_domainUuid.equals(that._domainUuid) : that._domainUuid != null) return false;\n-        if (_networkUuid != null ? !_networkUuid.equals(that._networkUuid) : that._networkUuid != null) return false;\n-        if (_vpcUuid != null ? !_vpcUuid.equals(that._vpcUuid) : that._vpcUuid != null) return false;\n+        if (_network != null ? !_network.equals(that._network) : that._network != null) return false;\n \n         return true;\n     }\n \n     @Override\n     public int hashCode() {\n         int result = super.hashCode();\n-        result = 31 * result + (_domainUuid != null ? _domainUuid.hashCode() : 0);\n-        result = 31 * result + (_networkUuid != null ? _networkUuid.hashCode() : 0);\n-        result = 31 * result + (_isL3Network ? 1 : 0);\n-        result = 31 * result + (_isSharedNetwork ? 1 : 0);\n-        result = 31 * result + (_vpcUuid != null ? _vpcUuid.hashCode() : 0);\n-        result = 31 * result + (_domainTemplateName != null ? _domainTemplateName.hashCode() : 0);\n+        result = 31 * result + (_network != null ? _network.hashCode() : 0);\n         return result;\n     }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/guru/TrashNetworkVspCommand.java",
                "sha": "b3f8f8e012a452b29b4b06c326bf4b6f400fcbe2",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/manager/GetApiDefaultsAnswer.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/manager/GetApiDefaultsAnswer.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 17,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/manager/GetApiDefaultsAnswer.java",
                "patch": "@@ -17,46 +17,45 @@\n // under the License.\n //\n \n-package com.cloud.agent.api.sync;\n+package com.cloud.agent.api.manager;\n \n-import com.cloud.agent.api.Command;\n+import com.cloud.agent.api.Answer;\n+import net.nuage.vsp.acs.client.api.model.VspApiDefaults;\n \n-public class SyncVspCommand extends Command {\n+public class GetApiDefaultsAnswer extends Answer {\n \n-    private final String _nuageVspEntity;\n+    private VspApiDefaults _apiDefaults;\n \n-    public SyncVspCommand(String nuageVspEntity) {\n-        super();\n-        this._nuageVspEntity = nuageVspEntity;\n+    public GetApiDefaultsAnswer(GetApiDefaultsCommand cmd, VspApiDefaults defaults) {\n+        super(cmd);\n+        this._apiDefaults = defaults;\n     }\n \n-    @Override\n-    public boolean executeInSequence() {\n-        return false;\n+    public GetApiDefaultsAnswer(GetApiDefaultsCommand cmd, Exception e) {\n+        super(cmd, e);\n     }\n \n-    public String getNuageVspEntity() {\n-        return _nuageVspEntity;\n+    public VspApiDefaults getApiDefaults() {\n+        return _apiDefaults;\n     }\n \n     @Override\n     public boolean equals(Object o) {\n         if (this == o) return true;\n-        if (!(o instanceof SyncVspCommand)) return false;\n+        if (!(o instanceof GetApiDefaultsAnswer)) return false;\n         if (!super.equals(o)) return false;\n \n-        SyncVspCommand that = (SyncVspCommand) o;\n+        GetApiDefaultsAnswer that = (GetApiDefaultsAnswer) o;\n \n-        if (_nuageVspEntity != null ? !_nuageVspEntity.equals(that._nuageVspEntity) : that._nuageVspEntity != null)\n-            return false;\n+        if (_apiDefaults != null ? !_apiDefaults.equals(that._apiDefaults) : that._apiDefaults != null) return false;\n \n         return true;\n     }\n \n     @Override\n     public int hashCode() {\n         int result = super.hashCode();\n-        result = 31 * result + (_nuageVspEntity != null ? _nuageVspEntity.hashCode() : 0);\n+        result = 31 * result + (_apiDefaults != null ? _apiDefaults.hashCode() : 0);\n         return result;\n     }\n }",
                "previous_filename": "plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/sync/SyncVspCommand.java",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/manager/GetApiDefaultsAnswer.java",
                "sha": "c02eef1699f948f97be0a58e06af4551c30383a7",
                "status": "renamed"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/manager/GetApiDefaultsCommand.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/manager/GetApiDefaultsCommand.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 2,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/manager/GetApiDefaultsCommand.java",
                "patch": "@@ -25,9 +25,9 @@\n  * The super class implementations for equals and hashCode are acceptable because this class does not track any state\n  * in addition to the super class.\n  */\n-public class GetClientDefaultsCommand extends Command {\n+public class GetApiDefaultsCommand extends Command {\n \n-    public GetClientDefaultsCommand() {\n+    public GetApiDefaultsCommand() {\n         super();\n     }\n ",
                "previous_filename": "plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/manager/GetClientDefaultsCommand.java",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/manager/GetApiDefaultsCommand.java",
                "sha": "3fca16a2420d95d18c16ad889e524df8af2ed491",
                "status": "renamed"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/2d825dd07f9b1acf19f6d98f5a247e069724c443/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/manager/GetClientDefaultsAnswer.java",
                "changes": 81,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/manager/GetClientDefaultsAnswer.java?ref=2d825dd07f9b1acf19f6d98f5a247e069724c443",
                "deletions": 81,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/manager/GetClientDefaultsAnswer.java",
                "patch": "@@ -1,81 +0,0 @@\n-//\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-//\n-\n-package com.cloud.agent.api.manager;\n-\n-import com.cloud.agent.api.Answer;\n-\n-import java.util.Map;\n-\n-public class GetClientDefaultsAnswer extends Answer {\n-\n-    private String _currentApiVersion;\n-    private Integer _apiRetryCount;\n-    private Long _apiRetryInterval;\n-\n-    public GetClientDefaultsAnswer(GetClientDefaultsCommand cmd, Map<String, Object> defaults) {\n-        super(cmd);\n-        this._currentApiVersion = (String) defaults.get(\"CURRENT_API_VERSION\");\n-        this._apiRetryCount = (Integer) defaults.get(\"DEFAULT_API_RETRY_COUNT\");\n-        this._apiRetryInterval = (Long) defaults.get(\"DEFAULT_API_RETRY_INTERVAL\");\n-    }\n-\n-    public GetClientDefaultsAnswer(GetClientDefaultsCommand cmd, Exception e) {\n-        super(cmd, e);\n-    }\n-\n-    public String getCurrentApiVersion() {\n-        return _currentApiVersion;\n-    }\n-\n-    public Integer getApiRetryCount() {\n-        return _apiRetryCount;\n-    }\n-\n-    public Long getApiRetryInterval() {\n-        return _apiRetryInterval;\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) return true;\n-        if (!(o instanceof GetClientDefaultsAnswer)) return false;\n-        if (!super.equals(o)) return false;\n-\n-        GetClientDefaultsAnswer that = (GetClientDefaultsAnswer) o;\n-\n-        if (_apiRetryCount != null ? !_apiRetryCount.equals(that._apiRetryCount) : that._apiRetryCount != null)\n-            return false;\n-        if (_apiRetryInterval != null ? !_apiRetryInterval.equals(that._apiRetryInterval) : that._apiRetryInterval != null)\n-            return false;\n-        if (_currentApiVersion != null ? !_currentApiVersion.equals(that._currentApiVersion) : that._currentApiVersion != null)\n-            return false;\n-\n-        return true;\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        int result = super.hashCode();\n-        result = 31 * result + (_currentApiVersion != null ? _currentApiVersion.hashCode() : 0);\n-        result = 31 * result + (_apiRetryCount != null ? _apiRetryCount.hashCode() : 0);\n-        result = 31 * result + (_apiRetryInterval != null ? _apiRetryInterval.hashCode() : 0);\n-        return result;\n-    }\n-}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2d825dd07f9b1acf19f6d98f5a247e069724c443/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/manager/GetClientDefaultsAnswer.java",
                "sha": "f748e1cbb445d634475c2b097d51874e1668d1c3",
                "status": "removed"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/sync/SyncDomainCommand.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/sync/SyncDomainCommand.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 23,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/sync/SyncDomainCommand.java",
                "patch": "@@ -20,34 +20,23 @@\n package com.cloud.agent.api.sync;\n \n import com.cloud.agent.api.Command;\n+import net.nuage.vsp.acs.client.api.model.VspDomain;\n \n public class SyncDomainCommand extends Command {\n \n-    private final String _domainUuid;\n-    private final String _domainName;\n-    private final String _domainPath;\n+    private final VspDomain _domain;\n     private final boolean _toAdd;\n     private final boolean _toRemove;\n \n-    public SyncDomainCommand(String domainUuid, String domainName, String domainPath, boolean toAdd, boolean toRemove) {\n+    public SyncDomainCommand(VspDomain domain, boolean toAdd, boolean toRemove) {\n         super();\n-        this._domainUuid = domainUuid;\n-        this._domainName = domainName;\n-        this._domainPath = domainPath;\n+        this._domain = domain;\n         this._toAdd = toAdd;\n         this._toRemove = toRemove;\n     }\n \n-    public String getDomainUuid() {\n-        return _domainUuid;\n-    }\n-\n-    public String getDomainName() {\n-        return _domainName;\n-    }\n-\n-    public String getDomainPath() {\n-        return _domainPath;\n+    public VspDomain getDomain() {\n+        return _domain;\n     }\n \n     public boolean isToAdd() {\n@@ -73,19 +62,15 @@ public boolean equals(Object o) {\n \n         if (_toAdd != that._toAdd) return false;\n         if (_toRemove != that._toRemove) return false;\n-        if (_domainName != null ? !_domainName.equals(that._domainName) : that._domainName != null) return false;\n-        if (_domainPath != null ? !_domainPath.equals(that._domainPath) : that._domainPath != null) return false;\n-        if (_domainUuid != null ? !_domainUuid.equals(that._domainUuid) : that._domainUuid != null) return false;\n+        if (_domain != null ? !_domain.equals(that._domain) : that._domain != null) return false;\n \n         return true;\n     }\n \n     @Override\n     public int hashCode() {\n         int result = super.hashCode();\n-        result = 31 * result + (_domainUuid != null ? _domainUuid.hashCode() : 0);\n-        result = 31 * result + (_domainName != null ? _domainName.hashCode() : 0);\n-        result = 31 * result + (_domainPath != null ? _domainPath.hashCode() : 0);\n+        result = 31 * result + (_domain != null ? _domain.hashCode() : 0);\n         result = 31 * result + (_toAdd ? 1 : 0);\n         result = 31 * result + (_toRemove ? 1 : 0);\n         return result;",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/agent/api/sync/SyncDomainCommand.java",
                "sha": "90a30a4b3a4489d674e2b60e8207f1d90ca1aefb",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/api/commands/AddNuageVspDeviceCmd.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/api/commands/AddNuageVspDeviceCmd.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 10,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/api/commands/AddNuageVspDeviceCmd.java",
                "patch": "@@ -29,6 +29,7 @@\n import com.cloud.network.NuageVspDeviceVO;\n import com.cloud.network.manager.NuageVspManager;\n import com.cloud.utils.exception.CloudRuntimeException;\n+import org.apache.cloudstack.acl.RoleType;\n import org.apache.cloudstack.api.APICommand;\n import org.apache.cloudstack.api.ApiConstants;\n import org.apache.cloudstack.api.ApiErrorCode;\n@@ -41,9 +42,12 @@\n \n import javax.inject.Inject;\n \n-@APICommand(name = \"addNuageVspDevice\", responseObject = NuageVspDeviceResponse.class, description = \"Adds a Nuage VSP device\", since = \"4.5\")\n+@APICommand(name = AddNuageVspDeviceCmd.APINAME, description = \"Adds a Nuage VSP device\", responseObject = NuageVspDeviceResponse.class,\n+        requestHasSensitiveInfo = false, responseHasSensitiveInfo = false,\n+        since = \"4.5\",\n+        authorized = {RoleType.Admin})\n public class AddNuageVspDeviceCmd extends BaseAsyncCmd {\n-    private static final String s_name = \"addnuagevspdeviceresponse\";\n+    public static final String APINAME = \"addNuageVspDevice\";\n \n     @Inject\n     NuageVspManager _nuageVspManager;\n@@ -68,14 +72,14 @@\n     @Parameter(name = ApiConstants.PASSWORD, type = CommandType.STRING, required = true, description = \"the password of CMS user in Nuage VSD\")\n     private String password;\n \n-    @Parameter(name = VspConstants.NUAGE_VSP_API_VERSION, type = CommandType.STRING, required = true, description = \"the version of the API to use to communicate to Nuage VSD\")\n+    @Parameter(name = VspConstants.NUAGE_VSP_API_VERSION, type = CommandType.STRING, description = \"the version of the API to use to communicate to Nuage VSD\")\n     private String apiVersion;\n \n-    @Parameter(name = VspConstants.NUAGE_VSP_API_RETRY_COUNT, type = CommandType.INTEGER, required = true, description = \"the number of retries on failure to communicate to Nuage VSD\")\n-    private int apiRetryCount;\n+    @Parameter(name = VspConstants.NUAGE_VSP_API_RETRY_COUNT, type = CommandType.INTEGER, description = \"the number of retries on failure to communicate to Nuage VSD\")\n+    private Integer apiRetryCount;\n \n-    @Parameter(name = VspConstants.NUAGE_VSP_API_RETRY_INTERVAL, type = CommandType.LONG, required = true, description = \"the time to wait after failure before retrying to communicate to Nuage VSD\")\n-    private long apiRetryInterval;\n+    @Parameter(name = VspConstants.NUAGE_VSP_API_RETRY_INTERVAL, type = CommandType.LONG, description = \"the time to wait after failure before retrying to communicate to Nuage VSD\")\n+    private Long apiRetryInterval;\n \n     /////////////////////////////////////////////////////\n     /////////////////// Accessors ///////////////////////\n@@ -117,15 +121,15 @@ public void setApiVersion(String apiVersion) {\n         this.apiVersion = apiVersion;\n     }\n \n-    public int getApiRetryCount() {\n+    public Integer getApiRetryCount() {\n         return apiRetryCount;\n     }\n \n     public void setApiRetryCount(int apiRetryCount) {\n         this.apiRetryCount = apiRetryCount;\n     }\n \n-    public long getApiRetryInterval() {\n+    public Long getApiRetryInterval() {\n         return apiRetryInterval;\n     }\n \n@@ -158,7 +162,7 @@ public void execute() throws ResourceUnavailableException, InsufficientCapacityE\n \n     @Override\n     public String getCommandName() {\n-        return s_name;\n+        return APINAME.toLowerCase() + BaseCmd.RESPONSE_SUFFIX;\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/api/commands/AddNuageVspDeviceCmd.java",
                "sha": "62a15ea5a772a905ec371c253acaa6bc6775cca7",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/api/commands/DeleteNuageVspDeviceCmd.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/api/commands/DeleteNuageVspDeviceCmd.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 3,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/api/commands/DeleteNuageVspDeviceCmd.java",
                "patch": "@@ -28,19 +28,25 @@\n import com.cloud.exception.ResourceUnavailableException;\n import com.cloud.network.manager.NuageVspManager;\n import com.cloud.utils.exception.CloudRuntimeException;\n+import org.apache.cloudstack.acl.RoleType;\n import org.apache.cloudstack.api.APICommand;\n import org.apache.cloudstack.api.ApiErrorCode;\n import org.apache.cloudstack.api.BaseAsyncCmd;\n+import org.apache.cloudstack.api.BaseCmd;\n import org.apache.cloudstack.api.Parameter;\n import org.apache.cloudstack.api.ServerApiException;\n import org.apache.cloudstack.api.response.SuccessResponse;\n import org.apache.cloudstack.context.CallContext;\n \n import javax.inject.Inject;\n \n-@APICommand(name = \"deleteNuageVspDevice\", responseObject = SuccessResponse.class, description = \"delete a nuage vsp device\", since = \"4.5\")\n+@APICommand(name = DeleteNuageVspDeviceCmd.APINAME, description = \"delete a nuage vsp device\", responseObject = SuccessResponse.class,\n+        requestHasSensitiveInfo = false, responseHasSensitiveInfo = false,\n+        since = \"4.5\",\n+        authorized = {RoleType.Admin})\n public class DeleteNuageVspDeviceCmd extends BaseAsyncCmd {\n-    private static final String s_name = \"deletenuagevspdeviceresponse\";\n+    public static final String APINAME = \"deleteNuageVspDevice\";\n+\n     @Inject\n     NuageVspManager _nuageVspManager;\n \n@@ -83,7 +89,7 @@ public void execute() throws ResourceUnavailableException, InsufficientCapacityE\n \n     @Override\n     public String getCommandName() {\n-        return s_name;\n+        return APINAME.toLowerCase() + BaseCmd.RESPONSE_SUFFIX;\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/api/commands/DeleteNuageVspDeviceCmd.java",
                "sha": "05a17d6734cf6f2eb2c7d41cd8c737a9ffdc85ab",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/2d825dd07f9b1acf19f6d98f5a247e069724c443/plugins/network-elements/nuage-vsp/src/com/cloud/api/commands/IssueNuageVspResourceRequestCmd.java",
                "changes": 213,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/api/commands/IssueNuageVspResourceRequestCmd.java?ref=2d825dd07f9b1acf19f6d98f5a247e069724c443",
                "deletions": 213,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/api/commands/IssueNuageVspResourceRequestCmd.java",
                "patch": "@@ -1,213 +0,0 @@\n-//\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-//\n-\n-package com.cloud.api.commands;\n-\n-import com.cloud.agent.AgentManager;\n-import com.cloud.agent.api.VspResourceAnswer;\n-import com.cloud.agent.api.VspResourceCommand;\n-import com.cloud.api.response.NuageVspResourceResponse;\n-import com.cloud.domain.dao.DomainDao;\n-import com.cloud.exception.ConcurrentOperationException;\n-import com.cloud.exception.InsufficientCapacityException;\n-import com.cloud.exception.InvalidParameterValueException;\n-import com.cloud.exception.ResourceAllocationException;\n-import com.cloud.exception.ResourceUnavailableException;\n-import com.cloud.host.HostVO;\n-import com.cloud.host.dao.HostDao;\n-import com.cloud.network.NuageVspDeviceVO;\n-import com.cloud.network.dao.NuageVspDao;\n-import com.cloud.offering.NetworkOffering;\n-import com.cloud.user.Account;\n-import com.cloud.user.AccountManager;\n-import org.apache.cloudstack.api.APICommand;\n-import org.apache.cloudstack.api.ApiConstants;\n-import org.apache.cloudstack.api.ApiErrorCode;\n-import org.apache.cloudstack.api.BaseCmd;\n-import org.apache.cloudstack.api.Parameter;\n-import org.apache.cloudstack.api.ServerApiException;\n-import org.apache.cloudstack.api.response.NetworkOfferingResponse;\n-import org.apache.cloudstack.api.response.PhysicalNetworkResponse;\n-import org.apache.cloudstack.api.response.ZoneResponse;\n-import org.apache.cloudstack.context.CallContext;\n-import org.apache.commons.lang.StringUtils;\n-import org.apache.log4j.Logger;\n-\n-import javax.inject.Inject;\n-import java.util.List;\n-\n-@APICommand(name = \"issueNuageVspResourceRequest\", responseObject = NuageVspResourceResponse.class, description = \"Issues a Nuage VSP REST API resource request\", since = \"4.5\")\n-public class IssueNuageVspResourceRequestCmd extends BaseCmd {\n-    private static final Logger s_logger = Logger.getLogger(IssueNuageVspResourceRequestCmd.class.getName());\n-    private static final String s_name = \"nuagevspresourceresponse\";\n-\n-    @Inject\n-    protected AccountManager _accountMgr;\n-    @Inject\n-    protected DomainDao _domainDao;\n-    @Inject\n-    protected NuageVspDao _nuageConfigDao;\n-    @Inject\n-    HostDao _hostDao;\n-    @Inject\n-    AgentManager _agentMgr;\n-\n-    /////////////////////////////////////////////////////\n-    //////////////// API parameters /////////////////////\n-    /////////////////////////////////////////////////////\n-\n-    @Parameter(name = ApiConstants.NETWORK_OFFERING_ID, type = CommandType.UUID, entityType = NetworkOfferingResponse.class, required = true, description = \"the network offering id\")\n-    private Long networkOfferingId;\n-\n-    @Parameter(name = ApiConstants.ZONE_ID, type = CommandType.UUID, entityType = ZoneResponse.class, required = true, description = \"the Zone ID for the network\")\n-    private Long zoneId;\n-\n-    @Parameter(name = ApiConstants.PHYSICAL_NETWORK_ID, type = CommandType.UUID, entityType = PhysicalNetworkResponse.class, description = \"the ID of the physical network in to which Nuage VSP Controller is added\")\n-    private Long physicalNetworkId;\n-\n-    @Parameter(name = VspConstants.NUAGE_VSP_API_METHOD, type = CommandType.STRING, required = true, description = \"the Nuage VSP REST API method type\")\n-    private String method;\n-\n-    @Parameter(name = VspConstants.NUAGE_VSP_API_RESOURCE, type = CommandType.STRING, required = true, description = \"the resource in Nuage VSP\")\n-    private String resource;\n-\n-    @Parameter(name = VspConstants.NUAGE_VSP_API_RESOURCE_ID, type = CommandType.STRING, description = \"the ID of the resource in Nuage VSP\")\n-    private String resourceId;\n-\n-    @Parameter(name = VspConstants.NUAGE_VSP_API_CHILD_RESOURCE, type = CommandType.STRING, description = \"the child resource in Nuage VSP\")\n-    private String childResource;\n-\n-    @Parameter(name = VspConstants.NUAGE_VSP_API_RESOURCE_FILTER, type = CommandType.STRING, description = \"the resource filter in Nuage VSP\")\n-    private String resourceFilter;\n-\n-    /////////////////////////////////////////////////////\n-    /////////////// API Implementation///////////////////\n-    /////////////////////////////////////////////////////\n-\n-    public Long getNetworkOfferingId() {\n-        return networkOfferingId;\n-    }\n-\n-    public Long getZoneId() {\n-        Long physicalNetworkId = getPhysicalNetworkId();\n-\n-        if (physicalNetworkId == null && zoneId == null) {\n-            throw new InvalidParameterValueException(\"Zone id is required\");\n-        }\n-\n-        return zoneId;\n-    }\n-\n-    public Long getPhysicalNetworkId() {\n-        if (physicalNetworkId != null) {\n-            return physicalNetworkId;\n-        }\n-\n-        NetworkOffering offering = _entityMgr.findById(NetworkOffering.class, networkOfferingId);\n-        if (offering == null) {\n-            throw new InvalidParameterValueException(\"Unable to find network offering by id \" + networkOfferingId);\n-        }\n-\n-        if (zoneId == null) {\n-            throw new InvalidParameterValueException(\"ZoneId is required as physicalNetworkId is null\");\n-        }\n-        return _networkService.findPhysicalNetworkId(zoneId, offering.getTags(), offering.getTrafficType());\n-    }\n-\n-    public String getMethod() {\n-        return method;\n-    }\n-\n-    public void setMethod(String method) {\n-        this.method = method;\n-    }\n-\n-    public String getResource() {\n-        return resource;\n-    }\n-\n-    public void setResource(String resource) {\n-        this.resource = resource;\n-    }\n-\n-    public String getResourceId() {\n-        return resourceId;\n-    }\n-\n-    public void setResourceId(String resourceId) {\n-        this.resourceId = resourceId;\n-    }\n-\n-    public String getChildResource() {\n-        return childResource;\n-    }\n-\n-    public void setChildResource(String childResource) {\n-        this.childResource = childResource;\n-    }\n-\n-    public String getResourceFilter() {\n-        return resourceFilter;\n-    }\n-\n-    public void setResourceFilter(String resourceFilter) {\n-        this.resourceFilter = resourceFilter;\n-    }\n-\n-    @Override\n-    public void execute() throws ResourceUnavailableException, InsufficientCapacityException, ServerApiException, ConcurrentOperationException, ResourceAllocationException {\n-        long accountId = CallContext.current().getCallingAccount().getAccountId();\n-        Account account = _accountMgr.getAccount(accountId);\n-\n-        List<NuageVspDeviceVO> nuageVspDevices = _nuageConfigDao.listByPhysicalNetwork(getPhysicalNetworkId());\n-        if (nuageVspDevices != null && (!nuageVspDevices.isEmpty())) {\n-            NuageVspDeviceVO config = nuageVspDevices.iterator().next();\n-            HostVO nuageVspHost = _hostDao.findById(config.getHostId());\n-            VspResourceCommand cmd = new VspResourceCommand(method, resource, resourceId, childResource, null, resourceFilter, null, null);\n-            VspResourceAnswer answer = (VspResourceAnswer)_agentMgr.easySend(nuageVspHost.getId(), cmd);\n-            if (answer == null || !answer.getResult()) {\n-                s_logger.error(\"VspResourceCommand failed\");\n-                if ((null != answer) && (null != answer.getDetails())) {\n-                    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, answer.getDetails());\n-                }\n-            } else {\n-                NuageVspResourceResponse response = new NuageVspResourceResponse();\n-                response.setResourceInfo(StringUtils.isBlank(answer.getResourceInfo()) ? \"\" : answer.getResourceInfo());\n-                response.setObjectName(\"nuagevspresource\");\n-                response.setResponseName(getCommandName());\n-                this.setResponseObject(response);\n-            }\n-        } else {\n-            String errorMessage = \"No Nuage VSP Controller configured on physical network \" + getPhysicalNetworkId();\n-            s_logger.error(errorMessage);\n-            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, errorMessage);\n-        }\n-    }\n-\n-    @Override\n-    public String getCommandName() {\n-        return s_name;\n-    }\n-\n-    @Override\n-    public long getEntityOwnerId() {\n-        return CallContext.current().getCallingAccount().getId();\n-    }\n-\n-}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/2d825dd07f9b1acf19f6d98f5a247e069724c443/plugins/network-elements/nuage-vsp/src/com/cloud/api/commands/IssueNuageVspResourceRequestCmd.java",
                "sha": "559b30d40a7165d2f603131c708c064769f6e743",
                "status": "removed"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/api/commands/ListNuageVspDevicesCmd.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/api/commands/ListNuageVspDevicesCmd.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 3,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/api/commands/ListNuageVspDevicesCmd.java",
                "patch": "@@ -28,9 +28,11 @@\n import com.cloud.network.NuageVspDeviceVO;\n import com.cloud.network.manager.NuageVspManager;\n import com.cloud.utils.exception.CloudRuntimeException;\n+import org.apache.cloudstack.acl.RoleType;\n import org.apache.cloudstack.api.APICommand;\n import org.apache.cloudstack.api.ApiConstants;\n import org.apache.cloudstack.api.ApiErrorCode;\n+import org.apache.cloudstack.api.BaseCmd;\n import org.apache.cloudstack.api.BaseListCmd;\n import org.apache.cloudstack.api.Parameter;\n import org.apache.cloudstack.api.ServerApiException;\n@@ -41,9 +43,13 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-@APICommand(name = \"listNuageVspDevices\", responseObject = NuageVspDeviceResponse.class, description = \"Lists Nuage VSP devices\", since = \"4.5\")\n+@APICommand(name = ListNuageVspDevicesCmd.APINAME, description = \"Lists Nuage VSP devices\", responseObject = NuageVspDeviceResponse.class,\n+        requestHasSensitiveInfo = false, responseHasSensitiveInfo = false,\n+        since = \"4.5\",\n+        authorized = {RoleType.Admin})\n public class ListNuageVspDevicesCmd extends BaseListCmd {\n-    private static final String s_name = \"listnuagevspdeviceresponse\";\n+    public static final String APINAME = \"listNuageVspDevices\";\n+\n     @Inject\n     NuageVspManager _nuageVspManager;\n \n@@ -99,7 +105,7 @@ public void execute() throws ResourceUnavailableException, InsufficientCapacityE\n \n     @Override\n     public String getCommandName() {\n-        return s_name;\n+        return APINAME.toLowerCase() + BaseCmd.RESPONSE_SUFFIX;\n     }\n \n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/api/commands/ListNuageVspDevicesCmd.java",
                "sha": "d9f80e7856fed05e929503740260b2b9c48110fe",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/api/commands/UpdateNuageVspDeviceCmd.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/api/commands/UpdateNuageVspDeviceCmd.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 5,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/api/commands/UpdateNuageVspDeviceCmd.java",
                "patch": "@@ -29,6 +29,7 @@\n import com.cloud.network.NuageVspDeviceVO;\n import com.cloud.network.manager.NuageVspManager;\n import com.cloud.utils.exception.CloudRuntimeException;\n+import org.apache.cloudstack.acl.RoleType;\n import org.apache.cloudstack.api.APICommand;\n import org.apache.cloudstack.api.ApiConstants;\n import org.apache.cloudstack.api.ApiErrorCode;\n@@ -38,14 +39,15 @@\n import org.apache.cloudstack.api.ServerApiException;\n import org.apache.cloudstack.api.response.PhysicalNetworkResponse;\n import org.apache.cloudstack.context.CallContext;\n-import org.apache.log4j.Logger;\n \n import javax.inject.Inject;\n \n-@APICommand(name = \"updateNuageVspDevice\", responseObject = NuageVspDeviceResponse.class, description = \"Update a Nuage VSP device\", since = \"4.6\")\n+@APICommand(name = UpdateNuageVspDeviceCmd.APINAME, description = \"Update a Nuage VSP device\", responseObject = NuageVspDeviceResponse.class,\n+        requestHasSensitiveInfo = false, responseHasSensitiveInfo = false,\n+        since = \"4.6\",\n+        authorized = {RoleType.Admin})\n public class UpdateNuageVspDeviceCmd extends BaseAsyncCmd {\n-    private static final Logger s_logger = Logger.getLogger(UpdateNuageVspDeviceCmd.class);\n-    private static final String s_name = \"updatenuagevspdeviceresponse\";\n+    public static final String APINAME = \"updateNuageVspDevice\";\n \n     @Inject\n     NuageVspManager _nuageVspManager;\n@@ -160,7 +162,7 @@ public void execute() throws ResourceUnavailableException, InsufficientCapacityE\n \n     @Override\n     public String getCommandName() {\n-        return s_name;\n+        return APINAME.toLowerCase() + BaseCmd.RESPONSE_SUFFIX;\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/api/commands/UpdateNuageVspDeviceCmd.java",
                "sha": "4197bd65a7d952b4e91a396d2c8a20f206dd8802",
                "status": "modified"
            },
            {
                "additions": 82,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/network/element/NuageVspElement.java",
                "changes": 258,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/network/element/NuageVspElement.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 176,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/network/element/NuageVspElement.java",
                "patch": "@@ -74,28 +74,36 @@\n import com.cloud.network.vpc.dao.VpcDao;\n import com.cloud.network.vpc.dao.VpcOfferingServiceMapDao;\n import com.cloud.offering.NetworkOffering;\n-import com.cloud.offerings.NetworkOfferingVO;\n import com.cloud.offerings.dao.NetworkOfferingDao;\n import com.cloud.offerings.dao.NetworkOfferingServiceMapDao;\n import com.cloud.resource.ResourceManager;\n import com.cloud.resource.ResourceStateAdapter;\n import com.cloud.resource.ServerResource;\n import com.cloud.resource.UnableDeleteHostException;\n-import com.cloud.util.NuageVspUtil;\n import com.cloud.utils.component.AdapterBase;\n import com.cloud.utils.exception.CloudRuntimeException;\n+import com.cloud.vm.DomainRouterVO;\n import com.cloud.vm.NicProfile;\n import com.cloud.vm.NicVO;\n import com.cloud.vm.ReservationContext;\n import com.cloud.vm.VirtualMachineProfile;\n+import com.cloud.vm.dao.DomainRouterDao;\n import com.cloud.vm.dao.NicDao;\n import com.google.common.base.Function;\n import com.google.common.collect.Lists;\n+import com.cloud.util.NuageVspEntityBuilder;\n+import net.nuage.vsp.acs.client.api.model.VspAclRule;\n+import net.nuage.vsp.acs.client.api.model.VspNetwork;\n+import net.nuage.vsp.acs.client.api.model.VspStaticNat;\n import org.apache.cloudstack.api.InternalIdentity;\n import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n import org.apache.cloudstack.network.ExternalNetworkDeviceManager;\n+import org.apache.cloudstack.resourcedetail.VpcDetailVO;\n+import org.apache.cloudstack.resourcedetail.dao.VpcDetailsDao;\n+import org.apache.commons.collections.CollectionUtils;\n import org.apache.log4j.Logger;\n \n+import javax.annotation.Nullable;\n import javax.inject.Inject;\n import javax.naming.ConfigurationException;\n import java.util.ArrayList;\n@@ -126,9 +134,9 @@\n     @Inject\n     NetworkDao _networkDao;\n     @Inject\n-    protected DomainDao _domainDao;\n+    DomainDao _domainDao;\n     @Inject\n-    protected DataCenterDao _dcDao;\n+    DataCenterDao _dcDao;\n     @Inject\n     IPAddressDao _ipAddressDao;\n     @Inject\n@@ -157,6 +165,12 @@\n     PhysicalNetworkDao _physicalNetworkDao;\n     @Inject\n     NetworkACLItemDao _networkACLItemDao;\n+    @Inject\n+    NuageVspEntityBuilder _nuageVspEntityBuilder;\n+    @Inject\n+    VpcDetailsDao _vpcDetailsDao;\n+    @Inject\n+    DomainRouterDao _routerDao;\n \n     @Override\n     public boolean applyIps(Network network, List<? extends PublicIpAddress> ipAddress, Set<Service> service) throws ResourceUnavailableException {\n@@ -242,53 +256,21 @@ public boolean implement(Network network, NetworkOffering offering, DeployDestin\n             return false;\n         }\n \n-        boolean egressDefaultPolicy = offering.getEgressDefaultPolicy();\n-        Domain networkDomain = _domainDao.findById(network.getDomainId());\n-        boolean isFirewallServiceSupported = _networkModel.areServicesSupportedByNetworkOffering(offering.getId(), Service.Firewall);\n-        List<String> dnsServers = _nuageVspManager.getDnsDetails(network);\n-\n-        boolean isL2Network = false, isL3Network = false, isShared = false;\n-        String subnetUuid = network.getUuid();\n-        if (offering.getGuestType() == Network.GuestType.Shared) {\n-            isShared = true;\n-            subnetUuid = networkDomain.getUuid();\n-        } else if (_ntwkOfferingSrvcDao.areServicesSupportedByNetworkOffering(offering.getId(), Service.SourceNat)\n-                || _ntwkOfferingSrvcDao.areServicesSupportedByNetworkOffering(offering.getId(), Service.StaticNat)\n-                || _ntwkOfferingSrvcDao.areServicesSupportedByNetworkOffering(offering.getId(), Service.Connectivity)) {\n-            isL3Network = true;\n-        } else {\n-            isL2Network = true;\n-        }\n \n-        String preConfiguredDomainTemplateName = NuageVspUtil.getPreConfiguredDomainTemplateName(_configDao, network, offering);\n-        List<Map<String, Object>> ingressFirewallRules = getFirewallRulesToApply(network.getId(), FirewallRule.TrafficType.Ingress, egressDefaultPolicy);\n-        List<Map<String, Object>> egressFirewallRules = getFirewallRulesToApply(network.getId(), FirewallRule.TrafficType.Egress, egressDefaultPolicy);\n+        VspNetwork vspNetwork = _nuageVspEntityBuilder.buildVspNetwork(network, false);\n+        List<String> dnsServers = _nuageVspManager.getDnsDetails(network);\n+        List<VspAclRule> ingressFirewallRules = getFirewallRulesToApply(network, FirewallRule.TrafficType.Ingress);\n+        List<VspAclRule> egressFirewallRules = getFirewallRulesToApply(network, FirewallRule.TrafficType.Egress);\n \n         List<IPAddressVO> ips = _ipAddressDao.listStaticNatPublicIps(network.getId());\n-        List<String> acsFipUuid = new ArrayList<String>();\n+        List<String> floatingIpUuids = new ArrayList<String>();\n         for (IPAddressVO ip : ips) {\n-            acsFipUuid.add(ip.getUuid());\n+            floatingIpUuids.add(ip.getUuid());\n         }\n \n         HostVO nuageVspHost = getNuageVspHost(network.getPhysicalNetworkId());\n-        ImplementVspCommand.Builder cmdBuilder = new ImplementVspCommand.Builder()\n-                .networkId(network.getId())\n-                .networkDomainUuid(networkDomain.getUuid())\n-                .networkUuid(network.getUuid())\n-                .networkName(network.getName())\n-                .vpcOrSubnetUuid(subnetUuid)\n-                .isL2Network(isL2Network)\n-                .isL3Network(isL3Network)\n-                .isVpc(false)\n-                .isShared(isShared)\n-                .domainTemplateName(preConfiguredDomainTemplateName)\n-                .isFirewallServiceSupported(isFirewallServiceSupported)\n-                .dnsServers(dnsServers)\n-                .ingressFirewallRules(ingressFirewallRules)\n-                .egressFirewallRules(egressFirewallRules)\n-                .acsFipUuid(acsFipUuid)\n-                .egressDefaultPolicy(egressDefaultPolicy);\n-        Answer answer = _agentMgr.easySend(nuageVspHost.getId(), cmdBuilder.build());\n+        ImplementVspCommand cmd = new ImplementVspCommand(vspNetwork, dnsServers, ingressFirewallRules, egressFirewallRules, floatingIpUuids);\n+        Answer answer = _agentMgr.easySend(nuageVspHost.getId(), cmd);\n         if (answer == null || !answer.getResult()) {\n             s_logger.error(\"ImplementVspCommand for network \" + network.getUuid() + \" failed on Nuage VSD \" + nuageVspHost.getDetail(\"hostname\"));\n             if ((null != answer) && (null != answer.getDetails())) {\n@@ -302,23 +284,21 @@ public boolean implement(Network network, NetworkOffering offering, DeployDestin\n     private boolean applyACLRulesForVpc(Network network, NetworkOffering offering) throws ResourceUnavailableException {\n         List<NetworkACLItemVO> rules = _networkACLItemDao.listByACL(network.getNetworkACLId());\n         if (_networkModel.areServicesSupportedByNetworkOffering(offering.getId(), Network.Service.NetworkACL)) {\n-            applyACLRules(network, rules, true, null, false);\n+            applyACLRules(network, rules, true, false);\n         }\n         return true;\n     }\n \n-    private List<Map<String, Object>> getFirewallRulesToApply(long networkId, FirewallRule.TrafficType trafficType, final boolean egressDefaultPolicy) {\n-        List<FirewallRuleVO> firewallRulesToApply = _firewallRulesDao.listByNetworkPurposeTrafficType(networkId, FirewallRule.Purpose.Firewall, trafficType);\n+    private List<VspAclRule> getFirewallRulesToApply(final Network network, FirewallRule.TrafficType trafficType) {\n+        List<FirewallRuleVO> firewallRulesToApply = _firewallRulesDao.listByNetworkPurposeTrafficType(network.getId(), FirewallRule.Purpose.Firewall, trafficType);\n+        List<VspAclRule> vspAclRulesToApply = Lists.newArrayListWithExpectedSize(firewallRulesToApply.size());\n+\n         for (FirewallRuleVO rule : firewallRulesToApply) {\n-            // load cidrs if any\n             rule.setSourceCidrList(_firewallRulesCidrsDao.getSourceCidrs(rule.getId()));\n+            VspAclRule vspAclRule = _nuageVspEntityBuilder.buildVspAclRule(rule, network);\n+            vspAclRulesToApply.add(vspAclRule);\n         }\n-        return Lists.transform(firewallRulesToApply, new Function<FirewallRuleVO, Map<String, Object>>() {\n-            @Override\n-            public Map<String, Object> apply(FirewallRuleVO firewallRuleVO) {\n-                return getACLRuleDetails(firewallRuleVO, egressDefaultPolicy);\n-            }\n-        });\n+        return vspAclRulesToApply;\n     }\n \n     @Override\n@@ -463,48 +443,19 @@ public boolean removeDhcpSupportForSubnet(Network network) throws ResourceUnavai\n \n     @Override\n     public boolean applyStaticNats(Network config, List<? extends StaticNat> rules) throws ResourceUnavailableException {\n-        //Check if the network is associated to a VPC\n-        Long vpcId = config.getVpcId();\n-        String vpcOrSubnetUuid = null;\n-        if (vpcId != null) {\n-            Vpc vpcObj = _vpcDao.findById(vpcId);\n-            vpcOrSubnetUuid = vpcObj.getUuid();\n-        } else {\n-            vpcOrSubnetUuid = config.getUuid();\n-        }\n-        Domain networkDomain = _domainDao.findById(config.getDomainId());\n-\n-        long networkOfferingId = _ntwkOfferingDao.findById(config.getNetworkOfferingId()).getId();\n-        boolean isL3Network = isL3Network(networkOfferingId);\n-\n-        List<Map<String, Object>> sourceNatDetails = new ArrayList<Map<String, Object>>();\n+        List<VspStaticNat> vspStaticNatDetails = new ArrayList<VspStaticNat>();\n         for (StaticNat staticNat : rules) {\n-            Map<String, Object> sourceNatDetail = new HashMap<String, Object>();\n             IPAddressVO sourceNatIp = _ipAddressDao.findById(staticNat.getSourceIpAddressId());\n-            VlanVO sourceNatVan = _vlanDao.findById(sourceNatIp.getVlanId());\n+            VlanVO sourceNatVlan = _vlanDao.findById(sourceNatIp.getVlanId());\n             NicVO nicVO = _nicDao.findByIp4AddressAndNetworkId(staticNat.getDestIpAddress(), staticNat.getNetworkId());\n-            //Just get all the information about the sourceNat which will be used by NuageVsp\n-            //client to process the request\n-            sourceNatDetail.put(\"sourceNatIpUuid\", sourceNatIp.getUuid());\n-            sourceNatDetail.put(\"sourceNatIpAddress\", sourceNatIp.getAddress().addr());\n-            sourceNatDetail.put(\"nicUuid\", nicVO == null ? null : nicVO.getUuid());\n-            sourceNatDetail.put(\"nicMacAddress\", nicVO == null ? null : nicVO.getMacAddress());\n-            sourceNatDetail.put(\"isRevoke\", staticNat.isForRevoke());\n-            sourceNatDetail.put(\"sourceNatVlanUuid\", sourceNatVan.getUuid());\n-            sourceNatDetail.put(\"sourceNatVlanGateway\", sourceNatVan.getVlanGateway());\n-            sourceNatDetail.put(\"sourceNatVlanNetmask\", sourceNatVan.getVlanNetmask());\n-            sourceNatDetails.add(sourceNatDetail);\n+            VspStaticNat vspStaticNat = _nuageVspEntityBuilder.buildVspStaticNat(staticNat.isForRevoke(), sourceNatIp, sourceNatVlan, nicVO);\n+            vspStaticNatDetails.add(vspStaticNat);\n         }\n \n+        VspNetwork vspNetwork = _nuageVspEntityBuilder.buildVspNetwork(config, false);\n         HostVO nuageVspHost = getNuageVspHost(config.getPhysicalNetworkId());\n-        ApplyStaticNatVspCommand.Builder cmdBuilder = new ApplyStaticNatVspCommand.Builder()\n-                .networkDomainUuid(networkDomain.getUuid())\n-                .networkUuid(config.getUuid())\n-                .vpcOrSubnetUuid(vpcOrSubnetUuid)\n-                .isL3Network(isL3Network)\n-                .isVpc(vpcId != null)\n-                .staticNatDetails(sourceNatDetails);\n-        Answer answer = _agentMgr.easySend(nuageVspHost.getId(), cmdBuilder.build());\n+        ApplyStaticNatVspCommand cmd = new ApplyStaticNatVspCommand(vspNetwork, vspStaticNatDetails);\n+        Answer answer = _agentMgr.easySend(nuageVspHost.getId(), cmd);\n         if (answer == null || !answer.getResult()) {\n             s_logger.error(\"ApplyStaticNatNuageVspCommand for network \" + config.getUuid() + \" failed on Nuage VSD \" + nuageVspHost.getDetail(\"hostname\"));\n             if ((null != answer) && (null != answer.getDetails())) {\n@@ -534,44 +485,27 @@ public boolean applyFWRules(Network network, List<? extends FirewallRule> rules)\n         }\n \n         s_logger.info(\"Applying \" + rules.size() + \" Firewall Rules for network \" + network.getName());\n-        return applyACLRules(network, rules, false, rules.iterator().next().getTrafficType().equals(FirewallRule.TrafficType.Ingress), false);\n+        return applyACLRules(network, rules, false, false);\n     }\n \n-    protected boolean applyACLRules(Network network, List<? extends InternalIdentity> rules, boolean isNetworkAcl, Boolean isAcsIngressAcl, boolean networkReset)\n+    protected boolean applyACLRules(final Network network, List<? extends InternalIdentity> rules, boolean isNetworkAcl, boolean networkReset)\n             throws ResourceUnavailableException {\n-        Domain networksDomain = _domainDao.findById(network.getDomainId());\n-        NetworkOfferingVO networkOfferingVO = _ntwkOfferingDao.findById(network.getNetworkOfferingId());\n-        Long vpcId = network.getVpcId();\n-        String vpcOrSubnetUuid = null;\n-        if (vpcId != null) {\n-            Vpc vpcObj = _vpcDao.findById(vpcId);\n-            vpcOrSubnetUuid = vpcObj.getUuid();\n-        } else {\n-            vpcOrSubnetUuid = network.getUuid();\n-        }\n-        boolean egressDefaultPolicy = networkOfferingVO.getEgressDefaultPolicy();\n-        List<Map<String, Object>> aclRules = new ArrayList<Map<String, Object>>();\n-        for (InternalIdentity acl : rules) {\n-            aclRules.add(getACLRuleDetails(acl, egressDefaultPolicy));\n-        }\n+        VspNetwork vspNetwork = _nuageVspEntityBuilder.buildVspNetwork(network, false);\n+        List<VspAclRule> vspAclRules = Lists.transform(rules, new Function<InternalIdentity, VspAclRule>() {\n+            @Nullable\n+            @Override\n+            public VspAclRule apply(@Nullable InternalIdentity input) {\n+                if (input instanceof FirewallRule) {\n+                    return _nuageVspEntityBuilder.buildVspAclRule((FirewallRule) input, network);\n+                }\n+                return _nuageVspEntityBuilder.buildVspAclRule((NetworkACLItem) input);\n+            }\n+        });\n \n-        boolean isL3Network = isL3Network(network.getNetworkOfferingId());\n         HostVO nuageVspHost = getNuageVspHost(network.getPhysicalNetworkId());\n-        String preConfiguredDomainTemplateName = NuageVspUtil.getPreConfiguredDomainTemplateName(_configDao, network, networkOfferingVO);\n-        ApplyAclRuleVspCommand.Builder cmdBuilder = new ApplyAclRuleVspCommand.Builder()\n-                .networkAcl(isNetworkAcl)\n-                .networkUuid(network.getUuid())\n-                .networkDomainUuid(networksDomain.getUuid())\n-                .vpcOrSubnetUuid(vpcOrSubnetUuid)\n-                .networkName(network.getName())\n-                .isL2Network(!isL3Network)\n-                .aclRules(aclRules)\n-                .networkId(network.getId())\n-                .egressDefaultPolicy(networkOfferingVO.getEgressDefaultPolicy())\n-                .acsIngressAcl(isAcsIngressAcl)\n-                .networkReset(networkReset)\n-                .domainTemplateName(preConfiguredDomainTemplateName);\n-        Answer answer = _agentMgr.easySend(nuageVspHost.getId(), cmdBuilder.build());\n+        VspAclRule.ACLType vspAclType = isNetworkAcl ? VspAclRule.ACLType.NetworkACL : VspAclRule.ACLType.Firewall;\n+        ApplyAclRuleVspCommand cmd = new ApplyAclRuleVspCommand(vspAclType, vspNetwork, vspAclRules, networkReset);\n+        Answer answer = _agentMgr.easySend(nuageVspHost.getId(), cmd);\n         if (answer == null || !answer.getResult()) {\n             s_logger.error(\"ApplyAclRuleNuageVspCommand for network \" + network.getUuid() + \" failed on Nuage VSD \" + nuageVspHost.getDetail(\"hostname\"));\n             if ((null != answer) && (null != answer.getDetails())) {\n@@ -594,7 +528,7 @@ public boolean applyNetworkACLs(Network config, List<? extends NetworkACLItem> r\n         }\n         if (rules != null) {\n             s_logger.info(\"Applying \" + rules.size() + \" Network ACLs for network \" + config.getName());\n-            applyACLRules(config, rules, true, null, rules.isEmpty());\n+            applyACLRules(config, rules, true, rules.isEmpty());\n         }\n         return true;\n     }\n@@ -623,14 +557,32 @@ public boolean implementVpc(Vpc vpc, DeployDestination dest, ReservationContext\n     @Override\n     public boolean shutdownVpc(Vpc vpc, ReservationContext context) throws ConcurrentOperationException, ResourceUnavailableException {\n         if (vpc.getState().equals(Vpc.State.Inactive)) {\n+            List<DomainRouterVO> routers = _routerDao.listByVpcId(vpc.getId());\n+            if (CollectionUtils.isEmpty(routers)) {\n+                routers = _routerDao.listIncludingRemovedByVpcId(vpc.getId());\n+            }\n+\n+            List<String> domainRouterUuids = Lists.transform(routers, new Function<DomainRouterVO, String>() {\n+                @Nullable\n+                @Override\n+                public String apply(@Nullable DomainRouterVO input) {\n+                    return input != null ? input.getUuid() : null;\n+                }\n+            });\n+\n             Domain vpcDomain = _domainDao.findById(vpc.getDomainId());\n             HostVO nuageVspHost = getNuageVspHost(getPhysicalNetworkId(vpc.getZoneId()));\n-            String preConfiguredDomainTemplateName = _configDao.getValue(NuageVspManager.NuageVspVpcDomainTemplateName.key());\n-            ShutDownVpcVspCommand.Builder cmdBuilder = new ShutDownVpcVspCommand.Builder()\n-                    .domainUuid(vpcDomain.getUuid())\n-                    .vpcUuid(vpc.getUuid())\n-                    .domainTemplateName(preConfiguredDomainTemplateName);\n-            Answer answer =  _agentMgr.easySend(nuageVspHost.getId(), cmdBuilder.build());\n+\n+            String preConfiguredDomainTemplateName;\n+            VpcDetailVO domainTemplateNameDetail = _vpcDetailsDao.findDetail(vpc.getId(), NuageVspManager.nuageDomainTemplateDetailName);\n+            if (domainTemplateNameDetail != null) {\n+                preConfiguredDomainTemplateName = domainTemplateNameDetail.getValue();\n+            } else {\n+                preConfiguredDomainTemplateName = _configDao.getValue(NuageVspManager.NuageVspVpcDomainTemplateName.key());\n+            }\n+\n+            ShutDownVpcVspCommand cmd = new ShutDownVpcVspCommand(vpcDomain.getUuid(), vpc.getUuid(), preConfiguredDomainTemplateName, domainRouterUuids);\n+            Answer answer =  _agentMgr.easySend(nuageVspHost.getId(), cmd);\n             if (answer == null || !answer.getResult()) {\n                 s_logger.error(\"ShutDownVpcVspCommand for VPC \" + vpc.getUuid() + \" failed on Nuage VSD \" + nuageVspHost.getDetail(\"hostname\"));\n                 if ((null != answer) && (null != answer.getDetails())) {\n@@ -707,50 +659,4 @@ private HostVO getNuageVspHost(Long physicalNetworkId) {\n         }\n         return nuageVspHost;\n     }\n-\n-    protected boolean isL3Network(Long offeringId) {\n-        return _ntwkOfferingSrvcDao.areServicesSupportedByNetworkOffering(offeringId, Service.SourceNat)\n-                || _ntwkOfferingSrvcDao.areServicesSupportedByNetworkOffering(offeringId, Service.StaticNat);\n-    }\n-\n-    private Map<String, Object> getACLRuleDetails(Object aclRule, boolean egressDefaultPolicy) {\n-        Map<String, Object> aclDetails = new HashMap<String, Object>();\n-        if (aclRule instanceof FirewallRule) {\n-            FirewallRule firewallRule = (FirewallRule)aclRule;\n-            aclDetails.put(\"sourceCidrList\", firewallRule.getSourceCidrList());\n-            aclDetails.put(\"uuid\", firewallRule.getUuid());\n-            aclDetails.put(\"protocol\", firewallRule.getProtocol());\n-            aclDetails.put(\"startPort\", firewallRule.getSourcePortStart());\n-            aclDetails.put(\"endPort\", firewallRule.getSourcePortEnd());\n-            aclDetails.put(\"state\", firewallRule.getState().name());\n-            aclDetails.put(\"trafficType\", firewallRule.getTrafficType().name());\n-            if (firewallRule.getSourceIpAddressId() != null) {\n-                //add the source IP\n-                IPAddressVO ipaddress = _ipAddressDao.findById(((FirewallRule)aclRule).getSourceIpAddressId());\n-                aclDetails.put(\"sourceIpAddress\", ipaddress != null ? ipaddress.getVmIp() + \"/32\" : null);\n-            }\n-            if (firewallRule.getTrafficType().equals(FirewallRule.TrafficType.Egress) && egressDefaultPolicy) {\n-                aclDetails.put(\"action\", \"Deny\");\n-            } else {\n-                aclDetails.put(\"action\", \"Allow\");\n-            }\n-            aclDetails.put(\"priority\", -1);\n-            aclDetails.put(\"type\", \"Firewall\");\n-        } else {\n-            NetworkACLItem networkAcl = (NetworkACLItem)aclRule;\n-            aclDetails.put(\"sourceCidrList\", networkAcl.getSourceCidrList());\n-            aclDetails.put(\"uuid\", networkAcl.getUuid());\n-            aclDetails.put(\"protocol\", networkAcl.getProtocol());\n-            aclDetails.put(\"startPort\", networkAcl.getSourcePortStart());\n-            aclDetails.put(\"endPort\", networkAcl.getSourcePortEnd());\n-            aclDetails.put(\"state\", networkAcl.getState().name());\n-            aclDetails.put(\"trafficType\", networkAcl.getTrafficType().name());\n-            //Set sourceIP to null as it is not applicable\n-            aclDetails.put(\"sourceIpAddress\", null);\n-            aclDetails.put(\"action\", networkAcl.getAction().name());\n-            aclDetails.put(\"priority\", networkAcl.getNumber());\n-            aclDetails.put(\"type\", \"NetworkACL\");\n-        }\n-        return aclDetails;\n-    }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/network/element/NuageVspElement.java",
                "sha": "1f36ae0c3d3886a29a7548f742ec662f947f3f7d",
                "status": "modified"
            },
            {
                "additions": 81,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/network/guru/NuageVspGuestNetworkGuru.java",
                "changes": 301,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/network/guru/NuageVspGuestNetworkGuru.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 220,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/network/guru/NuageVspGuestNetworkGuru.java",
                "patch": "@@ -31,59 +31,53 @@\n import com.cloud.dc.VlanVO;\n import com.cloud.deploy.DeployDestination;\n import com.cloud.deploy.DeploymentPlan;\n-import com.cloud.domain.Domain;\n-import com.cloud.domain.DomainVO;\n import com.cloud.domain.dao.DomainDao;\n import com.cloud.exception.ConcurrentOperationException;\n import com.cloud.exception.InsufficientAddressCapacityException;\n import com.cloud.exception.InsufficientVirtualNetworkCapacityException;\n import com.cloud.host.HostVO;\n import com.cloud.host.dao.HostDao;\n-import com.cloud.network.IpAddress;\n import com.cloud.network.Network;\n import com.cloud.network.Network.GuestType;\n-import com.cloud.network.Network.Service;\n import com.cloud.network.Network.State;\n import com.cloud.network.NetworkProfile;\n import com.cloud.network.Networks;\n import com.cloud.network.NuageVspDeviceVO;\n import com.cloud.network.PhysicalNetwork;\n import com.cloud.network.PhysicalNetwork.IsolationMethod;\n import com.cloud.network.dao.IPAddressVO;\n+import com.cloud.network.dao.NetworkDetailVO;\n+import com.cloud.network.dao.NetworkDetailsDao;\n import com.cloud.network.dao.NetworkVO;\n import com.cloud.network.dao.NuageVspDao;\n import com.cloud.network.dao.PhysicalNetworkVO;\n import com.cloud.network.manager.NuageVspManager;\n-import com.cloud.network.vpc.Vpc;\n import com.cloud.network.vpc.dao.VpcDao;\n import com.cloud.offering.NetworkOffering;\n import com.cloud.offerings.dao.NetworkOfferingDao;\n import com.cloud.offerings.dao.NetworkOfferingServiceMapDao;\n import com.cloud.user.Account;\n import com.cloud.user.AccountVO;\n import com.cloud.user.dao.AccountDao;\n-import com.cloud.util.NuageVspUtil;\n+import com.cloud.utils.StringUtils;\n import com.cloud.utils.db.DB;\n import com.cloud.utils.exception.CloudRuntimeException;\n-import com.cloud.utils.net.NetUtils;\n import com.cloud.vm.NicProfile;\n import com.cloud.vm.NicVO;\n import com.cloud.vm.ReservationContext;\n-import com.cloud.vm.VirtualMachine;\n import com.cloud.vm.VirtualMachineProfile;\n import com.google.common.base.Strings;\n-import org.apache.commons.lang.StringUtils;\n+import com.cloud.util.NuageVspEntityBuilder;\n+import net.nuage.vsp.acs.client.api.model.VspNetwork;\n+import net.nuage.vsp.acs.client.api.model.VspNic;\n+import net.nuage.vsp.acs.client.api.model.VspStaticNat;\n+import net.nuage.vsp.acs.client.api.model.VspVm;\n+import org.apache.cloudstack.resourcedetail.VpcDetailVO;\n+import org.apache.cloudstack.resourcedetail.dao.VpcDetailsDao;\n import org.apache.log4j.Logger;\n \n import javax.inject.Inject;\n-import java.net.URI;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashSet;\n-import java.util.Iterator;\n import java.util.List;\n-import java.util.Set;\n-import java.util.TreeSet;\n \n public class NuageVspGuestNetworkGuru extends GuestNetworkGuru {\n     public static final Logger s_logger = Logger.getLogger(NuageVspGuestNetworkGuru.class);\n@@ -108,6 +102,12 @@\n     NuageVspManager _nuageVspManager;\n     @Inject\n     ConfigurationManager _configMgr;\n+    @Inject\n+    NuageVspEntityBuilder _nuageVspEntityBuilder;\n+    @Inject\n+    NetworkDetailsDao _networkDetailsDao;\n+    @Inject\n+    VpcDetailsDao _vpcDetailsDao;\n \n     public NuageVspGuestNetworkGuru() {\n         super();\n@@ -148,87 +148,45 @@ public Network implement(Network network, NetworkOffering offering, DeployDestin\n                 throw new IllegalStateException(\"Network \" + networkId + \" is not in expected state Implementing, but is in state \" + network.getState());\n             }\n \n+            //Get the Account details and find the type\n+            AccountVO networksAccount = _accountDao.findById(network.getAccountId());\n+            if (networksAccount.getType() == Account.ACCOUNT_TYPE_PROJECT) {\n+                String errorMessage = \"Networks created by account \" + networksAccount.getAccountName() + \" of type Project (\" + Account.ACCOUNT_TYPE_PROJECT + \") \" +\n+                        \"are not yet supported by NuageVsp provider\";\n+                s_logger.error(errorMessage);\n+                throw new InsufficientVirtualNetworkCapacityException(errorMessage, Account.class, network.getAccountId());\n+            }\n+\n             long dcId = dest.getDataCenter().getId();\n             //Get physical network id\n             Long physicalNetworkId = network.getPhysicalNetworkId();\n             //Physical network id can be null in Guest Network in Basic zone, so locate the physical network\n             if (physicalNetworkId == null) {\n                 physicalNetworkId = _networkModel.findPhysicalNetworkId(dcId, offering.getTags(), offering.getTrafficType());\n             }\n-            implemented = new NetworkVO(network.getTrafficType(), network.getMode(), network.getBroadcastDomainType(), network.getNetworkOfferingId(), State.Allocated,\n-                    network.getDataCenterId(), physicalNetworkId, offering.getRedundantRouter());\n+\n+            implemented = new NetworkVO(network.getId(), network, network.getNetworkOfferingId(), network.getGuruName(), network.getDomainId(), network.getAccountId(),\n+                    network.getRelated(), network.getName(), network.getDisplayText(), network.getNetworkDomain(), network.getGuestType(), network.getDataCenterId(),\n+                    physicalNetworkId, network.getAclType(), network.getSpecifyIpRanges(), network.getVpcId(), offering.getRedundantRouter());\n+            implemented.setUuid(network.getUuid());\n+            implemented.setState(State.Allocated);\n             if (network.getGateway() != null) {\n                 implemented.setGateway(network.getGateway());\n             }\n             if (network.getCidr() != null) {\n                 implemented.setCidr(network.getCidr());\n             }\n-            List<String[]> ipAddressRanges = new ArrayList<String[]>();\n-            String virtualRouterIp = getVirtualRouterIP(network, ipAddressRanges);\n-            String networkUuid = implemented.getUuid();\n+\n+            VspNetwork vspNetwork = _nuageVspEntityBuilder.buildVspNetwork(implemented, true);\n             String tenantId = context.getDomain().getName() + \"-\" + context.getAccount().getAccountId();\n-            String broadcastUriStr = networkUuid + \"/\" + virtualRouterIp;\n+            String broadcastUriStr = implemented.getUuid() + \"/\" + vspNetwork.getVirtualRouterIp();\n             implemented.setBroadcastUri(Networks.BroadcastDomainType.Vsp.toUri(broadcastUriStr));\n             implemented.setBroadcastDomainType(Networks.BroadcastDomainType.Vsp);\n-            //Check if the network is associated to a VPC\n-            Long vpcId = network.getVpcId();\n-            boolean isVpc = (vpcId != null);\n-            //Check owner of the Network\n-            Domain networksDomain = _domainDao.findById(network.getDomainId());\n-            //Get the Account details and find the type\n-            AccountVO networksAccount = _accountDao.findById(network.getAccountId());\n-            if (networksAccount.getType() == Account.ACCOUNT_TYPE_PROJECT) {\n-                String errorMessage = \"Networks created by account \" + networksAccount.getAccountName() + \" of type Project (\" + Account.ACCOUNT_TYPE_PROJECT + \") \" +\n-                        \"are not yet supported by NuageVsp provider\";\n-                s_logger.error(errorMessage);\n-                throw new InsufficientVirtualNetworkCapacityException(errorMessage, Account.class, network.getAccountId());\n-            }\n-            String vpcName = null;\n-            String vpcUuid = null;\n-            String preConfiguredDomainTemplateName = NuageVspUtil.getPreConfiguredDomainTemplateName(_configDao, network, offering);\n-            boolean isSharedNetwork = offering.getGuestType() == GuestType.Shared;\n-            boolean isL3Network = !isVpc && (isSharedNetwork || isL3Network(network));\n-\n-            if (isVpc) {\n-                Vpc vpcObj = _vpcDao.findById(vpcId);\n-                vpcName = vpcObj.getName();\n-                vpcUuid = vpcObj.getUuid();\n-            }\n-\n-            if (isSharedNetwork) {\n-                List<VlanVO> vlans = _vlanDao.listVlansByNetworkId(network.getId());\n-                for (VlanVO vlan : vlans) {\n-                    boolean isIpv4 = StringUtils.isNotBlank(vlan.getIpRange());\n-                    String[] range = isIpv4 ? vlan.getIpRange().split(\"-\") : vlan.getIp6Range().split(\"-\");\n-                    ipAddressRanges.add(range);\n-                }\n-            }\n \n             HostVO nuageVspHost = getNuageVspHost(physicalNetworkId);\n             List<String> dnsServers = _nuageVspManager.getDnsDetails(network);\n-            List<String> gatewaySystemIds = _nuageVspManager.getGatewaySystemIds();\n-            ImplementNetworkVspCommand.Builder cmdBuilder = new ImplementNetworkVspCommand.Builder()\n-                    .networkDomainName(networksDomain.getName())\n-                    .networkDomainPath(networksDomain.getPath())\n-                    .networkDomainUuid(networksDomain.getUuid())\n-                    .networkAccountName(networksAccount.getAccountName())\n-                    .networkAccountUuid(networksAccount.getUuid())\n-                    .networkName(network.getName())\n-                    .networkCidr(network.getCidr())\n-                    .networkGateway(network.getGateway())\n-                    .networkAclId(network.getNetworkACLId())\n-                    .dnsServers(dnsServers)\n-                    .gatewaySystemIds(gatewaySystemIds)\n-                    .networkUuid(network.getUuid())\n-                    .isL3Network(isL3Network)\n-                    .isVpc(isVpc)\n-                    .isSharedNetwork(isSharedNetwork)\n-                    .vpcName(vpcName)\n-                    .vpcUuid(vpcUuid)\n-                    .defaultEgressPolicy(offering.getEgressDefaultPolicy())\n-                    .ipAddressRange(ipAddressRanges)\n-                    .domainTemplateName(preConfiguredDomainTemplateName);\n-            Answer answer = _agentMgr.easySend(nuageVspHost.getId(), cmdBuilder.build());\n+            ImplementNetworkVspCommand cmd = new ImplementNetworkVspCommand(vspNetwork, dnsServers);\n+            Answer answer = _agentMgr.easySend(nuageVspHost.getId(), cmd);\n \n             if (answer == null || !answer.getResult()) {\n                 s_logger.error(\"ImplementNetworkVspCommand for network \" + network.getUuid() + \" failed on Nuage VSD \" + nuageVspHost.getDetail(\"hostname\"));\n@@ -237,7 +195,18 @@ public Network implement(Network network, NetworkOffering offering, DeployDestin\n                 }\n                 return null;\n             }\n-            s_logger.info(\"Implemented OK, network \" + networkUuid + \" in tenant \" + tenantId + \" linked to \" + implemented.getBroadcastUri());\n+\n+            if (StringUtils.isNotBlank(vspNetwork.getDomainTemplateName())) {\n+                if (network.getVpcId() != null) {\n+                    VpcDetailVO vpcDetail = new VpcDetailVO(network.getVpcId(), NuageVspManager.nuageDomainTemplateDetailName, vspNetwork.getDomainTemplateName(), false);\n+                    _vpcDetailsDao.persist(vpcDetail);\n+                } else {\n+                    NetworkDetailVO networkDetail = new NetworkDetailVO(implemented.getId(), NuageVspManager.nuageDomainTemplateDetailName, vspNetwork.getDomainTemplateName(), false);\n+                    _networkDetailsDao.persist(networkDetail);\n+                }\n+            }\n+\n+            s_logger.info(\"Implemented OK, network \" + implemented.getUuid() + \" in tenant \" + tenantId + \" linked to \" + implemented.getBroadcastUri());\n         } finally {\n             _networkDao.releaseFromLockTable(network.getId());\n         }\n@@ -262,68 +231,38 @@ public void reserve(NicProfile nic, Network network, VirtualMachineProfile vm, D\n             if (s_logger.isDebugEnabled()) {\n                 s_logger.debug(\"Handling reserve() call back to with Create a new VM or add an interface to existing VM in network \" + network.getName());\n             }\n-            nic.setBroadcastUri(network.getBroadcastUri());\n-            nic.setIsolationUri(network.getBroadcastUri());\n+\n             DataCenter dc = _dcDao.findById(network.getDataCenterId());\n-            Account networksAccount = _accountDao.findById(network.getAccountId());\n-            DomainVO networksDomain = _domainDao.findById(network.getDomainId());\n-            //Get the Account details and find the type\n-            long networkOwnedBy = network.getAccountId();\n-            AccountVO neworkAccountDetails = _accountDao.findById(networkOwnedBy);\n+            AccountVO neworkAccountDetails = _accountDao.findById(network.getAccountId());\n             if (neworkAccountDetails.getType() == Account.ACCOUNT_TYPE_PROJECT) {\n                 throw new InsufficientVirtualNetworkCapacityException(\"CS project support is not yet implemented in NuageVsp\", DataCenter.class, dc.getId());\n             }\n \n-            //NicProfile does not contain the NIC UUID. We need this information to set it in the VMInterface and VPort\n-            //that we create in VSP\n-            NicVO nicFrmDB = _nicDao.findById(nic.getId());\n-            NetworkOffering networkOffering = _ntwkOfferingDao.findById(network.getNetworkOfferingId());\n-            boolean isDomainRouter = vm.getType().equals(VirtualMachine.Type.DomainRouter);\n-            URI broadcastUri = network.getBroadcastUri();\n-            if (Strings.isNullOrEmpty(broadcastUri.getPath()) || !broadcastUri.getPath().startsWith(\"/\")) {\n+            if (Strings.isNullOrEmpty(network.getBroadcastUri().getPath()) || !network.getBroadcastUri().getPath().startsWith(\"/\")) {\n                 throw new IllegalStateException(\"The broadcast URI path \" + network.getBroadcastUri() + \" is empty or in an incorrect format.\");\n             }\n-            String domainRouterIp = network.getBroadcastUri().getPath().substring(1);\n-            boolean isL3Network = isL3Network(network);\n-            boolean isSharedNetwork = networkOffering.getGuestType() == GuestType.Shared;\n-            Long vpcId = network.getVpcId();\n-            String vpcUuid = null;\n-            if (vpcId != null) {\n-                Vpc vpcObj = _vpcDao.findById(vpcId);\n-                vpcUuid = vpcObj.getUuid();\n-            }\n-            HostVO nuageVspHost = getNuageVspHost(network.getPhysicalNetworkId());\n+\n+            nic.setBroadcastUri(network.getBroadcastUri());\n+            nic.setIsolationUri(network.getBroadcastUri());\n+\n+            //NicProfile does not contain the NIC UUID. We need this information to set it in the VMInterface and VPort\n+            //that we create in VSP\n+            NicVO nicFromDb = _nicDao.findById(nic.getId());\n             IPAddressVO staticNatIp = _ipAddressDao.findByVmIdAndNetworkId(network.getId(), vm.getId());\n \n-            ReserveVmInterfaceVspCommand.Builder cmdBuilder = new ReserveVmInterfaceVspCommand.Builder()\n-                    .nicUuid(nicFrmDB.getUuid())\n-                    .nicMacAddress(nic.getMacAddress())\n-                    .networkUuid(network.getUuid())\n-                    .isL3Network(isL3Network)\n-                    .isSharedNetwork(isSharedNetwork)\n-                    .vpcUuid(vpcUuid)\n-                    .networkDomainUuid(networksDomain.getUuid())\n-                    .networksAccountUuid(networksAccount.getUuid())\n-                    .isDomainRouter(isDomainRouter)\n-                    .domainRouterIp(domainRouterIp)\n-                    .vmInstanceName(vm.getInstanceName())\n-                    .vmUuid(vm.getUuid())\n-                    .vmUserName(networksDomain.getUuid())\n-                    .vmUserDomainName(networksAccount.getUuid())\n-                    .useStaticIp(true)\n-                    .staticIp(nic.getIPv4Address());\n+            VspNetwork vspNetwork = _nuageVspEntityBuilder.buildVspNetwork(network, false);\n+            VspVm vspVm = _nuageVspEntityBuilder.buildVspVm(vm.getVirtualMachine(), network);\n+            VspNic vspNic = _nuageVspEntityBuilder.buildVspNic(nicFromDb.getUuid(), nic);\n+            VspStaticNat vspStaticNat = null;\n             if (staticNatIp != null) {\n                 VlanVO staticNatVlan = _vlanDao.findById(staticNatIp.getVlanId());\n-                cmdBuilder = cmdBuilder.staticNatIpUuid(staticNatIp.getUuid())\n-                        .staticNatIpAddress(staticNatIp.getAddress().addr())\n-                        .isStaticNatIpAllocated(staticNatIp.getState().equals(IpAddress.State.Allocated))\n-                        .isOneToOneNat(staticNatIp.isOneToOneNat())\n-                        .staticNatVlanUuid(staticNatVlan.getUuid())\n-                        .staticNatVlanGateway(staticNatVlan.getVlanGateway())\n-                        .staticNatVlanNetmask(staticNatVlan.getVlanNetmask());\n+                vspStaticNat = _nuageVspEntityBuilder.buildVspStaticNat(null, staticNatIp, staticNatVlan, null);\n             }\n \n-            Answer answer = _agentMgr.easySend(nuageVspHost.getId(), cmdBuilder.build());\n+            HostVO nuageVspHost = getNuageVspHost(network.getPhysicalNetworkId());\n+            ReserveVmInterfaceVspCommand cmd = new ReserveVmInterfaceVspCommand(vspNetwork, vspVm, vspNic, vspStaticNat);\n+            Answer answer = _agentMgr.easySend(nuageVspHost.getId(), cmd);\n+\n             if (answer == null || !answer.getResult()) {\n                 s_logger.error(\"ReserveVmInterfaceNuageVspCommand failed for NIC \" + nic.getId() + \" attached to VM \" + vm.getId() + \" in network \" + network.getId());\n                 if ((null != answer) && (null != answer.getDetails())) {\n@@ -332,8 +271,8 @@ public void reserve(NicProfile nic, Network network, VirtualMachineProfile vm, D\n                 throw new InsufficientVirtualNetworkCapacityException(\"Failed to reserve VM in Nuage VSP.\", Network.class, network.getId());\n             }\n \n-            if (isDomainRouter) {\n-                nic.setIPv4Address(domainRouterIp);\n+            if (vspVm.getDomainRouter() == Boolean.TRUE) {\n+                nic.setIPv4Address(vspVm.getDomainRouterIp());\n             }\n \n         } finally {\n@@ -378,32 +317,16 @@ public void deallocate(Network network, NicProfile nic, VirtualMachineProfile vm\n                 s_logger.debug(\"Handling deallocate() call back, which is called when a VM is destroyed or interface is removed, \" + \"to delete VM Interface with IP \"\n                         + nic.getIPv4Address() + \" from a VM \" + vm.getInstanceName() + \" with state \" + vm.getVirtualMachine().getState());\n             }\n-            DomainVO networksDomain = _domainDao.findById(network.getDomainId());\n-            NicVO nicFrmDd = _nicDao.findById(nic.getId());\n-            NetworkOffering networkOffering = _ntwkOfferingDao.findById(network.getNetworkOfferingId());\n-            boolean isL3Network = isL3Network(network);\n-            boolean isSharedNetwork = networkOffering.getGuestType() == GuestType.Shared;\n-            boolean isExpunging = vm.getVirtualMachine().getState() == VirtualMachine.State.Expunging;\n-            Long vpcId = network.getVpcId();\n-            String vpcUuid = null;\n-            if (vpcId != null) {\n-                Vpc vpcObj = _vpcDao.findById(vpcId);\n-                vpcUuid = vpcObj.getUuid();\n-            }\n+\n+            NicVO nicFromDb = _nicDao.findById(nic.getId());\n+\n+            VspNetwork vspNetwork = _nuageVspEntityBuilder.buildVspNetwork(network, false);\n+            VspVm vspVm = _nuageVspEntityBuilder.buildVspVm(vm.getVirtualMachine(), network);\n+            VspNic vspNic = _nuageVspEntityBuilder.buildVspNic(nicFromDb.getUuid(), nic);\n             HostVO nuageVspHost = getNuageVspHost(network.getPhysicalNetworkId());\n-            DeallocateVmVspCommand.Builder cmdBuilder = new DeallocateVmVspCommand.Builder()\n-                    .networkUuid(network.getUuid())\n-                    .nicFromDbUuid(nicFrmDd.getUuid())\n-                    .nicMacAddress(nic.getMacAddress())\n-                    .nicIp4Address(nic.getIPv4Address())\n-                    .isL3Network(isL3Network)\n-                    .isSharedNetwork(isSharedNetwork)\n-                    .vpcUuid(vpcUuid)\n-                    .networksDomainUuid(networksDomain.getUuid())\n-                    .vmInstanceName(vm.getInstanceName())\n-                    .vmUuid(vm.getUuid())\n-                    .isExpungingState(isExpunging);\n-            Answer answer = _agentMgr.easySend(nuageVspHost.getId(), cmdBuilder.build());\n+\n+            DeallocateVmVspCommand cmd = new DeallocateVmVspCommand(vspNetwork, vspVm, vspNic);\n+            Answer answer = _agentMgr.easySend(nuageVspHost.getId(), cmd);\n             if (answer == null || !answer.getResult()) {\n                 s_logger.error(\"DeallocateVmNuageVspCommand for VM \" + vm.getUuid() + \" failed on Nuage VSD \" + nuageVspHost.getDetail(\"hostname\"));\n                 if ((null != answer) && (null != answer.getDetails())) {\n@@ -451,27 +374,10 @@ public boolean trash(Network network, NetworkOffering offering) {\n             if (s_logger.isDebugEnabled()) {\n                 s_logger.debug(\"Handling trash() call back to delete the network \" + network.getName() + \" with uuid \" + network.getUuid() + \" from VSP\");\n             }\n-            long domainId = network.getDomainId();\n-            Domain domain = _domainDao.findById(domainId);\n-            boolean isL3Network = isL3Network(network);\n-            boolean isSharedNetwork = offering.getGuestType() == GuestType.Shared;\n-            Long vpcId = network.getVpcId();\n-            String vpcUuid = null;\n-            if (vpcId != null) {\n-                Vpc vpcObj = _vpcDao.findById(vpcId);\n-                vpcUuid = vpcObj.getUuid();\n-            }\n-\n-            String preConfiguredDomainTemplateName = NuageVspUtil.getPreConfiguredDomainTemplateName(_configDao, network, offering);\n+            VspNetwork vspNetwork = _nuageVspEntityBuilder.buildVspNetwork(network, false);\n             HostVO nuageVspHost = getNuageVspHost(network.getPhysicalNetworkId());\n-            TrashNetworkVspCommand.Builder cmdBuilder = new TrashNetworkVspCommand.Builder()\n-                    .domainUuid(domain.getUuid())\n-                    .networkUuid(network.getUuid())\n-                    .isL3Network(isL3Network)\n-                    .isSharedNetwork(isSharedNetwork)\n-                    .vpcUuid(vpcUuid)\n-                    .domainTemplateName(preConfiguredDomainTemplateName);\n-            Answer answer = _agentMgr.easySend(nuageVspHost.getId(), cmdBuilder.build());\n+            TrashNetworkVspCommand cmd = new TrashNetworkVspCommand(vspNetwork);\n+            Answer answer = _agentMgr.easySend(nuageVspHost.getId(), cmd);\n             if (answer == null || !answer.getResult()) {\n                 s_logger.error(\"TrashNetworkNuageVspCommand for network \" + network.getUuid() + \" failed\");\n                 if ((null != answer) && (null != answer.getDetails())) {\n@@ -485,51 +391,6 @@ public boolean trash(Network network, NetworkOffering offering) {\n         return super.trash(network, offering);\n     }\n \n-    private String getVirtualRouterIP(Network network, Collection<String[]> ipAddressRanges) throws InsufficientVirtualNetworkCapacityException {\n-        String virtualRouterIp;\n-        //Check if the subnet has minimum 5 host in it.\n-        String subnet = NetUtils.getCidrSubNet(network.getCidr());\n-        String netmask = NetUtils.getCidrNetmask(network.getCidr());\n-        long cidrSize = NetUtils.getCidrSize(netmask);\n-\n-        Set<Long> allIPsInCidr = NetUtils.getAllIpsFromCidr(subnet, cidrSize, new HashSet<Long>());\n-        if (allIPsInCidr == null || !(allIPsInCidr instanceof TreeSet)) {\n-            throw new IllegalStateException(\"The IPs in CIDR for subnet \" + subnet + \" where null or returned in a non-ordered set.\");\n-        }\n-\n-        if (allIPsInCidr.size() > 3) {\n-            //get the second IP and see if it the networks GatewayIP\n-            Iterator<Long> ipIterator = allIPsInCidr.iterator();\n-            long vip = ipIterator.next();\n-            if (NetUtils.ip2Long(network.getGateway()) == vip) {\n-                vip = ipIterator.next();\n-                virtualRouterIp = NetUtils.long2Ip(vip);\n-                if (s_logger.isDebugEnabled()) {\n-                    s_logger.debug(\"1st IP is used as gateway IP. Reserving \" + virtualRouterIp + \" for the Virtual Router IP for Network(\" + network.getName() + \")\");\n-                }\n-            } else {\n-                virtualRouterIp = NetUtils.long2Ip(vip);\n-                if (s_logger.isDebugEnabled()) {\n-                    s_logger.debug(\"1st IP is not used as the gateway IP. Reserving\" + virtualRouterIp + \" for the Virtual Router IP for Network(\" + network.getName() + \")\");\n-                }\n-            }\n-            ipAddressRanges.add(new String[] {\n-                NetUtils.long2Ip(ipIterator.next()),\n-                NetUtils.getIpRangeEndIpFromCidr(subnet, cidrSize)\n-            });\n-            return virtualRouterIp;\n-        }\n-\n-        throw new InsufficientVirtualNetworkCapacityException(\"VSP allocates an IP for VirtualRouter.\" + \" So, subnet should have atleast minimum 4 hosts \", Network.class,\n-                network.getId());\n-    }\n-\n-    private boolean isL3Network(Network network) {\n-        return _ntwkOfferingSrvcDao.areServicesSupportedByNetworkOffering(network.getNetworkOfferingId(), Service.SourceNat)\n-                || _ntwkOfferingSrvcDao.areServicesSupportedByNetworkOffering(network.getNetworkOfferingId(), Service.StaticNat)\n-                || network.getGuestType() == GuestType.Shared;\n-    }\n-\n     private HostVO getNuageVspHost(long physicalNetworkId) {\n         HostVO nuageVspHost;\n         List<NuageVspDeviceVO> nuageVspDevices = _nuageVspDao.listByPhysicalNetwork(physicalNetworkId);",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/network/guru/NuageVspGuestNetworkGuru.java",
                "sha": "a6c17e3517f1a5a06f75d4a2781ad4b77a952b1f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/network/manager/NuageVspManager.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/network/manager/NuageVspManager.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 0,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/network/manager/NuageVspManager.java",
                "patch": "@@ -40,6 +40,8 @@\n \n     static final String nuageVPCOfferingDisplayText = \"Nuage VSP VPC Offering\";\n \n+    static final String nuageDomainTemplateDetailName = \"domainTemplateName\";\n+\n     static final ConfigKey<Boolean> NuageVspConfigDns = new ConfigKey<Boolean>(Boolean.class, \"nuagevsp.configure.dns\", \"Advanced\", \"true\",\n             \"Defines if NuageVsp plugin needs to configure DNS setting for a VM or not. True will configure the DNS and false will not configure the DNS settings\", true,\n             Scope.Global, null);",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/network/manager/NuageVspManager.java",
                "sha": "4861fb240df29e3e49b0a56021cdd999dd5c126d",
                "status": "modified"
            },
            {
                "additions": 82,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/network/manager/NuageVspManagerImpl.java",
                "changes": 130,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/network/manager/NuageVspManagerImpl.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 48,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/network/manager/NuageVspManagerImpl.java",
                "patch": "@@ -27,8 +27,8 @@\n import com.cloud.agent.api.Command;\n import com.cloud.agent.api.PingNuageVspCommand;\n import com.cloud.agent.api.StartupCommand;\n-import com.cloud.agent.api.manager.GetClientDefaultsAnswer;\n-import com.cloud.agent.api.manager.GetClientDefaultsCommand;\n+import com.cloud.agent.api.manager.GetApiDefaultsAnswer;\n+import com.cloud.agent.api.manager.GetApiDefaultsCommand;\n import com.cloud.agent.api.manager.SupportedApiVersionCommand;\n import com.cloud.agent.api.sync.SyncDomainAnswer;\n import com.cloud.agent.api.sync.SyncDomainCommand;\n@@ -37,7 +37,6 @@\n import com.cloud.api.ApiDBUtils;\n import com.cloud.api.commands.AddNuageVspDeviceCmd;\n import com.cloud.api.commands.DeleteNuageVspDeviceCmd;\n-import com.cloud.api.commands.IssueNuageVspResourceRequestCmd;\n import com.cloud.api.commands.ListNuageVspDevicesCmd;\n import com.cloud.api.commands.UpdateNuageVspDeviceCmd;\n import com.cloud.api.response.NuageVspDeviceResponse;\n@@ -70,7 +69,6 @@\n import com.cloud.network.dao.PhysicalNetworkServiceProviderVO;\n import com.cloud.network.dao.PhysicalNetworkVO;\n import com.cloud.network.resource.NuageVspResource;\n-import com.cloud.network.sync.NuageVspSync;\n import com.cloud.network.vpc.VpcManager;\n import com.cloud.network.vpc.VpcOffering;\n import com.cloud.network.vpc.VpcOfferingServiceMapVO;\n@@ -106,7 +104,10 @@\n import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n import com.google.common.collect.Sets;\n+import com.cloud.util.NuageVspEntityBuilder;\n import net.nuage.vsp.acs.NuageVspPluginClientLoader;\n+import net.nuage.vsp.acs.client.api.model.VspApiDefaults;\n+import net.nuage.vsp.acs.client.api.model.VspDomain;\n import org.apache.cloudstack.framework.config.ConfigKey;\n import org.apache.cloudstack.framework.config.Configurable;\n import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n@@ -127,16 +128,13 @@\n import java.util.Set;\n import java.util.UUID;\n import java.util.concurrent.ExecutionException;\n-import java.util.concurrent.ScheduledExecutorService;\n \n import static com.cloud.agent.api.sync.SyncNuageVspCmsIdCommand.SyncType;\n \n public class NuageVspManagerImpl extends ManagerBase implements NuageVspManager, Configurable, StateListener<Status, Status.Event, Host> {\n \n     private static final Logger s_logger = Logger.getLogger(NuageVspManagerImpl.class);\n \n-    private static final int ONE_MINUTE_MULTIPLIER = 60 * 1000;\n-\n     public static final Map<Network.Service, Set<Network.Provider>> NUAGE_VSP_VPC_SERVICE_MAP;\n     private static final ConfigKey[] NUAGE_VSP_CONFIG_KEYS = new ConfigKey<?>[] { NuageVspConfigDns, NuageVspDnsExternal, NuageVspConfigGateway,\n             NuageVspSharedNetworkDomainTemplateName, NuageVspVpcDomainTemplateName, NuageVspIsolatedNetworkDomainTemplateName };\n@@ -164,8 +162,6 @@\n     @Inject\n     NuageVspDao _nuageVspDao;\n     @Inject\n-    NuageVspSync _nuageVspSync;\n-    @Inject\n     DataCenterDao _dataCenterDao;\n     @Inject\n     ConfigurationDao _configDao;\n@@ -187,8 +183,8 @@\n     NetworkOfferingDao _networkOfferingDao;\n     @Inject\n     NetworkOfferingServiceMapDao _networkOfferingServiceMapDao;\n-\n-    private ScheduledExecutorService scheduler;\n+    @Inject\n+    NuageVspEntityBuilder _nuageVspEntityBuilder;\n \n     @Inject\n     MessageBus _messageBus;\n@@ -212,7 +208,7 @@\n     @Override\n     public List<Class<?>> getCommands() {\n         return Lists.<Class<?>>newArrayList(AddNuageVspDeviceCmd.class, DeleteNuageVspDeviceCmd.class, ListNuageVspDevicesCmd.class,\n-                IssueNuageVspResourceRequestCmd.class, UpdateNuageVspDeviceCmd.class);\n+                UpdateNuageVspDeviceCmd.class);\n     }\n \n     @Override\n@@ -242,21 +238,21 @@ public NuageVspDeviceVO addNuageVspDevice(AddNuageVspDeviceCmd cmd) {\n         }\n \n         try {\n-            NuageVspPluginClientLoader clientLoader = NuageVspPluginClientLoader.getClientLoader(null, null, 1, 1, null);\n+            NuageVspPluginClientLoader clientLoader = NuageVspPluginClientLoader.getClientLoader(null, null, null, null, 1, 1, null);\n \n-            Map<String, Object> clientDefaults = clientLoader.getNuageVspManagerClient().getClientDefaults();\n-            String apiVersion = MoreObjects.firstNonNull(cmd.getApiVersion(), (String) clientDefaults.get(\"CURRENT_API_VERSION\"));\n+            VspApiDefaults apiDefaults = clientLoader.getNuageVspManagerClient().getApiDefaults();\n+            String apiVersion = MoreObjects.firstNonNull(cmd.getApiVersion(), apiDefaults.getVersion());\n             if (!clientLoader.getNuageVspManagerClient().isSupportedApiVersion(apiVersion)) {\n                 throw new CloudRuntimeException(\"Unsupported API version : \" + apiVersion);\n             }\n \n             int port = cmd.getPort();\n             if (0 == port) {\n-                port = 8443;\n+                port = 443;\n             }\n             String cmsUserPasswordBase64 = NuageVspUtil.encodePassword(cmd.getPassword());\n-            String retryCount = String.valueOf(MoreObjects.firstNonNull(cmd.getApiRetryCount(), clientDefaults.get(\"DEFAULT_API_RETRY_COUNT\")));\n-            String retryInterval = String.valueOf(MoreObjects.firstNonNull(cmd.getApiRetryInterval(), clientDefaults.get(\"DEFAULT_API_RETRY_INTERVAL\")));\n+            String retryCount = String.valueOf(MoreObjects.firstNonNull(cmd.getApiRetryCount(), apiDefaults.getRetryCount()));\n+            String retryInterval = String.valueOf(MoreObjects.firstNonNull(cmd.getApiRetryInterval(), apiDefaults.getRetryInterval()));\n             NuageVspResource.Configuration resourceConfiguration = new NuageVspResource.Configuration()\n                     .name(\"Nuage VSD - \" + cmd.getHostName())\n                     .guid(UUID.randomUUID().toString())\n@@ -284,22 +280,33 @@ public NuageVspDeviceVO addNuageVspDevice(AddNuageVspDeviceCmd cmd) {\n             _hostDetailsDao.persist(detail);\n \n             ConfigurationVO cmsIdConfig = _configDao.findByName(\"nuagevsp.cms.id\");\n+            NuageVspDeviceVO matchingNuageVspDevice = findMatchingNuageVspDevice(nuageVspDevice);\n+            String cmsId;\n+            if (matchingNuageVspDevice != null) {\n+                cmsId = findNuageVspCmsIdForDevice(matchingNuageVspDevice.getId(), cmsIdConfig);\n+            } else {\n+                SyncNuageVspCmsIdCommand syncCmd = new SyncNuageVspCmsIdCommand(SyncType.REGISTER, null);\n+                SyncNuageVspCmsIdAnswer answer = (SyncNuageVspCmsIdAnswer) _agentMgr.easySend(nuageVspDevice.getHostId(), syncCmd);\n+                if (answer != null && answer.getSuccess()) {\n+                    cmsId = answer.getNuageVspCmsId();\n+                } else {\n+                    throw new CloudRuntimeException(\"Failed to register CMS ID\");\n+                }\n+            }\n+\n             host = findNuageVspHost(nuageVspDevice.getHostId());\n-            SyncNuageVspCmsIdCommand syncCmd = new SyncNuageVspCmsIdCommand(SyncType.REGISTER, null);\n-            SyncNuageVspCmsIdAnswer answer = (SyncNuageVspCmsIdAnswer) _agentMgr.easySend(nuageVspDevice.getHostId(), syncCmd);\n-            if (answer != null && answer.getSuccess()) {\n-                registerNewNuageVspDevice(cmsIdConfig, nuageVspDevice.getId() + \":\" + answer.getNuageVspCmsId());\n+            registerNewNuageVspDevice(cmsIdConfig, nuageVspDevice.getId() + \":\" + cmsId);\n \n-                detail = new DetailVO(host.getId(), \"nuagevspcmsid\", answer.getNuageVspCmsId());\n-                _hostDetailsDao.persist(detail);\n+            detail = new DetailVO(host.getId(), \"nuagevspcmsid\", cmsId);\n+            _hostDetailsDao.persist(detail);\n \n-                resourceConfiguration.nuageVspCmsId(answer.getNuageVspCmsId());\n-                resource.configure(cmd.getHostName(), Maps.<String, Object>newHashMap(resourceConfiguration.build()));\n+            resourceConfiguration.nuageVspCmsId(cmsId);\n+            resource.configure(cmd.getHostName(), Maps.<String, Object>newHashMap(resourceConfiguration.build()));\n \n+            if (matchingNuageVspDevice == null) {\n                 auditDomainsOnVsp((HostVO) host, true, false);\n-            } else {\n-                throw new CloudRuntimeException(\"Failed to register CMS ID\");\n             }\n+\n             return nuageVspDevice;\n         } catch (ConfigurationException e) {\n             s_logger.error(\"Failed to configure Nuage VSD resource \" + cmd.getHostName(), e);\n@@ -372,13 +379,13 @@ public NuageVspDeviceVO updateNuageVspDevice(UpdateNuageVspDeviceCmd command) {\n             updateRequired = true;\n         }\n \n-        GetClientDefaultsCommand getClientDefaultsCmd = new GetClientDefaultsCommand();\n-        GetClientDefaultsAnswer getClientDefaultsAnswer = (GetClientDefaultsAnswer) _agentMgr.easySend(nuageVspHost.getId(), getClientDefaultsCmd);\n+        GetApiDefaultsCommand apiDefaultsCmd = new GetApiDefaultsCommand();\n+        GetApiDefaultsAnswer apiDefaultsAnswer = (GetApiDefaultsAnswer) _agentMgr.easySend(nuageVspHost.getId(), apiDefaultsCmd);\n         String apiVersion = MoreObjects.firstNonNull(command.getApiVersion(), resourceConfiguration.apiVersion());\n         SupportedApiVersionCommand supportedApiVersionCmd = new SupportedApiVersionCommand(apiVersion);\n         Answer supportedApiVersionAnswer = _agentMgr.easySend(nuageVspHost.getId(), supportedApiVersionCmd);\n         if (!supportedApiVersionAnswer.getResult()) {\n-            throw new CloudRuntimeException(\"Incorrect API version: Nuage plugin only supports \" + getClientDefaultsAnswer.getCurrentApiVersion());\n+            throw new CloudRuntimeException(\"Incorrect API version: Nuage plugin only supports \" + apiDefaultsAnswer.getApiDefaults().getVersion());\n         }\n \n         String apiRelativePath = \"/nuage/api/\" + apiVersion;\n@@ -474,25 +481,31 @@ public boolean deleteNuageVspDevice(DeleteNuageVspDeviceCmd cmd) {\n             }\n         }\n \n+        NuageVspDeviceVO matchingNuageVspDevice = findMatchingNuageVspDevice(nuageVspDevice);\n         ConfigurationVO cmsIdConfig = _configDao.findByName(\"nuagevsp.cms.id\");\n         HostVO host = findNuageVspHost(nuageVspDevice.getHostId());\n-        if (!auditDomainsOnVsp(host, false, true)) {\n-            return false;\n-        }\n-\n         String nuageVspCmsId = findNuageVspCmsIdForDevice(nuageVspDevice.getId(), cmsIdConfig);\n-        SyncNuageVspCmsIdCommand syncCmd = new SyncNuageVspCmsIdCommand(SyncType.UNREGISTER, nuageVspCmsId);\n-        SyncNuageVspCmsIdAnswer answer = (SyncNuageVspCmsIdAnswer) _agentMgr.easySend(nuageVspDevice.getHostId(), syncCmd);\n-        if (answer != null && answer.getSuccess()) {\n-            String currentValue = cmsIdConfig.getValue();\n-            String newValue = currentValue.replace(nuageVspDevice.getId() + \":\" + answer.getNuageVspCmsId(), \"\");\n-            if (!Strings.isNullOrEmpty(newValue) && newValue.startsWith(\";\")) {\n-                newValue = newValue.substring(1);\n+        if (matchingNuageVspDevice == null) {\n+            if (!auditDomainsOnVsp(host, false, true)) {\n+                return false;\n             }\n-            _configDao.update(\"nuagevsp.cms.id\", newValue);\n-        } else {\n-            return false;\n+\n+            SyncNuageVspCmsIdCommand syncCmd = new SyncNuageVspCmsIdCommand(SyncType.UNREGISTER, nuageVspCmsId);\n+            SyncNuageVspCmsIdAnswer answer = (SyncNuageVspCmsIdAnswer) _agentMgr.easySend(nuageVspDevice.getHostId(), syncCmd);\n+            if (answer == null || !answer.getSuccess()) {\n+                return false;\n+            }\n+        }\n+\n+        String newValue = cmsIdConfig.getValue().replace(nuageVspDevice.getId() + \":\" + nuageVspCmsId, \"\");\n+        if (newValue.startsWith(\";\")) {\n+            newValue = newValue.substring(1);\n         }\n+        if (newValue.endsWith(\";\")) {\n+            newValue = newValue.substring(0, newValue.length() - 1);\n+        }\n+        newValue = newValue.replaceAll(\";+\", \";\");\n+        _configDao.update(\"nuagevsp.cms.id\", newValue);\n \n         HostVO nuageHost = _hostDao.findById(nuageVspDevice.getHostId());\n         Long hostId = nuageHost.getId();\n@@ -505,6 +518,22 @@ public boolean deleteNuageVspDevice(DeleteNuageVspDeviceCmd cmd) {\n         return true;\n     }\n \n+    private NuageVspDeviceVO findMatchingNuageVspDevice(NuageVspDeviceVO nuageVspDevice) {\n+        List<NuageVspDeviceVO> otherNuageVspDevices = _nuageVspDao.listAll();\n+        for (NuageVspDeviceVO otherNuageVspDevice : otherNuageVspDevices) {\n+            if (otherNuageVspDevice.getId() == nuageVspDevice.getId()) continue;\n+\n+            HostVO nuageVspDeviceHost = findNuageVspHost(nuageVspDevice.getHostId());\n+            HostVO otherNuageVspDeviceHost = findNuageVspHost(otherNuageVspDevice.getHostId());\n+            String nuageVspDeviceHostName = nuageVspDeviceHost.getDetail(\"hostname\");\n+            String otherNuageVspDeviceHostName = otherNuageVspDeviceHost.getDetail(\"hostname\");\n+            if (otherNuageVspDeviceHostName != null && otherNuageVspDeviceHostName.equals(nuageVspDeviceHostName)) {\n+                return otherNuageVspDevice;\n+            }\n+        }\n+        return null;\n+    }\n+\n     @Override\n     public List<NuageVspDeviceVO> listNuageVspDevices(ListNuageVspDevicesCmd cmd) {\n         Long physicalNetworkId = cmd.getPhysicalNetworkId();\n@@ -551,6 +580,8 @@ private void registerNewNuageVspDevice(ConfigurationVO currentConfig, String reg\n     }\n \n     private void auditHost(HostVO host) {\n+        if (host == null) return;\n+\n         _hostDao.loadDetails(host);\n \n         boolean validateDomains = true;\n@@ -585,7 +616,8 @@ private boolean auditDomainsOnVsp(HostVO host, boolean add, boolean remove) {\n         _hostDao.loadDetails(host);\n         List<DomainVO> allDomains = _domainDao.listAll();\n         for (DomainVO domain : allDomains) {\n-            SyncDomainCommand cmd = new SyncDomainCommand(domain.getUuid(), domain.getName(), domain.getPath(), add, remove);\n+            VspDomain vspDomain = _nuageVspEntityBuilder.buildVspDomain(domain);\n+            SyncDomainCommand cmd = new SyncDomainCommand(vspDomain, add, remove);\n             SyncDomainAnswer answer = (SyncDomainAnswer) _agentMgr.easySend(host.getId(), cmd);\n             return answer.getSuccess();\n         }\n@@ -683,7 +715,8 @@ public void onPublishMessage(String senderAddress, String subject, Object args)\n                     List<NuageVspDeviceVO> nuageVspDevices = _nuageVspDao.listAll();\n                     for (NuageVspDeviceVO nuageVspDevice : nuageVspDevices) {\n                         HostVO host = findNuageVspHost(nuageVspDevice.getHostId());\n-                        SyncDomainCommand cmd = new SyncDomainCommand(domain.getUuid(), domain.getName(), domain.getPath(), true, false);\n+                        VspDomain vspDomain = _nuageVspEntityBuilder.buildVspDomain(domain);\n+                        SyncDomainCommand cmd = new SyncDomainCommand(vspDomain, true, false);\n                         _agentMgr.easySend(host.getId(), cmd);\n                     }\n                 } finally {\n@@ -700,7 +733,8 @@ public void onPublishMessage(String senderAddress, String subject, Object args)\n                 List<NuageVspDeviceVO> nuageVspDevices = _nuageVspDao.listAll();\n                 for (NuageVspDeviceVO nuageVspDevice : nuageVspDevices) {\n                     HostVO host = findNuageVspHost(nuageVspDevice.getHostId());\n-                    SyncDomainCommand cmd = new SyncDomainCommand(domain.getUuid(), domain.getName(), domain.getPath(), false, true);\n+                    VspDomain vspDomain = _nuageVspEntityBuilder.buildVspDomain(domain);\n+                    SyncDomainCommand cmd = new SyncDomainCommand(vspDomain, false, true);\n                     _agentMgr.easySend(host.getId(), cmd);\n                 }\n             }",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/network/manager/NuageVspManagerImpl.java",
                "sha": "04b1ccc9f9408fb3a473749cc970133427fa42ae",
                "status": "modified"
            },
            {
                "additions": 48,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/network/resource/NuageVspResource.java",
                "changes": 154,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/network/resource/NuageVspResource.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 106,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/network/resource/NuageVspResource.java",
                "patch": "@@ -30,8 +30,6 @@\n import com.cloud.agent.api.ReadyCommand;\n import com.cloud.agent.api.StartupCommand;\n import com.cloud.agent.api.StartupVspCommand;\n-import com.cloud.agent.api.VspResourceAnswer;\n-import com.cloud.agent.api.VspResourceCommand;\n import com.cloud.agent.api.element.ApplyAclRuleVspCommand;\n import com.cloud.agent.api.element.ApplyStaticNatVspCommand;\n import com.cloud.agent.api.element.ImplementVspCommand;\n@@ -40,14 +38,13 @@\n import com.cloud.agent.api.guru.ImplementNetworkVspCommand;\n import com.cloud.agent.api.guru.ReserveVmInterfaceVspCommand;\n import com.cloud.agent.api.guru.TrashNetworkVspCommand;\n-import com.cloud.agent.api.manager.GetClientDefaultsAnswer;\n-import com.cloud.agent.api.manager.GetClientDefaultsCommand;\n+import com.cloud.agent.api.manager.GetApiDefaultsAnswer;\n+import com.cloud.agent.api.manager.GetApiDefaultsCommand;\n import com.cloud.agent.api.manager.SupportedApiVersionCommand;\n import com.cloud.agent.api.sync.SyncDomainAnswer;\n import com.cloud.agent.api.sync.SyncDomainCommand;\n import com.cloud.agent.api.sync.SyncNuageVspCmsIdAnswer;\n import com.cloud.agent.api.sync.SyncNuageVspCmsIdCommand;\n-import com.cloud.agent.api.sync.SyncVspCommand;\n import com.cloud.host.Host;\n import com.cloud.resource.ServerResource;\n import com.cloud.util.NuageVspUtil;\n@@ -56,12 +53,11 @@\n import com.cloud.utils.exception.CloudRuntimeException;\n import com.google.common.base.Strings;\n import net.nuage.vsp.acs.NuageVspPluginClientLoader;\n-import net.nuage.vsp.acs.client.NuageVspApiClient;\n-import net.nuage.vsp.acs.client.NuageVspElementClient;\n-import net.nuage.vsp.acs.client.NuageVspGuruClient;\n-import net.nuage.vsp.acs.client.NuageVspManagerClient;\n-import net.nuage.vsp.acs.client.NuageVspSyncClient;\n-import org.apache.commons.lang3.tuple.Pair;\n+import net.nuage.vsp.acs.client.api.NuageVspApiClient;\n+import net.nuage.vsp.acs.client.api.NuageVspElementClient;\n+import net.nuage.vsp.acs.client.api.NuageVspGuruClient;\n+import net.nuage.vsp.acs.client.api.NuageVspManagerClient;\n+import net.nuage.vsp.acs.client.common.model.Pair;\n import org.apache.log4j.Logger;\n \n import javax.naming.ConfigurationException;\n@@ -91,7 +87,8 @@\n     private String _name;\n     private String _guid;\n     private String _zoneId;\n-    private String[] _cmsUserInfo;\n+    private String _cmsUserLogin;\n+    private String _cmsUserPassword;\n     private String _hostName;\n     private String _relativePath;\n     private int _numRetries;\n@@ -102,7 +99,6 @@\n     protected NuageVspApiClient _nuageVspApiClient;\n     protected NuageVspGuruClient _nuageVspGuruClient;\n     protected NuageVspElementClient _nuageVspElementClient;\n-    protected NuageVspSyncClient _nuageVspSyncClient;\n     protected NuageVspManagerClient _nuageVspManagerClient;\n     protected boolean _isNuageVspClientLoaded;\n \n@@ -190,7 +186,8 @@ public boolean configure(String name, Map<String, Object> params) throws Configu\n         _relativePath = new StringBuffer().append(\"https://\").append(_hostName).append(\":\").append(port).append(apiRelativePath).toString();\n \n         String cmsUserPass = NuageVspUtil.decodePassword(cmsUserPassBase64);\n-        _cmsUserInfo = new String[] {CMS_USER_ENTEPRISE_NAME, cmsUser, cmsUserPass};\n+        _cmsUserLogin = cmsUser;\n+        _cmsUserPassword = cmsUserPass;\n \n         _nuageVspCmsId = (String)params.get(NUAGE_VSP_CMS_ID);\n \n@@ -199,8 +196,8 @@ public boolean configure(String name, Map<String, Object> params) throws Configu\n         try {\n             login();\n         } catch (ExecutionException | ConfigurationException e) {\n-            s_logger.error(\"Failed to login to Nuage VSD on \" + name + \" as user \" + cmsUser, e);\n-            throw new CloudRuntimeException(\"Failed to login to Nuage VSD on \" + name + \" as user \" + cmsUser, e);\n+            s_logger.error(e.getMessage(), e);\n+            throw new CloudRuntimeException(e.getMessage(), e);\n         }\n \n         return true;\n@@ -211,23 +208,14 @@ protected void login() throws ConfigurationException, ExecutionException {\n         _nuageVspApiClient.login();\n     }\n \n-    protected <A extends NuageVspApiClient, B extends NuageVspElementClient, C extends NuageVspSyncClient, D extends NuageVspGuruClient> void loadNuageClient() {\n-\n-        try {\n-            NuageVspPluginClientLoader clientLoader = NuageVspPluginClientLoader.getClientLoader(_relativePath, _cmsUserInfo, _numRetries, _retryInterval, _nuageVspCmsId);\n-            _nuageVspApiClient = clientLoader.getNuageVspApiClient();\n-            _nuageVspSyncClient = clientLoader.getNuageVspSyncClient();\n-            _nuageVspGuruClient = clientLoader.getNuageVspGuruClient();\n-            _nuageVspElementClient = clientLoader.getNuageVspElementClient();\n-            _nuageVspManagerClient = clientLoader.getNuageVspManagerClient();\n-            _isNuageVspClientLoaded = true;\n-        } catch (ConfigurationException e) {\n-            _isNuageVspClientLoaded = false;\n-            String errorMessage = \"Nuage Vsp Plugin client is not yet installed. Please install NuageVsp plugin client to use NuageVsp plugin in Cloudstack. \";\n-            s_logger.error(errorMessage, e);\n-            throw new CloudRuntimeException(errorMessage, e);\n-        }\n-\n+    protected <A extends NuageVspApiClient, B extends NuageVspElementClient, C extends NuageVspGuruClient> void loadNuageClient() {\n+        NuageVspPluginClientLoader clientLoader = NuageVspPluginClientLoader.getClientLoader(_relativePath, CMS_USER_ENTEPRISE_NAME,\n+                _cmsUserLogin, _cmsUserPassword, _numRetries, _retryInterval, _nuageVspCmsId);\n+        _nuageVspApiClient = clientLoader.getNuageVspApiClient();\n+        _nuageVspGuruClient = clientLoader.getNuageVspGuruClient();\n+        _nuageVspElementClient = clientLoader.getNuageVspElementClient();\n+        _nuageVspManagerClient = clientLoader.getNuageVspManagerClient();\n+        _isNuageVspClientLoaded = true;\n     }\n \n     @Override\n@@ -265,20 +253,20 @@ public String getName() {\n \n     @Override\n     public PingCommand getCurrentStatus(long id) {\n-        if (_relativePath == null || _relativePath.isEmpty()) {\n+        if (Strings.isNullOrEmpty(_relativePath)) {\n             s_logger.error(\"Refusing to ping Nuage VSD because the resource configuration is missing the relative path information\");\n             _shouldAudit = true;\n             return null;\n         }\n-        if (_cmsUserInfo == null || _cmsUserInfo.length < 2) {\n+        if (Strings.isNullOrEmpty(_cmsUserLogin) || Strings.isNullOrEmpty(_cmsUserPassword)) {\n             s_logger.error(\"Refusing to ping Nuage VSD because the resource configuration is missing the CMS user information\");\n             _shouldAudit = true;\n             return null;\n         }\n         try {\n             login();\n         } catch (ExecutionException | ConfigurationException e) {\n-            s_logger.error(\"Failed to ping to Nuage VSD on \" + _name + \" as user \" + _cmsUserInfo[1], e);\n+            s_logger.error(\"Failed to ping to Nuage VSD on \" + _name + \" as user \" + _cmsUserLogin, e);\n             _shouldAudit = true;\n             return null;\n         }\n@@ -293,8 +281,6 @@ public Answer executeRequest(Command cmd) {\n             return executeRequest((ReadyCommand)cmd);\n         } else if (cmd instanceof MaintainCommand) {\n             return executeRequest((MaintainCommand)cmd);\n-        } else if (cmd instanceof VspResourceCommand) {\n-            return executeRequest((VspResourceCommand)cmd);\n         }\n         //Guru commands\n         else if (cmd instanceof ImplementNetworkVspCommand) {\n@@ -317,16 +303,14 @@ else if (cmd instanceof ImplementVspCommand) {\n             return executeRequest((ShutDownVpcVspCommand)cmd);\n         }\n         //Sync Commands\n-        else if (cmd instanceof SyncVspCommand) {\n-            return executeRequest((SyncVspCommand)cmd);\n-        } else if (cmd instanceof SyncNuageVspCmsIdCommand) {\n+        else if (cmd instanceof SyncNuageVspCmsIdCommand) {\n             return executeRequest((SyncNuageVspCmsIdCommand)cmd);\n         } else if (cmd instanceof SyncDomainCommand) {\n             return executeRequest((SyncDomainCommand)cmd);\n         }\n         //Other commands\n-        else if (cmd instanceof GetClientDefaultsCommand) {\n-            return executeRequest((GetClientDefaultsCommand)cmd);\n+        else if (cmd instanceof GetApiDefaultsCommand) {\n+            return executeRequest((GetApiDefaultsCommand)cmd);\n         } else if (cmd instanceof SupportedApiVersionCommand) {\n             return executeRequest((SupportedApiVersionCommand)cmd);\n         }\n@@ -357,29 +341,11 @@ private Answer executeRequest(MaintainCommand cmd) {\n         return new MaintainAnswer(cmd);\n     }\n \n-    private Answer executeRequest(VspResourceCommand cmd) {\n-        try {\n-            isNuageVspApiLoaded();\n-            if (cmd.getRequestType().equalsIgnoreCase(\"GETALL\") || cmd.getRequestType().equalsIgnoreCase(\"GET\") || cmd.getRequestType().equalsIgnoreCase(\"GETRELATED\")) {\n-                String resourceInfo = _nuageVspApiClient.executeRestApi(cmd.getRequestType(), cmd.getResource(), cmd.getResourceId(), cmd.getChildResource(),\n-                        cmd.getEntityDetails(), cmd.getResourceFilter(), cmd.getProxyUserUuid(), cmd.getProxyUserDomainuuid());\n-                return new VspResourceAnswer(cmd, resourceInfo, \"Executed Issue Resource command\");\n-            }\n-            return new VspResourceAnswer(cmd, false, cmd.getRequestType() + \" is not yet supported\");\n-        } catch (ExecutionException | ConfigurationException e) {\n-            s_logger.error(\"Failure during \" + cmd + \" on Nuage VSD \" + _hostName, e);\n-            return new VspResourceAnswer(cmd, e);\n-        }\n-    }\n-\n     private Answer executeRequest(ImplementNetworkVspCommand cmd) {\n         try {\n             isNuageVspGuruLoaded();\n-            _nuageVspGuruClient.implement(cmd.getNetworkDomainName(), cmd.getNetworkDomainPath(), cmd.getNetworkDomainUuid(), cmd.getNetworkAccountName(),\n-                    cmd.getNetworkAccountUuid(), cmd.getNetworkName(), cmd.getNetworkCidr(), cmd.getNetworkGateway(), cmd.getNetworkAclId(), cmd.getDnsServers(),\n-                    cmd.getGatewaySystemIds(), cmd.isL3Network(), cmd.isVpc(), cmd.isSharedNetwork(), cmd.getNetworkUuid(), cmd.getVpcName(), cmd.getVpcUuid(),\n-                    cmd.isDefaultEgressPolicy(), cmd.getIpAddressRange(), cmd.getDomainTemplateName());\n-            return new Answer(cmd, true, \"Created network mapping to \" + cmd.getNetworkName() + \" on Nuage VSD \" + _hostName);\n+            _nuageVspGuruClient.implement(cmd.getNetwork(), cmd.getDnsServers());\n+            return new Answer(cmd, true, \"Created network mapping to \" + cmd.getNetwork().getName() + \" on Nuage VSD \" + _hostName);\n         } catch (ExecutionException | ConfigurationException e) {\n             s_logger.error(\"Failure during \" + cmd + \" on Nuage VSD \" + _hostName, e);\n             return new Answer(cmd, e);\n@@ -389,11 +355,8 @@ private Answer executeRequest(ImplementNetworkVspCommand cmd) {\n     private Answer executeRequest(ReserveVmInterfaceVspCommand cmd) {\n         try {\n             isNuageVspGuruLoaded();\n-            _nuageVspGuruClient.reserve(cmd.getNicUuid(), cmd.getNicMacAddress(), cmd.getNetworkUuid(), cmd.isL3Network(),\n-                    cmd.isSharedNetwork(), cmd.getVpcUuid(), cmd.getNetworkDomainUuid(), cmd.getNetworksAccountUuid(), cmd.isDomainRouter(), cmd.getDomainRouterIp(),\n-                    cmd.getVmInstanceName(), cmd.getVmUuid(), cmd.useStaticIp(), cmd.getStaticIp(), cmd.getStaticNatIpUuid(), cmd.getStaticNatIpAddress(), cmd.isStaticNatIpAllocated(),\n-                    cmd.isOneToOneNat(), cmd.getStaticNatVlanUuid(), cmd.getStaticNatVlanGateway(), cmd.getStaticNatVlanNetmask());\n-            return new Answer(cmd, true, \"Created NIC that maps to nicUuid\" + cmd.getNicUuid() + \" on Nuage VSD \" + _hostName);\n+            _nuageVspGuruClient.reserve(cmd.getNetwork(), cmd.getVm(), cmd.getNic(), cmd.getStaticNat());\n+            return new Answer(cmd, true, \"Created NIC that maps to nicUuid\" + cmd.getNic().getUuid() + \" on Nuage VSD \" + _hostName);\n         } catch (ExecutionException | ConfigurationException e) {\n             s_logger.error(\"Failure during \" + cmd + \" on Nuage VSD \" + _hostName, e);\n             return new Answer(cmd, e);\n@@ -403,9 +366,9 @@ private Answer executeRequest(ReserveVmInterfaceVspCommand cmd) {\n     private Answer executeRequest(DeallocateVmVspCommand cmd) {\n         try {\n             isNuageVspGuruLoaded();\n-            _nuageVspGuruClient.deallocate(cmd.getNetworkUuid(), cmd.getNicFromDdUuid(), cmd.getNicMacAddress(), cmd.getNicIp4Address(), cmd.isL3Network(), cmd.isSharedNetwork(),\n-                    cmd.getVpcUuid(), cmd.getNetworksDomainUuid(), cmd.getVmInstanceName(), cmd.getVmUuid(), cmd.isExpungingState());\n-            return new Answer(cmd, true, \"Deallocated VM \" + cmd.getVmInstanceName() + \" on Nuage VSD \" + _hostName);\n+\n+            _nuageVspGuruClient.deallocate(cmd.getNetwork(), cmd.getVm(), cmd.getNic());\n+            return new Answer(cmd, true, \"Deallocated VM \" + cmd.getVm().getName() + \" on Nuage VSD \" + _hostName);\n         } catch (ExecutionException | ConfigurationException e) {\n             s_logger.error(\"Failure during \" + cmd + \" on Nuage VSD \" + _hostName, e);\n             return new Answer(cmd, e);\n@@ -415,8 +378,8 @@ private Answer executeRequest(DeallocateVmVspCommand cmd) {\n     private Answer executeRequest(TrashNetworkVspCommand cmd) {\n         try {\n             isNuageVspGuruLoaded();\n-            _nuageVspGuruClient.trash(cmd.getDomainUuid(), cmd.getNetworkUuid(), cmd.isL3Network(), cmd.isSharedNetwork(), cmd.getVpcUuid(), cmd.getDomainTemplateName());\n-            return new Answer(cmd, true, \"Deleted network mapping to \" + cmd.getNetworkUuid() + \" on Nuage VSD \" + _hostName);\n+            _nuageVspGuruClient.trash(cmd.getNetwork());\n+            return new Answer(cmd, true, \"Deleted network mapping to \" + cmd.getNetwork().getUuid() + \" on Nuage VSD \" + _hostName);\n         } catch (ExecutionException | ConfigurationException e) {\n             s_logger.error(\"Failure during \" + cmd + \" on Nuage VSD \" + _hostName, e);\n             return new Answer(cmd, e);\n@@ -426,9 +389,8 @@ private Answer executeRequest(TrashNetworkVspCommand cmd) {\n     private Answer executeRequest(ApplyStaticNatVspCommand cmd) {\n         try {\n             isNuageVspElementLoaded();\n-            _nuageVspElementClient.applyStaticNats(cmd.getNetworkDomainUuid(), cmd.getNetworkUuid(), cmd.getVpcOrSubnetUuid(), cmd.isL3Network(),\n-                    cmd.isVpc(), cmd.getStaticNatDetails());\n-            return new Answer(cmd, true, \"Applied Static NAT to network mapping \" + cmd.getVpcOrSubnetUuid() + \" on Nuage VSD \" + _hostName);\n+            _nuageVspElementClient.applyStaticNats(cmd.getNetwork(), cmd.getStaticNatDetails());\n+            return new Answer(cmd, true, \"Applied Static NAT to network mapping \" + cmd.getNetwork().getUuid() + \" on Nuage VSD \" + _hostName);\n         } catch (ExecutionException | ConfigurationException e) {\n             s_logger.error(\"Failure during \" + cmd + \" on Nuage VSD \" + _hostName, e);\n             return new Answer(cmd, e);\n@@ -438,10 +400,9 @@ private Answer executeRequest(ApplyStaticNatVspCommand cmd) {\n     private Answer executeRequest(ImplementVspCommand cmd) {\n         try {\n             isNuageVspElementLoaded();\n-            boolean success = _nuageVspElementClient.implement(cmd.getNetworkId(), cmd.getNetworkDomainUuid(), cmd.getNetworkUuid(), cmd.getNetworkName(), cmd.getVpcOrSubnetUuid(), cmd.isL2Network(),\n-                    cmd.isL3Network(), cmd.isVpc(), cmd.isShared(), cmd.getDomainTemplateName(), cmd.isFirewallServiceSupported(), cmd.getDnsServers(), cmd.getIngressFirewallRules(),\n-                    cmd.getEgressFirewallRules(), cmd.getAcsFipUuid(), cmd.isEgressDefaultPolicy());\n-            return new Answer(cmd, success, \"Implemented network \" + cmd.getNetworkUuid() + \" on Nuage VSD \" + _hostName);\n+            boolean success = _nuageVspElementClient.implement(cmd.getNetwork(), cmd.getDnsServers(), cmd.getIngressFirewallRules(),\n+                    cmd.getEgressFirewallRules(), cmd.getFloatingIpUuids());\n+            return new Answer(cmd, success, \"Implemented network \" + cmd.getNetwork().getUuid() + \" on Nuage VSD \" + _hostName);\n         } catch (ExecutionException | ConfigurationException e) {\n             s_logger.error(\"Failure during \" + cmd + \" on Nuage VSD \" + _hostName, e);\n             return new Answer(cmd, e);\n@@ -451,9 +412,8 @@ private Answer executeRequest(ImplementVspCommand cmd) {\n     private Answer executeRequest(ApplyAclRuleVspCommand cmd) {\n         try {\n             isNuageVspElementLoaded();\n-            _nuageVspElementClient.applyAclRules(cmd.isNetworkAcl(), cmd.getNetworkUuid(), cmd.getNetworkDomainUuid(), cmd.getVpcOrSubnetUuid(), cmd.getNetworkName(),\n-                    cmd.isL2Network(), cmd.getAclRules(), cmd.getNetworkId(), cmd.isEgressDefaultPolicy(), cmd.getAcsIngressAcl(), cmd.isNetworkReset(), cmd.getDomainTemplateName());\n-            return new Answer(cmd, true, \"Applied ACL Rule to network mapping \" + cmd.getVpcOrSubnetUuid() + \" on Nuage VSD \" + _hostName);\n+            _nuageVspElementClient.applyAclRules(cmd.getAclType(), cmd.getNetwork(), cmd.getAclRules(), cmd.isNetworkReset());\n+            return new Answer(cmd, true, \"Applied ACL Rule to network mapping \" + cmd.getNetwork().getUuid() + \" on Nuage VSD \" + _hostName);\n         } catch (ExecutionException | ConfigurationException e) {\n             s_logger.error(\"Failure during \" + cmd + \" on Nuage VSD \" + _hostName, e);\n             return new Answer(cmd, e);\n@@ -463,25 +423,14 @@ private Answer executeRequest(ApplyAclRuleVspCommand cmd) {\n     private Answer executeRequest(ShutDownVpcVspCommand cmd) {\n         try {\n             isNuageVspElementLoaded();\n-            _nuageVspElementClient.shutdownVpc(cmd.getDomainUuid(), cmd.getVpcUuid(), cmd.getDomainTemplateName());\n+            _nuageVspElementClient.shutdownVpc(cmd.getDomainUuid(), cmd.getVpcUuid(), cmd.getDomainTemplateName(), cmd.getDomainRouterUuids());\n             return new Answer(cmd, true, \"Shutdown VPC \" + cmd.getVpcUuid() + \" on Nuage VSD \" + _hostName);\n         } catch (ExecutionException | ConfigurationException e) {\n             s_logger.error(\"Failure during \" + cmd + \" on Nuage VSD \" + _hostName, e);\n             return new Answer(cmd, e);\n         }\n     }\n \n-    private Answer executeRequest(SyncVspCommand cmd) {\n-        try {\n-            isNuageVspSyncLoaded();\n-            _nuageVspSyncClient.syncWithNuageVsp(cmd.getNuageVspEntity());\n-            return new Answer(cmd, true, \"Synced \" + cmd.getNuageVspEntity() + \" on Nuage VSD \" + _hostName);\n-        } catch (ExecutionException | ConfigurationException e) {\n-            s_logger.error(\"Failure during \" + cmd + \" on Nuage VSD \" + _hostName, e);\n-            return new Answer(cmd, e);\n-        }\n-    }\n-\n     private Answer executeRequest(SyncNuageVspCmsIdCommand cmd) {\n         try {\n             isNuageVspManagerLoaded();\n@@ -504,22 +453,21 @@ private Answer executeRequest(SyncNuageVspCmsIdCommand cmd) {\n     private Answer executeRequest(SyncDomainCommand cmd) {\n         try {\n             isNuageVspManagerLoaded();\n-            boolean success = _nuageVspManagerClient.syncDomainWithNuageVsp(cmd.getDomainUuid(), cmd.getDomainName(), cmd.getDomainPath(), cmd.isToAdd(), cmd.isToRemove());\n+            boolean success = _nuageVspManagerClient.syncDomainWithNuageVsp(cmd.getDomain(), cmd.isToAdd(), cmd.isToRemove());\n             return new SyncDomainAnswer(success);\n         } catch (ExecutionException | ConfigurationException e) {\n             s_logger.error(\"Failure during \" + cmd + \" on Nuage VSD \" + _hostName, e);\n             return new SyncDomainAnswer(false);\n         }\n     }\n \n-    private Answer executeRequest(GetClientDefaultsCommand cmd) {\n+    private Answer executeRequest(GetApiDefaultsCommand cmd) {\n         try {\n             isNuageVspManagerLoaded();\n-            Map<String, Object> clientDefaults = _nuageVspManagerClient.getClientDefaults();\n-            return new GetClientDefaultsAnswer(cmd, clientDefaults);\n+            return new GetApiDefaultsAnswer(cmd, _nuageVspManagerClient.getApiDefaults());\n         } catch (ExecutionException | ConfigurationException e) {\n             s_logger.error(\"Failure during \" + cmd + \" on Nuage VSD \" + _hostName, e);\n-            return new GetClientDefaultsAnswer(cmd, e);\n+            return new GetApiDefaultsAnswer(cmd, e);\n         }\n     }\n \n@@ -552,12 +500,6 @@ protected void isNuageVspElementLoaded() throws ConfigurationException {\n         }\n     }\n \n-    protected void isNuageVspSyncLoaded() throws ConfigurationException {\n-        if (!_isNuageVspClientLoaded || _nuageVspSyncClient == null) {\n-            throw new ConfigurationException(NUAGE_VSP_PLUGIN_ERROR_MESSAGE);\n-        }\n-    }\n-\n     protected void isNuageVspManagerLoaded() throws ConfigurationException {\n         if (!_isNuageVspClientLoaded || _nuageVspManagerClient == null) {\n             throw new ConfigurationException(NUAGE_VSP_PLUGIN_ERROR_MESSAGE);",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/network/resource/NuageVspResource.java",
                "sha": "bdcb481a013b67041407c593eb2ec66ec10e1d8c",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/2d825dd07f9b1acf19f6d98f5a247e069724c443/plugins/network-elements/nuage-vsp/src/com/cloud/network/sync/NuageVspSync.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/network/sync/NuageVspSync.java?ref=2d825dd07f9b1acf19f6d98f5a247e069724c443",
                "deletions": 26,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/network/sync/NuageVspSync.java",
                "patch": "@@ -1,26 +0,0 @@\n-//\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-//\n-\n-package com.cloud.network.sync;\n-\n-\n-public interface NuageVspSync {\n-\n-    public void syncWithNuageVsp(String nuageVspEntity);\n-}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2d825dd07f9b1acf19f6d98f5a247e069724c443/plugins/network-elements/nuage-vsp/src/com/cloud/network/sync/NuageVspSync.java",
                "sha": "4e1cc431e7e79b3a5fdc4b7d764a58882b0eeddc",
                "status": "removed"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/2d825dd07f9b1acf19f6d98f5a247e069724c443/plugins/network-elements/nuage-vsp/src/com/cloud/network/sync/NuageVspSyncImpl.java",
                "changes": 65,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/network/sync/NuageVspSyncImpl.java?ref=2d825dd07f9b1acf19f6d98f5a247e069724c443",
                "deletions": 65,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/network/sync/NuageVspSyncImpl.java",
                "patch": "@@ -1,65 +0,0 @@\n-//\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-//\n-\n-package com.cloud.network.sync;\n-\n-import com.cloud.agent.AgentManager;\n-import com.cloud.agent.api.Answer;\n-import com.cloud.agent.api.sync.SyncVspCommand;\n-import com.cloud.host.HostVO;\n-import com.cloud.host.dao.HostDao;\n-import com.cloud.network.NuageVspDeviceVO;\n-import com.cloud.network.dao.NuageVspDao;\n-import org.apache.log4j.Logger;\n-import org.springframework.stereotype.Component;\n-\n-import javax.inject.Inject;\n-import java.util.List;\n-\n-@Component\n-public class NuageVspSyncImpl implements NuageVspSync {\n-\n-    private static final Logger s_logger = Logger.getLogger(NuageVspSyncImpl.class);\n-\n-    @Inject\n-    NuageVspDao _nuageVspDao;\n-    @Inject\n-    HostDao _hostDao;\n-    @Inject\n-    AgentManager _agentMgr;\n-\n-    public void syncWithNuageVsp(String nuageVspEntity) {\n-        //Get the NuageVspDevice and get the host information.\n-        //This information is used to query VSP and synch the corresponding\n-        //entities\n-        List<NuageVspDeviceVO> nuageVspDevices = _nuageVspDao.listAll();\n-        for (NuageVspDeviceVO nuageVspDevice : nuageVspDevices) {\n-            HostVO nuageVspHost = _hostDao.findById(nuageVspDevice.getHostId());\n-            _hostDao.loadDetails(nuageVspHost);\n-            SyncVspCommand cmd = new SyncVspCommand(nuageVspEntity);\n-            Answer answer = _agentMgr.easySend(nuageVspHost.getId(), cmd);\n-            if (answer == null || !answer.getResult()) {\n-                s_logger.error(\"SyncNuageVspCommand for Nuage VSP Host \" + nuageVspHost.getUuid() + \" failed\");\n-                if ((null != answer) && (null != answer.getDetails())) {\n-                    s_logger.error(answer.getDetails());\n-                }\n-            }\n-        }\n-    }\n-}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2d825dd07f9b1acf19f6d98f5a247e069724c443/plugins/network-elements/nuage-vsp/src/com/cloud/network/sync/NuageVspSyncImpl.java",
                "sha": "9180c179092db27fcb7c2363bebccb611b8412c7",
                "status": "removed"
            },
            {
                "additions": 370,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/util/NuageVspEntityBuilder.java",
                "changes": 370,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/util/NuageVspEntityBuilder.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 0,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/util/NuageVspEntityBuilder.java",
                "patch": "@@ -0,0 +1,370 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+\n+package com.cloud.util;\n+\n+import com.cloud.dc.VlanVO;\n+import com.cloud.dc.dao.VlanDao;\n+import com.cloud.domain.Domain;\n+import com.cloud.domain.DomainVO;\n+import com.cloud.domain.dao.DomainDao;\n+import com.cloud.exception.InsufficientVirtualNetworkCapacityException;\n+import com.cloud.network.Network;\n+import com.cloud.network.NetworkModel;\n+import com.cloud.network.dao.IPAddressDao;\n+import com.cloud.network.dao.IPAddressVO;\n+import com.cloud.network.dao.NetworkDetailsDao;\n+import com.cloud.network.rules.FirewallRule;\n+import com.cloud.network.vpc.NetworkACLItem;\n+import com.cloud.network.vpc.VpcVO;\n+import com.cloud.network.vpc.dao.VpcDao;\n+import com.cloud.offerings.NetworkOfferingVO;\n+import com.cloud.offerings.dao.NetworkOfferingDao;\n+import com.cloud.offerings.dao.NetworkOfferingServiceMapDao;\n+import com.cloud.user.AccountVO;\n+import com.cloud.user.dao.AccountDao;\n+import com.cloud.utils.exception.CloudRuntimeException;\n+import com.cloud.utils.net.NetUtils;\n+import com.cloud.vm.NicProfile;\n+import com.cloud.vm.NicVO;\n+import com.cloud.vm.VirtualMachine;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Lists;\n+import net.nuage.vsp.acs.client.api.model.VspAclRule;\n+import net.nuage.vsp.acs.client.api.model.VspDomain;\n+import net.nuage.vsp.acs.client.api.model.VspNetwork;\n+import net.nuage.vsp.acs.client.api.model.VspNic;\n+import net.nuage.vsp.acs.client.api.model.VspStaticNat;\n+import net.nuage.vsp.acs.client.api.model.VspVm;\n+import net.nuage.vsp.acs.client.common.model.Pair;\n+import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.log4j.Logger;\n+\n+import javax.inject.Inject;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+public class NuageVspEntityBuilder {\n+    private static final Logger s_logger = Logger.getLogger(NuageVspEntityBuilder.class);\n+\n+    @Inject\n+    VpcDao _vpcDao;\n+    @Inject\n+    DomainDao _domainDao;\n+    @Inject\n+    AccountDao _accountDao;\n+    @Inject\n+    NetworkOfferingDao _networkOfferingDao;\n+    @Inject\n+    NetworkOfferingServiceMapDao _networkOfferingServiceMapDao;\n+    @Inject\n+    NetworkModel _networkModel;\n+    @Inject\n+    VlanDao _vlanDao;\n+    @Inject\n+    ConfigurationDao _configurationDao;\n+    @Inject\n+    IPAddressDao _ipAddressDao;\n+    @Inject\n+    NetworkDetailsDao _networkDetailsDao;\n+\n+    public VspDomain buildVspDomain(Domain domain) {\n+        return new VspDomain.Builder()\n+                .uuid(domain.getUuid())\n+                .name(domain.getName())\n+                .path(domain.getPath())\n+                .build();\n+    }\n+\n+    public VspNetwork buildVspNetwork(Network network, boolean fillAddressRange) {\n+        VspNetwork.Builder vspNetworkBuilder = new VspNetwork.Builder()\n+                .id(network.getId())\n+                .uuid(network.getUuid())\n+                .name(network.getName())\n+                .cidr(network.getCidr())\n+                .gateway(network.getGateway());\n+\n+        DomainVO domain = _domainDao.findById(network.getDomainId());\n+        VspDomain vspDomain = buildVspDomain(domain);\n+        vspNetworkBuilder.domain(vspDomain);\n+\n+        AccountVO account = _accountDao.findById(network.getAccountId());\n+        if (account != null) {\n+            vspNetworkBuilder.accountUuid(account.getUuid()).accountName(account.getAccountName());\n+        }\n+\n+        NetworkOfferingVO networkOffering = _networkOfferingDao.findById(network.getNetworkOfferingId());\n+        vspNetworkBuilder.egressDefaultPolicy(networkOffering.getEgressDefaultPolicy());\n+\n+        if (network.getVpcId() != null) {\n+            VpcVO vpc = _vpcDao.findById(network.getVpcId());\n+            vspNetworkBuilder.vpcUuid(vpc.getUuid())\n+                    .vpcName(vpc.getName())\n+                    .networkType(VspNetwork.NetworkType.Vpc);\n+        } else {\n+            if (networkOffering.getGuestType() == Network.GuestType.Shared) {\n+                vspNetworkBuilder.networkType(VspNetwork.NetworkType.Shared);\n+            } else if (_networkOfferingServiceMapDao.areServicesSupportedByNetworkOffering(network.getNetworkOfferingId(), Network.Service.SourceNat)\n+                    || _networkOfferingServiceMapDao.areServicesSupportedByNetworkOffering(network.getNetworkOfferingId(), Network.Service.StaticNat)) {\n+                vspNetworkBuilder.networkType(VspNetwork.NetworkType.L3);\n+            } else {\n+                vspNetworkBuilder.networkType(VspNetwork.NetworkType.L2);\n+            }\n+        }\n+\n+        boolean firewallServiceSupported = _networkModel.areServicesSupportedByNetworkOffering(network.getNetworkOfferingId(), Network.Service.Firewall);\n+        vspNetworkBuilder.firewallServiceSupported(firewallServiceSupported);\n+\n+        String preConfiguredDomainTemplateName = NuageVspUtil.getPreConfiguredDomainTemplateName(_configurationDao, _networkDetailsDao, network, networkOffering);\n+        vspNetworkBuilder.domainTemplateName(preConfiguredDomainTemplateName);\n+\n+        if (fillAddressRange) {\n+            try {\n+                List<Pair<String, String>> ipAddressRanges = getIpAddressRanges(networkOffering, network);\n+                vspNetworkBuilder.ipAddressRanges(ipAddressRanges);\n+\n+                String virtualRouterIp = getVirtualRouterIP(network, ipAddressRanges);\n+                vspNetworkBuilder.virtualRouterIp(virtualRouterIp);\n+            } catch (InsufficientVirtualNetworkCapacityException ex) {\n+                s_logger.error(\"There is an insufficient network capacity in network \" + network.getId(), ex);\n+                throw new CloudRuntimeException(\"There is an insufficient network capacity in network \" + network.getId(), ex);\n+            }\n+        }\n+\n+        return vspNetworkBuilder.build();\n+    }\n+\n+    private List<Pair<String, String>> getIpAddressRanges(NetworkOfferingVO networkOffering, Network network) {\n+        List<Pair<String, String>> ipAddressRanges = Lists.newArrayList();\n+        if (networkOffering.getGuestType() == Network.GuestType.Shared) {\n+            List<VlanVO> vlans = _vlanDao.listVlansByNetworkId(network.getId());\n+            ipAddressRanges = Lists.newArrayList();\n+            for (VlanVO vlan : vlans) {\n+                boolean isIpv4 = StringUtils.isNotBlank(vlan.getIpRange());\n+                String[] range = isIpv4 ? vlan.getIpRange().split(\"-\") : vlan.getIp6Range().split(\"-\");\n+                if (range.length == 2) {\n+                    ipAddressRanges.add(Pair.of(range[0], range[1]));\n+                }\n+            }\n+            return ipAddressRanges;\n+        }\n+\n+        String subnet = NetUtils.getCidrSubNet(network.getCidr());\n+        String netmask = NetUtils.getCidrNetmask(network.getCidr());\n+        long cidrSize = NetUtils.getCidrSize(netmask);\n+        Set<Long> allIPsInCidr = NetUtils.getAllIpsFromCidr(subnet, cidrSize, new HashSet<Long>());\n+        if (allIPsInCidr == null || !(allIPsInCidr instanceof TreeSet)) {\n+            throw new IllegalStateException(\"The IPs in CIDR for subnet \" + subnet + \" where null or returned in a non-ordered set.\");\n+        }\n+\n+        Iterator<Long> ipIterator = allIPsInCidr.iterator();\n+        long ip =  ipIterator.next();\n+        if (NetUtils.ip2Long(network.getGateway()) == ip) {\n+            ip = ipIterator.next();\n+        }\n+        ipAddressRanges.add(Pair.of(NetUtils.long2Ip(ip), NetUtils.getIpRangeEndIpFromCidr(subnet, cidrSize)));\n+        return ipAddressRanges;\n+    }\n+\n+    private String getVirtualRouterIP(Network network, List<Pair<String, String>> ipAddressRanges) throws InsufficientVirtualNetworkCapacityException {\n+        Pair<String, String> lowestIpAddressRange = null;\n+        if (ipAddressRanges.size() == 1) {\n+            lowestIpAddressRange = Iterables.getOnlyElement(ipAddressRanges);\n+        } else {\n+            for (Pair<String, String> ipAddressRange : ipAddressRanges) {\n+                if (lowestIpAddressRange == null || NetUtils.ip2Long(ipAddressRange.getLeft()) < NetUtils.ip2Long(lowestIpAddressRange.getLeft())) {\n+                    lowestIpAddressRange = ipAddressRange;\n+                }\n+            }\n+        }\n+\n+        if (lowestIpAddressRange == null) {\n+            throw new InsufficientVirtualNetworkCapacityException(\"VSP allocates an IP for VirtualRouter.\" + \" But no ip address ranges are specified\", Network.class,\n+                    network.getId());\n+        } else if (NetUtils.ip2Long(lowestIpAddressRange.getRight()) - NetUtils.ip2Long(lowestIpAddressRange.getLeft()) < 2) {\n+            throw new InsufficientVirtualNetworkCapacityException(\"VSP allocates an IP for VirtualRouter.\" + \" So, subnet should have atleast minimum 3 hosts\", Network.class,\n+                    network.getId());\n+        }\n+\n+        String virtualRouterIp = lowestIpAddressRange.getLeft();\n+        long lowestIp = NetUtils.ip2Long(lowestIpAddressRange.getLeft());\n+        lowestIp = lowestIp + 1;\n+        lowestIpAddressRange.setLeft(NetUtils.long2Ip(lowestIp));\n+        return virtualRouterIp;\n+    }\n+\n+    public VspVm buildVspVm(VirtualMachine vm, Network network) {\n+        VspVm.Builder vspVmBuilder = new VspVm.Builder()\n+                .uuid(vm.getUuid())\n+                .name(vm.getInstanceName());\n+\n+        switch (vm.getState()) {\n+            case Starting:\n+                vspVmBuilder.state(VspVm.State.Starting); break;\n+            case Running:\n+                vspVmBuilder.state(VspVm.State.Running); break;\n+            case Stopping:\n+                vspVmBuilder.state(VspVm.State.Stopping); break;\n+            case Stopped:\n+                vspVmBuilder.state(VspVm.State.Stopped); break;\n+            case Destroyed:\n+                vspVmBuilder.state(VspVm.State.Destroyed); break;\n+            case Expunging:\n+                vspVmBuilder.state(VspVm.State.Expunging); break;\n+            case Migrating:\n+                vspVmBuilder.state(VspVm.State.Migrating); break;\n+            case Error:\n+                vspVmBuilder.state(VspVm.State.Error); break;\n+            case Shutdowned:\n+                vspVmBuilder.state(VspVm.State.Shutdowned); break;\n+            default:\n+                vspVmBuilder.state(VspVm.State.Unknown);\n+        }\n+\n+        boolean isDomainRouter = vm.getType().equals(VirtualMachine.Type.DomainRouter);\n+        vspVmBuilder.domainRouter(isDomainRouter);\n+\n+        if (network.getBroadcastUri() != null) {\n+            String domainRouterIp = network.getBroadcastUri().getPath().substring(1);\n+            vspVmBuilder.domainRouterIp(domainRouterIp);\n+        }\n+\n+        return vspVmBuilder.build();\n+    }\n+\n+    public VspNic buildVspNic(String nicUuid, NicProfile nicProfile) {\n+        VspNic.Builder vspNicBuilder = new VspNic.Builder()\n+                .uuid(nicUuid)\n+                .macAddress(nicProfile.getMacAddress())\n+                .useStaticIp(true)\n+                .ip(nicProfile.getIPv4Address());\n+        return vspNicBuilder.build();\n+    }\n+\n+    public VspNic buildVspNic(NicVO nic) {\n+        VspNic.Builder vspNicBuilder = new VspNic.Builder()\n+                .uuid(nic.getUuid())\n+                .macAddress(nic.getMacAddress())\n+                .useStaticIp(true)\n+                .ip(nic.getIPv4Address());\n+        return vspNicBuilder.build();\n+    }\n+\n+    public VspStaticNat buildVspStaticNat(Boolean forRevoke, IPAddressVO staticNatIp, VlanVO staticNatVlan, NicVO nic) {\n+        VspStaticNat.Builder vspStaticNatBuilder = new VspStaticNat.Builder()\n+                .ipUuid(staticNatIp.getUuid())\n+                .ipAddress(staticNatIp.getAddress().addr())\n+                .revoke(forRevoke)\n+                .oneToOneNat(staticNatIp.isOneToOneNat())\n+                .vlanUuid(staticNatVlan.getUuid())\n+                .vlanGateway(staticNatVlan.getVlanGateway())\n+                .vlanNetmask(staticNatVlan.getVlanNetmask());\n+\n+        if (nic != null) {\n+            VspNic vspNic = buildVspNic(nic);\n+            vspStaticNatBuilder.nic(vspNic);\n+        }\n+\n+        return vspStaticNatBuilder.build();\n+    }\n+\n+    public VspAclRule buildVspAclRule(FirewallRule firewallRule, Network network) {\n+        VspAclRule.Builder vspAclRuleBuilder = new VspAclRule.Builder()\n+                .uuid(firewallRule.getUuid())\n+                .protocol(firewallRule.getProtocol())\n+                .startPort(firewallRule.getSourcePortStart())\n+                .endPort(firewallRule.getSourcePortEnd())\n+                .sourceCidrList(firewallRule.getSourceCidrList())\n+                .priority(-1)\n+                .type(VspAclRule.ACLType.Firewall);\n+\n+        switch (firewallRule.getState()) {\n+            case Active:\n+                vspAclRuleBuilder.state(VspAclRule.ACLState.Active); break;\n+            case Add:\n+                vspAclRuleBuilder.state(VspAclRule.ACLState.Add); break;\n+            case Revoke:\n+                vspAclRuleBuilder.state(VspAclRule.ACLState.Revoke);\n+        }\n+\n+        switch (firewallRule.getTrafficType()) {\n+            case Ingress:\n+                vspAclRuleBuilder.trafficType(VspAclRule.ACLTrafficType.Ingress); break;\n+            case Egress:\n+                vspAclRuleBuilder.trafficType(VspAclRule.ACLTrafficType.Egress);\n+        }\n+\n+        NetworkOfferingVO networkOffering = _networkOfferingDao.findById(network.getNetworkOfferingId());\n+        if (firewallRule.getTrafficType() == FirewallRule.TrafficType.Egress && networkOffering.getEgressDefaultPolicy()) {\n+            vspAclRuleBuilder.action(VspAclRule.ACLAction.Deny);\n+        } else {\n+            vspAclRuleBuilder.action(VspAclRule.ACLAction.Allow);\n+        }\n+\n+        if (firewallRule.getSourceIpAddressId() != null) {\n+            IPAddressVO ipAddress = _ipAddressDao.findById(firewallRule.getSourceIpAddressId());\n+            if (ipAddress != null) {\n+                vspAclRuleBuilder.sourceIpAddress(ipAddress.getVmIp() + \"/32\");\n+            }\n+        }\n+\n+        return vspAclRuleBuilder.build();\n+    }\n+\n+    public VspAclRule buildVspAclRule(NetworkACLItem networkAcl) {\n+        VspAclRule.Builder vspAclRuleBuilder = new VspAclRule.Builder()\n+                .uuid(networkAcl.getUuid())\n+                .protocol(networkAcl.getProtocol())\n+                .startPort(networkAcl.getSourcePortStart())\n+                .endPort(networkAcl.getSourcePortEnd())\n+                .sourceIpAddress(null)\n+                .sourceCidrList(networkAcl.getSourceCidrList())\n+                .priority(networkAcl.getNumber())\n+                .type(VspAclRule.ACLType.NetworkACL);\n+\n+        switch (networkAcl.getState()) {\n+            case Active:\n+                vspAclRuleBuilder.state(VspAclRule.ACLState.Active); break;\n+            case Add:\n+                vspAclRuleBuilder.state(VspAclRule.ACLState.Add); break;\n+            case Revoke:\n+                vspAclRuleBuilder.state(VspAclRule.ACLState.Revoke);\n+        }\n+\n+        switch (networkAcl.getTrafficType()) {\n+            case Ingress:\n+                vspAclRuleBuilder.trafficType(VspAclRule.ACLTrafficType.Ingress); break;\n+            case Egress:\n+                vspAclRuleBuilder.trafficType(VspAclRule.ACLTrafficType.Egress);\n+        }\n+\n+        switch (networkAcl.getAction()) {\n+            case Allow:\n+                vspAclRuleBuilder.action(VspAclRule.ACLAction.Allow); break;\n+            case Deny:\n+                vspAclRuleBuilder.action(VspAclRule.ACLAction.Deny);\n+        }\n+\n+        return vspAclRuleBuilder.build();\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/util/NuageVspEntityBuilder.java",
                "sha": "8757ad021200a25c68293bb7598e551e3080c158",
                "status": "added"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/util/NuageVspUtil.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/util/NuageVspUtil.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 1,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/util/NuageVspUtil.java",
                "patch": "@@ -20,6 +20,8 @@\n package com.cloud.util;\n \n import com.cloud.network.Network;\n+import com.cloud.network.dao.NetworkDetailVO;\n+import com.cloud.network.dao.NetworkDetailsDao;\n import com.cloud.network.manager.NuageVspManager;\n import com.cloud.offering.NetworkOffering;\n import com.cloud.utils.StringUtils;\n@@ -28,7 +30,12 @@\n \n public class NuageVspUtil {\n \n-    public static String getPreConfiguredDomainTemplateName(ConfigurationDao configDao, Network network, NetworkOffering networkOffering) {\n+    public static String getPreConfiguredDomainTemplateName(ConfigurationDao configDao, NetworkDetailsDao networkDetailsDao, Network network, NetworkOffering networkOffering) {\n+        NetworkDetailVO domainTemplateNetworkDetail = networkDetailsDao.findDetail(network.getId(), NuageVspManager.nuageDomainTemplateDetailName);\n+        if (domainTemplateNetworkDetail != null) {\n+            return domainTemplateNetworkDetail.getValue();\n+        }\n+\n         String configKey;\n         if (network.getVpcId() != null) {\n             configKey = NuageVspManager.NuageVspVpcDomainTemplateName.key();",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/com/cloud/util/NuageVspUtil.java",
                "sha": "fedf048db39f190d68f001ef04c76e75b8418d96",
                "status": "modified"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/net/nuage/vsp/acs/NuageVspPluginClientLoader.java",
                "changes": 91,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/net/nuage/vsp/acs/NuageVspPluginClientLoader.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 62,
                "filename": "plugins/network-elements/nuage-vsp/src/net/nuage/vsp/acs/NuageVspPluginClientLoader.java",
                "patch": "@@ -19,82 +19,53 @@\n \n package net.nuage.vsp.acs;\n \n-import net.nuage.vsp.acs.client.NuageVspApiClient;\n-import net.nuage.vsp.acs.client.NuageVspElementClient;\n-import net.nuage.vsp.acs.client.NuageVspGuruClient;\n-import net.nuage.vsp.acs.client.NuageVspManagerClient;\n-import net.nuage.vsp.acs.client.NuageVspSyncClient;\n+import net.nuage.vsp.acs.client.api.NuageVspApiClient;\n+import net.nuage.vsp.acs.client.api.NuageVspElementClient;\n+import net.nuage.vsp.acs.client.api.NuageVspGuruClient;\n+import net.nuage.vsp.acs.client.api.NuageVspManagerClient;\n+import net.nuage.vsp.acs.client.api.impl.NuageVspApiClientImpl;\n+import net.nuage.vsp.acs.client.api.impl.NuageVspElementClientImpl;\n+import net.nuage.vsp.acs.client.api.impl.NuageVspGuruClientImpl;\n+import net.nuage.vsp.acs.client.api.impl.NuageVspManagerClientImpl;\n+import net.nuage.vsp.acs.client.api.model.VspHost;\n import org.apache.log4j.Logger;\n \n-import javax.naming.ConfigurationException;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n-import java.net.URLClassLoader;\n \n public class NuageVspPluginClientLoader {\n \n-    private ClassLoader _loader = null;\n     private static final Logger s_logger = Logger.getLogger(NuageVspPluginClientLoader.class);\n \n     private NuageVspApiClient _nuageVspApiClient;\n     private NuageVspElementClient _nuageVspElementClient;\n     private NuageVspGuruClient _nuageVspGuruClient;\n     private NuageVspManagerClient _nuageVspManagerClient;\n-    private NuageVspSyncClient _nuageVspSyncClient;\n \n-    private static final String NUAGE_PLUGIN_CLIENT_JAR_FILE = \"/usr/share/nuagevsp/lib/nuage-vsp-acs-client.jar\";\n-    private static final String NUAGE_VSP_API_CLIENT_IMPL = \"net.nuage.vsp.acs.client.impl.NuageVspApiClientImpl\";\n-    private static final String NUAGE_VSP_SYNC_CLIENT_IMPL = \"net.nuage.vsp.acs.client.impl.NuageVspSyncClientImpl\";\n-    private static final String NUAGE_VSP_ELEMENT_CLIENT_IMPL = \"net.nuage.vsp.acs.client.impl.NuageVspElementClientImpl\";\n-    private static final String NUAGE_VSP_GURU_CLIENT_IMPL = \"net.nuage.vsp.acs.client.impl.NuageVspGuruClientImpl\";\n-    private static final String NUAGE_VSP_MANAGER_CLIENT_IMPL = \"net.nuage.vsp.acs.client.impl.NuageVspManagerClientImpl\";\n+    private NuageVspPluginClientLoader() {\n \n-    private NuageVspPluginClientLoader(String nuagePluginClientJarLocation) {\n-        try {\n-            _loader = URLClassLoader.newInstance(new URL[] {new URL(\"jar:file:\" + nuagePluginClientJarLocation + \"!/\")},\n-                    getClass().getClassLoader());\n-        } catch (MalformedURLException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n     }\n \n-    public static NuageVspPluginClientLoader getClientLoader(String relativePath, String[] cmsUserInfo, int numRetries, int retryInterval,\n-            String nuageVspCmsId) throws ConfigurationException {\n-        NuageVspPluginClientLoader nuageVspPluginClientClassloader = new NuageVspPluginClientLoader(NUAGE_PLUGIN_CLIENT_JAR_FILE);\n-        nuageVspPluginClientClassloader.loadClasses(relativePath, cmsUserInfo, numRetries, retryInterval, nuageVspCmsId);\n+    public static NuageVspPluginClientLoader getClientLoader(String relativePath, String cmsUserEnterprise, String cmsUserLogin,\n+            String cmsUserPassword, int numRetries, int retryInterval, String nuageVspCmsId) {\n+        NuageVspPluginClientLoader nuageVspPluginClientClassloader = new NuageVspPluginClientLoader();\n+        nuageVspPluginClientClassloader.loadClasses(relativePath, cmsUserEnterprise, cmsUserLogin, cmsUserPassword, numRetries, retryInterval, nuageVspCmsId);\n         return nuageVspPluginClientClassloader;\n     }\n \n-    private void loadClasses(String relativePath, String[] cmsUserInfo, int numRetries, int retryInterval, String nuageVspCmsId) throws ConfigurationException {\n-        try {\n-            Class<?> nuageVspApiClientClass = Class.forName(NUAGE_VSP_API_CLIENT_IMPL, true, _loader);\n-            Class<?> nuageVspSyncClientClass = Class.forName(NUAGE_VSP_SYNC_CLIENT_IMPL, true, _loader);\n-            Class<?> nuageVspGuruClientClass = Class.forName(NUAGE_VSP_GURU_CLIENT_IMPL, true, _loader);\n-            Class<?> nuageVspElementClientClass = Class.forName(NUAGE_VSP_ELEMENT_CLIENT_IMPL, true, _loader);\n-            Class<?> nuageVspManagerClientClass = Class.forName(NUAGE_VSP_MANAGER_CLIENT_IMPL, true, _loader);\n-\n-            //Instantiate the instances\n-            _nuageVspApiClient = (NuageVspApiClient)nuageVspApiClientClass.newInstance();\n-            _nuageVspApiClient.setNuageVspHost(relativePath, cmsUserInfo, numRetries, retryInterval, nuageVspCmsId);\n-            _nuageVspSyncClient = (NuageVspSyncClient)nuageVspSyncClientClass.newInstance();\n-            _nuageVspSyncClient.setNuageVspApiClient(_nuageVspApiClient);\n-            _nuageVspGuruClient = (NuageVspGuruClient)nuageVspGuruClientClass.newInstance();\n-            _nuageVspGuruClient.setNuageVspApiClient(_nuageVspApiClient);\n-            _nuageVspElementClient = (NuageVspElementClient)nuageVspElementClientClass.newInstance();\n-            _nuageVspElementClient.setNuageVspApiClient(_nuageVspApiClient);\n-            _nuageVspManagerClient = (NuageVspManagerClient)nuageVspManagerClientClass.newInstance();\n-            _nuageVspManagerClient.setNuageVspApiClient(_nuageVspApiClient);\n-        } catch (ClassNotFoundException cnfe) {\n-            s_logger.error(\"Error while loading classes of Nuage VSP client\", cnfe);\n-            throw new ConfigurationException(\"Error while loading classes of Nuage VSP client\");\n-        } catch (InstantiationException ie) {\n-            s_logger.error(\"Error while initializing classes of Nuage VSP client\", ie);\n-            throw new ConfigurationException(\"Error while initializing classes of Nuage VSP client\");\n-        } catch (IllegalAccessException iae) {\n-            s_logger.error(\"Error while accessing classes of Nuage VSP client\", iae);\n-            throw new ConfigurationException(\"Error while accessing classes of Nuage VSP client\");\n-        }\n-\n+    private void loadClasses(String relativePath, String cmsUserEnterprise, String cmsUserLogin, String cmsUserPassword, int numRetries,\n+            int retryInterval, String nuageVspCmsId) {\n+        VspHost vspHost = new VspHost.Builder()\n+                .restRelativePath(relativePath)\n+                .cmsUserEnterprise(cmsUserEnterprise)\n+                .cmsUserLogin(cmsUserLogin)\n+                .cmsUserPassword(cmsUserPassword)\n+                .noofRetry(numRetries)\n+                .retryInterval(retryInterval)\n+                .nuageVspCmsId(nuageVspCmsId)\n+                .build();\n+        _nuageVspApiClient = new NuageVspApiClientImpl(vspHost);\n+        _nuageVspElementClient = new NuageVspElementClientImpl(_nuageVspApiClient);\n+        _nuageVspGuruClient = new NuageVspGuruClientImpl(_nuageVspApiClient);\n+        _nuageVspManagerClient = new NuageVspManagerClientImpl(_nuageVspApiClient);\n     }\n \n     public NuageVspApiClient getNuageVspApiClient() {\n@@ -112,8 +83,4 @@ public NuageVspGuruClient getNuageVspGuruClient() {\n     public NuageVspManagerClient getNuageVspManagerClient() {\n         return _nuageVspManagerClient;\n     }\n-\n-    public NuageVspSyncClient getNuageVspSyncClient() {\n-        return _nuageVspSyncClient;\n-    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/src/net/nuage/vsp/acs/NuageVspPluginClientLoader.java",
                "sha": "72ce2909e214ed0ed03938684afac2c47fe922da",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/2d825dd07f9b1acf19f6d98f5a247e069724c443/plugins/network-elements/nuage-vsp/src/net/nuage/vsp/acs/client/NuageVspApiClient.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/net/nuage/vsp/acs/client/NuageVspApiClient.java?ref=2d825dd07f9b1acf19f6d98f5a247e069724c443",
                "deletions": 32,
                "filename": "plugins/network-elements/nuage-vsp/src/net/nuage/vsp/acs/client/NuageVspApiClient.java",
                "patch": "@@ -1,32 +0,0 @@\n-//\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-//\n-\n-package net.nuage.vsp.acs.client;\n-\n-import java.util.concurrent.ExecutionException;\n-\n-public interface NuageVspApiClient {\n-\n-    void login() throws ExecutionException;\n-\n-    void setNuageVspHost(String restRelativePath, String[] cmsUserInfo, int noofRetry, int retryInterval, String nuageVspCmsId);\n-\n-    String executeRestApi(String method, String resource, String resourceId, String childResource, Object entityDetails, String resourceFilter, String proxyUserUuid,\n-                                 String proxyUserDomainuuid) throws ExecutionException;\n-}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2d825dd07f9b1acf19f6d98f5a247e069724c443/plugins/network-elements/nuage-vsp/src/net/nuage/vsp/acs/client/NuageVspApiClient.java",
                "sha": "d80daf9eef33130b62f882c707a53f3acddc9ad2",
                "status": "removed"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/2d825dd07f9b1acf19f6d98f5a247e069724c443/plugins/network-elements/nuage-vsp/src/net/nuage/vsp/acs/client/NuageVspElementClient.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/net/nuage/vsp/acs/client/NuageVspElementClient.java?ref=2d825dd07f9b1acf19f6d98f5a247e069724c443",
                "deletions": 42,
                "filename": "plugins/network-elements/nuage-vsp/src/net/nuage/vsp/acs/client/NuageVspElementClient.java",
                "patch": "@@ -1,42 +0,0 @@\n-//\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-//\n-\n-package net.nuage.vsp.acs.client;\n-\n-import java.util.List;\n-import java.util.Map;\n-import java.util.concurrent.ExecutionException;\n-\n-public interface NuageVspElementClient {\n-\n-    boolean implement(long networkId, String networkDomainUuid, String networkUuid, String networkName, String vpcOrSubnetUuid, boolean isL2Network, boolean isL3Network,\n-                             boolean isVpc, boolean isShared, String domainTemplateName, boolean isFirewallServiceSupported, List<String> dnsServers, List<Map<String, Object>> ingressFirewallRules,\n-                             List<Map<String, Object>> egressFirewallRules, List<String> acsFipUuid, boolean egressDefaultPolicy) throws ExecutionException;\n-\n-    void applyStaticNats(String networkDomainUuid, String networkUuid, String vpcOrSubnetUuid, boolean isL3Network, boolean isVpc,\n-                                List<Map<String, Object>> staticNatDetails) throws ExecutionException;\n-\n-    void applyAclRules(boolean isNetworkAcl, String networkUuid, String networkDomainUuid, String vpcOrSubnetUuid, String networkName, boolean isL2Network,\n-                              List<Map<String, Object>> rules, long networkId, boolean egressDefaultPolicy, Boolean isAcsIngressAcl, boolean networkReset, String domainTemplateName) throws ExecutionException;\n-\n-    void shutdownVpc(String domainUuid, String vpcUuid, String domainTemplateName) throws ExecutionException;\n-\n-    <C extends NuageVspApiClient> void setNuageVspApiClient(NuageVspApiClient nuageVspApiClient);\n-\n-}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2d825dd07f9b1acf19f6d98f5a247e069724c443/plugins/network-elements/nuage-vsp/src/net/nuage/vsp/acs/client/NuageVspElementClient.java",
                "sha": "acd4256a500e0f3d6c5cda4b0b7aeb695de8c2d3",
                "status": "removed"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/2d825dd07f9b1acf19f6d98f5a247e069724c443/plugins/network-elements/nuage-vsp/src/net/nuage/vsp/acs/client/NuageVspGuruClient.java",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/net/nuage/vsp/acs/client/NuageVspGuruClient.java?ref=2d825dd07f9b1acf19f6d98f5a247e069724c443",
                "deletions": 43,
                "filename": "plugins/network-elements/nuage-vsp/src/net/nuage/vsp/acs/client/NuageVspGuruClient.java",
                "patch": "@@ -1,43 +0,0 @@\n-//\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-//\n-\n-package net.nuage.vsp.acs.client;\n-\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.concurrent.ExecutionException;\n-\n-public interface NuageVspGuruClient {\n-\n-    void implement(String networkDomainName, String networkDomainPath, String networkDomainUuid, String networkAccountName, String networkAccountUuid, String networkName,\n-                          String networkCidr, String networkGateway, Long networkAclId, List<String> dnsServers, List<String> gatewaySystemIds, boolean isL3Network, boolean isVpc, boolean isSharedNetwork,\n-                          String networkUuid, String vpcName, String vpcUuid, boolean defaultEgressPolicy, Collection<String[]> ipAddressRange, String domainTemplateName) throws ExecutionException;\n-\n-    void reserve(String nicUuid, String nicMacAddress, String networkUuid, boolean isL3Network, boolean isSharedNetwork, String vpcUuid, String networkDomainUuid,\n-                                             String networksAccountUuid, boolean isDomainRouter, String domainRouterIp, String vmInstanceName, String vmUuid, boolean useStaticIp, String staticIp, String staticNatIpUuid,\n-                                             String staticNatIpAddress, boolean isStaticNatIpAllocated, boolean isOneToOneNat, String staticNatVlanUuid, String staticNatVlanGateway, String staticNatVlanNetmask) throws ExecutionException;\n-\n-    void deallocate(String networkUuid, String nicFrmDdUuid, String nicMacAddress, String nicIp4Address, boolean isL3Network, boolean isSharedNetwork,\n-                           String vpcUuid, String networksDomainUuid, String vmInstanceName, String vmUuid, boolean isExpungingState) throws ExecutionException;\n-\n-    void trash(String domainUuid, String networkUuid, boolean isL3Network, boolean isSharedNetwork, String vpcUuid, String domainTemplateName) throws ExecutionException;\n-\n-    void setNuageVspApiClient(NuageVspApiClient nuageVspApiClient);\n-\n-}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2d825dd07f9b1acf19f6d98f5a247e069724c443/plugins/network-elements/nuage-vsp/src/net/nuage/vsp/acs/client/NuageVspGuruClient.java",
                "sha": "2b3a63a2634a5f2133e2f7b87f401b66fe60a03e",
                "status": "removed"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/2d825dd07f9b1acf19f6d98f5a247e069724c443/plugins/network-elements/nuage-vsp/src/net/nuage/vsp/acs/client/NuageVspManagerClient.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/net/nuage/vsp/acs/client/NuageVspManagerClient.java?ref=2d825dd07f9b1acf19f6d98f5a247e069724c443",
                "deletions": 42,
                "filename": "plugins/network-elements/nuage-vsp/src/net/nuage/vsp/acs/client/NuageVspManagerClient.java",
                "patch": "@@ -1,42 +0,0 @@\n-//\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-//\n-\n-package net.nuage.vsp.acs.client;\n-\n-import org.apache.commons.lang3.tuple.Pair;\n-\n-import java.util.Map;\n-import java.util.concurrent.ExecutionException;\n-\n-public interface NuageVspManagerClient {\n-\n-    Pair<Boolean, String> auditNuageVspCmsId(String nuageVspCmsId, boolean auditOnly) throws ExecutionException;\n-\n-    String registerNuageVspCmsId() throws ExecutionException;\n-\n-    boolean unregisterNuageVspCmsId(String nuageVspCmsId) throws ExecutionException;\n-\n-    boolean isSupportedApiVersion(String version);\n-\n-    Map<String, Object> getClientDefaults() throws ExecutionException;\n-\n-    boolean syncDomainWithNuageVsp(String domainUuid, String domainName, String domainPath, boolean add, boolean remove) throws ExecutionException;\n-\n-    <C extends NuageVspApiClient> void setNuageVspApiClient(NuageVspApiClient nuageVspApiClient);\n-}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2d825dd07f9b1acf19f6d98f5a247e069724c443/plugins/network-elements/nuage-vsp/src/net/nuage/vsp/acs/client/NuageVspManagerClient.java",
                "sha": "f134111bf78334ea4b2651453d8f8e8e58a7c6c9",
                "status": "removed"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/2d825dd07f9b1acf19f6d98f5a247e069724c443/plugins/network-elements/nuage-vsp/src/net/nuage/vsp/acs/client/NuageVspSyncClient.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/net/nuage/vsp/acs/client/NuageVspSyncClient.java?ref=2d825dd07f9b1acf19f6d98f5a247e069724c443",
                "deletions": 29,
                "filename": "plugins/network-elements/nuage-vsp/src/net/nuage/vsp/acs/client/NuageVspSyncClient.java",
                "patch": "@@ -1,29 +0,0 @@\n-//\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-//\n-\n-package net.nuage.vsp.acs.client;\n-\n-import java.util.concurrent.ExecutionException;\n-\n-public interface NuageVspSyncClient {\n-\n-    void syncWithNuageVsp(String nuageVspEntity) throws ExecutionException;\n-\n-    void setNuageVspApiClient(NuageVspApiClient nuageVspApiClient);\n-}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/2d825dd07f9b1acf19f6d98f5a247e069724c443/plugins/network-elements/nuage-vsp/src/net/nuage/vsp/acs/client/NuageVspSyncClient.java",
                "sha": "951ee5ad7ec1b7dbedd1e397b27d4f216565c52b",
                "status": "removed"
            },
            {
                "additions": 157,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/test/com/cloud/NuageTest.java",
                "changes": 157,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/test/com/cloud/NuageTest.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 0,
                "filename": "plugins/network-elements/nuage-vsp/test/com/cloud/NuageTest.java",
                "patch": "@@ -0,0 +1,157 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+\n+package com.cloud;\n+\n+import com.cloud.dc.VlanVO;\n+import com.cloud.domain.Domain;\n+import com.cloud.network.Network;\n+import com.cloud.network.NetworkModel;\n+import com.cloud.network.dao.IPAddressVO;\n+import com.cloud.network.rules.FirewallRule;\n+import com.cloud.network.vpc.NetworkACLItem;\n+import com.cloud.util.NuageVspEntityBuilder;\n+import com.cloud.vm.NicProfile;\n+import com.cloud.vm.NicVO;\n+import com.cloud.vm.VirtualMachine;\n+import net.nuage.vsp.acs.client.api.model.VspAclRule;\n+import net.nuage.vsp.acs.client.api.model.VspDomain;\n+import net.nuage.vsp.acs.client.api.model.VspNetwork;\n+import net.nuage.vsp.acs.client.api.model.VspNic;\n+import net.nuage.vsp.acs.client.api.model.VspStaticNat;\n+import net.nuage.vsp.acs.client.api.model.VspVm;\n+import net.nuage.vsp.acs.client.common.model.Pair;\n+import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n+import org.junit.Before;\n+\n+import java.util.ArrayList;\n+\n+import static com.cloud.network.manager.NuageVspManager.NuageVspIsolatedNetworkDomainTemplateName;\n+import static com.cloud.network.manager.NuageVspManager.NuageVspSharedNetworkDomainTemplateName;\n+import static com.cloud.network.manager.NuageVspManager.NuageVspVpcDomainTemplateName;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyBoolean;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class NuageTest {\n+\n+    protected static final long NETWORK_ID = 42L;\n+    protected NetworkModel _networkModel = mock(NetworkModel.class);\n+    protected ConfigurationDao _configurationDao = mock(ConfigurationDao.class);\n+    protected NuageVspEntityBuilder _nuageVspEntityBuilder = mock(NuageVspEntityBuilder.class);\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        // Standard responses\n+        when(_networkModel.isProviderForNetwork(Network.Provider.NuageVsp, NETWORK_ID)).thenReturn(true);\n+        when(_configurationDao.getValue(NuageVspIsolatedNetworkDomainTemplateName.key())).thenReturn(\"IsolatedDomainTemplate\");\n+        when(_configurationDao.getValue(NuageVspVpcDomainTemplateName.key())).thenReturn(\"VpcDomainTemplate\");\n+        when(_configurationDao.getValue(NuageVspSharedNetworkDomainTemplateName.key())).thenReturn(\"SharedDomainTemplate\");\n+\n+        when(_nuageVspEntityBuilder.buildVspDomain(any(Domain.class))).thenReturn(buildVspDomain());\n+        when(_nuageVspEntityBuilder.buildVspNetwork(any(Network.class), anyBoolean())).thenReturn(buildVspNetwork());\n+        when(_nuageVspEntityBuilder.buildVspVm(any(VirtualMachine.class), any(Network.class))).thenReturn(buildVspVm());\n+        when(_nuageVspEntityBuilder.buildVspNic(anyString(), any(NicProfile.class))).thenReturn(buildVspNic());\n+        when(_nuageVspEntityBuilder.buildVspNic(any(NicVO.class))).thenReturn(buildVspNic());\n+        when(_nuageVspEntityBuilder.buildVspStaticNat(anyBoolean(), any(IPAddressVO.class), any(VlanVO.class), any(NicVO.class))).thenReturn(buildVspStaticNat());\n+        when(_nuageVspEntityBuilder.buildVspAclRule(any(FirewallRule.class), any(Network.class))).thenReturn(buildVspAclRule());\n+        when(_nuageVspEntityBuilder.buildVspAclRule(any(NetworkACLItem.class))).thenReturn(buildVspAclRule());\n+    }\n+\n+    protected VspDomain buildVspDomain() {\n+        return new VspDomain.Builder()\n+                .uuid(\"domainUuid\")\n+                .name(\"domainName\")\n+                .path(\"domainPath\")\n+                .build();\n+    }\n+\n+    protected VspNetwork buildVspNetwork() {\n+        return new VspNetwork.Builder()\n+                .id(NETWORK_ID)\n+                .uuid(\"networkUuid\")\n+                .name(\"networkName\")\n+                .domain(buildVspDomain())\n+                .accountUuid(\"networkAccountUuid\")\n+                .accountName(\"networkAccountName\")\n+                .vpcUuid(\"vpcUuid\")\n+                .vpcName(\"vpcName\")\n+                .networkType(VspNetwork.NetworkType.L3)\n+                .firewallServiceSupported(true)\n+                .egressDefaultPolicy(true)\n+                .domainTemplateName(\"domainTemplateName\")\n+                .cidr(\"networkCidr\")\n+                .gateway(\"networkGateway\")\n+                .virtualRouterIp(\"virtualRouterIp\")\n+                .ipAddressRanges(new ArrayList<Pair<String, String>>())\n+                .build();\n+    }\n+\n+    protected VspVm buildVspVm() {\n+        return new VspVm.Builder()\n+                .state(VspVm.State.Running)\n+                .uuid(\"vmUuid\")\n+                .name(\"vmName\")\n+                .domainRouter(true)\n+                .domainRouterIp(\"domainRouterIp\")\n+                .build();\n+    }\n+\n+    protected VspNic buildVspNic() {\n+        return new VspNic.Builder()\n+                .uuid(\"nicUuid\")\n+                .macAddress(\"macAddress\")\n+                .useStaticIp(true)\n+                .ip(\"ip\")\n+                .build();\n+    }\n+\n+    protected VspStaticNat buildVspStaticNat() {\n+        return new VspStaticNat.Builder()\n+                .state(VspStaticNat.State.Allocating)\n+                .ipUuid(\"ipUuid\")\n+                .ipAddress(\"ipAddress\")\n+                .nic(buildVspNic())\n+                .revoke(false)\n+                .oneToOneNat(true)\n+                .vlanUuid(\"vlanUuid\")\n+                .vlanGateway(\"vlanGateway\")\n+                .vlanNetmask(\"vlanNetmask\")\n+                .build();\n+    }\n+\n+    protected VspAclRule buildVspAclRule() {\n+        return new VspAclRule.Builder()\n+                .uuid(\"aclRuleUuid\")\n+                .protocol(\"protcol\")\n+                .startPort(1)\n+                .endPort(9)\n+                .state(VspAclRule.ACLState.Add)\n+                .trafficType(VspAclRule.ACLTrafficType.Ingress)\n+                .action(VspAclRule.ACLAction.Allow)\n+                .sourceIpAddress(\"sourceIpAddress\")\n+                .sourceCidrList(new ArrayList<String>())\n+                .priority(1)\n+                .type(VspAclRule.ACLType.NetworkACL)\n+                .build();\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/test/com/cloud/NuageTest.java",
                "sha": "845a8be04f9979465d3e41edf3ead22cf56e6f53",
                "status": "added"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/test/com/cloud/agent/api/CommandsTest.java",
                "changes": 63,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/test/com/cloud/agent/api/CommandsTest.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 47,
                "filename": "plugins/network-elements/nuage-vsp/test/com/cloud/agent/api/CommandsTest.java",
                "patch": "@@ -30,43 +30,41 @@\n import com.cloud.agent.api.manager.SupportedApiVersionCommand;\n import com.cloud.agent.api.sync.SyncDomainCommand;\n import com.cloud.agent.api.sync.SyncNuageVspCmsIdCommand;\n-import com.cloud.agent.api.sync.SyncVspCommand;\n import com.google.common.collect.Maps;\n import com.google.common.testing.EqualsTester;\n import org.junit.Test;\n \n import java.lang.reflect.Constructor;\n import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n import java.util.Map;\n \n public class CommandsTest {\n \n     @Test\n     public void testCommandEquals() throws IllegalAccessException, InvocationTargetException, InstantiationException {\n-        ApplyAclRuleVspCommand applyAclRuleVspCommand = fillBuilderObject(new ApplyAclRuleVspCommand.Builder()).build();\n-        ApplyAclRuleVspCommand otherApplyAclRuleVspCommand = fillBuilderObject(new ApplyAclRuleVspCommand.Builder()).build();\n+        ApplyAclRuleVspCommand applyAclRuleVspCommand = fillObject(ApplyAclRuleVspCommand.class);\n+        ApplyAclRuleVspCommand otherApplyAclRuleVspCommand = fillObject(ApplyAclRuleVspCommand.class);\n \n-        ApplyStaticNatVspCommand applyStaticNatVspCommand = fillBuilderObject(new ApplyStaticNatVspCommand.Builder()).build();\n-        ApplyStaticNatVspCommand otherApplyStaticNatVspCommand = fillBuilderObject(new ApplyStaticNatVspCommand.Builder()).build();\n+        ApplyStaticNatVspCommand applyStaticNatVspCommand = fillObject(ApplyStaticNatVspCommand.class);\n+        ApplyStaticNatVspCommand otherApplyStaticNatVspCommand = fillObject(ApplyStaticNatVspCommand.class);\n \n-        ImplementVspCommand implementVspCommand = fillBuilderObject(new ImplementVspCommand.Builder()).build();\n-        ImplementVspCommand otherImplementVspCommand = fillBuilderObject(new ImplementVspCommand.Builder()).build();\n+        ImplementVspCommand implementVspCommand = fillObject(ImplementVspCommand.class);\n+        ImplementVspCommand otherImplementVspCommand = fillObject(ImplementVspCommand.class);\n \n-        ShutDownVpcVspCommand shutDownVpcVspCommand = fillBuilderObject(new ShutDownVpcVspCommand.Builder()).build();\n-        ShutDownVpcVspCommand otherShutDownVpcVspCommand = fillBuilderObject(new ShutDownVpcVspCommand.Builder()).build();\n+        ShutDownVpcVspCommand shutDownVpcVspCommand = fillObject(ShutDownVpcVspCommand.class);\n+        ShutDownVpcVspCommand otherShutDownVpcVspCommand = fillObject(ShutDownVpcVspCommand.class);\n \n-        DeallocateVmVspCommand deallocateVmVspCommand = fillBuilderObject(new DeallocateVmVspCommand.Builder()).build();\n-        DeallocateVmVspCommand otherDeallocateVmVspCommand = fillBuilderObject(new DeallocateVmVspCommand.Builder()).build();\n+        DeallocateVmVspCommand deallocateVmVspCommand = fillObject(DeallocateVmVspCommand.class);\n+        DeallocateVmVspCommand otherDeallocateVmVspCommand = fillObject(DeallocateVmVspCommand.class);\n \n-        ImplementNetworkVspCommand implementNetworkVspCommand = fillBuilderObject(new ImplementNetworkVspCommand.Builder()).build();\n-        ImplementNetworkVspCommand otherImplementNetworkVspCommand = fillBuilderObject(new ImplementNetworkVspCommand.Builder()).build();\n+        ImplementNetworkVspCommand implementNetworkVspCommand = fillObject(ImplementNetworkVspCommand.class);\n+        ImplementNetworkVspCommand otherImplementNetworkVspCommand = fillObject(ImplementNetworkVspCommand.class);\n \n-        ReserveVmInterfaceVspCommand reserveVmInterfaceVspCommand = fillBuilderObject(new ReserveVmInterfaceVspCommand.Builder()).build();\n-        ReserveVmInterfaceVspCommand otherReserveVmInterfaceVspCommand = fillBuilderObject(new ReserveVmInterfaceVspCommand.Builder()).build();\n+        ReserveVmInterfaceVspCommand reserveVmInterfaceVspCommand = fillObject(ReserveVmInterfaceVspCommand.class);\n+        ReserveVmInterfaceVspCommand otherReserveVmInterfaceVspCommand = fillObject(ReserveVmInterfaceVspCommand.class);\n \n-        TrashNetworkVspCommand trashNetworkVspCommand = fillBuilderObject(new TrashNetworkVspCommand.Builder()).build();\n-        TrashNetworkVspCommand otherTrashNetworkVspCommand  = fillBuilderObject(new TrashNetworkVspCommand.Builder()).build();\n+        TrashNetworkVspCommand trashNetworkVspCommand = fillObject(TrashNetworkVspCommand.class);\n+        TrashNetworkVspCommand otherTrashNetworkVspCommand  = fillObject(TrashNetworkVspCommand.class);\n \n         SupportedApiVersionCommand supportedApiVersionCommand = new SupportedApiVersionCommand(\"3.2\");\n         SupportedApiVersionCommand otherSupportedApiVersionCommand = new SupportedApiVersionCommand(\"3.2\");\n@@ -77,15 +75,9 @@ public void testCommandEquals() throws IllegalAccessException, InvocationTargetE\n         SyncNuageVspCmsIdCommand syncNuageVspCmsIdCommand = fillObject(SyncNuageVspCmsIdCommand.class);\n         SyncNuageVspCmsIdCommand otherSyncNuageVspCmsIdCommand = fillObject(SyncNuageVspCmsIdCommand.class);\n \n-        SyncVspCommand syncVspCommand = fillObject(SyncVspCommand.class);\n-        SyncVspCommand otherSyncVspCommand = fillObject(SyncVspCommand.class);\n-\n         PingNuageVspCommand pingNuageVspCommand = fillObject(PingNuageVspCommand.class);\n         PingNuageVspCommand otherPingNuageVspCommand = fillObject(PingNuageVspCommand.class);\n \n-        VspResourceCommand vspResourceCommand = fillObject(VspResourceCommand.class);\n-        VspResourceCommand otherVspResourceCommand = fillObject(VspResourceCommand.class);\n-\n         new EqualsTester()\n                 .addEqualityGroup(applyAclRuleVspCommand, otherApplyAclRuleVspCommand)\n                 .addEqualityGroup(applyStaticNatVspCommand, otherApplyStaticNatVspCommand)\n@@ -98,33 +90,10 @@ public void testCommandEquals() throws IllegalAccessException, InvocationTargetE\n                 .addEqualityGroup(supportedApiVersionCommand, otherSupportedApiVersionCommand)\n                 .addEqualityGroup(syncDomainCommand, otherSyncDomainCommand)\n                 .addEqualityGroup(syncNuageVspCmsIdCommand, otherSyncNuageVspCmsIdCommand)\n-                .addEqualityGroup(syncVspCommand, otherSyncVspCommand)\n                 .addEqualityGroup(pingNuageVspCommand, otherPingNuageVspCommand)\n-                .addEqualityGroup(vspResourceCommand, otherVspResourceCommand)\n                 .testEquals();\n     }\n \n-    private <T extends CmdBuilder> T fillBuilderObject(T obj) throws IllegalAccessException, InvocationTargetException {\n-        Class clazz = obj.getClass();\n-        for (Method method : clazz.getDeclaredMethods()) {\n-            if (method.getParameterTypes().length == 1) {\n-                Class paramType = method.getParameterTypes()[0];\n-                if (isNumericType(paramType)) {\n-                    if (Long.class.isAssignableFrom(paramType)) {\n-                        method.invoke(obj, Long.valueOf(method.getName().length()));\n-                    } else {\n-                        method.invoke(obj, method.getName().length());\n-                    }\n-                } else if (String.class.isAssignableFrom(paramType)) {\n-                    method.invoke(obj, method.getName());\n-                } else if (Boolean.class.isAssignableFrom(paramType) || boolean.class.isAssignableFrom(paramType)) {\n-                    method.invoke(obj, method.getName().length() % 2 == 0);\n-                }\n-            }\n-        }\n-        return obj;\n-    }\n-\n     private <T> T fillObject(Class<T> clazz) throws IllegalAccessException, InvocationTargetException, InstantiationException {\n         Constructor constructor = clazz.getDeclaredConstructors()[0];\n         Object[] constructorArgs = new Object[constructor.getParameterTypes().length];",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/test/com/cloud/agent/api/CommandsTest.java",
                "sha": "2a0b07ad992ee2d24ddf076ecd12e57193ebabb0",
                "status": "modified"
            },
            {
                "additions": 98,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/test/com/cloud/network/element/NuageVspElementTest.java",
                "changes": 202,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/test/com/cloud/network/element/NuageVspElementTest.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 104,
                "filename": "plugins/network-elements/nuage-vsp/test/com/cloud/network/element/NuageVspElementTest.java",
                "patch": "@@ -19,6 +19,7 @@\n \n package com.cloud.network.element;\n \n+import com.cloud.NuageTest;\n import com.cloud.agent.AgentManager;\n import com.cloud.agent.api.Answer;\n import com.cloud.agent.api.Command;\n@@ -35,7 +36,6 @@\n import com.cloud.network.Network.GuestType;\n import com.cloud.network.Network.Provider;\n import com.cloud.network.Network.Service;\n-import com.cloud.network.NetworkModel;\n import com.cloud.network.Networks.BroadcastDomainType;\n import com.cloud.network.Networks.TrafficType;\n import com.cloud.network.NuageVspDeviceVO;\n@@ -59,15 +59,15 @@\n import com.cloud.offerings.dao.NetworkOfferingServiceMapDao;\n import com.cloud.resource.ResourceManager;\n import com.cloud.user.Account;\n+import com.cloud.util.NuageVspEntityBuilder;\n+import com.cloud.vm.DomainRouterVO;\n import com.cloud.vm.ReservationContext;\n+import com.cloud.vm.dao.DomainRouterDao;\n import com.google.common.collect.Lists;\n-import org.apache.cloudstack.engine.orchestration.service.NetworkOrchestrationService;\n-import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n+import org.apache.cloudstack.resourcedetail.dao.VpcDetailsDao;\n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.invocation.InvocationOnMock;\n \n-import javax.naming.ConfigurationException;\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.util.ArrayList;\n@@ -76,65 +76,55 @@\n import java.util.HashSet;\n import java.util.Set;\n \n-import static com.cloud.network.manager.NuageVspManager.NuageVspIsolatedNetworkDomainTemplateName;\n-import static com.cloud.network.manager.NuageVspManager.NuageVspSharedNetworkDomainTemplateName;\n-import static com.cloud.network.manager.NuageVspManager.NuageVspVpcDomainTemplateName;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n import static org.mockito.Matchers.any;\n import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n-public class NuageVspElementTest {\n-\n-    private static final long NETWORK_ID = 42L;\n-    NuageVspElement element = new NuageVspElement();\n-    NetworkOrchestrationService networkManager = mock(NetworkOrchestrationService.class);\n-    NetworkModel networkModel = mock(NetworkModel.class);\n-    NetworkServiceMapDao ntwkSrvcDao = mock(NetworkServiceMapDao.class);\n-    AgentManager agentManager = mock(AgentManager.class);\n-    HostDao hostDao = mock(HostDao.class);\n-    NuageVspDao nuageVspDao = mock(NuageVspDao.class);\n-    DomainDao domainDao = mock(DomainDao.class);\n-    NetworkOfferingDao ntwkOfferingDao = mock(NetworkOfferingDao.class);\n-    NetworkOfferingServiceMapDao ntwkOfferingSrvcDao = mock(NetworkOfferingServiceMapDao.class);\n-    ConfigurationDao configDao = mock(ConfigurationDao.class);\n-    NuageVspManager nuageVspManager = mock(NuageVspManager.class);\n-    FirewallRulesDao firewallRulesDao = mock(FirewallRulesDao.class);\n-    IPAddressDao ipAddressDao = mock(IPAddressDao.class);\n-    PhysicalNetworkDao physNetDao = mock(PhysicalNetworkDao.class);\n-\n-    org.mockito.stubbing.Answer<Object> genericAnswer = new org.mockito.stubbing.Answer<Object>() {\n-        public Object answer(InvocationOnMock invocation) {\n-            return null;\n-        }\n-    };\n+public class NuageVspElementTest extends NuageTest {\n+\n+    private NuageVspElement _nuageVspElement = new NuageVspElement();\n+\n+    private NetworkServiceMapDao _networkServiceMapDao = mock(NetworkServiceMapDao.class);\n+    private AgentManager _agentManager = mock(AgentManager.class);\n+    private HostDao _hostDao = mock(HostDao.class);\n+    private NuageVspDao _nuageVspDao = mock(NuageVspDao.class);\n+    private DomainDao _domainDao = mock(DomainDao.class);\n+    private NetworkOfferingDao _networkOfferingDao = mock(NetworkOfferingDao.class);\n+    private NetworkOfferingServiceMapDao _networkOfferingServiceMapDao = mock(NetworkOfferingServiceMapDao.class);\n+    private NuageVspManager _nuageVspManager = mock(NuageVspManager.class);\n+    private FirewallRulesDao _firewallRulesDao = mock(FirewallRulesDao.class);\n+    private IPAddressDao _ipAddressDao = mock(IPAddressDao.class);\n+    private PhysicalNetworkDao _physicalNetworkDao = mock(PhysicalNetworkDao.class);\n+    private NuageVspEntityBuilder _nuageVspEntityBuilder = mock(NuageVspEntityBuilder.class);\n+    private VpcDetailsDao _vpcDetailsDao = mock(VpcDetailsDao.class);\n+    private DomainRouterDao _domainRouterDao = mock(DomainRouterDao.class);\n \n     @Before\n-    public void setUp() throws ConfigurationException {\n-        element._resourceMgr = mock(ResourceManager.class);\n-        element._ntwkSrvcDao = ntwkSrvcDao;\n-        element._networkModel = networkModel;\n-        element._agentMgr = agentManager;\n-        element._hostDao = hostDao;\n-        element._nuageVspDao = nuageVspDao;\n-        element._ntwkOfferingSrvcDao = ntwkOfferingSrvcDao;\n-        element._domainDao = domainDao;\n-        element._ntwkOfferingDao = ntwkOfferingDao;\n-        element._configDao = configDao;\n-        element._nuageVspManager = nuageVspManager;\n-        element._firewallRulesDao = firewallRulesDao;\n-        element._ipAddressDao = ipAddressDao;\n-        element._physicalNetworkDao = physNetDao;\n-\n-        // Standard responses\n-        when(networkModel.isProviderForNetwork(Provider.NuageVsp, NETWORK_ID)).thenReturn(true);\n-        when(configDao.getValue(NuageVspIsolatedNetworkDomainTemplateName.key())).thenReturn(\"IsolatedDomainTemplate\");\n-        when(configDao.getValue(NuageVspVpcDomainTemplateName.key())).thenReturn(\"VpcDomainTemplate\");\n-        when(configDao.getValue(NuageVspSharedNetworkDomainTemplateName.key())).thenReturn(\"SharedDomainTemplate\");\n-\n-        element.configure(\"NuageVspTestElement\", Collections.<String, Object> emptyMap());\n+    public void setUp() throws Exception {\n+        super.setUp();\n+\n+        _nuageVspElement._resourceMgr = mock(ResourceManager.class);\n+        _nuageVspElement._ntwkSrvcDao = _networkServiceMapDao;\n+        _nuageVspElement._networkModel = _networkModel;\n+        _nuageVspElement._agentMgr = _agentManager;\n+        _nuageVspElement._hostDao = _hostDao;\n+        _nuageVspElement._nuageVspDao = _nuageVspDao;\n+        _nuageVspElement._ntwkOfferingSrvcDao = _networkOfferingServiceMapDao;\n+        _nuageVspElement._domainDao = _domainDao;\n+        _nuageVspElement._ntwkOfferingDao = _networkOfferingDao;\n+        _nuageVspElement._configDao = _configurationDao;\n+        _nuageVspElement._nuageVspManager = _nuageVspManager;\n+        _nuageVspElement._firewallRulesDao = _firewallRulesDao;\n+        _nuageVspElement._ipAddressDao = _ipAddressDao;\n+        _nuageVspElement._physicalNetworkDao = _physicalNetworkDao;\n+        _nuageVspElement._nuageVspEntityBuilder = _nuageVspEntityBuilder;\n+        _nuageVspElement._vpcDetailsDao = _vpcDetailsDao;\n+        _nuageVspElement._routerDao = _domainRouterDao;\n+\n+        _nuageVspElement.configure(\"NuageVspTestElement\", Collections.<String, Object>emptyMap());\n     }\n \n     @Test\n@@ -147,29 +137,29 @@ public void testCanHandle() {\n         final NetworkOfferingVO ntwkoffer = mock(NetworkOfferingVO.class);\n         when(ntwkoffer.getId()).thenReturn(NETWORK_ID);\n         when(ntwkoffer.getIsPersistent()).thenReturn(true);\n-        when(ntwkOfferingDao.findById(NETWORK_ID)).thenReturn(ntwkoffer);\n+        when(_networkOfferingDao.findById(NETWORK_ID)).thenReturn(ntwkoffer);\n \n-        when(ntwkSrvcDao.canProviderSupportServiceInNetwork(NETWORK_ID, Service.Connectivity, Provider.NuageVsp)).thenReturn(true);\n+        when(_networkServiceMapDao.canProviderSupportServiceInNetwork(NETWORK_ID, Service.Connectivity, Provider.NuageVsp)).thenReturn(true);\n         // Golden path\n-        assertTrue(element.canHandle(net, Service.Connectivity));\n+        assertTrue(_nuageVspElement.canHandle(net, Service.Connectivity));\n \n         when(net.getBroadcastDomainType()).thenReturn(BroadcastDomainType.Vlan);\n         // Only broadcastdomaintype Vsp is supported\n-        assertFalse(element.canHandle(net, Service.Connectivity));\n+        assertFalse(_nuageVspElement.canHandle(net, Service.Connectivity));\n \n         when(net.getBroadcastDomainType()).thenReturn(BroadcastDomainType.Vsp);\n-        when(ntwkSrvcDao.canProviderSupportServiceInNetwork(NETWORK_ID, Service.Connectivity, Provider.NuageVsp)).thenReturn(false);\n+        when(_networkServiceMapDao.canProviderSupportServiceInNetwork(NETWORK_ID, Service.Connectivity, Provider.NuageVsp)).thenReturn(false);\n         // No NuageVsp provider in the network\n-        assertFalse(element.canHandle(net, Service.Connectivity));\n+        assertFalse(_nuageVspElement.canHandle(net, Service.Connectivity));\n \n-        when(networkModel.isProviderForNetwork(Provider.NuageVsp, NETWORK_ID)).thenReturn(false);\n-        when(ntwkSrvcDao.canProviderSupportServiceInNetwork(NETWORK_ID, Service.Connectivity, Provider.NuageVsp)).thenReturn(true);\n+        when(_networkModel.isProviderForNetwork(Provider.NuageVsp, NETWORK_ID)).thenReturn(false);\n+        when(_networkServiceMapDao.canProviderSupportServiceInNetwork(NETWORK_ID, Service.Connectivity, Provider.NuageVsp)).thenReturn(true);\n         // NusageVsp provider does not provide Connectivity for this network\n-        assertFalse(element.canHandle(net, Service.Connectivity));\n+        assertFalse(_nuageVspElement.canHandle(net, Service.Connectivity));\n \n-        when(networkModel.isProviderForNetwork(Provider.NuageVsp, NETWORK_ID)).thenReturn(true);\n+        when(_networkModel.isProviderForNetwork(Provider.NuageVsp, NETWORK_ID)).thenReturn(true);\n         // Only service Connectivity is supported\n-        assertFalse(element.canHandle(net, Service.Dhcp));\n+        assertFalse(_nuageVspElement.canHandle(net, Service.Dhcp));\n \n     }\n \n@@ -182,8 +172,8 @@ public void testImplement() throws ConcurrentOperationException, ResourceUnavail\n         when(network.getBroadcastUri()).thenReturn(new URI(\"\"));\n         when(network.getPhysicalNetworkId()).thenReturn(NETWORK_ID);\n         when(network.getDomainId()).thenReturn(NETWORK_ID);\n-        when(networkModel.isProviderForNetwork(Provider.NuageVsp, NETWORK_ID)).thenReturn(true);\n-        when(ntwkSrvcDao.canProviderSupportServiceInNetwork(NETWORK_ID, Service.Connectivity, Provider.NuageVsp)).thenReturn(true);\n+        when(_networkModel.isProviderForNetwork(Provider.NuageVsp, NETWORK_ID)).thenReturn(true);\n+        when(_networkServiceMapDao.canProviderSupportServiceInNetwork(NETWORK_ID, Service.Connectivity, Provider.NuageVsp)).thenReturn(true);\n \n         final NetworkOffering offering = mock(NetworkOffering.class);\n         when(offering.getId()).thenReturn(NETWORK_ID);\n@@ -194,7 +184,7 @@ public void testImplement() throws ConcurrentOperationException, ResourceUnavail\n \n         final DomainVO dom = mock(DomainVO.class);\n         when(dom.getName()).thenReturn(\"domain\");\n-        when(domainDao.findById(NETWORK_ID)).thenReturn(dom);\n+        when(_domainDao.findById(NETWORK_ID)).thenReturn(dom);\n         final Account acc = mock(Account.class);\n         when(acc.getAccountName()).thenReturn(\"accountname\");\n         final ReservationContext context = mock(ReservationContext.class);\n@@ -205,15 +195,15 @@ public void testImplement() throws ConcurrentOperationException, ResourceUnavail\n         when(host.getId()).thenReturn(NETWORK_ID);\n         final NuageVspDeviceVO nuageVspDevice = mock(NuageVspDeviceVO.class);\n         when(nuageVspDevice.getHostId()).thenReturn(NETWORK_ID);\n-        when(nuageVspDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NuageVspDeviceVO[] {nuageVspDevice}));\n-        when(hostDao.findById(NETWORK_ID)).thenReturn(host);\n+        when(_nuageVspDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NuageVspDeviceVO[]{nuageVspDevice}));\n+        when(_hostDao.findById(NETWORK_ID)).thenReturn(host);\n \n-        when(firewallRulesDao.listByNetworkPurposeTrafficType(NETWORK_ID, FirewallRule.Purpose.Firewall, FirewallRule.TrafficType.Ingress)).thenReturn(new ArrayList<FirewallRuleVO>());\n-        when(firewallRulesDao.listByNetworkPurposeTrafficType(NETWORK_ID, FirewallRule.Purpose.Firewall, FirewallRule.TrafficType.Egress)).thenReturn(new ArrayList<FirewallRuleVO>());\n-        when(ipAddressDao.listStaticNatPublicIps(NETWORK_ID)).thenReturn(new ArrayList<IPAddressVO>());\n-        when(nuageVspManager.getDnsDetails(network)).thenReturn(new ArrayList<String>());\n+        when(_firewallRulesDao.listByNetworkPurposeTrafficType(NETWORK_ID, FirewallRule.Purpose.Firewall, FirewallRule.TrafficType.Ingress)).thenReturn(new ArrayList<FirewallRuleVO>());\n+        when(_firewallRulesDao.listByNetworkPurposeTrafficType(NETWORK_ID, FirewallRule.Purpose.Firewall, FirewallRule.TrafficType.Egress)).thenReturn(new ArrayList<FirewallRuleVO>());\n+        when(_ipAddressDao.listStaticNatPublicIps(NETWORK_ID)).thenReturn(new ArrayList<IPAddressVO>());\n+        when(_nuageVspManager.getDnsDetails(network)).thenReturn(new ArrayList<String>());\n \n-        assertTrue(element.implement(network, offering, deployDest, context));\n+        assertTrue(_nuageVspElement.implement(network, offering, deployDest, context));\n     }\n \n     @Test\n@@ -224,14 +214,14 @@ public void testVerifyServiceCombination() {\n         services.add(Service.SourceNat);\n         services.add(Service.Connectivity);\n         services.add(Service.Firewall);\n-        assertTrue(element.verifyServicesCombination(services));\n+        assertTrue(_nuageVspElement.verifyServicesCombination(services));\n \n         services = new HashSet<Service>();\n         services.add(Service.Dhcp);\n         services.add(Service.StaticNat);\n         services.add(Service.Connectivity);\n         services.add(Service.Firewall);\n-        assertFalse(element.verifyServicesCombination(services));\n+        assertFalse(_nuageVspElement.verifyServicesCombination(services));\n     }\n \n     @Test\n@@ -244,25 +234,24 @@ public void testApplyStaticNats() throws CloudException {\n         when(network.getDomainId()).thenReturn(NETWORK_ID);\n \n         final DomainVO domVo = mock(DomainVO.class);\n-        when(domainDao.findById(41l)).thenReturn(domVo);\n+        when(_domainDao.findById(41l)).thenReturn(domVo);\n \n         final NetworkOfferingVO ntwkoffer = mock(NetworkOfferingVO.class);\n         when(ntwkoffer.getId()).thenReturn(NETWORK_ID);\n-        when(ntwkOfferingDao.findById(NETWORK_ID)).thenReturn(ntwkoffer);\n-        when(element.isL3Network(NETWORK_ID)).thenReturn(true);\n+        when(_networkOfferingDao.findById(NETWORK_ID)).thenReturn(ntwkoffer);\n \n         final HostVO host = mock(HostVO.class);\n         when(host.getId()).thenReturn(NETWORK_ID);\n         final NuageVspDeviceVO nuageVspDevice = mock(NuageVspDeviceVO.class);\n         when(nuageVspDevice.getHostId()).thenReturn(NETWORK_ID);\n-        when(nuageVspDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NuageVspDeviceVO[] {nuageVspDevice}));\n-        when(hostDao.findById(NETWORK_ID)).thenReturn(host);\n+        when(_nuageVspDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NuageVspDeviceVO[]{nuageVspDevice}));\n+        when(_hostDao.findById(NETWORK_ID)).thenReturn(host);\n \n-        when(domainDao.findById(NETWORK_ID)).thenReturn(mock(DomainVO.class));\n+        when(_domainDao.findById(NETWORK_ID)).thenReturn(mock(DomainVO.class));\n         final Answer answer = mock(Answer.class);\n         when(answer.getResult()).thenReturn(true);\n-        when(agentManager.easySend(eq(NETWORK_ID), (Command)any())).thenReturn(answer);\n-        assertTrue(element.applyStaticNats(network, new ArrayList<StaticNat>()));\n+        when(_agentManager.easySend(eq(NETWORK_ID), (Command)any())).thenReturn(answer);\n+        assertTrue(_nuageVspElement.applyStaticNats(network, new ArrayList<StaticNat>()));\n     }\n \n     @Test\n@@ -277,21 +266,21 @@ public void testApplyFWRules() throws Exception {\n         final NetworkOfferingVO ntwkoffer = mock(NetworkOfferingVO.class);\n         when(ntwkoffer.getId()).thenReturn(NETWORK_ID);\n         when(ntwkoffer.getEgressDefaultPolicy()).thenReturn(true);\n-        when(ntwkOfferingDao.findById(NETWORK_ID)).thenReturn(ntwkoffer);\n+        when(_networkOfferingDao.findById(NETWORK_ID)).thenReturn(ntwkoffer);\n \n         final HostVO host = mock(HostVO.class);\n         when(host.getId()).thenReturn(NETWORK_ID);\n         final NuageVspDeviceVO nuageVspDevice = mock(NuageVspDeviceVO.class);\n         when(nuageVspDevice.getHostId()).thenReturn(NETWORK_ID);\n-        when(nuageVspDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NuageVspDeviceVO[] {nuageVspDevice}));\n-        when(hostDao.findById(NETWORK_ID)).thenReturn(host);\n+        when(_nuageVspDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NuageVspDeviceVO[]{nuageVspDevice}));\n+        when(_hostDao.findById(NETWORK_ID)).thenReturn(host);\n \n-        when(domainDao.findById(NETWORK_ID)).thenReturn(mock(DomainVO.class));\n+        when(_domainDao.findById(NETWORK_ID)).thenReturn(mock(DomainVO.class));\n \n         final Answer answer = mock(Answer.class);\n         when(answer.getResult()).thenReturn(true);\n-        when(agentManager.easySend(eq(NETWORK_ID), (Command)any())).thenReturn(answer);\n-        assertTrue(element.applyFWRules(network, new ArrayList<FirewallRule>()));\n+        when(_agentManager.easySend(eq(NETWORK_ID), (Command)any())).thenReturn(answer);\n+        assertTrue(_nuageVspElement.applyFWRules(network, new ArrayList<FirewallRule>()));\n     }\n \n     @Test\n@@ -306,20 +295,20 @@ public void testApplyNetworkACL() throws Exception {\n         final NetworkOfferingVO ntwkoffer = mock(NetworkOfferingVO.class);\n         when(ntwkoffer.getId()).thenReturn(NETWORK_ID);\n         when(ntwkoffer.getEgressDefaultPolicy()).thenReturn(true);\n-        when(ntwkOfferingDao.findById(NETWORK_ID)).thenReturn(ntwkoffer);\n+        when(_networkOfferingDao.findById(NETWORK_ID)).thenReturn(ntwkoffer);\n \n         final HostVO host = mock(HostVO.class);\n         when(host.getId()).thenReturn(NETWORK_ID);\n         final NuageVspDeviceVO nuageVspDevice = mock(NuageVspDeviceVO.class);\n         when(nuageVspDevice.getHostId()).thenReturn(NETWORK_ID);\n-        when(nuageVspDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NuageVspDeviceVO[] {nuageVspDevice}));\n-        when(hostDao.findById(NETWORK_ID)).thenReturn(host);\n+        when(_nuageVspDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NuageVspDeviceVO[]{nuageVspDevice}));\n+        when(_hostDao.findById(NETWORK_ID)).thenReturn(host);\n \n-        when(domainDao.findById(NETWORK_ID)).thenReturn(mock(DomainVO.class));\n+        when(_domainDao.findById(NETWORK_ID)).thenReturn(mock(DomainVO.class));\n         final Answer answer = mock(Answer.class);\n         when(answer.getResult()).thenReturn(true);\n-        when(agentManager.easySend(eq(NETWORK_ID), (Command)any())).thenReturn(answer);\n-        assertTrue(element.applyNetworkACLs(network, new ArrayList<NetworkACLItem>()));\n+        when(_agentManager.easySend(eq(NETWORK_ID), (Command)any())).thenReturn(answer);\n+        assertTrue(_nuageVspElement.applyNetworkACLs(network, new ArrayList<NetworkACLItem>()));\n     }\n \n     @Test\n@@ -329,10 +318,11 @@ public void testShutdownVpc() throws Exception {\n         when(vpc.getState()).thenReturn(Vpc.State.Inactive);\n         when(vpc.getDomainId()).thenReturn(NETWORK_ID);\n         when(vpc.getZoneId()).thenReturn(NETWORK_ID);\n+        when(vpc.getId()).thenReturn(NETWORK_ID);\n \n         final DomainVO dom = mock(DomainVO.class);\n         when(dom.getName()).thenReturn(\"domain\");\n-        when(domainDao.findById(NETWORK_ID)).thenReturn(dom);\n+        when(_domainDao.findById(NETWORK_ID)).thenReturn(dom);\n         final Account acc = mock(Account.class);\n         when(acc.getAccountName()).thenReturn(\"accountname\");\n         final ReservationContext context = mock(ReservationContext.class);\n@@ -342,18 +332,22 @@ public void testShutdownVpc() throws Exception {\n         PhysicalNetworkVO physNet = mock(PhysicalNetworkVO.class);\n         when(physNet.getIsolationMethods()).thenReturn(Lists.newArrayList(PhysicalNetwork.IsolationMethod.VSP.name()));\n         when(physNet.getId()).thenReturn(NETWORK_ID);\n-        when(physNetDao.listByZone(NETWORK_ID)).thenReturn(Lists.newArrayList(physNet));\n+        when(_physicalNetworkDao.listByZone(NETWORK_ID)).thenReturn(Lists.newArrayList(physNet));\n \n         final HostVO host = mock(HostVO.class);\n         when(host.getId()).thenReturn(NETWORK_ID);\n         final NuageVspDeviceVO nuageVspDevice = mock(NuageVspDeviceVO.class);\n         when(nuageVspDevice.getHostId()).thenReturn(NETWORK_ID);\n-        when(nuageVspDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NuageVspDeviceVO[] {nuageVspDevice}));\n-        when(hostDao.findById(NETWORK_ID)).thenReturn(host);\n+        when(_nuageVspDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Lists.newArrayList(nuageVspDevice));\n+        when(_hostDao.findById(NETWORK_ID)).thenReturn(host);\n+\n+        DomainRouterVO domainRouter = mock(DomainRouterVO.class);\n+        when(domainRouter.getUuid()).thenReturn(\"aaaaaa\");\n+        when(_domainRouterDao.listByVpcId(NETWORK_ID)).thenReturn(Lists.newArrayList(domainRouter));\n \n         final Answer answer = mock(Answer.class);\n         when(answer.getResult()).thenReturn(true);\n-        when(agentManager.easySend(eq(NETWORK_ID), (Command)any())).thenReturn(answer);\n-        assertTrue(element.shutdownVpc(vpc, context));\n+        when(_agentManager.easySend(eq(NETWORK_ID), (Command)any())).thenReturn(answer);\n+        assertTrue(_nuageVspElement.shutdownVpc(vpc, context));\n     }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/test/com/cloud/network/element/NuageVspElementTest.java",
                "sha": "85cbb361c9ab97ff849d18fd0132e423b316cc5b",
                "status": "modified"
            },
            {
                "additions": 109,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/test/com/cloud/network/guru/NuageVspGuestNetworkGuruTest.java",
                "changes": 216,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/test/com/cloud/network/guru/NuageVspGuestNetworkGuruTest.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 107,
                "filename": "plugins/network-elements/nuage-vsp/test/com/cloud/network/guru/NuageVspGuestNetworkGuruTest.java",
                "patch": "@@ -19,6 +19,7 @@\n \n package com.cloud.network.guru;\n \n+import com.cloud.NuageTest;\n import com.cloud.agent.AgentManager;\n import com.cloud.agent.api.Answer;\n import com.cloud.agent.api.Command;\n@@ -46,6 +47,7 @@\n import com.cloud.network.NuageVspDeviceVO;\n import com.cloud.network.dao.IPAddressDao;\n import com.cloud.network.dao.NetworkDao;\n+import com.cloud.network.dao.NetworkDetailsDao;\n import com.cloud.network.dao.NetworkVO;\n import com.cloud.network.dao.NuageVspDao;\n import com.cloud.network.dao.PhysicalNetworkDao;\n@@ -64,7 +66,6 @@\n import com.cloud.vm.VirtualMachine;\n import com.cloud.vm.VirtualMachineProfile;\n import com.cloud.vm.dao.NicDao;\n-import org.apache.cloudstack.engine.orchestration.service.NetworkOrchestrationService;\n import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n import org.junit.Before;\n import org.junit.Test;\n@@ -86,60 +87,61 @@\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n-public class NuageVspGuestNetworkGuruTest {\n+public class NuageVspGuestNetworkGuruTest extends NuageTest {\n     private static final long NETWORK_ID = 42L;\n-    PhysicalNetworkDao physnetdao = mock(PhysicalNetworkDao.class);\n-    DataCenterDao dcdao = mock(DataCenterDao.class);\n-    NetworkOfferingServiceMapDao nosd = mock(NetworkOfferingServiceMapDao.class);\n-    AgentManager agentManager = mock(AgentManager.class);\n-    NetworkOrchestrationService netmgr = mock(NetworkOrchestrationService.class);\n-    NetworkModel networkModel = mock(NetworkModel.class);\n-    AccountDao accountDao = mock(AccountDao.class);\n-    DomainDao domainDao = mock(DomainDao.class);\n-    NicDao nicDao = mock(NicDao.class);\n-    NetworkOfferingDao ntwkOfferDao = mock(NetworkOfferingDao.class);\n-    NuageVspDao nuageVspDao = mock(NuageVspDao.class);\n-    HostDao hostDao = mock(HostDao.class);\n-    NetworkDao networkDao = mock(NetworkDao.class);\n-    ConfigurationDao configDao = mock(ConfigurationDao.class);\n-    IPAddressDao ipAddressDao = mock(IPAddressDao.class);\n-    NuageVspManager nuageVspManager = mock(NuageVspManager.class);\n-    ConfigurationManager configurationManager = mock(ConfigurationManager.class);\n-\n-    NetworkDao netdao = mock(NetworkDao.class);\n-    NuageVspGuestNetworkGuru guru;\n+    private PhysicalNetworkDao _physicalNetworkDao = mock(PhysicalNetworkDao.class);\n+    private DataCenterDao _dataCenterDao = mock(DataCenterDao.class);\n+    private NetworkOfferingServiceMapDao _networkOfferingServiceMapDao = mock(NetworkOfferingServiceMapDao.class);\n+    private AgentManager _agentManager = mock(AgentManager.class);\n+    private NetworkModel _networkModel = mock(NetworkModel.class);\n+    private AccountDao _accountDao = mock(AccountDao.class);\n+    private DomainDao _domainDao = mock(DomainDao.class);\n+    private NicDao _nicDao = mock(NicDao.class);\n+    private NetworkOfferingDao _networkOfferingDao = mock(NetworkOfferingDao.class);\n+    private NuageVspDao _nuageVspDao = mock(NuageVspDao.class);\n+    private HostDao _hostDao = mock(HostDao.class);\n+    private NetworkDao _networkDao = mock(NetworkDao.class);\n+    private ConfigurationDao _configurationDao = mock(ConfigurationDao.class);\n+    private IPAddressDao _ipAddressDao = mock(IPAddressDao.class);\n+    private NuageVspManager _nuageVspManager = mock(NuageVspManager.class);\n+    private ConfigurationManager _configurationManager = mock(ConfigurationManager.class);\n+    private NetworkDetailsDao _networkDetailsDao = mock(NetworkDetailsDao.class);\n+    private NuageVspGuestNetworkGuru _nuageVspGuestNetworkGuru;\n \n     @Before\n-    public void setUp() {\n-        guru = new NuageVspGuestNetworkGuru();\n-        guru._physicalNetworkDao = physnetdao;\n-        guru._physicalNetworkDao = physnetdao;\n-        guru._nuageVspDao = nuageVspDao;\n-        guru._dcDao = dcdao;\n-        guru._ntwkOfferingSrvcDao = nosd;\n-        guru._networkModel = networkModel;\n-        guru._hostDao = hostDao;\n-        guru._agentMgr = agentManager;\n-        guru._networkDao = netdao;\n-        guru._networkDao = networkDao;\n-        guru._accountDao = accountDao;\n-        guru._domainDao = domainDao;\n-        guru._nicDao = nicDao;\n-        guru._ntwkOfferingDao = ntwkOfferDao;\n-        guru._configDao = configDao;\n-        guru._ipAddressDao = ipAddressDao;\n-        guru._nuageVspManager = nuageVspManager;\n-        guru._configMgr = configurationManager;\n+    public void setUp() throws Exception {\n+        super.setUp();\n+\n+        _nuageVspGuestNetworkGuru = new NuageVspGuestNetworkGuru();\n+        _nuageVspGuestNetworkGuru._physicalNetworkDao = _physicalNetworkDao;\n+        _nuageVspGuestNetworkGuru._physicalNetworkDao = _physicalNetworkDao;\n+        _nuageVspGuestNetworkGuru._nuageVspDao = _nuageVspDao;\n+        _nuageVspGuestNetworkGuru._dcDao = _dataCenterDao;\n+        _nuageVspGuestNetworkGuru._ntwkOfferingSrvcDao = _networkOfferingServiceMapDao;\n+        _nuageVspGuestNetworkGuru._networkModel = _networkModel;\n+        _nuageVspGuestNetworkGuru._hostDao = _hostDao;\n+        _nuageVspGuestNetworkGuru._agentMgr = _agentManager;\n+        _nuageVspGuestNetworkGuru._networkDao = _networkDao;\n+        _nuageVspGuestNetworkGuru._accountDao = _accountDao;\n+        _nuageVspGuestNetworkGuru._domainDao = _domainDao;\n+        _nuageVspGuestNetworkGuru._nicDao = _nicDao;\n+        _nuageVspGuestNetworkGuru._ntwkOfferingDao = _networkOfferingDao;\n+        _nuageVspGuestNetworkGuru._configDao = _configurationDao;\n+        _nuageVspGuestNetworkGuru._ipAddressDao = _ipAddressDao;\n+        _nuageVspGuestNetworkGuru._nuageVspManager = _nuageVspManager;\n+        _nuageVspGuestNetworkGuru._configMgr = _configurationManager;\n+        _nuageVspGuestNetworkGuru._nuageVspEntityBuilder = _nuageVspEntityBuilder;\n+        _nuageVspGuestNetworkGuru._networkDetailsDao = _networkDetailsDao;\n \n         final DataCenterVO dc = mock(DataCenterVO.class);\n         when(dc.getNetworkType()).thenReturn(NetworkType.Advanced);\n         when(dc.getGuestNetworkCidr()).thenReturn(\"10.1.1.1/24\");\n \n-        when(dcdao.findById((Long)any())).thenReturn(dc);\n+        when(_dataCenterDao.findById((Long)any())).thenReturn(dc);\n \n-        when(configDao.getValue(NuageVspIsolatedNetworkDomainTemplateName.key())).thenReturn(\"IsolatedDomainTemplate\");\n-        when(configDao.getValue(NuageVspVpcDomainTemplateName.key())).thenReturn(\"VpcDomainTemplate\");\n-        when(configDao.getValue(NuageVspSharedNetworkDomainTemplateName.key())).thenReturn(\"SharedDomainTemplate\");\n+        when(_configurationDao.getValue(NuageVspIsolatedNetworkDomainTemplateName.key())).thenReturn(\"IsolatedDomainTemplate\");\n+        when(_configurationDao.getValue(NuageVspVpcDomainTemplateName.key())).thenReturn(\"VpcDomainTemplate\");\n+        when(_configurationDao.getValue(NuageVspSharedNetworkDomainTemplateName.key())).thenReturn(\"SharedDomainTemplate\");\n     }\n \n     @Test\n@@ -149,80 +151,80 @@ public void testCanHandle() {\n         when(offering.getTrafficType()).thenReturn(TrafficType.Guest);\n         when(offering.getGuestType()).thenReturn(GuestType.Isolated);\n         when(offering.getIsPersistent()).thenReturn(false);\n-        when(configurationManager.isOfferingForVpc(any(NetworkOffering.class))).thenReturn(false);\n+        when(_configurationManager.isOfferingForVpc(any(NetworkOffering.class))).thenReturn(false);\n \n         final PhysicalNetworkVO physnet = mock(PhysicalNetworkVO.class);\n         when(physnet.getIsolationMethods()).thenReturn(Arrays.asList(new String[] {\"VSP\"}));\n         when(physnet.getId()).thenReturn(NETWORK_ID);\n \n-        when(nosd.areServicesSupportedByNetworkOffering(NETWORK_ID, Service.Connectivity)).thenReturn(true);\n+        when(_networkOfferingServiceMapDao.areServicesSupportedByNetworkOffering(NETWORK_ID, Service.Connectivity)).thenReturn(true);\n \n-        assertTrue(guru.canHandle(offering, NetworkType.Advanced, physnet));\n+        assertTrue(_nuageVspGuestNetworkGuru.canHandle(offering, NetworkType.Advanced, physnet) == true);\n \n         // Not supported TrafficType != Guest\n         when(offering.getTrafficType()).thenReturn(TrafficType.Management);\n-        assertFalse(guru.canHandle(offering, NetworkType.Advanced, physnet));\n+        assertFalse(_nuageVspGuestNetworkGuru.canHandle(offering, NetworkType.Advanced, physnet) == true);\n \n         // Supported: GuestType Shared\n         when(offering.getTrafficType()).thenReturn(TrafficType.Guest);\n         when(offering.getGuestType()).thenReturn(GuestType.Shared);\n-        assertTrue(guru.canHandle(offering, NetworkType.Advanced, physnet));\n+        assertTrue(_nuageVspGuestNetworkGuru.canHandle(offering, NetworkType.Advanced, physnet) == true);\n \n         // Not supported: Basic networking\n         when(offering.getGuestType()).thenReturn(GuestType.Isolated);\n-        assertFalse(guru.canHandle(offering, NetworkType.Basic, physnet));\n+        assertFalse(_nuageVspGuestNetworkGuru.canHandle(offering, NetworkType.Basic, physnet) == true);\n \n         // Not supported: IsolationMethod != STT\n         when(physnet.getIsolationMethods()).thenReturn(Arrays.asList(new String[] {\"VLAN\"}));\n-        assertFalse(guru.canHandle(offering, NetworkType.Advanced, physnet));\n+        assertFalse(_nuageVspGuestNetworkGuru.canHandle(offering, NetworkType.Advanced, physnet) == true);\n \n         // Not supported: Non-persistent VPC tier\n-        when(configurationManager.isOfferingForVpc(any(NetworkOffering.class))).thenReturn(true);\n-        assertFalse(guru.canHandle(offering, NetworkType.Advanced, physnet));\n+        when(_configurationManager.isOfferingForVpc(any(NetworkOffering.class))).thenReturn(true);\n+        assertFalse(_nuageVspGuestNetworkGuru.canHandle(offering, NetworkType.Advanced, physnet));\n     }\n \n     @Test\n     public void testDesign() {\n         final PhysicalNetworkVO physnet = mock(PhysicalNetworkVO.class);\n-        when(physnetdao.findById((Long)any())).thenReturn(physnet);\n+        when(_physicalNetworkDao.findById((Long)any())).thenReturn(physnet);\n         when(physnet.getIsolationMethods()).thenReturn(Arrays.asList(new String[] {\"VSP\"}));\n         when(physnet.getId()).thenReturn(NETWORK_ID);\n \n         final NuageVspDeviceVO device = mock(NuageVspDeviceVO.class);\n-        when(nuageVspDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NuageVspDeviceVO[] {device}));\n+        when(_nuageVspDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NuageVspDeviceVO[]{device}));\n         when(device.getId()).thenReturn(1L);\n \n         final NetworkOffering offering = mock(NetworkOffering.class);\n         when(offering.getId()).thenReturn(NETWORK_ID);\n         when(offering.getTrafficType()).thenReturn(TrafficType.Guest);\n         when(offering.getGuestType()).thenReturn(GuestType.Isolated);\n         when(offering.getIsPersistent()).thenReturn(false);\n-        when(configurationManager.isOfferingForVpc(any(NetworkOffering.class))).thenReturn(false);\n+        when(_configurationManager.isOfferingForVpc(any(NetworkOffering.class))).thenReturn(false);\n \n-        when(nosd.areServicesSupportedByNetworkOffering(NETWORK_ID, Service.Connectivity)).thenReturn(true);\n+        when(_networkOfferingServiceMapDao.areServicesSupportedByNetworkOffering(NETWORK_ID, Service.Connectivity)).thenReturn(true);\n \n         final DeploymentPlan plan = mock(DeploymentPlan.class);\n         final Network network = mock(Network.class);\n         final Account account = mock(Account.class);\n \n-        final Network designednetwork = guru.design(offering, plan, network, account);\n+        final Network designednetwork = _nuageVspGuestNetworkGuru.design(offering, plan, network, account);\n         assertTrue(designednetwork != null);\n         assertTrue(designednetwork.getBroadcastDomainType() == BroadcastDomainType.Vsp);\n \n         // Can't design non-persistent VPC tier\n-        when(configurationManager.isOfferingForVpc(any(NetworkOffering.class))).thenReturn(true);\n-        assertNull(guru.design(offering, plan, network, account));\n+        when(_configurationManager.isOfferingForVpc(any(NetworkOffering.class))).thenReturn(true);\n+        assertNull(_nuageVspGuestNetworkGuru.design(offering, plan, network, account));\n     }\n \n     @Test\n     public void testDesignNoElementOnPhysicalNetwork() {\n         final PhysicalNetworkVO physnet = mock(PhysicalNetworkVO.class);\n-        when(physnetdao.findById((Long)any())).thenReturn(physnet);\n+        when(_physicalNetworkDao.findById((Long)any())).thenReturn(physnet);\n         when(physnet.getIsolationMethods()).thenReturn(Arrays.asList(new String[] {\"STT\"}));\n         when(physnet.getId()).thenReturn(NETWORK_ID);\n \n         mock(NuageVspDeviceVO.class);\n-        when(nuageVspDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Collections.<NuageVspDeviceVO> emptyList());\n+        when(_nuageVspDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Collections.<NuageVspDeviceVO>emptyList());\n \n         final NetworkOffering offering = mock(NetworkOffering.class);\n         when(offering.getId()).thenReturn(NETWORK_ID);\n@@ -233,19 +235,19 @@ public void testDesignNoElementOnPhysicalNetwork() {\n         final Network network = mock(Network.class);\n         final Account account = mock(Account.class);\n \n-        final Network designednetwork = guru.design(offering, plan, network, account);\n+        final Network designednetwork = _nuageVspGuestNetworkGuru.design(offering, plan, network, account);\n         assertTrue(designednetwork == null);\n     }\n \n     @Test\n     public void testDesignNoIsolationMethodVSP() {\n         final PhysicalNetworkVO physnet = mock(PhysicalNetworkVO.class);\n-        when(physnetdao.findById((Long)any())).thenReturn(physnet);\n+        when(_physicalNetworkDao.findById((Long)any())).thenReturn(physnet);\n         when(physnet.getIsolationMethods()).thenReturn(Arrays.asList(new String[] {\"VLAN\"}));\n         when(physnet.getId()).thenReturn(NETWORK_ID);\n \n         mock(NuageVspDeviceVO.class);\n-        when(nuageVspDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Collections.<NuageVspDeviceVO> emptyList());\n+        when(_nuageVspDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Collections.<NuageVspDeviceVO>emptyList());\n \n         final NetworkOffering offering = mock(NetworkOffering.class);\n         when(offering.getId()).thenReturn(NETWORK_ID);\n@@ -256,7 +258,7 @@ public void testDesignNoIsolationMethodVSP() {\n         final Network network = mock(Network.class);\n         final Account account = mock(Account.class);\n \n-        final Network designednetwork = guru.design(offering, plan, network, account);\n+        final Network designednetwork = _nuageVspGuestNetworkGuru.design(offering, plan, network, account);\n         assertTrue(designednetwork == null);\n     }\n \n@@ -274,20 +276,20 @@ public void testReserve() throws InsufficientVirtualNetworkCapacityException, In\n         when(network.getBroadcastUri()).thenReturn(new URI(\"vsp://aaaaaa-aavvv/10.1.1.1\"));\n \n         final DataCenterVO dataCenter = mock(DataCenterVO.class);\n-        when(dcdao.findById(NETWORK_ID)).thenReturn(dataCenter);\n+        when(_dataCenterDao.findById(NETWORK_ID)).thenReturn(dataCenter);\n         final AccountVO networksAccount = mock(AccountVO.class);\n         when(networksAccount.getUuid()).thenReturn(\"aaaa-abbbb\");\n         when(networksAccount.getType()).thenReturn(Account.ACCOUNT_TYPE_NORMAL);\n-        when(accountDao.findById(NETWORK_ID)).thenReturn(networksAccount);\n+        when(_accountDao.findById(NETWORK_ID)).thenReturn(networksAccount);\n         final DomainVO networksDomain = mock(DomainVO.class);\n         when(networksDomain.getUuid()).thenReturn(\"aaaaa-bbbbb\");\n-        when(domainDao.findById(NETWORK_ID)).thenReturn(networksDomain);\n+        when(_domainDao.findById(NETWORK_ID)).thenReturn(networksDomain);\n \n         final NicVO nicvo = mock(NicVO.class);\n         when(nicvo.getId()).thenReturn(NETWORK_ID);\n         when(nicvo.getMacAddress()).thenReturn(\"aa-aa-aa-aa-aa-aa\");\n         when(nicvo.getUuid()).thenReturn(\"aaaa-fffff\");\n-        when(nicDao.findById(NETWORK_ID)).thenReturn(nicvo);\n+        when(_nicDao.findById(NETWORK_ID)).thenReturn(nicvo);\n \n         final VirtualMachine vm = mock(VirtualMachine.class);\n         when(vm.getId()).thenReturn(NETWORK_ID);\n@@ -306,24 +308,24 @@ public void testReserve() throws InsufficientVirtualNetworkCapacityException, In\n \n         final NetworkOfferingVO ntwkoffering = mock(NetworkOfferingVO.class);\n         when(ntwkoffering.getId()).thenReturn(NETWORK_ID);\n-        when(ntwkOfferDao.findById(NETWORK_ID)).thenReturn(ntwkoffering);\n+        when(_networkOfferingDao.findById(NETWORK_ID)).thenReturn(ntwkoffering);\n \n         final HostVO host = mock(HostVO.class);\n         when(host.getId()).thenReturn(NETWORK_ID);\n         final NuageVspDeviceVO nuageVspDevice = mock(NuageVspDeviceVO.class);\n         when(nuageVspDevice.getHostId()).thenReturn(NETWORK_ID);\n-        when(nuageVspDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NuageVspDeviceVO[] {nuageVspDevice}));\n-        when(hostDao.findById(NETWORK_ID)).thenReturn(host);\n+        when(_nuageVspDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NuageVspDeviceVO[]{nuageVspDevice}));\n+        when(_hostDao.findById(NETWORK_ID)).thenReturn(host);\n \n-        when(networkDao.acquireInLockTable(NETWORK_ID, 1200)).thenReturn(network);\n-        when(ipAddressDao.findByVmIdAndNetworkId(NETWORK_ID, NETWORK_ID)).thenReturn(null);\n-        when(domainDao.findById(NETWORK_ID)).thenReturn(mock(DomainVO.class));\n+        when(_networkDao.acquireInLockTable(NETWORK_ID, 1200)).thenReturn(network);\n+        when(_ipAddressDao.findByVmIdAndNetworkId(NETWORK_ID, NETWORK_ID)).thenReturn(null);\n+        when(_domainDao.findById(NETWORK_ID)).thenReturn(mock(DomainVO.class));\n \n         final Answer answer = mock(Answer.class);\n         when(answer.getResult()).thenReturn(true);\n-        when(agentManager.easySend(eq(NETWORK_ID), (Command)any())).thenReturn(answer);\n+        when(_agentManager.easySend(eq(NETWORK_ID), (Command)any())).thenReturn(answer);\n \n-        guru.reserve(nicProfile, network, vmProfile, mock(DeployDestination.class), mock(ReservationContext.class));\n+        _nuageVspGuestNetworkGuru.reserve(nicProfile, network, vmProfile, mock(DeployDestination.class), mock(ReservationContext.class));\n     }\n \n     @Test\n@@ -352,7 +354,7 @@ public void testImplementNetwork() throws URISyntaxException, InsufficientVirtua\n         when(offering.getTags()).thenReturn(\"aaaa\");\n         when(offering.getEgressDefaultPolicy()).thenReturn(true);\n \n-        when(networkModel.findPhysicalNetworkId(NETWORK_ID, \"aaa\", TrafficType.Guest)).thenReturn(NETWORK_ID);\n+        when(_networkModel.findPhysicalNetworkId(NETWORK_ID, \"aaa\", TrafficType.Guest)).thenReturn(NETWORK_ID);\n \n         final ReservationContext reserveContext = mock(ReservationContext.class);\n         final Domain domain = mock(Domain.class);\n@@ -362,29 +364,29 @@ public void testImplementNetwork() throws URISyntaxException, InsufficientVirtua\n         when(account.getAccountId()).thenReturn(NETWORK_ID);\n         when(reserveContext.getAccount()).thenReturn(account);\n         final DomainVO domainVo = mock(DomainVO.class);\n-        when(domainDao.findById(NETWORK_ID)).thenReturn(domainVo);\n+        when(_domainDao.findById(NETWORK_ID)).thenReturn(domainVo);\n         final AccountVO accountVo = mock(AccountVO.class);\n-        when(accountDao.findById(NETWORK_ID)).thenReturn(accountVo);\n+        when(_accountDao.findById(NETWORK_ID)).thenReturn(accountVo);\n \n         final HostVO host = mock(HostVO.class);\n         when(host.getId()).thenReturn(NETWORK_ID);\n         final NuageVspDeviceVO nuageVspDevice = mock(NuageVspDeviceVO.class);\n         when(nuageVspDevice.getHostId()).thenReturn(NETWORK_ID);\n-        when(nuageVspDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NuageVspDeviceVO[] {nuageVspDevice}));\n-        when(hostDao.findById(NETWORK_ID)).thenReturn(host);\n-        when(networkDao.acquireInLockTable(NETWORK_ID, 1200)).thenReturn(network);\n-        when(nuageVspManager.getDnsDetails(network)).thenReturn(new ArrayList<String>());\n-        when(nuageVspManager.getGatewaySystemIds()).thenReturn(new ArrayList<String>());\n+        when(_nuageVspDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NuageVspDeviceVO[]{nuageVspDevice}));\n+        when(_hostDao.findById(NETWORK_ID)).thenReturn(host);\n+        when(_networkDao.acquireInLockTable(NETWORK_ID, 1200)).thenReturn(network);\n+        when(_nuageVspManager.getDnsDetails(network)).thenReturn(new ArrayList<String>());\n+        when(_nuageVspManager.getGatewaySystemIds()).thenReturn(new ArrayList<String>());\n \n         final Answer answer = mock(Answer.class);\n         when(answer.getResult()).thenReturn(true);\n-        when(agentManager.easySend(eq(NETWORK_ID), (Command)any())).thenReturn(answer);\n+        when(_agentManager.easySend(eq(NETWORK_ID), (Command)any())).thenReturn(answer);\n \n         final DataCenter dc = mock(DataCenter.class);\n         when(dc.getId()).thenReturn(NETWORK_ID);\n         final DeployDestination deployDest = mock(DeployDestination.class);\n         when(deployDest.getDataCenter()).thenReturn(dc);\n-        guru.implement(network, offering, deployDest, reserveContext);\n+        _nuageVspGuestNetworkGuru.implement(network, offering, deployDest, reserveContext);\n     }\n \n     @Test\n@@ -396,22 +398,22 @@ public void testDeallocate() throws Exception {\n         when(network.getPhysicalNetworkId()).thenReturn(NETWORK_ID);\n         when(network.getVpcId()).thenReturn(null);\n         when(network.getDomainId()).thenReturn(NETWORK_ID);\n-        when(networkDao.acquireInLockTable(NETWORK_ID, 1200)).thenReturn(network);\n+        when(_networkDao.acquireInLockTable(NETWORK_ID, 1200)).thenReturn(network);\n \n         final NetworkOfferingVO offering = mock(NetworkOfferingVO.class);\n         when(offering.getId()).thenReturn(NETWORK_ID);\n         when(offering.getTrafficType()).thenReturn(TrafficType.Guest);\n-        when(ntwkOfferDao.findById(NETWORK_ID)).thenReturn(offering);\n+        when(_networkOfferingDao.findById(NETWORK_ID)).thenReturn(offering);\n \n         final DomainVO domain = mock(DomainVO.class);\n         when(domain.getUuid()).thenReturn(\"aaaaaa\");\n-        when(domainDao.findById(NETWORK_ID)).thenReturn(domain);\n+        when(_domainDao.findById(NETWORK_ID)).thenReturn(domain);\n \n         final NicVO nic = mock(NicVO.class);\n         when(nic.getId()).thenReturn(NETWORK_ID);\n         when(nic.getIPv4Address()).thenReturn(\"10.10.10.10\");\n         when(nic.getMacAddress()).thenReturn(\"c8:60:00:56:e5:58\");\n-        when(nicDao.findById(NETWORK_ID)).thenReturn(nic);\n+        when(_nicDao.findById(NETWORK_ID)).thenReturn(nic);\n \n         final NicProfile nicProfile = mock(NicProfile.class);\n         when(nicProfile.getId()).thenReturn(NETWORK_ID);\n@@ -431,14 +433,14 @@ public void testDeallocate() throws Exception {\n         when(host.getId()).thenReturn(NETWORK_ID);\n         final NuageVspDeviceVO nuageVspDevice = mock(NuageVspDeviceVO.class);\n         when(nuageVspDevice.getHostId()).thenReturn(NETWORK_ID);\n-        when(nuageVspDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NuageVspDeviceVO[] {nuageVspDevice}));\n-        when(hostDao.findById(NETWORK_ID)).thenReturn(host);\n+        when(_nuageVspDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NuageVspDeviceVO[]{nuageVspDevice}));\n+        when(_hostDao.findById(NETWORK_ID)).thenReturn(host);\n \n         final Answer answer = mock(Answer.class);\n         when(answer.getResult()).thenReturn(true);\n-        when(agentManager.easySend(eq(NETWORK_ID), (Command)any())).thenReturn(answer);\n+        when(_agentManager.easySend(eq(NETWORK_ID), (Command)any())).thenReturn(answer);\n \n-        guru.deallocate(network, nicProfile, vmProfile);\n+        _nuageVspGuestNetworkGuru.deallocate(network, nicProfile, vmProfile);\n     }\n \n     @Test\n@@ -451,31 +453,31 @@ public void testTrash() throws Exception {\n         when(network.getNetworkOfferingId()).thenReturn(NETWORK_ID);\n         when(network.getPhysicalNetworkId()).thenReturn(NETWORK_ID);\n         when(network.getVpcId()).thenReturn(null);\n-        when(networkDao.acquireInLockTable(NETWORK_ID, 1200)).thenReturn(network);\n+        when(_networkDao.acquireInLockTable(NETWORK_ID, 1200)).thenReturn(network);\n \n         final NetworkOfferingVO offering = mock(NetworkOfferingVO.class);\n         when(offering.getId()).thenReturn(NETWORK_ID);\n         when(offering.getTrafficType()).thenReturn(TrafficType.Guest);\n-        when(ntwkOfferDao.findById(NETWORK_ID)).thenReturn(offering);\n+        when(_networkOfferingDao.findById(NETWORK_ID)).thenReturn(offering);\n \n         final DomainVO domain = mock(DomainVO.class);\n         when(domain.getUuid()).thenReturn(\"aaaaaa\");\n-        when(domainDao.findById(NETWORK_ID)).thenReturn(domain);\n+        when(_domainDao.findById(NETWORK_ID)).thenReturn(domain);\n \n         final HostVO host = mock(HostVO.class);\n         when(host.getId()).thenReturn(NETWORK_ID);\n         final NuageVspDeviceVO nuageVspDevice = mock(NuageVspDeviceVO.class);\n         when(nuageVspDevice.getHostId()).thenReturn(NETWORK_ID);\n-        when(nuageVspDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NuageVspDeviceVO[] {nuageVspDevice}));\n-        when(hostDao.findById(NETWORK_ID)).thenReturn(host);\n-        when(nuageVspManager.getDnsDetails(network)).thenReturn(new ArrayList<String>());\n-        when(nuageVspManager.getGatewaySystemIds()).thenReturn(new ArrayList<String>());\n+        when(_nuageVspDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NuageVspDeviceVO[]{nuageVspDevice}));\n+        when(_hostDao.findById(NETWORK_ID)).thenReturn(host);\n+        when(_nuageVspManager.getDnsDetails(network)).thenReturn(new ArrayList<String>());\n+        when(_nuageVspManager.getGatewaySystemIds()).thenReturn(new ArrayList<String>());\n \n         final Answer answer = mock(Answer.class);\n         when(answer.getResult()).thenReturn(true);\n-        when(agentManager.easySend(eq(NETWORK_ID), (Command)any())).thenReturn(answer);\n+        when(_agentManager.easySend(eq(NETWORK_ID), (Command)any())).thenReturn(answer);\n \n-        assertTrue(guru.trash(network, offering));\n+        assertTrue(_nuageVspGuestNetworkGuru.trash(network, offering));\n     }\n \n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/test/com/cloud/network/guru/NuageVspGuestNetworkGuruTest.java",
                "sha": "f101e1e1a27439bc0524201d71ff8da98be54a45",
                "status": "modified"
            },
            {
                "additions": 39,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/test/com/cloud/network/manager/NuageVspManagerTest.java",
                "changes": 73,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/test/com/cloud/network/manager/NuageVspManagerTest.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 34,
                "filename": "plugins/network-elements/nuage-vsp/test/com/cloud/network/manager/NuageVspManagerTest.java",
                "patch": "@@ -19,6 +19,7 @@\n \n package com.cloud.network.manager;\n \n+import com.cloud.NuageTest;\n import com.cloud.agent.AgentManager;\n import com.cloud.agent.api.Command;\n import com.cloud.agent.api.sync.SyncNuageVspCmsIdAnswer;\n@@ -35,6 +36,7 @@\n import com.cloud.network.dao.PhysicalNetworkServiceProviderDao;\n import com.cloud.network.dao.PhysicalNetworkVO;\n import com.cloud.resource.ResourceManager;\n+import com.cloud.util.NuageVspEntityBuilder;\n import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n import org.apache.cloudstack.framework.config.impl.ConfigurationVO;\n import org.junit.Before;\n@@ -48,34 +50,37 @@\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n-public class NuageVspManagerTest {\n+public class NuageVspManagerTest extends NuageTest {\n     private static final long NETWORK_ID = 42L;\n \n-    PhysicalNetworkDao physicalNetworkDao = mock(PhysicalNetworkDao.class);\n-    PhysicalNetworkServiceProviderDao physicalNetworkServiceProviderDao = mock(PhysicalNetworkServiceProviderDao.class);\n-    ResourceManager resourceMgr = mock(ResourceManager.class);\n-    HostDetailsDao hostDetailsDao = mock(HostDetailsDao.class);\n-    NuageVspDao nuageVspDao = mock(NuageVspDao.class);\n-    NetworkDao networkDao = mock(NetworkDao.class);\n-    HostDao hostDao = mock(HostDao.class);\n-    AgentManager agentManager = mock(AgentManager.class);\n-    ConfigurationDao configDao = mock(ConfigurationDao.class);\n-\n-    NuageVspManagerImpl manager;\n+    private PhysicalNetworkDao _physicalNetworkDao = mock(PhysicalNetworkDao.class);\n+    private PhysicalNetworkServiceProviderDao _physicalNetworkServiceProviderDao = mock(PhysicalNetworkServiceProviderDao.class);\n+    private ResourceManager _resourceManager = mock(ResourceManager.class);\n+    private HostDetailsDao _hostDetailsDao = mock(HostDetailsDao.class);\n+    private NuageVspDao _nuageVspDao = mock(NuageVspDao.class);\n+    private NetworkDao _networkDao = mock(NetworkDao.class);\n+    private HostDao _hostDao = mock(HostDao.class);\n+    private AgentManager _agentManager = mock(AgentManager.class);\n+    private ConfigurationDao _configurationDao = mock(ConfigurationDao.class);\n+    private NuageVspEntityBuilder _nuageVspEntityBuilder = mock(NuageVspEntityBuilder.class);\n+    private NuageVspManagerImpl _nuageVspManager;\n \n     @Before\n-    public void setUp() {\n-        manager = new NuageVspManagerImpl();\n-\n-        manager._physicalNetworkServiceProviderDao = physicalNetworkServiceProviderDao;\n-        manager._physicalNetworkDao = physicalNetworkDao;\n-        manager._resourceMgr = resourceMgr;\n-        manager._hostDetailsDao = hostDetailsDao;\n-        manager._nuageVspDao = nuageVspDao;\n-        manager._networkDao = networkDao;\n-        manager._hostDao = hostDao;\n-        manager._agentMgr = agentManager;\n-        manager._configDao = configDao;\n+    public void setUp() throws Exception {\n+        super.setUp();\n+\n+        _nuageVspManager = new NuageVspManagerImpl();\n+\n+        _nuageVspManager._physicalNetworkServiceProviderDao = _physicalNetworkServiceProviderDao;\n+        _nuageVspManager._physicalNetworkDao = _physicalNetworkDao;\n+        _nuageVspManager._resourceMgr = _resourceManager;\n+        _nuageVspManager._hostDetailsDao = _hostDetailsDao;\n+        _nuageVspManager._nuageVspDao = _nuageVspDao;\n+        _nuageVspManager._networkDao = _networkDao;\n+        _nuageVspManager._hostDao = _hostDao;\n+        _nuageVspManager._agentMgr = _agentManager;\n+        _nuageVspManager._configDao = _configurationDao;\n+        _nuageVspManager._nuageVspEntityBuilder = _nuageVspEntityBuilder;\n     }\n \n     @Test\n@@ -84,31 +89,31 @@ public void testDeleteNuageVspDevice() throws ConfigurationException {\n         final PhysicalNetworkVO physicalNetwork = mock(PhysicalNetworkVO.class);\n         when(physicalNetwork.getDataCenterId()).thenReturn(NETWORK_ID);\n         when(physicalNetwork.getId()).thenReturn(NETWORK_ID);\n-        when(physicalNetworkDao.findById(NETWORK_ID)).thenReturn(physicalNetwork);\n+        when(_physicalNetworkDao.findById(NETWORK_ID)).thenReturn(physicalNetwork);\n \n         final NuageVspDeviceVO nuageVspDevice = mock(NuageVspDeviceVO.class);\n         when(nuageVspDevice.getPhysicalNetworkId()).thenReturn(NETWORK_ID);\n         when(nuageVspDevice.getHostId()).thenReturn(NETWORK_ID);\n-        when(nuageVspDao.findById(NETWORK_ID)).thenReturn(nuageVspDevice);\n+        when(_nuageVspDao.findById(NETWORK_ID)).thenReturn(nuageVspDevice);\n \n-        when(networkDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(new ArrayList<NetworkVO>());\n+        when(_networkDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(new ArrayList<NetworkVO>());\n \n         final HostVO host = mock(HostVO.class);\n         when(host.getId()).thenReturn(NETWORK_ID);\n-        when(hostDao.findById(NETWORK_ID)).thenReturn(host);\n+        when(_hostDao.findById(NETWORK_ID)).thenReturn(host);\n \n         final DeleteNuageVspDeviceCmd cmd = mock(DeleteNuageVspDeviceCmd.class);\n         when(cmd.getNuageVspDeviceId()).thenReturn(NETWORK_ID);\n \n         ConfigurationVO cmsIdConfig = mock(ConfigurationVO.class);\n         when(cmsIdConfig.getValue()).thenReturn(\"1:1\");\n-        when(configDao.findByName(\"nuagevsp.cms.id\")).thenReturn(cmsIdConfig);\n+        when(_configurationDao.findByName(\"nuagevsp.cms.id\")).thenReturn(cmsIdConfig);\n \n         final SyncNuageVspCmsIdAnswer answer = mock(SyncNuageVspCmsIdAnswer.class);\n         when(answer.getResult()).thenReturn(true);\n-        when(agentManager.easySend(eq(NETWORK_ID), (Command)any())).thenReturn(answer);\n+        when(_agentManager.easySend(eq(NETWORK_ID), (Command)any())).thenReturn(answer);\n \n-        manager.deleteNuageVspDevice(cmd);\n+        _nuageVspManager.deleteNuageVspDevice(cmd);\n     }\n \n     @Test\n@@ -117,12 +122,12 @@ public void testListNuageVspDevices() {\n         when(nuageVspDevice.getPhysicalNetworkId()).thenReturn(NETWORK_ID);\n \n         final PhysicalNetworkVO phyNtwkVO = mock(PhysicalNetworkVO.class);\n-        when(physicalNetworkDao.findById(NETWORK_ID)).thenReturn(phyNtwkVO);\n-        when(nuageVspDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(new ArrayList<NuageVspDeviceVO>());\n+        when(_physicalNetworkDao.findById(NETWORK_ID)).thenReturn(phyNtwkVO);\n+        when(_nuageVspDao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(new ArrayList<NuageVspDeviceVO>());\n \n         final ListNuageVspDevicesCmd cmd = mock(ListNuageVspDevicesCmd.class);\n         when(cmd.getPhysicalNetworkId()).thenReturn(NETWORK_ID);\n         when(cmd.getNuageVspDeviceId()).thenReturn(null);\n-        manager.listNuageVspDevices(cmd);\n+        _nuageVspManager.listNuageVspDevices(cmd);\n     }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/test/com/cloud/network/manager/NuageVspManagerTest.java",
                "sha": "ec16a974d0811335edd8f04669baf3765007a833",
                "status": "modified"
            },
            {
                "additions": 54,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/test/com/cloud/network/resource/NuageVspResourceTest.java",
                "changes": 124,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/test/com/cloud/network/resource/NuageVspResourceTest.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 70,
                "filename": "plugins/network-elements/nuage-vsp/test/com/cloud/network/resource/NuageVspResourceTest.java",
                "patch": "@@ -19,6 +19,7 @@\n \n package com.cloud.network.resource;\n \n+import com.cloud.NuageTest;\n import com.cloud.agent.api.Answer;\n import com.cloud.agent.api.PingCommand;\n import com.cloud.agent.api.StartupCommand;\n@@ -29,34 +30,38 @@\n import com.cloud.agent.api.guru.ImplementNetworkVspCommand;\n import com.cloud.agent.api.guru.ReserveVmInterfaceVspCommand;\n import com.cloud.agent.api.guru.TrashNetworkVspCommand;\n-import com.cloud.agent.api.sync.SyncVspCommand;\n import com.cloud.host.Host;\n+import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n-import net.nuage.vsp.acs.client.NuageVspApiClient;\n-import net.nuage.vsp.acs.client.NuageVspElementClient;\n-import net.nuage.vsp.acs.client.NuageVspGuruClient;\n-import net.nuage.vsp.acs.client.NuageVspSyncClient;\n+import net.nuage.vsp.acs.client.api.NuageVspApiClient;\n+import net.nuage.vsp.acs.client.api.NuageVspElementClient;\n+import net.nuage.vsp.acs.client.api.NuageVspGuruClient;\n+import net.nuage.vsp.acs.client.api.model.VspAclRule;\n+import net.nuage.vsp.acs.client.api.model.VspNetwork;\n+import net.nuage.vsp.acs.client.api.model.VspNic;\n+import net.nuage.vsp.acs.client.api.model.VspStaticNat;\n+import net.nuage.vsp.acs.client.api.model.VspVm;\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.invocation.InvocationOnMock;\n \n import javax.naming.ConfigurationException;\n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.List;\n import java.util.Map;\n \n import static org.junit.Assert.assertTrue;\n import static org.mockito.Mockito.doAnswer;\n import static org.mockito.Mockito.mock;\n \n-public class NuageVspResourceTest {\n-    NuageVspResource _resource;\n-    NuageVspApiClient _mockNuageVspApiClient = mock(NuageVspApiClient.class);\n-    NuageVspElementClient _mockNuageVspElementClient = mock(NuageVspElementClient.class);\n-    NuageVspGuruClient _mockNuageVspGuruClient = mock(NuageVspGuruClient.class);\n-    NuageVspSyncClient _mockNuageVspSyncClient = mock(NuageVspSyncClient.class);\n-    NuageVspResource.Configuration _resourceConfiguration;\n-    Map<String, Object> _hostDetails;\n+public class NuageVspResourceTest extends NuageTest {\n+    private NuageVspResource _resource;\n+    private NuageVspApiClient _mockNuageVspApiClient = mock(NuageVspApiClient.class);\n+    private NuageVspElementClient _mockNuageVspElementClient = mock(NuageVspElementClient.class);\n+    private NuageVspGuruClient _mockNuageVspGuruClient = mock(NuageVspGuruClient.class);\n+    private NuageVspResource.Configuration _resourceConfiguration;\n+    private Map<String, Object> _hostDetails;\n \n     org.mockito.stubbing.Answer<Object> genericAnswer = new org.mockito.stubbing.Answer<Object>() {\n         public Object answer(InvocationOnMock invocation) {\n@@ -66,6 +71,8 @@ public Object answer(InvocationOnMock invocation) {\n \n     @Before\n     public void setUp() throws Exception {\n+        super.setUp();\n+\n         _resource = new NuageVspResource() {\n \n             @Override\n@@ -74,8 +81,6 @@ protected void loadNuageClient() {\n                 _nuageVspApiClient = _mockNuageVspApiClient;\n                 _nuageVspElementClient = _mockNuageVspElementClient;\n                 _nuageVspGuruClient = _mockNuageVspGuruClient;\n-                _nuageVspSyncClient = _mockNuageVspSyncClient;\n-\n             }\n \n             protected void isNuageVspApiLoaded() throws ConfigurationException {\n@@ -87,9 +92,6 @@ protected void isNuageVspGuruLoaded() throws ConfigurationException {\n             protected void isNuageVspElementLoaded() throws ConfigurationException {\n             }\n \n-            protected void isNuageVspSyncLoaded() throws ConfigurationException {\n-            }\n-\n             protected void login() throws ConfigurationException {\n             }\n \n@@ -148,100 +150,82 @@ public void testPingCommandStatus() throws Exception {\n     public void testImplementNetworkVspCommand() throws Exception {\n         _resource.configure(\"NuageVspResource\", _hostDetails);\n \n-        ImplementNetworkVspCommand.Builder cmdBuilder = new ImplementNetworkVspCommand.Builder().networkDomainName(\"networkDomainName\").networkDomainPath(\"networkDomainPath\")\n-                .networkDomainUuid(\"networkDomainUuid\").networkAccountName(\"networkAccountName\").networkAccountUuid(\"networkAccountUuid\").networkName(\"networkName\")\n-                .networkCidr(\"networkCidr\").networkGateway(\"networkGateway\").networkAclId(0L).dnsServers(new ArrayList<String>()).gatewaySystemIds(new ArrayList<String>())\n-                .networkUuid(\"networkUuid\").isL3Network(true).isVpc(true).isSharedNetwork(true).vpcName(\"vpcName\").vpcUuid(\"vpcUuid\").defaultEgressPolicy(true)\n-                .ipAddressRange(new ArrayList<String[]>()).domainTemplateName(\"domainTemplateName\");\n-        doAnswer(genericAnswer).when(_mockNuageVspGuruClient).implement(\"networkDomainName\", \"networkDomainPath\", \"networkDomainUuid\", \"networkAccountName\",\n-                \"networkAccountUuid\", \"networkName\", \"networkCidr\", \"networkGateway\", 0L, new ArrayList<String>(), new ArrayList<String>(), true, true, true, \"networkUuid\",\n-                \"vpcName\", \"vpcUuid\", true, new ArrayList<String[]>(), \"domainTemplateName\");\n-        com.cloud.agent.api.Answer implNtwkAns = _resource.executeRequest(cmdBuilder.build());\n+        VspNetwork vspNetwork = buildVspNetwork();\n+        ImplementNetworkVspCommand cmd = new ImplementNetworkVspCommand(vspNetwork, new ArrayList<String>());\n+        doAnswer(genericAnswer).when(_mockNuageVspGuruClient).implement(vspNetwork, new ArrayList<String>());\n+        com.cloud.agent.api.Answer implNtwkAns = _resource.executeRequest(cmd);\n         assertTrue(implNtwkAns.getResult());\n     }\n \n     @Test\n     public void testReserveVmInterfaceVspCommand() throws Exception {\n         _resource.configure(\"NuageVspResource\", _hostDetails);\n \n-        ReserveVmInterfaceVspCommand.Builder cmdBuilder = new ReserveVmInterfaceVspCommand.Builder().nicUuid(\"nicUuid\").nicMacAddress(\"nicMacAddress\")\n-                .networkUuid(\"networkUuid\").isL3Network(true).isSharedNetwork(true).vpcUuid(\"vpcUuid\").networkDomainUuid(\"networkDomainUuid\")\n-                .networksAccountUuid(\"networksAccountUuid\").isDomainRouter(false).domainRouterIp(\"domainRouterIp\").vmInstanceName(\"vmInstanceName\").vmUuid(\"vmUuid\")\n-                .vmUserName(\"vmUserName\").vmUserDomainName(\"vmUserDomainName\").useStaticIp(true).staticIp(\"staticIp\").staticNatIpUuid(\"staticNatIpUuid\")\n-                .staticNatIpAddress(\"staticNatIpAddress\").isStaticNatIpAllocated(true).isOneToOneNat(true).staticNatVlanUuid(\"staticNatVlanUuid\")\n-                .staticNatVlanGateway(\"staticNatVlanGateway\").staticNatVlanNetmask(\"staticNatVlanNetmask\");\n-        doAnswer(genericAnswer).when(_mockNuageVspGuruClient).reserve(\"nicUuid\", \"nicMacAddress\", \"networkUuid\", true, true, \"vpcUuid\", \"networkDomainUuid\",\n-                \"networksAccountUuid\", false, \"domainRouterIp\", \"vmInstanceName\", \"vmUuid\", true, \"staticIp\", \"staticNatIpUuid\", \"staticNatIpAddress\",\n-                true, true, \"staticNatVlanUuid\", \"staticNatVlanGateway\", \"staticNatVlanNetmask\");\n-        Answer rsrvVmInfAns = _resource.executeRequest(cmdBuilder.build());\n+        VspNetwork vspNetwork = buildVspNetwork();\n+        VspVm vspVm = buildVspVm();\n+        VspNic vspNic = buildVspNic();\n+        VspStaticNat vspStaticNat = buildVspStaticNat();\n+        ReserveVmInterfaceVspCommand cmd = new ReserveVmInterfaceVspCommand(vspNetwork, vspVm, vspNic, vspStaticNat);\n+        doAnswer(genericAnswer).when(_mockNuageVspGuruClient).reserve(vspNetwork, vspVm, vspNic, vspStaticNat);\n+        Answer rsrvVmInfAns = _resource.executeRequest(cmd);\n         assertTrue(rsrvVmInfAns.getResult());\n     }\n \n     @Test\n     public void testDeallocateVmVspCommand() throws Exception {\n         _resource.configure(\"NuageVspResource\", _hostDetails);\n \n-        DeallocateVmVspCommand.Builder cmdBuilder = new DeallocateVmVspCommand.Builder().networkUuid(\"networkUuid\").nicFromDbUuid(\"nicFromDbUuid\")\n-                .nicMacAddress(\"nicMacAddress\").nicIp4Address(\"nicIp4Address\").isL3Network(true).isSharedNetwork(true).vpcUuid(\"vpcUuid\")\n-                .networksDomainUuid(\"networksDomainUuid\").vmInstanceName(\"vmInstanceName\").vmUuid(\"vmUuid\").isExpungingState(true);\n-        doAnswer(genericAnswer).when(_mockNuageVspGuruClient).deallocate(\"networkUuid\", \"nicFrmDdUuid\", \"nicMacAddress\", \"nicIp4Address\", true, true, \"vpcUuid\", \"networksDomainUuid\",\n-                \"vmInstanceName\", \"vmUuid\", true);\n-        Answer dellocateVmAns = _resource.executeRequest(cmdBuilder.build());\n+        VspNetwork vspNetwork = buildVspNetwork();\n+        VspVm vspVm = buildVspVm();\n+        VspNic vspNic = buildVspNic();\n+        DeallocateVmVspCommand cmd = new DeallocateVmVspCommand(vspNetwork, vspVm, vspNic);\n+        doAnswer(genericAnswer).when(_mockNuageVspGuruClient).deallocate(vspNetwork, vspVm, vspNic);\n+        Answer dellocateVmAns = _resource.executeRequest(cmd);\n         assertTrue(dellocateVmAns.getResult());\n     }\n \n     @Test\n     public void testTrashNetworkVspCommand() throws Exception {\n         _resource.configure(\"NuageVspResource\", _hostDetails);\n \n-        TrashNetworkVspCommand.Builder cmdBuilder = new TrashNetworkVspCommand.Builder().domainUuid(\"domainUuid\").networkUuid(\"networkUuid\")\n-                .isL3Network(true).isSharedNetwork(true).vpcUuid(\"vpcUuid\").domainTemplateName(\"domainTemplateName\");\n-        doAnswer(genericAnswer).when(_mockNuageVspGuruClient).trash(\"domainUuid\", \"networkUuid\", true, true, \"vpcUuid\", \"domainTemplateName\");\n-        Answer trashNtwkAns = _resource.executeRequest(cmdBuilder.build());\n+        VspNetwork vspNetwork = buildVspNetwork();\n+        TrashNetworkVspCommand cmd = new TrashNetworkVspCommand(vspNetwork);\n+        doAnswer(genericAnswer).when(_mockNuageVspGuruClient).trash(vspNetwork);\n+        Answer trashNtwkAns = _resource.executeRequest(cmd);\n         assertTrue(trashNtwkAns.getResult());\n     }\n \n     @Test\n     public void testApplyStaticNatVspCommand() throws Exception {\n         _resource.configure(\"NuageVspResource\", _hostDetails);\n \n-        ApplyStaticNatVspCommand.Builder cmdBuilder = new ApplyStaticNatVspCommand.Builder().networkDomainUuid(\"networkDomainUuid\").networkUuid(\"networkUuid\")\n-                .vpcOrSubnetUuid(\"vpcOrSubnetUuid\").isL3Network(true).isVpc(true).staticNatDetails(new ArrayList<Map<String, Object>>());\n-        doAnswer(genericAnswer).when(_mockNuageVspElementClient).applyStaticNats(\"networkDomainUuid\", \"networkUuid\", \"vpcOrSubnetUuid\", true, true, new ArrayList<Map<String, Object>>());\n-        Answer applyNatAns = _resource.executeRequest(cmdBuilder.build());\n+        VspNetwork vspNetwork = buildVspNetwork();\n+        List<VspStaticNat> vspStaticNatDetails = Lists.newArrayList(buildVspStaticNat());\n+        ApplyStaticNatVspCommand cmd = new ApplyStaticNatVspCommand(vspNetwork, vspStaticNatDetails);\n+        doAnswer(genericAnswer).when(_mockNuageVspElementClient).applyStaticNats(vspNetwork, vspStaticNatDetails);\n+        Answer applyNatAns = _resource.executeRequest(cmd);\n         assertTrue(applyNatAns.getResult());\n     }\n \n     @Test\n     public void testApplyAclRuleVspCommand() throws Exception {\n         _resource.configure(\"NuageVspResource\", _hostDetails);\n \n-        ApplyAclRuleVspCommand.Builder cmdBuilder = new ApplyAclRuleVspCommand.Builder().networkAcl(true).networkUuid(\"networkUuid\").networkDomainUuid(\"networkDomainUuid\")\n-                .vpcOrSubnetUuid(\"vpcOrSubnetUuid\").networkName(\"networkName\").isL2Network(true).aclRules(new ArrayList<Map<String, Object>>()).networkId(100)\n-                .egressDefaultPolicy(false).acsIngressAcl(true).networkReset(true).domainTemplateName(\"domainTemplateName\");\n-        doAnswer(genericAnswer).when(_mockNuageVspElementClient).applyAclRules(true, \"networkUuid\", \"networkDomainUuid\", \"vpcOrSubnetUuid\", \"networkName\", true,\n-        new ArrayList<Map<String, Object>>(), 100, false, true, true, \"domainTemplateName\");\n-        Answer applyAclAns = _resource.executeRequest(cmdBuilder.build());\n+        VspNetwork vspNetwork = buildVspNetwork();\n+        List<VspAclRule> vspAclRules = Lists.newArrayList(buildVspAclRule());\n+        ApplyAclRuleVspCommand cmd = new ApplyAclRuleVspCommand(VspAclRule.ACLType.NetworkACL, vspNetwork, vspAclRules, false);\n+        doAnswer(genericAnswer).when(_mockNuageVspElementClient).applyAclRules(VspAclRule.ACLType.NetworkACL, vspNetwork, vspAclRules, false);\n+        Answer applyAclAns = _resource.executeRequest(cmd);\n         assertTrue(applyAclAns.getResult());\n     }\n \n     @Test\n     public void testShutDownVpcVspCommand() throws Exception {\n         _resource.configure(\"NuageVspResource\", _hostDetails);\n \n-        ShutDownVpcVspCommand.Builder cmdBuilder = new ShutDownVpcVspCommand.Builder().domainUuid(\"domainUuid\").vpcUuid(\"vpcUuid\").domainTemplateName(\"domainTemplateName\");\n-        doAnswer(genericAnswer).when(_mockNuageVspElementClient).shutdownVpc(\"domainUuid\", \"vpcUuid\", \"domainTemplateName\");\n-        Answer shutVpcAns = _resource.executeRequest(cmdBuilder.build());\n-        assertTrue(shutVpcAns.getResult());\n-    }\n-\n-    @Test\n-    public void testSyncVspCommand() throws Exception {\n-        _resource.configure(\"NuageVspResource\", _hostDetails);\n-\n-        SyncVspCommand shutVpcCmd = new SyncVspCommand(\"nuageVspEntity\");\n-        doAnswer(genericAnswer).when(_mockNuageVspSyncClient).syncWithNuageVsp(\"nuageVspEntity\");\n-        Answer shutVpcAns = _resource.executeRequest(shutVpcCmd);\n+        ShutDownVpcVspCommand cmd = new ShutDownVpcVspCommand(\"domainUuid\", \"vpcUuid\", \"domainTemplateName\", Lists.<String>newArrayList());\n+        doAnswer(genericAnswer).when(_mockNuageVspElementClient).shutdownVpc(\"domainUuid\", \"vpcUuid\", \"domainTemplateName\", Lists.<String>newArrayList());\n+        Answer shutVpcAns = _resource.executeRequest(cmd);\n         assertTrue(shutVpcAns.getResult());\n     }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/test/com/cloud/network/resource/NuageVspResourceTest.java",
                "sha": "66d26323aa0f0e0d397312344baddb6260b911e2",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/2d825dd07f9b1acf19f6d98f5a247e069724c443/plugins/network-elements/nuage-vsp/test/com/cloud/network/sync/NuageVspSyncTest.java",
                "changes": 72,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/test/com/cloud/network/sync/NuageVspSyncTest.java?ref=2d825dd07f9b1acf19f6d98f5a247e069724c443",
                "deletions": 72,
                "filename": "plugins/network-elements/nuage-vsp/test/com/cloud/network/sync/NuageVspSyncTest.java",
                "patch": "@@ -1,72 +0,0 @@\n-//\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-//\n-\n-package com.cloud.network.sync;\n-\n-import com.cloud.agent.AgentManager;\n-import com.cloud.agent.api.Answer;\n-import com.cloud.agent.api.Command;\n-import com.cloud.host.HostVO;\n-import com.cloud.host.dao.HostDao;\n-import com.cloud.network.NuageVspDeviceVO;\n-import com.cloud.network.dao.NuageVspDao;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import java.util.Arrays;\n-\n-import static org.mockito.Matchers.any;\n-import static org.mockito.Matchers.eq;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-\n-public class NuageVspSyncTest {\n-    private static final long NETWORK_ID = 42L;\n-    NuageVspDao nuageVspDao = mock(NuageVspDao.class);\n-    AgentManager agentManager = mock(AgentManager.class);\n-    HostDao hostDao = mock(HostDao.class);\n-\n-    NuageVspSyncImpl sync;\n-\n-    @Before\n-    public void setUp() {\n-        sync = new NuageVspSyncImpl();\n-        sync._nuageVspDao = nuageVspDao;\n-        sync._agentMgr = agentManager;\n-        sync._hostDao = hostDao;\n-    }\n-\n-    @Test\n-    public void testSyncWithNuageVsp() {\n-        final NuageVspDeviceVO nuageVspDevice = mock(NuageVspDeviceVO.class);\n-        when(nuageVspDevice.getHostId()).thenReturn(NETWORK_ID);\n-        when(nuageVspDevice.getId()).thenReturn(NETWORK_ID);\n-        when(nuageVspDao.listAll()).thenReturn(Arrays.asList(new NuageVspDeviceVO[] {nuageVspDevice}));\n-\n-        final HostVO host = mock(HostVO.class);\n-        when(host.getId()).thenReturn(NETWORK_ID);\n-        when(hostDao.findById(NETWORK_ID)).thenReturn(host);\n-\n-        final Answer answer = mock(Answer.class);\n-        when(answer.getResult()).thenReturn(true);\n-        when(agentManager.easySend(eq(NETWORK_ID), (Command)any())).thenReturn(answer);\n-\n-        sync.syncWithNuageVsp(\"users\");\n-    }\n-}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2d825dd07f9b1acf19f6d98f5a247e069724c443/plugins/network-elements/nuage-vsp/test/com/cloud/network/sync/NuageVspSyncTest.java",
                "sha": "23430d4685af9c6e924fef847ea3ecc39ebcdd20",
                "status": "removed"
            },
            {
                "additions": 412,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/test/com/cloud/util/NuageVspEntityBuilderTest.java",
                "changes": 412,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/test/com/cloud/util/NuageVspEntityBuilderTest.java?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 0,
                "filename": "plugins/network-elements/nuage-vsp/test/com/cloud/util/NuageVspEntityBuilderTest.java",
                "patch": "@@ -0,0 +1,412 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+\n+package com.cloud.util;\n+\n+import com.cloud.NuageTest;\n+import com.cloud.dc.VlanVO;\n+import com.cloud.dc.dao.VlanDao;\n+import com.cloud.domain.DomainVO;\n+import com.cloud.domain.dao.DomainDao;\n+import com.cloud.network.Network;\n+import com.cloud.network.dao.IPAddressDao;\n+import com.cloud.network.dao.IPAddressVO;\n+import com.cloud.network.dao.NetworkDetailsDao;\n+import com.cloud.network.dao.NetworkVO;\n+import com.cloud.network.rules.FirewallRule;\n+import com.cloud.network.vpc.NetworkACLItem;\n+import com.cloud.network.vpc.VpcVO;\n+import com.cloud.network.vpc.dao.VpcDao;\n+import com.cloud.offerings.NetworkOfferingVO;\n+import com.cloud.offerings.dao.NetworkOfferingDao;\n+import com.cloud.offerings.dao.NetworkOfferingServiceMapDao;\n+import com.cloud.user.AccountVO;\n+import com.cloud.user.dao.AccountDao;\n+import com.cloud.utils.net.Ip;\n+import com.cloud.vm.NicProfile;\n+import com.cloud.vm.NicVO;\n+import com.cloud.vm.VirtualMachine;\n+import com.google.common.collect.Lists;\n+import net.nuage.vsp.acs.client.api.model.VspAclRule;\n+import net.nuage.vsp.acs.client.api.model.VspDomain;\n+import net.nuage.vsp.acs.client.api.model.VspNetwork;\n+import net.nuage.vsp.acs.client.api.model.VspNic;\n+import net.nuage.vsp.acs.client.api.model.VspStaticNat;\n+import net.nuage.vsp.acs.client.api.model.VspVm;\n+import net.nuage.vsp.acs.client.common.model.Pair;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class NuageVspEntityBuilderTest extends NuageTest {\n+\n+    private static final long DOMAIN_ID = 1L;\n+    private static final long ACCOUNT_ID = 1L;\n+    private static final long NETWORK_OFFERING_ID = 1L;\n+    private static final long SHARED_NETWORK_OFFERING_ID = 2L;\n+    private static final long L2_NETWORK_OFFERING_ID = 3L;\n+    private static final long VPC_ID = 1L;\n+    private static final long SOURCE_IP_ADDRESS_ID = 1L;\n+\n+    private VpcDao _vpcDao = mock(VpcDao.class);\n+    private DomainDao _domainDao = mock(DomainDao.class);\n+    private AccountDao _accountDao = mock(AccountDao.class);\n+    private NetworkOfferingDao _networkOfferingDao = mock(NetworkOfferingDao.class);\n+    private NetworkOfferingServiceMapDao _networkOfferingServiceMapDao = mock(NetworkOfferingServiceMapDao.class);\n+    private VlanDao _vlanDao = mock(VlanDao.class);\n+    private IPAddressDao _ipAddressDao = mock(IPAddressDao.class);\n+    private NetworkDetailsDao _networkDetailsDao = mock(NetworkDetailsDao.class);\n+    private NuageVspEntityBuilder _nuageVspEntityBuilder = new NuageVspEntityBuilder();\n+\n+    private DomainVO _mockedDomain = mock(DomainVO.class);\n+    private AccountVO _mockedAccount = mock(AccountVO.class);\n+    private NetworkOfferingVO _mockedNetworkOffering = mock(NetworkOfferingVO.class);\n+    private NetworkOfferingVO _mockedSharedNetworkOffering = mock(NetworkOfferingVO.class);\n+    private NetworkOfferingVO _mockedL2NetworkOffering = mock(NetworkOfferingVO.class);\n+    private VlanVO _mockedVlan = mock(VlanVO.class);\n+    private VpcVO _mockedVpc = mock(VpcVO.class);\n+    private NetworkVO _mockedNetwork = mock(NetworkVO.class);\n+    private NetworkVO _mockedVpcNetwork = mock(NetworkVO.class);\n+    private NetworkVO _mockedSharedNetwork = mock(NetworkVO.class);\n+    private NetworkVO _mockedL2Network = mock(NetworkVO.class);\n+    private VirtualMachine _mockedUserVirtualMachine = mock(VirtualMachine.class);\n+    private VirtualMachine _mockedDomainRouterVirtualMachine = mock(VirtualMachine.class);\n+    private NicProfile _mockedNicProfile = mock(NicProfile.class);\n+    private NicVO _mockedNic = mock(NicVO.class);\n+    private IPAddressVO _mockedStaticNatIp = mock(IPAddressVO.class);\n+    private VlanVO _mockedStaticNatVlan = mock(VlanVO.class);\n+    private FirewallRule _mockedFirewallRule = mock(FirewallRule.class);\n+    private NetworkACLItem _mockedNetworkAclItem = mock(NetworkACLItem.class);\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+\n+        _nuageVspEntityBuilder._vpcDao = _vpcDao;\n+        _nuageVspEntityBuilder._domainDao = _domainDao;\n+        _nuageVspEntityBuilder._accountDao = _accountDao;\n+        _nuageVspEntityBuilder._networkOfferingDao = _networkOfferingDao;\n+        _nuageVspEntityBuilder._networkOfferingServiceMapDao = _networkOfferingServiceMapDao;\n+        _nuageVspEntityBuilder._vlanDao = _vlanDao;\n+        _nuageVspEntityBuilder._configurationDao = _configurationDao;\n+        _nuageVspEntityBuilder._ipAddressDao = _ipAddressDao;\n+        _nuageVspEntityBuilder._networkModel = _networkModel;\n+        _nuageVspEntityBuilder._networkDetailsDao = _networkDetailsDao;\n+\n+        setUpMockedDomain();\n+        setUpMockedAccount();\n+        setUpMockedNetworkOffering(_mockedNetworkOffering, Network.GuestType.Isolated);\n+        setUpMockedNetworkOffering(_mockedSharedNetworkOffering, Network.GuestType.Shared);\n+        setUpMockedNetworkOffering(_mockedL2NetworkOffering, Network.GuestType.Isolated);\n+        setUpMockedVlan();\n+        setUpMockedVpc();\n+        setUpMockedNetwork(_mockedNetwork, NETWORK_OFFERING_ID, null);\n+        setUpMockedNetwork(_mockedVpcNetwork, NETWORK_OFFERING_ID, VPC_ID);\n+        setUpMockedNetwork(_mockedSharedNetwork, SHARED_NETWORK_OFFERING_ID, null);\n+        setUpMockedNetwork(_mockedL2Network, L2_NETWORK_OFFERING_ID, null);\n+        setUpMockedVirtualMachine(_mockedUserVirtualMachine, false);\n+        setUpMockedVirtualMachine(_mockedDomainRouterVirtualMachine, true);\n+        setUpMockedNicProfile();\n+        setUpMockedNic();\n+        setUpMockedStaticNatIp();\n+        setUpMockedStaticNatVlan();\n+        setUpMockedFirewallRule();\n+        setUpMockedNetworkAclItem();\n+        setUpMockedDaoCalls();\n+    }\n+\n+    @Test\n+    public void testBuildVspDomain() {\n+        VspDomain vspDomain = _nuageVspEntityBuilder.buildVspDomain(_mockedDomain);\n+        validateVspDomain(vspDomain);\n+    }\n+\n+    @Test\n+    public void testBuildVspNetwork() {\n+        VspNetwork vspNetwork = _nuageVspEntityBuilder.buildVspNetwork(_mockedL2Network, true);\n+        validateVspNetwork(vspNetwork, true, false, false, false, \"IsolatedDomainTemplate\", true);\n+\n+        vspNetwork = _nuageVspEntityBuilder.buildVspNetwork(_mockedL2Network, false);\n+        validateVspNetwork(vspNetwork, true, false, false, false, \"IsolatedDomainTemplate\", false);\n+\n+        vspNetwork = _nuageVspEntityBuilder.buildVspNetwork(_mockedNetwork, true);\n+        validateVspNetwork(vspNetwork, false, true, false, false, \"IsolatedDomainTemplate\", true);\n+\n+        vspNetwork = _nuageVspEntityBuilder.buildVspNetwork(_mockedNetwork, false);\n+        validateVspNetwork(vspNetwork, false, true, false, false, \"IsolatedDomainTemplate\", false);\n+\n+        vspNetwork = _nuageVspEntityBuilder.buildVspNetwork(_mockedVpcNetwork, true);\n+        validateVspNetwork(vspNetwork, false, false, true, false, \"VpcDomainTemplate\", true);\n+\n+        vspNetwork = _nuageVspEntityBuilder.buildVspNetwork(_mockedVpcNetwork, false);\n+        validateVspNetwork(vspNetwork, false, false, true, false, \"VpcDomainTemplate\", false);\n+\n+        vspNetwork = _nuageVspEntityBuilder.buildVspNetwork(_mockedSharedNetwork, true);\n+        validateVspNetwork(vspNetwork, false, false, false, true, \"SharedDomainTemplate\", true);\n+\n+        vspNetwork = _nuageVspEntityBuilder.buildVspNetwork(_mockedSharedNetwork, false);\n+        validateVspNetwork(vspNetwork, false, false, false, true, \"SharedDomainTemplate\", false);\n+    }\n+\n+    @Test\n+    public void testBuildVspVm() {\n+        VspVm vspVm = _nuageVspEntityBuilder.buildVspVm(_mockedUserVirtualMachine, _mockedNetwork);\n+        validateVspVm(vspVm, false);\n+\n+        vspVm = _nuageVspEntityBuilder.buildVspVm(_mockedDomainRouterVirtualMachine, _mockedNetwork);\n+        validateVspVm(vspVm, true);\n+    }\n+\n+    @Test\n+    public void testBuildVspNic() {\n+        VspNic vspNic = _nuageVspEntityBuilder.buildVspNic(\"nicUuid\", _mockedNicProfile);\n+        validateVspNic(vspNic);\n+\n+        vspNic = _nuageVspEntityBuilder.buildVspNic(_mockedNic);\n+        validateVspNic(vspNic);\n+    }\n+\n+    @Test\n+    public void testBuildVspStaticNat() {\n+        VspStaticNat vspStaticNat = _nuageVspEntityBuilder.buildVspStaticNat(true, _mockedStaticNatIp, _mockedStaticNatVlan, _mockedNic);\n+        validateVspStaticNat(vspStaticNat, true);\n+    }\n+\n+    @Test\n+    public void testBuildVspAclRule() {\n+        VspAclRule vspAclRule = _nuageVspEntityBuilder.buildVspAclRule(_mockedFirewallRule, _mockedNetwork);\n+        validateVspAclRule(vspAclRule, true);\n+\n+        vspAclRule = _nuageVspEntityBuilder.buildVspAclRule(_mockedNetworkAclItem);\n+        validateVspAclRule(vspAclRule, false);\n+    }\n+\n+    private void validateVspDomain(VspDomain vspDomain) {\n+        assertEquals(\"domainUuid\", vspDomain.getUuid());\n+        assertEquals(\"domainName\", vspDomain.getName());\n+        assertEquals(\"domainPath\", vspDomain.getPath());\n+    }\n+\n+    private void validateVspNetwork(VspNetwork vspNetwork, boolean isL2, boolean isL3, boolean isVpc, boolean isShared,\n+            String domainTemplateName, boolean hasAddressRanges) {\n+        assertEquals(NETWORK_ID, vspNetwork.getId());\n+        assertEquals(\"networkUuid\", vspNetwork.getUuid());\n+        assertEquals(\"networkName\", vspNetwork.getName());\n+        assertNotNull(vspNetwork.getVspDomain());\n+        validateVspDomain(vspNetwork.getVspDomain());\n+        assertEquals(\"accountName\", vspNetwork.getAccountName());\n+        assertEquals(\"accountUuid\", vspNetwork.getAccountUuid());\n+\n+        if (isVpc) {\n+            assertEquals(\"vpcUuid\", vspNetwork.getVpcUuid());\n+            assertEquals(\"vpcName\", vspNetwork.getVpcName());\n+        } else {\n+            assertNull(vspNetwork.getVpcUuid());\n+            assertNull(vspNetwork.getVpcName());\n+        }\n+\n+        assertEquals(isL2, vspNetwork.isL2());\n+        assertEquals(isL3, vspNetwork.isL3());\n+        assertEquals(isVpc, vspNetwork.isVpc());\n+        assertEquals(isShared, vspNetwork.isShared());\n+        assertEquals(true, vspNetwork.isFirewallServiceSupported());\n+        assertEquals(true, vspNetwork.isEgressDefaultPolicy());\n+        assertEquals(domainTemplateName, vspNetwork.getDomainTemplateName());\n+        assertEquals(\"10.10.10.0/24\", vspNetwork.getCidr());\n+        assertEquals(\"10.10.10.1\", vspNetwork.getGateway());\n+\n+        if (hasAddressRanges) {\n+            if (isShared) {\n+                assertEquals(\"192.168.2.2\", vspNetwork.getVirtualRouterIp());\n+            } else {\n+                assertEquals(\"10.10.10.2\", vspNetwork.getVirtualRouterIp());\n+            }\n+\n+            List<Pair<String, String>> ipAddressRanges;\n+            if (isShared) {\n+                ipAddressRanges = Lists.newArrayList(Pair.of(\"192.168.2.3\", \"192.168.2.200\"));\n+            } else {\n+                ipAddressRanges = Lists.newArrayList(Pair.of(\"10.10.10.3\", \"10.10.10.254\"));\n+            }\n+            assertEquals(ipAddressRanges, vspNetwork.getIpAddressRanges());\n+        }\n+    }\n+\n+    private void validateVspVm(VspVm vspVm, boolean isDomainRouter) {\n+        assertEquals(\"virtualMachineUuid\", vspVm.getUuid());\n+        assertEquals(\"virtualMachineInstanceName\", vspVm.getName());\n+        assertEquals(VspVm.State.Running, vspVm.getState());\n+        assertEquals(isDomainRouter, vspVm.getDomainRouter());\n+    }\n+\n+    private void validateVspNic(VspNic vspNic) {\n+        assertEquals(\"nicUuid\", vspNic.getUuid());\n+        assertEquals(\"macAddress\", vspNic.getMacAddress());\n+        assertEquals(true, vspNic.getUseStaticIp());\n+        assertEquals(\"10.10.10.2\", vspNic.getIp());\n+    }\n+\n+    private void validateVspStaticNat(VspStaticNat vspStaticNat, Boolean forRevoke) {\n+        assertEquals(\"staticNatIpUuid\", vspStaticNat.getIpUuid());\n+        assertEquals(\"10.10.10.2\", vspStaticNat.getIpAddress());\n+        assertEquals(forRevoke, vspStaticNat.getRevoke());\n+        assertEquals(true, vspStaticNat.getOneToOneNat());\n+        assertEquals(\"staticNatVlanUuid\", vspStaticNat.getVlanUuid());\n+        assertEquals(\"10.10.10.1\", vspStaticNat.getVlanGateway());\n+        assertEquals(\"255.255.255.0\", vspStaticNat.getVlanNetmask());\n+    }\n+\n+    private void validateVspAclRule(VspAclRule vspAclRule, boolean isFirewall) {\n+        assertEquals(\"aclUuid\", vspAclRule.getUuid());\n+        assertEquals(\"aclProtocol\", vspAclRule.getProtocol());\n+        assertEquals(new Integer(1), vspAclRule.getStartPort());\n+        assertEquals(new Integer(20), vspAclRule.getEndPort());\n+        assertEquals(Lists.newArrayList(\"10.10.0.0/16\"), vspAclRule.getSourceCidrList());\n+        assertEquals(VspAclRule.ACLState.Active, vspAclRule.getState());\n+        assertEquals(VspAclRule.ACLTrafficType.Egress, vspAclRule.getTrafficType());\n+\n+        if (isFirewall) {\n+            assertEquals(VspAclRule.ACLType.Firewall, vspAclRule.getType());\n+            assertEquals(\"192.168.0.24/32\", vspAclRule.getSourceIpAddress());\n+            assertEquals(VspAclRule.ACLAction.Deny, vspAclRule.getAction());\n+        } else {\n+            assertEquals(VspAclRule.ACLType.NetworkACL, vspAclRule.getType());\n+            assertNull(vspAclRule.getSourceIpAddress());\n+            assertEquals(VspAclRule.ACLAction.Allow, vspAclRule.getAction());\n+        }\n+    }\n+\n+    private void setUpMockedDomain() {\n+        when(_mockedDomain.getUuid()).thenReturn(\"domainUuid\");\n+        when(_mockedDomain.getName()).thenReturn(\"domainName\");\n+        when(_mockedDomain.getPath()).thenReturn(\"domainPath\");\n+    }\n+\n+    private void setUpMockedAccount() {\n+        when(_mockedAccount.getUuid()).thenReturn(\"accountUuid\");\n+        when(_mockedAccount.getAccountName()).thenReturn(\"accountName\");\n+    }\n+\n+    private void setUpMockedNetworkOffering(NetworkOfferingVO networkOfferingToMock, Network.GuestType guestType) {\n+        when(networkOfferingToMock.getEgressDefaultPolicy()).thenReturn(true);\n+        when(networkOfferingToMock.getGuestType()).thenReturn(guestType);\n+    }\n+\n+    private void setUpMockedVlan() {\n+        when(_mockedVlan.getIpRange()).thenReturn(\"192.168.2.2-192.168.2.200\");\n+    }\n+\n+    private void setUpMockedVpc() {\n+        when(_mockedVpc.getUuid()).thenReturn(\"vpcUuid\");\n+        when(_mockedVpc.getName()).thenReturn(\"vpcName\");\n+    }\n+\n+    private void setUpMockedNetwork(NetworkVO networkToMock, long networkOfferingId, Long vpcId) {\n+        when(networkToMock.getId()).thenReturn(NETWORK_ID);\n+        when(networkToMock.getUuid()).thenReturn(\"networkUuid\");\n+        when(networkToMock.getName()).thenReturn(\"networkName\");\n+        when(networkToMock.getCidr()).thenReturn(\"10.10.10.0/24\");\n+        when(networkToMock.getGateway()).thenReturn(\"10.10.10.1\");\n+        when(networkToMock.getDomainId()).thenReturn(DOMAIN_ID);\n+        when(networkToMock.getAccountId()).thenReturn(ACCOUNT_ID);\n+        when(networkToMock.getNetworkOfferingId()).thenReturn(networkOfferingId);\n+        when(networkToMock.getVpcId()).thenReturn(vpcId != null ? vpcId : null);\n+    }\n+\n+    private void setUpMockedVirtualMachine(VirtualMachine virtualMachineToMock, boolean isDomainRouter) {\n+        when(virtualMachineToMock.getUuid()).thenReturn(\"virtualMachineUuid\");\n+        when(virtualMachineToMock.getInstanceName()).thenReturn(\"virtualMachineInstanceName\");\n+        when(virtualMachineToMock.getState()).thenReturn(VirtualMachine.State.Running);\n+        when(virtualMachineToMock.getType()).thenReturn(isDomainRouter ? VirtualMachine.Type.DomainRouter : VirtualMachine.Type.User);\n+    }\n+\n+    private void setUpMockedNicProfile() {\n+        when(_mockedNicProfile.getMacAddress()).thenReturn(\"macAddress\");\n+        when(_mockedNicProfile.getIPv4Address()).thenReturn(\"10.10.10.2\");\n+    }\n+\n+    private void setUpMockedNic() {\n+        when(_mockedNic.getUuid()).thenReturn(\"nicUuid\");\n+        when(_mockedNic.getMacAddress()).thenReturn(\"macAddress\");\n+        when(_mockedNic.getIPv4Address()).thenReturn(\"10.10.10.2\");\n+    }\n+\n+    private void setUpMockedStaticNatIp() {\n+        when(_mockedStaticNatIp.getUuid()).thenReturn(\"staticNatIpUuid\");\n+        when(_mockedStaticNatIp.getAddress()).thenReturn(new Ip(\"10.10.10.2\"));\n+        when(_mockedStaticNatIp.isOneToOneNat()).thenReturn(true);\n+        when(_mockedStaticNatIp.getVmIp()).thenReturn(\"192.168.0.24\");\n+    }\n+\n+    private void setUpMockedStaticNatVlan() {\n+        when(_mockedStaticNatVlan.getUuid()).thenReturn(\"staticNatVlanUuid\");\n+        when(_mockedStaticNatVlan.getVlanGateway()).thenReturn(\"10.10.10.1\");\n+        when(_mockedStaticNatVlan.getVlanNetmask()).thenReturn(\"255.255.255.0\");\n+    }\n+\n+    private void setUpMockedFirewallRule() {\n+        when(_mockedFirewallRule.getUuid()).thenReturn(\"aclUuid\");\n+        when(_mockedFirewallRule.getProtocol()).thenReturn(\"aclProtocol\");\n+        when(_mockedFirewallRule.getSourcePortStart()).thenReturn(1);\n+        when(_mockedFirewallRule.getSourcePortEnd()).thenReturn(20);\n+        when(_mockedFirewallRule.getSourceCidrList()).thenReturn(Lists.newArrayList(\"10.10.0.0/16\"));\n+        when(_mockedFirewallRule.getState()).thenReturn(FirewallRule.State.Active);\n+        when(_mockedFirewallRule.getTrafficType()).thenReturn(FirewallRule.TrafficType.Egress);\n+        when(_mockedFirewallRule.getSourceIpAddressId()).thenReturn(SOURCE_IP_ADDRESS_ID);\n+    }\n+\n+    private void setUpMockedNetworkAclItem() {\n+        when(_mockedNetworkAclItem.getUuid()).thenReturn(\"aclUuid\");\n+        when(_mockedNetworkAclItem.getProtocol()).thenReturn(\"aclProtocol\");\n+        when(_mockedNetworkAclItem.getSourcePortStart()).thenReturn(1);\n+        when(_mockedNetworkAclItem.getSourcePortEnd()).thenReturn(20);\n+        when(_mockedNetworkAclItem.getSourceCidrList()).thenReturn(Lists.newArrayList(\"10.10.0.0/16\"));\n+        when(_mockedNetworkAclItem.getNumber()).thenReturn(1337);\n+        when(_mockedNetworkAclItem.getState()).thenReturn(NetworkACLItem.State.Active);\n+        when(_mockedNetworkAclItem.getTrafficType()).thenReturn(NetworkACLItem.TrafficType.Egress);\n+        when(_mockedNetworkAclItem.getAction()).thenReturn(NetworkACLItem.Action.Allow);\n+    }\n+\n+    private void setUpMockedDaoCalls() {\n+        when(_domainDao.findById(DOMAIN_ID)).thenReturn(_mockedDomain);\n+        when(_accountDao.findById(ACCOUNT_ID)).thenReturn(_mockedAccount);\n+        when(_networkOfferingDao.findById(NETWORK_OFFERING_ID)).thenReturn(_mockedNetworkOffering);\n+        when(_networkOfferingDao.findById(SHARED_NETWORK_OFFERING_ID)).thenReturn(_mockedSharedNetworkOffering);\n+        when(_networkOfferingDao.findById(L2_NETWORK_OFFERING_ID)).thenReturn(_mockedL2NetworkOffering);\n+        when(_networkOfferingServiceMapDao.areServicesSupportedByNetworkOffering(NETWORK_OFFERING_ID, Network.Service.SourceNat)).thenReturn(true);\n+        when(_networkOfferingServiceMapDao.areServicesSupportedByNetworkOffering(NETWORK_OFFERING_ID, Network.Service.StaticNat)).thenReturn(true);\n+        when(_networkOfferingServiceMapDao.areServicesSupportedByNetworkOffering(SHARED_NETWORK_OFFERING_ID, Network.Service.SourceNat)).thenReturn(true);\n+        when(_networkOfferingServiceMapDao.areServicesSupportedByNetworkOffering(SHARED_NETWORK_OFFERING_ID, Network.Service.StaticNat)).thenReturn(true);\n+        when(_networkOfferingServiceMapDao.areServicesSupportedByNetworkOffering(L2_NETWORK_OFFERING_ID, Network.Service.SourceNat)).thenReturn(false);\n+        when(_networkOfferingServiceMapDao.areServicesSupportedByNetworkOffering(L2_NETWORK_OFFERING_ID, Network.Service.StaticNat)).thenReturn(false);\n+        when(_networkModel.areServicesSupportedByNetworkOffering(NETWORK_OFFERING_ID, Network.Service.Firewall)).thenReturn(true);\n+        when(_networkModel.areServicesSupportedByNetworkOffering(SHARED_NETWORK_OFFERING_ID, Network.Service.Firewall)).thenReturn(true);\n+        when(_networkModel.areServicesSupportedByNetworkOffering(L2_NETWORK_OFFERING_ID, Network.Service.Firewall)).thenReturn(true);\n+        when(_vlanDao.listVlansByNetworkId(NETWORK_ID)).thenReturn(Lists.newArrayList(_mockedVlan));\n+        when(_vpcDao.findById(VPC_ID)).thenReturn(_mockedVpc);\n+        when(_ipAddressDao.findById(SOURCE_IP_ADDRESS_ID)).thenReturn(_mockedStaticNatIp);\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/network-elements/nuage-vsp/test/com/cloud/util/NuageVspEntityBuilderTest.java",
                "sha": "1ddc106877f49ee449c83618915faab4a791ae55",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/pom.xml",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/pom.xml?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 11,
                "filename": "plugins/pom.xml",
                "patch": "@@ -75,6 +75,7 @@\n     <module>network-elements/palo-alto</module>\n     <module>network-elements/netscaler</module>\n     <module>network-elements/nicira-nvp</module>\n+    <module>network-elements/nuage-vsp</module>\n     <module>network-elements/bigswitch</module>\n     <module>network-elements/brocade-vcs</module>\n     <module>network-elements/midonet</module>\n@@ -170,17 +171,6 @@\n         <module>network-elements/juniper-srx</module>\n       </modules>\n     </profile>\n-    <profile>\n-      <id>nuagevsp</id>\n-      <activation>\n-        <property>\n-          <name>noredist</name>\n-        </property>\n-      </activation>\n-      <modules>\n-        <module>network-elements/nuage-vsp</module>\n-      </modules>\n-    </profile>\n     <profile>\n       <id>vmware</id>\n       <activation>",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/plugins/pom.xml",
                "sha": "d05e63041137ef43439996a7d9dfc6d7be4f4de3",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/test/integration/plugins/nuagevsp/nuageTestCase.py",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/test/integration/plugins/nuagevsp/nuageTestCase.py?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 3,
                "filename": "test/integration/plugins/nuagevsp/nuageTestCase.py",
                "patch": "@@ -50,7 +50,7 @@\n class nuageTestCase(cloudstackTestCase):\n \n     @classmethod\n-    def setUpClass(cls):\n+    def setUpClass(cls, zone=None):\n         cls.debug(\"setUpClass nuageTestCase\")\n \n         # We want to fail quicker, if it's a failure\n@@ -60,9 +60,11 @@ def setUpClass(cls):\n         cls.api_client = test_client.getApiClient()\n         cls.db_client = test_client.getDbConnection()\n         cls.test_data = test_client.getParsedTestDataConfig()\n-\n         # Get Zone, Domain and templates\n-        cls.zone = get_zone(cls.api_client)\n+        cls.zone = get_zone(cls.api_client,\n+                            zone_name=zone.name if zone else None,\n+                            zone_id=zone.id if zone else None\n+                            )\n         cls.domain = get_domain(cls.api_client)\n         cls.template = get_template(cls.api_client,\n                                     cls.zone.id,",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/test/integration/plugins/nuagevsp/nuageTestCase.py",
                "sha": "11032a62f1198a62119e00cd776e59cc1a5253c2",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/test/integration/plugins/nuagevsp/test_nuage_vpc_network.py",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/test/integration/plugins/nuagevsp/test_nuage_vpc_network.py?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 6,
                "filename": "test/integration/plugins/nuagevsp/test_nuage_vpc_network.py",
                "patch": "@@ -15,22 +15,22 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-\"\"\" Tests for basic VPC Network functionality with Nuage VSP SDN plugin\n+\"\"\" Component tests for basic VPC Network functionality with Nuage VSP SDN plugin\n \"\"\"\n # Import Local Modules\n from nuageTestCase import nuageTestCase\n-from marvin.lib.base import Account\n+from marvin.lib.base import Account, Zone\n # Import System Modules\n from nose.plugins.attrib import attr\n \n \n-class TestVpcNetworkNuage(nuageTestCase):\n+class TestNuageVpcNetwork(nuageTestCase):\n     \"\"\" Test basic VPC Network functionality with Nuage VSP SDN plugin\n     \"\"\"\n \n     @classmethod\n-    def setUpClass(cls):\n-        super(TestVpcNetworkNuage, cls).setUpClass()\n+    def setUpClass(cls, zone=None):\n+        super(TestNuageVpcNetwork, cls).setUpClass(zone=zone)\n         return\n \n     def setUp(self):\n@@ -45,7 +45,7 @@ def setUp(self):\n \n     @attr(tags=[\"advanced\", \"nuagevsp\"], required_hardware=\"false\")\n     def test_nuage_vpc_network(self):\n-        \"\"\" Test Basic VPC Network Functionality with Nuage VSP SDN plugin\n+        \"\"\" Test basic VPC Network functionality with Nuage VSP SDN plugin\n         \"\"\"\n \n         # 1. Create Nuage VSP VPC offering, check if it is successfully created and enabled.\n@@ -97,3 +97,19 @@ def test_nuage_vpc_network(self):\n \n         # VSD verification for ACL item\n         self.verify_vsp_firewall_rule(acl_item)\n+\n+    @attr(tags=[\"advanced\", \"nuagevsp\", \"multizone\"], required_hardware=\"false\")\n+    def test_nuage_vpc_network_multizone(self):\n+        \"\"\" Test basic VPC Network functionality with Nuage VSP SDN plugin on multiple zones\n+        \"\"\"\n+\n+        # Repeat the tests in the above testcase \"test_nuage_vpc_network\" on multiple zones\n+\n+        self.debug(\"Testing basic VPC Network functionality with Nuage VSP SDN plugin on multiple zones...\")\n+        zones = Zone.list(self.api_client)\n+        if len(zones) == 1:\n+            self.skipTest(\"There is only one Zone configured: skipping test\")\n+        for zone in zones:\n+            self.debug(\"Zone - %s\" % zone.name)\n+            self.setUpClass(zone=zone)\n+            self.test_nuage_vpc_network()",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/test/integration/plugins/nuagevsp/test_nuage_vpc_network.py",
                "sha": "15134b628b35865a9ce34f7c413bcf4199f80f16",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/tools/marvin/marvin/deployDataCenter.py",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/tools/marvin/marvin/deployDataCenter.py?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 1,
                "filename": "tools/marvin/marvin/deployDataCenter.py",
                "patch": "@@ -561,7 +561,7 @@ def configureProviders(self, phynetwrk, providers):\n                     netprov.physicalnetworkid = phynetwrk.id\n                     result = self.__apiClient.addNetworkServiceProvider(netprov)\n                     self.enableProvider(result.id)\n-                elif provider.name in ['Netscaler', 'JuniperSRX', 'F5BigIp', 'NiciraNvp']:\n+                elif provider.name in ['Netscaler', 'JuniperSRX', 'F5BigIp', 'NiciraNvp', 'NuageVsp']:\n                     netprov = addNetworkServiceProvider.\\\n                         addNetworkServiceProviderCmd()\n                     netprov.name = provider.name\n@@ -631,6 +631,21 @@ def configureProviders(self, phynetwrk, providers):\n                                 self.__tcRunLogger.\\\n                                     debug(\"==== AddNiciraNvp Successful =====\")\n                                 self.__addToCleanUp(\"NiciraNvp\", ret.id)\n+                            elif provider.name == 'NuageVsp':\n+                                dev = addNuageVspDevice.addNuageVspDeviceCmd()\n+                                dev.hostname = device.hostname\n+                                dev.port = device.port\n+                                dev.username = device.username\n+                                dev.password = device.password\n+                                dev.retrycount = device.retrycount\n+                                dev.retryinterval = device.retryinterval\n+                                dev.physicalnetworkid = phynetwrk.id\n+                                ret = self.__apiClient.addNuageVspDevice(dev)\n+                                if ret.id:\n+                                    self.__tcRunLogger.\\\n+                                        debug(\"==== addNuageVspDevice \"\n+                                              \"Successful=====\")\n+                                    self.__addToCleanUp(\"addNuageVspDevice\", ret.id)\n                             else:\n                                 raise InvalidParameterException(\n                                     \"Device %s doesn't match \"",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/tools/marvin/marvin/deployDataCenter.py",
                "sha": "24133289ed8515fd632503fa04d056ad90b53406",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/05a7beccfe9c2cd406908062b8833ff4c8a98431/ui/scripts/system.js",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/ui/scripts/system.js?ref=05a7beccfe9c2cd406908062b8833ff4c8a98431",
                "deletions": 2,
                "filename": "ui/scripts/system.js",
                "patch": "@@ -7109,7 +7109,7 @@\n                                          },\n                                          apiversion: {\n                                              label: 'label.api.version',\n-                                             defaultValue: 'v1_0',\n+                                             defaultValue: 'v3_2',\n                                              validation: {\n                                                  required: true\n                                              },\n@@ -13185,7 +13185,7 @@\n                                     },\n                                     apiversion: {\n                                         label: 'label.api.version',\n-                                        defaultValue: 'v1_0'\n+                                        defaultValue: 'v3_2'\n                                     },\n                                     retrycount: {\n                                         label: 'label.numretries',",
                "raw_url": "https://github.com/apache/cloudstack/raw/05a7beccfe9c2cd406908062b8833ff4c8a98431/ui/scripts/system.js",
                "sha": "642370feb2aa1855aead0954816ac572369ad191",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #1494 from nlivens/master_nuage\n\nRemodeling of Nuage VSP Plugin + CLOUDSTACK-9294Hi all,\n\nWe've remodeled the Nuage VSP plugin to use the same model as VMWare is using (non-OSS). Before, we had a runtime dependency to the Nuage Client, this has been changed to a compile-time dependency instead because of multiple reasons (build management, readability, maintainability, ...)\n\nWe've adapted the code so it now uses model objects defined in the Nuage client instead of passing a list of parameters to the Nuage client. This is a lot more readable, and a lot more maintainable.\n\nI've had a chat with @DaanHoogland about this approach, and he told me that ACS is trying to move away from the whole non-OSS approach. We're looking into the Juniper approach, we would set up a custom maven repository which would host the required dependencies for the Nuage VSP plugin.\n\nAny remarks or suggestions are always welcome :)\n\n* pr/1494:\n  Nuage VSP : Extending Marvin test coverage\n  Nuage VSP : Fix for NPE while cleaning up account when there are still resources belonging to that account\n  CLOUDSTACK-9294 : Make sure to remove VR from VSD when removing the VPC\n  CLOUDSTACK-9242 : Remodel Nuage VSP plugin\n\nSigned-off-by: Will Stevens <williamstevens@gmail.com>",
        "parent": "https://github.com/apache/cloudstack/commit/2d825dd07f9b1acf19f6d98f5a247e069724c443",
        "patched_files": [
            "DeleteNuageVspDeviceCmd.java",
            "GetClientDefaultsAnswer.java",
            "NuageVspUtil.java",
            "GetApiDefaultsCommand.java",
            "NuageVspSyncImpl.java",
            "VspResourceCommand.java",
            "Commands.java",
            "ApplyAclRuleVspCommand.java",
            "system.js",
            "spring-vsp-context.xml",
            "test_nuage_vpc_network.py",
            "NuageVspApiClient.java",
            "UpdateNuageVspDeviceCmd.java",
            "NuageVspElement.java",
            "NuageVspGuruClient.java",
            "DomainRouterDao.java",
            "ApplyStaticNatVspCommand.java",
            "NuageVspResource.java",
            "VspResourceAnswer.java",
            "ImplementVspCommand.java",
            "SyncDomainCommand.java",
            "deployDataCenter.py",
            "NuageVspManagerClient.java",
            "NuageVspManager.java",
            "GetApiDefaultsAnswer.java",
            "nuageTestCase.py",
            "NuageVspGuestNetworkGuru.java",
            "pom.xml",
            "NuageVspPluginClientLoader.java",
            "NuageVspEntityBuilder.java",
            "DomainRouterDaoImpl.java",
            "ReserveVmInterfaceVspCommand.java",
            "IssueNuageVspResourceRequestCmd.java",
            "ImplementNetworkVspCommand.java",
            "NuageVspSyncClient.java",
            "ListNuageVspDevicesCmd.java",
            "NuageVspSync.java",
            "DeallocateVmVspCommand.java",
            "NuageVspManagerImpl.java",
            "ShutDownVpcVspCommand.java",
            "TrashNetworkVspCommand.java",
            "NuageVspElementClient.java",
            "AddNuageVspDeviceCmd.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "NuageVspElementTest.java",
            "NuageVspGuestNetworkGuruTest.java",
            "NuageVspSyncTest.java",
            "NuageVspResourceTest.java",
            "NuageVspManagerTest.java",
            "NuageVspEntityBuilderTest.java",
            "NuageVspUtilTest.java",
            "CommandsTest.java",
            "NuageTest.java"
        ]
    },
    "cloudstack_0833cf1": {
        "bug_id": "cloudstack_0833cf1",
        "commit": "https://github.com/apache/cloudstack/commit/0833cf1dd74b03fd2aa805588f05bf555e1ceaf0",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/0833cf1dd74b03fd2aa805588f05bf555e1ceaf0/plugins/network-elements/juniper-contrail/src/test/java/org/apache/cloudstack/network/contrail/management/MockAccountManager.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/juniper-contrail/src/test/java/org/apache/cloudstack/network/contrail/management/MockAccountManager.java?ref=0833cf1dd74b03fd2aa805588f05bf555e1ceaf0",
                "deletions": 1,
                "filename": "plugins/network-elements/juniper-contrail/src/test/java/org/apache/cloudstack/network/contrail/management/MockAccountManager.java",
                "patch": "@@ -316,7 +316,7 @@ public boolean moveUser(MoveUserCmd moveUserCmd) {\n     }\n \n     @Override\n-    public boolean moveUser(long id, Long domainId, long accountId) {\n+    public boolean moveUser(long id, Long domainId, Account account) {\n         return false;\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/0833cf1dd74b03fd2aa805588f05bf555e1ceaf0/plugins/network-elements/juniper-contrail/src/test/java/org/apache/cloudstack/network/contrail/management/MockAccountManager.java",
                "sha": "f07a74352315401de1086785152be4cf61888514",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/0833cf1dd74b03fd2aa805588f05bf555e1ceaf0/plugins/user-authenticators/ldap/src/main/java/org/apache/cloudstack/ldap/LdapAuthenticator.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/user-authenticators/ldap/src/main/java/org/apache/cloudstack/ldap/LdapAuthenticator.java?ref=0833cf1dd74b03fd2aa805588f05bf555e1ceaf0",
                "deletions": 1,
                "filename": "plugins/user-authenticators/ldap/src/main/java/org/apache/cloudstack/ldap/LdapAuthenticator.java",
                "patch": "@@ -35,6 +35,7 @@\n import com.cloud.user.dao.UserAccountDao;\n import com.cloud.utils.Pair;\n import com.cloud.utils.component.AdapterBase;\n+import com.cloud.utils.exception.CloudRuntimeException;\n \n public class LdapAuthenticator extends AdapterBase implements UserAuthenticator {\n     private static final Logger s_logger = Logger.getLogger(LdapAuthenticator.class.getName());\n@@ -135,7 +136,11 @@ public LdapAuthenticator(final LdapManager ldapManager, final UserAccountDao use\n                 } else {\n                     // not a new user, check if mapped group has changed\n                     if(userAccount.getAccountId() != mapping.getAccountId()) {\n-                        _accountManager.moveUser(userAccount.getId(),userAccount.getDomainId(),mapping.getAccountId());\n+                        final Account mappedAccount = _accountManager.getAccount(mapping.getAccountId());\n+                        if (mappedAccount == null || mappedAccount.getRemoved() != null) {\n+                            throw new CloudRuntimeException(\"Mapped account for users does not exist. Please contact your administrator.\");\n+                        }\n+                        _accountManager.moveUser(userAccount.getId(), userAccount.getDomainId(), mappedAccount);\n                     }\n                     // else { the user hasn't changed in ldap, the ldap group stayed the same, hurray, pass, fun thou self a lot of fun }\n                 }",
                "raw_url": "https://github.com/apache/cloudstack/raw/0833cf1dd74b03fd2aa805588f05bf555e1ceaf0/plugins/user-authenticators/ldap/src/main/java/org/apache/cloudstack/ldap/LdapAuthenticator.java",
                "sha": "2d8fe530d9de7db4587e98479cb76a27b7af03e3",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/0833cf1dd74b03fd2aa805588f05bf555e1ceaf0/server/src/main/java/com/cloud/user/AccountManager.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/user/AccountManager.java?ref=0833cf1dd74b03fd2aa805588f05bf555e1ceaf0",
                "deletions": 4,
                "filename": "server/src/main/java/com/cloud/user/AccountManager.java",
                "patch": "@@ -180,11 +180,12 @@ void buildACLViewSearchCriteria(SearchCriteria<? extends ControlledViewEntity> s\n \n     List<String> listAclGroupsByAccount(Long accountId);\n \n-    public static final String MESSAGE_ADD_ACCOUNT_EVENT = \"Message.AddAccount.Event\";\n+    String MESSAGE_ADD_ACCOUNT_EVENT = \"Message.AddAccount.Event\";\n \n-    public static final String MESSAGE_REMOVE_ACCOUNT_EVENT = \"Message.RemoveAccount.Event\";\n-    public static final ConfigKey<Boolean> UseSecretKeyInResponse = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"use.secret.key.in.response\", \"false\",\n+    String MESSAGE_REMOVE_ACCOUNT_EVENT = \"Message.RemoveAccount.Event\";\n+\n+    ConfigKey<Boolean> UseSecretKeyInResponse = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"use.secret.key.in.response\", \"false\",\n             \"This parameter allows the users to enable or disable of showing secret key as a part of response for various APIs. By default it is set to false.\", true);\n \n-    boolean moveUser(long id, Long domainId, long accountId);\n+    boolean moveUser(long id, Long domainId, Account newAccount);\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/0833cf1dd74b03fd2aa805588f05bf555e1ceaf0/server/src/main/java/com/cloud/user/AccountManager.java",
                "sha": "57012e13334c02931821f0e7ca0e2aa4549d9310",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/0833cf1dd74b03fd2aa805588f05bf555e1ceaf0/server/src/main/java/com/cloud/user/AccountManagerImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/user/AccountManagerImpl.java?ref=0833cf1dd74b03fd2aa805588f05bf555e1ceaf0",
                "deletions": 3,
                "filename": "server/src/main/java/com/cloud/user/AccountManagerImpl.java",
                "patch": "@@ -1817,13 +1817,12 @@ public boolean moveUser(MoveUserCmd cmd) {\n     }\n \n     @Override\n-    public boolean moveUser(long id, Long domainId, long accountId) {\n+    public boolean moveUser(long id, Long domainId, Account newAccount) {\n         UserVO user = getValidUserVO(id);\n         Account oldAccount = _accountDao.findById(user.getAccountId());\n         checkAccountAndAccess(user, oldAccount);\n-        Account newAccount = _accountDao.findById(accountId);\n         checkIfNotMovingAcrossDomains(domainId, newAccount);\n-        return moveUser(user, accountId);\n+        return moveUser(user, newAccount.getId());\n     }\n \n     private boolean moveUser(UserVO user, long newAccountId) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/0833cf1dd74b03fd2aa805588f05bf555e1ceaf0/server/src/main/java/com/cloud/user/AccountManagerImpl.java",
                "sha": "b71d548c4d5ca7231d8dbb39d72562e92cb0dd2b",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/0833cf1dd74b03fd2aa805588f05bf555e1ceaf0/server/src/test/java/com/cloud/user/MockAccountManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/test/java/com/cloud/user/MockAccountManagerImpl.java?ref=0833cf1dd74b03fd2aa805588f05bf555e1ceaf0",
                "deletions": 1,
                "filename": "server/src/test/java/com/cloud/user/MockAccountManagerImpl.java",
                "patch": "@@ -129,7 +129,7 @@ public boolean moveUser(MoveUserCmd moveUserCmd) {\n     }\n \n     @Override\n-    public boolean moveUser(long id, Long domainId, long accountId) {\n+    public boolean moveUser(long id, Long domainId, Account account) {\n         return false;\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/0833cf1dd74b03fd2aa805588f05bf555e1ceaf0/server/src/test/java/com/cloud/user/MockAccountManagerImpl.java",
                "sha": "9fece09f35771d8271fbfd1f52b1ac4c56d7f42e",
                "status": "modified"
            }
        ],
        "message": "server: fix potential NPE while ldap authentication (#3418)\n\nThis fixes a potential NPE when a mapped account is not found and\r\nmoving of user to the mapped account is performed. This will now\r\nthrow a more information exception than NPE.\r\n\r\nFixes #2853\r\n\r\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/f653e6149c53c9316bcccaf23f407c1be19eecb3",
        "patched_files": [
            "AccountManagerImpl.java",
            "LdapAuthenticator.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "AccountManagerImplTest.java",
            "LdapAuthenticatorTest.java"
        ]
    },
    "cloudstack_11d0336": {
        "bug_id": "cloudstack_11d0336",
        "commit": "https://github.com/apache/cloudstack/commit/11d0336803048b156731da15239147e7f6b4d03a",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cloudstack/blob/11d0336803048b156731da15239147e7f6b4d03a/core/src/com/cloud/agent/api/storage/AbstractDownloadCommand.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/core/src/com/cloud/agent/api/storage/AbstractDownloadCommand.java?ref=11d0336803048b156731da15239147e7f6b4d03a",
                "deletions": 9,
                "filename": "core/src/com/cloud/agent/api/storage/AbstractDownloadCommand.java",
                "patch": "@@ -31,8 +31,8 @@\n     protected AbstractDownloadCommand() {\n     }\n \n-    protected AbstractDownloadCommand(String name, String url, ImageFormat format, Long accountId) {\n-        assert (url != null);\n+    protected AbstractDownloadCommand(final String name, String url, final ImageFormat format, final Long accountId) {\n+        assert url != null;\n         url = url.replace('\\\\', '/');\n \n         this.url = url;\n@@ -41,14 +41,14 @@ protected AbstractDownloadCommand(String name, String url, ImageFormat format, L\n         this.name = name;\n     }\n \n-    protected AbstractDownloadCommand(AbstractDownloadCommand that) {\n+    protected AbstractDownloadCommand(final AbstractDownloadCommand that) {\n         super(that);\n-        assert (that.url != null);\n+        assert that.url != null;\n \n-        this.url = that.url.replace('\\\\', '/');\n-        this.format = that.format;\n-        this.accountId = that.accountId;\n-        this.name = that.name;\n+        url = that.url.replace('\\\\', '/');\n+        format = that.format;\n+        accountId = that.accountId;\n+        name = that.name;\n     }\n \n     public String getUrl() {\n@@ -73,7 +73,7 @@ public boolean executeInSequence() {\n     }\n \n     public void setUrl(String url) {\n-        assert (url != null);\n+        assert url != null;\n         url = url.replace('\\\\', '/');\n         this.url = url;\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/11d0336803048b156731da15239147e7f6b4d03a/core/src/com/cloud/agent/api/storage/AbstractDownloadCommand.java",
                "sha": "0670eefd9449ae3e9e4a3c0627c5fad87c253253",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/11d0336803048b156731da15239147e7f6b4d03a/core/src/com/cloud/agent/api/storage/PrimaryStorageDownloadCommand.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/core/src/com/cloud/agent/api/storage/PrimaryStorageDownloadCommand.java?ref=11d0336803048b156731da15239147e7f6b4d03a",
                "deletions": 17,
                "filename": "core/src/com/cloud/agent/api/storage/PrimaryStorageDownloadCommand.java",
                "patch": "@@ -37,22 +37,13 @@\n     String primaryStorageUrl;\n \n     protected PrimaryStorageDownloadCommand() {\n-\n-    }\n-\n-    public PrimaryStorageDownloadCommand(String url, StoragePool pool, int wait) {\n-        super(null, url, null, null);\n-        this.poolId = pool.getId();\n-        this.poolUuid = pool.getUuid();\n-        this.primaryPool = new StorageFilerTO(pool);\n-        setWait(wait);\n     }\n \n-    public PrimaryStorageDownloadCommand(String name, String url, ImageFormat format, long accountId, StoragePool pool, int wait) {\n+    public PrimaryStorageDownloadCommand(final String name, final String url, final ImageFormat format, final long accountId, final StoragePool pool, final int wait) {\n         super(name, url, format, accountId);\n-        this.poolId = pool.getId();\n-        this.poolUuid = pool.getUuid();\n-        this.primaryPool = new StorageFilerTO(pool);\n+        poolId = pool.getId();\n+        poolUuid = pool.getUuid();\n+        primaryPool = new StorageFilerTO(pool);\n         setWait(wait);\n     }\n \n@@ -68,23 +59,23 @@ public StorageFilerTO getPool() {\n         return primaryPool;\n     }\n \n-    public void setLocalPath(String path) {\n-        this.localPath = path;\n+    public void setLocalPath(final String path) {\n+        localPath = path;\n     }\n \n     public String getLocalPath() {\n         return localPath;\n     }\n \n-    public void setSecondaryStorageUrl(String url) {\n+    public void setSecondaryStorageUrl(final String url) {\n         secondaryStorageUrl = url;\n     }\n \n     public String getSecondaryStorageUrl() {\n         return secondaryStorageUrl;\n     }\n \n-    public void setPrimaryStorageUrl(String url) {\n+    public void setPrimaryStorageUrl(final String url) {\n         primaryStorageUrl = url;\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/11d0336803048b156731da15239147e7f6b4d03a/core/src/com/cloud/agent/api/storage/PrimaryStorageDownloadCommand.java",
                "sha": "ce8ed217a562e3f1a4d4e722c42c0720cdc186b9",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/11d0336803048b156731da15239147e7f6b4d03a/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/CitrixResourceBase.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/CitrixResourceBase.java?ref=11d0336803048b156731da15239147e7f6b4d03a",
                "deletions": 10,
                "filename": "plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/CitrixResourceBase.java",
                "patch": "@@ -441,12 +441,6 @@ public Answer executeRequest(final Command cmd) {\n \n         if (cmd instanceof NetworkElementCommand) {\n             return _vrResource.executeRequest((NetworkElementCommand)cmd);\n-        } else if (clazz == AttachVolumeCommand.class) {\n-            return execute((AttachVolumeCommand)cmd);\n-        } else if (clazz == AttachIsoCommand.class) {\n-            return execute((AttachIsoCommand) cmd);\n-        } else if (clazz == UpgradeSnapshotCommand.class) {\n-            return execute((UpgradeSnapshotCommand)cmd);\n         } else if (clazz == GetStorageStatsCommand.class) {\n             return execute((GetStorageStatsCommand)cmd);\n         } else if (clazz == PrimaryStorageDownloadCommand.class) {\n@@ -2751,7 +2745,7 @@ void destroyVDIbyNameLabel(final Connection conn, final String nameLabel) {\n         }\n     }\n \n-    String copy_vhd_from_secondarystorage(final Connection conn, final String mountpoint, final String sruuid, final int wait) {\n+    public String copyVhdFromSecondaryStorage(final Connection conn, final String mountpoint, final String sruuid, final int wait) {\n         final String nameLabel = \"cloud-\" + UUID.randomUUID().toString();\n         final String results =\n                 callHostPluginAsync(conn, \"vmopspremium\", \"copy_vhd_from_secondarystorage\", wait, \"mountpoint\", mountpoint, \"sruuid\", sruuid, \"namelabel\", nameLabel);\n@@ -2794,7 +2788,7 @@ public PrimaryStorageDownloadAnswer execute(final PrimaryStorageDownloadCommand\n             }\n             final String pUuid = poolsr.getUuid(conn);\n             final boolean isISCSI = IsISCSI(poolsr.getType(conn));\n-            final String uuid = copy_vhd_from_secondarystorage(conn, tmplpath, pUuid, wait);\n+            final String uuid = copyVhdFromSecondaryStorage(conn, tmplpath, pUuid, wait);\n             final VDI tmpl = getVDIbyUuid(conn, uuid);\n             final VDI snapshotvdi = tmpl.snapshot(conn, new HashMap<String, String>());\n             final String snapshotUuid = snapshotvdi.getUuid(conn);\n@@ -6589,7 +6583,7 @@ protected Answer execute(final AttachIsoCommand cmd) {\n         }\n     }\n \n-    boolean IsISCSI(final String type) {\n+    public boolean IsISCSI(final String type) {\n         return SRType.LVMOHBA.equals(type) || SRType.LVMOISCSI.equals(type) || SRType.LVM.equals(type);\n     }\n \n@@ -6838,7 +6832,7 @@ protected boolean postCreatePrivateTemplate(final Connection conn, final String\n         return success;\n     }\n \n-    protected String getVhdParent(final Connection conn, final String primaryStorageSRUuid, final String snapshotUuid, final Boolean isISCSI) {\n+    public String getVhdParent(final Connection conn, final String primaryStorageSRUuid, final String snapshotUuid, final Boolean isISCSI) {\n         final String parentUuid =\n                 callHostPlugin(conn, \"vmopsSnapshot\", \"getVhdParent\", \"primaryStorageSRUuid\", primaryStorageSRUuid, \"snapshotUuid\", snapshotUuid, \"isISCSI\",\n                         isISCSI.toString());",
                "raw_url": "https://github.com/apache/cloudstack/raw/11d0336803048b156731da15239147e7f6b4d03a/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/CitrixResourceBase.java",
                "sha": "c412b546efb04e5f8f1b8674f77a34763ea32b61",
                "status": "modified"
            },
            {
                "additions": 69,
                "blob_url": "https://github.com/apache/cloudstack/blob/11d0336803048b156731da15239147e7f6b4d03a/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/wrapper/CitrixGetStorageStatsCommandWrapper.java",
                "changes": 69,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/wrapper/CitrixGetStorageStatsCommandWrapper.java?ref=11d0336803048b156731da15239147e7f6b4d03a",
                "deletions": 0,
                "filename": "plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/wrapper/CitrixGetStorageStatsCommandWrapper.java",
                "patch": "@@ -0,0 +1,69 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+\n+package com.cloud.hypervisor.xenserver.resource.wrapper;\n+\n+import java.util.Set;\n+\n+import org.apache.log4j.Logger;\n+import org.apache.xmlrpc.XmlRpcException;\n+\n+import com.cloud.agent.api.Answer;\n+import com.cloud.agent.api.GetStorageStatsAnswer;\n+import com.cloud.agent.api.GetStorageStatsCommand;\n+import com.cloud.hypervisor.xenserver.resource.CitrixResourceBase;\n+import com.cloud.resource.CommandWrapper;\n+import com.xensource.xenapi.Connection;\n+import com.xensource.xenapi.SR;\n+import com.xensource.xenapi.Types.XenAPIException;\n+\n+public final class CitrixGetStorageStatsCommandWrapper extends CommandWrapper<GetStorageStatsCommand, Answer, CitrixResourceBase> {\n+\n+    private static final Logger s_logger = Logger.getLogger(CitrixGetStorageStatsCommandWrapper.class);\n+\n+    @Override\n+    public Answer execute(final GetStorageStatsCommand command, final CitrixResourceBase citrixResourceBase) {\n+        final Connection conn = citrixResourceBase.getConnection();\n+        try {\n+            final Set<SR> srs = SR.getByNameLabel(conn, command.getStorageId());\n+            if (srs.size() != 1) {\n+                final String msg = \"There are \" + srs.size() + \" storageid: \" + command.getStorageId();\n+                s_logger.warn(msg);\n+                return new GetStorageStatsAnswer(command, msg);\n+            }\n+            final SR sr = srs.iterator().next();\n+            sr.scan(conn);\n+            final long capacity = sr.getPhysicalSize(conn);\n+            final long used = sr.getPhysicalUtilisation(conn);\n+            return new GetStorageStatsAnswer(command, capacity, used);\n+        } catch (final XenAPIException e) {\n+            final String msg = \"GetStorageStats Exception:\" + e.toString() + \"host:\" + citrixResourceBase.getHost().getUuid() + \"storageid: \" + command.getStorageId();\n+            s_logger.warn(msg);\n+            return new GetStorageStatsAnswer(command, msg);\n+        } catch (final XmlRpcException e) {\n+            final String msg = \"GetStorageStats Exception:\" + e.getMessage() + \"host:\" + citrixResourceBase.getHost().getUuid() + \"storageid: \" + command.getStorageId();\n+            s_logger.warn(msg);\n+            return new GetStorageStatsAnswer(command, msg);\n+        }  catch (final Exception e) {\n+            final String msg = \"GetStorageStats Exception:\" + e.getMessage() + \"host:\" + citrixResourceBase.getHost().getUuid() + \"storageid: \" + command.getStorageId();\n+            s_logger.warn(msg);\n+            return new GetStorageStatsAnswer(command, msg);\n+        }\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/11d0336803048b156731da15239147e7f6b4d03a/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/wrapper/CitrixGetStorageStatsCommandWrapper.java",
                "sha": "e0001ccd9feba987a93101e7ce7ec984ca6e0070",
                "status": "added"
            },
            {
                "additions": 83,
                "blob_url": "https://github.com/apache/cloudstack/blob/11d0336803048b156731da15239147e7f6b4d03a/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/wrapper/CitrixPrimaryStorageDownloadCommandWrapper.java",
                "changes": 83,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/wrapper/CitrixPrimaryStorageDownloadCommandWrapper.java?ref=11d0336803048b156731da15239147e7f6b4d03a",
                "deletions": 0,
                "filename": "plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/wrapper/CitrixPrimaryStorageDownloadCommandWrapper.java",
                "patch": "@@ -0,0 +1,83 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+\n+package com.cloud.hypervisor.xenserver.resource.wrapper;\n+\n+import java.net.URI;\n+import java.util.HashMap;\n+import java.util.Set;\n+\n+import org.apache.log4j.Logger;\n+\n+import com.cloud.agent.api.Answer;\n+import com.cloud.agent.api.storage.PrimaryStorageDownloadAnswer;\n+import com.cloud.agent.api.storage.PrimaryStorageDownloadCommand;\n+import com.cloud.hypervisor.xenserver.resource.CitrixResourceBase;\n+import com.cloud.resource.CommandWrapper;\n+import com.xensource.xenapi.Connection;\n+import com.xensource.xenapi.SR;\n+import com.xensource.xenapi.VDI;\n+\n+public final class CitrixPrimaryStorageDownloadCommandWrapper extends CommandWrapper<PrimaryStorageDownloadCommand, Answer, CitrixResourceBase> {\n+\n+    private static final Logger s_logger = Logger.getLogger(CitrixPrimaryStorageDownloadCommandWrapper.class);\n+\n+    @Override\n+    public Answer execute(final PrimaryStorageDownloadCommand command, final CitrixResourceBase citrixResourceBase) {\n+        final String tmplturl = command.getUrl();\n+        final String poolName = command.getPoolUuid();\n+        final int wait = command.getWait();\n+        try {\n+            final URI uri = new URI(tmplturl);\n+            final String tmplpath = uri.getHost() + \":\" + uri.getPath();\n+            final Connection conn = citrixResourceBase.getConnection();\n+            SR poolsr = null;\n+            final Set<SR> srs = SR.getByNameLabel(conn, poolName);\n+            if (srs.size() != 1) {\n+                final String msg = \"There are \" + srs.size() + \" SRs with same name: \" + poolName;\n+                s_logger.warn(msg);\n+                return new PrimaryStorageDownloadAnswer(msg);\n+            } else {\n+                poolsr = srs.iterator().next();\n+            }\n+            final String pUuid = poolsr.getUuid(conn);\n+            final boolean isISCSI = citrixResourceBase.IsISCSI(poolsr.getType(conn));\n+            final String uuid = citrixResourceBase.copyVhdFromSecondaryStorage(conn, tmplpath, pUuid, wait);\n+            final VDI tmpl = citrixResourceBase.getVDIbyUuid(conn, uuid);\n+            final VDI snapshotvdi = tmpl.snapshot(conn, new HashMap<String, String>());\n+            final String snapshotUuid = snapshotvdi.getUuid(conn);\n+            snapshotvdi.setNameLabel(conn, \"Template \" + command.getName());\n+            final String parentuuid = citrixResourceBase.getVhdParent(conn, pUuid, snapshotUuid, isISCSI);\n+            final VDI parent = citrixResourceBase.getVDIbyUuid(conn, parentuuid);\n+            final Long phySize = parent.getPhysicalUtilisation(conn);\n+            tmpl.destroy(conn);\n+            poolsr.scan(conn);\n+            try {\n+                Thread.sleep(5000);\n+            } catch (final Exception e) {\n+            }\n+            return new PrimaryStorageDownloadAnswer(snapshotvdi.getUuid(conn), phySize);\n+        } catch (final Exception e) {\n+            final String msg = \"Catch Exception \" + e.getClass().getName() + \" on host:\" + citrixResourceBase.getHost().getUuid() + \" for template: \" + tmplturl + \" due to \"\n+                    + e.toString();\n+            s_logger.warn(msg, e);\n+            return new PrimaryStorageDownloadAnswer(msg);\n+        }\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/11d0336803048b156731da15239147e7f6b4d03a/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/wrapper/CitrixPrimaryStorageDownloadCommandWrapper.java",
                "sha": "270520777d4a3ef6a85ba0aaec7b52befd491a5b",
                "status": "added"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/11d0336803048b156731da15239147e7f6b4d03a/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/wrapper/CitrixRequestWrapper.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/wrapper/CitrixRequestWrapper.java?ref=11d0336803048b156731da15239147e7f6b4d03a",
                "deletions": 0,
                "filename": "plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/wrapper/CitrixRequestWrapper.java",
                "patch": "@@ -30,6 +30,7 @@\n import com.cloud.agent.api.CreateStoragePoolCommand;\n import com.cloud.agent.api.DeleteStoragePoolCommand;\n import com.cloud.agent.api.GetHostStatsCommand;\n+import com.cloud.agent.api.GetStorageStatsCommand;\n import com.cloud.agent.api.GetVmDiskStatsCommand;\n import com.cloud.agent.api.GetVmStatsCommand;\n import com.cloud.agent.api.MigrateCommand;\n@@ -44,6 +45,7 @@\n import com.cloud.agent.api.proxy.WatchConsoleProxyLoadCommand;\n import com.cloud.agent.api.storage.CreateCommand;\n import com.cloud.agent.api.storage.DestroyCommand;\n+import com.cloud.agent.api.storage.PrimaryStorageDownloadCommand;\n import com.cloud.agent.api.storage.ResizeVolumeCommand;\n import com.cloud.resource.CommandWrapper;\n import com.cloud.resource.RequestWrapper;\n@@ -89,6 +91,8 @@ private void init() {\n         map.put(AttachVolumeCommand.class, new CitrixAttachVolumeCommandWrapper());\n         map.put(AttachIsoCommand.class, new CitrixAttachIsoCommandWrapper());\n         map.put(UpgradeSnapshotCommand.class, new CitrixUpgradeSnapshotCommandWrapper());\n+        map.put(GetStorageStatsCommand.class, new CitrixGetStorageStatsCommandWrapper());\n+        map.put(PrimaryStorageDownloadCommand.class, new CitrixPrimaryStorageDownloadCommandWrapper());\n     }\n \n     public static CitrixRequestWrapper getInstance() {",
                "raw_url": "https://github.com/apache/cloudstack/raw/11d0336803048b156731da15239147e7f6b4d03a/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/wrapper/CitrixRequestWrapper.java",
                "sha": "c31c340c6081a85c884c9486cddf7897fee95dce",
                "status": "modified"
            },
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/cloudstack/blob/11d0336803048b156731da15239147e7f6b4d03a/plugins/hypervisors/xenserver/test/com/cloud/hypervisor/xenserver/resource/wrapper/CitrixRequestWrapperTest.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/xenserver/test/com/cloud/hypervisor/xenserver/resource/wrapper/CitrixRequestWrapperTest.java?ref=11d0336803048b156731da15239147e7f6b4d03a",
                "deletions": 0,
                "filename": "plugins/hypervisors/xenserver/test/com/cloud/hypervisor/xenserver/resource/wrapper/CitrixRequestWrapperTest.java",
                "patch": "@@ -25,6 +25,7 @@\n import com.cloud.agent.api.CreateStoragePoolCommand;\n import com.cloud.agent.api.DeleteStoragePoolCommand;\n import com.cloud.agent.api.GetHostStatsCommand;\n+import com.cloud.agent.api.GetStorageStatsCommand;\n import com.cloud.agent.api.GetVmDiskStatsCommand;\n import com.cloud.agent.api.GetVmStatsCommand;\n import com.cloud.agent.api.MigrateCommand;\n@@ -41,11 +42,14 @@\n import com.cloud.agent.api.storage.CreateAnswer;\n import com.cloud.agent.api.storage.CreateCommand;\n import com.cloud.agent.api.storage.DestroyCommand;\n+import com.cloud.agent.api.storage.PrimaryStorageDownloadCommand;\n import com.cloud.agent.api.storage.ResizeVolumeCommand;\n+import com.cloud.agent.api.to.DataStoreTO;\n import com.cloud.agent.api.to.StorageFilerTO;\n import com.cloud.agent.api.to.VirtualMachineTO;\n import com.cloud.hypervisor.xenserver.resource.CitrixResourceBase;\n import com.cloud.hypervisor.xenserver.resource.XsHost;\n+import com.cloud.storage.Storage.ImageFormat;\n import com.cloud.storage.Storage.StoragePoolType;\n import com.cloud.storage.VMTemplateStorageResourceAssoc;\n import com.cloud.vm.DiskProfile;\n@@ -400,6 +404,42 @@ public void testUpgradeSnapshotCommandNo21() {\n \n         assertTrue(answer.getResult());\n     }\n+\n+    @Test\n+    public void testGetStorageStatsCommand() {\n+        final XsHost xsHost = Mockito.mock(XsHost.class);\n+        final DataStoreTO store = Mockito.mock(DataStoreTO.class);\n+\n+        final GetStorageStatsCommand storageStatsCommand = new GetStorageStatsCommand(store);\n+\n+        final CitrixRequestWrapper wrapper = CitrixRequestWrapper.getInstance();\n+        assertNotNull(wrapper);\n+\n+        when(citrixResourceBase.getHost()).thenReturn(xsHost);\n+\n+        final Answer answer = wrapper.execute(storageStatsCommand, citrixResourceBase);\n+        verify(citrixResourceBase, times(1)).getConnection();\n+\n+        assertFalse(answer.getResult());\n+    }\n+\n+    @Test\n+    public void testPrimaryStorageDownloadCommand() {\n+        final XsHost xsHost = Mockito.mock(XsHost.class);\n+        final StoragePoolVO poolVO = Mockito.mock(StoragePoolVO.class);\n+\n+        final PrimaryStorageDownloadCommand storageDownloadCommand = new PrimaryStorageDownloadCommand(\"Test\", \"http://127.0.0.1\", ImageFormat.VHD, 1l, poolVO, 200);\n+\n+        final CitrixRequestWrapper wrapper = CitrixRequestWrapper.getInstance();\n+        assertNotNull(wrapper);\n+\n+        when(citrixResourceBase.getHost()).thenReturn(xsHost);\n+\n+        final Answer answer = wrapper.execute(storageDownloadCommand, citrixResourceBase);\n+        verify(citrixResourceBase, times(1)).getConnection();\n+\n+        assertFalse(answer.getResult());\n+    }\n }\n \n class NotAValidCommand extends Command {",
                "raw_url": "https://github.com/apache/cloudstack/raw/11d0336803048b156731da15239147e7f6b4d03a/plugins/hypervisors/xenserver/test/com/cloud/hypervisor/xenserver/resource/wrapper/CitrixRequestWrapperTest.java",
                "sha": "187384271f5c2af477839457440ee43046aad67b",
                "status": "modified"
            }
        ],
        "message": "Refactoring GetStorageStatsCommand and PrimaryStorageDownloadCommand to cope with the new design\nFix the NPE in the constructor that was never used\n  - Basic tests added for all changes",
        "parent": "https://github.com/apache/cloudstack/commit/ea374b6a2ffba8c5ea2222cf1cffce10dbbdff92",
        "patched_files": [
            "PrimaryStorageDownloadCommand.java",
            "AbstractDownloadCommand.java",
            "CitrixPrimaryStorageDownloadCommandWrapper.java",
            "CitrixResourceBase.java",
            "CitrixGetStorageStatsCommandWrapper.java",
            "CitrixRequestWrapper.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "CitrixRequestWrapperTest.java",
            "CitrixResourceBaseTest.java"
        ]
    },
    "cloudstack_14abe4c": {
        "bug_id": "cloudstack_14abe4c",
        "commit": "https://github.com/apache/cloudstack/commit/14abe4cb2dbdc9293926ec706b01ab068d03c34d",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/14abe4cb2dbdc9293926ec706b01ab068d03c34d/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java?ref=14abe4cb2dbdc9293926ec706b01ab068d03c34d",
                "deletions": 1,
                "filename": "plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "patch": "@@ -2679,7 +2679,8 @@ protected StartAnswer execute(StartCommand cmd) {\n                 ManagedObjectReference environmentBrowser =\n                         context.getVimClient().getMoRefProp(computeMor, \"environmentBrowser\");\n                 HostCapability hostCapability = context.getService().queryTargetCapabilities(environmentBrowser, hostMor);\n-                if (hostCapability.isNestedHVSupported()) {\n+                Boolean nestedHvSupported = hostCapability.isNestedHVSupported();\n+                if (nestedHvSupported != null && nestedHvSupported.booleanValue()) {\n                     s_logger.debug(\"Hypervisor supports nested virtualization, enabling for VM \" + vmSpec.getName());\n                     vmConfigSpec.setNestedHVEnabled(true);\n                 }",
                "raw_url": "https://github.com/apache/cloudstack/raw/14abe4cb2dbdc9293926ec706b01ab068d03c34d/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "sha": "c61e171f7cad80c5ae923eb68996e97fad903902",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-4155 [VMWARE] Failed to deploy VM with NPE when vmware.nested.virtualization is enabled to true\n\nSigned-off-by: Sateesh Chodapuneedi <sateesh@apache.org>",
        "parent": "https://github.com/apache/cloudstack/commit/59f944d7c33d75561f0ac6a53255bfa0497c925a",
        "patched_files": [
            "VmwareResource.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VmwareResourceTest.java"
        ]
    },
    "cloudstack_15b11a3": {
        "bug_id": "cloudstack_15b11a3",
        "commit": "https://github.com/apache/cloudstack/commit/15b11a3b27800afcb598f8e97416f0d826cac491",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/15b11a3b27800afcb598f8e97416f0d826cac491/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=15b11a3b27800afcb598f8e97416f0d826cac491",
                "deletions": 1,
                "filename": "engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -4776,8 +4776,8 @@ protected VirtualMachine retrieve() {\n         final VMInstanceVO vm = _entityMgr.findById(VMInstanceVO.class, work.getVmId());\n         if (vm == null) {\n             s_logger.info(\"Unable to find vm \" + work.getVmId());\n+            throw new CloudRuntimeException(\"Unable to find VM id=\" + work.getVmId());\n         }\n-        assert vm != null;\n \n         orchestrateStop(vm.getUuid(), work.isCleanup());\n         return new Pair<JobInfo.Status, String>(JobInfo.Status.SUCCEEDED, null);",
                "raw_url": "https://github.com/apache/cloudstack/raw/15b11a3b27800afcb598f8e97416f0d826cac491/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "8413ce9f6e9eb5c4d4cdda5c26d2a7ddd682c1fe",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/15b11a3b27800afcb598f8e97416f0d826cac491/python/lib/cloudutils/utilities.py",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/python/lib/cloudutils/utilities.py?ref=15b11a3b27800afcb598f8e97416f0d826cac491",
                "deletions": 2,
                "filename": "python/lib/cloudutils/utilities.py",
                "patch": "@@ -216,8 +216,8 @@ def isKVMEnabled(self):\n class serviceOpsRedhat7(serviceOps):\n     def isServiceRunning(self, servicename):\n         try:\n-            o = bash(\"systemctl status \" + servicename)\n-            if \"running\" in o.getStdout() or \"start\" in o.getStdout() or \"Running\" in o.getStdout():\n+            o = bash(\"systemctl is-active \" + servicename)\n+            if \"inactive\" not in o.getStdout():\n                 return True\n             else:\n                 return False",
                "raw_url": "https://github.com/apache/cloudstack/raw/15b11a3b27800afcb598f8e97416f0d826cac491/python/lib/cloudutils/utilities.py",
                "sha": "b9d47630cc60cbabe11d09337508ac1a7a46b810",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/cloudstack/blob/15b11a3b27800afcb598f8e97416f0d826cac491/server/src/com/cloud/server/StatsCollector.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/StatsCollector.java?ref=15b11a3b27800afcb598f8e97416f0d826cac491",
                "deletions": 2,
                "filename": "server/src/com/cloud/server/StatsCollector.java",
                "patch": "@@ -64,6 +64,7 @@\n import com.cloud.cluster.dao.ManagementServerHostDao;\n import com.cloud.dc.Vlan.VlanType;\n import com.cloud.dc.VlanVO;\n+import com.cloud.dc.dao.ClusterDao;\n import com.cloud.dc.dao.VlanDao;\n import com.cloud.exception.StorageUnavailableException;\n import com.cloud.gpu.dao.HostGpuGroupsDao;\n@@ -92,18 +93,20 @@\n import com.cloud.network.as.dao.AutoScaleVmProfileDao;\n import com.cloud.network.as.dao.ConditionDao;\n import com.cloud.network.as.dao.CounterDao;\n+import com.cloud.org.Cluster;\n import com.cloud.resource.ResourceManager;\n import com.cloud.resource.ResourceState;\n import com.cloud.service.ServiceOfferingVO;\n import com.cloud.service.dao.ServiceOfferingDao;\n import com.cloud.storage.ImageStoreDetailsUtil;\n+import com.cloud.storage.ScopeType;\n+import com.cloud.storage.Storage.ImageFormat;\n import com.cloud.storage.StorageManager;\n import com.cloud.storage.StorageStats;\n import com.cloud.storage.VolumeStats;\n import com.cloud.storage.VolumeVO;\n import com.cloud.storage.dao.VolumeDao;\n import com.cloud.user.UserStatisticsVO;\n-import com.cloud.storage.Storage.ImageFormat;\n import com.cloud.user.VmDiskStatisticsVO;\n import com.cloud.user.dao.UserStatisticsDao;\n import com.cloud.user.dao.VmDiskStatisticsDao;\n@@ -173,6 +176,8 @@ public String toString() {\n     @Inject\n     private HostDao _hostDao;\n     @Inject\n+    private ClusterDao _clusterDao;\n+    @Inject\n     private UserVmDao _userVmDao;\n     @Inject\n     private VolumeDao _volsDao;\n@@ -916,7 +921,18 @@ else if (volume.getFormat() == ImageFormat.OVA){\n                         }\n                     }\n                     try {\n-                        HashMap<String, VolumeStatsEntry> volumeStatsByUuid = _userVmMgr.getVolumeStatistics(pool.getClusterId(), pool.getUuid(), pool.getPoolType(), volumeLocators, StatsTimeout.value());\n+                        Map<String, VolumeStatsEntry> volumeStatsByUuid;\n+                        if (pool.getScope() == ScopeType.ZONE) {\n+                            volumeStatsByUuid = new HashMap<>();\n+                            for (final Cluster cluster: _clusterDao.listByZoneId(pool.getDataCenterId())) {\n+                                final Map<String, VolumeStatsEntry> volumeStatsForCluster = _userVmMgr.getVolumeStatistics(cluster.getId(), pool.getUuid(), pool.getPoolType(), volumeLocators, StatsTimeout.value());\n+                                if (volumeStatsForCluster != null) {\n+                                    volumeStatsByUuid.putAll(volumeStatsForCluster);\n+                                }\n+                            }\n+                        } else {\n+                            volumeStatsByUuid = _userVmMgr.getVolumeStatistics(pool.getClusterId(), pool.getUuid(), pool.getPoolType(), volumeLocators, StatsTimeout.value());\n+                        }\n                         if (volumeStatsByUuid != null){\n                             for (final Map.Entry<String, VolumeStatsEntry> entry : volumeStatsByUuid.entrySet()) {\n                                 if (entry == null || entry.getKey() == null || entry.getValue() == null) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/15b11a3b27800afcb598f8e97416f0d826cac491/server/src/com/cloud/server/StatsCollector.java",
                "sha": "b66fa5f0600d44ba128cbe26b9ad5b3116bbd51e",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/15b11a3b27800afcb598f8e97416f0d826cac491/systemvm/agent/conf/log4j-cloud.xml",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/systemvm/agent/conf/log4j-cloud.xml?ref=15b11a3b27800afcb598f8e97416f0d826cac491",
                "deletions": 6,
                "filename": "systemvm/agent/conf/log4j-cloud.xml",
                "patch": "@@ -24,7 +24,7 @@ under the License.\n    <!-- Preserve messages in a local file -->\n    <!-- ================================= -->\n \n-   <appender name=\"FILE1\" class=\"org.apache.log4j.RollingFileAppender\">\n+   <appender name=\"cloudLog\" class=\"org.apache.log4j.RollingFileAppender\">\n       <param name=\"File\" value=\"/var/log/cloud.log\"/>\n       <param name=\"MaxFileSize\" value=\"10000KB\"/>\n       <param name=\"MaxBackupIndex\" value=\"4\"/>\n@@ -34,7 +34,7 @@ under the License.\n      </layout>\n     </appender>\n \n-    <appender name=\"FILE2\" class=\"org.apache.log4j.RollingFileAppender\">\n+    <appender name=\"cloudOut\" class=\"org.apache.log4j.RollingFileAppender\">\n        <param name=\"File\" value=\"/var/log/cloud/cloud.out\"/>\n        <param name=\"Append\" value=\"true\"/>\n        <param name=\"MaxFileSize\" value=\"10000KB\"/>\n@@ -45,7 +45,7 @@ under the License.\n     </layout>\n     </appender>\n \n-     <appender name=\"FILE3\" class=\"org.apache.log4j.rolling.RollingFileAppender\">\n+     <appender name=\"cloudSystemvmLog\" class=\"org.apache.log4j.rolling.RollingFileAppender\">\n        <param name=\"File\" value=\"/usr/local/cloud/systemvm/cloud.log\"/>\n        <param name=\"Append\" value=\"true\"/>\n        <param name=\"MaxFileSize\" value=\"10000KB\"/>\n@@ -123,9 +123,9 @@ under the License.\n    <root>\n       <level value=\"INFO\"/>\n       <appender-ref ref=\"CONSOLE\"/>\n-      <appender-ref ref=\"FILE1\"/>\n-      <appender-ref ref=\"FILE2\"/>\n-      <appender-ref ref=\"FILE3\"/>\n+      <appender-ref ref=\"cloudLog\"/>\n+      <appender-ref ref=\"cloudOut\"/>\n+      <appender-ref ref=\"cloudSystemvmLog\"/>\n    </root>\n \n </log4j:configuration>",
                "raw_url": "https://github.com/apache/cloudstack/raw/15b11a3b27800afcb598f8e97416f0d826cac491/systemvm/agent/conf/log4j-cloud.xml",
                "sha": "338fae234f67e731a8c504c31e1a9dca6af9058b",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/ce3303212b5f9639ee91db52972fc9fd4b9a3c68/systemvm/debian/etc/issue",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/systemvm/debian/etc/issue?ref=ce3303212b5f9639ee91db52972fc9fd4b9a3c68",
                "deletions": 3,
                "filename": "systemvm/debian/etc/issue",
                "patch": "@@ -1,3 +0,0 @@\n-   __?.o/  Apache CloudStack SystemVM\n-  (  )#    https://cloudstack.apache.org\n- (___(_)   \\s \\r \\n \\l",
                "raw_url": "https://github.com/apache/cloudstack/raw/ce3303212b5f9639ee91db52972fc9fd4b9a3c68/systemvm/debian/etc/issue",
                "sha": "fdef90e7c8a8d7ebe4aa895dec3a6707fdb27da7",
                "status": "removed"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/ce3303212b5f9639ee91db52972fc9fd4b9a3c68/systemvm/debian/etc/rc.local",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/systemvm/debian/etc/rc.local?ref=ce3303212b5f9639ee91db52972fc9fd4b9a3c68",
                "deletions": 19,
                "filename": "systemvm/debian/etc/rc.local",
                "patch": "@@ -1,19 +0,0 @@\n-#!/bin/bash\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-\n-",
                "raw_url": "https://github.com/apache/cloudstack/raw/ce3303212b5f9639ee91db52972fc9fd4b9a3c68/systemvm/debian/etc/rc.local",
                "sha": "e419de0939cc317995b4cedec3d8d82f1c645e73",
                "status": "removed"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/15b11a3b27800afcb598f8e97416f0d826cac491/systemvm/debian/opt/cloud/bin/cs/CsDhcp.py",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/systemvm/debian/opt/cloud/bin/cs/CsDhcp.py?ref=15b11a3b27800afcb598f8e97416f0d826cac491",
                "deletions": 1,
                "filename": "systemvm/debian/opt/cloud/bin/cs/CsDhcp.py",
                "patch": "@@ -80,7 +80,7 @@ def configure_server(self):\n             # DNS search order\n             if gn.get_dns() and device:\n                 sline = \"dhcp-option=tag:interface-%s-%s,6\" % (device, idx)\n-                dns_list = [x for x in gn.get_dns() if x is not None]\n+                dns_list = [x for x in gn.get_dns() if not (not x)]\n                 line = \"dhcp-option=tag:interface-%s-%s,6,%s\" % (device, idx, ','.join(dns_list))\n                 self.conf.search(sline, line)\n             # Gateway",
                "raw_url": "https://github.com/apache/cloudstack/raw/15b11a3b27800afcb598f8e97416f0d826cac491/systemvm/debian/opt/cloud/bin/cs/CsDhcp.py",
                "sha": "bcdba51e6c8939d9795a5b6f36c96afa0b454057",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/15b11a3b27800afcb598f8e97416f0d826cac491/systemvm/debian/opt/cloud/bin/setup/common.sh",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/systemvm/debian/opt/cloud/bin/setup/common.sh?ref=15b11a3b27800afcb598f8e97416f0d826cac491",
                "deletions": 4,
                "filename": "systemvm/debian/opt/cloud/bin/setup/common.sh",
                "patch": "@@ -331,14 +331,14 @@ setup_common() {\n     ip route add default via $GW dev $gwdev\n   fi\n \n-  # a hacking way to activate vSwitch under VMware\n-  ping -n -c 3 $GW &\n+  # Workaround to activate vSwitch under VMware\n+  timeout 3 ping -n -c 3 $GW || true\n   if [ -n \"$MGMTNET\"  -a -n \"$LOCAL_GW\" ]\n   then\n-      ping -n -c 3 $LOCAL_GW &\n+      timeout 3 ping -n -c 3 $LOCAL_GW || true\n       #This code is added to address ARP issue by pinging MGMT_GW\n       MGMT_GW=$(echo $MGMTNET | awk -F \".\" '{print $1\".\"$2\".\"$3\".1\"}')\n-      ping -n -c 3 $MGMT_GW &\n+      timeout 3 ping -n -c 3 $MGMT_GW || true\n   fi\n \n   if [ \"$HYPERVISOR\" == \"vmware\" ]; then",
                "raw_url": "https://github.com/apache/cloudstack/raw/15b11a3b27800afcb598f8e97416f0d826cac491/systemvm/debian/opt/cloud/bin/setup/common.sh",
                "sha": "0622e2e1aa83f1bccc928ff3ead7066856abcdce",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/15b11a3b27800afcb598f8e97416f0d826cac491/systemvm/debian/opt/cloud/bin/setup/router.sh",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/systemvm/debian/opt/cloud/bin/setup/router.sh?ref=15b11a3b27800afcb598f8e97416f0d826cac491",
                "deletions": 4,
                "filename": "systemvm/debian/opt/cloud/bin/setup/router.sh",
                "patch": "@@ -59,10 +59,8 @@ setup_router() {\n \n     if [ \"$oldmd5\" != \"$newmd5\" ]\n     then\n-      log_it \"udev NIC assignment requires reboot to take effect\"\n-      sync\n-      sleep 2\n-      reboot\n+      log_it \"Reloading udev for new udev NIC assignment\"\n+      udevadm control --reload-rules && udevadm trigger\n     fi\n   fi\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/15b11a3b27800afcb598f8e97416f0d826cac491/systemvm/debian/opt/cloud/bin/setup/router.sh",
                "sha": "f41e57e6375073edbf64d17280d5b21b48c79d53",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/15b11a3b27800afcb598f8e97416f0d826cac491/systemvm/debian/opt/cloud/bin/setup/vpcrouter.sh",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/systemvm/debian/opt/cloud/bin/setup/vpcrouter.sh?ref=15b11a3b27800afcb598f8e97416f0d826cac491",
                "deletions": 5,
                "filename": "systemvm/debian/opt/cloud/bin/setup/vpcrouter.sh",
                "patch": "@@ -65,11 +65,8 @@ EOF\n      if [ \"$HYPERVISOR\" == \"vmware\" ] || [ \"$HYPERVISOR\" == \"hyperv\" ];\n      then\n          ip route add $MGMTNET via $LOCAL_GW dev eth0\n-\n-          # a hacking way to activate vSwitch under VMware\n-         ping -n -c 3 $LOCAL_GW &\n-         sleep 3\n-         pkill ping\n+         # workaround to activate vSwitch under VMware\n+         timeout 3 ping -n -c 3 $LOCAL_GW || true\n      fi\n   fi\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/15b11a3b27800afcb598f8e97416f0d826cac491/systemvm/debian/opt/cloud/bin/setup/vpcrouter.sh",
                "sha": "220a2ea8747a3d809a9d8a36d2ce7e48d4a6ef21",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/15b11a3b27800afcb598f8e97416f0d826cac491/systemvm/debian/opt/cloud/bin/update_config.py",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/systemvm/debian/opt/cloud/bin/update_config.py?ref=15b11a3b27800afcb598f8e97416f0d826cac491",
                "deletions": 0,
                "filename": "systemvm/debian/opt/cloud/bin/update_config.py",
                "patch": "@@ -112,6 +112,12 @@ def is_guestnet_configured(guestnet_dict, keys):\n \n     return exists\n \n+# If the command line json file is unprocessed process it\n+# This is important or, the control interfaces will get deleted!\n+if jsonFilename != \"cmd_line.json\" and os.path.isfile(jsonPath % \"cmd_line.json\"):\n+    qf = QueueFile()\n+    qf.setFile(\"cmd_line.json\")\n+    qf.load(None)\n \n if not (os.path.isfile(jsonConfigFile) and os.access(jsonConfigFile, os.R_OK)):\n     print \"[ERROR] update_config.py :: Unable to read and access %s to process it\" % jsonConfigFile",
                "raw_url": "https://github.com/apache/cloudstack/raw/15b11a3b27800afcb598f8e97416f0d826cac491/systemvm/debian/opt/cloud/bin/update_config.py",
                "sha": "c22aea03b4f51bd198613d25d907648384af6801",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/15b11a3b27800afcb598f8e97416f0d826cac491/systemvm/debian/opt/cloud/templates/keepalived.conf.templ",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/systemvm/debian/opt/cloud/templates/keepalived.conf.templ?ref=15b11a3b27800afcb598f8e97416f0d826cac491",
                "deletions": 1,
                "filename": "systemvm/debian/opt/cloud/templates/keepalived.conf.templ",
                "patch": "@@ -25,7 +25,7 @@ vrrp_script heartbeat {\n }\n \n vrrp_instance inside_network {\n-    state EQUAL\n+    state BACKUP\n     interface eth2\n     virtual_router_id 51\n     nopreempt",
                "raw_url": "https://github.com/apache/cloudstack/raw/15b11a3b27800afcb598f8e97416f0d826cac491/systemvm/debian/opt/cloud/templates/keepalived.conf.templ",
                "sha": "0a537776623846c5d651370f45e992cff122845f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/15b11a3b27800afcb598f8e97416f0d826cac491/test/integration/smoke/test_deploy_virtio_scsi_vm.py",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/test/integration/smoke/test_deploy_virtio_scsi_vm.py?ref=15b11a3b27800afcb598f8e97416f0d826cac491",
                "deletions": 1,
                "filename": "test/integration/smoke/test_deploy_virtio_scsi_vm.py",
                "patch": "@@ -219,7 +219,8 @@ def verifyVirshState(self, diskcount):\n                                      \"controller index\")\n                 elif child.tag.lower() == \"driver\":\n                     discard = child.get(\"discard\")\n-                    self.assertEqual(discard, \"unmap\", \"discard settings not unmap\")\n+                    if discard: # may not be defined by older qemu/libvirt\n+                        self.assertEqual(discard, \"unmap\", \"discard settings not unmap\")\n \n     def verifyGuestState(self, diskcount):\n         ssh = self.virtual_machine.get_ssh_client(reconnect=True)",
                "raw_url": "https://github.com/apache/cloudstack/raw/15b11a3b27800afcb598f8e97416f0d826cac491/test/integration/smoke/test_deploy_virtio_scsi_vm.py",
                "sha": "260e299d4f990c211c86d120c59e288e5847de2c",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/cloudstack/blob/15b11a3b27800afcb598f8e97416f0d826cac491/test/integration/smoke/test_deploy_vm_root_resize.py",
                "changes": 56,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/test/integration/smoke/test_deploy_vm_root_resize.py?ref=15b11a3b27800afcb598f8e97416f0d826cac491",
                "deletions": 34,
                "filename": "test/integration/smoke/test_deploy_vm_root_resize.py",
                "patch": "@@ -53,8 +53,8 @@ def setUpClass(cls):\n         cls.services = cls.testClient.getParsedTestDataConfig()\n         cls.services[\"mode\"] = cls.zone.networktype\n         cls._cleanup = []\n+        cls.storageID = None\n         cls.updateclone = False\n-        cls.restartreq = False\n         cls.defaultdiskcontroller = \"ide\"\n         cls.template = get_template(cls.api_client, cls.zone.id)\n         if cls.template == FAILED:\n@@ -70,7 +70,8 @@ def setUpClass(cls):\n         list_pool_resp = list_storage_pools(cls.api_client,\n                                             account=cls.account.name,\n                                             domainid=cls.domain.id)\n-        #Identify the storage pool type  and set vmware fullclone to\n+\n+        # Identify the storage pool type  and set vmware fullclone to\n         # true if storage is VMFS\n         if cls.hypervisor == 'vmware':\n              # please make sure url of templateregister dictionary in\n@@ -89,26 +90,13 @@ def setUpClass(cls):\n                                               value=\"scsi\")\n \n                         cls.updateclone = True\n-                        cls.restartreq = True\n-\n-             list_config_fullclone_global_response = list_configurations(\n-                        cls.api_client\n-                        , name=\n-                        \"vmware.create.full.clone\")\n-             if list_config_fullclone_global_response[0].value==\"false\":\n-                        Configurations.update(cls.api_client,\n-                                              \"vmware.create.full.clone\",\n-                                              value=\"true\")\n-\n-                        cls.updateclone = True\n-                        cls.restartreq = True\n \n              for strpool in list_pool_resp:\n                 if strpool.type.lower() == \"vmfs\" or strpool.type.lower()== \"networkfilesystem\":\n                     list_config_storage_response = list_configurations(\n-                        cls.api_client\n-                        , name=\n-                        \"vmware.create.full.clone\",storageid=strpool.id)\n+                        cls.api_client, name=\"vmware.create.full.clone\",\n+                        storageid=strpool.id)\n+\n                     res = validateList(list_config_storage_response)\n                     if res[2]== INVALID_INPUT:\n                         raise Exception(\"Failed to  list configurations \")\n@@ -123,12 +111,16 @@ def setUpClass(cls):\n                                            tags=\"scsi\")\n                         cls.storageID = strpool.id\n                         break\n-             if cls.restartreq:\n-                cls.restartServer()\n \n-                #Giving 30 seconds to management to warm-up,\n-                #Experienced failures when trying to deploy a VM exactly when management came up\n-                time.sleep(30)\n+             list_config_fullclone_global_response = list_configurations(\n+                        cls.api_client, name=\"vmware.create.full.clone\")\n+\n+             if list_config_fullclone_global_response[0].value==\"false\":\n+                        Configurations.update(cls.api_client,\n+                                              \"vmware.create.full.clone\",\n+                                              value=\"true\")\n+                        cls.updateclone = True\n+\n \n         #create a service offering\n         cls.service_offering = ServiceOffering.create(\n@@ -147,21 +139,17 @@ def tearDownClass(cls):\n \n             if cls.updateclone:\n                 Configurations.update(cls.api_client,\n-                                      \"vmware.create.full.clone\",\n-                                      value=\"false\",storageid=cls.storageID)\n+                                              \"vmware.root.disk.controller\",\n+                                              value=cls.defaultdiskcontroller)\n                 Configurations.update(cls.api_client,\n                                               \"vmware.create.full.clone\",\n                                               value=\"false\")\n                 Configurations.update(cls.api_client,\n-                                              \"vmware.root.disk.controller\",\n-                                              value=cls.defaultdiskcontroller)\n-                StoragePool.update(cls.api_client, id=cls.storageID,\n-                                   tags=\"\")\n-                cls.restartServer()\n-\n-                #Giving 30 seconds to management to warm-up,\n-                #Experienced failures when trying to deploy a VM exactly when management came up\n-                time.sleep(30)\n+                                      \"vmware.create.full.clone\",\n+                                      value=\"false\", storageid=cls.storageID)\n+                if cls.storageID:\n+                    StoragePool.update(cls.api_client, id=cls.storageID,\n+                                    tags=\"\")\n \n             cleanup_resources(cls.api_client, cls._cleanup)\n         except Exception as e:",
                "raw_url": "https://github.com/apache/cloudstack/raw/15b11a3b27800afcb598f8e97416f0d826cac491/test/integration/smoke/test_deploy_vm_root_resize.py",
                "sha": "e23bbcec6d2c0f29b0442998301c35b264aea656",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/15b11a3b27800afcb598f8e97416f0d826cac491/test/integration/smoke/test_iso.py",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/test/integration/smoke/test_iso.py?ref=15b11a3b27800afcb598f8e97416f0d826cac491",
                "deletions": 0,
                "filename": "test/integration/smoke/test_iso.py",
                "raw_url": "https://github.com/apache/cloudstack/raw/15b11a3b27800afcb598f8e97416f0d826cac491/test/integration/smoke/test_iso.py",
                "sha": null,
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/15b11a3b27800afcb598f8e97416f0d826cac491/test/integration/smoke/test_list_ids_parameter.py",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/test/integration/smoke/test_list_ids_parameter.py?ref=15b11a3b27800afcb598f8e97416f0d826cac491",
                "deletions": 0,
                "filename": "test/integration/smoke/test_list_ids_parameter.py",
                "raw_url": "https://github.com/apache/cloudstack/raw/15b11a3b27800afcb598f8e97416f0d826cac491/test/integration/smoke/test_list_ids_parameter.py",
                "sha": null,
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/15b11a3b27800afcb598f8e97416f0d826cac491/test/integration/smoke/test_nested_virtualization.py",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/test/integration/smoke/test_nested_virtualization.py?ref=15b11a3b27800afcb598f8e97416f0d826cac491",
                "deletions": 0,
                "filename": "test/integration/smoke/test_nested_virtualization.py",
                "raw_url": "https://github.com/apache/cloudstack/raw/15b11a3b27800afcb598f8e97416f0d826cac491/test/integration/smoke/test_nested_virtualization.py",
                "sha": null,
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/15b11a3b27800afcb598f8e97416f0d826cac491/test/integration/smoke/test_ssvm.py",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/test/integration/smoke/test_ssvm.py?ref=15b11a3b27800afcb598f8e97416f0d826cac491",
                "deletions": 2,
                "filename": "test/integration/smoke/test_ssvm.py",
                "patch": "@@ -73,7 +73,7 @@ def checkRunningAgent():\n                 return list_host_response[0].state == 'Up', None\n             return False, None\n \n-        res, _ = wait_until(3, self.services[\"sleep\"], checkRunningAgent)\n+        res, _ = wait_until(3, 300, checkRunningAgent)\n         if not res:\n             raise Exception(\"Failed to wait for SSVM agent to be Up\")\n \n@@ -99,7 +99,7 @@ def checkRunningState():\n                 return ssvm_response.state == 'Running', ssvm_response\n             return False, None\n \n-        res, ssvm_response = wait_until(3, self.services[\"sleep\"], checkRunningState)\n+        res, ssvm_response = wait_until(3, 300, checkRunningState)\n         if not res:\n             self.fail(\"Failed to reach systemvm state to Running\")\n         return ssvm_response",
                "raw_url": "https://github.com/apache/cloudstack/raw/15b11a3b27800afcb598f8e97416f0d826cac491/test/integration/smoke/test_ssvm.py",
                "sha": "f20003bf23aa7ea8df6629d078d755dc16409810",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/15b11a3b27800afcb598f8e97416f0d826cac491/test/integration/smoke/test_vm_life_cycle.py",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/test/integration/smoke/test_vm_life_cycle.py?ref=15b11a3b27800afcb598f8e97416f0d826cac491",
                "deletions": 0,
                "filename": "test/integration/smoke/test_vm_life_cycle.py",
                "raw_url": "https://github.com/apache/cloudstack/raw/15b11a3b27800afcb598f8e97416f0d826cac491/test/integration/smoke/test_vm_life_cycle.py",
                "sha": null,
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/15b11a3b27800afcb598f8e97416f0d826cac491/test/integration/smoke/test_volumes.py",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/test/integration/smoke/test_volumes.py?ref=15b11a3b27800afcb598f8e97416f0d826cac491",
                "deletions": 0,
                "filename": "test/integration/smoke/test_volumes.py",
                "patch": "@@ -246,6 +246,8 @@ def test_01_create_volume(self):\n                 ret = checkVolumeSize(ssh_handle=ssh,volume_name=volume_name,size_to_verify=vol_sz)\n             elif list_volume_response[0].hypervisor.lower() == \"hyperv\":\n                 ret = checkVolumeSize(ssh_handle=ssh,volume_name=\"/dev/sdb\",size_to_verify=vol_sz)\n+            elif list_volume_response[0].hypervisor.lower() == \"vmware\":\n+                ret = checkVolumeSize(ssh_handle=ssh,volume_name=\"/dev/sda\",size_to_verify=vol_sz)\n             else:\n                 ret = checkVolumeSize(ssh_handle=ssh,volume_name=\"/dev/sdb\",size_to_verify=vol_sz)\n             self.debug(\" Volume Size Expected %s  Actual :%s\" %(vol_sz,ret[1]))",
                "raw_url": "https://github.com/apache/cloudstack/raw/15b11a3b27800afcb598f8e97416f0d826cac491/test/integration/smoke/test_volumes.py",
                "sha": "431dfa9b79744d8bf4f4ea748e32a73554d7fb01",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/15b11a3b27800afcb598f8e97416f0d826cac491/tools/appliance/definitions/systemvmtemplate/configure_acpid.sh",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/tools/appliance/definitions/systemvmtemplate/configure_acpid.sh?ref=15b11a3b27800afcb598f8e97416f0d826cac491",
                "deletions": 10,
                "filename": "tools/appliance/definitions/systemvmtemplate/configure_acpid.sh",
                "patch": "@@ -20,18 +20,11 @@ set -e\n set -x\n \n function configure_acpid() {\n-  grep /usr/local/sbin/power.sh /etc/acpi/events/power && return\n-\n   mkdir -p /etc/acpi/events\n-  cat >> /etc/acpi/events/power << EOF\n-event=button/power.*\n-action=/usr/local/sbin/power.sh \"%e\"\n-EOF\n-  cat >> /usr/local/sbin/power.sh << EOF\n-#!/bin/bash\n-/sbin/poweroff\n+  cat > /etc/acpi/events/powerbtn <<EOF\n+event=button[ /]power\n+action=/sbin/poweroff\n EOF\n-  chmod a+x /usr/local/sbin/power.sh\n }\n \n return 2>/dev/null || configure_acpid",
                "raw_url": "https://github.com/apache/cloudstack/raw/15b11a3b27800afcb598f8e97416f0d826cac491/tools/appliance/definitions/systemvmtemplate/configure_acpid.sh",
                "sha": "6e27eee765754e56c4b3fef09b1143d0f1cb31ab",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/15b11a3b27800afcb598f8e97416f0d826cac491/tools/appliance/definitions/systemvmtemplate/configure_grub.sh",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/tools/appliance/definitions/systemvmtemplate/configure_grub.sh?ref=15b11a3b27800afcb598f8e97416f0d826cac491",
                "deletions": 2,
                "filename": "tools/appliance/definitions/systemvmtemplate/configure_grub.sh",
                "patch": "@@ -20,14 +20,14 @@ set -e\n set -x\n \n function configure_grub() {\n-  cat <<EOF > /etc/default/grub\n+  cat > /etc/default/grub <<EOF\n # If you change this file, run 'update-grub' afterwards to update\n # /boot/grub/grub.cfg.\n \n GRUB_DEFAULT=0\n GRUB_TIMEOUT=0\n GRUB_DISTRIBUTOR=Debian\n-GRUB_CMDLINE_LINUX_DEFAULT=\"\"\n+GRUB_CMDLINE_LINUX_DEFAULT=\"loglevel=4\"\n GRUB_CMDLINE_LINUX=\"console=tty0 console=ttyS0,115200n8 console=hvc0 earlyprintk=xen net.ifnames=0 biosdevname=0 debian-installer=en_US nomodeset\"\n GRUB_CMDLINE_XEN=\"com1=115200 console=com1\"\n GRUB_TERMINAL=\"console serial\"",
                "raw_url": "https://github.com/apache/cloudstack/raw/15b11a3b27800afcb598f8e97416f0d826cac491/tools/appliance/definitions/systemvmtemplate/configure_grub.sh",
                "sha": "53ffb2dc306b8497b743adb9b547395f9a1f6733",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/15b11a3b27800afcb598f8e97416f0d826cac491/tools/appliance/definitions/systemvmtemplate/configure_systemvm_services.sh",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/tools/appliance/definitions/systemvmtemplate/configure_systemvm_services.sh?ref=15b11a3b27800afcb598f8e97416f0d826cac491",
                "deletions": 0,
                "filename": "tools/appliance/definitions/systemvmtemplate/configure_systemvm_services.sh",
                "patch": "@@ -52,6 +52,15 @@ function do_signature() {\n   echo \"Cloudstack Release $CLOUDSTACK_RELEASE $(date)\" > /etc/cloudstack-release\n }\n \n+function configure_issue() {\n+  cat > /etc/issue <<EOF\n+   __?.o/  Apache CloudStack SystemVM $CLOUDSTACK_RELEASE\n+  (  )#    https://cloudstack.apache.org\n+ (___(_)   Debian GNU/Linux 9 \\n \\l\n+\n+EOF\n+}\n+\n function configure_strongswan() {\n   # change the charon stroke timeout from 3 minutes to 30 seconds\n   sed -i \"s/# timeout = 0/timeout = 30000/\" /etc/strongswan.d/charon/stroke.conf\n@@ -92,6 +101,7 @@ function configure_services() {\n \n   configure_apache2\n   configure_strongswan\n+  configure_issue\n }\n \n return 2>/dev/null || configure_services",
                "raw_url": "https://github.com/apache/cloudstack/raw/15b11a3b27800afcb598f8e97416f0d826cac491/tools/appliance/definitions/systemvmtemplate/configure_systemvm_services.sh",
                "sha": "6e2e3059a534b62e490b9ab0d8af737c2a4d02f8",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/15b11a3b27800afcb598f8e97416f0d826cac491/tools/appliance/definitions/systemvmtemplate/install_systemvm_packages.sh",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/tools/appliance/definitions/systemvmtemplate/install_systemvm_packages.sh?ref=15b11a3b27800afcb598f8e97416f0d826cac491",
                "deletions": 2,
                "filename": "tools/appliance/definitions/systemvmtemplate/install_systemvm_packages.sh",
                "patch": "@@ -53,10 +53,10 @@ function install_packages() {\n   fi\n \n   ${apt_get} install grub-legacy \\\n-    rsyslog logrotate cron net-tools ifupdown tmux vim netbase iptables \\\n+    rsyslog logrotate cron net-tools ifupdown tmux vim htop netbase iptables \\\n     openssh-server e2fsprogs tcpdump socat wget \\\n     python bzip2 sed gawk diffutils grep gzip less tar telnet ftp rsync traceroute psmisc lsof procps \\\n-    inetutils-ping iputils-arping httping  curl \\\n+    inetutils-ping iputils-arping httping curl \\\n     dnsutils zip unzip ethtool uuid file iproute acpid sudo \\\n     sysstat python-netaddr \\\n     apache2 ssl-cert \\",
                "raw_url": "https://github.com/apache/cloudstack/raw/15b11a3b27800afcb598f8e97416f0d826cac491/tools/appliance/definitions/systemvmtemplate/install_systemvm_packages.sh",
                "sha": "30ad66dd4efbf5e68311b30026e43628d0435ea8",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/15b11a3b27800afcb598f8e97416f0d826cac491/tools/appliance/definitions/systemvmtemplate/preseed.cfg",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/tools/appliance/definitions/systemvmtemplate/preseed.cfg?ref=15b11a3b27800afcb598f8e97416f0d826cac491",
                "deletions": 3,
                "filename": "tools/appliance/definitions/systemvmtemplate/preseed.cfg",
                "patch": "@@ -57,13 +57,13 @@ d-i partman-auto/method string regular\n d-i partman-auto/choose_recipe select atomic\n d-i partman-auto/expert_recipe string                         \\\n       boot-root ::                                            \\\n-              100 50 200 ext2                                 \\\n+              50 50 100 ext2                                  \\\n                       $primary{ } $bootable{ }                \\\n                       method{ format } format{ }              \\\n                       use_filesystem{ } filesystem{ ext2 }    \\\n                       mountpoint{ /boot }                     \\\n               .                                               \\\n-              1450 40 1600 ext4                               \\\n+              1300 40 1600 ext4                               \\\n                       method{ format } format{ }              \\\n                       use_filesystem{ } filesystem{ ext4 }    \\\n                       mountpoint{ / }                         \\\n@@ -78,7 +78,7 @@ d-i partman-auto/expert_recipe string                         \\\n                       use_filesystem{ } filesystem{ ext4 }    \\\n                       mountpoint{ /tmp }                      \\\n               .                                               \\\n-              100 100 1024 linux-swap                         \\\n+              256 100 1024 linux-swap                         \\\n                       method{ swap } format{ }                \\\n               .\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/15b11a3b27800afcb598f8e97416f0d826cac491/tools/appliance/definitions/systemvmtemplate/preseed.cfg",
                "sha": "0f6c265f19ccf265d30c64390d3e9f4764ce55d5",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/15b11a3b27800afcb598f8e97416f0d826cac491/ui/scripts/network.js",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/ui/scripts/network.js?ref=15b11a3b27800afcb598f8e97416f0d826cac491",
                "deletions": 1,
                "filename": "ui/scripts/network.js",
                "patch": "@@ -844,7 +844,7 @@\n                                 'Released': 'off',\n                                 'Destroy': 'off',\n                                 'Shutdown': 'off',\n-                                'Setup': 'warning',\n+                                'Setup': 'on',\n                                 'Implemented': 'on'\n                             }\n                         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/15b11a3b27800afcb598f8e97416f0d826cac491/ui/scripts/network.js",
                "sha": "7dd459dc91585cb85e9bea8fe624e98789ccc244",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-10013: Fix VMware related issues and fix misc tests\n\nThis fixes test failures around VMware with the new systemvmtemplate.\nIn addition:\n\n- Does not skip rVR related test cases for VMware\n- Removes rc.local\n- Processes unprocessed cmd_line.json\n- Fixed NPEs around VMware tests/code\n- On VMware, use udevadm to reconfigure nic/mac address than rebooting\n- Fix proper acpi shutdown script for faster systemvm shutdowns\n- Give at least 256MB of swap for VRs to avoid OOM on VMware\n- Fixes smoke tests for environment related failures\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/ce3303212b5f9639ee91db52972fc9fd4b9a3c68",
        "patched_files": [
            "configure_acpid.sh",
            "install_systemvm_packages.sh",
            "keepalived.conf.templ",
            "test_nested_virtualization.py",
            "preseed.cfg",
            "router.sh",
            "utilities.py",
            "network.js",
            "configure_grub.sh",
            "log4j-cloud.xml",
            "test_deploy_virtio_scsi_vm.py",
            "rc.local",
            "test_vm_life_cycle.py",
            "VirtualMachineManagerImpl.java",
            "CsDhcp.py",
            "update_config.py",
            "test_list_ids_parameter.py",
            "test_iso.py",
            "common.sh",
            "test_volumes.py",
            "configure_systemvm_services.sh",
            "test_ssvm.py",
            "vpcrouter.sh",
            "test_deploy_vm_root_resize.py",
            "issue"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_15c93ba": {
        "bug_id": "cloudstack_15c93ba",
        "commit": "https://github.com/apache/cloudstack/commit/15c93ba9b77b15a268dfe618277a21331edfe0d0",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/15c93ba9b77b15a268dfe618277a21331edfe0d0/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/UserVmManagerImpl.java?ref=15c93ba9b77b15a268dfe618277a21331edfe0d0",
                "deletions": 1,
                "filename": "server/src/com/cloud/vm/UserVmManagerImpl.java",
                "patch": "@@ -1237,7 +1237,7 @@ private boolean upgradeRunningVirtualMachine(Long vmId, Long newServiceOfferingI\n \n         //Check if its a scale \"up\"\n         ServiceOffering newServiceOffering = _configMgr.getServiceOffering(newServiceOfferingId);\n-        ServiceOffering currentServiceOffering = _configMgr.getServiceOffering(vmInstance.getServiceOfferingId());\n+        ServiceOffering currentServiceOffering = _offeringDao.findByIdIncludingRemoved(vmInstance.getServiceOfferingId());\n         int newCpu = newServiceOffering.getCpu();\n         int newMemory = newServiceOffering.getRamSize();\n         int newSpeed = newServiceOffering.getSpeed();",
                "raw_url": "https://github.com/apache/cloudstack/raw/15c93ba9b77b15a268dfe618277a21331edfe0d0/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "sha": "b710c085ca37108472980a1b95a14a333333991f",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/15c93ba9b77b15a268dfe618277a21331edfe0d0/server/test/com/cloud/vm/UserVmManagerTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/test/com/cloud/vm/UserVmManagerTest.java?ref=15c93ba9b77b15a268dfe618277a21331edfe0d0",
                "deletions": 1,
                "filename": "server/test/com/cloud/vm/UserVmManagerTest.java",
                "patch": "@@ -35,6 +35,7 @@\n import java.util.List;\n import java.util.UUID;\n \n+import com.cloud.service.dao.ServiceOfferingDao;\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mock;\n@@ -107,6 +108,7 @@\n     @Mock VolumeVO _volumeMock;\n     @Mock List<VolumeVO> _rootVols;\n     @Mock Account _accountMock2;\n+    @Mock ServiceOfferingDao _offeringDao;\n     @Before\n     public void setup(){\n         MockitoAnnotations.initMocks(this);\n@@ -122,6 +124,7 @@ public void setup(){\n         _userVmMgr._userDao = _userDao;\n         _userVmMgr._accountMgr = _accountMgr;\n         _userVmMgr._configMgr = _configMgr;\n+        _userVmMgr._offeringDao= _offeringDao;\n         _userVmMgr._capacityMgr = _capacityMgr;\n         _userVmMgr._scaleRetry = 2;\n \n@@ -356,7 +359,7 @@ public void testScaleVMF2()  throws Exception {\n         ServiceOffering so2 =  getSvcoffering(256);\n \n         when(_configMgr.getServiceOffering(anyLong())).thenReturn(so1);\n-        when(_configMgr.getServiceOffering(1L)).thenReturn(so1);\n+        when(_offeringDao.findByIdIncludingRemoved(anyLong())).thenReturn((ServiceOfferingVO) so1);\n \n         Account account = new AccountVO(\"testaccount\", 1L, \"networkdomain\", (short)0, UUID.randomUUID().toString());\n         UserVO user = new UserVO(1, \"testuser\", \"password\", \"firstname\", \"lastName\", \"email\", \"timezone\", UUID.randomUUID().toString());",
                "raw_url": "https://github.com/apache/cloudstack/raw/15c93ba9b77b15a268dfe618277a21331edfe0d0/server/test/com/cloud/vm/UserVmManagerTest.java",
                "sha": "e74188f25a38da94190360be32e527f3a949184e",
                "status": "modified"
            }
        ],
        "message": "=CLOUDSTACK-4068 scaling up user vm and system vm is failing with NPE if current service offering is deleted\nNitin Mehta <nitin.mehta@citrix.com>",
        "parent": "https://github.com/apache/cloudstack/commit/3f79a6730f8245229185710c0926d16a52bfa285",
        "patched_files": [
            "UserVmManager.java",
            "UserVmManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "UserVmManagerTest.java"
        ]
    },
    "cloudstack_16de4a7": {
        "bug_id": "cloudstack_16de4a7",
        "commit": "https://github.com/apache/cloudstack/commit/16de4a71761efe69053fefb6f77f16ddfff63c0f",
        "file": [
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/cloudstack/blob/16de4a71761efe69053fefb6f77f16ddfff63c0f/utils/src/com/cloud/utils/net/NetUtils.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/com/cloud/utils/net/NetUtils.java?ref=16de4a71761efe69053fefb6f77f16ddfff63c0f",
                "deletions": 23,
                "filename": "utils/src/com/cloud/utils/net/NetUtils.java",
                "patch": "@@ -19,16 +19,6 @@\n \n package com.cloud.utils.net;\n \n-import com.cloud.utils.IteratorUtil;\n-import com.cloud.utils.Pair;\n-import com.cloud.utils.script.Script;\n-import com.googlecode.ipv6.IPv6Address;\n-import com.googlecode.ipv6.IPv6AddressRange;\n-import com.googlecode.ipv6.IPv6Network;\n-import org.apache.commons.lang.SystemUtils;\n-import org.apache.commons.net.util.SubnetUtils;\n-import org.apache.log4j.Logger;\n-\n import java.io.BufferedReader;\n import java.io.IOException;\n import java.io.InputStreamReader;\n@@ -51,6 +41,18 @@\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+import org.apache.commons.lang.SystemUtils;\n+import org.apache.commons.net.util.SubnetUtils;\n+import org.apache.log4j.Logger;\n+\n+import com.googlecode.ipv6.IPv6Address;\n+import com.googlecode.ipv6.IPv6AddressRange;\n+import com.googlecode.ipv6.IPv6Network;\n+\n+import com.cloud.utils.IteratorUtil;\n+import com.cloud.utils.Pair;\n+import com.cloud.utils.script.Script;\n+\n public class NetUtils {\n     protected final static Logger s_logger = Logger.getLogger(NetUtils.class);\n     public final static String HTTP_PORT = \"80\";\n@@ -321,6 +323,8 @@ public static String getMacAddress(InetAddress address) {\n             }\n         } catch (SocketException e) {\n             s_logger.error(\"SocketException when trying to retrieve MAC address\", e);\n+        } finally {\n+            formatter.close();\n         }\n         return sb.toString();\n     }\n@@ -456,6 +460,7 @@ public static String byte2Mac(byte[] m) {\n         StringBuilder result = new StringBuilder(17);\n         Formatter formatter = new Formatter(result);\n         formatter.format(\"%02x:%02x:%02x:%02x:%02x:%02x\", m[0], m[1], m[2], m[3], m[4], m[5]);\n+        formatter.close();\n         return result.toString();\n     }\n \n@@ -464,7 +469,7 @@ public static String long2Mac(long macAddress) {\n         Formatter formatter = new Formatter(result);\n         formatter.format(\"%02x:%02x:%02x:%02x:%02x:%02x\", (macAddress >> 40) & 0xff, (macAddress >> 32) & 0xff, (macAddress >> 24) & 0xff, (macAddress >> 16) & 0xff,\n                 (macAddress >> 8) & 0xff, (macAddress & 0xff));\n-\n+        formatter.close();\n         return result.toString();\n     }\n \n@@ -1307,20 +1312,14 @@ public static BigInteger countIp6InRange(String ip6Range) {\n         if (ips.length > 1) {\n             endIp = ips[1];\n         }\n-        IPv6Address start, end;\n         try {\n-            start = IPv6Address.fromString(startIp);\n-            end = IPv6Address.fromString(endIp);\n-        } catch (IllegalArgumentException ex) {\n-            return null;\n-        }\n-        BigInteger startInt = convertIPv6AddressToBigInteger(start);\n-        BigInteger endInt = convertIPv6AddressToBigInteger(end);\n-        if (endInt != null) {\n-            if (startInt == null || startInt.compareTo(endInt) > 0) {\n-                return null;\n+            BigInteger startInt = convertIPv6AddressToBigInteger(IPv6Address.fromString(startIp));\n+            BigInteger endInt = convertIPv6AddressToBigInteger(IPv6Address.fromString(endIp));\n+            if (endInt != null && startInt != null && startInt.compareTo(endInt) <= 0) {\n+                return endInt.subtract(startInt).add(BigInteger.ONE);\n             }\n-            return endInt.subtract(startInt).add(BigInteger.ONE);\n+        } catch (IllegalArgumentException ex) {\n+            s_logger.error(\"Failed to convert a string to an IPv6 address\", ex);\n         }\n         return null;\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/16de4a71761efe69053fefb6f77f16ddfff63c0f/utils/src/com/cloud/utils/net/NetUtils.java",
                "sha": "3ce369784525e393d9b3915c18e9d9efd8b4c053",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/cloudstack/blob/16de4a71761efe69053fefb6f77f16ddfff63c0f/utils/test/com/cloud/utils/net/NetUtilsTest.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/test/com/cloud/utils/net/NetUtilsTest.java?ref=16de4a71761efe69053fefb6f77f16ddfff63c0f",
                "deletions": 10,
                "filename": "utils/test/com/cloud/utils/net/NetUtilsTest.java",
                "patch": "@@ -19,14 +19,6 @@\n \n package com.cloud.utils.net;\n \n-import com.googlecode.ipv6.IPv6Address;\n-import org.apache.log4j.Logger;\n-import org.junit.Test;\n-\n-import java.math.BigInteger;\n-import java.util.SortedSet;\n-import java.util.TreeSet;\n-\n import static org.hamcrest.Matchers.anyOf;\n import static org.hamcrest.Matchers.contains;\n import static org.hamcrest.Matchers.equalTo;\n@@ -39,6 +31,15 @@\n import static org.junit.Assert.assertThat;\n import static org.junit.Assert.assertTrue;\n \n+import java.math.BigInteger;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+\n+import org.apache.log4j.Logger;\n+import org.junit.Test;\n+\n+import com.googlecode.ipv6.IPv6Address;\n+\n public class NetUtilsTest {\n \n     private static final Logger s_logger = Logger.getLogger(NetUtilsTest.class);\n@@ -138,8 +139,22 @@ public void testGetIp6FromRange() {\n \n     @Test\n     public void testCountIp6InRange() {\n-        assertEquals(NetUtils.countIp6InRange(\"1234:5678::1-1234:5678::2\"), new BigInteger(\"2\"));\n-        assertEquals(NetUtils.countIp6InRange(\"1234:5678::2-1234:5678::0\"), null);\n+        assertEquals(new BigInteger(\"2\"), NetUtils.countIp6InRange(\"1234:5678::1-1234:5678::2\"));\n+    }\n+\n+    @Test\n+    public void testCountIp6InRangeWithInvalidRange() {\n+        assertEquals(null, NetUtils.countIp6InRange(\"1234:5678::2-1234:5678::0\"));\n+    }\n+\n+    @Test\n+    public void testCountIp6InRangeWithNullStart() {\n+        assertEquals(null, NetUtils.countIp6InRange(\"-1234:5678::0\"));\n+    }\n+\n+    @Test\n+    public void testCountIp6InRangeWithNoEnd() {\n+        assertEquals(new BigInteger(\"1\"), NetUtils.countIp6InRange(\"1234:5678::2\"));\n     }\n \n     @Test",
                "raw_url": "https://github.com/apache/cloudstack/raw/16de4a71761efe69053fefb6f77f16ddfff63c0f/utils/test/com/cloud/utils/net/NetUtilsTest.java",
                "sha": "e48faa1842aabb707e2f6a3c3dbd520be77dd32b",
                "status": "modified"
            }
        ],
        "message": "Fix for potential NPE",
        "parent": "https://github.com/apache/cloudstack/commit/638da54fcee53cea305c0e730fef28c914298731",
        "patched_files": [
            "NetUtils.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "NetUtilsTest.java"
        ]
    },
    "cloudstack_1b8c464": {
        "bug_id": "cloudstack_1b8c464",
        "commit": "https://github.com/apache/cloudstack/commit/1b8c464e6b224bc50e749ba8b3170d19816e3e1c",
        "file": [
            {
                "additions": 71,
                "blob_url": "https://github.com/apache/cloudstack/blob/1b8c464e6b224bc50e749ba8b3170d19816e3e1c/engine/orchestration/src/com/cloud/agent/manager/AgentManagerImpl.java",
                "changes": 142,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/agent/manager/AgentManagerImpl.java?ref=1b8c464e6b224bc50e749ba8b3170d19816e3e1c",
                "deletions": 71,
                "filename": "engine/orchestration/src/com/cloud/agent/manager/AgentManagerImpl.java",
                "patch": "@@ -121,10 +121,8 @@\n     protected static final Logger status_logger = Logger.getLogger(Status.class);\n \n     /**\n-     * _agents is a ConcurrentHashMap, but it is used from within a synchronized block.\n-     * This will be reported by findbugs as JLM_JSR166_UTILCONCURRENT_MONITORENTER.\n-     * Maybe a ConcurrentHashMap is not the right thing to use here, but i'm not sure\n-     * so i leave it alone.\n+     * _agents is a ConcurrentHashMap, but it is used from within a synchronized block. This will be reported by findbugs as JLM_JSR166_UTILCONCURRENT_MONITORENTER. Maybe a\n+     * ConcurrentHashMap is not the right thing to use here, but i'm not sure so i leave it alone.\n      */\n     protected ConcurrentHashMap<Long, AgentAttache> _agents = new ConcurrentHashMap<Long, AgentAttache>(10007);\n     protected List<Pair<Integer, Listener>> _hostMonitors = new ArrayList<Pair<Integer, Listener>>(17);\n@@ -176,27 +174,27 @@\n     ResourceManager _resourceMgr;\n \n     protected final ConfigKey<Integer> Workers = new ConfigKey<Integer>(\"Advanced\", Integer.class, \"workers\", \"5\",\n-            \"Number of worker threads handling remote agent connections.\", false);\n+                    \"Number of worker threads handling remote agent connections.\", false);\n     protected final ConfigKey<Integer> Port = new ConfigKey<Integer>(\"Advanced\", Integer.class, \"port\", \"8250\", \"Port to listen on for remote agent connections.\", false);\n     protected final ConfigKey<Integer> PingInterval = new ConfigKey<Integer>(\"Advanced\", Integer.class, \"ping.interval\", \"60\",\n-            \"Interval to send application level pings to make sure the connection is still working\", false);\n+                    \"Interval to send application level pings to make sure the connection is still working\", false);\n     protected final ConfigKey<Float> PingTimeout = new ConfigKey<Float>(\"Advanced\", Float.class, \"ping.timeout\", \"2.5\",\n-            \"Multiplier to ping.interval before announcing an agent has timed out\", true);\n+                    \"Multiplier to ping.interval before announcing an agent has timed out\", true);\n     protected final ConfigKey<Integer> AlertWait = new ConfigKey<Integer>(\"Advanced\", Integer.class, \"alert.wait\", \"1800\",\n-            \"Seconds to wait before alerting on a disconnected agent\", true);\n+                    \"Seconds to wait before alerting on a disconnected agent\", true);\n     protected final ConfigKey<Integer> DirectAgentLoadSize = new ConfigKey<Integer>(\"Advanced\", Integer.class, \"direct.agent.load.size\", \"16\",\n-            \"The number of direct agents to load each time\", false);\n+                    \"The number of direct agents to load each time\", false);\n     protected final ConfigKey<Integer> DirectAgentPoolSize = new ConfigKey<Integer>(\"Advanced\", Integer.class, \"direct.agent.pool.size\", \"500\",\n-            \"Default size for DirectAgentPool\", false);\n+                    \"Default size for DirectAgentPool\", false);\n     protected final ConfigKey<Float> DirectAgentThreadCap = new ConfigKey<Float>(\"Advanced\", Float.class, \"direct.agent.thread.cap\", \"1\",\n-            \"Percentage (as a value between 0 and 1) of direct.agent.pool.size to be used as upper thread cap for a single direct agent to process requests\", false);\n+                    \"Percentage (as a value between 0 and 1) of direct.agent.pool.size to be used as upper thread cap for a single direct agent to process requests\", false);\n     protected final ConfigKey<Boolean> CheckTxnBeforeSending = new ConfigKey<Boolean>(\n-            \"Developer\",\n-            Boolean.class,\n-            \"check.txn.before.sending.agent.commands\",\n-            \"false\",\n-            \"This parameter allows developers to enable a check to see if a transaction wraps commands that are sent to the resource.  This is not to be enabled on production systems.\",\n-            true);\n+                    \"Developer\",\n+                    Boolean.class,\n+                    \"check.txn.before.sending.agent.commands\",\n+                    \"false\",\n+                    \"This parameter allows developers to enable a check to see if a transaction wraps commands that are sent to the resource.  This is not to be enabled on production systems.\",\n+                    true);\n \n     @Override\n     public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n@@ -208,15 +206,15 @@ public boolean configure(final String name, final Map<String, Object> params) th\n         _nodeId = ManagementServerNode.getManagementServerId();\n         s_logger.info(\"Configuring AgentManagerImpl. management server node id(msid): \" + _nodeId);\n \n-        final long lastPing = (System.currentTimeMillis() >> 10) - (long)(PingTimeout.value() * PingInterval.value());\n+        final long lastPing = (System.currentTimeMillis() >> 10) - (long) (PingTimeout.value() * PingInterval.value());\n         _hostDao.markHostsAsDisconnected(_nodeId, lastPing);\n \n         registerForHostEvents(new BehindOnPingListener(), true, true, false);\n \n         _executor = new ThreadPoolExecutor(threads, threads, 60l, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(), new NamedThreadFactory(\"AgentTaskPool\"));\n \n         _connectExecutor = new ThreadPoolExecutor(100, 500, 60l, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(), new NamedThreadFactory(\"AgentConnectTaskPool\"));\n-        //allow core threads to time out even when there are no items in the queue\n+        // allow core threads to time out even when there are no items in the queue\n         _connectExecutor.allowCoreThreadTimeOut(true);\n \n         _connection = new NioServer(\"AgentManager\", Port.value(), Workers.value() + 10, this);\n@@ -235,7 +233,7 @@ public boolean configure(final String name, final Map<String, Object> params) th\n     }\n \n     protected long getTimeout() {\n-        return (long)(PingTimeout.value() * PingInterval.value());\n+        return (long) (PingTimeout.value() * PingInterval.value());\n     }\n \n     @Override\n@@ -436,8 +434,8 @@ private void setEmptyAnswers(final Commands commands, final Command[] cmds) {\n         if (CheckTxnBeforeSending.value()) {\n             if (!noDbTxn()) {\n                 throw new CloudRuntimeException(\"We do not allow transactions to be wrapped around commands sent to be executed on remote agents.  \"\n-                        + \"We cannot predict how long it takes a command to complete.  \"\n-                        + \"The transaction may be rolled back because the connection took too long.\");\n+                                + \"We cannot predict how long it takes a command to complete.  \"\n+                                + \"The transaction may be rolled back because the connection took too long.\");\n             }\n         } else {\n             assert noDbTxn() : \"I know, I know.  Why are we so strict as to not allow txn across an agent call?  ...  Why are we so cruel ... Why are we such a dictator .... Too bad... Sorry...but NO AGENT COMMANDS WRAPPED WITHIN DB TRANSACTIONS!\";\n@@ -552,15 +550,15 @@ protected AgentAttache notifyMonitorsOfConnection(final AgentAttache attache, fi\n                     monitor.second().processConnect(host, cmd[i], forRebalance);\n                 } catch (final Exception e) {\n                     if (e instanceof ConnectionException) {\n-                        final ConnectionException ce = (ConnectionException)e;\n+                        final ConnectionException ce = (ConnectionException) e;\n                         if (ce.isSetupError()) {\n                             s_logger.warn(\"Monitor \" + monitor.second().getClass().getSimpleName() + \" says there is an error in the connect process for \" + hostId +\n-                                    \" due to \" + e.getMessage());\n+                                            \" due to \" + e.getMessage());\n                             handleDisconnectWithoutInvestigation(attache, Event.AgentDisconnected, true, true);\n                             throw ce;\n                         } else {\n                             s_logger.info(\"Monitor \" + monitor.second().getClass().getSimpleName() + \" says not to continue the connect process for \" + hostId +\n-                                    \" due to \" + e.getMessage());\n+                                            \" due to \" + e.getMessage());\n                             handleDisconnectWithoutInvestigation(attache, Event.ShutdownRequested, true, true);\n                             return attache;\n                         }\n@@ -569,7 +567,7 @@ protected AgentAttache notifyMonitorsOfConnection(final AgentAttache attache, fi\n                         throw new CloudRuntimeException(\"Unable to connect \" + attache.getId(), e);\n                     } else {\n                         s_logger.error(\"Monitor \" + monitor.second().getClass().getSimpleName() + \" says there is an error in the connect process for \" + hostId +\n-                                \" due to \" + e.getMessage(), e);\n+                                        \" due to \" + e.getMessage(), e);\n                         handleDisconnectWithoutInvestigation(attache, Event.AgentDisconnected, true, true);\n                         throw new CloudRuntimeException(\"Unable to connect \" + attache.getId(), e);\n                     }\n@@ -622,7 +620,7 @@ private ServerResource loadResourcesWithoutHypervisor(final HostVO host) {\n         try {\n             final Class<?> clazz = Class.forName(resourceName);\n             final Constructor<?> constructor = clazz.getConstructor();\n-            resource = (ServerResource)constructor.newInstance();\n+            resource = (ServerResource) constructor.newInstance();\n         } catch (final ClassNotFoundException e) {\n             s_logger.warn(\"Unable to find class \" + host.getResource(), e);\n         } catch (final InstantiationException e) {\n@@ -690,7 +688,7 @@ protected boolean loadDirectlyConnectedHost(final HostVO host, final boolean for\n         boolean initialized = false;\n         ServerResource resource = null;\n         try {\n-            //load the respective discoverer\n+            // load the respective discoverer\n             final Discoverer discoverer = _resourceMgr.getMatchingDiscover(host.getHypervisorType());\n             if (discoverer == null) {\n                 s_logger.info(\"Could not to find a Discoverer to load the resource: \" + host.getId() + \" for hypervisor type: \" + host.getHypervisorType());\n@@ -804,7 +802,7 @@ protected boolean handleDisconnectWithoutInvestigation(final AgentAttache attach\n         }\n \n         removeAgent(attache, nextStatus);\n-        //update the DB\n+        // update the DB\n         if (host != null && transitState) {\n             disconnectAgent(host, event, _nodeId);\n         }\n@@ -821,9 +819,9 @@ protected boolean handleDisconnectWithInvestigation(final AgentAttache attache,\n             try {\n                 nextStatus = host.getStatus().getNextStatus(event);\n             } catch (final NoTransitionException ne) {\n-                /* Agent may be currently in status of Down, Alert, Removed, namely there is no next status for some events.\n-                 * Why this can happen? Ask God not me. I hate there was no piece of comment for code handling race condition.\n-                 * God knew what race condition the code dealt with!\n+                /*\n+                 * Agent may be currently in status of Down, Alert, Removed, namely there is no next status for some events. Why this can happen? Ask God not me. I hate there was\n+                 * no piece of comment for code handling race condition. God knew what race condition the code dealt with!\n                  */\n                 s_logger.debug(\"Caught exception while getting agent's next status\", ne);\n             }\n@@ -845,7 +843,7 @@ protected boolean handleDisconnectWithInvestigation(final AgentAttache attache,\n                 }\n \n                 final Status currentStatus = host.getStatus();\n-                s_logger.info(\"The agent \" + hostId + \" state determined is \" + determinedState);\n+                s_logger.info(\"The agent from host \" + hostId + \" state determined is \" + determinedState);\n \n                 if (determinedState == Status.Down) {\n                     final String message = \"Host is down: \" + host.getId() + \"-\" + host.getName() + \". Starting HA on the VMs\";\n@@ -875,17 +873,18 @@ protected boolean handleDisconnectWithInvestigation(final AgentAttache attache,\n                         final String hostDesc = \"name: \" + host.getName() + \" (id:\" + host.getId() + \"), availability zone: \" + dcVO.getName() + \", pod: \" + podVO.getName();\n                         if (host.getType() != Host.Type.SecondaryStorage && host.getType() != Host.Type.ConsoleProxy) {\n                             _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_HOST, host.getDataCenterId(), host.getPodId(), \"Host disconnected, \" + hostDesc,\n-                                    \"If the agent for host [\" + hostDesc + \"] is not restarted within \" + AlertWait + \" seconds, host will go to Alert state\");\n+                                            \"If the agent for host [\" + hostDesc + \"] is not restarted within \" + AlertWait + \" seconds, host will go to Alert state\");\n                         }\n                         event = Status.Event.AgentDisconnected;\n                     }\n                 } else {\n                     // if we end up here we are in alert state, send an alert\n                     final DataCenterVO dcVO = _dcDao.findById(host.getDataCenterId());\n                     final HostPodVO podVO = _podDao.findById(host.getPodId());\n-                    final String hostDesc = \"name: \" + host.getName() + \" (id:\" + host.getId() + \"), availability zone: \" + dcVO.getName() + \", pod: \" + podVO.getName();\n+                    final String podName = podVO != null ? podVO.getName() : \"NO POD\";\n+                    final String hostDesc = \"name: \" + host.getName() + \" (id:\" + host.getId() + \"), availability zone: \" + dcVO.getName() + \", pod: \" + podName;\n                     _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_HOST, host.getDataCenterId(), host.getPodId(), \"Host in ALERT state, \" + hostDesc,\n-                            \"In availability zone \" + host.getDataCenterId() + \", host is in alert state: \" + host.getId() + \"-\" + host.getName());\n+                                    \"In availability zone \" + host.getDataCenterId() + \", host is in alert state: \" + host.getId() + \"-\" + host.getName());\n                 }\n             } else {\n                 s_logger.debug(\"The next status of agent \" + host.getId() + \" is not Alert, no need to investigate what happened\");\n@@ -1130,7 +1129,7 @@ protected void runInContext() {\n             _request.logD(\"Processing the first command \");\n             final StartupCommand[] startups = new StartupCommand[_cmds.length];\n             for (int i = 0; i < _cmds.length; i++) {\n-                startups[i] = (StartupCommand)_cmds[i];\n+                startups[i] = (StartupCommand) _cmds[i];\n             }\n \n             final AgentAttache attache = handleConnectedAgent(_link, startups, _request);\n@@ -1141,14 +1140,15 @@ protected void runInContext() {\n     }\n \n     protected void connectAgent(final Link link, final Command[] cmds, final Request request) {\n-        //send startupanswer to agent in the very beginning, so agent can move on without waiting for the answer for an undetermined time, if we put this logic into another thread pool.\n+        // send startupanswer to agent in the very beginning, so agent can move on without waiting for the answer for an undetermined time, if we put this logic into another\n+        // thread pool.\n         final StartupAnswer[] answers = new StartupAnswer[cmds.length];\n         Command cmd;\n         for (int i = 0; i < cmds.length; i++) {\n             cmd = cmds[i];\n             if (cmd instanceof StartupRoutingCommand || cmd instanceof StartupProxyCommand || cmd instanceof StartupSecondaryStorageCommand ||\n-                    cmd instanceof StartupStorageCommand) {\n-                answers[i] = new StartupAnswer((StartupCommand)cmds[i], 0, getPingInterval());\n+                            cmd instanceof StartupStorageCommand) {\n+                answers[i] = new StartupAnswer((StartupCommand) cmds[i], 0, getPingInterval());\n                 break;\n             }\n         }\n@@ -1168,7 +1168,7 @@ public AgentHandler(final Task.Type type, final Link link, final byte[] data) {\n         }\n \n         protected void processRequest(final Link link, final Request request) {\n-            final AgentAttache attache = (AgentAttache)link.attachment();\n+            final AgentAttache attache = (AgentAttache) link.attachment();\n             final Command[] cmds = request.getCommands();\n             Command cmd = cmds[0];\n             boolean logD = true;\n@@ -1177,7 +1177,7 @@ protected void processRequest(final Link link, final Request request) {\n                 if (!(cmd instanceof StartupCommand)) {\n                     s_logger.warn(\"Throwing away a request because it came through as the first command on a connect: \" + request);\n                 } else {\n-                    //submit the task for execution\n+                    // submit the task for execution\n                     request.logD(\"Scheduling the first command \");\n                     connectAgent(link, cmds, request);\n                 }\n@@ -1207,40 +1207,40 @@ protected void processRequest(final Link link, final Request request) {\n                 Answer answer = null;\n                 try {\n                     if (cmd instanceof StartupRoutingCommand) {\n-                        final StartupRoutingCommand startup = (StartupRoutingCommand)cmd;\n+                        final StartupRoutingCommand startup = (StartupRoutingCommand) cmd;\n                         answer = new StartupAnswer(startup, attache.getId(), getPingInterval());\n                     } else if (cmd instanceof StartupProxyCommand) {\n-                        final StartupProxyCommand startup = (StartupProxyCommand)cmd;\n+                        final StartupProxyCommand startup = (StartupProxyCommand) cmd;\n                         answer = new StartupAnswer(startup, attache.getId(), getPingInterval());\n                     } else if (cmd instanceof StartupSecondaryStorageCommand) {\n-                        final StartupSecondaryStorageCommand startup = (StartupSecondaryStorageCommand)cmd;\n+                        final StartupSecondaryStorageCommand startup = (StartupSecondaryStorageCommand) cmd;\n                         answer = new StartupAnswer(startup, attache.getId(), getPingInterval());\n                     } else if (cmd instanceof StartupStorageCommand) {\n-                        final StartupStorageCommand startup = (StartupStorageCommand)cmd;\n+                        final StartupStorageCommand startup = (StartupStorageCommand) cmd;\n                         answer = new StartupAnswer(startup, attache.getId(), getPingInterval());\n                     } else if (cmd instanceof ShutdownCommand) {\n-                        final ShutdownCommand shutdown = (ShutdownCommand)cmd;\n+                        final ShutdownCommand shutdown = (ShutdownCommand) cmd;\n                         final String reason = shutdown.getReason();\n                         s_logger.info(\"Host \" + attache.getId() + \" has informed us that it is shutting down with reason \" + reason + \" and detail \" +\n-                                shutdown.getDetail());\n+                                        shutdown.getDetail());\n                         if (reason.equals(ShutdownCommand.Update)) {\n-                            //disconnectWithoutInvestigation(attache, Event.UpdateNeeded);\n+                            // disconnectWithoutInvestigation(attache, Event.UpdateNeeded);\n                             throw new CloudRuntimeException(\"Agent update not implemented\");\n                         } else if (reason.equals(ShutdownCommand.Requested)) {\n                             disconnectWithoutInvestigation(attache, Event.ShutdownRequested);\n                         }\n                         return;\n                     } else if (cmd instanceof AgentControlCommand) {\n-                        answer = handleControlCommand(attache, (AgentControlCommand)cmd);\n+                        answer = handleControlCommand(attache, (AgentControlCommand) cmd);\n                     } else {\n-                        handleCommands(attache, request.getSequence(), new Command[] {cmd});\n+                        handleCommands(attache, request.getSequence(), new Command[] { cmd });\n                         if (cmd instanceof PingCommand) {\n-                            final long cmdHostId = ((PingCommand)cmd).getHostId();\n+                            final long cmdHostId = ((PingCommand) cmd).getHostId();\n \n                             // if the router is sending a ping, verify the\n                             // gateway was pingable\n                             if (cmd instanceof PingRoutingCommand) {\n-                                final boolean gatewayAccessible = ((PingRoutingCommand)cmd).isGatewayAccessible();\n+                                final boolean gatewayAccessible = ((PingRoutingCommand) cmd).isGatewayAccessible();\n                                 final HostVO host = _hostDao.findById(Long.valueOf(cmdHostId));\n \n                                 if (host != null) {\n@@ -1250,20 +1250,21 @@ protected void processRequest(final Link link, final Request request) {\n                                         final DataCenterVO dcVO = _dcDao.findById(host.getDataCenterId());\n                                         final HostPodVO podVO = _podDao.findById(host.getPodId());\n                                         final String hostDesc =\n-                                                \"name: \" + host.getName() + \" (id:\" + host.getId() + \"), availability zone: \" + dcVO.getName() + \", pod: \" + podVO.getName();\n+                                                        \"name: \" + host.getName() + \" (id:\" + host.getId() + \"), availability zone: \" + dcVO.getName() + \", pod: \"\n+                                                                        + podVO.getName();\n \n                                         _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_ROUTING, host.getDataCenterId(), host.getPodId(),\n-                                                \"Host lost connection to gateway, \" + hostDesc, \"Host [\" + hostDesc +\n-                                                \"] lost connection to gateway (default route) and is possibly having network connection issues.\");\n+                                                        \"Host lost connection to gateway, \" + hostDesc, \"Host [\" + hostDesc +\n+                                                                        \"] lost connection to gateway (default route) and is possibly having network connection issues.\");\n                                     } else {\n                                         _alertMgr.clearAlert(AlertManager.AlertType.ALERT_TYPE_ROUTING, host.getDataCenterId(), host.getPodId());\n                                     }\n                                 } else {\n                                     s_logger.debug(\"Not processing \" + PingRoutingCommand.class.getSimpleName() + \" for agent id=\" + cmdHostId +\n-                                            \"; can't find the host in the DB\");\n+                                                    \"; can't find the host in the DB\");\n                                 }\n                             }\n-                            answer = new PingAnswer((PingCommand)cmd);\n+                            answer = new PingAnswer((PingCommand) cmd);\n                         } else if (cmd instanceof ReadyAnswer) {\n                             final HostVO host = _hostDao.findById(attache.getId());\n                             if (host == null) {\n@@ -1299,7 +1300,7 @@ protected void processRequest(final Link link, final Request request) {\n         }\n \n         protected void processResponse(final Link link, final Response response) {\n-            final AgentAttache attache = (AgentAttache)link.attachment();\n+            final AgentAttache attache = (AgentAttache) link.attachment();\n             if (attache == null) {\n                 s_logger.warn(\"Unable to process: \" + response);\n             } else if (!attache.processAnswers(response.getSequence(), response)) {\n@@ -1317,7 +1318,7 @@ protected void doTask(final Task task) throws TaskExecutionException {\n                     try {\n                         final Request event = Request.parse(data);\n                         if (event instanceof Response) {\n-                            processResponse(task.getLink(), (Response)event);\n+                            processResponse(task.getLink(), (Response) event);\n                         } else {\n                             processRequest(task.getLink(), event);\n                         }\n@@ -1332,7 +1333,7 @@ protected void doTask(final Task task) throws TaskExecutionException {\n                 } else if (type == Task.Type.CONNECT) {\n                 } else if (type == Task.Type.DISCONNECT) {\n                     final Link link = task.getLink();\n-                    final AgentAttache attache = (AgentAttache)link.attachment();\n+                    final AgentAttache attache = (AgentAttache) link.attachment();\n                     if (attache != null) {\n                         disconnectWithInvestigation(attache, Event.AgentDisconnected);\n                     } else {\n@@ -1387,9 +1388,9 @@ public boolean agentStatusTransitTo(final HostVO host, final Status.Event e, fin\n                 return _statusStateMachine.transitTo(host, e, host.getId(), _hostDao);\n             } catch (final NoTransitionException e1) {\n                 status_logger.debug(\"Cannot transit agent status with event \" + e + \" for host \" + host.getId() + \", name=\" + host.getName() +\n-                        \", mangement server id is \" + msId);\n+                                \", mangement server id is \" + msId);\n                 throw new CloudRuntimeException(\"Cannot transit agent status with event \" + e + \" for host \" + host.getId() + \", mangement server id is \" + msId + \",\" +\n-                        e1.getMessage());\n+                                e1.getMessage());\n             }\n         } finally {\n             _agentStatusLock.unlock();\n@@ -1533,21 +1534,19 @@ protected void runInContext() {\n                         final ResourceState resourceState = h.getResourceState();\n                         if (resourceState == ResourceState.Disabled || resourceState == ResourceState.Maintenance || resourceState == ResourceState.ErrorInMaintenance) {\n                             /*\n-                             * Host is in non-operation state, so no\n-                             * investigation and direct put agent to\n-                             * Disconnected\n+                             * Host is in non-operation state, so no investigation and direct put agent to Disconnected\n                              */\n-                            status_logger.debug(\"Ping timeout but host \" + agentId + \" is in resource state of \" + resourceState + \", so no investigation\");\n+                            status_logger.debug(\"Ping timeout but agent \" + agentId + \" is in resource state of \" + resourceState + \", so no investigation\");\n                             disconnectWithoutInvestigation(agentId, Event.ShutdownRequested);\n                         } else {\n                             final HostVO host = _hostDao.findById(agentId);\n                             if (host != null && (host.getType() == Host.Type.ConsoleProxy || host.getType() == Host.Type.SecondaryStorageVM\n-                                    || host.getType() == Host.Type.SecondaryStorageCmdExecutor)) {\n+                                            || host.getType() == Host.Type.SecondaryStorageCmdExecutor)) {\n \n                                 s_logger.warn(\"Disconnect agent for CPVM/SSVM due to physical connection close. host: \" + host.getId());\n                                 disconnectWithoutInvestigation(agentId, Event.ShutdownRequested);\n                             } else {\n-                                status_logger.debug(\"Ping timeout for host \" + agentId + \", do invstigation\");\n+                                status_logger.debug(\"Ping timeout for agent \" + agentId + \", do invstigation\");\n                                 disconnectWithInvestigation(agentId, Event.PingTimeout);\n                             }\n                         }\n@@ -1564,7 +1563,7 @@ protected void runInContext() {\n                         final HostPodVO podVO = _podDao.findById(host.getPodId());\n                         final String hostDesc = \"name: \" + host.getName() + \" (id:\" + host.getId() + \"), availability zone: \" + dcVO.getName() + \", pod: \" + podVO.getName();\n                         _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_HOST, host.getDataCenterId(), host.getPodId(), \"Migration Complete for host \" + hostDesc, \"Host [\"\n-                                + hostDesc + \"] is ready for maintenance\");\n+                                        + hostDesc + \"] is ready for maintenance\");\n                     }\n                 }\n             } catch (final Throwable th) {\n@@ -1653,7 +1652,8 @@ public String getConfigComponentName() {\n \n     @Override\n     public ConfigKey<?>[] getConfigKeys() {\n-        return new ConfigKey<?>[] {CheckTxnBeforeSending, Workers, Port, PingInterval, PingTimeout, Wait, AlertWait, DirectAgentLoadSize, DirectAgentPoolSize, DirectAgentThreadCap};\n+        return new ConfigKey<?>[] { CheckTxnBeforeSending, Workers, Port, PingInterval, PingTimeout, Wait, AlertWait, DirectAgentLoadSize, DirectAgentPoolSize,\n+                        DirectAgentThreadCap };\n     }\n \n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/1b8c464e6b224bc50e749ba8b3170d19816e3e1c/engine/orchestration/src/com/cloud/agent/manager/AgentManagerImpl.java",
                "sha": "45a7dca4657bced0796e1e891f1c1ca3ffc715bc",
                "status": "modified"
            },
            {
                "additions": 63,
                "blob_url": "https://github.com/apache/cloudstack/blob/1b8c464e6b224bc50e749ba8b3170d19816e3e1c/plugins/network-elements/nicira-nvp/src/main/java/com/cloud/network/resource/wrapper/NiciraCheckHealthCommandWrapper.java",
                "changes": 63,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nicira-nvp/src/main/java/com/cloud/network/resource/wrapper/NiciraCheckHealthCommandWrapper.java?ref=1b8c464e6b224bc50e749ba8b3170d19816e3e1c",
                "deletions": 0,
                "filename": "plugins/network-elements/nicira-nvp/src/main/java/com/cloud/network/resource/wrapper/NiciraCheckHealthCommandWrapper.java",
                "patch": "@@ -0,0 +1,63 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+\n+package com.cloud.network.resource.wrapper;\n+\n+import org.apache.log4j.Logger;\n+\n+import com.cloud.agent.api.Answer;\n+import com.cloud.agent.api.CheckHealthAnswer;\n+import com.cloud.agent.api.CheckHealthCommand;\n+import com.cloud.network.nicira.ControlClusterStatus;\n+import com.cloud.network.nicira.NiciraNvpApi;\n+import com.cloud.network.nicira.NiciraNvpApiException;\n+import com.cloud.network.resource.NiciraNvpResource;\n+import com.cloud.resource.CommandWrapper;\n+import com.cloud.resource.ResourceWrapper;\n+\n+@ResourceWrapper(handles = CheckHealthCommand.class)\n+public class NiciraCheckHealthCommandWrapper extends CommandWrapper<CheckHealthCommand, Answer, NiciraNvpResource> {\n+\n+    private static final String CONTROL_CLUSTER_STATUS_IS_STABLE = \"stable\";\n+    private static final Logger s_logger = Logger.getLogger(NiciraCheckHealthCommandWrapper.class);\n+\n+    @Override\n+    public Answer execute(final CheckHealthCommand command, final NiciraNvpResource serverResource) {\n+        final NiciraNvpApi niciraNvpApi = serverResource.getNiciraNvpApi();\n+        boolean healthy = true;\n+        try {\n+            final ControlClusterStatus clusterStatus = niciraNvpApi.getControlClusterStatus();\n+            final String status = clusterStatus.getClusterStatus();\n+            if (clusterIsUnstable(status)) {\n+                s_logger.warn(\"Control cluster is not stable. Current status is \" + status);\n+                healthy = false;\n+            }\n+        } catch (final NiciraNvpApiException e) {\n+            s_logger.error(\"Exception caught while checking control cluster status during health check\", e);\n+            healthy = false;\n+        }\n+\n+        return new CheckHealthAnswer(command, healthy);\n+    }\n+\n+    protected boolean clusterIsUnstable(final String clusterStatus) {\n+        return !CONTROL_CLUSTER_STATUS_IS_STABLE.equals(clusterStatus);\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/1b8c464e6b224bc50e749ba8b3170d19816e3e1c/plugins/network-elements/nicira-nvp/src/main/java/com/cloud/network/resource/wrapper/NiciraCheckHealthCommandWrapper.java",
                "sha": "34e4548cf816091da0f19a7c3d533070e9ae288c",
                "status": "added"
            },
            {
                "additions": 80,
                "blob_url": "https://github.com/apache/cloudstack/blob/1b8c464e6b224bc50e749ba8b3170d19816e3e1c/plugins/network-elements/nicira-nvp/src/test/java/com/cloud/network/resource/wrapper/NiciraCheckHealthCommandWrapperTest.java",
                "changes": 80,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nicira-nvp/src/test/java/com/cloud/network/resource/wrapper/NiciraCheckHealthCommandWrapperTest.java?ref=1b8c464e6b224bc50e749ba8b3170d19816e3e1c",
                "deletions": 0,
                "filename": "plugins/network-elements/nicira-nvp/src/test/java/com/cloud/network/resource/wrapper/NiciraCheckHealthCommandWrapperTest.java",
                "patch": "@@ -0,0 +1,80 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+\n+package com.cloud.network.resource.wrapper;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.cloud.agent.api.Answer;\n+import com.cloud.agent.api.CheckHealthCommand;\n+import com.cloud.network.nicira.ControlClusterStatus;\n+import com.cloud.network.nicira.NiciraNvpApi;\n+import com.cloud.network.nicira.NiciraNvpApiException;\n+import com.cloud.network.resource.NiciraNvpResource;\n+\n+public class NiciraCheckHealthCommandWrapperTest {\n+\n+    private final NiciraNvpResource niciraResource = mock(NiciraNvpResource.class);\n+    private final NiciraNvpApi niciraApi = mock(NiciraNvpApi.class);\n+\n+    @Before\n+    public void setup() {\n+        when(niciraResource.getNiciraNvpApi()).thenReturn(niciraApi);\n+    }\n+\n+    @Test\n+    public void tetsExecuteWhenClusterIsNotStable() throws Exception {\n+        when(niciraApi.getControlClusterStatus()).thenReturn(new ControlClusterStatus());\n+\n+        final NiciraCheckHealthCommandWrapper commandWrapper = new NiciraCheckHealthCommandWrapper();\n+        final Answer answer = commandWrapper.execute(new CheckHealthCommand(), niciraResource);\n+\n+        assertThat(answer.getResult(), equalTo(false));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void tetsExecuteWhenApiThrowsException() throws Exception {\n+        when(niciraApi.getControlClusterStatus()).thenThrow(NiciraNvpApiException.class);\n+\n+        final NiciraCheckHealthCommandWrapper commandWrapper = new NiciraCheckHealthCommandWrapper();\n+        final Answer answer = commandWrapper.execute(new CheckHealthCommand(), niciraResource);\n+\n+        assertThat(answer.getResult(), equalTo(false));\n+    }\n+\n+    @Test\n+    public void tetsExecuteWhenClusterIsStable() throws Exception {\n+        final ControlClusterStatus statusValue = mock(ControlClusterStatus.class);\n+        when(statusValue.getClusterStatus()).thenReturn(\"stable\");\n+        when(niciraApi.getControlClusterStatus()).thenReturn(statusValue);\n+\n+        final NiciraCheckHealthCommandWrapper commandWrapper = new NiciraCheckHealthCommandWrapper();\n+        final Answer answer = commandWrapper.execute(new CheckHealthCommand(), niciraResource);\n+\n+        assertThat(answer.getResult(), equalTo(true));\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/1b8c464e6b224bc50e749ba8b3170d19816e3e1c/plugins/network-elements/nicira-nvp/src/test/java/com/cloud/network/resource/wrapper/NiciraCheckHealthCommandWrapperTest.java",
                "sha": "b0a988270a5f32106252b13ed66ed795aa63887c",
                "status": "added"
            }
        ],
        "message": "Merge release branch 4.7 to master\n\n* 4.7:\n  Implement CheckHealthCommand for NSX controllers\n  Fix log message that refers to agent, not host\n  Prevent NullPointerException when host does not belong to a pod",
        "parent": "https://github.com/apache/cloudstack/commit/24818af23ac2e6244ac946a668ea8aa00d0d394d",
        "patched_files": [
            "NiciraCheckHealthCommandWrapper.java",
            "AgentManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "NiciraCheckHealthCommandWrapperTest.java"
        ]
    },
    "cloudstack_1cf165f": {
        "bug_id": "cloudstack_1cf165f",
        "commit": "https://github.com/apache/cloudstack/commit/1cf165f86df718bdbd1db1f094a341c8abaca42e",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/1cf165f86df718bdbd1db1f094a341c8abaca42e/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=1cf165f86df718bdbd1db1f094a341c8abaca42e",
                "deletions": 1,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -500,7 +500,10 @@ public VMSnapshotResponse createVMSnapshotResponse(VMSnapshot vmSnapshot) {\n             vmSnapshotResponse.setVirtualMachineid(vm.getUuid());\n         }\n         if (vmSnapshot.getParent() != null) {\n-            vmSnapshotResponse.setParentName(ApiDBUtils.getVMSnapshotById(vmSnapshot.getParent()).getDisplayName());\n+            VMSnapshot vmSnapshotParent = ApiDBUtils.getVMSnapshotById(vmSnapshot.getParent());\n+            if (vmSnapshotParent != null) {\n+                vmSnapshotResponse.setParentName(vmSnapshotParent.getDisplayName());\n+            }\n         }\n         vmSnapshotResponse.setCurrent(vmSnapshot.getCurrent());\n         vmSnapshotResponse.setType(vmSnapshot.getType().toString());",
                "raw_url": "https://github.com/apache/cloudstack/raw/1cf165f86df718bdbd1db1f094a341c8abaca42e/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "a13e99694238a140833c30693ebfc5501d42457b",
                "status": "modified"
            }
        ],
        "message": "ApiResponseHelper: fix NPE when parent of snapshot is null",
        "parent": "https://github.com/apache/cloudstack/commit/ca0a77088c773516d07c24df8613ac9ff334a441",
        "patched_files": [
            "ApiResponseHelper.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "ApiResponseHelperTest.java"
        ]
    },
    "cloudstack_1df0453": {
        "bug_id": "cloudstack_1df0453",
        "commit": "https://github.com/apache/cloudstack/commit/1df0453d27e8378065c15878067fc9d2dc961e30",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/1df0453d27e8378065c15878067fc9d2dc961e30/api/src/com/cloud/hypervisor/HypervisorGuru.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/hypervisor/HypervisorGuru.java?ref=1df0453d27e8378065c15878067fc9d2dc961e30",
                "deletions": 0,
                "filename": "api/src/com/cloud/hypervisor/HypervisorGuru.java",
                "patch": "@@ -17,6 +17,7 @@\n package com.cloud.hypervisor;\n \n import java.util.List;\n+import java.util.Map;\n \n import org.apache.cloudstack.framework.config.ConfigKey;\n \n@@ -81,4 +82,6 @@\n     List<Command> finalizeExpungeNics(VirtualMachine vm, List<NicProfile> nics);\n \n     List<Command> finalizeExpungeVolumes(VirtualMachine vm);\n+\n+    Map<String, String> getClusterSettings(long vmId);\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/1df0453d27e8378065c15878067fc9d2dc961e30/api/src/com/cloud/hypervisor/HypervisorGuru.java",
                "sha": "6a09dd257afcb6c5326af4e640e2f084031a37e0",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/1df0453d27e8378065c15878067fc9d2dc961e30/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=1df0453d27e8378065c15878067fc9d2dc961e30",
                "deletions": 0,
                "filename": "engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -3488,6 +3488,13 @@ private VMInstanceVO orchestrateReConfigureVm(String vmUuid, ServiceOffering old\n                         newServiceOffering.getSpeed(), minMemory * 1024L * 1024L, newServiceOffering.getRamSize() * 1024L * 1024L, newServiceOffering.getLimitCpuUse());\n \n         Long dstHostId = vm.getHostId();\n+        if(vm.getHypervisorType().equals(HypervisorType.VMware)) {\n+            HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vm.getHypervisorType());\n+            Map<String, String> details = null;\n+            details = hvGuru.getClusterSettings(vm.getId());\n+            reconfigureCmd.getVirtualMachine().setDetails(details);\n+        }\n+\n         ItWorkVO work = new ItWorkVO(UUID.randomUUID().toString(), _nodeId, State.Running, vm.getType(), vm.getId());\n         work.setStep(Step.Prepare);\n         work.setResourceType(ItWorkVO.ResourceType.Host);",
                "raw_url": "https://github.com/apache/cloudstack/raw/1df0453d27e8378065c15878067fc9d2dc961e30/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "6d513d50978ae4d1bd7017068f8e2ba707360c0b",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/1df0453d27e8378065c15878067fc9d2dc961e30/plugins/hypervisors/baremetal/src/com/cloud/baremetal/manager/BareMetalGuru.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/baremetal/src/com/cloud/baremetal/manager/BareMetalGuru.java?ref=1df0453d27e8378065c15878067fc9d2dc961e30",
                "deletions": 0,
                "filename": "plugins/hypervisors/baremetal/src/com/cloud/baremetal/manager/BareMetalGuru.java",
                "patch": "@@ -84,4 +84,10 @@ public VirtualMachineTO implement(VirtualMachineProfile vm) {\n     public boolean trackVmHostChange() {\n         return false;\n     }\n+\n+    @Override\n+    public Map<String, String> getClusterSettings(long vmId) {\n+        return null;\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/1df0453d27e8378065c15878067fc9d2dc961e30/plugins/hypervisors/baremetal/src/com/cloud/baremetal/manager/BareMetalGuru.java",
                "sha": "8f439cdc1dd0ed16a31dc62646c8d734804951e4",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/1df0453d27e8378065c15878067fc9d2dc961e30/plugins/hypervisors/hyperv/src/com/cloud/hypervisor/hyperv/guru/HypervGuru.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/hyperv/src/com/cloud/hypervisor/hyperv/guru/HypervGuru.java?ref=1df0453d27e8378065c15878067fc9d2dc961e30",
                "deletions": 0,
                "filename": "plugins/hypervisors/hyperv/src/com/cloud/hypervisor/hyperv/guru/HypervGuru.java",
                "patch": "@@ -20,6 +20,7 @@\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n+import java.util.Map;\n \n import javax.ejb.Local;\n import javax.inject.Inject;\n@@ -194,4 +195,10 @@ public int compare(NicTO arg0, NicTO arg1) {\n     public final boolean trackVmHostChange() {\n         return false;\n     }\n+\n+    @Override\n+    public Map<String, String> getClusterSettings(long vmId) {\n+        return null;\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/1df0453d27e8378065c15878067fc9d2dc961e30/plugins/hypervisors/hyperv/src/com/cloud/hypervisor/hyperv/guru/HypervGuru.java",
                "sha": "2a631429156a89e63a48d4d1ebd4c9534c869424",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/1df0453d27e8378065c15878067fc9d2dc961e30/plugins/hypervisors/ovm/src/com/cloud/ovm/hypervisor/OvmGuru.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/ovm/src/com/cloud/ovm/hypervisor/OvmGuru.java?ref=1df0453d27e8378065c15878067fc9d2dc961e30",
                "deletions": 0,
                "filename": "plugins/hypervisors/ovm/src/com/cloud/ovm/hypervisor/OvmGuru.java",
                "patch": "@@ -16,6 +16,8 @@\n // under the License.\n package com.cloud.ovm.hypervisor;\n \n+import java.util.Map;\n+\n import javax.ejb.Local;\n import javax.inject.Inject;\n \n@@ -58,4 +60,10 @@ public boolean trackVmHostChange() {\n         return true;\n     }\n \n+    @Override\n+    public Map<String, String> getClusterSettings(long vmId) {\n+        return null;\n+    }\n+\n+\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/1df0453d27e8378065c15878067fc9d2dc961e30/plugins/hypervisors/ovm/src/com/cloud/ovm/hypervisor/OvmGuru.java",
                "sha": "90e4b5742b67fe3af01422ae5c5a04aaaa3867d1",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/1df0453d27e8378065c15878067fc9d2dc961e30/plugins/hypervisors/simulator/src/com/cloud/simulator/SimulatorGuru.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/simulator/src/com/cloud/simulator/SimulatorGuru.java?ref=1df0453d27e8378065c15878067fc9d2dc961e30",
                "deletions": 0,
                "filename": "plugins/hypervisors/simulator/src/com/cloud/simulator/SimulatorGuru.java",
                "patch": "@@ -16,6 +16,8 @@\n // under the License.\n package com.cloud.simulator;\n \n+import java.util.Map;\n+\n import javax.ejb.Local;\n import javax.inject.Inject;\n \n@@ -56,4 +58,10 @@ public VirtualMachineTO implement(VirtualMachineProfile vm) {\n     public boolean trackVmHostChange() {\n         return false;\n     }\n+\n+    @Override\n+    public Map<String, String> getClusterSettings(long vmId) {\n+        return null;\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/1df0453d27e8378065c15878067fc9d2dc961e30/plugins/hypervisors/simulator/src/com/cloud/simulator/SimulatorGuru.java",
                "sha": "378134a9856f985a215033397cecb7a05206e0d2",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cloudstack/blob/1df0453d27e8378065c15878067fc9d2dc961e30/plugins/hypervisors/vmware/src/com/cloud/hypervisor/guru/VMwareGuru.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/com/cloud/hypervisor/guru/VMwareGuru.java?ref=1df0453d27e8378065c15878067fc9d2dc961e30",
                "deletions": 0,
                "filename": "plugins/hypervisors/vmware/src/com/cloud/hypervisor/guru/VMwareGuru.java",
                "patch": "@@ -552,4 +552,13 @@ public String getConfigComponentName() {\n \n         return commands;\n     }\n+\n+    @Override\n+    public Map<String, String> getClusterSettings(long vmId) {\n+        Map<String, String> details = new HashMap<String, String>();\n+        long clusterId = getClusterId(vmId);\n+        details.put(VmwareReserveCpu.key(), VmwareReserveCpu.valueIn(clusterId).toString());\n+        details.put(VmwareReserveMemory.key(), VmwareReserveMemory.valueIn(clusterId).toString());\n+        return details;\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/1df0453d27e8378065c15878067fc9d2dc961e30/plugins/hypervisors/vmware/src/com/cloud/hypervisor/guru/VMwareGuru.java",
                "sha": "808cb5bdeea2a347964e135dc526bf610977e968",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/1df0453d27e8378065c15878067fc9d2dc961e30/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/XenServerGuru.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/XenServerGuru.java?ref=1df0453d27e8378065c15878067fc9d2dc961e30",
                "deletions": 0,
                "filename": "plugins/hypervisors/xenserver/src/com/cloud/hypervisor/XenServerGuru.java",
                "patch": "@@ -18,6 +18,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n \n import javax.ejb.Local;\n import javax.inject.Inject;\n@@ -111,6 +112,11 @@ public boolean trackVmHostChange() {\n         return true;\n     }\n \n+    @Override\n+    public Map<String, String> getClusterSettings(long vmId) {\n+        return null;\n+    }\n+\n     @Override\n     public List<Command> finalizeExpungeVolumes(VirtualMachine vm) {\n         List<Command> commands = new ArrayList<Command>();",
                "raw_url": "https://github.com/apache/cloudstack/raw/1df0453d27e8378065c15878067fc9d2dc961e30/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/XenServerGuru.java",
                "sha": "7ee7c88587c99e2363e9c5e25cf40eb43a7f6fc4",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/1df0453d27e8378065c15878067fc9d2dc961e30/server/src/com/cloud/hypervisor/HypervisorGuruBase.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/hypervisor/HypervisorGuruBase.java?ref=1df0453d27e8378065c15878067fc9d2dc961e30",
                "deletions": 0,
                "filename": "server/src/com/cloud/hypervisor/HypervisorGuruBase.java",
                "patch": "@@ -190,4 +190,10 @@ protected VirtualMachineTO toVirtualMachineTO(VirtualMachineProfile vmProfile) {\n     public List<Command> finalizeExpungeVolumes(VirtualMachine vm) {\n         return null;\n     }\n+\n+    @Override\n+    public Map<String, String> getClusterSettings(long vmId) {\n+        return null;\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/1df0453d27e8378065c15878067fc9d2dc961e30/server/src/com/cloud/hypervisor/HypervisorGuruBase.java",
                "sha": "308c327177f48efd6b9b47ccfbc0c12d461f7c01",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/1df0453d27e8378065c15878067fc9d2dc961e30/server/src/com/cloud/hypervisor/KVMGuru.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/hypervisor/KVMGuru.java?ref=1df0453d27e8378065c15878067fc9d2dc961e30",
                "deletions": 0,
                "filename": "server/src/com/cloud/hypervisor/KVMGuru.java",
                "patch": "@@ -16,6 +16,8 @@\n // under the License.\n package com.cloud.hypervisor;\n \n+import java.util.Map;\n+\n import javax.ejb.Local;\n import javax.inject.Inject;\n \n@@ -86,4 +88,10 @@ public VirtualMachineTO implement(VirtualMachineProfile vm) {\n     public boolean trackVmHostChange() {\n         return false;\n     }\n+\n+    @Override\n+    public Map<String, String> getClusterSettings(long vmId) {\n+        return null;\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/1df0453d27e8378065c15878067fc9d2dc961e30/server/src/com/cloud/hypervisor/KVMGuru.java",
                "sha": "a2534bdef2ab266fdb1b7b2969c6597b18970f3b",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/1df0453d27e8378065c15878067fc9d2dc961e30/server/src/com/cloud/hypervisor/LXCGuru.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/hypervisor/LXCGuru.java?ref=1df0453d27e8378065c15878067fc9d2dc961e30",
                "deletions": 0,
                "filename": "server/src/com/cloud/hypervisor/LXCGuru.java",
                "patch": "@@ -16,6 +16,8 @@\n // under the License.\n package com.cloud.hypervisor;\n \n+import java.util.Map;\n+\n import javax.ejb.Local;\n import javax.inject.Inject;\n \n@@ -73,4 +75,9 @@ public VirtualMachineTO implement(VirtualMachineProfile vm) {\n     public boolean trackVmHostChange() {\n         return false;\n     }\n+\n+    @Override\n+    public Map<String, String> getClusterSettings(long vmId) {\n+        return null;\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/1df0453d27e8378065c15878067fc9d2dc961e30/server/src/com/cloud/hypervisor/LXCGuru.java",
                "sha": "2becdbd79e617315cb9b6366e15c9c1a26eacabf",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-8088: VM scale up is failing in vmware with Unable to execute ScaleVmCommand due to java.lang.NullPointerException",
        "parent": "https://github.com/apache/cloudstack/commit/301cb03cf2fac39b8f8ee351c511aef635f74e79",
        "patched_files": [
            "VirtualMachineManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_1e8126a": {
        "bug_id": "cloudstack_1e8126a",
        "commit": "https://github.com/apache/cloudstack/commit/1e8126afbf8c4473a4fb0f3bf6dc5c9df6823e9f",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/1e8126afbf8c4473a4fb0f3bf6dc5c9df6823e9f/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java?ref=1e8126afbf8c4473a4fb0f3bf6dc5c9df6823e9f",
                "deletions": 0,
                "filename": "engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "patch": "@@ -1523,6 +1523,8 @@ public NicProfile prepareNic(final VirtualMachineProfile vmProfile, final Deploy\n             nic.setIPv4Address(profile.getIPv4Address());\n             nic.setAddressFormat(profile.getFormat());\n             nic.setIPv6Address(profile.getIPv6Address());\n+            nic.setIPv6Cidr(profile.getIPv6Cidr());\n+            nic.setIPv6Gateway(profile.getIPv6Gateway());\n             nic.setMacAddress(profile.getMacAddress());\n             nic.setIsolationUri(profile.getIsolationUri());\n             nic.setBroadcastUri(profile.getBroadCastUri());",
                "raw_url": "https://github.com/apache/cloudstack/raw/1e8126afbf8c4473a4fb0f3bf6dc5c9df6823e9f/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "sha": "a2505fbe638e95ca16fabbeb1e09488b9514b973",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #1927 from wido/ipv6-ssvm-fix\n\nipv6: Set IPv6 CIDR and Gateway in 'nic' profileWithout this information a NPE might be triggered when starting a VR, SSVM or CP\nas this information is read from the 'nics' table and causes a NPE.\n\nDuring deployment we should set the IPv6 Gateway and CIDR for the NIC object so that\nit is persisted to the database.\n\nSigned-off-by: Wido den Hollander <wido@widodh.nl>\n\n* pr/1927:\n  ipv6: Set IPv6 CIDR and Gateway in 'nic' profile\n\nSigned-off-by: Rajani Karuturi <rajani.karuturi@accelerite.com>",
        "parent": "https://github.com/apache/cloudstack/commit/cd68e99148ac9ed96a8d1906b206cb5c5bcee11b",
        "patched_files": [
            "NetworkOrchestrator.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "NetworkOrchestratorTest.java"
        ]
    },
    "cloudstack_1efcc19": {
        "bug_id": "cloudstack_1efcc19",
        "commit": "https://github.com/apache/cloudstack/commit/1efcc19dbd0e609733f93089ce5cb2a5be84209b",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/1efcc19dbd0e609733f93089ce5cb2a5be84209b/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=1efcc19dbd0e609733f93089ce5cb2a5be84209b",
                "deletions": 1,
                "filename": "engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -1748,6 +1748,10 @@ private void orchestrateStorageMigration(final String vmUuid, final StoragePool\n         final HostVO srcHost = _hostDao.findById(srchostId);\n         final Long srcClusterId = srcHost.getClusterId();\n \n+        if (destPool == null) {\n+            throw new CloudRuntimeException(\"Unable to migrate vm: missing destination storage pool\");\n+        }\n+\n         try {\n             stateTransitTo(vm, VirtualMachine.Event.StorageMigrationRequested, null);\n         } catch (final NoTransitionException e) {\n@@ -1763,7 +1767,7 @@ private void orchestrateStorageMigration(final String vmUuid, final StoragePool\n             if (migrationResult) {\n                 //if the vm is migrated to different pod in basic mode, need to reallocate ip\n \n-                if (!vm.getPodIdToDeployIn().equals(destPool.getPodId())) {\n+                if (destPool.getPodId() != null && !destPool.getPodId().equals(vm.getPodIdToDeployIn())) {\n                     final DataCenterDeployment plan = new DataCenterDeployment(vm.getDataCenterId(), destPool.getPodId(), null, null, null, null);\n                     final VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vm, null, null, null, null);\n                     _networkMgr.reallocate(vmProfile, plan);",
                "raw_url": "https://github.com/apache/cloudstack/raw/1efcc19dbd0e609733f93089ce5cb2a5be84209b/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "f972539fc7dd430bfd448200a5daac51f4a393dc",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-8941: fix NPE when migrate vm to other zone-wide pools the second time",
        "parent": "https://github.com/apache/cloudstack/commit/f241455a632345540ccc727513e75473bba4418a",
        "patched_files": [
            "VirtualMachineManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_238c483": {
        "bug_id": "cloudstack_238c483",
        "commit": "https://github.com/apache/cloudstack/commit/238c483a7ca744191972e3bb3404a1a506dcb2e1",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/238c483a7ca744191972e3bb3404a1a506dcb2e1/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java?ref=238c483a7ca744191972e3bb3404a1a506dcb2e1",
                "deletions": 4,
                "filename": "server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "patch": "@@ -1013,10 +1013,12 @@ protected void updateRoutersRedundantState(final List<DomainRouterVO> routers) {\n                         s_logger.warn(\"Unable to update router \" + router.getHostName() + \"'s status\");\n                     }\n                     RedundantState state = RedundantState.UNKNOWN;\n-                    if (answer != null && answer.getResult()) {\n-                        state = answer.getState();\n-                    } else {\n-                        s_logger.info(\"Agent response doesn't seem to be correct ==> \" + answer.getResult());\n+                    if (answer != null) {\n+                        if (answer.getResult()) {\n+                            state = answer.getState();\n+                        } else {\n+                            s_logger.info(\"Agent response doesn't seem to be correct ==> \" + answer.getResult());\n+                        }\n                     }\n                     router.setRedundantState(state);\n                     updated = true;",
                "raw_url": "https://github.com/apache/cloudstack/raw/238c483a7ca744191972e3bb3404a1a506dcb2e1/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "sha": "ca1f67dbb69b7b98ae38a851e54398cd05075875",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #1073 from ustcweizhou/CLOUDSTACK-9055\n\nCLOUDSTACK-9055: fix NPE in updating Redundant State of VPC networksThis issue happened when the KVM nodes is down.It might also happen when the cloudstack-agent is killed unexpectedly.\n\n* pr/1073:\n  CLOUDSTACK-9055: fix NPE in updating Redundant State of VPC networks\n\nSigned-off-by: Remi Bergsma <github@remi.nl>",
        "parent": "https://github.com/apache/cloudstack/commit/401693eafbe940c8fc349eec950779cf3e3f2717",
        "patched_files": [
            "VirtualNetworkApplianceManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualNetworkApplianceManagerImplTest.java"
        ]
    },
    "cloudstack_24435dd": {
        "bug_id": "cloudstack_24435dd",
        "commit": "https://github.com/apache/cloudstack/commit/24435dd6bc2424da18277ca00229d1d3bb0ec284",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/24435dd6bc2424da18277ca00229d1d3bb0ec284/server/src/com/cloud/deploy/DeploymentPlanningManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/deploy/DeploymentPlanningManagerImpl.java?ref=24435dd6bc2424da18277ca00229d1d3bb0ec284",
                "deletions": 1,
                "filename": "server/src/com/cloud/deploy/DeploymentPlanningManagerImpl.java",
                "patch": "@@ -1208,7 +1208,7 @@ protected boolean hostCanAccessSPool(Host host, StoragePool pool) {\n             // volume is ready and the pool should be reused.\n             // In this case, also check if rest of the volumes are ready and can\n             // be reused.\n-            if (plan.getPoolId() != null) {\n+            if (plan.getPoolId() != null || (toBeCreated.getVolumeType() == Volume.Type.DATADISK && toBeCreated.getPoolId() != null && toBeCreated.getState() == Volume.State.Ready)) {\n                 s_logger.debug(\"Volume has pool already allocated, checking if pool can be reused, poolId: \" + toBeCreated.getPoolId());\n                 List<StoragePool> suitablePools = new ArrayList<StoragePool>();\n                 StoragePool pool = null;",
                "raw_url": "https://github.com/apache/cloudstack/raw/24435dd6bc2424da18277ca00229d1d3bb0ec284/server/src/com/cloud/deploy/DeploymentPlanningManagerImpl.java",
                "sha": "7986b3a2decad2c43cb6adac066120c9ab3e78db",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/cloudstack/blob/24435dd6bc2424da18277ca00229d1d3bb0ec284/server/src/com/cloud/ha/HighAvailabilityManagerImpl.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/ha/HighAvailabilityManagerImpl.java?ref=24435dd6bc2424da18277ca00229d1d3bb0ec284",
                "deletions": 1,
                "filename": "server/src/com/cloud/ha/HighAvailabilityManagerImpl.java",
                "patch": "@@ -634,6 +634,9 @@ public Long migrate(final HaWorkVO work) {\n             _haDao.update(work.getId(), work);\n \n             VMInstanceVO vm = _instanceDao.findById(vmId);\n+            if (vm == null) {\n+                return null;\n+            }\n             // First try starting the vm with its original planner, if it doesn't succeed send HAPlanner as its an emergency.\n             _itMgr.migrateAway(vm.getUuid(), srcHostId);\n             return null;\n@@ -753,7 +756,10 @@ public void cancelScheduledMigrations(final HostVO host) {\n         List<HaWorkVO> works = _haDao.findTakenWorkItems(WorkType.Migration);\n         List<VMInstanceVO> vms = new ArrayList<VMInstanceVO>(works.size());\n         for (HaWorkVO work : works) {\n-            vms.add(_instanceDao.findById(work.getInstanceId()));\n+            VMInstanceVO vm = _instanceDao.findById(work.getInstanceId());\n+            if (vm != null) {\n+                vms.add(vm);\n+            }\n         }\n         return vms;\n     }\n@@ -913,6 +919,7 @@ private void runWithContext() {\n                     } else {\n                         s_logger.info(\"Rescheduling \" + work + \" to try again at \" + new Date(nextTime << 10));\n                         work.setTimeToTry(nextTime);\n+                        work.setTimesTried(work.getTimesTried() + 1);\n                         work.setServerId(null);\n                         work.setDateTaken(null);\n                     }\n@@ -923,6 +930,7 @@ private void runWithContext() {\n \n                     s_logger.info(\"Rescheduling \" + work + \" to try again at \" + new Date(nextTime << 10));\n                     work.setTimeToTry(nextTime);\n+                    work.setTimesTried(work.getTimesTried() + 1);\n                     work.setServerId(null);\n                     work.setDateTaken(null);\n \n@@ -931,6 +939,10 @@ private void runWithContext() {\n                     VMInstanceVO vm = _instanceDao.findById(work.getInstanceId());\n                     work.setUpdateTime(vm.getUpdated());\n                     work.setPreviousState(vm.getState());\n+                    if (!Step.Done.equals(work.getStep()) && work.getTimesTried() >= _maxRetries) {\n+                        s_logger.warn(\"Giving up, retries max times for work: \" + work);\n+                        work.setStep(Step.Done);\n+                    }\n                 }\n                 _haDao.update(work.getId(), work);\n             } catch (final Throwable th) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/24435dd6bc2424da18277ca00229d1d3bb0ec284/server/src/com/cloud/ha/HighAvailabilityManagerImpl.java",
                "sha": "ce6239ae83f61461784a3b71dd1aaa0e031fb327",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/cloudstack/blob/24435dd6bc2424da18277ca00229d1d3bb0ec284/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/UserVmManagerImpl.java?ref=24435dd6bc2424da18277ca00229d1d3bb0ec284",
                "deletions": 0,
                "filename": "server/src/com/cloud/vm/UserVmManagerImpl.java",
                "patch": "@@ -1010,6 +1010,9 @@ public UserVm addNicToVirtualMachine(AddNicToVMCmd cmd) throws InvalidParameterV\n \n         NicProfile profile = new NicProfile(null, null);\n         if (ipAddress != null) {\n+            if (!(NetUtils.isValidIp(ipAddress) || NetUtils.isValidIpv6(ipAddress))) {\n+                throw new InvalidParameterValueException(\"Invalid format for IP address parameter: \" + ipAddress);\n+            }\n             profile = new NicProfile(ipAddress, null);\n         }\n \n@@ -2874,6 +2877,19 @@ protected UserVm createVirtualMachine(DataCenter zone, ServiceOffering serviceOf\n                 }\n \n                 profile.setDefaultNic(true);\n+                if (!_networkModel.areServicesSupportedInNetwork(network.getId(), new Service[]{Service.UserData})) {\n+                    if ((userData != null) && (!userData.isEmpty())) {\n+                        throw new InvalidParameterValueException(\"Unable to deploy VM as UserData is provided while deploying the VM, but there is no support for \" + Network.Service.UserData.getName() + \" service in the default network \" + network.getId());\n+                    }\n+\n+                    if ((sshPublicKey != null) && (!sshPublicKey.isEmpty())) {\n+                        throw new InvalidParameterValueException(\"Unable to deploy VM as SSH keypair is provided while deploying the VM, but there is no support for \" + Network.Service.UserData.getName() + \" service in the default network \" + network.getId());\n+                    }\n+\n+                    if (template.getEnablePassword()) {\n+                        throw new InvalidParameterValueException(\"Unable to deploy VM as template \" + template.getId() + \" is password enabled, but there is no support for \" + Network.Service.UserData.getName() + \" service in the default network \" + network.getId());\n+                    }\n+                }\n             }\n \n             networks.add(new Pair<NetworkVO, NicProfile>(network, profile));",
                "raw_url": "https://github.com/apache/cloudstack/raw/24435dd6bc2424da18277ca00229d1d3bb0ec284/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "sha": "13ed97ecbca14944328a55612193f436e00e5cfc",
                "status": "modified"
            }
        ],
        "message": "server: NPE checks and improved case checking\n\n- pool allocation checks for both root and data disks\n- NPE checks to not add null object in collection or try to migrate null VM\n- HA work tries need to increment and be given up when max retries are crossed\n- VM creation should check IP address format for IPv4 and IPv6\n- If userdata is not supported by a network, then fail early if userdata, ssh key,\n  or password enabled template is passed/used\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/752d784d92b4ce461ec6a19a6b54220bb967d4d0",
        "patched_files": [
            "DeploymentPlanningManagerImpl.java",
            "HighAvailabilityManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "DeploymentPlanningManagerImplTest.java",
            "HighAvailabilityManagerImplTest.java"
        ]
    },
    "cloudstack_2660a6b": {
        "bug_id": "cloudstack_2660a6b",
        "commit": "https://github.com/apache/cloudstack/commit/2660a6b7a7f226ab757d2175222db62571813120",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/com/cloud/async/AsyncJob.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/async/AsyncJob.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "api/src/com/cloud/async/AsyncJob.java",
                "patch": "@@ -50,7 +50,9 @@\n         AutoScaleVmProfile,\n         AutoScaleVmGroup,\n         GlobalLoadBalancerRule,\n+        LoadBalancerRule,\n         AffinityGroup,\n+        InternalLbVm,\n         DedicatedGuestVlanRange\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/com/cloud/async/AsyncJob.java",
                "sha": "ccdc40620b796d68ce2cda4afa7dfbe7404541e1",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/com/cloud/event/EventTypes.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/event/EventTypes.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 5,
                "filename": "api/src/com/cloud/event/EventTypes.java",
                "patch": "@@ -16,15 +16,28 @@\n // under the License.\n package com.cloud.event;\n \n+import java.util.HashMap;\n+import java.util.Map;\n+\n import com.cloud.configuration.Configuration;\n import com.cloud.dc.DataCenter;\n import com.cloud.dc.Pod;\n import com.cloud.dc.StorageNetworkIpRange;\n import com.cloud.dc.Vlan;\n import com.cloud.domain.Domain;\n import com.cloud.host.Host;\n-import com.cloud.network.*;\n-import com.cloud.network.as.*;\n+import com.cloud.network.GuestVlan;\n+import com.cloud.network.Network;\n+import com.cloud.network.PhysicalNetwork;\n+import com.cloud.network.PhysicalNetworkServiceProvider;\n+import com.cloud.network.PhysicalNetworkTrafficType;\n+import com.cloud.network.PublicIpAddress;\n+import com.cloud.network.RemoteAccessVpn;\n+import com.cloud.network.as.AutoScaleCounter;\n+import com.cloud.network.as.AutoScalePolicy;\n+import com.cloud.network.as.AutoScaleVmGroup;\n+import com.cloud.network.as.AutoScaleVmProfile;\n+import com.cloud.network.as.Condition;\n import com.cloud.network.router.VirtualRouter;\n import com.cloud.network.rules.LoadBalancer;\n import com.cloud.network.rules.StaticNat;\n@@ -43,9 +56,6 @@\n import com.cloud.user.User;\n import com.cloud.vm.VirtualMachine;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-\n public class EventTypes {\n \n     //map of Event and corresponding entity for which Event is applicable\n@@ -389,11 +399,15 @@\n     public static final String EVENT_AFFINITY_GROUP_ASSIGN = \"AG.ASSIGN\";\n     public static final String EVENT_AFFINITY_GROUP_REMOVE = \"AG.REMOVE\";\n     public static final String EVENT_VM_AFFINITY_GROUP_UPDATE = \"VM.AG.UPDATE\";\n+    \n+    public static final String EVENT_INTERNAL_LB_VM_START = \"INTERNALLBVM.START\";\n+    public static final String EVENT_INTERNAL_LB_VM_STOP = \"INTERNALLBVM.STOP\";\n \n     // Dedicated guest vlan range\n     public static final String EVENT_GUEST_VLAN_RANGE_DEDICATE  = \"GUESTVLANRANGE.DEDICATE\";\n     public static final String EVENT_DEDICATED_GUEST_VLAN_RANGE_RELEASE  = \"GUESTVLANRANGE.RELEASE\";\n \n+\n     static {\n \n         // TODO: need a way to force author adding event types to declare the entity details as well, with out braking",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/com/cloud/event/EventTypes.java",
                "sha": "45a904e426cb42c81ce7e72eb0e42f146aece0fe",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/com/cloud/network/IpAddress.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/network/IpAddress.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "api/src/com/cloud/network/IpAddress.java",
                "patch": "@@ -81,4 +81,7 @@\n     Long getVpcId();\n \n     String getVmIp();\n+    \n+    Long getNetworkId();\n+\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/com/cloud/network/IpAddress.java",
                "sha": "c48e8b97ca8da2c3e4cc4ce726e3acc2b4a7844f",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/com/cloud/network/Network.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/network/Network.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 8,
                "filename": "api/src/com/cloud/network/Network.java",
                "patch": "@@ -16,18 +16,19 @@\n // under the License.\n package com.cloud.network;\n \n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.cloudstack.acl.ControlledEntity;\n+import org.apache.cloudstack.api.Identity;\n+import org.apache.cloudstack.api.InternalIdentity;\n+\n import com.cloud.network.Networks.BroadcastDomainType;\n import com.cloud.network.Networks.Mode;\n import com.cloud.network.Networks.TrafficType;\n import com.cloud.utils.fsm.StateMachine2;\n import com.cloud.utils.fsm.StateObject;\n-import org.apache.cloudstack.acl.ControlledEntity;\n-import org.apache.cloudstack.api.Identity;\n-import org.apache.cloudstack.api.InternalIdentity;\n-\n-import java.net.URI;\n-import java.util.ArrayList;\n-import java.util.List;\n \n /**\n  * owned by an account.\n@@ -50,7 +51,7 @@\n                 Capability.MultipleIps, Capability.TrafficStatistics, Capability.SupportedTrafficDirection, Capability.SupportedEgressProtocols);\n         public static final Service Lb = new Service(\"Lb\", Capability.SupportedLBAlgorithms, Capability.SupportedLBIsolation,\n                 Capability.SupportedProtocols, Capability.TrafficStatistics, Capability.LoadBalancingSupportedIps,\n-                Capability.SupportedStickinessMethods, Capability.ElasticLb);\n+                Capability.SupportedStickinessMethods, Capability.ElasticLb, Capability.LbSchemes);\n         public static final Service UserData = new Service(\"UserData\");\n         public static final Service SourceNat = new Service(\"SourceNat\", Capability.SupportedSourceNatTypes, Capability.RedundantRouter);\n         public static final Service StaticNat = new Service(\"StaticNat\", Capability.ElasticIp);\n@@ -124,6 +125,7 @@ public static Service getService(String serviceName) {\n         public static final Provider None = new Provider(\"None\", false);\n         // NiciraNvp is not an \"External\" provider, otherwise we get in trouble with NetworkServiceImpl.providersConfiguredForExternalNetworking \n         public static final Provider NiciraNvp = new Provider(\"NiciraNvp\", false);\n+        public static final Provider InternalLbVm = new Provider(\"InternalLbVm\", false);\n         public static final Provider CiscoVnmc = new Provider(\"CiscoVnmc\", true);\n \n         private String name;\n@@ -177,6 +179,7 @@ public static Provider getProvider(String providerName) {\n         public static final Capability SupportedTrafficDirection = new Capability(\"SupportedTrafficDirection\");\n         public static final Capability SupportedEgressProtocols = new Capability(\"SupportedEgressProtocols\");\n         public static final Capability HealthCheckPolicy = new Capability(\"HealthCheckPolicy\");\n+        public static final Capability LbSchemes = new Capability(\"LbSchemes\");\n \n         private String name;\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/com/cloud/network/Network.java",
                "sha": "fa062c6a694dcba181c2b20cd2a738ec41352838",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/com/cloud/network/NetworkModel.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/network/NetworkModel.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "api/src/com/cloud/network/NetworkModel.java",
                "patch": "@@ -33,6 +33,7 @@\n import com.cloud.network.element.NetworkElement;\n import com.cloud.network.element.UserDataServiceProvider;\n import com.cloud.offering.NetworkOffering;\n+import com.cloud.offering.NetworkOffering.Detail;\n import com.cloud.user.Account;\n import com.cloud.vm.Nic;\n import com.cloud.vm.NicProfile;\n@@ -264,5 +265,11 @@\n \n     Nic getPlaceholderNicForRouter(Network network, Long podId);\n     \n+    IpAddress getPublicIpAddress(String ipAddress, long zoneId);\n+\n+    List<String> getUsedIpsInNetwork(Network network);\n+\n+    Map<Detail, String> getNtwkOffDetails(long offId);\n+\n     Networks.IsolationType[] listNetworkIsolationMethods();\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/com/cloud/network/NetworkModel.java",
                "sha": "f84a8b0c76a1aa7827f817495b75ba1a54eac9b0",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/com/cloud/network/VirtualNetworkApplianceService.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/network/VirtualNetworkApplianceService.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "api/src/com/cloud/network/VirtualNetworkApplianceService.java",
                "patch": "@@ -63,5 +63,7 @@ VirtualRouter rebootRouter(long routerId, boolean reprogramNetwork) throws Concu\n     VirtualRouter startRouter(long id) throws ResourceUnavailableException, InsufficientCapacityException, ConcurrentOperationException;\n \n     VirtualRouter destroyRouter(long routerId, Account caller, Long callerUserId) throws ResourceUnavailableException, ConcurrentOperationException;\n+    \n+    VirtualRouter findRouter(long routerId);\n \n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/com/cloud/network/VirtualNetworkApplianceService.java",
                "sha": "58eead2af0755dbcd567fda6e8e6389e2ff73c0f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/com/cloud/network/VirtualRouterProvider.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/network/VirtualRouterProvider.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 1,
                "filename": "api/src/com/cloud/network/VirtualRouterProvider.java",
                "patch": "@@ -23,7 +23,8 @@\n     public enum VirtualRouterProviderType {\n         VirtualRouter,\n         ElasticLoadBalancerVm,\n-        VPCVirtualRouter\n+        VPCVirtualRouter,\n+        InternalLbVm\n     }\n \n     public VirtualRouterProviderType getType();",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/com/cloud/network/VirtualRouterProvider.java",
                "sha": "f67686e6b082878af7c1fe0106040f49997bed6d",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/com/cloud/network/lb/LoadBalancingRule.java",
                "changes": 83,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/network/lb/LoadBalancingRule.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 67,
                "filename": "api/src/com/cloud/network/lb/LoadBalancingRule.java",
                "patch": "@@ -25,111 +25,83 @@\n import com.cloud.network.as.Counter;\n import com.cloud.network.rules.FirewallRule;\n import com.cloud.network.rules.LoadBalancer;\n+import com.cloud.network.rules.LoadBalancerContainer.Scheme;\n import com.cloud.utils.Pair;\n+import com.cloud.utils.net.Ip;\n \n-public class LoadBalancingRule implements FirewallRule, LoadBalancer {\n+public class LoadBalancingRule {\n     private LoadBalancer lb;\n+    private Ip sourceIp;\n     private List<LbDestination> destinations;\n     private List<LbStickinessPolicy> stickinessPolicies;\n     private LbAutoScaleVmGroup autoScaleVmGroup;\n     private List<LbHealthCheckPolicy> healthCheckPolicies;\n \n     public LoadBalancingRule(LoadBalancer lb, List<LbDestination> destinations,\n-            List<LbStickinessPolicy> stickinessPolicies, List<LbHealthCheckPolicy> healthCheckPolicies) {\n+            List<LbStickinessPolicy> stickinessPolicies, List<LbHealthCheckPolicy> healthCheckPolicies, Ip sourceIp) {\n         this.lb = lb;\n         this.destinations = destinations;\n         this.stickinessPolicies = stickinessPolicies;\n         this.healthCheckPolicies = healthCheckPolicies;\n+        this.sourceIp = sourceIp;\n     }\n \n-    @Override\n     public long getId() {\n         return lb.getId();\n     }\n \n-    @Override\n-    public long getAccountId() {\n-        return lb.getAccountId();\n-    }\n-\n-    @Override\n-    public long getDomainId() {\n-        return lb.getDomainId();\n-    }\n-\n-    @Override\n     public String getName() {\n         return lb.getName();\n     }\n \n-    @Override\n     public String getDescription() {\n         return lb.getDescription();\n     }\n \n-    @Override\n     public int getDefaultPortStart() {\n         return lb.getDefaultPortStart();\n     }\n \n-    @Override\n     public int getDefaultPortEnd() {\n         return lb.getDefaultPortEnd();\n     }\n \n-    @Override\n     public String getAlgorithm() {\n         return lb.getAlgorithm();\n     }\n \n-    @Override\n     public String getUuid() {\n         return lb.getUuid();\n     }\n \n-    @Override\n     public String getXid() {\n         return lb.getXid();\n     }\n \n-    @Override\n-    public Long getSourceIpAddressId() {\n-        return lb.getSourceIpAddressId();\n-    }\n-\n-    @Override\n     public Integer getSourcePortStart() {\n         return lb.getSourcePortStart();\n     }\n \n-    @Override\n     public Integer getSourcePortEnd() {\n         return lb.getSourcePortEnd();\n     }\n \n-    @Override\n     public String getProtocol() {\n         return lb.getProtocol();\n     }\n \n-    @Override\n-    public Purpose getPurpose() {\n-        return Purpose.LoadBalancing;\n+    public FirewallRule.Purpose getPurpose() {\n+        return FirewallRule.Purpose.LoadBalancing;\n     }\n \n-    @Override\n-    public State getState() {\n+    public FirewallRule.State getState() {\n         return lb.getState();\n     }\n \n-    @Override\n     public long getNetworkId() {\n         return lb.getNetworkId();\n     }\n \n-    public LoadBalancer getLb() {\n-        return lb;\n-    }\n \n     public void setDestinations(List<LbDestination> destinations) {\n         this.destinations = destinations;\n@@ -287,36 +259,6 @@ public void setRevoked(boolean revoked) {\n         }\n     }\n \n-    @Override\n-    public Integer getIcmpCode() {\n-        return null;\n-    }\n-\n-    @Override\n-    public Integer getIcmpType() {\n-        return null;\n-    }\n-\n-    @Override\n-    public List<String> getSourceCidrList() {\n-        return null;\n-    }\n-\n-    @Override\n-    public Long getRelated() {\n-        return null;\n-    }\n-\n-    @Override\n-    public TrafficType getTrafficType() {\n-        return null;\n-    }\n-\n-    @Override\n-    public FirewallRuleType getType() {\n-        return FirewallRuleType.User;\n-    }\n-\n     public LbAutoScaleVmGroup getAutoScaleVmGroup() {\n         return autoScaleVmGroup;\n     }\n@@ -473,4 +415,11 @@ public String getCurrentState() {\n         }\n     }\n \n+    public Ip getSourceIp() {\n+        return sourceIp;\n+    }\n+\n+    public Scheme getScheme() {\n+        return lb.getScheme();\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/com/cloud/network/lb/LoadBalancingRule.java",
                "sha": "4b37782a8c73b420f25a3ab507e9f15277bd2810",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/com/cloud/network/lb/LoadBalancingRulesService.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/network/lb/LoadBalancingRulesService.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 6,
                "filename": "api/src/com/cloud/network/lb/LoadBalancingRulesService.java",
                "patch": "@@ -17,10 +17,10 @@\n package com.cloud.network.lb;\n \n import java.util.List;\n+import java.util.Map;\n \n import org.apache.cloudstack.api.command.user.loadbalancer.CreateLBHealthCheckPolicyCmd;\n import org.apache.cloudstack.api.command.user.loadbalancer.CreateLBStickinessPolicyCmd;\n-import org.apache.cloudstack.api.command.user.loadbalancer.CreateLoadBalancerRuleCmd;\n import org.apache.cloudstack.api.command.user.loadbalancer.ListLBHealthCheckPoliciesCmd;\n import org.apache.cloudstack.api.command.user.loadbalancer.ListLBStickinessPoliciesCmd;\n import org.apache.cloudstack.api.command.user.loadbalancer.ListLoadBalancerRuleInstancesCmd;\n@@ -30,12 +30,13 @@\n import com.cloud.exception.InsufficientAddressCapacityException;\n import com.cloud.exception.NetworkRuleConflictException;\n import com.cloud.exception.ResourceUnavailableException;\n-import com.cloud.network.lb.LoadBalancingRule.LbStickinessPolicy;\n import com.cloud.network.rules.HealthCheckPolicy;\n import com.cloud.network.rules.LoadBalancer;\n+import com.cloud.network.rules.LoadBalancerContainer.Scheme;\n import com.cloud.network.rules.StickinessPolicy;\n import com.cloud.uservm.UserVm;\n import com.cloud.utils.Pair;\n+import com.cloud.utils.net.Ip;\n \n \n public interface LoadBalancingRulesService {\n@@ -49,7 +50,9 @@\n      * @return the newly created LoadBalancerVO if successful, null otherwise\n      * @throws InsufficientAddressCapacityException\n      */\n-    LoadBalancer createLoadBalancerRule(CreateLoadBalancerRuleCmd lb, boolean openFirewall) throws NetworkRuleConflictException, InsufficientAddressCapacityException;\n+    LoadBalancer createPublicLoadBalancerRule(String xId, String name, String description, \n+            int srcPortStart, int srcPortEnd, int defPortStart, int defPortEnd, Long ipAddrId, String protocol, String algorithm,\n+            long networkId, long lbOwnerId, boolean openFirewall) throws NetworkRuleConflictException, InsufficientAddressCapacityException;\n \n     LoadBalancer updateLoadBalancerRule(UpdateLoadBalancerRuleCmd cmd);\n \n@@ -134,8 +137,9 @@\n \n     List<? extends HealthCheckPolicy> searchForLBHealthCheckPolicies(ListLBHealthCheckPoliciesCmd cmd);\n \n-    List<LoadBalancingRule> listByNetworkId(long networkId);\n-\n     LoadBalancer findById(long LoadBalancer);\n-   public void updateLBHealthChecks() throws ResourceUnavailableException;\n+    \n+    public void updateLBHealthChecks(Scheme scheme) throws ResourceUnavailableException;\n+\n+    Map<Ip, UserVm> getLbInstances(long lbId);\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/com/cloud/network/lb/LoadBalancingRulesService.java",
                "sha": "5fc41e34c349935562eca66cbca5b4a5a11e97cd",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/com/cloud/network/router/VirtualRouter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/network/router/VirtualRouter.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 1,
                "filename": "api/src/com/cloud/network/router/VirtualRouter.java",
                "patch": "@@ -23,7 +23,7 @@\n  */\n public interface VirtualRouter extends VirtualMachine {\n \tpublic enum Role {\n-\t\tVIRTUAL_ROUTER, LB\n+\t\tVIRTUAL_ROUTER, LB, INTERNAL_LB_VM\n \t}\n     Role getRole();\n     boolean getIsRedundantRouter();",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/com/cloud/network/router/VirtualRouter.java",
                "sha": "2311f4899189e89e490d159a351ac6dfbe1c50ca",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/com/cloud/network/rules/LoadBalancer.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/network/rules/LoadBalancer.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 8,
                "filename": "api/src/com/cloud/network/rules/LoadBalancer.java",
                "patch": "@@ -19,16 +19,10 @@\n /**\n  * Definition for a LoadBalancer\n  */\n-public interface LoadBalancer extends FirewallRule {\n-\n-    String getName();\n-\n-    String getDescription();\n-\n+public interface LoadBalancer extends FirewallRule, LoadBalancerContainer {\n+    \n     int getDefaultPortStart();\n \n     int getDefaultPortEnd();\n \n-    String getAlgorithm();\n-\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/com/cloud/network/rules/LoadBalancer.java",
                "sha": "e6dadcaee9713646f7dd608fe0c92965ae92a8b5",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/com/cloud/network/rules/LoadBalancerContainer.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/network/rules/LoadBalancerContainer.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "api/src/com/cloud/network/rules/LoadBalancerContainer.java",
                "patch": "@@ -0,0 +1,33 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.network.rules;\n+\n+public interface LoadBalancerContainer {\n+    \n+    public enum Scheme {\n+        Public, Internal;\n+    }\n+\n+    String getName();\n+\n+    String getDescription();\n+    \n+    String getAlgorithm();\n+    \n+    Scheme getScheme();\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/com/cloud/network/rules/LoadBalancerContainer.java",
                "sha": "9d5ea595c9daf66244f0b08e032666f800d540bf",
                "status": "added"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/com/cloud/offering/NetworkOffering.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/offering/NetworkOffering.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "api/src/com/cloud/offering/NetworkOffering.java",
                "patch": "@@ -16,6 +16,8 @@\n // under the License.\n package com.cloud.offering;\n \n+import java.util.Map;\n+\n import org.apache.cloudstack.acl.InfrastructureEntity;\n import org.apache.cloudstack.api.Identity;\n import org.apache.cloudstack.api.InternalIdentity;\n@@ -38,6 +40,11 @@\n         Disabled,\n         Enabled\n     }\n+    \n+    public enum Detail {\n+        InternalLbProvider,\n+        PublicLbProvider\n+    }\n \n     public final static String SystemPublicNetwork = \"System-Public-Network\";\n     public final static String SystemControlNetwork = \"System-Control-Network\";\n@@ -116,5 +123,9 @@\n     boolean isInline();\n \n     boolean getIsPersistent();\n+    \n+    boolean getInternalLb();\n+\n+    boolean getPublicLb();\n \n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/com/cloud/offering/NetworkOffering.java",
                "sha": "72e2a2bbbabd914facb621e2ca4d00796af506fc",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/com/cloud/offering/ServiceOffering.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/offering/ServiceOffering.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "api/src/com/cloud/offering/ServiceOffering.java",
                "patch": "@@ -30,6 +30,7 @@\n     public static final String ssvmDefaultOffUniqueName = \"Cloud.com-SecondaryStorage\";\n     public static final String routerDefaultOffUniqueName = \"Cloud.Com-SoftwareRouter\";\n     public static final String elbVmDefaultOffUniqueName = \"Cloud.Com-ElasticLBVm\";\n+    public static final String internalLbVmDefaultOffUniqueName = \"Cloud.Com-InternalLBVm\";\n \n     public enum StorageType {\n         local,",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/com/cloud/offering/ServiceOffering.java",
                "sha": "165369c5e9b2af18397377c67d06dd637eb4dcf9",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/com/cloud/vm/VirtualMachine.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/vm/VirtualMachine.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 1,
                "filename": "api/src/com/cloud/vm/VirtualMachine.java",
                "patch": "@@ -186,6 +186,7 @@ public static boolean isVmDestroyed(State oldState, Event e, State newState) {\n         SecondaryStorageVm,\n         ElasticIpVm,\n         ElasticLoadBalancerVm,\n+        InternalLoadBalancerVm,\n \n         /*\n          * UserBareMetal is only used for selecting VirtualMachineGuru, there is no\n@@ -196,7 +197,7 @@ public static boolean isVmDestroyed(State oldState, Event e, State newState) {\n         public static boolean isSystemVM(VirtualMachine.Type vmtype) {\n             if (DomainRouter.equals(vmtype)\n                     || ConsoleProxy.equals(vmtype)\n-                    || SecondaryStorageVm.equals(vmtype)) {\n+                    || SecondaryStorageVm.equals(vmtype) || InternalLoadBalancerVm.equals(vmtype)) {\n                 return true;\n             }\n             return false;",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/com/cloud/vm/VirtualMachine.java",
                "sha": "ce9add62469ee05c8d9cb5409deb111bbd5a40ec",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/ApiConstants.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/ApiConstants.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/api/ApiConstants.java",
                "patch": "@@ -480,6 +480,12 @@\n     public static final String HEALTHCHECK_HEALTHY_THRESHOLD = \"healthythreshold\";\n     public static final String HEALTHCHECK_UNHEALTHY_THRESHOLD = \"unhealthythreshold\";\n     public static final String HEALTHCHECK_PINGPATH = \"pingpath\";\n+    public static final String SOURCE_PORT = \"sourceport\";\n+    public static final String INSTANCE_PORT = \"instanceport\";\n+    public static final String SOURCE_IP = \"sourceipaddress\";\n+    public static final String SOURCE_IP_NETWORK_ID = \"sourceipaddressnetworkid\";\n+    public static final String SCHEME = \"scheme\";\n+    public static final String PROVIDER_TYPE = \"providertype\";\n     public static final String AFFINITY_GROUP_IDS = \"affinitygroupids\";\n     public static final String AFFINITY_GROUP_NAMES = \"affinitygroupnames\";\n     public static final String ASA_INSIDE_PORT_PROFILE = \"insideportprofile\";",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/ApiConstants.java",
                "sha": "c76506afc10d960873fc0328e06ad78a1e2d5fff",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/BaseCmd.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/BaseCmd.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/api/BaseCmd.java",
                "patch": "@@ -28,6 +28,9 @@\n import javax.inject.Inject;\n \n import org.apache.cloudstack.affinity.AffinityGroupService;\n+import org.apache.cloudstack.network.element.InternalLoadBalancerElementService;\n+import org.apache.cloudstack.network.lb.ApplicationLoadBalancerService;\n+import org.apache.cloudstack.network.lb.InternalLoadBalancerVMService;\n import org.apache.cloudstack.query.QueryService;\n import org.apache.cloudstack.usage.UsageService;\n import org.apache.log4j.Logger;\n@@ -139,7 +142,11 @@\n     @Inject public VMSnapshotService _vmSnapshotService;\n     @Inject public DataStoreProviderApiService dataStoreProviderApiService;\n     @Inject public VpcProvisioningService _vpcProvSvc;\n+    @Inject public ApplicationLoadBalancerService _newLbSvc;\n+    @Inject public ApplicationLoadBalancerService _appLbService;\n     @Inject public AffinityGroupService _affinityGroupService;\n+    @Inject public InternalLoadBalancerElementService _internalLbElementSvc;\n+    @Inject public InternalLoadBalancerVMService _internalLbSvc;\n     @Inject public NetworkModel _ntwkModel;\n \n     public abstract void execute() throws ResourceUnavailableException, InsufficientCapacityException, ServerApiException, ConcurrentOperationException, ResourceAllocationException, NetworkRuleConflictException;",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/BaseCmd.java",
                "sha": "8d66a8327f0323af8e4a212051d60d9228793fa9",
                "status": "modified"
            },
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/ResponseGenerator.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/ResponseGenerator.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 6,
                "filename": "api/src/org/apache/cloudstack/api/ResponseGenerator.java",
                "patch": "@@ -19,14 +19,15 @@\n import java.text.DecimalFormat;\n import java.util.EnumSet;\n import java.util.List;\n+import java.util.Map;\n \n-import com.cloud.vm.NicSecondaryIp;\n import org.apache.cloudstack.affinity.AffinityGroup;\n import org.apache.cloudstack.affinity.AffinityGroupResponse;\n import org.apache.cloudstack.api.ApiConstants.HostDetails;\n import org.apache.cloudstack.api.ApiConstants.VMDetails;\n import org.apache.cloudstack.api.command.user.job.QueryAsyncJobResultCmd;\n import org.apache.cloudstack.api.response.AccountResponse;\n+import org.apache.cloudstack.api.response.ApplicationLoadBalancerResponse;\n import org.apache.cloudstack.api.response.AsyncJobResponse;\n import org.apache.cloudstack.api.response.AutoScalePolicyResponse;\n import org.apache.cloudstack.api.response.AutoScaleVmGroupResponse;\n@@ -44,11 +45,15 @@\n import org.apache.cloudstack.api.response.ExtractResponse;\n import org.apache.cloudstack.api.response.FirewallResponse;\n import org.apache.cloudstack.api.response.FirewallRuleResponse;\n+import org.apache.cloudstack.api.response.GlobalLoadBalancerResponse;\n import org.apache.cloudstack.api.response.GuestOSResponse;\n+import org.apache.cloudstack.api.response.GuestVlanRangeResponse;\n+import org.apache.cloudstack.api.response.HostForMigrationResponse;\n import org.apache.cloudstack.api.response.HostResponse;\n import org.apache.cloudstack.api.response.HypervisorCapabilitiesResponse;\n import org.apache.cloudstack.api.response.IPAddressResponse;\n import org.apache.cloudstack.api.response.InstanceGroupResponse;\n+import org.apache.cloudstack.api.response.InternalLoadBalancerElementResponse;\n import org.apache.cloudstack.api.response.IpForwardingRuleResponse;\n import org.apache.cloudstack.api.response.IsolationMethodResponse;\n import org.apache.cloudstack.api.response.LBHealthCheckResponse;\n@@ -84,6 +89,7 @@\n import org.apache.cloudstack.api.response.SnapshotScheduleResponse;\n import org.apache.cloudstack.api.response.StaticRouteResponse;\n import org.apache.cloudstack.api.response.StorageNetworkIpRangeResponse;\n+import org.apache.cloudstack.api.response.StoragePoolForMigrationResponse;\n import org.apache.cloudstack.api.response.StoragePoolResponse;\n import org.apache.cloudstack.api.response.SwiftResponse;\n import org.apache.cloudstack.api.response.SystemVmInstanceResponse;\n@@ -103,6 +109,7 @@\n import org.apache.cloudstack.api.response.VpcResponse;\n import org.apache.cloudstack.api.response.VpnUsersResponse;\n import org.apache.cloudstack.api.response.ZoneResponse;\n+import org.apache.cloudstack.network.lb.ApplicationLoadBalancerRule;\n import org.apache.cloudstack.region.Region;\n import org.apache.cloudstack.usage.Usage;\n \n@@ -119,10 +126,25 @@\n import com.cloud.event.Event;\n import com.cloud.host.Host;\n import com.cloud.hypervisor.HypervisorCapabilities;\n-import com.cloud.network.*;\n+import com.cloud.network.GuestVlan;\n+import com.cloud.network.IpAddress;\n+import com.cloud.network.Network;\n import com.cloud.network.Network.Service;\n import com.cloud.network.Networks.IsolationType;\n-import com.cloud.network.as.*;\n+import com.cloud.network.PhysicalNetwork;\n+import com.cloud.network.PhysicalNetworkServiceProvider;\n+import com.cloud.network.PhysicalNetworkTrafficType;\n+import com.cloud.network.RemoteAccessVpn;\n+import com.cloud.network.Site2SiteCustomerGateway;\n+import com.cloud.network.Site2SiteVpnConnection;\n+import com.cloud.network.Site2SiteVpnGateway;\n+import com.cloud.network.VirtualRouterProvider;\n+import com.cloud.network.VpnUser;\n+import com.cloud.network.as.AutoScalePolicy;\n+import com.cloud.network.as.AutoScaleVmGroup;\n+import com.cloud.network.as.AutoScaleVmProfile;\n+import com.cloud.network.as.Condition;\n+import com.cloud.network.as.Counter;\n import com.cloud.network.router.VirtualRouter;\n import com.cloud.network.rules.FirewallRule;\n import com.cloud.network.rules.HealthCheckPolicy;\n@@ -145,19 +167,25 @@\n import com.cloud.projects.ProjectInvitation;\n import com.cloud.region.ha.GlobalLoadBalancerRule;\n import com.cloud.server.ResourceTag;\n-import com.cloud.storage.*;\n+import com.cloud.storage.GuestOS;\n+import com.cloud.storage.S3;\n+import com.cloud.storage.Snapshot;\n+import com.cloud.storage.StoragePool;\n+import com.cloud.storage.Swift;\n+import com.cloud.storage.Volume;\n import com.cloud.storage.snapshot.SnapshotPolicy;\n import com.cloud.storage.snapshot.SnapshotSchedule;\n import com.cloud.template.VirtualMachineTemplate;\n import com.cloud.user.Account;\n import com.cloud.user.User;\n import com.cloud.user.UserAccount;\n import com.cloud.uservm.UserVm;\n+import com.cloud.utils.net.Ip;\n import com.cloud.vm.InstanceGroup;\n import com.cloud.vm.Nic;\n-import com.cloud.vm.snapshot.VMSnapshot;\n+import com.cloud.vm.NicSecondaryIp;\n import com.cloud.vm.VirtualMachine;\n-import org.apache.cloudstack.api.response.*;\n+import com.cloud.vm.snapshot.VMSnapshot;\n \n public interface ResponseGenerator {\n     UserResponse createUserResponse(UserAccount user);\n@@ -397,9 +425,13 @@ LBHealthCheckResponse createLBHealthCheckPolicyResponse(List<? extends HealthChe\n     NicSecondaryIpResponse createSecondaryIPToNicResponse(NicSecondaryIp result);\n     public NicResponse createNicResponse(Nic result);\n \n+    ApplicationLoadBalancerResponse createLoadBalancerContainerReponse(ApplicationLoadBalancerRule lb, Map<Ip, UserVm> lbInstances);\n+    \n     AffinityGroupResponse createAffinityGroupResponse(AffinityGroup group);\n \n     Long getAffinityGroupId(String name, long entityOwnerId);\n \n+    InternalLoadBalancerElementResponse createInternalLbElementResponse(VirtualRouterProvider result);\n+    \n     IsolationMethodResponse createIsolationMethodResponse(IsolationType method);\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/ResponseGenerator.java",
                "sha": "ab8f99583a81a51f9c0030220d3e88aabe979189",
                "status": "modified"
            },
            {
                "additions": 114,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/command/admin/internallb/ConfigureInternalLoadBalancerElementCmd.java",
                "changes": 114,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/command/admin/internallb/ConfigureInternalLoadBalancerElementCmd.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/api/command/admin/internallb/ConfigureInternalLoadBalancerElementCmd.java",
                "patch": "@@ -0,0 +1,114 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the \n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.api.command.admin.internallb;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.ApiErrorCode;\n+import org.apache.cloudstack.api.BaseAsyncCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.ServerApiException;\n+import org.apache.cloudstack.api.response.InternalLoadBalancerElementResponse;\n+import org.apache.cloudstack.network.element.InternalLoadBalancerElementService;\n+import org.apache.log4j.Logger;\n+\n+import com.cloud.event.EventTypes;\n+import com.cloud.exception.ConcurrentOperationException;\n+import com.cloud.exception.InsufficientCapacityException;\n+import com.cloud.exception.ResourceUnavailableException;\n+import com.cloud.network.VirtualRouterProvider;\n+import com.cloud.user.Account;\n+import com.cloud.user.UserContext;\n+\n+@APICommand(name = \"configureInternalLoadBalancerElement\", responseObject=InternalLoadBalancerElementResponse.class,\n+            description=\"Configures an Internal Load Balancer element.\", since=\"4.2.0\")\n+public class ConfigureInternalLoadBalancerElementCmd extends BaseAsyncCmd {\n+    public static final Logger s_logger = Logger.getLogger(ConfigureInternalLoadBalancerElementCmd.class.getName());\n+    private static final String s_name = \"configureinternalloadbalancerelementresponse\";\n+\n+    @Inject\n+    private List<InternalLoadBalancerElementService> _service;\n+\n+    /////////////////////////////////////////////////////\n+    //////////////// API parameters /////////////////////\n+    /////////////////////////////////////////////////////\n+\n+    @Parameter(name=ApiConstants.ID, type=CommandType.UUID, entityType = InternalLoadBalancerElementResponse.class,\n+            required=true, description=\"the ID of the internal lb provider\")\n+    private Long id;\n+\n+    @Parameter(name=ApiConstants.ENABLED, type=CommandType.BOOLEAN, required=true, description=\"Enables/Disables the Internal Load Balancer element\")\n+    private Boolean enabled;\n+\n+    /////////////////////////////////////////////////////\n+    /////////////////// Accessors ///////////////////////\n+    /////////////////////////////////////////////////////\n+\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public Boolean getEnabled() {\n+        return enabled;\n+    }\n+\n+    /////////////////////////////////////////////////////\n+    /////////////// API Implementation///////////////////\n+    /////////////////////////////////////////////////////\n+\n+    @Override\n+    public String getCommandName() {\n+        return s_name;\n+    }\n+\n+    @Override\n+    public long getEntityOwnerId() {\n+        return Account.ACCOUNT_ID_SYSTEM;\n+    }\n+\n+    @Override\n+    public String getEventType() {\n+        return EventTypes.EVENT_NETWORK_ELEMENT_CONFIGURE;\n+    }\n+\n+    @Override\n+    public String getEventDescription() {\n+        return  \"configuring internal load balancer element: \" + id;\n+    }\n+\n+    @Override\n+    public void execute() throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException{\n+        s_logger.debug(\"hello alena\");\n+        UserContext.current().setEventDetails(\"Internal load balancer element: \" + id);\n+        s_logger.debug(\"hello alena\");\n+        VirtualRouterProvider result = _service.get(0).configureInternalLoadBalancerElement(getId(), getEnabled());\n+        s_logger.debug(\"hello alena\");\n+        if (result != null){\n+            InternalLoadBalancerElementResponse routerResponse = _responseGenerator.createInternalLbElementResponse(result);\n+            routerResponse.setResponseName(getCommandName());\n+            this.setResponseObject(routerResponse);\n+        } else {\n+            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to configure the internal load balancer element\");\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/command/admin/internallb/ConfigureInternalLoadBalancerElementCmd.java",
                "sha": "7c3d1e95e571db14c8d0f894e5c90dc9240a25f7",
                "status": "added"
            },
            {
                "additions": 116,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/command/admin/internallb/CreateInternalLoadBalancerElementCmd.java",
                "changes": 116,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/command/admin/internallb/CreateInternalLoadBalancerElementCmd.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/api/command/admin/internallb/CreateInternalLoadBalancerElementCmd.java",
                "patch": "@@ -0,0 +1,116 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.api.command.admin.internallb;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.ApiErrorCode;\n+import org.apache.cloudstack.api.BaseAsyncCreateCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.ServerApiException;\n+import org.apache.cloudstack.api.response.InternalLoadBalancerElementResponse;\n+import org.apache.cloudstack.api.response.ProviderResponse;\n+import org.apache.cloudstack.network.element.InternalLoadBalancerElementService;\n+import org.apache.log4j.Logger;\n+\n+import com.cloud.event.EventTypes;\n+import com.cloud.exception.ResourceAllocationException;\n+import com.cloud.network.VirtualRouterProvider;\n+import com.cloud.user.Account;\n+import com.cloud.user.UserContext;\n+\n+@APICommand(name = \"createInternalLoadBalancerElement\", responseObject=InternalLoadBalancerElementResponse.class, description=\"Create an Internal Load Balancer element.\",since=\"4.2.0\")\n+public class CreateInternalLoadBalancerElementCmd extends BaseAsyncCreateCmd {\n+    public static final Logger s_logger = Logger.getLogger(CreateInternalLoadBalancerElementCmd.class.getName());\n+    private static final String s_name = \"createinternalloadbalancerelementresponse\";\n+\n+    @Inject\n+    private List<InternalLoadBalancerElementService> _service;\n+\n+    /////////////////////////////////////////////////////\n+    //////////////// API parameters /////////////////////\n+    /////////////////////////////////////////////////////\n+\n+    @Parameter(name=ApiConstants.NETWORK_SERVICE_PROVIDER_ID, type=CommandType.UUID, entityType = ProviderResponse.class, required=true, description=\"the network service provider ID of the internal load balancer element\")\n+    private Long nspId;\n+\n+    /////////////////////////////////////////////////////\n+    /////////////////// Accessors ///////////////////////\n+    /////////////////////////////////////////////////////\n+\n+    public void setNspId(Long nspId) {\n+        this.nspId = nspId;\n+    }\n+\n+    public Long getNspId() {\n+        return nspId;\n+    }\n+\n+    /////////////////////////////////////////////////////\n+    /////////////// API Implementation///////////////////\n+    /////////////////////////////////////////////////////\n+\n+\n+\n+    @Override\n+    public String getCommandName() {\n+        return s_name;\n+    }\n+\n+    @Override\n+    public long getEntityOwnerId() {\n+        return Account.ACCOUNT_ID_SYSTEM;\n+    }\n+\n+    @Override\n+    public void execute(){\n+        UserContext.current().setEventDetails(\"Virtual router element Id: \"+getEntityId());\n+        VirtualRouterProvider result = _service.get(0).getInternalLoadBalancerElement(getEntityId());\n+        if (result != null) {\n+            InternalLoadBalancerElementResponse response = _responseGenerator.createInternalLbElementResponse(result);\n+            response.setResponseName(getCommandName());\n+            this.setResponseObject(response);\n+        }else {\n+            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to add Virtual Router entity to physical network\");\n+        }\n+    }\n+\n+    @Override\n+    public void create() throws ResourceAllocationException {\n+        VirtualRouterProvider result = _service.get(0).addInternalLoadBalancerElement(getNspId());\n+        if (result != null) {\n+            setEntityId(result.getId());\n+            setEntityUuid(result.getUuid());\n+        } else {\n+            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to add Internal Load Balancer entity to physical network\");\n+        }\n+    }\n+\n+    @Override\n+    public String getEventType() {\n+        return EventTypes.EVENT_SERVICE_PROVIDER_CREATE;\n+    }\n+\n+    @Override\n+    public String getEventDescription() {\n+        return  \"Adding physical network element Internal Load Balancer: \" + getEntityId();\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/command/admin/internallb/CreateInternalLoadBalancerElementCmd.java",
                "sha": "2902f7ae18a331c180e8706edb807b11732a085a",
                "status": "added"
            },
            {
                "additions": 151,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/command/admin/internallb/ListInternalLBVMsCmd.java",
                "changes": 151,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/command/admin/internallb/ListInternalLBVMsCmd.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/api/command/admin/internallb/ListInternalLBVMsCmd.java",
                "patch": "@@ -0,0 +1,151 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.api.command.admin.internallb;\n+\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.BaseListProjectAndAccountResourcesCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.response.DomainRouterResponse;\n+import org.apache.cloudstack.api.response.HostResponse;\n+import org.apache.cloudstack.api.response.ListResponse;\n+import org.apache.cloudstack.api.response.NetworkResponse;\n+import org.apache.cloudstack.api.response.PodResponse;\n+import org.apache.cloudstack.api.response.UserVmResponse;\n+import org.apache.cloudstack.api.response.VpcResponse;\n+import org.apache.cloudstack.api.response.ZoneResponse;\n+import org.apache.log4j.Logger;\n+\n+import com.cloud.async.AsyncJob;\n+import com.cloud.network.router.VirtualRouter.Role;\n+\n+@APICommand(name = \"listInternalLoadBalancerVMs\", description=\"List internal LB VMs.\", responseObject=DomainRouterResponse.class)\n+public class ListInternalLBVMsCmd extends BaseListProjectAndAccountResourcesCmd {\n+    public static final Logger s_logger = Logger.getLogger(ListInternalLBVMsCmd.class.getName());\n+\n+    private static final String s_name = \"listinternallbvmssresponse\";\n+\n+    /////////////////////////////////////////////////////\n+    //////////////// API parameters /////////////////////\n+    /////////////////////////////////////////////////////\n+\n+    @Parameter(name=ApiConstants.HOST_ID, type=CommandType.UUID, entityType=HostResponse.class,\n+            description=\"the host ID of the Internal LB VM\")\n+    private Long hostId;\n+\n+    @Parameter(name=ApiConstants.ID, type=CommandType.UUID, entityType=UserVmResponse.class,\n+            description=\"the ID of the Internal LB VM\")\n+    private Long id;\n+\n+    @Parameter(name=ApiConstants.NAME, type=CommandType.STRING, description=\"the name of the Internal LB VM\")\n+    private String routerName;\n+\n+    @Parameter(name=ApiConstants.POD_ID, type=CommandType.UUID, entityType=PodResponse.class,\n+            description=\"the Pod ID of the Internal LB VM\")\n+    private Long podId;\n+\n+    @Parameter(name=ApiConstants.STATE, type=CommandType.STRING, description=\"the state of the Internal LB VM\")\n+    private String state;\n+\n+    @Parameter(name=ApiConstants.ZONE_ID, type=CommandType.UUID, entityType=ZoneResponse.class,\n+            description=\"the Zone ID of the Internal LB VM\")\n+    private Long zoneId;\n+\n+    @Parameter(name=ApiConstants.NETWORK_ID, type=CommandType.UUID, entityType=NetworkResponse.class,\n+            description=\"list by network id\")\n+    private Long networkId;\n+\n+    @Parameter(name=ApiConstants.VPC_ID, type=CommandType.UUID, entityType=VpcResponse.class,\n+            description=\"List Internal LB VMs by VPC\")\n+    private Long vpcId;\n+\n+    @Parameter(name=ApiConstants.FOR_VPC, type=CommandType.BOOLEAN, description=\"if true is passed for this parameter, list only VPC Internal LB VMs\")\n+    private Boolean forVpc;\n+    \n+    @Parameter(name=ApiConstants.ZONE_TYPE, type=CommandType.STRING, description=\"the network type of the zone that the virtual machine belongs to\")\n+    private String zoneType;\n+    \n+\n+    /////////////////////////////////////////////////////\n+    /////////////////// Accessors ///////////////////////\n+    /////////////////////////////////////////////////////\n+\n+    public Long getHostId() {\n+        return hostId;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public String getRouterName() {\n+        return routerName;\n+    }\n+\n+    public Long getPodId() {\n+        return podId;\n+    }\n+\n+    public String getState() {\n+        return state;\n+    }\n+\n+    public Long getZoneId() {\n+        return zoneId;\n+    }\n+\n+    public Long getNetworkId() {\n+        return networkId;\n+    }\n+\n+    public Long getVpcId() {\n+        return vpcId;\n+    }\n+\n+    public Boolean getForVpc() {\n+        return forVpc;\n+    }\n+    \n+    public String getRole() {\n+        return Role.INTERNAL_LB_VM.toString();\n+    }\n+    \n+    public String getZoneType() {\n+        return zoneType;\n+    }\n+\n+    /////////////////////////////////////////////////////\n+    /////////////// API Implementation///////////////////\n+    /////////////////////////////////////////////////////\n+\n+    @Override\n+    public String getCommandName() {\n+        return s_name;\n+    }\n+\n+    @Override\n+    public AsyncJob.Type getInstanceType() {\n+        return AsyncJob.Type.DomainRouter;\n+    }\n+\n+    @Override\n+    public void execute(){\n+        ListResponse<DomainRouterResponse> response = _queryService.searchForInternalLbVms(this);\n+        response.setResponseName(getCommandName());\n+        this.setResponseObject(response);\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/command/admin/internallb/ListInternalLBVMsCmd.java",
                "sha": "e314b3245c75bb233ef97882da2993cc6e45ae99",
                "status": "added"
            },
            {
                "additions": 99,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/command/admin/internallb/ListInternalLoadBalancerElementsCmd.java",
                "changes": 99,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/command/admin/internallb/ListInternalLoadBalancerElementsCmd.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/api/command/admin/internallb/ListInternalLoadBalancerElementsCmd.java",
                "patch": "@@ -0,0 +1,99 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.api.command.admin.internallb;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.BaseListCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.ServerApiException;\n+import org.apache.cloudstack.api.response.InternalLoadBalancerElementResponse;\n+import org.apache.cloudstack.api.response.ListResponse;\n+import org.apache.cloudstack.api.response.ProviderResponse;\n+import org.apache.cloudstack.network.element.InternalLoadBalancerElementService;\n+import org.apache.log4j.Logger;\n+\n+import com.cloud.exception.ConcurrentOperationException;\n+import com.cloud.exception.InsufficientCapacityException;\n+import com.cloud.exception.ResourceAllocationException;\n+import com.cloud.exception.ResourceUnavailableException;\n+import com.cloud.network.VirtualRouterProvider;\n+\n+@APICommand(name = \"listInternalLoadBalancerElements\", description=\"Lists all available Internal Load Balancer elements.\",\n+            responseObject=InternalLoadBalancerElementResponse.class, since=\"4.2.0\")\n+public class ListInternalLoadBalancerElementsCmd extends BaseListCmd {\n+    public static final Logger s_logger = Logger.getLogger(ListInternalLoadBalancerElementsCmd.class.getName());\n+    private static final String _name = \"listinternalloadbalancerelementsresponse\";\n+\n+    @Inject\n+    private InternalLoadBalancerElementService _service;\n+\n+    /////////////////////////////////////////////////////\n+    //////////////// API parameters /////////////////////\n+    /////////////////////////////////////////////////////\n+    @Parameter(name=ApiConstants.ID, type=CommandType.UUID, entityType = InternalLoadBalancerElementResponse.class,\n+            description=\"list internal load balancer elements by id\")\n+    private Long id;\n+\n+    @Parameter(name=ApiConstants.NSP_ID, type=CommandType.UUID, entityType = ProviderResponse.class,\n+            description=\"list internal load balancer elements by network service provider id\")\n+    private Long nspId;\n+\n+    @Parameter(name=ApiConstants.ENABLED, type=CommandType.BOOLEAN, description=\"list internal load balancer elements by enabled state\")\n+    private Boolean enabled;\n+\n+    /////////////////////////////////////////////////////\n+    /////////////////// Accessors ///////////////////////\n+    /////////////////////////////////////////////////////\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public Long getNspId() {\n+        return nspId;\n+    }\n+\n+    public Boolean getEnabled() {\n+        return enabled;\n+    }\n+\n+    @Override\n+    public String getCommandName() {\n+        return _name;\n+    }\n+\n+    @Override\n+    public void execute() throws ResourceUnavailableException, InsufficientCapacityException, ServerApiException, ConcurrentOperationException, ResourceAllocationException {\n+        List<? extends VirtualRouterProvider> providers = _service.searchForInternalLoadBalancerElements(getId(), getNspId(), getEnabled());\n+        ListResponse<InternalLoadBalancerElementResponse> response = new ListResponse<InternalLoadBalancerElementResponse>();\n+        List<InternalLoadBalancerElementResponse> providerResponses = new ArrayList<InternalLoadBalancerElementResponse>();\n+        for (VirtualRouterProvider provider : providers) {\n+            InternalLoadBalancerElementResponse providerResponse = _responseGenerator.createInternalLbElementResponse(provider);\n+            providerResponses.add(providerResponse);\n+        }\n+        response.setResponses(providerResponses);\n+        response.setResponseName(getCommandName());\n+        this.setResponseObject(response);\n+\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/command/admin/internallb/ListInternalLoadBalancerElementsCmd.java",
                "sha": "1853619199555ebb64f7631024a43b5eb9e7fde8",
                "status": "added"
            },
            {
                "additions": 120,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/command/admin/internallb/StartInternalLBVMCmd.java",
                "changes": 120,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/command/admin/internallb/StartInternalLBVMCmd.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/api/command/admin/internallb/StartInternalLBVMCmd.java",
                "patch": "@@ -0,0 +1,120 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.api.command.admin.internallb;\n+\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.ApiErrorCode;\n+import org.apache.cloudstack.api.BaseAsyncCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.ServerApiException;\n+import org.apache.cloudstack.api.response.DomainRouterResponse;\n+import org.apache.log4j.Logger;\n+\n+import com.cloud.async.AsyncJob;\n+import com.cloud.event.EventTypes;\n+import com.cloud.exception.ConcurrentOperationException;\n+import com.cloud.exception.InsufficientCapacityException;\n+import com.cloud.exception.InvalidParameterValueException;\n+import com.cloud.exception.ResourceUnavailableException;\n+import com.cloud.network.router.VirtualRouter;\n+import com.cloud.network.router.VirtualRouter.Role;\n+import com.cloud.user.UserContext;\n+\n+@APICommand(name = \"startInternalLoadBalancerVM\", responseObject=DomainRouterResponse.class, description=\"Starts an existing internal lb vm.\")\n+public class StartInternalLBVMCmd extends BaseAsyncCmd {\n+    public static final Logger s_logger = Logger.getLogger(StartInternalLBVMCmd.class.getName());\n+    private static final String s_name = \"startinternallbvmresponse\";\n+\n+\n+    /////////////////////////////////////////////////////\n+    //////////////// API parameters /////////////////////\n+    /////////////////////////////////////////////////////\n+\n+    @Parameter(name=ApiConstants.ID, type=CommandType.UUID, entityType=DomainRouterResponse.class,\n+            required=true, description=\"the ID of the internal lb vm\")\n+    private Long id;\n+\n+    /////////////////////////////////////////////////////\n+    /////////////////// Accessors ///////////////////////\n+    /////////////////////////////////////////////////////\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    /////////////////////////////////////////////////////\n+    /////////////// API Implementation///////////////////\n+    /////////////////////////////////////////////////////\n+\n+    @Override\n+    public String getCommandName() {\n+        return s_name;\n+    }\n+\n+    public static String getResultObjectName() {\n+        return \"router\";\n+    }\n+\n+    @Override\n+    public long getEntityOwnerId() {\n+        VirtualRouter router = _entityMgr.findById(VirtualRouter.class, getId());\n+        if (router != null && router.getRole() == Role.INTERNAL_LB_VM) {\n+            return router.getAccountId();\n+        } else {\n+            throw new InvalidParameterValueException(\"Unable to find internal lb vm by id\");\n+        } \n+    }\n+\n+    @Override\n+    public String getEventType() {\n+        return EventTypes.EVENT_INTERNAL_LB_VM_START;\n+    }\n+\n+    @Override\n+    public String getEventDescription() {\n+        return  \"starting internal lb vm: \" + getId();\n+    }\n+\n+    public AsyncJob.Type getInstanceType() {\n+        return AsyncJob.Type.InternalLbVm;\n+    }\n+\n+    public Long getInstanceId() {\n+        return getId();\n+    }\n+\n+    @Override\n+    public void execute() throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException{\n+        UserContext.current().setEventDetails(\"Internal Lb Vm Id: \"+getId());\n+        VirtualRouter result = null;\n+        VirtualRouter router = _routerService.findRouter(getId());\n+        if (router == null || router.getRole() != Role.INTERNAL_LB_VM) {\n+            throw new InvalidParameterValueException(\"Can't find internal lb vm by id\");\n+        } else {\n+            result = _internalLbSvc.startInternalLbVm(getId(), UserContext.current().getCaller(), UserContext.current().getCallerUserId());\n+        }\n+        \n+        if (result != null){\n+            DomainRouterResponse routerResponse = _responseGenerator.createDomainRouterResponse(result);\n+            routerResponse.setResponseName(getCommandName());\n+            this.setResponseObject(routerResponse);\n+        } else {\n+            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to start internal lb vm\");\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/command/admin/internallb/StartInternalLBVMCmd.java",
                "sha": "31d132b5c9c69dfb733e039306afc84f9ec6dd41",
                "status": "added"
            },
            {
                "additions": 123,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/command/admin/internallb/StopInternalLBVMCmd.java",
                "changes": 123,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/command/admin/internallb/StopInternalLBVMCmd.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/api/command/admin/internallb/StopInternalLBVMCmd.java",
                "patch": "@@ -0,0 +1,123 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.api.command.admin.internallb;\n+\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.ApiErrorCode;\n+import org.apache.cloudstack.api.BaseAsyncCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.ServerApiException;\n+import org.apache.cloudstack.api.response.DomainRouterResponse;\n+import org.apache.log4j.Logger;\n+\n+import com.cloud.async.AsyncJob;\n+import com.cloud.event.EventTypes;\n+import com.cloud.exception.ConcurrentOperationException;\n+import com.cloud.exception.InvalidParameterValueException;\n+import com.cloud.exception.ResourceUnavailableException;\n+import com.cloud.network.router.VirtualRouter;\n+import com.cloud.network.router.VirtualRouter.Role;\n+import com.cloud.user.UserContext;\n+\n+@APICommand(name = \"stopInternalLoadBalancerVM\", description = \"Stops an Internal LB vm.\", responseObject = DomainRouterResponse.class)\n+public class StopInternalLBVMCmd extends BaseAsyncCmd {\n+    public static final Logger s_logger = Logger.getLogger(StopInternalLBVMCmd.class.getName());\n+    private static final String s_name = \"stopinternallbvmresponse\";\n+\n+    // ///////////////////////////////////////////////////\n+    // ////////////// API parameters /////////////////////\n+    // ///////////////////////////////////////////////////\n+\n+    @Parameter(name = ApiConstants.ID, type = CommandType.UUID, entityType = DomainRouterResponse.class,\n+            required = true, description = \"the ID of the internal lb vm\")\n+    private Long id;\n+\n+    @Parameter(name = ApiConstants.FORCED, type = CommandType.BOOLEAN, required = false, description = \"Force stop the VM. The caller knows the VM is stopped.\")\n+    private Boolean forced;\n+\n+    // ///////////////////////////////////////////////////\n+    // ///////////////// Accessors ///////////////////////\n+    // ///////////////////////////////////////////////////\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    // ///////////////////////////////////////////////////\n+    // ///////////// API Implementation///////////////////\n+    // ///////////////////////////////////////////////////\n+\n+    @Override\n+    public String getCommandName() {\n+        return s_name;\n+    }\n+\n+    @Override\n+    public long getEntityOwnerId() {\n+        VirtualRouter vm = _entityMgr.findById(VirtualRouter.class, getId());\n+        if (vm != null && vm.getRole() == Role.INTERNAL_LB_VM) {\n+            return vm.getAccountId();\n+        } else {\n+            throw new InvalidParameterValueException(\"Unable to find internal lb vm by id\");\n+        }\n+    }\n+\n+    @Override\n+    public String getEventType() {\n+        return EventTypes.EVENT_INTERNAL_LB_VM_STOP;\n+    }\n+\n+    @Override\n+    public String getEventDescription() {\n+        return \"stopping internal lb vm: \" + getId();\n+    }\n+\n+    @Override\n+    public AsyncJob.Type getInstanceType() {\n+        return AsyncJob.Type.InternalLbVm;\n+    }\n+\n+    @Override\n+    public Long getInstanceId() {\n+        return getId();\n+    }\n+\n+    public boolean isForced() {\n+        return (forced != null) ? forced : false;\n+    }\n+\n+    @Override\n+    public void execute() throws ConcurrentOperationException, ResourceUnavailableException {\n+        UserContext.current().setEventDetails(\"Internal lb vm Id: \"+getId());\n+        VirtualRouter result = null;\n+        VirtualRouter vm = _routerService.findRouter(getId());\n+        if (vm == null || vm.getRole() != Role.INTERNAL_LB_VM) {\n+            throw new InvalidParameterValueException(\"Can't find internal lb vm by id\");\n+        } else {\n+            result = _internalLbSvc.stopInternalLbVm(getId(), isForced(), UserContext.current().getCaller(), UserContext.current().getCallerUserId());\n+        } \n+        \n+        if (result != null) {\n+            DomainRouterResponse response = _responseGenerator.createDomainRouterResponse(result);\n+            response.setResponseName(getCommandName());\n+            this.setResponseObject(response);\n+        } else {\n+            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to stop internal lb vm\");\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/command/admin/internallb/StopInternalLBVMCmd.java",
                "sha": "f40db49b41794674addadab60fb3ade2096755f6",
                "status": "added"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/command/admin/network/CreateNetworkOfferingCmd.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/command/admin/network/CreateNetworkOfferingCmd.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 1,
                "filename": "api/src/org/apache/cloudstack/api/command/admin/network/CreateNetworkOfferingCmd.java",
                "patch": "@@ -31,7 +31,6 @@\n import org.apache.cloudstack.api.ServerApiException;\n import org.apache.cloudstack.api.response.NetworkOfferingResponse;\n import org.apache.cloudstack.api.response.ServiceOfferingResponse;\n-\n import org.apache.log4j.Logger;\n \n import com.cloud.exception.InvalidParameterValueException;\n@@ -95,6 +94,10 @@\n \n     @Parameter(name=ApiConstants.IS_PERSISTENT, type=CommandType.BOOLEAN, description=\"true if network offering supports persistent networks; defaulted to false if not specified\")\n     private Boolean isPersistent;\n+    \n+    @Parameter(name=ApiConstants.DETAILS, type=CommandType.MAP, since=\"4.2.0\", description=\"Template details in key/value pairs.\" +\n+    \t\t\" Supported keys are internallbprovider/publiclbprovider with service provider as a value\")\n+    protected Map details;\n \n     /////////////////////////////////////////////////////\n     /////////////////// Accessors ///////////////////////\n@@ -215,6 +218,16 @@ public Boolean getIsPersistent() {\n \n         return capabilityMap;\n     }\n+    \n+    public Map<String, String> getDetails() {\n+        if (details == null || details.isEmpty()) {\n+            return null;\n+        }\n+\n+        Collection paramsCollection = details.values();\n+        Map<String, String> params = (Map<String, String>) (paramsCollection.toArray())[0];\n+        return params;\n+    }\n \n     /////////////////////////////////////////////////////\n     /////////////// API Implementation///////////////////",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/command/admin/network/CreateNetworkOfferingCmd.java",
                "sha": "6410715727cbf2206a8daab70fceb6c97155e23f",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/command/admin/router/CreateVirtualRouterElementCmd.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/command/admin/router/CreateVirtualRouterElementCmd.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 3,
                "filename": "api/src/org/apache/cloudstack/api/command/admin/router/CreateVirtualRouterElementCmd.java",
                "patch": "@@ -31,6 +31,7 @@\n import org.apache.log4j.Logger;\n \n import com.cloud.event.EventTypes;\n+import com.cloud.exception.InvalidParameterValueException;\n import com.cloud.exception.ResourceAllocationException;\n import com.cloud.network.VirtualRouterProvider;\n import com.cloud.network.VirtualRouterProvider.VirtualRouterProviderType;\n@@ -52,6 +53,9 @@\n \n     @Parameter(name=ApiConstants.NETWORK_SERVICE_PROVIDER_ID, type=CommandType.UUID, entityType = ProviderResponse.class, required=true, description=\"the network service provider ID of the virtual router element\")\n     private Long nspId;\n+    \n+    @Parameter(name=ApiConstants.PROVIDER_TYPE, type=CommandType.UUID, entityType = ProviderResponse.class, description=\"The provider type. Supported types are VirtualRouter (default) and VPCVirtualRouter\")\n+    private String providerType;\n \n     /////////////////////////////////////////////////////\n     /////////////////// Accessors ///////////////////////\n@@ -61,16 +65,27 @@ public void setNspId(Long nspId) {\n         this.nspId = nspId;\n     }\n \n-\n-\n     public Long getNspId() {\n         return nspId;\n     }\n+    \n+    public VirtualRouterProviderType getProviderType() {\n+        if (providerType != null) {\n+            if (providerType.equalsIgnoreCase(VirtualRouterProviderType.VirtualRouter.toString())) {\n+                return VirtualRouterProviderType.VirtualRouter;\n+            } else if (providerType.equalsIgnoreCase(VirtualRouterProviderType.VPCVirtualRouter.toString())) {\n+                return VirtualRouterProviderType.VPCVirtualRouter;\n+            } else throw new InvalidParameterValueException(\"Invalid providerType specified\");\n+        } \n+        return VirtualRouterProviderType.VirtualRouter;\n+    }\n \n     /////////////////////////////////////////////////////\n     /////////////// API Implementation///////////////////\n     /////////////////////////////////////////////////////\n \n+\n+\n     @Override\n     public String getCommandName() {\n         return s_name;\n@@ -96,7 +111,7 @@ public void execute(){\n \n     @Override\n     public void create() throws ResourceAllocationException {\n-        VirtualRouterProvider result = _service.get(0).addElement(getNspId(), VirtualRouterProviderType.VirtualRouter);\n+        VirtualRouterProvider result = _service.get(0).addElement(getNspId(), getProviderType());\n         if (result != null) {\n             setEntityId(result.getId());\n             setEntityUuid(result.getUuid());",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/command/admin/router/CreateVirtualRouterElementCmd.java",
                "sha": "b3fca5addf1a4c54f2104620f09bf119f4387213",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/command/admin/router/ListRoutersCmd.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/command/admin/router/ListRoutersCmd.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 1,
                "filename": "api/src/org/apache/cloudstack/api/command/admin/router/ListRoutersCmd.java",
                "patch": "@@ -31,6 +31,7 @@\n import org.apache.log4j.Logger;\n \n import com.cloud.async.AsyncJob;\n+import com.cloud.network.router.VirtualRouter.Role;\n \n @APICommand(name = \"listRouters\", description=\"List routers.\", responseObject=DomainRouterResponse.class)\n public class ListRoutersCmd extends BaseListProjectAndAccountResourcesCmd {\n@@ -77,7 +78,7 @@\n \n     @Parameter(name=ApiConstants.FOR_VPC, type=CommandType.BOOLEAN, description=\"if true is passed for this parameter, list only VPC routers\")\n     private Boolean forVpc;\n-\n+    \n     /////////////////////////////////////////////////////\n     /////////////////// Accessors ///////////////////////\n     /////////////////////////////////////////////////////\n@@ -121,6 +122,10 @@ public Long getVpcId() {\n     public Boolean getForVpc() {\n         return forVpc;\n     }\n+    \n+    public String getRole() {\n+        return Role.VIRTUAL_ROUTER.toString();\n+    }\n \n     /////////////////////////////////////////////////////\n     /////////////// API Implementation///////////////////",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/command/admin/router/ListRoutersCmd.java",
                "sha": "78c3554ae730cb6ec54826636bc77702d737dc09",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/command/admin/router/StartRouterCmd.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/command/admin/router/StartRouterCmd.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 1,
                "filename": "api/src/org/apache/cloudstack/api/command/admin/router/StartRouterCmd.java",
                "patch": "@@ -29,8 +29,10 @@\n import com.cloud.event.EventTypes;\n import com.cloud.exception.ConcurrentOperationException;\n import com.cloud.exception.InsufficientCapacityException;\n+import com.cloud.exception.InvalidParameterValueException;\n import com.cloud.exception.ResourceUnavailableException;\n import com.cloud.network.router.VirtualRouter;\n+import com.cloud.network.router.VirtualRouter.Role;\n import com.cloud.user.Account;\n import com.cloud.user.UserContext;\n \n@@ -100,7 +102,13 @@ public Long getInstanceId() {\n     @Override\n     public void execute() throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException{\n         UserContext.current().setEventDetails(\"Router Id: \"+getId());\n-        VirtualRouter result = _routerService.startRouter(id);\n+        VirtualRouter result = null;\n+        VirtualRouter router = _routerService.findRouter(getId());\n+        if (router == null || router.getRole() != Role.VIRTUAL_ROUTER) {\n+            throw new InvalidParameterValueException(\"Can't find router by id\");\n+        } else {\n+            result = _routerService.startRouter(getId());\n+        }\n         if (result != null){\n             DomainRouterResponse routerResponse = _responseGenerator.createDomainRouterResponse(result);\n             routerResponse.setResponseName(getCommandName());",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/command/admin/router/StartRouterCmd.java",
                "sha": "ad0461e0eb70c6ceae46d74b8a988ff83a3d4a35",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/command/admin/router/StopRouterCmd.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/command/admin/router/StopRouterCmd.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 1,
                "filename": "api/src/org/apache/cloudstack/api/command/admin/router/StopRouterCmd.java",
                "patch": "@@ -28,8 +28,10 @@\n import com.cloud.async.AsyncJob;\n import com.cloud.event.EventTypes;\n import com.cloud.exception.ConcurrentOperationException;\n+import com.cloud.exception.InvalidParameterValueException;\n import com.cloud.exception.ResourceUnavailableException;\n import com.cloud.network.router.VirtualRouter;\n+import com.cloud.network.router.VirtualRouter.Role;\n import com.cloud.user.Account;\n import com.cloud.user.UserContext;\n \n@@ -103,7 +105,14 @@ public boolean isForced() {\n     @Override\n     public void execute() throws ConcurrentOperationException, ResourceUnavailableException {\n         UserContext.current().setEventDetails(\"Router Id: \"+getId());\n-        VirtualRouter result = _routerService.stopRouter(getId(), isForced());\n+        VirtualRouter result = null;\n+        VirtualRouter router = _routerService.findRouter(getId());\n+        if (router == null || router.getRole() != Role.VIRTUAL_ROUTER) {\n+            throw new InvalidParameterValueException(\"Can't find router by id\");\n+        } else {\n+            result = _routerService.stopRouter(getId(), isForced());\n+        }\n+        \n         if (result != null) {\n             DomainRouterResponse response = _responseGenerator.createDomainRouterResponse(result);\n             response.setResponseName(getCommandName());",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/command/admin/router/StopRouterCmd.java",
                "sha": "94473cf9ffcc26eb25c6356ec2667cfd8a2c9275",
                "status": "modified"
            },
            {
                "additions": 218,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/command/user/loadbalancer/CreateApplicationLoadBalancerCmd.java",
                "changes": 218,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/command/user/loadbalancer/CreateApplicationLoadBalancerCmd.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/api/command/user/loadbalancer/CreateApplicationLoadBalancerCmd.java",
                "patch": "@@ -0,0 +1,218 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.api.command.user.loadbalancer;\n+\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.ApiErrorCode;\n+import org.apache.cloudstack.api.BaseAsyncCreateCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.ServerApiException;\n+import org.apache.cloudstack.api.response.ApplicationLoadBalancerResponse;\n+import org.apache.cloudstack.api.response.NetworkResponse;\n+import org.apache.cloudstack.network.lb.ApplicationLoadBalancerRule;\n+import org.apache.log4j.Logger;\n+\n+import com.cloud.async.AsyncJob;\n+import com.cloud.event.EventTypes;\n+import com.cloud.exception.InsufficientAddressCapacityException;\n+import com.cloud.exception.InsufficientVirtualNetworkCapcityException;\n+import com.cloud.exception.InvalidParameterValueException;\n+import com.cloud.exception.NetworkRuleConflictException;\n+import com.cloud.exception.ResourceAllocationException;\n+import com.cloud.exception.ResourceUnavailableException;\n+import com.cloud.network.Network;\n+import com.cloud.network.rules.LoadBalancerContainer.Scheme;\n+import com.cloud.user.UserContext;\n+import com.cloud.utils.net.NetUtils;\n+\n+@APICommand(name = \"createLoadBalancer\", description=\"Creates a Load Balancer\", responseObject=ApplicationLoadBalancerResponse.class, since=\"4.2.0\")\n+public class CreateApplicationLoadBalancerCmd extends BaseAsyncCreateCmd {\n+    public static final Logger s_logger = Logger.getLogger(CreateApplicationLoadBalancerCmd.class.getName());\n+\n+    private static final String s_name = \"createloadbalancerresponse\";\n+\n+    /////////////////////////////////////////////////////\n+    //////////////// API parameters /////////////////////\n+    /////////////////////////////////////////////////////\n+    @Parameter(name=ApiConstants.NAME, type=CommandType.STRING, required=true, description=\"name of the Load Balancer\")\n+    private String loadBalancerName;\n+    \n+    @Parameter(name=ApiConstants.DESCRIPTION, type=CommandType.STRING, description=\"the description of the Load Balancer\", length=4096)\n+    private String description;\n+    \n+    @Parameter(name=ApiConstants.NETWORK_ID, type=CommandType.UUID, required=true, entityType = NetworkResponse.class,\n+            description=\"The guest network the Load Balancer will be created for\")\n+    private Long networkId;\n+    \n+    @Parameter(name=ApiConstants.SOURCE_PORT, type=CommandType.INTEGER, required=true, description=\"the source port the network traffic will be load balanced from\")\n+    private Integer sourcePort;\n+\n+    @Parameter(name=ApiConstants.ALGORITHM, type=CommandType.STRING, required=true, description=\"load balancer algorithm (source, roundrobin, leastconn)\")\n+    private String algorithm;\n+\n+    @Parameter(name=ApiConstants.INSTANCE_PORT, type=CommandType.INTEGER, required=true, description=\"the TCP port of the virtual machine where the network traffic will be load balanced to\")\n+    private Integer instancePort;\n+\n+    @Parameter(name=ApiConstants.SOURCE_IP, type=CommandType.STRING, description=\"the source ip address the network traffic will be load balanced from\")\n+    private String sourceIp;\n+    \n+    @Parameter(name=ApiConstants.SOURCE_IP_NETWORK_ID, type=CommandType.UUID, entityType = NetworkResponse.class, required=true,\n+            description=\"the network id of the source ip address\")\n+    private Long sourceIpNetworkId;\n+    \n+    @Parameter(name=ApiConstants.SCHEME, type=CommandType.STRING, required=true, description=\"the load balancer scheme. Supported value in this release is Internal\")\n+    private String scheme;\n+\n+\n+\n+    /////////////////////////////////////////////////////\n+    /////////////////// Accessors ///////////////////////\n+    /////////////////////////////////////////////////////\n+\n+    public String getAlgorithm() {\n+        return algorithm;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public String getLoadBalancerName() {\n+        return loadBalancerName;\n+    }\n+\n+    public Integer getPrivatePort() {\n+        return instancePort;\n+    }\n+\n+    public long getNetworkId() {\n+        return networkId;\n+    }\n+\n+    public String getName() {\n+        return loadBalancerName;\n+    }\n+    \n+    public Integer getSourcePort() {\n+        return sourcePort.intValue();\n+    }\n+\n+    public String getProtocol() {\n+        return NetUtils.TCP_PROTO;\n+    }\n+\n+    public long getAccountId() {\n+        //get account info from the network object\n+        Network ntwk = _networkService.getNetwork(networkId);\n+        if (ntwk == null) {\n+            throw new InvalidParameterValueException(\"Invalid network id specified\");\n+        }\n+       \n+        return ntwk.getAccountId();\n+        \n+    }\n+\n+    public int getInstancePort() {\n+        return instancePort.intValue();\n+    }\n+\n+    @Override\n+    public String getEventType() {\n+        return EventTypes.EVENT_LOAD_BALANCER_CREATE;\n+    }\n+\n+    @Override\n+    public String getEventDescription() {\n+        return \"creating load balancer: \" + getName() + \" account: \" + getAccountId();\n+\n+    }\n+\n+    @Override\n+    public AsyncJob.Type getInstanceType() {\n+        return AsyncJob.Type.LoadBalancerRule;\n+    }\n+    \n+    public String getSourceIp() {\n+        return sourceIp;\n+    }\n+\n+    public long getSourceIpNetworkId() {\n+        return sourceIpNetworkId;\n+    }\n+\n+    public Scheme getScheme() {\n+        if (scheme.equalsIgnoreCase(Scheme.Internal.toString())) {\n+            return Scheme.Internal;\n+        } else {\n+            throw new InvalidParameterValueException(\"Invalid value for scheme. Supported value is Internal\");\n+        }\n+    }\n+    \n+    @Override\n+    public long getEntityOwnerId() {\n+       return getAccountId();\n+    }\n+\n+    /////////////////////////////////////////////////////\n+    /////////////// API Implementation///////////////////\n+    /////////////////////////////////////////////////////\n+    @Override\n+    public String getCommandName() {\n+        return s_name;\n+    }\n+\n+    @Override\n+    public void execute() throws ResourceAllocationException, ResourceUnavailableException {\n+        ApplicationLoadBalancerRule rule = null;\n+        try {\n+            UserContext.current().setEventDetails(\"Load Balancer Id: \" + getEntityId());\n+            // State might be different after the rule is applied, so get new object here\n+            rule = _entityMgr.findById(ApplicationLoadBalancerRule.class, getEntityId());\n+            ApplicationLoadBalancerResponse lbResponse = _responseGenerator.createLoadBalancerContainerReponse(rule, _lbService.getLbInstances(getEntityId()));\n+            setResponseObject(lbResponse);\n+            lbResponse.setResponseName(getCommandName());\n+        } catch (Exception ex) {\n+            s_logger.warn(\"Failed to create Load Balancer due to exception \", ex);\n+        } finally {\n+            if (rule == null) {\n+                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to create Load Balancer\");\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void create() {\n+        try {\n+            \n+            ApplicationLoadBalancerRule result = _appLbService.createApplicationLoadBalancer(getName(), getDescription(), getScheme(),\n+                    getSourceIpNetworkId(), getSourceIp(), getSourcePort(), getInstancePort(), getAlgorithm(), getNetworkId(), getEntityOwnerId());\n+            this.setEntityId(result.getId());\n+            this.setEntityUuid(result.getUuid());\n+        }catch (NetworkRuleConflictException e) {\n+            s_logger.warn(\"Exception: \", e);\n+            throw new ServerApiException(ApiErrorCode.NETWORK_RULE_CONFLICT_ERROR, e.getMessage());\n+        } catch (InsufficientAddressCapacityException e) {\n+            s_logger.warn(\"Exception: \", e);\n+            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, e.getMessage());\n+        } catch (InsufficientVirtualNetworkCapcityException e) {\n+            s_logger.warn(\"Exception: \", e);\n+            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, e.getMessage());\n+        }\n+    }\n+}\n+",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/command/user/loadbalancer/CreateApplicationLoadBalancerCmd.java",
                "sha": "17ae959aa6e900efead376d2acda774f62226afb",
                "status": "added"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/command/user/loadbalancer/CreateLoadBalancerRuleCmd.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/command/user/loadbalancer/CreateLoadBalancerRuleCmd.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 2,
                "filename": "api/src/org/apache/cloudstack/api/command/user/loadbalancer/CreateLoadBalancerRuleCmd.java",
                "patch": "@@ -148,7 +148,7 @@ private Long getVpcId() {\n     }\n \n \n-    public Long getNetworkId() {\n+    public long getNetworkId() {\n         if (networkId != null) {\n             return networkId;\n         }\n@@ -278,7 +278,9 @@ public void create() {\n             throw new InvalidParameterValueException(\"Parameter cidrList is deprecated; if you need to open firewall rule for the specific cidr, please refer to createFirewallRule command\");\n         }\n         try {\n-            LoadBalancer result = _lbService.createLoadBalancerRule(this, getOpenFirewall());\n+            LoadBalancer result = _lbService.createPublicLoadBalancerRule(getXid(), getName(), getDescription(), \n+                    getSourcePortStart(), getSourcePortEnd(), getDefaultPortStart(), getDefaultPortEnd(), getSourceIpAddressId(), getProtocol(), getAlgorithm(),\n+                    getNetworkId(), getEntityOwnerId(), getOpenFirewall());\n             this.setEntityId(result.getId());\n             this.setEntityUuid(result.getUuid());\n         } catch (NetworkRuleConflictException e) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/command/user/loadbalancer/CreateLoadBalancerRuleCmd.java",
                "sha": "f6cc1f130bd3029b03f981571f7452550ddfebc9",
                "status": "modified"
            },
            {
                "additions": 116,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/command/user/loadbalancer/DeleteApplicationLoadBalancerCmd.java",
                "changes": 116,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/command/user/loadbalancer/DeleteApplicationLoadBalancerCmd.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/api/command/user/loadbalancer/DeleteApplicationLoadBalancerCmd.java",
                "patch": "@@ -0,0 +1,116 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.api.command.user.loadbalancer;\n+\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.ApiErrorCode;\n+import org.apache.cloudstack.api.BaseAsyncCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.ServerApiException;\n+import org.apache.cloudstack.api.response.FirewallRuleResponse;\n+import org.apache.cloudstack.api.response.SuccessResponse;\n+import org.apache.cloudstack.network.lb.ApplicationLoadBalancerRule;\n+import org.apache.log4j.Logger;\n+\n+import com.cloud.async.AsyncJob;\n+import com.cloud.event.EventTypes;\n+import com.cloud.exception.InvalidParameterValueException;\n+import com.cloud.user.UserContext;\n+\n+@APICommand(name = \"deleteLoadBalancer\", description=\"Deletes a load balancer\", responseObject=SuccessResponse.class, since=\"4.2.0\")\n+public class DeleteApplicationLoadBalancerCmd extends BaseAsyncCmd {\n+    public static final Logger s_logger = Logger.getLogger(DeleteApplicationLoadBalancerCmd.class.getName());\n+    private static final String s_name = \"deleteloadbalancerresponse\";\n+    /////////////////////////////////////////////////////\n+    //////////////// API parameters /////////////////////\n+    /////////////////////////////////////////////////////\n+\n+    @Parameter(name=ApiConstants.ID, type=CommandType.UUID, entityType = FirewallRuleResponse.class,\n+            required=true, description=\"the ID of the Load Balancer\")\n+    private Long id;\n+\n+\n+    /////////////////////////////////////////////////////\n+    /////////////////// Accessors ///////////////////////\n+    /////////////////////////////////////////////////////\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    /////////////////////////////////////////////////////\n+    /////////////// API Implementation///////////////////\n+    /////////////////////////////////////////////////////\n+\n+    @Override\n+    public String getCommandName() {\n+        return s_name;\n+    }\n+\n+    @Override\n+    public long getEntityOwnerId() {\n+        ApplicationLoadBalancerRule lb = _entityMgr.findById(ApplicationLoadBalancerRule.class, getId());\n+        if (lb != null) {\n+            return lb.getAccountId();\n+        } else {\n+            throw new InvalidParameterValueException(\"Can't find load balancer by id specified\");\n+        }\n+    }\n+\n+    @Override\n+    public String getEventType() {\n+        return EventTypes.EVENT_LOAD_BALANCER_DELETE;\n+    }\n+\n+    @Override\n+    public String getEventDescription() {\n+        return  \"deleting load balancer: \" + getId();\n+    }\n+\n+    @Override\n+    public void execute(){\n+        UserContext.current().setEventDetails(\"Load balancer Id: \" + getId());\n+        boolean result = _appLbService.deleteApplicationLoadBalancer(getId());\n+\n+        if (result) {\n+            SuccessResponse response = new SuccessResponse(getCommandName());\n+            this.setResponseObject(response);\n+        } else {\n+            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to delete load balancer\");\n+        }\n+    }\n+\n+    @Override\n+    public String getSyncObjType() {\n+        return BaseAsyncCmd.networkSyncObject;\n+    }\n+\n+    @Override\n+    public Long getSyncObjId() {\n+        ApplicationLoadBalancerRule lb = _appLbService.getApplicationLoadBalancer(id);\n+        if(lb == null){\n+            throw new InvalidParameterValueException(\"Unable to find load balancer by id \");\n+        }\n+        return lb.getNetworkId();\n+    }\n+\n+    @Override\n+    public AsyncJob.Type getInstanceType() {\n+        return AsyncJob.Type.FirewallRule;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/command/user/loadbalancer/DeleteApplicationLoadBalancerCmd.java",
                "sha": "bc6cd09526cdc7b63858035a6e79f53a87cb295a",
                "status": "added"
            },
            {
                "additions": 131,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/command/user/loadbalancer/ListApplicationLoadBalancersCmd.java",
                "changes": 131,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/command/user/loadbalancer/ListApplicationLoadBalancersCmd.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/api/command/user/loadbalancer/ListApplicationLoadBalancersCmd.java",
                "patch": "@@ -0,0 +1,131 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.api.command.user.loadbalancer;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.BaseListTaggedResourcesCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.response.ApplicationLoadBalancerResponse;\n+import org.apache.cloudstack.api.response.FirewallRuleResponse;\n+import org.apache.cloudstack.api.response.ListResponse;\n+import org.apache.cloudstack.api.response.NetworkResponse;\n+import org.apache.cloudstack.network.lb.ApplicationLoadBalancerRule;\n+import org.apache.log4j.Logger;\n+\n+import com.cloud.exception.InvalidParameterValueException;\n+import com.cloud.network.rules.LoadBalancerContainer.Scheme;\n+import com.cloud.utils.Pair;\n+\n+@APICommand(name = \"listLoadBalancers\", description = \"Lists Load Balancers\", responseObject = ApplicationLoadBalancerResponse.class, since=\"4.2.0\")\n+public class ListApplicationLoadBalancersCmd extends BaseListTaggedResourcesCmd {\n+    public static final Logger s_logger = Logger.getLogger(ListApplicationLoadBalancersCmd.class.getName());\n+\n+    private static final String s_name = \"listloadbalancerssresponse\";\n+\n+    // ///////////////////////////////////////////////////\n+    // ////////////// API parameters /////////////////////\n+    // ///////////////////////////////////////////////////\n+\n+    @Parameter(name = ApiConstants.ID, type = CommandType.UUID, entityType = FirewallRuleResponse.class,\n+            description = \"the ID of the Load Balancer\")\n+    private Long id;\n+\n+    @Parameter(name = ApiConstants.NAME, type = CommandType.STRING, description = \"the name of the Load Balancer\")\n+    private String loadBalancerName;\n+    \n+    @Parameter(name = ApiConstants.SOURCE_IP, type = CommandType.STRING, description = \"the source ip address of the Load Balancer\")\n+    private String sourceIp;\n+\n+    @Parameter(name=ApiConstants.SOURCE_IP_NETWORK_ID, type=CommandType.UUID, entityType = NetworkResponse.class, \n+            description=\"the network id of the source ip address\")\n+    private Long sourceIpNetworkId;\n+    \n+    @Parameter(name = ApiConstants.SCHEME, type = CommandType.STRING, description = \"the scheme of the Load Balancer. Supported value is Internal in the current release\")\n+    private String scheme;\n+    \n+    @Parameter(name=ApiConstants.NETWORK_ID, type=CommandType.UUID, entityType = NetworkResponse.class, \n+            description=\"the network id of the Load Balancer\")\n+    private Long networkId;\n+\n+\n+    // ///////////////////////////////////////////////////\n+    // ///////////////// Accessors ///////////////////////\n+    // ///////////////////////////////////////////////////\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public String getLoadBalancerRuleName() {\n+        return loadBalancerName;\n+    }\n+\n+    public String getLoadBalancerName() {\n+        return loadBalancerName;\n+    }\n+\n+    public String getSourceIp() {\n+        return sourceIp;\n+    }\n+\n+    public Long getSourceIpNetworkId() {\n+        return sourceIpNetworkId;\n+    }\n+\n+    @Override\n+    public String getCommandName() {\n+        return s_name;\n+    }\n+    \n+    public Scheme getScheme() {\n+        if (scheme != null) {\n+            if (scheme.equalsIgnoreCase(Scheme.Internal.toString())) {\n+                return Scheme.Internal;\n+            } else {\n+                throw new InvalidParameterValueException(\"Invalid value for scheme. Supported value is Internal\");\n+            }\n+        }\n+        return null;\n+    }\n+    \n+    public Long getNetworkId() {\n+        return networkId;\n+    }\n+    // ///////////////////////////////////////////////////\n+    // ///////////// API Implementation///////////////////\n+    // ///////////////////////////////////////////////////\n+\n+    @Override\n+    public void execute() {\n+        Pair<List<? extends ApplicationLoadBalancerRule>, Integer> loadBalancers = _appLbService.listApplicationLoadBalancers(this);\n+        ListResponse<ApplicationLoadBalancerResponse> response = new ListResponse<ApplicationLoadBalancerResponse>();\n+        List<ApplicationLoadBalancerResponse> lbResponses = new ArrayList<ApplicationLoadBalancerResponse>();\n+        for (ApplicationLoadBalancerRule loadBalancer : loadBalancers.first()) {\n+            ApplicationLoadBalancerResponse lbResponse = _responseGenerator.createLoadBalancerContainerReponse(loadBalancer, _lbService.getLbInstances(loadBalancer.getId()));\n+            lbResponse.setObjectName(\"loadbalancer\");\n+            lbResponses.add(lbResponse);\n+        }\n+        response.setResponses(lbResponses, loadBalancers.second());\n+        response.setResponseName(getCommandName());\n+        this.setResponseObject(response);\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/command/user/loadbalancer/ListApplicationLoadBalancersCmd.java",
                "sha": "8e5df31ed29cba27d79f164a73008faefc6ab5a4",
                "status": "added"
            },
            {
                "additions": 63,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/response/ApplicationLoadBalancerInstanceResponse.java",
                "changes": 63,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/response/ApplicationLoadBalancerInstanceResponse.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/api/response/ApplicationLoadBalancerInstanceResponse.java",
                "patch": "@@ -0,0 +1,63 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.api.response;\n+\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.BaseResponse;\n+\n+import com.cloud.serializer.Param;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * \n+ * Load Balancer instance is the User Vm instance participating in the Load Balancer\n+ *\n+ */\n+\n+@SuppressWarnings(\"unused\")\n+public class ApplicationLoadBalancerInstanceResponse extends BaseResponse{\n+    \n+    @SerializedName(ApiConstants.ID) @Param(description = \"the instance ID\")\n+    private String id;\n+    \n+    @SerializedName(ApiConstants.NAME) @Param(description = \"the name of the instance\")\n+    private String name;\n+    \n+    @SerializedName(ApiConstants.STATE) @Param(description=\"the state of the instance\")\n+    private String state;\n+    \n+    @SerializedName(ApiConstants.IP_ADDRESS)\n+    @Param(description=\"the ip address of the instance\")\n+    private String ipAddress;\n+    \n+\n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public void setState(String state) {\n+        this.state = state;\n+    }\n+\n+    public void setIpAddress(String ipAddress) {\n+        this.ipAddress = ipAddress;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/response/ApplicationLoadBalancerInstanceResponse.java",
                "sha": "2d6614d217b05ad36848e749fdd61812987e626a",
                "status": "added"
            },
            {
                "additions": 142,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/response/ApplicationLoadBalancerResponse.java",
                "changes": 142,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/response/ApplicationLoadBalancerResponse.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/api/response/ApplicationLoadBalancerResponse.java",
                "patch": "@@ -0,0 +1,142 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.api.response;\n+\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.BaseResponse;\n+\n+import com.cloud.serializer.Param;\n+import com.google.gson.annotations.SerializedName;\n+\n+@SuppressWarnings(\"unused\")\n+public class ApplicationLoadBalancerResponse extends BaseResponse implements ControlledEntityResponse{\n+    @SerializedName(ApiConstants.ID) @Param(description = \"the Load Balancer ID\")\n+    private String id;\n+\n+    @SerializedName(ApiConstants.NAME) @Param(description = \"the name of the Load Balancer\")\n+    private String name;\n+\n+    @SerializedName(ApiConstants.DESCRIPTION) @Param(description = \"the description of the Load Balancer\")\n+    private String description;\n+    \n+    @SerializedName(ApiConstants.ALGORITHM) @Param(description = \"the load balancer algorithm (source, roundrobin, leastconn)\")\n+    private String algorithm;\n+    \n+    @SerializedName(ApiConstants.NETWORK_ID) @Param(description=\"Load Balancer network id\")\n+    private String networkId;\n+    \n+    @SerializedName(ApiConstants.SOURCE_IP) @Param(description=\"Load Balancer source ip\")\n+    private String sourceIp;\n+    \n+    @SerializedName(ApiConstants.SOURCE_IP_NETWORK_ID) @Param(description=\"Load Balancer source ip network id\")\n+    private String sourceIpNetworkId;\n+    \n+    @SerializedName(ApiConstants.ACCOUNT)\n+    @Param(description = \"the account of the Load Balancer\")\n+    private String accountName;\n+\n+    @SerializedName(ApiConstants.PROJECT_ID) @Param(description=\"the project id of the Load Balancer\")\n+    private String projectId;\n+\n+    @SerializedName(ApiConstants.PROJECT) @Param(description=\"the project name of the Load Balancer\")\n+    private String projectName;\n+\n+    @SerializedName(ApiConstants.DOMAIN_ID)\n+    @Param(description = \"the domain ID of the Load Balancer\")\n+    private String domainId;\n+    \n+    @SerializedName(ApiConstants.DOMAIN)\n+    @Param(description = \"the domain of the Load Balancer\")\n+    private String domainName;\n+    \n+    @SerializedName(\"loadbalancerrule\")  @Param(description=\"the list of rules associated with the Load Balancer\", responseObject = ApplicationLoadBalancerRuleResponse.class)\n+    private List<ApplicationLoadBalancerRuleResponse> lbRules;\n+    \n+    @SerializedName(\"loadbalancerinstance\")  @Param(description=\"the list of instances associated with the Load Balancer\", responseObject = ApplicationLoadBalancerInstanceResponse.class)\n+    private List<ApplicationLoadBalancerInstanceResponse> lbInstances;\n+    \n+    @SerializedName(ApiConstants.TAGS)  @Param(description=\"the list of resource tags associated with the Load Balancer\", responseObject = ResourceTagResponse.class)\n+    private List<ResourceTagResponse> tags;\n+\n+    public void setAccountName(String accountName) {\n+        this.accountName = accountName;\n+    }\n+\n+    @Override\n+    public void setDomainId(String domainId) {\n+        this.domainId = domainId;\n+    }\n+\n+    public void setDomainName(String domainName) {\n+        this.domainName = domainName;\n+    }\n+    \n+    @Override\n+    public void setProjectId(String projectId) {\n+        this.projectId = projectId;\n+    }\n+\n+    @Override\n+    public void setProjectName(String projectName) {\n+        this.projectName = projectName;\n+    }\n+\n+    public void setTags(List<ResourceTagResponse> tags) {\n+        this.tags = tags;\n+    }\n+\n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n+    public void setAlgorithm(String algorithm) {\n+        this.algorithm = algorithm;\n+    }\n+\n+    public void setNetworkId(String networkId) {\n+        this.networkId = networkId;\n+    }\n+\n+    public void setSourceIp(String sourceIp) {\n+        this.sourceIp = sourceIp;\n+    }\n+\n+    public void setSourceIpNetworkId(String sourceIpNetworkId) {\n+        this.sourceIpNetworkId = sourceIpNetworkId;\n+    }\n+\n+    public void setLbRules(List<ApplicationLoadBalancerRuleResponse> lbRules) {\n+        this.lbRules = lbRules;\n+    }\n+\n+    public void setLbInstances(List<ApplicationLoadBalancerInstanceResponse> lbInstances) {\n+        this.lbInstances = lbInstances;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/response/ApplicationLoadBalancerResponse.java",
                "sha": "de9bce6c6580e9ec203b0df1bfd4ff9247d3f9ff",
                "status": "added"
            },
            {
                "additions": 51,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/response/ApplicationLoadBalancerRuleResponse.java",
                "changes": 51,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/response/ApplicationLoadBalancerRuleResponse.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/api/response/ApplicationLoadBalancerRuleResponse.java",
                "patch": "@@ -0,0 +1,51 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.api.response;\n+\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.BaseResponse;\n+\n+import com.cloud.serializer.Param;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Subobject of the load balancer container response\n+ */\n+@SuppressWarnings(\"unused\")\n+public class ApplicationLoadBalancerRuleResponse extends BaseResponse{\n+    @SerializedName(ApiConstants.SOURCE_PORT) @Param(description = \"source port of the load balancer rule\")\n+    private Integer sourcePort;\n+    \n+    @SerializedName(ApiConstants.INSTANCE_PORT) @Param(description = \"instance port of the load balancer rule\")\n+    private Integer instancePort;\n+    \n+    @SerializedName(ApiConstants.STATE) @Param(description = \"the state of the load balancer rule\")\n+    private String state;\n+\n+    public void setSourcePort(Integer sourcePort) {\n+        this.sourcePort = sourcePort;\n+    }\n+\n+    public void setInstancePort(Integer instancePort) {\n+        this.instancePort = instancePort;\n+    }\n+\n+    public void setState(String state) {\n+        this.state = state;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/response/ApplicationLoadBalancerRuleResponse.java",
                "sha": "ffc64d5ca462d03d6ce113e732bfb79830c49282",
                "status": "added"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/response/DomainRouterResponse.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/response/DomainRouterResponse.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 5,
                "filename": "api/src/org/apache/cloudstack/api/response/DomainRouterResponse.java",
                "patch": "@@ -153,8 +153,11 @@\n     @SerializedName(\"scriptsversion\") @Param(description=\"the version of scripts\")\n     private String scriptsVersion;\n \n-    @SerializedName(ApiConstants.VPC_ID) @Param(description=\"VPC the network belongs to\")\n+    @SerializedName(ApiConstants.VPC_ID) @Param(description=\"VPC the router belongs to\")\n     private String vpcId;\n+    \n+    @SerializedName(ApiConstants.ROLE) @Param(description=\"role of the domain router\")\n+    private String role;\n \n     @SerializedName(\"nic\")  @Param(description=\"the list of nics associated with the router\",\n             responseObject = NicResponse.class, since=\"4.0\")\n@@ -164,15 +167,11 @@ public DomainRouterResponse(){\n         nics = new LinkedHashSet<NicResponse>();\n     }\n \n-\n-\n     @Override\n     public String getObjectId() {\n         return this.getId();\n     }\n \n-\n-\n     public String getId() {\n         return id;\n     }\n@@ -372,4 +371,8 @@ public String getIp6Dns2() {\n \tpublic void setIp6Dns2(String ip6Dns2) {\n \t\tthis.ip6Dns2 = ip6Dns2;\n \t}\n+\t\n+\tpublic void setRole(String role) {\n+        this.role = role;\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/response/DomainRouterResponse.java",
                "sha": "852d98815a3aa8331306fa23243c36a90bebf133",
                "status": "modified"
            },
            {
                "additions": 51,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/response/InternalLoadBalancerElementResponse.java",
                "changes": 51,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/response/InternalLoadBalancerElementResponse.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/api/response/InternalLoadBalancerElementResponse.java",
                "patch": "@@ -0,0 +1,51 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.api.response;\n+\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.BaseResponse;\n+import org.apache.cloudstack.api.EntityReference;\n+\n+import com.cloud.network.VirtualRouterProvider;\n+import com.cloud.serializer.Param;\n+import com.google.gson.annotations.SerializedName;\n+\n+@EntityReference(value=VirtualRouterProvider.class)\n+@SuppressWarnings(\"unused\")\n+public class InternalLoadBalancerElementResponse extends BaseResponse {\n+    @SerializedName(ApiConstants.ID) @Param(description=\"the id of the internal load balancer element\")\n+    private String id;\n+\n+    @SerializedName(ApiConstants.NSP_ID) @Param(description=\"the physical network service provider id of the element\")\n+    private String nspId;\n+\n+    @SerializedName(ApiConstants.ENABLED) @Param(description=\"Enabled/Disabled the element\")\n+    private Boolean enabled;\n+\n+\n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+\n+    public void setNspId(String nspId) {\n+        this.nspId = nspId;\n+    }\n+\n+    public void setEnabled(Boolean enabled) {\n+        this.enabled = enabled;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/response/InternalLoadBalancerElementResponse.java",
                "sha": "b7e8634ee8fdd1c2410ff806cb9c7e7b72b6da33",
                "status": "added"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/response/NetworkOfferingResponse.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/response/NetworkOfferingResponse.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/api/response/NetworkOfferingResponse.java",
                "patch": "@@ -18,6 +18,7 @@\n \n import java.util.Date;\n import java.util.List;\n+import java.util.Map;\n \n import org.apache.cloudstack.api.ApiConstants;\n import org.apache.cloudstack.api.BaseResponse;\n@@ -83,6 +84,10 @@\n \n     @SerializedName(ApiConstants.IS_PERSISTENT) @Param(description=\"true if network offering supports persistent networks, false otherwise\")\n     private Boolean isPersistent;\n+    \n+    @SerializedName(ApiConstants.DETAILS) @Param(description=\"additional key/value details tied with network offering\", since=\"4.2.0\")\n+    private Map details;\n+\n \n     public void setId(String id) {\n         this.id = id;\n@@ -156,5 +161,9 @@ public void setForVpc(Boolean forVpc) {\n     public void setIsPersistent(Boolean isPersistent) {\n         this.isPersistent = isPersistent;\n     }\n+    \n+    public void setDetails(Map details) {\n+        this.details = details;\n+    }\n \n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/response/NetworkOfferingResponse.java",
                "sha": "7a7e371e180070fa3ae74cf9915addf08905b892",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/response/VirtualRouterProviderResponse.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/response/VirtualRouterProviderResponse.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/api/response/VirtualRouterProviderResponse.java",
                "patch": "@@ -25,6 +25,7 @@\n import com.google.gson.annotations.SerializedName;\n \n @EntityReference(value=VirtualRouterProvider.class)\n+@SuppressWarnings(\"unused\")\n public class VirtualRouterProviderResponse extends BaseResponse implements ControlledEntityResponse {\n     @SerializedName(ApiConstants.ID) @Param(description=\"the id of the router\")\n     private String id;",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/api/response/VirtualRouterProviderResponse.java",
                "sha": "de355bd0c25e0e63fb2969de87ae8094384f7298",
                "status": "modified"
            },
            {
                "additions": 56,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/network/element/InternalLoadBalancerElementService.java",
                "changes": 56,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/network/element/InternalLoadBalancerElementService.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/network/element/InternalLoadBalancerElementService.java",
                "patch": "@@ -0,0 +1,56 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.network.element;\n+\n+import java.util.List;\n+\n+\n+import com.cloud.network.VirtualRouterProvider;\n+import com.cloud.utils.component.PluggableService;\n+\n+public interface InternalLoadBalancerElementService extends PluggableService{\n+    /**\n+     * Configures existing Internal Load Balancer Element (enables or disables it)\n+     * @param id\n+     * @param enable\n+     * @return\n+     */\n+    VirtualRouterProvider configureInternalLoadBalancerElement(long id, boolean enable);\n+    \n+    /**\n+     * Adds Internal Load Balancer element to the Network Service Provider\n+     * @param ntwkSvcProviderId\n+     * @return\n+     */\n+    VirtualRouterProvider addInternalLoadBalancerElement(long ntwkSvcProviderId);\n+    \n+    /**\n+     * Retrieves existing Internal Load Balancer element\n+     * @param id\n+     * @return\n+     */\n+    VirtualRouterProvider getInternalLoadBalancerElement(long id);\n+    \n+    /**\n+     * Searches for existing Internal Load Balancer elements based on parameters passed to the call\n+     * @param id\n+     * @param ntwkSvsProviderId\n+     * @param enabled\n+     * @return\n+     */\n+    List<? extends VirtualRouterProvider> searchForInternalLoadBalancerElements(Long id, Long ntwkSvsProviderId, Boolean enabled);\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/network/element/InternalLoadBalancerElementService.java",
                "sha": "33a0c64058ee4ec408e38324808ecfeeb4ac7882",
                "status": "added"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/network/lb/ApplicationLoadBalancerContainer.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/network/lb/ApplicationLoadBalancerContainer.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/network/lb/ApplicationLoadBalancerContainer.java",
                "patch": "@@ -0,0 +1,28 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.network.lb;\n+\n+import com.cloud.network.rules.LoadBalancerContainer;\n+import com.cloud.utils.net.Ip;\n+\n+public interface ApplicationLoadBalancerContainer extends LoadBalancerContainer{\n+    \n+    public Long getSourceIpNetworkId();\n+    \n+    public Ip getSourceIp();\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/network/lb/ApplicationLoadBalancerContainer.java",
                "sha": "df94d3d43382ef13cc508fb3f3f80ed14e4b3891",
                "status": "added"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/network/lb/ApplicationLoadBalancerRule.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/network/lb/ApplicationLoadBalancerRule.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/network/lb/ApplicationLoadBalancerRule.java",
                "patch": "@@ -0,0 +1,24 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.network.lb;\n+\n+import com.cloud.network.rules.LoadBalancer;\n+\n+public interface ApplicationLoadBalancerRule extends ApplicationLoadBalancerContainer, LoadBalancer{\n+    int getInstancePort();\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/network/lb/ApplicationLoadBalancerRule.java",
                "sha": "f4acb734c8b556ecc94953f3f74f90de7521099f",
                "status": "added"
            },
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/network/lb/ApplicationLoadBalancerService.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/network/lb/ApplicationLoadBalancerService.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/network/lb/ApplicationLoadBalancerService.java",
                "patch": "@@ -0,0 +1,42 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+// \n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.network.lb;\n+\n+import java.util.List;\n+\n+import org.apache.cloudstack.api.command.user.loadbalancer.ListApplicationLoadBalancersCmd;\n+\n+import com.cloud.exception.InsufficientAddressCapacityException;\n+import com.cloud.exception.InsufficientVirtualNetworkCapcityException;\n+import com.cloud.exception.NetworkRuleConflictException;\n+import com.cloud.network.rules.LoadBalancerContainer.Scheme;\n+import com.cloud.utils.Pair;\n+\n+public interface ApplicationLoadBalancerService {\n+    \n+    ApplicationLoadBalancerRule createApplicationLoadBalancer(String name, String description, Scheme scheme, long sourceIpNetworkId, String sourceIp,\n+            int sourcePort, int instancePort, String algorithm, long networkId, long lbOwnerId) throws InsufficientAddressCapacityException,\n+            NetworkRuleConflictException, InsufficientVirtualNetworkCapcityException;\n+    \n+    boolean deleteApplicationLoadBalancer(long id);\n+    \n+    Pair<List<? extends ApplicationLoadBalancerRule>, Integer> listApplicationLoadBalancers(ListApplicationLoadBalancersCmd cmd);\n+    \n+    ApplicationLoadBalancerRule getApplicationLoadBalancer(long ruleId);\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/network/lb/ApplicationLoadBalancerService.java",
                "sha": "b2ac358555b42c1811dfe15d99cf3bfce2c3a952",
                "status": "added"
            },
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/network/lb/InternalLoadBalancerVMService.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/network/lb/InternalLoadBalancerVMService.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/network/lb/InternalLoadBalancerVMService.java",
                "patch": "@@ -0,0 +1,34 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+// \n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.network.lb;\n+\n+import com.cloud.exception.ConcurrentOperationException;\n+import com.cloud.exception.InsufficientCapacityException;\n+import com.cloud.exception.ResourceUnavailableException;\n+import com.cloud.exception.StorageUnavailableException;\n+import com.cloud.network.router.VirtualRouter;\n+import com.cloud.user.Account;\n+\n+public interface InternalLoadBalancerVMService {\n+\n+    VirtualRouter startInternalLbVm(long internalLbVmId, Account caller, long callerUserId) \n+            throws StorageUnavailableException, InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException;\n+\n+    VirtualRouter stopInternalLbVm(long vmId, boolean forced, Account caller, long callerUserId)\n+            throws ConcurrentOperationException, ResourceUnavailableException;\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/network/lb/InternalLoadBalancerVMService.java",
                "sha": "91cd88d91c18541fd5faeb7e8afd25bb5a4d1db8",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/query/QueryService.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/query/QueryService.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/query/QueryService.java",
                "patch": "@@ -18,6 +18,7 @@\n \n import org.apache.cloudstack.affinity.AffinityGroupResponse;\n import org.apache.cloudstack.api.command.admin.host.ListHostsCmd;\n+import org.apache.cloudstack.api.command.admin.internallb.ListInternalLBVMsCmd;\n import org.apache.cloudstack.api.command.admin.router.ListRoutersCmd;\n import org.apache.cloudstack.api.command.admin.storage.ListStoragePoolsCmd;\n import org.apache.cloudstack.api.command.admin.user.ListUsersCmd;\n@@ -101,4 +102,6 @@\n \n     public ListResponse<AffinityGroupResponse> listAffinityGroups(Long affinityGroupId, String affinityGroupName,\n             String affinityGroupType, Long vmId, Long startIndex, Long pageSize);\n+\n+    ListResponse<DomainRouterResponse> searchForInternalLbVms(ListInternalLBVMsCmd cmd);\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/api/src/org/apache/cloudstack/query/QueryService.java",
                "sha": "2f50d63828c5c967c0f03d42cccb0bdfc1802b27",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/client/pom.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/client/pom.xml?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "client/pom.xml",
                "patch": "@@ -85,6 +85,11 @@\n       <artifactId>cloud-plugin-network-midonet</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+  <dependency>\n+      <groupId>org.apache.cloudstack</groupId>\n+      <artifactId>cloud-plugin-network-internallb</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n     <dependency>\n       <groupId>org.apache.cloudstack</groupId>\n       <artifactId>cloud-plugin-hypervisor-xen</artifactId>",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/client/pom.xml",
                "sha": "197ba27975c17cb8cfc5488b427d324625b38bc9",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/client/tomcatconf/applicationContext.xml.in",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/client/tomcatconf/applicationContext.xml.in?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 1,
                "filename": "client/tomcatconf/applicationContext.xml.in",
                "patch": "@@ -363,6 +363,9 @@\n   <bean id=\"vpcOfferingServiceMapDaoImpl\" class=\"com.cloud.network.vpc.dao.VpcOfferingServiceMapDaoImpl\" />\n   <bean id=\"vpcServiceMapDaoImpl\" class=\"com.cloud.network.vpc.dao.VpcServiceMapDaoImpl\" />\n   <bean id=\"vpnUserDaoImpl\" class=\"com.cloud.network.dao.VpnUserDaoImpl\" />\n+  <bean id=\"applicationLbRuleDaoImpl\" class=\"org.apache.cloudstack.lb.dao.ApplicationLoadBalancerRuleDaoImpl\" />\n+  <bean id=\"networkOfferingDetailsDaoImpl\" class=\"com.cloud.offerings.dao.NetworkOfferingDetailsDaoImpl\" />\n+\n \n   <!--\n     Checkers\n@@ -406,10 +409,12 @@\n   <bean id=\"VpcVirtualRouter\" class=\"com.cloud.network.element.VpcVirtualRouterElement\">\n     <property name=\"name\" value=\"VpcVirtualRouter\"/>\n   </bean>\n-\n   <bean id=\"elasticLoadBalancerElement\" class=\"com.cloud.network.element.ElasticLoadBalancerElement\">\n     <property name=\"name\" value=\"ElasticLoadBalancerElement\"/>\n   </bean>\n+  <bean id=\"InternalLbVm\" class=\"org.apache.cloudstack.network.element.InternalLoadBalancerElement\">\n+    <property name=\"name\" value=\"InternalLbVm\"/>\n+  </bean>\n \n   <!-- \n     General allocators\n@@ -789,6 +794,8 @@\n   <bean id=\"vMSnapshotManagerImpl\" class=\"com.cloud.vm.snapshot.VMSnapshotManagerImpl\" />\n   <bean id=\"volumeManagerImpl\" class=\"com.cloud.storage.VolumeManagerImpl\" />\n   <bean id=\"ClassicalPrimaryDataStoreProvider\" class=\"org.apache.cloudstack.storage.datastore.provider.CloudStackPrimaryDataStoreProviderImpl\" />\n+  <bean id=\"ApplicationLoadBalancerService\" class=\"org.apache.cloudstack.network.lb.ApplicationLoadBalancerManagerImpl\" />\n+  <bean id=\"InternalLoadBalancerVMManager\" class=\"org.apache.cloudstack.network.lb.InternalLoadBalancerVMManagerImpl\" />\n \n \n <!--=======================================================================================================-->",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/client/tomcatconf/applicationContext.xml.in",
                "sha": "67c8ccf9355067e5f2b5f229a08777c3b5c5b40c",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/client/tomcatconf/commands.properties.in",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/client/tomcatconf/commands.properties.in?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "client/tomcatconf/commands.properties.in",
                "patch": "@@ -577,6 +577,17 @@ revertToVMSnapshot=15\n #### Baremetal commands\n addBaremetalHost=1\n \n+#### New Load Balancer commands\n+createLoadBalancer=15\n+listLoadBalancers=15\n+deleteLoadBalancer=15\n+\n+#Internal Load Balancer Element commands\n+configureInternalLoadBalancerElement=1\n+createInternalLoadBalancerElement=1\n+listInternalLoadBalancerElements=1\n+\n+\n #### Affinity group commands\n createAffinityGroup=15\n deleteAffinityGroup=15\n@@ -594,5 +605,10 @@ addCiscoAsa1000vResource=1\n deleteCiscoAsa1000vResource=1\n listCiscoAsa1000vResources=1\n \n+#### Internal LB VM commands\n+stopInternalLoadBalancerVM=1\n+startInternalLoadBalancerVM=1\n+listInternalLoadBalancerVMs=1\n+\n ### Network Isolation methods listing\n listNetworkIsolationMethods=1",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/client/tomcatconf/commands.properties.in",
                "sha": "cdc19929c19f93f8e29a029a314a20084d8f48ec",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/client/tomcatconf/componentContext.xml.in",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/client/tomcatconf/componentContext.xml.in?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "client/tomcatconf/componentContext.xml.in",
                "patch": "@@ -198,6 +198,7 @@\n           <ref bean=\"VirtualRouter\"/>\n           <ref bean=\"VpcVirtualRouter\"/>\n           <ref bean=\"NiciraNvp\"/>\n+          <ref bean=\"InternalLbVm\"/>\n       </list>\n     </property>\n   </bean>\n@@ -241,6 +242,7 @@\n           <ref bean=\"VpcVirtualRouter\"/>\n           <ref bean=\"NiciraNvp\" />\n           <ref bean=\"MidoNetElement\"/>\n+          <ref bean=\"InternalLbVm\"/>\n <!--\n           <ref bean=\"BareMetalDhcp\"/>\n           <ref bean=\"BareMetalPxe\"/>",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/client/tomcatconf/componentContext.xml.in",
                "sha": "8a45e5fea857251fba18a17ec30d81eae94819df",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/client/tomcatconf/nonossComponentContext.xml.in",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/client/tomcatconf/nonossComponentContext.xml.in?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "client/tomcatconf/nonossComponentContext.xml.in",
                "patch": "@@ -294,6 +294,7 @@\n           <ref bean=\"VirtualRouter\"/>\n           <ref bean=\"VpcVirtualRouter\"/>\n           <ref bean=\"NiciraNvp\"/>\n+          <ref bean=\"InternalLbVm\"/>\n       </list>\n     </property>\n   </bean>\n@@ -343,6 +344,7 @@\n           <ref bean=\"Ovs\"/>\n           <ref bean=\"SecurityGroupProvider\"/>\n           <ref bean=\"VpcVirtualRouter\"/>\n+          <ref bean=\"InternalLbVm\"/>\n <!--\n           <ref bean=\"BareMetalDhcp\"/>\n           <ref bean=\"BareMetalPxe\"/>",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/client/tomcatconf/nonossComponentContext.xml.in",
                "sha": "1b6ee6eb089af31b425b46e71bafeaee9e676ebb",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/client/tomcatconf/simulatorComponentContext.xml.in",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/client/tomcatconf/simulatorComponentContext.xml.in?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "client/tomcatconf/simulatorComponentContext.xml.in",
                "patch": "@@ -205,6 +205,7 @@\n         <ref bean=\"Ovs\"/>\n         <ref bean=\"SecurityGroupProvider\"/>\n         <ref bean=\"VpcVirtualRouter\"/>\n+        <ref bean=\"InternalLbVm\"/>\n         <!--\n                   <ref bean=\"BareMetalDhcp\"/>\n                   <ref bean=\"BareMetalPxe\"/>",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/client/tomcatconf/simulatorComponentContext.xml.in",
                "sha": "652c4c824ffd0a9450a9d3f4969b845e3cb25632",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/network/dao/FirewallRulesDao.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/network/dao/FirewallRulesDao.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 1,
                "filename": "engine/schema/src/com/cloud/network/dao/FirewallRulesDao.java",
                "patch": "@@ -18,7 +18,6 @@\n \n import java.util.List;\n \n-import com.cloud.host.HostVO;\n import com.cloud.network.rules.FirewallRule;\n import com.cloud.network.rules.FirewallRuleVO;\n import com.cloud.utils.db.GenericDao;",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/network/dao/FirewallRulesDao.java",
                "sha": "6b9b3bb83e5b6a61500670929df725acca629621",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/network/dao/IPAddressVO.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/network/dao/IPAddressVO.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 4,
                "filename": "engine/schema/src/com/cloud/network/dao/IPAddressVO.java",
                "patch": "@@ -31,12 +31,8 @@\n import javax.persistence.TemporalType;\n import javax.persistence.Transient;\n \n-import org.apache.cloudstack.api.Identity;\n-\n import com.cloud.network.IpAddress;\n-import com.cloud.network.IpAddress.State;\n import com.cloud.utils.net.Ip;\n-import org.apache.cloudstack.api.InternalIdentity;\n \n /**\n  * A bean representing a public IP Address\n@@ -304,4 +300,9 @@ public String getVmIp() {\n     public void setVmIp(String vmIp) {\n         this.vmIp = vmIp;\n     }\n+\n+    @Override\n+    public Long getNetworkId() {\n+        return sourceNetworkId;\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/network/dao/IPAddressVO.java",
                "sha": "ae27e95ce4bbd8537b18d38f4583c24fd5271f32",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/network/dao/LoadBalancerDao.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/network/dao/LoadBalancerDao.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 7,
                "filename": "engine/schema/src/com/cloud/network/dao/LoadBalancerDao.java",
                "patch": "@@ -18,19 +18,15 @@\n \n import java.util.List;\n \n+import com.cloud.network.rules.LoadBalancerContainer.Scheme;\n import com.cloud.utils.db.GenericDao;\n \n public interface LoadBalancerDao extends GenericDao<LoadBalancerVO, Long> {\n-    List<Long> listInstancesByLoadBalancer(long loadBalancerId);\n \n     List<LoadBalancerVO> listByIpAddress(long ipAddressId);\n \n-    LoadBalancerVO findByIpAddressAndPublicPort(long ipAddressId, String publicPort);\n+    List<LoadBalancerVO> listByNetworkIdAndScheme(long networkId, Scheme scheme);\n \n-    LoadBalancerVO findByAccountAndName(Long accountId, String name);\n-\n-    List<LoadBalancerVO> listByNetworkId(long networkId);\n-\n-    List<LoadBalancerVO> listInTransitionStateByNetworkId(long networkId);\n+    List<LoadBalancerVO> listInTransitionStateByNetworkIdAndScheme(long networkId, Scheme scheme);\n \n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/network/dao/LoadBalancerDao.java",
                "sha": "331f7555d81b2cd53127909d8a3ecf89257adbbc",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/network/dao/LoadBalancerDaoImpl.java",
                "changes": 74,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/network/dao/LoadBalancerDaoImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 66,
                "filename": "engine/schema/src/com/cloud/network/dao/LoadBalancerDaoImpl.java",
                "patch": "@@ -16,39 +16,24 @@\n // under the License.\n package com.cloud.network.dao;\n \n-import java.sql.PreparedStatement;\n-import java.sql.ResultSet;\n-import java.util.ArrayList;\n import java.util.List;\n \n import javax.ejb.Local;\n import javax.inject.Inject;\n \n-import org.apache.log4j.Logger;\n import org.springframework.stereotype.Component;\n \n import com.cloud.network.rules.FirewallRule.State;\n+import com.cloud.network.rules.LoadBalancerContainer.Scheme;\n import com.cloud.utils.db.GenericDaoBase;\n import com.cloud.utils.db.SearchBuilder;\n import com.cloud.utils.db.SearchCriteria;\n import com.cloud.utils.db.SearchCriteria.Op;\n-import com.cloud.utils.db.Transaction;\n \n @Component\n @Local(value = { LoadBalancerDao.class })\n public class LoadBalancerDaoImpl extends GenericDaoBase<LoadBalancerVO, Long> implements LoadBalancerDao {\n-    private static final Logger s_logger = Logger.getLogger(LoadBalancerDaoImpl.class);\n-    private static final String LIST_INSTANCES_BY_LOAD_BALANCER = \"SELECT vm.id \" +\n-            \"    FROM vm_instance vm, load_balancer lb, ip_forwarding fwd, user_ip_address ip \" +\n-            \"    WHERE lb.id = ? AND \" +\n-            \"          fwd.group_id = lb.id AND \" +\n-            \"          fwd.forwarding = 0 AND \" +\n-            \"          fwd.private_ip_address = vm.private_ip_address AND \" +\n-            \"          lb.ip_address = ip.public_ip_address AND \" +\n-            \"          ip.data_center_id = vm.data_center_id \";\n     private final SearchBuilder<LoadBalancerVO> ListByIp;\n-    private final SearchBuilder<LoadBalancerVO> IpAndPublicPortSearch;\n-    private final SearchBuilder<LoadBalancerVO> AccountAndNameSearch;\n     protected final SearchBuilder<LoadBalancerVO> TransitionStateSearch;\n \n     @Inject protected FirewallRulesCidrsDao _portForwardingRulesCidrsDao;\n@@ -57,45 +42,16 @@ protected LoadBalancerDaoImpl() {\n         ListByIp = createSearchBuilder();\n         ListByIp.and(\"ipAddressId\", ListByIp.entity().getSourceIpAddressId(), SearchCriteria.Op.EQ);\n         ListByIp.and(\"networkId\", ListByIp.entity().getNetworkId(), SearchCriteria.Op.EQ);\n+        ListByIp.and(\"scheme\", ListByIp.entity().getScheme(), SearchCriteria.Op.EQ);\n         ListByIp.done();\n \n-        IpAndPublicPortSearch = createSearchBuilder();\n-        IpAndPublicPortSearch.and(\"ipAddressId\", IpAndPublicPortSearch.entity().getSourceIpAddressId(), SearchCriteria.Op.EQ);\n-        IpAndPublicPortSearch.and(\"publicPort\", IpAndPublicPortSearch.entity().getSourcePortStart(), SearchCriteria.Op.EQ);\n-        IpAndPublicPortSearch.done();\n-\n-        AccountAndNameSearch = createSearchBuilder();\n-        AccountAndNameSearch.and(\"accountId\", AccountAndNameSearch.entity().getAccountId(), SearchCriteria.Op.EQ);\n-        AccountAndNameSearch.and(\"name\", AccountAndNameSearch.entity().getName(), SearchCriteria.Op.EQ);\n-        AccountAndNameSearch.done();\n-\n         TransitionStateSearch = createSearchBuilder();\n         TransitionStateSearch.and(\"networkId\", TransitionStateSearch.entity().getNetworkId(), Op.EQ);\n         TransitionStateSearch.and(\"state\", TransitionStateSearch.entity().getState(), Op.IN);\n+        TransitionStateSearch.and(\"scheme\", TransitionStateSearch.entity().getScheme(), Op.EQ);\n         TransitionStateSearch.done();\n     }\n-\n-    @Override\n-    public List<Long> listInstancesByLoadBalancer(long loadBalancerId) {\n-        Transaction txn = Transaction.currentTxn();\n-        String sql = LIST_INSTANCES_BY_LOAD_BALANCER;\n-        PreparedStatement pstmt = null;\n-        List<Long> instanceList = new ArrayList<Long>();\n-        try {\n-            pstmt = txn.prepareAutoCloseStatement(sql);\n-            pstmt.setLong(1, loadBalancerId);\n-\n-            ResultSet rs = pstmt.executeQuery();\n-            while (rs.next()) {\n-                Long vmId = rs.getLong(1);\n-                instanceList.add(vmId);\n-            }\n-        } catch (Exception ex) {\n-            s_logger.error(\"error getting recent usage network stats\", ex);\n-        }\n-        return instanceList;\n-    }\n-\n+    \n     @Override\n     public List<LoadBalancerVO> listByIpAddress(long ipAddressId) {\n         SearchCriteria<LoadBalancerVO> sc = ListByIp.create();\n@@ -104,33 +60,19 @@ protected LoadBalancerDaoImpl() {\n     }\n \n     @Override\n-    public List<LoadBalancerVO> listByNetworkId(long networkId) {\n+    public List<LoadBalancerVO> listByNetworkIdAndScheme(long networkId, Scheme scheme) {\n         SearchCriteria<LoadBalancerVO> sc = ListByIp.create();\n         sc.setParameters(\"networkId\", networkId);\n+        sc.setParameters(\"scheme\", scheme);\n         return listBy(sc);\n     }\n \n     @Override\n-    public LoadBalancerVO findByIpAddressAndPublicPort(long ipAddressId, String publicPort) {\n-        SearchCriteria<LoadBalancerVO> sc = IpAndPublicPortSearch.create();\n-        sc.setParameters(\"ipAddressId\", ipAddressId);\n-        sc.setParameters(\"publicPort\", publicPort);\n-        return findOneBy(sc);\n-    }\n-\n-    @Override\n-    public LoadBalancerVO findByAccountAndName(Long accountId, String name) {\n-        SearchCriteria<LoadBalancerVO> sc = AccountAndNameSearch.create();\n-        sc.setParameters(\"accountId\", accountId);\n-        sc.setParameters(\"name\", name);\n-        return findOneBy(sc);\n-    }\n-\n-    @Override\n-    public List<LoadBalancerVO> listInTransitionStateByNetworkId(long networkId) {\n+    public List<LoadBalancerVO> listInTransitionStateByNetworkIdAndScheme(long networkId, Scheme scheme) {\n         SearchCriteria<LoadBalancerVO> sc = TransitionStateSearch.create();\n         sc.setParameters(\"networkId\", networkId);\n         sc.setParameters(\"state\", State.Add.toString(), State.Revoke.toString());\n+        sc.setParameters(\"scheme\", scheme);\n         return listBy(sc);\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/network/dao/LoadBalancerDaoImpl.java",
                "sha": "c20d8b23d6adb8f3b136b43c62d40a2be02637b7",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/network/dao/LoadBalancerVO.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/network/dao/LoadBalancerVO.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "engine/schema/src/com/cloud/network/dao/LoadBalancerVO.java",
                "patch": "@@ -19,13 +19,21 @@\n import javax.persistence.Column;\n import javax.persistence.DiscriminatorValue;\n import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n import javax.persistence.PrimaryKeyJoinColumn;\n import javax.persistence.Table;\n \n import com.cloud.network.rules.FirewallRuleVO;\n import com.cloud.network.rules.LoadBalancer;\n import com.cloud.utils.net.NetUtils;\n \n+/**\n+ * This VO represent Public Load Balancer\n+ * It references source ip address by its Id. \n+ * To get the VO for Internal Load Balancer rule, please refer to LoadBalancerRuleVO\n+ *\n+ */\n @Entity\n @Table(name=(\"load_balancing_rules\"))\n @DiscriminatorValue(value=\"LoadBalancing\")\n@@ -46,6 +54,10 @@\n     \n     @Column(name=\"default_port_end\")\n     private int defaultPortEnd;\n+    \n+    @Enumerated(value=EnumType.STRING)\n+    @Column(name=\"scheme\")\n+    Scheme scheme = Scheme.Public;\n \n     public LoadBalancerVO() { \n     }\n@@ -57,6 +69,7 @@ public LoadBalancerVO(String xId, String name, String description, long srcIpId,\n         this.algorithm = algorithm;\n         this.defaultPortStart = dstPort;\n         this.defaultPortEnd = dstPort;\n+        this.scheme = Scheme.Public;\n     }\n     \n     @Override\n@@ -94,5 +107,10 @@ public void setAlgorithm(String algorithm) {\n \n     public void setDescription(String description) {\n         this.description = description;\n+    }\n+\n+    @Override\n+    public Scheme getScheme() {\n+        return scheme;\n     }  \n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/network/dao/LoadBalancerVO.java",
                "sha": "fee88cf7b0ac03144a4aad05fba8459b6564ed55",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/network/dao/NetworkServiceMapDao.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/network/dao/NetworkServiceMapDao.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "engine/schema/src/com/cloud/network/dao/NetworkServiceMapDao.java",
                "patch": "@@ -35,4 +35,5 @@\n \tvoid deleteByNetworkId(long networkId);\n \tList<String> getDistinctProviders(long networkId);\n \tString isProviderForNetwork(long networkId, Provider provider);\n+\tList<String> getProvidersForServiceInNetwork(long networkId, Service service);\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/network/dao/NetworkServiceMapDao.java",
                "sha": "6d401c40d8b517e4fb885b0c1b571158bd3f17ec",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/network/dao/NetworkServiceMapDaoImpl.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/network/dao/NetworkServiceMapDaoImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "engine/schema/src/com/cloud/network/dao/NetworkServiceMapDaoImpl.java",
                "patch": "@@ -56,6 +56,7 @@ protected NetworkServiceMapDaoImpl() {\n         DistinctProvidersSearch = createSearchBuilder(String.class);\n         DistinctProvidersSearch.and(\"networkId\", DistinctProvidersSearch.entity().getNetworkId(), SearchCriteria.Op.EQ);\n         DistinctProvidersSearch.and(\"provider\", DistinctProvidersSearch.entity().getProvider(), SearchCriteria.Op.EQ);\n+        DistinctProvidersSearch.and(\"service\", DistinctProvidersSearch.entity().getService(), SearchCriteria.Op.EQ);\n         DistinctProvidersSearch.selectField(DistinctProvidersSearch.entity().getProvider());\n         DistinctProvidersSearch.done();\n     }\n@@ -163,5 +164,13 @@ public String isProviderForNetwork(long networkId, Provider provider) {\n         \treturn results.get(0);\n         }\n     }\n+\n+    @Override\n+    public List<String> getProvidersForServiceInNetwork(long networkId, Service service) {\n+        SearchCriteria<String> sc = DistinctProvidersSearch.create();\n+        sc.setParameters(\"networkId\", networkId);\n+        sc.setParameters(\"service\", service.getName());\n+        return customSearch(sc, null);\n+    }\n     \n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/network/dao/NetworkServiceMapDaoImpl.java",
                "sha": "3cdd73885c83f5000ce506ec26a5f9a5e9821beb",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/network/dao/NetworkVO.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/network/dao/NetworkVO.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 3,
                "filename": "engine/schema/src/com/cloud/network/dao/NetworkVO.java",
                "patch": "@@ -32,9 +32,6 @@\n import org.apache.cloudstack.acl.ControlledEntity;\n \n import com.cloud.network.Network;\n-import com.cloud.network.Networks;\n-import com.cloud.network.Network.GuestType;\n-import com.cloud.network.Network.State;\n import com.cloud.network.Networks.BroadcastDomainType;\n import com.cloud.network.Networks.Mode;\n import com.cloud.network.Networks.TrafficType;",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/network/dao/NetworkVO.java",
                "sha": "8e728abd98484172fc78fadb64dda558a21e7bcc",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/network/rules/FirewallRuleVO.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/network/rules/FirewallRuleVO.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 2,
                "filename": "engine/schema/src/com/cloud/network/rules/FirewallRuleVO.java",
                "patch": "@@ -20,7 +20,6 @@\n import java.util.List;\n import java.util.UUID;\n \n-import javax.inject.Inject;\n import javax.persistence.Column;\n import javax.persistence.DiscriminatorColumn;\n import javax.persistence.DiscriminatorType;\n@@ -35,7 +34,6 @@\n import javax.persistence.Table;\n import javax.persistence.Transient;\n \n-import com.cloud.network.dao.FirewallRulesCidrsDao;\n import com.cloud.utils.db.GenericDao;\n import com.cloud.utils.net.NetUtils;\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/network/rules/FirewallRuleVO.java",
                "sha": "9f73029349f95499f57a82351cc1b88503e65bf4",
                "status": "modified"
            },
            {
                "additions": 90,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/offerings/NetworkOfferingDetailsVO.java",
                "changes": 90,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/offerings/NetworkOfferingDetailsVO.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "engine/schema/src/com/cloud/offerings/NetworkOfferingDetailsVO.java",
                "patch": "@@ -0,0 +1,90 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.offerings;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+import org.apache.cloudstack.api.InternalIdentity;\n+\n+import com.cloud.offering.NetworkOffering;\n+import com.cloud.offering.NetworkOffering.Detail;\n+\n+@Entity\n+@Table(name=\"network_offering_details\")\n+public class NetworkOfferingDetailsVO implements InternalIdentity {\n+    @Id\n+    @GeneratedValue(strategy=GenerationType.IDENTITY)\n+    @Column(name=\"id\")\n+    private long id;\n+    \n+    @Column(name=\"network_offering_id\")\n+    private long offeringId;\n+    \n+    @Enumerated(value=EnumType.STRING)\n+    @Column(name=\"name\")\n+    private NetworkOffering.Detail name;\n+    \n+    @Column(name=\"value\", length=1024)\n+    private String value;\n+    \n+    public NetworkOfferingDetailsVO() {}\n+    \n+    public NetworkOfferingDetailsVO(long offeringId, Detail detailName, String value) {\n+        this.offeringId = offeringId;\n+        this.name = detailName;\n+        this.value = value;\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public long getOfferingId() {\n+        return offeringId;\n+    }\n+\n+    public NetworkOffering.Detail getName() {\n+        return name;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public void setOfferingId(long offeringId) {\n+        this.offeringId = offeringId;\n+    }\n+\n+    public void setName(NetworkOffering.Detail name) {\n+        this.name = name;\n+    }\n+\n+    public void setValue(String value) {\n+        this.value = value;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/offerings/NetworkOfferingDetailsVO.java",
                "sha": "6cd5abc4223495c65f9169f11b3a7c49bb3b9097",
                "status": "added"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/offerings/NetworkOfferingVO.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/offerings/NetworkOfferingVO.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 9,
                "filename": "engine/schema/src/com/cloud/offerings/NetworkOfferingVO.java",
                "patch": "@@ -16,15 +16,23 @@\n // under the License.\n package com.cloud.offerings;\n \n+import java.util.Date;\n+import java.util.UUID;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n import com.cloud.network.Network;\n import com.cloud.network.Networks.TrafficType;\n import com.cloud.offering.NetworkOffering;\n import com.cloud.utils.db.GenericDao;\n \n-import javax.persistence.*;\n-import java.util.Date;\n-import java.util.UUID;\n-\n @Entity\n @Table(name = \"network_offerings\")\n public class NetworkOfferingVO implements NetworkOffering {\n@@ -126,6 +134,12 @@\n     public String getDisplayText() {\n         return displayText;\n     }\n+    \n+    @Column(name = \"internal_lb\")\n+    boolean internalLb;\n+    \n+    @Column(name = \"public_lb\")\n+    boolean publicLb;\n \n     @Override\n     public long getId() {\n@@ -262,7 +276,7 @@ public void setRedundantRouter(boolean redundantRouter) {\n     }\n \n     public NetworkOfferingVO(String name, String displayText, TrafficType trafficType, boolean systemOnly, boolean specifyVlan, Integer rateMbps, Integer multicastRateMbps, boolean isDefault,\n-            Availability availability, String tags, Network.GuestType guestType, boolean conserveMode, boolean specifyIpRanges, boolean isPersistent) {\n+            Availability availability, String tags, Network.GuestType guestType, boolean conserveMode, boolean specifyIpRanges, boolean isPersistent, boolean internalLb, boolean publicLb) {\n         this.name = name;\n         this.displayText = displayText;\n         this.rateMbps = rateMbps;\n@@ -286,12 +300,14 @@ public NetworkOfferingVO(String name, String displayText, TrafficType trafficTyp\n         this.inline = false;\n         this.specifyIpRanges = specifyIpRanges;\n         this.isPersistent=isPersistent;\n+        this.publicLb = publicLb;\n+        this.internalLb = internalLb;\n     }\n \n     public NetworkOfferingVO(String name, String displayText, TrafficType trafficType, boolean systemOnly, boolean specifyVlan, Integer rateMbps, Integer multicastRateMbps, boolean isDefault,\n             Availability availability, String tags, Network.GuestType guestType, boolean conserveMode, boolean dedicatedLb, boolean sharedSourceNat, boolean redundantRouter, boolean elasticIp, boolean elasticLb,\n-            boolean specifyIpRanges, boolean inline, boolean isPersistent, boolean associatePublicIP) {\n-        this(name, displayText, trafficType, systemOnly, specifyVlan, rateMbps, multicastRateMbps, isDefault, availability, tags, guestType, conserveMode, specifyIpRanges, isPersistent);\n+            boolean specifyIpRanges, boolean inline, boolean isPersistent, boolean associatePublicIP, boolean publicLb, boolean internalLb) {\n+        this(name, displayText, trafficType, systemOnly, specifyVlan, rateMbps, multicastRateMbps, isDefault, availability, tags, guestType, conserveMode, specifyIpRanges, isPersistent, internalLb, publicLb);\n         this.dedicatedLB = dedicatedLb;\n         this.sharedSourceNat = sharedSourceNat;\n         this.redundantRouter = redundantRouter;\n@@ -313,13 +329,13 @@ public NetworkOfferingVO() {\n      *            TODO\n      */\n     public NetworkOfferingVO(String name, TrafficType trafficType, boolean specifyIpRanges) {\n-        this(name, \"System Offering for \" + name, trafficType, true, false, 0, 0, true, Availability.Required, null, null, true, specifyIpRanges, false);\n+        this(name, \"System Offering for \" + name, trafficType, true, false, 0, 0, true, Availability.Required, null, null, true, specifyIpRanges, false, false, false);\n         this.state = State.Enabled;\n     }\n \n     public NetworkOfferingVO(String name, Network.GuestType guestType) {\n         this(name, \"System Offering for \" + name, TrafficType.Guest, true, true, 0, 0, true, Availability.Optional,\n-                null, Network.GuestType.Isolated, true, false, false);\n+                null, Network.GuestType.Isolated, true, false, false, false, false);\n         this.state = State.Enabled;\n     }\n \n@@ -388,4 +404,14 @@ public boolean getIsPersistent() {\n         return isPersistent;\n     }\n \n+    @Override\n+    public boolean getInternalLb() {\n+        return internalLb;\n+    }\n+\n+    @Override\n+    public boolean getPublicLb() {\n+        return publicLb;\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/offerings/NetworkOfferingVO.java",
                "sha": "3ae0bf38b0b495fc2e5fdc1dfd78cd13caaed203",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/offerings/dao/NetworkOfferingDao.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/offerings/dao/NetworkOfferingDao.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "engine/schema/src/com/cloud/offerings/dao/NetworkOfferingDao.java",
                "patch": "@@ -17,11 +17,13 @@\n package com.cloud.offerings.dao;\n \n import java.util.List;\n+import java.util.Map;\n \n import com.cloud.network.Network;\n import com.cloud.network.Networks.TrafficType;\n import com.cloud.offering.NetworkOffering;\n import com.cloud.offering.NetworkOffering.Availability;\n+import com.cloud.offering.NetworkOffering.Detail;\n import com.cloud.offerings.NetworkOfferingVO;\n import com.cloud.utils.db.GenericDao;\n \n@@ -57,4 +59,6 @@\n \n     List<NetworkOfferingVO> listByTrafficTypeGuestTypeAndState(NetworkOffering.State state, TrafficType trafficType, Network.GuestType type);\n \n+    NetworkOfferingVO persist(NetworkOfferingVO off, Map<Detail, String> details);\n+\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/offerings/dao/NetworkOfferingDao.java",
                "sha": "5bb79ced69f8742d3100df009e13137d3685f14c",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/offerings/dao/NetworkOfferingDaoImpl.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/offerings/dao/NetworkOfferingDaoImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "engine/schema/src/com/cloud/offerings/dao/NetworkOfferingDaoImpl.java",
                "patch": "@@ -17,8 +17,10 @@\n package com.cloud.offerings.dao;\n \n import java.util.List;\n+import java.util.Map;\n \n import javax.ejb.Local;\n+import javax.inject.Inject;\n import javax.persistence.EntityExistsException;\n \n import org.springframework.stereotype.Component;\n@@ -27,6 +29,8 @@\n import com.cloud.network.Networks.TrafficType;\n import com.cloud.offering.NetworkOffering;\n import com.cloud.offering.NetworkOffering.Availability;\n+import com.cloud.offering.NetworkOffering.Detail;\n+import com.cloud.offerings.NetworkOfferingDetailsVO;\n import com.cloud.offerings.NetworkOfferingVO;\n import com.cloud.utils.db.DB;\n import com.cloud.utils.db.GenericDaoBase;\n@@ -45,6 +49,7 @@\n     final SearchBuilder<NetworkOfferingVO> AvailabilitySearch;\n     final SearchBuilder<NetworkOfferingVO> AllFieldsSearch;\n     private final GenericSearchBuilder<NetworkOfferingVO, Long> UpgradeSearch;\n+    @Inject NetworkOfferingDetailsDao _detailsDao;\n \n     protected NetworkOfferingDaoImpl() {\n         super();\n@@ -165,5 +170,24 @@ public boolean remove(Long networkOfferingId) {\n         sc.setParameters(\"state\", state);\n         return listBy(sc, null);\n     }\n+    \n+    @Override\n+    @DB\n+    public NetworkOfferingVO persist(NetworkOfferingVO off, Map<Detail, String> details) {\n+        Transaction txn = Transaction.currentTxn();\n+        txn.start();\n+        //1) persist the offering\n+        NetworkOfferingVO vo = super.persist(off);\n+        \n+        //2) persist the details\n+        if (details != null && !details.isEmpty()) {\n+            for (NetworkOffering.Detail detail : details.keySet()) {\n+                _detailsDao.persist(new NetworkOfferingDetailsVO(off.getId(), detail, details.get(detail)));\n+            }\n+        }\n+       \n+        txn.commit();\n+        return vo;\n+    }\n \n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/offerings/dao/NetworkOfferingDaoImpl.java",
                "sha": "ef8237a48f578ba1b75e1cc17297f59d58e72e29",
                "status": "modified"
            },
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/offerings/dao/NetworkOfferingDetailsDao.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/offerings/dao/NetworkOfferingDetailsDao.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "engine/schema/src/com/cloud/offerings/dao/NetworkOfferingDetailsDao.java",
                "patch": "@@ -0,0 +1,31 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.offerings.dao;\n+\n+\n+import java.util.Map;\n+\n+import com.cloud.offering.NetworkOffering;\n+import com.cloud.offering.NetworkOffering.Detail;\n+import com.cloud.offerings.NetworkOfferingDetailsVO;\n+import com.cloud.utils.db.GenericDao;\n+\n+public interface NetworkOfferingDetailsDao extends GenericDao<NetworkOfferingDetailsVO, Long>{\n+\n+    Map<NetworkOffering.Detail,String> getNtwkOffDetails(long offeringId);\n+    String getDetail(long offeringId, Detail detailName);\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/offerings/dao/NetworkOfferingDetailsDao.java",
                "sha": "ce209e04694578ffc734a862cdb0a544e30ea278",
                "status": "added"
            },
            {
                "additions": 79,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/offerings/dao/NetworkOfferingDetailsDaoImpl.java",
                "changes": 79,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/offerings/dao/NetworkOfferingDetailsDaoImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "engine/schema/src/com/cloud/offerings/dao/NetworkOfferingDetailsDaoImpl.java",
                "patch": "@@ -0,0 +1,79 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.offerings.dao;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.cloud.offering.NetworkOffering;\n+import com.cloud.offering.NetworkOffering.Detail;\n+import com.cloud.offerings.NetworkOfferingDetailsVO;\n+import com.cloud.utils.db.GenericDaoBase;\n+import com.cloud.utils.db.GenericSearchBuilder;\n+import com.cloud.utils.db.SearchBuilder;\n+import com.cloud.utils.db.SearchCriteria;\n+import com.cloud.utils.db.SearchCriteria.Func;\n+import com.cloud.utils.db.SearchCriteria.Op;\n+\n+public class NetworkOfferingDetailsDaoImpl extends GenericDaoBase<NetworkOfferingDetailsVO, Long> implements NetworkOfferingDetailsDao{\n+    protected final SearchBuilder<NetworkOfferingDetailsVO> DetailSearch;\n+    private final GenericSearchBuilder<NetworkOfferingDetailsVO, String> ValueSearch;\n+\n+    \n+    public NetworkOfferingDetailsDaoImpl() {\n+        \n+        DetailSearch = createSearchBuilder();\n+        DetailSearch.and(\"offeringId\", DetailSearch.entity().getOfferingId(), SearchCriteria.Op.EQ);\n+        DetailSearch.and(\"name\", DetailSearch.entity().getName(), SearchCriteria.Op.EQ);\n+        DetailSearch.done();\n+        \n+        ValueSearch = createSearchBuilder(String.class);\n+        ValueSearch.select(null, Func.DISTINCT, ValueSearch.entity().getValue());\n+        ValueSearch.and(\"offeringId\", ValueSearch.entity().getOfferingId(), SearchCriteria.Op.EQ);\n+        ValueSearch.and(\"name\", ValueSearch.entity().getName(), Op.EQ);\n+        ValueSearch.done();\n+    }\n+    \n+    @Override\n+    public Map<NetworkOffering.Detail,String> getNtwkOffDetails(long offeringId) {\n+        SearchCriteria<NetworkOfferingDetailsVO> sc = DetailSearch.create();\n+        sc.setParameters(\"offeringId\", offeringId);\n+        \n+        List<NetworkOfferingDetailsVO> results = search(sc, null);\n+        Map<NetworkOffering.Detail, String> details = new HashMap<NetworkOffering.Detail, String>(results.size());\n+        for (NetworkOfferingDetailsVO result : results) {\n+            details.put(result.getName(), result.getValue());\n+        }\n+        \n+        return details;\n+    }\n+\n+    @Override\n+    public String getDetail(long offeringId, Detail detailName) {\n+        SearchCriteria<String> sc = ValueSearch.create();\n+        sc.setParameters(\"name\", detailName);\n+        sc.setParameters(\"offeringId\", offeringId);\n+        List<String> results = customSearch(sc, null);\n+        if (results.isEmpty()) {\n+            return null;\n+        } else {\n+            return results.get(0);\n+        }\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/offerings/dao/NetworkOfferingDetailsDaoImpl.java",
                "sha": "068f3908b8d28e2913e4636303a11a9847de9c62",
                "status": "added"
            },
            {
                "additions": 91,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/upgrade/dao/Upgrade410to420.java",
                "changes": 95,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/upgrade/dao/Upgrade410to420.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 4,
                "filename": "engine/schema/src/com/cloud/upgrade/dao/Upgrade410to420.java",
                "patch": "@@ -17,17 +17,18 @@\n \n package com.cloud.upgrade.dao;\n \n-import com.cloud.utils.exception.CloudRuntimeException;\n-import com.cloud.utils.script.Script;\n-import org.apache.log4j.Logger;\n-\n import java.io.File;\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.util.UUID;\n \n+import org.apache.log4j.Logger;\n+\n+import com.cloud.utils.exception.CloudRuntimeException;\n+import com.cloud.utils.script.Script;\n+\n public class Upgrade410to420 implements DbUpgrade {\n \tfinal static Logger s_logger = Logger.getLogger(Upgrade410to420.class);\n \n@@ -66,6 +67,8 @@ public void performDataMigration(Connection conn) {\n         updatePrimaryStore(conn);\n         addEgressFwRulesForSRXGuestNw(conn);\n         upgradeEIPNetworkOfferings(conn);\n+        upgradeDefaultVpcOffering(conn);\n+        upgradePhysicalNtwksWithInternalLbProvider(conn);\n     }\n \t\n \tprivate void updateSystemVmTemplates(Connection conn) {\n@@ -399,4 +402,88 @@ private void upgradeEIPNetworkOfferings(Connection conn) {\n             }\n         }\n     }\n+    \n+    \n+    private void upgradeDefaultVpcOffering(Connection conn) {\n+\n+        PreparedStatement pstmt = null;\n+        ResultSet rs = null;\n+\n+        try {\n+            pstmt = conn.prepareStatement(\"select distinct map.vpc_offering_id from `cloud`.`vpc_offering_service_map` map, `cloud`.`vpc_offerings` off where off.id=map.vpc_offering_id AND service='Lb'\");\n+            rs = pstmt.executeQuery();\n+            while (rs.next()) {\n+                long id = rs.getLong(1);\n+                //Add internal LB vm as a supported provider for the load balancer service\n+                pstmt = conn.prepareStatement(\"INSERT INTO `cloud`.`vpc_offering_service_map` (vpc_offering_id, service, provider) VALUES (?,?,?)\");\n+                pstmt.setLong(1, id);\n+                pstmt.setString(2, \"Lb\");\n+                pstmt.setString(3, \"InternalLbVm\");\n+                pstmt.executeUpdate();\n+            }\n+            \n+        } catch (SQLException e) {\n+            throw new CloudRuntimeException(\"Unable update the default VPC offering with the internal lb service\", e);\n+        } finally {\n+            try {\n+                if (rs != null) {\n+                    rs.close();\n+                }\n+                if (pstmt != null) {\n+                    pstmt.close();\n+                }\n+            } catch (SQLException e) {\n+            }\n+        }\n+    }\n+    \n+    \n+    private void upgradePhysicalNtwksWithInternalLbProvider(Connection conn) {\n+\n+        PreparedStatement pstmt = null;\n+        ResultSet rs = null;\n+\n+        try {\n+            pstmt = conn.prepareStatement(\"SELECT id FROM `cloud`.`physical_network` where removed is null\");\n+            rs = pstmt.executeQuery();\n+            while (rs.next()) {\n+                long pNtwkId = rs.getLong(1);\n+                String uuid = UUID.randomUUID().toString();\n+                //Add internal LB VM to the list of physical network service providers\n+                pstmt = conn.prepareStatement(\"INSERT INTO `cloud`.`physical_network_service_providers` \" +\n+                \t\t\"(uuid, physical_network_id, provider_name, state, load_balance_service_provided, destination_physical_network_id)\" +\n+                \t\t\" VALUES (?, ?, 'InternalLbVm', 'Enabled', 1, 0)\");\n+                pstmt.setString(1, uuid);\n+                pstmt.setLong(2, pNtwkId);\n+                pstmt.executeUpdate();\n+                \n+                //Add internal lb vm to the list of physical network elements\n+                PreparedStatement pstmt1 = conn.prepareStatement(\"SELECT id FROM `cloud`.`physical_network_service_providers`\" +\n+                \t\t\" WHERE physical_network_id=? AND provider_name='InternalLbVm'\");\n+                ResultSet rs1 = pstmt1.executeQuery();\n+                while (rs1.next()) {\n+                    long providerId = rs1.getLong(1);\n+                    uuid = UUID.randomUUID().toString();\n+                    pstmt1 = conn.prepareStatement(\"INSERT INTO `cloud`.`virtual_router_providers` (nsp_id, uuid, type, enabled) VALUES (?, ?, 'InternalLbVm', 1)\");\n+                    pstmt1.setLong(1, providerId);\n+                    pstmt1.setString(2, uuid);\n+                    pstmt1.executeUpdate();\n+                }\n+            }\n+            \n+        } catch (SQLException e) {\n+            throw new CloudRuntimeException(\"Unable existing physical networks with internal lb provider\", e);\n+        } finally {\n+            try {\n+                if (rs != null) {\n+                    rs.close();\n+                }\n+                if (pstmt != null) {\n+                    pstmt.close();\n+                }\n+            } catch (SQLException e) {\n+            }\n+        }\n+        \n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/upgrade/dao/Upgrade410to420.java",
                "sha": "3a164c413bb7ab9be6a8793065b458adfbc99d34",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/vm/dao/NicDao.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/vm/dao/NicDao.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 1,
                "filename": "engine/schema/src/com/cloud/vm/dao/NicDao.java",
                "patch": "@@ -30,7 +30,7 @@\n     \n     List<NicVO> listByNetworkId(long networkId);\n     \n-    NicVO findByInstanceIdAndNetworkId(long networkId, long instanceId);\n+    NicVO findByNtwkIdAndInstanceId(long networkId, long instanceId);\n     \n     NicVO findByInstanceIdAndNetworkIdIncludingRemoved(long networkId, long instanceId);\n     ",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/vm/dao/NicDao.java",
                "sha": "12efe08f91ac47dc6fa72d8ceee3a912841d1d5d",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/vm/dao/NicDaoImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/vm/dao/NicDaoImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 1,
                "filename": "engine/schema/src/com/cloud/vm/dao/NicDaoImpl.java",
                "patch": "@@ -113,7 +113,7 @@ public void removeNicsForInstance(long instanceId) {\n     }\n     \n     @Override\n-    public NicVO findByInstanceIdAndNetworkId(long networkId, long instanceId) {\n+    public NicVO findByNtwkIdAndInstanceId(long networkId, long instanceId) {\n         SearchCriteria<NicVO> sc = AllFieldsSearch.create();\n         sc.setParameters(\"network\", networkId);\n         sc.setParameters(\"instance\", instanceId);",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/com/cloud/vm/dao/NicDaoImpl.java",
                "sha": "fa30168bf863485f86b0792274ff7e4109610bf9",
                "status": "modified"
            },
            {
                "additions": 133,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/org/apache/cloudstack/lb/ApplicationLoadBalancerRuleVO.java",
                "changes": 133,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/org/apache/cloudstack/lb/ApplicationLoadBalancerRuleVO.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "engine/schema/src/org/apache/cloudstack/lb/ApplicationLoadBalancerRuleVO.java",
                "patch": "@@ -0,0 +1,133 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.lb;\n+\n+import javax.persistence.Column;\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.PrimaryKeyJoinColumn;\n+import javax.persistence.Table;\n+\n+import org.apache.cloudstack.network.lb.ApplicationLoadBalancerRule;\n+\n+import com.cloud.network.rules.FirewallRuleVO;\n+import com.cloud.utils.net.Ip;\n+import com.cloud.utils.net.NetUtils;\n+\n+/**\n+ * This VO represent Internal Load Balancer rule.\n+ * Instead of pointing to the public ip address id directly as External Load Balancer rule does, it refers to the ip address by its value/sourceNetworkid\n+ *\n+ */\n+@Entity\n+@Table(name=(\"load_balancing_rules\"))\n+@DiscriminatorValue(value=\"LoadBalancing\")\n+@PrimaryKeyJoinColumn(name=\"id\")\n+public class ApplicationLoadBalancerRuleVO extends FirewallRuleVO implements ApplicationLoadBalancerRule{\n+    @Column(name=\"name\")\n+    private String name;\n+\n+    @Column(name=\"description\", length=4096)\n+    private String description;\n+\n+    @Column(name=\"algorithm\")\n+    private String algorithm;\n+\n+    @Column(name=\"default_port_start\")\n+    private int defaultPortStart;\n+    \n+    @Column(name=\"default_port_end\")\n+    private int defaultPortEnd;\n+    \n+    @Column(name=\"source_ip_address_network_id\")\n+    Long sourceIpNetworkId;\n+    \n+    @Column(name=\"source_ip_address\")\n+    @Enumerated(value=EnumType.STRING)\n+    private Ip sourceIp = null;\n+    \n+    @Enumerated(value=EnumType.STRING)\n+    @Column(name=\"scheme\")\n+    Scheme scheme;\n+\n+\n+    public ApplicationLoadBalancerRuleVO() {  \n+    }\n+    \n+    public ApplicationLoadBalancerRuleVO(String name, String description, int srcPort, int instancePort, String algorithm,\n+            long networkId, long accountId, long domainId, Ip sourceIp, long sourceIpNtwkId, Scheme scheme) {\n+        super(null, null, srcPort, srcPort, NetUtils.TCP_PROTO, networkId, accountId, domainId, Purpose.LoadBalancing, null, null,null, null, null);\n+        \n+        this.name = name;\n+        this.description = description;\n+        this.algorithm = algorithm;\n+        this.defaultPortStart = instancePort;\n+        this.defaultPortEnd = instancePort;\n+        this.sourceIp = sourceIp;\n+        this.sourceIpNetworkId = sourceIpNtwkId;\n+        this.scheme = scheme;\n+    }\n+    \n+    \n+    @Override\n+    public Long getSourceIpNetworkId() {\n+        return sourceIpNetworkId;\n+    }\n+\n+    @Override\n+    public Ip getSourceIp() {\n+        return sourceIp;\n+    }\n+    \n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    @Override\n+    public String getAlgorithm() {\n+        return algorithm;\n+    }\n+\n+    @Override\n+    public int getDefaultPortStart() {\n+        return defaultPortStart;\n+    }\n+\n+    @Override\n+    public int getDefaultPortEnd() {\n+        return defaultPortEnd;\n+    }\n+\n+    @Override\n+    public Scheme getScheme() {\n+        return scheme;\n+    }\n+\n+    @Override\n+    public int getInstancePort() {\n+        return defaultPortStart;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/org/apache/cloudstack/lb/ApplicationLoadBalancerRuleVO.java",
                "sha": "37a747e42722696e516d9e705baaa4cbde1c4905",
                "status": "added"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/org/apache/cloudstack/lb/dao/ApplicationLoadBalancerRuleDao.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/org/apache/cloudstack/lb/dao/ApplicationLoadBalancerRuleDao.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "engine/schema/src/org/apache/cloudstack/lb/dao/ApplicationLoadBalancerRuleDao.java",
                "patch": "@@ -0,0 +1,35 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+// \n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.lb.dao;\n+\n+import java.util.List;\n+\n+import org.apache.cloudstack.lb.ApplicationLoadBalancerRuleVO;\n+\n+import com.cloud.network.rules.LoadBalancerContainer.Scheme;\n+import com.cloud.utils.db.GenericDao;\n+import com.cloud.utils.net.Ip;\n+\n+public interface ApplicationLoadBalancerRuleDao extends GenericDao<ApplicationLoadBalancerRuleVO, Long>{\n+    List<ApplicationLoadBalancerRuleVO> listBySrcIpSrcNtwkId(Ip sourceIp, long sourceNetworkId);\n+    List<String> listLbIpsBySourceIpNetworkId(long sourceIpNetworkId);\n+    long countBySourceIp(Ip sourceIp, long sourceIpNetworkId);\n+    List<ApplicationLoadBalancerRuleVO> listBySourceIpAndNotRevoked(Ip sourceIp, long sourceNetworkId);\n+    List<String> listLbIpsBySourceIpNetworkIdAndScheme(long sourceIpNetworkId, Scheme scheme);\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/org/apache/cloudstack/lb/dao/ApplicationLoadBalancerRuleDao.java",
                "sha": "c385e62f6abaa0057a1f4228cd6093998f3c88ce",
                "status": "added"
            },
            {
                "additions": 115,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/org/apache/cloudstack/lb/dao/ApplicationLoadBalancerRuleDaoImpl.java",
                "changes": 115,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/org/apache/cloudstack/lb/dao/ApplicationLoadBalancerRuleDaoImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "engine/schema/src/org/apache/cloudstack/lb/dao/ApplicationLoadBalancerRuleDaoImpl.java",
                "patch": "@@ -0,0 +1,115 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.lb.dao;\n+\n+import java.util.List;\n+\n+import javax.ejb.Local;\n+\n+import org.apache.cloudstack.lb.ApplicationLoadBalancerRuleVO;\n+import org.springframework.stereotype.Component;\n+\n+import com.cloud.network.rules.FirewallRule;\n+import com.cloud.network.rules.LoadBalancerContainer.Scheme;\n+import com.cloud.utils.db.GenericDaoBase;\n+import com.cloud.utils.db.GenericSearchBuilder;\n+import com.cloud.utils.db.SearchBuilder;\n+import com.cloud.utils.db.SearchCriteria;\n+import com.cloud.utils.db.SearchCriteria.Func;\n+import com.cloud.utils.db.SearchCriteria.Op;\n+import com.cloud.utils.net.Ip;\n+\n+@Component\n+@Local(value = { ApplicationLoadBalancerRuleDao.class })\n+public class ApplicationLoadBalancerRuleDaoImpl extends GenericDaoBase<ApplicationLoadBalancerRuleVO, Long> implements ApplicationLoadBalancerRuleDao{\n+    protected final SearchBuilder<ApplicationLoadBalancerRuleVO> AllFieldsSearch;\n+    final GenericSearchBuilder<ApplicationLoadBalancerRuleVO, String> listIps;\n+    final GenericSearchBuilder<ApplicationLoadBalancerRuleVO, Long> CountBy;\n+    protected final SearchBuilder<ApplicationLoadBalancerRuleVO> NotRevokedSearch;\n+\n+\n+    \n+    protected ApplicationLoadBalancerRuleDaoImpl() {\n+        AllFieldsSearch = createSearchBuilder();\n+        AllFieldsSearch.and(\"sourceIp\", AllFieldsSearch.entity().getSourceIp(), SearchCriteria.Op.EQ);\n+        AllFieldsSearch.and(\"sourceIpNetworkId\", AllFieldsSearch.entity().getSourceIpNetworkId(), SearchCriteria.Op.EQ);\n+        AllFieldsSearch.and(\"networkId\", AllFieldsSearch.entity().getNetworkId(), SearchCriteria.Op.EQ);\n+        AllFieldsSearch.and(\"scheme\", AllFieldsSearch.entity().getScheme(), SearchCriteria.Op.EQ);\n+        AllFieldsSearch.done();\n+        \n+        listIps = createSearchBuilder(String.class);\n+        listIps.select(null, Func.DISTINCT, listIps.entity().getSourceIp());\n+        listIps.and(\"sourceIpNetworkId\", listIps.entity().getSourceIpNetworkId(), Op.EQ);\n+        listIps.and(\"scheme\", listIps.entity().getScheme(), Op.EQ);\n+        listIps.done();\n+        \n+        CountBy = createSearchBuilder(Long.class);\n+        CountBy.select(null, Func.COUNT, CountBy.entity().getId());\n+        CountBy.and(\"sourceIp\", CountBy.entity().getSourceIp(), Op.EQ);\n+        CountBy.and(\"sourceIpNetworkId\", CountBy.entity().getSourceIpNetworkId(), Op.EQ);\n+        CountBy.done();\n+        \n+        NotRevokedSearch = createSearchBuilder();\n+        NotRevokedSearch.and(\"sourceIp\", NotRevokedSearch.entity().getSourceIp(), SearchCriteria.Op.EQ);\n+        NotRevokedSearch.and(\"sourceIpNetworkId\", NotRevokedSearch.entity().getSourceIpNetworkId(), SearchCriteria.Op.EQ);\n+        NotRevokedSearch.and(\"state\", NotRevokedSearch.entity().getState(), SearchCriteria.Op.NEQ);\n+        NotRevokedSearch.done();\n+    }\n+\n+    @Override\n+    public List<ApplicationLoadBalancerRuleVO> listBySrcIpSrcNtwkId(Ip sourceIp, long sourceNetworkId) {\n+        SearchCriteria<ApplicationLoadBalancerRuleVO> sc = AllFieldsSearch.create();\n+        sc.setParameters(\"sourceIp\", sourceIp);\n+        sc.setParameters(\"sourceIpNetworkId\", sourceNetworkId);\n+        return listBy(sc);\n+    }\n+\n+    @Override\n+    public List<String> listLbIpsBySourceIpNetworkId(long sourceIpNetworkId) {\n+        SearchCriteria<String> sc = listIps.create();\n+        sc.setParameters(\"sourceIpNetworkId\", sourceIpNetworkId);\n+        return customSearch(sc, null);\n+    }\n+\n+    @Override\n+    public long countBySourceIp(Ip sourceIp, long sourceIpNetworkId) {\n+        SearchCriteria<Long> sc = CountBy.create();\n+        sc.setParameters(\"sourceIp\", sourceIp);\n+        sc.setParameters(\"sourceIpNetworkId\", sourceIpNetworkId);\n+        List<Long> results = customSearch(sc, null);\n+        return results.get(0);\n+    }\n+\n+    @Override\n+    public List<ApplicationLoadBalancerRuleVO> listBySourceIpAndNotRevoked(Ip sourceIp, long sourceNetworkId) {\n+        SearchCriteria<ApplicationLoadBalancerRuleVO> sc = NotRevokedSearch.create();\n+        sc.setParameters(\"sourceIp\", sourceIp);\n+        sc.setParameters(\"sourceIpNetworkId\", sourceNetworkId);\n+        sc.setParameters(\"state\", FirewallRule.State.Revoke);\n+        return listBy(sc);\n+    }\n+\n+    @Override\n+    public List<String> listLbIpsBySourceIpNetworkIdAndScheme(long sourceIpNetworkId, Scheme scheme) {\n+        SearchCriteria<String> sc = listIps.create();\n+        sc.setParameters(\"sourceIpNetworkId\", sourceIpNetworkId);\n+        sc.setParameters(\"scheme\", scheme);\n+        return customSearch(sc, null);\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/engine/schema/src/org/apache/cloudstack/lb/dao/ApplicationLoadBalancerRuleDaoImpl.java",
                "sha": "880c67e732cd63b8fb9071d9fc2405f54d57577a",
                "status": "added"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/patches/systemvm/debian/config/etc/init.d/cloud-early-config",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/patches/systemvm/debian/config/etc/init.d/cloud-early-config?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "patches/systemvm/debian/config/etc/init.d/cloud-early-config",
                "patch": "@@ -901,6 +901,28 @@ setup_elbvm() {\n   chkconfig portmap off\n }\n \n+setup_ilbvm() {\n+  log_it \"Setting up Internal Load Balancer system vm\"\n+  local hyp=$1\n+  setup_common eth0 eth1\n+  #eth0 = guest network, eth1=control network\n+\n+  sed -i  /$NAME/d /etc/hosts\n+  echo \"$ETH0_IP $NAME\" >> /etc/hosts\n+\n+  cp /etc/iptables/iptables-ilbvm /etc/iptables/rules.v4\n+  cp /etc/iptables/iptables-ilbvm /etc/iptables/rules\n+  setup_sshd $ETH1_IP \"eth1\"\n+  \n+  enable_fwding 0\n+  enable_svc haproxy 1\n+  enable_svc dnsmasq 0\n+  enable_svc cloud-passwd-srvr 0\n+  enable_svc cloud 0\n+  chkconfig nfs-common off\n+  chkconfig portmap off\n+}\n+\n setup_default() {\n   cat > /etc/network/interfaces << EOF\n auto lo\n@@ -951,6 +973,10 @@ start() {\n          [ \"$NAME\" == \"\" ] && NAME=elb\n          setup_elbvm\n \t  ;;\n+     ilbvm)\n+         [ \"$NAME\" == \"\" ] && NAME=ilb\n+         setup_ilbvm\n+\t  ;;\n      unknown)\n          [ \"$NAME\" == \"\" ] && NAME=systemvm\n          setup_default;",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/patches/systemvm/debian/config/etc/init.d/cloud-early-config",
                "sha": "a457f228653a800151c3e44b5b62a6b8fd64115d",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/patches/systemvm/debian/config/etc/iptables/iptables-ilbvm",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/patches/systemvm/debian/config/etc/iptables/iptables-ilbvm?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "patches/systemvm/debian/config/etc/iptables/iptables-ilbvm",
                "patch": "@@ -0,0 +1,33 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+# \n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+*nat\n+:PREROUTING ACCEPT [0:0]\n+:POSTROUTING ACCEPT [0:0]\n+:OUTPUT ACCEPT [0:0]\n+COMMIT\n+*filter\n+:INPUT DROP [0:0]\n+:FORWARD DROP [0:0]\n+:OUTPUT ACCEPT [0:0]\n+-A INPUT -i eth0 -m state --state RELATED,ESTABLISHED -j ACCEPT\n+-A INPUT -i eth1 -m state --state RELATED,ESTABLISHED -j ACCEPT\n+-A INPUT -p icmp -j ACCEPT\n+-A INPUT -i lo -j ACCEPT\n+-A INPUT -i eth1 -p tcp -m state --state NEW --dport 3922 -j ACCEPT\n+COMMIT\n+",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/patches/systemvm/debian/config/etc/iptables/iptables-ilbvm",
                "sha": "8d5ca651c7549bd36d86da1645d3bbfa2cb9e219",
                "status": "added"
            },
            {
                "additions": 211,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/patches/systemvm/debian/config/opt/cloud/bin/ilb.sh",
                "changes": 211,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/patches/systemvm/debian/config/opt/cloud/bin/ilb.sh?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "patches/systemvm/debian/config/opt/cloud/bin/ilb.sh",
                "patch": "@@ -0,0 +1,211 @@\n+#!/usr/bin/env bash\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+source /root/func.sh\n+\n+lock=\"biglock\"\n+locked=$(getLockFile $lock)\n+if [ \"$locked\" != \"1\" ]\n+then\n+    exit 1\n+fi\n+\n+usage() {\n+  printf \"Usage: %s:  -a <added public ip address ip:port> -d <removed ip:port> -f <load balancer config> -s <stats ip ip:port:cidr>  \\n\" $(basename $0) >&2\n+}\n+\n+#set -x\n+\n+fw_remove_backup() {\n+  logger -t cloud \"$(basename $0): Entering fw_remove_backup\"\n+  local lb_vif_list=eth0\n+  for vif in $lb_vif_list; do \n+    sudo iptables -F back_load_balancer_$vif 2> /dev/null\n+    sudo iptables -D INPUT -i $vif -p tcp  -j back_load_balancer_$vif 2> /dev/null\n+    sudo iptables -X back_load_balancer_$vif 2> /dev/null\n+  done\n+  sudo iptables -F back_lb_stats 2> /dev/null\n+  sudo iptables -D INPUT -p tcp  -j back_lb_stats 2> /dev/null\n+  sudo iptables -X back_lb_stats 2> /dev/null\n+}\n+\n+fw_restore() {\n+  logger -t cloud \"$(basename $0): Entering fw_restore\"\n+  local lb_vif_list=\"eth0\"\n+  for vif in $lb_vif_list; do \n+    sudo iptables -F load_balancer_$vif 2> /dev/null\n+    sudo iptables -D INPUT -i $vif -p tcp  -j load_balancer_$vif 2> /dev/null\n+    sudo iptables -X load_balancer_$vif 2> /dev/null\n+    sudo iptables -E back_load_balancer_$vif load_balancer_$vif 2> /dev/null\n+  done\n+  sudo iptables -F lb_stats 2> /dev/null\n+  sudo iptables -D INPUT -p tcp  -j lb_stats 2> /dev/null\n+  sudo iptables -X lb_stats 2> /dev/null\n+  sudo iptables -E back_lb_stats lb_stats 2> /dev/null\n+}\n+\n+# firewall entry to ensure that haproxy can receive on specified port\n+fw_entry() {\n+  logger -t cloud \"$(basename $0): Entering fw_entry\"\n+  local added=$1\n+  local removed=$2\n+  local stats=$3\n+  \n+  if [ \"$added\" == \"none\" ]\n+  then\n+  \tadded=\"\"\n+  fi\n+  \n+  if [ \"$removed\" == \"none\" ]\n+  then\n+  \tremoved=\"\"\n+  fi\n+  \n+  local a=$(echo $added | cut -d, -f1- --output-delimiter=\" \")\n+  local r=$(echo $removed | cut -d, -f1- --output-delimiter=\" \")\n+\n+# back up the iptable rules by renaming before creating new. \n+  local lb_vif_list=eth0\n+  for vif in $lb_vif_list; do \n+    sudo iptables -E load_balancer_$vif back_load_balancer_$vif 2> /dev/null\n+    sudo iptables -N load_balancer_$vif 2> /dev/null\n+    sudo iptables -A INPUT -i $vif -p tcp  -j load_balancer_$vif\n+  done\n+  sudo iptables -E lb_stats back_lb_stats 2> /dev/null\n+  sudo iptables -N lb_stats 2> /dev/null\n+  sudo iptables -A INPUT  -p tcp  -j lb_stats\n+\n+  for i in $a\n+  do\n+    local pubIp=$(echo $i | cut -d: -f1)\n+    local dport=$(echo $i | cut -d: -f2)    \n+    local lb_vif_list=\"eth0\"\n+    for vif in $lb_vif_list; do \n+      sudo iptables -A load_balancer_$vif  -p tcp -d $pubIp --dport $dport -j ACCEPT\n+      if [ $? -gt 0 ]\n+      then\n+        return 1\n+      fi\n+    done      \n+  done\n+  local pubIp=$(echo $stats | cut -d: -f1)\n+  local dport=$(echo $stats | cut -d: -f2)    \n+  local cidrs=$(echo $stats | cut -d: -f3 | sed 's/-/,/')\n+  sudo iptables -A lb_stats -s $cidrs -p tcp -m state --state NEW -d $pubIp --dport $dport -j ACCEPT\n+ \n+  return 0\n+}\n+\n+#Hot reconfigure HA Proxy in the routing domain\n+reconfig_lb() {\n+  /root/reconfigLB.sh\n+  return $?\n+}\n+\n+# Restore the HA Proxy to its previous state, and revert iptables rules on loadbalancer\n+restore_lb() {\n+  logger -t cloud \"Restoring HA Proxy to previous state\"\n+  # Copy the old version of haproxy.cfg into the file that reconfigLB.sh uses\n+  cp /etc/haproxy/haproxy.cfg.old /etc/haproxy/haproxy.cfg.new\n+   \n+  if [ $? -eq 0 ]\n+  then\n+    # Run reconfigLB.sh again\n+    /root/reconfigLB.sh\n+  fi\n+}\n+\n+\n+logger -t cloud \"$(basename $0): Entering $(dirname $0)/$(basename $0)\"\n+\n+iflag=\n+aflag=\n+dflag=\n+sflag=\n+\n+while getopts 'i:a:d:s:' OPTION\n+do\n+  case $OPTION in\n+  i)\tiflag=1\n+\t\tdomRIp=\"$OPTARG\" #unused but passed in\n+\t\t;;\n+  a)\taflag=1\n+\t\taddedIps=\"$OPTARG\"\n+\t\t;;\n+  d)\tdflag=1\n+\t\tremovedIps=\"$OPTARG\"\n+\t\t;;\n+\n+  s)\tsflag=1\n+\t\tstatsIp=\"$OPTARG\"\n+\t\t;;\n+  ?)\tusage\n+                unlock_exit 2 $lock $locked\n+\t\t;;\n+  esac\n+done\n+\n+if [[ \"$aflag$dflag\" != \"1\" && \"$aflag$dflag\" != \"11\" ]]\n+then\n+   usage\n+   unlock_exit 2 $lock $locked\n+fi\n+\n+if [ \"$addedIps\" == \"\" ]\n+then\n+  addedIps=\"none\"\n+fi\n+\n+\n+if [ \"$removedIps\" == \"\" ]\n+then\n+  removedIps=\"none\"\n+fi\n+\n+\n+# hot reconfigure haproxy\n+reconfig_lb $cfgfile\n+\n+if [ $? -gt 0 ]\n+then\n+  logger -t cloud \"Reconfiguring ilb failed\"\n+  unlock_exit 1 $lock $locked\n+fi\n+\n+logger -t cloud \"HAProxy reconfigured successfully, configuring firewall\"\n+\n+# iptables entry to ensure that haproxy receives traffic\n+fw_entry $addedIps $removedIps $statsIp\n+  \t\n+if [ $? -gt 0 ]\n+then\n+  logger -t cloud \"Failed to apply firewall rules for internal load balancing, reverting HA Proxy config\"\n+  # Restore the LB\n+  restore_lb\n+\n+  logger -t cloud \"Reverting firewall config\"\n+  fw_restore\n+\n+  unlock_exit 1 $lock $locked\n+else\n+  # Remove backedup iptable rules\n+  logger -t cloud \"Firewall configured successfully, deleting backup firewall config\"\n+  fw_remove_backup\n+fi\n+ \n+unlock_exit 0 $lock $locked",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/patches/systemvm/debian/config/opt/cloud/bin/ilb.sh",
                "sha": "2a298925be325241da0be7a664af360f725c30f9",
                "status": "added"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/patches/systemvm/debian/config/opt/cloud/bin/patchsystemvm.sh",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/patches/systemvm/debian/config/opt/cloud/bin/patchsystemvm.sh?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "patches/systemvm/debian/config/opt/cloud/bin/patchsystemvm.sh",
                "patch": "@@ -135,6 +135,19 @@ elbvm_svcs() {\n    echo \"cloud dnsmasq cloud-passwd-srvr apache2 nfs-common portmap\" > /var/cache/cloud/disabled_svcs\n }\n \n+\n+ilbvm_svcs() {\n+   chkconfig cloud off\n+   chkconfig haproxy on ; \n+   chkconfig ssh on\n+   chkconfig nfs-common off\n+   chkconfig portmap off\n+   chkconfig keepalived off\n+   chkconfig conntrackd off\n+   echo \"ssh haproxy\" > /var/cache/cloud/enabled_svcs\n+   echo \"cloud dnsmasq cloud-passwd-srvr apache2 nfs-common portmap\" > /var/cache/cloud/disabled_svcs\n+}\n+\n enable_pcihotplug() {\n    sed -i -e \"/acpiphp/d\" /etc/modules\n    sed -i -e \"/pci_hotplug/d\" /etc/modules\n@@ -253,4 +266,14 @@ then\n   fi\n fi\n \n+if [ \"$TYPE\" == \"ilbvm\" ]\n+then\n+  ilbvm_svcs\n+  if [ $? -gt 0 ]\n+  then\n+    printf \"Failed to execute ilbvm svcs\\n\" >$logfile\n+    exit 9\n+  fi\n+fi\n+\n exit $?",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/patches/systemvm/debian/config/opt/cloud/bin/patchsystemvm.sh",
                "sha": "9cb02502ef1ee588e4791ca1536df05796e6b43b",
                "status": "modified"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/patches/systemvm/debian/config/opt/cloud/bin/vpc_loadbalancer.sh",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/patches/systemvm/debian/config/opt/cloud/bin/vpc_loadbalancer.sh?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "patches/systemvm/debian/config/opt/cloud/bin/vpc_loadbalancer.sh",
                "patch": "@@ -18,6 +18,29 @@\n \n # @VERSION@\n \n+do_ilb_if_ilb () {\n+  local typ=\"\"\n+  local pattern=\"type=(.*)\"\n+\n+  for keyval in $(cat /var/cache/cloud/cmdline)\n+  do    \n+     if [[ $keyval =~ $pattern ]]; then      \n+        typ=${BASH_REMATCH[1]}; \n+     fi \n+  done\n+  if [ \"$typ\" == \"ilbvm\" ]\n+  then\n+     logger -t cloud \"$(basename $0): Detected that we are running in an internal load balancer vm\"\n+     $(dirname $0)/ilb.sh \"$@\"\n+     exit $?\n+  fi\n+\n+}\n+\n+logger -t cloud \"$(basename $0): Entering $(dirname $0)/$(basename $0)\"\n+\n+do_ilb_if_ilb \"$@\"\n+\n source /root/func.sh\n source /opt/cloud/bin/vpc_func.sh\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/patches/systemvm/debian/config/opt/cloud/bin/vpc_loadbalancer.sh",
                "sha": "36a2347a29790519dff309753f6132c7f16bfe5b",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/elastic-loadbalancer/src/com/cloud/network/element/ElasticLoadBalancerElement.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/elastic-loadbalancer/src/com/cloud/network/element/ElasticLoadBalancerElement.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 3,
                "filename": "plugins/network-elements/elastic-loadbalancer/src/com/cloud/network/element/ElasticLoadBalancerElement.java",
                "patch": "@@ -35,6 +35,7 @@\n import com.cloud.exception.ConcurrentOperationException;\n import com.cloud.exception.InsufficientCapacityException;\n import com.cloud.exception.ResourceUnavailableException;\n+import com.cloud.exception.UnsupportedServiceException;\n import com.cloud.network.Network;\n import com.cloud.network.Network.Capability;\n import com.cloud.network.Network.Provider;\n@@ -46,6 +47,7 @@\n import com.cloud.network.dao.NetworkDao;\n import com.cloud.network.lb.ElasticLoadBalancerManager;\n import com.cloud.network.lb.LoadBalancingRule;\n+import com.cloud.network.rules.LoadBalancerContainer;\n import com.cloud.offering.NetworkOffering;\n import com.cloud.offerings.dao.NetworkOfferingDao;\n import com.cloud.utils.component.AdapterBase;\n@@ -68,12 +70,25 @@\n     boolean _enabled;\n     TrafficType _frontEndTrafficType = TrafficType.Guest;\n     \n-    private boolean canHandle(Network network) {\n+    private boolean canHandle(Network network, List<LoadBalancingRule> rules) {\n         if (network.getGuestType() != Network.GuestType.Shared|| network.getTrafficType() != TrafficType.Guest) {\n             s_logger.debug(\"Not handling network with type  \" + network.getGuestType() + \" and traffic type \" + network.getTrafficType());\n             return false;\n         }\n         \n+        Map<Capability, String> lbCaps = this.getCapabilities().get(Service.Lb);\n+        if (!lbCaps.isEmpty()) {\n+            String schemeCaps = lbCaps.get(Capability.LbSchemes);\n+            if (schemeCaps != null) {\n+                for (LoadBalancingRule rule : rules) {\n+                    if (!schemeCaps.contains(rule.getScheme().toString())) {\n+                        s_logger.debug(\"Scheme \" + rules.get(0).getScheme() + \" is not supported by the provider \" + this.getName());\n+                        return false;\n+                    }\n+                }\n+            }\n+        }\n+        \n         return true;\n     }\n     \n@@ -94,6 +109,7 @@ public Provider getProvider() {\n         lbCapabilities.put(Capability.SupportedLBAlgorithms, \"roundrobin,leastconn,source\");\n         lbCapabilities.put(Capability.SupportedLBIsolation, \"shared\");\n         lbCapabilities.put(Capability.SupportedProtocols, \"tcp, udp\");\n+        lbCapabilities.put(Capability.LbSchemes, LoadBalancerContainer.Scheme.Public.toString());\n         \n         capabilities.put(Service.Lb, lbCapabilities);   \n         return capabilities;\n@@ -139,10 +155,10 @@ public boolean validateLBRule(Network network, LoadBalancingRule rule) {\n     \n     @Override\n     public boolean applyLBRules(Network network, List<LoadBalancingRule> rules) throws ResourceUnavailableException {\n-        if (!canHandle(network)) {\n+        if (!canHandle(network, rules)) {\n             return false;\n         }\n-        \n+                \n         return _lbMgr.applyLoadBalancerRules(network, rules);\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/elastic-loadbalancer/src/com/cloud/network/element/ElasticLoadBalancerElement.java",
                "sha": "8b1b4140a8d78bb7a659ed7b32521db018fe748b",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/elastic-loadbalancer/src/com/cloud/network/lb/ElasticLoadBalancerManager.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/elastic-loadbalancer/src/com/cloud/network/lb/ElasticLoadBalancerManager.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 2,
                "filename": "plugins/network-elements/elastic-loadbalancer/src/com/cloud/network/lb/ElasticLoadBalancerManager.java",
                "patch": "@@ -19,11 +19,11 @@\n import java.util.List;\n \n import org.apache.cloudstack.api.command.user.loadbalancer.CreateLoadBalancerRuleCmd;\n+\n import com.cloud.exception.InsufficientAddressCapacityException;\n import com.cloud.exception.NetworkRuleConflictException;\n import com.cloud.exception.ResourceUnavailableException;\n import com.cloud.network.Network;\n-import com.cloud.network.rules.FirewallRule;\n import com.cloud.network.rules.LoadBalancer;\n import com.cloud.user.Account;\n \n@@ -32,7 +32,7 @@\n     public static final int DEFAULT_ELB_VM_CPU_MHZ = 256;               // 500 MHz\n \n     public boolean applyLoadBalancerRules(Network network, \n-            List<? extends FirewallRule> rules) \n+            List<LoadBalancingRule> rules) \n             throws ResourceUnavailableException;\n \n     public LoadBalancer handleCreateLoadBalancerRule(CreateLoadBalancerRuleCmd lb, Account caller, long networkId) throws InsufficientAddressCapacityException, NetworkRuleConflictException;",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/elastic-loadbalancer/src/com/cloud/network/lb/ElasticLoadBalancerManager.java",
                "sha": "cce2b2c23c1e6d6fe11fa058c532aeaaaf1e1556",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/elastic-loadbalancer/src/com/cloud/network/lb/ElasticLoadBalancerManagerImpl.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/elastic-loadbalancer/src/com/cloud/network/lb/ElasticLoadBalancerManagerImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 15,
                "filename": "plugins/network-elements/elastic-loadbalancer/src/com/cloud/network/lb/ElasticLoadBalancerManagerImpl.java",
                "patch": "@@ -102,7 +102,6 @@\n import com.cloud.network.router.VirtualRouter.Role;\n import com.cloud.network.router.VpcVirtualNetworkApplianceManager;\n import com.cloud.network.rules.FirewallRule;\n-import com.cloud.network.rules.FirewallRule.Purpose;\n import com.cloud.network.rules.LoadBalancer;\n import com.cloud.offering.NetworkOffering;\n import com.cloud.offering.ServiceOffering;\n@@ -118,14 +117,14 @@\n import com.cloud.user.dao.AccountDao;\n import com.cloud.utils.NumbersUtil;\n import com.cloud.utils.Pair;\n-import com.cloud.utils.component.Manager;\n import com.cloud.utils.component.ManagerBase;\n import com.cloud.utils.concurrency.NamedThreadFactory;\n import com.cloud.utils.db.DB;\n import com.cloud.utils.db.SearchBuilder;\n import com.cloud.utils.db.SearchCriteria;\n import com.cloud.utils.db.Transaction;\n import com.cloud.utils.exception.CloudRuntimeException;\n+import com.cloud.utils.net.Ip;\n import com.cloud.vm.DomainRouterVO;\n import com.cloud.vm.NicProfile;\n import com.cloud.vm.ReservationContext;\n@@ -297,8 +296,7 @@ private void createApplyLoadBalancingRulesCommands(\n             String protocol = rule.getProtocol();\n             String algorithm = rule.getAlgorithm();\n \n-            String elbIp = _networkModel.getIp(rule.getSourceIpAddressId()).getAddress()\n-                    .addr();\n+            String elbIp = rule.getSourceIp().addr();\n             int srcPort = rule.getSourcePortStart();\n             String uuid = rule.getUuid();\n             List<LbDestination> destinations = rule.getDestinations();\n@@ -331,8 +329,10 @@ protected boolean applyLBRules(DomainRouterVO elbVm,\n         return sendCommandsToRouter(elbVm, cmds);\n     }\n     \n-    protected DomainRouterVO findElbVmForLb(FirewallRule lb) {//TODO: use a table to lookup\n-        ElasticLbVmMapVO map = _elbVmMapDao.findOneByIp(lb.getSourceIpAddressId());\n+    protected DomainRouterVO findElbVmForLb(LoadBalancingRule lb) {//TODO: use a table to lookup\n+        Network ntwk = _networkModel.getNetwork(lb.getNetworkId());\n+        long sourceIpId = _networkModel.getPublicIpAddress(lb.getSourceIp().addr(), ntwk.getDataCenterId()).getId();\n+        ElasticLbVmMapVO map = _elbVmMapDao.findOneByIp(sourceIpId);\n         if (map == null) {\n             return null;\n         }\n@@ -342,15 +342,11 @@ protected DomainRouterVO findElbVmForLb(FirewallRule lb) {//TODO: use a table to\n \n     @Override\n     public boolean applyLoadBalancerRules(Network network,\n-            List<? extends FirewallRule> rules)\n+            List<LoadBalancingRule> rules)\n             throws ResourceUnavailableException {\n         if (rules == null || rules.isEmpty()) {\n             return true;\n         }\n-        if (rules.get(0).getPurpose() != Purpose.LoadBalancing) {\n-            s_logger.warn(\"ELB: Not handling non-LB firewall rules\");\n-            return false;\n-        }\n         \n         DomainRouterVO elbVm = findElbVmForLb(rules.get(0));\n                                                                           \n@@ -363,14 +359,16 @@ public boolean applyLoadBalancerRules(Network network,\n \n         if (elbVm.getState() == State.Running) {\n             //resend all rules for the public ip\n-            List<LoadBalancerVO> lbs = _lbDao.listByIpAddress(rules.get(0).getSourceIpAddressId());\n+            long sourceIpId = _networkModel.getPublicIpAddress(rules.get(0).getSourceIp().addr(), network.getDataCenterId()).getId();\n+            List<LoadBalancerVO> lbs = _lbDao.listByIpAddress(sourceIpId);\n             List<LoadBalancingRule> lbRules = new ArrayList<LoadBalancingRule>();\n             for (LoadBalancerVO lb : lbs) {\n                 List<LbDestination> dstList = _lbMgr.getExistingDestinations(lb.getId());\n                 List<LbStickinessPolicy> policyList = _lbMgr.getStickinessPolicies(lb.getId());\n                 List<LbHealthCheckPolicy> hcPolicyList = _lbMgr.getHealthCheckPolicies(lb.getId());\n+                Ip sourceIp = _networkModel.getPublicIpAddress(lb.getSourceIpAddressId()).getAddress();\n                 LoadBalancingRule loadBalancing = new LoadBalancingRule(\n-                        lb, dstList, policyList, hcPolicyList);\n+                        lb, dstList, policyList, hcPolicyList, sourceIp);\n                 lbRules.add(loadBalancing);\n             }\n             return applyLBRules(elbVm, lbRules, network.getId());\n@@ -656,7 +654,10 @@ public LoadBalancer handleCreateLoadBalancerRule(CreateLoadBalancerRuleCmd lb, A\n             LoadBalancer result = null;\n             try {\n                 lb.setSourceIpAddressId(ipId);\n-                result = _lbMgr.createLoadBalancer(lb, false);\n+                \n+                result = _lbMgr.createPublicLoadBalancer(lb.getXid(), lb.getName(), lb.getDescription(), \n+                        lb.getSourcePortStart(), lb.getDefaultPortStart(), ipId.longValue(), lb.getProtocol(),\n+                        lb.getAlgorithm(), false, UserContext.current());\n             } catch (NetworkRuleConflictException e) {\n                 s_logger.warn(\"Failed to create LB rule, not continuing with ELB deployment\");\n                 if (newIp) {\n@@ -943,7 +944,8 @@ public boolean finalizeCommandsOnStart(Commands cmds, VirtualMachineProfile<Doma\n             List<LbDestination> dstList = _lbMgr.getExistingDestinations(lb.getId());\n             List<LbStickinessPolicy> policyList = _lbMgr.getStickinessPolicies(lb.getId());\n             List<LbHealthCheckPolicy> hcPolicyList = _lbMgr.getHealthCheckPolicies(lb.getId());\n-            LoadBalancingRule loadBalancing = new LoadBalancingRule(lb, dstList, policyList, hcPolicyList);\n+            Ip sourceIp = _networkModel.getPublicIpAddress(lb.getSourceIpAddressId()).getAddress();\n+            LoadBalancingRule loadBalancing = new LoadBalancingRule(lb, dstList, policyList, hcPolicyList, sourceIp);\n             lbRules.add(loadBalancing);\n         }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/elastic-loadbalancer/src/com/cloud/network/lb/ElasticLoadBalancerManagerImpl.java",
                "sha": "b21e8f9dba393d5c960e0b7b6fcf63b98fdde33d",
                "status": "modified"
            },
            {
                "additions": 70,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/f5/src/com/cloud/network/element/F5ExternalLoadBalancerElement.java",
                "changes": 87,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/f5/src/com/cloud/network/element/F5ExternalLoadBalancerElement.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 17,
                "filename": "plugins/network-elements/f5/src/com/cloud/network/element/F5ExternalLoadBalancerElement.java",
                "patch": "@@ -16,9 +16,30 @@\n // under the License.\n package com.cloud.network.element;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.ejb.Local;\n+import javax.inject.Inject;\n+\n+import org.apache.cloudstack.api.response.ExternalLoadBalancerResponse;\n+import org.apache.cloudstack.network.ExternalNetworkDeviceManager.NetworkDevice;\n+import org.apache.log4j.Logger;\n+\n import com.cloud.agent.api.to.LoadBalancerTO;\n import com.cloud.api.ApiDBUtils;\n-import com.cloud.api.commands.*;\n+import com.cloud.api.commands.AddExternalLoadBalancerCmd;\n+import com.cloud.api.commands.AddF5LoadBalancerCmd;\n+import com.cloud.api.commands.ConfigureF5LoadBalancerCmd;\n+import com.cloud.api.commands.DeleteExternalLoadBalancerCmd;\n+import com.cloud.api.commands.DeleteF5LoadBalancerCmd;\n+import com.cloud.api.commands.ListExternalLoadBalancersCmd;\n+import com.cloud.api.commands.ListF5LoadBalancerNetworksCmd;\n+import com.cloud.api.commands.ListF5LoadBalancersCmd;\n import com.cloud.api.response.F5LoadBalancerResponse;\n import com.cloud.configuration.Config;\n import com.cloud.configuration.ConfigurationManager;\n@@ -27,22 +48,41 @@\n import com.cloud.dc.DataCenterVO;\n import com.cloud.dc.dao.DataCenterDao;\n import com.cloud.deploy.DeployDestination;\n-import com.cloud.exception.*;\n+import com.cloud.exception.ConcurrentOperationException;\n+import com.cloud.exception.InsufficientCapacityException;\n+import com.cloud.exception.InsufficientNetworkCapacityException;\n+import com.cloud.exception.InvalidParameterValueException;\n+import com.cloud.exception.ResourceUnavailableException;\n import com.cloud.host.Host;\n import com.cloud.host.HostVO;\n import com.cloud.host.dao.HostDao;\n import com.cloud.host.dao.HostDetailsDao;\n-import com.cloud.network.*;\n+import com.cloud.network.ExternalLoadBalancerDeviceManager;\n+import com.cloud.network.ExternalLoadBalancerDeviceManagerImpl;\n+import com.cloud.network.Network;\n import com.cloud.network.Network.Capability;\n import com.cloud.network.Network.Provider;\n import com.cloud.network.Network.Service;\n+import com.cloud.network.NetworkModel;\n import com.cloud.network.Networks.TrafficType;\n-import com.cloud.network.dao.*;\n+import com.cloud.network.PhysicalNetwork;\n+import com.cloud.network.PhysicalNetworkServiceProvider;\n+import com.cloud.network.PublicIpAddress;\n+import com.cloud.network.dao.ExternalLoadBalancerDeviceDao;\n+import com.cloud.network.dao.ExternalLoadBalancerDeviceVO;\n import com.cloud.network.dao.ExternalLoadBalancerDeviceVO.LBDeviceState;\n+import com.cloud.network.dao.NetworkDao;\n+import com.cloud.network.dao.NetworkExternalLoadBalancerDao;\n+import com.cloud.network.dao.NetworkExternalLoadBalancerVO;\n+import com.cloud.network.dao.NetworkServiceMapDao;\n+import com.cloud.network.dao.NetworkVO;\n+import com.cloud.network.dao.PhysicalNetworkDao;\n+import com.cloud.network.dao.PhysicalNetworkVO;\n import com.cloud.network.lb.LoadBalancingRule;\n import com.cloud.network.resource.F5BigIpResource;\n import com.cloud.network.rules.LbStickinessMethod;\n import com.cloud.network.rules.LbStickinessMethod.StickinessMethodType;\n+import com.cloud.network.rules.LoadBalancerContainer;\n import com.cloud.offering.NetworkOffering;\n import com.cloud.utils.NumbersUtil;\n import com.cloud.utils.exception.CloudRuntimeException;\n@@ -51,13 +91,6 @@\n import com.cloud.vm.VirtualMachine;\n import com.cloud.vm.VirtualMachineProfile;\n import com.google.gson.Gson;\n-import org.apache.cloudstack.api.response.ExternalLoadBalancerResponse;\n-import org.apache.cloudstack.network.ExternalNetworkDeviceManager.NetworkDevice;\n-import org.apache.log4j.Logger;\n-\n-import javax.ejb.Local;\n-import javax.inject.Inject;\n-import java.util.*;\n \n @Local(value = {NetworkElement.class, LoadBalancingServiceProvider.class, IpDeployer.class})\n public class F5ExternalLoadBalancerElement extends ExternalLoadBalancerDeviceManagerImpl implements LoadBalancingServiceProvider, IpDeployer, F5ExternalLoadBalancerElementService, ExternalLoadBalancerDeviceManager {\n@@ -87,11 +120,25 @@\n     @Inject\n     ConfigurationDao _configDao;\n \n-    private boolean canHandle(Network config) {\n+    private boolean canHandle(Network config, List<LoadBalancingRule> rules) {\n         if ((config.getGuestType() != Network.GuestType.Isolated && config.getGuestType() != Network.GuestType.Shared) || config.getTrafficType() != TrafficType.Guest) {\n+\n             s_logger.trace(\"Not handling network with Type  \" + config.getGuestType() + \" and traffic type \" + config.getTrafficType());\n             return false;\n         }\n+        \n+        Map<Capability, String> lbCaps = this.getCapabilities().get(Service.Lb);\n+        if (!lbCaps.isEmpty()) {\n+            String schemeCaps = lbCaps.get(Capability.LbSchemes);\n+            if (schemeCaps != null && rules != null && !rules.isEmpty()) {\n+                for (LoadBalancingRule rule : rules) {\n+                    if (!schemeCaps.contains(rule.getScheme().toString())) {\n+                        s_logger.debug(\"Scheme \" + rules.get(0).getScheme() + \" is not supported by the provider \" + this.getName());\n+                        return false;\n+                    }\n+                }\n+            }\n+        }\n \n         return (_networkManager.isProviderForNetwork(getProvider(), config.getId()) && _ntwkSrvcDao.canProviderSupportServiceInNetwork(config.getId(), Service.Lb, Network.Provider.F5BigIp));\n     }\n@@ -100,7 +147,7 @@ private boolean canHandle(Network config) {\n     public boolean implement(Network guestConfig, NetworkOffering offering, DeployDestination dest, ReservationContext context) throws ResourceUnavailableException, ConcurrentOperationException,\n     InsufficientNetworkCapacityException {\n \n-        if (!canHandle(guestConfig)) {\n+        if (!canHandle(guestConfig, null)) {\n             return false;\n         }\n \n@@ -124,7 +171,7 @@ public boolean release(Network config, NicProfile nic, VirtualMachineProfile<? e\n \n     @Override\n     public boolean shutdown(Network guestConfig, ReservationContext context, boolean cleanup) throws ResourceUnavailableException, ConcurrentOperationException {\n-        if (!canHandle(guestConfig)) {\n+        if (!canHandle(guestConfig, null)) {\n             return false;\n         }\n \n@@ -143,13 +190,16 @@ public boolean destroy(Network config, ReservationContext context) {\n \n     @Override\n     public boolean validateLBRule(Network network, LoadBalancingRule rule) {\n-        String algo = rule.getAlgorithm();\n-        return (algo.equals(\"roundrobin\") || algo.equals(\"leastconn\"));\n+        if (canHandle(network, new ArrayList<LoadBalancingRule>(Arrays.asList(rule)))) {\n+            String algo = rule.getAlgorithm();\n+            return (algo.equals(\"roundrobin\") || algo.equals(\"leastconn\"));\n+        }\n+        return true;\n     }\n \n     @Override\n     public boolean applyLBRules(Network config, List<LoadBalancingRule> rules) throws ResourceUnavailableException {\n-        if (!canHandle(config)) {\n+        if (!canHandle(config, rules)) {\n             return false;\n         }\n \n@@ -180,6 +230,9 @@ public boolean applyLBRules(Network config, List<LoadBalancingRule> rules) throw\n \n         // Support inline mode with firewall\n         lbCapabilities.put(Capability.InlineMode, \"true\");\n+        \n+        //support only for public lb\n+        lbCapabilities.put(Capability.LbSchemes, LoadBalancerContainer.Scheme.Public.toString());\n \n         LbStickinessMethod method;\n         List<LbStickinessMethod> methodList = new ArrayList<LbStickinessMethod>();",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/f5/src/com/cloud/network/element/F5ExternalLoadBalancerElement.java",
                "sha": "80b42e030d812403d43548345b75751ab804e881",
                "status": "modified"
            },
            {
                "additions": 50,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/internal-loadbalancer/pom.xml",
                "changes": 50,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/internal-loadbalancer/pom.xml?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "plugins/network-elements/internal-loadbalancer/pom.xml",
                "patch": "@@ -0,0 +1,50 @@\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements. See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership. The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License. You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied. See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <artifactId>cloud-plugin-network-internallb</artifactId>\n+  <name>Apache CloudStack Plugin - Network Internal Load Balancer</name>\n+  <parent>\n+    <groupId>org.apache.cloudstack</groupId>\n+    <artifactId>cloudstack-plugins</artifactId>\n+    <version>4.2.0-SNAPSHOT</version>\n+    <relativePath>../../pom.xml</relativePath>\n+  </parent>\n+  <build>\n+    <defaultGoal>install</defaultGoal>\n+    <sourceDirectory>src</sourceDirectory>\n+    <testSourceDirectory>test</testSourceDirectory>\n+    <resources>\n+      <resource>\n+        <directory>resources</directory>\n+        <includes>\n+          <include>**/*.xml</include>\n+        </includes>\n+      </resource>\n+    </resources>\n+    <testResources>\n+      <testResource>\n+        <directory>test/resources</directory>\n+          <excludes>\n+              <exclude>%regex[.*[0-9]*To[0-9]*.*Test.*]</exclude>\n+          </excludes>\n+      </testResource>\n+    </testResources>\n+  </build>\n+</project>",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/internal-loadbalancer/pom.xml",
                "sha": "48e664ee0e5184a597102457bbc3c06c108b2476",
                "status": "added"
            },
            {
                "additions": 548,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/internal-loadbalancer/src/org/apache/cloudstack/network/element/InternalLoadBalancerElement.java",
                "changes": 548,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/internal-loadbalancer/src/org/apache/cloudstack/network/element/InternalLoadBalancerElement.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "plugins/network-elements/internal-loadbalancer/src/org/apache/cloudstack/network/element/InternalLoadBalancerElement.java",
                "patch": "@@ -0,0 +1,548 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the \n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.network.element;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.ejb.Local;\n+import javax.inject.Inject;\n+\n+import org.apache.cloudstack.api.command.admin.internallb.ConfigureInternalLoadBalancerElementCmd;\n+import org.apache.cloudstack.api.command.admin.internallb.CreateInternalLoadBalancerElementCmd;\n+import org.apache.cloudstack.api.command.admin.internallb.ListInternalLoadBalancerElementsCmd;\n+import org.apache.cloudstack.lb.dao.ApplicationLoadBalancerRuleDao;\n+import org.apache.cloudstack.network.lb.InternalLoadBalancerVMManager;\n+import org.apache.log4j.Logger;\n+\n+import com.cloud.agent.api.to.LoadBalancerTO;\n+import com.cloud.configuration.ConfigurationManager;\n+import com.cloud.dc.DataCenter;\n+import com.cloud.dc.DataCenter.NetworkType;\n+import com.cloud.deploy.DeployDestination;\n+import com.cloud.exception.ConcurrentOperationException;\n+import com.cloud.exception.InsufficientCapacityException;\n+import com.cloud.exception.InvalidParameterValueException;\n+import com.cloud.exception.ResourceUnavailableException;\n+import com.cloud.network.Network;\n+import com.cloud.network.Network.Capability;\n+import com.cloud.network.Network.Provider;\n+import com.cloud.network.Network.Service;\n+import com.cloud.network.NetworkModel;\n+import com.cloud.network.Networks.TrafficType;\n+import com.cloud.network.PhysicalNetworkServiceProvider;\n+import com.cloud.network.PublicIpAddress;\n+import com.cloud.network.VirtualRouterProvider;\n+import com.cloud.network.VirtualRouterProvider.VirtualRouterProviderType;\n+import com.cloud.network.dao.NetworkServiceMapDao;\n+import com.cloud.network.dao.PhysicalNetworkServiceProviderDao;\n+import com.cloud.network.dao.VirtualRouterProviderDao;\n+import com.cloud.network.element.IpDeployer;\n+import com.cloud.network.element.LoadBalancingServiceProvider;\n+import com.cloud.network.element.NetworkElement;\n+import com.cloud.network.element.VirtualRouterElement;\n+import com.cloud.network.element.VirtualRouterProviderVO;\n+import com.cloud.network.lb.LoadBalancingRule;\n+import com.cloud.network.router.VirtualRouter;\n+import com.cloud.network.router.VirtualRouter.Role;\n+import com.cloud.network.rules.FirewallRule;\n+import com.cloud.network.rules.LoadBalancerContainer;\n+import com.cloud.network.rules.LoadBalancerContainer.Scheme;\n+import com.cloud.offering.NetworkOffering;\n+import com.cloud.user.Account;\n+import com.cloud.user.AccountManager;\n+import com.cloud.user.User;\n+import com.cloud.utils.component.AdapterBase;\n+import com.cloud.utils.db.SearchCriteria.Op;\n+import com.cloud.utils.db.SearchCriteria2;\n+import com.cloud.utils.db.SearchCriteriaService;\n+import com.cloud.utils.exception.CloudRuntimeException;\n+import com.cloud.utils.net.Ip;\n+import com.cloud.vm.DomainRouterVO;\n+import com.cloud.vm.NicProfile;\n+import com.cloud.vm.ReservationContext;\n+import com.cloud.vm.VirtualMachine;\n+import com.cloud.vm.VirtualMachineProfile;\n+import com.cloud.vm.dao.DomainRouterDao;\n+\n+@Local(value = {NetworkElement.class})\n+public class InternalLoadBalancerElement extends AdapterBase implements LoadBalancingServiceProvider, InternalLoadBalancerElementService, IpDeployer{\n+    private static final Logger s_logger = Logger.getLogger(InternalLoadBalancerElement.class);\n+    protected static final Map<Service, Map<Capability, String>> capabilities = setCapabilities();\n+    private static InternalLoadBalancerElement internalLbElement = null;\n+\n+    @Inject NetworkModel _ntwkModel;\n+    @Inject NetworkServiceMapDao _ntwkSrvcDao;\n+    @Inject DomainRouterDao _routerDao;\n+    @Inject VirtualRouterProviderDao _vrProviderDao;\n+    @Inject PhysicalNetworkServiceProviderDao _pNtwkSvcProviderDao;\n+    @Inject InternalLoadBalancerVMManager _internalLbMgr;\n+    @Inject ConfigurationManager _configMgr;\n+    @Inject AccountManager _accountMgr;\n+    @Inject ApplicationLoadBalancerRuleDao _appLbDao;\n+    \n+    protected InternalLoadBalancerElement() {\n+    }\n+    \n+    \n+    public static InternalLoadBalancerElement getInstance() {\n+        if ( internalLbElement == null) {\n+            internalLbElement = new InternalLoadBalancerElement();\n+        }\n+        return internalLbElement;\n+     }\n+    \n+    \n+    private boolean canHandle(Network config, Scheme lbScheme) {\n+        //works in Advance zone only\n+        DataCenter dc = _configMgr.getZone(config.getDataCenterId());\n+        if (dc.getNetworkType() != NetworkType.Advanced) {\n+            s_logger.trace(\"Not hanling zone of network type \" + dc.getNetworkType());\n+            return false;\n+        }\n+        if (config.getGuestType() != Network.GuestType.Isolated || config.getTrafficType() != TrafficType.Guest) {\n+            s_logger.trace(\"Not handling network with Type  \" + config.getGuestType() + \" and traffic type \" + config.getTrafficType());\n+            return false;\n+        }\n+        \n+        Map<Capability, String> lbCaps = this.getCapabilities().get(Service.Lb);\n+        if (!lbCaps.isEmpty()) {\n+            String schemeCaps = lbCaps.get(Capability.LbSchemes);\n+            if (schemeCaps != null && lbScheme != null) {\n+                if (!schemeCaps.contains(lbScheme.toString())) {\n+                    s_logger.debug(\"Scheme \" + lbScheme.toString() + \" is not supported by the provider \" + this.getName());\n+                    return false;\n+                }\n+            }\n+        }\n+        \n+        if (!_ntwkModel.isProviderSupportServiceInNetwork(config.getId(), Service.Lb, getProvider())) {\n+            s_logger.trace(\"Element \" + getProvider().getName() + \" doesn't support service \" + Service.Lb\n+                    + \" in the network \" + config);\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    \n+    @Override\n+    public Map<Service, Map<Capability, String>> getCapabilities() {\n+        return capabilities;\n+    }\n+\n+    \n+    @Override\n+    public Provider getProvider() {\n+        return Provider.InternalLbVm;\n+    }\n+\n+    \n+    @Override\n+    public boolean implement(Network network, NetworkOffering offering, DeployDestination dest, ReservationContext context)\n+            throws ConcurrentOperationException, ResourceUnavailableException,\n+            InsufficientCapacityException {\n+        \n+        if (!canHandle(network, null)) {\n+            s_logger.trace(\"No need to implement \" + this.getName());\n+            return true;\n+        }\n+        \n+        //1) Get all the Ips from the network having LB rules assigned\n+        List<String> ips = _appLbDao.listLbIpsBySourceIpNetworkIdAndScheme(network.getId(), Scheme.Internal);\n+        \n+        //2) Start those vms\n+        for (String ip : ips) {\n+            Ip sourceIp = new Ip(ip);\n+            List<? extends VirtualRouter> internalLbVms;\n+            try {\n+                internalLbVms = _internalLbMgr.deployInternalLbVm(network, sourceIp, dest, _accountMgr.getAccount(network.getAccountId()), null);\n+            } catch (InsufficientCapacityException e) {\n+                s_logger.warn(\"Failed to deploy element \" + this.getName() + \" for ip \" + sourceIp + \" due to:\", e);\n+                return false;\n+            } catch (ConcurrentOperationException e) {\n+                s_logger.warn(\"Failed to deploy element \" + this.getName() + \" for ip \" + sourceIp + \" due to:\", e);\n+                return false;\n+            }\n+            \n+            if (internalLbVms == null || internalLbVms.isEmpty()) {\n+                throw new ResourceUnavailableException(\"Can't deploy \" + this.getName() + \" to handle LB rules\",\n+                        DataCenter.class, network.getDataCenterId());\n+            }\n+        }\n+       \n+        return true;\n+    }\n+\n+    \n+    @Override\n+    public boolean prepare(Network network, NicProfile nic, VirtualMachineProfile<? extends VirtualMachine> vm, DeployDestination dest, ReservationContext context) throws ConcurrentOperationException,\n+            ResourceUnavailableException, InsufficientCapacityException {\n+        \n+        if (!canHandle(network, null)) {\n+            s_logger.trace(\"No need to prepare \" + this.getName());\n+            return true;\n+        }\n+        \n+        if (vm.getType() == VirtualMachine.Type.User) {\n+          //1) Get all the Ips from the network having LB rules assigned\n+            List<String> ips = _appLbDao.listLbIpsBySourceIpNetworkIdAndScheme(network.getId(), Scheme.Internal);\n+            \n+            //2) Start those vms\n+            for (String ip : ips) {\n+                Ip sourceIp = new Ip(ip);\n+                List<? extends VirtualRouter> internalLbVms;\n+                try {\n+                    internalLbVms = _internalLbMgr.deployInternalLbVm(network, sourceIp, dest, _accountMgr.getAccount(network.getAccountId()), null);\n+                } catch (InsufficientCapacityException e) {\n+                    s_logger.warn(\"Failed to deploy element \" + this.getName() + \" for ip \" + sourceIp + \" due to:\", e);\n+                    return false;\n+                } catch (ConcurrentOperationException e) {\n+                    s_logger.warn(\"Failed to deploy element \" + this.getName() + \" for ip \" + sourceIp +  \" due to:\", e);\n+                    return false;\n+                }\n+                \n+                if (internalLbVms == null || internalLbVms.isEmpty()) {\n+                    throw new ResourceUnavailableException(\"Can't deploy \" + this.getName() + \" to handle LB rules\",\n+                            DataCenter.class, network.getDataCenterId());\n+                }\n+            }\n+        }\n+        \n+        return true;\n+    }\n+\n+    @Override\n+    public boolean release(Network network, NicProfile nic, VirtualMachineProfile<? extends VirtualMachine> vm, ReservationContext context) throws ConcurrentOperationException, ResourceUnavailableException {\n+        return true;\n+    }\n+\n+    \n+    @Override\n+    public boolean shutdown(Network network, ReservationContext context, boolean cleanup) throws ConcurrentOperationException, ResourceUnavailableException {\n+        List<? extends VirtualRouter> internalLbVms = _routerDao.listByNetworkAndRole(network.getId(), Role.INTERNAL_LB_VM);\n+        if (internalLbVms == null || internalLbVms.isEmpty()) {\n+            return true;\n+        }\n+        boolean result = true;\n+        for (VirtualRouter internalLbVm : internalLbVms) {\n+            result = result && _internalLbMgr.destroyInternalLbVm(internalLbVm.getId(),\n+                    context.getAccount(), context.getCaller().getId());\n+            if (cleanup) {\n+                if (!result) {\n+                    s_logger.warn(\"Failed to stop internal lb element \" + internalLbVm + \", but would try to process clean up anyway.\");\n+                }\n+                result = (_internalLbMgr.destroyInternalLbVm(internalLbVm.getId(),\n+                        context.getAccount(), context.getCaller().getId()));\n+                if (!result) {\n+                    s_logger.warn(\"Failed to clean up internal lb element \" + internalLbVm);\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+\n+    \n+    @Override\n+    public boolean destroy(Network network, ReservationContext context) throws ConcurrentOperationException, ResourceUnavailableException {\n+        List<? extends VirtualRouter> internalLbVms = _routerDao.listByNetworkAndRole(network.getId(), Role.INTERNAL_LB_VM);\n+        if (internalLbVms == null || internalLbVms.isEmpty()) {\n+            return true;\n+        }\n+        boolean result = true;\n+        for (VirtualRouter internalLbVm : internalLbVms) {\n+            result = result && (_internalLbMgr.destroyInternalLbVm(internalLbVm.getId(),\n+                    context.getAccount(), context.getCaller().getId()));\n+        }\n+        return result;\n+    }\n+\n+    \n+    @Override\n+    public boolean isReady(PhysicalNetworkServiceProvider provider) {\n+        VirtualRouterProviderVO element = _vrProviderDao.findByNspIdAndType(provider.getId(), \n+                VirtualRouterProviderType.InternalLbVm);\n+        if (element == null) {\n+            return false;\n+        }\n+        return element.isEnabled();\n+    }\n+\n+    \n+    @Override\n+    public boolean shutdownProviderInstances(PhysicalNetworkServiceProvider provider, ReservationContext context)\n+            throws ConcurrentOperationException, ResourceUnavailableException {\n+        VirtualRouterProviderVO element = _vrProviderDao.findByNspIdAndType(provider.getId(), \n+                VirtualRouterProviderType.InternalLbVm);\n+        if (element == null) {\n+            return true;\n+        }\n+        long elementId = element.getId();\n+        List<DomainRouterVO> internalLbVms = _routerDao.listByElementId(elementId);\n+        boolean result = true;\n+        for (DomainRouterVO internalLbVm : internalLbVms) {\n+            result = result && (_internalLbMgr.destroyInternalLbVm(internalLbVm.getId(),\n+                    context.getAccount(), context.getCaller().getId()));\n+        }\n+        _vrProviderDao.remove(elementId);\n+        \n+        return result;\n+    }\n+\n+    \n+    @Override\n+    public boolean canEnableIndividualServices() {\n+        return true;\n+    }\n+\n+    \n+    @Override\n+    public boolean verifyServicesCombination(Set<Service> services) {\n+        return true;\n+    }\n+\n+    \n+    @Override\n+    public IpDeployer getIpDeployer(Network network) {\n+        return this;\n+    }\n+\n+    \n+    @Override\n+    public boolean applyLBRules(Network network, List<LoadBalancingRule> rules) throws ResourceUnavailableException {\n+        //1) Get Internal LB VMs to destroy\n+        Set<Ip> vmsToDestroy = getVmsToDestroy(rules);\n+        \n+        //2) Get rules to apply\n+        Map<Ip, List<LoadBalancingRule>> rulesToApply = getLbRulesToApply(rules);\n+        s_logger.debug(\"Applying \" + rulesToApply.size() + \" on element \" + this.getName());\n+\n+ \n+        for (Ip sourceIp : rulesToApply.keySet()) {\n+            if (vmsToDestroy.contains(sourceIp)) {\n+                //2.1 Destroy internal lb vm\n+                List<? extends VirtualRouter> vms = _internalLbMgr.findInternalLbVms(network.getId(), sourceIp);\n+                if (vms.size() > 0) {\n+                    //only one internal lb per IP exists\n+                    try {\n+                        s_logger.debug(\"Destroying internal lb vm for ip \" + sourceIp.addr() + \" as all the rules for this vm are in Revoke state\");\n+                        return _internalLbMgr.destroyInternalLbVm(vms.get(0).getId(), _accountMgr.getAccount(Account.ACCOUNT_ID_SYSTEM),\n+                                _accountMgr.getUserIncludingRemoved(User.UID_SYSTEM).getId());\n+                    } catch (ConcurrentOperationException e) {\n+                        s_logger.warn(\"Failed to apply lb rule(s) for ip \" + sourceIp.addr() + \" on the element \" + this.getName() + \" due to:\", e);\n+                        return false;\n+                    }\n+                }\n+            } else {\n+                //2.2 Start Internal LB vm per IP address\n+                List<? extends VirtualRouter> internalLbVms;\n+                try {\n+                    DeployDestination dest = new DeployDestination(_configMgr.getZone(network.getDataCenterId()), null, null, null); \n+                    internalLbVms = _internalLbMgr.deployInternalLbVm(network, sourceIp, dest, _accountMgr.getAccount(network.getAccountId()), null);\n+                } catch (InsufficientCapacityException e) {\n+                    s_logger.warn(\"Failed to apply lb rule(s) for ip \" + sourceIp.addr() + \"on the element \" + this.getName() + \" due to:\", e);\n+                    return false;\n+                } catch (ConcurrentOperationException e) {\n+                    s_logger.warn(\"Failed to apply lb rule(s) for ip \" + sourceIp.addr() + \"on the element \" + this.getName() + \" due to:\", e);\n+                    return false;\n+                }\n+                \n+                if (internalLbVms == null || internalLbVms.isEmpty()) {\n+                    throw new ResourceUnavailableException(\"Can't find/deploy internal lb vm to handle LB rules\",\n+                            DataCenter.class, network.getDataCenterId());\n+                }\n+                 \n+                //2.3 Apply Internal LB rules on the VM\n+                if (!_internalLbMgr.applyLoadBalancingRules(network, rulesToApply.get(sourceIp), internalLbVms)) {\n+                    throw new CloudRuntimeException(\"Failed to apply load balancing rules for ip \" + sourceIp.addr() + \n+                            \" in network \" + network.getId() + \" on element \" + this.getName());\n+                }\n+            }\n+        }\n+\n+        return true;    \n+    }\n+\n+    \n+    protected Map<Ip, List<LoadBalancingRule>> getLbRulesToApply(List<LoadBalancingRule> rules) {\n+        //Group rules by the source ip address as NetworkManager always passes the entire network lb config to the element\n+        Map<Ip, List<LoadBalancingRule>> rulesToApply = groupBySourceIp(rules);\n+      \n+        return rulesToApply;\n+    }\n+    \n+    \n+    protected Set<Ip> getVmsToDestroy(List<LoadBalancingRule> rules) {\n+        //1) Group rules by the source ip address as NetworkManager always passes the entire network lb config to the element\n+        Map<Ip, List<LoadBalancingRule>> groupedRules = groupBySourceIp(rules);\n+\n+        //2) Count rules in revoke state\n+        Set<Ip> vmsToDestroy = new HashSet<Ip>();\n+        \n+        for (Ip sourceIp : groupedRules.keySet()) {\n+            List<LoadBalancingRule> rulesToCheck = groupedRules.get(sourceIp);\n+            int revoke = 0;\n+            for (LoadBalancingRule ruleToCheck : rulesToCheck) {\n+                if (ruleToCheck.getState() == FirewallRule.State.Revoke){\n+                    revoke++;\n+                }\n+            }\n+            \n+            if (revoke == rulesToCheck.size()) {\n+                s_logger.debug(\"Have to destroy internal lb vm for source ip \" + sourceIp);\n+                vmsToDestroy.add(sourceIp);\n+            } \n+        }        \n+        return vmsToDestroy;\n+    }\n+\n+    \n+    protected Map<Ip, List<LoadBalancingRule>> groupBySourceIp(List<LoadBalancingRule> rules) {\n+        Map<Ip, List<LoadBalancingRule>> groupedRules = new HashMap<Ip, List<LoadBalancingRule>>();\n+        for (LoadBalancingRule rule : rules) {\n+            Ip sourceIp = rule.getSourceIp();\n+            if (!groupedRules.containsKey(sourceIp)) {\n+                groupedRules.put(sourceIp, null);\n+            }\n+            \n+            List<LoadBalancingRule> rulesToApply = groupedRules.get(sourceIp);\n+            if (rulesToApply == null) {\n+                rulesToApply = new ArrayList<LoadBalancingRule>();\n+            }\n+            rulesToApply.add(rule);\n+            groupedRules.put(sourceIp, rulesToApply);\n+        }\n+        return groupedRules;\n+    }\n+\n+    @Override\n+    public boolean validateLBRule(Network network, LoadBalancingRule rule) {\n+        List<LoadBalancingRule> rules = new ArrayList<LoadBalancingRule>();\n+        rules.add(rule);\n+        if (canHandle(network, rule.getScheme())) {\n+            List<DomainRouterVO> routers = _routerDao.listByNetworkAndRole(network.getId(), Role.INTERNAL_LB_VM);\n+            if (routers == null || routers.isEmpty()) {\n+                return true;\n+            }\n+            return VirtualRouterElement.validateHAProxyLBRule(rule);\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public List<LoadBalancerTO> updateHealthChecks(Network network, List<LoadBalancingRule> lbrules) {\n+        return null;\n+    }\n+    \n+    private static Map<Service, Map<Capability, String>> setCapabilities() {\n+        Map<Service, Map<Capability, String>> capabilities = new HashMap<Service, Map<Capability, String>>();\n+\n+        // Set capabilities for LB service\n+        Map<Capability, String> lbCapabilities = new HashMap<Capability, String>();\n+        lbCapabilities.put(Capability.SupportedLBAlgorithms, \"roundrobin,leastconn,source\");\n+        lbCapabilities.put(Capability.SupportedLBIsolation, \"dedicated\");\n+        lbCapabilities.put(Capability.SupportedProtocols, \"tcp, udp\");\n+        lbCapabilities.put(Capability.SupportedStickinessMethods, VirtualRouterElement.getHAProxyStickinessCapability());\n+        lbCapabilities.put(Capability.LbSchemes, LoadBalancerContainer.Scheme.Internal.toString());\n+\n+        capabilities.put(Service.Lb, lbCapabilities);\n+        return capabilities;\n+    }\n+\n+    @Override\n+    public List<Class<?>> getCommands() {\n+        List<Class<?>> cmdList = new ArrayList<Class<?>>();\n+        cmdList.add(CreateInternalLoadBalancerElementCmd.class);\n+        cmdList.add(ConfigureInternalLoadBalancerElementCmd.class);\n+        cmdList.add(ListInternalLoadBalancerElementsCmd.class);\n+        return cmdList;\n+    }\n+\n+    @Override\n+    public VirtualRouterProvider configureInternalLoadBalancerElement(long id, boolean enable) {\n+        VirtualRouterProviderVO element = _vrProviderDao.findById(id);\n+        if (element == null || element.getType() != VirtualRouterProviderType.InternalLbVm) {\n+            throw new InvalidParameterValueException(\"Can't find \" + this.getName() + \" element with network service provider id \" + id +\n+                    \" to be used as a provider for \" + this.getName());\n+        }\n+\n+        element.setEnabled(enable);\n+        element = _vrProviderDao.persist(element);\n+\n+        return element;\n+    }\n+\n+    @Override\n+    public VirtualRouterProvider addInternalLoadBalancerElement(long ntwkSvcProviderId) {\n+        VirtualRouterProviderVO element = _vrProviderDao.findByNspIdAndType(ntwkSvcProviderId, VirtualRouterProviderType.InternalLbVm);\n+        if (element != null) {\n+            s_logger.debug(\"There is already an \" + this.getName() + \" with service provider id \" + ntwkSvcProviderId);\n+            return null;\n+        }\n+        \n+        PhysicalNetworkServiceProvider provider = _pNtwkSvcProviderDao.findById(ntwkSvcProviderId);\n+        if (provider == null || !provider.getProviderName().equalsIgnoreCase(this.getName())) {\n+            throw new InvalidParameterValueException(\"Invalid network service provider is specified\");\n+        }\n+        \n+        element = new VirtualRouterProviderVO(ntwkSvcProviderId, VirtualRouterProviderType.InternalLbVm);\n+        element = _vrProviderDao.persist(element);\n+        return element;\n+    }\n+\n+    \n+    @Override\n+    public VirtualRouterProvider getInternalLoadBalancerElement(long id) {\n+        VirtualRouterProvider provider = _vrProviderDao.findById(id);\n+        if (provider == null || provider.getType() != VirtualRouterProviderType.InternalLbVm) {\n+            throw new InvalidParameterValueException(\"Unable to find \" + this.getName() + \" by id\");\n+        }\n+        return provider;\n+    }\n+\n+    @Override\n+    public List<? extends VirtualRouterProvider> searchForInternalLoadBalancerElements(Long id, Long ntwkSvsProviderId, Boolean enabled) {\n+\n+        SearchCriteriaService<VirtualRouterProviderVO, VirtualRouterProviderVO> sc = SearchCriteria2.create(VirtualRouterProviderVO.class);\n+        if (id != null) {\n+            sc.addAnd(sc.getEntity().getId(), Op.EQ, id);\n+        }\n+        if (ntwkSvsProviderId != null) {\n+            sc.addAnd(sc.getEntity().getNspId(), Op.EQ, ntwkSvsProviderId);\n+        }\n+        if (enabled != null) {\n+            sc.addAnd(sc.getEntity().isEnabled(), Op.EQ, enabled);\n+        }\n+        \n+        //return only Internal LB elements\n+        sc.addAnd(sc.getEntity().getType(), Op.EQ, VirtualRouterProvider.VirtualRouterProviderType.InternalLbVm);\n+        \n+        return sc.list();\n+    }\n+\n+    @Override\n+    public boolean applyIps(Network network, List<? extends PublicIpAddress> ipAddress, Set<Service> services) throws ResourceUnavailableException {\n+        //do nothing here; this element just has to extend the ip deployer\n+        //as the LB service implements IPDeployerRequester\n+        return true;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/internal-loadbalancer/src/org/apache/cloudstack/network/element/InternalLoadBalancerElement.java",
                "sha": "4b9308b6606d89132c2dcdd949b6b7c1fae662bb",
                "status": "added"
            },
            {
                "additions": 90,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/internal-loadbalancer/src/org/apache/cloudstack/network/lb/InternalLoadBalancerVMManager.java",
                "changes": 90,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/internal-loadbalancer/src/org/apache/cloudstack/network/lb/InternalLoadBalancerVMManager.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "plugins/network-elements/internal-loadbalancer/src/org/apache/cloudstack/network/lb/InternalLoadBalancerVMManager.java",
                "patch": "@@ -0,0 +1,90 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+// \n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.network.lb;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.cloud.deploy.DeployDestination;\n+import com.cloud.exception.ConcurrentOperationException;\n+import com.cloud.exception.InsufficientCapacityException;\n+import com.cloud.exception.ResourceUnavailableException;\n+import com.cloud.network.Network;\n+import com.cloud.network.lb.LoadBalancingRule;\n+import com.cloud.network.router.VirtualRouter;\n+import com.cloud.user.Account;\n+import com.cloud.utils.component.Manager;\n+import com.cloud.utils.net.Ip;\n+import com.cloud.vm.VirtualMachineProfile.Param;\n+\n+public interface InternalLoadBalancerVMManager extends Manager, InternalLoadBalancerVMService{\n+    //RAM/CPU for the system offering used by Internal LB VMs\n+    public static final int DEFAULT_INTERNALLB_VM_RAMSIZE = 128;            // 128 MB\n+    public static final int DEFAULT_INTERNALLB_VM_CPU_MHZ = 256;            // 256 MHz\n+    \n+    /**\n+     * Destroys Internal LB vm instance\n+     * @param vmId\n+     * @param caller\n+     * @param callerUserId\n+     * @return \n+     * @throws ResourceUnavailableException\n+     * @throws ConcurrentOperationException\n+     */\n+    boolean destroyInternalLbVm(long vmId, Account caller, Long callerUserId) \n+            throws ResourceUnavailableException, ConcurrentOperationException;\n+\n+\n+    /**\n+     * Deploys internal lb vm\n+     * @param guestNetwork\n+     * @param requestedGuestIp\n+     * @param dest\n+     * @param owner\n+     * @param params\n+     * @return\n+     * @throws InsufficientCapacityException\n+     * @throws ConcurrentOperationException\n+     * @throws ResourceUnavailableException\n+     */\n+    List<? extends VirtualRouter> deployInternalLbVm(Network guestNetwork, Ip requestedGuestIp, DeployDestination dest, Account owner,\n+            Map<Param, Object> params) throws InsufficientCapacityException,\n+            ConcurrentOperationException, ResourceUnavailableException;\n+\n+\n+\n+    /**\n+     * \n+     * @param network\n+     * @param rules\n+     * @param internalLbVms\n+     * @return\n+     * @throws ResourceUnavailableException\n+     */\n+    boolean applyLoadBalancingRules(Network network, List<LoadBalancingRule> rules, List<? extends VirtualRouter> internalLbVms)\n+            throws ResourceUnavailableException;\n+\n+\n+    /**\n+     * Returns existing Internal Load Balancer elements based on guestNetworkId (required) and requestedIp (optional)\n+     * @param guestNetworkId\n+     * @param requestedGuestIp\n+     * @return\n+     */\n+    List<? extends VirtualRouter> findInternalLbVms(long guestNetworkId, Ip requestedGuestIp);\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/internal-loadbalancer/src/org/apache/cloudstack/network/lb/InternalLoadBalancerVMManager.java",
                "sha": "9faca562bfbb038343d6a04fc5073130269017fc",
                "status": "added"
            },
            {
                "additions": 951,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/internal-loadbalancer/src/org/apache/cloudstack/network/lb/InternalLoadBalancerVMManagerImpl.java",
                "changes": 951,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/internal-loadbalancer/src/org/apache/cloudstack/network/lb/InternalLoadBalancerVMManagerImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "plugins/network-elements/internal-loadbalancer/src/org/apache/cloudstack/network/lb/InternalLoadBalancerVMManagerImpl.java",
                "patch": "@@ -0,0 +1,951 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+// \n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.network.lb;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.ejb.Local;\n+import javax.inject.Inject;\n+import javax.naming.ConfigurationException;\n+\n+import org.apache.cloudstack.lb.ApplicationLoadBalancerRuleVO;\n+import org.apache.cloudstack.lb.dao.ApplicationLoadBalancerRuleDao;\n+import org.apache.log4j.Logger;\n+import org.springframework.stereotype.Component;\n+\n+import com.cloud.agent.AgentManager;\n+import com.cloud.agent.AgentManager.OnError;\n+import com.cloud.agent.api.Answer;\n+import com.cloud.agent.api.GetDomRVersionAnswer;\n+import com.cloud.agent.api.GetDomRVersionCmd;\n+import com.cloud.agent.api.StopAnswer;\n+import com.cloud.agent.api.check.CheckSshAnswer;\n+import com.cloud.agent.api.check.CheckSshCommand;\n+import com.cloud.agent.api.routing.LoadBalancerConfigCommand;\n+import com.cloud.agent.api.routing.NetworkElementCommand;\n+import com.cloud.agent.api.to.LoadBalancerTO;\n+import com.cloud.agent.api.to.NicTO;\n+import com.cloud.agent.api.to.VirtualMachineTO;\n+import com.cloud.agent.manager.Commands;\n+import com.cloud.configuration.Config;\n+import com.cloud.configuration.dao.ConfigurationDao;\n+import com.cloud.dc.DataCenter;\n+import com.cloud.dc.DataCenterVO;\n+import com.cloud.dc.dao.DataCenterDao;\n+import com.cloud.deploy.DataCenterDeployment;\n+import com.cloud.deploy.DeployDestination;\n+import com.cloud.deploy.DeploymentPlan;\n+import com.cloud.exception.AgentUnavailableException;\n+import com.cloud.exception.ConcurrentOperationException;\n+import com.cloud.exception.InsufficientAddressCapacityException;\n+import com.cloud.exception.InsufficientCapacityException;\n+import com.cloud.exception.InsufficientServerCapacityException;\n+import com.cloud.exception.InvalidParameterValueException;\n+import com.cloud.exception.OperationTimedoutException;\n+import com.cloud.exception.ResourceUnavailableException;\n+import com.cloud.exception.StorageUnavailableException;\n+import com.cloud.hypervisor.Hypervisor.HypervisorType;\n+import com.cloud.network.Network;\n+import com.cloud.network.Network.Provider;\n+import com.cloud.network.Network.Service;\n+import com.cloud.network.NetworkManager;\n+import com.cloud.network.NetworkModel;\n+import com.cloud.network.Networks.TrafficType;\n+import com.cloud.network.PhysicalNetworkServiceProvider;\n+import com.cloud.network.VirtualRouterProvider;\n+import com.cloud.network.VirtualRouterProvider.VirtualRouterProviderType;\n+import com.cloud.network.dao.NetworkDao;\n+import com.cloud.network.dao.NetworkVO;\n+import com.cloud.network.dao.PhysicalNetworkServiceProviderDao;\n+import com.cloud.network.dao.VirtualRouterProviderDao;\n+import com.cloud.network.lb.LoadBalancingRule;\n+import com.cloud.network.lb.LoadBalancingRule.LbDestination;\n+import com.cloud.network.lb.LoadBalancingRule.LbHealthCheckPolicy;\n+import com.cloud.network.lb.LoadBalancingRule.LbStickinessPolicy;\n+import com.cloud.network.lb.LoadBalancingRulesManager;\n+import com.cloud.network.router.VirtualRouter;\n+import com.cloud.network.router.VirtualRouter.RedundantState;\n+import com.cloud.network.router.VirtualRouter.Role;\n+import com.cloud.network.rules.FirewallRule;\n+import com.cloud.offering.NetworkOffering;\n+import com.cloud.offering.ServiceOffering;\n+import com.cloud.offerings.dao.NetworkOfferingDao;\n+import com.cloud.resource.ResourceManager;\n+import com.cloud.server.ConfigurationServer;\n+import com.cloud.service.ServiceOfferingVO;\n+import com.cloud.service.dao.ServiceOfferingDao;\n+import com.cloud.storage.VMTemplateVO;\n+import com.cloud.storage.dao.VMTemplateDao;\n+import com.cloud.user.Account;\n+import com.cloud.user.AccountManager;\n+import com.cloud.user.User;\n+import com.cloud.utils.Pair;\n+import com.cloud.utils.component.ManagerBase;\n+import com.cloud.utils.db.DB;\n+import com.cloud.utils.exception.CloudRuntimeException;\n+import com.cloud.utils.net.Ip;\n+import com.cloud.utils.net.NetUtils;\n+import com.cloud.vm.DomainRouterVO;\n+import com.cloud.vm.Nic;\n+import com.cloud.vm.NicProfile;\n+import com.cloud.vm.NicVO;\n+import com.cloud.vm.ReservationContext;\n+import com.cloud.vm.VirtualMachine;\n+import com.cloud.vm.VirtualMachine.State;\n+import com.cloud.vm.VirtualMachineGuru;\n+import com.cloud.vm.VirtualMachineManager;\n+import com.cloud.vm.VirtualMachineName;\n+import com.cloud.vm.VirtualMachineProfile;\n+import com.cloud.vm.VirtualMachineProfile.Param;\n+import com.cloud.vm.dao.DomainRouterDao;\n+import com.cloud.vm.dao.NicDao;\n+\n+@Component\n+@Local(value = { InternalLoadBalancerVMManager.class, InternalLoadBalancerVMService.class})\n+public class InternalLoadBalancerVMManagerImpl extends ManagerBase implements\n+    InternalLoadBalancerVMManager, VirtualMachineGuru<DomainRouterVO> {\n+    private static final Logger s_logger = Logger\n+            .getLogger(InternalLoadBalancerVMManagerImpl.class);\n+    static final private String _internalLbVmNamePrefix = \"b\";\n+    \n+    private String _instance;\n+    private String _mgmtHost;\n+    private String _mgmtCidr;\n+    private long _internalLbVmOfferingId;\n+    \n+    @Inject VirtualMachineManager _itMgr;\n+    @Inject DomainRouterDao _internalLbVmDao;\n+    @Inject ConfigurationDao _configDao;\n+    @Inject AgentManager _agentMgr;\n+    @Inject DataCenterDao _dcDao;\n+    @Inject VirtualRouterProviderDao _vrProviderDao;\n+    @Inject ApplicationLoadBalancerRuleDao _lbDao;\n+    @Inject NetworkModel _ntwkModel;\n+    @Inject LoadBalancingRulesManager _lbMgr;\n+    @Inject NicDao _nicDao;\n+    @Inject AccountManager _accountMgr;\n+    @Inject NetworkDao _networkDao;\n+    @Inject NetworkManager _ntwkMgr;\n+    @Inject ServiceOfferingDao _serviceOfferingDao;\n+    @Inject PhysicalNetworkServiceProviderDao _physicalProviderDao;\n+    @Inject NetworkOfferingDao _networkOfferingDao;\n+    @Inject VMTemplateDao _templateDao;\n+    @Inject ResourceManager _resourceMgr;\n+    @Inject ConfigurationServer _configServer;\n+\n+    @Override\n+    public DomainRouterVO findByName(String name) {\n+        if (!VirtualMachineName.isValidSystemVmName(name, _instance, _internalLbVmNamePrefix)) {\n+            return null;\n+        }\n+\n+        return _internalLbVmDao.findById(VirtualMachineName.getRouterId(name));\n+    }\n+\n+    @Override\n+    public DomainRouterVO findById(long id) {\n+        return _internalLbVmDao.findById(id);\n+    }\n+\n+    @Override\n+    public DomainRouterVO persist(DomainRouterVO vm) {\n+        DomainRouterVO virtualRouter =  _internalLbVmDao.persist(vm);\n+        return virtualRouter;\n+    }\n+\n+    @Override\n+    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<DomainRouterVO> profile,\n+            DeployDestination dest, ReservationContext context) {\n+\n+        //Internal LB vm starts up with 2 Nics\n+        //Nic #1 - Guest Nic with IP address that would act as the LB entry point\n+        //Nic #2 - Control/Management Nic\n+        \n+        StringBuilder buf = profile.getBootArgsBuilder();\n+        buf.append(\" template=domP\");\n+        buf.append(\" name=\").append(profile.getHostName());\n+\n+        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n+            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n+        }\n+        \n+        NicProfile controlNic = null;\n+        Network guestNetwork = null;\n+      \n+        for (NicProfile nic : profile.getNics()) {\n+            int deviceId = nic.getDeviceId();\n+            buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIp4Address());\n+            buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getNetmask());\n+            \n+            if (nic.isDefaultNic()) {\n+                buf.append(\" gateway=\").append(nic.getGateway());\n+                buf.append(\" dns1=\").append(nic.getGateway());\n+            }\n+\n+            if (nic.getTrafficType() == TrafficType.Guest) {\n+                guestNetwork = _ntwkModel.getNetwork(nic.getNetworkId());\n+            } else if (nic.getTrafficType() == TrafficType.Management) {\n+                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n+            } else if (nic.getTrafficType() == TrafficType.Control) {\n+                controlNic = nic;\n+                // Internal LB control command is sent over management server in VMware\n+                if (dest.getHost().getHypervisorType() == HypervisorType.VMware) {\n+                    if (s_logger.isInfoEnabled()) {\n+                        s_logger.info(\"Check if we need to add management server explicit route to Internal LB. pod cidr: \" \n+                                + dest.getPod().getCidrAddress() + \"/\" + dest.getPod().getCidrSize()\n+                                + \", pod gateway: \" + dest.getPod().getGateway() + \", management host: \" + _mgmtHost);\n+                    }\n+\n+                    if (s_logger.isInfoEnabled()) {\n+                        s_logger.info(\"Add management server explicit route to Internal LB.\");\n+                    }\n+                    \n+               \n+                    buf.append(\" mgmtcidr=\").append(_mgmtCidr);\n+                    buf.append(\" localgw=\").append(dest.getPod().getGateway());\n+                }\n+            }\n+        }\n+\n+        if (controlNic == null) {\n+            throw new CloudRuntimeException(\"Didn't start a control port\");\n+        }\n+                \n+        if (guestNetwork != null) {\n+            String domain = guestNetwork.getNetworkDomain();\n+            if (domain != null) {\n+                buf.append(\" domain=\" + domain);\n+            }\n+        }\n+\n+        String type = \"ilbvm\";\n+        buf.append(\" type=\" + type);\n+\n+        if (s_logger.isDebugEnabled()) {\n+            s_logger.debug(\"Boot Args for \" + profile + \": \" + buf.toString());\n+        }\n+\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean finalizeDeployment(Commands cmds, VirtualMachineProfile<DomainRouterVO> profile, DeployDestination dest, ReservationContext context) throws ResourceUnavailableException {\n+        DomainRouterVO internalLbVm = profile.getVirtualMachine();\n+\n+        List<NicProfile> nics = profile.getNics();\n+        for (NicProfile nic : nics) {\n+            if (nic.getTrafficType() == TrafficType.Control) {\n+                internalLbVm.setPrivateIpAddress(nic.getIp4Address());\n+                internalLbVm.setPrivateMacAddress(nic.getMacAddress());\n+            }\n+        }\n+        _internalLbVmDao.update(internalLbVm.getId(), internalLbVm);\n+\n+        finalizeCommandsOnStart(cmds, profile);\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean finalizeStart(VirtualMachineProfile<DomainRouterVO> profile, long hostId, Commands cmds, ReservationContext context) {\n+        DomainRouterVO internalLbVm = profile.getVirtualMachine();\n+        \n+        boolean result = true;\n+\n+        Answer answer = cmds.getAnswer(\"checkSsh\");\n+        if (answer != null && answer instanceof CheckSshAnswer) {\n+            CheckSshAnswer sshAnswer = (CheckSshAnswer) answer;\n+            if (sshAnswer == null || !sshAnswer.getResult()) {\n+                s_logger.warn(\"Unable to ssh to the internal LB VM: \" + sshAnswer.getDetails());\n+                result = false;\n+            }\n+        } else {\n+            result = false;\n+        }\n+        if (result == false) {\n+            return result;\n+        }\n+        \n+        //Get guest network info\n+        List<Network> guestNetworks = new ArrayList<Network>();\n+        List<? extends Nic> internalLbVmNics = _nicDao.listByVmId(profile.getId());\n+        for (Nic internalLbVmNic : internalLbVmNics) {\n+            Network network = _ntwkModel.getNetwork(internalLbVmNic.getNetworkId());\n+            if (network.getTrafficType() == TrafficType.Guest) {\n+                guestNetworks.add(network);\n+            }\n+        }\n+        \n+        answer = cmds.getAnswer(\"getDomRVersion\");\n+        if (answer != null && answer instanceof GetDomRVersionAnswer) {\n+            GetDomRVersionAnswer versionAnswer = (GetDomRVersionAnswer)answer;\n+            if (answer == null || !answer.getResult()) {\n+                s_logger.warn(\"Unable to get the template/scripts version of internal LB VM \" + internalLbVm.getInstanceName() +\n+                        \" due to: \" + versionAnswer.getDetails());\n+                result = false;\n+            } else {\n+                internalLbVm.setTemplateVersion(versionAnswer.getTemplateVersion());\n+                internalLbVm.setScriptsVersion(versionAnswer.getScriptsVersion());\n+                internalLbVm = _internalLbVmDao.persist(internalLbVm, guestNetworks);\n+            }\n+        } else {\n+            result = false;\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean finalizeCommandsOnStart(Commands cmds, VirtualMachineProfile<DomainRouterVO> profile) {\n+        DomainRouterVO internalLbVm = profile.getVirtualMachine();\n+        NicProfile controlNic = getNicProfileByTrafficType(profile, TrafficType.Control);\n+\n+        if (controlNic == null) {\n+            s_logger.error(\"Control network doesn't exist for the internal LB vm \" + internalLbVm);\n+            return false;\n+        }\n+\n+        finalizeSshAndVersionOnStart(cmds, profile, internalLbVm, controlNic);\n+\n+        // restart network if restartNetwork = false is not specified in profile parameters\n+        boolean reprogramGuestNtwk = true;\n+        if (profile.getParameter(Param.ReProgramGuestNetworks) != null \n+                && (Boolean) profile.getParameter(Param.ReProgramGuestNetworks) == false) {\n+            reprogramGuestNtwk = false;\n+        }\n+\n+        VirtualRouterProvider lbProvider = _vrProviderDao.findById(internalLbVm.getElementId());\n+        if (lbProvider == null) {\n+            throw new CloudRuntimeException(\"Cannot find related element \" + VirtualRouterProviderType.InternalLbVm + \" of vm: \" + internalLbVm.getHostName());\n+        }\n+        \n+        Provider provider = Network.Provider.getProvider(lbProvider.getType().toString());\n+        if (provider == null) {\n+            throw new CloudRuntimeException(\"Cannot find related provider of provider: \" + lbProvider.getType().toString());\n+        }\n+\n+        if (reprogramGuestNtwk) {\n+            NicProfile guestNic = getNicProfileByTrafficType(profile, TrafficType.Guest);\n+            finalizeLbRulesForIp(cmds, internalLbVm, provider, new Ip(guestNic.getIp4Address()), guestNic.getNetworkId());\n+        }\n+\n+        return true;\n+    }\n+\n+    @Override\n+    public void finalizeStop(VirtualMachineProfile<DomainRouterVO> profile, StopAnswer answer) {\n+    }\n+\n+    @Override\n+    public void finalizeExpunge(DomainRouterVO vm) {\n+    }\n+\n+    @Override\n+    public Long convertToId(String vmName) {\n+        if (!VirtualMachineName.isValidSystemVmName(vmName, _instance, _internalLbVmNamePrefix)) {\n+            return null;\n+        }\n+\n+        return VirtualMachineName.getRouterId(vmName);\n+    }\n+\n+    @Override\n+    public boolean plugNic(Network network, NicTO nic, VirtualMachineTO vm, ReservationContext context, DeployDestination dest) throws ConcurrentOperationException, ResourceUnavailableException,\n+            InsufficientCapacityException {        \n+        //not supported\n+        throw new UnsupportedOperationException(\"Plug nic is not supported for vm of type \" + vm.getType());\n+    }\n+\n+    @Override\n+    public boolean unplugNic(Network network, NicTO nic, VirtualMachineTO vm, ReservationContext context, DeployDestination dest) throws ConcurrentOperationException, ResourceUnavailableException {\n+        //not supported\n+        throw new UnsupportedOperationException(\"Unplug nic is not supported for vm of type \" + vm.getType());\n+    }\n+\n+    @Override\n+    public void prepareStop(VirtualMachineProfile<DomainRouterVO> profile) {\n+    }\n+    \n+    @Override\n+    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n+        final Map<String, String> configs = _configDao.getConfiguration(\"AgentManager\", params);\n+        _instance = configs.get(\"instance.name\");\n+        if (_instance == null) {\n+            _instance = \"DEFAULT\";\n+        }\n+        \n+        _mgmtHost = configs.get(\"host\");\n+        _mgmtCidr = _configDao.getValue(Config.ManagementNetwork.key());\n+        \n+        String offIdStr = configs.get(Config.InternalLbVmServiceOfferingId.key());\n+        if (offIdStr != null && !offIdStr.isEmpty()) {\n+            _internalLbVmOfferingId = Long.parseLong(offIdStr);\n+        } else {\n+            boolean useLocalStorage = Boolean.parseBoolean(configs.get(Config.SystemVMUseLocalStorage.key()));\n+            ServiceOfferingVO newOff = new ServiceOfferingVO(\"System Offering For Internal LB VM\", 1, InternalLoadBalancerVMManager.DEFAULT_INTERNALLB_VM_RAMSIZE, InternalLoadBalancerVMManager.DEFAULT_INTERNALLB_VM_CPU_MHZ, null,\n+                    null, true, null, useLocalStorage, true, null, true, VirtualMachine.Type.InternalLoadBalancerVm, true);\n+            newOff.setUniqueName(ServiceOffering.internalLbVmDefaultOffUniqueName);\n+            newOff = _serviceOfferingDao.persistSystemServiceOffering(newOff);\n+            _internalLbVmOfferingId = newOff.getId();\n+        }\n+        \n+        _itMgr.registerGuru(VirtualMachine.Type.InternalLoadBalancerVm, this);\n+\n+        if (s_logger.isInfoEnabled()) {\n+            s_logger.info(getName()  +  \" has been configured\");\n+        }\n+        \n+        return true;\n+    }\n+    \n+    @Override\n+    public String getName() {\n+        return _name;\n+    }\n+    \n+    protected NicProfile getNicProfileByTrafficType(VirtualMachineProfile<DomainRouterVO> profile, TrafficType trafficType) {\n+        for (NicProfile nic : profile.getNics()) {\n+            if (nic.getTrafficType() == trafficType && nic.getIp4Address() != null) {\n+                return nic;\n+            }\n+        }\n+        return null;\n+     }\n+    \n+    protected void finalizeSshAndVersionOnStart(Commands cmds, VirtualMachineProfile<DomainRouterVO> profile, DomainRouterVO router, NicProfile controlNic) {\n+        cmds.addCommand(\"checkSsh\", new CheckSshCommand(profile.getInstanceName(), controlNic.getIp4Address(), 3922));\n+\n+        // Update internal lb vm template/scripts version\n+        final GetDomRVersionCmd command = new GetDomRVersionCmd();\n+        command.setAccessDetail(NetworkElementCommand.ROUTER_IP, controlNic.getIp4Address());\n+        command.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n+        cmds.addCommand(\"getDomRVersion\", command);\n+    }\n+    \n+    \n+    protected void finalizeLbRulesForIp(Commands cmds, DomainRouterVO internalLbVm, Provider provider, Ip sourceIp, long guestNtwkId) {\n+        s_logger.debug(\"Resending load balancing rules as a part of start for \" + internalLbVm);\n+        List<ApplicationLoadBalancerRuleVO> lbs = _lbDao.listBySrcIpSrcNtwkId(sourceIp, guestNtwkId);\n+        List<LoadBalancingRule> lbRules = new ArrayList<LoadBalancingRule>();\n+        if (_ntwkModel.isProviderSupportServiceInNetwork(guestNtwkId, Service.Lb, provider)) {\n+            // Re-apply load balancing rules\n+            for (ApplicationLoadBalancerRuleVO lb : lbs) {\n+                List<LbDestination> dstList = _lbMgr.getExistingDestinations(lb.getId());\n+                List<LbStickinessPolicy> policyList = _lbMgr.getStickinessPolicies(lb.getId());\n+                List<LbHealthCheckPolicy> hcPolicyList = _lbMgr.getHealthCheckPolicies(lb.getId());\n+                LoadBalancingRule loadBalancing = new LoadBalancingRule(lb, dstList, policyList, hcPolicyList, sourceIp);\n+                lbRules.add(loadBalancing);\n+            }\n+        }\n+\n+        s_logger.debug(\"Found \" + lbRules.size() + \" load balancing rule(s) to apply as a part of Intenrnal LB vm\" + internalLbVm + \" start.\");\n+        if (!lbRules.isEmpty()) {\n+            createApplyLoadBalancingRulesCommands(lbRules, internalLbVm, cmds, guestNtwkId);\n+        }\n+    }\n+    \n+    private void createApplyLoadBalancingRulesCommands(List<LoadBalancingRule> rules, VirtualRouter internalLbVm, Commands cmds, long guestNetworkId) {\n+\n+        LoadBalancerTO[] lbs = new LoadBalancerTO[rules.size()];\n+        int i = 0;\n+        boolean inline = false;\n+        for (LoadBalancingRule rule : rules) {\n+            boolean revoked = (rule.getState().equals(FirewallRule.State.Revoke));\n+            String protocol = rule.getProtocol();\n+            String algorithm = rule.getAlgorithm();\n+            String uuid = rule.getUuid();\n+\n+            String srcIp = rule.getSourceIp().addr();\n+            int srcPort = rule.getSourcePortStart();\n+            List<LbDestination> destinations = rule.getDestinations();\n+            List<LbStickinessPolicy> stickinessPolicies = rule.getStickinessPolicies();\n+            LoadBalancerTO lb = new LoadBalancerTO(uuid, srcIp, srcPort, protocol, algorithm, revoked, false, inline, destinations, stickinessPolicies);\n+            lbs[i++] = lb;\n+        }\n+        \n+        Network guestNetwork = _ntwkModel.getNetwork(guestNetworkId);\n+        Nic guestNic = _nicDao.findByNtwkIdAndInstanceId(guestNetwork.getId(), internalLbVm.getId());\n+        NicProfile guestNicProfile = new NicProfile(guestNic, guestNetwork, guestNic.getBroadcastUri(), guestNic.getIsolationUri(), \n+                _ntwkModel.getNetworkRate(guestNetwork.getId(), internalLbVm.getId()), \n+                _ntwkModel.isSecurityGroupSupportedInNetwork(guestNetwork), \n+                _ntwkModel.getNetworkTag(internalLbVm.getHypervisorType(), guestNetwork));\n+\n+        LoadBalancerConfigCommand cmd = new LoadBalancerConfigCommand(lbs, guestNic.getIp4Address(), \n+                guestNic.getIp4Address(), internalLbVm.getPrivateIpAddress(), \n+                _itMgr.toNicTO(guestNicProfile, internalLbVm.getHypervisorType()), internalLbVm.getVpcId());\n+\n+        cmd.lbStatsVisibility = _configDao.getValue(Config.NetworkLBHaproxyStatsVisbility.key());\n+        cmd.lbStatsUri = _configDao.getValue(Config.NetworkLBHaproxyStatsUri.key());\n+        cmd.lbStatsAuth = _configDao.getValue(Config.NetworkLBHaproxyStatsAuth.key());\n+        cmd.lbStatsPort = _configDao.getValue(Config.NetworkLBHaproxyStatsPort.key());\n+\n+        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, getInternalLbControlIp(internalLbVm.getId()));\n+        cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, guestNic.getIp4Address());\n+        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, internalLbVm.getInstanceName());\n+        DataCenterVO dcVo = _dcDao.findById(internalLbVm.getDataCenterId());\n+        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n+        cmds.addCommand(cmd);\n+    }\n+    \n+    \n+    protected String getInternalLbControlIp(long internalLbVmId) {\n+        String controlIpAddress = null;\n+        List<NicVO> nics = _nicDao.listByVmId(internalLbVmId);\n+        for (NicVO nic : nics) {\n+            Network ntwk = _ntwkModel.getNetwork(nic.getNetworkId());\n+            if (ntwk.getTrafficType() == TrafficType.Control) {\n+                controlIpAddress = nic.getIp4Address();\n+            }\n+        }\n+        \n+        if(controlIpAddress == null) {\n+            s_logger.warn(\"Unable to find Internal LB control ip in its attached NICs!. Internal LB vm: \" + internalLbVmId);\n+            DomainRouterVO internalLbVm = _internalLbVmDao.findById(internalLbVmId);\n+            return internalLbVm.getPrivateIpAddress();\n+        }\n+            \n+        return controlIpAddress;\n+    }\n+\n+    @Override\n+    public boolean destroyInternalLbVm(long vmId, Account caller, Long callerUserId)\n+            throws ResourceUnavailableException, ConcurrentOperationException {\n+        if (s_logger.isDebugEnabled()) {\n+            s_logger.debug(\"Attempting to destroy Internal LB vm \" + vmId);\n+        }\n+\n+        DomainRouterVO internalLbVm = _internalLbVmDao.findById(vmId);\n+        if (internalLbVm == null) {\n+            return true;\n+        }\n+\n+        _accountMgr.checkAccess(caller, null, true, internalLbVm);\n+\n+        return _itMgr.expunge(internalLbVm, _accountMgr.getActiveUser(callerUserId), caller); \n+    }\n+\n+    \n+    @Override\n+    public VirtualRouter stopInternalLbVm(long vmId, boolean forced, Account caller, long callerUserId) throws ConcurrentOperationException,\n+    ResourceUnavailableException {\n+        DomainRouterVO internalLbVm = _internalLbVmDao.findById(vmId);\n+        if (internalLbVm == null || internalLbVm.getRole() != Role.INTERNAL_LB_VM) {\n+            throw new InvalidParameterValueException(\"Can't find internal lb vm by id specified\");\n+        }\n+        \n+        return stopInternalLbVm(internalLbVm, forced, caller, callerUserId);\n+    }\n+\n+    protected VirtualRouter stopInternalLbVm(DomainRouterVO internalLbVm, boolean forced, Account caller, long callerUserId) throws ResourceUnavailableException, ConcurrentOperationException {\n+        s_logger.debug(\"Stopping internal lb vm \" + internalLbVm);\n+        try {\n+            if (_itMgr.advanceStop((DomainRouterVO) internalLbVm, forced, _accountMgr.getActiveUser(callerUserId), caller)) {\n+                return _internalLbVmDao.findById(internalLbVm.getId());\n+            } else {\n+                return null;\n+            }\n+        } catch (OperationTimedoutException e) {\n+            throw new CloudRuntimeException(\"Unable to stop \" + internalLbVm, e);\n+        }\n+    }\n+    \n+    \n+    @Override\n+    public List<DomainRouterVO> deployInternalLbVm(Network guestNetwork, Ip requestedGuestIp, DeployDestination dest, \n+            Account owner, Map<Param, Object> params) throws InsufficientCapacityException,\n+            ConcurrentOperationException, ResourceUnavailableException {\n+\n+        List<DomainRouterVO> internalLbVms = findOrDeployInternalLbVm(guestNetwork, requestedGuestIp, dest, owner, params);\n+        \n+        return startInternalLbVms(params, internalLbVms);\n+    }\n+    \n+    protected List<DomainRouterVO> startInternalLbVms(Map<Param, Object> params, List<DomainRouterVO> internalLbVms) \n+            throws StorageUnavailableException, InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {\n+        List<DomainRouterVO> runningInternalLbVms = null;\n+\n+        if (internalLbVms != null) {\n+            runningInternalLbVms = new ArrayList<DomainRouterVO>();\n+        } else {\n+            s_logger.debug(\"Have no internal lb vms to start\");\n+            return null;\n+        }\n+\n+        for (DomainRouterVO internalLbVm : internalLbVms) {\n+            if (internalLbVm.getState() != VirtualMachine.State.Running) {\n+                internalLbVm = startInternalLbVm(internalLbVm, _accountMgr.getSystemAccount(), User.UID_SYSTEM, params);\n+            }\n+            \n+            if (internalLbVm != null) {\n+                runningInternalLbVms.add(internalLbVm);\n+            }\n+        }\n+        return runningInternalLbVms;\n+    }\n+    \n+    \n+    \n+    @DB\n+    protected List<DomainRouterVO> findOrDeployInternalLbVm(Network guestNetwork, Ip requestedGuestIp, DeployDestination dest, \n+            Account owner, Map<Param, Object> params) throws ConcurrentOperationException, \n+            InsufficientCapacityException, ResourceUnavailableException {\n+\n+        List<DomainRouterVO> internalLbVms = new ArrayList<DomainRouterVO>();\n+        Network lock = _networkDao.acquireInLockTable(guestNetwork.getId(), _ntwkMgr.getNetworkLockTimeout());\n+        if (lock == null) {\n+            throw new ConcurrentOperationException(\"Unable to lock network \" + guestNetwork.getId());\n+        }\n+        \n+        if (s_logger.isDebugEnabled()) {\n+            s_logger.debug(\"Lock is acquired for network id \" + lock.getId() + \" as a part of internal lb startup in \" + dest);\n+        }\n+        \n+        long internalLbProviderId = getInternalLbProviderId(guestNetwork);\n+        \n+        try {\n+            assert guestNetwork.getState() == Network.State.Implemented || guestNetwork.getState() == Network.State.Setup ||\n+                    guestNetwork.getState() == Network.State.Implementing : \"Network is not yet fully implemented: \"\n+                    + guestNetwork;\n+            assert guestNetwork.getTrafficType() == TrafficType.Guest;\n+\n+            //deploy internal lb vm\n+            Pair<DeploymentPlan, List<DomainRouterVO>> planAndInternalLbVms = getDeploymentPlanAndInternalLbVms(dest, guestNetwork.getId(), requestedGuestIp);\n+            internalLbVms = planAndInternalLbVms.second();\n+            DeploymentPlan plan = planAndInternalLbVms.first();\n+            \n+            if (internalLbVms.size() > 0) {\n+                s_logger.debug(\"Found \" + internalLbVms.size() + \" internal lb vms for the requested IP \" + requestedGuestIp.addr());\n+                return internalLbVms;\n+            }\n+\n+            List<Pair<NetworkVO, NicProfile>> networks = createInternalLbVmNetworks(guestNetwork, plan, requestedGuestIp);\n+            //Pass startVm=false as we are holding the network lock that needs to be released at the end of vm allocation\n+            DomainRouterVO internalLbVm = deployInternalLbVm(owner, dest, plan, params, internalLbProviderId, _internalLbVmOfferingId, guestNetwork.getVpcId(),\n+                networks, false);\n+            if (internalLbVm != null) {\n+                _internalLbVmDao.addRouterToGuestNetwork(internalLbVm, guestNetwork);\n+                internalLbVms.add(internalLbVm);\n+            }\n+        } finally {\n+            if (lock != null) {\n+                _networkDao.releaseFromLockTable(lock.getId());\n+                if (s_logger.isDebugEnabled()) {\n+                    s_logger.debug(\"Lock is released for network id \" + lock.getId() + \" as a part of internal lb vm startup in \" + dest);\n+                }\n+            }\n+        }\n+        return internalLbVms;\n+    }\n+\n+    protected long getInternalLbProviderId(Network guestNetwork) {\n+        VirtualRouterProviderType type = VirtualRouterProviderType.InternalLbVm;\n+        long physicalNetworkId = _ntwkModel.getPhysicalNetworkId(guestNetwork);\n+        \n+        PhysicalNetworkServiceProvider provider = _physicalProviderDao.findByServiceProvider(physicalNetworkId, type.toString());\n+        if (provider == null) {\n+            throw new CloudRuntimeException(\"Cannot find service provider \" + type.toString() + \" in physical network \" + physicalNetworkId);\n+        }\n+        \n+        VirtualRouterProvider internalLbProvider = _vrProviderDao.findByNspIdAndType(provider.getId(), type);\n+        if (internalLbProvider == null) {\n+            throw new CloudRuntimeException(\"Cannot find provider \" + type.toString() + \" as service provider \" + provider.getId());\n+        }\n+        \n+        return internalLbProvider.getId();\n+    }\n+    \n+    protected List<Pair<NetworkVO, NicProfile>> createInternalLbVmNetworks(Network guestNetwork, DeploymentPlan plan, Ip guestIp) throws ConcurrentOperationException,\n+            InsufficientAddressCapacityException {\n+\n+        //Form networks\n+        List<Pair<NetworkVO, NicProfile>> networks = new ArrayList<Pair<NetworkVO, NicProfile>>(3);\n+        \n+        //1) Guest network - default\n+        if (guestNetwork != null) {\n+            s_logger.debug(\"Adding nic for Internal LB in Guest network \" + guestNetwork);\n+            NicProfile guestNic = new NicProfile();\n+            if (guestIp != null) {\n+                guestNic.setIp4Address(guestIp.addr());  \n+            } else {\n+                guestNic.setIp4Address(_ntwkMgr.acquireGuestIpAddress(guestNetwork, null));\n+            }\n+            guestNic.setGateway(guestNetwork.getGateway());\n+            guestNic.setBroadcastUri(guestNetwork.getBroadcastUri());\n+            guestNic.setBroadcastType(guestNetwork.getBroadcastDomainType());\n+            guestNic.setIsolationUri(guestNetwork.getBroadcastUri());\n+            guestNic.setMode(guestNetwork.getMode());\n+            String gatewayCidr = guestNetwork.getCidr();\n+            guestNic.setNetmask(NetUtils.getCidrNetmask(gatewayCidr));\n+            guestNic.setDefaultNic(true);\n+            networks.add(new Pair<NetworkVO, NicProfile>((NetworkVO) guestNetwork, guestNic));\n+        }\n+\n+        //2) Control network\n+        s_logger.debug(\"Adding nic for Internal LB vm in Control network \");\n+        List<? extends NetworkOffering> offerings = _ntwkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork);\n+        NetworkOffering controlOffering = offerings.get(0);\n+        NetworkVO controlConfig = _ntwkMgr.setupNetwork(_accountMgr.getSystemAccount(), controlOffering, plan, null, null, false).get(0);\n+        networks.add(new Pair<NetworkVO, NicProfile>(controlConfig, null));\n+\n+        return networks;\n+    }\n+    \n+    \n+    protected Pair<DeploymentPlan, List<DomainRouterVO>> getDeploymentPlanAndInternalLbVms(DeployDestination dest, long guestNetworkId, Ip requestedGuestIp) {\n+        long dcId = dest.getDataCenter().getId();\n+        DeploymentPlan plan = new DataCenterDeployment(dcId);\n+        List<DomainRouterVO> internalLbVms = findInternalLbVms(guestNetworkId, requestedGuestIp);\n+\n+        return new Pair<DeploymentPlan, List<DomainRouterVO>>(plan, internalLbVms);\n+    \n+    }\n+\n+    @Override\n+    public List<DomainRouterVO> findInternalLbVms(long guestNetworkId, Ip requestedGuestIp) {\n+        List<DomainRouterVO> internalLbVms = _internalLbVmDao.listByNetworkAndRole(guestNetworkId, Role.INTERNAL_LB_VM);\n+        if (requestedGuestIp != null && !internalLbVms.isEmpty()) {\n+            Iterator<DomainRouterVO> it = internalLbVms.iterator();\n+            while (it.hasNext()) {\n+                DomainRouterVO vm = it.next();\n+                Nic nic = _nicDao.findByNtwkIdAndInstanceId(guestNetworkId, vm.getId());\n+                if (!nic.getIp4Address().equalsIgnoreCase(requestedGuestIp.addr())) {\n+                    it.remove();\n+                }\n+            }\n+        }\n+        return internalLbVms;\n+    }\n+    \n+    \n+    protected DomainRouterVO deployInternalLbVm(Account owner, DeployDestination dest, DeploymentPlan plan, Map<Param, Object> params,\n+            long internalLbProviderId, long svcOffId, Long vpcId,\n+            List<Pair<NetworkVO, NicProfile>> networks, boolean startVm) throws ConcurrentOperationException,\n+            InsufficientAddressCapacityException, InsufficientServerCapacityException, InsufficientCapacityException,\n+            StorageUnavailableException, ResourceUnavailableException {\n+        \n+        long id = _internalLbVmDao.getNextInSequence(Long.class, \"id\");\n+        if (s_logger.isDebugEnabled()) {\n+            s_logger.debug(\"Creating the internal lb vm \" + id + \" in datacenter \"  + dest.getDataCenter());\n+        }\n+\n+        ServiceOfferingVO routerOffering = _serviceOfferingDao.findById(svcOffId);\n+\n+        // Internal lb is the network element, we don't know the hypervisor type yet.\n+        // Try to allocate the internal lb twice using diff hypervisors, and when failed both times, throw the exception up\n+        List<HypervisorType> hypervisors = getHypervisors(dest, plan, null);\n+\n+        int allocateRetry = 0;\n+        int startRetry = 0;\n+        DomainRouterVO internalLbVm = null;\n+        for (Iterator<HypervisorType> iter = hypervisors.iterator(); iter.hasNext();) {\n+            HypervisorType hType = iter.next();\n+            try {\n+                s_logger.debug(\"Allocating the Internal lb with the hypervisor type \" + hType);\n+                String templateName = null;\n+                switch (hType) {\n+                    case XenServer:\n+                        templateName = _configServer.getConfigValue(Config.RouterTemplateXen.key(), Config.ConfigurationParameterScope.zone.toString(), dest.getDataCenter().getId());\n+                        break;\n+                    case KVM:\n+                        templateName = _configServer.getConfigValue(Config.RouterTemplateKVM.key(), Config.ConfigurationParameterScope.zone.toString(), dest.getDataCenter().getId());\n+                        break;\n+                    case VMware:\n+                        templateName = _configServer.getConfigValue(Config.RouterTemplateVmware.key(), Config.ConfigurationParameterScope.zone.toString(), dest.getDataCenter().getId());\n+                        break;\n+                    case Hyperv:\n+                        templateName = _configServer.getConfigValue(Config.RouterTemplateHyperv.key(), Config.ConfigurationParameterScope.zone.toString(), dest.getDataCenter().getId());\n+                        break;\n+                    case LXC:\n+                        templateName = _configServer.getConfigValue(Config.RouterTemplateLXC.key(), Config.ConfigurationParameterScope.zone.toString(), dest.getDataCenter().getId());\n+                        break;\n+                    default: break;\n+                }\n+                VMTemplateVO template = _templateDao.findRoutingTemplate(hType, templateName);\n+\n+                if (template == null) {\n+                    s_logger.debug(hType + \" won't support system vm, skip it\");\n+                    continue;\n+                }\n+\n+                internalLbVm = new DomainRouterVO(id, routerOffering.getId(), internalLbProviderId, \n+                VirtualMachineName.getSystemVmName(id, _instance, _internalLbVmNamePrefix), template.getId(), template.getHypervisorType(),\n+                template.getGuestOSId(), owner.getDomainId(), owner.getId(), false, 0, false, \n+                RedundantState.UNKNOWN, false, false, VirtualMachine.Type.InternalLoadBalancerVm, vpcId);\n+                internalLbVm.setRole(Role.INTERNAL_LB_VM);\n+                internalLbVm = _itMgr.allocate(internalLbVm, template, routerOffering, networks, plan, null, owner);\n+            } catch (InsufficientCapacityException ex) {\n+                if (allocateRetry < 2 && iter.hasNext()) {\n+                    s_logger.debug(\"Failed to allocate the Internal lb vm with hypervisor type \" + hType + \", retrying one more time\");\n+                    continue;\n+                } else {\n+                    throw ex;\n+                }\n+            } finally {\n+                allocateRetry++;\n+            }\n+\n+            if (startVm) {\n+                try {\n+                    internalLbVm = startInternalLbVm(internalLbVm, _accountMgr.getSystemAccount(), User.UID_SYSTEM, params);\n+                    break;\n+                } catch (InsufficientCapacityException ex) {\n+                    if (startRetry < 2 && iter.hasNext()) {\n+                        s_logger.debug(\"Failed to start the Internal lb vm  \" + internalLbVm + \" with hypervisor type \" + hType + \", \" +\n+                                \"destroying it and recreating one more time\");\n+                        // destroy the internal lb vm\n+                        destroyInternalLbVm(internalLbVm.getId(), _accountMgr.getSystemAccount(), User.UID_SYSTEM);\n+                        continue;\n+                    } else {\n+                        throw ex;\n+                    }\n+                } finally {\n+                    startRetry++;\n+                }\n+            } else {\n+                //return stopped internal lb vm\n+                return internalLbVm;\n+            }\n+        }\n+        return internalLbVm;\n+    }\n+    \n+    \n+\n+    protected DomainRouterVO startInternalLbVm(DomainRouterVO internalLbVm, Account caller, long callerUserId, Map<Param, Object> params) \n+            throws StorageUnavailableException, InsufficientCapacityException,\n+            ConcurrentOperationException, ResourceUnavailableException {\n+        s_logger.debug(\"Starting Internal LB VM \" + internalLbVm);\n+        if (_itMgr.start(internalLbVm, params, _accountMgr.getUserIncludingRemoved(callerUserId), caller, null) != null) {\n+            if (internalLbVm.isStopPending()) {\n+                s_logger.info(\"Clear the stop pending flag of Internal LB VM \" + internalLbVm.getHostName() + \" after start router successfully!\");\n+                internalLbVm.setStopPending(false);\n+                internalLbVm = _internalLbVmDao.persist(internalLbVm);\n+            }\n+            return _internalLbVmDao.findById(internalLbVm.getId());\n+        } else {\n+            return null;\n+        }\n+    }\n+    \n+    \n+    protected List<HypervisorType> getHypervisors(DeployDestination dest, DeploymentPlan plan, \n+            List<HypervisorType> supportedHypervisors) throws InsufficientServerCapacityException {\n+        List<HypervisorType> hypervisors = new ArrayList<HypervisorType>();\n+\n+        HypervisorType defaults = _resourceMgr.getDefaultHypervisor(dest.getDataCenter().getId());\n+        if (defaults != HypervisorType.None) {\n+            hypervisors.add(defaults);\n+        } else {\n+            //if there is no default hypervisor, get it from the cluster\n+            hypervisors = _resourceMgr.getSupportedHypervisorTypes(dest.getDataCenter().getId(), true,\n+                plan.getPodId());\n+        }\n+\n+        //keep only elements defined in supported hypervisors\n+        StringBuilder hTypesStr = new StringBuilder();\n+        if (supportedHypervisors != null && !supportedHypervisors.isEmpty()) {\n+            hypervisors.retainAll(supportedHypervisors);\n+            for (HypervisorType hType : supportedHypervisors) {\n+                hTypesStr.append(hType).append(\" \");\n+            }\n+        }\n+\n+        if (hypervisors.isEmpty()) {\n+            throw new InsufficientServerCapacityException(\"Unable to create internal lb vm, \" +\n+                    \"there are no clusters in the zone \", DataCenter.class, dest.getDataCenter().getId());\n+        }\n+        return hypervisors;\n+    }\n+    \n+    @Override\n+    public boolean applyLoadBalancingRules(Network network, final List<LoadBalancingRule> rules, List<? extends VirtualRouter> internalLbVms) \n+            throws ResourceUnavailableException {\n+        if (rules == null || rules.isEmpty()) {\n+            s_logger.debug(\"No lb rules to be applied for network \" + network);\n+            return true;\n+        }\n+        \n+        //only one internal lb vm is supported per ip address at this time\n+        if (internalLbVms == null || internalLbVms.isEmpty()) {\n+            throw new CloudRuntimeException(\"Can't apply the lb rules on network \" + network + \" as the list of internal lb vms is empty\");\n+        }\n+        \n+        VirtualRouter lbVm = internalLbVms.get(0);\n+        if (lbVm.getState() == State.Running) {\n+            return sendLBRules(lbVm, rules, network.getId());\n+        } else if (lbVm.getState() == State.Stopped || lbVm.getState() == State.Stopping) {\n+            s_logger.debug(\"Internal LB VM \" + lbVm.getInstanceName() + \" is in \" + lbVm.getState() + \n+                    \", so not sending apply lb rules commands to the backend\");\n+            return true;\n+        } else {\n+            s_logger.warn(\"Unable to apply lb rules, Internal LB VM is not in the right state \" + lbVm.getState());\n+            throw new ResourceUnavailableException(\"Unable to apply lb rules; Internal LB VM is not in the right state\", DataCenter.class, lbVm.getDataCenterId());\n+        }\n+    }\n+    \n+    protected boolean sendLBRules(VirtualRouter internalLbVm, List<LoadBalancingRule> rules, long guestNetworkId) throws ResourceUnavailableException {\n+        Commands cmds = new Commands(OnError.Continue);\n+        createApplyLoadBalancingRulesCommands(rules, internalLbVm, cmds, guestNetworkId);\n+        return sendCommandsToInternalLbVm(internalLbVm, cmds);\n+    }\n+    \n+    \n+    protected boolean sendCommandsToInternalLbVm(final VirtualRouter internalLbVm, Commands cmds) throws AgentUnavailableException {\n+        Answer[] answers = null;\n+        try {\n+            answers = _agentMgr.send(internalLbVm.getHostId(), cmds);\n+        } catch (OperationTimedoutException e) {\n+            s_logger.warn(\"Timed Out\", e);\n+            throw new AgentUnavailableException(\"Unable to send commands to virtual router \", internalLbVm.getHostId(), e);\n+        }\n+\n+        if (answers == null) {\n+            return false;\n+        }\n+\n+        if (answers.length != cmds.size()) {\n+            return false;\n+        }\n+\n+        boolean result = true;\n+        if (answers.length > 0) {\n+            for (Answer answer : answers) {\n+                if (!answer.getResult()) {\n+                    result = false;\n+                    break;\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+    \n+    \n+    @Override\n+    public VirtualRouter startInternalLbVm(long internalLbVmId, Account caller, long callerUserId) \n+            throws StorageUnavailableException, InsufficientCapacityException,\n+            ConcurrentOperationException, ResourceUnavailableException {\n+        \n+        DomainRouterVO internalLbVm = _internalLbVmDao.findById(internalLbVmId);\n+        if (internalLbVm == null || internalLbVm.getRole() != Role.INTERNAL_LB_VM) {\n+            throw new InvalidParameterValueException(\"Can't find internal lb vm by id specified\");\n+        }\n+        \n+        return startInternalLbVm(internalLbVm, caller, callerUserId, null);\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/internal-loadbalancer/src/org/apache/cloudstack/network/lb/InternalLoadBalancerVMManagerImpl.java",
                "sha": "fe32a7ba26ff5bbf21b573ac885a2f1608a6492c",
                "status": "added"
            },
            {
                "additions": 124,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/internal-loadbalancer/test/org/apache/cloudstack/internallbelement/ElementChildTestConfiguration.java",
                "changes": 124,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/internal-loadbalancer/test/org/apache/cloudstack/internallbelement/ElementChildTestConfiguration.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "plugins/network-elements/internal-loadbalancer/test/org/apache/cloudstack/internallbelement/ElementChildTestConfiguration.java",
                "patch": "@@ -0,0 +1,124 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+// \n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.internallbelement;\n+\n+import java.io.IOException;\n+\n+import org.apache.cloudstack.lb.dao.ApplicationLoadBalancerRuleDao;\n+import org.apache.cloudstack.network.lb.InternalLoadBalancerVMManager;\n+import org.apache.cloudstack.test.utils.SpringUtils;\n+import org.mockito.Mockito;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.ComponentScan.Filter;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.FilterType;\n+import org.springframework.core.type.classreading.MetadataReader;\n+import org.springframework.core.type.classreading.MetadataReaderFactory;\n+import org.springframework.core.type.filter.TypeFilter;\n+\n+import com.cloud.configuration.ConfigurationManager;\n+import com.cloud.dc.dao.AccountVlanMapDaoImpl;\n+import com.cloud.dc.dao.DataCenterDao;\n+import com.cloud.network.NetworkManager;\n+import com.cloud.network.NetworkModel;\n+import com.cloud.network.dao.NetworkServiceMapDao;\n+import com.cloud.network.dao.PhysicalNetworkServiceProviderDao;\n+import com.cloud.network.dao.VirtualRouterProviderDao;\n+import com.cloud.user.AccountManager;\n+import com.cloud.vm.dao.DomainRouterDao;\n+\n+@Configuration\n+@ComponentScan(\n+    basePackageClasses={\n+        AccountVlanMapDaoImpl.class\n+    },\n+    includeFilters={@Filter(value=ElementChildTestConfiguration.Library.class, type=FilterType.CUSTOM)},\n+    useDefaultFilters=false\n+    )\n+\n+public class ElementChildTestConfiguration {\n+    public static class Library implements TypeFilter { \n+        @Bean\n+        public AccountManager accountManager() {\n+            return Mockito.mock(AccountManager.class);\n+        }\n+        \n+       \n+        @Bean\n+        public DomainRouterDao domainRouterDao() {\n+            return Mockito.mock(DomainRouterDao.class);\n+        }\n+        \n+        @Bean\n+        public VirtualRouterProviderDao virtualRouterProviderDao() {\n+            return Mockito.mock(VirtualRouterProviderDao.class);\n+        }\n+        \n+        @Bean\n+        public NetworkModel networkModel() {\n+            return Mockito.mock(NetworkModel.class);\n+        }\n+        \n+        \n+        @Bean\n+        public NetworkManager networkManager() {\n+            return Mockito.mock(NetworkManager.class);\n+        }\n+\n+        \n+        @Bean\n+        public PhysicalNetworkServiceProviderDao physicalNetworkServiceProviderDao() {\n+            return Mockito.mock(PhysicalNetworkServiceProviderDao.class);\n+        }\n+        \n+        @Bean\n+        public NetworkServiceMapDao networkServiceMapDao() {\n+            return Mockito.mock(NetworkServiceMapDao.class);\n+        }\n+        \n+        @Bean\n+        public InternalLoadBalancerVMManager internalLoadBalancerVMManager() {\n+            return Mockito.mock(InternalLoadBalancerVMManager.class);\n+        }\n+        \n+        @Bean\n+        public ConfigurationManager confugurationManager() {\n+            return Mockito.mock(ConfigurationManager.class);\n+        }\n+        \n+        \n+        @Bean\n+        public ApplicationLoadBalancerRuleDao applicationLoadBalancerRuleDao() {\n+            return Mockito.mock(ApplicationLoadBalancerRuleDao.class);\n+        }\n+        \n+        @Bean\n+        public DataCenterDao dataCenterDao() {\n+            return Mockito.mock(DataCenterDao.class);\n+        }\n+        \n+        \n+        \n+        @Override\n+        public boolean match(MetadataReader mdr, MetadataReaderFactory arg1) throws IOException {\n+            mdr.getClassMetadata().getClassName();\n+            ComponentScan cs = ElementChildTestConfiguration.class.getAnnotation(ComponentScan.class);\n+            return SpringUtils.includedInBasePackageClasses(mdr.getClassMetadata().getClassName(), cs);\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/internal-loadbalancer/test/org/apache/cloudstack/internallbelement/ElementChildTestConfiguration.java",
                "sha": "6959b951fc344b19e2343b9995ca00830709aa06",
                "status": "added"
            },
            {
                "additions": 190,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/internal-loadbalancer/test/org/apache/cloudstack/internallbelement/InternalLbElementServiceTest.java",
                "changes": 190,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/internal-loadbalancer/test/org/apache/cloudstack/internallbelement/InternalLbElementServiceTest.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "plugins/network-elements/internal-loadbalancer/test/org/apache/cloudstack/internallbelement/InternalLbElementServiceTest.java",
                "patch": "@@ -0,0 +1,190 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+// \n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.internallbelement;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.cloudstack.network.element.InternalLoadBalancerElementService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import com.cloud.exception.InvalidParameterValueException;\n+import com.cloud.network.VirtualRouterProvider;\n+import com.cloud.network.VirtualRouterProvider.VirtualRouterProviderType;\n+import com.cloud.network.dao.PhysicalNetworkServiceProviderDao;\n+import com.cloud.network.dao.PhysicalNetworkServiceProviderVO;\n+import com.cloud.network.dao.VirtualRouterProviderDao;\n+import com.cloud.network.element.VirtualRouterProviderVO;\n+import com.cloud.user.AccountManager;\n+import com.cloud.utils.component.ComponentContext;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(locations=\"classpath:/lb_element.xml\")\n+public class InternalLbElementServiceTest {\n+    //The interface to test\n+    @Inject InternalLoadBalancerElementService _lbElSvc;\n+    \n+    //Mocked interfaces\n+    @Inject AccountManager _accountMgr;\n+    @Inject VirtualRouterProviderDao _vrProviderDao;\n+    @Inject PhysicalNetworkServiceProviderDao _pNtwkProviderDao;\n+    \n+    long validElId = 1L;\n+    long nonExistingElId = 2L;\n+    long invalidElId = 3L; //not of VirtualRouterProviderType\n+    \n+    long validProviderId = 1L;\n+    long nonExistingProviderId = 2L;\n+    long invalidProviderId = 3L;\n+        \n+\n+    @Before\n+    public void setUp() {\n+        \n+        ComponentContext.initComponentsLifeCycle();\n+        VirtualRouterProviderVO validElement = new VirtualRouterProviderVO(1, VirtualRouterProviderType.InternalLbVm);\n+        VirtualRouterProviderVO invalidElement = new VirtualRouterProviderVO(1, VirtualRouterProviderType.VirtualRouter);\n+        \n+        Mockito.when(_vrProviderDao.findById(validElId)).thenReturn(validElement);\n+        Mockito.when(_vrProviderDao.findById(invalidElId)).thenReturn(invalidElement);\n+        \n+        Mockito.when(_vrProviderDao.persist(validElement)).thenReturn(validElement);\n+        \n+        Mockito.when(_vrProviderDao.findByNspIdAndType(validProviderId, VirtualRouterProviderType.InternalLbVm)).thenReturn(validElement);\n+        \n+        PhysicalNetworkServiceProviderVO validProvider = new PhysicalNetworkServiceProviderVO(1, \"InternalLoadBalancerElement\");\n+        PhysicalNetworkServiceProviderVO invalidProvider = new PhysicalNetworkServiceProviderVO(1, \"Invalid name!\");\n+\n+        Mockito.when(_pNtwkProviderDao.findById(validProviderId)).thenReturn(validProvider);\n+        Mockito.when(_pNtwkProviderDao.findById(invalidProviderId)).thenReturn(invalidProvider);\n+        \n+        Mockito.when(_vrProviderDao.persist(Mockito.any(VirtualRouterProviderVO.class))).thenReturn(validElement); \n+    }\n+    \n+    //TESTS FOR getInternalLoadBalancerElement METHOD\n+    \n+    \n+    @Test (expected = InvalidParameterValueException.class)\n+    public void findNonExistingVm() {\n+        String expectedExcText = null;\n+        try {\n+            _lbElSvc.getInternalLoadBalancerElement(nonExistingElId); \n+        } catch (InvalidParameterValueException e) {\n+            expectedExcText = e.getMessage();\n+            throw e;\n+        } finally {\n+            assertEquals(\"Test failed. The non-existing intenral lb provider was found\"\n+        + expectedExcText, expectedExcText, \"Unable to find InternalLoadBalancerElementService by id\");\n+        }\n+    }\n+    \n+    \n+    @Test (expected = InvalidParameterValueException.class)\n+    public void findInvalidVm() {\n+        String expectedExcText = null;\n+        try {\n+            _lbElSvc.getInternalLoadBalancerElement(invalidElId); \n+        } catch (InvalidParameterValueException e) {\n+            expectedExcText = e.getMessage();\n+            throw e;\n+        } finally {\n+            assertEquals(\"Test failed. The non-existing intenral lb provider was found\"\n+                    + expectedExcText, expectedExcText, \"Unable to find InternalLoadBalancerElementService by id\");\n+        }\n+    }\n+    \n+    \n+    @Test\n+    public void findValidVm() {\n+        VirtualRouterProvider provider = null;\n+        try {\n+            provider = _lbElSvc.getInternalLoadBalancerElement(validElId); \n+        } finally {\n+            assertNotNull(\"Test failed. Couldn't find the VR provider by the valid id\",provider); \n+        }\n+    }\n+    \n+    \n+    //TESTS FOR configureInternalLoadBalancerElement METHOD\n+    \n+    @Test (expected = InvalidParameterValueException.class)\n+    public void configureNonExistingVm() {\n+        \n+        _lbElSvc.configureInternalLoadBalancerElement(nonExistingElId, true); \n+        \n+    }\n+    \n+    \n+    @Test (expected = InvalidParameterValueException.class)\n+    public void ConfigureInvalidVm() {\n+        _lbElSvc.configureInternalLoadBalancerElement(invalidElId, true);    \n+    }\n+    \n+    \n+    @Test\n+    public void enableProvider() {\n+        VirtualRouterProvider provider = null;\n+        try {\n+            provider = _lbElSvc.configureInternalLoadBalancerElement(validElId, true); \n+        } finally {\n+            assertNotNull(\"Test failed. Couldn't find the VR provider by the valid id \",provider);\n+            assertTrue(\"Test failed. The provider wasn't eanbled \", provider.isEnabled()); \n+        }\n+    }\n+    \n+    @Test\n+    public void disableProvider() {\n+        VirtualRouterProvider provider = null;\n+        try {\n+            provider = _lbElSvc.configureInternalLoadBalancerElement(validElId, false); \n+        } finally {\n+            assertNotNull(\"Test failed. Couldn't find the VR provider by the valid id \",provider);\n+            assertFalse(\"Test failed. The provider wasn't disabled \", provider.isEnabled()); \n+        }\n+    } \n+    \n+    //TESTS FOR addInternalLoadBalancerElement METHOD\n+    \n+    @Test (expected = InvalidParameterValueException.class)\n+    public void addToNonExistingProvider() {\n+        \n+        _lbElSvc.addInternalLoadBalancerElement(nonExistingProviderId); \n+        \n+    }\n+    \n+    @Test (expected = InvalidParameterValueException.class)\n+    public void addToInvalidProvider() {\n+        _lbElSvc.addInternalLoadBalancerElement(invalidProviderId);   \n+    }\n+    \n+    @Test\n+    public void addToExistingProvider() {\n+        _lbElSvc.addInternalLoadBalancerElement(validProviderId);\n+    }\n+\n+}\n+\n+",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/internal-loadbalancer/test/org/apache/cloudstack/internallbelement/InternalLbElementServiceTest.java",
                "sha": "f0e951cdc7ab2ddc46be6fbc688337a1537e4464",
                "status": "added"
            },
            {
                "additions": 226,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/internal-loadbalancer/test/org/apache/cloudstack/internallbelement/InternalLbElementTest.java",
                "changes": 226,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/internal-loadbalancer/test/org/apache/cloudstack/internallbelement/InternalLbElementTest.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "plugins/network-elements/internal-loadbalancer/test/org/apache/cloudstack/internallbelement/InternalLbElementTest.java",
                "patch": "@@ -0,0 +1,226 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+// \n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.internallbelement;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.cloudstack.lb.ApplicationLoadBalancerRuleVO;\n+import org.apache.cloudstack.network.element.InternalLoadBalancerElement;\n+import org.apache.cloudstack.network.lb.InternalLoadBalancerVMManager;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import com.cloud.agent.api.to.LoadBalancerTO;\n+import com.cloud.configuration.ConfigurationManager;\n+import com.cloud.dc.DataCenter.NetworkType;\n+import com.cloud.dc.DataCenterVO;\n+import com.cloud.exception.ResourceUnavailableException;\n+import com.cloud.network.Network.Provider;\n+import com.cloud.network.Network.Service;\n+import com.cloud.network.VirtualRouterProvider.VirtualRouterProviderType;\n+import com.cloud.network.addr.PublicIp;\n+import com.cloud.network.dao.NetworkVO;\n+import com.cloud.network.dao.PhysicalNetworkServiceProviderDao;\n+import com.cloud.network.dao.PhysicalNetworkServiceProviderVO;\n+import com.cloud.network.dao.VirtualRouterProviderDao;\n+import com.cloud.network.element.VirtualRouterProviderVO;\n+import com.cloud.network.lb.LoadBalancingRule;\n+import com.cloud.network.rules.FirewallRule;\n+import com.cloud.network.rules.LoadBalancerContainer.Scheme;\n+import com.cloud.user.AccountManager;\n+import com.cloud.utils.component.ComponentContext;\n+import com.cloud.utils.net.Ip;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(locations=\"classpath:/lb_element.xml\")\n+public class InternalLbElementTest {\n+    //The class to test\n+    @Inject InternalLoadBalancerElement _lbEl;\n+    \n+    //Mocked interfaces\n+    @Inject AccountManager _accountMgr;\n+    @Inject VirtualRouterProviderDao _vrProviderDao;\n+    @Inject PhysicalNetworkServiceProviderDao _pNtwkProviderDao;\n+    @Inject InternalLoadBalancerVMManager _internalLbMgr;\n+    @Inject ConfigurationManager _configMgr;\n+    \n+    long validElId = 1L;\n+    long nonExistingElId = 2L;\n+    long invalidElId = 3L; //not of VirtualRouterProviderType\n+    long notEnabledElId = 4L;\n+    \n+    long validProviderId = 1L;\n+    long nonExistingProviderId = 2L;\n+    long invalidProviderId = 3L;\n+        \n+\n+    @Before\n+    public void setUp() {\n+        \n+        ComponentContext.initComponentsLifeCycle();\n+        VirtualRouterProviderVO validElement = new VirtualRouterProviderVO(1, VirtualRouterProviderType.InternalLbVm);\n+        validElement.setEnabled(true);\n+        VirtualRouterProviderVO invalidElement = new VirtualRouterProviderVO(1, VirtualRouterProviderType.VirtualRouter);\n+        VirtualRouterProviderVO notEnabledElement = new VirtualRouterProviderVO(1, VirtualRouterProviderType.InternalLbVm);\n+ \n+        Mockito.when(_vrProviderDao.findByNspIdAndType(validElId, VirtualRouterProviderType.InternalLbVm)).thenReturn(validElement);\n+        Mockito.when(_vrProviderDao.findByNspIdAndType(invalidElId, VirtualRouterProviderType.InternalLbVm)).thenReturn(invalidElement);\n+        Mockito.when(_vrProviderDao.findByNspIdAndType(notEnabledElId, VirtualRouterProviderType.InternalLbVm)).thenReturn(notEnabledElement);\n+\n+        Mockito.when(_vrProviderDao.persist(validElement)).thenReturn(validElement);\n+        \n+        Mockito.when(_vrProviderDao.findByNspIdAndType(validProviderId, VirtualRouterProviderType.InternalLbVm)).thenReturn(validElement);\n+        \n+        PhysicalNetworkServiceProviderVO validProvider = new PhysicalNetworkServiceProviderVO(1, \"InternalLoadBalancerElement\");\n+        PhysicalNetworkServiceProviderVO invalidProvider = new PhysicalNetworkServiceProviderVO(1, \"Invalid name!\");\n+\n+        Mockito.when(_pNtwkProviderDao.findById(validProviderId)).thenReturn(validProvider);\n+        Mockito.when(_pNtwkProviderDao.findById(invalidProviderId)).thenReturn(invalidProvider);\n+        \n+        Mockito.when(_vrProviderDao.persist(Mockito.any(VirtualRouterProviderVO.class))).thenReturn(validElement);\n+        \n+        DataCenterVO dc = new DataCenterVO\n+                (1L, null, null, null, null, null, null, null, null, null, NetworkType.Advanced, null, null);\n+        Mockito.when(_configMgr.getZone(Mockito.anyLong())).thenReturn(dc);\n+    }\n+    \n+    //TEST FOR getProvider() method\n+    \n+    @Test \n+    public void verifyProviderName() {  \n+       Provider pr = _lbEl.getProvider();\n+       assertEquals(\"Wrong provider is returned\", pr.getName(), Provider.InternalLbVm.getName());\n+    }\n+    \n+    //TEST FOR isReady() METHOD\n+    \n+    @Test \n+    public void verifyValidProviderState() {\n+       PhysicalNetworkServiceProviderVO provider = new PhysicalNetworkServiceProviderVO();\n+       provider = setId(provider, validElId);\n+       boolean isReady = _lbEl.isReady(provider);\n+       assertTrue(\"Valid provider is returned as not ready\", isReady);\n+    }\n+    \n+    \n+    @Test \n+    public void verifyNonExistingProviderState() {\n+       PhysicalNetworkServiceProviderVO provider = new PhysicalNetworkServiceProviderVO();\n+       provider = setId(provider, nonExistingElId);\n+       boolean isReady = _lbEl.isReady(provider);\n+       assertFalse(\"Non existing provider is returned as ready\", isReady);\n+    }\n+    \n+    \n+    @Test \n+    public void verifyInvalidProviderState() {\n+       PhysicalNetworkServiceProviderVO provider = new PhysicalNetworkServiceProviderVO();\n+       provider = setId(provider, invalidElId);\n+       boolean isReady = _lbEl.isReady(provider);\n+       assertFalse(\"Not valid provider is returned as ready\", isReady);\n+    }\n+    \n+    @Test \n+    public void verifyNotEnabledProviderState() {\n+       PhysicalNetworkServiceProviderVO provider = new PhysicalNetworkServiceProviderVO();\n+       provider = setId(provider, notEnabledElId);\n+       boolean isReady = _lbEl.isReady(provider);\n+       assertFalse(\"Not enabled provider is returned as ready\", isReady);\n+    }\n+    \n+    //TEST FOR canEnableIndividualServices METHOD\n+    @Test \n+    public void verifyCanEnableIndividualSvc() {  \n+       boolean result = _lbEl.canEnableIndividualServices();\n+       assertTrue(\"Wrong value is returned by canEnableIndividualSvc\", result);\n+    }\n+    \n+    //TEST FOR verifyServicesCombination METHOD\n+    @Test \n+    public void verifyServicesCombination() {  \n+       boolean result = _lbEl.verifyServicesCombination(new HashSet<Service>());\n+       assertTrue(\"Wrong value is returned by verifyServicesCombination\", result);\n+    }\n+    \n+    \n+    //TEST FOR applyIps METHOD\n+    @Test \n+    public void verifyApplyIps() throws ResourceUnavailableException {\n+       List<PublicIp> ips = new ArrayList<PublicIp>();\n+       boolean result = _lbEl.applyIps(new NetworkVO(), ips, new HashSet<Service>());\n+       assertTrue(\"Wrong value is returned by applyIps method\", result);\n+    }\n+    \n+    \n+    //TEST FOR updateHealthChecks METHOD\n+    @Test \n+    public void verifyUpdateHealthChecks() throws ResourceUnavailableException {\n+       List<LoadBalancerTO> check = _lbEl.updateHealthChecks(new NetworkVO(), new ArrayList<LoadBalancingRule>());\n+       assertNull(\"Wrong value is returned by updateHealthChecks method\", check);\n+    }\n+    \n+    //TEST FOR validateLBRule METHOD\n+    @Test \n+    public void verifyValidateLBRule() throws ResourceUnavailableException {\n+        ApplicationLoadBalancerRuleVO lb = new ApplicationLoadBalancerRuleVO(null, null, 22, 22, \"roundrobin\",\n+                1L, 1L, 1L, new Ip(\"10.10.10.1\"), 1L, Scheme.Internal);\n+        lb.setState(FirewallRule.State.Add);\n+        \n+        LoadBalancingRule rule = new LoadBalancingRule(lb, null,\n+                null, null, new Ip(\"10.10.10.1\"));\n+        \n+        \n+        boolean result = _lbEl.validateLBRule(new NetworkVO(), rule);\n+        assertTrue(\"Wrong value is returned by validateLBRule method\", result);\n+    }\n+    \n+    \n+    private static PhysicalNetworkServiceProviderVO setId(PhysicalNetworkServiceProviderVO vo, long id) {\n+        PhysicalNetworkServiceProviderVO voToReturn = vo;\n+        Class<?> c = voToReturn.getClass();\n+        try {\n+            Field f = c.getDeclaredField(\"id\");\n+            f.setAccessible(true);\n+            f.setLong(voToReturn, id);\n+        } catch (NoSuchFieldException ex) {\n+           return null;\n+        } catch (IllegalAccessException ex) {\n+            return null;\n+        }\n+        \n+        return voToReturn;\n+    }\n+    \n+    \n+    \n+}\n+\n+",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/internal-loadbalancer/test/org/apache/cloudstack/internallbelement/InternalLbElementTest.java",
                "sha": "f19612f6b0f4878e241c90e5c574f0b24cf3d3b2",
                "status": "added"
            },
            {
                "additions": 388,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/internal-loadbalancer/test/org/apache/cloudstack/internallbvmmgr/InternalLBVMManagerTest.java",
                "changes": 388,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/internal-loadbalancer/test/org/apache/cloudstack/internallbvmmgr/InternalLBVMManagerTest.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "plugins/network-elements/internal-loadbalancer/test/org/apache/cloudstack/internallbvmmgr/InternalLBVMManagerTest.java",
                "patch": "@@ -0,0 +1,388 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+// \n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.internallbvmmgr;\n+\n+import java.lang.reflect.Field;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.cloudstack.lb.ApplicationLoadBalancerRuleVO;\n+import org.apache.cloudstack.network.lb.InternalLoadBalancerVMManager;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import com.cloud.agent.AgentManager;\n+import com.cloud.agent.api.Answer;\n+import com.cloud.agent.manager.Commands;\n+import com.cloud.dc.DataCenter.NetworkType;\n+import com.cloud.dc.DataCenterVO;\n+import com.cloud.dc.dao.DataCenterDao;\n+import com.cloud.exception.AgentUnavailableException;\n+import com.cloud.exception.ConcurrentOperationException;\n+import com.cloud.exception.OperationTimedoutException;\n+import com.cloud.exception.ResourceUnavailableException;\n+import com.cloud.hypervisor.Hypervisor.HypervisorType;\n+import com.cloud.network.NetworkModel;\n+import com.cloud.network.dao.NetworkVO;\n+import com.cloud.network.lb.LoadBalancingRule;\n+import com.cloud.network.router.VirtualRouter;\n+import com.cloud.network.router.VirtualRouter.Role;\n+import com.cloud.network.rules.FirewallRule;\n+import com.cloud.network.rules.LoadBalancerContainer.Scheme;\n+import com.cloud.service.ServiceOfferingVO;\n+import com.cloud.service.dao.ServiceOfferingDao;\n+import com.cloud.user.Account;\n+import com.cloud.user.AccountManager;\n+import com.cloud.user.AccountVO;\n+import com.cloud.user.User;\n+import com.cloud.utils.component.ComponentContext;\n+import com.cloud.utils.exception.CloudRuntimeException;\n+import com.cloud.utils.net.Ip;\n+import com.cloud.vm.DomainRouterVO;\n+import com.cloud.vm.NicProfile;\n+import com.cloud.vm.NicVO;\n+import com.cloud.vm.VirtualMachine;\n+import com.cloud.vm.VirtualMachine.State;\n+import com.cloud.vm.VirtualMachineManager;\n+import com.cloud.vm.dao.DomainRouterDao;\n+import com.cloud.vm.dao.NicDao;\n+\n+/**\n+ * Set of unittests for InternalLoadBalancerVMManager\n+ *\n+ */\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(locations=\"classpath:/lb_mgr.xml\")\n+public class InternalLBVMManagerTest extends TestCase {\n+    //The interface to test\n+    @Inject InternalLoadBalancerVMManager _lbVmMgr;\n+    \n+    //Mocked interfaces\n+    @Inject AccountManager _accountMgr;\n+    @Inject ServiceOfferingDao _svcOffDao;\n+    @Inject DomainRouterDao _domainRouterDao;\n+    @Inject NicDao _nicDao;\n+    @Inject AgentManager _agentMgr;\n+    @Inject NetworkModel _ntwkModel;\n+    @Inject VirtualMachineManager _itMgr;\n+    @Inject DataCenterDao _dcDao;\n+    \n+    long validNtwkId = 1L;\n+    long invalidNtwkId = 2L;\n+    String requestedIp = \"10.1.1.1\";\n+    DomainRouterVO vm = null;\n+    NetworkVO ntwk = createNetwork();\n+    long validVmId = 1L;\n+    long invalidVmId = 2L;\n+    \n+    @Before\n+    public void setUp() {\n+        //mock system offering creation as it's used by configure() method called by initComponentsLifeCycle\n+        Mockito.when(_accountMgr.getAccount(1L)).thenReturn(new AccountVO());\n+        ServiceOfferingVO off = new ServiceOfferingVO(\"alena\", 1, 1,\n+                1, 1, 1, false, \"alena\", false, false, null, false, VirtualMachine.Type.InternalLoadBalancerVm, false);\n+        off = setId(off, 1);\n+        Mockito.when(_svcOffDao.persistSystemServiceOffering(Mockito.any(ServiceOfferingVO.class))).thenReturn(off);\n+        \n+        ComponentContext.initComponentsLifeCycle();\n+        \n+        vm = new DomainRouterVO(1L,off.getId(),1,\"alena\",1,HypervisorType.XenServer,1,1,1,\n+                false, 0,false,null,false,false,\n+                VirtualMachine.Type.InternalLoadBalancerVm, null);\n+        vm.setRole(Role.INTERNAL_LB_VM);\n+        vm = setId(vm, 1);\n+        vm.setPrivateIpAddress(\"10.2.2.2\");\n+        NicVO nic = new NicVO(\"somereserver\", 1L, 1L, VirtualMachine.Type.InternalLoadBalancerVm);\n+        nic.setIp4Address(requestedIp);\n+        \n+        List<DomainRouterVO> emptyList = new ArrayList<DomainRouterVO>();\n+        List<DomainRouterVO> nonEmptyList = new ArrayList<DomainRouterVO>();\n+        nonEmptyList.add(vm);\n+        \n+        Mockito.when(_domainRouterDao.listByNetworkAndRole(invalidNtwkId, Role.INTERNAL_LB_VM)).thenReturn(emptyList);\n+        Mockito.when(_domainRouterDao.listByNetworkAndRole(validNtwkId, Role.INTERNAL_LB_VM)).thenReturn(nonEmptyList);\n+        \n+        Mockito.when(_nicDao.findByNtwkIdAndInstanceId(validNtwkId, 1)).thenReturn(nic);\n+        Mockito.when(_nicDao.findByNtwkIdAndInstanceId(invalidNtwkId, 1)).thenReturn(nic);\n+\n+        Answer answer= new Answer(null, true, null);\n+        Answer[] answers = new Answer[1];\n+        answers[0] = answer;\n+        \n+        try {\n+            Mockito.when(_agentMgr.send(Mockito.anyLong(), Mockito.any(Commands.class))).thenReturn(answers);\n+        } catch (AgentUnavailableException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        } catch (OperationTimedoutException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        }\n+        \n+        createNetwork();\n+        Mockito.when(_ntwkModel.getNetwork(Mockito.anyLong())).thenReturn(ntwk);\n+\n+        \n+        Mockito.when(_itMgr.toNicTO(Mockito.any(NicProfile.class), Mockito.any(HypervisorType.class))).thenReturn(null);\n+        Mockito.when(_domainRouterDao.findById(Mockito.anyLong())).thenReturn(vm);\n+        DataCenterVO dc = new DataCenterVO\n+                (1L, null, null, null, null, null, null, null, null, null, NetworkType.Advanced, null, null);\n+        Mockito.when(_dcDao.findById(Mockito.anyLong())).thenReturn(dc);\n+        \n+        \n+        try {\n+            Mockito.when(_itMgr.expunge(Mockito.any(DomainRouterVO.class), Mockito.any(User.class), Mockito.any(Account.class))).thenReturn(true);\n+        } catch (ResourceUnavailableException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        } \n+        \n+        Mockito.when(_domainRouterDao.findById(validVmId)).thenReturn(vm);\n+        Mockito.when(_domainRouterDao.findById(invalidVmId)).thenReturn(null);\n+\n+    }\n+\n+    protected NetworkVO createNetwork() {\n+        ntwk = new NetworkVO();\n+        try {\n+            ntwk.setBroadcastUri(new URI(\"somevlan\"));\n+        } catch (URISyntaxException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        }\n+        ntwk = setId(ntwk, 1L);\n+        return ntwk;\n+    }\n+    \n+    //TESTS FOR findInternalLbVms METHOD\n+    \n+    @Test\n+    public void findInternalLbVmsForInvalidNetwork() {\n+        List<? extends VirtualRouter> vms = _lbVmMgr.findInternalLbVms(invalidNtwkId, new Ip(requestedIp));\n+        assertTrue(\"Non empty vm list was returned for invalid network id\", vms.isEmpty());\n+    }\n+    \n+    @Test\n+    public void findInternalLbVmsForValidNetwork() {\n+        List<? extends VirtualRouter> vms = _lbVmMgr.findInternalLbVms(validNtwkId, new Ip(requestedIp));\n+        assertTrue(\"Empty vm list was returned for valid network id\", !vms.isEmpty());\n+    }\n+    \n+    \n+    //TESTS FOR applyLoadBalancingRules METHOD\n+    @Test\n+    public void applyEmptyRulesSet() {\n+        boolean result = false;\n+        List<DomainRouterVO> vms = new ArrayList<DomainRouterVO>();\n+        try {\n+            result = _lbVmMgr.applyLoadBalancingRules(new NetworkVO(), new ArrayList<LoadBalancingRule>(), vms);\n+        } catch (ResourceUnavailableException e) {\n+\n+        } finally {\n+            assertTrue(\"Got failure when tried to apply empty list of rules\", result);\n+        }\n+    }\n+    \n+    @Test (expected = CloudRuntimeException.class)\n+    public void applyWithEmptyVmsSet() {\n+        boolean result = false;\n+        List<DomainRouterVO> vms = new ArrayList<DomainRouterVO>();\n+        List<LoadBalancingRule> rules = new ArrayList<LoadBalancingRule>();\n+        LoadBalancingRule rule = new LoadBalancingRule(null, null,\n+                null, null, null);\n+        \n+        rules.add(rule);\n+        try {\n+            result = _lbVmMgr.applyLoadBalancingRules(new NetworkVO(), rules, vms);\n+        } catch (ResourceUnavailableException e) {\n+        } finally {\n+            assertFalse(\"Got success when tried to apply with the empty internal lb vm list\", result);\n+        }\n+    }\n+    \n+    @Test (expected = ResourceUnavailableException.class)\n+    public void applyToVmInStartingState() throws ResourceUnavailableException {\n+        boolean result = false;\n+        List<DomainRouterVO> vms = new ArrayList<DomainRouterVO>();\n+        vm.setState(State.Starting);\n+        vms.add(vm);\n+        \n+        List<LoadBalancingRule> rules = new ArrayList<LoadBalancingRule>();\n+        LoadBalancingRule rule = new LoadBalancingRule(null, null,\n+                null, null, null);\n+        \n+        rules.add(rule);\n+        try {\n+            result = _lbVmMgr.applyLoadBalancingRules(new NetworkVO(), rules, vms);\n+        } finally {\n+            assertFalse(\"Rules were applied to vm in Starting state\", result);\n+        }\n+    }\n+    \n+    \n+    @Test\n+    public void applyToVmInStoppedState() throws ResourceUnavailableException {\n+        boolean result = false;\n+        List<DomainRouterVO> vms = new ArrayList<DomainRouterVO>();\n+        vm.setState(State.Stopped);\n+        vms.add(vm);\n+        \n+        List<LoadBalancingRule> rules = new ArrayList<LoadBalancingRule>();\n+        LoadBalancingRule rule = new LoadBalancingRule(null, null,\n+                null, null, null);\n+        \n+        rules.add(rule);\n+        try {\n+            result = _lbVmMgr.applyLoadBalancingRules(new NetworkVO(), rules, vms);\n+        } finally {\n+            assertTrue(\"Rules failed to apply to vm in Stopped state\", result);\n+        }\n+    }\n+    \n+    \n+    @Test\n+    public void applyToVmInStoppingState() throws ResourceUnavailableException {\n+        boolean result = false;\n+        List<DomainRouterVO> vms = new ArrayList<DomainRouterVO>();\n+        vm.setState(State.Stopping);\n+        vms.add(vm);\n+        \n+        List<LoadBalancingRule> rules = new ArrayList<LoadBalancingRule>();\n+        LoadBalancingRule rule = new LoadBalancingRule(null, null,\n+                null, null, null);\n+        \n+        rules.add(rule);\n+        try {\n+            result = _lbVmMgr.applyLoadBalancingRules(new NetworkVO(), rules, vms);\n+        } finally {\n+            assertTrue(\"Rules failed to apply to vm in Stopping state\", result);\n+        }\n+    }\n+    \n+    \n+    @Test\n+    public void applyToVmInRunningState() throws ResourceUnavailableException {\n+        boolean result = false;\n+        List<DomainRouterVO> vms = new ArrayList<DomainRouterVO>();\n+        vm.setState(State.Running);\n+        vms.add(vm);\n+        \n+        List<LoadBalancingRule> rules = new ArrayList<LoadBalancingRule>();\n+        ApplicationLoadBalancerRuleVO lb = new ApplicationLoadBalancerRuleVO(null, null, 22, 22, \"roundrobin\",\n+                1L, 1L, 1L, new Ip(requestedIp), 1L, Scheme.Internal);\n+        lb.setState(FirewallRule.State.Add);\n+        \n+        LoadBalancingRule rule = new LoadBalancingRule(lb, null,\n+                null, null, new Ip(requestedIp));\n+        \n+        rules.add(rule);\n+        \n+        ntwk.getId();\n+        \n+        try {\n+            result = _lbVmMgr.applyLoadBalancingRules(ntwk, rules, vms);\n+        } finally {\n+            assertTrue(\"Rules failed to apply to vm in Running state\", result);\n+        }\n+    }\n+    \n+    \n+    //TESTS FOR destroyInternalLbVm METHOD\n+    @Test\n+    public void destroyNonExistingVM() throws ResourceUnavailableException, ConcurrentOperationException {\n+        boolean result = false;\n+        \n+        try {\n+             result = _lbVmMgr.destroyInternalLbVm(invalidVmId, new AccountVO(), 1L);\n+        } finally {\n+            assertTrue(\"Failed to destroy non-existing vm\", result);\n+        }\n+    }\n+    \n+    @Test\n+    public void destroyExistingVM() throws ResourceUnavailableException, ConcurrentOperationException {\n+        boolean result = false;\n+        \n+        try {\n+             result = _lbVmMgr.destroyInternalLbVm(validVmId, new AccountVO(), 1L);\n+        } finally {\n+            assertTrue(\"Failed to destroy valid vm\", result);\n+        }\n+    }\n+    \n+    \n+    private static ServiceOfferingVO setId(ServiceOfferingVO vo, long id) {\n+        ServiceOfferingVO voToReturn = vo;\n+        Class<?> c = voToReturn.getClass();\n+        try {\n+            Field f = c.getSuperclass().getDeclaredField(\"id\");\n+            f.setAccessible(true);\n+            f.setLong(voToReturn, id);\n+        } catch (NoSuchFieldException ex) {\n+           return null;\n+        } catch (IllegalAccessException ex) {\n+            return null;\n+        }\n+        \n+        return voToReturn;\n+    }\n+    \n+    \n+    private static NetworkVO setId(NetworkVO vo, long id) {\n+        NetworkVO voToReturn = vo;\n+        Class<?> c = voToReturn.getClass();\n+        try {\n+            Field f = c.getDeclaredField(\"id\");\n+            f.setAccessible(true);\n+            f.setLong(voToReturn, id);\n+        } catch (NoSuchFieldException ex) {\n+           return null;\n+        } catch (IllegalAccessException ex) {\n+            return null;\n+        }\n+        \n+        return voToReturn;\n+    }\n+    \n+    private static DomainRouterVO setId(DomainRouterVO vo, long id) {\n+        DomainRouterVO voToReturn = vo;\n+        Class<?> c = voToReturn.getClass();\n+        try {\n+            Field f = c.getSuperclass().getDeclaredField(\"id\");\n+            f.setAccessible(true);\n+            f.setLong(voToReturn, id);\n+        } catch (NoSuchFieldException ex) {\n+           return null;\n+        } catch (IllegalAccessException ex) {\n+            return null;\n+        }\n+        \n+        return voToReturn;\n+    }\n+    \n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/internal-loadbalancer/test/org/apache/cloudstack/internallbvmmgr/InternalLBVMManagerTest.java",
                "sha": "a19a82e30c1c8944ce26182d3e19ae11c40d874f",
                "status": "added"
            },
            {
                "additions": 291,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/internal-loadbalancer/test/org/apache/cloudstack/internallbvmmgr/InternalLBVMServiceTest.java",
                "changes": 291,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/internal-loadbalancer/test/org/apache/cloudstack/internallbvmmgr/InternalLBVMServiceTest.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "plugins/network-elements/internal-loadbalancer/test/org/apache/cloudstack/internallbvmmgr/InternalLBVMServiceTest.java",
                "patch": "@@ -0,0 +1,291 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+// \n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.internallbvmmgr;\n+\n+import java.lang.reflect.Field;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.cloudstack.network.lb.InternalLoadBalancerVMService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import com.cloud.deploy.DeploymentPlan;\n+import com.cloud.exception.ConcurrentOperationException;\n+import com.cloud.exception.InsufficientCapacityException;\n+import com.cloud.exception.InvalidParameterValueException;\n+import com.cloud.exception.OperationTimedoutException;\n+import com.cloud.exception.ResourceUnavailableException;\n+import com.cloud.exception.StorageUnavailableException;\n+import com.cloud.hypervisor.Hypervisor.HypervisorType;\n+import com.cloud.network.router.VirtualRouter;\n+import com.cloud.network.router.VirtualRouter.Role;\n+import com.cloud.service.ServiceOfferingVO;\n+import com.cloud.service.dao.ServiceOfferingDao;\n+import com.cloud.user.Account;\n+import com.cloud.user.AccountManager;\n+import com.cloud.user.AccountVO;\n+import com.cloud.user.User;\n+import com.cloud.utils.component.ComponentContext;\n+import com.cloud.vm.DomainRouterVO;\n+import com.cloud.vm.VirtualMachine;\n+import com.cloud.vm.VirtualMachineManager;\n+import com.cloud.vm.dao.DomainRouterDao;\n+\n+/**\n+ * Set of unittests for InternalLoadBalancerVMService\n+ *\n+ */\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(locations=\"classpath:/lb_svc.xml\")\n+@SuppressWarnings(\"unchecked\")\n+public class InternalLBVMServiceTest extends TestCase {\n+    //The interface to test\n+    @Inject InternalLoadBalancerVMService _lbVmSvc;\n+    \n+    //Mocked interfaces\n+    @Inject AccountManager _accountMgr;\n+    @Inject ServiceOfferingDao _svcOffDao;\n+    @Inject DomainRouterDao _domainRouterDao;\n+    @Inject VirtualMachineManager _itMgr;\n+    \n+    long validVmId = 1L;\n+    long nonExistingVmId = 2L;\n+    long nonInternalLbVmId = 3L;\n+    \n+    @Before\n+    public void setUp() {\n+        //mock system offering creation as it's used by configure() method called by initComponentsLifeCycle\n+        Mockito.when(_accountMgr.getAccount(1L)).thenReturn(new AccountVO());\n+        ServiceOfferingVO off = new ServiceOfferingVO(\"alena\", 1, 1,\n+                1, 1, 1, false, \"alena\", false, false, null, false, VirtualMachine.Type.InternalLoadBalancerVm, false);\n+        off = setId(off, 1);\n+        Mockito.when(_svcOffDao.persistSystemServiceOffering(Mockito.any(ServiceOfferingVO.class))).thenReturn(off);\n+        \n+        ComponentContext.initComponentsLifeCycle();\n+        \n+        DomainRouterVO validVm = new DomainRouterVO(validVmId,off.getId(),1,\"alena\",1,HypervisorType.XenServer,1,1,1,\n+                false, 0,false,null,false,false,\n+                VirtualMachine.Type.InternalLoadBalancerVm, null);\n+        validVm.setRole(Role.INTERNAL_LB_VM);\n+        DomainRouterVO nonInternalLbVm = new DomainRouterVO(validVmId,off.getId(),1,\"alena\",1,HypervisorType.XenServer,1,1,1,\n+                false, 0,false,null,false,false,\n+                VirtualMachine.Type.DomainRouter, null);\n+        nonInternalLbVm.setRole(Role.VIRTUAL_ROUTER);\n+        \n+        Mockito.when(_domainRouterDao.findById(validVmId)).thenReturn(validVm);\n+        Mockito.when(_domainRouterDao.findById(nonExistingVmId)).thenReturn(null);\n+        Mockito.when(_domainRouterDao.findById(nonInternalLbVmId)).thenReturn(nonInternalLbVm);\n+        \n+        try {\n+            Mockito.when(_itMgr.start(Mockito.any(DomainRouterVO.class),\n+                    Mockito.any(Map.class), Mockito.any(User.class), Mockito.any(Account.class), Mockito.any(DeploymentPlan.class))).thenReturn(validVm);\n+        } catch (InsufficientCapacityException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        } catch (ResourceUnavailableException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        }\n+        \n+        try {\n+            Mockito.when(_itMgr.advanceStop(Mockito.any(DomainRouterVO.class), Mockito.any(Boolean.class), Mockito.any(User.class), Mockito.any(Account.class))).thenReturn(true);\n+        } catch (ResourceUnavailableException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        } catch (OperationTimedoutException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        } catch (ConcurrentOperationException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        }\n+\n+    }\n+    \n+    //TESTS FOR START COMMAND\n+    \n+    \n+    @Test (expected = InvalidParameterValueException.class)\n+    public void startNonExistingVm() {\n+        String expectedExcText = null;\n+        try {\n+            _lbVmSvc.startInternalLbVm(nonExistingVmId, _accountMgr.getAccount(1L), 1L);\n+        } catch (StorageUnavailableException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        } catch (InsufficientCapacityException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        } catch (ConcurrentOperationException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        } catch (ResourceUnavailableException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        } catch (InvalidParameterValueException e) {\n+            expectedExcText = e.getMessage();\n+            throw e;\n+        } finally {\n+            assertEquals(\"Test failed. The non-existing internal lb vm was attempted to start\"\n+        + expectedExcText, expectedExcText, \"Can't find internal lb vm by id specified\");\n+        }\n+    }\n+    \n+    @Test (expected = InvalidParameterValueException.class)\n+    public void startNonInternalLbVmVm() {\n+        String expectedExcText = null;\n+        try {\n+            _lbVmSvc.startInternalLbVm(nonInternalLbVmId, _accountMgr.getAccount(1L), 1L);\n+        } catch (StorageUnavailableException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        } catch (InsufficientCapacityException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        } catch (ConcurrentOperationException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        } catch (ResourceUnavailableException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        }catch (InvalidParameterValueException e) {\n+            expectedExcText = e.getMessage();\n+            throw e;\n+        } finally {\n+            assertEquals(\"Test failed. The existing vm of not Internal lb vm type was attempted to start\"\n+        + expectedExcText, expectedExcText, \"Can't find internal lb vm by id specified\");\n+        }\n+    }\n+    \n+    @Test\n+    public void startValidLbVmVm() {\n+        VirtualRouter vr = null;\n+        try {\n+            vr = _lbVmSvc.startInternalLbVm(validVmId, _accountMgr.getAccount(1L), 1L);\n+        } catch (StorageUnavailableException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        } catch (InsufficientCapacityException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        } catch (ConcurrentOperationException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        } catch (ResourceUnavailableException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        } finally {\n+            assertNotNull(\"Internal LB vm is null which means it failed to start \" + vr, vr);\n+        }\n+    }\n+    \n+    \n+    //TEST FOR STOP COMMAND\n+    @Test (expected = InvalidParameterValueException.class)\n+    public void stopNonExistingVm() {\n+        String expectedExcText = null;\n+        try {\n+            _lbVmSvc.stopInternalLbVm(nonExistingVmId, false,_accountMgr.getAccount(1L), 1L);\n+        } catch (StorageUnavailableException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        } catch (ConcurrentOperationException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        } catch (ResourceUnavailableException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        } catch (InvalidParameterValueException e) {\n+            expectedExcText = e.getMessage();\n+            throw e;\n+        } finally {\n+            assertEquals(\"Test failed. The non-existing internal lb vm was attempted to stop\"\n+        + expectedExcText, expectedExcText, \"Can't find internal lb vm by id specified\");\n+        }\n+    }\n+    \n+    \n+    @Test (expected = InvalidParameterValueException.class)\n+    public void stopNonInternalLbVmVm() {\n+        String expectedExcText = null;\n+        try {\n+            _lbVmSvc.stopInternalLbVm(nonInternalLbVmId, false, _accountMgr.getAccount(1L), 1L);\n+        } catch (StorageUnavailableException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        } catch (ConcurrentOperationException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        } catch (ResourceUnavailableException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        }catch (InvalidParameterValueException e) {\n+            expectedExcText = e.getMessage();\n+            throw e;\n+        } finally {\n+            assertEquals(\"Test failed. The existing vm of not Internal lb vm type was attempted to stop\"\n+        + expectedExcText, expectedExcText, \"Can't find internal lb vm by id specified\");\n+        }\n+    }\n+    \n+    \n+    @Test\n+    public void stopValidLbVmVm() {\n+        VirtualRouter vr = null;\n+        try {\n+            vr = _lbVmSvc.stopInternalLbVm(validVmId, false, _accountMgr.getAccount(1L), 1L);\n+        } catch (StorageUnavailableException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        } catch (ConcurrentOperationException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        } catch (ResourceUnavailableException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        } finally {\n+            assertNotNull(\"Internal LB vm is null which means it failed to stop \" + vr, vr);\n+        }\n+    }\n+    \n+    \n+    \n+    private static ServiceOfferingVO setId(ServiceOfferingVO vo, long id) {\n+        ServiceOfferingVO voToReturn = vo;\n+        Class<?> c = voToReturn.getClass();\n+        try {\n+            Field f = c.getSuperclass().getDeclaredField(\"id\");\n+            f.setAccessible(true);\n+            f.setLong(voToReturn, id);\n+        } catch (NoSuchFieldException ex) {\n+           return null;\n+        } catch (IllegalAccessException ex) {\n+            return null;\n+        }\n+        \n+        return voToReturn;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/internal-loadbalancer/test/org/apache/cloudstack/internallbvmmgr/InternalLBVMServiceTest.java",
                "sha": "75f54faf8f059fc154a027c3efddad55a8732480",
                "status": "added"
            },
            {
                "additions": 170,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/internal-loadbalancer/test/org/apache/cloudstack/internallbvmmgr/LbChildTestConfiguration.java",
                "changes": 170,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/internal-loadbalancer/test/org/apache/cloudstack/internallbvmmgr/LbChildTestConfiguration.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "plugins/network-elements/internal-loadbalancer/test/org/apache/cloudstack/internallbvmmgr/LbChildTestConfiguration.java",
                "patch": "@@ -0,0 +1,170 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+// \n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.internallbvmmgr;\n+\n+import java.io.IOException;\n+\n+import org.apache.cloudstack.lb.dao.ApplicationLoadBalancerRuleDao;\n+import org.apache.cloudstack.test.utils.SpringUtils;\n+import org.mockito.Mockito;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.ComponentScan.Filter;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.FilterType;\n+import org.springframework.core.type.classreading.MetadataReader;\n+import org.springframework.core.type.classreading.MetadataReaderFactory;\n+import org.springframework.core.type.filter.TypeFilter;\n+\n+import com.cloud.agent.AgentManager;\n+import com.cloud.configuration.dao.ConfigurationDao;\n+import com.cloud.dc.dao.AccountVlanMapDaoImpl;\n+import com.cloud.dc.dao.DataCenterDao;\n+import com.cloud.network.NetworkManager;\n+import com.cloud.network.NetworkModel;\n+import com.cloud.network.dao.NetworkDao;\n+import com.cloud.network.dao.PhysicalNetworkServiceProviderDao;\n+import com.cloud.network.dao.VirtualRouterProviderDao;\n+import com.cloud.network.lb.LoadBalancingRulesManager;\n+import com.cloud.offerings.dao.NetworkOfferingDao;\n+import com.cloud.resource.ResourceManager;\n+import com.cloud.server.ConfigurationServer;\n+import com.cloud.service.dao.ServiceOfferingDao;\n+import com.cloud.storage.dao.VMTemplateDao;\n+import com.cloud.user.AccountManager;\n+import com.cloud.vm.VirtualMachineManager;\n+import com.cloud.vm.dao.DomainRouterDao;\n+import com.cloud.vm.dao.NicDao;\n+\n+@Configuration\n+@ComponentScan(\n+    basePackageClasses={\n+        AccountVlanMapDaoImpl.class\n+    },\n+    includeFilters={@Filter(value=LbChildTestConfiguration.Library.class, type=FilterType.CUSTOM)},\n+    useDefaultFilters=false\n+    )\n+\n+    public class LbChildTestConfiguration {\n+        \n+        public static class Library implements TypeFilter {\n+            \n+          \n+            @Bean\n+            public AccountManager accountManager() {\n+                return Mockito.mock(AccountManager.class);\n+            }\n+            \n+            @Bean\n+            public VirtualMachineManager virtualMachineManager() {\n+                return Mockito.mock(VirtualMachineManager.class);\n+            }\n+            \n+            @Bean\n+            public DomainRouterDao domainRouterDao() {\n+                return Mockito.mock(DomainRouterDao.class);\n+            }\n+            \n+            @Bean\n+            public ConfigurationDao configurationDao() {\n+                return Mockito.mock(ConfigurationDao.class);\n+            }\n+            \n+            @Bean\n+            public VirtualRouterProviderDao virtualRouterProviderDao() {\n+                return Mockito.mock(VirtualRouterProviderDao.class);\n+            }\n+            \n+            @Bean\n+            public ApplicationLoadBalancerRuleDao applicationLoadBalancerRuleDao() {\n+                return Mockito.mock(ApplicationLoadBalancerRuleDao.class);\n+            }\n+            \n+            @Bean\n+            public NetworkModel networkModel() {\n+                return Mockito.mock(NetworkModel.class);\n+            }\n+            \n+            @Bean\n+            public LoadBalancingRulesManager loadBalancingRulesManager() {\n+                return Mockito.mock(LoadBalancingRulesManager.class);\n+            }\n+            \n+            @Bean\n+            public NicDao nicDao() {\n+                return Mockito.mock(NicDao.class);\n+            }\n+            \n+            @Bean\n+            public NetworkDao networkDao() {\n+                return Mockito.mock(NetworkDao.class);\n+            }\n+            \n+            @Bean\n+            public NetworkManager networkManager() {\n+                return Mockito.mock(NetworkManager.class);\n+            }\n+            \n+            @Bean\n+            public ServiceOfferingDao serviceOfferingDao() {\n+                return Mockito.mock(ServiceOfferingDao.class);\n+            }\n+            \n+            @Bean\n+            public PhysicalNetworkServiceProviderDao physicalNetworkServiceProviderDao() {\n+                return Mockito.mock(PhysicalNetworkServiceProviderDao.class);\n+            }\n+            \n+            @Bean\n+            public NetworkOfferingDao networkOfferingDao() {\n+                return Mockito.mock(NetworkOfferingDao.class);\n+            }\n+            \n+            @Bean\n+            public VMTemplateDao vmTemplateDao() {\n+                return Mockito.mock(VMTemplateDao.class);\n+            }\n+            \n+            @Bean\n+            public ResourceManager resourceManager() {\n+                return Mockito.mock(ResourceManager.class);\n+            }\n+            \n+            @Bean\n+            public AgentManager agentManager() {\n+                return Mockito.mock(AgentManager.class);\n+            }\n+            \n+            @Bean\n+            public DataCenterDao dataCenterDao() {\n+                return Mockito.mock(DataCenterDao.class);\n+            }\n+            \n+            @Bean\n+            public ConfigurationServer configurationServer() {\n+                return Mockito.mock(ConfigurationServer.class);\n+            }\n+            \n+            @Override\n+            public boolean match(MetadataReader mdr, MetadataReaderFactory arg1) throws IOException {\n+                mdr.getClassMetadata().getClassName();\n+                ComponentScan cs = LbChildTestConfiguration.class.getAnnotation(ComponentScan.class);\n+                return SpringUtils.includedInBasePackageClasses(mdr.getClassMetadata().getClassName(), cs);\n+            }\n+    \n+        }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/internal-loadbalancer/test/org/apache/cloudstack/internallbvmmgr/LbChildTestConfiguration.java",
                "sha": "0f24f963ae6074eac187784b9df864e82450f3ec",
                "status": "added"
            },
            {
                "additions": 46,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/internal-loadbalancer/test/resources/lb_element.xml",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/internal-loadbalancer/test/resources/lb_element.xml?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "plugins/network-elements/internal-loadbalancer/test/resources/lb_element.xml",
                "patch": "@@ -0,0 +1,46 @@\n+<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor \n+  license agreements. See the NOTICE file distributed with this work for additional \n+  information regarding copyright ownership. The ASF licenses this file to \n+  you under the Apache License, Version 2.0 (the \"License\"); you may not use \n+  this file except in compliance with the License. You may obtain a copy of \n+  the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required \n+  by applicable law or agreed to in writing, software distributed under the \n+  License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS \n+  OF ANY KIND, either express or implied. See the License for the specific \n+  language governing permissions and limitations under the License. -->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\"\n+  xmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n+  xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+                      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n+                      http://www.springframework.org/schema/tx \n+                      http://www.springframework.org/schema/tx/spring-tx-3.0.xsd\n+                      http://www.springframework.org/schema/aop\n+                      http://www.springframework.org/schema/aop/spring-aop-3.0.xsd\n+                      http://www.springframework.org/schema/context\n+                      http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n+\n+     <context:annotation-config />\n+\n+    <!-- @DB support -->\n+      \n+  <bean id=\"componentContext\" class=\"com.cloud.utils.component.ComponentContext\" />\n+\n+  <bean id=\"transactionContextBuilder\" class=\"com.cloud.utils.db.TransactionContextBuilder\" />\n+  <bean id=\"actionEventInterceptor\" class=\"com.cloud.event.ActionEventInterceptor\" />\n+  <bean id=\"instantiatePostProcessor\" class=\"com.cloud.utils.component.ComponentInstantiationPostProcessor\">\n+    <property name=\"Interceptors\">\n+        <list>\n+            <ref bean=\"transactionContextBuilder\" />\n+            <ref bean=\"actionEventInterceptor\" />\n+        </list>\n+    </property>\n+  </bean>\n+\n+    <bean id=\"InternalLoadBalancerElementService\" class=\"org.apache.cloudstack.network.element.InternalLoadBalancerElement\">\n+        <property name=\"name\" value=\"InternalLoadBalancerElementService\"/>\n+    </bean>\n+  \n+    <bean class=\"org.apache.cloudstack.internallbelement.ElementChildTestConfiguration\" />\n+    \n+</beans>",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/internal-loadbalancer/test/resources/lb_element.xml",
                "sha": "5dec9c314f6133176a23b036c0883cb93a9a4ef3",
                "status": "added"
            },
            {
                "additions": 46,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/internal-loadbalancer/test/resources/lb_mgr.xml",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/internal-loadbalancer/test/resources/lb_mgr.xml?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "plugins/network-elements/internal-loadbalancer/test/resources/lb_mgr.xml",
                "patch": "@@ -0,0 +1,46 @@\n+<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor \n+  license agreements. See the NOTICE file distributed with this work for additional \n+  information regarding copyright ownership. The ASF licenses this file to \n+  you under the Apache License, Version 2.0 (the \"License\"); you may not use \n+  this file except in compliance with the License. You may obtain a copy of \n+  the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required \n+  by applicable law or agreed to in writing, software distributed under the \n+  License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS \n+  OF ANY KIND, either express or implied. See the License for the specific \n+  language governing permissions and limitations under the License. -->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\"\n+  xmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n+  xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+                      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n+                      http://www.springframework.org/schema/tx \n+                      http://www.springframework.org/schema/tx/spring-tx-3.0.xsd\n+                      http://www.springframework.org/schema/aop\n+                      http://www.springframework.org/schema/aop/spring-aop-3.0.xsd\n+                      http://www.springframework.org/schema/context\n+                      http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n+\n+     <context:annotation-config />\n+\n+    <!-- @DB support -->\n+      \n+  <bean id=\"componentContext\" class=\"com.cloud.utils.component.ComponentContext\" />\n+\n+  <bean id=\"transactionContextBuilder\" class=\"com.cloud.utils.db.TransactionContextBuilder\" />\n+  <bean id=\"actionEventInterceptor\" class=\"com.cloud.event.ActionEventInterceptor\" />\n+  <bean id=\"instantiatePostProcessor\" class=\"com.cloud.utils.component.ComponentInstantiationPostProcessor\">\n+    <property name=\"Interceptors\">\n+        <list>\n+            <ref bean=\"transactionContextBuilder\" />\n+            <ref bean=\"actionEventInterceptor\" />\n+        </list>\n+    </property>\n+  </bean>\n+\n+    <bean id=\"InternalLoadBalancerVMManager\" class=\"org.apache.cloudstack.network.lb.InternalLoadBalancerVMManagerImpl\">\n+        <property name=\"name\" value=\"InternalLoadBalancerVMManager\"/>\n+    </bean>\n+  \n+    <bean class=\"org.apache.cloudstack.internallbvmmgr.LbChildTestConfiguration\" />\n+    \n+</beans>",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/internal-loadbalancer/test/resources/lb_mgr.xml",
                "sha": "1ad6403861cdbf422bb0a250294e922702750799",
                "status": "added"
            },
            {
                "additions": 46,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/internal-loadbalancer/test/resources/lb_svc.xml",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/internal-loadbalancer/test/resources/lb_svc.xml?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "plugins/network-elements/internal-loadbalancer/test/resources/lb_svc.xml",
                "patch": "@@ -0,0 +1,46 @@\n+<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor \n+  license agreements. See the NOTICE file distributed with this work for additional \n+  information regarding copyright ownership. The ASF licenses this file to \n+  you under the Apache License, Version 2.0 (the \"License\"); you may not use \n+  this file except in compliance with the License. You may obtain a copy of \n+  the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required \n+  by applicable law or agreed to in writing, software distributed under the \n+  License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS \n+  OF ANY KIND, either express or implied. See the License for the specific \n+  language governing permissions and limitations under the License. -->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\"\n+  xmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n+  xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+                      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n+                      http://www.springframework.org/schema/tx \n+                      http://www.springframework.org/schema/tx/spring-tx-3.0.xsd\n+                      http://www.springframework.org/schema/aop\n+                      http://www.springframework.org/schema/aop/spring-aop-3.0.xsd\n+                      http://www.springframework.org/schema/context\n+                      http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n+\n+     <context:annotation-config />\n+\n+    <!-- @DB support -->\n+      \n+  <bean id=\"componentContext\" class=\"com.cloud.utils.component.ComponentContext\" />\n+\n+  <bean id=\"transactionContextBuilder\" class=\"com.cloud.utils.db.TransactionContextBuilder\" />\n+  <bean id=\"actionEventInterceptor\" class=\"com.cloud.event.ActionEventInterceptor\" />\n+  <bean id=\"instantiatePostProcessor\" class=\"com.cloud.utils.component.ComponentInstantiationPostProcessor\">\n+    <property name=\"Interceptors\">\n+        <list>\n+            <ref bean=\"transactionContextBuilder\" />\n+            <ref bean=\"actionEventInterceptor\" />\n+        </list>\n+    </property>\n+  </bean>\n+\n+    <bean id=\"InternalLoadBalancerVMService\" class=\"org.apache.cloudstack.network.lb.InternalLoadBalancerVMManagerImpl\">\n+        <property name=\"name\" value=\"InternalLoadBalancerVMService\"/>\n+    </bean>\n+  \n+    <bean class=\"org.apache.cloudstack.internallbvmmgr.LbChildTestConfiguration\" />\n+    \n+</beans>",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/internal-loadbalancer/test/resources/lb_svc.xml",
                "sha": "fa822f3530261c7877fc62817f7e4a75413fa540",
                "status": "added"
            },
            {
                "additions": 75,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/netscaler/src/com/cloud/network/element/NetscalerElement.java",
                "changes": 108,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/netscaler/src/com/cloud/network/element/NetscalerElement.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 33,
                "filename": "plugins/network-elements/netscaler/src/com/cloud/network/element/NetscalerElement.java",
                "patch": "@@ -16,6 +16,22 @@\n // under the License.\n package com.cloud.network.element;\n \n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.ejb.Local;\n+import javax.inject.Inject;\n+\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.network.ExternalNetworkDeviceManager.NetworkDevice;\n+import org.apache.cloudstack.region.gslb.GslbServiceProvider;\n+import org.apache.log4j.Logger;\n+\n import com.cloud.agent.AgentManager;\n import com.cloud.agent.api.Answer;\n import com.cloud.agent.api.routing.GlobalLoadBalancerConfigCommand;\n@@ -27,7 +43,11 @@\n import com.cloud.agent.api.to.LoadBalancerTO;\n import com.cloud.agent.api.to.StaticNatRuleTO;\n import com.cloud.api.ApiDBUtils;\n-import com.cloud.api.commands.*;\n+import com.cloud.api.commands.AddNetscalerLoadBalancerCmd;\n+import com.cloud.api.commands.ConfigureNetscalerLoadBalancerCmd;\n+import com.cloud.api.commands.DeleteNetscalerLoadBalancerCmd;\n+import com.cloud.api.commands.ListNetscalerLoadBalancerNetworksCmd;\n+import com.cloud.api.commands.ListNetscalerLoadBalancersCmd;\n import com.cloud.api.response.NetscalerLoadBalancerResponse;\n import com.cloud.configuration.Config;\n import com.cloud.configuration.ConfigurationManager;\n@@ -39,27 +59,48 @@\n import com.cloud.dc.dao.DataCenterDao;\n import com.cloud.dc.dao.DataCenterIpAddressDao;\n import com.cloud.deploy.DeployDestination;\n-import com.cloud.exception.*;\n+import com.cloud.exception.ConcurrentOperationException;\n+import com.cloud.exception.InsufficientCapacityException;\n+import com.cloud.exception.InsufficientNetworkCapacityException;\n+import com.cloud.exception.InvalidParameterValueException;\n+import com.cloud.exception.ResourceUnavailableException;\n import com.cloud.host.Host;\n import com.cloud.host.HostVO;\n import com.cloud.host.dao.HostDao;\n import com.cloud.host.dao.HostDetailsDao;\n-import com.cloud.network.*;\n+import com.cloud.network.ExternalLoadBalancerDeviceManager;\n+import com.cloud.network.ExternalLoadBalancerDeviceManagerImpl;\n+import com.cloud.network.IpAddress;\n+import com.cloud.network.NetScalerPodVO;\n+import com.cloud.network.Network;\n import com.cloud.network.Network.Capability;\n import com.cloud.network.Network.Provider;\n import com.cloud.network.Network.Service;\n+import com.cloud.network.NetworkModel;\n import com.cloud.network.Networks.TrafficType;\n+import com.cloud.network.PhysicalNetwork;\n+import com.cloud.network.PhysicalNetworkServiceProvider;\n+import com.cloud.network.PublicIpAddress;\n import com.cloud.network.as.AutoScaleCounter;\n import com.cloud.network.as.AutoScaleCounter.AutoScaleCounterType;\n-import com.cloud.network.dao.*;\n+import com.cloud.network.dao.ExternalLoadBalancerDeviceDao;\n+import com.cloud.network.dao.ExternalLoadBalancerDeviceVO;\n import com.cloud.network.dao.ExternalLoadBalancerDeviceVO.LBDeviceState;\n+import com.cloud.network.dao.NetScalerPodDao;\n+import com.cloud.network.dao.NetworkDao;\n+import com.cloud.network.dao.NetworkExternalLoadBalancerDao;\n+import com.cloud.network.dao.NetworkExternalLoadBalancerVO;\n+import com.cloud.network.dao.NetworkServiceMapDao;\n+import com.cloud.network.dao.NetworkVO;\n+import com.cloud.network.dao.PhysicalNetworkDao;\n+import com.cloud.network.dao.PhysicalNetworkVO;\n import com.cloud.network.lb.LoadBalancingRule;\n import com.cloud.network.lb.LoadBalancingRule.LbDestination;\n import com.cloud.network.resource.NetscalerResource;\n import com.cloud.network.rules.FirewallRule;\n-import com.cloud.network.rules.FirewallRule.Purpose;\n import com.cloud.network.rules.LbStickinessMethod;\n import com.cloud.network.rules.LbStickinessMethod.StickinessMethodType;\n+import com.cloud.network.rules.LoadBalancerContainer;\n import com.cloud.network.rules.StaticNat;\n import com.cloud.network.vpc.PrivateGateway;\n import com.cloud.network.vpc.StaticRouteProfile;\n@@ -75,15 +116,6 @@\n import com.cloud.vm.VirtualMachine;\n import com.cloud.vm.VirtualMachineProfile;\n import com.google.gson.Gson;\n-import org.apache.cloudstack.api.ApiConstants;\n-import org.apache.cloudstack.network.ExternalNetworkDeviceManager.NetworkDevice;\n-import org.apache.cloudstack.region.gslb.GslbServiceProvider;\n-import org.apache.log4j.Logger;\n-\n-import javax.ejb.Local;\n-import javax.inject.Inject;\n-import java.net.URI;\n-import java.util.*;\n \n @Local(value = {NetworkElement.class, StaticNatServiceProvider.class, LoadBalancingServiceProvider.class, GslbServiceProvider.class})\n public class NetscalerElement extends ExternalLoadBalancerDeviceManagerImpl implements LoadBalancingServiceProvider,\n@@ -207,6 +239,10 @@ public boolean applyLBRules(Network config, List<LoadBalancingRule> rules) throw\n         if (!canHandle(config, Service.Lb)) {\n             return false;\n         }\n+        \n+        if (canHandleLbRules(rules)) {\n+            return false;\n+        }\n \n         if (isBasicZoneNetwok(config)) {\n             return applyElasticLoadBalancerRules(config, rules);\n@@ -237,6 +273,9 @@ public boolean applyLBRules(Network config, List<LoadBalancingRule> rules) throw\n         // Specifies that load balancing rules can only be made with public IPs that aren't source NAT IPs\n         lbCapabilities.put(Capability.LoadBalancingSupportedIps, \"additional\");\n \n+        // Supports only Public load balancing\n+        lbCapabilities.put(Capability.LbSchemes, LoadBalancerContainer.Scheme.Public.toString());\n+        \n         // Specifies that load balancing rules can support autoscaling and the list of counters it supports\n         AutoScaleCounter counter;\n         List<AutoScaleCounter> counterList = new ArrayList<AutoScaleCounter>();\n@@ -644,14 +683,7 @@ public IpDeployer getIpDeployer(Network network) {\n         return this;\n     }\n \n-    public boolean applyElasticLoadBalancerRules(Network network, List<? extends FirewallRule> rules) throws ResourceUnavailableException {\n-\n-        List<LoadBalancingRule> loadBalancingRules = new ArrayList<LoadBalancingRule>();\n-        for (FirewallRule rule : rules) {\n-            if (rule.getPurpose().equals(Purpose.LoadBalancing)) {\n-                loadBalancingRules.add((LoadBalancingRule) rule);\n-            }\n-        }\n+    public boolean applyElasticLoadBalancerRules(Network network, List<LoadBalancingRule> loadBalancingRules) throws ResourceUnavailableException {\n \n         if (loadBalancingRules == null || loadBalancingRules.isEmpty()) {\n             return true;\n@@ -682,7 +714,7 @@ public boolean applyElasticLoadBalancerRules(Network network, List<? extends Fir\n             String protocol = rule.getProtocol();\n             String algorithm = rule.getAlgorithm();\n             String lbUuid = rule.getUuid();\n-            String srcIp = _networkMgr.getIp(rule.getSourceIpAddressId()).getAddress().addr();\n+            String srcIp = rule.getSourceIp().addr();\n             int srcPort = rule.getSourcePortStart();\n             List<LbDestination> destinations = rule.getDestinations();\n \n@@ -813,16 +845,10 @@ private ExternalLoadBalancerDeviceVO getNetScalerForEIP(StaticNat rule) {\n         return null;\n     }\n \n-    public List<LoadBalancerTO> getElasticLBRulesHealthCheck(Network network, List<? extends FirewallRule> rules)\n+    public List<LoadBalancerTO> getElasticLBRulesHealthCheck(Network network, List<LoadBalancingRule> loadBalancingRules)\n             throws ResourceUnavailableException {\n \n         HealthCheckLBConfigAnswer answer = null;\n-        List<LoadBalancingRule> loadBalancingRules = new ArrayList<LoadBalancingRule>();\n-        for (FirewallRule rule : rules) {\n-            if (rule.getPurpose().equals(Purpose.LoadBalancing)) {\n-                loadBalancingRules.add((LoadBalancingRule) rule);\n-            }\n-        }\n \n         if (loadBalancingRules == null || loadBalancingRules.isEmpty()) {\n             return null;\n@@ -849,7 +875,7 @@ private ExternalLoadBalancerDeviceVO getNetScalerForEIP(StaticNat rule) {\n             String protocol = rule.getProtocol();\n             String algorithm = rule.getAlgorithm();\n             String lbUuid = rule.getUuid();\n-            String srcIp = _networkMgr.getIp(rule.getSourceIpAddressId()).getAddress().addr();\n+            String srcIp = rule.getSourceIp().addr();\n             int srcPort = rule.getSourcePortStart();\n             List<LbDestination> destinations = rule.getDestinations();\n \n@@ -874,7 +900,7 @@ private ExternalLoadBalancerDeviceVO getNetScalerForEIP(StaticNat rule) {\n \n     public List<LoadBalancerTO> updateHealthChecks(Network network, List<LoadBalancingRule> lbrules) {\n \n-        if (canHandle(network, Service.Lb)) {\n+        if (canHandle(network, Service.Lb) && canHandleLbRules(lbrules)) {\n             try {\n \n                 if (isBasicZoneNetwok(network)) {\n@@ -891,7 +917,7 @@ private ExternalLoadBalancerDeviceVO getNetScalerForEIP(StaticNat rule) {\n         return null;\n     }\n \n-    public List<LoadBalancerTO> getLBHealthChecks(Network network, List<? extends FirewallRule> rules)\n+    public List<LoadBalancerTO> getLBHealthChecks(Network network, List<LoadBalancingRule> rules)\n             throws ResourceUnavailableException {\n         return super.getLBHealthChecks(network, rules);\n     }\n@@ -960,6 +986,22 @@ public String getZoneGslbProviderPrivateIp(long zoneId) {\n         }\n         return null;\n     }\n+    \n+    private boolean canHandleLbRules(List<LoadBalancingRule> rules) {\n+        Map<Capability, String> lbCaps = this.getCapabilities().get(Service.Lb);\n+        if (!lbCaps.isEmpty()) {\n+            String schemeCaps = lbCaps.get(Capability.LbSchemes);\n+            if (schemeCaps != null) {\n+                for (LoadBalancingRule rule : rules) {\n+                    if (!schemeCaps.contains(rule.getScheme().toString())) {\n+                        s_logger.debug(\"Scheme \" + rules.get(0).getScheme() + \" is not supported by the provider \" + this.getName());\n+                        return false;\n+                    }\n+                }\n+            }\n+        }\n+        return true;\n+    }\n \n     @Override\n     public boolean implementVpc(Vpc vpc, DeployDestination dest, ReservationContext context)",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/plugins/network-elements/netscaler/src/com/cloud/network/element/NetscalerElement.java",
                "sha": "4f2a0a1da4264b271ba50d028cde2ce9d2962f92",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/plugins/pom.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/pom.xml?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "plugins/pom.xml",
                "patch": "@@ -62,6 +62,7 @@\n     <module>storage/volume/default</module>\n     <module>alert-handlers/snmp-alerts</module>\n     <module>alert-handlers/syslog-alerts</module>\n+    <module>network-elements/internal-loadbalancer</module>\n   </modules>\n \n   <dependencies>",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/plugins/pom.xml",
                "sha": "e49fac9533a26bfa135d26dca4884951ddf8312f",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/api/ApiDBUtils.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiDBUtils.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 3,
                "filename": "server/src/com/cloud/api/ApiDBUtils.java",
                "patch": "@@ -25,8 +25,6 @@\n import javax.annotation.PostConstruct;\n import javax.inject.Inject;\n \n-import com.cloud.network.rules.LoadBalancer;\n-import com.cloud.region.ha.GlobalLoadBalancingRulesService;\n import org.apache.cloudstack.affinity.AffinityGroup;\n import org.apache.cloudstack.affinity.AffinityGroupResponse;\n import org.apache.cloudstack.affinity.dao.AffinityGroupDao;\n@@ -37,8 +35,8 @@\n import org.apache.cloudstack.api.response.DiskOfferingResponse;\n import org.apache.cloudstack.api.response.DomainRouterResponse;\n import org.apache.cloudstack.api.response.EventResponse;\n-import org.apache.cloudstack.api.response.HostResponse;\n import org.apache.cloudstack.api.response.HostForMigrationResponse;\n+import org.apache.cloudstack.api.response.HostResponse;\n import org.apache.cloudstack.api.response.InstanceGroupResponse;\n import org.apache.cloudstack.api.response.ProjectAccountResponse;\n import org.apache.cloudstack.api.response.ProjectInvitationResponse;\n@@ -52,6 +50,7 @@\n import org.apache.cloudstack.api.response.UserVmResponse;\n import org.apache.cloudstack.api.response.VolumeResponse;\n import org.apache.cloudstack.api.response.ZoneResponse;\n+import org.apache.cloudstack.lb.dao.ApplicationLoadBalancerRuleDao;\n import org.apache.cloudstack.storage.datastore.db.PrimaryDataStoreDao;\n import org.apache.cloudstack.storage.datastore.db.StoragePoolVO;\n import org.springframework.stereotype.Component;\n@@ -157,6 +156,8 @@\n import com.cloud.network.as.dao.AutoScaleVmProfileDao;\n import com.cloud.network.as.dao.ConditionDao;\n import com.cloud.network.as.dao.CounterDao;\n+import com.cloud.network.dao.AccountGuestVlanMapDao;\n+import com.cloud.network.dao.AccountGuestVlanMapVO;\n import com.cloud.network.dao.FirewallRulesCidrsDao;\n import com.cloud.network.dao.FirewallRulesDao;\n import com.cloud.network.dao.IPAddressDao;\n@@ -181,6 +182,7 @@\n import com.cloud.network.dao.Site2SiteVpnGatewayVO;\n import com.cloud.network.router.VirtualRouter;\n import com.cloud.network.rules.FirewallRuleVO;\n+import com.cloud.network.rules.LoadBalancer;\n import com.cloud.network.security.SecurityGroup;\n import com.cloud.network.security.SecurityGroupManager;\n import com.cloud.network.security.SecurityGroupVO;\n@@ -204,6 +206,7 @@\n import com.cloud.projects.ProjectAccount;\n import com.cloud.projects.ProjectInvitation;\n import com.cloud.projects.ProjectService;\n+import com.cloud.region.ha.GlobalLoadBalancingRulesService;\n import com.cloud.resource.ResourceManager;\n import com.cloud.server.Criteria;\n import com.cloud.server.ManagementServer;\n@@ -499,6 +502,7 @@\n     @Inject private VMSnapshotDao vmSnapshotDao;\n     @Inject private NicSecondaryIpDao nicSecondaryIpDao;\n     @Inject private VpcProvisioningService vpcProvSvc;\n+    @Inject private ApplicationLoadBalancerRuleDao _appLbDao;\n     @Inject private AffinityGroupDao affinityGroupDao;\n     @Inject private AffinityGroupJoinDao affinityGroupJoinDao;\n     @Inject private GlobalLoadBalancingRulesService gslbService;",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/api/ApiDBUtils.java",
                "sha": "fce1f7190860507f2c27bf6cd4186fe702348908",
                "status": "modified"
            },
            {
                "additions": 107,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 108,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 1,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -44,6 +44,9 @@\n import org.apache.cloudstack.api.ResponseGenerator;\n import org.apache.cloudstack.api.command.user.job.QueryAsyncJobResultCmd;\n import org.apache.cloudstack.api.response.AccountResponse;\n+import org.apache.cloudstack.api.response.ApplicationLoadBalancerInstanceResponse;\n+import org.apache.cloudstack.api.response.ApplicationLoadBalancerResponse;\n+import org.apache.cloudstack.api.response.ApplicationLoadBalancerRuleResponse;\n import org.apache.cloudstack.api.response.AsyncJobResponse;\n import org.apache.cloudstack.api.response.AutoScalePolicyResponse;\n import org.apache.cloudstack.api.response.AutoScaleVmGroupResponse;\n@@ -72,6 +75,7 @@\n import org.apache.cloudstack.api.response.HypervisorCapabilitiesResponse;\n import org.apache.cloudstack.api.response.IPAddressResponse;\n import org.apache.cloudstack.api.response.InstanceGroupResponse;\n+import org.apache.cloudstack.api.response.InternalLoadBalancerElementResponse;\n import org.apache.cloudstack.api.response.IpForwardingRuleResponse;\n import org.apache.cloudstack.api.response.IsolationMethodResponse;\n import org.apache.cloudstack.api.response.LBHealthCheckPolicyResponse;\n@@ -130,6 +134,7 @@\n import org.apache.cloudstack.api.response.VpcResponse;\n import org.apache.cloudstack.api.response.VpnUsersResponse;\n import org.apache.cloudstack.api.response.ZoneResponse;\n+import org.apache.cloudstack.network.lb.ApplicationLoadBalancerRule;\n import org.apache.cloudstack.region.Region;\n import org.apache.cloudstack.storage.datastore.db.StoragePoolVO;\n import org.apache.cloudstack.usage.Usage;\n@@ -189,6 +194,7 @@\n import com.cloud.network.Network.Capability;\n import com.cloud.network.Network.Provider;\n import com.cloud.network.Network.Service;\n+import com.cloud.network.NetworkModel;\n import com.cloud.network.NetworkProfile;\n import com.cloud.network.Networks.IsolationType;\n import com.cloud.network.Networks.TrafficType;\n@@ -216,6 +222,7 @@\n import com.cloud.network.rules.FirewallRuleVO;\n import com.cloud.network.rules.HealthCheckPolicy;\n import com.cloud.network.rules.LoadBalancer;\n+import com.cloud.network.rules.LoadBalancerContainer.Scheme;\n import com.cloud.network.rules.PortForwardingRule;\n import com.cloud.network.rules.StaticNatRule;\n import com.cloud.network.rules.StickinessPolicy;\n@@ -229,6 +236,7 @@\n import com.cloud.network.vpc.VpcOffering;\n import com.cloud.offering.DiskOffering;\n import com.cloud.offering.NetworkOffering;\n+import com.cloud.offering.NetworkOffering.Detail;\n import com.cloud.offering.ServiceOffering;\n import com.cloud.offerings.NetworkOfferingVO;\n import com.cloud.org.Cluster;\n@@ -269,6 +277,7 @@\n import com.cloud.uservm.UserVm;\n import com.cloud.utils.Pair;\n import com.cloud.utils.StringUtils;\n+import com.cloud.utils.net.Ip;\n import com.cloud.utils.net.NetUtils;\n import com.cloud.vm.ConsoleProxyVO;\n import com.cloud.vm.InstanceGroup;\n@@ -289,6 +298,7 @@\n     private static final DecimalFormat s_percentFormat = new DecimalFormat(\"##.##\");\n     @Inject private EntityManager _entityMgr = null;\n     @Inject private UsageService _usageSvc = null;\n+    @Inject NetworkModel _ntwkModel;\n \n     @Override\n     public UserResponse createUserResponse(User user) {\n@@ -750,7 +760,7 @@ public LoadBalancerResponse createLoadBalancerResponse(LoadBalancer loadBalancer\n         }\n \n         //set tag information\n-        List<? extends ResourceTag> tags = ApiDBUtils.listByResourceTypeAndId(TaggedResourceType.UserVm, loadBalancer.getId());\n+        List<? extends ResourceTag> tags = ApiDBUtils.listByResourceTypeAndId(TaggedResourceType.LoadBalancer, loadBalancer.getId());\n         List<ResourceTagResponse> tagResponses = new ArrayList<ResourceTagResponse>();\n         for (ResourceTag tag : tags) {\n             ResourceTagResponse tagResponse = createResourceTagResponse(tag, true);\n@@ -2263,6 +2273,13 @@ public NetworkOfferingResponse createNetworkOfferingResponse(NetworkOffering off\n         response.setForVpc(ApiDBUtils.isOfferingForVpc(offering));\n \n         response.setServices(serviceResponses);\n+        \n+        //set network offering details\n+        Map<Detail, String> details = _ntwkModel.getNtwkOffDetails(offering.getId());\n+        if (details != null && !details.isEmpty()) {\n+            response.setDetails(details);\n+        }\n+        \n         response.setObjectName(\"networkoffering\");\n         return response;\n     }\n@@ -2826,6 +2843,11 @@ public TrafficTypeResponse createTrafficTypeResponse(PhysicalNetworkTrafficType\n \n     @Override\n     public VirtualRouterProviderResponse createVirtualRouterProviderResponse(VirtualRouterProvider result) {\n+        //generate only response of the VR/VPCVR provider type\n+        if (!(result.getType() == VirtualRouterProvider.VirtualRouterProviderType.VirtualRouter\n+                || result.getType() == VirtualRouterProvider.VirtualRouterProviderType.VPCVirtualRouter)) {\n+            return null;\n+        }\n         VirtualRouterProviderResponse response = new VirtualRouterProviderResponse();\n         response.setId(result.getUuid());\n         PhysicalNetworkServiceProvider nsp = ApiDBUtils.findPhysicalNetworkServiceProviderById(result.getNspId());\n@@ -3689,6 +3711,73 @@ public NicResponse createNicResponse(Nic result) {\n         return response;\n     }\n \n+    \n+    @Override\n+    public ApplicationLoadBalancerResponse createLoadBalancerContainerReponse(ApplicationLoadBalancerRule lb, Map<Ip, UserVm> lbInstances) {\n+\n+        ApplicationLoadBalancerResponse lbResponse = new ApplicationLoadBalancerResponse();\n+        lbResponse.setId(lb.getUuid());\n+        lbResponse.setName(lb.getName());\n+        lbResponse.setDescription(lb.getDescription());\n+        lbResponse.setAlgorithm(lb.getAlgorithm());\n+        Network nw = ApiDBUtils.findNetworkById(lb.getNetworkId());\n+        lbResponse.setNetworkId(nw.getUuid());\n+        populateOwner(lbResponse, lb);\n+        \n+        if (lb.getScheme() == Scheme.Internal) {\n+            lbResponse.setSourceIp(lb.getSourceIp().addr());\n+            //TODO - create the view for the load balancer rule to reflect the network uuid\n+            Network network = ApiDBUtils.findNetworkById(lb.getNetworkId());\n+            lbResponse.setSourceIpNetworkId(network.getUuid());\n+        } else {\n+            //for public, populate the ip information from the ip address\n+            IpAddress publicIp = ApiDBUtils.findIpAddressById(lb.getSourceIpAddressId());\n+            lbResponse.setSourceIp(publicIp.getAddress().addr());\n+            Network ntwk = ApiDBUtils.findNetworkById(publicIp.getNetworkId());\n+            lbResponse.setSourceIpNetworkId(ntwk.getUuid());\n+        }\n+        \n+        //set load balancer rules information (only one rule per load balancer in this release)\n+        List<ApplicationLoadBalancerRuleResponse> ruleResponses = new ArrayList<ApplicationLoadBalancerRuleResponse>();\n+        ApplicationLoadBalancerRuleResponse ruleResponse = new ApplicationLoadBalancerRuleResponse();\n+        ruleResponse.setInstancePort(lb.getDefaultPortStart());\n+        ruleResponse.setSourcePort(lb.getSourcePortStart());\n+        String stateToSet = lb.getState().toString();\n+        if (stateToSet.equals(FirewallRule.State.Revoke)) {\n+            stateToSet = \"Deleting\";\n+        }\n+        ruleResponse.setState(stateToSet);\n+        ruleResponse.setObjectName(\"loadbalancerrule\");\n+        ruleResponses.add(ruleResponse);\n+        lbResponse.setLbRules(ruleResponses);\n+        \n+        //set Lb instances information\n+        List<ApplicationLoadBalancerInstanceResponse> instanceResponses = new ArrayList<ApplicationLoadBalancerInstanceResponse>();\n+        for (Ip ip : lbInstances.keySet()) {\n+            ApplicationLoadBalancerInstanceResponse instanceResponse = new ApplicationLoadBalancerInstanceResponse();\n+            instanceResponse.setIpAddress(ip.addr());\n+            UserVm vm = lbInstances.get(ip);\n+            instanceResponse.setId(vm.getUuid());\n+            instanceResponse.setName(vm.getInstanceName());\n+            instanceResponse.setObjectName(\"loadbalancerinstance\");\n+            instanceResponses.add(instanceResponse);\n+        }\n+        \n+        lbResponse.setLbInstances(instanceResponses);\n+\n+        //set tag information\n+        List<? extends ResourceTag> tags = ApiDBUtils.listByResourceTypeAndId(TaggedResourceType.LoadBalancer, lb.getId());\n+        List<ResourceTagResponse> tagResponses = new ArrayList<ResourceTagResponse>();\n+        for (ResourceTag tag : tags) {\n+            ResourceTagResponse tagResponse = createResourceTagResponse(tag, true);\n+            tagResponses.add(tagResponse);\n+        }\n+        lbResponse.setTags(tagResponses);\n+\n+        lbResponse.setObjectName(\"loadbalancer\");\n+        return lbResponse;\n+    }\n+\n     @Override\n     public AffinityGroupResponse createAffinityGroupResponse(AffinityGroup group) {\n \n@@ -3719,8 +3808,25 @@ public Long getAffinityGroupId(String groupName, long accountId) {\n         }\n     }\n \n+    \n+    @Override\n+    public InternalLoadBalancerElementResponse createInternalLbElementResponse(VirtualRouterProvider result) {\n+        if (result.getType() != VirtualRouterProvider.VirtualRouterProviderType.InternalLbVm) {\n+            return null;\n+        }\n+        InternalLoadBalancerElementResponse response = new InternalLoadBalancerElementResponse();\n+        response.setId(result.getUuid());\n+        PhysicalNetworkServiceProvider nsp = ApiDBUtils.findPhysicalNetworkServiceProviderById(result.getNspId());\n+        if (nsp != null) {\n+            response.setNspId(nsp.getUuid());\n+        }\n+        response.setEnabled(result.isEnabled());\n \n+        response.setObjectName(\"internalloadbalancerelement\");\n+        return response;\n+    }\n \n+    \n     @Override\n     public IsolationMethodResponse createIsolationMethodResponse(IsolationType method) {\n         IsolationMethodResponse response = new IsolationMethodResponse();",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "d5960abba8b6e7c51be1b30416096a144cc7be6f",
                "status": "modified"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/api/query/QueryManagerImpl.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/query/QueryManagerImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 16,
                "filename": "server/src/com/cloud/api/query/QueryManagerImpl.java",
                "patch": "@@ -29,7 +29,9 @@\n import org.apache.cloudstack.affinity.AffinityGroupResponse;\n import org.apache.cloudstack.affinity.AffinityGroupVMMapVO;\n import org.apache.cloudstack.affinity.dao.AffinityGroupVMMapDao;\n+import org.apache.cloudstack.api.BaseListProjectAndAccountResourcesCmd;\n import org.apache.cloudstack.api.command.admin.host.ListHostsCmd;\n+import org.apache.cloudstack.api.command.admin.internallb.ListInternalLBVMsCmd;\n import org.apache.cloudstack.api.command.admin.router.ListRoutersCmd;\n import org.apache.cloudstack.api.command.admin.storage.ListStoragePoolsCmd;\n import org.apache.cloudstack.api.command.admin.user.ListUsersCmd;\n@@ -981,27 +983,32 @@\n \n     @Override\n     public ListResponse<DomainRouterResponse> searchForRouters(ListRoutersCmd cmd) {\n-        Pair<List<DomainRouterJoinVO>, Integer> result = searchForRoutersInternal(cmd);\n+        Pair<List<DomainRouterJoinVO>, Integer> result = searchForRoutersInternal(cmd, cmd.getId(), cmd.getRouterName(),\n+                cmd.getState(), cmd.getZoneId(), cmd.getPodId(), cmd.getHostId(), cmd.getKeyword(), cmd.getNetworkId(),\n+                cmd.getVpcId(), cmd.getForVpc(), cmd.getRole(), cmd.getZoneType());\n         ListResponse<DomainRouterResponse> response = new ListResponse<DomainRouterResponse>();\n \n         List<DomainRouterResponse> routerResponses = ViewResponseHelper.createDomainRouterResponse(result.first().toArray(new DomainRouterJoinVO[result.first().size()]));\n         response.setResponses(routerResponses, result.second());\n         return response;\n     }\n+    \n+    @Override\n+    public ListResponse<DomainRouterResponse> searchForInternalLbVms(ListInternalLBVMsCmd cmd) {\n+        Pair<List<DomainRouterJoinVO>, Integer> result = searchForRoutersInternal(cmd, cmd.getId(), cmd.getRouterName(),\n+                cmd.getState(), cmd.getZoneId(), cmd.getPodId(), cmd.getHostId(), cmd.getKeyword(), cmd.getNetworkId(),\n+                cmd.getVpcId(), cmd.getForVpc(), cmd.getRole(), cmd.getZoneType());\n+        ListResponse<DomainRouterResponse> response = new ListResponse<DomainRouterResponse>();\n \n+        List<DomainRouterResponse> routerResponses = ViewResponseHelper.createDomainRouterResponse(result.first().toArray(new DomainRouterJoinVO[result.first().size()]));\n+        response.setResponses(routerResponses, result.second());\n+        return response;\n+    }\n \n-    private Pair<List<DomainRouterJoinVO>, Integer> searchForRoutersInternal(ListRoutersCmd cmd) {\n-        Long id = cmd.getId();\n-        String name = cmd.getRouterName();\n-        String state = cmd.getState();\n-        Long zoneId = cmd.getZoneId();\n-        String zoneType = cmd.getZoneType();\n-        Long pod = cmd.getPodId();\n-        Long hostId = cmd.getHostId();\n-        String keyword = cmd.getKeyword();\n-        Long networkId = cmd.getNetworkId();\n-        Long vpcId = cmd.getVpcId();\n-        Boolean forVpc = cmd.getForVpc();\n+\n+    private Pair<List<DomainRouterJoinVO>, Integer> searchForRoutersInternal(BaseListProjectAndAccountResourcesCmd cmd, Long id,\n+            String name, String state, Long zoneId, Long podId, Long hostId, String keyword, Long networkId, Long vpcId, Boolean forVpc, String role, String zoneType) {\n+       \n \n         Account caller = UserContext.current().getCaller();\n         List<Long> permittedAccounts = new ArrayList<Long>();\n@@ -1032,6 +1039,7 @@\n         sb.and(\"podId\", sb.entity().getPodId(), SearchCriteria.Op.EQ);\n         sb.and(\"hostId\", sb.entity().getHostId(), SearchCriteria.Op.EQ);\n         sb.and(\"vpcId\", sb.entity().getVpcId(), SearchCriteria.Op.EQ);\n+        sb.and(\"role\", sb.entity().getRole(), SearchCriteria.Op.EQ);\n \n         if (forVpc != null) {\n             if (forVpc) {\n@@ -1073,13 +1081,14 @@\n             sc.setParameters(\"dataCenterId\", zoneId);\n         }\n \n+        if (podId != null) {\n+            sc.setParameters(\"podId\", podId);\n+        }\n+\n         if (zoneType != null) {\n             sc.setParameters(\"dataCenterType\", zoneType);\n         }\n         \n-        if (pod != null) {\n-            sc.setParameters(\"podId\", pod);\n-        }\n \n         if (hostId != null) {\n             sc.setParameters(\"hostId\", hostId);\n@@ -1092,6 +1101,10 @@\n         if (vpcId != null) {\n             sc.setParameters(\"vpcId\", vpcId);\n         }\n+        \n+        if (role != null) {\n+            sc.setParameters(\"role\", role);\n+        }\n \n         // search VR details by ids\n         Pair<List<DomainRouterJoinVO>, Integer> uniqueVrPair = _routerJoinDao.searchAndCount(sc, searchFilter);",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/api/query/QueryManagerImpl.java",
                "sha": "808b1efceb1f8f87baeb80c639079c2297af11b9",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/api/query/dao/DomainRouterJoinDaoImpl.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/query/dao/DomainRouterJoinDaoImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 1,
                "filename": "server/src/com/cloud/api/query/dao/DomainRouterJoinDaoImpl.java",
                "patch": "@@ -32,6 +32,7 @@\n import com.cloud.configuration.dao.ConfigurationDao;\n import com.cloud.network.Networks.TrafficType;\n import com.cloud.network.router.VirtualRouter;\n+import com.cloud.network.router.VirtualRouter.Role;\n import com.cloud.user.Account;\n import com.cloud.utils.db.GenericDaoBase;\n import com.cloud.utils.db.SearchBuilder;\n@@ -156,14 +157,20 @@ public DomainRouterResponse newDomainRouterResponse(DomainRouterJoinVO router, A\n         routerResponse.setIp6Dns2(router.getIp6Dns2());\n \n         routerResponse.setVpcId(router.getVpcUuid());\n+        \n+        routerResponse.setRole(router.getRole().toString());\n \n         // set async job\n         if (router.getJobId() != null) {\n             routerResponse.setJobId(router.getJobUuid());\n             routerResponse.setJobStatus(router.getJobStatus());\n         }\n \n-        routerResponse.setObjectName(\"router\");\n+        if (router.getRole() == Role.INTERNAL_LB_VM) {\n+            routerResponse.setObjectName(\"internalloadbalancervm\");\n+        } else {\n+            routerResponse.setObjectName(\"router\");\n+        }\n \n         return routerResponse;\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/api/query/dao/DomainRouterJoinDaoImpl.java",
                "sha": "a7a83de14a1883fb6b28861d57c6d1ca4f9eb46b",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/api/query/vo/DomainRouterJoinVO.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/query/vo/DomainRouterJoinVO.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 2,
                "filename": "server/src/com/cloud/api/query/vo/DomainRouterJoinVO.java",
                "patch": "@@ -28,6 +28,7 @@\n \n import com.cloud.network.Network.GuestType;\n import com.cloud.network.Networks.TrafficType;\n+import com.cloud.network.router.VirtualRouter;\n import com.cloud.network.router.VirtualRouter.RedundantState;\n import com.cloud.utils.db.GenericDao;\n import com.cloud.vm.VirtualMachine.State;\n@@ -238,14 +239,16 @@\n     @Column(name=\"guest_type\")\n     @Enumerated(value=EnumType.STRING)\n     private GuestType guestType;\n+    \n+    @Column(name=\"role\")\n+    @Enumerated(value=EnumType.STRING)\n+    private VirtualRouter.Role role;\n \n \n     public DomainRouterJoinVO() {\n     }\n \n \n-\n-\n     @Override\n     public long getId() {\n         return id;\n@@ -1003,4 +1006,14 @@ public String getIp6Dns2() {\n \tpublic void setIp6Dns2(String ip6Dns2) {\n \t\tthis.ip6Dns2 = ip6Dns2;\n \t}\n+\n+\n+    public VirtualRouter.Role getRole() {\n+        return role;\n+    }\n+\n+\n+    public void setRole(VirtualRouter.Role role) {\n+        this.role = role;\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/api/query/vo/DomainRouterJoinVO.java",
                "sha": "9e9e4a2ba7bc23db833811eacd90299f915125a1",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/configuration/Config.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/configuration/Config.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 1,
                "filename": "server/src/com/cloud/configuration/Config.java",
                "patch": "@@ -408,7 +408,10 @@\n     CloudDnsName(\"Advanced\", ManagementServer.class, String.class, \"cloud.dns.name\", \"default\", \" DNS name of the cloud\", null),\n \t\n     BlacklistedRoutes(\"Advanced\", VpcManager.class, String.class, \"blacklisted.routes\", null, \"Routes that are blacklisted, can not be used for Static Routes creation for the VPC Private Gateway\",\n-\t           \"routes\", ConfigurationParameterScope.zone.toString());\n+\t           \"routes\", ConfigurationParameterScope.zone.toString()),\n+\t\n+    InternalLbVmServiceOfferingId(\"Advanced\", ManagementServer.class, Long.class, \"internallbvm.service.offering\", null, \"Uuid of the service offering used by internal lb vm; if NULL - default system internal lb offering will be used\", null);\n+ \n     \n \t\n \tprivate final String _category;",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/configuration/Config.java",
                "sha": "77ca2de1923aacaf7d83d7933d6f889b7f670a30",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/configuration/ConfigurationManager.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/configuration/ConfigurationManager.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 5,
                "filename": "server/src/com/cloud/configuration/ConfigurationManager.java",
                "patch": "@@ -30,13 +30,13 @@\n import com.cloud.exception.ConcurrentOperationException;\n import com.cloud.exception.InsufficientCapacityException;\n import com.cloud.exception.InvalidParameterValueException;\n-import com.cloud.exception.ResourceAllocationException;\n import com.cloud.network.Network;\n import com.cloud.network.Network.Capability;\n import com.cloud.network.Network.Provider;\n import com.cloud.network.Network.Service;\n import com.cloud.network.Networks.TrafficType;\n import com.cloud.offering.DiskOffering;\n+import com.cloud.offering.NetworkOffering;\n import com.cloud.offering.NetworkOffering.Availability;\n import com.cloud.offerings.NetworkOfferingVO;\n import com.cloud.org.Grouping.AllocationState;\n@@ -179,8 +179,6 @@ DataCenterVO createZone(long userId, String zoneName, String dns1, String dns2,\n      * @param trafficType\n      * @param tags\n      * @param specifyVlan\n-     * @param isPersistent\n-     *            ;\n      * @param networkRate\n      *            TODO\n      * @param serviceProviderMap\n@@ -196,14 +194,16 @@ DataCenterVO createZone(long userId, String zoneName, String dns1, String dns2,\n      *            ;\n      * @param specifyIpRanges\n      *            TODO\n+     * @param isPersistent\n+     *            ;\n+     * @param details TODO\n      * @param id\n-     * \n      * @return network offering object\n      */\n \n     NetworkOfferingVO createNetworkOffering(String name, String displayText, TrafficType trafficType, String tags, boolean specifyVlan, Availability availability, Integer networkRate, Map<Service, Set<Provider>> serviceProviderMap,\n             boolean isDefault, Network.GuestType type, boolean systemOnly, Long serviceOfferingId, boolean conserveMode, Map<Service, Map<Capability, String>> serviceCapabilityMap,\n-            boolean specifyIpRanges, boolean isPersistent);\n+            boolean specifyIpRanges, boolean isPersistent, Map<NetworkOffering.Detail,String> details);\n \n     Vlan createVlanAndPublicIpRange(long zoneId, long networkId, long physicalNetworkId, boolean forVirtualNetwork, Long podId, String startIP, String endIP, String vlanGateway, String vlanNetmask, String vlanId, Account vlanOwner, String startIPv6, String endIPv6, String vlanIp6Gateway, String vlanIp6Cidr) throws InsufficientCapacityException, ConcurrentOperationException, InvalidParameterValueException;\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/configuration/ConfigurationManager.java",
                "sha": "d2f831905ee2d6bc7ac8ee61d8af1f7db87c1d82",
                "status": "modified"
            },
            {
                "additions": 113,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/configuration/ConfigurationManagerImpl.java",
                "changes": 123,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/configuration/ConfigurationManagerImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 10,
                "filename": "server/src/com/cloud/configuration/ConfigurationManagerImpl.java",
                "patch": "@@ -39,6 +39,7 @@\n import javax.naming.directory.DirContext;\n import javax.naming.directory.InitialDirContext;\n \n+\n import com.cloud.dc.*;\n import com.cloud.dc.dao.*;\n import com.cloud.user.*;\n@@ -81,6 +82,17 @@\n import com.cloud.configuration.dao.ConfigurationDao;\n import com.cloud.dc.DataCenter.NetworkType;\n import com.cloud.dc.Vlan.VlanType;\n+import com.cloud.dc.VlanVO;\n+import com.cloud.dc.dao.AccountVlanMapDao;\n+import com.cloud.dc.dao.ClusterDao;\n+import com.cloud.dc.dao.DataCenterDao;\n+import com.cloud.dc.dao.DataCenterIpAddressDao;\n+import com.cloud.dc.dao.DataCenterLinkLocalIpAddressDao;\n+import com.cloud.dc.dao.DcDetailsDao;\n+import com.cloud.dc.dao.HostPodDao;\n+import com.cloud.dc.dao.PodVlanMapDao;\n+import com.cloud.dc.dao.VlanDao;\n+\n import com.cloud.deploy.DataCenterDeployment;\n import com.cloud.domain.Domain;\n import com.cloud.domain.DomainVO;\n@@ -115,10 +127,12 @@\n import com.cloud.network.dao.PhysicalNetworkTrafficTypeDao;\n import com.cloud.network.dao.PhysicalNetworkTrafficTypeVO;\n import com.cloud.network.dao.PhysicalNetworkVO;\n+import com.cloud.network.rules.LoadBalancerContainer.Scheme;\n import com.cloud.network.vpc.VpcManager;\n import com.cloud.offering.DiskOffering;\n import com.cloud.offering.NetworkOffering;\n import com.cloud.offering.NetworkOffering.Availability;\n+import com.cloud.offering.NetworkOffering.Detail;\n import com.cloud.offering.ServiceOffering;\n import com.cloud.offerings.NetworkOfferingServiceMapVO;\n import com.cloud.offerings.NetworkOfferingVO;\n@@ -1919,6 +1933,8 @@ public ServiceOffering createServiceOffering(CreateServiceOfferingCmd cmd) {\n                 vmType = VirtualMachine.Type.ConsoleProxy;\n             } else if (VirtualMachine.Type.SecondaryStorageVm.toString().toLowerCase().equals(vmTypeString)) {\n                 vmType = VirtualMachine.Type.SecondaryStorageVm;\n+            } else if (VirtualMachine.Type.InternalLoadBalancerVm.toString().toLowerCase().equals(vmTypeString)) {\n+                vmType = VirtualMachine.Type.InternalLoadBalancerVm;\n             } else {\n                 throw new InvalidParameterValueException(\"Invalid systemVmType. Supported types are: \" + VirtualMachine.Type.DomainRouter + \", \" + VirtualMachine.Type.ConsoleProxy + \", \"\n                         + VirtualMachine.Type.SecondaryStorageVm);\n@@ -3340,6 +3356,7 @@ public NetworkOffering createNetworkOffering(CreateNetworkOfferingCmd cmd) {\n         Network.GuestType guestType = null;\n         boolean specifyIpRanges = cmd.getSpecifyIpRanges();\n         boolean isPersistent = cmd.getIsPersistent();\n+        Map<String, String> detailsStr = cmd.getDetails();\n \n         // Verify traffic type\n         for (TrafficType tType : TrafficType.values()) {\n@@ -3432,10 +3449,10 @@ public NetworkOffering createNetworkOffering(CreateNetworkOfferingCmd cmd) {\n                 Network.Service service = Network.Service.getService(serviceStr);\n                 if (serviceProviderMap.containsKey(service)) {\n                     Set<Provider> providers = new HashSet<Provider>();\n-                    // in Acton, don't allow to specify more than 1 provider per service\n-                    if (svcPrv.get(serviceStr) != null && svcPrv.get(serviceStr).size() > 1) {\n+                    // Allow to specify more than 1 provider per service only if the service is LB\n+                    if (!serviceStr.equalsIgnoreCase(Service.Lb.getName()) && svcPrv.get(serviceStr) != null && svcPrv.get(serviceStr).size() > 1) {\n                         throw new InvalidParameterValueException(\"In the current release only one provider can be \" +\n-                        \t\t\"specified for the service\");\n+                        \t\t\"specified for the service if the service is not LB\");\n                     }\n                     for (String prvNameStr : svcPrv.get(serviceStr)) {\n                         // check if provider is supported\n@@ -3508,9 +3525,26 @@ public NetworkOffering createNetworkOffering(CreateNetworkOfferingCmd cmd) {\n             firewallProviderSet.add(firewallProvider);\n             serviceProviderMap.put(Service.Firewall, firewallProviderSet);\n         }\n+        \n+        Map<NetworkOffering.Detail, String> details = new HashMap<NetworkOffering.Detail, String>();\n+        if (detailsStr != null) {\n+            for (String detailStr : detailsStr.keySet()) {\n+                NetworkOffering.Detail offDetail = null;\n+                for (NetworkOffering.Detail supportedDetail: NetworkOffering.Detail.values()) {\n+                    if (detailStr.equalsIgnoreCase(supportedDetail.toString())) {\n+                        offDetail = supportedDetail;\n+                        break;\n+                    }\n+                }\n+                if (offDetail == null) {\n+                    throw new InvalidParameterValueException(\"Unsupported detail \" + detailStr);\n+                }\n+                details.put(offDetail, detailsStr.get(detailStr));\n+            }\n+        }\n \n         return createNetworkOffering(name, displayText, trafficType, tags, specifyVlan, availability, networkRate, serviceProviderMap, false, guestType, false,\n-                serviceOfferingId, conserveMode, serviceCapabilityMap, specifyIpRanges, isPersistent);\n+                serviceOfferingId, conserveMode, serviceCapabilityMap, specifyIpRanges, isPersistent, details);\n     }\n \n     void validateLoadBalancerServiceCapabilities(Map<Capability, String> lbServiceCapabilityMap) {\n@@ -3539,8 +3573,16 @@ void validateLoadBalancerServiceCapabilities(Map<Capability, String> lbServiceCa\n                     if (!enabled && !disabled) {\n                         throw new InvalidParameterValueException(\"Unknown specified value for \" + Capability.InlineMode.getName());\n                     }\n+                } else if (cap == Capability.LbSchemes) {\n+                    boolean internalLb = value.contains(\"internal\");\n+                    boolean publicLb = value.contains(\"public\");\n+                    if (!internalLb && !publicLb) {\n+                        throw new InvalidParameterValueException(\"Unknown specified value for \" + Capability.LbSchemes.getName());\n+                    }\n                 } else {\n-                    throw new InvalidParameterValueException(\"Only \" + Capability.SupportedLBIsolation.getName() + \", \" + Capability.ElasticLb.getName() + \", \" + Capability.InlineMode.getName() + \" capabilities can be sepcified for LB service\");\n+                    throw new InvalidParameterValueException(\"Only \" + Capability.SupportedLBIsolation.getName() + \n+                            \", \" + Capability.ElasticLb.getName() + \", \" + Capability.InlineMode.getName()\n+                            + \", \" + Capability.LbSchemes.getName() + \" capabilities can be sepcified for LB service\");\n                 }\n             }\n         }\n@@ -3612,7 +3654,7 @@ void validateStaticNatServiceCapablities(Map<Capability, String> staticNatServic\n     @DB\n     public NetworkOfferingVO createNetworkOffering(String name, String displayText, TrafficType trafficType, String tags, boolean specifyVlan, Availability availability, Integer networkRate,\n             Map<Service, Set<Provider>> serviceProviderMap, boolean isDefault, Network.GuestType type, boolean systemOnly, Long serviceOfferingId,\n-            boolean conserveMode, Map<Service, Map<Capability, String>> serviceCapabilityMap, boolean specifyIpRanges, boolean isPersistent) {\n+            boolean conserveMode, Map<Service, Map<Capability, String>> serviceCapabilityMap, boolean specifyIpRanges, boolean isPersistent, Map<NetworkOffering.Detail,String> details) {\n \n         String multicastRateStr = _configDao.getValue(\"multicast.throttling.rate\");\n         int multicastRate = ((multicastRateStr == null) ? 10 : Integer.parseInt(multicastRateStr));\n@@ -3666,6 +3708,8 @@ public NetworkOfferingVO createNetworkOffering(String name, String displayText,\n         boolean elasticIp = false;\n         boolean associatePublicIp = false;\n         boolean inline = false;\n+        boolean publicLb = false;\n+        boolean internalLb = false;\n         if (serviceCapabilityMap != null && !serviceCapabilityMap.isEmpty()) {\n             Map<Capability, String> lbServiceCapabilityMap = serviceCapabilityMap.get(Service.Lb);\n             \n@@ -3690,6 +3734,23 @@ public NetworkOfferingVO createNetworkOffering(String name, String displayText,\n                 } else {\n                     inline = false;\n                 }\n+                \n+                String publicLbStr = lbServiceCapabilityMap.get(Capability.LbSchemes);\n+                if (serviceProviderMap.containsKey(Service.Lb)) {\n+                    if (publicLbStr != null) {\n+                        _networkModel.checkCapabilityForProvider(serviceProviderMap.get(Service.Lb), Service.Lb, Capability.LbSchemes, publicLbStr);\n+                        internalLb = publicLbStr.contains(\"internal\");\n+                        publicLb = publicLbStr.contains(\"public\");\n+                    } else {\n+                        //if not specified, default public lb to true\n+                        publicLb = true;\n+                    }\n+                }\n+            }\n+            \n+            //in the current version of the code, publicLb and specificLb can't both be set to true for the same network offering\n+            if (publicLb && internalLb) {\n+                throw new InvalidParameterValueException(\"Public lb and internal lb can't be enabled at the same time on the offering\");\n             }\n \n             Map<Capability, String> sourceNatServiceCapabilityMap = serviceCapabilityMap.get(Service.SourceNat);\n@@ -3724,18 +3785,23 @@ public NetworkOfferingVO createNetworkOffering(String name, String displayText,\n \n         NetworkOfferingVO offering = new NetworkOfferingVO(name, displayText, trafficType, systemOnly, specifyVlan, \n                 networkRate, multicastRate, isDefault, availability, tags, type, conserveMode, dedicatedLb,\n-                sharedSourceNat, redundantRouter, elasticIp, elasticLb, specifyIpRanges, inline, isPersistent, associatePublicIp);\n+                sharedSourceNat, redundantRouter, elasticIp, elasticLb, specifyIpRanges, inline, isPersistent, associatePublicIp, publicLb, internalLb);\n \n         if (serviceOfferingId != null) {\n             offering.setServiceOfferingId(serviceOfferingId);\n         }\n+        \n+        //validate the details\n+        if (details != null) {\n+            validateNtwkOffDetails(details, serviceProviderMap);\n+        }\n \n         Transaction txn = Transaction.currentTxn();\n         txn.start();\n-        // create network offering object\n+        //1) create network offering object\n         s_logger.debug(\"Adding network offering \" + offering);\n-        offering = _networkOfferingDao.persist(offering);\n-        // populate services and providers\n+        offering = _networkOfferingDao.persist(offering, details);\n+        //2) populate services and providers\n         if (serviceProviderMap != null) {\n             for (Network.Service service : serviceProviderMap.keySet()) {\n                 Set<Provider> providers = serviceProviderMap.get(service);\n@@ -3769,6 +3835,42 @@ public NetworkOfferingVO createNetworkOffering(String name, String displayText,\n         return offering;\n     }\n \n+    protected void validateNtwkOffDetails(Map<Detail, String> details, Map<Service, Set<Provider>> serviceProviderMap) {\n+        for (Detail detail : details.keySet()) {\n+            \n+            Provider lbProvider = null;\n+            if (detail == NetworkOffering.Detail.InternalLbProvider || detail == NetworkOffering.Detail.PublicLbProvider) {\n+                //1) Vaidate the detail values - have to match the lb provider name\n+                String providerStr = details.get(detail);\n+                if (Network.Provider.getProvider(providerStr) == null) {\n+                    throw new InvalidParameterValueException(\"Invalid value \" + providerStr + \" for the detail \" + detail);\n+                }\n+                if (serviceProviderMap.get(Service.Lb) != null) {\n+                    for (Provider provider : serviceProviderMap.get(Service.Lb)) {\n+                        if (provider.getName().equalsIgnoreCase(providerStr)) {\n+                            lbProvider = provider;\n+                            break;\n+                        }\n+                    }\n+                } \n+                \n+                if (lbProvider == null) {\n+                    throw new InvalidParameterValueException(\"Invalid value \" + details.get(detail)\n+                            + \" for the detail \" + detail + \". The provider is not supported by the network offering\");\n+                }\n+                \n+                //2) validate if the provider supports the scheme\n+                Set<Provider> lbProviders = new HashSet<Provider>();\n+                lbProviders.add(lbProvider);\n+                if (detail == NetworkOffering.Detail.InternalLbProvider) {\n+                    _networkModel.checkCapabilityForProvider(lbProviders, Service.Lb, Capability.LbSchemes, Scheme.Internal.toString());\n+                } else if (detail == NetworkOffering.Detail.PublicLbProvider){\n+                    _networkModel.checkCapabilityForProvider(lbProviders, Service.Lb, Capability.LbSchemes, Scheme.Public.toString());\n+                }\n+            }\n+        }\n+    }\n+\n \n     @Override\n     public List<? extends NetworkOffering> searchForNetworkOfferings(ListNetworkOfferingsCmd cmd) {\n@@ -3994,6 +4096,7 @@ public NetworkOfferingVO createNetworkOffering(String name, String displayText,\n     public boolean isOfferingForVpc(NetworkOffering offering) {\n         boolean vpcProvider = _ntwkOffServiceMapDao.isProviderForNetworkOffering(offering.getId(),\n                 Provider.VPCVirtualRouter);\n+        boolean internalLb = offering.getInternalLb();\n         return vpcProvider;\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/configuration/ConfigurationManagerImpl.java",
                "sha": "fdc0ffbabe1f576bc9e01eb6f796a9dac8535f4c",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/ExternalLoadBalancerDeviceManager.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/ExternalLoadBalancerDeviceManager.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 3,
                "filename": "server/src/com/cloud/network/ExternalLoadBalancerDeviceManager.java",
                "patch": "@@ -23,7 +23,7 @@\n import com.cloud.exception.ResourceUnavailableException;\n import com.cloud.host.Host;\n import com.cloud.network.dao.ExternalLoadBalancerDeviceVO;\n-import com.cloud.network.rules.FirewallRule;\n+import com.cloud.network.lb.LoadBalancingRule;\n import com.cloud.resource.ServerResource;\n import com.cloud.utils.component.Manager;\n \n@@ -89,7 +89,7 @@ public ExternalLoadBalancerDeviceVO addExternalLoadBalancer(long physicalNetwork\n      * @return true if successfully applied rules\n      * @throws ResourceUnavailableException\n      */\n-    public boolean applyLoadBalancerRules(Network network, List<? extends FirewallRule> rules) throws ResourceUnavailableException;\n+    public boolean applyLoadBalancerRules(Network network, List<LoadBalancingRule> rules) throws ResourceUnavailableException;\n \n     /**\n      * implements or shutdowns guest network on the load balancer device assigned to the guest network\n@@ -102,6 +102,6 @@ public ExternalLoadBalancerDeviceVO addExternalLoadBalancer(long physicalNetwork\n     public boolean manageGuestNetworkWithExternalLoadBalancer(boolean add, Network guestConfig) throws ResourceUnavailableException,\n             InsufficientCapacityException;\n \n-    public List<LoadBalancerTO> getLBHealthChecks(Network network, List<? extends FirewallRule> rules)\n+    public List<LoadBalancerTO> getLBHealthChecks(Network network, List<LoadBalancingRule> rules)\n             throws ResourceUnavailableException;\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/ExternalLoadBalancerDeviceManager.java",
                "sha": "cb00614b086de7da7729fce989dff9f99c93892b",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/ExternalLoadBalancerDeviceManagerImpl.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/ExternalLoadBalancerDeviceManagerImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 23,
                "filename": "server/src/com/cloud/network/ExternalLoadBalancerDeviceManagerImpl.java",
                "patch": "@@ -829,19 +829,11 @@ private MappingNic getLoadBalancingIpNic(DataCenterVO zone, Network network, lon\n     }\n \n     @Override\n-    public boolean applyLoadBalancerRules(Network network, List<? extends FirewallRule> rules) throws ResourceUnavailableException {\n+    public boolean applyLoadBalancerRules(Network network, List<LoadBalancingRule> loadBalancingRules) throws ResourceUnavailableException {\n         // Find the external load balancer in this zone\n         long zoneId = network.getDataCenterId();\n         DataCenterVO zone = _dcDao.findById(zoneId);\n \n-        List<LoadBalancingRule> loadBalancingRules = new ArrayList<LoadBalancingRule>();\n-\n-        for (FirewallRule rule : rules) {\n-            if (rule.getPurpose().equals(Purpose.LoadBalancing)) {\n-                loadBalancingRules.add((LoadBalancingRule) rule);\n-            }\n-        }\n-\n         if (loadBalancingRules == null || loadBalancingRules.isEmpty()) {\n             return true;\n         }\n@@ -870,12 +862,13 @@ public boolean applyLoadBalancerRules(Network network, List<? extends FirewallRu\n             String protocol = rule.getProtocol();\n             String algorithm = rule.getAlgorithm();\n             String uuid = rule.getUuid();\n-            String srcIp = _networkModel.getIp(rule.getSourceIpAddressId()).getAddress().addr();\n+            String srcIp = rule.getSourceIp().addr();\n             int srcPort = rule.getSourcePortStart();\n             List<LbDestination> destinations = rule.getDestinations();\n \n             if (externalLoadBalancerIsInline) {\n-                MappingNic nic = getLoadBalancingIpNic(zone, network, rule.getSourceIpAddressId(), revoked, null);\n+                long ipId = _networkModel.getPublicIpAddress(rule.getSourceIp().addr(), network.getDataCenterId()).getId();\n+                MappingNic nic = getLoadBalancingIpNic(zone, network, ipId, revoked, null);\n                 mappingStates.add(nic.getState());\n                 NicVO loadBalancingIpNic = nic.getNic();\n                 if (loadBalancingIpNic == null) {\n@@ -927,7 +920,8 @@ public boolean applyLoadBalancerRules(Network network, List<? extends FirewallRu\n                     } else {\n                         continue;\n                     }\n-                    getLoadBalancingIpNic(zone, network, rule.getSourceIpAddressId(), revoke, existedGuestIp);\n+                    long sourceIpId = _networkModel.getPublicIpAddress(rule.getSourceIp().addr(), network.getDataCenterId()).getId();\n+                    getLoadBalancingIpNic(zone, network, sourceIpId, revoke, existedGuestIp);\n                 }\n             }\n             throw new ResourceUnavailableException(ex.getMessage(), DataCenter.class, network.getDataCenterId());\n@@ -1113,22 +1107,14 @@ protected IpDeployer getIpDeployerForInlineMode(Network network) {\n     }\n \n     @Override\n-    public List<LoadBalancerTO> getLBHealthChecks(Network network, List<? extends FirewallRule> rules)\n+    public List<LoadBalancerTO> getLBHealthChecks(Network network, List<LoadBalancingRule> loadBalancingRules)\n             throws ResourceUnavailableException {\n \n         // Find the external load balancer in this zone\n         long zoneId = network.getDataCenterId();\n         DataCenterVO zone = _dcDao.findById(zoneId);\n         HealthCheckLBConfigAnswer answer = null;\n \n-        List<LoadBalancingRule> loadBalancingRules = new ArrayList<LoadBalancingRule>();\n-\n-        for (FirewallRule rule : rules) {\n-            if (rule.getPurpose().equals(Purpose.LoadBalancing)) {\n-                loadBalancingRules.add((LoadBalancingRule) rule);\n-            }\n-        }\n-\n         if (loadBalancingRules == null || loadBalancingRules.isEmpty()) {\n             return null;\n         }\n@@ -1158,12 +1144,13 @@ protected IpDeployer getIpDeployerForInlineMode(Network network) {\n             String protocol = rule.getProtocol();\n             String algorithm = rule.getAlgorithm();\n             String uuid = rule.getUuid();\n-            String srcIp = _networkModel.getIp(rule.getSourceIpAddressId()).getAddress().addr();\n+            String srcIp = rule.getSourceIp().addr();\n             int srcPort = rule.getSourcePortStart();\n             List<LbDestination> destinations = rule.getDestinations();\n \n             if (externalLoadBalancerIsInline) {\n-                MappingNic nic = getLoadBalancingIpNic(zone, network, rule.getSourceIpAddressId(), revoked, null);\n+                long sourceIpId = _networkModel.getPublicIpAddress(rule.getSourceIp().addr(), network.getDataCenterId()).getId();\n+                MappingNic nic = getLoadBalancingIpNic(zone, network, sourceIpId, revoked, null);\n                 mappingStates.add(nic.getState());\n                 NicVO loadBalancingIpNic = nic.getNic();\n                 if (loadBalancingIpNic == null) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/ExternalLoadBalancerDeviceManagerImpl.java",
                "sha": "f93bf7ae9b59ea6f914a88ed937e1f67ef3be050",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/ExternalLoadBalancerUsageManagerImpl.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/ExternalLoadBalancerUsageManagerImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 15,
                "filename": "server/src/com/cloud/network/ExternalLoadBalancerUsageManagerImpl.java",
                "patch": "@@ -16,6 +16,22 @@\n // under the License.\n package com.cloud.network;\n \n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.ejb.Local;\n+import javax.inject.Inject;\n+import javax.naming.ConfigurationException;\n+\n+import org.apache.log4j.Logger;\n+import org.springframework.stereotype.Component;\n+\n import com.cloud.agent.AgentManager;\n import com.cloud.agent.api.ExternalNetworkResourceUsageAnswer;\n import com.cloud.agent.api.ExternalNetworkResourceUsageCommand;\n@@ -48,6 +64,7 @@\n import com.cloud.network.dao.NetworkVO;\n import com.cloud.network.dao.PhysicalNetworkDao;\n import com.cloud.network.dao.PhysicalNetworkServiceProviderDao;\n+import com.cloud.network.rules.LoadBalancerContainer.Scheme;\n import com.cloud.network.rules.PortForwardingRuleVO;\n import com.cloud.network.rules.dao.PortForwardingRulesDao;\n import com.cloud.offerings.dao.NetworkOfferingDao;\n@@ -68,20 +85,6 @@\n import com.cloud.vm.NicVO;\n import com.cloud.vm.dao.DomainRouterDao;\n import com.cloud.vm.dao.NicDao;\n-import org.apache.log4j.Logger;\n-import org.springframework.stereotype.Component;\n-\n-import javax.ejb.Local;\n-import javax.inject.Inject;\n-import javax.naming.ConfigurationException;\n-import java.net.URI;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.ScheduledExecutorService;\n-import java.util.concurrent.TimeUnit;\n \n @Component\n @Local(value = { ExternalLoadBalancerUsageManager.class })\n@@ -647,9 +650,10 @@ private boolean manageStatsEntries(boolean create, long accountId, long zoneId,\n                 // If an external load balancer is added, manage one entry for each load balancing rule in this network\n                 if (externalLoadBalancer != null && lbAnswer != null) {\n                     boolean inline = _networkMgr.isNetworkInlineMode(network);\n-                    List<LoadBalancerVO> loadBalancers = _loadBalancerDao.listByNetworkId(network.getId());\n+                    List<LoadBalancerVO> loadBalancers = _loadBalancerDao.listByNetworkIdAndScheme(network.getId(), Scheme.Public);\n                     for (LoadBalancerVO loadBalancer : loadBalancers) {\n                         String publicIp = _networkMgr.getIp(loadBalancer.getSourceIpAddressId()).getAddress().addr();\n+                        \n                         if (!createOrUpdateStatsEntry(create, accountId, zoneId, network.getId(), publicIp, externalLoadBalancer.getId(), lbAnswer, inline)) {\n                             throw new ExecutionException(networkErrorMsg + \", load balancing rule public IP = \" + publicIp);\n                         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/ExternalLoadBalancerUsageManagerImpl.java",
                "sha": "2c8031c64f0f7cf38db45339741c0259eb118c8a",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/NetworkManager.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/NetworkManager.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 1,
                "filename": "server/src/com/cloud/network/NetworkManager.java",
                "patch": "@@ -43,6 +43,7 @@\n import com.cloud.network.element.UserDataServiceProvider;\n import com.cloud.network.guru.NetworkGuru;\n import com.cloud.network.rules.FirewallRule;\n+import com.cloud.network.rules.LoadBalancerContainer.Scheme;\n import com.cloud.network.rules.StaticNat;\n import com.cloud.offering.NetworkOffering;\n import com.cloud.offerings.NetworkOfferingVO;\n@@ -333,7 +334,7 @@ IpAddress allocateIp(Account ipOwner, boolean isSystem, Account caller, long cal\n \n     int getRuleCountForIp(Long addressId, FirewallRule.Purpose purpose, FirewallRule.State state);\n \n-    LoadBalancingServiceProvider getLoadBalancingProviderForNetwork(Network network);\n+    LoadBalancingServiceProvider getLoadBalancingProviderForNetwork(Network network, Scheme lbScheme);\n \n \n     boolean isSecondaryIpSetForNic(long nicId);",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/NetworkManager.java",
                "sha": "34a092a465a9e5e9bba784cb49399913b1a7f0a2",
                "status": "modified"
            },
            {
                "additions": 78,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/NetworkManagerImpl.java",
                "changes": 103,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/NetworkManagerImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 25,
                "filename": "server/src/com/cloud/network/NetworkManagerImpl.java",
                "patch": "@@ -62,6 +62,13 @@\n import com.cloud.network.lb.LoadBalancingRulesManager;\n import com.cloud.network.rules.*;\n import com.cloud.network.rules.FirewallRule.Purpose;\n+import com.cloud.network.rules.FirewallRuleVO;\n+import com.cloud.network.rules.LoadBalancerContainer.Scheme;\n+import com.cloud.network.rules.PortForwardingRuleVO;\n+import com.cloud.network.rules.RulesManager;\n+import com.cloud.network.rules.StaticNat;\n+import com.cloud.network.rules.StaticNatRule;\n+import com.cloud.network.rules.StaticNatRuleImpl;\n import com.cloud.network.rules.dao.PortForwardingRulesDao;\n import com.cloud.network.vpc.NetworkACLManager;\n import com.cloud.network.vpc.VpcManager;\n@@ -72,6 +79,7 @@\n import com.cloud.offerings.NetworkOfferingServiceMapVO;\n import com.cloud.offerings.NetworkOfferingVO;\n import com.cloud.offerings.dao.NetworkOfferingDao;\n+import com.cloud.offerings.dao.NetworkOfferingDetailsDao;\n import com.cloud.offerings.dao.NetworkOfferingServiceMapDao;\n import com.cloud.org.Grouping;\n import com.cloud.user.*;\n@@ -156,6 +164,8 @@\n     @Inject\n     PodVlanMapDao _podVlanMapDao;\n     @Inject\n+    NetworkOfferingDetailsDao _ntwkOffDetailsDao;\n+    @Inject\n     ConfigurationServer _configServer;\n     @Inject\n     AccountGuestVlanMapDao _accountGuestVlanMapDao;\n@@ -948,7 +958,7 @@ public boolean configure(final String name, final Map<String, Object> params) th\n                     _configMgr.createNetworkOffering(NetworkOffering.QuickCloudNoServices,\n                             \"Offering for QuickCloud with no services\", TrafficType.Guest, null, true,\n                             Availability.Optional, null, new HashMap<Network.Service, Set<Network.Provider>>(), true,\n-                            Network.GuestType.Shared, false, null, true, null, true, false);\n+                            Network.GuestType.Shared, false, null, true, null, true, false, null);\n             offering.setState(NetworkOffering.State.Enabled);\n             _networkOfferingDao.update(offering.getId(), offering);\n         }\n@@ -957,14 +967,14 @@ public boolean configure(final String name, final Map<String, Object> params) th\n                     _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedNetworkOfferingWithSGService,\n                             \"Offering for Shared Security group enabled networks\", TrafficType.Guest, null, true,\n                             Availability.Optional, null, defaultSharedNetworkOfferingProviders, true,\n-                            Network.GuestType.Shared, false, null, true, null, true, false);\n+                            Network.GuestType.Shared, false, null, true, null, true, false, null);\n             offering.setState(NetworkOffering.State.Enabled);\n             _networkOfferingDao.update(offering.getId(), offering);\n         }\n \n         if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedNetworkOffering) == null) {\n             offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedNetworkOffering, \"Offering for Shared networks\", TrafficType.Guest, null, true, Availability.Optional, null,\n-                    defaultSharedNetworkOfferingProviders, true, Network.GuestType.Shared, false, null, true, null, true, false);\n+                    defaultSharedNetworkOfferingProviders, true, Network.GuestType.Shared, false, null, true, null, true, false, null);\n             offering.setState(NetworkOffering.State.Enabled);\n             _networkOfferingDao.update(offering.getId(), offering);\n         }\n@@ -987,7 +997,7 @@ public boolean configure(final String name, final Map<String, Object> params) th\n             offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService,\n                     \"Offering for Isolated networks with Source Nat service enabled\", TrafficType.Guest,\n                     null, false, Availability.Required, null, defaultINetworkOfferingProvidersForVpcNetwork,\n-                    true, Network.GuestType.Isolated, false, null, true, null, false, false);\n+                    true, Network.GuestType.Isolated, false, null, true, null, false, false, null);\n             offering.setState(NetworkOffering.State.Enabled);\n             _networkOfferingDao.update(offering.getId(), offering);\n         }\n@@ -996,7 +1006,7 @@ public boolean configure(final String name, final Map<String, Object> params) th\n             offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworks,\n                     \"Offering for Isolated VPC networks with Source Nat service enabled\", TrafficType.Guest,\n                     null, false, Availability.Optional, null, defaultVPCOffProviders,\n-                    true, Network.GuestType.Isolated, false, null, false, null, false, false);\n+                    true, Network.GuestType.Isolated, false, null, false, null, false, false, null);\n             offering.setState(NetworkOffering.State.Enabled);\n             _networkOfferingDao.update(offering.getId(), offering);\n         }\n@@ -1007,7 +1017,7 @@ public boolean configure(final String name, final Map<String, Object> params) th\n             offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksNoLB,\n                     \"Offering for Isolated VPC networks with Source Nat service enabled and LB service disabled\", TrafficType.Guest,\n                     null, false, Availability.Optional, null, defaultVPCOffProviders,\n-                    true, Network.GuestType.Isolated, false, null, false, null, false, false);\n+                    true, Network.GuestType.Isolated, false, null, false, null, false, false, null);\n             offering.setState(NetworkOffering.State.Enabled);\n             _networkOfferingDao.update(offering.getId(), offering);\n         }\n@@ -1016,7 +1026,7 @@ public boolean configure(final String name, final Map<String, Object> params) th\n             offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOffering,\n                     \"Offering for Isolated networks with no Source Nat service\", TrafficType.Guest, null, true,\n                     Availability.Optional, null, defaultIsolatedNetworkOfferingProviders, true, Network.GuestType.Isolated,\n-                    false, null, true, null, true, false);\n+                    false, null, true, null, true, false, null);\n             offering.setState(NetworkOffering.State.Enabled);\n             _networkOfferingDao.update(offering.getId(), offering);\n         }\n@@ -1045,7 +1055,7 @@ public boolean configure(final String name, final Map<String, Object> params) th\n \n         if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedEIPandELBNetworkOffering) == null) {\n             offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedEIPandELBNetworkOffering, \"Offering for Shared networks with Elastic IP and Elastic LB capabilities\", TrafficType.Guest, null, true,\n-                    Availability.Optional, null, netscalerServiceProviders, true, Network.GuestType.Shared, false, null, true, serviceCapabilityMap, true, false);\n+                    Availability.Optional, null, netscalerServiceProviders, true, Network.GuestType.Shared, false, null, true, serviceCapabilityMap, true, false, null);\n             offering.setState(NetworkOffering.State.Enabled);\n             offering.setDedicatedLB(false);\n             _networkOfferingDao.update(offering.getId(), offering);\n@@ -2651,9 +2661,15 @@ protected boolean reprogramNetworkRules(long networkId, Account caller, NetworkV\n             success = false;\n         }\n \n-        // apply load balancer rules\n-        if (!_lbMgr.applyLoadBalancersForNetwork(networkId)) {\n-            s_logger.warn(\"Failed to reapply load balancer rules as a part of network id=\" + networkId + \" restart\");\n+        // apply public load balancer rules\n+        if (!_lbMgr.applyLoadBalancersForNetwork(networkId, Scheme.Public)) {\n+            s_logger.warn(\"Failed to reapply Public load balancer rules as a part of network id=\" + networkId + \" restart\");\n+            success = false;\n+        }\n+        \n+        // apply internal load balancer rules\n+        if (!_lbMgr.applyLoadBalancersForNetwork(networkId, Scheme.Internal)) {\n+            s_logger.warn(\"Failed to reapply internal load balancer rules as a part of network id=\" + networkId + \" restart\");\n             success = false;\n         }\n \n@@ -3234,12 +3250,22 @@ private boolean shutdownNetworkResources(long networkId, Account caller, long ca\n         }\n \n         try {\n-            if (!_lbMgr.revokeLoadBalancersForNetwork(networkId)) {\n-                s_logger.warn(\"Failed to cleanup lb rules as a part of shutdownNetworkRules\");\n+            if (!_lbMgr.revokeLoadBalancersForNetwork(networkId, Scheme.Public)) {\n+                s_logger.warn(\"Failed to cleanup public lb rules as a part of shutdownNetworkRules\");\n+                success = false;\n+            }\n+        } catch (ResourceUnavailableException ex) {\n+            s_logger.warn(\"Failed to cleanup public lb rules as a part of shutdownNetworkRules due to \", ex);\n+            success = false;\n+        }\n+        \n+        try {\n+            if (!_lbMgr.revokeLoadBalancersForNetwork(networkId, Scheme.Internal)) {\n+                s_logger.warn(\"Failed to cleanup internal lb rules as a part of shutdownNetworkRules\");\n                 success = false;\n             }\n         } catch (ResourceUnavailableException ex) {\n-            s_logger.warn(\"Failed to cleanup lb rules as a part of shutdownNetworkRules due to \", ex);\n+            s_logger.warn(\"Failed to cleanup public lb rules as a part of shutdownNetworkRules due to \", ex);\n             success = false;\n         }\n \n@@ -3645,7 +3671,7 @@ protected NicProfile getNicProfileForVm(Network network, NicProfile requested, V\n                 }\n             }\n         } else {\n-            NicVO nicVO = _nicDao.findByInstanceIdAndNetworkId(network.getId(), vm.getId());\n+            NicVO nicVO = _nicDao.findByNtwkIdAndInstanceId(network.getId(), vm.getId());\n             if (nicVO != null) {\n                 nic = _networkModel.getNicProfile(vm, network.getId(), null);\n             }\n@@ -3747,35 +3773,62 @@ private void setStateMachine() {\n         return null;\n     }\n \n-    protected NetworkElement getElementForServiceInNetwork(Network network, Service service) {\n+    protected List<NetworkElement> getElementForServiceInNetwork(Network network, Service service) {\n+        List<NetworkElement> elements = new ArrayList<NetworkElement>();\n         List<Provider> providers = getProvidersForServiceInNetwork(network, service);\n         //Only support one provider now\n         if (providers == null)  {\n             s_logger.error(\"Cannot find \" + service.getName() + \" provider for network \" + network.getId());\n             return null;\n         }\n-        if (providers.size() != 1) {\n+        if (providers.size() != 1 && service != Service.Lb) {\n+            //support more than one LB providers only\n             s_logger.error(\"Found \" + providers.size() + \" \" + service.getName() + \" providers for network!\" + network.getId());\n             return null;\n+        } \n+        \n+        for (Provider provider : providers) {\n+            NetworkElement element = _networkModel.getElementImplementingProvider(provider.getName());\n+            s_logger.info(\"Let \" + element.getName() + \" handle \" + service.getName() + \" in network \" + network.getId());\n+            elements.add(element);\n         }\n-        NetworkElement element = _networkModel.getElementImplementingProvider(providers.get(0).getName());\n-        s_logger.info(\"Let \" + element.getName() + \" handle \" + service.getName() + \" in network \" + network.getId());\n-        return element;\n+        return elements;\n     }\n     \n     @Override\n     public StaticNatServiceProvider getStaticNatProviderForNetwork(Network network) {\n-        NetworkElement element = getElementForServiceInNetwork(network, Service.StaticNat);\n+        //only one provider per Static nat service is supoprted\n+        NetworkElement element = getElementForServiceInNetwork(network, Service.StaticNat).get(0);\n         assert element instanceof StaticNatServiceProvider;\n         return (StaticNatServiceProvider)element;\n     }\n \n     @Override\n-    public LoadBalancingServiceProvider getLoadBalancingProviderForNetwork(Network network) {\n-        NetworkElement element = getElementForServiceInNetwork(network, Service.Lb);\n-        assert element instanceof LoadBalancingServiceProvider; \n-        return (LoadBalancingServiceProvider)element;\n+    public LoadBalancingServiceProvider getLoadBalancingProviderForNetwork(Network network, Scheme lbScheme) {\n+        List<NetworkElement> lbElements = getElementForServiceInNetwork(network, Service.Lb);\n+        NetworkElement lbElement = null;\n+        if (lbElements.size() > 1) {\n+            String providerName = null;\n+            //get network offering details\n+            NetworkOffering off = _configMgr.getNetworkOffering(network.getNetworkOfferingId());\n+            if (lbScheme == Scheme.Public) {\n+                providerName = _ntwkOffDetailsDao.getDetail(off.getId(), NetworkOffering.Detail.PublicLbProvider);\n+            } else {\n+                providerName = _ntwkOffDetailsDao.getDetail(off.getId(), NetworkOffering.Detail.InternalLbProvider);\n+            }\n+            if (providerName == null) {\n+                throw new InvalidParameterValueException(\"Can't find Lb provider supporting scheme \" + lbScheme.toString() + \" in network \" + network);\n+            }\n+            lbElement =  _networkModel.getElementImplementingProvider(providerName);\n+        } else if (lbElements.size() == 1){\n+            lbElement = lbElements.get(0);\n+        }\n+                \n+        assert lbElement != null;\n+        assert lbElement instanceof LoadBalancingServiceProvider; \n+        return (LoadBalancingServiceProvider)lbElement;        \n     }\n+    \n     @Override\n     public boolean isNetworkInlineMode(Network network) {\n         NetworkOfferingVO offering = _networkOfferingDao.findById(network.getNetworkOfferingId());",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/NetworkManagerImpl.java",
                "sha": "c91243095dac924fddcb7004bf3e8c18822c52d6",
                "status": "modified"
            },
            {
                "additions": 44,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/NetworkModelImpl.java",
                "changes": 57,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/NetworkModelImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 13,
                "filename": "server/src/com/cloud/network/NetworkModelImpl.java",
                "patch": "@@ -32,6 +32,7 @@\n import javax.inject.Inject;\n import javax.naming.ConfigurationException;\n \n+import org.apache.cloudstack.lb.dao.ApplicationLoadBalancerRuleDao;\n import org.apache.log4j.Logger;\n import org.springframework.stereotype.Component;\n \n@@ -52,13 +53,11 @@\n import com.cloud.exception.PermissionDeniedException;\n import com.cloud.exception.UnsupportedServiceException;\n import com.cloud.hypervisor.Hypervisor.HypervisorType;\n-import com.cloud.server.ConfigurationServer;\n import com.cloud.network.IpAddress.State;\n import com.cloud.network.Network.Capability;\n import com.cloud.network.Network.GuestType;\n import com.cloud.network.Network.Provider;\n import com.cloud.network.Network.Service;\n-import com.cloud.network.Networks.IsolationType;\n import com.cloud.network.Networks.TrafficType;\n import com.cloud.network.addr.PublicIp;\n import com.cloud.network.dao.FirewallRulesDao;\n@@ -86,11 +85,14 @@\n import com.cloud.network.rules.dao.PortForwardingRulesDao;\n import com.cloud.network.vpc.dao.PrivateIpDao;\n import com.cloud.offering.NetworkOffering;\n+import com.cloud.offering.NetworkOffering.Detail;\n import com.cloud.offerings.NetworkOfferingServiceMapVO;\n import com.cloud.offerings.NetworkOfferingVO;\n import com.cloud.offerings.dao.NetworkOfferingDao;\n+import com.cloud.offerings.dao.NetworkOfferingDetailsDao;\n import com.cloud.offerings.dao.NetworkOfferingServiceMapDao;\n import com.cloud.projects.dao.ProjectAccountDao;\n+import com.cloud.server.ConfigurationServer;\n import com.cloud.user.Account;\n import com.cloud.user.AccountVO;\n import com.cloud.user.DomainManager;\n@@ -183,9 +185,13 @@ public void setNetworkElements(List<NetworkElement> _networkElements) {\n     @Inject\n     UserIpv6AddressDao _ipv6Dao;\n     @Inject\n-    NicSecondaryIpDao _nicSecondaryIpDao;;\n+    NicSecondaryIpDao _nicSecondaryIpDao;\n+    @Inject\n+    ApplicationLoadBalancerRuleDao _appLbRuleDao;\n     @Inject\n     private ProjectAccountDao _projectAccountDao;\n+    @Inject\n+    NetworkOfferingDetailsDao _ntwkOffDetailsDao;\n \n     private final HashMap<String, NetworkOfferingVO> _systemNetworks = new HashMap<String, NetworkOfferingVO>(5);\n     static Long _privateOfferingId = null;\n@@ -604,7 +610,6 @@ public boolean isIP6AddressAvailableInVlan(long vlanId) {\n             NetworkElement element = getElementImplementingProvider(instance.getProvider());\n             if (element != null) {\n                 Map<Service, Map<Capability, String>> elementCapabilities = element.getCapabilities();\n-                ;\n                 if (elementCapabilities != null) {\n                     networkCapabilities.put(service, elementCapabilities.get(service));\n                 }\n@@ -917,7 +922,7 @@ public Integer getNetworkRate(long networkId, Long vmId) {\n         boolean isUserVmsDefaultNetwork = false;\n         boolean isDomRGuestOrPublicNetwork = false;\n         if (vm != null) {\n-            Nic nic = _nicDao.findByInstanceIdAndNetworkId(networkId, vmId);\n+            Nic nic = _nicDao.findByNtwkIdAndInstanceId(networkId, vmId);\n             if (vm.getType() == Type.User && nic != null && nic.isDefaultNic()) {\n                 isUserVmsDefaultNetwork = true;\n             } else if (vm.getType() == Type.DomainRouter && ntwkOff != null && (ntwkOff.getTrafficType() == TrafficType.Public || ntwkOff.getTrafficType() == TrafficType.Guest)) {\n@@ -1465,10 +1470,8 @@ public void checkCapabilityForProvider(Set<Provider> providers, Service service,\n                     throw new UnsupportedServiceException(\"Service \" + service.getName() + \" doesn't have capability \" + cap.getName() + \" for element=\" + element.getName() + \" implementing Provider=\"\n                             + provider.getName());\n                 }\n-    \n-                capValue = capValue.toLowerCase();\n-    \n-                if (!value.contains(capValue)) {\n+        \n+                if (!value.toLowerCase().contains(capValue.toLowerCase())) {\n                     throw new UnsupportedServiceException(\"Service \" + service.getName() + \" doesn't support value \" + capValue + \" for capability \" + cap.getName() + \" for element=\" + element.getName()\n                             + \" implementing Provider=\" + provider.getName());\n                 }\n@@ -1664,9 +1667,7 @@ public boolean isNetworkAvailableInDomain(long networkId, long domainId) {\n     @Override\n     public Set<Long> getAvailableIps(Network network, String requestedIp) {\n         String[] cidr = network.getCidr().split(\"/\");\n-        List<String> ips = _nicDao.listIpAddressInNetwork(network.getId());\n-        List<String> secondaryIps = _nicSecondaryIpDao.listSecondaryIpAddressInNetwork(network.getId());\n-        ips.addAll(secondaryIps);\n+        List<String> ips = getUsedIpsInNetwork(network);\n         Set<Long> usedIps = new TreeSet<Long>(); \n \n         for (String ip : ips) {\n@@ -1677,6 +1678,7 @@ public boolean isNetworkAvailableInDomain(long networkId, long domainId) {\n \n             usedIps.add(NetUtils.ip2Long(ip));\n         }\n+\n         Set<Long> allPossibleIps = NetUtils.getAllIpsFromCidr(cidr[0], Integer.parseInt(cidr[1]), usedIps);\n \n         String gateway = network.getGateway();\n@@ -1685,6 +1687,19 @@ public boolean isNetworkAvailableInDomain(long networkId, long domainId) {\n \n         return allPossibleIps;\n     }\n+    \n+    @Override\n+    public List<String> getUsedIpsInNetwork(Network network) {\n+        //Get all ips used by vms nics\n+        List<String> ips = _nicDao.listIpAddressInNetwork(network.getId());\n+        //Get all secondary ips for nics\n+        List<String> secondaryIps = _nicSecondaryIpDao.listSecondaryIpAddressInNetwork(network.getId());\n+        ips.addAll(secondaryIps);\n+        //Get ips used by load balancers\n+        List<String> lbIps = _appLbRuleDao.listLbIpsBySourceIpNetworkId(network.getId());\n+        ips.addAll(lbIps);\n+        return ips;\n+    }\n \n     @Override\n     public String getDomainNetworkDomain(long domainId, long zoneId) {\n@@ -1792,7 +1807,7 @@ public NicProfile getNicProfile(VirtualMachine vm, long networkId, String broadc\n         if (broadcastUri != null) {\n             nic = _nicDao.findByNetworkIdInstanceIdAndBroadcastUri(networkId, vm.getId(), broadcastUri);\n         } else {\n-           nic =  _nicDao.findByInstanceIdAndNetworkId(networkId, vm.getId());\n+           nic =  _nicDao.findByNtwkIdAndInstanceId(networkId, vm.getId());\n         }\n         if (nic == null) {\n            return null;\n@@ -2051,6 +2066,22 @@ public NicVO getPlaceholderNicForRouter(Network network, Long podId) {\n         return null;\n     }\n     \n+\n+    @Override\n+    public IpAddress getPublicIpAddress(String ipAddress, long zoneId) {\n+        List<? extends Network> networks = _networksDao.listByZoneAndTrafficType(zoneId, TrafficType.Public);\n+        if (networks.isEmpty() || networks.size() > 1) {\n+            throw new CloudRuntimeException(\"Can't find public network in the zone specified\");\n+        }\n+        \n+        return _ipAddressDao.findByIpAndSourceNetworkId(networks.get(0).getId(), ipAddress);\n+    }\n+    \n+    @Override\n+    public Map<Detail, String> getNtwkOffDetails(long offId) {\n+        return _ntwkOffDetailsDao.getNtwkOffDetails(offId);\n+    }\n+\n     \n     @Override\n     public Networks.IsolationType[] listNetworkIsolationMethods() {",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/NetworkModelImpl.java",
                "sha": "135fd2905358e72070af5e7117ea19ac68efb20f",
                "status": "modified"
            },
            {
                "additions": 64,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/NetworkServiceImpl.java",
                "changes": 68,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/NetworkServiceImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 4,
                "filename": "server/src/com/cloud/network/NetworkServiceImpl.java",
                "patch": "@@ -47,6 +47,7 @@\n import org.apache.cloudstack.api.command.user.network.ListNetworksCmd;\n import org.apache.cloudstack.api.command.user.network.RestartNetworkCmd;\n import org.apache.cloudstack.api.command.user.vm.ListNicsCmd;\n+import org.apache.cloudstack.network.element.InternalLoadBalancerElementService;\n import org.apache.log4j.Logger;\n import org.springframework.stereotype.Component;\n \n@@ -170,6 +171,33 @@\n import com.cloud.vm.dao.NicSecondaryIpVO;\n import com.cloud.vm.dao.UserVmDao;\n import com.cloud.vm.dao.VMInstanceDao;\n+import com.cloud.vm.*;\n+import com.cloud.vm.dao.*;\n+import org.apache.cloudstack.acl.ControlledEntity.ACLType;\n+import org.apache.cloudstack.acl.SecurityChecker;\n+import org.apache.cloudstack.acl.SecurityChecker.AccessType;\n+import org.apache.cloudstack.api.command.admin.network.DedicateGuestVlanRangeCmd;\n+import org.apache.cloudstack.api.command.admin.network.ListDedicatedGuestVlanRangesCmd;\n+import org.apache.cloudstack.api.command.admin.usage.ListTrafficTypeImplementorsCmd;\n+import org.apache.cloudstack.api.command.user.network.CreateNetworkCmd;\n+import org.apache.cloudstack.api.command.user.network.ListNetworksCmd;\n+import org.apache.cloudstack.api.command.user.network.RestartNetworkCmd;\n+import org.apache.cloudstack.api.command.user.vm.ListNicsCmd;\n+import org.apache.log4j.Logger;\n+import org.springframework.stereotype.Component;\n+\n+import javax.ejb.Local;\n+import javax.inject.Inject;\n+import javax.naming.ConfigurationException;\n+import java.net.Inet6Address;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.security.InvalidParameterException;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.*;\n+\n \n /**\n  * NetworkServiceImpl implements NetworkService.\n@@ -267,6 +295,8 @@\n     HostDao _hostDao;\n     @Inject\n     HostPodDao _hostPodDao;\n+    @Inject \n+    InternalLoadBalancerElementService _internalLbElementSvc;\n     @Inject\n     DataCenterVnetDao _datacneter_vnet;\n     @Inject\n@@ -1187,6 +1217,10 @@ public Network createGuestNetwork(CreateNetworkCmd cmd) throws InsufficientCapac\n             if (_configMgr.isOfferingForVpc(ntwkOff)){\n                 throw new InvalidParameterValueException(\"Network offering can be used for VPC networks only\");\n             }\n+            if (ntwkOff.getInternalLb()) {\n+                throw new InvalidParameterValueException(\"Internal Lb can be enabled on vpc networks only\");\n+            }\n+\n             network = _networkMgr.createGuestNetwork(networkOfferingId, name, displayText, gateway, cidr, vlanId,\n             \t\tnetworkDomain, owner, sharedDomainId, pNtwk, zoneId, aclType, subdomainAccess, vpcId, ip6Gateway, ip6Cidr);\n         }\n@@ -2134,8 +2168,6 @@ public Network updateGuestNetwork(long networkId, String name, String displayTex\n     }\n \n \n-\n-\n     protected Set<Long> getAvailableIps(Network network, String requestedIp) {\n         String[] cidr = network.getCidr().split(\"/\");\n         List<String> ips = _nicDao.listIpAddressInNetwork(network.getId());\n@@ -2159,7 +2191,6 @@ public Network updateGuestNetwork(long networkId, String name, String displayTex\n     }\n \n \n-\n     protected boolean canUpgrade(Network network, long oldNetworkOfferingId, long newNetworkOfferingId) {\n         NetworkOffering oldNetworkOffering = _networkOfferingDao.findByIdIncludingRemoved(oldNetworkOfferingId);\n         NetworkOffering newNetworkOffering = _networkOfferingDao.findById(newNetworkOfferingId);\n@@ -2225,6 +2256,14 @@ protected boolean canUpgrade(Network network, long oldNetworkOfferingId, long ne\n                 return false;\n             }\n         }\n+        \n+        //can't update from internal LB to public LB\n+        if (areServicesSupportedByNetworkOffering(oldNetworkOfferingId, Service.Lb) && areServicesSupportedByNetworkOffering(newNetworkOfferingId, Service.Lb)) {\n+            if (oldNetworkOffering.getPublicLb() != newNetworkOffering.getPublicLb() || oldNetworkOffering.getInternalLb() != newNetworkOffering.getInternalLb()) {\n+                throw new InvalidParameterValueException(\"Original and new offerings support different types of LB - Internal vs Public,\" +\n+                \t\t\" can't upgrade\");\n+            }\n+        }\n \n         return canIpsUseOffering(publicIps, newNetworkOfferingId);\n     }\n@@ -2345,7 +2384,10 @@ public PhysicalNetwork createPhysicalNetwork(Long zoneId, String vnetRange, Stri\n \n             // add baremetal as the defualt network service provider\n             /* addDefaultBaremetalProvidersToPhysicalNetwork(pNetwork.getId()); */\n-\n+            \n+            //Add Internal Load Balancer element as a default network service provider\n+            addDefaultInternalLbProviderToPhysicalNetwork(pNetwork.getId());\n+            \n             txn.commit();\n             return pNetwork;\n         } catch (Exception ex) {\n@@ -3564,6 +3606,22 @@ protected PhysicalNetworkServiceProvider addDefaultVpcVirtualRouterToPhysicalNet\n \n         return nsp;\n     }\n+    \n+    \n+    protected PhysicalNetworkServiceProvider addDefaultInternalLbProviderToPhysicalNetwork(long physicalNetworkId) {\n+\n+        PhysicalNetworkServiceProvider nsp = addProviderToPhysicalNetwork(physicalNetworkId, \n+                Network.Provider.InternalLbVm.getName(), null, null);\n+ \n+        NetworkElement networkElement =  _networkModel.getElementImplementingProvider(Network.Provider.InternalLbVm.getName());\n+        if (networkElement == null) {\n+            throw new CloudRuntimeException(\"Unable to find the Network Element implementing the \" + Network.Provider.InternalLbVm.getName() + \" Provider\");\n+        }\n+        \n+        _internalLbElementSvc.addInternalLoadBalancerElement(nsp.getId());\n+\n+        return nsp;\n+    }\n \n     protected PhysicalNetworkServiceProvider addDefaultSecurityGroupProviderToPhysicalNetwork(long physicalNetworkId) {\n \n@@ -3572,6 +3630,8 @@ protected PhysicalNetworkServiceProvider addDefaultSecurityGroupProviderToPhysic\n \n         return nsp;\n     }\n+    \n+    \n \n     private PhysicalNetworkServiceProvider addDefaultBaremetalProvidersToPhysicalNetwork(long physicalNetworkId) {\n         PhysicalNetworkVO pvo = _physicalNetworkDao.findById(physicalNetworkId);",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/NetworkServiceImpl.java",
                "sha": "8815558256988edf89b0745a4386f239e86b56b7",
                "status": "modified"
            },
            {
                "additions": 45,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/element/VirtualRouterElement.java",
                "changes": 56,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/element/VirtualRouterElement.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 11,
                "filename": "server/src/com/cloud/network/element/VirtualRouterElement.java",
                "patch": "@@ -25,7 +25,6 @@\n import javax.ejb.Local;\n import javax.inject.Inject;\n \n-import com.cloud.utils.PropertiesUtil;\n import org.apache.cloudstack.api.command.admin.router.ConfigureVirtualRouterElementCmd;\n import org.apache.cloudstack.api.command.admin.router.CreateVirtualRouterElementCmd;\n import org.apache.cloudstack.api.command.admin.router.ListVirtualRouterElementsCmd;\n@@ -66,6 +65,7 @@\n import com.cloud.network.rules.FirewallRule;\n import com.cloud.network.rules.LbStickinessMethod;\n import com.cloud.network.rules.LbStickinessMethod.StickinessMethodType;\n+import com.cloud.network.rules.LoadBalancerContainer;\n import com.cloud.network.rules.PortForwardingRule;\n import com.cloud.network.rules.RulesManager;\n import com.cloud.network.rules.StaticNat;\n@@ -242,7 +242,7 @@ public boolean applyFWRules(Network config, List<? extends FirewallRule> rules)\n      * number like 12 2) time or tablesize like 12h, 34m, 45k, 54m , here\n      * last character is non-digit but from known characters .\n      */\n-    private boolean containsOnlyNumbers(String str, String endChar) {\n+    private static boolean containsOnlyNumbers(String str, String endChar) {\n         if (str == null)\n             return false;\n \n@@ -271,7 +271,7 @@ private boolean containsOnlyNumbers(String str, String endChar) {\n         return true;\n     }\n \n-    private boolean validateHAProxyLBRule(LoadBalancingRule rule) {\n+    public static boolean validateHAProxyLBRule(LoadBalancingRule rule) {\n         String timeEndChar = \"dhms\";\n \n         for (LbStickinessPolicy stickinessPolicy : rule.getStickinessPolicies()) {\n@@ -338,7 +338,9 @@ private boolean validateHAProxyLBRule(LoadBalancingRule rule) {\n \n     @Override\n     public boolean validateLBRule(Network network, LoadBalancingRule rule) {\n-        if (canHandle(network, Service.Lb)) {\n+        List<LoadBalancingRule> rules = new ArrayList<LoadBalancingRule>();\n+        rules.add(rule);\n+        if (canHandle(network, Service.Lb) && canHandleLbRules(rules)) {\n             List<DomainRouterVO> routers = _routerDao.listByNetworkAndRole(network.getId(), Role.VIRTUAL_ROUTER);\n             if (routers == null || routers.isEmpty()) {\n                 return true;\n@@ -351,15 +353,19 @@ public boolean validateLBRule(Network network, LoadBalancingRule rule) {\n     @Override\n     public boolean applyLBRules(Network network, List<LoadBalancingRule> rules) throws ResourceUnavailableException {\n         if (canHandle(network, Service.Lb)) {\n+            if (!canHandleLbRules(rules)) {\n+                return false;\n+            }\n+            \n             List<DomainRouterVO> routers = _routerDao.listByNetworkAndRole(network.getId(), Role.VIRTUAL_ROUTER);\n             if (routers == null || routers.isEmpty()) {\n                 s_logger.debug(\"Virtual router elemnt doesn't need to apply firewall rules on the backend; virtual \" +\n                 \t\t\"router doesn't exist in the network \" + network.getId());\n                 return true;\n             }\n \n-            if (!_routerMgr.applyFirewallRules(network, rules, routers)) {\n-                throw new CloudRuntimeException(\"Failed to apply firewall rules in network \" + network.getId());\n+            if (!_routerMgr.applyLoadBalancingRules(network, rules, routers)) {\n+                throw new CloudRuntimeException(\"Failed to apply load balancing rules in network \" + network.getId());\n             } else {\n                 return true;\n             }\n@@ -452,7 +458,7 @@ public Provider getProvider() {\n         return capabilities;\n     }\n \n-    private static String getHAProxyStickinessCapability() {\n+    public static String getHAProxyStickinessCapability() {\n         LbStickinessMethod method;\n         List<LbStickinessMethod> methodList = new ArrayList<LbStickinessMethod>(1);\n \n@@ -557,8 +563,8 @@ private static String getHAProxyStickinessCapability() {\n         lbCapabilities.put(Capability.SupportedLBAlgorithms, \"roundrobin,leastconn,source\");\n         lbCapabilities.put(Capability.SupportedLBIsolation, \"dedicated\");\n         lbCapabilities.put(Capability.SupportedProtocols, \"tcp, udp\");\n-\n         lbCapabilities.put(Capability.SupportedStickinessMethods, getHAProxyStickinessCapability());\n+        lbCapabilities.put(Capability.LbSchemes, LoadBalancerContainer.Scheme.Public.toString());\n \n         capabilities.put(Service.Lb, lbCapabilities);\n \n@@ -715,8 +721,8 @@ public boolean saveUserData(Network network, NicProfile nic, VirtualMachineProfi\n     @Override\n     public VirtualRouterProvider configure(ConfigureVirtualRouterElementCmd cmd) {\n         VirtualRouterProviderVO element = _vrProviderDao.findById(cmd.getId());\n-        if (element == null) {\n-            s_logger.debug(\"Can't find element with network service provider id \" + cmd.getId());\n+        if (element == null || !(element.getType() == VirtualRouterProviderType.VirtualRouter || element.getType() == VirtualRouterProviderType.VPCVirtualRouter)) {\n+            s_logger.debug(\"Can't find Virtual Router element with network service provider id \" + cmd.getId());\n             return null;\n         }\n \n@@ -728,6 +734,10 @@ public VirtualRouterProvider configure(ConfigureVirtualRouterElementCmd cmd) {\n \n     @Override\n     public VirtualRouterProvider addElement(Long nspId, VirtualRouterProviderType providerType) {\n+        if (!(providerType == VirtualRouterProviderType.VirtualRouter || providerType == VirtualRouterProviderType.VPCVirtualRouter)) {\n+            throw new InvalidParameterValueException(\"Element \" + this.getName() + \" supports only providerTypes: \" + \n+        VirtualRouterProviderType.VirtualRouter.toString() + \" and \" + VirtualRouterProviderType.VPCVirtualRouter);\n+        }\n         VirtualRouterProviderVO element = _vrProviderDao.findByNspIdAndType(nspId, providerType);\n         if (element != null) {\n             s_logger.debug(\"There is already a virtual router element with service provider id \" + nspId);\n@@ -801,7 +811,11 @@ public Long getIdByNspId(Long nspId) {\n \n     @Override\n     public VirtualRouterProvider getCreatedElement(long id) {\n-        return _vrProviderDao.findById(id);\n+        VirtualRouterProvider provider = _vrProviderDao.findById(id);\n+        if (!(provider.getType() == VirtualRouterProviderType.VirtualRouter || provider.getType() == VirtualRouterProviderType.VPCVirtualRouter)) {\n+            throw new InvalidParameterValueException(\"Unable to find provider by id\");\n+        }\n+        return provider;\n     }\n \n     @Override\n@@ -911,6 +925,10 @@ public boolean addPasswordAndUserdata(Network network, NicProfile nic, VirtualMa\n         if (enabled != null) {\n             sc.addAnd(sc.getEntity().isEnabled(), Op.EQ, enabled);\n         }\n+        \n+        //return only VR and VPC VR\n+        sc.addAnd(sc.getEntity().getType(), Op.IN, VirtualRouterProvider.VirtualRouterProviderType.VPCVirtualRouter, VirtualRouterProvider.VirtualRouterProviderType.VirtualRouter);\n+        \n         return sc.list();\n     }\n \n@@ -946,4 +964,20 @@ protected VirtualRouterProviderType getVirtualRouterProvider() {\n \t\t// TODO Auto-generated method stub\n \t\treturn null;\n \t}\n+\t\n+\tprivate boolean canHandleLbRules(List<LoadBalancingRule> rules) {\n+\t    Map<Capability, String> lbCaps = this.getCapabilities().get(Service.Lb);\n+\t    if (!lbCaps.isEmpty()) {\n+\t        String schemeCaps = lbCaps.get(Capability.LbSchemes);\n+\t        if (schemeCaps != null) {\n+\t            for (LoadBalancingRule rule : rules) {\n+\t                if (!schemeCaps.contains(rule.getScheme().toString())) {\n+\t                    s_logger.debug(\"Scheme \" + rules.get(0).getScheme() + \" is not supported by the provider \" + this.getName());\n+\t                    return false;\n+\t                }\n+\t            }\n+\t        }\n+\t    }\n+\t    return true;\n+\t}\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/element/VirtualRouterElement.java",
                "sha": "28473cc7bc2bc43bbb0015d73d5fde409030e878",
                "status": "modified"
            },
            {
                "additions": 41,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/firewall/FirewallManagerImpl.java",
                "changes": 77,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/firewall/FirewallManagerImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 36,
                "filename": "server/src/com/cloud/network/firewall/FirewallManagerImpl.java",
                "patch": "@@ -27,17 +27,12 @@\n import javax.inject.Inject;\n import javax.naming.ConfigurationException;\n \n+import org.apache.cloudstack.api.command.user.firewall.ListEgressFirewallRulesCmd;\n import com.cloud.network.dao.*;\n import org.apache.cloudstack.api.command.user.firewall.ListFirewallRulesCmd;\n import org.apache.log4j.Logger;\n import org.springframework.stereotype.Component;\n \n-import com.mysql.jdbc.ConnectionPropertiesImpl;\n-import org.apache.log4j.Logger;\n-\n-import org.apache.cloudstack.api.BaseListCmd;\n-import org.apache.cloudstack.api.command.user.firewall.ListEgressFirewallRulesCmd;\n-import org.apache.cloudstack.api.command.user.firewall.ListFirewallRulesCmd;\n import com.cloud.configuration.Config;\n import com.cloud.configuration.dao.ConfigurationDao;\n import com.cloud.domain.dao.DomainDao;\n@@ -53,18 +48,22 @@\n import com.cloud.network.Network;\n import com.cloud.network.Network.Capability;\n import com.cloud.network.Network.Service;\n-import com.cloud.network.Networks.TrafficType;\n import com.cloud.network.NetworkManager;\n import com.cloud.network.NetworkModel;\n import com.cloud.network.NetworkRuleApplier;\n import com.cloud.network.element.FirewallServiceProvider;\n import com.cloud.network.element.NetworkACLServiceProvider;\n import com.cloud.network.element.PortForwardingServiceProvider;\n import com.cloud.network.element.StaticNatServiceProvider;\n-import com.cloud.network.rules.*;\n+import com.cloud.network.rules.FirewallManager;\n+import com.cloud.network.rules.FirewallRule;\n import com.cloud.network.rules.FirewallRule.FirewallRuleType;\n import com.cloud.network.rules.FirewallRule.Purpose;\n import com.cloud.network.rules.FirewallRule.State;\n+import com.cloud.network.rules.FirewallRuleVO;\n+import com.cloud.network.rules.PortForwardingRule;\n+import com.cloud.network.rules.PortForwardingRuleVO;\n+import com.cloud.network.rules.StaticNat;\n import com.cloud.network.rules.dao.PortForwardingRulesDao;\n import com.cloud.network.vpc.VpcManager;\n import com.cloud.projects.Project.ListProjectResourcesCriteria;\n@@ -83,8 +82,8 @@\n import com.cloud.utils.db.JoinBuilder;\n import com.cloud.utils.db.SearchBuilder;\n import com.cloud.utils.db.SearchCriteria;\n-import com.cloud.utils.db.*;\n import com.cloud.utils.db.SearchCriteria.Op;\n+import com.cloud.utils.db.Transaction;\n import com.cloud.utils.exception.CloudRuntimeException;\n import com.cloud.utils.net.NetUtils;\n import com.cloud.vm.UserVmVO;\n@@ -438,22 +437,28 @@ public void validateFirewallRule(Account caller, IPAddressVO ipAddress, Integer\n             return;\n         }\n \n-        if (ipAddress!=null){\n-        if (ipAddress.getAssociatedWithNetworkId() == null) {\n-                throw new InvalidParameterValueException(\"Unable to create firewall rule ; ip with specified id is not associated with any network\");\n-        } else {\n-            networkId = ipAddress.getAssociatedWithNetworkId();\n-        }\n-\n+        if (ipAddress != null){\n+            if (ipAddress.getAssociatedWithNetworkId() == null) {\n+                    throw new InvalidParameterValueException(\"Unable to create firewall rule ; ip with specified id is not associated with any network\");\n+            } else {\n+                networkId = ipAddress.getAssociatedWithNetworkId();\n+            }\n+    \n             // Validate ip address\n             _accountMgr.checkAccess(caller, null, true, ipAddress);\n-\n+        }\n+        \n+        //network id either has to be passed explicitly, or implicitly as a part of ipAddress object \n+        if (networkId == null) {\n+            throw new InvalidParameterValueException(\"Unable to retrieve network id to validate the rule\");\n+        }\n+    \n         Network network = _networkModel.getNetwork(networkId);\n-        assert network != null : \"Can't create port forwarding rule as network associated with public ip address is null?\";\n+        assert network != null : \"Can't create rule as network associated with public ip address is null?\";\n \n-            if (trafficType == FirewallRule.TrafficType.Egress) {\n-                _accountMgr.checkAccess(caller, null, true, network);\n-            }\n+        if (trafficType == FirewallRule.TrafficType.Egress) {\n+            _accountMgr.checkAccess(caller, null, true, network);\n+        }\n \n         // Verify that the network guru supports the protocol specified\n         Map<Network.Capability, String> caps = null;\n@@ -464,32 +469,32 @@ public void validateFirewallRule(Account caller, IPAddressVO ipAddress, Integer\n             }\n         } else if (purpose == Purpose.PortForwarding) {\n             caps = _networkModel.getNetworkServiceCapabilities(network.getId(), Service.PortForwarding);\n-            }else if (purpose == Purpose.Firewall){\n-                caps = _networkModel.getNetworkServiceCapabilities(network.getId(),Service.Firewall);\n+        } else if (purpose == Purpose.Firewall){\n+            caps = _networkModel.getNetworkServiceCapabilities(network.getId(),Service.Firewall);\n         }\n \n         if (caps != null) {\n-                String supportedProtocols;\n-                String supportedTrafficTypes = null;\n-                if (purpose == FirewallRule.Purpose.Firewall) {\n-                    supportedTrafficTypes = caps.get(Capability.SupportedTrafficDirection).toLowerCase();\n-                }\n+            String supportedProtocols;\n+            String supportedTrafficTypes = null;\n+            if (purpose == FirewallRule.Purpose.Firewall) {\n+                supportedTrafficTypes = caps.get(Capability.SupportedTrafficDirection).toLowerCase();\n+            }\n \n-                if (purpose == FirewallRule.Purpose.Firewall && trafficType == FirewallRule.TrafficType.Egress) {\n-                    supportedProtocols = caps.get(Capability.SupportedEgressProtocols).toLowerCase();\n-                } else {\n-                    supportedProtocols = caps.get(Capability.SupportedProtocols).toLowerCase();\n-                }\n+            if (purpose == FirewallRule.Purpose.Firewall && trafficType == FirewallRule.TrafficType.Egress) {\n+                supportedProtocols = caps.get(Capability.SupportedEgressProtocols).toLowerCase();\n+            } else {\n+                supportedProtocols = caps.get(Capability.SupportedProtocols).toLowerCase();\n+            }\n \n             if (!supportedProtocols.contains(proto.toLowerCase())) {\n                 throw new InvalidParameterValueException(\"Protocol \" + proto + \" is not supported in zone \" + network.getDataCenterId());\n             } else if (proto.equalsIgnoreCase(NetUtils.ICMP_PROTO) && purpose != Purpose.Firewall) {\n                 throw new InvalidParameterValueException(\"Protocol \" + proto + \" is currently supported only for rules with purpose \" + Purpose.Firewall);\n-                } else if (purpose == Purpose.Firewall && !supportedTrafficTypes.contains(trafficType.toString().toLowerCase())) {\n-                    throw new InvalidParameterValueException(\"Traffic Type \" + trafficType + \" is currently supported by Firewall in network \" + networkId);\n-                }\n+            } else if (purpose == Purpose.Firewall && !supportedTrafficTypes.contains(trafficType.toString().toLowerCase())) {\n+                throw new InvalidParameterValueException(\"Traffic Type \" + trafficType + \" is currently supported by Firewall in network \" + networkId);\n             }\n         }\n+        \n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/firewall/FirewallManagerImpl.java",
                "sha": "def4c1ed06f8037d72649432169754597595def8",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/guru/GuestNetworkGuru.java",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/guru/GuestNetworkGuru.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 42,
                "filename": "server/src/com/cloud/network/guru/GuestNetworkGuru.java",
                "patch": "@@ -223,48 +223,7 @@ public void deallocate(Network network, NicProfile nic, VirtualMachineProfile<?\n             nic.deallocate();\n         }\n     }\n-\n-    public Ip4Address acquireIp4Address(Network network, Ip4Address requestedIp, String reservationId) {\n-        List<String> ips = _nicDao.listIpAddressInNetwork(network.getId());\n-        String[] cidr = network.getCidr().split(\"/\");\n-        SortedSet<Long> usedIps = new TreeSet<Long>();\n-\n-        if (requestedIp != null && requestedIp.equals(network.getGateway())) {\n-            s_logger.warn(\"Requested ip address \" + requestedIp + \" is used as a gateway address in network \" + network);\n-            return null;\n-        }\n-\n-        for (String ip : ips) {\n-            usedIps.add(NetUtils.ip2Long(ip));\n-        }\n-\n-        if (network.getGateway() != null) {\n-            usedIps.add(NetUtils.ip2Long(network.getGateway()));\n-        }\n-\n-        if (requestedIp != null) {\n-            if (usedIps.contains(requestedIp.toLong())) {\n-                s_logger.warn(\"Requested ip address \" + requestedIp + \" is already in used in \" + network);\n-                return null;\n-            }\n-            //check that requested ip has the same cidr\n-            boolean isSameCidr = NetUtils.sameSubnetCIDR(requestedIp.ip4(), cidr[0], Integer.parseInt(cidr[1]));\n-            if (!isSameCidr) {\n-                s_logger.warn(\"Requested ip address \" + requestedIp + \" doesn't belong to the network \" + network + \" cidr\");\n-                return null;\n-            }\n-\n-            return requestedIp;\n-        }\n-\n-        long ip = NetUtils.getRandomIpFromCidr(cidr[0], Integer.parseInt(cidr[1]), usedIps);\n-        if (ip == -1) {\n-            s_logger.warn(\"Unable to allocate any more ip address in \" + network);\n-            return null;\n-        }\n-\n-        return new Ip4Address(ip);\n-    }\n+    \n \n     public int getVlanOffset(long physicalNetworkId, int vlanTag) {\n         PhysicalNetworkVO pNetwork = _physicalNetworkDao.findById(physicalNetworkId);",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/guru/GuestNetworkGuru.java",
                "sha": "32ce744979bbf7baabc739951f20deb67128f169",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/lb/LBHealthCheckManager.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/lb/LBHealthCheckManager.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 1,
                "filename": "server/src/com/cloud/network/lb/LBHealthCheckManager.java",
                "patch": "@@ -16,9 +16,11 @@\n // under the License.\n package com.cloud.network.lb;\n \n+import com.cloud.network.rules.LoadBalancerContainer.Scheme;\n+\n \n public interface LBHealthCheckManager {\n \n-    void updateLBHealthCheck();\n+    void updateLBHealthCheck(Scheme scheme);\n \n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/lb/LBHealthCheckManager.java",
                "sha": "a9969eb7ce1be13b18e89bc7ff21e727703460d3",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/lb/LBHealthCheckManagerImpl.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/lb/LBHealthCheckManagerImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 4,
                "filename": "server/src/com/cloud/network/lb/LBHealthCheckManagerImpl.java",
                "patch": "@@ -19,7 +19,6 @@\n import static java.lang.String.format;\n \n import java.util.Map;\n-\n import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n@@ -34,6 +33,7 @@\n import com.cloud.configuration.Config;\n import com.cloud.configuration.dao.ConfigurationDao;\n import com.cloud.exception.ResourceUnavailableException;\n+import com.cloud.network.rules.LoadBalancerContainer.Scheme;\n import com.cloud.utils.NumbersUtil;\n import com.cloud.utils.component.Manager;\n import com.cloud.utils.component.ManagerBase;\n@@ -90,17 +90,18 @@ public String getName() {\n         @Override\n         public void run() {\n             try {\n-                updateLBHealthCheck();\n+                updateLBHealthCheck(Scheme.Public);\n+                updateLBHealthCheck(Scheme.Internal);\n             } catch (Exception e) {\n                 s_logger.error(\"Exception in LB HealthCheck Update Checker\", e);\n             }\n         }\n     }\n \n     @Override\n-    public void updateLBHealthCheck() {\n+    public void updateLBHealthCheck(Scheme scheme) {\n         try {\n-            _lbService.updateLBHealthChecks();\n+            _lbService.updateLBHealthChecks(scheme);\n         } catch (ResourceUnavailableException e) {\n             s_logger.debug(\"Error while updating the LB HealtCheck \", e);\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/lb/LBHealthCheckManagerImpl.java",
                "sha": "62b738bb4980afae4af7b59b5d4702214a871e4f",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/lb/LoadBalancingRulesManager.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/lb/LoadBalancingRulesManager.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 9,
                "filename": "server/src/com/cloud/network/lb/LoadBalancingRulesManager.java",
                "patch": "@@ -16,23 +16,24 @@\n // under the License.\n package com.cloud.network.lb;\n \n+import java.util.List;\n+\n import com.cloud.exception.NetworkRuleConflictException;\n import com.cloud.exception.ResourceUnavailableException;\n-import com.cloud.network.Network;\n import com.cloud.network.lb.LoadBalancingRule.LbDestination;\n import com.cloud.network.lb.LoadBalancingRule.LbHealthCheckPolicy;\n import com.cloud.network.lb.LoadBalancingRule.LbStickinessPolicy;\n-import com.cloud.network.rules.FirewallRule;\n import com.cloud.network.rules.LbStickinessMethod;\n import com.cloud.network.rules.LoadBalancer;\n+import com.cloud.network.rules.LoadBalancerContainer.Scheme;\n import com.cloud.user.Account;\n-import org.apache.cloudstack.api.command.user.loadbalancer.CreateLoadBalancerRuleCmd;\n-\n-import java.util.List;\n+import com.cloud.user.UserContext;\n \n public interface LoadBalancingRulesManager extends LoadBalancingRulesService {\n \n-    LoadBalancer createLoadBalancer(CreateLoadBalancerRuleCmd lb, boolean openFirewall) throws NetworkRuleConflictException;\n+    LoadBalancer createPublicLoadBalancer(String xId, String name, String description, \n+            int srcPort, int destPort, long sourceIpId, String protocol, String algorithm, boolean openFirewall, UserContext caller)\n+            throws NetworkRuleConflictException;\n \n     boolean removeAllLoadBalanacersForIp(long ipId, Account caller, long callerUserId);\n     boolean removeAllLoadBalanacersForNetwork(long networkId, Account caller, long callerUserId);\n@@ -47,9 +48,14 @@\n      * @return true if removal is successful\n      */\n     boolean removeVmFromLoadBalancers(long vmId);\n-    boolean applyRules(Network network, FirewallRule.Purpose purpose, List<? extends FirewallRule> rules) throws ResourceUnavailableException ;\n-    boolean applyLoadBalancersForNetwork(long networkId) throws ResourceUnavailableException;\n+    boolean applyLoadBalancersForNetwork(long networkId, Scheme scheme) throws ResourceUnavailableException;\n     String getLBCapability(long networkid, String capabilityName);\n     boolean configureLbAutoScaleVmGroup(long vmGroupid, String currentState) throws ResourceUnavailableException;\n-    boolean revokeLoadBalancersForNetwork(long networkId) throws ResourceUnavailableException;\n+    boolean revokeLoadBalancersForNetwork(long networkId, Scheme scheme) throws ResourceUnavailableException;\n+\n+    boolean validateLbRule(LoadBalancingRule lbRule);\n+\n+    void removeLBRule(LoadBalancer rule);\n+\n+    void isLbServiceSupportedInNetwork(long networkId, Scheme scheme);\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/lb/LoadBalancingRulesManager.java",
                "sha": "a23d96f8aeac4c17ca43a6419ca8529adcf6aa7b",
                "status": "modified"
            },
            {
                "additions": 286,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/lb/LoadBalancingRulesManagerImpl.java",
                "changes": 402,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/lb/LoadBalancingRulesManagerImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 116,
                "filename": "server/src/com/cloud/network/lb/LoadBalancingRulesManagerImpl.java",
                "patch": "@@ -16,6 +16,34 @@\n // under the License.\n package com.cloud.network.lb;\n \n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.ejb.Local;\n+import javax.inject.Inject;\n+\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.command.user.loadbalancer.CreateLBHealthCheckPolicyCmd;\n+import org.apache.cloudstack.api.command.user.loadbalancer.CreateLBStickinessPolicyCmd;\n+import org.apache.cloudstack.api.command.user.loadbalancer.ListLBHealthCheckPoliciesCmd;\n+import org.apache.cloudstack.api.command.user.loadbalancer.ListLBStickinessPoliciesCmd;\n+import org.apache.cloudstack.api.command.user.loadbalancer.ListLoadBalancerRuleInstancesCmd;\n+import org.apache.cloudstack.api.command.user.loadbalancer.ListLoadBalancerRulesCmd;\n+import org.apache.cloudstack.api.command.user.loadbalancer.UpdateLoadBalancerRuleCmd;\n+import org.apache.cloudstack.api.response.ServiceResponse;\n+import org.apache.cloudstack.lb.ApplicationLoadBalancerRuleVO;\n+import org.apache.cloudstack.lb.dao.ApplicationLoadBalancerRuleDao;\n+import org.apache.log4j.Logger;\n+import org.springframework.stereotype.Component;\n+\n import com.cloud.agent.api.to.LoadBalancerTO;\n import com.cloud.configuration.Config;\n import com.cloud.configuration.ConfigurationManager;\n@@ -30,21 +58,70 @@\n import com.cloud.event.UsageEventUtils;\n import com.cloud.event.dao.EventDao;\n import com.cloud.event.dao.UsageEventDao;\n-import com.cloud.exception.*;\n-import com.cloud.network.*;\n+import com.cloud.exception.InsufficientAddressCapacityException;\n+import com.cloud.exception.InvalidParameterValueException;\n+import com.cloud.exception.NetworkRuleConflictException;\n+import com.cloud.exception.PermissionDeniedException;\n+import com.cloud.exception.ResourceUnavailableException;\n+import com.cloud.network.ExternalLoadBalancerUsageManager;\n+import com.cloud.network.IpAddress;\n+import com.cloud.network.LBHealthCheckPolicyVO;\n+import com.cloud.network.Network;\n import com.cloud.network.Network.Capability;\n import com.cloud.network.Network.Provider;\n import com.cloud.network.Network.Service;\n-import com.cloud.network.as.*;\n+import com.cloud.network.NetworkManager;\n+import com.cloud.network.NetworkModel;\n+import com.cloud.network.addr.PublicIp;\n+import com.cloud.network.as.AutoScalePolicy;\n+import com.cloud.network.as.AutoScalePolicyConditionMapVO;\n+import com.cloud.network.as.AutoScaleVmGroup;\n+import com.cloud.network.as.AutoScaleVmGroupPolicyMapVO;\n+import com.cloud.network.as.AutoScaleVmGroupVO;\n+import com.cloud.network.as.AutoScaleVmProfile;\n import com.cloud.network.as.Condition;\n-import com.cloud.network.as.dao.*;\n-import com.cloud.network.dao.*;\n+import com.cloud.network.as.Counter;\n+import com.cloud.network.as.dao.AutoScalePolicyConditionMapDao;\n+import com.cloud.network.as.dao.AutoScalePolicyDao;\n+import com.cloud.network.as.dao.AutoScaleVmGroupDao;\n+import com.cloud.network.as.dao.AutoScaleVmGroupPolicyMapDao;\n+import com.cloud.network.as.dao.AutoScaleVmProfileDao;\n+import com.cloud.network.as.dao.ConditionDao;\n+import com.cloud.network.as.dao.CounterDao;\n+import com.cloud.network.dao.FirewallRulesCidrsDao;\n+import com.cloud.network.dao.FirewallRulesDao;\n+import com.cloud.network.dao.IPAddressDao;\n+import com.cloud.network.dao.IPAddressVO;\n+import com.cloud.network.dao.LBHealthCheckPolicyDao;\n+import com.cloud.network.dao.LBStickinessPolicyDao;\n+import com.cloud.network.dao.LBStickinessPolicyVO;\n+import com.cloud.network.dao.LoadBalancerDao;\n+import com.cloud.network.dao.LoadBalancerVMMapDao;\n+import com.cloud.network.dao.LoadBalancerVMMapVO;\n+import com.cloud.network.dao.LoadBalancerVO;\n+import com.cloud.network.dao.NetworkDao;\n+import com.cloud.network.dao.NetworkServiceMapDao;\n+import com.cloud.network.dao.NetworkVO;\n import com.cloud.network.element.LoadBalancingServiceProvider;\n-import com.cloud.network.lb.LoadBalancingRule.*;\n-import com.cloud.network.rules.*;\n+import com.cloud.network.lb.LoadBalancingRule.LbAutoScalePolicy;\n+import com.cloud.network.lb.LoadBalancingRule.LbAutoScaleVmGroup;\n+import com.cloud.network.lb.LoadBalancingRule.LbAutoScaleVmProfile;\n+import com.cloud.network.lb.LoadBalancingRule.LbCondition;\n+import com.cloud.network.lb.LoadBalancingRule.LbDestination;\n+import com.cloud.network.lb.LoadBalancingRule.LbHealthCheckPolicy;\n+import com.cloud.network.lb.LoadBalancingRule.LbStickinessPolicy;\n+import com.cloud.network.rules.FirewallManager;\n+import com.cloud.network.rules.FirewallRule;\n import com.cloud.network.rules.FirewallRule.FirewallRuleType;\n import com.cloud.network.rules.FirewallRule.Purpose;\n+import com.cloud.network.rules.FirewallRuleVO;\n+import com.cloud.network.rules.HealthCheckPolicy;\n+import com.cloud.network.rules.LbStickinessMethod;\n import com.cloud.network.rules.LbStickinessMethod.LbStickinessMethodParam;\n+import com.cloud.network.rules.LoadBalancer;\n+import com.cloud.network.rules.LoadBalancerContainer.Scheme;\n+import com.cloud.network.rules.RulesManager;\n+import com.cloud.network.rules.StickinessPolicy;\n import com.cloud.network.vpc.VpcManager;\n import com.cloud.offering.NetworkOffering;\n import com.cloud.projects.Project.ListProjectResourcesCriteria;\n@@ -53,15 +130,25 @@\n import com.cloud.storage.dao.VMTemplateDao;\n import com.cloud.tags.ResourceTagVO;\n import com.cloud.tags.dao.ResourceTagDao;\n-import com.cloud.user.*;\n+import com.cloud.user.Account;\n+import com.cloud.user.AccountManager;\n+import com.cloud.user.DomainService;\n+import com.cloud.user.User;\n+import com.cloud.user.UserContext;\n import com.cloud.user.dao.AccountDao;\n import com.cloud.user.dao.UserDao;\n import com.cloud.uservm.UserVm;\n import com.cloud.utils.Pair;\n import com.cloud.utils.Ternary;\n import com.cloud.utils.component.ManagerBase;\n-import com.cloud.utils.db.*;\n+import com.cloud.utils.db.DB;\n+import com.cloud.utils.db.Filter;\n+import com.cloud.utils.db.JoinBuilder;\n+import com.cloud.utils.db.SearchBuilder;\n+import com.cloud.utils.db.SearchCriteria;\n+import com.cloud.utils.db.Transaction;\n import com.cloud.utils.exception.CloudRuntimeException;\n+import com.cloud.utils.net.Ip;\n import com.cloud.utils.net.NetUtils;\n import com.cloud.vm.Nic;\n import com.cloud.vm.UserVmVO;\n@@ -70,21 +157,11 @@\n import com.cloud.vm.dao.UserVmDao;\n import com.google.gson.Gson;\n import com.google.gson.reflect.TypeToken;\n-import org.apache.cloudstack.api.ApiConstants;\n-import org.apache.cloudstack.api.command.user.loadbalancer.*;\n-import org.apache.cloudstack.api.response.ServiceResponse;\n-import org.apache.log4j.Logger;\n-import org.springframework.stereotype.Component;\n-\n-import javax.ejb.Local;\n-import javax.inject.Inject;\n-import java.security.InvalidParameterException;\n-import java.util.*;\n \n @Component\n @Local(value = { LoadBalancingRulesManager.class, LoadBalancingRulesService.class })\n public class LoadBalancingRulesManagerImpl<Type> extends ManagerBase implements LoadBalancingRulesManager,\n-        LoadBalancingRulesService, NetworkRuleApplier {\n+        LoadBalancingRulesService {\n     private static final Logger s_logger = Logger.getLogger(LoadBalancingRulesManagerImpl.class);\n \n     @Inject\n@@ -166,6 +243,7 @@\n     UserDao _userDao;\n     @Inject\n     List<LoadBalancingServiceProvider> _lbProviders;\n+    @Inject ApplicationLoadBalancerRuleDao _appLbRuleDao;\n \n     // Will return a string. For LB Stickiness this will be a json, for\n     // autoscale this will be \",\" separated values\n@@ -261,8 +339,9 @@ private boolean applyAutoScaleConfig(LoadBalancerVO lb, AutoScaleVmGroupVO vmGro\n          * Regular config like destinations need not be packed for applying\n          * autoscale config as of today.\n          */\n-\tList<LbStickinessPolicy> policyList = getStickinessPolicies(lb.getId());\n-        LoadBalancingRule rule = new LoadBalancingRule(lb, null, policyList, null);\n+        List<LbStickinessPolicy> policyList = getStickinessPolicies(lb.getId());\n+        Ip sourceIp = getSourceIp(lb);\n+        LoadBalancingRule rule = new LoadBalancingRule(lb, null, policyList, null, sourceIp);\n         rule.setAutoScaleVmGroup(lbAutoScaleVmGroup);\n \n         if (!isRollBackAllowedForProvider(lb)) {\n@@ -273,14 +352,25 @@ private boolean applyAutoScaleConfig(LoadBalancerVO lb, AutoScaleVmGroupVO vmGro\n \n         List<LoadBalancingRule> rules = Arrays.asList(rule);\n \n-        if (!_networkMgr.applyRules(rules, FirewallRule.Purpose.LoadBalancing, this, false)) {\n+        if (!applyLbRules(rules, false)) {\n             s_logger.debug(\"LB rules' autoscale config are not completely applied\");\n             return false;\n         }\n \n         return true;\n     }\n \n+    private Ip getSourceIp(LoadBalancer lb) {\n+        Ip sourceIp = null;\n+        if (lb.getScheme() == Scheme.Public) {\n+            sourceIp = _networkModel.getPublicIpAddress(lb.getSourceIpAddressId()).getAddress();\n+        } else if (lb.getScheme() == Scheme.Internal) {\n+            ApplicationLoadBalancerRuleVO appLbRule = _appLbRuleDao.findById(lb.getId());\n+            sourceIp = appLbRule.getSourceIp();\n+        }\n+        return sourceIp;\n+    }\n+\n     @Override\n     @DB\n     public boolean configureLbAutoScaleVmGroup(long vmGroupid, String currentState) throws ResourceUnavailableException {\n@@ -454,9 +544,10 @@ public StickinessPolicy createLBStickinessPolicy(CreateLBStickinessPolicyCmd cmd\n                 cmd.getStickinessMethodName(), cmd.getparamList(), cmd.getDescription());\n         List<LbStickinessPolicy> policyList = new ArrayList<LbStickinessPolicy>();\n         policyList.add(new LbStickinessPolicy(cmd.getStickinessMethodName(), lbpolicy.getParams()));\n+        Ip sourceIp = getSourceIp(loadBalancer);\n         LoadBalancingRule lbRule = new LoadBalancingRule(loadBalancer, getExistingDestinations(lbpolicy.getId()),\n-                policyList, null);\n-        if (!validateRule(lbRule)) {\n+                policyList, null, sourceIp);\n+        if (!validateLbRule(lbRule)) {\n             throw new InvalidParameterValueException(\"Failed to create Stickiness policy: Validation Failed \"\n                     + cmd.getLbRuleId());\n         }\n@@ -539,7 +630,8 @@ public HealthCheckPolicy createLBHealthCheckPolicy(CreateLBHealthCheckPolicyCmd\n         return policy;\n     }\n \n-    private boolean validateRule(LoadBalancingRule lbRule) {\n+    @Override\n+    public boolean validateLbRule(LoadBalancingRule lbRule) {\n         Network network = _networkDao.findById(lbRule.getNetworkId());\n         Purpose purpose = lbRule.getPurpose();\n         if (purpose != Purpose.LoadBalancing) {\n@@ -748,7 +840,7 @@ public boolean deleteLBHealthCheckPolicy(long healthCheckPolicyId, boolean apply\n     // by CloudStack and update them in lbvmmap table\n     @DB\n     @Override\n-    public void updateLBHealthChecks() throws ResourceUnavailableException {\n+    public void updateLBHealthChecks(Scheme scheme) throws ResourceUnavailableException {\n         List<LoadBalancerVO> rules = _lbDao.listAll();\n         List<NetworkVO> networks = _networkDao.listAll();\n         List<LoadBalancerTO> stateRules = null;\n@@ -763,7 +855,7 @@ public void updateLBHealthChecks() throws ResourceUnavailableException {\n                  * \"HealthCheck Manager :: LB Provider in the Network has the Healthcheck policy capability :: \"\n                  * + provider.get(0).getName());\n                  */\n-                rules = _lbDao.listByNetworkId(network.getId());\n+                rules = _lbDao.listByNetworkIdAndScheme(network.getId(), scheme);\n                 if (rules != null && rules.size() > 0) {\n                     List<LoadBalancingRule> lbrules = new ArrayList<LoadBalancingRule>();\n                     for (LoadBalancerVO lb : rules) {\n@@ -772,7 +864,8 @@ public void updateLBHealthChecks() throws ResourceUnavailableException {\n                         // adding to lbrules list only if the LB rule\n                         // hashealtChecks\n                         if (hcPolicyList != null && hcPolicyList.size() > 0) {\n-                            LoadBalancingRule loadBalancing = new LoadBalancingRule(lb, dstList, null, hcPolicyList);\n+                            Ip sourceIp = getSourceIp(lb);\n+                            LoadBalancingRule loadBalancing = new LoadBalancingRule(lb, dstList, null, hcPolicyList, sourceIp);\n                             lbrules.add(loadBalancing);\n                         }\n                     }\n@@ -1168,31 +1261,21 @@ public boolean deleteLoadBalancerRule(long loadBalancerId, boolean apply, Accoun\n \n     @Override\n     @ActionEvent(eventType = EventTypes.EVENT_LOAD_BALANCER_CREATE, eventDescription = \"creating load balancer\")\n-    public LoadBalancer createLoadBalancerRule(CreateLoadBalancerRuleCmd lb, boolean openFirewall)\n+    public LoadBalancer createPublicLoadBalancerRule(String xId, String name, String description, \n+            int srcPortStart, int srcPortEnd, int defPortStart, int defPortEnd, Long ipAddrId, String protocol, String algorithm, long networkId, long lbOwnerId, boolean openFirewall)\n             throws NetworkRuleConflictException, InsufficientAddressCapacityException {\n-        Account lbOwner = _accountMgr.getAccount(lb.getEntityOwnerId());\n-\n-        int defPortStart = lb.getDefaultPortStart();\n-        int defPortEnd = lb.getDefaultPortEnd();\n-\n-        if (!NetUtils.isValidPort(defPortEnd)) {\n-            throw new InvalidParameterValueException(\"privatePort is an invalid value: \" + defPortEnd);\n-        }\n-        if (defPortStart > defPortEnd) {\n-            throw new InvalidParameterValueException(\"private port range is invalid: \" + defPortStart + \"-\"\n-                    + defPortEnd);\n-        }\n-        if ((lb.getAlgorithm() == null) || !NetUtils.isValidAlgorithm(lb.getAlgorithm())) {\n-            throw new InvalidParameterValueException(\"Invalid algorithm: \" + lb.getAlgorithm());\n+        Account lbOwner = _accountMgr.getAccount(lbOwnerId);\n+        \n+        if (srcPortStart != srcPortEnd) {\n+            throw new InvalidParameterValueException(\"Port ranges are not supported by the load balancer\");\n         }\n \n-        Long ipAddrId = lb.getSourceIpAddressId();\n         IPAddressVO ipVO = null;\n         if (ipAddrId != null) {\n             ipVO = _ipAddressDao.findById(ipAddrId);\n         }\n \n-        Network network = _networkModel.getNetwork(lb.getNetworkId());\n+        Network network = _networkModel.getNetwork(networkId);\n \n         // FIXME: breaking the dependency on ELB manager. This breaks\n         // functionality of ELB using virtual router\n@@ -1204,8 +1287,7 @@ public LoadBalancer createLoadBalancerRule(CreateLoadBalancerRuleCmd lb, boolean\n             IpAddress systemIp = null;\n             NetworkOffering off = _configMgr.getNetworkOffering(network.getNetworkOfferingId());\n             if (off.getElasticLb() && ipVO == null && network.getVpcId() == null) {\n-                systemIp = _networkMgr.assignSystemIp(lb.getNetworkId(), lbOwner, true, false);\n-                lb.setSourceIpAddressId(systemIp.getId());\n+                systemIp = _networkMgr.assignSystemIp(networkId, lbOwner, true, false);\n                 ipVO = _ipAddressDao.findById(systemIp.getId());\n             }\n \n@@ -1224,11 +1306,11 @@ public LoadBalancer createLoadBalancerRule(CreateLoadBalancerRuleCmd lb, boolean\n                             && ipVO.getVpcId().longValue() == network.getVpcId();\n                     if (assignToVpcNtwk) {\n                         // set networkId just for verification purposes\n-                        _networkModel.checkIpForService(ipVO, Service.Lb, lb.getNetworkId());\n+                        _networkModel.checkIpForService(ipVO, Service.Lb, networkId);\n \n-                        s_logger.debug(\"The ip is not associated with the VPC network id=\" + lb.getNetworkId()\n+                        s_logger.debug(\"The ip is not associated with the VPC network id=\" + networkId\n                                 + \" so assigning\");\n-                        ipVO = _networkMgr.associateIPToGuestNetwork(ipAddrId, lb.getNetworkId(), false);\n+                        ipVO = _networkMgr.associateIPToGuestNetwork(ipAddrId, networkId, false);\n                         performedIpAssoc = true;\n                     }\n                 } else {\n@@ -1240,10 +1322,7 @@ public LoadBalancer createLoadBalancerRule(CreateLoadBalancerRuleCmd lb, boolean\n                             + network);\n                 }\n \n-                if (lb.getSourceIpAddressId() == null) {\n-                    throw new CloudRuntimeException(\"No ip address is defined to assign the LB to\");\n-                }\n-                result = createLoadBalancer(lb, openFirewall);\n+                result = createPublicLoadBalancer(xId, name, description, srcPortStart, defPortStart, ipVO.getId(), protocol, algorithm, openFirewall, UserContext.current());\n             } catch (Exception ex) {\n                 s_logger.warn(\"Failed to create load balancer due to \", ex);\n                 if (ex instanceof NetworkRuleConflictException) {\n@@ -1258,27 +1337,31 @@ public LoadBalancer createLoadBalancerRule(CreateLoadBalancerRuleCmd lb, boolean\n                 // release ip address if ipassoc was perfored\n                 if (performedIpAssoc) {\n                     ipVO = _ipAddressDao.findById(ipVO.getId());\n-                    _vpcMgr.unassignIPFromVpcNetwork(ipVO.getId(), lb.getNetworkId());\n+                    _vpcMgr.unassignIPFromVpcNetwork(ipVO.getId(), networkId);\n                 }\n             }\n         }\n \n         if (result == null) {\n-            throw new CloudRuntimeException(\"Failed to create load balancer rule: \" + lb.getName());\n+            throw new CloudRuntimeException(\"Failed to create load balancer rule: \" + name);\n         }\n \n         return result;\n     }\n \n-    @Override\n     @DB\n-    public LoadBalancer createLoadBalancer(CreateLoadBalancerRuleCmd lb, boolean openFirewall)\n+    @Override\n+    public LoadBalancer createPublicLoadBalancer(String xId, String name, String description, \n+            int srcPort, int destPort, long sourceIpId, String protocol, String algorithm, boolean openFirewall, UserContext caller)\n             throws NetworkRuleConflictException {\n-        UserContext caller = UserContext.current();\n-        int srcPortStart = lb.getSourcePortStart();\n-        int defPortStart = lb.getDefaultPortStart();\n-        int srcPortEnd = lb.getSourcePortEnd();\n-        long sourceIpId = lb.getSourceIpAddressId();\n+        \n+        if (!NetUtils.isValidPort(destPort)) {\n+            throw new InvalidParameterValueException(\"privatePort is an invalid value: \" + destPort);\n+        }\n+       \n+        if ((algorithm == null) || !NetUtils.isValidAlgorithm(algorithm)) {\n+            throw new InvalidParameterValueException(\"Invalid algorithm: \" + algorithm);\n+        }\n \n         IPAddressVO ipAddr = _ipAddressDao.findById(sourceIpId);\n         // make sure ip address exists\n@@ -1293,6 +1376,9 @@ public LoadBalancer createLoadBalancer(CreateLoadBalancerRuleCmd lb, boolean ope\n             ex.addProxyObject(ipAddr, sourceIpId, \"sourceIpId\");\n             throw ex;\n         }\n+        \n+        _accountMgr.checkAccess(caller.getCaller(), null, true, ipAddr);\n+\n \n         Long networkId = ipAddr.getAssociatedWithNetworkId();\n         if (networkId == null) {\n@@ -1301,39 +1387,34 @@ public LoadBalancer createLoadBalancer(CreateLoadBalancerRuleCmd lb, boolean ope\n             ex.addProxyObject(ipAddr, sourceIpId, \"sourceIpId\");\n             throw ex;\n         }\n-\n-        _firewallMgr.validateFirewallRule(caller.getCaller(), ipAddr, srcPortStart, srcPortEnd, lb.getProtocol(),\n-                Purpose.LoadBalancing, FirewallRuleType.User, networkId, null);\n-        NetworkVO network = _networkDao.findById(networkId);\n-        _accountMgr.checkAccess(caller.getCaller(), null, true, ipAddr);\n-\n+        \n         // verify that lb service is supported by the network\n-        if (!_networkModel.areServicesSupportedInNetwork(network.getId(), Service.Lb)) {\n-            InvalidParameterValueException ex = new InvalidParameterValueException(\n-                    \"LB service is not supported in specified network id\");\n-            ex.addProxyObject(network, networkId, \"networkId\");\n-            throw ex;\n-        }\n+        isLbServiceSupportedInNetwork(networkId, Scheme.Public);\n \n-        Transaction txn = Transaction.currentTxn();\n-        txn.start();\n+        _firewallMgr.validateFirewallRule(caller.getCaller(), ipAddr, srcPort, srcPort, protocol,\n+                Purpose.LoadBalancing, FirewallRuleType.User, networkId, null);\n \n-        LoadBalancerVO newRule = new LoadBalancerVO(lb.getXid(), lb.getName(), lb.getDescription(),\n-                lb.getSourceIpAddressId(), lb.getSourcePortEnd(), lb.getDefaultPortStart(), lb.getAlgorithm(),\n-                network.getId(), ipAddr.getAllocatedToAccountId(), ipAddr.getAllocatedInDomainId());\n+        LoadBalancerVO newRule = new LoadBalancerVO(xId, name, description,\n+                sourceIpId, srcPort, srcPort, algorithm,\n+                networkId, ipAddr.getAllocatedToAccountId(), ipAddr.getAllocatedInDomainId());\n \n         // verify rule is supported by Lb provider of the network\n+        Ip sourceIp = getSourceIp(newRule);\n         LoadBalancingRule loadBalancing = new LoadBalancingRule(newRule, new ArrayList<LbDestination>(),\n-                new ArrayList<LbStickinessPolicy>(), new ArrayList<LbHealthCheckPolicy>());\n-        if (!validateRule(loadBalancing)) {\n+                new ArrayList<LbStickinessPolicy>(), new ArrayList<LbHealthCheckPolicy>(), sourceIp);\n+        if (!validateLbRule(loadBalancing)) {\n             throw new InvalidParameterValueException(\"LB service provider cannot support this rule\");\n         }\n \n+        Transaction txn = Transaction.currentTxn();\n+        txn.start();\n+        \n         newRule = _lbDao.persist(newRule);\n \n+        //create rule for all CIDRs\n         if (openFirewall) {\n-            _firewallMgr.createRuleForAllCidrs(sourceIpId, caller.getCaller(), lb.getSourcePortStart(),\n-                    lb.getSourcePortEnd(), lb.getProtocol(), null, null, newRule.getId(), networkId);\n+            _firewallMgr.createRuleForAllCidrs(sourceIpId, caller.getCaller(), srcPort,\n+                    srcPort, protocol, null, null, newRule.getId(), networkId);\n         }\n \n         boolean success = true;\n@@ -1344,7 +1425,7 @@ public LoadBalancer createLoadBalancer(CreateLoadBalancerRuleCmd lb, boolean ope\n                 throw new CloudRuntimeException(\"Unable to update the state to add for \" + newRule);\n             }\n             s_logger.debug(\"Load balancer \" + newRule.getId() + \" for Ip address id=\" + sourceIpId + \", public port \"\n-                    + srcPortStart + \", private port \" + defPortStart + \" is added successfully.\");\n+                    + srcPort + \", private port \" + destPort + \" is added successfully.\");\n             UserContext.current().setEventDetails(\"Load balancer Id: \" + newRule.getId());\n             UsageEventUtils.publishUsageEvent(EventTypes.EVENT_LOAD_BALANCER_CREATE, ipAddr.getAllocatedToAccountId(),\n                     ipAddr.getDataCenterId(), newRule.getId(), null, LoadBalancingRule.class.getName(),\n@@ -1380,14 +1461,17 @@ public boolean applyLoadBalancerConfig(long lbRuleId) throws ResourceUnavailable\n             lbs = Arrays.asList(lb);\n         } else {\n             // get all rules in transition state\n-            lbs = _lbDao.listInTransitionStateByNetworkId(lb.getNetworkId());\n+            lbs = _lbDao.listInTransitionStateByNetworkIdAndScheme(lb.getNetworkId(), lb.getScheme());\n         }\n         return applyLoadBalancerRules(lbs, true);\n     }\n \n     @Override\n-    public boolean revokeLoadBalancersForNetwork(long networkId) throws ResourceUnavailableException {\n-        List<LoadBalancerVO> lbs = _lbDao.listByNetworkId(networkId);\n+    public boolean revokeLoadBalancersForNetwork(long networkId, Scheme scheme) throws ResourceUnavailableException {\n+        List<LoadBalancerVO> lbs = _lbDao.listByNetworkIdAndScheme(networkId, scheme);\n+        if (s_logger.isDebugEnabled()) {\n+            s_logger.debug(\"Revoking \" + lbs.size() + \" \" + scheme + \" load balancing rules for network id=\" + networkId);\n+        }\n         if (lbs != null) {\n             for(LoadBalancerVO lb : lbs) { // called during restart, not persisting state in db\n                 lb.setState(FirewallRule.State.Revoke);\n@@ -1400,20 +1484,20 @@ public boolean revokeLoadBalancersForNetwork(long networkId) throws ResourceUnav\n     }\n \n     @Override\n-    public boolean applyLoadBalancersForNetwork(long networkId) throws ResourceUnavailableException {\n-        List<LoadBalancerVO> lbs = _lbDao.listByNetworkId(networkId);\n+    public boolean applyLoadBalancersForNetwork(long networkId, Scheme scheme) throws ResourceUnavailableException {\n+        List<LoadBalancerVO> lbs = _lbDao.listByNetworkIdAndScheme(networkId, scheme);\n         if (lbs != null) {\n+            s_logger.debug(\"Applying load balancer rules of scheme \" + scheme + \" in network id=\" + networkId);\n             return applyLoadBalancerRules(lbs, true);\n         } else {\n-            s_logger.info(\"Network id=\" + networkId + \" doesn't have load balancer rules, nothing to apply\");\n+            s_logger.info(\"Network id=\" + networkId + \" doesn't have load balancer rules of scheme \" + scheme + \", nothing to apply\");\n             return true;\n         }\n     }\n \n-    @Override\n-    public boolean applyRules(Network network, Purpose purpose, List<? extends FirewallRule> rules)\n+    \n+    protected boolean applyLbRules(Network network, List<LoadBalancingRule> rules)\n             throws ResourceUnavailableException {\n-        assert (purpose == Purpose.LoadBalancing) : \"LB Manager asked to handle non-LB rules\";\n         boolean handled = false;\n         for (LoadBalancingServiceProvider lbElement : _lbProviders) {\n             Provider provider = lbElement.getProvider();\n@@ -1422,7 +1506,7 @@ public boolean applyRules(Network network, Purpose purpose, List<? extends Firew\n             if (!isLbProvider) {\n                 continue;\n             }\n-            handled = lbElement.applyLBRules(network, (List<LoadBalancingRule>) rules);\n+            handled = lbElement.applyLBRules(network, rules);\n             if (handled)\n                 break;\n         }\n@@ -1432,7 +1516,8 @@ public boolean applyRules(Network network, Purpose purpose, List<? extends Firew\n     private LoadBalancingRule getLoadBalancerRuleToApply(LoadBalancerVO lb) {\n \n         List<LbStickinessPolicy> policyList = getStickinessPolicies(lb.getId());\n-        LoadBalancingRule loadBalancing = new LoadBalancingRule(lb, null, policyList, null);\n+        Ip sourceIp = getSourceIp(lb);\n+        LoadBalancingRule loadBalancing = new LoadBalancingRule(lb, null, policyList, null, sourceIp);\n \n         if (_autoScaleVmGroupDao.isAutoScaleLoadBalancer(lb.getId())) {\n             // Get the associated VmGroup\n@@ -1442,7 +1527,7 @@ private LoadBalancingRule getLoadBalancerRuleToApply(LoadBalancerVO lb) {\n         } else {\n             List<LbDestination> dstList = getExistingDestinations(lb.getId());\n             loadBalancing.setDestinations(dstList);\n-\t    List<LbHealthCheckPolicy> hcPolicyList = getHealthCheckPolicies(lb.getId());\n+            List<LbHealthCheckPolicy> hcPolicyList = getHealthCheckPolicies(lb.getId());\n             loadBalancing.setHealthCheckPolicies(hcPolicyList);\n         }\n \n@@ -1458,7 +1543,7 @@ protected boolean applyLoadBalancerRules(List<LoadBalancerVO> lbs, boolean updat\n             rules.add(getLoadBalancerRuleToApply(lb));\n         }\n \n-        if (!_networkMgr.applyRules(rules, FirewallRule.Purpose.LoadBalancing, this, false)) {\n+        if (!applyLbRules(rules, false)) {\n             s_logger.debug(\"LB rules are not completely applied\");\n             return false;\n         }\n@@ -1515,7 +1600,7 @@ protected boolean applyLoadBalancerRules(List<LoadBalancerVO> lbs, boolean updat\n                 }\n \n                 txn.commit();\n-                if (checkForReleaseElasticIp) {\n+                if (checkForReleaseElasticIp && lb.getSourceIpAddressId() != null) {\n                     boolean success = true;\n                     long count = _firewallDao.countRulesByIpId(lb.getSourceIpAddressId());\n                     if (count == 0) {\n@@ -1534,8 +1619,10 @@ protected boolean applyLoadBalancerRules(List<LoadBalancerVO> lbs, boolean updat\n                 }\n                 // if the rule is the last one for the ip address assigned to\n                 // VPC, unassign it from the network\n-                IpAddress ip = _ipAddressDao.findById(lb.getSourceIpAddressId());\n-                _vpcMgr.unassignIPFromVpcNetwork(ip.getId(), lb.getNetworkId());\n+                if (lb.getSourceIpAddressId() != null) {\n+                    IpAddress ip = _ipAddressDao.findById(lb.getSourceIpAddressId());\n+                    _vpcMgr.unassignIPFromVpcNetwork(ip.getId(), lb.getNetworkId());\n+                }\n             }\n         }\n \n@@ -1902,32 +1989,115 @@ public LoadBalancer updateLoadBalancerRule(UpdateLoadBalancerRuleCmd cmd) {\n                 count++;\n             }\n         }\n+        \n+        //list only Public load balancers using this command\n+        sc.setParameters(\"scheme\", Scheme.Public);\n \n         Pair<List<LoadBalancerVO>, Integer> result = _lbDao.searchAndCount(sc, searchFilter);\n         return new Pair<List<? extends LoadBalancer>, Integer>(result.first(), result.second());\n     }\n \n-    @Override\n-    public List<LoadBalancingRule> listByNetworkId(long networkId) {\n-        List<LoadBalancerVO> lbs = _lbDao.listByNetworkId(networkId);\n-        List<LoadBalancingRule> lbRules = new ArrayList<LoadBalancingRule>();\n-        for (LoadBalancerVO lb : lbs) {\n-            List<LbDestination> dstList = getExistingDestinations(lb.getId());\n-            List<LbStickinessPolicy> policyList = this.getStickinessPolicies(lb.getId());\n-            List<LbHealthCheckPolicy> hcPolicyList = this.getHealthCheckPolicies(lb.getId());\n-            LoadBalancingRule loadBalancing = new LoadBalancingRule(lb, dstList, policyList, hcPolicyList);\n-            lbRules.add(loadBalancing);\n-        }\n-        return lbRules;\n-    }\n \n     @Override\n     public LoadBalancerVO findById(long lbId) {\n         return _lbDao.findById(lbId);\n     }\n \n-    protected void removeLBRule(LoadBalancerVO rule) {\n+    @Override\n+    public void removeLBRule(LoadBalancer rule) {\n         // remove the rule\n         _lbDao.remove(rule.getId());\n     }\n+    \n+    \n+    public boolean applyLbRules(List<LoadBalancingRule> rules, boolean continueOnError) throws ResourceUnavailableException {\n+        if (rules == null || rules.size() == 0) {\n+            s_logger.debug(\"There are no Load Balancing Rules to forward to the network elements\");\n+            return true;\n+        }\n+\n+        boolean success = true;\n+        Network network = _networkModel.getNetwork(rules.get(0).getNetworkId());\n+        List<PublicIp> publicIps = new ArrayList<PublicIp>();\n+\n+        \n+        // get the list of public ip's owned by the network\n+        List<IPAddressVO> userIps = _ipAddressDao.listByAssociatedNetwork(network.getId(), null);\n+        if (userIps != null && !userIps.isEmpty()) {\n+            for (IPAddressVO userIp : userIps) {\n+                PublicIp publicIp = PublicIp.createFromAddrAndVlan(userIp, _vlanDao.findById(userIp.getVlanId()));\n+                publicIps.add(publicIp);\n+            }\n+        }\n+\n+        // rules can not programmed unless IP is associated with network\n+        // service provider, so run IP assoication for\n+        // the network so as to ensure IP is associated before applying\n+        // rules (in add state)\n+        _networkMgr.applyIpAssociations(network, false, continueOnError, publicIps);\n+        \n+\n+        try {\n+            applyLbRules(network, rules);\n+        } catch (ResourceUnavailableException e) {\n+            if (!continueOnError) {\n+                throw e;\n+            }\n+            s_logger.warn(\"Problems with applying load balancing rules but pushing on\", e);\n+            success = false;\n+        }\n+\n+        // if all the rules configured on public IP are revoked then\n+        // dis-associate IP with network service provider\n+        _networkMgr.applyIpAssociations(network, true, continueOnError, publicIps);\n+        \n+        return success;\n+    }\n+    \n+    @Override\n+    public Map<Ip, UserVm> getLbInstances(long lbId) {\n+        Map<Ip, UserVm> dstList = new HashMap<Ip, UserVm>();\n+        List<LoadBalancerVMMapVO> lbVmMaps = _lb2VmMapDao.listByLoadBalancerId(lbId);\n+        LoadBalancerVO lb = _lbDao.findById(lbId);\n+\n+        for (LoadBalancerVMMapVO lbVmMap : lbVmMaps) {\n+            UserVm vm = _vmDao.findById(lbVmMap.getInstanceId());\n+            Nic nic = _nicDao.findByInstanceIdAndNetworkIdIncludingRemoved(lb.getNetworkId(), vm.getId());\n+            Ip ip = new Ip(nic.getIp4Address());\n+            dstList.put(ip, vm);\n+        }\n+        return dstList;\n+    }\n+    \n+    @Override\n+    public void isLbServiceSupportedInNetwork(long networkId, Scheme scheme) {\n+        Network network = _networkDao.findById(networkId);\n+        \n+        //1) Check if the LB service is supported\n+        if (!_networkModel.areServicesSupportedInNetwork(network.getId(), Service.Lb)) {\n+            InvalidParameterValueException ex = new InvalidParameterValueException(\n+                    \"LB service is not supported in specified network id\");\n+            ex.addProxyObject(network, network.getId(), \"networkId\");\n+            throw ex;\n+        }\n+        \n+        //2) Check if the Scheme is supported\\\n+        NetworkOffering off = _configMgr.getNetworkOffering(network.getNetworkOfferingId());\n+        if (scheme == Scheme.Public) {\n+            if (!off.getPublicLb()) {\n+                throw new InvalidParameterValueException(\"Scheme \" + scheme + \" is not supported by the network offering \" + off);\n+            }\n+        } else {\n+            if (!off.getInternalLb()) {\n+                throw new InvalidParameterValueException(\"Scheme \" + scheme + \" is not supported by the network offering \" + off);    \n+            }\n+        }\n+        \n+        //3) Check if the provider supports the scheme\n+        LoadBalancingServiceProvider lbProvider = _networkMgr.getLoadBalancingProviderForNetwork(network, scheme);\n+        if (lbProvider == null) {\n+            throw new InvalidParameterValueException(\"Lb rule with scheme \" + scheme.toString() + \" is not supported by lb providers in network \" + network);\n+        }\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/lb/LoadBalancingRulesManagerImpl.java",
                "sha": "520dd7636674e65e783574cc9b45835b5b9ff6f0",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/router/VirtualNetworkApplianceManager.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/VirtualNetworkApplianceManager.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "server/src/com/cloud/network/router/VirtualNetworkApplianceManager.java",
                "patch": "@@ -28,6 +28,7 @@\n import com.cloud.network.RemoteAccessVpn;\n import com.cloud.network.VirtualNetworkApplianceService;\n import com.cloud.network.VpnUser;\n+import com.cloud.network.lb.LoadBalancingRule;\n import com.cloud.network.rules.FirewallRule;\n import com.cloud.network.rules.StaticNat;\n import com.cloud.user.Account;\n@@ -103,4 +104,7 @@ boolean applyDhcpEntry(Network config, NicProfile nic, VirtualMachineProfile<Use\n \t\n \tboolean applyUserData(Network config, NicProfile nic, VirtualMachineProfile<UserVm> vm, DeployDestination dest, \n \t        List<DomainRouterVO> routers) throws ResourceUnavailableException;\n+\n+    boolean applyLoadBalancingRules(Network network, List<? extends LoadBalancingRule> rules, List<? extends VirtualRouter> routers) throws ResourceUnavailableException;\n+\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/router/VirtualNetworkApplianceManager.java",
                "sha": "fcf650f900c7eafc867ea4df3b0eb49677f7e101",
                "status": "modified"
            },
            {
                "additions": 48,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "changes": 59,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 11,
                "filename": "server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "patch": "@@ -173,6 +173,7 @@\n import com.cloud.network.router.VirtualRouter.Role;\n import com.cloud.network.rules.FirewallRule;\n import com.cloud.network.rules.FirewallRule.Purpose;\n+import com.cloud.network.rules.LoadBalancerContainer.Scheme;\n import com.cloud.network.rules.PortForwardingRule;\n import com.cloud.network.rules.RulesManager;\n import com.cloud.network.rules.StaticNat;\n@@ -218,6 +219,7 @@\n import com.cloud.utils.db.SearchCriteria;\n import com.cloud.utils.db.Transaction;\n import com.cloud.utils.exception.CloudRuntimeException;\n+import com.cloud.utils.net.Ip;\n import com.cloud.utils.net.MacAddress;\n import com.cloud.utils.net.NetUtils;\n import com.cloud.vm.DomainRouterVO;\n@@ -1526,7 +1528,7 @@ private HypervisorType getClusterToStartDomainRouterForOvm(long podId) {\n                 for (int i = 0; i < count; i++) {\n                 List<Pair<NetworkVO, NicProfile>> networks = createRouterNetworks(owner, isRedundant, plan, guestNetwork,\n                         new Pair<Boolean, PublicIp>(publicNetwork, sourceNatIp));\n-                //don't start the router as we are holding the network lock that needs to be released at the end of router allocation\n+                    //don't start the router as we are holding the network lock that needs to be released at the end of router allocation\n                     DomainRouterVO router = deployRouter(owner, destination, plan, params, isRedundant, vrProvider, offeringId,\n                         null, networks, false, null);\n \n@@ -2410,15 +2412,16 @@ protected void finalizeNetworkRulesForNetwork(Commands cmds, DomainRouterVO rout\n                 }\n             }\n    \n-            List<LoadBalancerVO> lbs = _loadBalancerDao.listByNetworkId(guestNetworkId);\n+            List<LoadBalancerVO> lbs = _loadBalancerDao.listByNetworkIdAndScheme(guestNetworkId, Scheme.Public);\n             List<LoadBalancingRule> lbRules = new ArrayList<LoadBalancingRule>();\n             if (_networkModel.isProviderSupportServiceInNetwork(guestNetworkId, Service.Lb, provider)) {\n                 // Re-apply load balancing rules\n                 for (LoadBalancerVO lb : lbs) {\n                     List<LbDestination> dstList = _lbMgr.getExistingDestinations(lb.getId());\n                     List<LbStickinessPolicy> policyList = _lbMgr.getStickinessPolicies(lb.getId());\n                     List<LbHealthCheckPolicy> hcPolicyList = _lbMgr.getHealthCheckPolicies(lb.getId());\n-                    LoadBalancingRule loadBalancing = new LoadBalancingRule(lb, dstList, policyList, hcPolicyList);\n+                    Ip sourceIp = _networkModel.getPublicIpAddress(lb.getSourceIpAddressId()).getAddress();\n+                    LoadBalancingRule loadBalancing = new LoadBalancingRule(lb, dstList, policyList, hcPolicyList, sourceIp);\n                     lbRules.add(loadBalancing);\n                 }\n             }\n@@ -2509,7 +2512,7 @@ public boolean finalizeStart(VirtualMachineProfile<DomainRouterVO> profile, long\n             Network network = _networkModel.getNetwork(routerNic.getNetworkId());\n             if (network.getTrafficType() == TrafficType.Guest) {\n                 guestNetworks.add(network);\n-            } \n+            }\n         }\n         \n         answer = cmds.getAnswer(\"getDomRVersion\");\n@@ -3036,7 +3039,7 @@ private void createApplyLoadBalancingRulesCommands(List<LoadBalancingRule> rules\n             String algorithm = rule.getAlgorithm();\n             String uuid = rule.getUuid();\n \n-            String srcIp = _networkModel.getIp(rule.getSourceIpAddressId()).getAddress().addr();\n+            String srcIp = rule.getSourceIp().addr();\n             int srcPort = rule.getSourcePortStart();\n             List<LbDestination> destinations = rule.getDestinations();\n             List<LbStickinessPolicy> stickinessPolicies = rule.getStickinessPolicies();\n@@ -3051,7 +3054,7 @@ private void createApplyLoadBalancingRulesCommands(List<LoadBalancingRule> rules\n         }\n         \n         Network guestNetwork = _networkModel.getNetwork(guestNetworkId);\n-        Nic nic = _nicDao.findByInstanceIdAndNetworkId(guestNetwork.getId(), router.getId());\n+        Nic nic = _nicDao.findByNtwkIdAndInstanceId(guestNetwork.getId(), router.getId());\n         NicProfile nicProfile = new NicProfile(nic, guestNetwork, nic.getBroadcastUri(), nic.getIsolationUri(), \n                 _networkModel.getNetworkRate(guestNetwork.getId(), router.getId()), \n                 _networkModel.isSecurityGroupSupportedInNetwork(guestNetwork), \n@@ -3144,7 +3147,7 @@ private void createVmDataCommandForVMs(DomainRouterVO router, Commands cmds, lon\n             }\n \n             if (createVmData) {\n-                NicVO nic = _nicDao.findByInstanceIdAndNetworkId(guestNetworkId, vm.getId());\n+                NicVO nic = _nicDao.findByNtwkIdAndInstanceId(guestNetworkId, vm.getId());\n                 if (nic != null) {\n                     s_logger.debug(\"Creating user data entry for vm \" + vm + \" on domR \" + router);\n                     createVmDataCommand(router, vm, nic, null, cmds);\n@@ -3197,7 +3200,7 @@ private void createDhcpEntryCommandsForVMs(DomainRouterVO router, Commands cmds,\n                 createDhcp = false;\n             }\n             if (createDhcp) {\n-                NicVO nic = _nicDao.findByInstanceIdAndNetworkId(guestNetworkId, vm.getId());\n+                NicVO nic = _nicDao.findByNtwkIdAndInstanceId(guestNetworkId, vm.getId());\n                 if (nic != null) {\n                     s_logger.debug(\"Creating dhcp entry for vm \" + vm + \" on domR \" + router + \".\");\n                     createDhcpEntryCommand(router, vm, nic, cmds);\n@@ -3315,13 +3318,14 @@ public boolean applyFirewallRules(Network network, final List<? extends Firewall\n             public boolean execute(Network network, VirtualRouter router) throws ResourceUnavailableException {\n                 if (rules.get(0).getPurpose() == Purpose.LoadBalancing) {\n                     // for load balancer we have to resend all lb rules for the network\n-                    List<LoadBalancerVO> lbs = _loadBalancerDao.listByNetworkId(network.getId());\n+                    List<LoadBalancerVO> lbs = _loadBalancerDao.listByNetworkIdAndScheme(network.getId(), Scheme.Public);\n                     List<LoadBalancingRule> lbRules = new ArrayList<LoadBalancingRule>();\n                     for (LoadBalancerVO lb : lbs) {\n                         List<LbDestination> dstList = _lbMgr.getExistingDestinations(lb.getId());\n                         List<LbStickinessPolicy> policyList = _lbMgr.getStickinessPolicies(lb.getId());\n-                        List<LbHealthCheckPolicy> hcPolicyList = _lbMgr.getHealthCheckPolicies(lb.getId() );\n-                        LoadBalancingRule loadBalancing = new LoadBalancingRule(lb, dstList, policyList, hcPolicyList);\n+                        List<LbHealthCheckPolicy> hcPolicyList = _lbMgr.getHealthCheckPolicies(lb.getId());\n+                        Ip sourceIp = _networkModel.getPublicIpAddress(lb.getSourceIpAddressId()).getAddress();\n+                        LoadBalancingRule loadBalancing = new LoadBalancingRule(lb, dstList, policyList, hcPolicyList, sourceIp);\n                         lbRules.add(loadBalancing);\n                     }\n                     return sendLBRules(router, lbRules, network.getId());\n@@ -3338,6 +3342,32 @@ public boolean execute(Network network, VirtualRouter router) throws ResourceUna\n             }\n         });\n     }\n+    \n+    \n+    @Override\n+    public boolean applyLoadBalancingRules(Network network, final List<? extends LoadBalancingRule> rules, List<? extends VirtualRouter> routers) throws ResourceUnavailableException {\n+        if (rules == null || rules.isEmpty()) {\n+            s_logger.debug(\"No lb rules to be applied for network \" + network.getId());\n+            return true;\n+        }\n+        return applyRules(network, routers, \"loadbalancing rules\", false, null, false, new RuleApplier() {\n+            @Override\n+            public boolean execute(Network network, VirtualRouter router) throws ResourceUnavailableException {\n+                // for load balancer we have to resend all lb rules for the network\n+                List<LoadBalancerVO> lbs = _loadBalancerDao.listByNetworkIdAndScheme(network.getId(), Scheme.Public);\n+                List<LoadBalancingRule> lbRules = new ArrayList<LoadBalancingRule>();\n+                for (LoadBalancerVO lb : lbs) {\n+                    List<LbDestination> dstList = _lbMgr.getExistingDestinations(lb.getId());\n+                    List<LbStickinessPolicy> policyList = _lbMgr.getStickinessPolicies(lb.getId());\n+                    List<LbHealthCheckPolicy> hcPolicyList = _lbMgr.getHealthCheckPolicies(lb.getId());\n+                    Ip sourceIp = _networkModel.getPublicIpAddress(lb.getSourceIpAddressId()).getAddress();\n+                    LoadBalancingRule loadBalancing = new LoadBalancingRule(lb, dstList, policyList, hcPolicyList, sourceIp);\n+                    lbRules.add(loadBalancing);\n+                }\n+                return sendLBRules(router, lbRules, network.getId());  \n+            }\n+        });\n+    }\n \n     protected boolean sendLBRules(VirtualRouter router, List<LoadBalancingRule> rules, long guestNetworkId) throws ResourceUnavailableException {\n         Commands cmds = new Commands(OnError.Continue);\n@@ -3734,4 +3764,11 @@ public void prepareStop(VirtualMachineProfile<DomainRouterVO> profile){\n             }\n         }\n     }\n+\n+\n+\n+    @Override\n+    public VirtualRouter findRouter(long routerId) {\n+        return _routerDao.findById(routerId);\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "sha": "e3dd06ba47cbd86daddba6f01ae966f97314e087",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/router/VpcVirtualNetworkApplianceManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/VpcVirtualNetworkApplianceManagerImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 1,
                "filename": "server/src/com/cloud/network/router/VpcVirtualNetworkApplianceManagerImpl.java",
                "patch": "@@ -440,7 +440,7 @@ protected SetupGuestNetworkCommand createSetupGuestNetworkCommand(VirtualRouter\n             defaultDns2 = guestNic.getDns2();\n         }\n         \n-        Nic nic = _nicDao.findByInstanceIdAndNetworkId(network.getId(), router.getId());\n+        Nic nic = _nicDao.findByNtwkIdAndInstanceId(network.getId(), router.getId());\n         String networkDomain = network.getNetworkDomain();\n         String dhcpRange = getGuestDhcpRange(guestNic, network, _configMgr.getZone(network.getDataCenterId()));\n         ",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/router/VpcVirtualNetworkApplianceManagerImpl.java",
                "sha": "611100955e7ee6a0f23e8987b579e40722e06428",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/vpc/VpcManagerImpl.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/vpc/VpcManagerImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 5,
                "filename": "server/src/com/cloud/network/vpc/VpcManagerImpl.java",
                "patch": "@@ -184,7 +184,9 @@\n     private final ScheduledExecutorService _executor = Executors.newScheduledThreadPool(1, new NamedThreadFactory(\"VpcChecker\"));\n     private List<VpcProvider> vpcElements = null;\n     private final List<Service> nonSupportedServices = Arrays.asList(Service.SecurityGroup, Service.Firewall);\n-    private final List<Provider> supportedProviders = Arrays.asList(Provider.VPCVirtualRouter, Provider.NiciraNvp, Provider.Netscaler);\n+    private final List<Provider> supportedProviders = Arrays.asList(Provider.VPCVirtualRouter, Provider.NiciraNvp, Provider.InternalLbVm, Provider.Netscaler);\n+ \n+\n     int _cleanupInterval;\n     int _maxNetworks;\n     SearchBuilder<IPAddressVO> IpAddressSearch;\n@@ -206,6 +208,7 @@ public boolean configure(String name, Map<String, Object> params) throws Configu\n                 if (svc == Service.Lb) {\n                     Set<Provider> lbProviders = new HashSet<Provider>();\n                     lbProviders.add(Provider.VPCVirtualRouter);\n+                    lbProviders.add(Provider.InternalLbVm);\n                     svcProviderMap.put(svc, lbProviders);\n                 } else {\n                     svcProviderMap.put(svc, defaultProviders);\n@@ -1057,16 +1060,17 @@ public void validateNtwkOffForNtwkInVpc(Long networkId, long newNtwkOffId, Strin\n             }\n         }\n \n-        //4) Only one network in the VPC can support LB\n-        if (_ntwkModel.areServicesSupportedByNetworkOffering(guestNtwkOff.getId(), Service.Lb)) {\n+        //4) Only one network in the VPC can support public LB inside the VPC. Internal LB can be supported on multiple VPC tiers\n+        if (_ntwkModel.areServicesSupportedByNetworkOffering(guestNtwkOff.getId(), Service.Lb) && guestNtwkOff.getPublicLb()) {\n             List<? extends Network> networks = getVpcNetworks(vpc.getId());\n             for (Network network : networks) {\n                 if (networkId != null && network.getId() == networkId.longValue()) {\n                     //skip my own network\n                     continue;\n                 } else {\n-                    if (_ntwkModel.areServicesSupportedInNetwork(network.getId(), Service.Lb)) {\n-                        throw new InvalidParameterValueException(\"LB service is already supported \" +\n+                    NetworkOffering otherOff = _configMgr.getNetworkOffering(network.getNetworkOfferingId());\n+                    if (_ntwkModel.areServicesSupportedInNetwork(network.getId(), Service.Lb) && otherOff.getPublicLb()) {\n+                        throw new InvalidParameterValueException(\"Public LB service is already supported \" +\n                         \t\t\"by network \" + network + \" in VPC \" + vpc);\n                     }\n                 }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/network/vpc/VpcManagerImpl.java",
                "sha": "55656d8b4fb42509ef50bce881898abec701ba33",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/server/ConfigurationServerImpl.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/ConfigurationServerImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 7,
                "filename": "server/src/com/cloud/server/ConfigurationServerImpl.java",
                "patch": "@@ -1017,7 +1017,7 @@ protected void createDefaultNetworkOfferings() {\n                 \"Offering for Shared Security group enabled networks\",\n                 TrafficType.Guest,\n                 false, true, null, null, true, Availability.Optional,\n-                null, Network.GuestType.Shared, true, true, false);\n+                null, Network.GuestType.Shared, true, true, false, false, false);\n \n         defaultSharedSGNetworkOffering.setState(NetworkOffering.State.Enabled);\n         defaultSharedSGNetworkOffering = _networkOfferingDao.persistDefaultNetworkOffering(defaultSharedSGNetworkOffering);\n@@ -1034,7 +1034,7 @@ protected void createDefaultNetworkOfferings() {\n                 \"Offering for Shared networks\",\n                 TrafficType.Guest,\n                 false, true, null, null, true, Availability.Optional,\n-                null, Network.GuestType.Shared, true, true, false);\n+                null, Network.GuestType.Shared, true, true, false, false, false);\n \n         defaultSharedNetworkOffering.setState(NetworkOffering.State.Enabled);\n         defaultSharedNetworkOffering = _networkOfferingDao.persistDefaultNetworkOffering(defaultSharedNetworkOffering);\n@@ -1051,7 +1051,7 @@ protected void createDefaultNetworkOfferings() {\n                 \"Offering for Isolated networks with Source Nat service enabled\",\n                 TrafficType.Guest,\n                 false, false, null, null, true, Availability.Required,\n-                null, Network.GuestType.Isolated, true, false, false);\n+                null, Network.GuestType.Isolated, true, false, false, false, true);\n \n         defaultIsolatedSourceNatEnabledNetworkOffering.setState(NetworkOffering.State.Enabled);\n         defaultIsolatedSourceNatEnabledNetworkOffering = _networkOfferingDao.persistDefaultNetworkOffering(defaultIsolatedSourceNatEnabledNetworkOffering);\n@@ -1069,7 +1069,7 @@ protected void createDefaultNetworkOfferings() {\n                 \"Offering for Isolated networks with no Source Nat service\",\n                 TrafficType.Guest,\n                 false, true, null, null, true, Availability.Optional,\n-                null, Network.GuestType.Isolated, true, true, false);\n+                null, Network.GuestType.Isolated, true, true, false, false, false);\n \n         defaultIsolatedEnabledNetworkOffering.setState(NetworkOffering.State.Enabled);\n         defaultIsolatedEnabledNetworkOffering = _networkOfferingDao.persistDefaultNetworkOffering(defaultIsolatedEnabledNetworkOffering);\n@@ -1086,7 +1086,7 @@ protected void createDefaultNetworkOfferings() {\n                 \"Offering for Shared networks with Elastic IP and Elastic LB capabilities\",\n                 TrafficType.Guest,\n                 false, true, null, null, true, Availability.Optional,\n-                null, Network.GuestType.Shared, true, false, false, false, true, true, true, false, false, true);\n+                null, Network.GuestType.Shared, true, false, false, false, true, true, true, false, false, true, true, false);\n \n         defaultNetscalerNetworkOffering.setState(NetworkOffering.State.Enabled);\n         defaultNetscalerNetworkOffering = _networkOfferingDao.persistDefaultNetworkOffering(defaultNetscalerNetworkOffering);\n@@ -1103,7 +1103,7 @@ protected void createDefaultNetworkOfferings() {\n                 \"Offering for Isolated Vpc networks with Source Nat service enabled\",\n                 TrafficType.Guest,\n                 false, false, null, null, true, Availability.Optional,\n-                null, Network.GuestType.Isolated, false, false, false);\n+                null, Network.GuestType.Isolated, false, false, false, false, true);\n \n         defaultNetworkOfferingForVpcNetworks.setState(NetworkOffering.State.Enabled);\n         defaultNetworkOfferingForVpcNetworks = _networkOfferingDao.persistDefaultNetworkOffering(defaultNetworkOfferingForVpcNetworks);\n@@ -1133,7 +1133,7 @@ protected void createDefaultNetworkOfferings() {\n                 \"Offering for Isolated Vpc networks with Source Nat service enabled and LB service Disabled\",\n                 TrafficType.Guest,\n                 false, false, null, null, true, Availability.Optional,\n-                null, Network.GuestType.Isolated, false, false, false);\n+                null, Network.GuestType.Isolated, false, false, false, false, false);\n \n         defaultNetworkOfferingForVpcNetworksNoLB.setState(NetworkOffering.State.Enabled);\n         defaultNetworkOfferingForVpcNetworksNoLB = _networkOfferingDao.persistDefaultNetworkOffering(defaultNetworkOfferingForVpcNetworksNoLB);",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/server/ConfigurationServerImpl.java",
                "sha": "bc52e9a881c3e57fb1dbae1f77b52c2bf9f68ab9",
                "status": "modified"
            },
            {
                "additions": 455,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/server/ManagementServerImpl.java",
                "changes": 580,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/ManagementServerImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 125,
                "filename": "server/src/com/cloud/server/ManagementServerImpl.java",
                "patch": "@@ -34,7 +34,6 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.TimeZone;\n-import java.util.UUID;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n@@ -44,52 +43,371 @@\n import javax.inject.Inject;\n import javax.naming.ConfigurationException;\n \n-import com.cloud.configuration.*;\n-import com.cloud.storage.dao.*;\n+import org.apache.cloudstack.acl.ControlledEntity;\n import org.apache.cloudstack.acl.SecurityChecker.AccessType;\n-import org.apache.cloudstack.api.ApiConstants;\n-\n-import com.cloud.event.ActionEventUtils;\n-import org.apache.cloudstack.api.BaseUpdateTemplateOrIsoCmd;\n-import org.apache.cloudstack.api.command.admin.account.*;\n-import org.apache.cloudstack.api.command.admin.domain.*;\n-import org.apache.cloudstack.api.command.admin.host.*;\n-import org.apache.cloudstack.api.command.admin.network.*;\n-import org.apache.cloudstack.api.command.admin.offering.*;\n-import org.apache.cloudstack.api.command.admin.resource.*;\n-import org.apache.cloudstack.api.command.admin.router.*;\n-import org.apache.cloudstack.api.command.admin.storage.*;\n-import org.apache.cloudstack.api.command.admin.systemvm.*;\n-import org.apache.cloudstack.api.command.admin.usage.*;\n-import org.apache.cloudstack.api.command.admin.user.*;\n-import org.apache.cloudstack.api.command.admin.vlan.*;\n-import org.apache.cloudstack.api.command.admin.vpc.*;\n-import org.apache.cloudstack.api.command.user.autoscale.*;\n-import org.apache.cloudstack.api.command.user.firewall.*;\n-import org.apache.cloudstack.api.command.user.iso.*;\n-import org.apache.cloudstack.api.command.user.loadbalancer.*;\n-import org.apache.cloudstack.api.command.user.nat.*;\n-import org.apache.cloudstack.api.command.user.network.*;\n-import org.apache.cloudstack.api.command.user.project.*;\n-import org.apache.cloudstack.api.command.user.resource.*;\n-import org.apache.cloudstack.api.command.user.securitygroup.*;\n-import org.apache.cloudstack.api.command.user.snapshot.*;\n-import org.apache.cloudstack.api.command.user.template.*;\n-import org.apache.cloudstack.api.command.user.vm.*;\n-import org.apache.cloudstack.api.command.user.volume.*;\n-import org.apache.cloudstack.api.command.user.vpc.*;\n-import org.apache.cloudstack.api.command.user.vpn.*;\n-import org.apache.cloudstack.api.response.ExtractResponse;\n-import org.apache.commons.codec.binary.Base64;\n-import org.apache.log4j.Logger;\n import org.apache.cloudstack.affinity.AffinityGroupProcessor;\n import org.apache.cloudstack.affinity.dao.AffinityGroupVMMapDao;\n-\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.BaseUpdateTemplateOrIsoCmd;\n+import org.apache.cloudstack.api.command.admin.account.CreateAccountCmd;\n+import org.apache.cloudstack.api.command.admin.account.DeleteAccountCmd;\n+import org.apache.cloudstack.api.command.admin.account.DisableAccountCmd;\n+import org.apache.cloudstack.api.command.admin.account.EnableAccountCmd;\n+import org.apache.cloudstack.api.command.admin.account.LockAccountCmd;\n+import org.apache.cloudstack.api.command.admin.account.UpdateAccountCmd;\n+import org.apache.cloudstack.api.command.admin.autoscale.CreateCounterCmd;\n+import org.apache.cloudstack.api.command.admin.autoscale.DeleteCounterCmd;\n+import org.apache.cloudstack.api.command.admin.cluster.AddClusterCmd;\n+import org.apache.cloudstack.api.command.admin.cluster.DeleteClusterCmd;\n+import org.apache.cloudstack.api.command.admin.cluster.ListClustersCmd;\n+import org.apache.cloudstack.api.command.admin.cluster.UpdateClusterCmd;\n+import org.apache.cloudstack.api.command.admin.config.ListCfgsByCmd;\n+import org.apache.cloudstack.api.command.admin.config.ListHypervisorCapabilitiesCmd;\n+import org.apache.cloudstack.api.command.admin.config.UpdateCfgCmd;\n+import org.apache.cloudstack.api.command.admin.config.UpdateHypervisorCapabilitiesCmd;\n+import org.apache.cloudstack.api.command.admin.domain.CreateDomainCmd;\n+import org.apache.cloudstack.api.command.admin.domain.DeleteDomainCmd;\n+import org.apache.cloudstack.api.command.admin.domain.ListDomainChildrenCmd;\n+import org.apache.cloudstack.api.command.admin.domain.ListDomainsCmd;\n+import org.apache.cloudstack.api.command.admin.domain.UpdateDomainCmd;\n+import org.apache.cloudstack.api.command.admin.host.AddHostCmd;\n+import org.apache.cloudstack.api.command.admin.host.AddSecondaryStorageCmd;\n+import org.apache.cloudstack.api.command.admin.host.CancelMaintenanceCmd;\n+import org.apache.cloudstack.api.command.admin.host.DeleteHostCmd;\n+import org.apache.cloudstack.api.command.admin.host.FindHostsForMigrationCmd;\n+import org.apache.cloudstack.api.command.admin.host.ListHostsCmd;\n+import org.apache.cloudstack.api.command.admin.host.PrepareForMaintenanceCmd;\n+import org.apache.cloudstack.api.command.admin.host.ReconnectHostCmd;\n+import org.apache.cloudstack.api.command.admin.host.UpdateHostCmd;\n+import org.apache.cloudstack.api.command.admin.host.UpdateHostPasswordCmd;\n+import org.apache.cloudstack.api.command.admin.internallb.ConfigureInternalLoadBalancerElementCmd;\n+import org.apache.cloudstack.api.command.admin.internallb.CreateInternalLoadBalancerElementCmd;\n+import org.apache.cloudstack.api.command.admin.internallb.ListInternalLBVMsCmd;\n+import org.apache.cloudstack.api.command.admin.internallb.ListInternalLoadBalancerElementsCmd;\n+import org.apache.cloudstack.api.command.admin.internallb.StartInternalLBVMCmd;\n+import org.apache.cloudstack.api.command.admin.internallb.StopInternalLBVMCmd;\n+import org.apache.cloudstack.api.command.admin.ldap.LDAPConfigCmd;\n+import org.apache.cloudstack.api.command.admin.ldap.LDAPRemoveCmd;\n+import org.apache.cloudstack.api.command.admin.network.AddNetworkDeviceCmd;\n+import org.apache.cloudstack.api.command.admin.network.AddNetworkServiceProviderCmd;\n+import org.apache.cloudstack.api.command.admin.network.CreateNetworkOfferingCmd;\n+import org.apache.cloudstack.api.command.admin.network.CreatePhysicalNetworkCmd;\n+import org.apache.cloudstack.api.command.admin.network.CreateStorageNetworkIpRangeCmd;\n+import org.apache.cloudstack.api.command.admin.network.DedicateGuestVlanRangeCmd;\n+import org.apache.cloudstack.api.command.admin.network.DeleteNetworkDeviceCmd;\n+import org.apache.cloudstack.api.command.admin.network.DeleteNetworkOfferingCmd;\n+import org.apache.cloudstack.api.command.admin.network.DeleteNetworkServiceProviderCmd;\n+import org.apache.cloudstack.api.command.admin.network.DeletePhysicalNetworkCmd;\n+import org.apache.cloudstack.api.command.admin.network.DeleteStorageNetworkIpRangeCmd;\n+import org.apache.cloudstack.api.command.admin.network.ListDedicatedGuestVlanRangesCmd;\n+import org.apache.cloudstack.api.command.admin.network.ListNetworkDeviceCmd;\n+import org.apache.cloudstack.api.command.admin.network.ListNetworkIsolationMethodsCmd;\n+import org.apache.cloudstack.api.command.admin.network.ListNetworkServiceProvidersCmd;\n+import org.apache.cloudstack.api.command.admin.network.ListPhysicalNetworksCmd;\n+import org.apache.cloudstack.api.command.admin.network.ListStorageNetworkIpRangeCmd;\n+import org.apache.cloudstack.api.command.admin.network.ListSupportedNetworkServicesCmd;\n+import org.apache.cloudstack.api.command.admin.network.ReleaseDedicatedGuestVlanRangeCmd;\n+import org.apache.cloudstack.api.command.admin.network.UpdateNetworkOfferingCmd;\n+import org.apache.cloudstack.api.command.admin.network.UpdateNetworkServiceProviderCmd;\n+import org.apache.cloudstack.api.command.admin.network.UpdatePhysicalNetworkCmd;\n+import org.apache.cloudstack.api.command.admin.network.UpdateStorageNetworkIpRangeCmd;\n+import org.apache.cloudstack.api.command.admin.offering.CreateDiskOfferingCmd;\n+import org.apache.cloudstack.api.command.admin.offering.CreateServiceOfferingCmd;\n+import org.apache.cloudstack.api.command.admin.offering.DeleteDiskOfferingCmd;\n+import org.apache.cloudstack.api.command.admin.offering.DeleteServiceOfferingCmd;\n+import org.apache.cloudstack.api.command.admin.offering.UpdateDiskOfferingCmd;\n+import org.apache.cloudstack.api.command.admin.offering.UpdateServiceOfferingCmd;\n+import org.apache.cloudstack.api.command.admin.pod.CreatePodCmd;\n+import org.apache.cloudstack.api.command.admin.pod.DeletePodCmd;\n+import org.apache.cloudstack.api.command.admin.pod.ListPodsByCmd;\n+import org.apache.cloudstack.api.command.admin.pod.UpdatePodCmd;\n+import org.apache.cloudstack.api.command.admin.region.AddRegionCmd;\n+import org.apache.cloudstack.api.command.admin.region.RemoveRegionCmd;\n+import org.apache.cloudstack.api.command.admin.region.UpdateRegionCmd;\n+import org.apache.cloudstack.api.command.admin.resource.ArchiveAlertsCmd;\n+import org.apache.cloudstack.api.command.admin.resource.DeleteAlertsCmd;\n+import org.apache.cloudstack.api.command.admin.resource.ListAlertsCmd;\n+import org.apache.cloudstack.api.command.admin.resource.ListCapacityCmd;\n+import org.apache.cloudstack.api.command.admin.resource.UploadCustomCertificateCmd;\n+import org.apache.cloudstack.api.command.admin.router.ConfigureVirtualRouterElementCmd;\n+import org.apache.cloudstack.api.command.admin.router.CreateVirtualRouterElementCmd;\n+import org.apache.cloudstack.api.command.admin.router.DestroyRouterCmd;\n+import org.apache.cloudstack.api.command.admin.router.ListRoutersCmd;\n+import org.apache.cloudstack.api.command.admin.router.ListVirtualRouterElementsCmd;\n+import org.apache.cloudstack.api.command.admin.router.RebootRouterCmd;\n+import org.apache.cloudstack.api.command.admin.router.StartRouterCmd;\n+import org.apache.cloudstack.api.command.admin.router.StopRouterCmd;\n+import org.apache.cloudstack.api.command.admin.router.UpgradeRouterCmd;\n+import org.apache.cloudstack.api.command.admin.storage.AddS3Cmd;\n+import org.apache.cloudstack.api.command.admin.storage.CancelPrimaryStorageMaintenanceCmd;\n+import org.apache.cloudstack.api.command.admin.storage.CreateStoragePoolCmd;\n+import org.apache.cloudstack.api.command.admin.storage.DeletePoolCmd;\n+import org.apache.cloudstack.api.command.admin.storage.FindStoragePoolsForMigrationCmd;\n+import org.apache.cloudstack.api.command.admin.storage.ListS3sCmd;\n+import org.apache.cloudstack.api.command.admin.storage.ListStoragePoolsCmd;\n+import org.apache.cloudstack.api.command.admin.storage.ListStorageProvidersCmd;\n+import org.apache.cloudstack.api.command.admin.storage.PreparePrimaryStorageForMaintenanceCmd;\n+import org.apache.cloudstack.api.command.admin.storage.UpdateStoragePoolCmd;\n+import org.apache.cloudstack.api.command.admin.swift.AddSwiftCmd;\n+import org.apache.cloudstack.api.command.admin.swift.ListSwiftsCmd;\n+import org.apache.cloudstack.api.command.admin.systemvm.DestroySystemVmCmd;\n+import org.apache.cloudstack.api.command.admin.systemvm.ListSystemVMsCmd;\n+import org.apache.cloudstack.api.command.admin.systemvm.MigrateSystemVMCmd;\n+import org.apache.cloudstack.api.command.admin.systemvm.RebootSystemVmCmd;\n+import org.apache.cloudstack.api.command.admin.systemvm.StartSystemVMCmd;\n+import org.apache.cloudstack.api.command.admin.systemvm.StopSystemVmCmd;\n+import org.apache.cloudstack.api.command.admin.systemvm.UpgradeSystemVMCmd;\n+import org.apache.cloudstack.api.command.admin.template.PrepareTemplateCmd;\n+import org.apache.cloudstack.api.command.admin.usage.AddTrafficMonitorCmd;\n+import org.apache.cloudstack.api.command.admin.usage.AddTrafficTypeCmd;\n+import org.apache.cloudstack.api.command.admin.usage.DeleteTrafficMonitorCmd;\n+import org.apache.cloudstack.api.command.admin.usage.DeleteTrafficTypeCmd;\n+import org.apache.cloudstack.api.command.admin.usage.GenerateUsageRecordsCmd;\n+import org.apache.cloudstack.api.command.admin.usage.GetUsageRecordsCmd;\n+import org.apache.cloudstack.api.command.admin.usage.ListTrafficMonitorsCmd;\n+import org.apache.cloudstack.api.command.admin.usage.ListTrafficTypeImplementorsCmd;\n+import org.apache.cloudstack.api.command.admin.usage.ListTrafficTypesCmd;\n+import org.apache.cloudstack.api.command.admin.usage.ListUsageTypesCmd;\n+import org.apache.cloudstack.api.command.admin.usage.UpdateTrafficTypeCmd;\n+import org.apache.cloudstack.api.command.admin.user.CreateUserCmd;\n+import org.apache.cloudstack.api.command.admin.user.DeleteUserCmd;\n+import org.apache.cloudstack.api.command.admin.user.DisableUserCmd;\n+import org.apache.cloudstack.api.command.admin.user.EnableUserCmd;\n+import org.apache.cloudstack.api.command.admin.user.GetUserCmd;\n+import org.apache.cloudstack.api.command.admin.user.ListUsersCmd;\n+import org.apache.cloudstack.api.command.admin.user.LockUserCmd;\n+import org.apache.cloudstack.api.command.admin.user.RegisterCmd;\n+import org.apache.cloudstack.api.command.admin.user.UpdateUserCmd;\n+import org.apache.cloudstack.api.command.admin.vlan.CreateVlanIpRangeCmd;\n+import org.apache.cloudstack.api.command.admin.vlan.DedicatePublicIpRangeCmd;\n+import org.apache.cloudstack.api.command.admin.vlan.DeleteVlanIpRangeCmd;\n+import org.apache.cloudstack.api.command.admin.vlan.ListVlanIpRangesCmd;\n+import org.apache.cloudstack.api.command.admin.vlan.ReleasePublicIpRangeCmd;\n+import org.apache.cloudstack.api.command.admin.vm.AssignVMCmd;\n+import org.apache.cloudstack.api.command.admin.vm.MigrateVMCmd;\n+import org.apache.cloudstack.api.command.admin.vm.MigrateVirtualMachineWithVolumeCmd;\n+import org.apache.cloudstack.api.command.admin.vm.RecoverVMCmd;\n+import org.apache.cloudstack.api.command.admin.vpc.CreatePrivateGatewayCmd;\n+import org.apache.cloudstack.api.command.admin.vpc.CreateVPCOfferingCmd;\n+import org.apache.cloudstack.api.command.admin.vpc.DeletePrivateGatewayCmd;\n+import org.apache.cloudstack.api.command.admin.vpc.DeleteVPCOfferingCmd;\n+import org.apache.cloudstack.api.command.admin.vpc.UpdateVPCOfferingCmd;\n+import org.apache.cloudstack.api.command.admin.zone.CreateZoneCmd;\n+import org.apache.cloudstack.api.command.admin.zone.DeleteZoneCmd;\n+import org.apache.cloudstack.api.command.admin.zone.MarkDefaultZoneForAccountCmd;\n+import org.apache.cloudstack.api.command.admin.zone.UpdateZoneCmd;\n+import org.apache.cloudstack.api.command.user.account.AddAccountToProjectCmd;\n+import org.apache.cloudstack.api.command.user.account.DeleteAccountFromProjectCmd;\n+import org.apache.cloudstack.api.command.user.account.ListAccountsCmd;\n+import org.apache.cloudstack.api.command.user.account.ListProjectAccountsCmd;\n+import org.apache.cloudstack.api.command.user.address.AssociateIPAddrCmd;\n+import org.apache.cloudstack.api.command.user.address.DisassociateIPAddrCmd;\n+import org.apache.cloudstack.api.command.user.address.ListPublicIpAddressesCmd;\n import org.apache.cloudstack.api.command.user.affinitygroup.CreateAffinityGroupCmd;\n import org.apache.cloudstack.api.command.user.affinitygroup.DeleteAffinityGroupCmd;\n import org.apache.cloudstack.api.command.user.affinitygroup.ListAffinityGroupTypesCmd;\n import org.apache.cloudstack.api.command.user.affinitygroup.ListAffinityGroupsCmd;\n import org.apache.cloudstack.api.command.user.affinitygroup.UpdateVMAffinityGroupCmd;\n+import org.apache.cloudstack.api.command.user.autoscale.CreateAutoScalePolicyCmd;\n+import org.apache.cloudstack.api.command.user.autoscale.CreateAutoScaleVmGroupCmd;\n+import org.apache.cloudstack.api.command.user.autoscale.CreateAutoScaleVmProfileCmd;\n+import org.apache.cloudstack.api.command.user.autoscale.CreateConditionCmd;\n+import org.apache.cloudstack.api.command.user.autoscale.DeleteAutoScalePolicyCmd;\n+import org.apache.cloudstack.api.command.user.autoscale.DeleteAutoScaleVmGroupCmd;\n+import org.apache.cloudstack.api.command.user.autoscale.DeleteAutoScaleVmProfileCmd;\n+import org.apache.cloudstack.api.command.user.autoscale.DeleteConditionCmd;\n+import org.apache.cloudstack.api.command.user.autoscale.DisableAutoScaleVmGroupCmd;\n+import org.apache.cloudstack.api.command.user.autoscale.EnableAutoScaleVmGroupCmd;\n+import org.apache.cloudstack.api.command.user.autoscale.ListAutoScalePoliciesCmd;\n+import org.apache.cloudstack.api.command.user.autoscale.ListAutoScaleVmGroupsCmd;\n+import org.apache.cloudstack.api.command.user.autoscale.ListAutoScaleVmProfilesCmd;\n+import org.apache.cloudstack.api.command.user.autoscale.ListConditionsCmd;\n+import org.apache.cloudstack.api.command.user.autoscale.ListCountersCmd;\n+import org.apache.cloudstack.api.command.user.autoscale.UpdateAutoScalePolicyCmd;\n+import org.apache.cloudstack.api.command.user.autoscale.UpdateAutoScaleVmGroupCmd;\n+import org.apache.cloudstack.api.command.user.autoscale.UpdateAutoScaleVmProfileCmd;\n+import org.apache.cloudstack.api.command.user.config.ListCapabilitiesCmd;\n+import org.apache.cloudstack.api.command.user.event.ArchiveEventsCmd;\n+import org.apache.cloudstack.api.command.user.event.DeleteEventsCmd;\n+import org.apache.cloudstack.api.command.user.event.ListEventTypesCmd;\n+import org.apache.cloudstack.api.command.user.event.ListEventsCmd;\n+import org.apache.cloudstack.api.command.user.firewall.CreateEgressFirewallRuleCmd;\n+import org.apache.cloudstack.api.command.user.firewall.CreateFirewallRuleCmd;\n+import org.apache.cloudstack.api.command.user.firewall.CreatePortForwardingRuleCmd;\n+import org.apache.cloudstack.api.command.user.firewall.DeleteEgressFirewallRuleCmd;\n+import org.apache.cloudstack.api.command.user.firewall.DeleteFirewallRuleCmd;\n+import org.apache.cloudstack.api.command.user.firewall.DeletePortForwardingRuleCmd;\n+import org.apache.cloudstack.api.command.user.firewall.ListEgressFirewallRulesCmd;\n+import org.apache.cloudstack.api.command.user.firewall.ListFirewallRulesCmd;\n+import org.apache.cloudstack.api.command.user.firewall.ListPortForwardingRulesCmd;\n+import org.apache.cloudstack.api.command.user.firewall.UpdatePortForwardingRuleCmd;\n+import org.apache.cloudstack.api.command.user.guest.ListGuestOsCategoriesCmd;\n+import org.apache.cloudstack.api.command.user.guest.ListGuestOsCmd;\n+import org.apache.cloudstack.api.command.user.iso.AttachIsoCmd;\n+import org.apache.cloudstack.api.command.user.iso.CopyIsoCmd;\n+import org.apache.cloudstack.api.command.user.iso.DeleteIsoCmd;\n+import org.apache.cloudstack.api.command.user.iso.DetachIsoCmd;\n+import org.apache.cloudstack.api.command.user.iso.ExtractIsoCmd;\n+import org.apache.cloudstack.api.command.user.iso.ListIsoPermissionsCmd;\n+import org.apache.cloudstack.api.command.user.iso.ListIsosCmd;\n+import org.apache.cloudstack.api.command.user.iso.RegisterIsoCmd;\n+import org.apache.cloudstack.api.command.user.iso.UpdateIsoCmd;\n+import org.apache.cloudstack.api.command.user.iso.UpdateIsoPermissionsCmd;\n+import org.apache.cloudstack.api.command.user.job.ListAsyncJobsCmd;\n+import org.apache.cloudstack.api.command.user.job.QueryAsyncJobResultCmd;\n+import org.apache.cloudstack.api.command.user.loadbalancer.AssignToLoadBalancerRuleCmd;\n+import org.apache.cloudstack.api.command.user.loadbalancer.CreateApplicationLoadBalancerCmd;\n+import org.apache.cloudstack.api.command.user.loadbalancer.CreateLBHealthCheckPolicyCmd;\n+import org.apache.cloudstack.api.command.user.loadbalancer.CreateLBStickinessPolicyCmd;\n+import org.apache.cloudstack.api.command.user.loadbalancer.CreateLoadBalancerRuleCmd;\n+import org.apache.cloudstack.api.command.user.loadbalancer.DeleteApplicationLoadBalancerCmd;\n+import org.apache.cloudstack.api.command.user.loadbalancer.DeleteLBHealthCheckPolicyCmd;\n+import org.apache.cloudstack.api.command.user.loadbalancer.DeleteLBStickinessPolicyCmd;\n+import org.apache.cloudstack.api.command.user.loadbalancer.DeleteLoadBalancerRuleCmd;\n+import org.apache.cloudstack.api.command.user.loadbalancer.ListApplicationLoadBalancersCmd;\n+import org.apache.cloudstack.api.command.user.loadbalancer.ListLBHealthCheckPoliciesCmd;\n+import org.apache.cloudstack.api.command.user.loadbalancer.ListLBStickinessPoliciesCmd;\n+import org.apache.cloudstack.api.command.user.loadbalancer.ListLoadBalancerRuleInstancesCmd;\n+import org.apache.cloudstack.api.command.user.loadbalancer.ListLoadBalancerRulesCmd;\n+import org.apache.cloudstack.api.command.user.loadbalancer.RemoveFromLoadBalancerRuleCmd;\n+import org.apache.cloudstack.api.command.user.loadbalancer.UpdateLoadBalancerRuleCmd;\n+import org.apache.cloudstack.api.command.user.nat.CreateIpForwardingRuleCmd;\n+import org.apache.cloudstack.api.command.user.nat.DeleteIpForwardingRuleCmd;\n+import org.apache.cloudstack.api.command.user.nat.DisableStaticNatCmd;\n+import org.apache.cloudstack.api.command.user.nat.EnableStaticNatCmd;\n+import org.apache.cloudstack.api.command.user.nat.ListIpForwardingRulesCmd;\n+import org.apache.cloudstack.api.command.user.network.CreateNetworkACLCmd;\n+import org.apache.cloudstack.api.command.user.network.CreateNetworkCmd;\n+import org.apache.cloudstack.api.command.user.network.DeleteNetworkACLCmd;\n+import org.apache.cloudstack.api.command.user.network.DeleteNetworkCmd;\n+import org.apache.cloudstack.api.command.user.network.ListNetworkACLsCmd;\n+import org.apache.cloudstack.api.command.user.network.ListNetworkOfferingsCmd;\n+import org.apache.cloudstack.api.command.user.network.ListNetworksCmd;\n+import org.apache.cloudstack.api.command.user.network.RestartNetworkCmd;\n+import org.apache.cloudstack.api.command.user.network.UpdateNetworkCmd;\n+import org.apache.cloudstack.api.command.user.offering.ListDiskOfferingsCmd;\n+import org.apache.cloudstack.api.command.user.offering.ListServiceOfferingsCmd;\n+import org.apache.cloudstack.api.command.user.project.ActivateProjectCmd;\n+import org.apache.cloudstack.api.command.user.project.CreateProjectCmd;\n+import org.apache.cloudstack.api.command.user.project.DeleteProjectCmd;\n+import org.apache.cloudstack.api.command.user.project.DeleteProjectInvitationCmd;\n+import org.apache.cloudstack.api.command.user.project.ListProjectInvitationsCmd;\n+import org.apache.cloudstack.api.command.user.project.ListProjectsCmd;\n+import org.apache.cloudstack.api.command.user.project.SuspendProjectCmd;\n+import org.apache.cloudstack.api.command.user.project.UpdateProjectCmd;\n+import org.apache.cloudstack.api.command.user.project.UpdateProjectInvitationCmd;\n+import org.apache.cloudstack.api.command.user.region.ListRegionsCmd;\n+import org.apache.cloudstack.api.command.user.region.ha.gslb.AssignToGlobalLoadBalancerRuleCmd;\n+import org.apache.cloudstack.api.command.user.region.ha.gslb.CreateGlobalLoadBalancerRuleCmd;\n+import org.apache.cloudstack.api.command.user.region.ha.gslb.DeleteGlobalLoadBalancerRuleCmd;\n+import org.apache.cloudstack.api.command.user.region.ha.gslb.ListGlobalLoadBalancerRuleCmd;\n+import org.apache.cloudstack.api.command.user.region.ha.gslb.RemoveFromGlobalLoadBalancerRuleCmd;\n+import org.apache.cloudstack.api.command.user.resource.GetCloudIdentifierCmd;\n+import org.apache.cloudstack.api.command.user.resource.ListHypervisorsCmd;\n+import org.apache.cloudstack.api.command.user.resource.ListResourceLimitsCmd;\n+import org.apache.cloudstack.api.command.user.resource.UpdateResourceCountCmd;\n+import org.apache.cloudstack.api.command.user.resource.UpdateResourceLimitCmd;\n+import org.apache.cloudstack.api.command.user.securitygroup.AuthorizeSecurityGroupEgressCmd;\n+import org.apache.cloudstack.api.command.user.securitygroup.AuthorizeSecurityGroupIngressCmd;\n+import org.apache.cloudstack.api.command.user.securitygroup.CreateSecurityGroupCmd;\n+import org.apache.cloudstack.api.command.user.securitygroup.DeleteSecurityGroupCmd;\n+import org.apache.cloudstack.api.command.user.securitygroup.ListSecurityGroupsCmd;\n+import org.apache.cloudstack.api.command.user.securitygroup.RevokeSecurityGroupEgressCmd;\n+import org.apache.cloudstack.api.command.user.securitygroup.RevokeSecurityGroupIngressCmd;\n+import org.apache.cloudstack.api.command.user.snapshot.CreateSnapshotCmd;\n+import org.apache.cloudstack.api.command.user.snapshot.CreateSnapshotPolicyCmd;\n+import org.apache.cloudstack.api.command.user.snapshot.DeleteSnapshotCmd;\n+import org.apache.cloudstack.api.command.user.snapshot.DeleteSnapshotPoliciesCmd;\n+import org.apache.cloudstack.api.command.user.snapshot.ListSnapshotPoliciesCmd;\n+import org.apache.cloudstack.api.command.user.snapshot.ListSnapshotsCmd;\n+import org.apache.cloudstack.api.command.user.ssh.CreateSSHKeyPairCmd;\n+import org.apache.cloudstack.api.command.user.ssh.DeleteSSHKeyPairCmd;\n+import org.apache.cloudstack.api.command.user.ssh.ListSSHKeyPairsCmd;\n+import org.apache.cloudstack.api.command.user.ssh.RegisterSSHKeyPairCmd;\n+import org.apache.cloudstack.api.command.user.tag.CreateTagsCmd;\n+import org.apache.cloudstack.api.command.user.tag.DeleteTagsCmd;\n+import org.apache.cloudstack.api.command.user.tag.ListTagsCmd;\n+import org.apache.cloudstack.api.command.user.template.CopyTemplateCmd;\n+import org.apache.cloudstack.api.command.user.template.CreateTemplateCmd;\n+import org.apache.cloudstack.api.command.user.template.DeleteTemplateCmd;\n+import org.apache.cloudstack.api.command.user.template.ExtractTemplateCmd;\n+import org.apache.cloudstack.api.command.user.template.ListTemplatePermissionsCmd;\n+import org.apache.cloudstack.api.command.user.template.ListTemplatesCmd;\n+import org.apache.cloudstack.api.command.user.template.RegisterTemplateCmd;\n+import org.apache.cloudstack.api.command.user.template.UpdateTemplateCmd;\n+import org.apache.cloudstack.api.command.user.template.UpdateTemplatePermissionsCmd;\n+import org.apache.cloudstack.api.command.user.vm.AddIpToVmNicCmd;\n+import org.apache.cloudstack.api.command.user.vm.AddNicToVMCmd;\n+import org.apache.cloudstack.api.command.user.vm.DeployVMCmd;\n+import org.apache.cloudstack.api.command.user.vm.DestroyVMCmd;\n+import org.apache.cloudstack.api.command.user.vm.GetVMPasswordCmd;\n+import org.apache.cloudstack.api.command.user.vm.ListNicsCmd;\n+import org.apache.cloudstack.api.command.user.vm.ListVMsCmd;\n+import org.apache.cloudstack.api.command.user.vm.RebootVMCmd;\n+import org.apache.cloudstack.api.command.user.vm.RemoveIpFromVmNicCmd;\n+import org.apache.cloudstack.api.command.user.vm.RemoveNicFromVMCmd;\n+import org.apache.cloudstack.api.command.user.vm.ResetVMPasswordCmd;\n+import org.apache.cloudstack.api.command.user.vm.ResetVMSSHKeyCmd;\n+import org.apache.cloudstack.api.command.user.vm.RestoreVMCmd;\n+import org.apache.cloudstack.api.command.user.vm.ScaleVMCmd;\n+import org.apache.cloudstack.api.command.user.vm.StartVMCmd;\n+import org.apache.cloudstack.api.command.user.vm.StopVMCmd;\n+import org.apache.cloudstack.api.command.user.vm.UpdateDefaultNicForVMCmd;\n+import org.apache.cloudstack.api.command.user.vm.UpdateVMCmd;\n+import org.apache.cloudstack.api.command.user.vm.UpgradeVMCmd;\n+import org.apache.cloudstack.api.command.user.vmgroup.CreateVMGroupCmd;\n+import org.apache.cloudstack.api.command.user.vmgroup.DeleteVMGroupCmd;\n+import org.apache.cloudstack.api.command.user.vmgroup.ListVMGroupsCmd;\n+import org.apache.cloudstack.api.command.user.vmgroup.UpdateVMGroupCmd;\n+import org.apache.cloudstack.api.command.user.vmsnapshot.CreateVMSnapshotCmd;\n+import org.apache.cloudstack.api.command.user.vmsnapshot.DeleteVMSnapshotCmd;\n+import org.apache.cloudstack.api.command.user.vmsnapshot.ListVMSnapshotCmd;\n+import org.apache.cloudstack.api.command.user.vmsnapshot.RevertToVMSnapshotCmd;\n+import org.apache.cloudstack.api.command.user.volume.AttachVolumeCmd;\n+import org.apache.cloudstack.api.command.user.volume.CreateVolumeCmd;\n+import org.apache.cloudstack.api.command.user.volume.DeleteVolumeCmd;\n+import org.apache.cloudstack.api.command.user.volume.DetachVolumeCmd;\n+import org.apache.cloudstack.api.command.user.volume.ExtractVolumeCmd;\n+import org.apache.cloudstack.api.command.user.volume.ListVolumesCmd;\n+import org.apache.cloudstack.api.command.user.volume.MigrateVolumeCmd;\n+import org.apache.cloudstack.api.command.user.volume.ResizeVolumeCmd;\n+import org.apache.cloudstack.api.command.user.volume.UploadVolumeCmd;\n+import org.apache.cloudstack.api.command.user.vpc.CreateStaticRouteCmd;\n+import org.apache.cloudstack.api.command.user.vpc.CreateVPCCmd;\n+import org.apache.cloudstack.api.command.user.vpc.DeleteStaticRouteCmd;\n+import org.apache.cloudstack.api.command.user.vpc.DeleteVPCCmd;\n+import org.apache.cloudstack.api.command.user.vpc.ListPrivateGatewaysCmd;\n+import org.apache.cloudstack.api.command.user.vpc.ListStaticRoutesCmd;\n+import org.apache.cloudstack.api.command.user.vpc.ListVPCOfferingsCmd;\n+import org.apache.cloudstack.api.command.user.vpc.ListVPCsCmd;\n+import org.apache.cloudstack.api.command.user.vpc.RestartVPCCmd;\n+import org.apache.cloudstack.api.command.user.vpc.UpdateVPCCmd;\n+import org.apache.cloudstack.api.command.user.vpn.AddVpnUserCmd;\n+import org.apache.cloudstack.api.command.user.vpn.CreateRemoteAccessVpnCmd;\n+import org.apache.cloudstack.api.command.user.vpn.CreateVpnConnectionCmd;\n+import org.apache.cloudstack.api.command.user.vpn.CreateVpnCustomerGatewayCmd;\n+import org.apache.cloudstack.api.command.user.vpn.CreateVpnGatewayCmd;\n+import org.apache.cloudstack.api.command.user.vpn.DeleteRemoteAccessVpnCmd;\n+import org.apache.cloudstack.api.command.user.vpn.DeleteVpnConnectionCmd;\n+import org.apache.cloudstack.api.command.user.vpn.DeleteVpnCustomerGatewayCmd;\n+import org.apache.cloudstack.api.command.user.vpn.DeleteVpnGatewayCmd;\n+import org.apache.cloudstack.api.command.user.vpn.ListRemoteAccessVpnsCmd;\n+import org.apache.cloudstack.api.command.user.vpn.ListVpnConnectionsCmd;\n+import org.apache.cloudstack.api.command.user.vpn.ListVpnCustomerGatewaysCmd;\n+import org.apache.cloudstack.api.command.user.vpn.ListVpnGatewaysCmd;\n+import org.apache.cloudstack.api.command.user.vpn.ListVpnUsersCmd;\n+import org.apache.cloudstack.api.command.user.vpn.RemoveVpnUserCmd;\n+import org.apache.cloudstack.api.command.user.vpn.ResetVpnConnectionCmd;\n+import org.apache.cloudstack.api.command.user.vpn.UpdateVpnCustomerGatewayCmd;\n+import org.apache.cloudstack.api.command.user.zone.ListZonesByCmd;\n+import org.apache.cloudstack.api.response.ExtractResponse;\n+import org.apache.cloudstack.engine.subsystem.api.storage.DataStoreManager;\n+import org.apache.cloudstack.engine.subsystem.api.storage.StoragePoolAllocator;\n+import org.apache.cloudstack.storage.datastore.db.PrimaryDataStoreDao;\n+import org.apache.cloudstack.storage.datastore.db.StoragePoolVO;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.log4j.Logger;\n+\n import com.cloud.agent.AgentManager;\n import com.cloud.agent.api.GetVncPortAnswer;\n import com.cloud.agent.api.GetVncPortCommand;\n@@ -103,28 +421,53 @@\n import com.cloud.alert.AlertVO;\n import com.cloud.alert.dao.AlertDao;\n import com.cloud.api.ApiDBUtils;\n-import com.cloud.async.*;\n+import com.cloud.async.AsyncJobExecutor;\n+import com.cloud.async.AsyncJobManager;\n+import com.cloud.async.AsyncJobResult;\n+import com.cloud.async.AsyncJobVO;\n+import com.cloud.async.BaseAsyncJobExecutor;\n import com.cloud.capacity.Capacity;\n import com.cloud.capacity.CapacityVO;\n import com.cloud.capacity.dao.CapacityDao;\n import com.cloud.capacity.dao.CapacityDaoImpl.SummedCapacity;\n import com.cloud.cluster.ClusterManager;\n+import com.cloud.configuration.Config;\n+import com.cloud.configuration.Configuration;\n+import com.cloud.configuration.ConfigurationManager;\n+import com.cloud.configuration.ConfigurationVO;\n import com.cloud.configuration.dao.ConfigurationDao;\n import com.cloud.consoleproxy.ConsoleProxyManagementState;\n import com.cloud.consoleproxy.ConsoleProxyManager;\n-import com.cloud.dc.*;\n+import com.cloud.dc.AccountVlanMapVO;\n+import com.cloud.dc.ClusterVO;\n+import com.cloud.dc.DataCenterVO;\n+import com.cloud.dc.HostPodVO;\n+import com.cloud.dc.Pod;\n+import com.cloud.dc.PodVlanMapVO;\n+import com.cloud.dc.Vlan;\n import com.cloud.dc.Vlan.VlanType;\n-import com.cloud.dc.dao.*;\n+import com.cloud.dc.VlanVO;\n+import com.cloud.dc.dao.AccountVlanMapDao;\n+import com.cloud.dc.dao.ClusterDao;\n+import com.cloud.dc.dao.DataCenterDao;\n+import com.cloud.dc.dao.HostPodDao;\n+import com.cloud.dc.dao.PodVlanMapDao;\n+import com.cloud.dc.dao.VlanDao;\n import com.cloud.deploy.DataCenterDeployment;\n-import com.cloud.deploy.DeploymentPlanner;\n import com.cloud.deploy.DeploymentPlanner.ExcludeList;\n import com.cloud.domain.DomainVO;\n import com.cloud.domain.dao.DomainDao;\n import com.cloud.event.ActionEvent;\n+import com.cloud.event.ActionEventUtils;\n import com.cloud.event.EventTypes;\n import com.cloud.event.EventVO;\n import com.cloud.event.dao.EventDao;\n-import com.cloud.exception.*;\n+import com.cloud.exception.ConcurrentOperationException;\n+import com.cloud.exception.InvalidParameterValueException;\n+import com.cloud.exception.OperationTimedoutException;\n+import com.cloud.exception.PermissionDeniedException;\n+import com.cloud.exception.ResourceUnavailableException;\n+import com.cloud.exception.StorageUnavailableException;\n import com.cloud.ha.HighAvailabilityManager;\n import com.cloud.host.DetailVO;\n import com.cloud.host.Host;\n@@ -141,7 +484,12 @@\n import com.cloud.info.ConsoleProxyInfo;\n import com.cloud.keystore.KeystoreManager;\n import com.cloud.network.IpAddress;\n-import com.cloud.network.dao.*;\n+import com.cloud.network.dao.IPAddressDao;\n+import com.cloud.network.dao.IPAddressVO;\n+import com.cloud.network.dao.LoadBalancerDao;\n+import com.cloud.network.dao.LoadBalancerVO;\n+import com.cloud.network.dao.NetworkDao;\n+import com.cloud.network.dao.NetworkVO;\n import com.cloud.org.Cluster;\n import com.cloud.org.Grouping.AllocationState;\n import com.cloud.projects.Project;\n@@ -150,11 +498,29 @@\n import com.cloud.resource.ResourceManager;\n import com.cloud.server.ResourceTag.TaggedResourceType;\n import com.cloud.server.auth.UserAuthenticator;\n-import com.cloud.service.ServiceOfferingVO;\n import com.cloud.service.dao.ServiceOfferingDao;\n-import com.cloud.storage.*;\n+import com.cloud.storage.DiskOfferingVO;\n+import com.cloud.storage.GuestOS;\n+import com.cloud.storage.GuestOSCategoryVO;\n+import com.cloud.storage.GuestOSVO;\n+import com.cloud.storage.GuestOsCategory;\n+import com.cloud.storage.Storage;\n import com.cloud.storage.Storage.ImageFormat;\n+import com.cloud.storage.StorageManager;\n+import com.cloud.storage.StoragePool;\n+import com.cloud.storage.Upload;\n import com.cloud.storage.Upload.Mode;\n+import com.cloud.storage.UploadVO;\n+import com.cloud.storage.VMTemplateVO;\n+import com.cloud.storage.Volume;\n+import com.cloud.storage.VolumeManager;\n+import com.cloud.storage.VolumeVO;\n+import com.cloud.storage.dao.DiskOfferingDao;\n+import com.cloud.storage.dao.GuestOSCategoryDao;\n+import com.cloud.storage.dao.GuestOSDao;\n+import com.cloud.storage.dao.UploadDao;\n+import com.cloud.storage.dao.VMTemplateDao;\n+import com.cloud.storage.dao.VolumeDao;\n import com.cloud.storage.s3.S3Manager;\n import com.cloud.storage.secondary.SecondaryStorageVmManager;\n import com.cloud.storage.snapshot.SnapshotManager;\n@@ -164,7 +530,13 @@\n import com.cloud.tags.dao.ResourceTagDao;\n import com.cloud.template.TemplateManager;\n import com.cloud.template.VirtualMachineTemplate.TemplateFilter;\n-import com.cloud.user.*;\n+import com.cloud.user.Account;\n+import com.cloud.user.AccountManager;\n+import com.cloud.user.SSHKeyPair;\n+import com.cloud.user.SSHKeyPairVO;\n+import com.cloud.user.User;\n+import com.cloud.user.UserContext;\n+import com.cloud.user.UserVO;\n import com.cloud.user.dao.AccountDao;\n import com.cloud.user.dao.SSHKeyPairDao;\n import com.cloud.user.dao.UserDao;\n@@ -177,91 +549,39 @@\n import com.cloud.utils.component.ManagerBase;\n import com.cloud.utils.concurrency.NamedThreadFactory;\n import com.cloud.utils.crypt.DBEncryptionUtil;\n-import com.cloud.utils.db.*;\n+import com.cloud.utils.db.DB;\n+import com.cloud.utils.db.Filter;\n+import com.cloud.utils.db.GlobalLock;\n+import com.cloud.utils.db.JoinBuilder;\n import com.cloud.utils.db.JoinBuilder.JoinType;\n+import com.cloud.utils.db.SearchBuilder;\n+import com.cloud.utils.db.SearchCriteria;\n+import com.cloud.utils.db.Transaction;\n import com.cloud.utils.exception.CloudRuntimeException;\n import com.cloud.utils.net.MacAddress;\n import com.cloud.utils.net.NetUtils;\n import com.cloud.utils.ssh.SSHKeysHelper;\n-import com.cloud.vm.*;\n+import com.cloud.vm.ConsoleProxyVO;\n+import com.cloud.vm.DiskProfile;\n+import com.cloud.vm.InstanceGroupVO;\n+import com.cloud.vm.SecondaryStorageVmVO;\n+import com.cloud.vm.UserVmVO;\n+import com.cloud.vm.VMInstanceVO;\n+import com.cloud.vm.VirtualMachine;\n import com.cloud.vm.VirtualMachine.State;\n-import com.cloud.vm.dao.*;\n+import com.cloud.vm.VirtualMachineManager;\n+import com.cloud.vm.VirtualMachineProfile;\n+import com.cloud.vm.VirtualMachineProfileImpl;\n+import com.cloud.vm.dao.ConsoleProxyDao;\n+import com.cloud.vm.dao.DomainRouterDao;\n+import com.cloud.vm.dao.InstanceGroupDao;\n+import com.cloud.vm.dao.SecondaryStorageVmDao;\n+import com.cloud.vm.dao.UserVmDao;\n+import com.cloud.vm.dao.VMInstanceDao;\n+\n import edu.emory.mathcs.backport.java.util.Arrays;\n import edu.emory.mathcs.backport.java.util.Collections;\n-import org.apache.cloudstack.acl.ControlledEntity;\n-import org.apache.cloudstack.api.command.admin.autoscale.CreateCounterCmd;\n-import org.apache.cloudstack.api.command.admin.autoscale.DeleteCounterCmd;\n-import org.apache.cloudstack.api.command.admin.cluster.AddClusterCmd;\n-import org.apache.cloudstack.api.command.admin.cluster.DeleteClusterCmd;\n-import org.apache.cloudstack.api.command.admin.cluster.ListClustersCmd;\n-import org.apache.cloudstack.api.command.admin.cluster.UpdateClusterCmd;\n-import org.apache.cloudstack.api.command.admin.config.ListCfgsByCmd;\n-import org.apache.cloudstack.api.command.admin.config.ListHypervisorCapabilitiesCmd;\n-import org.apache.cloudstack.api.command.admin.config.UpdateCfgCmd;\n-import org.apache.cloudstack.api.command.admin.config.UpdateHypervisorCapabilitiesCmd;\n-import org.apache.cloudstack.api.command.admin.ldap.LDAPConfigCmd;\n-import org.apache.cloudstack.api.command.admin.ldap.LDAPRemoveCmd;\n-import org.apache.cloudstack.api.command.admin.pod.CreatePodCmd;\n-import org.apache.cloudstack.api.command.admin.pod.DeletePodCmd;\n-import org.apache.cloudstack.api.command.admin.pod.ListPodsByCmd;\n-import org.apache.cloudstack.api.command.admin.pod.UpdatePodCmd;\n-import org.apache.cloudstack.api.command.admin.region.AddRegionCmd;\n-import org.apache.cloudstack.api.command.admin.region.RemoveRegionCmd;\n-import org.apache.cloudstack.api.command.admin.region.UpdateRegionCmd;\n-import org.apache.cloudstack.api.command.admin.swift.AddSwiftCmd;\n-import org.apache.cloudstack.api.command.admin.swift.ListSwiftsCmd;\n-import org.apache.cloudstack.api.command.admin.template.PrepareTemplateCmd;\n-import org.apache.cloudstack.api.command.admin.vlan.CreateVlanIpRangeCmd;\n-import org.apache.cloudstack.api.command.admin.vlan.DeleteVlanIpRangeCmd;\n-import org.apache.cloudstack.api.command.admin.vlan.ListVlanIpRangesCmd;\n-import org.apache.cloudstack.api.command.admin.vm.AssignVMCmd;\n-import org.apache.cloudstack.api.command.admin.vm.MigrateVMCmd;\n-import org.apache.cloudstack.api.command.admin.vm.MigrateVirtualMachineWithVolumeCmd;\n-import org.apache.cloudstack.api.command.admin.vm.RecoverVMCmd;\n-import org.apache.cloudstack.api.command.admin.zone.CreateZoneCmd;\n-import org.apache.cloudstack.api.command.admin.zone.DeleteZoneCmd;\n-import org.apache.cloudstack.api.command.admin.zone.MarkDefaultZoneForAccountCmd;\n-import org.apache.cloudstack.api.command.admin.zone.UpdateZoneCmd;\n-import org.apache.cloudstack.api.command.user.account.AddAccountToProjectCmd;\n-import org.apache.cloudstack.api.command.user.account.DeleteAccountFromProjectCmd;\n-import org.apache.cloudstack.api.command.user.account.ListAccountsCmd;\n-import org.apache.cloudstack.api.command.user.account.ListProjectAccountsCmd;\n-import org.apache.cloudstack.api.command.user.address.AssociateIPAddrCmd;\n-import org.apache.cloudstack.api.command.user.address.DisassociateIPAddrCmd;\n-import org.apache.cloudstack.api.command.user.address.ListPublicIpAddressesCmd;\n-import org.apache.cloudstack.api.command.user.config.ListCapabilitiesCmd;\n-import org.apache.cloudstack.api.command.user.event.ArchiveEventsCmd;\n-import org.apache.cloudstack.api.command.user.event.DeleteEventsCmd;\n-import org.apache.cloudstack.api.command.user.event.ListEventTypesCmd;\n-import org.apache.cloudstack.api.command.user.event.ListEventsCmd;\n-import org.apache.cloudstack.api.command.user.guest.ListGuestOsCategoriesCmd;\n-import org.apache.cloudstack.api.command.user.guest.ListGuestOsCmd;\n-import org.apache.cloudstack.api.command.user.job.ListAsyncJobsCmd;\n-import org.apache.cloudstack.api.command.user.job.QueryAsyncJobResultCmd;\n-import org.apache.cloudstack.api.command.user.offering.ListDiskOfferingsCmd;\n-import org.apache.cloudstack.api.command.user.offering.ListServiceOfferingsCmd;\n-import org.apache.cloudstack.api.command.user.region.ListRegionsCmd;\n-import org.apache.cloudstack.api.command.user.region.ha.gslb.*;\n-import org.apache.cloudstack.api.command.user.ssh.CreateSSHKeyPairCmd;\n-import org.apache.cloudstack.api.command.user.ssh.DeleteSSHKeyPairCmd;\n-import org.apache.cloudstack.api.command.user.ssh.ListSSHKeyPairsCmd;\n-import org.apache.cloudstack.api.command.user.ssh.RegisterSSHKeyPairCmd;\n-import org.apache.cloudstack.api.command.user.tag.CreateTagsCmd;\n-import org.apache.cloudstack.api.command.user.tag.DeleteTagsCmd;\n-import org.apache.cloudstack.api.command.user.tag.ListTagsCmd;\n-import org.apache.cloudstack.api.command.user.vmgroup.CreateVMGroupCmd;\n-import org.apache.cloudstack.api.command.user.vmgroup.DeleteVMGroupCmd;\n-import org.apache.cloudstack.api.command.user.vmgroup.ListVMGroupsCmd;\n-import org.apache.cloudstack.api.command.user.vmgroup.UpdateVMGroupCmd;\n-import org.apache.cloudstack.api.command.user.vmsnapshot.CreateVMSnapshotCmd;\n-import org.apache.cloudstack.api.command.user.vmsnapshot.DeleteVMSnapshotCmd;\n-import org.apache.cloudstack.api.command.user.vmsnapshot.ListVMSnapshotCmd;\n-import org.apache.cloudstack.api.command.user.vmsnapshot.RevertToVMSnapshotCmd;\n-import org.apache.cloudstack.api.command.user.zone.ListZonesByCmd;\n-import org.apache.cloudstack.engine.subsystem.api.storage.DataStoreManager;\n-import org.apache.cloudstack.engine.subsystem.api.storage.StoragePoolAllocator;\n-import org.apache.cloudstack.storage.datastore.db.PrimaryDataStoreDao;\n-import org.apache.cloudstack.storage.datastore.db.StoragePoolVO;\n+\n \n public class ManagementServerImpl extends ManagerBase implements ManagementServer {\n     public static final Logger s_logger = Logger.getLogger(ManagementServerImpl.class.getName());\n@@ -2542,11 +2862,21 @@ public static boolean isAdmin(short accountType) {\n         cmdList.add(AssignToGlobalLoadBalancerRuleCmd.class);\n         cmdList.add(RemoveFromGlobalLoadBalancerRuleCmd.class);\n         cmdList.add(ListStorageProvidersCmd.class);\n+        cmdList.add(CreateApplicationLoadBalancerCmd.class);\n+        cmdList.add(ListApplicationLoadBalancersCmd.class);\n+        cmdList.add(DeleteApplicationLoadBalancerCmd.class);\n+        cmdList.add(ConfigureInternalLoadBalancerElementCmd.class);\n+        cmdList.add(CreateInternalLoadBalancerElementCmd.class);\n+        cmdList.add(ListInternalLoadBalancerElementsCmd.class);\n         cmdList.add(CreateAffinityGroupCmd.class);\n         cmdList.add(DeleteAffinityGroupCmd.class);\n         cmdList.add(ListAffinityGroupsCmd.class);\n         cmdList.add(UpdateVMAffinityGroupCmd.class);\n         cmdList.add(ListAffinityGroupTypesCmd.class);\n+        cmdList.add(StopInternalLBVMCmd.class);\n+        cmdList.add(StartInternalLBVMCmd.class);\n+        cmdList.add(ListInternalLBVMsCmd.class);\n+        cmdList.add(ListNetworkIsolationMethodsCmd.class);\n         cmdList.add(ListNetworkIsolationMethodsCmd.class);\n \n         return cmdList;",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/src/com/cloud/server/ManagementServerImpl.java",
                "sha": "86c1a640da91ce5e2a5fb6c297b826b9113d515b",
                "status": "modified"
            },
            {
                "additions": 524,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/src/org/apache/cloudstack/network/lb/ApplicationLoadBalancerManagerImpl.java",
                "changes": 524,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/org/apache/cloudstack/network/lb/ApplicationLoadBalancerManagerImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "server/src/org/apache/cloudstack/network/lb/ApplicationLoadBalancerManagerImpl.java",
                "patch": "@@ -0,0 +1,524 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+// \n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.network.lb;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.ejb.Local;\n+import javax.inject.Inject;\n+\n+import org.apache.cloudstack.acl.SecurityChecker.AccessType;\n+import org.apache.cloudstack.api.command.user.loadbalancer.ListApplicationLoadBalancersCmd;\n+import org.apache.cloudstack.lb.ApplicationLoadBalancerRuleVO;\n+import org.apache.cloudstack.lb.dao.ApplicationLoadBalancerRuleDao;\n+import org.apache.log4j.Logger;\n+import org.springframework.stereotype.Component;\n+\n+import com.cloud.event.ActionEvent;\n+import com.cloud.event.EventTypes;\n+import com.cloud.event.UsageEventUtils;\n+import com.cloud.exception.InsufficientAddressCapacityException;\n+import com.cloud.exception.InsufficientVirtualNetworkCapcityException;\n+import com.cloud.exception.InvalidParameterValueException;\n+import com.cloud.exception.NetworkRuleConflictException;\n+import com.cloud.exception.UnsupportedServiceException;\n+import com.cloud.network.Network;\n+import com.cloud.network.Network.Capability;\n+import com.cloud.network.Network.Service;\n+import com.cloud.network.NetworkManager;\n+import com.cloud.network.NetworkModel;\n+import com.cloud.network.Networks.TrafficType;\n+import com.cloud.network.dao.FirewallRulesDao;\n+import com.cloud.network.lb.LoadBalancingRule;\n+import com.cloud.network.lb.LoadBalancingRule.LbDestination;\n+import com.cloud.network.lb.LoadBalancingRule.LbHealthCheckPolicy;\n+import com.cloud.network.lb.LoadBalancingRule.LbStickinessPolicy;\n+import com.cloud.network.lb.LoadBalancingRulesManager;\n+import com.cloud.network.rules.FirewallRule.State;\n+import com.cloud.network.rules.LoadBalancerContainer.Scheme;\n+import com.cloud.projects.Project.ListProjectResourcesCriteria;\n+import com.cloud.server.ResourceTag.TaggedResourceType;\n+import com.cloud.tags.ResourceTagVO;\n+import com.cloud.tags.dao.ResourceTagDao;\n+import com.cloud.user.Account;\n+import com.cloud.user.AccountManager;\n+import com.cloud.user.UserContext;\n+import com.cloud.utils.Pair;\n+import com.cloud.utils.Ternary;\n+import com.cloud.utils.component.ManagerBase;\n+import com.cloud.utils.db.DB;\n+import com.cloud.utils.db.Filter;\n+import com.cloud.utils.db.JoinBuilder;\n+import com.cloud.utils.db.SearchBuilder;\n+import com.cloud.utils.db.SearchCriteria;\n+import com.cloud.utils.db.Transaction;\n+import com.cloud.utils.exception.CloudRuntimeException;\n+import com.cloud.utils.net.Ip;\n+import com.cloud.utils.net.NetUtils;\n+\n+@Component\n+@Local(value = { ApplicationLoadBalancerService.class })\n+public class ApplicationLoadBalancerManagerImpl extends ManagerBase implements ApplicationLoadBalancerService {\n+    private static final Logger s_logger = Logger.getLogger(ApplicationLoadBalancerManagerImpl.class);\n+    \n+    @Inject NetworkModel _networkModel;\n+    @Inject ApplicationLoadBalancerRuleDao _lbDao;\n+    @Inject AccountManager _accountMgr;\n+    @Inject LoadBalancingRulesManager _lbMgr;\n+    @Inject FirewallRulesDao _firewallDao;\n+    @Inject ResourceTagDao _resourceTagDao;\n+    @Inject NetworkManager _ntwkMgr;\n+    \n+    \n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_LOAD_BALANCER_CREATE, eventDescription = \"creating load balancer\")\n+    public ApplicationLoadBalancerRule createApplicationLoadBalancer(String name, String description, Scheme scheme, long sourceIpNetworkId, String sourceIp,\n+            int sourcePort, int instancePort, String algorithm, long networkId, long lbOwnerId) throws InsufficientAddressCapacityException,\n+            NetworkRuleConflictException, InsufficientVirtualNetworkCapcityException {\n+        \n+        //Validate LB rule guest network\n+        Network guestNtwk = _networkModel.getNetwork(networkId);\n+        if (guestNtwk == null || guestNtwk.getTrafficType() != TrafficType.Guest) {\n+            throw new InvalidParameterValueException(\"Can't find guest network by id\");\n+        }\n+        \n+        Account caller = UserContext.current().getCaller();\n+        _accountMgr.checkAccess(caller, AccessType.UseNetwork, false, guestNtwk);\n+        \n+        Network sourceIpNtwk = _networkModel.getNetwork(sourceIpNetworkId);\n+        if (sourceIpNtwk == null) {\n+            throw new InvalidParameterValueException(\"Can't find source ip network by id\");\n+        }\n+        \n+        Account lbOwner = _accountMgr.getAccount(lbOwnerId);\n+        if (lbOwner == null) {\n+            throw new InvalidParameterValueException(\"Can't find the lb owner account\");\n+        }\n+        \n+        return createApplicationLoadBalancer(name, description, scheme, sourceIpNtwk, sourceIp, sourcePort, instancePort, algorithm, lbOwner, guestNtwk);\n+    }\n+\n+    \n+    protected ApplicationLoadBalancerRule createApplicationLoadBalancer(String name, String description, Scheme scheme, Network sourceIpNtwk, String sourceIp, int sourcePort, int instancePort, String algorithm,\n+            Account lbOwner, Network guestNtwk) throws NetworkRuleConflictException, InsufficientVirtualNetworkCapcityException {\n+        \n+        //Only Internal scheme is supported in this release\n+        if (scheme != Scheme.Internal) {\n+            throw new UnsupportedServiceException(\"Only scheme of type \" + Scheme.Internal + \" is supported\");\n+        }\n+        \n+        //1) Validate LB rule's parameters\n+        validateLbRule(sourcePort, instancePort, algorithm, guestNtwk, scheme);\n+        \n+        //2) Validate source network\n+        validateSourceIpNtwkForLbRule(sourceIpNtwk, scheme);\n+        \n+        //3) Get source ip address\n+        Ip sourceIpAddr = getSourceIp(scheme, sourceIpNtwk, sourceIp);\n+               \n+        ApplicationLoadBalancerRuleVO newRule = new ApplicationLoadBalancerRuleVO(name, description, sourcePort, instancePort, algorithm, guestNtwk.getId(),\n+                lbOwner.getId(), lbOwner.getDomainId(), sourceIpAddr, sourceIpNtwk.getId(), scheme);\n+        \n+        //4) Validate Load Balancing rule on the providers\n+        LoadBalancingRule loadBalancing = new LoadBalancingRule(newRule, new ArrayList<LbDestination>(),\n+                new ArrayList<LbStickinessPolicy>(), new ArrayList<LbHealthCheckPolicy>(), sourceIpAddr);\n+        if (!_lbMgr.validateLbRule(loadBalancing)) {\n+            throw new InvalidParameterValueException(\"LB service provider cannot support this rule\");\n+        }\n+\n+        //5) Persist Load Balancer rule\n+        return persistLbRule(newRule);\n+    }\n+\n+    \n+    @DB\n+    protected ApplicationLoadBalancerRule persistLbRule(ApplicationLoadBalancerRuleVO newRule) throws NetworkRuleConflictException {\n+        \n+        Transaction txn = Transaction.currentTxn();\n+        txn.start();\n+        \n+        //1) Persist the rule\n+        newRule = _lbDao.persist(newRule);\n+        boolean success = true;\n+\n+        try {\n+            //2) Detect conflicts\n+            detectLbRulesConflicts(newRule);\n+            if (!_firewallDao.setStateToAdd(newRule)) {\n+                throw new CloudRuntimeException(\"Unable to update the state to add for \" + newRule);\n+            }\n+            s_logger.debug(\"Load balancer \" + newRule.getId() + \" for Ip address \" + newRule.getSourceIp().addr() + \", source port \"\n+                    + newRule.getSourcePortStart() + \", instance port \" + newRule.getDefaultPortStart() + \" is added successfully.\");\n+            UserContext.current().setEventDetails(\"Load balancer Id: \" + newRule.getId());\n+            Network ntwk = _networkModel.getNetwork(newRule.getNetworkId());\n+            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_LOAD_BALANCER_CREATE, newRule.getAccountId(),\n+                    ntwk.getDataCenterId(), newRule.getId(), null, LoadBalancingRule.class.getName(),\n+                    newRule.getUuid());\n+            txn.commit();\n+\n+            return newRule;\n+        } catch (Exception e) {\n+            success = false;\n+            if (e instanceof NetworkRuleConflictException) {\n+                throw (NetworkRuleConflictException) e;\n+            }\n+            throw new CloudRuntimeException(\"Unable to add lb rule for ip address \" + newRule.getSourceIpAddressId(), e);\n+        } finally {\n+            if (!success && newRule != null) {\n+                _lbMgr.removeLBRule(newRule);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Validates Lb rule parameters\n+     * @param sourcePort\n+     * @param instancePort\n+     * @param algorithm\n+     * @param network\n+     * @param scheme TODO\n+     * @param networkId\n+     */\n+    protected void validateLbRule(int sourcePort, int instancePort, String algorithm, Network network, Scheme scheme) {\n+        //1) verify that lb service is supported by the network\n+        if (!_networkModel.areServicesSupportedInNetwork(network.getId(), Service.Lb)) {\n+            InvalidParameterValueException ex = new InvalidParameterValueException(\n+                    \"LB service is not supported in specified network id\");\n+            ex.addProxyObject(network, network.getId(), \"networkId\");\n+            throw ex;\n+        }\n+        \n+        //2) verify that lb service is supported by the network\n+        _lbMgr.isLbServiceSupportedInNetwork(network.getId(), scheme);\n+        \n+        Map<Network.Capability, String> caps = _networkModel.getNetworkServiceCapabilities(network.getId(), Service.Lb);\n+        String supportedProtocols = caps.get(Capability.SupportedProtocols).toLowerCase();\n+        if (!supportedProtocols.contains(NetUtils.TCP_PROTO.toLowerCase())) {\n+            throw new InvalidParameterValueException(\"Protocol \" + NetUtils.TCP_PROTO.toLowerCase() + \" is not supported in zone \" + network.getDataCenterId());\n+        }\n+        \n+        //3) Validate rule parameters\n+        if (!NetUtils.isValidPort(instancePort)) {\n+            throw new InvalidParameterValueException(\"Invalid value for instance port: \" + instancePort);\n+        }\n+        \n+        if (!NetUtils.isValidPort(sourcePort)) {\n+            throw new InvalidParameterValueException(\"Invalid value for source port: \" + sourcePort);\n+        }\n+       \n+        if ((algorithm == null) || !NetUtils.isValidAlgorithm(algorithm)) {\n+            throw new InvalidParameterValueException(\"Invalid algorithm: \" + algorithm);\n+        }\n+    }\n+    \n+\n+    /**\n+     * Gets source ip address based on the LB rule scheme/source IP network/requested IP address\n+     * @param scheme\n+     * @param sourceIpNtwk\n+     * @param requestedIp\n+     * @return\n+     * @throws InsufficientVirtualNetworkCapcityException\n+     */\n+    protected Ip getSourceIp(Scheme scheme, Network sourceIpNtwk, String requestedIp) throws InsufficientVirtualNetworkCapcityException {       \n+        \n+        if (requestedIp != null) {\n+            if (_lbDao.countBySourceIp(new Ip(requestedIp), sourceIpNtwk.getId()) > 0)  {\n+                s_logger.debug(\"IP address \" + requestedIp + \" is already used by existing LB rule, returning it\");\n+                return new Ip(requestedIp);\n+            }\n+            \n+            validateRequestedSourceIpForLbRule(sourceIpNtwk, new Ip(requestedIp), scheme);\n+        }\n+        \n+        requestedIp = allocateSourceIpForLbRule(scheme, sourceIpNtwk, requestedIp);\n+        \n+        if (requestedIp == null) {\n+            throw new InsufficientVirtualNetworkCapcityException(\"Unable to acquire IP address for network \" + sourceIpNtwk, Network.class, sourceIpNtwk.getId());\n+        }\n+        return new Ip(requestedIp);\n+    }\n+\n+\n+    /**\n+     * Allocates new Source IP address for the Load Balancer rule based on LB rule scheme/sourceNetwork\n+     * @param scheme\n+     * @param sourceIpNtwk\n+     * @param requestedIp TODO\n+     * @param sourceIp\n+     * @return\n+     */\n+    protected String allocateSourceIpForLbRule(Scheme scheme, Network sourceIpNtwk, String requestedIp) {\n+        String sourceIp = null;\n+        if (scheme != Scheme.Internal) {\n+            throw new InvalidParameterValueException(\"Only scheme \" + Scheme.Internal + \" is supported\");\n+        } else {\n+            sourceIp = allocateSourceIpForInternalLbRule(sourceIpNtwk, requestedIp);\n+        }\n+        return sourceIp;\n+    }\n+    \n+\n+    /**\n+     * Allocates sourceIp for the Internal LB rule\n+     * @param sourceIpNtwk\n+     * @param requestedIp TODO\n+     * @return\n+     */\n+    protected String allocateSourceIpForInternalLbRule(Network sourceIpNtwk, String requestedIp) {\n+        return _ntwkMgr.acquireGuestIpAddress(sourceIpNtwk, requestedIp);\n+    }\n+\n+    \n+    /**\n+     * Validates requested source ip address of the LB rule based on Lb rule scheme/sourceNetwork\n+     * @param sourceIpNtwk\n+     * @param requestedSourceIp\n+     * @param scheme\n+     */\n+    void validateRequestedSourceIpForLbRule(Network sourceIpNtwk, Ip requestedSourceIp, Scheme scheme) {\n+        //only Internal scheme is supported in this release\n+        if (scheme != Scheme.Internal) {\n+            throw new UnsupportedServiceException(\"Only scheme of type \" + Scheme.Internal + \" is supported\");\n+        } else {\n+            //validate guest source ip\n+            validateRequestedSourceIpForInternalLbRule(sourceIpNtwk, requestedSourceIp);\n+        }\n+    }\n+\n+    \n+    /**\n+     * Validates requested source IP address of Internal Lb rule against sourceNetworkId\n+     * @param sourceIpNtwk\n+     * @param requestedSourceIp\n+     */\n+    protected void validateRequestedSourceIpForInternalLbRule(Network sourceIpNtwk, Ip requestedSourceIp) {\n+        //Check if the IP is within the network cidr\n+        Pair<String, Integer> cidr = NetUtils.getCidr(sourceIpNtwk.getCidr());\n+        if (!NetUtils.getCidrSubNet(requestedSourceIp.addr(), cidr.second()).equalsIgnoreCase(NetUtils.getCidrSubNet(cidr.first(), cidr.second()))) {\n+            throw new InvalidParameterValueException(\"The requested IP is not in the network's CIDR subnet.\");\n+        }\n+    }\n+\n+    \n+    /**\n+     * Validates source IP network for the LB rule\n+     * @param sourceNtwk\n+     * @param scheme\n+     * @return\n+     */\n+    protected Network validateSourceIpNtwkForLbRule(Network sourceNtwk, Scheme scheme) {\n+        //only Internal scheme is supported in this release\n+        if (scheme != Scheme.Internal) {\n+            throw new UnsupportedServiceException(\"Only scheme of type \" + Scheme.Internal + \" is supported\");\n+        } else {\n+            //validate source ip network\n+            return validateSourceIpNtwkForInternalLbRule(sourceNtwk);\n+        }\n+        \n+    }\n+\n+    /**\n+     * Validates source IP network for the Internal LB rule\n+     * @param sourceIpNtwk\n+     * @return\n+     */\n+    protected Network validateSourceIpNtwkForInternalLbRule(Network sourceIpNtwk) {\n+        if (sourceIpNtwk.getTrafficType() != TrafficType.Guest) {\n+            throw new InvalidParameterValueException(\"Only traffic type \" + TrafficType.Guest + \" is supported\");\n+        } \n+        \n+        //Can't create the LB rule if the network's cidr is NULL\n+        String ntwkCidr = sourceIpNtwk.getCidr();\n+        if (ntwkCidr == null) {\n+            throw new InvalidParameterValueException(\"Can't create the application load balancer rule for the network having NULL cidr\");\n+        }\n+        \n+        //check if the requested ip address is within the cidr\n+        return sourceIpNtwk;\n+    }\n+\n+    \n+    @Override\n+    public boolean deleteApplicationLoadBalancer(long id) {\n+        return _lbMgr.deleteLoadBalancerRule(id, true);\n+    }\n+\n+    @Override\n+    public Pair<List<? extends ApplicationLoadBalancerRule>, Integer> listApplicationLoadBalancers(ListApplicationLoadBalancersCmd cmd) {\n+        Long id = cmd.getId();\n+        String name = cmd.getLoadBalancerRuleName();\n+        String ip = cmd.getSourceIp();\n+        Long ipNtwkId = cmd.getSourceIpNetworkId();\n+        String keyword = cmd.getKeyword();\n+        Scheme scheme = cmd.getScheme();\n+        Long networkId = cmd.getNetworkId();\n+        \n+        Map<String, String> tags = cmd.getTags();\n+\n+        Account caller = UserContext.current().getCaller();\n+        List<Long> permittedAccounts = new ArrayList<Long>();\n+\n+        Ternary<Long, Boolean, ListProjectResourcesCriteria> domainIdRecursiveListProject = new Ternary<Long, Boolean, ListProjectResourcesCriteria>(\n+                cmd.getDomainId(), cmd.isRecursive(), null);\n+        _accountMgr.buildACLSearchParameters(caller, id, cmd.getAccountName(), cmd.getProjectId(), permittedAccounts,\n+                domainIdRecursiveListProject, cmd.listAll(), false);\n+        Long domainId = domainIdRecursiveListProject.first();\n+        Boolean isRecursive = domainIdRecursiveListProject.second();\n+        ListProjectResourcesCriteria listProjectResourcesCriteria = domainIdRecursiveListProject.third();\n+\n+        Filter searchFilter = new Filter(ApplicationLoadBalancerRuleVO.class, \"id\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n+        SearchBuilder<ApplicationLoadBalancerRuleVO> sb = _lbDao.createSearchBuilder();\n+        _accountMgr.buildACLSearchBuilder(sb, domainId, isRecursive, permittedAccounts, listProjectResourcesCriteria);\n+\n+        sb.and(\"id\", sb.entity().getId(), SearchCriteria.Op.EQ);\n+        sb.and(\"name\", sb.entity().getName(), SearchCriteria.Op.EQ);\n+        sb.and(\"sourceIpAddress\", sb.entity().getSourceIp(), SearchCriteria.Op.EQ);\n+        sb.and(\"sourceIpAddressNetworkId\", sb.entity().getSourceIpNetworkId(), SearchCriteria.Op.EQ);\n+        sb.and(\"scheme\", sb.entity().getScheme(), SearchCriteria.Op.EQ);\n+        sb.and(\"networkId\", sb.entity().getNetworkId(), SearchCriteria.Op.EQ);\n+        \n+        //list only load balancers having not null sourceIp/sourceIpNtwkId\n+        sb.and(\"sourceIpAddress\", sb.entity().getSourceIp(), SearchCriteria.Op.NNULL);\n+        sb.and(\"sourceIpAddressNetworkId\", sb.entity().getSourceIpNetworkId(), SearchCriteria.Op.NNULL);\n+\n+        if (tags != null && !tags.isEmpty()) {\n+            SearchBuilder<ResourceTagVO> tagSearch = _resourceTagDao.createSearchBuilder();\n+            for (int count = 0; count < tags.size(); count++) {\n+                tagSearch.or().op(\"key\" + String.valueOf(count), tagSearch.entity().getKey(), SearchCriteria.Op.EQ);\n+                tagSearch.and(\"value\" + String.valueOf(count), tagSearch.entity().getValue(), SearchCriteria.Op.EQ);\n+                tagSearch.cp();\n+            }\n+            tagSearch.and(\"resourceType\", tagSearch.entity().getResourceType(), SearchCriteria.Op.EQ);\n+            sb.groupBy(sb.entity().getId());\n+            sb.join(\"tagSearch\", tagSearch, sb.entity().getId(), tagSearch.entity().getResourceId(),\n+                    JoinBuilder.JoinType.INNER);\n+        }\n+\n+        SearchCriteria<ApplicationLoadBalancerRuleVO> sc = sb.create();\n+        _accountMgr.buildACLSearchCriteria(sc, domainId, isRecursive, permittedAccounts, listProjectResourcesCriteria);\n+\n+        if (keyword != null) {\n+            SearchCriteria<ApplicationLoadBalancerRuleVO> ssc = _lbDao.createSearchCriteria();\n+            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n+            ssc.addOr(\"description\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n+            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n+        }\n+\n+        if (name != null) {\n+            sc.setParameters(\"name\", name);\n+        }\n+\n+        if (id != null) {\n+            sc.setParameters(\"id\", id);\n+        }\n+        \n+        if (ip != null) {\n+            sc.setParameters(\"sourceIpAddress\", ip);\n+        }\n+\n+        if (ipNtwkId != null) {\n+            sc.setParameters(\"sourceIpAddressNetworkId\", ipNtwkId);\n+        }\n+        \n+        if (scheme != null) {\n+            sc.setParameters(\"scheme\", scheme);\n+        }\n+        \n+        if (networkId != null) {\n+            sc.setParameters(\"networkId\", networkId);    \n+        }\n+        \n+        if (tags != null && !tags.isEmpty()) {\n+            int count = 0;\n+            sc.setJoinParameters(\"tagSearch\", \"resourceType\", TaggedResourceType.LoadBalancer.toString());\n+            for (String key : tags.keySet()) {\n+                sc.setJoinParameters(\"tagSearch\", \"key\" + String.valueOf(count), key);\n+                sc.setJoinParameters(\"tagSearch\", \"value\" + String.valueOf(count), tags.get(key));\n+                count++;\n+            }\n+        }\n+        \n+        Pair<List<ApplicationLoadBalancerRuleVO>, Integer> result = _lbDao.searchAndCount(sc, searchFilter);\n+        return new Pair<List<? extends ApplicationLoadBalancerRule>, Integer>(result.first(), result.second());\n+    }\n+\n+    @Override\n+    public ApplicationLoadBalancerRule getApplicationLoadBalancer(long ruleId) {\n+        ApplicationLoadBalancerRule lbRule = _lbDao.findById(ruleId);\n+        if (lbRule == null) {\n+            throw new InvalidParameterValueException(\"Can't find the load balancer by id\");\n+        }\n+        return lbRule;\n+    }\n+   \n+    \n+    /**\n+     * Detects lb rule conflicts against other rules\n+     * @param newLbRule\n+     * @throws NetworkRuleConflictException\n+     */\n+    protected void detectLbRulesConflicts(ApplicationLoadBalancerRule newLbRule) throws NetworkRuleConflictException {\n+        if (newLbRule.getScheme() != Scheme.Internal) {\n+            throw new UnsupportedServiceException(\"Only scheme of type \" + Scheme.Internal + \" is supported\");\n+        } else {\n+            detectInternalLbRulesConflict(newLbRule);\n+        }\n+    }\n+    \n+    \n+    /**\n+     * Detects Internal Lb Rules conflicts\n+     * @param newLbRule\n+     * @throws NetworkRuleConflictException\n+     */\n+    protected void detectInternalLbRulesConflict(ApplicationLoadBalancerRule newLbRule) throws NetworkRuleConflictException {\n+        List<ApplicationLoadBalancerRuleVO> lbRules = _lbDao.listBySourceIpAndNotRevoked(newLbRule.getSourceIp(), newLbRule.getSourceIpNetworkId());\n+\n+        for (ApplicationLoadBalancerRuleVO lbRule : lbRules) {\n+            if (lbRule.getId() == newLbRule.getId()) {\n+                continue; // Skips my own rule.\n+            }\n+\n+            if (lbRule.getNetworkId() != newLbRule.getNetworkId() && lbRule.getState() != State.Revoke) {\n+                throw new NetworkRuleConflictException(\"New rule is for a different network than what's specified in rule \"\n+                        + lbRule.getXid());\n+            }\n+\n+          if ((lbRule.getSourcePortStart().intValue() <= newLbRule.getSourcePortStart().intValue() \n+                  && lbRule.getSourcePortEnd().intValue() >= newLbRule.getSourcePortStart().intValue())\n+                  || (lbRule.getSourcePortStart().intValue() <= newLbRule.getSourcePortEnd().intValue() \n+                  && lbRule.getSourcePortEnd().intValue() >= newLbRule.getSourcePortEnd().intValue())\n+                  || (newLbRule.getSourcePortStart().intValue() <= lbRule.getSourcePortStart().intValue() \n+                  && newLbRule.getSourcePortEnd().intValue() >= lbRule.getSourcePortStart().intValue())\n+                  || (newLbRule.getSourcePortStart().intValue() <= lbRule.getSourcePortEnd().intValue() \n+                  && newLbRule.getSourcePortEnd().intValue() >= lbRule.getSourcePortEnd().intValue())) {\n+\n+\n+                    throw new NetworkRuleConflictException(\"The range specified, \" + newLbRule.getSourcePortStart() + \"-\" + newLbRule.getSourcePortEnd() + \", conflicts with rule \" + lbRule.getId()\n+                            + \" which has \" + lbRule.getSourcePortStart() + \"-\" + lbRule.getSourcePortEnd());\n+            }\n+        }\n+\n+        if (s_logger.isDebugEnabled()) {\n+            s_logger.debug(\"No network rule conflicts detected for \" + newLbRule + \" against \" + (lbRules.size() - 1) + \" existing rules\");\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/src/org/apache/cloudstack/network/lb/ApplicationLoadBalancerManagerImpl.java",
                "sha": "ec0be8c9d96a74ce86d8de2b94a4963955594554",
                "status": "added"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/test/com/cloud/network/MockNetworkManagerImpl.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/test/com/cloud/network/MockNetworkManagerImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 2,
                "filename": "server/test/com/cloud/network/MockNetworkManagerImpl.java",
                "patch": "@@ -16,13 +16,33 @@\n // under the License.\n package com.cloud.network;\n \n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.ejb.Local;\n+import javax.naming.ConfigurationException;\n+\n+import org.apache.cloudstack.acl.ControlledEntity.ACLType;\n+import org.apache.cloudstack.api.command.admin.usage.ListTrafficTypeImplementorsCmd;\n+import org.apache.cloudstack.api.command.user.network.CreateNetworkCmd;\n+import org.apache.cloudstack.api.command.user.network.ListNetworksCmd;\n+import org.apache.cloudstack.api.command.user.network.RestartNetworkCmd;\n+import org.apache.cloudstack.api.command.user.vm.ListNicsCmd;\n+import org.springframework.stereotype.Component;\n+\n import com.cloud.dc.DataCenter;\n import com.cloud.dc.Pod;\n import com.cloud.dc.Vlan.VlanType;\n import com.cloud.deploy.DataCenterDeployment;\n import com.cloud.deploy.DeployDestination;\n import com.cloud.deploy.DeploymentPlan;\n-import com.cloud.exception.*;\n+import com.cloud.exception.ConcurrentOperationException;\n+import com.cloud.exception.InsufficientAddressCapacityException;\n+import com.cloud.exception.InsufficientCapacityException;\n+import com.cloud.exception.InsufficientVirtualNetworkCapcityException;\n+import com.cloud.exception.ResourceAllocationException;\n+import com.cloud.exception.ResourceUnavailableException;\n import com.cloud.network.Network.Provider;\n import com.cloud.network.Network.Service;\n import com.cloud.network.Networks.TrafficType;\n@@ -37,6 +57,7 @@\n import com.cloud.network.rules.FirewallRule;\n import com.cloud.network.rules.FirewallRule.Purpose;\n import com.cloud.network.rules.FirewallRule.State;\n+import com.cloud.network.rules.LoadBalancerContainer.Scheme;\n import com.cloud.network.rules.StaticNat;\n import com.cloud.offering.NetworkOffering;\n import com.cloud.offerings.NetworkOfferingVO;\n@@ -46,6 +67,7 @@\n import com.cloud.utils.component.ManagerBase;\n import com.cloud.vm.*;\n import com.cloud.vm.VirtualMachine.Type;\n+import com.cloud.vm.VirtualMachineProfile;\n import org.apache.cloudstack.acl.ControlledEntity.ACLType;\n import org.apache.cloudstack.api.command.admin.network.DedicateGuestVlanRangeCmd;\n import org.apache.cloudstack.api.command.admin.network.ListDedicatedGuestVlanRangesCmd;\n@@ -62,6 +84,7 @@\n import java.util.Map;\n import java.util.Set;\n \n+\n @Component\n @Local(value = { NetworkManager.class, NetworkService.class })\n public class MockNetworkManagerImpl extends ManagerBase implements NetworkManager, NetworkService {\n@@ -820,7 +843,7 @@ public int getRuleCountForIp(Long addressId, Purpose purpose, State state) {\n     }\n \n     @Override\n-    public LoadBalancingServiceProvider getLoadBalancingProviderForNetwork(Network network) {\n+    public LoadBalancingServiceProvider getLoadBalancingProviderForNetwork(Network network, Scheme lbScheme) {\n         // TODO Auto-generated method stub\n         return null;\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/test/com/cloud/network/MockNetworkManagerImpl.java",
                "sha": "eb5fc2537847974161549cb42ad0522d67286e7e",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/test/com/cloud/network/MockNetworkModelImpl.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/test/com/cloud/network/MockNetworkModelImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "server/test/com/cloud/network/MockNetworkModelImpl.java",
                "patch": "@@ -40,6 +40,7 @@\n import com.cloud.network.element.NetworkElement;\n import com.cloud.network.element.UserDataServiceProvider;\n import com.cloud.offering.NetworkOffering;\n+import com.cloud.offering.NetworkOffering.Detail;\n import com.cloud.offerings.NetworkOfferingVO;\n import com.cloud.user.Account;\n import com.cloud.utils.component.ManagerBase;\n@@ -853,6 +854,22 @@ public Nic getPlaceholderNicForRouter(Network network, Long podId) {\n     }\n \n     @Override\n+    public IpAddress getPublicIpAddress(String ipAddress, long zoneId) {\n+        // TODO Auto-generated method stub\n+        return null;\n+    }\n+\n+    @Override\n+    public List<String> getUsedIpsInNetwork(Network network) {\n+        // TODO Auto-generated method stub\n+        return null;\n+    }\n+\n+    @Override\n+    public Map<Detail, String> getNtwkOffDetails(long offId) {\n+        return null;\n+    }\n+    \n     public IsolationType[] listNetworkIsolationMethods() {\n         // TODO Auto-generated method stub\n         return null;",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/test/com/cloud/network/MockNetworkModelImpl.java",
                "sha": "c3a0d6c5ae987dd75ecd64aa4a4a9556726cf4fa",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/test/com/cloud/vpc/MockConfigurationManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/test/com/cloud/vpc/MockConfigurationManagerImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 1,
                "filename": "server/test/com/cloud/vpc/MockConfigurationManagerImpl.java",
                "patch": "@@ -501,7 +501,7 @@ public void checkDiskOfferingAccess(Account caller, DiskOffering dof) {\n     @Override\n     public NetworkOfferingVO createNetworkOffering(String name, String displayText, TrafficType trafficType, String tags, boolean specifyVlan, Availability availability, Integer networkRate,\n             Map<Service, Set<Provider>> serviceProviderMap, boolean isDefault, GuestType type, boolean systemOnly, Long serviceOfferingId, boolean conserveMode,\n-            Map<Service, Map<Capability, String>> serviceCapabilityMap, boolean specifyIpRanges, boolean isPersistent) {\n+            Map<Service, Map<Capability, String>> serviceCapabilityMap, boolean specifyIpRanges, boolean isPersistent, Map<NetworkOffering.Detail,String> details) {\n         // TODO Auto-generated method stub\n         return null;\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/test/com/cloud/vpc/MockConfigurationManagerImpl.java",
                "sha": "90587985f7476330cde21efefbd86cba88298652",
                "status": "modified"
            },
            {
                "additions": 46,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/test/com/cloud/vpc/MockNetworkManagerImpl.java",
                "changes": 56,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/test/com/cloud/vpc/MockNetworkManagerImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 10,
                "filename": "server/test/com/cloud/vpc/MockNetworkManagerImpl.java",
                "patch": "@@ -16,17 +16,51 @@\n // under the License.\n package com.cloud.vpc;\n \n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.ejb.Local;\n+import javax.inject.Inject;\n+import javax.naming.ConfigurationException;\n+\n+import org.apache.cloudstack.acl.ControlledEntity.ACLType;\n+import org.apache.cloudstack.api.command.admin.network.DedicateGuestVlanRangeCmd;\n+import org.apache.cloudstack.api.command.admin.network.ListDedicatedGuestVlanRangesCmd;\n+import org.apache.cloudstack.api.command.admin.usage.ListTrafficTypeImplementorsCmd;\n+import org.apache.cloudstack.api.command.user.network.CreateNetworkCmd;\n+import org.apache.cloudstack.api.command.user.network.ListNetworksCmd;\n+import org.apache.cloudstack.api.command.user.network.RestartNetworkCmd;\n+import org.apache.cloudstack.api.command.user.vm.ListNicsCmd;\n+import org.apache.log4j.Logger;\n+import org.springframework.stereotype.Component;\n+\n import com.cloud.dc.DataCenter;\n import com.cloud.dc.Pod;\n import com.cloud.dc.Vlan.VlanType;\n import com.cloud.deploy.DataCenterDeployment;\n import com.cloud.deploy.DeployDestination;\n import com.cloud.deploy.DeploymentPlan;\n-import com.cloud.exception.*;\n-import com.cloud.network.*;\n+import com.cloud.exception.ConcurrentOperationException;\n+import com.cloud.exception.InsufficientAddressCapacityException;\n+import com.cloud.exception.InsufficientCapacityException;\n+import com.cloud.exception.InsufficientVirtualNetworkCapcityException;\n+import com.cloud.exception.ResourceAllocationException;\n+import com.cloud.exception.ResourceUnavailableException;\n+import com.cloud.network.GuestVlan;\n+import com.cloud.network.IpAddress;\n+import com.cloud.network.Network;\n import com.cloud.network.Network.Provider;\n import com.cloud.network.Network.Service;\n+import com.cloud.network.NetworkManager;\n+import com.cloud.network.NetworkProfile;\n+import com.cloud.network.NetworkRuleApplier;\n+import com.cloud.network.NetworkService;\n import com.cloud.network.Networks.TrafficType;\n+import com.cloud.network.PhysicalNetwork;\n+import com.cloud.network.PhysicalNetworkServiceProvider;\n+import com.cloud.network.PhysicalNetworkTrafficType;\n+import com.cloud.network.PublicIpAddress;\n import com.cloud.network.addr.PublicIp;\n import com.cloud.network.dao.AccountGuestVlanMapVO;\n import com.cloud.network.dao.IPAddressVO;\n@@ -40,6 +74,7 @@\n import com.cloud.network.rules.FirewallRule;\n import com.cloud.network.rules.FirewallRule.Purpose;\n import com.cloud.network.rules.FirewallRule.State;\n+import com.cloud.network.rules.LoadBalancerContainer.Scheme;\n import com.cloud.network.rules.StaticNat;\n import com.cloud.offering.NetworkOffering;\n import com.cloud.offerings.NetworkOfferingVO;\n@@ -48,8 +83,15 @@\n import com.cloud.user.User;\n import com.cloud.utils.Pair;\n import com.cloud.utils.component.ManagerBase;\n-import com.cloud.vm.*;\n+import com.cloud.vm.Nic;\n+import com.cloud.vm.NicProfile;\n+import com.cloud.vm.NicSecondaryIp;\n+import com.cloud.vm.NicVO;\n+import com.cloud.vm.ReservationContext;\n+import com.cloud.vm.VMInstanceVO;\n+import com.cloud.vm.VirtualMachine;\n import com.cloud.vm.VirtualMachine.Type;\n+import com.cloud.vm.VirtualMachineProfile;\n import org.apache.cloudstack.acl.ControlledEntity.ACLType;\n import org.apache.cloudstack.api.command.admin.network.DedicateGuestVlanRangeCmd;\n import org.apache.cloudstack.api.command.admin.network.ListDedicatedGuestVlanRangesCmd;\n@@ -61,12 +103,6 @@\n import org.apache.log4j.Logger;\n import org.springframework.stereotype.Component;\n \n-import javax.ejb.Local;\n-import javax.inject.Inject;\n-import javax.naming.ConfigurationException;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n \n @Component\n @Local(value = { NetworkManager.class, NetworkService.class })\n@@ -1301,7 +1337,7 @@ public int getRuleCountForIp(Long addressId, Purpose purpose, State state) {\n     }\n \n     @Override\n-    public LoadBalancingServiceProvider getLoadBalancingProviderForNetwork(Network network) {\n+    public LoadBalancingServiceProvider getLoadBalancingProviderForNetwork(Network network, Scheme lbScheme) {\n         // TODO Auto-generated method stub\n         return null;\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/test/com/cloud/vpc/MockNetworkManagerImpl.java",
                "sha": "84ae818f489da07597da1d869da9a35176c3d683",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/test/com/cloud/vpc/MockNetworkModelImpl.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/test/com/cloud/vpc/MockNetworkModelImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "server/test/com/cloud/vpc/MockNetworkModelImpl.java",
                "patch": "@@ -47,6 +47,7 @@\n import com.cloud.network.element.NetworkElement;\n import com.cloud.network.element.UserDataServiceProvider;\n import com.cloud.offering.NetworkOffering;\n+import com.cloud.offering.NetworkOffering.Detail;\n import com.cloud.offerings.NetworkOfferingVO;\n import com.cloud.offerings.dao.NetworkOfferingServiceMapDao;\n import com.cloud.user.Account;\n@@ -865,6 +866,22 @@ public Nic getPlaceholderNicForRouter(Network network, Long podId) {\n     }\n \n     @Override\n+    public IpAddress getPublicIpAddress(String ipAddress, long zoneId) {\n+        // TODO Auto-generated method stub\n+        return null;\n+    }\n+\n+    @Override\n+    public List<String> getUsedIpsInNetwork(Network network) {\n+        // TODO Auto-generated method stub\n+        return null;\n+    }\n+\n+    @Override\n+    public Map<Detail, String> getNtwkOffDetails(long offId) {\n+        return null;\n+    }\n+    \n     public IsolationType[] listNetworkIsolationMethods() {\n         // TODO Auto-generated method stub\n         return null;",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/test/com/cloud/vpc/MockNetworkModelImpl.java",
                "sha": "d9e33b75616d25f1e122b089a3133e9e99501129",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/test/com/cloud/vpc/MockVpcVirtualNetworkApplianceManager.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/test/com/cloud/vpc/MockVpcVirtualNetworkApplianceManager.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 1,
                "filename": "server/test/com/cloud/vpc/MockVpcVirtualNetworkApplianceManager.java",
                "patch": "@@ -36,6 +36,7 @@\n import com.cloud.network.Site2SiteVpnConnection;\n import com.cloud.network.VpcVirtualNetworkApplianceService;\n import com.cloud.network.VpnUser;\n+import com.cloud.network.lb.LoadBalancingRule;\n import com.cloud.network.router.VirtualRouter;\n import com.cloud.network.router.VpcVirtualNetworkApplianceManager;\n import com.cloud.network.rules.FirewallRule;\n@@ -46,7 +47,6 @@\n import com.cloud.user.Account;\n import com.cloud.user.User;\n import com.cloud.uservm.UserVm;\n-import com.cloud.utils.component.Manager;\n import com.cloud.utils.component.ManagerBase;\n import com.cloud.vm.DomainRouterVO;\n import com.cloud.vm.NicProfile;\n@@ -402,4 +402,16 @@ public boolean stopSite2SiteVpn(Site2SiteVpnConnection conn, VirtualRouter route\n         return null;\n     }\n \n+    @Override\n+    public boolean applyLoadBalancingRules(Network network, List<? extends LoadBalancingRule> rules, List<? extends VirtualRouter> routers) throws ResourceUnavailableException {\n+        // TODO Auto-generated method stub\n+        return false;\n+    }\n+\n+    @Override\n+    public VirtualRouter findRouter(long routerId) {\n+        // TODO Auto-generated method stub\n+        return null;\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/test/com/cloud/vpc/MockVpcVirtualNetworkApplianceManager.java",
                "sha": "9010f1f5acb0a4b6433038e67f59bcff8bbd7e10",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/test/com/cloud/vpc/dao/MockNetworkOfferingDaoImpl.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/test/com/cloud/vpc/dao/MockNetworkOfferingDaoImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 6,
                "filename": "server/test/com/cloud/vpc/dao/MockNetworkOfferingDaoImpl.java",
                "patch": "@@ -101,28 +101,28 @@ public NetworkOfferingVO findById(Long id) {\n         if (id.longValue() == 1) {\n             //network offering valid for vpc\n             vo = new NetworkOfferingVO(\"vpc\", \"vpc\", TrafficType.Guest, false, true, null, null, false,\n-                    Availability.Optional, null, Network.GuestType.Isolated, false, false, false);\n+                    Availability.Optional, null, Network.GuestType.Isolated, false, false, false, false, false);\n         } else if (id.longValue() == 2) {\n             //invalid offering - source nat is not included\n             vo = new NetworkOfferingVO(\"vpc\", \"vpc\", TrafficType.Guest, false, true, null, null, false,\n-                    Availability.Optional, null, Network.GuestType.Isolated, false, false, false);\n+                    Availability.Optional, null, Network.GuestType.Isolated, false, false, false, false, false);\n         } else if (id.longValue() == 3) {\n             //network offering invalid for vpc (conserve mode off)\n             vo = new NetworkOfferingVO(\"non vpc\", \"non vpc\", TrafficType.Guest, false, true, null, null, false,\n-                    Availability.Optional, null, Network.GuestType.Isolated, true, false, false);\n+                    Availability.Optional, null, Network.GuestType.Isolated, true, false, false, false, false);\n         } else if (id.longValue() == 4) {\n             //network offering invalid for vpc (Shared)\n             vo = new NetworkOfferingVO(\"non vpc\", \"non vpc\", TrafficType.Guest, false, true, null, null, false,\n-                    Availability.Optional, null, Network.GuestType.Shared, false, false, false);\n+                    Availability.Optional, null, Network.GuestType.Shared, false, false, false, false, false);\n         } else if (id.longValue() == 5) {\n             //network offering invalid for vpc (has redundant router)\n             vo = new NetworkOfferingVO(\"vpc\", \"vpc\", TrafficType.Guest, false, true, null, null, false,\n-                    Availability.Optional, null, Network.GuestType.Isolated, false, false, false);\n+                    Availability.Optional, null, Network.GuestType.Isolated, false, false, false, false, false);\n             vo.setRedundantRouter(true);\n         } else if (id.longValue() == 6) {\n             //network offering invalid for vpc (has lb service)   \n             vo = new NetworkOfferingVO(\"vpc\", \"vpc\", TrafficType.Guest, false, true, null, null, false,\n-                    Availability.Optional, null, Network.GuestType.Isolated, false, false, false);\n+                    Availability.Optional, null, Network.GuestType.Isolated, false, false, false, false, false);\n         }\n         \n         if (vo != null) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/test/com/cloud/vpc/dao/MockNetworkOfferingDaoImpl.java",
                "sha": "a8208dd7d9c4444f712e3b3a4f4ce1a8f3bca569",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/test/com/cloud/vpc/dao/MockNetworkServiceMapDaoImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/test/com/cloud/vpc/dao/MockNetworkServiceMapDaoImpl.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "server/test/com/cloud/vpc/dao/MockNetworkServiceMapDaoImpl.java",
                "patch": "@@ -95,4 +95,10 @@ public String isProviderForNetwork(long networkId, Provider provider) {\n         // TODO Auto-generated method stub\n         return null;\n     }\n+\n+    @Override\n+    public List<String> getProvidersForServiceInNetwork(long networkId, Service service) {\n+        // TODO Auto-generated method stub\n+        return null;\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/test/com/cloud/vpc/dao/MockNetworkServiceMapDaoImpl.java",
                "sha": "103f04ea8b90d3351c246645899da34e7b18f32b",
                "status": "modified"
            },
            {
                "additions": 292,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/test/org/apache/cloudstack/lb/ApplicationLoadBalancerTest.java",
                "changes": 292,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/test/org/apache/cloudstack/lb/ApplicationLoadBalancerTest.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "server/test/org/apache/cloudstack/lb/ApplicationLoadBalancerTest.java",
                "patch": "@@ -0,0 +1,292 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+// \n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.lb;\n+\n+import java.lang.reflect.Field;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.cloudstack.lb.dao.ApplicationLoadBalancerRuleDao;\n+import org.apache.cloudstack.network.lb.ApplicationLoadBalancerManagerImpl;\n+import org.apache.cloudstack.network.lb.ApplicationLoadBalancerRule;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import com.cloud.event.dao.UsageEventDao;\n+import com.cloud.exception.InsufficientAddressCapacityException;\n+import com.cloud.exception.InsufficientVirtualNetworkCapcityException;\n+import com.cloud.exception.InvalidParameterValueException;\n+import com.cloud.exception.NetworkRuleConflictException;\n+import com.cloud.exception.UnsupportedServiceException;\n+import com.cloud.network.Network;\n+import com.cloud.network.Network.Capability;\n+import com.cloud.network.Network.Service;\n+import com.cloud.network.NetworkModel;\n+import com.cloud.network.Networks.TrafficType;\n+import com.cloud.network.dao.FirewallRulesDao;\n+import com.cloud.network.dao.NetworkVO;\n+import com.cloud.network.lb.LoadBalancingRule;\n+import com.cloud.network.lb.LoadBalancingRulesManager;\n+import com.cloud.network.rules.FirewallRuleVO;\n+import com.cloud.network.rules.LoadBalancerContainer.Scheme;\n+import com.cloud.user.AccountManager;\n+import com.cloud.user.AccountVO;\n+import com.cloud.user.UserContext;\n+import com.cloud.user.UserVO;\n+import com.cloud.utils.component.ComponentContext;\n+import com.cloud.utils.exception.CloudRuntimeException;\n+import com.cloud.utils.net.Ip;\n+import com.cloud.utils.net.NetUtils;\n+\n+/**\n+ * This class is responsible for unittesting the methods defined in ApplicationLoadBalancerService\n+ *\n+ */\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(locations=\"classpath:/appLoadBalancer.xml\")\n+public class ApplicationLoadBalancerTest extends TestCase{\n+    //The interface to test\n+    @Inject ApplicationLoadBalancerManagerImpl _appLbSvc;\n+    \n+    //The interfaces below are mocked\n+    @Inject ApplicationLoadBalancerRuleDao _lbDao;\n+    @Inject LoadBalancingRulesManager _lbMgr;\n+    @Inject NetworkModel _ntwkModel;\n+    @Inject AccountManager _accountMgr;\n+    @Inject FirewallRulesDao _firewallDao;\n+    @Inject UsageEventDao _usageEventDao;\n+\n+    \n+    public static long existingLbId = 1L;\n+    public static long nonExistingLbId = 2L;\n+    \n+    public static long validGuestNetworkId = 1L;\n+    public static long invalidGuestNetworkId = 2L;\n+    public static long validPublicNetworkId = 3L;\n+    \n+    public static long validAccountId = 1L;\n+    public static long invalidAccountId = 2L;\n+    \n+    public String validRequestedIp = \"10.1.1.1\";\n+\n+\n+    \n+    @Before\n+    public void setUp() {\n+        ComponentContext.initComponentsLifeCycle();\n+        //mockito for .getApplicationLoadBalancer tests\n+        Mockito.when(_lbDao.findById(1L)).thenReturn(new ApplicationLoadBalancerRuleVO());\n+        Mockito.when(_lbDao.findById(2L)).thenReturn(null);\n+        \n+        //mockito for .deleteApplicationLoadBalancer tests\n+        Mockito.when(_lbMgr.deleteLoadBalancerRule(existingLbId, true)).thenReturn(true);\n+        Mockito.when(_lbMgr.deleteLoadBalancerRule(nonExistingLbId, true)).thenReturn(false);\n+        \n+        //mockito for .createApplicationLoadBalancer tests\n+        NetworkVO guestNetwork = new NetworkVO(TrafficType.Guest, null, null, 1,\n+                null, 1, 1L);\n+        setId(guestNetwork, validGuestNetworkId);\n+        guestNetwork.setCidr(\"10.1.1.1/24\");\n+        \n+        NetworkVO publicNetwork = new NetworkVO(TrafficType.Public, null, null, 1,\n+                null, 1, 1L);\n+   \n+        Mockito.when(_ntwkModel.getNetwork(validGuestNetworkId)).thenReturn(guestNetwork);\n+        Mockito.when(_ntwkModel.getNetwork(invalidGuestNetworkId)).thenReturn(null);\n+        Mockito.when(_ntwkModel.getNetwork(validPublicNetworkId)).thenReturn(publicNetwork);\n+\n+        Mockito.when(_accountMgr.getAccount(validAccountId)).thenReturn(new AccountVO());\n+        Mockito.when(_accountMgr.getAccount(invalidAccountId)).thenReturn(null);\n+        Mockito.when(_ntwkModel.areServicesSupportedInNetwork(validGuestNetworkId, Service.Lb)).thenReturn(true);\n+        Mockito.when(_ntwkModel.areServicesSupportedInNetwork(invalidGuestNetworkId, Service.Lb)).thenReturn(false);\n+        \n+        ApplicationLoadBalancerRuleVO lbRule = new ApplicationLoadBalancerRuleVO(\"new\", \"new\", 22, 22, \"roundrobin\",\n+                validGuestNetworkId, validAccountId, 1L, new Ip(validRequestedIp), validGuestNetworkId, Scheme.Internal);\n+        Mockito.when(_lbDao.persist(Mockito.any(ApplicationLoadBalancerRuleVO.class))).thenReturn(lbRule);\n+        \n+        Mockito.when(_lbMgr.validateLbRule(Mockito.any(LoadBalancingRule.class))).thenReturn(true);\n+        \n+        Mockito.when(_firewallDao.setStateToAdd(Mockito.any(FirewallRuleVO.class))).thenReturn(true);\n+        \n+        Mockito.when(_accountMgr.getSystemUser()).thenReturn(new UserVO(1));\n+        Mockito.when(_accountMgr.getSystemAccount()).thenReturn(new AccountVO(2));\n+        UserContext.registerContext(_accountMgr.getSystemUser().getId(), _accountMgr.getSystemAccount(), null, false);\n+        \n+        Mockito.when(_ntwkModel.areServicesSupportedInNetwork(Mockito.anyLong(), Mockito.any(Network.Service.class))).thenReturn(true);\n+        \n+        Map<Network.Capability, String> caps = new HashMap<Network.Capability, String>();\n+        caps.put(Capability.SupportedProtocols, NetUtils.TCP_PROTO);\n+        Mockito.when(_ntwkModel.getNetworkServiceCapabilities(Mockito.anyLong(), Mockito.any(Network.Service.class))).thenReturn(caps);\n+        \n+        \n+        Mockito.when(_lbDao.countBySourceIp(new Ip(validRequestedIp), validGuestNetworkId)).thenReturn(1L);\n+        \n+    }\n+    \n+    /**\n+     * TESTS FOR .getApplicationLoadBalancer\n+     */\n+    \n+    @Test\n+    //Positive test - retrieve existing lb\n+    public void searchForExistingLoadBalancer() {\n+        ApplicationLoadBalancerRule rule = _appLbSvc.getApplicationLoadBalancer(existingLbId);\n+        assertNotNull(\"Couldn't find existing application load balancer\", rule);\n+    }\n+    \n+    @Test\n+    //Negative test - try to retrieve non-existing lb\n+    public void searchForNonExistingLoadBalancer() {\n+        boolean notFound = false;\n+        ApplicationLoadBalancerRule rule = null;\n+        try {\n+            rule = _appLbSvc.getApplicationLoadBalancer(nonExistingLbId);\n+            if (rule != null) {\n+                notFound = false; \n+            }\n+        } catch (InvalidParameterValueException ex) {\n+            notFound = true;\n+        }\n+        \n+        assertTrue(\"Found non-existing load balancer; no invalid parameter value exception was thrown\", notFound);\n+    }\n+    \n+    /**\n+     * TESTS FOR .deleteApplicationLoadBalancer\n+     */\n+    \n+    \n+    @Test\n+    //Positive test - delete existing lb\n+    public void deleteExistingLoadBalancer() {\n+        boolean result = false; \n+        try {\n+            result = _appLbSvc.deleteApplicationLoadBalancer(existingLbId);\n+        } finally {\n+            assertTrue(\"Couldn't delete existing application load balancer\", result);   \n+        }\n+    }\n+    \n+    \n+    @Test\n+    //Negative test - try to delete non-existing lb\n+    public void deleteNonExistingLoadBalancer() {\n+        boolean result = true;\n+        try {\n+            result = _appLbSvc.deleteApplicationLoadBalancer(nonExistingLbId);\n+        } finally {\n+            assertFalse(\"Didn't fail when try to delete non-existing load balancer\", result);\n+        }\n+    }\n+    \n+    /**\n+     * TESTS FOR .createApplicationLoadBalancer\n+     * @throws NetworkRuleConflictException \n+     * @throws InsufficientVirtualNetworkCapcityException \n+     * @throws InsufficientAddressCapacityException \n+     */\n+    \n+    @Test (expected = CloudRuntimeException.class)\n+    //Positive test\n+    public void createValidLoadBalancer() throws InsufficientAddressCapacityException,\n+        InsufficientVirtualNetworkCapcityException, NetworkRuleConflictException {    \n+        _appLbSvc.createApplicationLoadBalancer(\"alena\", \"alena\", Scheme.Internal, validGuestNetworkId, validRequestedIp,\n+                            22, 22, \"roundrobin\", validGuestNetworkId, validAccountId); \n+    }\n+    \n+    \n+    @Test(expected = UnsupportedServiceException.class)\n+    //Negative test - only internal scheme value is supported in the current release\n+    public void createPublicLoadBalancer() throws InsufficientAddressCapacityException,\n+    InsufficientVirtualNetworkCapcityException, NetworkRuleConflictException {\n+        _appLbSvc.createApplicationLoadBalancer(\"alena\", \"alena\", Scheme.Public, validGuestNetworkId, validRequestedIp,\n+                            22, 22, \"roundrobin\", validGuestNetworkId, validAccountId);\n+    }\n+    \n+    \n+    @Test(expected = InvalidParameterValueException.class)\n+    //Negative test - invalid SourcePort\n+    public void createWithInvalidSourcePort() throws InsufficientAddressCapacityException,\n+        InsufficientVirtualNetworkCapcityException, NetworkRuleConflictException {        \n+        _appLbSvc.createApplicationLoadBalancer(\"alena\", \"alena\", Scheme.Internal, validGuestNetworkId, validRequestedIp,\n+                    65536, 22, \"roundrobin\", validGuestNetworkId, validAccountId);\n+    }\n+    \n+    @Test(expected = InvalidParameterValueException.class)\n+    //Negative test - invalid instancePort\n+    public void createWithInvalidInstandePort() throws InsufficientAddressCapacityException,\n+        InsufficientVirtualNetworkCapcityException, NetworkRuleConflictException {\n+        _appLbSvc.createApplicationLoadBalancer(\"alena\", \"alena\", Scheme.Internal, validGuestNetworkId, validRequestedIp,\n+                22, 65536, \"roundrobin\", validGuestNetworkId, validAccountId);\n+        \n+    }\n+    \n+    \n+    @Test(expected = InvalidParameterValueException.class)\n+    //Negative test - invalid algorithm\n+    public void createWithInvalidAlgorithm() throws InsufficientAddressCapacityException, InsufficientVirtualNetworkCapcityException, NetworkRuleConflictException {\n+        String expectedExcText = null;\n+        _appLbSvc.createApplicationLoadBalancer(\"alena\", \"alena\", Scheme.Internal, validGuestNetworkId, validRequestedIp,\n+                22, 22, \"invalidalgorithm\", validGuestNetworkId, validAccountId);\n+        \n+    }\n+    \n+    @Test(expected = InvalidParameterValueException.class)\n+    //Negative test - invalid sourceNetworkId (of Public type, which is not supported)\n+    public void createWithInvalidSourceIpNtwk() throws InsufficientAddressCapacityException,\n+        InsufficientVirtualNetworkCapcityException, NetworkRuleConflictException {\n+        _appLbSvc.createApplicationLoadBalancer(\"alena\", \"alena\", Scheme.Internal, validPublicNetworkId, validRequestedIp,\n+                22, 22, \"roundrobin\", validGuestNetworkId, validAccountId);\n+        \n+    }\n+    \n+    \n+    @Test(expected = InvalidParameterValueException.class)\n+    //Negative test - invalid requested IP (outside of guest network cidr range)\n+    public void createWithInvalidRequestedIp() throws InsufficientAddressCapacityException,\n+        InsufficientVirtualNetworkCapcityException, NetworkRuleConflictException {\n+       \n+        _appLbSvc.createApplicationLoadBalancer(\"alena\", \"alena\", Scheme.Internal, validGuestNetworkId, \"10.2.1.1\",\n+                    22, 22, \"roundrobin\", validGuestNetworkId, validAccountId);\n+    }\n+    \n+    \n+    private static NetworkVO setId(NetworkVO vo, long id) {\n+        NetworkVO voToReturn = vo;\n+        Class<?> c = voToReturn.getClass();\n+        try {\n+            Field f = c.getDeclaredField(\"id\");\n+            f.setAccessible(true);\n+            f.setLong(voToReturn, id);\n+        } catch (NoSuchFieldException ex) {\n+           return null;\n+        } catch (IllegalAccessException ex) {\n+            return null;\n+        }\n+        \n+        return voToReturn;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/test/org/apache/cloudstack/lb/ApplicationLoadBalancerTest.java",
                "sha": "461cbbdf0127210c64b1897cfae09189d537666e",
                "status": "added"
            },
            {
                "additions": 103,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/test/org/apache/cloudstack/lb/ChildTestConfiguration.java",
                "changes": 103,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/test/org/apache/cloudstack/lb/ChildTestConfiguration.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "server/test/org/apache/cloudstack/lb/ChildTestConfiguration.java",
                "patch": "@@ -0,0 +1,103 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+// \n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.lb;\n+\n+import java.io.IOException;\n+\n+import org.apache.cloudstack.lb.dao.ApplicationLoadBalancerRuleDao;\n+import org.apache.cloudstack.test.utils.SpringUtils;\n+import org.mockito.Mockito;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.ComponentScan.Filter;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.FilterType;\n+import org.springframework.core.type.classreading.MetadataReader;\n+import org.springframework.core.type.classreading.MetadataReaderFactory;\n+import org.springframework.core.type.filter.TypeFilter;\n+\n+import com.cloud.dc.dao.AccountVlanMapDaoImpl;\n+import com.cloud.event.dao.UsageEventDao;\n+import com.cloud.network.NetworkManager;\n+import com.cloud.network.NetworkModel;\n+import com.cloud.network.dao.FirewallRulesDao;\n+import com.cloud.network.lb.LoadBalancingRulesManager;\n+import com.cloud.tags.dao.ResourceTagDao;\n+import com.cloud.user.AccountManager;\n+\n+@Configuration\n+@ComponentScan(\n+    basePackageClasses={\n+        AccountVlanMapDaoImpl.class\n+    },\n+    includeFilters={@Filter(value=ChildTestConfiguration.Library.class, type=FilterType.CUSTOM)},\n+    useDefaultFilters=false\n+    )\n+\n+    public class ChildTestConfiguration {\n+        \n+        public static class Library implements TypeFilter {\n+            \n+            @Bean\n+            public ApplicationLoadBalancerRuleDao applicationLoadBalancerDao() {\n+                return Mockito.mock(ApplicationLoadBalancerRuleDao.class);\n+            }\n+            \n+            @Bean\n+            public NetworkModel networkModel() {\n+                return Mockito.mock(NetworkModel.class);\n+            }\n+            \n+            @Bean\n+            public AccountManager accountManager() {\n+                return Mockito.mock(AccountManager.class);\n+            }\n+            \n+            @Bean\n+            public LoadBalancingRulesManager loadBalancingRulesManager() {\n+                return Mockito.mock(LoadBalancingRulesManager.class);\n+            }\n+            \n+            @Bean\n+            public FirewallRulesDao firewallRulesDao() {\n+                return Mockito.mock(FirewallRulesDao.class);\n+            }\n+            \n+            @Bean\n+            public ResourceTagDao resourceTagDao() {\n+                return Mockito.mock(ResourceTagDao.class);\n+            }\n+            \n+            @Bean\n+            public NetworkManager networkManager() {\n+                return Mockito.mock(NetworkManager.class);\n+            }\n+            \n+            @Bean\n+            public UsageEventDao UsageEventDao() {\n+                return Mockito.mock(UsageEventDao.class);\n+            }\n+            \n+            @Override\n+            public boolean match(MetadataReader mdr, MetadataReaderFactory arg1) throws IOException {\n+                mdr.getClassMetadata().getClassName();\n+                ComponentScan cs = ChildTestConfiguration.class.getAnnotation(ComponentScan.class);\n+                return SpringUtils.includedInBasePackageClasses(mdr.getClassMetadata().getClassName(), cs);\n+            }\n+    \n+        }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/test/org/apache/cloudstack/lb/ChildTestConfiguration.java",
                "sha": "918de81c0c5f0b42b22a99aee98aaae565206cc6",
                "status": "added"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/test/org/apache/cloudstack/networkoffering/CreateNetworkOfferingTest.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/test/org/apache/cloudstack/networkoffering/CreateNetworkOfferingTest.java?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 10,
                "filename": "server/test/org/apache/cloudstack/networkoffering/CreateNetworkOfferingTest.java",
                "patch": "@@ -84,6 +84,7 @@ public void setUp() {\n         Mockito.when(configDao.findByName(Mockito.anyString())).thenReturn(configVO);\n         \n         Mockito.when(offDao.persist(Mockito.any(NetworkOfferingVO.class))).thenReturn(new NetworkOfferingVO());\n+        Mockito.when(offDao.persist(Mockito.any(NetworkOfferingVO.class), Mockito.anyMap())).thenReturn(new NetworkOfferingVO());\n         Mockito.when(mapDao.persist(Mockito.any(NetworkOfferingServiceMapVO.class))).thenReturn(new NetworkOfferingServiceMapVO());\n         Mockito.when(accountMgr.getSystemUser()).thenReturn(new UserVO(1));\n         Mockito.when(accountMgr.getSystemAccount()).thenReturn(new AccountVO(2));\n@@ -96,7 +97,7 @@ public void setUp() {\n     public void createSharedNtwkOffWithVlan() {\n         NetworkOfferingVO off = configMgr.createNetworkOffering(\"shared\", \"shared\", TrafficType.Guest, null, true,\n                 Availability.Optional, 200, null, false, Network.GuestType.Shared, false,\n-                null, false, null, true, false);\n+                null, false, null, true, false, null);\n         assertNotNull(\"Shared network offering with specifyVlan=true failed to create \", off);\n     }\n     \n@@ -105,7 +106,7 @@ public void createSharedNtwkOffWithNoVlan() {\n         try {\n             NetworkOfferingVO off = configMgr.createNetworkOffering(\"shared\", \"shared\", TrafficType.Guest, null, false,\n                     Availability.Optional, 200, null, false, Network.GuestType.Shared, false,\n-                    null, false, null, true, false);\n+                    null, false, null, true, false, null);\n             assertNull(\"Shared network offering with specifyVlan=false was created\", off);\n         } catch (InvalidParameterValueException ex) {\n         }\n@@ -115,7 +116,7 @@ public void createSharedNtwkOffWithNoVlan() {\n     public void createSharedNtwkOffWithSpecifyIpRanges() {\n         NetworkOfferingVO off = configMgr.createNetworkOffering(\"shared\", \"shared\", TrafficType.Guest, null, true,\n                 Availability.Optional, 200, null, false, Network.GuestType.Shared, false,\n-                null, false, null, true, false);\n+                null, false, null, true, false, null);\n         \n         assertNotNull(\"Shared network offering with specifyIpRanges=true failed to create \", off);\n     }\n@@ -125,7 +126,7 @@ public void createSharedNtwkOffWithoutSpecifyIpRanges() {\n         try {\n             NetworkOfferingVO off = configMgr.createNetworkOffering(\"shared\", \"shared\", TrafficType.Guest, null, true,\n                     Availability.Optional, 200, null, false, Network.GuestType.Shared, false,\n-                    null, false, null, false, false);\n+                    null, false, null, false, false, null);\n             assertNull(\"Shared network offering with specifyIpRanges=false was created\", off);\n         } catch (InvalidParameterValueException ex) {\n         }\n@@ -140,7 +141,7 @@ public void createIsolatedNtwkOffWithNoVlan() {\n         serviceProviderMap.put(Network.Service.SourceNat, vrProvider);\n         NetworkOfferingVO off = configMgr.createNetworkOffering(\"isolated\", \"isolated\", TrafficType.Guest, null, false,\n                 Availability.Optional, 200, serviceProviderMap, false, Network.GuestType.Isolated, false,\n-                null, false, null, false, false);\n+                null, false, null, false, false, null);\n         \n         assertNotNull(\"Isolated network offering with specifyIpRanges=false failed to create \", off);\n     }\n@@ -153,7 +154,7 @@ public void createIsolatedNtwkOffWithVlan() {\n         serviceProviderMap.put(Network.Service.SourceNat, vrProvider);\n         NetworkOfferingVO off = configMgr.createNetworkOffering(\"isolated\", \"isolated\", TrafficType.Guest, null, true,\n                 Availability.Optional, 200, serviceProviderMap, false, Network.GuestType.Isolated, false,\n-                null, false, null, false, false);\n+                null, false, null, false, false, null);\n         assertNotNull(\"Isolated network offering with specifyVlan=true wasn't created\", off);\n        \n     }\n@@ -167,7 +168,7 @@ public void createIsolatedNtwkOffWithSpecifyIpRangesAndSourceNat() {\n             serviceProviderMap.put(Network.Service.SourceNat, vrProvider);\n             NetworkOfferingVO off = configMgr.createNetworkOffering(\"isolated\", \"isolated\", TrafficType.Guest, null, false,\n                     Availability.Optional, 200, serviceProviderMap, false, Network.GuestType.Isolated, false,\n-                    null, false, null, true, false);\n+                    null, false, null, true, false, null);\n             assertNull(\"Isolated network offering with specifyIpRanges=true and source nat service enabled, was created\", off);\n         } catch (InvalidParameterValueException ex) {\n         }\n@@ -180,7 +181,7 @@ public void createIsolatedNtwkOffWithSpecifyIpRangesAndNoSourceNat() {\n         Set<Network.Provider> vrProvider = new HashSet<Network.Provider>();\n         NetworkOfferingVO off = configMgr.createNetworkOffering(\"isolated\", \"isolated\", TrafficType.Guest, null, false,\n                 Availability.Optional, 200, serviceProviderMap, false, Network.GuestType.Isolated, false,\n-                null, false, null, true, false);\n+                null, false, null, true, false, null);\n         assertNotNull(\"Isolated network offering with specifyIpRanges=true and with no sourceNatService, failed to create\", off);\n         \n     }\n@@ -198,7 +199,7 @@ public void createVpcNtwkOff() {\n         serviceProviderMap.put(Network.Service.Lb , vrProvider);\n         NetworkOfferingVO off = configMgr.createNetworkOffering(\"isolated\", \"isolated\", TrafficType.Guest, null, true,\n                 Availability.Optional, 200, serviceProviderMap, false, Network.GuestType.Isolated, false,\n-                null, false, null, false, false);\n+                null, false, null, false, false, null);\n         // System.out.println(\"Creating Vpc Network Offering\");\n         assertNotNull(\"Vpc Isolated network offering with Vpc provider \", off);\n     }\n@@ -218,7 +219,7 @@ public void createVpcNtwkOffWithNetscaler() {\n         serviceProviderMap.put(Network.Service.Lb, lbProvider);\n         NetworkOfferingVO off = configMgr.createNetworkOffering(\"isolated\", \"isolated\", TrafficType.Guest, null, true,\n                 Availability.Optional, 200, serviceProviderMap, false, Network.GuestType.Isolated, false, null, false,\n-                null, false, false);\n+                null, false, false, null);\n         // System.out.println(\"Creating Vpc Network Offering\");\n         assertNotNull(\"Vpc Isolated network offering with Vpc and Netscaler provider \", off);\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/test/org/apache/cloudstack/networkoffering/CreateNetworkOfferingTest.java",
                "sha": "92aa2a2c8ff7d1060a45afd46948c7956c9ccb6d",
                "status": "modified"
            },
            {
                "additions": 43,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/server/test/resources/appLoadBalancer.xml",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/test/resources/appLoadBalancer.xml?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "server/test/resources/appLoadBalancer.xml",
                "patch": "@@ -0,0 +1,43 @@\n+<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor \n+  license agreements. See the NOTICE file distributed with this work for additional \n+  information regarding copyright ownership. The ASF licenses this file to \n+  you under the Apache License, Version 2.0 (the \"License\"); you may not use \n+  this file except in compliance with the License. You may obtain a copy of \n+  the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required \n+  by applicable law or agreed to in writing, software distributed under the \n+  License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS \n+  OF ANY KIND, either express or implied. See the License for the specific \n+  language governing permissions and limitations under the License. -->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\"\n+  xmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n+  xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+                      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n+                      http://www.springframework.org/schema/tx \n+                      http://www.springframework.org/schema/tx/spring-tx-3.0.xsd\n+                      http://www.springframework.org/schema/aop\n+                      http://www.springframework.org/schema/aop/spring-aop-3.0.xsd\n+                      http://www.springframework.org/schema/context\n+                      http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n+\n+     <context:annotation-config />\n+\n+    <!-- @DB support -->\n+      \n+  <bean id=\"componentContext\" class=\"com.cloud.utils.component.ComponentContext\" />\n+\n+  <bean id=\"transactionContextBuilder\" class=\"com.cloud.utils.db.TransactionContextBuilder\" />\n+  <bean id=\"actionEventInterceptor\" class=\"com.cloud.event.ActionEventInterceptor\" />\n+  <bean id=\"instantiatePostProcessor\" class=\"com.cloud.utils.component.ComponentInstantiationPostProcessor\">\n+    <property name=\"Interceptors\">\n+        <list>\n+            <ref bean=\"transactionContextBuilder\" />\n+        </list>\n+    </property> </bean> \n+    <bean id=\"ApplicationLoadBalancerManager\" class=\"org.apache.cloudstack.network.lb.ApplicationLoadBalancerManagerImpl\">\n+        <property name=\"name\" value=\"ApplicationLoadBalancerManager\"/>\n+    </bean>\n+  \n+    <bean class=\"org.apache.cloudstack.lb.ChildTestConfiguration\" />\n+    \n+</beans>",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/server/test/resources/appLoadBalancer.xml",
                "sha": "d7c1502a715427f5fb3df730f8821afb74b27e05",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/setup/db/db/schema-40to410.sql",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/setup/db/db/schema-40to410.sql?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 1,
                "filename": "setup/db/db/schema-40to410.sql",
                "patch": "@@ -644,6 +644,7 @@ CREATE VIEW `cloud`.`domain_router_view` AS\n         data_center.id data_center_id,\n         data_center.uuid data_center_uuid,\n         data_center.name data_center_name,\n+        data_center.networktype data_center_type,\n         data_center.dns1 dns1,\n         data_center.dns2 dns2,\n         data_center.ip6_dns1 ip6_dns1,\n@@ -684,7 +685,8 @@ CREATE VIEW `cloud`.`domain_router_view` AS\n         domain_router.scripts_version scripts_version,\n         domain_router.is_redundant_router is_redundant_router,\n         domain_router.redundant_state redundant_state,\n-        domain_router.stop_pending stop_pending\n+        domain_router.stop_pending stop_pending,\n+        domain_router.role role\n     from\n         `cloud`.`domain_router`\n             inner join",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/setup/db/db/schema-40to410.sql",
                "sha": "b7b1c7a91dd1f30fd7c707f84c510118a7621f84",
                "status": "modified"
            },
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/setup/db/db/schema-410to420.sql",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/setup/db/db/schema-410to420.sql?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 5,
                "filename": "setup/db/db/schema-410to420.sql",
                "patch": "@@ -339,7 +339,7 @@ CREATE TABLE `cloud`.`vm_snapshots` (\n ALTER TABLE `cloud`.`hypervisor_capabilities` ADD COLUMN `vm_snapshot_enabled` tinyint(1) DEFAULT 0 NOT NULL COMMENT 'Whether VM snapshot is supported by hypervisor';\n UPDATE `cloud`.`hypervisor_capabilities` SET `vm_snapshot_enabled`=1 WHERE `hypervisor_type` in ('VMware', 'XenServer');\n \n-\t\t\t\n+      \n DROP VIEW IF EXISTS `cloud`.`user_vm_view`;\n CREATE VIEW `cloud`.`user_vm_view` AS\n     select \n@@ -450,7 +450,7 @@ CREATE VIEW `cloud`.`user_vm_view` AS\n         async_job.uuid job_uuid,\n         async_job.job_status job_status,\n         async_job.account_id job_account_id,\n-\t\taffinity_group.id affinity_group_id,\n+    affinity_group.id affinity_group_id,\n         affinity_group.uuid affinity_group_uuid,\n         affinity_group.name affinity_group_name,\n         affinity_group.description affinity_group_description\n@@ -515,7 +515,7 @@ CREATE VIEW `cloud`.`user_vm_view` AS\n             and async_job.job_status = 0\n             left join\n         `cloud`.`affinity_group_vm_map` ON vm_instance.id = affinity_group_vm_map.instance_id\n-\t\t\tleft join\n+      left join\n         `cloud`.`affinity_group` ON affinity_group_vm_map.affinity_group_id = affinity_group.id;\n \n DROP VIEW IF EXISTS `cloud`.`affinity_group_view`;\n@@ -844,7 +844,8 @@ CREATE VIEW `cloud`.`domain_router_view` AS\n         domain_router.scripts_version scripts_version,\n         domain_router.is_redundant_router is_redundant_router,\n         domain_router.redundant_state redundant_state,\n-        domain_router.stop_pending stop_pending\n+        domain_router.stop_pending stop_pending,\n+        domain_router.role role\n     from\n         `cloud`.`domain_router`\n             inner join\n@@ -919,7 +920,7 @@ CREATE TABLE `cloud`.`network_asa1000v_map` (\n ALTER TABLE `cloud`.`network_offerings` ADD COLUMN `eip_associate_public_ip` int(1) unsigned NOT NULL DEFAULT 0 COMMENT 'true if public IP is associated with user VM creation by default when EIP service is enabled.' AFTER `elastic_ip_service`;\n \n -- Re-enable foreign key checking, at the end of the upgrade path\n-SET foreign_key_checks = 1;\t\t\t\n+SET foreign_key_checks = 1;     \n \n \n -- Add \"default\" field to account/user tables\n@@ -1116,6 +1117,40 @@ CREATE VIEW `cloud`.`account_view` AS\n             and async_job.job_status = 0;\n \n \n+\n+ALTER TABLE `cloud`.`load_balancing_rules` ADD COLUMN `source_ip_address` varchar(40) COMMENT 'source ip address for the load balancer rule';\n+ALTER TABLE `cloud`.`load_balancing_rules` ADD COLUMN `source_ip_address_network_id` bigint unsigned COMMENT 'the id of the network where source ip belongs to';\n+ALTER TABLE `cloud`.`load_balancing_rules` ADD COLUMN `scheme` varchar(40) NOT NULL COMMENT 'load balancer scheme; can be Internal or Public';\n+UPDATE `cloud`.`load_balancing_rules` SET `scheme`='Public';\n+\n+\n+\n+-- Add details talbe for the network offering\n+CREATE TABLE `cloud`.`network_offering_details` (\n+  `id` bigint unsigned NOT NULL auto_increment,\n+  `network_offering_id` bigint unsigned NOT NULL COMMENT 'network offering id',\n+  `name` varchar(255) NOT NULL,\n+  `value` varchar(1024) NOT NULL,\n+  PRIMARY KEY (`id`),\n+  CONSTRAINT `fk_network_offering_details__network_offering_id` FOREIGN KEY `fk_network_offering_details__network_offering_id`(`network_offering_id`) REFERENCES `network_offerings`(`id`) ON DELETE CASCADE\n+) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n+\n+-- Change the constraint for the network service map table. Now we support multiple provider for the same service\n+ALTER TABLE `cloud`.`ntwk_service_map` DROP FOREIGN KEY `fk_ntwk_service_map__network_id`;\n+ALTER TABLE `cloud`.`ntwk_service_map` DROP INDEX `network_id`;\n+\n+ALTER TABLE `cloud`.`ntwk_service_map` ADD UNIQUE `network_id` (`network_id`,`service`,`provider`);\n+ALTER TABLE `cloud`.`ntwk_service_map` ADD  CONSTRAINT `fk_ntwk_service_map__network_id` FOREIGN KEY (`network_id`) REFERENCES `networks` (`id`) ON DELETE CASCADE;\n+\n+\n+ALTER TABLE `cloud`.`network_offerings` ADD COLUMN `internal_lb` int(1) unsigned NOT NULL DEFAULT '0' COMMENT 'true if the network offering supports Internal lb service';\n+ALTER TABLE `cloud`.`network_offerings` ADD COLUMN `public_lb` int(1) unsigned NOT NULL DEFAULT '0' COMMENT 'true if the network offering supports Public lb service';\n+UPDATE `cloud`.`network_offerings` SET public_lb=1 where id IN (SELECT DISTINCT network_offering_id FROM `cloud`.`ntwk_offering_service_map` WHERE service='Lb');\n+\n+\n+INSERT IGNORE INTO `cloud`.`configuration` VALUES ('Advanced', 'DEFAULT', 'NetworkManager', 'internallbvm.service.offering', null, 'Uuid of the service offering used by internal lb vm; if NULL - default system internal lb offering will be used');\n+\n+\n alter table `cloud_usage`.`usage_network_offering` add column nic_id bigint(20) unsigned NOT NULL;\n ALTER TABLE `cloud`.`data_center_details` MODIFY value varchar(1024);\n ALTER TABLE `cloud`.`cluster_details` MODIFY value varchar(255);",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/setup/db/db/schema-410to420.sql",
                "sha": "065b35ca5012b771301c6cfb3adbb7254d5fd386",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/setup/dev/advanced.cfg",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/setup/dev/advanced.cfg?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "setup/dev/advanced.cfg",
                "patch": "@@ -45,6 +45,10 @@\n                         {\n                             \"broadcastdomainrange\": \"ZONE\",\n                             \"name\": \"VpcVirtualRouter\"\n+                        },\n+                        {\n+                            \"broadcastdomainrange\": \"ZONE\",\n+                            \"name\": \"InternalLbVm\"\n                         }\n                     ],\n                     \"isolationmethods\": [",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/setup/dev/advanced.cfg",
                "sha": "83357866ca7939e0e0f14e29084d79a1ea4bd0fa",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/test/integration/component/test_multiple_ip_ranges.py",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/test/integration/component/test_multiple_ip_ranges.py?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "test/integration/component/test_multiple_ip_ranges.py",
                "patch": "@@ -369,6 +369,7 @@ def test_05_add_overlapped_ip_range(self):\n         self.fail(\"CS should not accept overlapped ip ranges in guest traffic, but it allowed\")\n         return\n \n+\n     @attr(tags=[\"advanced_sg\", \"sg\"])\n     def test_06_add_ip_range_overlapped_with_two_ranges(self):\n         \"\"\"Test adding overlapped ip range in existing cidr",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/test/integration/component/test_multiple_ip_ranges.py",
                "sha": "7e9e712aef0d8d55f694cd93eca7f740aca290d7",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/test/integration/smoke/test_guest_vlan_range.py",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/test/integration/smoke/test_guest_vlan_range.py?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "test/integration/smoke/test_guest_vlan_range.py",
                "patch": "@@ -44,6 +44,7 @@ def __init__(self):\n                                     \"password\": \"password\",\n                          },\n                         \"name\": \"testphysicalnetwork\",\n+\n                         \"vlan\": \"2118-2120\",\n                     }\n \n@@ -149,6 +150,19 @@ def test_dedicateGuestVlanRange(self):\n                         )\n \n         self.debug(\"Releasing guest vlan range\");\n+<<<<<<< HEAD\n+        dedicated_guest_vlan_response.release(self.apiclient)\n+        list_dedicated_guest_vlan_range_response = PhysicalNetwork.listDedicated(\n+                                                self.apiclient,\n+                                                id=dedicate_guest_vlan_range_response.id\n+                                        )\n+        dedicated_guest_vlan_response = list_dedicated_guest_vlan_range_response[0]\n+        self.assertEqual(\n+                            dedicated_guest_vlan_response.account,\n+                            \"system\",\n+                            \"Check account name is system account in listDedicatedGuestVlanRanges\"\n+                        )\n+=======\n         dedicate_guest_vlan_range_response.release(self.apiclient)\n         list_dedicated_guest_vlan_range_response = PhysicalNetwork.listDedicated(self.apiclient)\n         self.assertEqual(\n@@ -157,4 +171,5 @@ def test_dedicateGuestVlanRange(self):\n                         \"Check vlan range is not available in listDedicatedGuestVlanRanges\"\n \n                         )                    \n+>>>>>>> master\n         ",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/test/integration/smoke/test_guest_vlan_range.py",
                "sha": "704fe59bfffb76ad325d49a7058acc9816705bed",
                "status": "modified"
            },
            {
                "additions": 250,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/test/integration/smoke/test_internal_lb.py",
                "changes": 250,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/test/integration/smoke/test_internal_lb.py?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "test/integration/smoke/test_internal_lb.py",
                "patch": "@@ -0,0 +1,250 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\"\"\" Tests for configuring Internal Load Balancing Rules.\n+\"\"\"\n+#Import Local Modules\n+from marvin.cloudstackTestCase import *\n+from marvin.cloudstackAPI import *\n+from marvin.integration.lib.utils import *\n+from marvin.integration.lib.base import *\n+from marvin.integration.lib.common import *\n+\n+\n+class TestInternalLb(cloudstackTestCase):\n+    networkOfferingId = None\n+    networkId = None\n+    vmId = None\n+    lbId = None\n+\n+    zoneId = 1\n+    serviceOfferingId = 1 \n+    templateId = 5\n+\n+\n+    serviceProviderList = [\n+        {\n+            \"provider\": \"VpcVirtualRouter\",\n+            \"service\": \"Vpn\"\n+        },\n+        {\n+            \"provider\": \"VpcVirtualRouter\",\n+            \"service\": \"UserData\"\n+        },\n+        {\n+            \"provider\": \"VpcVirtualRouter\",\n+            \"service\": \"Dhcp\"\n+        },\n+        {\n+            \"provider\": \"VpcVirtualRouter\",\n+            \"service\": \"Dns\"\n+        },\n+        {\n+            \"provider\": \"InternalLbVM\",\n+            \"service\": \"Lb\"\n+        },\n+        {\n+            \"provider\": \"VpcVirtualRouter\",\n+            \"service\": \"SourceNat\"\n+        },\n+        {\n+            \"provider\": \"VpcVirtualRouter\",\n+            \"service\": \"StaticNat\"\n+        },\n+        {\n+            \"provider\": \"VpcVirtualRouter\",\n+            \"service\": \"PortForwarding\"\n+        },\n+        {\n+            \"provider\": \"VpcVirtualRouter\",\n+            \"service\": \"NetworkACL\"\n+        }\n+    ]\n+\n+    serviceCapsList = [\n+        {\n+            \"service\": \"SourceNat\",\n+            \"capabilitytype\": \"SupportedSourceNatTypes\",\n+            \"capabilityvalue\": \"peraccount\"\n+        },\n+        {\n+            \"service\": \"Lb\",\n+            \"capabilitytype\": \"SupportedLbIsolation\",\n+            \"capabilityvalue\": \"dedicated\"\n+        },\n+        {\n+            \"service\": \"Lb\",\n+            \"capabilitytype\": \"lbSchemes\",\n+            \"capabilityvalue\": \"internal\"\n+        }\n+    ]\n+\n+    def setUp(self):\n+        self.apiClient = self.testClient.getApiClient()\n+\n+\n+    \n+    def test_internallb(self):\n+\n+        #1) Create and enable network offering with Internal Lb vm service\n+        self.createNetworkOffering()\n+        \n+        #2) Create VPC and network in it\n+        self.createNetwork()\n+      \n+        #3) Deploy a vm \n+        self.deployVm()\n+        \n+        #4) Create an Internal Load Balancer\n+        self.createInternalLoadBalancer()\n+\n+        #5) Assign the VM to the Internal Load Balancer\n+        self.assignToLoadBalancerRule()\n+\n+        #6) Remove the vm from the Interanl Load Balancer\n+        self.removeFromLoadBalancerRule()\n+\n+        #7) Delete the Load Balancer\n+        self.deleteLoadBalancer()\n+\n+\n+    def deployVm(self):\n+        deployVirtualMachineCmd = deployVirtualMachine.deployVirtualMachineCmd()\n+        deployVirtualMachineCmd.networkids = TestInternalLb.networkId\n+        deployVirtualMachineCmd.serviceofferingid = TestInternalLb.serviceOfferingId\n+        deployVirtualMachineCmd.zoneid = TestInternalLb.zoneId\n+        deployVirtualMachineCmd.templateid = TestInternalLb.templateId\n+        deployVirtualMachineCmd.hypervisor = \"XenServer\"\n+        deployVMResponse = self.apiClient.deployVirtualMachine(deployVirtualMachineCmd)\n+        TestInternalLb.vmId = deployVMResponse.id\n+\n+\n+    def createInternalLoadBalancer(self):\n+        createLoadBalancerCmd = createLoadBalancer.createLoadBalancerCmd()\n+        createLoadBalancerCmd.name = \"lb rule\"\n+        createLoadBalancerCmd.sourceport = 22\n+        createLoadBalancerCmd.instanceport = 22\n+        createLoadBalancerCmd.algorithm = \"roundrobin\"\n+        createLoadBalancerCmd.scheme = \"internal\"\n+        createLoadBalancerCmd.sourceipaddressnetworkid = TestInternalLb.networkId\n+        createLoadBalancerCmd.networkid = TestInternalLb.networkId\n+        createLoadBalancerResponse = self.apiClient.createLoadBalancer(createLoadBalancerCmd)\n+        TestInternalLb.lbId = createLoadBalancerResponse.id\n+        self.assertIsNotNone(createLoadBalancerResponse.id, \"Failed to create a load balancer\")\n+\n+\n+    def assignToLoadBalancerRule(self):\n+        assignToLoadBalancerRuleCmd = assignToLoadBalancerRule.assignToLoadBalancerRuleCmd()\n+        assignToLoadBalancerRuleCmd.id = TestInternalLb.lbId\n+        assignToLoadBalancerRuleCmd.virtualMachineIds = TestInternalLb.vmId\n+        assignToLoadBalancerRuleResponse = self.apiClient.assignToLoadBalancerRule(assignToLoadBalancerRuleCmd)\n+        self.assertTrue(assignToLoadBalancerRuleResponse.success, \"Failed to assign the vm to the load balancer\")\n+\n+\n+\n+    def removeFromLoadBalancerRule(self):\n+        removeFromLoadBalancerRuleCmd = removeFromLoadBalancerRule.removeFromLoadBalancerRuleCmd()\n+        removeFromLoadBalancerRuleCmd.id = TestInternalLb.lbId\n+        removeFromLoadBalancerRuleCmd.virtualMachineIds = TestInternalLb.vmId\n+        removeFromLoadBalancerRuleResponse = self.apiClient.removeFromLoadBalancerRule(removeFromLoadBalancerRuleCmd)\n+        self.assertTrue(removeFromLoadBalancerRuleResponse.success, \"Failed to remove the vm from the load balancer\")\n+\n+\n+\n+    #def removeInternalLoadBalancer(self):\n+    def deleteLoadBalancer(self):\n+        deleteLoadBalancerCmd = deleteLoadBalancer.deleteLoadBalancerCmd()\n+        deleteLoadBalancerCmd.id = TestInternalLb.lbId\n+        deleteLoadBalancerResponse = self.apiClient.deleteLoadBalancer(deleteLoadBalancerCmd)\n+        self.assertTrue(deleteLoadBalancerResponse.success, \"Failed to remove the load balancer\")\n+\n+\n+\n+    def createNetwork(self):\n+        createVPCCmd = createVPC.createVPCCmd()\n+        createVPCCmd.name = \"new vpc\"\n+        createVPCCmd.cidr = \"10.1.1.0/24\"\n+        createVPCCmd.displaytext = \"new vpc\"\n+        createVPCCmd.vpcofferingid = 1\n+        createVPCCmd.zoneid = self.zoneId\n+        createVPCResponse = self.apiClient.createVPC(createVPCCmd)\n+\n+\n+        createNetworkCmd = createNetwork.createNetworkCmd()\n+        createNetworkCmd.name = \"vpc network\"\n+        createNetworkCmd.displaytext = \"vpc network\"\n+        createNetworkCmd.netmask = \"255.255.255.0\"\n+        createNetworkCmd.gateway = \"10.1.1.1\"\n+        createNetworkCmd.zoneid = self.zoneId\n+        createNetworkCmd.vpcid = createVPCResponse.id\n+        createNetworkCmd.networkofferingid = TestInternalLb.networkOfferingId\n+        createNetworkResponse = self.apiClient.createNetwork(createNetworkCmd)\n+        TestInternalLb.networkId = createNetworkResponse.id\n+\n+        self.assertIsNotNone(createNetworkResponse.id, \"Network failed to create\")\n+\n+\n+    def createNetworkOffering(self):\n+            createNetworkOfferingCmd = createNetworkOffering.createNetworkOfferingCmd()\n+            createNetworkOfferingCmd.name = \"Network offering for internal lb service - \" + str(random.randrange(1,100+1))\n+            createNetworkOfferingCmd.displaytext = \"Network offering for internal lb service\"\n+            createNetworkOfferingCmd.guestiptype = \"isolated\"\n+            createNetworkOfferingCmd.traffictype = \"Guest\"\n+            createNetworkOfferingCmd.conservemode = \"false\"\n+            createNetworkOfferingCmd.supportedservices = \"Vpn,Dhcp,Dns,Lb,UserData,SourceNat,StaticNat,PortForwarding,NetworkACL\"\n+\n+\n+            createNetworkOfferingCmd.serviceproviderlist = []\n+            for item in self.serviceProviderList:\n+                createNetworkOfferingCmd.serviceproviderlist.append({\n+                                                'service': item['service'],\n+                                                'provider': item['provider']\n+                                               })\n+                \n+            createNetworkOfferingCmd.servicecapabilitylist = []\n+            for item in self.serviceCapsList:\n+                createNetworkOfferingCmd.servicecapabilitylist.append({\n+                                                'service': item['service'],\n+                                                'capabilitytype': item['capabilitytype'],\n+                                                'capabilityvalue': item['capabilityvalue']\n+                                               })\n+\n+\n+            createNetworkOfferingResponse = self.apiClient.createNetworkOffering(createNetworkOfferingCmd)\n+            TestInternalLb.networkOfferingId = createNetworkOfferingResponse.id\n+\n+            #enable network offering\n+            updateNetworkOfferingCmd = updateNetworkOffering.updateNetworkOfferingCmd()\n+            updateNetworkOfferingCmd.id = TestInternalLb.networkOfferingId\n+            updateNetworkOfferingCmd.state = \"Enabled\"\n+            updateNetworkOfferingResponse = self.apiClient.updateNetworkOffering(updateNetworkOfferingCmd)\n+\n+\n+            #list network offering to see if its enabled\n+            listNetworkOfferingsCmd = listNetworkOfferings.listNetworkOfferingsCmd()\n+            listNetworkOfferingsCmd.id = TestInternalLb.networkOfferingId\n+            listOffResponse = self.apiClient.listNetworkOfferings(listNetworkOfferingsCmd)\n+\n+            self.assertNotEqual(len(listOffResponse), 0, \"Check if the list network offerings API \\\n+                                returns a non-empty response\")\n+\n+\n+    def tearDown(self):\n+        #destroy the vm\n+        if TestInternalLb.vmId is not None:\n+            destroyVirtualMachineCmd = destroyVirtualMachine.destroyVirtualMachineCmd()\n+            destroyVirtualMachineCmd.id = TestInternalLb.vmId\n+            destroyVirtualMachineResponse = self.apiClient.destroyVirtualMachine(destroyVirtualMachineCmd)",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/test/integration/smoke/test_internal_lb.py",
                "sha": "ae64297bf1c968c3684fa906b242c38fe805a039",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/tools/apidoc/gen_toc.py",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/tools/apidoc/gen_toc.py?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "tools/apidoc/gen_toc.py",
                "patch": "@@ -140,6 +140,7 @@\n     'removeIpFromNic': 'Nic',\n     'listNics':'Nic',\n \t'AffinityGroup': 'Affinity Group',\n+    'InternalLoadBalancer': 'Internal LB',\n     }\n \n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/tools/apidoc/gen_toc.py",
                "sha": "bd8c0f1668fb34a130285ec49526ced5760f738c",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/tools/marvin/marvin/deployDataCenter.py",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/tools/marvin/marvin/deployDataCenter.py?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "tools/marvin/marvin/deployDataCenter.py",
                "patch": "@@ -216,6 +216,18 @@ def configureProviders(self, phynetwrk, providers):\n                     vrconfig.id = vrprovid\n                     self.apiClient.configureVirtualRouterElement(vrconfig)\n                     self.enableProvider(pnetprovres[0].id)\n+                elif provider.name == 'InternalLbVm':\n+                    internallbprov = listInternalLoadBalancerElements.listInternalLoadBalancerElementsCmd() \n+                    internallbprov.nspid = pnetprovres[0].id\n+                    internallbresponse = self.apiClient.listInternalLoadBalancerElements(internallbprov)\n+                    internallbid = internallbresponse[0].id\n+\n+                    internallbconfig = \\\n+                            configureInternalLoadBalancerElement.configureInternalLoadBalancerElementCmd()\n+                    internallbconfig.enabled = \"true\"\n+                    internallbconfig.id = internallbid\n+                    self.apiClient.configureInternalLoadBalancerElement(internallbconfig)\n+                    self.enableProvider(pnetprovres[0].id)\n                 elif provider.name == 'SecurityGroupProvider':\n                     self.enableProvider(pnetprovres[0].id)\n             elif provider.name in ['Netscaler', 'JuniperSRX', 'F5BigIp']:",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/tools/marvin/marvin/deployDataCenter.py",
                "sha": "7059059beb1fadbae21ce36b3f0ff58401d2b2bd",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/tools/marvin/marvin/sandbox/advanced/advanced_env.py",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/tools/marvin/marvin/sandbox/advanced/advanced_env.py?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "tools/marvin/marvin/sandbox/advanced/advanced_env.py",
                "patch": "@@ -50,6 +50,9 @@ def describeResources(config):\n     \n     vpcprovider = provider()\n     vpcprovider.name = 'VpcVirtualRouter'\n+\n+    lbprovider = provider()\n+    lbprovider.name = 'InternalLbVm'\n     \n     pn = physical_network()\n     pn.name = \"Sandbox-pnet\"\n@@ -60,6 +63,7 @@ def describeResources(config):\n             traffictype(\"Public\", {\"simulator\":\"cloud-simulator-public\"})]\n     pn.isolationmethods = [\"VLAN\"]\n     pn.providers.append(vpcprovider)\n+    pn.providers.append(lbprovider)\n \n     pn2 = physical_network()\n     pn2.name = \"Sandbox-pnet2\"\n@@ -68,6 +72,7 @@ def describeResources(config):\n     pn2.traffictypes = [traffictype('Guest', {'simulator': 'cloud-simulator-guest'})]\n     pn2.isolationmethods = [\"VLAN\"]\n     pn2.providers.append(vpcprovider)\n+    pn2.providers.append(lbprovider)\n     \n     z.physical_networks.append(pn)\n     z.physical_networks.append(pn2)",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/tools/marvin/marvin/sandbox/advanced/advanced_env.py",
                "sha": "6343293aa6291262d783a66e190dd03400da1e0d",
                "status": "modified"
            },
            {
                "additions": 209,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/tools/marvin/marvin/sandbox/advanced/sandbox.cfg",
                "changes": 209,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/tools/marvin/marvin/sandbox/advanced/sandbox.cfg?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "tools/marvin/marvin/sandbox/advanced/sandbox.cfg",
                "patch": "@@ -0,0 +1,209 @@\n+{\n+    \"zones\": [\n+        {\n+            \"name\": \"Sandbox-Simulator\", \n+            \"guestcidraddress\": \"10.1.1.0/24\", \n+            \"dns1\": \"10.147.28.6\", \n+            \"physical_networks\": [\n+                {\n+                    \"providers\": [\n+                        {\n+                            \"broadcastdomainrange\": \"ZONE\", \n+                            \"name\": \"VirtualRouter\"\n+                        }, \n+                        {\n+                            \"broadcastdomainrange\": \"ZONE\", \n+                            \"name\": \"VpcVirtualRouter\"\n+                        }, \n+                        {\n+                            \"broadcastdomainrange\": \"ZONE\", \n+                            \"name\": \"InternalLb\"\n+                        }\n+                    ], \n+                    \"name\": \"Sandbox-pnet\", \n+                    \"tags\": [\n+                        \"cloud-simulator-public\"\n+                    ], \n+                    \"broadcastdomainrange\": \"Zone\", \n+                    \"vlan\": \"675-679\", \n+                    \"traffictypes\": [\n+                        {\n+                            \"typ\": \"Guest\"\n+                        }, \n+                        {\n+                            \"typ\": \"Management\", \n+                            \"simulator\": \"cloud-simulator-mgmt\"\n+                        }, \n+                        {\n+                            \"typ\": \"Public\", \n+                            \"simulator\": \"cloud-simulator-public\"\n+                        }\n+                    ], \n+                    \"isolationmethods\": [\n+                        \"VLAN\"\n+                    ]\n+                }, \n+                {\n+                    \"providers\": [\n+                        {\n+                            \"broadcastdomainrange\": \"ZONE\", \n+                            \"name\": \"VirtualRouter\"\n+                        }, \n+                        {\n+                            \"broadcastdomainrange\": \"ZONE\", \n+                            \"name\": \"VpcVirtualRouter\"\n+                        }, \n+                        {\n+                            \"broadcastdomainrange\": \"ZONE\", \n+                            \"name\": \"InternalLb\"\n+                        }\n+                    ], \n+                    \"name\": \"Sandbox-pnet2\", \n+                    \"tags\": [\n+                        \"cloud-simulator-guest\"\n+                    ], \n+                    \"broadcastdomainrange\": \"Zone\", \n+                    \"vlan\": \"800-1000\", \n+                    \"traffictypes\": [\n+                        {\n+                            \"typ\": \"Guest\", \n+                            \"simulator\": \"cloud-simulator-guest\"\n+                        }\n+                    ], \n+                    \"isolationmethods\": [\n+                        \"VLAN\"\n+                    ]\n+                }\n+            ], \n+            \"securitygroupenabled\": \"false\", \n+            \"ipranges\": [\n+                {\n+                    \"startip\": \"10.147.31.150\", \n+                    \"endip\": \"10.147.31.159\", \n+                    \"netmask\": \"255.255.255.0\", \n+                    \"vlan\": \"31\", \n+                    \"gateway\": \"10.147.31.1\"\n+                }\n+            ], \n+            \"networktype\": \"Advanced\", \n+            \"pods\": [\n+                {\n+                    \"endip\": \"10.147.29.159\", \n+                    \"name\": \"POD0\", \n+                    \"startip\": \"10.147.29.150\", \n+                    \"netmask\": \"255.255.255.0\", \n+                    \"clusters\": [\n+                        {\n+                            \"clustername\": \"C0\", \n+                            \"hypervisor\": \"Simulator\", \n+                            \"hosts\": [\n+                                {\n+                                    \"username\": \"root\", \n+                                    \"url\": \"http://simulator0\", \n+                                    \"password\": \"password\"\n+                                }\n+                            ], \n+                            \"clustertype\": \"CloudManaged\", \n+                            \"primaryStorages\": [\n+                                {\n+                                    \"url\": \"nfs://10.147.28.6:/export/home/sandbox/primary\", \n+                                    \"name\": \"PS0\"\n+                                }\n+                            ]\n+                        }\n+                    ], \n+                    \"gateway\": \"10.147.29.1\"\n+                }\n+            ], \n+            \"internaldns1\": \"10.147.28.6\", \n+            \"secondaryStorages\": [\n+                {\n+                    \"url\": \"nfs://10.147.28.6:/export/home/sandbox/sstor\"\n+                }\n+            ]\n+        }\n+    ], \n+    \"dbSvr\": {\n+        \"dbSvr\": \"localhost\", \n+        \"passwd\": \"cloud\", \n+        \"db\": \"cloud\", \n+        \"port\": 3306, \n+        \"user\": \"cloud\"\n+    }, \n+    \"logger\": [\n+        {\n+            \"name\": \"TestClient\", \n+            \"file\": \"testclient.log\"\n+        }, \n+        {\n+            \"name\": \"TestCase\", \n+            \"file\": \"testcase.log\"\n+        }\n+    ], \n+    \"globalConfig\": [\n+        {\n+            \"name\": \"storage.cleanup.interval\", \n+            \"value\": \"300\"\n+        }, \n+        {\n+            \"name\": \"direct.agent.load.size\", \n+            \"value\": \"1000\"\n+        }, \n+        {\n+            \"name\": \"default.page.size\", \n+            \"value\": \"10000\"\n+        }, \n+        {\n+            \"name\": \"instance.name\", \n+            \"value\": \"QA\"\n+        }, \n+        {\n+            \"name\": \"workers\", \n+            \"value\": \"10\"\n+        }, \n+        {\n+            \"name\": \"vm.op.wait.interval\", \n+            \"value\": \"5\"\n+        }, \n+        {\n+            \"name\": \"account.cleanup.interval\", \n+            \"value\": \"600\"\n+        }, \n+        {\n+            \"name\": \"guest.domain.suffix\", \n+            \"value\": \"sandbox.simulator\"\n+        }, \n+        {\n+            \"name\": \"expunge.delay\", \n+            \"value\": \"60\"\n+        }, \n+        {\n+            \"name\": \"vm.allocation.algorithm\", \n+            \"value\": \"random\"\n+        }, \n+        {\n+            \"name\": \"expunge.interval\", \n+            \"value\": \"60\"\n+        }, \n+        {\n+            \"name\": \"expunge.workers\", \n+            \"value\": \"3\"\n+        }, \n+        {\n+            \"name\": \"secstorage.allowed.internal.sites\", \n+            \"value\": \"10.147.28.0/24\"\n+        }, \n+        {\n+            \"name\": \"check.pod.cidrs\", \n+            \"value\": \"true\"\n+        }\n+    ], \n+    \"mgtSvr\": [\n+        {\n+            \"mgtSvrIp\": \"localhost\", \n+            \"passwd\": \"password\", \n+            \"user\": \"root\", \n+            \"port\": 8096\n+        }\n+    ]\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/tools/marvin/marvin/sandbox/advanced/sandbox.cfg",
                "sha": "01a84730dadb8ccde32d9838e13483b888a06ed7",
                "status": "added"
            },
            {
                "additions": 104,
                "blob_url": "https://github.com/apache/cloudstack/blob/2660a6b7a7f226ab757d2175222db62571813120/ui/scripts/zoneWizard.js",
                "changes": 104,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/ui/scripts/zoneWizard.js?ref=2660a6b7a7f226ab757d2175222db62571813120",
                "deletions": 0,
                "filename": "ui/scripts/zoneWizard.js",
                "patch": "@@ -2376,6 +2376,110 @@\n                             });\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t// ***** Virtual Router ***** (end) *****\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\t// ***** Internal LB ***** (begin) *****\n+\t\t\t\t\t\t\tvar internalLbProviderId;\n+\t\t\t\t\t\t\t$.ajax({\n+\t\t\t\t\t\t\t\turl: createURL(\"listNetworkServiceProviders&name=Internallbvm&physicalNetworkId=\" + thisPhysicalNetwork.id),\n+\t\t\t\t\t\t\t\tdataType: \"json\",\n+\t\t\t\t\t\t\t\tasync: false,\n+\t\t\t\t\t\t\t\tsuccess: function(json) {\n+\t\t\t\t\t\t\t\t\tvar items = json.listnetworkserviceprovidersresponse.networkserviceprovider;\n+\t\t\t\t\t\t\t\t\tif(items != null && items.length > 0) {\n+\t\t\t\t\t\t\t\t\t\tinternalLbProviderId = items[0].id;\n+\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t});\n+\t\t\t\t\t\t\tif(internalLbProviderId == null) {\n+\t\t\t\t\t\t\t\talert(\"error: listNetworkServiceProviders API doesn't return internalLb provider ID\");\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\tvar internalLbElementId;\n+\t\t\t\t\t\t\t$.ajax({\n+\t\t\t\t\t\t\t\turl: createURL(\"listInternalLoadBalancerElements&nspid=\" + internalLbProviderId),\n+\t\t\t\t\t\t\t\tdataType: \"json\",\n+\t\t\t\t\t\t\t\tasync: false,\n+\t\t\t\t\t\t\t\tsuccess: function(json) {\n+\t\t\t\t\t\t\t\t\tvar items = json.listinternalloadbalancerelementsresponse.internalloadbalancerelement;\n+\t\t\t\t\t\t\t\t\tif(items != null && items.length > 0) {\n+\t\t\t\t\t\t\t\t\t\tinternalLbElementId = items[0].id;\n+\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t});\n+\t\t\t\t\t\t\tif(internalLbElementId == null) {\n+\t\t\t\t\t\t\t\talert(\"error: listInternalLoadBalancerElements API doesn't return Internal LB Element Id\");\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t$.ajax({\n+\t\t\t\t\t\t\t\turl: createURL(\"configureInternalLoadBalancerElement&enabled=true&id=\" + internalLbElementId),\n+\t\t\t\t\t\t\t\tdataType: \"json\",\n+\t\t\t\t\t\t\t\tasync: false,\n+\t\t\t\t\t\t\t\tsuccess: function(json) {\n+\t\t\t\t\t\t\t\t\tvar jobId = json.configureinternalloadbalancerelementresponse.jobid;                                \n+\t\t\t\t\t\t\t\t\tvar enableInternalLbElementIntervalID = setInterval(function() { \t\n+\t\t\t\t\t\t\t\t\t\t$.ajax({\n+\t\t\t\t\t\t\t\t\t\t\turl: createURL(\"queryAsyncJobResult&jobId=\"+jobId),\n+\t\t\t\t\t\t\t\t\t\t\tdataType: \"json\",\n+\t\t\t\t\t\t\t\t\t\t\tsuccess: function(json) {\n+\t\t\t\t\t\t\t\t\t\t\t\tvar result = json.queryasyncjobresultresponse;\n+\t\t\t\t\t\t\t\t\t\t\t\tif (result.jobstatus == 0) {\n+\t\t\t\t\t\t\t\t\t\t\t\t\treturn; //Job has not completed\n+\t\t\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t\t\t\telse {                                        \n+\t\t\t\t\t\t\t\t\t\t\t\t\tclearInterval(enableInternalLbElementIntervalID); \n+\t\t\t\t\t\t\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\t\t\t\t\t\t\tif (result.jobstatus == 1) { //configureVirtualRouterElement succeeded\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t$.ajax({\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\turl: createURL(\"updateNetworkServiceProvider&state=Enabled&id=\" + internalLbProviderId),\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdataType: \"json\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tasync: false,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsuccess: function(json) {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar jobId = json.updatenetworkserviceproviderresponse.jobid;                                             \n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar enableInternalLbProviderIntervalID = setInterval(function() { \t\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$.ajax({\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\turl: createURL(\"queryAsyncJobResult&jobId=\"+jobId),\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdataType: \"json\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsuccess: function(json) {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar result = json.queryasyncjobresultresponse;\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (result.jobstatus == 0) {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn; //Job has not completed\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse {                                                      \n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclearInterval(enableInternalLbProviderIntervalID); \n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (result.jobstatus == 1) { //Internal LB has been enabled successfully\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//don't need to do anything here\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse if (result.jobstatus == 2) {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\talert(\"failed to enable Internal LB Provider. Error: \" + _s(result.jobresult.errortext));\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\terror: function(XMLHttpResponse) {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar errorMsg = parseXMLHttpResponse(XMLHttpResponse);\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\talert(\"failed to enable Internal LB Provider. Error: \" + errorMsg);\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});                                              \n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}, g_queryAsyncJobResultInterval); \t\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n+\t\t\t\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t\t\t\t\telse if (result.jobstatus == 2) {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\talert(\"configureVirtualRouterElement failed. Error: \" + _s(result.jobresult.errortext));\n+\t\t\t\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\terror: function(XMLHttpResponse) {\n+\t\t\t\t\t\t\t\t\t\t\t\tvar errorMsg = parseXMLHttpResponse(XMLHttpResponse);\n+\t\t\t\t\t\t\t\t\t\t\t\talert(\"configureVirtualRouterElement failed. Error: \" + errorMsg);\n+\t\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t\t});                                \n+\t\t\t\t\t\t\t\t\t}, g_queryAsyncJobResultInterval); \t\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t});\n+\t\t\t\t\t\t\t// ***** Internal LB ***** (end) *****\n+                            \n \t\t\t\t\t\t\t\t\t\t\t\t\t\tif(args.data.zone.sgEnabled != true) { //Advanced SG-disabled zone\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// ***** VPC Virtual Router ***** (begin) *****\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar vpcVirtualRouterProviderId;",
                "raw_url": "https://github.com/apache/cloudstack/raw/2660a6b7a7f226ab757d2175222db62571813120/ui/scripts/zoneWizard.js",
                "sha": "9b28c327b78c5796453d87af78bccc94b7e13e80",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-747: Internal LB between VPC tiers support\n\nSquashed commit of the following:\n\ncommit def0861d5a12202260cb6672c12d77075a0de26e\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Thu May 9 10:53:09 2013 -0700\n\n    Inernallb: added internalLbVm to the list of network elements for nonoss build\n\ncommit 56d94fc074db52ef00ace1703081a342dfb63db0\nMerge: d828c15 8f9a42e\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Thu May 9 09:51:36 2013 -0700\n\n    Merge branch 'master' into internallb1\n\n    Conflicts:\n    \tplugins/network-elements/netscaler/src/com/cloud/network/element/NetscalerElement.java\n    \tserver/src/com/cloud/network/vpc/VpcManagerImpl.java\n\ncommit d828c154fd05fbfeb9c142b27e3d26e7dd755c77\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Wed May 8 14:58:22 2013 -0700\n\n    internallb: Fixed nonoss build\n\ncommit 1b8a6986a6fd1808ba7285589f9a007b52feb7e5\nMerge: 9e74fa9 738d35a\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Wed May 8 13:20:07 2013 -0700\n\n    Merge branch 'master' into internallb1\n\n    Conflicts:\n    \tapi/src/com/cloud/async/AsyncJob.java\n    \tapi/src/com/cloud/network/NetworkModel.java\n    \tapi/src/com/cloud/network/rules/LoadBalancerContainer.java\n    \tapi/src/org/apache/cloudstack/api/BaseCmd.java\n    \tapi/src/org/apache/cloudstack/api/ResponseGenerator.java\n    \tapi/src/org/apache/cloudstack/network/lb/ApplicationLoadBalancerContainer.java\n    \tclient/tomcatconf/commands.properties.in\n    \tengine/schema/src/com/cloud/network/dao/LoadBalancerDaoImpl.java\n    \tserver/src/com/cloud/api/ApiResponseHelper.java\n    \tserver/src/com/cloud/network/NetworkManagerImpl.java\n    \tserver/src/com/cloud/network/NetworkModelImpl.java\n    \tserver/src/com/cloud/network/NetworkServiceImpl.java\n    \tserver/src/com/cloud/server/ManagementServerImpl.java\n    \tserver/test/com/cloud/network/MockNetworkModelImpl.java\n    \tserver/test/com/cloud/vpc/MockNetworkManagerImpl.java\n    \tserver/test/com/cloud/vpc/MockNetworkModelImpl.java\n    \tserver/test/resources/appLoadBalancer.xml\n    \tsetup/db/db/schema-410to420.sql\n    \ttest/integration/component/test_multiple_ip_ranges.py\n    \ttest/integration/smoke/test_guest_vlan_range.py\n    \ttools/marvin/marvin/integration/lib/base.py\n\ncommit 9e74fa94067997f0ae6d469f3564df602dd274a6\nAuthor: Prasanna Santhanam <tsp@apache.org>\nDate:   Thu May 9 00:11:40 2013 +0530\n\n    marvin changes for internallbvm provider\n\n    - changed the simulator context to load the internallb bean\n    - fixed deployDataCenter to use the additional provider by default\n    - fixed the sandbox script and the setup script for simulator checkin\n      tests\n\n    Signed-off-by: Prasanna Santhanam <tsp@apache.org>\n\ncommit 0a2d49301b170171ebe8d6646236854f488d06ba\nAuthor: Jessica Wang <jessicawang@apache.org>\nDate:   Tue May 7 15:50:41 2013 -0700\n\n    Internal LB - UI - zone wizard - advanced zone - enable internal LB element, enable internal LB provider.\n\ncommit 43e1667f90b01e2b4095009b997b3b2665087fb4\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Tue May 7 13:26:53 2013 -0700\n\n    Moved all DAOs and VOs to the cloud-engine-schema project\n\ncommit 2fd94c8bbe24da86e6bd004ee8165e08038a3e1d\nAuthor: Radhika PC <radhika.puthiyetath@citrix.com>\nDate:   Tue May 7 18:26:08 2013 +0530\n\n    CLOUDSTACK-893 api\n\ncommit 12b64d6c00940a4b5c4aa059f2c36ae7cc1b79bd\nAuthor: Prasanna Santhanam <tsp@apache.org>\nDate:   Tue May 7 17:06:15 2013 +0530\n\n    Fixing the gmaven configuration for marvin/pom.xml\n\n    For the marvin checkin test custom properties had a typo when run for\n    the *nix environment.\n\n    Signed-off-by: Prasanna Santhanam <tsp@apache.org>\n\ncommit 1e4274dd9f55a6eea7121d50e361babcafe70725\nAuthor: Prasanna Santhanam <tsp@apache.org>\nDate:   Tue May 7 15:28:43 2013 +0530\n\n    Renaming TesDedicateVlanRange -> TestDedicateVlanRange\n\n    Signed-off-by: Prasanna Santhanam <tsp@apache.org>\n\ncommit 9264ac526f854c980afb669631177c99e4bbbed7\nAuthor: Prasanna Santhanam <tsp@apache.org>\nDate:   Tue May 7 15:28:20 2013 +0530\n\n    Adding isolation method to the zone creation of marvin\n\n    Signed-off-by: Prasanna Santhanam <tsp@apache.org>\n\ncommit 3a0dc67de0285fffa7739b25286df71f92470ddf\nAuthor: Prasanna Santhanam <tsp@apache.org>\nDate:   Tue May 7 15:27:26 2013 +0530\n\n    adding ACL for dedicateGuestVlanRange set of APIs\n\n    Signed-off-by: Prasanna Santhanam <tsp@apache.org>\n\ncommit 79f6e11368d4b6227e9055bb58cce8e5b9872cfe\nAuthor: Prasanna Santhanam <tsp@apache.org>\nDate:   Tue May 7 15:26:48 2013 +0530\n\n    add debug logs when access checkers fail to find API\n\n    When the access checkers fail for api discovery, we fail silently.\n    instead record a debug message.\n\n    Signed-off-by: Prasanna Santhanam <tsp@apache.org>\n\ncommit 92cb7d3e0f3ef052104f698e005ab8dd243f9885\nAuthor: Hugo Trippaers <trippie@gmail.com>\nDate:   Tue May 7 11:44:23 2013 +0200\n\n    commit e0d8f01ecd92a1a7b74558d02a28be3b2f20a10d enabled all tests. Fix\n    AWSAPI build by removing broken tests and excluding failing tests.\n\ncommit 4a391464c7359689915c4230dfa07d728acfb752\nAuthor: Hugo Trippaers <htrippaers@schubergphilis.com>\nDate:   Tue May 7 10:57:23 2013 +0200\n\n    commit e0d8f01ecd92a1a7b74558d02a28be3b2f20a10d enabled all tests, but the tests in vmware-base are horribly broken and will not compile with the current CloudStack.\n\n    Removing the tests to fix the nonoss build and they are so broken they should be rewritten from scratch anyway.\n\ncommit 2ca03a851360c733ddacbe6a5490b6812dfc6bec\nAuthor: Prasanna Santhanam <tsp@apache.org>\nDate:   Tue May 7 13:51:34 2013 +0530\n\n    moving test data to top level dictionary\n\n    Signed-off-by: Prasanna Santhanam <tsp@apache.org>\n\ncommit ceaa4e1b0d77ccb811a7e1f56ae212034b3f4a90\nAuthor: Prasanna Santhanam <tsp@apache.org>\nDate:   Tue May 7 13:50:56 2013 +0530\n\n    Adding tracelogs to the API discovery service\n\n    Signed-off-by: Prasanna Santhanam <tsp@apache.org>\n\ncommit a3f5f01c7e78e045fdc1302ab484282b0d43e014\nAuthor: Prasanna Santhanam <tsp@apache.org>\nDate:   Tue May 7 13:50:12 2013 +0530\n\n    dedicateGuestVlanRange is admin only API\n\n    Adding ACL for the dedicateGuestVlanRange API.\n\n    Signed-off-by: Prasanna Santhanam <tsp@apache.org>\n\ncommit 1c4c80fe91c7aeec0689fa9a06ae80d2bdf1b0c0\nAuthor: Hugo Trippaers <htrippaers@schubergphilis.com>\nDate:   Tue May 7 09:58:16 2013 +0200\n\n    Recent pom switcharoo caused the client to lose the dependecy on console-proxy, which it needs to include the systemvm\n\ncommit 8103f3c386a8f57c520388ea73965a4cb7f15b91\nAuthor: Radhika PC <radhika.puthiyetath@citrix.com>\nDate:   Tue May 7 11:30:17 2013 +0530\n\n    CLOUDSTACK-893 first cut\n\ncommit 67d0411d739417aae4910251e86981e6d1340da0\nAuthor: Dave Cahill <dcahill@midokura.com>\nDate:   Fri Apr 19 17:31:44 2013 +0900\n\n    Add docs for MidoNet networking plugin [CLOUDSTACK-996]\n\n    Signed-off-by: Dave Cahill <dcahill@midokura.com>\n\ncommit c745e6d28e63ef1cacdf18a98ce47d162d260978\nAuthor: Alex Huang <alex.huang@gmail.com>\nDate:   Mon May 6 16:34:03 2013 -0700\n\n    Fixed up the simulator to run with windows paths in cygwin\n\ncommit be91c037021ad17f16b22599acbdd46062a665a8\nAuthor: Alex Huang <alex.huang@gmail.com>\nDate:   Mon May 6 10:34:22 2013 -0700\n\n    Moved over the VLAN daos\n\ncommit dcc09f8472d4c94cebae5b430b7eb983037a9935\nAuthor: Alex Huang <alex.huang@gmail.com>\nDate:   Mon May 6 06:31:47 2013 -0700\n\n    Missing file and updated .gitignore\n\ncommit e9953cd1a8b1247ce569d22ffa820f51d072c841\nAuthor: Alex Huang <alex.huang@gmail.com>\nDate:   Mon May 6 06:29:59 2013 -0700\n\n    Fixed up unit testing to use only an in class TestConfiguration\n\ncommit 67275714035ea2a55c11ee7acf1e915598670845\nAuthor: Alex Huang <alex.huang@gmail.com>\nDate:   Thu May 2 15:20:49 2013 -0700\n\n    Fixed an incorrect unit test for affinity group.  Removed some useless pom.xml.\n\ncommit d015fb352023a5d2ec07b4d66612836e0a928679\nAuthor: Alex Huang <alex.huang@gmail.com>\nDate:   Thu May 2 06:50:38 2013 -0700\n\n    Moved most of the VOs and DAOs from server package into engine-schema as well\n\ncommit 77547a58df5f529031516273015bb770717c5b88\nAuthor: Alex Huang <alex.huang@gmail.com>\nDate:   Wed May 1 15:15:57 2013 -0700\n\n    Removed files that are no longer used and further separated out the files in the core project\n\ncommit 345f3d34828a9b573971104cbb6132a777a58ed4\nAuthor: Alex Huang <alex.huang@gmail.com>\nDate:   Wed May 1 05:46:15 2013 -0700\n\n    Moved agent commands to core and out of api\n\ncommit e91ca00571ddf078150165a33cd3cbcee5564fe2\nAuthor: Alex Huang <alex.huang@gmail.com>\nDate:   Tue Apr 30 19:06:20 2013 -0700\n\n    Removed framework-api which is completely useless.  Changed framework-ipc to reference gson itself.  Move VOs into engine-schema.\n\ncommit f64564e49001ee0f52120a10665979887fd0ebd1\nAuthor: Dennis Lawler <dlawler@gmail.com>\nDate:   Mon Apr 29 15:10:09 2013 -0700\n\n    Removing filterwin2k option\n\n    Signed-off-by: Chiradeep Vittal <chiradeep@apache.org>\n\ncommit 944a7ea5d6e6728903074ec18754ce2041aaf7a3\nAuthor: Wei Zhou <w.zhou@leaseweb.com>\nDate:   Mon May 6 20:57:02 2013 +0100\n\n    CLOUDSTACK-2319: fix \"unable to add egress rules\" in SecurityGroup\n\n    Signed-off-by: Chip Childers <chip.childers@gmail.com>\n\ncommit ff7f8ba3623927b6cef2deb0069e7f839d933fd5\nAuthor: Wei Zhou <w.zhou@leaseweb.com>\nDate:   Mon May 6 20:56:06 2013 +0100\n\n    CLOUDSTACK-2322: update network.gateway to fix deployVm error on\n    SharedNetwork after ipv6 support\n\n    Signed-off-by: Chip Childers <chip.childers@gmail.com>\n\ncommit a153373c7eade440c707bfaeeb9831f8179ab51a\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Mon May 6 11:45:19 2013 -0700\n\n    CLOUDSTACK-129: added new API - listNetworkIsolationMethods - for displaying isolation methods supported by the cloudStack\n\ncommit 46f59cd49effc43ffea610cc5b7cab90f601b011\nAuthor: Prasanna Santhanam <tsp@apache.org>\nDate:   Mon May 6 20:39:36 2013 +0530\n\n    Fixed the incorrect assertion in noncontiguous_vlan test\n\n    The assertion fails if the VLAN is found in which case find returns a\n    positive number. So here the assertion should infact assert < 0 result.\n\n    Signed-off-by: Prasanna Santhanam <tsp@apache.org>\n\ncommit bd1dcc10b381b33ab5503f42075999365197168b\nAuthor: Prasanna Santhanam <tsp@apache.org>\nDate:   Mon May 6 19:53:42 2013 +0530\n\n    Affinity Groups requires multiple storage pools\n\n    Fixing the affinity group test which would fail to find the appropriate\n    storage pool to satisfy the anti-affinity group of the second VM\n\n    Signed-off-by: Prasanna Santhanam <tsp@apache.org>\n\ncommit 7f853cdb8f8074408205f38c5e63c2dce187b40b\nAuthor: Prasanna Santhanam <tsp@apache.org>\nDate:   Mon May 6 19:16:15 2013 +0530\n\n    fixing double calls to VM deploy\n\n    This fixes regression introduced in commit 2f40a90c that made duplicate\n    calls to deployVirtualMachine.\n\n    Signed-off-by: Prasanna Santhanam <tsp@apache.org>\n\ncommit 646e810fcf0f2c0c3fac02a37eb4301fd913b008\nAuthor: Prasanna Santhanam <tsp@apache.org>\nDate:   Mon May 6 18:51:53 2013 +0530\n\n    fixing wildcard imports\n\n    Signed-off-by: Prasanna Santhanam <tsp@apache.org>\n\ncommit b29b6e8525ed367cb6f481c7eb116abe1fb847a2\nAuthor: Hugo Trippaers <htrippaers@schubergphilis.com>\nDate:   Fri May 3 14:03:53 2013 +0200\n\n    BigSwitch should only respond if it is the actual provider on the network.\n\n    This fixes an NPE during the release call.\n\ncommit 6fcc9b009b5609756fd5195847557b56f9642ecd\nAuthor: Hugo Trippaers <htrippaers@schubergphilis.com>\nDate:   Thu May 2 17:38:27 2013 +0200\n\n    Prevent Nicira NVP tags from exceeding the 40 character limit.\n\ncommit d8e61a1c0a02cef67377f1fd1f638d77652edecf\nAuthor: Sanjay Tripathi <sanjay.tripathi@citrix.com>\nDate:   Thu May 2 13:45:39 2013 +0530\n\n    CLOUDSTACK-2188 : Parsing error with Download Monitor while checking the health of downloaded templates\n\n    Signed-off-by: Sateesh Chodapuneedi <sateesh@apache.org>\n\ncommit 5b6e1140f90b4625d02b9a0bb035342139c1b6f4\nAuthor: Sebastien Goasguen <runseb@gmail.com>\nDate:   Mon May 6 05:35:58 2013 -0400\n\n    CLOUDSTACK-2339: Adding libcloud example\n\ncommit 7be62d2374ef5910728627b583ac33498ad7fdce\nAuthor: Sebastien Goasguen <runseb@gmail.com>\nDate:   Mon May 6 05:35:19 2013 -0400\n\n    CLOUDSTACK-2338: Adding example of how to sign api requests in python\n\ncommit 156fd689026ca23e583fa32e5013183e13086a57\nAuthor: Talluri <Srikanteswararao.Talluri@citrix.com>\nDate:   Fri May 3 23:11:56 2013 +0530\n\n    CLOUDSTACK-2323: fix test scripts to conform with library changes\n\n    Signed-off-by: Prasanna Santhanam <tsp@apache.org>\n\ncommit 33ff5e91079b262562b17701d5266bcfd2674ffd\nAuthor: sanjeevneelarapu <sanjeev.neelarapu@citrix.com>\nDate:   Tue Apr 30 20:09:46 2013 +0530\n\n    CLOUDSTACK-702: Tests for Multiple IP Ranges\n\n    1.Deleting IP Range from the existing CIDR\n    2.Add non-contiguous guest IP range in new CIDR\n    3.Add overlapped guest IP range in existing CIDR\n\n    Signed-off-by: sanjeevneelarapu <sanjeev.neelarapu@citrix.com>\n    Signed-off-by: Prasanna Santhanam <tsp@apache.org>\n\ncommit 33059d1f66fdc7d925f6b087a97912b8bc4598d5\nAuthor: Pranav Saxena <pranav.saxena@citrix.com>\nDate:   Mon May 6 14:08:40 2013 +0530\n\n    scaleUp VM response change corresponding UI changes\n\ncommit 92e18d81060a9e766e1cfce3f41bbd6ddd6d5ff5\nAuthor: Pranav Saxena <pranav.saxena@citrix.com>\nDate:   Mon May 6 13:45:32 2013 +0530\n\n    CLOUDSTACK-2337:Resize button available for root/domain admin and normal users\n\ncommit d5cd3f7e006d688d052f7fe797180753dae989e7\nAuthor: Likitha Shetty <likitha.shetty@citrix.com>\nDate:   Wed May 1 13:47:26 2013 +0530\n\n    Dedicate guest vlan range to account\n\ncommit 12c79c8377d45df2ccec217bbcb9023840a2c064\nAuthor: Pranav Saxena <pranav.saxena@citrix.com>\nDate:   Sun May 5 12:02:32 2013 +0530\n\n    scale up virtual machine response change in the backend\n\ncommit 94bac276228fb2ede08de063e1b789d917c8425f\nAuthor: Rohit Yadav <bhaisaab@apache.org>\nDate:   Sun May 5 09:58:04 2013 +0530\n\n    appliance: Upgrade systemvm appliance from rc1 to Debian7 GA\n\n    Signed-off-by: Rohit Yadav <bhaisaab@apache.org>\n\ncommit c598bb0038750c18223115026774c56de1366696\nAuthor: Isaac Chiang <isaacchiang@gmail.com>\nDate:   Sun May 5 01:57:35 2013 +0530\n\n    CLOUDSTACK-2076:Listview widget infinte scrolling error\n\ncommit d0615ea9a1560b7330066544f5ddf4d5c2713f70\nAuthor: Pranav Saxena <pranav.saxena@citrix.com>\nDate:   Sun May 5 01:15:14 2013 +0530\n\n    CLOUDSTACK-2274:Detail view loading problem when deleting a zone\n\ncommit 733b513c3ac10dadf33f187d29651494197678b4\nAuthor: Isaac Chiang <isaacchiang@gmail.com>\nDate:   Sat May 4 13:41:02 2013 +0530\n\n    CLOUDSTACK-2160:Refresh button functionality for security groups and statistics tab\n\ncommit 418d75d7a4dd4f9785846e3ecbe9f0135d751fe3\nAuthor: Marcus Sorensen <marcus@betterservers.com>\nDate:   Fri May 3 14:09:52 2013 -0600\n\n    Summary: Release old DHCP entries\n\n    Detail: Refresh dnsmasq with updated entries live, no outage\n\n    BUG-ID: CLOUDSTACK-2299\n    Submitted-by: Dennis Lawler <dlawler@gmail.com>\n    Signed-off-by: Marcus Sorensen <marcus@betterservers.com> 1367611792 -0600\n\ncommit b3dce6457739c0f737ed8f2f61ad108bfee13eba\nAuthor: Kelven Yang <kelveny@gmail.com>\nDate:   Tue May 7 10:57:19 2013 -0700\n\n    fix unitest\n\ncommit b17885f0f68affe060a95e3f264b9ac5e3a98a4b\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Tue May 7 09:55:47 2013 -0700\n\n    InternalLb: some fixes to the unittest\n\ncommit 1cff609347eed3fb3a5e2e3a76b2f36404ea0b81\nMerge: 053e184 a3a5c13\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Fri May 3 11:23:08 2013 -0700\n\n    Merge branch 'master' into internallb1\n\n    Conflicts:\n    \tserver/src/com/cloud/network/NetworkModelImpl.java\n    \tserver/src/com/cloud/network/NetworkServiceImpl.java\n    \tserver/src/com/cloud/server/ManagementServerImpl.java\n    \tserver/test/com/cloud/network/MockNetworkManagerImpl.java\n    \tserver/test/com/cloud/vpc/MockNetworkManagerImpl.java\n\ncommit 053e18454d105e9785768123259bacc48383bcea\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Fri May 3 11:07:07 2013 -0700\n\n    InternalLB: marvin integration test for internal lb feature\n\ncommit 2e8e2f98f59eecfc37a2645bd353de7f592d8149\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Wed May 1 13:53:20 2013 -0700\n\n    InternalLB: don't allow to upgrade the network from the network offering with internal LB to the offering with public LB, and vice versa\n\ncommit c773d204c8e3b4715b3466f732bdff3100f58cfe\nAuthor: Chiradeep Vittal <chiradeep@apache.org>\nDate:   Wed May 1 13:21:52 2013 -0700\n\n    Internal LB: if we detect that we are inside an internal lb vm, call out to the ilb script to perform LB configuration\n\n    Signed-off-by: Chiradeep Vittal <chiradeep@apache.org>\n\ncommit 8c8845bf77f1258e54998f509df6163df82ce24e\nMerge: 7e95545 471ca30\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Wed May 1 10:14:06 2013 -0700\n\n    Merge branch 'master' into internallb1\n\ncommit 7e9554596f3d0e1d68ada880c2c17c01a526b0f5\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Wed May 1 10:01:16 2013 -0700\n\n    InternalLb: boot args parameters cleanup for the internal lb vm\n\ncommit b7cf8700749893abcac1d3a3d20ec32c4cb5d37f\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Tue Apr 30 10:31:28 2013 -0700\n\n    InternalLb: more unittests for internal lb element\n\ncommit 63bb98ebe2fa8279138f8b32aa4264b547726224\nAuthor: Chiradeep Vittal <chiradeep@apache.org>\nDate:   Mon Apr 29 18:29:25 2013 -0700\n\n    allow ssh on eth1\n\n    Signed-off-by: Chiradeep Vittal <chiradeep@apache.org>\n\ncommit ca1c313c2901a2ce1e7e6e3ce3a566bbf4c817b4\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Mon Apr 29 17:58:45 2013 -0700\n\n    InternalLb: DB upgrade - update existing physical networks with InternalLbVm provider\n\ncommit ed50caa01c12320c4fa5ff7d4e0818840a6c764d\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Mon Apr 29 17:48:36 2013 -0700\n\n    InternalLbVM: handle the scenario when sourceIpAddress is not passed when create internal Lb rule\n\ncommit 4c22c911a9ca5d7e05e9eaf0e971cbe56345fa52\nAuthor: Chiradeep Vittal <chiradeep@apache.org>\nDate:   Mon Apr 29 15:56:00 2013 -0700\n\n    backend support for Internal LB\n\n    Signed-off-by: Chiradeep Vittal <chiradeep@apache.org>\n\ncommit 7b24a7640c53e5b5ab4493de309b43714f4646c6\nMerge: 440e848 a0dbf89\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Mon Apr 29 15:49:48 2013 -0700\n\n    Merge branch 'master' into internallb1\n\n    Conflicts:\n    \tserver/src/com/cloud/api/ApiResponseHelper.java\n    \tserver/src/com/cloud/api/query/QueryManagerImpl.java\n    \tserver/src/com/cloud/configuration/ConfigurationManagerImpl.java\n    \tserver/src/com/cloud/network/NetworkManagerImpl.java\n    \tserver/src/com/cloud/network/firewall/FirewallManagerImpl.java\n    \tsetup/db/db/schema-410to420.sql\n\ncommit 440e8484d66e3e0366b6d61f930fa13a07d0ce5f\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Mon Apr 29 13:27:06 2013 -0700\n\n    InternalLB: unittests for InternalLoadBalancerVMManager\n\ncommit 63babe4b7e8baa1027ac66a7d0b505caafc36d5e\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Fri Apr 26 13:44:01 2013 -0700\n\n    InternalLb:\n\n    1) Added unittests for InternalLoadBalancerVMService\n    2) Added unittests for InternalLoadBalancerElementService\n\ncommit 4f9c47ce54915f9c9eb8042936f3a1b19553399d\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Thu Apr 25 14:46:42 2013 -0700\n\n    InternalLb: create internal lb vm specific service offering\n\ncommit 408ee59d1fe64ce5d6a5e57b76e25cc505fda5dc\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Wed Apr 24 17:08:08 2013 -0700\n\n    Internallb: new set of Web services APIs for managing Internal LB VMs\n\ncommit 7680e1cc10b4e48be78668b31ba1af44d1528a67\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Wed Apr 24 17:08:08 2013 -0700\n\n    Internallb:\n\n    1) InternalLb and PublicLb can't be enabled on the same network offering\n    2) Can have internalLb only on VPC tier\n\ncommit d73ca7ef73ce8f16cd355e48a96c0fc35b037fed\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Wed Apr 24 13:02:32 2013 -0700\n\n    InternalLb:\n    1) fixed the bug when the guest nic on internal lb vm wasnt set to be default\n    2) Don't send the rules to the internal lb vm if its in Stopped state\n\ncommit ca2fc30655eace01857181ac50789a6632f51d29\nMerge: 8057567 04a2b2d\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Tue Apr 23 16:56:11 2013 -0700\n\n    Merge branch 'master' into internallb1\n\n    Conflicts:\n    \tserver/src/com/cloud/network/vpc/VpcManagerImpl.java\n    \tserver/src/com/cloud/server/ManagementServerImpl.java\n    \tsetup/db/db/schema-410to420.sql\n\ncommit 8057567aaab5000b2f6d3aec8ace65631092adc1\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Tue Apr 23 13:15:36 2013 -0700\n\n    Internallb: more unittests for ApplicationLoadBalancerService\n\ncommit 35c0273b857073a7018fb1a59a33f43f6f112a9c\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Fri Apr 19 16:17:45 2013 -0700\n\n    InternalLb: unittests for ApplicationLoadBalancerService\n\ncommit 69b23f700348a56f97bc2118166799332a47b3a5\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Thu Apr 18 14:01:10 2013 -0700\n\n    InternalLb: create/configure/listInternalLoadBalancerElement - fixes to the API response\n\ncommit a3321ce617eab795288ab75357345d45794db93d\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Thu Apr 18 13:31:16 2013 -0700\n\n    Internal LB : renamed the classes responsible for managing internal lb elements. Now the names are InternalLoadBalancerVMManager, InternalLoadBalancerVMService and InternalLoadBalancerVMManagerImpl\n\ncommit 2baf7c365c4847ae49cd90ee25d4e3d7d346464d\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Thu Apr 18 10:02:17 2013 -0700\n\n    Internallb: verify requested IP for LB rule (if specified) against guest network cidr\n\ncommit 0cfe96bd00a79ccb9ddebed760c6dde257599074\nMerge: 501f2ff 11162f5\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Wed Apr 17 15:41:51 2013 -0700\n\n    Merge branch 'master' into internallb1\n\n    Conflicts:\n    \tapi/src/com/cloud/network/IpAddress.java\n    \tserver/src/com/cloud/network/NetworkServiceImpl.java\n    \tsetup/db/db/schema-410to420.sql\n\ncommit 501f2ffa0b07e80c17e4d6f7a73721d034c8e46a\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Tue Apr 16 17:03:50 2013 -0700\n\n    InternalLb: validate source ip network as a part of LB rule creation\n\ncommit 4d9a7dfd85f010918749dfe3166d75fe4db68d90\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Tue Apr 16 16:03:32 2013 -0700\n\n    InternalLB: in VPC, restrict public LB to one tier only. Internal LB can be supported on multiple tiers\n\ncommit 8689bf9eb38a416997d5ae4d326c51b57b57553e\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Tue Apr 16 15:59:56 2013 -0700\n\n    Internal LB: added internal lb vm to the list of supported providers in VPC default offering\n\ncommit b7709b89ff94a7c1eeb0e6dff0eca6220a0aed25\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Tue Apr 16 11:04:22 2013 -0700\n\n    Internal Lb: added 2 boolean fields - internal_lb and public_lb - to the network offering. Define if internal or public LB service is supported. In the current release it's either one or another; in the future releases we might support both on the same network\n\ncommit 014689e45eeaedd9b695ec20dfb2db631f433e14\nMerge: b3b16ba 90e8158\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Tue Apr 16 09:55:45 2013 -0700\n\n    Merge branch 'master' into internallb1\n\n    Conflicts:\n    \tapi/src/com/cloud/network/Network.java\n    \tplugins/network-elements/f5/src/com/cloud/network/element/F5ExternalLoadBalancerElement.java\n    \tserver/src/com/cloud/network/NetworkManagerImpl.java\n    \tserver/src/com/cloud/network/NetworkServiceImpl.java\n    \tserver/test/com/cloud/network/MockNetworkManagerImpl.java\n    \tserver/test/com/cloud/vpc/MockNetworkManagerImpl.java\n    \tsetup/db/db/schema-410to420.sql\n\ncommit b3b16bae48976c027e3439f2e0a84cfb2cb72166\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Mon Apr 15 17:00:31 2013 -0700\n\n    InternalLB: allow to specify more than one provider for the LB service when create network offering as diff providers can support internal and public LB for the same network\n\ncommit a4fc1d7d65191da6a49bce9fa0a64ce6e46ac85d\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Mon Apr 15 13:45:25 2013 -0700\n\n    Internal LB:\n\n    1) Added network_offering_details DB table and corresponding VO/DAO objects. Change createNetworkOffering web services api to accept the map of key/value pairs as details.\n    2) Allow to have multiple providers for the same service for the network to support the case when LB service can have separate providers for Internal LB and Public LB\n\ncommit 4530cebf2bef515f86fa29b3798d51e81089f92f\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Mon Apr 15 10:06:10 2013 -0700\n\n    InternalLbVm: support for start/stop Internal lb vm\n\ncommit ae69f0ae5612834b8bc911bd074cfb050c0b164c\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Fri Apr 12 17:25:02 2013 -0700\n\n    InternalLb: fixed prepare() in InternalLbElement - have to prepare nics of User vms only\n\ncommit 888a83c22111f3792850e6bb6235d30a93408d1d\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Fri Apr 12 15:58:27 2013 -0700\n\n    InternalLb: Start/deploy internal LB vms for the existing LB rules as a part of network implement\n\ncommit 3b41d5bee1ac04d3e9cf837a2be4398b7597d1a0\nMerge: bb73531 4b1a9f1\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Fri Apr 12 15:32:40 2013 -0700\n\n    Merge branch 'master' into internallb1\n\n    Conflicts:\n    \tserver/src/com/cloud/network/NetworkModelImpl.java\n    \tserver/src/com/cloud/server/ManagementServerImpl.java\n\ncommit bb73531fed72cc81012624fd3bae5ec22d23daa2\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Fri Apr 12 15:13:55 2013 -0700\n\n    Internal Lb: list internal lb vms as a part of listRouters response. Introduced new parameter - role (can be virtual_router or internal_lb_vm)\n\ncommit c113ea184b575ccae5d2be411c5bbc345473e35e\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Fri Apr 12 12:00:09 2013 -0700\n\n    Add Internal Lb Provider/Element as a part of adding a physical network\n\ncommit 78c9db79dae3bc38699050b05baae32fd02204f6\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Fri Apr 12 10:05:28 2013 -0700\n\n    InternalLbVm: destroy the internal lb vm when the last rule for the ip is being revoked\n\ncommit af6201257b28a0d9177330c8c76b0ec979725870\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Thu Apr 11 16:55:37 2013 -0700\n\n    Internal LB: fixed some bugs in internal lb vm startup process\n\ncommit 1db240c2b668e6cbbea4e09979c34d84fe54a624\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Thu Apr 11 14:23:55 2013 -0700\n\n    InternalLb: fixed searchCriteria constructor in ApplicationLoadBalancerDaoImpl\n\ncommit 3795048fcc68ef23c24d82c9064946dfc082b1b6\nMerge: f4c2b53 5f8a278\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Thu Apr 11 14:09:31 2013 -0700\n\n    Merge branch 'master' into internallb1\n\n    Conflicts:\n    \tapi/src/com/cloud/async/AsyncJob.java\n    \tapi/src/org/apache/cloudstack/api/ApiConstants.java\n    \tapi/src/org/apache/cloudstack/api/BaseCmd.java\n    \tapi/src/org/apache/cloudstack/api/ResponseGenerator.java\n    \tclient/tomcatconf/commands.properties.in\n    \tserver/src/com/cloud/api/ApiDBUtils.java\n    \tserver/src/com/cloud/api/ApiResponseHelper.java\n    \tserver/src/com/cloud/server/ManagementServerImpl.java\n    \tsetup/db/db/schema-410to420.sql\n\ncommit f4c2b53c218b2d11d510b9acc6baeb0d62042e5c\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Thu Apr 11 13:46:47 2013 -0700\n\n    InternalLB: modified InternalLbElement to start the Internal Lb vm for each ip address (if not already started)\n\ncommit 76a4b1cf81610d931d6098ca94fa509c9ba2e274\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Thu Apr 11 11:41:47 2013 -0700\n\n    InternalLB: added logic for acquiring guest ip address for the Internal LB rule\n\ncommit 915e39fbaa9a6b6898e2aa13cbf8ef60a7b9d70e\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Thu Apr 11 10:19:18 2013 -0700\n\n    Removed unused methods doing ipAllocation from GuestNetworkGuru and NetworkServiceImpl. The correct method is located in NetworkModelImpl\n\ncommit 3f2a62c7f62d23da23f65ff3842049243ef268e3\nMerge: 20beb7a a0b5ebc\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Wed Apr 10 17:16:07 2013 -0700\n\n    Merge branch 'master' into internallb1\n\ncommit 20beb7a16c1a592cd7500148ea8988fe119d34fb\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Wed Apr 10 15:28:12 2013 -0700\n\n    Internal LB: applyLoadBalancerRules - put not null check for sourceIpAddressId (can be null when Schema is not Public)\n\ncommit 87e5f5b9a6b006893ee30662fc06ea430e7b70dc\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Wed Apr 10 15:17:58 2013 -0700\n\n    Internal LB: intermediate checkin - added InternalLBAppliance manager and managerImpl\n\ncommit 53b9c0d142bd2b99dd00c17987dcf5dc54e3ef56\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Tue Apr 9 17:55:10 2013 -0700\n\n    Internal LB: added @Since to API docs for Internal LB related commands\n\ncommit 867b305ea852dcbe224645dc4e5ffb950d8db8f7\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Tue Apr 9 17:51:19 2013 -0700\n\n    Internal LB: Made InternalLbElement to extend the ip deployer as the LB service implements IPDeployerRequester\n\ncommit 7b9af2809410132db451e48b7b829bf019512a92\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Tue Apr 9 15:45:30 2013 -0700\n\n    InternalLb: new set of Web Services APIs to add InternalLB as a network element to the cloudStack (the element is packaged as an independent plugin). New APIs:\n\n    1) configureInternalLoadBalancerElement\n    2) createInternalLoadBalancerElement\n    3) listInternalLoadBalancerElements\n\ncommit 039e303d4aec5618cc3914ee1a581d2f7b926e1c\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Tue Apr 9 14:01:11 2013 -0700\n\n    InternalLB: Modified pluggable service VirtualRouterElementService to accept only VirtualRouter and VpcVirtualRouter as a VirtualRouterProvider type when add/configure elements. Other VirtualRouterProviderTypes are are taken care by elb/internal lb plugins.\n\ncommit f0018b451281bf02964dbe71d704c9a931783cae\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Tue Apr 9 12:56:42 2013 -0700\n\n    Internal LB:\n\n    1)Added InternalLoadBalancerManager and corresponding Impl\n    2)Add InternalLbVm as a default CS provider. DB upgrade is covered as well\n\ncommit e344cf250af6a67a17f082f1c646e6ef5ce9a0a7\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Mon Apr 8 16:57:47 2013 -0700\n\n    InternalLB - removed unused code from LoadBalancerDao\n\ncommit 3588f468482e43181802730ed5a059897eb85458\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Mon Apr 8 16:23:03 2013 -0700\n\n    Internal LB - added network-element plugin for internal lb service\n\ncommit 76325e61681c7e191308b27514ba69e523cf12bd\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Mon Apr 8 13:58:08 2013 -0700\n\n    Internal Lb:\n\n    1) When network has both kinds of LB rules - Public and Internal - never send them in the same set to the provider\n    2) Added extra checks on the provider side to validate if the schema - Public or Internal - is supported.\n\ncommit 56c2fe1d376c407a248fba789dd67ff36493a0ed\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Mon Apr 8 12:34:59 2013 -0700\n\n    InternalLB:\n\n    1) Added new capability for the LB service - LbSchemes. Can take 2 values - Internal and Public.\n    2) F5 and Netscaler LB providers - changes all LB related methods to accept LoadBalancingRule instead of ? extends FirewallRule.\n\ncommit 34bcb2d026e1951f7b115d71830c69e1ad5ed89a\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Mon Apr 8 12:11:11 2013 -0700\n\n    InternalLB: implemented list/delete/create web services API commands that will be used for Internal LB creation\n\ncommit 9ab31e11f7ebd431f9ebdf9d8582f5c126b14928\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Fri Apr 5 15:59:55 2013 -0700\n\n    InternalLB: change LoadBalancingRule - reference sourceIpAddress of th load balancer by its value, not DB id\n\ncommit 08f855d4e4b3888b3b4a163ce73c0e444b91e6b7\nAuthor: Alena Prokharchyk <alena.prokharchyk@citrix.com>\nDate:   Thu Apr 4 09:26:21 2013 -0700\n\n    InternalLB:\n\n    1) Added new set of Interfaces - including the new VO - for the internal load balancer\n    2) DB change - added source_ip_address/source_ip_address_network_id/scheme (Internal/Public) fields to the load_balancer table",
        "parent": "https://github.com/apache/cloudstack/commit/8f9a42e0af7424517c7853197a781c0c81addad1",
        "patched_files": [
            "Config.java",
            "NetworkManager.java",
            "LoadBalancingRulesService.java",
            "CreateVirtualRouterElementCmd.java",
            "NetworkOfferingDetailsVO.java",
            "ApiResponseHelper.java",
            "DomainRouterResponse.java",
            "MockVpcVirtualNetworkApplianceManager.java",
            "StopInternalLBVMCmd.java",
            "CreateLoadBalancerRuleCmd.java",
            "Network.java",
            "MockNetworkServiceMapDaoImpl.java",
            "ResponseGenerator.java",
            "patchsystemvm.sh",
            "lb_mgr.xml",
            "NetworkOfferingResponse.java",
            "DomainRouterJoinDaoImpl.java",
            "NicDao.java",
            "DeleteApplicationLoadBalancerCmd.java",
            "StartInternalLBVMCmd.java",
            "InternalLoadBalancerVMService.java",
            "ElementChildTestConfiguration.java",
            "NetworkOfferingDao.java",
            "LoadBalancerDaoImpl.java",
            "GuestNetworkGuru.java",
            "MockNetworkManagerImpl.java",
            "VirtualNetworkApplianceManagerImpl.java",
            "ChildTestConfiguration.java",
            "test_multiple_ip_ranges.py",
            "VirtualRouterProvider.java",
            "NetworkOfferingVO.java",
            "lb_svc.xml",
            "ConfigurationManagerImpl.java",
            "ListInternalLoadBalancerElementsCmd.java",
            "BaseCmd.java",
            "StartRouterCmd.java",
            "ApplicationLoadBalancerRule.java",
            "NetscalerElement.java",
            "ConfigurationServerImpl.java",
            "LBHealthCheckManagerImpl.java",
            "LoadBalancingRule.java",
            "VirtualMachine.java",
            "FirewallRulesDao.java",
            "NetworkVO.java",
            "ExternalLoadBalancerDeviceManagerImpl.java",
            "iptables-ilbvm",
            "NetworkManagerImpl.java",
            "NetworkOfferingDetailsDao.java",
            "applicationContext.xml.in",
            "FirewallManagerImpl.java",
            "CreateNetworkOfferingCmd.java",
            "ListApplicationLoadBalancersCmd.java",
            "zoneWizard.js",
            "ilb.sh",
            "ExternalLoadBalancerDeviceManager.java",
            "InternalLoadBalancerVMManager.java",
            "LoadBalancer.java",
            "VirtualRouter.java",
            "F5ExternalLoadBalancerElement.java",
            "ListRoutersCmd.java",
            "InternalLoadBalancerElement.java",
            "VpcManagerImpl.java",
            "FirewallRuleVO.java",
            "advanced.cfg",
            "InternalLoadBalancerElementService.java",
            "NetworkOffering.java",
            "ConfigurationManager.java",
            "test_internal_lb.py",
            "ApplicationLoadBalancerRuleDao.java",
            "ApplicationLoadBalancerRuleVO.java",
            "ExternalLoadBalancerUsageManagerImpl.java",
            "VirtualNetworkApplianceManager.java",
            "schema-40to410.sql",
            "ApplicationLoadBalancerService.java",
            "InternalLoadBalancerVMManagerImpl.java",
            "QueryService.java",
            "LoadBalancingRulesManager.java",
            "MockNetworkOfferingDaoImpl.java",
            "ManagementServerImpl.java",
            "cloud-early-config",
            "NetworkServiceImpl.java",
            "ApplicationLoadBalancerRuleResponse.java",
            "commands.properties.in",
            "NetworkServiceMapDaoImpl.java",
            "NetworkOfferingDaoImpl.java",
            "NicDaoImpl.java",
            "test_guest_vlan_range.py",
            "sandbox.cfg",
            "ApplicationLoadBalancerRuleDaoImpl.java",
            "NetworkOfferingDetailsDaoImpl.java",
            "VpcVirtualNetworkApplianceManagerImpl.java",
            "DomainRouterJoinVO.java",
            "ApiConstants.java",
            "ApplicationLoadBalancerResponse.java",
            "NetworkServiceMapDao.java",
            "componentContext.xml.in",
            "ElasticLoadBalancerElement.java",
            "ServiceOffering.java",
            "gen_toc.py",
            "advanced_env.py",
            "LoadBalancerContainer.java",
            "EventTypes.java",
            "LoadBalancerDao.java",
            "NetworkModelImpl.java",
            "InternalLoadBalancerElementResponse.java",
            "lb_element.xml",
            "CreateApplicationLoadBalancerCmd.java",
            "AsyncJob.java",
            "IPAddressVO.java",
            "StopRouterCmd.java",
            "NetworkModel.java",
            "appLoadBalancer.xml",
            "LbChildTestConfiguration.java",
            "ApplicationLoadBalancerManagerImpl.java",
            "MockConfigurationManagerImpl.java",
            "VirtualRouterElement.java",
            "ListInternalLBVMsCmd.java",
            "ConfigureInternalLoadBalancerElementCmd.java",
            "ElasticLoadBalancerManager.java",
            "nonossComponentContext.xml.in",
            "deployDataCenter.py",
            "LoadBalancerVO.java",
            "MockNetworkModelImpl.java",
            "ApplicationLoadBalancerInstanceResponse.java",
            "simulatorComponentContext.xml.in",
            "VirtualRouterProviderResponse.java",
            "ApplicationLoadBalancerContainer.java",
            "pom.xml",
            "vpc_loadbalancer.sh",
            "CreateInternalLoadBalancerElementCmd.java",
            "ApiDBUtils.java",
            "ElasticLoadBalancerManagerImpl.java",
            "schema-410to420.sql",
            "Upgrade410to420.java",
            "IpAddress.java",
            "VirtualNetworkApplianceService.java",
            "QueryManagerImpl.java",
            "LoadBalancingRulesManagerImpl.java",
            "LBHealthCheckManager.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "CreateNetworkOfferingTest.java",
            "InternalLbElementServiceTest.java",
            "NetworkManagerTest.java",
            "InternalLBVMServiceTest.java",
            "NetworkModelTest.java",
            "InternalLBVMManagerTest.java",
            "ApplicationLoadBalancerTest.java",
            "ConfigurationManagerTest.java",
            "ConfigTest.java",
            "InternalLbElementTest.java"
        ]
    },
    "cloudstack_2694ad7": {
        "bug_id": "cloudstack_2694ad7",
        "commit": "https://github.com/apache/cloudstack/commit/2694ad7bd91671629831f9feede879cb24d05d69",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/2694ad7bd91671629831f9feede879cb24d05d69/server/src/com/cloud/api/ApiServlet.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiServlet.java?ref=2694ad7bd91671629831f9feede879cb24d05d69",
                "deletions": 3,
                "filename": "server/src/com/cloud/api/ApiServlet.java",
                "patch": "@@ -201,9 +201,6 @@ void processRequestInContext(final HttpServletRequest req, final HttpServletResp\n                             } catch (final IllegalStateException ignored) {\n                             }\n                         }\n-                    } else {\n-                        auditTrailSb.insert(0, \"(userId=\" + session.getAttribute(\"userid\") + \" accountId=\" + ((Account) session.getAttribute(\"accountobj\")).getId() +\n-                                \" sessionId=\" + session.getId() + \")\");\n                     }\n                     HttpUtils.writeHttpResponse(resp, responseString, httpResponseCode, responseType);\n                     return;",
                "raw_url": "https://github.com/apache/cloudstack/raw/2694ad7bd91671629831f9feede879cb24d05d69/server/src/com/cloud/api/ApiServlet.java",
                "sha": "8dff6ebc952241a88f9cd9e99399f8f5ffab8613",
                "status": "modified"
            }
        ],
        "message": "ApiServlet: Fix NPE while inserting to auditTrail\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/a1dc9e8189ebdab3f7e8b849f1777f282a7a295b",
        "patched_files": [
            "ApiServlet.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "ApiServletTest.java"
        ]
    },
    "cloudstack_273c912": {
        "bug_id": "cloudstack_273c912",
        "commit": "https://github.com/apache/cloudstack/commit/273c912bb6d4ff5dcbe3e59a04a765a2ac8bae8a",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/cloudstack/blob/273c912bb6d4ff5dcbe3e59a04a765a2ac8bae8a/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java?ref=273c912bb6d4ff5dcbe3e59a04a765a2ac8bae8a",
                "deletions": 13,
                "filename": "plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "patch": "@@ -6526,19 +6526,21 @@ else if (objProp.getName().equals(\"summary.config.numCpu\")) {\n \n                         for(int i=0; i<values.size(); ++i) {\n                             List<PerfSampleInfo>  infos = ((PerfEntityMetric)values.get(i)).getSampleInfo();\n-                            int endMs = infos.get(infos.size()-1).getTimestamp().getSecond() * 1000 + infos.get(infos.size()-1).getTimestamp().getMillisecond();\n-                            int beginMs = infos.get(0).getTimestamp().getSecond() * 1000 + infos.get(0).getTimestamp().getMillisecond();\n-                            sampleDuration = (endMs - beginMs) /1000;\n-                            List<PerfMetricSeries> vals = ((PerfEntityMetric)values.get(i)).getValue();\n-                            for(int vi = 0; ((vals!= null) && (vi < vals.size())); ++vi){\n-                                if(vals.get(vi) instanceof PerfMetricIntSeries) {\n-                                    PerfMetricIntSeries val = (PerfMetricIntSeries)vals.get(vi);\n-                                    List<Long> perfValues = val.getValue();\n-                                    if (vals.get(vi).getId().getCounterId() == rxPerfCounterInfo.getKey()) {\n-                                        networkReadKBs = sampleDuration * perfValues.get(3); //get the average RX rate multiplied by sampled duration\n-                                    }\n-                                    if (vals.get(vi).getId().getCounterId() == txPerfCounterInfo.getKey()) {\n-                                        networkWriteKBs = sampleDuration * perfValues.get(3);//get the average TX rate multiplied by sampled duration\n+                            if (infos != null && infos.size() > 0) {\n+                                int endMs = infos.get(infos.size()-1).getTimestamp().getSecond() * 1000 + infos.get(infos.size()-1).getTimestamp().getMillisecond();\n+                                int beginMs = infos.get(0).getTimestamp().getSecond() * 1000 + infos.get(0).getTimestamp().getMillisecond();\n+                                sampleDuration = (endMs - beginMs) /1000;\n+                                List<PerfMetricSeries> vals = ((PerfEntityMetric)values.get(i)).getValue();\n+                                for(int vi = 0; ((vals!= null) && (vi < vals.size())); ++vi){\n+                                    if(vals.get(vi) instanceof PerfMetricIntSeries) {\n+                                        PerfMetricIntSeries val = (PerfMetricIntSeries)vals.get(vi);\n+                                        List<Long> perfValues = val.getValue();\n+                                        if (vals.get(vi).getId().getCounterId() == rxPerfCounterInfo.getKey()) {\n+                                            networkReadKBs = sampleDuration * perfValues.get(3); //get the average RX rate multiplied by sampled duration\n+                                        }\n+                                        if (vals.get(vi).getId().getCounterId() == txPerfCounterInfo.getKey()) {\n+                                            networkWriteKBs = sampleDuration * perfValues.get(3);//get the average TX rate multiplied by sampled duration\n+                                        }\n                                     }\n                                 }\n                             }",
                "raw_url": "https://github.com/apache/cloudstack/raw/273c912bb6d4ff5dcbe3e59a04a765a2ac8bae8a/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "sha": "69f1b74127899111534a79cb0afafcf4528e700e",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-1868. GetVmStatsCommand throws NullPointerException with VMWare.",
        "parent": "https://github.com/apache/cloudstack/commit/278ef81a8339e8dfc6ecd9dd04701d6713b9c062",
        "patched_files": [
            "VmwareResource.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VmwareResourceTest.java"
        ]
    },
    "cloudstack_28af817": {
        "bug_id": "cloudstack_28af817",
        "commit": "https://github.com/apache/cloudstack/commit/28af817fcc835c10e4a21f08e971041325ad206d",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/28af817fcc835c10e4a21f08e971041325ad206d/plugins/network-elements/midonet/pom.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/midonet/pom.xml?ref=28af817fcc835c10e4a21f08e971041325ad206d",
                "deletions": 2,
                "filename": "plugins/network-elements/midonet/pom.xml",
                "patch": "@@ -35,9 +35,9 @@\n </repositories>\n   <dependencies>\n     <dependency>\n-      <groupId>com.midokura</groupId>\n+      <groupId>org.midonet</groupId>\n       <artifactId>midonet-client</artifactId>\n-      <version>12.12.2</version>\n+      <version>1.1.0</version>\n     </dependency>\n     <dependency>\n       <groupId>org.apache.cloudstack</groupId>",
                "raw_url": "https://github.com/apache/cloudstack/raw/28af817fcc835c10e4a21f08e971041325ad206d/plugins/network-elements/midonet/pom.xml",
                "sha": "19103e0c5a03758d56def6bc11d3e5c058962fd7",
                "status": "modified"
            },
            {
                "additions": 84,
                "blob_url": "https://github.com/apache/cloudstack/blob/28af817fcc835c10e4a21f08e971041325ad206d/plugins/network-elements/midonet/src/com/cloud/network/element/MidoNetElement.java",
                "changes": 154,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/midonet/src/com/cloud/network/element/MidoNetElement.java?ref=28af817fcc835c10e4a21f08e971041325ad206d",
                "deletions": 70,
                "filename": "plugins/network-elements/midonet/src/com/cloud/network/element/MidoNetElement.java",
                "patch": "@@ -53,20 +53,21 @@\n import com.cloud.vm.VirtualMachine;\n import com.cloud.vm.VirtualMachineProfile;\n import com.cloud.vm.dao.NicDao;\n-\n-import com.midokura.midonet.client.MidonetApi;\n-import com.midokura.midonet.client.dto.DtoRule;\n-import com.midokura.midonet.client.resource.Bridge;\n-import com.midokura.midonet.client.resource.BridgePort;\n-import com.midokura.midonet.client.resource.DhcpHost;\n-import com.midokura.midonet.client.resource.DhcpSubnet;\n-import com.midokura.midonet.client.resource.Port;\n-import com.midokura.midonet.client.resource.ResourceCollection;\n-import com.midokura.midonet.client.resource.Route;\n-import com.midokura.midonet.client.resource.Router;\n-import com.midokura.midonet.client.resource.RouterPort;\n-import com.midokura.midonet.client.resource.Rule;\n-import com.midokura.midonet.client.resource.RuleChain;\n+import org.midonet.client.MidonetApi;\n+import org.midonet.client.exception.HttpInternalServerError;\n+import org.midonet.client.dto.DtoRule;\n+import org.midonet.client.dto.DtoRule.DtoRange;\n+import org.midonet.client.resource.Bridge;\n+import org.midonet.client.resource.BridgePort;\n+import org.midonet.client.resource.DhcpHost;\n+import org.midonet.client.resource.DhcpSubnet;\n+import org.midonet.client.resource.Port;\n+import org.midonet.client.resource.ResourceCollection;\n+import org.midonet.client.resource.Route;\n+import org.midonet.client.resource.Router;\n+import org.midonet.client.resource.RouterPort;\n+import org.midonet.client.resource.Rule;\n+import org.midonet.client.resource.RuleChain;\n import com.sun.jersey.core.util.MultivaluedMapImpl;\n \n import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n@@ -424,7 +425,9 @@ public boolean addDhcpEntry(Network network, NicProfile nic, VirtualMachineProfi\n             sub.subnetLength(cidrInfo.second());\n             sub.subnetPrefix(cidrInfo.first());\n             sub.defaultGateway(network.getGateway());\n-            sub.dnsServerAddr(dest.getDataCenter().getDns1());\n+            List<String> dcs = new ArrayList<String>();\n+            dcs.add(dest.getDataCenter().getDns1());\n+            sub.dnsServerAddrs(dcs);\n \n             sub.create();\n         }\n@@ -533,10 +536,8 @@ private void addMidonetStaticNAT(RuleChain preFilter, RuleChain preNat, RuleChai\n                 .nwDstAddress(floatingIp)\n                 .nwDstLength(32)\n                 .nwProto(SimpleFirewallRule.stringToProtocolNumber(\"icmp\"))\n-                .tpSrcStart(0)\n-                .tpSrcEnd(0)\n-                .tpDstStart(0)\n-                .tpDstEnd(0)\n+                .tpSrc(new DtoRange<Integer>(0,0))\n+                .tpDst(new DtoRange<Integer>(0,0))\n                 .position(2)\n                 .create();\n \n@@ -689,52 +690,56 @@ public boolean applyFWRules(Network config, List<? extends FirewallRule> rulesTo\n             }\n \n             for (FirewallRule rule : rulesToApply) {\n-                IpAddress dstIp = _networkModel.getIp(rule.getSourceIpAddressId());\n-                FirewallRuleTO ruleTO = new FirewallRuleTO(rule, null, dstIp.getAddress().addr());\n-\n-                // Convert to string representation\n-                SimpleFirewallRule fwRule = new SimpleFirewallRule(ruleTO);\n-                String[] ruleStrings = fwRule.toStringArray();\n-\n-                if (rule.getState() == FirewallRule.State.Revoke) {\n-                    // Lookup in existingRules, delete if present\n-                    for(String revokeRuleString : ruleStrings){\n-                        Rule foundRule = existingRules.get(revokeRuleString);\n-                        if(foundRule != null){\n-                            foundRule.delete();\n+                if (rule.getState() == FirewallRule.State.Revoke || rule.getState() == FirewallRule.State.Add) {\n+                    IpAddress dstIp = _networkModel.getIp(rule.getSourceIpAddressId());\n+                    FirewallRuleTO ruleTO = new FirewallRuleTO(rule, null, dstIp.getAddress().addr());\n+\n+                    // Convert to string representation\n+                    SimpleFirewallRule fwRule = new SimpleFirewallRule(ruleTO);\n+                    String[] ruleStrings = fwRule.toStringArray();\n+\n+                    if (rule.getState() == FirewallRule.State.Revoke) {\n+                        // Lookup in existingRules, delete if present\n+                        for(String revokeRuleString : ruleStrings){\n+                            Rule foundRule = existingRules.get(revokeRuleString);\n+                            if(foundRule != null){\n+                                foundRule.delete();\n+                            }\n                         }\n-                    }\n-                } else if (rule.getState() == FirewallRule.State.Add) {\n-                    // Lookup in existingRules, add if not present\n-                    for(int i = 0; i < ruleStrings.length; i++){\n-                        String ruleString = ruleStrings[i];\n-                        Rule foundRule = existingRules.get(ruleString);\n-                        if(foundRule == null){\n-                            // Get the cidr for the related entry in the Source Cidrs list\n-                            String relatedCidr = fwRule.sourceCidrs.get(i);\n-                            Pair<String,Integer> cidrParts = NetUtils.getCidr(relatedCidr);\n-\n-                            // Create rule with correct proto, cidr, ACCEPT, dst IP\n-                            Rule toApply = preFilter.addRule()\n-                                    .type(DtoRule.Jump)\n-                                    .jumpChainId(preNat.getId())\n-                                    .position(1)\n-                                    .nwSrcAddress(cidrParts.first())\n-                                    .nwSrcLength(cidrParts.second())\n-                                    .nwDstAddress(ruleTO.getSrcIp())\n-                                    .nwDstLength(32)\n-                                    .nwProto(SimpleFirewallRule.stringToProtocolNumber(rule.getProtocol()));\n+                    } else if (rule.getState() == FirewallRule.State.Add) {\n+                        // Lookup in existingRules, add if not present\n+                        for(int i = 0; i < ruleStrings.length; i++){\n+                            String ruleString = ruleStrings[i];\n+                            Rule foundRule = existingRules.get(ruleString);\n+                            if(foundRule == null){\n+                                // Get the cidr for the related entry in the Source Cidrs list\n+                                String relatedCidr = fwRule.sourceCidrs.get(i);\n+                                Pair<String,Integer> cidrParts = NetUtils.getCidr(relatedCidr);\n+\n+                                // Create rule with correct proto, cidr, ACCEPT, dst IP\n+                                Rule toApply = preFilter.addRule()\n+                                        .type(DtoRule.Jump)\n+                                        .jumpChainId(preNat.getId())\n+                                        .position(1)\n+                                        .nwSrcAddress(cidrParts.first())\n+                                        .nwSrcLength(cidrParts.second())\n+                                        .nwDstAddress(ruleTO.getSrcIp())\n+                                        .nwDstLength(32)\n+                                        .nwProto(SimpleFirewallRule.stringToProtocolNumber(rule.getProtocol()));\n+\n+                                if(rule.getProtocol().equals(\"icmp\")){\n+                                    // ICMP rules - reuse port fields\n+                                    // (-1, -1) means \"allow all ICMP\", so we don't set tpSrc / tpDst\n+                                    if(fwRule.icmpType != -1 | fwRule.icmpCode != -1){\n+                                        toApply.tpSrc(new DtoRange(fwRule.icmpType, fwRule.icmpType))\n+                                            .tpDst(new DtoRange(fwRule.icmpCode, fwRule.icmpCode));\n+                                    }\n+                                } else {\n+                                    toApply.tpDst(new DtoRange(fwRule.dstPortStart, fwRule.dstPortEnd));\n+                                }\n \n-                            if(rule.getProtocol().equals(\"icmp\")){\n-                                // ICMP rules - reuse port fields\n-                                toApply.tpSrcStart(fwRule.icmpType).tpSrcEnd(fwRule.icmpType)\n-                                    .tpDstStart(fwRule.icmpCode).tpDstEnd(fwRule.icmpCode);\n-                            } else {\n-                                toApply.tpDstStart(fwRule.dstPortStart)\n-                                        .tpDstEnd(fwRule.dstPortEnd);\n+                                toApply.create();\n                             }\n-\n-                            toApply.create();\n                         }\n                     }\n                 }\n@@ -973,8 +978,11 @@ public boolean applyPFRules(Network network, List<PortForwardingRule> rules)\n         // Rules in the preNat table\n         Map<String, Rule> existingPreNatRules = new HashMap<String, Rule>();\n         for (Rule existingRule : preNat.getRules()) {\n-            String ruleString = new SimpleFirewallRule(existingRule).toStringArray()[0];\n-            existingPreNatRules.put(ruleString, existingRule);\n+            // The \"port forwarding\" rules we're interested in are dnat rules where src / dst ports are specified\n+            if(existingRule.getType().equals(DtoRule.DNAT) && existingRule.getTpDst() != null){\n+                String ruleString = new SimpleFirewallRule(existingRule).toStringArray()[0];\n+                existingPreNatRules.put(ruleString, existingRule);\n+            }\n         }\n \n         /*\n@@ -1058,8 +1066,7 @@ public boolean applyPFRules(Network network, List<PortForwardingRule> rules)\n                             .flowAction(DtoRule.Accept)\n                             .nwDstAddress(publicIp)\n                             .nwDstLength(32)\n-                            .tpDstStart(pubPortStart)\n-                            .tpDstEnd(pubPortEnd)\n+                            .tpDst(new DtoRange(pubPortStart, pubPortEnd))\n                             .natTargets(preTargets)\n                             .nwProto(SimpleFirewallRule.stringToProtocolNumber(rule.getProtocol()))\n                             .position(1);\n@@ -1123,7 +1130,8 @@ public boolean applyPFRules(Network network, List<PortForwardingRule> rules)\n         capabilities.put(Service.Gateway, null);\n \n         // L3 Support : DHCP\n-        capabilities.put(Service.Dhcp, null);\n+        Map<Capability, String> dhcpCapabilities = new HashMap<Capability, String>();\n+        capabilities.put(Service.Dhcp, dhcpCapabilities);\n \n         // L3 Support : SourceNat\n         Map<Capability, String> sourceNatCapabilities = new HashMap<Capability, String>();\n@@ -1364,7 +1372,7 @@ protected RuleChain getOrInitEgressACLFilter(Network network) {\n         int pos = 1;\n         // If it is ARP, accept it\n         egressChain.addRule().type(DtoRule.Accept)\n-            .dlType((short)0x0806)\n+            .dlType(0x0806)\n             .position(pos++)\n             .create();\n \n@@ -1423,7 +1431,7 @@ private void connectBridgeToRouter(Network network, Bridge netBridge, Router net\n \n             // If it is ARP, accept it\n             inc.addRule().type(DtoRule.Accept)\n-                         .dlType((short)0x0806)\n+                         .dlType(0x0806)\n                          .position(pos++)\n                          .create();\n \n@@ -1487,7 +1495,13 @@ private Bridge getOrCreateNetworkBridge(long networkID, String accountUuid){\n \n             String networkUUIDStr = String.valueOf(networkID);\n \n-            netBridge = api.addBridge().tenantId(accountUuid).name(networkUUIDStr).create();\n+            s_logger.debug(\"Attempting to create guest network bridge\");\n+            try {\n+                netBridge = api.addBridge().tenantId(accountUuid).name(networkUUIDStr).create();\n+            } catch (HttpInternalServerError ex) {\n+                s_logger.warn(\"Bridge creation failed, retrying bridge get in case it now exists.\", ex);\n+                netBridge = getNetworkBridge(networkID, accountUuid);\n+            }\n         }\n         return netBridge;\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/28af817fcc835c10e4a21f08e971041325ad206d/plugins/network-elements/midonet/src/com/cloud/network/element/MidoNetElement.java",
                "sha": "20dbdeda72c5961d7a72cf78fd5dda6ce6b9b0d4",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/cloudstack/blob/28af817fcc835c10e4a21f08e971041325ad206d/plugins/network-elements/midonet/src/com/cloud/network/element/SimpleFirewallRule.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/midonet/src/com/cloud/network/element/SimpleFirewallRule.java?ref=28af817fcc835c10e4a21f08e971041325ad206d",
                "deletions": 6,
                "filename": "plugins/network-elements/midonet/src/com/cloud/network/element/SimpleFirewallRule.java",
                "patch": "@@ -21,9 +21,10 @@\n import com.cloud.agent.api.to.FirewallRuleTO;\n import com.cloud.agent.api.to.NetworkACLTO;\n import com.cloud.agent.api.to.PortForwardingRuleTO;\n-import com.midokura.midonet.client.dto.DtoRule;\n+import org.midonet.client.dto.DtoRule;\n+import org.midonet.client.resource.*;\n import com.google.common.collect.*;\n-import com.midokura.midonet.client.resource.*;\n+\n \n import java.util.*;\n // Used for translation between MidoNet firewall rules and\n@@ -147,8 +148,14 @@ public SimpleFirewallRule(Rule rule){\n         dstIp = rule.getNwDstAddress();\n \n         if(\"icmp\".equals(protocol)){\n-            icmpType = rule.getTpSrcStart();\n-            icmpCode = rule.getTpDstStart();\n+            if(rule.getTpSrc() != null && rule.getTpDst() != null){\n+                icmpType = rule.getTpSrc().start;\n+                icmpCode = rule.getTpDst().start;\n+            } else {\n+                icmpType = -1;\n+                icmpCode = -1;\n+            }\n+\n         } else {\n             /*\n              * If this is port forwarding, we want to take the start\n@@ -158,9 +165,9 @@ public SimpleFirewallRule(Rule rule){\n             if (targets != null) {\n                 dstPortStart = targets[0].portFrom;\n             } else {\n-                dstPortStart = rule.getTpDstStart();\n+                dstPortStart = rule.getTpDst().start;\n             }\n-            dstPortEnd = rule.getTpDstEnd();\n+            dstPortEnd = rule.getTpDst().end;\n         }\n \n         // cidr, protocol, dstIp, dstPortStart, dstPortEnd, icmpType, icmpCode);\n@@ -177,6 +184,7 @@ public static int stringToProtocolNumber(String protoString){\n     public int getFieldOne(){\n         if(protocol.equals(\"icmp\")){\n             return icmpType;\n+\n         } else {\n             return dstPortStart;\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/28af817fcc835c10e4a21f08e971041325ad206d/plugins/network-elements/midonet/src/com/cloud/network/element/SimpleFirewallRule.java",
                "sha": "e8d81ef1865baf3aac6e722ccc8cf0e87f1cd68a",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/28af817fcc835c10e4a21f08e971041325ad206d/plugins/network-elements/midonet/src/com/cloud/network/guru/MidoNetGuestNetworkGuru.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/midonet/src/com/cloud/network/guru/MidoNetGuestNetworkGuru.java?ref=28af817fcc835c10e4a21f08e971041325ad206d",
                "deletions": 11,
                "filename": "plugins/network-elements/midonet/src/com/cloud/network/guru/MidoNetGuestNetworkGuru.java",
                "patch": "@@ -19,8 +19,6 @@\n \n package com.cloud.network.guru;\n \n-import com.cloud.network.element.MidoNetElement;\n-import com.cloud.dc.DataCenter;\n import com.cloud.dc.DataCenter.NetworkType;\n import com.cloud.deploy.DeployDestination;\n import com.cloud.deploy.DeploymentPlan;\n@@ -33,21 +31,12 @@\n import com.cloud.user.AccountVO;\n import com.cloud.user.dao.AccountDao;\n import com.cloud.vm.*;\n-import com.midokura.midonet.client.resource.Bridge;\n-import com.cloud.utils.net.NetUtils;\n-\n-import com.cloud.network.Networks.AddressFormat;\n-import com.midokura.midonet.client.resource.BridgePort;\n import org.apache.log4j.Logger;\n import org.springframework.stereotype.Component;\n import com.cloud.network.dao.NetworkVO;\n import com.cloud.network.dao.PhysicalNetworkVO;\n \n-\n-import com.cloud.vm.Nic.ReservationStrategy;\n-\n import javax.ejb.Local;\n-import java.util.UUID;\n import javax.inject.Inject;\n \n @Component",
                "raw_url": "https://github.com/apache/cloudstack/raw/28af817fcc835c10e4a21f08e971041325ad206d/plugins/network-elements/midonet/src/com/cloud/network/guru/MidoNetGuestNetworkGuru.java",
                "sha": "2b7f4c9cdf05fac16ae7705fcbe6712953b98bdb",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/28af817fcc835c10e4a21f08e971041325ad206d/plugins/network-elements/midonet/src/com/cloud/network/resource/MidoNetVifDriver.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/midonet/src/com/cloud/network/resource/MidoNetVifDriver.java?ref=28af817fcc835c10e4a21f08e971041325ad206d",
                "deletions": 13,
                "filename": "plugins/network-elements/midonet/src/com/cloud/network/resource/MidoNetVifDriver.java",
                "patch": "@@ -21,32 +21,24 @@\n \n import com.cloud.hypervisor.kvm.resource.*;\n import com.cloud.agent.api.to.NicTO;\n-import com.cloud.agent.resource.virtualnetwork.VirtualRoutingResource;\n import com.cloud.exception.InternalErrorException;\n import com.cloud.network.Networks;\n import com.cloud.utils.NumbersUtil;\n-import com.cloud.utils.net.NetUtils;\n import com.cloud.utils.script.OutputInterpreter;\n import com.cloud.utils.script.Script;\n-import com.midokura.midonet.client.resource.Bridge;\n-import com.midokura.midonet.client.resource.Router;\n-import com.midokura.midonet.client.resource.BridgePort;\n-import com.midokura.midonet.client.resource.RouterPort;\n-import com.midokura.midonet.client.resource.Host;\n import org.apache.log4j.Logger;\n import org.libvirt.LibvirtException;\n-\n import com.sun.jersey.core.util.MultivaluedMapImpl;\n-import com.midokura.midonet.client.MidonetApi;\n-\n import javax.ws.rs.core.MultivaluedMap;\n-\n import javax.naming.ConfigurationException;\n-import javax.ws.rs.core.MultivaluedMap;\n-import java.net.URI;\n import java.util.Map;\n import java.util.UUID;\n \n+import org.midonet.client.resource.Bridge;\n+import org.midonet.client.resource.BridgePort;\n+import org.midonet.client.resource.Host;\n+import org.midonet.client.MidonetApi;\n+\n public class MidoNetVifDriver extends VifDriverBase {\n \n     private static final Logger s_logger = Logger",
                "raw_url": "https://github.com/apache/cloudstack/raw/28af817fcc835c10e4a21f08e971041325ad206d/plugins/network-elements/midonet/src/com/cloud/network/resource/MidoNetVifDriver.java",
                "sha": "9c21636fd15fee31aefdcce14bb3eccd68e26677",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/28af817fcc835c10e4a21f08e971041325ad206d/plugins/network-elements/midonet/test/com/cloud/network/element/MidoNetElementTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/midonet/test/com/cloud/network/element/MidoNetElementTest.java?ref=28af817fcc835c10e4a21f08e971041325ad206d",
                "deletions": 2,
                "filename": "plugins/network-elements/midonet/test/com/cloud/network/element/MidoNetElementTest.java",
                "patch": "@@ -24,8 +24,8 @@\n import junit.framework.TestCase;\n import static org.junit.Assert.assertEquals;\n import static org.mockito.Mockito.*;\n-import com.midokura.midonet.client.MidonetApi;\n-import com.midokura.midonet.client.resource.*;\n+import org.midonet.client.MidonetApi;\n+import org.midonet.client.resource.*;\n import com.sun.jersey.core.util.MultivaluedMapImpl;\n import com.cloud.network.*;\n import com.cloud.vm.*;",
                "raw_url": "https://github.com/apache/cloudstack/raw/28af817fcc835c10e4a21f08e971041325ad206d/plugins/network-elements/midonet/test/com/cloud/network/element/MidoNetElementTest.java",
                "sha": "ef91872828581562d15fec10a1d4d064e7a07e92",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-4466: Fix DHCP capability breaks in 4.2 for MidoNet\n\nA recent code change in NetworkManager causes NullPointerExceptions when DHCP\ncapability list is null.\n\nThe commit which made the NetworkManager change also changed the VirtualRouter\nto not use null for the capabilitylist, but didn't make this change for other\nnetwork devices, causing DHCP to fail on MidoNet.\n\nThis change also updates the MidoNet plugin to use the most recent MidoNet API.",
        "parent": "https://github.com/apache/cloudstack/commit/16a1f150eb3fd6f9633b9926a153575d34076787",
        "patched_files": [
            "pom.xml",
            "MidoNetGuestNetworkGuru.java",
            "MidoNetElement.java",
            "MidoNetVifDriver.java",
            "SimpleFirewallRule.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "MidoNetElementTest.java"
        ]
    },
    "cloudstack_2b7b837": {
        "bug_id": "cloudstack_2b7b837",
        "commit": "https://github.com/apache/cloudstack/commit/2b7b837b28f847eedf3cd7bd034dc23ba43d8a63",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/2b7b837b28f847eedf3cd7bd034dc23ba43d8a63/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=2b7b837b28f847eedf3cd7bd034dc23ba43d8a63",
                "deletions": 1,
                "filename": "engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -1843,7 +1843,7 @@ protected void migrate(VMInstanceVO vm, long srcHostId, DeployDestination dest)\n             vmSrc.addNic(nic);\n         }\n \n-        VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n+        VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm, null, _offeringDao.findById(vm.getId(), vm.getServiceOfferingId()), null, null);\n         _networkMgr.prepareNicForMigration(profile, dest);\n         volumeMgr.prepareForMigration(profile, dest);\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/2b7b837b28f847eedf3cd7bd034dc23ba43d8a63/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "0e12bcb26740c976cdb4a21845ff23ebe212cb8c",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-6099 live migration is failing for vm deployed using dynaic compute offerings with NPE",
        "parent": "https://github.com/apache/cloudstack/commit/70142c4acb84a2d2b1fe8806c159493e4a556532",
        "patched_files": [
            "VirtualMachineManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_2c3c88e": {
        "bug_id": "cloudstack_2c3c88e",
        "commit": "https://github.com/apache/cloudstack/commit/2c3c88e2092dae44de823cf52cb3e2cc787bb3a1",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/2c3c88e2092dae44de823cf52cb3e2cc787bb3a1/core/src/main/java/com/cloud/info/ConsoleProxyInfo.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/core/src/main/java/com/cloud/info/ConsoleProxyInfo.java?ref=2c3c88e2092dae44de823cf52cb3e2cc787bb3a1",
                "deletions": 9,
                "filename": "core/src/main/java/com/cloud/info/ConsoleProxyInfo.java",
                "patch": "@@ -55,18 +55,16 @@ public ConsoleProxyInfo(boolean sslEnabled, String proxyIpAddress, int port, int\n \n     private String formatProxyAddress(String consoleProxyUrlDomain, String proxyIpAddress) {\n         StringBuffer sb = new StringBuffer();\n-        // Domain in format *.example.com, proxy IP is 1.2.3.4 --> 1-2-3-4.example.com\n-        if (consoleProxyUrlDomain.startsWith(\"*\")) {\n+        if (StringUtils.isBlank(consoleProxyUrlDomain)) {\n+            // Blank config, we use the proxy IP\n+            sb.append(proxyIpAddress);\n+        } else if (consoleProxyUrlDomain.startsWith(\"*\")) {\n+            // Domain in format *.example.com, proxy IP is 1.2.3.4 --> 1-2-3-4.example.com\n             sb.append(proxyIpAddress.replaceAll(\"\\\\.\", \"-\"));\n             sb.append(consoleProxyUrlDomain.substring(1)); // skip the *\n-\n-        // Otherwise we assume a valid domain if config not blank\n-        } else if (StringUtils.isNotBlank(consoleProxyUrlDomain)) {\n-            sb.append(consoleProxyUrlDomain);\n-\n-        // Blank config, we use the proxy IP\n         } else {\n-            sb.append(proxyIpAddress);\n+            // Otherwise we assume a valid domain if config not blank\n+            sb.append(consoleProxyUrlDomain);\n         }\n         return sb.toString();\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2c3c88e2092dae44de823cf52cb3e2cc787bb3a1/core/src/main/java/com/cloud/info/ConsoleProxyInfo.java",
                "sha": "7e1be6a9cadbad623e2a745c161a4ccde22d7765",
                "status": "modified"
            }
        ],
        "message": "console-proxy: fix potential NPE condition (#3419)\n\nWhen checking if the console proxy URL domain starts with *, the code\r\ndoes not check if the provided string is null. When domain is not\r\nconfigured the IP address should be used.\r\n\r\nFixes #3164\r\n\r\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/6784cc516b76fb73b9f454c1ffaddb9a6c928a82",
        "patched_files": [
            "ConsoleProxyInfo.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "ConsoleProxyInfoTest.java"
        ]
    },
    "cloudstack_2f832fd": {
        "bug_id": "cloudstack_2f832fd",
        "commit": "https://github.com/apache/cloudstack/commit/2f832fddff4786dbc3cafd5934cf65e3c6f2db99",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/2f832fddff4786dbc3cafd5934cf65e3c6f2db99/server/src/com/cloud/user/AccountManagerImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/user/AccountManagerImpl.java?ref=2f832fddff4786dbc3cafd5934cf65e3c6f2db99",
                "deletions": 1,
                "filename": "server/src/com/cloud/user/AccountManagerImpl.java",
                "patch": "@@ -1406,7 +1406,9 @@ public boolean deleteUserAccount(long accountId) {\n         AccountVO account = _accountDao.findById(accountId);\n \n         if (account == null || account.getRemoved() != null) {\n-            s_logger.info(\"The account:\" + account.getAccountName() + \" is already removed\");\n+            if (account != null) {\n+                s_logger.info(\"The account:\" + account.getAccountName() + \" is already removed\");\n+            }\n             return true;\n         }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/2f832fddff4786dbc3cafd5934cf65e3c6f2db99/server/src/com/cloud/user/AccountManagerImpl.java",
                "sha": "75a97bc29f9a8b51fe6cf76c71613be7f1b9029f",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-7164: fix NPE",
        "parent": "https://github.com/apache/cloudstack/commit/165618ac9ac2937fbb1d7ff0da89de1abba4ccc1",
        "patched_files": [
            "AccountManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "AccountManagerImplTest.java"
        ]
    },
    "cloudstack_33a249e": {
        "bug_id": "cloudstack_33a249e",
        "commit": "https://github.com/apache/cloudstack/commit/33a249e77aeaaaecccf355938890a63d2dce18cd",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/33a249e77aeaaaecccf355938890a63d2dce18cd/plugins/user-authenticators/saml2/src/org/apache/cloudstack/api/command/GetServiceProviderMetaDataCmd.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/user-authenticators/saml2/src/org/apache/cloudstack/api/command/GetServiceProviderMetaDataCmd.java?ref=33a249e77aeaaaecccf355938890a63d2dce18cd",
                "deletions": 1,
                "filename": "plugins/user-authenticators/saml2/src/org/apache/cloudstack/api/command/GetServiceProviderMetaDataCmd.java",
                "patch": "@@ -191,7 +191,7 @@ public APIAuthenticationType getAPIType() {\n     @Override\n     public void setAuthenticators(List<PluggableAPIAuthenticator> authenticators) {\n         for (PluggableAPIAuthenticator authManager: authenticators) {\n-            if (authManager instanceof SAML2AuthManager) {\n+            if (authManager != null && authManager instanceof SAML2AuthManager) {\n                 _samlAuthManager = (SAML2AuthManager) authManager;\n             }\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/33a249e77aeaaaecccf355938890a63d2dce18cd/plugins/user-authenticators/saml2/src/org/apache/cloudstack/api/command/GetServiceProviderMetaDataCmd.java",
                "sha": "437f4a38202e5c0efbfc6f3e2e6c2bd6fc98458a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/33a249e77aeaaaecccf355938890a63d2dce18cd/plugins/user-authenticators/saml2/src/org/apache/cloudstack/api/command/SAML2LoginAPIAuthenticatorCmd.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/user-authenticators/saml2/src/org/apache/cloudstack/api/command/SAML2LoginAPIAuthenticatorCmd.java?ref=33a249e77aeaaaecccf355938890a63d2dce18cd",
                "deletions": 1,
                "filename": "plugins/user-authenticators/saml2/src/org/apache/cloudstack/api/command/SAML2LoginAPIAuthenticatorCmd.java",
                "patch": "@@ -292,7 +292,7 @@ public APIAuthenticationType getAPIType() {\n     @Override\n     public void setAuthenticators(List<PluggableAPIAuthenticator> authenticators) {\n         for (PluggableAPIAuthenticator authManager: authenticators) {\n-            if (authManager instanceof SAML2AuthManager) {\n+            if (authManager != null && authManager instanceof SAML2AuthManager) {\n                 _samlAuthManager = (SAML2AuthManager) authManager;\n             }\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/33a249e77aeaaaecccf355938890a63d2dce18cd/plugins/user-authenticators/saml2/src/org/apache/cloudstack/api/command/SAML2LoginAPIAuthenticatorCmd.java",
                "sha": "b279977577262297378554b792b16b2798491119",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/33a249e77aeaaaecccf355938890a63d2dce18cd/plugins/user-authenticators/saml2/src/org/apache/cloudstack/api/command/SAML2LogoutAPIAuthenticatorCmd.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/user-authenticators/saml2/src/org/apache/cloudstack/api/command/SAML2LogoutAPIAuthenticatorCmd.java?ref=33a249e77aeaaaecccf355938890a63d2dce18cd",
                "deletions": 1,
                "filename": "plugins/user-authenticators/saml2/src/org/apache/cloudstack/api/command/SAML2LogoutAPIAuthenticatorCmd.java",
                "patch": "@@ -158,7 +158,7 @@ public APIAuthenticationType getAPIType() {\n     @Override\n     public void setAuthenticators(List<PluggableAPIAuthenticator> authenticators) {\n         for (PluggableAPIAuthenticator authManager: authenticators) {\n-            if (authManager instanceof SAML2AuthManager) {\n+            if (authManager != null && authManager instanceof SAML2AuthManager) {\n                 _samlAuthManager = (SAML2AuthManager) authManager;\n             }\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/33a249e77aeaaaecccf355938890a63d2dce18cd/plugins/user-authenticators/saml2/src/org/apache/cloudstack/api/command/SAML2LogoutAPIAuthenticatorCmd.java",
                "sha": "cdc24e0e10a8b2a1d627b744b38f0e87d7b1e6b0",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/33a249e77aeaaaecccf355938890a63d2dce18cd/server/src/com/cloud/api/auth/APIAuthenticationManagerImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/auth/APIAuthenticationManagerImpl.java?ref=33a249e77aeaaaecccf355938890a63d2dce18cd",
                "deletions": 1,
                "filename": "server/src/com/cloud/api/auth/APIAuthenticationManagerImpl.java",
                "patch": "@@ -69,7 +69,12 @@ public boolean start() {\n         cmdList.add(DefaultLoginAPIAuthenticatorCmd.class);\n         cmdList.add(DefaultLogoutAPIAuthenticatorCmd.class);\n         for (PluggableAPIAuthenticator apiAuthenticator: _apiAuthenticators) {\n-            cmdList.addAll(apiAuthenticator.getAuthCommands());\n+            List<Class<?>> commands = apiAuthenticator.getAuthCommands();\n+            if (commands != null) {\n+                cmdList.addAll(commands);\n+            } else {\n+                s_logger.warn(\"API Authenticator returned null api commands:\" + apiAuthenticator.getName());\n+            }\n         }\n         return cmdList;\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/33a249e77aeaaaecccf355938890a63d2dce18cd/server/src/com/cloud/api/auth/APIAuthenticationManagerImpl.java",
                "sha": "fc21b1913e45ea3eb596396e87f1276e2f938338",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-7455: Fix possible case for NPE\n\nNPE can happen if Spring fails to inject api authenticator, so better check\nand set list of commands if the authenticator is not null or returning null cmds\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/550762a0dcecc04e7b40302322864ea6b52c0098",
        "patched_files": [
            "GetServiceProviderMetaDataCmd.java",
            "SAML2LogoutAPIAuthenticatorCmd.java",
            "SAML2LoginAPIAuthenticatorCmd.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "GetServiceProviderMetaDataCmdTest.java",
            "SAML2LoginAPIAuthenticatorCmdTest.java",
            "SAML2LogoutAPIAuthenticatorCmdTest.java"
        ]
    },
    "cloudstack_3c098c0": {
        "bug_id": "cloudstack_3c098c0",
        "commit": "https://github.com/apache/cloudstack/commit/3c098c08763b3fc3bb4616d012f739079c438689",
        "file": [
            {
                "additions": 47,
                "blob_url": "https://github.com/apache/cloudstack/blob/3c098c08763b3fc3bb4616d012f739079c438689/plugins/hypervisors/kvm/test/com/cloud/hypervisor/kvm/storage/KVMStorageProcessorTest.java",
                "changes": 47,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/kvm/test/com/cloud/hypervisor/kvm/storage/KVMStorageProcessorTest.java?ref=3c098c08763b3fc3bb4616d012f739079c438689",
                "deletions": 0,
                "filename": "plugins/hypervisors/kvm/test/com/cloud/hypervisor/kvm/storage/KVMStorageProcessorTest.java",
                "patch": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.cloud.hypervisor.kvm.storage;\n+\n+import com.cloud.hypervisor.kvm.resource.LibvirtComputingResource;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.naming.ConfigurationException;\n+import java.util.HashMap;\n+\n+public class KVMStorageProcessorTest {\n+    KVMStorageProcessor processor;\n+    LibvirtComputingResource resource;\n+    @Before\n+    public void setUp() throws ConfigurationException {\n+        System.setProperty(\"paths.script\", \"/devel/asf-master\");\n+        resource = new LibvirtComputingResource();\n+        resource.configure(\"testResource\", new HashMap<String, Object>());\n+    }\n+    @Test\n+    public void testCloneVolumeFromBaseTemplate() throws Exception {\n+\n+\n+    }\n+\n+    @Test\n+    public void testCopyVolumeFromImageCacheToPrimary() throws Exception {\n+\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/3c098c08763b3fc3bb4616d012f739079c438689/plugins/hypervisors/kvm/test/com/cloud/hypervisor/kvm/storage/KVMStorageProcessorTest.java",
                "sha": "f107bffaeb88115e9eb95f056b330d010a52178e",
                "status": "added"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cloudstack/blob/3c098c08763b3fc3bb4616d012f739079c438689/plugins/storage/volume/default/src/org/apache/cloudstack/storage/datastore/driver/CloudStackPrimaryDataStoreDriverImpl.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/storage/volume/default/src/org/apache/cloudstack/storage/datastore/driver/CloudStackPrimaryDataStoreDriverImpl.java?ref=3c098c08763b3fc3bb4616d012f739079c438689",
                "deletions": 1,
                "filename": "plugins/storage/volume/default/src/org/apache/cloudstack/storage/datastore/driver/CloudStackPrimaryDataStoreDriverImpl.java",
                "patch": "@@ -105,9 +105,18 @@ public ChapInfo getChapInfo(VolumeInfo volumeInfo) {\n     public void createAsync(DataStore dataStore, DataObject data, AsyncCompletionCallback<CreateCmdResult> callback) {\n         String errMsg = null;\n         Answer answer = null;\n+        CreateCmdResult result = new CreateCmdResult(null, null);\n         if (data.getType() == DataObjectType.VOLUME) {\n             try {\n                 answer = createVolume((VolumeInfo) data);\n+                if ((answer == null) || (!answer.getResult())) {\n+                    result.setSuccess(false);\n+                    if (answer != null) {\n+                        result.setResult(answer.getDetails());\n+                    }\n+                } else {\n+                    result.setAnswer(answer);\n+                }\n             } catch (StorageUnavailableException e) {\n                 s_logger.debug(\"failed to create volume\", e);\n                 errMsg = e.toString();\n@@ -116,7 +125,6 @@ public void createAsync(DataStore dataStore, DataObject data, AsyncCompletionCal\n                 errMsg = e.toString();\n             }\n         }\n-        CreateCmdResult result = new CreateCmdResult(null, answer);\n         if (errMsg != null) {\n             result.setResult(errMsg);\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/3c098c08763b3fc3bb4616d012f739079c438689/plugins/storage/volume/default/src/org/apache/cloudstack/storage/datastore/driver/CloudStackPrimaryDataStoreDriverImpl.java",
                "sha": "fd191bf12bf47fadbeec20aa4eb87de6a0534db6",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-4338: fix NPE if create volume failed",
        "parent": "https://github.com/apache/cloudstack/commit/0040c4adef4f7b92aa63737a8f2c5405a07fabda",
        "patched_files": [
            "KVMStorageProcessor.java",
            "CloudStackPrimaryDataStoreDriverImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "KVMStorageProcessorTest.java"
        ]
    },
    "cloudstack_43cf1da": {
        "bug_id": "cloudstack_43cf1da",
        "commit": "https://github.com/apache/cloudstack/commit/43cf1da865c1e4ed6523fb5b2ba315a547fac79f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/api/src/org/apache/cloudstack/api/response/VMSnapshotResponse.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/response/VMSnapshotResponse.java?ref=43cf1da865c1e4ed6523fb5b2ba315a547fac79f",
                "deletions": 1,
                "filename": "api/src/org/apache/cloudstack/api/response/VMSnapshotResponse.java",
                "patch": "@@ -192,7 +192,7 @@ public void setParent(String parent) {\n       this.parent = parent;\n     }\n \n-  public String getType() {\n+    public String getType() {\n         return type;\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/api/src/org/apache/cloudstack/api/response/VMSnapshotResponse.java",
                "sha": "1285f73f633eb66e65e1cfb1211a5e03bd459ab3",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDao.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDao.java?ref=43cf1da865c1e4ed6523fb5b2ba315a547fac79f",
                "deletions": 0,
                "filename": "engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDao.java",
                "patch": "@@ -36,4 +36,6 @@\n     List<VMSnapshotVO> listByParent(Long vmSnapshotId);\n \n     VMSnapshotVO findByName(Long vmId, String name);\n+\n+    List<VMSnapshotVO> listByAccountId(Long accountId);\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDao.java",
                "sha": "31999ef15d66e3dcc6e5a18fddfd0a20fb81e0ec",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDaoImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDaoImpl.java?ref=43cf1da865c1e4ed6523fb5b2ba315a547fac79f",
                "deletions": 0,
                "filename": "engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDaoImpl.java",
                "patch": "@@ -121,6 +121,12 @@ public VMSnapshotVO findByName(Long vmId, String name) {\n         return null;\n     }\n \n+    public List<VMSnapshotVO> listByAccountId(Long accountId) {\n+        SearchCriteria sc = this.AllFieldsSearch.create();\n+        sc.setParameters(\"accountId\", new Object[] { accountId });\n+        return listBy(sc, null);\n+    }\n+\n     @Override\n     public boolean updateState(State currentState, Event event, State nextState, VMSnapshot vo, Object data) {\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDaoImpl.java",
                "sha": "a87d284dc12161d367481e56f739cfe70b203665",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=43cf1da865c1e4ed6523fb5b2ba315a547fac79f",
                "deletions": 0,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -472,6 +472,10 @@ public SnapshotResponse createSnapshotResponse(Snapshot snapshot) {\n             snapshotResponse.setVolumeId(volume.getUuid());\n             snapshotResponse.setVolumeName(volume.getName());\n             snapshotResponse.setVolumeType(volume.getVolumeType().name());\n+            DataCenter zone = ApiDBUtils.findZoneById(volume.getDeviceId());\n+            if (zone != null) {\n+                snapshotResponse.setZoneId(zone.getUuid());\n+            }\n         }\n         snapshotResponse.setCreated(snapshot.getCreated());\n         snapshotResponse.setName(snapshot.getName());",
                "raw_url": "https://github.com/apache/cloudstack/raw/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "b17b5cc67c87056860eb7a2299426353d849b6b4",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/ha/dao/HighAvailabilityDaoImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/ha/dao/HighAvailabilityDaoImpl.java?ref=43cf1da865c1e4ed6523fb5b2ba315a547fac79f",
                "deletions": 0,
                "filename": "server/src/com/cloud/ha/dao/HighAvailabilityDaoImpl.java",
                "patch": "@@ -63,6 +63,7 @@ protected HighAvailabilityDaoImpl() {\n         TBASearch.and(\"server\", TBASearch.entity().getServerId(), Op.NULL);\n         TBASearch.and(\"taken\", TBASearch.entity().getDateTaken(), Op.NULL);\n         TBASearch.and(\"time\", TBASearch.entity().getTimeToTry(), Op.LTEQ);\n+        TBASearch.and(\"step\", TBASearch.entity().getStep(), Op.NIN);\n         TBASearch.done();\n \n         PreviousInstanceSearch = createSearchBuilder();\n@@ -151,6 +152,7 @@ public HaWorkVO take(final long serverId) {\n         try {\n             final SearchCriteria<HaWorkVO> sc = TBASearch.create();\n             sc.setParameters(\"time\", System.currentTimeMillis() >> 10);\n+            sc.setParameters(\"step\", Step.Done, Step.Cancelled);\n \n             final Filter filter = new Filter(HaWorkVO.class, null, true, 0l, 1l);\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/ha/dao/HighAvailabilityDaoImpl.java",
                "sha": "724f4f6d7c9ee6fc32c42aa0ec5feed77ba71bde",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/hypervisor/HypervisorGuruBase.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/hypervisor/HypervisorGuruBase.java?ref=43cf1da865c1e4ed6523fb5b2ba315a547fac79f",
                "deletions": 2,
                "filename": "server/src/com/cloud/hypervisor/HypervisorGuruBase.java",
                "patch": "@@ -35,6 +35,7 @@\n import com.cloud.resource.ResourceManager;\n import com.cloud.server.ConfigurationServer;\n import com.cloud.service.ServiceOfferingDetailsVO;\n+import com.cloud.service.dao.ServiceOfferingDao;\n import com.cloud.service.dao.ServiceOfferingDetailsDao;\n import com.cloud.storage.dao.VMTemplateDetailsDao;\n import com.cloud.utils.Pair;\n@@ -71,6 +72,8 @@\n     ResourceManager _resourceMgr;\n     @Inject\n     ServiceOfferingDetailsDao _serviceOfferingDetailsDao;\n+    @Inject\n+    ServiceOfferingDao _serviceOfferingDao;\n \n     protected HypervisorGuruBase() {\n         super();\n@@ -125,8 +128,7 @@ public NicTO toNicTO(NicProfile profile) {\n     }\n \n     protected VirtualMachineTO toVirtualMachineTO(VirtualMachineProfile vmProfile) {\n-\n-        ServiceOffering offering = vmProfile.getServiceOffering();\n+        ServiceOffering offering = _serviceOfferingDao.findById(vmProfile.getId(), vmProfile.getServiceOfferingId());\n         VirtualMachine vm = vmProfile.getVirtualMachine();\n         Long minMemory = (long)(offering.getRamSize() / vmProfile.getMemoryOvercommitRatio());\n         int minspeed = (int)(offering.getSpeed() / vmProfile.getCpuOvercommitRatio());",
                "raw_url": "https://github.com/apache/cloudstack/raw/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/hypervisor/HypervisorGuruBase.java",
                "sha": "0188778e7641a45080e3bfe73ad79cd651a76377",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/cloudstack/blob/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/hypervisor/KVMGuru.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/hypervisor/KVMGuru.java?ref=43cf1da865c1e4ed6523fb5b2ba315a547fac79f",
                "deletions": 7,
                "filename": "server/src/com/cloud/hypervisor/KVMGuru.java",
                "patch": "@@ -16,24 +16,25 @@\n // under the License.\n package com.cloud.hypervisor;\n \n-import java.util.Map;\n-\n-import javax.ejb.Local;\n-import javax.inject.Inject;\n-\n-import org.apache.cloudstack.storage.command.StorageSubSystemCommand;\n-\n import com.cloud.agent.api.Command;\n+import com.cloud.agent.api.to.DataObjectType;\n import com.cloud.agent.api.to.VirtualMachineTO;\n import com.cloud.host.HostVO;\n import com.cloud.host.dao.HostDao;\n import com.cloud.hypervisor.Hypervisor.HypervisorType;\n+import com.cloud.storage.DataStoreRole;\n import com.cloud.storage.GuestOSHypervisorVO;\n import com.cloud.storage.GuestOSVO;\n import com.cloud.storage.dao.GuestOSDao;\n import com.cloud.storage.dao.GuestOSHypervisorDao;\n import com.cloud.utils.Pair;\n import com.cloud.vm.VirtualMachineProfile;\n+import org.apache.cloudstack.storage.command.CopyCommand;\n+import org.apache.cloudstack.storage.command.StorageSubSystemCommand;\n+\n+import javax.ejb.Local;\n+import javax.inject.Inject;\n+import java.util.Map;\n \n @Local(value = HypervisorGuru.class)\n public class KVMGuru extends HypervisorGuruBase implements HypervisorGuru {\n@@ -77,6 +78,18 @@ public VirtualMachineTO implement(VirtualMachineProfile vm) {\n \n     @Override\n     public Pair<Boolean, Long> getCommandHostDelegation(long hostId, Command cmd) {\n+        if (cmd instanceof CopyCommand) {\n+            CopyCommand c = (CopyCommand) cmd;\n+            boolean inSeq = true;\n+            if (c.getSrcTO().getObjectType() == DataObjectType.SNAPSHOT ||\n+                    c.getDestTO().getObjectType() == DataObjectType.SNAPSHOT) {\n+                inSeq = false;\n+            } else if (c.getDestTO().getDataStore().getRole() == DataStoreRole.Image ||\n+                    c.getDestTO().getDataStore().getRole() == DataStoreRole.ImageCache) {\n+                inSeq = false;\n+            }\n+            c.setExecuteInSequence(inSeq);\n+        }\n         if (cmd instanceof StorageSubSystemCommand) {\n             StorageSubSystemCommand c = (StorageSubSystemCommand)cmd;\n             c.setExecuteInSequence(false);",
                "raw_url": "https://github.com/apache/cloudstack/raw/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/hypervisor/KVMGuru.java",
                "sha": "e15a41752e6f673e01c1055d1243e997b3c823c0",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/resource/ResourceManagerImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/resource/ResourceManagerImpl.java?ref=43cf1da865c1e4ed6523fb5b2ba315a547fac79f",
                "deletions": 3,
                "filename": "server/src/com/cloud/resource/ResourceManagerImpl.java",
                "patch": "@@ -30,7 +30,6 @@\n import javax.inject.Inject;\n import javax.naming.ConfigurationException;\n \n-import com.cloud.capacity.CapacityState;\n import com.cloud.vm.VirtualMachine;\n \n import org.apache.cloudstack.api.ApiConstants;\n@@ -71,6 +70,7 @@\n import com.cloud.agent.transport.Request;\n import com.cloud.capacity.Capacity;\n import com.cloud.capacity.CapacityManager;\n+import com.cloud.capacity.CapacityState;\n import com.cloud.capacity.CapacityVO;\n import com.cloud.capacity.dao.CapacityDao;\n import com.cloud.cluster.ClusterManager;\n@@ -1174,12 +1174,13 @@ private boolean doMaintain(final long hostId) {\n         MaintainAnswer answer = (MaintainAnswer)_agentMgr.easySend(hostId, new MaintainCommand());\n         if (answer == null || !answer.getResult()) {\n             s_logger.warn(\"Unable to send MaintainCommand to host: \" + hostId);\n+            return false;\n         }\n \n         try {\n             resourceStateTransitTo(host, ResourceState.Event.AdminAskMaintenace, _nodeId);\n         } catch (NoTransitionException e) {\n-            String err = \"Cannot transimit resource state of host \" + host.getId() + \" to \" + ResourceState.Maintenance;\n+            String err = \"Cannot transmit resource state of host \" + host.getId() + \" to \" + ResourceState.Maintenance;\n             s_logger.debug(err, e);\n             throw new CloudRuntimeException(err + e.getMessage());\n         }\n@@ -1210,7 +1211,6 @@ private boolean doMaintain(final long hostId) {\n                 }\n             }\n         }\n-\n         return true;\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/resource/ResourceManagerImpl.java",
                "sha": "6beea231c053100e35be863bf5b05f3166f96118",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/resourcelimit/ResourceLimitManagerImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/resourcelimit/ResourceLimitManagerImpl.java?ref=43cf1da865c1e4ed6523fb5b2ba315a547fac79f",
                "deletions": 1,
                "filename": "server/src/com/cloud/resourcelimit/ResourceLimitManagerImpl.java",
                "patch": "@@ -868,8 +868,9 @@ public Long doInTransaction(TransactionStatus status) {\n \n         // this lock guards against the updates to user_vm, volume, snapshot, public _ip and template table\n         // as any resource creation precedes with the resourceLimitExceeded check which needs this lock too\n+        Set rowIdsToLock = _resourceCountDao.listAllRowsToUpdate(accountId, Resource.ResourceOwnerType.Account, type);\n         SearchCriteria<ResourceCountVO> sc = ResourceCountSearch.create();\n-        sc.setParameters(\"accountId\", accountId);\n+        sc.setParameters(\"id\", rowIdsToLock.toArray());\n         _resourceCountDao.lockRows(sc, null, true);\n \n         ResourceCountVO accountRC = _resourceCountDao.findByOwnerAndType(accountId, ResourceOwnerType.Account, type);",
                "raw_url": "https://github.com/apache/cloudstack/raw/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/resourcelimit/ResourceLimitManagerImpl.java",
                "sha": "1651ad7ba2881cb546565afc14054e36b7d6b387",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/server/ConfigurationServerImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/ConfigurationServerImpl.java?ref=43cf1da865c1e4ed6523fb5b2ba315a547fac79f",
                "deletions": 0,
                "filename": "server/src/com/cloud/server/ConfigurationServerImpl.java",
                "patch": "@@ -219,6 +219,9 @@ public void persistDefaultValues() throws InternalErrorException {\n             _configDao.update(\"secstorage.secure.copy.cert\", \"realhostip\");\n             s_logger.debug(\"ConfigurationServer made secondary storage copy use realhostip.\");\n \n+            _configDao.update(\"user.password.encoders.exclude\", \"MD5,LDAP,PLAINTEXT\");\n+            s_logger.debug(\"Configuration server excluded insecure encoders\");\n+\n             // Save default service offerings\n             createServiceOffering(User.UID_SYSTEM, \"Small Instance\", 1, 512, 500, \"Small Instance\", ProvisioningType.THIN, false, false, null);\n             createServiceOffering(User.UID_SYSTEM, \"Medium Instance\", 1, 1024, 1000, \"Medium Instance\", ProvisioningType.THIN, false, false, null);",
                "raw_url": "https://github.com/apache/cloudstack/raw/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/server/ConfigurationServerImpl.java",
                "sha": "a3bd14ad9b0044807968c638d1218083c84098f6",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/cloudstack/blob/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/user/AccountManagerImpl.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/user/AccountManagerImpl.java?ref=43cf1da865c1e4ed6523fb5b2ba315a547fac79f",
                "deletions": 1,
                "filename": "server/src/com/cloud/user/AccountManagerImpl.java",
                "patch": "@@ -117,6 +117,10 @@\n import com.cloud.vm.dao.InstanceGroupDao;\n import com.cloud.vm.dao.UserVmDao;\n import com.cloud.vm.dao.VMInstanceDao;\n+import com.cloud.vm.snapshot.VMSnapshot;\n+import com.cloud.vm.snapshot.VMSnapshotManager;\n+import com.cloud.vm.snapshot.VMSnapshotVO;\n+import com.cloud.vm.snapshot.dao.VMSnapshotDao;\n import org.apache.cloudstack.acl.ControlledEntity;\n import org.apache.cloudstack.acl.QuerySelector;\n import org.apache.cloudstack.acl.RoleType;\n@@ -201,6 +205,10 @@\n     @Inject\n     private SnapshotManager _snapMgr;\n     @Inject\n+    private VMSnapshotManager _vmSnapshotMgr;\n+    @Inject\n+    private VMSnapshotDao _vmSnapshotDao;\n+    @Inject\n     private UserVmManager _vmMgr;\n     @Inject\n     private TemplateManager _tmpltMgr;\n@@ -730,6 +738,16 @@ protected boolean cleanupAccount(AccountVO account, long callerUserId, Account c\n                 accountCleanupNeeded = true;\n             }\n \n+            // Destroy VM Snapshots\n+            List<VMSnapshotVO> vmSnapshots = _vmSnapshotDao.listByAccountId(Long.valueOf(accountId));\n+            for (VMSnapshot vmSnapshot : vmSnapshots) {\n+                try {\n+                    _vmSnapshotMgr.deleteVMSnapshot(vmSnapshot.getId());\n+                } catch (Exception e) {\n+                    s_logger.debug(\"Failed to cleanup vm snapshot \" + vmSnapshot.getId() + \" due to \" + e.toString());\n+                }\n+            }\n+\n             // Destroy the account's VMs\n             List<UserVmVO> vms = _userVmDao.listByAccountId(accountId);\n             if (s_logger.isDebugEnabled()) {\n@@ -1169,6 +1187,9 @@ public UserAccount updateUser(Long userId, String firstName, String lastName, St\n         }\n \n         if (password != null) {\n+            if (password.isEmpty()) {\n+                throw new InvalidParameterValueException(\"Password cannot be empty\");\n+            }\n             String encodedPassword = null;\n             for (Iterator<UserAuthenticator> en = _userPasswordEncoders.iterator(); en.hasNext();) {\n                 UserAuthenticator authenticator = en.next();\n@@ -1977,7 +1998,7 @@ public void logoutUser(long userId) {\n     @Override\n     public UserAccount authenticateUser(String username, String password, Long domainId, InetAddress loginIpAddress, Map<String, Object[]> requestParameters) {\n         UserAccount user = null;\n-        if (password != null) {\n+        if (password != null && !password.isEmpty()) {\n             user = getUserAccount(username, password, domainId, requestParameters);\n         } else {\n             String key = _configDao.getValue(\"security.singlesignon.key\");",
                "raw_url": "https://github.com/apache/cloudstack/raw/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/user/AccountManagerImpl.java",
                "sha": "f40cd8f898de7933aa6d0c9344c3d2f2bdb75204",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-5238: password checks, NPE fixes and minor fixes\n\n- insecure authenticators excluded in configuration\n- snapshot response should have zone\n- remove vmsnapshots when removing accounts\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n(cherry picked from commit 5481485a083957ff58da3b6fea9d7b6d20f06875)\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n\nConflicts:\n\tapi/src/org/apache/cloudstack/api/response/VMSnapshotResponse.java\n\tserver/src/com/cloud/api/ApiResponseHelper.java\n\tserver/src/com/cloud/storage/download/DownloadActiveState.java",
        "parent": "https://github.com/apache/cloudstack/commit/8829a0d4a7f396549af9ce6071c75eac86ae0bfe",
        "patched_files": [
            "ConfigurationServerImpl.java",
            "AccountManagerImpl.java",
            "ResourceLimitManagerImpl.java",
            "ApiResponseHelper.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "AccountManagerImplTest.java",
            "ApiResponseHelperTest.java",
            "ResourceLimitManagerImplTest.java",
            "ConfigurationServerImplTest.java"
        ]
    },
    "cloudstack_47d6a64": {
        "bug_id": "cloudstack_47d6a64",
        "commit": "https://github.com/apache/cloudstack/commit/47d6a64b319ab064c4b855346f2bfdb250fb9ad8",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/cloudstack/blob/47d6a64b319ab064c4b855346f2bfdb250fb9ad8/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java?ref=47d6a64b319ab064c4b855346f2bfdb250fb9ad8",
                "deletions": 2,
                "filename": "engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "patch": "@@ -925,7 +925,7 @@ protected NicTO toNicTO(NicVO nic, NicProfile profile, NetworkVO config) {\n \n     boolean isNetworkImplemented(NetworkVO network) {\n         Network.State state = network.getState();\n-        if (state == Network.State.Implemented || state == Network.State.Implementing) {\n+        if (state == Network.State.Implemented) {\n             return true;\n         } else if (state == Network.State.Setup) {\n             DataCenterVO zone = _dcDao.findById(network.getDataCenterId());\n@@ -1277,7 +1277,19 @@ public int compare(NicVO nic1, NicVO nic2) {\n         });\n \n         for (NicVO nic : nics) {\n-            Pair<NetworkGuru, NetworkVO> implemented = implementNetwork(nic.getNetworkId(), dest, context);\n+            Pair<NetworkGuru, NetworkVO> implemented = null;\n+            if (vmProfile.getVirtualMachine().getType() != Type.DomainRouter) {\n+                implemented = implementNetwork(nic.getNetworkId(), dest, context);\n+            } else {\n+                // At the time of implementing network (using implementNetwork() method), if the VR needs to be deployed then\n+                // it follows the same path of regular VM deployment. This leads to a nested call to implementNetwork() while\n+                // preparing VR nics. This flow creates issues in dealing with network state transitions. The original call\n+                // puts network in \"Implementing\" state and then the nested call again tries to put it into same state resulting\n+                // in issues. In order to avoid it, implementNetwork() call for VR is replaced with below code.\n+                NetworkVO network = _networksDao.findById(nic.getNetworkId());\n+                NetworkGuru guru = AdapterBase.getAdapterByName(networkGurus, network.getGuruName());\n+                implemented = new Pair<NetworkGuru, NetworkVO>(guru, network);\n+            }\n             if (implemented == null || implemented.first() == null) {\n                 s_logger.warn(\"Failed to implement network id=\" + nic.getNetworkId() + \" as a part of preparing nic id=\" + nic.getId());\n                 throw new CloudRuntimeException(\"Failed to implement network id=\" + nic.getNetworkId() + \" as a part preparing nic id=\" + nic.getId());",
                "raw_url": "https://github.com/apache/cloudstack/raw/47d6a64b319ab064c4b855346f2bfdb250fb9ad8/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "sha": "265515c50b54707a1223418f8348071d0a398232",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-7182: NPE while trying to deploy VMs in parallel in isolated network\nThe following changes are made:\n- Check to see if network is implemented changed from 'state == Implementing||Implemented' to 'state == Implemented'.\nThe earlier check was a hack to prevent the issue described below.\n- At the time of implementing network (using implementNetwork() method), if the VR needs to be deployed then\nit follows the same path of regular VM deployment. This leads to a nested call to implementNetwork() while\npreparing VR nics. This flow creates issues in dealing with network state transitions. The original call\nputs network in \"Implementing\" state and then the nested call again tries to put it into same state resulting\nin issues. In order to avoid it, implementNetwork() call for VR is replaced with below code.",
        "parent": "https://github.com/apache/cloudstack/commit/ea740aa0e10e22da751ff1d0405ac307f2f7e7ce",
        "patched_files": [
            "NetworkOrchestrator.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "NetworkOrchestratorTest.java"
        ]
    },
    "cloudstack_4b21650": {
        "bug_id": "cloudstack_4b21650",
        "commit": "https://github.com/apache/cloudstack/commit/4b21650e233261cc9cf2464d3a5babf7bc80a49b",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/4b21650e233261cc9cf2464d3a5babf7bc80a49b/api/src/com/cloud/capacity/Capacity.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/capacity/Capacity.java?ref=4b21650e233261cc9cf2464d3a5babf7bc80a49b",
                "deletions": 2,
                "filename": "api/src/com/cloud/capacity/Capacity.java",
                "patch": "@@ -26,11 +26,11 @@\n     public static final short CAPACITY_TYPE_CPU = 1;\n     public static final short CAPACITY_TYPE_STORAGE = 2;\n     public static final short CAPACITY_TYPE_STORAGE_ALLOCATED = 3;\n-    public static final short CAPACITY_TYPE_PUBLIC_IP = 4;\n+    public static final short CAPACITY_TYPE_VIRTUAL_NETWORK_PUBLIC_IP = 4;\n     public static final short CAPACITY_TYPE_PRIVATE_IP = 5;\n     public static final short CAPACITY_TYPE_SECONDARY_STORAGE = 6;\n     public static final short CAPACITY_TYPE_VLAN = 7;\n-    \n+    public static final short CAPACITY_TYPE_DIRECT_ATTACHED_PUBLIC_IP = 8;\n     \n     public long getId();\n     ",
                "raw_url": "https://github.com/apache/cloudstack/raw/4b21650e233261cc9cf2464d3a5babf7bc80a49b/api/src/com/cloud/capacity/Capacity.java",
                "sha": "2151a86c3f83f38907cee291d18604aea4bb2724",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/4b21650e233261cc9cf2464d3a5babf7bc80a49b/core/src/com/cloud/alert/AlertManager.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/core/src/com/cloud/alert/AlertManager.java?ref=4b21650e233261cc9cf2464d3a5babf7bc80a49b",
                "deletions": 1,
                "filename": "core/src/com/cloud/alert/AlertManager.java",
                "patch": "@@ -26,8 +26,9 @@\n     public static final short ALERT_TYPE_CPU = CapacityVO.CAPACITY_TYPE_CPU;\n     public static final short ALERT_TYPE_STORAGE = CapacityVO.CAPACITY_TYPE_STORAGE;\n     public static final short ALERT_TYPE_STORAGE_ALLOCATED = CapacityVO.CAPACITY_TYPE_STORAGE_ALLOCATED;\n-    public static final short ALERT_TYPE_PUBLIC_IP = CapacityVO.CAPACITY_TYPE_PUBLIC_IP;\n+    public static final short ALERT_TYPE_VIRTUAL_NETWORK_PUBLIC_IP = CapacityVO.CAPACITY_TYPE_VIRTUAL_NETWORK_PUBLIC_IP;\n     public static final short ALERT_TYPE_PRIVATE_IP = CapacityVO.CAPACITY_TYPE_PRIVATE_IP;\n+    public static final short ALERT_TYPE_SECONDARY_STORAGE = CapacityVO.CAPACITY_TYPE_SECONDARY_STORAGE;\n     public static final short ALERT_TYPE_HOST = 6;\n     public static final short ALERT_TYPE_USERVM = 7;\n     public static final short ALERT_TYPE_DOMAIN_ROUTER = 8;",
                "raw_url": "https://github.com/apache/cloudstack/raw/4b21650e233261cc9cf2464d3a5babf7bc80a49b/core/src/com/cloud/alert/AlertManager.java",
                "sha": "ecb52e92f805db269786672ed1b7a5f61197a3c2",
                "status": "modified"
            },
            {
                "additions": 51,
                "blob_url": "https://github.com/apache/cloudstack/blob/4b21650e233261cc9cf2464d3a5babf7bc80a49b/server/src/com/cloud/alert/AlertManagerImpl.java",
                "changes": 68,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/alert/AlertManagerImpl.java?ref=4b21650e233261cc9cf2464d3a5babf7bc80a49b",
                "deletions": 17,
                "filename": "server/src/com/cloud/alert/AlertManagerImpl.java",
                "patch": "@@ -31,11 +31,11 @@\n \n import javax.ejb.Local;\n import javax.mail.Authenticator;\n-import javax.mail.Message.RecipientType;\n import javax.mail.MessagingException;\n import javax.mail.PasswordAuthentication;\n import javax.mail.Session;\n import javax.mail.URLName;\n+import javax.mail.Message.RecipientType;\n import javax.mail.internet.InternetAddress;\n import javax.naming.ConfigurationException;\n \n@@ -53,18 +53,15 @@\n import com.cloud.dc.ClusterVO;\n import com.cloud.dc.DataCenterVO;\n import com.cloud.dc.HostPodVO;\n+import com.cloud.dc.Vlan.VlanType;\n import com.cloud.dc.dao.ClusterDao;\n import com.cloud.dc.dao.DataCenterDao;\n import com.cloud.dc.dao.DataCenterIpAddressDao;\n-import com.cloud.dc.dao.DataCenterVnetDaoImpl;\n import com.cloud.dc.dao.HostPodDao;\n import com.cloud.host.Host;\n import com.cloud.host.HostVO;\n-import com.cloud.host.Status;\n import com.cloud.host.dao.HostDao;\n import com.cloud.network.dao.IPAddressDao;\n-import com.cloud.service.ServiceOfferingVO;\n-import com.cloud.service.dao.ServiceOfferingDao;\n import com.cloud.storage.StorageManager;\n import com.cloud.storage.StoragePoolVO;\n import com.cloud.storage.dao.StoragePoolDao;\n@@ -75,7 +72,6 @@\n import com.cloud.utils.component.Inject;\n import com.cloud.utils.db.DB;\n import com.cloud.utils.db.SearchCriteria;\n-import com.cloud.utils.db.Transaction;\n import com.sun.mail.smtp.SMTPMessage;\n import com.sun.mail.smtp.SMTPSSLTransport;\n import com.sun.mail.smtp.SMTPTransport;\n@@ -114,6 +110,8 @@\n     private double _publicIPCapacityThreshold = 0.75;\r\n     private double _privateIPCapacityThreshold = 0.75;\n     private double _secondaryStorageCapacityThreshold = 0.75; \n+\tprivate double _vlanCapacityThreshold = 0.75;\n+\tprivate double _directNetworkPublicIpCapacityThreshold = 0.75;\n     Map<Short,Double> _capacityTypeThresholdMap = new HashMap<Short, Double>();\r\n \r\n     @Override\r\n@@ -157,7 +155,9 @@ public boolean configure(String name, Map<String, Object> params) throws Configu\n         String storageAllocCapacityThreshold = configs.get(\"storage.allocated.capacity.threshold\");\r\n         String publicIPCapacityThreshold = configs.get(\"public.ip.capacity.threshold\");\r\n         String privateIPCapacityThreshold = configs.get(\"private.ip.capacity.threshold\");\n-        String secondaryStorageCapacityThreshold = configs.get(\"secondarystorage.capacity.threshold\");\r\n+        String secondaryStorageCapacityThreshold = configs.get(\"secondarystorage.capacity.threshold\");\n+        String vlanCapacityThreshold = configs.get(\"vlan.capacity.threshold\");\n+        String directNetworkPublicIpCapacityThreshold = configs.get(\"directnetwork.public.ip.capacity.threshold\");\r\n         \r\n         if (storageCapacityThreshold != null) {\r\n             _storageCapacityThreshold = Double.parseDouble(storageCapacityThreshold);\r\n@@ -180,14 +180,22 @@ public boolean configure(String name, Map<String, Object> params) throws Configu\n         if (secondaryStorageCapacityThreshold != null) {\n             _secondaryStorageCapacityThreshold = Double.parseDouble(secondaryStorageCapacityThreshold);\n         }\n+        if (vlanCapacityThreshold != null) {\n+            _vlanCapacityThreshold = Double.parseDouble(vlanCapacityThreshold);\n+        }\n+        if (directNetworkPublicIpCapacityThreshold != null) {\n+            _directNetworkPublicIpCapacityThreshold = Double.parseDouble(directNetworkPublicIpCapacityThreshold);\n+        }\n         \n         _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_STORAGE, _storageCapacityThreshold);\n         _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED, _storageAllocCapacityThreshold);\r\n         _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_CPU, _cpuCapacityThreshold);\n         _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_MEMORY, _memoryCapacityThreshold);\n-        _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_PUBLIC_IP, _publicIPCapacityThreshold);\n+        _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_VIRTUAL_NETWORK_PUBLIC_IP, _publicIPCapacityThreshold);\n         _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_PRIVATE_IP, _privateIPCapacityThreshold);\n         _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_SECONDARY_STORAGE, _secondaryStorageCapacityThreshold);\n+        _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_VLAN, _vlanCapacityThreshold);\n+        _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_DIRECT_ATTACHED_PUBLIC_IP, _directNetworkPublicIpCapacityThreshold);\n         \r\n         String capacityCheckPeriodStr = configs.get(\"capacity.check.period\");\r\n         if (capacityCheckPeriodStr != null) {\r\n@@ -291,10 +299,15 @@ public void recalculateCapacity() {\n \t\t        //ideal way would be to remove out the vlan param, and filter only on dcId\n \t\t        //implementing the same\n         \t\t\r\n-            \t// Calculate new Public IP capacity\n-            \ts_logger.trace(\"Executing public ip capacity update\");\n-\t\t        createOrUpdateIpCapacity(dcId, null, CapacityVO.CAPACITY_TYPE_PUBLIC_IP);\n-                s_logger.trace(\"Done with public ip capacity update\");\n+            \t// Calculate new Public IP capacity for Virtual Network\n+            \ts_logger.trace(\"Executing public ip capacity update for Virtual Network\");\n+\t\t        createOrUpdateIpCapacity(dcId, null, CapacityVO.CAPACITY_TYPE_VIRTUAL_NETWORK_PUBLIC_IP);\n+                s_logger.trace(\"Done with public ip capacity update for Virtual Network\");\n+                \n+            \t// Calculate new Public IP capacity for Direct Attached Network\n+            \ts_logger.trace(\"Executing public ip capacity update for Direct Attached Network\");\n+\t\t        createOrUpdateIpCapacity(dcId, null, CapacityVO.CAPACITY_TYPE_DIRECT_ATTACHED_PUBLIC_IP);\n+                s_logger.trace(\"Done with public ip capacity update for Direct Attached Network\");\n                 \n                 //Calculate VLAN's capacity\n             \ts_logger.trace(\"Executing VLAN capacity update\");\n@@ -364,9 +377,12 @@ public void createOrUpdateIpCapacity(Long dcId, Long podId, short capacityType){\n         if (capacityType == CapacityVO.CAPACITY_TYPE_PRIVATE_IP){\n         \ttotalIPs = _privateIPAddressDao.countIPs(podId, dcId, false);\n         \tallocatedIPs = _privateIPAddressDao.countIPs(podId, dcId, true);\n-        }else{\n-        \ttotalIPs = _publicIPAddressDao.countIPsForDashboard(dcId, false);\n-            allocatedIPs = _publicIPAddressDao.countIPsForDashboard(dcId, true);\n+        }else if (capacityType == CapacityVO.CAPACITY_TYPE_VIRTUAL_NETWORK_PUBLIC_IP){\n+        \ttotalIPs = _publicIPAddressDao.countIPsForNetwork(dcId, false, VlanType.VirtualNetwork);\n+            allocatedIPs = _publicIPAddressDao.countIPsForNetwork(dcId, true, VlanType.VirtualNetwork);\n+        }else {\n+        \ttotalIPs = _publicIPAddressDao.countIPsForNetwork(dcId, false, VlanType.DirectAttached);\n+            allocatedIPs = _publicIPAddressDao.countIPsForNetwork(dcId, true, VlanType.DirectAttached);\n         }\n         \n         if (capacities.size() == 0){\n@@ -416,6 +432,9 @@ public void checkForAlerts(){\n         for(DataCenterVO dc : dataCenterList){\n         \tfor (Short capacityType : dataCenterCapacityTypes){\n         \t\tList<SummedCapacity> capacity = _capacityDao.findCapacityBy(capacityType.intValue(), dc.getId(), null, null);\n+        \t\tif (capacity == null || capacity.size() == 0){\n+        \t\t\tcontinue;\n+        \t\t}\n         \t\tdouble totalCapacity = capacity.get(0).getTotalCapacity(); \n                 double usedCapacity =  capacity.get(0).getUsedCapacity();\n                 if (totalCapacity != 0 && usedCapacity/totalCapacity > _capacityTypeThresholdMap.get(capacityType)){\n@@ -428,6 +447,9 @@ public void checkForAlerts(){\n         for( HostPodVO pod : podList){\n         \tfor (Short capacityType : podCapacityTypes){\n         \t\tList<SummedCapacity> capacity = _capacityDao.findCapacityBy(capacityType.intValue(), pod.getDataCenterId(), pod.getId(), null);\n+        \t\tif (capacity == null || capacity.size() == 0){\n+        \t\t\tcontinue;\n+        \t\t}\n         \t\tdouble totalCapacity = capacity.get(0).getTotalCapacity(); \n                 double usedCapacity =  capacity.get(0).getUsedCapacity();\n                 if (totalCapacity != 0 && usedCapacity/totalCapacity > _capacityTypeThresholdMap.get(capacityType)){\n@@ -441,6 +463,9 @@ public void checkForAlerts(){\n         for( ClusterVO cluster : clusterList){\n         \tfor (Short capacityType : clusterCapacityTypes){\n         \t\tList<SummedCapacity> capacity = _capacityDao.findCapacityBy(capacityType.intValue(), cluster.getDataCenterId(), null, cluster.getId());\n+        \t\tif (capacity == null || capacity.size() == 0){\n+        \t\t\tcontinue;\n+        \t\t}\n         \t\tdouble totalCapacity = capacity.get(0).getTotalCapacity(); \n                 double usedCapacity =  capacity.get(0).getUsedCapacity();\n                 if (totalCapacity != 0 && usedCapacity/totalCapacity > _capacityTypeThresholdMap.get(capacityType)){\n@@ -485,7 +510,7 @@ private void generateEmailAlert(DataCenterVO dc, HostPodVO pod, ClusterVO cluste\n             usedStr = formatBytesToMegabytes(usedCapacity);\n             msgContent = \"Unallocated storage space is low, total: \" + totalStr + \" MB, allocated: \" + usedStr + \" MB (\" + pctStr + \"%)\";\n             break;\n-        case CapacityVO.CAPACITY_TYPE_PUBLIC_IP:\n+        case CapacityVO.CAPACITY_TYPE_VIRTUAL_NETWORK_PUBLIC_IP:\n             msgSubject = \"System Alert: Number of unallocated public IPs is low in availablity zone \" + dc.getName();\n             totalStr = Double.toString(totalCapacity);\n             usedStr = Double.toString(usedCapacity);\n@@ -497,6 +522,13 @@ private void generateEmailAlert(DataCenterVO dc, HostPodVO pod, ClusterVO cluste\n             usedStr = Double.toString(usedCapacity);\n         \tmsgContent = \"Number of unallocated private IPs is low, total: \" + totalStr + \", allocated: \" + usedStr + \" (\" + pctStr + \"%)\";\n         \tbreak;\n+        \t\n+        case CapacityVO.CAPACITY_TYPE_SECONDARY_STORAGE:        \t\n+        \tmsgSubject = \"System Alert: Low Available Storage in availablity zone \" + dc.getName();\n+        \ttotalStr = Double.toString(totalCapacity);\n+            usedStr = Double.toString(usedCapacity);\n+        \tmsgContent = \"Available secondary storage space is low, total: \" + totalStr + \" MB, used: \" + usedStr + \" MB (\" + pctStr + \"%)\";\n+        \tbreak;        \n         }\n     \t\n     \ttry {\n@@ -509,8 +541,10 @@ private void generateEmailAlert(DataCenterVO dc, HostPodVO pod, ClusterVO cluste\n     private List<Short> getCapacityTypesAtZoneLevel(){\n     \t\n     \tList<Short> dataCenterCapacityTypes = new ArrayList<Short>();\n-    \tdataCenterCapacityTypes.add(Capacity.CAPACITY_TYPE_PUBLIC_IP);\n+    \tdataCenterCapacityTypes.add(Capacity.CAPACITY_TYPE_VIRTUAL_NETWORK_PUBLIC_IP);\n+    \tdataCenterCapacityTypes.add(Capacity.CAPACITY_TYPE_DIRECT_ATTACHED_PUBLIC_IP);\n     \tdataCenterCapacityTypes.add(Capacity.CAPACITY_TYPE_SECONDARY_STORAGE);\n+    \tdataCenterCapacityTypes.add(Capacity.CAPACITY_TYPE_VLAN);\n \t\treturn dataCenterCapacityTypes;\n     \t\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/4b21650e233261cc9cf2464d3a5babf7bc80a49b/server/src/com/cloud/alert/AlertManagerImpl.java",
                "sha": "d8f1d78eb1ca30b7324985d0af4d2e3f4da5d4ef",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/4b21650e233261cc9cf2464d3a5babf7bc80a49b/server/src/com/cloud/configuration/Config.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/configuration/Config.java?ref=4b21650e233261cc9cf2464d3a5babf7bc80a49b",
                "deletions": 0,
                "filename": "server/src/com/cloud/configuration/Config.java",
                "patch": "@@ -101,6 +101,8 @@\n \tPublicIpCapacityThreshold(\"Usage\", ManagementServer.class, Float.class, \"public.ip.capacity.threshold\", \"0.85\", \"Percentage (as a value between 0 and 1) of public IP address space utilization above which alerts will be sent.\", null),\n \tPrivateIpCapacityThreshold(\"Usage\", ManagementServer.class, Float.class, \"private.ip.capacity.threshold\", \"0.85\", \"Percentage (as a value between 0 and 1) of private IP address space utilization above which alerts will be sent.\", null),\n \tSecondaryStorageCapacityThreshold(\"Usage\", ManagementServer.class, Float.class, \"secondarystorage.capacity.threshold\", \"0.85\", \"Percentage (as a value between 0 and 1) of secondary storage utilization above which alerts will be sent about low storage available.\", null),\n+\tVlanCapacityThreshold(\"Usage\", ManagementServer.class, Float.class, \"vlan.capacity.threshold\", \"0.85\", \"Percentage (as a value between 0 and 1) of Zone Vlan utilization above which alerts will be sent about low number of Zone Vlans.\", null),\n+\tDirectNetworkPublicIpCapacityThreshold(\"Usage\", ManagementServer.class, Float.class, \"directnetwork.public.ip.capacity.threshold\", \"0.85\", \"Percentage (as a value between 0 and 1) of Direct Network Public Ip Utilization above which alerts will be sent about low number of direct network public ips.\", null),\n \t\n \t// Console Proxy\n \tConsoleProxyCapacityStandby(\"Console Proxy\", AgentManager.class, String.class, \"consoleproxy.capacity.standby\", \"10\", \"The minimal number of console proxy viewer sessions that system is able to serve immediately(standby capacity)\", null),",
                "raw_url": "https://github.com/apache/cloudstack/raw/4b21650e233261cc9cf2464d3a5babf7bc80a49b/server/src/com/cloud/configuration/Config.java",
                "sha": "40ebebbca86e3dae5acda9f13784eb870272cfb2",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/4b21650e233261cc9cf2464d3a5babf7bc80a49b/server/src/com/cloud/network/dao/IPAddressDao.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/dao/IPAddressDao.java?ref=4b21650e233261cc9cf2464d3a5babf7bc80a49b",
                "deletions": 1,
                "filename": "server/src/com/cloud/network/dao/IPAddressDao.java",
                "patch": "@@ -20,6 +20,7 @@\n \r\n import java.util.List;\n \n+import com.cloud.dc.Vlan.VlanType;\n import com.cloud.network.IPAddressVO;\n import com.cloud.utils.db.GenericDao;\n import com.cloud.utils.net.Ip;\n@@ -48,7 +49,7 @@\n \t\r\n \tboolean mark(long dcId, Ip ip);\n \n-\tint countIPsForDashboard(long dcId, boolean onlyCountAllocated);\n+\tint countIPsForNetwork(long dcId, boolean onlyCountAllocated, VlanType vlanType);\n \t\n \tIPAddressVO findByAssociatedVmId(long vmId);\n \t",
                "raw_url": "https://github.com/apache/cloudstack/raw/4b21650e233261cc9cf2464d3a5babf7bc80a49b/server/src/com/cloud/network/dao/IPAddressDao.java",
                "sha": "8352dbbd95e99bb0c91a0f830ba815ebe0dbc9b5",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/4b21650e233261cc9cf2464d3a5babf7bc80a49b/server/src/com/cloud/network/dao/IPAddressDaoImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/dao/IPAddressDaoImpl.java?ref=4b21650e233261cc9cf2464d3a5babf7bc80a49b",
                "deletions": 2,
                "filename": "server/src/com/cloud/network/dao/IPAddressDaoImpl.java",
                "patch": "@@ -245,16 +245,17 @@ public int countIPs(long dcId, long vlanId, boolean onlyCountAllocated) {\n     }\n \n     @Override\n-    public int countIPsForDashboard(long dcId, boolean onlyCountAllocated) {\n+    public int countIPsForNetwork(long dcId, boolean onlyCountAllocated, VlanType vlanType) {\n         SearchCriteria<Integer> sc = AllIpCountForDashboard.create();\n         sc.setParameters(\"dc\", dcId);\n         if (onlyCountAllocated){\n         \tsc.setParameters(\"state\", State.Free);\n         }\n-        sc.setJoinParameters(\"vlan\", \"vlanType\", VlanType.VirtualNetwork.toString());\n+        sc.setJoinParameters(\"vlan\", \"vlanType\", vlanType.toString());\n         return customSearch(sc, null).get(0);\n     }\n \n+    \n     @Override\n     @DB\n     public int countIPs(long dcId, Long accountId, String vlanId, String vlanGateway, String vlanNetmask) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/4b21650e233261cc9cf2464d3a5babf7bc80a49b/server/src/com/cloud/network/dao/IPAddressDaoImpl.java",
                "sha": "fac3f748b6e1b4a4ac0b158e17fe606245d32e11",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/4b21650e233261cc9cf2464d3a5babf7bc80a49b/server/src/com/cloud/server/ManagementServerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/ManagementServerImpl.java?ref=4b21650e233261cc9cf2464d3a5babf7bc80a49b",
                "deletions": 1,
                "filename": "server/src/com/cloud/server/ManagementServerImpl.java",
                "patch": "@@ -2484,7 +2484,7 @@ private void updateDomainChildren(DomainVO domain, String updatedDomainPrefix) {\n         \t\t\tsummedCapacity.getUsedCapacity() + summedCapacity.getReservedCapacity(), \n         \t\t\tsummedCapacity.getTotalCapacity(), summedCapacity.getCapacityType());\n         \t\n-        \tif (capacityType == Capacity.CAPACITY_TYPE_CPU){\n+        \tif ( summedCapacity.getCapacityType() == Capacity.CAPACITY_TYPE_CPU){\n         \t\tcapacity.setTotalCapacity((long)(summedCapacity.getTotalCapacity() * ApiDBUtils.getCpuOverprovisioningFactor()));\n         \t}\n         \tcapacities.add(capacity);\t\t",
                "raw_url": "https://github.com/apache/cloudstack/raw/4b21650e233261cc9cf2464d3a5babf7bc80a49b/server/src/com/cloud/server/ManagementServerImpl.java",
                "sha": "e7472d0720da007703ea32e6966e36cea29baea2",
                "status": "modified"
            }
        ],
        "message": "bug 10848: Removing NPE from listCapacity and new alert code. Adding CAPACITY_TYPE_DIRECT_ATTACHED_PUBLIC_IP. Introducing thresholds for vlan and direct attached public ips.",
        "parent": "https://github.com/apache/cloudstack/commit/3921421ce56a4de11ddf00f79ba84d7943f6a0fd",
        "patched_files": [
            "Config.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "ConfigTest.java"
        ]
    },
    "cloudstack_4b8bfe2": {
        "bug_id": "cloudstack_4b8bfe2",
        "commit": "https://github.com/apache/cloudstack/commit/4b8bfe26275f7eb6e98abe77849153eaa93e8205",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/4b8bfe26275f7eb6e98abe77849153eaa93e8205/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=4b8bfe26275f7eb6e98abe77849153eaa93e8205",
                "deletions": 5,
                "filename": "engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -1873,7 +1873,8 @@ protected void migrate(VMInstanceVO vm, long srcHostId, DeployDestination dest)\n         try {\n             pfma = _agentMgr.send(dstHostId, pfmc);\n             if (pfma == null || !pfma.getResult()) {\n-                String msg = \"Unable to prepare for migration due to \" + pfma.getDetails();\n+                String details = (pfma != null) ? pfma.getDetails() : \"null answer returned\";\n+                String msg = \"Unable to prepare for migration due to \" + details;\n                 pfma = null;\n                 throw new AgentUnavailableException(msg, dstHostId);\n             }\n@@ -1909,7 +1910,8 @@ protected void migrate(VMInstanceVO vm, long srcHostId, DeployDestination dest)\n             try {\n                 Answer ma = _agentMgr.send(vm.getLastHostId(), mc);\n                 if (ma == null || !ma.getResult()) {\n-                    throw new CloudRuntimeException(\"Unable to migrate due to \" + ma.getDetails());\n+                    String details = (ma != null) ? ma.getDetails() : \"null answer returned\";\n+                    throw new CloudRuntimeException(\"Unable to migrate due to \" + details);\n                 }\n             } catch (OperationTimedoutException e) {\n                 if (e.isActive()) {\n@@ -3263,7 +3265,8 @@ private void orchestrateMigrateForScale(String vmUuid, long srcHostId, DeployDes\n         try {\n             pfma = _agentMgr.send(dstHostId, pfmc);\n             if (pfma == null || !pfma.getResult()) {\n-                String msg = \"Unable to prepare for migration due to \" + pfma.getDetails();\n+                String details = (pfma != null) ? pfma.getDetails() : \"null answer returned\";\n+                String msg = \"Unable to prepare for migration due to \" + details;\n                 pfma = null;\n                 throw new AgentUnavailableException(msg, dstHostId);\n             }\n@@ -3296,8 +3299,10 @@ private void orchestrateMigrateForScale(String vmUuid, long srcHostId, DeployDes\n             try {\n                 Answer ma = _agentMgr.send(vm.getLastHostId(), mc);\n                 if (ma == null || !ma.getResult()) {\n-                    s_logger.error(\"Unable to migrate due to \" + ma.getDetails());\n-                    throw new CloudRuntimeException(\"Unable to migrate due to \" + ma.getDetails());\n+                    String details = (ma != null) ? ma.getDetails() : \"null answer returned\";\n+                    String msg = \"Unable to migrate due to \" + details;\n+                    s_logger.error(msg);\n+                    throw new CloudRuntimeException(msg);\n                 }\n             } catch (OperationTimedoutException e) {\n                 if (e.isActive()) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/4b8bfe26275f7eb6e98abe77849153eaa93e8205/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "de2fd28e3a18af0c114553e6dcfaf9485036aaee",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-7563: Fix potential NPE from FingBugs.",
        "parent": "https://github.com/apache/cloudstack/commit/771d05238160764b4eb222d80696a3dce1422fa6",
        "patched_files": [
            "VirtualMachineManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_4c42aaf": {
        "bug_id": "cloudstack_4c42aaf",
        "commit": "https://github.com/apache/cloudstack/commit/4c42aafae0d3286a38d796a7c69a6aec6810cf79",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/4c42aafae0d3286a38d796a7c69a6aec6810cf79/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java?ref=4c42aafae0d3286a38d796a7c69a6aec6810cf79",
                "deletions": 0,
                "filename": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java",
                "patch": "@@ -499,6 +499,9 @@ public VolumeInfo copyVolumeFromSecToPrimary(VolumeInfo volume, VirtualMachine v\n \n         // Find a suitable storage to create volume on\n         StoragePool destPool = findStoragePool(dskCh, dc, pod, clusterId, null, vm, avoidPools);\n+        if (destPool == null) {\n+            throw new CloudRuntimeException(\"Failed to find a suitable storage pool to create Volume in the pod/cluster of the provided VM \"+ vm.getUuid());\n+        }\n         DataStore destStore = dataStoreMgr.getDataStore(destPool.getId(), DataStoreRole.Primary);\n         AsyncCallFuture<VolumeApiResult> future = volService.copyVolume(volume, destStore);\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/4c42aafae0d3286a38d796a7c69a6aec6810cf79/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java",
                "sha": "c8279ff3f99c85b0fdcce52ba5d3dbc4ae6db1e4",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/4c42aafae0d3286a38d796a7c69a6aec6810cf79/engine/schema/src/main/java/com/cloud/configuration/dao/ResourceCountDao.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/main/java/com/cloud/configuration/dao/ResourceCountDao.java?ref=4c42aafae0d3286a38d796a7c69a6aec6810cf79",
                "deletions": 3,
                "filename": "engine/schema/src/main/java/com/cloud/configuration/dao/ResourceCountDao.java",
                "patch": "@@ -39,9 +39,6 @@\n      */\n     void setResourceCount(long ownerId, ResourceOwnerType ownerType, ResourceType type, long count);\n \n-    @Deprecated\n-    void updateDomainCount(long domainId, ResourceType type, boolean increment, long delta);\n-\n     boolean updateById(long id, boolean increment, long delta);\n \n     void createResourceCounts(long ownerId, ResourceOwnerType ownerType);",
                "raw_url": "https://github.com/apache/cloudstack/raw/4c42aafae0d3286a38d796a7c69a6aec6810cf79/engine/schema/src/main/java/com/cloud/configuration/dao/ResourceCountDao.java",
                "sha": "28f2a53607162264d07361027e3a24a0d0c53161",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/4c42aafae0d3286a38d796a7c69a6aec6810cf79/engine/schema/src/main/java/com/cloud/configuration/dao/ResourceCountDaoImpl.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/main/java/com/cloud/configuration/dao/ResourceCountDaoImpl.java?ref=4c42aafae0d3286a38d796a7c69a6aec6810cf79",
                "deletions": 10,
                "filename": "engine/schema/src/main/java/com/cloud/configuration/dao/ResourceCountDaoImpl.java",
                "patch": "@@ -120,16 +120,6 @@ public void setResourceCount(long ownerId, ResourceOwnerType ownerType, Resource\n         }\n     }\n \n-    @Override\n-    @Deprecated\n-    public void updateDomainCount(long domainId, ResourceType type, boolean increment, long delta) {\n-        delta = increment ? delta : delta * -1;\n-\n-        ResourceCountVO resourceCountVO = findByOwnerAndType(domainId, ResourceOwnerType.Domain, type);\n-        resourceCountVO.setCount(resourceCountVO.getCount() + delta);\n-        update(resourceCountVO.getId(), resourceCountVO);\n-    }\n-\n     @Override\n     public boolean updateById(long id, boolean increment, long delta) {\n         delta = increment ? delta : delta * -1;",
                "raw_url": "https://github.com/apache/cloudstack/raw/4c42aafae0d3286a38d796a7c69a6aec6810cf79/engine/schema/src/main/java/com/cloud/configuration/dao/ResourceCountDaoImpl.java",
                "sha": "dbf2228183bc8fd89f9b897bb3efeb86863a6781",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/4c42aafae0d3286a38d796a7c69a6aec6810cf79/plugins/deployment-planners/implicit-dedication/src/main/java/com/cloud/deploy/ImplicitDedicationPlanner.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/deployment-planners/implicit-dedication/src/main/java/com/cloud/deploy/ImplicitDedicationPlanner.java?ref=4c42aafae0d3286a38d796a7c69a6aec6810cf79",
                "deletions": 5,
                "filename": "plugins/deployment-planners/implicit-dedication/src/main/java/com/cloud/deploy/ImplicitDedicationPlanner.java",
                "patch": "@@ -39,6 +39,7 @@\n import com.cloud.utils.NumbersUtil;\n import com.cloud.vm.VMInstanceVO;\n import com.cloud.vm.VirtualMachineProfile;\n+import org.springframework.util.CollectionUtils;\n \n public class ImplicitDedicationPlanner extends FirstFitPlanner implements DeploymentClusterPlanner {\n \n@@ -256,14 +257,15 @@ public PlannerResourceUsage getResourceUsage(VirtualMachineProfile vmProfile, De\n \n             // Get the list of all the hosts in the given clusters\n             List<Long> allHosts = new ArrayList<Long>();\n-            for (Long cluster : clusterList) {\n-                List<HostVO> hostsInCluster = resourceMgr.listAllHostsInCluster(cluster);\n-                for (HostVO hostVO : hostsInCluster) {\n+            if (!CollectionUtils.isEmpty(clusterList)) {\n+                for (Long cluster : clusterList) {\n+                    List<HostVO> hostsInCluster = resourceMgr.listAllHostsInCluster(cluster);\n+                    for (HostVO hostVO : hostsInCluster) {\n \n-                    allHosts.add(hostVO.getId());\n+                        allHosts.add(hostVO.getId());\n+                    }\n                 }\n             }\n-\n             // Go over all the hosts in the cluster and get a list of\n             // 1. All empty hosts, not running any vms.\n             // 2. Hosts running vms for this account and created by a service",
                "raw_url": "https://github.com/apache/cloudstack/raw/4c42aafae0d3286a38d796a7c69a6aec6810cf79/plugins/deployment-planners/implicit-dedication/src/main/java/com/cloud/deploy/ImplicitDedicationPlanner.java",
                "sha": "45f16abd2af678266ec011300a582afde0b4b7c3",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/4c42aafae0d3286a38d796a7c69a6aec6810cf79/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java?ref=4c42aafae0d3286a38d796a7c69a6aec6810cf79",
                "deletions": 2,
                "filename": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "patch": "@@ -2339,7 +2339,10 @@ public int compare(final DiskTO arg0, final DiskTO arg1) {\n                     disk.setCacheMode(DiskDef.DiskCacheMode.valueOf(volumeObjectTO.getCacheMode().toString().toUpperCase()));\n                 }\n             }\n-\n+            if (vm.getDevices() == null) {\n+                s_logger.error(\"There is no devices for\" + vm);\n+                throw new RuntimeException(\"There is no devices for\" + vm);\n+            }\n             vm.getDevices().addDevice(disk);\n         }\n \n@@ -2393,7 +2396,10 @@ private void createVif(final LibvirtVMDef vm, final NicTO nic, final String nicA\n                         + \") is \" + nic.getType() + \" traffic type. So, vsp-vr-ip \" + vrIp + \" is set in the metadata\");\n             }\n         }\n-\n+        if (vm.getDevices() == null) {\n+            s_logger.error(\"LibvirtVMDef object get devices with null result\");\n+            throw new InternalErrorException(\"LibvirtVMDef object get devices with null result\");\n+        }\n         vm.getDevices().addDevice(getVifDriver(nic.getType(), nic.getName()).plug(nic, vm.getPlatformEmulator(), nicAdapter));\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/4c42aafae0d3286a38d796a7c69a6aec6810cf79/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "sha": "f26d8ded0a453038f0bf5d6aaa621fbd8c00ebe6",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/4c42aafae0d3286a38d796a7c69a6aec6810cf79/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/LibvirtStorageAdaptor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/LibvirtStorageAdaptor.java?ref=4c42aafae0d3286a38d796a7c69a6aec6810cf79",
                "deletions": 1,
                "filename": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/LibvirtStorageAdaptor.java",
                "patch": "@@ -522,7 +522,9 @@ public KVMStoragePool createStoragePool(String name, String host, int port, Stri\n                     s_logger.debug(\"Checking path of existing pool \" + poolname + \" against pool we want to create\");\n                     StoragePool p = conn.storagePoolLookupByName(poolname);\n                     LibvirtStoragePoolDef pdef = getStoragePoolDef(conn, p);\n-\n+                    if (pdef == null) {\n+                        throw new CloudRuntimeException(\"Unable to parse the storage pool definition for storage pool \" + poolname);\n+                    }\n                     String targetPath = pdef.getTargetPath();\n                     if (targetPath != null && targetPath.equals(path)) {\n                         s_logger.debug(\"Storage pool utilizing path '\" + path + \"' already exists as pool \" + poolname +",
                "raw_url": "https://github.com/apache/cloudstack/raw/4c42aafae0d3286a38d796a7c69a6aec6810cf79/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/LibvirtStorageAdaptor.java",
                "sha": "63f7872d05e8fb88b9e54e8593b47e3e8cdcdf1e",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/4c42aafae0d3286a38d796a7c69a6aec6810cf79/server/src/main/java/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java?ref=4c42aafae0d3286a38d796a7c69a6aec6810cf79",
                "deletions": 0,
                "filename": "server/src/main/java/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "patch": "@@ -2139,6 +2139,12 @@ public boolean startRemoteAccessVpn(final Network network, final RemoteAccessVpn\n             }\n \n             Answer answer = cmds.getAnswer(\"users\");\n+            if (answer == null) {\n+                s_logger.error(\"Unable to start vpn: unable add users to vpn in zone \" + router.getDataCenterId() + \" for account \" + vpn.getAccountId() + \" on domR: \"\n+                        + router.getInstanceName() + \" due to null answer\");\n+                throw new ResourceUnavailableException(\"Unable to start vpn in zone \" + router.getDataCenterId() + \" for account \" + vpn.getAccountId() + \" on domR: \"\n+                        + router.getInstanceName() + \" due to null answer\", DataCenter.class, router.getDataCenterId());\n+            }\n             if (!answer.getResult()) {\n                 s_logger.error(\"Unable to start vpn: unable add users to vpn in zone \" + router.getDataCenterId() + \" for account \" + vpn.getAccountId() + \" on domR: \"\n                         + router.getInstanceName() + \" due to \" + answer.getDetails());",
                "raw_url": "https://github.com/apache/cloudstack/raw/4c42aafae0d3286a38d796a7c69a6aec6810cf79/server/src/main/java/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "sha": "63587a898359568c0a95956755d406773ce1194b",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/4c42aafae0d3286a38d796a7c69a6aec6810cf79/server/src/main/java/com/cloud/network/router/VpcVirtualNetworkApplianceManagerImpl.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/network/router/VpcVirtualNetworkApplianceManagerImpl.java?ref=4c42aafae0d3286a38d796a7c69a6aec6810cf79",
                "deletions": 6,
                "filename": "server/src/main/java/com/cloud/network/router/VpcVirtualNetworkApplianceManagerImpl.java",
                "patch": "@@ -740,18 +740,20 @@ public boolean startRemoteAccessVpn(final RemoteAccessVpn vpn, final VirtualRout\n             throw new AgentUnavailableException(\"Unable to send commands to virtual router \", router.getHostId(), e);\n         }\n         Answer answer = cmds.getAnswer(\"users\");\n-        if (!answer.getResult()) {\n+        if (answer == null || !answer.getResult()) {\n+            String errorMessage = (answer == null) ? \"null answer object\" : answer.getDetails();\n             s_logger.error(\"Unable to start vpn: unable add users to vpn in zone \" + router.getDataCenterId() + \" for account \" + vpn.getAccountId() + \" on domR: \"\n-                    + router.getInstanceName() + \" due to \" + answer.getDetails());\n+                    + router.getInstanceName() + \" due to \" + errorMessage);\n             throw new ResourceUnavailableException(\"Unable to start vpn: Unable to add users to vpn in zone \" + router.getDataCenterId() + \" for account \" + vpn.getAccountId()\n-            + \" on domR: \" + router.getInstanceName() + \" due to \" + answer.getDetails(), DataCenter.class, router.getDataCenterId());\n+            + \" on domR: \" + router.getInstanceName() + \" due to \" + errorMessage, DataCenter.class, router.getDataCenterId());\n         }\n         answer = cmds.getAnswer(\"startVpn\");\n-        if (!answer.getResult()) {\n+        if (answer == null || !answer.getResult()) {\n+            String errorMessage = (answer == null) ? \"null answer object\" : answer.getDetails();\n             s_logger.error(\"Unable to start vpn in zone \" + router.getDataCenterId() + \" for account \" + vpn.getAccountId() + \" on domR: \" + router.getInstanceName() + \" due to \"\n-                    + answer.getDetails());\n+                    + errorMessage);\n             throw new ResourceUnavailableException(\"Unable to start vpn in zone \" + router.getDataCenterId() + \" for account \" + vpn.getAccountId() + \" on domR: \"\n-                    + router.getInstanceName() + \" due to \" + answer.getDetails(), DataCenter.class, router.getDataCenterId());\n+                    + router.getInstanceName() + \" due to \" + errorMessage, DataCenter.class, router.getDataCenterId());\n         }\n \n         return true;",
                "raw_url": "https://github.com/apache/cloudstack/raw/4c42aafae0d3286a38d796a7c69a6aec6810cf79/server/src/main/java/com/cloud/network/router/VpcVirtualNetworkApplianceManagerImpl.java",
                "sha": "eabfb4337f4ef4b0d719f7b3888abcac98188bc0",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/4c42aafae0d3286a38d796a7c69a6aec6810cf79/server/src/main/java/com/cloud/projects/ProjectManagerImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/projects/ProjectManagerImpl.java?ref=4c42aafae0d3286a38d796a7c69a6aec6810cf79",
                "deletions": 0,
                "filename": "server/src/main/java/com/cloud/projects/ProjectManagerImpl.java",
                "patch": "@@ -479,6 +479,10 @@ public void doInTransactionWithoutResult(TransactionStatus status) throws Resour\n                 throw new InvalidParameterValueException(\"Unable to find account name=\" + newOwnerName + \" in domain id=\" + project.getDomainId());\n             }\n             Account currentOwnerAccount = getProjectOwner(projectId);\n+            if (currentOwnerAccount == null) {\n+                s_logger.error(\"Unable to find the current owner for the project id=\" + projectId);\n+                throw new InvalidParameterValueException(\"Unable to find the current owner for the project id=\" + projectId);\n+            }\n             if (currentOwnerAccount.getId() != futureOwnerAccount.getId()) {\n                 ProjectAccountVO futureOwner = _projectAccountDao.findByProjectIdAccountId(projectId, futureOwnerAccount.getAccountId());\n                 if (futureOwner == null) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/4c42aafae0d3286a38d796a7c69a6aec6810cf79/server/src/main/java/com/cloud/projects/ProjectManagerImpl.java",
                "sha": "48d65189476fd034368461e1458f006fad17a387",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/4c42aafae0d3286a38d796a7c69a6aec6810cf79/server/src/main/java/com/cloud/template/TemplateManagerImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/template/TemplateManagerImpl.java?ref=4c42aafae0d3286a38d796a7c69a6aec6810cf79",
                "deletions": 1,
                "filename": "server/src/main/java/com/cloud/template/TemplateManagerImpl.java",
                "patch": "@@ -1232,7 +1232,10 @@ private boolean attachISOToVM(long vmId, long isoId, boolean attach) {\n \n         // prepare ISO ready to mount on hypervisor resource level\n         TemplateInfo tmplt = prepareIso(isoId, vm.getDataCenterId(), vm.getHostId(), null);\n-\n+        if (tmplt == null) {\n+            s_logger.error(\"Failed to prepare ISO ready to mount on hypervisor resource level\");\n+            throw new CloudRuntimeException(\"Failed to prepare ISO ready to mount on hypervisor resource level\");\n+        }\n         String vmName = vm.getInstanceName();\n \n         HostVO host = _hostDao.findById(vm.getHostId());",
                "raw_url": "https://github.com/apache/cloudstack/raw/4c42aafae0d3286a38d796a7c69a6aec6810cf79/server/src/main/java/com/cloud/template/TemplateManagerImpl.java",
                "sha": "c862adae61fc0d71428b0baadf9186fccbfb1789",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/4c42aafae0d3286a38d796a7c69a6aec6810cf79/server/src/main/java/org/apache/cloudstack/region/gslb/GlobalLoadBalancingRulesServiceImpl.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/org/apache/cloudstack/region/gslb/GlobalLoadBalancingRulesServiceImpl.java?ref=4c42aafae0d3286a38d796a7c69a6aec6810cf79",
                "deletions": 3,
                "filename": "server/src/main/java/org/apache/cloudstack/region/gslb/GlobalLoadBalancingRulesServiceImpl.java",
                "patch": "@@ -650,9 +650,12 @@ private boolean applyGlobalLoadBalancerRuleConfig(long gslbRuleId, boolean revok\n             SiteLoadBalancerConfig siteLb =\n                 new SiteLoadBalancerConfig(gslbLbMapVo.isRevoke(), serviceType, ip.getAddress().addr(), Integer.toString(loadBalancer.getDefaultPortStart()),\n                     dataCenterId);\n-\n-            siteLb.setGslbProviderPublicIp(lookupGslbServiceProvider().getZoneGslbProviderPublicIp(dataCenterId, physicalNetworkId));\n-            siteLb.setGslbProviderPrivateIp(lookupGslbServiceProvider().getZoneGslbProviderPrivateIp(dataCenterId, physicalNetworkId));\n+            GslbServiceProvider gslbProvider = lookupGslbServiceProvider();\n+            if (gslbProvider == null) {\n+                throw new CloudRuntimeException(\"No GSLB provider is available\");\n+            }\n+            siteLb.setGslbProviderPublicIp(gslbProvider.getZoneGslbProviderPublicIp(dataCenterId, physicalNetworkId));\n+            siteLb.setGslbProviderPrivateIp(gslbProvider.getZoneGslbProviderPrivateIp(dataCenterId, physicalNetworkId));\n             siteLb.setWeight(gslbLbMapVo.getWeight());\n \n             zoneSiteLoadbalancerMap.put(network.getDataCenterId(), siteLb);",
                "raw_url": "https://github.com/apache/cloudstack/raw/4c42aafae0d3286a38d796a7c69a6aec6810cf79/server/src/main/java/org/apache/cloudstack/region/gslb/GlobalLoadBalancingRulesServiceImpl.java",
                "sha": "baa3ba02562202bb9a04a2db7c764fcaabb38ade",
                "status": "modified"
            }
        ],
        "message": "[CLOUDSTACK-10356] Fix NPE in Cloudstack found with NPEDetector  (#2573)\n\n* fix https://issues.apache.org/jira/browse/CLOUDSTACK-10356\r\n\r\n* del patch file\r\n\r\n* Update ResourceCountDaoImpl.java\r\n\r\n* fix some format\r\n\r\n* fix code\r\n\r\n* fix error message in VolumeOrchestrator\r\n\r\n* add check null stmt\r\n\r\n* del import unuse class\r\n\r\n* use BooleanUtils to check Boolean\r\n\r\n* fix error message\r\n\r\n* delete unuse function\r\n\r\n* delete the deprecated function  updateDomainCount\r\n\r\n* add error log and throw exception in ProjectManagerImpl.java",
        "parent": "https://github.com/apache/cloudstack/commit/efcd24c2a2cdc5d04b3f6d424305288b1cf88852",
        "patched_files": [
            "TemplateManagerImpl.java",
            "LibvirtComputingResource.java",
            "GlobalLoadBalancingRulesServiceImpl.java",
            "VirtualNetworkApplianceManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "TemplateManagerImplTest.java",
            "LibvirtComputingResourceTest.java",
            "VirtualNetworkApplianceManagerImplTest.java",
            "GlobalLoadBalancingRulesServiceImplTest.java"
        ]
    },
    "cloudstack_4e07dd1": {
        "bug_id": "cloudstack_4e07dd1",
        "commit": "https://github.com/apache/cloudstack/commit/4e07dd1dc4b4618fff2ef25c846ce6b95a8e580d",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/4e07dd1dc4b4618fff2ef25c846ce6b95a8e580d/server/src/com/cloud/api/dispatch/ParamProcessWorker.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/dispatch/ParamProcessWorker.java?ref=4e07dd1dc4b4618fff2ef25c846ce6b95a8e580d",
                "deletions": 2,
                "filename": "server/src/com/cloud/api/dispatch/ParamProcessWorker.java",
                "patch": "@@ -329,8 +329,6 @@ private void setFieldValue(final Field field, final BaseCmd cmdObj, final Object\n                     field.set(cmdObj, listParam);\n                     break;\n                 case UUID:\n-                    if (paramObj.toString().isEmpty())\n-                        break;\n                     final Long internalId = translateUuidToInternalId(paramObj.toString(), annotation);\n                     field.set(cmdObj, internalId);\n                     break;",
                "raw_url": "https://github.com/apache/cloudstack/raw/4e07dd1dc4b4618fff2ef25c846ce6b95a8e580d/server/src/com/cloud/api/dispatch/ParamProcessWorker.java",
                "sha": "ff6d666a8fe9aa27fd6aa256fea8774008b29a4c",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-7581: Empty 'ID' parameters allowed in API calls\nFix is to fail API calls with empty 'id' parameter value upfront rather than going ahead and failing with NPE later on",
        "parent": "https://github.com/apache/cloudstack/commit/7f440854f7bcd41a1bd6581c0239cde2e98261b7",
        "patched_files": [
            "ParamProcessWorker.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "ParamProcessWorkerTest.java"
        ]
    },
    "cloudstack_4e21948": {
        "bug_id": "cloudstack_4e21948",
        "commit": "https://github.com/apache/cloudstack/commit/4e21948f5c73e10cf5d9731b16da3e47a8d46093",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/4e21948f5c73e10cf5d9731b16da3e47a8d46093/server/src/com/cloud/network/router/NetworkHelperImpl.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/NetworkHelperImpl.java?ref=4e21948f5c73e10cf5d9731b16da3e47a8d46093",
                "deletions": 18,
                "filename": "server/src/com/cloud/network/router/NetworkHelperImpl.java",
                "patch": "@@ -372,14 +372,6 @@ protected DomainRouterVO waitRouter(final DomainRouterVO router) {\n         return null;\n     }\n \n-    // @Override\n-    /*\n-     * (non-Javadoc)\n-     * \n-     * @see\n-     * com.cloud.network.router.NetworkHelper#startRouters(org.cloud.network\n-     * .router.deployment.RouterDeploymentDefinition)\n-     */\n     @Override\n     public List<DomainRouterVO> startRouters(final RouterDeploymentDefinition routerDeploymentDefinition) throws StorageUnavailableException, InsufficientCapacityException,\n             ConcurrentOperationException, ResourceUnavailableException {\n@@ -407,15 +399,6 @@ protected DomainRouterVO waitRouter(final DomainRouterVO router) {\n         return runningRouters;\n     }\n \n-    // @Override\n-    /*\n-     * (non-Javadoc)\n-     * \n-     * @see\n-     * com.cloud.network.router.NetworkHelper#startVirtualRouter(com.cloud.vm\n-     * .DomainRouterVO, com.cloud.user.User, com.cloud.user.Account,\n-     * java.util.Map)\n-     */\n     @Override\n     public DomainRouterVO startVirtualRouter(final DomainRouterVO router, final User user, final Account caller, final Map<Param, Object> params)\n             throws StorageUnavailableException, InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {\n@@ -513,7 +496,16 @@ protected String retrieveTemplateName(HypervisorType hType, final long datacente\n             }\n         }\n \n-        return hypervisorsMap.get(hType).valueIn(datacenterId);\n+        // Returning NULL is fine because the simulator will need it when being\n+        // used instead of a real hypervisor.\n+        // The hypervisorsMap contains only real hypervisors.\n+        String templateName = null;\n+        ConfigKey<String> hypervisorConfigKey = hypervisorsMap.get(hType);\n+\n+        if (hypervisorConfigKey != null) {\n+            templateName = hypervisorConfigKey.valueIn(datacenterId);\n+        }\n+        return templateName;\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/cloudstack/raw/4e21948f5c73e10cf5d9731b16da3e47a8d46093/server/src/com/cloud/network/router/NetworkHelperImpl.java",
                "sha": "f589394103ee1f4c1a366e5c9f9b4e91551ed581",
                "status": "modified"
            }
        ],
        "message": "Fixing the NetworkHelperImpl class. It was throwing a NPE due to a hypervisor type SIMULATOR not being in the hashmap.\n\nWhen the refactor took place, we should have changed first structure, then behaviour. By refactoring the deployRouter method\nwe changed how the templateName was retrieved.\nFixed and tested using the simulator and the following Marvin tests\n\ntest_privategateway_acl\ntest_routers\ntest_vpc_vpn\ntest_service_offerings\ntest_volumes\ntest_reset_vm_on_reboot\ntest_multipleips_per_nic\n\nConflicts:\n\tserver/src/com/cloud/network/router/NetworkHelperImpl.java",
        "parent": "https://github.com/apache/cloudstack/commit/025ff72410385941c5da40ad42247f672af50bbe",
        "patched_files": [
            "NetworkHelperImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "NetworkHelperImplTest.java"
        ]
    },
    "cloudstack_501aa7c": {
        "bug_id": "cloudstack_501aa7c",
        "commit": "https://github.com/apache/cloudstack/commit/501aa7cd9199c90d4904b113d159779ffa5b8eeb",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/501aa7cd9199c90d4904b113d159779ffa5b8eeb/engine/schema/src/main/resources/META-INF/db/schema-41200to41300.sql",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/main/resources/META-INF/db/schema-41200to41300.sql?ref=501aa7cd9199c90d4904b113d159779ffa5b8eeb",
                "deletions": 0,
                "filename": "engine/schema/src/main/resources/META-INF/db/schema-41200to41300.sql",
                "patch": "@@ -19,3 +19,5 @@\n -- Schema upgrade from 4.12.0.0 to 4.13.0.0\n --;\n \n+-- DPDK client and server mode support\n+ALTER TABLE `cloud`.`service_offering_details` CHANGE COLUMN `value` `value` TEXT NOT NULL;",
                "raw_url": "https://github.com/apache/cloudstack/raw/501aa7cd9199c90d4904b113d159779ffa5b8eeb/engine/schema/src/main/resources/META-INF/db/schema-41200to41300.sql",
                "sha": "e2221f23f824d658ad3b30f471b4ef23979ba45f",
                "status": "modified"
            },
            {
                "additions": 56,
                "blob_url": "https://github.com/apache/cloudstack/blob/501aa7cd9199c90d4904b113d159779ffa5b8eeb/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/dpdk/DPDKDriver.java",
                "changes": 56,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/dpdk/DPDKDriver.java?ref=501aa7cd9199c90d4904b113d159779ffa5b8eeb",
                "deletions": 0,
                "filename": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/dpdk/DPDKDriver.java",
                "patch": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.cloud.hypervisor.kvm.dpdk;\n+\n+import com.cloud.utils.component.Adapter;\n+\n+import java.util.Map;\n+\n+public interface DPDKDriver extends Adapter {\n+\n+    /**\n+     * Get the next DPDK port name to be created\n+     */\n+    String getNextDpdkPort();\n+\n+    /**\n+     * Get the latest DPDK port number created on a DPDK enabled host\n+     */\n+    int getDpdkLatestPortNumberUsed();\n+\n+    /**\n+     * Add OVS port (if it does not exist) to bridge with DPDK support\n+     */\n+    void addDpdkPort(String bridgeName, String port, String vlan, DPDKHelper.VHostUserMode vHostUserMode, String dpdkOvsPath);\n+\n+    /**\n+     * Since DPDK user client/server mode, retrieve the guest interfaces mode from the DPDK vHost User mode\n+     */\n+    String getGuestInterfacesModeFromDPDKVhostUserMode(DPDKHelper.VHostUserMode dpdKvHostUserMode);\n+\n+    /**\n+     * Get DPDK vHost User mode from extra config. If it is not present, server is returned as default\n+     */\n+    DPDKHelper.VHostUserMode getDPDKvHostUserMode(Map<String, String> extraConfig);\n+\n+    /**\n+     * Check for additional extra 'dpdk-interface' configurations, return them appended\n+     */\n+    String getExtraDpdkProperties(Map<String, String> extraConfig);\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/501aa7cd9199c90d4904b113d159779ffa5b8eeb/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/dpdk/DPDKDriver.java",
                "sha": "f5306e22353d74f579212f541f2369480395a1c3",
                "status": "added"
            },
            {
                "additions": 115,
                "blob_url": "https://github.com/apache/cloudstack/blob/501aa7cd9199c90d4904b113d159779ffa5b8eeb/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/dpdk/DPDKDriverImpl.java",
                "changes": 115,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/dpdk/DPDKDriverImpl.java?ref=501aa7cd9199c90d4904b113d159779ffa5b8eeb",
                "deletions": 0,
                "filename": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/dpdk/DPDKDriverImpl.java",
                "patch": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.cloud.hypervisor.kvm.dpdk;\n+\n+import com.cloud.utils.component.AdapterBase;\n+import com.cloud.utils.script.Script;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.log4j.Logger;\n+\n+import java.util.Map;\n+\n+public class DPDKDriverImpl extends AdapterBase implements DPDKDriver {\n+    static final String DPDK_PORT_PREFIX = \"csdpdk-\";\n+\n+    private final String dpdkPortVhostUserType = \"dpdkvhostuser\";\n+    private final String dpdkPortVhostUserClientType = \"dpdkvhostuserclient\";\n+\n+    private static final Logger s_logger = Logger.getLogger(DPDKDriver.class);\n+\n+    public DPDKDriverImpl() {\n+    }\n+\n+    /**\n+     * Get the next DPDK port name to be created\n+     */\n+    public String getNextDpdkPort() {\n+        int portNumber = getDpdkLatestPortNumberUsed();\n+        return DPDK_PORT_PREFIX + String.valueOf(portNumber + 1);\n+    }\n+\n+    /**\n+     * Get the latest DPDK port number created on a DPDK enabled host\n+     */\n+    public int getDpdkLatestPortNumberUsed() {\n+        s_logger.debug(\"Checking the last DPDK port created\");\n+        String cmd = \"ovs-vsctl show | grep Port | grep \" + DPDK_PORT_PREFIX + \" | \" +\n+                \"awk '{ print $2 }' | sort -rV | head -1\";\n+        String port = Script.runSimpleBashScript(cmd);\n+        int portNumber = 0;\n+        if (StringUtils.isNotBlank(port)) {\n+            String unquotedPort = port.replace(\"\\\"\", \"\");\n+            String dpdkPortNumber = unquotedPort.split(DPDK_PORT_PREFIX)[1];\n+            portNumber = Integer.valueOf(dpdkPortNumber);\n+        }\n+        return portNumber;\n+    }\n+\n+    /**\n+     * Add OVS port (if it does not exist) to bridge with DPDK support\n+     */\n+    public void addDpdkPort(String bridgeName, String port, String vlan, DPDKHelper.VHostUserMode vHostUserMode, String dpdkOvsPath) {\n+        String type = vHostUserMode == DPDKHelper.VHostUserMode.SERVER ?\n+                dpdkPortVhostUserType :\n+                dpdkPortVhostUserClientType;\n+\n+        StringBuilder stringBuilder = new StringBuilder();\n+        stringBuilder.append(String.format(\"ovs-vsctl add-port %s %s \" +\n+                \"vlan_mode=access tag=%s \" +\n+                \"-- set Interface %s type=%s\", bridgeName, port, vlan, port, type));\n+\n+        if (vHostUserMode == DPDKHelper.VHostUserMode.CLIENT) {\n+            stringBuilder.append(String.format(\" options:vhost-server-path=%s/%s\",\n+                    dpdkOvsPath, port));\n+        }\n+\n+        String cmd = stringBuilder.toString();\n+        s_logger.debug(\"DPDK property enabled, executing: \" + cmd);\n+        Script.runSimpleBashScript(cmd);\n+    }\n+\n+    /**\n+     * Since DPDK user client/server mode, retrieve the guest interfaces mode from the DPDK vHost User mode\n+     */\n+    public String getGuestInterfacesModeFromDPDKVhostUserMode(DPDKHelper.VHostUserMode dpdKvHostUserMode) {\n+        return dpdKvHostUserMode == DPDKHelper.VHostUserMode.CLIENT ? \"server\" : \"client\";\n+    }\n+\n+    /**\n+     * Get DPDK vHost User mode from extra config. If it is not present, server is returned as default\n+     */\n+    public DPDKHelper.VHostUserMode getDPDKvHostUserMode(Map<String, String> extraConfig) {\n+        return extraConfig.containsKey(DPDKHelper.DPDK_VHOST_USER_MODE) ?\n+                DPDKHelper.VHostUserMode.fromValue(extraConfig.get(DPDKHelper.DPDK_VHOST_USER_MODE)) :\n+                DPDKHelper.VHostUserMode.SERVER;\n+    }\n+\n+    /**\n+     * Check for additional extra 'dpdk-interface' configurations, return them appended\n+     */\n+    public String getExtraDpdkProperties(Map<String, String> extraConfig) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        for (String key : extraConfig.keySet()) {\n+            if (key.startsWith(DPDKHelper.DPDK_INTERFACE_PREFIX)) {\n+                stringBuilder.append(extraConfig.get(key));\n+            }\n+        }\n+        return stringBuilder.toString();\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/501aa7cd9199c90d4904b113d159779ffa5b8eeb/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/dpdk/DPDKDriverImpl.java",
                "sha": "71da0aefe4087aff783cc1fa57ac981f3f9eeb9b",
                "status": "added"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/501aa7cd9199c90d4904b113d159779ffa5b8eeb/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java?ref=501aa7cd9199c90d4904b113d159779ffa5b8eeb",
                "deletions": 7,
                "filename": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "patch": "@@ -46,8 +46,8 @@\n import javax.xml.parsers.DocumentBuilderFactory;\n import javax.xml.parsers.ParserConfigurationException;\n \n+import com.cloud.hypervisor.kvm.dpdk.DPDKHelper;\n import com.cloud.resource.RequestWrapper;\n-import org.apache.cloudstack.api.ApiConstants;\n import org.apache.cloudstack.storage.to.PrimaryDataStoreTO;\n import org.apache.cloudstack.storage.to.TemplateObjectTO;\n import org.apache.cloudstack.storage.to.VolumeObjectTO;\n@@ -524,9 +524,6 @@ protected String getDefaultScriptsDir() {\n \n     protected boolean dpdkSupport = false;\n     protected String dpdkOvsPath;\n-    protected static final String DPDK_NUMA = ApiConstants.EXTRA_CONFIG + \"-dpdk-numa\";\n-    protected static final String DPDK_HUGE_PAGES = ApiConstants.EXTRA_CONFIG + \"-dpdk-hugepages\";\n-    protected static final String DPDK_INTERFACE_PREFIX = ApiConstants.EXTRA_CONFIG + \"-dpdk-interface-\";\n \n     private String getEndIpFromStartIp(final String startIp, final int numIps) {\n         final String[] tokens = startIp.split(\"[.]\");\n@@ -2073,7 +2070,7 @@ public LibvirtVMDef createVMFromSpec(final VirtualMachineTO vmTO) {\n         vm.setPlatformEmulator(vmTO.getPlatformEmulator());\n \n         Map<String, String> extraConfig = vmTO.getExtraConfig();\n-        if (dpdkSupport && (!extraConfig.containsKey(DPDK_NUMA) || !extraConfig.containsKey(DPDK_HUGE_PAGES))) {\n+        if (dpdkSupport && (!extraConfig.containsKey(DPDKHelper.DPDK_NUMA) || !extraConfig.containsKey(DPDKHelper.DPDK_HUGE_PAGES))) {\n             s_logger.info(\"DPDK is enabled but it needs extra configurations for CPU NUMA and Huge Pages for VM deployment\");\n         }\n \n@@ -2110,7 +2107,7 @@ public LibvirtVMDef createVMFromSpec(final VirtualMachineTO vmTO) {\n         grd.setVcpuNum(vcpus);\n         vm.addComp(grd);\n \n-        if (!extraConfig.containsKey(DPDK_NUMA)) {\n+        if (!extraConfig.containsKey(DPDKHelper.DPDK_NUMA)) {\n             final CpuModeDef cmd = new CpuModeDef();\n             cmd.setMode(_guestCpuMode);\n             cmd.setModel(_guestCpuModel);\n@@ -2238,7 +2235,7 @@ protected void addExtraConfigComponent(Map<String, String> extraConfig, LibvirtV\n         if (MapUtils.isNotEmpty(extraConfig)) {\n             StringBuilder extraConfigBuilder = new StringBuilder();\n             for (String key : extraConfig.keySet()) {\n-                if (!key.startsWith(DPDK_INTERFACE_PREFIX)) {\n+                if (!key.startsWith(DPDKHelper.DPDK_INTERFACE_PREFIX) && !key.equals(DPDKHelper.DPDK_VHOST_USER_MODE)) {\n                     extraConfigBuilder.append(extraConfig.get(key));\n                 }\n             }",
                "raw_url": "https://github.com/apache/cloudstack/raw/501aa7cd9199c90d4904b113d159779ffa5b8eeb/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "sha": "5f2a911d6bed3f37284fdba6986af49da76cccb2",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/501aa7cd9199c90d4904b113d159779ffa5b8eeb/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtVMDef.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtVMDef.java?ref=501aa7cd9199c90d4904b113d159779ffa5b8eeb",
                "deletions": 2,
                "filename": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtVMDef.java",
                "patch": "@@ -1017,6 +1017,7 @@ public String toString() {\n         private String _dpdkSourcePath;\n         private String _dpdkSourcePort;\n         private String _dpdkExtraLines;\n+        private String _interfaceMode;\n \n         public void defBridgeNet(String brName, String targetBrName, String macAddr, NicModel model) {\n             defBridgeNet(brName, targetBrName, macAddr, model, 0);\n@@ -1031,14 +1032,16 @@ public void defBridgeNet(String brName, String targetBrName, String macAddr, Nic\n             _networkRateKBps = networkRateKBps;\n         }\n \n-        public void defDpdkNet(String dpdkSourcePath, String dpdkPort, String macAddress, NicModel model, Integer networkRateKBps, String extra) {\n+        public void defDpdkNet(String dpdkSourcePath, String dpdkPort, String macAddress, NicModel model,\n+                               Integer networkRateKBps, String extra, String interfaceMode) {\n             _netType = GuestNetType.VHOSTUSER;\n             _dpdkSourcePath = dpdkSourcePath;\n             _dpdkSourcePort = dpdkPort;\n             _macAddr = macAddress;\n             _model = model;\n             _networkRateKBps = networkRateKBps;\n             _dpdkExtraLines = extra;\n+            _interfaceMode = interfaceMode;\n         }\n \n         public void defDirectNet(String sourceName, String targetName, String macAddr, NicModel model, String sourceMode) {\n@@ -1184,7 +1187,8 @@ public String toString() {\n             } else if (_netType == GuestNetType.DIRECT) {\n                 netBuilder.append(\"<source dev='\" + _sourceName + \"' mode='\" + _netSourceMode + \"'/>\\n\");\n             } else if (_netType == GuestNetType.VHOSTUSER) {\n-                netBuilder.append(\"<source type='unix' path='\"+ _dpdkSourcePath + _dpdkSourcePort + \"' mode='client'/>\\n\");\n+                netBuilder.append(\"<source type='unix' path='\"+ _dpdkSourcePath + _dpdkSourcePort +\n+                        \"' mode='\" + _interfaceMode + \"'/>\\n\");\n             }\n             if (_networkName != null) {\n                 netBuilder.append(\"<target dev='\" + _networkName + \"'/>\\n\");",
                "raw_url": "https://github.com/apache/cloudstack/raw/501aa7cd9199c90d4904b113d159779ffa5b8eeb/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtVMDef.java",
                "sha": "400e16dba93234b03c445d43e0ab968b9bd3c527",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/cloudstack/blob/501aa7cd9199c90d4904b113d159779ffa5b8eeb/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/OvsVifDriver.java",
                "changes": 74,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/OvsVifDriver.java?ref=501aa7cd9199c90d4904b113d159779ffa5b8eeb",
                "deletions": 55,
                "filename": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/OvsVifDriver.java",
                "patch": "@@ -24,6 +24,9 @@\n \n import javax.naming.ConfigurationException;\n \n+import com.cloud.hypervisor.kvm.dpdk.DPDKDriver;\n+import com.cloud.hypervisor.kvm.dpdk.DPDKDriverImpl;\n+import com.cloud.hypervisor.kvm.dpdk.DPDKHelper;\n import com.cloud.utils.exception.CloudRuntimeException;\n import org.apache.commons.lang.StringUtils;\n import org.apache.log4j.Logger;\n@@ -41,8 +44,7 @@\n public class OvsVifDriver extends VifDriverBase {\n     private static final Logger s_logger = Logger.getLogger(OvsVifDriver.class);\n     private int _timeout;\n-\n-    protected static final String DPDK_PORT_PREFIX = \"csdpdk-\";\n+    private DPDKDriver dpdkDriver;\n \n     @Override\n     public void configure(Map<String, Object> params) throws ConfigurationException {\n@@ -55,6 +57,11 @@ public void configure(Map<String, Object> params) throws ConfigurationException\n             networkScriptsDir = \"scripts/vm/network/vnet\";\n         }\n \n+        String dpdk = (String) params.get(\"openvswitch.dpdk.enabled\");\n+        if (StringUtils.isNotBlank(dpdk) && Boolean.parseBoolean(dpdk)) {\n+            dpdkDriver = new DPDKDriverImpl();\n+        }\n+\n         String value = (String)params.get(\"scripts.timeout\");\n         _timeout = NumbersUtil.parseInt(value, 30 * 60) * 1000;\n     }\n@@ -80,55 +87,6 @@ public void getPifs() {\n         s_logger.debug(\"done looking for pifs, no more bridges\");\n     }\n \n-    /**\n-     * Get the latest DPDK port number created on a DPDK enabled host\n-     */\n-    protected int getDpdkLatestPortNumberUsed() {\n-        s_logger.debug(\"Checking the last DPDK port created\");\n-        String cmd = \"ovs-vsctl show | grep Port | grep \" + DPDK_PORT_PREFIX + \" | \" +\n-                \"awk '{ print $2 }' | sort -rV | head -1\";\n-        String port = Script.runSimpleBashScript(cmd);\n-        int portNumber = 0;\n-        if (StringUtils.isNotBlank(port)) {\n-            String unquotedPort = port.replace(\"\\\"\", \"\");\n-            String dpdkPortNumber = unquotedPort.split(DPDK_PORT_PREFIX)[1];\n-            portNumber = Integer.valueOf(dpdkPortNumber);\n-        }\n-        return portNumber;\n-    }\n-\n-    /**\n-     * Get the next DPDK port name to be created\n-     */\n-    protected String getNextDpdkPort() {\n-        int portNumber = getDpdkLatestPortNumberUsed();\n-        return DPDK_PORT_PREFIX + String.valueOf(portNumber + 1);\n-    }\n-\n-    /**\n-     * Add OVS port (if it does not exist) to bridge with DPDK support\n-     */\n-    protected void addDpdkPort(String bridgeName, String port, String vlan) {\n-        String cmd = String.format(\"ovs-vsctl add-port %s %s \" +\n-                \"vlan_mode=access tag=%s \" +\n-                \"-- set Interface %s type=dpdkvhostuser\", bridgeName, port, vlan, port);\n-        s_logger.debug(\"DPDK property enabled, executing: \" + cmd);\n-        Script.runSimpleBashScript(cmd);\n-    }\n-\n-    /**\n-     * Check for additional extra 'dpdk-interface' configurations, return them appended\n-     */\n-    private String getExtraDpdkProperties(Map<String, String> extraConfig) {\n-        StringBuilder stringBuilder = new StringBuilder();\n-        for (String key : extraConfig.keySet()) {\n-            if (key.startsWith(LibvirtComputingResource.DPDK_INTERFACE_PREFIX)) {\n-                stringBuilder.append(extraConfig.get(key));\n-            }\n-        }\n-        return stringBuilder.toString();\n-    }\n-\n     @Override\n     public InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter, Map<String, String> extraConfig) throws InternalErrorException, LibvirtException {\n         s_logger.debug(\"plugging nic=\" + nic);\n@@ -158,12 +116,18 @@ public InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter, Map<S\n                 if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                     if (_libvirtComputingResource.dpdkSupport && !nic.isDpdkDisabled()) {\n                         s_logger.debug(\"DPDK support enabled: configuring per traffic label \" + trafficLabel);\n-                        if (StringUtils.isBlank(_libvirtComputingResource.dpdkOvsPath)) {\n+                        String dpdkOvsPath = _libvirtComputingResource.dpdkOvsPath;\n+                        if (StringUtils.isBlank(dpdkOvsPath)) {\n                             throw new CloudRuntimeException(\"DPDK is enabled on the host but no OVS path has been provided\");\n                         }\n-                        String port = getNextDpdkPort();\n-                        addDpdkPort(_pifs.get(trafficLabel), port, vlanId);\n-                        intf.defDpdkNet(_libvirtComputingResource.dpdkOvsPath, port, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), 0, getExtraDpdkProperties(extraConfig));\n+                        String port = dpdkDriver.getNextDpdkPort();\n+                        DPDKHelper.VHostUserMode dpdKvHostUserMode = dpdkDriver.getDPDKvHostUserMode(extraConfig);\n+                        dpdkDriver.addDpdkPort(_pifs.get(trafficLabel), port, vlanId, dpdKvHostUserMode, dpdkOvsPath);\n+                        String interfaceMode = dpdkDriver.getGuestInterfacesModeFromDPDKVhostUserMode(dpdKvHostUserMode);\n+                        intf.defDpdkNet(dpdkOvsPath, port, nic.getMac(),\n+                                getGuestNicModel(guestOsType, nicAdapter), 0,\n+                                dpdkDriver.getExtraDpdkProperties(extraConfig),\n+                                interfaceMode);\n                     } else {\n                         s_logger.debug(\"creating a vlan dev and bridge for guest traffic per traffic label \" + trafficLabel);\n                         intf.defBridgeNet(_pifs.get(trafficLabel), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);",
                "raw_url": "https://github.com/apache/cloudstack/raw/501aa7cd9199c90d4904b113d159779ffa5b8eeb/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/OvsVifDriver.java",
                "sha": "8208530ce22da83a2a9b881e5122258ff31421fc",
                "status": "modified"
            },
            {
                "additions": 45,
                "blob_url": "https://github.com/apache/cloudstack/blob/501aa7cd9199c90d4904b113d159779ffa5b8eeb/plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/dpdk/DPDKDriverTest.java",
                "changes": 52,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/dpdk/DPDKDriverTest.java?ref=501aa7cd9199c90d4904b113d159779ffa5b8eeb",
                "deletions": 7,
                "filename": "plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/dpdk/DPDKDriverTest.java",
                "patch": "@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package com.cloud.hypervisor.kvm.resource;\n+package com.cloud.hypervisor.kvm.dpdk;\n \n import com.cloud.utils.script.Script;\n import org.junit.Assert;\n@@ -30,19 +30,25 @@\n import org.powermock.core.classloader.annotations.PrepareForTest;\n import org.powermock.modules.junit4.PowerMockRunner;\n \n+import java.util.HashMap;\n+import java.util.Map;\n+\n @PrepareForTest({ Script.class })\n @RunWith(PowerMockRunner.class)\n-public class OvsVifDriverTest {\n+public class DPDKDriverTest {\n \n     private static final int dpdkPortNumber = 7;\n \n-    private OvsVifDriver driver = new OvsVifDriver();\n+    private DPDKDriver driver = new DPDKDriverImpl();\n+\n+    private Map<String, String> extraConfig;\n \n     @Before\n     public void initMocks() {\n         MockitoAnnotations.initMocks(this);\n         PowerMockito.mockStatic(Script.class);\n         Mockito.when(Script.runSimpleBashScript(Matchers.anyString())).thenReturn(null);\n+        extraConfig = new HashMap<>();\n     }\n \n     @Test\n@@ -53,23 +59,55 @@ public void testGetDpdkLatestPortNumberUsedNoDpdkPorts() {\n     @Test\n     public void testGetDpdkLatestPortNumberUsedExistingDpdkPorts() {\n         Mockito.when(Script.runSimpleBashScript(Matchers.anyString())).\n-                thenReturn(OvsVifDriver.DPDK_PORT_PREFIX + String.valueOf(dpdkPortNumber));\n+                thenReturn(DPDKDriverImpl.DPDK_PORT_PREFIX + String.valueOf(dpdkPortNumber));\n         Assert.assertEquals(dpdkPortNumber, driver.getDpdkLatestPortNumberUsed());\n     }\n \n     @Test\n     public void testGetNextDpdkPortNoDpdkPorts() {\n         Mockito.when(Script.runSimpleBashScript(Matchers.anyString())).\n                 thenReturn(null);\n-        String expectedPortName = OvsVifDriver.DPDK_PORT_PREFIX + String.valueOf(1);\n+        String expectedPortName = DPDKDriverImpl.DPDK_PORT_PREFIX + String.valueOf(1);\n         Assert.assertEquals(expectedPortName, driver.getNextDpdkPort());\n     }\n \n     @Test\n     public void testGetNextDpdkPortExistingDpdkPorts() {\n         Mockito.when(Script.runSimpleBashScript(Matchers.anyString())).\n-                thenReturn(OvsVifDriver.DPDK_PORT_PREFIX + String.valueOf(dpdkPortNumber));\n-        String expectedPortName = OvsVifDriver.DPDK_PORT_PREFIX + String.valueOf(dpdkPortNumber + 1);\n+                thenReturn(DPDKDriverImpl.DPDK_PORT_PREFIX + String.valueOf(dpdkPortNumber));\n+        String expectedPortName = DPDKDriverImpl.DPDK_PORT_PREFIX + String.valueOf(dpdkPortNumber + 1);\n         Assert.assertEquals(expectedPortName, driver.getNextDpdkPort());\n     }\n+\n+    @Test\n+    public void testGetGuestInterfacesModeFromDPDKVhostUserModeClientDPDK() {\n+        String guestMode = driver.getGuestInterfacesModeFromDPDKVhostUserMode(DPDKHelper.VHostUserMode.CLIENT);\n+        Assert.assertEquals(\"server\", guestMode);\n+    }\n+\n+    @Test\n+    public void testGetGuestInterfacesModeFromDPDKVhostUserModeServerDPDK() {\n+        String guestMode = driver.getGuestInterfacesModeFromDPDKVhostUserMode(DPDKHelper.VHostUserMode.SERVER);\n+        Assert.assertEquals(\"client\", guestMode);\n+    }\n+\n+    @Test\n+    public void testGetDPDKvHostUserModeServerExtraConfig() {\n+        extraConfig.put(DPDKHelper.DPDK_VHOST_USER_MODE, DPDKHelper.VHostUserMode.SERVER.toString());\n+        DPDKHelper.VHostUserMode dpdKvHostUserMode = driver.getDPDKvHostUserMode(extraConfig);\n+        Assert.assertEquals(DPDKHelper.VHostUserMode.SERVER, dpdKvHostUserMode);\n+    }\n+\n+    @Test\n+    public void testGetDPDKvHostUserModeServerClientExtraConfig() {\n+        extraConfig.put(DPDKHelper.DPDK_VHOST_USER_MODE, DPDKHelper.VHostUserMode.CLIENT.toString());\n+        DPDKHelper.VHostUserMode dpdKvHostUserMode = driver.getDPDKvHostUserMode(extraConfig);\n+        Assert.assertEquals(DPDKHelper.VHostUserMode.CLIENT, dpdKvHostUserMode);\n+    }\n+\n+    @Test\n+    public void testGetDPDKvHostUserModeServerEmptyExtraConfig() {\n+        DPDKHelper.VHostUserMode dpdKvHostUserMode = driver.getDPDKvHostUserMode(extraConfig);\n+        Assert.assertEquals(DPDKHelper.VHostUserMode.SERVER, dpdKvHostUserMode);\n+    }\n }\n\\ No newline at end of file",
                "previous_filename": "plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/OvsVifDriverTest.java",
                "raw_url": "https://github.com/apache/cloudstack/raw/501aa7cd9199c90d4904b113d159779ffa5b8eeb/plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/dpdk/DPDKDriverTest.java",
                "sha": "a2a62fe3b7afcba686d73c388864a20fe899f507",
                "status": "renamed"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/cloudstack/blob/501aa7cd9199c90d4904b113d159779ffa5b8eeb/server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java?ref=501aa7cd9199c90d4904b113d159779ffa5b8eeb",
                "deletions": 3,
                "filename": "server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java",
                "patch": "@@ -16,8 +16,10 @@\n // under the License.\n package com.cloud.configuration;\n \n+import java.io.UnsupportedEncodingException;\n import java.net.URI;\n import java.net.URISyntaxException;\n+import java.net.URLDecoder;\n import java.sql.Date;\n import java.sql.PreparedStatement;\n import java.util.ArrayList;\n@@ -2492,17 +2494,26 @@ protected ServiceOfferingVO createServiceOffering(final long userId, final boole\n             }\n             detailsVO = new ArrayList<ServiceOfferingDetailsVO>();\n             for (final Entry<String, String> detailEntry : details.entrySet()) {\n+                String detailEntryValue = detailEntry.getValue();\n                 if (detailEntry.getKey().equals(GPU.Keys.pciDevice.toString())) {\n-                    if (detailEntry.getValue() == null) {\n+                    if (detailEntryValue == null) {\n                         throw new InvalidParameterValueException(\"Please specify a GPU Card.\");\n                     }\n                 }\n                 if (detailEntry.getKey().equals(GPU.Keys.vgpuType.toString())) {\n-                    if (detailEntry.getValue() == null) {\n+                    if (detailEntryValue == null) {\n                         throw new InvalidParameterValueException(\"vGPUType value cannot be null\");\n                     }\n                 }\n-                detailsVO.add(new ServiceOfferingDetailsVO(offering.getId(), detailEntry.getKey(), detailEntry.getValue(), true));\n+                if (detailEntry.getKey().startsWith(ApiConstants.EXTRA_CONFIG)) {\n+                    try {\n+                        detailEntryValue = URLDecoder.decode(detailEntry.getValue(), \"UTF-8\");\n+                    } catch (UnsupportedEncodingException | IllegalArgumentException e) {\n+                        s_logger.error(\"Cannot decode extra configuration value for key: \" + detailEntry.getKey() + \", skipping it\");\n+                        continue;\n+                    }\n+                }\n+                detailsVO.add(new ServiceOfferingDetailsVO(offering.getId(), detailEntry.getKey(), detailEntryValue, true));\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/501aa7cd9199c90d4904b113d159779ffa5b8eeb/server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java",
                "sha": "8df175092ae5f660c7ec075969061324114b67d9",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/501aa7cd9199c90d4904b113d159779ffa5b8eeb/server/src/main/java/com/cloud/hypervisor/HypervisorGuruBase.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/hypervisor/HypervisorGuruBase.java?ref=501aa7cd9199c90d4904b113d159779ffa5b8eeb",
                "deletions": 3,
                "filename": "server/src/main/java/com/cloud/hypervisor/HypervisorGuruBase.java",
                "patch": "@@ -72,7 +72,7 @@\n     @Inject\n     private ResourceManager _resourceMgr;\n     @Inject\n-    private ServiceOfferingDetailsDao _serviceOfferingDetailsDao;\n+    protected ServiceOfferingDetailsDao _serviceOfferingDetailsDao;\n     @Inject\n     private ServiceOfferingDao _serviceOfferingDao;\n \n@@ -172,8 +172,8 @@ protected VirtualMachineTO toVirtualMachineTO(VirtualMachineProfile vmProfile) {\n         }\n \n         // Set GPU details\n-        ServiceOfferingDetailsVO offeringDetail = null;\n-        if ((offeringDetail = _serviceOfferingDetailsDao.findDetail(offering.getId(), GPU.Keys.vgpuType.toString())) != null) {\n+        ServiceOfferingDetailsVO offeringDetail = _serviceOfferingDetailsDao.findDetail(offering.getId(), GPU.Keys.vgpuType.toString());\n+        if (offeringDetail != null) {\n             ServiceOfferingDetailsVO groupName = _serviceOfferingDetailsDao.findDetail(offering.getId(), GPU.Keys.pciDevice.toString());\n             to.setGpuDevice(_resourceMgr.getGPUDevice(vm.getHostId(), groupName.getValue(), offeringDetail.getValue()));\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/501aa7cd9199c90d4904b113d159779ffa5b8eeb/server/src/main/java/com/cloud/hypervisor/HypervisorGuruBase.java",
                "sha": "6410b43e4288ec9dbec983f1bd5e3dd93832963c",
                "status": "modified"
            },
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/cloudstack/blob/501aa7cd9199c90d4904b113d159779ffa5b8eeb/server/src/main/java/com/cloud/hypervisor/KVMGuru.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/hypervisor/KVMGuru.java?ref=501aa7cd9199c90d4904b113d159779ffa5b8eeb",
                "deletions": 0,
                "filename": "server/src/main/java/com/cloud/hypervisor/KVMGuru.java",
                "patch": "@@ -22,6 +22,9 @@\n import com.cloud.host.HostVO;\n import com.cloud.host.dao.HostDao;\n import com.cloud.hypervisor.Hypervisor.HypervisorType;\n+import com.cloud.hypervisor.kvm.dpdk.DPDKHelper;\n+import com.cloud.offering.ServiceOffering;\n+import com.cloud.service.ServiceOfferingDetailsVO;\n import com.cloud.storage.DataStoreRole;\n import com.cloud.storage.GuestOSHypervisorVO;\n import com.cloud.storage.GuestOSVO;\n@@ -31,13 +34,16 @@\n import com.cloud.utils.exception.CloudRuntimeException;\n import com.cloud.vm.VirtualMachine;\n import com.cloud.vm.VirtualMachineProfile;\n+import org.apache.cloudstack.api.ApiConstants;\n import org.apache.cloudstack.storage.command.CopyCommand;\n import org.apache.cloudstack.storage.command.StorageSubSystemCommand;\n+import org.apache.commons.collections.CollectionUtils;\n import org.apache.log4j.Logger;\n \n import javax.inject.Inject;\n import java.math.BigDecimal;\n import java.math.RoundingMode;\n+import java.util.List;\n import java.util.Map;\n \n public class KVMGuru extends HypervisorGuruBase implements HypervisorGuru {\n@@ -47,6 +53,8 @@\n     GuestOSHypervisorDao _guestOsHypervisorDao;\n     @Inject\n     HostDao _hostDao;\n+    @Inject\n+    DPDKHelper dpdkHelper;\n \n     public static final Logger s_logger = Logger.getLogger(KVMGuru.class);\n \n@@ -106,6 +114,11 @@ protected void setVmQuotaPercentage(VirtualMachineTO to, VirtualMachineProfile v\n     public VirtualMachineTO implement(VirtualMachineProfile vm) {\n         VirtualMachineTO to = toVirtualMachineTO(vm);\n         setVmQuotaPercentage(to, vm);\n+        addServiceOfferingExtraConfiguration(to, vm);\n+\n+        if (dpdkHelper.isDPDKvHostUserModeSettingOnServiceOffering(vm)) {\n+            dpdkHelper.setDpdkVhostUserMode(to, vm);\n+        }\n \n         // Determine the VM's OS description\n         GuestOSVO guestOS = _guestOsDao.findByIdIncludingRemoved(vm.getVirtualMachine().getGuestOSId());\n@@ -124,6 +137,24 @@ public VirtualMachineTO implement(VirtualMachineProfile vm) {\n         return to;\n     }\n \n+    /**\n+     * Add extra configurations from service offering to the VM TO.\n+     * Extra configuration keys are expected in formats:\n+     * - \"extraconfig-N\"\n+     * - \"extraconfig-CONFIG_NAME\"\n+     */\n+    protected void addServiceOfferingExtraConfiguration(VirtualMachineTO to, VirtualMachineProfile vmProfile) {\n+        ServiceOffering offering = vmProfile.getServiceOffering();\n+        List<ServiceOfferingDetailsVO> details = _serviceOfferingDetailsDao.listDetails(offering.getId());\n+        if (CollectionUtils.isNotEmpty(details)) {\n+            for (ServiceOfferingDetailsVO detail : details) {\n+                if (detail.getName().startsWith(ApiConstants.EXTRA_CONFIG)) {\n+                    to.addExtraConfig(detail.getName(), detail.getValue());\n+                }\n+            }\n+        }\n+    }\n+\n     @Override\n     public Pair<Boolean, Long> getCommandHostDelegation(long hostId, Command cmd) {\n         if (cmd instanceof StorageSubSystemCommand) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/501aa7cd9199c90d4904b113d159779ffa5b8eeb/server/src/main/java/com/cloud/hypervisor/KVMGuru.java",
                "sha": "5d206388804708440f4bc6dfad67394c0ea1f03d",
                "status": "modified"
            },
            {
                "additions": 66,
                "blob_url": "https://github.com/apache/cloudstack/blob/501aa7cd9199c90d4904b113d159779ffa5b8eeb/server/src/main/java/com/cloud/hypervisor/kvm/dpdk/DPDKHelper.java",
                "changes": 66,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/hypervisor/kvm/dpdk/DPDKHelper.java?ref=501aa7cd9199c90d4904b113d159779ffa5b8eeb",
                "deletions": 0,
                "filename": "server/src/main/java/com/cloud/hypervisor/kvm/dpdk/DPDKHelper.java",
                "patch": "@@ -0,0 +1,66 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.hypervisor.kvm.dpdk;\n+\n+import com.cloud.agent.api.to.VirtualMachineTO;\n+import com.cloud.vm.VirtualMachineProfile;\n+import org.apache.cloudstack.api.ApiConstants;\n+\n+public interface DPDKHelper {\n+\n+    String DPDK_VHOST_USER_MODE = \"DPDK-VHOSTUSER\";\n+    String DPDK_NUMA = ApiConstants.EXTRA_CONFIG + \"-dpdk-numa\";\n+    String DPDK_HUGE_PAGES = ApiConstants.EXTRA_CONFIG + \"-dpdk-hugepages\";\n+    String DPDK_INTERFACE_PREFIX = ApiConstants.EXTRA_CONFIG + \"-dpdk-interface-\";\n+\n+    enum VHostUserMode {\n+        CLIENT(\"client\"), SERVER(\"server\");\n+\n+        private String str;\n+\n+        VHostUserMode(String str) {\n+            this.str = str;\n+        }\n+\n+        public static VHostUserMode fromValue(String val) {\n+            if (val.equalsIgnoreCase(\"client\")) {\n+                return CLIENT;\n+            } else if (val.equalsIgnoreCase(\"server\")) {\n+                return SERVER;\n+            } else {\n+                throw new IllegalArgumentException(\"Invalid DPDK vHost User mode:\" + val);\n+            }\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return str;\n+        }\n+    }\n+\n+    /**\n+     * True if the DPDK vHost user mode setting is part of the VM service offering details, false if not.\n+     * @param vm\n+     */\n+    boolean isDPDKvHostUserModeSettingOnServiceOffering(VirtualMachineProfile vm);\n+\n+    /**\n+     * Add DPDK vHost User Mode as extra configuration to the VM TO (if present on the VM service offering details)\n+     */\n+    void setDpdkVhostUserMode(VirtualMachineTO to, VirtualMachineProfile vm);\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/501aa7cd9199c90d4904b113d159779ffa5b8eeb/server/src/main/java/com/cloud/hypervisor/kvm/dpdk/DPDKHelper.java",
                "sha": "f1dadc0e7304eadf9a77d7b77f704c4a27709d94",
                "status": "added"
            },
            {
                "additions": 68,
                "blob_url": "https://github.com/apache/cloudstack/blob/501aa7cd9199c90d4904b113d159779ffa5b8eeb/server/src/main/java/com/cloud/hypervisor/kvm/dpdk/DPDKHelperImpl.java",
                "changes": 68,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/hypervisor/kvm/dpdk/DPDKHelperImpl.java?ref=501aa7cd9199c90d4904b113d159779ffa5b8eeb",
                "deletions": 0,
                "filename": "server/src/main/java/com/cloud/hypervisor/kvm/dpdk/DPDKHelperImpl.java",
                "patch": "@@ -0,0 +1,68 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.hypervisor.kvm.dpdk;\n+\n+import com.cloud.agent.api.to.VirtualMachineTO;\n+import com.cloud.offering.ServiceOffering;\n+import com.cloud.service.ServiceOfferingDetailsVO;\n+import com.cloud.service.dao.ServiceOfferingDetailsDao;\n+import com.cloud.utils.exception.CloudRuntimeException;\n+import com.cloud.vm.VirtualMachineProfile;\n+import org.apache.log4j.Logger;\n+\n+import javax.inject.Inject;\n+\n+public class DPDKHelperImpl implements DPDKHelper {\n+\n+    @Inject\n+    ServiceOfferingDetailsDao serviceOfferingDetailsDao;\n+\n+    public static final Logger s_logger = Logger.getLogger(DPDKHelperImpl.class);\n+\n+    private ServiceOffering getServiceOfferingFromVMProfile(VirtualMachineProfile virtualMachineProfile) {\n+        ServiceOffering offering = virtualMachineProfile.getServiceOffering();\n+        if (offering == null) {\n+            throw new CloudRuntimeException(\"VM does not have an associated service offering\");\n+        }\n+        return offering;\n+    }\n+\n+    @Override\n+    public boolean isDPDKvHostUserModeSettingOnServiceOffering(VirtualMachineProfile vm) {\n+        ServiceOffering offering = getServiceOfferingFromVMProfile(vm);\n+        ServiceOfferingDetailsVO detail = serviceOfferingDetailsDao.findDetail(offering.getId(), DPDK_VHOST_USER_MODE);\n+        return detail != null;\n+    }\n+\n+    @Override\n+    public void setDpdkVhostUserMode(VirtualMachineTO to, VirtualMachineProfile vm) {\n+        ServiceOffering offering = getServiceOfferingFromVMProfile(vm);\n+        ServiceOfferingDetailsVO detail = serviceOfferingDetailsDao.findDetail(offering.getId(), DPDK_VHOST_USER_MODE);\n+        if (detail != null) {\n+            String mode = detail.getValue();\n+            try {\n+                VHostUserMode dpdKvHostUserMode = VHostUserMode.fromValue(mode);\n+                to.addExtraConfig(DPDK_VHOST_USER_MODE, dpdKvHostUserMode.toString());\n+            } catch (IllegalArgumentException e) {\n+                s_logger.error(String.format(\"DPDK vHost User mode found as a detail for service offering: %s \" +\n+                                \"but value: %s is not supported. Supported values: %s, %s\",\n+                        offering.getId(), mode,\n+                        VHostUserMode.CLIENT.toString(), VHostUserMode.SERVER.toString()));\n+            }\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/501aa7cd9199c90d4904b113d159779ffa5b8eeb/server/src/main/java/com/cloud/hypervisor/kvm/dpdk/DPDKHelperImpl.java",
                "sha": "70d448fc8a203477c64afba16ef37b1824e31aa7",
                "status": "added"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/501aa7cd9199c90d4904b113d159779ffa5b8eeb/server/src/main/resources/META-INF/cloudstack/core/spring-server-core-misc-context.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/resources/META-INF/cloudstack/core/spring-server-core-misc-context.xml?ref=501aa7cd9199c90d4904b113d159779ffa5b8eeb",
                "deletions": 0,
                "filename": "server/src/main/resources/META-INF/cloudstack/core/spring-server-core-misc-context.xml",
                "patch": "@@ -78,5 +78,7 @@\n     <bean id=\"ExternalIpAddressAllocator\" class=\"com.cloud.network.ExternalIpAddressAllocator\">\n         <property name=\"name\" value=\"Basic\" />\n     </bean>\n+\n+    <bean id=\"DPDKHelper\" class=\"com.cloud.hypervisor.kvm.dpdk.DPDKHelperImpl\" />\n     \n </beans>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/501aa7cd9199c90d4904b113d159779ffa5b8eeb/server/src/main/resources/META-INF/cloudstack/core/spring-server-core-misc-context.xml",
                "sha": "a201250d92d12e1c40e49f7656d39b3078d49aad",
                "status": "modified"
            },
            {
                "additions": 49,
                "blob_url": "https://github.com/apache/cloudstack/blob/501aa7cd9199c90d4904b113d159779ffa5b8eeb/server/src/test/java/com/cloud/hypervisor/KVMGuruTest.java",
                "changes": 52,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/test/java/com/cloud/hypervisor/KVMGuruTest.java?ref=501aa7cd9199c90d4904b113d159779ffa5b8eeb",
                "deletions": 3,
                "filename": "server/src/test/java/com/cloud/hypervisor/KVMGuruTest.java",
                "patch": "@@ -19,9 +19,13 @@\n import com.cloud.agent.api.to.VirtualMachineTO;\n import com.cloud.host.HostVO;\n import com.cloud.host.dao.HostDao;\n+import com.cloud.offering.ServiceOffering;\n+import com.cloud.service.ServiceOfferingDetailsVO;\n+import com.cloud.service.dao.ServiceOfferingDetailsDao;\n import com.cloud.utils.exception.CloudRuntimeException;\n import com.cloud.vm.VirtualMachine;\n import com.cloud.vm.VirtualMachineProfile;\n+import org.apache.cloudstack.api.ApiConstants;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n@@ -31,11 +35,16 @@\n import org.mockito.Spy;\n import org.mockito.runners.MockitoJUnitRunner;\n \n+import java.io.UnsupportedEncodingException;\n+import java.util.Arrays;\n+\n @RunWith(MockitoJUnitRunner.class)\n public class KVMGuruTest {\n \n     @Mock\n     HostDao hostDao;\n+    @Mock\n+    ServiceOfferingDetailsDao serviceOfferingDetailsDao;\n \n     @Spy\n     @InjectMocks\n@@ -49,18 +58,42 @@\n     VirtualMachine vm;\n     @Mock\n     HostVO host;\n+    @Mock\n+    ServiceOffering serviceOffering;\n+    @Mock\n+    ServiceOfferingDetailsVO detail1;\n+    @Mock\n+    ServiceOfferingDetailsVO detail2;\n+\n+    private static final long hostId = 1L;\n+    private static final Long offeringId = 1L;\n \n-    private static final long hostId = 1l;\n+    private static final String detail1Key = ApiConstants.EXTRA_CONFIG + \"-config-1\";\n+    private static final String detail1Value = \"value1\";\n+    private static final String detail2Key = \"detail2\";\n+    private static final String detail2Value = \"value2\";\n \n     @Before\n-    public void setup() {\n+    public void setup() throws UnsupportedEncodingException {\n         Mockito.when(vmTO.getLimitCpuUse()).thenReturn(true);\n         Mockito.when(vmProfile.getVirtualMachine()).thenReturn(vm);\n         Mockito.when(vm.getHostId()).thenReturn(hostId);\n         Mockito.when(hostDao.findById(hostId)).thenReturn(host);\n         Mockito.when(host.getCpus()).thenReturn(3);\n-        Mockito.when(host.getSpeed()).thenReturn(1995l);\n+        Mockito.when(host.getSpeed()).thenReturn(1995L);\n         Mockito.when(vmTO.getMaxSpeed()).thenReturn(500);\n+        Mockito.when(serviceOffering.getId()).thenReturn(offeringId);\n+        Mockito.when(vmProfile.getServiceOffering()).thenReturn(serviceOffering);\n+\n+        Mockito.when(detail1.getName()).thenReturn(detail1Key);\n+        Mockito.when(detail1.getValue()).thenReturn(detail1Value);\n+        Mockito.when(detail1.getResourceId()).thenReturn(offeringId);\n+        Mockito.when(detail2.getName()).thenReturn(detail2Key);\n+        Mockito.when(detail2.getResourceId()).thenReturn(offeringId);\n+        Mockito.when(detail2.getValue()).thenReturn(detail2Value);\n+\n+        Mockito.when(serviceOfferingDetailsDao.listDetails(offeringId)).thenReturn(\n+                Arrays.asList(detail1, detail2));\n     }\n \n     @Test\n@@ -96,4 +129,17 @@ public void testSetVmQuotaPercentageOverProvision() {\n         guru.setVmQuotaPercentage(vmTO, vmProfile);\n         Mockito.verify(vmTO).setCpuQuotaPercentage(1d);\n     }\n+\n+    @Test\n+    public void testAddServiceOfferingExtraConfigurationDpdkDetails() {\n+        guru.addServiceOfferingExtraConfiguration(vmTO, vmProfile);\n+        Mockito.verify(vmTO).addExtraConfig(detail1Key, detail1Value);\n+    }\n+\n+    @Test\n+    public void testAddServiceOfferingExtraConfigurationEmptyDetails() {\n+        Mockito.when(serviceOfferingDetailsDao.listDetails(offeringId)).thenReturn(null);\n+        guru.addServiceOfferingExtraConfiguration(vmTO, vmProfile);\n+        Mockito.verify(vmTO, Mockito.never()).addExtraConfig(Mockito.anyString(), Mockito.anyString());\n+    }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/501aa7cd9199c90d4904b113d159779ffa5b8eeb/server/src/test/java/com/cloud/hypervisor/KVMGuruTest.java",
                "sha": "e4deffdf53520e8d41195d3546d1822d2e6f95c8",
                "status": "modified"
            },
            {
                "additions": 135,
                "blob_url": "https://github.com/apache/cloudstack/blob/501aa7cd9199c90d4904b113d159779ffa5b8eeb/server/src/test/java/com/cloud/hypervisor/kvm/dpdk/DPDKHelperImplTest.java",
                "changes": 135,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/test/java/com/cloud/hypervisor/kvm/dpdk/DPDKHelperImplTest.java?ref=501aa7cd9199c90d4904b113d159779ffa5b8eeb",
                "deletions": 0,
                "filename": "server/src/test/java/com/cloud/hypervisor/kvm/dpdk/DPDKHelperImplTest.java",
                "patch": "@@ -0,0 +1,135 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.hypervisor.kvm.dpdk;\n+\n+import com.cloud.agent.api.to.VirtualMachineTO;\n+import com.cloud.offering.ServiceOffering;\n+import com.cloud.service.ServiceOfferingDetailsVO;\n+import com.cloud.service.dao.ServiceOfferingDetailsDao;\n+import com.cloud.vm.VirtualMachineProfile;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.Spy;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.util.Arrays;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class DPDKHelperImplTest {\n+\n+    @Mock\n+    ServiceOfferingDetailsDao serviceOfferingDetailsDao;\n+\n+    @Spy\n+    @InjectMocks\n+    private DPDKHelper dpdkHelper = new DPDKHelperImpl();\n+\n+    @Mock\n+    VirtualMachineTO vmTO;\n+    @Mock\n+    VirtualMachineProfile vmProfile;\n+    @Mock\n+    ServiceOfferingDetailsVO dpdkVhostUserModeDetailVO;\n+    @Mock\n+    ServiceOfferingDetailsVO dpdkNumaDetailVO;\n+    @Mock\n+    ServiceOfferingDetailsVO dpdkHugePagesDetailVO;\n+    @Mock\n+    ServiceOffering serviceOffering;\n+\n+    private String dpdkVhostMode = DPDKHelper.VHostUserMode.SERVER.toString();\n+\n+    private static final String dpdkNumaConf =\n+            \"<cpu mode=\\\"host-passthrough\\\">\\n\" +\n+                    \"  <numa>\\n\" +\n+                    \"    <cell id=\\\"0\\\" cpus=\\\"0\\\" memory=\\\"9437184\\\" unit=\\\"KiB\\\" memAccess=\\\"shared\\\"/>\\n\" +\n+                    \"  </numa>\\n\" +\n+                    \"</cpu>\";\n+    private static final String dpdkHugePagesConf =\n+            \"<memoryBacking>\\n\" +\n+                    \"  <hugePages/>\\n\" +\n+                    \"</memoryBacking>\";\n+    private static String dpdkNumaValue;\n+    private static String dpdkHugePagesValue;\n+    private static final Long offeringId = 1L;\n+\n+    @Before\n+    public void setup() throws UnsupportedEncodingException {\n+        dpdkHugePagesValue = URLEncoder.encode(dpdkHugePagesConf, \"UTF-8\");\n+        dpdkNumaValue = URLEncoder.encode(dpdkNumaConf, \"UTF-8\");\n+\n+        Mockito.when(dpdkVhostUserModeDetailVO.getName()).thenReturn(DPDKHelper.DPDK_VHOST_USER_MODE);\n+        Mockito.when(dpdkVhostUserModeDetailVO.getValue()).thenReturn(dpdkVhostMode);\n+        Mockito.when(dpdkVhostUserModeDetailVO.getResourceId()).thenReturn(offeringId);\n+        Mockito.when(dpdkNumaDetailVO.getName()).thenReturn(DPDKHelper.DPDK_NUMA);\n+        Mockito.when(dpdkNumaDetailVO.getResourceId()).thenReturn(offeringId);\n+        Mockito.when(dpdkNumaDetailVO.getValue()).thenReturn(dpdkNumaValue);\n+        Mockito.when(dpdkHugePagesDetailVO.getName()).thenReturn(DPDKHelper.DPDK_HUGE_PAGES);\n+        Mockito.when(dpdkHugePagesDetailVO.getResourceId()).thenReturn(offeringId);\n+        Mockito.when(dpdkHugePagesDetailVO.getValue()).thenReturn(dpdkHugePagesValue);\n+\n+        Mockito.when(serviceOfferingDetailsDao.listDetails(offeringId)).thenReturn(\n+                Arrays.asList(dpdkNumaDetailVO, dpdkHugePagesDetailVO, dpdkVhostUserModeDetailVO));\n+        Mockito.when(vmProfile.getServiceOffering()).thenReturn(serviceOffering);\n+        Mockito.when(serviceOffering.getId()).thenReturn(offeringId);\n+    }\n+\n+    @Test\n+    public void testSetDpdkVhostUserModeValidDetail() {\n+        Mockito.when(serviceOfferingDetailsDao.findDetail(offeringId, DPDKHelper.DPDK_VHOST_USER_MODE)).\n+                thenReturn(dpdkVhostUserModeDetailVO);\n+        dpdkHelper.setDpdkVhostUserMode(vmTO, vmProfile);\n+        Mockito.verify(vmTO).addExtraConfig(DPDKHelper.DPDK_VHOST_USER_MODE, dpdkVhostMode);\n+    }\n+\n+    @Test\n+    public void testSetDpdkVhostUserModeInvalidDetail() {\n+        Mockito.when(dpdkVhostUserModeDetailVO.getValue()).thenReturn(\"serverrrr\");\n+        Mockito.verify(vmTO, Mockito.never()).addExtraConfig(Mockito.anyString(), Mockito.anyString());\n+    }\n+\n+    @Test\n+    public void testSetDpdkVhostUserModeNotExistingDetail() {\n+        Mockito.when(serviceOfferingDetailsDao.listDetails(offeringId)).thenReturn(\n+                Arrays.asList(dpdkNumaDetailVO, dpdkHugePagesDetailVO));\n+        Mockito.verify(vmTO, Mockito.never()).addExtraConfig(Mockito.anyString(), Mockito.anyString());\n+    }\n+\n+    @Test\n+    public void testDPDKvHostUserFromValueClient() {\n+        DPDKHelper.VHostUserMode mode = DPDKHelper.VHostUserMode.fromValue(\"client\");\n+        Assert.assertEquals(DPDKHelper.VHostUserMode.CLIENT, mode);\n+    }\n+\n+    @Test\n+    public void testDPDKvHostUserFromValueServer() {\n+        DPDKHelper.VHostUserMode mode = DPDKHelper.VHostUserMode.fromValue(\"server\");\n+        Assert.assertEquals(DPDKHelper.VHostUserMode.SERVER, mode);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testDPDKvHostUserFromValueServerInvalid() {\n+        DPDKHelper.VHostUserMode.fromValue(\"serverrrr\");\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/501aa7cd9199c90d4904b113d159779ffa5b8eeb/server/src/test/java/com/cloud/hypervisor/kvm/dpdk/DPDKHelperImplTest.java",
                "sha": "b666ad4a0c164faf10372a152871b8469785a33e",
                "status": "added"
            }
        ],
        "message": "DPDK vHost User mode selection (#3153)\n\n* DPDK vHost User mode selection\r\n\r\n* SQL text field and DPDK classes refactor\r\n\r\n* Fix NullPointerException after refactor\r\n\r\n* Fix unit test\r\n\r\n* Refactor details type",
        "parent": "https://github.com/apache/cloudstack/commit/4e8f14975a3c1e6e2beec0a8e049e04b26f0930c",
        "patched_files": [
            "schema-41200to41300.sql",
            "DPDKDriverImpl.java",
            "LibvirtComputingResource.java",
            "DPDKDriver.java",
            "OvsVifDriver.java",
            "HypervisorGuruBase.java",
            "DPDKHelper.java",
            "LibvirtVMDef.java",
            "ConfigurationManagerImpl.java",
            "spring-server-core-misc-context.xml",
            "KVMGuru.java",
            "DPDKHelperImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "DPDKHelperImplTest.java",
            "DPDKDriverTest.java",
            "LibvirtComputingResourceTest.java",
            "LibvirtVMDefTest.java",
            "KVMGuruTest.java"
        ]
    },
    "cloudstack_530b0be": {
        "bug_id": "cloudstack_530b0be",
        "commit": "https://github.com/apache/cloudstack/commit/530b0beb3c8b172fbfaf89584cd24785b7513998",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/530b0beb3c8b172fbfaf89584cd24785b7513998/plugins/network-elements/cisco-vnmc/scripts/network/cisco/create-egress-acl-rule.xml",
                "changes": 53,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/cisco-vnmc/scripts/network/cisco/create-egress-acl-rule.xml?ref=530b0beb3c8b172fbfaf89584cd24785b7513998",
                "deletions": 43,
                "filename": "plugins/network-elements/cisco-vnmc/scripts/network/cisco/create-egress-acl-rule.xml",
                "patch": "@@ -118,70 +118,38 @@ under the License.\n       <policyNetworkExpression\r\n         dn=\"%aclruledn%/rule-cond-4/nw-expr2\"\r\n         id=\"2\"\r\n-        opr=\"eq\"\r\n+        opr=\"range\"\r\n         status=\"created\"/>\r\n     </pair>\r\n     <pair key=\"%aclruledn%/rule-cond-4/nw-expr2/nw-attr-qual\">\r\n       <policyNwAttrQualifier\r\n-        attrEp=\"source\"\r\n+        attrEp=\"destination\"\r\n         dn=\"%aclruledn%/rule-cond-4/nw-expr2/nw-attr-qual\"\r\n         status=\"created\"/>\r\n     </pair>\r\n-    <pair key=\"%aclruledn%/rule-cond-4/nw-expr2/nw-ip-2\">\r\n-      <policyIPAddress\r\n-        dataType=\"string\"\r\n-        descr=\"\"\r\n-        dn=\"%aclruledn%/rule-cond-4/nw-expr2/nw-ip-2\"\r\n-        id=\"2\"\r\n-        name=\"\"\r\n-        placement=\"none\"\r\n-        status=\"created\"\r\n-        value=\"%sourceip%\"/>\r\n-    </pair>\r\n-\r\n-    <pair key=\"%aclruledn%/rule-cond-5\">\r\n-      <policyRuleCondition\r\n-        dn=\"%aclruledn%/rule-cond-5\"\r\n-        id=\"5\"\r\n-        order=\"unspecified\"\r\n-        status=\"created\"/>\r\n-    </pair>\r\n-    <pair key=\"%aclruledn%/rule-cond-5/nw-expr2\">\r\n-      <policyNetworkExpression\r\n-        dn=\"%aclruledn%/rule-cond-5/nw-expr2\"\r\n-        id=\"2\"\r\n-        opr=\"range\"\r\n-        status=\"created\"/>\r\n-    </pair>\r\n-    <pair key=\"%aclruledn%/rule-cond-5/nw-expr2/nw-attr-qual\">\r\n-      <policyNwAttrQualifier\r\n-        attrEp=\"source\"\r\n-        dn=\"%aclruledn%/rule-cond-5/nw-expr2/nw-attr-qual\"\r\n-        status=\"created\"/>\r\n-    </pair>\r\n-    <pair key=\"%aclruledn%/rule-cond-5/nw-expr2/nw-port-2\">\r\n+    <pair key=\"%aclruledn%/rule-cond-4/nw-expr2/nw-port-2\">\r\n       <policyNetworkPort\r\n         appType=\"Other\"\r\n         dataType=\"string\"\r\n         descr=\"\"\r\n-        dn=\"%aclruledn%/rule-cond-5/nw-expr2/nw-port-2\"\r\n+        dn=\"%aclruledn%/rule-cond-4/nw-expr2/nw-port-2\"\r\n         id=\"2\"\r\n         name=\"\"\r\n         placement=\"begin\"\r\n         status=\"created\"\r\n-        value=\"%sourcestartport%\"/>\r\n+        value=\"%deststartport%\"/>\r\n     </pair>\r\n-    <pair key=\"%aclruledn%/rule-cond-5/nw-expr2/nw-port-3\">\r\n+    <pair key=\"%aclruledn%/rule-cond-4/nw-expr2/nw-port-3\">\r\n       <policyNetworkPort\r\n         appType=\"Other\"\r\n         dataType=\"string\"\r\n         descr=\"\"\r\n-        dn=\"%aclruledn%/rule-cond-5/nw-expr2/nw-port-3\"\r\n+        dn=\"%aclruledn%/rule-cond-4/nw-expr2/nw-port-3\"\r\n         id=\"3\"\r\n         name=\"\"\r\n         placement=\"end\"\r\n         status=\"created\"\r\n-        value=\"%sourceendport%\"/>\r\n+        value=\"%destendport%\"/>\r\n     </pair>\r\n \r\n   </inConfigs>\r\n@@ -195,7 +163,6 @@ under the License.\n     protocolvalue = \"TCP\" or \"UDP\"\r\n     deststartip=\"destination start ip\"\r\n     destendip=\"destination end ip\"\r\n-    sourcestartport=\"start port at source\"\r\n-    sourceendport=\"end port at source\"\r\n-    sourceip=\"source ip\"\r\n+    deststartport=\"start port at destination\"\r\n+    destendport=\"end port at destination\"\r\n --!>\r",
                "raw_url": "https://github.com/apache/cloudstack/raw/530b0beb3c8b172fbfaf89584cd24785b7513998/plugins/network-elements/cisco-vnmc/scripts/network/cisco/create-egress-acl-rule.xml",
                "sha": "05c066d6d53356da5fddc73e97cb116e4d25acf6",
                "status": "modified"
            },
            {
                "additions": 94,
                "blob_url": "https://github.com/apache/cloudstack/blob/530b0beb3c8b172fbfaf89584cd24785b7513998/plugins/network-elements/cisco-vnmc/scripts/network/cisco/create-generic-egress-acl-no-protocol-rule.xml",
                "changes": 94,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/cisco-vnmc/scripts/network/cisco/create-generic-egress-acl-no-protocol-rule.xml?ref=530b0beb3c8b172fbfaf89584cd24785b7513998",
                "deletions": 0,
                "filename": "plugins/network-elements/cisco-vnmc/scripts/network/cisco/create-generic-egress-acl-no-protocol-rule.xml",
                "patch": "@@ -0,0 +1,94 @@\n+<!--\r\n+Licensed to the Apache Software Foundation (ASF) under one\r\n+or more contributor license agreements.  See the NOTICE file\r\n+distributed with this work for additional information\r\n+regarding copyright ownership.  The ASF licenses this file\r\n+to you under the Apache License, Version 2.0 (the\r\n+\"License\"); you may not use this file except in compliance\r\n+with the License.  You may obtain a copy of the License at\r\n+\r\n+  http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+Unless required by applicable law or agreed to in writing,\r\n+software distributed under the License is distributed on an\r\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+KIND, either express or implied.  See the License for the\r\n+specific language governing permissions and limitations\r\n+under the License.\r\n+-->\r\n+<configConfMos\r\n+  cookie=\"%cookie%\"\r\n+  inHierarchical=\"false\">\r\n+  <inConfigs>\r\n+\r\n+    <pair key=\"%aclruledn%\">\r\n+      <policyRule\r\n+        descr=\"%descr%\"\r\n+        dn=\"%aclruledn%\"\r\n+        name=\"%aclrulename%\"\r\n+        order=\"%order%\"\r\n+        status=\"created\"/>\r\n+    </pair>\r\n+\r\n+    <pair key=\"%aclruledn%/rule-action-0\">\r\n+      <fwpolicyAction\r\n+        actionType=\"%actiontype%\"\r\n+        dn=\"%aclruledn%/rule-action-0\"\r\n+        id=\"0\"\r\n+        status=\"created\"/>\r\n+    </pair>\r\n+\r\n+    <pair key=\"%aclruledn%/rule-cond-2\">\r\n+      <policyRuleCondition\r\n+        dn=\"%aclruledn%/rule-cond-2\"\r\n+        id=\"2\"\r\n+        order=\"unspecified\"\r\n+        status=\"created\"/>\r\n+    </pair>\r\n+    <pair key=\"%aclruledn%/rule-cond-2/nw-expr2\">\r\n+      <policyNetworkExpression\r\n+        dn=\"%aclruledn%/rule-cond-2/nw-expr2\"\r\n+        id=\"2\"\r\n+        opr=\"range\"\r\n+        status=\"created\"/>\r\n+    </pair>\r\n+    <pair key=\"%aclruledn%/rule-cond-2/nw-expr2/nw-attr-qual\">\r\n+      <policyNwAttrQualifier\r\n+        attrEp=\"destination\"\r\n+        dn=\"%aclruledn%/rule-cond-2/nw-expr2/nw-attr-qual\"\r\n+        status=\"created\"/>\r\n+    </pair>\r\n+    <pair key=\"%aclruledn%/rule-cond-2/nw-expr2/nw-ip-2\">\r\n+      <policyIPAddress\r\n+        dataType=\"string\"\r\n+        descr=\"\"\r\n+        dn=\"%aclruledn%/rule-cond-2/nw-expr2/nw-ip-2\"\r\n+        id=\"2\"\r\n+        name=\"\"\r\n+        placement=\"begin\"\r\n+        status=\"created\"\r\n+        value=\"%deststartip%\"/>\r\n+    </pair>\r\n+    <pair key=\"%aclruledn%/rule-cond-2/nw-expr2/nw-ip-3\">\r\n+      <policyIPAddress\r\n+        dataType=\"string\"\r\n+        descr=\"\"\r\n+        dn=\"%aclruledn%/rule-cond-2/nw-expr2/nw-ip-3\"\r\n+        id=\"3\"\r\n+        name=\"\"\r\n+        placement=\"end\"\r\n+        status=\"created\"\r\n+        value=\"%destendip%\"/>\r\n+    </pair>\r\n+\r\n+  </inConfigs>\r\n+</configConfMos>\r\n+\r\n+<!--\r\n+    aclruledn=\"org-root/org-vlan-123/org-VDC-vlan-123/pol-test_policy/rule-dummy\"\r\n+    aclrulename=\"dummy\"\r\n+    descr=value\r\n+    actiontype=\"drop\" or \"permit\"\r\n+    deststartip=\"destination start ip\"\r\n+    destendip=\"destination end ip\"\r\n+--!>\r",
                "raw_url": "https://github.com/apache/cloudstack/raw/530b0beb3c8b172fbfaf89584cd24785b7513998/plugins/network-elements/cisco-vnmc/scripts/network/cisco/create-generic-egress-acl-no-protocol-rule.xml",
                "sha": "17cfa54a34e760e389beddf43bc9b81e0e4d7cd6",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/530b0beb3c8b172fbfaf89584cd24785b7513998/plugins/network-elements/cisco-vnmc/scripts/network/cisco/create-generic-egress-acl-rule.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/cisco-vnmc/scripts/network/cisco/create-generic-egress-acl-rule.xml?ref=530b0beb3c8b172fbfaf89584cd24785b7513998",
                "deletions": 1,
                "filename": "plugins/network-elements/cisco-vnmc/scripts/network/cisco/create-generic-egress-acl-rule.xml",
                "patch": "@@ -118,5 +118,4 @@ under the License.\n     protocolvalue = \"TCP\" or \"UDP\" or \"ICMP\"\r\n     deststartip=\"destination start ip\"\r\n     destendip=\"destination end ip\"\r\n-    sourceip=\"source ip\"\r\n --!>\r",
                "raw_url": "https://github.com/apache/cloudstack/raw/530b0beb3c8b172fbfaf89584cd24785b7513998/plugins/network-elements/cisco-vnmc/scripts/network/cisco/create-generic-egress-acl-rule.xml",
                "sha": "436e3eae790145fad7215f4e0a8229b9dfeb52f2",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/530b0beb3c8b172fbfaf89584cd24785b7513998/plugins/network-elements/cisco-vnmc/scripts/network/cisco/create-ingress-acl-rule.xml",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/cisco-vnmc/scripts/network/cisco/create-ingress-acl-rule.xml?ref=530b0beb3c8b172fbfaf89584cd24785b7513998",
                "deletions": 38,
                "filename": "plugins/network-elements/cisco-vnmc/scripts/network/cisco/create-ingress-acl-rule.xml",
                "patch": "@@ -118,7 +118,7 @@ under the License.\n       <policyNetworkExpression\r\n         dn=\"%aclruledn%/rule-cond-4/nw-expr2\"\r\n         id=\"2\"\r\n-        opr=\"eq\"\r\n+        opr=\"range\"\r\n         status=\"created\"/>\r\n     </pair>\r\n     <pair key=\"%aclruledn%/rule-cond-4/nw-expr2/nw-attr-qual\">\r\n@@ -127,56 +127,24 @@ under the License.\n         dn=\"%aclruledn%/rule-cond-4/nw-expr2/nw-attr-qual\"\r\n         status=\"created\"/>\r\n     </pair>\r\n-    <pair key=\"%aclruledn%/rule-cond-4/nw-expr2/nw-ip-2\">\r\n-      <policyIPAddress\r\n-        dataType=\"string\"\r\n-        descr=\"\"\r\n-        dn=\"%aclruledn%/rule-cond-4/nw-expr2/nw-ip-2\"\r\n-        id=\"2\"\r\n-        name=\"\"\r\n-        placement=\"none\"\r\n-        status=\"created\"\r\n-        value=\"%destip%\"/>\r\n-    </pair>\r\n-\r\n-    <pair key=\"%aclruledn%/rule-cond-5\">\r\n-      <policyRuleCondition\r\n-        dn=\"%aclruledn%/rule-cond-5\"\r\n-        id=\"5\"\r\n-        order=\"unspecified\"\r\n-        status=\"created\"/>\r\n-    </pair>\r\n-    <pair key=\"%aclruledn%/rule-cond-5/nw-expr2\">\r\n-      <policyNetworkExpression\r\n-        dn=\"%aclruledn%/rule-cond-5/nw-expr2\"\r\n-        id=\"2\"\r\n-        opr=\"range\"\r\n-        status=\"created\"/>\r\n-    </pair>\r\n-    <pair key=\"%aclruledn%/rule-cond-5/nw-expr2/nw-attr-qual\">\r\n-      <policyNwAttrQualifier\r\n-        attrEp=\"destination\"\r\n-        dn=\"%aclruledn%/rule-cond-5/nw-expr2/nw-attr-qual\"\r\n-        status=\"created\"/>\r\n-    </pair>\r\n-    <pair key=\"%aclruledn%/rule-cond-5/nw-expr2/nw-port-2\">\r\n+    <pair key=\"%aclruledn%/rule-cond-4/nw-expr2/nw-port-2\">\r\n       <policyNetworkPort\r\n         appType=\"Other\"\r\n         dataType=\"string\"\r\n         descr=\"\"\r\n-        dn=\"%aclruledn%/rule-cond-5/nw-expr2/nw-port-2\"\r\n+        dn=\"%aclruledn%/rule-cond-4/nw-expr2/nw-port-2\"\r\n         id=\"2\"\r\n         name=\"\"\r\n         placement=\"begin\"\r\n         status=\"created\"\r\n         value=\"%deststartport%\"/>\r\n     </pair>\r\n-    <pair key=\"%aclruledn%/rule-cond-5/nw-expr2/nw-port-3\">\r\n+    <pair key=\"%aclruledn%/rule-cond-4/nw-expr2/nw-port-3\">\r\n       <policyNetworkPort\r\n         appType=\"Other\"\r\n         dataType=\"string\"\r\n         descr=\"\"\r\n-        dn=\"%aclruledn%/rule-cond-5/nw-expr2/nw-port-3\"\r\n+        dn=\"%aclruledn%/rule-cond-4/nw-expr2/nw-port-3\"\r\n         id=\"3\"\r\n         name=\"\"\r\n         placement=\"end\"\r\n@@ -197,5 +165,4 @@ under the License.\n     sourceendip=\"source end ip\"\r\n     deststartport=\"start port at destination\"\r\n     destendport=\"end port at destination\"\r\n-    destip=\"destination ip\"\r\n --!>\r",
                "raw_url": "https://github.com/apache/cloudstack/raw/530b0beb3c8b172fbfaf89584cd24785b7513998/plugins/network-elements/cisco-vnmc/scripts/network/cisco/create-ingress-acl-rule.xml",
                "sha": "f283ffeb3339d084a7d1f1adfad1592e2f268210",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/530b0beb3c8b172fbfaf89584cd24785b7513998/plugins/network-elements/cisco-vnmc/src/com/cloud/network/cisco/CiscoVnmcConnection.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/cisco-vnmc/src/com/cloud/network/cisco/CiscoVnmcConnection.java?ref=530b0beb3c8b172fbfaf89584cd24785b7513998",
                "deletions": 5,
                "filename": "plugins/network-elements/cisco-vnmc/src/com/cloud/network/cisco/CiscoVnmcConnection.java",
                "patch": "@@ -140,23 +140,23 @@ public boolean associateNatPolicySet(String tenantName)\n     public boolean createTenantVDCIngressAclRule(String tenantName,\n             String identifier, String policyIdentifier,\n             String protocol, String sourceStartIp, String sourceEndIp,\n-            String destStartPort, String destEndPort, String destIp)\n+            String destStartPort, String destEndPort)\n             throws ExecutionException;\n \n     public boolean createTenantVDCIngressAclRule(String tenantName,\n             String identifier, String policyIdentifier,\n-            String protocol, String sourceStartIp, String sourceEndIp, String destIp)\n+            String protocol, String sourceStartIp, String sourceEndIp)\n             throws ExecutionException;\n \n     public boolean createTenantVDCEgressAclRule(String tenantName,\n             String identifier, String policyIdentifier,\n-            String protocol, String sourceStartPort, String sourceEndPort, String sourceIp,\n-            String destStartIp, String destEndIp)\n+            String protocol, String destStartIp, String destEndIp,\n+            String destStartPort, String destEndPort)\n             throws ExecutionException;\n \n     public boolean createTenantVDCEgressAclRule(String tenantName,\n             String identifier, String policyIdentifier,\n-            String protocol, String sourceIp, String destStartIp, String destEndIp)\n+            String protocol, String destStartIp, String destEndIp)\n             throws ExecutionException;\n \n     public boolean deleteTenantVDCAclRule(String tenantName,",
                "raw_url": "https://github.com/apache/cloudstack/raw/530b0beb3c8b172fbfaf89584cd24785b7513998/plugins/network-elements/cisco-vnmc/src/com/cloud/network/cisco/CiscoVnmcConnection.java",
                "sha": "fed6724418d463a917d1ebe978688aa73f0db5f1",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/cloudstack/blob/530b0beb3c8b172fbfaf89584cd24785b7513998/plugins/network-elements/cisco-vnmc/src/com/cloud/network/cisco/CiscoVnmcConnectionImpl.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/cisco-vnmc/src/com/cloud/network/cisco/CiscoVnmcConnectionImpl.java?ref=530b0beb3c8b172fbfaf89584cd24785b7513998",
                "deletions": 15,
                "filename": "plugins/network-elements/cisco-vnmc/src/com/cloud/network/cisco/CiscoVnmcConnectionImpl.java",
                "patch": "@@ -95,6 +95,7 @@\n         CREATE_EGRESS_ACL_RULE(\"create-egress-acl-rule.xml\", \"policy-mgr\"),\n         CREATE_GENERIC_INGRESS_ACL_RULE(\"create-generic-ingress-acl-rule.xml\", \"policy-mgr\"),\n         CREATE_GENERIC_EGRESS_ACL_RULE(\"create-generic-egress-acl-rule.xml\", \"policy-mgr\"),\n+        CREATE_GENERIC_EGRESS_ACL_NO_PROTOCOL_RULE(\"create-generic-egress-acl-no-protocol-rule.xml\", \"policy-mgr\"),\n \n         DELETE_RULE(\"delete-rule.xml\", \"policy-mgr\"),\n \n@@ -660,8 +661,7 @@ public boolean associateAclPolicySet(String tenantName) throws ExecutionExceptio\n         xml = replaceXmlValue(xml, \"descr\", \"Edge Security Profile for Tenant VDC \" + tenantName);\n         xml = replaceXmlValue(xml, \"name\", getNameForEdgeDeviceSecurityProfile(tenantName));\n         xml = replaceXmlValue(xml, \"espdn\", getDnForTenantVDCEdgeSecurityProfile(tenantName));\n-        //xml = replaceXmlValue(xml, \"egresspolicysetname\", getNameForAclPolicySet(tenantName, false));\n-        xml = replaceXmlValue(xml, \"egresspolicysetname\", \"default-egress\");\n+        xml = replaceXmlValue(xml, \"egresspolicysetname\", getNameForAclPolicySet(tenantName, false));\n         xml = replaceXmlValue(xml, \"ingresspolicysetname\", getNameForAclPolicySet(tenantName, true));\n         xml = replaceXmlValue(xml, \"natpolicysetname\", getNameForNatPolicySet(tenantName));\n \n@@ -673,7 +673,7 @@ public boolean associateAclPolicySet(String tenantName) throws ExecutionExceptio\n     public boolean createTenantVDCIngressAclRule(String tenantName,\n             String identifier, String policyIdentifier,\n             String protocol, String sourceStartIp, String sourceEndIp,\n-            String destStartPort, String destEndPort, String destIp) throws ExecutionException {\n+            String destStartPort, String destEndPort) throws ExecutionException {\n         String xml = VnmcXml.CREATE_INGRESS_ACL_RULE.getXml();\n         String service = VnmcXml.CREATE_INGRESS_ACL_RULE.getService();\n \n@@ -687,7 +687,6 @@ public boolean createTenantVDCIngressAclRule(String tenantName,\n         xml = replaceXmlValue(xml, \"sourceendip\", sourceEndIp);\n         xml = replaceXmlValue(xml, \"deststartport\", destStartPort);\n         xml = replaceXmlValue(xml, \"destendport\", destEndPort);\n-        xml = replaceXmlValue(xml, \"destip\", destIp);\n \n         List<String> rules = listChildren(getDnForAclPolicy(tenantName, policyIdentifier));\n         int order = 100;\n@@ -703,8 +702,7 @@ public boolean createTenantVDCIngressAclRule(String tenantName,\n     @Override\n     public boolean createTenantVDCIngressAclRule(String tenantName,\n             String identifier, String policyIdentifier,\n-            String protocol, String sourceStartIp, String sourceEndIp,\n-            String destIp) throws ExecutionException {\n+            String protocol, String sourceStartIp, String sourceEndIp) throws ExecutionException {\n         String xml = VnmcXml.CREATE_GENERIC_INGRESS_ACL_RULE.getXml();\n         String service = VnmcXml.CREATE_GENERIC_INGRESS_ACL_RULE.getService();\n \n@@ -731,8 +729,8 @@ public boolean createTenantVDCIngressAclRule(String tenantName,\n     @Override\n     public boolean createTenantVDCEgressAclRule(String tenantName,\n             String identifier, String policyIdentifier,\n-            String protocol, String sourceStartPort, String sourceEndPort, String sourceIp,\n-            String destStartIp, String destEndIp) throws ExecutionException {\n+            String protocol, String destStartIp, String destEndIp,\n+            String destStartPort, String destEndPort) throws ExecutionException {\n         String xml = VnmcXml.CREATE_EGRESS_ACL_RULE.getXml();\n         String service = VnmcXml.CREATE_EGRESS_ACL_RULE.getService();\n \n@@ -744,9 +742,8 @@ public boolean createTenantVDCEgressAclRule(String tenantName,\n         xml = replaceXmlValue(xml, \"protocolvalue\", protocol);\n         xml = replaceXmlValue(xml, \"deststartip\", destStartIp);\n         xml = replaceXmlValue(xml, \"destendip\", destEndIp);\n-        xml = replaceXmlValue(xml, \"sourcestartport\", sourceStartPort);\n-        xml = replaceXmlValue(xml, \"sourceendport\", sourceEndPort);\n-        xml = replaceXmlValue(xml, \"sourceip\", sourceIp);\n+        xml = replaceXmlValue(xml, \"deststartport\", destStartPort);\n+        xml = replaceXmlValue(xml, \"destendport\", destEndPort);\n \n         List<String> rules = listChildren(getDnForAclPolicy(tenantName, policyIdentifier));\n         int order = 100;\n@@ -762,17 +759,20 @@ public boolean createTenantVDCEgressAclRule(String tenantName,\n     @Override\n     public boolean createTenantVDCEgressAclRule(String tenantName,\n             String identifier, String policyIdentifier,\n-            String protocol, String sourceIp,\n-            String destStartIp, String destEndIp) throws ExecutionException {\n+            String protocol, String destStartIp, String destEndIp) throws ExecutionException {\n         String xml = VnmcXml.CREATE_GENERIC_EGRESS_ACL_RULE.getXml();\n         String service = VnmcXml.CREATE_GENERIC_EGRESS_ACL_RULE.getService();\n-\n+        if (protocol.equalsIgnoreCase(\"all\")) { // any protocol\n+            xml = VnmcXml.CREATE_GENERIC_EGRESS_ACL_NO_PROTOCOL_RULE.getXml();\n+            service = VnmcXml.CREATE_GENERIC_EGRESS_ACL_NO_PROTOCOL_RULE.getService();\n+        } else { // specific protocol\n+            xml = replaceXmlValue(xml, \"protocolvalue\", protocol);\n+        }\n         xml = replaceXmlValue(xml, \"cookie\", _cookie);\n         xml = replaceXmlValue(xml, \"aclruledn\", getDnForAclRule(tenantName, identifier, policyIdentifier));\n         xml = replaceXmlValue(xml, \"aclrulename\", getNameForAclRule(tenantName, identifier));\n         xml = replaceXmlValue(xml, \"descr\", \"Egress ACL rule for Tenant VDC \" + tenantName);\n         xml = replaceXmlValue(xml, \"actiontype\", \"permit\");\n-        xml = replaceXmlValue(xml, \"protocolvalue\", protocol);\n         xml = replaceXmlValue(xml, \"deststartip\", destStartIp);\n         xml = replaceXmlValue(xml, \"destendip\", destEndIp);\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/530b0beb3c8b172fbfaf89584cd24785b7513998/plugins/network-elements/cisco-vnmc/src/com/cloud/network/cisco/CiscoVnmcConnectionImpl.java",
                "sha": "c7380ab11d8f0af1824f5f587bc8cb2bc45bdc2f",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/530b0beb3c8b172fbfaf89584cd24785b7513998/plugins/network-elements/cisco-vnmc/src/com/cloud/network/element/CiscoVnmcElement.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/cisco-vnmc/src/com/cloud/network/element/CiscoVnmcElement.java?ref=530b0beb3c8b172fbfaf89584cd24785b7513998",
                "deletions": 2,
                "filename": "plugins/network-elements/cisco-vnmc/src/com/cloud/network/element/CiscoVnmcElement.java",
                "patch": "@@ -105,6 +105,7 @@\n import com.cloud.network.dao.PhysicalNetworkServiceProviderVO;\n import com.cloud.network.resource.CiscoVnmcResource;\n import com.cloud.network.rules.FirewallRule;\n+import com.cloud.network.rules.FirewallRule.TrafficType;\n import com.cloud.network.rules.PortForwardingRule;\n import com.cloud.network.rules.StaticNat;\n import com.cloud.offering.NetworkOffering;\n@@ -677,8 +678,12 @@ public boolean applyFWRules(Network network,\n \n         List<FirewallRuleTO> rulesTO = new ArrayList<FirewallRuleTO>();\n         for (FirewallRule rule : rules) {\n-            IpAddress sourceIp = _networkModel.getIp(rule.getSourceIpAddressId());\n-            FirewallRuleTO ruleTO = new FirewallRuleTO(rule, null, sourceIp.getAddress().addr(), rule.getPurpose(), rule.getTrafficType());\n+            String address = \"0.0.0.0\";\n+            if (rule.getTrafficType() == TrafficType.Ingress) {\n+                IpAddress sourceIp = _networkModel.getIp(rule.getSourceIpAddressId());\n+                address = sourceIp.getAddress().addr();\n+            }\n+            FirewallRuleTO ruleTO = new FirewallRuleTO(rule, null, address, rule.getPurpose(), rule.getTrafficType());\n             rulesTO.add(ruleTO);\n         }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/530b0beb3c8b172fbfaf89584cd24785b7513998/plugins/network-elements/cisco-vnmc/src/com/cloud/network/element/CiscoVnmcElement.java",
                "sha": "b335edb9f631bcd5930d2ed94019f85c09d430d2",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/530b0beb3c8b172fbfaf89584cd24785b7513998/plugins/network-elements/cisco-vnmc/src/com/cloud/network/resource/CiscoVnmcResource.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/cisco-vnmc/src/com/cloud/network/resource/CiscoVnmcResource.java?ref=530b0beb3c8b172fbfaf89584cd24785b7513998",
                "deletions": 6,
                "filename": "plugins/network-elements/cisco-vnmc/src/com/cloud/network/resource/CiscoVnmcResource.java",
                "patch": "@@ -368,29 +368,29 @@ private Answer execute(SetFirewallRulesCommand cmd, int numRetries) {\n                                 if (!_connection.createTenantVDCIngressAclRule(tenant,\n                                         Long.toString(rule.getId()), policyIdentifier,\n                                         rule.getProtocol().toUpperCase(), externalIpRange[0], externalIpRange[1],\n-                                        Integer.toString(rule.getSrcPortRange()[0]), Integer.toString(rule.getSrcPortRange()[1]), publicIp)) {\n+                                        Integer.toString(rule.getSrcPortRange()[0]), Integer.toString(rule.getSrcPortRange()[1]))) {\n                                     throw new Exception(\"Failed to create ACL ingress rule in VNMC for guest network with vlan \" + vlanId);\n                                 }\n                             } else {\n                                 if (!_connection.createTenantVDCIngressAclRule(tenant,\n                                         Long.toString(rule.getId()), policyIdentifier,\n-                                        rule.getProtocol().toUpperCase(), externalIpRange[0], externalIpRange[1], publicIp)) {\n+                                        rule.getProtocol().toUpperCase(), externalIpRange[0], externalIpRange[1])) {\n                                     throw new Exception(\"Failed to create ACL ingress rule in VNMC for guest network with vlan \" + vlanId);\n                                 }\n                             }\n                         } else {\n-                            if (!rule.getProtocol().equalsIgnoreCase(\"icmp\")) {\n+                            if (rule.getProtocol().equalsIgnoreCase(\"tcp\") || rule.getProtocol().equalsIgnoreCase(\"udp\")) {\n                                 if (!_connection.createTenantVDCEgressAclRule(tenant,\n                                         Long.toString(rule.getId()), policyIdentifier,\n                                         rule.getProtocol().toUpperCase(),\n-                                        Integer.toString(rule.getSrcPortRange()[0]), Integer.toString(rule.getSrcPortRange()[1]), publicIp,\n-                                        externalIpRange[0], externalIpRange[1])) {\n+                                        externalIpRange[0], externalIpRange[1],\n+                                        Integer.toString(rule.getSrcPortRange()[0]), Integer.toString(rule.getSrcPortRange()[1]))) {\n                                     throw new Exception(\"Failed to create ACL egress rule in VNMC for guest network with vlan \" + vlanId);\n                                 }\n                             } else {\n                                 if (!_connection.createTenantVDCEgressAclRule(tenant,\n                                         Long.toString(rule.getId()), policyIdentifier,\n-                                        rule.getProtocol().toUpperCase(), publicIp, externalIpRange[0], externalIpRange[1])) {\n+                                        rule.getProtocol().toUpperCase(), externalIpRange[0], externalIpRange[1])) {\n                                     throw new Exception(\"Failed to create ACL egress rule in VNMC for guest network with vlan \" + vlanId);\n                                 }\n                             }",
                "raw_url": "https://github.com/apache/cloudstack/raw/530b0beb3c8b172fbfaf89584cd24785b7513998/plugins/network-elements/cisco-vnmc/src/com/cloud/network/resource/CiscoVnmcResource.java",
                "sha": "906e0ae6e856cff717430a0ac18e5cdc7c0d8c4b",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/530b0beb3c8b172fbfaf89584cd24785b7513998/plugins/network-elements/cisco-vnmc/test/com/cloud/network/resource/CiscoVnmcResourceTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/cisco-vnmc/test/com/cloud/network/resource/CiscoVnmcResourceTest.java?ref=530b0beb3c8b172fbfaf89584cd24785b7513998",
                "deletions": 2,
                "filename": "plugins/network-elements/cisco-vnmc/test/com/cloud/network/resource/CiscoVnmcResourceTest.java",
                "patch": "@@ -171,11 +171,11 @@ public void testFirewall() throws ConfigurationException, Exception {\n         when(_connection.createTenantVDCIngressAclRule(\n                 anyString(), anyString(), anyString(),\n                 anyString(), anyString(), anyString(),\n-                anyString(), anyString(), anyString())).thenReturn(true);\n+                anyString(), anyString())).thenReturn(true);\n         when(_connection.createTenantVDCEgressAclRule(\n                 anyString(), anyString(), anyString(),\n                 anyString(), anyString(), anyString(),\n-                anyString(), anyString(), anyString())).thenReturn(true);\n+                anyString(), anyString())).thenReturn(true);\n         when(_connection.associateAclPolicySet(anyString())).thenReturn(true);\n \n         Answer answer = _resource.executeRequest(cmd);",
                "raw_url": "https://github.com/apache/cloudstack/raw/530b0beb3c8b172fbfaf89584cd24785b7513998/plugins/network-elements/cisco-vnmc/test/com/cloud/network/resource/CiscoVnmcResourceTest.java",
                "sha": "acfc5ebaaa7de26cd90920bb29c8d095c2a634d5",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-2417: NPE while creating Egress rules with Networking using Cisco ASA firewall provider\n\nAn input parameter was incorrectly interpreted during egress rule creation and so resulted in NPE. Created a new vnmc xml for handling creation of egress rule with protocol as 'All'",
        "parent": "https://github.com/apache/cloudstack/commit/b4aff6190f741cffa0bd945cfa9d7d7b11ada47b",
        "patched_files": [
            "create-generic-egress-acl-no-protocol-rule.xml",
            "create-generic-egress-acl-rule.xml",
            "create-egress-acl-rule.xml",
            "CiscoVnmcResource.java",
            "CiscoVnmcElement.java",
            "CiscoVnmcConnectionImpl.java",
            "create-ingress-acl-rule.xml",
            "CiscoVnmcConnection.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "CiscoVnmcResourceTest.java",
            "CiscoVnmcElementTest.java",
            "CiscoVnmcConnectionTest.java"
        ]
    },
    "cloudstack_53473c0": {
        "bug_id": "cloudstack_53473c0",
        "commit": "https://github.com/apache/cloudstack/commit/53473c07b904dc97630d635dfac9d94c3c5c4f17",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/53473c07b904dc97630d635dfac9d94c3c5c4f17/utils/src/com/cloud/utils/exception/CloudRuntimeException.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/com/cloud/utils/exception/CloudRuntimeException.java?ref=53473c07b904dc97630d635dfac9d94c3c5c4f17",
                "deletions": 0,
                "filename": "utils/src/com/cloud/utils/exception/CloudRuntimeException.java",
                "patch": "@@ -16,6 +16,8 @@\n // under the License.\n package com.cloud.utils.exception;\n \n+import java.io.FileNotFoundException;\n+\n import com.cloud.utils.SerialVersionUID;\n \n /**\n@@ -36,4 +38,8 @@ public CloudRuntimeException(String message, Throwable th) {\n     protected CloudRuntimeException() {\n         super();\n     }\n+\n+    public CloudRuntimeException(Throwable t) {\n+        super(t);\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/53473c07b904dc97630d635dfac9d94c3c5c4f17/utils/src/com/cloud/utils/exception/CloudRuntimeException.java",
                "sha": "dabb715086fd755cf40b64959815fbf6bf155528",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/53473c07b904dc97630d635dfac9d94c3c5c4f17/utils/src/com/cloud/utils/exception/RuntimeCloudException.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/com/cloud/utils/exception/RuntimeCloudException.java?ref=53473c07b904dc97630d635dfac9d94c3c5c4f17",
                "deletions": 0,
                "filename": "utils/src/com/cloud/utils/exception/RuntimeCloudException.java",
                "patch": "@@ -64,6 +64,10 @@ public RuntimeCloudException() {\n         setCSErrorCode(CSExceptionErrorCode.getCSErrCode(this.getClass().getName()));\n     }\n \n+    public RuntimeCloudException(Throwable t) {\n+        super(t);\n+    }\n+\n     public ArrayList<String> getIdProxyList() {\n         return idList;\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/53473c07b904dc97630d635dfac9d94c3c5c4f17/utils/src/com/cloud/utils/exception/RuntimeCloudException.java",
                "sha": "422d66cfb17338dee41d6ca74b4cce08e6a3510a",
                "status": "modified"
            },
            {
                "additions": 117,
                "blob_url": "https://github.com/apache/cloudstack/blob/53473c07b904dc97630d635dfac9d94c3c5c4f17/utils/src/com/cloud/utils/xmlobject/XmlObject.java",
                "changes": 117,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/com/cloud/utils/xmlobject/XmlObject.java?ref=53473c07b904dc97630d635dfac9d94c3c5c4f17",
                "deletions": 0,
                "filename": "utils/src/com/cloud/utils/xmlobject/XmlObject.java",
                "patch": "@@ -0,0 +1,117 @@\n+package com.cloud.utils.xmlobject;\r\n+\r\n+import java.io.File;\r\n+import java.io.FileInputStream;\r\n+import java.io.FileNotFoundException;\r\n+import java.io.InputStream;\r\n+import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n+import java.util.Iterator;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+\r\n+import javax.xml.parsers.ParserConfigurationException;\r\n+import javax.xml.parsers.SAXParser;\r\n+import javax.xml.parsers.SAXParserFactory;\r\n+\r\n+import org.xml.sax.SAXException;\r\n+\r\n+import com.cloud.utils.exception.CloudRuntimeException;\r\n+\r\n+import edu.emory.mathcs.backport.java.util.Collections;\r\n+\r\n+public class XmlObject {\r\n+    private Map<String, Object> elements = new HashMap<String, Object>();\r\n+    private String text;\r\n+    private String tag;\r\n+    \r\n+    XmlObject() {\r\n+    }\r\n+    \r\n+    XmlObject putElement(String key, Object e) {\r\n+        Object old = elements.get(key);\r\n+        if (old == null) {\r\n+            System.out.println(String.format(\"no %s, add new\", key));\r\n+            elements.put(key, e);\r\n+        } else {\r\n+            if (old instanceof List) {\r\n+                System.out.println(String.format(\"already list %s, add\", key));\r\n+                ((List)old).add(e);\r\n+            } else {\r\n+                System.out.println(String.format(\"not list list %s, add list\", key));\r\n+                List lst = new ArrayList();\r\n+                lst.add(old);\r\n+                lst.add(e);\r\n+                elements.put(key, lst);\r\n+            }\r\n+        }\r\n+        \r\n+        return this;\r\n+    }\r\n+    \r\n+    private Object recurGet(XmlObject obj, Iterator<String> it) {\r\n+        String key = it.next();\r\n+        Object e = obj.elements.get(key);\r\n+        if (!it.hasNext()) {\r\n+            return e;\r\n+        } else {\r\n+            if (!(e instanceof XmlObject)) {\r\n+                throw new CloudRuntimeException(String.format(\"%s doesn't reference to a XmlObject\", it.next()));\r\n+            }\r\n+            return recurGet((XmlObject) e, it);\r\n+        }\r\n+    }\r\n+    \r\n+    public <T> T get(String elementStr) {\r\n+        String[] strs = elementStr.split(\"\\\\.\");\r\n+        List<String> lst = new ArrayList<String>(strs.length);\r\n+        Collections.addAll(lst, strs);\r\n+        return (T)recurGet(this, lst.iterator());\r\n+    }\r\n+    \r\n+    public <T> List<T> getAsList(String elementStr) {\r\n+        Object e = get(elementStr);\r\n+        if (e instanceof List) {\r\n+            return (List<T>)e;\r\n+        }\r\n+        List lst = new ArrayList(1);\r\n+        lst.add(e);\r\n+        return lst;\r\n+    }\r\n+    \r\n+    public String getText() {\r\n+        return text;\r\n+    }\r\n+\r\n+    void setText(String text) {\r\n+        this.text = text;\r\n+    }\r\n+\r\n+    public String getTag() {\r\n+        return tag;\r\n+    }\r\n+\r\n+    void setTag(String tag) {\r\n+        this.tag = tag;\r\n+    }\r\n+    \r\n+    @Override\r\n+    public String toString() {\r\n+        StringBuilder sb = new StringBuilder(\"<\" + tag);\r\n+        for (Map.Entry<String, Object> e : elements.entrySet()) {\r\n+            String key = e.getKey();\r\n+            Object value = e.getValue();\r\n+            if (!(value instanceof String)) {\r\n+                continue;\r\n+            }\r\n+            sb.append(String.format(\" %s=\\\"%s\\\"\", key, value.toString()));\r\n+        }\r\n+        \r\n+        if (text == null || \"\".equals(text.trim())) {\r\n+            sb.append(\" />\");\r\n+        } else {\r\n+            sb.append(\">\").append(text).append(String.format(\"</ %s>\", tag));\r\n+        }\r\n+        return sb.toString();\r\n+    }\r\n+}\r",
                "raw_url": "https://github.com/apache/cloudstack/raw/53473c07b904dc97630d635dfac9d94c3c5c4f17/utils/src/com/cloud/utils/xmlobject/XmlObject.java",
                "sha": "4ebf3718113e4d0efa860de56a4fe00ab3b823d6",
                "status": "added"
            },
            {
                "additions": 107,
                "blob_url": "https://github.com/apache/cloudstack/blob/53473c07b904dc97630d635dfac9d94c3c5c4f17/utils/src/com/cloud/utils/xmlobject/XmlObjectParser.java",
                "changes": 107,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/com/cloud/utils/xmlobject/XmlObjectParser.java?ref=53473c07b904dc97630d635dfac9d94c3c5c4f17",
                "deletions": 0,
                "filename": "utils/src/com/cloud/utils/xmlobject/XmlObjectParser.java",
                "patch": "@@ -0,0 +1,107 @@\n+package com.cloud.utils.xmlobject;\r\n+\r\n+import java.io.ByteArrayInputStream;\r\n+import java.io.File;\r\n+import java.io.FileInputStream;\r\n+import java.io.FileNotFoundException;\r\n+import java.io.InputStream;\r\n+import java.util.Stack;\r\n+\r\n+import javax.xml.parsers.SAXParser;\r\n+import javax.xml.parsers.SAXParserFactory;\r\n+\r\n+import org.xml.sax.Attributes;\r\n+import org.xml.sax.SAXException;\r\n+import org.xml.sax.helpers.DefaultHandler;\r\n+\r\n+import com.cloud.utils.exception.CloudRuntimeException;\r\n+\r\n+public class XmlObjectParser {\r\n+    final private InputStream is;\r\n+\r\n+    private class XmlHandler extends DefaultHandler {\r\n+        private Stack<XmlObject> stack;\r\n+        private String currentValue;\r\n+        private XmlObject root;\r\n+\r\n+        XmlHandler() {\r\n+            stack = new Stack<XmlObject>();\r\n+        }\r\n+\r\n+        @Override\r\n+        public void startElement(String namespaceURI, String localName, String qName, Attributes atts) throws SAXException {\r\n+            //System.out.println(String.format(\"startElement: namespaceURI:%s, localName:%s, qName:%s\", namespaceURI, localName, qName));\r\n+            currentValue = null;\r\n+            XmlObject obj = new XmlObject();\r\n+            for (int i=0; i<atts.getLength(); i++) {\r\n+                obj.putElement(atts.getQName(i), atts.getValue(i));\r\n+            }\r\n+            obj.setTag(qName);\r\n+            if (!stack.isEmpty()) {\r\n+                XmlObject parent = stack.peek();\r\n+                parent.putElement(qName, obj);\r\n+            }\r\n+            stack.push(obj);\r\n+        }\r\n+\r\n+        @Override\r\n+        public void endElement(String namespaceURI, String localName, String qName) throws SAXException {\r\n+            XmlObject currObj = stack.pop();\r\n+            if (currentValue != null) {\r\n+                currObj.setText(currentValue);\r\n+            }\r\n+            \r\n+            if (stack.isEmpty()) {\r\n+                root = currObj;\r\n+            }\r\n+            \r\n+            //System.out.println(String.format(\"endElement: namespaceURI:%s, localName:%s, qName:%s\", namespaceURI, localName, qName));\r\n+        }\r\n+        \r\n+        @Override\r\n+        public void characters(char[] ch, int start, int length) throws SAXException {\r\n+            StringBuilder str = new StringBuilder();\r\n+            str.append(ch, start, length);\r\n+            currentValue = str.toString();\r\n+            //System.out.println(String.format(\"characters: %s\", str.toString()));\r\n+        }\r\n+        \r\n+        XmlObject getRoot() {\r\n+            return root;\r\n+        }\r\n+    }\r\n+\r\n+    private XmlObjectParser(InputStream is) {\r\n+        super();\r\n+        this.is = is;\r\n+    }\r\n+\r\n+    public static XmlObject parseFromFile(String filePath) {\r\n+        FileInputStream fs;\r\n+        try {\r\n+            fs = new FileInputStream(new File(filePath));\r\n+            XmlObjectParser p = new XmlObjectParser(fs);\r\n+            return p.parse();\r\n+        } catch (FileNotFoundException e) {\r\n+            throw new CloudRuntimeException(e);\r\n+        }\r\n+    }\r\n+    \r\n+    public static XmlObject parseFromString(String xmlString) {\r\n+        InputStream stream = new ByteArrayInputStream(xmlString.getBytes());\r\n+        XmlObjectParser p = new XmlObjectParser(stream);\r\n+        return p.parse();\r\n+    }\r\n+\r\n+    private XmlObject parse() {\r\n+        SAXParserFactory spfactory = SAXParserFactory.newInstance();\r\n+        try {\r\n+            SAXParser saxParser = spfactory.newSAXParser();\r\n+            XmlHandler handler = new XmlHandler();\r\n+            saxParser.parse(is, handler);\r\n+            return handler.getRoot();\r\n+        } catch (Exception e) {\r\n+            throw new CloudRuntimeException(e);\r\n+        }\r\n+    }\r\n+}\r",
                "raw_url": "https://github.com/apache/cloudstack/raw/53473c07b904dc97630d635dfac9d94c3c5c4f17/utils/src/com/cloud/utils/xmlobject/XmlObjectParser.java",
                "sha": "68a822f542940a1d3915e9efd7775bb5efa6a8c7",
                "status": "added"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/cloudstack/blob/53473c07b904dc97630d635dfac9d94c3c5c4f17/utils/test/com/cloud/utils/xmlobject/TestXmlObject.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/test/com/cloud/utils/xmlobject/TestXmlObject.java?ref=53473c07b904dc97630d635dfac9d94c3c5c4f17",
                "deletions": 0,
                "filename": "utils/test/com/cloud/utils/xmlobject/TestXmlObject.java",
                "patch": "@@ -0,0 +1,29 @@\n+package com.cloud.utils.xmlobject;\r\n+\r\n+import static org.junit.Assert.*;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+public class TestXmlObject {\r\n+\r\n+    void p(String str) {\r\n+        System.out.println(str);\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void test() {\r\n+        XmlObject xo = XmlObjectParser.parseFromFile(\"z:/components.xml.in\");\r\n+        p(xo.getTag());\r\n+        p((String) xo.get(\"system-integrity-checker.checker\").toString());\r\n+        List<XmlObject> lst = xo.get(\"management-server.adapters\");\r\n+        for (XmlObject x : lst) {\r\n+            List<XmlObject> lst1 = x.getAsList(\"adapter\");\r\n+            for (XmlObject y : lst1) {\r\n+                p(y.toString());\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+}\r",
                "raw_url": "https://github.com/apache/cloudstack/raw/53473c07b904dc97630d635dfac9d94c3c5c4f17/utils/test/com/cloud/utils/xmlobject/TestXmlObject.java",
                "sha": "f94c68c46310dcd69cda5e7209efa7ca44b36b1a",
                "status": "added"
            }
        ],
        "message": "CloudStack CLOUDSTACK-723\nEnhanced baremetal servers support on Cisco UCS\n\nintroduce an python etree like xml helper.\nOk, this is not a new wheel. Frankly speaking, all Java XML API just suc**.\nthere are two popular types of XML API in java, one class is for data binding, JAXB,\nXStream fall into this category. Another class is tree based, like JDOM, XOM ...\n\nfor XML api call, data binding library is painful as you have to specify the schema\nthat how xml stream converts to java object, which means you have to pre-define all\nschemas(xsd file for JAXB, java object for XStream ...). This is not productive, because you\nmust add new schema when XML document grows.\n\nTree based library shines in this case, for it's able to dynamically create an object tree\nfrom xml stream without any knowledge of its structure. However, all tree based\nXML API library fall into below convention:\n\nElement e = root.getChildElement(\"child1\").getChildElement(\"child2\").getChildElement(\"child3\")...getChildElement(\"childN\")\n\nanything wrong with it???\n\nthe sadness is if there is no \"child2\", you will get a NPE with above code, which means you have to judge\nbefore getting.\n\nAnd, why so verbose?? why not:\n\nElement e = root.child1.child2.child3...childN ???\n\nOk I am joking, it's impossible in Java the world knows Java is a static language.\n\nbut you can actually do:\n\nElement e = root.get(\"child1.child2.child3\");\n\nor\n\nList<Element> e = root.getAsList(\"child1.child2.child3\")\n\nthis is known as XPath style(though XPATH use '/'), python etree has supported it.\n\nso I did this toy for my UCS xml api call, it's quite like etree which is easy to use, for example:\n\n<components.xml>\n    <system-integrity-checker class=\"com.cloud.upgrade.DatabaseUpgradeChecker\">\n        <checker name=\"ManagementServerNode\" class=\"com.cloud.cluster.ManagementServerNode\"/>\n        <checker name=\"EncryptionSecretKeyChecker\" class=\"com.cloud.utils.crypt.EncryptionSecretKeyChecker\"/>\n        <checker name=\"DatabaseIntegrityChecker\" class=\"com.cloud.upgrade.DatabaseIntegrityChecker\"/>\n        <checker name=\"DatabaseUpgradeChecker\" class=\"com.cloud.upgrade.PremiumDatabaseUpgradeChecker\"/>\n    </system-integrity-checker>\n</components.xml>\n\nXmlObject xo = XmlObjectParser.parseFromFile(\"~/components.xml.in\");\nList<XmlObject> checkers = xo.getAsList(\"system-integrity-checker.checker\");\n\nthen you get a list of XmlObject which represent each 'checker' element:\n\nXmlObject firstChecker = checkers.get(0);\n// firstChecker.get(\"name\") == \"ManagementServerNode\"\n// firstChecker.get(\"class\") == \"com.cloud.cluster.ManagementServerNode\"\n// firstChecker.getTag() == \"checker\"\n// firstChecker.getText() == \"\" if it's <checker/>xxx</checker>, then getText() == \"xxx\"\n\nexample 2:\n<checker name=\"ManagementServerNode\" class=\"com.cloud.cluster.ManagementServerNode\"/>\n    <system-integrity-checker class=\"com.cloud.upgrade.DatabaseUpgradeChecker\">\n        <checker name=\"ManagementServerNode\" class=\"com.cloud.cluster.ManagementServerNode\"/>\n    </system-integrity-checker>\n</components.xml>\n\nyout can do:\n\nXmlObject xo = XmlObjectParser.parseFromFile(\"~/components.xml.in\");\nXmlObject checker = xo.get(\"system-integrity-checker.checker\");\n\nthen it returns a single object as we only have one \"checker\" in xml stream,\n\nor you still do\n\nList<XmlObject> checkers = xo.getAsList(\"system-integrity-checker.checker\");\n\nit returns a list which only contains one element of \"checker\"\n\nif you do:\n\nXmlObject checker = xo.get(\"system-integrity-checker.checker.this_middle_element_doesnt_exist.some_element\");\n\nit returns a null without any exception, so you don't have to worry if a parent element is missing when getting a leaf element\n\nagain it's not a new wheel, I just hate JAVA xml api",
        "parent": "https://github.com/apache/cloudstack/commit/339c09bdefd43293dd61d1ff118909809604a582",
        "patched_files": [
            "CloudRuntimeException.java",
            "XmlObjectParser.java",
            "XmlObject.java",
            "RuntimeCloudException.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "TestXmlObject.java"
        ]
    },
    "cloudstack_5481485": {
        "bug_id": "cloudstack_5481485",
        "commit": "https://github.com/apache/cloudstack/commit/5481485a083957ff58da3b6fea9d7b6d20f06875",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/5481485a083957ff58da3b6fea9d7b6d20f06875/api/src/org/apache/cloudstack/api/response/VMSnapshotResponse.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/response/VMSnapshotResponse.java?ref=5481485a083957ff58da3b6fea9d7b6d20f06875",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/api/response/VMSnapshotResponse.java",
                "patch": "@@ -184,6 +184,14 @@ public String getParentName() {\n         return parentName;\n     }\n \n+    public String getParent() {\n+        return parent;\n+    }\n+\n+    public void setParent(String parent) {\n+        this.parent = parent;\n+    }\n+\n     public String getType() {\n         return type;\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/5481485a083957ff58da3b6fea9d7b6d20f06875/api/src/org/apache/cloudstack/api/response/VMSnapshotResponse.java",
                "sha": "4d430a5d64474a7da220bb89f359ba403923896f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/5481485a083957ff58da3b6fea9d7b6d20f06875/engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDao.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDao.java?ref=5481485a083957ff58da3b6fea9d7b6d20f06875",
                "deletions": 0,
                "filename": "engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDao.java",
                "patch": "@@ -36,4 +36,6 @@\n     List<VMSnapshotVO> listByParent(Long vmSnapshotId);\n \n     VMSnapshotVO findByName(Long vmId, String name);\n+\n+    List<VMSnapshotVO> listByAccountId(Long accountId);\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/5481485a083957ff58da3b6fea9d7b6d20f06875/engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDao.java",
                "sha": "31999ef15d66e3dcc6e5a18fddfd0a20fb81e0ec",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/5481485a083957ff58da3b6fea9d7b6d20f06875/engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDaoImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDaoImpl.java?ref=5481485a083957ff58da3b6fea9d7b6d20f06875",
                "deletions": 0,
                "filename": "engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDaoImpl.java",
                "patch": "@@ -121,6 +121,12 @@ public VMSnapshotVO findByName(Long vmId, String name) {\n         return null;\n     }\n \n+    public List<VMSnapshotVO> listByAccountId(Long accountId) {\n+        SearchCriteria sc = this.AllFieldsSearch.create();\n+        sc.setParameters(\"accountId\", new Object[] { accountId });\n+        return listBy(sc, null);\n+    }\n+\n     @Override\n     public boolean updateState(State currentState, Event event, State nextState, VMSnapshot vo, Object data) {\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/5481485a083957ff58da3b6fea9d7b6d20f06875/engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDaoImpl.java",
                "sha": "a87d284dc12161d367481e56f739cfe70b203665",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=5481485a083957ff58da3b6fea9d7b6d20f06875",
                "deletions": 3,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -452,6 +452,10 @@ public SnapshotResponse createSnapshotResponse(Snapshot snapshot) {\n             snapshotResponse.setVolumeId(volume.getUuid());\n             snapshotResponse.setVolumeName(volume.getName());\n             snapshotResponse.setVolumeType(volume.getVolumeType().name());\n+            DataCenter zone = ApiDBUtils.findZoneById(volume.getDeviceId());\n+            if (zone != null) {\n+                snapshotResponse.setZoneId(zone.getUuid());\n+            }\n         }\n         snapshotResponse.setCreated(snapshot.getCreated());\n         snapshotResponse.setName(snapshot.getName());\n@@ -502,6 +506,7 @@ public VMSnapshotResponse createVMSnapshotResponse(VMSnapshot vmSnapshot) {\n         if (vmSnapshot.getParent() != null) {\n             VMSnapshot vmSnapshotParent = ApiDBUtils.getVMSnapshotById(vmSnapshot.getParent());\n             if (vmSnapshotParent != null) {\n+                vmSnapshotResponse.setParent(vmSnapshotParent.getUuid());\n                 vmSnapshotResponse.setParentName(vmSnapshotParent.getDisplayName());\n             }\n         }\n@@ -3096,9 +3101,11 @@ public UsageRecordResponse createUsageResponse(Usage usageRecord) {\n                 }\n             }\n             //Network ID\n-            NetworkVO network = _entityMgr.findByIdIncludingRemoved(NetworkVO.class, usageRecord.getNetworkId().toString());\n-            if (network != null) {\n-                usageRecResponse.setNetworkId(network.getUuid());\n+            if (usageRecord.getNetworkId() != null && usageRecord.getNetworkId() != 0L) {\n+                NetworkVO network = _entityMgr.findByIdIncludingRemoved(NetworkVO.class, usageRecord.getNetworkId().toString());\n+                if (network != null) {\n+                    usageRecResponse.setNetworkId(network.getUuid());\n+                }\n             }\n \n         } else if (usageRecord.getUsageType() == UsageTypes.VM_DISK_IO_READ || usageRecord.getUsageType() == UsageTypes.VM_DISK_IO_WRITE",
                "raw_url": "https://github.com/apache/cloudstack/raw/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "c943f6f223a117376cf7beb2e0b51a33ff924f66",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/ha/dao/HighAvailabilityDaoImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/ha/dao/HighAvailabilityDaoImpl.java?ref=5481485a083957ff58da3b6fea9d7b6d20f06875",
                "deletions": 0,
                "filename": "server/src/com/cloud/ha/dao/HighAvailabilityDaoImpl.java",
                "patch": "@@ -63,6 +63,7 @@ protected HighAvailabilityDaoImpl() {\n         TBASearch.and(\"server\", TBASearch.entity().getServerId(), Op.NULL);\n         TBASearch.and(\"taken\", TBASearch.entity().getDateTaken(), Op.NULL);\n         TBASearch.and(\"time\", TBASearch.entity().getTimeToTry(), Op.LTEQ);\n+        TBASearch.and(\"step\", TBASearch.entity().getStep(), Op.NIN);\n         TBASearch.done();\n \n         PreviousInstanceSearch = createSearchBuilder();\n@@ -151,6 +152,7 @@ public HaWorkVO take(final long serverId) {\n         try {\n             final SearchCriteria<HaWorkVO> sc = TBASearch.create();\n             sc.setParameters(\"time\", System.currentTimeMillis() >> 10);\n+            sc.setParameters(\"step\", Step.Done, Step.Cancelled);\n \n             final Filter filter = new Filter(HaWorkVO.class, null, true, 0l, 1l);\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/ha/dao/HighAvailabilityDaoImpl.java",
                "sha": "724f4f6d7c9ee6fc32c42aa0ec5feed77ba71bde",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/hypervisor/HypervisorGuruBase.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/hypervisor/HypervisorGuruBase.java?ref=5481485a083957ff58da3b6fea9d7b6d20f06875",
                "deletions": 2,
                "filename": "server/src/com/cloud/hypervisor/HypervisorGuruBase.java",
                "patch": "@@ -35,6 +35,7 @@\n import com.cloud.resource.ResourceManager;\n import com.cloud.server.ConfigurationServer;\n import com.cloud.service.ServiceOfferingDetailsVO;\n+import com.cloud.service.dao.ServiceOfferingDao;\n import com.cloud.service.dao.ServiceOfferingDetailsDao;\n import com.cloud.storage.dao.VMTemplateDetailsDao;\n import com.cloud.utils.Pair;\n@@ -71,6 +72,8 @@\n     ResourceManager _resourceMgr;\n     @Inject\n     ServiceOfferingDetailsDao _serviceOfferingDetailsDao;\n+    @Inject\n+    ServiceOfferingDao _serviceOfferingDao;\n \n     protected HypervisorGuruBase() {\n         super();\n@@ -125,8 +128,7 @@ public NicTO toNicTO(NicProfile profile) {\n     }\n \n     protected VirtualMachineTO toVirtualMachineTO(VirtualMachineProfile vmProfile) {\n-\n-        ServiceOffering offering = vmProfile.getServiceOffering();\n+        ServiceOffering offering = _serviceOfferingDao.findById(vmProfile.getId(), vmProfile.getServiceOfferingId());\n         VirtualMachine vm = vmProfile.getVirtualMachine();\n         Long minMemory = (long)(offering.getRamSize() / vmProfile.getMemoryOvercommitRatio());\n         int minspeed = (int)(offering.getSpeed() / vmProfile.getCpuOvercommitRatio());",
                "raw_url": "https://github.com/apache/cloudstack/raw/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/hypervisor/HypervisorGuruBase.java",
                "sha": "0188778e7641a45080e3bfe73ad79cd651a76377",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/cloudstack/blob/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/hypervisor/KVMGuru.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/hypervisor/KVMGuru.java?ref=5481485a083957ff58da3b6fea9d7b6d20f06875",
                "deletions": 7,
                "filename": "server/src/com/cloud/hypervisor/KVMGuru.java",
                "patch": "@@ -16,24 +16,25 @@\n // under the License.\n package com.cloud.hypervisor;\n \n-import java.util.Map;\n-\n-import javax.ejb.Local;\n-import javax.inject.Inject;\n-\n-import org.apache.cloudstack.storage.command.StorageSubSystemCommand;\n-\n import com.cloud.agent.api.Command;\n+import com.cloud.agent.api.to.DataObjectType;\n import com.cloud.agent.api.to.VirtualMachineTO;\n import com.cloud.host.HostVO;\n import com.cloud.host.dao.HostDao;\n import com.cloud.hypervisor.Hypervisor.HypervisorType;\n+import com.cloud.storage.DataStoreRole;\n import com.cloud.storage.GuestOSHypervisorVO;\n import com.cloud.storage.GuestOSVO;\n import com.cloud.storage.dao.GuestOSDao;\n import com.cloud.storage.dao.GuestOSHypervisorDao;\n import com.cloud.utils.Pair;\n import com.cloud.vm.VirtualMachineProfile;\n+import org.apache.cloudstack.storage.command.CopyCommand;\n+import org.apache.cloudstack.storage.command.StorageSubSystemCommand;\n+\n+import javax.ejb.Local;\n+import javax.inject.Inject;\n+import java.util.Map;\n \n @Local(value = HypervisorGuru.class)\n public class KVMGuru extends HypervisorGuruBase implements HypervisorGuru {\n@@ -77,6 +78,18 @@ public VirtualMachineTO implement(VirtualMachineProfile vm) {\n \n     @Override\n     public Pair<Boolean, Long> getCommandHostDelegation(long hostId, Command cmd) {\n+        if (cmd instanceof CopyCommand) {\n+            CopyCommand c = (CopyCommand) cmd;\n+            boolean inSeq = true;\n+            if (c.getSrcTO().getObjectType() == DataObjectType.SNAPSHOT ||\n+                    c.getDestTO().getObjectType() == DataObjectType.SNAPSHOT) {\n+                inSeq = false;\n+            } else if (c.getDestTO().getDataStore().getRole() == DataStoreRole.Image ||\n+                    c.getDestTO().getDataStore().getRole() == DataStoreRole.ImageCache) {\n+                inSeq = false;\n+            }\n+            c.setExecuteInSequence(inSeq);\n+        }\n         if (cmd instanceof StorageSubSystemCommand) {\n             StorageSubSystemCommand c = (StorageSubSystemCommand)cmd;\n             c.setExecuteInSequence(false);",
                "raw_url": "https://github.com/apache/cloudstack/raw/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/hypervisor/KVMGuru.java",
                "sha": "e15a41752e6f673e01c1055d1243e997b3c823c0",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/resource/ResourceManagerImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/resource/ResourceManagerImpl.java?ref=5481485a083957ff58da3b6fea9d7b6d20f06875",
                "deletions": 3,
                "filename": "server/src/com/cloud/resource/ResourceManagerImpl.java",
                "patch": "@@ -30,7 +30,6 @@\n import javax.inject.Inject;\n import javax.naming.ConfigurationException;\n \n-import com.cloud.capacity.CapacityState;\n import com.cloud.vm.VirtualMachine;\n \n import org.apache.cloudstack.api.ApiConstants;\n@@ -71,6 +70,7 @@\n import com.cloud.agent.transport.Request;\n import com.cloud.capacity.Capacity;\n import com.cloud.capacity.CapacityManager;\n+import com.cloud.capacity.CapacityState;\n import com.cloud.capacity.CapacityVO;\n import com.cloud.capacity.dao.CapacityDao;\n import com.cloud.cluster.ClusterManager;\n@@ -1174,12 +1174,13 @@ private boolean doMaintain(final long hostId) {\n         MaintainAnswer answer = (MaintainAnswer)_agentMgr.easySend(hostId, new MaintainCommand());\n         if (answer == null || !answer.getResult()) {\n             s_logger.warn(\"Unable to send MaintainCommand to host: \" + hostId);\n+            return false;\n         }\n \n         try {\n             resourceStateTransitTo(host, ResourceState.Event.AdminAskMaintenace, _nodeId);\n         } catch (NoTransitionException e) {\n-            String err = \"Cannot transimit resource state of host \" + host.getId() + \" to \" + ResourceState.Maintenance;\n+            String err = \"Cannot transmit resource state of host \" + host.getId() + \" to \" + ResourceState.Maintenance;\n             s_logger.debug(err, e);\n             throw new CloudRuntimeException(err + e.getMessage());\n         }\n@@ -1210,7 +1211,6 @@ private boolean doMaintain(final long hostId) {\n                 }\n             }\n         }\n-\n         return true;\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/resource/ResourceManagerImpl.java",
                "sha": "b0b18490cab7a1d1a12f57207ae0098da14f3103",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/resourcelimit/ResourceLimitManagerImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/resourcelimit/ResourceLimitManagerImpl.java?ref=5481485a083957ff58da3b6fea9d7b6d20f06875",
                "deletions": 1,
                "filename": "server/src/com/cloud/resourcelimit/ResourceLimitManagerImpl.java",
                "patch": "@@ -847,8 +847,9 @@ public Long doInTransaction(TransactionStatus status) {\n \n         // this lock guards against the updates to user_vm, volume, snapshot, public _ip and template table\n         // as any resource creation precedes with the resourceLimitExceeded check which needs this lock too\n+        Set rowIdsToLock = _resourceCountDao.listAllRowsToUpdate(accountId, Resource.ResourceOwnerType.Account, type);\n         SearchCriteria<ResourceCountVO> sc = ResourceCountSearch.create();\n-        sc.setParameters(\"accountId\", accountId);\n+        sc.setParameters(\"id\", rowIdsToLock.toArray());\n         _resourceCountDao.lockRows(sc, null, true);\n \n         ResourceCountVO accountRC = _resourceCountDao.findByOwnerAndType(accountId, ResourceOwnerType.Account, type);",
                "raw_url": "https://github.com/apache/cloudstack/raw/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/resourcelimit/ResourceLimitManagerImpl.java",
                "sha": "8bf091811bdabf9e2398c3a4b32b36c82f080bdd",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/server/ConfigurationServerImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/ConfigurationServerImpl.java?ref=5481485a083957ff58da3b6fea9d7b6d20f06875",
                "deletions": 0,
                "filename": "server/src/com/cloud/server/ConfigurationServerImpl.java",
                "patch": "@@ -219,6 +219,9 @@ public void persistDefaultValues() throws InternalErrorException {\n             _configDao.update(\"secstorage.secure.copy.cert\", \"realhostip\");\n             s_logger.debug(\"ConfigurationServer made secondary storage copy use realhostip.\");\n \n+            _configDao.update(\"user.password.encoders.exclude\", \"MD5,LDAP,PLAINTEXT\");\n+            s_logger.debug(\"Configuration server excluded insecure encoders\");\n+\n             // Save default service offerings\n             createServiceOffering(User.UID_SYSTEM, \"Small Instance\", 1, 512, 500, \"Small Instance\", ProvisioningType.THIN, false, false, null);\n             createServiceOffering(User.UID_SYSTEM, \"Medium Instance\", 1, 1024, 1000, \"Medium Instance\", ProvisioningType.THIN, false, false, null);",
                "raw_url": "https://github.com/apache/cloudstack/raw/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/server/ConfigurationServerImpl.java",
                "sha": "b85f13764b0901aad36e9eeb3aa23f8e721c3041",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/storage/download/DownloadActiveState.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/download/DownloadActiveState.java?ref=5481485a083957ff58da3b6fea9d7b6d20f06875",
                "deletions": 0,
                "filename": "server/src/com/cloud/storage/download/DownloadActiveState.java",
                "patch": "@@ -59,6 +59,7 @@ public String handleAnswer(DownloadAnswer answer) {\n \n     @Override\n     public void onEntry(String prevState, DownloadEvent event, Object evtObj) {\n+        super.onEntry(prevState, event, evtObj);\n         if (s_logger.isTraceEnabled()) {\n             getDownloadListener().log(\"onEntry, prev state= \" + prevState + \", curr state=\" + getName() + \", event=\" + event, Level.TRACE);\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/storage/download/DownloadActiveState.java",
                "sha": "d202d9add3162582c9b65211ee4dd6016df9bfe3",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/cloudstack/blob/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/user/AccountManagerImpl.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/user/AccountManagerImpl.java?ref=5481485a083957ff58da3b6fea9d7b6d20f06875",
                "deletions": 1,
                "filename": "server/src/com/cloud/user/AccountManagerImpl.java",
                "patch": "@@ -115,6 +115,10 @@\n import com.cloud.vm.dao.InstanceGroupDao;\n import com.cloud.vm.dao.UserVmDao;\n import com.cloud.vm.dao.VMInstanceDao;\n+import com.cloud.vm.snapshot.VMSnapshot;\n+import com.cloud.vm.snapshot.VMSnapshotManager;\n+import com.cloud.vm.snapshot.VMSnapshotVO;\n+import com.cloud.vm.snapshot.dao.VMSnapshotDao;\n import org.apache.cloudstack.acl.ControlledEntity;\n import org.apache.cloudstack.acl.QuerySelector;\n import org.apache.cloudstack.acl.RoleType;\n@@ -198,6 +202,10 @@\n     @Inject\n     private SnapshotManager _snapMgr;\n     @Inject\n+    private VMSnapshotManager _vmSnapshotMgr;\n+    @Inject\n+    private VMSnapshotDao _vmSnapshotDao;\n+    @Inject\n     private UserVmManager _vmMgr;\n     @Inject\n     private TemplateManager _tmpltMgr;\n@@ -727,6 +735,16 @@ protected boolean cleanupAccount(AccountVO account, long callerUserId, Account c\n                 accountCleanupNeeded = true;\n             }\n \n+            // Destroy VM Snapshots\n+            List<VMSnapshotVO> vmSnapshots = _vmSnapshotDao.listByAccountId(Long.valueOf(accountId));\n+            for (VMSnapshot vmSnapshot : vmSnapshots) {\n+                try {\n+                    _vmSnapshotMgr.deleteVMSnapshot(vmSnapshot.getId());\n+                } catch (Exception e) {\n+                    s_logger.debug(\"Failed to cleanup vm snapshot \" + vmSnapshot.getId() + \" due to \" + e.toString());\n+                }\n+            }\n+\n             // Destroy the account's VMs\n             List<UserVmVO> vms = _userVmDao.listByAccountId(accountId);\n             if (s_logger.isDebugEnabled()) {\n@@ -1166,6 +1184,9 @@ public UserAccount updateUser(Long userId, String firstName, String lastName, St\n         }\n \n         if (password != null) {\n+            if (password.isEmpty()) {\n+                throw new InvalidParameterValueException(\"Password cannot be empty\");\n+            }\n             String encodedPassword = null;\n             for (Iterator<UserAuthenticator> en = _userPasswordEncoders.iterator(); en.hasNext();) {\n                 UserAuthenticator authenticator = en.next();\n@@ -1974,7 +1995,7 @@ public void logoutUser(long userId) {\n     @Override\n     public UserAccount authenticateUser(String username, String password, Long domainId, String loginIpAddress, Map<String, Object[]> requestParameters) {\n         UserAccount user = null;\n-        if (password != null) {\n+        if (password != null && !password.isEmpty()) {\n             user = getUserAccount(username, password, domainId, requestParameters);\n         } else {\n             String key = _configDao.getValue(\"security.singlesignon.key\");",
                "raw_url": "https://github.com/apache/cloudstack/raw/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/user/AccountManagerImpl.java",
                "sha": "3d818ab0239f7c1eeaa764ea64a8863dc4e29b8d",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-5238: password checks, NPE fixes and minor fixes\n\n- insecure authenticators excluded in configuration\n- snapshot response should have zone\n- remove vmsnapshots when removing accounts\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/e000646790597cb6c245311f57761b41d23a4e34",
        "patched_files": [
            "ConfigurationServerImpl.java",
            "AccountManagerImpl.java",
            "ResourceLimitManagerImpl.java",
            "ApiResponseHelper.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "AccountManagerImplTest.java",
            "ApiResponseHelperTest.java",
            "ResourceLimitManagerImplTest.java",
            "ConfigurationServerImplTest.java"
        ]
    },
    "cloudstack_55c059c": {
        "bug_id": "cloudstack_55c059c",
        "commit": "https://github.com/apache/cloudstack/commit/55c059c09887651cab59e292bedafbbf9f1699df",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/55c059c09887651cab59e292bedafbbf9f1699df/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=55c059c09887651cab59e292bedafbbf9f1699df",
                "deletions": 4,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -2365,12 +2365,18 @@ public static void populateOwner(ControlledViewEntityResponse response, Controll\n \n     private void populateAccount(ControlledEntityResponse response, long accountId) {\n         Account account = ApiDBUtils.findAccountById(accountId);\n-        if (account.getType() == Account.ACCOUNT_TYPE_PROJECT) {\n+        if (account == null) {\n+            s_logger.debug(\"Unable to find account with id: \" + accountId);\n+        } else if (account.getType() == Account.ACCOUNT_TYPE_PROJECT) {\n             // find the project\n             Project project = ApiDBUtils.findProjectByProjectAccountId(account.getId());\n-            response.setProjectId(project.getUuid());\n-            response.setProjectName(project.getName());\n-            response.setAccountName(account.getAccountName());\n+            if (project != null) {\n+                response.setProjectId(project.getUuid());\n+                response.setProjectName(project.getName());\n+                response.setAccountName(account.getAccountName());\n+            } else {\n+                s_logger.debug(\"Unable to find project with id: \" + account.getId());\n+            }\n         } else {\n             response.setAccountName(account.getAccountName());\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/55c059c09887651cab59e292bedafbbf9f1699df/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "0081b9d209a0a79f90314553933989c5a768bf61",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-10144: fix possible NPE in listVlanIpRanges",
        "parent": "https://github.com/apache/cloudstack/commit/7f6ae15972fde879bb13efce105f9cca515b638f",
        "patched_files": [
            "ApiResponseHelper.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "ApiResponseHelperTest.java"
        ]
    },
    "cloudstack_58b57ca": {
        "bug_id": "cloudstack_58b57ca",
        "commit": "https://github.com/apache/cloudstack/commit/58b57ca5dbe514c94469a28d2ebaf0474550ecec",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/58b57ca5dbe514c94469a28d2ebaf0474550ecec/api/src/org/apache/cloudstack/api/ApiConstants.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/ApiConstants.java?ref=58b57ca5dbe514c94469a28d2ebaf0474550ecec",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/api/ApiConstants.java",
                "patch": "@@ -405,6 +405,7 @@\n     public static final String VSM_CONFIG_MODE = \"vsmconfigmode\";\n     public static final String VSM_CONFIG_STATE = \"vsmconfigstate\";\n     public static final String VSM_DEVICE_STATE = \"vsmdevicestate\";\n+    public static final String VCENTER = \"vcenter\";\n     public static final String ADD_VSM_FLAG = \"addvsmflag\";\n     public static final String END_POINT = \"endpoint\";\n     public static final String REGION_ID = \"regionid\";",
                "raw_url": "https://github.com/apache/cloudstack/raw/58b57ca5dbe514c94469a28d2ebaf0474550ecec/api/src/org/apache/cloudstack/api/ApiConstants.java",
                "sha": "ab1402ccde952f13a75e08ee07b227af2bee80b5",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/58b57ca5dbe514c94469a28d2ebaf0474550ecec/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/dao/VmwareDatacenterDaoImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/dao/VmwareDatacenterDaoImpl.java?ref=58b57ca5dbe514c94469a28d2ebaf0474550ecec",
                "deletions": 2,
                "filename": "plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/dao/VmwareDatacenterDaoImpl.java",
                "patch": "@@ -75,15 +75,15 @@ public VmwareDatacenterVO getVmwareDatacenterByGuid(String guid) {\n \n     @Override\n     public List<VmwareDatacenterVO> getVmwareDatacenterByNameAndVcenter(String name, String vCenterHost) {\n-        SearchCriteria<VmwareDatacenterVO> sc = guidSearch.create();\n+        SearchCriteria<VmwareDatacenterVO> sc = nameVcSearch.create();\n         sc.setParameters(\"name\", name);\n         sc.setParameters(\"vCenterHost\", vCenterHost);\n         return search(sc, null);\n     }\n \n     @Override\n     public List<VmwareDatacenterVO> listVmwareDatacenterByName(String name) {\n-        SearchCriteria<VmwareDatacenterVO> sc = guidSearch.create();\n+        SearchCriteria<VmwareDatacenterVO> sc = nameSearch.create();\n         sc.setParameters(\"name\", name);\n         return search(sc, null);\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/58b57ca5dbe514c94469a28d2ebaf0474550ecec/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/dao/VmwareDatacenterDaoImpl.java",
                "sha": "9f5796a073ad739f9ca903d5f036da9e70ff57e2",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/cloudstack/blob/58b57ca5dbe514c94469a28d2ebaf0474550ecec/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/manager/VmwareManagerImpl.java",
                "changes": 102,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/manager/VmwareManagerImpl.java?ref=58b57ca5dbe514c94469a28d2ebaf0474550ecec",
                "deletions": 69,
                "filename": "plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/manager/VmwareManagerImpl.java",
                "patch": "@@ -21,7 +21,7 @@\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.net.URL;\n-import java.net.URLDecoder;\n+import java.rmi.RemoteException;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n@@ -38,8 +38,6 @@\n \n import org.apache.cloudstack.api.command.admin.zone.AddVmwareDcCmd;\n import org.apache.cloudstack.api.command.admin.zone.RemoveVmwareDcCmd;\n-import org.apache.cloudstack.engine.subsystem.api.storage.DataStoreManager;\n-import org.apache.cloudstack.engine.subsystem.api.storage.DataStoreRole;\n import org.apache.log4j.Logger;\n \n import com.cloud.agent.AgentManager;\n@@ -50,8 +48,6 @@\n import com.cloud.agent.api.Command;\n import com.cloud.agent.api.StartupCommand;\n import com.cloud.agent.api.StartupRoutingCommand;\n-import com.cloud.agent.api.storage.MigrateVolumeAnswer;\n-import com.cloud.agent.api.to.VolumeTO;\n import com.cloud.cluster.ClusterManager;\n import com.cloud.configuration.Config;\n import com.cloud.configuration.dao.ConfigurationDao;\n@@ -80,7 +76,6 @@\n import com.cloud.hypervisor.vmware.dao.VmwareDatacenterDao;\n import com.cloud.hypervisor.vmware.dao.VmwareDatacenterZoneMapDao;\n import com.cloud.hypervisor.vmware.mo.CustomFieldConstants;\n-import com.cloud.hypervisor.vmware.mo.CustomFieldsManagerMO;\n import com.cloud.hypervisor.vmware.mo.DatacenterMO;\n import com.cloud.hypervisor.vmware.mo.DiskControllerType;\n import com.cloud.hypervisor.vmware.mo.HostFirewallSystemMO;\n@@ -89,7 +84,6 @@\n import com.cloud.hypervisor.vmware.mo.TaskMO;\n import com.cloud.hypervisor.vmware.mo.VirtualEthernetCardType;\n import com.cloud.hypervisor.vmware.mo.VmwareHostType;\n-import com.cloud.utils.ssh.SshHelper;\n import com.cloud.hypervisor.vmware.resource.VmwareContextFactory;\n import com.cloud.hypervisor.vmware.util.VmwareClient;\n import com.cloud.hypervisor.vmware.util.VmwareContext;\n@@ -103,15 +97,10 @@\n import com.cloud.server.ConfigurationServer;\n import com.cloud.storage.JavaStorageLayer;\n import com.cloud.storage.StorageLayer;\n-import com.cloud.storage.StoragePool;\n-import com.cloud.storage.VolumeVO;\n-import com.cloud.storage.dao.VolumeDao;\n import com.cloud.storage.secondary.SecondaryStorageVmManager;\n import com.cloud.utils.FileUtil;\n import com.cloud.utils.NumbersUtil;\n import com.cloud.utils.Pair;\n-import com.cloud.utils.UriUtils;\n-import com.cloud.utils.component.Manager;\n import com.cloud.utils.component.ManagerBase;\n import com.cloud.utils.concurrency.NamedThreadFactory;\n import com.cloud.utils.db.DB;\n@@ -121,8 +110,6 @@\n import com.cloud.utils.script.Script;\n import com.cloud.utils.ssh.SshHelper;\n import com.cloud.vm.DomainRouterVO;\n-import com.cloud.vm.VMInstanceVO;\n-import com.cloud.vm.dao.VMInstanceDao;\n import com.google.gson.Gson;\n import com.vmware.vim25.AboutInfo;\n import com.vmware.vim25.HostConnectSpec;\n@@ -530,7 +517,7 @@ public void prepareSecondaryStorageStore(String storageUrl) {\n                         _configServer.updateKeyPairs();\n \n                         s_logger.info(\"Copy System VM patch ISO file to secondary storage. source ISO: \" + srcIso.getAbsolutePath() +\n-                        \t\", destination: \" + destIso.getAbsolutePath());\n+                                \", destination: \" + destIso.getAbsolutePath());\n                         try {\n                             FileUtil.copyfile(srcIso, destIso);\n                         } catch(IOException e) {\n@@ -579,7 +566,7 @@ private File getSystemVMPatchIsoFile() {\n \n         assert(isoFile != null);\n         if(!isoFile.exists()) {\n-        \ts_logger.error(\"Unable to locate systemvm.iso in your setup at \" + isoFile.toString());\n+            s_logger.error(\"Unable to locate systemvm.iso in your setup at \" + isoFile.toString());\n         }\n         return isoFile;\n     }\n@@ -596,7 +583,7 @@ public File getSystemVMKeyFile() {\n         }\n         assert(keyFile != null);\n         if(!keyFile.exists()) {\n-        \ts_logger.error(\"Unable to locate id_rsa.cloud in your setup at \" + keyFile.toString());\n+            s_logger.error(\"Unable to locate id_rsa.cloud in your setup at \" + keyFile.toString());\n         }\n         return keyFile;\n     }\n@@ -914,9 +901,9 @@ public String getRootDiskController() {\n     public VmwareDatacenterVO addVmwareDatacenter(AddVmwareDcCmd cmd) throws ResourceInUseException {\n         VmwareDatacenterVO vmwareDc = null;\n         Long zoneId = cmd.getZoneId();\n-        String url = cmd.getUrl();\n         String userName = cmd.getUsername();\n         String password = cmd.getPassword();\n+        String vCenterHost = cmd.getVcenter();\n         String vmwareDcName = cmd.getName();\n \n         // Zone validation\n@@ -928,25 +915,26 @@ public VmwareDatacenterVO addVmwareDatacenter(AddVmwareDcCmd cmd) throws Resourc\n             throw new CloudRuntimeException(\"Zone \" + zoneId + \" is already associated with a VMware datacenter.\");\n         }\n \n-        // Validate url and get uri\n-        URI uri = getUri(url);\n-\n-        // Validate username and password and DC name\n+        // Validate username, password, VMware DC name and vCenter\n         if (userName == null) {\n-            throw new InvalidParameterValueException(\"Invalid parameter username.\");\n+            throw new InvalidParameterValueException(\"Missing or invalid parameter username.\");\n         }\n \n         if (password == null) {\n-            throw new InvalidParameterValueException(\"Invalid parameter password.\");\n+            throw new InvalidParameterValueException(\"Missing or invalid parameter username.\");\n         }\n \n         if (vmwareDcName == null) {\n-            throw new InvalidParameterValueException(\"Invalid parameter name. Please provide valid VMware datacenter name.\");\n+            throw new InvalidParameterValueException(\"Missing or invalid parameter name. Please provide valid VMware datacenter name.\");\n+        }\n+\n+        if (vCenterHost == null) {\n+            throw new InvalidParameterValueException(\"Missing or invalid parameter name. \" +\n+                    \"Please provide valid VMware vCenter server's IP address or fully qualified domain name.\");\n         }\n \n         // Check if DC is already part of zone\n         // In that case vmware_data_center table should have the DC\n-        String vCenterHost = uri.getHost();\n         vmwareDc = _vmwareDcDao.getVmwareDatacenterByGuid(vmwareDcName + \"@\" + vCenterHost);\n         if (vmwareDc != null) {\n             throw new ResourceInUseException(\"This DC is already part of other CloudStack zone(s). Cannot add this DC to more zones.\");\n@@ -963,14 +951,13 @@ public VmwareDatacenterVO addVmwareDatacenter(AddVmwareDcCmd cmd) throws Resourc\n             context = VmwareContextFactory.create(vCenterHost, userName, password);\n \n             // Check if DC exists on vCenter\n-            try {\n-                dcMo = new DatacenterMO(context, vmwareDcName);\n-            } catch(Throwable t) {\n-                String msg = \"Unable to find DC \" + vmwareDcName + \" in vCenter \" + vCenterHost;\n+            dcMo = new DatacenterMO(context, vmwareDcName);\n+            dcMor = dcMo.getMor();\n+            if (dcMor == null) {\n+                String msg = \"Unable to find VMware DC \" + vmwareDcName + \" in vCenter \" + vCenterHost + \". \";\n                 s_logger.error(msg);\n-                throw new DiscoveryException(msg);\n+                throw new InvalidParameterValueException(msg);\n             }\n-            assert (dcMo != null);\n \n             // Check if DC is already associated with another cloudstack deployment\n             // Get custom field property cloud.zone over this DC\n@@ -1020,9 +1007,13 @@ public VmwareDatacenterVO addVmwareDatacenter(AddVmwareDcCmd cmd) throws Resourc\n             }\n             dcMo.setCustomFieldValue(CustomFieldConstants.CLOUD_ZONE, \"true\");\n \n-        } catch (Exception e) {\n-            String msg = \"VMware DC discovery failed due to : \" + VmwareHelper.getExceptionMessage(e);\n-            s_logger.error(msg);\n+        } catch (Throwable e) {\n+            String msg = \"Failed to add VMware DC to zone \";\n+            if (e instanceof RemoteException) {\n+                msg = \"Encountered remote exception at vCenter. \" + VmwareHelper.getExceptionMessage(e);\n+            } else {\n+                msg += \"due to : \" + e.getMessage();\n+            }\n             throw new CloudRuntimeException(msg);\n         } finally {\n             if (context != null)\n@@ -1032,6 +1023,7 @@ public VmwareDatacenterVO addVmwareDatacenter(AddVmwareDcCmd cmd) throws Resourc\n         return vmwareDc;\n     }\n \n+\n     @Override\n     public boolean removeVmwareDatacenter(RemoveVmwareDcCmd cmd) throws ResourceInUseException {\n         Long zoneId = cmd.getZoneId();\n@@ -1070,8 +1062,8 @@ public boolean removeVmwareDatacenter(RemoveVmwareDcCmd cmd) throws ResourceInUs\n             _vmwareDcZoneMapDao.remove(vmwareDcZoneMap.getId());\n             txn.commit();\n         } catch (Exception e) {\n-            s_logger.info(\"Caught exception when trying to delete VMware datacenter record..\" + e.getMessage());\n-            throw new CloudRuntimeException(\"Failed to delete VMware datacenter \");\n+            s_logger.info(\"Caught exception when trying to delete VMware datacenter record.\" + e.getMessage());\n+            throw new CloudRuntimeException(\"Failed to delete VMware datacenter.\");\n         }\n \n         // Construct context\n@@ -1083,7 +1075,7 @@ public boolean removeVmwareDatacenter(RemoveVmwareDcCmd cmd) throws ResourceInUs\n             try {\n                 dcMo = new DatacenterMO(context, vmwareDcName);\n             } catch(Throwable t) {\n-                String msg = \"able to find DC \" + vmwareDcName + \" in vCenter \" + vCenterHost;\n+                String msg = \"Unable to find DC \" + vmwareDcName + \" in vCenter \" + vCenterHost;\n                 s_logger.error(msg);\n                 throw new DiscoveryException(msg);\n             }\n@@ -1095,7 +1087,7 @@ public boolean removeVmwareDatacenter(RemoveVmwareDcCmd cmd) throws ResourceInUs\n             s_logger.info(\"Sucessfully reset custom field property cloud.zone over DC \" + vmwareDcName);\n         } catch (Exception e) {\n             String msg = \"Unable to reset custom field property cloud.zone over DC \" + vmwareDcName\n-                       + \" due to : \" + VmwareHelper.getExceptionMessage(e);\n+                    + \" due to : \" + VmwareHelper.getExceptionMessage(e);\n             s_logger.error(msg);\n             throw new CloudRuntimeException(msg);\n         } finally {\n@@ -1111,7 +1103,7 @@ private void validateZone(Long zoneId, String errStr) throws ResourceInUseExcept\n         DataCenterVO zone = _dcDao.findById(zoneId);\n         if (zone == null) {\n             InvalidParameterValueException ex = new InvalidParameterValueException(\n-                    \"Can't find zone by the id specified\");\n+                    \"Can't find zone by the id specified.\");\n             throw ex;\n         }\n \n@@ -1122,38 +1114,10 @@ private void validateZone(Long zoneId, String errStr) throws ResourceInUseExcept\n             for (ClusterVO cluster : clusters) {\n                 if (cluster.getHypervisorType().equals(HypervisorType.VMware)) {\n                     throw new ResourceInUseException(\"Zone has one or more clusters.\"\n-                        + \" Can't \" + errStr + \" which already has clusters.\");\n-                }\n-            }\n-        }\n-    }\n-\n-    private URI getUri(String url) throws InvalidParameterValueException {\n-        if (url == null) {\n-            throw new InvalidParameterValueException(\"Invalid url.\");\n-        }\n-\n-        URI uri = null;\n-        try {\n-            uri = new URI(UriUtils.encodeURIComponent(url));\n-            if (uri.getScheme() == null) {\n-                throw new InvalidParameterValueException(\n-                        \"uri.scheme is null \" + url\n-                                + \", add http:// as a prefix\");\n-            } else if (uri.getScheme().equalsIgnoreCase(\"http\")) {\n-                if (uri.getHost() == null\n-                        || uri.getHost().equalsIgnoreCase(\"\")\n-                        || uri.getPath() == null\n-                        || uri.getPath().equalsIgnoreCase(\"\")) {\n-                    throw new InvalidParameterValueException(\n-                            \"Your host and/or path is wrong.  Make sure it's of the format http://hostname/path\");\n+                            + \" Can't \" + errStr + \" which already has clusters.\");\n                 }\n             }\n-        } catch (URISyntaxException e) {\n-            throw new InvalidParameterValueException(url\n-                    + \" is not a valid uri\");\n         }\n-        return uri;\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/cloudstack/raw/58b57ca5dbe514c94469a28d2ebaf0474550ecec/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/manager/VmwareManagerImpl.java",
                "sha": "a604392f7a9c1afc40fd232be7983ca68f7ecffb",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/58b57ca5dbe514c94469a28d2ebaf0474550ecec/plugins/hypervisors/vmware/src/org/apache/cloudstack/api/command/admin/zone/AddVmwareDcCmd.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/org/apache/cloudstack/api/command/admin/zone/AddVmwareDcCmd.java?ref=58b57ca5dbe514c94469a28d2ebaf0474550ecec",
                "deletions": 4,
                "filename": "plugins/hypervisors/vmware/src/org/apache/cloudstack/api/command/admin/zone/AddVmwareDcCmd.java",
                "patch": "@@ -48,8 +48,8 @@\n     @Parameter(name=ApiConstants.NAME, type=CommandType.STRING, required=true, description=\"Name of VMware datacenter to be added to specified zone.\")\n     private String name;\n \n-    @Parameter(name=ApiConstants.URL, type=CommandType.STRING, required=false, description=\"The URL of vCenter.\")\n-    private String url;\n+    @Parameter(name=ApiConstants.VCENTER, type=CommandType.STRING, required=true, description=\"The name/ip of vCenter. Make sure it is IP address or full qualified domain name for host running vCenter server.\")\n+    private String vCenter;\n \n     @Parameter(name=ApiConstants.USERNAME, type=CommandType.STRING, required=false, description=\"The Username required to connect to resource.\")\n     private String username;\n@@ -64,8 +64,8 @@ public String getName() {\n         return name;\n     }\n \n-    public String getUrl() {\n-        return url;\n+    public String getVcenter() {\n+        return vCenter;\n     }\n \n     public String getUsername() {",
                "raw_url": "https://github.com/apache/cloudstack/raw/58b57ca5dbe514c94469a28d2ebaf0474550ecec/plugins/hypervisors/vmware/src/org/apache/cloudstack/api/command/admin/zone/AddVmwareDcCmd.java",
                "sha": "317452b7b7f1b1f7267be009cf0911d5630e17d5",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/58b57ca5dbe514c94469a28d2ebaf0474550ecec/plugins/hypervisors/vmware/test/com/cloud/hypervisor/vmware/VmwareDatacenterApiUnitTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/test/com/cloud/hypervisor/vmware/VmwareDatacenterApiUnitTest.java?ref=58b57ca5dbe514c94469a28d2ebaf0474550ecec",
                "deletions": 2,
                "filename": "plugins/hypervisors/vmware/test/com/cloud/hypervisor/vmware/VmwareDatacenterApiUnitTest.java",
                "patch": "@@ -214,7 +214,7 @@ public void testSetUp() {\n         Mockito.when(_vmwareDcZoneMapDao.findByZoneId(1L)).thenReturn(null);\n         Mockito.when(_vmwareDcZoneMapDao.expunge(1L)).thenReturn(true);\n         Mockito.when(addCmd.getZoneId()).thenReturn(1L);\n-        Mockito.when(addCmd.getUrl()).thenReturn(url);\n+        Mockito.when(addCmd.getVcenter()).thenReturn(vCenterHost);\n         Mockito.when(addCmd.getUsername()).thenReturn(user);\n         Mockito.when(addCmd.getPassword()).thenReturn(password);\n         Mockito.when(addCmd.getName()).thenReturn(vmwareDcName);\n@@ -265,7 +265,7 @@ public void testAddVmwareDcWithNullPassword() throws ResourceInUseException, Ill\n \n     //@Test(expected = InvalidParameterValueException.class)\n     public void testAddVmwareDcWithNullUrl() throws ResourceInUseException, IllegalArgumentException, DiscoveryException, Exception {\n-        Mockito.when(addCmd.getUrl()).thenReturn(null);\n+        Mockito.when(addCmd.getVcenter()).thenReturn(null);\n         _vmwareDatacenterService.addVmwareDatacenter(addCmd);\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/58b57ca5dbe514c94469a28d2ebaf0474550ecec/plugins/hypervisors/vmware/test/com/cloud/hypervisor/vmware/VmwareDatacenterApiUnitTest.java",
                "sha": "de08c93c78a326fcc84cac52fe759a334fbcf8f9",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-2805 [VMware] addVmwareDc fails with NPE when non-existent DC name is passed to the API\nMade vcenter as required parameter to addVmwareDc API.\nRemoved stale parameter url from addVmwareDc API.\nImproved Exception handling, logging remote exception details.",
        "parent": "https://github.com/apache/cloudstack/commit/89fa121a0cfb2bca978d4c72a91c1ba33326af68",
        "patched_files": [
            "ApiConstants.java",
            "AddVmwareDcCmd.java",
            "VmwareDatacenterDaoImpl.java",
            "VmwareManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VmwareDatacenterApiUnitTest.java"
        ]
    },
    "cloudstack_5a0ed87": {
        "bug_id": "cloudstack_5a0ed87",
        "commit": "https://github.com/apache/cloudstack/commit/5a0ed8764be12cbf028f829d2db1d1af01a8a283",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/5a0ed8764be12cbf028f829d2db1d1af01a8a283/utils/src/org/apache/cloudstack/utils/auth/SAMLUtils.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/org/apache/cloudstack/utils/auth/SAMLUtils.java?ref=5a0ed8764be12cbf028f829d2db1d1af01a8a283",
                "deletions": 0,
                "filename": "utils/src/org/apache/cloudstack/utils/auth/SAMLUtils.java",
                "patch": "@@ -218,6 +218,9 @@ public static Response decodeSAMLResponse(String responseMessage)\n \n     public static String generateSAMLRequestSignature(String urlEncodedString, PrivateKey signingKey)\n             throws NoSuchAlgorithmException, SignatureException, InvalidKeyException, UnsupportedEncodingException {\n+        if (signingKey == null || urlEncodedString == null) {\n+            return null;\n+        }\n         String url = urlEncodedString + \"&SigAlg=\" + URLEncoder.encode(SignatureConstants.ALGO_ID_SIGNATURE_RSA_SHA1, HttpUtils.UTF_8);\n         Signature signature = Signature.getInstance(\"SHA1withRSA\");\n         signature.initSign(signingKey);",
                "raw_url": "https://github.com/apache/cloudstack/raw/5a0ed8764be12cbf028f829d2db1d1af01a8a283/utils/src/org/apache/cloudstack/utils/auth/SAMLUtils.java",
                "sha": "b085e49f4ea406208f323a41a9bc93ed2bb7a6a0",
                "status": "modified"
            }
        ],
        "message": "SAMLUtils: Fix NPE incase signature is generated with a null privateKey\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/a66127dfb12476d098dfbdcc12dbc0beb29c92ee",
        "patched_files": [
            "SAMLUtils.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "SAMLUtilsTest.java"
        ]
    },
    "cloudstack_6397f1c": {
        "bug_id": "cloudstack_6397f1c",
        "commit": "https://github.com/apache/cloudstack/commit/6397f1c82ef52fb23b4040f8836b3757cce63769",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/6397f1c82ef52fb23b4040f8836b3757cce63769/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=6397f1c82ef52fb23b4040f8836b3757cce63769",
                "deletions": 1,
                "filename": "engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -290,7 +290,7 @@\n     }\n \n     public void setHostAllocators(List<HostAllocator> hostAllocators) {\n-        hostAllocators = hostAllocators;\n+        this.hostAllocators = hostAllocators;\n     }\n \n     protected List<StoragePoolAllocator> _storagePoolAllocators;",
                "raw_url": "https://github.com/apache/cloudstack/raw/6397f1c82ef52fb23b4040f8836b3757cce63769/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "db3e7c2f695b58895e7cbb0f672374e0148db056",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-6329 [Automation] Changing service offering of VM from medium to small failing with NPE\n\n- The hostAllocators were not getting set",
        "parent": "https://github.com/apache/cloudstack/commit/7819775bb81f713d564ba0f49d67044885e03998",
        "patched_files": [
            "VirtualMachineManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_64e938b": {
        "bug_id": "cloudstack_64e938b",
        "commit": "https://github.com/apache/cloudstack/commit/64e938b7014da9994185dfe80120254cd96d4f7a",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/64e938b7014da9994185dfe80120254cd96d4f7a/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/CitrixResourceBase.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/CitrixResourceBase.java?ref=64e938b7014da9994185dfe80120254cd96d4f7a",
                "deletions": 6,
                "filename": "plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/CitrixResourceBase.java",
                "patch": "@@ -6232,11 +6232,11 @@ private long getVMSnapshotChainSize(Connection conn, VolumeObjectTO volumeTo, St\n                     // add size of snapshot vdi node, usually this only contains meta data\n                     size = size + vdi.getPhysicalUtilisation(conn);\n                     // add size of snapshot vdi parent, this contains data\n-                    if (parentVDI != null)\n+                    if (!isRefNull(parentVDI))\n                         size = size + parentVDI.getPhysicalUtilisation(conn).longValue();\n                 }\n             } catch (Exception e) {\n-                s_logger.debug(\"Exception occurs when calculate \" + \"snapshot capacity for volumes: \" + e.getMessage());\n+                s_logger.debug(\"Exception occurs when calculate snapshot capacity for volumes: due to \" + e.toString());\n                 continue;\n             }\n         }\n@@ -6248,13 +6248,17 @@ private long getVMSnapshotChainSize(Connection conn, VolumeObjectTO volumeTo, St\n                     try {\n                         String vName = vmr.getNameLabel(conn);\n                         if (vName != null && vName.contains(vmName) && vmr.getIsASnapshot(conn)) {\n-\n                             VDI memoryVDI = vmr.getSuspendVDI(conn);\n-                            size = size + memoryVDI.getParent(conn).getPhysicalUtilisation(conn);\n-                            size = size + memoryVDI.getPhysicalUtilisation(conn);\n+                            if (!isRefNull(memoryVDI)) {\n+                                size = size + memoryVDI.getPhysicalUtilisation(conn);\n+                                VDI pMemoryVDI = memoryVDI.getParent(conn);\n+                                if (!isRefNull(pMemoryVDI)) {\n+                                    size = size + pMemoryVDI.getPhysicalUtilisation(conn);\n+                                }\n+                            }\n                         }\n                     } catch (Exception e) {\n-                        s_logger.debug(\"Exception occurs when calculate \" + \"snapshot capacity for memory: \" + e.getMessage());\n+                        s_logger.debug(\"Exception occurs when calculate snapshot capacity for memory: due to \" + e.toString());\n                         continue;\n                     }\n                 }",
                "raw_url": "https://github.com/apache/cloudstack/raw/64e938b7014da9994185dfe80120254cd96d4f7a/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/CitrixResourceBase.java",
                "sha": "a90f99d0fc2e7665c66efdb21efdb918474b697b",
                "status": "modified"
            }
        ],
        "message": "fixed NPE on calculating vm snasphot volume size\n\n(cherry picked from commit 95c7ffbd46f9f674b8813a7b992c17019eb00137)\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/86fe713ab9ca40f0be1b0d6a8142352a54dc6079",
        "patched_files": [
            "CitrixResourceBase.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "CitrixResourceBaseTest.java"
        ]
    },
    "cloudstack_66fc7c6": {
        "bug_id": "cloudstack_66fc7c6",
        "commit": "https://github.com/apache/cloudstack/commit/66fc7c62f4b21e770ecc6d6dfa99b3b06f410e89",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/66fc7c62f4b21e770ecc6d6dfa99b3b06f410e89/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java?ref=66fc7c62f4b21e770ecc6d6dfa99b3b06f410e89",
                "deletions": 4,
                "filename": "server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "patch": "@@ -1013,10 +1013,12 @@ protected void updateRoutersRedundantState(final List<DomainRouterVO> routers) {\n                         s_logger.warn(\"Unable to update router \" + router.getHostName() + \"'s status\");\n                     }\n                     RedundantState state = RedundantState.UNKNOWN;\n-                    if (answer != null && answer.getResult()) {\n-                        state = answer.getState();\n-                    } else {\n-                        s_logger.info(\"Agent response doesn't seem to be correct ==> \" + answer.getResult());\n+                    if (answer != null) {\n+                        if (answer.getResult()) {\n+                            state = answer.getState();\n+                        } else {\n+                            s_logger.info(\"Agent response doesn't seem to be correct ==> \" + answer.getResult());\n+                        }\n                     }\n                     router.setRedundantState(state);\n                     updated = true;",
                "raw_url": "https://github.com/apache/cloudstack/raw/66fc7c62f4b21e770ecc6d6dfa99b3b06f410e89/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "sha": "ca1f67dbb69b7b98ae38a851e54398cd05075875",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-9055: fix NPE in updating Redundant State of VPC networks",
        "parent": "https://github.com/apache/cloudstack/commit/f6db0a2a4948753c9ff584c20b5ae45ada6486f4",
        "patched_files": [
            "VirtualNetworkApplianceManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualNetworkApplianceManagerImplTest.java"
        ]
    },
    "cloudstack_68b5440": {
        "bug_id": "cloudstack_68b5440",
        "commit": "https://github.com/apache/cloudstack/commit/68b5440d442aa5946cd3f37b6b7581e582946e68",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/68b5440d442aa5946cd3f37b6b7581e582946e68/framework/jobs/src/org/apache/cloudstack/framework/jobs/impl/AsyncJobManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/jobs/src/org/apache/cloudstack/framework/jobs/impl/AsyncJobManagerImpl.java?ref=68b5440d442aa5946cd3f37b6b7581e582946e68",
                "deletions": 1,
                "filename": "framework/jobs/src/org/apache/cloudstack/framework/jobs/impl/AsyncJobManagerImpl.java",
                "patch": "@@ -698,7 +698,7 @@ public String marshallResultObject(Serializable obj) {\n \n     @Override\n     public Object unmarshallResultObject(AsyncJob job) {\n-        if(job.getResult() != null)\n+        if(job != null && job.getResult() != null)\n             return JobSerializerHelper.fromObjectSerializedString(job.getResult());\n         return null;\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/68b5440d442aa5946cd3f37b6b7581e582946e68/framework/jobs/src/org/apache/cloudstack/framework/jobs/impl/AsyncJobManagerImpl.java",
                "sha": "e7d95a99c6abdaf6ce5af063d958c45edd8b9f34",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/68b5440d442aa5946cd3f37b6b7581e582946e68/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java?ref=68b5440d442aa5946cd3f37b6b7581e582946e68",
                "deletions": 0,
                "filename": "plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "patch": "@@ -4027,6 +4027,8 @@ public int compare(DiskTO arg0, DiskTO arg1) {\n                             diskdef.defBlockBasedDisk(device, devId, DiskDef.diskBus.VIRTIO);\n                             diskdef.setQemuDriver(false);\n                             vm.getDevices().addDevice(diskdef);\n+                        } else {\n+                           throw new InternalErrorException(\"Error while mapping RBD device on host\");\n                         }\n                     }\n                 }",
                "raw_url": "https://github.com/apache/cloudstack/raw/68b5440d442aa5946cd3f37b6b7581e582946e68/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "sha": "f2b3c6341be84ab649c1816b4404a47e3c2b23bf",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/68b5440d442aa5946cd3f37b6b7581e582946e68/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/storage/LibvirtStorageAdaptor.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/storage/LibvirtStorageAdaptor.java?ref=68b5440d442aa5946cd3f37b6b7581e582946e68",
                "deletions": 0,
                "filename": "plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/storage/LibvirtStorageAdaptor.java",
                "patch": "@@ -363,6 +363,9 @@ public KVMStoragePool getStoragePool(String uuid, boolean refreshInfo) {\n                 storage.create(0);\n             }\n             LibvirtStoragePoolDef spd = getStoragePoolDef(conn, storage);\n+            if (spd == null) {\n+                throw new CloudRuntimeException(\"Unable to parse the storage pool definition for storage pool \" + uuid);\n+            }\n             StoragePoolType type = null;\n             if (spd.getPoolType() == LibvirtStoragePoolDef.poolType.NETFS) {\n                 type = StoragePoolType.NetworkFilesystem;",
                "raw_url": "https://github.com/apache/cloudstack/raw/68b5440d442aa5946cd3f37b6b7581e582946e68/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/storage/LibvirtStorageAdaptor.java",
                "sha": "9da833e4595f621a0006810f0433c5ff93ea2408",
                "status": "modified"
            }
        ],
        "message": "fix NPE cases, throw exceptions early on\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/9658569f5ab15c528ebfe2b43bc02b43c297db85",
        "patched_files": [
            "LibvirtComputingResource.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "LibvirtComputingResourceTest.java"
        ]
    },
    "cloudstack_6a18cdd": {
        "bug_id": "cloudstack_6a18cdd",
        "commit": "https://github.com/apache/cloudstack/commit/6a18cdd6ef969cca3a063356d4a9a68163b5ff6e",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/6a18cdd6ef969cca3a063356d4a9a68163b5ff6e/engine/schema/src/com/cloud/storage/dao/VolumeDao.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/storage/dao/VolumeDao.java?ref=6a18cdd6ef969cca3a063356d4a9a68163b5ff6e",
                "deletions": 1,
                "filename": "engine/schema/src/com/cloud/storage/dao/VolumeDao.java",
                "patch": "@@ -80,7 +80,7 @@\n \n     List<VolumeVO> listVolumesToBeDestroyed();\n \n-    List<VolumeVO> listVolumesToBeDestroyed(Date date);\n+    List<VolumeVO> listNonRootVolumesToBeDestroyed(Date date);\n \n     ImageFormat getImageFormat(Long volumeId);\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/6a18cdd6ef969cca3a063356d4a9a68163b5ff6e/engine/schema/src/com/cloud/storage/dao/VolumeDao.java",
                "sha": "f2d5fc735207a0c267a05d3e5e2d147c6f06cc1f",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/6a18cdd6ef969cca3a063356d4a9a68163b5ff6e/engine/schema/src/com/cloud/storage/dao/VolumeDaoImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/storage/dao/VolumeDaoImpl.java?ref=6a18cdd6ef969cca3a063356d4a9a68163b5ff6e",
                "deletions": 1,
                "filename": "engine/schema/src/com/cloud/storage/dao/VolumeDaoImpl.java",
                "patch": "@@ -325,6 +325,7 @@ public VolumeDaoImpl() {\n         AllFieldsSearch.and(\"deviceId\", AllFieldsSearch.entity().getDeviceId(), Op.EQ);\n         AllFieldsSearch.and(\"poolId\", AllFieldsSearch.entity().getPoolId(), Op.EQ);\n         AllFieldsSearch.and(\"vType\", AllFieldsSearch.entity().getVolumeType(), Op.EQ);\n+        AllFieldsSearch.and(\"notVolumeType\", AllFieldsSearch.entity().getVolumeType(), Op.NEQ);\n         AllFieldsSearch.and(\"id\", AllFieldsSearch.entity().getId(), Op.EQ);\n         AllFieldsSearch.and(\"destroyed\", AllFieldsSearch.entity().getState(), Op.EQ);\n         AllFieldsSearch.and(\"notDestroyed\", AllFieldsSearch.entity().getState(), Op.NEQ);\n@@ -481,9 +482,10 @@ public SumCount() {\n     }\n \n     @Override\n-    public List<VolumeVO> listVolumesToBeDestroyed(Date date) {\n+    public List<VolumeVO> listNonRootVolumesToBeDestroyed(Date date) {\n         SearchCriteria<VolumeVO> sc = AllFieldsSearch.create();\n         sc.setParameters(\"state\", Volume.State.Destroy);\n+        sc.setParameters(\"notVolumeType\", Volume.Type.ROOT.toString());\n         sc.setParameters(\"updateTime\", date);\n \n         return listBy(sc);",
                "raw_url": "https://github.com/apache/cloudstack/raw/6a18cdd6ef969cca3a063356d4a9a68163b5ff6e/engine/schema/src/com/cloud/storage/dao/VolumeDaoImpl.java",
                "sha": "4f5b613ddd156049079df8f22fd1d62e6d5ce35d",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/6a18cdd6ef969cca3a063356d4a9a68163b5ff6e/engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeObject.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeObject.java?ref=6a18cdd6ef969cca3a063356d4a9a68163b5ff6e",
                "deletions": 3,
                "filename": "engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeObject.java",
                "patch": "@@ -174,11 +174,11 @@ public long getVolumeId() {\n     }\n \n     @Override\n-    public boolean  stateTransit(Volume.Event event) {\n+    public boolean stateTransit(Volume.Event event) {\n         boolean result = false;\n         try {\n             volumeVO = volumeDao.findById(volumeVO.getId());\n-            if(volumeVO != null) {\n+            if (volumeVO != null) {\n                 result = _volStateMachine.transitTo(volumeVO, event, null, volumeDao);\n                 volumeVO = volumeDao.findById(volumeVO.getId());\n             }\n@@ -332,8 +332,9 @@ public void processEvent(ObjectInDataStoreStateMachine.Event event) {\n             throw new CloudRuntimeException(\"Failed to update state:\" + e.toString());\n         } finally {\n             // in case of OperationFailed, expunge the entry\n+            // state transit call reloads the volume from DB and so check for null as well\n             if (event == ObjectInDataStoreStateMachine.Event.OperationFailed &&\n-                (volumeVO.getState() != Volume.State.Copying && volumeVO.getState() != Volume.State.Uploaded && volumeVO.getState() != Volume.State.UploadError)) {\n+                (volumeVO != null && volumeVO.getState() != Volume.State.Copying && volumeVO.getState() != Volume.State.Uploaded && volumeVO.getState() != Volume.State.UploadError)) {\n                 objectInStoreMgr.deleteIfNotReady(this);\n             }\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/6a18cdd6ef969cca3a063356d4a9a68163b5ff6e/engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeObject.java",
                "sha": "b7f459227aaa6843124912d204385957bbe77cff",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/6a18cdd6ef969cca3a063356d4a9a68163b5ff6e/engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java?ref=6a18cdd6ef969cca3a063356d4a9a68163b5ff6e",
                "deletions": 0,
                "filename": "engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java",
                "patch": "@@ -316,6 +316,11 @@ private boolean canVolumeBeRemoved(long volumeId) {\n         }\n \n         VolumeVO vol = volDao.findById(volume.getId());\n+        if (vol == null) {\n+            s_logger.debug(\"Volume \" + volume.getId() + \" is not found\");\n+            future.complete(result);\n+            return future;\n+        }\n \n         if (!volumeExistsOnPrimary(vol)) {\n             // not created on primary store",
                "raw_url": "https://github.com/apache/cloudstack/raw/6a18cdd6ef969cca3a063356d4a9a68163b5ff6e/engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java",
                "sha": "2e72286b2224c9fd7b471a6dc734813a43957a1b",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/6a18cdd6ef969cca3a063356d4a9a68163b5ff6e/server/src/com/cloud/storage/StorageManagerImpl.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/StorageManagerImpl.java?ref=6a18cdd6ef969cca3a063356d4a9a68163b5ff6e",
                "deletions": 3,
                "filename": "server/src/com/cloud/storage/StorageManagerImpl.java",
                "patch": "@@ -1080,8 +1080,8 @@ public void cleanupStorage(boolean recurring) {\n \n                     cleanupSecondaryStorage(recurring);\n \n-                    List<VolumeVO> vols = _volsDao.listVolumesToBeDestroyed(new Date(System.currentTimeMillis() - ((long) StorageCleanupDelay.value() << 10)));\n-\n+                    // ROOT volumes will be destroyed as part of VM cleanup\n+                    List<VolumeVO> vols = _volsDao.listNonRootVolumesToBeDestroyed(new Date(System.currentTimeMillis() - ((long) StorageCleanupDelay.value() << 10)));\n                     for (VolumeVO vol : vols) {\n                         try {\n                             // If this fails, just log a warning. It's ideal if we clean up the host-side clustered file\n@@ -1092,7 +1092,12 @@ public void cleanupStorage(boolean recurring) {\n                         }\n \n                         try {\n-                            volService.expungeVolumeAsync(volFactory.getVolume(vol.getId()));\n+                            VolumeInfo volumeInfo = volFactory.getVolume(vol.getId());\n+                            if (volumeInfo != null) {\n+                                volService.expungeVolumeAsync(volumeInfo);\n+                            } else {\n+                                s_logger.debug(\"Volume \" + vol.getUuid() + \" is already destroyed\");\n+                            }\n                         } catch (Exception e) {\n                             s_logger.warn(\"Unable to destroy volume \" + vol.getUuid(), e);\n                         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/6a18cdd6ef969cca3a063356d4a9a68163b5ff6e/server/src/com/cloud/storage/StorageManagerImpl.java",
                "sha": "5d1ee584ad4897f39be42e3fb7beec25a3aadf37",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #1825 from Accelerite/CLOUDSTACK-9660\n\nCLOUDSTACK-9660: NPE while destroying volumes during 1000 VMs deploy and destroy tests\n\nNPE is seen as VM destroy and storage cleanup threads try to remove the same root volume. Fix is to handle\nonly non-root volumes in storage cleanup thread, root volumes will be handled as part of VM destroy.\n\n* pr/1825:\n  CLOUDSTACK-9660: NPE while destroying volumes during 1000 VMs deploy and destroy tests NPE is seen as VM destroy and storage cleanup threads try to remove the same root volume. Fix is to handle only non-root volumes in storage cleanup thread, root volumes will be handled as part of VM destroy.\n\nSigned-off-by: Rajani Karuturi <rajani.karuturi@accelerite.com>",
        "parent": "https://github.com/apache/cloudstack/commit/017c42b6251ea095a7879fd2e8df1138f8b57380",
        "patched_files": [
            "VolumeObject.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VolumeObjectTest.java"
        ]
    },
    "cloudstack_6ba9754": {
        "bug_id": "cloudstack_6ba9754",
        "commit": "https://github.com/apache/cloudstack/commit/6ba9754201eeb96ec8f34c1b746c4dcf173a9b29",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cloudstack/blob/6ba9754201eeb96ec8f34c1b746c4dcf173a9b29/core/src/com/cloud/agent/api/storage/MigrateVolumeCommand.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/core/src/com/cloud/agent/api/storage/MigrateVolumeCommand.java?ref=6ba9754201eeb96ec8f34c1b746c4dcf173a9b29",
                "deletions": 0,
                "filename": "core/src/com/cloud/agent/api/storage/MigrateVolumeCommand.java",
                "patch": "@@ -25,13 +25,21 @@\n     long volumeId;\n     String volumePath;\n     StorageFilerTO pool;\n+    String attachedVmName;\n \n     public MigrateVolumeCommand(long volumeId, String volumePath, StoragePool pool) {\n         this.volumeId = volumeId;\n         this.volumePath = volumePath;\n         this.pool = new StorageFilerTO(pool);\n     }\n \n+    public MigrateVolumeCommand(long volumeId, String volumePath, StoragePool pool, String attachedVmName) {\n+        this.volumeId = volumeId;\n+        this.volumePath = volumePath;\n+        this.pool = new StorageFilerTO(pool);\n+        this.attachedVmName = attachedVmName;\n+    }\n+\n     @Override\n     public boolean executeInSequence() {\n         return true;\n@@ -48,4 +56,8 @@ public long getVolumeId() {\n     public StorageFilerTO getPool() {\n         return pool;\n     }\n+\n+    public String getAttachedVmName() {\n+        return attachedVmName;\n+    }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/6ba9754201eeb96ec8f34c1b746c4dcf173a9b29/core/src/com/cloud/agent/api/storage/MigrateVolumeCommand.java",
                "sha": "b73a48a1b37b3183c782b4a0d6a1089e7ce5b724",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/6ba9754201eeb96ec8f34c1b746c4dcf173a9b29/engine/storage/datamotion/src/org/apache/cloudstack/storage/motion/AncientDataMotionStrategy.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/storage/datamotion/src/org/apache/cloudstack/storage/motion/AncientDataMotionStrategy.java?ref=6ba9754201eeb96ec8f34c1b746c4dcf173a9b29",
                "deletions": 1,
                "filename": "engine/storage/datamotion/src/org/apache/cloudstack/storage/motion/AncientDataMotionStrategy.java",
                "patch": "@@ -361,7 +361,7 @@ protected Answer copyVolumeBetweenPools(DataObject srcData, DataObject destData)\n     protected Answer migrateVolumeToPool(DataObject srcData, DataObject destData) {\n         VolumeInfo volume = (VolumeInfo)srcData;\n         StoragePool destPool = (StoragePool)dataStoreMgr.getDataStore(destData.getDataStore().getId(), DataStoreRole.Primary);\n-        MigrateVolumeCommand command = new MigrateVolumeCommand(volume.getId(), volume.getPath(), destPool);\n+        MigrateVolumeCommand command = new MigrateVolumeCommand(volume.getId(), volume.getPath(), destPool, volume.getAttachedVmName());\n         EndPoint ep = selector.select(volume.getDataStore());\n         Answer answer = null;\n         if (ep == null) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/6ba9754201eeb96ec8f34c1b746c4dcf173a9b29/engine/storage/datamotion/src/org/apache/cloudstack/storage/motion/AncientDataMotionStrategy.java",
                "sha": "99f57142242ce2a23fd3200f06ef8ec7229f740f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/6ba9754201eeb96ec8f34c1b746c4dcf173a9b29/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java?ref=6ba9754201eeb96ec8f34c1b746c4dcf173a9b29",
                "deletions": 6,
                "filename": "plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "patch": "@@ -304,6 +304,7 @@\n import com.cloud.resource.ServerResource;\n import com.cloud.serializer.GsonHelper;\n import com.cloud.storage.Storage;\n+import com.cloud.storage.StoragePool;\n import com.cloud.storage.Storage.StoragePoolType;\n import com.cloud.storage.Volume;\n import com.cloud.storage.resource.StoragePoolResource;\n@@ -339,9 +340,6 @@\n \n     protected final int _shutdownWaitMs = 300000;  // wait up to 5 minutes for shutdown\n \n-    @Inject\n-    protected VolumeOrchestrationService volMgr;\n-\n     // out an operation\n     protected final int _retry = 24;\n     protected final int _sleep = 10000;\n@@ -4360,7 +4358,7 @@ private Answer execute(MigrateVolumeCommand cmd) {\n             s_logger.info(\"Executing resource MigrateVolumeCommand: \" + _gson.toJson(cmd));\n         }\n \n-        final String vmName = volMgr.getVmNameFromVolumeId(cmd.getVolumeId());\n+        final String vmName = cmd.getAttachedVmName();\n \n         VirtualMachineMO vmMo = null;\n         VmwareHypervisorHost srcHyperHost = null;\n@@ -4372,13 +4370,11 @@ private Answer execute(MigrateVolumeCommand cmd) {\n         VirtualMachineRelocateSpecDiskLocator diskLocator = null;\n \n         String srcDiskName = \"\";\n-        String srcDsName = \"\";\n         String tgtDsName = \"\";\n \n         try {\n             srcHyperHost = getHyperHost(getServiceContext());\n             morDc = srcHyperHost.getHyperHostDatacenter();\n-            srcDsName = volMgr.getStoragePoolOfVolume(cmd.getVolumeId());\n             tgtDsName = poolTo.getUuid().replace(\"-\", \"\");\n \n             // find VM in this datacenter not just in this cluster.",
                "raw_url": "https://github.com/apache/cloudstack/raw/6ba9754201eeb96ec8f34c1b746c4dcf173a9b29/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "sha": "6582f46f85c2b134f01f28b08790db977b777fe6",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-5447 [Automation] Volume migration failing with NullPointerException in vmware and KVM.\n\nInstead of injecting object of VolumeOrchestrationService into VmwareResource, we now populate the command object (MigrateVolumeCommand here) with required information. Thus we dont need volume orchestration service to query that information from resource.\nSigned-off-by: Sateesh Chodapuneedi <sateesh@apache.org>",
        "parent": "https://github.com/apache/cloudstack/commit/6c9b517929b0be7a44eae830b9b7b6823850c638",
        "patched_files": [
            "VmwareResource.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VmwareResourceTest.java"
        ]
    },
    "cloudstack_6f98fcd": {
        "bug_id": "cloudstack_6f98fcd",
        "commit": "https://github.com/apache/cloudstack/commit/6f98fcd3a5b1b498a9c1f53e85522282b1cc2b28",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/6f98fcd3a5b1b498a9c1f53e85522282b1cc2b28/server/src/com/cloud/template/TemplateManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/template/TemplateManagerImpl.java?ref=6f98fcd3a5b1b498a9c1f53e85522282b1cc2b28",
                "deletions": 1,
                "filename": "server/src/com/cloud/template/TemplateManagerImpl.java",
                "patch": "@@ -1740,7 +1740,7 @@ public VMTemplateVO createPrivateTemplateRecord(CreateTemplateCmd cmd, Account t\n \n             if (sourceTemplateId != null) {\n                 VMTemplateVO sourceTemplate = _tmpltDao.findById(sourceTemplateId);\n-                if(sourceTemplate != null){\n+                if (sourceTemplate != null && sourceTemplate.getDetails() != null) {\n                     details.putAll(sourceTemplate.getDetails());\n                 }\n             }",
                "raw_url": "https://github.com/apache/cloudstack/raw/6f98fcd3a5b1b498a9c1f53e85522282b1cc2b28/server/src/com/cloud/template/TemplateManagerImpl.java",
                "sha": "7130042bc5c8153324989d7a956fb46ce8a3bfe0",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-9688: Fix failing smoke tests\n\nFixes failing smoke tests due to enviroment issues or corner cases:\n- Fixes NPE in Template Manager\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/5e19e64f2f24d90d8f15d30b82d2a066061425a7",
        "patched_files": [
            "TemplateManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "TemplateManagerImplTest.java"
        ]
    },
    "cloudstack_737edd9": {
        "bug_id": "cloudstack_737edd9",
        "commit": "https://github.com/apache/cloudstack/commit/737edd90dc253789e442634b389ca5db835ee6e0",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/737edd90dc253789e442634b389ca5db835ee6e0/api/src/org/apache/cloudstack/api/command/admin/network/UpdatePhysicalNetworkCmd.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/command/admin/network/UpdatePhysicalNetworkCmd.java?ref=737edd90dc253789e442634b389ca5db835ee6e0",
                "deletions": 3,
                "filename": "api/src/org/apache/cloudstack/api/command/admin/network/UpdatePhysicalNetworkCmd.java",
                "patch": "@@ -97,9 +97,11 @@ public long getEntityOwnerId() {\n     @Override\n     public void execute() {\n         PhysicalNetwork result = _networkService.updatePhysicalNetwork(getId(), getNetworkSpeed(), getTags(), getVlan(), getState());\n-        PhysicalNetworkResponse response = _responseGenerator.createPhysicalNetworkResponse(result);\n-        response.setResponseName(getCommandName());\n-        this.setResponseObject(response);\n+        if (result != null) {\n+            PhysicalNetworkResponse response = _responseGenerator.createPhysicalNetworkResponse(result);\n+            response.setResponseName(getCommandName());\n+            this.setResponseObject(response);\n+        }\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/cloudstack/raw/737edd90dc253789e442634b389ca5db835ee6e0/api/src/org/apache/cloudstack/api/command/admin/network/UpdatePhysicalNetworkCmd.java",
                "sha": "ed3fa97ce7a965be55b928498467c848f9ef67ea",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/737edd90dc253789e442634b389ca5db835ee6e0/api/src/org/apache/cloudstack/api/command/user/firewall/DeleteFirewallRuleCmd.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/command/user/firewall/DeleteFirewallRuleCmd.java?ref=737edd90dc253789e442634b389ca5db835ee6e0",
                "deletions": 1,
                "filename": "api/src/org/apache/cloudstack/api/command/user/firewall/DeleteFirewallRuleCmd.java",
                "patch": "@@ -113,7 +113,10 @@ public String getSyncObjType() {\n \n     @Override\n     public Long getSyncObjId() {\n-        return _firewallService.getFirewallRule(id).getNetworkId();\n+        FirewallRule fwlrule = _firewallService.getFirewallRule(id);\n+        if (fwlrule != null)\n+            return fwlrule.getNetworkId();\n+        return null;\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/cloudstack/raw/737edd90dc253789e442634b389ca5db835ee6e0/api/src/org/apache/cloudstack/api/command/user/firewall/DeleteFirewallRuleCmd.java",
                "sha": "0f1001246109e2f330db7339e0b1c6bf3833b2d1",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/737edd90dc253789e442634b389ca5db835ee6e0/api/src/org/apache/cloudstack/api/command/user/vpn/UpdateVpnGatewayCmd.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/command/user/vpn/UpdateVpnGatewayCmd.java?ref=737edd90dc253789e442634b389ca5db835ee6e0",
                "deletions": 2,
                "filename": "api/src/org/apache/cloudstack/api/command/user/vpn/UpdateVpnGatewayCmd.java",
                "patch": "@@ -85,8 +85,10 @@ public String getEventType() {\n     @Override\n     public void execute() {\n         Site2SiteVpnGateway result = _s2sVpnService.updateVpnGateway(id, this.getCustomId(), getDisplay());\n-        Site2SiteVpnGatewayResponse response = _responseGenerator.createSite2SiteVpnGatewayResponse(result);\n-        response.setResponseName(getCommandName());\n+        if (result != null) {\n+            Site2SiteVpnGatewayResponse response = _responseGenerator.createSite2SiteVpnGatewayResponse(result);\n+            response.setResponseName(getCommandName());\n+        }\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/cloudstack/raw/737edd90dc253789e442634b389ca5db835ee6e0/api/src/org/apache/cloudstack/api/command/user/vpn/UpdateVpnGatewayCmd.java",
                "sha": "bbe820a83c44a688dd782f249b6ebcd78715731d",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/cloudstack/blob/737edd90dc253789e442634b389ca5db835ee6e0/engine/orchestration/src/com/cloud/agent/manager/ClusteredAgentManagerImpl.java",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/agent/manager/ClusteredAgentManagerImpl.java?ref=737edd90dc253789e442634b389ca5db835ee6e0",
                "deletions": 21,
                "filename": "engine/orchestration/src/com/cloud/agent/manager/ClusteredAgentManagerImpl.java",
                "patch": "@@ -195,35 +195,36 @@ private void scanDirectAgentToLoad() {\n         long cutSeconds = (System.currentTimeMillis() >> 10) - getTimeout();\n         List<HostVO> hosts = _hostDao.findAndUpdateDirectAgentToLoad(cutSeconds, LoadSize.value().longValue(), _nodeId);\n         List<HostVO> appliances = _hostDao.findAndUpdateApplianceToLoad(cutSeconds, _nodeId);\n-        hosts.addAll(appliances);\n \n-        if (hosts != null && hosts.size() > 0) {\n-            s_logger.debug(\"Found \" + hosts.size() + \" unmanaged direct hosts, processing connect for them...\");\n-            for (HostVO host : hosts) {\n-                try {\n-                    AgentAttache agentattache = findAttache(host.getId());\n-                    if (agentattache != null) {\n-                        // already loaded, skip\n-                        if (agentattache.forForward()) {\n-                            if (s_logger.isInfoEnabled()) {\n-                                s_logger.info(host + \" is detected down, but we have a forward attache running, disconnect this one before launching the host\");\n+       if (hosts != null) {\n+            hosts.addAll(appliances);\n+            if (hosts.size() > 0) {\n+                s_logger.debug(\"Found \" + hosts.size() + \" unmanaged direct hosts, processing connect for them...\");\n+                for (HostVO host : hosts) {\n+                    try {\n+                        AgentAttache agentattache = findAttache(host.getId());\n+                        if (agentattache != null) {\n+                            // already loaded, skip\n+                            if (agentattache.forForward()) {\n+                                if (s_logger.isInfoEnabled()) {\n+                                    s_logger.info(host + \" is detected down, but we have a forward attache running, disconnect this one before launching the host\");\n+                                }\n+                                removeAgent(agentattache, Status.Disconnected);\n+                            } else {\n+                                continue;\n                             }\n-                            removeAgent(agentattache, Status.Disconnected);\n-                        } else {\n-                            continue;\n                         }\n-                    }\n \n-                    if (s_logger.isDebugEnabled()) {\n-                        s_logger.debug(\"Loading directly connected host \" + host.getId() + \"(\" + host.getName() + \")\");\n+                        if (s_logger.isDebugEnabled()) {\n+                            s_logger.debug(\"Loading directly connected host \" + host.getId() + \"(\" + host.getName() + \")\");\n+                        }\n+                        loadDirectlyConnectedHost(host, false);\n+                    } catch (Throwable e) {\n+                        s_logger.warn(\" can not load directly connected host \" + host.getId() + \"(\" + host.getName() + \") due to \", e);\n                     }\n-                    loadDirectlyConnectedHost(host, false);\n-                } catch (Throwable e) {\n-                    s_logger.warn(\" can not load directly connected host \" + host.getId() + \"(\" + host.getName() + \") due to \", e);\n                 }\n             }\n         }\n-\n         if (s_logger.isTraceEnabled()) {\n             s_logger.trace(\"End scanning directly connected hosts\");\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/737edd90dc253789e442634b389ca5db835ee6e0/engine/orchestration/src/com/cloud/agent/manager/ClusteredAgentManagerImpl.java",
                "sha": "600dca262fbef86cc2c7137c30b02fd8674ed8fc",
                "status": "modified"
            },
            {
                "additions": 56,
                "blob_url": "https://github.com/apache/cloudstack/blob/737edd90dc253789e442634b389ca5db835ee6e0/framework/db/src/com/cloud/utils/db/GenericDaoBase.java",
                "changes": 122,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/db/src/com/cloud/utils/db/GenericDaoBase.java?ref=737edd90dc253789e442634b389ca5db835ee6e0",
                "deletions": 66,
                "filename": "framework/db/src/com/cloud/utils/db/GenericDaoBase.java",
                "patch": "@@ -1641,81 +1641,71 @@ protected void toEntityBean(final ResultSet result, final T entity) throws SQLEx\n     @SuppressWarnings(\"unchecked\")\n     protected void loadCollection(T entity, Attribute attr) {\n         EcInfo ec = (EcInfo)attr.attache;\n-\n         TransactionLegacy txn = TransactionLegacy.currentTxn();\n-        ResultSet rs = null;\n-        PreparedStatement pstmt = null;\n-        try {\n-            pstmt = txn.prepareStatement(ec.selectSql);\n+        try(PreparedStatement pstmt = txn.prepareStatement(ec.selectSql);)\n+        {\n             pstmt.setObject(1, _idField.get(entity));\n-            rs = pstmt.executeQuery();\n-            ArrayList lst = new ArrayList();\n-            if (ec.targetClass == Integer.class) {\n-                while (rs.next()) {\n-                    lst.add(rs.getInt(1));\n-                }\n-            } else if (ec.targetClass == Long.class) {\n-                while (rs.next()) {\n-                    lst.add(rs.getLong(1));\n-                }\n-            } else if (ec.targetClass == String.class) {\n-                while (rs.next()) {\n-                    lst.add(rs.getString(1));\n-                }\n-            } else if (ec.targetClass == Short.class) {\n-                while (rs.next()) {\n-                    lst.add(rs.getShort(1));\n-                }\n-            } else if (ec.targetClass == Date.class) {\n-                while (rs.next()) {\n-                    lst.add(DateUtil.parseDateString(s_gmtTimeZone, rs.getString(1)));\n+            try(ResultSet rs = pstmt.executeQuery();)\n+            {\n+                ArrayList lst = new ArrayList();\n+                if (ec.targetClass == Integer.class) {\n+                    while (rs.next()) {\n+                        lst.add(rs.getInt(1));\n+                    }\n+                } else if (ec.targetClass == Long.class) {\n+                    while (rs.next()) {\n+                        lst.add(rs.getLong(1));\n+                    }\n+                } else if (ec.targetClass == String.class) {\n+                    while (rs.next()) {\n+                        lst.add(rs.getString(1));\n+                    }\n+                } else if (ec.targetClass == Short.class) {\n+                    while (rs.next()) {\n+                        lst.add(rs.getShort(1));\n+                    }\n+                } else if (ec.targetClass == Date.class) {\n+                    while (rs.next()) {\n+                        lst.add(DateUtil.parseDateString(s_gmtTimeZone, rs.getString(1)));\n+                    }\n+                } else if (ec.targetClass == Boolean.class) {\n+                    while (rs.next()) {\n+                        lst.add(rs.getBoolean(1));\n+                    }\n+                } else {\n+                    assert (false) : \"You'll need to add more classeses\";\n                 }\n-            } else if (ec.targetClass == Boolean.class) {\n-                while (rs.next()) {\n-                    lst.add(rs.getBoolean(1));\n+                if (ec.rawClass == null) {\n+                    Object[] array = (Object[]) Array.newInstance(ec.targetClass);\n+                    lst.toArray(array);\n+                    try {\n+                        attr.field.set(entity, array);\n+                    } catch (IllegalArgumentException e) {\n+                        throw new CloudRuntimeException(\"Come on we screen for this stuff, don't we?\", e);\n+                    } catch (IllegalAccessException e) {\n+                        throw new CloudRuntimeException(\"Come on we screen for this stuff, don't we?\", e);\n+                    }\n+                } else {\n+                    try {\n+                        Collection coll = (Collection) ec.rawClass.newInstance();\n+                        coll.addAll(lst);\n+                        attr.field.set(entity, coll);\n+                    } catch (IllegalAccessException e) {\n+                        throw new CloudRuntimeException(\"Come on we screen for this stuff, don't we?\", e);\n+                    } catch (InstantiationException e) {\n+                        throw new CloudRuntimeException(\"Never should happen\", e);\n+                    }\n                 }\n-            } else {\n-                assert (false) : \"You'll need to add more classeses\";\n             }\n-\n-            if (ec.rawClass == null) {\n-                Object[] array = (Object[])Array.newInstance(ec.targetClass);\n-                lst.toArray(array);\n-                try {\n-                    attr.field.set(entity, array);\n-                } catch (IllegalArgumentException e) {\n-                    throw new CloudRuntimeException(\"Come on we screen for this stuff, don't we?\", e);\n-                } catch (IllegalAccessException e) {\n-                    throw new CloudRuntimeException(\"Come on we screen for this stuff, don't we?\", e);\n-                }\n-            } else {\n-                try {\n-                    Collection coll = (Collection)ec.rawClass.newInstance();\n-                    coll.addAll(lst);\n-                    attr.field.set(entity, coll);\n-                } catch (IllegalAccessException e) {\n-                    throw new CloudRuntimeException(\"Come on we screen for this stuff, don't we?\", e);\n-                } catch (InstantiationException e) {\n-                    throw new CloudRuntimeException(\"Never should happen\", e);\n-                }\n+            catch (SQLException e) {\n+                throw new CloudRuntimeException(\"loadCollection: Exception : \" +e.getMessage(), e);\n             }\n         } catch (SQLException e) {\n-            throw new CloudRuntimeException(\"Error executing \" + pstmt, e);\n+            throw new CloudRuntimeException(\"loadCollection: Exception : \" +e.getMessage(), e);\n         } catch (IllegalArgumentException e) {\n-            throw new CloudRuntimeException(\"Error executing \" + pstmt, e);\n+            throw new CloudRuntimeException(\"loadCollection: Exception : \" +e.getMessage(), e);\n         } catch (IllegalAccessException e) {\n-            throw new CloudRuntimeException(\"Error executing \" + pstmt, e);\n-        } finally {\n-            try {\n-                if (rs != null) {\n-                    rs.close();\n-                }\n-                if (pstmt != null) {\n-                    pstmt.close();\n-                }\n-            } catch (SQLException e) {\n-                s_logger.error(\"Why are we getting an exception at close? \", e);\n-            }\n+            throw new CloudRuntimeException(\"loadCollection: Exception : \" +e.getMessage(), e);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/737edd90dc253789e442634b389ca5db835ee6e0/framework/db/src/com/cloud/utils/db/GenericDaoBase.java",
                "sha": "e75646a79fab4febe15bf62d47ef8db0679e3a49",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/cloudstack/blob/737edd90dc253789e442634b389ca5db835ee6e0/plugins/api/discovery/test/org/apache/cloudstack/discovery/ApiDiscoveryTest.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/api/discovery/test/org/apache/cloudstack/discovery/ApiDiscoveryTest.java?ref=737edd90dc253789e442634b389ca5db835ee6e0",
                "deletions": 10,
                "filename": "plugins/api/discovery/test/org/apache/cloudstack/discovery/ApiDiscoveryTest.java",
                "patch": "@@ -82,21 +82,25 @@ public static void setUp() throws ConfigurationException {\n     @Test\n     public void verifyListSingleApi() throws Exception {\n         ListResponse<ApiDiscoveryResponse> responses = (ListResponse<ApiDiscoveryResponse>)s_discoveryService.listApis(testUser, testApiName);\n-        ApiDiscoveryResponse response = responses.getResponses().get(0);\n-        assertTrue(\"No. of response items should be one\", responses.getCount() == 1);\n-        assertEquals(\"Error in api name\", testApiName, response.getName());\n-        assertEquals(\"Error in api description\", testApiDescription, response.getDescription());\n-        assertEquals(\"Error in api since\", testApiSince, response.getSince());\n-        assertEquals(\"Error in api isAsync\", testApiAsync, response.getAsync());\n+        if (responses != null) {\n+            ApiDiscoveryResponse response = responses.getResponses().get(0);\n+            assertTrue(\"No. of response items should be one\", responses.getCount() == 1);\n+            assertEquals(\"Error in api name\", testApiName, response.getName());\n+            assertEquals(\"Error in api description\", testApiDescription, response.getDescription());\n+            assertEquals(\"Error in api since\", testApiSince, response.getSince());\n+            assertEquals(\"Error in api isAsync\", testApiAsync, response.getAsync());\n+        }\n     }\n \n     @Test\n     public void verifyListApis() throws Exception {\n         ListResponse<ApiDiscoveryResponse> responses = (ListResponse<ApiDiscoveryResponse>)s_discoveryService.listApis(testUser, null);\n-        assertTrue(\"No. of response items > 1\", responses.getCount() == 1);\n-        for (ApiDiscoveryResponse response : responses.getResponses()) {\n-            assertFalse(\"API name is empty\", response.getName().isEmpty());\n-            assertFalse(\"API description is empty\", response.getDescription().isEmpty());\n+        if (responses != null) {\n+            assertTrue(\"No. of response items > 1\", responses.getCount().intValue() == 1);\n+            for (ApiDiscoveryResponse response : responses.getResponses()) {\n+                assertFalse(\"API name is empty\", response.getName().isEmpty());\n+                assertFalse(\"API description is empty\", response.getDescription().isEmpty());\n+            }\n         }\n     }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/737edd90dc253789e442634b389ca5db835ee6e0/plugins/api/discovery/test/org/apache/cloudstack/discovery/ApiDiscoveryTest.java",
                "sha": "49bf5a55dc57bc5057f9b6089ba1a017853f69f1",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/737edd90dc253789e442634b389ca5db835ee6e0/plugins/network-elements/nuage-vsp/src/com/cloud/network/element/NuageVspElement.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/network/element/NuageVspElement.java?ref=737edd90dc253789e442634b389ca5db835ee6e0",
                "deletions": 2,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/network/element/NuageVspElement.java",
                "patch": "@@ -405,13 +405,15 @@ public boolean applyFWRules(Network network, List<? extends FirewallRule> rules)\n \n     @Override\n     public boolean applyNetworkACLs(Network network, List<? extends NetworkACLItem> rules) throws ResourceUnavailableException {\n-        s_logger.debug(\"Handling applyNetworkACLs for network \" + network.getName() + \" with \" + rules.size() + \" Network ACLs\");\n         if (rules == null || rules.isEmpty()) {\n             s_logger.debug(\"No rules to apply. So, delete all the existing ACL in VSP from Subnet with uuid \" + network.getUuid());\n         } else {\n             s_logger.debug(\"New rules has to applied. So, delete all the existing ACL in VSP from Subnet with uuid \" + network.getUuid());\n         }\n-        applyACLRules(network, rules, true);\n+        if (rules != null) {\n+            s_logger.debug(\"Handling applyNetworkACLs for network \" + network.getName() + \" with \" + rules.size() + \" Network ACLs\");\n+            applyACLRules(network, rules, true);\n+        }\n         return true;\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/737edd90dc253789e442634b389ca5db835ee6e0/plugins/network-elements/nuage-vsp/src/com/cloud/network/element/NuageVspElement.java",
                "sha": "e777268e4245c196071d7675a1d7ab97ecdf0b4e",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cloudstack/blob/737edd90dc253789e442634b389ca5db835ee6e0/utils/src/com/cloud/utils/script/Script.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/com/cloud/utils/script/Script.java?ref=737edd90dc253789e442634b389ca5db835ee6e0",
                "deletions": 12,
                "filename": "utils/src/com/cloud/utils/script/Script.java",
                "patch": "@@ -313,19 +313,19 @@ public Task(OutputInterpreter interpreter, BufferedReader reader) {\n \n         @Override\n         public void run() {\n-            done = false;\n-            try {\n-                result = interpreter.interpret(reader);\n-            } catch (IOException ex) {\n-                result = stackTraceAsString(ex);\n-            } catch (Exception ex) {\n-                result = stackTraceAsString(ex);\n-            } finally {\n-                synchronized (this) {\n-                    done = true;\n-                    notifyAll();\n+            synchronized(this) {\n+                done = false;\n+                try {\n+                    result = interpreter.interpret(reader);\n+                } catch (IOException ex) {\n+                    result = stackTraceAsString(ex);\n+                } catch (Exception ex) {\n+                    result = stackTraceAsString(ex);\n+                } finally {\n+                        done = true;\n+                        notifyAll();\n+                        IOUtils.closeQuietly(reader);\n                 }\n-                IOUtils.closeQuietly(reader);\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/737edd90dc253789e442634b389ca5db835ee6e0/utils/src/com/cloud/utils/script/Script.java",
                "sha": "49734ae808a7510984db37b644c7b1b40aec34ec",
                "status": "modified"
            }
        ],
        "message": "Fixed few coverity patches\n\nNPE in delete firewall rules observed, cherry-picking fix from master.\n\n(cherry picked from commit 31a42d2b7a5a9d3dbf10dc680d7e8877ed4e40c6)\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/1bab1d0855f8813a54028aa58715db75d9c06ca0",
        "patched_files": [
            "Script.java",
            "ClusteredAgentManagerImpl.java",
            "NuageVspElement.java",
            "UpdateVpnGatewayCmd.java",
            "DeleteFirewallRuleCmd.java",
            "UpdatePhysicalNetworkCmd.java",
            "GenericDaoBase.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "GenericDaoBaseTest.java",
            "ScriptTest.java",
            "NuageVspElementTest.java",
            "ApiDiscoveryTest.java"
        ]
    },
    "cloudstack_73c7ad9": {
        "bug_id": "cloudstack_73c7ad9",
        "commit": "https://github.com/apache/cloudstack/commit/73c7ad9a4a409cba7f897c848145cbc7f6f96ae4",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/73c7ad9a4a409cba7f897c848145cbc7f6f96ae4/plugins/network-elements/elastic-loadbalancer/src/com/cloud/network/lb/LoadBalanceRuleHandler.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/elastic-loadbalancer/src/com/cloud/network/lb/LoadBalanceRuleHandler.java?ref=73c7ad9a4a409cba7f897c848145cbc7f6f96ae4",
                "deletions": 1,
                "filename": "plugins/network-elements/elastic-loadbalancer/src/com/cloud/network/lb/LoadBalanceRuleHandler.java",
                "patch": "@@ -79,6 +79,7 @@\n import com.cloud.storage.dao.VMTemplateDao;\n import com.cloud.user.Account;\n import com.cloud.user.AccountService;\n+import com.cloud.user.UserVO;\n import com.cloud.user.dao.AccountDao;\n import com.cloud.user.dao.UserDao;\n import com.cloud.utils.db.DB;\n@@ -279,7 +280,10 @@ private DomainRouterVO deployELBVm(Network guestNetwork, final DeployDestination\n \n                 long userId = CallContext.current().getCallingUserId();\n                 if (CallContext.current().getCallingAccount().getId() != owner.getId()) {\n-                    userId =  _userDao.listByAccount(owner.getAccountId()).get(0).getId();\n+                    List<UserVO> userVOs = _userDao.listByAccount(owner.getAccountId());\n+                    if (!userVOs.isEmpty()) {\n+                        userId =  userVOs.get(0).getId();\n+                    }\n                 }\n \n                 ServiceOfferingVO elasticLbVmOffering = _serviceOfferingDao.findDefaultSystemOffering(ServiceOffering.elbVmDefaultOffUniqueName, ConfigurationManagerImpl.SystemVMUseLocalStorage.valueIn(dest.getDataCenter().getId()));",
                "raw_url": "https://github.com/apache/cloudstack/raw/73c7ad9a4a409cba7f897c848145cbc7f6f96ae4/plugins/network-elements/elastic-loadbalancer/src/com/cloud/network/lb/LoadBalanceRuleHandler.java",
                "sha": "f5046b6a7b4fa9e5f0d4ccc05b155a8ddac1f59a",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/73c7ad9a4a409cba7f897c848145cbc7f6f96ae4/plugins/network-elements/internal-loadbalancer/src/org/apache/cloudstack/network/lb/InternalLoadBalancerVMManagerImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/internal-loadbalancer/src/org/apache/cloudstack/network/lb/InternalLoadBalancerVMManagerImpl.java?ref=73c7ad9a4a409cba7f897c848145cbc7f6f96ae4",
                "deletions": 1,
                "filename": "plugins/network-elements/internal-loadbalancer/src/org/apache/cloudstack/network/lb/InternalLoadBalancerVMManagerImpl.java",
                "patch": "@@ -97,6 +97,7 @@\n import com.cloud.user.Account;\n import com.cloud.user.AccountManager;\n import com.cloud.user.User;\n+import com.cloud.user.UserVO;\n import com.cloud.user.dao.UserDao;\n import com.cloud.utils.Pair;\n import com.cloud.utils.component.ManagerBase;\n@@ -772,7 +773,10 @@ protected DomainRouterVO deployInternalLbVm(final Account owner, final DeployDes\n \n                 long userId = CallContext.current().getCallingUserId();\n                 if (CallContext.current().getCallingAccount().getId() != owner.getId()) {\n-                    userId =  _userDao.listByAccount(owner.getAccountId()).get(0).getId();\n+                    List<UserVO> userVOs = _userDao.listByAccount(owner.getAccountId());\n+                    if (!userVOs.isEmpty()) {\n+                        userId =  userVOs.get(0).getId();\n+                    }\n                 }\n \n                 internalLbVm =",
                "raw_url": "https://github.com/apache/cloudstack/raw/73c7ad9a4a409cba7f897c848145cbc7f6f96ae4/plugins/network-elements/internal-loadbalancer/src/org/apache/cloudstack/network/lb/InternalLoadBalancerVMManagerImpl.java",
                "sha": "bb153ff2ed918b7b28f44176fa19ec265473e1c4",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/73c7ad9a4a409cba7f897c848145cbc7f6f96ae4/plugins/network-elements/juniper-contrail/src/org/apache/cloudstack/network/contrail/management/ServiceManagerImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/juniper-contrail/src/org/apache/cloudstack/network/contrail/management/ServiceManagerImpl.java?ref=73c7ad9a4a409cba7f897c848145cbc7f6f96ae4",
                "deletions": 1,
                "filename": "plugins/network-elements/juniper-contrail/src/org/apache/cloudstack/network/contrail/management/ServiceManagerImpl.java",
                "patch": "@@ -53,6 +53,7 @@\n import com.cloud.template.VirtualMachineTemplate;\n import com.cloud.user.Account;\n import com.cloud.user.AccountService;\n+import com.cloud.user.UserVO;\n import com.cloud.user.dao.UserDao;\n import com.cloud.utils.exception.CloudRuntimeException;\n import com.cloud.vm.NicProfile;\n@@ -112,7 +113,10 @@ private ServiceVirtualMachine createServiceVM(DataCenter zone, Account owner, Vi\n \n         long userId = CallContext.current().getCallingUserId();\n         if (CallContext.current().getCallingAccount().getId() != owner.getId()) {\n-            userId =  _userDao.listByAccount(owner.getAccountId()).get(0).getId();\n+            List<UserVO> userVOs = _userDao.listByAccount(owner.getAccountId());\n+            if (!userVOs.isEmpty()) {\n+                userId =  userVOs.get(0).getId();\n+            }\n         }\n \n         ServiceVirtualMachine svm =",
                "raw_url": "https://github.com/apache/cloudstack/raw/73c7ad9a4a409cba7f897c848145cbc7f6f96ae4/plugins/network-elements/juniper-contrail/src/org/apache/cloudstack/network/contrail/management/ServiceManagerImpl.java",
                "sha": "9ab10b77b7f516808d3d7da3b20ce42d4a40f59e",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/73c7ad9a4a409cba7f897c848145cbc7f6f96ae4/server/src/com/cloud/network/router/NetworkHelperImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/NetworkHelperImpl.java?ref=73c7ad9a4a409cba7f897c848145cbc7f6f96ae4",
                "deletions": 1,
                "filename": "server/src/com/cloud/network/router/NetworkHelperImpl.java",
                "patch": "@@ -84,6 +84,7 @@\n import com.cloud.user.Account;\n import com.cloud.user.AccountManager;\n import com.cloud.user.User;\n+import com.cloud.user.UserVO;\n import com.cloud.user.dao.UserDao;\n import com.cloud.utils.exception.CloudRuntimeException;\n import com.cloud.utils.net.NetUtils;\n@@ -486,7 +487,10 @@ public DomainRouterVO deployRouter(final RouterDeploymentDefinition routerDeploy\n \n                 long userId = CallContext.current().getCallingUserId();\n                 if (CallContext.current().getCallingAccount().getId() != owner.getId()) {\n-                    userId =  _userDao.listByAccount(owner.getAccountId()).get(0).getId();\n+                    List<UserVO> userVOs = _userDao.listByAccount(owner.getAccountId());\n+                    if (!userVOs.isEmpty()) {\n+                        userId =  userVOs.get(0).getId();\n+                    }\n                 }\n \n                 router = new DomainRouterVO(id, routerOffering.getId(), routerDeploymentDefinition.getVirtualProvider().getId(), VirtualMachineName.getRouterName(id,",
                "raw_url": "https://github.com/apache/cloudstack/raw/73c7ad9a4a409cba7f897c848145cbc7f6f96ae4/server/src/com/cloud/network/router/NetworkHelperImpl.java",
                "sha": "302a9f10d3bfb261d07bce07570526c122de3d8f",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/73c7ad9a4a409cba7f897c848145cbc7f6f96ae4/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/UserVmManagerImpl.java?ref=73c7ad9a4a409cba7f897c848145cbc7f6f96ae4",
                "deletions": 1,
                "filename": "server/src/com/cloud/vm/UserVmManagerImpl.java",
                "patch": "@@ -3220,7 +3220,10 @@ protected UserVm createVirtualMachine(DataCenter zone, ServiceOffering serviceOf\n \n         long userId = CallContext.current().getCallingUserId();\n         if (CallContext.current().getCallingAccount().getId() != owner.getId()) {\n-            userId =  _userDao.listByAccount(owner.getAccountId()).get(0).getId();\n+            List<UserVO> userVOs = _userDao.listByAccount(owner.getAccountId());\n+            if (!userVOs.isEmpty()) {\n+                userId =  userVOs.get(0).getId();\n+            }\n         }\n \n         UserVmVO vm = commitUserVm(zone, template, hostName, displayName, owner, diskOfferingId, diskSize, userData, caller, isDisplayVm, keyboard, accountId, userId, offering,",
                "raw_url": "https://github.com/apache/cloudstack/raw/73c7ad9a4a409cba7f897c848145cbc7f6f96ae4/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "sha": "1e5167e270502b5a8aa1cbf8d5b85f9e2aba4fc4",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #878 from borisroman/CLOUDSTACK-8890\n\n[4.6][BLOCKER]CLOUDSTACK-8890: Added isEmpty() check to prevent nullPointerException.Check if the list is empty before trying to get the first entry. If the list is empty, in example when dealing with projects, it will user the caller user id.\n\nTests to verify working order:\n1. Deploy ACS\n2. Create project\n3. Create resource in project -> Should succeed!\n\n* pr/878:\n  Added isEmpty() check to prevent nullPointerException.\n\nSigned-off-by: Wido den Hollander <wido@widodh.nl>",
        "parent": "https://github.com/apache/cloudstack/commit/a0f8f56a5dd3a323a72eb2a145d64cb1b5abea49",
        "patched_files": [
            "NetworkHelperImpl.java",
            "LoadBalanceRuleHandler.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "NetworkHelperImplTest.java",
            "LoadBalanceRuleHandlerTest.java"
        ]
    },
    "cloudstack_7795cfd": {
        "bug_id": "cloudstack_7795cfd",
        "commit": "https://github.com/apache/cloudstack/commit/7795cfd75986874f9a947260379a761b0f3bde82",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/7795cfd75986874f9a947260379a761b0f3bde82/utils/src/com/cloud/utils/db/Transaction.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/com/cloud/utils/db/Transaction.java?ref=7795cfd75986874f9a947260379a761b0f3bde82",
                "deletions": 4,
                "filename": "utils/src/com/cloud/utils/db/Transaction.java",
                "patch": "@@ -1006,10 +1006,7 @@ public String toString() {\n \n     public static void initDataSource(String propsFileName) {\n         try {\n-            File dbPropsFile = new File(propsFileName);\n-            if (!dbPropsFile.exists()) {\n-                dbPropsFile = PropertiesUtil.findConfigFile(propsFileName);\n-            }\n+            File dbPropsFile = PropertiesUtil.findConfigFile(propsFileName);\n             final Properties dbProps;\n             if (EncryptionSecretKeyChecker.useEncryption()) {\n                 StandardPBEStringEncryptor encryptor = EncryptionSecretKeyChecker.getEncryptor();\n@@ -1022,6 +1019,9 @@ public static void initDataSource(String propsFileName) {\n             } catch (IOException e) {\n                 s_logger.fatal(\"Unable to load db properties file, pl. check the classpath and file path configuration\", e);\n                 return;\n+            } catch (NullPointerException e) {\n+                s_logger.fatal(\"Unable to load and read db properties file \" + propsFileName + \"Error: \" + e);\n+                return;\n             }\n \n             // FIXME:  If params are missing...default them????",
                "raw_url": "https://github.com/apache/cloudstack/raw/7795cfd75986874f9a947260379a761b0f3bde82/utils/src/com/cloud/utils/db/Transaction.java",
                "sha": "8bc2a04f0979b713d96140e252e4becbaa3ed1c8",
                "status": "modified"
            }
        ],
        "message": "Transaction: Fix NPE while reading db.properties file\n\nHandle NPE while setting up data source in Transaction\n\n- This occured as Transaction is called it would run the following which\n  assumed db.properties file, which may not be in one's classpath;\n\n        // Initialize with assumed db.properties file\n        initDataSource(\"db.properties\");\n- So, while this would be logged in logs, this is ignored for DatabaseCreator's\n  case. In DatabaseCreator we call initDataSource with full path anyway.\n\nSigned-off-by: Rohit Yadav <bhaisaab@apache.org>",
        "parent": "https://github.com/apache/cloudstack/commit/c61156e9651d42295a5dca554af2de73cd442ec7",
        "patched_files": [
            "Transaction.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "TransactionTest.java"
        ]
    },
    "cloudstack_7ada4ad": {
        "bug_id": "cloudstack_7ada4ad",
        "commit": "https://github.com/apache/cloudstack/commit/7ada4ad50b683268f4031ff05e9d19d15d2c35f1",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/7ada4ad50b683268f4031ff05e9d19d15d2c35f1/utils/src/com/cloud/utils/net/NetUtils.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/com/cloud/utils/net/NetUtils.java?ref=7ada4ad50b683268f4031ff05e9d19d15d2c35f1",
                "deletions": 1,
                "filename": "utils/src/com/cloud/utils/net/NetUtils.java",
                "patch": "@@ -191,7 +191,12 @@ public static String getDefaultHostIp() {\n                 return null;\n             }\n \n-            String[] info = NetUtils.getNetworkParams(nic);\n+            String[] info = null;\n+            try {\n+                info = NetUtils.getNetworkParams(nic);\n+            } catch (NullPointerException ignored) {\n+                s_logger.debug(\"Caught NullPointerException when trying to getDefaultHostIp\");\n+            }\n             if (info != null) {\n                 return info[0];\n             }",
                "raw_url": "https://github.com/apache/cloudstack/raw/7ada4ad50b683268f4031ff05e9d19d15d2c35f1/utils/src/com/cloud/utils/net/NetUtils.java",
                "sha": "016ad470d0b013b5911a505fb48c67aea0b7d0eb",
                "status": "modified"
            }
        ],
        "message": "NetUtils: Check for NPE in getDefaultHostIp method when processing nic/mac\n\nOn hosts or containers where they don't have valid mac address on nic resulting\nin null, NetUtils.getNetworkParam can throw NPE.\n\nThis was a case found on TravisCI where OpenVZ containers are used. This method\n(getDefaultHostIp) is used at several other places within the ACS codebase to\nget the host IP and if null is caught we fallback to localhost or 127.0.0.1, so\nwe therefore set info to null before trying to process network param and if we\nfail we return null and expect other layers to use localhost.\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/e3b3a18aefb8364543cb162a289dabd3ff8293a5",
        "patched_files": [
            "NetUtils.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "NetUtilsTest.java"
        ]
    },
    "cloudstack_7c58c37": {
        "bug_id": "cloudstack_7c58c37",
        "commit": "https://github.com/apache/cloudstack/commit/7c58c37f08cca55ab7ea5a37031a91e9d84b693a",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/7c58c37f08cca55ab7ea5a37031a91e9d84b693a/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java?ref=7c58c37f08cca55ab7ea5a37031a91e9d84b693a",
                "deletions": 0,
                "filename": "engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "patch": "@@ -1351,6 +1351,8 @@ public NicProfile prepareNic(final VirtualMachineProfile vmProfile, final Deploy\n             nic.setIPv4Address(profile.getIPv4Address());\n             nic.setAddressFormat(profile.getFormat());\n             nic.setIPv6Address(profile.getIPv6Address());\n+            nic.setIPv6Cidr(profile.getIPv6Cidr());\n+            nic.setIPv6Gateway(profile.getIPv6Gateway());\n             nic.setMacAddress(profile.getMacAddress());\n             nic.setIsolationUri(profile.getIsolationUri());\n             nic.setBroadcastUri(profile.getBroadCastUri());",
                "raw_url": "https://github.com/apache/cloudstack/raw/7c58c37f08cca55ab7ea5a37031a91e9d84b693a/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "sha": "c4c344dddcc20c1fabc28a7a9d978c8167c9e142",
                "status": "modified"
            }
        ],
        "message": "ipv6: Set IPv6 CIDR and Gateway in 'nic' profile\n\nWithout this information a NPE might be triggered when starting a VR, SSVM or CP\nas this information is read from the 'nics' table and causes a NPE.\n\nDuring deployment we should set the IPv6 Gateway and CIDR for the NIC object so that\nit is persisted to the database.\n\nSigned-off-by: Wido den Hollander <wido@widodh.nl>\n(cherry picked from commit f661b631a13ba7f0c501eb5d1915eab3d097a37e)\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/c2060987830ab14ba92e2dd9fc66fb5a56c5fed3",
        "patched_files": [
            "NetworkOrchestrator.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "NetworkOrchestratorTest.java"
        ]
    },
    "cloudstack_80cb3ad": {
        "bug_id": "cloudstack_80cb3ad",
        "commit": "https://github.com/apache/cloudstack/commit/80cb3adad079be639331046f844b34a69079c224",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/80cb3adad079be639331046f844b34a69079c224/plugins/network-elements/elastic-loadbalancer/src/com/cloud/network/lb/LoadBalanceRuleHandler.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/elastic-loadbalancer/src/com/cloud/network/lb/LoadBalanceRuleHandler.java?ref=80cb3adad079be639331046f844b34a69079c224",
                "deletions": 1,
                "filename": "plugins/network-elements/elastic-loadbalancer/src/com/cloud/network/lb/LoadBalanceRuleHandler.java",
                "patch": "@@ -79,6 +79,7 @@\n import com.cloud.storage.dao.VMTemplateDao;\n import com.cloud.user.Account;\n import com.cloud.user.AccountService;\n+import com.cloud.user.UserVO;\n import com.cloud.user.dao.AccountDao;\n import com.cloud.user.dao.UserDao;\n import com.cloud.utils.db.DB;\n@@ -279,7 +280,10 @@ private DomainRouterVO deployELBVm(Network guestNetwork, final DeployDestination\n \n                 long userId = CallContext.current().getCallingUserId();\n                 if (CallContext.current().getCallingAccount().getId() != owner.getId()) {\n-                    userId =  _userDao.listByAccount(owner.getAccountId()).get(0).getId();\n+                    List<UserVO> userVOs = _userDao.listByAccount(owner.getAccountId());\n+                    if (!userVOs.isEmpty()) {\n+                        userId =  userVOs.get(0).getId();\n+                    }\n                 }\n \n                 ServiceOfferingVO elasticLbVmOffering = _serviceOfferingDao.findDefaultSystemOffering(ServiceOffering.elbVmDefaultOffUniqueName, ConfigurationManagerImpl.SystemVMUseLocalStorage.valueIn(dest.getDataCenter().getId()));",
                "raw_url": "https://github.com/apache/cloudstack/raw/80cb3adad079be639331046f844b34a69079c224/plugins/network-elements/elastic-loadbalancer/src/com/cloud/network/lb/LoadBalanceRuleHandler.java",
                "sha": "f5046b6a7b4fa9e5f0d4ccc05b155a8ddac1f59a",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/80cb3adad079be639331046f844b34a69079c224/plugins/network-elements/internal-loadbalancer/src/org/apache/cloudstack/network/lb/InternalLoadBalancerVMManagerImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/internal-loadbalancer/src/org/apache/cloudstack/network/lb/InternalLoadBalancerVMManagerImpl.java?ref=80cb3adad079be639331046f844b34a69079c224",
                "deletions": 1,
                "filename": "plugins/network-elements/internal-loadbalancer/src/org/apache/cloudstack/network/lb/InternalLoadBalancerVMManagerImpl.java",
                "patch": "@@ -97,6 +97,7 @@\n import com.cloud.user.Account;\n import com.cloud.user.AccountManager;\n import com.cloud.user.User;\n+import com.cloud.user.UserVO;\n import com.cloud.user.dao.UserDao;\n import com.cloud.utils.Pair;\n import com.cloud.utils.component.ManagerBase;\n@@ -772,7 +773,10 @@ protected DomainRouterVO deployInternalLbVm(final Account owner, final DeployDes\n \n                 long userId = CallContext.current().getCallingUserId();\n                 if (CallContext.current().getCallingAccount().getId() != owner.getId()) {\n-                    userId =  _userDao.listByAccount(owner.getAccountId()).get(0).getId();\n+                    List<UserVO> userVOs = _userDao.listByAccount(owner.getAccountId());\n+                    if (!userVOs.isEmpty()) {\n+                        userId =  userVOs.get(0).getId();\n+                    }\n                 }\n \n                 internalLbVm =",
                "raw_url": "https://github.com/apache/cloudstack/raw/80cb3adad079be639331046f844b34a69079c224/plugins/network-elements/internal-loadbalancer/src/org/apache/cloudstack/network/lb/InternalLoadBalancerVMManagerImpl.java",
                "sha": "bb153ff2ed918b7b28f44176fa19ec265473e1c4",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/80cb3adad079be639331046f844b34a69079c224/plugins/network-elements/juniper-contrail/src/org/apache/cloudstack/network/contrail/management/ServiceManagerImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/juniper-contrail/src/org/apache/cloudstack/network/contrail/management/ServiceManagerImpl.java?ref=80cb3adad079be639331046f844b34a69079c224",
                "deletions": 1,
                "filename": "plugins/network-elements/juniper-contrail/src/org/apache/cloudstack/network/contrail/management/ServiceManagerImpl.java",
                "patch": "@@ -53,6 +53,7 @@\n import com.cloud.template.VirtualMachineTemplate;\n import com.cloud.user.Account;\n import com.cloud.user.AccountService;\n+import com.cloud.user.UserVO;\n import com.cloud.user.dao.UserDao;\n import com.cloud.utils.exception.CloudRuntimeException;\n import com.cloud.vm.NicProfile;\n@@ -112,7 +113,10 @@ private ServiceVirtualMachine createServiceVM(DataCenter zone, Account owner, Vi\n \n         long userId = CallContext.current().getCallingUserId();\n         if (CallContext.current().getCallingAccount().getId() != owner.getId()) {\n-            userId =  _userDao.listByAccount(owner.getAccountId()).get(0).getId();\n+            List<UserVO> userVOs = _userDao.listByAccount(owner.getAccountId());\n+            if (!userVOs.isEmpty()) {\n+                userId =  userVOs.get(0).getId();\n+            }\n         }\n \n         ServiceVirtualMachine svm =",
                "raw_url": "https://github.com/apache/cloudstack/raw/80cb3adad079be639331046f844b34a69079c224/plugins/network-elements/juniper-contrail/src/org/apache/cloudstack/network/contrail/management/ServiceManagerImpl.java",
                "sha": "9ab10b77b7f516808d3d7da3b20ce42d4a40f59e",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/80cb3adad079be639331046f844b34a69079c224/server/src/com/cloud/network/router/NetworkHelperImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/NetworkHelperImpl.java?ref=80cb3adad079be639331046f844b34a69079c224",
                "deletions": 1,
                "filename": "server/src/com/cloud/network/router/NetworkHelperImpl.java",
                "patch": "@@ -84,6 +84,7 @@\n import com.cloud.user.Account;\n import com.cloud.user.AccountManager;\n import com.cloud.user.User;\n+import com.cloud.user.UserVO;\n import com.cloud.user.dao.UserDao;\n import com.cloud.utils.exception.CloudRuntimeException;\n import com.cloud.utils.net.NetUtils;\n@@ -486,7 +487,10 @@ public DomainRouterVO deployRouter(final RouterDeploymentDefinition routerDeploy\n \n                 long userId = CallContext.current().getCallingUserId();\n                 if (CallContext.current().getCallingAccount().getId() != owner.getId()) {\n-                    userId =  _userDao.listByAccount(owner.getAccountId()).get(0).getId();\n+                    List<UserVO> userVOs = _userDao.listByAccount(owner.getAccountId());\n+                    if (!userVOs.isEmpty()) {\n+                        userId =  userVOs.get(0).getId();\n+                    }\n                 }\n \n                 router = new DomainRouterVO(id, routerOffering.getId(), routerDeploymentDefinition.getVirtualProvider().getId(), VirtualMachineName.getRouterName(id,",
                "raw_url": "https://github.com/apache/cloudstack/raw/80cb3adad079be639331046f844b34a69079c224/server/src/com/cloud/network/router/NetworkHelperImpl.java",
                "sha": "302a9f10d3bfb261d07bce07570526c122de3d8f",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/80cb3adad079be639331046f844b34a69079c224/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/UserVmManagerImpl.java?ref=80cb3adad079be639331046f844b34a69079c224",
                "deletions": 1,
                "filename": "server/src/com/cloud/vm/UserVmManagerImpl.java",
                "patch": "@@ -3220,7 +3220,10 @@ protected UserVm createVirtualMachine(DataCenter zone, ServiceOffering serviceOf\n \n         long userId = CallContext.current().getCallingUserId();\n         if (CallContext.current().getCallingAccount().getId() != owner.getId()) {\n-            userId =  _userDao.listByAccount(owner.getAccountId()).get(0).getId();\n+            List<UserVO> userVOs = _userDao.listByAccount(owner.getAccountId());\n+            if (!userVOs.isEmpty()) {\n+                userId =  userVOs.get(0).getId();\n+            }\n         }\n \n         UserVmVO vm = commitUserVm(zone, template, hostName, displayName, owner, diskOfferingId, diskSize, userData, caller, isDisplayVm, keyboard, accountId, userId, offering,",
                "raw_url": "https://github.com/apache/cloudstack/raw/80cb3adad079be639331046f844b34a69079c224/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "sha": "1e5167e270502b5a8aa1cbf8d5b85f9e2aba4fc4",
                "status": "modified"
            }
        ],
        "message": "Added isEmpty() check to prevent nullPointerException.",
        "parent": "https://github.com/apache/cloudstack/commit/a0f8f56a5dd3a323a72eb2a145d64cb1b5abea49",
        "patched_files": [
            "NetworkHelperImpl.java",
            "LoadBalanceRuleHandler.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "NetworkHelperImplTest.java",
            "LoadBalanceRuleHandlerTest.java"
        ]
    },
    "cloudstack_81b4731": {
        "bug_id": "cloudstack_81b4731",
        "commit": "https://github.com/apache/cloudstack/commit/81b4731e3b5265943017f88b850421154184f7c5",
        "file": [
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/cloudstack/blob/81b4731e3b5265943017f88b850421154184f7c5/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=81b4731e3b5265943017f88b850421154184f7c5",
                "deletions": 18,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -2968,7 +2968,7 @@ public UsageRecordResponse createUsageResponse(Usage usageRecord) {\n         usageRecResponse.setUsage(usageRecord.getUsageDisplay());\n         usageRecResponse.setUsageType(usageRecord.getUsageType());\n         if (usageRecord.getVmInstanceId() != null) {\n-            VMInstanceVO vm = _entityMgr.findById(VMInstanceVO.class, usageRecord.getVmInstanceId());\n+            VMInstanceVO vm = _entityMgr.findByIdIncludingRemoved(VMInstanceVO.class, usageRecord.getVmInstanceId());\n             if (vm != null) {\n                 usageRecResponse.setVirtualMachineId(vm.getUuid());\n             }\n@@ -2986,7 +2986,7 @@ public UsageRecordResponse createUsageResponse(Usage usageRecord) {\n             //Service Offering Id\n             usageRecResponse.setOfferingId(svcOffering.getUuid());\n             //VM Instance ID\n-            VMInstanceVO vm = _entityMgr.findById(VMInstanceVO.class, usageRecord.getUsageId().toString());\n+            VMInstanceVO vm = _entityMgr.findByIdIncludingRemoved(VMInstanceVO.class, usageRecord.getUsageId().toString());\n             if (vm != null) {\n                 usageRecResponse.setUsageId(vm.getUuid());\n             }\n@@ -2999,7 +2999,7 @@ public UsageRecordResponse createUsageResponse(Usage usageRecord) {\n             //isSystem\n             usageRecResponse.setSystem((usageRecord.getSize() == 1) ? true : false);\n             //IP Address ID\n-            IPAddressVO ip = _entityMgr.findById(IPAddressVO.class, usageRecord.getUsageId().toString());\n+            IPAddressVO ip = _entityMgr.findByIdIncludingRemoved(IPAddressVO.class, usageRecord.getUsageId().toString());\n             if (ip != null) {\n                 usageRecResponse.setUsageId(ip.getUuid());\n             }\n@@ -3009,19 +3009,19 @@ public UsageRecordResponse createUsageResponse(Usage usageRecord) {\n             usageRecResponse.setType(usageRecord.getType());\n             if (usageRecord.getType().equals(\"DomainRouter\")) {\n                 //Domain Router Id\n-                VMInstanceVO vm = _entityMgr.findById(VMInstanceVO.class, usageRecord.getUsageId().toString());\n+                VMInstanceVO vm = _entityMgr.findByIdIncludingRemoved(VMInstanceVO.class, usageRecord.getUsageId().toString());\n                 if (vm != null) {\n                     usageRecResponse.setUsageId(vm.getUuid());\n                 }\n             } else {\n                 //External Device Host Id\n-                HostVO host = _entityMgr.findById(HostVO.class, usageRecord.getUsageId().toString());\n+                HostVO host = _entityMgr.findByIdIncludingRemoved(HostVO.class, usageRecord.getUsageId().toString());\n                 if (host != null) {\n                     usageRecResponse.setUsageId(host.getUuid());\n                 }\n             }\n             //Network ID\n-            NetworkVO network = _entityMgr.findById(NetworkVO.class, usageRecord.getNetworkId().toString());\n+            NetworkVO network = _entityMgr.findByIdIncludingRemoved(NetworkVO.class, usageRecord.getNetworkId().toString());\n             if (network != null) {\n                 usageRecResponse.setNetworkId(network.getUuid());\n             }\n@@ -3031,33 +3031,33 @@ public UsageRecordResponse createUsageResponse(Usage usageRecord) {\n             //Device Type\n             usageRecResponse.setType(usageRecord.getType());\n             //VM Instance Id\n-            VMInstanceVO vm = _entityMgr.findById(VMInstanceVO.class, usageRecord.getVmInstanceId().toString());\n+            VMInstanceVO vm = _entityMgr.findByIdIncludingRemoved(VMInstanceVO.class, usageRecord.getVmInstanceId().toString());\n             if (vm != null) {\n                 usageRecResponse.setVirtualMachineId(vm.getUuid());\n             }\n             //Volume ID\n-            VolumeVO volume = _entityMgr.findById(VolumeVO.class, usageRecord.getUsageId().toString());\n+            VolumeVO volume = _entityMgr.findByIdIncludingRemoved(VolumeVO.class, usageRecord.getUsageId().toString());\n             if (volume != null) {\n                 usageRecResponse.setUsageId(volume.getUuid());\n             }\n \n         } else if (usageRecord.getUsageType() == UsageTypes.VOLUME) {\n             //Volume ID\n-            VolumeVO volume = _entityMgr.findById(VolumeVO.class, usageRecord.getUsageId().toString());\n+            VolumeVO volume = _entityMgr.findByIdIncludingRemoved(VolumeVO.class, usageRecord.getUsageId().toString());\n             if (volume != null) {\n                 usageRecResponse.setUsageId(volume.getUuid());\n             }\n             //Volume Size\n             usageRecResponse.setSize(usageRecord.getSize());\n             //Disk Offering Id\n             if (usageRecord.getOfferingId() != null) {\n-                DiskOfferingVO diskOff = _entityMgr.findById(DiskOfferingVO.class, usageRecord.getOfferingId().toString());\n+                DiskOfferingVO diskOff = _entityMgr.findByIdIncludingRemoved(DiskOfferingVO.class, usageRecord.getOfferingId().toString());\n                 usageRecResponse.setOfferingId(diskOff.getUuid());\n             }\n \n         } else if (usageRecord.getUsageType() == UsageTypes.TEMPLATE || usageRecord.getUsageType() == UsageTypes.ISO) {\n             //Template/ISO ID\n-            VMTemplateVO tmpl = _entityMgr.findById(VMTemplateVO.class, usageRecord.getUsageId().toString());\n+            VMTemplateVO tmpl = _entityMgr.findByIdIncludingRemoved(VMTemplateVO.class, usageRecord.getUsageId().toString());\n             usageRecResponse.setUsageId(tmpl.getUuid());\n             if (tmpl != null) {\n                 usageRecResponse.setUsageId(tmpl.getUuid());\n@@ -3072,7 +3072,7 @@ public UsageRecordResponse createUsageResponse(Usage usageRecord) {\n \n         } else if (usageRecord.getUsageType() == UsageTypes.SNAPSHOT) {\n             //Snapshot ID\n-            SnapshotVO snap = _entityMgr.findById(SnapshotVO.class, usageRecord.getUsageId().toString());\n+            SnapshotVO snap = _entityMgr.findByIdIncludingRemoved(SnapshotVO.class, usageRecord.getUsageId().toString());\n             if (snap != null) {\n                 usageRecResponse.setUsageId(snap.getUuid());\n             }\n@@ -3081,39 +3081,39 @@ public UsageRecordResponse createUsageResponse(Usage usageRecord) {\n \n         } else if (usageRecord.getUsageType() == UsageTypes.LOAD_BALANCER_POLICY) {\n             //Load Balancer Policy ID\n-            LoadBalancerVO lb = _entityMgr.findById(LoadBalancerVO.class, usageRecord.getUsageId().toString());\n+            LoadBalancerVO lb = _entityMgr.findByIdIncludingRemoved(LoadBalancerVO.class, usageRecord.getUsageId().toString());\n             if (lb != null) {\n                 usageRecResponse.setUsageId(lb.getUuid());\n             }\n         } else if (usageRecord.getUsageType() == UsageTypes.PORT_FORWARDING_RULE) {\n             //Port Forwarding Rule ID\n-            PortForwardingRuleVO pf = _entityMgr.findById(PortForwardingRuleVO.class, usageRecord.getUsageId().toString());\n+            PortForwardingRuleVO pf = _entityMgr.findByIdIncludingRemoved(PortForwardingRuleVO.class, usageRecord.getUsageId().toString());\n             if (pf != null) {\n                 usageRecResponse.setUsageId(pf.getUuid());\n             }\n \n         } else if (usageRecord.getUsageType() == UsageTypes.NETWORK_OFFERING) {\n             //Network Offering Id\n-            NetworkOfferingVO netOff = _entityMgr.findById(NetworkOfferingVO.class, usageRecord.getOfferingId().toString());\n+            NetworkOfferingVO netOff = _entityMgr.findByIdIncludingRemoved(NetworkOfferingVO.class, usageRecord.getOfferingId().toString());\n             usageRecResponse.setOfferingId(netOff.getUuid());\n             //is Default\n             usageRecResponse.setDefault((usageRecord.getUsageId() == 1) ? true : false);\n \n         } else if (usageRecord.getUsageType() == UsageTypes.VPN_USERS) {\n             //VPN User ID\n-            VpnUserVO vpnUser = _entityMgr.findById(VpnUserVO.class, usageRecord.getUsageId().toString());\n+            VpnUserVO vpnUser = _entityMgr.findByIdIncludingRemoved(VpnUserVO.class, usageRecord.getUsageId().toString());\n             if (vpnUser != null) {\n                 usageRecResponse.setUsageId(vpnUser.getUuid());\n             }\n \n         } else if (usageRecord.getUsageType() == UsageTypes.SECURITY_GROUP) {\n             //Security Group Id\n-            SecurityGroupVO sg = _entityMgr.findById(SecurityGroupVO.class, usageRecord.getUsageId().toString());\n+            SecurityGroupVO sg = _entityMgr.findByIdIncludingRemoved(SecurityGroupVO.class, usageRecord.getUsageId().toString());\n             if (sg != null) {\n                 usageRecResponse.setUsageId(sg.getUuid());\n             }\n         } else if (usageRecord.getUsageType() == UsageTypes.VM_SNAPSHOT) {\n-            VMInstanceVO vm = _entityMgr.findById(VMInstanceVO.class, usageRecord.getVmInstanceId().toString());\n+            VMInstanceVO vm = _entityMgr.findByIdIncludingRemoved(VMInstanceVO.class, usageRecord.getVmInstanceId().toString());\n             if (vm != null) {\n                 usageRecResponse.setVmName(vm.getInstanceName());\n                 usageRecResponse.setUsageId(vm.getUuid());",
                "raw_url": "https://github.com/apache/cloudstack/raw/81b4731e3b5265943017f88b850421154184f7c5/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "12d09b23c4a62467d845f63946f6ca9f5e9c5872",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-6472 listUsageRecords: Pull information from removed items as well, fixing NPEs/Null UUIDs with usage API calls.\n\nSigned-off-by: Sebastien Goasguen <runseb@gmail.com>",
        "parent": "https://github.com/apache/cloudstack/commit/178240a7da4915541c64d675398f6b8b8715b7bf",
        "patched_files": [
            "ApiResponseHelper.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "ApiResponseHelperTest.java"
        ]
    },
    "cloudstack_8442a4d": {
        "bug_id": "cloudstack_8442a4d",
        "commit": "https://github.com/apache/cloudstack/commit/8442a4d9dfcfdd7bb92e9039a7923f1c3915fddf",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/8442a4d9dfcfdd7bb92e9039a7923f1c3915fddf/engine/schema/src/com/cloud/storage/dao/SnapshotDao.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/storage/dao/SnapshotDao.java?ref=8442a4d9dfcfdd7bb92e9039a7923f1c3915fddf",
                "deletions": 0,
                "filename": "engine/schema/src/com/cloud/storage/dao/SnapshotDao.java",
                "patch": "@@ -61,4 +61,6 @@\n \n     void updateVolumeIds(long oldVolId, long newVolId);\n \n+    List<SnapshotVO> listByStatusNotIn(long volumeId, Snapshot.State... status);\n+\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/8442a4d9dfcfdd7bb92e9039a7923f1c3915fddf/engine/schema/src/com/cloud/storage/dao/SnapshotDao.java",
                "sha": "1c11f9b61801bfe9d06a4a82a3975e014ef9433c",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/cloudstack/blob/8442a4d9dfcfdd7bb92e9039a7923f1c3915fddf/engine/schema/src/com/cloud/storage/dao/SnapshotDaoImpl.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/storage/dao/SnapshotDaoImpl.java?ref=8442a4d9dfcfdd7bb92e9039a7923f1c3915fddf",
                "deletions": 0,
                "filename": "engine/schema/src/com/cloud/storage/dao/SnapshotDaoImpl.java",
                "patch": "@@ -69,6 +69,7 @@\n     private SearchBuilder<SnapshotVO> AccountIdSearch;\n     private SearchBuilder<SnapshotVO> InstanceIdSearch;\n     private SearchBuilder<SnapshotVO> StatusSearch;\n+    private SearchBuilder<SnapshotVO> notInStatusSearch;\n     private GenericSearchBuilder<SnapshotVO, Long> CountSnapshotsByAccount;\n     @Inject\n     ResourceTagDao _tagsDao;\n@@ -187,6 +188,11 @@ protected void init() {\n         StatusSearch.and(\"status\", StatusSearch.entity().getState(), SearchCriteria.Op.IN);\n         StatusSearch.done();\n \n+        notInStatusSearch  = createSearchBuilder();\n+        notInStatusSearch.and(\"volumeId\", notInStatusSearch.entity().getVolumeId(), SearchCriteria.Op.EQ);\n+        notInStatusSearch.and(\"status\", notInStatusSearch.entity().getState(), SearchCriteria.Op.NOTIN);\n+        notInStatusSearch.done();\n+\n         CountSnapshotsByAccount = createSearchBuilder(Long.class);\n         CountSnapshotsByAccount.select(null, Func.COUNT, null);\n         CountSnapshotsByAccount.and(\"account\", CountSnapshotsByAccount.entity().getAccountId(), SearchCriteria.Op.EQ);\n@@ -352,4 +358,12 @@ public void updateVolumeIds(long oldVolId, long newVolId) {\n         UpdateBuilder ub = getUpdateBuilder(snapshot);\n         update(ub, sc, null);\n     }\n+\n+    @Override\n+    public List<SnapshotVO> listByStatusNotIn(long volumeId, Snapshot.State... status) {\n+        SearchCriteria<SnapshotVO> sc = this.notInStatusSearch.create();\n+        sc.setParameters(\"volumeId\", volumeId);\n+        sc.setParameters(\"status\", (Object[]) status);\n+        return listBy(sc, null);\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/8442a4d9dfcfdd7bb92e9039a7923f1c3915fddf/engine/schema/src/com/cloud/storage/dao/SnapshotDaoImpl.java",
                "sha": "560edc93816c0d470cf564d2cd145fac2b6b4878",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cloudstack/blob/8442a4d9dfcfdd7bb92e9039a7923f1c3915fddf/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/UserVmManagerImpl.java?ref=8442a4d9dfcfdd7bb92e9039a7923f1c3915fddf",
                "deletions": 12,
                "filename": "server/src/com/cloud/vm/UserVmManagerImpl.java",
                "patch": "@@ -231,10 +231,10 @@\n import com.cloud.storage.GuestOSVO;\n import com.cloud.storage.SnapshotVO;\n import com.cloud.storage.Storage;\n+import com.cloud.storage.Snapshot;\n import com.cloud.storage.Storage.ImageFormat;\n import com.cloud.storage.Storage.StoragePoolType;\n import com.cloud.storage.Storage.TemplateType;\n-import com.cloud.storage.Snapshot;\n import com.cloud.storage.StorageManager;\n import com.cloud.storage.StoragePool;\n import com.cloud.storage.StoragePoolStatus;\n@@ -5457,11 +5457,20 @@ public UserVm moveVMToUser(final AssignVMCmd cmd) throws ResourceAllocationExcep\n             }\n         }\n \n+        final List<VolumeVO> volumes = _volsDao.findByInstance(cmd.getVmId());\n+\n+        for (VolumeVO volume : volumes) {\n+            List<SnapshotVO> snapshots = _snapshotDao.listByStatusNotIn(volume.getId(), Snapshot.State.Destroyed,Snapshot.State.Error);\n+            if (snapshots != null && snapshots.size() > 0) {\n+                throw new InvalidParameterValueException(\n+                        \"Snapshots exists for volume: \"+ volume.getName()+ \", Detach volume or remove snapshots for volume before assigning VM to another user.\");\n+            }\n+        }\n+\n         DataCenterVO zone = _dcDao.findById(vm.getDataCenterId());\n \n         // Get serviceOffering and Volumes for Virtual Machine\n         final ServiceOfferingVO offering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId());\n-        final List<VolumeVO> volumes = _volsDao.findByInstance(cmd.getVmId());\n \n         //Remove vm from instance group\n         removeInstanceFromInstanceGroup(cmd.getVmId());\n@@ -5516,16 +5525,6 @@ public void doInTransactionWithoutResult(TransactionStatus status) {\n             _resourceLimitMgr.incrementResourceCount(newAccount.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n             UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_CREATE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                     volume.getDiskOfferingId(), volume.getTemplateId(), volume.getSize(), Volume.class.getName(), volume.getUuid(), volume.isDisplayVolume());\n-            //snapshots: mark these removed in db\n-            List<SnapshotVO> snapshots = _snapshotDao.listByVolumeIdIncludingRemoved(volume.getId());\n-            for (SnapshotVO snapshot : snapshots) {\n-                    boolean result = _snapshotService.deleteSnapshot(snapshot.getId());\n-                    if (result) {\n-                        s_logger.info(\"Snapshot id: \" + snapshot.getId() + \" delete successfully \");\n-                    } else {\n-                        s_logger.error(\"Unable to delete Snapshot id: \" + snapshot.getId());\n-                    }\n-            }\n         }\n \n         //update resource count of new account",
                "raw_url": "https://github.com/apache/cloudstack/raw/8442a4d9dfcfdd7bb92e9039a7923f1c3915fddf/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "sha": "df9130c682dac480c72c4a7f7859f9f9db8c4c10",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/8442a4d9dfcfdd7bb92e9039a7923f1c3915fddf/test/integration/component/test_assign_vm.py",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/test/integration/component/test_assign_vm.py?ref=8442a4d9dfcfdd7bb92e9039a7923f1c3915fddf",
                "deletions": 8,
                "filename": "test/integration/component/test_assign_vm.py",
                "patch": "@@ -112,6 +112,7 @@ def setUpClass(cls):\n                                     cls.services[\"ostype\"])\n         cls.services[\"virtual_machine\"][\"zoneid\"] = cls.zone.id\n         cls.services[\"virtual_machine\"][\"template\"] = cls.template.id\n+        cls.hypervisor = cls.testClient.getHypervisorInfo()\n \n         def create_domain_account_user(parentDomain=None):\n             domain  =  Domain.create(cls.api_client,\n@@ -415,17 +416,13 @@ def test_13_move_across_subdomain_vm_snapshot(self):\n         \"\"\"\n         # Validate the following:\n         # 1. deploy VM in sub subdomain1 with snapshot.\n-        # 3. assignVirtualMachine to subdomain2\n+        # 3. assign VM will fail with Exception as VM with snapshots cannot be assigned to other users.\n         if self.hypervisor.lower() in ['hyperv', 'lxc']:\n             self.skipTest(\"Snapshots feature is not supported on %s\" % self.hypervisor)\n         self.create_vm(self.sdomain_account_user1['account'], self.sdomain_account_user1['domain'], snapshot=True)\n-        self.virtual_machine.assign_virtual_machine(self.apiclient, self.sdomain_account_user2['account'].name ,self.sdomain_account_user2['domain'].id)\n-        snapshots = list_snapshots(self.apiclient,\n-                                   id=self.snapshot.id)\n-        self.assertEqual(snapshots,\n-                         None,\n-                         \"Snapshots stil present for a vm in domain\")\n-\n+        with self.assertRaises(Exception):\n+            self.virtual_machine.assign_virtual_machine(self.apiclient, self.sdomain_account_user2['account'].name ,self.sdomain_account_user2['domain'].id)\n+\t\t\n     @attr(tags = [\"advanced\"])\n     @log_test_exceptions\n     def test_14_move_across_subdomain_vm_project(self):",
                "raw_url": "https://github.com/apache/cloudstack/raw/8442a4d9dfcfdd7bb92e9039a7923f1c3915fddf/test/integration/component/test_assign_vm.py",
                "sha": "9d8ccea37b72bbf2fc329891d518ec9a4f6f3164",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-9921: Fix NPE when storage garbage collector is running (#2139)\n\nSteps to reproduce issue\r\n\r\nDeploy a VM\r\nTake snapshot of the root volume\r\nDelete the snapshot\r\nBefore the garbage collector has run, shutdown the VM and assign the VM to other user.\r\nWhen garage collector executes NPE shows in the logs.",
        "parent": "https://github.com/apache/cloudstack/commit/4d7a9d82cc2df041c59a6d126b8b5d5228b3de5d",
        "patched_files": [
            "test_assign_vm.py",
            "SnapshotDao.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "SnapshotDaoTest.java"
        ]
    },
    "cloudstack_850fb1a": {
        "bug_id": "cloudstack_850fb1a",
        "commit": "https://github.com/apache/cloudstack/commit/850fb1a557b8eec04de79124fea5b6f923530d66",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/cloudstack/blob/850fb1a557b8eec04de79124fea5b6f923530d66/server/src/com/cloud/network/element/VirtualRouterElement.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/element/VirtualRouterElement.java?ref=850fb1a557b8eec04de79124fea5b6f923530d66",
                "deletions": 12,
                "filename": "server/src/com/cloud/network/element/VirtualRouterElement.java",
                "patch": "@@ -24,18 +24,6 @@\n \n import javax.inject.Inject;\n \n-import org.apache.cloudstack.api.command.admin.router.ConfigureOvsElementCmd;\n-import org.apache.cloudstack.api.command.admin.router.ConfigureVirtualRouterElementCmd;\n-import org.apache.cloudstack.api.command.admin.router.CreateVirtualRouterElementCmd;\n-import org.apache.cloudstack.api.command.admin.router.ListOvsElementsCmd;\n-import org.apache.cloudstack.api.command.admin.router.ListVirtualRouterElementsCmd;\n-import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n-import org.apache.cloudstack.network.topology.NetworkTopology;\n-import org.apache.cloudstack.network.topology.NetworkTopologyContext;\n-import org.apache.log4j.Logger;\n-import org.cloud.network.router.deployment.RouterDeploymentDefinition;\n-import org.cloud.network.router.deployment.RouterDeploymentDefinitionBuilder;\n-\n import com.cloud.agent.api.to.LoadBalancerTO;\n import com.cloud.configuration.ConfigurationManager;\n import com.cloud.dc.DataCenter;\n@@ -107,6 +95,18 @@\n import com.cloud.vm.dao.UserVmDao;\n import com.google.gson.Gson;\n \n+import org.apache.cloudstack.api.command.admin.router.ConfigureOvsElementCmd;\n+import org.apache.cloudstack.api.command.admin.router.ConfigureVirtualRouterElementCmd;\n+import org.apache.cloudstack.api.command.admin.router.CreateVirtualRouterElementCmd;\n+import org.apache.cloudstack.api.command.admin.router.ListOvsElementsCmd;\n+import org.apache.cloudstack.api.command.admin.router.ListVirtualRouterElementsCmd;\n+import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n+import org.apache.cloudstack.network.topology.NetworkTopology;\n+import org.apache.cloudstack.network.topology.NetworkTopologyContext;\n+import org.apache.log4j.Logger;\n+import org.cloud.network.router.deployment.RouterDeploymentDefinition;\n+import org.cloud.network.router.deployment.RouterDeploymentDefinitionBuilder;\n+\n public class VirtualRouterElement extends AdapterBase implements VirtualRouterElementService, DhcpServiceProvider, UserDataServiceProvider, SourceNatServiceProvider,\n StaticNatServiceProvider, FirewallServiceProvider, LoadBalancingServiceProvider, PortForwardingServiceProvider, RemoteAccessVPNServiceProvider, IpDeployer,\n NetworkMigrationResponder, AggregatedCommandExecutor {\n@@ -153,6 +153,8 @@\n     IPAddressDao _ipAddressDao;\n     @Inject\n     DataCenterDao _dcDao;\n+    @Inject\n+    NetworkModel _networkModel;\n \n     @Inject\n     NetworkTopologyContext networkTopologyContext;",
                "raw_url": "https://github.com/apache/cloudstack/raw/850fb1a557b8eec04de79124fea5b6f923530d66/server/src/com/cloud/network/element/VirtualRouterElement.java",
                "sha": "d802188e4c4bd4c63a11e032085f4918af340b0c",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/cloudstack/blob/850fb1a557b8eec04de79124fea5b6f923530d66/server/src/com/cloud/network/element/VpcVirtualRouterElement.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/element/VpcVirtualRouterElement.java?ref=850fb1a557b8eec04de79124fea5b6f923530d66",
                "deletions": 9,
                "filename": "server/src/com/cloud/network/element/VpcVirtualRouterElement.java",
                "patch": "@@ -25,13 +25,6 @@\n \n import javax.inject.Inject;\n \n-import org.apache.cloudstack.network.topology.NetworkTopology;\n-import org.apache.log4j.Logger;\n-import org.cloud.network.router.deployment.RouterDeploymentDefinition;\n-import org.cloud.network.router.deployment.RouterDeploymentDefinitionBuilder;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n-\n import com.cloud.dc.DataCenter;\n import com.cloud.dc.DataCenterVO;\n import com.cloud.deploy.DeployDestination;\n@@ -79,6 +72,13 @@\n import com.cloud.vm.VirtualMachineManager;\n import com.cloud.vm.VirtualMachineProfile;\n \n+import org.apache.cloudstack.network.topology.NetworkTopology;\n+import org.apache.log4j.Logger;\n+import org.cloud.network.router.deployment.RouterDeploymentDefinition;\n+import org.cloud.network.router.deployment.RouterDeploymentDefinitionBuilder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n public class VpcVirtualRouterElement extends VirtualRouterElement implements VpcProvider, Site2SiteVpnServiceProvider, NetworkACLServiceProvider {\n \n     private static final Logger s_logger = Logger.getLogger(VpcVirtualRouterElement.class);\n@@ -466,7 +466,7 @@ public boolean deletePrivateGateway(final PrivateGateway gateway) throws Concurr\n             }\n         }\n \n-        return result > 0 ? true : false;\n+        return result == routers.size() ? true : false;\n     }\n \n     @Override\n@@ -559,9 +559,16 @@ public boolean applyACLItemsToPrivateGw(final PrivateGateway gateway, final List\n         final DataCenterVO dcVO = _dcDao.findById(network.getDataCenterId());\n         final NetworkTopology networkTopology = networkTopologyContext.retrieveNetworkTopology(dcVO);\n \n+        final Network privateNetwork = _networkModel.getNetwork(gateway.getNetworkId());\n+\n         boolean result = true;\n         for (final DomainRouterVO domainRouterVO : routers) {\n-            result = result && networkTopology.applyNetworkACLs(network, rules, domainRouterVO, isPrivateGateway);\n+            final NicProfile nicProfile = _networkModel.getNicProfile(domainRouterVO, privateNetwork.getId(), null);\n+            if (nicProfile != null) {\n+                result = result && networkTopology.applyNetworkACLs(network, rules, domainRouterVO, isPrivateGateway);\n+            } else {\n+                s_logger.warn(\"Nic Profile for router '\" + domainRouterVO + \"' has already been removed. Router is redundant = \" + domainRouterVO.getIsRedundantRouter());\n+            }\n         }\n         return result;\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/850fb1a557b8eec04de79124fea5b6f923530d66/server/src/com/cloud/network/element/VpcVirtualRouterElement.java",
                "sha": "9999ee62cb8f7a1953a3175009c8f2882060d19f",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/850fb1a557b8eec04de79124fea5b6f923530d66/server/src/com/cloud/network/router/CommandSetupHelper.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/CommandSetupHelper.java?ref=850fb1a557b8eec04de79124fea5b6f923530d66",
                "deletions": 1,
                "filename": "server/src/com/cloud/network/router/CommandSetupHelper.java",
                "patch": "@@ -58,6 +58,7 @@\n import com.cloud.agent.api.to.IpAddressTO;\n import com.cloud.agent.api.to.LoadBalancerTO;\n import com.cloud.agent.api.to.NetworkACLTO;\n+import com.cloud.agent.api.to.NicTO;\n import com.cloud.agent.api.to.PortForwardingRuleTO;\n import com.cloud.agent.api.to.StaticNatRuleTO;\n import com.cloud.agent.manager.Commands;\n@@ -504,7 +505,8 @@ public void createNetworkACLsCommands(final List<? extends NetworkACLItem> rules\n             }\n         }\n \n-        final SetNetworkACLCommand cmd = new SetNetworkACLCommand(rulesTO, _networkHelper.getNicTO(router, guestNetworkId, null));\n+        NicTO nicTO = _networkHelper.getNicTO(router, guestNetworkId, null);\n+        final SetNetworkACLCommand cmd = new SetNetworkACLCommand(rulesTO, nicTO);\n         cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n         cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, _routerControlHelper.getRouterIpInNetwork(guestNetworkId, router.getId()));\n         cmd.setAccessDetail(NetworkElementCommand.GUEST_VLAN_TAG, guestVlan);",
                "raw_url": "https://github.com/apache/cloudstack/raw/850fb1a557b8eec04de79124fea5b6f923530d66/server/src/com/cloud/network/router/CommandSetupHelper.java",
                "sha": "7208b2568139f4508b3b4b32e4ae94ceb432587b",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/850fb1a557b8eec04de79124fea5b6f923530d66/server/src/com/cloud/network/router/VpcVirtualNetworkApplianceManagerImpl.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/VpcVirtualNetworkApplianceManagerImpl.java?ref=850fb1a557b8eec04de79124fea5b6f923530d66",
                "deletions": 6,
                "filename": "server/src/com/cloud/network/router/VpcVirtualNetworkApplianceManagerImpl.java",
                "patch": "@@ -26,9 +26,6 @@\n import javax.inject.Inject;\n import javax.naming.ConfigurationException;\n \n-import org.apache.log4j.Logger;\n-import org.springframework.stereotype.Component;\n-\n import com.cloud.agent.api.Answer;\n import com.cloud.agent.api.Command;\n import com.cloud.agent.api.Command.OnError;\n@@ -91,6 +88,9 @@\n import com.cloud.vm.VirtualMachineProfile.Param;\n import com.cloud.vm.dao.VMInstanceDao;\n \n+import org.apache.log4j.Logger;\n+import org.springframework.stereotype.Component;\n+\n @Component\n public class VpcVirtualNetworkApplianceManagerImpl extends VirtualNetworkApplianceManagerImpl implements VpcVirtualNetworkApplianceManager {\n     private static final Logger s_logger = Logger.getLogger(VpcVirtualNetworkApplianceManagerImpl.class);\n@@ -531,16 +531,18 @@ protected boolean setupVpcPrivateNetwork(final VirtualRouter router, final boole\n \n     @Override\n     public boolean destroyPrivateGateway(final PrivateGateway gateway, final VirtualRouter router) throws ConcurrentOperationException, ResourceUnavailableException {\n+        boolean result = true;\n \n         if (!_networkModel.isVmPartOfNetwork(router.getId(), gateway.getNetworkId())) {\n             s_logger.debug(\"Router doesn't have nic for gateway \" + gateway + \" so no need to removed it\");\n-            return true;\n+            return result;\n         }\n \n         final Network privateNetwork = _networkModel.getNetwork(gateway.getNetworkId());\n+        final NicProfile nicProfile = _networkModel.getNicProfile(router, privateNetwork.getId(), null);\n \n         s_logger.debug(\"Releasing private ip for gateway \" + gateway + \" from \" + router);\n-        boolean result = setupVpcPrivateNetwork(router, false, _networkModel.getNicProfile(router, privateNetwork.getId(), null));\n+        result = setupVpcPrivateNetwork(router, false, nicProfile);\n         if (!result) {\n             s_logger.warn(\"Failed to release private ip for gateway \" + gateway + \" on router \" + router);\n             return false;\n@@ -706,7 +708,7 @@ public boolean startRemoteAccessVpn(final RemoteAccessVpn vpn, final VirtualRout\n             s_logger.error(\"Unable to start vpn: unable add users to vpn in zone \" + router.getDataCenterId() + \" for account \" + vpn.getAccountId() + \" on domR: \"\n                     + router.getInstanceName() + \" due to \" + answer.getDetails());\n             throw new ResourceUnavailableException(\"Unable to start vpn: Unable to add users to vpn in zone \" + router.getDataCenterId() + \" for account \" + vpn.getAccountId()\n-                    + \" on domR: \" + router.getInstanceName() + \" due to \" + answer.getDetails(), DataCenter.class, router.getDataCenterId());\n+            + \" on domR: \" + router.getInstanceName() + \" due to \" + answer.getDetails(), DataCenter.class, router.getDataCenterId());\n         }\n         answer = cmds.getAnswer(\"startVpn\");\n         if (!answer.getResult()) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/850fb1a557b8eec04de79124fea5b6f923530d66/server/src/com/cloud/network/router/VpcVirtualNetworkApplianceManagerImpl.java",
                "sha": "5785e2a6b5e72d670fbd82e88fe92e626ab673c5",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/850fb1a557b8eec04de79124fea5b6f923530d66/server/src/com/cloud/network/vpc/NetworkACLManagerImpl.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/vpc/NetworkACLManagerImpl.java?ref=850fb1a557b8eec04de79124fea5b6f923530d66",
                "deletions": 8,
                "filename": "server/src/com/cloud/network/vpc/NetworkACLManagerImpl.java",
                "patch": "@@ -21,11 +21,6 @@\n \n import javax.inject.Inject;\n \n-import org.apache.cloudstack.context.CallContext;\n-import org.apache.cloudstack.framework.messagebus.MessageBus;\n-import org.apache.cloudstack.framework.messagebus.PublishScope;\n-import org.apache.log4j.Logger;\n-\n import com.cloud.configuration.ConfigurationManager;\n import com.cloud.event.ActionEvent;\n import com.cloud.event.EventTypes;\n@@ -52,6 +47,11 @@\n import com.cloud.utils.db.TransactionStatus;\n import com.cloud.utils.exception.CloudRuntimeException;\n \n+import org.apache.cloudstack.context.CallContext;\n+import org.apache.cloudstack.framework.messagebus.MessageBus;\n+import org.apache.cloudstack.framework.messagebus.PublishScope;\n+import org.apache.log4j.Logger;\n+\n public class NetworkACLManagerImpl extends ManagerBase implements NetworkACLManager {\n     private static final Logger s_logger = Logger.getLogger(NetworkACLManagerImpl.class);\n \n@@ -335,10 +335,10 @@ public boolean revokeACLItemsForNetwork(final long networkId) throws ResourceUna\n \n     @Override\n     public boolean revokeACLItemsForPrivateGw(final PrivateGateway gateway) throws ResourceUnavailableException {\n-\n-        final List<NetworkACLItemVO> aclItems = _networkACLItemDao.listByACL(gateway.getNetworkACLId());\n+        final long networkACLId = gateway.getNetworkACLId();\n+        final List<NetworkACLItemVO> aclItems = _networkACLItemDao.listByACL(networkACLId);\n         if (aclItems.isEmpty()) {\n-            s_logger.debug(\"Found no network ACL Items for private gateway  id=\" + gateway.getId());\n+            s_logger.debug(\"Found no network ACL Items for private gateway 'id=\" + gateway.getId() + \"'\");\n             return true;\n         }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/850fb1a557b8eec04de79124fea5b6f923530d66/server/src/com/cloud/network/vpc/NetworkACLManagerImpl.java",
                "sha": "c64a36b7c9fa92bcff4ba4c76fe25c3d8654d334",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/850fb1a557b8eec04de79124fea5b6f923530d66/server/src/org/apache/cloudstack/network/topology/AdvancedNetworkTopology.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/org/apache/cloudstack/network/topology/AdvancedNetworkTopology.java?ref=850fb1a557b8eec04de79124fea5b6f923530d66",
                "deletions": 6,
                "filename": "server/src/org/apache/cloudstack/network/topology/AdvancedNetworkTopology.java",
                "patch": "@@ -19,11 +19,6 @@\n \n import java.util.List;\n \n-import org.apache.log4j.Logger;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.stereotype.Component;\n-\n import com.cloud.dc.DataCenter;\n import com.cloud.deploy.DeployDestination;\n import com.cloud.exception.ConcurrentOperationException;\n@@ -52,6 +47,11 @@\n import com.cloud.vm.VirtualMachine.State;\n import com.cloud.vm.VirtualMachineProfile;\n \n+import org.apache.log4j.Logger;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n @Component\n public class AdvancedNetworkTopology extends BasicNetworkTopology {\n \n@@ -223,6 +223,7 @@ public boolean applyNetworkACLs(final Network network, final List<? extends Netw\n \n         final NetworkAclsRules aclsRules = new NetworkAclsRules(network, rules, isPrivateGateway);\n \n-        return applyRules(network, router, typeString, isPodLevelException, podId, failWhenDisconnect, new RuleApplierWrapper<RuleApplier>(aclsRules));\n+        final boolean result = applyRules(network, router, typeString, isPodLevelException, podId, failWhenDisconnect, new RuleApplierWrapper<RuleApplier>(aclsRules));\n+        return result;\n     }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/850fb1a557b8eec04de79124fea5b6f923530d66/server/src/org/apache/cloudstack/network/topology/AdvancedNetworkTopology.java",
                "sha": "f456fcee177490713b7b54916899f09b9a17694e",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-9287 - Check if the nic profile has already been removed from a certain router\n\n   - In case of redundant VPCs, the ACL items are revoked in the first iteration. Since the econd iteration\n     is needed in order to remove the private network, we have to check if the nic profile is gone before trying\n     to revoke the ACL items again, which would throw a NPE.\n   - Some variable extraction in order to ease debugging.",
        "parent": "https://github.com/apache/cloudstack/commit/6a767732f959186e95c71d31a2ed49bb67a85473",
        "patched_files": [
            "VpcVirtualRouterElement.java",
            "VirtualRouterElement.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VpcVirtualRouterElementTest.java",
            "VirtualRouterElementTest.java"
        ]
    },
    "cloudstack_88c6072": {
        "bug_id": "cloudstack_88c6072",
        "commit": "https://github.com/apache/cloudstack/commit/88c6072b4dd4d4bdea196e915a8c7b2bb27feba0",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/88c6072b4dd4d4bdea196e915a8c7b2bb27feba0/utils/src/org/apache/cloudstack/utils/auth/SAMLUtils.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/org/apache/cloudstack/utils/auth/SAMLUtils.java?ref=88c6072b4dd4d4bdea196e915a8c7b2bb27feba0",
                "deletions": 1,
                "filename": "utils/src/org/apache/cloudstack/utils/auth/SAMLUtils.java",
                "patch": "@@ -225,7 +225,11 @@ public static String generateSAMLRequestSignature(String urlEncodedString, Priva\n         Signature signature = Signature.getInstance(\"SHA1withRSA\");\n         signature.initSign(signingKey);\n         signature.update(url.getBytes());\n-        return url + \"&Signature=\" + URLEncoder.encode(Base64.encodeBytes(signature.sign(), Base64.DONT_BREAK_LINES), HttpUtils.UTF_8);\n+        String signatureString = Base64.encodeBytes(signature.sign(), Base64.DONT_BREAK_LINES);\n+        if (signatureString != null) {\n+            return url + \"&Signature=\" + URLEncoder.encode(signatureString, HttpUtils.UTF_8);\n+        }\n+        return url;\n     }\n \n     public static KeyFactory getKeyFactory() {",
                "raw_url": "https://github.com/apache/cloudstack/raw/88c6072b4dd4d4bdea196e915a8c7b2bb27feba0/utils/src/org/apache/cloudstack/utils/auth/SAMLUtils.java",
                "sha": "36c4d0f90c49f90260225384bc1b3e684d91e428",
                "status": "modified"
            }
        ],
        "message": "CID-1237196: Fix potential NPE in SAMLUtils\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/ba93200917cc54317010c5f54c00fcfb5a5f9d23",
        "patched_files": [
            "SAMLUtils.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "SAMLUtilsTest.java"
        ]
    },
    "cloudstack_8bc7ae6": {
        "bug_id": "cloudstack_8bc7ae6",
        "commit": "https://github.com/apache/cloudstack/commit/8bc7ae695d621b67e1e5d1916a1852cad1f4dda0",
        "file": [
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/cloudstack/blob/8bc7ae695d621b67e1e5d1916a1852cad1f4dda0/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java?ref=8bc7ae695d621b67e1e5d1916a1852cad1f4dda0",
                "deletions": 5,
                "filename": "engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "patch": "@@ -928,7 +928,7 @@ protected NicTO toNicTO(NicVO nic, NicProfile profile, NetworkVO config) {\n \n     boolean isNetworkImplemented(NetworkVO network) {\n         Network.State state = network.getState();\n-        if (state == Network.State.Implemented || state == Network.State.Implementing) {\n+        if (state == Network.State.Implemented) {\n             return true;\n         } else if (state == Network.State.Setup) {\n             DataCenterVO zone = _dcDao.findById(network.getDataCenterId());\n@@ -939,6 +939,24 @@ boolean isNetworkImplemented(NetworkVO network) {\n         return false;\n     }\n \n+    Pair<NetworkGuru, NetworkVO> implementNetwork(long networkId, DeployDestination dest, ReservationContext context, boolean isRouter) throws ConcurrentOperationException,\n+    ResourceUnavailableException, InsufficientCapacityException {\n+        Pair<NetworkGuru, NetworkVO> implemented = null;\n+        if (!isRouter) {\n+            implemented = implementNetwork(networkId, dest, context);\n+        } else {\n+            // At the time of implementing network (using implementNetwork() method), if the VR needs to be deployed then\n+            // it follows the same path of regular VM deployment. This leads to a nested call to implementNetwork() while\n+            // preparing VR nics. This flow creates issues in dealing with network state transitions. The original call\n+            // puts network in \"Implementing\" state and then the nested call again tries to put it into same state resulting\n+            // in issues. In order to avoid it, implementNetwork() call for VR is replaced with below code.\n+            NetworkVO network = _networksDao.findById(networkId);\n+            NetworkGuru guru = AdapterBase.getAdapterByName(networkGurus, network.getGuruName());\n+            implemented = new Pair<NetworkGuru, NetworkVO>(guru, network);\n+        }\n+        return implemented;\n+    }\n+\n     @Override\n     @DB\n     public Pair<NetworkGuru, NetworkVO> implementNetwork(long networkId, DeployDestination dest, ReservationContext context) throws ConcurrentOperationException,\n@@ -1280,7 +1298,7 @@ public int compare(NicVO nic1, NicVO nic2) {\n         });\n \n         for (NicVO nic : nics) {\n-            Pair<NetworkGuru, NetworkVO> implemented = implementNetwork(nic.getNetworkId(), dest, context);\n+            Pair<NetworkGuru, NetworkVO> implemented = implementNetwork(nic.getNetworkId(), dest, context, vmProfile.getVirtualMachine().getType() == Type.DomainRouter);\n             if (implemented == null || implemented.first() == null) {\n                 s_logger.warn(\"Failed to implement network id=\" + nic.getNetworkId() + \" as a part of preparing nic id=\" + nic.getId());\n                 throw new CloudRuntimeException(\"Failed to implement network id=\" + nic.getNetworkId() + \" as a part preparing nic id=\" + nic.getId());\n@@ -3082,9 +3100,10 @@ public NicProfile createNicForVm(Network network, NicProfile requested, Reservat\n \n         //2) prepare nic\n         if (prepare) {\n-            Pair<NetworkGuru, NetworkVO> implemented = implementNetwork(nic.getNetworkId(), dest, context);\n-            if (implemented == null) {\n-                throw new CloudRuntimeException(\"Failed to prepare the nic as a part of creating nic \" + nic + \" for vm \"+ vm + \" due to network \" + network + \" implement failure\");\n+            Pair<NetworkGuru, NetworkVO> implemented = implementNetwork(nic.getNetworkId(), dest, context, vmProfile.getVirtualMachine().getType() == Type.DomainRouter);\n+            if (implemented == null || implemented.first() == null) {\n+                s_logger.warn(\"Failed to implement network id=\" + nic.getNetworkId() + \" as a part of preparing nic id=\" + nic.getId());\n+                throw new CloudRuntimeException(\"Failed to implement network id=\" + nic.getNetworkId() + \" as a part preparing nic id=\" + nic.getId());\n             }\n             nic = prepareNic(vmProfile, dest, context, nic.getId(), implemented.second());\n             s_logger.debug(\"Nic is prepared successfully for vm \" + vm + \" in network \" + network);",
                "raw_url": "https://github.com/apache/cloudstack/raw/8bc7ae695d621b67e1e5d1916a1852cad1f4dda0/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "sha": "ca0b86d0e168b38e885d69f22a272f6c883c092d",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-7182: NPE while trying to deploy VMs in parallel in isolated network\n- Check to see if network is implemented changed from 'state == Implementing||Implemented' to 'state == Implemented'.\nThe earlier check was a hack to prevent the issue described below.\n- At the time of implementing network (using implementNetwork() method), if the VR needs to be deployed then it follows\nthe same path of regular VM deployment. This leads to a nested call to implementNetwork() while preparing VR nics. This\nflow creates issues in dealing with network state transitions. The original call puts network in \"Implementing\" state\nand then the nested call again tries to put it into same state resulting in issues. In order to avoid it, implementNetwork()\ncall for VR is replaced with below code.",
        "parent": "https://github.com/apache/cloudstack/commit/59ea2e2960b3447344365d2dfce745e0a7ba7816",
        "patched_files": [
            "NetworkOrchestrator.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "NetworkOrchestratorTest.java"
        ]
    },
    "cloudstack_8c387f9": {
        "bug_id": "cloudstack_8c387f9",
        "commit": "https://github.com/apache/cloudstack/commit/8c387f9de6d76cfa983b6fa7f39b2e9df4be4266",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/8c387f9de6d76cfa983b6fa7f39b2e9df4be4266/vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java?ref=8c387f9de6d76cfa983b6fa7f39b2e9df4be4266",
                "deletions": 1,
                "filename": "vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java",
                "patch": "@@ -3281,7 +3281,7 @@ public boolean isMemoryHotAddSupported(String guestOsId) throws Exception {\n         virtualHardwareVersion = getVirtualHardwareVersion();\n \n         // Check if guest operating system supports memory hotadd\n-        if (guestOsDescriptor.isSupportsMemoryHotAdd()) {\n+        if (guestOsDescriptor != null && guestOsDescriptor.isSupportsMemoryHotAdd()) {\n             guestOsSupportsMemoryHotAdd = true;\n         }\n         // Check if virtual machine is using hardware version 7 or later.",
                "raw_url": "https://github.com/apache/cloudstack/raw/8c387f9de6d76cfa983b6fa7f39b2e9df4be4266/vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java",
                "sha": "1ab325be14ccf37bbcf91f20c39ae7d9b922f931",
                "status": "modified"
            }
        ],
        "message": "vmware: fix potential NPE when memory hotplug capability is checked (#3362)\n\nThis fixes potential NPE case when memory hotpluggability is checked\r\nbased on the guest OS descriptor.\r\n\r\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/f6f381fc68dc4a27a6ec212966f55c58264596bc",
        "patched_files": [
            "VirtualMachineMO.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineMOTest.java"
        ]
    },
    "cloudstack_8d506a6": {
        "bug_id": "cloudstack_8d506a6",
        "commit": "https://github.com/apache/cloudstack/commit/8d506a624bbb8cf7fdc1fcd381551f319a90a810",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/8d506a624bbb8cf7fdc1fcd381551f319a90a810/vmware-base/test/com/cloud/hypervisor/vmware/util/VmwareContextPoolTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/vmware-base/test/com/cloud/hypervisor/vmware/util/VmwareContextPoolTest.java?ref=8d506a624bbb8cf7fdc1fcd381551f319a90a810",
                "deletions": 2,
                "filename": "vmware-base/test/com/cloud/hypervisor/vmware/util/VmwareContextPoolTest.java",
                "patch": "@@ -114,7 +114,5 @@ public void testMultithreadedPoolClients() throws Exception {\n             totalRegistrations += client.count();\n         }\n         Mockito.verify(vmwareContextPool, Mockito.atLeast(totalRegistrations)).registerContext(Mockito.any(VmwareContext.class));\n-        Assert.assertEquals(vmwareContextPool.composePoolKey(vmwareAddress, vmwareUsername),\n-                vmwareContextPool.getContext(vmwareAddress, vmwareUsername).getPoolKey());\n     }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/8d506a624bbb8cf7fdc1fcd381551f319a90a810/vmware-base/test/com/cloud/hypervisor/vmware/util/VmwareContextPoolTest.java",
                "sha": "0c365db6fefed946c82684747954a088d960b05e",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #1816 from shapeblue/4.9-fix-npe-vmware\n\nCLOUDSTACK-9564: Fix NPE due to intermittent test assertionThe test assertion on a pool object may return a null object, as objects\ncan be randomly expired/tombstoned. This will fix a NPE sometimes seen due\nto recently merge for the fix for CLOUDSTACK-9564.\n\n(we can merge this if Travis passes)\n\n/cc @abhinandanprateek @murali-reddy\n\n* pr/1816:\n  CLOUDSTACK-9564: Fix NPE due to intermittent test assertion\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/48b28f7d6e72010bc365c5b8829a7f20e47c015b",
        "patched_files": [
            "VmwareContextPool.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VmwareContextPoolTest.java"
        ]
    },
    "cloudstack_8e4644e": {
        "bug_id": "cloudstack_8e4644e",
        "commit": "https://github.com/apache/cloudstack/commit/8e4644e413777d0a58edd5405a928df8256fdbd9",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/8e4644e413777d0a58edd5405a928df8256fdbd9/api/src/com/cloud/vm/VmDetailConstants.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/vm/VmDetailConstants.java?ref=8e4644e413777d0a58edd5405a928df8256fdbd9",
                "deletions": 1,
                "filename": "api/src/com/cloud/vm/VmDetailConstants.java",
                "patch": "@@ -19,7 +19,7 @@\n public interface VmDetailConstants {\n     public static final String KEYBOARD = \"keyboard\";\n     public static final String NIC_ADAPTER = \"nicAdapter\";\n-    public static final String ROOK_DISK_CONTROLLER = \"rootDiskController\";\n+    public static final String ROOT_DISK_CONTROLLER = \"rootDiskController\";\n     public static final String NESTED_VIRTUALIZATION_FLAG = \"nestedVirtualizationFlag\";\n     public static final String HYPERVISOR_TOOLS_VERSION = \"hypervisortoolsversion\";\n     public static final String DATA_DISK_CONTROLLER = \"dataDiskController\";",
                "raw_url": "https://github.com/apache/cloudstack/raw/8e4644e413777d0a58edd5405a928df8256fdbd9/api/src/com/cloud/vm/VmDetailConstants.java",
                "sha": "d34afc13a1696aa00ebd9c047bd3a3af137656cf",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/8e4644e413777d0a58edd5405a928df8256fdbd9/plugins/hypervisors/vmware/src/com/cloud/hypervisor/guru/VMwareGuru.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/com/cloud/hypervisor/guru/VMwareGuru.java?ref=8e4644e413777d0a58edd5405a928df8256fdbd9",
                "deletions": 2,
                "filename": "plugins/hypervisors/vmware/src/com/cloud/hypervisor/guru/VMwareGuru.java",
                "patch": "@@ -200,10 +200,10 @@ public VirtualMachineTO implement(VirtualMachineProfile vm) {\n             }\n         }\n \n-        String diskDeviceType = details.get(VmDetailConstants.ROOK_DISK_CONTROLLER);\n+        String diskDeviceType = details.get(VmDetailConstants.ROOT_DISK_CONTROLLER);\n         if (userVm) {\n             if (diskDeviceType == null) {\n-                details.put(VmDetailConstants.ROOK_DISK_CONTROLLER, _vmwareMgr.getRootDiskController());\n+                details.put(VmDetailConstants.ROOT_DISK_CONTROLLER, _vmwareMgr.getRootDiskController());\n             }\n         }\n         String diskController = details.get(VmDetailConstants.DATA_DISK_CONTROLLER);",
                "raw_url": "https://github.com/apache/cloudstack/raw/8e4644e413777d0a58edd5405a928df8256fdbd9/plugins/hypervisors/vmware/src/com/cloud/hypervisor/guru/VMwareGuru.java",
                "sha": "986000aa9389cf2e67953631a20eecbb5344a4fe",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/8e4644e413777d0a58edd5405a928df8256fdbd9/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java?ref=8e4644e413777d0a58edd5405a928df8256fdbd9",
                "deletions": 9,
                "filename": "plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "patch": "@@ -236,7 +236,7 @@\n import com.cloud.hypervisor.vmware.mo.NetworkDetails;\n import com.cloud.hypervisor.vmware.mo.TaskMO;\n import com.cloud.hypervisor.vmware.mo.VirtualEthernetCardType;\n-import com.cloud.hypervisor.vmware.mo.VirtualMachineDiskInfo;\n+import org.apache.cloudstack.utils.volume.VirtualMachineDiskInfo;\n import com.cloud.hypervisor.vmware.mo.VirtualMachineDiskInfoBuilder;\n import com.cloud.hypervisor.vmware.mo.VirtualMachineMO;\n import com.cloud.hypervisor.vmware.mo.VirtualSwitchType;\n@@ -1412,7 +1412,7 @@ protected StartAnswer execute(StartCommand cmd) {\n         String vmInternalCSName = names.first();\n         String vmNameOnVcenter = names.second();\n         String dataDiskController = vmSpec.getDetails().get(VmDetailConstants.DATA_DISK_CONTROLLER);\n-        String rootDiskController = vmSpec.getDetails().get(VmDetailConstants.ROOK_DISK_CONTROLLER);\n+        String rootDiskController = vmSpec.getDetails().get(VmDetailConstants.ROOT_DISK_CONTROLLER);\n \n         // If root disk controller is scsi, then data disk controller would also be scsi instead of using 'osdefault'\n         // This helps avoid mix of different scsi subtype controllers in instance.\n@@ -1451,7 +1451,7 @@ protected StartAnswer execute(StartCommand cmd) {\n                 s_logger.error(msg);\n                 throw new Exception(msg);\n             }\n-\n+            String guestOsId = translateGuestOsIdentifier(vmSpec.getArch(), vmSpec.getOs(), vmSpec.getPlatformEmulator()).value();\n             DiskTO[] disks = validateDisks(vmSpec.getDisks());\n             assert (disks.length > 0);\n             NicTO[] nics = vmSpec.getNics();\n@@ -1564,7 +1564,7 @@ protected StartAnswer execute(StartCommand cmd) {\n                         tearDownVm(vmMo);\n                     }else if (!hyperHost.createBlankVm(vmNameOnVcenter, vmInternalCSName, vmSpec.getCpus(), vmSpec.getMaxSpeed().intValue(),\n                             getReservedCpuMHZ(vmSpec), vmSpec.getLimitCpuUse(), (int)(vmSpec.getMaxRam() / (1024 * 1024)), getReservedMemoryMb(vmSpec),\n-                            translateGuestOsIdentifier(vmSpec.getArch(), vmSpec.getOs(), vmSpec.getPlatformEmulator()).value(), rootDiskDataStoreDetails.first(), false, controllerInfo, systemVm)) {\n+                            guestOsId, rootDiskDataStoreDetails.first(), false, controllerInfo, systemVm)) {\n                         throw new Exception(\"Failed to create VM. vmName: \" + vmInternalCSName);\n                     }\n                 }\n@@ -1588,7 +1588,6 @@ protected StartAnswer execute(StartCommand cmd) {\n             }\n \n             VirtualMachineConfigSpec vmConfigSpec = new VirtualMachineConfigSpec();\n-            String guestOsId = translateGuestOsIdentifier(vmSpec.getArch(), vmSpec.getOs(), vmSpec.getPlatformEmulator()).value();\n \n             VmwareHelper.setBasicVmConfig(vmConfigSpec, vmSpec.getCpus(), vmSpec.getMaxSpeed(),\n                     getReservedCpuMHZ(vmSpec), (int)(vmSpec.getMaxRam() / (1024 * 1024)), getReservedMemoryMb(vmSpec),\n@@ -2322,14 +2321,14 @@ private int getDiskController(VirtualMachineDiskInfo matchingExistingDisk, DiskT\n \n         if (vol.getType() == Volume.Type.ROOT) {\n             Map<String, String> vmDetails = vmSpec.getDetails();\n-            if (vmDetails != null && vmDetails.get(VmDetailConstants.ROOK_DISK_CONTROLLER) != null) {\n-                if (vmDetails.get(VmDetailConstants.ROOK_DISK_CONTROLLER).equalsIgnoreCase(\"scsi\")) {\n+            if (vmDetails != null && vmDetails.get(VmDetailConstants.ROOT_DISK_CONTROLLER) != null) {\n+                if (vmDetails.get(VmDetailConstants.ROOT_DISK_CONTROLLER).equalsIgnoreCase(\"scsi\")) {\n                     s_logger.info(\"Chose disk controller for vol \" + vol.getType() + \" -> scsi, based on root disk controller settings: \" +\n-                            vmDetails.get(VmDetailConstants.ROOK_DISK_CONTROLLER));\n+                            vmDetails.get(VmDetailConstants.ROOT_DISK_CONTROLLER));\n                     controllerKey = scsiControllerKey;\n                 } else {\n                     s_logger.info(\"Chose disk controller for vol \" + vol.getType() + \" -> ide, based on root disk controller settings: \" +\n-                            vmDetails.get(VmDetailConstants.ROOK_DISK_CONTROLLER));\n+                            vmDetails.get(VmDetailConstants.ROOT_DISK_CONTROLLER));\n                     controllerKey = ideControllerKey;\n                 }\n             } else {",
                "raw_url": "https://github.com/apache/cloudstack/raw/8e4644e413777d0a58edd5405a928df8256fdbd9/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "sha": "dd419f2574ff61a1063af69fe313df34ff5cad52",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/8e4644e413777d0a58edd5405a928df8256fdbd9/plugins/hypervisors/vmware/src/com/cloud/storage/resource/VmwareStorageProcessor.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/com/cloud/storage/resource/VmwareStorageProcessor.java?ref=8e4644e413777d0a58edd5405a928df8256fdbd9",
                "deletions": 18,
                "filename": "plugins/hypervisors/vmware/src/com/cloud/storage/resource/VmwareStorageProcessor.java",
                "patch": "@@ -33,6 +33,7 @@\n import java.util.concurrent.Executors;\n import java.util.concurrent.TimeUnit;\n \n+import com.google.common.base.Strings;\n import org.apache.commons.lang.StringUtils;\n import org.apache.log4j.Logger;\n \n@@ -88,7 +89,7 @@\n import com.cloud.hypervisor.vmware.mo.HostStorageSystemMO;\n import com.cloud.hypervisor.vmware.mo.HypervisorHostHelper;\n import com.cloud.hypervisor.vmware.mo.NetworkDetails;\n-import com.cloud.hypervisor.vmware.mo.VirtualMachineDiskInfo;\n+import org.apache.cloudstack.utils.volume.VirtualMachineDiskInfo;\n import com.cloud.hypervisor.vmware.mo.VirtualMachineMO;\n import com.cloud.hypervisor.vmware.mo.VmwareHypervisorHost;\n import com.cloud.hypervisor.vmware.resource.VmwareResource;\n@@ -1363,24 +1364,15 @@ private Answer attachVolume(Command cmd, DiskTO disk, boolean isAttach, boolean\n             AttachAnswer answer = new AttachAnswer(disk);\n \n             if (isAttach) {\n-                String dataDiskController = controllerInfo.get(VmDetailConstants.DATA_DISK_CONTROLLER);\n-                String rootDiskController = controllerInfo.get(VmDetailConstants.ROOK_DISK_CONTROLLER);\n-                DiskControllerType rootDiskControllerType = DiskControllerType.getType(rootDiskController);\n-\n-                if (dataDiskController == null) {\n-                    dataDiskController = getLegacyVmDataDiskController();\n-                } else if ((rootDiskControllerType == DiskControllerType.lsilogic) ||\n-                           (rootDiskControllerType == DiskControllerType.lsisas1068) ||\n-                           (rootDiskControllerType == DiskControllerType.pvscsi) ||\n-                           (rootDiskControllerType == DiskControllerType.buslogic)) {\n-                    //TODO: Support mix of SCSI controller types for single VM. If root disk is already over\n-                    //a SCSI controller then use the same for data volume as well. This limitation will go once mix\n-                    //of SCSI controller types for single VM.\n-                    dataDiskController = rootDiskController;\n-                } else if (DiskControllerType.getType(dataDiskController) == DiskControllerType.osdefault) {\n-                    dataDiskController = vmMo.getRecommendedDiskController(null);\n+                String diskController = getLegacyVmDataDiskController();\n+                if (controllerInfo != null &&\n+                        !Strings.isNullOrEmpty(controllerInfo.get(VmDetailConstants.DATA_DISK_CONTROLLER))) {\n+                    diskController = controllerInfo.get(VmDetailConstants.DATA_DISK_CONTROLLER);\n                 }\n-                vmMo.attachDisk(new String[] {datastoreVolumePath}, morDs, dataDiskController);\n+                if (DiskControllerType.getType(diskController) == DiskControllerType.osdefault) {\n+                    diskController = vmMo.getRecommendedDiskController(null);\n+                }\n+                vmMo.attachDisk(new String[] {datastoreVolumePath}, morDs, diskController);\n             } else {\n                 vmMo.removeAllSnapshots();\n                 vmMo.detachDisk(datastoreVolumePath, false);",
                "raw_url": "https://github.com/apache/cloudstack/raw/8e4644e413777d0a58edd5405a928df8256fdbd9/plugins/hypervisors/vmware/src/com/cloud/storage/resource/VmwareStorageProcessor.java",
                "sha": "567f8576d7bea6632df4a84b508660c1e28682bf",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/8e4644e413777d0a58edd5405a928df8256fdbd9/pom.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/pom.xml?ref=8e4644e413777d0a58edd5405a928df8256fdbd9",
                "deletions": 1,
                "filename": "pom.xml",
                "patch": "@@ -92,7 +92,7 @@\n     <cs.servlet.version>2.5</cs.servlet.version>\n     <cs.jstl.version>1.2</cs.jstl.version>\n     <cs.selenium.server.version>1.0-20081010.060147</cs.selenium.server.version>\n-    <cs.vmware.api.version>5.5</cs.vmware.api.version>\n+    <cs.vmware.api.version>6.0</cs.vmware.api.version>\n     <org.springframework.version>3.2.12.RELEASE</org.springframework.version>\n     <cs.mockito.version>1.9.5</cs.mockito.version>\n     <cs.powermock.version>1.5.3</cs.powermock.version>",
                "raw_url": "https://github.com/apache/cloudstack/raw/8e4644e413777d0a58edd5405a928df8256fdbd9/pom.xml",
                "sha": "af9eb765665e23a9594250a27d12185a902663a3",
                "status": "modified"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/cloudstack/blob/8e4644e413777d0a58edd5405a928df8256fdbd9/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/VolumeApiServiceImpl.java?ref=8e4644e413777d0a58edd5405a928df8256fdbd9",
                "deletions": 1,
                "filename": "server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "patch": "@@ -30,15 +30,18 @@\n \n import com.cloud.utils.EncryptionUtil;\n import com.cloud.utils.db.TransactionCallbackWithException;\n+import com.google.common.base.Strings;\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonParseException;\n \n import org.apache.cloudstack.api.command.user.volume.GetUploadParamsForVolumeCmd;\n import org.apache.cloudstack.api.response.GetUploadParamsResponse;\n import org.apache.cloudstack.engine.subsystem.api.storage.DataObject;\n import org.apache.cloudstack.engine.subsystem.api.storage.EndPoint;\n import org.apache.cloudstack.storage.command.TemplateOrVolumePostUploadCommand;\n import org.apache.cloudstack.utils.imagestore.ImageStoreUtil;\n+import org.apache.cloudstack.utils.volume.VirtualMachineDiskInfo;\n import org.apache.log4j.Logger;\n import org.apache.cloudstack.api.command.user.volume.AttachVolumeCmd;\n import org.apache.cloudstack.api.command.user.volume.CreateVolumeCmd;\n@@ -112,12 +115,14 @@\n import com.cloud.hypervisor.HypervisorCapabilitiesVO;\n import com.cloud.hypervisor.dao.HypervisorCapabilitiesDao;\n import com.cloud.org.Grouping;\n+import com.cloud.serializer.GsonHelper;\n import com.cloud.service.dao.ServiceOfferingDetailsDao;\n import com.cloud.storage.Storage.ImageFormat;\n import com.cloud.storage.dao.DiskOfferingDao;\n import com.cloud.storage.dao.SnapshotDao;\n import com.cloud.storage.dao.VMTemplateDao;\n import com.cloud.storage.dao.VolumeDao;\n+import com.cloud.storage.dao.VolumeDetailsDao;\n import com.cloud.storage.snapshot.SnapshotApiService;\n import com.cloud.storage.snapshot.SnapshotManager;\n import com.cloud.template.TemplateManager;\n@@ -146,6 +151,7 @@\n import com.cloud.utils.exception.CloudRuntimeException;\n import com.cloud.utils.fsm.NoTransitionException;\n import com.cloud.utils.fsm.StateMachine2;\n+import com.cloud.vm.UserVmManager;\n import com.cloud.vm.UserVmVO;\n import com.cloud.vm.VMInstanceVO;\n import com.cloud.vm.VirtualMachine;\n@@ -191,6 +197,8 @@\n     @Inject\n     VolumeDao _volsDao;\n     @Inject\n+    VolumeDetailsDao _volDetailDao;\n+    @Inject\n     HostDao _hostDao;\n     @Inject\n     SnapshotDao _snapshotDao;\n@@ -240,6 +248,9 @@\n     VmWorkJobDao _workJobDao;\n     @Inject\n     ClusterDetailsDao _clusterDetailsDao;\n+    @Inject\n+    UserVmManager _userVmMgr;\n+    protected Gson _gson;\n \n     private List<StoragePoolAllocator> _storagePoolAllocators;\n \n@@ -253,6 +264,7 @@\n \n     protected VolumeApiServiceImpl() {\n         _volStateMachine = Volume.State.getStateMachine();\n+        _gson = GsonHelper.getGsonLogger();\n     }\n \n     /*\n@@ -1835,6 +1847,26 @@ private Volume orchestrateDetachVolumeFromVM(long vmId, long volumeId) {\n         }\n     }\n \n+    public void updateMissingRootDiskController(final VMInstanceVO vm, final String rootVolChainInfo) {\n+        if (vm == null || !VirtualMachine.Type.User.equals(vm.getType()) || Strings.isNullOrEmpty(rootVolChainInfo)) {\n+            return;\n+        }\n+        String rootDiskController = null;\n+        try {\n+            final VirtualMachineDiskInfo infoInChain = _gson.fromJson(rootVolChainInfo, VirtualMachineDiskInfo.class);\n+            if (infoInChain != null) {\n+                rootDiskController = infoInChain.getControllerFromDeviceBusName();\n+            }\n+            final UserVmVO userVmVo = _userVmDao.findById(vm.getId());\n+            if ((rootDiskController != null) && (!rootDiskController.isEmpty())) {\n+                _userVmDao.loadDetails(userVmVo);\n+                _userVmMgr.persistDeviceBusInfo(userVmVo, rootDiskController);\n+            }\n+        } catch (JsonParseException e) {\n+            s_logger.debug(\"Error parsing chain info json: \" + e.getMessage());\n+        }\n+    }\n+\n     @DB\n     @Override\n     @ActionEvent(eventType = EventTypes.EVENT_VOLUME_MIGRATE, eventDescription = \"migrating volume\", async = true)\n@@ -1924,6 +1956,7 @@ public Volume migrateVolume(MigrateVolumeCmd cmd) {\n                                 throw new InvalidParameterValueException(\"Cannot migrate ROOT volume of a stopped VM to a storage pool in a different VMware datacenter\");\n                             }\n                         }\n+                        updateMissingRootDiskController(vm, vol.getChainInfo());\n                     }\n                 }\n             }\n@@ -2472,9 +2505,10 @@ private VolumeVO sendAttachVolumeCommand(UserVmVO vm, VolumeVO volumeToAttach, L\n             }\n             _userVmDao.loadDetails(vm);\n             Map<String, String> controllerInfo = new HashMap<String, String>();\n-            controllerInfo.put(VmDetailConstants.ROOK_DISK_CONTROLLER, vm.getDetail(VmDetailConstants.ROOK_DISK_CONTROLLER));\n+            controllerInfo.put(VmDetailConstants.ROOT_DISK_CONTROLLER, vm.getDetail(VmDetailConstants.ROOT_DISK_CONTROLLER));\n             controllerInfo.put(VmDetailConstants.DATA_DISK_CONTROLLER, vm.getDetail(VmDetailConstants.DATA_DISK_CONTROLLER));\n             cmd.setControllerInfo(controllerInfo);\n+            s_logger.debug(\"Attach volume id:\" + volumeToAttach.getId() +  \" on VM id:\" + vm.getId() + \" has controller info:\" + controllerInfo);\n \n             try {\n                 answer = (AttachAnswer)_agentMgr.send(hostId, cmd);",
                "raw_url": "https://github.com/apache/cloudstack/raw/8e4644e413777d0a58edd5405a928df8256fdbd9/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "sha": "fdd237cecaf38be359377203de70216a61bafeb9",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/8e4644e413777d0a58edd5405a928df8256fdbd9/server/src/com/cloud/vm/UserVmManager.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/UserVmManager.java?ref=8e4644e413777d0a58edd5405a928df8256fdbd9",
                "deletions": 0,
                "filename": "server/src/com/cloud/vm/UserVmManager.java",
                "patch": "@@ -114,4 +114,6 @@ UserVm updateVirtualMachine(long id, String displayName, String group, Boolean h\n     public void removeCustomOfferingDetails(long vmId);\n \n     void generateUsageEvent(VirtualMachine vm, boolean isDisplay, String eventType);\n+\n+    void persistDeviceBusInfo(UserVmVO paramUserVmVO, String paramString);\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/8e4644e413777d0a58edd5405a928df8256fdbd9/server/src/com/cloud/vm/UserVmManager.java",
                "sha": "fe0e98c8cd593f67a307918d06c29c2d09d6340d",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/cloudstack/blob/8e4644e413777d0a58edd5405a928df8256fdbd9/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/UserVmManagerImpl.java?ref=8e4644e413777d0a58edd5405a928df8256fdbd9",
                "deletions": 3,
                "filename": "server/src/com/cloud/vm/UserVmManagerImpl.java",
                "patch": "@@ -89,6 +89,7 @@\n import org.apache.cloudstack.storage.datastore.db.TemplateDataStoreDao;\n import org.apache.cloudstack.storage.datastore.db.TemplateDataStoreVO;\n import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.lang.StringUtils;\n import org.apache.log4j.Logger;\n \n import com.cloud.agent.AgentManager;\n@@ -3509,15 +3510,15 @@ public UserVmVO doInTransaction(TransactionStatus status) throws InsufficientCap\n                 if (hypervisorType.equals(HypervisorType.VMware)) {\n                     if (guestOS.getDisplayName().toLowerCase().contains(\"apple mac os\")) {\n                         vm.setDetail(\"smc.present\", \"TRUE\");\n-                        vm.setDetail(VmDetailConstants.ROOK_DISK_CONTROLLER, \"scsi\");\n+                        vm.setDetail(VmDetailConstants.ROOT_DISK_CONTROLLER, \"scsi\");\n                         vm.setDetail(VmDetailConstants.DATA_DISK_CONTROLLER, \"scsi\");\n                         vm.setDetail(\"firmware\", \"efi\");\n                         s_logger.info(\"guestOS is OSX : overwrite root disk controller to scsi, use smc and efi\");\n                     } else {\n                         String controllerSetting = _configDao.getValue(\"vmware.root.disk.controller\");\n                         // Don't override if VM already has root/data disk controller detail\n-                        if (vm.getDetail(VmDetailConstants.ROOK_DISK_CONTROLLER) == null) {\n-                            vm.setDetail(VmDetailConstants.ROOK_DISK_CONTROLLER, controllerSetting);\n+                        if (vm.getDetail(VmDetailConstants.ROOT_DISK_CONTROLLER) == null) {\n+                            vm.setDetail(VmDetailConstants.ROOT_DISK_CONTROLLER, controllerSetting);\n                         }\n                         if (vm.getDetail(VmDetailConstants.DATA_DISK_CONTROLLER) == null) {\n                             if (controllerSetting.equalsIgnoreCase(\"scsi\")) {\n@@ -5455,6 +5456,17 @@ private void encryptAndStorePassword(UserVmVO vm, String password) {\n         }\n     }\n \n+    public void persistDeviceBusInfo(UserVmVO vm, String rootDiskController) {\n+        String existingVmRootDiskController = vm.getDetail(VmDetailConstants.ROOT_DISK_CONTROLLER);\n+        if (StringUtils.isEmpty(existingVmRootDiskController) && !StringUtils.isEmpty(rootDiskController)) {\n+            vm.setDetail(VmDetailConstants.ROOT_DISK_CONTROLLER, rootDiskController);\n+            _vmDao.saveDetails(vm);\n+            if (s_logger.isDebugEnabled()) {\n+                s_logger.debug(\"Persisted device bus information rootDiskController=\" + rootDiskController + \" for vm: \" + vm.getDisplayName());\n+            }\n+        }\n+    }\n+\n     @Override\n     public String getConfigComponentName() {\n         return UserVmManager.class.getSimpleName();",
                "raw_url": "https://github.com/apache/cloudstack/raw/8e4644e413777d0a58edd5405a928df8256fdbd9/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "sha": "832a94881765ccf2455a6daab7a0026b7f88299f",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/cloudstack/blob/8e4644e413777d0a58edd5405a928df8256fdbd9/server/test/com/cloud/storage/VolumeApiServiceImplTest.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/test/com/cloud/storage/VolumeApiServiceImplTest.java?ref=8e4644e413777d0a58edd5405a928df8256fdbd9",
                "deletions": 0,
                "filename": "server/test/com/cloud/storage/VolumeApiServiceImplTest.java",
                "patch": "@@ -18,7 +18,11 @@\n \n import static org.mockito.Matchers.any;\n import static org.mockito.Matchers.anyLong;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n import java.lang.reflect.Field;\n@@ -28,7 +32,10 @@\n \n import javax.inject.Inject;\n \n+import com.cloud.serializer.GsonHelper;\n import com.cloud.user.User;\n+import com.cloud.vm.UserVmManager;\n+import com.cloud.vm.VirtualMachine;\n import junit.framework.Assert;\n import org.apache.cloudstack.api.command.user.volume.CreateVolumeCmd;\n import org.junit.After;\n@@ -101,6 +108,8 @@\n     VolumeService volService;\n     @Mock\n     CreateVolumeCmd createVol;\n+    @Mock\n+    UserVmManager _userVmMgr;\n \n     DetachVolumeCmd detachCmd = new DetachVolumeCmd();\n     Class<?> _detachCmdClass = detachCmd.getClass();\n@@ -118,6 +127,8 @@ public void setup() throws Exception {\n         _svc._jobMgr = _jobMgr;\n         _svc.volFactory = _volFactory;\n         _svc.volService = volService;\n+        _svc._userVmMgr = _userVmMgr;\n+        _svc._gson = GsonHelper.getGsonLogger();\n \n         // mock caller context\n         AccountVO account = new AccountVO(\"admin\", 1L, \"networkDomain\", Account.ACCOUNT_TYPE_NORMAL, \"uuid\");\n@@ -383,6 +394,20 @@ public void testNonEmptyGetVolumeNameFromCmd() {\n         Assert.assertSame(_svc.getVolumeNameFromCommand(createVol), \"abc\");\n     }\n \n+    @Test\n+    public void testUpdateMissingRootDiskControllerWithNullChainInfo() {\n+        _svc.updateMissingRootDiskController(null, null);\n+        verify(_svc._userVmMgr, times(0)).persistDeviceBusInfo(any(UserVmVO.class), anyString());\n+    }\n+\n+    @Test\n+    public void testUpdateMissingRootDiskControllerWithValidChainInfo() {\n+        UserVmVO vm = _svc._userVmDao.findById(1L);\n+        assert vm.getType() == VirtualMachine.Type.User;\n+        _svc.updateMissingRootDiskController(vm, \"{\\\"diskDeviceBusName\\\":\\\"scsi0:0\\\",\\\"diskChain\\\":[\\\"[somedatastore] i-3-VM-somePath/ROOT-1.vmdk\\\"]}\");\n+        verify(_svc._userVmMgr, times(1)).persistDeviceBusInfo(any(UserVmVO.class), eq(\"scsi\"));\n+    }\n+\n     @After\n     public void tearDown() {\n         CallContext.unregister();",
                "raw_url": "https://github.com/apache/cloudstack/raw/8e4644e413777d0a58edd5405a928df8256fdbd9/server/test/com/cloud/storage/VolumeApiServiceImplTest.java",
                "sha": "71f6deddf60c0ba6b6a1cb2ac869b78cf6ce9c75",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/cloudstack/blob/8e4644e413777d0a58edd5405a928df8256fdbd9/server/test/com/cloud/vm/UserVmManagerTest.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/test/com/cloud/vm/UserVmManagerTest.java?ref=8e4644e413777d0a58edd5405a928df8256fdbd9",
                "deletions": 0,
                "filename": "server/test/com/cloud/vm/UserVmManagerTest.java",
                "patch": "@@ -928,4 +928,25 @@ public void testUpdateVmNicIpFailure3() throws Exception {\n             CallContext.unregister();\n         }\n     }\n+\n+    @Test\n+    public void testPersistDeviceBusInfoWithNullController() {\n+        when(_vmMock.getDetail(any(String.class))).thenReturn(null);\n+        _userVmMgr.persistDeviceBusInfo(_vmMock, null);\n+        verify(_vmDao, times(0)).saveDetails(any(UserVmVO.class));\n+    }\n+\n+    @Test\n+    public void testPersistDeviceBusInfoWithEmptyController() {\n+        when(_vmMock.getDetail(any(String.class))).thenReturn(\"\");\n+        _userVmMgr.persistDeviceBusInfo(_vmMock, \"\");\n+        verify(_vmDao, times(0)).saveDetails(any(UserVmVO.class));\n+    }\n+\n+    @Test\n+    public void testPersistDeviceBusInfo() {\n+        when(_vmMock.getDetail(any(String.class))).thenReturn(null);\n+        _userVmMgr.persistDeviceBusInfo(_vmMock, \"lsilogic\");\n+        verify(_vmDao, times(1)).saveDetails(any(UserVmVO.class));\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/8e4644e413777d0a58edd5405a928df8256fdbd9/server/test/com/cloud/vm/UserVmManagerTest.java",
                "sha": "637a30922190c69d90a99b57c8d73229aaf8ff7a",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cloudstack/blob/8e4644e413777d0a58edd5405a928df8256fdbd9/utils/src/main/java/org/apache/cloudstack/utils/volume/VirtualMachineDiskInfo.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/main/java/org/apache/cloudstack/utils/volume/VirtualMachineDiskInfo.java?ref=8e4644e413777d0a58edd5405a928df8256fdbd9",
                "deletions": 6,
                "filename": "utils/src/main/java/org/apache/cloudstack/utils/volume/VirtualMachineDiskInfo.java",
                "patch": "@@ -15,14 +15,13 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-package com.cloud.hypervisor.vmware.mo;\n+package org.apache.cloudstack.utils.volume;\n \n-public class VirtualMachineDiskInfo {\n-    String diskDeviceBusName;\n-    String[] diskChain;\n+import org.apache.commons.lang.StringUtils;\n \n-    public VirtualMachineDiskInfo() {\n-    }\n+public class VirtualMachineDiskInfo {\n+    private String diskDeviceBusName;\n+    private String[] diskChain;\n \n     public String getDiskDeviceBusName() {\n         return diskDeviceBusName;\n@@ -39,4 +38,11 @@ public void setDiskDeviceBusName(String diskDeviceBusName) {\n     public void setDiskChain(String[] diskChain) {\n         this.diskChain = diskChain;\n     }\n+\n+    public String getControllerFromDeviceBusName() {\n+        if (StringUtils.isEmpty(diskDeviceBusName) || !diskDeviceBusName.contains(\":\")) {\n+            return null;\n+        }\n+        return diskDeviceBusName.substring(0, diskDeviceBusName.indexOf(\":\") - 1);\n+    }\n }",
                "previous_filename": "vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineDiskInfo.java",
                "raw_url": "https://github.com/apache/cloudstack/raw/8e4644e413777d0a58edd5405a928df8256fdbd9/utils/src/main/java/org/apache/cloudstack/utils/volume/VirtualMachineDiskInfo.java",
                "sha": "c158f10d3a392df789838acbeab3ad4a5a754fa6",
                "status": "renamed"
            },
            {
                "additions": 55,
                "blob_url": "https://github.com/apache/cloudstack/blob/8e4644e413777d0a58edd5405a928df8256fdbd9/utils/src/test/java/org/apache/cloudstack/utils/volume/VirtualMachineDiskInfoTest.java",
                "changes": 55,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/test/java/org/apache/cloudstack/utils/volume/VirtualMachineDiskInfoTest.java?ref=8e4644e413777d0a58edd5405a928df8256fdbd9",
                "deletions": 0,
                "filename": "utils/src/test/java/org/apache/cloudstack/utils/volume/VirtualMachineDiskInfoTest.java",
                "patch": "@@ -0,0 +1,55 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+\n+package org.apache.cloudstack.utils.volume;\n+\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonParseException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class VirtualMachineDiskInfoTest {\n+\n+    @Test\n+    public void testGetControllerFromDeviceBusName() {\n+        VirtualMachineDiskInfo vmDiskInfo = new VirtualMachineDiskInfo();\n+        vmDiskInfo.setDiskDeviceBusName(\"scsi0:0\");\n+        String[] diskChain = new String[]{\"[somedatastore] i-3-VM-somePath/ROOT-1.vmdk\"};\n+        vmDiskInfo.setDiskChain(diskChain);\n+        Assert.assertEquals(vmDiskInfo.getControllerFromDeviceBusName(), \"scsi\");\n+        Assert.assertArrayEquals(vmDiskInfo.getDiskChain(), diskChain);\n+    }\n+\n+    @Test\n+    public void testGetControllerFromDeviceBusNameWithInvalidBusName() {\n+        VirtualMachineDiskInfo vmDiskInfo = new VirtualMachineDiskInfo();\n+        vmDiskInfo.setDiskDeviceBusName(\"scsi0\");\n+        Assert.assertEquals(vmDiskInfo.getControllerFromDeviceBusName(), null);\n+    }\n+\n+    @Test\n+    public void testGSonDeserialization() throws JsonParseException {\n+        VirtualMachineDiskInfo infoInChain = new GsonBuilder().create().fromJson(\"{\\\"diskDeviceBusName\\\":\\\"scsi0:0\\\",\\\"diskChain\\\":[\\\"[somedatastore] i-3-VM-somePath/ROOT-1.vmdk\\\"]}\", VirtualMachineDiskInfo.class);\n+        Assert.assertEquals(infoInChain.getDiskDeviceBusName(), \"scsi0:0\");\n+        Assert.assertEquals(infoInChain.getControllerFromDeviceBusName(), \"scsi\");\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/8e4644e413777d0a58edd5405a928df8256fdbd9/utils/src/test/java/org/apache/cloudstack/utils/volume/VirtualMachineDiskInfoTest.java",
                "sha": "8b858d4c9ab6afce8f6c00ec99f734543bc57016",
                "status": "added"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/8e4644e413777d0a58edd5405a928df8256fdbd9/vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineDiskInfoBuilder.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineDiskInfoBuilder.java?ref=8e4644e413777d0a58edd5405a928df8256fdbd9",
                "deletions": 0,
                "filename": "vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineDiskInfoBuilder.java",
                "patch": "@@ -17,6 +17,8 @@\n \n package com.cloud.hypervisor.vmware.mo;\n \n+import org.apache.cloudstack.utils.volume.VirtualMachineDiskInfo;\n+\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;",
                "raw_url": "https://github.com/apache/cloudstack/raw/8e4644e413777d0a58edd5405a928df8256fdbd9/vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineDiskInfoBuilder.java",
                "sha": "3b310fb586e34b88212d7f222b5ccdd863efe3d7",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/8e4644e413777d0a58edd5405a928df8256fdbd9/vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java?ref=8e4644e413777d0a58edd5405a928df8256fdbd9",
                "deletions": 1,
                "filename": "vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java",
                "patch": "@@ -2137,7 +2137,7 @@ public int getScsiDiskControllerKey(String diskController) throws Exception {\n         }\n \n         assert (false);\n-        throw new Exception(diskController + \" Controller Not Found\");\n+        throw new IllegalStateException(\"Scsi disk controller of type \" + diskController + \" not found among configured devices.\");\n     }\n \n     public int getScsiDiskControllerKeyNoException(String diskController) throws Exception {",
                "raw_url": "https://github.com/apache/cloudstack/raw/8e4644e413777d0a58edd5405a928df8256fdbd9/vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java",
                "sha": "8b9d4e73beaa1dedcf10ecd09765a687658b0d06",
                "status": "modified"
            }
        ],
        "message": "vmware: improve support for disks\n\n- Improve disk chain usage while attaching, migrating disks\n- Gets root disk controller based diskDeviceBusName from volume's chain info\n- Refactor and move VirtualMachineDiskInfo to cloud-utils\n- Allows mixing of scsi controller types\n- Fixes a NPE case with map passed as null, for example in case of detach volume\n  command\n- Use a osdefault translator that allow use of recent os types added (enums of\n  which) are not available in the sdk\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/6f703c4cdc32f4edbf95a5c8f0959fab9beea01b",
        "patched_files": [
            "pom.xml",
            "VmDetailConstants.java",
            "VolumeApiServiceImpl.java",
            "UserVmManager.java",
            "VmwareResource.java",
            "VirtualMachineDiskInfo.java",
            "VmwareStorageProcessor.java",
            "VirtualMachineDiskInfoBuilder.java",
            "VirtualMachineMO.java",
            "UserVmManagerImpl.java",
            "VMwareGuru.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineDiskInfoTest.java",
            "UserVmManagerTest.java",
            "VmwareResourceTest.java",
            "VolumeApiServiceImplTest.java"
        ]
    },
    "cloudstack_8f9f39f": {
        "bug_id": "cloudstack_8f9f39f",
        "commit": "https://github.com/apache/cloudstack/commit/8f9f39fa39867467d73b58cd4b7de118cd8fa47f",
        "file": [
            {
                "additions": 808,
                "blob_url": "https://github.com/apache/cloudstack/blob/8f9f39fa39867467d73b58cd4b7de118cd8fa47f/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 1591,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=8f9f39fa39867467d73b58cd4b7de118cd8fa47f",
                "deletions": 783,
                "filename": "engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "raw_url": "https://github.com/apache/cloudstack/raw/8f9f39fa39867467d73b58cd4b7de118cd8fa47f/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "d6b2da5f45e23aba5915f643a7f014dcbeeec35f",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/cloudstack/blob/8f9f39fa39867467d73b58cd4b7de118cd8fa47f/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java?ref=8f9f39fa39867467d73b58cd4b7de118cd8fa47f",
                "deletions": 15,
                "filename": "server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "patch": "@@ -169,13 +169,13 @@\n import com.cloud.network.router.VirtualRouter.Role;\n import com.cloud.network.rules.FirewallRule;\n import com.cloud.network.rules.FirewallRule.Purpose;\n+import com.cloud.network.rules.FirewallRuleVO;\n import com.cloud.network.rules.LoadBalancerContainer.Scheme;\n import com.cloud.network.rules.PortForwardingRule;\n import com.cloud.network.rules.RulesManager;\n import com.cloud.network.rules.StaticNat;\n import com.cloud.network.rules.StaticNatImpl;\n import com.cloud.network.rules.StaticNatRule;\n-import com.cloud.network.rules.FirewallRuleVO;\n import com.cloud.network.rules.dao.PortForwardingRulesDao;\n import com.cloud.network.vpn.Site2SiteVpnManager;\n import com.cloud.offering.NetworkOffering;\n@@ -745,10 +745,14 @@ protected void runInContext() {\n                         final List<? extends Nic> routerNics = _nicDao.listByVmId(router.getId());\n                         for (final Nic routerNic : routerNics) {\n                             final Network network = _networkModel.getNetwork(routerNic.getNetworkId());\n-                            // Send network usage command for public nic in VPC\n-                            // VR\n-                            // Send network usage command for isolated guest nic\n-                            // of non VPC VR\n+                            // Send network usage command for public nic in VPC VR\n+                            // Send network usage command for isolated guest nic of non) VPC VR\n+\n+                            //[TODO] Avoiding the NPE now, but I have to find out what is going on with the network. - Wilder Rodrigues\n+                            if (network == null) {\n+                                s_logger.error(\"Could not find a network with ID => \" + routerNic.getNetworkId() + \". It might be a problem!\");\n+                                continue;\n+                            }\n                             if (forVpc && network.getTrafficType() == TrafficType.Public || !forVpc && network.getTrafficType() == TrafficType.Guest\n                                     && network.getGuestType() == Network.GuestType.Isolated) {\n                                 final NetworkUsageCommand usageCmd = new NetworkUsageCommand(privateIP, router.getHostName(), forVpc, routerNic.getIp4Address());\n@@ -1917,23 +1921,23 @@ protected void finalizeNetworkRulesForNetwork(final Commands cmds, final DomainR\n         }\n     }\n \n-    private void createDefaultEgressFirewallRule(List<FirewallRule> rules, long networkId) {\n+    private void createDefaultEgressFirewallRule(final List<FirewallRule> rules, final long networkId) {\n         String systemRule = null;\n \n         Boolean defaultEgressPolicy = false;\n-        NetworkVO network = _networkDao.findById(networkId);\n-        NetworkOfferingVO offering = _networkOfferingDao.findById(network.getNetworkOfferingId());\n+        final NetworkVO network = _networkDao.findById(networkId);\n+        final NetworkOfferingVO offering = _networkOfferingDao.findById(network.getNetworkOfferingId());\n         defaultEgressPolicy = offering.getEgressDefaultPolicy();\n \n \n         // construct rule when egress policy is true. In true case for VR we default allow rule need to be added\n         if (!defaultEgressPolicy) {\n             systemRule = String.valueOf(FirewallRule.FirewallRuleType.System);\n \n-            List<String> sourceCidr = new ArrayList<String>();\n+            final List<String> sourceCidr = new ArrayList<String>();\n \n             sourceCidr.add(NetUtils.ALL_CIDRS);\n-            FirewallRule rule = new FirewallRuleVO(null, null, null, null, \"all\", networkId, network.getAccountId(), network.getDomainId(), Purpose.Firewall, sourceCidr,\n+            final FirewallRule rule = new FirewallRuleVO(null, null, null, null, \"all\", networkId, network.getAccountId(), network.getDomainId(), Purpose.Firewall, sourceCidr,\n                     null, null, null, FirewallRule.TrafficType.Egress, FirewallRule.FirewallRuleType.System);\n \n             rules.add(rule);\n@@ -2023,6 +2027,7 @@ public boolean finalizeStart(final VirtualMachineProfile profile, final long hos\n                 final String errorDetails = \"Details: \" + answer.getDetails() + \" \" + answer.toString();\n                 // add alerts for the failed commands\n                 _alertMgr.sendAlert(AlertService.AlertType.ALERT_TYPE_DOMAIN_ROUTER, router.getDataCenterId(), router.getPodIdToDeployIn(), errorMessage, errorDetails);\n+                s_logger.error(answer.getDetails());\n                 s_logger.warn(errorMessage);\n                 // Stop the router if any of the commands failed\n                 return false;\n@@ -2590,20 +2595,20 @@ public boolean postStateTransitionEvent(final StateMachine2.Transition<State, Vi\n             if (vo.getType() == VirtualMachine.Type.DomainRouter) {\n                 // opaque -> <hostId, powerHostId>\n                 if (opaque != null && opaque instanceof Pair<?, ?>) {\n-                    Pair<?, ?> pair = (Pair<?, ?>)opaque;\n-                    Object first = pair.first();\n-                    Object second = pair.second();\n+                    final Pair<?, ?> pair = (Pair<?, ?>)opaque;\n+                    final Object first = pair.first();\n+                    final Object second = pair.second();\n                     // powerHostId cannot be null in case of out-of-band VM movement\n                     if (second != null && second instanceof Long) {\n-                        Long powerHostId = (Long)second;\n+                        final Long powerHostId = (Long)second;\n                         Long hostId = null;\n                         if (first != null && first instanceof Long) {\n                             hostId = (Long)first;\n                         }\n                         // The following scenarios are due to out-of-band VM movement\n                         // 1. If VM is in stopped state in CS due to 'PowerMissing' report from old host (hostId is null) and then there is a 'PowerOn' report from new host\n                         // 2. If VM is in running state in CS and there is a 'PowerOn' report from new host\n-                        if (hostId == null || (hostId.longValue() != powerHostId.longValue())) {\n+                        if (hostId == null || hostId.longValue() != powerHostId.longValue()) {\n                             s_logger.info(\"Schedule a router reboot task as router \" + vo.getId() + \" is powered-on out-of-band, need to reboot to refresh network rules\");\n                             _executor.schedule(new RebootTask(vo.getId()), 1000, TimeUnit.MICROSECONDS);\n                         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/8f9f39fa39867467d73b58cd4b7de118cd8fa47f/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "sha": "37abd7182a7e5ffb1fd0959154e6e70a86b6582a",
                "status": "modified"
            }
        ],
        "message": "[TK-3119] Fix NPEs and improve exception handling + error messages",
        "parent": "https://github.com/apache/cloudstack/commit/406af7e855f39adb4cb72486575ac90ecf57c873",
        "patched_files": [
            "VirtualNetworkApplianceManagerImpl.java",
            "VirtualMachineManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java",
            "VirtualNetworkApplianceManagerImplTest.java"
        ]
    },
    "cloudstack_91bfedd": {
        "bug_id": "cloudstack_91bfedd",
        "commit": "https://github.com/apache/cloudstack/commit/91bfedd2c7ed7db86a5b1167bb955977da0f1817",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/91bfedd2c7ed7db86a5b1167bb955977da0f1817/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=91bfedd2c7ed7db86a5b1167bb955977da0f1817",
                "deletions": 4,
                "filename": "engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -744,14 +744,17 @@ protected boolean checkWorkItems(final VMInstanceVO vm, final State state) throw\n \n     protected <T extends VMInstanceVO> boolean changeState(final T vm, final Event event, final Long hostId, final ItWorkVO work, final Step step) throws NoTransitionException {\n         // FIXME: We should do this better.\n-        final Step previousStep = work.getStep();\n-        _workDao.updateStep(work, step);\n+        Step previousStep = null;\n+        if (work != null) {\n+            previousStep = work.getStep();\n+            _workDao.updateStep(work, step);\n+        }\n         boolean result = false;\n         try {\n             result = stateTransitTo(vm, event, hostId);\n             return result;\n         } finally {\n-            if (!result) {\n+            if (!result && work != null) {\n                 _workDao.updateStep(work, previousStep);\n             }\n         }\n@@ -1507,12 +1510,13 @@ private void advanceStop(final VMInstanceVO vm, final boolean cleanUpEvenIfUnabl\n             if (doCleanup) {\n                 if (cleanup(vmGuru, new VirtualMachineProfileImpl(vm), work, Event.StopRequested, cleanUpEvenIfUnableToStop)) {\n                     try {\n-                        if (s_logger.isDebugEnabled()) {\n+                        if (s_logger.isDebugEnabled() && work != null) {\n                             s_logger.debug(\"Updating work item to Done, id:\" + work.getId());\n                         }\n                         if (!changeState(vm, Event.AgentReportStopped, null, work, Step.Done)) {\n                             throw new CloudRuntimeException(\"Unable to stop \" + vm);\n                         }\n+\n                     } catch (final NoTransitionException e) {\n                         s_logger.warn(\"Unable to cleanup \" + vm);\n                         throw new CloudRuntimeException(\"Unable to stop \" + vm, e);",
                "raw_url": "https://github.com/apache/cloudstack/raw/91bfedd2c7ed7db86a5b1167bb955977da0f1817/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "03a37987752f51590c78c40fa7a65f5052aa7fa1",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-9796 - Fix NPE in VirtualMachineManagerImpl.java\n\nThis checks the work variable for NULL in all cases where it is\nused.  Fixes CLOUDSTACK-9796.",
        "parent": "https://github.com/apache/cloudstack/commit/e860249e4f0cfc8b93b46f870efa2eeace8bb703",
        "patched_files": [
            "VirtualMachineManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_95c7ffb": {
        "bug_id": "cloudstack_95c7ffb",
        "commit": "https://github.com/apache/cloudstack/commit/95c7ffbd46f9f674b8813a7b992c17019eb00137",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/95c7ffbd46f9f674b8813a7b992c17019eb00137/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/CitrixResourceBase.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/CitrixResourceBase.java?ref=95c7ffbd46f9f674b8813a7b992c17019eb00137",
                "deletions": 6,
                "filename": "plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/CitrixResourceBase.java",
                "patch": "@@ -6241,11 +6241,11 @@ private long getVMSnapshotChainSize(Connection conn, VolumeObjectTO volumeTo, St\n                     // add size of snapshot vdi node, usually this only contains meta data\n                     size = size + vdi.getPhysicalUtilisation(conn);\n                     // add size of snapshot vdi parent, this contains data\n-                    if (parentVDI != null)\n+                    if (!isRefNull(parentVDI))\n                         size = size + parentVDI.getPhysicalUtilisation(conn).longValue();\n                 }\n             } catch (Exception e) {\n-                s_logger.debug(\"Exception occurs when calculate \" + \"snapshot capacity for volumes: \" + e.getMessage());\n+                s_logger.debug(\"Exception occurs when calculate snapshot capacity for volumes: due to \" + e.toString());\n                 continue;\n             }\n         }\n@@ -6257,13 +6257,17 @@ private long getVMSnapshotChainSize(Connection conn, VolumeObjectTO volumeTo, St\n                     try {\n                         String vName = vmr.getNameLabel(conn);\n                         if (vName != null && vName.contains(vmName) && vmr.getIsASnapshot(conn)) {\n-\n                             VDI memoryVDI = vmr.getSuspendVDI(conn);\n-                            size = size + memoryVDI.getParent(conn).getPhysicalUtilisation(conn);\n-                            size = size + memoryVDI.getPhysicalUtilisation(conn);\n+                            if (!isRefNull(memoryVDI)) {\n+                                size = size + memoryVDI.getPhysicalUtilisation(conn);\n+                                VDI pMemoryVDI = memoryVDI.getParent(conn);\n+                                if (!isRefNull(pMemoryVDI)) {\n+                                    size = size + pMemoryVDI.getPhysicalUtilisation(conn);\n+                                }\n+                            }\n                         }\n                     } catch (Exception e) {\n-                        s_logger.debug(\"Exception occurs when calculate \" + \"snapshot capacity for memory: \" + e.getMessage());\n+                        s_logger.debug(\"Exception occurs when calculate snapshot capacity for memory: due to \" + e.toString());\n                         continue;\n                     }\n                 }",
                "raw_url": "https://github.com/apache/cloudstack/raw/95c7ffbd46f9f674b8813a7b992c17019eb00137/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/CitrixResourceBase.java",
                "sha": "b669181932eaa4df9a713125b11fab0c63164a18",
                "status": "modified"
            }
        ],
        "message": "fixed NPE on calculating vm snasphot volume size",
        "parent": "https://github.com/apache/cloudstack/commit/e717450e0edd2406c4c3fc7341b3669c4390d507",
        "patched_files": [
            "CitrixResourceBase.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "CitrixResourceBaseTest.java"
        ]
    },
    "cloudstack_95fbe7c": {
        "bug_id": "cloudstack_95fbe7c",
        "commit": "https://github.com/apache/cloudstack/commit/95fbe7c55b44907599402173d8e839dc3c95353d",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/95fbe7c55b44907599402173d8e839dc3c95353d/engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/AncientDataMotionStrategy.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/AncientDataMotionStrategy.java?ref=95fbe7c55b44907599402173d8e839dc3c95353d",
                "deletions": 1,
                "filename": "engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/AncientDataMotionStrategy.java",
                "patch": "@@ -564,7 +564,7 @@ protected Answer copySnapshot(DataObject srcData, DataObject destData) {\n             }\n             return answer;\n         } catch (Exception e) {\n-            s_logger.debug(\"copy snasphot failed: \" + e.toString());\n+            s_logger.debug(\"copy snasphot failed: \", e);\n             if (cacheData != null) {\n                 cacheMgr.deleteCacheObject(cacheData);\n             }",
                "raw_url": "https://github.com/apache/cloudstack/raw/95fbe7c55b44907599402173d8e839dc3c95353d/engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/AncientDataMotionStrategy.java",
                "sha": "bc49a53db5816451457e9925f3b91559c284b659",
                "status": "modified"
            }
        ],
        "message": "datamotion: snapshot failure diagnostics unhidden (#3666)\n\nDiagnostics are hard when a snapshot fails if a null pointer occurs. This is because no stack trace or location of the error is logged. I.E.\r\n2019-10-21 12:55:00,056 DEBUG [o.a.c.s.m.AncientDataMotionStrategy] (Work-Job-Executor-131:ctx-80420156 job-10033827/job-10033828 ctx-4864e2f5) (logid:21454564) copy snasphot failed: java.lang.NullPointerException",
        "parent": "https://github.com/apache/cloudstack/commit/41275ab0ee86160a548845f56cd10f5a58183b75",
        "patched_files": [
            "AncientDataMotionStrategy.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "AncientDataMotionStrategyTest.java"
        ]
    },
    "cloudstack_983dee7": {
        "bug_id": "cloudstack_983dee7",
        "commit": "https://github.com/apache/cloudstack/commit/983dee7f20bdcfb27cab20a46905ed58a558cb73",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/983dee7f20bdcfb27cab20a46905ed58a558cb73/framework/quota/src/org/apache/cloudstack/quota/QuotaAlertManagerImpl.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/QuotaAlertManagerImpl.java?ref=983dee7f20bdcfb27cab20a46905ed58a558cb73",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/QuotaAlertManagerImpl.java",
                "patch": "@@ -153,6 +153,7 @@ public void checkAndSendQuotaAlertEmails() {\n             BigDecimal thresholdBalance = quotaAccount.getQuotaMinBalance();\n             if (accountBalance != null) {\n                 AccountVO account = _accountDao.findById(quotaAccount.getId());\n+                if (account == null) continue; // the account is removed\n                 if (s_logger.isDebugEnabled()) {\n                     s_logger.debug(\"checkAndSendQuotaAlertEmails: Check id=\" + account.getId() + \" bal=\" + accountBalance + \", alertDate=\" + alertDate + \", lockable=\" + lockable);\n                 }",
                "raw_url": "https://github.com/apache/cloudstack/raw/983dee7f20bdcfb27cab20a46905ed58a558cb73/framework/quota/src/org/apache/cloudstack/quota/QuotaAlertManagerImpl.java",
                "sha": "a25ed04282507ba78c43df9dbf2f6075ae7a22d8",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/983dee7f20bdcfb27cab20a46905ed58a558cb73/framework/quota/src/org/apache/cloudstack/quota/QuotaManagerImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/QuotaManagerImpl.java?ref=983dee7f20bdcfb27cab20a46905ed58a558cb73",
                "deletions": 3,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/QuotaManagerImpl.java",
                "patch": "@@ -358,10 +358,11 @@ public QuotaUsageVO updateQuotaDiskUsage(UsageVO usageRecord, final BigDecimal a\n         BigDecimal rawusage;\n         // get service offering details\n         ServiceOfferingVO serviceoffering = _serviceOfferingDao.findServiceOffering(usageRecord.getVmInstanceId(), usageRecord.getOfferingId());\n+        if (serviceoffering == null) return quotalist;\n         rawusage = new BigDecimal(usageRecord.getRawUsage());\n \n         QuotaTariffVO tariff = _quotaTariffDao.findTariffPlanByUsageType(QuotaTypes.CPU_NUMBER, usageRecord.getEndDate());\n-        if (tariff != null && tariff.getCurrencyValue().compareTo(BigDecimal.ZERO) != 0) {\n+        if (tariff != null && tariff.getCurrencyValue().compareTo(BigDecimal.ZERO) != 0 && serviceoffering.getCpu() != null) {\n             BigDecimal cpu = new BigDecimal(serviceoffering.getCpu());\n             onehourcostpercpu = tariff.getCurrencyValue().multiply(aggregationRatio);\n             cpuquotausgage = rawusage.multiply(onehourcostpercpu).multiply(cpu);\n@@ -371,7 +372,7 @@ public QuotaUsageVO updateQuotaDiskUsage(UsageVO usageRecord, final BigDecimal a\n             quotalist.add(quota_usage);\n         }\n         tariff = _quotaTariffDao.findTariffPlanByUsageType(QuotaTypes.CPU_CLOCK_RATE, usageRecord.getEndDate());\n-        if (tariff != null && tariff.getCurrencyValue().compareTo(BigDecimal.ZERO) != 0) {\n+        if (tariff != null && tariff.getCurrencyValue().compareTo(BigDecimal.ZERO) != 0 && serviceoffering.getSpeed() != null) {\n             BigDecimal speed = new BigDecimal(serviceoffering.getSpeed() / 100.00);\n             onehourcostper100mhz = tariff.getCurrencyValue().multiply(aggregationRatio);\n             speedquotausage = rawusage.multiply(onehourcostper100mhz).multiply(speed);\n@@ -381,7 +382,7 @@ public QuotaUsageVO updateQuotaDiskUsage(UsageVO usageRecord, final BigDecimal a\n             quotalist.add(quota_usage);\n         }\n         tariff = _quotaTariffDao.findTariffPlanByUsageType(QuotaTypes.MEMORY, usageRecord.getEndDate());\n-        if (tariff != null && tariff.getCurrencyValue().compareTo(BigDecimal.ZERO) != 0) {\n+        if (tariff != null && tariff.getCurrencyValue().compareTo(BigDecimal.ZERO) != 0 && serviceoffering.getRamSize() != null) {\n             BigDecimal memory = new BigDecimal(serviceoffering.getRamSize());\n             onehourcostper1mb = tariff.getCurrencyValue().multiply(aggregationRatio);\n             memoryquotausage = rawusage.multiply(onehourcostper1mb).multiply(memory);",
                "raw_url": "https://github.com/apache/cloudstack/raw/983dee7f20bdcfb27cab20a46905ed58a558cb73/framework/quota/src/org/apache/cloudstack/quota/QuotaManagerImpl.java",
                "sha": "f4012b134cbf4a8646515a808fab41810241c93c",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/983dee7f20bdcfb27cab20a46905ed58a558cb73/framework/quota/src/org/apache/cloudstack/quota/QuotaStatementImpl.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/QuotaStatementImpl.java?ref=983dee7f20bdcfb27cab20a46905ed58a558cb73",
                "deletions": 8,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/QuotaStatementImpl.java",
                "patch": "@@ -122,15 +122,17 @@ public void sendStatement() {\n             Date lastStatementDate = quotaAccount.getLastStatementDate();\n             if (interval != null) {\n                 AccountVO account = _accountDao.findById(quotaAccount.getId());\n-                if (lastStatementDate == null || getDifferenceDays(lastStatementDate, new Date()) >= s_LAST_STATEMENT_SENT_DAYS + 1) {\n-                    BigDecimal quotaUsage = _quotaUsage.findTotalQuotaUsage(account.getAccountId(), account.getDomainId(), null, interval[0].getTime(), interval[1].getTime());\n-                    s_logger.info(\"For account=\" + quotaAccount.getId() + \", quota used = \" + quotaUsage);\n-                    // send statement\n-                    deferredQuotaEmailList.add(new DeferredQuotaEmail(account, quotaAccount, quotaUsage, QuotaConfig.QuotaEmailTemplateTypes.QUOTA_STATEMENT));\n-                } else {\n-                    if (s_logger.isDebugEnabled()) {\n-                        s_logger.debug(\"For \" + quotaAccount.getId() + \" the statement has been sent recently\");\n+                if (account != null) {\n+                    if (lastStatementDate == null || getDifferenceDays(lastStatementDate, new Date()) >= s_LAST_STATEMENT_SENT_DAYS + 1) {\n+                        BigDecimal quotaUsage = _quotaUsage.findTotalQuotaUsage(account.getAccountId(), account.getDomainId(), null, interval[0].getTime(), interval[1].getTime());\n+                        s_logger.info(\"For account=\" + quotaAccount.getId() + \", quota used = \" + quotaUsage);\n+                        // send statement\n+                        deferredQuotaEmailList.add(new DeferredQuotaEmail(account, quotaAccount, quotaUsage, QuotaConfig.QuotaEmailTemplateTypes.QUOTA_STATEMENT));\n+                    } else {\n+                        if (s_logger.isDebugEnabled()) {\n+                            s_logger.debug(\"For \" + quotaAccount.getId() + \" the statement has been sent recently\");\n \n+                        }\n                     }\n                 }\n             } else if (lastStatementDate != null) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/983dee7f20bdcfb27cab20a46905ed58a558cb73/framework/quota/src/org/apache/cloudstack/quota/QuotaStatementImpl.java",
                "sha": "dde30697213b1fa62c2f7330bacf75232dc67016",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/983dee7f20bdcfb27cab20a46905ed58a558cb73/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaSummaryCmd.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaSummaryCmd.java?ref=983dee7f20bdcfb27cab20a46905ed58a558cb73",
                "deletions": 1,
                "filename": "plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaSummaryCmd.java",
                "patch": "@@ -59,7 +59,7 @@ public QuotaSummaryCmd() {\n     public void execute() {\n         Account caller = CallContext.current().getCallingAccount();\n         List<QuotaSummaryResponse> responses;\n-        if (caller.getAccountId() <= 2) { //non root admin or system\n+        if (caller.getType() == Account.ACCOUNT_TYPE_ADMIN) { //admin account\n             if (getAccountName() != null && getDomainId() != null)\n                 responses = _responseBuilder.createQuotaSummaryResponse(caller.getAccountName(), caller.getDomainId());\n             else",
                "raw_url": "https://github.com/apache/cloudstack/raw/983dee7f20bdcfb27cab20a46905ed58a558cb73/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaSummaryCmd.java",
                "sha": "88466e08c6b93aa6af16e246aee51e48f47e0c83",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/983dee7f20bdcfb27cab20a46905ed58a558cb73/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaResponseBuilderImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaResponseBuilderImpl.java?ref=983dee7f20bdcfb27cab20a46905ed58a558cb73",
                "deletions": 1,
                "filename": "plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaResponseBuilderImpl.java",
                "patch": "@@ -138,6 +138,7 @@ public QuotaTariffResponse createQuotaTariffResponse(QuotaTariffVO tariff) {\n         } else {\n             for (final QuotaAccountVO quotaAccount : _quotaAccountDao.listAllQuotaAccount()) {\n                 AccountVO account = _accountDao.findById(quotaAccount.getId());\n+                if (account == null) continue;\n                 QuotaSummaryResponse qr = getQuotaSummaryResponse(account);\n                 result.add(qr);\n             }\n@@ -167,7 +168,7 @@ private QuotaSummaryResponse getQuotaSummaryResponse(final Account account) {\n             qr.setObjectName(\"summary\");\n             return qr;\n         } else {\n-            throw new InvalidParameterValueException(\"Quota summary response for an account requires a valid account.\");\n+            return new QuotaSummaryResponse();\n         }\n     }\n \n@@ -396,6 +397,9 @@ public QuotaCreditsResponse addQuotaCredits(Long accountId, Long domainId, Doubl\n         QuotaCreditsVO result = _quotaCreditsDao.saveCredits(credits);\n \n         final AccountVO account = _accountDao.findById(accountId);\n+        if (account == null) {\n+            throw new InvalidParameterValueException(\"Account does not exist with account id \" + accountId);\n+        }\n         final boolean lockAccountEnforcement = \"true\".equalsIgnoreCase(QuotaConfig.QuotaEnableEnforcement.value());\n         final BigDecimal currentAccountBalance = _quotaBalanceDao.lastQuotaBalance(accountId, domainId, startOfNextDay(new Date(despositedOn.getTime())));\n         if (s_logger.isDebugEnabled()) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/983dee7f20bdcfb27cab20a46905ed58a558cb73/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaResponseBuilderImpl.java",
                "sha": "59c53ecb5d1a6d258d94d249ada7215159132aab",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/983dee7f20bdcfb27cab20a46905ed58a558cb73/ui/plugins/quota/quota.js",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/ui/plugins/quota/quota.js?ref=983dee7f20bdcfb27cab20a46905ed58a558cb73",
                "deletions": 7,
                "filename": "ui/plugins/quota/quota.js",
                "patch": "@@ -329,13 +329,6 @@\n                           });\n                       },\n                       detailView: {\n-                          viewAll: [{\n-                              path: 'quota.quotastatement',\n-                              label: 'label.quota.statement.quota'\n-                          },{\n-                              path: 'quota.balancestatement',\n-                              label: 'label.quota.statement.balance'\n-                          }],\n                           actions: {\n                              add: {\n                                 label: 'label.quota.add.credits',",
                "raw_url": "https://github.com/apache/cloudstack/raw/983dee7f20bdcfb27cab20a46905ed58a558cb73/ui/plugins/quota/quota.js",
                "sha": "d9f61b2371c17cd87b102ffbf564eedf8b46ba9e",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-9174: A deleted account results in NPE\n\nWhen an account is deleted from cloudstack for which quota is still\nbeing calculated and if the quota reaches minimum threshold then\nquota service will try to alert the user. This results in NPE and is\nfixed by excluding such accounts from alerting and other quota related\nmechanisms.\n\nQuota service: Fix check for admin account",
        "parent": "https://github.com/apache/cloudstack/commit/94a14485f76e6c6a5416f7840a6e857bdc38cfce",
        "patched_files": [
            "QuotaAlertManagerImpl.java",
            "QuotaResponseBuilderImpl.java",
            "quota.js",
            "QuotaManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "QuotaAlertManagerImplTest.java",
            "QuotaResponseBuilderImplTest.java",
            "QuotaManagerImplTest.java"
        ]
    },
    "cloudstack_987fcbd": {
        "bug_id": "cloudstack_987fcbd",
        "commit": "https://github.com/apache/cloudstack/commit/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/api/src/org/apache/cloudstack/api/ApiConstants.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/ApiConstants.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/api/ApiConstants.java",
                "patch": "@@ -273,6 +273,7 @@\n     public static final String VIRTUAL_MACHINE_ID_IP = \"vmidipmap\";\n     public static final String VIRTUAL_MACHINE_COUNT = \"virtualmachinecount\";\n     public static final String USAGE_ID = \"usageid\";\n+    public static final String USAGE_TYPE = \"usagetype\";\n \n     public static final String VLAN = \"vlan\";\n     public static final String VLAN_RANGE = \"vlanrange\";",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/api/src/org/apache/cloudstack/api/ApiConstants.java",
                "sha": "742d2f42abf35ed52f054d2b96d4dcd2eda6d04d",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/api/src/org/apache/cloudstack/api/BaseCmd.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/BaseCmd.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 1,
                "filename": "api/src/org/apache/cloudstack/api/BaseCmd.java",
                "patch": "@@ -95,7 +95,7 @@\n         GET, POST, PUT, DELETE\n     }\n     public static enum CommandType {\n-        BOOLEAN, DATE, FLOAT, INTEGER, SHORT, LIST, LONG, OBJECT, MAP, STRING, TZDATE, UUID\n+        BOOLEAN, DATE, FLOAT, DOUBLE, INTEGER, SHORT, LIST, LONG, OBJECT, MAP, STRING, TZDATE, UUID\n     }\n \n     private Object _responseObject;",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/api/src/org/apache/cloudstack/api/BaseCmd.java",
                "sha": "360b277d8979ffb9df7478b84dedb80ab587a38b",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/api/src/org/apache/cloudstack/api/command/admin/usage/GetUsageRecordsCmd.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/command/admin/usage/GetUsageRecordsCmd.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/api/command/admin/usage/GetUsageRecordsCmd.java",
                "patch": "@@ -111,6 +111,30 @@ public Long getProjectId() {\n     public String getUsageId() {\n         return usageId;\n     }\n+    public void setAccountName(String accountName) {\n+        this.accountName = accountName;\n+    }\n+\n+    public void setDomainId(Long domainId) {\n+        this.domainId = domainId;\n+    }\n+\n+    public void setEndDate(Date endDate) {\n+        this.endDate = endDate == null ? null : new Date(endDate.getTime());\n+    }\n+\n+    public void setStartDate(Date startDate) {\n+        this.startDate = startDate == null ? null : new Date(startDate.getTime());\n+    }\n+\n+    public void setAccountId(Long accountId) {\n+        this.accountId = accountId;\n+    }\n+\n+    public void setUsageId(String usageId) {\n+        this.usageId = usageId;\n+    }\n+\n \n     /////////////////////////////////////////////////////\n     /////////////// API Implementation///////////////////",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/api/src/org/apache/cloudstack/api/command/admin/usage/GetUsageRecordsCmd.java",
                "sha": "4cceb3b5f9fcb3df4f1fca3f15c989bb7a587931",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/api/src/org/apache/cloudstack/usage/UsageTypes.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/usage/UsageTypes.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/usage/UsageTypes.java",
                "patch": "@@ -22,6 +22,7 @@\n import org.apache.cloudstack.api.response.UsageTypeResponse;\n \n public class UsageTypes {\n+    /* Any changes here should also reflect in cloud_usage.quota_mapping table */\n     public static final int RUNNING_VM = 1;\n     public static final int ALLOCATED_VM = 2; // used for tracking how long storage has been allocated for a VM\n     public static final int IP_ADDRESS = 3;",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/api/src/org/apache/cloudstack/usage/UsageTypes.java",
                "sha": "d9cfc132e15da5c89a6f2e4edd37a2383f098a20",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/api/test/org/apache/cloudstack/api/command/test/UsageCmdTest.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/test/org/apache/cloudstack/api/command/test/UsageCmdTest.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "api/test/org/apache/cloudstack/api/command/test/UsageCmdTest.java",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.cloudstack.api.command.test;\n \n import java.util.ArrayList;\n+import java.util.Date;\n import java.util.List;\n \n import junit.framework.TestCase;\n@@ -70,4 +71,22 @@ public void testExecuteEmptyResult() {\n \n     }\n \n+    @Test\n+    public void testCrud() {\n+        getUsageRecordsCmd.setDomainId(1L);\n+        assertTrue(getUsageRecordsCmd.getDomainId().equals(1L));\n+\n+        getUsageRecordsCmd.setAccountName(\"someAccount\");\n+        assertTrue(getUsageRecordsCmd.getAccountName().equals(\"someAccount\"));\n+\n+        Date d = new Date();\n+        getUsageRecordsCmd.setStartDate(d);\n+        getUsageRecordsCmd.setEndDate(d);\n+        assertTrue(getUsageRecordsCmd.getStartDate().equals(d));\n+        assertTrue(getUsageRecordsCmd.getEndDate().equals(d));\n+\n+        getUsageRecordsCmd.setUsageId(\"someId\");\n+        assertTrue(getUsageRecordsCmd.getUsageId().equals(\"someId\"));\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/api/test/org/apache/cloudstack/api/command/test/UsageCmdTest.java",
                "sha": "e5f3e27aa5615de7497091d5e29ef64093055d8a",
                "status": "modified"
            },
            {
                "additions": 41,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/client/WEB-INF/classes/resources/messages.properties",
                "changes": 41,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/client/WEB-INF/classes/resources/messages.properties?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "client/WEB-INF/classes/resources/messages.properties",
                "patch": "@@ -1423,6 +1423,47 @@ label.show.advanced.settings=Show advanced settings\n label.delete.OpenDaylight.device=Delete OpenDaylight Controller\n label.polling.interval.sec=Polling Interval (in sec)\n label.quiet.time.sec=Quiet Time (in sec)\n+label.usage.type=Usage Type\n+label.usage.unit=Unit\n+label.quota.value=Quota Value\n+label.quota.description=Quota Description\n+label.quota.configuration=Quota Configuration\n+label.quota.configure=Configure Quota\n+label.quota.remove=Remove Quota\n+label.quota.totalusage=Total Usage\n+label.quota.balance=Balance\n+label.quota.minbalance=Min Balance\n+label.quota.enforcequota=Enforce Quota\n+label.quota.summary=Summary\n+label.quota.fullsummary=All Accounts\n+label.quota.tariff=Tariff\n+label.quota.state=State\n+label.quota.startdate=Start Date\n+label.quota.enddate=End Date\n+label.quota.total=Total\n+label.quota.startquota=Start Quota\n+label.quota.endquota=End Quota\n+label.quota.type.name=Usage Type\n+label.quota.type.unit=Usage Unit\n+label.quota.usage=Quota Consumption\n+label.quota.add.credits=Add Credits\n+label.quota.email.template=Email Template\n+label.quota.statement=Statement\n+label.quota.statement.balance=Quota Balance\n+label.quota.statement.quota=Quota Usage\n+label.quota.statement.tariff=Quota Tariff\n+label.quota.tariff.value=Tariff Value\n+label.quota.tariff.edit=Edit Tariff\n+label.quota.tariff.effectivedate=Effective Date\n+label.quota.date=Date\n+label.quota.dates=Update Dates\n+label.quota.credit=Credit\n+label.quota.credits=Credits\n+label.quota.value=Quota Value\n+label.quota.statement.bydates=Statement\n+label.quota.email.subject=Subject\n+label.quota.email.body=Body\n+label.quota.email.lastupdated=Last Update\n label.destroy.vm.graceperiod=Destroy VM Grace Period\n label.SNMP.community=SNMP Community\n label.SNMP.port=SNMP Port",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/client/WEB-INF/classes/resources/messages.properties",
                "sha": "e7beaa9304d59d60fa001725cf1187a85d30b07d",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/client/pom.xml",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/client/pom.xml?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "client/pom.xml",
                "patch": "@@ -256,6 +256,11 @@\n       <artifactId>cloud-framework-ipc</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.cloudstack</groupId>\n+      <artifactId>cloud-framework-quota</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n     <dependency>\n       <groupId>org.apache.cloudstack</groupId>\n       <artifactId>cloud-framework-rest</artifactId>\n@@ -366,6 +371,11 @@\n       <artifactId>cloud-plugin-network-globodns</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.cloudstack</groupId>\n+      <artifactId>cloud-plugin-database-quota</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n   </dependencies>\n   <build>\n     <plugins>",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/client/pom.xml",
                "sha": "d4478304c434461bd249fcaa266ff0d40ccdf220",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/client/tomcatconf/commands.properties.in",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/client/tomcatconf/commands.properties.in?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "client/tomcatconf/commands.properties.in",
                "patch": "@@ -787,3 +787,14 @@ addGloboDnsHost=1\n ### volume/template post upload\n getUploadParamsForVolume=15\n getUploadParamsForTemplate=15\n+\n+### Quota Service\n+quotaStatement=15\n+quotaBalance=15\n+quotaSummary=15\n+quotaUpdate=1\n+quotaTariffList=15\n+quotaTariffUpdate=1\n+quotaCredits=1\n+quotaEmailTemplateList=1\n+quotaEmailTemplateUpdate=1",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/client/tomcatconf/commands.properties.in",
                "sha": "485abea099c29287592e20709c4dca94b7099391",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/engine/schema/src/com/cloud/upgrade/dao/Upgrade452to460.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/upgrade/dao/Upgrade452to460.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 1,
                "filename": "engine/schema/src/com/cloud/upgrade/dao/Upgrade452to460.java",
                "patch": "@@ -340,4 +340,4 @@ private void updateSystemVmTemplates(final Connection conn) {\n         }\n         s_logger.debug(\"Updating System Vm Template IDs Complete\");\n     }\n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/engine/schema/src/com/cloud/upgrade/dao/Upgrade452to460.java",
                "sha": "6b78a7ed611ab8fa274382a032989c02e14a35af",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/engine/schema/src/com/cloud/upgrade/dao/Upgrade461to470.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/upgrade/dao/Upgrade461to470.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "engine/schema/src/com/cloud/upgrade/dao/Upgrade461to470.java",
                "patch": "@@ -23,6 +23,8 @@\n \n import java.io.File;\n import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n \n public class Upgrade461to470 implements DbUpgrade {\n     final static Logger s_logger = Logger.getLogger(Upgrade461to470.class);\n@@ -51,8 +53,23 @@ public boolean supportsRollingUpgrade() {\n         return new File[] {new File(script)};\n     }\n \n+    public void alterAddColumnToCloudUsage(final Connection conn) {\n+        final String alterTableSql = \"ALTER TABLE `cloud_usage`.`cloud_usage` ADD COLUMN `quota_calculated` tinyint(1) DEFAULT 0 NOT NULL COMMENT 'quota calculation status'\";\n+        try (PreparedStatement pstmt = conn.prepareStatement(alterTableSql)) {\n+            pstmt.executeUpdate();\n+            s_logger.info(\"Altered cloud_usage.cloud_usage table and added column quota_calculated\");\n+        } catch (SQLException e) {\n+            if (e.getMessage().contains(\"quota_calculated\")) {\n+                s_logger.warn(\"cloud_usage.cloud_usage table already has a column called quota_calculated\");\n+            } else {\n+                throw new CloudRuntimeException(\"Unable to create column quota_calculated in table cloud_usage.cloud_usage\", e);\n+            }\n+        }\n+    }\n+\n     @Override\n     public void performDataMigration(Connection conn) {\n+        alterAddColumnToCloudUsage(conn);\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/engine/schema/src/com/cloud/upgrade/dao/Upgrade461to470.java",
                "sha": "8dbbdb2e9ec8c22bfd45d6a5c9428a5d41649e5b",
                "status": "modified"
            },
            {
                "additions": 69,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/engine/schema/src/com/cloud/usage/UsageVO.java",
                "changes": 83,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/usage/UsageVO.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 14,
                "filename": "engine/schema/src/com/cloud/usage/UsageVO.java",
                "patch": "@@ -103,6 +103,17 @@\n     @Temporal(value = TemporalType.TIMESTAMP)\n     private Date endDate = null;\n \n+    @Column(name = \"quota_calculated\")\n+    private Integer quotaCalculated = 0;\n+\n+    public Integer getQuotaCalculated() {\n+        return quotaCalculated;\n+    }\n+\n+    public void setQuotaCalculated(Integer quotaCalculated) {\n+        this.quotaCalculated = quotaCalculated;\n+    }\n+\n     public UsageVO() {\n     }\n \n@@ -121,8 +132,8 @@ public UsageVO(Long zoneId, Long accountId, Long domainId, String description, S\n         this.templateId = templateId;\n         this.usageId = usageId;\n         this.size = size;\n-        this.startDate = startDate;\n-        this.endDate = endDate;\n+        this.startDate = startDate  == null ? null : new Date(startDate.getTime());\n+        this.endDate = endDate  == null ? null : new Date(endDate.getTime());\n     }\n \n     public UsageVO(Long zoneId, Long accountId, Long domainId, String description, String usageDisplay, int usageType, Double rawUsage, Long vmId, String vmName,\n@@ -141,8 +152,8 @@ public UsageVO(Long zoneId, Long accountId, Long domainId, String description, S\n         this.usageId = usageId;\n         this.size = size;\n         this.virtualSize = virtualSize;\n-        this.startDate = startDate;\n-        this.endDate = endDate;\n+        this.startDate = startDate  == null ? null : new Date(startDate.getTime());\n+        this.endDate = endDate  == null ? null : new Date(endDate.getTime());\n     }\n \n     public UsageVO(Long zoneId, Long accountId, Long domainId, String description, String usageDisplay, int usageType, Double rawUsage, Long usageId, String type,\n@@ -157,8 +168,8 @@ public UsageVO(Long zoneId, Long accountId, Long domainId, String description, S\n         this.usageId = usageId;\n         this.type = type;\n         this.networkId = networkId;\n-        this.startDate = startDate;\n-        this.endDate = endDate;\n+        this.startDate = startDate  == null ? null : new Date(startDate.getTime());\n+        this.endDate = endDate  == null ? null : new Date(endDate.getTime());\n     }\n \n     public UsageVO(Long zoneId, Long accountId, Long domainId, String description, String usageDisplay, int usageType, Double rawUsage, Long vmId, String vmName,\n@@ -176,8 +187,8 @@ public UsageVO(Long zoneId, Long accountId, Long domainId, String description, S\n         this.templateId = templateId;\n         this.usageId = usageId;\n         this.type = type;\n-        this.startDate = startDate;\n-        this.endDate = endDate;\n+        this.startDate = startDate  == null ? null : new Date(startDate.getTime());\n+        this.endDate = endDate  == null ? null : new Date(endDate.getTime());\n     }\n \n     public UsageVO(Long zoneId, Long accountId, Long domainId, String description, String usageDisplay, int usageType, Double rawUsage, Long vmId, String vmName,\n@@ -198,8 +209,8 @@ public UsageVO(Long zoneId, Long accountId, Long domainId, String description, S\n         this.templateId = templateId;\n         this.usageId = usageId;\n         this.type = type;\n-        this.startDate = startDate;\n-        this.endDate = endDate;\n+        this.startDate = startDate  == null ? null : new Date(startDate.getTime());\n+        this.endDate = endDate  == null ? null : new Date(endDate.getTime());\n     }\n \n     //IPAddress Usage\n@@ -215,8 +226,8 @@ public UsageVO(Long zoneId, Long accountId, Long domainId, String description, S\n         this.usageId = usageId;\n         this.size = size;\n         this.type = type;\n-        this.startDate = startDate;\n-        this.endDate = endDate;\n+        this.startDate = startDate  == null ? null : new Date(startDate.getTime());\n+        this.endDate = endDate  == null ? null : new Date(endDate.getTime());\n     }\n \n     @Override\n@@ -321,11 +332,55 @@ public Long getVirtualSize() {\n \n     @Override\n     public Date getStartDate() {\n-        return startDate;\n+        return startDate  == null ? null : new Date(startDate.getTime());\n     }\n \n     @Override\n     public Date getEndDate() {\n-        return endDate;\n+        return endDate  == null ? null : new Date(endDate.getTime());\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public void setType(String type) {\n+        this.type = type;\n+    }\n+\n+    public void setStartDate(Date startDate) {\n+        this.startDate = startDate  == null ? null : new Date(startDate.getTime());\n+    }\n+\n+    public void setEndDate(Date endDate) {\n+        this.endDate = endDate  == null ? null : new Date(endDate.getTime());\n+    }\n+\n+    public void setDomainId(Long domainId) {\n+        this.domainId = domainId;\n+    }\n+\n+    public void setAccountId(Long accountId) {\n+        this.accountId = accountId;\n+    }\n+\n+    public void setZoneId(Long zoneId) {\n+        this.zoneId = zoneId;\n+    }\n+\n+    public void setUsageType(int usageType) {\n+        this.usageType = usageType;\n+    }\n+\n+    public void setRawUsage(Double rawUsage) {\n+        this.rawUsage = rawUsage;\n+    }\n+\n+    public void setSize(Long size) {\n+        this.size = size;\n+    }\n+\n+    public void setVirtualSize(Long virtualSize) {\n+        this.virtualSize = virtualSize;\n     }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/engine/schema/src/com/cloud/usage/UsageVO.java",
                "sha": "cc90d71c8b289c5e3d750a7d5b4a704a069f55c9",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/engine/schema/src/com/cloud/usage/dao/UsageDao.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/usage/dao/UsageDao.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "engine/schema/src/com/cloud/usage/dao/UsageDao.java",
                "patch": "@@ -55,4 +55,8 @@\n     void saveUsageRecords(List<UsageVO> usageRecords);\n \n     void removeOldUsageRecords(int days);\n+\n+    UsageVO persistUsage(final UsageVO usage);\n+\n+    Pair<List<? extends UsageVO>, Integer> getUsageRecordsPendingQuotaAggregation(long accountId, long domainId);\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/engine/schema/src/com/cloud/usage/dao/UsageDao.java",
                "sha": "4822dd60acff1512c9dcfb11574cdcccc053a4df",
                "status": "modified"
            },
            {
                "additions": 52,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/engine/schema/src/com/cloud/usage/dao/UsageDaoImpl.java",
                "changes": 68,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/usage/dao/UsageDaoImpl.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 16,
                "filename": "engine/schema/src/com/cloud/usage/dao/UsageDaoImpl.java",
                "patch": "@@ -24,9 +24,14 @@\n import com.cloud.utils.Pair;\n import com.cloud.utils.db.Filter;\n import com.cloud.utils.db.GenericDaoBase;\n+import com.cloud.utils.db.QueryBuilder;\n import com.cloud.utils.db.SearchCriteria;\n+import com.cloud.utils.db.Transaction;\n+import com.cloud.utils.db.TransactionCallback;\n import com.cloud.utils.db.TransactionLegacy;\n+import com.cloud.utils.db.TransactionStatus;\n import com.cloud.utils.exception.CloudRuntimeException;\n+\n import org.apache.log4j.Logger;\n import org.springframework.stereotype.Component;\n \n@@ -45,29 +50,24 @@\n     private static final String DELETE_ALL_BY_ACCOUNTID = \"DELETE FROM cloud_usage WHERE account_id = ?\";\n     private static final String DELETE_ALL_BY_INTERVAL = \"DELETE FROM cloud_usage WHERE end_date < DATE_SUB(CURRENT_DATE(), INTERVAL ? DAY)\";\n     private static final String INSERT_ACCOUNT = \"INSERT INTO cloud_usage.account (id, account_name, type, domain_id, removed, cleanup_needed) VALUES (?,?,?,?,?,?)\";\n-    private static final String INSERT_USER_STATS =\n-            \"INSERT INTO cloud_usage.user_statistics (id, data_center_id, account_id, public_ip_address, device_id, device_type, network_id, net_bytes_received,\"\n-                    + \" net_bytes_sent, current_bytes_received, current_bytes_sent, agg_bytes_received, agg_bytes_sent) VALUES (?,?,?,?,?,?,?,?,?,?, ?, ?, ?)\";\n+    private static final String INSERT_USER_STATS = \"INSERT INTO cloud_usage.user_statistics (id, data_center_id, account_id, public_ip_address, device_id, device_type, network_id, net_bytes_received,\"\n+            + \" net_bytes_sent, current_bytes_received, current_bytes_sent, agg_bytes_received, agg_bytes_sent) VALUES (?,?,?,?,?,?,?,?,?,?, ?, ?, ?)\";\n \n     private static final String UPDATE_ACCOUNT = \"UPDATE cloud_usage.account SET account_name=?, removed=? WHERE id=?\";\n-    private static final String UPDATE_USER_STATS =\n-            \"UPDATE cloud_usage.user_statistics SET net_bytes_received=?, net_bytes_sent=?, current_bytes_received=?, current_bytes_sent=?, agg_bytes_received=?, agg_bytes_sent=? WHERE id=?\";\n+    private static final String UPDATE_USER_STATS = \"UPDATE cloud_usage.user_statistics SET net_bytes_received=?, net_bytes_sent=?, current_bytes_received=?, current_bytes_sent=?, agg_bytes_received=?, agg_bytes_sent=? WHERE id=?\";\n \n     private static final String GET_LAST_ACCOUNT = \"SELECT id FROM cloud_usage.account ORDER BY id DESC LIMIT 1\";\n     private static final String GET_LAST_USER_STATS = \"SELECT id FROM cloud_usage.user_statistics ORDER BY id DESC LIMIT 1\";\n     private static final String GET_PUBLIC_TEMPLATES_BY_ACCOUNTID = \"SELECT id FROM cloud.vm_template WHERE account_id = ? AND public = '1' AND removed IS NULL\";\n \n     private static final String GET_LAST_VM_DISK_STATS = \"SELECT id FROM cloud_usage.vm_disk_statistics ORDER BY id DESC LIMIT 1\";\n-    private static final String INSERT_VM_DISK_STATS =\n-            \"INSERT INTO cloud_usage.vm_disk_statistics (id, data_center_id, account_id, vm_id, volume_id, net_io_read, net_io_write, current_io_read, \"\n-                    + \"current_io_write, agg_io_read, agg_io_write, net_bytes_read, net_bytes_write, current_bytes_read, current_bytes_write, agg_bytes_read, agg_bytes_write) \"\n-                    + \" VALUES (?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?,?, ?, ?)\";\n-    private static final String UPDATE_VM_DISK_STATS =\n-            \"UPDATE cloud_usage.vm_disk_statistics SET net_io_read=?, net_io_write=?, current_io_read=?, current_io_write=?, agg_io_read=?, agg_io_write=?, \"\n-                    + \"net_bytes_read=?, net_bytes_write=?, current_bytes_read=?, current_bytes_write=?, agg_bytes_read=?, agg_bytes_write=?  WHERE id=?\";\n+    private static final String INSERT_VM_DISK_STATS = \"INSERT INTO cloud_usage.vm_disk_statistics (id, data_center_id, account_id, vm_id, volume_id, net_io_read, net_io_write, current_io_read, \"\n+            + \"current_io_write, agg_io_read, agg_io_write, net_bytes_read, net_bytes_write, current_bytes_read, current_bytes_write, agg_bytes_read, agg_bytes_write) \"\n+            + \" VALUES (?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?,?, ?, ?)\";\n+    private static final String UPDATE_VM_DISK_STATS = \"UPDATE cloud_usage.vm_disk_statistics SET net_io_read=?, net_io_write=?, current_io_read=?, current_io_write=?, agg_io_read=?, agg_io_write=?, \"\n+            + \"net_bytes_read=?, net_bytes_write=?, current_bytes_read=?, current_bytes_write=?, agg_bytes_read=?, agg_bytes_write=?  WHERE id=?\";\n     private static final String INSERT_USAGE_RECORDS = \"INSERT INTO cloud_usage.cloud_usage (zone_id, account_id, domain_id, description, usage_display, \"\n-            +\n-            \"usage_type, raw_usage, vm_instance_id, vm_name, offering_id, template_id, \"\n+            + \"usage_type, raw_usage, vm_instance_id, vm_name, offering_id, template_id, \"\n             + \"usage_id, type, size, network_id, start_date, end_date, virtual_size) VALUES (?,?,?,?,?,?,?,?,?, ?, ?, ?,?,?,?,?,?,?)\";\n \n     protected final static TimeZone s_gmtTimeZone = TimeZone.getTimeZone(\"GMT\");\n@@ -213,7 +213,7 @@ public void updateUserStats(List<UserStatisticsVO> userStats) {\n             txn.start();\n             String sql = UPDATE_USER_STATS;\n             PreparedStatement pstmt = null;\n-            pstmt = txn.prepareAutoCloseStatement(sql);  // in reality I just want CLOUD_USAGE dataSource connection\n+            pstmt = txn.prepareAutoCloseStatement(sql); // in reality I just want CLOUD_USAGE dataSource connection\n             for (UserStatisticsVO userStat : userStats) {\n                 pstmt.setLong(1, userStat.getNetBytesReceived());\n                 pstmt.setLong(2, userStat.getNetBytesSent());\n@@ -310,7 +310,7 @@ public void updateVmDiskStats(List<VmDiskStatisticsVO> vmDiskStats) {\n             txn.start();\n             String sql = UPDATE_VM_DISK_STATS;\n             PreparedStatement pstmt = null;\n-            pstmt = txn.prepareAutoCloseStatement(sql);  // in reality I just want CLOUD_USAGE dataSource connection\n+            pstmt = txn.prepareAutoCloseStatement(sql); // in reality I just want CLOUD_USAGE dataSource connection\n             for (VmDiskStatisticsVO vmDiskStat : vmDiskStats) {\n                 pstmt.setLong(1, vmDiskStat.getNetIORead());\n                 pstmt.setLong(2, vmDiskStat.getNetIOWrite());\n@@ -467,4 +467,40 @@ public void removeOldUsageRecords(int days) {\n             txn.close();\n         }\n     }\n+\n+    public UsageVO persistUsage(final UsageVO usage) {\n+        return Transaction.execute(TransactionLegacy.USAGE_DB, new TransactionCallback<UsageVO>() {\n+            @Override\n+            public UsageVO doInTransaction(final TransactionStatus status) {\n+                return persist(usage);\n+            }\n+        });\n+    }\n+\n+    public Pair<List<? extends UsageVO>, Integer> getUsageRecordsPendingQuotaAggregation(final long accountId, final long domainId) {\n+        if (s_logger.isDebugEnabled()) {\n+            s_logger.debug(\"Getting usage records for account: \" + accountId + \", domainId: \" + domainId);\n+        }\n+        return Transaction.execute(TransactionLegacy.USAGE_DB, new TransactionCallback<Pair<List<? extends UsageVO>, Integer>>() {\n+            @Override\n+            public Pair<List<? extends UsageVO>, Integer> doInTransaction(final TransactionStatus status) {\n+                Pair<List<UsageVO>, Integer> usageRecords = new Pair<List<UsageVO>, Integer>(new ArrayList<UsageVO>(), 0);\n+                Filter usageFilter = new Filter(UsageVO.class, \"startDate\", true, 0L, Long.MAX_VALUE);\n+                QueryBuilder<UsageVO> qb = QueryBuilder.create(UsageVO.class);\n+                if (accountId != -1) {\n+                    qb.and(qb.entity().getAccountId(), SearchCriteria.Op.EQ, accountId);\n+                }\n+                if (domainId != -1) {\n+                    qb.and(qb.entity().getDomainId(), SearchCriteria.Op.EQ, domainId);\n+                }\n+                qb.and(qb.entity().getQuotaCalculated(), SearchCriteria.Op.NEQ, 1);\n+                qb.and(qb.entity().getRawUsage(), SearchCriteria.Op.GT, 0);\n+                if (s_logger.isDebugEnabled()) {\n+                    s_logger.debug(\"Getting usage records\" + usageFilter.getOrderBy());\n+                }\n+                usageRecords = searchAndCountAllRecords(qb.create(), usageFilter);\n+                return new Pair<List<? extends UsageVO>, Integer>(usageRecords.first(), usageRecords.second());\n+            }\n+        });\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/engine/schema/src/com/cloud/usage/dao/UsageDaoImpl.java",
                "sha": "9c9ab0bbc0894ad770fb5667cca248cb79751abb",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/db/src/com/cloud/utils/db/Transaction.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/db/src/com/cloud/utils/db/Transaction.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 8,
                "filename": "framework/db/src/com/cloud/utils/db/Transaction.java",
                "patch": "@@ -35,18 +35,11 @@\n         if (currentTxn != null) {\n             databaseId = currentTxn.getDatabaseId();\n         }\n-        TransactionLegacy txn = TransactionLegacy.open(name, databaseId, false);\n-        try {\n-//            if (txn.dbTxnStarted()){\n-//                String warnMsg = \"Potential Wrong Usage: TRANSACTION.EXECUTE IS WRAPPED INSIDE ANOTHER DB TRANSACTION!\";\n-//                s_logger.warn(warnMsg, new CloudRuntimeException(warnMsg));\n-//            }\n+        try (final TransactionLegacy txn = TransactionLegacy.open(name, databaseId, false)) {\n             txn.start();\n             T result = callback.doInTransaction(STATUS);\n             txn.commit();\n             return result;\n-        } finally {\n-            txn.close();\n         }\n     }\n \n@@ -59,4 +52,28 @@ public T doInTransaction(TransactionStatus status) throws RuntimeException {\n         });\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n+    public static <T, E extends Throwable> T execute(final short databaseId, TransactionCallbackWithException<T, E> callback) throws E {\n+        String name = \"tx-\" + counter.incrementAndGet();\n+        TransactionLegacy currentTxn = TransactionLegacy.currentTxn(false);\n+        short outer_txn_databaseId = (currentTxn != null ? currentTxn.getDatabaseId() : databaseId);\n+        try (final TransactionLegacy txn = TransactionLegacy.open(name, databaseId, true)) {\n+            txn.start();\n+            T result = callback.doInTransaction(STATUS);\n+            txn.commit();\n+            return result;\n+        } finally {\n+            TransactionLegacy.open(outer_txn_databaseId).close();\n+        }\n+    }\n+\n+    public static <T> T execute(final short databaseId, final TransactionCallback<T> callback) {\n+        return execute(databaseId, new TransactionCallbackWithException<T, RuntimeException>() {\n+            @Override\n+            public T doInTransaction(TransactionStatus status) throws RuntimeException {\n+                return callback.doInTransaction(status);\n+            }\n+        });\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/db/src/com/cloud/utils/db/Transaction.java",
                "sha": "c6a491a216d0ec1d14a4da0ef5efd3c8342f64de",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/pom.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/pom.xml?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/pom.xml",
                "patch": "@@ -47,6 +47,7 @@\n     <module>rest</module>\n     <module>events</module>\n     <module>jobs</module>\n+    <module>quota</module>\n     <module>cluster</module>\n     <module>db</module>\n     <module>config</module>",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/pom.xml",
                "sha": "3cfc6d0a3cedd747717a664a6b4d265bee1f7214",
                "status": "modified"
            },
            {
                "additions": 73,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/pom.xml",
                "changes": 73,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/pom.xml?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/pom.xml",
                "patch": "@@ -0,0 +1,73 @@\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements. See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership. The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License. You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied. See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <artifactId>cloud-framework-quota</artifactId>\n+  <name>Apache CloudStack Framework - Quota</name>\n+  <parent>\n+    <groupId>org.apache.cloudstack</groupId>\n+    <artifactId>cloudstack-framework</artifactId>\n+    <version>4.7.0-SNAPSHOT</version>\n+    <relativePath>../pom.xml</relativePath>\n+  </parent>\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.cloudstack</groupId>\n+      <artifactId>cloud-utils</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.cloudstack</groupId>\n+      <artifactId>cloud-engine-schema</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+        <groupId>junit</groupId>\n+        <artifactId>junit</artifactId>\n+        <version>${cs.junit.version}</version>\n+        <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+        <groupId>org.mockito</groupId>\n+        <artifactId>mockito-all</artifactId>\n+        <version>${cs.mockito.version}</version>\n+        <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+        <groupId>org.powermock</groupId>\n+        <artifactId>powermock-module-junit4</artifactId>\n+        <version>${cs.powermock.version}</version>\n+    </dependency>\n+    <dependency>\n+        <groupId>org.powermock</groupId>\n+        <artifactId>powermock-api-mockito</artifactId>\n+        <version>${cs.powermock.version}</version>\n+        <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.commons</groupId>\n+      <artifactId>commons-lang3</artifactId>\n+      <version>${cs.commons-lang3.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>javax.mail</groupId>\n+      <artifactId>mail</artifactId>\n+    </dependency>\n+  </dependencies>\n+</project>",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/pom.xml",
                "sha": "c0ed3c8498601f5bf92c35d7923f0df143fc2749",
                "status": "added"
            },
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/resources/META-INF/cloudstack/quota/spring-framework-quota-context.xml",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/resources/META-INF/cloudstack/quota/spring-framework-quota-context.xml?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/resources/META-INF/cloudstack/quota/spring-framework-quota-context.xml",
                "patch": "@@ -0,0 +1,34 @@\n+<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor\n+\tlicense agreements. See the NOTICE file distributed with this work for additional\n+\tinformation regarding copyright ownership. The ASF licenses this file to\n+\tyou under the Apache License, Version 2.0 (the \"License\"); you may not use\n+\tthis file except in compliance with the License. You may obtain a copy of\n+\tthe License at http://www.apache.org/licenses/LICENSE-2.0 Unless required\n+\tby applicable law or agreed to in writing, software distributed under the\n+\tLicense is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS\n+\tOF ANY KIND, either express or implied. See the License for the specific\n+\tlanguage governing permissions and limitations under the License. -->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\"\n+\txmlns:aop=\"http://www.springframework.org/schema/aop\"\n+\txsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+                      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n+                      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd\n+                      http://www.springframework.org/schema/context\n+                      http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n+\n+\t<bean id=\"QuotaTariffDao\" class=\"org.apache.cloudstack.quota.dao.QuotaTariffDaoImpl\" />\n+    <bean id=\"QuotaAccountDao\" class=\"org.apache.cloudstack.quota.dao.QuotaAccountDaoImpl\" />\n+\t<bean id=\"QuotaBalanceDao\" class=\"org.apache.cloudstack.quota.dao.QuotaBalanceDaoImpl\" />\n+\t<bean id=\"QuotaCreditsDao\" class=\"org.apache.cloudstack.quota.dao.QuotaCreditsDaoImpl\" />\n+\t<bean id=\"QuotaEmailTemplatesDao\"\n+\t\tclass=\"org.apache.cloudstack.quota.dao.QuotaEmailTemplatesDaoImpl\" />\n+\t<bean id=\"QuotaUsageDao\" class=\"org.apache.cloudstack.quota.dao.QuotaUsageDaoImpl\" />\n+    <bean id=\"ServiceOfferingDao\" class=\"org.apache.cloudstack.quota.dao.ServiceOfferingDaoImpl\" />\n+    <bean id=\"UserVmDetailsDao\" class=\"org.apache.cloudstack.quota.dao.UserVmDetailsDaoImpl\" />\n+\n+\t<bean id=\"QuotaManager\" class=\"org.apache.cloudstack.quota.QuotaManagerImpl\" />\n+    <bean id=\"QuotaAlertManager\" class=\"org.apache.cloudstack.quota.QuotaAlertManagerImpl\" />\n+\t<bean id=\"QuotaStatement\" class=\"org.apache.cloudstack.quota.QuotaStatementImpl\" />\n+\n+</beans>",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/resources/META-INF/cloudstack/quota/spring-framework-quota-context.xml",
                "sha": "f7a3accdc3995239797a2f6412449b0e3650dbe8",
                "status": "added"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/QuotaAlertManager.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/QuotaAlertManager.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/QuotaAlertManager.java",
                "patch": "@@ -0,0 +1,26 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.quota;\n+\n+import com.cloud.utils.component.Manager;\n+\n+import org.apache.cloudstack.quota.QuotaAlertManagerImpl.DeferredQuotaEmail;\n+\n+public interface QuotaAlertManager extends Manager {\n+    void checkAndSendQuotaAlertEmails();\n+    void sendQuotaAlert(DeferredQuotaEmail emailToBeSent);\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/QuotaAlertManager.java",
                "sha": "44204e8d1167990cbbe178d27072961e257c180a",
                "status": "added"
            },
            {
                "additions": 418,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/QuotaAlertManagerImpl.java",
                "changes": 418,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/QuotaAlertManagerImpl.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/QuotaAlertManagerImpl.java",
                "patch": "@@ -0,0 +1,418 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.quota;\n+\n+import com.cloud.domain.DomainVO;\n+import com.cloud.domain.dao.DomainDao;\n+import com.cloud.user.Account;\n+import com.cloud.user.Account.State;\n+import com.cloud.user.AccountVO;\n+import com.cloud.user.UserVO;\n+import com.cloud.user.dao.AccountDao;\n+import com.cloud.user.dao.UserDao;\n+import com.cloud.utils.NumbersUtil;\n+import com.cloud.utils.component.ManagerBase;\n+import com.cloud.utils.db.TransactionLegacy;\n+import com.cloud.utils.exception.CloudRuntimeException;\n+import com.google.common.base.Strings;\n+import com.sun.mail.smtp.SMTPMessage;\n+import com.sun.mail.smtp.SMTPSSLTransport;\n+import com.sun.mail.smtp.SMTPTransport;\n+import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n+import org.apache.cloudstack.quota.constant.QuotaConfig;\n+import org.apache.cloudstack.quota.constant.QuotaConfig.QuotaEmailTemplateTypes;\n+import org.apache.cloudstack.quota.dao.QuotaAccountDao;\n+import org.apache.cloudstack.quota.dao.QuotaEmailTemplatesDao;\n+import org.apache.cloudstack.quota.dao.QuotaUsageDao;\n+import org.apache.cloudstack.quota.vo.QuotaAccountVO;\n+import org.apache.cloudstack.quota.vo.QuotaEmailTemplatesVO;\n+import org.apache.commons.lang3.text.StrSubstitutor;\n+import org.apache.log4j.Logger;\n+import org.springframework.stereotype.Component;\n+\n+import javax.ejb.Local;\n+import javax.inject.Inject;\n+import javax.mail.Authenticator;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.PasswordAuthentication;\n+import javax.mail.Session;\n+import javax.mail.URLName;\n+import javax.mail.internet.InternetAddress;\n+import javax.naming.ConfigurationException;\n+import java.io.UnsupportedEncodingException;\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+\n+@Component\n+@Local(value = QuotaAlertManager.class)\n+public class QuotaAlertManagerImpl extends ManagerBase implements QuotaAlertManager {\n+    private static final Logger s_logger = Logger.getLogger(QuotaAlertManagerImpl.class);\n+\n+    @Inject\n+    private AccountDao _accountDao;\n+    @Inject\n+    private QuotaAccountDao _quotaAcc;\n+    @Inject\n+    private UserDao _userDao;\n+    @Inject\n+    private DomainDao _domainDao;\n+    @Inject\n+    private QuotaEmailTemplatesDao _quotaEmailTemplateDao;\n+    @Inject\n+    private ConfigurationDao _configDao;\n+    @Inject\n+    private QuotaUsageDao _quotaUsage;\n+\n+    private EmailQuotaAlert _emailQuotaAlert;\n+    private boolean _lockAccountEnforcement = false;\n+\n+    boolean _smtpDebug = false;\n+\n+    public QuotaAlertManagerImpl() {\n+        super();\n+    }\n+\n+    private void mergeConfigs(Map<String, String> dbParams, Map<String, Object> xmlParams) {\n+        for (Map.Entry<String, Object> param : xmlParams.entrySet()) {\n+            dbParams.put(param.getKey(), (String)param.getValue());\n+        }\n+    }\n+\n+    @Override\n+    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n+        super.configure(name, params);\n+\n+        Map<String, String> configs = _configDao.getConfiguration(params);\n+\n+        if (params != null) {\n+            mergeConfigs(configs, params);\n+        }\n+\n+        final String smtpHost = configs.get(QuotaConfig.QuotaSmtpHost.key());\n+        int smtpPort = NumbersUtil.parseInt(configs.get(QuotaConfig.QuotaSmtpPort.key()), 25);\n+        String useAuthStr = configs.get(QuotaConfig.QuotaSmtpAuthType.key());\n+        boolean useAuth = ((useAuthStr != null) && Boolean.parseBoolean(useAuthStr));\n+        String smtpUsername = configs.get(QuotaConfig.QuotaSmtpUser.key());\n+        String smtpPassword = configs.get(QuotaConfig.QuotaSmtpPassword.key());\n+        String emailSender = configs.get(QuotaConfig.QuotaSmtpSender.key());\n+        _lockAccountEnforcement = \"true\".equalsIgnoreCase(configs.get(QuotaConfig.QuotaEnableEnforcement.key()));\n+        _emailQuotaAlert = new EmailQuotaAlert(smtpHost, smtpPort, useAuth, smtpUsername, smtpPassword, emailSender, _smtpDebug);\n+\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean start() {\n+        if (s_logger.isInfoEnabled()) {\n+            s_logger.info(\"Starting Alert Manager\");\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean stop() {\n+        if (s_logger.isInfoEnabled()) {\n+            s_logger.info(\"Stopping Alert Manager\");\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public void checkAndSendQuotaAlertEmails() {\n+        List<DeferredQuotaEmail> deferredQuotaEmailList = new ArrayList<DeferredQuotaEmail>();\n+        final BigDecimal zeroBalance = new BigDecimal(0);\n+        for (final QuotaAccountVO quotaAccount : _quotaAcc.listAllQuotaAccount()) {\n+            if (s_logger.isDebugEnabled()) {\n+                s_logger.debug(\"checkAndSendQuotaAlertEmails accId=\" + quotaAccount.getId());\n+            }\n+            BigDecimal accountBalance = quotaAccount.getQuotaBalance();\n+            Date balanceDate = quotaAccount.getQuotaBalanceDate();\n+            Date alertDate = quotaAccount.getQuotaAlertDate();\n+            int lockable = quotaAccount.getQuotaEnforce();\n+            BigDecimal thresholdBalance = quotaAccount.getQuotaMinBalance();\n+            if (accountBalance != null) {\n+                AccountVO account = _accountDao.findById(quotaAccount.getId());\n+                if (s_logger.isDebugEnabled()) {\n+                    s_logger.debug(\"checkAndSendQuotaAlertEmails: Check id=\" + account.getId() + \" bal=\" + accountBalance + \", alertDate=\" + alertDate + \", lockable=\" + lockable);\n+                }\n+                if (accountBalance.compareTo(zeroBalance) < 0) {\n+                    if (_lockAccountEnforcement && (lockable == 1)) {\n+                        if (account.getType() == Account.ACCOUNT_TYPE_NORMAL) {\n+                            s_logger.info(\"Locking account \" + account.getAccountName() + \" due to quota < 0.\");\n+                            lockAccount(account.getId());\n+                        }\n+                    }\n+                    if (alertDate == null || (balanceDate.after(alertDate) && getDifferenceDays(alertDate, new Date()) > 1)) {\n+                        s_logger.info(\"Sending alert \" + account.getAccountName() + \" due to quota < 0.\");\n+                        deferredQuotaEmailList.add(new DeferredQuotaEmail(account, quotaAccount, QuotaConfig.QuotaEmailTemplateTypes.QUOTA_EMPTY));\n+                    }\n+                } else if (accountBalance.compareTo(thresholdBalance) < 0) {\n+                    if (alertDate == null || (balanceDate.after(alertDate) && getDifferenceDays(alertDate, new Date()) > 1)) {\n+                        s_logger.info(\"Sending alert \" + account.getAccountName() + \" due to quota below threshold.\");\n+                        deferredQuotaEmailList.add(new DeferredQuotaEmail(account, quotaAccount, QuotaConfig.QuotaEmailTemplateTypes.QUOTA_LOW));\n+                    }\n+                }\n+            }\n+        }\n+\n+        for (DeferredQuotaEmail emailToBeSent : deferredQuotaEmailList) {\n+            if (s_logger.isDebugEnabled()) {\n+                s_logger.debug(\"checkAndSendQuotaAlertEmails: Attempting to send quota alert email to users of account: \" + emailToBeSent.getAccount().getAccountName());\n+            }\n+            sendQuotaAlert(emailToBeSent);\n+        }\n+    }\n+\n+    public void sendQuotaAlert(DeferredQuotaEmail emailToBeSent) {\n+        final AccountVO account = emailToBeSent.getAccount();\n+        final BigDecimal balance = emailToBeSent.getQuotaBalance();\n+        final BigDecimal usage = emailToBeSent.getQuotaUsage();\n+        final QuotaConfig.QuotaEmailTemplateTypes emailType = emailToBeSent.getEmailTemplateType();\n+\n+        final List<QuotaEmailTemplatesVO> emailTemplates = _quotaEmailTemplateDao.listAllQuotaEmailTemplates(emailType.toString());\n+        if (emailTemplates != null && emailTemplates.get(0) != null) {\n+            final QuotaEmailTemplatesVO emailTemplate = emailTemplates.get(0);\n+\n+            final DomainVO accountDomain = _domainDao.findByIdIncludingRemoved(account.getDomainId());\n+            final List<UserVO> usersInAccount = _userDao.listByAccount(account.getId());\n+\n+            String userNames = \"\";\n+            final List<String> emailRecipients = new ArrayList<String>();\n+            for (UserVO user : usersInAccount) {\n+                userNames += String.format(\"%s <%s>,\", user.getUsername(), user.getEmail());\n+                emailRecipients.add(user.getEmail());\n+            }\n+            if (userNames.endsWith(\",\")) {\n+                userNames = userNames.substring(0, userNames.length() - 1);\n+            }\n+\n+            final Map<String, String> optionMap = new HashMap<String, String>();\n+            optionMap.put(\"accountName\", account.getAccountName());\n+            optionMap.put(\"accountID\", account.getUuid());\n+            optionMap.put(\"accountUsers\", userNames);\n+            optionMap.put(\"domainName\", accountDomain.getName());\n+            optionMap.put(\"domainID\", accountDomain.getUuid());\n+            optionMap.put(\"quotaBalance\", QuotaConfig.QuotaCurrencySymbol.value() + \" \" + balance.toString());\n+            if (emailType == QuotaEmailTemplateTypes.QUOTA_STATEMENT) {\n+                optionMap.put(\"quotaUsage\", QuotaConfig.QuotaCurrencySymbol.value() + \" \" + usage.toString());\n+            }\n+\n+            if (s_logger.isDebugEnabled()) {\n+                s_logger.debug(\"accountName\" + account.getAccountName() + \"accountID\" + account.getUuid() + \"accountUsers\" + userNames + \"domainName\" + accountDomain.getName()\n+                        + \"domainID\" + accountDomain.getUuid());\n+            }\n+\n+            final StrSubstitutor templateEngine = new StrSubstitutor(optionMap);\n+            final String subject = templateEngine.replace(emailTemplate.getTemplateSubject());\n+            final String body = templateEngine.replace(emailTemplate.getTemplateBody());\n+            try {\n+                _emailQuotaAlert.sendQuotaAlert(emailRecipients, subject, body);\n+                emailToBeSent.sentSuccessfully(_quotaAcc);\n+            } catch (Exception e) {\n+                s_logger.error(String.format(\"Unable to send quota alert email (subject=%s; body=%s) to account %s (%s) recipients (%s) due to error (%s)\", subject, body,\n+                        account.getAccountName(), account.getUuid(), emailRecipients, e));\n+                if (s_logger.isDebugEnabled()) {\n+                    s_logger.debug(\"Exception\", e);\n+                }\n+            }\n+        } else {\n+            s_logger.error(String.format(\"No quota email template found for type %s, cannot send quota alert email to account %s(%s)\", emailType, account.getAccountName(),\n+                    account.getUuid()));\n+        }\n+    }\n+\n+    public static long getDifferenceDays(Date d1, Date d2) {\n+        long diff = d2.getTime() - d1.getTime();\n+        return TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);\n+    }\n+\n+    protected boolean lockAccount(long accountId) {\n+        final short opendb = TransactionLegacy.currentTxn().getDatabaseId();\n+        boolean success = false;\n+        try (TransactionLegacy txn = TransactionLegacy.open(TransactionLegacy.CLOUD_DB)) {\n+            Account account = _accountDao.findById(accountId);\n+            if (account != null) {\n+                if (account.getState() == State.locked) {\n+                    return true; // already locked, no-op\n+                } else if (account.getState() == State.enabled) {\n+                    AccountVO acctForUpdate = _accountDao.createForUpdate();\n+                    acctForUpdate.setState(State.locked);\n+                    success = _accountDao.update(Long.valueOf(accountId), acctForUpdate);\n+                } else {\n+                    if (s_logger.isInfoEnabled()) {\n+                        s_logger.info(\"Attempting to lock a non-enabled account, current state is \" + account.getState() + \" (accountId: \" + accountId + \"), locking failed.\");\n+                    }\n+                }\n+            } else {\n+                s_logger.warn(\"Failed to lock account \" + accountId + \", account not found.\");\n+            }\n+        } catch (Exception e) {\n+            s_logger.error(\"Exception occured while locking account by Quota Alert Manager\", e);\n+            throw e;\n+        } finally {\n+            TransactionLegacy.open(opendb).close();\n+        }\n+        return success;\n+    }\n+\n+    public static class DeferredQuotaEmail {\n+        private AccountVO account;\n+        private QuotaAccountVO quotaAccount;\n+        private QuotaConfig.QuotaEmailTemplateTypes emailTemplateType;\n+        private BigDecimal quotaUsage;\n+\n+        public DeferredQuotaEmail(AccountVO account, QuotaAccountVO quotaAccount, BigDecimal quotaUsage, QuotaConfig.QuotaEmailTemplateTypes emailTemplateType) {\n+            this.account = account;\n+            this.quotaAccount = quotaAccount;\n+            this.emailTemplateType = emailTemplateType;\n+            this.quotaUsage = quotaUsage;\n+        }\n+\n+        public DeferredQuotaEmail(AccountVO account, QuotaAccountVO quotaAccount, QuotaConfig.QuotaEmailTemplateTypes emailTemplateType) {\n+            this.account = account;\n+            this.quotaAccount = quotaAccount;\n+            this.emailTemplateType = emailTemplateType;\n+            this.quotaUsage = new BigDecimal(-1);\n+        }\n+\n+        public AccountVO getAccount() {\n+            return account;\n+        }\n+\n+        public BigDecimal getQuotaBalance() {\n+            return quotaAccount.getQuotaBalance();\n+        }\n+\n+        public BigDecimal getQuotaUsage() {\n+            return quotaUsage;\n+        }\n+\n+        public Date getSendDate() {\n+            if (emailTemplateType == QuotaEmailTemplateTypes.QUOTA_STATEMENT) {\n+                return quotaAccount.getLastStatementDate();\n+            } else {\n+                return quotaAccount.getQuotaAlertDate();\n+            }\n+        }\n+\n+        public QuotaConfig.QuotaEmailTemplateTypes getEmailTemplateType() {\n+            return emailTemplateType;\n+        }\n+\n+        public void sentSuccessfully(final QuotaAccountDao quotaAccountDao) {\n+            if (emailTemplateType == QuotaEmailTemplateTypes.QUOTA_STATEMENT) {\n+                quotaAccount.setLastStatementDate(new Date());\n+            } else {\n+                quotaAccount.setQuotaAlertDate(new Date());\n+                quotaAccount.setQuotaAlertType(emailTemplateType.ordinal());\n+            }\n+            quotaAccountDao.updateQuotaAccount(quotaAccount.getAccountId(), quotaAccount);\n+        }\n+    };\n+\n+    static class EmailQuotaAlert {\n+        private final Session _smtpSession;\n+        private final String _smtpHost;\n+        private final int _smtpPort;\n+        private final boolean _smtpUseAuth;\n+        private final String _smtpUsername;\n+        private final String _smtpPassword;\n+        private final String _emailSender;\n+\n+        public EmailQuotaAlert(String smtpHost, int smtpPort, boolean smtpUseAuth, final String smtpUsername, final String smtpPassword, String emailSender, boolean smtpDebug) {\n+            _smtpHost = smtpHost;\n+            _smtpPort = smtpPort;\n+            _smtpUseAuth = smtpUseAuth;\n+            _smtpUsername = smtpUsername;\n+            _smtpPassword = smtpPassword;\n+            _emailSender = emailSender;\n+\n+            if (!Strings.isNullOrEmpty(_smtpHost)) {\n+                Properties smtpProps = new Properties();\n+                smtpProps.put(\"mail.smtp.host\", smtpHost);\n+                smtpProps.put(\"mail.smtp.port\", smtpPort);\n+                smtpProps.put(\"mail.smtp.auth\", \"\" + smtpUseAuth);\n+                if (smtpUsername != null) {\n+                    smtpProps.put(\"mail.smtp.user\", smtpUsername);\n+                }\n+\n+                smtpProps.put(\"mail.smtps.host\", smtpHost);\n+                smtpProps.put(\"mail.smtps.port\", smtpPort);\n+                smtpProps.put(\"mail.smtps.auth\", \"\" + smtpUseAuth);\n+                if (!Strings.isNullOrEmpty(smtpUsername)) {\n+                    smtpProps.put(\"mail.smtps.user\", smtpUsername);\n+                }\n+\n+                if (!Strings.isNullOrEmpty(smtpUsername) && !Strings.isNullOrEmpty(smtpPassword)) {\n+                    _smtpSession = Session.getInstance(smtpProps, new Authenticator() {\n+                        @Override\n+                        protected PasswordAuthentication getPasswordAuthentication() {\n+                            return new PasswordAuthentication(smtpUsername, smtpPassword);\n+                        }\n+                    });\n+                } else {\n+                    _smtpSession = Session.getInstance(smtpProps);\n+                }\n+                _smtpSession.setDebug(smtpDebug);\n+            } else {\n+                _smtpSession = null;\n+            }\n+        }\n+\n+        public void sendQuotaAlert(List<String> emails, String subject, String body) throws MessagingException, UnsupportedEncodingException {\n+            if (_smtpSession == null) {\n+                throw new CloudRuntimeException(\"Unable to create smtp session.\");\n+            }\n+            SMTPMessage msg = new SMTPMessage(_smtpSession);\n+            msg.setSender(new InternetAddress(_emailSender, _emailSender));\n+            msg.setFrom(new InternetAddress(_emailSender, _emailSender));\n+\n+            for (String email : emails) {\n+                if (email != null && !email.isEmpty()) {\n+                    try {\n+                        InternetAddress address = new InternetAddress(email, email);\n+                        msg.addRecipient(Message.RecipientType.TO, address);\n+                    } catch (Exception pokemon) {\n+                        s_logger.error(\"Exception in creating address for:\" + email, pokemon);\n+                    }\n+                }\n+            }\n+\n+            msg.setSubject(subject);\n+            msg.setSentDate(new Date());\n+            msg.setContent(body, \"text/html; charset=utf-8\");\n+            msg.saveChanges();\n+\n+            SMTPTransport smtpTrans = null;\n+            if (_smtpUseAuth) {\n+                smtpTrans = new SMTPSSLTransport(_smtpSession, new URLName(\"smtp\", _smtpHost, _smtpPort, null, _smtpUsername, _smtpPassword));\n+            } else {\n+                smtpTrans = new SMTPTransport(_smtpSession, new URLName(\"smtp\", _smtpHost, _smtpPort, null, _smtpUsername, _smtpPassword));\n+            }\n+            smtpTrans.connect();\n+            smtpTrans.sendMessage(msg, msg.getAllRecipients());\n+            smtpTrans.close();\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/QuotaAlertManagerImpl.java",
                "sha": "a57e0c27db9c9c97c2da39ed1979cd651c13877b",
                "status": "added"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/QuotaManager.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/QuotaManager.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/QuotaManager.java",
                "patch": "@@ -0,0 +1,25 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.quota;\n+\n+import com.cloud.utils.component.Manager;\n+\n+public interface QuotaManager extends Manager {\n+\n+    boolean calculateQuotaUsage();\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/QuotaManager.java",
                "sha": "1cda3b22e440fd86d79b3283ebced6c3e92e5e5d",
                "status": "added"
            },
            {
                "additions": 464,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/QuotaManagerImpl.java",
                "changes": 464,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/QuotaManagerImpl.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/QuotaManagerImpl.java",
                "patch": "@@ -0,0 +1,464 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.quota;\n+\n+import com.cloud.usage.UsageVO;\n+import com.cloud.usage.dao.UsageDao;\n+import com.cloud.user.AccountVO;\n+import com.cloud.user.dao.AccountDao;\n+import com.cloud.utils.Pair;\n+import com.cloud.utils.component.ManagerBase;\n+\n+import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n+import org.apache.cloudstack.quota.constant.QuotaTypes;\n+import org.apache.cloudstack.quota.dao.QuotaAccountDao;\n+import org.apache.cloudstack.quota.dao.QuotaBalanceDao;\n+import org.apache.cloudstack.quota.dao.QuotaTariffDao;\n+import org.apache.cloudstack.quota.dao.QuotaUsageDao;\n+import org.apache.cloudstack.quota.dao.ServiceOfferingDao;\n+import org.apache.cloudstack.quota.vo.QuotaAccountVO;\n+import org.apache.cloudstack.quota.vo.QuotaBalanceVO;\n+import org.apache.cloudstack.quota.vo.QuotaTariffVO;\n+import org.apache.cloudstack.quota.vo.QuotaUsageVO;\n+import org.apache.cloudstack.quota.vo.ServiceOfferingVO;\n+import org.apache.cloudstack.utils.usage.UsageUtils;\n+import org.apache.log4j.Logger;\n+import org.springframework.stereotype.Component;\n+\n+import javax.ejb.Local;\n+import javax.inject.Inject;\n+import javax.naming.ConfigurationException;\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TimeZone;\n+\n+@Component\n+@Local(value = QuotaManager.class)\n+public class QuotaManagerImpl extends ManagerBase implements QuotaManager {\n+    private static final Logger s_logger = Logger.getLogger(QuotaManagerImpl.class.getName());\n+\n+    @Inject\n+    private AccountDao _accountDao;\n+    @Inject\n+    private QuotaAccountDao _quotaAcc;\n+    @Inject\n+    private UsageDao _usageDao;\n+    @Inject\n+    private QuotaTariffDao _quotaTariffDao;\n+    @Inject\n+    private QuotaUsageDao _quotaUsageDao;\n+    @Inject\n+    private ServiceOfferingDao _serviceOfferingDao;\n+    @Inject\n+    private QuotaBalanceDao _quotaBalanceDao;\n+    @Inject\n+    private ConfigurationDao _configDao;\n+\n+    private TimeZone _usageTimezone;\n+    private int _aggregationDuration = 0;\n+\n+    final static BigDecimal s_hoursInMonth = new BigDecimal(30 * 24);\n+    final static BigDecimal s_minutesInMonth = new BigDecimal(30 * 24 * 60);\n+    final static BigDecimal s_gb = new BigDecimal(1024 * 1024 * 1024);\n+\n+    public QuotaManagerImpl() {\n+        super();\n+    }\n+\n+    private void mergeConfigs(Map<String, String> dbParams, Map<String, Object> xmlParams) {\n+        for (Map.Entry<String, Object> param : xmlParams.entrySet()) {\n+            dbParams.put(param.getKey(), (String)param.getValue());\n+        }\n+    }\n+\n+    @Override\n+    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n+        super.configure(name, params);\n+\n+        Map<String, String> configs = _configDao.getConfiguration(params);\n+\n+        if (params != null) {\n+            mergeConfigs(configs, params);\n+        }\n+\n+        String aggregationRange = configs.get(\"usage.stats.job.aggregation.range\");\n+        String timeZoneStr = configs.get(\"usage.aggregation.timezone\");\n+\n+        if (timeZoneStr == null) {\n+            timeZoneStr = \"GMT\";\n+        }\n+        _usageTimezone = TimeZone.getTimeZone(timeZoneStr);\n+\n+        _aggregationDuration = Integer.parseInt(aggregationRange);\n+        if (_aggregationDuration < UsageUtils.USAGE_AGGREGATION_RANGE_MIN) {\n+            s_logger.warn(\"Usage stats job aggregation range is to small, using the minimum value of \" + UsageUtils.USAGE_AGGREGATION_RANGE_MIN);\n+            _aggregationDuration = UsageUtils.USAGE_AGGREGATION_RANGE_MIN;\n+        }\n+        s_logger.info(\"Usage timezone = \" + _usageTimezone + \" AggregationDuration=\" + _aggregationDuration);\n+\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean start() {\n+        if (s_logger.isInfoEnabled()) {\n+            s_logger.info(\"Starting Quota Manager\");\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean stop() {\n+        if (s_logger.isInfoEnabled()) {\n+            s_logger.info(\"Stopping Quota Manager\");\n+        }\n+        return true;\n+    }\n+\n+    public List<QuotaUsageVO> aggregatePendingQuotaRecordsForAccount(final AccountVO account, final Pair<List<? extends UsageVO>, Integer> usageRecords) {\n+        List<QuotaUsageVO> quotaListForAccount = new ArrayList<>();\n+        if (usageRecords == null || usageRecords.first() == null || usageRecords.first().isEmpty()) {\n+            return quotaListForAccount;\n+        }\n+        s_logger.info(\"Getting pending quota records for account=\" + account.getAccountName());\n+        for (UsageVO usageRecord : usageRecords.first()) {\n+            BigDecimal aggregationRatio = new BigDecimal(_aggregationDuration).divide(s_minutesInMonth, 8, RoundingMode.HALF_EVEN);\n+            switch (usageRecord.getUsageType()) {\n+            case QuotaTypes.RUNNING_VM:\n+                List<QuotaUsageVO> lq = updateQuotaRunningVMUsage(usageRecord, aggregationRatio);\n+                if (!lq.isEmpty()) {\n+                    quotaListForAccount.addAll(lq);\n+                }\n+                break;\n+            case QuotaTypes.ALLOCATED_VM:\n+                QuotaUsageVO qu = updateQuotaAllocatedVMUsage(usageRecord, aggregationRatio);\n+                if (qu != null) {\n+                    quotaListForAccount.add(qu);\n+                }\n+                break;\n+            case QuotaTypes.SNAPSHOT:\n+            case QuotaTypes.TEMPLATE:\n+            case QuotaTypes.ISO:\n+            case QuotaTypes.VOLUME:\n+            case QuotaTypes.VM_SNAPSHOT:\n+                qu = updateQuotaDiskUsage(usageRecord, aggregationRatio, usageRecord.getUsageType());\n+                if (qu != null) {\n+                    quotaListForAccount.add(qu);\n+                }\n+                break;\n+            case QuotaTypes.LOAD_BALANCER_POLICY:\n+            case QuotaTypes.PORT_FORWARDING_RULE:\n+            case QuotaTypes.IP_ADDRESS:\n+            case QuotaTypes.NETWORK_OFFERING:\n+            case QuotaTypes.SECURITY_GROUP:\n+            case QuotaTypes.VPN_USERS:\n+                qu = updateQuotaRaw(usageRecord, aggregationRatio, usageRecord.getUsageType());\n+                if (qu != null) {\n+                    quotaListForAccount.add(qu);\n+                }\n+                break;\n+            case QuotaTypes.NETWORK_BYTES_RECEIVED:\n+            case QuotaTypes.NETWORK_BYTES_SENT:\n+                qu = updateQuotaNetwork(usageRecord, usageRecord.getUsageType());\n+                if (qu != null) {\n+                    quotaListForAccount.add(qu);\n+                }\n+                break;\n+            case QuotaTypes.VM_DISK_IO_READ:\n+            case QuotaTypes.VM_DISK_IO_WRITE:\n+            case QuotaTypes.VM_DISK_BYTES_READ:\n+            case QuotaTypes.VM_DISK_BYTES_WRITE:\n+            default:\n+                break;\n+            }\n+        }\n+        return quotaListForAccount;\n+    }\n+\n+    public void processQuotaBalanceForAccount(final AccountVO account, final List<QuotaUsageVO> quotaListForAccount) {\n+        if (quotaListForAccount == null || quotaListForAccount.isEmpty()) {\n+            return;\n+        }\n+        if (s_logger.isDebugEnabled()) {\n+            s_logger.debug(quotaListForAccount.get(0));\n+        }\n+        Date startDate = quotaListForAccount.get(0).getStartDate();\n+        Date endDate = quotaListForAccount.get(0).getEndDate();\n+        if (s_logger.isDebugEnabled()) {\n+            s_logger.debug(\"processQuotaBalanceForAccount startDate \" + startDate + \" endDate=\" + endDate);\n+            s_logger.debug(\"processQuotaBalanceForAccount last items startDate \" + quotaListForAccount.get(quotaListForAccount.size() - 1).getStartDate() + \" items endDate=\"\n+                    + quotaListForAccount.get(quotaListForAccount.size() - 1).getEndDate());\n+        }\n+        quotaListForAccount.add(new QuotaUsageVO());\n+        BigDecimal aggrUsage = new BigDecimal(0);\n+        List<QuotaBalanceVO> creditsReceived = null;\n+\n+        //bootstrapping\n+        QuotaUsageVO lastQuotaUsage = _quotaUsageDao.findLastQuotaUsageEntry(account.getAccountId(), account.getDomainId(), startDate);\n+        if (lastQuotaUsage == null) {\n+            creditsReceived = _quotaBalanceDao.findCreditBalance(account.getAccountId(), account.getDomainId(), new Date(0), startDate);\n+            if (s_logger.isDebugEnabled()) {\n+                s_logger.debug(\"Credit entries count \" + creditsReceived.size() + \" on Before Date=\" + startDate);\n+            }\n+            if (creditsReceived != null) {\n+                for (QuotaBalanceVO credit : creditsReceived) {\n+                    if (s_logger.isDebugEnabled()) {\n+                        s_logger.debug(\"Credit entry found \" + credit);\n+                        s_logger.debug(\"Total = \" + aggrUsage);\n+                    }\n+                    aggrUsage = aggrUsage.add(credit.getCreditBalance());\n+                }\n+            }\n+            // create a balance entry for these accumulated credits\n+            QuotaBalanceVO firstBalance = new QuotaBalanceVO(account.getAccountId(), account.getDomainId(), aggrUsage, startDate);\n+            _quotaBalanceDao.saveQuotaBalance(firstBalance);\n+        }\n+        else {\n+            QuotaBalanceVO lastRealBalanceEntry = _quotaBalanceDao.findLastBalanceEntry(account.getAccountId(), account.getDomainId(), endDate);\n+            aggrUsage = aggrUsage.add(lastRealBalanceEntry.getCreditBalance());\n+            if (s_logger.isDebugEnabled()) {\n+                s_logger.debug(\"Last balance entry  \" + lastRealBalanceEntry + \" AggrUsage=\" + aggrUsage);\n+            }\n+        }\n+\n+        for (QuotaUsageVO entry : quotaListForAccount) {\n+            if (s_logger.isDebugEnabled()) {\n+                s_logger.debug(\"Usage entry found \" + entry);\n+            }\n+            if (entry.getQuotaUsed().compareTo(BigDecimal.ZERO) == 0) {\n+                // check if there were credits\n+                creditsReceived = _quotaBalanceDao.findCreditBalance(account.getAccountId(), account.getDomainId(), entry.getStartDate(), entry.getEndDate());\n+                if (creditsReceived != null) {\n+                    for (QuotaBalanceVO credit : creditsReceived) {\n+                        if (s_logger.isDebugEnabled()) {\n+                            s_logger.debug(\"Credit entry found \" + credit);\n+                            s_logger.debug(\"Total = \" + aggrUsage);\n+                        }\n+                        aggrUsage = aggrUsage.add(credit.getCreditBalance());\n+                    }\n+                }\n+                continue;\n+            }\n+            if (startDate.compareTo(entry.getStartDate()) != 0) {\n+                QuotaBalanceVO newBalance = new QuotaBalanceVO(account.getAccountId(), account.getDomainId(), aggrUsage, endDate);\n+                _quotaBalanceDao.saveQuotaBalance(newBalance);\n+                if (s_logger.isDebugEnabled()) {\n+                    s_logger.debug(\"Saving Balance\" + newBalance);\n+                }\n+\n+                //New balance entry\n+                aggrUsage = new BigDecimal(0);\n+                startDate = entry.getStartDate();\n+                endDate = entry.getEndDate();\n+\n+                QuotaBalanceVO lastRealBalanceEntry = _quotaBalanceDao.findLastBalanceEntry(account.getAccountId(), account.getDomainId(), endDate);\n+                Date lastBalanceDate = new Date(0);\n+                if (lastRealBalanceEntry != null) {\n+                    lastBalanceDate = lastRealBalanceEntry.getUpdatedOn();\n+                    aggrUsage = aggrUsage.add(lastRealBalanceEntry.getCreditBalance());\n+                }\n+                creditsReceived = _quotaBalanceDao.findCreditBalance(account.getAccountId(), account.getDomainId(), lastBalanceDate, endDate);\n+                if (creditsReceived != null) {\n+                    for (QuotaBalanceVO credit : creditsReceived) {\n+                        aggrUsage = aggrUsage.add(credit.getCreditBalance());\n+                    }\n+                }\n+                if (s_logger.isDebugEnabled()) {\n+                    s_logger.debug(\"Getting Balance\" + account.getAccountName() + \",Balance entry=\" + aggrUsage + \" on Date=\" + endDate);\n+                }\n+            }\n+            aggrUsage = aggrUsage.subtract(entry.getQuotaUsed());\n+        }\n+        QuotaBalanceVO newBalance = new QuotaBalanceVO(account.getAccountId(), account.getDomainId(), aggrUsage, endDate);\n+        _quotaBalanceDao.saveQuotaBalance(newBalance);\n+        if (s_logger.isDebugEnabled()) {\n+            s_logger.debug(\"Saving Balance\" + newBalance);\n+        }\n+\n+        // update quota_accounts\n+        QuotaAccountVO quota_account = _quotaAcc.findByIdQuotaAccount(account.getAccountId());\n+\n+        if (quota_account == null) {\n+            quota_account = new QuotaAccountVO(account.getAccountId());\n+            quota_account.setQuotaBalance(aggrUsage);\n+            quota_account.setQuotaBalanceDate(endDate);\n+            if (s_logger.isDebugEnabled()) {\n+                s_logger.debug(quota_account);\n+            }\n+            _quotaAcc.persistQuotaAccount(quota_account);\n+        } else {\n+            quota_account.setQuotaBalance(aggrUsage);\n+            quota_account.setQuotaBalanceDate(endDate);\n+            if (s_logger.isDebugEnabled()) {\n+                s_logger.debug(quota_account);\n+            }\n+            _quotaAcc.updateQuotaAccount(account.getAccountId(), quota_account);\n+        }\n+    }\n+\n+    @Override\n+    public boolean calculateQuotaUsage() {\n+        List<AccountVO> accounts = _accountDao.listAll();\n+        for (AccountVO account : accounts) {\n+            Pair<List<? extends UsageVO>, Integer> usageRecords = _usageDao.getUsageRecordsPendingQuotaAggregation(account.getAccountId(), account.getDomainId());\n+            if (s_logger.isDebugEnabled()) {\n+                s_logger.debug(\"Usage entries size = \" + usageRecords.second().intValue() + \", accId\" + account.getAccountId() + \", domId\" + account.getDomainId());\n+            }\n+            List<QuotaUsageVO> quotaListForAccount = aggregatePendingQuotaRecordsForAccount(account, usageRecords);\n+            if (s_logger.isDebugEnabled()) {\n+                s_logger.debug(\"Quota entries size = \" + quotaListForAccount.size() + \", accId\" + account.getAccountId() + \", domId\" + account.getDomainId());\n+            }\n+            processQuotaBalanceForAccount(account, quotaListForAccount);\n+        }\n+        return true;\n+    }\n+\n+    public QuotaUsageVO updateQuotaDiskUsage(UsageVO usageRecord, final BigDecimal aggregationRatio, final int quotaType) {\n+        QuotaUsageVO quota_usage = null;\n+        QuotaTariffVO tariff = _quotaTariffDao.findTariffPlanByUsageType(quotaType, usageRecord.getEndDate());\n+        if (tariff != null && tariff.getCurrencyValue().compareTo(BigDecimal.ZERO) != 0) {\n+            BigDecimal quotaUsgage;\n+            BigDecimal onehourcostpergb;\n+            BigDecimal noofgbinuse;\n+            onehourcostpergb = tariff.getCurrencyValue().multiply(aggregationRatio);\n+            noofgbinuse = new BigDecimal(usageRecord.getSize()).divide(s_gb, 8, RoundingMode.HALF_EVEN);\n+            quotaUsgage = new BigDecimal(usageRecord.getRawUsage()).multiply(onehourcostpergb).multiply(noofgbinuse);\n+            quota_usage = new QuotaUsageVO(usageRecord.getId(), usageRecord.getZoneId(), usageRecord.getAccountId(), usageRecord.getDomainId(), usageRecord.getUsageType(),\n+                    quotaUsgage, usageRecord.getStartDate(), usageRecord.getEndDate());\n+            _quotaUsageDao.persistQuotaUsage(quota_usage);\n+        }\n+        usageRecord.setQuotaCalculated(1);\n+        _usageDao.persistUsage(usageRecord);\n+        return quota_usage;\n+    }\n+\n+    public List<QuotaUsageVO> updateQuotaRunningVMUsage(UsageVO usageRecord, final BigDecimal aggregationRatio) {\n+        List<QuotaUsageVO> quotalist = new ArrayList<QuotaUsageVO>();\n+        QuotaUsageVO quota_usage;\n+        BigDecimal cpuquotausgage, speedquotausage, memoryquotausage, vmusage;\n+        BigDecimal onehourcostpercpu, onehourcostper100mhz, onehourcostper1mb, onehourcostforvmusage;\n+        BigDecimal rawusage;\n+        // get service offering details\n+        ServiceOfferingVO serviceoffering = _serviceOfferingDao.findServiceOffering(usageRecord.getVmInstanceId(), usageRecord.getOfferingId());\n+        rawusage = new BigDecimal(usageRecord.getRawUsage());\n+\n+        QuotaTariffVO tariff = _quotaTariffDao.findTariffPlanByUsageType(QuotaTypes.CPU_NUMBER, usageRecord.getEndDate());\n+        if (tariff != null && tariff.getCurrencyValue().compareTo(BigDecimal.ZERO) != 0) {\n+            BigDecimal cpu = new BigDecimal(serviceoffering.getCpu());\n+            onehourcostpercpu = tariff.getCurrencyValue().multiply(aggregationRatio);\n+            cpuquotausgage = rawusage.multiply(onehourcostpercpu).multiply(cpu);\n+            quota_usage = new QuotaUsageVO(usageRecord.getId(), usageRecord.getZoneId(), usageRecord.getAccountId(), usageRecord.getDomainId(), QuotaTypes.CPU_NUMBER,\n+                    cpuquotausgage, usageRecord.getStartDate(), usageRecord.getEndDate());\n+            _quotaUsageDao.persistQuotaUsage(quota_usage);\n+            quotalist.add(quota_usage);\n+        }\n+        tariff = _quotaTariffDao.findTariffPlanByUsageType(QuotaTypes.CPU_CLOCK_RATE, usageRecord.getEndDate());\n+        if (tariff != null && tariff.getCurrencyValue().compareTo(BigDecimal.ZERO) != 0) {\n+            BigDecimal speed = new BigDecimal(serviceoffering.getSpeed() / 100.00);\n+            onehourcostper100mhz = tariff.getCurrencyValue().multiply(aggregationRatio);\n+            speedquotausage = rawusage.multiply(onehourcostper100mhz).multiply(speed);\n+            quota_usage = new QuotaUsageVO(usageRecord.getId(), usageRecord.getZoneId(), usageRecord.getAccountId(), usageRecord.getDomainId(), QuotaTypes.CPU_CLOCK_RATE,\n+                    speedquotausage, usageRecord.getStartDate(), usageRecord.getEndDate());\n+            _quotaUsageDao.persistQuotaUsage(quota_usage);\n+            quotalist.add(quota_usage);\n+        }\n+        tariff = _quotaTariffDao.findTariffPlanByUsageType(QuotaTypes.MEMORY, usageRecord.getEndDate());\n+        if (tariff != null && tariff.getCurrencyValue().compareTo(BigDecimal.ZERO) != 0) {\n+            BigDecimal memory = new BigDecimal(serviceoffering.getRamSize());\n+            onehourcostper1mb = tariff.getCurrencyValue().multiply(aggregationRatio);\n+            memoryquotausage = rawusage.multiply(onehourcostper1mb).multiply(memory);\n+            quota_usage = new QuotaUsageVO(usageRecord.getId(), usageRecord.getZoneId(), usageRecord.getAccountId(), usageRecord.getDomainId(), QuotaTypes.MEMORY, memoryquotausage,\n+                    usageRecord.getStartDate(), usageRecord.getEndDate());\n+            _quotaUsageDao.persistQuotaUsage(quota_usage);\n+            quotalist.add(quota_usage);\n+        }\n+        tariff = _quotaTariffDao.findTariffPlanByUsageType(QuotaTypes.RUNNING_VM, usageRecord.getEndDate());\n+        if (tariff != null && tariff.getCurrencyValue().compareTo(BigDecimal.ZERO) != 0) {\n+            onehourcostforvmusage = tariff.getCurrencyValue().multiply(aggregationRatio);\n+            vmusage = rawusage.multiply(onehourcostforvmusage);\n+            quota_usage = new QuotaUsageVO(usageRecord.getId(), usageRecord.getZoneId(), usageRecord.getAccountId(), usageRecord.getDomainId(), QuotaTypes.RUNNING_VM, vmusage,\n+                    usageRecord.getStartDate(), usageRecord.getEndDate());\n+            _quotaUsageDao.persistQuotaUsage(quota_usage);\n+            quotalist.add(quota_usage);\n+        }\n+\n+        usageRecord.setQuotaCalculated(1);\n+        _usageDao.persistUsage(usageRecord);\n+        return quotalist;\n+    }\n+\n+    public QuotaUsageVO updateQuotaAllocatedVMUsage(UsageVO usageRecord, final BigDecimal aggregationRatio) {\n+        QuotaUsageVO quota_usage = null;\n+        QuotaTariffVO tariff = _quotaTariffDao.findTariffPlanByUsageType(QuotaTypes.ALLOCATED_VM, usageRecord.getEndDate());\n+        if (tariff != null && tariff.getCurrencyValue().compareTo(BigDecimal.ZERO) != 0) {\n+            BigDecimal vmusage;\n+            BigDecimal onehourcostforvmusage;\n+            onehourcostforvmusage = tariff.getCurrencyValue().multiply(aggregationRatio);\n+            vmusage = new BigDecimal(usageRecord.getRawUsage()).multiply(onehourcostforvmusage);\n+            quota_usage = new QuotaUsageVO(usageRecord.getId(), usageRecord.getZoneId(), usageRecord.getAccountId(), usageRecord.getDomainId(), QuotaTypes.ALLOCATED_VM, vmusage,\n+                    usageRecord.getStartDate(), usageRecord.getEndDate());\n+            _quotaUsageDao.persistQuotaUsage(quota_usage);\n+        }\n+\n+        usageRecord.setQuotaCalculated(1);\n+        _usageDao.persistUsage(usageRecord);\n+        return quota_usage;\n+    }\n+\n+    public QuotaUsageVO updateQuotaRaw(UsageVO usageRecord, final BigDecimal aggregationRatio, final int ruleType) {\n+        QuotaUsageVO quota_usage = null;\n+        QuotaTariffVO tariff = _quotaTariffDao.findTariffPlanByUsageType(ruleType, usageRecord.getEndDate());\n+        if (tariff != null && tariff.getCurrencyValue().compareTo(BigDecimal.ZERO) != 0) {\n+            BigDecimal ruleusage;\n+            BigDecimal onehourcost;\n+            onehourcost = tariff.getCurrencyValue().multiply(aggregationRatio);\n+            ruleusage = new BigDecimal(usageRecord.getRawUsage()).multiply(onehourcost);\n+            quota_usage = new QuotaUsageVO(usageRecord.getId(), usageRecord.getZoneId(), usageRecord.getAccountId(), usageRecord.getDomainId(), ruleType, ruleusage,\n+                    usageRecord.getStartDate(), usageRecord.getEndDate());\n+            _quotaUsageDao.persistQuotaUsage(quota_usage);\n+        }\n+\n+        usageRecord.setQuotaCalculated(1);\n+        _usageDao.persistUsage(usageRecord);\n+        return quota_usage;\n+    }\n+\n+    public QuotaUsageVO updateQuotaNetwork(UsageVO usageRecord, final int transferType) {\n+        QuotaUsageVO quota_usage = null;\n+        QuotaTariffVO tariff = _quotaTariffDao.findTariffPlanByUsageType(transferType, usageRecord.getEndDate());\n+        if (tariff != null && tariff.getCurrencyValue().compareTo(BigDecimal.ZERO) != 0) {\n+            BigDecimal onegbcost;\n+            BigDecimal rawusageingb;\n+            BigDecimal networkusage;\n+            onegbcost = tariff.getCurrencyValue();\n+            rawusageingb = new BigDecimal(usageRecord.getRawUsage()).divide(s_gb, 8, RoundingMode.HALF_EVEN);\n+            networkusage = rawusageingb.multiply(onegbcost);\n+            quota_usage = new QuotaUsageVO(usageRecord.getId(), usageRecord.getZoneId(), usageRecord.getAccountId(), usageRecord.getDomainId(), transferType, networkusage,\n+                    usageRecord.getStartDate(), usageRecord.getEndDate());\n+            _quotaUsageDao.persistQuotaUsage(quota_usage);\n+        }\n+\n+        usageRecord.setQuotaCalculated(1);\n+        _usageDao.persistUsage(usageRecord);\n+        return quota_usage;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/QuotaManagerImpl.java",
                "sha": "d7c301e1beac578713cfb3a0599485b1bd8c0aa9",
                "status": "added"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/QuotaStatement.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/QuotaStatement.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/QuotaStatement.java",
                "patch": "@@ -0,0 +1,26 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.quota;\n+\n+import java.util.Calendar;\n+\n+import com.cloud.utils.component.Manager;\n+\n+public interface QuotaStatement extends Manager {\n+    void sendStatement();\n+    Calendar[] getCurrentStatementTime();\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/QuotaStatement.java",
                "sha": "e6f5e25eaea834ef5e7797b89dc8beaa376d8f23",
                "status": "added"
            },
            {
                "additions": 376,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/QuotaStatementImpl.java",
                "changes": 376,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/QuotaStatementImpl.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/QuotaStatementImpl.java",
                "patch": "@@ -0,0 +1,376 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.quota;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.ejb.Local;\n+import javax.inject.Inject;\n+import javax.naming.ConfigurationException;\n+\n+import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n+import org.apache.cloudstack.quota.QuotaAlertManagerImpl.DeferredQuotaEmail;\n+import org.apache.cloudstack.quota.constant.QuotaConfig;\n+import org.apache.cloudstack.quota.dao.QuotaAccountDao;\n+import org.apache.cloudstack.quota.dao.QuotaUsageDao;\n+import org.apache.cloudstack.quota.vo.QuotaAccountVO;\n+import org.apache.log4j.Logger;\n+import org.springframework.stereotype.Component;\n+\n+import com.cloud.user.AccountVO;\n+import com.cloud.user.dao.AccountDao;\n+import com.cloud.utils.component.ManagerBase;\n+\n+@Component\n+@Local(value = QuotaStatement.class)\n+public class QuotaStatementImpl extends ManagerBase implements QuotaStatement {\n+    private static final Logger s_logger = Logger.getLogger(QuotaStatementImpl.class);\n+\n+    @Inject\n+    private AccountDao _accountDao;\n+    @Inject\n+    private QuotaAccountDao _quotaAcc;\n+    @Inject\n+    private QuotaUsageDao _quotaUsage;\n+    @Inject\n+    private QuotaAlertManager _quotaAlert;\n+    @Inject\n+    private ConfigurationDao _configDao;\n+\n+    final public static int s_LAST_STATEMENT_SENT_DAYS = 6; //ideally should be less than 7 days\n+\n+    public enum STATEMENT_PERIODS {\n+        BIMONTHLY, MONTHLY, QUATERLY, HALFYEARLY, YEARLY\n+    };\n+\n+    private STATEMENT_PERIODS _period = STATEMENT_PERIODS.MONTHLY;\n+\n+    public QuotaStatementImpl() {\n+        super();\n+    }\n+\n+    private void mergeConfigs(Map<String, String> dbParams, Map<String, Object> xmlParams) {\n+        for (Map.Entry<String, Object> param : xmlParams.entrySet()) {\n+            dbParams.put(param.getKey(), (String)param.getValue());\n+        }\n+    }\n+\n+    @Override\n+    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n+        super.configure(name, params);\n+\n+        Map<String, String> configs = _configDao.getConfiguration(params);\n+\n+        if (params != null) {\n+            mergeConfigs(configs, params);\n+        }\n+        String period_str = configs.get(QuotaConfig.QuotaStatementPeriod.key());\n+        int period = period_str == null ? 1 : Integer.valueOf(period_str);\n+\n+        STATEMENT_PERIODS _period = STATEMENT_PERIODS.values()[period];\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean start() {\n+        if (s_logger.isInfoEnabled()) {\n+            s_logger.info(\"Starting Statement Manager\");\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean stop() {\n+        if (s_logger.isInfoEnabled()) {\n+            s_logger.info(\"Stopping Statement Manager\");\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public void sendStatement() {\n+\n+        List<DeferredQuotaEmail> deferredQuotaEmailList = new ArrayList<DeferredQuotaEmail>();\n+        for (final QuotaAccountVO quotaAccount : _quotaAcc.listAllQuotaAccount()) {\n+            if (quotaAccount.getQuotaBalance() == null) {\n+                continue; // no quota usage for this account ever, ignore\n+            }\n+\n+            //check if it is statement time\n+            Calendar interval[] = statementTime(Calendar.getInstance(), _period);\n+\n+            Date lastStatementDate = quotaAccount.getLastStatementDate();\n+            if (interval != null) {\n+                AccountVO account = _accountDao.findById(quotaAccount.getId());\n+                if (lastStatementDate == null || getDifferenceDays(lastStatementDate, new Date()) >= s_LAST_STATEMENT_SENT_DAYS + 1) {\n+                    BigDecimal quotaUsage = _quotaUsage.findTotalQuotaUsage(account.getAccountId(), account.getDomainId(), null, interval[0].getTime(), interval[1].getTime());\n+                    s_logger.info(\"For account=\" + quotaAccount.getId() + \", quota used = \" + quotaUsage);\n+                    // send statement\n+                    deferredQuotaEmailList.add(new DeferredQuotaEmail(account, quotaAccount, quotaUsage, QuotaConfig.QuotaEmailTemplateTypes.QUOTA_STATEMENT));\n+                } else {\n+                    if (s_logger.isDebugEnabled()) {\n+                        s_logger.debug(\"For \" + quotaAccount.getId() + \" the statement has been sent recently\");\n+\n+                    }\n+                }\n+            } else if (lastStatementDate != null) {\n+                s_logger.info(\"For \" + quotaAccount.getId() + \" it is already more than \" + getDifferenceDays(lastStatementDate, new Date())\n+                        + \" days, will send statement in next cycle\");\n+            }\n+        }\n+\n+        for (DeferredQuotaEmail emailToBeSent : deferredQuotaEmailList) {\n+            if (s_logger.isDebugEnabled()) {\n+                s_logger.debug(\"Attempting to send quota STATEMENT email to users of account: \" + emailToBeSent.getAccount().getAccountName());\n+            }\n+            _quotaAlert.sendQuotaAlert(emailToBeSent);\n+        }\n+    }\n+\n+    @Override\n+    public Calendar[] getCurrentStatementTime() {\n+        final Calendar today = Calendar.getInstance();\n+        int day_of_month = today.get(Calendar.DAY_OF_MONTH);\n+        int month_of_year = today.get(Calendar.MONTH);\n+\n+        Calendar firstDateOfCurrentPeriod, lastDateOfCurrentPeriod;\n+        Calendar aCalendar = (Calendar)today.clone();\n+        aCalendar.add(Calendar.DATE, 1);\n+        aCalendar.set(Calendar.HOUR, 0);\n+        aCalendar.set(Calendar.MINUTE, 0);\n+        aCalendar.set(Calendar.SECOND, 0);\n+        lastDateOfCurrentPeriod = aCalendar;\n+\n+        switch (_period) {\n+        case BIMONTHLY:\n+            if (day_of_month < 16) {\n+                aCalendar = (Calendar)today.clone();\n+                aCalendar.add(Calendar.MONTH, 0);\n+                aCalendar.set(Calendar.DATE, 1);\n+                aCalendar.set(Calendar.HOUR, 0);\n+                aCalendar.set(Calendar.MINUTE, 0);\n+                aCalendar.set(Calendar.SECOND, 0);\n+                firstDateOfCurrentPeriod = aCalendar;\n+                return new Calendar[] {firstDateOfCurrentPeriod, lastDateOfCurrentPeriod};\n+            } else {\n+                aCalendar = (Calendar)today.clone();\n+                aCalendar.set(Calendar.DATE, 16);\n+                aCalendar.set(Calendar.HOUR, 0);\n+                aCalendar.set(Calendar.MINUTE, 0);\n+                aCalendar.set(Calendar.SECOND, 0);\n+                firstDateOfCurrentPeriod = aCalendar;\n+                return new Calendar[] {firstDateOfCurrentPeriod, lastDateOfCurrentPeriod};\n+            }\n+        case MONTHLY:\n+            aCalendar = (Calendar)today.clone();\n+            aCalendar.set(Calendar.DATE, 1);\n+            aCalendar.set(Calendar.HOUR, 0);\n+            aCalendar.set(Calendar.MINUTE, 0);\n+            aCalendar.set(Calendar.SECOND, 0);\n+            firstDateOfCurrentPeriod = aCalendar;\n+            return new Calendar[] {firstDateOfCurrentPeriod, lastDateOfCurrentPeriod};\n+        case QUATERLY:\n+            if (month_of_year < Calendar.APRIL) {\n+                aCalendar = (Calendar)today.clone();\n+                aCalendar.set(Calendar.MONTH, Calendar.JANUARY);\n+                aCalendar.set(Calendar.DATE, 1);\n+                aCalendar.set(Calendar.HOUR, 0);\n+                aCalendar.set(Calendar.MINUTE, 0);\n+                aCalendar.set(Calendar.SECOND, 0);\n+                firstDateOfCurrentPeriod = aCalendar;\n+                return new Calendar[] {firstDateOfCurrentPeriod, lastDateOfCurrentPeriod};\n+            } else if (month_of_year < Calendar.JULY) {\n+                aCalendar = (Calendar)today.clone();\n+                aCalendar.set(Calendar.MONTH, Calendar.APRIL);\n+                aCalendar.set(Calendar.DATE, 1);\n+                aCalendar.set(Calendar.HOUR, 0);\n+                aCalendar.set(Calendar.MINUTE, 0);\n+                aCalendar.set(Calendar.SECOND, 0);\n+                firstDateOfCurrentPeriod = aCalendar;\n+                return new Calendar[] {firstDateOfCurrentPeriod, lastDateOfCurrentPeriod};\n+            } else if (month_of_year < Calendar.OCTOBER) {\n+                aCalendar = (Calendar)today.clone();\n+                aCalendar.set(Calendar.MONTH, Calendar.JULY);\n+                aCalendar.set(Calendar.DATE, 1);\n+                aCalendar.set(Calendar.HOUR, 0);\n+                aCalendar.set(Calendar.MINUTE, 0);\n+                aCalendar.set(Calendar.SECOND, 0);\n+                firstDateOfCurrentPeriod = aCalendar;\n+                return new Calendar[] {firstDateOfCurrentPeriod, lastDateOfCurrentPeriod};\n+            } else {\n+                aCalendar = (Calendar)today.clone();\n+                aCalendar.set(Calendar.MONTH, Calendar.OCTOBER);\n+                aCalendar.set(Calendar.DATE, 1);\n+                aCalendar.set(Calendar.HOUR, 0);\n+                aCalendar.set(Calendar.MINUTE, 0);\n+                aCalendar.set(Calendar.SECOND, 0);\n+                firstDateOfCurrentPeriod = aCalendar;\n+                return new Calendar[] {firstDateOfCurrentPeriod, lastDateOfCurrentPeriod};\n+            }\n+        case HALFYEARLY:\n+            // statements are sent in Jan=1, Jul 7,\n+            if (month_of_year < Calendar.JULY) {\n+                aCalendar = (Calendar)today.clone();\n+                aCalendar.set(Calendar.MONTH, Calendar.JANUARY);\n+                aCalendar.set(Calendar.DATE, 1);\n+                aCalendar.set(Calendar.HOUR, 0);\n+                aCalendar.set(Calendar.MINUTE, 0);\n+                aCalendar.set(Calendar.SECOND, 0);\n+                firstDateOfCurrentPeriod = aCalendar;\n+                return new Calendar[] {firstDateOfCurrentPeriod, lastDateOfCurrentPeriod};\n+            } else {\n+                aCalendar = (Calendar)today.clone();\n+                aCalendar.set(Calendar.MONTH, Calendar.JULY);\n+                aCalendar.set(Calendar.DATE, 1);\n+                aCalendar.set(Calendar.HOUR, 0);\n+                aCalendar.set(Calendar.MINUTE, 0);\n+                aCalendar.set(Calendar.SECOND, 0);\n+                firstDateOfCurrentPeriod = aCalendar;\n+                return new Calendar[] {firstDateOfCurrentPeriod, lastDateOfCurrentPeriod};\n+            }\n+        case YEARLY:\n+            aCalendar = (Calendar)today.clone();\n+            aCalendar.add(Calendar.MONTH, Calendar.JANUARY);\n+            aCalendar.set(Calendar.DATE, 1);\n+            aCalendar.set(Calendar.HOUR, 0);\n+            aCalendar.set(Calendar.MINUTE, 0);\n+            aCalendar.set(Calendar.SECOND, 0);\n+            firstDateOfCurrentPeriod = aCalendar;\n+            return new Calendar[] {firstDateOfCurrentPeriod, lastDateOfCurrentPeriod};\n+        default:\n+            break;\n+        }\n+        return null;\n+    }\n+\n+    public Calendar[] statementTime(final Calendar today, final STATEMENT_PERIODS period) {\n+        //check if it is statement time\n+        int day_of_month = today.get(Calendar.DAY_OF_MONTH);\n+        int month_of_year = today.get(Calendar.MONTH);\n+        Calendar firstDateOfPreviousPeriod, lastDateOfPreviousPeriod;\n+        switch (period) {\n+        case BIMONTHLY:\n+            if (day_of_month < s_LAST_STATEMENT_SENT_DAYS) {\n+                Calendar aCalendar = (Calendar)today.clone();\n+                aCalendar.add(Calendar.MONTH, 0);\n+                aCalendar.set(Calendar.DATE, 1);\n+                aCalendar.set(Calendar.HOUR, 0);\n+                aCalendar.set(Calendar.MINUTE, 0);\n+                aCalendar.set(Calendar.SECOND, 0);\n+                firstDateOfPreviousPeriod = (Calendar)aCalendar.clone();\n+                aCalendar.set(Calendar.DATE, 15);\n+                lastDateOfPreviousPeriod = (Calendar)aCalendar.clone();\n+                return new Calendar[] {firstDateOfPreviousPeriod, lastDateOfPreviousPeriod};\n+            } else if (day_of_month > 15 && (day_of_month - 15) < s_LAST_STATEMENT_SENT_DAYS) {\n+                Calendar aCalendar = (Calendar)today.clone();\n+                aCalendar.add(Calendar.MONTH, -1);\n+                aCalendar.set(Calendar.DATE, 16);\n+                aCalendar.set(Calendar.HOUR, 0);\n+                aCalendar.set(Calendar.MINUTE, 0);\n+                aCalendar.set(Calendar.SECOND, 0);\n+                firstDateOfPreviousPeriod = (Calendar)aCalendar.clone();\n+                aCalendar.set(Calendar.DATE, aCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1);\n+                lastDateOfPreviousPeriod = (Calendar)aCalendar.clone();\n+                return new Calendar[] {firstDateOfPreviousPeriod, lastDateOfPreviousPeriod};\n+            }\n+            return null;\n+        case MONTHLY:\n+            if (day_of_month < s_LAST_STATEMENT_SENT_DAYS) {\n+                Calendar aCalendar = (Calendar)today.clone();\n+                aCalendar.add(Calendar.MONTH, -1);\n+                aCalendar.set(Calendar.DATE, 1);\n+                aCalendar.set(Calendar.HOUR, 0);\n+                aCalendar.set(Calendar.MINUTE, 0);\n+                aCalendar.set(Calendar.SECOND, 0);\n+                firstDateOfPreviousPeriod = (Calendar)aCalendar.clone();\n+                aCalendar.set(Calendar.DATE, aCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1);\n+                lastDateOfPreviousPeriod = (Calendar)aCalendar.clone();\n+                return new Calendar[] {firstDateOfPreviousPeriod, lastDateOfPreviousPeriod};\n+            }\n+            return null;\n+        case QUATERLY:\n+            // statements are sent in Jan=1, Apr 4, Jul 7, Oct 10\n+            if (month_of_year == Calendar.JANUARY || month_of_year == Calendar.APRIL || month_of_year == Calendar.JULY || month_of_year == Calendar.OCTOBER) {\n+                if (day_of_month < s_LAST_STATEMENT_SENT_DAYS) {\n+                    Calendar aCalendar = (Calendar)today.clone();\n+                    aCalendar.add(Calendar.MONTH, -3);\n+                    aCalendar.set(Calendar.DATE, 1);\n+                    aCalendar.set(Calendar.HOUR, 0);\n+                    aCalendar.set(Calendar.MINUTE, 0);\n+                    aCalendar.set(Calendar.SECOND, 0);\n+                    firstDateOfPreviousPeriod = (Calendar)aCalendar.clone();\n+                    aCalendar.add(Calendar.MONTH, 2);\n+                    aCalendar.set(Calendar.DATE, aCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1);\n+                    lastDateOfPreviousPeriod = (Calendar)aCalendar.clone();\n+                    return new Calendar[] {firstDateOfPreviousPeriod, lastDateOfPreviousPeriod};\n+                }\n+            }\n+            return null;\n+        case HALFYEARLY:\n+            // statements are sent in Jan=1, Jul 7,\n+            if (month_of_year == Calendar.JANUARY || month_of_year == Calendar.JULY) {\n+                if (day_of_month < s_LAST_STATEMENT_SENT_DAYS) {\n+                    Calendar aCalendar = (Calendar)today.clone();\n+                    aCalendar.add(Calendar.MONTH, -6);\n+                    aCalendar.set(Calendar.DATE, 1);\n+                    aCalendar.set(Calendar.HOUR, 0);\n+                    aCalendar.set(Calendar.MINUTE, 0);\n+                    aCalendar.set(Calendar.SECOND, 0);\n+                    firstDateOfPreviousPeriod = (Calendar)aCalendar.clone();\n+                    aCalendar.add(Calendar.MONTH, 5);\n+                    aCalendar.set(Calendar.DATE, aCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1);\n+                    lastDateOfPreviousPeriod = (Calendar)aCalendar.clone();\n+                    return new Calendar[] {firstDateOfPreviousPeriod, lastDateOfPreviousPeriod};\n+                }\n+            }\n+            return null;\n+        case YEARLY:\n+            // statements are sent in Jan=1\n+            if (month_of_year == Calendar.JANUARY) {\n+                if (day_of_month < s_LAST_STATEMENT_SENT_DAYS) {\n+                    Calendar aCalendar = (Calendar)today.clone();\n+                    aCalendar.add(Calendar.MONTH, -12);\n+                    aCalendar.set(Calendar.DATE, 1);\n+                    aCalendar.set(Calendar.HOUR, 0);\n+                    aCalendar.set(Calendar.MINUTE, 0);\n+                    aCalendar.set(Calendar.SECOND, 0);\n+                    firstDateOfPreviousPeriod = (Calendar)aCalendar.clone();\n+                    aCalendar.add(Calendar.MONTH, 11);\n+                    aCalendar.set(Calendar.DATE, aCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1);\n+                    lastDateOfPreviousPeriod = (Calendar)aCalendar.clone();\n+                    return new Calendar[] {firstDateOfPreviousPeriod, lastDateOfPreviousPeriod};\n+                }\n+            }\n+            return null;\n+        default:\n+            break;\n+        }\n+        return null;\n+    }\n+\n+    public static long getDifferenceDays(Date d1, Date d2) {\n+        long diff = d2.getTime() - d1.getTime();\n+        return TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/QuotaStatementImpl.java",
                "sha": "682b2ef0366dded6b048dcd350eeb0e940a82259",
                "status": "added"
            },
            {
                "additions": 57,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/constant/QuotaConfig.java",
                "changes": 57,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/constant/QuotaConfig.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/constant/QuotaConfig.java",
                "patch": "@@ -0,0 +1,57 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+\n+package org.apache.cloudstack.quota.constant;\n+\n+import org.apache.cloudstack.framework.config.ConfigKey;\n+\n+public interface QuotaConfig {\n+\n+    public static final ConfigKey<Boolean> QuotaPluginEnabled = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"quota.enable.service\", \"false\",\n+            \"Indicates whether Quota plugin is enabled or not\", true);\n+\n+    public static final ConfigKey<String> QuotaEnableEnforcement = new ConfigKey<String>(\"Advanced\", String.class, \"quota.enable.enforcement\", \"false\",\n+            \"Enable the usage quota enforcement, i.e. on true when exceeding quota the respective account will be locked.\", true);\n+\n+    public static final ConfigKey<String> QuotaCurrencySymbol = new ConfigKey<String>(\"Advanced\", String.class, \"quota.currency.symbol\", \"$\",\n+            \"The symbol for the currency in use to measure usage.\", true);\n+\n+    public static final ConfigKey<Integer> QuotaStatementPeriod = new ConfigKey<Integer>(\"Advanced\", Integer.class, \"quota.statement.period\", \"1\",\n+            \"This variables define the statement generation interval. Values correspond to bimonthly=0, monthly=1, quarterly=2, half-yearly=3 and yearly=4.\", true);\n+\n+    public static final ConfigKey<String> QuotaSmtpHost = new ConfigKey<String>(\"Advanced\", String.class, \"quota.usage.smtp.host\", \"\", \"Quota SMTP host for quota related emails\",\n+            true);\n+\n+    public static final ConfigKey<String> QuotaSmtpTimeout = new ConfigKey<String>(\"Advanced\", String.class, \"quota.usage.smtp.connection.timeout\", \"60\",\n+            \"Quota SMTP server connection timeout duration\", true);\n+\n+    public static final ConfigKey<String> QuotaSmtpUser = new ConfigKey<String>(\"Advanced\", String.class, \"quota.usage.smtp.user\", \"\", \"Quota SMTP server username\", true);\n+\n+    public static final ConfigKey<String> QuotaSmtpPassword = new ConfigKey<String>(\"Advanced\", String.class, \"quota.usage.smtp.password\", \"\", \"Quota SMTP server password\", true);\n+\n+    public static final ConfigKey<String> QuotaSmtpPort = new ConfigKey<String>(\"Advanced\", String.class, \"quota.usage.smtp.port\", \"\", \"Quota SMTP port\", true);\n+\n+    public static final ConfigKey<String> QuotaSmtpAuthType = new ConfigKey<String>(\"Advanced\", String.class, \"quota.usage.smtp.useAuth\", \"\",\n+            \"If true, use secure SMTP authentication when sending emails.\", true);\n+\n+    public static final ConfigKey<String> QuotaSmtpSender = new ConfigKey<String>(\"Advanced\", String.class, \"quota.usage.smtp.sender\", \"\",\n+            \"Sender of quota alert email (will be in the From header of the email)\", true);\n+\n+    enum QuotaEmailTemplateTypes {\n+        QUOTA_LOW, QUOTA_EMPTY, QUOTA_UNLOCK_ACCOUNT, QUOTA_STATEMENT\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/constant/QuotaConfig.java",
                "sha": "73c9a80e3c913f29df3a48c3b78e7db681eb4df1",
                "status": "added"
            },
            {
                "additions": 103,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/constant/QuotaTypes.java",
                "changes": 103,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/constant/QuotaTypes.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/constant/QuotaTypes.java",
                "patch": "@@ -0,0 +1,103 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.quota.constant;\n+\n+import org.apache.cloudstack.usage.UsageTypes;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class QuotaTypes extends UsageTypes {\n+    public static final int CPU_CLOCK_RATE = 15;\n+    public static final int CPU_NUMBER = 16;\n+    public static final int MEMORY = 17;\n+\n+    private final Integer quotaType;\n+    private final String quotaName;\n+    private final String quotaUnit;\n+    private final String description;\n+    private final String discriminator;\n+    private final static Map<Integer, QuotaTypes> quotaTypeMap;\n+\n+    static {\n+        final HashMap<Integer, QuotaTypes> quotaTypeList = new HashMap<Integer, QuotaTypes>();\n+        quotaTypeList.put(RUNNING_VM, new QuotaTypes(RUNNING_VM, \"RUNNING_VM\", \"Compute-Month\", \"Running Vm Usage\"));\n+        quotaTypeList.put(ALLOCATED_VM, new QuotaTypes(ALLOCATED_VM, \"ALLOCATED_VM\", \"Compute-Month\", \"Allocated Vm Usage\"));\n+        quotaTypeList.put(IP_ADDRESS, new QuotaTypes(IP_ADDRESS, \"IP_ADDRESS\", \"IP-Month\", \"IP Address Usage\"));\n+        quotaTypeList.put(NETWORK_BYTES_SENT, new QuotaTypes(NETWORK_BYTES_SENT, \"NETWORK_BYTES_SENT\", \"GB\", \"Network Usage (Bytes Sent)\"));\n+        quotaTypeList.put(NETWORK_BYTES_RECEIVED, new QuotaTypes(NETWORK_BYTES_RECEIVED, \"NETWORK_BYTES_RECEIVED\", \"GB\", \"Network Usage (Bytes Received)\"));\n+        quotaTypeList.put(VOLUME, new QuotaTypes(VOLUME, \"VOLUME\", \"GB-Month\", \"Volume Usage\"));\n+        quotaTypeList.put(TEMPLATE, new QuotaTypes(TEMPLATE, \"TEMPLATE\", \"GB-Month\", \"Template Usage\"));\n+        quotaTypeList.put(ISO, new QuotaTypes(ISO, \"ISO\", \"GB-Month\", \"ISO Usage\"));\n+        quotaTypeList.put(SNAPSHOT, new QuotaTypes(SNAPSHOT, \"SNAPSHOT\", \"GB-Month\", \"Snapshot Usage\"));\n+        quotaTypeList.put(SECURITY_GROUP, new QuotaTypes(SECURITY_GROUP, \"SECURITY_GROUP\", \"Policy-Month\", \"Security Group Usage\"));\n+        quotaTypeList.put(LOAD_BALANCER_POLICY, new QuotaTypes(LOAD_BALANCER_POLICY, \"LOAD_BALANCER_POLICY\", \"Policy-Month\", \"Load Balancer Usage\"));\n+        quotaTypeList.put(PORT_FORWARDING_RULE, new QuotaTypes(PORT_FORWARDING_RULE, \"PORT_FORWARDING_RULE\", \"Policy-Month\", \"Port Forwarding Usage\"));\n+        quotaTypeList.put(NETWORK_OFFERING, new QuotaTypes(NETWORK_OFFERING, \"NETWORK_OFFERING\", \"Policy-Month\", \"Network Offering Usage\"));\n+        quotaTypeList.put(VPN_USERS, new QuotaTypes(VPN_USERS, \"VPN_USERS\", \"Policy-Month\", \"VPN users usage\"));\n+        quotaTypeList.put(VM_DISK_IO_READ, new QuotaTypes(VM_DISK_IO_READ, \"VM_DISK_IO_READ\", \"GB\", \"VM Disk usage(I/O Read)\"));\n+        quotaTypeList.put(VM_DISK_IO_WRITE, new QuotaTypes(VM_DISK_IO_WRITE, \"VM_DISK_IO_WRITE\", \"GB\", \"VM Disk usage(I/O Write)\"));\n+        quotaTypeList.put(VM_DISK_BYTES_READ, new QuotaTypes(VM_DISK_BYTES_READ, \"VM_DISK_BYTES_READ\", \"GB\", \"VM Disk usage(Bytes Read)\"));\n+        quotaTypeList.put(VM_DISK_BYTES_WRITE, new QuotaTypes(VM_DISK_BYTES_WRITE, \"VPN_USERS\", \"GB\", \"VM Disk usage(Bytes Write)\"));\n+        quotaTypeList.put(VM_SNAPSHOT, new QuotaTypes(VM_SNAPSHOT, \"VM_SNAPSHOT\", \"GB-Month\", \"VM Snapshot storage usage\"));\n+        quotaTypeList.put(CPU_CLOCK_RATE, new QuotaTypes(CPU_CLOCK_RATE, \"CPU_CLOCK_RATE\", \"Compute-Month\", \"Quota tariff for using 1 CPU of clock rate 100MHz\"));\n+        quotaTypeList.put(CPU_NUMBER, new QuotaTypes(CPU_NUMBER, \"CPU_NUMBER\", \"Compute-Month\", \"Quota tariff for running VM that has 1vCPU\"));\n+        quotaTypeList.put(MEMORY, new QuotaTypes(MEMORY, \"MEMORY\", \"Compute-Month\", \"Quota tariff for using 1MB or RAM for 1 hour\"));\n+        quotaTypeMap = Collections.unmodifiableMap(quotaTypeList);\n+    }\n+\n+    private QuotaTypes(Integer quotaType, String name, String unit, String description) {\n+        this.quotaType = quotaType;\n+        this.description = description;\n+        this.quotaName = name;\n+        this.quotaUnit = unit;\n+        this.discriminator = \"None\";\n+    }\n+\n+    public static Map<Integer, QuotaTypes> listQuotaTypes() {\n+        return quotaTypeMap;\n+    }\n+\n+    public String getDiscriminator() {\n+        return discriminator;\n+    }\n+\n+    public String getQuotaName() {\n+        return quotaName;\n+    }\n+\n+    public String getQuotaUnit() {\n+        return quotaUnit;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public Integer getQuotaType() {\n+        return quotaType;\n+    }\n+\n+    static public String getDescription(int quotaType) {\n+        QuotaTypes t = quotaTypeMap.get(quotaType);\n+        if (t != null) {\n+            return t.getDescription();\n+        }\n+        return null;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/constant/QuotaTypes.java",
                "sha": "36910f47741ea77ca0734df6ef91154562970870",
                "status": "added"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaAccountDao.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaAccountDao.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/dao/QuotaAccountDao.java",
                "patch": "@@ -0,0 +1,35 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.quota.dao;\n+\n+import java.util.List;\n+\n+import org.apache.cloudstack.quota.vo.QuotaAccountVO;\n+\n+import com.cloud.utils.db.GenericDao;\n+\n+public interface QuotaAccountDao extends GenericDao<QuotaAccountVO, Long> {\n+\n+    List<QuotaAccountVO> listAllQuotaAccount();\n+\n+    QuotaAccountVO findByIdQuotaAccount(Long id);\n+\n+    QuotaAccountVO persistQuotaAccount(QuotaAccountVO entity);\n+\n+    boolean updateQuotaAccount(Long id, QuotaAccountVO entity);\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaAccountDao.java",
                "sha": "d1b441b831f3dcd9a98bb399dd133298acf4f04b",
                "status": "added"
            },
            {
                "additions": 74,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaAccountDaoImpl.java",
                "changes": 74,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaAccountDaoImpl.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/dao/QuotaAccountDaoImpl.java",
                "patch": "@@ -0,0 +1,74 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.quota.dao;\n+\n+import com.cloud.utils.db.GenericDaoBase;\n+import com.cloud.utils.db.Transaction;\n+import com.cloud.utils.db.TransactionCallback;\n+import com.cloud.utils.db.TransactionLegacy;\n+import com.cloud.utils.db.TransactionStatus;\n+\n+import org.apache.cloudstack.quota.vo.QuotaAccountVO;\n+import org.apache.log4j.Logger;\n+import org.springframework.stereotype.Component;\n+\n+import javax.ejb.Local;\n+\n+import java.util.List;\n+\n+@Component\n+@Local(value = { QuotaAccountDao.class })\n+public class QuotaAccountDaoImpl extends GenericDaoBase<QuotaAccountVO, Long> implements QuotaAccountDao {\n+    public static final Logger s_logger = Logger.getLogger(QuotaAccountDaoImpl.class);\n+\n+    public List<QuotaAccountVO> listAllQuotaAccount() {\n+        return Transaction.execute(TransactionLegacy.USAGE_DB, new TransactionCallback<List<QuotaAccountVO>>() {\n+            @Override\n+            public List<QuotaAccountVO> doInTransaction(final TransactionStatus status) {\n+                return listAll();\n+            }\n+        });\n+    }\n+\n+    public QuotaAccountVO findByIdQuotaAccount(final Long id) {\n+        return Transaction.execute(TransactionLegacy.USAGE_DB, new TransactionCallback<QuotaAccountVO>() {\n+            @Override\n+            public QuotaAccountVO doInTransaction(final TransactionStatus status) {\n+                return findById(id);\n+            }\n+        });\n+    }\n+\n+    public QuotaAccountVO persistQuotaAccount(final QuotaAccountVO entity) {\n+        return Transaction.execute(TransactionLegacy.USAGE_DB, new TransactionCallback<QuotaAccountVO>() {\n+            @Override\n+            public QuotaAccountVO doInTransaction(final TransactionStatus status) {\n+                return persist(entity);\n+            }\n+        });\n+    }\n+\n+    public boolean updateQuotaAccount(final Long id, final QuotaAccountVO entity) {\n+        return Transaction.execute(TransactionLegacy.USAGE_DB, new TransactionCallback<Boolean>() {\n+            @Override\n+            public Boolean doInTransaction(final TransactionStatus status) {\n+                return update(id, entity);\n+            }\n+        });\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaAccountDaoImpl.java",
                "sha": "e3de1889de9f505162c0664ce0bf4521ed1a46b1",
                "status": "added"
            },
            {
                "additions": 43,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaBalanceDao.java",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaBalanceDao.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/dao/QuotaBalanceDao.java",
                "patch": "@@ -0,0 +1,43 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.quota.dao;\n+\n+import java.math.BigDecimal;\n+import java.util.Date;\n+import java.util.List;\n+\n+import org.apache.cloudstack.quota.vo.QuotaBalanceVO;\n+\n+import com.cloud.utils.db.GenericDao;\n+\n+public interface QuotaBalanceDao extends GenericDao<QuotaBalanceVO, Long> {\n+\n+    QuotaBalanceVO saveQuotaBalance(QuotaBalanceVO qb);\n+\n+    List<QuotaBalanceVO> findCreditBalance(Long accountId, Long domainId, Date startDate, Date endDate);\n+\n+    QuotaBalanceVO findLastBalanceEntry(Long accountId, Long domainId, Date beforeThis);\n+\n+    QuotaBalanceVO findLaterBalanceEntry(Long accountId, Long domainId, Date afterThis);\n+\n+    List<QuotaBalanceVO> findQuotaBalance(Long accountId, Long domainId, Date startDate, Date endDate);\n+\n+    List<QuotaBalanceVO> lastQuotaBalanceVO(Long accountId, Long domainId, Date startDate);\n+\n+    BigDecimal lastQuotaBalance(Long accountId, Long domainId, Date startDate);\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaBalanceDao.java",
                "sha": "c694eaeefbe8d63537b9090810ebd692f33f959d",
                "status": "added"
            },
            {
                "additions": 189,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaBalanceDaoImpl.java",
                "changes": 189,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaBalanceDaoImpl.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/dao/QuotaBalanceDaoImpl.java",
                "patch": "@@ -0,0 +1,189 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.quota.dao;\n+\n+import com.cloud.utils.db.Filter;\n+import com.cloud.utils.db.GenericDaoBase;\n+import com.cloud.utils.db.QueryBuilder;\n+import com.cloud.utils.db.SearchCriteria;\n+import com.cloud.utils.db.Transaction;\n+import com.cloud.utils.db.TransactionCallback;\n+import com.cloud.utils.db.TransactionLegacy;\n+import com.cloud.utils.db.TransactionStatus;\n+\n+import org.apache.cloudstack.quota.vo.QuotaBalanceVO;\n+import org.apache.log4j.Logger;\n+import org.springframework.stereotype.Component;\n+\n+import javax.ejb.Local;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+\n+@Component\n+@Local(value = {QuotaBalanceDao.class})\n+public class QuotaBalanceDaoImpl extends GenericDaoBase<QuotaBalanceVO, Long> implements QuotaBalanceDao {\n+    private static final Logger s_logger = Logger.getLogger(QuotaBalanceDaoImpl.class.getName());\n+\n+    public QuotaBalanceVO findLastBalanceEntry(final Long accountId, final Long domainId, final Date beforeThis) {\n+        return Transaction.execute(TransactionLegacy.USAGE_DB, new TransactionCallback<QuotaBalanceVO>() {\n+            @Override\n+            public QuotaBalanceVO doInTransaction(final TransactionStatus status) {\n+                List<QuotaBalanceVO> quotaBalanceEntries = new ArrayList<>();\n+                Filter filter = new Filter(QuotaBalanceVO.class, \"updatedOn\", false, 0L, 1L);\n+                QueryBuilder<QuotaBalanceVO> qb = QueryBuilder.create(QuotaBalanceVO.class);\n+                qb.and(qb.entity().getAccountId(), SearchCriteria.Op.EQ, accountId);\n+                qb.and(qb.entity().getDomainId(), SearchCriteria.Op.EQ, domainId);\n+                qb.and(qb.entity().getCreditsId(), SearchCriteria.Op.EQ, 0);\n+                qb.and(qb.entity().getUpdatedOn(), SearchCriteria.Op.LT, beforeThis);\n+                quotaBalanceEntries = search(qb.create(), filter);\n+                return !quotaBalanceEntries.isEmpty() ? quotaBalanceEntries.get(0) : null;\n+            }\n+        });\n+    }\n+\n+    public QuotaBalanceVO findLaterBalanceEntry(final Long accountId, final Long domainId, final Date afterThis) {\n+        return Transaction.execute(TransactionLegacy.USAGE_DB, new TransactionCallback<QuotaBalanceVO>() {\n+            @Override\n+            public QuotaBalanceVO doInTransaction(final TransactionStatus status) {\n+                List<QuotaBalanceVO> quotaBalanceEntries = new ArrayList<>();\n+                Filter filter = new Filter(QuotaBalanceVO.class, \"updatedOn\", true, 0L, 1L);\n+                QueryBuilder<QuotaBalanceVO> qb = QueryBuilder.create(QuotaBalanceVO.class);\n+                qb.and(qb.entity().getAccountId(), SearchCriteria.Op.EQ, accountId);\n+                qb.and(qb.entity().getDomainId(), SearchCriteria.Op.EQ, domainId);\n+                qb.and(qb.entity().getCreditsId(), SearchCriteria.Op.EQ, 0);\n+                qb.and(qb.entity().getUpdatedOn(), SearchCriteria.Op.GT, afterThis);\n+                quotaBalanceEntries = search(qb.create(), filter);\n+                return quotaBalanceEntries.size() > 0 ? quotaBalanceEntries.get(0) : null;\n+            }\n+        });\n+    }\n+\n+    public QuotaBalanceVO saveQuotaBalance(final QuotaBalanceVO qb) {\n+        return Transaction.execute(TransactionLegacy.USAGE_DB, new TransactionCallback<QuotaBalanceVO>() {\n+            @Override\n+            public QuotaBalanceVO doInTransaction(final TransactionStatus status) {\n+                return persist(qb);\n+            }\n+        });\n+    }\n+\n+    public List<QuotaBalanceVO> findCreditBalance(final Long accountId, final Long domainId, final Date lastbalancedate, final Date beforeThis) {\n+        return Transaction.execute(TransactionLegacy.USAGE_DB, new TransactionCallback<List<QuotaBalanceVO>>() {\n+            @Override\n+            public List<QuotaBalanceVO> doInTransaction(final TransactionStatus status) {\n+                if ((lastbalancedate != null) && (beforeThis != null) && lastbalancedate.before(beforeThis)) {\n+                    Filter filter = new Filter(QuotaBalanceVO.class, \"updatedOn\", true, 0L, Long.MAX_VALUE);\n+                    QueryBuilder<QuotaBalanceVO> qb = QueryBuilder.create(QuotaBalanceVO.class);\n+                    qb.and(qb.entity().getAccountId(), SearchCriteria.Op.EQ, accountId);\n+                    qb.and(qb.entity().getDomainId(), SearchCriteria.Op.EQ, domainId);\n+                    qb.and(qb.entity().getCreditsId(), SearchCriteria.Op.GT, 0);\n+                    qb.and(qb.entity().getUpdatedOn(), SearchCriteria.Op.BETWEEN, lastbalancedate, beforeThis);\n+                    return search(qb.create(), filter);\n+                } else {\n+                    return new ArrayList<QuotaBalanceVO>();\n+                }\n+            }\n+        });\n+    }\n+\n+    public List<QuotaBalanceVO> findQuotaBalance(final Long accountId, final Long domainId, final Date startDate, final Date endDate) {\n+        return Transaction.execute(TransactionLegacy.USAGE_DB, new TransactionCallback<List<QuotaBalanceVO>>() {\n+            @Override\n+            public List<QuotaBalanceVO> doInTransaction(final TransactionStatus status) {\n+                List<QuotaBalanceVO> quotaUsageRecords = null;\n+                QueryBuilder<QuotaBalanceVO> qb = QueryBuilder.create(QuotaBalanceVO.class);\n+                if (accountId != null) {\n+                    qb.and(qb.entity().getAccountId(), SearchCriteria.Op.EQ, accountId);\n+                }\n+                if (domainId != null) {\n+                    qb.and(qb.entity().getDomainId(), SearchCriteria.Op.EQ, domainId);\n+                }\n+                if ((startDate != null) && (endDate != null) && startDate.before(endDate)) {\n+                    qb.and(qb.entity().getUpdatedOn(), SearchCriteria.Op.BETWEEN, startDate, endDate);\n+                } else {\n+                    return Collections.<QuotaBalanceVO> emptyList();\n+                }\n+                quotaUsageRecords = listBy(qb.create());\n+                if (quotaUsageRecords.size() == 0) {\n+                    quotaUsageRecords.addAll(lastQuotaBalanceVO(accountId, domainId, startDate));\n+                }\n+                return quotaUsageRecords;\n+\n+            }\n+        });\n+\n+    }\n+\n+    public List<QuotaBalanceVO> lastQuotaBalanceVO(final Long accountId, final Long domainId, final Date pivotDate) {\n+        return Transaction.execute(TransactionLegacy.USAGE_DB, new TransactionCallback<List<QuotaBalanceVO>>() {\n+            @Override\n+            public List<QuotaBalanceVO> doInTransaction(final TransactionStatus status) {\n+                List<QuotaBalanceVO> quotaUsageRecords = null;\n+                List<QuotaBalanceVO> trimmedRecords = new ArrayList<QuotaBalanceVO>();\n+                Filter filter = new Filter(QuotaBalanceVO.class, \"updatedOn\", false, 0L, 100L);\n+                // ASSUMPTION there will be less than 100 continuous credit\n+                // transactions\n+                QueryBuilder<QuotaBalanceVO> qb = QueryBuilder.create(QuotaBalanceVO.class);\n+                if (accountId != null) {\n+                    qb.and(qb.entity().getAccountId(), SearchCriteria.Op.EQ, accountId);\n+                }\n+                if (domainId != null) {\n+                    qb.and(qb.entity().getDomainId(), SearchCriteria.Op.EQ, domainId);\n+                }\n+                if ((pivotDate != null)) {\n+                    qb.and(qb.entity().getUpdatedOn(), SearchCriteria.Op.LTEQ, pivotDate);\n+                }\n+                quotaUsageRecords = search(qb.create(), filter);\n+\n+                // get records before startDate to find start balance\n+                for (QuotaBalanceVO entry : quotaUsageRecords) {\n+                    if (s_logger.isDebugEnabled()) {\n+                        s_logger.debug(\"FindQuotaBalIance Entry=\" + entry);\n+                    }\n+                    if (entry.getCreditsId() > 0) {\n+                        trimmedRecords.add(entry);\n+                    } else {\n+                        trimmedRecords.add(entry);\n+                        break; // add only consecutive credit entries and last balance entry\n+                    }\n+                }\n+                return trimmedRecords;\n+            }\n+        });\n+    }\n+\n+    public BigDecimal lastQuotaBalance(final Long accountId, final Long domainId, Date startDate) {\n+        List<QuotaBalanceVO> quotaBalance = lastQuotaBalanceVO(accountId, domainId, startDate);\n+        BigDecimal finalBalance = new BigDecimal(0);\n+        if (quotaBalance.isEmpty()) {\n+            s_logger.info(\"There are no balance entries on or before the requested date.\");\n+            return finalBalance;\n+        }\n+        for (QuotaBalanceVO entry : quotaBalance) {\n+            if (s_logger.isDebugEnabled()) {\n+                s_logger.debug(\"lastQuotaBalance Entry=\" + entry);\n+            }\n+            finalBalance = finalBalance.add(entry.getCreditBalance());\n+        }\n+        return finalBalance;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaBalanceDaoImpl.java",
                "sha": "aa650e165adbdb61f86fcc0c025544272e47fb42",
                "status": "added"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaCreditsDao.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaCreditsDao.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/dao/QuotaCreditsDao.java",
                "patch": "@@ -0,0 +1,32 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.quota.dao;\n+\n+import java.util.Date;\n+import java.util.List;\n+\n+import org.apache.cloudstack.quota.vo.QuotaCreditsVO;\n+\n+import com.cloud.utils.db.GenericDao;\n+\n+public interface QuotaCreditsDao extends GenericDao<QuotaCreditsVO, Long> {\n+\n+    List<QuotaCreditsVO> findCredits(long accountId, long domainId, Date startDate, Date endDate);\n+\n+    QuotaCreditsVO saveCredits(QuotaCreditsVO credits);\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaCreditsDao.java",
                "sha": "f08d8f96ca85bcb63a5ccce180bb4363fee33bcc",
                "status": "added"
            },
            {
                "additions": 78,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaCreditsDaoImpl.java",
                "changes": 78,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaCreditsDaoImpl.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/dao/QuotaCreditsDaoImpl.java",
                "patch": "@@ -0,0 +1,78 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.quota.dao;\n+\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+\n+import javax.ejb.Local;\n+import javax.inject.Inject;\n+\n+import org.springframework.stereotype.Component;\n+import org.apache.cloudstack.quota.vo.QuotaBalanceVO;\n+import org.apache.cloudstack.quota.vo.QuotaCreditsVO;\n+\n+import com.cloud.utils.db.Filter;\n+import com.cloud.utils.db.GenericDaoBase;\n+import com.cloud.utils.db.QueryBuilder;\n+import com.cloud.utils.db.SearchCriteria;\n+import com.cloud.utils.db.Transaction;\n+import com.cloud.utils.db.TransactionCallback;\n+import com.cloud.utils.db.TransactionLegacy;\n+import com.cloud.utils.db.TransactionStatus;\n+\n+@Component\n+@Local(value = { QuotaCreditsDao.class })\n+public class QuotaCreditsDaoImpl extends GenericDaoBase<QuotaCreditsVO, Long> implements QuotaCreditsDao {\n+\n+    @Inject\n+    QuotaBalanceDao _quotaBalanceDao;\n+\n+    @Override\n+    public List<QuotaCreditsVO> findCredits(final long accountId, final long domainId, final Date startDate, final Date endDate) {\n+        return Transaction.execute(TransactionLegacy.USAGE_DB, new TransactionCallback<List<QuotaCreditsVO>>() {\n+            @Override\n+            public List<QuotaCreditsVO> doInTransaction(final TransactionStatus status) {\n+                if ((startDate != null) && (endDate != null) && startDate.before(endDate)) {\n+                    Filter filter = new Filter(QuotaCreditsVO.class, \"updatedOn\", true, 0L, Long.MAX_VALUE);\n+                    QueryBuilder<QuotaCreditsVO> qb = QueryBuilder.create(QuotaCreditsVO.class);\n+                    qb.and(qb.entity().getAccountId(), SearchCriteria.Op.EQ, accountId);\n+                    qb.and(qb.entity().getDomainId(), SearchCriteria.Op.EQ, domainId);\n+                    qb.and(qb.entity().getUpdatedOn(), SearchCriteria.Op.BETWEEN, startDate, endDate);\n+                    return search(qb.create(), filter);\n+                } else {\n+                    return Collections.<QuotaCreditsVO> emptyList();\n+                }\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public QuotaCreditsVO saveCredits(final QuotaCreditsVO credits) {\n+        return Transaction.execute(TransactionLegacy.USAGE_DB, new TransactionCallback<QuotaCreditsVO>() {\n+            @Override\n+            public QuotaCreditsVO doInTransaction(final TransactionStatus status) {\n+                persist(credits);\n+                // make an entry in the balance table\n+                QuotaBalanceVO bal = new QuotaBalanceVO(credits);\n+                _quotaBalanceDao.persist(bal);\n+                return credits;\n+            }\n+        });\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaCreditsDaoImpl.java",
                "sha": "4b777104145f9b2d246b0c87beb69bc5f2a26f80",
                "status": "added"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaEmailTemplatesDao.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaEmailTemplatesDao.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/dao/QuotaEmailTemplatesDao.java",
                "patch": "@@ -0,0 +1,27 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.quota.dao;\n+\n+import com.cloud.utils.db.GenericDao;\n+import org.apache.cloudstack.quota.vo.QuotaEmailTemplatesVO;\n+\n+import java.util.List;\n+\n+public interface QuotaEmailTemplatesDao extends GenericDao<QuotaEmailTemplatesVO, Long> {\n+    List<QuotaEmailTemplatesVO> listAllQuotaEmailTemplates(String templateName);\n+    boolean updateQuotaEmailTemplate(QuotaEmailTemplatesVO template);\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaEmailTemplatesDao.java",
                "sha": "573a75397442bf2deb16d62a85995748c8291fdb",
                "status": "added"
            },
            {
                "additions": 74,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaEmailTemplatesDaoImpl.java",
                "changes": 74,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaEmailTemplatesDaoImpl.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/dao/QuotaEmailTemplatesDaoImpl.java",
                "patch": "@@ -0,0 +1,74 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.quota.dao;\n+\n+import com.cloud.utils.db.GenericDaoBase;\n+import com.cloud.utils.db.SearchBuilder;\n+import com.cloud.utils.db.SearchCriteria;\n+import com.cloud.utils.db.Transaction;\n+import com.cloud.utils.db.TransactionCallback;\n+import com.cloud.utils.db.TransactionLegacy;\n+import com.cloud.utils.db.TransactionStatus;\n+import com.google.common.base.Strings;\n+\n+import org.apache.cloudstack.quota.vo.QuotaEmailTemplatesVO;\n+import org.apache.log4j.Logger;\n+import org.springframework.stereotype.Component;\n+\n+import javax.ejb.Local;\n+\n+import java.util.List;\n+\n+@Component\n+@Local(value = { QuotaEmailTemplatesDao.class })\n+public class QuotaEmailTemplatesDaoImpl extends GenericDaoBase<QuotaEmailTemplatesVO, Long> implements QuotaEmailTemplatesDao {\n+    private static final Logger s_logger = Logger.getLogger(QuotaEmailTemplatesDaoImpl.class);\n+\n+    protected SearchBuilder<QuotaEmailTemplatesVO> QuotaEmailTemplateSearch;\n+\n+    public QuotaEmailTemplatesDaoImpl() {\n+        super();\n+\n+        QuotaEmailTemplateSearch = createSearchBuilder();\n+        QuotaEmailTemplateSearch.and(\"template_name\", QuotaEmailTemplateSearch.entity().getTemplateName(), SearchCriteria.Op.EQ);\n+        QuotaEmailTemplateSearch.done();\n+    }\n+\n+    @Override\n+    public List<QuotaEmailTemplatesVO> listAllQuotaEmailTemplates(final String templateName) {\n+        return Transaction.execute(TransactionLegacy.USAGE_DB, new TransactionCallback<List<QuotaEmailTemplatesVO>>() {\n+            @Override\n+            public List<QuotaEmailTemplatesVO> doInTransaction(final TransactionStatus status) {\n+                SearchCriteria<QuotaEmailTemplatesVO> sc = QuotaEmailTemplateSearch.create();\n+                if (!Strings.isNullOrEmpty(templateName)) {\n+                    sc.setParameters(\"template_name\", templateName);\n+                }\n+                return listBy(sc);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public boolean updateQuotaEmailTemplate(final QuotaEmailTemplatesVO template) {\n+        return Transaction.execute(TransactionLegacy.USAGE_DB, new TransactionCallback<Boolean>() {\n+            @Override\n+            public Boolean doInTransaction(final TransactionStatus status) {\n+                return update(template.getId(), template);\n+            }\n+        });\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaEmailTemplatesDaoImpl.java",
                "sha": "a971603c577537a341b7005648cb6986314f4357",
                "status": "added"
            },
            {
                "additions": 37,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaTariffDao.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaTariffDao.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/dao/QuotaTariffDao.java",
                "patch": "@@ -0,0 +1,37 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.quota.dao;\n+\n+import com.cloud.utils.db.GenericDao;\n+\n+import org.apache.cloudstack.quota.vo.QuotaTariffVO;\n+\n+import java.util.Date;\n+import java.util.List;\n+\n+public interface QuotaTariffDao extends GenericDao<QuotaTariffVO, Long> {\n+\n+    QuotaTariffVO findTariffPlanByUsageType(int quotaType, Date onOrBefore);\n+\n+    List<QuotaTariffVO> listAllTariffPlans();\n+\n+    List<QuotaTariffVO> listAllTariffPlans(Date onOrBefore);\n+\n+    Boolean updateQuotaTariff(QuotaTariffVO plan);\n+\n+    QuotaTariffVO addQuotaTariff(QuotaTariffVO plan);\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaTariffDao.java",
                "sha": "fda2cf67cafaf4b747bf42e9911506cdd49e4921",
                "status": "added"
            },
            {
                "additions": 133,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaTariffDaoImpl.java",
                "changes": 133,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaTariffDaoImpl.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/dao/QuotaTariffDaoImpl.java",
                "patch": "@@ -0,0 +1,133 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.quota.dao;\n+\n+import com.cloud.utils.db.Filter;\n+import com.cloud.utils.db.GenericDaoBase;\n+import com.cloud.utils.db.SearchBuilder;\n+import com.cloud.utils.db.SearchCriteria;\n+import com.cloud.utils.db.Transaction;\n+import com.cloud.utils.db.TransactionCallback;\n+import com.cloud.utils.db.TransactionLegacy;\n+import com.cloud.utils.db.TransactionStatus;\n+import org.apache.cloudstack.quota.constant.QuotaTypes;\n+import org.apache.cloudstack.quota.vo.QuotaTariffVO;\n+import org.apache.log4j.Logger;\n+import org.springframework.stereotype.Component;\n+\n+import javax.ejb.Local;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+@Component\n+@Local(value = {QuotaTariffDao.class})\n+public class QuotaTariffDaoImpl extends GenericDaoBase<QuotaTariffVO, Long> implements QuotaTariffDao {\n+    private static final Logger s_logger = Logger.getLogger(QuotaTariffDaoImpl.class.getName());\n+\n+    private final SearchBuilder<QuotaTariffVO> searchUsageType;\n+    private final SearchBuilder<QuotaTariffVO> listAllIncludedUsageType;\n+\n+    public QuotaTariffDaoImpl() {\n+        super();\n+        searchUsageType = createSearchBuilder();\n+        searchUsageType.and(\"usage_type\", searchUsageType.entity().getUsageType(), SearchCriteria.Op.EQ);\n+        searchUsageType.done();\n+\n+        listAllIncludedUsageType = createSearchBuilder();\n+        listAllIncludedUsageType.and(\"onorbefore\", listAllIncludedUsageType.entity().getEffectiveOn(), SearchCriteria.Op.LTEQ);\n+        listAllIncludedUsageType.and(\"quotatype\", listAllIncludedUsageType.entity().getUsageType(), SearchCriteria.Op.EQ);\n+        listAllIncludedUsageType.done();\n+    }\n+\n+    public QuotaTariffVO findTariffPlanByUsageType(final int quotaType, final Date effectiveDate) {\n+        return Transaction.execute(TransactionLegacy.USAGE_DB, new TransactionCallback<QuotaTariffVO>() {\n+            @Override\n+            public QuotaTariffVO doInTransaction(final TransactionStatus status) {\n+                List<QuotaTariffVO> result = new ArrayList<>();\n+                final Filter filter = new Filter(QuotaTariffVO.class, \"updatedOn\", false, 0L, 1L);\n+                final SearchCriteria<QuotaTariffVO> sc = listAllIncludedUsageType.create();\n+                sc.setParameters(\"onorbefore\", effectiveDate);\n+                sc.setParameters(\"quotatype\", quotaType);\n+                result = search(sc, filter);\n+                if (result != null && !result.isEmpty()) {\n+                    return result.get(0);\n+                } else {\n+                    if (s_logger.isDebugEnabled()) {\n+                        s_logger.debug(\"QuotaTariffDaoImpl::findTariffPlanByUsageType: Missing quota type \" + quotaType);\n+                    }\n+                    return null;\n+                }\n+            }\n+        });\n+    }\n+\n+    public List<QuotaTariffVO> listAllTariffPlans() {\n+        return Transaction.execute(TransactionLegacy.USAGE_DB, new TransactionCallback<List<QuotaTariffVO>>() {\n+            @Override\n+            public List<QuotaTariffVO> doInTransaction(final TransactionStatus status) {\n+                return listAll();\n+            }\n+        });\n+    }\n+\n+    public List<QuotaTariffVO> listAllTariffPlans(final Date effectiveDate) {\n+        return Transaction.execute(TransactionLegacy.USAGE_DB, new TransactionCallback<List<QuotaTariffVO>>() {\n+            @Override\n+            public List<QuotaTariffVO> doInTransaction(final TransactionStatus status) {\n+                List<QuotaTariffVO> tariffs = new ArrayList<QuotaTariffVO>();\n+                final Filter filter = new Filter(QuotaTariffVO.class, \"updatedOn\", false, 0L, 1L);\n+                final SearchCriteria<QuotaTariffVO> sc = listAllIncludedUsageType.create();\n+                sc.setParameters(\"onorbefore\", effectiveDate);\n+                for (Integer quotaType : QuotaTypes.listQuotaTypes().keySet()) {\n+                    sc.setParameters(\"quotatype\", quotaType);\n+                    List<QuotaTariffVO> result = search(sc, filter);\n+                    if (result != null && !result.isEmpty()) {\n+                        tariffs.add(result.get(0));\n+                        if (s_logger.isDebugEnabled()) {\n+                            s_logger.debug(\"ListAllTariffPlans on or before \" + effectiveDate + \" quota type \" + result.get(0).getDescription() + \" , effective Date=\"\n+                                    + result.get(0).getEffectiveOn() + \" val=\" + result.get(0).getCurrencyValue());\n+                        }\n+                    }\n+                }\n+                return tariffs;\n+            }\n+        });\n+    }\n+\n+    public Boolean updateQuotaTariff(final QuotaTariffVO plan) {\n+        return Transaction.execute(TransactionLegacy.USAGE_DB, new TransactionCallback<Boolean>() {\n+            @Override\n+            public Boolean doInTransaction(final TransactionStatus status) {\n+                return update(plan.getId(), plan);\n+            }\n+        });\n+    }\n+\n+    public QuotaTariffVO addQuotaTariff(final QuotaTariffVO plan) {\n+        if (plan.getIdObj() != null) {\n+            throw new IllegalStateException(\"The QuotaTariffVO being added should not have an Id set \");\n+        }\n+        return Transaction.execute(TransactionLegacy.USAGE_DB, new TransactionCallback<QuotaTariffVO>() {\n+            @Override\n+            public QuotaTariffVO doInTransaction(final TransactionStatus status) {\n+                return persist(plan);\n+            }\n+        });\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaTariffDaoImpl.java",
                "sha": "294b404d928968fe010528d88f974cc2dd19dca7",
                "status": "added"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaUsageDao.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaUsageDao.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/dao/QuotaUsageDao.java",
                "patch": "@@ -0,0 +1,35 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.quota.dao;\n+\n+import com.cloud.utils.db.GenericDao;\n+import org.apache.cloudstack.quota.vo.QuotaUsageVO;\n+\n+import java.math.BigDecimal;\n+import java.util.Date;\n+import java.util.List;\n+\n+public interface QuotaUsageDao extends GenericDao<QuotaUsageVO, Long> {\n+\n+    QuotaUsageVO persistQuotaUsage(QuotaUsageVO quotaUsage);\n+\n+    List<QuotaUsageVO> findQuotaUsage(Long accountId, Long domainId, Integer usageType, Date startDate, Date endDate);\n+\n+    BigDecimal findTotalQuotaUsage(Long accountId, Long domainId, Integer usageType, Date startDate, Date endDate);\n+\n+    QuotaUsageVO findLastQuotaUsageEntry(Long accountId, Long domainId, Date beforeThis);\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaUsageDao.java",
                "sha": "d0c984c6f6b6c051e6e4c26c5ee976f2ece9e0ed",
                "status": "added"
            },
            {
                "additions": 116,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaUsageDaoImpl.java",
                "changes": 116,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaUsageDaoImpl.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/dao/QuotaUsageDaoImpl.java",
                "patch": "@@ -0,0 +1,116 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.quota.dao;\n+\n+import com.cloud.utils.db.Filter;\n+import com.cloud.utils.db.GenericDaoBase;\n+import com.cloud.utils.db.QueryBuilder;\n+import com.cloud.utils.db.SearchCriteria;\n+import com.cloud.utils.db.Transaction;\n+import com.cloud.utils.db.TransactionCallback;\n+import com.cloud.utils.db.TransactionLegacy;\n+import com.cloud.utils.db.TransactionStatus;\n+\n+import org.apache.cloudstack.quota.vo.QuotaUsageVO;\n+import org.apache.log4j.Logger;\n+import org.springframework.stereotype.Component;\n+\n+import javax.ejb.Local;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+@Component\n+@Local(value = {QuotaUsageDao.class})\n+public class QuotaUsageDaoImpl extends GenericDaoBase<QuotaUsageVO, Long> implements QuotaUsageDao {\n+    private static final Logger s_logger = Logger.getLogger(QuotaUsageDaoImpl.class);\n+\n+    public BigDecimal findTotalQuotaUsage(final Long accountId, final Long domainId, final Integer usageType, final Date startDate, final Date endDate) {\n+        List<QuotaUsageVO> quotaUsage = findQuotaUsage(accountId, domainId, null, startDate, endDate);\n+        BigDecimal total = new BigDecimal(0);\n+        for (QuotaUsageVO quotaRecord : quotaUsage) {\n+            total = total.add(quotaRecord.getQuotaUsed());\n+        }\n+        return total;\n+    }\n+\n+    public List<QuotaUsageVO> findQuotaUsage(final Long accountId, final Long domainId, final Integer usageType, final Date startDate, final Date endDate) {\n+        return Transaction.execute(TransactionLegacy.USAGE_DB, new TransactionCallback<List<QuotaUsageVO>>() {\n+            @Override\n+            public List<QuotaUsageVO> doInTransaction(final TransactionStatus status) {\n+                List<QuotaUsageVO> quv;\n+                if ((startDate != null) && (endDate != null) && startDate.before(endDate)) {\n+                    QueryBuilder<QuotaUsageVO> qb = QueryBuilder.create(QuotaUsageVO.class);\n+                    if (accountId != null) {\n+                        qb.and(qb.entity().getAccountId(), SearchCriteria.Op.EQ, accountId);\n+                    }\n+                    if (domainId != null) {\n+                        qb.and(qb.entity().getDomainId(), SearchCriteria.Op.EQ, domainId);\n+                    }\n+                    if (usageType != null) {\n+                        qb.and(qb.entity().getUsageType(), SearchCriteria.Op.EQ, usageType);\n+                    }\n+                    qb.and(qb.entity().getStartDate(), SearchCriteria.Op.BETWEEN, startDate, endDate);\n+                    qb.and(qb.entity().getEndDate(), SearchCriteria.Op.BETWEEN, startDate, endDate);\n+                    quv = listBy(qb.create());\n+                } else {\n+                    quv = new ArrayList<QuotaUsageVO>();\n+                }\n+                if (quv.isEmpty()){\n+                    //add a dummy entry\n+                    QuotaUsageVO qu = new  QuotaUsageVO();\n+                    qu.setAccountId(accountId);\n+                    qu.setDomainId(domainId);\n+                    qu.setStartDate(startDate);\n+                    qu.setEndDate(endDate);\n+                    qu.setQuotaUsed(new BigDecimal(0));\n+                    qu.setUsageType(-1);\n+                    quv.add(qu);\n+                }\n+                return quv;\n+            }\n+        });\n+    }\n+\n+    public QuotaUsageVO findLastQuotaUsageEntry(final Long accountId, final Long domainId, final Date beforeThis) {\n+        return Transaction.execute(TransactionLegacy.USAGE_DB, new TransactionCallback<QuotaUsageVO>() {\n+            @Override\n+            public QuotaUsageVO doInTransaction(final TransactionStatus status) {\n+                List<QuotaUsageVO> quotaUsageEntries = new ArrayList<>();\n+                Filter filter = new Filter(QuotaUsageVO.class, \"startDate\", false, 0L, 1L);\n+                QueryBuilder<QuotaUsageVO> qb = QueryBuilder.create(QuotaUsageVO.class);\n+                qb.and(qb.entity().getAccountId(), SearchCriteria.Op.EQ, accountId);\n+                qb.and(qb.entity().getDomainId(), SearchCriteria.Op.EQ, domainId);\n+                qb.and(qb.entity().getStartDate(), SearchCriteria.Op.LT, beforeThis);\n+                quotaUsageEntries = search(qb.create(), filter);\n+                return !quotaUsageEntries.isEmpty() ? quotaUsageEntries.get(0) : null;\n+            }\n+        });\n+    }\n+\n+    public QuotaUsageVO persistQuotaUsage(final QuotaUsageVO quotaUsage) {\n+        return Transaction.execute(TransactionLegacy.USAGE_DB, new TransactionCallback<QuotaUsageVO>() {\n+            @Override\n+            public QuotaUsageVO doInTransaction(final TransactionStatus status) {\n+                return persist(quotaUsage);\n+            }\n+        });\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/QuotaUsageDaoImpl.java",
                "sha": "8c0fae6391e110a763bd17bbc95a97362b20236b",
                "status": "added"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/ServiceOfferingDao.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/dao/ServiceOfferingDao.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/dao/ServiceOfferingDao.java",
                "patch": "@@ -0,0 +1,25 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.quota.dao;\n+\n+import org.apache.cloudstack.quota.vo.ServiceOfferingVO;\n+\n+import com.cloud.utils.db.GenericDao;\n+\n+public interface ServiceOfferingDao extends GenericDao<ServiceOfferingVO, Long> {\n+    ServiceOfferingVO findServiceOffering(Long vmId, long serviceOfferingId);\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/ServiceOfferingDao.java",
                "sha": "8353977aa0d8fc8d1b7c788ce6bfd05950398fd1",
                "status": "added"
            },
            {
                "additions": 84,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/ServiceOfferingDaoImpl.java",
                "changes": 84,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/dao/ServiceOfferingDaoImpl.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/dao/ServiceOfferingDaoImpl.java",
                "patch": "@@ -0,0 +1,84 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.quota.dao;\n+\n+import java.util.Map;\n+\n+import javax.ejb.Local;\n+import javax.inject.Inject;\n+\n+import org.apache.log4j.Logger;\n+import org.springframework.stereotype.Component;\n+import org.apache.cloudstack.quota.vo.ServiceOfferingVO;\n+\n+import com.cloud.event.UsageEventVO;\n+import com.cloud.utils.db.DB;\n+import com.cloud.utils.db.GenericDaoBase;\n+import com.cloud.utils.db.Transaction;\n+import com.cloud.utils.db.TransactionCallback;\n+import com.cloud.utils.db.TransactionLegacy;\n+import com.cloud.utils.db.TransactionStatus;\n+import com.cloud.utils.exception.CloudRuntimeException;\n+\n+@Component\n+@Local(value = {ServiceOfferingDao.class})\n+@DB()\n+public class ServiceOfferingDaoImpl extends GenericDaoBase<ServiceOfferingVO, Long> implements ServiceOfferingDao {\n+    protected static final Logger s_logger = Logger.getLogger(ServiceOfferingDaoImpl.class);\n+\n+    @Inject\n+    UserVmDetailsDao userVmDetailsDao;\n+\n+    public ServiceOfferingVO findServiceOffering(final Long vmId, final long serviceOfferingId) {\n+        return Transaction.execute(TransactionLegacy.CLOUD_DB, new TransactionCallback<ServiceOfferingVO>() {\n+            @Override\n+            public ServiceOfferingVO doInTransaction(final TransactionStatus status) {\n+                ServiceOfferingVO offering = findById(serviceOfferingId);\n+                if (offering.isDynamic()) {\n+                    if (vmId == null) {\n+                        throw new CloudRuntimeException(\"missing argument vmId\");\n+                    }\n+                    offering.setDynamicFlag(true);\n+                    Map<String, String> dynamicOffering = userVmDetailsDao.listDetailsKeyPairs(vmId);\n+                    return getcomputeOffering(offering, dynamicOffering);\n+                }\n+                return offering;\n+            }\n+        });\n+    }\n+\n+    private ServiceOfferingVO getcomputeOffering(final ServiceOfferingVO serviceOffering, final Map<String, String> customParameters) {\n+        return Transaction.execute(TransactionLegacy.CLOUD_DB, new TransactionCallback<ServiceOfferingVO>() {\n+            @Override\n+            public ServiceOfferingVO doInTransaction(final TransactionStatus status) {\n+                ServiceOfferingVO dummyoffering = new ServiceOfferingVO(serviceOffering);\n+                dummyoffering.setDynamicFlag(true);\n+                if (customParameters.containsKey(UsageEventVO.DynamicParameters.cpuNumber.name())) {\n+                    dummyoffering.setCpu(Integer.parseInt(customParameters.get(UsageEventVO.DynamicParameters.cpuNumber.name())));\n+                }\n+                if (customParameters.containsKey(UsageEventVO.DynamicParameters.cpuSpeed.name())) {\n+                    dummyoffering.setSpeed(Integer.parseInt(customParameters.get(UsageEventVO.DynamicParameters.cpuSpeed.name())));\n+                }\n+                if (customParameters.containsKey(UsageEventVO.DynamicParameters.memory.name())) {\n+                    dummyoffering.setRamSize(Integer.parseInt(customParameters.get(UsageEventVO.DynamicParameters.memory.name())));\n+                }\n+                return dummyoffering;\n+            }\n+        });\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/ServiceOfferingDaoImpl.java",
                "sha": "1d8b1b6b648e4a573fc906bc65d028e4f846e49d",
                "status": "added"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/UserVmDetailsDao.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/dao/UserVmDetailsDao.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/dao/UserVmDetailsDao.java",
                "patch": "@@ -0,0 +1,27 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.quota.dao;\n+\n+import java.util.Map;\n+\n+import com.cloud.utils.db.GenericDao;\n+\n+import org.apache.cloudstack.quota.vo.UserVmDetailVO;\n+\n+public interface UserVmDetailsDao extends GenericDao<UserVmDetailVO, Long> {\n+    Map<String, String> listDetailsKeyPairs(long resourceId);\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/UserVmDetailsDao.java",
                "sha": "f8ab3b9dbc46e8c061ea5a7ddc5730fbff06caa4",
                "status": "added"
            },
            {
                "additions": 59,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/UserVmDetailsDaoImpl.java",
                "changes": 59,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/dao/UserVmDetailsDaoImpl.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/dao/UserVmDetailsDaoImpl.java",
                "patch": "@@ -0,0 +1,59 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.quota.dao;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.ejb.Local;\n+\n+import org.springframework.stereotype.Component;\n+import org.apache.cloudstack.quota.vo.UserVmDetailVO;\n+\n+import com.cloud.utils.db.GenericDaoBase;\n+import com.cloud.utils.db.SearchBuilder;\n+import com.cloud.utils.db.SearchCriteria;\n+\n+@Component\n+@Local(value = UserVmDetailsDao.class)\n+public class UserVmDetailsDaoImpl extends GenericDaoBase<UserVmDetailVO, Long> implements UserVmDetailsDao {\n+    private SearchBuilder<UserVmDetailVO> AllFieldsSearch;\n+\n+    public UserVmDetailsDaoImpl() {\n+        AllFieldsSearch = createSearchBuilder();\n+        AllFieldsSearch.and(\"resourceId\", AllFieldsSearch.entity().getResourceId(), SearchCriteria.Op.EQ);\n+        AllFieldsSearch.and(\"name\", AllFieldsSearch.entity().getName(), SearchCriteria.Op.EQ);\n+        AllFieldsSearch.and(\"value\", AllFieldsSearch.entity().getValue(), SearchCriteria.Op.EQ);\n+        AllFieldsSearch.and(\"display\", AllFieldsSearch.entity().isDisplay(), SearchCriteria.Op.EQ);\n+        AllFieldsSearch.done();\n+    }\n+\n+    @Override\n+    public Map<String, String> listDetailsKeyPairs(long resourceId) {\n+        Map<String, String> details = new HashMap<String, String>();\n+        SearchCriteria<UserVmDetailVO> sc = AllFieldsSearch.create();\n+        sc.setParameters(\"resourceId\", resourceId);\n+\n+        List<UserVmDetailVO> results = search(sc, null);\n+        for (UserVmDetailVO result : results) {\n+            details.put(result.getName(), result.getValue());\n+        }\n+        return details;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/dao/UserVmDetailsDaoImpl.java",
                "sha": "beb3cdfbcb1fbf641b7dcf755aca1a28761d6191",
                "status": "added"
            },
            {
                "additions": 149,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/vo/QuotaAccountVO.java",
                "changes": 149,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/vo/QuotaAccountVO.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/vo/QuotaAccountVO.java",
                "patch": "@@ -0,0 +1,149 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.quota.vo;\n+\n+import org.apache.cloudstack.api.InternalIdentity;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+\n+import java.math.BigDecimal;\n+import java.util.Date;\n+\n+@Entity\n+@Table(name = \"quota_account\")\n+public class QuotaAccountVO implements InternalIdentity {\n+\n+    private static final long serialVersionUID = -7112846845287653210L;\n+\n+    @Id\n+    @Column(name = \"account_id\")\n+    private Long accountId = null;\n+\n+    @Column(name = \"quota_enforce\")\n+    private Integer quotaEnforce = 0;\n+\n+    @Column(name = \"quota_balance\")\n+    private BigDecimal quotaBalance;\n+\n+    @Column(name = \"quota_balance_date\")\n+    @Temporal(value = TemporalType.TIMESTAMP)\n+    private Date quotaBalanceDate = null;\n+\n+    @Column(name = \"quota_min_balance\")\n+    private BigDecimal quotaMinBalance;\n+\n+    @Column(name = \"quota_alert_type\")\n+    private Integer quotaAlertType = null;\n+\n+    @Column(name = \"quota_alert_date\")\n+    @Temporal(value = TemporalType.TIMESTAMP)\n+    private Date quotaAlertDate = null;\n+\n+    @Column(name = \"last_statement_date\")\n+    @Temporal(value = TemporalType.TIMESTAMP)\n+    private Date lastStatementDate = null;\n+\n+    public QuotaAccountVO() {\n+    }\n+\n+    public QuotaAccountVO(Long accountId) {\n+        super();\n+        this.accountId = accountId;\n+    }\n+\n+    @Override\n+    public long getId() {\n+        return accountId;\n+    }\n+\n+    public Long getAccountId() {\n+        return accountId;\n+    }\n+\n+    public void setAccountId(Long accountId) {\n+        this.accountId = accountId;\n+    }\n+\n+    public Integer getQuotaEnforce() {\n+        return quotaEnforce == null ? 0 : quotaEnforce;\n+    }\n+\n+    public void setQuotaEnforce(Integer quotaEnforce) {\n+        this.quotaEnforce = quotaEnforce;\n+    }\n+\n+    public BigDecimal getQuotaBalance() {\n+        return quotaBalance;\n+    }\n+\n+    public void setQuotaBalance(BigDecimal quotaBalance) {\n+        this.quotaBalance = quotaBalance;\n+    }\n+\n+    public BigDecimal getQuotaMinBalance() {\n+        return quotaMinBalance == null ? new BigDecimal(0) : quotaMinBalance;\n+    }\n+\n+    public void setQuotaMinBalance(BigDecimal quotaMinBalance) {\n+        this.quotaMinBalance = quotaMinBalance;\n+    }\n+\n+    public Integer getQuotaAlertType() {\n+        return quotaAlertType;\n+    }\n+\n+    public void setQuotaAlertType(Integer quotaAlertType) {\n+        this.quotaAlertType = quotaAlertType;\n+    }\n+\n+    public Date getQuotaAlertDate() {\n+        return quotaAlertDate == null ? null : new Date(quotaAlertDate.getTime());\n+    }\n+\n+    public void setQuotaAlertDate(Date quotaAlertDate) {\n+        this.quotaAlertDate = quotaAlertDate == null ? null : new Date(quotaAlertDate.getTime());\n+    }\n+\n+    public Date getQuotaBalanceDate() {\n+        return quotaBalanceDate  == null ? null : new Date(quotaBalanceDate.getTime());\n+    }\n+\n+    public void setQuotaBalanceDate(Date quotaBalanceDate) {\n+        this.quotaBalanceDate = quotaBalanceDate == null ? null : new Date(quotaBalanceDate.getTime());\n+    }\n+\n+    public Date getLastStatementDate() {\n+        return lastStatementDate  == null ? null : new Date(lastStatementDate.getTime());\n+    }\n+\n+    public void setLastStatementDate(Date lastStatementDate) {\n+        this.lastStatementDate = lastStatementDate  == null ? null : new Date(lastStatementDate.getTime());\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"QuotaAccountVO [accountId=\" + accountId + \", quotaEnforce=\" + quotaEnforce + \", quotaBalance=\" + quotaBalance + \", quotaBalanceDate=\" + quotaBalanceDate\n+                + \", quotaMinBalance=\" + quotaMinBalance + \", quotaAlertType=\" + quotaAlertType + \", quotaAlertDate=\" + quotaAlertDate + \", lastStatementDate=\" + lastStatementDate\n+                + \"]\";\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/vo/QuotaAccountVO.java",
                "sha": "00bc33a98dc8c4400b663a98b732db127a3edeba",
                "status": "added"
            },
            {
                "additions": 133,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/vo/QuotaBalanceVO.java",
                "changes": 133,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/vo/QuotaBalanceVO.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/vo/QuotaBalanceVO.java",
                "patch": "@@ -0,0 +1,133 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.quota.vo;\n+\n+import org.apache.cloudstack.api.InternalIdentity;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+\n+import java.math.BigDecimal;\n+import java.util.Date;\n+\n+@Entity\n+@Table(name = \"quota_balance\")\n+public class QuotaBalanceVO implements InternalIdentity {\n+\n+    private static final long serialVersionUID = -7112846845287653210L;\n+\n+    @Id\n+    @Column(name = \"id\")\n+    private Long id;\n+\n+    @Column(name = \"account_id\")\n+    private Long accountId = null;\n+\n+    @Column(name = \"domain_id\")\n+    private Long domainId = null;\n+\n+    @Column(name = \"credit_balance\")\n+    private BigDecimal creditBalance;\n+\n+    @Column(name = \"credits_id\")\n+    private Long creditsId;\n+\n+    @Column(name = \"updated_on\")\n+    @Temporal(value = TemporalType.TIMESTAMP)\n+    private Date updatedOn = null;\n+\n+    public QuotaBalanceVO() {\n+    }\n+\n+    public QuotaBalanceVO(final QuotaCreditsVO credit) {\n+        super();\n+        this.accountId = credit.getAccountId();\n+        this.domainId = credit.getDomainId();\n+        this.creditBalance = credit.getCredit();\n+        this.updatedOn = credit.getUpdatedOn()  == null ? null : new Date(credit.getUpdatedOn().getTime());\n+        this.creditsId = credit.getId();\n+    }\n+\n+    public QuotaBalanceVO(final Long accountId, final Long domainId, final BigDecimal creditBalance, final Date updatedOn) {\n+        super();\n+        this.accountId = accountId;\n+        this.domainId = domainId;\n+        this.creditBalance = creditBalance;\n+        this.creditsId = 0L;\n+        this.updatedOn = updatedOn  == null ? null : new Date(updatedOn.getTime());\n+    }\n+\n+    @Override\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public Long getAccountId() {\n+        return accountId;\n+    }\n+\n+    public void setAccountId(Long accountId) {\n+        this.accountId = accountId;\n+    }\n+\n+    public Long getDomainId() {\n+        return domainId;\n+    }\n+\n+    public void setDomainId(Long domainId) {\n+        this.domainId = domainId;\n+    }\n+\n+    public Long getCreditsId() {\n+        return creditsId;\n+    }\n+\n+    public void setCreditsId(Long creditsId) {\n+        this.creditsId = creditsId;\n+    }\n+\n+    public BigDecimal getCreditBalance() {\n+        return creditBalance;\n+    }\n+\n+    public void setCreditBalance(BigDecimal creditBalance) {\n+        this.creditBalance = creditBalance;\n+    }\n+\n+    public Date getUpdatedOn() {\n+        return updatedOn == null ? null : new Date(updatedOn.getTime());\n+    }\n+\n+    public void setUpdatedOn(Date updatedOn) {\n+        this.updatedOn =  updatedOn == null ? null : new Date(updatedOn.getTime());\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"QuotaBalanceVO [id=\" + id + \", accountId=\" + accountId + \", domainId=\" + domainId + \", creditBalance=\" + creditBalance + \", creditsId=\" + creditsId + \", updatedOn=\"\n+                + updatedOn + \"]\";\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/vo/QuotaBalanceVO.java",
                "sha": "b454a14b925ac8b15765b88b1d9579d48384a126",
                "status": "added"
            },
            {
                "additions": 116,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/vo/QuotaCreditsVO.java",
                "changes": 116,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/vo/QuotaCreditsVO.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/vo/QuotaCreditsVO.java",
                "patch": "@@ -0,0 +1,116 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.quota.vo;\n+\n+import org.apache.cloudstack.api.InternalIdentity;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+import java.math.BigDecimal;\n+import java.util.Date;\n+\n+@Entity\n+@Table(name = \"quota_credits\")\n+public class QuotaCreditsVO implements InternalIdentity {\n+\n+    private static final long serialVersionUID = -3576833845287653210L;\n+\n+    @Id\n+    @Column(name = \"id\")\n+    private Long id;\n+\n+    @Column(name = \"account_id\")\n+    private Long accountId = null;\n+\n+    @Column(name = \"domain_id\")\n+    private Long domainId = null;\n+\n+    @Column(name = \"credit\")\n+    private BigDecimal credit;\n+\n+    @Column(name = \"updated_on\")\n+    @Temporal(value = TemporalType.TIMESTAMP)\n+    private Date updatedOn = null;\n+\n+    public QuotaCreditsVO() {\n+    }\n+\n+    public QuotaCreditsVO(long accountId, long domainId, BigDecimal credit, long updatedBy) {\n+        super();\n+        this.accountId = accountId;\n+        this.domainId = domainId;\n+        this.credit = credit;\n+        this.updatedBy = updatedBy;\n+    }\n+\n+    public Long getAccountId() {\n+        return accountId;\n+    }\n+\n+    public void setAccountId(Long accountId) {\n+        this.accountId = accountId;\n+    }\n+\n+    public Long getDomainId() {\n+        return domainId;\n+    }\n+\n+    public void setDomainId(Long domainId) {\n+        this.domainId = domainId;\n+    }\n+\n+    public BigDecimal getCredit() {\n+        return credit;\n+    }\n+\n+    public void setCredit(BigDecimal credit) {\n+        this.credit = credit;\n+    }\n+\n+    public Date getUpdatedOn() {\n+        return updatedOn == null ? null : new Date(updatedOn.getTime());\n+    }\n+\n+    public void setUpdatedOn(Date updatedOn) {\n+        this.updatedOn = updatedOn == null ? null : new Date(updatedOn.getTime());\n+    }\n+\n+    public Long getUpdatedBy() {\n+        return updatedBy;\n+    }\n+\n+    public void setUpdatedBy(Long updatedBy) {\n+        this.updatedBy = updatedBy;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    // User ID of the creditor\n+    @Column(name = \"updated_by\")\n+    private Long updatedBy = null;\n+\n+    @Override\n+    public long getId() {\n+        return this.id;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/vo/QuotaCreditsVO.java",
                "sha": "f9c7b45b8a49b7cea699fec7b022a2291373bb8b",
                "status": "added"
            },
            {
                "additions": 109,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/vo/QuotaEmailTemplatesVO.java",
                "changes": 109,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/vo/QuotaEmailTemplatesVO.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/vo/QuotaEmailTemplatesVO.java",
                "patch": "@@ -0,0 +1,109 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.quota.vo;\n+\n+import org.apache.cloudstack.api.InternalIdentity;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+import java.util.Date;\n+\n+@Entity\n+@Table(name = \"quota_email_templates\")\n+public class QuotaEmailTemplatesVO implements InternalIdentity {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @Column(name = \"id\")\n+    private Long id;\n+\n+    @Column(name = \"template_name\")\n+    private String templateName;\n+\n+    @Column(name = \"template_subject\")\n+    private String templateSubject;\n+\n+    @Column(name = \"template_body\")\n+    private String templateBody;\n+\n+    @Column(name = \"locale\")\n+    private String locale;\n+\n+    @Column(name = \"updated\")\n+    @Temporal(value = TemporalType.TIMESTAMP)\n+    private Date lastUpdated = null;\n+\n+    public QuotaEmailTemplatesVO() {\n+    }\n+\n+    public QuotaEmailTemplatesVO(String templateName, String templateSubject, String templateBody) {\n+        super();\n+        this.templateName = templateName;\n+        this.templateSubject = templateSubject;\n+        this.templateBody = templateBody;\n+    }\n+\n+    @Override\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public String getTemplateName() {\n+        return templateName;\n+    }\n+\n+    public void setTemplateName(String templateName) {\n+        this.templateName = templateName;\n+    }\n+\n+    public String getTemplateSubject() {\n+        return templateSubject;\n+    }\n+\n+    public void setTemplateSubject(String templateSubject) {\n+        this.templateSubject = templateSubject;\n+    }\n+\n+    public String getTemplateBody() {\n+        return templateBody;\n+    }\n+\n+    public void setTemplateBody(String templateBody) {\n+        this.templateBody = templateBody;\n+    }\n+\n+    public Date getLastUpdated() {\n+        return lastUpdated == null ? null : new Date(lastUpdated.getTime());\n+    }\n+\n+    public void setLastUpdated(Date lastUpdated) {\n+        this.lastUpdated = lastUpdated == null ? null : new Date(lastUpdated.getTime());\n+    }\n+\n+    public String getLocale() {\n+        return locale;\n+    }\n+\n+    public void setLocale(String locale) {\n+        this.locale = locale;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/vo/QuotaEmailTemplatesVO.java",
                "sha": "1ad4b379b566be52bf7afe41195845abd279e9c6",
                "status": "added"
            },
            {
                "additions": 170,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/vo/QuotaTariffVO.java",
                "changes": 170,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/vo/QuotaTariffVO.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/vo/QuotaTariffVO.java",
                "patch": "@@ -0,0 +1,170 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.quota.vo;\n+\n+import org.apache.cloudstack.api.InternalIdentity;\n+import org.apache.cloudstack.quota.constant.QuotaTypes;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+\n+import java.math.BigDecimal;\n+import java.util.Date;\n+\n+@Entity\n+@Table(name = \"quota_tariff\")\n+public class QuotaTariffVO implements InternalIdentity {\n+    private static final long serialVersionUID = -7117933766387653203L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @Column(name = \"id\")\n+    private Long id;\n+\n+    @Column(name = \"usage_type\")\n+    private int usageType;\n+\n+    @Column(name = \"usage_name\")\n+    private String usageName;\n+\n+    @Column(name = \"usage_unit\")\n+    private String usageUnit;\n+\n+    @Column(name = \"usage_discriminator\")\n+    private String usageDiscriminator;\n+\n+    @Column(name = \"currency_value\")\n+    private BigDecimal currencyValue;\n+\n+    @Column(name = \"effective_on\")\n+    @Temporal(value = TemporalType.TIMESTAMP)\n+    private Date effectiveOn = null;\n+\n+    @Column(name = \"updated_on\")\n+    @Temporal(value = TemporalType.TIMESTAMP)\n+    private Date updatedOn = null;\n+\n+    @Column(name = \"updated_by\")\n+    private Long updatedBy = null;\n+\n+    public QuotaTariffVO() {\n+    }\n+\n+    public QuotaTariffVO(final int usagetype) {\n+        this.usageType = usagetype;\n+    }\n+\n+    public QuotaTariffVO(final int usagetype, final String usagename, final String usageunit, final String usagediscriminator, final BigDecimal currencyvalue,\n+            final Date effectiveOn, final Date updatedOn, final long updatedBy) {\n+        this.usageType = usagetype;\n+        this.usageName = usagename;\n+        this.usageUnit = usageunit;\n+        this.usageDiscriminator = usagediscriminator;\n+        this.currencyValue = currencyvalue;\n+        this.effectiveOn = effectiveOn;\n+        this.updatedOn = updatedOn == null ? null : new Date(updatedOn.getTime());\n+        this.updatedBy = updatedBy;\n+    }\n+\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public Date getEffectiveOn() {\n+        return effectiveOn == null ? null : new Date(effectiveOn.getTime());\n+    }\n+\n+    public void setEffectiveOn(Date effectiveOn) {\n+        this.effectiveOn = effectiveOn == null ? null : new Date(effectiveOn.getTime());\n+    }\n+\n+    public Date getUpdatedOn() {\n+        return updatedOn == null ? null : new Date(updatedOn.getTime());\n+    }\n+\n+    public void setUpdatedOn(Date updatedOn) {\n+        this.updatedOn = updatedOn == null ? null : new Date(updatedOn.getTime());\n+    }\n+\n+    public Long getUpdatedBy() {\n+        return updatedBy;\n+    }\n+\n+    public void setUpdatedBy(Long updatedBy) {\n+        this.updatedBy = updatedBy;\n+    }\n+\n+    public int getUsageType() {\n+        return usageType;\n+    }\n+\n+    public void setUsageType(int usageType) {\n+        this.usageType = usageType;\n+    }\n+\n+    public String getUsageName() {\n+        return usageName;\n+    }\n+\n+    public void setUsageName(String usageName) {\n+        this.usageName = usageName;\n+    }\n+\n+    public String getUsageUnit() {\n+        return usageUnit;\n+    }\n+\n+    public void setUsageUnit(String usageUnit) {\n+        this.usageUnit = usageUnit;\n+    }\n+\n+    public String getUsageDiscriminator() {\n+        return usageDiscriminator;\n+    }\n+\n+    public void setUsageDiscriminator(String usageDiscriminator) {\n+        this.usageDiscriminator = usageDiscriminator;\n+    }\n+\n+    public BigDecimal getCurrencyValue() {\n+        return currencyValue;\n+    }\n+\n+    public void setCurrencyValue(BigDecimal currencyValue) {\n+        this.currencyValue = currencyValue;\n+    }\n+\n+    public String getDescription() {\n+        return QuotaTypes.getDescription(usageType);\n+    }\n+\n+    public Long getIdObj(){\n+        return id;\n+    }\n+\n+    @Override\n+    public long getId() {\n+        return this.id;\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/vo/QuotaTariffVO.java",
                "sha": "8450d09e1e5ebf5d59e82d7ff2cd32a2cf57e9dc",
                "status": "added"
            },
            {
                "additions": 177,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/vo/QuotaUsageVO.java",
                "changes": 177,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/vo/QuotaUsageVO.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/vo/QuotaUsageVO.java",
                "patch": "@@ -0,0 +1,177 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.quota.vo;\n+\n+import java.math.BigDecimal;\n+import java.util.Date;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+\n+import org.apache.cloudstack.api.InternalIdentity;\n+\n+@Entity\n+@Table(name = \"quota_usage\")\n+public class QuotaUsageVO implements InternalIdentity {\n+\n+    private static final long serialVersionUID = -7117933845287204781L;\n+\n+    @Id\n+    @Column(name = \"id\")\n+    private Long id;\n+\n+    @Column(name = \"zone_id\")\n+    private Long zoneId = null;\n+\n+    @Column(name = \"account_id\")\n+    private Long accountId = null;\n+\n+    @Column(name = \"domain_id\")\n+    private Long domainId = null;\n+\n+    @Column(name = \"usage_item_id\")\n+    private Long usageItemId;\n+\n+    @Column(name = \"usage_type\")\n+    private int usageType;\n+\n+    @Column(name = \"quota_used\")\n+    private BigDecimal quotaUsed;\n+\n+    @Column(name = \"start_date\")\n+    @Temporal(value = TemporalType.TIMESTAMP)\n+    private Date startDate = null;\n+\n+    @Column(name = \"end_date\")\n+    @Temporal(value = TemporalType.TIMESTAMP)\n+    private Date endDate = null;\n+\n+    public QuotaUsageVO() {\n+        usageType = -1;\n+        quotaUsed = new BigDecimal(0);\n+        endDate = new Date();\n+        startDate = new Date();\n+    }\n+\n+    public QuotaUsageVO(Long usageItemId, Long zoneId, Long accountId, Long domainId, int usageType, BigDecimal quotaUsed, Date startDate, Date endDate) {\n+        super();\n+        this.usageItemId = usageItemId;\n+        this.zoneId = zoneId;\n+        this.accountId = accountId;\n+        this.domainId = domainId;\n+        this.usageType = usageType;\n+        this.quotaUsed = quotaUsed;\n+        this.startDate = startDate == null ? null : new Date(startDate.getTime());\n+        this.endDate = endDate == null ? null : new Date(endDate.getTime());\n+    }\n+\n+    public QuotaUsageVO(QuotaUsageVO toclone) {\n+        super();\n+        this.usageItemId = toclone.usageItemId;\n+        this.zoneId = toclone.zoneId;\n+        this.accountId = toclone.accountId;\n+        this.domainId = toclone.domainId;\n+        this.usageType = toclone.usageType;\n+        this.quotaUsed = toclone.quotaUsed;\n+        this.startDate = startDate == null ? null : new Date(startDate.getTime());\n+        this.endDate = endDate == null ? null : new Date(endDate.getTime());\n+    }\n+\n+    public Long getZoneId() {\n+        return zoneId;\n+    }\n+\n+    public void setZoneId(Long zoneId) {\n+        this.zoneId = zoneId;\n+    }\n+\n+    public Long getAccountId() {\n+        return accountId;\n+    }\n+\n+    public void setAccountId(Long accountId) {\n+        this.accountId = accountId;\n+    }\n+\n+    public Long getDomainId() {\n+        return domainId;\n+    }\n+\n+    public void setDomainId(Long domainId) {\n+        this.domainId = domainId;\n+    }\n+\n+    @Override\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public Long getUsageItemId() {\n+        return usageItemId;\n+    }\n+\n+    public void setUsageItemId(Long usageItemId) {\n+        this.usageItemId = usageItemId;\n+    }\n+\n+    public int getUsageType() {\n+        return usageType;\n+    }\n+\n+    public void setUsageType(int usageType) {\n+        this.usageType = usageType;\n+    }\n+\n+    public BigDecimal getQuotaUsed() {\n+        return quotaUsed;\n+    }\n+\n+    public void setQuotaUsed(BigDecimal quotaUsed) {\n+        this.quotaUsed = quotaUsed;\n+    }\n+\n+    public Date getStartDate() {\n+        return startDate == null ? null : new Date(startDate.getTime());\n+    }\n+\n+    public void setStartDate(Date startDate) {\n+        this.startDate = startDate == null ? null : new Date(startDate.getTime());\n+    }\n+\n+    public Date getEndDate() {\n+        return endDate == null ? null : new Date(endDate.getTime());\n+    }\n+\n+    public void setEndDate(Date endDate) {\n+        this.endDate = endDate == null ? null : new Date(endDate.getTime());\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"QuotaUsageVO [id=\" + id + \", zoneId=\" + zoneId + \", accountId=\" + accountId + \", domainId=\" + domainId + \", usageItemId=\" + usageItemId + \", usageType=\" + usageType\n+                + \", quotaUsed=\" + quotaUsed + \", startDate=\" + startDate + \", endDate=\" + endDate + \"]\";\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/vo/QuotaUsageVO.java",
                "sha": "2a26951237ea3dfd4bb4f397fe29a6b8417aba79",
                "status": "added"
            },
            {
                "additions": 336,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/vo/ServiceOfferingVO.java",
                "changes": 336,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/vo/ServiceOfferingVO.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/vo/ServiceOfferingVO.java",
                "patch": "@@ -0,0 +1,336 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.quota.vo;\n+\n+import java.util.Map;\n+\n+import javax.persistence.Column;\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import javax.persistence.PrimaryKeyJoinColumn;\n+import javax.persistence.Table;\n+import javax.persistence.Transient;\n+\n+import com.cloud.offering.ServiceOffering;\n+import com.cloud.storage.DiskOfferingVO;\n+import com.cloud.storage.Storage.ProvisioningType;\n+import com.cloud.vm.VirtualMachine;\n+\n+@Entity\n+@Table(name = \"service_offering\")\n+@DiscriminatorValue(value = \"Service\")\n+@PrimaryKeyJoinColumn(name = \"id\")\n+public class ServiceOfferingVO extends DiskOfferingVO implements ServiceOffering {\n+    @Column(name = \"cpu\")\n+    private Integer cpu;\n+\n+    @Column(name = \"speed\")\n+    private Integer speed;\n+\n+    @Column(name = \"ram_size\")\n+    private Integer ramSize;\n+\n+    @Column(name = \"nw_rate\")\n+    private Integer rateMbps;\n+\n+    @Column(name = \"mc_rate\")\n+    private Integer multicastRateMbps;\n+\n+    @Column(name = \"ha_enabled\")\n+    private boolean offerHA;\n+\n+    @Column(name = \"limit_cpu_use\")\n+    private boolean limitCpuUse;\n+\n+    @Column(name = \"is_volatile\")\n+    private boolean volatileVm;\n+\n+    @Column(name = \"host_tag\")\n+    private String hostTag;\n+\n+    @Column(name = \"default_use\")\n+    private boolean defaultUse;\n+\n+    @Column(name = \"vm_type\")\n+    private String vmType;\n+\n+    @Column(name = \"sort_key\")\n+    int sortKey;\n+\n+    @Column(name = \"deployment_planner\")\n+    private String deploymentPlanner = null;\n+\n+    // This is a delayed load value.  If the value is null,\n+    // then this field has not been loaded yet.\n+    // Call service offering dao to load it.\n+    @Transient\n+    Map<String, String> details;\n+\n+    // This flag is required to tell if the offering is dynamic once the cpu, memory and speed are set.\n+    // In some cases cpu, memory and speed are set to non-null values even if the offering is dynamic.\n+    @Transient\n+    boolean isDynamic;\n+\n+    protected ServiceOfferingVO() {\n+        super();\n+    }\n+\n+    public ServiceOfferingVO(String name, Integer cpu, Integer ramSize, Integer speed, Integer rateMbps, Integer multicastRateMbps, boolean offerHA, String displayText,\n+                             ProvisioningType provisioningType, boolean useLocalStorage, boolean recreatable, String tags, boolean systemUse, VirtualMachine.Type vmType, boolean defaultUse) {\n+        super(name, displayText, provisioningType, false, tags, recreatable, useLocalStorage, systemUse, true);\n+        this.cpu = cpu;\n+        this.ramSize = ramSize;\n+        this.speed = speed;\n+        this.rateMbps = rateMbps;\n+        this.multicastRateMbps = multicastRateMbps;\n+        this.offerHA = offerHA;\n+        limitCpuUse = false;\n+        volatileVm = false;\n+        this.defaultUse = defaultUse;\n+        this.vmType = vmType == null ? null : vmType.toString().toLowerCase();\n+    }\n+\n+    public ServiceOfferingVO(String name, Integer cpu, Integer ramSize, Integer speed, Integer rateMbps, Integer multicastRateMbps, boolean offerHA, boolean limitCpuUse,\n+                             boolean volatileVm, String displayText, ProvisioningType provisioningType, boolean useLocalStorage, boolean recreatable, String tags, boolean systemUse, VirtualMachine.Type vmType, Long domainId) {\n+        super(name, displayText, provisioningType, false, tags, recreatable, useLocalStorage, systemUse, true, domainId);\n+        this.cpu = cpu;\n+        this.ramSize = ramSize;\n+        this.speed = speed;\n+        this.rateMbps = rateMbps;\n+        this.multicastRateMbps = multicastRateMbps;\n+        this.offerHA = offerHA;\n+        this.limitCpuUse = limitCpuUse;\n+        this.volatileVm = volatileVm;\n+        this.vmType = vmType == null ? null : vmType.toString().toLowerCase();\n+    }\n+\n+    public ServiceOfferingVO(String name, Integer cpu, Integer ramSize, Integer speed, Integer rateMbps, Integer multicastRateMbps, boolean offerHA,\n+                             boolean limitResourceUse, boolean volatileVm, String displayText, ProvisioningType provisioningType, boolean useLocalStorage, boolean recreatable, String tags, boolean systemUse,\n+                             VirtualMachine.Type vmType, Long domainId, String hostTag) {\n+        this(name,\n+                cpu,\n+                ramSize,\n+                speed,\n+                rateMbps,\n+                multicastRateMbps,\n+                offerHA,\n+                limitResourceUse,\n+                volatileVm,\n+                displayText,\n+                provisioningType,\n+                useLocalStorage,\n+                recreatable,\n+                tags,\n+                systemUse,\n+                vmType,\n+                domainId);\n+        this.hostTag = hostTag;\n+    }\n+\n+    public ServiceOfferingVO(String name, Integer cpu, Integer ramSize, Integer speed, Integer rateMbps, Integer multicastRateMbps, boolean offerHA,\n+                             boolean limitResourceUse, boolean volatileVm, String displayText, ProvisioningType provisioningType, boolean useLocalStorage, boolean recreatable, String tags, boolean systemUse,\n+                             VirtualMachine.Type vmType, Long domainId, String hostTag, String deploymentPlanner) {\n+        this(name,\n+                cpu,\n+                ramSize,\n+                speed,\n+                rateMbps,\n+                multicastRateMbps,\n+                offerHA,\n+                limitResourceUse,\n+                volatileVm,\n+                displayText,\n+                provisioningType,\n+                useLocalStorage,\n+                recreatable,\n+                tags,\n+                systemUse,\n+                vmType,\n+                domainId,\n+                hostTag);\n+        this.deploymentPlanner = deploymentPlanner;\n+    }\n+\n+    public ServiceOfferingVO(ServiceOfferingVO offering) {\n+        super(offering.getId(),\n+                offering.getName(),\n+                offering.getDisplayText(),\n+                offering.getProvisioningType(),\n+                false,\n+                offering.getTags(),\n+                offering.isRecreatable(),\n+                offering.getUseLocalStorage(),\n+                offering.getSystemUse(),\n+                true,\n+                offering.isCustomizedIops()== null ? false:offering.isCustomizedIops(),\n+                offering.getDomainId(),\n+                offering.getMinIops(),\n+                offering.getMaxIops());\n+        cpu = offering.getCpu();\n+        ramSize = offering.getRamSize();\n+        speed = offering.getSpeed();\n+        rateMbps = offering.getRateMbps();\n+        multicastRateMbps = offering.getMulticastRateMbps();\n+        offerHA = offering.getOfferHA();\n+        limitCpuUse = offering.getLimitCpuUse();\n+        volatileVm = offering.getVolatileVm();\n+        hostTag = offering.getHostTag();\n+        vmType = offering.getSystemVmType();\n+    }\n+\n+    @Override\n+    public boolean getOfferHA() {\n+        return offerHA;\n+    }\n+\n+    public void setOfferHA(boolean offerHA) {\n+        this.offerHA = offerHA;\n+    }\n+\n+    @Override\n+    public boolean getLimitCpuUse() {\n+        return limitCpuUse;\n+    }\n+\n+    public void setLimitResourceUse(boolean limitCpuUse) {\n+        this.limitCpuUse = limitCpuUse;\n+    }\n+\n+    @Override\n+    public boolean getDefaultUse() {\n+        return defaultUse;\n+    }\n+\n+    @Override\n+    @Transient\n+    public String[] getTagsArray() {\n+        String tags = getTags();\n+        if (tags == null || tags.length() == 0) {\n+            return new String[0];\n+        }\n+\n+        return tags.split(\",\");\n+    }\n+\n+    @Override\n+    public Integer getCpu() {\n+        return cpu;\n+    }\n+\n+    public void setCpu(int cpu) {\n+        this.cpu = cpu;\n+    }\n+\n+    public void setSpeed(int speed) {\n+        this.speed = speed;\n+    }\n+\n+    public void setRamSize(int ramSize) {\n+        this.ramSize = ramSize;\n+    }\n+\n+    @Override\n+    public Integer getSpeed() {\n+        return speed;\n+    }\n+\n+    @Override\n+    public Integer getRamSize() {\n+        return ramSize;\n+    }\n+\n+    public void setRateMbps(Integer rateMbps) {\n+        this.rateMbps = rateMbps;\n+    }\n+\n+    @Override\n+    public Integer getRateMbps() {\n+        return rateMbps;\n+    }\n+\n+    public void setMulticastRateMbps(Integer multicastRateMbps) {\n+        this.multicastRateMbps = multicastRateMbps;\n+    }\n+\n+    @Override\n+    public Integer getMulticastRateMbps() {\n+        return multicastRateMbps;\n+    }\n+\n+    public void setHostTag(String hostTag) {\n+        this.hostTag = hostTag;\n+    }\n+\n+    @Override\n+    public String getHostTag() {\n+        return hostTag;\n+    }\n+\n+    @Override\n+    public String getSystemVmType() {\n+        return vmType;\n+    }\n+\n+    @Override\n+    public void setSortKey(int key) {\n+        sortKey = key;\n+    }\n+\n+    @Override\n+    public int getSortKey() {\n+        return sortKey;\n+    }\n+\n+    @Override\n+    public boolean getVolatileVm() {\n+        return volatileVm;\n+    }\n+\n+    @Override\n+    public String getDeploymentPlanner() {\n+        return deploymentPlanner;\n+    }\n+\n+    public Map<String, String> getDetails() {\n+        return details;\n+    }\n+\n+    public String getDetail(String name) {\n+        assert (details != null) : \"Did you forget to load the details?\";\n+\n+        return details != null ? details.get(name) : null;\n+    }\n+\n+    public void setDetail(String name, String value) {\n+        assert (details != null) : \"Did you forget to load the details?\";\n+\n+        details.put(name, value);\n+    }\n+\n+    public void setDetails(Map<String, String> details) {\n+        this.details = details;\n+    }\n+\n+    @Override\n+    public boolean isDynamic() {\n+        return cpu == null || speed == null || ramSize == null || isDynamic;\n+    }\n+\n+    public void setDynamicFlag(boolean isdynamic) {\n+        isDynamic = isdynamic;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/vo/ServiceOfferingVO.java",
                "sha": "2d11edda779bf57b0a0dccbf91a7a69f816ff3fd",
                "status": "added"
            },
            {
                "additions": 83,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/vo/UserVmDetailVO.java",
                "changes": 83,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/vo/UserVmDetailVO.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/vo/UserVmDetailVO.java",
                "patch": "@@ -0,0 +1,83 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.quota.vo;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+import org.apache.cloudstack.api.ResourceDetail;\n+\n+@Entity\n+@Table(name = \"user_vm_details\")\n+public class UserVmDetailVO implements ResourceDetail {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @Column(name = \"id\")\n+    private long id;\n+\n+    @Column(name = \"vm_id\")\n+    private long resourceId;\n+\n+    @Column(name = \"name\")\n+    private String name;\n+\n+    @Column(name = \"value\", length = 5120)\n+    private String value;\n+\n+    @Column(name = \"display\")\n+    private boolean display = true;\n+\n+    public UserVmDetailVO() {\n+    }\n+\n+    public UserVmDetailVO(long vmId, String name, String value, boolean display) {\n+        this.resourceId = vmId;\n+        this.name = name;\n+        this.value = value;\n+        this.display = display;\n+    }\n+\n+    @Override\n+    public long getId() {\n+        return id;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    @Override\n+    public long getResourceId() {\n+        return resourceId;\n+    }\n+\n+    @Override\n+    public boolean isDisplay() {\n+        return display;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/src/org/apache/cloudstack/quota/vo/UserVmDetailVO.java",
                "sha": "21fcdbdb52a2e394f4097430ec5c31b1fbe78c54",
                "status": "added"
            },
            {
                "additions": 197,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/test/org/apache/cloudstack/quota/QuotaAlertManagerImplTest.java",
                "changes": 197,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/test/org/apache/cloudstack/quota/QuotaAlertManagerImplTest.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/test/org/apache/cloudstack/quota/QuotaAlertManagerImplTest.java",
                "patch": "@@ -0,0 +1,197 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.quota;\n+\n+import com.cloud.domain.DomainVO;\n+import com.cloud.domain.dao.DomainDao;\n+import com.cloud.user.Account;\n+import com.cloud.user.AccountVO;\n+import com.cloud.user.UserVO;\n+import com.cloud.user.dao.AccountDao;\n+import com.cloud.user.dao.UserDao;\n+import com.cloud.utils.db.TransactionLegacy;\n+import junit.framework.TestCase;\n+import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n+import org.apache.cloudstack.quota.constant.QuotaConfig;\n+import org.apache.cloudstack.quota.dao.QuotaAccountDao;\n+import org.apache.cloudstack.quota.dao.QuotaEmailTemplatesDao;\n+import org.apache.cloudstack.quota.dao.QuotaUsageDao;\n+import org.apache.cloudstack.quota.vo.QuotaAccountVO;\n+import org.apache.cloudstack.quota.vo.QuotaEmailTemplatesVO;\n+import org.joda.time.DateTime;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.Spy;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import javax.mail.MessagingException;\n+import javax.naming.ConfigurationException;\n+import java.io.UnsupportedEncodingException;\n+import java.lang.reflect.Field;\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class QuotaAlertManagerImplTest extends TestCase {\n+\n+    @Mock\n+    AccountDao accountDao;\n+    @Mock\n+    QuotaAccountDao quotaAcc;\n+    @Mock\n+    UserDao userDao;\n+    @Mock\n+    DomainDao domainDao;\n+    @Mock\n+    QuotaEmailTemplatesDao quotaEmailTemplateDao;\n+    @Mock\n+    ConfigurationDao configDao;\n+    @Mock\n+    QuotaUsageDao quotaUsage;\n+    @Mock\n+    QuotaAlertManagerImpl.EmailQuotaAlert emailQuotaAlert;\n+\n+    @Spy\n+    QuotaAlertManagerImpl quotaAlertManager = new QuotaAlertManagerImpl();\n+\n+    private void injectMockToField(Object mock, String fieldName) throws NoSuchFieldException, IllegalAccessException {\n+        Field f = QuotaAlertManagerImpl.class.getDeclaredField(fieldName);\n+        f.setAccessible(true);\n+        f.set(quotaAlertManager, mock);\n+    }\n+\n+    @Before\n+    public void setup() throws IllegalAccessException, NoSuchFieldException, ConfigurationException {\n+        // Dummy transaction stack setup\n+        TransactionLegacy.open(\"QuotaAlertManagerImplTest\");\n+\n+        injectMockToField(accountDao, \"_accountDao\");\n+        injectMockToField(quotaAcc, \"_quotaAcc\");\n+        injectMockToField(userDao, \"_userDao\");\n+        injectMockToField(domainDao, \"_domainDao\");\n+        injectMockToField(quotaEmailTemplateDao, \"_quotaEmailTemplateDao\");\n+        injectMockToField(configDao, \"_configDao\");\n+        injectMockToField(quotaUsage, \"_quotaUsage\");\n+        injectMockToField(emailQuotaAlert, \"_emailQuotaAlert\");\n+    }\n+\n+    @Test\n+    public void testCheckAndSendQuotaAlertEmails() {\n+        AccountVO accountVO = new AccountVO();\n+        accountVO.setId(2L);\n+        accountVO.setDomainId(1L);\n+        accountVO.setType(Account.ACCOUNT_TYPE_NORMAL);\n+        Mockito.when(accountDao.findById(Mockito.anyLong())).thenReturn(accountVO);\n+\n+        QuotaAccountVO acc = new QuotaAccountVO(2L);\n+        acc.setQuotaBalance(new BigDecimal(404));\n+        acc.setQuotaMinBalance(new BigDecimal(100));\n+        acc.setQuotaBalanceDate(new Date());\n+        acc.setQuotaAlertDate(null);\n+        acc.setQuotaEnforce(0);\n+        List<QuotaAccountVO> accounts = new ArrayList<>();\n+        accounts.add(acc);\n+        Mockito.when(quotaAcc.listAllQuotaAccount()).thenReturn(accounts);\n+\n+        // Don't test sendQuotaAlert yet\n+        Mockito.doNothing().when(quotaAlertManager).sendQuotaAlert(Mockito.any(QuotaAlertManagerImpl.DeferredQuotaEmail.class));\n+        Mockito.doReturn(true).when(quotaAlertManager).lockAccount(Mockito.anyLong());\n+\n+        // call real method on send monthly statement\n+        Mockito.doCallRealMethod().when(quotaAlertManager).checkAndSendQuotaAlertEmails();\n+\n+        // Case1: valid balance, no email should be sent\n+        quotaAlertManager.checkAndSendQuotaAlertEmails();\n+        Mockito.verify(quotaAlertManager, Mockito.times(0)).sendQuotaAlert(Mockito.any(QuotaAlertManagerImpl.DeferredQuotaEmail.class));\n+\n+        // Case2: low balance, email should be sent\n+        accounts.get(0).setQuotaBalance(new BigDecimal(99));\n+        //Mockito.when(quotaAcc.listAll()).thenReturn(accounts);\n+        quotaAlertManager.checkAndSendQuotaAlertEmails();\n+        Mockito.verify(quotaAlertManager, Mockito.times(1)).sendQuotaAlert(Mockito.any(QuotaAlertManagerImpl.DeferredQuotaEmail.class));\n+    }\n+\n+    @Test\n+    public void testSendQuotaAlert() throws UnsupportedEncodingException, MessagingException {\n+        Mockito.doCallRealMethod().when(quotaAlertManager).sendQuotaAlert(Mockito.any(QuotaAlertManagerImpl.DeferredQuotaEmail.class));\n+\n+        AccountVO account = new AccountVO();\n+        account.setId(2L);\n+        account.setDomainId(1L);\n+        account.setType(Account.ACCOUNT_TYPE_NORMAL);\n+        account.setAccountName(\"admin\");\n+        account.setUuid(\"uuid\");\n+\n+        QuotaAccountVO quotaAccount = new QuotaAccountVO(2L);\n+        quotaAccount.setQuotaBalance(new BigDecimal(404));\n+        quotaAccount.setQuotaMinBalance(new BigDecimal(100));\n+        quotaAccount.setQuotaBalanceDate(new Date());\n+        quotaAccount.setQuotaAlertDate(null);\n+        quotaAccount.setQuotaEnforce(0);\n+\n+        QuotaAlertManagerImpl.DeferredQuotaEmail email = new QuotaAlertManagerImpl.DeferredQuotaEmail(account, quotaAccount, new BigDecimal(100),\n+                QuotaConfig.QuotaEmailTemplateTypes.QUOTA_LOW);\n+\n+        QuotaEmailTemplatesVO quotaEmailTemplatesVO = new QuotaEmailTemplatesVO();\n+        quotaEmailTemplatesVO.setTemplateSubject(\"Low quota\");\n+        quotaEmailTemplatesVO.setTemplateBody(\"Low quota {{accountID}}\");\n+        List<QuotaEmailTemplatesVO> emailTemplates = new ArrayList<>();\n+        emailTemplates.add(quotaEmailTemplatesVO);\n+        Mockito.when(quotaEmailTemplateDao.listAllQuotaEmailTemplates(Mockito.anyString())).thenReturn(emailTemplates);\n+\n+        DomainVO domain = new DomainVO();\n+        domain.setUuid(\"uuid\");\n+        domain.setName(\"/domain\");\n+        Mockito.when(domainDao.findByIdIncludingRemoved(Mockito.anyLong())).thenReturn(new DomainVO());\n+\n+        UserVO user = new UserVO();\n+        user.setUsername(\"user1\");\n+        user.setEmail(\"user1@apache.org\");\n+        List<UserVO> users = new ArrayList<>();\n+        users.add(user);\n+        Mockito.when(userDao.listByAccount(Mockito.anyLong())).thenReturn(users);\n+\n+        quotaAlertManager.sendQuotaAlert(email);\n+        assertTrue(email.getSendDate()!= null);\n+        Mockito.verify(emailQuotaAlert, Mockito.times(1)).sendQuotaAlert(Mockito.anyList(), Mockito.anyString(), Mockito.anyString());\n+    }\n+\n+    @Test\n+    public void testGetDifferenceDays() {\n+        Date now = new Date();\n+        assertTrue(QuotaAlertManagerImpl.getDifferenceDays(now, now) == 0L);\n+        assertTrue(QuotaAlertManagerImpl.getDifferenceDays(now, new DateTime(now).plusDays(1).toDate()) == 1L);\n+    }\n+\n+    @Test\n+    public void testLockAccount() {\n+        AccountVO accountVO = new AccountVO();\n+        accountVO.setId(2L);\n+        accountVO.setDomainId(1L);\n+        accountVO.setType(Account.ACCOUNT_TYPE_NORMAL);\n+        accountVO.setState(Account.State.enabled);\n+        Mockito.when(accountDao.findById(Mockito.anyLong())).thenReturn(accountVO);\n+        Mockito.when(accountDao.createForUpdate()).thenReturn(accountVO);\n+        Mockito.when(accountDao.update(Mockito.eq(accountVO.getId()), Mockito.eq(accountVO))).thenReturn(true);\n+        assertTrue(quotaAlertManager.lockAccount(accountVO.getId()));\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/test/org/apache/cloudstack/quota/QuotaAlertManagerImplTest.java",
                "sha": "14244fc204d9f5868e2c57a1c226fa728224bda4",
                "status": "added"
            },
            {
                "additions": 200,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/test/org/apache/cloudstack/quota/QuotaManagerImplTest.java",
                "changes": 200,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/test/org/apache/cloudstack/quota/QuotaManagerImplTest.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/test/org/apache/cloudstack/quota/QuotaManagerImplTest.java",
                "patch": "@@ -0,0 +1,200 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.quota;\n+\n+import com.cloud.usage.UsageVO;\n+import com.cloud.usage.dao.UsageDao;\n+import com.cloud.user.Account;\n+import com.cloud.user.AccountVO;\n+import com.cloud.user.dao.AccountDao;\n+import com.cloud.utils.Pair;\n+import com.cloud.utils.db.TransactionLegacy;\n+import junit.framework.TestCase;\n+import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n+import org.apache.cloudstack.quota.dao.QuotaAccountDao;\n+import org.apache.cloudstack.quota.dao.QuotaBalanceDao;\n+import org.apache.cloudstack.quota.dao.QuotaTariffDao;\n+import org.apache.cloudstack.quota.dao.QuotaUsageDao;\n+import org.apache.cloudstack.quota.dao.ServiceOfferingDao;\n+import org.apache.cloudstack.quota.vo.QuotaAccountVO;\n+import org.apache.cloudstack.quota.vo.QuotaTariffVO;\n+import org.apache.cloudstack.quota.vo.QuotaUsageVO;\n+import org.apache.cloudstack.usage.UsageTypes;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.Spy;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import javax.naming.ConfigurationException;\n+import java.lang.reflect.Field;\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class QuotaManagerImplTest extends TestCase {\n+\n+    @Mock\n+    private AccountDao accountDao;\n+    @Mock\n+    private QuotaAccountDao quotaAcc;\n+    @Mock\n+    private UsageDao usageDao;\n+    @Mock\n+    private QuotaTariffDao quotaTariffDao;\n+    @Mock\n+    private QuotaUsageDao quotaUsageDao;\n+    @Mock\n+    private ServiceOfferingDao serviceOfferingDao;\n+    @Mock\n+    private QuotaBalanceDao quotaBalanceDao;\n+    @Mock\n+    private ConfigurationDao configDao;\n+\n+    @Spy\n+    QuotaManagerImpl quotaManager = new QuotaManagerImpl();\n+\n+    private void injectMockToField(Object mock, String fieldName) throws NoSuchFieldException, IllegalAccessException {\n+        Field f = QuotaManagerImpl.class.getDeclaredField(fieldName);\n+        f.setAccessible(true);\n+        f.set(quotaManager, mock);\n+    }\n+\n+    @Before\n+    public void setup() throws IllegalAccessException, NoSuchFieldException, ConfigurationException {\n+        // Dummy transaction stack setup\n+        TransactionLegacy.open(\"QuotaManagerImplTest\");\n+\n+        injectMockToField(accountDao, \"_accountDao\");\n+        injectMockToField(quotaAcc, \"_quotaAcc\");\n+        injectMockToField(usageDao, \"_usageDao\");\n+        injectMockToField(quotaTariffDao, \"_quotaTariffDao\");\n+        injectMockToField(quotaUsageDao, \"_quotaUsageDao\");\n+        injectMockToField(serviceOfferingDao, \"_serviceOfferingDao\");\n+        injectMockToField(quotaBalanceDao, \"_quotaBalanceDao\");\n+        injectMockToField(configDao, \"_configDao\");\n+    }\n+\n+    @Test\n+    public void testConfig() throws ConfigurationException {\n+        Mockito.when(configDao.getConfiguration(Mockito.anyMapOf(String.class, Object.class))).thenReturn(new HashMap<String, String>());\n+        Map<String, Object> map = new HashMap<>();\n+        map.put(\"usage.stats.job.aggregation.range\", \"0\");\n+        assertTrue(quotaManager.configure(\"quotaManager\", map));\n+    }\n+\n+    @Test\n+    public void testCalculateQuotaUsage() {\n+        AccountVO accountVO = new AccountVO();\n+        accountVO.setId(2L);\n+        accountVO.setDomainId(1L);\n+        accountVO.setType(Account.ACCOUNT_TYPE_NORMAL);\n+        List<AccountVO> accountVOList = new ArrayList<>();\n+        accountVOList.add(accountVO);\n+        Mockito.when(accountDao.listAll()).thenReturn(accountVOList);\n+\n+        UsageVO usageVO = new UsageVO();\n+        usageVO.setQuotaCalculated(0);\n+        List<UsageVO> usageVOList = new ArrayList<UsageVO>();\n+        usageVOList.add(usageVO);\n+        Pair<List<? extends UsageVO>, Integer> usageRecords = new Pair<List<? extends UsageVO>, Integer>(usageVOList, usageVOList.size());\n+        Mockito.when(usageDao.getUsageRecordsPendingQuotaAggregation(Mockito.anyLong(), Mockito.anyLong())).thenReturn(usageRecords);\n+\n+        QuotaUsageVO quotaUsageVO = new QuotaUsageVO();\n+        quotaUsageVO.setAccountId(2L);\n+        List<QuotaUsageVO> quotaListForAccount = new ArrayList<>();\n+        quotaListForAccount.add(quotaUsageVO);\n+        Mockito.doReturn(quotaListForAccount).when(quotaManager).aggregatePendingQuotaRecordsForAccount(Mockito.eq(accountVO), Mockito.eq(usageRecords));\n+        Mockito.doNothing().when(quotaManager).processQuotaBalanceForAccount(Mockito.eq(accountVO), Mockito.eq(quotaListForAccount));\n+\n+        assertTrue(quotaManager.calculateQuotaUsage());\n+    }\n+\n+    @Test\n+    public void testAggregatePendingQuotaRecordsForAccount() {\n+        AccountVO accountVO = new AccountVO();\n+        accountVO.setId(2L);\n+        accountVO.setDomainId(1L);\n+        accountVO.setType(Account.ACCOUNT_TYPE_NORMAL);\n+\n+        UsageVO usageVO = new UsageVO();\n+        usageVO.setQuotaCalculated(0);\n+        usageVO.setUsageType(UsageTypes.ALLOCATED_VM);\n+        List<UsageVO> usageVOList = new ArrayList<UsageVO>();\n+        usageVOList.add(usageVO);\n+        Pair<List<? extends UsageVO>, Integer> usageRecords = new Pair<List<? extends UsageVO>, Integer>(usageVOList, usageVOList.size());\n+\n+        QuotaUsageVO quotaUsageVO = new QuotaUsageVO();\n+        quotaUsageVO.setAccountId(2L);\n+        Mockito.doReturn(quotaUsageVO).when(quotaManager).updateQuotaAllocatedVMUsage(Mockito.eq(usageVO), Mockito.any(BigDecimal.class));\n+\n+        assertTrue(quotaManager.aggregatePendingQuotaRecordsForAccount(accountVO, new Pair<List<? extends UsageVO>, Integer>(null, 0)).size() == 0);\n+        assertTrue(quotaManager.aggregatePendingQuotaRecordsForAccount(accountVO, usageRecords).size() == 1);\n+    }\n+\n+    @Test\n+    public void testUpdateQuotaRecords() {\n+        UsageVO usageVO = new UsageVO();\n+        usageVO.setId(100L);\n+        usageVO.setQuotaCalculated(0);\n+        usageVO.setUsageType(UsageTypes.NETWORK_BYTES_SENT);\n+        usageVO.setRawUsage(9000000000.0);\n+        usageVO.setSize(1010101010L);\n+\n+        QuotaTariffVO tariffVO = new QuotaTariffVO();\n+        tariffVO.setCurrencyValue(new BigDecimal(1));\n+        Mockito.when(quotaTariffDao.findTariffPlanByUsageType(Mockito.anyInt(), Mockito.any(Date.class))).thenReturn(tariffVO);\n+\n+        QuotaUsageVO qu = quotaManager.updateQuotaNetwork(usageVO, UsageTypes.NETWORK_BYTES_SENT);\n+        assertTrue(qu.getQuotaUsed().compareTo(BigDecimal.ZERO) > 0);\n+        qu = quotaManager.updateQuotaAllocatedVMUsage(usageVO, new BigDecimal(0.5));\n+        assertTrue(qu.getQuotaUsed().compareTo(BigDecimal.ZERO) > 0);\n+        qu = quotaManager.updateQuotaDiskUsage(usageVO, new BigDecimal(0.5), UsageTypes.VOLUME);\n+        assertTrue(qu.getQuotaUsed().compareTo(BigDecimal.ZERO) > 0);\n+        qu = quotaManager.updateQuotaRaw(usageVO, new BigDecimal(0.5), UsageTypes.VPN_USERS);\n+        assertTrue(qu.getQuotaUsed().compareTo(BigDecimal.ZERO) > 0);\n+\n+        Mockito.verify(quotaUsageDao, Mockito.times(4)).persistQuotaUsage(Mockito.any(QuotaUsageVO.class));\n+        Mockito.verify(usageDao, Mockito.times(4)).persistUsage(Mockito.any(UsageVO.class));\n+    }\n+\n+    @Test\n+    public void testProcessQuotaBalanceForAccount() {\n+        Date now = new Date();\n+        AccountVO accountVO = new AccountVO();\n+        accountVO.setId(2L);\n+        accountVO.setDomainId(1L);\n+        accountVO.setType(Account.ACCOUNT_TYPE_NORMAL);\n+\n+        QuotaUsageVO quotaUsageVO = new QuotaUsageVO();\n+        quotaUsageVO.setAccountId(2L);\n+        quotaUsageVO.setStartDate(new Date(now.getTime()));\n+        quotaUsageVO.setEndDate(new Date(now.getTime()));\n+        List<QuotaUsageVO> quotaListForAccount = new ArrayList<>();\n+        quotaListForAccount.add(quotaUsageVO);\n+\n+        quotaManager.processQuotaBalanceForAccount(accountVO, quotaListForAccount);\n+        Mockito.verify(quotaAcc, Mockito.times(1)).persistQuotaAccount(Mockito.any(QuotaAccountVO.class));\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/test/org/apache/cloudstack/quota/QuotaManagerImplTest.java",
                "sha": "792728f5e889fe4041eba77e8d3e37967aabfafb",
                "status": "added"
            },
            {
                "additions": 255,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/test/org/apache/cloudstack/quota/QuotaStatementTest.java",
                "changes": 255,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/test/org/apache/cloudstack/quota/QuotaStatementTest.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/test/org/apache/cloudstack/quota/QuotaStatementTest.java",
                "patch": "@@ -0,0 +1,255 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.quota;\n+\n+import com.cloud.user.AccountVO;\n+import com.cloud.user.dao.AccountDao;\n+import com.cloud.utils.db.TransactionLegacy;\n+import junit.framework.TestCase;\n+import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n+import org.apache.cloudstack.quota.QuotaStatementImpl.STATEMENT_PERIODS;\n+import org.apache.cloudstack.quota.constant.QuotaConfig;\n+import org.apache.cloudstack.quota.dao.QuotaAccountDao;\n+import org.apache.cloudstack.quota.dao.QuotaUsageDao;\n+import org.apache.cloudstack.quota.vo.QuotaAccountVO;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.Spy;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import javax.mail.MessagingException;\n+import javax.naming.ConfigurationException;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.lang.reflect.Field;\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class QuotaStatementTest extends TestCase {\n+\n+    @Mock\n+    AccountDao accountDao;\n+    @Mock\n+    QuotaAccountDao quotaAcc;\n+    @Mock\n+    ConfigurationDao configDao;\n+    @Mock\n+    QuotaUsageDao quotaUsage;\n+    @Mock\n+    QuotaAlertManager alertManager;\n+\n+    @Spy\n+    QuotaStatementImpl quotaStatement = new QuotaStatementImpl();\n+\n+    private void injectMockToField(Object mock, String fieldName) throws NoSuchFieldException, IllegalAccessException {\n+        Field f = QuotaStatementImpl.class.getDeclaredField(fieldName);\n+        f.setAccessible(true);\n+        f.set(quotaStatement, mock);\n+    }\n+\n+    @Before\n+    public void setup() throws IllegalAccessException, NoSuchFieldException, ConfigurationException {\n+        // Dummy transaction stack setup\n+        TransactionLegacy.open(\"QuotaStatementImplTest\");\n+\n+        injectMockToField(accountDao, \"_accountDao\");\n+        injectMockToField(quotaAcc, \"_quotaAcc\");\n+        injectMockToField(configDao, \"_configDao\");\n+        injectMockToField(quotaUsage, \"_quotaUsage\");\n+        injectMockToField(alertManager, \"_quotaAlert\");\n+    }\n+\n+    @Test\n+    public void testStatementPeriodBIMONTHLY() {\n+        Calendar date = Calendar.getInstance();\n+\n+        //BIMONTHLY - first statement of month\n+        date.set(Calendar.DATE, QuotaStatementImpl.s_LAST_STATEMENT_SENT_DAYS + 1);\n+        Calendar period[] = quotaStatement.statementTime(date, STATEMENT_PERIODS.BIMONTHLY);\n+        assertTrue(period == null);\n+\n+        //1 of this month\n+        date.set(Calendar.DATE, 1);\n+        period = quotaStatement.statementTime(date, STATEMENT_PERIODS.BIMONTHLY);\n+        assertTrue(period != null);\n+        assertTrue(period.length == 2);\n+        assertTrue(period[0].toString(), period[0].before(period[1]));\n+        assertTrue(period[0].toString(), period[0].get(Calendar.DATE) == 1);\n+        assertTrue(period[1].toString(), period[1].get(Calendar.DATE) == 15);\n+\n+        //BIMONTHLY - second statement of month\n+        date = Calendar.getInstance();\n+        date.set(Calendar.DATE, QuotaStatementImpl.s_LAST_STATEMENT_SENT_DAYS + 16);\n+        period = quotaStatement.statementTime(date, STATEMENT_PERIODS.BIMONTHLY);\n+        assertTrue(period == null);\n+\n+        //17 of this month\n+        date.set(Calendar.DATE, 17);\n+        period = quotaStatement.statementTime(date, STATEMENT_PERIODS.BIMONTHLY);\n+        assertTrue(period != null);\n+        assertTrue(period.length == 2);\n+        assertTrue(period[0].toString(), period[0].before(period[1]));\n+        assertTrue(period[0].toString(), period[0].get(Calendar.DATE) == 16);\n+\n+        //get last day of the previous month\n+        Calendar aCalendar = Calendar.getInstance();\n+        aCalendar.add(Calendar.MONTH, -1);\n+        aCalendar.set(Calendar.DATE, aCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1);\n+\n+        assertTrue(period[1].toString(), period[1].get(Calendar.DATE) == aCalendar.get(Calendar.DATE));\n+\n+    }\n+\n+    @Test\n+    public void testStatementPeriodMONTHLY() {\n+        Calendar date = Calendar.getInstance();\n+        Calendar aCalendar = Calendar.getInstance();\n+\n+        //MONTHLY\n+        date = Calendar.getInstance();\n+        date.set(Calendar.DATE, QuotaStatementImpl.s_LAST_STATEMENT_SENT_DAYS + 1);\n+        Calendar period[] = quotaStatement.statementTime(date, STATEMENT_PERIODS.MONTHLY);\n+        assertTrue(period == null);\n+\n+        //1 of this month\n+        date.set(Calendar.DATE, QuotaStatementImpl.s_LAST_STATEMENT_SENT_DAYS - 1);\n+        period = quotaStatement.statementTime(date, STATEMENT_PERIODS.MONTHLY);\n+        assertTrue(period != null);\n+        assertTrue(period.length == 2);\n+        assertTrue(period[0].toString(), period[0].before(period[1]));\n+        assertTrue(period[0].toString(), period[0].get(Calendar.DATE) == 1);\n+\n+        //get last day of the previous month\n+        aCalendar = Calendar.getInstance();\n+        aCalendar.add(Calendar.MONTH, -1);\n+        aCalendar.set(Calendar.DATE, aCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1);\n+\n+        assertTrue(period[1].toString(), period[1].get(Calendar.DATE) == aCalendar.get(Calendar.DATE));\n+\n+    }\n+\n+    @Test\n+    public void testStatementPeriodQUATERLY() {\n+        Calendar date = Calendar.getInstance();\n+        Calendar aCalendar = Calendar.getInstance();\n+\n+        //QUATERLY\n+        date = Calendar.getInstance();\n+        date.set(Calendar.MONTH, Calendar.JANUARY); // 1 Jan\n+        date.set(Calendar.DATE, 1);\n+        Calendar period[] = quotaStatement.statementTime(date, STATEMENT_PERIODS.QUATERLY);\n+        assertTrue(period != null);\n+        assertTrue(period.length == 2);\n+        assertTrue(\"period[0].before(period[1])\" + period[0].toString(), period[0].before(period[1]));\n+        assertTrue(\"period[0].get(Calendar.DATE) == 1\" + period[0].toString(), period[0].get(Calendar.DATE) == 1);\n+        assertTrue(\"period[0].get(Calendar.MONTH) == Calendar.OCTOBER\" + period[0].toString(), period[0].get(Calendar.MONTH) == Calendar.OCTOBER); //october\n+\n+        //get last day of the previous month\n+        aCalendar = Calendar.getInstance();\n+        aCalendar.set(Calendar.MONTH, Calendar.DECEMBER);\n+        aCalendar.set(Calendar.DATE, aCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1);\n+        assertTrue(\" period[1].get(Calendar.DATE) == aCalendar.get(Calendar.DATE)\" + period[1].toString(), period[1].get(Calendar.DATE) == aCalendar.get(Calendar.DATE));\n+        assertTrue(\"period[1].get(Calendar.MONTH) == aCalendar.get(Calendar.MONTH)\" + period[1].toString(), period[1].get(Calendar.MONTH) == aCalendar.get(Calendar.MONTH));\n+\n+    }\n+\n+    @Test\n+    public void testStatementPeriodHALFYEARLY() {\n+        Calendar date = Calendar.getInstance();\n+        Calendar aCalendar = Calendar.getInstance();\n+\n+        //QUATERLY\n+        date = Calendar.getInstance();\n+        date.set(Calendar.MONTH, Calendar.JANUARY); // 1 Jan\n+        date.set(Calendar.DATE, 1);\n+        Calendar period[] = quotaStatement.statementTime(date, STATEMENT_PERIODS.HALFYEARLY);\n+        assertTrue(period != null);\n+        assertTrue(period.length == 2);\n+        assertTrue(\"period[0].before(period[1])\" + period[0].toString(), period[0].before(period[1]));\n+        assertTrue(\"period[0].get(Calendar.DATE) == 1\" + period[0].toString(), period[0].get(Calendar.DATE) == 1);\n+        assertTrue(\"period[0].get(Calendar.MONTH) == Calendar.JULY\" + period[0].toString(), period[0].get(Calendar.MONTH) == Calendar.JULY); //july\n+\n+        //get last day of the previous month\n+        aCalendar = Calendar.getInstance();\n+        aCalendar.set(Calendar.MONTH, Calendar.DECEMBER);\n+        aCalendar.set(Calendar.DATE, aCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1);\n+        assertTrue(\" period[1].get(Calendar.DATE) == aCalendar.get(Calendar.DATE)\" + period[1].toString(), period[1].get(Calendar.DATE) == aCalendar.get(Calendar.DATE));\n+        assertTrue(\"period[1].get(Calendar.MONTH) == aCalendar.get(Calendar.MONTH)\" + period[1].toString(), period[1].get(Calendar.MONTH) == aCalendar.get(Calendar.MONTH));\n+\n+    }\n+\n+    @Test\n+    public void testStatementPeriodYEARLY() {\n+        Calendar date = Calendar.getInstance();\n+        Calendar aCalendar = Calendar.getInstance();\n+\n+        //QUATERLY\n+        date = Calendar.getInstance();\n+        date.set(Calendar.MONTH, Calendar.JANUARY); // 1 Jan\n+        date.set(Calendar.DATE, 1);\n+        Calendar period[] = quotaStatement.statementTime(date, STATEMENT_PERIODS.YEARLY);\n+        assertTrue(\"period != null\", period != null);\n+        assertTrue(period.length == 2);\n+        assertTrue(\"period[0].before(period[1])\" + period[0].toString(), period[0].before(period[1]));\n+        assertTrue(\"period[0].get(Calendar.DATE) == 1\" + period[0].toString(), period[0].get(Calendar.DATE) == 1);\n+        assertTrue(\"period[0].get(Calendar.MONTH) == Calendar.JANUARY\" + period[0].toString(), period[0].get(Calendar.MONTH) == Calendar.JANUARY); //january\n+\n+        //get last day of the previous month\n+        aCalendar = Calendar.getInstance();\n+        aCalendar.set(Calendar.MONTH, Calendar.DECEMBER);\n+        aCalendar.set(Calendar.DATE, aCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1);\n+        assertTrue(\" period[1].get(Calendar.DATE) == aCalendar.get(Calendar.DATE)\" + period[1].toString(), period[1].get(Calendar.DATE) == aCalendar.get(Calendar.DATE));\n+        assertTrue(\"period[1].get(Calendar.MONTH) == aCalendar.get(Calendar.MONTH)\" + period[1].toString(), period[1].get(Calendar.MONTH) == aCalendar.get(Calendar.MONTH));\n+\n+    }\n+\n+    @Test\n+    public void testSendStatement() throws UnsupportedEncodingException, MessagingException {\n+        Calendar date = Calendar.getInstance();\n+        AccountVO accountVO = new AccountVO();\n+        accountVO.setId(2L);\n+        accountVO.setDomainId(1L);\n+        Mockito.when(accountDao.findById(Mockito.anyLong())).thenReturn(accountVO);\n+\n+        QuotaAccountVO acc = new QuotaAccountVO(2L);\n+        acc.setQuotaBalance(new BigDecimal(404));\n+        acc.setLastStatementDate(null);\n+        List<QuotaAccountVO> accounts = new ArrayList<>();\n+        accounts.add(acc);\n+        Mockito.when(quotaAcc.listAllQuotaAccount()).thenReturn(accounts);\n+\n+        Mockito.when(quotaUsage.findTotalQuotaUsage(Mockito.anyLong(), Mockito.anyLong(), Mockito.anyInt(), Mockito.any(Date.class), Mockito.any(Date.class)))\n+                .thenReturn(new BigDecimal(100));\n+\n+        QuotaAlertManagerImpl.DeferredQuotaEmail email = new QuotaAlertManagerImpl.DeferredQuotaEmail(accountVO, acc, new BigDecimal(100),\n+                QuotaConfig.QuotaEmailTemplateTypes.QUOTA_LOW);\n+        // call real method on send monthly statement\n+        Mockito.doCallRealMethod().when(quotaStatement).sendStatement();\n+        Calendar period[] = quotaStatement.statementTime(date, STATEMENT_PERIODS.MONTHLY);\n+        if (period != null){\n+            Mockito.verify(alertManager, Mockito.times(1)).sendQuotaAlert(email);\n+        }\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/test/org/apache/cloudstack/quota/QuotaStatementTest.java",
                "sha": "f2a0deda3c72837c7b58886625eadbde971936c6",
                "status": "added"
            },
            {
                "additions": 48,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/test/org/apache/cloudstack/quota/constant/QuotaTypesTest.java",
                "changes": 48,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/test/org/apache/cloudstack/quota/constant/QuotaTypesTest.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "framework/quota/test/org/apache/cloudstack/quota/constant/QuotaTypesTest.java",
                "patch": "@@ -0,0 +1,48 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.quota.constant;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.cloudstack.api.response.UsageTypeResponse;\n+import org.apache.cloudstack.usage.UsageTypes;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class QuotaTypesTest extends TestCase {\n+\n+    @Test\n+    public void testQuotaTypesList() {\n+        Map<Integer, QuotaTypes> quotaTypes = QuotaTypes.listQuotaTypes();\n+        List<UsageTypeResponse> usageTypesResponseList = UsageTypes.listUsageTypes();\n+        for (UsageTypeResponse usageTypeResponse : usageTypesResponseList) {\n+            final Integer usageTypeInt = usageTypeResponse.getUsageType();\n+            assertTrue(quotaTypes.containsKey(usageTypeInt));\n+        }\n+    }\n+\n+    @Test\n+    public void testQuotaTypeDescription() {\n+        assertNull(QuotaTypes.getDescription(-1));\n+        assertNotNull(QuotaTypes.getDescription(QuotaTypes.MEMORY));\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/framework/quota/test/org/apache/cloudstack/quota/constant/QuotaTypesTest.java",
                "sha": "427043951a16cd51ea99f6fe3748321a38643372",
                "status": "added"
            },
            {
                "additions": 99,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/pom.xml",
                "changes": 99,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/pom.xml?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/pom.xml",
                "patch": "@@ -0,0 +1,99 @@\n+<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor\n+    license agreements. See the NOTICE file distributed with this work for additional\n+    information regarding copyright ownership. The ASF licenses this file to\n+    you under the Apache License, Version 2.0 (the \"License\"); you may not use\n+    this file except in compliance with the License. You may obtain a copy of\n+    the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required\n+    by applicable law or agreed to in writing, software distributed under the\n+    License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS\n+    OF ANY KIND, either express or implied. See the License for the specific\n+    language governing permissions and limitations under the License. -->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <artifactId>cloud-plugin-database-quota</artifactId>\n+  <name>Apache CloudStack Plugin - Quota Service</name>\n+  <parent>\n+    <groupId>org.apache.cloudstack</groupId>\n+    <artifactId>cloudstack-plugins</artifactId>\n+    <version>4.7.0-SNAPSHOT</version>\n+    <relativePath>../../pom.xml</relativePath>\n+  </parent>\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.cloudstack</groupId>\n+      <artifactId>cloud-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.cloudstack</groupId>\n+      <artifactId>cloud-engine-schema</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.cloudstack</groupId>\n+      <artifactId>cloud-utils</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.cloudstack</groupId>\n+      <artifactId>cloud-framework-quota</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>mysql</groupId>\n+      <artifactId>mysql-connector-java</artifactId>\n+      <scope>provided</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.commons</groupId>\n+      <artifactId>commons-lang3</artifactId>\n+      <version>${cs.commons-lang3.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>joda-time</groupId>\n+      <artifactId>joda-time</artifactId>\n+      <version>${cs.joda-time.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>junit</groupId>\n+      <artifactId>junit</artifactId>\n+      <version>${cs.junit.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.hamcrest</groupId>\n+      <artifactId>hamcrest-library</artifactId>\n+      <version>${cs.hamcrest.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-all</artifactId>\n+      <version>${cs.mockito.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.powermock</groupId>\n+      <artifactId>powermock-module-junit4</artifactId>\n+      <version>${cs.powermock.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.powermock</groupId>\n+      <artifactId>powermock-api-mockito</artifactId>\n+      <version>${cs.powermock.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-test</artifactId>\n+      <version>${org.springframework.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>javax.inject</groupId>\n+      <artifactId>javax.inject</artifactId>\n+      <version>1</version>\n+    </dependency>\n+  </dependencies>\n+</project>",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/pom.xml",
                "sha": "ee0a04baeeedd6971ea709637314cb5d965f16ab",
                "status": "added"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/resources/META-INF/cloudstack/quota/module.properties",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/resources/META-INF/cloudstack/quota/module.properties?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/resources/META-INF/cloudstack/quota/module.properties",
                "patch": "@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+name=quota\n+parent=api",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/resources/META-INF/cloudstack/quota/module.properties",
                "sha": "7332f1518283ee9a63519bfd98c54f264ff77f40",
                "status": "added"
            },
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/resources/META-INF/cloudstack/quota/spring-quota-context.xml",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/resources/META-INF/cloudstack/quota/spring-quota-context.xml?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/resources/META-INF/cloudstack/quota/spring-quota-context.xml",
                "patch": "@@ -0,0 +1,31 @@\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements. See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership. The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License. You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied. See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\"\n+    xmlns:aop=\"http://www.springframework.org/schema/aop\"\n+    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+                      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n+                      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd\n+                      http://www.springframework.org/schema/context\n+                      http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n+\n+    <bean id=\"QuotaService\" class=\"org.apache.cloudstack.quota.QuotaServiceImpl\" />\n+    <bean id=\"QuotaResponseBuilder\" class=\"org.apache.cloudstack.api.response.QuotaResponseBuilderImpl\"/>\n+\n+</beans>",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/resources/META-INF/cloudstack/quota/spring-quota-context.xml",
                "sha": "15bc144e31a7278f82529a6dbb05a74e1bbe1d16",
                "status": "added"
            },
            {
                "additions": 125,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaBalanceCmd.java",
                "changes": 125,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaBalanceCmd.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaBalanceCmd.java",
                "patch": "@@ -0,0 +1,125 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.api.command;\n+\n+import java.util.Date;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.log4j.Logger;\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.BaseCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.response.AccountResponse;\n+import org.apache.cloudstack.api.response.DomainResponse;\n+import org.apache.cloudstack.api.response.QuotaBalanceResponse;\n+import org.apache.cloudstack.api.response.QuotaResponseBuilder;\n+import org.apache.cloudstack.quota.vo.QuotaBalanceVO;\n+import org.apache.cloudstack.api.response.QuotaStatementItemResponse;\n+\n+@APICommand(name = \"quotaBalance\", responseObject = QuotaStatementItemResponse.class, description = \"Create a quota balance statement\", since = \"4.6.0\", requestHasSensitiveInfo = false, responseHasSensitiveInfo = false)\n+public class QuotaBalanceCmd extends BaseCmd {\n+\n+    public static final Logger s_logger = Logger.getLogger(QuotaBalanceCmd.class);\n+\n+    private static final String s_name = \"quotabalanceresponse\";\n+\n+    @Parameter(name = ApiConstants.ACCOUNT, type = CommandType.STRING, required = true, description = \"Account Id for which statement needs to be generated\")\n+    private String accountName;\n+\n+    @Parameter(name = ApiConstants.DOMAIN_ID, type = CommandType.UUID, required = true, entityType = DomainResponse.class, description = \"If domain Id is given and the caller is domain admin then the statement is generated for domain.\")\n+    private Long domainId;\n+\n+    @Parameter(name = ApiConstants.END_DATE, type = CommandType.DATE, description = \"End date range for quota query. Use yyyy-MM-dd as the date format, e.g. startDate=2009-06-03.\")\n+    private Date endDate;\n+\n+    @Parameter(name = ApiConstants.START_DATE, type = CommandType.DATE, description = \"Start date range quota query. Use yyyy-MM-dd as the date format, e.g. startDate=2009-06-01.\")\n+    private Date startDate;\n+\n+    @Parameter(name = ApiConstants.ACCOUNT_ID, type = CommandType.UUID, entityType = AccountResponse.class, description = \"List usage records for the specified account\")\n+    private Long accountId;\n+\n+    @Inject\n+    QuotaResponseBuilder _responseBuilder;\n+\n+    public Long getAccountId() {\n+        return accountId;\n+    }\n+\n+    public void setAccountId(Long accountId) {\n+        this.accountId = accountId;\n+    }\n+\n+    public String getAccountName() {\n+        return accountName;\n+    }\n+\n+    public void setAccountName(String accountName) {\n+        this.accountName = accountName;\n+    }\n+\n+    public Long getDomainId() {\n+        return domainId;\n+    }\n+\n+    public void setDomainId(Long domainId) {\n+        this.domainId = domainId;\n+    }\n+\n+    public Date getEndDate() {\n+        return endDate == null ? null : _responseBuilder.startOfNextDay(endDate == null ? null : new Date(endDate.getTime()));\n+    }\n+\n+    public void setEndDate(Date endDate) {\n+        this.endDate = endDate == null ? null : new Date(endDate.getTime());\n+    }\n+\n+    public Date getStartDate() {\n+        return startDate == null ? null : new Date(startDate.getTime());\n+    }\n+\n+    public void setStartDate(Date startDate) {\n+        this.startDate = startDate == null ? null : new Date(startDate.getTime());\n+    }\n+\n+    @Override\n+    public String getCommandName() {\n+        return s_name;\n+    }\n+\n+    @Override\n+    public long getEntityOwnerId() {\n+       return _accountService.getActiveAccountByName(accountName, domainId).getAccountId();\n+    }\n+\n+    @Override\n+    public void execute() {\n+        List<QuotaBalanceVO> quotaUsage = _responseBuilder.getQuotaBalance(this);\n+\n+        QuotaBalanceResponse response;\n+        if (getEndDate() == null) {\n+            response = _responseBuilder.createQuotaLastBalanceResponse(quotaUsage, getStartDate());\n+        } else {\n+            response = _responseBuilder.createQuotaBalanceResponse(quotaUsage, getStartDate(), endDate == null ? null : new Date(endDate.getTime()));\n+        }\n+        response.setResponseName(getCommandName());\n+        setResponseObject(response);\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaBalanceCmd.java",
                "sha": "ef9d49a3beb3ab3803e484a42300b63cfa2de86c",
                "status": "added"
            },
            {
                "additions": 147,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaCreditsCmd.java",
                "changes": 147,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaCreditsCmd.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaCreditsCmd.java",
                "patch": "@@ -0,0 +1,147 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.api.command;\n+\n+import com.cloud.user.Account;\n+\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.ApiErrorCode;\n+import org.apache.cloudstack.api.BaseCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.ServerApiException;\n+import org.apache.cloudstack.api.response.DomainResponse;\n+import org.apache.cloudstack.api.response.QuotaCreditsResponse;\n+import org.apache.cloudstack.api.response.QuotaResponseBuilder;\n+import org.apache.cloudstack.context.CallContext;\n+import org.apache.cloudstack.quota.QuotaService;\n+import org.apache.log4j.Logger;\n+\n+import javax.inject.Inject;\n+\n+@APICommand(name = \"quotaCredits\", responseObject = QuotaCreditsResponse.class, description = \"Add +-credits to an account\", since = \"4.6.0\", requestHasSensitiveInfo = false, responseHasSensitiveInfo = false)\n+public class QuotaCreditsCmd extends BaseCmd {\n+\n+    @Inject\n+    QuotaResponseBuilder _responseBuilder;\n+\n+    @Inject\n+    QuotaService _quotaService;\n+\n+    public static final Logger s_logger = Logger.getLogger(QuotaStatementCmd.class);\n+\n+    private static final String s_name = \"quotacreditsresponse\";\n+\n+    @Parameter(name = ApiConstants.ACCOUNT, type = CommandType.STRING, required = true, description = \"Account Id for which quota credits need to be added\")\n+    private String accountName;\n+\n+    @Parameter(name = ApiConstants.DOMAIN_ID, type = CommandType.UUID, required = true, entityType = DomainResponse.class, description = \"Domain for which quota credits need to be added\")\n+    private Long domainId;\n+\n+    @Parameter(name = ApiConstants.VALUE, type = CommandType.DOUBLE, required = true, description = \"Value of the credits to be added+, subtracted-\")\n+    private Double value;\n+\n+    @Parameter(name = \"min_balance\", type = CommandType.DOUBLE, required = false, description = \"Minimum balance threshold of the account\")\n+    private Double minBalance;\n+\n+    @Parameter(name = \"quota_enforce\", type = CommandType.BOOLEAN, required = false, description = \"Account for which quota enforce is set to false will not be locked when there is no credit balance\")\n+    private Boolean quotaEnforce;\n+\n+    public Double getMinBalance() {\n+        return minBalance;\n+    }\n+\n+    public void setMinBalance(Double minBalance) {\n+        this.minBalance = minBalance;\n+    }\n+\n+    public Boolean getQuotaEnforce() {\n+        return quotaEnforce;\n+    }\n+\n+    public void setQuotaEnforce(Boolean quotaEnforce) {\n+        this.quotaEnforce = quotaEnforce;\n+    }\n+\n+    public String getAccountName() {\n+        return accountName;\n+    }\n+\n+    public void setAccountName(String accountName) {\n+        this.accountName = accountName;\n+    }\n+\n+    public Long getDomainId() {\n+        return domainId;\n+    }\n+\n+    public void setDomainId(Long domainId) {\n+        this.domainId = domainId;\n+    }\n+\n+    public Double getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(Double value) {\n+        this.value = value;\n+    }\n+\n+    public QuotaCreditsCmd() {\n+        super();\n+    }\n+\n+    @Override\n+    public String getCommandName() {\n+        return s_name;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        Long accountId = null;\n+        Account account = _accountService.getActiveAccountByName(accountName, domainId);\n+        if (account != null) {\n+            accountId = account.getAccountId();\n+        }\n+        if (accountId == null) {\n+            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"The account does not exists or has been removed/disabled\");\n+        }\n+        if (getValue() == null) {\n+            throw new ServerApiException(ApiErrorCode.PARAM_ERROR, \"Please send a valid non-empty quota value\");\n+        }\n+        if (getQuotaEnforce() != null && getQuotaEnforce()) {\n+            _quotaService.setLockAccount(accountId, getQuotaEnforce());\n+        }\n+        if (getMinBalance() != null) {\n+            _quotaService.setMinBalance(accountId, getMinBalance());\n+        }\n+        else {\n+            throw new ServerApiException(ApiErrorCode.PARAM_ERROR, \"Please set a value for min balance\");\n+        }\n+\n+        final QuotaCreditsResponse response = _responseBuilder.addQuotaCredits(accountId, getDomainId(), getValue(), CallContext.current().getCallingUserId());\n+        response.setResponseName(getCommandName());\n+        response.setObjectName(\"quotacredits\");\n+        setResponseObject(response);\n+    }\n+\n+    @Override\n+    public long getEntityOwnerId() {\n+        return Account.ACCOUNT_ID_SYSTEM;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaCreditsCmd.java",
                "sha": "ce00e23e5c9a7e154595424b309392b26cc44d02",
                "status": "added"
            },
            {
                "additions": 60,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaEmailTemplateListCmd.java",
                "changes": 60,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaEmailTemplateListCmd.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaEmailTemplateListCmd.java",
                "patch": "@@ -0,0 +1,60 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.api.command;\n+\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.BaseListCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.response.ListResponse;\n+import org.apache.cloudstack.api.response.QuotaEmailTemplateResponse;\n+import org.apache.cloudstack.api.response.QuotaResponseBuilder;\n+import org.apache.log4j.Logger;\n+\n+import javax.inject.Inject;\n+\n+@APICommand(name = \"quotaEmailTemplateList\", responseObject = QuotaEmailTemplateResponse.class, description = \"Lists all quota email templates\", since = \"4.6.0\", requestHasSensitiveInfo = false, responseHasSensitiveInfo = false)\n+public class QuotaEmailTemplateListCmd extends BaseListCmd {\n+    public static final Logger s_logger = Logger.getLogger(QuotaEmailTemplateListCmd.class);\n+    private static final String s_name = \"quotaemailtemplatelistresponse\";\n+\n+    @Inject\n+    QuotaResponseBuilder _quotaResponseBuilder;\n+\n+    @Parameter(name = \"templatetype\", type = CommandType.STRING, description = \"List by type of the quota email template, allowed types: QUOTA_LOW, QUOTA_EMPTY\")\n+    private String templateName;\n+\n+    public String getTemplateName() {\n+        return templateName;\n+    }\n+\n+    public void setTemplateName(String templateName) {\n+        this.templateName = templateName;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        final ListResponse<QuotaEmailTemplateResponse> response = new ListResponse<QuotaEmailTemplateResponse>();\n+        response.setResponses(_quotaResponseBuilder.listQuotaEmailTemplates(this));\n+        response.setResponseName(getCommandName());\n+        setResponseObject(response);\n+    }\n+\n+    @Override\n+    public String getCommandName() {\n+        return s_name;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaEmailTemplateListCmd.java",
                "sha": "8b717eb41ec9f34ba6c6beca92b321adf1d15e1f",
                "status": "added"
            },
            {
                "additions": 122,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaEmailTemplateUpdateCmd.java",
                "changes": 122,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaEmailTemplateUpdateCmd.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaEmailTemplateUpdateCmd.java",
                "patch": "@@ -0,0 +1,122 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.api.command;\n+\n+import com.cloud.user.Account;\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.ApiErrorCode;\n+import org.apache.cloudstack.api.BaseCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.ServerApiException;\n+import org.apache.cloudstack.api.response.QuotaResponseBuilder;\n+import org.apache.cloudstack.api.response.SuccessResponse;\n+import org.apache.cloudstack.quota.constant.QuotaConfig;\n+import org.apache.log4j.Logger;\n+\n+import javax.inject.Inject;\n+import java.util.Arrays;\n+\n+@APICommand(name = \"quotaEmailTemplateUpdate\", responseObject = SuccessResponse.class, description = \"Updates existing email templates for quota alerts\", since = \"4.6.0\", requestHasSensitiveInfo = false, responseHasSensitiveInfo = false)\n+public class QuotaEmailTemplateUpdateCmd extends BaseCmd {\n+    public static final Logger s_logger = Logger.getLogger(QuotaEmailTemplateUpdateCmd.class);\n+    private static final String s_name = \"quotaemailtemplateupdateresponse\";\n+\n+    @Inject\n+    QuotaResponseBuilder _quotaResponseBuilder;\n+\n+    @Parameter(name = \"templatetype\", type = CommandType.STRING, required=true, description = \"Type of the quota email template, allowed types: QUOTA_LOW, QUOTA_EMPTY\")\n+    private String templateName;\n+\n+    @Parameter(name = \"templatesubject\", type = CommandType.STRING, required=true, description = \"The quota email template subject, max: 77 characters\", length = 77)\n+    private String templateSubject;\n+\n+    @Parameter(name = \"templatebody\", type = CommandType.STRING, required=true, description = \"The quota email template body, max: 500k characters\", length = 512000)\n+    private String templateBody;\n+\n+    @Parameter(name = \"locale\", type = CommandType.STRING, description = \"The locale of the email text\")\n+    private String locale;\n+\n+    @Override\n+    public void execute() {\n+        final String templateName = getTemplateName();\n+        if (templateName == null || getTemplateSubject() == null || getTemplateBody() == null) {\n+            throw new ServerApiException(ApiErrorCode.PARAM_ERROR, \"Failed to update quota email template due to empty or invalid template name or text\");\n+        }\n+\n+        boolean isValidTemplateName = false;\n+        for (QuotaConfig.QuotaEmailTemplateTypes e: QuotaConfig.QuotaEmailTemplateTypes.values()) {\n+            if (e.toString().equalsIgnoreCase(templateName)) {\n+                isValidTemplateName = true;\n+                setTemplateName(e.toString());\n+                break;\n+            }\n+        }\n+        if (!isValidTemplateName) {\n+            throw new ServerApiException(ApiErrorCode.PARAM_ERROR, \"Invalid quota email template type, allowed values are: \" + Arrays.toString(QuotaConfig.QuotaEmailTemplateTypes.values()));\n+        }\n+\n+        if (!_quotaResponseBuilder.updateQuotaEmailTemplate(this)) {\n+            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Unable to update quota email template due to an internal error\");\n+        }\n+        final SuccessResponse response = new SuccessResponse();\n+        response.setResponseName(getCommandName());\n+        response.setSuccess(true);\n+        setResponseObject(response);\n+    }\n+\n+    @Override\n+    public String getCommandName() {\n+        return s_name;\n+    }\n+\n+    @Override\n+    public long getEntityOwnerId() {\n+        return Account.ACCOUNT_ID_SYSTEM;\n+    }\n+\n+    public void setTemplateName(String templateName) {\n+        this.templateName = templateName;\n+    }\n+\n+    public String getTemplateName() {\n+        return templateName;\n+    }\n+\n+    public String getTemplateSubject() {\n+        return templateSubject;\n+    }\n+\n+    public String getTemplateBody() {\n+        return templateBody;\n+    }\n+\n+    public String getLocale() {\n+        return locale;\n+    }\n+\n+    public void setTemplateSubject(String templateSubject) {\n+        this.templateSubject = templateSubject;\n+    }\n+\n+    public void setTemplateBody(String templateBody) {\n+        this.templateBody = templateBody;\n+    }\n+\n+    public void setLocale(String locale) {\n+        this.locale = locale;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaEmailTemplateUpdateCmd.java",
                "sha": "469fd4dd0029be178e3e338c2dcf15e3d060d3cd",
                "status": "added"
            },
            {
                "additions": 141,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaStatementCmd.java",
                "changes": 141,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaStatementCmd.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaStatementCmd.java",
                "patch": "@@ -0,0 +1,141 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.api.command;\n+\n+import java.util.Date;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.log4j.Logger;\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.BaseCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.response.AccountResponse;\n+import org.apache.cloudstack.api.response.DomainResponse;\n+import org.apache.cloudstack.api.response.QuotaResponseBuilder;\n+import org.apache.cloudstack.api.response.QuotaStatementResponse;\n+import org.apache.cloudstack.context.CallContext;\n+import org.apache.cloudstack.quota.vo.QuotaUsageVO;\n+import org.apache.cloudstack.api.response.QuotaStatementItemResponse;\n+\n+import com.cloud.user.Account;\n+\n+@APICommand(name = \"quotaStatement\", responseObject = QuotaStatementItemResponse.class, description = \"Create a quota statement\", since = \"4.6.0\", requestHasSensitiveInfo = false, responseHasSensitiveInfo = false)\n+public class QuotaStatementCmd extends BaseCmd {\n+\n+    public static final Logger s_logger = Logger.getLogger(QuotaStatementCmd.class);\n+\n+    private static final String s_name = \"quotastatementresponse\";\n+\n+    @Parameter(name = ApiConstants.ACCOUNT, type = CommandType.STRING, required = true, description = \"Optional, Account Id for which statement needs to be generated\")\n+    private String accountName;\n+\n+    @Parameter(name = ApiConstants.DOMAIN_ID, type = CommandType.UUID, required = true, entityType = DomainResponse.class, description = \"Optional, If domain Id is given and the caller is domain admin then the statement is generated for domain.\")\n+    private Long domainId;\n+\n+    @Parameter(name = ApiConstants.END_DATE, type = CommandType.DATE, required = true, description = \"End date range for quota query. Use yyyy-MM-dd as the date format, e.g. startDate=2009-06-03.\")\n+    private Date endDate;\n+\n+    @Parameter(name = ApiConstants.START_DATE, type = CommandType.DATE, required = true, description = \"Start date range quota query. Use yyyy-MM-dd as the date format, e.g. startDate=2009-06-01.\")\n+    private Date startDate;\n+\n+    @Parameter(name = ApiConstants.TYPE, type = CommandType.INTEGER, description = \"List quota usage records for the specified usage type\")\n+    private Integer usageType;\n+\n+    @Parameter(name = ApiConstants.ACCOUNT_ID, type = CommandType.UUID, entityType = AccountResponse.class, description = \"List usage records for the specified account\")\n+    private Long accountId;\n+\n+    @Inject\n+    QuotaResponseBuilder _responseBuilder;\n+\n+    public Long getAccountId() {\n+        return accountId;\n+    }\n+\n+    public void setAccountId(Long accountId) {\n+        this.accountId = accountId;\n+    }\n+\n+    public Integer getUsageType() {\n+        return usageType;\n+    }\n+\n+    public void setUsageType(Integer usageType) {\n+        this.usageType = usageType;\n+    }\n+\n+    public String getAccountName() {\n+        return accountName;\n+    }\n+\n+    public void setAccountName(String accountName) {\n+        this.accountName = accountName;\n+    }\n+\n+    public Long getDomainId() {\n+        return domainId;\n+    }\n+\n+    public void setDomainId(Long domainId) {\n+        this.domainId = domainId;\n+    }\n+\n+    public Date getEndDate() {\n+        return _responseBuilder.startOfNextDay(endDate == null ? new Date() : new Date(endDate.getTime()));\n+    }\n+\n+    public void setEndDate(Date endDate) {\n+        this.endDate = endDate == null ? null : new Date(endDate.getTime());\n+    }\n+\n+    public Date getStartDate() {\n+        return startDate == null ? null : new Date(startDate.getTime());\n+    }\n+\n+    public void setStartDate(Date startDate) {\n+        this.startDate = startDate == null ? null : new Date(startDate.getTime());\n+    }\n+\n+    @Override\n+    public String getCommandName() {\n+        return s_name;\n+    }\n+\n+    @Override\n+    public long getEntityOwnerId() {\n+        Long accountId = _accountService.getActiveAccountByName(accountName, domainId).getAccountId();\n+        if (accountId == null) {\n+            return CallContext.current().getCallingAccount().getId();\n+        }\n+        return Account.ACCOUNT_ID_SYSTEM;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        List<QuotaUsageVO> quotaUsage = _responseBuilder.getQuotaUsage(this);\n+\n+        QuotaStatementResponse response = _responseBuilder.createQuotaStatementResponse(quotaUsage);\n+        response.setStartDate(startDate == null ? null : new Date(startDate.getTime()));\n+        response.setEndDate(endDate == null ? null : new Date(endDate.getTime()));\n+\n+        response.setResponseName(getCommandName());\n+        setResponseObject(response);\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaStatementCmd.java",
                "sha": "fa9796009b71a566c07f7ec8c080e033cdc47e36",
                "status": "added"
            },
            {
                "additions": 110,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaSummaryCmd.java",
                "changes": 110,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaSummaryCmd.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaSummaryCmd.java",
                "patch": "@@ -0,0 +1,110 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.api.command;\n+\n+import com.cloud.user.Account;\n+\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.BaseListCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.BaseCmd.CommandType;\n+import org.apache.cloudstack.api.response.DomainResponse;\n+import org.apache.cloudstack.api.response.ListResponse;\n+import org.apache.cloudstack.api.response.QuotaResponseBuilder;\n+import org.apache.cloudstack.api.response.QuotaSummaryResponse;\n+import org.apache.cloudstack.context.CallContext;\n+import org.apache.log4j.Logger;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+@APICommand(name = \"quotaSummary\", responseObject = QuotaSummaryResponse.class, description = \"Lists balance and quota usage for all accounts\", since = \"4.6.0\", requestHasSensitiveInfo = false, responseHasSensitiveInfo = false)\n+public class QuotaSummaryCmd extends BaseListCmd {\n+    public static final Logger s_logger = Logger.getLogger(QuotaSummaryCmd.class);\n+    private static final String s_name = \"quotasummaryresponse\";\n+\n+    @Parameter(name = ApiConstants.ACCOUNT, type = CommandType.STRING, required = false, description = \"Optional, Account Id for which statement needs to be generated\")\n+    private String accountName;\n+\n+    @Parameter(name = ApiConstants.DOMAIN_ID, type = CommandType.UUID, required = false, entityType = DomainResponse.class, description = \"Optional, If domain Id is given and the caller is domain admin then the statement is generated for domain.\")\n+    private Long domainId;\n+\n+    @Parameter(name = ApiConstants.LIST_ALL, type = CommandType.BOOLEAN, required = false, description = \"Optional, to list all accounts irrespective of the quota activity\")\n+    private Boolean listAll;\n+\n+    @Inject\n+    QuotaResponseBuilder _responseBuilder;\n+\n+    public QuotaSummaryCmd() {\n+        super();\n+    }\n+\n+    @Override\n+    public void execute() {\n+        Account caller = CallContext.current().getCallingAccount();\n+        List<QuotaSummaryResponse> responses;\n+        if (caller.getAccountId() <= 2) { //non root admin or system\n+            if (getAccountName() != null && getDomainId() != null)\n+                responses = _responseBuilder.createQuotaSummaryResponse(caller.getAccountName(), caller.getDomainId());\n+            else\n+                responses = _responseBuilder.createQuotaSummaryResponse(getListAll());\n+        } else {\n+            responses = _responseBuilder.createQuotaSummaryResponse(caller.getAccountName(), caller.getDomainId());\n+        }\n+        final ListResponse<QuotaSummaryResponse> response = new ListResponse<QuotaSummaryResponse>();\n+        response.setResponses(responses);\n+        response.setResponseName(getCommandName());\n+        setResponseObject(response);\n+    }\n+\n+    public String getAccountName() {\n+        return accountName;\n+    }\n+\n+    public void setAccountName(String accountName) {\n+        this.accountName = accountName;\n+    }\n+\n+    public Long getDomainId() {\n+        return domainId;\n+    }\n+\n+    public void setDomainId(Long domainId) {\n+        this.domainId = domainId;\n+    }\n+\n+    @Override\n+    public String getCommandName() {\n+        return s_name;\n+    }\n+\n+    public Boolean getListAll() {\n+        return listAll == null ? false: listAll;\n+    }\n+\n+    public void setListAll(Boolean listAll) {\n+        this.listAll = listAll;\n+    }\n+\n+    @Override\n+    public long getEntityOwnerId() {\n+        return Account.ACCOUNT_ID_SYSTEM;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaSummaryCmd.java",
                "sha": "773bac6e0e464919735f9b4963625acd146e7dcf",
                "status": "added"
            },
            {
                "additions": 95,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaTariffListCmd.java",
                "changes": 95,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaTariffListCmd.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaTariffListCmd.java",
                "patch": "@@ -0,0 +1,95 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.api.command;\n+\n+import com.cloud.user.Account;\n+\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.BaseListCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.response.ListResponse;\n+import org.apache.cloudstack.api.response.QuotaResponseBuilder;\n+import org.apache.cloudstack.api.response.QuotaTariffResponse;\n+import org.apache.cloudstack.quota.vo.QuotaTariffVO;\n+import org.apache.log4j.Logger;\n+\n+import javax.inject.Inject;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+@APICommand(name = \"quotaTariffList\", responseObject = QuotaTariffResponse.class, description = \"Lists all quota tariff plans\", since = \"4.6.0\", requestHasSensitiveInfo = false, responseHasSensitiveInfo = false)\n+public class QuotaTariffListCmd extends BaseListCmd {\n+    public static final Logger s_logger = Logger.getLogger(QuotaTariffListCmd.class);\n+    private static final String s_name = \"quotatarifflistresponse\";\n+\n+    @Inject\n+    QuotaResponseBuilder _responseBuilder;\n+\n+    @Parameter(name = ApiConstants.USAGE_TYPE, type = CommandType.INTEGER, required = false, description = \"Usage type of the resource\")\n+    private Integer usageType;\n+\n+    @Parameter(name = ApiConstants.START_DATE, type = CommandType.DATE, required = false, description = \"The effective start date on/after which the quota tariff is effective and older tariffs are no longer used for the usage type. Use yyyy-MM-dd as the date format, e.g. startDate=2009-06-03.\")\n+    private Date effectiveDate;\n+\n+    public QuotaTariffListCmd() {\n+        super();\n+    }\n+\n+    @Override\n+    public void execute() {\n+        final List<QuotaTariffVO> result = _responseBuilder.listQuotaTariffPlans(this);\n+\n+        final List<QuotaTariffResponse> responses = new ArrayList<QuotaTariffResponse>();\n+        for (final QuotaTariffVO resource : result) {\n+            if (s_logger.isDebugEnabled()) {\n+                s_logger.debug(\"Result desc=\" + resource.getDescription() + \" date=\" + resource.getEffectiveOn() + \" val=\" + resource.getCurrencyValue());\n+            }\n+            responses.add(_responseBuilder.createQuotaTariffResponse(resource));\n+        }\n+\n+        final ListResponse<QuotaTariffResponse> response = new ListResponse<QuotaTariffResponse>();\n+        response.setResponses(responses);\n+        response.setResponseName(getCommandName());\n+        setResponseObject(response);\n+    }\n+\n+    @Override\n+    public String getCommandName() {\n+        return s_name;\n+    }\n+\n+    @Override\n+    public long getEntityOwnerId() {\n+        return Account.ACCOUNT_ID_SYSTEM;\n+    }\n+\n+    public Date getEffectiveDate() {\n+        return effectiveDate ==null ? null : new Date(effectiveDate.getTime());\n+    }\n+\n+    public Integer getUsageType() {\n+        return usageType;\n+    }\n+\n+    public void setUsageType(Integer usageType) {\n+        this.usageType = usageType;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaTariffListCmd.java",
                "sha": "c1905944c52c8f03a9eb9318241d3051a37c3744",
                "status": "added"
            },
            {
                "additions": 102,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaTariffUpdateCmd.java",
                "changes": 102,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaTariffUpdateCmd.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaTariffUpdateCmd.java",
                "patch": "@@ -0,0 +1,102 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.api.command;\n+\n+import com.cloud.user.Account;\n+\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.ApiErrorCode;\n+import org.apache.cloudstack.api.BaseCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.ServerApiException;\n+import org.apache.cloudstack.api.response.QuotaResponseBuilder;\n+import org.apache.cloudstack.api.response.QuotaTariffResponse;\n+import org.apache.cloudstack.quota.vo.QuotaTariffVO;\n+import org.apache.log4j.Logger;\n+\n+import javax.inject.Inject;\n+\n+import java.util.Date;\n+\n+@APICommand(name = \"quotaTariffUpdate\", responseObject = QuotaTariffResponse.class, description = \"Update the tariff plan for a resource\", since = \"4.6.0\", requestHasSensitiveInfo = false, responseHasSensitiveInfo = false)\n+public class QuotaTariffUpdateCmd extends BaseCmd {\n+    public static final Logger s_logger = Logger.getLogger(QuotaTariffUpdateCmd.class);\n+    private static final String s_name = \"quotatariffupdateresponse\";\n+\n+    @Inject\n+    QuotaResponseBuilder _responseBuilder;\n+\n+    @Parameter(name = ApiConstants.USAGE_TYPE, type = CommandType.INTEGER, required = true, description = \"Integer value for the usage type of the resource\")\n+    private Integer usageType;\n+\n+    @Parameter(name = \"value\", type = CommandType.DOUBLE, required = true,  description = \"The quota tariff value of the resource as per the default unit\")\n+    private Double value;\n+\n+    @Parameter(name = ApiConstants.START_DATE, type = CommandType.DATE, required = true, description = \"The effective start date on/after which the quota tariff is effective and older tariffs are no longer used for the usage type. Use yyyy-MM-dd as the date format, e.g. startDate=2009-06-03.\")\n+    private Date startDate;\n+\n+    public int getUsageType() {\n+        return usageType;\n+    }\n+\n+    public void setUsageType(int usageType) {\n+        this.usageType = usageType;\n+    }\n+\n+    public Double getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(Double value) {\n+        this.value = value;\n+    }\n+\n+    public Date getStartDate() {\n+        return startDate == null ? null : new Date(startDate.getTime());\n+    }\n+\n+    public void setStartDate(Date startDate) {\n+        this.startDate = startDate == null ? null : new Date(startDate.getTime());\n+    }\n+\n+    public QuotaTariffUpdateCmd() {\n+        super();\n+    }\n+\n+    @Override\n+    public String getCommandName() {\n+        return s_name;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        final QuotaTariffVO result = _responseBuilder.updateQuotaTariffPlan(this);\n+        if (result == null) {\n+            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to update quota tariff plan\");\n+        }\n+        final QuotaTariffResponse response = _responseBuilder.createQuotaTariffResponse(result);\n+        response.setResponseName(getCommandName());\n+        setResponseObject(response);\n+    }\n+\n+    @Override\n+    public long getEntityOwnerId() {\n+        return Account.ACCOUNT_ID_SYSTEM;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaTariffUpdateCmd.java",
                "sha": "04af3eca1eeaebf9f1d8bd2d0a775f5a9af1d245",
                "status": "added"
            },
            {
                "additions": 72,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaUpdateCmd.java",
                "changes": 72,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaUpdateCmd.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaUpdateCmd.java",
                "patch": "@@ -0,0 +1,72 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.api.command;\n+\n+import com.cloud.user.Account;\n+\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.BaseCmd;\n+import org.apache.cloudstack.api.response.QuotaUpdateResponse;\n+import org.apache.cloudstack.quota.QuotaAlertManager;\n+import org.apache.cloudstack.quota.QuotaManager;\n+import org.apache.cloudstack.quota.QuotaStatement;\n+import org.apache.log4j.Logger;\n+\n+import java.util.Calendar;\n+\n+import javax.inject.Inject;\n+\n+@APICommand(name = \"quotaUpdate\", responseObject = QuotaUpdateResponse.class, description = \"Update quota calculations, alerts and statements\", since = \"4.6.0\", requestHasSensitiveInfo = false, responseHasSensitiveInfo = false)\n+public class QuotaUpdateCmd extends BaseCmd {\n+\n+    public static final Logger s_logger = Logger.getLogger(QuotaUpdateCmd.class);\n+\n+    private static final String s_name = \"quotaupdateresponse\";\n+\n+    @Inject\n+    QuotaManager _manager;\n+    @Inject\n+    QuotaStatement _statement;\n+    @Inject\n+    QuotaAlertManager _alert;\n+\n+    public QuotaUpdateCmd() {\n+        super();\n+    }\n+\n+    @Override\n+    public String getCommandName() {\n+        return s_name;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        _manager.calculateQuotaUsage();\n+        _statement.sendStatement();\n+        _alert.checkAndSendQuotaAlertEmails();\n+        QuotaUpdateResponse response = new QuotaUpdateResponse(Calendar.getInstance());\n+        response.setResponseName(getCommandName());\n+        response.setObjectName(\"quotacredits\");\n+        setResponseObject(response);\n+    }\n+\n+    @Override\n+    public long getEntityOwnerId() {\n+        return Account.ACCOUNT_ID_SYSTEM;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaUpdateCmd.java",
                "sha": "e3c0fd279fe5d1f94915d30d423a4bbcf54ca6c7",
                "status": "added"
            },
            {
                "additions": 153,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaBalanceResponse.java",
                "changes": 153,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaBalanceResponse.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaBalanceResponse.java",
                "patch": "@@ -0,0 +1,153 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.api.response;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import org.apache.cloudstack.api.BaseResponse;\n+import org.apache.cloudstack.quota.vo.QuotaBalanceVO;\n+\n+import com.cloud.serializer.Param;\n+\n+public class QuotaBalanceResponse extends BaseResponse {\n+\n+    @SerializedName(\"accountid\")\n+    @Param(description = \"account id\")\n+    private Long accountId;\n+\n+    @SerializedName(\"account\")\n+    @Param(description = \"account name\")\n+    private String accountName;\n+\n+    @SerializedName(\"domain\")\n+    @Param(description = \"domain id\")\n+    private Long domainId;\n+\n+    @SerializedName(\"startquota\")\n+    @Param(description = \"quota started with\")\n+    private BigDecimal startQuota;\n+\n+    @SerializedName(\"endquota\")\n+    @Param(description = \"quota by end of this period\")\n+    private BigDecimal endQuota;\n+\n+    @SerializedName(\"credits\")\n+    @Param(description = \"list of credits made during this period\")\n+    private List<QuotaCreditsResponse> credits = null;\n+\n+    @SerializedName(\"startdate\")\n+    @Param(description = \"start date\")\n+    private Date startDate = null;\n+\n+    @SerializedName(\"enddate\")\n+    @Param(description = \"end date\")\n+    private Date endDate = null;\n+\n+    @SerializedName(\"currency\")\n+    @Param(description = \"currency\")\n+    private String currency;\n+\n+    public QuotaBalanceResponse() {\n+        super();\n+        credits = new ArrayList<QuotaCreditsResponse>();\n+    }\n+\n+    public Long getAccountId() {\n+        return accountId;\n+    }\n+\n+    public void setAccountId(Long accountId) {\n+        this.accountId = accountId;\n+    }\n+\n+    public String getAccountName() {\n+        return accountName;\n+    }\n+\n+    public void setAccountName(String accountName) {\n+        this.accountName = accountName;\n+    }\n+\n+    public Long getDomainId() {\n+        return domainId;\n+    }\n+\n+    public void setDomainId(Long domainId) {\n+        this.domainId = domainId;\n+    }\n+\n+    public BigDecimal getStartQuota() {\n+        return startQuota;\n+    }\n+\n+    public void setStartQuota(BigDecimal startQuota) {\n+        this.startQuota = startQuota.setScale(2, RoundingMode.HALF_EVEN);\n+    }\n+\n+    public BigDecimal getEndQuota() {\n+        return endQuota;\n+    }\n+\n+    public void setEndQuota(BigDecimal endQuota) {\n+        this.endQuota = endQuota.setScale(2, RoundingMode.HALF_EVEN);\n+    }\n+\n+    public List<QuotaCreditsResponse> getCredits() {\n+        return credits;\n+    }\n+\n+    public void setCredits(List<QuotaCreditsResponse> credits) {\n+        this.credits = credits;\n+    }\n+\n+    public void addCredits(QuotaBalanceVO credit) {\n+        QuotaCreditsResponse cr = new QuotaCreditsResponse();\n+        cr.setCredits(credit.getCreditBalance());\n+        cr.setUpdatedOn(credit.getUpdatedOn() == null ? null : new Date(credit.getUpdatedOn().getTime()));\n+        credits.add(0, cr);\n+    }\n+\n+    public Date getStartDate() {\n+        return startDate == null ? null : new Date(startDate.getTime());\n+    }\n+\n+    public void setStartDate(Date startDate) {\n+        this.startDate = startDate == null ? null : new Date(startDate.getTime());\n+    }\n+\n+    public Date getEndDate() {\n+        return endDate == null ? null : new Date(endDate.getTime());\n+    }\n+\n+    public void setEndDate(Date endDate) {\n+        this.endDate = endDate == null ? null : new Date(endDate.getTime());\n+    }\n+\n+    public String getCurrency() {\n+        return currency;\n+    }\n+\n+    public void setCurrency(String currency) {\n+        this.currency = currency;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaBalanceResponse.java",
                "sha": "fca6b6cbb1aa11829dcf8ffd7e06972dd962b859",
                "status": "added"
            },
            {
                "additions": 91,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaCreditsResponse.java",
                "changes": 91,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaCreditsResponse.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaCreditsResponse.java",
                "patch": "@@ -0,0 +1,91 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.api.response;\n+\n+import com.cloud.serializer.Param;\n+import com.google.gson.annotations.SerializedName;\n+\n+import org.apache.cloudstack.api.BaseResponse;\n+import org.apache.cloudstack.quota.vo.QuotaCreditsVO;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.Date;\n+\n+public class QuotaCreditsResponse extends BaseResponse {\n+\n+    @SerializedName(\"credits\")\n+    @Param(description = \"the credit deposited\")\n+    private BigDecimal credits;\n+\n+    @SerializedName(\"updated_by\")\n+    @Param(description = \"the user name of the admin who updated the credits\")\n+    private String updatedBy;\n+\n+    @SerializedName(\"updated_on\")\n+    @Param(description = \"the account name of the admin who updated the credits\")\n+    private Date updatedOn;\n+\n+    @SerializedName(\"currency\")\n+    @Param(description = \"currency\")\n+    private String currency;\n+\n+    public QuotaCreditsResponse() {\n+        super();\n+    }\n+\n+    public QuotaCreditsResponse(QuotaCreditsVO result, String updatedBy) {\n+        super();\n+        if (result != null) {\n+            setCredits(result.getCredit());\n+            setUpdatedBy(updatedBy);\n+            setUpdatedOn(new Date());\n+        }\n+    }\n+\n+    public BigDecimal getCredits() {\n+        return credits;\n+    }\n+\n+    public void setCredits(BigDecimal credits) {\n+        this.credits = credits.setScale(2, RoundingMode.HALF_EVEN);\n+    }\n+\n+    public String getUpdatedBy() {\n+        return updatedBy;\n+    }\n+\n+    public void setUpdatedBy(String updatedBy) {\n+        this.updatedBy = updatedBy;\n+    }\n+\n+    public Date getUpdatedOn() {\n+        return updatedOn;\n+    }\n+\n+    public void setUpdatedOn(Date updatedOn) {\n+        this.updatedOn = updatedOn;\n+    }\n+\n+    public String getCurrency() {\n+        return currency;\n+    }\n+\n+    public void setCurrency(String currency) {\n+        this.currency = currency;\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaCreditsResponse.java",
                "sha": "2c16cf44b7cf74f7f2e87664be8706ed9c6753ea",
                "status": "added"
            },
            {
                "additions": 90,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaEmailTemplateResponse.java",
                "changes": 90,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaEmailTemplateResponse.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaEmailTemplateResponse.java",
                "patch": "@@ -0,0 +1,90 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.api.response;\n+\n+import com.cloud.serializer.Param;\n+import com.google.gson.annotations.SerializedName;\n+import org.apache.cloudstack.api.BaseResponse;\n+\n+import java.util.Date;\n+\n+public class QuotaEmailTemplateResponse extends BaseResponse {\n+    @SerializedName(\"templatetype\")\n+    @Param(description = \"Template type\")\n+    private String templateType;\n+\n+    @SerializedName(\"templatesubject\")\n+    @Param(description = \"The quota email template subject\")\n+    private String templateSubject;\n+\n+    @SerializedName(\"templatebody\")\n+    @Param(description = \"The quota email template content\")\n+    private String templateText;\n+\n+    @SerializedName(\"locale\")\n+    @Param(description = \"The quota email template locale\")\n+    private String locale;\n+\n+    @SerializedName(\"last_updated\")\n+    @Param(description = \"Last date/time when template was updated\")\n+    private Date lastUpdatedOn;\n+\n+    public QuotaEmailTemplateResponse() {\n+        super();\n+        this.setObjectName(\"quotaemailtemplate\");\n+    }\n+\n+    public String getTemplateType() {\n+        return templateType;\n+    }\n+\n+    public void setTemplateType(String templateType) {\n+        this.templateType = templateType;\n+    }\n+\n+    public String getTemplateSubject() {\n+        return templateSubject;\n+    }\n+\n+    public void setTemplateSubject(String templateSubject) {\n+        this.templateSubject = templateSubject;\n+    }\n+\n+    public String getTemplateText() {\n+        return templateText;\n+    }\n+\n+    public void setTemplateText(String templateText) {\n+        this.templateText = templateText;\n+    }\n+\n+    public String getLocale() {\n+        return locale;\n+    }\n+\n+    public void setLocale(String locale) {\n+        this.locale = locale;\n+    }\n+\n+    public Date getLastUpdatedOn() {\n+        return lastUpdatedOn;\n+    }\n+\n+    public void setLastUpdatedOn(Date lastUpdatedOn) {\n+        this.lastUpdatedOn = lastUpdatedOn;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaEmailTemplateResponse.java",
                "sha": "c4a2b7c3a6059b61626c101b19877d825aba4f90",
                "status": "added"
            },
            {
                "additions": 65,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaResponseBuilder.java",
                "changes": 65,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaResponseBuilder.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaResponseBuilder.java",
                "patch": "@@ -0,0 +1,65 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.api.response;\n+\n+import org.apache.cloudstack.api.command.QuotaBalanceCmd;\n+import org.apache.cloudstack.api.command.QuotaEmailTemplateListCmd;\n+import org.apache.cloudstack.api.command.QuotaEmailTemplateUpdateCmd;\n+import org.apache.cloudstack.api.command.QuotaStatementCmd;\n+import org.apache.cloudstack.api.command.QuotaTariffListCmd;\n+import org.apache.cloudstack.api.command.QuotaTariffUpdateCmd;\n+import org.apache.cloudstack.quota.vo.QuotaBalanceVO;\n+import org.apache.cloudstack.quota.vo.QuotaTariffVO;\n+import org.apache.cloudstack.quota.vo.QuotaUsageVO;\n+\n+import java.util.Date;\n+import java.util.List;\n+\n+public interface QuotaResponseBuilder {\n+\n+    QuotaTariffVO updateQuotaTariffPlan(QuotaTariffUpdateCmd cmd);\n+\n+    List<QuotaTariffVO> listQuotaTariffPlans(QuotaTariffListCmd cmd);\n+\n+    QuotaTariffResponse createQuotaTariffResponse(QuotaTariffVO configuration);\n+\n+    QuotaStatementResponse createQuotaStatementResponse(List<QuotaUsageVO> quotaUsage);\n+\n+    QuotaBalanceResponse createQuotaBalanceResponse(List<QuotaBalanceVO> quotaUsage, Date startDate, Date endDate);\n+\n+    List<QuotaSummaryResponse> createQuotaSummaryResponse(Boolean listAll);\n+\n+    List<QuotaSummaryResponse> createQuotaSummaryResponse(String accountName, Long domainId);\n+\n+    QuotaBalanceResponse createQuotaLastBalanceResponse(List<QuotaBalanceVO> quotaBalance, Date startDate);\n+\n+    QuotaCreditsResponse addQuotaCredits(Long accountId, Long domainId, Double amount, Long updatedBy, Date despositedOn);\n+\n+    List<QuotaUsageVO> getQuotaUsage(QuotaStatementCmd cmd);\n+\n+    List<QuotaBalanceVO> getQuotaBalance(QuotaBalanceCmd cmd);\n+\n+    QuotaCreditsResponse addQuotaCredits(Long accountId, Long domainId, Double amount, Long updatedBy);\n+\n+    List<QuotaEmailTemplateResponse> listQuotaEmailTemplates(QuotaEmailTemplateListCmd cmd);\n+\n+    boolean updateQuotaEmailTemplate(QuotaEmailTemplateUpdateCmd cmd);\n+\n+    Date startOfNextDay(Date dt);\n+\n+    Date startOfNextDay();\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaResponseBuilder.java",
                "sha": "a4260cb937dc3e97403ea4405585478c6b8eef8b",
                "status": "added"
            },
            {
                "additions": 516,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaResponseBuilderImpl.java",
                "changes": 516,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaResponseBuilderImpl.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaResponseBuilderImpl.java",
                "patch": "@@ -0,0 +1,516 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.api.response;\n+\n+import com.cloud.domain.DomainVO;\n+import com.cloud.domain.dao.DomainDao;\n+import com.cloud.exception.InvalidParameterValueException;\n+import com.cloud.user.Account;\n+import com.cloud.user.AccountVO;\n+import com.cloud.user.User;\n+import com.cloud.user.dao.AccountDao;\n+import com.cloud.user.dao.UserDao;\n+\n+import org.apache.cloudstack.api.command.QuotaBalanceCmd;\n+import org.apache.cloudstack.api.command.QuotaEmailTemplateListCmd;\n+import org.apache.cloudstack.api.command.QuotaEmailTemplateUpdateCmd;\n+import org.apache.cloudstack.api.command.QuotaStatementCmd;\n+import org.apache.cloudstack.api.command.QuotaTariffListCmd;\n+import org.apache.cloudstack.api.command.QuotaTariffUpdateCmd;\n+import org.apache.cloudstack.quota.QuotaService;\n+import org.apache.cloudstack.quota.QuotaStatement;\n+import org.apache.cloudstack.quota.constant.QuotaConfig;\n+import org.apache.cloudstack.quota.constant.QuotaTypes;\n+import org.apache.cloudstack.quota.dao.QuotaAccountDao;\n+import org.apache.cloudstack.quota.dao.QuotaBalanceDao;\n+import org.apache.cloudstack.quota.dao.QuotaCreditsDao;\n+import org.apache.cloudstack.quota.dao.QuotaEmailTemplatesDao;\n+import org.apache.cloudstack.quota.dao.QuotaTariffDao;\n+import org.apache.cloudstack.quota.dao.QuotaUsageDao;\n+import org.apache.cloudstack.quota.vo.QuotaAccountVO;\n+import org.apache.cloudstack.quota.vo.QuotaBalanceVO;\n+import org.apache.cloudstack.quota.vo.QuotaCreditsVO;\n+import org.apache.cloudstack.quota.vo.QuotaEmailTemplatesVO;\n+import org.apache.cloudstack.quota.vo.QuotaTariffVO;\n+import org.apache.cloudstack.quota.vo.QuotaUsageVO;\n+import org.apache.cloudstack.region.RegionManager;\n+import org.apache.commons.lang.StringEscapeUtils;\n+import org.apache.log4j.Logger;\n+import org.springframework.stereotype.Component;\n+\n+import javax.ejb.Local;\n+import javax.inject.Inject;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+@Component\n+@Local(value = QuotaResponseBuilderImpl.class)\n+public class QuotaResponseBuilderImpl implements QuotaResponseBuilder {\n+    private static final Logger s_logger = Logger.getLogger(QuotaResponseBuilderImpl.class);\n+\n+    @Inject\n+    private QuotaTariffDao _quotaTariffDao;\n+    @Inject\n+    private QuotaBalanceDao _quotaBalanceDao;\n+    @Inject\n+    private QuotaCreditsDao _quotaCreditsDao;\n+    @Inject\n+    private QuotaUsageDao _quotaUsageDao;\n+    @Inject\n+    private QuotaEmailTemplatesDao _quotaEmailTemplateDao;\n+\n+    @Inject\n+    private UserDao _userDao;\n+    @Inject\n+    private QuotaService _quotaService;\n+    @Inject\n+    private AccountDao _accountDao;\n+    @Inject\n+    private QuotaAccountDao _quotaAccountDao;\n+    @Inject\n+    private DomainDao _domainDao;\n+    @Inject\n+    private RegionManager _regionMgr;\n+    @Inject\n+    private QuotaStatement _statement;\n+\n+    @Override\n+    public QuotaTariffResponse createQuotaTariffResponse(QuotaTariffVO tariff) {\n+        final QuotaTariffResponse response = new QuotaTariffResponse();\n+        response.setUsageType(tariff.getUsageType());\n+        response.setUsageName(tariff.getUsageName());\n+        response.setUsageUnit(tariff.getUsageUnit());\n+        response.setUsageDiscriminator(tariff.getUsageDiscriminator());\n+        response.setTariffValue(tariff.getCurrencyValue());\n+        response.setEffectiveOn(tariff.getEffectiveOn());\n+        response.setDescription(tariff.getDescription());\n+        response.setCurrency(QuotaConfig.QuotaCurrencySymbol.value());\n+        return response;\n+    }\n+\n+    @Override\n+    public List<QuotaSummaryResponse> createQuotaSummaryResponse(final String accountName, final Long domainId) {\n+        List<QuotaSummaryResponse> result = new ArrayList<QuotaSummaryResponse>();\n+\n+        if (accountName != null && domainId != null) {\n+            Account account = _accountDao.findActiveAccount(accountName, domainId);\n+            QuotaSummaryResponse qr = getQuotaSummaryResponse(account);\n+            result.add(qr);\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public List<QuotaSummaryResponse> createQuotaSummaryResponse(Boolean listAll) {\n+        List<QuotaSummaryResponse> result = new ArrayList<QuotaSummaryResponse>();\n+\n+        if (listAll) {\n+            for (final AccountVO account : _accountDao.listAll()) {\n+                QuotaSummaryResponse qr = getQuotaSummaryResponse(account);\n+                result.add(qr);\n+            }\n+        } else {\n+            for (final QuotaAccountVO quotaAccount : _quotaAccountDao.listAllQuotaAccount()) {\n+                AccountVO account = _accountDao.findById(quotaAccount.getId());\n+                QuotaSummaryResponse qr = getQuotaSummaryResponse(account);\n+                result.add(qr);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    private QuotaSummaryResponse getQuotaSummaryResponse(final Account account) {\n+        Calendar[] period = _statement.getCurrentStatementTime();\n+\n+        if (account != null) {\n+            QuotaSummaryResponse qr = new QuotaSummaryResponse();\n+            DomainVO domain = _domainDao.findById(account.getDomainId());\n+            BigDecimal curBalance = _quotaBalanceDao.lastQuotaBalance(account.getAccountId(), account.getDomainId(), period[1].getTime());\n+            BigDecimal quotaUsage = _quotaUsageDao.findTotalQuotaUsage(account.getAccountId(), account.getDomainId(), null, period[0].getTime(), period[1].getTime());\n+\n+            qr.setAccountId(account.getAccountId());\n+            qr.setAccountName(account.getAccountName());\n+            qr.setDomainId(account.getDomainId());\n+            qr.setDomainName(domain.getName());\n+            qr.setBalance(curBalance);\n+            qr.setQuotaUsage(quotaUsage);\n+            qr.setState(account.getState());\n+            qr.setStartDate(period[0].getTime());\n+            qr.setEndDate(period[1].getTime());\n+            qr.setCurrency(QuotaConfig.QuotaCurrencySymbol.value());\n+            qr.setObjectName(\"summary\");\n+            return qr;\n+        } else {\n+            throw new InvalidParameterValueException(\"Quota summary response for an account requires a valid account.\");\n+        }\n+    }\n+\n+    @Override\n+    public QuotaBalanceResponse createQuotaBalanceResponse(List<QuotaBalanceVO> quotaBalance, Date startDate, Date endDate) {\n+        if (quotaBalance == null || quotaBalance.isEmpty()) {\n+            new InvalidParameterValueException(\"The request period does not contain balance entries.\");\n+        }\n+        Collections.sort(quotaBalance, new Comparator<QuotaBalanceVO>() {\n+            public int compare(QuotaBalanceVO o1, QuotaBalanceVO o2) {\n+                return o2.getUpdatedOn().compareTo(o1.getUpdatedOn()); // desc\n+            }\n+        });\n+\n+        boolean have_balance_entries = false;\n+        //check that there is at least one balance entry\n+        for (Iterator<QuotaBalanceVO> it = quotaBalance.iterator(); it.hasNext();) {\n+            QuotaBalanceVO entry = it.next();\n+            if (entry.getCreditsId() > 0) {\n+                have_balance_entries = true;\n+                break;\n+            }\n+        }\n+        //if last entry is a credit deposit then remove that as that is already\n+        //accounted for in the starting balance after that entry, note the sort is desc\n+        if (have_balance_entries) {\n+            ListIterator<QuotaBalanceVO> li = quotaBalance.listIterator(quotaBalance.size());\n+            // Iterate in reverse.\n+            while (li.hasPrevious()) {\n+                QuotaBalanceVO entry = li.previous();\n+                if (s_logger.isDebugEnabled()) {\n+                    s_logger.debug(\"createQuotaBalanceResponse: Entry=\" + entry);\n+                }\n+                if (entry.getCreditsId() > 0) {\n+                    li.remove();\n+                } else {\n+                    break;\n+                }\n+            }\n+        }\n+\n+        int quota_activity = quotaBalance.size();\n+        QuotaBalanceResponse resp = new QuotaBalanceResponse();\n+        BigDecimal lastCredits = new BigDecimal(0);\n+        boolean consecutive = true;\n+        for (Iterator<QuotaBalanceVO> it = quotaBalance.iterator(); it.hasNext();) {\n+            QuotaBalanceVO entry = it.next();\n+            if (s_logger.isDebugEnabled()) {\n+                s_logger.debug(\"createQuotaBalanceResponse: All Credit Entry=\" + entry);\n+            }\n+            if (entry.getCreditsId() > 0) {\n+                if (consecutive) {\n+                    lastCredits = lastCredits.add(entry.getCreditBalance());\n+                }\n+                resp.addCredits(entry);\n+                it.remove();\n+            } else {\n+                consecutive = false;\n+            }\n+        }\n+\n+        if (quota_activity > 0 && quotaBalance.size() > 0) {\n+            // order is desc last item is the start item\n+            QuotaBalanceVO startItem = quotaBalance.get(quotaBalance.size() - 1);\n+            QuotaBalanceVO endItem = quotaBalance.get(0);\n+            resp.setStartDate(startItem.getUpdatedOn());\n+            resp.setStartQuota(startItem.getCreditBalance());\n+            resp.setEndDate(endItem.getUpdatedOn());\n+            if (s_logger.isDebugEnabled()) {\n+                s_logger.debug(\"createQuotaBalanceResponse: Start Entry=\" + startItem);\n+                s_logger.debug(\"createQuotaBalanceResponse: End Entry=\" + endItem);\n+            }\n+            resp.setEndQuota(endItem.getCreditBalance().add(lastCredits));\n+        } else if (quota_activity > 0) {\n+            // order is desc last item is the start item\n+            resp.setStartDate(startDate);\n+            resp.setStartQuota(new BigDecimal(0));\n+            resp.setEndDate(endDate);\n+            resp.setEndQuota(new BigDecimal(0).add(lastCredits));\n+        } else {\n+            resp.setStartDate(startDate);\n+            resp.setEndDate(endDate);\n+            resp.setStartQuota(new BigDecimal(0));\n+            resp.setEndQuota(new BigDecimal(0));\n+        }\n+        resp.setCurrency(QuotaConfig.QuotaCurrencySymbol.value());\n+        resp.setObjectName(\"balance\");\n+        return resp;\n+    }\n+\n+    @Override\n+    public QuotaStatementResponse createQuotaStatementResponse(final List<QuotaUsageVO> quotaUsage) {\n+        if (quotaUsage == null || quotaUsage.isEmpty()) {\n+            throw new InvalidParameterValueException(\"There is no usage data found for period mentioned.\");\n+        }\n+\n+        QuotaStatementResponse statement = new QuotaStatementResponse();\n+\n+        HashMap<Integer, QuotaTypes> quotaTariffMap = new HashMap<Integer, QuotaTypes>();\n+        Collection<QuotaTypes> result = QuotaTypes.listQuotaTypes().values();\n+\n+        for (QuotaTypes quotaTariff : result) {\n+            quotaTariffMap.put(quotaTariff.getQuotaType(), quotaTariff);\n+            // add dummy record for each usage type\n+            QuotaUsageVO dummy = new QuotaUsageVO(quotaUsage.get(0));\n+            dummy.setUsageType(quotaTariff.getQuotaType());\n+            dummy.setQuotaUsed(new BigDecimal(0));\n+            quotaUsage.add(dummy);\n+        }\n+\n+        if (s_logger.isDebugEnabled()) {\n+            s_logger.debug(\n+                    \"createQuotaStatementResponse Type=\" + quotaUsage.get(0).getUsageType() + \" usage=\" + quotaUsage.get(0).getQuotaUsed().setScale(2, RoundingMode.HALF_EVEN)\n+                            + \" rec.id=\" + quotaUsage.get(0).getUsageItemId() + \" SD=\" + quotaUsage.get(0).getStartDate() + \" ED=\" + quotaUsage.get(0).getEndDate());\n+        }\n+\n+        Collections.sort(quotaUsage, new Comparator<QuotaUsageVO>() {\n+            public int compare(QuotaUsageVO o1, QuotaUsageVO o2) {\n+                if (o1.getUsageType() == o2.getUsageType())\n+                    return 0;\n+                return o1.getUsageType() < o2.getUsageType() ? -1 : 1;\n+            }\n+        });\n+\n+        List<QuotaStatementItemResponse> items = new ArrayList<QuotaStatementItemResponse>();\n+        QuotaStatementItemResponse lineitem;\n+        int type = -1;\n+        BigDecimal usage = new BigDecimal(0);\n+        BigDecimal totalUsage = new BigDecimal(0);\n+        quotaUsage.add(new QuotaUsageVO());// boundary\n+        QuotaUsageVO prev = quotaUsage.get(0);\n+        if (s_logger.isDebugEnabled()) {\n+            s_logger.debug(\"createQuotaStatementResponse record count=\" + quotaUsage.size());\n+        }\n+        for (final QuotaUsageVO quotaRecord : quotaUsage) {\n+            if (type != quotaRecord.getUsageType()) {\n+                if (type != -1) {\n+                    lineitem = new QuotaStatementItemResponse(type);\n+                    lineitem.setQuotaUsed(usage);\n+                    lineitem.setAccountId(prev.getAccountId());\n+                    lineitem.setDomainId(prev.getDomainId());\n+                    lineitem.setUsageUnit(quotaTariffMap.get(type).getQuotaUnit());\n+                    lineitem.setUsageName(quotaTariffMap.get(type).getQuotaName());\n+                    lineitem.setObjectName(\"quotausage\");\n+                    items.add(lineitem);\n+                    totalUsage = totalUsage.add(usage);\n+                    usage = new BigDecimal(0);\n+                }\n+                type = quotaRecord.getUsageType();\n+            }\n+            prev = quotaRecord;\n+            usage = usage.add(quotaRecord.getQuotaUsed());\n+        }\n+\n+        statement.setLineItem(items);\n+        statement.setTotalQuota(totalUsage);\n+        statement.setCurrency(QuotaConfig.QuotaCurrencySymbol.value());\n+        statement.setObjectName(\"statement\");\n+        return statement;\n+    }\n+\n+    @Override\n+    public List<QuotaTariffVO> listQuotaTariffPlans(final QuotaTariffListCmd cmd) {\n+        List<QuotaTariffVO> result = new ArrayList<QuotaTariffVO>();\n+        Date effectiveDate = cmd.getEffectiveDate() == null ? new Date() : cmd.getEffectiveDate();\n+        Date adjustedEffectiveDate = _quotaService.computeAdjustedTime(effectiveDate);\n+        if (s_logger.isDebugEnabled()) {\n+            s_logger.debug(\"Effective datec=\" + effectiveDate + \" quotatype=\" + cmd.getUsageType() + \" Adjusted date=\" + adjustedEffectiveDate);\n+        }\n+        if (cmd.getUsageType() != null) {\n+            QuotaTariffVO tariffPlan = _quotaTariffDao.findTariffPlanByUsageType(cmd.getUsageType(), adjustedEffectiveDate);\n+            if (tariffPlan != null) {\n+                result.add(tariffPlan);\n+            }\n+        } else {\n+            result = _quotaTariffDao.listAllTariffPlans(adjustedEffectiveDate);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public QuotaTariffVO updateQuotaTariffPlan(QuotaTariffUpdateCmd cmd) {\n+        final int quotaType = cmd.getUsageType();\n+        final BigDecimal quotaCost = new BigDecimal(cmd.getValue());\n+        final Date effectiveDate = _quotaService.computeAdjustedTime(cmd.getStartDate());\n+        final Date now = _quotaService.computeAdjustedTime(new Date());\n+        // if effective date is in the past return error\n+        if (effectiveDate.compareTo(now) < 0) {\n+            throw new InvalidParameterValueException(\"Incorrect effective date for tariff \" + effectiveDate + \" is less than now \" + now);\n+        }\n+        QuotaTypes quotaConstant = QuotaTypes.listQuotaTypes().get(quotaType);\n+        if (quotaConstant == null) {\n+            throw new InvalidParameterValueException(\"Quota type does not exists \" + quotaType);\n+        }\n+\n+        QuotaTariffVO result = null;\n+        result = new QuotaTariffVO(quotaType);\n+        result.setUsageName(quotaConstant.getQuotaName());\n+        result.setUsageUnit(quotaConstant.getQuotaUnit());\n+        result.setUsageDiscriminator(quotaConstant.getDiscriminator());\n+        result.setCurrencyValue(quotaCost);\n+        result.setEffectiveOn(effectiveDate);\n+        result.setUpdatedOn(now);\n+        result.setUpdatedBy(cmd.getEntityOwnerId());\n+\n+        if (s_logger.isDebugEnabled()) {\n+            s_logger.debug(String.format(\"Updating Quota Tariff Plan: New value=%s for resource type=%d effective on date=%s\", quotaCost, quotaType, effectiveDate));\n+        }\n+        _quotaTariffDao.addQuotaTariff(result);\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public QuotaCreditsResponse addQuotaCredits(Long accountId, Long domainId, Double amount, Long updatedBy) {\n+        Date depositDate = new Date();\n+        Date adjustedStartDate = _quotaService.computeAdjustedTime(depositDate);\n+        QuotaBalanceVO qb = _quotaBalanceDao.findLaterBalanceEntry(accountId, domainId, adjustedStartDate);\n+\n+        if (qb != null) {\n+            throw new InvalidParameterValueException(\"Incorrect deposit date: \" + adjustedStartDate + \" there are balance entries after this date\");\n+        }\n+\n+        return addQuotaCredits(accountId, domainId, amount, updatedBy, adjustedStartDate);\n+    }\n+\n+    @Override\n+    public QuotaCreditsResponse addQuotaCredits(final Long accountId, final Long domainId, final Double amount, final Long updatedBy, final Date despositedOn) {\n+\n+        QuotaCreditsVO credits = new QuotaCreditsVO(accountId, domainId, new BigDecimal(amount), updatedBy);\n+        s_logger.debug(\"AddQuotaCredits: Depositing \" + amount + \" on adjusted date \" + despositedOn);\n+        credits.setUpdatedOn(despositedOn);\n+        QuotaCreditsVO result = _quotaCreditsDao.saveCredits(credits);\n+\n+        final AccountVO account = _accountDao.findById(accountId);\n+        final boolean lockAccountEnforcement = \"true\".equalsIgnoreCase(QuotaConfig.QuotaEnableEnforcement.value());\n+        final BigDecimal currentAccountBalance = _quotaBalanceDao.lastQuotaBalance(accountId, domainId, startOfNextDay(despositedOn));\n+        if (lockAccountEnforcement && (currentAccountBalance.compareTo(new BigDecimal(0)) >= 0)) {\n+            if (account.getState() == Account.State.locked) {\n+                _regionMgr.enableAccount(account.getAccountName(), domainId, accountId);\n+            }\n+        }\n+\n+        String creditor = String.valueOf(Account.ACCOUNT_ID_SYSTEM);\n+        User creditorUser = _userDao.getUser(updatedBy);\n+        if (creditorUser != null) {\n+            creditor = creditorUser.getUsername();\n+        }\n+        QuotaCreditsResponse response = new QuotaCreditsResponse(result, creditor);\n+        response.setCurrency(QuotaConfig.QuotaCurrencySymbol.value());\n+        return response;\n+    }\n+\n+    private QuotaEmailTemplateResponse createQuotaEmailResponse(QuotaEmailTemplatesVO template) {\n+        QuotaEmailTemplateResponse response = new QuotaEmailTemplateResponse();\n+        response.setTemplateType(template.getTemplateName());\n+        response.setTemplateSubject(template.getTemplateSubject());\n+        response.setTemplateText(template.getTemplateBody());\n+        response.setLocale(template.getLocale());\n+        response.setLastUpdatedOn(template.getLastUpdated());\n+        return response;\n+    }\n+\n+    @Override\n+    public List<QuotaEmailTemplateResponse> listQuotaEmailTemplates(QuotaEmailTemplateListCmd cmd) {\n+        final String templateName = cmd.getTemplateName();\n+        List<QuotaEmailTemplatesVO> templates = _quotaEmailTemplateDao.listAllQuotaEmailTemplates(templateName);\n+        final List<QuotaEmailTemplateResponse> responses = new ArrayList<QuotaEmailTemplateResponse>();\n+        for (final QuotaEmailTemplatesVO template : templates) {\n+            responses.add(createQuotaEmailResponse(template));\n+        }\n+        return responses;\n+    }\n+\n+    @Override\n+    public boolean updateQuotaEmailTemplate(QuotaEmailTemplateUpdateCmd cmd) {\n+        final String templateName = cmd.getTemplateName();\n+        final String templateSubject = StringEscapeUtils.escapeJavaScript(cmd.getTemplateSubject());\n+        final String templateBody = StringEscapeUtils.escapeJavaScript(cmd.getTemplateBody());\n+        final String locale = cmd.getLocale();\n+\n+        final List<QuotaEmailTemplatesVO> templates = _quotaEmailTemplateDao.listAllQuotaEmailTemplates(templateName);\n+        if (templates.size() == 1) {\n+            final QuotaEmailTemplatesVO template = templates.get(0);\n+            template.setTemplateSubject(templateSubject);\n+            template.setTemplateBody(templateBody);\n+            if (locale != null) {\n+                template.setLocale(locale);\n+            }\n+            return _quotaEmailTemplateDao.updateQuotaEmailTemplate(template);\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public QuotaBalanceResponse createQuotaLastBalanceResponse(List<QuotaBalanceVO> quotaBalance, Date startDate) {\n+        if (quotaBalance == null) {\n+            throw new InvalidParameterValueException(\"There are no balance entries on or before the requested date.\");\n+        }\n+        if (startDate == null) {\n+            startDate = new Date();\n+        }\n+        QuotaBalanceResponse resp = new QuotaBalanceResponse();\n+        BigDecimal lastCredits = new BigDecimal(0);\n+        for (QuotaBalanceVO entry : quotaBalance) {\n+            if (s_logger.isDebugEnabled()) {\n+                s_logger.debug(\"createQuotaLastBalanceResponse Date=\" + entry.getUpdatedOn() + \" balance=\" + entry.getCreditBalance() + \" credit=\" + entry.getCreditsId());\n+            }\n+            lastCredits = lastCredits.add(entry.getCreditBalance());\n+        }\n+        resp.setStartQuota(lastCredits);\n+        resp.setStartDate(_quotaService.computeAdjustedTime(startDate));\n+        resp.setCurrency(QuotaConfig.QuotaCurrencySymbol.value());\n+        resp.setObjectName(\"balance\");\n+        return resp;\n+    }\n+\n+    @Override\n+    public List<QuotaUsageVO> getQuotaUsage(QuotaStatementCmd cmd) {\n+        return _quotaService.getQuotaUsage(cmd.getAccountId(), cmd.getAccountName(), cmd.getDomainId(), cmd.getUsageType(), cmd.getStartDate(), cmd.getEndDate());\n+    }\n+\n+    @Override\n+    public List<QuotaBalanceVO> getQuotaBalance(QuotaBalanceCmd cmd) {\n+        return _quotaService.findQuotaBalanceVO(cmd.getAccountId(), cmd.getAccountName(), cmd.getDomainId(), cmd.getStartDate(), cmd.getEndDate());\n+    }\n+\n+    @Override\n+    public Date startOfNextDay(Date dt) {\n+        Calendar c = Calendar.getInstance();\n+        c.setTime(dt);\n+        c.add(Calendar.DATE, 1);\n+        dt = c.getTime();\n+        return dt;\n+    }\n+\n+    @Override\n+    public Date startOfNextDay() {\n+        Calendar c = Calendar.getInstance();\n+        c.setTime(new Date());\n+        c.add(Calendar.DATE, 1);\n+        Date dt = c.getTime();\n+        return dt;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaResponseBuilderImpl.java",
                "sha": "23b136363c1f3b07bd3c40b9025a6f90ad5bd1c7",
                "status": "added"
            },
            {
                "additions": 118,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaStatementItemResponse.java",
                "changes": 118,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaStatementItemResponse.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaStatementItemResponse.java",
                "patch": "@@ -0,0 +1,118 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.api.response;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import org.apache.cloudstack.api.BaseResponse;\n+\n+import com.cloud.serializer.Param;\n+\n+public class QuotaStatementItemResponse extends BaseResponse {\n+\n+    @SerializedName(\"type\")\n+    @Param(description = \"usage type\")\n+    private int usageType;\n+\n+    @SerializedName(\"accountid\")\n+    @Param(description = \"account id\")\n+    private Long accountId;\n+\n+    @SerializedName(\"account\")\n+    @Param(description = \"account name\")\n+    private String accountName;\n+\n+    @SerializedName(\"domain\")\n+    @Param(description = \"domain id\")\n+    private Long domainId;\n+\n+    @SerializedName(\"name\")\n+    @Param(description = \"usage type name\")\n+    private String usageName;\n+\n+    @SerializedName(\"unit\")\n+    @Param(description = \"usage unit\")\n+    private String usageUnit;\n+\n+    @SerializedName(\"quota\")\n+    @Param(description = \"quota consumed\")\n+    private BigDecimal quotaUsed;\n+\n+    public QuotaStatementItemResponse(final int usageType) {\n+        this.usageType = usageType;\n+    }\n+\n+    public Long getAccountId() {\n+        return accountId;\n+    }\n+\n+    public void setAccountId(Long accountId) {\n+        this.accountId = accountId;\n+    }\n+\n+    public String getAccountName() {\n+        return accountName;\n+    }\n+\n+    public void setAccountName(String accountName) {\n+        this.accountName = accountName;\n+    }\n+\n+    public Long getDomainId() {\n+        return domainId;\n+    }\n+\n+    public void setDomainId(Long domainId) {\n+        this.domainId = domainId;\n+    }\n+\n+    public String getUsageName() {\n+        return usageName;\n+    }\n+\n+    public void setUsageName(String usageName) {\n+        this.usageName = usageName;\n+    }\n+\n+    public int getUsageType() {\n+        return usageType;\n+    }\n+\n+    public void setUsageType(int usageType) {\n+        this.usageType = usageType;\n+    }\n+\n+    public String getUsageUnit() {\n+        return usageUnit;\n+    }\n+\n+    public void setUsageUnit(String usageUnit) {\n+        this.usageUnit = usageUnit;\n+    }\n+\n+    public BigDecimal getQuotaUsed() {\n+        return quotaUsed;\n+    }\n+\n+    public void setQuotaUsed(BigDecimal quotaUsed) {\n+        this.quotaUsed = quotaUsed.setScale(2, RoundingMode.HALF_EVEN);\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaStatementItemResponse.java",
                "sha": "dec67606a164466fd49dbf4c983ba7aa529cbfa3",
                "status": "added"
            },
            {
                "additions": 130,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaStatementResponse.java",
                "changes": 130,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaStatementResponse.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaStatementResponse.java",
                "patch": "@@ -0,0 +1,130 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.api.response;\n+\n+import com.cloud.serializer.Param;\n+import com.google.gson.annotations.SerializedName;\n+import org.apache.cloudstack.api.BaseResponse;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.Date;\n+import java.util.List;\n+\n+public class QuotaStatementResponse  extends BaseResponse {\n+\n+    @SerializedName(\"accountid\")\n+    @Param(description = \"account id\")\n+    private Long accountId;\n+\n+    @SerializedName(\"account\")\n+    @Param(description = \"account name\")\n+    private String accountName;\n+\n+    @SerializedName(\"domain\")\n+    @Param(description = \"domain id\")\n+    private Long domainId;\n+\n+    @SerializedName(\"quotausage\")\n+    @Param(description = \"list of quota usage under various types\", responseObject = QuotaStatementItemResponse.class)\n+    private List<QuotaStatementItemResponse> lineItem;\n+\n+    @SerializedName(\"totalquota\")\n+    @Param(description = \"total quota used during this period\")\n+    private BigDecimal totalQuota;\n+\n+    @SerializedName(\"startdate\")\n+    @Param(description = \"start date\")\n+    private Date startDate = null;\n+\n+    @SerializedName(\"enddate\")\n+    @Param(description = \"end date\")\n+    private Date endDate = null;\n+\n+    @SerializedName(\"currency\")\n+    @Param(description = \"currency\")\n+    private String currency;\n+\n+    public QuotaStatementResponse() {\n+        super();\n+    }\n+\n+    public Long getAccountId() {\n+        return accountId;\n+    }\n+\n+    public void setAccountId(Long accountId) {\n+        this.accountId = accountId;\n+    }\n+\n+    public String getAccountName() {\n+        return accountName;\n+    }\n+\n+    public void setAccountName(String accountName) {\n+        this.accountName = accountName;\n+    }\n+\n+    public Long getDomainId() {\n+        return domainId;\n+    }\n+\n+    public void setDomainId(Long domainId) {\n+        this.domainId = domainId;\n+    }\n+\n+    public List<QuotaStatementItemResponse> getLineItem() {\n+        return lineItem;\n+    }\n+\n+    public void setLineItem(List<QuotaStatementItemResponse> lineItem) {\n+        this.lineItem = lineItem;\n+    }\n+\n+    public Date getStartDate() {\n+        return startDate == null ? null : new Date(startDate.getTime());\n+    }\n+\n+    public void setStartDate(Date startDate) {\n+        this.startDate = startDate == null ? null : new Date(startDate.getTime());\n+    }\n+\n+    public Date getEndDate() {\n+        return endDate == null ? null : new Date(endDate.getTime());\n+    }\n+\n+    public void setEndDate(Date endDate) {\n+        this.endDate = endDate == null ? null : new Date(endDate.getTime());\n+    }\n+\n+\n+    public BigDecimal getTotalQuota() {\n+        return totalQuota;\n+    }\n+\n+    public void setTotalQuota(BigDecimal totalQuota) {\n+        this.totalQuota = totalQuota.setScale(2, RoundingMode.HALF_EVEN);\n+    }\n+\n+    public String getCurrency() {\n+        return currency;\n+    }\n+\n+    public void setCurrency(String currency) {\n+        this.currency = currency;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaStatementResponse.java",
                "sha": "efe8e8ecac060579aeca9d69249166788a8836f4",
                "status": "added"
            },
            {
                "additions": 155,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaSummaryResponse.java",
                "changes": 155,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaSummaryResponse.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaSummaryResponse.java",
                "patch": "@@ -0,0 +1,155 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.api.response;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.Date;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import org.apache.cloudstack.api.BaseResponse;\n+\n+import com.cloud.serializer.Param;\n+import com.cloud.user.Account.State;\n+\n+public class QuotaSummaryResponse extends BaseResponse {\n+\n+    @SerializedName(\"accountid\")\n+    @Param(description = \"account id\")\n+    private Long accountId;\n+\n+    @SerializedName(\"account\")\n+    @Param(description = \"account name\")\n+    private String accountName;\n+\n+    @SerializedName(\"domainid\")\n+    @Param(description = \"domain id\")\n+    private Long domainId;\n+\n+    @SerializedName(\"domain\")\n+    @Param(description = \"domain name\")\n+    private String domainName;\n+\n+    @SerializedName(\"balance\")\n+    @Param(description = \"account balance\")\n+    private BigDecimal balance;\n+\n+    @SerializedName(\"state\")\n+    @Param(description = \"account state\")\n+    private State state;\n+\n+    @SerializedName(\"quota\")\n+    @Param(description = \"quota usage of this period\")\n+    private BigDecimal quotaUsage;\n+\n+    @SerializedName(\"startdate\")\n+    @Param(description = \"start date\")\n+    private Date startDate = null;\n+\n+    @SerializedName(\"enddate\")\n+    @Param(description = \"end date\")\n+    private Date endDate = null;\n+\n+    @SerializedName(\"currency\")\n+    @Param(description = \"currency\")\n+    private String currency;\n+\n+    public QuotaSummaryResponse() {\n+        super();\n+    }\n+\n+    public Long getAccountId() {\n+        return accountId;\n+    }\n+\n+    public void setAccountId(Long accountId) {\n+        this.accountId = accountId;\n+    }\n+\n+    public String getAccountName() {\n+        return accountName;\n+    }\n+\n+    public void setAccountName(String accountName) {\n+        this.accountName = accountName;\n+    }\n+\n+    public Long getDomainId() {\n+        return domainId;\n+    }\n+\n+    public void setDomainId(Long domainId) {\n+        this.domainId = domainId;\n+    }\n+\n+    public String getDomainName() {\n+        return domainName;\n+    }\n+\n+    public void setDomainName(String domainName) {\n+        this.domainName = domainName;\n+    }\n+\n+    public BigDecimal getQuotaUsage() {\n+        return quotaUsage;\n+    }\n+\n+    public State getState() {\n+        return state;\n+    }\n+\n+    public void setState(State state) {\n+        this.state = state;\n+    }\n+\n+    public void setQuotaUsage(BigDecimal startQuota) {\n+        this.quotaUsage = startQuota.setScale(2, RoundingMode.HALF_EVEN);\n+    }\n+\n+    public BigDecimal getBalance() {\n+        return balance;\n+    }\n+\n+    public void setBalance(BigDecimal balance) {\n+        this.balance = balance.setScale(2, RoundingMode.HALF_EVEN);\n+    }\n+\n+    public Date getStartDate() {\n+        return startDate == null ?  null : new Date(startDate.getTime());\n+    }\n+\n+    public void setStartDate(Date startDate) {\n+        this.startDate =  startDate == null ?  null : new Date(startDate.getTime());\n+    }\n+\n+    public Date getEndDate() {\n+        return  endDate == null ?  null : new Date(endDate.getTime());\n+    }\n+\n+    public void setEndDate(Date endDate) {\n+        this.endDate = endDate == null ?  null : new Date(endDate.getTime());\n+    }\n+\n+    public String getCurrency() {\n+        return currency;\n+    }\n+\n+    public void setCurrency(String currency) {\n+        this.currency = currency;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaSummaryResponse.java",
                "sha": "4e6f684c606ee6f262567b846b37b6f0ea6497eb",
                "status": "added"
            },
            {
                "additions": 134,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaTariffResponse.java",
                "changes": 134,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaTariffResponse.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaTariffResponse.java",
                "patch": "@@ -0,0 +1,134 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.api.response;\n+\n+import com.cloud.serializer.Param;\n+import com.google.gson.annotations.SerializedName;\n+\n+import org.apache.cloudstack.api.BaseResponse;\n+\n+import java.math.BigDecimal;\n+import java.util.Date;\n+\n+public class QuotaTariffResponse extends BaseResponse {\n+\n+    @SerializedName(\"usageType\")\n+    @Param(description = \"usageType\")\n+    private int usageType;\n+\n+    @SerializedName(\"usageName\")\n+    @Param(description = \"usageName\")\n+    private String usageName;\n+\n+    @SerializedName(\"usageUnit\")\n+    @Param(description = \"usageUnit\")\n+    private String usageUnit;\n+\n+    @SerializedName(\"usageDiscriminator\")\n+    @Param(description = \"usageDiscriminator\")\n+    private String usageDiscriminator;\n+\n+    @SerializedName(\"tariffValue\")\n+    @Param(description = \"tariffValue\")\n+    private BigDecimal tariffValue;\n+\n+    @SerializedName(\"effectiveDate\")\n+    @Param(description = \"the date on/after which this quota value will be effective\")\n+    private Date effectiveOn = null;\n+\n+    @SerializedName(\"description\")\n+    @Param(description = \"description\")\n+    private String description;\n+\n+    @SerializedName(\"currency\")\n+    @Param(description = \"currency\")\n+    private String currency;\n+\n+    public QuotaTariffResponse() {\n+        super();\n+        this.setObjectName(\"quotatariff\");\n+    }\n+\n+    public QuotaTariffResponse(final int usageType) {\n+        super();\n+        this.usageType = usageType;\n+    }\n+\n+    public String getUsageName() {\n+        return usageName;\n+    }\n+\n+    public void setUsageName(String usageName) {\n+        this.usageName = usageName;\n+    }\n+\n+    public int getUsageType() {\n+        return usageType;\n+    }\n+\n+    public void setUsageType(int usageType) {\n+        this.usageType = usageType;\n+    }\n+\n+    public String getUsageUnit() {\n+        return usageUnit;\n+    }\n+\n+    public void setUsageUnit(String usageUnit) {\n+        this.usageUnit = usageUnit;\n+    }\n+\n+    public String getUsageDiscriminator() {\n+        return usageDiscriminator;\n+    }\n+\n+    public void setUsageDiscriminator(String usageDiscriminator) {\n+        this.usageDiscriminator = usageDiscriminator;\n+    }\n+\n+    public BigDecimal getTariffValue() {\n+        return tariffValue;\n+    }\n+\n+    public void setTariffValue(BigDecimal tariffValue) {\n+        this.tariffValue = tariffValue;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n+    public Date getEffectiveOn() {\n+        return effectiveOn;\n+    }\n+\n+    public void setEffectiveOn(Date effectiveOn) {\n+        this.effectiveOn = effectiveOn;\n+    }\n+\n+    public String getCurrency() {\n+        return currency;\n+    }\n+\n+    public void setCurrency(String currency) {\n+        this.currency = currency;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaTariffResponse.java",
                "sha": "48697fd2a822924e398bb80ff6c360f0e9198357",
                "status": "added"
            },
            {
                "additions": 58,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaTypeResponse.java",
                "changes": 58,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaTypeResponse.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaTypeResponse.java",
                "patch": "@@ -0,0 +1,58 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.api.response;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.BaseResponse;\n+\n+import com.cloud.serializer.Param;\n+\n+public class QuotaTypeResponse extends BaseResponse {\n+\n+    @SerializedName(\"quotatypeid\")\n+    @Param(description = \"quota type\")\n+    private Integer quotaType;\n+\n+    @SerializedName(ApiConstants.DESCRIPTION)\n+    @Param(description = \"description of usage type\")\n+    private String description;\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n+    public Integer getQuotaType() {\n+        return quotaType;\n+    }\n+\n+    public void setQuotaType(Integer quotaType) {\n+        this.quotaType = quotaType;\n+    }\n+\n+    public QuotaTypeResponse(Integer quotaType, String description) {\n+        this.quotaType = quotaType;\n+        this.description = description;\n+        setObjectName(ApiConstants.USAGE_TYPE);\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaTypeResponse.java",
                "sha": "989fba54e7f20a34af661b650e9f5ff706b5af44",
                "status": "added"
            },
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaUpdateResponse.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaUpdateResponse.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaUpdateResponse.java",
                "patch": "@@ -0,0 +1,38 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.api.response;\n+\n+import com.cloud.serializer.Param;\n+import com.google.gson.annotations.SerializedName;\n+\n+import org.apache.cloudstack.api.BaseResponse;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+\n+public class QuotaUpdateResponse extends BaseResponse {\n+\n+    @SerializedName(\"updated_on\")\n+    @Param(description = \"timestamp when the run got over\")\n+    private Date updatedOn;\n+\n+    public QuotaUpdateResponse(Calendar now) {\n+        super();\n+        updatedOn=now.getTime();\n+    }\n+\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaUpdateResponse.java",
                "sha": "e98da9b0004e8663ae6255545ae3cef9a41591cc",
                "status": "added"
            },
            {
                "additions": 39,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/quota/QuotaService.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/src/org/apache/cloudstack/quota/QuotaService.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/src/org/apache/cloudstack/quota/QuotaService.java",
                "patch": "@@ -0,0 +1,39 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.quota;\n+\n+import com.cloud.utils.component.PluggableService;\n+\n+import org.apache.cloudstack.quota.vo.QuotaBalanceVO;\n+import org.apache.cloudstack.quota.vo.QuotaUsageVO;\n+\n+import java.util.Date;\n+import java.util.List;\n+\n+public interface QuotaService extends PluggableService {\n+\n+    List<QuotaUsageVO> getQuotaUsage(Long accountId, String accountName, Long domainId, Integer usageType, Date startDate, Date endDate);\n+\n+    List<QuotaBalanceVO> findQuotaBalanceVO(Long accountId, String accountName, Long domainId, Date startDate, Date endDate);\n+\n+    Date computeAdjustedTime(Date date);\n+\n+    void setLockAccount(Long accountId, Boolean state);\n+\n+    void setMinBalance(Long accountId, Double balance);\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/quota/QuotaService.java",
                "sha": "8ee39b878aff037a85722629a958c07b7073262d",
                "status": "added"
            },
            {
                "additions": 299,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/quota/QuotaServiceImpl.java",
                "changes": 299,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/src/org/apache/cloudstack/quota/QuotaServiceImpl.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/src/org/apache/cloudstack/quota/QuotaServiceImpl.java",
                "patch": "@@ -0,0 +1,299 @@\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+//\n+//http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+package org.apache.cloudstack.quota;\n+\n+import com.cloud.configuration.Config;\n+import com.cloud.domain.dao.DomainDao;\n+import com.cloud.exception.InvalidParameterValueException;\n+import com.cloud.exception.PermissionDeniedException;\n+import com.cloud.user.Account;\n+import com.cloud.user.AccountVO;\n+import com.cloud.user.dao.AccountDao;\n+import com.cloud.utils.component.ManagerBase;\n+import com.cloud.utils.db.Filter;\n+\n+import org.apache.cloudstack.api.command.QuotaBalanceCmd;\n+import org.apache.cloudstack.api.command.QuotaCreditsCmd;\n+import org.apache.cloudstack.api.command.QuotaEmailTemplateUpdateCmd;\n+import org.apache.cloudstack.api.command.QuotaEmailTemplateListCmd;\n+import org.apache.cloudstack.api.command.QuotaStatementCmd;\n+import org.apache.cloudstack.api.command.QuotaSummaryCmd;\n+import org.apache.cloudstack.api.command.QuotaTariffListCmd;\n+import org.apache.cloudstack.api.command.QuotaTariffUpdateCmd;\n+import org.apache.cloudstack.api.command.QuotaUpdateCmd;\n+import org.apache.cloudstack.api.response.QuotaResponseBuilder;\n+import org.apache.cloudstack.context.CallContext;\n+import org.apache.cloudstack.framework.config.ConfigKey;\n+import org.apache.cloudstack.framework.config.Configurable;\n+import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n+import org.apache.cloudstack.quota.constant.QuotaConfig;\n+import org.apache.cloudstack.quota.dao.QuotaAccountDao;\n+import org.apache.cloudstack.quota.dao.QuotaBalanceDao;\n+import org.apache.cloudstack.quota.dao.QuotaUsageDao;\n+import org.apache.cloudstack.quota.vo.QuotaAccountVO;\n+import org.apache.cloudstack.quota.vo.QuotaBalanceVO;\n+import org.apache.cloudstack.quota.vo.QuotaUsageVO;\n+import org.apache.cloudstack.utils.usage.UsageUtils;\n+import org.apache.log4j.Logger;\n+import org.springframework.stereotype.Component;\n+\n+import javax.ejb.Local;\n+import javax.inject.Inject;\n+import javax.naming.ConfigurationException;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TimeZone;\n+\n+@Component\n+@Local(value = QuotaService.class)\n+public class QuotaServiceImpl extends ManagerBase implements QuotaService, Configurable, QuotaConfig {\n+    private static final Logger s_logger = Logger.getLogger(QuotaServiceImpl.class);\n+\n+    @Inject\n+    private AccountDao _accountDao;\n+    @Inject\n+    private QuotaAccountDao _quotaAcc;\n+    @Inject\n+    private QuotaUsageDao _quotaUsageDao;\n+    @Inject\n+    private DomainDao _domainDao;\n+    @Inject\n+    private ConfigurationDao _configDao;\n+    @Inject\n+    private QuotaBalanceDao _quotaBalanceDao;\n+    @Inject\n+    private QuotaResponseBuilder _respBldr;\n+\n+    private TimeZone _usageTimezone;\n+    private int _aggregationDuration = 0;\n+\n+    public QuotaServiceImpl() {\n+        super();\n+    }\n+\n+    @Override\n+    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n+        super.configure(name, params);\n+        String timeZoneStr = _configDao.getValue(Config.UsageAggregationTimezone.toString());\n+        String aggregationRange = _configDao.getValue(Config.UsageStatsJobAggregationRange.toString());\n+        if (timeZoneStr == null) {\n+            timeZoneStr = \"GMT\";\n+        }\n+        _usageTimezone = TimeZone.getTimeZone(timeZoneStr);\n+\n+        _aggregationDuration = Integer.parseInt(aggregationRange);\n+        if (_aggregationDuration < UsageUtils.USAGE_AGGREGATION_RANGE_MIN) {\n+            s_logger.warn(\"Usage stats job aggregation range is to small, using the minimum value of \" + UsageUtils.USAGE_AGGREGATION_RANGE_MIN);\n+            _aggregationDuration = UsageUtils.USAGE_AGGREGATION_RANGE_MIN;\n+        }\n+        if (s_logger.isDebugEnabled()) {\n+            s_logger.debug(\"Usage timezone = \" + _usageTimezone + \" AggregationDuration=\" + _aggregationDuration);\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public List<Class<?>> getCommands() {\n+        final List<Class<?>> cmdList = new ArrayList<Class<?>>();\n+        if (!isQuotaServiceEnabled()) {\n+            return cmdList;\n+        }\n+        cmdList.add(QuotaStatementCmd.class);\n+        cmdList.add(QuotaBalanceCmd.class);\n+        cmdList.add(QuotaSummaryCmd.class);\n+        cmdList.add(QuotaUpdateCmd.class);\n+        cmdList.add(QuotaTariffListCmd.class);\n+        cmdList.add(QuotaTariffUpdateCmd.class);\n+        cmdList.add(QuotaCreditsCmd.class);\n+        cmdList.add(QuotaEmailTemplateListCmd.class);\n+        cmdList.add(QuotaEmailTemplateUpdateCmd.class);\n+        return cmdList;\n+    }\n+\n+    @Override\n+    public String getConfigComponentName() {\n+        return \"QUOTA-PLUGIN\";\n+    }\n+\n+    @Override\n+    public ConfigKey<?>[] getConfigKeys() {\n+        return new ConfigKey<?>[] { QuotaPluginEnabled, QuotaEnableEnforcement, QuotaCurrencySymbol, QuotaStatementPeriod, QuotaSmtpHost, QuotaSmtpPort, QuotaSmtpTimeout, QuotaSmtpUser, QuotaSmtpPassword,\n+                QuotaSmtpAuthType, QuotaSmtpSender };\n+    }\n+\n+    public Boolean isQuotaServiceEnabled() {\n+        return QuotaPluginEnabled.value();\n+    }\n+\n+    @Override\n+    public List<QuotaBalanceVO> findQuotaBalanceVO(Long accountId, String accountName, Long domainId, Date startDate, Date endDate) {\n+        if ((accountId == null) && (accountName != null) && (domainId != null)) {\n+            Account userAccount = null;\n+            Account caller = CallContext.current().getCallingAccount();\n+            if (_domainDao.isChildDomain(caller.getDomainId(), domainId)) {\n+                Filter filter = new Filter(AccountVO.class, \"id\", Boolean.FALSE, null, null);\n+                List<AccountVO> accounts = _accountDao.listAccounts(accountName, domainId, filter);\n+                if (!accounts.isEmpty()) {\n+                    userAccount = accounts.get(0);\n+                }\n+                if (userAccount != null) {\n+                    accountId = userAccount.getId();\n+                } else {\n+                    throw new InvalidParameterValueException(\"Unable to find account \" + accountName + \" in domain \" + domainId);\n+                }\n+            } else {\n+                throw new PermissionDeniedException(\"Invalid Domain Id or Account\");\n+            }\n+        }\n+\n+        startDate = startDate == null ? new Date() : startDate;\n+\n+        if (endDate == null) {\n+            // adjust start date to end of day as there is no end date\n+            Date adjustedStartDate = computeAdjustedTime(_respBldr.startOfNextDay(startDate));\n+            if (s_logger.isDebugEnabled()) {\n+                s_logger.debug(\"getQuotaBalance1: Getting quota balance records for account: \" + accountId + \", domainId: \" + domainId + \", on or before \" + adjustedStartDate);\n+            }\n+            List<QuotaBalanceVO> qbrecords = _quotaBalanceDao.lastQuotaBalanceVO(accountId, domainId, adjustedStartDate);\n+            if (s_logger.isDebugEnabled()) {\n+                s_logger.debug(\"Found records size=\" + qbrecords.size());\n+            }\n+            if (qbrecords.isEmpty()) {\n+                s_logger.info(\"Incorrect Date there are no quota records before this date \" + adjustedStartDate);\n+                return qbrecords;\n+            } else {\n+                return qbrecords;\n+            }\n+        } else {\n+            Date adjustedStartDate = computeAdjustedTime(startDate);\n+            if (endDate.after(_respBldr.startOfNextDay())) {\n+                throw new InvalidParameterValueException(\"Incorrect Date Range. End date:\" + endDate + \" should not be in future. \");\n+            } else if (startDate.before(endDate)) {\n+                Date adjustedEndDate = computeAdjustedTime(endDate);\n+                if (s_logger.isDebugEnabled()) {\n+                    s_logger.debug(\"getQuotaBalance2: Getting quota balance records for account: \" + accountId + \", domainId: \" + domainId + \", between \" + adjustedStartDate + \" and \"\n+                            + adjustedEndDate);\n+                }\n+                List<QuotaBalanceVO> qbrecords = _quotaBalanceDao.findQuotaBalance(accountId, domainId, adjustedStartDate, adjustedEndDate);\n+                if (s_logger.isDebugEnabled()) {\n+                    s_logger.debug(\"getQuotaBalance3: Found records size=\" + qbrecords.size());\n+                }\n+                if (qbrecords.isEmpty()) {\n+                    s_logger.info(\"There are no quota records between these dates start date \" + adjustedStartDate + \" and end date:\" + endDate);\n+                    return qbrecords;\n+                } else {\n+                    return qbrecords;\n+                }\n+            } else {\n+                throw new InvalidParameterValueException(\"Incorrect Date Range. Start date: \" + startDate + \" is after end date:\" + endDate);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public List<QuotaUsageVO> getQuotaUsage(Long accountId, String accountName, Long domainId, Integer usageType, Date startDate, Date endDate) {\n+        // if accountId is not specified, use accountName and domainId\n+        if ((accountId == null) && (accountName != null) && (domainId != null)) {\n+            Account userAccount = null;\n+            Account caller = CallContext.current().getCallingAccount();\n+            if (_domainDao.isChildDomain(caller.getDomainId(), domainId)) {\n+                Filter filter = new Filter(AccountVO.class, \"id\", Boolean.FALSE, null, null);\n+                List<AccountVO> accounts = _accountDao.listAccounts(accountName, domainId, filter);\n+                if (!accounts.isEmpty()) {\n+                    userAccount = accounts.get(0);\n+                }\n+                if (userAccount != null) {\n+                    accountId = userAccount.getId();\n+                } else {\n+                    throw new InvalidParameterValueException(\"Unable to find account \" + accountName + \" in domain \" + domainId);\n+                }\n+            } else {\n+                throw new PermissionDeniedException(\"Invalid Domain Id or Account\");\n+            }\n+        }\n+\n+        if (startDate.after(endDate)) {\n+            throw new InvalidParameterValueException(\"Incorrect Date Range. Start date: \" + startDate + \" is after end date:\" + endDate);\n+        }\n+        if (endDate.after(_respBldr.startOfNextDay())) {\n+            throw new InvalidParameterValueException(\"Incorrect Date Range. End date:\" + endDate + \" should not be in future. \");\n+        }\n+        Date adjustedEndDate = computeAdjustedTime(endDate);\n+        Date adjustedStartDate = computeAdjustedTime(startDate);\n+        if (s_logger.isDebugEnabled()) {\n+            s_logger.debug(\"Getting quota records for account: \" + accountId + \", domainId: \" + domainId + \", between \" + startDate + \" and \" + endDate);\n+        }\n+        return _quotaUsageDao.findQuotaUsage(accountId, domainId, usageType, adjustedStartDate, adjustedEndDate);\n+    }\n+\n+    @Override\n+    public Date computeAdjustedTime(final Date date) {\n+        Calendar cal = Calendar.getInstance();\n+        cal.setTime(date);\n+        TimeZone localTZ = cal.getTimeZone();\n+        int timezoneOffset = cal.get(Calendar.ZONE_OFFSET);\n+        if (localTZ.inDaylightTime(date)) {\n+            timezoneOffset += (60 * 60 * 1000);\n+        }\n+        cal.add(Calendar.MILLISECOND, timezoneOffset);\n+\n+        Date newTime = cal.getTime();\n+\n+        Calendar calTS = Calendar.getInstance(_usageTimezone);\n+        calTS.setTime(newTime);\n+        timezoneOffset = calTS.get(Calendar.ZONE_OFFSET);\n+        if (_usageTimezone.inDaylightTime(date)) {\n+            timezoneOffset += (60 * 60 * 1000);\n+        }\n+\n+        calTS.add(Calendar.MILLISECOND, -1 * timezoneOffset);\n+\n+        return calTS.getTime();\n+    }\n+\n+    @Override\n+    public void setLockAccount(Long accountId, Boolean state) {\n+        QuotaAccountVO acc = _quotaAcc.findByIdQuotaAccount(accountId);\n+        if (acc == null) {\n+            acc = new QuotaAccountVO(accountId);\n+            acc.setQuotaEnforce(state ? 1 : 0);\n+            _quotaAcc.persistQuotaAccount(acc);\n+        } else {\n+            acc.setQuotaEnforce(state ? 1 : 0);\n+            _quotaAcc.updateQuotaAccount(accountId, acc);\n+        }\n+    }\n+\n+    @Override\n+    public void setMinBalance(Long accountId, Double balance) {\n+        QuotaAccountVO acc = _quotaAcc.findByIdQuotaAccount(accountId);\n+        if (acc == null) {\n+            acc = new QuotaAccountVO(accountId);\n+            acc.setQuotaMinBalance(new BigDecimal(balance));\n+            _quotaAcc.persistQuotaAccount(acc);\n+        } else {\n+            acc.setQuotaMinBalance(new BigDecimal(balance));\n+            _quotaAcc.updateQuotaAccount(accountId, acc);\n+        }\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/src/org/apache/cloudstack/quota/QuotaServiceImpl.java",
                "sha": "1b4c98f6997a3e0f72117e30ef9e3e71c8d779ca",
                "status": "added"
            },
            {
                "additions": 65,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/test/org/apache/cloudstack/api/command/QuotaBalanceCmdTest.java",
                "changes": 65,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/test/org/apache/cloudstack/api/command/QuotaBalanceCmdTest.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/test/org/apache/cloudstack/api/command/QuotaBalanceCmdTest.java",
                "patch": "@@ -0,0 +1,65 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.api.command;\n+\n+import junit.framework.TestCase;\n+import org.apache.cloudstack.api.response.QuotaBalanceResponse;\n+import org.apache.cloudstack.api.response.QuotaResponseBuilder;\n+import org.apache.cloudstack.quota.vo.QuotaBalanceVO;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class QuotaBalanceCmdTest extends TestCase {\n+\n+    @Mock\n+    QuotaResponseBuilder responseBuilder;\n+\n+    @Test\n+    public void testQuotaBalanceCmd() throws NoSuchFieldException, IllegalAccessException {\n+        QuotaBalanceCmd cmd = new QuotaBalanceCmd();\n+        Field rbField = QuotaBalanceCmd.class.getDeclaredField(\"_responseBuilder\");\n+        rbField.setAccessible(true);\n+        rbField.set(cmd, responseBuilder);\n+\n+        List<QuotaBalanceVO> quotaBalanceVOList = new ArrayList<QuotaBalanceVO>();\n+        Mockito.when(responseBuilder.getQuotaBalance(Mockito.any(cmd.getClass()))).thenReturn(quotaBalanceVOList);\n+        Mockito.when(responseBuilder.createQuotaLastBalanceResponse(Mockito.eq(quotaBalanceVOList), Mockito.any(Date.class))).thenReturn(new QuotaBalanceResponse());\n+        Mockito.when(responseBuilder.createQuotaBalanceResponse(Mockito.eq(quotaBalanceVOList), Mockito.any(Date.class), Mockito.any(Date.class))).thenReturn(new QuotaBalanceResponse());\n+        Mockito.when(responseBuilder.startOfNextDay(Mockito.any(Date.class))).thenReturn(new Date());\n+\n+        // end date not specified\n+        cmd.setStartDate(new Date());\n+        cmd.setEndDate(null);\n+        cmd.execute();\n+        Mockito.verify(responseBuilder, Mockito.times(1)).createQuotaLastBalanceResponse(Mockito.eq(quotaBalanceVOList), Mockito.any(Date.class));\n+        Mockito.verify(responseBuilder, Mockito.times(0)).createQuotaBalanceResponse(Mockito.eq(quotaBalanceVOList), Mockito.any(Date.class), Mockito.any(Date.class));\n+\n+        // end date specified\n+        cmd.setEndDate(new Date());\n+        cmd.execute();\n+        Mockito.verify(responseBuilder, Mockito.times(1)).createQuotaBalanceResponse(Mockito.eq(quotaBalanceVOList), Mockito.any(Date.class), Mockito.any(Date.class));\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/test/org/apache/cloudstack/api/command/QuotaBalanceCmdTest.java",
                "sha": "4369a8c9f0cd9f32d696c8adae37635a9c32271d",
                "status": "added"
            },
            {
                "additions": 87,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/test/org/apache/cloudstack/api/command/QuotaCreditsCmdTest.java",
                "changes": 87,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/test/org/apache/cloudstack/api/command/QuotaCreditsCmdTest.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/test/org/apache/cloudstack/api/command/QuotaCreditsCmdTest.java",
                "patch": "@@ -0,0 +1,87 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.api.command;\n+\n+import com.cloud.user.AccountService;\n+import com.cloud.user.AccountVO;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.cloudstack.api.ApiErrorCode;\n+import org.apache.cloudstack.api.BaseCmd;\n+import org.apache.cloudstack.api.ServerApiException;\n+import org.apache.cloudstack.api.response.QuotaCreditsResponse;\n+import org.apache.cloudstack.api.response.QuotaResponseBuilder;\n+import org.apache.cloudstack.quota.QuotaService;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import java.lang.reflect.Field;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class QuotaCreditsCmdTest extends TestCase {\n+    @Mock\n+    QuotaResponseBuilder responseBuilder;\n+    @Mock\n+    QuotaService quotaService;\n+    @Mock\n+    AccountService accountService;\n+\n+    @Test\n+    public void testQuotaCreditsCmd() throws NoSuchFieldException, IllegalAccessException {\n+        QuotaCreditsCmd cmd = new QuotaCreditsCmd();\n+        cmd.setAccountName(\"admin\");\n+        cmd.setMinBalance(200.0);\n+\n+        Field rbField = QuotaCreditsCmd.class.getDeclaredField(\"_responseBuilder\");\n+        rbField.setAccessible(true);\n+        rbField.set(cmd, responseBuilder);\n+\n+        Field qsbField = QuotaCreditsCmd.class.getDeclaredField(\"_quotaService\");\n+        qsbField.setAccessible(true);\n+        qsbField.set(cmd, quotaService);\n+\n+        Field asField = BaseCmd.class.getDeclaredField(\"_accountService\");\n+        asField.setAccessible(true);\n+        asField.set(cmd, accountService);\n+\n+        AccountVO acc = new AccountVO();\n+        acc.setId(2L);\n+        Mockito.when(accountService.getActiveAccountByName(Mockito.anyString(), Mockito.anyLong())).thenReturn(acc);\n+        Mockito.when(responseBuilder.addQuotaCredits(Mockito.anyLong(), Mockito.anyLong(), Mockito.anyDouble(), Mockito.anyLong())).thenReturn(new QuotaCreditsResponse());\n+\n+        // No value provided test\n+        try {\n+            cmd.execute();\n+        } catch (ServerApiException e) {\n+            assertTrue(e.getErrorCode().equals(ApiErrorCode.PARAM_ERROR));\n+        }\n+\n+        // With value provided test\n+        cmd.setValue(11.80);\n+        cmd.execute();\n+        Mockito.verify(quotaService, Mockito.times(0)).setLockAccount(Mockito.anyLong(), Mockito.anyBoolean());\n+        Mockito.verify(quotaService, Mockito.times(1)).setMinBalance(Mockito.anyLong(), Mockito.anyDouble());\n+        Mockito.verify(responseBuilder, Mockito.times(1)).addQuotaCredits(Mockito.anyLong(), Mockito.anyLong(), Mockito.anyDouble(), Mockito.anyLong());\n+\n+\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/test/org/apache/cloudstack/api/command/QuotaCreditsCmdTest.java",
                "sha": "f4d16b7b68ea6f99d632834d8b1e9fe744d04526",
                "status": "added"
            },
            {
                "additions": 50,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/test/org/apache/cloudstack/api/command/QuotaEmailTemplateListCmdTest.java",
                "changes": 50,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/test/org/apache/cloudstack/api/command/QuotaEmailTemplateListCmdTest.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/test/org/apache/cloudstack/api/command/QuotaEmailTemplateListCmdTest.java",
                "patch": "@@ -0,0 +1,50 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.api.command;\n+\n+import junit.framework.TestCase;\n+import org.apache.cloudstack.api.response.QuotaEmailTemplateResponse;\n+import org.apache.cloudstack.api.response.QuotaResponseBuilder;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class QuotaEmailTemplateListCmdTest extends TestCase {\n+\n+    @Mock\n+    QuotaResponseBuilder responseBuilder;\n+\n+    @Test\n+    public void testQuotaEmailTemplateListCmd() throws NoSuchFieldException, IllegalAccessException {\n+        QuotaEmailTemplateListCmd cmd = new QuotaEmailTemplateListCmd();\n+        Field rbField = QuotaEmailTemplateListCmd.class.getDeclaredField(\"_quotaResponseBuilder\");\n+        rbField.setAccessible(true);\n+        rbField.set(cmd, responseBuilder);\n+\n+        List<QuotaEmailTemplateResponse> responses = new ArrayList<QuotaEmailTemplateResponse>();\n+        Mockito.when(responseBuilder.listQuotaEmailTemplates(Mockito.eq(cmd))).thenReturn(responses);\n+        cmd.execute();\n+        Mockito.verify(responseBuilder, Mockito.times(1)).listQuotaEmailTemplates(cmd);\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/test/org/apache/cloudstack/api/command/QuotaEmailTemplateListCmdTest.java",
                "sha": "aecee6ba84c89f026f074a1d0d568edfdf33fdf3",
                "status": "added"
            },
            {
                "additions": 68,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/test/org/apache/cloudstack/api/command/QuotaEmailTemplateUpdateCmdTest.java",
                "changes": 68,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/test/org/apache/cloudstack/api/command/QuotaEmailTemplateUpdateCmdTest.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/test/org/apache/cloudstack/api/command/QuotaEmailTemplateUpdateCmdTest.java",
                "patch": "@@ -0,0 +1,68 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.api.command;\n+\n+import junit.framework.TestCase;\n+import org.apache.cloudstack.api.ApiErrorCode;\n+import org.apache.cloudstack.api.ServerApiException;\n+import org.apache.cloudstack.api.response.QuotaResponseBuilder;\n+import org.apache.cloudstack.quota.constant.QuotaConfig;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import java.lang.reflect.Field;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class QuotaEmailTemplateUpdateCmdTest extends TestCase {\n+    @Mock\n+    QuotaResponseBuilder responseBuilder;\n+\n+    @Test\n+    public void testQuotaEmailTemplateUpdateCmd () throws NoSuchFieldException, IllegalAccessException {\n+        QuotaEmailTemplateUpdateCmd cmd = new QuotaEmailTemplateUpdateCmd();\n+\n+        Field rbField = QuotaEmailTemplateUpdateCmd.class.getDeclaredField(\"_quotaResponseBuilder\");\n+        rbField.setAccessible(true);\n+        rbField.set(cmd, responseBuilder);\n+\n+        // templatename parameter check\n+        try {\n+            cmd.execute();\n+        } catch (ServerApiException e) {\n+            assertTrue(e.getErrorCode().equals(ApiErrorCode.PARAM_ERROR));\n+        }\n+\n+        // invalid template name test\n+        cmd.setTemplateName(\"randomTemplate\");\n+        cmd.setTemplateBody(\"some body\");\n+        cmd.setTemplateSubject(\"some subject\");\n+        try {\n+            cmd.execute();\n+        } catch (ServerApiException e) {\n+            assertTrue(e.getErrorCode().equals(ApiErrorCode.PARAM_ERROR));\n+        }\n+\n+        // valid template test\n+        cmd.setTemplateName(QuotaConfig.QuotaEmailTemplateTypes.QUOTA_EMPTY.toString());\n+        Mockito.when(responseBuilder.updateQuotaEmailTemplate(Mockito.eq(cmd))).thenReturn(true);\n+        cmd.execute();\n+        Mockito.verify(responseBuilder, Mockito.times(1)).updateQuotaEmailTemplate(Mockito.eq(cmd));\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/test/org/apache/cloudstack/api/command/QuotaEmailTemplateUpdateCmdTest.java",
                "sha": "a357a181c38c5dcf4740dfe6ce474864e3a3fa98",
                "status": "added"
            },
            {
                "additions": 53,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/test/org/apache/cloudstack/api/command/QuotaStatementCmdTest.java",
                "changes": 53,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/test/org/apache/cloudstack/api/command/QuotaStatementCmdTest.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/test/org/apache/cloudstack/api/command/QuotaStatementCmdTest.java",
                "patch": "@@ -0,0 +1,53 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.api.command;\n+\n+import junit.framework.TestCase;\n+import org.apache.cloudstack.api.response.QuotaResponseBuilder;\n+import org.apache.cloudstack.api.response.QuotaStatementResponse;\n+import org.apache.cloudstack.quota.vo.QuotaUsageVO;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class QuotaStatementCmdTest extends TestCase {\n+    @Mock\n+    QuotaResponseBuilder responseBuilder;\n+\n+    @Test\n+    public void testQuotaStatementCmd() throws NoSuchFieldException, IllegalAccessException {\n+        QuotaStatementCmd cmd = new QuotaStatementCmd();\n+        cmd.setAccountName(\"admin\");\n+\n+        Field rbField = QuotaStatementCmd.class.getDeclaredField(\"_responseBuilder\");\n+        rbField.setAccessible(true);\n+        rbField.set(cmd, responseBuilder);\n+\n+        List<QuotaUsageVO> quotaUsageVOList = new ArrayList<QuotaUsageVO>();\n+        Mockito.when(responseBuilder.getQuotaUsage(Mockito.eq(cmd))).thenReturn(quotaUsageVOList);\n+        Mockito.when(responseBuilder.createQuotaStatementResponse(Mockito.eq(quotaUsageVOList))).thenReturn(new QuotaStatementResponse());\n+        cmd.execute();\n+        Mockito.verify(responseBuilder, Mockito.times(1)).getQuotaUsage(Mockito.eq(cmd));\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/test/org/apache/cloudstack/api/command/QuotaStatementCmdTest.java",
                "sha": "0492ae84b8df6827d08062f59055c9601c244853",
                "status": "added"
            },
            {
                "additions": 62,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/test/org/apache/cloudstack/api/command/QuotaTariffListCmdTest.java",
                "changes": 62,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/test/org/apache/cloudstack/api/command/QuotaTariffListCmdTest.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/test/org/apache/cloudstack/api/command/QuotaTariffListCmdTest.java",
                "patch": "@@ -0,0 +1,62 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.api.command;\n+\n+import junit.framework.TestCase;\n+import org.apache.cloudstack.api.response.QuotaResponseBuilder;\n+import org.apache.cloudstack.api.response.QuotaTariffResponse;\n+import org.apache.cloudstack.quota.constant.QuotaTypes;\n+import org.apache.cloudstack.quota.vo.QuotaTariffVO;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import java.lang.reflect.Field;\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class QuotaTariffListCmdTest extends TestCase {\n+    @Mock\n+    QuotaResponseBuilder responseBuilder;\n+\n+    @Test\n+    public void testQuotaTariffListCmd() throws NoSuchFieldException, IllegalAccessException {\n+        QuotaTariffListCmd cmd = new QuotaTariffListCmd();\n+\n+        Field rbField = QuotaTariffListCmd.class.getDeclaredField(\"_responseBuilder\");\n+        rbField.setAccessible(true);\n+        rbField.set(cmd, responseBuilder);\n+\n+        List<QuotaTariffVO> quotaTariffVOList = new ArrayList<QuotaTariffVO>();\n+        QuotaTariffVO tariff = new QuotaTariffVO();\n+        tariff.setEffectiveOn(new Date());\n+        tariff.setCurrencyValue(new BigDecimal(100));\n+        tariff.setUsageType(QuotaTypes.MEMORY);\n+\n+        quotaTariffVOList.add(new QuotaTariffVO());\n+        Mockito.when(responseBuilder.listQuotaTariffPlans(Mockito.eq(cmd))).thenReturn(quotaTariffVOList);\n+        Mockito.when(responseBuilder.createQuotaTariffResponse(Mockito.any(QuotaTariffVO.class))).thenReturn(new QuotaTariffResponse());\n+\n+        cmd.execute();\n+        Mockito.verify(responseBuilder, Mockito.times(1)).createQuotaTariffResponse(Mockito.any(QuotaTariffVO.class));\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/test/org/apache/cloudstack/api/command/QuotaTariffListCmdTest.java",
                "sha": "5781103f0275865a0cc2046df32163d9ea06a0a6",
                "status": "added"
            },
            {
                "additions": 67,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/test/org/apache/cloudstack/api/command/QuotaTariffUpdateCmdTest.java",
                "changes": 67,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/test/org/apache/cloudstack/api/command/QuotaTariffUpdateCmdTest.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/test/org/apache/cloudstack/api/command/QuotaTariffUpdateCmdTest.java",
                "patch": "@@ -0,0 +1,67 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.api.command;\n+\n+import junit.framework.TestCase;\n+import org.apache.cloudstack.api.ApiErrorCode;\n+import org.apache.cloudstack.api.ServerApiException;\n+import org.apache.cloudstack.api.response.QuotaResponseBuilder;\n+import org.apache.cloudstack.api.response.QuotaTariffResponse;\n+import org.apache.cloudstack.quota.constant.QuotaTypes;\n+import org.apache.cloudstack.quota.vo.QuotaTariffVO;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import java.lang.reflect.Field;\n+import java.math.BigDecimal;\n+import java.util.Date;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class QuotaTariffUpdateCmdTest extends TestCase {\n+\n+    @Mock\n+    QuotaResponseBuilder responseBuilder;\n+\n+    @Test\n+    public void testQuotaTariffUpdateCmd() throws NoSuchFieldException, IllegalAccessException {\n+        QuotaTariffUpdateCmd cmd = new QuotaTariffUpdateCmd();\n+\n+        Field rbField = QuotaTariffUpdateCmd.class.getDeclaredField(\"_responseBuilder\");\n+        rbField.setAccessible(true);\n+        rbField.set(cmd, responseBuilder);\n+\n+        QuotaTariffVO tariff = new QuotaTariffVO();\n+        tariff.setEffectiveOn(new Date());\n+        tariff.setCurrencyValue(new BigDecimal(100));\n+        tariff.setUsageType(QuotaTypes.MEMORY);\n+\n+        Mockito.when(responseBuilder.updateQuotaTariffPlan(Mockito.eq(cmd))).thenReturn(null);\n+        try {\n+            cmd.execute();\n+        } catch (ServerApiException e) {\n+            assertTrue(e.getErrorCode().equals(ApiErrorCode.INTERNAL_ERROR));\n+        }\n+\n+        Mockito.when(responseBuilder.updateQuotaTariffPlan(Mockito.eq(cmd))).thenReturn(tariff);\n+        Mockito.when(responseBuilder.createQuotaTariffResponse(Mockito.eq(tariff))).thenReturn(new QuotaTariffResponse());\n+        cmd.execute();\n+        Mockito.verify(responseBuilder, Mockito.times(1)).createQuotaTariffResponse(Mockito.eq(tariff));\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/test/org/apache/cloudstack/api/command/QuotaTariffUpdateCmdTest.java",
                "sha": "dc50af1c28dd7d72aea76253df517f2c7cc4e642",
                "status": "added"
            },
            {
                "additions": 228,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/test/org/apache/cloudstack/api/response/QuotaResponseBuilderImplTest.java",
                "changes": 228,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/test/org/apache/cloudstack/api/response/QuotaResponseBuilderImplTest.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/test/org/apache/cloudstack/api/response/QuotaResponseBuilderImplTest.java",
                "patch": "@@ -0,0 +1,228 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.api.response;\n+\n+import com.cloud.exception.InvalidParameterValueException;\n+import com.cloud.user.Account;\n+import com.cloud.user.AccountVO;\n+import com.cloud.user.dao.AccountDao;\n+import com.cloud.user.dao.UserDao;\n+import com.cloud.utils.db.TransactionLegacy;\n+import junit.framework.TestCase;\n+import org.apache.cloudstack.api.command.QuotaEmailTemplateListCmd;\n+import org.apache.cloudstack.api.command.QuotaEmailTemplateUpdateCmd;\n+import org.apache.cloudstack.quota.QuotaService;\n+import org.apache.cloudstack.quota.constant.QuotaTypes;\n+import org.apache.cloudstack.quota.dao.QuotaBalanceDao;\n+import org.apache.cloudstack.quota.dao.QuotaCreditsDao;\n+import org.apache.cloudstack.quota.dao.QuotaEmailTemplatesDao;\n+import org.apache.cloudstack.quota.dao.QuotaTariffDao;\n+import org.apache.cloudstack.quota.vo.QuotaBalanceVO;\n+import org.apache.cloudstack.quota.vo.QuotaCreditsVO;\n+import org.apache.cloudstack.quota.vo.QuotaEmailTemplatesVO;\n+import org.apache.cloudstack.quota.vo.QuotaTariffVO;\n+import org.apache.cloudstack.region.RegionManager;\n+import org.joda.time.DateTime;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import java.lang.reflect.Field;\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class QuotaResponseBuilderImplTest extends TestCase {\n+\n+    @Mock\n+    QuotaTariffDao quotaTariffDao;\n+    @Mock\n+    QuotaBalanceDao quotaBalanceDao;\n+    @Mock\n+    QuotaCreditsDao quotaCreditsDao;\n+    @Mock\n+    QuotaEmailTemplatesDao quotaEmailTemplateDao;\n+\n+    @Mock\n+    UserDao userDao;\n+    @Mock\n+    QuotaService quotaService;\n+    @Mock\n+    AccountDao accountDao;\n+    @Mock\n+    RegionManager regionMgr;\n+\n+    QuotaResponseBuilderImpl quotaResponseBuilder = new QuotaResponseBuilderImpl();\n+\n+    @Before\n+    public void setup() throws IllegalAccessException, NoSuchFieldException {\n+        // Dummy transaction stack setup\n+        TransactionLegacy.open(\"QuotaResponseBuilderImplTest\");\n+\n+        Field tariffDaoField = QuotaResponseBuilderImpl.class.getDeclaredField(\"_quotaTariffDao\");\n+        tariffDaoField.setAccessible(true);\n+        tariffDaoField.set(quotaResponseBuilder, quotaTariffDao);\n+\n+        Field balanceDaoField = QuotaResponseBuilderImpl.class.getDeclaredField(\"_quotaBalanceDao\");\n+        balanceDaoField.setAccessible(true);\n+        balanceDaoField.set(quotaResponseBuilder, quotaBalanceDao);\n+\n+        Field quotaCreditsDaoField = QuotaResponseBuilderImpl.class.getDeclaredField(\"_quotaCreditsDao\");\n+        quotaCreditsDaoField.setAccessible(true);\n+        quotaCreditsDaoField.set(quotaResponseBuilder, quotaCreditsDao);\n+\n+        Field quotaEmailTemplateDaoField = QuotaResponseBuilderImpl.class.getDeclaredField(\"_quotaEmailTemplateDao\");\n+        quotaEmailTemplateDaoField.setAccessible(true);\n+        quotaEmailTemplateDaoField.set(quotaResponseBuilder, quotaEmailTemplateDao);\n+\n+        Field userDaoField = QuotaResponseBuilderImpl.class.getDeclaredField(\"_userDao\");\n+        userDaoField.setAccessible(true);\n+        userDaoField.set(quotaResponseBuilder, userDao);\n+\n+        Field quotaServiceField = QuotaResponseBuilderImpl.class.getDeclaredField(\"_quotaService\");\n+        quotaServiceField.setAccessible(true);\n+        quotaServiceField.set(quotaResponseBuilder, quotaService);\n+\n+        Field accountDaoField = QuotaResponseBuilderImpl.class.getDeclaredField(\"_accountDao\");\n+        accountDaoField.setAccessible(true);\n+        accountDaoField.set(quotaResponseBuilder, accountDao);\n+\n+        Field regionMgrField = QuotaResponseBuilderImpl.class.getDeclaredField(\"_regionMgr\");\n+        regionMgrField.setAccessible(true);\n+        regionMgrField.set(quotaResponseBuilder, regionMgr);\n+    }\n+\n+    private QuotaTariffVO makeTariffTestData() {\n+        QuotaTariffVO tariffVO = new QuotaTariffVO();\n+        tariffVO.setUsageType(QuotaTypes.IP_ADDRESS);\n+        tariffVO.setUsageName(\"ip address\");\n+        tariffVO.setUsageUnit(\"IP-Month\");\n+        tariffVO.setCurrencyValue(new BigDecimal(100.19));\n+        tariffVO.setEffectiveOn(new Date());\n+        tariffVO.setUsageDiscriminator(\"\");\n+        return tariffVO;\n+    }\n+\n+    @Test\n+    public void testQuotaResponse() {\n+        QuotaTariffVO tariffVO = makeTariffTestData();\n+        QuotaTariffResponse response = quotaResponseBuilder.createQuotaTariffResponse(tariffVO);\n+        assertTrue(tariffVO.getUsageType() == response.getUsageType());\n+        assertTrue(tariffVO.getCurrencyValue().equals(response.getTariffValue()));\n+    }\n+\n+    @Test\n+    public void testAddQuotaCredits() {\n+        final long accountId = 2L;\n+        final long domainId = 2L;\n+        final double amount = 11.0;\n+        final long updatedBy = 2L;\n+        final Date now = new Date();\n+\n+        QuotaCreditsVO credit = new QuotaCreditsVO();\n+        credit.setCredit(new BigDecimal(amount));\n+\n+        Mockito.when(quotaCreditsDao.saveCredits(Mockito.any(QuotaCreditsVO.class))).thenReturn(credit);\n+        Mockito.when(quotaBalanceDao.lastQuotaBalance(Mockito.anyLong(), Mockito.anyLong(), Mockito.any(Date.class))).thenReturn(new BigDecimal(111));\n+\n+        AccountVO account = new AccountVO();\n+        account.setState(Account.State.locked);\n+        Mockito.when(accountDao.findById(Mockito.anyLong())).thenReturn(account);\n+\n+        QuotaCreditsResponse resp = quotaResponseBuilder.addQuotaCredits(accountId, domainId, amount, updatedBy, now);\n+        assertTrue(resp.getCredits().compareTo(credit.getCredit()) == 0);\n+    }\n+\n+    @Test\n+    public void testListQuotaEmailTemplates() {\n+        QuotaEmailTemplateListCmd cmd = new QuotaEmailTemplateListCmd();\n+        cmd.setTemplateName(\"some name\");\n+        List<QuotaEmailTemplatesVO> templates = new ArrayList<>();\n+        QuotaEmailTemplatesVO template = new QuotaEmailTemplatesVO();\n+        template.setTemplateName(\"template\");\n+        templates.add(template);\n+        Mockito.when(quotaEmailTemplateDao.listAllQuotaEmailTemplates(Mockito.anyString())).thenReturn(templates);\n+\n+        assertTrue(quotaResponseBuilder.listQuotaEmailTemplates(cmd).size() == 1);\n+    }\n+\n+    @Test\n+    public void testUpdateQuotaEmailTemplate() {\n+        QuotaEmailTemplateUpdateCmd cmd = new QuotaEmailTemplateUpdateCmd();\n+        cmd.setTemplateBody(\"some body\");\n+        cmd.setTemplateName(\"some name\");\n+        cmd.setTemplateSubject(\"some subject\");\n+\n+        List<QuotaEmailTemplatesVO> templates = new ArrayList<>();\n+\n+        Mockito.when(quotaEmailTemplateDao.listAllQuotaEmailTemplates(Mockito.anyString())).thenReturn(templates);\n+        Mockito.when(quotaEmailTemplateDao.updateQuotaEmailTemplate(Mockito.any(QuotaEmailTemplatesVO.class))).thenReturn(true);\n+\n+        // invalid template test\n+        assertFalse(quotaResponseBuilder.updateQuotaEmailTemplate(cmd));\n+\n+        // valid template test\n+        QuotaEmailTemplatesVO template = new QuotaEmailTemplatesVO();\n+        template.setTemplateName(\"template\");\n+        templates.add(template);\n+        assertTrue(quotaResponseBuilder.updateQuotaEmailTemplate(cmd));\n+    }\n+\n+    @Test\n+    public void testCreateQuotaLastBalanceResponse() {\n+        List<QuotaBalanceVO> quotaBalance = new ArrayList<>();\n+        // null balance test\n+        try {\n+            quotaResponseBuilder.createQuotaLastBalanceResponse(null, new Date());\n+        } catch (InvalidParameterValueException e) {\n+            assertTrue(e.getMessage().equals(\"There are no balance entries on or before the requested date.\"));\n+        }\n+\n+        // empty balance test\n+        try {\n+            quotaResponseBuilder.createQuotaLastBalanceResponse(quotaBalance, new Date());\n+        } catch (InvalidParameterValueException e) {\n+            assertTrue(e.getMessage().equals(\"There are no balance entries on or before the requested date.\"));\n+        }\n+\n+        // valid balance test\n+        QuotaBalanceVO entry = new QuotaBalanceVO();\n+        entry.setAccountId(2L);\n+        entry.setCreditBalance(new BigDecimal(100));\n+        quotaBalance.add(entry);\n+        quotaBalance.add(entry);\n+        Mockito.when(quotaService.computeAdjustedTime(Mockito.any(Date.class))).thenReturn(new Date());\n+        QuotaBalanceResponse resp = quotaResponseBuilder.createQuotaLastBalanceResponse(quotaBalance, null);\n+        assertTrue(resp.getStartQuota().compareTo(new BigDecimal(200)) == 0);\n+    }\n+\n+    @Test\n+    public void testStartOfNextDay() {\n+        DateTime now = new DateTime();\n+        DateTime nextDay = new DateTime(quotaResponseBuilder.startOfNextDay(now.toDate()));\n+        DateTime nextDay2 = new DateTime(quotaResponseBuilder.startOfNextDay());\n+        assertTrue(now.toLocalDate().equals(nextDay.minusDays(1).toLocalDate()));\n+        assertTrue(now.toLocalDate().equals(nextDay2.minusDays(1).toLocalDate()));\n+    }\n+\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/test/org/apache/cloudstack/api/response/QuotaResponseBuilderImplTest.java",
                "sha": "65aadd80dee0b33f29cacb3c76d9eb51cbee6f7b",
                "status": "added"
            },
            {
                "additions": 183,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/test/org/apache/cloudstack/quota/QuotaServiceImplTest.java",
                "changes": 183,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/test/org/apache/cloudstack/quota/QuotaServiceImplTest.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/database/quota/test/org/apache/cloudstack/quota/QuotaServiceImplTest.java",
                "patch": "@@ -0,0 +1,183 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.quota;\n+\n+import com.cloud.configuration.Config;\n+import com.cloud.domain.dao.DomainDao;\n+import com.cloud.user.dao.AccountDao;\n+import com.cloud.utils.db.TransactionLegacy;\n+import junit.framework.TestCase;\n+import org.apache.cloudstack.api.response.QuotaResponseBuilder;\n+import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n+import org.apache.cloudstack.quota.constant.QuotaTypes;\n+import org.apache.cloudstack.quota.dao.QuotaAccountDao;\n+import org.apache.cloudstack.quota.dao.QuotaBalanceDao;\n+import org.apache.cloudstack.quota.dao.QuotaUsageDao;\n+import org.apache.cloudstack.quota.vo.QuotaAccountVO;\n+import org.apache.cloudstack.quota.vo.QuotaBalanceVO;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import javax.naming.ConfigurationException;\n+import java.lang.reflect.Field;\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class QuotaServiceImplTest extends TestCase {\n+\n+    @Mock\n+    AccountDao accountDao;\n+    @Mock\n+    QuotaAccountDao quotaAcc;\n+    @Mock\n+    QuotaUsageDao quotaUsageDao;\n+    @Mock\n+    DomainDao domainDao;\n+    @Mock\n+    ConfigurationDao configDao;\n+    @Mock\n+    QuotaBalanceDao quotaBalanceDao;\n+    @Mock\n+    QuotaResponseBuilder respBldr;\n+\n+    QuotaServiceImpl quotaService = new QuotaServiceImpl();\n+\n+    @Before\n+    public void setup() throws IllegalAccessException, NoSuchFieldException, ConfigurationException {\n+        // Dummy transaction stack setup\n+        TransactionLegacy.open(\"QuotaServiceImplTest\");\n+\n+        Field accountDaoField = QuotaServiceImpl.class.getDeclaredField(\"_accountDao\");\n+        accountDaoField.setAccessible(true);\n+        accountDaoField.set(quotaService, accountDao);\n+\n+        Field quotaAccountDaoField = QuotaServiceImpl.class.getDeclaredField(\"_quotaAcc\");\n+        quotaAccountDaoField.setAccessible(true);\n+        quotaAccountDaoField.set(quotaService, quotaAcc);\n+\n+        Field quotaUsageDaoField = QuotaServiceImpl.class.getDeclaredField(\"_quotaUsageDao\");\n+        quotaUsageDaoField.setAccessible(true);\n+        quotaUsageDaoField.set(quotaService, quotaUsageDao);\n+\n+        Field domainDaoField = QuotaServiceImpl.class.getDeclaredField(\"_domainDao\");\n+        domainDaoField.setAccessible(true);\n+        domainDaoField.set(quotaService, domainDao);\n+\n+        Field configDaoField = QuotaServiceImpl.class.getDeclaredField(\"_configDao\");\n+        configDaoField.setAccessible(true);\n+        configDaoField.set(quotaService, configDao);\n+\n+        Field balanceDaoField = QuotaServiceImpl.class.getDeclaredField(\"_quotaBalanceDao\");\n+        balanceDaoField.setAccessible(true);\n+        balanceDaoField.set(quotaService, quotaBalanceDao);\n+\n+        Field QuotaResponseBuilderField = QuotaServiceImpl.class.getDeclaredField(\"_respBldr\");\n+        QuotaResponseBuilderField.setAccessible(true);\n+        QuotaResponseBuilderField.set(quotaService, respBldr);\n+\n+        Mockito.when(configDao.getValue(Mockito.eq(Config.UsageAggregationTimezone.toString()))).thenReturn(\"IST\");\n+        Mockito.when(configDao.getValue(Mockito.eq(Config.UsageStatsJobAggregationRange.toString()))).thenReturn(\"1\");\n+        quotaService.configure(\"randomName\", null);\n+    }\n+\n+    @Test\n+    public void testComputeAdjustedTime() {\n+        DateTime now = new DateTime(DateTimeZone.UTC);\n+        DateTime result = new DateTime(quotaService.computeAdjustedTime(now.toDate()));\n+        // FIXME: fix this test\n+    }\n+\n+    @Test\n+    public void testFindQuotaBalanceVO() {\n+        final long accountId = 2L;\n+        final String accountName = \"admin123\";\n+        final long domainId = 1L;\n+        final Date startDate = new DateTime().minusDays(2).toDate();\n+        final Date endDate = new Date();\n+\n+        List<QuotaBalanceVO> records = new ArrayList<>();\n+        QuotaBalanceVO qb = new QuotaBalanceVO();\n+        qb.setCreditBalance(new BigDecimal(100));\n+        qb.setAccountId(accountId);\n+        records.add(qb);\n+\n+        Mockito.when(respBldr.startOfNextDay()).thenReturn(endDate);\n+        Mockito.when(respBldr.startOfNextDay(Mockito.any(Date.class))).thenReturn(startDate);\n+        Mockito.when(quotaBalanceDao.findQuotaBalance(Mockito.eq(accountId), Mockito.eq(domainId), Mockito.any(Date.class), Mockito.any(Date.class))).thenReturn(records);\n+        Mockito.when(quotaBalanceDao.lastQuotaBalanceVO(Mockito.eq(accountId), Mockito.eq(domainId), Mockito.any(Date.class))).thenReturn(records);\n+\n+        // with enddate\n+        assertTrue(quotaService.findQuotaBalanceVO(accountId, accountName, domainId, startDate, endDate).get(0).equals(qb));\n+        // without enddate\n+        assertTrue(quotaService.findQuotaBalanceVO(accountId, accountName, domainId, startDate, null).get(0).equals(qb));\n+    }\n+\n+    @Test\n+    public void testGetQuotaUsage() {\n+        final long accountId = 2L;\n+        final String accountName = \"admin123\";\n+        final long domainId = 1L;\n+        final Date startDate = new DateTime().minusDays(2).toDate();\n+        final Date endDate = new Date();\n+\n+        Mockito.when(respBldr.startOfNextDay()).thenReturn(endDate);\n+        quotaService.getQuotaUsage(accountId, accountName, domainId, QuotaTypes.IP_ADDRESS, startDate, endDate);\n+        Mockito.verify(quotaUsageDao, Mockito.times(1)).findQuotaUsage(Mockito.eq(accountId), Mockito.eq(domainId), Mockito.eq(QuotaTypes.IP_ADDRESS), Mockito.any(Date.class), Mockito.any(Date.class));\n+    }\n+\n+    @Test\n+    public void testSetLockAccount() {\n+        // existing account\n+        QuotaAccountVO quotaAccountVO = new QuotaAccountVO();\n+        Mockito.when(quotaAcc.findByIdQuotaAccount(Mockito.anyLong())).thenReturn(quotaAccountVO);\n+        quotaService.setLockAccount(2L, true);\n+        Mockito.verify(quotaAcc, Mockito.times(0)).persistQuotaAccount(Mockito.any(QuotaAccountVO.class));\n+        Mockito.verify(quotaAcc, Mockito.times(1)).updateQuotaAccount(Mockito.anyLong(), Mockito.any(QuotaAccountVO.class));\n+\n+        // new account\n+        Mockito.when(quotaAcc.findByIdQuotaAccount(Mockito.anyLong())).thenReturn(null);\n+        quotaService.setLockAccount(2L, true);\n+        Mockito.verify(quotaAcc, Mockito.times(1)).persistQuotaAccount(Mockito.any(QuotaAccountVO.class));\n+    }\n+\n+    @Test\n+    public void testSetMinBalance() {\n+        final long accountId = 2L;\n+        final double balance = 10.3F;\n+\n+        // existing account setting\n+        QuotaAccountVO quotaAccountVO = new QuotaAccountVO();\n+        Mockito.when(quotaAcc.findByIdQuotaAccount(Mockito.anyLong())).thenReturn(quotaAccountVO);\n+        quotaService.setMinBalance(accountId, balance);\n+        Mockito.verify(quotaAcc, Mockito.times(0)).persistQuotaAccount(Mockito.any(QuotaAccountVO.class));\n+        Mockito.verify(quotaAcc, Mockito.times(1)).updateQuotaAccount(Mockito.anyLong(), Mockito.any(QuotaAccountVO.class));\n+\n+        // no account with limit set\n+        Mockito.when(quotaAcc.findByIdQuotaAccount(Mockito.anyLong())).thenReturn(null);\n+        quotaService.setMinBalance(accountId, balance);\n+        Mockito.verify(quotaAcc, Mockito.times(1)).persistQuotaAccount(Mockito.any(QuotaAccountVO.class));\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/database/quota/test/org/apache/cloudstack/quota/QuotaServiceImplTest.java",
                "sha": "310e9ced72fd15c4c9ebadf6b7e148db6613e69b",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/hypervisors/ovm3/pom.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/ovm3/pom.xml?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 1,
                "filename": "plugins/hypervisors/ovm3/pom.xml",
                "patch": "@@ -45,7 +45,7 @@\n     <dependency>\n \t<groupId>org.apache.commons</groupId>\n \t<artifactId>commons-lang3</artifactId>\n-\t<version>${cs.lang3.version}</version>\n+\t<version>${cs.commons-lang3.version}</version>\n     </dependency>\n     <dependency>\n \t<groupId>log4j</groupId>",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/hypervisors/ovm3/pom.xml",
                "sha": "8afd3712c303a547afe4b09b0d978ed84be4b9f3",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/network-elements/nuage-vsp/pom.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/pom.xml?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 1,
                "filename": "plugins/network-elements/nuage-vsp/pom.xml",
                "patch": "@@ -32,7 +32,7 @@\n     <dependency>\n       <groupId>org.apache.commons</groupId>\n       <artifactId>commons-lang3</artifactId>\n-      <version>${cs.lang3.version}</version>\n+      <version>${cs.commons-lang3.version}</version>\n     </dependency>\n   </dependencies>\n   <build>",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/network-elements/nuage-vsp/pom.xml",
                "sha": "6c11acf19ed73fdac7c0ca8fbc8860e253ee06cf",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/pom.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/pom.xml?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "plugins/pom.xml",
                "patch": "@@ -101,6 +101,7 @@\n     <module>network-elements/internal-loadbalancer</module>\n     <module>network-elements/vxlan</module>\n     <module>network-elements/globodns</module>\n+    <module>database/quota</module>\n   </modules>\n \n   <dependencies>",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/plugins/pom.xml",
                "sha": "5305d943feebd0ec2838212fdf1c3a91435d8782",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/pom.xml",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/pom.xml?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 1,
                "filename": "pom.xml",
                "patch": "@@ -99,7 +99,7 @@\n     <cs.aws.sdk.version>1.10.34</cs.aws.sdk.version>\n     <cs.jackson.version>2.6.3</cs.jackson.version>\n     <cs.lang.version>2.6</cs.lang.version>\n-    <cs.lang3.version>3.4</cs.lang3.version>\n+    <cs.commons-lang3.version>3.4</cs.commons-lang3.version>\n     <cs.commons-io.version>2.4</cs.commons-io.version>\n     <cs.commons-validator.version>1.4.0</cs.commons-validator.version>\n     <cs.reflections.version>0.9.9</cs.reflections.version>\n@@ -116,6 +116,7 @@\n     <cs.javadoc.version>2.10.1</cs.javadoc.version>\n     <cs.opensaml.version>2.6.1</cs.opensaml.version>\n     <cs.xml-apis.version>1.4.01</cs.xml-apis.version>\n+    <cs.joda-time.version>2.8.1</cs.joda-time.version>\n   </properties>\n \n   <distributionManagement>\n@@ -714,6 +715,19 @@\n                     <ignore></ignore>\n                   </action>\n                 </pluginExecution>\n+                <pluginExecution>\n+\t\t\t<pluginExecutionFilter>\n+\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n+\t\t\t\t<artifactId>maven-checkstyle-plugin</artifactId>\n+\t\t\t\t<versionRange>[2.11,)</versionRange>\n+\t\t\t\t<goals>\n+\t\t\t\t\t<goal>check</goal>\n+\t\t\t\t</goals>\n+\t\t\t</pluginExecutionFilter>\n+\t\t\t<action>\n+\t\t\t\t<ignore></ignore>\n+\t\t\t</action>\n+                </pluginExecution>\n               </pluginExecutions>\n             </lifecycleMappingMetadata>\n           </configuration>",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/pom.xml",
                "sha": "9ff47e26cef96757bc13797e48b6479a4a697da9",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/server/src/com/cloud/api/dispatch/ParamProcessWorker.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/dispatch/ParamProcessWorker.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "server/src/com/cloud/api/dispatch/ParamProcessWorker.java",
                "patch": "@@ -294,6 +294,14 @@ private void setFieldValue(final Field field, final BaseCmd cmdObj, final Object\n                     field.set(cmdObj, Float.valueOf(paramObj.toString()));\n                 }\n                 break;\n+            case DOUBLE:\n+                // Assuming that the parameters have been checked for required before now,\n+                // we ignore blank or null values and defer to the command to set a default\n+                // value for optional parameters ...\n+                if (paramObj != null && isNotBlank(paramObj.toString())) {\n+                    field.set(cmdObj, Double.valueOf(paramObj.toString()));\n+                }\n+                break;\n             case INTEGER:\n                 // Assuming that the parameters have been checked for required before now,\n                 // we ignore blank or null values and defer to the command to set a default",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/server/src/com/cloud/api/dispatch/ParamProcessWorker.java",
                "sha": "099c0c91e667636b9e47f553e2994a7e0504bd03",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/server/src/com/cloud/user/AccountManagerImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/user/AccountManagerImpl.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 2,
                "filename": "server/src/com/cloud/user/AccountManagerImpl.java",
                "patch": "@@ -2184,8 +2184,7 @@ private UserAccount getUserAccount(String username, String password, Long domain\n                 if (s_logger.isInfoEnabled()) {\n                     s_logger.info(\"User \" + username + \" in domain \" + domainName + \" is disabled/locked (or account is disabled/locked)\");\n                 }\n-                throw new CloudAuthenticationException(\"User \" + username + \" in domain \" + domainName + \" is disabled/locked (or account is disabled/locked)\");\n-                // return null;\n+                throw new CloudAuthenticationException(\"User \" + username + \" (or their account) in domain \" + domainName + \" is disabled/locked. Please contact the administrator.\");\n             }\n             // Whenever the user is able to log in successfully, reset the login attempts to zero\n             if (!isInternalAccount(userAccount.getId()))",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/server/src/com/cloud/user/AccountManagerImpl.java",
                "sha": "d3eb40c7db69d2c3a3a4ef3ff59b77ed92991e84",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/server/test/com/cloud/api/dispatch/ParamProcessWorkerTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/test/com/cloud/api/dispatch/ParamProcessWorkerTest.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "server/test/com/cloud/api/dispatch/ParamProcessWorkerTest.java",
                "patch": "@@ -62,6 +62,9 @@\n         @Parameter(name = \"boolparam1\", type = CommandType.BOOLEAN)\n         boolean boolparam1;\n \n+        @Parameter(name = \"doubleparam1\", type = CommandType.DOUBLE)\n+        double doubleparam1;\n+\n         @Override\n         public void execute() throws ResourceUnavailableException, InsufficientCapacityException, ServerApiException, ConcurrentOperationException,\n             ResourceAllocationException, NetworkRuleConflictException {\n@@ -98,10 +101,12 @@ public void processParameters() {\n         params.put(\"strparam1\", \"foo\");\n         params.put(\"intparam1\", \"100\");\n         params.put(\"boolparam1\", \"true\");\n+        params.put(\"doubleparam1\", \"11.89\");\n         final TestCmd cmd = new TestCmd();\n         paramProcessWorker.processParameters(cmd, params);\n         Assert.assertEquals(\"foo\", cmd.strparam1);\n         Assert.assertEquals(100, cmd.intparam1);\n+        Assert.assertTrue(Double.compare(cmd.doubleparam1, 11.89) == 0);\n     }\n \n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/server/test/com/cloud/api/dispatch/ParamProcessWorkerTest.java",
                "sha": "7ac982db6234ca2620182d7539af652bfa399bd7",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/setup/db/db/schema-421to430-cleanup.sql",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/setup/db/db/schema-421to430-cleanup.sql?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 1,
                "filename": "setup/db/db/schema-421to430-cleanup.sql",
                "patch": "@@ -19,4 +19,3 @@\n -- Schema cleanup from 4.2.0 to 4.3.0;\n --;\n \n-",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/setup/db/db/schema-421to430-cleanup.sql",
                "sha": "4a58e65477d01ef9b82e0462945d26941510d2fb",
                "status": "modified"
            },
            {
                "additions": 110,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/setup/db/db/schema-461to470.sql",
                "changes": 110,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/setup/db/db/schema-461to470.sql?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "setup/db/db/schema-461to470.sql",
                "patch": "@@ -30,3 +30,113 @@ CREATE TABLE IF NOT EXISTS `cloud`.`domain_vlan_map` (\n   INDEX `i_account_vlan_map__vlan_id`(`vlan_db_id`)\n ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n \n+-- Quota\n+\n+CREATE TABLE IF NOT EXISTS `cloud_usage`.`quota_account` (\n+      `account_id` int(11) NOT NULL,\n+      `quota_balance` decimal(15,2) NULL,\n+      `quota_balance_date` datetime NULL,\n+      `quota_enforce` int(1) DEFAULT NULL,\n+      `quota_min_balance` decimal(15,2) DEFAULT NULL,\n+      `quota_alert_date` datetime DEFAULT NULL,\n+      `quota_alert_type` int(11) DEFAULT NULL,\n+      `last_statement_date` datetime DEFAULT NULL,\n+      PRIMARY KEY (`account_id`),\n+  CONSTRAINT `account_id` FOREIGN KEY (`account_id`) REFERENCES `cloud_usage`.`account` (`quota_enforce`)\n+  ON DELETE NO ACTION\n+  ON UPDATE NO ACTION\n+) ENGINE=MyISAM DEFAULT CHARSET=utf8;\n+\n+\n+CREATE TABLE IF NOT EXISTS `cloud_usage`.`quota_tariff` (\n+  `id` bigint unsigned NOT NULL AUTO_INCREMENT,\n+  `usage_type` int(2) unsigned DEFAULT NULL,\n+  `usage_name` varchar(255) NOT NULL COMMENT 'usage type',\n+  `usage_unit` varchar(255) NOT NULL COMMENT 'usage type',\n+  `usage_discriminator` varchar(255) NOT NULL COMMENT 'usage type',\n+  `currency_value` decimal(15,2) NOT NULL COMMENT 'usage type',\n+  `effective_on` datetime NOT NULL COMMENT 'date time on which this quota values will become effective',\n+  `updated_on` datetime NOT NULL COMMENT 'date this entry was updated on',\n+  `updated_by` bigint unsigned NOT NULL,\n+  PRIMARY KEY (`id`)\n+) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n+\n+\n+LOCK TABLES `cloud_usage`.`quota_tariff` WRITE;\n+INSERT IGNORE INTO `cloud_usage`.`quota_tariff` (`usage_type`, `usage_name`, `usage_unit`, `usage_discriminator`, `currency_value`, `effective_on`,  `updated_on`, `updated_by`) VALUES\n+ (1,'RUNNING_VM','Compute-Month','',0.00,'2010-05-04', '2010-05-04',1),\n+ (2,'ALLOCATED_VM','Compute-Month','',0.00,'2010-05-04', '2010-05-04',1),\n+ (3,'IP_ADDRESS','IP-Month','',0.00,'2010-05-04', '2010-05-04',1),\n+ (4,'NETWORK_BYTES_SENT','GB','',0.00,'2010-05-04', '2010-05-04',1),\n+ (5,'NETWORK_BYTES_RECEIVED','GB','',0.00,'2010-05-04', '2010-05-04',1),\n+ (6,'VOLUME','GB-Month','',0.00,'2010-05-04', '2010-05-04',1),\n+ (7,'TEMPLATE','GB-Month','',0.00,'2010-05-04', '2010-05-04',1),\n+ (8,'ISO','GB-Month','',0.00,'2010-05-04', '2010-05-04',1),\n+ (9,'SNAPSHOT','GB-Month','',0.00,'2010-05-04', '2010-05-04',1),\n+ (10,'SECURITY_GROUP','Policy-Month','',0.00,'2010-05-04', '2010-05-04',1),\n+ (11,'LOAD_BALANCER_POLICY','Policy-Month','',0.00,'2010-05-04', '2010-05-04',1),\n+ (12,'PORT_FORWARDING_RULE','Policy-Month','',0.00,'2010-05-04', '2010-05-04',1),\n+ (13,'NETWORK_OFFERING','Policy-Month','',0.00,'2010-05-04', '2010-05-04',1),\n+ (14,'VPN_USERS','Policy-Month','',0.00,'2010-05-04', '2010-05-04',1),\n+ (15,'CPU_SPEED','Compute-Month','100MHz',0.00,'2010-05-04', '2010-05-04',1),\n+ (16,'vCPU','Compute-Month','1VCPU',0.00,'2010-05-04', '2010-05-04',1),\n+ (17,'MEMORY','Compute-Month','1MB',0.00,'2010-05-04', '2010-05-04',1),\n+ (21,'VM_DISK_IO_READ','GB','1',0.00,'2010-05-04', '2010-05-04',1),\n+ (22,'VM_DISK_IO_WRITE','GB','1',0.00,'2010-05-04', '2010-05-04',1),\n+ (23,'VM_DISK_BYTES_READ','GB','1',0.00,'2010-05-04', '2010-05-04',1),\n+ (24,'VM_DISK_BYTES_WRITE','GB','1',0.00,'2010-05-04', '2010-05-04',1),\n+ (25,'VM_SNAPSHOT','GB-Month','',0.00,'2010-05-04', '2010-05-04',1);\n+UNLOCK TABLES;\n+\n+CREATE TABLE IF NOT EXISTS `cloud_usage`.`quota_credits` (\n+  `id` bigint unsigned NOT NULL auto_increment COMMENT 'id',\n+  `account_id` bigint unsigned NOT NULL,\n+  `domain_id` bigint(20) unsigned NOT NULL,\n+  `credit` decimal(15,4) COMMENT 'amount credited',\n+  `updated_on` datetime NOT NULL COMMENT 'date created',\n+  `updated_by` bigint unsigned NOT NULL,\n+  PRIMARY KEY  (`id`)\n+) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n+\n+CREATE TABLE IF NOT EXISTS `cloud_usage`.`quota_usage` (\n+  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\n+  `usage_item_id` bigint(20) unsigned NOT NULL,\n+  `zone_id` bigint(20) unsigned NOT NULL,\n+  `account_id` bigint(20) unsigned NOT NULL,\n+  `domain_id` bigint(20) unsigned NOT NULL,\n+  `usage_type` varchar(64) DEFAULT NULL,\n+  `quota_used` decimal(15,8) unsigned NOT NULL,\n+  `start_date` datetime NOT NULL COMMENT 'start time for this usage item',\n+  `end_date` datetime NOT NULL COMMENT 'end time for this usage item',\n+  PRIMARY KEY (`id`)\n+) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;\n+\n+\n+CREATE TABLE IF NOT EXISTS `cloud_usage`.`quota_balance` (\n+  `id` bigint unsigned NOT NULL auto_increment COMMENT 'id',\n+  `account_id` bigint unsigned NOT NULL,\n+  `domain_id` bigint(20) unsigned NOT NULL,\n+  `credit_balance` decimal(15,8) COMMENT 'amount of credits remaining',\n+  `credits_id`  bigint unsigned COMMENT 'if not null then this entry corresponds to credit change quota_credits',\n+  `updated_on` datetime NOT NULL COMMENT 'date updated on',\n+  PRIMARY KEY  (`id`)\n+) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n+\n+\n+CREATE TABLE IF NOT EXISTS `cloud_usage`.`quota_email_templates` (\n+  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n+  `template_name` varchar(64) NOT NULL UNIQUE,\n+  `template_subject` longtext,\n+  `template_body` longtext,\n+  `locale` varchar(25) DEFAULT 'en_US',\n+  `updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n+  PRIMARY KEY (`id`)\n+) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n+\n+LOCK TABLES `cloud_usage`.`quota_email_templates` WRITE;\n+INSERT IGNORE INTO `cloud_usage`.`quota_email_templates` (`template_name`, `template_subject`, `template_body`) VALUES\n+ ('QUOTA_LOW', 'Quota Usage Threshold crossed by your account ${accountName}', 'Your account ${accountName} in the domain ${domainName} has reached quota usage threshold, your current quota balance is ${quotaBalance}.'),\n+ ('QUOTA_EMPTY', 'Quota Exhausted, account ${accountName} has no quota left.', 'Your account ${accountName} in the domain ${domainName} has exhausted allocated quota, please contact the administrator.'),\n+ ('QUOTA_UNLOCK_ACCOUNT', 'Quota credits added, account ${accountName} is unlocked now, if it was locked', 'Your account ${accountName} in the domain ${domainName} has enough quota credits now with the current balance of ${quotaBalance}.'),\n+ ('QUOTA_STATEMENT', 'Quota Statement for your account ${accountName}', 'Monthly quota statement of your account ${accountName} in the domain ${domainName}:<br>Balance = ${quotaBalance}<br>Total Usage = ${quotaUsage}.');\n+UNLOCK TABLES;",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/setup/db/db/schema-461to470.sql",
                "sha": "d738545c2ca97414719da282925c97bebdc2f233",
                "status": "modified"
            },
            {
                "additions": 204,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/test/integration/smoke/test_quota.py",
                "changes": 204,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/test/integration/smoke/test_quota.py?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "test/integration/smoke/test_quota.py",
                "patch": "@@ -0,0 +1,204 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\"\"\" Test cases for checking quota API\n+\"\"\"\n+\n+#Import Local Modules\n+import marvin\n+from marvin.cloudstackTestCase import *\n+from marvin.cloudstackAPI import *\n+from marvin.lib.utils import *\n+from marvin.lib.base import *\n+from marvin.lib.common import *\n+from marvin.lib.utils import (random_gen)\n+from nose.plugins.attrib import attr\n+\n+#Import System modules\n+import time\n+\n+#ENABLE THE QUOTA PLUGIN AND RESTART THE MANAGEMENT SERVER TO RUN QUOTA TESTS\n+\n+class TestQuota(cloudstackTestCase):\n+\n+    def setUp(self):\n+        self.apiclient = self.testClient.getApiClient()\n+        self.hypervisor = self.testClient.getHypervisorInfo()\n+        self.dbclient = self.testClient.getDbConnection()\n+        self.services = self.testClient.getParsedTestDataConfig()\n+        self.zone = get_zone(self.apiclient, self.testClient.getZoneForTests())\n+        self.pod = get_pod(self.apiclient, self.zone.id)\n+        self.cleanup = []\n+        return\n+\n+    def tearDown(self):\n+        try:\n+            #Clean up, terminate the created templates\n+            cleanup_resources(self.apiclient, self.cleanup)\n+        except Exception as e:\n+            raise Exception(\"Warning: Exception during cleanup : %s\" % e)\n+        return\n+\n+    #Check quotaTariffList API returning 22 items\n+    @attr(tags=[\"smoke\", \"advanced\"], required_hardware=\"false\")\n+    def test_01_quota(self):\n+        cmd = quotaTariffList.quotaTariffListCmd()\n+        response = self.apiclient.quotaTariffList(cmd)\n+\n+        self.debug(\"Number of quota usage types: %s\" % len(response))\n+        self.assertEqual(\n+                         len(response), 22\n+                         )\n+        for quota in response:\n+            self.debug(\"Usage Name: %s\" % quota.usageName)\n+            self.assertEqual(\n+                hasattr(quota, 'usageName'),\n+                True,\n+                \"Check whether usgaeName field is there\"\n+            )\n+\n+        return\n+\n+    #Check quota tariff on a particualr day\n+    @attr(tags=[\"smoke\", \"advanced\"], required_hardware=\"false\")\n+    def test_02_quota(self):\n+        cmd = quotaTariffList.quotaTariffListCmd()\n+        cmd.startdate='2015-07-06'\n+        response = self.apiclient.quotaTariffList(cmd)\n+\n+        self.debug(\"Number of quota usage types: %s\" % len(response))\n+        self.assertEqual(\n+                         len(response), 22\n+                         )\n+\n+        return\n+\n+    #check quota tariff of a particular item\n+    @attr(tags=[\"smoke\", \"advanced\"], required_hardware=\"false\")\n+    def test_03_quota(self):\n+        cmd = quotaTariffList.quotaTariffListCmd()\n+        cmd.startdate='2015-07-06'\n+        cmd.usagetype='10'\n+        response = self.apiclient.quotaTariffList(cmd)\n+\n+        self.debug(\"Number of quota usage types: %s\" % len(response))\n+        self.assertEqual(\n+                         len(response), 1\n+                         )\n+        return\n+\n+\n+    #check quota tariff\n+    #Change it\n+    #Check on affective date the new tariff should be applicable\n+    #check the old tariff it should be same\n+    @attr(tags=[\"smoke\", \"advanced\"], required_hardware=\"false\")\n+    def test_04_quota(self):\n+        cmd = quotaTariffList.quotaTariffListCmd()\n+        cmd.startdate='2015-07-06'\n+        cmd.usagetype='10'\n+        response = self.apiclient.quotaTariffList(cmd)\n+\n+        self.debug(\"Number of quota usage types: %s\" % len(response))\n+        self.assertEqual(\n+                         len(response), 1\n+                         )\n+        quota = response[0]\n+        self.debug(\"Tariff Value for 10: %s\" % quota.tariffValue)\n+\n+        cmd = quotaTariffUpdate.quotaTariffUpdateCmd()\n+        tomorrow = datetime.date.today() + datetime.timedelta(days=1)\n+        cmd.startdate=tomorrow\n+        cmd.usagetype='10'\n+        cmd.value='2.9'\n+        response = self.apiclient.quotaTariffUpdate(cmd)\n+\n+        cmd = quotaTariffList.quotaTariffListCmd()\n+        cmd.startdate=tomorrow\n+        cmd.usagetype='10'\n+        response = self.apiclient.quotaTariffList(cmd)\n+        self.assertEqual(\n+                         len(response), 1\n+                         )\n+        quota = response[0]\n+        self.debug(\"Tariff Value for 10: %s\" % quota.tariffValue)\n+\n+        self.assertEqual( quota.tariffValue, 2.9)\n+\n+\n+        cmd = quotaTariffList.quotaTariffListCmd()\n+        cmd.startdate='2015-07-07'\n+        cmd.usagetype='10'\n+        response = self.apiclient.quotaTariffList(cmd)\n+        self.assertEqual(\n+                         len(response), 1\n+                         )\n+        quota = response[0]\n+        self.debug(\"Tariff Value for 10: %s\" % quota.tariffValue)\n+\n+        self.assertEqual( quota.tariffValue, 0)\n+\n+        return\n+\n+\n+    #Make credit deposit\n+    @attr(tags=[\"smoke\", \"advanced\"], required_hardware=\"false\")\n+    def test_05_quota(self):\n+        cmd = quotaCredits.quotaCreditsCmd()\n+        cmd.domainid = '1'\n+        cmd.account = 'admin'\n+        cmd.value = '10'\n+        cmd.quota_enforce = '1'\n+        cmd.min_balance = '9'\n+        response = self.apiclient.quotaCredits(cmd)\n+\n+        self.debug(\"Credit response update on: %s\" % response.updated_on)\n+\n+        return\n+\n+\n+    #Make credit deposit and check today balance\n+    @attr(tags=[\"smoke\", \"advanced\"], required_hardware=\"false\")\n+    def test_06_quota(self):\n+        cmd = quotaBalance.quotaBalanceCmd()\n+        today = datetime.date.today()\n+        cmd.domainid = '1'\n+        cmd.account = 'admin'\n+        cmd.startdate = today\n+        response = self.apiclient.quotaBalance(cmd)\n+\n+        self.debug(\"Quota Balance on: %s\" % response.startdate)\n+        self.debug(\"is: %s\" % response.startquota)\n+\n+        self.assertGreater( response.startquota, 9)\n+        return\n+\n+    #make credit deposit and check start and end date balances\n+    @attr(tags=[\"smoke\", \"advanced\"], required_hardware=\"false\")\n+    def test_07_quota(self):\n+        cmd = quotaBalance.quotaBalanceCmd()\n+        today = datetime.date.today()\n+        cmd.domainid = '1'\n+        cmd.account = 'admin'\n+        cmd.startdate = today - datetime.timedelta(days=2)\n+        cmd.enddate = today\n+        response = self.apiclient.quotaBalance(cmd)\n+\n+        self.debug(\"Quota Balance on: %s\" % response.startdate)\n+        self.debug(\"is: %s\" % response.startquota)\n+\n+        self.assertGreater( response.endquota, 9)\n+        return",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/test/integration/smoke/test_quota.py",
                "sha": "d4e4323e9b3dcaaf81cc5e8d9d161914d084aea4",
                "status": "added"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/tools/apidoc/gen_toc.py",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/tools/apidoc/gen_toc.py?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "tools/apidoc/gen_toc.py",
                "patch": "@@ -118,6 +118,8 @@\n     'listIdps': 'Authentication',\n     'authorizeSamlSso': 'Authentication',\n     'listSamlAuthorization': 'Authentication',\n+    'quota': 'Quota',\n+    'emailTemplate': 'Quota',\n     'Capacity': 'System Capacity',\n     'NetworkDevice': 'Network Device',\n     'ExternalLoadBalancer': 'Ext Load Balancer',",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/tools/apidoc/gen_toc.py",
                "sha": "6974fd74231a3e7a8b9c91945267f0c6087dbd20",
                "status": "modified"
            },
            {
                "additions": 44,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/ui/dictionary.jsp",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/ui/dictionary.jsp?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "ui/dictionary.jsp",
                "patch": "@@ -1024,6 +1024,50 @@ dictionary = {\n 'label.purpose': '<fmt:message key=\"label.purpose\" />',\n 'label.Pxe.server.type': '<fmt:message key=\"label.Pxe.server.type\" />',\n 'label.quickview': '<fmt:message key=\"label.quickview\" />',\n+'label.usage.type': '<fmt:message key=\"label.usage.type\" />',\n+'label.usage.unit': '<fmt:message key=\"label.usage.unit\" />',\n+'label.quota.value': '<fmt:message key=\"label.quota.value\" />',\n+'label.quota.description': '<fmt:message key=\"label.quota.description\" />',\n+'label.quota.configuration': '<fmt:message key=\"label.quota.configuration\" />',\n+'label.quota.configure': '<fmt:message key=\"label.quota.configure\" />',\n+'label.quota.remove': '<fmt:message key=\"label.quota.remove\" />',\n+'label.quota.totalusage': '<fmt:message key=\"label.quota.totalusage\" />',\n+'label.quota.balance': '<fmt:message key=\"label.quota.balance\" />',\n+'label.quota.summary': '<fmt:message key=\"label.quota.summary\" />',\n+'label.quota.fullsummary': '<fmt:message key=\"label.quota.fullsummary\" />',\n+'label.quota.minbalance': '<fmt:message key=\"label.quota.minbalance\" />',\n+'label.quota.enforcequota': '<fmt:message key=\"label.quota.enforcequota\" />',\n+'label.quota.tariff': '<fmt:message key=\"label.quota.tariff\" />',\n+'label.quota.state': '<fmt:message key=\"label.quota.state\" />',\n+'label.quota.startdate': '<fmt:message key=\"label.quota.startdate\" />',\n+'label.quota.enddate': '<fmt:message key=\"label.quota.enddate\" />',\n+'label.quota.total': '<fmt:message key=\"label.quota.total\" />',\n+'label.quota.type.name': '<fmt:message key=\"label.quota.type.name\" />',\n+'label.quota.type.unit': '<fmt:message key=\"label.quota.type.unit\" />',\n+'label.quota.usage': '<fmt:message key=\"label.quota.usage\" />',\n+'label.quota.startquota': '<fmt:message key=\"label.quota.startquota\" />',\n+'label.quota.endquota': '<fmt:message key=\"label.quota.endquota\" />',\n+'label.quota.statement.quota': '<fmt:message key=\"label.quota.statement.quota\" />',\n+'label.quota.add.credits': '<fmt:message key=\"label.quota.add.credits\" />',\n+'label.quota.date': '<fmt:message key=\"label.quota.date\" />',\n+'label.quota.dates': '<fmt:message key=\"label.quota.dates\" />',\n+'label.quota.credit': '<fmt:message key=\"label.quota.credit\" />',\n+'label.quota.credits': '<fmt:message key=\"label.quota.credits\" />',\n+'label.quota.value': '<fmt:message key=\"label.quota.value\" />',\n+'label.quota.statement.bydates': '<fmt:message key=\"label.quota.statement.bydates\" />',\n+'label.quota.email.template': '<fmt:message key=\"label.quota.email.template\" />',\n+'label.quota.statement': '<fmt:message key=\"label.quota.statement\" />',\n+'label.quota.statement.balance': '<fmt:message key=\"label.quota.statement.balance\" />',\n+'label.quota.statement.tariff': '<fmt:message key=\"label.quota.statement.tariff\" />',\n+'label.quota.statement.balance': '<fmt:message key=\"label.quota.statement.balance\" />',\n+'label.quota.statement.tariff': '<fmt:message key=\"label.quota.statement.tariff\" />',\n+'label.quota.tariff.edit': '<fmt:message key=\"label.quota.tariff.edit\" />',\n+'label.quota.tariff.effectivedate': '<fmt:message key=\"label.quota.tariff.effectivedate\" />',\n+'label.quota.email.subject': '<fmt:message key=\"label.quota.email.subject\" />',\n+'label.quota.tariff.value': '<fmt:message key=\"label.quota.tariff.value\" />',\n+'label.quota.email.subject': '<fmt:message key=\"label.quota.email.subject\" />',\n+'label.quota.email.body': '<fmt:message key=\"label.quota.email.body\" />',\n+'label.quota.email.lastupdated': '<fmt:message key=\"label.quota.email.lastupdated\" />',\n 'label.rbd': '<fmt:message key=\"label.rbd\" />',\n 'label.rbd.monitor': '<fmt:message key=\"label.rbd.monitor\" />',\n 'label.rbd.pool': '<fmt:message key=\"label.rbd.pool\" />',",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/ui/dictionary.jsp",
                "sha": "e82ae19ebbcdae86bdd68c44e2d75cf4519ed551",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/ui/plugins/plugins.js",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/ui/plugins/plugins.js?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 1,
                "filename": "ui/plugins/plugins.js",
                "patch": "@@ -16,6 +16,7 @@\n // under the License.\n (function($, cloudStack) {\n   cloudStack.plugins = [\n-    // 'testPlugin'\n+    'quota',\n+    //'testPlugin'\n   ];\n }(jQuery, cloudStack));",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/ui/plugins/plugins.js",
                "sha": "b629e3095b6c469fea5354f41501ddac15025da8",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/ui/plugins/quota/config.js",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/ui/plugins/quota/config.js?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "ui/plugins/quota/config.js",
                "patch": "@@ -0,0 +1,25 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+(function (cloudStack) {\n+  cloudStack.plugins.quota.config = {\n+    title: 'Quota',\n+    desc: 'CloudStack Quota',\n+    externalLink: 'http://www.cloudstack.org/',\n+    authorName: 'Apache CloudStack',\n+    authorEmail: 'dev@cloudstack.apache.org'\n+  };\n+}(cloudStack));",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/ui/plugins/quota/config.js",
                "sha": "186d50778400e8f67e8f539666db9bf14a1ba1e7",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/ui/plugins/quota/icon.png",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/ui/plugins/quota/icon.png?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "ui/plugins/quota/icon.png",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/ui/plugins/quota/icon.png",
                "sha": "a7ef5521d0fb2dc2d86b8259d7ac0db68c74d25d",
                "status": "added"
            },
            {
                "additions": 68,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/ui/plugins/quota/quota.css",
                "changes": 68,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/ui/plugins/quota/quota.css?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "ui/plugins/quota/quota.css",
                "patch": "@@ -0,0 +1,68 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one\n+* or more contributor license agreements.  See the NOTICE file\n+* distributed with this work for additional information\n+* regarding copyright ownership.  The ASF licenses this file\n+* to you under the Apache License, Version 2.0 (the\n+* \"License\"); you may not use this file except in compliance\n+* with the License.  You may obtain a copy of the License at\n+*\n+*   http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing,\n+* software distributed under the License is distributed on an\n+* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+* KIND, either express or implied.  See the License for the\n+* specific language governing permissions and limitations\n+* under the License.\n+*/\n+\n+.quota-tariff-edit {\n+    float: right;\n+}\n+\n+.quota-bold {\n+    font-size: 12px;\n+    font-weight: bold;\n+    color: #6D6D6D;\n+}\n+\n+.quota-text {\n+    font-size: 11px;\n+    color: #282828;\n+}\n+\n+.quota-element {\n+    margin: 5px;\n+    margin-left: 13px;\n+}\n+\n+.quota-input {\n+    background: #F6F6F6;\n+    border: 1px solid #AFAFAF;\n+    border-radius: 4px;\n+}\n+\n+.quota-button {\n+    border:1px solid #0077c7; -webkit-border-radius: 4px; -moz-border-radius: 4px; border-radius: 4px;\n+    font-size:11px;\n+    padding: 8px;\n+    margin-top: 12px;\n+    text-shadow: -1px -1px 0 rgba(0,0,0,0.3);font-weight:bold; color: #FFFFFF;\n+    background-color: #0099FF; background-image: -webkit-gradient(linear, left top, left bottom, from(#0099FF), to(#004FF7));\n+    background-image: -webkit-linear-gradient(top, #0099FF, #004FF7);\n+    background-image: -moz-linear-gradient(top, #0099FF, #004FF7);\n+    background-image: -ms-linear-gradient(top, #0099FF, #004FF7);\n+    background-image: -o-linear-gradient(top, #0099FF, #004FF7);\n+    background-image: linear-gradient(to bottom, #0099FF, #004FF7);filter:progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr=#0099FF, endColorstr=#004FF7);\n+}\n+\n+.quota-button:hover {\n+    border:1px solid #005c99;\n+    background-color: #0039B3; background-image: -webkit-gradient(linear, left top, left bottom, from(#0039B3), to(#004FF7));\n+    background-image: -webkit-linear-gradient(top, #0039B3, #004FF7);\n+    background-image: -moz-linear-gradient(top, #0039B3, #004FF7);\n+    background-image: -ms-linear-gradient(top, #0039B3, #004FF7);\n+    background-image: -o-linear-gradient(top, #0039B3, #004FF7);\n+    background-image: linear-gradient(to bottom, #0039B3, #004FF7);filter:progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr=#0039B3, endColorstr=#004FF7);\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/ui/plugins/quota/quota.css",
                "sha": "e9c0d8ff358c9ef16f8f4d04e7afc97578106500",
                "status": "added"
            },
            {
                "additions": 971,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/ui/plugins/quota/quota.js",
                "changes": 971,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/ui/plugins/quota/quota.js?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 0,
                "filename": "ui/plugins/quota/quota.js",
                "patch": "@@ -0,0 +1,971 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+(function (cloudStack) {\n+    var now = new Date();\n+    var newstartdate;\n+    var newenddate;\n+    var currency;\n+    cloudStack.plugins.quota = function(plugin) {\n+        plugin.ui.addSection({\n+          id: 'quota',\n+          title: 'Quota',\n+          preFilter: function(args) {\n+              var retval = $.ajax({\n+              url: createURL(\"listConfigurations&name=quota.enable.service\"),\n+              async: false\n+                  });\n+              var json = JSON.parse(retval.responseText);\n+              return json.listconfigurationsresponse.configuration[0].value == 'true';\n+          },\n+          showOnNavigation: true,\n+          sectionSelect: {\n+              label: 'label.select-view',\n+              preFilter: function(args) {\n+              if (isAdmin())\n+                  return ['summary', 'fullSummary', 'tariffEdit', 'emailTemplates'];\n+              else\n+                  return  ['summary', 'tariffView'];\n+              }\n+          },\n+          sections: {\n+\n+              summary: {\n+                  type: 'select',\n+                  title: 'label.quota.summary',\n+                  listView: {\n+                      label: 'label.quota.summary',\n+                      disableInfiniteScrolling: true,\n+                      fields: {\n+                          account: {\n+                              label: 'label.account',\n+                              truncate: true\n+                          },\n+                          domain: {\n+                              label: 'label.domain'\n+                          },\n+                          balance: {\n+                              label: 'label.quota.balance',\n+                              limitcolor: true,\n+                              limits: {\n+                                  upperlimit: 'upperlimit',\n+                                  lowerlimit: 'lowerlimit'\n+                              },\n+                              converter: function(args){\n+                                  return currency + args.toString();\n+                              }\n+                          },\n+                          quota: {\n+                              label: 'label.quota.totalusage',\n+                              editable: true,\n+                              truncate: true\n+                          },\n+                          state: {\n+                              label: 'label.quota.state',\n+                              indicator: {\n+                                  'enabled': 'on',\n+                                  'disabled': 'off',\n+                                  'locked': 'off',\n+                              }\n+                          },\n+                      },\n+                      dataProvider: function(args) {\n+                          var data = {\n+                              page: args.page,\n+                              pagesize: pageSize\n+                          };\n+\n+                          // TODO: add logic in mgmt server to filter by account\n+                          if (args.filterBy.search.value) {\n+                              data.search = args.filterBy.search.value;\n+                          }\n+\n+                          $.ajax({\n+                              url: createURL('quotaSummary'),\n+                              data: data,\n+                              dataType: \"json\",\n+                              async: true,\n+                              success: function(json) {\n+                                  var items = json.quotasummaryresponse.summary;\n+                                  if(items){\n+                                      var array=[];\n+                                      for (var i = 0; i < items.length; i++) {\n+                                          if (typeof data.search != 'undefine' && items[i].account.search(data.search) < 0 && items[i].domain.search(data.search) < 0) {\n+                                              continue;\n+                                          }\n+                                          currency = items[i].currency;\n+                                          items[i].quota = currency + ' ' + items[i].quota;\n+                                          items[i].lowerlimit = -1;\n+                                          items[i].upperlimit = 0;\n+                                          array.push(items[i]);\n+                                      }\n+                                      args.response.success({\n+                                          data: array\n+                                      });\n+                                  }\n+                                  else {\n+                                      args.response.success({\n+                                          data: 0\n+                                      });\n+                                  }\n+                              },\n+                              error: function(data) {\n+                                  cloudStack.dialog.notice({\n+                                      message: parseXMLHttpResponse(data)\n+                                  });\n+                              }\n+                          });\n+                      },\n+                      detailView: {\n+                          viewAll: [{\n+                              path: 'quota.quotastatement',\n+                              label: 'label.quota.statement.quota'\n+                          },{\n+                              path: 'quota.balancestatement',\n+                              label: 'label.quota.statement.balance'\n+                          }],\n+                          actions: {\n+                             add: {\n+                                label: 'label.quota.add.credits',\n+                                preFilter: function(args) { return isAdmin(); },\n+                                messages: {\n+                                    confirm: function(args) {\n+                                        return 'label.quota.add.credits';\n+                                    },\n+                                    notification: function(args) {\n+                                        return 'label.quota.add.credits';\n+                                    }\n+                                },\n+\n+                                createForm: {\n+                                    title: 'label.quota.credits',\n+                                    desc: '',\n+                                    fields: {\n+                                         value: {\n+                                            label: 'label.quota.credits',\n+                                            validation: {\n+                                                required: true\n+                                            }\n+                                        },\n+                                        min_balance: {\n+                                            label: 'label.quota.minbalance',\n+                                            validation: {\n+                                                required: true\n+                                            }\n+                                        },\n+                                        quota_enforce: {\n+                                            label: 'label.quota.enforcequota',\n+                                            isBoolean: true,\n+                                            isChecked: false\n+                                        },\n+                                    }\n+\n+                                },\n+\n+                                action: function(args) {\n+                                    var enforce=args.data.quota_enforce == 'on' ? true: false;\n+                                    $.ajax({\n+                                        url: createURL('quotaCredits'),\n+                                        data: {\n+                                            domainid: args.context.summary[0].domainid,\n+                                            account: args.context.summary[0].account,\n+                                            value: args.data.value,\n+                                            min_balance: args.data.min_balance,\n+                                            quota_enforce: enforce\n+                                        },\n+                                        async: false,\n+                                        success: function(json) {\n+                                            args.response.success({\n+                                                data: json.quotacreditsresponse.totalquota\n+                                            });\n+                                        }\n+                                    });\n+                                    $(window).trigger('cloudStack.fullRefresh');\n+                                 }\n+                            },\n+                          },\n+                          tabs: {\n+                             details: {\n+                                    title: 'label.details',\n+                                    fields: [{\n+                                        id: {\n+                                            label: 'label.quota.statement.balance'\n+                                        }\n+                                    }, {\n+                                        startdate: {\n+                                            label: 'label.quota.date',\n+                                        },\n+                                        startquota: {\n+                                            label: 'label.quota.value',\n+                                        }\n+                                    }],\n+                                    dataProvider: function(args) {\n+                                        $.ajax({\n+                                            url: createURL('quotaBalance'),\n+                                            dataType: 'json',\n+                                            async: true,\n+                                            data: {\n+                                                domainid: args.context.summary[0].domainid,\n+                                                account: args.context.summary[0].account\n+                                            },\n+                                            success: function(json) {\n+                                                var item = json.quotabalanceresponse.balance;\n+                                                item.startdate = now.toJSON().slice(0,10);\n+                                                item.startquota = item.currency + ' ' + item.startquota;\n+                                                args.response.success({\n+                                                    data: item\n+                                                });\n+                                            } ,\n+                                            error:function(data) {\n+                                                args.response.error(parseXMLHttpResponse(data));\n+                                            }\n+                                        });\n+                                    }\n+                                },\n+\n+                          }\n+                      }\n+                  }\n+              },\n+\n+              fullSummary: {\n+                  type: 'select',\n+                  title: 'label.quota.fullsummary',\n+                  listView: {\n+                      label: 'label.quota.fullsummary',\n+                      disableInfiniteScrolling: true,\n+                      fields: {\n+                          account: {\n+                              label: 'label.account',\n+                              truncate: true\n+                          },\n+                          domain: {\n+                              label: 'label.domain'\n+                          },\n+                          balance: {\n+                              label: 'label.quota.balance',\n+                              limitcolor: true,\n+                              limits: {\n+                                  upperlimit: 'upperlimit',\n+                                  lowerlimit: 'lowerlimit'\n+                              },\n+                              converter: function(args){\n+                                  return currency + args.toString();\n+                              }\n+                          },\n+                          quota: {\n+                              label: 'label.quota.totalusage',\n+                              editable: true,\n+                              truncate: true\n+                          },\n+                          state: {\n+                              label: 'label.quota.state',\n+                              indicator: {\n+                                  'enabled': 'on',\n+                                  'disabled': 'off',\n+                                  'locked': 'off',\n+                              }\n+                          },\n+                      },\n+                      dataProvider: function(args) {\n+                          var data = {\n+                              page: args.page,\n+                              pagesize: pageSize\n+                          };\n+\n+                          // TODO: add logic in mgmt server to filter by account\n+                          if (args.filterBy.search.value) {\n+                              data.search = args.filterBy.search.value;\n+                          }\n+\n+                          $.ajax({\n+                              url: createURL('quotaSummary&listall=true'),\n+                              data: data,\n+                              dataType: \"json\",\n+                              async: true,\n+                              success: function(json) {\n+                                  var items = json.quotasummaryresponse.summary;\n+                                  if(items){\n+                                      var array=[];\n+                                      for (var i = 0; i < items.length; i++) {\n+                                          if (typeof data.search != 'undefine' && items[i].account.search(data.search) < 0 && items[i].domain.search(data.search) < 0) {\n+                                              continue;\n+                                          }\n+                                          currency = items[i].currency;\n+                                          items[i].quota = currency + ' ' + items[i].quota;\n+                                          items[i].lowerlimit = -1;\n+                                          items[i].upperlimit = 0;\n+                                          array.push(items[i]);\n+                                      }\n+                                      args.response.success({\n+                                          data: array\n+                                      });\n+                                  }\n+                                  else {\n+                                      args.response.success({\n+                                          data: 0\n+                                      });\n+                                  }\n+                              },\n+                              error: function(data) {\n+                                  cloudStack.dialog.notice({\n+                                      message: parseXMLHttpResponse(data)\n+                                  });\n+                              }\n+                          });\n+                      },\n+                      detailView: {\n+                          viewAll: [{\n+                              path: 'quota.quotastatement',\n+                              label: 'label.quota.statement.quota'\n+                          },{\n+                              path: 'quota.balancestatement',\n+                              label: 'label.quota.statement.balance'\n+                          }],\n+                          actions: {\n+                             add: {\n+                                label: 'label.quota.add.credits',\n+                                preFilter: function(args) { return isAdmin(); },\n+                                messages: {\n+                                    confirm: function(args) {\n+                                        return 'label.quota.add.credits';\n+                                    },\n+                                    notification: function(args) {\n+                                        return 'label.quota.add.credits';\n+                                    }\n+                                },\n+\n+                                createForm: {\n+                                    title: 'label.quota.credits',\n+                                    desc: '',\n+                                    fields: {\n+                                         value: {\n+                                            label: 'label.quota.credits',\n+                                            validation: {\n+                                                required: true\n+                                            }\n+                                        },\n+                                        min_balance: {\n+                                            label: 'label.quota.minbalance',\n+                                            validation: {\n+                                                required: true\n+                                            }\n+                                        },\n+                                        quota_enforce: {\n+                                            label: 'label.quota.enforcequota',\n+                                            isBoolean: true,\n+                                            isChecked: false\n+                                        },\n+                                    }\n+\n+                                },\n+\n+                                action: function(args) {\n+                                     var enforce=args.data.quota_enforce == 'on' ? true: false;\n+                                     $.ajax({\n+                                         url: createURL('quotaCredits'),\n+                                         data: {\n+                                             domainid: args.context.fullSummary[0].domainid,\n+                                             account: args.context.fullSummary[0].account,\n+                                             value: args.data.value,\n+                                             min_balance: args.data.min_balance,\n+                                             quota_enforce: enforce\n+                                         },\n+                                        async: false,\n+                                        success: function(json) {\n+                                            args.response.success({\n+                                                data: json.quotacreditsresponse.totalquota\n+                                            });\n+                                        }\n+                                    });\n+                                    $(window).trigger('cloudStack.fullRefresh');\n+                                 }\n+                            },\n+                          },\n+                          tabs: {\n+                             details: {\n+                                    title: 'label.details',\n+                                    fields: [{\n+                                        id: {\n+                                            label: 'label.quota.statement.balance'\n+                                        }\n+                                    }, {\n+                                        startdate: {\n+                                            label: 'label.quota.date',\n+                                        },\n+                                        startquota: {\n+                                            label: 'label.quota.value',\n+                                        }\n+                                    }],\n+                                    dataProvider: function(args) {\n+                                        $.ajax({\n+                                            url: createURL('quotaBalance'),\n+                                            dataType: 'json',\n+                                            async: true,\n+                                            data: {\n+                                                domainid: args.context.fullSummary[0].domainid,\n+                                                account: args.context.fullSummary[0].account\n+                                            },\n+                                            success: function(json) {\n+                                                var item = json.quotabalanceresponse.balance;\n+                                                item.startdate = now.toJSON().slice(0,10);\n+                                                item.startquota = item.currency + ' ' + item.startquota;\n+                                                args.response.success({\n+                                                    data: item\n+                                                });\n+                                            } ,\n+                                            error:function(data) {\n+                                                args.response.error(parseXMLHttpResponse(data));\n+                                            }\n+                                        });\n+                                    }\n+                                },\n+                           }\n+                      }\n+                  }\n+              },\n+\n+             quotastatement:{\n+                  id: 'statementbalance',\n+                  title: 'label.quota.statement',\n+                  preFilter: function(args) {\n+                      return false;\n+                  },\n+                  listView: {\n+                      label: 'label.quota.statement.quota',\n+                      disableInfiniteScrolling: true,\n+                      fields: {\n+                            name: {\n+                                label: 'label.quota.type.name'\n+                            },\n+                            unit: {\n+                                label: 'label.quota.type.unit'\n+                            },\n+                            quota: {\n+                                label: 'label.quota.usage'\n+                            }\n+                      },\n+                      actions: {\n+                              add: {\n+                                    label: 'label.quota.dates',\n+                                    createForm: {\n+                                          title: 'label.quota.dates',\n+                                          fields: {\n+                                            startdate: {\n+                                                label: 'label.quota.startdate',\n+                                                isDatepicker: true,\n+                                                maxDate: '+0d',\n+                                                validation: {\n+                                                    required: true\n+                                                }\n+                                            },\n+                                            enddate: {\n+                                                label: 'label.quota.enddate',\n+                                                isDatepicker: true,\n+                                                maxDate: '+0d',\n+                                                validation: {\n+                                                    required: true\n+                                                }\n+                                            }\n+                                        }\n+                                      },\n+                                     action: function(args) {\n+                                        newstartdate= args.data.startdate.slice(0,10);\n+                                        newenddate= args.data.enddate.slice(0,10);\n+                                        $(window).trigger('cloudStack.fullRefresh');\n+                                    }\n+                            }\n+                       },\n+                      dataProvider: function(args) {\n+                          $.ajax({\n+                              url: createURL('quotaStatement'),\n+                              dataType: 'json',\n+                              async: true,\n+                              data: {\n+                                  domainid: args.context.summary[0].domainid,\n+                                  account: args.context.summary[0].account,\n+                                  startdate: function() {\n+                                         if (typeof newstartdate == 'undefined') {\n+                                             return  args.context.summary[0].startdate.slice(0,10);\n+                                         } else {\n+                                             return newstartdate;\n+                                         }\n+                                },\n+                                  enddate: function() {\n+                                     if (typeof newenddate == 'undefined') {\n+                                          return  now.toJSON().slice(0,10);\n+                              } else {\n+                                                      return newenddate;\n+                              }\n+                   }\n+                              },\n+                              success: function(json) {\n+                                  var usages = json.quotastatementresponse.statement.quotausage;\n+                                  var currency = json.quotastatementresponse.statement.currency;\n+                                  $.each(usages, function(idx, item) {\n+                                      usages[idx].quota = currency + ' ' + usages[idx].quota;\n+                                  });\n+                                  usages.push({\n+                                        name: _l('label.quota.total') + ' : ',\n+                                        unit:'',\n+                                        quota: currency + ' ' + json.quotastatementresponse.statement.totalquota\n+                                    });\n+\n+                                  usages.unshift({\n+                                      name: _l('label.quota.startdate')  + ' : ' + json.quotastatementresponse.statement.startdate.slice(0,10),\n+                                      unit: _l('label.quota.enddate')  + ' : ' + json.quotastatementresponse.statement.enddate.slice(0,10),\n+                                      quota: ''\n+                                  });\n+\n+\n+                                  args.response.success({\n+                                      data: usages\n+                                  });\n+                              },\n+                              error:function(data) {\n+                                  cloudStack.dialog.notice({\n+                                      message: parseXMLHttpResponse(data)\n+                                  });\n+                              }\n+                          });\n+                      }\n+                  } // end list view\n+              }, // end statement\n+\n+\n+              balancestatement:{\n+                  id: 'balancestatement',\n+                  title: 'label.quota.statement.balance',\n+                  listView: {\n+                      label: 'label.quota.statement.balance',\n+                      disableInfiniteScrolling: true,\n+                      fields: {\n+                            date: {\n+                                label: 'label.quota.date'\n+                            },\n+                            quota: {\n+                                label: 'label.quota.value'\n+                            },\n+                            credit: {\n+                                label: 'label.quota.credit'\n+                            }\n+                      },\n+\n+                      actions: {\n+                              add: {\n+                                    label: 'label.quota.dates',\n+                                    createForm: {\n+                                          title: 'label.quota.dates',\n+                                          fields: {\n+                                            startdate: {\n+                                                label: 'label.quota.startdate',\n+                                                isDatepicker: true,\n+                                                maxDate: '+0d',\n+                                                validation: {\n+                                                    required: true\n+                                                }\n+                                            },\n+                                            enddate: {\n+                                                label: 'label.quota.enddate',\n+                                                isDatepicker: true,\n+                                                maxDate: '+0d',\n+                                                validation: {\n+                                                    required: true\n+                                                }\n+                                            }\n+                                        }\n+                                      },\n+                                    action: function(args) {\n+                                            newstartdate= args.data.startdate.slice(0,10);\n+                                            newenddate= args.data.enddate.slice(0,10);\n+                                            $(window).trigger('cloudStack.fullRefresh');\n+                                        }\n+                                  }\n+                           },\n+\n+                      dataProvider: function(args) {\n+                          $.ajax({\n+                              url: createURL('quotaBalance'),\n+                              dataType: 'json',\n+                              async: true,\n+                              data: {\n+                                  domainid: args.context.summary[0].domainid,\n+                                  account: args.context.summary[0].account,\n+                                  startdate: function() {\n+                                       if (typeof newstartdate == 'undefined') {\n+                                           return  args.context.summary[0].startdate.slice(0,10);\n+                                       } else {\n+                                           return newstartdate;\n+                                       }\n+                                    },\n+                                   enddate: function() {\n+                             if (typeof newenddate == 'undefined') {\n+                                  return  now.toJSON().slice(0,10);\n+                          } else {\n+                                           return newenddate;\n+                          }\n+                                  }\n+                              },\n+                              success: function(json) {\n+                                  var bal = json.quotabalanceresponse.balance;\n+                                  var currency = bal.currency;\n+                                  var array=[{\n+                                               date: bal.startdate.slice(0,10),\n+                                               quota: currency + ' ' + bal.startquota,\n+                                               credit: ''\n+                                  }];\n+                                  //now add all credits\n+                                  for (var i = 0; i < bal.credits.length; i++) {\n+                                        array.push({\n+                                            date: bal.credits[i].updated_on.slice(0,10),\n+                                            quota: '',\n+                                            credit:  currency + ' ' + bal.credits[i].credits\n+                                        });\n+                                    }\n+                                  array.push({\n+                                            date: bal.enddate.slice(0,10),\n+                                            quota:  currency + ' ' + bal.endquota,\n+                                            credit: ''\n+                                        });\n+                                  args.response.success({\n+                                      data: array\n+                                  });\n+                              },\n+                              error:function(data) {\n+                  cloudStack.dialog.notice({\n+                                      message: parseXMLHttpResponse(data)\n+                                  });\n+                              }\n+                          });\n+                      }\n+                  } // end list view\n+              }, // end statement\n+\n+\n+              tariffEdit: {\n+                  type: 'select',\n+                  title: 'label.quota.tariff',\n+                  listView: {\n+                      label: 'label.quota.tariff',\n+                      disableInfiniteScrolling: true,\n+                      actions: {\n+                          edit: {\n+                              label: 'label.change.value',\n+                              action: function(args) {\n+                                  if (isAdmin()) {\n+                                       var data = {\n+                                            usagetype: args.data.jsonObj.usageType,\n+                                       };\n+                                      var tariffVal = args.data.tariffValue.split(' ');\n+                                      if (tariffVal.length==2){\n+                                          data.value = tariffVal[1];\n+                                      }\n+                                      else {\n+                                          data.value = tariffVal[0];\n+                                      }\n+                                      if (!isNaN(parseFloat(data.value)) && isFinite(data.value)){\n+                                          var updateTariffForm = cloudStack.dialog.createForm({\n+                                              form: {\n+                                                  title: 'label.quota.configuration',\n+                                                  fields: {\n+                                                      tariffValue: {\n+                                                          label: 'label.quota.value',\n+                                                          number: true,\n+                                                          validation: {\n+                                                              required: true\n+                                                          }\n+                                                      },\n+                                                      effectiveDate: {\n+                                                          label: 'label.quota.tariff.effectivedate',\n+                                                          isDatepicker: true,\n+                                                          dependsOn: 'startdate',\n+                                                          minDate: '+1d',\n+                                                          validation: {\n+                                                              required: true\n+                                                          }\n+                                                      },\n+                                                  }\n+                                              },\n+                                              after: function(argsLocal) {\n+                                                  data.startDate = argsLocal.data.effectiveDate;\n+                                                  data.value = argsLocal.data.tariffValue;\n+                                                  $.ajax({\n+                                                      url: createURL('quotaTariffUpdate'),\n+                                                      data: data,\n+                                                      type: \"POST\",\n+                                                      success: function(json) {\n+                                                          // Refresh listings on chosen date to reflect new tariff\n+                                                          $($.find('div.search-bar input')).val(data.startDate);\n+                                                          $('#basic_search').click();\n+                                                      }\n+                                                  });\n+                                              }\n+                                          });\n+                                          updateTariffForm.find('input[name=tariffValue]').val(data.value);\n+                                          updateTariffForm.find('input[name=effectiveDate]').focus();\n+                                      }\n+                                      else {\n+                                          alert(\"Bad tariff value, this should be a number \" + data.value);\n+                                          $(window).trigger('cloudStack.fullRefresh');\n+                                      }//bad data.value - NaN\n+                                  } // if is ADMIN\n+                              } // end action\n+                          }//edits\n+                      },//actions\n+                      fields: {\n+                          usageName: {\n+                              label: 'label.usage.type',\n+                              id: true,\n+                              truncate: true\n+                          },\n+                          usageUnit: {\n+                              label: 'label.usage.unit'\n+                          },\n+                          tariffValue: {\n+                              label: 'label.quota.tariff.value',\n+                              editable: true\n+                          },\n+                          description: {\n+                              label: 'label.quota.description',\n+                              truncate: true\n+                          }\n+                      },\n+                      dataProvider: function(args) {\n+                          var data = {};\n+                          if (args.filterBy.search.value) {\n+                              data.startdate = args.filterBy.search.value;\n+                          }\n+                          $.ajax({\n+                              url: createURL('quotaTariffList'),\n+                              data: data,\n+                              dataType: \"json\",\n+                              async: true,\n+                              success: function(json) {\n+                                  var items = json.quotatarifflistresponse.quotatariff;\n+                                  $.each(items, function(idx, item) {\n+                                      items[idx].tariffValue =  items[idx].currency + ' ' + items[idx].tariffValue;\n+                                  });\n+                                  args.response.success({\n+                                      data: items\n+                                  });\n+\n+                                  $($.find('.list-view')).data('end-of-table', true);\n+                                  // Hook up date picker\n+                                  var input = $($.find('div.search-bar input'));\n+                                  input.datepicker({\n+                                      defaultDate: new Date(),\n+                                      changeMonth: true,\n+                                      dateFormat: \"yy-mm-dd\",\n+                                  });\n+                                  input.parent().attr('title', _l('label.quota.effectivedate'));\n+                              },\n+                              error: function(data) {\n+                                  cloudStack.dialog.notice({\n+                                      message: parseXMLHttpResponse(data)\n+                                  });\n+                              }\n+                          });\n+                      }\n+                  }\n+              },\n+\n+\n+              tariffView: {\n+                  type: 'select',\n+                  title: 'label.quota.tariff',\n+                  listView: {\n+                      label: 'label.quota.tariff',\n+                      disableInfiniteScrolling: true,\n+                      fields: {\n+                          usageName: {\n+                              label: 'label.usage.type',\n+                              id: true,\n+                              truncate: true\n+                          },\n+                          usageUnit: {\n+                              label: 'label.usage.unit'\n+                          },\n+                          tariffValue: {\n+                              label: 'label.quota.tariff.value',\n+                          },\n+                          description: {\n+                              label: 'label.quota.description',\n+                              truncate: true\n+                          }\n+                      },\n+                      dataProvider: function(args) {\n+                          var data = {};\n+                          if (args.filterBy.search.value) {\n+                              data.startdate = args.filterBy.search.value;\n+                          }\n+                          $.ajax({\n+                              url: createURL('quotaTariffList'),\n+                              data: data,\n+                              dataType: \"json\",\n+                              async: true,\n+                              success: function(json) {\n+                                  var items = json.quotatarifflistresponse.quotatariff;\n+                                  $.each(items, function(idx, item) {\n+                                      items[idx].tariffValue =  items[idx].currency + ' ' + items[idx].tariffValue;\n+                                  });\n+                                  args.response.success({\n+                                      data: items\n+                                  });\n+\n+                                  $($.find('.list-view')).data('end-of-table', true);\n+                                  // Hook up date picker\n+                                  var input = $($.find('div.search-bar input'));\n+                                  input.datepicker({\n+                                      defaultDate: new Date(),\n+                                      changeMonth: true,\n+                                      dateFormat: \"yy-mm-dd\",\n+                                  });\n+                                  input.parent().attr('title', _l('label.quota.effectivedate'));\n+                              },\n+                              error: function(data) {\n+                                  cloudStack.dialog.notice({\n+                                      message: parseXMLHttpResponse(data)\n+                                  });\n+                              }\n+                          });\n+                      }\n+                  }\n+              },\n+\n+              emailTemplates: {\n+                  type: 'select',\n+                  title: 'label.quota.email.template',\n+                  listView: {\n+                      label: 'label.quota.email.template',\n+                      disableInfiniteScrolling: true,\n+                      fields: {\n+                          templatetype: {\n+                              label: 'label.quota.email.template',\n+                          },\n+                          templatesubject: {\n+                              label: 'label.quota.email.subject',\n+                              truncate: true\n+                          },\n+                          templatebody: {\n+                              label: 'label.quota.email.body',\n+                              truncate: true\n+                          },\n+                          last_updated: {\n+                              label: 'label.quota.email.lastupdated',\n+                              truncate: true\n+                          },\n+                      },\n+                      dataProvider: function(args) {\n+                          var data = {};\n+                          if (args.filterBy.search.value) {\n+                              data.templatetype = args.filterBy.search.value;\n+                          }\n+\n+                          $.ajax({\n+                              url: createURL('quotaEmailTemplateList'),\n+                              data: data,\n+                              dataType: \"json\",\n+                              async: true,\n+                              success: function(json) {\n+                                  if (!json.hasOwnProperty('quotaemailtemplatelistresponse') || !json.quotaemailtemplatelistresponse.hasOwnProperty('quotaemailtemplate')) {\n+                                      return;\n+                                  }\n+                                  var items = json.quotaemailtemplatelistresponse.quotaemailtemplate;\n+                                  args.response.success({\n+                                      data: items\n+                                  });\n+                              },\n+                              error: function(data) {\n+                                  cloudStack.dialog.notice({\n+                                      message: parseXMLHttpResponse(data)\n+                                  });\n+                              }\n+                          });\n+                      },\n+                      detailView: {\n+                          actions: {\n+                              edit: {\n+                                  label: 'label.quota.email.edit',\n+                                  messages: {\n+                                      notification: function(args) {\n+                                          return 'label.quota.email.edit';\n+                                      }\n+                                  },\n+                                  action: function(args) {\n+                                      args.data.templatetype = args.context.emailTemplates[0].templatetype;\n+                                      $.ajax({\n+                                          url: createURL('quotaEmailTemplateUpdate'),\n+                                          data: args.data,\n+                                          success: function(json) {\n+                                              args.response.success({\n+                                                  _custom: {\n+                                                      success: true\n+                                                  }\n+                                              });\n+                                          }\n+                                      });\n+                                  }\n+                              }\n+                          },\n+\n+                          tabs: {\n+                              details: {\n+                                  title: 'label.details',\n+                                  fields: [{\n+                                      templatetype: {\n+                                          label: 'label.quota.email.template'\n+                                      }\n+                                  }, {\n+                                      templatesubject: {\n+                                          label: 'label.quota.email.subject',\n+                                          isEditable: true,\n+                                          textArea: true\n+                                      },\n+                                      templatebody: {\n+                                          label: 'label.quota.email.body',\n+                                          isEditable: true,\n+                                          textArea: true\n+                                      },\n+                                      last_updated: {\n+                                          label: 'label.quota.email.lastupdated',\n+                                      },\n+                                  }],\n+\n+                                  dataProvider: function(args) {\n+                                      $.ajax({\n+                                          url: createURL('quotaEmailTemplateList'),\n+                                          data: {\n+                                              templatetype: args.context.emailTemplates[0].templatetype\n+                                          },\n+                                          success: function(json) {\n+                                              var item = json.quotaemailtemplatelistresponse.quotaemailtemplate[0];\n+                                              args.response.success({\n+                                                  data: item\n+                                              });\n+                                          }\n+                                      });\n+                                  }\n+                              }\n+                          }\n+                      }\n+                  }\n+              }\n+\n+          }\n+      });\n+  };\n+}(cloudStack));",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/ui/plugins/quota/quota.js",
                "sha": "6051b2c8fc8e10ad43f02c3374c2d90bfb9e162b",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/ui/scripts/ui/dialog.js",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/ui/scripts/ui/dialog.js?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 1,
                "filename": "ui/scripts/ui/dialog.js",
                "patch": "@@ -527,7 +527,9 @@\n                     }\n                     $input.addClass(\"disallowSpecialCharacters\");\n                     $input.datepicker({\n-                        dateFormat: 'yy-mm-dd'\n+\t\t\tdateFormat: 'yy-mm-dd',\n+\t\t\tmaxDate: field.maxDate,\n+\t\t\tminDate: field.minDate\n                     });\n \n                 } else if (field.range) { //2 text fields on the same line (e.g. port range: startPort - endPort)",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/ui/scripts/ui/dialog.js",
                "sha": "5e28ba3a10da09647fff1e9c4aa0a4dfe3ede877",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/ui/scripts/ui/widgets/detailView.js",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/ui/scripts/ui/widgets/detailView.js?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 3,
                "filename": "ui/scripts/ui/widgets/detailView.js",
                "patch": "@@ -442,7 +442,7 @@\n             if ($detailView.find('.button.done').size()) return false;\n \n             // Convert value TDs\n-            var $inputs = $detailView.find('input, select').filter(function() {\n+            var $inputs = $detailView.find('input, select, textarea').filter(function() {\n                 return !$(this).closest('.tagger').size() && !$(this).attr('type') == 'submit';\n             });\n             var action = args.actions[args.actionName];\n@@ -507,11 +507,17 @@\n                             $input.find('option:selected').html()\n                         ));\n                         $value.data('detail-view-selected-option', _s($input.find('option:selected').val()));\n+                    } else if ($input.is('textarea')) {\n+                        $value.html(_s(\n+                            $input.val()\n+                        ));\n+                        $value.data('detail-view-editable-textarea', _s($input.find('option:selected').val()));\n                     }\n                 });\n \n-                if ($token != null)\n+                if ($token) {\n                     $token.html(_s(tags_value));\n+                }\n             };\n \n             var removeEditForm = function() {\n@@ -627,7 +633,7 @@\n             };\n \n             $editButton.click(function() {\n-                var $inputs = $detailView.find('input, select').filter(function() {\n+                var $inputs = $detailView.find('input, select, textarea').filter(function() {\n                     return !$(this).closest('.tagger').size();\n                 });\n                 var $form = $detailView.find('form').filter(function() {\n@@ -673,6 +679,7 @@\n                 // Turn into form field\n                 var selectData = $value.data('detail-view-editable-select');\n                 var isBoolean = $value.data('detail-view-editable-boolean');\n+                var textArea = $value.data('detail-view-editable-textarea');\n                 var isTokenInput = $value.data('detail-view-is-token-input');\n                 var data = !isBoolean ? cloudStack.sanitizeReverse($value.html()) : $value.data('detail-view-boolean-value');\n                 var rules = $value.data('validation-rules') ? $value.data('validation-rules') : {};\n@@ -761,6 +768,15 @@\n                     $value.append($input);\n                     token_value = data;\n                     $value.data('value-token').dataProvider(selectArgs);\n+                } else if (textArea) {\n+                    // Text area\n+                    $value.append(\n+                        $('<textarea>').attr({\n+                            name: name,\n+                            value: data\n+                        }).css({'min-height': '80px'}).data('original-value', data)\n+                    );\n+                    $value.css({'width': '100%', 'height': '100%'});\n                 } else {\n                     // Text input\n                     $value.append(\n@@ -1131,6 +1147,8 @@\n                 } else if (value.isBoolean) {\n                     $value.data('detail-view-editable-boolean', true);\n                     $value.data('detail-view-boolean-value', content == 'Yes' ? true : false);\n+                } else if (value.textArea) {\n+                    $value.data('detail-view-editable-textarea', true);\n                 } else {\n                     $value.data('detail-view-is-password', value.isPassword);\n                 }",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/ui/scripts/ui/widgets/detailView.js",
                "sha": "ddd726577475b29a5b1ad7609effbb779935d0a3",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/ui/scripts/ui/widgets/listView.js",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/ui/scripts/ui/widgets/listView.js?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 1,
                "filename": "ui/scripts/ui/widgets/listView.js",
                "patch": "@@ -1256,6 +1256,20 @@\n                     }\n                 }\n \n+\n+                if (field.limitcolor && field.limits) {\n+                    if ((field.limits.lowerlimit in dataItem) && (field.limits.upperlimit in dataItem)) {\n+                        var upperlimit = parseFloat(dataItem[field.limits.upperlimit]);\n+                        var lowerlimit = parseFloat(dataItem[field.limits.lowerlimit ]);\n+                        var value = parseFloat(content);\n+                        if (value <= lowerlimit) {\n+                            $td.addClass('alert-disable-threshold');\n+                        } else if (value <= upperlimit) {\n+                            $td.addClass('alert-notification-threshold');\n+                        }\n+                    }\n+                }\n+\n                 if (field.id == true) id = field.id;\n                 if ($td.index()) $td.addClass('reduced-hide');\n                 if (field.action) {\n@@ -2162,7 +2176,11 @@\n \n         // Infinite scrolling event\n         $listView.bind('scroll', function(event) {\n-            if (args.listView && args.listView.disableInfiniteScrolling) return false;\n+            var listView = args.listView;\n+            if (!listView && args.sections && args.sections.hasOwnProperty(args.activeSection)) {\n+                listView = args.sections[args.activeSection].listView;\n+            }\n+            if (listView && listView.disableInfiniteScrolling) return false;\n             if ($listView.find('tr.last, td.loading:visible').size()) return false;\n \n             clearTimeout(infScrollTimer);",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/ui/scripts/ui/widgets/listView.js",
                "sha": "e61f43c837228da960883a0ba17d8caf714de4be",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/usage/pom.xml",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/usage/pom.xml?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 4,
                "filename": "usage/pom.xml",
                "patch": "@@ -35,6 +35,11 @@\n       <artifactId>cloud-engine-components-api</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    <dependency>\n+        <groupId>org.apache.cloudstack</groupId>\n+        <artifactId>cloud-framework-quota</artifactId>\n+        <version>${project.version}</version>\n+    </dependency>\n     <dependency>\n       <groupId>commons-daemon</groupId>\n       <artifactId>commons-daemon</artifactId>\n@@ -55,10 +60,6 @@\n         <artifactId>slf4j-log4j12</artifactId>\n         <version>1.7.7</version>\n       </dependency>\n-    <dependency>\n-      <groupId>javax.mail</groupId>\n-      <artifactId>mail</artifactId>\n-    </dependency>\n     <dependency>\n       <groupId>org.dbunit</groupId>\n       <artifactId>dbunit</artifactId>",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/usage/pom.xml",
                "sha": "74273a027e2d99e59100ab5348d3c7407d2ad31d",
                "status": "modified"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/usage/resources/usageApplicationContext.xml",
                "changes": 47,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/usage/resources/usageApplicationContext.xml?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 24,
                "filename": "usage/resources/usageApplicationContext.xml",
                "patch": "@@ -17,36 +17,35 @@\n   under the License.\n -->\n <beans xmlns=\"http://www.springframework.org/schema/beans\"\n-  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n-  xmlns:context=\"http://www.springframework.org/schema/context\"\n-  xmlns:tx=\"http://www.springframework.org/schema/tx\" \n-  xmlns:aop=\"http://www.springframework.org/schema/aop\"\n-  xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\"\n+\txmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n+\txsi:schemaLocation=\"http://www.springframework.org/schema/beans\n                       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                       http://www.springframework.org/schema/tx \n                       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd\n                       http://www.springframework.org/schema/aop\n                       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd\n                       http://www.springframework.org/schema/context\n-                      http://www.springframework.org/schema/context/spring-context-3.0.xsd\">                     \n+                      http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n \n-  <context:annotation-config />\n-  <context:component-scan base-package=\"com.cloud.usage, com.cloud.event.dao, com.cloud.user.dao, com.cloud.configuration.dao, com.cloud.alert.dao, com.cloud.domain.dao, org.apache.cloudstack.framework.config.dao\">\n-  </context:component-scan>\n-  \n-  <!--\n-    @DB support\n-  -->\n-  <bean id=\"transactionContextBuilder\" class=\"com.cloud.utils.db.TransactionContextBuilder\" />\n+\t<context:annotation-config />\n+\t<context:component-scan\n+\t\tbase-package=\"com.cloud.usage, com.cloud.event.dao, com.cloud.user.dao, com.cloud.configuration.dao, com.cloud.alert.dao, com.cloud.domain.dao, org.apache.cloudstack.framework.config.dao, org.apache.cloudstack.quota,\n+      org.apache.cloudstack.quota.constant, org.apache.cloudstack.quota.dao, org.apache.cloudstack.quota.vo\">\n+\t</context:component-scan>\n+\n+\t<!-- @DB support -->\n+\t<bean id=\"transactionContextBuilder\" class=\"com.cloud.utils.db.TransactionContextBuilder\" />\n+\n+\t<bean id=\"instantiatePostProcessor\"\n+\t\tclass=\"com.cloud.utils.component.ComponentInstantiationPostProcessor\">\n+\t\t<property name=\"Interceptors\">\n+\t\t\t<list>\n+\t\t\t\t<ref bean=\"transactionContextBuilder\" />\n+\t\t\t</list>\n+\t\t</property>\n+\t</bean>\n+\n+\t<bean id=\"ComponentContext\" class=\"com.cloud.utils.component.ComponentContext\" />\n \n-  <bean id=\"instantiatePostProcessor\" class=\"com.cloud.utils.component.ComponentInstantiationPostProcessor\">\n-    <property name=\"Interceptors\">\n-        <list>\n-            <ref bean=\"transactionContextBuilder\" />\n-        </list>\n-    </property>\n-  </bean>\n-  \n-  <bean id=\"ComponentContext\" class=\"com.cloud.utils.component.ComponentContext\" />\n- \n </beans>",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/usage/resources/usageApplicationContext.xml",
                "sha": "f5cc9a370ee3f16f9391b4b648e1f0690487b4e4",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/cloudstack/blob/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/usage/src/com/cloud/usage/UsageManagerImpl.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/usage/src/com/cloud/usage/UsageManagerImpl.java?ref=987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9",
                "deletions": 1,
                "filename": "usage/src/com/cloud/usage/UsageManagerImpl.java",
                "patch": "@@ -33,10 +33,12 @@\n import javax.inject.Inject;\n import javax.naming.ConfigurationException;\n \n+import org.apache.cloudstack.quota.QuotaAlertManager;\n+import org.apache.cloudstack.quota.QuotaManager;\n+import org.apache.cloudstack.quota.QuotaStatement;\n import org.apache.cloudstack.utils.usage.UsageUtils;\n import org.apache.log4j.Logger;\n import org.springframework.stereotype.Component;\n-\n import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n import org.apache.cloudstack.managed.context.ManagedContextRunnable;\n import org.apache.cloudstack.usage.UsageTypes;\n@@ -142,11 +144,18 @@\n     ConfigurationDao _configDao;\n     @Inject\n     private UsageVMSnapshotDao _usageVMSnapshotDao;\n+    @Inject\n+    private QuotaManager _quotaManager;\n+    @Inject\n+    private QuotaAlertManager _alertManager;\n+    @Inject\n+    private QuotaStatement _quotaStatement;\n \n     private String _version = null;\n     private final Calendar _jobExecTime = Calendar.getInstance();\n     private int _aggregationDuration = 0;\n     private int _sanityCheckInterval = 0;\n+    private boolean _runQuota=false;\n     String _hostname = null;\n     int _pid = 0;\n     TimeZone _usageTimezone = TimeZone.getTimeZone(\"GMT\");;\n@@ -197,6 +206,8 @@ public boolean configure(String name, Map<String, Object> params) throws Configu\n         String execTimeZone = configs.get(\"usage.execution.timezone\");\n         String aggreagationTimeZone = configs.get(\"usage.aggregation.timezone\");\n         String sanityCheckInterval = configs.get(\"usage.sanity.check.interval\");\n+        String quotaEnable = configs.get(\"quota.enable.service\");\n+        _runQuota = Boolean.valueOf(quotaEnable == null ? \"false\" : quotaEnable );\n         if (sanityCheckInterval != null) {\n             _sanityCheckInterval = Integer.parseInt(sanityCheckInterval);\n         }\n@@ -371,6 +382,24 @@ protected void runInContextInternal() {\n             }\n \n             parse(job, startDate, endDate);\n+            if (_runQuota){\n+                try {\n+                    _quotaManager.calculateQuotaUsage();\n+                }\n+                catch (Exception e){\n+                    s_logger.error(\"Exception received while calculating quota\", e);\n+                }\n+                try {\n+                    _quotaStatement.sendStatement();\n+                } catch (Exception e) {\n+                    s_logger.error(\"Exception received while sending statements\", e);\n+                }\n+                try {\n+                    _alertManager.checkAndSendQuotaAlertEmails();\n+                } catch (Exception e) {\n+                    s_logger.error(\"Exception received while sending alerts\", e);\n+                }\n+            }\n         } else {\n             if (s_logger.isDebugEnabled()) {\n                 s_logger.debug(\"Not owner of usage job, skipping...\");",
                "raw_url": "https://github.com/apache/cloudstack/raw/987fcbd441fd9f48f72fe19dab94b8bbcc5df2a9/usage/src/com/cloud/usage/UsageManagerImpl.java",
                "sha": "886405637c07a716f8a78e42e4c5229c3ac827fa",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-8592: Implement Quota service\n\nQuota service while allowing for scalability will make sure that the cloud is\nnot exploited by attacks, careless use and program errors. To address this\nproblem, we propose to employ a quota-enforcement service that allows resource\nusage within certain bounds as defined by policies and available quotas for\nvarious entities.  Quota service extends the functionality of usage server to\nprovide a measurement for the resources used by the accounts and domains using a\ncommon unit referred to as cloud currency in this document. It can be configured\nto ensure that your usage won\u2019t exceed the budget allocated to accounts/domain\nin cloud currency.  It will let user know how much of the cloud resources he is\nusing. It will help the cloud admins, if they want, to ensure that a user does\nnot go beyond his allocated quota. Per usage cycle if a account is found to be\nexceeding its quota then it is locked. Locking an account means that it will not\nbe able to initiat e a new resource allocation request, whether it is more\nstorage or an additional ip. Needless to say quota service as well as any action\non the account is configurable.\n\nChanges from Github code review:\n\n- Added marvin test for quota plugin API\n- removed unused commented code\n- debug messages in debug enabled check\n- checks for nulls, fixed access to member variables and feature\n- changes based on PR comments\n- unit tests for UsageTypes\n- unit tests for all Cmd classes\n- unit tests for all service and manager impls\n- try-catch-finally or try-with-resource in dao impls for failsafe db switching\n- remove dead code\n- add missing quota calculation case (regression fixed)\n- replace tabs with spaces in pom.xmls\n- quota: though default value for quota_calculated is 0, the usage server\n  makes it null while entering usage entries. Flipping the condition so\n  as to acocunt for that.\n- quotatypes: fix NPE in quota type\n- quota framework test fixes\n- made statement period configurable\n- changed default email templates to reflect the fact that exhausted quota may not result in a locked account\n- added quotaUpdateCmd that refreshes quota balances and sends alerts and statements\n- report quotaSummary command returns quota balance, quota usage and state for all account\n- made UI framework changes to allow for text area input in edit views\n- process usage entries that have greater than 0 usage\n- orocess quota entries only if tariff is non zero\n- if there are credit entries but no balance entry create a dummy balance entry\n- remove any credit entries that are before the last balance entry\n  when displaying balance statement\n- on a rerun the last balance is now getting added\n\nFS: https://cwiki.apache.org/confluence/display/CLOUDSTACK/Quota+Service+-+FS\nPR: https://github.com/apache/cloudstack/pull/768\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/f30fbe9a5c7eee1c5f260316f887d9d7881272b3",
        "patched_files": [
            "icon.png",
            "QuotaConfig.java",
            "config.js",
            "dialog.js",
            "listView.js",
            "ParamProcessWorker.java",
            "QuotaUpdateCmd.java",
            "schema-421to430-cleanup.sql",
            "GetUsageRecordsCmd.java",
            "spring-framework-quota-context.xml",
            "UserVmDetailsDao.java",
            "UserVmDetailVO.java",
            "QuotaCreditsDao.java",
            "QuotaUsageVO.java",
            "UsageManagerImpl.java",
            "QuotaService.java",
            "module.properties",
            "QuotaStatementCmd.java",
            "schema-461to470.sql",
            "QuotaCreditsCmd.java",
            "QuotaTariffVO.java",
            "commands.properties.in",
            "UserVmDetailsDaoImpl.java",
            "QuotaAccountVO.java",
            "QuotaSummaryResponse.java",
            "ServiceOfferingVO.java",
            "QuotaStatementImpl.java",
            "QuotaTariffResponse.java",
            "AccountManagerImpl.java",
            "QuotaBalanceVO.java",
            "quota.js",
            "QuotaCreditsDaoImpl.java",
            "ApiConstants.java",
            "quota.css",
            "QuotaBalanceCmd.java",
            "QuotaTypeResponse.java",
            "gen_toc.py",
            "UsageTypes.java",
            "QuotaTariffDaoImpl.java",
            "usageApplicationContext.xml",
            "QuotaStatementResponse.java",
            "UsageDaoImpl.java",
            "QuotaTypes.java",
            "QuotaEmailTemplatesDao.java",
            "QuotaEmailTemplateResponse.java",
            "QuotaUpdateResponse.java",
            "Transaction.java",
            "dictionary.jsp",
            "QuotaBalanceDao.java",
            "BaseCmd.java",
            "test_quota.py",
            "Upgrade461to470.java",
            "QuotaCreditsVO.java",
            "QuotaStatementItemResponse.java",
            "UsageDao.java",
            "QuotaBalanceDaoImpl.java",
            "QuotaEmailTemplatesDaoImpl.java",
            "detailView.js",
            "QuotaTariffDao.java",
            "UsageVO.java",
            "QuotaResponseBuilderImpl.java",
            "QuotaUsageDao.java",
            "ServiceOfferingDaoImpl.java",
            "QuotaBalanceResponse.java",
            "QuotaTariffListCmd.java",
            "Upgrade452to460.java",
            "QuotaUsageDaoImpl.java",
            "ServiceOfferingDao.java",
            "QuotaSummaryCmd.java",
            "QuotaAccountDaoImpl.java",
            "QuotaResponseBuilder.java",
            "QuotaTariffUpdateCmd.java",
            "plugins.js",
            "QuotaAccountDao.java",
            "QuotaCreditsResponse.java",
            "QuotaServiceImpl.java",
            "pom.xml",
            "QuotaAlertManagerImpl.java",
            "QuotaAlertManager.java",
            "messages.properties",
            "QuotaManagerImpl.java",
            "QuotaEmailTemplatesVO.java",
            "QuotaEmailTemplateListCmd.java",
            "QuotaStatement.java",
            "QuotaEmailTemplateUpdateCmd.java",
            "spring-quota-context.xml",
            "QuotaManager.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "QuotaTypesTest.java",
            "QuotaCreditsCmdTest.java",
            "QuotaStatementCmdTest.java",
            "QuotaAlertManagerImplTest.java",
            "QuotaEmailTemplateListCmdTest.java",
            "QuotaEmailTemplateUpdateCmdTest.java",
            "QuotaTariffListCmdTest.java",
            "AccountManagerImplTest.java",
            "QuotaResponseBuilderImplTest.java",
            "QuotaTariffUpdateCmdTest.java",
            "ParamProcessWorkerTest.java",
            "TestTransaction.java",
            "QuotaManagerImplTest.java",
            "BaseCmdTest.java",
            "QuotaServiceImplTest.java",
            "QuotaStatementTest.java",
            "TransactionTest.java",
            "UsageCmdTest.java",
            "ServiceOfferingVOTest.java",
            "QuotaBalanceCmdTest.java"
        ]
    },
    "cloudstack_99ca81a": {
        "bug_id": "cloudstack_99ca81a",
        "commit": "https://github.com/apache/cloudstack/commit/99ca81a676006cc5d351bd94e32e284256d00b4a",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/99ca81a676006cc5d351bd94e32e284256d00b4a/engine/storage/configdrive/src/org/apache/cloudstack/storage/configdrive/ConfigDriveBuilder.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/storage/configdrive/src/org/apache/cloudstack/storage/configdrive/ConfigDriveBuilder.java?ref=99ca81a676006cc5d351bd94e32e284256d00b4a",
                "deletions": 1,
                "filename": "engine/storage/configdrive/src/org/apache/cloudstack/storage/configdrive/ConfigDriveBuilder.java",
                "patch": "@@ -286,7 +286,7 @@ private static void buildOpenStackMetaData(JsonObject metaData, String dataType,\n         if (!NetworkModel.METATDATA_DIR.equals(dataType)) {\n             return;\n         }\n-        if (StringUtils.isNotBlank(content)) {\n+        if (StringUtils.isEmpty(content)) {\n             return;\n         }\n         //keys are a special case in OpenStack format",
                "raw_url": "https://github.com/apache/cloudstack/raw/99ca81a676006cc5d351bd94e32e284256d00b4a/engine/storage/configdrive/src/org/apache/cloudstack/storage/configdrive/ConfigDriveBuilder.java",
                "sha": "55e7979a772f3a67161eec4e3b84b7748c187220",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cloudstack/blob/99ca81a676006cc5d351bd94e32e284256d00b4a/ui/scripts/configuration.js",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/ui/scripts/configuration.js?ref=99ca81a676006cc5d351bd94e32e284256d00b4a",
                "deletions": 4,
                "filename": "ui/scripts/configuration.js",
                "patch": "@@ -2412,14 +2412,17 @@\n                                             if ($useVpcCb.is(':checked')) { //if useVpc is checked,\n                                                 $useVpcCb.removeAttr(\"checked\"); //remove \"checked\" attribute in useVpc\n                                             }\n+                                            $conservemode.css('display', 'inline-block');\n                                         } else if ($guestTypeField.val() == 'Isolated') { //Isolated network offering\n                                             $useVpc.css('display', 'inline-block');\n                                             $supportedServices.css('display', 'inline-block');\n                                             $userDataL2.hide();\n+                                            $conservemode.css('display', 'inline-block');\n                                         } else if ($guestTypeField.val() == 'L2') {\n                                             $useVpc.hide();\n                                             $supportedServices.hide();\n                                             $userDataL2.css('display', 'inline-block');\n+                                            $conservemode.hide();\n                                         }\n                                         var $providers = $useVpcCb.closest('form').find('.dynamic-input select[name!=\"service.Connectivity.provider\"]');\n                                         var $optionsOfProviders = $providers.find('option');\n@@ -3403,6 +3406,9 @@\n                                     } else {\n                                         delete inputData.serviceProviderList;\n                                     }\n+\n+                                    //Conserve mode is irrelevant on L2 network offerings as there are no resources to conserve, do not pass it, true by default on server side\n+                                    delete inputData.conservemode;\n                                 }\n \n                                 if (inputData['forvpc'] == 'on') {\n@@ -3411,10 +3417,12 @@\n                                     delete inputData.forvpc; //if forVpc checkbox is unchecked, do not pass forVpc parameter to API call since we need to keep API call's size as small as possible (p.s. forVpc is defaulted as false at server-side)\n                                 }\n \n-                                if (inputData['conservemode'] == 'on') {\n-                                    delete inputData.conservemode; //if ConserveMode checkbox is checked, do not pass conservemode parameter to API call since we need to keep API call's size as small as possible (p.s. conservemode is defaulted as true at server-side)\n-                                } else {\n-                                    inputData['conservemode'] = false;\n+                                if (inputData['guestIpType'] == \"Shared\" || inputData['guestIpType'] == \"Isolated\") {\n+                                    if (inputData['conservemode'] == 'on') {\n+                                        delete inputData.conservemode; //if ConserveMode checkbox is checked, do not pass conservemode parameter to API call since we need to keep API call's size as small as possible (p.s. conservemode is defaulted as true at server-side)\n+                                    } else {\n+                                        inputData['conservemode'] = false;\n+                                    }\n                                 }\n \n                                 // Make service provider map",
                "raw_url": "https://github.com/apache/cloudstack/raw/99ca81a676006cc5d351bd94e32e284256d00b4a/ui/scripts/configuration.js",
                "sha": "f229d24b19e67173b21f5e9826b7017988f1b6af",
                "status": "modified"
            }
        ],
        "message": "ui: do not send conserve mode on L2 network offering creation from the UI (#2694)\n\nDo not send conserve mode param on L2 network offering creation from the UI. Fix config drive NPE issue on L2 network.",
        "parent": "https://github.com/apache/cloudstack/commit/3af54ec1a8313c51c0faf98bf41e99450a3d0079",
        "patched_files": [
            "configuration.js",
            "ConfigDriveBuilder.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "ConfigDriveBuilderTest.java"
        ]
    },
    "cloudstack_a07497b": {
        "bug_id": "cloudstack_a07497b",
        "commit": "https://github.com/apache/cloudstack/commit/a07497b3731372bf902aae9569e6d579abaec3f8",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/a07497b3731372bf902aae9569e6d579abaec3f8/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/VolumeApiServiceImpl.java?ref=a07497b3731372bf902aae9569e6d579abaec3f8",
                "deletions": 2,
                "filename": "server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "patch": "@@ -1650,12 +1650,12 @@ private Volume orchestrateDetachVolumeFromVM(long vmId, long volumeId) {\n         }\n \n         HostVO host = null;\n-        StoragePoolVO volumePool = _storagePoolDao.findById(volume.getPoolId());\n+        StoragePoolVO volumePool = _storagePoolDao.findByIdIncludingRemoved(volume.getPoolId());\n \n         if (hostId != null) {\n             host = _hostDao.findById(hostId);\n \n-            if (host != null && host.getHypervisorType() == HypervisorType.XenServer && volumePool.isManaged()) {\n+            if (host != null && host.getHypervisorType() == HypervisorType.XenServer && volumePool != null && volumePool.isManaged()) {\n                 sendCommand = true;\n             }\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/a07497b3731372bf902aae9569e6d579abaec3f8/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "sha": "dbae1946a367d7d51e56b298db5e74ed0b5e6a06",
                "status": "modified"
            }
        ],
        "message": "server: fix NPE case in VolumeApiServiceImpl\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n(cherry picked from commit df934c954106a618f8b0aca7e7dfbac890d78244)\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/48ef7e5f280b8eecfa59537cbb1b3d887517b8dc",
        "patched_files": [
            "VolumeApiServiceImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VolumeApiServiceImplTest.java"
        ]
    },
    "cloudstack_a0762bc": {
        "bug_id": "cloudstack_a0762bc",
        "commit": "https://github.com/apache/cloudstack/commit/a0762bc4a7771b47c004f523c8d3d636d5b3a11e",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/a0762bc4a7771b47c004f523c8d3d636d5b3a11e/server/src/com/cloud/network/NetworkModelImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/NetworkModelImpl.java?ref=a0762bc4a7771b47c004f523c8d3d636d5b3a11e",
                "deletions": 0,
                "filename": "server/src/com/cloud/network/NetworkModelImpl.java",
                "patch": "@@ -568,6 +568,9 @@ public boolean isIP6AddressAvailableInNetwork(long networkId) {\n     @Override\n     public boolean isIP6AddressAvailableInVlan(long vlanId) {\n     \tVlanVO vlan = _vlanDao.findById(vlanId);\n+    \tif (vlan.getIp6Range() == null) {\n+    \t\treturn false;\n+    \t}\n     \tlong existedCount = _ipv6Dao.countExistedIpsInVlan(vlanId);\n     \tBigInteger existedInt = BigInteger.valueOf(existedCount);\n     \tBigInteger rangeInt = NetUtils.countIp6InRange(vlan.getIp6Range());",
                "raw_url": "https://github.com/apache/cloudstack/raw/a0762bc4a7771b47c004f523c8d3d636d5b3a11e/server/src/com/cloud/network/NetworkModelImpl.java",
                "sha": "7b3717a161f76466de865785007a5a0d1ea177bc",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/a0762bc4a7771b47c004f523c8d3d636d5b3a11e/utils/src/com/cloud/utils/net/NetUtils.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/com/cloud/utils/net/NetUtils.java?ref=a0762bc4a7771b47c004f523c8d3d636d5b3a11e",
                "deletions": 0,
                "filename": "utils/src/com/cloud/utils/net/NetUtils.java",
                "patch": "@@ -1192,6 +1192,9 @@ private static BigInteger convertIPv6AddressToBigInteger(IPv6Address addr) {\n \t\n \t// Can cover 127 bits\n \tpublic static BigInteger countIp6InRange(String ip6Range) {\n+\t\tif (ip6Range == null) {\n+\t\t\treturn null;\n+\t\t}\n     \tString[] ips = ip6Range.split(\"-\");\n     \tString startIp = ips[0];\n     \tString endIp = ips[0];\n@@ -1214,6 +1217,9 @@ public static BigInteger countIp6InRange(String ip6Range) {\n \t}\n \n \tpublic static boolean isIp6InRange(String ip6, String ip6Range) {\n+\t\tif (ip6Range == null) {\n+\t\t\treturn false;\n+\t\t}\n     \tString[] ips = ip6Range.split(\"-\");\n     \tString startIp = ips[0];\n     \tString endIp = null;",
                "raw_url": "https://github.com/apache/cloudstack/raw/a0762bc4a7771b47c004f523c8d3d636d5b3a11e/utils/src/com/cloud/utils/net/NetUtils.java",
                "sha": "dd40a33934d33de67dba205b8c54b9365437b39b",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/a0762bc4a7771b47c004f523c8d3d636d5b3a11e/utils/test/com/cloud/utils/net/NetUtilsTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/test/com/cloud/utils/net/NetUtilsTest.java?ref=a0762bc4a7771b47c004f523c8d3d636d5b3a11e",
                "deletions": 0,
                "filename": "utils/test/com/cloud/utils/net/NetUtilsTest.java",
                "patch": "@@ -122,5 +122,10 @@ public void testIpv6() {\n     \tassertTrue(NetUtils.isIp6InNetwork(\"1234:5678::1\", \"1234:5678::/64\"));\n     \tassertTrue(NetUtils.isIp6InNetwork(\"1234:5678::ffff:ffff:ffff:ffff\", \"1234:5678::/64\"));\n     \tassertTrue(NetUtils.isIp6InNetwork(\"1234:5678::\", \"1234:5678::/64\"));\n+    \t//Test isIp6InRange\n+    \tassertTrue(NetUtils.isIp6InRange(\"1234:5678:abcd::1\", \"1234:5678:abcd::1-1234:5678:abcd::1\"));\n+    \tassertFalse(NetUtils.isIp6InRange(\"1234:5678:abcd::1\", \"1234:5678:abcd::2-1234:5678:abcd::1\"));\n+    \tassertFalse(NetUtils.isIp6InRange(\"1234:5678:abcd::1\", null));\n+    \tassertTrue(NetUtils.isIp6InRange(\"1234:5678:abcd::1\", \"1234:5678::1-1234:5679::1\"));\n     }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/a0762bc4a7771b47c004f523c8d3d636d5b3a11e/utils/test/com/cloud/utils/net/NetUtilsTest.java",
                "sha": "28bd71f18d774911efd900d2746700361110a9b2",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-1303: Fix NPE when extend vlan with ipv4 only",
        "parent": "https://github.com/apache/cloudstack/commit/6823adb3ac195e1c5fa76a898b5a0c8b011e7a88",
        "patched_files": [
            "NetUtils.java",
            "NetworkModelImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "NetUtilsTest.java"
        ]
    },
    "cloudstack_a1791cb": {
        "bug_id": "cloudstack_a1791cb",
        "commit": "https://github.com/apache/cloudstack/commit/a1791cb4a8fb2cfd455848ca47585d94d9a309e7",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/a1791cb4a8fb2cfd455848ca47585d94d9a309e7/api/src/com/cloud/hypervisor/HypervisorGuru.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/hypervisor/HypervisorGuru.java?ref=a1791cb4a8fb2cfd455848ca47585d94d9a309e7",
                "deletions": 0,
                "filename": "api/src/com/cloud/hypervisor/HypervisorGuru.java",
                "patch": "@@ -17,6 +17,7 @@\n package com.cloud.hypervisor;\n \n import java.util.List;\n+import java.util.Map;\n \n import org.apache.cloudstack.framework.config.ConfigKey;\n \n@@ -81,4 +82,6 @@\n     List<Command> finalizeExpungeNics(VirtualMachine vm, List<NicProfile> nics);\n \n     List<Command> finalizeExpungeVolumes(VirtualMachine vm);\n+\n+    Map<String, String> getClusterSettings(long vmId);\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/a1791cb4a8fb2cfd455848ca47585d94d9a309e7/api/src/com/cloud/hypervisor/HypervisorGuru.java",
                "sha": "6a09dd257afcb6c5326af4e640e2f084031a37e0",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/a1791cb4a8fb2cfd455848ca47585d94d9a309e7/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=a1791cb4a8fb2cfd455848ca47585d94d9a309e7",
                "deletions": 0,
                "filename": "engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -3487,6 +3487,13 @@ private VMInstanceVO orchestrateReConfigureVm(String vmUuid, ServiceOffering old\n                         newServiceOffering.getSpeed(), minMemory * 1024L * 1024L, newServiceOffering.getRamSize() * 1024L * 1024L, newServiceOffering.getLimitCpuUse());\n \n         Long dstHostId = vm.getHostId();\n+        if(vm.getHypervisorType().equals(HypervisorType.VMware)) {\n+            HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vm.getHypervisorType());\n+            Map<String, String> details = null;\n+            details = hvGuru.getClusterSettings(vm.getId());\n+            reconfigureCmd.getVirtualMachine().setDetails(details);\n+        }\n+\n         ItWorkVO work = new ItWorkVO(UUID.randomUUID().toString(), _nodeId, State.Running, vm.getType(), vm.getId());\n         work.setStep(Step.Prepare);\n         work.setResourceType(ItWorkVO.ResourceType.Host);",
                "raw_url": "https://github.com/apache/cloudstack/raw/a1791cb4a8fb2cfd455848ca47585d94d9a309e7/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "038c7afe052ec6b0c64e9584b9f7d7e368a52dd4",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/a1791cb4a8fb2cfd455848ca47585d94d9a309e7/plugins/hypervisors/baremetal/src/com/cloud/baremetal/manager/BareMetalGuru.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/baremetal/src/com/cloud/baremetal/manager/BareMetalGuru.java?ref=a1791cb4a8fb2cfd455848ca47585d94d9a309e7",
                "deletions": 0,
                "filename": "plugins/hypervisors/baremetal/src/com/cloud/baremetal/manager/BareMetalGuru.java",
                "patch": "@@ -84,4 +84,10 @@ public VirtualMachineTO implement(VirtualMachineProfile vm) {\n     public boolean trackVmHostChange() {\n         return false;\n     }\n+\n+    @Override\n+    public Map<String, String> getClusterSettings(long vmId) {\n+        return null;\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/a1791cb4a8fb2cfd455848ca47585d94d9a309e7/plugins/hypervisors/baremetal/src/com/cloud/baremetal/manager/BareMetalGuru.java",
                "sha": "8f439cdc1dd0ed16a31dc62646c8d734804951e4",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/a1791cb4a8fb2cfd455848ca47585d94d9a309e7/plugins/hypervisors/hyperv/src/com/cloud/hypervisor/hyperv/guru/HypervGuru.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/hyperv/src/com/cloud/hypervisor/hyperv/guru/HypervGuru.java?ref=a1791cb4a8fb2cfd455848ca47585d94d9a309e7",
                "deletions": 0,
                "filename": "plugins/hypervisors/hyperv/src/com/cloud/hypervisor/hyperv/guru/HypervGuru.java",
                "patch": "@@ -20,6 +20,7 @@\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n+import java.util.Map;\n \n import javax.ejb.Local;\n import javax.inject.Inject;\n@@ -194,4 +195,10 @@ public int compare(NicTO arg0, NicTO arg1) {\n     public final boolean trackVmHostChange() {\n         return false;\n     }\n+\n+    @Override\n+    public Map<String, String> getClusterSettings(long vmId) {\n+        return null;\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/a1791cb4a8fb2cfd455848ca47585d94d9a309e7/plugins/hypervisors/hyperv/src/com/cloud/hypervisor/hyperv/guru/HypervGuru.java",
                "sha": "2a631429156a89e63a48d4d1ebd4c9534c869424",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/a1791cb4a8fb2cfd455848ca47585d94d9a309e7/plugins/hypervisors/ovm/src/com/cloud/ovm/hypervisor/OvmGuru.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/ovm/src/com/cloud/ovm/hypervisor/OvmGuru.java?ref=a1791cb4a8fb2cfd455848ca47585d94d9a309e7",
                "deletions": 0,
                "filename": "plugins/hypervisors/ovm/src/com/cloud/ovm/hypervisor/OvmGuru.java",
                "patch": "@@ -16,6 +16,8 @@\n // under the License.\n package com.cloud.ovm.hypervisor;\n \n+import java.util.Map;\n+\n import javax.ejb.Local;\n import javax.inject.Inject;\n \n@@ -58,4 +60,10 @@ public boolean trackVmHostChange() {\n         return true;\n     }\n \n+    @Override\n+    public Map<String, String> getClusterSettings(long vmId) {\n+        return null;\n+    }\n+\n+\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/a1791cb4a8fb2cfd455848ca47585d94d9a309e7/plugins/hypervisors/ovm/src/com/cloud/ovm/hypervisor/OvmGuru.java",
                "sha": "90e4b5742b67fe3af01422ae5c5a04aaaa3867d1",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/a1791cb4a8fb2cfd455848ca47585d94d9a309e7/plugins/hypervisors/simulator/src/com/cloud/simulator/SimulatorGuru.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/simulator/src/com/cloud/simulator/SimulatorGuru.java?ref=a1791cb4a8fb2cfd455848ca47585d94d9a309e7",
                "deletions": 0,
                "filename": "plugins/hypervisors/simulator/src/com/cloud/simulator/SimulatorGuru.java",
                "patch": "@@ -16,6 +16,8 @@\n // under the License.\n package com.cloud.simulator;\n \n+import java.util.Map;\n+\n import javax.ejb.Local;\n import javax.inject.Inject;\n \n@@ -56,4 +58,10 @@ public VirtualMachineTO implement(VirtualMachineProfile vm) {\n     public boolean trackVmHostChange() {\n         return false;\n     }\n+\n+    @Override\n+    public Map<String, String> getClusterSettings(long vmId) {\n+        return null;\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/a1791cb4a8fb2cfd455848ca47585d94d9a309e7/plugins/hypervisors/simulator/src/com/cloud/simulator/SimulatorGuru.java",
                "sha": "378134a9856f985a215033397cecb7a05206e0d2",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cloudstack/blob/a1791cb4a8fb2cfd455848ca47585d94d9a309e7/plugins/hypervisors/vmware/src/com/cloud/hypervisor/guru/VMwareGuru.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/com/cloud/hypervisor/guru/VMwareGuru.java?ref=a1791cb4a8fb2cfd455848ca47585d94d9a309e7",
                "deletions": 0,
                "filename": "plugins/hypervisors/vmware/src/com/cloud/hypervisor/guru/VMwareGuru.java",
                "patch": "@@ -552,4 +552,13 @@ public String getConfigComponentName() {\n \n         return commands;\n     }\n+\n+    @Override\n+    public Map<String, String> getClusterSettings(long vmId) {\n+        Map<String, String> details = new HashMap<String, String>();\n+        long clusterId = getClusterId(vmId);\n+        details.put(VmwareReserveCpu.key(), VmwareReserveCpu.valueIn(clusterId).toString());\n+        details.put(VmwareReserveMemory.key(), VmwareReserveMemory.valueIn(clusterId).toString());\n+        return details;\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/a1791cb4a8fb2cfd455848ca47585d94d9a309e7/plugins/hypervisors/vmware/src/com/cloud/hypervisor/guru/VMwareGuru.java",
                "sha": "808cb5bdeea2a347964e135dc526bf610977e968",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/a1791cb4a8fb2cfd455848ca47585d94d9a309e7/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/XenServerGuru.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/XenServerGuru.java?ref=a1791cb4a8fb2cfd455848ca47585d94d9a309e7",
                "deletions": 0,
                "filename": "plugins/hypervisors/xenserver/src/com/cloud/hypervisor/XenServerGuru.java",
                "patch": "@@ -18,6 +18,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n \n import javax.ejb.Local;\n import javax.inject.Inject;\n@@ -128,6 +129,11 @@ public boolean trackVmHostChange() {\n         return true;\n     }\n \n+    @Override\n+    public Map<String, String> getClusterSettings(long vmId) {\n+        return null;\n+    }\n+\n     @Override\n     public List<Command> finalizeExpungeVolumes(VirtualMachine vm) {\n         List<Command> commands = new ArrayList<Command>();",
                "raw_url": "https://github.com/apache/cloudstack/raw/a1791cb4a8fb2cfd455848ca47585d94d9a309e7/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/XenServerGuru.java",
                "sha": "f8aabff64a054311166f437b528190e5af773d64",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/a1791cb4a8fb2cfd455848ca47585d94d9a309e7/server/src/com/cloud/hypervisor/HypervisorGuruBase.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/hypervisor/HypervisorGuruBase.java?ref=a1791cb4a8fb2cfd455848ca47585d94d9a309e7",
                "deletions": 0,
                "filename": "server/src/com/cloud/hypervisor/HypervisorGuruBase.java",
                "patch": "@@ -190,4 +190,10 @@ protected VirtualMachineTO toVirtualMachineTO(VirtualMachineProfile vmProfile) {\n     public List<Command> finalizeExpungeVolumes(VirtualMachine vm) {\n         return null;\n     }\n+\n+    @Override\n+    public Map<String, String> getClusterSettings(long vmId) {\n+        return null;\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/a1791cb4a8fb2cfd455848ca47585d94d9a309e7/server/src/com/cloud/hypervisor/HypervisorGuruBase.java",
                "sha": "308c327177f48efd6b9b47ccfbc0c12d461f7c01",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/a1791cb4a8fb2cfd455848ca47585d94d9a309e7/server/src/com/cloud/hypervisor/KVMGuru.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/hypervisor/KVMGuru.java?ref=a1791cb4a8fb2cfd455848ca47585d94d9a309e7",
                "deletions": 0,
                "filename": "server/src/com/cloud/hypervisor/KVMGuru.java",
                "patch": "@@ -16,6 +16,8 @@\n // under the License.\n package com.cloud.hypervisor;\n \n+import java.util.Map;\n+\n import javax.ejb.Local;\n import javax.inject.Inject;\n \n@@ -86,4 +88,10 @@ public VirtualMachineTO implement(VirtualMachineProfile vm) {\n     public boolean trackVmHostChange() {\n         return false;\n     }\n+\n+    @Override\n+    public Map<String, String> getClusterSettings(long vmId) {\n+        return null;\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/a1791cb4a8fb2cfd455848ca47585d94d9a309e7/server/src/com/cloud/hypervisor/KVMGuru.java",
                "sha": "a2534bdef2ab266fdb1b7b2969c6597b18970f3b",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/a1791cb4a8fb2cfd455848ca47585d94d9a309e7/server/src/com/cloud/hypervisor/LXCGuru.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/hypervisor/LXCGuru.java?ref=a1791cb4a8fb2cfd455848ca47585d94d9a309e7",
                "deletions": 0,
                "filename": "server/src/com/cloud/hypervisor/LXCGuru.java",
                "patch": "@@ -16,6 +16,8 @@\n // under the License.\n package com.cloud.hypervisor;\n \n+import java.util.Map;\n+\n import javax.ejb.Local;\n import javax.inject.Inject;\n \n@@ -73,4 +75,9 @@ public VirtualMachineTO implement(VirtualMachineProfile vm) {\n     public boolean trackVmHostChange() {\n         return false;\n     }\n+\n+    @Override\n+    public Map<String, String> getClusterSettings(long vmId) {\n+        return null;\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/a1791cb4a8fb2cfd455848ca47585d94d9a309e7/server/src/com/cloud/hypervisor/LXCGuru.java",
                "sha": "2becdbd79e617315cb9b6366e15c9c1a26eacabf",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-8088: VM scale up is failing in vmware with Unable to execute ScaleVmCommand due to java.lang.NullPointerException\n\n(cherry picked from commit 1df0453d27e8378065c15878067fc9d2dc961e30)\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/8676ff26e09162dacb7485545354e847ca27e3fe",
        "patched_files": [
            "VirtualMachineManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_a216046": {
        "bug_id": "cloudstack_a216046",
        "commit": "https://github.com/apache/cloudstack/commit/a2160461911bec0365c5a6a2eaff84cc396661ad",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/a2160461911bec0365c5a6a2eaff84cc396661ad/server/src/com/cloud/api/dispatch/ParamProcessWorker.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/dispatch/ParamProcessWorker.java?ref=a2160461911bec0365c5a6a2eaff84cc396661ad",
                "deletions": 4,
                "filename": "server/src/com/cloud/api/dispatch/ParamProcessWorker.java",
                "patch": "@@ -33,7 +33,6 @@\n \n import javax.inject.Inject;\n \n-\n import org.apache.log4j.Logger;\n \n import org.apache.cloudstack.acl.ControlledEntity;\n@@ -220,16 +219,17 @@ public void processParameters(final BaseCmd cmd, final Map params) {\n \n     private void doAccessChecks(BaseCmd cmd, Map<Object, AccessType> entitiesToAccess) {\n         Account caller = CallContext.current().getCallingAccount();\n-        Account owner = _accountMgr.getActiveAccountById(cmd.getEntityOwnerId());\n+        // due to deleteAccount design flaw CLOUDSTACK-6588, we should still include those removed account as well to clean up leftover resources from that account\n+        Account owner = _accountMgr.getAccount(cmd.getEntityOwnerId());\n \n         if (cmd instanceof BaseAsyncCreateCmd) {\n             // check that caller can access the owner account.\n-            _accountMgr.checkAccess(caller, null, true, owner);\n+            _accountMgr.checkAccess(caller, null, false, owner);\n         }\n \n         if (!entitiesToAccess.isEmpty()) {\n             // check that caller can access the owner account.\n-            _accountMgr.checkAccess(caller, null, true, owner);\n+            _accountMgr.checkAccess(caller, null, false, owner);\n             for (Map.Entry<Object,AccessType>entry : entitiesToAccess.entrySet()) {\n                 Object entity = entry.getKey();\n                 if (entity instanceof ControlledEntity) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/a2160461911bec0365c5a6a2eaff84cc396661ad/server/src/com/cloud/api/dispatch/ParamProcessWorker.java",
                "sha": "ad90812c6c586154c291c33507fe1927105bcd29",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-7165:[Automation] NPE observed during restart and expunge VM.",
        "parent": "https://github.com/apache/cloudstack/commit/f4757a198a95e71dc3b5f8d42ac2c88e0b74d590",
        "patched_files": [
            "ParamProcessWorker.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "ParamProcessWorkerTest.java"
        ]
    },
    "cloudstack_a3b8657": {
        "bug_id": "cloudstack_a3b8657",
        "commit": "https://github.com/apache/cloudstack/commit/a3b86573b921ee470ac60b3e801a6d18f7939658",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/a3b86573b921ee470ac60b3e801a6d18f7939658/server/src/com/cloud/network/NetworkManagerImpl.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/NetworkManagerImpl.java?ref=a3b86573b921ee470ac60b3e801a6d18f7939658",
                "deletions": 7,
                "filename": "server/src/com/cloud/network/NetworkManagerImpl.java",
                "patch": "@@ -2236,33 +2236,32 @@ public void release(VirtualMachineProfile vmProfile, boolean forced) throws\n             ConcurrentOperationException, ResourceUnavailableException {\n         List<NicVO> nics = _nicDao.listByVmId(vmProfile.getId());\n         for (NicVO nic : nics) {\n-            releaseNic(vmProfile, nic);\n+            releaseNic(vmProfile, nic.getId());\n         }\n     }\n \n-\n+    \n     @Override\n     @DB\n     public void releaseNic(VirtualMachineProfile vmProfile, Nic nic)\n             throws ConcurrentOperationException, ResourceUnavailableException {\n-        NicVO nicVO = _nicDao.findById(nic.getId());\n-        releaseNic(vmProfile, nicVO);\n+        releaseNic(vmProfile, nic.getId());\n     }\n \n     @DB\n-    protected void releaseNic(VirtualMachineProfile vmProfile, NicVO nicVO)\n+    protected void releaseNic(VirtualMachineProfile vmProfile, long nicId)\n             throws ConcurrentOperationException, ResourceUnavailableException {\n         //lock the nic\n         Transaction txn = Transaction.currentTxn();\n         txn.start();\n \n-        NicVO nic = _nicDao.lockRow(nicVO.getId(), true);\n+        NicVO nic = _nicDao.lockRow(nicId, true);\n         if (nic == null) {\n             throw new ConcurrentOperationException(\"Unable to acquire lock on nic \" + nic);\n         }\n \n         Nic.State originalState = nic.getState();\n-        NetworkVO network = _networksDao.findById(nicVO.getNetworkId());\n+        NetworkVO network = _networksDao.findById(nic.getNetworkId());\n \n         if (originalState == Nic.State.Reserved || originalState == Nic.State.Reserving) {\n             if (nic.getReservationStrategy() == Nic.ReservationStrategy.Start) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/a3b86573b921ee470ac60b3e801a6d18f7939658/server/src/com/cloud/network/NetworkManagerImpl.java",
                "sha": "ea3d552ca80b13f14a85ab66f4d7b728b7d9f3d3",
                "status": "modified"
            },
            {
                "additions": 55,
                "blob_url": "https://github.com/apache/cloudstack/blob/a3b86573b921ee470ac60b3e801a6d18f7939658/server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 84,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=a3b86573b921ee470ac60b3e801a6d18f7939658",
                "deletions": 29,
                "filename": "server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -2953,6 +2953,7 @@ public boolean removeNicFromVm(VirtualMachine vm, NicVO nic) throws ConcurrentOp\n     }\n \n     @Override\n+    @DB\n     public boolean removeVmFromNetwork(VirtualMachine vm, Network network, URI broadcastUri) throws ConcurrentOperationException, ResourceUnavailableException {\n         VMInstanceVO vmVO = _vmDao.findById(vm.getId());\n         ReservationContext context = new ReservationContextImpl(null, null, _accountMgr.getActiveUser(User.UID_SYSTEM),\n@@ -2968,53 +2969,78 @@ public boolean removeVmFromNetwork(VirtualMachine vm, Network network, URI broad\n         VirtualMachineTO vmTO = hvGuru.implement(vmProfile);\n \n         Nic nic = null;\n-\n         if (broadcastUri != null) {\n             nic = _nicsDao.findByNetworkIdInstanceIdAndBroadcastUri(network.getId(), vm.getId(), broadcastUri.toString());\n         } else {\n             nic = _networkModel.getNicInNetwork(vm.getId(), network.getId());\n         }\n-\n-        if (nic == null) {\n+        \n+        if (nic == null){\n             s_logger.warn(\"Could not get a nic with \" + network);\n             return false;\n         }\n-\n+        \n         // don't delete default NIC on a user VM\n         if (nic.isDefaultNic() && vm.getType() == VirtualMachine.Type.User) {\n             s_logger.warn(\"Failed to remove nic from \" + vm + \" in \" + network + \", nic is default.\");\n             throw new CloudRuntimeException(\"Failed to remove nic from \" + vm + \" in \" + network + \", nic is default.\");\n         }\n \n-        NicProfile nicProfile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(),\n-                _networkModel.getNetworkRate(network.getId(), vm.getId()),\n-                _networkModel.isSecurityGroupSupportedInNetwork(network),\n-                _networkModel.getNetworkTag(vmProfile.getVirtualMachine().getHypervisorType(), network));\n-\n-        //1) Unplug the nic\n-        if (vm.getState() == State.Running) {\n-            NicTO nicTO = toNicTO(nicProfile, vmProfile.getVirtualMachine().getHypervisorType());\n-            s_logger.debug(\"Un-plugging nic for vm \" + vm + \" from network \" + network);\n-            boolean result = unplugNic(network, nicTO, vmTO, context, dest);\n-            if (result) {\n-                s_logger.debug(\"Nic is unplugged successfully for vm \" + vm + \" in network \" + network);\n-            } else {\n-                s_logger.warn(\"Failed to unplug nic for the vm \" + vm + \" from network \" + network);\n-                return false;\n+        //Lock on nic is needed here\n+        Nic lock = _nicsDao.acquireInLockTable(nic.getId());\n+        if (lock == null) {\n+            //check if nic is still there. Return if it was released already\n+            if (_nicsDao.findById(nic.getId()) == null) {\n+                if (s_logger.isDebugEnabled()) {\n+                    s_logger.debug(\"Not need to remove the vm \" + vm + \" from network \" + network + \" as the vm doesn't have nic in this network\");\n+                }\n+                return true;\n             }\n-        } else if (vm.getState() != State.Stopped) {\n-            s_logger.warn(\"Unable to remove vm \" + vm + \" from network  \" + network);\n-            throw new ResourceUnavailableException(\"Unable to remove vm \" + vm + \" from network, is not in the right state\",\n-                    DataCenter.class, vm.getDataCenterId());\n+            throw new ConcurrentOperationException(\"Unable to lock nic \" + nic.getId());\n+        }\n+        \n+        if (s_logger.isDebugEnabled()) {\n+            s_logger.debug(\"Lock is acquired for nic id \" + lock.getId() + \" as a part of remove vm \" + vm + \" from network \" + network);\n         }\n+        \n+        try {\n+            NicProfile nicProfile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(),\n+                    _networkModel.getNetworkRate(network.getId(), vm.getId()),\n+                    _networkModel.isSecurityGroupSupportedInNetwork(network),\n+                    _networkModel.getNetworkTag(vmProfile.getVirtualMachine().getHypervisorType(), network));\n+\n+            //1) Unplug the nic\n+            if (vm.getState() == State.Running) {\n+                NicTO nicTO = toNicTO(nicProfile, vmProfile.getVirtualMachine().getHypervisorType());\n+                s_logger.debug(\"Un-plugging nic for vm \" + vm + \" from network \" + network);\n+                boolean result = unplugNic(network, nicTO, vmTO, context, dest);\n+                if (result) {\n+                    s_logger.debug(\"Nic is unplugged successfully for vm \" + vm + \" in network \" + network );\n+                } else {\n+                    s_logger.warn(\"Failed to unplug nic for the vm \" + vm + \" from network \" + network);\n+                    return false;\n+                }\n+            } else if (vm.getState() != State.Stopped) {\n+                s_logger.warn(\"Unable to remove vm \" + vm + \" from network  \" + network);\n+                throw new ResourceUnavailableException(\"Unable to remove vm \" + vm + \" from network, is not in the right state\",\n+                        DataCenter.class, vm.getDataCenterId());\n+            }\n \n-        //2) Release the nic\n-        _networkMgr.releaseNic(vmProfile, nic);\n-        s_logger.debug(\"Successfully released nic \" + nic + \"for vm \" + vm);\n+            //2) Release the nic\n+            _networkMgr.releaseNic(vmProfile, nic);\n+            s_logger.debug(\"Successfully released nic \" + nic +  \"for vm \" + vm);\n \n-        //3) Remove the nic\n-        _networkMgr.removeNic(vmProfile, nic);\n-        return true;\n+            //3) Remove the nic\n+            _networkMgr.removeNic(vmProfile, nic);\n+            return true;\n+        } finally {\n+            if (lock != null) {\n+                _nicsDao.releaseFromLockTable(lock.getId());\n+                if (s_logger.isDebugEnabled()) {\n+                    s_logger.debug(\"Lock is released for nic id \" + lock.getId() + \" as a part of remove vm \" + vm + \" from network \" + network);\n+                }\n+            }\n+        }\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/cloudstack/raw/a3b86573b921ee470ac60b3e801a6d18f7939658/server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "08bca43e733cf26eb0af9a7a73184a511d211c61",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-4020: lock nic entry in releaseNic method. Otherwise multiple threads can try to release the same nic at the same time, and it will lead to NPEs and backend failures\n\nConflicts:\n\tserver/src/com/cloud/network/NetworkManagerImpl.java\n\tserver/src/com/cloud/vm/VirtualMachineManagerImpl.java",
        "parent": "https://github.com/apache/cloudstack/commit/3587127df6eac5429dd4f10609a2d09a17e1a5fa",
        "patched_files": [
            "VirtualMachineManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_a5004e3": {
        "bug_id": "cloudstack_a5004e3",
        "commit": "https://github.com/apache/cloudstack/commit/a5004e37ad4609b98e5d5a78452e6fb8858f6504",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/a5004e37ad4609b98e5d5a78452e6fb8858f6504/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/VolumeApiServiceImpl.java?ref=a5004e37ad4609b98e5d5a78452e6fb8858f6504",
                "deletions": 2,
                "filename": "server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "patch": "@@ -343,8 +343,11 @@ public VolumeVO doInTransaction(TransactionStatus status) {\n                 volume.setDomainId((owner == null) ? Domain.ROOT_DOMAIN : owner.getDomainId());\n \n                 if (diskOfferingId == null) {\n-                    long defaultDiskOfferingId = _diskOfferingDao.findByUniqueName(\"Cloud.com-Custom\").getId();\n-                    volume.setDiskOfferingId(defaultDiskOfferingId);\n+                    DiskOfferingVO diskOfferingVO = _diskOfferingDao.findByUniqueName(\"Cloud.com-Custom\");\n+                    if (diskOfferingVO != null) {\n+                        long defaultDiskOfferingId = diskOfferingVO.getId();\n+                        volume.setDiskOfferingId(defaultDiskOfferingId);\n+                    }\n                 } else {\n                     volume.setDiskOfferingId(diskOfferingId);\n                 }",
                "raw_url": "https://github.com/apache/cloudstack/raw/a5004e37ad4609b98e5d5a78452e6fb8858f6504/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "sha": "cf18555bfcac7694822d1f88e6600bd6555c7583",
                "status": "modified"
            }
        ],
        "message": "CID-1233084: Fix NPE in persisting volume in VolumeApiServiceImpl\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/bdee5e37343f6f4e5be2acd6cbc6e172e0d1fe36",
        "patched_files": [
            "VolumeApiServiceImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VolumeApiServiceImplTest.java"
        ]
    },
    "cloudstack_a5a65c7": {
        "bug_id": "cloudstack_a5a65c7",
        "commit": "https://github.com/apache/cloudstack/commit/a5a65c7b551ee5cc32588997937267b716eff681",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/a5a65c7b551ee5cc32588997937267b716eff681/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java?ref=a5a65c7b551ee5cc32588997937267b716eff681",
                "deletions": 2,
                "filename": "engine/orchestration/src/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java",
                "patch": "@@ -937,10 +937,10 @@ public Volume migrateVolume(Volume volume, StoragePool destPool) throws StorageU\n             return result.getVolume();\n         } catch (InterruptedException e) {\n             s_logger.debug(\"migrate volume failed\", e);\n-            return null;\n+            throw new CloudRuntimeException(e.getMessage());\n         } catch (ExecutionException e) {\n             s_logger.debug(\"migrate volume failed\", e);\n-            return null;\n+            throw new CloudRuntimeException(e.getMessage());\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/a5a65c7b551ee5cc32588997937267b716eff681/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java",
                "sha": "1b87ccf44900af0389b059cabde8d333610b48ee",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/cloudstack/blob/a5a65c7b551ee5cc32588997937267b716eff681/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/VolumeApiServiceImpl.java?ref=a5a65c7b551ee5cc32588997937267b716eff681",
                "deletions": 10,
                "filename": "server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "patch": "@@ -1795,6 +1795,8 @@ public Volume migrateVolume(MigrateVolumeCmd cmd) {\n                 if (jobResult != null) {\n                     if (jobResult instanceof ConcurrentOperationException)\n                         throw (ConcurrentOperationException)jobResult;\n+                    else if (jobResult instanceof RuntimeException)\n+                        throw (RuntimeException)jobResult;\n                     else if (jobResult instanceof Throwable)\n                         throw new RuntimeException(\"Unexpected exception\", (Throwable)jobResult);\n                 }\n@@ -1817,35 +1819,39 @@ private Volume orchestrateMigrateVolume(long volumeId, long destPoolId, boolean\n         assert (destPool != null);\n \n         Volume newVol = null;\n-        if (liveMigrateVolume) {\n-            newVol = liveMigrateVolume(vol, destPool);\n-        } else {\n-            try {\n+        try {\n+            if (liveMigrateVolume) {\n+                newVol = liveMigrateVolume(vol, destPool);\n+            } else {\n                 newVol = _volumeMgr.migrateVolume(vol, destPool);\n-            } catch (StorageUnavailableException e) {\n-                s_logger.debug(\"Failed to migrate volume\", e);\n             }\n+        } catch (StorageUnavailableException e) {\n+            s_logger.debug(\"Failed to migrate volume\", e);\n+            throw new CloudRuntimeException(e.getMessage());\n+        }  catch (Exception e) {\n+            s_logger.debug(\"Failed to migrate volume\", e);\n+            throw new CloudRuntimeException(e.getMessage());\n         }\n         return newVol;\n     }\n \n     @DB\n-    protected Volume liveMigrateVolume(Volume volume, StoragePool destPool) {\n+    protected Volume liveMigrateVolume(Volume volume, StoragePool destPool) throws StorageUnavailableException {\n         VolumeInfo vol = volFactory.getVolume(volume.getId());\n         AsyncCallFuture<VolumeApiResult> future = volService.migrateVolume(vol, (DataStore)destPool);\n         try {\n             VolumeApiResult result = future.get();\n             if (result.isFailed()) {\n                 s_logger.debug(\"migrate volume failed:\" + result.getResult());\n-                return null;\n+                throw new StorageUnavailableException(\"Migrate volume failed: \" + result.getResult(), destPool.getId());\n             }\n             return result.getVolume();\n         } catch (InterruptedException e) {\n             s_logger.debug(\"migrate volume failed\", e);\n-            return null;\n+            throw new CloudRuntimeException(e.getMessage());\n         } catch (ExecutionException e) {\n             s_logger.debug(\"migrate volume failed\", e);\n-            return null;\n+            throw new CloudRuntimeException(e.getMessage());\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/a5a65c7b551ee5cc32588997937267b716eff681/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "sha": "7fa600a8f36f9654cc8030c590b8a26e94892180",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-8122. Handle NPE thrown during migration failures.\nWhen migration fails instead of returning NULL, throw the exception.",
        "parent": "https://github.com/apache/cloudstack/commit/ac491c96075d65e35157380fe7d28fdd917c0e90",
        "patched_files": [
            "VolumeApiServiceImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VolumeApiServiceImplTest.java"
        ]
    },
    "cloudstack_a718746": {
        "bug_id": "cloudstack_a718746",
        "commit": "https://github.com/apache/cloudstack/commit/a71874682c4c94eed3f17216d260cc3d57214a85",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/a71874682c4c94eed3f17216d260cc3d57214a85/server/src/main/java/com/cloud/storage/VolumeApiServiceImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/storage/VolumeApiServiceImpl.java?ref=a71874682c4c94eed3f17216d260cc3d57214a85",
                "deletions": 2,
                "filename": "server/src/main/java/com/cloud/storage/VolumeApiServiceImpl.java",
                "patch": "@@ -673,8 +673,6 @@ public VolumeVO allocVolume(CreateVolumeCmd cmd) throws ResourceAllocationExcept\n                 zoneId = snapshotCheck.getDataCenterId();\n             }\n \n-            _configMgr.checkDiskOfferingAccess(null, diskOffering, _dcDao.findById(zoneId));\n-\n             if (diskOffering == null) { // Pure snapshot is being used to create volume.\n                 diskOfferingId = snapshotCheck.getDiskOfferingId();\n                 diskOffering = _diskOfferingDao.findById(diskOfferingId);\n@@ -689,6 +687,8 @@ public VolumeVO allocVolume(CreateVolumeCmd cmd) throws ResourceAllocationExcept\n                 }\n             }\n \n+            _configMgr.checkDiskOfferingAccess(null, diskOffering, _dcDao.findById(zoneId));\n+\n             // check snapshot permissions\n             _accountMgr.checkAccess(caller, null, true, snapshotCheck);\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/a71874682c4c94eed3f17216d260cc3d57214a85/server/src/main/java/com/cloud/storage/VolumeApiServiceImpl.java",
                "sha": "e60225135081f51d68db502b76741c6dd8c7f377",
                "status": "modified"
            }
        ],
        "message": "server: fix checking disk offering access for snapshot volume (#3791)\n\nFixes #3783\r\nAs reported in the issue, creating volumes from pure snapshot fails with NPE. This is due to order of calls where disk offering access is checked before checking disk offering value. This PR fixes the same.\r\n\r\nSigned-off-by: Abhishek Kumar <abhishek.mrt22@gmail.com>",
        "parent": "https://github.com/apache/cloudstack/commit/75aa6e36598d211c6aef385d916d14e3b93303c7",
        "patched_files": [
            "VolumeApiServiceImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VolumeApiServiceImplTest.java"
        ]
    },
    "cloudstack_a767407": {
        "bug_id": "cloudstack_a767407",
        "commit": "https://github.com/apache/cloudstack/commit/a767407fd285543dff5a99ec922ae00aa6ccb785",
        "file": [
            {
                "additions": 71,
                "blob_url": "https://github.com/apache/cloudstack/blob/a767407fd285543dff5a99ec922ae00aa6ccb785/engine/orchestration/src/com/cloud/agent/manager/AgentManagerImpl.java",
                "changes": 142,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/agent/manager/AgentManagerImpl.java?ref=a767407fd285543dff5a99ec922ae00aa6ccb785",
                "deletions": 71,
                "filename": "engine/orchestration/src/com/cloud/agent/manager/AgentManagerImpl.java",
                "patch": "@@ -121,10 +121,8 @@\n     protected static final Logger status_logger = Logger.getLogger(Status.class);\n \n     /**\n-     * _agents is a ConcurrentHashMap, but it is used from within a synchronized block.\n-     * This will be reported by findbugs as JLM_JSR166_UTILCONCURRENT_MONITORENTER.\n-     * Maybe a ConcurrentHashMap is not the right thing to use here, but i'm not sure\n-     * so i leave it alone.\n+     * _agents is a ConcurrentHashMap, but it is used from within a synchronized block. This will be reported by findbugs as JLM_JSR166_UTILCONCURRENT_MONITORENTER. Maybe a\n+     * ConcurrentHashMap is not the right thing to use here, but i'm not sure so i leave it alone.\n      */\n     protected ConcurrentHashMap<Long, AgentAttache> _agents = new ConcurrentHashMap<Long, AgentAttache>(10007);\n     protected List<Pair<Integer, Listener>> _hostMonitors = new ArrayList<Pair<Integer, Listener>>(17);\n@@ -176,27 +174,27 @@\n     ResourceManager _resourceMgr;\n \n     protected final ConfigKey<Integer> Workers = new ConfigKey<Integer>(\"Advanced\", Integer.class, \"workers\", \"5\",\n-            \"Number of worker threads handling remote agent connections.\", false);\n+                    \"Number of worker threads handling remote agent connections.\", false);\n     protected final ConfigKey<Integer> Port = new ConfigKey<Integer>(\"Advanced\", Integer.class, \"port\", \"8250\", \"Port to listen on for remote agent connections.\", false);\n     protected final ConfigKey<Integer> PingInterval = new ConfigKey<Integer>(\"Advanced\", Integer.class, \"ping.interval\", \"60\",\n-            \"Interval to send application level pings to make sure the connection is still working\", false);\n+                    \"Interval to send application level pings to make sure the connection is still working\", false);\n     protected final ConfigKey<Float> PingTimeout = new ConfigKey<Float>(\"Advanced\", Float.class, \"ping.timeout\", \"2.5\",\n-            \"Multiplier to ping.interval before announcing an agent has timed out\", true);\n+                    \"Multiplier to ping.interval before announcing an agent has timed out\", true);\n     protected final ConfigKey<Integer> AlertWait = new ConfigKey<Integer>(\"Advanced\", Integer.class, \"alert.wait\", \"1800\",\n-            \"Seconds to wait before alerting on a disconnected agent\", true);\n+                    \"Seconds to wait before alerting on a disconnected agent\", true);\n     protected final ConfigKey<Integer> DirectAgentLoadSize = new ConfigKey<Integer>(\"Advanced\", Integer.class, \"direct.agent.load.size\", \"16\",\n-            \"The number of direct agents to load each time\", false);\n+                    \"The number of direct agents to load each time\", false);\n     protected final ConfigKey<Integer> DirectAgentPoolSize = new ConfigKey<Integer>(\"Advanced\", Integer.class, \"direct.agent.pool.size\", \"500\",\n-            \"Default size for DirectAgentPool\", false);\n+                    \"Default size for DirectAgentPool\", false);\n     protected final ConfigKey<Float> DirectAgentThreadCap = new ConfigKey<Float>(\"Advanced\", Float.class, \"direct.agent.thread.cap\", \"1\",\n-            \"Percentage (as a value between 0 and 1) of direct.agent.pool.size to be used as upper thread cap for a single direct agent to process requests\", false);\n+                    \"Percentage (as a value between 0 and 1) of direct.agent.pool.size to be used as upper thread cap for a single direct agent to process requests\", false);\n     protected final ConfigKey<Boolean> CheckTxnBeforeSending = new ConfigKey<Boolean>(\n-            \"Developer\",\n-            Boolean.class,\n-            \"check.txn.before.sending.agent.commands\",\n-            \"false\",\n-            \"This parameter allows developers to enable a check to see if a transaction wraps commands that are sent to the resource.  This is not to be enabled on production systems.\",\n-            true);\n+                    \"Developer\",\n+                    Boolean.class,\n+                    \"check.txn.before.sending.agent.commands\",\n+                    \"false\",\n+                    \"This parameter allows developers to enable a check to see if a transaction wraps commands that are sent to the resource.  This is not to be enabled on production systems.\",\n+                    true);\n \n     @Override\n     public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n@@ -208,15 +206,15 @@ public boolean configure(final String name, final Map<String, Object> params) th\n         _nodeId = ManagementServerNode.getManagementServerId();\n         s_logger.info(\"Configuring AgentManagerImpl. management server node id(msid): \" + _nodeId);\n \n-        final long lastPing = (System.currentTimeMillis() >> 10) - (long)(PingTimeout.value() * PingInterval.value());\n+        final long lastPing = (System.currentTimeMillis() >> 10) - (long) (PingTimeout.value() * PingInterval.value());\n         _hostDao.markHostsAsDisconnected(_nodeId, lastPing);\n \n         registerForHostEvents(new BehindOnPingListener(), true, true, false);\n \n         _executor = new ThreadPoolExecutor(threads, threads, 60l, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(), new NamedThreadFactory(\"AgentTaskPool\"));\n \n         _connectExecutor = new ThreadPoolExecutor(100, 500, 60l, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(), new NamedThreadFactory(\"AgentConnectTaskPool\"));\n-        //allow core threads to time out even when there are no items in the queue\n+        // allow core threads to time out even when there are no items in the queue\n         _connectExecutor.allowCoreThreadTimeOut(true);\n \n         _connection = new NioServer(\"AgentManager\", Port.value(), Workers.value() + 10, this);\n@@ -235,7 +233,7 @@ public boolean configure(final String name, final Map<String, Object> params) th\n     }\n \n     protected long getTimeout() {\n-        return (long)(PingTimeout.value() * PingInterval.value());\n+        return (long) (PingTimeout.value() * PingInterval.value());\n     }\n \n     @Override\n@@ -436,8 +434,8 @@ private void setEmptyAnswers(final Commands commands, final Command[] cmds) {\n         if (CheckTxnBeforeSending.value()) {\n             if (!noDbTxn()) {\n                 throw new CloudRuntimeException(\"We do not allow transactions to be wrapped around commands sent to be executed on remote agents.  \"\n-                        + \"We cannot predict how long it takes a command to complete.  \"\n-                        + \"The transaction may be rolled back because the connection took too long.\");\n+                                + \"We cannot predict how long it takes a command to complete.  \"\n+                                + \"The transaction may be rolled back because the connection took too long.\");\n             }\n         } else {\n             assert noDbTxn() : \"I know, I know.  Why are we so strict as to not allow txn across an agent call?  ...  Why are we so cruel ... Why are we such a dictator .... Too bad... Sorry...but NO AGENT COMMANDS WRAPPED WITHIN DB TRANSACTIONS!\";\n@@ -552,15 +550,15 @@ protected AgentAttache notifyMonitorsOfConnection(final AgentAttache attache, fi\n                     monitor.second().processConnect(host, cmd[i], forRebalance);\n                 } catch (final Exception e) {\n                     if (e instanceof ConnectionException) {\n-                        final ConnectionException ce = (ConnectionException)e;\n+                        final ConnectionException ce = (ConnectionException) e;\n                         if (ce.isSetupError()) {\n                             s_logger.warn(\"Monitor \" + monitor.second().getClass().getSimpleName() + \" says there is an error in the connect process for \" + hostId +\n-                                    \" due to \" + e.getMessage());\n+                                            \" due to \" + e.getMessage());\n                             handleDisconnectWithoutInvestigation(attache, Event.AgentDisconnected, true, true);\n                             throw ce;\n                         } else {\n                             s_logger.info(\"Monitor \" + monitor.second().getClass().getSimpleName() + \" says not to continue the connect process for \" + hostId +\n-                                    \" due to \" + e.getMessage());\n+                                            \" due to \" + e.getMessage());\n                             handleDisconnectWithoutInvestigation(attache, Event.ShutdownRequested, true, true);\n                             return attache;\n                         }\n@@ -569,7 +567,7 @@ protected AgentAttache notifyMonitorsOfConnection(final AgentAttache attache, fi\n                         throw new CloudRuntimeException(\"Unable to connect \" + attache.getId(), e);\n                     } else {\n                         s_logger.error(\"Monitor \" + monitor.second().getClass().getSimpleName() + \" says there is an error in the connect process for \" + hostId +\n-                                \" due to \" + e.getMessage(), e);\n+                                        \" due to \" + e.getMessage(), e);\n                         handleDisconnectWithoutInvestigation(attache, Event.AgentDisconnected, true, true);\n                         throw new CloudRuntimeException(\"Unable to connect \" + attache.getId(), e);\n                     }\n@@ -622,7 +620,7 @@ private ServerResource loadResourcesWithoutHypervisor(final HostVO host) {\n         try {\n             final Class<?> clazz = Class.forName(resourceName);\n             final Constructor<?> constructor = clazz.getConstructor();\n-            resource = (ServerResource)constructor.newInstance();\n+            resource = (ServerResource) constructor.newInstance();\n         } catch (final ClassNotFoundException e) {\n             s_logger.warn(\"Unable to find class \" + host.getResource(), e);\n         } catch (final InstantiationException e) {\n@@ -690,7 +688,7 @@ protected boolean loadDirectlyConnectedHost(final HostVO host, final boolean for\n         boolean initialized = false;\n         ServerResource resource = null;\n         try {\n-            //load the respective discoverer\n+            // load the respective discoverer\n             final Discoverer discoverer = _resourceMgr.getMatchingDiscover(host.getHypervisorType());\n             if (discoverer == null) {\n                 s_logger.info(\"Could not to find a Discoverer to load the resource: \" + host.getId() + \" for hypervisor type: \" + host.getHypervisorType());\n@@ -804,7 +802,7 @@ protected boolean handleDisconnectWithoutInvestigation(final AgentAttache attach\n         }\n \n         removeAgent(attache, nextStatus);\n-        //update the DB\n+        // update the DB\n         if (host != null && transitState) {\n             disconnectAgent(host, event, _nodeId);\n         }\n@@ -821,9 +819,9 @@ protected boolean handleDisconnectWithInvestigation(final AgentAttache attache,\n             try {\n                 nextStatus = host.getStatus().getNextStatus(event);\n             } catch (final NoTransitionException ne) {\n-                /* Agent may be currently in status of Down, Alert, Removed, namely there is no next status for some events.\n-                 * Why this can happen? Ask God not me. I hate there was no piece of comment for code handling race condition.\n-                 * God knew what race condition the code dealt with!\n+                /*\n+                 * Agent may be currently in status of Down, Alert, Removed, namely there is no next status for some events. Why this can happen? Ask God not me. I hate there was\n+                 * no piece of comment for code handling race condition. God knew what race condition the code dealt with!\n                  */\n                 s_logger.debug(\"Caught exception while getting agent's next status\", ne);\n             }\n@@ -845,7 +843,7 @@ protected boolean handleDisconnectWithInvestigation(final AgentAttache attache,\n                 }\n \n                 final Status currentStatus = host.getStatus();\n-                s_logger.info(\"The agent \" + hostId + \" state determined is \" + determinedState);\n+                s_logger.info(\"The agent from host \" + hostId + \" state determined is \" + determinedState);\n \n                 if (determinedState == Status.Down) {\n                     final String message = \"Host is down: \" + host.getId() + \"-\" + host.getName() + \". Starting HA on the VMs\";\n@@ -875,17 +873,18 @@ protected boolean handleDisconnectWithInvestigation(final AgentAttache attache,\n                         final String hostDesc = \"name: \" + host.getName() + \" (id:\" + host.getId() + \"), availability zone: \" + dcVO.getName() + \", pod: \" + podVO.getName();\n                         if (host.getType() != Host.Type.SecondaryStorage && host.getType() != Host.Type.ConsoleProxy) {\n                             _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_HOST, host.getDataCenterId(), host.getPodId(), \"Host disconnected, \" + hostDesc,\n-                                    \"If the agent for host [\" + hostDesc + \"] is not restarted within \" + AlertWait + \" seconds, host will go to Alert state\");\n+                                            \"If the agent for host [\" + hostDesc + \"] is not restarted within \" + AlertWait + \" seconds, host will go to Alert state\");\n                         }\n                         event = Status.Event.AgentDisconnected;\n                     }\n                 } else {\n                     // if we end up here we are in alert state, send an alert\n                     final DataCenterVO dcVO = _dcDao.findById(host.getDataCenterId());\n                     final HostPodVO podVO = _podDao.findById(host.getPodId());\n-                    final String hostDesc = \"name: \" + host.getName() + \" (id:\" + host.getId() + \"), availability zone: \" + dcVO.getName() + \", pod: \" + podVO.getName();\n+                    final String podName = podVO != null ? podVO.getName() : \"NO POD\";\n+                    final String hostDesc = \"name: \" + host.getName() + \" (id:\" + host.getId() + \"), availability zone: \" + dcVO.getName() + \", pod: \" + podName;\n                     _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_HOST, host.getDataCenterId(), host.getPodId(), \"Host in ALERT state, \" + hostDesc,\n-                            \"In availability zone \" + host.getDataCenterId() + \", host is in alert state: \" + host.getId() + \"-\" + host.getName());\n+                                    \"In availability zone \" + host.getDataCenterId() + \", host is in alert state: \" + host.getId() + \"-\" + host.getName());\n                 }\n             } else {\n                 s_logger.debug(\"The next status of agent \" + host.getId() + \" is not Alert, no need to investigate what happened\");\n@@ -1130,7 +1129,7 @@ protected void runInContext() {\n             _request.logD(\"Processing the first command \");\n             final StartupCommand[] startups = new StartupCommand[_cmds.length];\n             for (int i = 0; i < _cmds.length; i++) {\n-                startups[i] = (StartupCommand)_cmds[i];\n+                startups[i] = (StartupCommand) _cmds[i];\n             }\n \n             final AgentAttache attache = handleConnectedAgent(_link, startups, _request);\n@@ -1141,14 +1140,15 @@ protected void runInContext() {\n     }\n \n     protected void connectAgent(final Link link, final Command[] cmds, final Request request) {\n-        //send startupanswer to agent in the very beginning, so agent can move on without waiting for the answer for an undetermined time, if we put this logic into another thread pool.\n+        // send startupanswer to agent in the very beginning, so agent can move on without waiting for the answer for an undetermined time, if we put this logic into another\n+        // thread pool.\n         final StartupAnswer[] answers = new StartupAnswer[cmds.length];\n         Command cmd;\n         for (int i = 0; i < cmds.length; i++) {\n             cmd = cmds[i];\n             if (cmd instanceof StartupRoutingCommand || cmd instanceof StartupProxyCommand || cmd instanceof StartupSecondaryStorageCommand ||\n-                    cmd instanceof StartupStorageCommand) {\n-                answers[i] = new StartupAnswer((StartupCommand)cmds[i], 0, getPingInterval());\n+                            cmd instanceof StartupStorageCommand) {\n+                answers[i] = new StartupAnswer((StartupCommand) cmds[i], 0, getPingInterval());\n                 break;\n             }\n         }\n@@ -1168,7 +1168,7 @@ public AgentHandler(final Task.Type type, final Link link, final byte[] data) {\n         }\n \n         protected void processRequest(final Link link, final Request request) {\n-            final AgentAttache attache = (AgentAttache)link.attachment();\n+            final AgentAttache attache = (AgentAttache) link.attachment();\n             final Command[] cmds = request.getCommands();\n             Command cmd = cmds[0];\n             boolean logD = true;\n@@ -1177,7 +1177,7 @@ protected void processRequest(final Link link, final Request request) {\n                 if (!(cmd instanceof StartupCommand)) {\n                     s_logger.warn(\"Throwing away a request because it came through as the first command on a connect: \" + request);\n                 } else {\n-                    //submit the task for execution\n+                    // submit the task for execution\n                     request.logD(\"Scheduling the first command \");\n                     connectAgent(link, cmds, request);\n                 }\n@@ -1207,40 +1207,40 @@ protected void processRequest(final Link link, final Request request) {\n                 Answer answer = null;\n                 try {\n                     if (cmd instanceof StartupRoutingCommand) {\n-                        final StartupRoutingCommand startup = (StartupRoutingCommand)cmd;\n+                        final StartupRoutingCommand startup = (StartupRoutingCommand) cmd;\n                         answer = new StartupAnswer(startup, attache.getId(), getPingInterval());\n                     } else if (cmd instanceof StartupProxyCommand) {\n-                        final StartupProxyCommand startup = (StartupProxyCommand)cmd;\n+                        final StartupProxyCommand startup = (StartupProxyCommand) cmd;\n                         answer = new StartupAnswer(startup, attache.getId(), getPingInterval());\n                     } else if (cmd instanceof StartupSecondaryStorageCommand) {\n-                        final StartupSecondaryStorageCommand startup = (StartupSecondaryStorageCommand)cmd;\n+                        final StartupSecondaryStorageCommand startup = (StartupSecondaryStorageCommand) cmd;\n                         answer = new StartupAnswer(startup, attache.getId(), getPingInterval());\n                     } else if (cmd instanceof StartupStorageCommand) {\n-                        final StartupStorageCommand startup = (StartupStorageCommand)cmd;\n+                        final StartupStorageCommand startup = (StartupStorageCommand) cmd;\n                         answer = new StartupAnswer(startup, attache.getId(), getPingInterval());\n                     } else if (cmd instanceof ShutdownCommand) {\n-                        final ShutdownCommand shutdown = (ShutdownCommand)cmd;\n+                        final ShutdownCommand shutdown = (ShutdownCommand) cmd;\n                         final String reason = shutdown.getReason();\n                         s_logger.info(\"Host \" + attache.getId() + \" has informed us that it is shutting down with reason \" + reason + \" and detail \" +\n-                                shutdown.getDetail());\n+                                        shutdown.getDetail());\n                         if (reason.equals(ShutdownCommand.Update)) {\n-                            //disconnectWithoutInvestigation(attache, Event.UpdateNeeded);\n+                            // disconnectWithoutInvestigation(attache, Event.UpdateNeeded);\n                             throw new CloudRuntimeException(\"Agent update not implemented\");\n                         } else if (reason.equals(ShutdownCommand.Requested)) {\n                             disconnectWithoutInvestigation(attache, Event.ShutdownRequested);\n                         }\n                         return;\n                     } else if (cmd instanceof AgentControlCommand) {\n-                        answer = handleControlCommand(attache, (AgentControlCommand)cmd);\n+                        answer = handleControlCommand(attache, (AgentControlCommand) cmd);\n                     } else {\n-                        handleCommands(attache, request.getSequence(), new Command[] {cmd});\n+                        handleCommands(attache, request.getSequence(), new Command[] { cmd });\n                         if (cmd instanceof PingCommand) {\n-                            final long cmdHostId = ((PingCommand)cmd).getHostId();\n+                            final long cmdHostId = ((PingCommand) cmd).getHostId();\n \n                             // if the router is sending a ping, verify the\n                             // gateway was pingable\n                             if (cmd instanceof PingRoutingCommand) {\n-                                final boolean gatewayAccessible = ((PingRoutingCommand)cmd).isGatewayAccessible();\n+                                final boolean gatewayAccessible = ((PingRoutingCommand) cmd).isGatewayAccessible();\n                                 final HostVO host = _hostDao.findById(Long.valueOf(cmdHostId));\n \n                                 if (host != null) {\n@@ -1250,20 +1250,21 @@ protected void processRequest(final Link link, final Request request) {\n                                         final DataCenterVO dcVO = _dcDao.findById(host.getDataCenterId());\n                                         final HostPodVO podVO = _podDao.findById(host.getPodId());\n                                         final String hostDesc =\n-                                                \"name: \" + host.getName() + \" (id:\" + host.getId() + \"), availability zone: \" + dcVO.getName() + \", pod: \" + podVO.getName();\n+                                                        \"name: \" + host.getName() + \" (id:\" + host.getId() + \"), availability zone: \" + dcVO.getName() + \", pod: \"\n+                                                                        + podVO.getName();\n \n                                         _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_ROUTING, host.getDataCenterId(), host.getPodId(),\n-                                                \"Host lost connection to gateway, \" + hostDesc, \"Host [\" + hostDesc +\n-                                                \"] lost connection to gateway (default route) and is possibly having network connection issues.\");\n+                                                        \"Host lost connection to gateway, \" + hostDesc, \"Host [\" + hostDesc +\n+                                                                        \"] lost connection to gateway (default route) and is possibly having network connection issues.\");\n                                     } else {\n                                         _alertMgr.clearAlert(AlertManager.AlertType.ALERT_TYPE_ROUTING, host.getDataCenterId(), host.getPodId());\n                                     }\n                                 } else {\n                                     s_logger.debug(\"Not processing \" + PingRoutingCommand.class.getSimpleName() + \" for agent id=\" + cmdHostId +\n-                                            \"; can't find the host in the DB\");\n+                                                    \"; can't find the host in the DB\");\n                                 }\n                             }\n-                            answer = new PingAnswer((PingCommand)cmd);\n+                            answer = new PingAnswer((PingCommand) cmd);\n                         } else if (cmd instanceof ReadyAnswer) {\n                             final HostVO host = _hostDao.findById(attache.getId());\n                             if (host == null) {\n@@ -1299,7 +1300,7 @@ protected void processRequest(final Link link, final Request request) {\n         }\n \n         protected void processResponse(final Link link, final Response response) {\n-            final AgentAttache attache = (AgentAttache)link.attachment();\n+            final AgentAttache attache = (AgentAttache) link.attachment();\n             if (attache == null) {\n                 s_logger.warn(\"Unable to process: \" + response);\n             } else if (!attache.processAnswers(response.getSequence(), response)) {\n@@ -1317,7 +1318,7 @@ protected void doTask(final Task task) throws TaskExecutionException {\n                     try {\n                         final Request event = Request.parse(data);\n                         if (event instanceof Response) {\n-                            processResponse(task.getLink(), (Response)event);\n+                            processResponse(task.getLink(), (Response) event);\n                         } else {\n                             processRequest(task.getLink(), event);\n                         }\n@@ -1332,7 +1333,7 @@ protected void doTask(final Task task) throws TaskExecutionException {\n                 } else if (type == Task.Type.CONNECT) {\n                 } else if (type == Task.Type.DISCONNECT) {\n                     final Link link = task.getLink();\n-                    final AgentAttache attache = (AgentAttache)link.attachment();\n+                    final AgentAttache attache = (AgentAttache) link.attachment();\n                     if (attache != null) {\n                         disconnectWithInvestigation(attache, Event.AgentDisconnected);\n                     } else {\n@@ -1387,9 +1388,9 @@ public boolean agentStatusTransitTo(final HostVO host, final Status.Event e, fin\n                 return _statusStateMachine.transitTo(host, e, host.getId(), _hostDao);\n             } catch (final NoTransitionException e1) {\n                 status_logger.debug(\"Cannot transit agent status with event \" + e + \" for host \" + host.getId() + \", name=\" + host.getName() +\n-                        \", mangement server id is \" + msId);\n+                                \", mangement server id is \" + msId);\n                 throw new CloudRuntimeException(\"Cannot transit agent status with event \" + e + \" for host \" + host.getId() + \", mangement server id is \" + msId + \",\" +\n-                        e1.getMessage());\n+                                e1.getMessage());\n             }\n         } finally {\n             _agentStatusLock.unlock();\n@@ -1533,21 +1534,19 @@ protected void runInContext() {\n                         final ResourceState resourceState = h.getResourceState();\n                         if (resourceState == ResourceState.Disabled || resourceState == ResourceState.Maintenance || resourceState == ResourceState.ErrorInMaintenance) {\n                             /*\n-                             * Host is in non-operation state, so no\n-                             * investigation and direct put agent to\n-                             * Disconnected\n+                             * Host is in non-operation state, so no investigation and direct put agent to Disconnected\n                              */\n-                            status_logger.debug(\"Ping timeout but host \" + agentId + \" is in resource state of \" + resourceState + \", so no investigation\");\n+                            status_logger.debug(\"Ping timeout but agent \" + agentId + \" is in resource state of \" + resourceState + \", so no investigation\");\n                             disconnectWithoutInvestigation(agentId, Event.ShutdownRequested);\n                         } else {\n                             final HostVO host = _hostDao.findById(agentId);\n                             if (host != null && (host.getType() == Host.Type.ConsoleProxy || host.getType() == Host.Type.SecondaryStorageVM\n-                                    || host.getType() == Host.Type.SecondaryStorageCmdExecutor)) {\n+                                            || host.getType() == Host.Type.SecondaryStorageCmdExecutor)) {\n \n                                 s_logger.warn(\"Disconnect agent for CPVM/SSVM due to physical connection close. host: \" + host.getId());\n                                 disconnectWithoutInvestigation(agentId, Event.ShutdownRequested);\n                             } else {\n-                                status_logger.debug(\"Ping timeout for host \" + agentId + \", do invstigation\");\n+                                status_logger.debug(\"Ping timeout for agent \" + agentId + \", do invstigation\");\n                                 disconnectWithInvestigation(agentId, Event.PingTimeout);\n                             }\n                         }\n@@ -1564,7 +1563,7 @@ protected void runInContext() {\n                         final HostPodVO podVO = _podDao.findById(host.getPodId());\n                         final String hostDesc = \"name: \" + host.getName() + \" (id:\" + host.getId() + \"), availability zone: \" + dcVO.getName() + \", pod: \" + podVO.getName();\n                         _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_HOST, host.getDataCenterId(), host.getPodId(), \"Migration Complete for host \" + hostDesc, \"Host [\"\n-                                + hostDesc + \"] is ready for maintenance\");\n+                                        + hostDesc + \"] is ready for maintenance\");\n                     }\n                 }\n             } catch (final Throwable th) {\n@@ -1653,7 +1652,8 @@ public String getConfigComponentName() {\n \n     @Override\n     public ConfigKey<?>[] getConfigKeys() {\n-        return new ConfigKey<?>[] {CheckTxnBeforeSending, Workers, Port, PingInterval, PingTimeout, Wait, AlertWait, DirectAgentLoadSize, DirectAgentPoolSize, DirectAgentThreadCap};\n+        return new ConfigKey<?>[] { CheckTxnBeforeSending, Workers, Port, PingInterval, PingTimeout, Wait, AlertWait, DirectAgentLoadSize, DirectAgentPoolSize,\n+                        DirectAgentThreadCap };\n     }\n \n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/a767407fd285543dff5a99ec922ae00aa6ccb785/engine/orchestration/src/com/cloud/agent/manager/AgentManagerImpl.java",
                "sha": "45a7dca4657bced0796e1e891f1c1ca3ffc715bc",
                "status": "modified"
            },
            {
                "additions": 63,
                "blob_url": "https://github.com/apache/cloudstack/blob/a767407fd285543dff5a99ec922ae00aa6ccb785/plugins/network-elements/nicira-nvp/src/main/java/com/cloud/network/resource/wrapper/NiciraCheckHealthCommandWrapper.java",
                "changes": 63,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nicira-nvp/src/main/java/com/cloud/network/resource/wrapper/NiciraCheckHealthCommandWrapper.java?ref=a767407fd285543dff5a99ec922ae00aa6ccb785",
                "deletions": 0,
                "filename": "plugins/network-elements/nicira-nvp/src/main/java/com/cloud/network/resource/wrapper/NiciraCheckHealthCommandWrapper.java",
                "patch": "@@ -0,0 +1,63 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+\n+package com.cloud.network.resource.wrapper;\n+\n+import org.apache.log4j.Logger;\n+\n+import com.cloud.agent.api.Answer;\n+import com.cloud.agent.api.CheckHealthAnswer;\n+import com.cloud.agent.api.CheckHealthCommand;\n+import com.cloud.network.nicira.ControlClusterStatus;\n+import com.cloud.network.nicira.NiciraNvpApi;\n+import com.cloud.network.nicira.NiciraNvpApiException;\n+import com.cloud.network.resource.NiciraNvpResource;\n+import com.cloud.resource.CommandWrapper;\n+import com.cloud.resource.ResourceWrapper;\n+\n+@ResourceWrapper(handles = CheckHealthCommand.class)\n+public class NiciraCheckHealthCommandWrapper extends CommandWrapper<CheckHealthCommand, Answer, NiciraNvpResource> {\n+\n+    private static final String CONTROL_CLUSTER_STATUS_IS_STABLE = \"stable\";\n+    private static final Logger s_logger = Logger.getLogger(NiciraCheckHealthCommandWrapper.class);\n+\n+    @Override\n+    public Answer execute(final CheckHealthCommand command, final NiciraNvpResource serverResource) {\n+        final NiciraNvpApi niciraNvpApi = serverResource.getNiciraNvpApi();\n+        boolean healthy = true;\n+        try {\n+            final ControlClusterStatus clusterStatus = niciraNvpApi.getControlClusterStatus();\n+            final String status = clusterStatus.getClusterStatus();\n+            if (clusterIsUnstable(status)) {\n+                s_logger.warn(\"Control cluster is not stable. Current status is \" + status);\n+                healthy = false;\n+            }\n+        } catch (final NiciraNvpApiException e) {\n+            s_logger.error(\"Exception caught while checking control cluster status during health check\", e);\n+            healthy = false;\n+        }\n+\n+        return new CheckHealthAnswer(command, healthy);\n+    }\n+\n+    protected boolean clusterIsUnstable(final String clusterStatus) {\n+        return !CONTROL_CLUSTER_STATUS_IS_STABLE.equals(clusterStatus);\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/a767407fd285543dff5a99ec922ae00aa6ccb785/plugins/network-elements/nicira-nvp/src/main/java/com/cloud/network/resource/wrapper/NiciraCheckHealthCommandWrapper.java",
                "sha": "34e4548cf816091da0f19a7c3d533070e9ae288c",
                "status": "added"
            },
            {
                "additions": 80,
                "blob_url": "https://github.com/apache/cloudstack/blob/a767407fd285543dff5a99ec922ae00aa6ccb785/plugins/network-elements/nicira-nvp/src/test/java/com/cloud/network/resource/wrapper/NiciraCheckHealthCommandWrapperTest.java",
                "changes": 80,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nicira-nvp/src/test/java/com/cloud/network/resource/wrapper/NiciraCheckHealthCommandWrapperTest.java?ref=a767407fd285543dff5a99ec922ae00aa6ccb785",
                "deletions": 0,
                "filename": "plugins/network-elements/nicira-nvp/src/test/java/com/cloud/network/resource/wrapper/NiciraCheckHealthCommandWrapperTest.java",
                "patch": "@@ -0,0 +1,80 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+\n+package com.cloud.network.resource.wrapper;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.cloud.agent.api.Answer;\n+import com.cloud.agent.api.CheckHealthCommand;\n+import com.cloud.network.nicira.ControlClusterStatus;\n+import com.cloud.network.nicira.NiciraNvpApi;\n+import com.cloud.network.nicira.NiciraNvpApiException;\n+import com.cloud.network.resource.NiciraNvpResource;\n+\n+public class NiciraCheckHealthCommandWrapperTest {\n+\n+    private final NiciraNvpResource niciraResource = mock(NiciraNvpResource.class);\n+    private final NiciraNvpApi niciraApi = mock(NiciraNvpApi.class);\n+\n+    @Before\n+    public void setup() {\n+        when(niciraResource.getNiciraNvpApi()).thenReturn(niciraApi);\n+    }\n+\n+    @Test\n+    public void tetsExecuteWhenClusterIsNotStable() throws Exception {\n+        when(niciraApi.getControlClusterStatus()).thenReturn(new ControlClusterStatus());\n+\n+        final NiciraCheckHealthCommandWrapper commandWrapper = new NiciraCheckHealthCommandWrapper();\n+        final Answer answer = commandWrapper.execute(new CheckHealthCommand(), niciraResource);\n+\n+        assertThat(answer.getResult(), equalTo(false));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void tetsExecuteWhenApiThrowsException() throws Exception {\n+        when(niciraApi.getControlClusterStatus()).thenThrow(NiciraNvpApiException.class);\n+\n+        final NiciraCheckHealthCommandWrapper commandWrapper = new NiciraCheckHealthCommandWrapper();\n+        final Answer answer = commandWrapper.execute(new CheckHealthCommand(), niciraResource);\n+\n+        assertThat(answer.getResult(), equalTo(false));\n+    }\n+\n+    @Test\n+    public void tetsExecuteWhenClusterIsStable() throws Exception {\n+        final ControlClusterStatus statusValue = mock(ControlClusterStatus.class);\n+        when(statusValue.getClusterStatus()).thenReturn(\"stable\");\n+        when(niciraApi.getControlClusterStatus()).thenReturn(statusValue);\n+\n+        final NiciraCheckHealthCommandWrapper commandWrapper = new NiciraCheckHealthCommandWrapper();\n+        final Answer answer = commandWrapper.execute(new CheckHealthCommand(), niciraResource);\n+\n+        assertThat(answer.getResult(), equalTo(true));\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/a767407fd285543dff5a99ec922ae00aa6ccb785/plugins/network-elements/nicira-nvp/src/test/java/com/cloud/network/resource/wrapper/NiciraCheckHealthCommandWrapperTest.java",
                "sha": "b0a988270a5f32106252b13ed66ed795aa63887c",
                "status": "added"
            }
        ],
        "message": "Merge pull request #1293 from miguelaferreira/nsx-heath-check\n\nAdd Health Check Command to NSX pluginThe NSX plugin does not support the HeathCheckCommand. Instead it fakes a PingCommand as a call tot he control cluster status API.\nHowever, we have seen in production that the management server will sometimes find the NSX controller to be behind on ping and that will trigger a HealthCheckCommand which will return with an unsupported command answer.\nOnce this happens the controller is put into Alert state and will not recover until the management sever is restarted.\n\nIn addition, during the investigation, there will be a null pointer exception due tot he fact that the NSX controllers do not live in a pod.\n\nThis PR tries to address those two issues.\n\n* pr/1293:\n  Implement CheckHealthCommand for NSX controllers\n  Fix log message that refers to agent, not host\n  Prevent NullPointerException when host does not belong to a pod\n\nSigned-off-by: Remi Bergsma <github@remi.nl>",
        "parent": "https://github.com/apache/cloudstack/commit/4dabd1311c580507fee154d5e791f4908976e4f6",
        "patched_files": [
            "NiciraCheckHealthCommandWrapper.java",
            "AgentManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "NiciraCheckHealthCommandWrapperTest.java"
        ]
    },
    "cloudstack_a77d74b": {
        "bug_id": "cloudstack_a77d74b",
        "commit": "https://github.com/apache/cloudstack/commit/a77d74ba0d3b82c5e191a11542cd9ad6ef827549",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/a77d74ba0d3b82c5e191a11542cd9ad6ef827549/server/src/main/java/com/cloud/vm/UserVmManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/vm/UserVmManagerImpl.java?ref=a77d74ba0d3b82c5e191a11542cd9ad6ef827549",
                "deletions": 1,
                "filename": "server/src/main/java/com/cloud/vm/UserVmManagerImpl.java",
                "patch": "@@ -2520,7 +2520,7 @@ protected void updateDisplayVmFlag(Boolean isDisplayVm, Long id, UserVmVO vmInst\n         vmInstance.setDisplayVm(isDisplayVm);\n \n         // Resource limit changes\n-        ServiceOffering offering = _serviceOfferingDao.findByIdIncludingRemoved(vmInstance.getServiceOfferingId());\n+        ServiceOffering offering = _serviceOfferingDao.findByIdIncludingRemoved(vmInstance.getId(), vmInstance.getServiceOfferingId());\n         _resourceLimitMgr.changeResourceCount(vmInstance.getAccountId(), ResourceType.user_vm, isDisplayVm);\n         _resourceLimitMgr.changeResourceCount(vmInstance.getAccountId(), ResourceType.cpu, isDisplayVm, new Long(offering.getCpu()));\n         _resourceLimitMgr.changeResourceCount(vmInstance.getAccountId(), ResourceType.memory, isDisplayVm, new Long(offering.getRamSize()));",
                "raw_url": "https://github.com/apache/cloudstack/raw/a77d74ba0d3b82c5e191a11542cd9ad6ef827549/server/src/main/java/com/cloud/vm/UserVmManagerImpl.java",
                "sha": "270edceb92c831c7dbd3f6193b5e41e70abe22bb",
                "status": "modified"
            }
        ],
        "message": "server: Fix NPE while update displayvm on vm with dynamic service offering (#3758)\n\nSteps to reproduce the issue\r\n(1) create a custom service offering\r\n(2) create a vm with the offering\r\n(3) update vm with displayvm=false, returns an error\r\n\r\n(local) > update virtualmachine id=f33fd06a-7643-40d1-833f-272845d9ba09 displayvm=false\r\nError 530: {\"updatevirtualmachineresponse\":{\"uuidList\":[],\"errorcode\":530,\"cserrorcode\":9999}}",
        "parent": "https://github.com/apache/cloudstack/commit/136505b22cd5cefa9c04faeb2dc305f7d653cf69",
        "patched_files": [
            "UserVmManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "UserVmManagerImplTest.java"
        ]
    },
    "cloudstack_b31b842": {
        "bug_id": "cloudstack_b31b842",
        "commit": "https://github.com/apache/cloudstack/commit/b31b8425df9b442a572aec7a2d462b80881fea0f",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/b31b8425df9b442a572aec7a2d462b80881fea0f/engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeObject.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeObject.java?ref=b31b8425df9b442a572aec7a2d462b80881fea0f",
                "deletions": 2,
                "filename": "engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeObject.java",
                "patch": "@@ -178,8 +178,10 @@ public boolean  stateTransit(Volume.Event event) {\n         boolean result = false;\n         try {\n             volumeVO = volumeDao.findById(volumeVO.getId());\n-            result = _volStateMachine.transitTo(volumeVO, event, null, volumeDao);\n-            volumeVO = volumeDao.findById(volumeVO.getId());\n+            if(volumeVO != null) {\n+                result = _volStateMachine.transitTo(volumeVO, event, null, volumeDao);\n+                volumeVO = volumeDao.findById(volumeVO.getId());\n+            }\n         } catch (NoTransitionException e) {\n             String errorMessage = \"Failed to transit volume: \" + getVolumeId() + \", due to: \" + e.toString();\n             s_logger.debug(errorMessage);",
                "raw_url": "https://github.com/apache/cloudstack/raw/b31b8425df9b442a572aec7a2d462b80881fea0f/engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeObject.java",
                "sha": "e8518704d9efadf868c3394af5e099a05ea70bc0",
                "status": "modified"
            },
            {
                "additions": 77,
                "blob_url": "https://github.com/apache/cloudstack/blob/b31b8425df9b442a572aec7a2d462b80881fea0f/engine/storage/volume/test/org/apache/cloudstack/storage/volume/VolumeObjectTest.java",
                "changes": 77,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/storage/volume/test/org/apache/cloudstack/storage/volume/VolumeObjectTest.java?ref=b31b8425df9b442a572aec7a2d462b80881fea0f",
                "deletions": 0,
                "filename": "engine/storage/volume/test/org/apache/cloudstack/storage/volume/VolumeObjectTest.java",
                "patch": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cloudstack.storage.volume;\n+\n+import org.apache.cloudstack.engine.subsystem.api.storage.DataStore;\n+import org.apache.cloudstack.storage.datastore.ObjectInDataStoreManager;\n+import org.apache.cloudstack.storage.datastore.db.VolumeDataStoreDao;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.cloud.storage.Storage;\n+import com.cloud.storage.Volume;\n+import com.cloud.storage.VolumeVO;\n+import com.cloud.storage.dao.DiskOfferingDao;\n+import com.cloud.storage.dao.VolumeDao;\n+import com.cloud.vm.dao.VMInstanceDao;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class VolumeObjectTest {\n+\n+    @Mock\n+    VolumeDao volumeDao;\n+\n+    @Mock\n+    VolumeDataStoreDao volumeStoreDao;\n+\n+    @Mock\n+    ObjectInDataStoreManager objectInStoreMgr;\n+\n+    @Mock\n+    VMInstanceDao vmInstanceDao;\n+\n+    @Mock\n+    DiskOfferingDao diskOfferingDao;\n+\n+    @InjectMocks\n+    VolumeObject volumeObject;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        volumeObject.configure(Mockito.mock(DataStore.class), new VolumeVO(\"name\", 1l, 1l, 1l, 1l, 1l, \"folder\", \"path\", Storage.ProvisioningType.THIN, 1l, Volume.Type.DATADISK));\n+    }\n+\n+    /**\n+     * Tests the following scenario:\n+     * If the volume gets deleted by another thread (cleanup) and the cleanup is attempted again, the volume isnt found in DB and hence NPE occurs\n+     * during transition\n+     */\n+    @Test\n+    public void testStateTransit() {\n+        boolean result = volumeObject.stateTransit(Volume.Event.OperationFailed);\n+        Assert.assertFalse(\"since the volume doesnt exist in the db, the operation should fail but, should not throw any exception\", result);\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/b31b8425df9b442a572aec7a2d462b80881fea0f/engine/storage/volume/test/org/apache/cloudstack/storage/volume/VolumeObjectTest.java",
                "sha": "81180137bc3b5ede0156bb8b2b8dc401ac2db8d7",
                "status": "added"
            }
        ],
        "message": "CLOUDSTACK-8525: NPE while updating the state of the volume after deletion\n\nThe volume is already deleted (may be by the cleanup thread) and hence\nthe NPE. Added a not null check for the volumevo and returning false\nfrom the state transition\n\nThis closes #321",
        "parent": "https://github.com/apache/cloudstack/commit/bec44bffb3ed415315793cf83603ce13bf865ff0",
        "patched_files": [
            "VolumeObject.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VolumeObjectTest.java"
        ]
    },
    "cloudstack_b363fd4": {
        "bug_id": "cloudstack_b363fd4",
        "commit": "https://github.com/apache/cloudstack/commit/b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/api/src/main/java/com/cloud/hypervisor/HypervisorGuru.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/main/java/com/cloud/hypervisor/HypervisorGuru.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 1,
                "filename": "api/src/main/java/com/cloud/hypervisor/HypervisorGuru.java",
                "patch": "@@ -19,6 +19,7 @@\n import java.util.List;\n import java.util.Map;\n \n+import com.cloud.storage.StoragePool;\n import org.apache.cloudstack.framework.config.ConfigKey;\n \n import com.cloud.agent.api.Command;\n@@ -32,7 +33,7 @@\n import com.cloud.vm.VirtualMachineProfile;\n \n public interface HypervisorGuru extends Adapter {\n-    static final ConfigKey<Boolean> VmwareFullClone = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"vmware.create.full.clone\", \"true\",\n+    ConfigKey<Boolean> VmwareFullClone = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"vmware.create.full.clone\", \"true\",\n             \"If set to true, creates guest VMs as full clones on ESX\", false);\n     HypervisorType getHypervisorType();\n \n@@ -84,4 +85,13 @@\n     List<Command> finalizeExpungeVolumes(VirtualMachine vm);\n \n     Map<String, String> getClusterSettings(long vmId);\n+\n+    /**\n+     * Will generate commands to migrate a vm to a pool. For now this will only work for stopped VMs on Vmware.\n+     *\n+     * @param vm the stopped vm to migrate\n+     * @param destination the primary storage pool to migrate to\n+     * @return a list of commands to perform for a successful migration\n+     */\n+    List<Command> finalizeMigrate(VirtualMachine vm, StoragePool destination);\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/api/src/main/java/com/cloud/hypervisor/HypervisorGuru.java",
                "sha": "da2c7d04eb335cbbd94490685838709415570c2e",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/api/src/main/java/com/cloud/storage/VolumeApiService.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/main/java/com/cloud/storage/VolumeApiService.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 0,
                "filename": "api/src/main/java/com/cloud/storage/VolumeApiService.java",
                "patch": "@@ -29,11 +29,21 @@\n import org.apache.cloudstack.api.command.user.volume.ResizeVolumeCmd;\n import org.apache.cloudstack.api.command.user.volume.UploadVolumeCmd;\n import org.apache.cloudstack.api.response.GetUploadParamsResponse;\n+import org.apache.cloudstack.framework.config.ConfigKey;\n \n import com.cloud.exception.ResourceAllocationException;\n import com.cloud.user.Account;\n \n public interface VolumeApiService {\n+\n+    ConfigKey<Long> ConcurrentMigrationsThresholdPerDatastore = new ConfigKey<Long>(\"Advanced\"\n+            , Long.class\n+            , \"concurrent.migrations.per.target.datastore\"\n+            , \"0\"\n+            , \"Limits number of migrations that can be handled per datastore concurrently; default is 0 - unlimited\"\n+            , true // not sure if this is to be dynamic\n+            , ConfigKey.Scope.Global);\n+\n     /**\n      * Creates the database object for a volume based on the given criteria\n      *",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/api/src/main/java/com/cloud/storage/VolumeApiService.java",
                "sha": "7b38a6b1af101f941b73071b916b5a9fee0e79af",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/api/src/main/java/org/apache/cloudstack/api/BaseAsyncCmd.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/main/java/org/apache/cloudstack/api/BaseAsyncCmd.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 0,
                "filename": "api/src/main/java/org/apache/cloudstack/api/BaseAsyncCmd.java",
                "patch": "@@ -27,6 +27,7 @@\n     public static final String ipAddressSyncObject = \"ipaddress\";\n     public static final String networkSyncObject = \"network\";\n     public static final String vpcSyncObject = \"vpc\";\n+    public static final String migrationSyncObject = \"migration\";\n     public static final String snapshotHostSyncObject = \"snapshothost\";\n     public static final String gslbSyncObject = \"globalserverloadbalancer\";\n     private static final Logger s_logger = Logger.getLogger(BaseAsyncCmd.class.getName());",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/api/src/main/java/org/apache/cloudstack/api/BaseAsyncCmd.java",
                "sha": "1c3822c1057c0c8ab2d3702bed13c36bcd2f7c6a",
                "status": "modified"
            },
            {
                "additions": 43,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/api/src/main/java/org/apache/cloudstack/api/command/admin/vm/MigrateVMCmd.java",
                "changes": 71,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/main/java/org/apache/cloudstack/api/command/admin/vm/MigrateVMCmd.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 28,
                "filename": "api/src/main/java/org/apache/cloudstack/api/command/admin/vm/MigrateVMCmd.java",
                "patch": "@@ -43,10 +43,10 @@\n import com.cloud.vm.VirtualMachine;\n \n @APICommand(name = \"migrateVirtualMachine\",\n-            description = \"Attempts Migration of a VM to a different host or Root volume of the vm to a different storage pool\",\n+        description = \"Attempts Migration of a VM to a different host or Root volume of the vm to a different storage pool\",\n         responseObject = UserVmResponse.class, entityType = {VirtualMachine.class},\n-            requestHasSensitiveInfo = false,\n-            responseHasSensitiveInfo = true)\n+        requestHasSensitiveInfo = false,\n+        responseHasSensitiveInfo = true)\n public class MigrateVMCmd extends BaseAsyncCmd {\n     public static final Logger s_logger = Logger.getLogger(MigrateVMCmd.class.getName());\n \n@@ -57,24 +57,24 @@\n     /////////////////////////////////////////////////////\n \n     @Parameter(name = ApiConstants.HOST_ID,\n-               type = CommandType.UUID,\n-               entityType = HostResponse.class,\n-               required = false,\n-               description = \"Destination Host ID to migrate VM to. Required for live migrating a VM from host to host\")\n+            type = CommandType.UUID,\n+            entityType = HostResponse.class,\n+            required = false,\n+            description = \"Destination Host ID to migrate VM to. Required for live migrating a VM from host to host\")\n     private Long hostId;\n \n     @Parameter(name = ApiConstants.VIRTUAL_MACHINE_ID,\n-               type = CommandType.UUID,\n-               entityType = UserVmResponse.class,\n-               required = true,\n-               description = \"the ID of the virtual machine\")\n+            type = CommandType.UUID,\n+            entityType = UserVmResponse.class,\n+            required = true,\n+            description = \"the ID of the virtual machine\")\n     private Long virtualMachineId;\n \n     @Parameter(name = ApiConstants.STORAGE_ID,\n-               type = CommandType.UUID,\n-               entityType = StoragePoolResponse.class,\n-               required = false,\n-               description = \"Destination storage pool ID to migrate VM volumes to. Required for migrating the root disk volume\")\n+            type = CommandType.UUID,\n+            entityType = StoragePoolResponse.class,\n+            required = false,\n+            description = \"Destination storage pool ID to migrate VM volumes to. Required for migrating the root disk volume\")\n     private Long storageId;\n \n     /////////////////////////////////////////////////////\n@@ -119,13 +119,15 @@ public String getEventType() {\n \n     @Override\n     public String getEventDescription() {\n+        String eventDescription;\n         if (getHostId() != null) {\n-            return \"Attempting to migrate VM Id: \" + this._uuidMgr.getUuid(VirtualMachine.class, getVirtualMachineId()) + \" to host Id: \" + this._uuidMgr.getUuid(Host.class, getHostId());\n+            eventDescription = String.format(\"Attempting to migrate VM id: %s to host Id: %s\", getVirtualMachineId(), getHostId());\n         } else if (getStoragePoolId() != null) {\n-            return \"Attempting to migrate VM Id: \" + this._uuidMgr.getUuid(VirtualMachine.class, getVirtualMachineId()) + \" to storage pool Id: \" + this._uuidMgr.getUuid(StoragePool.class, getStoragePoolId());\n+            eventDescription = String.format(\"Attempting to migrate VM id: %s to storage pool Id: %s\", getVirtualMachineId(), getStoragePoolId());\n         } else {\n-            return \"Attempting to migrate VM Id: \" + this._uuidMgr.getUuid(VirtualMachine.class, getVirtualMachineId());\n+            eventDescription = String.format(\"Attempting to migrate VM id: %s\", getVirtualMachineId());\n         }\n+        return eventDescription;\n     }\n \n     @Override\n@@ -152,16 +154,17 @@ public void execute() {\n             if (destinationHost.getType() != Host.Type.Routing) {\n                 throw new InvalidParameterValueException(\"The specified host(\" + destinationHost.getName() + \") is not suitable to migrate the VM, please specify another one\");\n             }\n-            CallContext.current().setEventDetails(\"VM Id: \" + this._uuidMgr.getUuid(VirtualMachine.class, getVirtualMachineId()) + ((getHostId() != null) ?  \" to host Id: \" + this._uuidMgr.getUuid(Host.class, getHostId()) : \"\" ));\n+            CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to host Id: \" + getHostId());\n         }\n \n+        // OfflineMigration performed when this parameter is specified\n         StoragePool destStoragePool = null;\n         if (getStoragePoolId() != null) {\n             destStoragePool = _storageService.getStoragePool(getStoragePoolId());\n             if (destStoragePool == null) {\n                 throw new InvalidParameterValueException(\"Unable to find the storage pool to migrate the VM\");\n             }\n-            CallContext.current().setEventDetails(\"VM Id: \" + this._uuidMgr.getUuid(VirtualMachine.class, getVirtualMachineId()) + \" to storage pool Id: \" + this._uuidMgr.getUuid(StoragePool.class, getStoragePoolId()));\n+            CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to storage pool Id: \" + getStoragePoolId());\n         }\n \n         try {\n@@ -172,7 +175,7 @@ public void execute() {\n                 migratedVm = _userVmService.vmStorageMigration(getVirtualMachineId(), destStoragePool);\n             }\n             if (migratedVm != null) {\n-                UserVmResponse response = _responseGenerator.createUserVmResponse(ResponseView.Full, \"virtualmachine\", (UserVm)migratedVm).get(0);\n+                UserVmResponse response = _responseGenerator.createUserVmResponse(ResponseView.Full, \"virtualmachine\", (UserVm) migratedVm).get(0);\n                 response.setResponseName(getCommandName());\n                 setResponseObject(response);\n             } else {\n@@ -181,15 +184,27 @@ public void execute() {\n         } catch (ResourceUnavailableException ex) {\n             s_logger.warn(\"Exception: \", ex);\n             throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n-        } catch (ConcurrentOperationException e) {\n-            s_logger.warn(\"Exception: \", e);\n-            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n-        } catch (ManagementServerException e) {\n-            s_logger.warn(\"Exception: \", e);\n-            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n-        } catch (VirtualMachineMigrationException e) {\n+        } catch (VirtualMachineMigrationException | ConcurrentOperationException | ManagementServerException e) {\n             s_logger.warn(\"Exception: \", e);\n             throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n         }\n     }\n+\n+    @Override\n+    public String getSyncObjType() {\n+        return (getSyncObjId() != null) ? BaseAsyncCmd.migrationSyncObject : null;\n+    }\n+\n+    @Override\n+    public Long getSyncObjId() {\n+        if (getStoragePoolId() != null) {\n+            return getStoragePoolId();\n+        }\n+        // OfflineVmwareMigrations: undocumented feature;\n+        // OfflineVmwareMigrations: on implementing a maximum queue size for per storage migrations it seems counter intuitive for the user to not enforce it for hosts as well.\n+        if (getHostId() != null) {\n+            return getHostId();\n+        }\n+        return null;\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/api/src/main/java/org/apache/cloudstack/api/command/admin/vm/MigrateVMCmd.java",
                "sha": "9f73ae586a0835a79c71263cff68db714bf3c324",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/api/src/main/java/org/apache/cloudstack/api/command/admin/vm/MigrateVirtualMachineWithVolumeCmd.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/main/java/org/apache/cloudstack/api/command/admin/vm/MigrateVirtualMachineWithVolumeCmd.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 8,
                "filename": "api/src/main/java/org/apache/cloudstack/api/command/admin/vm/MigrateVirtualMachineWithVolumeCmd.java",
                "patch": "@@ -46,7 +46,7 @@\n \n @APICommand(name = \"migrateVirtualMachineWithVolume\",\n             description = \"Attempts Migration of a VM with its volumes to a different host\",\n-        responseObject = UserVmResponse.class, entityType = {VirtualMachine.class},\n+            responseObject = UserVmResponse.class, entityType = {VirtualMachine.class},\n             requestHasSensitiveInfo = false,\n             responseHasSensitiveInfo = true)\n public class MigrateVirtualMachineWithVolumeCmd extends BaseAsyncCmd {\n@@ -147,6 +147,7 @@ public void execute() {\n         }\n \n         Host destinationHost = _resourceService.getHost(getHostId());\n+        // OfflineVmwareMigration: destination host would have to not be a required parameter for stopped VMs\n         if (destinationHost == null) {\n             throw new InvalidParameterValueException(\"Unable to find the host to migrate the VM, host id =\" + getHostId());\n         }\n@@ -163,13 +164,7 @@ public void execute() {\n         } catch (ResourceUnavailableException ex) {\n             s_logger.warn(\"Exception: \", ex);\n             throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n-        } catch (ConcurrentOperationException e) {\n-            s_logger.warn(\"Exception: \", e);\n-            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n-        } catch (ManagementServerException e) {\n-            s_logger.warn(\"Exception: \", e);\n-            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n-        } catch (VirtualMachineMigrationException e) {\n+        } catch (ConcurrentOperationException | ManagementServerException | VirtualMachineMigrationException e) {\n             s_logger.warn(\"Exception: \", e);\n             throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/api/src/main/java/org/apache/cloudstack/api/command/admin/vm/MigrateVirtualMachineWithVolumeCmd.java",
                "sha": "65d71cc1300a90d71224066c28a1c28065e25787",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/api/src/main/java/org/apache/cloudstack/api/command/user/volume/MigrateVolumeCmd.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/main/java/org/apache/cloudstack/api/command/user/volume/MigrateVolumeCmd.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 0,
                "filename": "api/src/main/java/org/apache/cloudstack/api/command/user/volume/MigrateVolumeCmd.java",
                "patch": "@@ -120,4 +120,16 @@ public void execute() {\n         }\n     }\n \n+    @Override\n+    public String getSyncObjType() {\n+        return (getSyncObjId() != null) ? BaseAsyncCmd.migrationSyncObject : null;\n+    }\n+\n+    @Override\n+    public Long getSyncObjId() {\n+        if (getStoragePoolId() != null) {\n+            return getStoragePoolId();\n+        }\n+        return null;\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/api/src/main/java/org/apache/cloudstack/api/command/user/volume/MigrateVolumeCmd.java",
                "sha": "f5d5e8c86ee95b8a88e712d3cdc25b6f0d7a0a34",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/api/src/test/java/org/apache/cloudstack/api/command/test/UpdateRoleCmdTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/test/java/org/apache/cloudstack/api/command/test/UpdateRoleCmdTest.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 0,
                "filename": "api/src/test/java/org/apache/cloudstack/api/command/test/UpdateRoleCmdTest.java",
                "previous_filename": "api/test/org/apache/cloudstack/api/command/test/UpdateRoleCmdTest.java",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/api/src/test/java/org/apache/cloudstack/api/command/test/UpdateRoleCmdTest.java",
                "sha": "c0bd390c1963d15bd77307f9ac457fb990e878e5",
                "status": "renamed"
            },
            {
                "additions": 43,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/core/src/main/java/com/cloud/agent/api/MigrateVmToPoolAnswer.java",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/core/src/main/java/com/cloud/agent/api/MigrateVmToPoolAnswer.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 0,
                "filename": "core/src/main/java/com/cloud/agent/api/MigrateVmToPoolAnswer.java",
                "patch": "@@ -0,0 +1,43 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+\n+package com.cloud.agent.api;\n+\n+import org.apache.cloudstack.storage.to.VolumeObjectTO;\n+\n+import java.util.List;\n+\n+public class MigrateVmToPoolAnswer extends Answer {\n+\n+    List<VolumeObjectTO> volumeTos;\n+\n+    public MigrateVmToPoolAnswer(MigrateVmToPoolCommand cmd, Exception ex) {\n+        super(cmd, ex);\n+        volumeTos = null;\n+    }\n+\n+    public MigrateVmToPoolAnswer(MigrateVmToPoolCommand cmd, List<VolumeObjectTO> volumeTos) {\n+        super(cmd, true, null);\n+        this.volumeTos = volumeTos;\n+    }\n+\n+    public List<VolumeObjectTO> getVolumeTos() {\n+        return volumeTos;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/core/src/main/java/com/cloud/agent/api/MigrateVmToPoolAnswer.java",
                "sha": "bc9ae6fd08257af32d6ca7de2f292ed6b68d73e4",
                "status": "added"
            },
            {
                "additions": 70,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/core/src/main/java/com/cloud/agent/api/MigrateVmToPoolCommand.java",
                "changes": 70,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/core/src/main/java/com/cloud/agent/api/MigrateVmToPoolCommand.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 0,
                "filename": "core/src/main/java/com/cloud/agent/api/MigrateVmToPoolCommand.java",
                "patch": "@@ -0,0 +1,70 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package com.cloud.agent.api;\n+\n+import com.cloud.agent.api.to.VolumeTO;\n+\n+import java.util.Collection;\n+\n+/**\n+ * used to tell the agent to migrate a vm to a different primary storage pool.\n+ * It is for now only implemented on Vmware and is supposed to work irrespective of whether the VM is started or not.\n+ *\n+ */\n+public class MigrateVmToPoolCommand extends Command {\n+    private Collection<VolumeTO> volumes;\n+    private String vmName;\n+    private String destinationPool;\n+    private boolean executeInSequence = false;\n+\n+    protected MigrateVmToPoolCommand() {\n+    }\n+\n+    /**\n+     *\n+     * @param vmName the name of the VM to migrate\n+     * @param volumes used to supply feedback on vmware generated names\n+     * @param destinationPool the primary storage pool to migrate the VM to\n+     * @param executeInSequence\n+     */\n+    public MigrateVmToPoolCommand(String vmName, Collection<VolumeTO> volumes, String destinationPool, boolean executeInSequence) {\n+        this.vmName = vmName;\n+        this.volumes = volumes;\n+        this.destinationPool = destinationPool;\n+        this.executeInSequence = executeInSequence;\n+    }\n+\n+    public Collection<VolumeTO> getVolumes() {\n+        return volumes;\n+    }\n+\n+    public String getDestinationPool() {\n+        return destinationPool;\n+    }\n+\n+    public String getVmName() {\n+        return vmName;\n+    }\n+\n+    @Override\n+    public boolean executeInSequence() {\n+        return executeInSequence;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/core/src/main/java/com/cloud/agent/api/MigrateVmToPoolCommand.java",
                "sha": "91a911d7c18170d73ef50bc2934453c2101f5d94",
                "status": "added"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/core/src/main/java/com/cloud/agent/api/UnregisterVMCommand.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/core/src/main/java/com/cloud/agent/api/UnregisterVMCommand.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 1,
                "filename": "core/src/main/java/com/cloud/agent/api/UnregisterVMCommand.java",
                "patch": "@@ -22,14 +22,19 @@\n public class UnregisterVMCommand extends Command {\n     String vmName;\n     boolean cleanupVmFiles = false;\n+    boolean executeInSequence;\n \n     public UnregisterVMCommand(String vmName) {\n+        this(vmName, false);\n+    }\n+    public UnregisterVMCommand(String vmName, boolean executeInSequence) {\n         this.vmName = vmName;\n+        this.executeInSequence = executeInSequence;\n     }\n \n     @Override\n     public boolean executeInSequence() {\n-        return false;\n+        return executeInSequence;\n     }\n \n     public String getVmName() {",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/core/src/main/java/com/cloud/agent/api/UnregisterVMCommand.java",
                "sha": "4c5f138a63c73f08ab638af65b6482a4d809788e",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/core/src/main/java/com/cloud/agent/api/storage/MigrateVolumeCommand.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/core/src/main/java/com/cloud/agent/api/storage/MigrateVolumeCommand.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 3,
                "filename": "core/src/main/java/com/cloud/agent/api/storage/MigrateVolumeCommand.java",
                "patch": "@@ -31,6 +31,7 @@\n     long volumeId;\n     String volumePath;\n     StorageFilerTO pool;\n+    StorageFilerTO sourcePool;\n     String attachedVmName;\n     Volume.Type volumeType;\n \n@@ -47,14 +48,17 @@ public MigrateVolumeCommand(long volumeId, String volumePath, StoragePool pool,\n     }\n \n     public MigrateVolumeCommand(long volumeId, String volumePath, StoragePool pool, String attachedVmName, Volume.Type volumeType, int timeout) {\n-        this.volumeId = volumeId;\n-        this.volumePath = volumePath;\n-        this.pool = new StorageFilerTO(pool);\n+        this(volumeId,volumePath,pool,timeout);\n         this.attachedVmName = attachedVmName;\n         this.volumeType = volumeType;\n         this.setWait(timeout);\n     }\n \n+    public MigrateVolumeCommand(long volumeId, String volumePath, StoragePool sourcePool, StoragePool targetPool) {\n+        this(volumeId,volumePath,targetPool, null, Volume.Type.UNKNOWN, -1);\n+        this.sourcePool = new StorageFilerTO(sourcePool);\n+    }\n+\n     public MigrateVolumeCommand(DataTO srcData, DataTO destData, Map<String, String> srcDetails, Map<String, String> destDetails, int timeout) {\n         this.srcData = srcData;\n         this.destData = destData;\n@@ -81,6 +85,14 @@ public StorageFilerTO getPool() {\n         return pool;\n     }\n \n+    public StorageFilerTO getSourcePool() {\n+        return sourcePool;\n+    }\n+\n+    public StorageFilerTO getTargetPool() {\n+        return pool;\n+    }\n+\n     public String getAttachedVmName() {\n         return attachedVmName;\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/core/src/main/java/com/cloud/agent/api/storage/MigrateVolumeCommand.java",
                "sha": "9902a86fb8938f8de61fd65f3af9e28f7e0ba5b4",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/engine/api/src/main/java/org/apache/cloudstack/engine/subsystem/api/storage/DataMotionStrategy.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/api/src/main/java/org/apache/cloudstack/engine/subsystem/api/storage/DataMotionStrategy.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 0,
                "filename": "engine/api/src/main/java/org/apache/cloudstack/engine/subsystem/api/storage/DataMotionStrategy.java",
                "patch": "@@ -25,11 +25,28 @@\n import com.cloud.agent.api.to.VirtualMachineTO;\n import com.cloud.host.Host;\n \n+/**\n+ * Interface to query how to move data around and to commision the moving\n+ */\n public interface DataMotionStrategy {\n+    /**\n+     * Reports whether this instance can do a move from source to destination\n+     * @param srcData object to move\n+     * @param destData location to move it to\n+     * @return the expertise level with which this instance knows how to handle the move\n+     */\n     StrategyPriority canHandle(DataObject srcData, DataObject destData);\n \n     StrategyPriority canHandle(Map<VolumeInfo, DataStore> volumeMap, Host srcHost, Host destHost);\n \n+    /**\n+     * Copy the source volume to its destination (on a host if not null)\n+     *\n+     * @param srcData volume to move\n+     * @param destData volume description as intended after the move\n+     * @param destHost if not null destData should be reachable from here\n+     * @param callback where to report completion or failure to\n+     */\n     void copyAsync(DataObject srcData, DataObject destData, Host destHost, AsyncCompletionCallback<CopyCommandResult> callback);\n \n     void copyAsync(Map<VolumeInfo, DataStore> volumeMap, VirtualMachineTO vmTo, Host srcHost, Host destHost, AsyncCompletionCallback<CopyCommandResult> callback);",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/engine/api/src/main/java/org/apache/cloudstack/engine/subsystem/api/storage/DataMotionStrategy.java",
                "sha": "2afece483c65b4f3c0d852200c4d5e143b2a8539",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/engine/components-api/src/main/java/com/cloud/storage/StorageManager.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/components-api/src/main/java/com/cloud/storage/StorageManager.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 1,
                "filename": "engine/components-api/src/main/java/com/cloud/storage/StorageManager.java",
                "patch": "@@ -106,7 +106,14 @@\n      * @param poolId\n      * @return comma separated list of tags\n      */\n-    public String getStoragePoolTags(long poolId);\n+    String getStoragePoolTags(long poolId);\n+\n+    /**\n+     * Returns a list of Strings with tags for the specified storage pool\n+     * @param poolId\n+     * @return comma separated list of tags\n+     */\n+    List<String> getStoragePoolTagList(long poolId);\n \n     Answer sendToPool(long poolId, Command cmd) throws StorageUnavailableException;\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/engine/components-api/src/main/java/com/cloud/storage/StorageManager.java",
                "sha": "c9c24d8ad730d4b08f1731bc2dd868c5673fe34a",
                "status": "modified"
            },
            {
                "additions": 247,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 334,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 87,
                "filename": "engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -41,6 +41,9 @@\n \n import org.apache.cloudstack.api.ApiConstants;\n import org.apache.cloudstack.affinity.dao.AffinityGroupVMMapDao;\n+import org.apache.cloudstack.api.command.admin.vm.MigrateVMCmd;\n+import org.apache.cloudstack.api.command.admin.volume.MigrateVolumeCmdByAdmin;\n+import org.apache.cloudstack.api.command.user.volume.MigrateVolumeCmd;\n import org.apache.cloudstack.ca.CAManager;\n import org.apache.cloudstack.context.CallContext;\n import org.apache.cloudstack.engine.orchestration.service.NetworkOrchestrationService;\n@@ -86,6 +89,7 @@\n import com.cloud.agent.api.ClusterVMMetaDataSyncCommand;\n import com.cloud.agent.api.Command;\n import com.cloud.agent.api.MigrateCommand;\n+import com.cloud.agent.api.MigrateVmToPoolAnswer;\n import com.cloud.agent.api.ModifyTargetsCommand;\n import com.cloud.agent.api.PingRoutingCommand;\n import com.cloud.agent.api.PlugNicAnswer;\n@@ -138,10 +142,8 @@\n import com.cloud.exception.AgentUnavailableException;\n import com.cloud.exception.ConcurrentOperationException;\n import com.cloud.exception.ConnectionException;\n-import com.cloud.exception.InsufficientAddressCapacityException;\n import com.cloud.exception.InsufficientCapacityException;\n import com.cloud.exception.InsufficientServerCapacityException;\n-import com.cloud.exception.InsufficientVirtualNetworkCapacityException;\n import com.cloud.exception.InvalidParameterValueException;\n import com.cloud.exception.OperationTimedoutException;\n import com.cloud.exception.ResourceUnavailableException;\n@@ -171,10 +173,12 @@\n import com.cloud.storage.DiskOfferingVO;\n import com.cloud.storage.ScopeType;\n import com.cloud.storage.Storage.ImageFormat;\n+import com.cloud.storage.StorageManager;\n import com.cloud.storage.StoragePool;\n import com.cloud.storage.VMTemplateVO;\n import com.cloud.storage.Volume;\n import com.cloud.storage.Volume.Type;\n+import com.cloud.storage.VolumeApiService;\n import com.cloud.storage.VolumeVO;\n import com.cloud.storage.dao.DiskOfferingDao;\n import com.cloud.storage.dao.GuestOSCategoryDao;\n@@ -314,6 +318,8 @@\n     private VmWorkJobDao _workJobDao;\n     @Inject\n     private AsyncJobManager _jobMgr;\n+    @Inject\n+    private StorageManager storageMgr;\n \n     VmWorkJobHandlerProxy _jobHandlerProxy = new VmWorkJobHandlerProxy(this);\n \n@@ -1820,14 +1826,6 @@ private void setStateMachine() {\n     protected boolean stateTransitTo(final VMInstanceVO vm, final VirtualMachine.Event e, final Long hostId, final String reservationId) throws NoTransitionException {\n         // if there are active vm snapshots task, state change is not allowed\n \n-        // Disable this hacking thing, VM snapshot task need to be managed by its orchestartion flow istelf instead of\n-        // hacking it here at general VM manager\n-        /*\n-                if (_vmSnapshotMgr.hasActiveVMSnapshotTasks(vm.getId())) {\n-                    s_logger.error(\"State transit with event: \" + e + \" failed due to: \" + vm.getInstanceName() + \" has active VM snapshots tasks\");\n-                    return false;\n-                }\n-         */\n         vm.setReservationId(reservationId);\n         return _stateMachine.transitTo(vm, e, new Pair<Long, Long>(vm.getHostId(), hostId), _vmDao);\n     }\n@@ -1836,15 +1834,6 @@ protected boolean stateTransitTo(final VMInstanceVO vm, final VirtualMachine.Eve\n     public boolean stateTransitTo(final VirtualMachine vm1, final VirtualMachine.Event e, final Long hostId) throws NoTransitionException {\n         final VMInstanceVO vm = (VMInstanceVO)vm1;\n \n-        /*\n-         *  Remove the hacking logic here.\n-                // if there are active vm snapshots task, state change is not allowed\n-                if (_vmSnapshotMgr.hasActiveVMSnapshotTasks(vm.getId())) {\n-                    s_logger.error(\"State transit with event: \" + e + \" failed due to: \" + vm.getInstanceName() + \" has active VM snapshots tasks\");\n-                    return false;\n-                }\n-         */\n-\n         final State oldState = vm.getState();\n         if (oldState == State.Starting) {\n             if (e == Event.OperationSucceeded) {\n@@ -1988,92 +1977,246 @@ public void storageMigration(final String vmUuid, final StoragePool destPool) {\n     private void orchestrateStorageMigration(final String vmUuid, final StoragePool destPool) {\n         final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n \n-        if (destPool == null) {\n-            throw new CloudRuntimeException(\"Unable to migrate vm: missing destination storage pool\");\n-        }\n+        preStorageMigrationStateCheck(destPool, vm);\n \n         try {\n-            stateTransitTo(vm, VirtualMachine.Event.StorageMigrationRequested, null);\n-        } catch (final NoTransitionException e) {\n-            s_logger.debug(\"Unable to migrate vm: \" + e.toString());\n-            throw new CloudRuntimeException(\"Unable to migrate vm: \" + e.toString());\n+            if(s_logger.isDebugEnabled()) {\n+                s_logger.debug(String.format(\"Offline migration of %s vm %s with volumes\",\n+                                vm.getHypervisorType().toString(),\n+                                vm.getInstanceName()));\n+            }\n+\n+            migrateThroughHypervisorOrStorage(destPool, vm);\n+\n+        } catch (ConcurrentOperationException\n+                | InsufficientCapacityException // possibly InsufficientVirtualNetworkCapacityException or InsufficientAddressCapacityException\n+                | StorageUnavailableException e) {\n+            String msg = String.format(\"Failed to migrate VM: %s\", vmUuid);\n+            s_logger.debug(msg);\n+            throw new CloudRuntimeException(msg, e);\n+        } finally {\n+            try {\n+                stateTransitTo(vm, Event.AgentReportStopped, null);\n+            } catch (final NoTransitionException e) {\n+                String anotherMEssage = String.format(\"failed to change vm state of VM: %s\", vmUuid);\n+                s_logger.debug(anotherMEssage);\n+                throw new CloudRuntimeException(anotherMEssage, e);\n+            }\n         }\n+    }\n \n+    private Answer[] attemptHypervisorMigration(StoragePool destPool, VMInstanceVO vm) {\n+        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vm.getHypervisorType());\n+        // OfflineVmwareMigration: in case of vmware call vcenter to do it for us.\n+        // OfflineVmwareMigration: should we check the proximity of source and destination\n+        // OfflineVmwareMigration: if we are in the same cluster/datacentre/pool or whatever?\n+        // OfflineVmwareMigration: we are checking on success to optionally delete an old vm if we are not\n+        List<Command> commandsToSend = hvGuru.finalizeMigrate(vm, destPool);\n+\n+        Long hostId = vm.getHostId();\n+        // OfflineVmwareMigration: probably this is null when vm is stopped\n+        if(hostId == null) {\n+            hostId = vm.getLastHostId();\n+            if (s_logger.isDebugEnabled()) {\n+                s_logger.debug(String.format(\"host id is null, using last host id %d\", hostId) );\n+            }\n+        }\n+\n+        if(CollectionUtils.isNotEmpty(commandsToSend)) {\n+            Commands commandsContainer = new Commands(Command.OnError.Stop);\n+            commandsContainer.addCommands(commandsToSend);\n+            try {\n+                // OfflineVmwareMigration: change to the call back variety?\n+                // OfflineVmwareMigration: getting a Long seq to be filled with _agentMgr.send(hostId, commandsContainer, this)\n+                return  _agentMgr.send(hostId, commandsContainer);\n+            } catch (AgentUnavailableException | OperationTimedoutException e) {\n+                throw new CloudRuntimeException(String.format(\"Failed to migrate VM: %s\", vm.getUuid()),e);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private void afterHypervisorMigrationCleanup(StoragePool destPool, VMInstanceVO vm, HostVO srcHost, Long srcClusterId, Answer[] hypervisorMigrationResults) throws InsufficientCapacityException {\n+        boolean isDebugEnabled = s_logger.isDebugEnabled();\n+        if(isDebugEnabled) {\n+            String msg = String.format(\"cleaning up after hypervisor pool migration volumes for VM %s(%s) to pool %s(%s)\", vm.getInstanceName(), vm.getUuid(), destPool.getName(), destPool.getUuid());\n+            s_logger.debug(msg);\n+        }\n+        setDestinationPoolAndReallocateNetwork(destPool, vm);\n+        // OfflineVmwareMigration: don't set this to null or have another way to address the command; twice migrating will lead to an NPE\n+        Long destPodId = destPool.getPodId();\n+        Long vmPodId = vm.getPodIdToDeployIn();\n+        if (destPodId == null || ! destPodId.equals(vmPodId)) {\n+            if(isDebugEnabled) {\n+                String msg = String.format(\"resetting lasHost for VM %s(%s) as pod (%s) is no good.\", vm.getInstanceName(), vm.getUuid(), destPodId);\n+                s_logger.debug(msg);\n+            }\n+\n+            vm.setLastHostId(null);\n+            vm.setPodIdToDeployIn(destPodId);\n+            // OfflineVmwareMigration: a consecutive migration will fail probably (no host not pod)\n+        }// else keep last host set for this vm\n+        markVolumesInPool(vm,destPool, hypervisorMigrationResults);\n+        // OfflineVmwareMigration: deal with answers, if (hypervisorMigrationResults.length > 0)\n+        // OfflineVmwareMigration: iterate over the volumes for data updates\n+    }\n+\n+    private void markVolumesInPool(VMInstanceVO vm, StoragePool destPool, Answer[] hypervisorMigrationResults) {\n+        MigrateVmToPoolAnswer relevantAnswer = null;\n+        for (Answer answer : hypervisorMigrationResults) {\n+            if (s_logger.isTraceEnabled()) {\n+                s_logger.trace(String.format(\"received an %s: %s\", answer.getClass().getSimpleName(), answer));\n+            }\n+            if (answer instanceof MigrateVmToPoolAnswer) {\n+                relevantAnswer = (MigrateVmToPoolAnswer) answer;\n+            }\n+        }\n+        if (relevantAnswer == null) {\n+            throw new CloudRuntimeException(\"no relevant migration results found\");\n+        }\n+        List<VolumeVO> volumes = _volsDao.findUsableVolumesForInstance(vm.getId());\n+        if(s_logger.isDebugEnabled()) {\n+            String msg = String.format(\"found %d volumes for VM %s(uuid:%s, id:%d)\", volumes.size(), vm.getInstanceName(), vm.getUuid(), vm.getId());\n+            s_logger.debug(msg);\n+        }\n+        for (VolumeObjectTO result : relevantAnswer.getVolumeTos() ) {\n+            if(s_logger.isDebugEnabled()) {\n+                s_logger.debug(String.format(\"updating volume (%d) with path '%s' on pool '%d'\", result.getId(), result.getPath(), destPool.getId()));\n+            }\n+            VolumeVO volume = _volsDao.findById(result.getId());\n+            volume.setPath(result.getPath());\n+            volume.setPoolId(destPool.getId());\n+            _volsDao.update(volume.getId(), volume);\n+        }\n+    }\n+\n+    private void migrateThroughHypervisorOrStorage(StoragePool destPool, VMInstanceVO vm) throws StorageUnavailableException, InsufficientCapacityException {\n         final VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n+        final Long srchostId = vm.getHostId() != null ? vm.getHostId() : vm.getLastHostId();\n+        final HostVO srcHost = _hostDao.findById(srchostId);\n+        final Long srcClusterId = srcHost.getClusterId();\n+        Answer[] hypervisorMigrationResults = attemptHypervisorMigration(destPool, vm);\n         boolean migrationResult = false;\n-        try {\n+        if (hypervisorMigrationResults == null) {\n+            // OfflineVmwareMigration: if the HypervisorGuru can't do it, let the volume manager take care of it.\n             migrationResult = volumeMgr.storageMigration(profile, destPool);\n-\n             if (migrationResult) {\n-                //if the vm is migrated to different pod in basic mode, need to reallocate ip\n+                afterStorageMigrationCleanup(destPool, vm, srcHost, srcClusterId);\n+            } else {\n+                s_logger.debug(\"Storage migration failed\");\n+            }\n+        } else {\n+            afterHypervisorMigrationCleanup(destPool, vm, srcHost, srcClusterId, hypervisorMigrationResults);\n+        }\n+    }\n \n-                if (destPool.getPodId() != null && !destPool.getPodId().equals(vm.getPodIdToDeployIn())) {\n-                    final DataCenterDeployment plan = new DataCenterDeployment(vm.getDataCenterId(), destPool.getPodId(), null, null, null, null);\n-                    final VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vm, null, null, null, null);\n-                    _networkMgr.reallocate(vmProfile, plan);\n-                }\n+    private void preStorageMigrationStateCheck(StoragePool destPool, VMInstanceVO vm) {\n+        if (destPool == null) {\n+            throw new CloudRuntimeException(\"Unable to migrate vm: missing destination storage pool\");\n+        }\n \n-                //when start the vm next time, don;'t look at last_host_id, only choose the host based on volume/storage pool\n-                vm.setLastHostId(null);\n-                vm.setPodIdToDeployIn(destPool.getPodId());\n-\n-                // If VM was cold migrated between clusters belonging to two different VMware DCs,\n-                // unregister the VM from the source host and cleanup the associated VM files.\n-                if (vm.getHypervisorType().equals(HypervisorType.VMware)) {\n-                    Long srcClusterId = null;\n-                    Long srcHostId = vm.getHostId() != null ? vm.getHostId() : vm.getLastHostId();\n-                    if (srcHostId != null) {\n-                        HostVO srcHost = _hostDao.findById(srcHostId);\n-                        srcClusterId = srcHost.getClusterId();\n-                    }\n+        checkDestinationForTags(destPool, vm);\n+        try {\n+            stateTransitTo(vm, Event.StorageMigrationRequested, null);\n+        } catch (final NoTransitionException e) {\n+            String msg = String.format(\"Unable to migrate vm: %s\", vm.getUuid());\n+            s_logger.debug(msg);\n+            throw new CloudRuntimeException(msg, e);\n+        }\n+    }\n \n-                    final Long destClusterId = destPool.getClusterId();\n-                    if (srcClusterId != null && destClusterId != null && ! srcClusterId.equals(destClusterId)) {\n-                        final String srcDcName = _clusterDetailsDao.getVmwareDcName(srcClusterId);\n-                        final String destDcName = _clusterDetailsDao.getVmwareDcName(destClusterId);\n-                        if (srcDcName != null && destDcName != null && !srcDcName.equals(destDcName)) {\n-                            s_logger.debug(\"Since VM's storage was successfully migrated across VMware Datacenters, unregistering VM: \" + vm.getInstanceName() +\n-                                    \" from source host: \" + srcHostId);\n-                            final UnregisterVMCommand uvc = new UnregisterVMCommand(vm.getInstanceName());\n-                            uvc.setCleanupVmFiles(true);\n-                            try {\n-                                _agentMgr.send(srcHostId, uvc);\n-                            } catch (final AgentUnavailableException | OperationTimedoutException e) {\n-                                throw new CloudRuntimeException(\"Failed to unregister VM: \" + vm.getInstanceName() + \" from source host: \" + srcHostId +\n-                                        \" after successfully migrating VM's storage across VMware Datacenters\");\n-                            }\n-                        }\n-                    }\n+    private void checkDestinationForTags(StoragePool destPool, VMInstanceVO vm) {\n+        List<VolumeVO> vols = _volsDao.findUsableVolumesForInstance(vm.getId());\n+        // OfflineVmwareMigration: iterate over volumes\n+        // OfflineVmwareMigration: get disk offering\n+        List<String> storageTags = storageMgr.getStoragePoolTagList(destPool.getId());\n+        for(Volume vol : vols) {\n+            DiskOfferingVO diskOffering = _diskOfferingDao.findById(vol.getDiskOfferingId());\n+            List<String> volumeTags = StringUtils.csvTagsToList(diskOffering.getTags());\n+            if(! matches(volumeTags, storageTags)) {\n+                String msg = String.format(\"destination pool '%s' with tags '%s', does not support the volume diskoffering for volume '%s' (tags: '%s') \",\n+                        destPool.getName(),\n+                        StringUtils.listToCsvTags(storageTags),\n+                        vol.getName(),\n+                        StringUtils.listToCsvTags(volumeTags)\n+                );\n+                throw new CloudRuntimeException(msg);\n+            }\n+        }\n+    }\n+\n+    static boolean matches(List<String> volumeTags, List<String> storagePoolTags) {\n+        // OfflineVmwareMigration: commons collections 4 allows for Collections.containsAll(volumeTags,storagePoolTags);\n+        boolean result = true;\n+        if (volumeTags != null) {\n+            for (String tag : volumeTags) {\n+                // there is a volume tags so\n+                if (storagePoolTags == null || !storagePoolTags.contains(tag)) {\n+                    result = false;\n+                    break;\n                 }\n+            }\n+        }\n+        return result;\n+    }\n \n-            } else {\n-                s_logger.debug(\"Storage migration failed\");\n+\n+    private void afterStorageMigrationCleanup(StoragePool destPool, VMInstanceVO vm, HostVO srcHost, Long srcClusterId) throws InsufficientCapacityException {\n+        setDestinationPoolAndReallocateNetwork(destPool, vm);\n+\n+        //when start the vm next time, don;'t look at last_host_id, only choose the host based on volume/storage pool\n+        vm.setLastHostId(null);\n+        vm.setPodIdToDeployIn(destPool.getPodId());\n+\n+        // If VM was cold migrated between clusters belonging to two different VMware DCs,\n+        // unregister the VM from the source host and cleanup the associated VM files.\n+        if (vm.getHypervisorType().equals(HypervisorType.VMware)) {\n+            afterStorageMigrationVmwareVMcleanup(destPool, vm, srcHost, srcClusterId);\n+        }\n+    }\n+\n+    private void setDestinationPoolAndReallocateNetwork(StoragePool destPool, VMInstanceVO vm) throws InsufficientCapacityException {\n+        //if the vm is migrated to different pod in basic mode, need to reallocate ip\n+\n+        if (destPool.getPodId() != null && !destPool.getPodId().equals(vm.getPodIdToDeployIn())) {\n+            if (s_logger.isDebugEnabled()) {\n+                String msg = String.format(\"as the pod for vm %s has changed we are reallocating its network\", vm.getInstanceName());\n+                s_logger.debug(msg);\n             }\n-        } catch (final ConcurrentOperationException e) {\n-            s_logger.debug(\"Failed to migration: \" + e.toString());\n-            throw new CloudRuntimeException(\"Failed to migration: \" + e.toString());\n-        } catch (final InsufficientVirtualNetworkCapacityException e) {\n-            s_logger.debug(\"Failed to migration: \" + e.toString());\n-            throw new CloudRuntimeException(\"Failed to migration: \" + e.toString());\n-        } catch (final InsufficientAddressCapacityException e) {\n-            s_logger.debug(\"Failed to migration: \" + e.toString());\n-            throw new CloudRuntimeException(\"Failed to migration: \" + e.toString());\n-        } catch (final InsufficientCapacityException e) {\n-            s_logger.debug(\"Failed to migration: \" + e.toString());\n-            throw new CloudRuntimeException(\"Failed to migration: \" + e.toString());\n-        } catch (final StorageUnavailableException e) {\n-            s_logger.debug(\"Failed to migration: \" + e.toString());\n-            throw new CloudRuntimeException(\"Failed to migration: \" + e.toString());\n-        } finally {\n-            try {\n-                stateTransitTo(vm, VirtualMachine.Event.AgentReportStopped, null);\n-            } catch (final NoTransitionException e) {\n-                s_logger.debug(\"Failed to change vm state: \" + e.toString());\n-                throw new CloudRuntimeException(\"Failed to change vm state: \" + e.toString());\n+            final DataCenterDeployment plan = new DataCenterDeployment(vm.getDataCenterId(), destPool.getPodId(), null, null, null, null);\n+            final VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vm, null, null, null, null);\n+            _networkMgr.reallocate(vmProfile, plan);\n+        }\n+    }\n+\n+    private void afterStorageMigrationVmwareVMcleanup(StoragePool destPool, VMInstanceVO vm, HostVO srcHost, Long srcClusterId) {\n+        // OfflineVmwareMigration: this should only happen on storage migration, else the guru would already have issued the command\n+        final Long destClusterId = destPool.getClusterId();\n+        if (srcClusterId != null && destClusterId != null && ! srcClusterId.equals(destClusterId)) {\n+            final String srcDcName = _clusterDetailsDao.getVmwareDcName(srcClusterId);\n+            final String destDcName = _clusterDetailsDao.getVmwareDcName(destClusterId);\n+            if (srcDcName != null && destDcName != null && !srcDcName.equals(destDcName)) {\n+                removeStaleVmFromSource(vm, srcHost);\n             }\n         }\n     }\n \n+    // OfflineVmwareMigration: on port forward refator this to be done in two\n+    // OfflineVmwareMigration: command creation in the guru.migrat method\n+    // OfflineVmwareMigration: sending up in the attemptHypevisorMigration with execute in sequence (responsibility of the guru)\n+    private void removeStaleVmFromSource(VMInstanceVO vm, HostVO srcHost) {\n+        s_logger.debug(\"Since VM's storage was successfully migrated across VMware Datacenters, unregistering VM: \" + vm.getInstanceName() +\n+                \" from source host: \" + srcHost.getId());\n+        final UnregisterVMCommand uvc = new UnregisterVMCommand(vm.getInstanceName());\n+        uvc.setCleanupVmFiles(true);\n+        try {\n+            _agentMgr.send(srcHost.getId(), uvc);\n+        } catch (final Exception e) {\n+            throw new CloudRuntimeException(\"Failed to unregister VM: \" + vm.getInstanceName() + \" from source host: \" + srcHost.getId() +\n+                    \" after successfully migrating VM's storage across VMware Datacenters\");\n+        }\n+    }\n+\n     @Override\n     public void migrate(final String vmUuid, final long srcHostId, final DeployDestination dest)\n             throws ResourceUnavailableException, ConcurrentOperationException {\n@@ -4577,6 +4720,13 @@ protected VirtualMachine retrieve() {\n         final User user = context.getCallingUser();\n         final Account account = context.getCallingAccount();\n \n+        Map<Volume, StoragePool> volumeStorageMap = dest.getStorageForDisks();\n+        if (volumeStorageMap != null) {\n+            for (Volume vol : volumeStorageMap.keySet()) {\n+                checkConcurrentJobsPerDatastoreThreshhold(volumeStorageMap.get(vol));\n+            }\n+        }\n+\n         final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n \n         final List<VmWorkJobVO> pendingWorkJobs = _workJobDao.listPendingWorkJobs(\n@@ -4738,6 +4888,16 @@ protected VirtualMachine retrieve() {\n         return new VmJobVirtualMachineOutcome(workJob, vm.getId());\n     }\n \n+    private void checkConcurrentJobsPerDatastoreThreshhold(final StoragePool destPool) {\n+        final Long threshold = VolumeApiService.ConcurrentMigrationsThresholdPerDatastore.value();\n+        if (threshold != null && threshold > 0) {\n+            long count = _jobMgr.countPendingJobs(\"\\\"storageid\\\":\\\"\" + destPool.getUuid() + \"\\\"\", MigrateVMCmd.class.getName(), MigrateVolumeCmd.class.getName(), MigrateVolumeCmdByAdmin.class.getName());\n+            if (count > threshold) {\n+                throw new CloudRuntimeException(\"Number of concurrent migration jobs per datastore exceeded the threshold: \" + threshold.toString() + \". Please try again after some time.\");\n+            }\n+        }\n+    }\n+\n     public Outcome<VirtualMachine> migrateVmStorageThroughJobQueue(\n             final String vmUuid, final StoragePool destPool) {\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "7d218e226d50a4ea8ad6d0dfaf12d69bdb6d85fc",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 0,
                "filename": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java",
                "patch": "@@ -30,6 +30,10 @@\n import javax.inject.Inject;\n import javax.naming.ConfigurationException;\n \n+import com.cloud.storage.VolumeApiService;\n+import org.apache.cloudstack.api.command.admin.vm.MigrateVMCmd;\n+import org.apache.cloudstack.api.command.admin.volume.MigrateVolumeCmdByAdmin;\n+import org.apache.cloudstack.api.command.user.volume.MigrateVolumeCmd;\n import org.apache.cloudstack.engine.orchestration.service.VolumeOrchestrationService;\n import org.apache.cloudstack.engine.subsystem.api.storage.ChapInfo;\n import org.apache.cloudstack.engine.subsystem.api.storage.DataObject;\n@@ -953,10 +957,29 @@ public void revokeAccess(long vmId, long hostId) {\n         }\n     }\n \n+    private void checkConcurrentJobsPerDatastoreThreshhold(final StoragePool destPool) {\n+        final Long threshold = VolumeApiService.ConcurrentMigrationsThresholdPerDatastore.value();\n+        if (threshold != null && threshold > 0) {\n+            long count = _jobMgr.countPendingJobs(\"\\\"storageid\\\":\\\"\" + destPool.getUuid() + \"\\\"\", MigrateVMCmd.class.getName(), MigrateVolumeCmd.class.getName(), MigrateVolumeCmdByAdmin.class.getName());\n+            if (count > threshold) {\n+                throw new CloudRuntimeException(\"Number of concurrent migration jobs per datastore exceeded the threshold: \" + threshold.toString() + \". Please try again after some time.\");\n+            }\n+        }\n+    }\n+\n+\n     @Override\n     @DB\n     public Volume migrateVolume(Volume volume, StoragePool destPool) throws StorageUnavailableException {\n         VolumeInfo vol = volFactory.getVolume(volume.getId());\n+        if (vol == null){\n+            throw new CloudRuntimeException(\"Migrate volume failed because volume object of volume \" + volume.getName()+ \"is null\");\n+        }\n+        if (destPool == null) {\n+            throw new CloudRuntimeException(\"Migrate volume failed because destination storage pool is not available!!\");\n+        }\n+\n+        checkConcurrentJobsPerDatastoreThreshhold(destPool);\n \n         DataStore dataStoreTarget = dataStoreMgr.getDataStore(destPool.getId(), DataStoreRole.Primary);\n         AsyncCallFuture<VolumeApiResult> future = volService.copyVolume(vol, dataStoreTarget);\n@@ -1062,6 +1085,10 @@ public boolean storageMigration(VirtualMachineProfile vm, StoragePool destPool)\n             return true;\n         }\n \n+        // OfflineVmwareMigration: in case we can (vmware?) don't itterate over volumes but tell the hypervisor to do the thing\n+        if (s_logger.isDebugEnabled()) {\n+            s_logger.debug(\"Offline vm migration was not done up the stack in VirtualMachineManager so trying here.\");\n+        }\n         for (Volume vol : volumesNeedToMigrate) {\n             Volume result = migrateVolume(vol, destPool);\n             if (result == null) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java",
                "sha": "6e71864c4473741d0ff7842e7133a348fd76cb29",
                "status": "modified"
            },
            {
                "additions": 44,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/engine/orchestration/src/test/java/com/cloud/vm/VirtualMachineManagerImplTest.java",
                "changes": 52,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/test/java/com/cloud/vm/VirtualMachineManagerImplTest.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 8,
                "filename": "engine/orchestration/src/test/java/com/cloud/vm/VirtualMachineManagerImplTest.java",
                "patch": "@@ -17,6 +17,7 @@\n \n package com.cloud.vm;\n \n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n import static org.mockito.Matchers.any;\n import static org.mockito.Matchers.anyLong;\n@@ -25,6 +26,7 @@\n import static org.mockito.Mockito.when;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -178,7 +180,7 @@ public void testSendStopWithFailAnswer() throws Exception {\n \n         boolean actual = virtualMachineManagerImpl.sendStop(guru, profile, false, false);\n \n-        Assert.assertFalse(actual);\n+        assertFalse(actual);\n     }\n \n     @Test\n@@ -192,7 +194,7 @@ public void testSendStopWithNullAnswer() throws Exception {\n \n         boolean actual = virtualMachineManagerImpl.sendStop(guru, profile, false, false);\n \n-        Assert.assertFalse(actual);\n+        assertFalse(actual);\n     }\n \n     @Test\n@@ -242,7 +244,7 @@ public void isStorageCrossClusterMigrationTestStorageSameCluster() {\n \n         boolean returnedValue = virtualMachineManagerImpl.isStorageCrossClusterMigration(hostMock, storagePoolVoMock);\n \n-        Assert.assertFalse(returnedValue);\n+        assertFalse(returnedValue);\n     }\n \n     @Test\n@@ -253,7 +255,7 @@ public void isStorageCrossClusterMigrationTestStorageTypeEqualsZone() {\n \n         boolean returnedValue = virtualMachineManagerImpl.isStorageCrossClusterMigration(hostMock, storagePoolVoMock);\n \n-        Assert.assertFalse(returnedValue);\n+        assertFalse(returnedValue);\n     }\n \n     @Test\n@@ -317,7 +319,7 @@ public void buildMapUsingUserInformationTestTargetHostHasAccessToPool() {\n \n         Map<Volume, StoragePool> volumeToPoolObjectMap = virtualMachineManagerImpl.buildMapUsingUserInformation(virtualMachineProfileMock, hostMock, userDefinedVolumeToStoragePoolMap);\n \n-        Assert.assertFalse(volumeToPoolObjectMap.isEmpty());\n+        assertFalse(volumeToPoolObjectMap.isEmpty());\n         Assert.assertEquals(storagePoolVoMock, volumeToPoolObjectMap.get(volumeVoMock));\n \n         Mockito.verify(userDefinedVolumeToStoragePoolMap, times(1)).keySet();\n@@ -501,7 +503,7 @@ public void createVolumeToStoragePoolMappingIfPossibleTestTargetHostDoesNotAcces\n         HashMap<Volume, StoragePool> volumeToPoolObjectMap = new HashMap<>();\n         virtualMachineManagerImpl.createVolumeToStoragePoolMappingIfPossible(virtualMachineProfileMock, hostMock, volumeToPoolObjectMap, volumeVoMock, storagePoolVoMock);\n \n-        Assert.assertFalse(volumeToPoolObjectMap.isEmpty());\n+        assertFalse(volumeToPoolObjectMap.isEmpty());\n         Assert.assertEquals(storagePoolMockOther, volumeToPoolObjectMap.get(volumeVoMock));\n     }\n \n@@ -558,7 +560,7 @@ public void createStoragePoolMappingsForVolumesTestNotCrossCluterMigrationWithCl\n \n         virtualMachineManagerImpl.createStoragePoolMappingsForVolumes(virtualMachineProfileMock, hostMock, volumeToPoolObjectMap, allVolumes);\n \n-        Assert.assertFalse(volumeToPoolObjectMap.isEmpty());\n+        assertFalse(volumeToPoolObjectMap.isEmpty());\n         Assert.assertEquals(storagePoolVoMock, volumeToPoolObjectMap.get(volumeVoMock));\n \n         Mockito.verify(virtualMachineManagerImpl).executeManagedStorageChecksWhenTargetStoragePoolNotProvided(hostMock, storagePoolVoMock, volumeVoMock);\n@@ -587,4 +589,38 @@ public void createMappingVolumeAndStoragePoolTest() {\n         inOrder.verify(virtualMachineManagerImpl).findVolumesThatWereNotMappedByTheUser(virtualMachineProfileMock, volumeToPoolObjectMap);\n         inOrder.verify(virtualMachineManagerImpl).createStoragePoolMappingsForVolumes(virtualMachineProfileMock, hostMock, volumeToPoolObjectMap, volumesNotMapped);\n     }\n-}\n\\ No newline at end of file\n+\n+    @Test\n+    public void matchesOfSorts() {\n+        List<String> nothing = null;\n+        List<String> empty = new ArrayList<>();\n+        List<String> tag = Arrays.asList(\"bla\");\n+        List<String> tags = Arrays.asList(\"bla\", \"blob\");\n+        List<String> others = Arrays.asList(\"bla\", \"blieb\");\n+        List<String> three = Arrays.asList(\"bla\", \"blob\", \"blieb\");\n+\n+        // single match\n+        assertTrue(VirtualMachineManagerImpl.matches(tag,tags));\n+        assertTrue(VirtualMachineManagerImpl.matches(tag,others));\n+\n+        // no requirements\n+        assertTrue(VirtualMachineManagerImpl.matches(nothing,tags));\n+        assertTrue(VirtualMachineManagerImpl.matches(empty,tag));\n+\n+        // mis(sing)match\n+        assertFalse(VirtualMachineManagerImpl.matches(tags,tag));\n+        assertFalse(VirtualMachineManagerImpl.matches(tag,nothing));\n+        assertFalse(VirtualMachineManagerImpl.matches(tag,empty));\n+\n+        // disjunct sets\n+        assertFalse(VirtualMachineManagerImpl.matches(tags,others));\n+        assertFalse(VirtualMachineManagerImpl.matches(others,tags));\n+\n+        // everything matches the larger set\n+        assertTrue(VirtualMachineManagerImpl.matches(nothing,three));\n+        assertTrue(VirtualMachineManagerImpl.matches(empty,three));\n+        assertTrue(VirtualMachineManagerImpl.matches(tag,three));\n+        assertTrue(VirtualMachineManagerImpl.matches(tags,three));\n+        assertTrue(VirtualMachineManagerImpl.matches(others,three));\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/engine/orchestration/src/test/java/com/cloud/vm/VirtualMachineManagerImplTest.java",
                "sha": "0e7579ea5fd3782c101e59841b92df8987dddde4",
                "status": "modified"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/DataMotionServiceImpl.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/DataMotionServiceImpl.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 2,
                "filename": "engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/DataMotionServiceImpl.java",
                "patch": "@@ -18,12 +18,17 @@\n  */\n package org.apache.cloudstack.storage.motion;\n \n+import java.util.Date;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n \n import javax.inject.Inject;\n \n+import com.cloud.storage.Volume;\n+import com.cloud.storage.VolumeVO;\n+import com.cloud.storage.dao.VolumeDao;\n+import org.apache.log4j.Logger;\n import org.springframework.stereotype.Component;\n \n import org.apache.cloudstack.engine.subsystem.api.storage.CopyCommandResult;\n@@ -40,10 +45,15 @@\n import com.cloud.utils.StringUtils;\n import com.cloud.utils.exception.CloudRuntimeException;\n \n+\n @Component\n public class DataMotionServiceImpl implements DataMotionService {\n+    private static final Logger LOGGER = Logger.getLogger(DataMotionServiceImpl.class);\n+\n     @Inject\n     StorageStrategyFactory storageStrategyFactory;\n+    @Inject\n+    VolumeDao volDao;\n \n     @Override\n     public void copyAsync(DataObject srcData, DataObject destData, Host destHost, AsyncCompletionCallback<CopyCommandResult> callback) {\n@@ -61,13 +71,33 @@ public void copyAsync(DataObject srcData, DataObject destData, Host destHost, As\n \n         DataMotionStrategy strategy = storageStrategyFactory.getDataMotionStrategy(srcData, destData);\n         if (strategy == null) {\n+            // OfflineVmware volume migration\n+            // Cleanup volumes from target and reset the state of volume at source\n+            cleanUpVolumesForFailedMigrations(srcData, destData);\n             throw new CloudRuntimeException(\"Can't find strategy to move data. \" + \"Source: \" + srcData.getType().name() + \" '\" + srcData.getUuid() + \", Destination: \" +\n-                destData.getType().name() + \" '\" + destData.getUuid() + \"'\");\n+                    destData.getType().name() + \" '\" + destData.getUuid() + \"'\");\n         }\n \n         strategy.copyAsync(srcData, destData, destHost, callback);\n     }\n \n+    /**\n+     * Offline Vmware volume migration\n+     * Cleanup volumes after failed migrations and reset state of source volume\n+     *\n+     * @param srcData\n+     * @param destData\n+     */\n+    private void cleanUpVolumesForFailedMigrations(DataObject srcData, DataObject destData) {\n+        VolumeVO destinationVO = volDao.findById(destData.getId());\n+        VolumeVO sourceVO = volDao.findById(srcData.getId());\n+        sourceVO.setState(Volume.State.Ready);\n+        volDao.update(sourceVO.getId(), sourceVO);\n+        destinationVO.setState(Volume.State.Expunged);\n+        destinationVO.setRemoved(new Date());\n+        volDao.update(destinationVO.getId(), destinationVO);\n+    }\n+\n     @Override\n     public void copyAsync(DataObject srcData, DataObject destData, AsyncCompletionCallback<CopyCommandResult> callback) {\n         copyAsync(srcData, destData, null, callback);\n@@ -84,7 +114,7 @@ public void copyAsync(Map<VolumeInfo, DataStore> volumeMap, VirtualMachineTO vmT\n             }\n \n             throw new CloudRuntimeException(\"Can't find strategy to move data. \" + \"Source Host: \" + srcHost.getName() + \", Destination Host: \" + destHost.getName() +\n-                \", Volume UUIDs: \" + StringUtils.join(volumeIds, \",\"));\n+                    \", Volume UUIDs: \" + StringUtils.join(volumeIds, \",\"));\n         }\n \n         strategy.copyAsync(volumeMap, vmTo, srcHost, destHost, callback);",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/DataMotionServiceImpl.java",
                "sha": "c2724e648241283368a698707b07a993d9b85065",
                "status": "modified"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/engine/storage/volume/src/main/java/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java",
                "changes": 56,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/storage/volume/src/main/java/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 20,
                "filename": "engine/storage/volume/src/main/java/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java",
                "patch": "@@ -1408,6 +1408,19 @@ protected Void copyVolumeFromPrimaryToImageCallback(AsyncCallbackDispatcher<Volu\n \n     @Override\n     public AsyncCallFuture<VolumeApiResult> copyVolume(VolumeInfo srcVolume, DataStore destStore) {\n+        if (s_logger.isDebugEnabled()) {\n+            DataStore srcStore = srcVolume.getDataStore();\n+            String srcRole = (srcStore != null && srcStore.getRole() != null ? srcVolume.getDataStore().getRole().toString() : \"<unknown role>\");\n+\n+            String msg = String.format(\"copying %s(id=%d, role=%s) to %s (id=%d, role=%s)\"\n+                    , srcVolume.getName()\n+                    , srcVolume.getId()\n+                    , srcRole\n+                    , destStore.getName()\n+                    , destStore.getId()\n+                    , destStore.getRole());\n+            s_logger.debug(msg);\n+        }\n \n         if (srcVolume.getState() == Volume.State.Uploaded) {\n             return copyVolumeFromImageToPrimary(srcVolume, destStore);\n@@ -1417,6 +1430,8 @@ protected Void copyVolumeFromPrimaryToImageCallback(AsyncCallbackDispatcher<Volu\n             return copyVolumeFromPrimaryToImage(srcVolume, destStore);\n         }\n \n+        // OfflineVmwareMigration: aren't we missing secondary to secondary in this logic?\n+\n         AsyncCallFuture<VolumeApiResult> future = new AsyncCallFuture<VolumeApiResult>();\n         VolumeApiResult res = new VolumeApiResult(srcVolume);\n         try {\n@@ -1438,7 +1453,10 @@ protected Void copyVolumeFromPrimaryToImageCallback(AsyncCallbackDispatcher<Volu\n             caller.setCallback(caller.getTarget().copyVolumeCallBack(null, null)).setContext(context);\n             motionSrv.copyAsync(srcVolume, destVolume, caller);\n         } catch (Exception e) {\n-            s_logger.debug(\"Failed to copy volume\" + e);\n+            s_logger.error(\"Failed to copy volume:\" + e);\n+            if(s_logger.isDebugEnabled()) {\n+                s_logger.debug(\"Failed to copy volume.\", e);\n+            }\n             res.setResult(e.toString());\n             future.complete(res);\n         }\n@@ -1461,27 +1479,25 @@ protected Void copyVolumeCallBack(AsyncCallbackDispatcher<VolumeServiceImpl, Cop\n                 AsyncCallFuture<VolumeApiResult> destroyFuture = expungeVolumeAsync(destVolume);\n                 destroyFuture.get();\n                 future.complete(res);\n-                return null;\n-            }\n-            srcVolume.processEvent(Event.OperationSuccessed);\n-            destVolume.processEvent(Event.MigrationCopySucceeded, result.getAnswer());\n-            volDao.updateUuid(srcVolume.getId(), destVolume.getId());\n-            _volumeStoreDao.updateVolumeId(srcVolume.getId(), destVolume.getId());\n-            try {\n-                destroyVolume(srcVolume.getId());\n-                srcVolume = volFactory.getVolume(srcVolume.getId());\n-                AsyncCallFuture<VolumeApiResult> destroyFuture = expungeVolumeAsync(srcVolume);\n-                // If volume destroy fails, this could be because of vdi is still in use state, so wait and retry.\n-                if (destroyFuture.get().isFailed()) {\n-                    Thread.sleep(5 * 1000);\n-                    destroyFuture = expungeVolumeAsync(srcVolume);\n-                    destroyFuture.get();\n+            } else {\n+                srcVolume.processEvent(Event.OperationSuccessed);\n+                destVolume.processEvent(Event.MigrationCopySucceeded, result.getAnswer());\n+                volDao.updateUuid(srcVolume.getId(), destVolume.getId());\n+                try {\n+                    destroyVolume(srcVolume.getId());\n+                    srcVolume = volFactory.getVolume(srcVolume.getId());\n+                    AsyncCallFuture<VolumeApiResult> destroyFuture = expungeVolumeAsync(srcVolume);\n+                    // If volume destroy fails, this could be because of vdi is still in use state, so wait and retry.\n+                    if (destroyFuture.get().isFailed()) {\n+                        Thread.sleep(5 * 1000);\n+                        destroyFuture = expungeVolumeAsync(srcVolume);\n+                        destroyFuture.get();\n+                    }\n+                    future.complete(res);\n+                } catch (Exception e) {\n+                    s_logger.debug(\"failed to clean up volume on storage\", e);\n                 }\n-                future.complete(res);\n-            } catch (Exception e) {\n-                s_logger.debug(\"failed to clean up volume on storage\", e);\n             }\n-            return null;\n         } catch (Exception e) {\n             s_logger.debug(\"Failed to process copy volume callback\", e);\n             res.setResult(e.toString());",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/engine/storage/volume/src/main/java/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java",
                "sha": "8ff0bd20815b233e26f4ad74ec3c3f57a0030f9f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/AsyncJobManager.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/AsyncJobManager.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 0,
                "filename": "framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/AsyncJobManager.java",
                "patch": "@@ -131,4 +131,6 @@ void joinJob(long jobId, long joinJobId, String wakeupHandler, String wakupDispa\n     Object unmarshallResultObject(AsyncJob job);\n \n     List<AsyncJobVO> findFailureAsyncJobs(String... cmds);\n+\n+    long countPendingJobs(String havingInfo, String... cmds);\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/AsyncJobManager.java",
                "sha": "8542407524b1184e0f8c16a85df83a8eaa35aa5f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/dao/AsyncJobDao.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/dao/AsyncJobDao.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 0,
                "filename": "framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/dao/AsyncJobDao.java",
                "patch": "@@ -44,4 +44,6 @@\n     List<AsyncJobVO> getResetJobs(long msid);\n \n     List<AsyncJobVO> getFailureJobsSinceLastMsStart(long msId, String... cmds);\n+\n+    long countPendingJobs(String havingInfo, String... cmds);\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/dao/AsyncJobDao.java",
                "sha": "2696e105cce440933e48ed6fbe2bc927abc4f1c8",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/dao/AsyncJobDaoImpl.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/dao/AsyncJobDaoImpl.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 0,
                "filename": "framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/dao/AsyncJobDaoImpl.java",
                "patch": "@@ -30,6 +30,7 @@\n import com.cloud.utils.db.DB;\n import com.cloud.utils.db.Filter;\n import com.cloud.utils.db.GenericDaoBase;\n+import com.cloud.utils.db.GenericSearchBuilder;\n import com.cloud.utils.db.SearchBuilder;\n import com.cloud.utils.db.SearchCriteria;\n import com.cloud.utils.db.SearchCriteria.Op;\n@@ -46,6 +47,7 @@\n     private final SearchBuilder<AsyncJobVO> expiringUnfinishedAsyncJobSearch;\n     private final SearchBuilder<AsyncJobVO> expiringCompletedAsyncJobSearch;\n     private final SearchBuilder<AsyncJobVO> failureMsidAsyncJobSearch;\n+    private final GenericSearchBuilder<AsyncJobVO, Long> asyncJobTypeSearch;\n \n     public AsyncJobDaoImpl() {\n         pendingAsyncJobSearch = createSearchBuilder();\n@@ -94,6 +96,13 @@ public AsyncJobDaoImpl() {\n         failureMsidAsyncJobSearch.and(\"job_cmd\", failureMsidAsyncJobSearch.entity().getCmd(), Op.IN);\n         failureMsidAsyncJobSearch.done();\n \n+        asyncJobTypeSearch = createSearchBuilder(Long.class);\n+        asyncJobTypeSearch.select(null, SearchCriteria.Func.COUNT, asyncJobTypeSearch.entity().getId());\n+        asyncJobTypeSearch.and(\"job_info\", asyncJobTypeSearch.entity().getCmdInfo(),Op.LIKE);\n+        asyncJobTypeSearch.and(\"job_cmd\", asyncJobTypeSearch.entity().getCmd(), Op.IN);\n+        asyncJobTypeSearch.and(\"status\", asyncJobTypeSearch.entity().getStatus(), SearchCriteria.Op.EQ);\n+        asyncJobTypeSearch.done();\n+\n     }\n \n     @Override\n@@ -227,4 +236,14 @@ public void resetJobProcess(long msid, int jobResultCode, String jobResultMessag\n         sc.setParameters(\"job_cmd\", (Object[])cmds);\n         return listBy(sc);\n     }\n+\n+    @Override\n+    public long countPendingJobs(String havingInfo, String... cmds) {\n+        SearchCriteria<Long> sc = asyncJobTypeSearch.create();\n+        sc.setParameters(\"status\", JobInfo.Status.IN_PROGRESS);\n+        sc.setParameters(\"job_cmd\", (Object[])cmds);\n+        sc.setParameters(\"job_info\", \"%\" + havingInfo + \"%\");\n+        List<Long> results = customSearch(sc, null);\n+        return results.get(0);\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/dao/AsyncJobDaoImpl.java",
                "sha": "6ca698b7589a953bd392c7717cc197cc61a1e791",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/impl/AsyncJobManagerImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/impl/AsyncJobManagerImpl.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 0,
                "filename": "framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/impl/AsyncJobManagerImpl.java",
                "patch": "@@ -1122,4 +1122,9 @@ private void publishOnEventBus(AsyncJob job, String jobEvent) {\n     public List<AsyncJobVO> findFailureAsyncJobs(String... cmds) {\n         return _jobDao.getFailureJobsSinceLastMsStart(getMsid(), cmds);\n     }\n+\n+    @Override\n+    public long countPendingJobs(String havingInfo, String... cmds) {\n+        return _jobDao.countPendingJobs(havingInfo, cmds);\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/impl/AsyncJobManagerImpl.java",
                "sha": "1be3eedaf23d9101f8a2bf166c9d84d46d3f8cb6",
                "status": "modified"
            },
            {
                "additions": 39,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/guru/VMwareGuru.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/guru/VMwareGuru.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 1,
                "filename": "plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/guru/VMwareGuru.java",
                "patch": "@@ -26,6 +26,11 @@\n \n import javax.inject.Inject;\n \n+import com.cloud.agent.api.MigrateVmToPoolCommand;\n+import com.cloud.agent.api.UnregisterVMCommand;\n+import com.cloud.agent.api.to.VolumeTO;\n+import com.cloud.dc.ClusterDetailsDao;\n+import com.cloud.storage.StoragePool;\n import org.apache.cloudstack.engine.subsystem.api.storage.PrimaryDataStore;\n import org.apache.cloudstack.engine.subsystem.api.storage.VolumeDataFactory;\n import org.apache.cloudstack.engine.subsystem.api.storage.VolumeInfo;\n@@ -115,12 +120,14 @@\n     @Inject\n     private GuestOSDao _guestOsDao;\n     @Inject\n-    GuestOSHypervisorDao _guestOsHypervisorDao;\n+    private GuestOSHypervisorDao _guestOsHypervisorDao;\n     @Inject\n     private HostDao _hostDao;\n     @Inject\n     private HostDetailsDao _hostDetailsDao;\n     @Inject\n+    private ClusterDetailsDao _clusterDetailsDao;\n+    @Inject\n     private CommandExecLogDao _cmdExecLogDao;\n     @Inject\n     private VmwareManager _vmwareMgr;\n@@ -640,4 +647,35 @@ public String getConfigComponentName() {\n         details.put(VmwareReserveMemory.key(), VmwareReserveMemory.valueIn(clusterId).toString());\n         return details;\n     }\n+\n+    @Override\n+    public List<Command> finalizeMigrate(VirtualMachine vm, StoragePool destination) {\n+        List<Command> commands = new ArrayList<Command>();\n+\n+        // OfflineVmwareMigration: specialised migration command\n+        List<VolumeVO> volumes = _volumeDao.findByInstance(vm.getId());\n+        List<VolumeTO> vols = new ArrayList<>();\n+        for (Volume volume : volumes) {\n+            VolumeTO vol = new VolumeTO(volume,destination);\n+            vols.add(vol);\n+        }\n+        MigrateVmToPoolCommand migrateVmToPoolCommand = new MigrateVmToPoolCommand(vm.getInstanceName(), vols, destination.getUuid(), true);\n+        commands.add(migrateVmToPoolCommand);\n+\n+        // OfflineVmwareMigration: cleanup if needed\n+        final Long destClusterId = destination.getClusterId();\n+        final Long srcClusterId = getClusterId(vm.getId());\n+\n+        if (srcClusterId != null && destClusterId != null && ! srcClusterId.equals(destClusterId)) {\n+            final String srcDcName = _clusterDetailsDao.getVmwareDcName(srcClusterId);\n+            final String destDcName = _clusterDetailsDao.getVmwareDcName(destClusterId);\n+            if (srcDcName != null && destDcName != null && !srcDcName.equals(destDcName)) {\n+                final UnregisterVMCommand unregisterVMCommand = new UnregisterVMCommand(vm.getInstanceName(), true);\n+                unregisterVMCommand.setCleanupVmFiles(true);\n+\n+                commands.add(unregisterVMCommand);\n+            }\n+        }\n+        return commands;\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/guru/VMwareGuru.java",
                "sha": "10c3feb2609eea89da41442b1d87e5da793b6c92",
                "status": "modified"
            },
            {
                "additions": 327,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "changes": 340,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/resource/VmwareResource.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 13,
                "filename": "plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "patch": "@@ -43,8 +43,8 @@\n \n import javax.naming.ConfigurationException;\n \n-import org.apache.commons.lang.StringUtils;\n import org.apache.commons.lang.math.NumberUtils;\n+import org.apache.commons.lang.StringUtils;\n import org.apache.log4j.Logger;\n import org.apache.log4j.NDC;\n import org.joda.time.Duration;\n@@ -163,6 +163,8 @@\n import com.cloud.agent.api.ManageSnapshotCommand;\n import com.cloud.agent.api.MigrateAnswer;\n import com.cloud.agent.api.MigrateCommand;\n+import com.cloud.agent.api.MigrateVmToPoolAnswer;\n+import com.cloud.agent.api.MigrateVmToPoolCommand;\n import com.cloud.agent.api.MigrateWithStorageAnswer;\n import com.cloud.agent.api.MigrateWithStorageCommand;\n import com.cloud.agent.api.ModifySshKeysCommand;\n@@ -311,6 +313,7 @@\n \n public class VmwareResource implements StoragePoolResource, ServerResource, VmwareHostService, VirtualRouterDeployer {\n     private static final Logger s_logger = Logger.getLogger(VmwareResource.class);\n+    public static final String VMDK_EXTENSION = \".vmdk\";\n \n     private static final Random RANDOM = new Random(System.nanoTime());\n \n@@ -442,6 +445,8 @@ public Answer executeRequest(Command cmd) {\n                 answer = execute((PrepareForMigrationCommand)cmd);\n             } else if (clz == MigrateCommand.class) {\n                 answer = execute((MigrateCommand)cmd);\n+            } else if (clz == MigrateVmToPoolCommand.class) {\n+                answer = execute((MigrateVmToPoolCommand)cmd);\n             } else if (clz == MigrateWithStorageCommand.class) {\n                 answer = execute((MigrateWithStorageCommand)cmd);\n             } else if (clz == MigrateVolumeCommand.class) {\n@@ -699,30 +704,38 @@ private Answer execute(ResizeVolumeCommand cmd) {\n             }\n \n             if (vmName.equalsIgnoreCase(\"none\")) {\n+                // OfflineVmwareMigration: we need to refactor the worker vm creation out for use in migration methods as well as here\n+                // OfflineVmwareMigration: this method is 100 lines and needs refactorring anyway\n                 // we need to spawn a worker VM to attach the volume to and resize the volume.\n                 useWorkerVm = true;\n                 vmName = getWorkerName(getServiceContext(), cmd, 0);\n \n                 String poolId = cmd.getPoolUuid();\n \n+                // OfflineVmwareMigration: refactor for re-use\n+                // OfflineVmwareMigration: 1. find data(store)\n                 ManagedObjectReference morDS = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, poolId);\n                 DatastoreMO dsMo = new DatastoreMO(hyperHost.getContext(), morDS);\n \n                 s_logger.info(\"Create worker VM \" + vmName);\n \n+                // OfflineVmwareMigration: 2. create the worker with access to the data(store)\n                 vmMo = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, vmName);\n \n                 if (vmMo == null) {\n+                    // OfflineVmwareMigration: don't throw a general Exception but think of a specific one\n                     throw new Exception(\"Unable to create a worker VM for volume resize\");\n                 }\n \n                 synchronized (this) {\n-                    vmdkDataStorePath = VmwareStorageLayoutHelper.getLegacyDatastorePathFromVmdkFileName(dsMo, path + \".vmdk\");\n+                    // OfflineVmwareMigration: 3. attach the disk to the worker\n+                    vmdkDataStorePath = VmwareStorageLayoutHelper.getLegacyDatastorePathFromVmdkFileName(dsMo, path + VMDK_EXTENSION);\n \n                     vmMo.attachDisk(new String[] { vmdkDataStorePath }, morDS);\n                 }\n             }\n \n+            // OfflineVmwareMigration: 4. find the (worker-) VM\n             // find VM through datacenter (VM is not at the target host yet)\n             vmMo = hyperHost.findVmOnPeerHyperHost(vmName);\n \n@@ -734,6 +747,7 @@ private Answer execute(ResizeVolumeCommand cmd) {\n                 throw new Exception(msg);\n             }\n \n+            // OfflineVmwareMigration: 5. ignore/replace the rest of the try-block; It is the functional bit\n             Pair<VirtualDisk, String> vdisk = vmMo.getDiskDevice(path);\n \n             if (vdisk == null) {\n@@ -813,6 +827,7 @@ private Answer execute(ResizeVolumeCommand cmd) {\n \n             return new ResizeVolumeAnswer(cmd, false, error);\n         } finally {\n+            // OfflineVmwareMigration: 6. check if a worker was used and destroy it if needed\n             try {\n                 if (useWorkerVm) {\n                     s_logger.info(\"Destroy worker VM after volume resize\");\n@@ -2313,7 +2328,7 @@ private String appendFileType(String path, String fileType) {\n     }\n \n     private void resizeRootDiskOnVMStart(VirtualMachineMO vmMo, DiskTO rootDiskTO, VmwareHypervisorHost hyperHost, VmwareContext context) throws Exception {\n-        final Pair<VirtualDisk, String> vdisk = getVirtualDiskInfo(vmMo, appendFileType(rootDiskTO.getPath(), \".vmdk\"));\n+        final Pair<VirtualDisk, String> vdisk = getVirtualDiskInfo(vmMo, appendFileType(rootDiskTO.getPath(), VMDK_EXTENSION));\n         assert(vdisk != null);\n \n         Long reqSize = 0L;\n@@ -2536,7 +2551,7 @@ int getReservedCpuMHZ(VirtualMachineTO vmSpec) {\n                     vmdkPath = dsMo.getName();\n                 }\n \n-                datastoreDiskPath = dsMo.getDatastorePath(vmdkPath + \".vmdk\");\n+                datastoreDiskPath = dsMo.getDatastorePath(vmdkPath + VMDK_EXTENSION);\n             }\n         } else {\n             datastoreDiskPath = VmwareStorageLayoutHelper.syncVolumeToVmDefaultFolder(dcMo, vmMo.getName(), dsMo, volumeTO.getPath(), VmwareManager.s_vmwareSearchExcludeFolder.value());\n@@ -3061,7 +3076,7 @@ public int compare(DiskTO arg0, DiskTO arg1) {\n      * Ex. \"[-iqn.2010-01.com.solidfire:4nhe.vol-1.27-0] i-2-18-VM/ROOT-18.vmdk\" should return \"i-2-18-VM/ROOT-18\"\n      */\n     public String getVmdkPath(String path) {\n-        if (!com.cloud.utils.StringUtils.isNotBlank(path)) {\n+        if (!StringUtils.isNotBlank(path)) {\n             return null;\n         }\n \n@@ -3075,7 +3090,7 @@ public String getVmdkPath(String path) {\n \n         path = path.substring(startIndex + search.length());\n \n-        final String search2 = \".vmdk\";\n+        final String search2 = VMDK_EXTENSION;\n \n         int endIndex = path.indexOf(search2);\n \n@@ -3128,10 +3143,10 @@ public String getVmdkPath(String path) {\n                             final String datastoreVolumePath;\n \n                             if (vmdkPath != null) {\n-                                datastoreVolumePath = dsMo.getDatastorePath(vmdkPath + \".vmdk\");\n+                                datastoreVolumePath = dsMo.getDatastorePath(vmdkPath + VMDK_EXTENSION);\n                             }\n                             else {\n-                                datastoreVolumePath = dsMo.getDatastorePath(dsMo.getName() + \".vmdk\");\n+                                datastoreVolumePath = dsMo.getDatastorePath(dsMo.getName() + VMDK_EXTENSION);\n                             }\n \n                             volumeTO.setPath(datastoreVolumePath);\n@@ -3780,12 +3795,172 @@ protected Answer execute(PrepareForMigrationCommand cmd) {\n                 invalidateServiceContext();\n             }\n \n-            String msg = \"Unexcpeted exception \" + VmwareHelper.getExceptionMessage(e);\n+            String msg = \"Unexpected exception \" + VmwareHelper.getExceptionMessage(e);\n             s_logger.error(msg, e);\n             return new PrepareForMigrationAnswer(cmd, msg);\n         }\n     }\n \n+    protected Answer execute(MigrateVmToPoolCommand cmd) {\n+        if (s_logger.isInfoEnabled()) {\n+            s_logger.info(String.format(\"excuting MigrateVmToPoolCommand %s -> %s\", cmd.getVmName(), cmd.getDestinationPool()));\n+            if (s_logger.isDebugEnabled()) {\n+                s_logger.debug(\"MigrateVmToPoolCommand: \" + _gson.toJson(cmd));\n+            }\n+        }\n+\n+        final String vmName = cmd.getVmName();\n+\n+        VmwareHypervisorHost hyperHost = getHyperHost(getServiceContext());\n+        try {\n+            VirtualMachineMO vmMo = getVirtualMachineMO(vmName, hyperHost);\n+            if (vmMo == null) {\n+                String msg = \"VM \" + vmName + \" does not exist in VMware datacenter\";\n+                s_logger.error(msg);\n+                throw new CloudRuntimeException(msg);\n+            }\n+\n+            String poolUuid = cmd.getDestinationPool();\n+            return migrateAndAnswer(vmMo, poolUuid, hyperHost, cmd);\n+        } catch (Throwable e) { // hopefully only CloudRuntimeException :/\n+            if (e instanceof Exception) {\n+                return new Answer(cmd, (Exception) e);\n+            }\n+            if (s_logger.isDebugEnabled()) {\n+                s_logger.debug(\"problem\" , e);\n+            }\n+            s_logger.error(e.getLocalizedMessage());\n+            return new Answer(cmd, false, \"unknown problem: \" + e.getLocalizedMessage());\n+        }\n+    }\n+\n+    private Answer migrateAndAnswer(VirtualMachineMO vmMo, String poolUuid, VmwareHypervisorHost hyperHost, Command cmd) throws Exception {\n+        ManagedObjectReference morDs = getTargetDatastoreMOReference(poolUuid, hyperHost);\n+\n+        try {\n+            // OfflineVmwareMigration: getVolumesFromCommand(cmd);\n+            Map<Integer, Long> volumeDeviceKey = getVolumesFromCommand(vmMo, cmd);\n+            if (s_logger.isTraceEnabled()) {\n+                for (Integer diskId: volumeDeviceKey.keySet()) {\n+                    s_logger.trace(String.format(\"disk to migrate has disk id %d and volumeId %d\", diskId, volumeDeviceKey.get(diskId)));\n+                }\n+            }\n+            if (vmMo.changeDatastore(morDs)) {\n+                // OfflineVmwareMigration: create target specification to include in answer\n+                // Consolidate VM disks after successful VM migration\n+                // In case of a linked clone VM, if VM's disks are not consolidated, further VM operations such as volume snapshot, VM snapshot etc. will result in DB inconsistencies.\n+                if (!vmMo.consolidateVmDisks()) {\n+                    s_logger.warn(\"VM disk consolidation failed after storage migration. Yet proceeding with VM migration.\");\n+                } else {\n+                    s_logger.debug(\"Successfully consolidated disks of VM \" + vmMo.getVmName() + \".\");\n+                }\n+                return createAnswerForCmd(vmMo, poolUuid, cmd, volumeDeviceKey);\n+            } else {\n+                return new Answer(cmd, false, \"failed to changes data store for VM\" + vmMo.getVmName());\n+            }\n+        } catch (Exception e) {\n+            String msg = \"change data store for VM \" + vmMo.getVmName() + \" failed\";\n+            s_logger.error(msg + \": \" + e.getLocalizedMessage());\n+            throw new CloudRuntimeException(msg,e);\n+        }\n+    }\n+\n+    Answer createAnswerForCmd(VirtualMachineMO vmMo, String poolUuid, Command cmd, Map<Integer, Long> volumeDeviceKey) throws Exception {\n+        List<VolumeObjectTO> volumeToList =  new ArrayList<>();\n+        VirtualMachineDiskInfoBuilder diskInfoBuilder = vmMo.getDiskInfoBuilder();\n+        VirtualDisk[] disks = vmMo.getAllDiskDevice();\n+        Answer answer;\n+        if (s_logger.isTraceEnabled()) {\n+            s_logger.trace(String.format(\"creating answer for %s\", cmd.getClass().getSimpleName()));\n+        }\n+        if (cmd instanceof MigrateVolumeCommand) {\n+            if (disks.length == 1) {\n+                String volumePath = vmMo.getVmdkFileBaseName(disks[0]);\n+                return new MigrateVolumeAnswer(cmd, true, null, volumePath);\n+            }\n+            throw new CloudRuntimeException(\"not expecting more then  one disk after migrate volume command\");\n+        } else if (cmd instanceof MigrateVmToPoolCommand) {\n+            for (VirtualDisk disk : disks) {\n+                VolumeObjectTO newVol = new VolumeObjectTO();\n+                String newPath = vmMo.getVmdkFileBaseName(disk);\n+                VirtualMachineDiskInfo diskInfo = diskInfoBuilder.getDiskInfoByBackingFileBaseName(newPath, poolUuid);\n+                newVol.setId(volumeDeviceKey.get(disk.getKey()));\n+                newVol.setPath(newPath);\n+                newVol.setChainInfo(_gson.toJson(diskInfo));\n+                volumeToList.add(newVol);\n+            }\n+            return new MigrateVmToPoolAnswer((MigrateVmToPoolCommand)cmd, volumeToList);\n+        }\n+        return new Answer(cmd, false, null);\n+    }\n+\n+    private Map<Integer, Long> getVolumesFromCommand(VirtualMachineMO vmMo, Command cmd) throws Exception {\n+        Map<Integer, Long> volumeDeviceKey = new HashMap<Integer, Long>();\n+        if (cmd instanceof MigrateVmToPoolCommand) {\n+            MigrateVmToPoolCommand mcmd = (MigrateVmToPoolCommand)cmd;\n+            for (VolumeTO volume : mcmd.getVolumes()) {\n+                addVolumeDiskmapping(vmMo, volumeDeviceKey, volume.getPath(), volume.getId());\n+            }\n+        } else if (cmd instanceof MigrateVolumeCommand) {\n+            MigrateVolumeCommand mcmd = (MigrateVolumeCommand)cmd;\n+            addVolumeDiskmapping(vmMo, volumeDeviceKey, mcmd.getVolumePath(), mcmd.getVolumeId());\n+        }\n+        return volumeDeviceKey;\n+    }\n+\n+    private void addVolumeDiskmapping(VirtualMachineMO vmMo, Map<Integer, Long> volumeDeviceKey, String volumePath, long volumeId) throws Exception {\n+        if (s_logger.isDebugEnabled()) {\n+            s_logger.debug(String.format(\"locating disk for volume (%d) using path %s\", volumeId, volumePath));\n+        }\n+        Pair<VirtualDisk, String> diskInfo = getVirtualDiskInfo(vmMo, volumePath + VMDK_EXTENSION);\n+        String vmdkAbsFile = getAbsoluteVmdkFile(diskInfo.first());\n+        if (vmdkAbsFile != null && !vmdkAbsFile.isEmpty()) {\n+            vmMo.updateAdapterTypeIfRequired(vmdkAbsFile);\n+        }\n+        int diskId = diskInfo.first().getKey();\n+        volumeDeviceKey.put(diskId, volumeId);\n+    }\n+\n+    private ManagedObjectReference getTargetDatastoreMOReference(String destinationPool, VmwareHypervisorHost hyperHost) {\n+        ManagedObjectReference morDs;\n+        try {\n+            if(s_logger.isDebugEnabled()) {\n+                s_logger.debug(String.format(\"finding datastore %s\", destinationPool));\n+            }\n+            morDs = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, destinationPool);\n+        } catch (Exception e) {\n+            String msg = \"exception while finding data store  \" + destinationPool;\n+            s_logger.error(msg);\n+            throw new CloudRuntimeException(msg + \": \" + e.getLocalizedMessage());\n+        }\n+        return morDs;\n+    }\n+\n+    private ManagedObjectReference getDataCenterMOReference(String vmName, VmwareHypervisorHost hyperHost) {\n+        ManagedObjectReference morDc;\n+        try {\n+            morDc = hyperHost.getHyperHostDatacenter();\n+        } catch (Exception e) {\n+            String msg = \"exception while finding VMware datacenter to search for VM \" + vmName;\n+            s_logger.error(msg);\n+            throw new CloudRuntimeException(msg + \": \" + e.getLocalizedMessage());\n+        }\n+        return morDc;\n+    }\n+\n+    private VirtualMachineMO getVirtualMachineMO(String vmName, VmwareHypervisorHost hyperHost) {\n+        VirtualMachineMO vmMo = null;\n+        try {\n+            // find VM through datacenter (VM is not at the target host yet)\n+            vmMo = hyperHost.findVmOnPeerHyperHost(vmName);\n+        } catch (Exception e) {\n+            String msg = \"exception while searching for VM \" + vmName + \" in VMware datacenter\";\n+            s_logger.error(msg);\n+            throw new CloudRuntimeException(msg + \": \" + e.getLocalizedMessage());\n+        }\n+        return vmMo;\n+    }\n+\n     protected Answer execute(MigrateCommand cmd) {\n         if (s_logger.isInfoEnabled()) {\n             s_logger.info(\"Executing resource MigrateCommand: \" + _gson.toJson(cmd));\n@@ -3946,7 +4121,7 @@ protected Answer execute(MigrateWithStorageCommand cmd) {\n                 }\n                 diskLocator = new VirtualMachineRelocateSpecDiskLocator();\n                 diskLocator.setDatastore(morDsAtSource);\n-                Pair<VirtualDisk, String> diskInfo = getVirtualDiskInfo(vmMo, appendFileType(volume.getPath(), \".vmdk\"));\n+                Pair<VirtualDisk, String> diskInfo = getVirtualDiskInfo(vmMo, appendFileType(volume.getPath(), VMDK_EXTENSION));\n                 String vmdkAbsFile = getAbsoluteVmdkFile(diskInfo.first());\n                 if (vmdkAbsFile != null && !vmdkAbsFile.isEmpty()) {\n                     vmMo.updateAdapterTypeIfRequired(vmdkAbsFile);\n@@ -4074,6 +4249,141 @@ protected Answer execute(MigrateWithStorageCommand cmd) {\n         }\n     }\n \n+    private Answer migrateVolume(MigrateVolumeCommand cmd) {\n+        Answer answer = null;\n+        String path = cmd.getVolumePath();\n+\n+        VmwareHypervisorHost hyperHost = getHyperHost(getServiceContext());\n+        VirtualMachineMO vmMo = null;\n+        DatastoreMO dsMo = null;\n+        ManagedObjectReference morSourceDS = null;\n+        String vmdkDataStorePath = null;\n+\n+        String vmName = null;\n+        try {\n+            // OfflineVmwareMigration: we need to refactor the worker vm creation out for use in migration methods as well as here\n+            // OfflineVmwareMigration: this method is 100 lines and needs refactorring anyway\n+            // we need to spawn a worker VM to attach the volume to and move it\n+            vmName = getWorkerName(getServiceContext(), cmd, 0);\n+\n+                // OfflineVmwareMigration: refactor for re-use\n+                // OfflineVmwareMigration: 1. find data(store)\n+            // OfflineVmwareMigration: more robust would be to find the store given the volume as it might have been moved out of band or due to error\n+// example:            DatastoreMO existingVmDsMo = new DatastoreMO(dcMo.getContext(), dcMo.findDatastore(fileInDatastore.getDatastoreName()));\n+\n+            morSourceDS = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, cmd.getSourcePool().getUuid());\n+            dsMo = new DatastoreMO(hyperHost.getContext(), morSourceDS);\n+            s_logger.info(\"Create worker VM \" + vmName);\n+                // OfflineVmwareMigration: 2. create the worker with access to the data(store)\n+            vmMo = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, vmName);\n+            if (vmMo == null) {\n+                // OfflineVmwareMigration: don't throw a general Exception but think of a specific one\n+                throw new CloudRuntimeException(\"Unable to create a worker VM for volume operation\");\n+            }\n+\n+            synchronized (this) {\n+                // OfflineVmwareMigration: 3. attach the disk to the worker\n+                String vmdkFileName = path + VMDK_EXTENSION;\n+                vmdkDataStorePath = VmwareStorageLayoutHelper.getLegacyDatastorePathFromVmdkFileName(dsMo, vmdkFileName);\n+                if (!dsMo.fileExists(vmdkDataStorePath)) {\n+                    if(s_logger.isDebugEnabled()) {\n+                        s_logger.debug(String.format(\"path not found (%s), trying under '%s'\", vmdkFileName, path));\n+                    }\n+                    vmdkDataStorePath = VmwareStorageLayoutHelper.getVmwareDatastorePathFromVmdkFileName(dsMo, path, vmdkFileName);\n+                }\n+                if (!dsMo.fileExists(vmdkDataStorePath)) {\n+                    if(s_logger.isDebugEnabled()) {\n+                        s_logger.debug(String.format(\"path not found (%s), trying under '%s'\", vmdkFileName, vmName));\n+                    }\n+                    vmdkDataStorePath = VmwareStorageLayoutHelper.getVmwareDatastorePathFromVmdkFileName(dsMo, vmName, vmdkFileName);\n+                }\n+                if(s_logger.isDebugEnabled()) {\n+                    s_logger.debug(String.format(\"attaching %s to %s for migration\", vmdkDataStorePath, vmMo.getVmName()));\n+                }\n+                vmMo.attachDisk(new String[] { vmdkDataStorePath }, morSourceDS);\n+            }\n+\n+            // OfflineVmwareMigration: 4. find the (worker-) VM\n+            // find VM through datacenter (VM is not at the target host yet)\n+            vmMo = hyperHost.findVmOnPeerHyperHost(vmName);\n+            if (vmMo == null) {\n+                String msg = \"VM \" + vmName + \" does not exist in VMware datacenter\";\n+                s_logger.error(msg);\n+                throw new Exception(msg);\n+            }\n+\n+            if (s_logger.isTraceEnabled()) {\n+                VirtualDisk[] disks = vmMo.getAllDiskDevice();\n+                String format = \"disk %d is attached as %s\";\n+                for (VirtualDisk disk : disks) {\n+                    s_logger.trace(String.format(format,disk.getKey(),vmMo.getVmdkFileBaseName(disk)));\n+                }\n+            }\n+\n+            // OfflineVmwareMigration: 5. create a relocate spec and perform\n+            Pair<VirtualDisk, String> vdisk = vmMo.getDiskDevice(path);\n+            if (vdisk == null) {\n+                if (s_logger.isTraceEnabled())\n+                    s_logger.trace(\"migrate volume done (failed)\");\n+                throw new CloudRuntimeException(\"No such disk device: \" + path);\n+            }\n+\n+            VirtualDisk disk = vdisk.first();\n+            String vmdkAbsFile = getAbsoluteVmdkFile(disk);\n+            if (vmdkAbsFile != null && !vmdkAbsFile.isEmpty()) {\n+                vmMo.updateAdapterTypeIfRequired(vmdkAbsFile);\n+            }\n+\n+            // OfflineVmwareMigration: this may have to be disected and executed in separate steps\n+            answer = migrateAndAnswer(vmMo, cmd.getTargetPool().getUuid(), hyperHost, cmd);\n+        } catch (Exception e) {\n+            String msg = String.format(\"Migration of volume '%s' failed due to %s\", cmd.getVolumePath(), e.getLocalizedMessage());\n+            s_logger.error(msg, e);\n+            answer = new Answer(cmd, false, msg);\n+        } finally {\n+            try {\n+                // OfflineVmwareMigration: worker *may* have been renamed\n+                vmName = vmMo.getVmName();\n+                morSourceDS = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, cmd.getTargetPool().getUuid());\n+                dsMo = new DatastoreMO(hyperHost.getContext(), morSourceDS);\n+                s_logger.info(\"Dettaching disks before destroying worker VM '\" + vmName + \"' after volume migration\");\n+                VirtualDisk[] disks = vmMo.getAllDiskDevice();\n+                String format = \"disk %d was migrated to %s\";\n+                for (VirtualDisk disk : disks) {\n+                    if (s_logger.isTraceEnabled()) {\n+                        s_logger.trace(String.format(format, disk.getKey(), vmMo.getVmdkFileBaseName(disk)));\n+                    }\n+                    vmdkDataStorePath = VmwareStorageLayoutHelper.getLegacyDatastorePathFromVmdkFileName(dsMo, vmMo.getVmdkFileBaseName(disk) + VMDK_EXTENSION);\n+                    vmMo.detachDisk(vmdkDataStorePath, false);\n+                }\n+                s_logger.info(\"Destroy worker VM '\" + vmName + \"' after volume migration\");\n+                vmMo.destroy();\n+            } catch (Throwable e) {\n+                s_logger.info(\"Failed to destroy worker VM: \" + vmName);\n+            }\n+        }\n+        if (answer instanceof MigrateVolumeAnswer) {\n+            String newPath = ((MigrateVolumeAnswer)answer).getVolumePath();\n+            String vmdkFileName = newPath + VMDK_EXTENSION;\n+            try {\n+                VmwareStorageLayoutHelper.syncVolumeToRootFolder(dsMo.getOwnerDatacenter().first(), dsMo, newPath, vmName);\n+                vmdkDataStorePath = VmwareStorageLayoutHelper.getLegacyDatastorePathFromVmdkFileName(dsMo, vmdkFileName);\n+\n+                if (!dsMo.fileExists(vmdkDataStorePath)) {\n+                    String msg = String.format(\"Migration of volume '%s' failed; file (%s) not found as path '%s'\", cmd.getVolumePath(), vmdkFileName, vmdkDataStorePath);\n+                    s_logger.error(msg);\n+                    answer = new Answer(cmd, false, msg);\n+                }\n+            } catch (Exception e) {\n+                String msg = String.format(\"Migration of volume '%s' failed due to %s\", cmd.getVolumePath(), e.getLocalizedMessage());\n+                s_logger.error(msg, e);\n+                answer = new Answer(cmd, false, msg);\n+            }\n+        }\n+        return answer;\n+    }\n+\n+    // OfflineVmwareMigration: refactor to be able to handle a detached volume\n     private Answer execute(MigrateVolumeCommand cmd) {\n         String volumePath = cmd.getVolumePath();\n         StorageFilerTO poolTo = cmd.getPool();\n@@ -4087,6 +4397,10 @@ private Answer execute(MigrateVolumeCommand cmd) {\n         VirtualMachineMO vmMo = null;\n         VmwareHypervisorHost srcHyperHost = null;\n \n+        // OfflineVmwareMigration: ifhost is null ???\n+        if (org.apache.commons.lang.StringUtils.isBlank(cmd.getAttachedVmName())) {\n+            return migrateVolume(cmd);\n+        }\n         ManagedObjectReference morDs = null;\n         ManagedObjectReference morDc = null;\n         VirtualMachineRelocateSpec relocateSpec = new VirtualMachineRelocateSpec();\n@@ -4107,7 +4421,7 @@ private Answer execute(MigrateVolumeCommand cmd) {\n             if (vmMo == null) {\n                 String msg = \"VM \" + vmName + \" does not exist in VMware datacenter \" + morDc.getValue();\n                 s_logger.error(msg);\n-                throw new Exception(msg);\n+                throw new CloudRuntimeException(msg);\n             }\n             vmName = vmMo.getName();\n             morDs = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(srcHyperHost, tgtDsName);\n@@ -4119,8 +4433,8 @@ private Answer execute(MigrateVolumeCommand cmd) {\n             }\n \n             DatastoreMO targetDsMo = new DatastoreMO(srcHyperHost.getContext(), morDs);\n-            String fullVolumePath = VmwareStorageLayoutHelper.getVmwareDatastorePathFromVmdkFileName(targetDsMo, vmName, volumePath + \".vmdk\");\n-            Pair<VirtualDisk, String> diskInfo = getVirtualDiskInfo(vmMo, appendFileType(volumePath, \".vmdk\"));\n+            String fullVolumePath = VmwareStorageLayoutHelper.getVmwareDatastorePathFromVmdkFileName(targetDsMo, vmName, volumePath + VMDK_EXTENSION);\n+            Pair<VirtualDisk, String> diskInfo = getVirtualDiskInfo(vmMo, appendFileType(volumePath, VMDK_EXTENSION));\n             String vmdkAbsFile = getAbsoluteVmdkFile(diskInfo.first());\n             if (vmdkAbsFile != null && !vmdkAbsFile.isEmpty()) {\n                 vmMo.updateAdapterTypeIfRequired(vmdkAbsFile);",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "sha": "37d27c855bc4c44ff95888b430fded00311990ba",
                "status": "modified"
            },
            {
                "additions": 180,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/plugins/hypervisors/vmware/src/main/java/org/apache/cloudstack/storage/motion/VmwareStorageMotionStrategy.java",
                "changes": 199,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/main/java/org/apache/cloudstack/storage/motion/VmwareStorageMotionStrategy.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 19,
                "filename": "plugins/hypervisors/vmware/src/main/java/org/apache/cloudstack/storage/motion/VmwareStorageMotionStrategy.java",
                "patch": "@@ -20,42 +20,51 @@\n package org.apache.cloudstack.storage.motion;\n \n import java.util.ArrayList;\n+import java.util.Date;\n import java.util.List;\n import java.util.Map;\n \n import javax.inject.Inject;\n \n-import org.apache.cloudstack.engine.subsystem.api.storage.CopyCommandResult;\n-import org.apache.cloudstack.engine.subsystem.api.storage.DataMotionStrategy;\n-import org.apache.cloudstack.engine.subsystem.api.storage.DataObject;\n-import org.apache.cloudstack.engine.subsystem.api.storage.DataStore;\n-import org.apache.cloudstack.engine.subsystem.api.storage.StrategyPriority;\n-import org.apache.cloudstack.engine.subsystem.api.storage.VolumeDataFactory;\n-import org.apache.cloudstack.engine.subsystem.api.storage.VolumeInfo;\n-import org.apache.cloudstack.framework.async.AsyncCompletionCallback;\n-import org.apache.cloudstack.storage.datastore.db.PrimaryDataStoreDao;\n-import org.apache.cloudstack.storage.to.VolumeObjectTO;\n-import org.apache.log4j.Logger;\n-import org.springframework.stereotype.Component;\n-\n import com.cloud.agent.AgentManager;\n import com.cloud.agent.api.Answer;\n import com.cloud.agent.api.MigrateWithStorageAnswer;\n import com.cloud.agent.api.MigrateWithStorageCommand;\n+import com.cloud.agent.api.storage.MigrateVolumeAnswer;\n+import com.cloud.agent.api.storage.MigrateVolumeCommand;\n+import com.cloud.agent.api.to.DataObjectType;\n import com.cloud.agent.api.to.StorageFilerTO;\n import com.cloud.agent.api.to.VirtualMachineTO;\n import com.cloud.agent.api.to.VolumeTO;\n import com.cloud.exception.AgentUnavailableException;\n import com.cloud.exception.OperationTimedoutException;\n import com.cloud.host.Host;\n+import com.cloud.host.HostVO;\n+import com.cloud.host.Status;\n+import com.cloud.host.dao.HostDao;\n import com.cloud.hypervisor.Hypervisor.HypervisorType;\n+import com.cloud.storage.DataStoreRole;\n+import com.cloud.storage.ScopeType;\n import com.cloud.storage.StoragePool;\n+import com.cloud.storage.Volume;\n import com.cloud.storage.VolumeVO;\n import com.cloud.storage.dao.VolumeDao;\n import com.cloud.utils.Pair;\n import com.cloud.utils.exception.CloudRuntimeException;\n import com.cloud.vm.VMInstanceVO;\n import com.cloud.vm.dao.VMInstanceDao;\n+import org.apache.cloudstack.engine.subsystem.api.storage.CopyCommandResult;\n+import org.apache.cloudstack.engine.subsystem.api.storage.DataMotionStrategy;\n+import org.apache.cloudstack.engine.subsystem.api.storage.DataObject;\n+import org.apache.cloudstack.engine.subsystem.api.storage.DataStore;\n+import org.apache.cloudstack.engine.subsystem.api.storage.StrategyPriority;\n+import org.apache.cloudstack.engine.subsystem.api.storage.VolumeDataFactory;\n+import org.apache.cloudstack.engine.subsystem.api.storage.VolumeInfo;\n+import org.apache.cloudstack.framework.async.AsyncCompletionCallback;\n+import org.apache.cloudstack.storage.datastore.db.PrimaryDataStoreDao;\n+import org.apache.cloudstack.storage.to.VolumeObjectTO;\n+import org.apache.log4j.Logger;\n+import org.springframework.stereotype.Component;\n \n @Component\n public class VmwareStorageMotionStrategy implements DataMotionStrategy {\n@@ -70,12 +79,77 @@\n     PrimaryDataStoreDao storagePoolDao;\n     @Inject\n     VMInstanceDao instanceDao;\n+    @Inject\n+    private HostDao hostDao;\n \n     @Override\n     public StrategyPriority canHandle(DataObject srcData, DataObject destData) {\n+        // OfflineVmwareMigration: return StrategyPriority.HYPERVISOR when destData is in a storage pool in the same vmware-cluster and both are volumes\n+        if (isOnVmware(srcData, destData)\n+                && isOnPrimary(srcData, destData)\n+                && isVolumesOnly(srcData, destData)\n+                && isDettached(srcData)\n+                && isIntraCluster(srcData, destData)\n+                && isStoreScopeEqual(srcData, destData)) {\n+            if (s_logger.isDebugEnabled()) {\n+                String msg = String.format(\"%s can handle the request because %d(%s) and %d(%s) share the VMware cluster %s (== %s)\"\n+                        , this.getClass()\n+                        , srcData.getId()\n+                        , srcData.getUuid()\n+                        , destData.getId()\n+                        , destData.getUuid()\n+                        , storagePoolDao.findById(srcData.getDataStore().getId()).getClusterId()\n+                        , storagePoolDao.findById(destData.getDataStore().getId()).getClusterId());\n+                s_logger.debug(msg);\n+            }\n+            return StrategyPriority.HYPERVISOR;\n+        }\n         return StrategyPriority.CANT_HANDLE;\n     }\n \n+    private boolean isDettached(DataObject srcData) {\n+        VolumeVO volume = volDao.findById(srcData.getId());\n+        return volume.getInstanceId() == null;\n+    }\n+\n+    private boolean isVolumesOnly(DataObject srcData, DataObject destData) {\n+        return DataObjectType.VOLUME.equals(srcData.getType())\n+                && DataObjectType.VOLUME.equals(destData.getType());\n+    }\n+\n+    private boolean isOnPrimary(DataObject srcData, DataObject destData) {\n+        return DataStoreRole.Primary.equals(srcData.getDataStore().getRole())\n+                && DataStoreRole.Primary.equals(destData.getDataStore().getRole());\n+    }\n+\n+    private boolean isOnVmware(DataObject srcData, DataObject destData) {\n+        return HypervisorType.VMware.equals(srcData.getTO().getHypervisorType())\n+                && HypervisorType.VMware.equals(destData.getTO().getHypervisorType());\n+    }\n+\n+    private boolean isIntraCluster(DataObject srcData, DataObject destData) {\n+        DataStore srcStore = srcData.getDataStore();\n+        StoragePool srcPool = storagePoolDao.findById(srcStore.getId());\n+        DataStore destStore = destData.getDataStore();\n+        StoragePool destPool = storagePoolDao.findById(destStore.getId());\n+        return srcPool.getClusterId().equals(destPool.getClusterId());\n+    }\n+\n+    /**\n+     * Ensure that the scope of source and destination storage pools match\n+     *\n+     * @param srcData\n+     * @param destData\n+     * @return\n+     */\n+    private boolean isStoreScopeEqual(DataObject srcData, DataObject destData) {\n+        DataStore srcStore = srcData.getDataStore();\n+        DataStore destStore = destData.getDataStore();\n+        String msg = String.format(\"Storage scope of source pool is %s and of destination pool is %s\", srcStore.getScope().toString(), destStore.getScope().toString());\n+        s_logger.debug(msg);\n+        return srcStore.getScope().getScopeType() == (destStore.getScope().getScopeType());\n+    }\n+\n     @Override\n     public StrategyPriority canHandle(Map<VolumeInfo, DataStore> volumeMap, Host srcHost, Host destHost) {\n         if (srcHost.getHypervisorType() == HypervisorType.VMware && destHost.getHypervisorType() == HypervisorType.VMware) {\n@@ -85,9 +159,96 @@ public StrategyPriority canHandle(Map<VolumeInfo, DataStore> volumeMap, Host src\n         return StrategyPriority.CANT_HANDLE;\n     }\n \n+    /**\n+     * the Vmware storageMotion strategy allows to copy to a destination pool but not to a destination host\n+     *\n+     * @param srcData  volume to move\n+     * @param destData volume description as intended after the move\n+     * @param destHost null or else\n+     * @param callback where to report completion or failure to\n+     */\n     @Override\n     public void copyAsync(DataObject srcData, DataObject destData, Host destHost, AsyncCompletionCallback<CopyCommandResult> callback) {\n-        throw new UnsupportedOperationException();\n+        if (destHost != null) {\n+            String format = \"%s cannot target a host in moving an object from {%s}\\n to {%s}\";\n+            String msg = String.format(format\n+                    , this.getClass().getName()\n+                    , srcData.toString()\n+                    , destData.toString()\n+            );\n+            s_logger.error(msg);\n+            throw new CloudRuntimeException(msg);\n+        }\n+        // OfflineVmwareMigration: extract the destination pool from destData and construct a migrateVolume command\n+        if (!isOnPrimary(srcData, destData)) {\n+            // OfflineVmwareMigration: we shouldn't be here as we would have refused in the canHandle call\n+            throw new UnsupportedOperationException();\n+        }\n+        StoragePool sourcePool = (StoragePool) srcData.getDataStore();\n+        StoragePool targetPool = (StoragePool) destData.getDataStore();\n+        MigrateVolumeCommand cmd = new MigrateVolumeCommand(srcData.getId()\n+                , srcData.getTO().getPath()\n+                , sourcePool\n+                , targetPool);\n+        // OfflineVmwareMigration: should be ((StoragePool)srcData.getDataStore()).getHypervisor() but that is NULL, so hardcoding\n+        Answer answer;\n+        ScopeType scopeType = srcData.getDataStore().getScope().getScopeType();\n+        if (ScopeType.CLUSTER == scopeType) {\n+            // Find Volume source cluster and select any Vmware hypervisor host to attach worker VM\n+            Long hostId = findSuitableHostIdForWorkerVmPlacement(sourcePool.getClusterId());\n+            if (hostId == null) {\n+                throw new CloudRuntimeException(\"Offline Migration failed, unable to find suitable host for worker VM placement in cluster: \" + sourcePool.getName());\n+            }\n+            answer = agentMgr.easySend(hostId, cmd);\n+        } else {\n+            answer = agentMgr.sendTo(sourcePool.getDataCenterId(), HypervisorType.VMware, cmd);\n+        }\n+        updateVolumeAfterMigration(answer, srcData, destData);\n+        CopyCommandResult result = new CopyCommandResult(null, answer);\n+        callback.complete(result);\n+    }\n+\n+    /**\n+     * Selects a host from the cluster housing the source storage pool\n+     * Assumption is that Primary Storage is cluster-wide\n+     * <p>\n+     * returns any host ID within the cluster if storage-pool is cluster-wide, and exception is thrown otherwise\n+     *\n+     * @param clusterId\n+     * @return\n+     */\n+    private Long findSuitableHostIdForWorkerVmPlacement(Long clusterId) {\n+        List<HostVO> hostLists = hostDao.findByClusterId(clusterId);\n+        Long hostId = null;\n+        for (HostVO hostVO : hostLists) {\n+            if (hostVO.getHypervisorType().equals(HypervisorType.VMware) && hostVO.getStatus() == Status.Up) {\n+                hostId = hostVO.getId();\n+                break;\n+            }\n+        }\n+        return hostId;\n+    }\n+\n+    private void updateVolumeAfterMigration(Answer answer, DataObject srcData, DataObject destData) {\n+        VolumeVO destinationVO = volDao.findById(destData.getId());\n+        if (!(answer instanceof MigrateVolumeAnswer)) {\n+            // OfflineVmwareMigration: reset states and such\n+            VolumeVO sourceVO = volDao.findById(srcData.getId());\n+            sourceVO.setState(Volume.State.Ready);\n+            volDao.update(sourceVO.getId(), sourceVO);\n+            destinationVO.setState(Volume.State.Expunged);\n+            destinationVO.setRemoved(new Date());\n+            volDao.update(destinationVO.getId(), destinationVO);\n+            throw new CloudRuntimeException(\"unexpected answer from hypervisor agent: \" + answer.getDetails());\n+        }\n+        MigrateVolumeAnswer ans = (MigrateVolumeAnswer) answer;\n+        if (s_logger.isDebugEnabled()) {\n+            String format = \"retrieved '%s' as new path for volume(%d)\";\n+            s_logger.debug(String.format(format, ans.getVolumePath(), destData.getId()));\n+        }\n+        // OfflineVmwareMigration: update the volume with new pool/volume path\n+        destinationVO.setPath(ans.getVolumePath());\n+        volDao.update(destinationVO.getId(), destinationVO);\n     }\n \n     @Override\n@@ -124,7 +285,7 @@ private Answer migrateVmWithVolumesAcrossCluster(VMInstanceVO vm, VirtualMachine\n             for (Map.Entry<VolumeInfo, DataStore> entry : volumeToPool.entrySet()) {\n                 VolumeInfo volume = entry.getKey();\n                 VolumeTO volumeTo = new VolumeTO(volume, storagePoolDao.findById(volume.getPoolId()));\n-                StorageFilerTO filerTo = new StorageFilerTO((StoragePool)entry.getValue());\n+                StorageFilerTO filerTo = new StorageFilerTO((StoragePool) entry.getValue());\n                 volumeToFilerto.add(new Pair<VolumeTO, StorageFilerTO>(volumeTo, filerTo));\n             }\n \n@@ -133,7 +294,7 @@ private Answer migrateVmWithVolumesAcrossCluster(VMInstanceVO vm, VirtualMachine\n             //      Run validations against target!!\n             // 2. Complete the process. Update the volume details.\n             MigrateWithStorageCommand migrateWithStorageCmd = new MigrateWithStorageCommand(to, volumeToFilerto, destHost.getGuid());\n-            MigrateWithStorageAnswer migrateWithStorageAnswer = (MigrateWithStorageAnswer)agentMgr.send(srcHost.getId(), migrateWithStorageCmd);\n+            MigrateWithStorageAnswer migrateWithStorageAnswer = (MigrateWithStorageAnswer) agentMgr.send(srcHost.getId(), migrateWithStorageCmd);\n             if (migrateWithStorageAnswer == null) {\n                 s_logger.error(\"Migration with storage of vm \" + vm + \" to host \" + destHost + \" failed.\");\n                 throw new CloudRuntimeException(\"Error while migrating the vm \" + vm + \" to host \" + destHost);\n@@ -162,12 +323,12 @@ private Answer migrateVmWithVolumesWithinCluster(VMInstanceVO vm, VirtualMachine\n             for (Map.Entry<VolumeInfo, DataStore> entry : volumeToPool.entrySet()) {\n                 VolumeInfo volume = entry.getKey();\n                 VolumeTO volumeTo = new VolumeTO(volume, storagePoolDao.findById(volume.getPoolId()));\n-                StorageFilerTO filerTo = new StorageFilerTO((StoragePool)entry.getValue());\n+                StorageFilerTO filerTo = new StorageFilerTO((StoragePool) entry.getValue());\n                 volumeToFilerto.add(new Pair<VolumeTO, StorageFilerTO>(volumeTo, filerTo));\n             }\n \n             MigrateWithStorageCommand command = new MigrateWithStorageCommand(to, volumeToFilerto, destHost.getGuid());\n-            MigrateWithStorageAnswer answer = (MigrateWithStorageAnswer)agentMgr.send(srcHost.getId(), command);\n+            MigrateWithStorageAnswer answer = (MigrateWithStorageAnswer) agentMgr.send(srcHost.getId(), command);\n             if (answer == null) {\n                 s_logger.error(\"Migration with storage of vm \" + vm + \" failed.\");\n                 throw new CloudRuntimeException(\"Error while migrating the vm \" + vm + \" to host \" + destHost);\n@@ -190,7 +351,7 @@ private void updateVolumesAfterMigration(Map<VolumeInfo, DataStore> volumeToPool\n         for (Map.Entry<VolumeInfo, DataStore> entry : volumeToPool.entrySet()) {\n             boolean updated = false;\n             VolumeInfo volume = entry.getKey();\n-            StoragePool pool = (StoragePool)entry.getValue();\n+            StoragePool pool = (StoragePool) entry.getValue();\n             for (VolumeObjectTO volumeTo : volumeTos) {\n                 if (volume.getId() == volumeTo.getId()) {\n                     VolumeVO volumeVO = volDao.findById(volume.getId());",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/plugins/hypervisors/vmware/src/main/java/org/apache/cloudstack/storage/motion/VmwareStorageMotionStrategy.java",
                "sha": "2463e75c01d3da48cb2a91ea96c391d7b7640f68",
                "status": "modified"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/plugins/hypervisors/vmware/src/test/java/org/apache/cloudstack/storage/motion/VmwareStorageMotionStrategyTest.java",
                "changes": 66,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/test/java/org/apache/cloudstack/storage/motion/VmwareStorageMotionStrategyTest.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 30,
                "filename": "plugins/hypervisors/vmware/src/test/java/org/apache/cloudstack/storage/motion/VmwareStorageMotionStrategyTest.java",
                "patch": "@@ -16,20 +16,36 @@\n // under the License.\n package org.apache.cloudstack.storage.motion;\n \n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-import static org.mockito.Matchers.anyLong;\n-import static org.mockito.Matchers.isA;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-\n import java.io.IOException;\n import java.util.HashMap;\n import java.util.Map;\n \n import javax.inject.Inject;\n import javax.naming.ConfigurationException;\n \n+import com.cloud.agent.AgentManager;\n+import com.cloud.agent.api.MigrateWithStorageAnswer;\n+import com.cloud.agent.api.MigrateWithStorageCommand;\n+import com.cloud.agent.api.to.VirtualMachineTO;\n+import com.cloud.host.Host;\n+import com.cloud.host.dao.HostDao;\n+import com.cloud.hypervisor.Hypervisor.HypervisorType;\n+import com.cloud.storage.dao.VolumeDao;\n+import com.cloud.utils.component.ComponentContext;\n+import com.cloud.vm.VMInstanceVO;\n+import com.cloud.vm.dao.VMInstanceDao;\n+import org.apache.cloudstack.engine.subsystem.api.storage.CopyCommandResult;\n+import org.apache.cloudstack.engine.subsystem.api.storage.DataStore;\n+import org.apache.cloudstack.engine.subsystem.api.storage.StrategyPriority;\n+import org.apache.cloudstack.engine.subsystem.api.storage.VolumeDataFactory;\n+import org.apache.cloudstack.engine.subsystem.api.storage.VolumeInfo;\n+import org.apache.cloudstack.framework.async.AsyncCallFuture;\n+import org.apache.cloudstack.framework.async.AsyncCallbackDispatcher;\n+import org.apache.cloudstack.framework.async.AsyncCompletionCallback;\n+import org.apache.cloudstack.framework.async.AsyncRpcContext;\n+import org.apache.cloudstack.storage.command.CommandResult;\n+import org.apache.cloudstack.storage.datastore.db.PrimaryDataStoreDao;\n+import org.apache.cloudstack.test.utils.SpringUtils;\n import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.Test;\n@@ -47,29 +63,12 @@\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n import org.springframework.test.context.support.AnnotationConfigContextLoader;\n \n-import org.apache.cloudstack.engine.subsystem.api.storage.CopyCommandResult;\n-import org.apache.cloudstack.engine.subsystem.api.storage.DataStore;\n-import org.apache.cloudstack.engine.subsystem.api.storage.StrategyPriority;\n-import org.apache.cloudstack.engine.subsystem.api.storage.VolumeDataFactory;\n-import org.apache.cloudstack.engine.subsystem.api.storage.VolumeInfo;\n-import org.apache.cloudstack.framework.async.AsyncCallFuture;\n-import org.apache.cloudstack.framework.async.AsyncCallbackDispatcher;\n-import org.apache.cloudstack.framework.async.AsyncCompletionCallback;\n-import org.apache.cloudstack.framework.async.AsyncRpcContext;\n-import org.apache.cloudstack.storage.command.CommandResult;\n-import org.apache.cloudstack.storage.datastore.db.PrimaryDataStoreDao;\n-import org.apache.cloudstack.test.utils.SpringUtils;\n-\n-import com.cloud.agent.AgentManager;\n-import com.cloud.agent.api.MigrateWithStorageAnswer;\n-import com.cloud.agent.api.MigrateWithStorageCommand;\n-import com.cloud.agent.api.to.VirtualMachineTO;\n-import com.cloud.host.Host;\n-import com.cloud.hypervisor.Hypervisor.HypervisorType;\n-import com.cloud.storage.dao.VolumeDao;\n-import com.cloud.utils.component.ComponentContext;\n-import com.cloud.vm.VMInstanceVO;\n-import com.cloud.vm.dao.VMInstanceDao;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Matchers.anyLong;\n+import static org.mockito.Matchers.isA;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(loader = AnnotationConfigContextLoader.class)\n@@ -87,6 +86,8 @@\n     PrimaryDataStoreDao storagePoolDao;\n     @Inject\n     VMInstanceDao instanceDao;\n+    @Inject\n+    private HostDao hostDao;\n \n     CopyCommandResult result;\n \n@@ -262,6 +263,11 @@ public AgentManager agentManager() {\n             return Mockito.mock(AgentManager.class);\n         }\n \n+        @Bean\n+        public HostDao hostDao() {\n+            return Mockito.mock(HostDao.class);\n+        }\n+\n         public static class Library implements TypeFilter {\n             @Override\n             public boolean match(MetadataReader mdr, MetadataReaderFactory arg1) throws IOException {",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/plugins/hypervisors/vmware/src/test/java/org/apache/cloudstack/storage/motion/VmwareStorageMotionStrategyTest.java",
                "sha": "4cc3a77baaaf6de8e385c6ff670928447a3998b5",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/api/ApiDispatcher.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/api/ApiDispatcher.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 2,
                "filename": "server/src/main/java/com/cloud/api/ApiDispatcher.java",
                "patch": "@@ -49,6 +49,7 @@\n     private static final Logger s_logger = Logger.getLogger(ApiDispatcher.class.getName());\n \n     Long _createSnapshotQueueSizeLimit;\n+    Long migrateQueueSizeLimit;\n \n     @Inject\n     AsyncJobManager _asyncMgr;\n@@ -79,6 +80,9 @@ public void setCreateSnapshotQueueSizeLimit(final Long snapshotLimit) {\n         _createSnapshotQueueSizeLimit = snapshotLimit;\n     }\n \n+    public void setMigrateQueueSizeLimit(final Long migrateLimit) {\n+        migrateQueueSizeLimit = migrateLimit;\n+    }\n \n     public void dispatchCreateCmd(final BaseAsyncCreateCmd cmd, final Map<String, String> params) throws Exception {\n         asyncCreationDispatchChain.dispatch(new DispatchTask(cmd, params));\n@@ -123,7 +127,9 @@ public void dispatch(final BaseCmd cmd, final Map<String, String> params, final\n             if (asyncCmd.getJob() != null && asyncCmd.getSyncObjId() != null && asyncCmd.getSyncObjType() != null) {\n                 Long queueSizeLimit = null;\n                 if (asyncCmd.getSyncObjType() != null && asyncCmd.getSyncObjType().equalsIgnoreCase(BaseAsyncCmd.snapshotHostSyncObject)) {\n-                    queueSizeLimit = _createSnapshotQueueSizeLimit;\n+                        queueSizeLimit = _createSnapshotQueueSizeLimit;\n+                } else if (asyncCmd.getSyncObjType() != null && asyncCmd.getSyncObjType().equalsIgnoreCase(BaseAsyncCmd.migrationSyncObject)) {\n+                        queueSizeLimit = migrateQueueSizeLimit;\n                 } else {\n                     queueSizeLimit = 1L;\n                 }\n@@ -148,6 +154,6 @@ public void dispatch(final BaseCmd cmd, final Map<String, String> params, final\n         }\n \n         cmd.execute();\n-                            }\n+    }\n \n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/api/ApiDispatcher.java",
                "sha": "11615ea3f54b7601408c447e1b61ad1cfa46ade2",
                "status": "modified"
            },
            {
                "additions": 81,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/api/ApiServer.java",
                "changes": 125,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/api/ApiServer.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 44,
                "filename": "server/src/main/java/com/cloud/api/ApiServer.java",
                "patch": "@@ -19,7 +19,6 @@\n import com.cloud.api.dispatch.DispatchChainFactory;\n import com.cloud.api.dispatch.DispatchTask;\n import com.cloud.api.response.ApiResponseSerializer;\n-import com.cloud.configuration.Config;\n import com.cloud.domain.Domain;\n import com.cloud.domain.DomainVO;\n import com.cloud.domain.dao.DomainDao;\n@@ -35,6 +34,7 @@\n import com.cloud.exception.ResourceAllocationException;\n import com.cloud.exception.ResourceUnavailableException;\n import com.cloud.exception.UnavailableCommandException;\n+import com.cloud.storage.VolumeApiService;\n import com.cloud.user.Account;\n import com.cloud.user.AccountManager;\n import com.cloud.user.DomainManager;\n@@ -44,7 +44,6 @@\n import com.cloud.utils.ConstantTimeComparator;\n import com.cloud.utils.DateUtil;\n import com.cloud.utils.HttpUtils;\n-import com.cloud.utils.NumbersUtil;\n import com.cloud.utils.Pair;\n import com.cloud.utils.ReflectUtil;\n import com.cloud.utils.StringUtils;\n@@ -54,7 +53,6 @@\n import com.cloud.utils.component.PluggableService;\n import com.cloud.utils.concurrency.NamedThreadFactory;\n import com.cloud.utils.db.EntityManager;\n-import com.cloud.utils.db.SearchCriteria;\n import com.cloud.utils.db.TransactionLegacy;\n import com.cloud.utils.db.UUIDManager;\n import com.cloud.utils.exception.CloudRuntimeException;\n@@ -100,8 +98,6 @@\n import org.apache.cloudstack.context.CallContext;\n import org.apache.cloudstack.framework.config.ConfigKey;\n import org.apache.cloudstack.framework.config.Configurable;\n-import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n-import org.apache.cloudstack.framework.config.impl.ConfigurationVO;\n import org.apache.cloudstack.framework.events.EventBus;\n import org.apache.cloudstack.framework.events.EventBusException;\n import org.apache.cloudstack.framework.jobs.AsyncJob;\n@@ -209,8 +205,6 @@\n     @Inject\n     private AsyncJobManager asyncMgr;\n     @Inject\n-    private ConfigurationDao configDao;\n-    @Inject\n     private EntityManager entityMgr;\n     @Inject\n     private APIAuthenticationManager authManager;\n@@ -228,14 +222,60 @@\n     private static ExecutorService s_executor = new ThreadPoolExecutor(10, 150, 60, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(), new NamedThreadFactory(\n             \"ApiServer\"));\n \n-    static final ConfigKey<Boolean> EnableSecureSessionCookie = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"enable.secure.session.cookie\", \"false\",\n-            \"Session cookie is marked as secure if this is enabled. Secure cookies only work when HTTPS is used.\", false);\n-\n-    static final ConfigKey<String> JSONcontentType = new ConfigKey<String>(String.class, \"json.content.type\", \"Advanced\", \"application/json; charset=UTF-8\",\n-            \"Http response content type for .js files (default is text/javascript)\", false, ConfigKey.Scope.Global, null);\n     @Inject\n     private MessageBus messageBus;\n \n+    private static final ConfigKey<Integer> IntegrationAPIPort = new ConfigKey<Integer>(\"Advanced\"\n+            , Integer.class\n+            , \"integration.api.port\"\n+            , \"8096\"\n+            , \"Default API port\"\n+            , false\n+            , ConfigKey.Scope.Global);\n+    private static final ConfigKey<Long> ConcurrentSnapshotsThresholdPerHost = new ConfigKey<Long>(\"Advanced\"\n+            , Long.class\n+            , \"concurrent.snapshots.threshold.perhost\"\n+            , null\n+            , \"Limits number of snapshots that can be handled by the host concurrently; default is NULL - unlimited\"\n+            , true // not sure if this is to be dynamic\n+            , ConfigKey.Scope.Global);\n+    private static final ConfigKey<Boolean> EncodeApiResponse = new ConfigKey<Boolean>(\"Advanced\"\n+            , Boolean.class\n+            , \"encode.api.response\"\n+            , \"false\"\n+            , \"Do URL encoding for the api response, false by default\"\n+            , false\n+            , ConfigKey.Scope.Global);\n+    static final ConfigKey<String> JSONcontentType = new ConfigKey<String>( \"Advanced\"\n+            , String.class\n+            , \"json.content.type\"\n+            , \"application/json; charset=UTF-8\"\n+            , \"Http response content type for .js files (default is text/javascript)\"\n+            , false\n+            , ConfigKey.Scope.Global);\n+    static final ConfigKey<Boolean> EnableSecureSessionCookie = new ConfigKey<Boolean>(\"Advanced\"\n+            , Boolean.class\n+            , \"enable.secure.session.cookie\"\n+            , \"false\"\n+            , \"Session cookie is marked as secure if this is enabled. Secure cookies only work when HTTPS is used.\"\n+            , false\n+            , ConfigKey.Scope.Global);\n+    private static final ConfigKey<String> JSONDefaultContentType = new ConfigKey<String> (\"Advanced\"\n+            , String.class\n+            , \"json.content.type\"\n+            , \"application/json; charset=UTF-8\"\n+            , \"Http response content type for JSON\"\n+            , false\n+            , ConfigKey.Scope.Global);\n+\n+    private static final ConfigKey<Boolean> UseEventAccountInfo = new ConfigKey<Boolean>( \"advanced\"\n+            , Boolean.class\n+            , \"event.accountinfo\"\n+            , \"false\"\n+            , \"use account info in event logging\"\n+            , true\n+            , ConfigKey.Scope.Global);\n+\n     @Override\n     public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n         messageBus.subscribe(AsyncJob.Topics.JOB_EVENT_PUBLISH, MessageDispatcher.getDispatcher(this));\n@@ -305,8 +345,7 @@ public void handleAsyncJobPublishEvent(String subject, String senderAddress, Obj\n         eventDescription.put(\"cmdInfo\", job.getCmdInfo());\n         eventDescription.put(\"status\", \"\" + job.getStatus() );\n         // If the event.accountinfo boolean value is set, get the human readable value for the username / domainname\n-        Map<String, String> configs = configDao.getConfiguration(\"management-server\", new HashMap<String, String>());\n-        if (Boolean.valueOf(configs.get(\"event.accountinfo\"))) {\n+        if (UseEventAccountInfo.value()) {\n             DomainVO domain = domainDao.findById(jobOwner.getDomainId());\n             eventDescription.put(\"username\", userJobOwner.getUsername());\n             eventDescription.put(\"accountname\", jobOwner.getAccountName());\n@@ -325,27 +364,20 @@ public void handleAsyncJobPublishEvent(String subject, String senderAddress, Obj\n     @Override\n     public boolean start() {\n         Security.addProvider(new BouncyCastleProvider());\n-        Integer apiPort = null; // api port, null by default\n-        final SearchCriteria<ConfigurationVO> sc = configDao.createSearchCriteria();\n-        sc.addAnd(\"name\", SearchCriteria.Op.EQ, Config.IntegrationAPIPort.key());\n-        final List<ConfigurationVO> values = configDao.search(sc, null);\n-        if ((values != null) && (values.size() > 0)) {\n-            final ConfigurationVO apiPortConfig = values.get(0);\n-            if (apiPortConfig.getValue() != null) {\n-                apiPort = Integer.parseInt(apiPortConfig.getValue());\n-                apiPort = (apiPort <= 0) ? null : apiPort;\n-            }\n+        Integer apiPort = IntegrationAPIPort.value(); // api port, null by default\n+\n+        final Long snapshotLimit = ConcurrentSnapshotsThresholdPerHost.value();\n+        if (snapshotLimit == null || snapshotLimit.longValue() <= 0) {\n+            s_logger.debug(\"Global concurrent snapshot config parameter \" + ConcurrentSnapshotsThresholdPerHost.value() + \" is less or equal 0; defaulting to unlimited\");\n+        } else {\n+            dispatcher.setCreateSnapshotQueueSizeLimit(snapshotLimit);\n         }\n \n-        final Map<String, String> configs = configDao.getConfiguration();\n-        final String strSnapshotLimit = configs.get(Config.ConcurrentSnapshotsThresholdPerHost.key());\n-        if (strSnapshotLimit != null) {\n-            final Long snapshotLimit = NumbersUtil.parseLong(strSnapshotLimit, 1L);\n-            if (snapshotLimit.longValue() <= 0) {\n-                s_logger.debug(\"Global config parameter \" + Config.ConcurrentSnapshotsThresholdPerHost.toString() + \" is less or equal 0; defaulting to unlimited\");\n-            } else {\n-                dispatcher.setCreateSnapshotQueueSizeLimit(snapshotLimit);\n-            }\n+        final Long migrationLimit = VolumeApiService.ConcurrentMigrationsThresholdPerDatastore.value();\n+        if (migrationLimit == null || migrationLimit.longValue() <= 0) {\n+            s_logger.debug(\"Global concurrent migration config parameter \" + VolumeApiService.ConcurrentMigrationsThresholdPerDatastore.value() + \" is less or equal 0; defaulting to unlimited\");\n+        } else {\n+            dispatcher.setMigrateQueueSizeLimit(migrationLimit);\n         }\n \n         final Set<Class<?>> cmdClasses = new HashSet<Class<?>>();\n@@ -372,7 +404,7 @@ public boolean start() {\n \n         }\n \n-        setEncodeApiResponse(Boolean.valueOf(configDao.getValue(Config.EncodeApiResponse.key())));\n+        setEncodeApiResponse(EncodeApiResponse.value());\n \n         if (apiPort != null) {\n             final ListenerThread listenerThread = new ListenerThread(this, apiPort);\n@@ -1200,16 +1232,6 @@ private void writeResponse(final HttpResponse resp, final String responseText, f\n         }\n     }\n \n-    @Override\n-    public String getConfigComponentName() {\n-        return ApiServer.class.getSimpleName();\n-    }\n-\n-    @Override\n-    public ConfigKey<?>[] getConfigKeys() {\n-        return new ConfigKey<?>[] { EnableSecureSessionCookie, JSONcontentType };\n-    }\n-\n     // FIXME: the following two threads are copied from\n     // http://svn.apache.org/repos/asf/httpcomponents/httpcore/trunk/httpcore/src/examples/org/apache/http/examples/ElementalHttpServer.java\n     // we have to cite a license if we are using this code directly, so we need to add the appropriate citation or\n@@ -1413,4 +1435,19 @@ private static void setEncodeApiResponse(final boolean encodeApiResponse) {\n         ApiServer.encodeApiResponse = encodeApiResponse;\n     }\n \n+    @Override\n+    public String getConfigComponentName() {\n+        return ApiServer.class.getSimpleName();\n+    }\n+\n+    @Override\n+    public ConfigKey<?>[] getConfigKeys() {\n+        return new ConfigKey<?>[] {\n+                IntegrationAPIPort,\n+                ConcurrentSnapshotsThresholdPerHost,\n+                EncodeApiResponse,\n+                EnableSecureSessionCookie,\n+                JSONDefaultContentType\n+        };\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/api/ApiServer.java",
                "sha": "a8ab7b095c67a9f0c1f455b73185375668eb41e9",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/configuration/Config.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/configuration/Config.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 10,
                "filename": "server/src/main/java/com/cloud/configuration/Config.java",
                "patch": "@@ -566,7 +566,6 @@\n             \"The interval (in milliseconds) when host stats are retrieved from agents.\",\n             null),\n     HostRetry(\"Advanced\", AgentManager.class, Integer.class, \"host.retry\", \"2\", \"Number of times to retry hosts for creating a volume\", null),\n-    IntegrationAPIPort(\"Advanced\", ManagementServer.class, Integer.class, \"integration.api.port\", null, \"Default API port. To disable set it to 0 or negative.\", null),\n     InvestigateRetryInterval(\n             \"Advanced\",\n             HighAvailabilityManager.class,\n@@ -1439,7 +1438,6 @@\n             \"true\",\n             \"Allow subdomains to use networks dedicated to their parent domain(s)\",\n             null),\n-    EncodeApiResponse(\"Advanced\", ManagementServer.class, Boolean.class, \"encode.api.response\", \"false\", \"Do URL encoding for the api response, false by default\", null),\n     DnsBasicZoneUpdates(\n             \"Advanced\",\n             NetworkOrchestrationService.class,\n@@ -1693,14 +1691,6 @@\n             null),\n     VpcMaxNetworks(\"Advanced\", ManagementServer.class, Integer.class, \"vpc.max.networks\", \"3\", \"Maximum number of networks per vpc\", null),\n     DetailBatchQuerySize(\"Advanced\", ManagementServer.class, Integer.class, \"detail.batch.query.size\", \"2000\", \"Default entity detail batch query size for listing\", null),\n-    ConcurrentSnapshotsThresholdPerHost(\n-            \"Advanced\",\n-            ManagementServer.class,\n-            Long.class,\n-            \"concurrent.snapshots.threshold.perhost\",\n-            null,\n-            \"Limits number of snapshots that can be handled by the host concurrently; default is NULL - unlimited\",\n-            null),\n     NetworkIPv6SearchRetryMax(\n             \"Network\",\n             ManagementServer.class,",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/configuration/Config.java",
                "sha": "eda34e5970478656a65e61e4bdffce459a3e2f31",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/deploy/DeploymentPlanningManagerImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/deploy/DeploymentPlanningManagerImpl.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 1,
                "filename": "server/src/main/java/com/cloud/deploy/DeploymentPlanningManagerImpl.java",
                "patch": "@@ -1342,7 +1342,8 @@ protected boolean hostCanAccessSPool(Host host, StoragePool pool) {\n \n         // There should be atleast the ROOT volume of the VM in usable state\n         if (volumesTobeCreated.isEmpty()) {\n-            throw new CloudRuntimeException(\"Unable to create deployment, no usable volumes found for the VM\");\n+            // OfflineVmwareMigration: find out what is wrong with the id of the vm we try to start\n+            throw new CloudRuntimeException(\"Unable to create deployment, no usable volumes found for the VM: \" + vmProfile.getId());\n         }\n \n         // don't allow to start vm that doesn't have a root volume",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/deploy/DeploymentPlanningManagerImpl.java",
                "sha": "a95f4ef2d694002612e1f1bc3067c366f0f18102",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/hypervisor/HypervisorGuruBase.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/hypervisor/HypervisorGuruBase.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 0,
                "filename": "server/src/main/java/com/cloud/hypervisor/HypervisorGuruBase.java",
                "patch": "@@ -40,6 +40,7 @@\n import com.cloud.service.ServiceOfferingDetailsVO;\n import com.cloud.service.dao.ServiceOfferingDao;\n import com.cloud.service.dao.ServiceOfferingDetailsDao;\n+import com.cloud.storage.StoragePool;\n import com.cloud.utils.Pair;\n import com.cloud.utils.component.AdapterBase;\n import com.cloud.vm.NicProfile;\n@@ -225,4 +226,8 @@ protected VirtualMachineTO toVirtualMachineTO(VirtualMachineProfile vmProfile) {\n         return null;\n     }\n \n+    @Override\n+    public List<Command> finalizeMigrate(VirtualMachine vm, StoragePool destination) {\n+        return null;\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/hypervisor/HypervisorGuruBase.java",
                "sha": "445997a6d065877ce8313a64d0562272d23201a5",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/server/ManagementServerImpl.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/server/ManagementServerImpl.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 1,
                "filename": "server/src/main/java/com/cloud/server/ManagementServerImpl.java",
                "patch": "@@ -37,6 +37,7 @@\n import javax.inject.Inject;\n import javax.naming.ConfigurationException;\n \n+import com.cloud.storage.ScopeType;\n import org.apache.cloudstack.acl.ControlledEntity;\n import org.apache.cloudstack.affinity.AffinityGroupProcessor;\n import org.apache.cloudstack.affinity.dao.AffinityGroupVMMapDao;\n@@ -1103,6 +1104,32 @@ public boolean deleteEvents(final DeleteEventsCmd cmd) {\n         return new Pair<List<? extends Cluster>, Integer>(result.first(), result.second());\n     }\n \n+    private HypervisorType getHypervisorType(VMInstanceVO vm, StoragePool srcVolumePool, VirtualMachineProfile profile) {\n+        HypervisorType type = null;\n+        if (vm == null) {\n+            StoragePoolVO poolVo = _poolDao.findById(srcVolumePool.getId());\n+            if (ScopeType.CLUSTER.equals(poolVo.getScope())) {\n+                Long clusterId = poolVo.getClusterId();\n+                if (clusterId != null) {\n+                    ClusterVO cluster = _clusterDao.findById(clusterId);\n+                    type = cluster.getHypervisorType();\n+                }\n+            } else if (ScopeType.ZONE.equals(poolVo.getScope())) {\n+                Long zoneId = poolVo.getDataCenterId();\n+                if (zoneId != null) {\n+                    DataCenterVO dc = _dcDao.findById(zoneId);\n+                }\n+            }\n+\n+            if (null == type) {\n+                type = srcVolumePool.getHypervisor();\n+            }\n+        } else {\n+            type = profile.getHypervisorType();\n+        }\n+        return type;\n+    }\n+\n     @Override\n     public Pair<List<? extends Host>, Integer> searchForServers(final ListHostsCmd cmd) {\n \n@@ -1433,10 +1460,12 @@ private boolean hasSuitablePoolsForVolume(final VolumeVO volume, final Host host\n \n         DataCenterDeployment plan = new DataCenterDeployment(volume.getDataCenterId(), srcVolumePool.getPodId(), srcVolumePool.getClusterId(), null, null, null);\n         VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n+        // OfflineVmwareMigration: vm might be null here; deal!\n+        HypervisorType type = getHypervisorType(vm, srcVolumePool, profile);\n \n         DiskOfferingVO diskOffering = _diskOfferingDao.findById(volume.getDiskOfferingId());\n         //This is an override mechanism so we can list the possible local storage pools that a volume in a shared pool might be able to be migrated to\n-        DiskProfile diskProfile = new DiskProfile(volume, diskOffering, profile.getHypervisorType());\n+        DiskProfile diskProfile = new DiskProfile(volume, diskOffering, type);\n         diskProfile.setUseLocalStorage(true);\n \n         for (StoragePoolAllocator allocator : _storagePoolAllocators) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/server/ManagementServerImpl.java",
                "sha": "d54e84fd6d201929a13818d1ecbf7c0d81bd43fb",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/storage/StorageManagerImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/storage/StorageManagerImpl.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 1,
                "filename": "server/src/main/java/com/cloud/storage/StorageManagerImpl.java",
                "patch": "@@ -522,7 +522,12 @@ public boolean configure(String name, Map<String, Object> params) {\n \n     @Override\n     public String getStoragePoolTags(long poolId) {\n-        return com.cloud.utils.StringUtils.listToCsvTags(_storagePoolDao.searchForStoragePoolTags(poolId));\n+        return StringUtils.listToCsvTags(getStoragePoolTagList(poolId));\n+    }\n+\n+    @Override\n+    public List<String> getStoragePoolTagList(long poolId) {\n+        return _storagePoolDao.searchForStoragePoolTags(poolId);\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/storage/StorageManagerImpl.java",
                "sha": "1f704eb8aec0abf05bef86ab868b23c39b02a422",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/storage/VolumeApiServiceImpl.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/storage/VolumeApiServiceImpl.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 5,
                "filename": "server/src/main/java/com/cloud/storage/VolumeApiServiceImpl.java",
                "patch": "@@ -56,6 +56,7 @@\n import org.apache.cloudstack.engine.subsystem.api.storage.VolumeService.VolumeApiResult;\n import org.apache.cloudstack.framework.async.AsyncCallFuture;\n import org.apache.cloudstack.framework.config.ConfigKey;\n+import org.apache.cloudstack.framework.config.Configurable;\n import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n import org.apache.cloudstack.framework.jobs.AsyncJob;\n import org.apache.cloudstack.framework.jobs.AsyncJobExecutionContext;\n@@ -178,7 +179,7 @@\n import com.google.gson.GsonBuilder;\n import com.google.gson.JsonParseException;\n \n-public class VolumeApiServiceImpl extends ManagerBase implements VolumeApiService, VmWorkJobHandler {\n+public class VolumeApiServiceImpl extends ManagerBase implements VolumeApiService, VmWorkJobHandler, Configurable {\n     private final static Logger s_logger = Logger.getLogger(VolumeApiServiceImpl.class);\n     public static final String VM_WORK_JOB_HANDLER = VolumeApiServiceImpl.class.getSimpleName();\n \n@@ -2028,10 +2029,12 @@ public Volume migrateVolume(MigrateVolumeCmd cmd) {\n         }\n \n         // Check that Vm to which this volume is attached does not have VM Snapshots\n+        // OfflineVmwareMigration: considder if this is needed and desirable\n         if (vm != null && _vmSnapshotDao.findByVm(vm.getId()).size() > 0) {\n             throw new InvalidParameterValueException(\"Volume cannot be migrated, please remove all VM snapshots for VM to which this volume is attached\");\n         }\n \n+        // OfflineVmwareMigration: extract this block as method and check if it is subject to regression\n         if (vm != null && vm.getState() == State.Running) {\n             // Check if the VM is GPU enabled.\n             if (_serviceOfferingDetailsDao.findDetail(vm.getServiceOfferingId(), GPU.Keys.pciDevice.toString()) != null) {\n@@ -2073,6 +2076,16 @@ public Volume migrateVolume(MigrateVolumeCmd cmd) {\n             throw new CloudRuntimeException(\"Storage pool \" + destPool.getName() + \" does not have enough space to migrate volume \" + vol.getName());\n         }\n \n+        // OfflineVmwareMigration: check storage tags on disk(offering)s in comparison to destination storage pool\n+        // OfflineVmwareMigration: if no match return a proper error now\n+        DiskOfferingVO diskOffering = _diskOfferingDao.findById(vol.getDiskOfferingId());\n+        if(diskOffering.equals(null)) {\n+            throw new CloudRuntimeException(\"volume '\" + vol.getUuid() +\"', has no diskoffering. Migration target cannot be checked.\");\n+        }\n+        if(! doesTargetStorageSupportDiskOffering(destPool, diskOffering)) {\n+            throw new CloudRuntimeException(\"Migration target has no matching tags for volume '\" +vol.getName() + \"(\" + vol.getUuid() + \")'\");\n+        }\n+\n         if (liveMigrateVolume && destPool.getClusterId() != null && srcClusterId != null) {\n             if (!srcClusterId.equals(destPool.getClusterId())) {\n                 throw new InvalidParameterValueException(\"Cannot migrate a volume of a virtual machine to a storage pool in a different cluster\");\n@@ -2191,7 +2204,7 @@ protected void validateConditionsToReplaceDiskOfferingOfVolume(VolumeVO volume,\n         if ((destPool.isShared() && newDiskOffering.isUseLocalStorage()) || destPool.isLocal() && newDiskOffering.isShared()) {\n             throw new InvalidParameterValueException(\"You cannot move the volume to a shared storage and assing a disk offering for local storage and vice versa.\");\n         }\n-        if (!doesTargetStorageSupportNewDiskOffering(destPool, newDiskOffering)) {\n+        if (!doesTargetStorageSupportDiskOffering(destPool, newDiskOffering)) {\n             throw new InvalidParameterValueException(String.format(\"Target Storage [id=%s] tags [%s] does not match new disk offering [id=%s] tags [%s].\", destPool.getUuid(),\n                     getStoragePoolTags(destPool), newDiskOffering.getUuid(), newDiskOffering.getTags()));\n         }\n@@ -2236,9 +2249,9 @@ protected void validateConditionsToReplaceDiskOfferingOfVolume(VolumeVO volume,\n      *      </body>\n      *   </table>\n      */\n-    protected boolean doesTargetStorageSupportNewDiskOffering(StoragePool destPool, DiskOfferingVO newDiskOffering) {\n-        String newDiskOfferingTags = newDiskOffering.getTags();\n-        return doesTargetStorageSupportDiskOffering(destPool, newDiskOfferingTags);\n+    protected boolean doesTargetStorageSupportDiskOffering(StoragePool destPool, DiskOfferingVO diskOffering) {\n+        String targetStoreTags = diskOffering.getTags();\n+        return doesTargetStorageSupportDiskOffering(destPool, targetStoreTags);\n     }\n \n     @Override\n@@ -3350,4 +3363,13 @@ private VmWorkJobVO createPlaceHolderWork(long instanceId) {\n         return workJob;\n     }\n \n+    @Override\n+    public String getConfigComponentName() {\n+        return VolumeApiService.class.getSimpleName();\n+    }\n+\n+    @Override\n+    public ConfigKey<?>[] getConfigKeys() {\n+        return new ConfigKey<?>[] {ConcurrentMigrationsThresholdPerDatastore};\n+    }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/storage/VolumeApiServiceImpl.java",
                "sha": "23b56e98da389ad1e9beb7e87976f0c2649574a3",
                "status": "modified"
            },
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/vm/UserVmManagerImpl.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/vm/UserVmManagerImpl.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 8,
                "filename": "server/src/main/java/com/cloud/vm/UserVmManagerImpl.java",
                "patch": "@@ -5065,19 +5065,33 @@ public VirtualMachine vmStorageMigration(Long vmId, StoragePool destPool) {\n         }\n \n         if (vm.getType() != VirtualMachine.Type.User) {\n+            // OffLineVmwareMigration: *WHY* ?\n             throw new InvalidParameterValueException(\"can only do storage migration on user vm\");\n         }\n \n         List<VolumeVO> vols = _volsDao.findByInstance(vm.getId());\n         if (vols.size() > 1) {\n-            throw new InvalidParameterValueException(\"Data disks attached to the vm, can not migrate. Need to detach data disks first\");\n+            // OffLineVmwareMigration: data disks are not permitted, here!\n+            if (vols.size() > 1 &&\n+                    // OffLineVmwareMigration: allow multiple disks for vmware\n+                    !HypervisorType.VMware.equals(vm.getHypervisorType())) {\n+                throw new InvalidParameterValueException(\"Data disks attached to the vm, can not migrate. Need to detach data disks first\");\n+            }\n         }\n \n         // Check that Vm does not have VM Snapshots\n         if (_vmSnapshotDao.findByVm(vmId).size() > 0) {\n             throw new InvalidParameterValueException(\"VM's disk cannot be migrated, please remove all the VM Snapshots for this VM\");\n         }\n \n+        checkDestinationHypervisorType(destPool, vm);\n+\n+        _itMgr.storageMigration(vm.getUuid(), destPool);\n+        return _vmDao.findById(vm.getId());\n+\n+    }\n+\n+    private void checkDestinationHypervisorType(StoragePool destPool, VMInstanceVO vm) {\n         HypervisorType destHypervisorType = destPool.getHypervisor();\n         if (destHypervisorType == null) {\n             destHypervisorType = _clusterDao.findById(\n@@ -5087,8 +5101,6 @@ public VirtualMachine vmStorageMigration(Long vmId, StoragePool destPool) {\n         if (vm.getHypervisorType() != destHypervisorType && destHypervisorType != HypervisorType.Any) {\n             throw new InvalidParameterValueException(\"hypervisor is not compatible: dest: \" + destHypervisorType.toString() + \", vm: \" + vm.getHypervisorType().toString());\n         }\n-        _itMgr.storageMigration(vm.getUuid(), destPool);\n-        return _vmDao.findById(vm.getId());\n \n     }\n \n@@ -5144,12 +5156,9 @@ public VirtualMachine migrateVirtualMachine(Long vmId, Host destinationHost) thr\n             throw new InvalidParameterValueException(\"Live Migration of GPU enabled VM is not supported\");\n         }\n \n-        if (!vm.getHypervisorType().equals(HypervisorType.XenServer) && !vm.getHypervisorType().equals(HypervisorType.VMware) && !vm.getHypervisorType().equals(HypervisorType.KVM)\n-                && !vm.getHypervisorType().equals(HypervisorType.Ovm) && !vm.getHypervisorType().equals(HypervisorType.Hyperv)\n-                && !vm.getHypervisorType().equals(HypervisorType.LXC) && !vm.getHypervisorType().equals(HypervisorType.Simulator)\n-                && !vm.getHypervisorType().equals(HypervisorType.Ovm3)) {\n+        if (!isOnSupportedHypevisorForMigration(vm)) {\n             if (s_logger.isDebugEnabled()) {\n-                s_logger.debug(vm + \" is not XenServer/VMware/KVM/Ovm/Hyperv, cannot migrate this VM.\");\n+                s_logger.debug(vm + \" is not XenServer/VMware/KVM/Ovm/Hyperv, cannot migrate this VM form hypervisor type \" + vm.getHypervisorType());\n             }\n             throw new InvalidParameterValueException(\"Unsupported Hypervisor Type for VM migration, we support XenServer/VMware/KVM/Ovm/Hyperv/Ovm3 only\");\n         }\n@@ -5227,6 +5236,17 @@ public VirtualMachine migrateVirtualMachine(Long vmId, Host destinationHost) thr\n         }\n     }\n \n+    private boolean isOnSupportedHypevisorForMigration(VMInstanceVO vm) {\n+        return (vm.getHypervisorType().equals(HypervisorType.XenServer) ||\n+                vm.getHypervisorType().equals(HypervisorType.VMware) ||\n+                vm.getHypervisorType().equals(HypervisorType.KVM) ||\n+                vm.getHypervisorType().equals(HypervisorType.Ovm) ||\n+                vm.getHypervisorType().equals(HypervisorType.Hyperv) ||\n+                vm.getHypervisorType().equals(HypervisorType.LXC) ||\n+                vm.getHypervisorType().equals(HypervisorType.Simulator) ||\n+                vm.getHypervisorType().equals(HypervisorType.Ovm3));\n+    }\n+\n     private boolean checkIfHostIsDedicated(HostVO host) {\n         long hostId = host.getId();\n         DedicatedResourceVO dedicatedHost = _dedicatedDao.findByHostId(hostId);\n@@ -5469,7 +5489,9 @@ public VirtualMachine migrateVirtualMachineWithVolume(Long vmId, Host destinatio\n             throw new InvalidParameterValueException(\"Unable to find the vm by id \" + vmId);\n         }\n \n+        // OfflineVmwareMigration: this would be it ;) if multiple paths exist: unify\n         if (vm.getState() != State.Running) {\n+            // OfflineVmwareMigration: and not vmware\n             if (s_logger.isDebugEnabled()) {\n                 s_logger.debug(\"VM is not Running, unable to migrate the vm \" + vm);\n             }\n@@ -5482,6 +5504,7 @@ public VirtualMachine migrateVirtualMachineWithVolume(Long vmId, Host destinatio\n             throw new InvalidParameterValueException(\"Live Migration of GPU enabled VM is not supported\");\n         }\n \n+        // OfflineVmwareMigration: this condition is to complicated. (already a method somewhere)\n         if (!vm.getHypervisorType().equals(HypervisorType.XenServer) && !vm.getHypervisorType().equals(HypervisorType.VMware) && !vm.getHypervisorType().equals(HypervisorType.KVM)\n                 && !vm.getHypervisorType().equals(HypervisorType.Ovm) && !vm.getHypervisorType().equals(HypervisorType.Hyperv)\n                 && !vm.getHypervisorType().equals(HypervisorType.Simulator)) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/vm/UserVmManagerImpl.java",
                "sha": "68b45e1af7c3b5c442bc0dc09dec1aeb5256a58d",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/test/java/com/cloud/storage/VolumeApiServiceImplTest.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/test/java/com/cloud/storage/VolumeApiServiceImplTest.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 7,
                "filename": "server/src/test/java/com/cloud/storage/VolumeApiServiceImplTest.java",
                "patch": "@@ -1004,7 +1004,7 @@ public void doesTargetStorageSupportDiskOfferingTestDiskOfferingMoreTagsThanStor\n         StoragePool storagePoolMock = Mockito.mock(StoragePool.class);\n         Mockito.doReturn(\"A\").when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n \n-        boolean result = volumeApiServiceImpl.doesTargetStorageSupportNewDiskOffering(storagePoolMock, diskOfferingVoMock);\n+        boolean result = volumeApiServiceImpl.doesTargetStorageSupportDiskOffering(storagePoolMock, diskOfferingVoMock);\n \n         Assert.assertFalse(result);\n     }\n@@ -1017,7 +1017,7 @@ public void doesTargetStorageSupportDiskOfferingTestDiskOfferingTagsIsSubSetOfSt\n         StoragePool storagePoolMock = Mockito.mock(StoragePool.class);\n         Mockito.doReturn(\"A,B,C,D,X,Y\").when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n \n-        boolean result = volumeApiServiceImpl.doesTargetStorageSupportNewDiskOffering(storagePoolMock, diskOfferingVoMock);\n+        boolean result = volumeApiServiceImpl.doesTargetStorageSupportDiskOffering(storagePoolMock, diskOfferingVoMock);\n \n         Assert.assertTrue(result);\n     }\n@@ -1030,7 +1030,7 @@ public void doesTargetStorageSupportDiskOfferingTestDiskOfferingTagsEmptyAndStor\n         StoragePool storagePoolMock = Mockito.mock(StoragePool.class);\n         Mockito.doReturn(\"A,B,C,D,X,Y\").when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n \n-        boolean result = volumeApiServiceImpl.doesTargetStorageSupportNewDiskOffering(storagePoolMock, diskOfferingVoMock);\n+        boolean result = volumeApiServiceImpl.doesTargetStorageSupportDiskOffering(storagePoolMock, diskOfferingVoMock);\n \n         Assert.assertTrue(result);\n     }\n@@ -1043,7 +1043,7 @@ public void doesTargetStorageSupportDiskOfferingTestDiskOfferingTagsNotEmptyAndS\n         StoragePool storagePoolMock = Mockito.mock(StoragePool.class);\n         Mockito.doReturn(\"\").when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n \n-        boolean result = volumeApiServiceImpl.doesTargetStorageSupportNewDiskOffering(storagePoolMock, diskOfferingVoMock);\n+        boolean result = volumeApiServiceImpl.doesTargetStorageSupportDiskOffering(storagePoolMock, diskOfferingVoMock);\n \n         Assert.assertFalse(result);\n     }\n@@ -1056,7 +1056,7 @@ public void doesTargetStorageSupportDiskOfferingTestDiskOfferingTagsEmptyAndStor\n         StoragePool storagePoolMock = Mockito.mock(StoragePool.class);\n         Mockito.doReturn(\"\").when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n \n-        boolean result = volumeApiServiceImpl.doesTargetStorageSupportNewDiskOffering(storagePoolMock, diskOfferingVoMock);\n+        boolean result = volumeApiServiceImpl.doesTargetStorageSupportDiskOffering(storagePoolMock, diskOfferingVoMock);\n \n         Assert.assertTrue(result);\n     }\n@@ -1069,7 +1069,7 @@ public void doesTargetStorageSupportDiskOfferingTestDiskOfferingTagsDifferentFro\n         StoragePool storagePoolMock = Mockito.mock(StoragePool.class);\n         Mockito.doReturn(\"C,D\").when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n \n-        boolean result = volumeApiServiceImpl.doesTargetStorageSupportNewDiskOffering(storagePoolMock, diskOfferingVoMock);\n+        boolean result = volumeApiServiceImpl.doesTargetStorageSupportDiskOffering(storagePoolMock, diskOfferingVoMock);\n \n         Assert.assertFalse(result);\n     }\n@@ -1082,7 +1082,7 @@ public void doesTargetStorageSupportDiskOfferingTestDiskOfferingTagsEqualsStorag\n         StoragePool storagePoolMock = Mockito.mock(StoragePool.class);\n         Mockito.doReturn(\"A\").when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n \n-        boolean result = volumeApiServiceImpl.doesTargetStorageSupportNewDiskOffering(storagePoolMock, diskOfferingVoMock);\n+        boolean result = volumeApiServiceImpl.doesTargetStorageSupportDiskOffering(storagePoolMock, diskOfferingVoMock);\n \n         Assert.assertTrue(result);\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/test/java/com/cloud/storage/VolumeApiServiceImplTest.java",
                "sha": "693b437079ba479f47d2d14ed4e2611ffdd883c0",
                "status": "modified"
            },
            {
                "additions": 177,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/test/integration/smoke/test_primary_storage.py",
                "changes": 363,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/test/integration/smoke/test_primary_storage.py?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 186,
                "filename": "test/integration/smoke/test_primary_storage.py",
                "patch": "@@ -16,21 +16,19 @@\n # under the License.\n \"\"\" BVT tests for Primary Storage\n \"\"\"\n-#Import Local Modules\n-import marvin\n+\n+# Import System modules\n+# Import Local Modules\n from marvin.cloudstackTestCase import *\n-from marvin.cloudstackAPI import *\n-from marvin.lib.utils import *\n from marvin.lib.base import *\n from marvin.lib.common import *\n-from nose.plugins.attrib import attr\n-import logging\n from marvin.lib.decoratorGenerators import skipTestIf\n+from marvin.lib.utils import *\n+from nose.plugins.attrib import attr\n \n-#Import System modules\n-import time\n _multiprocess_shared_ = True\n \n+\n class TestPrimaryStorageServices(cloudstackTestCase):\n \n     def setUp(self):\n@@ -49,54 +47,51 @@ def setUp(self):\n \n     def tearDown(self):\n         try:\n-            #Clean up, terminate the created templates\n+            # Clean up, terminate the created templates\n             cleanup_resources(self.apiclient, self.cleanup)\n \n         except Exception as e:\n             raise Exception(\"Warning: Exception during cleanup : %s\" % e)\n         return\n \n-    @attr(tags = [\"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n+    @attr(tags=[\"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n     def test_01_primary_storage_nfs(self):\n         \"\"\"Test primary storage pools - XEN, KVM, VMWare. Not Supported for hyperv\n         \"\"\"\n \n         if self.hypervisor.lower() in [\"hyperv\"]:\n             raise self.skipTest(\"NFS primary storage not supported for Hyper-V\")\n \n-\n         # Validate the following:\n         # 1. List Clusters\n         # 2. verify that the cluster is in 'Enabled' allocation state\n         # 3. verify that the host is added successfully and\n         #    in Up state with listHosts api response\n \n-        #Create NFS storage pools with on XEN/KVM/VMWare clusters\n-\n+        # Create NFS storage pools with on XEN/KVM/VMWare clusters\n \n         clusters = list_clusters(\n             self.apiclient,\n             zoneid=self.zone.id\n         )\n-        assert isinstance(clusters,list) and len(clusters)>0\n+        assert isinstance(clusters, list) and len(clusters) > 0\n         for cluster in clusters:\n-\n-            #Host should be present before adding primary storage\n+            # Host should be present before adding primary storage\n             list_hosts_response = list_hosts(\n-                                             self.apiclient,\n-                                             clusterid=cluster.id\n-                                             )\n+                self.apiclient,\n+                clusterid=cluster.id\n+            )\n             self.assertEqual(\n-                            isinstance(list_hosts_response, list),\n-                            True,\n-                            \"Check list response returns a valid list\"\n-                        )\n+                isinstance(list_hosts_response, list),\n+                True,\n+                \"Check list response returns a valid list\"\n+            )\n \n             self.assertNotEqual(\n-                        len(list_hosts_response),\n-                        0,\n-                        \"Check list Hosts in the cluster: \" + cluster.name\n-                        )\n+                len(list_hosts_response),\n+                0,\n+                \"Check list Hosts in the cluster: \" + cluster.name\n+            )\n \n             storage = StoragePool.create(self.apiclient,\n                                          self.services[\"nfs\"],\n@@ -112,53 +107,52 @@ def test_01_primary_storage_nfs(self):\n                 storage.state,\n                 'Up',\n                 \"Check primary storage state \"\n-                )\n+            )\n \n             self.assertEqual(\n                 storage.type,\n                 'NetworkFilesystem',\n                 \"Check storage pool type \"\n-                )\n+            )\n \n-            #Verify List Storage pool Response has newly added storage pool\n+            # Verify List Storage pool Response has newly added storage pool\n             storage_pools_response = list_storage_pools(\n-                                                        self.apiclient,\n-                                                        id=storage.id,\n-                                                        )\n+                self.apiclient,\n+                id=storage.id,\n+            )\n             self.assertEqual(\n-                            isinstance(storage_pools_response, list),\n-                            True,\n-                            \"Check list response returns a valid list\"\n-                        )\n+                isinstance(storage_pools_response, list),\n+                True,\n+                \"Check list response returns a valid list\"\n+            )\n             self.assertNotEqual(\n-                            len(storage_pools_response),\n-                            0,\n-                            \"Check list Hosts response\"\n-                        )\n+                len(storage_pools_response),\n+                0,\n+                \"Check list Hosts response\"\n+            )\n \n             storage_response = storage_pools_response[0]\n             self.assertEqual(\n-                    storage_response.id,\n-                    storage.id,\n-                    \"Check storage pool ID\"\n-                    )\n+                storage_response.id,\n+                storage.id,\n+                \"Check storage pool ID\"\n+            )\n             self.assertEqual(\n-                    storage.type,\n-                    storage_response.type,\n-                    \"Check storage pool type \"\n-                )\n+                storage.type,\n+                storage_response.type,\n+                \"Check storage pool type \"\n+            )\n             # Call cleanup for reusing primary storage\n             cleanup_resources(self.apiclient, self.cleanup)\n             self.cleanup = []\n             return\n \n-\n-    @attr(tags = [\"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"true\")\n+    @attr(tags=[\"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"true\")\n     def test_01_primary_storage_iscsi(self):\n         \"\"\"Test primary storage pools - XEN. Not Supported for kvm,hyperv,vmware\n         \"\"\"\n \n-        if self.hypervisor.lower() in [\"kvm\",\"hyperv\", \"vmware\", \"lxc\"]:\n+        if self.hypervisor.lower() in [\"kvm\", \"hyperv\", \"vmware\", \"lxc\"]:\n             raise self.skipTest(\"iscsi primary storage not supported on kvm, VMWare, Hyper-V, or LXC\")\n \n         if not self.services[\"configurableData\"][\"iscsi\"][\"url\"]:\n@@ -175,26 +169,24 @@ def test_01_primary_storage_iscsi(self):\n             self.apiclient,\n             zoneid=self.zone.id\n         )\n-        assert isinstance(clusters,list) and len(clusters)>0\n+        assert isinstance(clusters, list) and len(clusters) > 0\n         for cluster in clusters:\n-\n-            #Host should be present before adding primary storage\n+            # Host should be present before adding primary storage\n             list_hosts_response = list_hosts(\n-                                             self.apiclient,\n-                                             clusterid=cluster.id\n-                                             )\n+                self.apiclient,\n+                clusterid=cluster.id\n+            )\n             self.assertEqual(\n-                            isinstance(list_hosts_response, list),\n-                            True,\n-                            \"Check list response returns a valid list\"\n-                        )\n+                isinstance(list_hosts_response, list),\n+                True,\n+                \"Check list response returns a valid list\"\n+            )\n \n             self.assertNotEqual(\n-                        len(list_hosts_response),\n-                        0,\n-                        \"Check list Hosts in the cluster: \" + cluster.name\n-                        )\n-\n+                len(list_hosts_response),\n+                0,\n+                \"Check list Hosts in the cluster: \" + cluster.name\n+            )\n \n             storage = StoragePool.create(self.apiclient,\n                                          self.services[\"configurableData\"][\"iscsi\"],\n@@ -210,99 +202,97 @@ def test_01_primary_storage_iscsi(self):\n                 storage.state,\n                 'Up',\n                 \"Check primary storage state \"\n-                )\n+            )\n \n             self.assertEqual(\n                 storage.type,\n                 'IscsiLUN',\n                 \"Check storage pool type \"\n-                )\n+            )\n \n-            #Verify List Storage pool Response has newly added storage pool\n+            # Verify List Storage pool Response has newly added storage pool\n             storage_pools_response = list_storage_pools(\n-                                                        self.apiclient,\n-                                                        id=storage.id,\n-                                                        )\n+                self.apiclient,\n+                id=storage.id,\n+            )\n             self.assertEqual(\n-                            isinstance(storage_pools_response, list),\n-                            True,\n-                            \"Check list response returns a valid list\"\n-                        )\n+                isinstance(storage_pools_response, list),\n+                True,\n+                \"Check list response returns a valid list\"\n+            )\n             self.assertNotEqual(\n-                            len(storage_pools_response),\n-                            0,\n-                            \"Check list Hosts response\"\n-                        )\n+                len(storage_pools_response),\n+                0,\n+                \"Check list Hosts response\"\n+            )\n \n             storage_response = storage_pools_response[0]\n             self.assertEqual(\n-                    storage_response.id,\n-                    storage.id,\n-                    \"Check storage pool ID\"\n-                    )\n+                storage_response.id,\n+                storage.id,\n+                \"Check storage pool ID\"\n+            )\n             self.assertEqual(\n-                    storage.type,\n-                    storage_response.type,\n-                    \"Check storage pool type \"\n-                )\n+                storage.type,\n+                storage_response.type,\n+                \"Check storage pool type \"\n+            )\n             # Call cleanup for reusing primary storage\n             cleanup_resources(self.apiclient, self.cleanup)\n             self.cleanup = []\n \n         return\n \n-    @attr(tags = [\"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n+    @attr(tags=[\"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n     def test_01_add_primary_storage_disabled_host(self):\n         \"\"\"Test add primary storage pool with disabled host\n         \"\"\"\n \n-        #Disable a host\n+        # Disable a host\n         clusters = list_clusters(\n             self.apiclient,\n             zoneid=self.zone.id\n         )\n-        assert isinstance(clusters,list) and len(clusters)>0\n+        assert isinstance(clusters, list) and len(clusters) > 0\n         for cluster in clusters:\n \n             list_hosts_response = list_hosts(\n                 self.apiclient,\n                 clusterid=cluster.id,\n                 type=\"Routing\"\n             )\n-            assert isinstance(list_hosts_response,list)\n+            assert isinstance(list_hosts_response, list)\n             if len(list_hosts_response) < 2:\n                 continue\n             selected_cluster = cluster\n             selected_host = list_hosts_response[0]\n             Host.update(self.apiclient, id=selected_host.id, allocationstate=\"Disable\")\n \n-\n-            #create a pool\n+            # create a pool\n             storage_pool_2 = StoragePool.create(\n                 self.apiclient,\n                 self.services[\"nfs2\"],\n                 clusterid=selected_cluster.id,\n                 zoneid=self.zone.id,\n                 podid=self.pod.id\n             )\n-            #self.cleanup.append(storage_pool_2)\n+            # self.cleanup.append(storage_pool_2)\n \n-            #Enable host and disable others\n+            # Enable host and disable others\n             Host.update(self.apiclient, id=selected_host.id, allocationstate=\"Enable\")\n-            for host in list_hosts_response :\n-                if(host.id == selected_host.id) :\n+            for host in list_hosts_response:\n+                if (host.id == selected_host.id):\n                     continue\n                 Host.update(self.apiclient, id=host.id, allocationstate=\"Disable\")\n \n-\n-            #put other pools in maintenance\n-            storage_pool_list = StoragePool.list(self.apiclient, zoneid = self.zone.id)\n-            for pool in storage_pool_list :\n-                if(pool.id == storage_pool_2.id) :\n+            # put other pools in maintenance\n+            storage_pool_list = StoragePool.list(self.apiclient, zoneid=self.zone.id)\n+            for pool in storage_pool_list:\n+                if (pool.id == storage_pool_2.id):\n                     continue\n-                StoragePool.update(self.apiclient,id=pool.id, enabled=False)\n+                StoragePool.update(self.apiclient, id=pool.id, enabled=False)\n \n-            #deployvm\n+            # deployvm\n             try:\n                 # Create Account\n                 account = Account.create(\n@@ -329,20 +319,20 @@ def test_01_add_primary_storage_disabled_host(self):\n                 self.cleanup.append(self.virtual_machine)\n                 self.cleanup.append(account)\n             finally:\n-                #cancel maintenance\n-                for pool in storage_pool_list :\n-                    if(pool.id == storage_pool_2.id) :\n+                # cancel maintenance\n+                for pool in storage_pool_list:\n+                    if (pool.id == storage_pool_2.id):\n                         continue\n-                    StoragePool.update(self.apiclient,id=pool.id, enabled=True)\n-                #Enable all hosts\n-                for host in list_hosts_response :\n-                    if(host.id == selected_host.id) :\n+                    StoragePool.update(self.apiclient, id=pool.id, enabled=True)\n+                # Enable all hosts\n+                for host in list_hosts_response:\n+                    if (host.id == selected_host.id):\n                         continue\n                     Host.update(self.apiclient, id=host.id, allocationstate=\"Enable\")\n \n                 cleanup_resources(self.apiclient, self.cleanup)\n                 self.cleanup = []\n-                StoragePool.enableMaintenance(self.apiclient,storage_pool_2.id)\n+                StoragePool.enableMaintenance(self.apiclient, storage_pool_2.id)\n                 time.sleep(30);\n                 cmd = deleteStoragePool.deleteStoragePoolCmd()\n                 cmd.id = storage_pool_2.id\n@@ -355,21 +345,23 @@ def test_01_add_primary_storage_disabled_host(self):\n class StorageTagsServices:\n     \"\"\"Test Storage Tags Data Class.\n     \"\"\"\n+\n     def __init__(self):\n         self.storage_tags = {\n-            \"a\" : \"NFS-A\",\n-            \"b\" : \"NFS-B\"\n+            \"a\": \"NFS-A\",\n+            \"b\": \"NFS-B\"\n         }\n-    \n+\n+\n class TestStorageTags(cloudstackTestCase):\n-    \n+\n     @classmethod\n     def setUpClass(cls):\n         cls.logger = logging.getLogger('TestStorageTags')\n         cls.stream_handler = logging.StreamHandler()\n         cls.logger.setLevel(logging.DEBUG)\n         cls.logger.addHandler(cls.stream_handler)\n-        \n+\n         test_case = super(TestStorageTags, cls)\n         testClient = test_case.getClsTestClient()\n         cls.config = test_case.getClsConfig()\n@@ -383,36 +375,35 @@ def setUpClass(cls):\n         cls.services[\"virtual_machine\"][\"zoneid\"] = cls.zone.id\n         cls.services[\"virtual_machine\"][\"template\"] = cls.template.id\n         cls.services[\"storage_tags\"] = StorageTagsServices().storage_tags\n-        \n+\n         cls.hypervisorNotSupported = False\n         if cls.hypervisor.lower() in [\"hyperv\"]:\n             cls.hypervisorNotSupported = True\n         cls._cleanup = []\n-        \n+\n         if not cls.hypervisorNotSupported:\n-            \n             cls.clusters = list_clusters(\n                 cls.apiclient,\n                 zoneid=cls.zone.id\n             )\n             assert isinstance(cls.clusters, list) and len(cls.clusters) > 0\n-    \n+\n             # Create PS with Storage Tag\n             cls.storage_pool_1 = StoragePool.create(cls.apiclient,\n-                                         cls.services[\"nfs\"],\n-                                         clusterid=cls.clusters[0].id,\n-                                         zoneid=cls.zone.id,\n-                                         podid=cls.pod.id,\n-                                         tags=cls.services[\"storage_tags\"][\"a\"]\n-            )\n-            #PS not appended to _cleanup, it is removed on tearDownClass before cleaning up resources\n+                                                    cls.services[\"nfs\"],\n+                                                    clusterid=cls.clusters[0].id,\n+                                                    zoneid=cls.zone.id,\n+                                                    podid=cls.pod.id,\n+                                                    tags=cls.services[\"storage_tags\"][\"a\"]\n+                                                    )\n+            # PS not appended to _cleanup, it is removed on tearDownClass before cleaning up resources\n             assert cls.storage_pool_1.state == 'Up'\n             storage_pools_response = list_storage_pools(cls.apiclient,\n                                                         id=cls.storage_pool_1.id)\n             assert isinstance(storage_pools_response, list) and len(storage_pools_response) > 0\n             storage_response = storage_pools_response[0]\n             assert storage_response.id == cls.storage_pool_1.id and storage_response.type == cls.storage_pool_1.type\n-            \n+\n             # Create Service Offerings with different Storage Tags\n             cls.service_offering_1 = ServiceOffering.create(\n                 cls.apiclient,\n@@ -426,7 +417,7 @@ def setUpClass(cls):\n                 tags=cls.services[\"storage_tags\"][\"b\"]\n             )\n             cls._cleanup.append(cls.service_offering_2)\n-            \n+\n             # Create Disk Offerings with different Storage Tags\n             cls.disk_offering_1 = DiskOffering.create(\n                 cls.apiclient,\n@@ -440,15 +431,15 @@ def setUpClass(cls):\n                 tags=cls.services[\"storage_tags\"][\"b\"]\n             )\n             cls._cleanup.append(cls.disk_offering_2)\n-            \n+\n             # Create Account\n             cls.account = Account.create(\n                 cls.apiclient,\n                 cls.services[\"account\"],\n                 domainid=cls.domain.id\n             )\n             cls._cleanup.append(cls.account)\n-            \n+\n             # Create VM-1 with using Service Offering 1\n             cls.virtual_machine_1 = VirtualMachine.create(\n                 cls.apiclient,\n@@ -461,9 +452,9 @@ def setUpClass(cls):\n                 mode=cls.zone.networktype\n             )\n             # VM-1 not appended to _cleanup, it is expunged on tearDownClass before cleaning up resources\n-            \n+\n         return\n-    \n+\n     @classmethod\n     def tearDownClass(cls):\n         try:\n@@ -484,7 +475,7 @@ def tearDownClass(cls):\n             cleanup_resources(cls.apiclient, cls._cleanup)\n         except Exception as e:\n             raise Exception(\"Cleanup failed with %s\" % e)\n-    \n+\n     def setUp(self):\n         self.dbclient = self.testClient.getDbConnection()\n         self.cleanup = []\n@@ -495,16 +486,16 @@ def tearDown(self):\n             cleanup_resources(self.apiclient, self.cleanup)\n         except Exception as e:\n             raise Exception(\"Warning: Exception during cleanup : %s\" % e)\n-    \n+\n     @attr(tags=[\"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n     @skipTestIf(\"hypervisorNotSupported\")\n     def test_01_deploy_vms_storage_tags(self):\n         \"\"\"Test Deploy VMS using different Service Offerings with Storage Tags\n         \"\"\"\n-        \n+\n         # Save cleanup size before trying to deploy VM-2\n         cleanup_size = len(self.cleanup)\n-        \n+\n         # Try deploying VM-2 using CO-2 -> Should fail to find storage and fail deployment\n         try:\n             self.virtual_machine_2 = VirtualMachine.create(\n@@ -519,32 +510,32 @@ def test_01_deploy_vms_storage_tags(self):\n             self.cleanup.append(self.virtual_machine_2)\n         except Exception as e:\n             self.debug(\"Expected exception %s: \" % e)\n-        \n+\n         self.debug(\"Asssert that vm2 was not deployed, so it couldn't be appended to cleanup\")\n         self.assertEquals(cleanup_size, len(self.cleanup))\n-        \n+\n         # Create V-1 using DO-1\n         self.volume_1 = Volume.create(\n-           self.apiclient,\n-           self.services,\n-           zoneid=self.zone.id,\n-           account=self.account.name,\n-           domainid=self.account.domainid,\n-           diskofferingid=self.disk_offering_1.id\n+            self.apiclient,\n+            self.services,\n+            zoneid=self.zone.id,\n+            account=self.account.name,\n+            domainid=self.account.domainid,\n+            diskofferingid=self.disk_offering_1.id\n         )\n         self.cleanup.append(self.volume_1)\n-        \n+\n         # Create V-2 using DO-2\n         self.volume_2 = Volume.create(\n-           self.apiclient,\n-           self.services,\n-           zoneid=self.zone.id,\n-           account=self.account.name,\n-           domainid=self.account.domainid,\n-           diskofferingid=self.disk_offering_2.id\n+            self.apiclient,\n+            self.services,\n+            zoneid=self.zone.id,\n+            account=self.account.name,\n+            domainid=self.account.domainid,\n+            diskofferingid=self.disk_offering_2.id\n         )\n         self.cleanup.append(self.volume_2)\n-        \n+\n         # Try attaching V-2 to VM-1 -> Should fail finding storage and fail attachment\n         try:\n             self.virtual_machine_1.attach_volume(\n@@ -553,7 +544,7 @@ def test_01_deploy_vms_storage_tags(self):\n             )\n         except Exception as e:\n             self.debug(\"Expected exception %s: \" % e)\n-        \n+\n         vm_1_volumes = Volume.list(\n             self.apiclient,\n             virtualmachineid=self.virtual_machine_1.id,\n@@ -562,9 +553,9 @@ def test_01_deploy_vms_storage_tags(self):\n         )\n         self.debug(\"VM-1 Volumes: %s\" % vm_1_volumes)\n         self.assertEquals(None, vm_1_volumes, \"Check that volume V-2 has not been attached to VM-1\")\n-        \n+\n         # Attach V_1 to VM_1\n-        self.virtual_machine_1.attach_volume(self.apiclient,self.volume_1)\n+        self.virtual_machine_1.attach_volume(self.apiclient, self.volume_1)\n         vm_1_volumes = Volume.list(\n             self.apiclient,\n             virtualmachineid=self.virtual_machine_1.id,\n@@ -574,74 +565,74 @@ def test_01_deploy_vms_storage_tags(self):\n         self.debug(\"VM-1 Volumes: %s\" % vm_1_volumes)\n         self.assertEquals(vm_1_volumes[0].id, self.volume_1.id, \"Check that volume V-1 has been attached to VM-1\")\n         self.virtual_machine_1.detach_volume(self.apiclient, self.volume_1)\n-        \n+\n         return\n-    \n+\n     def check_storage_pool_tag(self, poolid, tag):\n         cmd = listStorageTags.listStorageTagsCmd()\n         storage_tags_response = self.apiclient.listStorageTags(cmd)\n         pool_tags = filter(lambda x: x.poolid == poolid, storage_tags_response)\n         self.assertEquals(1, len(pool_tags), \"Check storage tags size\")\n         self.assertEquals(tag, pool_tags[0].name, \"Check storage tag on storage pool\")\n-    \n+\n     @attr(tags=[\"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n     @skipTestIf(\"hypervisorNotSupported\")\n     def test_02_edit_primary_storage_tags(self):\n         \"\"\" Test Edit Storage Tags\n         \"\"\"\n-        \n+\n         qresultset = self.dbclient.execute(\n             \"select id from storage_pool where uuid = '%s';\"\n             % str(self.storage_pool_1.id)\n         )\n         self.assertEquals(1, len(qresultset), \"Check DB Query result set\")\n         qresult = qresultset[0]\n         storage_pool_db_id = qresult[0]\n-        \n+\n         self.check_storage_pool_tag(storage_pool_db_id, self.services[\"storage_tags\"][\"a\"])\n-        \n+\n         # Update Storage Tag\n         StoragePool.update(\n             self.apiclient,\n             id=self.storage_pool_1.id,\n             tags=self.services[\"storage_tags\"][\"b\"]\n         )\n-        \n+\n         self.check_storage_pool_tag(storage_pool_db_id, self.services[\"storage_tags\"][\"b\"])\n-        \n+\n         # Revert Storage Tag\n         StoragePool.update(\n             self.apiclient,\n             id=self.storage_pool_1.id,\n             tags=self.services[\"storage_tags\"][\"a\"]\n         )\n-        \n+\n         self.check_storage_pool_tag(storage_pool_db_id, self.services[\"storage_tags\"][\"a\"])\n-        \n+\n         return\n-    \n+\n     @attr(tags=[\"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n     @skipTestIf(\"hypervisorNotSupported\")\n     def test_03_migration_options_storage_tags(self):\n         \"\"\" Test Volume migration options for Storage Pools with different Storage Tags\n         \"\"\"\n-        \n+\n         # Create PS-2 using Storage Tag\n         storage_pool_2 = StoragePool.create(self.apiclient,\n-                                             self.services[\"nfs2\"],\n-                                             clusterid=self.clusters[0].id,\n-                                             zoneid=self.zone.id,\n-                                             podid=self.pod.id,\n-                                             tags=self.services[\"storage_tags\"][\"a\"]\n-        )\n+                                            self.services[\"nfs2\"],\n+                                            clusterid=self.clusters[0].id,\n+                                            zoneid=self.zone.id,\n+                                            podid=self.pod.id,\n+                                            tags=self.services[\"storage_tags\"][\"a\"]\n+                                            )\n         self.cleanup.append(storage_pool_2)\n         assert storage_pool_2.state == 'Up'\n         storage_pools_response = list_storage_pools(self.apiclient,\n                                                     id=storage_pool_2.id)\n         assert isinstance(storage_pools_response, list) and len(storage_pools_response) > 0\n         storage_response = storage_pools_response[0]\n         assert storage_response.id == storage_pool_2.id and storage_response.type == storage_pool_2.type\n-        \n+\n         vm_1_volumes = Volume.list(\n             self.apiclient,\n             virtualmachineid=self.virtual_machine_1.id,\n@@ -667,27 +658,27 @@ def test_03_migration_options_storage_tags(self):\n             self.apiclient,\n             id=vol.id\n         )\n-        pools_suitable = filter(lambda p : p.suitableformigration, pools_response)\n-        \n+        pools_suitable = filter(lambda p: p.suitableformigration, pools_response)\n+\n         self.debug(\"Suitable storage pools found: %s\" % len(pools_suitable))\n         self.assertEquals(1, len(pools_suitable), \"Check that there is only one item on the list\")\n         self.assertEquals(pools_suitable[0].id, storage_pool_2.id, \"Check that PS-2 is the migration option for volume\")\n-        \n+\n         # Update PS-2 Storage Tags\n         StoragePool.update(\n             self.apiclient,\n             id=storage_pool_2.id,\n             tags=self.services[\"storage_tags\"][\"b\"]\n         )\n-        \n+\n         # Check migration options for volume after updating PS-2 Storage Tags\n         pools_response = StoragePool.listForMigration(\n             self.apiclient,\n             id=vol.id\n         )\n-        pools_suitable = filter(lambda p : p.suitableformigration, pools_response)\n-        \n+        pools_suitable = filter(lambda p: p.suitableformigration, pools_response)\n+\n         self.debug(\"Suitable storage pools found: %s\" % len(pools_suitable))\n         self.assertEquals(0, len(pools_suitable), \"Check that there is no migration option for volume\")\n-        \n-        return\n\\ No newline at end of file\n+\n+        return",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/test/integration/smoke/test_primary_storage.py",
                "sha": "d397c773b12ba5417428d8fb5e9f1e08a1053d31",
                "status": "modified"
            },
            {
                "additions": 473,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/test/integration/smoke/test_vm_life_cycle.py",
                "changes": 732,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/test/integration/smoke/test_vm_life_cycle.py?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 259,
                "filename": "test/integration/smoke/test_vm_life_cycle.py",
                "patch": "@@ -16,36 +16,40 @@\n # under the License.\n \"\"\" BVT tests for Virtual Machine Life Cycle\n \"\"\"\n-#Import Local Modules\n+# Import Local Modules\n from marvin.cloudstackTestCase import cloudstackTestCase\n from marvin.cloudstackAPI import (recoverVirtualMachine,\n                                   destroyVirtualMachine,\n                                   attachIso,\n                                   detachIso,\n                                   provisionCertificate,\n-                                  updateConfiguration)\n-from marvin.lib.utils import *\n-\n+                                  updateConfiguration,\n+                                  migrateVirtualMachine)\n+from marvin.lib.utils import (cleanup_resources,\n+                              validateList,\n+                              SshClient)\n from marvin.lib.base import (Account,\n                              ServiceOffering,\n                              VirtualMachine,\n                              Host,\n                              Iso,\n                              Router,\n                              Configurations,\n+                             StoragePool,\n                              Volume,\n                              DiskOffering)\n from marvin.lib.common import (get_domain,\n-                                get_zone,\n-                                get_template,\n+                               get_zone,\n+                               get_template,\n                                list_hosts)\n from marvin.codes import FAILED, PASS\n from nose.plugins.attrib import attr\n-#Import System modules\n+# Import System modules\n import time\n-import re\n \n _multiprocess_shared_ = True\n+\n+\n class TestDeployVM(cloudstackTestCase):\n \n     @classmethod\n@@ -59,8 +63,8 @@ def setUpClass(cls):\n         cls.zone = get_zone(cls.apiclient, testClient.getZoneForTests())\n         cls.services['mode'] = cls.zone.networktype\n \n-        #If local storage is enabled, alter the offerings to use localstorage\n-        #this step is needed for devcloud\n+        # If local storage is enabled, alter the offerings to use localstorage\n+        # this step is needed for devcloud\n         if cls.zone.localstorageenabled == True:\n             cls.services[\"service_offerings\"][\"tiny\"][\"storagetype\"] = 'local'\n             cls.services[\"service_offerings\"][\"small\"][\"storagetype\"] = 'local'\n@@ -118,56 +122,54 @@ def setUp(self):\n         self.dbclient = self.testClient.getDbConnection()\n         self.cleanup = []\n \n-\n-    @attr(tags = [\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n+    @attr(tags=[\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n     def test_deploy_vm(self):\n         \"\"\"Test Deploy Virtual Machine\n         \"\"\"\n         # Validate the following:\n         # 1. Virtual Machine is accessible via SSH\n         # 2. listVirtualMachines returns accurate information\n         list_vm_response = VirtualMachine.list(\n-                                                 self.apiclient,\n-                                                 id=self.virtual_machine.id\n-                                                 )\n+            self.apiclient,\n+            id=self.virtual_machine.id\n+        )\n \n         self.debug(\n-                \"Verify listVirtualMachines response for virtual machine: %s\" \\\n-                % self.virtual_machine.id\n-            )\n+            \"Verify listVirtualMachines response for virtual machine: %s\" \\\n+            % self.virtual_machine.id\n+        )\n         self.assertEqual(\n-                            isinstance(list_vm_response, list),\n-                            True,\n-                            \"Check list response returns a valid list\"\n-                        )\n+            isinstance(list_vm_response, list),\n+            True,\n+            \"Check list response returns a valid list\"\n+        )\n         self.assertNotEqual(\n-                            len(list_vm_response),\n-                            0,\n-                            \"Check VM available in List Virtual Machines\"\n-                        )\n+            len(list_vm_response),\n+            0,\n+            \"Check VM available in List Virtual Machines\"\n+        )\n         vm_response = list_vm_response[0]\n         self.assertEqual(\n \n-                            vm_response.id,\n-                            self.virtual_machine.id,\n-                            \"Check virtual machine id in listVirtualMachines\"\n-                        )\n+            vm_response.id,\n+            self.virtual_machine.id,\n+            \"Check virtual machine id in listVirtualMachines\"\n+        )\n         self.assertEqual(\n-                    vm_response.name,\n-                    self.virtual_machine.name,\n-                    \"Check virtual machine name in listVirtualMachines\"\n-                    )\n+            vm_response.name,\n+            self.virtual_machine.name,\n+            \"Check virtual machine name in listVirtualMachines\"\n+        )\n         self.assertEqual(\n             vm_response.state,\n             'Running',\n-             msg=\"VM is not in Running state\"\n+            msg=\"VM is not in Running state\"\n         )\n         return\n \n-\n-    @attr(tags = [\"advanced\"], required_hardware=\"false\")\n+    @attr(tags=[\"advanced\"], required_hardware=\"false\")\n     def test_advZoneVirtualRouter(self):\n-        #TODO: SIMENH: duplicate test, remove it\n+        # TODO: SIMENH: duplicate test, remove it\n         \"\"\"\n         Test advanced zone virtual router\n         1. Is Running\n@@ -176,35 +178,34 @@ def test_advZoneVirtualRouter(self):\n         @return:\n         \"\"\"\n         routers = Router.list(self.apiclient, account=self.account.name)\n-        self.assertTrue(len(routers) > 0, msg = \"No virtual router found\")\n+        self.assertTrue(len(routers) > 0, msg=\"No virtual router found\")\n         router = routers[0]\n \n         self.assertEqual(router.state, 'Running', msg=\"Router is not in running state\")\n         self.assertEqual(router.account, self.account.name, msg=\"Router does not belong to the account\")\n \n-        #Has linklocal, public and guest ips\n+        # Has linklocal, public and guest ips\n         self.assertIsNotNone(router.linklocalip, msg=\"Router has no linklocal ip\")\n         self.assertIsNotNone(router.publicip, msg=\"Router has no public ip\")\n         self.assertIsNotNone(router.guestipaddress, msg=\"Router has no guest ip\")\n \n-\n-    @attr(mode = [\"basic\"], required_hardware=\"false\")\n+    @attr(mode=[\"basic\"], required_hardware=\"false\")\n     def test_basicZoneVirtualRouter(self):\n-        #TODO: SIMENH: duplicate test, remove it\n+        # TODO: SIMENH: duplicate test, remove it\n         \"\"\"\n         Tests for basic zone virtual router\n         1. Is Running\n         2. is in the account the VM was deployed in\n         @return:\n         \"\"\"\n         routers = Router.list(self.apiclient, account=self.account.name)\n-        self.assertTrue(len(routers) > 0, msg = \"No virtual router found\")\n+        self.assertTrue(len(routers) > 0, msg=\"No virtual router found\")\n         router = routers[0]\n \n         self.assertEqual(router.state, 'Running', msg=\"Router is not in running state\")\n         self.assertEqual(router.account, self.account.name, msg=\"Router does not belong to the account\")\n \n-    @attr(tags = ['advanced','basic','sg'], required_hardware=\"false\")\n+    @attr(tags=['advanced', 'basic', 'sg'], required_hardware=\"false\")\n     def test_deploy_vm_multiple(self):\n         \"\"\"Test Multiple Deploy Virtual Machine\n \n@@ -236,7 +237,8 @@ def test_deploy_vm_multiple(self):\n \n         list_vms = VirtualMachine.list(self.apiclient, ids=[virtual_machine1.id, virtual_machine2.id], listAll=True)\n         self.debug(\n-            \"Verify listVirtualMachines response for virtual machines: %s, %s\" % (virtual_machine1.id, virtual_machine2.id)\n+            \"Verify listVirtualMachines response for virtual machines: %s, %s\" % (\n+                virtual_machine1.id, virtual_machine2.id)\n         )\n         self.assertEqual(\n             isinstance(list_vms, list),\n@@ -271,18 +273,18 @@ def setUpClass(cls):\n         cls.zone = get_zone(cls.apiclient, cls.testClient.getZoneForTests())\n         cls.services['mode'] = cls.zone.networktype\n \n-        #if local storage is enabled, alter the offerings to use localstorage\n-        #this step is needed for devcloud\n+        # if local storage is enabled, alter the offerings to use localstorage\n+        # this step is needed for devcloud\n         if cls.zone.localstorageenabled == True:\n             cls.services[\"service_offerings\"][\"tiny\"][\"storagetype\"] = 'local'\n             cls.services[\"service_offerings\"][\"small\"][\"storagetype\"] = 'local'\n             cls.services[\"service_offerings\"][\"medium\"][\"storagetype\"] = 'local'\n \n         template = get_template(\n-                            cls.apiclient,\n-                            cls.zone.id,\n-                            cls.services[\"ostype\"]\n-                            )\n+            cls.apiclient,\n+            cls.zone.id,\n+            cls.services[\"ostype\"]\n+        )\n         if template == FAILED:\n             assert False, \"get_template() failed to return template with description %s\" % cls.services[\"ostype\"]\n \n@@ -294,50 +296,50 @@ def setUpClass(cls):\n \n         # Create VMs, NAT Rules etc\n         cls.account = Account.create(\n-                            cls.apiclient,\n-                            cls.services[\"account\"],\n-                            domainid=domain.id\n-                            )\n+            cls.apiclient,\n+            cls.services[\"account\"],\n+            domainid=domain.id\n+        )\n \n         cls.small_offering = ServiceOffering.create(\n-                                    cls.apiclient,\n-                                    cls.services[\"service_offerings\"][\"small\"]\n-                                    )\n+            cls.apiclient,\n+            cls.services[\"service_offerings\"][\"small\"]\n+        )\n \n         cls.medium_offering = ServiceOffering.create(\n-                                    cls.apiclient,\n-                                    cls.services[\"service_offerings\"][\"medium\"]\n-                                    )\n-        #create small and large virtual machines\n+            cls.apiclient,\n+            cls.services[\"service_offerings\"][\"medium\"]\n+        )\n+        # create small and large virtual machines\n         cls.small_virtual_machine = VirtualMachine.create(\n-                                        cls.apiclient,\n-                                        cls.services[\"small\"],\n-                                        accountid=cls.account.name,\n-                                        domainid=cls.account.domainid,\n-                                        serviceofferingid=cls.small_offering.id,\n-                                        mode=cls.services[\"mode\"]\n-                                        )\n+            cls.apiclient,\n+            cls.services[\"small\"],\n+            accountid=cls.account.name,\n+            domainid=cls.account.domainid,\n+            serviceofferingid=cls.small_offering.id,\n+            mode=cls.services[\"mode\"]\n+        )\n         cls.medium_virtual_machine = VirtualMachine.create(\n-                                       cls.apiclient,\n-                                       cls.services[\"small\"],\n-                                       accountid=cls.account.name,\n-                                       domainid=cls.account.domainid,\n-                                       serviceofferingid=cls.medium_offering.id,\n-                                       mode=cls.services[\"mode\"]\n-                                    )\n+            cls.apiclient,\n+            cls.services[\"small\"],\n+            accountid=cls.account.name,\n+            domainid=cls.account.domainid,\n+            serviceofferingid=cls.medium_offering.id,\n+            mode=cls.services[\"mode\"]\n+        )\n         cls.virtual_machine = VirtualMachine.create(\n-                                        cls.apiclient,\n-                                        cls.services[\"small\"],\n-                                        accountid=cls.account.name,\n-                                        domainid=cls.account.domainid,\n-                                        serviceofferingid=cls.small_offering.id,\n-                                        mode=cls.services[\"mode\"]\n-                                        )\n+            cls.apiclient,\n+            cls.services[\"small\"],\n+            accountid=cls.account.name,\n+            domainid=cls.account.domainid,\n+            serviceofferingid=cls.small_offering.id,\n+            mode=cls.services[\"mode\"]\n+        )\n         cls._cleanup = [\n-                        cls.small_offering,\n-                        cls.medium_offering,\n-                        cls.account\n-                        ]\n+            cls.small_offering,\n+            cls.medium_offering,\n+            cls.account\n+        ]\n \n     @classmethod\n     def tearDownClass(cls):\n@@ -355,14 +357,13 @@ def setUp(self):\n \n     def tearDown(self):\n         try:\n-            #Clean up, terminate the created ISOs\n+            # Clean up, terminate the created ISOs\n             cleanup_resources(self.apiclient, self.cleanup)\n         except Exception as e:\n             raise Exception(\"Warning: Exception during cleanup : %s\" % e)\n         return\n \n-\n-    @attr(tags = [\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n+    @attr(tags=[\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n     def test_01_stop_vm(self):\n         \"\"\"Test Stop Virtual Machine\n         \"\"\"\n@@ -377,8 +378,7 @@ def test_01_stop_vm(self):\n             self.fail(\"Failed to stop VM: %s\" % e)\n         return\n \n-\n-    @attr(tags = [\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n+    @attr(tags=[\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n     def test_01_stop_vm_forced(self):\n         \"\"\"Test Force Stop Virtual Machine\n         \"\"\"\n@@ -388,30 +388,29 @@ def test_01_stop_vm_forced(self):\n             self.fail(\"Failed to stop VM: %s\" % e)\n \n         list_vm_response = VirtualMachine.list(\n-                                            self.apiclient,\n-                                            id=self.small_virtual_machine.id\n-                                            )\n+            self.apiclient,\n+            id=self.small_virtual_machine.id\n+        )\n         self.assertEqual(\n-                            isinstance(list_vm_response, list),\n-                            True,\n-                            \"Check list response returns a valid list\"\n-                        )\n+            isinstance(list_vm_response, list),\n+            True,\n+            \"Check list response returns a valid list\"\n+        )\n \n         self.assertNotEqual(\n-                            len(list_vm_response),\n-                            0,\n-                            \"Check VM avaliable in List Virtual Machines\"\n-                        )\n+            len(list_vm_response),\n+            0,\n+            \"Check VM avaliable in List Virtual Machines\"\n+        )\n \n         self.assertEqual(\n-                            list_vm_response[0].state,\n-                            \"Stopped\",\n-                            \"Check virtual machine is in stopped state\"\n-                        )\n+            list_vm_response[0].state,\n+            \"Stopped\",\n+            \"Check virtual machine is in stopped state\"\n+        )\n         return\n \n-\n-    @attr(tags = [\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n+    @attr(tags=[\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n     def test_02_start_vm(self):\n         \"\"\"Test Start Virtual Machine\n         \"\"\"\n@@ -423,33 +422,33 @@ def test_02_start_vm(self):\n         self.small_virtual_machine.start(self.apiclient)\n \n         list_vm_response = VirtualMachine.list(\n-                                            self.apiclient,\n-                                            id=self.small_virtual_machine.id\n-                                            )\n+            self.apiclient,\n+            id=self.small_virtual_machine.id\n+        )\n         self.assertEqual(\n-                            isinstance(list_vm_response, list),\n-                            True,\n-                            \"Check list response returns a valid list\"\n-                        )\n+            isinstance(list_vm_response, list),\n+            True,\n+            \"Check list response returns a valid list\"\n+        )\n \n         self.assertNotEqual(\n-                            len(list_vm_response),\n-                            0,\n-                            \"Check VM avaliable in List Virtual Machines\"\n-                        )\n+            len(list_vm_response),\n+            0,\n+            \"Check VM avaliable in List Virtual Machines\"\n+        )\n \n         self.debug(\n-                \"Verify listVirtualMachines response for virtual machine: %s\" \\\n-                % self.small_virtual_machine.id\n-                )\n+            \"Verify listVirtualMachines response for virtual machine: %s\" \\\n+            % self.small_virtual_machine.id\n+        )\n         self.assertEqual(\n-                            list_vm_response[0].state,\n-                            \"Running\",\n-                            \"Check virtual machine is in running state\"\n-                        )\n+            list_vm_response[0].state,\n+            \"Running\",\n+            \"Check virtual machine is in running state\"\n+        )\n         return\n \n-    @attr(tags = [\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n+    @attr(tags=[\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n     def test_03_reboot_vm(self):\n         \"\"\"Test Reboot Virtual Machine\n         \"\"\"\n@@ -463,30 +462,29 @@ def test_03_reboot_vm(self):\n         self.small_virtual_machine.reboot(self.apiclient)\n \n         list_vm_response = VirtualMachine.list(\n-                                            self.apiclient,\n-                                            id=self.small_virtual_machine.id\n-                                            )\n+            self.apiclient,\n+            id=self.small_virtual_machine.id\n+        )\n         self.assertEqual(\n-                            isinstance(list_vm_response, list),\n-                            True,\n-                            \"Check list response returns a valid list\"\n-                        )\n+            isinstance(list_vm_response, list),\n+            True,\n+            \"Check list response returns a valid list\"\n+        )\n \n         self.assertNotEqual(\n-                            len(list_vm_response),\n-                            0,\n-                            \"Check VM avaliable in List Virtual Machines\"\n-                        )\n+            len(list_vm_response),\n+            0,\n+            \"Check VM available in List Virtual Machines\"\n+        )\n \n         self.assertEqual(\n-                            list_vm_response[0].state,\n-                            \"Running\",\n-                            \"Check virtual machine is in running state\"\n-                        )\n+            list_vm_response[0].state,\n+            \"Running\",\n+            \"Check virtual machine is in running state\"\n+        )\n         return\n \n-\n-    @attr(tags = [\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n+    @attr(tags=[\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n     def test_06_destroy_vm(self):\n         \"\"\"Test destroy Virtual Machine\n         \"\"\"\n@@ -500,31 +498,31 @@ def test_06_destroy_vm(self):\n         self.small_virtual_machine.delete(self.apiclient, expunge=False)\n \n         list_vm_response = VirtualMachine.list(\n-                                            self.apiclient,\n-                                            id=self.small_virtual_machine.id\n-                                            )\n+            self.apiclient,\n+            id=self.small_virtual_machine.id\n+        )\n         self.assertEqual(\n-                            isinstance(list_vm_response, list),\n-                            True,\n-                            \"Check list response returns a valid list\"\n-                        )\n+            isinstance(list_vm_response, list),\n+            True,\n+            \"Check list response returns a valid list\"\n+        )\n \n         self.assertNotEqual(\n-                            len(list_vm_response),\n-                            0,\n-                            \"Check VM avaliable in List Virtual Machines\"\n-                        )\n+            len(list_vm_response),\n+            0,\n+            \"Check VM avaliable in List Virtual Machines\"\n+        )\n \n         self.assertEqual(\n-                            list_vm_response[0].state,\n-                            \"Destroyed\",\n-                            \"Check virtual machine is in destroyed state\"\n-                        )\n+            list_vm_response[0].state,\n+            \"Destroyed\",\n+            \"Check virtual machine is in destroyed state\"\n+        )\n         return\n \n-    @attr(tags = [\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n+    @attr(tags=[\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n     def test_07_restore_vm(self):\n-        #TODO: SIMENH: add another test the data on the restored VM.\n+        # TODO: SIMENH: add another test the data on the restored VM.\n         \"\"\"Test recover Virtual Machine\n         \"\"\"\n \n@@ -540,30 +538,30 @@ def test_07_restore_vm(self):\n         self.apiclient.recoverVirtualMachine(cmd)\n \n         list_vm_response = VirtualMachine.list(\n-                                            self.apiclient,\n-                                            id=self.small_virtual_machine.id\n-                                            )\n+            self.apiclient,\n+            id=self.small_virtual_machine.id\n+        )\n         self.assertEqual(\n-                            isinstance(list_vm_response, list),\n-                            True,\n-                            \"Check list response returns a valid list\"\n-                        )\n+            isinstance(list_vm_response, list),\n+            True,\n+            \"Check list response returns a valid list\"\n+        )\n \n         self.assertNotEqual(\n-                            len(list_vm_response),\n-                            0,\n-                            \"Check VM avaliable in List Virtual Machines\"\n-                        )\n+            len(list_vm_response),\n+            0,\n+            \"Check VM avaliable in List Virtual Machines\"\n+        )\n \n         self.assertEqual(\n-                            list_vm_response[0].state,\n-                            \"Stopped\",\n-                            \"Check virtual machine is in Stopped state\"\n-                        )\n+            list_vm_response[0].state,\n+            \"Stopped\",\n+            \"Check virtual machine is in Stopped state\"\n+        )\n \n         return\n \n-    @attr(tags = [\"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\", \"multihost\"], required_hardware=\"false\")\n+    @attr(tags=[\"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\", \"multihost\"], required_hardware=\"false\")\n     def test_08_migrate_vm(self):\n         \"\"\"Test migrate VM\n         \"\"\"\n@@ -591,10 +589,10 @@ def test_08_migrate_vm(self):\n         # For XenServer and VMware, migration is possible between hosts belonging to different clusters\n         # with the help of XenMotion and Vmotion respectively.\n \n-        if self.hypervisor.lower() in [\"kvm\",\"simulator\"]:\n-            #identify suitable host\n+        if self.hypervisor.lower() in [\"kvm\", \"simulator\"]:\n+            # identify suitable host\n             clusters = [h.clusterid for h in hosts]\n-            #find hosts withe same clusterid\n+            # find hosts withe same clusterid\n             clusters = [cluster for index, cluster in enumerate(clusters) if clusters.count(cluster) > 1]\n \n             if len(clusters) <= 1:\n@@ -607,8 +605,8 @@ def test_08_migrate_vm(self):\n         target_host = suitable_hosts[0]\n         migrate_host = suitable_hosts[1]\n \n-        #deploy VM on target host\n-        self.vm_to_migrate = VirtualMachine.create(\n+        # deploy VM on target host\n+        vm_to_migrate = VirtualMachine.create(\n             self.apiclient,\n             self.services[\"small\"],\n             accountid=self.account.name,\n@@ -618,30 +616,30 @@ def test_08_migrate_vm(self):\n             hostid=target_host.id\n         )\n         self.debug(\"Migrating VM-ID: %s to Host: %s\" % (\n-                                        self.vm_to_migrate.id,\n-                                        migrate_host.id\n-                                        ))\n+            vm_to_migrate.id,\n+            migrate_host.id\n+        ))\n \n-        self.vm_to_migrate.migrate(self.apiclient, migrate_host.id)\n+        vm_to_migrate.migrate(self.apiclient, migrate_host.id)\n \n         retries_cnt = 3\n-        while retries_cnt >=0:\n+        while retries_cnt >= 0:\n             list_vm_response = VirtualMachine.list(self.apiclient,\n-                                                   id=self.vm_to_migrate.id)\n+                                                   id=vm_to_migrate.id)\n             self.assertNotEqual(\n-                                list_vm_response,\n-                                None,\n-                                \"Check virtual machine is listed\"\n-                               )\n+                list_vm_response,\n+                None,\n+                \"Check virtual machine is listed\"\n+            )\n             vm_response = list_vm_response[0]\n-            self.assertEqual(vm_response.id,self.vm_to_migrate.id,\"Check virtual machine ID of migrated VM\")\n-            self.assertEqual(vm_response.hostid,migrate_host.id,\"Check destination hostID of migrated VM\")\n+            self.assertEqual(vm_response.id, vm_to_migrate.id, \"Check virtual machine ID of migrated VM\")\n+            self.assertEqual(vm_response.hostid, migrate_host.id, \"Check destination hostID of migrated VM\")\n             retries_cnt = retries_cnt - 1\n         return\n \n-    @attr(configuration = \"expunge.interval\")\n-    @attr(configuration = \"expunge.delay\")\n-    @attr(tags = [\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n+    @attr(configuration=\"expunge.interval\")\n+    @attr(configuration=\"expunge.delay\")\n+    @attr(tags=[\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n     def test_09_expunge_vm(self):\n         \"\"\"Test destroy(expunge) Virtual Machine\n         \"\"\"\n@@ -655,26 +653,26 @@ def test_09_expunge_vm(self):\n         self.apiclient.destroyVirtualMachine(cmd)\n \n         config = Configurations.list(\n-                                     self.apiclient,\n-                                     name='expunge.delay'\n-                                     )\n+            self.apiclient,\n+            name='expunge.delay'\n+        )\n \n         expunge_delay = int(config[0].value)\n         time.sleep(expunge_delay * 2)\n \n-        #VM should be destroyed unless expunge thread hasn't run\n-        #Wait for two cycles of the expunge thread\n+        # VM should be destroyed unless expunge thread hasn't run\n+        # Wait for two cycles of the expunge thread\n         config = Configurations.list(\n-                                     self.apiclient,\n-                                     name='expunge.interval'\n-                                     )\n+            self.apiclient,\n+            name='expunge.interval'\n+        )\n         expunge_cycle = int(config[0].value)\n         wait_time = expunge_cycle * 4\n         while wait_time >= 0:\n             list_vm_response = VirtualMachine.list(\n-                                                self.apiclient,\n-                                                id=self.small_virtual_machine.id\n-                                                )\n+                self.apiclient,\n+                id=self.small_virtual_machine.id\n+            )\n             if not list_vm_response:\n                 break\n             self.debug(\"Waiting for VM to expunge\")\n@@ -683,10 +681,10 @@ def test_09_expunge_vm(self):\n \n         self.debug(\"listVirtualMachines response: %s\" % list_vm_response)\n \n-        self.assertEqual(list_vm_response,None,\"Check Expunged virtual machine is in listVirtualMachines response\")\n+        self.assertEqual(list_vm_response, None, \"Check Expunged virtual machine is in listVirtualMachines response\")\n         return\n \n-    @attr(tags = [\"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"true\")\n+    @attr(tags=[\"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"true\")\n     def test_10_attachAndDetach_iso(self):\n         \"\"\"Test for attach and detach ISO to virtual machine\"\"\"\n \n@@ -702,24 +700,24 @@ def test_10_attachAndDetach_iso(self):\n             self.skipTest(\"ISOs are not supported on LXC\")\n \n         iso = Iso.create(\n-                         self.apiclient,\n-                         self.services[\"iso1\"],\n-                         account=self.account.name,\n-                         domainid=self.account.domainid\n-                         )\n+            self.apiclient,\n+            self.services[\"iso1\"],\n+            account=self.account.name,\n+            domainid=self.account.domainid\n+        )\n \n         self.debug(\"Successfully created ISO with ID: %s\" % iso.id)\n         try:\n             iso.download(self.apiclient)\n         except Exception as e:\n-            self.fail(\"Exception while downloading ISO %s: %s\"\\\n+            self.fail(\"Exception while downloading ISO %s: %s\" \\\n                       % (iso.id, e))\n \n         self.debug(\"Attach ISO with ID: %s to VM ID: %s\" % (\n-                                                    iso.id,\n-                                                    self.virtual_machine.id\n-                                                    ))\n-        #Attach ISO to virtual machine\n+            iso.id,\n+            self.virtual_machine.id\n+        ))\n+        # Attach ISO to virtual machine\n         cmd = attachIso.attachIsoCmd()\n         cmd.id = iso.id\n         cmd.virtualmachineid = self.virtual_machine.id\n@@ -729,7 +727,7 @@ def test_10_attachAndDetach_iso(self):\n             ssh_client = self.virtual_machine.get_ssh_client()\n         except Exception as e:\n             self.fail(\"SSH failed for virtual machine: %s - %s\" %\n-                                (self.virtual_machine.ipaddress, e))\n+                      (self.virtual_machine.ipaddress, e))\n \n         mount_dir = \"/mnt/tmp\"\n         cmds = \"mkdir -p %s\" % mount_dir\n@@ -750,24 +748,24 @@ def test_10_attachAndDetach_iso(self):\n \n         # Get ISO size\n         iso_response = Iso.list(\n-                                 self.apiclient,\n-                                 id=iso.id\n-                                 )\n+            self.apiclient,\n+            id=iso.id\n+        )\n         self.assertEqual(\n-                            isinstance(iso_response, list),\n-                            True,\n-                            \"Check list response returns a valid list\"\n-                        )\n+            isinstance(iso_response, list),\n+            True,\n+            \"Check list response returns a valid list\"\n+        )\n \n         try:\n-            #Unmount ISO\n+            # Unmount ISO\n             command = \"umount %s\" % mount_dir\n             ssh_client.execute(command)\n         except Exception as e:\n             self.fail(\"SSH failed for virtual machine: %s - %s\" %\n-                                (self.virtual_machine.ipaddress, e))\n+                      (self.virtual_machine.ipaddress, e))\n \n-        #Detach from VM\n+        # Detach from VM\n         cmd = detachIso.detachIsoCmd()\n         cmd.virtualmachineid = self.virtual_machine.id\n         self.apiclient.detachIso(cmd)\n@@ -776,16 +774,16 @@ def test_10_attachAndDetach_iso(self):\n             res = ssh_client.execute(c)\n         except Exception as e:\n             self.fail(\"SSH failed for virtual machine: %s - %s\" %\n-                                (self.virtual_machine.ipaddress, e))\n+                      (self.virtual_machine.ipaddress, e))\n \n         # Check if ISO is properly detached from VM (using fdisk)\n         result = self.services[\"mount\"] in str(res)\n \n         self.assertEqual(\n-                         result,\n-                         False,\n-                         \"Check if ISO is detached from virtual machine\"\n-                         )\n+            result,\n+            False,\n+            \"Check if ISO is detached from virtual machine\"\n+        )\n         return\n \n     @attr(tags = [\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n@@ -825,6 +823,7 @@ def test_11_destroy_vm_and_volumes(self):\n \n         self.assertEqual(Volume.list(self.apiclient, id=vol1.id), None, \"List response contains records when it should not\")\n \n+\n class TestSecuredVmMigration(cloudstackTestCase):\n \n     @classmethod\n@@ -842,14 +841,15 @@ def setUpClass(cls):\n         domain = get_domain(cls.apiclient)\n         cls.zone = get_zone(cls.apiclient, cls.testClient.getZoneForTests())\n         cls.services['mode'] = cls.zone.networktype\n-        cls.hostConfig = cls.config.__dict__[\"zones\"][0].__dict__[\"pods\"][0].__dict__[\"clusters\"][0].__dict__[\"hosts\"][0].__dict__\n+        cls.hostConfig = cls.config.__dict__[\"zones\"][0].__dict__[\"pods\"][0].__dict__[\"clusters\"][0].__dict__[\"hosts\"][\n+            0].__dict__\n         cls.management_ip = cls.config.__dict__[\"mgtSvr\"][0].__dict__[\"mgtSvrIp\"]\n \n         template = get_template(\n-                            cls.apiclient,\n-                            cls.zone.id,\n-                            cls.services[\"ostype\"]\n-                            )\n+            cls.apiclient,\n+            cls.zone.id,\n+            cls.services[\"ostype\"]\n+        )\n         if template == FAILED:\n             assert False, \"get_template() failed to return template with description %s\" % cls.services[\"ostype\"]\n \n@@ -861,20 +861,20 @@ def setUpClass(cls):\n \n         # Create VMs, NAT Rules etc\n         cls.account = Account.create(\n-                            cls.apiclient,\n-                            cls.services[\"account\"],\n-                            domainid=domain.id\n-                            )\n+            cls.apiclient,\n+            cls.services[\"account\"],\n+            domainid=domain.id\n+        )\n \n         cls.small_offering = ServiceOffering.create(\n-                                    cls.apiclient,\n-                                    cls.services[\"service_offerings\"][\"small\"]\n-                                    )\n+            cls.apiclient,\n+            cls.services[\"service_offerings\"][\"small\"]\n+        )\n \n         cls._cleanup = [\n-                        cls.small_offering,\n-                        cls.account\n-                        ]\n+            cls.small_offering,\n+            cls.account\n+        ]\n \n     @classmethod\n     def tearDownClass(cls):\n@@ -916,19 +916,20 @@ def get_target_host(self, secured, virtualmachineid):\n         target_hosts = Host.listForMigration(self.apiclient,\n                                              virtualmachineid=virtualmachineid)\n         for host in target_hosts:\n-            h = list_hosts(self.apiclient,type='Routing', id=host.id)[0]\n+            h = list_hosts(self.apiclient, type='Routing', id=host.id)[0]\n             if h.details.secured == secured:\n                 return h\n \n         cloudstackTestCase.skipTest(self, \"No target hosts available, skipping test.\")\n \n     def check_migration_protocol(self, protocol, host):\n-        resp = SshClient(host.ipaddress, port=22, user=self.hostConfig[\"username\"],passwd=self.hostConfig[\"password\"])\\\n+        resp = SshClient(host.ipaddress, port=22, user=self.hostConfig[\"username\"], passwd=self.hostConfig[\"password\"]) \\\n             .execute(\"grep -a listen_%s=1 /etc/libvirt/libvirtd.conf | tail -1\" % protocol)\n \n         if protocol not in resp[0]:\n             cloudstackTestCase.fail(self, \"Libvirt listen protocol expected: '\" + protocol + \"\\n\"\n-                                    \"does not match actual: \" + resp[0])\n+                                                                                             \"does not match actual: \" +\n+                                    resp[0])\n \n     def migrate_and_check(self, vm, src_host, dest_host, proto='tls'):\n         \"\"\"\n@@ -940,7 +941,7 @@ def migrate_and_check(self, vm, src_host, dest_host, proto='tls'):\n         self.assertEqual(vm_response.hostid, dest_host.id, \"Check destination host ID of migrated VM\")\n \n     def unsecure_host(self, host):\n-        SshClient(host.ipaddress, port=22, user=self.hostConfig[\"username\"], passwd=self.hostConfig[\"password\"])\\\n+        SshClient(host.ipaddress, port=22, user=self.hostConfig[\"username\"], passwd=self.hostConfig[\"password\"]) \\\n             .execute(\"rm -f /etc/cloudstack/agent/cloud* && \\\n                       sed -i 's/listen_tls.*/listen_tls=0/g' /etc/libvirt/libvirtd.conf && \\\n                       sed -i 's/listen_tcp.*/listen_tcp=1/g' /etc/libvirt/libvirtd.conf && \\\n@@ -1051,7 +1052,8 @@ def test_03_secured_to_nonsecured_vm_migration(self):\n             self.migrate_and_check(vm, secure_host, unsecure_host, proto='tls')\n         except Exception:\n             pass\n-        else: self.fail(\"Migration succeeded, instead it should fail\")\n+        else:\n+            self.fail(\"Migration succeeded, instead it should fail\")\n \n     @attr(tags=[\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\", \"security\"], required_hardware=\"false\")\n     def test_04_nonsecured_to_secured_vm_migration(self):\n@@ -1072,5 +1074,217 @@ def test_04_nonsecured_to_secured_vm_migration(self):\n             self.migrate_and_check(vm, unsecure_host, secure_host, proto='tcp')\n         except Exception:\n             pass\n-        else: self.fail(\"Migration succeeded, instead it should fail\")\n+        else:\n+            self.fail(\"Migration succeeded, instead it should fail\")\n+\n+\n+class TestMigrateVMwithVolume(cloudstackTestCase):\n+\n+    @classmethod\n+    def setUpClass(cls):\n+        testClient = super(TestMigrateVMwithVolume, cls).getClsTestClient()\n+        cls.apiclient = testClient.getApiClient()\n+        cls.services = testClient.getParsedTestDataConfig()\n+        cls.hypervisor = testClient.getHypervisorInfo()\n+        cls._cleanup = []\n+\n+        # Get Zone, Domain and templates\n+        domain = get_domain(cls.apiclient)\n+        cls.zone = get_zone(cls.apiclient, cls.testClient.getZoneForTests())\n+        cls.services['mode'] = cls.zone.networktype\n+        cls.hostConfig = cls.config.__dict__[\"zones\"][0].__dict__[\"pods\"][0].__dict__[\"clusters\"][0].__dict__[\"hosts\"][\n+            0].__dict__\n+        cls.management_ip = cls.config.__dict__[\"mgtSvr\"][0].__dict__[\"mgtSvrIp\"]\n+\n+        template = get_template(\n+            cls.apiclient,\n+            cls.zone.id,\n+            cls.services[\"ostype\"]\n+        )\n+        if template == FAILED:\n+            assert False, \"get_template() failed to return template with description %s\" % cls.services[\"ostype\"]\n+\n+        # Set Zones and disk offerings\n+        cls.services[\"small\"][\"zoneid\"] = cls.zone.id\n+        cls.services[\"small\"][\"template\"] = template.id\n+\n+        cls.services[\"iso1\"][\"zoneid\"] = cls.zone.id\n+\n+        # Create VMs, NAT Rules etc\n+        cls.account = Account.create(\n+            cls.apiclient,\n+            cls.services[\"account\"],\n+            domainid=domain.id\n+        )\n+\n+        cls.small_offering = ServiceOffering.create(\n+            cls.apiclient,\n+            cls.services[\"service_offerings\"][\"small\"]\n+        )\n+\n+        cls._cleanup = [\n+            cls.small_offering,\n+            cls.account\n+        ]\n+\n+    @classmethod\n+    def tearDownClass(cls):\n+        cls.apiclient = super(TestMigrateVMwithVolume, cls).getClsTestClient().getApiClient()\n+        try:\n+            cleanup_resources(cls.apiclient, cls._cleanup)\n+        except Exception as e:\n+            raise Exception(\"Warning: Exception during cleanup : %s\" % e)\n+\n+    def setUp(self):\n+        self.apiclient = self.testClient.getApiClient()\n+        self.dbclient = self.testClient.getDbConnection()\n+        self.cleanup = []\n+\n+        if self.hypervisor.lower() not in [\"vmware\"]:\n+            self.skipTest(\"VM Migration with Volumes is not supported on other than VMware\")\n+\n+            self.hosts = Host.list(\n+                self.apiclient,\n+                zoneid=self.zone.id,\n+                type='Routing',\n+                hypervisor='KVM')\n+\n+            if len(self.hosts) < 2:\n+                self.skipTest(\"Requires at least two hosts for performing migration related tests\")\n+\n+    def tearDown(self):\n+        try:\n+            cleanup_resources(self.apiclient, self.cleanup)\n+        except Exception as e:\n+            raise Exception(\"Warning: Exception during cleanup : %s\" % e)\n+\n+    def get_target_host(self, virtualmachineid):\n+        target_hosts = Host.listForMigration(self.apiclient,\n+                                             virtualmachineid=virtualmachineid)[0]\n+        if len(target_hosts) < 1:\n+            self.skipTest(\"No target hosts found\")\n+\n+        return target_hosts[0]\n+\n+    def get_target_pool(self, volid):\n+        target_pools = StoragePool.listForMigration(self.apiclient, id=volid)\n+\n+        if len(target_pools) < 1:\n+            self.skipTest(\"Not enough storage pools found\")\n+\n+        return target_pools[0]\n+\n+    def get_vm_volumes(self, id):\n+        return Volume.list(self.apiclient, virtualmachineid=id, listall=True)\n+\n+    def deploy_vm(self):\n+        return VirtualMachine.create(\n+            self.apiclient,\n+            self.services[\"small\"],\n+            accountid=self.account.name,\n+            domainid=self.account.domainid,\n+            serviceofferingid=self.small_offering.id,\n+            mode=self.services[\"mode\"])\n+\n+    def migrate_vm_with_pools(self, target_pool, id):\n+        cmd = migrateVirtualMachine.migrateVirtualMachineCmd()\n+\n+        cmd.storageid = target_pool.id\n+        cmd.virtualmachineid = id\n+\n+        return self.apiclient.migrateVirtualMachine(cmd)\n+\n+    def create_volume(self):\n+        small_disk_offering = DiskOffering.list(self.apiclient, name='Small')[0]\n+\n+        return Volume.create(\n+            self.apiclient,\n+            self.services,\n+            account=self.account.name,\n+            diskofferingid=small_disk_offering.id,\n+            domainid=self.account.domainid,\n+            zoneid=self.zone.id\n+        )\n+\n+    \"\"\"\n+    BVT for Vmware Offline VM and Volume Migration\n+    \"\"\"\n+\n+    @attr(tags=[\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\", \"security\"], required_hardware=\"false\")\n+    def test_01_migrate_VM_and_root_volume(self):\n+        \"\"\"Test VM will be migrated with it's root volume\"\"\"\n+        # Validate the following\n+        # 1. Deploys a VM\n+        # 2. Finds suitable host for migration\n+        # 3. Finds suitable storage pool for root volume\n+        # 4. Migrate the VM to new host and storage pool and assert migration successful\n+\n+        vm = self.deploy_vm()\n+\n+        root_volume = self.get_vm_volumes(vm.id)[0]\n+\n+        target_pool = self.get_target_pool(root_volume.id)\n+\n+        vm.stop(self.apiclient)\n+\n+        self.migrate_vm_with_pools(target_pool, vm.id)\n+\n+        root_volume = self.get_vm_volumes(vm.id)[0]\n+        self.assertEqual(root_volume.storageid, target_pool.id, \"Pool ID was not as expected\")\n+\n+    @attr(tags=[\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\", \"security\"], required_hardware=\"false\")\n+    def test_02_migrate_VM_with_two_data_disks(self):\n+        \"\"\"Test VM will be migrated with it's root volume\"\"\"\n+        # Validate the following\n+        # 1. Deploys a VM and attaches 2 data disks\n+        # 2. Finds suitable host for migration\n+        # 3. Finds suitable storage pool for volumes\n+        # 4. Migrate the VM to new host and storage pool and assert migration successful\n+\n+        vm = self.deploy_vm()\n+\n+        volume1 = self.create_volume()\n+        volume2 = self.create_volume()\n+\n+        vm.attach_volume(self.apiclient, volume1)\n+        vm.attach_volume(self.apiclient, volume2)\n+\n+        root_volume = self.get_vm_volumes(vm.id)[0]\n+\n+        target_pool = self.get_target_pool(root_volume.id)\n+\n+        vm.stop(self.apiclient)\n+\n+        self.migrate_vm_with_pools(target_pool, vm.id)\n+\n+        volume1 = Volume.list(self.apiclient, id=volume1.id)[0]\n+        volume2 = Volume.list(self.apiclient, id=volume2.id)[0]\n+        root_volume = self.get_vm_volumes(vm.id)[0]\n+\n+        self.assertEqual(root_volume.storageid, target_pool.id, \"Pool ID was not as expected\")\n+        self.assertEqual(volume1.storageid, target_pool.id, \"Pool ID was not as expected\")\n+        self.assertEqual(volume2.storageid, target_pool.id, \"Pool ID was not as expected\")\n+\n+    @attr(tags=[\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\", \"security\"], required_hardware=\"false\")\n+    def test_03_migrate_detached_volume(self):\n+        \"\"\"Test VM will be migrated with it's root volume\"\"\"\n+        # Validate the following\n+        # 1. Deploys a VM and attaches 1 data disk\n+        # 2. Detaches the Disk\n+        # 3. Finds suitable storage pool for the Disk\n+        # 4. Migrate the storage pool and assert migration successful\n+\n+        vm = self.deploy_vm()\n+\n+        volume1 = self.create_volume()\n+\n+        vm.attach_volume(self.apiclient, volume1)\n+        vm.detach_volume(self.apiclient, volume1)\n+\n+        target_pool = self.get_target_pool(volume1.id)\n+\n+        Volume.migrate(self.apiclient, storageid=target_pool.id, volumeid=volume1.id)\n+\n+        vol = Volume.list(self.apiclient, volume=volume1.id)[0]\n \n+        self.assertEqual(vol.storageid, target_pool.id, \"Storage pool was not the same as expected\")",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/test/integration/smoke/test_vm_life_cycle.py",
                "sha": "32e917444c02c4eebf45044456f95900f8359611",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/utils/src/main/java/com/cloud/utils/StringUtils.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/main/java/com/cloud/utils/StringUtils.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 0,
                "filename": "utils/src/main/java/com/cloud/utils/StringUtils.java",
                "patch": "@@ -73,6 +73,14 @@ public static String join(final Iterable<? extends Object> iterable, final Strin\n     public static String join(final String delimiter, final Object... components) {\n         return org.apache.commons.lang.StringUtils.join(components, delimiter);\n     }\n+    /**\n+     * @deprecated\n+     * Please use org.apache.commons.lang.StringUtils.isBlank() as a replacement\n+     */\n+    @Deprecated\n+    public static boolean isBlank(String str) {\n+        return org.apache.commons.lang.StringUtils.isBlank(str);\n+    }\n \n     /**\n      * @deprecated",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/utils/src/main/java/com/cloud/utils/StringUtils.java",
                "sha": "e858bee74a02d3d654f9972e7644c3df25b94f55",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 0,
                "filename": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java",
                "patch": "@@ -447,6 +447,23 @@ public boolean changeHost(VirtualMachineRelocateSpec relocateSpec) throws Except\n         return false;\n     }\n \n+    public boolean changeDatastore(ManagedObjectReference morDataStore) throws Exception {\n+        VirtualMachineRelocateSpec relocateSpec = new VirtualMachineRelocateSpec();\n+        relocateSpec.setDatastore(morDataStore);\n+\n+        ManagedObjectReference morTask = _context.getService().relocateVMTask(_mor, relocateSpec, null);\n+\n+        boolean result = _context.getVimClient().waitForTask(morTask);\n+        if (result) {\n+            _context.waitForTaskProgressDone(morTask);\n+            return true;\n+        } else {\n+            s_logger.error(\"VMware change datastore relocateVM_Task failed due to \" + TaskMO.getTaskFailureInfo(_context, morTask));\n+        }\n+\n+        return false;\n+    }\n+\n     public boolean relocate(ManagedObjectReference morTargetHost) throws Exception {\n         VirtualMachineRelocateSpec relocateSpec = new VirtualMachineRelocateSpec();\n         relocateSpec.setHost(morTargetHost);",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java",
                "sha": "52ead5c8535e50ecb2f323ec70dbb64f53a3e3e3",
                "status": "modified"
            }
        ],
        "message": "Vmware offline migration (#2848)\n\n* - Offline VM and Volume migration on Vmware hypervisor hosts\r\n- Also add VM disk consolidation call on successful VM migrations\r\n\r\n* Fix indentation of marvin test file and reformat against PEP8\r\n\r\n* * Fix few comment typos\r\n* Refactor debug messages to use String.format() when debug log level is enabled.\r\n\r\n* Send list of commands returned by hypervisor Guru instead of explicitly selecting the first one\r\n\r\n* Fix unhandled NPE during VM migration\r\n\r\n* Revert back to distinct event descriptions for VM to host or storage pool migration\r\n\r\n* Reformat test_primary_storage file against PEP-8 and Remove unused imports\r\n\r\n* Revert back the deprecation messages in the custom StringUtils class to favour the use of the ApacheUtils",
        "parent": "https://github.com/apache/cloudstack/commit/d68712eb7b0a53f6426f3bff157b14eee40c368e",
        "patched_files": [
            "Config.java",
            "HypervisorGuruBase.java",
            "AsyncJobManagerImpl.java",
            "MigrateVMCmd.java",
            "MigrateVmToPoolCommand.java",
            "VMwareGuru.java",
            "VolumeApiService.java",
            "BaseAsyncCmd.java",
            "MigrateVmToPoolAnswer.java",
            "ManagementServerImpl.java",
            "StringUtils.java",
            "VolumeServiceImpl.java",
            "VmwareResource.java",
            "VirtualMachineMO.java",
            "MigrateVolumeCommand.java",
            "VolumeOrchestrator.java",
            "ApiServer.java",
            "MigrateVirtualMachineWithVolumeCmd.java",
            "test_vm_life_cycle.py",
            "VirtualMachineManagerImpl.java",
            "AsyncJobDao.java",
            "VmwareStorageMotionStrategy.java",
            "StorageManagerImpl.java",
            "StorageManager.java",
            "MigrateVolumeCmd.java",
            "DataMotionStrategy.java",
            "UpdateRoleCmd.java",
            "AsyncJobManager.java",
            "test_primary_storage.py",
            "VolumeApiServiceImpl.java",
            "DataMotionServiceImpl.java",
            "UnregisterVMCommand.java",
            "ApiDispatcher.java",
            "HypervisorGuru.java",
            "AsyncJobDaoImpl.java",
            "DeploymentPlanningManagerImpl.java",
            "UserVmManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "ManagementServerImplTest.java",
            "VolumeApiServiceImplTest.java",
            "StringUtilsTest.java",
            "VMwareGuruTest.java",
            "UserVmManagerImplTest.java",
            "VmwareResourceTest.java",
            "DeploymentPlanningManagerImplTest.java",
            "VmwareStorageMotionStrategyTest.java",
            "StorageManagerImplTest.java",
            "VirtualMachineMOTest.java",
            "VirtualMachineManagerImplTest.java",
            "ConfigTest.java",
            "UpdateRoleCmdTest.java",
            "AsyncJobManagerTest.java"
        ]
    },
    "cloudstack_b3b56e2": {
        "bug_id": "cloudstack_b3b56e2",
        "commit": "https://github.com/apache/cloudstack/commit/b3b56e2cd84a7d716735c4b684f271247192dff3",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/b3b56e2cd84a7d716735c4b684f271247192dff3/engine/schema/src/com/cloud/upgrade/dao/Upgrade442to450.java",
                "changes": 151,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/upgrade/dao/Upgrade442to450.java?ref=b3b56e2cd84a7d716735c4b684f271247192dff3",
                "deletions": 150,
                "filename": "engine/schema/src/com/cloud/upgrade/dao/Upgrade442to450.java",
                "patch": "@@ -25,16 +25,12 @@\n import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.HashMap;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n-\n-import com.cloud.hypervisor.Hypervisor;\n-import com.cloud.utils.crypt.DBEncryptionUtil;\n \n import org.apache.log4j.Logger;\n \n+import com.cloud.utils.crypt.DBEncryptionUtil;\n import com.cloud.utils.exception.CloudRuntimeException;\n import com.cloud.utils.script.Script;\n \n@@ -68,7 +64,6 @@ public boolean supportsRollingUpgrade() {\n \n     @Override\n     public void performDataMigration(Connection conn) {\n-        updateSystemVmTemplates(conn);\n         dropInvalidKeyFromStoragePoolTable(conn);\n         dropDuplicatedForeignKeyFromAsyncJobTable(conn);\n         updateMaxRouterSizeConfig(conn);\n@@ -152,150 +147,6 @@ private void upgradeMemoryOfInternalLoadBalancervmOffering(Connection conn) {\n         return new File[] {new File(script)};\n     }\n \n-    private void updateSystemVmTemplates(Connection conn) {\n-        s_logger.debug(\"Updating System Vm template IDs\");\n-        //Get all hypervisors in use\n-        Set<Hypervisor.HypervisorType> hypervisorsListInUse = new HashSet<Hypervisor.HypervisorType>();\n-        try (PreparedStatement pstmt = conn.prepareStatement(\"select distinct(hypervisor_type) from `cloud`.`cluster` where removed is null\");\n-             ResultSet rs = pstmt.executeQuery()\n-           ) {\n-            while(rs.next()){\n-                switch (Hypervisor.HypervisorType.getType(rs.getString(1))) {\n-                case XenServer: hypervisorsListInUse.add(Hypervisor.HypervisorType.XenServer);\n-                    break;\n-                case KVM:       hypervisorsListInUse.add(Hypervisor.HypervisorType.KVM);\n-                    break;\n-                case VMware:    hypervisorsListInUse.add(Hypervisor.HypervisorType.VMware);\n-                    break;\n-                case Hyperv:    hypervisorsListInUse.add(Hypervisor.HypervisorType.Hyperv);\n-                    break;\n-                case LXC:       hypervisorsListInUse.add(Hypervisor.HypervisorType.LXC);\n-                    break;\n-                default:  // no action on cases Any, BareMetal, None, Ovm, Parralels, Simulator and VirtualBox:\n-                    break;\n-                }\n-            }\n-        } catch (SQLException e) {\n-            s_logger.error(\"updateSystemVmTemplates:Exception while getting hypervisor types from clusters: \"+e.getMessage());\n-            throw new CloudRuntimeException(\"updateSystemVmTemplates:Exception while getting hypervisor types from clusters\", e);\n-        }\n-\n-        Map<Hypervisor.HypervisorType, String> NewTemplateNameList = new HashMap<Hypervisor.HypervisorType, String>() {\n-            {\n-                put(Hypervisor.HypervisorType.XenServer, \"systemvm-xenserver-4.5\");\n-                put(Hypervisor.HypervisorType.VMware, \"systemvm-vmware-4.5\");\n-                put(Hypervisor.HypervisorType.KVM, \"systemvm-kvm-4.5\");\n-                put(Hypervisor.HypervisorType.LXC, \"systemvm-lxc-4.5\");\n-                put(Hypervisor.HypervisorType.Hyperv, \"systemvm-hyperv-4.5\");\n-            }\n-        };\n-\n-        Map<Hypervisor.HypervisorType, String> routerTemplateConfigurationNames = new HashMap<Hypervisor.HypervisorType, String>() {\n-            {\n-                put(Hypervisor.HypervisorType.XenServer, \"router.template.xen\");\n-                put(Hypervisor.HypervisorType.VMware, \"router.template.vmware\");\n-                put(Hypervisor.HypervisorType.KVM, \"router.template.kvm\");\n-                put(Hypervisor.HypervisorType.LXC, \"router.template.lxc\");\n-                put(Hypervisor.HypervisorType.Hyperv, \"router.template.hyperv\");\n-            }\n-        };\n-\n-        Map<Hypervisor.HypervisorType, String> newTemplateUrl = new HashMap<Hypervisor.HypervisorType, String>() {\n-            {\n-                put(Hypervisor.HypervisorType.XenServer, \"http://download.cloud.com/templates/4.5/systemvm64template-4.5-xen.vhd.bz2\");\n-                put(Hypervisor.HypervisorType.VMware, \"http://download.cloud.com/templates/4.5/systemvm64template-4.5-vmware.ova\");\n-                put(Hypervisor.HypervisorType.KVM, \"http://download.cloud.com/templates/4.5/systemvm64template-4.5-kvm.qcow2.bz2\");\n-                put(Hypervisor.HypervisorType.LXC, \"http://download.cloud.com/templates/4.5/systemvm64template-4.5-kvm.qcow2.bz2\");\n-                put(Hypervisor.HypervisorType.Hyperv, \"http://download.cloud.com/templates/4.5/systemvm64template-4.5-hyperv.vhd.zip\");\n-            }\n-        };\n-\n-        Map<Hypervisor.HypervisorType, String> newTemplateChecksum = new HashMap<Hypervisor.HypervisorType, String>() {\n-            {\n-                put(Hypervisor.HypervisorType.XenServer, \"2b15ab4401c2d655264732d3fc600241\");\n-                put(Hypervisor.HypervisorType.VMware, \"3106a79a4ce66cd7f6a7c50e93f2db57\");\n-                put(Hypervisor.HypervisorType.KVM, \"aa9f501fecd3de1daeb9e2f357f6f002\");\n-                put(Hypervisor.HypervisorType.LXC, \"aa9f501fecd3de1daeb9e2f357f6f002\");\n-                put(Hypervisor.HypervisorType.Hyperv, \"70bd30ea02ee9ed67d2c6b85c179cee9\");\n-            }\n-        };\n-\n-        for (Map.Entry<Hypervisor.HypervisorType, String> hypervisorAndTemplateName : NewTemplateNameList.entrySet()) {\n-            s_logger.debug(\"Updating \" + hypervisorAndTemplateName.getKey() + \" System Vms\");\n-            try  (PreparedStatement pstmt = conn.prepareStatement(\"select id from `cloud`.`vm_template` where name = ? and removed is null order by id desc limit 1\")) {\n-                //Get 4.5.0 system Vm template Id for corresponding hypervisor\n-                long templateId = -1;\n-                pstmt.setString(1, hypervisorAndTemplateName.getValue());\n-                try (ResultSet rs = pstmt.executeQuery()) {\n-                    if(rs.next()){\n-                        templateId = rs.getLong(1);\n-                    }\n-                } catch (SQLException e)\n-                {\n-                    s_logger.error(\"updateSystemVmTemplates:Exception while getting ids of templates: \"+e.getMessage());\n-                    throw new CloudRuntimeException(\"updateSystemVmTemplates:Exception while getting ids of templates\", e);\n-                }\n-\n-                // change template type to SYSTEM\n-                if (templateId != -1) {\n-                    try(PreparedStatement templ_type_pstmt = conn.prepareStatement(\"update `cloud`.`vm_template` set type='SYSTEM' where id = ?\");)\n-                    {\n-                        templ_type_pstmt.setLong(1, templateId);\n-                        templ_type_pstmt.executeUpdate();\n-                    }\n-                    catch (SQLException e)\n-                    {\n-                        s_logger.error(\"updateSystemVmTemplates:Exception while updating template with id \" + templateId + \" to be marked as 'system': \"+e.getMessage());\n-                        throw new CloudRuntimeException(\"updateSystemVmTemplates:Exception while updating template with id \" + templateId + \" to be marked as 'system'\", e);\n-                    }\n-                    // update template ID of system Vms\n-                    try(PreparedStatement update_templ_id_pstmt = conn.prepareStatement(\"update `cloud`.`vm_instance` set vm_template_id = ? where type <> 'User' and hypervisor_type = ?\");)\n-                    {\n-                        update_templ_id_pstmt.setLong(1, templateId);\n-                        update_templ_id_pstmt.setString(2, hypervisorAndTemplateName.getKey().toString());\n-                        update_templ_id_pstmt.executeUpdate();\n-                    }catch (Exception e)\n-                    {\n-                        s_logger.error(\"updateSystemVmTemplates:Exception while setting template for \" + hypervisorAndTemplateName.getKey().toString() + \" to \" + templateId + \": \"+e.getMessage());\n-                        throw new CloudRuntimeException(\"updateSystemVmTemplates:Exception while setting template for \" + hypervisorAndTemplateName.getKey().toString() + \" to \" + templateId, e);\n-                    }\n-                    // Change value of global configuration parameter router.template.* for the corresponding hypervisor\n-                    try(PreparedStatement update_pstmt = conn.prepareStatement(\"UPDATE `cloud`.`configuration` SET value = ? WHERE name = ?\");) {\n-                        update_pstmt.setString(1, hypervisorAndTemplateName.getValue());\n-                        update_pstmt.setString(2, routerTemplateConfigurationNames.get(hypervisorAndTemplateName.getKey()));\n-                        update_pstmt.executeUpdate();\n-                    }catch (SQLException e)\n-                    {\n-                        s_logger.error(\"updateSystemVmTemplates:Exception while setting \" + routerTemplateConfigurationNames.get(hypervisorAndTemplateName.getKey()) + \" to \" + hypervisorAndTemplateName.getValue() + \": \"+e.getMessage());\n-                        throw new CloudRuntimeException(\"updateSystemVmTemplates:Exception while setting \" + routerTemplateConfigurationNames.get(hypervisorAndTemplateName.getKey()) + \" to \" + hypervisorAndTemplateName.getValue(), e);\n-                    }\n-                } else {\n-                    if (hypervisorsListInUse.contains(hypervisorAndTemplateName.getKey())){\n-                        throw new CloudRuntimeException(\"4.5.0 \" + hypervisorAndTemplateName.getKey() + \" SystemVm template not found. Cannot upgrade system Vms\");\n-                    } else {\n-                        s_logger.warn(\"4.5.0 \" + hypervisorAndTemplateName.getKey() + \" SystemVm template not found. \" + hypervisorAndTemplateName.getKey() + \" hypervisor is not used, so not failing upgrade\");\n-                        // Update the latest template URLs for corresponding hypervisor\n-                        try(PreparedStatement update_templ_url_pstmt = conn.prepareStatement(\"UPDATE `cloud`.`vm_template` SET url = ? , checksum = ? WHERE hypervisor_type = ? AND type = 'SYSTEM' AND removed is null order by id desc limit 1\");) {\n-                            update_templ_url_pstmt.setString(1, newTemplateUrl.get(hypervisorAndTemplateName.getKey()));\n-                            update_templ_url_pstmt.setString(2, newTemplateChecksum.get(hypervisorAndTemplateName.getKey()));\n-                            update_templ_url_pstmt.setString(3, hypervisorAndTemplateName.getKey().toString());\n-                            update_templ_url_pstmt.executeUpdate();\n-                        }catch (SQLException e)\n-                        {\n-                            s_logger.error(\"updateSystemVmTemplates:Exception while updating 'url' and 'checksum' for hypervisor type \" + hypervisorAndTemplateName.getKey().toString() + \": \"+e.getMessage());\n-                            throw new CloudRuntimeException(\"updateSystemVmTemplates:Exception while updating 'url' and 'checksum' for hypervisor type \" + hypervisorAndTemplateName.getKey().toString(), e);\n-                        }\n-                    }\n-                }\n-            } catch (SQLException e) {\n-                s_logger.error(\"updateSystemVmTemplates:Exception while getting ids of templates: \"+e.getMessage());\n-                throw new CloudRuntimeException(\"updateSystemVmTemplates:Exception while getting ids of templates\", e);\n-            }\n-        }\n-        s_logger.debug(\"Updating System Vm Template IDs Complete\");\n-    }\n-\n-\n     private void dropInvalidKeyFromStoragePoolTable(Connection conn) {\n         HashMap<String, List<String>> uniqueKeys = new HashMap<String, List<String>>();\n         List<String> keys = new ArrayList<String>();",
                "raw_url": "https://github.com/apache/cloudstack/raw/b3b56e2cd84a7d716735c4b684f271247192dff3/engine/schema/src/com/cloud/upgrade/dao/Upgrade442to450.java",
                "sha": "a9fb08905be2d9b9a34a62bae1dfe75a4cda49a2",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/b3b56e2cd84a7d716735c4b684f271247192dff3/pom.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/pom.xml?ref=b3b56e2cd84a7d716735c4b684f271247192dff3",
                "deletions": 1,
                "filename": "pom.xml",
                "patch": "@@ -60,7 +60,7 @@\n     <cs.pool.version>1.6</cs.pool.version>\n     <cs.codec.version>1.10</cs.codec.version>\n     <cs.configuration.version>1.10</cs.configuration.version>\n-    <cs.collections.version>3.2.1</cs.collections.version>\n+    <cs.collections.version>3.2.2</cs.collections.version>\n     <cs.logging.version>1.1.1</cs.logging.version>\n     <cs.discovery.version>0.5</cs.discovery.version>\n     <cs.ejb.version>3.0</cs.ejb.version>",
                "raw_url": "https://github.com/apache/cloudstack/raw/b3b56e2cd84a7d716735c4b684f271247192dff3/pom.xml",
                "sha": "5ded8b4f70f99a326020f5649d3885c712e9620c",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/b3b56e2cd84a7d716735c4b684f271247192dff3/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java?ref=b3b56e2cd84a7d716735c4b684f271247192dff3",
                "deletions": 4,
                "filename": "server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "patch": "@@ -1013,10 +1013,12 @@ protected void updateRoutersRedundantState(final List<DomainRouterVO> routers) {\n                         s_logger.warn(\"Unable to update router \" + router.getHostName() + \"'s status\");\n                     }\n                     RedundantState state = RedundantState.UNKNOWN;\n-                    if (answer != null && answer.getResult()) {\n-                        state = answer.getState();\n-                    } else {\n-                        s_logger.info(\"Agent response doesn't seem to be correct ==> \" + answer.getResult());\n+                    if (answer != null) {\n+                        if (answer.getResult()) {\n+                            state = answer.getState();\n+                        } else {\n+                            s_logger.info(\"Agent response doesn't seem to be correct ==> \" + answer.getResult());\n+                        }\n                     }\n                     router.setRedundantState(state);\n                     updated = true;",
                "raw_url": "https://github.com/apache/cloudstack/raw/b3b56e2cd84a7d716735c4b684f271247192dff3/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "sha": "ca1f67dbb69b7b98ae38a851e54398cd05075875",
                "status": "modified"
            }
        ],
        "message": "Merge release branch 4.6 to master\n\n* 4.6:\n  CLOUDSTACK-9053 security upgrade as per COLLECTIONS-580\n  CLOUDSTACK-9055: fix NPE in updating Redundant State of VPC networks\n  CLOUDSTACK-9057 remove old system vm upgrade code",
        "parent": "https://github.com/apache/cloudstack/commit/76f430cfc3e525d3442b036739442e7abe084b1d",
        "patched_files": [
            "pom.xml",
            "VirtualNetworkApplianceManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualNetworkApplianceManagerImplTest.java"
        ]
    },
    "cloudstack_b576972": {
        "bug_id": "cloudstack_b576972",
        "commit": "https://github.com/apache/cloudstack/commit/b576972f7104688cb945a4f8b6f6b36f50f790fb",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/b576972f7104688cb945a4f8b6f6b36f50f790fb/engine/storage/snapshot/src/main/java/org/apache/cloudstack/storage/snapshot/CephSnapshotStrategy.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/storage/snapshot/src/main/java/org/apache/cloudstack/storage/snapshot/CephSnapshotStrategy.java?ref=b576972f7104688cb945a4f8b6f6b36f50f790fb",
                "deletions": 3,
                "filename": "engine/storage/snapshot/src/main/java/org/apache/cloudstack/storage/snapshot/CephSnapshotStrategy.java",
                "patch": "@@ -78,8 +78,10 @@ public boolean revertSnapshot(SnapshotInfo snapshotInfo) {\n \n     protected boolean isSnapshotStoredOnRbdStoragePool(Snapshot snapshot) {\n         SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findBySnapshot(snapshot.getId(), DataStoreRole.Primary);\n-        long snapshotStoragePoolId = snapshotStore.getDataStoreId();\n-        StoragePoolVO storagePoolVO = primaryDataStoreDao.findById(snapshotStoragePoolId);\n-        return storagePoolVO.getPoolType() == StoragePoolType.RBD;\n+        if (snapshotStore == null) {\n+            return false;\n+        }\n+        StoragePoolVO storagePoolVO = primaryDataStoreDao.findById(snapshotStore.getDataStoreId());\n+        return storagePoolVO != null && storagePoolVO.getPoolType() == StoragePoolType.RBD;\n     }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/b576972f7104688cb945a4f8b6f6b36f50f790fb/engine/storage/snapshot/src/main/java/org/apache/cloudstack/storage/snapshot/CephSnapshotStrategy.java",
                "sha": "59ce3eca741faf72004c37006f910022bd698143",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/b576972f7104688cb945a4f8b6f6b36f50f790fb/server/src/main/java/com/cloud/network/router/CommandSetupHelper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/network/router/CommandSetupHelper.java?ref=b576972f7104688cb945a4f8b6f6b36f50f790fb",
                "deletions": 1,
                "filename": "server/src/main/java/com/cloud/network/router/CommandSetupHelper.java",
                "patch": "@@ -1062,7 +1062,7 @@ private NicVO findDefaultDnsIp(final long userVmId) {\n         final NicVO defaultNic = _nicDao.findDefaultNicForVM(userVmId);\n \n         // check if DNS provider is the domR\n-        if (!_networkModel.isProviderSupportServiceInNetwork(defaultNic.getNetworkId(), Service.Dns, Provider.VirtualRouter)) {\n+        if (defaultNic == null || !_networkModel.isProviderSupportServiceInNetwork(defaultNic.getNetworkId(), Service.Dns, Provider.VirtualRouter)) {\n             return null;\n         }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/b576972f7104688cb945a4f8b6f6b36f50f790fb/server/src/main/java/com/cloud/network/router/CommandSetupHelper.java",
                "sha": "f9ffeb99d67c0d08c7bc278b7315e6902fa95631",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/b576972f7104688cb945a4f8b6f6b36f50f790fb/server/src/main/java/com/cloud/vm/UserVmManagerImpl.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/vm/UserVmManagerImpl.java?ref=b576972f7104688cb945a4f8b6f6b36f50f790fb",
                "deletions": 2,
                "filename": "server/src/main/java/com/cloud/vm/UserVmManagerImpl.java",
                "patch": "@@ -1476,7 +1476,7 @@ public UserVm updateDefaultNicForVirtualMachine(UpdateDefaultNicForVMCmd cmd) th\n             UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_ASSIGN, vmInstance.getAccountId(), vmInstance.getDataCenterId(), vmInstance.getId(),\n                     oldNicIdString, oldNetworkOfferingId, null, 0L, VirtualMachine.class.getName(), vmInstance.getUuid(), vmInstance.isDisplay());\n \n-            if (vmInstance.getState() != State.Stopped) {\n+            if (vmInstance.getState() == State.Running) {\n                 try {\n                     VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n                     User callerUser = _accountMgr.getActiveUser(CallContext.current().getCallingUserId());\n@@ -4806,7 +4806,11 @@ public void collectVmDiskStatistics(final UserVm userVm) {\n         if (!(userVm.getHypervisorType().equals(HypervisorType.KVM) || userVm.getHypervisorType().equals(HypervisorType.VMware))) {\n             return;\n         }\n-        s_logger.debug(\"Collect vm disk statistics from host before stopping Vm\");\n+        s_logger.debug(\"Collect vm disk statistics from host before stopping VM\");\n+        if (userVm.getHostId() == null) {\n+            s_logger.error(\"Unable to collect vm disk statistics for VM as the host is null, skipping VM disk statistics collection\");\n+            return;\n+        }\n         long hostId = userVm.getHostId();\n         List<String> vmNames = new ArrayList<String>();\n         vmNames.add(userVm.getInstanceName());",
                "raw_url": "https://github.com/apache/cloudstack/raw/b576972f7104688cb945a4f8b6f6b36f50f790fb/server/src/main/java/com/cloud/vm/UserVmManagerImpl.java",
                "sha": "4cb409245ac897c60c867d5d3672140b0b34d492",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/b576972f7104688cb945a4f8b6f6b36f50f790fb/systemvm/debian/opt/cloud/bin/merge.py",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/systemvm/debian/opt/cloud/bin/merge.py?ref=b576972f7104688cb945a4f8b6f6b36f50f790fb",
                "deletions": 2,
                "filename": "systemvm/debian/opt/cloud/bin/merge.py",
                "patch": "@@ -56,8 +56,8 @@ def load(self):\n             with open(self.fpath, 'r') as _fh:\n                 logging.debug(\"Loading data bag type %s\", self.key)\n                 data = json.load(_fh)\n-        except IOError:\n-            logging.debug(\"Creating data bag type %s\", self.key)\n+        except (IOError, ValueError):\n+            logging.debug(\"Caught load error, creating empty data bag type %s\", self.key)\n             data.update({\"id\": self.key})\n         finally:\n             self.dbag = data",
                "raw_url": "https://github.com/apache/cloudstack/raw/b576972f7104688cb945a4f8b6f6b36f50f790fb/systemvm/debian/opt/cloud/bin/merge.py",
                "sha": "54d86c5e8bb2b644d8ca7948546206306b4a832f",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/b576972f7104688cb945a4f8b6f6b36f50f790fb/systemvm/debian/opt/cloud/bin/setup/bootstrap.sh",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/systemvm/debian/opt/cloud/bin/setup/bootstrap.sh?ref=b576972f7104688cb945a4f8b6f6b36f50f790fb",
                "deletions": 0,
                "filename": "systemvm/debian/opt/cloud/bin/setup/bootstrap.sh",
                "patch": "@@ -68,6 +68,7 @@ config_guest() {\n      xen-pv|xen-domU)\n           systemctl stop ntpd\n           systemctl disable ntpd\n+          systemctl enable xe-daemon\n           systemctl start xe-daemon\n \n           cat /proc/cmdline > $CMDLINE\n@@ -76,6 +77,7 @@ config_guest() {\n      xen-hvm)\n           systemctl stop ntpd\n           systemctl disable ntpd\n+          systemctl enable xe-daemon\n           systemctl start xe-daemon\n \n           if [ ! -f /usr/bin/xenstore-read ]; then\n@@ -114,12 +116,14 @@ config_guest() {\n           # system time sync'd with host via vmware tools\n           systemctl stop ntpd\n           systemctl disable ntpd\n+          systemctl enable open-vm-tools\n           systemctl start open-vm-tools\n \n           vmtoolsd --cmd 'machine.id.get' > $CMDLINE\n           ;;\n      virtualpc|hyperv)\n           # Hyper-V is recognized as virtualpc hypervisor type. Boot args are passed using KVP Daemon\n+          systemctl enable hyperv-daemons.hv-fcopy-daemon.service hyperv-daemons.hv-kvp-daemon.service hyperv-daemons.hv-vss-daemon.service\n           systemctl start hyperv-daemons.hv-fcopy-daemon.service hyperv-daemons.hv-kvp-daemon.service hyperv-daemons.hv-vss-daemon.service\n           sleep 5\n           cp -f /var/opt/hyperv/.kvp_pool_0 $CMDLINE",
                "raw_url": "https://github.com/apache/cloudstack/raw/b576972f7104688cb945a4f8b6f6b36f50f790fb/systemvm/debian/opt/cloud/bin/setup/bootstrap.sh",
                "sha": "0fb317b32035843d3ffe1963800b5711d27d8c12",
                "status": "modified"
            }
        ],
        "message": "test: stabilize 4.13/master (#3547)\n\nFix failing smoketests, fix NPEs. \r\n\r\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/3c2af55d81dbfaf17a3bf0b6247ecd830df12996",
        "patched_files": [
            "bootstrap.sh",
            "CephSnapshotStrategy.java",
            "merge.py",
            "UserVmManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "CephSnapshotStrategyTest.java",
            "UserVmManagerImplTest.java"
        ]
    },
    "cloudstack_b666a1f": {
        "bug_id": "cloudstack_b666a1f",
        "commit": "https://github.com/apache/cloudstack/commit/b666a1f3a5bcd17663af1675e82759c3ff8cbeb9",
        "file": [
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/cloudstack/blob/b666a1f3a5bcd17663af1675e82759c3ff8cbeb9/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 49,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=b666a1f3a5bcd17663af1675e82759c3ff8cbeb9",
                "deletions": 22,
                "filename": "engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -773,8 +773,9 @@ public void advanceStart(String vmUuid, Map<VirtualMachineProfile.Param, Object>\n             try {\n                 orchestrateStart(vmUuid, params, planToDeploy, planner);\n             } finally {\n-                if (VmJobEnabled.value())\n+                if (placeHolder != null) {\n                     _workJobDao.expunge(placeHolder.getId());\n+                }\n             }\n         } else {\n             Outcome<VirtualMachine> outcome = startVmThroughJobQueue(vmUuid, params, planToDeploy, planner);\n@@ -1350,8 +1351,9 @@ public void advanceStop(String vmUuid, boolean cleanUpEvenIfUnableToStop)\n             try {\n                 orchestrateStop(vmUuid, cleanUpEvenIfUnableToStop);\n             } finally {\n-                if (VmJobEnabled.value())\n+                if (placeHolder != null) {\n                     _workJobDao.expunge(placeHolder.getId());\n+                }\n             }\n \n         } else {\n@@ -1449,7 +1451,7 @@ private void advanceStop(VMInstanceVO vm, boolean cleanUpEvenIfUnableToStop) thr\n             if (s_logger.isDebugEnabled()) {\n                 s_logger.debug(\"Unable to transition the state but we're moving on because it's forced stop\");\n             }\n-            if (state == State.Starting || state == State.Migrating) {\n+            if ((state == State.Starting) || (state == State.Migrating) || (state == State.Stopping)) {\n                 if (work != null) {\n                     doCleanup = true;\n                 } else {\n@@ -1458,8 +1460,6 @@ private void advanceStop(VMInstanceVO vm, boolean cleanUpEvenIfUnableToStop) thr\n                     }\n                     throw new CloudRuntimeException(\"Work item not found, We cannot stop \" + vm + \" when it is in state \" + vm.getState());\n                 }\n-            } else if (state == State.Stopping) {\n-                doCleanup = true;\n             }\n \n             if (doCleanup) {\n@@ -1679,8 +1679,9 @@ public void storageMigration(String vmUuid, StoragePool destPool) {\n             try {\n                 orchestrateStorageMigration(vmUuid, destPool);\n             } finally {\n-                if (VmJobEnabled.value())\n+                if (placeHolder != null) {\n                     _workJobDao.expunge(placeHolder.getId());\n+                }\n             }\n         } else {\n             Outcome<VirtualMachine> outcome = migrateVmStorageThroughJobQueue(vmUuid, destPool);\n@@ -1773,8 +1774,9 @@ public void migrate(String vmUuid, long srcHostId, DeployDestination dest)\n             try {\n                 orchestrateMigrate(vmUuid, srcHostId, dest);\n             } finally {\n-                if (VmJobEnabled.value())\n+                if (placeHolder != null) {\n                     _workJobDao.expunge(placeHolder.getId());\n+                }\n             }\n         } else {\n             Outcome<VirtualMachine> outcome = migrateVmThroughJobQueue(vmUuid, srcHostId, dest);\n@@ -2071,8 +2073,9 @@ public void migrateWithStorage(String vmUuid, long srcHostId, long destHostId, M\n             try {\n                 orchestrateMigrateWithStorage(vmUuid, srcHostId, destHostId, volumeToPool);\n             } finally {\n-                if (VmJobEnabled.value())\n+                if (placeHolder != null) {\n                     _workJobDao.expunge(placeHolder.getId());\n+                }\n             }\n \n         } else {\n@@ -2417,8 +2420,9 @@ public void advanceReboot(String vmUuid, Map<VirtualMachineProfile.Param, Object\n             try {\n                 orchestrateReboot(vmUuid, params);\n             } finally {\n-                if (VmJobEnabled.value())\n+                if (placeHolder != null) {\n                     _workJobDao.expunge(placeHolder.getId());\n+                }\n             }\n         } else {\n             Outcome<VirtualMachine> outcome = rebootVmThroughJobQueue(vmUuid, params);\n@@ -3230,12 +3234,11 @@ protected void runInContext() {\n         public String hostUuid;\n         public VMInstanceVO vm;\n \n-        @SuppressWarnings(\"unchecked\")\n         public AgentVmInfo(String name, VMInstanceVO vm, State state, String host) {\n-            name = name;\n-            state = state;\n-            vm = vm;\n-            hostUuid = host;\n+            this.name = name;\n+            this.state = state;\n+            this.vm = vm;\n+            this.hostUuid = host;\n         }\n \n         public AgentVmInfo(String name, VMInstanceVO vm, State state) {\n@@ -3340,8 +3343,9 @@ public NicProfile addVmToNetwork(VirtualMachine vm, Network network, NicProfile\n             try {\n                 return orchestrateAddVmToNetwork(vm, network, requested);\n             } finally {\n-                if (VmJobEnabled.value())\n+                if (placeHolder != null) {\n                     _workJobDao.expunge(placeHolder.getId());\n+                }\n             }\n         } else {\n             Outcome<VirtualMachine> outcome = addVmToNetworkThroughJobQueue(vm, network, requested);\n@@ -3351,7 +3355,7 @@ public NicProfile addVmToNetwork(VirtualMachine vm, Network network, NicProfile\n             } catch (InterruptedException e) {\n                 throw new RuntimeException(\"Operation is interrupted\", e);\n             } catch (java.util.concurrent.ExecutionException e) {\n-                throw new RuntimeException(\"Execution excetion\", e);\n+                throw new RuntimeException(\"Execution exception\", e);\n             }\n \n             Object jobException = _jobMgr.unmarshallResultObject(outcome.getJob());\n@@ -3454,8 +3458,9 @@ public boolean removeNicFromVm(VirtualMachine vm, Nic nic)\n             try {\n                 return orchestrateRemoveNicFromVm(vm, nic);\n             } finally {\n-                if (VmJobEnabled.value())\n+                if (placeHolder != null) {\n                     _workJobDao.expunge(placeHolder.getId());\n+                }\n             }\n \n         } else {\n@@ -3706,8 +3711,9 @@ public void migrateForScale(String vmUuid, long srcHostId, DeployDestination des\n             try {\n                 orchestrateMigrateForScale(vmUuid, srcHostId, dest, oldSvcOfferingId);\n             } finally {\n-                if (VmJobEnabled.value())\n+                if (placeHolder != null) {\n                     _workJobDao.expunge(placeHolder.getId());\n+                }\n             }\n         } else {\n             Outcome<VirtualMachine> outcome = migrateVmForScaleThroughJobQueue(vmUuid, srcHostId, dest, oldSvcOfferingId);\n@@ -3970,8 +3976,9 @@ public VMInstanceVO reConfigureVm(String vmUuid, ServiceOffering oldServiceOffer\n             try {\n                 return orchestrateReConfigureVm(vmUuid, oldServiceOffering, reconfiguringOnExistingHost);\n             } finally {\n-                if (VmJobEnabled.value())\n+                if (placeHolder != null) {\n                     _workJobDao.expunge(placeHolder.getId());\n+                }\n             }\n         } else {\n             Outcome<VirtualMachine> outcome = reconfigureVmThroughJobQueue(vmUuid, oldServiceOffering, reconfiguringOnExistingHost);\n@@ -4023,7 +4030,7 @@ private VMInstanceVO orchestrateReConfigureVm(String vmUuid, ServiceOffering old\n         work.setStep(Step.Prepare);\n         work.setResourceType(ItWorkVO.ResourceType.Host);\n         work.setResourceId(vm.getHostId());\n-        work = _workDao.persist(work);\n+        _workDao.persist(work);\n         boolean success = false;\n         try {\n             if (reconfiguringOnExistingHost) {\n@@ -4045,8 +4052,6 @@ private VMInstanceVO orchestrateReConfigureVm(String vmUuid, ServiceOffering old\n         } catch (AgentUnavailableException e) {\n             throw e;\n         } finally {\n-            // work.setStep(Step.Done);\n-            //_workDao.update(work.getId(), work);\n             if (!success) {\n                 _capacityMgr.releaseVmCapacity(vm, false, false, vm.getHostId()); // release the new capacity\n                 vm.setServiceOfferingId(oldServiceOffering.getId());",
                "raw_url": "https://github.com/apache/cloudstack/raw/b666a1f3a5bcd17663af1675e82759c3ff8cbeb9/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "4aa5fc80d9660d2f985db98124c33465bd99767f",
                "status": "modified"
            }
        ],
        "message": "Fixed issues reported by coverity NPEs, unwritten field access and self assignment\n\nSigned-off-by: Koushik Das <koushik@apache.org>",
        "parent": "https://github.com/apache/cloudstack/commit/a5902f1db4b14012ecd1d5660257655e9dfe4354",
        "patched_files": [
            "VirtualMachineManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_b727001": {
        "bug_id": "cloudstack_b727001",
        "commit": "https://github.com/apache/cloudstack/commit/b727001f483012012c061e8c352c1ebfe7d3fecd",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/b727001f483012012c061e8c352c1ebfe7d3fecd/server/src/com/cloud/network/element/VirtualRouterElement.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/element/VirtualRouterElement.java?ref=b727001f483012012c061e8c352c1ebfe7d3fecd",
                "deletions": 20,
                "filename": "server/src/com/cloud/network/element/VirtualRouterElement.java",
                "patch": "@@ -28,10 +28,10 @@\n import org.apache.cloudstack.api.command.admin.router.ConfigureVirtualRouterElementCmd;\n import org.apache.cloudstack.api.command.admin.router.CreateVirtualRouterElementCmd;\n import org.apache.cloudstack.api.command.admin.router.ListVirtualRouterElementsCmd;\n+import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n \n import org.apache.log4j.Logger;\n \n-import com.cloud.agent.api.PvlanSetupCommand;\n import com.cloud.agent.api.to.LoadBalancerTO;\n import com.cloud.configuration.ConfigurationManager;\n import com.cloud.dc.DataCenter;\n@@ -50,7 +50,6 @@\n import com.cloud.network.NetworkMigrationResponder;\n import com.cloud.network.NetworkModel;\n import com.cloud.network.Networks;\n-import com.cloud.network.Networks.BroadcastDomainType;\n import com.cloud.network.Networks.TrafficType;\n import com.cloud.network.PhysicalNetworkServiceProvider;\n import com.cloud.network.PublicIpAddress;\n@@ -87,7 +86,6 @@\n import com.cloud.utils.exception.CloudRuntimeException;\n import com.cloud.vm.DomainRouterVO;\n import com.cloud.vm.NicProfile;\n-import com.cloud.vm.NicVO;\n import com.cloud.vm.ReservationContext;\n import com.cloud.vm.UserVmManager;\n import com.cloud.vm.UserVmVO;\n@@ -100,22 +98,6 @@\n \n import com.google.gson.Gson;\n \n-import org.apache.cloudstack.api.command.admin.router.ConfigureVirtualRouterElementCmd;\n-import org.apache.cloudstack.api.command.admin.router.CreateVirtualRouterElementCmd;\n-import org.apache.cloudstack.api.command.admin.router.ListVirtualRouterElementsCmd;\n-import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n-\n-import org.apache.log4j.Logger;\n-\n-import javax.ejb.Local;\n-import javax.inject.Inject;\n-\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-\n @Local(value = {NetworkElement.class, FirewallServiceProvider.class, \n \t\t        DhcpServiceProvider.class, UserDataServiceProvider.class, \n \t\t        StaticNatServiceProvider.class, LoadBalancingServiceProvider.class,\n@@ -390,7 +372,7 @@ public boolean applyLBRules(Network network, List<LoadBalancingRule> rules) thro\n             \n             List<DomainRouterVO> routers = _routerDao.listByNetworkAndRole(network.getId(), Role.VIRTUAL_ROUTER);\n             if (routers == null || routers.isEmpty()) {\n-                s_logger.debug(\"Virtual router elemnt doesn't need to apply firewall rules on the backend; virtual \" +\n+                s_logger.debug(\"Virtual router elemnt doesn't need to apply lb rules on the backend; virtual \" +\n                 \t\t\"router doesn't exist in the network \" + network.getId());\n                 return true;\n             }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b727001f483012012c061e8c352c1ebfe7d3fecd/server/src/com/cloud/network/element/VirtualRouterElement.java",
                "sha": "3607284dbe4f3b102109a8d146afad31b1bcf529",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/b727001f483012012c061e8c352c1ebfe7d3fecd/server/src/com/cloud/network/element/VpcVirtualRouterElement.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/element/VpcVirtualRouterElement.java?ref=b727001f483012012c061e8c352c1ebfe7d3fecd",
                "deletions": 1,
                "filename": "server/src/com/cloud/network/element/VpcVirtualRouterElement.java",
                "patch": "@@ -464,7 +464,6 @@ public boolean applyACLItemsToPrivateGw(PrivateGateway gateway,List<? extends Ne\n         } else {\n             return true;\n         }\n-\n     }\n \n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/b727001f483012012c061e8c352c1ebfe7d3fecd/server/src/com/cloud/network/element/VpcVirtualRouterElement.java",
                "sha": "b45d1c1dc9e0b189932a7ef82482d4e47642ab31",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/cloudstack/blob/b727001f483012012c061e8c352c1ebfe7d3fecd/server/src/com/cloud/network/router/VpcVirtualNetworkApplianceManagerImpl.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/VpcVirtualNetworkApplianceManagerImpl.java?ref=b727001f483012012c061e8c352c1ebfe7d3fecd",
                "deletions": 15,
                "filename": "server/src/com/cloud/network/router/VpcVirtualNetworkApplianceManagerImpl.java",
                "patch": "@@ -287,23 +287,27 @@ public boolean removeVpcRouterFromGuestNetwork(VirtualRouter router, Network net\n             return false;\n         }\n         \n-        //Check if router is a part of the Guest network\n-        if (!_networkModel.isVmPartOfNetwork(router.getId(), network.getId())) {\n-            s_logger.debug(\"Router \" + router + \" is not a part of the Guest network \" + network);\n-            return true;\n-        }\n-        \n-        boolean result = setupVpcGuestNetwork(network, router, false, _networkModel.getNicProfile(router, network.getId(), null));\n-        if (!result) {\n-            s_logger.warn(\"Failed to destroy guest network config \" + network + \" on router \" + router);\n-            return false;\n-        }\n-        \n-        result = result && _itMgr.removeVmFromNetwork(router, network, null);\n-        \n-        if (result) {\n+        boolean result = true;\n+        try {\n+            //Check if router is a part of the Guest network\n+            if (!_networkModel.isVmPartOfNetwork(router.getId(), network.getId())) {\n+                s_logger.debug(\"Router \" + router + \" is not a part of the Guest network \" + network);\n+                return result;\n+            }\n+            \n+            result = setupVpcGuestNetwork(network, router, false, _networkModel.getNicProfile(router, network.getId(), null));\n+            if (!result) {\n+                s_logger.warn(\"Failed to destroy guest network config \" + network + \" on router \" + router);\n+                return false;\n+            }\n+            \n+            result = result && _itMgr.removeVmFromNetwork(router, network, null);\n+        } finally {\n+            if (result) {\n                 _routerDao.removeRouterFromGuestNetwork(router.getId(), network.getId());\n             }\n+        }\n+        \n         return result;\n     }\n     ",
                "raw_url": "https://github.com/apache/cloudstack/raw/b727001f483012012c061e8c352c1ebfe7d3fecd/server/src/com/cloud/network/router/VpcVirtualNetworkApplianceManagerImpl.java",
                "sha": "95b92aa9806352d392a55f0c5d8daa0d4b54f061",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/b727001f483012012c061e8c352c1ebfe7d3fecd/server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=b727001f483012012c061e8c352c1ebfe7d3fecd",
                "deletions": 1,
                "filename": "server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -2799,7 +2799,9 @@ public NicProfile addVmToNetwork(VirtualMachine vm, Network network, NicProfile\n                     return null;\n                 }\n             } finally {\n-                if (!result) {\n+                if (!result){\n+                    s_logger.debug(\"Removing nic \" + nic + \" from vm \" + vmProfile.getVirtualMachine()\n+                            + \" as nic plug failed on the backend\");\n                     _networkMgr.removeNic(vmProfile, _nicsDao.findById(nic.getId()));\n                 }\n             }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b727001f483012012c061e8c352c1ebfe7d3fecd/server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "7c19c28f990cec71bcc95b25ef217938f9531400",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-4315: VPC - when fail to add nic to the VR, a) remove the nic b) remove the reference to nic from router_network_ref table. Before the fix b) was missing, and it caused NPEs when tried to apply the rules on the routers not having nic in the network\n\nConflicts:\n\tserver/src/com/cloud/network/element/VirtualRouterElement.java\n\tserver/src/com/cloud/vm/VirtualMachineManagerImpl.java",
        "parent": "https://github.com/apache/cloudstack/commit/bea095fa477bb2780da5c741f8b1d23ebcfdc477",
        "patched_files": [
            "VirtualMachineManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_b7470bc": {
        "bug_id": "cloudstack_b7470bc",
        "commit": "https://github.com/apache/cloudstack/commit/b7470bc51c7d74be301f5fa12d7090e8b646e6bb",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/b7470bc51c7d74be301f5fa12d7090e8b646e6bb/server/src/main/java/com/cloud/server/ManagementServerImpl.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/server/ManagementServerImpl.java?ref=b7470bc51c7d74be301f5fa12d7090e8b646e6bb",
                "deletions": 3,
                "filename": "server/src/main/java/com/cloud/server/ManagementServerImpl.java",
                "patch": "@@ -37,8 +37,6 @@\n import javax.inject.Inject;\n import javax.naming.ConfigurationException;\n \n-import com.cloud.storage.ScopeType;\n-import com.cloud.hypervisor.kvm.dpdk.DpdkHelper;\n import org.apache.cloudstack.acl.ControlledEntity;\n import org.apache.cloudstack.affinity.AffinityGroupProcessor;\n import org.apache.cloudstack.affinity.dao.AffinityGroupVMMapDao;\n@@ -613,6 +611,7 @@\n import com.cloud.hypervisor.HypervisorCapabilities;\n import com.cloud.hypervisor.HypervisorCapabilitiesVO;\n import com.cloud.hypervisor.dao.HypervisorCapabilitiesDao;\n+import com.cloud.hypervisor.kvm.dpdk.DpdkHelper;\n import com.cloud.info.ConsoleProxyInfo;\n import com.cloud.network.IpAddress;\n import com.cloud.network.dao.IPAddressDao;\n@@ -639,6 +638,7 @@\n import com.cloud.storage.GuestOSHypervisorVO;\n import com.cloud.storage.GuestOSVO;\n import com.cloud.storage.GuestOsCategory;\n+import com.cloud.storage.ScopeType;\n import com.cloud.storage.StorageManager;\n import com.cloud.storage.StoragePool;\n import com.cloud.storage.Volume;\n@@ -1442,7 +1442,11 @@ private boolean hasSuitablePoolsForVolume(final VolumeVO volume, final Host host\n         StoragePool srcVolumePool = _poolDao.findById(volume.getPoolId());\n         allPools = getAllStoragePoolCompatileWithVolumeSourceStoragePool(srcVolumePool);\n         allPools.remove(srcVolumePool);\n-        suitablePools = findAllSuitableStoragePoolsForVm(volume, vm, srcVolumePool);\n+        if (vm != null) {\n+            suitablePools = findAllSuitableStoragePoolsForVm(volume, vm, srcVolumePool);\n+        } else {\n+            suitablePools = allPools;\n+        }\n \n         return new Pair<List<? extends StoragePool>, List<? extends StoragePool>>(allPools, suitablePools);\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b7470bc51c7d74be301f5fa12d7090e8b646e6bb/server/src/main/java/com/cloud/server/ManagementServerImpl.java",
                "sha": "6cb457471064abe30116e52f28131eda96e9671c",
                "status": "modified"
            }
        ],
        "message": "server: fix NPE for the case where volume is not attached to a VM (#3566)\n\nFixes NPE when trying to find suitable storage pools for a volume\r\nwhen the volume is not attached to a VM.\r\n\r\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/77f9ab27277cd1a5569b41b5acd425ecc46693e3",
        "patched_files": [
            "ManagementServerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "ManagementServerImplTest.java"
        ]
    },
    "cloudstack_b8adb96": {
        "bug_id": "cloudstack_b8adb96",
        "commit": "https://github.com/apache/cloudstack/commit/b8adb96ae1d1ce0066ce8c937fa0e15434c4acc4",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/b8adb96ae1d1ce0066ce8c937fa0e15434c4acc4/engine/schema/src/com/cloud/service/ServiceOfferingVO.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/service/ServiceOfferingVO.java?ref=b8adb96ae1d1ce0066ce8c937fa0e15434c4acc4",
                "deletions": 1,
                "filename": "engine/schema/src/com/cloud/service/ServiceOfferingVO.java",
                "patch": "@@ -176,7 +176,7 @@ public ServiceOfferingVO(ServiceOfferingVO offering) {\n             offering.getUseLocalStorage(),\n             offering.getSystemUse(),\n             true,\n-            offering.isCustomizedIops(),\n+            offering.isCustomizedIops()== null ? false:offering.isCustomizedIops(),\n             offering.getDomainId());\n         cpu = offering.getCpu();\n         ramSize = offering.getRamSize();",
                "raw_url": "https://github.com/apache/cloudstack/raw/b8adb96ae1d1ce0066ce8c937fa0e15434c4acc4/engine/schema/src/com/cloud/service/ServiceOfferingVO.java",
                "sha": "df68fb8ed04906f144c487fe8bb35e1e08b2e5ef",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-6575: Deploy VM failed with NPE while using custom compute offering",
        "parent": "https://github.com/apache/cloudstack/commit/b7b89b1297c0cf5e8599f28d54f28003502d80b5",
        "patched_files": [
            "ServiceOfferingVO.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "ServiceOfferingVOTest.java"
        ]
    },
    "cloudstack_b98a989": {
        "bug_id": "cloudstack_b98a989",
        "commit": "https://github.com/apache/cloudstack/commit/b98a989e3d6eba5877cda3212bcb1e458dcaa40f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/b98a989e3d6eba5877cda3212bcb1e458dcaa40f/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=b98a989e3d6eba5877cda3212bcb1e458dcaa40f",
                "deletions": 1,
                "filename": "engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -2642,7 +2642,7 @@ public void syncVMMetaData(final Map<String, String> vmMetadatum) {\n \n             if(!found) {\n                 VMInstanceVO vm = _vmDao.findVMByInstanceName(name);\n-                if(vm.getType() == VirtualMachine.Type.User) {\n+                if(vm != null && vm.getType() == VirtualMachine.Type.User) {\n                     updateVmMetaData(vm.getId(), platform);\n                 }\n             }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b98a989e3d6eba5877cda3212bcb1e458dcaa40f/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "11c0b869dff70fc1c70f15c4dc554e58983a3e21",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #1274 from anshul1886/CLOUDSTACK-9196\n\nCLOUDSTACK-9196: Fixing null pointer exception when vm meta data is synced on upgraded setuphttps://issues.apache.org/jira/browse/CLOUDSTACK-9196\n\nNullPointerException can occur if XenServer reports non-existing VM in cloud DB.\n\n* pr/1274:\n  CLOUDSTACK-9196: Fixing null pointer exception when vm meta data is synced on upgraded setup.\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/de436acac8a7c8cf6193a377cc0b00e4377b8a0e",
        "patched_files": [
            "VirtualMachineManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_b9932a0": {
        "bug_id": "cloudstack_b9932a0",
        "commit": "https://github.com/apache/cloudstack/commit/b9932a0129c565db185e8f5ee03d68dbc7bce107",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/b9932a0129c565db185e8f5ee03d68dbc7bce107/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java?ref=b9932a0129c565db185e8f5ee03d68dbc7bce107",
                "deletions": 2,
                "filename": "engine/orchestration/src/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java",
                "patch": "@@ -934,10 +934,10 @@ public Volume migrateVolume(Volume volume, StoragePool destPool) throws StorageU\n             return result.getVolume();\n         } catch (InterruptedException e) {\n             s_logger.debug(\"migrate volume failed\", e);\n-            return null;\n+            throw new CloudRuntimeException(e.getMessage());\n         } catch (ExecutionException e) {\n             s_logger.debug(\"migrate volume failed\", e);\n-            return null;\n+            throw new CloudRuntimeException(e.getMessage());\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/b9932a0129c565db185e8f5ee03d68dbc7bce107/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java",
                "sha": "e439b33b2bf38e715963c18be6d445a2489923f9",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/cloudstack/blob/b9932a0129c565db185e8f5ee03d68dbc7bce107/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/VolumeApiServiceImpl.java?ref=b9932a0129c565db185e8f5ee03d68dbc7bce107",
                "deletions": 10,
                "filename": "server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "patch": "@@ -1817,6 +1817,8 @@ public Volume migrateVolume(MigrateVolumeCmd cmd) {\n                 if (jobResult != null) {\n                     if (jobResult instanceof ConcurrentOperationException)\n                         throw (ConcurrentOperationException)jobResult;\n+                    else if (jobResult instanceof RuntimeException)\n+                        throw (RuntimeException)jobResult;\n                     else if (jobResult instanceof Throwable)\n                         throw new RuntimeException(\"Unexpected exception\", (Throwable)jobResult);\n                 }\n@@ -1839,35 +1841,39 @@ private Volume orchestrateMigrateVolume(long volumeId, long destPoolId, boolean\n         assert (destPool != null);\n \n         Volume newVol = null;\n-        if (liveMigrateVolume) {\n-            newVol = liveMigrateVolume(vol, destPool);\n-        } else {\n-            try {\n+        try {\n+            if (liveMigrateVolume) {\n+                newVol = liveMigrateVolume(vol, destPool);\n+            } else {\n                 newVol = _volumeMgr.migrateVolume(vol, destPool);\n-            } catch (StorageUnavailableException e) {\n-                s_logger.debug(\"Failed to migrate volume\", e);\n             }\n+        } catch (StorageUnavailableException e) {\n+            s_logger.debug(\"Failed to migrate volume\", e);\n+            throw new CloudRuntimeException(e.getMessage());\n+        }  catch (Exception e) {\n+            s_logger.debug(\"Failed to migrate volume\", e);\n+            throw new CloudRuntimeException(e.getMessage());\n         }\n         return newVol;\n     }\n \n     @DB\n-    protected Volume liveMigrateVolume(Volume volume, StoragePool destPool) {\n+    protected Volume liveMigrateVolume(Volume volume, StoragePool destPool) throws StorageUnavailableException {\n         VolumeInfo vol = volFactory.getVolume(volume.getId());\n         AsyncCallFuture<VolumeApiResult> future = volService.migrateVolume(vol, (DataStore)destPool);\n         try {\n             VolumeApiResult result = future.get();\n             if (result.isFailed()) {\n                 s_logger.debug(\"migrate volume failed:\" + result.getResult());\n-                return null;\n+                throw new StorageUnavailableException(\"Migrate volume failed: \" + result.getResult(), destPool.getId());\n             }\n             return result.getVolume();\n         } catch (InterruptedException e) {\n             s_logger.debug(\"migrate volume failed\", e);\n-            return null;\n+            throw new CloudRuntimeException(e.getMessage());\n         } catch (ExecutionException e) {\n             s_logger.debug(\"migrate volume failed\", e);\n-            return null;\n+            throw new CloudRuntimeException(e.getMessage());\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/b9932a0129c565db185e8f5ee03d68dbc7bce107/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "sha": "6d74fa43eb7cabeea0fdde7faa72a8902886c4e5",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-8122. Handle NPE thrown during migration failures.\nWhen migration fails instead of returning NULL, throw the exception.\n\n(cherry picked from commit a5a65c7b551ee5cc32588997937267b716eff681)\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/bcbfe3bdeefedf4f53e1b5bade4e220fb8d23a57",
        "patched_files": [
            "VolumeApiServiceImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VolumeApiServiceImplTest.java"
        ]
    },
    "cloudstack_be3a39e": {
        "bug_id": "cloudstack_be3a39e",
        "commit": "https://github.com/apache/cloudstack/commit/be3a39ea4fcb1f758d72c4e4abc43f428845c4d1",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/be3a39ea4fcb1f758d72c4e4abc43f428845c4d1/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java?ref=be3a39ea4fcb1f758d72c4e4abc43f428845c4d1",
                "deletions": 1,
                "filename": "plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "patch": "@@ -3478,7 +3478,9 @@ public boolean addNetworkRules(final String vmName, final String vmId, final Str\n         cmd.add(\"--vmname\", vmName);\n         cmd.add(\"--vmid\", vmId);\n         cmd.add(\"--vmip\", guestIP);\n-        cmd.add(\"--vmip6\", guestIP6);\n+        if (StringUtils.isNotBlank(guestIP6)) {\n+            cmd.add(\"--vmip6\", guestIP6);\n+        }\n         cmd.add(\"--sig\", sig);\n         cmd.add(\"--seq\", seq);\n         cmd.add(\"--vmmac\", mac);",
                "raw_url": "https://github.com/apache/cloudstack/raw/be3a39ea4fcb1f758d72c4e4abc43f428845c4d1/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "sha": "952fe9e7cc9e1e37a51c238fa6f17e94f413c76d",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-10177: Only pass IPv6 address to Security Group Python script if present (#2355)\n\nOtherwise we send down a 'null' to a ProcessBuilder in Java instead of a String and this\r\ncauses a NPE.\r\n\r\nWe should check first if the Instance has a IPv6 address before sending it there.\r\n\r\nSigned-off-by: Wido den Hollander <wido@widodh.nl>",
        "parent": "https://github.com/apache/cloudstack/commit/637d9a62c54a7b6eac939d7569fcafc0d2a075bd",
        "patched_files": [
            "LibvirtComputingResource.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "LibvirtComputingResourceTest.java"
        ]
    },
    "cloudstack_be97470": {
        "bug_id": "cloudstack_be97470",
        "commit": "https://github.com/apache/cloudstack/commit/be97470d83a0c6e834d97c9860354176016f2c64",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/api/src/main/java/com/cloud/agent/api/to/DataObjectType.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/main/java/com/cloud/agent/api/to/DataObjectType.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 1,
                "filename": "api/src/main/java/com/cloud/agent/api/to/DataObjectType.java",
                "patch": "@@ -19,5 +19,5 @@\n package com.cloud.agent.api.to;\n \n public enum DataObjectType {\n-    VOLUME, SNAPSHOT, TEMPLATE\n+    VOLUME, SNAPSHOT, TEMPLATE, ARCHIVE\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/api/src/main/java/com/cloud/agent/api/to/DataObjectType.java",
                "sha": "26294cfbb2231f553df828cf126e7645629c0133",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/api/src/main/java/com/cloud/storage/Storage.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/main/java/com/cloud/storage/Storage.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 2,
                "filename": "api/src/main/java/com/cloud/storage/Storage.java",
                "patch": "@@ -16,11 +16,11 @@\n // under the License.\n package com.cloud.storage;\n \n-import org.apache.commons.lang.NotImplementedException;\n-\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.apache.commons.lang.NotImplementedException;\n+\n public class Storage {\n     public static enum ImageFormat {\n         QCOW2(true, true, false, \"qcow2\"),\n@@ -33,6 +33,7 @@\n         VMDK(true, true, false, \"vmdk\"),\n         VDI(true, true, false, \"vdi\"),\n         TAR(false, false, false, \"tar\"),\n+        ZIP(false, false, false, \"zip\"),\n         DIR(false, false, false, \"dir\");\n \n         private final boolean supportThinProvisioning;",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/api/src/main/java/com/cloud/storage/Storage.java",
                "sha": "82bc5f6d4e5a2bac69290692e93f9f2b1bcf4559",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/api/src/main/java/org/apache/cloudstack/api/ApiConstants.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/main/java/org/apache/cloudstack/api/ApiConstants.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "api/src/main/java/org/apache/cloudstack/api/ApiConstants.java",
                "patch": "@@ -742,6 +742,7 @@\n     public static final String STDERR = \"stderr\";\n     public static final String EXITCODE = \"exitcode\";\n     public static final String TARGET_ID = \"targetid\";\n+    public static final String FILES = \"files\";\n     public static final String VOLUME_IDS = \"volumeids\";\n \n     public enum HostDetails {",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/api/src/main/java/org/apache/cloudstack/api/ApiConstants.java",
                "sha": "44c53f690fb8e2479834eb41d45500c79a32fdaa",
                "status": "modified"
            },
            {
                "additions": 157,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/api/src/main/java/org/apache/cloudstack/api/command/admin/diagnostics/GetDiagnosticsDataCmd.java",
                "changes": 157,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/main/java/org/apache/cloudstack/api/command/admin/diagnostics/GetDiagnosticsDataCmd.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "api/src/main/java/org/apache/cloudstack/api/command/admin/diagnostics/GetDiagnosticsDataCmd.java",
                "patch": "@@ -0,0 +1,157 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.api.command.admin.diagnostics;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.cloudstack.acl.RoleType;\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.ApiArgValidator;\n+import org.apache.cloudstack.api.ApiCommandJobType;\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.BaseAsyncCmd;\n+import org.apache.cloudstack.api.BaseCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.ServerApiException;\n+import org.apache.cloudstack.api.response.SystemVmResponse;\n+import org.apache.cloudstack.api.response.diagnostics.GetDiagnosticsDataResponse;\n+import org.apache.cloudstack.context.CallContext;\n+import org.apache.cloudstack.diagnostics.DiagnosticsService;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.validator.routines.UrlValidator;\n+\n+import com.cloud.event.EventTypes;\n+import com.cloud.exception.InsufficientCapacityException;\n+import com.cloud.exception.ResourceUnavailableException;\n+import com.cloud.user.Account;\n+import com.cloud.utils.exception.CloudRuntimeException;\n+import com.cloud.vm.VirtualMachine;\n+\n+@APICommand(name = GetDiagnosticsDataCmd.APINAME,\n+        responseObject = GetDiagnosticsDataResponse.class,\n+        entityType = {VirtualMachine.class},\n+        responseHasSensitiveInfo = false,\n+        requestHasSensitiveInfo = false,\n+        description = \"Get diagnostics and files from system VMs\",\n+        since = \"4.14.0.0\",\n+        authorized = {RoleType.Admin})\n+public class GetDiagnosticsDataCmd extends BaseAsyncCmd {\n+    public static final String APINAME = \"getDiagnosticsData\";\n+\n+    @Inject\n+    private DiagnosticsService diagnosticsService;\n+\n+    /////////////////////////////////////////////////////\n+    //////////////// API parameters /////////////////////\n+    /////////////////////////////////////////////////////\n+    @Parameter(name = ApiConstants.TARGET_ID,\n+            type = BaseCmd.CommandType.UUID,\n+            entityType = SystemVmResponse.class,\n+            required = true,\n+            validations = {ApiArgValidator.PositiveNumber},\n+            description = \"The ID of the system VM instance to retrieve diagnostics data files from\")\n+    private Long id;\n+\n+    @Parameter(name = ApiConstants.FILES,\n+            type = BaseCmd.CommandType.LIST,\n+            collectionType = BaseCmd.CommandType.STRING,\n+            description = \"A comma separated list of diagnostics data files to be retrieved. Defaults are taken from global settings if none has been provided.\")\n+    private List<String> filesList;\n+\n+    /////////////////////////////////////////////////////\n+    /////////////////// Accessors ///////////////////////\n+    /////////////////////////////////////////////////////\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public List<String> getFilesList() {\n+        return filesList;\n+    }\n+\n+    /////////////////////////////////////////////////////\n+    /////////////////// Implementation //////////////////\n+    /////////////////////////////////////////////////////\n+\n+    @Override\n+    public String getCommandName() {\n+        return APINAME.toLowerCase() + BaseCmd.RESPONSE_SUFFIX;\n+    }\n+\n+    @Override\n+    public long getEntityOwnerId() {\n+        Account account = CallContext.current().getCallingAccount();\n+        if (account != null) {\n+            return account.getId();\n+        }\n+        return Account.ACCOUNT_ID_SYSTEM;\n+    }\n+\n+    @Override\n+    public void execute() throws ResourceUnavailableException, InsufficientCapacityException, ServerApiException {\n+        try {\n+            String downloadUrl = diagnosticsService.getDiagnosticsDataCommand(this);\n+            UrlValidator urlValidator = new UrlValidator();\n+            if (StringUtils.isEmpty(downloadUrl)) {\n+                throw new CloudRuntimeException(\"Failed to retrieve diagnostics files\");\n+            }\n+            GetDiagnosticsDataResponse response = new GetDiagnosticsDataResponse();\n+            if (urlValidator.isValid(downloadUrl)){\n+                response.setUrl(downloadUrl);\n+                response.setObjectName(\"diagnostics\");\n+                response.setResponseName(getCommandName());\n+                this.setResponseObject(response);\n+            } else {\n+                throw new CloudRuntimeException(\"failed to generate valid download url: \" + downloadUrl);\n+            }\n+        } catch (ServerApiException e) {\n+            throw new CloudRuntimeException(\"Internal exception caught while retrieving diagnostics files: \", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getEventType() {\n+        VirtualMachine.Type vmType = _entityMgr.findById(VirtualMachine.class, getId()).getType();\n+        String eventType = \"\";\n+        switch (vmType) {\n+            case ConsoleProxy:\n+                eventType = EventTypes.EVENT_PROXY_DIAGNOSTICS;\n+                break;\n+            case SecondaryStorageVm:\n+                eventType = EventTypes.EVENT_SSVM_DIAGNOSTICS;\n+                break;\n+            case DomainRouter:\n+                eventType = EventTypes.EVENT_ROUTER_DIAGNOSTICS;\n+                break;\n+        }\n+        return eventType;\n+    }\n+\n+    @Override\n+    public String getEventDescription() {\n+        return \"Getting diagnostics data files from system vm: \" + this._uuidMgr.getUuid(VirtualMachine.class, getId());\n+    }\n+\n+    @Override\n+    public ApiCommandJobType getInstanceType() {\n+        return ApiCommandJobType.SystemVm;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/api/src/main/java/org/apache/cloudstack/api/command/admin/diagnostics/GetDiagnosticsDataCmd.java",
                "sha": "dc058ff0a28bceba9efcab3b55046e3e41953874",
                "status": "added"
            },
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/api/src/main/java/org/apache/cloudstack/api/response/diagnostics/GetDiagnosticsDataResponse.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/main/java/org/apache/cloudstack/api/response/diagnostics/GetDiagnosticsDataResponse.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "api/src/main/java/org/apache/cloudstack/api/response/diagnostics/GetDiagnosticsDataResponse.java",
                "patch": "@@ -0,0 +1,40 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.api.response.diagnostics;\n+\n+import com.cloud.serializer.Param;\n+import com.cloud.vm.VirtualMachine;\n+import com.google.gson.annotations.SerializedName;\n+\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.BaseResponse;\n+import org.apache.cloudstack.api.EntityReference;\n+\n+@EntityReference(value = VirtualMachine.class)\n+public class GetDiagnosticsDataResponse extends BaseResponse {\n+    @SerializedName(ApiConstants.URL)\n+    @Param(description = \"Storage URL to download retrieve diagnostics data files\")\n+    private String url;\n+\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    public void setUrl(String url) {\n+        this.url = url;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/api/src/main/java/org/apache/cloudstack/api/response/diagnostics/GetDiagnosticsDataResponse.java",
                "sha": "4d6e674b5b3f6be335fe10baf0041acc27e2a80c",
                "status": "added"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/api/src/main/java/org/apache/cloudstack/diagnostics/DiagnosticsService.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/main/java/org/apache/cloudstack/diagnostics/DiagnosticsService.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 2,
                "filename": "api/src/main/java/org/apache/cloudstack/diagnostics/DiagnosticsService.java",
                "patch": "@@ -18,12 +18,16 @@\n //\n package org.apache.cloudstack.diagnostics;\n \n-import org.apache.cloudstack.api.command.admin.diagnostics.RunDiagnosticsCmd;\n-\n import java.util.Map;\n \n+import org.apache.cloudstack.api.command.admin.diagnostics.GetDiagnosticsDataCmd;\n+import org.apache.cloudstack.api.command.admin.diagnostics.RunDiagnosticsCmd;\n+\n public interface DiagnosticsService {\n \n+    String DIAGNOSTICS_DIRECTORY = \"diagnostics\";\n+\n     Map<String, String> runDiagnosticsCommand(RunDiagnosticsCmd cmd);\n \n+    String getDiagnosticsDataCommand(GetDiagnosticsDataCmd getDiagnosticsDataCmd);\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/api/src/main/java/org/apache/cloudstack/diagnostics/DiagnosticsService.java",
                "sha": "fb1d03b559b55e2be732b9c7fc29bfbc48a086c0",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/core/src/main/java/com/cloud/agent/resource/virtualnetwork/VRScripts.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/core/src/main/java/com/cloud/agent/resource/virtualnetwork/VRScripts.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "core/src/main/java/com/cloud/agent/resource/virtualnetwork/VRScripts.java",
                "patch": "@@ -70,4 +70,6 @@\n     public static final String VR_CFG = \"vr_cfg.sh\";\n \n     public static final String DIAGNOSTICS = \"diagnostics.py\";\n+    public static final String RETRIEVE_DIAGNOSTICS = \"get_diagnostics_files.py\";\n+    public static final String VR_FILE_CLEANUP = \"cleanup.sh\";\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/core/src/main/java/com/cloud/agent/resource/virtualnetwork/VRScripts.java",
                "sha": "b9d6487de561678f59935ee96094902f9702d784",
                "status": "modified"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/core/src/main/java/com/cloud/agent/resource/virtualnetwork/VirtualRoutingResource.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/core/src/main/java/com/cloud/agent/resource/virtualnetwork/VirtualRoutingResource.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 1,
                "filename": "core/src/main/java/com/cloud/agent/resource/virtualnetwork/VirtualRoutingResource.java",
                "patch": "@@ -23,8 +23,11 @@\n import java.net.InetSocketAddress;\n import java.nio.channels.SocketChannel;\n \n+import org.apache.cloudstack.diagnostics.DeleteFileInVrCommand;\n import org.apache.cloudstack.diagnostics.DiagnosticsAnswer;\n import org.apache.cloudstack.diagnostics.DiagnosticsCommand;\n+import org.apache.cloudstack.diagnostics.PrepareFilesAnswer;\n+import org.apache.cloudstack.diagnostics.PrepareFilesCommand;\n import org.joda.time.Duration;\n import java.util.ArrayList;\n import java.util.HashMap;\n@@ -196,7 +199,11 @@ private Answer executeQueryCommand(NetworkElementCommand cmd) {\n         } else if (cmd instanceof GetRouterAlertsCommand) {\n             return execute((GetRouterAlertsCommand)cmd);\n         } else if (cmd instanceof DiagnosticsCommand) {\n-            return execute((DiagnosticsCommand)cmd);\n+            return execute((DiagnosticsCommand) cmd);\n+        } else if (cmd instanceof PrepareFilesCommand) {\n+            return execute((PrepareFilesCommand) cmd);\n+        } else if (cmd instanceof DeleteFileInVrCommand) {\n+            return execute((DeleteFileInVrCommand)cmd);\n         } else {\n             s_logger.error(\"Unknown query command in VirtualRoutingResource!\");\n             return Answer.createUnsupportedCommandAnswer(cmd);\n@@ -306,6 +313,24 @@ private Answer execute(DiagnosticsCommand cmd) {\n         return new DiagnosticsAnswer(cmd, result.isSuccess(), result.getDetails());\n     }\n \n+    private Answer execute(PrepareFilesCommand cmd) {\n+        String fileList = String.join(\" \", cmd.getFilesToRetrieveList());\n+        _eachTimeout = Duration.standardSeconds(cmd.getTimeout());\n+        final ExecutionResult result = _vrDeployer.executeInVR(cmd.getRouterAccessIp(), VRScripts.RETRIEVE_DIAGNOSTICS, fileList, _eachTimeout);\n+        if (result.isSuccess()) {\n+            return new PrepareFilesAnswer(cmd, true, result.getDetails());\n+        }\n+        return new PrepareFilesAnswer(cmd, false, result.getDetails());\n+    }\n+\n+    private Answer execute(DeleteFileInVrCommand cmd) {\n+        ExecutionResult result = _vrDeployer.executeInVR(cmd.getRouterAccessIp(), VRScripts.VR_FILE_CLEANUP, cmd.getFileName());\n+        if (result.isSuccess()) {\n+            return new Answer(cmd, result.isSuccess(), result.getDetails());\n+        }\n+        return new Answer(cmd, result.isSuccess(), result.getDetails());\n+    }\n+\n     private Answer execute(GetDomRVersionCmd cmd) {\n         final ExecutionResult result = _vrDeployer.executeInVR(cmd.getRouterAccessIp(), VRScripts.VERSION, null);\n         if (!result.isSuccess()) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/core/src/main/java/com/cloud/agent/resource/virtualnetwork/VirtualRoutingResource.java",
                "sha": "191a62263f36fbcb424324f79262d4169db971f3",
                "status": "modified"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/core/src/main/java/org/apache/cloudstack/diagnostics/CopyToSecondaryStorageAnswer.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/core/src/main/java/org/apache/cloudstack/diagnostics/CopyToSecondaryStorageAnswer.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/cloudstack/diagnostics/CopyToSecondaryStorageAnswer.java",
                "patch": "@@ -0,0 +1,26 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.diagnostics;\n+\n+import com.cloud.agent.api.Answer;\n+\n+public class CopyToSecondaryStorageAnswer extends Answer {\n+\n+    public CopyToSecondaryStorageAnswer(CopyToSecondaryStorageCommand command, boolean success, String details) {\n+        super(command, success, details);\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/core/src/main/java/org/apache/cloudstack/diagnostics/CopyToSecondaryStorageAnswer.java",
                "sha": "044eccbbc979e444573a0e0cb0c0b53536db59fe",
                "status": "added"
            },
            {
                "additions": 53,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/core/src/main/java/org/apache/cloudstack/diagnostics/CopyToSecondaryStorageCommand.java",
                "changes": 53,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/core/src/main/java/org/apache/cloudstack/diagnostics/CopyToSecondaryStorageCommand.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/cloudstack/diagnostics/CopyToSecondaryStorageCommand.java",
                "patch": "@@ -0,0 +1,53 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.diagnostics;\n+\n+import org.apache.cloudstack.storage.command.StorageSubSystemCommand;\n+\n+public class CopyToSecondaryStorageCommand extends StorageSubSystemCommand {\n+    private String secondaryStorageUrl;\n+    private String systemVmIp;\n+    private String fileName;\n+\n+    public CopyToSecondaryStorageCommand(String secondaryStorageUrl, String systemVmIp, String fileName) {\n+        this.secondaryStorageUrl = secondaryStorageUrl;\n+        this.systemVmIp = systemVmIp;\n+        this.fileName = fileName;\n+    }\n+\n+    public String getSecondaryStorageUrl() {\n+        return secondaryStorageUrl;\n+    }\n+\n+    public String getSystemVmIp() {\n+        return systemVmIp;\n+    }\n+\n+    public String getFileName() {\n+        return fileName;\n+    }\n+\n+    @Override\n+    public boolean executeInSequence() {\n+        return false;\n+    }\n+\n+    @Override\n+    public void setExecuteInSequence(boolean inSeq) {\n+\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/core/src/main/java/org/apache/cloudstack/diagnostics/CopyToSecondaryStorageCommand.java",
                "sha": "8e76aad580f7f1658cbc4e3e1a6988ea76d9a6dc",
                "status": "added"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/core/src/main/java/org/apache/cloudstack/diagnostics/DeleteFileInVrCommand.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/core/src/main/java/org/apache/cloudstack/diagnostics/DeleteFileInVrCommand.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/cloudstack/diagnostics/DeleteFileInVrCommand.java",
                "patch": "@@ -0,0 +1,36 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.diagnostics;\n+\n+import com.cloud.agent.api.routing.NetworkElementCommand;\n+\n+public class DeleteFileInVrCommand extends NetworkElementCommand {\n+    private String fileName;\n+\n+    public DeleteFileInVrCommand(String fileName) {\n+        this.fileName = fileName;\n+    }\n+\n+    public String getFileName() {\n+        return fileName;\n+    }\n+\n+    @Override\n+    public boolean isQuery() {\n+        return true;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/core/src/main/java/org/apache/cloudstack/diagnostics/DeleteFileInVrCommand.java",
                "sha": "025168b6f09398d2c43d897138471886da5dc047",
                "status": "added"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/core/src/main/java/org/apache/cloudstack/diagnostics/PrepareFilesAnswer.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/core/src/main/java/org/apache/cloudstack/diagnostics/PrepareFilesAnswer.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/cloudstack/diagnostics/PrepareFilesAnswer.java",
                "patch": "@@ -0,0 +1,27 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.diagnostics;\n+\n+import com.cloud.agent.api.Answer;\n+\n+public class PrepareFilesAnswer extends Answer {\n+\n+    public PrepareFilesAnswer(PrepareFilesCommand command, boolean success, String details) {\n+        super(command, success, details);\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/core/src/main/java/org/apache/cloudstack/diagnostics/PrepareFilesAnswer.java",
                "sha": "784a84aa8aeb6e1610ea3296ffb5c57d9049420f",
                "status": "added"
            },
            {
                "additions": 44,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/core/src/main/java/org/apache/cloudstack/diagnostics/PrepareFilesCommand.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/core/src/main/java/org/apache/cloudstack/diagnostics/PrepareFilesCommand.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/cloudstack/diagnostics/PrepareFilesCommand.java",
                "patch": "@@ -0,0 +1,44 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.diagnostics;\n+\n+import java.util.List;\n+\n+import com.cloud.agent.api.routing.NetworkElementCommand;\n+\n+public class PrepareFilesCommand extends NetworkElementCommand {\n+    private List<String> filesToRetrieveList;\n+    private long timeout;\n+\n+    public PrepareFilesCommand(List<String> filesToRetrieve, long timeout) {\n+        this.filesToRetrieveList = filesToRetrieve;\n+        this.timeout = timeout;\n+    }\n+\n+    public List<String> getFilesToRetrieveList() {\n+        return filesToRetrieveList;\n+    }\n+\n+    public long getTimeout() {\n+        return timeout;\n+    }\n+\n+    @Override\n+    public boolean isQuery() {\n+        return true;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/core/src/main/java/org/apache/cloudstack/diagnostics/PrepareFilesCommand.java",
                "sha": "db65544f948e49f5651c9ebb0e40a16f3f3d8f60",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "patch": "@@ -226,6 +226,7 @@\n     public static final String SSHKEYSPATH = \"/root/.ssh\";\n     public static final String SSHPRVKEYPATH = SSHKEYSPATH + File.separator + \"id_rsa.cloud\";\n     public static final String SSHPUBKEYPATH = SSHKEYSPATH + File.separator + \"id_rsa.pub.cloud\";\n+    public static final String DEFAULTDOMRSSHPORT = \"3922\";\n \n     public static final String BASH_SCRIPT_PATH = \"/bin/bash\";\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "sha": "76db243ee6b7b4372b84b836e319544252c7849c",
                "status": "modified"
            },
            {
                "additions": 87,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtCopyToSecondaryStorageWrapper.java",
                "changes": 87,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtCopyToSecondaryStorageWrapper.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtCopyToSecondaryStorageWrapper.java",
                "patch": "@@ -0,0 +1,87 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.hypervisor.kvm.resource.wrapper;\n+\n+import static org.apache.cloudstack.diagnostics.DiagnosticsHelper.setDirFilePermissions;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.apache.cloudstack.diagnostics.CopyToSecondaryStorageAnswer;\n+import org.apache.cloudstack.diagnostics.CopyToSecondaryStorageCommand;\n+import org.apache.cloudstack.diagnostics.DiagnosticsService;\n+import org.apache.log4j.Logger;\n+\n+import com.cloud.agent.api.Answer;\n+import com.cloud.hypervisor.kvm.resource.LibvirtComputingResource;\n+import com.cloud.hypervisor.kvm.storage.KVMStoragePool;\n+import com.cloud.hypervisor.kvm.storage.KVMStoragePoolManager;\n+import com.cloud.resource.CommandWrapper;\n+import com.cloud.resource.ResourceWrapper;\n+import com.cloud.utils.ssh.SshHelper;\n+\n+@ResourceWrapper(handles = CopyToSecondaryStorageCommand.class)\n+public class LibvirtCopyToSecondaryStorageWrapper extends CommandWrapper<CopyToSecondaryStorageCommand, Answer, LibvirtComputingResource> {\n+    public static final Logger LOGGER = Logger.getLogger(LibvirtCopyToSecondaryStorageWrapper.class);\n+\n+    @Override\n+    public Answer execute(CopyToSecondaryStorageCommand command, LibvirtComputingResource libvirtResource) {\n+\n+        String diagnosticsZipFile = command.getFileName();\n+        String vmSshIp = command.getSystemVmIp();\n+        String secondaryStorageUrl = command.getSecondaryStorageUrl();\n+\n+        KVMStoragePoolManager storagePoolMgr = libvirtResource.getStoragePoolMgr();\n+        KVMStoragePool secondaryPool;\n+\n+        boolean success;\n+\n+        secondaryPool = storagePoolMgr.getStoragePoolByURI(secondaryStorageUrl);\n+        String mountPoint = secondaryPool.getLocalPath();\n+\n+        // /mnt/SecStorage/uuid/diagnostics_data\n+        String dataDirectoryInSecondaryStore = String.format(\"%s/%s\", mountPoint, DiagnosticsService.DIAGNOSTICS_DIRECTORY);\n+        try {\n+            File dataDirectory = new File(dataDirectoryInSecondaryStore);\n+            boolean existsInSecondaryStore = dataDirectory.exists() || dataDirectory.mkdir();\n+\n+            // Modify directory file permissions\n+            Path path = Paths.get(dataDirectory.getAbsolutePath());\n+            setDirFilePermissions(path);\n+            if (existsInSecondaryStore) {\n+                LOGGER.info(String.format(\"Copying %s from %s to secondary store %s\", diagnosticsZipFile, vmSshIp, secondaryStorageUrl));\n+                int port = Integer.valueOf(LibvirtComputingResource.DEFAULTDOMRSSHPORT);\n+                File permKey = new File(LibvirtComputingResource.SSHPRVKEYPATH);\n+                SshHelper.scpFrom(vmSshIp, port, \"root\", permKey, dataDirectoryInSecondaryStore, diagnosticsZipFile);\n+            }\n+            // Verify File copy to Secondary Storage\n+            File fileInSecondaryStore = new File(dataDirectoryInSecondaryStore + diagnosticsZipFile.replace(\"/root\", \"\"));\n+            if (fileInSecondaryStore.exists()) {\n+                return new CopyToSecondaryStorageAnswer(command, true, \"File copied to secondary storage successfully\");\n+            } else {\n+                return new CopyToSecondaryStorageAnswer(command, false, \"Zip file \" + diagnosticsZipFile.replace(\"/root/\", \"\") + \"not found in secondary storage\");\n+            }\n+\n+        } catch (Exception e) {\n+            return new CopyToSecondaryStorageAnswer(command, false, e.getMessage());\n+        } finally {\n+            // unmount secondary storage from hypervisor host\n+            secondaryPool.delete();\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtCopyToSecondaryStorageWrapper.java",
                "sha": "a6baa1c17855a25ee950b48859e0b715272a4e9a",
                "status": "added"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/manager/VmwareStorageManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/manager/VmwareStorageManagerImpl.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/manager/VmwareStorageManagerImpl.java",
                "patch": "@@ -109,6 +109,8 @@ public boolean execute(VmwareHostService hostService, CreateEntityDownloadURLCom\n             newPath = createOvaForVolume((VolumeObjectTO)data, timeout);\n         } else if (data.getObjectType() == DataObjectType.TEMPLATE) {\n             newPath = createOvaForTemplate((TemplateObjectTO)data, timeout);\n+        } else if (data.getObjectType() == DataObjectType.ARCHIVE) {\n+            newPath = cmd.getInstallPath();\n         }\n         if (newPath != null) {\n             cmd.setInstallPath(newPath);",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/manager/VmwareStorageManagerImpl.java",
                "sha": "97b5088ccae8349f5d8acb1fd60153cf15b0fbc2",
                "status": "modified"
            },
            {
                "additions": 67,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/CitrixResourceBase.java",
                "changes": 67,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/CitrixResourceBase.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/CitrixResourceBase.java",
                "patch": "@@ -49,6 +49,9 @@\n import javax.xml.parsers.DocumentBuilderFactory;\n import javax.xml.parsers.ParserConfigurationException;\n \n+import org.apache.cloudstack.diagnostics.CopyToSecondaryStorageAnswer;\n+import org.apache.cloudstack.diagnostics.CopyToSecondaryStorageCommand;\n+import org.apache.cloudstack.diagnostics.DiagnosticsService;\n import org.apache.cloudstack.hypervisor.xenserver.ExtraConfigurationUtility;\n import org.apache.cloudstack.storage.to.TemplateObjectTO;\n import org.apache.cloudstack.storage.to.VolumeObjectTO;\n@@ -201,6 +204,7 @@ public String toString() {\n     }\n \n     private final static int BASE_TO_CONVERT_BYTES_INTO_KILOBYTES = 1024;\n+    private final static String BASE_MOUNT_POINT_ON_REMOTE = \"/var/cloud_mount/\";\n \n     private static final XenServerConnectionPool ConnPool = XenServerConnectionPool.getInstance();\n     // static min values for guests on xenserver\n@@ -5612,4 +5616,67 @@ public boolean attachConfigDriveToMigratedVm(Connection conn, String vmName, Str\n \n     }\n \n+    /**\n+     * Get Diagnostics Data API\n+     * Copy zip file from system vm and copy file directly to secondary storage\n+     */\n+    public Answer copyDiagnosticsFileToSecondaryStorage(Connection conn, CopyToSecondaryStorageCommand cmd) {\n+        String secondaryStorageUrl = cmd.getSecondaryStorageUrl();\n+        String vmIP = cmd.getSystemVmIp();\n+        String diagnosticsZipFile = cmd.getFileName();\n+\n+        String localDir = null;\n+        boolean success;\n+\n+        // Mount Secondary storage\n+        String secondaryStorageMountPath = null;\n+        try {\n+            URI uri = new URI(secondaryStorageUrl);\n+            secondaryStorageMountPath = uri.getHost() + \":\" + uri.getPath();\n+            localDir = BASE_MOUNT_POINT_ON_REMOTE + UUID.nameUUIDFromBytes(secondaryStorageMountPath.getBytes());\n+            String mountPoint = mountNfs(conn, secondaryStorageMountPath, localDir);\n+            if (org.apache.commons.lang.StringUtils.isBlank(mountPoint)) {\n+                return new CopyToSecondaryStorageAnswer(cmd, false, \"Could not mount secondary storage \" + secondaryStorageMountPath + \" on host \" + localDir);\n+            }\n+\n+            String dataDirectoryInSecondaryStore = localDir + File.separator + DiagnosticsService.DIAGNOSTICS_DIRECTORY;\n+            final CopyToSecondaryStorageAnswer answer;\n+            final String scpResult = callHostPlugin(conn, \"vmops\", \"secureCopyToHost\", \"hostfilepath\", dataDirectoryInSecondaryStore,\n+                    \"srcip\", vmIP, \"srcfilepath\", cmd.getFileName()).toLowerCase();\n+\n+            if (scpResult.contains(\"success\")) {\n+                answer = new CopyToSecondaryStorageAnswer(cmd, true, \"File copied to secondary storage successfully.\");\n+            } else {\n+                answer = new CopyToSecondaryStorageAnswer(cmd, false, \"Zip file \" + diagnosticsZipFile.replace(\"/root/\", \"\") + \"could not be copied to secondary storage due to \" + scpResult);\n+            }\n+            umountNfs(conn, secondaryStorageMountPath, localDir);\n+            localDir = null;\n+            return answer;\n+        } catch (Exception e) {\n+            String msg = \"Exception caught zip file copy to secondary storage URI: \" + secondaryStorageUrl + \"Exception : \" + e;\n+            s_logger.error(msg, e);\n+            return new CopyToSecondaryStorageAnswer(cmd, false, msg);\n+        } finally {\n+            if (localDir != null) umountNfs(conn, secondaryStorageMountPath, localDir);\n+        }\n+    }\n+\n+    private String mountNfs(Connection conn, String remoteDir, String localDir) {\n+        if (localDir == null) {\n+            localDir = BASE_MOUNT_POINT_ON_REMOTE + UUID.nameUUIDFromBytes(remoteDir.getBytes());\n+        }\n+        return callHostPlugin(conn, \"cloud-plugin-storage\", \"mountNfsSecondaryStorage\", \"localDir\", localDir, \"remoteDir\", remoteDir);\n+    }\n+\n+    // Unmount secondary storage from host\n+    private void umountNfs(Connection conn, String remoteDir, String localDir) {\n+        if (localDir == null) {\n+            localDir = BASE_MOUNT_POINT_ON_REMOTE + UUID.nameUUIDFromBytes(remoteDir.getBytes());\n+        }\n+        String result = callHostPlugin(conn, \"cloud-plugin-storage\", \"umountNfsSecondaryStorage\", \"localDir\", localDir, \"remoteDir\", remoteDir);\n+        if (org.apache.commons.lang.StringUtils.isBlank(result)) {\n+            String errMsg = \"Could not umount secondary storage \" + remoteDir + \" on host \" + localDir;\n+            s_logger.warn(errMsg);\n+        }\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/CitrixResourceBase.java",
                "sha": "ea168d5275f1b09e9d17407b446024ce664ab87f",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/XenServerStorageProcessor.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/XenServerStorageProcessor.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 15,
                "filename": "plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/XenServerStorageProcessor.java",
                "patch": "@@ -31,21 +31,6 @@\n import java.util.Set;\n import java.util.UUID;\n \n-import org.apache.commons.lang3.BooleanUtils;\n-import org.apache.log4j.Logger;\n-import org.apache.xmlrpc.XmlRpcException;\n-\n-import com.google.common.annotations.VisibleForTesting;\n-import com.xensource.xenapi.Connection;\n-import com.xensource.xenapi.SR;\n-import com.xensource.xenapi.Types;\n-import com.xensource.xenapi.Types.BadServerResponse;\n-import com.xensource.xenapi.Types.VmPowerState;\n-import com.xensource.xenapi.Types.XenAPIException;\n-import com.xensource.xenapi.VBD;\n-import com.xensource.xenapi.VDI;\n-import com.xensource.xenapi.VM;\n-\n import org.apache.cloudstack.agent.directdownload.DirectDownloadCommand;\n import org.apache.cloudstack.storage.command.AttachAnswer;\n import org.apache.cloudstack.storage.command.AttachCommand;\n@@ -67,6 +52,9 @@\n import org.apache.cloudstack.storage.to.SnapshotObjectTO;\n import org.apache.cloudstack.storage.to.TemplateObjectTO;\n import org.apache.cloudstack.storage.to.VolumeObjectTO;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.apache.log4j.Logger;\n+import org.apache.xmlrpc.XmlRpcException;\n \n import com.cloud.agent.api.Answer;\n import com.cloud.agent.api.to.DataObjectType;\n@@ -86,12 +74,24 @@\n import com.cloud.storage.resource.StorageProcessor;\n import com.cloud.utils.exception.CloudRuntimeException;\n import com.cloud.utils.storage.S3.ClientOptions;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.xensource.xenapi.Connection;\n+import com.xensource.xenapi.SR;\n+import com.xensource.xenapi.Types;\n+import com.xensource.xenapi.Types.BadServerResponse;\n+import com.xensource.xenapi.Types.VmPowerState;\n+import com.xensource.xenapi.Types.XenAPIException;\n+import com.xensource.xenapi.VBD;\n+import com.xensource.xenapi.VDI;\n+import com.xensource.xenapi.VM;\n \n public class XenServerStorageProcessor implements StorageProcessor {\n     private static final Logger s_logger = Logger.getLogger(XenServerStorageProcessor.class);\n     protected CitrixResourceBase hypervisorResource;\n     protected String BaseMountPointOnHost = \"/var/run/cloud_mount\";\n \n+    protected final static String BASE_MOUNT_POINT_ON_REMOTE = \"/var/cloud_mount/\";\n+\n     public XenServerStorageProcessor(final CitrixResourceBase resource) {\n         hypervisorResource = resource;\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/XenServerStorageProcessor.java",
                "sha": "458b7d6377a2f68fa89c9c65b8438729b85e435f",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/Xenserver625StorageProcessor.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/Xenserver625StorageProcessor.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 5,
                "filename": "plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/Xenserver625StorageProcessor.java",
                "patch": "@@ -71,7 +71,7 @@ public Xenserver625StorageProcessor(final CitrixResourceBase resource) {\n \n     private void mountNfs(Connection conn, String remoteDir, String localDir) {\n         if (localDir == null) {\n-            localDir = \"/var/cloud_mount/\" + UUID.nameUUIDFromBytes(remoteDir.getBytes());\n+            localDir = BASE_MOUNT_POINT_ON_REMOTE + UUID.nameUUIDFromBytes(remoteDir.getBytes());\n         }\n         String result = hypervisorResource.callHostPluginAsync(conn, \"cloud-plugin-storage\", \"mountNfsSecondaryStorage\", 100 * 1000, \"localDir\", localDir, \"remoteDir\", remoteDir);\n         if (StringUtils.isBlank(result)) {\n@@ -241,7 +241,7 @@ protected void unplugPbd(Connection conn, PBD pbd) {\n     }\n \n     protected SR createFileSr(Connection conn, String remotePath, String dir) {\n-        String localDir = \"/var/cloud_mount/\" + UUID.nameUUIDFromBytes(remotePath.getBytes());\n+        String localDir = BASE_MOUNT_POINT_ON_REMOTE + UUID.nameUUIDFromBytes(remotePath.getBytes());\n         mountNfs(conn, remotePath, localDir);\n         return createFileSR(conn, localDir + \"/\" + dir);\n     }\n@@ -563,7 +563,7 @@ public Answer backupSnapshot(final CopyCommand cmd) {\n                 SR snapshotSr = null;\n                 Task task = null;\n                 try {\n-                    final String localDir = \"/var/cloud_mount/\" + UUID.nameUUIDFromBytes(secondaryStorageMountPath.getBytes());\n+                    final String localDir = BASE_MOUNT_POINT_ON_REMOTE + UUID.nameUUIDFromBytes(secondaryStorageMountPath.getBytes());\n                     mountNfs(conn, secondaryStorageMountPath, localDir);\n                     final boolean result = makeDirectory(conn, localDir + \"/\" + folder);\n                     if (!result) {\n@@ -1074,7 +1074,7 @@ public Answer createTemplateFromSnapshot(final CopyCommand cmd) {\n             srcSr = createFileSr(conn, srcUri.getHost() + \":\" + srcUri.getPath(), srcDir);\n \n             final String destNfsPath = destUri.getHost() + \":\" + destUri.getPath();\n-            final String localDir = \"/var/cloud_mount/\" + UUID.nameUUIDFromBytes(destNfsPath.getBytes());\n+            final String localDir = BASE_MOUNT_POINT_ON_REMOTE + UUID.nameUUIDFromBytes(destNfsPath.getBytes());\n \n             mountNfs(conn, destUri.getHost() + \":\" + destUri.getPath(), localDir);\n             makeDirectory(conn, localDir + \"/\" + destDir);\n@@ -1216,7 +1216,7 @@ private Answer createTemplateFromSnapshot2(final CopyCommand cmd) {\n             srcSr = hypervisorResource.getIscsiSR(conn, iScsiName, storageHost, iScsiName, chapInitiatorUsername, chapInitiatorSecret, false, srType, true);\n \n             final String destNfsPath = destUri.getHost() + \":\" + destUri.getPath();\n-            final String localDir = \"/var/cloud_mount/\" + UUID.nameUUIDFromBytes(destNfsPath.getBytes());\n+            final String localDir = BASE_MOUNT_POINT_ON_REMOTE + UUID.nameUUIDFromBytes(destNfsPath.getBytes());\n \n             mountNfs(conn, destNfsPath, localDir);\n             makeDirectory(conn, localDir + \"/\" + destDir);",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/Xenserver625StorageProcessor.java",
                "sha": "a2c8b708bf3ab0d71a1e86e80c4b04339107e3d3",
                "status": "modified"
            },
            {
                "additions": 43,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/wrapper/xenbase/CitrixCoppyToSecondaryStorageCommandWrapper.java",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/wrapper/xenbase/CitrixCoppyToSecondaryStorageCommandWrapper.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/wrapper/xenbase/CitrixCoppyToSecondaryStorageCommandWrapper.java",
                "patch": "@@ -0,0 +1,43 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package com.cloud.hypervisor.xenserver.resource.wrapper.xenbase;\n+\n+import org.apache.cloudstack.diagnostics.CopyToSecondaryStorageCommand;\n+import org.apache.log4j.Logger;\n+\n+import com.cloud.agent.api.Answer;\n+import com.cloud.hypervisor.xenserver.resource.CitrixResourceBase;\n+import com.cloud.resource.CommandWrapper;\n+import com.cloud.resource.ResourceWrapper;\n+import com.xensource.xenapi.Connection;\n+\n+\n+@ResourceWrapper(handles = CopyToSecondaryStorageCommand.class)\n+public class CitrixCoppyToSecondaryStorageCommandWrapper extends CommandWrapper<CopyToSecondaryStorageCommand, Answer, CitrixResourceBase> {\n+    public static final Logger LOGGER = Logger.getLogger(CitrixCoppyToSecondaryStorageCommandWrapper.class);\n+\n+    @Override\n+    public Answer execute(CopyToSecondaryStorageCommand cmd, CitrixResourceBase citrixResourceBase) {\n+        final Connection conn = citrixResourceBase.getConnection();\n+        String msg = String.format(\"Copying diagnostics zip file %s from system vm %s to secondary storage %s\", cmd.getFileName(), cmd.getSystemVmIp(), cmd.getSecondaryStorageUrl());\n+        LOGGER.debug(msg);\n+        // Allow the hypervisor host to copy file from system VM to mounted secondary storage\n+        return citrixResourceBase.copyDiagnosticsFileToSecondaryStorage(conn, cmd);\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/wrapper/xenbase/CitrixCoppyToSecondaryStorageCommandWrapper.java",
                "sha": "cacab0f75a69b694cd9cff030aadcc70da93c533",
                "status": "added"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/scripts/vm/hypervisor/xenserver/vmops",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/scripts/vm/hypervisor/xenserver/vmops?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 1,
                "filename": "scripts/vm/hypervisor/xenserver/vmops",
                "patch": "@@ -203,6 +203,33 @@ def createFile(session, args):\n \n     return txt\n \n+@echo\n+def secureCopyToHost(session, args):\n+    host_filepath = args['hostfilepath']\n+    src_ip = args['srcip']\n+    src_filepath = args['srcfilepath']\n+    src_target = \"root@\" + src_ip + \":\" + src_filepath\n+    # Make any directories as needed\n+    if not os.path.isdir(host_filepath):\n+        try:\n+            os.makedirs(host_filepath)\n+        except OSError, (errno, strerror):\n+            if not os.path.isdir(host_filepath):\n+                errMsg = \"OSError while creating \" + host_filepath + \" with errno: \" + str(errno) + \" and strerr: \" + strerror\n+                logging.debug(errMsg)\n+                return \"fail# Cannot create the directory to copy file to \" + host_filepath\n+\n+    # Copy file to created directory\n+    txt=\"\"\n+    try:\n+        txt = util.pread2(['scp','-P','3922','-q','-o','StrictHostKeyChecking=no','-i','/root/.ssh/id_rsa.cloud', src_target, host_filepath])\n+        util.pread2(['chmod', 'a+r', os.path.join(host_filepath, os.path.basename(src_filepath))])\n+        txt = 'success#' + txt\n+    except:\n+        logging.error(\"failed to scp source target \" + src_target + \" to host at file path \" + host_filepath)\n+        txt = 'fail#' + txt\n+    return txt\n+\n @echo\n def createFileInDomr(session, args):\n     src_filepath = args['srcfilepath']\n@@ -1560,4 +1587,5 @@ if __name__ == \"__main__\":\n                             \"setLinkLocalIP\":setLinkLocalIP,\n                             \"cleanup_rules\":cleanup_rules,\n                             \"createFileInDomr\":createFileInDomr,\n-                            \"kill_copy_process\":kill_copy_process})\n+                            \"kill_copy_process\":kill_copy_process,\n+                            \"secureCopyToHost\":secureCopyToHost})",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/scripts/vm/hypervisor/xenserver/vmops",
                "sha": "dd03ded95927528e32ceefa69dd4eef2fc3b098e",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/server/src/main/java/com/cloud/server/StatsCollector.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/server/StatsCollector.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "server/src/main/java/com/cloud/server/StatsCollector.java",
                "patch": "@@ -1377,6 +1377,20 @@ public long imageStoreCurrentFreeCapacity(DataStore imageStore) {\n         return imageStoreStats != null ? Math.max(0, imageStoreStats.getCapacityBytes() - imageStoreStats.getByteUsed()) : 0;\n     }\n \n+    /**\n+     * Calculates secondary storage disk capacity against a configurable threshold instead of the hardcoded default 95 % value\n+     * @param imageStore secondary storage\n+     * @param storeCapThreshold the threshold capacity for computing if secondary storage has enough space to accommodate the @this object\n+     * @return\n+     */\n+    public boolean imageStoreHasEnoughCapacity(DataStore imageStore, Double storeCapThreshold) {\n+        StorageStats imageStoreStats = _storageStats.get(imageStore.getId());\n+        if (imageStoreStats != null && (imageStoreStats.getByteUsed() / (imageStoreStats.getCapacityBytes() * 1.0)) <= storeCapThreshold) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n     /**\n      * Sends VMs metrics to the configured graphite host.\n      */",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/server/src/main/java/com/cloud/server/StatsCollector.java",
                "sha": "b2f244229e32a32fb4bf2f51a039f3716d5e552a",
                "status": "modified"
            },
            {
                "additions": 80,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/server/src/main/java/org/apache/cloudstack/diagnostics/DiagnosticsHelper.java",
                "changes": 80,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/org/apache/cloudstack/diagnostics/DiagnosticsHelper.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "server/src/main/java/org/apache/cloudstack/diagnostics/DiagnosticsHelper.java",
                "patch": "@@ -0,0 +1,80 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.diagnostics;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.BasicFileAttributeView;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.nio.file.attribute.PosixFileAttributes;\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.log4j.Logger;\n+\n+import com.cloud.utils.script.Script2;\n+\n+public class DiagnosticsHelper {\n+    private static final Logger LOGGER = Logger.getLogger(DiagnosticsHelper.class);\n+\n+    public static void setDirFilePermissions(Path path) throws java.io.IOException {\n+        Set<PosixFilePermission> perms = Files.readAttributes(path, PosixFileAttributes.class).permissions();\n+        perms.add(PosixFilePermission.OWNER_WRITE);\n+        perms.add(PosixFilePermission.OWNER_READ);\n+        perms.add(PosixFilePermission.OWNER_EXECUTE);\n+        perms.add(PosixFilePermission.GROUP_WRITE);\n+        perms.add(PosixFilePermission.GROUP_READ);\n+        perms.add(PosixFilePermission.GROUP_EXECUTE);\n+        perms.add(PosixFilePermission.OTHERS_WRITE);\n+        perms.add(PosixFilePermission.OTHERS_READ);\n+        perms.add(PosixFilePermission.OTHERS_EXECUTE);\n+        Files.setPosixFilePermissions(path, perms);\n+    }\n+\n+    public static void umountSecondaryStorage(String mountPoint) {\n+        if (StringUtils.isNotBlank(mountPoint)) {\n+            Script2 umountCmd = new Script2(\"/bin/bash\", LOGGER);\n+            umountCmd.add(\"-c\");\n+            String cmdLine = String.format(\"umount %s\", mountPoint);\n+            umountCmd.add(cmdLine);\n+            umountCmd.execute();\n+        }\n+    }\n+\n+    public static Long getFileCreationTime(File file) throws IOException {\n+        Path p = Paths.get(file.getAbsolutePath());\n+        BasicFileAttributes view = Files.getFileAttributeView(p, BasicFileAttributeView.class).readAttributes();\n+        FileTime fileTime = view.creationTime();\n+        return fileTime.toMillis();\n+    }\n+\n+    public static Long getTimeDifference(File f) {\n+        Long fileCreationTime = null;\n+        try {\n+            fileCreationTime = getFileCreationTime(f);\n+        } catch (IOException e) {\n+            LOGGER.error(\"File not found: \" + e);\n+        }\n+        return (fileCreationTime != null) ? (System.currentTimeMillis() - fileCreationTime) / 1000 : 1L;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/server/src/main/java/org/apache/cloudstack/diagnostics/DiagnosticsHelper.java",
                "sha": "282eee202cfc442e44f68b82c5b81bbd87eb898e",
                "status": "added"
            },
            {
                "additions": 398,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/server/src/main/java/org/apache/cloudstack/diagnostics/DiagnosticsServiceImpl.java",
                "changes": 406,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/org/apache/cloudstack/diagnostics/DiagnosticsServiceImpl.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 8,
                "filename": "server/src/main/java/org/apache/cloudstack/diagnostics/DiagnosticsServiceImpl.java",
                "patch": "@@ -17,33 +17,67 @@\n // under the License.\n package org.apache.cloudstack.diagnostics;\n \n+import static org.apache.cloudstack.diagnostics.DiagnosticsHelper.getTimeDifference;\n+import static org.apache.cloudstack.diagnostics.DiagnosticsHelper.umountSecondaryStorage;\n+import static org.apache.cloudstack.diagnostics.fileprocessor.DiagnosticsFilesList.RouterDefaultSupportedFiles;\n+import static org.apache.cloudstack.diagnostics.fileprocessor.DiagnosticsFilesList.SystemVMDefaultSupportedFiles;\n+\n+import java.io.File;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n import java.util.regex.Pattern;\n \n import javax.inject.Inject;\n+import javax.naming.ConfigurationException;\n+\n+import org.apache.cloudstack.api.command.admin.diagnostics.GetDiagnosticsDataCmd;\n+import org.apache.cloudstack.api.command.admin.diagnostics.RunDiagnosticsCmd;\n+import org.apache.cloudstack.diagnostics.fileprocessor.DiagnosticsFilesList;\n+import org.apache.cloudstack.diagnostics.fileprocessor.DiagnosticsFilesListFactory;\n+import org.apache.cloudstack.diagnostics.to.DiagnosticsDataObject;\n+import org.apache.cloudstack.diagnostics.to.DiagnosticsDataTO;\n+import org.apache.cloudstack.engine.orchestration.service.NetworkOrchestrationService;\n+import org.apache.cloudstack.engine.subsystem.api.storage.DataObject;\n+import org.apache.cloudstack.engine.subsystem.api.storage.DataStore;\n+import org.apache.cloudstack.engine.subsystem.api.storage.DataStoreManager;\n+import org.apache.cloudstack.engine.subsystem.api.storage.ZoneScope;\n+import org.apache.cloudstack.framework.config.ConfigKey;\n+import org.apache.cloudstack.framework.config.Configurable;\n+import org.apache.cloudstack.managed.context.ManagedContextRunnable;\n+import org.apache.cloudstack.poll.BackgroundPollManager;\n+import org.apache.cloudstack.poll.BackgroundPollTask;\n+import org.apache.cloudstack.storage.NfsMountManager;\n+import org.apache.cloudstack.storage.image.datastore.ImageStoreEntity;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.log4j.Logger;\n \n import com.cloud.agent.AgentManager;\n import com.cloud.agent.api.Answer;\n import com.cloud.agent.api.routing.NetworkElementCommand;\n+import com.cloud.agent.api.to.DataTO;\n+import com.cloud.dc.DataCenterVO;\n+import com.cloud.dc.dao.DataCenterDao;\n import com.cloud.event.ActionEvent;\n import com.cloud.event.EventTypes;\n import com.cloud.exception.InvalidParameterValueException;\n import com.cloud.hypervisor.Hypervisor;\n+import com.cloud.server.StatsCollector;\n+import com.cloud.storage.ImageStoreDetailsUtil;\n+import com.cloud.storage.Storage;\n+import com.cloud.utils.Pair;\n import com.cloud.utils.component.ManagerBase;\n import com.cloud.utils.component.PluggableService;\n import com.cloud.utils.exception.CloudRuntimeException;\n+import com.cloud.utils.ssh.SshHelper;\n import com.cloud.vm.VMInstanceVO;\n import com.cloud.vm.VirtualMachine;\n import com.cloud.vm.VirtualMachineManager;\n import com.cloud.vm.dao.VMInstanceDao;\n import com.google.common.base.Strings;\n-import org.apache.cloudstack.api.command.admin.diagnostics.RunDiagnosticsCmd;\n-import org.apache.cloudstack.engine.orchestration.service.NetworkOrchestrationService;\n-import org.apache.log4j.Logger;\n \n-public class DiagnosticsServiceImpl extends ManagerBase implements PluggableService, DiagnosticsService {\n+public class DiagnosticsServiceImpl extends ManagerBase implements PluggableService, DiagnosticsService, Configurable {\n     private static final Logger LOGGER = Logger.getLogger(DiagnosticsServiceImpl.class);\n \n     @Inject\n@@ -54,6 +88,39 @@\n     private VirtualMachineManager vmManager;\n     @Inject\n     private NetworkOrchestrationService networkManager;\n+    @Inject\n+    private StatsCollector statsCollector;\n+    @Inject\n+    private DataStoreManager storeMgr;\n+    @Inject\n+    private BackgroundPollManager backgroundPollManager;\n+    @Inject\n+    private ImageStoreDetailsUtil imageStoreDetailsUtil;\n+    @Inject\n+    private NfsMountManager mountManager;\n+    @Inject\n+    private DataCenterDao dataCenterDao;\n+\n+    // These 2 settings should require a restart of the management server\n+    private static final ConfigKey<Boolean> EnableGarbageCollector = new ConfigKey<>(\"Advanced\", Boolean.class,\n+            \"diagnostics.data.gc.enable\", \"true\",\n+            \"Enable the garbage collector background task to delete old files from secondary storage.\", false);\n+    private static final ConfigKey<Integer> GarbageCollectionInterval = new ConfigKey<>(\"Advanced\", Integer.class,\n+            \"diagnostics.data.gc.interval\", \"86400\",\n+            \"The interval at which the garbage collector background tasks in seconds\", false);\n+\n+    // These are easily computed properties and need not need a restart of the management server\n+    private static final ConfigKey<Long> DataRetrievalTimeout = new ConfigKey<>(\"Advanced\", Long.class,\n+            \"diagnostics.data.retrieval.timeout\", \"1800\",\n+            \"Overall system VM script execution time out in seconds.\", true);\n+    private static final ConfigKey<Long> MaximumFileAgeforGarbageCollection = new ConfigKey<>(\"Advanced\", Long.class,\n+            \"diagnostics.data.max.file.age\", \"86400\",\n+            \"Sets the maximum time in seconds a file can stay in secondary storage before it is deleted.\", true);\n+    private static final ConfigKey<Double> DiskQuotaPercentageThreshold = new ConfigKey<>(\"Advanced\", Double.class,\n+            \"diagnostics.data.disable.threshold\", \"0.9\",\n+            \"Sets the secondary storage disk utilisation percentage for file retrieval. \" +\n+                    \"Used to look for suitable secondary storage with enough space, otherwise an exception is \" +\n+                    \"thrown when no secondary store is found.\", true);\n \n     @Override\n     @ActionEvent(eventType = EventTypes.EVENT_SYSTEM_VM_DIAGNOSTICS, eventDescription = \"running diagnostics on system vm\", async = true)\n@@ -92,13 +159,13 @@\n \n         Map<String, String> detailsMap;\n \n-        final Answer answer = agentManager.easySend(hostId, command);\n+        Answer answer = agentManager.easySend(hostId, command);\n \n-        if (answer != null && (answer instanceof DiagnosticsAnswer)) {\n+        if (answer != null) {\n             detailsMap = ((DiagnosticsAnswer) answer).getExecutionDetails();\n             return detailsMap;\n         } else {\n-            throw new CloudRuntimeException(\"Failed to execute diagnostics command on remote host: \" + answer.getDetails());\n+            throw new CloudRuntimeException(\"Failed to execute diagnostics command for system vm: \" + vmInstance + \", on remote host: \" + vmInstance.getHostName());\n         }\n     }\n \n@@ -110,7 +177,6 @@ protected boolean hasValidChars(String optionalArgs) {\n             final Pattern pattern = Pattern.compile(regex);\n             return pattern.matcher(optionalArgs).find();\n         }\n-\n     }\n \n     protected String prepareShellCmd(String cmdType, String ipAddress, String optionalParams) {\n@@ -126,10 +192,334 @@ protected String prepareShellCmd(String cmdType, String ipAddress, String option\n         }\n     }\n \n+    private String zipFilesInSystemVm(VMInstanceVO vmInstance, List<String> optionalFilesList) {\n+        List<String> fileList = getFileListToBeRetrieved(optionalFilesList, vmInstance);\n+\n+        if (CollectionUtils.isEmpty(fileList)) {\n+            throw new CloudRuntimeException(\"Failed to generate diagnostics file list for retrieval.\");\n+        }\n+\n+        final Answer zipFilesAnswer = prepareDiagnosticsFilesInSystemVm(vmInstance, fileList);\n+\n+        if (zipFilesAnswer == null) {\n+            throw new CloudRuntimeException(String.format(\"Failed to generate diagnostics zip file in the system VM %s\", vmInstance.getUuid()));\n+        }\n+\n+        if (!zipFilesAnswer.getResult()) {\n+            throw new CloudRuntimeException(String.format(\"Failed to generate diagnostics zip file in VM %s due to: %s\", vmInstance.getUuid(), zipFilesAnswer.getDetails()));\n+        }\n+\n+        return zipFilesAnswer.getDetails().replace(\"\\n\", \"\");\n+    }\n+\n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_SYSTEM_VM_DIAGNOSTICS, eventDescription = \"getting diagnostics files on system vm\", async = true)\n+    public String getDiagnosticsDataCommand(GetDiagnosticsDataCmd cmd) {\n+        final Long vmId = cmd.getId();\n+        final List<String> optionalFilesList = cmd.getFilesList();\n+        final VMInstanceVO vmInstance = getSystemVMInstance(vmId);\n+        final DataStore store = getImageStore(vmInstance.getDataCenterId());\n+\n+        final String zipFileInSystemVm = zipFilesInSystemVm(vmInstance, optionalFilesList);\n+        final Long vmHostId = vmInstance.getHostId();\n+        copyZipFileToSecondaryStorage(vmInstance, vmHostId, zipFileInSystemVm, store);\n+        deleteDiagnosticsZipFileInsystemVm(vmInstance, zipFileInSystemVm);\n+\n+        // Now we need to create the file download URL\n+        // Find ssvm of store\n+        final long zoneId = vmInstance.getDataCenterId();\n+        VMInstanceVO ssvm = getSecondaryStorageVmInZone(zoneId);\n+        if (ssvm == null) {\n+            throw new CloudRuntimeException(\"No SSVM found in zone with ID: \" + zoneId);\n+        }\n+\n+        // Secondary Storage install path = \"diagnostics_data/diagnostics_files_xxxx.tar\n+        String installPath = DIAGNOSTICS_DIRECTORY + File.separator + zipFileInSystemVm.replace(\"/root\", \"\");\n+        return createFileDownloadUrl(store, ssvm.getHypervisorType(), installPath);\n+    }\n+\n+    /**\n+     * Copy retrieved diagnostics zip file from system vm to secondary storage\n+     * For VMware use the mgmt server, and for Xen/KVM use the hyperhost of the target VM\n+     * The strategy is to mount secondary storage on mgmt server or host and scp directly to /mnt/SecStorage/diagnostics_data\n+     *\n+     * @param fileToCopy zip file in system vm to be copied\n+     * @param store      secondary storage to copy zip file to\n+     */\n+    private Pair<Boolean, String> copyZipFileToSecondaryStorage(VMInstanceVO vmInstance, Long vmHostId, String fileToCopy, DataStore store) {\n+        String vmControlIp = getVMSshIp(vmInstance);\n+        if (StringUtils.isBlank(vmControlIp)) {\n+            return new Pair<>(false, \"Unable to find system vm ssh/control IP for  vm with ID: \" + vmInstance.getId());\n+        }\n+        Pair<Boolean, String> copyResult;\n+        if (vmInstance.getHypervisorType() == Hypervisor.HypervisorType.VMware) {\n+            copyResult = copyToSecondaryStorageVMware(store, vmControlIp, fileToCopy);\n+        } else {\n+            copyResult = copyToSecondaryStorageNonVMware(store, vmControlIp, fileToCopy, vmHostId);\n+        }\n+\n+        if (!copyResult.first()) {\n+            throw new CloudRuntimeException(String.format(\"Failed to copy %s to secondary storage %s due to: %s.\", fileToCopy, store.getUri(), copyResult.second()));\n+        }\n+\n+        return copyResult;\n+    }\n+\n+    private void configureNetworkElementCommand(NetworkElementCommand cmd, VMInstanceVO vmInstance) {\n+        Map<String, String> accessDetails = networkManager.getSystemVMAccessDetails(vmInstance);\n+        if (StringUtils.isBlank(accessDetails.get(NetworkElementCommand.ROUTER_IP))) {\n+            throw new CloudRuntimeException(\"Unable to set system vm ControlIP for system vm with ID: \" + vmInstance.getId());\n+        }\n+        cmd.setAccessDetail(accessDetails);\n+    }\n+\n+    private Answer prepareDiagnosticsFilesInSystemVm(VMInstanceVO vmInstance, List<String> fileList) {\n+        final PrepareFilesCommand cmd = new PrepareFilesCommand(fileList, DataRetrievalTimeout.value());\n+        configureNetworkElementCommand(cmd, vmInstance);\n+        Answer answer = agentManager.easySend(vmInstance.getHostId(), cmd);\n+        return answer;\n+    }\n+\n+    private Answer deleteDiagnosticsZipFileInsystemVm(VMInstanceVO vmInstance, String zipFileName) {\n+        final DeleteFileInVrCommand cmd = new DeleteFileInVrCommand(zipFileName);\n+        configureNetworkElementCommand(cmd, vmInstance);\n+        final Answer fileCleanupAnswer = agentManager.easySend(vmInstance.getHostId(), cmd);\n+        if (fileCleanupAnswer == null) {\n+            LOGGER.error(String.format(\"Failed to cleanup diagnostics zip file on vm: %s\", vmInstance.getUuid()));\n+        } else {\n+            if (!fileCleanupAnswer.getResult()) {\n+                LOGGER.error(String.format(\"Zip file cleanup for vm %s has failed with: %s\", vmInstance.getUuid(), fileCleanupAnswer.getDetails()));\n+            }\n+        }\n+\n+        return fileCleanupAnswer;\n+    }\n+\n+    /**\n+     * Generate a list of diagnostics file to be retrieved depending on the system VM type\n+     *\n+     * @param optionalFileList Optional list of files that user may want to retrieve, empty by default\n+     * @param vmInstance       system VM instance, either SSVM, CPVM or VR\n+     * @return a list of files to be retrieved for system VM, either generated from defaults depending on the VM type, or specified\n+     * by the optional list param\n+     */\n+    private List<String> getFileListToBeRetrieved(List<String> optionalFileList, VMInstanceVO vmInstance) {\n+        DiagnosticsFilesList fileListObject = DiagnosticsFilesListFactory.getDiagnosticsFilesList(optionalFileList, vmInstance);\n+        List<String> fileList = new ArrayList<>();\n+\n+        if (fileListObject != null) {\n+            fileList = fileListObject.generateFileList();\n+        }\n+        return fileList;\n+    }\n+\n+    private Pair<Boolean, String> copyToSecondaryStorageNonVMware(final DataStore store, final String vmControlIp, String fileToCopy, Long vmHostId) {\n+        CopyToSecondaryStorageCommand toSecondaryStorageCommand = new CopyToSecondaryStorageCommand(store.getUri(), vmControlIp, fileToCopy);\n+        Answer copyToSecondaryAnswer = agentManager.easySend(vmHostId, toSecondaryStorageCommand);\n+        Pair<Boolean, String> copyAnswer;\n+        if (copyToSecondaryAnswer != null) {\n+            copyAnswer = new Pair<>(copyToSecondaryAnswer.getResult(), copyToSecondaryAnswer.getDetails());\n+        } else {\n+            copyAnswer = new Pair<>(false, \"Diagnostics Zip file to secondary storage failed\");\n+        }\n+        return copyAnswer;\n+    }\n+\n+    private Pair<Boolean, String> copyToSecondaryStorageVMware(final DataStore store, final String vmSshIp, String diagnosticsFile) {\n+        LOGGER.info(String.format(\"Copying %s from %s to secondary store %s\", diagnosticsFile, vmSshIp, store.getUri()));\n+        boolean success = false;\n+        String mountPoint = mountManager.getMountPoint(store.getUri(), imageStoreDetailsUtil.getNfsVersion(store.getId()));\n+        if (StringUtils.isBlank(mountPoint)) {\n+            LOGGER.error(\"Failed to generate mount point for copying to secondary storage for \" + store.getName());\n+            return new Pair<>(false, \"Failed to mount secondary storage:\" + store.getName());\n+        }\n+\n+        // dirIn/mnt/SecStorage/uuid/diagnostics_data\n+        String dataDirectoryInSecondaryStore = String.format(\"%s/%s\", mountPoint, DIAGNOSTICS_DIRECTORY);\n+        try {\n+            File dataDirectory = new File(dataDirectoryInSecondaryStore);\n+            boolean existsInSecondaryStore = dataDirectory.exists() || dataDirectory.mkdir();\n+            if (existsInSecondaryStore) {\n+                // scp from system VM to mounted sec storage directory\n+                File permKey = new File(\"/var/cloudstack/management/.ssh/id_rsa\");\n+                SshHelper.scpFrom(vmSshIp, 3922, \"root\", permKey, dataDirectoryInSecondaryStore, diagnosticsFile);\n+            }\n+\n+            // Verify File copy to Secondary Storage\n+            File fileInSecondaryStore = new File(dataDirectoryInSecondaryStore + diagnosticsFile.replace(\"/root\", \"\"));\n+            success = fileInSecondaryStore.exists();\n+        } catch (Exception e) {\n+            String msg = String.format(\"Exception caught during scp from %s to secondary store %s: \", vmSshIp, dataDirectoryInSecondaryStore);\n+            LOGGER.error(msg, e);\n+            return new Pair<>(false, msg);\n+        } finally {\n+            umountSecondaryStorage(mountPoint);\n+        }\n+\n+        return new Pair<>(success, \"File copied to secondary storage successfully\");\n+    }\n+\n+    // Get ssvm from the zone to use for creating entity download URL\n+    private VMInstanceVO getSecondaryStorageVmInZone(Long zoneId) {\n+        List<VMInstanceVO> ssvm = instanceDao.listByZoneIdAndType(zoneId, VirtualMachine.Type.SecondaryStorageVm);\n+        return (CollectionUtils.isEmpty(ssvm)) ? null : ssvm.get(0);\n+    }\n+\n+    /**\n+     * Iterate through all Image stores in the current running zone and select any that has less than DiskQuotaPercentageThreshold.value() disk usage\n+     *\n+     * @param zoneId of the current running zone\n+     * @return a valid secondary storage with less than DiskQuotaPercentageThreshold set by global config\n+     */\n+    private DataStore getImageStore(Long zoneId) {\n+        List<DataStore> stores = storeMgr.getImageStoresByScope(new ZoneScope(zoneId));\n+        if (CollectionUtils.isEmpty(stores)) {\n+            throw new CloudRuntimeException(\"No Secondary storage found in Zone with Id: \" + zoneId);\n+        }\n+        DataStore imageStore = null;\n+        for (DataStore store : stores) {\n+            // Return image store if used percentage is less then threshold value set by global config diagnostics.data.disable.threshold\n+            if (statsCollector.imageStoreHasEnoughCapacity(store, DiskQuotaPercentageThreshold.value())) {\n+                imageStore = store;\n+                break;\n+            }\n+        }\n+        if (imageStore == null) {\n+            throw new CloudRuntimeException(\"No suitable secondary storage found to retrieve diagnostics in Zone: \" + zoneId);\n+        }\n+        return imageStore;\n+    }\n+\n+    // createEntityExtractUrl throws CloudRuntime exception in case of failure\n+    private String createFileDownloadUrl(DataStore store, Hypervisor.HypervisorType hypervisorType, String filePath) {\n+        // Get image store driver\n+        ImageStoreEntity secStore = (ImageStoreEntity) store;\n+\n+        //Create dummy TO with hyperType\n+        DataTO dataTO = new DiagnosticsDataTO(hypervisorType, store.getTO());\n+        DataObject dataObject = new DiagnosticsDataObject(dataTO, store);\n+        return secStore.createEntityExtractUrl(filePath, Storage.ImageFormat.ZIP, dataObject);\n+    }\n+\n+    private VMInstanceVO getSystemVMInstance(Long vmId) {\n+        VMInstanceVO vmInstance = instanceDao.findByIdTypes(vmId, VirtualMachine.Type.ConsoleProxy,\n+                VirtualMachine.Type.DomainRouter, VirtualMachine.Type.SecondaryStorageVm);\n+        if (vmInstance == null) {\n+            String msg = String.format(\"Unable to find vm instance with id: %s\", vmId);\n+            LOGGER.error(msg);\n+            throw new CloudRuntimeException(\"Diagnostics command execution failed, \" + msg);\n+        }\n+\n+        final Long hostId = vmInstance.getHostId();\n+        if (hostId == null) {\n+            throw new CloudRuntimeException(\"Unable to find host for virtual machine instance: \" + vmInstance.getInstanceName());\n+        }\n+        return vmInstance;\n+    }\n+\n+    private String getVMSshIp(final VMInstanceVO vmInstance) {\n+        Map<String, String> accessDetails = networkManager.getSystemVMAccessDetails(vmInstance);\n+        String controlIP = accessDetails.get(NetworkElementCommand.ROUTER_IP);\n+        if (StringUtils.isBlank(controlIP)) {\n+            throw new CloudRuntimeException(\"Unable to find system vm ssh/control IP for  vm with ID: \" + vmInstance.getId());\n+        }\n+        return controlIP;\n+    }\n+\n+    @Override\n+    public boolean start() {\n+        super.start();\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n+        if (EnableGarbageCollector.value()) {\n+            backgroundPollManager.submitTask(new GCBackgroundTask(this));\n+        }\n+        return true;\n+    }\n+\n+    public static final class GCBackgroundTask extends ManagedContextRunnable implements BackgroundPollTask {\n+        private DiagnosticsServiceImpl serviceImpl;\n+\n+        public GCBackgroundTask(DiagnosticsServiceImpl serviceImpl) {\n+            this.serviceImpl = serviceImpl;\n+        }\n+\n+        private static void deleteOldDiagnosticsFiles(File directory, String storeName) {\n+            final File[] fileList = directory.listFiles();\n+            if (fileList != null) {\n+                String msg = String.format(\"Found %s diagnostics files in store %s for garbage collection\", fileList.length, storeName);\n+                LOGGER.info(msg);\n+                for (File file : fileList) {\n+                    if (file.isFile() && MaximumFileAgeforGarbageCollection.value() <= getTimeDifference(file)) {\n+                        boolean success = file.delete();\n+                        LOGGER.info(file.getName() + \" delete status: \" + success);\n+                    }\n+                }\n+            }\n+        }\n+\n+        @Override\n+        protected void runInContext() {\n+            List<DataCenterVO> dcList = serviceImpl.dataCenterDao.listEnabledZones();\n+            for (DataCenterVO vo: dcList) {\n+                // Get All Image Stores in current running Zone\n+                List<DataStore> storeList = serviceImpl.storeMgr.getImageStoresByScope(new ZoneScope(vo.getId()));\n+                for (DataStore store : storeList) {\n+                    cleanupOldDiagnosticFiles(store);\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public Long getDelay() {\n+            // In Milliseconds\n+            return GarbageCollectionInterval.value() * 1000L;\n+        }\n+\n+        private void cleanupOldDiagnosticFiles(DataStore store) {\n+            String mountPoint = null;\n+            try {\n+                mountPoint = serviceImpl.mountManager.getMountPoint(store.getUri(), null);\n+                if (StringUtils.isNotBlank(mountPoint)) {\n+                    File directory = new File(mountPoint + File.separator + DIAGNOSTICS_DIRECTORY);\n+                    if (directory.isDirectory()) {\n+                        deleteOldDiagnosticsFiles(directory, store.getName());\n+                    }\n+                }\n+            } finally {\n+                if (StringUtils.isNotBlank(mountPoint)) {\n+                    umountSecondaryStorage(mountPoint);\n+                }\n+            }\n+        }\n+    }\n+\n     @Override\n     public List<Class<?>> getCommands() {\n         List<Class<?>> cmdList = new ArrayList<>();\n         cmdList.add(RunDiagnosticsCmd.class);\n+        cmdList.add(GetDiagnosticsDataCmd.class);\n         return cmdList;\n     }\n+\n+    @Override\n+    public String getConfigComponentName() {\n+        return DiagnosticsServiceImpl.class.getSimpleName();\n+    }\n+\n+    @Override\n+    public ConfigKey<?>[] getConfigKeys() {\n+        return new ConfigKey<?>[]{\n+                EnableGarbageCollector,\n+                DataRetrievalTimeout,\n+                MaximumFileAgeforGarbageCollection,\n+                GarbageCollectionInterval,\n+                DiskQuotaPercentageThreshold,\n+                SystemVMDefaultSupportedFiles,\n+                RouterDefaultSupportedFiles\n+        };\n+    }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/server/src/main/java/org/apache/cloudstack/diagnostics/DiagnosticsServiceImpl.java",
                "sha": "49ad2159698f22bedd92aa5c77e97466441f18d9",
                "status": "modified"
            },
            {
                "additions": 47,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/server/src/main/java/org/apache/cloudstack/diagnostics/fileprocessor/DiagnosticsFilesList.java",
                "changes": 47,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/org/apache/cloudstack/diagnostics/fileprocessor/DiagnosticsFilesList.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "server/src/main/java/org/apache/cloudstack/diagnostics/fileprocessor/DiagnosticsFilesList.java",
                "patch": "@@ -0,0 +1,47 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.diagnostics.fileprocessor;\n+\n+import java.util.List;\n+\n+import org.apache.cloudstack.framework.config.ConfigKey;\n+\n+public interface DiagnosticsFilesList {\n+\n+    /**\n+     * Global configs below are used to set the diagnostics\n+     * data types applicable for each system vm.\n+     * <p>\n+     * the names wrapped in square brackets are for data types that need to first execute a script\n+     * in the system vm and grab output for retrieval, e.g. the output from iptables-save is written to a file\n+     * which will then be retrieved.\n+     */\n+    ConfigKey<String> SystemVMDefaultSupportedFiles = new ConfigKey<>(\"Advanced\", String.class,\n+            \"diagnostics.data.systemvm.defaults\", \"iptables,ipaddr,iprule,iproute,/etc/cloudstack-release,\" +\n+            \"/usr/local/cloud/systemvm/conf/agent.properties,/usr/local/cloud/systemvm/conf/consoleproxy.properties,\" +\n+            \"/var/log/cloud.log,/var/log/patchsystemvm.log,/var/log/daemon.log\",\n+            \"List of supported diagnostics data file options for the CPVM and SSVM.\", true);\n+\n+    ConfigKey<String> RouterDefaultSupportedFiles = new ConfigKey<>(\"Advanced\", String.class,\n+            \"diagnostics.data.router.defaults\", \"iptables,ipaddr,iprule,iproute,/etc/cloudstack-release,\" +\n+            \"/etc/dnsmasq.conf,/etc/dhcphosts.txt,/etc/dhcpopts.txt,/etc/dnsmasq.d/cloud.conf,/etc/dnsmasq-resolv.conf,/var/lib/misc/dnsmasq.leases,/var/log/dnsmasq.log,\" +\n+            \"/etc/hosts,/etc/resolv.conf,/etc/haproxy/haproxy.cfg,/var/log/haproxy.log,/etc/ipsec.d/l2tp.conf,/var/log/cloud.log,\" +\n+            \"/var/log/routerServiceMonitor.log,/var/log/daemon.log\",\n+            \"List of supported diagnostics data file options for the domain router.\", true);\n+\n+    List<String> generateFileList();\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/server/src/main/java/org/apache/cloudstack/diagnostics/fileprocessor/DiagnosticsFilesList.java",
                "sha": "cd9baa9f5d2892b0a98cd5405a14a72598c0e734",
                "status": "added"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/server/src/main/java/org/apache/cloudstack/diagnostics/fileprocessor/DiagnosticsFilesListFactory.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/org/apache/cloudstack/diagnostics/fileprocessor/DiagnosticsFilesListFactory.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "server/src/main/java/org/apache/cloudstack/diagnostics/fileprocessor/DiagnosticsFilesListFactory.java",
                "patch": "@@ -0,0 +1,36 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.diagnostics.fileprocessor;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.cloud.vm.VirtualMachine;\n+\n+public class DiagnosticsFilesListFactory {\n+\n+    public static DiagnosticsFilesList getDiagnosticsFilesList(List<String> dataTypeList, VirtualMachine vm) {\n+        final VirtualMachine.Type vmType = vm.getType();\n+        if (vmType == VirtualMachine.Type.ConsoleProxy || vmType == VirtualMachine.Type.SecondaryStorageVm) {\n+            return new SystemVMDiagnosticsFiles(dataTypeList);\n+        } else if (vmType == VirtualMachine.Type.DomainRouter) {\n+            return new DomainRouterDiagnosticsFiles(dataTypeList);\n+        } else {\n+            return (DiagnosticsFilesList) Collections.emptyList();\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/server/src/main/java/org/apache/cloudstack/diagnostics/fileprocessor/DiagnosticsFilesListFactory.java",
                "sha": "b49da1d76b4c32a0c3980dd58f83bb67dc7d8dc5",
                "status": "added"
            },
            {
                "additions": 52,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/server/src/main/java/org/apache/cloudstack/diagnostics/fileprocessor/DomainRouterDiagnosticsFiles.java",
                "changes": 52,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/org/apache/cloudstack/diagnostics/fileprocessor/DomainRouterDiagnosticsFiles.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "server/src/main/java/org/apache/cloudstack/diagnostics/fileprocessor/DomainRouterDiagnosticsFiles.java",
                "patch": "@@ -0,0 +1,52 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package org.apache.cloudstack.diagnostics.fileprocessor;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+\n+public class DomainRouterDiagnosticsFiles implements DiagnosticsFilesList {\n+    // Optional parameters\n+    private List<String> dataTypeList;\n+\n+    public DomainRouterDiagnosticsFiles(List<String> dataTypeList) {\n+        this.dataTypeList = dataTypeList;\n+    }\n+\n+    @Override\n+    public List<String> generateFileList() {\n+        List<String> filesList = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(dataTypeList)) {\n+            filesList.addAll(Arrays.stream(RouterDefaultSupportedFiles.value().split(\",\"))\n+                    .map(String :: trim)\n+                    .distinct()\n+                    .collect(Collectors.toList()));\n+\n+        } else {\n+            filesList.addAll(dataTypeList);\n+        }\n+        return filesList;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/server/src/main/java/org/apache/cloudstack/diagnostics/fileprocessor/DomainRouterDiagnosticsFiles.java",
                "sha": "b50c4faab28bba3b76c112eb306eea760d49cfe8",
                "status": "added"
            },
            {
                "additions": 50,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/server/src/main/java/org/apache/cloudstack/diagnostics/fileprocessor/SystemVMDiagnosticsFiles.java",
                "changes": 50,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/org/apache/cloudstack/diagnostics/fileprocessor/SystemVMDiagnosticsFiles.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "server/src/main/java/org/apache/cloudstack/diagnostics/fileprocessor/SystemVMDiagnosticsFiles.java",
                "patch": "@@ -0,0 +1,50 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package org.apache.cloudstack.diagnostics.fileprocessor;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+\n+public class SystemVMDiagnosticsFiles implements DiagnosticsFilesList {\n+    // Optional parameters\n+    private List<String> dataTypeList;\n+\n+    public SystemVMDiagnosticsFiles(List<String> dataTypeList) {\n+        this.dataTypeList = dataTypeList;\n+    }\n+\n+    @Override\n+    public List<String> generateFileList() {\n+        List<String> filesList = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(dataTypeList)) {\n+            filesList.addAll(Arrays.stream(SystemVMDefaultSupportedFiles.value().split(\",\"))\n+                    .map(String :: trim)\n+                    .distinct()\n+                    .collect(Collectors.toList()));\n+        } else {\n+            filesList.addAll(dataTypeList);\n+        }\n+        return filesList;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/server/src/main/java/org/apache/cloudstack/diagnostics/fileprocessor/SystemVMDiagnosticsFiles.java",
                "sha": "4e123bf7d38633cf6f2363ea9b28b1c51e661b21",
                "status": "added"
            },
            {
                "additions": 97,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/server/src/main/java/org/apache/cloudstack/diagnostics/to/DiagnosticsDataObject.java",
                "changes": 97,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/org/apache/cloudstack/diagnostics/to/DiagnosticsDataObject.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "server/src/main/java/org/apache/cloudstack/diagnostics/to/DiagnosticsDataObject.java",
                "patch": "@@ -0,0 +1,97 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.diagnostics.to;\n+\n+import org.apache.cloudstack.engine.subsystem.api.storage.DataObject;\n+import org.apache.cloudstack.engine.subsystem.api.storage.DataStore;\n+import org.apache.cloudstack.engine.subsystem.api.storage.ObjectInDataStoreStateMachine;\n+\n+import com.cloud.agent.api.Answer;\n+import com.cloud.agent.api.to.DataObjectType;\n+import com.cloud.agent.api.to.DataTO;\n+\n+public class DiagnosticsDataObject implements DataObject {\n+    private DataTO dataTO;\n+    private DataStore dataStore;\n+\n+    public DiagnosticsDataObject(DataTO dataTO, DataStore dataStore) {\n+        this.dataTO = dataTO;\n+        this.dataStore = dataStore;\n+    }\n+\n+    @Override\n+    public long getId() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public String getUri() {\n+        return null;\n+    }\n+\n+    @Override\n+    public DataTO getTO() {\n+        return dataTO;\n+    }\n+\n+    @Override\n+    public DataStore getDataStore() {\n+        return dataStore;\n+    }\n+\n+    @Override\n+    public Long getSize() {\n+        return null;\n+    }\n+\n+    @Override\n+    public DataObjectType getType() {\n+        return dataTO.getObjectType();\n+    }\n+\n+    @Override\n+    public String getUuid() {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean delete() {\n+        return false;\n+    }\n+\n+    @Override\n+    public void processEvent(ObjectInDataStoreStateMachine.Event event) {\n+    }\n+\n+    @Override\n+    public void processEvent(ObjectInDataStoreStateMachine.Event event, Answer answer) {\n+    }\n+\n+    @Override\n+    public void incRefCount() {\n+    }\n+\n+    @Override\n+    public void decRefCount() {\n+    }\n+\n+    @Override\n+    public Long getRefCount() {\n+        return null;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/server/src/main/java/org/apache/cloudstack/diagnostics/to/DiagnosticsDataObject.java",
                "sha": "7736e63a657a076a161821bc164e3a34903d3e01",
                "status": "added"
            },
            {
                "additions": 60,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/server/src/main/java/org/apache/cloudstack/diagnostics/to/DiagnosticsDataTO.java",
                "changes": 60,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/org/apache/cloudstack/diagnostics/to/DiagnosticsDataTO.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "server/src/main/java/org/apache/cloudstack/diagnostics/to/DiagnosticsDataTO.java",
                "patch": "@@ -0,0 +1,60 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.diagnostics.to;\n+\n+import com.cloud.agent.api.to.DataObjectType;\n+import com.cloud.agent.api.to.DataStoreTO;\n+import com.cloud.agent.api.to.DataTO;\n+import com.cloud.hypervisor.Hypervisor;\n+\n+public class DiagnosticsDataTO implements DataTO {\n+    private DataStoreTO dataStoreTO;\n+    private Hypervisor.HypervisorType hypervisorType;\n+    private String path;\n+    private long id;\n+\n+    public DiagnosticsDataTO(Hypervisor.HypervisorType hypervisorType, DataStoreTO dataStoreTO) {\n+        this.hypervisorType = hypervisorType;\n+        this.dataStoreTO = dataStoreTO;\n+    }\n+\n+    @Override\n+    public DataObjectType getObjectType() {\n+        return DataObjectType.ARCHIVE;\n+    }\n+\n+    @Override\n+    public DataStoreTO getDataStore() {\n+        return dataStoreTO;\n+    }\n+\n+    @Override\n+    public Hypervisor.HypervisorType getHypervisorType() {\n+        return hypervisorType;\n+    }\n+\n+    @Override\n+    public String getPath() {\n+        return path;\n+    }\n+\n+    @Override\n+    public long getId() {\n+        return id;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/server/src/main/java/org/apache/cloudstack/diagnostics/to/DiagnosticsDataTO.java",
                "sha": "115ee718fbed3ca71913d93edec725a28af04b43",
                "status": "added"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/server/src/main/java/org/apache/cloudstack/storage/NfsMountManager.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/org/apache/cloudstack/storage/NfsMountManager.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "server/src/main/java/org/apache/cloudstack/storage/NfsMountManager.java",
                "patch": "@@ -0,0 +1,23 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.storage;\n+\n+public interface NfsMountManager {\n+\n+    String getMountPoint(String storageUrl, Integer nfsVersion);\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/server/src/main/java/org/apache/cloudstack/storage/NfsMountManager.java",
                "sha": "a4e413ced9f04883120c6def5c55f23ac0ffce55",
                "status": "added"
            },
            {
                "additions": 203,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/server/src/main/java/org/apache/cloudstack/storage/NfsMountManagerImpl.java",
                "changes": 203,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/org/apache/cloudstack/storage/NfsMountManagerImpl.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "server/src/main/java/org/apache/cloudstack/storage/NfsMountManagerImpl.java",
                "patch": "@@ -0,0 +1,203 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.storage;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import javax.annotation.PreDestroy;\n+\n+import com.cloud.storage.StorageLayer;\n+import com.cloud.utils.exception.CloudRuntimeException;\n+import com.cloud.utils.script.OutputInterpreter;\n+import com.cloud.utils.script.Script;\n+import org.apache.cloudstack.framework.config.ConfigKey;\n+import org.apache.cloudstack.utils.identity.ManagementServerNode;\n+import org.apache.log4j.Logger;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class NfsMountManagerImpl implements NfsMountManager {\n+    private static final Logger s_logger = Logger.getLogger(NfsMountManager.class);\n+\n+    private StorageLayer storage;\n+    private int timeout;\n+    private final Random rand = new Random(System.currentTimeMillis());\n+    private final ConcurrentMap<String, String> storageMounts = new ConcurrentHashMap<>();\n+\n+    public static final ConfigKey<String> MOUNT_PARENT = new ConfigKey<>(\"Advanced\", String.class,\n+            \"mount.parent\", \"/var/cloudstack/mnt\",\n+            \"The mount point on the Management Server for Secondary Storage.\",\n+            true, ConfigKey.Scope.Global);\n+\n+    public NfsMountManagerImpl(StorageLayer storage, int timeout) {\n+        this.storage = storage;\n+        this.timeout = timeout;\n+    }\n+\n+    public String getMountPoint(String storageUrl, Integer nfsVersion) {\n+        String mountPoint = storageMounts.get(storageUrl);\n+        if (mountPoint != null) {\n+            return mountPoint;\n+        }\n+\n+        URI uri;\n+        try {\n+            uri = new URI(storageUrl);\n+        } catch (URISyntaxException e) {\n+            s_logger.error(\"Invalid storage URL format \", e);\n+            throw new CloudRuntimeException(\"Unable to create mount point due to invalid storage URL format \" + storageUrl);\n+        }\n+\n+        mountPoint = mount(uri.getHost() + \":\" + uri.getPath(), MOUNT_PARENT.value(), nfsVersion);\n+        if (mountPoint == null) {\n+            s_logger.error(\"Unable to create mount point for \" + storageUrl);\n+            throw new CloudRuntimeException(\"Unable to create mount point for \" + storageUrl);\n+        }\n+\n+        storageMounts.putIfAbsent(storageUrl, mountPoint);\n+        return mountPoint;\n+    }\n+\n+    private String mount(String path, String parent, Integer nfsVersion) {\n+        String mountPoint = setupMountPoint(parent);\n+        if (mountPoint == null) {\n+            s_logger.warn(\"Unable to create a mount point\");\n+            return null;\n+        }\n+\n+        Script command = new Script(true, \"mount\", timeout, s_logger);\n+        command.add(\"-t\", \"nfs\");\n+        if (nfsVersion != null){\n+            command.add(\"-o\", \"vers=\" + nfsVersion);\n+        }\n+        // command.add(\"-o\", \"soft,timeo=133,retrans=2147483647,tcp,acdirmax=0,acdirmin=0\");\n+        if (\"Mac OS X\".equalsIgnoreCase(System.getProperty(\"os.name\"))) {\n+            command.add(\"-o\", \"resvport\");\n+        }\n+        command.add(path);\n+        command.add(mountPoint);\n+        String result = command.execute();\n+        if (result != null) {\n+            s_logger.warn(\"Unable to mount \" + path + \" due to \" + result);\n+            deleteMountPath(mountPoint);\n+            return null;\n+        }\n+\n+        // Change permissions for the mountpoint\n+        Script script = new Script(true, \"chmod\", timeout, s_logger);\n+        script.add(\"1777\", mountPoint);\n+        result = script.execute();\n+        if (result != null) {\n+            s_logger.warn(\"Unable to set permissions for \" + mountPoint + \" due to \" + result);\n+        }\n+        return mountPoint;\n+    }\n+\n+    private String setupMountPoint(String parent) {\n+        String mountPoint = null;\n+        for (int i = 0; i < 10; i++) {\n+            String mntPt = parent + File.separator + String.valueOf(ManagementServerNode.getManagementServerId()) + \".\" + Integer.toHexString(rand.nextInt(Integer.MAX_VALUE));\n+            File file = new File(mntPt);\n+            if (!file.exists()) {\n+                if (storage.mkdir(mntPt)) {\n+                    mountPoint = mntPt;\n+                    break;\n+                }\n+            }\n+            s_logger.error(\"Unable to create mount: \" + mntPt);\n+        }\n+\n+        return mountPoint;\n+    }\n+\n+    private void umount(String localRootPath) {\n+        if (!mountExists(localRootPath)) {\n+            return;\n+        }\n+        Script command = new Script(true, \"umount\", timeout, s_logger);\n+        command.add(localRootPath);\n+        String result = command.execute();\n+        if (result != null) {\n+            // Fedora Core 12 errors out with any -o option executed from java\n+            String errMsg = \"Unable to umount \" + localRootPath + \" due to \" + result;\n+            s_logger.error(errMsg);\n+            throw new CloudRuntimeException(errMsg);\n+        }\n+        deleteMountPath(localRootPath);\n+        s_logger.debug(\"Successfully umounted \" + localRootPath);\n+    }\n+\n+    private void deleteMountPath(String localRootPath) {\n+        try {\n+            Files.deleteIfExists(Paths.get(localRootPath));\n+        } catch (IOException e) {\n+            s_logger.warn(String.format(\"unable to delete mount directory %s:%s.%n\", localRootPath, e.getMessage()));\n+        }\n+    }\n+\n+    private boolean mountExists(String localRootPath) {\n+        Script script = new Script(true, \"mount\", timeout, s_logger);\n+        ZfsPathParser parser = new ZfsPathParser(localRootPath);\n+        script.execute(parser);\n+        return parser.getPaths().stream().filter(s -> s.contains(localRootPath)).findAny().map(s -> true).orElse(false);\n+    }\n+\n+    public static class ZfsPathParser extends OutputInterpreter {\n+        String _parent;\n+        List<String> paths = new ArrayList<>();\n+\n+        public ZfsPathParser(String parent) {\n+            _parent = parent;\n+        }\n+\n+        @Override\n+        public String interpret(BufferedReader reader) throws IOException {\n+            String line;\n+            while ((line = reader.readLine()) != null) {\n+                paths.add(line);\n+            }\n+            return null;\n+        }\n+\n+        public List<String> getPaths() {\n+            return paths;\n+        }\n+\n+        @Override\n+        public boolean drain() {\n+            return true;\n+        }\n+    }\n+\n+    @PreDestroy\n+    public void destroy() {\n+        s_logger.info(\"Clean up mounted NFS mount points used in current session.\");\n+        storageMounts.values().stream().forEach(this::umount);\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/server/src/main/java/org/apache/cloudstack/storage/NfsMountManagerImpl.java",
                "sha": "50ef13654512a5dbf3f95a9ee3e78f4136704bb9",
                "status": "added"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/server/src/main/resources/META-INF/cloudstack/core/spring-server-core-managers-context.xml",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/resources/META-INF/cloudstack/core/spring-server-core-managers-context.xml?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "server/src/main/resources/META-INF/cloudstack/core/spring-server-core-managers-context.xml",
                "patch": "@@ -300,4 +300,12 @@\n     <bean id=\"directDownloadManager\" class=\"org.apache.cloudstack.direct.download.DirectDownloadManagerImpl\" />\n \n     <bean id=\"DiagnosticsService\" class=\"org.apache.cloudstack.diagnostics.DiagnosticsServiceImpl\" />\n+\n+    <bean id=\"storageLayer\" class=\"com.cloud.storage.JavaStorageLayer\" />\n+\n+    <bean id=\"nfsMountManager\" class=\"org.apache.cloudstack.storage.NfsMountManagerImpl\" >\n+        <constructor-arg name=\"storage\" ref=\"storageLayer\" />\n+        <constructor-arg name=\"timeout\" value=\"10000\" />\n+    </bean>\n+\n </beans>",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/server/src/main/resources/META-INF/cloudstack/core/spring-server-core-managers-context.xml",
                "sha": "f3525cce6b19480c0e3577d54ed85b59c8c4f2a5",
                "status": "modified"
            },
            {
                "additions": 83,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/server/src/test/java/org/apache/cloudstack/diagnostics/DiagnosticsFilesListFactoryTest.java",
                "changes": 83,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/test/java/org/apache/cloudstack/diagnostics/DiagnosticsFilesListFactoryTest.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "server/src/test/java/org/apache/cloudstack/diagnostics/DiagnosticsFilesListFactoryTest.java",
                "patch": "@@ -0,0 +1,83 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.diagnostics;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.apache.cloudstack.diagnostics.fileprocessor.DiagnosticsFilesListFactory;\n+import org.apache.cloudstack.diagnostics.fileprocessor.DomainRouterDiagnosticsFiles;\n+import org.apache.cloudstack.framework.config.ConfigKey;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.cloud.vm.VMInstanceVO;\n+import com.cloud.vm.VirtualMachine;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class DiagnosticsFilesListFactoryTest {\n+\n+    private DomainRouterDiagnosticsFiles proxyDiagnosticFiles;\n+\n+    @Mock\n+    private VMInstanceVO vmInstance;\n+\n+    @InjectMocks\n+    private DiagnosticsFilesListFactory listFactory = new DiagnosticsFilesListFactory();\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        Mockito.when(vmInstance.getType()).thenReturn(VirtualMachine.Type.DomainRouter);\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        Mockito.reset(vmInstance);\n+    }\n+\n+    @Test\n+    public void testgetDiagnosticsFilesListCpVmDataTypeList() {\n+        List<String> dataTypeList = new ArrayList<>();\n+        dataTypeList.add(\"/var/log/auth.log\");\n+        dataTypeList.add(\"/etc/dnsmasq.conf\");\n+        dataTypeList.add(\"iptables\");\n+        dataTypeList.add(\"ipaddr\");\n+\n+        List<String> files = Objects.requireNonNull(DiagnosticsFilesListFactory.getDiagnosticsFilesList(dataTypeList, vmInstance)).generateFileList();\n+\n+        assertEquals(files, dataTypeList);\n+    }\n+\n+    @Test\n+    public void testDiagnosticsFileListDefaultsRouter() {\n+        List<String> filesList = Objects.requireNonNull(DiagnosticsFilesListFactory.getDiagnosticsFilesList(null, vmInstance)).generateFileList();\n+\n+        ConfigKey configKey = proxyDiagnosticFiles.RouterDefaultSupportedFiles;\n+        String[] defaultFileArray = configKey.defaultValue().split(\",\");\n+\n+        assertEquals(filesList.size(), defaultFileArray.length);\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/server/src/test/java/org/apache/cloudstack/diagnostics/DiagnosticsFilesListFactoryTest.java",
                "sha": "e0412db720fc76c30a9c63f6d6d11df58ebbe684",
                "status": "added"
            },
            {
                "additions": 47,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/server/src/test/java/org/apache/cloudstack/diagnostics/DiagnosticsServiceImplTest.java",
                "changes": 92,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/test/java/org/apache/cloudstack/diagnostics/DiagnosticsServiceImplTest.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 45,
                "filename": "server/src/test/java/org/apache/cloudstack/diagnostics/DiagnosticsServiceImplTest.java",
                "patch": "@@ -18,15 +18,9 @@\n //\n package org.apache.cloudstack.diagnostics;\n \n-import com.cloud.agent.AgentManager;\n-import com.cloud.agent.api.routing.NetworkElementCommand;\n-import com.cloud.exception.InvalidParameterValueException;\n-import com.cloud.utils.exception.CloudRuntimeException;\n-import com.cloud.vm.VMInstanceVO;\n-import com.cloud.vm.VirtualMachine;\n-import com.cloud.vm.VirtualMachineManager;\n-import com.cloud.vm.dao.VMInstanceDao;\n-import junit.framework.TestCase;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n import org.apache.cloudstack.api.ApiConstants;\n import org.apache.cloudstack.api.command.admin.diagnostics.RunDiagnosticsCmd;\n import org.apache.cloudstack.engine.orchestration.service.NetworkOrchestrationService;\n@@ -39,8 +33,16 @@\n import org.mockito.Mockito;\n import org.mockito.runners.MockitoJUnitRunner;\n \n-import java.util.HashMap;\n-import java.util.Map;\n+import com.cloud.agent.AgentManager;\n+import com.cloud.agent.api.routing.NetworkElementCommand;\n+import com.cloud.exception.InvalidParameterValueException;\n+import com.cloud.utils.exception.CloudRuntimeException;\n+import com.cloud.vm.VMInstanceVO;\n+import com.cloud.vm.VirtualMachine;\n+import com.cloud.vm.VirtualMachineManager;\n+import com.cloud.vm.dao.VMInstanceDao;\n+\n+import junit.framework.TestCase;\n \n @RunWith(MockitoJUnitRunner.class)\n public class DiagnosticsServiceImplTest extends TestCase {\n@@ -50,40 +52,39 @@\n     @Mock\n     private VMInstanceDao instanceDao;\n     @Mock\n-    private RunDiagnosticsCmd diagnosticsCmd;\n+    private RunDiagnosticsCmd runDiagnosticsCmd;\n     @Mock\n     private DiagnosticsCommand command;\n     @Mock\n-    private VMInstanceVO instanceVO;\n+    private VMInstanceVO vmInstanceVO;\n     @Mock\n     private VirtualMachineManager vmManager;\n     @Mock\n     private NetworkOrchestrationService networkManager;\n \n     @InjectMocks\n-    private DiagnosticsServiceImpl diagnosticsService = new DiagnosticsServiceImpl();\n+    private DiagnosticsServiceImpl serviceImpl = new DiagnosticsServiceImpl();\n \n     @Before\n     public void setUp() throws Exception {\n-        Mockito.when(diagnosticsCmd.getId()).thenReturn(1L);\n-        Mockito.when(diagnosticsCmd.getType()).thenReturn(DiagnosticsType.PING);\n+        Mockito.when(runDiagnosticsCmd.getId()).thenReturn(1L);\n+        Mockito.when(runDiagnosticsCmd.getType()).thenReturn(DiagnosticsType.PING);\n         Mockito.when(instanceDao.findByIdTypes(Mockito.anyLong(), Mockito.any(VirtualMachine.Type.class),\n-                Mockito.any(VirtualMachine.Type.class), Mockito.any(VirtualMachine.Type.class))).thenReturn(instanceVO);\n-\n+                Mockito.any(VirtualMachine.Type.class), Mockito.any(VirtualMachine.Type.class))).thenReturn(vmInstanceVO);\n     }\n \n     @After\n     public void tearDown() throws Exception {\n-        Mockito.reset(diagnosticsCmd);\n+        Mockito.reset(runDiagnosticsCmd);\n         Mockito.reset(agentManager);\n         Mockito.reset(instanceDao);\n-        Mockito.reset(instanceVO);\n+        Mockito.reset(vmInstanceVO);\n         Mockito.reset(command);\n     }\n \n     @Test\n     public void testRunDiagnosticsCommandTrue() throws Exception {\n-        Mockito.when(diagnosticsCmd.getAddress()).thenReturn(\"8.8.8.8\");\n+        Mockito.when(runDiagnosticsCmd.getAddress()).thenReturn(\"8.8.8.8\");\n         Map<String, String> accessDetailsMap = new HashMap<>();\n         accessDetailsMap.put(NetworkElementCommand.ROUTER_IP, \"169.20.175.10\");\n         Mockito.when(networkManager.getSystemVMAccessDetails(Mockito.any(VMInstanceVO.class))).thenReturn(accessDetailsMap);\n@@ -102,7 +103,7 @@ public void testRunDiagnosticsCommandTrue() throws Exception {\n \n         Mockito.when(agentManager.easySend(Mockito.anyLong(), Mockito.any(DiagnosticsCommand.class))).thenReturn(new DiagnosticsAnswer(command, true, details));\n \n-        Map<String, String> detailsMap = diagnosticsService.runDiagnosticsCommand(diagnosticsCmd);\n+        Map<String, String> detailsMap = serviceImpl.runDiagnosticsCommand(runDiagnosticsCmd);\n \n         String stdout = \"PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.\\n\" +\n                 \"64 bytes from 8.8.8.8: icmp_seq=1 ttl=125 time=7.88 ms\\n\" +\n@@ -123,7 +124,7 @@ public void testRunDiagnosticsCommandTrue() throws Exception {\n \n     @Test\n     public void testRunDiagnosticsCommandFalse() throws Exception {\n-        Mockito.when(diagnosticsCmd.getAddress()).thenReturn(\"192.0.2.2\");\n+        Mockito.when(runDiagnosticsCmd.getAddress()).thenReturn(\"192.0.2.2\");\n \n         Map<String, String> accessDetailsMap = new HashMap<>();\n         accessDetailsMap.put(NetworkElementCommand.ROUTER_IP, \"169.20.175.10\");\n@@ -141,7 +142,7 @@ public void testRunDiagnosticsCommandFalse() throws Exception {\n                 \"4 packets transmitted, 0 packets received, 100% packet loss\";\n         Mockito.when(agentManager.easySend(Mockito.anyLong(), Mockito.any(DiagnosticsCommand.class))).thenReturn(new DiagnosticsAnswer(command, true, details));\n \n-        Map<String, String> detailsMap = diagnosticsService.runDiagnosticsCommand(diagnosticsCmd);\n+        Map<String, String> detailsMap = serviceImpl.runDiagnosticsCommand(runDiagnosticsCmd);\n \n         assertEquals(3, detailsMap.size());\n         assertEquals(\"Mismatch between actual and expected STDERR\", \"\", detailsMap.get(ApiConstants.STDERR));\n@@ -151,46 +152,47 @@ public void testRunDiagnosticsCommandFalse() throws Exception {\n \n     @Test(expected = InvalidParameterValueException.class)\n     public void testRunDiagnosticsThrowsInvalidParamException() throws Exception {\n-        Mockito.when(diagnosticsCmd.getAddress()).thenReturn(\"\");\n+        Mockito.when(runDiagnosticsCmd.getAddress()).thenReturn(\"\");\n         Mockito.when(instanceDao.findByIdTypes(Mockito.anyLong(), Mockito.any(VirtualMachine.Type.class),\n                 Mockito.any(VirtualMachine.Type.class), Mockito.any(VirtualMachine.Type.class))).thenReturn(null);\n \n-        diagnosticsService.runDiagnosticsCommand(diagnosticsCmd);\n+        serviceImpl.runDiagnosticsCommand(runDiagnosticsCmd);\n     }\n \n     @Test(expected = CloudRuntimeException.class)\n     public void testVMControlIPisNull() throws Exception {\n-        Mockito.when(diagnosticsCmd.getAddress()).thenReturn(\"0.42.42.42\");\n+        Mockito.when(runDiagnosticsCmd.getAddress()).thenReturn(\"0.42.42.42\");\n \n         Map<String, String> accessDetailsMap = new HashMap<>();\n         accessDetailsMap.put(NetworkElementCommand.ROUTER_IP, null);\n         Mockito.when(networkManager.getSystemVMAccessDetails(Mockito.any(VMInstanceVO.class))).thenReturn(accessDetailsMap);\n \n-        diagnosticsService.runDiagnosticsCommand(diagnosticsCmd);\n+        serviceImpl.runDiagnosticsCommand(runDiagnosticsCmd);\n     }\n \n     @Test\n     public void testInvalidCharsInParams() throws Exception {\n-        assertFalse(diagnosticsService.hasValidChars(\"'\\\\''\"));\n-        assertFalse(diagnosticsService.hasValidChars(\"-I eth0 &\"));\n-        assertFalse(diagnosticsService.hasValidChars(\"-I eth0 ;\"));\n-        assertFalse(diagnosticsService.hasValidChars(\" &2 > \"));\n-        assertFalse(diagnosticsService.hasValidChars(\" &2 >> \"));\n-        assertFalse(diagnosticsService.hasValidChars(\" | \"));\n-        assertFalse(diagnosticsService.hasValidChars(\"|\"));\n-        assertFalse(diagnosticsService.hasValidChars(\",\"));\n+        assertFalse(serviceImpl.hasValidChars(\"'\\\\''\"));\n+        assertFalse(serviceImpl.hasValidChars(\"-I eth0 &\"));\n+        assertFalse(serviceImpl.hasValidChars(\"-I eth0 ;\"));\n+        assertFalse(serviceImpl.hasValidChars(\" &2 > \"));\n+        assertFalse(serviceImpl.hasValidChars(\" &2 >> \"));\n+        assertFalse(serviceImpl.hasValidChars(\" | \"));\n+        assertFalse(serviceImpl.hasValidChars(\"|\"));\n+        assertFalse(serviceImpl.hasValidChars(\",\"));\n     }\n \n     @Test\n     public void testValidCharsInParams() throws Exception {\n-        assertTrue(diagnosticsService.hasValidChars(\"\"));\n-        assertTrue(diagnosticsService.hasValidChars(\".\"));\n-        assertTrue(diagnosticsService.hasValidChars(\" \"));\n-        assertTrue(diagnosticsService.hasValidChars(\"-I eth0 www.google.com\"));\n-        assertTrue(diagnosticsService.hasValidChars(\" \"));\n-        assertTrue(diagnosticsService.hasValidChars(\" -I cloudbr0 --sport \"));\n-        assertTrue(diagnosticsService.hasValidChars(\" --back -m20 \"));\n-        assertTrue(diagnosticsService.hasValidChars(\"-c 5 -4\"));\n-        assertTrue(diagnosticsService.hasValidChars(\"-c 5 -4 -AbDfhqUV\"));\n+        assertTrue(serviceImpl.hasValidChars(\"\"));\n+        assertTrue(serviceImpl.hasValidChars(\".\"));\n+        assertTrue(serviceImpl.hasValidChars(\" \"));\n+        assertTrue(serviceImpl.hasValidChars(\"-I eth0 www.google.com\"));\n+        assertTrue(serviceImpl.hasValidChars(\" \"));\n+        assertTrue(serviceImpl.hasValidChars(\" -I cloudbr0 --sport \"));\n+        assertTrue(serviceImpl.hasValidChars(\" --back -m20 \"));\n+        assertTrue(serviceImpl.hasValidChars(\"-c 5 -4\"));\n+        assertTrue(serviceImpl.hasValidChars(\"-c 5 -4 -AbDfhqUV\"));\n     }\n+\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/server/src/test/java/org/apache/cloudstack/diagnostics/DiagnosticsServiceImplTest.java",
                "sha": "04a7e8a2b0d02d661560b39fbb4c0d3f095504d2",
                "status": "modified"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/systemvm/debian/opt/cloud/bin/cleanup.sh",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/systemvm/debian/opt/cloud/bin/cleanup.sh?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "systemvm/debian/opt/cloud/bin/cleanup.sh",
                "patch": "@@ -0,0 +1,28 @@\n+#!/bin/bash\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#rm -rf $@ && echo $?\n+\n+zip_file=$1\n+if [ -e \"$zip_file\" ];\n+then\n+    rm -rf \"$zip_file\"\n+    echo \"Deleting diagnostics zip file $zip_file\"\n+else\n+    echo \"File $zip_file not found in vm \"\n+fi",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/systemvm/debian/opt/cloud/bin/cleanup.sh",
                "sha": "d14877badbc6c798b4fbeff8462f876b136f0217",
                "status": "added"
            },
            {
                "additions": 143,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/systemvm/debian/opt/cloud/bin/get_diagnostics_files.py",
                "changes": 143,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/systemvm/debian/opt/cloud/bin/get_diagnostics_files.py?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "systemvm/debian/opt/cloud/bin/get_diagnostics_files.py",
                "patch": "@@ -0,0 +1,143 @@\n+#!/usr/bin/env python\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import logging\n+import os\n+import re\n+import shlex\n+import subprocess as sp\n+import sys\n+import time\n+import zipfile\n+\n+\n+# Create zip archive and append files for retrieval\n+def zip_files(files):\n+    fList = files\n+    compression = zipfile.ZIP_DEFLATED\n+    time_str = time.strftime(\"%Y%m%d-%H%M%S\")\n+    zf_name = '/root/diagnostics_files_' + time_str + '.zip'\n+    zf = zipfile.ZipFile(zf_name, 'w', compression)\n+\n+    '''\n+    Initialize 3 empty arrays to collect found files, non-existent files\n+    and last one to collect temp files to be cleaned up when script exits\n+    '''\n+    files_found_list = []\n+    files_not_found_list = []\n+    files_from_shell_commands = []\n+\n+    try:\n+        for f in fList:\n+            f = f.strip()\n+\n+            if f in ('iptables', 'ipaddr', 'iprule', 'iproute'):\n+                f = execute_shell_script(f)\n+                files_from_shell_commands.append(f)\n+\n+            if len(f) > 3 and f.startswith('[') and f.endswith(']'):\n+                f = execute_shell_script(f[1:-1])\n+                files_from_shell_commands.append(f)\n+\n+            if os.path.isfile(f):\n+                try:\n+                    zf.write(f, f[f.rfind('/') + 1:])\n+                except OSError or RuntimeError as e:\n+                    files_not_found_list.append(f)\n+                else:\n+                    files_found_list.append(f)\n+    finally:\n+        cleanup(files_from_shell_commands)\n+        generate_retrieved_files_txt(zf, files_found_list, files_not_found_list)\n+        zf.close()\n+        print zf_name\n+\n+\n+def get_cmd(script):\n+    if script is None or len(script) == 0:\n+        return None\n+\n+    cmd = None\n+    if script == 'iptables':\n+        cmd = 'iptables-save'\n+    elif script == 'ipaddr':\n+        cmd = 'ip address'\n+    elif script == 'iprule':\n+        cmd = 'ip rule list'\n+    elif script == 'iproute':\n+        cmd = 'ip route show table all'\n+    else:\n+        cmd = '/opt/cloud/bin/' + script\n+        if not os.path.isfile(cmd.split(' ')[0]):\n+            cmd = None\n+\n+    return cmd\n+\n+\n+def execute_shell_script(script):\n+    script = script.strip()\n+    outputfile = script + '.log'\n+\n+    with open(outputfile, 'wb', 0) as f:\n+        try:\n+            cmd = get_cmd(script)\n+            if cmd is None:\n+                f.write('Unable to generate command for ' + script + ', perhaps missing file')\n+            else:\n+                p = sp.Popen(cmd, shell=True, stdout=sp.PIPE, stderr=sp.PIPE)\n+                stdout, stderr = p.communicate()\n+                return_code = p.returncode\n+                if return_code is 0:\n+                    f.write(stdout)\n+                else:\n+                    f.write(stderr)\n+        except OSError as ex:\n+            delete_tmp_file_cmd = 'rm -f %s' % outputfile\n+            sp.check_call(shlex.split(delete_tmp_file_cmd))\n+        finally:\n+            f.close()\n+    return outputfile\n+\n+\n+def cleanup(file_list):\n+    files = ' '.join(file_list)\n+    cmd = 'rm -f %s' % files\n+    try:\n+        p = sp.Popen(shlex.split(cmd), stderr=sp.PIPE, stdout=sp.PIPE)\n+        p.communicate()\n+    except OSError as e:\n+        logging.debug(\"Failed to execute bash command\")\n+\n+\n+def generate_retrieved_files_txt(zip_file, files_found, files_not_found):\n+    output_file = 'fileinfo.txt'\n+    try:\n+        with open(output_file, 'wb', 0) as man:\n+            for i in files_found:\n+                man.write(i + '\\n')\n+            for j in files_not_found:\n+                man.write(j + 'File Not Found!!\\n')\n+        zip_file.write(output_file, output_file)\n+    finally:\n+        cleanup_cmd = \"rm -f %s\" % output_file\n+        sp.check_call(shlex.split(cleanup_cmd))\n+\n+\n+if __name__ == '__main__':\n+    fileList = sys.argv[1:]\n+    zip_files(fileList)",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/systemvm/debian/opt/cloud/bin/get_diagnostics_files.py",
                "sha": "b95dfb5420c168466a3e46d94fcb42dd6d44700a",
                "status": "added"
            },
            {
                "additions": 199,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/test/integration/smoke/test_diagnostics.py",
                "changes": 203,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/test/integration/smoke/test_diagnostics.py?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 4,
                "filename": "test/integration/smoke/test_diagnostics.py",
                "patch": "@@ -16,11 +16,12 @@\n # under the License.\n \"\"\" BVT tests for remote diagnostics of system VMs\n \"\"\"\n+import urllib\n+\n+from marvin.cloudstackAPI import (runDiagnostics, getDiagnosticsData)\n+from marvin.cloudstackTestCase import cloudstackTestCase\n # Import Local Modules\n from marvin.codes import FAILED\n-from marvin.cloudstackTestCase import cloudstackTestCase\n-from marvin.cloudstackAPI import runDiagnostics\n-from marvin.lib.utils import (cleanup_resources)\n from marvin.lib.base import (Account,\n                              ServiceOffering,\n                              VirtualMachine)\n@@ -29,7 +30,7 @@\n                                get_test_template,\n                                list_ssvms,\n                                list_routers)\n-\n+from marvin.lib.utils import (cleanup_resources)\n from nose.plugins.attrib import attr\n \n \n@@ -537,3 +538,197 @@ def test_12_traceroute_in_cpvm(self):\n             cmd_response.exitcode,\n             'Failed to run remote Traceroute in CPVM'\n         )\n+\n+    '''\n+    Add Get Diagnostics data BVT\n+    '''\n+\n+    @attr(tags=[\"advanced\", \"advancedns\", \"ssh\", \"smoke\"], required_hardware=\"true\")\n+    def test_13_retrieve_vr_default_files(self):\n+        list_router_response = list_routers(\n+            self.apiclient,\n+            account=self.account.name,\n+            domainid=self.account.domainid\n+        )\n+        self.assertEqual(\n+            isinstance(list_router_response, list),\n+            True,\n+            \"Check list response returns a valid list\"\n+        )\n+\n+        router = list_router_response[0]\n+        self.debug('Setting up VR with ID %s' % router.id)\n+        cmd = getDiagnosticsData.getDiagnosticsDataCmd()\n+        cmd.targetid = router.id\n+\n+        response = self.apiclient.getDiagnosticsData(cmd)\n+        is_valid_url = self.check_url(response.url)\n+\n+        self.assertEqual(\n+            True,\n+            is_valid_url,\n+            msg=\"Failed to create valid download url response\"\n+        )\n+\n+    def check_url(self, url):\n+        import urllib2\n+        try:\n+            r = urllib.urlopen(url)\n+            if r.code == 200:\n+                return True\n+        except urllib2.HTTPError:\n+            return False\n+        except urllib2.URLError:\n+            return False\n+        return True\n+\n+    @attr(tags=[\"advanced\", \"advancedns\", \"ssh\", \"smoke\"], required_hardware=\"true\")\n+    def test_14_retrieve_vr_one_file(self):\n+        list_router_response = list_routers(\n+            self.apiclient,\n+            account=self.account.name,\n+            domainid=self.account.domainid\n+        )\n+        self.assertEqual(\n+            isinstance(list_router_response, list),\n+            True,\n+            \"Check list response returns a valid list\"\n+        )\n+\n+        router = list_router_response[0]\n+        self.debug('Setting up VR with ID %s' % router.id)\n+        cmd = getDiagnosticsData.getDiagnosticsDataCmd()\n+        cmd.targetid = router.id\n+        cmd.type = \"/var/log/cloud.log\"\n+\n+        response = self.apiclient.getDiagnosticsData(cmd)\n+\n+        is_valid_url = self.check_url(response.url)\n+\n+        self.assertEqual(\n+            True,\n+            is_valid_url,\n+            msg=\"Failed to create valid download url response\"\n+        )\n+\n+    @attr(tags=[\"advanced\", \"advancedns\", \"ssh\", \"smoke\"], required_hardware=\"true\")\n+    def test_15_retrieve_ssvm_default_files(self):\n+        list_ssvm_response = list_ssvms(\n+            self.apiclient,\n+            systemvmtype='secondarystoragevm',\n+            state='Running',\n+        )\n+\n+        self.assertEqual(\n+            isinstance(list_ssvm_response, list),\n+            True,\n+            'Check list response returns a valid list'\n+        )\n+        ssvm = list_ssvm_response[0]\n+\n+        self.debug('Setting up SSVM with ID %s' % ssvm.id)\n+\n+        cmd = getDiagnosticsData.getDiagnosticsDataCmd()\n+        cmd.targetid = ssvm.id\n+\n+        response = self.apiclient.getDiagnosticsData(cmd)\n+\n+        is_valid_url = self.check_url(response.url)\n+\n+        self.assertEqual(\n+            True,\n+            is_valid_url,\n+            msg=\"Failed to create valid download url response\"\n+        )\n+\n+    @attr(tags=[\"advanced\", \"advancedns\", \"ssh\", \"smoke\"], required_hardware=\"true\")\n+    def test_16_retrieve_ssvm_single_file(self):\n+        list_ssvm_response = list_ssvms(\n+            self.apiclient,\n+            systemvmtype='secondarystoragevm',\n+            state='Running',\n+        )\n+\n+        self.assertEqual(\n+            isinstance(list_ssvm_response, list),\n+            True,\n+            'Check list response returns a valid list'\n+        )\n+        ssvm = list_ssvm_response[0]\n+\n+        self.debug('Setting up SSVM with ID %s' % ssvm.id)\n+\n+        cmd = getDiagnosticsData.getDiagnosticsDataCmd()\n+        cmd.targetid = ssvm.id\n+        cmd.type = \"/var/log/cloud.log\"\n+\n+        response = self.apiclient.getDiagnosticsData(cmd)\n+\n+        is_valid_url = self.check_url(response.url)\n+\n+        self.assertEqual(\n+            True,\n+            is_valid_url,\n+            msg=\"Failed to create valid download url response\"\n+        )\n+\n+    @attr(tags=[\"advanced\", \"advancedns\", \"ssh\", \"smoke\"], required_hardware=\"true\")\n+    def test_17_retrieve_cpvm_default_files(self):\n+        list_cpvm_response = list_ssvms(\n+            self.apiclient,\n+            systemvmtype='consoleproxy',\n+            state='Running',\n+        )\n+\n+        self.assertEqual(\n+            isinstance(list_cpvm_response, list),\n+            True,\n+            'Check list response returns a valid list'\n+        )\n+        cpvm = list_cpvm_response[0]\n+\n+        self.debug('Setting up CPVM with ID %s' % cpvm.id)\n+\n+        cmd = getDiagnosticsData.getDiagnosticsDataCmd()\n+        cmd.targetid = cpvm.id\n+\n+        response = self.apiclient.getDiagnosticsData(cmd)\n+\n+        is_valid_url = self.check_url(response.url)\n+\n+        self.assertEqual(\n+            True,\n+            is_valid_url,\n+            msg=\"Failed to create valid download url response\"\n+        )\n+\n+    @attr(tags=[\"advanced\", \"advancedns\", \"ssh\", \"smoke\"], required_hardware=\"true\")\n+    def test_18_retrieve_cpvm_single_file(self):\n+        list_cpvm_response = list_ssvms(\n+            self.apiclient,\n+            systemvmtype='consoleproxy',\n+            state='Running',\n+        )\n+\n+        self.assertEqual(\n+            isinstance(list_cpvm_response, list),\n+            True,\n+            'Check list response returns a valid list'\n+        )\n+        cpvm = list_cpvm_response[0]\n+\n+        self.debug('Setting up CPVM with ID %s' % cpvm.id)\n+\n+        cmd = getDiagnosticsData.getDiagnosticsDataCmd()\n+        cmd.targetid = cpvm.id\n+        cmd.type = \"/var/log/cloud.log\"\n+\n+        response = self.apiclient.getDiagnosticsData(cmd)\n+\n+        is_valid_url = self.check_url(response.url)\n+\n+        self.assertEqual(\n+            True,\n+            is_valid_url,\n+            msg=\"Failed to create valid download url response\"\n+        )",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/test/integration/smoke/test_diagnostics.py",
                "sha": "810dbb83093c4fec94dcca2badf5c4a8b4dfd876",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/ui/css/cloudstack3.css",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/ui/css/cloudstack3.css?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "ui/css/cloudstack3.css",
                "patch": "@@ -12421,12 +12421,14 @@ div.ui-dialog div.autoscaler div.field-group div.form-container form div.form-it\n   background-position: -69px -677px;\n }\n \n+.retrieveDiagnostics .icon,\n .downloadVolume .icon,\n .downloadTemplate .icon,\n .downloadISO .icon {\n   background-position: -35px -125px;\n }\n \n+.retrieveDiagnostics:hover .icon,\n .downloadVolume:hover .icon,\n .downloadTemplate:hover .icon,\n .downloadISO:hover .icon {",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/ui/css/cloudstack3.css",
                "sha": "6831890ad863b8d3c7960034083a62a069c02777",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/ui/css/src/scss/components/action-icons.scss",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/ui/css/src/scss/components/action-icons.scss?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "ui/css/src/scss/components/action-icons.scss",
                "patch": "@@ -347,6 +347,14 @@\n   background-position: -165px -704px;\n }\n \n+.retrieveDiagnostics .icon {\n+  background-position: -35px -125px;\n+}\n+\n+.retrieveDiagnostics:hover .icon {\n+  background-position: -35px -707px;\n+}\n+\n .enableOutOfBandManagement .icon {\n   background-position: -138px -65px;\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/ui/css/src/scss/components/action-icons.scss",
                "sha": "6ed07a30be326b839887382ed9d9ac5e73e19fd4",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/ui/l10n/en.js",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/ui/l10n/en.js?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 3,
                "filename": "ui/l10n/en.js",
                "patch": "@@ -243,6 +243,7 @@ var dictionary = {\n \"label.action.force.reconnect.processing\":\"Reconnecting....\",\n \"label.action.generate.keys\":\"Generate Keys\",\n \"label.action.generate.keys.processing\":\"Generate Keys....\",\n+\"label.action.get.diagnostics\":\"Get Diagnostics Data\",\n \"label.action.list.nexusVswitch\":\"List Nexus 1000v\",\n \"label.action.lock.account\":\"Lock account\",\n \"label.action.lock.account.processing\":\"Locking account....\",\n@@ -802,6 +803,8 @@ var dictionary = {\n \"label.gateway\":\"Gateway\",\n \"label.general.alerts\":\"General Alerts\",\n \"label.generating.url\":\"Generating URL\",\n+\"label.get.diagnostics.desc\":\"If you wish to override the standard files returned, enter them here. Otherwise leave blank and press OK\",\n+\"label.get.diagnostics.files\":\"Alternate Files to Retrieve\",\n \"label.globo.dns\":\"GloboDNS\",\n \"label.globo.dns.configuration\":\"GloboDNS Configuration\",\n \"label.gluster.volume\":\"Volume\",\n@@ -2149,9 +2152,10 @@ var dictionary = {\n \"message.disabling.network.offering\":\"Disabling network offering\",\n \"message.disabling.vpc.offering\":\"Disabling VPC offering\",\n \"message.disallowed.characters\":\"Disallowed characters: <,>\",\n-\"message.download.ISO\":\"Please click <a href=\\\"#\\\">00000</a> to download ISO\",\n-\"message.download.template\":\"Please click <a href=\\\"#\\\">00000</a> to download template\",\n-\"message.download.volume\":\"Please click <a href=\\\"#\\\">00000</a> to download volume\",\n+\"message.download.diagnostics\":\"Please click the link to download the retrieved diagnostics:<p><a href=\\\"#\\\">00000</a>\",\n+\"message.download.ISO\":\"Please click the link to download the ISO:<p><a href=\\\"#\\\">00000</a>\",\n+\"message.download.template\":\"Please click the link to download the template:<p><a href=\\\"#\\\">00000</a>\",\n+\"message.download.volume\":\"Please click the link to download the volume:<p><a href=\\\"#\\\">00000</a>\",\n \"message.download.volume.confirm\":\"Please confirm that you want to download this volume.\",\n \"message.edit.account\":\"Edit (\\\"-1\\\" indicates no limit to the amount of resources create)\",\n \"message.edit.confirm\":\"Please confirm your changes before clicking \\\"Save\\\".\",",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/ui/l10n/en.js",
                "sha": "87deba8142b2ade3f158ace8b79ffcb92d1cf4ec",
                "status": "modified"
            },
            {
                "additions": 202,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/ui/scripts/system.js",
                "changes": 202,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/ui/scripts/system.js?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "ui/scripts/system.js",
                "patch": "@@ -3933,6 +3933,56 @@\n                                                 }\n                                             },\n \n+                                            retrieveDiagnostics: {\n+                                                label: 'label.action.get.diagnostics',\n+                                                messages: {\n+                                                    notification: function (args) {\n+                                                        return 'label.action.get.diagnostics';\n+                                                    },\n+                                                    complete: function(args) {\n+                                                        var url = args.url;\n+                                                        var htmlMsg = _l('message.download.diagnostics');\n+                                                        var htmlMsg2 = htmlMsg.replace(/#/, url).replace(/00000/, url);\n+                                                        return htmlMsg2;\n+                                                    }\n+                                                },\n+                                                createForm: {\n+                                                    title: 'label.action.get.diagnostics',\n+                                                    desc: 'label.get.diagnostics.desc',\n+                                                    fields: {\n+                                                        files: {\n+                                                            label: 'label.get.diagnostics.files'\n+                                                        }\n+                                                    }\n+                                                },\n+                                                action: function (args) {\n+                                                    $.ajax({\n+                                                        url: createURL(\"getDiagnosticsData&targetid=\" + args.context.routers[0].id + \"&files=\" + args.data.files),\n+                                                        dataType: \"json\",\n+                                                        async: true,\n+                                                        success: function(json) {\n+                                                            var jid = json.getdiagnosticsdataresponse.jobid;\n+                                                            args.response.success({\n+                                                                _custom: {\n+                                                                    jobId : jid,\n+                                                                    getUpdatedItem: function (json) {\n+                                                                        return json.queryasyncjobresultresponse.jobresult.diagnostics;\n+\n+                                                                    },\n+                                                                    getActionFilter: function(){\n+                                                                        return systemvmActionfilter;\n+                                                                   }\n+                                                                }\n+\n+                                                            });\n+                                                        }\n+                                                    }); //end ajax\n+                                                },\n+                                                notification: {\n+                                                    poll: pollAsyncJobResult\n+                                                }\n+                                            },\n+\n                                             viewConsole: {\n                                                 label: 'label.view.console',\n                                                 action: {\n@@ -8847,6 +8897,56 @@\n                                                         }\n                                                     },\n \n+                                                    retrieveDiagnostics: {\n+                                                        label: 'label.action.get.diagnostics',\n+                                                        messages: {\n+                                                            notification: function (args) {\n+                                                                return 'label.action.get.diagnostics';\n+                                                            },\n+                                                            complete: function(args) {\n+                                                                var url = args.url;\n+                                                                var htmlMsg = _l('message.download.diagnostics');\n+                                                                var htmlMsg2 = htmlMsg.replace(/#/, url).replace(/00000/, url);\n+                                                                return htmlMsg2;\n+                                                            }\n+                                                        },\n+                                                        createForm: {\n+                                                            title: 'label.action.get.diagnostics',\n+                                                            desc: '',\n+                                                            fields: {\n+                                                                files: {\n+                                                                    label: 'label.get.diagnostics.files'\n+                                                                }\n+                                                            }\n+                                                        },\n+                                                        action: function (args) {\n+                                                            $.ajax({\n+                                                                url: createURL(\"getDiagnosticsData&targetid=\" + args.context.systemVMs[0].id + \"&files=\" + args.data.files),\n+                                                                dataType: \"json\",\n+                                                                async: true,\n+                                                                success: function(json) {\n+                                                                    var jid = json.getdiagnosticsdataresponse.jobid;\n+                                                                    args.response.success({\n+                                                                        _custom: {\n+                                                                            jobId : jid,\n+                                                                            getUpdatedItem: function (json) {\n+                                                                                return json.queryasyncjobresultresponse.jobresult.diagnostics;\n+\n+                                                                            },\n+                                                                            getActionFilter: function(){\n+                                                                                return systemvmActionfilter;\n+                                                                           }\n+                                                                        }\n+\n+                                                                    });\n+                                                                }\n+                                                            }); //end ajax\n+                                                        },\n+                                                        notification: {\n+                                                            poll: pollAsyncJobResult\n+                                                        }\n+                                                    },\n+\n                                                     scaleUp: {\n                                                         label: 'label.change.service.offering',\n                                                         createForm: {\n@@ -10293,6 +10393,56 @@\n                                         }\n                                     },\n \n+                                    retrieveDiagnostics: {\n+                                        label: 'label.action.get.diagnostics',\n+                                        messages: {\n+                                            notification: function (args) {\n+                                                return 'label.action.get.diagnostics';\n+                                            },\n+                                            complete: function(args) {\n+                                                var url = args.url;\n+                                                var htmlMsg = _l('message.download.diagnostics');\n+                                                var htmlMsg2 = htmlMsg.replace(/#/, url).replace(/00000/, url);\n+                                                return htmlMsg2;\n+                                            }\n+                                        },\n+                                        createForm: {\n+                                            title: 'label.action.get.diagnostics',\n+                                            desc: 'label.get.diagnostics.desc',\n+                                            fields: {\n+                                                files: {\n+                                                    label: 'label.get.diagnostics.files'\n+                                                }\n+                                            }\n+                                        },\n+                                        action: function (args) {\n+                                            $.ajax({\n+                                                url: createURL(\"getDiagnosticsData&targetid=\" + args.context.routers[0].id + \"&files=\" + args.data.files),\n+                                                dataType: \"json\",\n+                                                async: true,\n+                                                success: function(json) {\n+                                                    var jid = json.getdiagnosticsdataresponse.jobid;\n+                                                    args.response.success({\n+                                                        _custom: {\n+                                                            jobId : jid,\n+                                                            getUpdatedItem: function (json) {\n+                                                                return json.queryasyncjobresultresponse.jobresult.diagnostics;\n+\n+                                                            },\n+                                                            getActionFilter: function(){\n+                                                                return systemvmActionfilter;\n+                                                           }\n+                                                        }\n+\n+                                                    });\n+                                                }\n+                                            }); //end ajax\n+                                        },\n+                                        notification: {\n+                                            poll: pollAsyncJobResult\n+                                        }\n+                                    },\n+\n                                     scaleUp: { //*** Infrastructure > Virtual Routers > change service offering ***\n                                         label: 'label.change.service.offering',\n                                         createForm: {\n@@ -11643,6 +11793,56 @@\n                                 }\n                             },\n \n+                            retrieveDiagnostics: {\n+                                label: 'label.action.get.diagnostics',\n+                                messages: {\n+                                    notification: function (args) {\n+                                        return 'label.action.get.diagnostics';\n+                                    },\n+                                    complete: function(args) {\n+                                        var url = args.url;\n+                                        var htmlMsg = _l('message.download.diagnostics');\n+                                        var htmlMsg2 = htmlMsg.replace(/#/, url).replace(/00000/, url);\n+                                        return htmlMsg2;\n+                                    }\n+                                },\n+                                createForm: {\n+                                    title: 'label.action.get.diagnostics',\n+                                    desc: 'label.get.diagnostics.desc',\n+                                    fields: {\n+                                        files: {\n+                                            label: 'label.get.diagnostics.files'\n+                                        }\n+                                    }\n+                                },\n+                                action: function (args) {\n+                                    $.ajax({\n+                                        url: createURL(\"getDiagnosticsData&targetid=\" + args.context.systemVMs[0].id + \"&files=\" + args.data.files),\n+                                        dataType: \"json\",\n+                                        async: true,\n+                                        success: function(json) {\n+                                            var jid = json.getdiagnosticsdataresponse.jobid;\n+                                            args.response.success({\n+                                                _custom: {\n+                                                    jobId : jid,\n+                                                    getUpdatedItem: function (json) {\n+                                                        return json.queryasyncjobresultresponse.jobresult.diagnostics;\n+\n+                                                    },\n+                                                    getActionFilter: function(){\n+                                                        return systemvmActionfilter;\n+                                                   }\n+                                                }\n+\n+                                            });\n+                                        }\n+                                    }); //end ajax\n+                                },\n+                                notification: {\n+                                    poll: pollAsyncJobResult\n+                                }\n+                            },\n+\n                             scaleUp: { //*** Infrastructure > System VMs (consoleProxy or SSVM) > change service offering ***\n                                 label: 'label.change.service.offering',\n                                 createForm: {\n@@ -22072,6 +22272,7 @@\n             if (isAdmin()) {\n                 allowedActions.push(\"migrate\");\n                 allowedActions.push(\"diagnostics\");\n+                allowedActions.push(\"retrieveDiagnostics\");\n             }\n         } else if (jsonObj.state == 'Stopped') {\n             allowedActions.push(\"start\");\n@@ -22123,6 +22324,7 @@\n             if (isAdmin()) {\n                 allowedActions.push(\"migrate\");\n                 allowedActions.push(\"diagnostics\");\n+                allowedActions.push(\"retrieveDiagnostics\");\n             }\n         } else if (jsonObj.state == 'Stopped') {\n             allowedActions.push(\"start\");",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/ui/scripts/system.js",
                "sha": "2ae2f466043c14742494c5e33c64ea8a84a104f6",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/cloudstack/blob/be97470d83a0c6e834d97c9860354176016f2c64/utils/src/main/java/com/cloud/utils/ssh/SshHelper.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/main/java/com/cloud/utils/ssh/SshHelper.java?ref=be97470d83a0c6e834d97c9860354176016f2c64",
                "deletions": 0,
                "filename": "utils/src/main/java/com/cloud/utils/ssh/SshHelper.java",
                "patch": "@@ -58,6 +58,30 @@ public static void scpTo(String host, int port, String user, File pemKeyFile, St\n         scpTo(host, port, user, pemKeyFile, password, remoteTargetDirectory, data, remoteFileName, fileMode, DEFAULT_CONNECT_TIMEOUT, DEFAULT_KEX_TIMEOUT);\n     }\n \n+    public static void scpFrom(String host, int port, String user, File permKeyFile, String localTargetDirectory, String remoteTargetFile) throws Exception {\n+        com.trilead.ssh2.Connection conn = null;\n+        com.trilead.ssh2.SCPClient scpClient = null;\n+\n+        try {\n+            conn = new com.trilead.ssh2.Connection(host, port);\n+            conn.connect(null, DEFAULT_CONNECT_TIMEOUT, DEFAULT_KEX_TIMEOUT);\n+\n+            if (!conn.authenticateWithPublicKey(user, permKeyFile, null)) {\n+                String msg = \"Failed to authentication SSH user \" + user + \" on host \" + host;\n+                s_logger.error(msg);\n+                throw new Exception(msg);\n+            }\n+            scpClient = conn.createSCPClient();\n+\n+            scpClient.get(remoteTargetFile, localTargetDirectory);\n+\n+        } finally {\n+            if (conn != null) {\n+                conn.close();\n+            }\n+        }\n+    }\n+\n     public static void scpTo(String host, int port, String user, File pemKeyFile, String password, String remoteTargetDirectory, String localFile, String fileMode,\n             int connectTimeoutInMs, int kexTimeoutInMs) throws Exception {\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/be97470d83a0c6e834d97c9860354176016f2c64/utils/src/main/java/com/cloud/utils/ssh/SshHelper.java",
                "sha": "042842064df9ac84a680a5aa793c7a0093a22a91",
                "status": "modified"
            }
        ],
        "message": "Get Diagnostics: Download logs and diagnostics data from SSVM, CPVM, Router (#3350)\n\n* * Complete API implementation\r\n* Complete UI integration\r\n* Complete marvin test\r\n* Complete Secondary storage GC background task\r\n\r\n* improve UI labels\r\n\r\n* slight reword and add another missing description\r\n\r\n* improve download message clarity\r\n\r\n* Address comments\r\n\r\n* multiple fixes and cleanups\r\n\r\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\r\n\r\n* fix more bugs, let it return ip rule list in another log file\r\n\r\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\r\n\r\n* fix missing iprule bug\r\n\r\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\r\n\r\n* add support for ARCHIVE type of object to be linked/setup on secstorage\r\n\r\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\r\n\r\n* Fix retrieving files for Xenserver\r\n\r\n* Update get_diagnostics_files.py\r\n\r\n* Fix bug where executable scripts weren't handled\r\n\r\n* Fixed error on script cmd generation\r\n\r\n* Do not filter name for log files as it would override similar prefix script names\r\n\r\n* Addressed code review comments\r\n\r\n* log error instead of printstacktrace\r\n\r\n* Treat script as executable and shell script\r\n\r\n* Check missing script name case and write to output instead of catching exception\r\n\r\n* Use shell = true instead of shlex to support any executable\r\n\r\n* fix xenserver bug\r\n\r\n* don't set dir permission for vmware\r\n\r\n* Code review comments - refactoring\r\n\r\n* Add check for possible NPE\r\n\r\n* Remove unused imoprt after rebase\r\n\r\n* Add better description for configs\r\n\r\nCo-authored-by: Nicolas Vazquez <nicovazquez90@gmail.com>\r\nCo-authored-by: Rohit Yadav <rohit@apache.org>\r\nCo-authored-by: Anurag Awasthi <anurag.awasthi@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/cc093c61a1ea8a255e984157a84d31062c61124c",
        "patched_files": [
            "Xenserver625StorageProcessor.java",
            "LibvirtComputingResource.java",
            "XenServerStorageProcessor.java",
            "PrepareFilesCommand.java",
            "spring-server-core-managers-context.xml",
            "PrepareFilesAnswer.java",
            "CitrixResourceBase.java",
            "CopyToSecondaryStorageAnswer.java",
            "system.js",
            "GetDiagnosticsDataResponse.java",
            "get_diagnostics_files.py",
            "DiagnosticsServiceImpl.java",
            "DiagnosticsFilesList.java",
            "DiagnosticsService.java",
            "DiagnosticsFilesListFactory.java",
            "VRScripts.java",
            "CopyToSecondaryStorageCommand.java",
            "StatsCollector.java",
            "cloudstack3.css",
            "DataObjectType.java",
            "SystemVMDiagnosticsFiles.java",
            "DiagnosticsDataObject.java",
            "SshHelper.java",
            "Storage.java",
            "VirtualRoutingResource.java",
            "CitrixCoppyToSecondaryStorageCommandWrapper.java",
            "DomainRouterDiagnosticsFiles.java",
            "NfsMountManager.java",
            "ApiConstants.java",
            "DeleteFileInVrCommand.java",
            "NfsMountManagerImpl.java",
            "vmops",
            "VmwareStorageManagerImpl.java",
            "DiagnosticsHelper.java",
            "LibvirtCopyToSecondaryStorageWrapper.java",
            "test_diagnostics.py",
            "cleanup.sh",
            "en.js",
            "action-icons.scss",
            "DiagnosticsDataTO.java",
            "GetDiagnosticsDataCmd.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "CitrixResourceBaseTest.java",
            "StatsCollectorTest.java",
            "VirtualRoutingResourceTest.java",
            "StorageTest.java",
            "LibvirtComputingResourceTest.java",
            "DiagnosticsServiceImplTest.java",
            "XenServerStorageProcessorTest.java",
            "SshHelperTest.java",
            "Xenserver625StorageProcessorTest.java",
            "DiagnosticsFilesListFactoryTest.java"
        ]
    },
    "cloudstack_c27dd62": {
        "bug_id": "cloudstack_c27dd62",
        "commit": "https://github.com/apache/cloudstack/commit/c27dd6293e6600e4253aa09b00d515a55ee533c1",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/c27dd6293e6600e4253aa09b00d515a55ee533c1/server/src/com/cloud/network/vpc/VpcManagerImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/vpc/VpcManagerImpl.java?ref=c27dd6293e6600e4253aa09b00d515a55ee533c1",
                "deletions": 1,
                "filename": "server/src/com/cloud/network/vpc/VpcManagerImpl.java",
                "patch": "@@ -1421,7 +1421,9 @@ public void doInTransactionWithoutResult(TransactionStatus status) {\n \n     @Override\n     public List<? extends Vpc> getVpcsForAccount(long accountId) {\n-        return _vpcDao.listByAccountId(accountId);\n+        List<Vpc> vpcs = new ArrayList<Vpc>();\n+        vpcs.addAll(_vpcDao.listByAccountId(accountId));\n+        return vpcs;\n     }\n \n     public boolean cleanupVpcResources(long vpcId, Account caller, long callerUserId) throws ResourceUnavailableException, ConcurrentOperationException {",
                "raw_url": "https://github.com/apache/cloudstack/raw/c27dd6293e6600e4253aa09b00d515a55ee533c1/server/src/com/cloud/network/vpc/VpcManagerImpl.java",
                "sha": "c49da15d024f3cffe6fbfdc957957254a63b259d",
                "status": "modified"
            }
        ],
        "message": "CID-1233085: Fix potential NPE in AccountManagerImpl from VpcManagerImpl\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/33a6640c04137ccdfc6d9b8bfbcd70c6ddeb369d",
        "patched_files": [
            "VpcManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VpcManagerImplTest.java"
        ]
    },
    "cloudstack_c618caf": {
        "bug_id": "cloudstack_c618caf",
        "commit": "https://github.com/apache/cloudstack/commit/c618caf102de5df5d2224e70643a22863a72658a",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/c618caf102de5df5d2224e70643a22863a72658a/client/tomcatconf/nonossComponentContext.xml.in",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/client/tomcatconf/nonossComponentContext.xml.in?ref=c618caf102de5df5d2224e70643a22863a72658a",
                "deletions": 0,
                "filename": "client/tomcatconf/nonossComponentContext.xml.in",
                "patch": "@@ -212,6 +212,7 @@\n         <ref bean=\"cloudStackPrimaryDataStoreProviderImpl\"/>\n         <ref bean=\"cloudStackImageStoreProviderImpl\"/>\n         <ref bean=\"s3ImageStoreProviderImpl\"/>\n+        <ref local=\"swiftImageStoreProviderImpl\"/>\n         <ref bean=\"solidFireDataStoreProvider\"/>\n       </list>\n     </property>",
                "raw_url": "https://github.com/apache/cloudstack/raw/c618caf102de5df5d2224e70643a22863a72658a/client/tomcatconf/nonossComponentContext.xml.in",
                "sha": "6fd51ef0f0a6377b076c756cd64494472162cdf0",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/c618caf102de5df5d2224e70643a22863a72658a/engine/storage/src/org/apache/cloudstack/storage/LocalHostEndpoint.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/storage/src/org/apache/cloudstack/storage/LocalHostEndpoint.java?ref=c618caf102de5df5d2224e70643a22863a72658a",
                "deletions": 0,
                "filename": "engine/storage/src/org/apache/cloudstack/storage/LocalHostEndpoint.java",
                "patch": "@@ -45,6 +45,10 @@\n     ConfigurationDao configDao;\n \n     public LocalHostEndpoint() {\n+\n+    }\n+\n+    private void configure() {\n         // get mount parent folder configured in global setting, if set, this will overwrite _parent in NfsSecondaryStorageResource to work\n         // around permission issue for default /mnt folder\n         String mountParent = configDao.getValue(Config.MountParent.key());\n@@ -59,6 +63,7 @@ public LocalHostEndpoint() {\n \n     public static EndPoint getEndpoint() {\n         LocalHostEndpoint endpoint = ComponentContext.inject(LocalHostEndpoint.class);\n+        endpoint.configure();\n         return endpoint;\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/c618caf102de5df5d2224e70643a22863a72658a/engine/storage/src/org/apache/cloudstack/storage/LocalHostEndpoint.java",
                "sha": "68faa47541bfd39e96821356be00d03e3e0e0635",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/c618caf102de5df5d2224e70643a22863a72658a/plugins/hypervisors/xen/src/com/cloud/hypervisor/xen/resource/CitrixResourceBase.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/xen/src/com/cloud/hypervisor/xen/resource/CitrixResourceBase.java?ref=c618caf102de5df5d2224e70643a22863a72658a",
                "deletions": 1,
                "filename": "plugins/hypervisors/xen/src/com/cloud/hypervisor/xen/resource/CitrixResourceBase.java",
                "patch": "@@ -3940,7 +3940,7 @@ boolean swiftDelete(Connection conn, SwiftTO swift, String rfilename) {\n         return false;\n     }\n \n-    public void swiftBackupSnapshot(Connection conn, SwiftTO swift, String srUuid, String snapshotUuid, String container, Boolean isISCSI, int wait)  {\n+    public String swiftBackupSnapshot(Connection conn, SwiftTO swift, String srUuid, String snapshotUuid, String container, Boolean isISCSI, int wait)  {\n         String lfilename;\n         String ldir;\n         if ( isISCSI ) {\n@@ -3951,6 +3951,7 @@ public void swiftBackupSnapshot(Connection conn, SwiftTO swift, String srUuid, S\n             lfilename = snapshotUuid + \".vhd\";\n         }\n         swiftUpload(conn, swift, container, ldir, lfilename, isISCSI, wait);\n+        return lfilename;\n     }\n \n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/c618caf102de5df5d2224e70643a22863a72658a/plugins/hypervisors/xen/src/com/cloud/hypervisor/xen/resource/CitrixResourceBase.java",
                "sha": "f80d4b62940ad824553575d6e4c81180ce8b7ce1",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/cloudstack/blob/c618caf102de5df5d2224e70643a22863a72658a/plugins/hypervisors/xen/src/com/cloud/hypervisor/xen/resource/XenServerStorageProcessor.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/xen/src/com/cloud/hypervisor/xen/resource/XenServerStorageProcessor.java?ref=c618caf102de5df5d2224e70643a22863a72658a",
                "deletions": 12,
                "filename": "plugins/hypervisors/xen/src/com/cloud/hypervisor/xen/resource/XenServerStorageProcessor.java",
                "patch": "@@ -1051,7 +1051,7 @@ protected String deleteSnapshotBackup(Connection conn, String path, String secon\n         return result;\n     }\n \n-    public void swiftBackupSnapshot(Connection conn, SwiftTO swift, String srUuid, String snapshotUuid, String container, Boolean isISCSI, int wait)  {\n+    public String swiftBackupSnapshot(Connection conn, SwiftTO swift, String srUuid, String snapshotUuid, String container, Boolean isISCSI, int wait)  {\n         String lfilename;\n         String ldir;\n         if ( isISCSI ) {\n@@ -1062,6 +1062,7 @@ public void swiftBackupSnapshot(Connection conn, SwiftTO swift, String srUuid, S\n             lfilename = snapshotUuid + \".vhd\";\n         }\n         swiftUpload(conn, swift, container, ldir, lfilename, isISCSI, wait);\n+        return lfilename;\n     }\n \n     private static List<String> serializeProperties(final Object object,\n@@ -1280,6 +1281,7 @@ public Answer backupSnapshot(CopyCommand cmd) {\n             String secondaryStorageMountPath = uri.getHost() + \":\" + uri.getPath();\n             DataStoreTO destStore = destData.getDataStore();\n             String folder = destPath;\n+            String finalPath = null;\n             if (fullbackup) {\n                 // the first snapshot is always a full snapshot\n \n@@ -1297,18 +1299,24 @@ public Answer backupSnapshot(CopyCommand cmd) {\n \n                     if( destStore instanceof SwiftTO) {\n                         try {\n-                            hypervisorResource.swiftBackupSnapshot(conn, (SwiftTO)destStore, snapshotSr.getUuid(conn), snapshotBackupUuid, \"S-\" + snapshotTO.getVolume().getVolumeId().toString(), false, wait);\n-                            snapshotBackupUuid = snapshotBackupUuid + \".vhd\";\n+                            String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n+                            snapshotBackupUuid = swiftBackupSnapshot(conn, (SwiftTO)destStore, snapshotSr.getUuid(conn), snapshotBackupUuid, container, false, wait);\n+                            String swiftPath = container + File.separator + snapshotBackupUuid;\n+                            finalPath = container + File.separator + swiftPath;\n                         } finally {\n                             deleteSnapshotBackup(conn, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                         }\n+\n                     } else if (destStore instanceof S3TO) {\n                         try {\n                             backupSnapshotToS3(conn, (S3TO)destStore, snapshotSr.getUuid(conn), snapshotBackupUuid, isISCSI, wait);\n                             snapshotBackupUuid = snapshotBackupUuid + \".vhd\";\n                         } finally {\n                             deleteSnapshotBackup(conn, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                         }\n+                        finalPath = folder + File.separator + snapshotBackupUuid;\n+                    } else {\n+                        finalPath = folder + File.separator + snapshotBackupUuid;\n                     }\n \n                 } finally {\n@@ -1319,26 +1327,23 @@ public Answer backupSnapshot(CopyCommand cmd) {\n             } else {\n                 String primaryStorageSRUuid = primaryStorageSR.getUuid(conn);\n                 if( destStore instanceof SwiftTO ) {\n-                    swiftBackupSnapshot(conn, (SwiftTO)destStore, primaryStorageSRUuid, snapshotPaUuid, \"S-\" + snapshotTO.getVolume().getVolumeId().toString(), isISCSI, wait);\n-                    if ( isISCSI ) {\n-                        snapshotBackupUuid = \"VHD-\" + snapshotPaUuid;\n-                    } else {\n-                        snapshotBackupUuid = snapshotPaUuid + \".vhd\";\n-                    }\n-\n+                    String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n+                    snapshotBackupUuid = swiftBackupSnapshot(conn, (SwiftTO)destStore, primaryStorageSRUuid, snapshotPaUuid, \"S-\" + snapshotTO.getVolume().getVolumeId().toString(), isISCSI, wait);\n+                    finalPath = container + File.separator + snapshotBackupUuid;\n                 } else if (destStore instanceof S3TO ) {\n                     backupSnapshotToS3(conn, (S3TO)destStore, primaryStorageSRUuid, snapshotPaUuid, isISCSI, wait);\n+                    finalPath = folder + File.separator + snapshotPaUuid;\n                 } else {\n                     snapshotBackupUuid = backupSnapshot(conn, primaryStorageSRUuid, folder + File.separator + UUID.nameUUIDFromBytes(secondaryStorageMountPath.getBytes())\n                              , secondaryStorageMountPath, snapshotUuid, prevBackupUuid, isISCSI, wait);\n-\n+                    finalPath = folder + File.separator + snapshotBackupUuid;\n                 }\n             }\n             String volumeUuid = snapshotTO.getVolume().getPath();\n             destroySnapshotOnPrimaryStorageExceptThis(conn, volumeUuid, snapshotUuid);\n \n             SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n-            newSnapshot.setPath(folder + File.separator + snapshotBackupUuid);\n+            newSnapshot.setPath(finalPath);\n             if (fullbackup) {\n                 newSnapshot.setParentSnapshotPath(null);\n             } else {",
                "raw_url": "https://github.com/apache/cloudstack/raw/c618caf102de5df5d2224e70643a22863a72658a/plugins/hypervisors/xen/src/com/cloud/hypervisor/xen/resource/XenServerStorageProcessor.java",
                "sha": "f13225defa4fdfe947e1a56f9d9a2e4d76f93cb7",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/c618caf102de5df5d2224e70643a22863a72658a/tools/marvin/marvin/deployDataCenter.py",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/tools/marvin/marvin/deployDataCenter.py?ref=c618caf102de5df5d2224e70643a22863a72658a",
                "deletions": 1,
                "filename": "tools/marvin/marvin/deployDataCenter.py",
                "patch": "@@ -440,8 +440,9 @@ def createZones(self, zones):\n                 networkId = networkcmdresponse.id\n                 self.createpods(zone.pods, zoneId, networkId)\n \n-            self.createSecondaryStorages(zone.secondaryStorages, zoneId)\n+            '''Note: Swift needs cache storage first'''\n             self.createCacheStorages(zone.cacheStorages, zoneId)\n+            self.createSecondaryStorages(zone.secondaryStorages, zoneId)\n \n             enabled = getattr(zone, 'enabled', 'True')\n             if enabled == 'True' or enabled is None:",
                "raw_url": "https://github.com/apache/cloudstack/raw/c618caf102de5df5d2224e70643a22863a72658a/tools/marvin/marvin/deployDataCenter.py",
                "sha": "2472b2039b3907074596e44a74d6584c490a3484",
                "status": "modified"
            }
        ],
        "message": "fix localendpoint npe",
        "parent": "https://github.com/apache/cloudstack/commit/cb5ab3791675e3f0355eb2d9927e56547a39c3fe",
        "patched_files": [
            "nonossComponentContext.xml.in",
            "deployDataCenter.py",
            "CitrixResourceBase.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "CitrixResourceBaseTest.java"
        ]
    },
    "cloudstack_ca99603": {
        "bug_id": "cloudstack_ca99603",
        "commit": "https://github.com/apache/cloudstack/commit/ca9960332183f3b13e16e432f0e14f3156efc39f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/ca9960332183f3b13e16e432f0e14f3156efc39f/server/src/com/cloud/deploy/DeploymentPlanningManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/deploy/DeploymentPlanningManagerImpl.java?ref=ca9960332183f3b13e16e432f0e14f3156efc39f",
                "deletions": 1,
                "filename": "server/src/com/cloud/deploy/DeploymentPlanningManagerImpl.java",
                "patch": "@@ -1215,7 +1215,7 @@ protected boolean hostCanAccessSPool(Host host, StoragePool pool) {\n             // volume is ready and the pool should be reused.\n             // In this case, also check if rest of the volumes are ready and can\n             // be reused.\n-            if (plan.getPoolId() != null) {\n+            if (plan.getPoolId() != null || (toBeCreated.getVolumeType() == Volume.Type.DATADISK && toBeCreated.getPoolId() != null && toBeCreated.getState() == Volume.State.Ready)) {\n                 s_logger.debug(\"Volume has pool already allocated, checking if pool can be reused, poolId: \" + toBeCreated.getPoolId());\n                 List<StoragePool> suitablePools = new ArrayList<StoragePool>();\n                 StoragePool pool = null;",
                "raw_url": "https://github.com/apache/cloudstack/raw/ca9960332183f3b13e16e432f0e14f3156efc39f/server/src/com/cloud/deploy/DeploymentPlanningManagerImpl.java",
                "sha": "7345c2a99f142d7e2010da1a3294104c39530861",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/cloudstack/blob/ca9960332183f3b13e16e432f0e14f3156efc39f/server/src/com/cloud/ha/HighAvailabilityManagerImpl.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/ha/HighAvailabilityManagerImpl.java?ref=ca9960332183f3b13e16e432f0e14f3156efc39f",
                "deletions": 1,
                "filename": "server/src/com/cloud/ha/HighAvailabilityManagerImpl.java",
                "patch": "@@ -638,6 +638,9 @@ public Long migrate(final HaWorkVO work) {\n             _haDao.update(work.getId(), work);\n \n             VMInstanceVO vm = _instanceDao.findById(vmId);\n+            if (vm == null) {\n+                return null;\n+            }\n             // First try starting the vm with its original planner, if it doesn't succeed send HAPlanner as its an emergency.\n             _itMgr.migrateAway(vm.getUuid(), srcHostId);\n             return null;\n@@ -757,7 +760,10 @@ public void cancelScheduledMigrations(final HostVO host) {\n         List<HaWorkVO> works = _haDao.findTakenWorkItems(WorkType.Migration);\n         List<VMInstanceVO> vms = new ArrayList<VMInstanceVO>(works.size());\n         for (HaWorkVO work : works) {\n-            vms.add(_instanceDao.findById(work.getInstanceId()));\n+            VMInstanceVO vm = _instanceDao.findById(work.getInstanceId());\n+            if (vm != null) {\n+                vms.add(vm);\n+            }\n         }\n         return vms;\n     }\n@@ -917,6 +923,7 @@ private void runWithContext() {\n                     } else {\n                         s_logger.info(\"Rescheduling \" + work + \" to try again at \" + new Date(nextTime << 10));\n                         work.setTimeToTry(nextTime);\n+                        work.setTimesTried(work.getTimesTried() + 1);\n                         work.setServerId(null);\n                         work.setDateTaken(null);\n                     }\n@@ -927,6 +934,7 @@ private void runWithContext() {\n \n                     s_logger.info(\"Rescheduling \" + work + \" to try again at \" + new Date(nextTime << 10));\n                     work.setTimeToTry(nextTime);\n+                    work.setTimesTried(work.getTimesTried() + 1);\n                     work.setServerId(null);\n                     work.setDateTaken(null);\n \n@@ -935,6 +943,10 @@ private void runWithContext() {\n                     VMInstanceVO vm = _instanceDao.findById(work.getInstanceId());\n                     work.setUpdateTime(vm.getUpdated());\n                     work.setPreviousState(vm.getState());\n+                    if (!Step.Done.equals(work.getStep()) && work.getTimesTried() >= _maxRetries) {\n+                        s_logger.warn(\"Giving up, retries max times for work: \" + work);\n+                        work.setStep(Step.Done);\n+                    }\n                 }\n                 _haDao.update(work.getId(), work);\n             } catch (final Throwable th) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/ca9960332183f3b13e16e432f0e14f3156efc39f/server/src/com/cloud/ha/HighAvailabilityManagerImpl.java",
                "sha": "1ecdfcdc17c0a25a4b4be30099f97ee61cbcb28b",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/cloudstack/blob/ca9960332183f3b13e16e432f0e14f3156efc39f/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/UserVmManagerImpl.java?ref=ca9960332183f3b13e16e432f0e14f3156efc39f",
                "deletions": 0,
                "filename": "server/src/com/cloud/vm/UserVmManagerImpl.java",
                "patch": "@@ -1016,6 +1016,9 @@ public UserVm addNicToVirtualMachine(AddNicToVMCmd cmd) throws InvalidParameterV\n \n         NicProfile profile = new NicProfile(null, null);\n         if (ipAddress != null) {\n+            if (!(NetUtils.isValidIp(ipAddress) || NetUtils.isValidIpv6(ipAddress))) {\n+                throw new InvalidParameterValueException(\"Invalid format for IP address parameter: \" + ipAddress);\n+            }\n             profile = new NicProfile(ipAddress, null);\n         }\n \n@@ -2892,6 +2895,19 @@ protected UserVm createVirtualMachine(DataCenter zone, ServiceOffering serviceOf\n                 }\n \n                 profile.setDefaultNic(true);\n+                if (!_networkModel.areServicesSupportedInNetwork(network.getId(), new Service[]{Service.UserData})) {\n+                    if ((userData != null) && (!userData.isEmpty())) {\n+                        throw new InvalidParameterValueException(\"Unable to deploy VM as UserData is provided while deploying the VM, but there is no support for \" + Network.Service.UserData.getName() + \" service in the default network \" + network.getId());\n+                    }\n+\n+                    if ((sshPublicKey != null) && (!sshPublicKey.isEmpty())) {\n+                        throw new InvalidParameterValueException(\"Unable to deploy VM as SSH keypair is provided while deploying the VM, but there is no support for \" + Network.Service.UserData.getName() + \" service in the default network \" + network.getId());\n+                    }\n+\n+                    if (template.getEnablePassword()) {\n+                        throw new InvalidParameterValueException(\"Unable to deploy VM as template \" + template.getId() + \" is password enabled, but there is no support for \" + Network.Service.UserData.getName() + \" service in the default network \" + network.getId());\n+                    }\n+                }\n             }\n \n             networks.add(new Pair<NetworkVO, NicProfile>(network, profile));",
                "raw_url": "https://github.com/apache/cloudstack/raw/ca9960332183f3b13e16e432f0e14f3156efc39f/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "sha": "38ca3903ac5a1ac5a3c92d33be1e2abf5ac60999",
                "status": "modified"
            }
        ],
        "message": "server: NPE checks and improved case checking\n\n- pool allocation checks for both root and data disks\n- NPE checks to not add null object in collection or try to migrate null VM\n- HA work tries need to increment and be given up when max retries are crossed\n- VM creation should check IP address format for IPv4 and IPv6\n- If userdata is not supported by a network, then fail early if userdata, ssh key,\n  or password enabled template is passed/used\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n(cherry picked from commit 24435dd6bc2424da18277ca00229d1d3bb0ec284)\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/06e353e5c75a39799dbb1d79790baaeb3678b947",
        "patched_files": [
            "DeploymentPlanningManagerImpl.java",
            "HighAvailabilityManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "DeploymentPlanningManagerImplTest.java",
            "HighAvailabilityManagerImplTest.java"
        ]
    },
    "cloudstack_ce9014d": {
        "bug_id": "cloudstack_ce9014d",
        "commit": "https://github.com/apache/cloudstack/commit/ce9014d2ec8e7111ae8080b7d08cc167363acccb",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/ce9014d2ec8e7111ae8080b7d08cc167363acccb/plugins/hypervisors/kvm/resources/META-INF/cloudstack/kvm-compute/spring-kvm-compute-context.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/kvm/resources/META-INF/cloudstack/kvm-compute/spring-kvm-compute-context.xml?ref=ce9014d2ec8e7111ae8080b7d08cc167363acccb",
                "deletions": 3,
                "filename": "plugins/hypervisors/kvm/resources/META-INF/cloudstack/kvm-compute/spring-kvm-compute-context.xml",
                "patch": "@@ -31,7 +31,4 @@\n         <property name=\"name\" value=\"KVMInvestigator\" />\n     </bean>\n     \n-    <bean id=\"libvirtUtilitiesHelper\"\n-        class=\"com.cloud.hypervisor.kvm.resource.wrapper.LibvirtUtilitiesHelper\" />\n-    \n </beans>",
                "raw_url": "https://github.com/apache/cloudstack/raw/ce9014d2ec8e7111ae8080b7d08cc167363acccb/plugins/hypervisors/kvm/resources/META-INF/cloudstack/kvm-compute/spring-kvm-compute-context.xml",
                "sha": "ce596f22bbf118da9118016208f35d43de4226bd",
                "status": "modified"
            },
            {
                "additions": 46,
                "blob_url": "https://github.com/apache/cloudstack/blob/ce9014d2ec8e7111ae8080b7d08cc167363acccb/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "changes": 92,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java?ref=ce9014d2ec8e7111ae8080b7d08cc167363acccb",
                "deletions": 46,
                "filename": "plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "patch": "@@ -16,6 +16,51 @@\n // under the License.\n package com.cloud.hypervisor.kvm.resource;\n \n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.net.InetAddress;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.ejb.Local;\n+import javax.naming.ConfigurationException;\n+\n+import org.apache.cloudstack.storage.to.PrimaryDataStoreTO;\n+import org.apache.cloudstack.storage.to.VolumeObjectTO;\n+import org.apache.cloudstack.utils.linux.CPUStat;\n+import org.apache.cloudstack.utils.linux.MemStat;\n+import org.apache.cloudstack.utils.qemu.QemuImg.PhysicalDiskFormat;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.log4j.Logger;\n+import org.libvirt.Connect;\n+import org.libvirt.Domain;\n+import org.libvirt.DomainBlockStats;\n+import org.libvirt.DomainInfo;\n+import org.libvirt.DomainInfo.DomainState;\n+import org.libvirt.DomainInterfaceStats;\n+import org.libvirt.LibvirtException;\n+import org.libvirt.NodeInfo;\n+\n import com.cloud.agent.api.Answer;\n import com.cloud.agent.api.Command;\n import com.cloud.agent.api.HostVmStateReportEntry;\n@@ -95,50 +140,6 @@\n import com.cloud.utils.ssh.SshHelper;\n import com.cloud.vm.VirtualMachine;\n import com.cloud.vm.VirtualMachine.PowerState;\n-import org.apache.cloudstack.storage.to.PrimaryDataStoreTO;\n-import org.apache.cloudstack.storage.to.VolumeObjectTO;\n-import org.apache.cloudstack.utils.linux.CPUStat;\n-import org.apache.cloudstack.utils.linux.MemStat;\n-import org.apache.cloudstack.utils.qemu.QemuImg.PhysicalDiskFormat;\n-import org.apache.commons.io.FileUtils;\n-import org.apache.commons.io.IOUtils;\n-import org.apache.log4j.Logger;\n-import org.libvirt.Connect;\n-import org.libvirt.Domain;\n-import org.libvirt.DomainBlockStats;\n-import org.libvirt.DomainInfo;\n-import org.libvirt.DomainInfo.DomainState;\n-import org.libvirt.DomainInterfaceStats;\n-import org.libvirt.LibvirtException;\n-import org.libvirt.NodeInfo;\n-\n-import javax.ejb.Local;\n-import javax.inject.Inject;\n-import javax.naming.ConfigurationException;\n-import java.io.BufferedReader;\n-import java.io.File;\n-import java.io.FileNotFoundException;\n-import java.io.FileReader;\n-import java.io.IOException;\n-import java.io.Reader;\n-import java.net.InetAddress;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Calendar;\n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n-import java.util.Set;\n-import java.util.UUID;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n \n /**\n  * LibvirtComputingResource execute requests on the computing/routing host using\n@@ -264,8 +265,7 @@\n     protected CPUStat _cpuStat = new CPUStat();\n     protected MemStat _memStat = new MemStat();\n \n-    @Inject\n-    private LibvirtUtilitiesHelper libvirtUtilitiesHelper;\n+    private final LibvirtUtilitiesHelper libvirtUtilitiesHelper = new LibvirtUtilitiesHelper();\n \n     @Override\n     public ExecutionResult executeInVR(final String routerIp, final String script, final String args) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/ce9014d2ec8e7111ae8080b7d08cc167363acccb/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "sha": "7bd02d09c9a851d5e88b93995b3ad25998b097b3",
                "status": "modified"
            }
        ],
        "message": "Fix the NPE tht was being caught by the executeRequest() method. - The LibvirtUtilitiesHelper should have been injected, but it did not work on the Agent side. Due to that, when sending a StartCommand we were experiencing NPE, which made impossible to get SSVM/CPVM started. - The LibvirtUtilitiesHelper class is now being instantiated withing the LibvirtComputingResource\n\nSigned-off-by: Daan Hoogland <daan.hoogland@gmail.com>\n\nThis closes #318",
        "parent": "https://github.com/apache/cloudstack/commit/a7ab79405228e4894b1b2f68e2105b8d0cb5d34a",
        "patched_files": [
            "LibvirtComputingResource.java",
            "spring-kvm-compute-context.xml"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "LibvirtComputingResourceTest.java"
        ]
    },
    "cloudstack_cf72aa3": {
        "bug_id": "cloudstack_cf72aa3",
        "commit": "https://github.com/apache/cloudstack/commit/cf72aa32747a44ef876b9566d5c85db2f189b84e",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/cf72aa32747a44ef876b9566d5c85db2f189b84e/api/src/com/cloud/network/NetworkModel.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/network/NetworkModel.java?ref=cf72aa32747a44ef876b9566d5c85db2f189b84e",
                "deletions": 0,
                "filename": "api/src/com/cloud/network/NetworkModel.java",
                "patch": "@@ -261,4 +261,6 @@\n \tString getStartIpv6Address(long id);\n \n     Nic getPlaceholderNic(Network network, Long podId);\n+\n+    boolean isProviderEnabledInZone(long zoneId, String provider);\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/cf72aa32747a44ef876b9566d5c85db2f189b84e/api/src/com/cloud/network/NetworkModel.java",
                "sha": "c1f1674bad76b1ba8d705aa82dd192aad8b7533b",
                "status": "modified"
            },
            {
                "additions": 37,
                "blob_url": "https://github.com/apache/cloudstack/blob/cf72aa32747a44ef876b9566d5c85db2f189b84e/api/src/com/cloud/network/vpc/Vpc.java",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/network/vpc/Vpc.java?ref=cf72aa32747a44ef876b9566d5c85db2f189b84e",
                "deletions": 6,
                "filename": "api/src/com/cloud/network/vpc/Vpc.java",
                "patch": "@@ -20,32 +20,63 @@\n import org.apache.cloudstack.api.Identity;\n import org.apache.cloudstack.api.InternalIdentity;\n \n-import com.cloud.network.Network;\n-\n public interface Vpc extends ControlledEntity, Identity, InternalIdentity {\n+    \n     public enum State {\n         Enabled,\n         Inactive\n     }\n \n-   public static final String _supportedProviders = Network.Provider.VPCVirtualRouter.getName();\n-\n-   boolean readyToUse();\n-\n+    /**\n+     * \n+     * @return VPC name\n+     */\n    String getName();\n \n+   \n+   /**\n+    * @return the id of the zone the VPC belongs to\n+    */\n    long getZoneId();\n \n+   \n+   /**\n+    * @return super CIDR of the VPC. All the networks participating in VPC, should have CIDRs that are the part of the super cidr\n+    */\n    String getCidr();\n \n+   /**\n+    * \n+    * @return VPC state\n+    */\n    State getState();\n \n+   \n+   /**\n+    * \n+    * @return VPC offering id - the offering that VPC is created from\n+    */\n    long getVpcOfferingId();\n \n+   \n+   /**\n+    * \n+    * @return VPC display text\n+    */\n    String getDisplayText();\n \n+   \n+   /**\n+    * \n+    * @return VPC network domain. All networks participating in the VPC, become the part of the same network domain\n+    */\n    String getNetworkDomain();\n \n+   \n+   /**\n+    * \n+    * @return true if restart is required for the VPC; false otherwise\n+    */\n    boolean isRestartRequired();\n \n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/cf72aa32747a44ef876b9566d5c85db2f189b84e/api/src/com/cloud/network/vpc/Vpc.java",
                "sha": "249e80f1affe728f62fc7fa5fb5daf4694763daa",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/cloudstack/blob/cf72aa32747a44ef876b9566d5c85db2f189b84e/api/src/com/cloud/network/vpc/VpcOffering.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/network/vpc/VpcOffering.java?ref=cf72aa32747a44ef876b9566d5c85db2f189b84e",
                "deletions": 3,
                "filename": "api/src/com/cloud/network/vpc/VpcOffering.java",
                "patch": "@@ -27,18 +27,33 @@\n \n     public static final String defaultVPCOfferingName = \"Default VPC offering\";\n \n+    /**\n+     * \n+     * @return VPC offering name\n+     */\n     String getName();\n \n-    String getUniqueName();\n-\n+    \n+    /**\n+     * @return VPC offering display text\n+     */\n     String getDisplayText();\n+    \n \n+    /**\n+     * \n+     * @return VPC offering state\n+     */\n     State getState();\n \n+    /**\n+     * \n+     * @return true if offering is default - came with the cloudStack fresh install; false otherwise\n+     */\n     boolean isDefault();\n \n     /**\n-     * @return\n+     * @return service offering id used by VPC virutal router\n      */\n     Long getServiceOfferingId();\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/cf72aa32747a44ef876b9566d5c85db2f189b84e/api/src/com/cloud/network/vpc/VpcOffering.java",
                "sha": "3961d0aaba7a11641ed62ee5a06db78960de428d",
                "status": "modified"
            },
            {
                "additions": 46,
                "blob_url": "https://github.com/apache/cloudstack/blob/cf72aa32747a44ef876b9566d5c85db2f189b84e/api/src/com/cloud/network/vpc/VpcProvisioningService.java",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/network/vpc/VpcProvisioningService.java?ref=cf72aa32747a44ef876b9566d5c85db2f189b84e",
                "deletions": 0,
                "filename": "api/src/com/cloud/network/vpc/VpcProvisioningService.java",
                "patch": "@@ -0,0 +1,46 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.network.vpc;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+public interface VpcProvisioningService {\n+    \n+    public VpcOffering getVpcOffering(long vpcOfferingId);\n+    \n+    public VpcOffering createVpcOffering(String name, String displayText, List<String> supportedServices, Map<String, List<String>> serviceProviders);\n+    \n+    List<? extends VpcOffering> listVpcOfferings(Long id, String name, String displayText, List<String> supportedServicesStr,\n+            Boolean isDefault, String keyword, String state, Long startIndex, Long pageSizeVal);\n+    \n+    /**\n+     * @param offId\n+     * @return\n+     */\n+    public boolean deleteVpcOffering(long offId);\n+    \n+    /**\n+     * @param vpcOffId\n+     * @param vpcOfferingName\n+     * @param displayText\n+     * @param state\n+     * @return\n+     */\n+    public VpcOffering updateVpcOffering(long vpcOffId, String vpcOfferingName, String displayText, String state);\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/cf72aa32747a44ef876b9566d5c85db2f189b84e/api/src/com/cloud/network/vpc/VpcProvisioningService.java",
                "sha": "70676ce07abdef01d72bb6612f99510ab6404020",
                "status": "added"
            },
            {
                "additions": 65,
                "blob_url": "https://github.com/apache/cloudstack/blob/cf72aa32747a44ef876b9566d5c85db2f189b84e/api/src/com/cloud/network/vpc/VpcService.java",
                "changes": 95,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/network/vpc/VpcService.java?ref=cf72aa32747a44ef876b9566d5c85db2f189b84e",
                "deletions": 30,
                "filename": "api/src/com/cloud/network/vpc/VpcService.java",
                "patch": "@@ -18,7 +18,6 @@\n \n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n \n import org.apache.cloudstack.api.command.user.vpc.ListPrivateGatewaysCmd;\n import org.apache.cloudstack.api.command.user.vpc.ListStaticRoutesCmd;\n@@ -31,45 +30,29 @@\n import com.cloud.exception.ResourceUnavailableException;\n import com.cloud.network.IpAddress;\n import com.cloud.network.Network;\n-import com.cloud.network.Network.Provider;\n-import com.cloud.network.Network.Service;\n-import com.cloud.user.Account;\n-import com.cloud.user.User;\n import com.cloud.utils.Pair;\n \n public interface VpcService {\n \n-    public VpcOffering getVpcOffering(long vpcOfferingId);\n-\n-    public VpcOffering createVpcOffering(String name, String displayText, List<String> supportedServices, Map<String, List<String>> serviceProviders);\n-\n-    public Vpc getVpc(long vpcId);\n-\n-    public Vpc getActiveVpc(long vpcId);\n-\n-    public List<? extends Network> getVpcNetworks(long vpcId);\n-\n-    Map<Service, Set<Provider>> getVpcOffSvcProvidersMap(long vpcOffId);\n-\n-    List<? extends VpcOffering> listVpcOfferings(Long id, String name, String displayText, List<String> supportedServicesStr,\n-            Boolean isDefault, String keyword, String state, Long startIndex, Long pageSizeVal);\n-\n-    /**\n-     * @param offId\n+    /**Returns existing VPC found by id\n+     * \n+     * @param vpcId\n      * @return\n      */\n-    public boolean deleteVpcOffering(long offId);\n+    public Vpc getVpc(long vpcId);\n \n+    \n     /**\n-     * @param vpcOffId\n-     * @param vpcOfferingName\n-     * @param displayText\n-     * @param state\n+     * Returns all the Guest networks that are part of VPC\n+     * \n+     * @param vpcId\n      * @return\n      */\n-    public VpcOffering updateVpcOffering(long vpcOffId, String vpcOfferingName, String displayText, String state);\n+    public List<? extends Network> getVpcNetworks(long vpcId);\n \n     /**\n+     * Persists VPC record in the database\n+     * \n      * @param zoneId\n      * @param vpcOffId\n      * @param vpcOwnerId\n@@ -83,7 +66,10 @@\n     public Vpc createVpc(long zoneId, long vpcOffId, long vpcOwnerId, String vpcName, String displayText, String cidr,\n             String networkDomain) throws ResourceAllocationException;\n \n+    \n     /**\n+     * Deletes a VPC\n+     * \n      * @param vpcId\n      * @return\n      * @throws InsufficientCapacityException\n@@ -92,15 +78,21 @@ public Vpc createVpc(long zoneId, long vpcOffId, long vpcOwnerId, String vpcName\n      */\n     public boolean deleteVpc(long vpcId) throws ConcurrentOperationException, ResourceUnavailableException;\n \n+    \n     /**\n+     * Updates VPC with new name/displayText\n+     * \n      * @param vpcId\n      * @param vpcName\n      * @param displayText\n      * @return\n      */\n     public Vpc updateVpc(long vpcId, String vpcName, String displayText);\n \n+    \n     /**\n+     * Lists VPC(s) based on the parameters passed to the method call\n+     * \n      * @param id\n      * @param vpcName\n      * @param displayText\n@@ -127,6 +119,8 @@ public Vpc createVpc(long zoneId, long vpcOffId, long vpcOwnerId, String vpcName\n             Boolean restartRequired, Map<String, String> tags, Long projectId);\n \n     /**\n+     * Starts VPC which includes starting VPC provider and applying all the neworking rules on the backend\n+     * \n      * @param vpcId\n      * @param destroyOnFailure TODO\n      * @return\n@@ -138,23 +132,37 @@ boolean startVpc(long vpcId, boolean destroyOnFailure) throws ConcurrentOperatio\n                                                         ResourceUnavailableException, InsufficientCapacityException;\n \n     /**\n+     * Shuts down the VPC which includes shutting down all VPC provider and rules cleanup on the backend\n+     * \n      * @param vpcId\n      * @return\n      * @throws ConcurrentOperationException\n      * @throws ResourceUnavailableException\n      */\n     boolean shutdownVpc(long vpcId) throws ConcurrentOperationException, ResourceUnavailableException;\n \n+    \n     /**\n+     * Restarts the VPC. VPC gets shutdown and started as a part of it\n+     * \n      * @param id\n      * @return\n      * @throws InsufficientCapacityException\n      */\n     boolean restartVpc(long id) throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException;\n \n+    /**\n+     * Returns a Private gateway found in the VPC by id\n+     * \n+     * @param id\n+     * @return\n+     */\n     PrivateGateway getVpcPrivateGateway(long id);\n \n+    \n     /**\n+     * Persists VPC private gateway in the Database.\n+     * \n      * @param vpcId TODO\n      * @param physicalNetworkId\n      * @param vlan\n@@ -172,6 +180,8 @@ public PrivateGateway createVpcPrivateGateway(long vpcId, Long physicalNetworkId\n             ConcurrentOperationException, InsufficientCapacityException;\n \n     /**\n+     * Applies VPC private gateway on the backend, so it becomes functional\n+     * \n      * @param gatewayId\n      * @param destroyOnFailure TODO\n      * @return\n@@ -180,60 +190,87 @@ public PrivateGateway createVpcPrivateGateway(long vpcId, Long physicalNetworkId\n      */\n     public PrivateGateway applyVpcPrivateGateway(long gatewayId, boolean destroyOnFailure) throws ConcurrentOperationException, ResourceUnavailableException;\n \n+    \n     /**\n+     * Deletes VPC private gateway\n+     * \n      * @param id\n      * @return\n      * @throws ResourceUnavailableException\n      * @throws ConcurrentOperationException\n      */\n     boolean deleteVpcPrivateGateway(long gatewayId) throws ConcurrentOperationException, ResourceUnavailableException;\n \n+    \n     /**\n+     * Returns the list of Private gateways existing in the VPC\n+     * \n      * @param listPrivateGatewaysCmd\n      * @return\n      */\n     public Pair<List<PrivateGateway>, Integer> listPrivateGateway(ListPrivateGatewaysCmd listPrivateGatewaysCmd);\n \n+    \n     /**\n+     * Returns Static Route found by Id\n+     * \n      * @param routeId\n      * @return\n      */\n     StaticRoute getStaticRoute(long routeId);\n \n+    \n     /**\n+     * Applies existing Static Routes to the VPC elements\n+     * \n      * @param vpcId\n      * @return\n      * @throws ResourceUnavailableException\n      */\n     public boolean applyStaticRoutes(long vpcId) throws ResourceUnavailableException;\n \n+    \n     /**\n+     * Deletes static route from the backend and the database\n+     * \n      * @param routeId\n      * @return TODO\n      * @throws ResourceUnavailableException\n      */\n     public boolean revokeStaticRoute(long routeId) throws ResourceUnavailableException;\n \n+    \n     /**\n+     * Persists static route entry in the Database\n+     * \n      * @param gatewayId\n      * @param cidr\n      * @return\n      */\n     public StaticRoute createStaticRoute(long gatewayId, String cidr) throws NetworkRuleConflictException;\n \n+    \n     /**\n+     * Lists static routes based on parameters passed to the call\n+     * \n      * @param listStaticRoutesCmd\n      * @return\n      */\n     public Pair<List<? extends StaticRoute>, Integer> listStaticRoutes(ListStaticRoutesCmd cmd);\n \n+    \n     /**\n+     * Returns gateway (VPN or Public) existign in the VPC \n+     * \n      * @param id\n      * @return\n      */\n     VpcGateway getVpcGateway(long id);\n \n+    \n     /**\n+     * Associates IP address from the Public network, to the VPC\n+     * \n      * @param ipId\n      * @param vpcId\n      * @return\n@@ -245,6 +282,4 @@ public PrivateGateway createVpcPrivateGateway(long vpcId, Long physicalNetworkId\n     IpAddress associateIPToVpc(long ipId, long vpcId) throws ResourceAllocationException, ResourceUnavailableException,\n         InsufficientAddressCapacityException, ConcurrentOperationException;\n \n-    public Network updateVpcGuestNetwork(long networkId, String name, String displayText, Account callerAccount,\n-            User callerUser, String domainSuffix, Long ntwkOffId, Boolean changeCidr, String guestVmCidr);\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/cf72aa32747a44ef876b9566d5c85db2f189b84e/api/src/com/cloud/network/vpc/VpcService.java",
                "sha": "07ce89b0a3f38dca61ceef0b0a1d2e3fac6c7d3e",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/cf72aa32747a44ef876b9566d5c85db2f189b84e/api/src/org/apache/cloudstack/api/BaseCmd.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/BaseCmd.java?ref=cf72aa32747a44ef876b9566d5c85db2f189b84e",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/api/BaseCmd.java",
                "patch": "@@ -52,6 +52,7 @@\n import com.cloud.network.lb.LoadBalancingRulesService;\n import com.cloud.network.rules.RulesService;\n import com.cloud.network.security.SecurityGroupService;\n+import com.cloud.network.vpc.VpcProvisioningService;\n import com.cloud.network.vpc.VpcService;\n import com.cloud.network.vpn.RemoteAccessVpnService;\n import com.cloud.network.vpn.Site2SiteVpnService;\n@@ -132,6 +133,7 @@\n     @Inject public NetworkUsageService _networkUsageService;\n     @Inject public VMSnapshotService _vmSnapshotService;\n     @Inject public DataStoreProviderApiService dataStoreProviderApiService;\n+    @Inject public VpcProvisioningService _vpcProvSvc;\n \n     public abstract void execute() throws ResourceUnavailableException, InsufficientCapacityException, ServerApiException, ConcurrentOperationException, ResourceAllocationException, NetworkRuleConflictException;\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/cf72aa32747a44ef876b9566d5c85db2f189b84e/api/src/org/apache/cloudstack/api/BaseCmd.java",
                "sha": "78a2af36aa2059a838cfda1725e802ebcee9cf68",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/cf72aa32747a44ef876b9566d5c85db2f189b84e/api/src/org/apache/cloudstack/api/command/admin/vpc/CreateVPCOfferingCmd.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/command/admin/vpc/CreateVPCOfferingCmd.java?ref=cf72aa32747a44ef876b9566d5c85db2f189b84e",
                "deletions": 2,
                "filename": "api/src/org/apache/cloudstack/api/command/admin/vpc/CreateVPCOfferingCmd.java",
                "patch": "@@ -98,7 +98,7 @@ public String getDisplayText() {\n \n     @Override\n     public void create() throws ResourceAllocationException {\n-        VpcOffering vpcOff = _vpcService.createVpcOffering(getVpcOfferingName(), getDisplayText(), getSupportedServices(), getServiceProviders());\n+        VpcOffering vpcOff = _vpcProvSvc.createVpcOffering(getVpcOfferingName(), getDisplayText(), getSupportedServices(), getServiceProviders());\n         if (vpcOff != null) {\n             this.setEntityId(vpcOff.getId());\n             this.setEntityUuid(vpcOff.getUuid());\n@@ -109,7 +109,7 @@ public void create() throws ResourceAllocationException {\n \n     @Override\n     public void execute() {\n-        VpcOffering vpc = _vpcService.getVpcOffering(this.getEntityId());\n+        VpcOffering vpc = _vpcProvSvc.getVpcOffering(this.getEntityId());\n         if (vpc != null) {\n             VpcOfferingResponse response = _responseGenerator.createVpcOfferingResponse(vpc);\n             response.setResponseName(getCommandName());",
                "raw_url": "https://github.com/apache/cloudstack/raw/cf72aa32747a44ef876b9566d5c85db2f189b84e/api/src/org/apache/cloudstack/api/command/admin/vpc/CreateVPCOfferingCmd.java",
                "sha": "4a3a92a211cf1ad96022e68ce209f3c1f2ad5838",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/cf72aa32747a44ef876b9566d5c85db2f189b84e/api/src/org/apache/cloudstack/api/command/admin/vpc/DeleteVPCOfferingCmd.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/command/admin/vpc/DeleteVPCOfferingCmd.java?ref=cf72aa32747a44ef876b9566d5c85db2f189b84e",
                "deletions": 1,
                "filename": "api/src/org/apache/cloudstack/api/command/admin/vpc/DeleteVPCOfferingCmd.java",
                "patch": "@@ -66,7 +66,7 @@ public long getEntityOwnerId() {\n \n     @Override\n     public void execute(){\n-        boolean result = _vpcService.deleteVpcOffering(getId());\n+        boolean result = _vpcProvSvc.deleteVpcOffering(getId());\n         if (result) {\n             SuccessResponse response = new SuccessResponse(getCommandName());\n             this.setResponseObject(response);",
                "raw_url": "https://github.com/apache/cloudstack/raw/cf72aa32747a44ef876b9566d5c85db2f189b84e/api/src/org/apache/cloudstack/api/command/admin/vpc/DeleteVPCOfferingCmd.java",
                "sha": "4b16fa5fcb917b16d452f05777cfe4b32ecc3a5c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/cf72aa32747a44ef876b9566d5c85db2f189b84e/api/src/org/apache/cloudstack/api/command/admin/vpc/UpdateVPCOfferingCmd.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/command/admin/vpc/UpdateVPCOfferingCmd.java?ref=cf72aa32747a44ef876b9566d5c85db2f189b84e",
                "deletions": 1,
                "filename": "api/src/org/apache/cloudstack/api/command/admin/vpc/UpdateVPCOfferingCmd.java",
                "patch": "@@ -88,7 +88,7 @@ public long getEntityOwnerId() {\n \n     @Override\n     public void execute(){\n-        VpcOffering result = _vpcService.updateVpcOffering(getId(), getVpcOfferingName(), getDisplayText(), getState());\n+        VpcOffering result = _vpcProvSvc.updateVpcOffering(getId(), getVpcOfferingName(), getDisplayText(), getState());\n         if (result != null) {\n             VpcOfferingResponse response = _responseGenerator.createVpcOfferingResponse(result);\n             response.setResponseName(getCommandName());",
                "raw_url": "https://github.com/apache/cloudstack/raw/cf72aa32747a44ef876b9566d5c85db2f189b84e/api/src/org/apache/cloudstack/api/command/admin/vpc/UpdateVPCOfferingCmd.java",
                "sha": "9bbae064376cba476259bb2f64826f44d38fc242",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/cf72aa32747a44ef876b9566d5c85db2f189b84e/api/src/org/apache/cloudstack/api/command/user/network/UpdateNetworkCmd.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/command/user/network/UpdateNetworkCmd.java?ref=cf72aa32747a44ef876b9566d5c85db2f189b84e",
                "deletions": 7,
                "filename": "api/src/org/apache/cloudstack/api/command/user/network/UpdateNetworkCmd.java",
                "patch": "@@ -129,14 +129,9 @@ public void execute() throws InsufficientCapacityException, ConcurrentOperationE\n             throw new InvalidParameterValueException(\"Couldn't find network by id\");\n         }\n \n-        Network result = null;\n-        if (network.getVpcId() != null) {\n-            result = _vpcService.updateVpcGuestNetwork(getId(), getNetworkName(), getDisplayText(), callerAccount,\n+        Network result = _networkService.updateGuestNetwork(getId(), getNetworkName(), getDisplayText(), callerAccount,\n                     callerUser, getNetworkDomain(), getNetworkOfferingId(), getChangeCidr(), getGuestVmCidr());\n-        } else {\n-            result = _networkService.updateGuestNetwork(getId(), getNetworkName(), getDisplayText(), callerAccount,\n-                    callerUser, getNetworkDomain(), getNetworkOfferingId(), getChangeCidr(), getGuestVmCidr());\n-        }\n+        \n \n         if (result != null) {\n             NetworkResponse response = _responseGenerator.createNetworkResponse(result);",
                "raw_url": "https://github.com/apache/cloudstack/raw/cf72aa32747a44ef876b9566d5c85db2f189b84e/api/src/org/apache/cloudstack/api/command/user/network/UpdateNetworkCmd.java",
                "sha": "a61474e69d0b8962bdf392dba74dd28014d9dd28",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/cf72aa32747a44ef876b9566d5c85db2f189b84e/api/src/org/apache/cloudstack/api/command/user/vpc/ListVPCOfferingsCmd.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/command/user/vpc/ListVPCOfferingsCmd.java?ref=cf72aa32747a44ef876b9566d5c85db2f189b84e",
                "deletions": 1,
                "filename": "api/src/org/apache/cloudstack/api/command/user/vpc/ListVPCOfferingsCmd.java",
                "patch": "@@ -92,7 +92,7 @@ public String getState() {\n \n     @Override\n     public void execute(){\n-        List<? extends VpcOffering> offerings = _vpcService.listVpcOfferings(getId(), getVpcOffName(), getDisplayText(),\n+        List<? extends VpcOffering> offerings = _vpcProvSvc.listVpcOfferings(getId(), getVpcOffName(), getDisplayText(),\n                 getSupportedServices(), isDefault, this.getKeyword(), getState(), this.getStartIndex(), this.getPageSizeVal());\n         ListResponse<VpcOfferingResponse> response = new ListResponse<VpcOfferingResponse>();\n         List<VpcOfferingResponse> offeringResponses = new ArrayList<VpcOfferingResponse>();",
                "raw_url": "https://github.com/apache/cloudstack/raw/cf72aa32747a44ef876b9566d5c85db2f189b84e/api/src/org/apache/cloudstack/api/command/user/vpc/ListVPCOfferingsCmd.java",
                "sha": "ddae79987844d8ecc8ef35e56a42d39a4c0d1db8",
                "status": "modified"
            },
            {
                "additions": 67,
                "blob_url": "https://github.com/apache/cloudstack/blob/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/src/com/cloud/api/ApiDBUtils.java",
                "changes": 77,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiDBUtils.java?ref=cf72aa32747a44ef876b9566d5c85db2f189b84e",
                "deletions": 10,
                "filename": "server/src/com/cloud/api/ApiDBUtils.java",
                "patch": "@@ -95,8 +95,20 @@\n import com.cloud.configuration.ConfigurationService;\n import com.cloud.configuration.Resource.ResourceType;\n import com.cloud.configuration.dao.ConfigurationDao;\n-import com.cloud.dc.*;\n-import com.cloud.dc.dao.*;\n+import com.cloud.dc.AccountVlanMapVO;\n+import com.cloud.dc.ClusterDetailsDao;\n+import com.cloud.dc.ClusterDetailsVO;\n+import com.cloud.dc.ClusterVO;\n+import com.cloud.dc.DataCenter;\n+import com.cloud.dc.DataCenterVO;\n+import com.cloud.dc.HostPodVO;\n+import com.cloud.dc.Vlan;\n+import com.cloud.dc.VlanVO;\n+import com.cloud.dc.dao.AccountVlanMapDao;\n+import com.cloud.dc.dao.ClusterDao;\n+import com.cloud.dc.dao.DataCenterDao;\n+import com.cloud.dc.dao.HostPodDao;\n+import com.cloud.dc.dao.VlanDao;\n import com.cloud.domain.DomainVO;\n import com.cloud.domain.dao.DomainDao;\n import com.cloud.event.Event;\n@@ -162,7 +174,12 @@\n import com.cloud.network.security.SecurityGroupManager;\n import com.cloud.network.security.SecurityGroupVO;\n import com.cloud.network.security.dao.SecurityGroupDao;\n-import com.cloud.network.vpc.*;\n+import com.cloud.network.vpc.StaticRouteVO;\n+import com.cloud.network.vpc.VpcGatewayVO;\n+import com.cloud.network.vpc.VpcManager;\n+import com.cloud.network.vpc.VpcOffering;\n+import com.cloud.network.vpc.VpcProvisioningService;\n+import com.cloud.network.vpc.VpcVO;\n import com.cloud.network.vpc.dao.StaticRouteDao;\n import com.cloud.network.vpc.dao.VpcDao;\n import com.cloud.network.vpc.dao.VpcGatewayDao;\n@@ -177,19 +194,57 @@\n import com.cloud.projects.ProjectInvitation;\n import com.cloud.projects.ProjectService;\n import com.cloud.resource.ResourceManager;\n-import com.cloud.server.*;\n+import com.cloud.server.Criteria;\n+import com.cloud.server.ManagementServer;\n+import com.cloud.server.ResourceTag;\n import com.cloud.server.ResourceTag.TaggedResourceType;\n+import com.cloud.server.StatsCollector;\n+import com.cloud.server.TaggedResourceService;\n import com.cloud.service.ServiceOfferingVO;\n import com.cloud.service.dao.ServiceOfferingDao;\n-import com.cloud.storage.*;\n+import com.cloud.storage.DiskOfferingVO;\n+import com.cloud.storage.GuestOS;\n+import com.cloud.storage.GuestOSCategoryVO;\n+import com.cloud.storage.Snapshot;\n+import com.cloud.storage.SnapshotVO;\n import com.cloud.storage.Storage.ImageFormat;\n-\n+import com.cloud.storage.StorageManager;\n+import com.cloud.storage.StoragePool;\n+import com.cloud.storage.StorageStats;\n+import com.cloud.storage.UploadVO;\n+import com.cloud.storage.VMTemplateHostVO;\n+import com.cloud.storage.VMTemplateS3VO;\n+import com.cloud.storage.VMTemplateSwiftVO;\n+import com.cloud.storage.VMTemplateVO;\n+import com.cloud.storage.Volume;\n import com.cloud.storage.Volume.Type;\n-import com.cloud.storage.dao.*;\n+import com.cloud.storage.VolumeHostVO;\n+import com.cloud.storage.VolumeManager;\n+import com.cloud.storage.VolumeVO;\n+import com.cloud.storage.dao.DiskOfferingDao;\n+import com.cloud.storage.dao.GuestOSCategoryDao;\n+import com.cloud.storage.dao.GuestOSDao;\n+import com.cloud.storage.dao.SnapshotDao;\n+import com.cloud.storage.dao.SnapshotPolicyDao;\n+import com.cloud.storage.dao.UploadDao;\n+import com.cloud.storage.dao.VMTemplateDao;\n+import com.cloud.storage.dao.VMTemplateDetailsDao;\n+import com.cloud.storage.dao.VMTemplateHostDao;\n+import com.cloud.storage.dao.VMTemplateS3Dao;\n+import com.cloud.storage.dao.VMTemplateSwiftDao;\n+import com.cloud.storage.dao.VolumeDao;\n+import com.cloud.storage.dao.VolumeHostDao;\n import com.cloud.storage.snapshot.SnapshotPolicy;\n import com.cloud.template.TemplateManager;\n-import com.cloud.user.*;\n-\n+import com.cloud.user.Account;\n+import com.cloud.user.AccountDetailsDao;\n+import com.cloud.user.AccountVO;\n+import com.cloud.user.ResourceLimitService;\n+import com.cloud.user.SSHKeyPairVO;\n+import com.cloud.user.User;\n+import com.cloud.user.UserAccount;\n+import com.cloud.user.UserStatisticsVO;\n+import com.cloud.user.UserVO;\n import com.cloud.user.dao.AccountDao;\n import com.cloud.user.dao.SSHKeyPairDao;\n import com.cloud.user.dao.UserDao;\n@@ -202,7 +257,6 @@\n import com.cloud.vm.InstanceGroup;\n import com.cloud.vm.InstanceGroupVO;\n import com.cloud.vm.NicProfile;\n-import com.cloud.vm.NicSecondaryIp;\n import com.cloud.vm.UserVmDetailVO;\n import com.cloud.vm.UserVmManager;\n import com.cloud.vm.UserVmVO;\n@@ -324,6 +378,7 @@\n     static VMSnapshotDao _vmSnapshotDao;\n     static ClusterDetailsDao _clusterDetailsDao;\n     static NicSecondaryIpDao _nicSecondaryIpDao;\n+    static VpcProvisioningService _vpcProvSvc;\n \n     @Inject private ManagementServer ms;\n     @Inject public AsyncJobManager asyncMgr;\n@@ -427,6 +482,7 @@\n     @Inject private ClusterDetailsDao clusterDetailsDao;\n     @Inject private VMSnapshotDao vmSnapshotDao;\n     @Inject private NicSecondaryIpDao nicSecondaryIpDao;\n+    @Inject private VpcProvisioningService vpcProvSvc;\n     @PostConstruct\n     void init() {\n         _ms = ms;\n@@ -528,6 +584,7 @@ void init() {\n         _clusterDetailsDao = clusterDetailsDao;\n         _vmSnapshotDao = vmSnapshotDao;\n         _nicSecondaryIpDao = nicSecondaryIpDao;\n+        _vpcProvSvc = vpcProvSvc;\n         // Note: stats collector should already have been initialized by this time, otherwise a null instance is returned\n         _statsCollector = StatsCollector.getInstance();\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/src/com/cloud/api/ApiDBUtils.java",
                "sha": "7b441901d5e526ba33d9322d736ebf2ffc945540",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/src/com/cloud/network/NetworkManager.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/NetworkManager.java?ref=cf72aa32747a44ef876b9566d5c85db2f189b84e",
                "deletions": 3,
                "filename": "server/src/com/cloud/network/NetworkManager.java",
                "patch": "@@ -20,8 +20,8 @@\n import java.util.Map;\n \n import org.apache.cloudstack.acl.ControlledEntity.ACLType;\n+\n import com.cloud.dc.DataCenter;\n-import com.cloud.dc.DataCenterVO;\n import com.cloud.dc.Pod;\n import com.cloud.dc.Vlan.VlanType;\n import com.cloud.deploy.DataCenterDeployment;\n@@ -51,13 +51,11 @@\n import com.cloud.utils.Pair;\n import com.cloud.vm.Nic;\n import com.cloud.vm.NicProfile;\n-import com.cloud.vm.NicSecondaryIp;\n import com.cloud.vm.NicVO;\n import com.cloud.vm.ReservationContext;\n import com.cloud.vm.VMInstanceVO;\n import com.cloud.vm.VirtualMachine;\n import com.cloud.vm.VirtualMachineProfile;\n-import com.cloud.vm.VirtualMachineProfileImpl;\n \n /**\n  * NetworkManager manages the network for the different end users.",
                "raw_url": "https://github.com/apache/cloudstack/raw/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/src/com/cloud/network/NetworkManager.java",
                "sha": "851f7f545497ffa7d15133bb10f7eaa9937b7cea",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/src/com/cloud/network/NetworkManagerImpl.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/NetworkManagerImpl.java?ref=cf72aa32747a44ef876b9566d5c85db2f189b84e",
                "deletions": 1,
                "filename": "server/src/com/cloud/network/NetworkManagerImpl.java",
                "patch": "@@ -1528,7 +1528,6 @@ public void implementNetworkElementsAndResources(DeployDestination dest, Reserva\n         // associate a source NAT IP (if one isn't already associated with the network)\n \n         boolean sharedSourceNat = offering.getSharedSourceNat();\n-        DataCenter zone = _dcDao.findById(network.getDataCenterId());\n         if (network.getGuestType() == Network.GuestType.Isolated\n                && _networkModel.areServicesSupportedInNetwork(network.getId(), Service.SourceNat)\n                && !sharedSourceNat) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/src/com/cloud/network/NetworkManagerImpl.java",
                "sha": "c0685ba20337b2d253eb6d0263c0d81e9b8ef8e5",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/cloudstack/blob/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/src/com/cloud/network/NetworkModelImpl.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/NetworkModelImpl.java?ref=cf72aa32747a44ef876b9566d5c85db2f189b84e",
                "deletions": 0,
                "filename": "server/src/com/cloud/network/NetworkModelImpl.java",
                "patch": "@@ -1212,6 +1212,19 @@ public boolean isProviderEnabledInPhysicalNetwork(long physicalNetowrkId, String\n         }\n         return isProviderEnabled(ntwkSvcProvider);\n     }\n+    \n+    @Override\n+    public boolean isProviderEnabledInZone(long zoneId, String provider)\n+    {\n+        //the provider has to be enabled at least in one network in the zone\n+        for (PhysicalNetwork pNtwk : _physicalNetworkDao.listByZone(zoneId)) {\n+            if (isProviderEnabledInPhysicalNetwork(pNtwk.getId(), provider)) {\n+                return true;\n+            }\n+        }\n+        \n+        return false;\n+    }\n \n     @Override\n     public String getNetworkTag(HypervisorType hType, Network network) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/src/com/cloud/network/NetworkModelImpl.java",
                "sha": "d967f3346bfb9aa424da33896f623fa4493167ab",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/src/com/cloud/network/NetworkServiceImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/NetworkServiceImpl.java?ref=cf72aa32747a44ef876b9566d5c85db2f189b84e",
                "deletions": 0,
                "filename": "server/src/com/cloud/network/NetworkServiceImpl.java",
                "patch": "@@ -94,6 +94,7 @@\n import com.cloud.network.rules.PortForwardingRuleVO;\n import com.cloud.network.rules.RulesManager;\n import com.cloud.network.vpc.PrivateIpVO;\n+import com.cloud.network.vpc.Vpc;\n import com.cloud.network.vpc.VpcManager;\n import com.cloud.network.vpc.dao.PrivateIpDao;\n import com.cloud.offering.NetworkOffering;\n@@ -1715,6 +1716,12 @@ public Network updateGuestNetwork(long networkId, String name, String displayTex\n             ex.addProxyObject(\"networks\", networkId, \"networkId\");\n             throw ex;\n         }\n+        \n+        //perform below validation if the network is vpc network\n+        if (network.getVpcId() != null && networkOfferingId != null) {\n+            Vpc vpc = _vpcMgr.getVpc(network.getVpcId());\n+            _vpcMgr.validateNtwkOffForNtwkInVpc(networkId, networkOfferingId, null, null, vpc, null, _accountMgr.getAccount(network.getAccountId()));\n+        }\n \n         // don't allow to update network in Destroy state\n         if (network.getState() == Network.State.Destroy) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/src/com/cloud/network/NetworkServiceImpl.java",
                "sha": "d5034597f4f42168a6e0f03b42973fb9ed3c83a0",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/src/com/cloud/network/element/VpcVirtualRouterElement.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/element/VpcVirtualRouterElement.java?ref=cf72aa32747a44ef876b9566d5c85db2f189b84e",
                "deletions": 11,
                "filename": "server/src/com/cloud/network/element/VpcVirtualRouterElement.java",
                "patch": "@@ -37,6 +37,7 @@\n import com.cloud.network.Network.Capability;\n import com.cloud.network.Network.Provider;\n import com.cloud.network.Network.Service;\n+import com.cloud.network.NetworkModel;\n import com.cloud.network.PublicIpAddress;\n import com.cloud.network.Site2SiteVpnConnection;\n import com.cloud.network.Site2SiteVpnGateway;\n@@ -76,6 +77,8 @@\n     Site2SiteVpnGatewayDao _vpnGatewayDao;\n     @Inject\n     IPAddressDao _ipAddressDao;\n+    @Inject\n+    NetworkModel _ntwkModel;\n \n     private static final Map<Service, Map<Capability, String>> capabilities = setCapabilities();\n \n@@ -322,7 +325,7 @@ public boolean createPrivateGateway(PrivateGateway gateway) throws ConcurrentOpe\n             return false;\n         }\n \n-        List<DomainRouterVO> routers = _vpcMgr.getVpcRouters(gateway.getVpcId());\n+        List<DomainRouterVO> routers = _vpcRouterMgr.getVpcRouters(gateway.getVpcId());\n         if (routers == null || routers.isEmpty()) {\n             s_logger.debug(this.getName() + \" element doesn't need to create Private gateway on the backend; VPC virtual \" +\n                     \"router doesn't exist in the vpc id=\" + gateway.getVpcId());\n@@ -345,7 +348,7 @@ public boolean deletePrivateGateway(PrivateGateway gateway) throws ConcurrentOpe\n             return false;\n         }\n \n-        List<DomainRouterVO> routers = _vpcMgr.getVpcRouters(gateway.getVpcId());\n+        List<DomainRouterVO> routers = _vpcRouterMgr.getVpcRouters(gateway.getVpcId());\n         if (routers == null || routers.isEmpty()) {\n             s_logger.debug(this.getName() + \" element doesn't need to delete Private gateway on the backend; VPC virtual \" +\n                     \"router doesn't exist in the vpc id=\" + gateway.getVpcId());\n@@ -361,10 +364,6 @@ public boolean deletePrivateGateway(PrivateGateway gateway) throws ConcurrentOpe\n         return _vpcRouterMgr.destroyPrivateGateway(gateway, router);\n     }\n \n-    @Override\n-    protected List<DomainRouterVO> getRouters(Network network, DeployDestination dest) {\n-        return  _vpcMgr.getVpcRouters(network.getVpcId());\n-    }\n \n     @Override\n     public boolean applyIps(Network network, List<? extends PublicIpAddress> ipAddress, Set<Service> services) \n@@ -377,7 +376,7 @@ public boolean applyIps(Network network, List<? extends PublicIpAddress> ipAddre\n             }\n         }\n         if (canHandle) {\n-            List<DomainRouterVO> routers = getRouters(network, null);\n+            List<DomainRouterVO> routers = _routerDao.listByNetworkAndRole(network.getId(), Role.VIRTUAL_ROUTER);\n             if (routers == null || routers.isEmpty()) {\n                 s_logger.debug(this.getName() + \" element doesn't need to associate ip addresses on the backend; VPC virtual \" +\n                         \"router doesn't exist in the network \" + network.getId());\n@@ -446,12 +445,12 @@ public boolean startSite2SiteVpn(Site2SiteVpnConnection conn) throws ResourceUna\n         Long vpcId = ip.getVpcId();\n         Vpc vpc = _vpcMgr.getVpc(vpcId);\n \n-        if (!_vpcMgr.vpcProviderEnabledInZone(vpc.getZoneId(), Provider.VPCVirtualRouter.getName())) {\n+        if (!_ntwkModel.isProviderEnabledInZone(vpc.getZoneId(), Provider.VPCVirtualRouter.getName())) {\n             throw new ResourceUnavailableException(\"VPC provider is not enabled in zone \" + vpc.getZoneId(),\n                     DataCenter.class, vpc.getZoneId());\n         }\n \n-        List<DomainRouterVO> routers = _vpcMgr.getVpcRouters(ip.getVpcId());\n+        List<DomainRouterVO> routers = _vpcRouterMgr.getVpcRouters(ip.getVpcId());\n         if (routers == null || routers.size() != 1) {\n             throw new ResourceUnavailableException(\"Cannot enable site-to-site VPN on the backend; virtual router doesn't exist in the vpc \" + ip.getVpcId(),\n                     DataCenter.class, vpc.getZoneId());\n@@ -474,12 +473,12 @@ public boolean stopSite2SiteVpn(Site2SiteVpnConnection conn) throws ResourceUnav\n         Long vpcId = ip.getVpcId();\n         Vpc vpc = _vpcMgr.getVpc(vpcId);\n \n-        if (!_vpcMgr.vpcProviderEnabledInZone(vpc.getZoneId(), Provider.VPCVirtualRouter.getName())) {\n+        if (!_ntwkModel.isProviderEnabledInZone(vpc.getZoneId(), Provider.VPCVirtualRouter.getName())) {\n             throw new ResourceUnavailableException(\"VPC provider is not enabled in zone \" + vpc.getZoneId(),\n                     DataCenter.class, vpc.getZoneId());\n         }\n \n-        List<DomainRouterVO> routers = _vpcMgr.getVpcRouters(ip.getVpcId());\n+        List<DomainRouterVO> routers = _vpcRouterMgr.getVpcRouters(ip.getVpcId());\n         if (routers == null || routers.size() != 1) {\n             throw new ResourceUnavailableException(\"Cannot enable site-to-site VPN on the backend; virtual router doesn't exist in the vpc \" + ip.getVpcId(),\n                     DataCenter.class, vpc.getZoneId());",
                "raw_url": "https://github.com/apache/cloudstack/raw/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/src/com/cloud/network/element/VpcVirtualRouterElement.java",
                "sha": "08443698ea0b0e5897cf2b2a65b97e9837a50ca2",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/src/com/cloud/network/router/VpcVirtualNetworkApplianceManager.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/VpcVirtualNetworkApplianceManager.java?ref=cf72aa32747a44ef876b9566d5c85db2f189b84e",
                "deletions": 0,
                "filename": "server/src/com/cloud/network/router/VpcVirtualNetworkApplianceManager.java",
                "patch": "@@ -101,4 +101,10 @@ boolean applyNetworkACLs(Network network, List<? extends FirewallRule> rules, Li\n      * @throws ResourceUnavailableException\n      */\n     boolean stopSite2SiteVpn(Site2SiteVpnConnection conn, VirtualRouter router) throws ResourceUnavailableException;\n+    \n+    /**\n+     * @param vpcId\n+     * @return\n+     */\n+    List<DomainRouterVO> getVpcRouters(long vpcId);\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/src/com/cloud/network/router/VpcVirtualNetworkApplianceManager.java",
                "sha": "76c8aa891734b4aa6b2cc6e3735f0b01c583356b",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/src/com/cloud/network/router/VpcVirtualNetworkApplianceManagerImpl.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/VpcVirtualNetworkApplianceManagerImpl.java?ref=cf72aa32747a44ef876b9566d5c85db2f189b84e",
                "deletions": 5,
                "filename": "server/src/com/cloud/network/router/VpcVirtualNetworkApplianceManagerImpl.java",
                "patch": "@@ -234,7 +234,7 @@\n         long dcId = dest.getDataCenter().getId();\n         \n         DeploymentPlan plan = new DataCenterDeployment(dcId);\n-        List<DomainRouterVO> routers = _routerDao.listByVpcId(vpcId);\n+        List<DomainRouterVO> routers = getVpcRouters(vpcId);\n         \n         return new Pair<DeploymentPlan, List<DomainRouterVO>>(plan, routers);\n     }\n@@ -1212,7 +1212,7 @@ private void createVpcAssociatePrivateIPCommands(final VirtualRouter router, fin\n         networks = super.createRouterNetworks(owner, isRedundant, plan, null, sourceNatIp);\n \n         //2) allocate nic for private gateway if needed\n-        VpcGateway privateGateway = _vpcMgr.getPrivateGatewayForVpc(vpcId);\n+        PrivateGateway privateGateway = _vpcMgr.getVpcPrivateGateway(vpcId);\n         if (privateGateway != null) {\n             NicProfile privateNic = createPrivateNicProfileForGateway(privateGateway);\n             Network privateNetwork = _networkModel.getNetwork(privateGateway.getNetworkId());\n@@ -1233,7 +1233,7 @@ private void createVpcAssociatePrivateIPCommands(final VirtualRouter router, fin\n         for (IPAddressVO ip : ips) {\n             PublicIp publicIp = PublicIp.createFromAddrAndVlan(ip, _vlanDao.findById(ip.getVlanId()));\n             if ((ip.getState() == IpAddress.State.Allocated || ip.getState() == IpAddress.State.Allocating) \n-                    && _vpcMgr.ipUsedInVpc(ip)&& !publicVlans.contains(publicIp.getVlanTag())) {\n+                    && _vpcMgr.isIpAllocatedToVpc(ip)&& !publicVlans.contains(publicIp.getVlanTag())) {\n                 s_logger.debug(\"Allocating nic for router in vlan \" + publicIp.getVlanTag());\n                 NicProfile publicNic = new NicProfile();\n                 publicNic.setDefaultNic(false);\n@@ -1314,7 +1314,7 @@ protected NicProfile createGuestNicProfileForVpcRouter(Network guestNetwork) {\n             long publicNtwkId = ip.getNetworkId();\n             \n             //if ip is not associated to any network, and there are no firewall rules, release it on the backend\n-            if (!_vpcMgr.ipUsedInVpc(ip)) {\n+            if (!_vpcMgr.isIpAllocatedToVpc(ip)) {\n                 ip.setState(IpAddress.State.Releasing);\n             }\n                          \n@@ -1334,7 +1334,7 @@ protected NicProfile createGuestNicProfileForVpcRouter(Network guestNetwork) {\n             long publicNtwkId = ip.getNetworkId();\n             \n             //if ip is not associated to any network, and there are no firewall rules, release it on the backend\n-            if (!_vpcMgr.ipUsedInVpc(ip)) {\n+            if (!_vpcMgr.isIpAllocatedToVpc(ip)) {\n                 ip.setState(IpAddress.State.Releasing);\n             }\n                          \n@@ -1376,4 +1376,9 @@ public void finalizeStop(VirtualMachineProfile<DomainRouterVO> profile, StopAnsw\n         }\n     }\n     \n+    @Override\n+    public List<DomainRouterVO> getVpcRouters(long vpcId) {\n+        return _routerDao.listByVpcId(vpcId);\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/src/com/cloud/network/router/VpcVirtualNetworkApplianceManagerImpl.java",
                "sha": "bdfac060798c0406083c2cf149859c4c5cfc02a5",
                "status": "modified"
            },
            {
                "additions": 50,
                "blob_url": "https://github.com/apache/cloudstack/blob/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/src/com/cloud/network/vpc/VpcManager.java",
                "changes": 84,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/vpc/VpcManager.java?ref=cf72aa32747a44ef876b9566d5c85db2f189b84e",
                "deletions": 34,
                "filename": "server/src/com/cloud/network/vpc/VpcManager.java",
                "patch": "@@ -17,8 +17,11 @@\n package com.cloud.network.vpc;\n \n import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n \n import org.apache.cloudstack.acl.ControlledEntity.ACLType;\n+\n import com.cloud.exception.ConcurrentOperationException;\n import com.cloud.exception.InsufficientAddressCapacityException;\n import com.cloud.exception.InsufficientCapacityException;\n@@ -27,33 +30,27 @@\n import com.cloud.hypervisor.Hypervisor.HypervisorType;\n import com.cloud.network.IpAddress;\n import com.cloud.network.Network;\n+import com.cloud.network.Network.Provider;\n import com.cloud.network.Network.Service;\n import com.cloud.network.PhysicalNetwork;\n import com.cloud.network.addr.PublicIp;\n import com.cloud.offering.NetworkOffering;\n import com.cloud.user.Account;\n-import com.cloud.vm.DomainRouterVO;\n \n \n public interface VpcManager extends VpcService{\n \n     /**\n-     * @param ntwkOffId\n-     * @param cidr\n-     * @param networkDomain\n-     * @param networkOwner\n-     * @param vpc TODO\n-     * @param networkId TODO\n-     * @param gateway TODO\n+     * Returns all existing VPCs for a given account\n+     * @param accountId\n      * @return\n      */\n-    void validateNtkwOffForVpc(long ntwkOffId, String cidr, String networkDomain, Account networkOwner, \n-            Vpc vpc, Long networkId, String gateway);\n-\n-    \n     List<? extends Vpc> getVpcsForAccount(long accountId);\n \n+    \n     /**\n+     * Destroys the VPC\n+     * \n      * @param vpc\n      * @param caller TODO\n      * @param callerUserId TODO\n@@ -63,41 +60,28 @@ void validateNtkwOffForVpc(long ntwkOffId, String cidr, String networkDomain, Ac\n      */\n     boolean destroyVpc(Vpc vpc, Account caller, Long callerUserId) throws ConcurrentOperationException, ResourceUnavailableException;\n \n-    /**\n-     * @param vpcId\n-     * @return\n-     */\n-    List<DomainRouterVO> getVpcRouters(long vpcId);\n-\n-    /**\n-     * @param zoneId\n-     * @param provider\n-     * @return\n-     */\n-    boolean vpcProviderEnabledInZone(long zoneId, String provider);\n-\n-    /**\n-     * @param vpcId\n-     * @return\n-     */\n-    VpcGateway getPrivateGatewayForVpc(long vpcId);\n-\n \n     /**\n+     * Returns true if the IP is allocated to the VPC; false otherwise\n+     * \n      * @param ip\n      * @return\n      */\n-    boolean ipUsedInVpc(IpAddress ip);\n+    boolean isIpAllocatedToVpc(IpAddress ip);\n \n \n     /**\n+     * Disassociates the public IP address from VPC\n+     * \n      * @param ipId\n      * @param networkId\n      */\n     void unassignIPFromVpcNetwork(long ipId, long networkId);\n \n \n     /**\n+     * Creates guest network in the VPC\n+     * \n      * @param ntwkOffId\n      * @param name\n      * @param displayText\n@@ -125,25 +109,57 @@ Network createVpcGuestNetwork(long ntwkOffId, String name, String displayText, S\n \n \n     /**\n+     * Assigns source nat public IP address to VPC\n+     * \n      * @param owner\n      * @param vpc\n-     * @return\n+     * @return public IP address object\n      * @throws InsufficientAddressCapacityException\n      * @throws ConcurrentOperationException\n      */\n     PublicIp assignSourceNatIpAddressToVpc(Account owner, Vpc vpc) throws InsufficientAddressCapacityException, ConcurrentOperationException;\n \n \n     /**\n+     * Validates network offering to find if it can be used for network creation in VPC\n+     * \n      * @param guestNtwkOff\n      * @param supportedSvcs TODO\n      */\n     void validateNtwkOffForVpc(NetworkOffering guestNtwkOff, List<Service> supportedSvcs);\n \n \n     /**\n-     * @return\n+     * @return list of hypervisors that are supported by VPC\n      */\n     List<HypervisorType> getSupportedVpcHypervisors();\n+    \n+    \n+    /**\n+     * Lists all the services and providers that the current VPC suppots\n+     * @param vpcOffId\n+     * @return map of Service to Provider(s) map \n+     */\n+    Map<Service, Set<Provider>> getVpcOffSvcProvidersMap(long vpcOffId);\n+    \n+    \n+    /**\n+     * Returns VPC that is ready to be used\n+     * @param vpcId\n+     * @return VPC object\n+     */\n+    public Vpc getActiveVpc(long vpcId);\n \n+\n+    /**\n+     * Performs network offering validation to determine if it can be used for network upgrade inside the VPC \n+     * @param networkId\n+     * @param newNtwkOffId\n+     * @param newCidr\n+     * @param newNetworkDomain\n+     * @param vpc\n+     * @param gateway\n+     * @param networkOwner TODO\n+     */\n+    void validateNtwkOffForNtwkInVpc(Long networkId, long newNtwkOffId, String newCidr, String newNetworkDomain, Vpc vpc, String gateway, Account networkOwner);\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/src/com/cloud/network/vpc/VpcManager.java",
                "sha": "84ab8ef5dd7cb95f2d116bfd951be531c61785f8",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/cloudstack/blob/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/src/com/cloud/network/vpc/VpcManagerImpl.java",
                "changes": 77,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/vpc/VpcManagerImpl.java?ref=cf72aa32747a44ef876b9566d5c85db2f189b84e",
                "deletions": 59,
                "filename": "server/src/com/cloud/network/vpc/VpcManagerImpl.java",
                "patch": "@@ -31,13 +31,12 @@\n import javax.inject.Inject;\n import javax.naming.ConfigurationException;\n \n-import com.cloud.network.element.StaticNatServiceProvider;\n+import org.apache.cloudstack.acl.ControlledEntity.ACLType;\n+import org.apache.cloudstack.api.command.user.vpc.ListPrivateGatewaysCmd;\n import org.apache.cloudstack.api.command.user.vpc.ListStaticRoutesCmd;\n import org.apache.log4j.Logger;\n import org.springframework.stereotype.Component;\n \n-import org.apache.cloudstack.acl.ControlledEntity.ACLType;\n-import org.apache.cloudstack.api.command.user.vpc.ListPrivateGatewaysCmd;\n import com.cloud.configuration.Config;\n import com.cloud.configuration.ConfigurationManager;\n import com.cloud.configuration.Resource.ResourceType;\n@@ -77,6 +76,7 @@\n import com.cloud.network.dao.NetworkVO;\n import com.cloud.network.dao.PhysicalNetworkDao;\n import com.cloud.network.dao.Site2SiteVpnGatewayDao;\n+import com.cloud.network.element.StaticNatServiceProvider;\n import com.cloud.network.element.VpcProvider;\n import com.cloud.network.vpc.VpcOffering.State;\n import com.cloud.network.vpc.dao.PrivateIpDao;\n@@ -103,8 +103,6 @@\n import com.cloud.utils.NumbersUtil;\n import com.cloud.utils.Pair;\n import com.cloud.utils.Ternary;\n-\n-import com.cloud.utils.component.Manager;\n import com.cloud.utils.component.ManagerBase;\n import com.cloud.utils.concurrency.NamedThreadFactory;\n import com.cloud.utils.db.DB;\n@@ -124,8 +122,8 @@\n \n \n @Component\n-@Local(value = { VpcManager.class, VpcService.class })\n-public class VpcManagerImpl extends ManagerBase implements VpcManager{\n+@Local(value = { VpcManager.class, VpcService.class, VpcProvisioningService.class })\n+public class VpcManagerImpl extends ManagerBase implements VpcManager, VpcProvisioningService{\n     private static final Logger s_logger = Logger.getLogger(VpcManagerImpl.class);\n     @Inject\n     VpcOfferingDao _vpcOffDao;\n@@ -584,19 +582,6 @@ public Vpc createVpc(long zoneId, long vpcOffId, long vpcOwnerId, String vpcName\n         \n         return createVpc(zoneId, vpcOffId, owner, vpcName, displayText, cidr, networkDomain);\n     }\n-    \n-    @Override\n-    public boolean vpcProviderEnabledInZone(long zoneId, String provider)\n-    {\n-        //the provider has to be enabled at least in one network in the zone\n-        for (PhysicalNetwork pNtwk : _pNtwkDao.listByZone(zoneId)) {\n-            if (_ntwkModel.isProviderEnabledInPhysicalNetwork(pNtwk.getId(), provider)) {\n-                return true;\n-            }\n-        }\n-        \n-        return false;\n-    }\n \n     \n     @DB\n@@ -656,7 +641,7 @@ protected Vpc createVpc(long zoneId, long vpcOffId, Account vpcOwner, String vpc\n             }\n \n \n-            if (!vpcProviderEnabledInZone(zoneId, provider)) {\n+            if (!_ntwkModel.isProviderEnabledInZone(zoneId, provider)) {\n                 throw new InvalidParameterValueException(\"Provider \" + provider +\n                         \" should be enabled in at least one physical network of the zone specified\");\n             }\n@@ -1015,20 +1000,20 @@ public boolean shutdownVpc(long vpcId) throws ConcurrentOperationException, Reso\n         return success;\n     }\n     \n-    @Override\n     @DB\n-    public void validateNtkwOffForVpc(long ntwkOffId, String cidr, String networkDomain, \n-            Account networkOwner, Vpc vpc, Long networkId, String gateway) {\n+    @Override\n+    public void validateNtwkOffForNtwkInVpc(Long networkId, long newNtwkOffId, String newCidr, \n+            String newNetworkDomain, Vpc vpc, String gateway, Account networkOwner) {\n         \n-        NetworkOffering guestNtwkOff = _configMgr.getNetworkOffering(ntwkOffId);\n+        NetworkOffering guestNtwkOff = _configMgr.getNetworkOffering(newNtwkOffId);\n         \n         if (guestNtwkOff == null) {\n             throw new InvalidParameterValueException(\"Can't find network offering by id specified\");\n         }\n-\n+        \n         if (networkId == null) {\n             //1) Validate attributes that has to be passed in when create new guest network\n-            validateNewVpcGuestNetwork(cidr, gateway, networkOwner, vpc, networkDomain); \n+            validateNewVpcGuestNetwork(newCidr, gateway, networkOwner, vpc, newNetworkDomain); \n         }\n \n         //2) validate network offering attributes\n@@ -1213,7 +1198,7 @@ public boolean cleanupVpcResources(long vpcId, Account caller, long callerUserId\n         }\n \n         //4) Delete private gateway\n-        VpcGateway gateway = getPrivateGatewayForVpc(vpcId);\n+        PrivateGateway gateway = getVpcPrivateGateway(vpcId);\n         if (gateway != null) {\n             s_logger.debug(\"Deleting private gateway \" + gateway + \" as a part of vpc \" + vpcId + \" resources cleanup\");\n             if (!deleteVpcPrivateGateway(gateway.getId())) {\n@@ -1270,11 +1255,7 @@ public boolean restartVpc(long vpcId) throws ConcurrentOperationException, Resou\n         }  \n     }\n     \n-    @Override\n-    public List<DomainRouterVO> getVpcRouters(long vpcId) {\n-        return _routerDao.listByVpcId(vpcId);\n-    }\n-\n+    \n     @Override\n     public PrivateGateway getVpcPrivateGateway(long id) {\n         VpcGateway gateway = _vpcGatewayDao.findById(id);\n@@ -1835,11 +1816,6 @@ public void run() {\n             }\n         }\n     }\n-    \n-    @Override\n-    public VpcGateway getPrivateGatewayForVpc(long vpcId) {\n-        return _vpcGatewayDao.getPrivateGatewayForVpc(vpcId);\n-    }\n \n     \n     @DB\n@@ -1895,7 +1871,7 @@ public IpAddress associateIPToVpc(long ipId, long vpcId) throws ResourceAllocati\n     @Override\n     public void unassignIPFromVpcNetwork(long ipId, long networkId) {\n         IPAddressVO ip = _ipAddressDao.findById(ipId);\n-        if (ipUsedInVpc(ip)) {\n+        if (isIpAllocatedToVpc(ip)) {\n             return;\n         }\n \n@@ -1927,7 +1903,7 @@ public void unassignIPFromVpcNetwork(long ipId, long networkId) {\n     }\n     \n     @Override\n-    public boolean ipUsedInVpc(IpAddress ip) {\n+    public boolean isIpAllocatedToVpc(IpAddress ip) {\n         return (ip != null && ip.getVpcId() != null && \n                 (ip.isOneToOneNat() || !_firewallDao.listByIp(ip.getId()).isEmpty()));\n     }\n@@ -1957,7 +1933,7 @@ public Network createVpcGuestNetwork(long ntwkOffId, String name, String display\n         }\n         \n         //1) Validate if network can be created for VPC\n-        validateNtkwOffForVpc(ntwkOffId, cidr, networkDomain, owner, vpc, null, gateway);\n+        validateNtwkOffForNtwkInVpc(null, ntwkOffId, cidr, networkDomain, vpc, gateway, owner);\n \n         //2) Create network\n         Network guestNetwork = _ntwkMgr.createGuestNetwork(ntwkOffId, name, displayText, gateway, cidr, vlanId, \n@@ -2020,24 +1996,7 @@ public PublicIp assignSourceNatIpAddressToVpc(Account owner, Vpc vpc) throws Ins\n \n         return ipToReturn;\n     }\n-\n-\n-    @Override\n-    public Network updateVpcGuestNetwork(long networkId, String name, String displayText, Account callerAccount, \n-            User callerUser, String domainSuffix, Long ntwkOffId, Boolean changeCidr, String guestVmCidr) {\n-        NetworkVO network = _ntwkDao.findById(networkId);\n-        if (network == null) {\n-            throw new InvalidParameterValueException(\"Couldn't find network by id\");\n-        }\n-        //perform below validation if the network is vpc network\n-        if (network.getVpcId() != null && ntwkOffId != null) {\n-            Vpc vpc = getVpc(network.getVpcId());\n-            validateNtkwOffForVpc(ntwkOffId, null, null, null, vpc, networkId, null);\n-        }\n-        \n-        return _ntwkSvc.updateGuestNetwork(networkId, name, displayText, callerAccount, callerUser, domainSuffix,\n-                ntwkOffId, changeCidr, guestVmCidr);\n-    }\n+    \n \n     @Override\n     public List<HypervisorType> getSupportedVpcHypervisors() {",
                "raw_url": "https://github.com/apache/cloudstack/raw/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/src/com/cloud/network/vpc/VpcManagerImpl.java",
                "sha": "3948f2ecf73aa0983d67dfa01a9b28e46e4aa1c2",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/src/com/cloud/network/vpc/VpcOfferingVO.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/vpc/VpcOfferingVO.java?ref=cf72aa32747a44ef876b9566d5c85db2f189b84e",
                "deletions": 1,
                "filename": "server/src/com/cloud/network/vpc/VpcOfferingVO.java",
                "patch": "@@ -102,7 +102,6 @@ public String getName() {\n         return name;\n     }\n \n-    @Override\n     public String getUniqueName() {\n         return uniqueName;\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/src/com/cloud/network/vpc/VpcOfferingVO.java",
                "sha": "9d5becf233368fe49e5f98e44bfa31ace9f64521",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/src/com/cloud/network/vpc/VpcVO.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/vpc/VpcVO.java?ref=cf72aa32747a44ef876b9566d5c85db2f189b84e",
                "deletions": 7,
                "filename": "server/src/com/cloud/network/vpc/VpcVO.java",
                "patch": "@@ -26,9 +26,7 @@\n import javax.persistence.Id;\n import javax.persistence.Table;\n \n-import org.apache.cloudstack.api.Identity;\n import com.cloud.utils.db.GenericDao;\n-import org.apache.cloudstack.api.InternalIdentity;\n \n @Entity\n @Table(name=\"vpc\")\n@@ -94,11 +92,6 @@ public VpcVO(long zoneId, String name, String displayText, long accountId, long\n         this.networkDomain = networkDomain;\n         this.vpcOfferingId = vpcOffId;\n     }\n-    \n-    @Override\n-    public boolean readyToUse() {\n-        return state == State.Enabled;\n-    }\n \n     @Override\n     public long getId() {",
                "raw_url": "https://github.com/apache/cloudstack/raw/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/src/com/cloud/network/vpc/VpcVO.java",
                "sha": "7b784eb6458b6bf9f6c5be22a5b2fd45baf3740d",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/test/com/cloud/network/MockNetworkModelImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/test/com/cloud/network/MockNetworkModelImpl.java?ref=cf72aa32747a44ef876b9566d5c85db2f189b84e",
                "deletions": 0,
                "filename": "server/test/com/cloud/network/MockNetworkModelImpl.java",
                "patch": "@@ -844,4 +844,10 @@ public Nic getPlaceholderNic(Network network, Long podId) {\n         // TODO Auto-generated method stub\n         return null;\n     }\n+\n+    @Override\n+    public boolean isProviderEnabledInZone(long zoneId, String provider) {\n+        // TODO Auto-generated method stub\n+        return false;\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/test/com/cloud/network/MockNetworkModelImpl.java",
                "sha": "c5789659008a96d89073f47b2604dd68c78cf8bd",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/test/com/cloud/vpc/MockNetworkModelImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/test/com/cloud/vpc/MockNetworkModelImpl.java?ref=cf72aa32747a44ef876b9566d5c85db2f189b84e",
                "deletions": 0,
                "filename": "server/test/com/cloud/vpc/MockNetworkModelImpl.java",
                "patch": "@@ -857,4 +857,10 @@ public Nic getPlaceholderNic(Network network, Long podId) {\n         return null;\n     }\n \n+    @Override\n+    public boolean isProviderEnabledInZone(long zoneId, String provider) {\n+        // TODO Auto-generated method stub\n+        return false;\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/test/com/cloud/vpc/MockNetworkModelImpl.java",
                "sha": "e1534cbf62aebd5bbac6be17af66c5e90cc1b59e",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cloudstack/blob/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/test/com/cloud/vpc/MockVpcManagerImpl.java",
                "changes": 106,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/test/com/cloud/vpc/MockVpcManagerImpl.java?ref=cf72aa32747a44ef876b9566d5c85db2f189b84e",
                "deletions": 94,
                "filename": "server/test/com/cloud/vpc/MockVpcManagerImpl.java",
                "patch": "@@ -47,35 +47,18 @@\n import com.cloud.network.vpc.Vpc;\n import com.cloud.network.vpc.VpcGateway;\n import com.cloud.network.vpc.VpcManager;\n-import com.cloud.network.vpc.VpcOffering;\n import com.cloud.network.vpc.VpcService;\n import com.cloud.offering.NetworkOffering;\n import com.cloud.user.Account;\n-import com.cloud.user.User;\n import com.cloud.utils.Pair;\n-import com.cloud.utils.component.Manager;\n import com.cloud.utils.component.ManagerBase;\n-import com.cloud.vm.DomainRouterVO;\n import com.cloud.vpc.dao.MockVpcDaoImpl;\n \n @Component\n @Local(value = { VpcManager.class, VpcService.class })\n public class MockVpcManagerImpl extends ManagerBase implements VpcManager {\n     @Inject MockVpcDaoImpl _vpcDao;\n \n-    /* (non-Javadoc)\n-     * @see com.cloud.network.vpc.VpcService#getVpcOffering(long)\n-     */\n-    @Override\n-    public VpcOffering getVpcOffering(long vpcOfferingId) {\n-        // TODO Auto-generated method stub\n-        return null;\n-    }\n-\n-    @Override\n-    public VpcOffering createVpcOffering(String name, String displayText, List<String> supportedServices, Map<String, List<String>> serviceProviders) {\n-        return null;\n-    }\n \n     /* (non-Javadoc)\n      * @see com.cloud.network.vpc.VpcService#getVpc(long)\n@@ -104,42 +87,6 @@ public Vpc getActiveVpc(long vpcId) {\n         return null;\n     }\n \n-    /* (non-Javadoc)\n-     * @see com.cloud.network.vpc.VpcService#getVpcOffSvcProvidersMap(long)\n-     */\n-    @Override\n-    public Map<Service, Set<Provider>> getVpcOffSvcProvidersMap(long vpcOffId) {\n-        // TODO Auto-generated method stub\n-        return null;\n-    }\n-\n-    /* (non-Javadoc)\n-     * @see com.cloud.network.vpc.VpcService#listVpcOfferings(java.lang.Long, java.lang.String, java.lang.String, java.util.List, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.Long, java.lang.Long)\n-     */\n-    @Override\n-    public List<? extends VpcOffering> listVpcOfferings(Long id, String name, String displayText, List<String> supportedServicesStr, Boolean isDefault, String keyword, String state, Long startIndex, Long pageSizeVal) {\n-        // TODO Auto-generated method stub\n-        return null;\n-    }\n-\n-    /* (non-Javadoc)\n-     * @see com.cloud.network.vpc.VpcService#deleteVpcOffering(long)\n-     */\n-    @Override\n-    public boolean deleteVpcOffering(long offId) {\n-        // TODO Auto-generated method stub\n-        return false;\n-    }\n-\n-    /* (non-Javadoc)\n-     * @see com.cloud.network.vpc.VpcService#updateVpcOffering(long, java.lang.String, java.lang.String, java.lang.String)\n-     */\n-    @Override\n-    public VpcOffering updateVpcOffering(long vpcOffId, String vpcOfferingName, String displayText, String state) {\n-        // TODO Auto-generated method stub\n-        return null;\n-    }\n-\n     /* (non-Javadoc)\n      * @see com.cloud.network.vpc.VpcService#createVpc(long, long, long, java.lang.String, java.lang.String, java.lang.String, java.lang.String)\n      */\n@@ -313,19 +260,6 @@ public IpAddress associateIPToVpc(long ipId, long vpcId) throws ResourceAllocati\n         return null;\n     }\n \n-    /* (non-Javadoc)\n-     * @see com.cloud.network.vpc.VpcService#updateVpcGuestNetwork(long, java.lang.String, java.lang.String, com.cloud.user.Account, com.cloud.user.User, java.lang.String, java.lang.Long, java.lang.Boolean)\n-     */\n-\n-    /* (non-Javadoc)\n-     * @see com.cloud.network.vpc.VpcManager#validateNtkwOffForVpc(long, java.lang.String, java.lang.String, com.cloud.user.Account, com.cloud.network.vpc.Vpc, java.lang.Long, java.lang.String)\n-     */\n-    @Override\n-    public void validateNtkwOffForVpc(long ntwkOffId, String cidr, String networkDomain, Account networkOwner, Vpc vpc, Long networkId, String gateway) {\n-        // TODO Auto-generated method stub\n-\n-    }\n-\n     /* (non-Javadoc)\n      * @see com.cloud.network.vpc.VpcManager#getVpcsForAccount(long)\n      */\n@@ -344,34 +278,13 @@ public boolean destroyVpc(Vpc vpc, Account caller, Long callerUserId) throws Con\n         return false;\n     }\n \n-    /* (non-Javadoc)\n-     * @see com.cloud.network.vpc.VpcManager#getVpcRouters(long)\n-     */\n-    @Override\n-    public List<DomainRouterVO> getVpcRouters(long vpcId) {\n-        // TODO Auto-generated method stub\n-        return null;\n-    }\n \n-    @Override\n-    public boolean vpcProviderEnabledInZone(long zoneId, String provider) {\n-        return false;\n-    }\n-\n-    /* (non-Javadoc)\n-     * @see com.cloud.network.vpc.VpcManager#getPrivateGatewayForVpc(long)\n-     */\n-    @Override\n-    public VpcGateway getPrivateGatewayForVpc(long vpcId) {\n-        // TODO Auto-generated method stub\n-        return null;\n-    }\n \n     /* (non-Javadoc)\n      * @see com.cloud.network.vpc.VpcManager#ipUsedInVpc(com.cloud.network.IpAddress)\n      */\n     @Override\n-    public boolean ipUsedInVpc(IpAddress ip) {\n+    public boolean isIpAllocatedToVpc(IpAddress ip) {\n         // TODO Auto-generated method stub\n         return false;\n     }\n@@ -458,11 +371,16 @@ public void validateNtwkOffForVpc(NetworkOffering guestNtwkOff, List<Service> su\n         return null;\n     }\n \n-\t@Override\n-\tpublic Network updateVpcGuestNetwork(long networkId, String name,  String displayText, Account callerAccount, User callerUser,\n-\t\t\tString domainSuffix, Long ntwkOffId, Boolean changeCidr,\tString guestVmCidr) {\n-\t\t// TODO Auto-generated method stub\n-\t\treturn null;\n-\t}\n+    @Override\n+    public Map<Service, Set<Provider>> getVpcOffSvcProvidersMap(long vpcOffId) {\n+        // TODO Auto-generated method stub\n+        return null;\n+    }\n+\n+    @Override\n+    public void validateNtwkOffForNtwkInVpc(Long networkId, long newNtwkOffId, String newCidr, String newNetworkDomain, Vpc vpc, String gateway, Account networkOwner) {\n+        // TODO Auto-generated method stub\n+        \n+    }\n \n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/test/com/cloud/vpc/MockVpcManagerImpl.java",
                "sha": "0f26928412721c9635820e9235aa8d958df6e7af",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/test/com/cloud/vpc/MockVpcVirtualNetworkApplianceManager.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/test/com/cloud/vpc/MockVpcVirtualNetworkApplianceManager.java?ref=cf72aa32747a44ef876b9566d5c85db2f189b84e",
                "deletions": 0,
                "filename": "server/test/com/cloud/vpc/MockVpcVirtualNetworkApplianceManager.java",
                "patch": "@@ -396,4 +396,10 @@ public boolean stopSite2SiteVpn(Site2SiteVpnConnection conn, VirtualRouter route\n         return false;\n     }\n \n+    @Override\n+    public List<DomainRouterVO> getVpcRouters(long vpcId) {\n+        // TODO Auto-generated method stub\n+        return null;\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/test/com/cloud/vpc/MockVpcVirtualNetworkApplianceManager.java",
                "sha": "ef5478bb1f86bd2cdb92bf2ff33ce72320cc37e5",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/test/com/cloud/vpc/VpcApiUnitTest.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/test/com/cloud/vpc/VpcApiUnitTest.java?ref=cf72aa32747a44ef876b9566d5c85db2f189b84e",
                "deletions": 31,
                "filename": "server/test/com/cloud/vpc/VpcApiUnitTest.java",
                "patch": "@@ -30,38 +30,13 @@\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n \n-import com.cloud.configuration.dao.ConfigurationDaoImpl;\n-import com.cloud.configuration.dao.ResourceCountDaoImpl;\n-import com.cloud.dc.dao.VlanDaoImpl;\n import com.cloud.exception.InvalidParameterValueException;\n import com.cloud.network.Network.Service;\n-import com.cloud.network.dao.FirewallRulesDaoImpl;\n-import com.cloud.network.dao.IPAddressDaoImpl;\n-import com.cloud.network.dao.PhysicalNetworkDaoImpl;\n-import com.cloud.network.dao.Site2SiteVpnGatewayDaoImpl;\n import com.cloud.network.vpc.Vpc;\n-import com.cloud.network.vpc.VpcManager;\n import com.cloud.network.vpc.VpcManagerImpl;\n-import com.cloud.network.vpc.dao.PrivateIpDaoImpl;\n-import com.cloud.network.vpc.dao.StaticRouteDaoImpl;\n-import com.cloud.network.vpc.dao.VpcGatewayDaoImpl;\n-import com.cloud.network.vpc.dao.VpcOfferingDaoImpl;\n-import com.cloud.server.ManagementService;\n-import com.cloud.tags.dao.ResourceTagsDaoImpl;\n import com.cloud.user.AccountVO;\n-import com.cloud.user.MockAccountManagerImpl;\n-import com.cloud.user.dao.AccountDaoImpl;\n import com.cloud.utils.component.ComponentContext;\n \n-import com.cloud.vm.dao.DomainRouterDaoImpl;\n-import com.cloud.vpc.dao.MockNetworkDaoImpl;\n-import com.cloud.vpc.dao.MockNetworkOfferingDaoImpl;\n-import com.cloud.vpc.dao.MockNetworkOfferingServiceMapDaoImpl;\n-import com.cloud.vpc.dao.MockNetworkServiceMapDaoImpl;\n-import com.cloud.vpc.dao.MockVpcDaoImpl;\n-import com.cloud.vpc.dao.MockVpcOfferingDaoImpl;\n-import com.cloud.vpc.dao.MockVpcOfferingServiceMapDaoImpl;\n-\n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(locations = \"classpath:/VpcTestContext.xml\")\n public class VpcApiUnitTest extends TestCase{\n@@ -180,7 +155,7 @@ protected void validateNtwkOffForVpc() {\n         //1) correct network offering\n         boolean result = false;\n         try {\n-            _vpcService.validateNtkwOffForVpc(1, \"0.0.0.0\", \"111-\", new AccountVO(), _vpcService.getVpc(1), 2L, \"10.1.1.1\");\n+            _vpcService.validateNtwkOffForNtwkInVpc(2L, 1, \"0.0.0.0\", \"111-\", _vpcService.getVpc(1), \"10.1.1.1\", new AccountVO());\n             result = true;\n             s_logger.debug(\"Validate network offering: Test passed: the offering is valid for vpc creation\");\n         } catch (Exception ex) {\n@@ -191,7 +166,7 @@ protected void validateNtwkOffForVpc() {\n         result = false;\n         String msg = null;\n         try {\n-            _vpcService.validateNtkwOffForVpc(2, \"0.0.0.0\", \"111-\", new AccountVO(), _vpcService.getVpc(1), 2L, \"10.1.1.1\");\n+            _vpcService.validateNtwkOffForNtwkInVpc(2L, 2, \"0.0.0.0\", \"111-\", _vpcService.getVpc(1), \"10.1.1.1\", new AccountVO());\n             result = true;\n         } catch (InvalidParameterValueException ex) {\n             msg = ex.getMessage();\n@@ -207,7 +182,7 @@ protected void validateNtwkOffForVpc() {\n         result = false;\n         msg = null;\n         try {\n-            _vpcService.validateNtkwOffForVpc(3, \"0.0.0.0\", \"111-\", new AccountVO(), _vpcService.getVpc(1), 2L, \"10.1.1.1\");\n+            _vpcService.validateNtwkOffForNtwkInVpc(2L, 3, \"0.0.0.0\", \"111-\", _vpcService.getVpc(1), \"10.1.1.1\", new AccountVO());\n             result = true;\n         } catch (InvalidParameterValueException ex) {\n             msg = ex.getMessage();\n@@ -222,7 +197,7 @@ protected void validateNtwkOffForVpc() {\n         //4) invalid offering - guest type shared\n         result = false;\n         try {\n-            _vpcService.validateNtkwOffForVpc(4, \"0.0.0.0\", \"111-\", new AccountVO(), _vpcService.getVpc(1), 2L, \"10.1.1.1\");\n+            _vpcService.validateNtwkOffForNtwkInVpc(2L, 4, \"0.0.0.0\", \"111-\", _vpcService.getVpc(1), \"10.1.1.1\", new AccountVO());\n             result = true;\n         } catch (InvalidParameterValueException ex) {\n             msg = ex.getMessage();\n@@ -237,7 +212,7 @@ protected void validateNtwkOffForVpc() {\n         //5) Invalid offering - no redundant router support\n         result = false;\n         try {\n-            _vpcService.validateNtkwOffForVpc(5, \"0.0.0.0\", \"111-\", new AccountVO(), _vpcService.getVpc(1), 2L, \"10.1.1.1\");\n+            _vpcService.validateNtwkOffForNtwkInVpc(2L, 5, \"0.0.0.0\", \"111-\", _vpcService.getVpc(1), \"10.1.1.1\", new AccountVO());\n             result = true;\n         } catch (InvalidParameterValueException ex) {\n             msg = ex.getMessage();\n@@ -252,7 +227,7 @@ protected void validateNtwkOffForVpc() {\n         //6) Only one network in the VPC can support LB service - negative scenario\n         result = false;\n         try {\n-            _vpcService.validateNtkwOffForVpc(6, \"0.0.0.0\", \"111-\", new AccountVO(), _vpcService.getVpc(1), 2L, \"10.1.1.1\");\n+            _vpcService.validateNtwkOffForNtwkInVpc(2L, 6, \"0.0.0.0\", \"111-\", _vpcService.getVpc(1), \"10.1.1.1\", new AccountVO());\n             result = true;\n             s_logger.debug(\"Validate network offering: Test passed: the offering is valid for vpc creation\");\n         } catch (InvalidParameterValueException ex) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/cf72aa32747a44ef876b9566d5c85db2f189b84e/server/test/com/cloud/vpc/VpcApiUnitTest.java",
                "sha": "d4d5b29812d00c4b8e12d19356d168fb1a4c153f",
                "status": "modified"
            }
        ],
        "message": "Fixes/improvements for VPC feature:\n\n1) Added comments to VPC/VPCService/VPCManager interfaces\n2) Moved VPC offering related methods from VpcService to the new interface - VpcProvisioningService\n3) Fixed static nat creation in the VPC - used to result in NPE due to invalid method referencing while obtaining VPC VR information",
        "parent": "https://github.com/apache/cloudstack/commit/f8471e545f41dd3c57fd65f9be9c2b3f25dba4ab",
        "patched_files": [
            "VpcVirtualRouterElement.java",
            "NetworkManager.java",
            "ListVPCOfferingsCmd.java",
            "VpcOffering.java",
            "MockNetworkModelImpl.java",
            "MockVpcVirtualNetworkApplianceManager.java",
            "CreateVPCOfferingCmd.java",
            "VpcVirtualNetworkApplianceManagerImpl.java",
            "VpcVO.java",
            "VpcService.java",
            "UpdateNetworkCmd.java",
            "Vpc.java",
            "ApiDBUtils.java",
            "NetworkModel.java",
            "VpcManagerImpl.java",
            "NetworkManagerImpl.java",
            "NetworkServiceImpl.java",
            "UpdateVPCOfferingCmd.java",
            "NetworkModelImpl.java",
            "DeleteVPCOfferingCmd.java",
            "VpcManager.java",
            "VpcVirtualNetworkApplianceManager.java",
            "VpcProvisioningService.java",
            "MockVpcManagerImpl.java",
            "BaseCmd.java",
            "VpcOfferingVO.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VpcApiUnitTest.java",
            "NetworkModelTest.java",
            "NetworkManagerTest.java"
        ]
    },
    "cloudstack_d42e3df": {
        "bug_id": "cloudstack_d42e3df",
        "commit": "https://github.com/apache/cloudstack/commit/d42e3df9cf43b0ad46d406c6ab5b1d8c811d0239",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/d42e3df9cf43b0ad46d406c6ab5b1d8c811d0239/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=d42e3df9cf43b0ad46d406c6ab5b1d8c811d0239",
                "deletions": 1,
                "filename": "engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -1247,7 +1247,8 @@ protected boolean sendStop(VirtualMachineGuru guru, VirtualMachineProfile profil\n                     _resourceMgr.updateGPUDetails(vm.getHostId(), gpuDevice.getGroupDetails());\n                 }\n                 if (answer == null || !answer.getResult()) {\n-                    s_logger.debug(\"Unable to stop VM due to \" + answer.getDetails());\n+                    String details = (answer != null) ? answer.getDetails() : \"null answer returned\";\n+                    s_logger.debug(\"Unable to stop VM due to \" + details);\n                     return false;\n                 }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/d42e3df9cf43b0ad46d406c6ab5b1d8c811d0239/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "83779064f493a13bfc89061fc179be5310e999de",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-7563: Fix potential NPE in checking answer\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/4c21172f3b3b9dd26a66fa03e246da7a4e4b9e8a",
        "patched_files": [
            "VirtualMachineManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_d4d4957": {
        "bug_id": "cloudstack_d4d4957",
        "commit": "https://github.com/apache/cloudstack/commit/d4d49578dc2dfc03aa7247811ba571da20c82cd5",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/d4d49578dc2dfc03aa7247811ba571da20c82cd5/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/VmwareServerDiscoverer.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/VmwareServerDiscoverer.java?ref=d4d49578dc2dfc03aa7247811ba571da20c82cd5",
                "deletions": 6,
                "filename": "plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/VmwareServerDiscoverer.java",
                "patch": "@@ -42,14 +42,12 @@\n import com.cloud.dc.ClusterVO;\n import com.cloud.dc.DataCenter.NetworkType;\n import com.cloud.dc.DataCenterVO;\n-import com.cloud.dc.dao.ClusterDao;\n import com.cloud.dc.dao.DataCenterDao;\n import com.cloud.exception.DiscoveredWithErrorException;\n import com.cloud.exception.DiscoveryException;\n import com.cloud.exception.InvalidParameterValueException;\n import com.cloud.exception.ResourceInUseException;\n import com.cloud.host.HostVO;\n-import com.cloud.host.dao.HostDao;\n import com.cloud.hypervisor.Hypervisor;\n import com.cloud.hypervisor.Hypervisor.HypervisorType;\n import com.cloud.hypervisor.dao.HypervisorCapabilitiesDao;\n@@ -87,8 +85,6 @@\n public class VmwareServerDiscoverer extends DiscovererBase implements Discoverer, ResourceStateAdapter {\n     private static final Logger s_logger = Logger.getLogger(VmwareServerDiscoverer.class);\n \n-    @Inject\n-    ClusterDao _clusterDao;\n     @Inject\n     VmwareManager _vmwareMgr;\n     @Inject\n@@ -98,8 +94,6 @@\n     @Inject\n     ClusterDetailsDao _clusterDetailsDao;\n     @Inject\n-    HostDao _hostDao;\n-    @Inject\n     DataCenterDao _dcDao;\n     @Inject\n     ResourceManager _resourceMgr;",
                "raw_url": "https://github.com/apache/cloudstack/raw/d4d49578dc2dfc03aa7247811ba571da20c82cd5/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/VmwareServerDiscoverer.java",
                "sha": "5ab5af0e041f906cc677d46ea9bfd14b86d61b71",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/d4d49578dc2dfc03aa7247811ba571da20c82cd5/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/manager/VmwareManagerImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/manager/VmwareManagerImpl.java?ref=d4d49578dc2dfc03aa7247811ba571da20c82cd5",
                "deletions": 3,
                "filename": "plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/manager/VmwareManagerImpl.java",
                "patch": "@@ -382,10 +382,10 @@ private void prepareHost(HostMO hostMo, String privateTrafficLabel) throws Excep\n     @Override\n     public List<ManagedObjectReference> addHostToPodCluster(VmwareContext serviceContext, long dcId, Long podId, Long clusterId, String hostInventoryPath)\n             throws Exception {\n-        ManagedObjectReference mor = null;\n-        if (serviceContext != null) {\n-            mor = serviceContext.getHostMorByPath(hostInventoryPath);\n+        if (serviceContext == null) {\n+            throw new CloudRuntimeException(\"Invalid serviceContext\");\n         }\n+        ManagedObjectReference mor = serviceContext.getHostMorByPath(hostInventoryPath);\n         String privateTrafficLabel = null;\n         privateTrafficLabel = serviceContext.getStockObject(\"privateTrafficLabel\");\n         if (privateTrafficLabel == null) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/d4d49578dc2dfc03aa7247811ba571da20c82cd5/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/manager/VmwareManagerImpl.java",
                "sha": "67d3963cdc5d792cef626cc5772c46829a08372d",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cloudstack/blob/d4d49578dc2dfc03aa7247811ba571da20c82cd5/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java?ref=d4d49578dc2dfc03aa7247811ba571da20c82cd5",
                "deletions": 12,
                "filename": "plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "patch": "@@ -663,8 +663,6 @@ protected NetworkUsageAnswer VPCNetworkUsage(NetworkUsageCommand cmd) {\n     public ExecutionResult createFileInVR(String routerIp, String filePath, String fileName, String content) {\n         VmwareManager mgr = getServiceContext().getStockObject(VmwareManager.CONTEXT_STOCK_NAME);\n         File keyFile = mgr.getSystemVMKeyFile();\n-        boolean result = true;\n-\n         try {\n             SshHelper.scpTo(routerIp, 3922, \"root\", keyFile, null, filePath, content.getBytes(), fileName, null);\n         } catch (Exception e) {\n@@ -1065,9 +1063,6 @@ private int allocPublicNicIndex(VirtualMachineMO vmMo) throws Exception {\n     }\n \n     private ExecutionResult prepareNetworkElementCommand(IpAssocCommand cmd) {\n-        int i = 0;\n-        String[] results = new String[cmd.getIpAddresses().length];\n-\n         VmwareContext context = getServiceContext();\n         try {\n             VmwareHypervisorHost hyperHost = getHyperHost(context);\n@@ -1142,15 +1137,13 @@ private ExecutionResult prepareNetworkElementCommand(IpAssocCommand cmd) {\n     }\n \n     private ExecutionResult NetworkElementCommandnup(IpAssocCommand cmd) {\n-        String[] results = new String[cmd.getIpAddresses().length];\n-\n         VmwareContext context = getServiceContext();\n         try {\n             VmwareHypervisorHost hyperHost = getHyperHost(context);\n \n             IpAddressTO[] ips = cmd.getIpAddresses();\n             String routerName = cmd.getAccessDetail(NetworkElementCommand.ROUTER_NAME);\n-            String controlIp = VmwareResource.getRouterSshControlIp(cmd);\n+            VmwareResource.getRouterSshControlIp(cmd);\n \n             VirtualMachineMO vmMo = hyperHost.findVmOnHyperHost(routerName);\n \n@@ -4477,10 +4470,13 @@ public CreateAnswer execute(CreateCommand cmd) {\n                                         null);\n                         return new CreateAnswer(cmd, vol);\n                     } finally {\n-                        vmMo.detachAllDisks();\n \n                         s_logger.info(\"Destroy dummy VM after volume creation\");\n-                        vmMo.destroy();\n+                        if (vmMo != null) {\n+                            s_logger.warn(\"Unable to destroy a null VM ManagedObjectReference\");\n+                            vmMo.detachAllDisks();\n+                            vmMo.destroy();\n+                        }\n                     }\n                 } else {\n                     VirtualMachineMO vmTemplate = VmwareHelper.pickOneVmOnRunningHost(dcMo.findVmByNameAndLabel(cmd.getTemplateUrl()), true);\n@@ -4537,8 +4533,11 @@ public CreateAnswer execute(CreateCommand cmd) {\n                     return new CreateAnswer(cmd, vol);\n                 } finally {\n                     s_logger.info(\"Destroy dummy VM after volume creation\");\n-                    vmMo.detachAllDisks();\n-                    vmMo.destroy();\n+                    if (vmMo != null) {\n+                        s_logger.warn(\"Unable to destroy a null VM ManagedObjectReference\");\n+                        vmMo.detachAllDisks();\n+                        vmMo.destroy();\n+                    }\n                 }\n             }\n         } catch (Throwable e) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/d4d49578dc2dfc03aa7247811ba571da20c82cd5/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "sha": "182fe9f3b51ce6ff5e0f201d2e6e55a410ac8c37",
                "status": "modified"
            },
            {
                "additions": 37,
                "blob_url": "https://github.com/apache/cloudstack/blob/d4d49578dc2dfc03aa7247811ba571da20c82cd5/plugins/hypervisors/vmware/src/com/cloud/storage/resource/VmwareStorageProcessor.java",
                "changes": 72,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/com/cloud/storage/resource/VmwareStorageProcessor.java?ref=d4d49578dc2dfc03aa7247811ba571da20c82cd5",
                "deletions": 35,
                "filename": "plugins/hypervisors/vmware/src/com/cloud/storage/resource/VmwareStorageProcessor.java",
                "patch": "@@ -123,17 +123,17 @@ private String getOVFFilePath(String srcOVAFileName) {\n     }\n \n     private void copyTemplateFromSecondaryToPrimary(VmwareHypervisorHost hyperHost, DatastoreMO datastoreMo, String secondaryStorageUrl,\n-        String templatePathAtSecondaryStorage, String templateName, String templateUuid) throws Exception {\n+            String templatePathAtSecondaryStorage, String templateName, String templateUuid) throws Exception {\n \n         s_logger.info(\"Executing copyTemplateFromSecondaryToPrimary. secondaryStorage: \" + secondaryStorageUrl + \", templatePathAtSecondaryStorage: \" +\n-            templatePathAtSecondaryStorage + \", templateName: \" + templateName);\n+                templatePathAtSecondaryStorage + \", templateName: \" + templateName);\n \n         String secondaryMountPoint = mountService.getMountPoint(secondaryStorageUrl);\n         s_logger.info(\"Secondary storage mount point: \" + secondaryMountPoint);\n \n         String srcOVAFileName =\n-            VmwareStorageLayoutHelper.getTemplateOnSecStorageFilePath(secondaryMountPoint, templatePathAtSecondaryStorage, templateName,\n-                ImageFormat.OVA.getFileExtension());\n+                VmwareStorageLayoutHelper.getTemplateOnSecStorageFilePath(secondaryMountPoint, templatePathAtSecondaryStorage, templateName,\n+                        ImageFormat.OVA.getFileExtension());\n \n         String srcFileName = getOVFFilePath(srcOVAFileName);\n         if (srcFileName == null) {\n@@ -163,7 +163,7 @@ private void copyTemplateFromSecondaryToPrimary(VmwareHypervisorHost hyperHost,\n         VirtualMachineMO vmMo = hyperHost.findVmOnHyperHost(vmName);\n         if (vmMo == null) {\n             String msg =\n-                \"Failed to import OVA template. secondaryStorage: \" + secondaryStorageUrl + \", templatePathAtSecondaryStorage: \" + templatePathAtSecondaryStorage +\n+                    \"Failed to import OVA template. secondaryStorage: \" + secondaryStorageUrl + \", templatePathAtSecondaryStorage: \" + templatePathAtSecondaryStorage +\n                     \", templateName: \" + templateName + \", templateUuid: \" + templateUuid;\n             s_logger.error(msg);\n             throw new Exception(msg);\n@@ -218,7 +218,7 @@ public Answer copyTemplateToPrimaryStorage(CopyCommand cmd) {\n                 DatastoreMO primaryStorageDatastoreMo = new DatastoreMO(context, morDs);\n \n                 copyTemplateFromSecondaryToPrimary(hyperHost, primaryStorageDatastoreMo, secondaryStorageUrl, templateInfo.first(), templateInfo.second(),\n-                    templateUuidName);\n+                        templateUuidName);\n             } else {\n                 s_logger.info(\"Template \" + templateInfo.second() + \" has already been setup, skip the template setup process in primary storage\");\n             }\n@@ -238,7 +238,7 @@ public Answer copyTemplateToPrimaryStorage(CopyCommand cmd) {\n     }\n \n     private boolean createVMLinkedClone(VirtualMachineMO vmTemplate, DatacenterMO dcMo, DatastoreMO dsMo, String vmdkName, ManagedObjectReference morDatastore,\n-        ManagedObjectReference morPool) throws Exception {\n+            ManagedObjectReference morPool) throws Exception {\n \n         ManagedObjectReference morBaseSnapshot = vmTemplate.getSnapshotMor(\"cloud.template.base\");\n         if (morBaseSnapshot == null) {\n@@ -257,7 +257,7 @@ private boolean createVMLinkedClone(VirtualMachineMO vmTemplate, DatacenterMO dc\n     }\n \n     private boolean createVMFullClone(VirtualMachineMO vmTemplate, DatacenterMO dcMo, DatastoreMO dsMo, String vmdkName, ManagedObjectReference morDatastore,\n-        ManagedObjectReference morPool) throws Exception {\n+            ManagedObjectReference morPool) throws Exception {\n \n         s_logger.info(\"creating full clone from template\");\n         if (!vmTemplate.createFullClone(vmdkName, dcMo.getVmFolder(), morPool, morDatastore)) {\n@@ -293,7 +293,7 @@ public Answer cloneVolumeFromBaseTemplate(CopyCommand cmd) {\n             String vmdkFileBaseName = null;\n             if (srcStore == null) {\n                 // create a root volume for blank VM (created from ISO)\n-                String dummyVmName = this.hostService.getWorkerName(context, cmd, 0);\n+                String dummyVmName = hostService.getWorkerName(context, cmd, 0);\n \n                 try {\n                     vmMo = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, dummyVmName);\n@@ -312,10 +312,12 @@ public Answer cloneVolumeFromBaseTemplate(CopyCommand cmd) {\n                         vmMo.detachDisk(volumeDatastorePath, false);\n                     }\n                 } finally {\n-                    vmMo.detachAllDisks();\n-\n                     s_logger.info(\"Destroy dummy VM after volume creation\");\n-                    vmMo.destroy();\n+                    if (vmMo != null) {\n+                        s_logger.warn(\"Unable to destroy a null VM ManagedObjectReference\");\n+                        vmMo.detachAllDisks();\n+                        vmMo.destroy();\n+                    }\n                 }\n             } else {\n                 String templatePath = template.getPath();\n@@ -459,7 +461,7 @@ private String getVolumePathInDatastore(DatastoreMO dsMo, String volumeFileName)\n     }\n \n     private Pair<String, String> copyVolumeToSecStorage(VmwareHostService hostService, VmwareHypervisorHost hyperHost, CopyCommand cmd, String vmName, String poolId,\n-        String volumePath, String destVolumePath, String secStorageUrl, String workerVmName) throws Exception {\n+            String volumePath, String destVolumePath, String secStorageUrl, String workerVmName) throws Exception {\n         VirtualMachineMO workerVm = null;\n         VirtualMachineMO vmMo = null;\n         String exportName = UUID.randomUUID().toString().replace(\"-\", \"\");\n@@ -521,8 +523,8 @@ public Answer copyVolumeFromPrimaryToSecondary(CopyCommand cmd) {\n             Pair<String, String> result;\n \n             result =\n-                copyVolumeToSecStorage(hostService, hyperHost, cmd, vmName, primaryStorage.getUuid(), srcVolume.getPath(), destVolume.getPath(), destStore.getUrl(),\n-                    hostService.getWorkerName(context, cmd, 0));\n+                    copyVolumeToSecStorage(hostService, hyperHost, cmd, vmName, primaryStorage.getUuid(), srcVolume.getPath(), destVolume.getPath(), destStore.getUrl(),\n+                            hostService.getWorkerName(context, cmd, 0));\n             VolumeObjectTO newVolume = new VolumeObjectTO();\n             newVolume.setPath(result.first() + File.separator + result.second());\n             return new CopyCmdAnswer(newVolume);\n@@ -577,7 +579,7 @@ private void postCreatePrivateTemplate(String installFullPath, long templateId,\n     }\n \n     private Ternary<String, Long, Long> createTemplateFromVolume(VirtualMachineMO vmMo, String installPath, long templateId, String templateUniqueName,\n-        String secStorageUrl, String volumePath, String workerVmName) throws Exception {\n+            String secStorageUrl, String volumePath, String workerVmName) throws Exception {\n \n         String secondaryMountPoint = mountService.getMountPoint(secStorageUrl);\n         String installFullPath = secondaryMountPoint + \"/\" + installPath;\n@@ -611,7 +613,7 @@ private void postCreatePrivateTemplate(String installFullPath, long templateId,\n \n             // 4 MB is the minimum requirement for VM memory in VMware\n             Pair<VirtualMachineMO, String[]> cloneResult =\n-                vmMo.cloneFromCurrentSnapshot(workerVmName, 0, 4, volumeDeviceInfo.second(), VmwareHelper.getDiskDeviceDatastore(volumeDeviceInfo.first()));\n+                    vmMo.cloneFromCurrentSnapshot(workerVmName, 0, 4, volumeDeviceInfo.second(), VmwareHelper.getDiskDeviceDatastore(volumeDeviceInfo.first()));\n             clonedVm = cloneResult.first();\n \n             clonedVm.exportVm(secondaryMountPoint + \"/\" + installPath, templateUniqueName, false, false);\n@@ -674,7 +676,7 @@ public Answer createTemplateFromVolume(CopyCommand cmd) {\n             if (vmMo == null) {\n                 if (s_logger.isDebugEnabled()) {\n                     s_logger.debug(\"Unable to find the owner VM for CreatePrivateTemplateFromVolumeCommand on host \" + hyperHost.getHyperHostName() +\n-                        \", try within datacenter\");\n+                            \", try within datacenter\");\n                 }\n                 vmMo = hyperHost.findVmOnPeerHyperHost(volume.getVmName());\n \n@@ -694,8 +696,8 @@ public Answer createTemplateFromVolume(CopyCommand cmd) {\n             }\n \n             Ternary<String, Long, Long> result =\n-                createTemplateFromVolume(vmMo, template.getPath(), template.getId(), template.getName(), secondaryStoragePoolURL, volumePath,\n-                    hostService.getWorkerName(context, cmd, 0));\n+                    createTemplateFromVolume(vmMo, template.getPath(), template.getId(), template.getName(), secondaryStoragePoolURL, volumePath,\n+                            hostService.getWorkerName(context, cmd, 0));\n \n             TemplateObjectTO newTemplate = new TemplateObjectTO();\n             newTemplate.setPath(result.first());\n@@ -742,7 +744,7 @@ private void writeMetaOvaForTemplate(String installFullPath, String ovfFilename,\n     }\n \n     private Ternary<String, Long, Long> createTemplateFromSnapshot(String installPath, String templateUniqueName, String secStorageUrl, String snapshotPath,\n-        Long templateId) throws Exception {\n+            Long templateId) throws Exception {\n         //Snapshot path is decoded in this form: /snapshots/account/volumeId/uuid/uuid\n         String backupSSUuid;\n         String snapshotFolder;\n@@ -751,7 +753,7 @@ private void writeMetaOvaForTemplate(String installFullPath, String ovfFilename,\n             backupSSUuid = snapshotPath.substring(index + 1).replace(\".ova\", \"\");\n             snapshotFolder = snapshotPath.substring(0, index);\n         } else {\n-            String[] tokens = snapshotPath.split(File.separator);\n+            String[] tokens = snapshotPath.split(File.separatorChar == '\\\\' ? \"\\\\\\\\\" : File.separator);\n             backupSSUuid = tokens[tokens.length - 1];\n             snapshotFolder = StringUtils.join(tokens, File.separator, 0, tokens.length - 1);\n         }\n@@ -909,7 +911,7 @@ public Answer createTemplateFromSnapshot(CopyCommand cmd) {\n \n     // return Pair<String(divice bus name), String[](disk chain)>\n     private Pair<String, String[]> exportVolumeToSecondaryStroage(VirtualMachineMO vmMo, String volumePath, String secStorageUrl, String secStorageDir,\n-        String exportName, String workerVmName) throws Exception {\n+            String exportName, String workerVmName) throws Exception {\n \n         String secondaryMountPoint = mountService.getMountPoint(secStorageUrl);\n         String exportPath = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + exportName;\n@@ -937,7 +939,7 @@ public Answer createTemplateFromSnapshot(CopyCommand cmd) {\n \n             // 4 MB is the minimum requirement for VM memory in VMware\n             Pair<VirtualMachineMO, String[]> cloneResult =\n-                vmMo.cloneFromCurrentSnapshot(workerVmName, 0, 4, volumeDeviceInfo.second(), VmwareHelper.getDiskDeviceDatastore(volumeDeviceInfo.first()));\n+                    vmMo.cloneFromCurrentSnapshot(workerVmName, 0, 4, volumeDeviceInfo.second(), VmwareHelper.getDiskDeviceDatastore(volumeDeviceInfo.first()));\n             clonedVm = cloneResult.first();\n             String disks[] = cloneResult.second();\n \n@@ -953,7 +955,7 @@ public Answer createTemplateFromSnapshot(CopyCommand cmd) {\n \n     // Ternary<String(backup uuid in secondary storage), String(device bus name), String[](original disk chain in the snapshot)>\n     private Ternary<String, String, String[]> backupSnapshotToSecondaryStorage(VirtualMachineMO vmMo, String installPath, String volumePath, String snapshotUuid,\n-        String secStorageUrl, String prevSnapshotUuid, String prevBackupUuid, String workerVmName) throws Exception {\n+            String secStorageUrl, String prevSnapshotUuid, String prevBackupUuid, String workerVmName) throws Exception {\n \n         String backupUuid = UUID.randomUUID().toString();\n         Pair<String, String[]> snapshotInfo = exportVolumeToSecondaryStroage(vmMo, volumePath, secStorageUrl, installPath, backupUuid, workerVmName);\n@@ -1030,8 +1032,8 @@ public Answer backupSnapshot(CopyCommand cmd) {\n                 }\n \n                 backupResult =\n-                    backupSnapshotToSecondaryStorage(vmMo, destSnapshot.getPath(), srcSnapshot.getVolume().getPath(), snapshotUuid, secondaryStorageUrl,\n-                        prevSnapshotUuid, prevBackupUuid, hostService.getWorkerName(context, cmd, 1));\n+                        backupSnapshotToSecondaryStorage(vmMo, destSnapshot.getPath(), srcSnapshot.getVolume().getPath(), snapshotUuid, secondaryStorageUrl,\n+                                prevSnapshotUuid, prevBackupUuid, hostService.getWorkerName(context, cmd, 1));\n                 snapshotBackupUuid = backupResult.first();\n \n                 success = (snapshotBackupUuid != null);\n@@ -1173,9 +1175,9 @@ private Answer attachVolume(Command cmd, DiskTO disk, boolean isAttach, boolean\n                 Map<String, String> details = disk.getDetails();\n \n                 morDs = hostService.prepareManagedStorage(hyperHost, iScsiName, storageHost, storagePort,\n-                            details.get(DiskTO.CHAP_INITIATOR_USERNAME), details.get(DiskTO.CHAP_INITIATOR_SECRET),\n-                            details.get(DiskTO.CHAP_TARGET_USERNAME), details.get(DiskTO.CHAP_TARGET_SECRET),\n-                            volumeTO.getSize(), cmd);\n+                        details.get(DiskTO.CHAP_INITIATOR_USERNAME), details.get(DiskTO.CHAP_INITIATOR_SECRET),\n+                        details.get(DiskTO.CHAP_TARGET_USERNAME), details.get(DiskTO.CHAP_TARGET_SECRET),\n+                        volumeTO.getSize(), cmd);\n             }\n             else {\n                 morDs = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, isManaged ? VmwareResource.getDatastoreName(iScsiName) : primaryStore.getUuid());\n@@ -1187,7 +1189,7 @@ private Answer attachVolume(Command cmd, DiskTO disk, boolean isAttach, boolean\n                 throw new Exception(msg);\n             }\n \n-            DatastoreMO dsMo = new DatastoreMO(this.hostService.getServiceContext(null), morDs);\n+            DatastoreMO dsMo = new DatastoreMO(hostService.getServiceContext(null), morDs);\n             String datastoreVolumePath;\n \n             if (isAttach) {\n@@ -1219,7 +1221,7 @@ private Answer attachVolume(Command cmd, DiskTO disk, boolean isAttach, boolean\n                 vmMo.detachDisk(datastoreVolumePath, false);\n \n                 if (isManaged) {\n-                    this.hostService.handleDatastoreAndVmdkDetach(iScsiName, storageHost, storagePort);\n+                    hostService.handleDatastoreAndVmdkDetach(iScsiName, storageHost, storagePort);\n                 } else {\n                     VmwareStorageLayoutHelper.syncVolumeToRootFolder(dsMo.getOwnerDatacenter().first(), dsMo, volumeTO.getPath());\n                 }\n@@ -1369,7 +1371,7 @@ public Answer createVolume(CreateObjectCommand cmd) {\n             String volumeUuid = UUID.randomUUID().toString().replace(\"-\", \"\");\n \n             String volumeDatastorePath = dsMo.getDatastorePath(volumeUuid + \".vmdk\");\n-            String dummyVmName = this.hostService.getWorkerName(context, cmd, 0);\n+            String dummyVmName = hostService.getWorkerName(context, cmd, 0);\n             try {\n                 s_logger.info(\"Create worker VM \" + dummyVmName);\n                 vmMo = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, dummyVmName);\n@@ -1485,7 +1487,7 @@ public Answer deleteVolume(DeleteCommand cmd) {\n \n                         // this.hostService.handleDatastoreAndVmdkDetach(iScsiName, storageHost, storagePort);\n                         if (managedIqns != null && !managedIqns.isEmpty()) {\n-                            this.hostService.removeManagedTargetsFromCluster(managedIqns);\n+                            hostService.removeManagedTargetsFromCluster(managedIqns);\n                         }\n \n                         for (NetworkDetails netDetails : networks) {\n@@ -1573,7 +1575,7 @@ public Answer deleteVolume(DeleteCommand cmd) {\n     }\n \n     private Long restoreVolumeFromSecStorage(VmwareHypervisorHost hyperHost, DatastoreMO primaryDsMo, String newVolumeName, String secStorageUrl, String secStorageDir,\n-        String backupName) throws Exception {\n+            String backupName) throws Exception {\n \n         String secondaryMountPoint = mountService.getMountPoint(secStorageUrl);\n         String srcOVAFileName = null;",
                "raw_url": "https://github.com/apache/cloudstack/raw/d4d49578dc2dfc03aa7247811ba571da20c82cd5/plugins/hypervisors/vmware/src/com/cloud/storage/resource/VmwareStorageProcessor.java",
                "sha": "9d86b16d6a4f9068928e8ea61538eb4c5da39445",
                "status": "modified"
            }
        ],
        "message": "Findbugs : Fix a number of potential NPEs and minor findings",
        "parent": "https://github.com/apache/cloudstack/commit/e0a4b7c891b1bf84c8f5be8b085a3f41948d12f0",
        "patched_files": [
            "VmwareResource.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VmwareResourceTest.java"
        ]
    },
    "cloudstack_d6b41d9": {
        "bug_id": "cloudstack_d6b41d9",
        "commit": "https://github.com/apache/cloudstack/commit/d6b41d9ac21a9740494bfcfd58ea51d712e52f4e",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/d6b41d9ac21a9740494bfcfd58ea51d712e52f4e/engine/schema/src/com/cloud/storage/dao/VolumeDao.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/storage/dao/VolumeDao.java?ref=d6b41d9ac21a9740494bfcfd58ea51d712e52f4e",
                "deletions": 1,
                "filename": "engine/schema/src/com/cloud/storage/dao/VolumeDao.java",
                "patch": "@@ -80,7 +80,7 @@\n \n     List<VolumeVO> listVolumesToBeDestroyed();\n \n-    List<VolumeVO> listVolumesToBeDestroyed(Date date);\n+    List<VolumeVO> listNonRootVolumesToBeDestroyed(Date date);\n \n     ImageFormat getImageFormat(Long volumeId);\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/d6b41d9ac21a9740494bfcfd58ea51d712e52f4e/engine/schema/src/com/cloud/storage/dao/VolumeDao.java",
                "sha": "f2d5fc735207a0c267a05d3e5e2d147c6f06cc1f",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/d6b41d9ac21a9740494bfcfd58ea51d712e52f4e/engine/schema/src/com/cloud/storage/dao/VolumeDaoImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/storage/dao/VolumeDaoImpl.java?ref=d6b41d9ac21a9740494bfcfd58ea51d712e52f4e",
                "deletions": 1,
                "filename": "engine/schema/src/com/cloud/storage/dao/VolumeDaoImpl.java",
                "patch": "@@ -325,6 +325,7 @@ public VolumeDaoImpl() {\n         AllFieldsSearch.and(\"deviceId\", AllFieldsSearch.entity().getDeviceId(), Op.EQ);\n         AllFieldsSearch.and(\"poolId\", AllFieldsSearch.entity().getPoolId(), Op.EQ);\n         AllFieldsSearch.and(\"vType\", AllFieldsSearch.entity().getVolumeType(), Op.EQ);\n+        AllFieldsSearch.and(\"notVolumeType\", AllFieldsSearch.entity().getVolumeType(), Op.NEQ);\n         AllFieldsSearch.and(\"id\", AllFieldsSearch.entity().getId(), Op.EQ);\n         AllFieldsSearch.and(\"destroyed\", AllFieldsSearch.entity().getState(), Op.EQ);\n         AllFieldsSearch.and(\"notDestroyed\", AllFieldsSearch.entity().getState(), Op.NEQ);\n@@ -481,9 +482,10 @@ public SumCount() {\n     }\n \n     @Override\n-    public List<VolumeVO> listVolumesToBeDestroyed(Date date) {\n+    public List<VolumeVO> listNonRootVolumesToBeDestroyed(Date date) {\n         SearchCriteria<VolumeVO> sc = AllFieldsSearch.create();\n         sc.setParameters(\"state\", Volume.State.Destroy);\n+        sc.setParameters(\"notVolumeType\", Volume.Type.ROOT.toString());\n         sc.setParameters(\"updateTime\", date);\n \n         return listBy(sc);",
                "raw_url": "https://github.com/apache/cloudstack/raw/d6b41d9ac21a9740494bfcfd58ea51d712e52f4e/engine/schema/src/com/cloud/storage/dao/VolumeDaoImpl.java",
                "sha": "4f5b613ddd156049079df8f22fd1d62e6d5ce35d",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/d6b41d9ac21a9740494bfcfd58ea51d712e52f4e/engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeObject.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeObject.java?ref=d6b41d9ac21a9740494bfcfd58ea51d712e52f4e",
                "deletions": 3,
                "filename": "engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeObject.java",
                "patch": "@@ -174,11 +174,11 @@ public long getVolumeId() {\n     }\n \n     @Override\n-    public boolean  stateTransit(Volume.Event event) {\n+    public boolean stateTransit(Volume.Event event) {\n         boolean result = false;\n         try {\n             volumeVO = volumeDao.findById(volumeVO.getId());\n-            if(volumeVO != null) {\n+            if (volumeVO != null) {\n                 result = _volStateMachine.transitTo(volumeVO, event, null, volumeDao);\n                 volumeVO = volumeDao.findById(volumeVO.getId());\n             }\n@@ -332,8 +332,9 @@ public void processEvent(ObjectInDataStoreStateMachine.Event event) {\n             throw new CloudRuntimeException(\"Failed to update state:\" + e.toString());\n         } finally {\n             // in case of OperationFailed, expunge the entry\n+            // state transit call reloads the volume from DB and so check for null as well\n             if (event == ObjectInDataStoreStateMachine.Event.OperationFailed &&\n-                (volumeVO.getState() != Volume.State.Copying && volumeVO.getState() != Volume.State.Uploaded && volumeVO.getState() != Volume.State.UploadError)) {\n+                (volumeVO != null && volumeVO.getState() != Volume.State.Copying && volumeVO.getState() != Volume.State.Uploaded && volumeVO.getState() != Volume.State.UploadError)) {\n                 objectInStoreMgr.deleteIfNotReady(this);\n             }\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/d6b41d9ac21a9740494bfcfd58ea51d712e52f4e/engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeObject.java",
                "sha": "b7f459227aaa6843124912d204385957bbe77cff",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/d6b41d9ac21a9740494bfcfd58ea51d712e52f4e/engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java?ref=d6b41d9ac21a9740494bfcfd58ea51d712e52f4e",
                "deletions": 0,
                "filename": "engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java",
                "patch": "@@ -316,6 +316,11 @@ private boolean canVolumeBeRemoved(long volumeId) {\n         }\n \n         VolumeVO vol = volDao.findById(volume.getId());\n+        if (vol == null) {\n+            s_logger.debug(\"Volume \" + volume.getId() + \" is not found\");\n+            future.complete(result);\n+            return future;\n+        }\n \n         String volumePath = vol.getPath();\n         Long poolId = vol.getPoolId();",
                "raw_url": "https://github.com/apache/cloudstack/raw/d6b41d9ac21a9740494bfcfd58ea51d712e52f4e/engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java",
                "sha": "0b58bf2fecb323c27425dd1dac28b8bd94b517ab",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/d6b41d9ac21a9740494bfcfd58ea51d712e52f4e/server/src/com/cloud/storage/StorageManagerImpl.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/StorageManagerImpl.java?ref=d6b41d9ac21a9740494bfcfd58ea51d712e52f4e",
                "deletions": 3,
                "filename": "server/src/com/cloud/storage/StorageManagerImpl.java",
                "patch": "@@ -1113,8 +1113,8 @@ public void cleanupStorage(boolean recurring) {\n \n                     cleanupSecondaryStorage(recurring);\n \n-                    List<VolumeVO> vols = _volsDao.listVolumesToBeDestroyed(new Date(System.currentTimeMillis() - ((long) StorageCleanupDelay.value() << 10)));\n-\n+                    // ROOT volumes will be destroyed as part of VM cleanup\n+                    List<VolumeVO> vols = _volsDao.listNonRootVolumesToBeDestroyed(new Date(System.currentTimeMillis() - ((long) StorageCleanupDelay.value() << 10)));\n                     for (VolumeVO vol : vols) {\n                         try {\n                             // If this fails, just log a warning. It's ideal if we clean up the host-side clustered file\n@@ -1125,7 +1125,12 @@ public void cleanupStorage(boolean recurring) {\n                         }\n \n                         try {\n-                            volService.expungeVolumeAsync(volFactory.getVolume(vol.getId()));\n+                            VolumeInfo volumeInfo = volFactory.getVolume(vol.getId());\n+                            if (volumeInfo != null) {\n+                                volService.expungeVolumeAsync(volumeInfo);\n+                            } else {\n+                                s_logger.debug(\"Volume \" + vol.getUuid() + \" is already destroyed\");\n+                            }\n                         } catch (Exception e) {\n                             s_logger.warn(\"Unable to destroy volume \" + vol.getUuid(), e);\n                         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/d6b41d9ac21a9740494bfcfd58ea51d712e52f4e/server/src/com/cloud/storage/StorageManagerImpl.java",
                "sha": "3dc62b648267ca5f62d5213a7d812911a44e3311",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-9660: NPE while destroying volumes during 1000 VMs deploy and destroy tests\nNPE is seen as VM destroy and storage cleanup threads try to remove the same root volume. Fix is to handle\nonly non-root volumes in storage cleanup thread, root volumes will be handled as part of VM destroy.",
        "parent": "https://github.com/apache/cloudstack/commit/f2798403b58c26ef26227a26485e9266e7ef84c5",
        "patched_files": [
            "VolumeObject.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VolumeObjectTest.java"
        ]
    },
    "cloudstack_d862a09": {
        "bug_id": "cloudstack_d862a09",
        "commit": "https://github.com/apache/cloudstack/commit/d862a09771dca8d71da1727fdd09234d602d573b",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/d862a09771dca8d71da1727fdd09234d602d573b/plugins/network-elements/nuage-vsp/src/com/cloud/util/NuageVspEntityBuilder.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/util/NuageVspEntityBuilder.java?ref=d862a09771dca8d71da1727fdd09234d602d573b",
                "deletions": 1,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/util/NuageVspEntityBuilder.java",
                "patch": "@@ -109,7 +109,9 @@ public VspNetwork buildVspNetwork(Network network, boolean fillAddressRange) {\n         vspNetworkBuilder.domain(vspDomain);\n \n         AccountVO account = _accountDao.findById(network.getAccountId());\n-        vspNetworkBuilder.accountUuid(account.getUuid()).accountName(account.getAccountName());\n+        if (account != null) {\n+            vspNetworkBuilder.accountUuid(account.getUuid()).accountName(account.getAccountName());\n+        }\n \n         NetworkOfferingVO networkOffering = _networkOfferingDao.findById(network.getNetworkOfferingId());\n         vspNetworkBuilder.egressDefaultPolicy(networkOffering.getEgressDefaultPolicy());",
                "raw_url": "https://github.com/apache/cloudstack/raw/d862a09771dca8d71da1727fdd09234d602d573b/plugins/network-elements/nuage-vsp/src/com/cloud/util/NuageVspEntityBuilder.java",
                "sha": "8757ad021200a25c68293bb7598e551e3080c158",
                "status": "modified"
            }
        ],
        "message": "Nuage VSP : Fix for NPE while cleaning up account when there are still resources belonging to that account",
        "parent": "https://github.com/apache/cloudstack/commit/4b6179940d8f29873a0cc0b4b0bc5b2f8e248ca5",
        "patched_files": [
            "NuageVspEntityBuilder.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "NuageVspEntityBuilderTest.java"
        ]
    },
    "cloudstack_dcbf3c8": {
        "bug_id": "cloudstack_dcbf3c8",
        "commit": "https://github.com/apache/cloudstack/commit/dcbf3c8689ed3eaed8653763ec27d2907671c72b",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/dcbf3c8689ed3eaed8653763ec27d2907671c72b/vmware-base/test/com/cloud/hypervisor/vmware/util/VmwareContextPoolTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/vmware-base/test/com/cloud/hypervisor/vmware/util/VmwareContextPoolTest.java?ref=dcbf3c8689ed3eaed8653763ec27d2907671c72b",
                "deletions": 2,
                "filename": "vmware-base/test/com/cloud/hypervisor/vmware/util/VmwareContextPoolTest.java",
                "patch": "@@ -114,7 +114,5 @@ public void testMultithreadedPoolClients() throws Exception {\n             totalRegistrations += client.count();\n         }\n         Mockito.verify(vmwareContextPool, Mockito.atLeast(totalRegistrations)).registerContext(Mockito.any(VmwareContext.class));\n-        Assert.assertEquals(vmwareContextPool.composePoolKey(vmwareAddress, vmwareUsername),\n-                vmwareContextPool.getContext(vmwareAddress, vmwareUsername).getPoolKey());\n     }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/dcbf3c8689ed3eaed8653763ec27d2907671c72b/vmware-base/test/com/cloud/hypervisor/vmware/util/VmwareContextPoolTest.java",
                "sha": "0c365db6fefed946c82684747954a088d960b05e",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-9564: Fix NPE due to intermittent test assertion\n\nThe test assertion on a pool object may return a null object, as objects\ncan be randomly expired/tombstoned. This will fix a NPE sometimes seen due\nto recently merge for the fix for CLOUDSTACK-9564.\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/48b28f7d6e72010bc365c5b8829a7f20e47c015b",
        "patched_files": [
            "VmwareContextPool.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VmwareContextPoolTest.java"
        ]
    },
    "cloudstack_df934c9": {
        "bug_id": "cloudstack_df934c9",
        "commit": "https://github.com/apache/cloudstack/commit/df934c954106a618f8b0aca7e7dfbac890d78244",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/df934c954106a618f8b0aca7e7dfbac890d78244/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/VolumeApiServiceImpl.java?ref=df934c954106a618f8b0aca7e7dfbac890d78244",
                "deletions": 2,
                "filename": "server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "patch": "@@ -1636,12 +1636,12 @@ private Volume orchestrateDetachVolumeFromVM(long vmId, long volumeId) {\n         }\n \n         HostVO host = null;\n-        StoragePoolVO volumePool = _storagePoolDao.findById(volume.getPoolId());\n+        StoragePoolVO volumePool = _storagePoolDao.findByIdIncludingRemoved(volume.getPoolId());\n \n         if (hostId != null) {\n             host = _hostDao.findById(hostId);\n \n-            if (host != null && host.getHypervisorType() == HypervisorType.XenServer && volumePool.isManaged()) {\n+            if (host != null && host.getHypervisorType() == HypervisorType.XenServer && volumePool != null && volumePool.isManaged()) {\n                 sendCommand = true;\n             }\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/df934c954106a618f8b0aca7e7dfbac890d78244/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "sha": "0f17a57ad4b27bbb0712c8565ca5ab7f55697636",
                "status": "modified"
            }
        ],
        "message": "server: fix NPE case in VolumeApiServiceImpl\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/d2471df0be35c9af928c682c961ac0544b347159",
        "patched_files": [
            "VolumeApiServiceImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VolumeApiServiceImplTest.java"
        ]
    },
    "cloudstack_dffb430": {
        "bug_id": "cloudstack_dffb430",
        "commit": "https://github.com/apache/cloudstack/commit/dffb4309750517ced063008ccee7907cb85f86ba",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cloudstack/blob/dffb4309750517ced063008ccee7907cb85f86ba/core/src/org/apache/cloudstack/storage/to/TemplateObjectTO.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/core/src/org/apache/cloudstack/storage/to/TemplateObjectTO.java?ref=dffb4309750517ced063008ccee7907cb85f86ba",
                "deletions": 0,
                "filename": "core/src/org/apache/cloudstack/storage/to/TemplateObjectTO.java",
                "patch": "@@ -46,6 +46,7 @@\n     private Hypervisor.HypervisorType hypervisorType;\n     private boolean bootable;\n     private String uniqueName;\n+    private boolean directDownload;\n \n     public TemplateObjectTO() {\n \n@@ -235,6 +236,14 @@ public void setUniqueName(String uniqueName) {\n         this.uniqueName = uniqueName;\n     }\n \n+    public boolean isDirectDownload() {\n+        return directDownload;\n+    }\n+\n+    public void setDirectDownload(boolean directDownload) {\n+        this.directDownload = directDownload;\n+    }\n+\n     @Override\n     public String toString() {\n         return new StringBuilder(\"TemplateTO[id=\").append(id).append(\"|origUrl=\").append(origUrl).append(\"|name\").append(name).append(\"]\").toString();",
                "raw_url": "https://github.com/apache/cloudstack/raw/dffb4309750517ced063008ccee7907cb85f86ba/core/src/org/apache/cloudstack/storage/to/TemplateObjectTO.java",
                "sha": "cc2eaadea073e8ee09c05fbd85fea4d6e0e9ba15",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/dffb4309750517ced063008ccee7907cb85f86ba/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java?ref=dffb4309750517ced063008ccee7907cb85f86ba",
                "deletions": 1,
                "filename": "plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "patch": "@@ -49,6 +49,7 @@\n \n import com.cloud.resource.RequestWrapper;\n import org.apache.cloudstack.storage.to.PrimaryDataStoreTO;\n+import org.apache.cloudstack.storage.to.TemplateObjectTO;\n import org.apache.cloudstack.storage.to.VolumeObjectTO;\n import org.apache.cloudstack.utils.hypervisor.HypervisorUtils;\n import org.apache.cloudstack.utils.linux.CPUStat;\n@@ -2209,7 +2210,8 @@ public String getVolumePath(final Connect conn, final DiskTO volume) throws Libv\n         final DataTO data = volume.getData();\n         final DataStoreTO store = data.getDataStore();\n \n-        if (volume.getType() == Volume.Type.ISO && data.getPath() != null && (store instanceof NfsTO || store instanceof PrimaryDataStoreTO)) {\n+        if (volume.getType() == Volume.Type.ISO && data.getPath() != null && (store instanceof NfsTO ||\n+                store instanceof PrimaryDataStoreTO && data instanceof TemplateObjectTO && !((TemplateObjectTO) data).isDirectDownload())) {\n             final String isoPath = store.getUrl().split(\"\\\\?\")[0] + File.separator + data.getPath();\n             final int index = isoPath.lastIndexOf(\"/\");\n             final String path = isoPath.substring(0, index);",
                "raw_url": "https://github.com/apache/cloudstack/raw/dffb4309750517ced063008ccee7907cb85f86ba/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "sha": "652f6431f0e29f6aba53a634c6fd8004fc150dc5",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/dffb4309750517ced063008ccee7907cb85f86ba/server/src/com/cloud/template/TemplateManagerImpl.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/template/TemplateManagerImpl.java?ref=dffb4309750517ced063008ccee7907cb85f86ba",
                "deletions": 4,
                "filename": "server/src/com/cloud/template/TemplateManagerImpl.java",
                "patch": "@@ -50,6 +50,7 @@\n import org.apache.cloudstack.storage.datastore.db.ImageStoreVO;\n import org.apache.cloudstack.utils.imagestore.ImageStoreUtil;\n import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.collections.MapUtils;\n import org.apache.log4j.Logger;\n import org.apache.cloudstack.acl.SecurityChecker.AccessType;\n import org.apache.cloudstack.api.ApiConstants;\n@@ -557,11 +558,13 @@ public void prepareIsoForVmProfile(VirtualMachineProfile profile, DeployDestinat\n         if (vm.getIsoId() != null) {\n             Map<Volume, StoragePool> storageForDisks = dest.getStorageForDisks();\n             Long poolId = null;\n-            for (StoragePool storagePool : storageForDisks.values()) {\n-                if (poolId != null && storagePool.getId() != poolId) {\n-                    throw new CloudRuntimeException(\"Cannot determine where to download iso\");\n+            if (MapUtils.isNotEmpty(storageForDisks)) {\n+                for (StoragePool storagePool : storageForDisks.values()) {\n+                    if (poolId != null && storagePool.getId() != poolId) {\n+                        throw new CloudRuntimeException(\"Cannot determine where to download iso\");\n+                    }\n+                    poolId = storagePool.getId();\n                 }\n-                poolId = storagePool.getId();\n             }\n             TemplateInfo template = prepareIso(vm.getIsoId(), vm.getDataCenterId(), dest.getHost().getId(), poolId);\n             if (template == null){\n@@ -579,6 +582,7 @@ public void prepareIsoForVmProfile(VirtualMachineProfile profile, DeployDestinat\n             }\n \n             TemplateObjectTO iso = (TemplateObjectTO)template.getTO();\n+            iso.setDirectDownload(template.isDirectDownload());\n             iso.setGuestOsType(displayName);\n             DiskTO disk = new DiskTO(iso, 3L, null, Volume.Type.ISO);\n             profile.addDisk(disk);",
                "raw_url": "https://github.com/apache/cloudstack/raw/dffb4309750517ced063008ccee7907cb85f86ba/server/src/com/cloud/template/TemplateManagerImpl.java",
                "sha": "48cc6f43a950c9d9532e4eac97f8bd8ae1d59d5d",
                "status": "modified"
            }
        ],
        "message": "kvm: Fix migrating VM from ISO failures (#2928)\n\nPrevents errors while migrating VM from ISO:\r\n\r\nTest 1: Deploy VM from ISO -> Live migrate VM to another host -> ERROR\r\nTest 2: Register ISO using Direct Download on KVM -> Deploy VM from ISO -> Live migrate VM to another host -> ERROR\r\n\r\n- Prevent NullPointerException migrating VM from ISO\r\n- Prevent mount secondary storage on ISO direct downloads on KVM",
        "parent": "https://github.com/apache/cloudstack/commit/f0491d5c72c3161777ca49ae809606a6704df5ff",
        "patched_files": [
            "TemplateManagerImpl.java",
            "LibvirtComputingResource.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "TemplateManagerImplTest.java",
            "LibvirtComputingResourceTest.java"
        ]
    },
    "cloudstack_e72a69a": {
        "bug_id": "cloudstack_e72a69a",
        "commit": "https://github.com/apache/cloudstack/commit/e72a69a8a2f0514ece93fc9b05698aa08afa5539",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/e72a69a8a2f0514ece93fc9b05698aa08afa5539/framework/quota/src/org/apache/cloudstack/quota/QuotaAlertManagerImpl.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/QuotaAlertManagerImpl.java?ref=e72a69a8a2f0514ece93fc9b05698aa08afa5539",
                "deletions": 0,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/QuotaAlertManagerImpl.java",
                "patch": "@@ -153,6 +153,7 @@ public void checkAndSendQuotaAlertEmails() {\n             BigDecimal thresholdBalance = quotaAccount.getQuotaMinBalance();\n             if (accountBalance != null) {\n                 AccountVO account = _accountDao.findById(quotaAccount.getId());\n+                if (account == null) continue; // the account is removed\n                 if (s_logger.isDebugEnabled()) {\n                     s_logger.debug(\"checkAndSendQuotaAlertEmails: Check id=\" + account.getId() + \" bal=\" + accountBalance + \", alertDate=\" + alertDate + \", lockable=\" + lockable);\n                 }",
                "raw_url": "https://github.com/apache/cloudstack/raw/e72a69a8a2f0514ece93fc9b05698aa08afa5539/framework/quota/src/org/apache/cloudstack/quota/QuotaAlertManagerImpl.java",
                "sha": "a25ed04282507ba78c43df9dbf2f6075ae7a22d8",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/e72a69a8a2f0514ece93fc9b05698aa08afa5539/framework/quota/src/org/apache/cloudstack/quota/QuotaManagerImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/QuotaManagerImpl.java?ref=e72a69a8a2f0514ece93fc9b05698aa08afa5539",
                "deletions": 3,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/QuotaManagerImpl.java",
                "patch": "@@ -360,10 +360,11 @@ public QuotaUsageVO updateQuotaDiskUsage(UsageVO usageRecord, final BigDecimal a\n         BigDecimal rawusage;\n         // get service offering details\n         ServiceOfferingVO serviceoffering = _serviceOfferingDao.findServiceOffering(usageRecord.getVmInstanceId(), usageRecord.getOfferingId());\n+        if (serviceoffering == null) return quotalist;\n         rawusage = new BigDecimal(usageRecord.getRawUsage());\n \n         QuotaTariffVO tariff = _quotaTariffDao.findTariffPlanByUsageType(QuotaTypes.CPU_NUMBER, usageRecord.getEndDate());\n-        if (tariff != null && tariff.getCurrencyValue().compareTo(BigDecimal.ZERO) != 0) {\n+        if (tariff != null && tariff.getCurrencyValue().compareTo(BigDecimal.ZERO) != 0 && serviceoffering.getCpu() != null) {\n             BigDecimal cpu = new BigDecimal(serviceoffering.getCpu());\n             onehourcostpercpu = tariff.getCurrencyValue().multiply(aggregationRatio);\n             cpuquotausgage = rawusage.multiply(onehourcostpercpu).multiply(cpu);\n@@ -373,7 +374,7 @@ public QuotaUsageVO updateQuotaDiskUsage(UsageVO usageRecord, final BigDecimal a\n             quotalist.add(quota_usage);\n         }\n         tariff = _quotaTariffDao.findTariffPlanByUsageType(QuotaTypes.CPU_CLOCK_RATE, usageRecord.getEndDate());\n-        if (tariff != null && tariff.getCurrencyValue().compareTo(BigDecimal.ZERO) != 0) {\n+        if (tariff != null && tariff.getCurrencyValue().compareTo(BigDecimal.ZERO) != 0 && serviceoffering.getSpeed() != null) {\n             BigDecimal speed = new BigDecimal(serviceoffering.getSpeed() / 100.00);\n             onehourcostper100mhz = tariff.getCurrencyValue().multiply(aggregationRatio);\n             speedquotausage = rawusage.multiply(onehourcostper100mhz).multiply(speed);\n@@ -383,7 +384,7 @@ public QuotaUsageVO updateQuotaDiskUsage(UsageVO usageRecord, final BigDecimal a\n             quotalist.add(quota_usage);\n         }\n         tariff = _quotaTariffDao.findTariffPlanByUsageType(QuotaTypes.MEMORY, usageRecord.getEndDate());\n-        if (tariff != null && tariff.getCurrencyValue().compareTo(BigDecimal.ZERO) != 0) {\n+        if (tariff != null && tariff.getCurrencyValue().compareTo(BigDecimal.ZERO) != 0 && serviceoffering.getRamSize() != null) {\n             BigDecimal memory = new BigDecimal(serviceoffering.getRamSize());\n             onehourcostper1mb = tariff.getCurrencyValue().multiply(aggregationRatio);\n             memoryquotausage = rawusage.multiply(onehourcostper1mb).multiply(memory);",
                "raw_url": "https://github.com/apache/cloudstack/raw/e72a69a8a2f0514ece93fc9b05698aa08afa5539/framework/quota/src/org/apache/cloudstack/quota/QuotaManagerImpl.java",
                "sha": "0a59fa20fd3e7ab9f6e663b7e783a666072faf3b",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/e72a69a8a2f0514ece93fc9b05698aa08afa5539/framework/quota/src/org/apache/cloudstack/quota/QuotaStatementImpl.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/quota/src/org/apache/cloudstack/quota/QuotaStatementImpl.java?ref=e72a69a8a2f0514ece93fc9b05698aa08afa5539",
                "deletions": 8,
                "filename": "framework/quota/src/org/apache/cloudstack/quota/QuotaStatementImpl.java",
                "patch": "@@ -122,15 +122,17 @@ public void sendStatement() {\n             Date lastStatementDate = quotaAccount.getLastStatementDate();\n             if (interval != null) {\n                 AccountVO account = _accountDao.findById(quotaAccount.getId());\n-                if (lastStatementDate == null || getDifferenceDays(lastStatementDate, new Date()) >= s_LAST_STATEMENT_SENT_DAYS + 1) {\n-                    BigDecimal quotaUsage = _quotaUsage.findTotalQuotaUsage(account.getAccountId(), account.getDomainId(), null, interval[0].getTime(), interval[1].getTime());\n-                    s_logger.info(\"For account=\" + quotaAccount.getId() + \", quota used = \" + quotaUsage);\n-                    // send statement\n-                    deferredQuotaEmailList.add(new DeferredQuotaEmail(account, quotaAccount, quotaUsage, QuotaConfig.QuotaEmailTemplateTypes.QUOTA_STATEMENT));\n-                } else {\n-                    if (s_logger.isDebugEnabled()) {\n-                        s_logger.debug(\"For \" + quotaAccount.getId() + \" the statement has been sent recently\");\n+                if (account != null) {\n+                    if (lastStatementDate == null || getDifferenceDays(lastStatementDate, new Date()) >= s_LAST_STATEMENT_SENT_DAYS + 1) {\n+                        BigDecimal quotaUsage = _quotaUsage.findTotalQuotaUsage(account.getAccountId(), account.getDomainId(), null, interval[0].getTime(), interval[1].getTime());\n+                        s_logger.info(\"For account=\" + quotaAccount.getId() + \", quota used = \" + quotaUsage);\n+                        // send statement\n+                        deferredQuotaEmailList.add(new DeferredQuotaEmail(account, quotaAccount, quotaUsage, QuotaConfig.QuotaEmailTemplateTypes.QUOTA_STATEMENT));\n+                    } else {\n+                        if (s_logger.isDebugEnabled()) {\n+                            s_logger.debug(\"For \" + quotaAccount.getId() + \" the statement has been sent recently\");\n \n+                        }\n                     }\n                 }\n             } else if (lastStatementDate != null) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/e72a69a8a2f0514ece93fc9b05698aa08afa5539/framework/quota/src/org/apache/cloudstack/quota/QuotaStatementImpl.java",
                "sha": "5c12ae6e75d7110acf6b4c43b711e4e22074ac34",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/e72a69a8a2f0514ece93fc9b05698aa08afa5539/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaSummaryCmd.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaSummaryCmd.java?ref=e72a69a8a2f0514ece93fc9b05698aa08afa5539",
                "deletions": 1,
                "filename": "plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaSummaryCmd.java",
                "patch": "@@ -59,7 +59,7 @@ public QuotaSummaryCmd() {\n     public void execute() {\n         Account caller = CallContext.current().getCallingAccount();\n         List<QuotaSummaryResponse> responses;\n-        if (caller.getAccountId() <= 2) { //non root admin or system\n+        if (caller.getType() == Account.ACCOUNT_TYPE_ADMIN) { //admin account\n             if (getAccountName() != null && getDomainId() != null)\n                 responses = _responseBuilder.createQuotaSummaryResponse(caller.getAccountName(), caller.getDomainId());\n             else",
                "raw_url": "https://github.com/apache/cloudstack/raw/e72a69a8a2f0514ece93fc9b05698aa08afa5539/plugins/database/quota/src/org/apache/cloudstack/api/command/QuotaSummaryCmd.java",
                "sha": "88466e08c6b93aa6af16e246aee51e48f47e0c83",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/e72a69a8a2f0514ece93fc9b05698aa08afa5539/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaResponseBuilderImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaResponseBuilderImpl.java?ref=e72a69a8a2f0514ece93fc9b05698aa08afa5539",
                "deletions": 1,
                "filename": "plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaResponseBuilderImpl.java",
                "patch": "@@ -138,6 +138,7 @@ public QuotaTariffResponse createQuotaTariffResponse(QuotaTariffVO tariff) {\n         } else {\n             for (final QuotaAccountVO quotaAccount : _quotaAccountDao.listAllQuotaAccount()) {\n                 AccountVO account = _accountDao.findById(quotaAccount.getId());\n+                if (account == null) continue;\n                 QuotaSummaryResponse qr = getQuotaSummaryResponse(account);\n                 result.add(qr);\n             }\n@@ -167,7 +168,7 @@ private QuotaSummaryResponse getQuotaSummaryResponse(final Account account) {\n             qr.setObjectName(\"summary\");\n             return qr;\n         } else {\n-            throw new InvalidParameterValueException(\"Quota summary response for an account requires a valid account.\");\n+            return new QuotaSummaryResponse();\n         }\n     }\n \n@@ -398,6 +399,9 @@ public QuotaCreditsResponse addQuotaCredits(Long accountId, Long domainId, Doubl\n         QuotaCreditsVO result = _quotaCreditsDao.saveCredits(credits);\n \n         final AccountVO account = _accountDao.findById(accountId);\n+        if (account == null) {\n+            throw new InvalidParameterValueException(\"Account does not exist with account id \" + accountId);\n+        }\n         final boolean lockAccountEnforcement = \"true\".equalsIgnoreCase(QuotaConfig.QuotaEnableEnforcement.value());\n         final BigDecimal currentAccountBalance = _quotaBalanceDao.lastQuotaBalance(accountId, domainId, startOfNextDay(new Date(despositedOn.getTime())));\n         if (s_logger.isDebugEnabled()) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/e72a69a8a2f0514ece93fc9b05698aa08afa5539/plugins/database/quota/src/org/apache/cloudstack/api/response/QuotaResponseBuilderImpl.java",
                "sha": "162d2a98de46150ee6cce6e1e58d64d872ed1072",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/e72a69a8a2f0514ece93fc9b05698aa08afa5539/ui/plugins/quota/quota.js",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/ui/plugins/quota/quota.js?ref=e72a69a8a2f0514ece93fc9b05698aa08afa5539",
                "deletions": 7,
                "filename": "ui/plugins/quota/quota.js",
                "patch": "@@ -328,13 +328,6 @@\n                           });\n                       },\n                       detailView: {\n-                          viewAll: [{\n-                              path: 'quota.quotastatement',\n-                              label: 'label.quota.statement.quota'\n-                          },{\n-                              path: 'quota.balancestatement',\n-                              label: 'label.quota.statement.balance'\n-                          }],\n                           actions: {\n                              add: {\n                                 label: 'label.quota.add.credits',",
                "raw_url": "https://github.com/apache/cloudstack/raw/e72a69a8a2f0514ece93fc9b05698aa08afa5539/ui/plugins/quota/quota.js",
                "sha": "4780d716977644345a828fad76a97425089f66f9",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #1254 from shapeblue/master-9174\n\nCLOUDSTACK-9174: A deleted account results in NPEWhen an account is deleted from cloudstack for which quota is still\nbeing calculated and if the quota reaches minimum threshold then\nquota service will try to alert the user. This results in NPE and is\nfixed by excluding such accounts from alerting and other quota related\nmechanisms.\n\n* pr/1254:\n  CLOUDSTACK-9174: A deleted account results in NPE\n\nSigned-off-by: Will Stevens <williamstevens@gmail.com>",
        "parent": "https://github.com/apache/cloudstack/commit/bb48d7f0e5a50d9a480e6f66a25200353d81a6d8",
        "patched_files": [
            "QuotaAlertManagerImpl.java",
            "QuotaResponseBuilderImpl.java",
            "quota.js",
            "QuotaManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "QuotaAlertManagerImplTest.java",
            "QuotaResponseBuilderImplTest.java",
            "QuotaManagerImplTest.java"
        ]
    },
    "cloudstack_e7fa3a2": {
        "bug_id": "cloudstack_e7fa3a2",
        "commit": "https://github.com/apache/cloudstack/commit/e7fa3a29594eb748b201865dac3a85f8da024075",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/e7fa3a29594eb748b201865dac3a85f8da024075/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=e7fa3a29594eb748b201865dac3a85f8da024075",
                "deletions": 5,
                "filename": "engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -1871,7 +1871,8 @@ protected void migrate(VMInstanceVO vm, long srcHostId, DeployDestination dest)\n         try {\n             pfma = _agentMgr.send(dstHostId, pfmc);\n             if (pfma == null || !pfma.getResult()) {\n-                String msg = \"Unable to prepare for migration due to \" + pfma.getDetails();\n+                String details = (pfma != null) ? pfma.getDetails() : \"null answer returned\";\n+                String msg = \"Unable to prepare for migration due to \" + details;\n                 pfma = null;\n                 throw new AgentUnavailableException(msg, dstHostId);\n             }\n@@ -1907,7 +1908,8 @@ protected void migrate(VMInstanceVO vm, long srcHostId, DeployDestination dest)\n             try {\n                 Answer ma = _agentMgr.send(vm.getLastHostId(), mc);\n                 if (ma == null || !ma.getResult()) {\n-                    throw new CloudRuntimeException(\"Unable to migrate due to \" + ma.getDetails());\n+                    String details = (ma != null) ? ma.getDetails() : \"null answer returned\";\n+                    throw new CloudRuntimeException(\"Unable to migrate due to \" + details);\n                 }\n             } catch (OperationTimedoutException e) {\n                 if (e.isActive()) {\n@@ -3261,7 +3263,8 @@ private void orchestrateMigrateForScale(String vmUuid, long srcHostId, DeployDes\n         try {\n             pfma = _agentMgr.send(dstHostId, pfmc);\n             if (pfma == null || !pfma.getResult()) {\n-                String msg = \"Unable to prepare for migration due to \" + pfma.getDetails();\n+                String details = (pfma != null) ? pfma.getDetails() : \"null answer returned\";\n+                String msg = \"Unable to prepare for migration due to \" + details;\n                 pfma = null;\n                 throw new AgentUnavailableException(msg, dstHostId);\n             }\n@@ -3294,8 +3297,10 @@ private void orchestrateMigrateForScale(String vmUuid, long srcHostId, DeployDes\n             try {\n                 Answer ma = _agentMgr.send(vm.getLastHostId(), mc);\n                 if (ma == null || !ma.getResult()) {\n-                    s_logger.error(\"Unable to migrate due to \" + ma.getDetails());\n-                    throw new CloudRuntimeException(\"Unable to migrate due to \" + ma.getDetails());\n+                    String details = (ma != null) ? ma.getDetails() : \"null answer returned\";\n+                    String msg = \"Unable to migrate due to \" + details;\n+                    s_logger.error(msg);\n+                    throw new CloudRuntimeException(msg);\n                 }\n             } catch (OperationTimedoutException e) {\n                 if (e.isActive()) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/e7fa3a29594eb748b201865dac3a85f8da024075/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "0eafe1374450d60d59593b626ce1eb062a4a4656",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-7563: Fix potential NPE from FingBugs.",
        "parent": "https://github.com/apache/cloudstack/commit/176e0d47bb86fcc4ab0cdb33f95f73d751f2d814",
        "patched_files": [
            "VirtualMachineManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_e8ea6b1": {
        "bug_id": "cloudstack_e8ea6b1",
        "commit": "https://github.com/apache/cloudstack/commit/e8ea6b1abdb78e8f789571d562cd2d37f03f336a",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/e8ea6b1abdb78e8f789571d562cd2d37f03f336a/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/manager/VmwareStorageManagerImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/manager/VmwareStorageManagerImpl.java?ref=e8ea6b1abdb78e8f789571d562cd2d37f03f336a",
                "deletions": 0,
                "filename": "plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/manager/VmwareStorageManagerImpl.java",
                "patch": "@@ -74,6 +74,7 @@\n import com.cloud.utils.StringUtils;\n import com.cloud.utils.Ternary;\n import com.cloud.utils.script.Script;\n+import com.cloud.utils.exception.CloudRuntimeException;\n import com.cloud.vm.VirtualMachine;\n import com.cloud.vm.snapshot.VMSnapshot;\n import com.vmware.vim25.ManagedObjectReference;\n@@ -1090,6 +1091,9 @@ private String deleteSnapshotOnSecondaryStorge(long accountId, long volumeId, St\n     private String getVolumePathInDatastore(DatastoreMO dsMo, String volumeFileName) throws Exception {\n         String datastoreVolumePath = dsMo.searchFileInSubFolders(volumeFileName, true);\n         assert (datastoreVolumePath != null) : \"Virtual disk file missing from datastore.\";\n+        if (datastoreVolumePath == null) {\n+            throw new CloudRuntimeException(\"Unable to find file \" + volumeFileName + \" in datastore \" + dsMo.getName());\n+        }\n         return datastoreVolumePath;\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/e8ea6b1abdb78e8f789571d562cd2d37f03f336a/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/manager/VmwareStorageManagerImpl.java",
                "sha": "fee3e0afc711d7c83e74968d8bb5de3b8635b01f",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/e8ea6b1abdb78e8f789571d562cd2d37f03f336a/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java?ref=e8ea6b1abdb78e8f789571d562cd2d37f03f336a",
                "deletions": 1,
                "filename": "plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "patch": "@@ -3984,7 +3984,9 @@ protected Answer execute(AttachVolumeCommand cmd) {\n             DatastoreMO dsMo = new DatastoreMO(getServiceContext(), morDs);\n             String datastoreVolumePath = dsMo.searchFileInSubFolders(cmd.getVolumePath() + \".vmdk\", true);\n             assert (datastoreVolumePath != null) : \"Virtual disk file must exist in specified datastore for attach/detach operations.\";\n-\n+            if (datastoreVolumePath == null) {\n+                throw new CloudRuntimeException(\"Unable to find file \" + cmd.getVolumePath() + \".vmdk in datastore \" + dsMo.getName());\n+            }\n             AttachVolumeAnswer answer = new AttachVolumeAnswer(cmd, cmd.getDeviceId(), datastoreVolumePath);\n             if (cmd.getAttach()) {\n                 vmMo.attachDisk(new String[] { datastoreVolumePath }, morDs);",
                "raw_url": "https://github.com/apache/cloudstack/raw/e8ea6b1abdb78e8f789571d562cd2d37f03f336a/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "sha": "968e095bde1ccda33aa403f16bb86c6b7a6190ea",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/e8ea6b1abdb78e8f789571d562cd2d37f03f336a/vmware-base/src/com/cloud/hypervisor/vmware/mo/DatastoreMO.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/vmware-base/src/com/cloud/hypervisor/vmware/mo/DatastoreMO.java?ref=e8ea6b1abdb78e8f789571d562cd2d37f03f336a",
                "deletions": 1,
                "filename": "vmware-base/src/com/cloud/hypervisor/vmware/mo/DatastoreMO.java",
                "patch": "@@ -335,7 +335,7 @@ public String searchFileInSubFolders(String fileName, boolean caseInsensitive) t\n \n         HostDatastoreBrowserMO browserMo = getHostDatastoreBrowserMO();\n         ArrayList<HostDatastoreBrowserSearchResults> results = browserMo.searchDatastoreSubFolders(\"[\" + getName() + \"]\", fileName, caseInsensitive);\n-        if (results.size() > 1) {\n+        if (results != null && results.size() > 1) {\n             s_logger.warn(\"Multiple files with name \" + fileName + \" exists in datastore \" + datastorePath + \". Trying to choose first file found in search attempt.\");\n         }\n         for (HostDatastoreBrowserSearchResults result : results) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/e8ea6b1abdb78e8f789571d562cd2d37f03f336a/vmware-base/src/com/cloud/hypervisor/vmware/mo/DatastoreMO.java",
                "sha": "a1f2506ca1f3ac9f786267286781a5ecdeea91d9",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-3260\nFixing NPE.",
        "parent": "https://github.com/apache/cloudstack/commit/15a6844784142141af22224489a57d7d748c6687",
        "patched_files": [
            "VmwareResource.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VmwareResourceTest.java"
        ]
    },
    "cloudstack_f02e402": {
        "bug_id": "cloudstack_f02e402",
        "commit": "https://github.com/apache/cloudstack/commit/f02e402ebb86d9ab5b6f34c04e57460ed53b7827",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/cloudstack/blob/f02e402ebb86d9ab5b6f34c04e57460ed53b7827/core/src/com/cloud/resource/RequestWrapper.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/core/src/com/cloud/resource/RequestWrapper.java?ref=f02e402ebb86d9ab5b6f34c04e57460ed53b7827",
                "deletions": 8,
                "filename": "core/src/com/cloud/resource/RequestWrapper.java",
                "patch": "@@ -29,6 +29,15 @@\n import com.cloud.agent.api.Command;\n \n public abstract class RequestWrapper {\n+    static public class CommandNotSupported extends NullPointerException {\n+        public CommandNotSupported(String msg) {\n+            super(msg);\n+        }\n+        public CommandNotSupported(String msg, Throwable cause) {\n+            super(msg);\n+            initCause(cause);\n+        }\n+    }\n \n     private static final Logger s_logger = Logger.getLogger(RequestWrapper.class);\n \n@@ -52,7 +61,7 @@\n \n                 keepResourceClass = keepResourceClass2;\n             } catch (final ClassCastException e) {\n-                throw new NullPointerException(\"No key found for '\" + command.getClass() + \"' in the Map!\");\n+                throw new CommandNotSupported(\"No key found for '\" + command.getClass() + \"' in the Map!\");\n             }\n         }\n         return resource;\n@@ -69,14 +78,14 @@\n                 final Class<? extends Command> commandClass2 = (Class<? extends Command>) keepCommandClass.getSuperclass();\n \n                 if (commandClass2 == null) {\n-                    throw new NullPointerException(\"All the COMMAND hierarchy tree has been visited but no compliant key has been found for '\" + commandClass + \"'.\");\n+                    throw new CommandNotSupported(\"All the COMMAND hierarchy tree has been visited but no compliant key has been found for '\" + commandClass + \"'.\");\n                 }\n \n                 commandWrapper = resourceCommands.get(commandClass2);\n \n                 keepCommandClass = commandClass2;\n             } catch (final ClassCastException e) {\n-                throw new NullPointerException(\"No key found for '\" + keepCommandClass.getClass() + \"' in the Map!\");\n+                throw new CommandNotSupported(\"No key found for '\" + keepCommandClass.getClass() + \"' in the Map!\");\n             } catch (final NullPointerException e) {\n                 // Will now traverse all the resource hierarchy. Returning null\n                 // is not a problem.\n@@ -102,18 +111,16 @@\n                 final Class<? extends ServerResource> resourceClass2 = (Class<? extends ServerResource>) keepResourceClass.getSuperclass();\n \n                 if (resourceClass2 == null) {\n-                    throw new NullPointerException(\"All the SERVER-RESOURCE hierarchy tree has been visited but no compliant key has been found for '\" + command.getClass() + \"'.\");\n+                    throw new CommandNotSupported(\"All the SERVER-RESOURCE hierarchy tree has been visited but no compliant key has been found for '\" + command.getClass() + \"'.\");\n                 }\n \n                 final Hashtable<Class<? extends Command>, CommandWrapper> resourceCommands2 = retrieveResource(command,\n                         (Class<? extends ServerResource>) keepResourceClass.getSuperclass());\n                 keepResourceClass = resourceClass2;\n \n                 commandWrapper = retrieveCommands(command.getClass(), resourceCommands2);\n-            } catch (final ClassCastException e) {\n-                throw new NullPointerException(\"No key found for '\" + command.getClass() + \"' in the Map!\");\n-            } catch (final NullPointerException e) {\n-                throw e;\n+            } catch (final ClassCastException | NullPointerException e) {\n+                throw new CommandNotSupported(\"No key found for '\" + command.getClass() + \"' in the Map!\", e);\n             }\n         }\n         return commandWrapper;",
                "raw_url": "https://github.com/apache/cloudstack/raw/f02e402ebb86d9ab5b6f34c04e57460ed53b7827/core/src/com/cloud/resource/RequestWrapper.java",
                "sha": "d1a3c1f18cc11c338cb3cace3063bba0e45e92b4",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/f02e402ebb86d9ab5b6f34c04e57460ed53b7827/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java?ref=f02e402ebb86d9ab5b6f34c04e57460ed53b7827",
                "deletions": 1,
                "filename": "plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "patch": "@@ -47,6 +47,7 @@\n import javax.xml.parsers.DocumentBuilderFactory;\n import javax.xml.parsers.ParserConfigurationException;\n \n+import com.cloud.resource.RequestWrapper;\n import org.apache.cloudstack.storage.to.PrimaryDataStoreTO;\n import org.apache.cloudstack.storage.to.VolumeObjectTO;\n import org.apache.cloudstack.utils.hypervisor.HypervisorUtils;\n@@ -1432,13 +1433,21 @@ public boolean stop() {\n         return true;\n     }\n \n+    /**\n+     * This finds a command wrapper to handle the command and executes it.\n+     * If no wrapper is found an {@see UnsupportedAnswer} is sent back.\n+     * Any other exceptions are to be caught and wrapped in an generic {@see Answer}, marked as failed.\n+     *\n+     * @param cmd the instance of a {@see Command} to execute.\n+     * @return the for the {@see Command} appropriate {@see Answer} or {@see UnsupportedAnswer}\n+     */\n     @Override\n     public Answer executeRequest(final Command cmd) {\n \n         final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n         try {\n             return wrapper.execute(cmd, this);\n-        } catch (final Exception e) {\n+        } catch (final RequestWrapper.CommandNotSupported cmde) {\n             return Answer.createUnsupportedCommandAnswer(cmd);\n         }\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/f02e402ebb86d9ab5b6f34c04e57460ed53b7827/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "sha": "8a94b05865585ce13b271e42d45cd29782cec699",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/f02e402ebb86d9ab5b6f34c04e57460ed53b7827/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtRequestWrapper.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtRequestWrapper.java?ref=f02e402ebb86d9ab5b6f34c04e57460ed53b7827",
                "deletions": 0,
                "filename": "plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtRequestWrapper.java",
                "patch": "@@ -72,6 +72,9 @@ public Answer execute(final Command command, final ServerResource serverResource\n             commandWrapper = retryWhenAllFails(command, resourceClass, resourceCommands);\n         }\n \n+        if (commandWrapper == null) {\n+            throw new CommandNotSupported(\"No way to handle \" + command.getClass());\n+        }\n         return commandWrapper.execute(command, serverResource);\n     }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/f02e402ebb86d9ab5b6f34c04e57460ed53b7827/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtRequestWrapper.java",
                "sha": "436a13083168fe9a1e0c82ac3e8a3ed29484b4ea",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/cloudstack/blob/f02e402ebb86d9ab5b6f34c04e57460ed53b7827/plugins/hypervisors/kvm/test/com/cloud/hypervisor/kvm/resource/LibvirtComputingResourceTest.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/kvm/test/com/cloud/hypervisor/kvm/resource/LibvirtComputingResourceTest.java?ref=f02e402ebb86d9ab5b6f34c04e57460ed53b7827",
                "deletions": 0,
                "filename": "plugins/hypervisors/kvm/test/com/cloud/hypervisor/kvm/resource/LibvirtComputingResourceTest.java",
                "patch": "@@ -38,6 +38,8 @@\n import javax.xml.xpath.XPathExpressionException;\n import javax.xml.xpath.XPathFactory;\n \n+import com.cloud.agent.api.Command;\n+import com.cloud.agent.api.UnsupportedAnswer;\n import com.cloud.hypervisor.kvm.resource.LibvirtVMDef.CpuTuneDef;\n import org.apache.commons.lang.SystemUtils;\n import org.joda.time.Duration;\n@@ -5191,4 +5193,29 @@ public void testSetQuotaAndPeriodMinQuota() {\n         Assert.assertEquals(CpuTuneDef.MIN_QUOTA, cpuTuneDef.getQuota());\n         Assert.assertEquals((int) (CpuTuneDef.MIN_QUOTA / pct), cpuTuneDef.getPeriod());\n     }\n+\n+    @Test\n+    public void testUnknownCommand() {\n+        libvirtComputingResource = new LibvirtComputingResource();\n+        Command cmd = new Command() {\n+            @Override public boolean executeInSequence() {\n+                return false;\n+            }\n+        };\n+        Answer ans = libvirtComputingResource.executeRequest(cmd);\n+        assertTrue(ans instanceof UnsupportedAnswer);\n+    }\n+\n+    @Test\n+    public void testKnownCommand() {\n+        libvirtComputingResource = new LibvirtComputingResource();\n+        Command cmd = new PingTestCommand() {\n+            @Override public boolean executeInSequence() {\n+                throw new NullPointerException(\"test succeeded\");\n+            }\n+        };\n+        Answer ans = libvirtComputingResource.executeRequest(cmd);\n+        assertFalse(ans instanceof UnsupportedAnswer);\n+        assertTrue(ans instanceof Answer);\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/f02e402ebb86d9ab5b6f34c04e57460ed53b7827/plugins/hypervisors/kvm/test/com/cloud/hypervisor/kvm/resource/LibvirtComputingResourceTest.java",
                "sha": "be191f5e9a53a37b3d22295ad27a7d09aeaba2f8",
                "status": "modified"
            }
        ],
        "message": "kvm: send unsupported answer only when applicable (#2714)\n\nThrow specific NPE child when command is known not to be known. Add unit tests.",
        "parent": "https://github.com/apache/cloudstack/commit/d4e302dcc67ca740242f09ef43ca97a72696c204",
        "patched_files": [
            "LibvirtRequestWrapper.java",
            "RequestWrapper.java",
            "LibvirtComputingResource.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "LibvirtComputingResourceTest.java"
        ]
    },
    "cloudstack_f2951d9": {
        "bug_id": "cloudstack_f2951d9",
        "commit": "https://github.com/apache/cloudstack/commit/f2951d9560cadd3e5420f206ca69e309abd4b8fd",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/f2951d9560cadd3e5420f206ca69e309abd4b8fd/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=f2951d9560cadd3e5420f206ca69e309abd4b8fd",
                "deletions": 4,
                "filename": "engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -744,14 +744,17 @@ protected boolean checkWorkItems(final VMInstanceVO vm, final State state) throw\n \n     protected <T extends VMInstanceVO> boolean changeState(final T vm, final Event event, final Long hostId, final ItWorkVO work, final Step step) throws NoTransitionException {\n         // FIXME: We should do this better.\n-        final Step previousStep = work.getStep();\n-        _workDao.updateStep(work, step);\n+        Step previousStep = null;\n+        if (work != null) {\n+            previousStep = work.getStep();\n+            _workDao.updateStep(work, step);\n+        }\n         boolean result = false;\n         try {\n             result = stateTransitTo(vm, event, hostId);\n             return result;\n         } finally {\n-            if (!result) {\n+            if (!result && work != null) {\n                 _workDao.updateStep(work, previousStep);\n             }\n         }\n@@ -1507,12 +1510,13 @@ private void advanceStop(final VMInstanceVO vm, final boolean cleanUpEvenIfUnabl\n             if (doCleanup) {\n                 if (cleanup(vmGuru, new VirtualMachineProfileImpl(vm), work, Event.StopRequested, cleanUpEvenIfUnableToStop)) {\n                     try {\n-                        if (s_logger.isDebugEnabled()) {\n+                        if (s_logger.isDebugEnabled() && work != null) {\n                             s_logger.debug(\"Updating work item to Done, id:\" + work.getId());\n                         }\n                         if (!changeState(vm, Event.AgentReportStopped, null, work, Step.Done)) {\n                             throw new CloudRuntimeException(\"Unable to stop \" + vm);\n                         }\n+\n                     } catch (final NoTransitionException e) {\n                         s_logger.warn(\"Unable to cleanup \" + vm);\n                         throw new CloudRuntimeException(\"Unable to stop \" + vm, e);",
                "raw_url": "https://github.com/apache/cloudstack/raw/f2951d9560cadd3e5420f206ca69e309abd4b8fd/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "03a37987752f51590c78c40fa7a65f5052aa7fa1",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #1956 from myENA/bug/49npe_vmimpl\n\nCLOUDSTACK-9796 - Fix NPE in VirtualMachineManagerImpl.java",
        "parent": "https://github.com/apache/cloudstack/commit/5fcf648e7e6ed352a5d95d6c81db2c95ff824c5e",
        "patched_files": [
            "VirtualMachineManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_f40e31e": {
        "bug_id": "cloudstack_f40e31e",
        "commit": "https://github.com/apache/cloudstack/commit/f40e31e061a6e10c67fc3c4db997138e071f9fa2",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/f40e31e061a6e10c67fc3c4db997138e071f9fa2/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=f40e31e061a6e10c67fc3c4db997138e071f9fa2",
                "deletions": 1,
                "filename": "engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -1254,7 +1254,8 @@ protected boolean sendStop(VirtualMachineGuru guru, VirtualMachineProfile profil\n                     _resourceMgr.updateGPUDetails(vm.getHostId(), gpuDevice.getGroupDetails());\n                 }\n                 if (answer == null || !answer.getResult()) {\n-                    s_logger.debug(\"Unable to stop VM due to \" + answer.getDetails());\n+                    String details = (answer != null) ? answer.getDetails() : \"null answer returned\";\n+                    s_logger.debug(\"Unable to stop VM due to \" + details);\n                     return false;\n                 }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/f40e31e061a6e10c67fc3c4db997138e071f9fa2/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "d772848779bcca53dad2eaf1413d591c24eab122",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-7563: Fix potential NPE in checking answer\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n(cherry picked from commit d42e3df9cf43b0ad46d406c6ab5b1d8c811d0239)\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/0407fb334f3a79f570217f35636b47076b06d500",
        "patched_files": [
            "VirtualMachineManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_f47cfc6": {
        "bug_id": "cloudstack_f47cfc6",
        "commit": "https://github.com/apache/cloudstack/commit/f47cfc6eb16bf0fa5830327207a2d3fdf24ab700",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/f47cfc6eb16bf0fa5830327207a2d3fdf24ab700/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java?ref=f47cfc6eb16bf0fa5830327207a2d3fdf24ab700",
                "deletions": 14,
                "filename": "engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "patch": "@@ -925,7 +925,7 @@ protected NicTO toNicTO(NicVO nic, NicProfile profile, NetworkVO config) {\n \n     boolean isNetworkImplemented(NetworkVO network) {\n         Network.State state = network.getState();\n-        if (state == Network.State.Implemented) {\n+        if (state == Network.State.Implemented || state == Network.State.Implementing) {\n             return true;\n         } else if (state == Network.State.Setup) {\n             DataCenterVO zone = _dcDao.findById(network.getDataCenterId());\n@@ -1277,19 +1277,7 @@ public int compare(NicVO nic1, NicVO nic2) {\n         });\n \n         for (NicVO nic : nics) {\n-            Pair<NetworkGuru, NetworkVO> implemented = null;\n-            if (vmProfile.getVirtualMachine().getType() != Type.DomainRouter) {\n-                implemented = implementNetwork(nic.getNetworkId(), dest, context);\n-            } else {\n-                // At the time of implementing network (using implementNetwork() method), if the VR needs to be deployed then\n-                // it follows the same path of regular VM deployment. This leads to a nested call to implementNetwork() while\n-                // preparing VR nics. This flow creates issues in dealing with network state transitions. The original call\n-                // puts network in \"Implementing\" state and then the nested call again tries to put it into same state resulting\n-                // in issues. In order to avoid it, implementNetwork() call for VR is replaced with below code.\n-                NetworkVO network = _networksDao.findById(nic.getNetworkId());\n-                NetworkGuru guru = AdapterBase.getAdapterByName(networkGurus, network.getGuruName());\n-                implemented = new Pair<NetworkGuru, NetworkVO>(guru, network);\n-            }\n+            Pair<NetworkGuru, NetworkVO> implemented = implementNetwork(nic.getNetworkId(), dest, context);\n             if (implemented == null || implemented.first() == null) {\n                 s_logger.warn(\"Failed to implement network id=\" + nic.getNetworkId() + \" as a part of preparing nic id=\" + nic.getId());\n                 throw new CloudRuntimeException(\"Failed to implement network id=\" + nic.getNetworkId() + \" as a part preparing nic id=\" + nic.getId());",
                "raw_url": "https://github.com/apache/cloudstack/raw/f47cfc6eb16bf0fa5830327207a2d3fdf24ab700/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "sha": "64a1f3a49946cfdff4f8d23003a5e94ba7a12980",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-7186: Revert \"CLOUDSTACK-7182: NPE while trying to deploy VMs in parallel in isolated network\"\n\nThis reverts commit 47d6a64b319ab064c4b855346f2bfdb250fb9ad8, which broke VPC\ncompletely.",
        "parent": "https://github.com/apache/cloudstack/commit/45c9f03e14ec956a6ccb952b6d98189adcb3c8ae",
        "patched_files": [
            "NetworkOrchestrator.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "NetworkOrchestratorTest.java"
        ]
    },
    "cloudstack_f60f3ce": {
        "bug_id": "cloudstack_f60f3ce",
        "commit": "https://github.com/apache/cloudstack/commit/f60f3cec34d0f2471d08cf07b936f7511b5e7eec",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/f60f3cec34d0f2471d08cf07b936f7511b5e7eec/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=f60f3cec34d0f2471d08cf07b936f7511b5e7eec",
                "deletions": 1,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -501,7 +501,7 @@ public SnapshotResponse createSnapshotResponse(Snapshot snapshot) {\n                 snapshotResponse.setZoneId(zone.getUuid());\n             }\n \n-            if (volume.getVolumeType() == Volume.Type.ROOT) {\n+            if (volume.getVolumeType() == Volume.Type.ROOT && volume.getInstanceId() != null) {\n                 //TODO combine lines and 489 into a join in the volume dao\n                 VMInstanceVO instance = ApiDBUtils.findVMInstanceById(volume.getInstanceId());\n                 if (instance != null) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/f60f3cec34d0f2471d08cf07b936f7511b5e7eec/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "c10e2598386255191f9f4fc091cec31a215ae358",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/f60f3cec34d0f2471d08cf07b936f7511b5e7eec/systemvm/debian/opt/cloud/bin/cloud-nic.sh",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/systemvm/debian/opt/cloud/bin/cloud-nic.sh?ref=f60f3cec34d0f2471d08cf07b936f7511b5e7eec",
                "deletions": 1,
                "filename": "systemvm/debian/opt/cloud/bin/cloud-nic.sh",
                "patch": "@@ -69,7 +69,7 @@ unplug_nic() {\n \n action=$1\n dev=$2\n-tableNo=${dev:3}\n+tableNo=$((100+${dev:3}))\n tableName=\"Table_$dev\"\n \n if [ $action == 'add' ]",
                "raw_url": "https://github.com/apache/cloudstack/raw/f60f3cec34d0f2471d08cf07b936f7511b5e7eec/systemvm/debian/opt/cloud/bin/cloud-nic.sh",
                "sha": "7d8bda83d2962f542b87ca7b1b77de5ccb8a213d",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/f60f3cec34d0f2471d08cf07b936f7511b5e7eec/systemvm/debian/opt/cloud/bin/cs/CsNetfilter.py",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/systemvm/debian/opt/cloud/bin/cs/CsNetfilter.py?ref=f60f3cec34d0f2471d08cf07b936f7511b5e7eec",
                "deletions": 1,
                "filename": "systemvm/debian/opt/cloud/bin/cs/CsNetfilter.py",
                "patch": "@@ -189,7 +189,8 @@ def compare(self, list):\n     def add_chain(self, rule):\n         \"\"\" Add the given chain if it is not already present \"\"\"\n         if not self.has_chain(rule.get_table(), rule.get_chain()):\n-            CsHelper.execute(\"iptables -t %s -N %s\" % (rule.get_table(), rule.get_chain()))\n+            if rule.get_chain():\n+                CsHelper.execute(\"iptables -t %s -N %s\" % (rule.get_table(), rule.get_chain()))\n             self.chain.add(rule.get_table(), rule.get_chain())\n \n     def del_standard(self):",
                "raw_url": "https://github.com/apache/cloudstack/raw/f60f3cec34d0f2471d08cf07b936f7511b5e7eec/systemvm/debian/opt/cloud/bin/cs/CsNetfilter.py",
                "sha": "01dfa7cac39917f8dceb6630105b56ab93c8672a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/f60f3cec34d0f2471d08cf07b936f7511b5e7eec/systemvm/debian/opt/cloud/bin/cs/CsRoute.py",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/systemvm/debian/opt/cloud/bin/cs/CsRoute.py?ref=f60f3cec34d0f2471d08cf07b936f7511b5e7eec",
                "deletions": 1,
                "filename": "systemvm/debian/opt/cloud/bin/cs/CsRoute.py",
                "patch": "@@ -30,7 +30,7 @@ def get_tablename(self, name):\n         return self.table_prefix + name\n \n     def add_table(self, devicename):\n-        tablenumber = devicename[3:]\n+        tablenumber = 100 + int(devicename[3:])\n         tablename = self.get_tablename(devicename)\n         str = \"%s %s\" % (tablenumber, tablename)\n         filename = \"/etc/iproute2/rt_tables\"",
                "raw_url": "https://github.com/apache/cloudstack/raw/f60f3cec34d0f2471d08cf07b936f7511b5e7eec/systemvm/debian/opt/cloud/bin/cs/CsRoute.py",
                "sha": "47d3d2a91af532679c009db744e5520b94bea226",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/f60f3cec34d0f2471d08cf07b936f7511b5e7eec/systemvm/debian/opt/cloud/bin/cs/CsRule.py",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/systemvm/debian/opt/cloud/bin/cs/CsRule.py?ref=f60f3cec34d0f2471d08cf07b936f7511b5e7eec",
                "deletions": 1,
                "filename": "systemvm/debian/opt/cloud/bin/cs/CsRule.py",
                "patch": "@@ -27,7 +27,7 @@ class CsRule:\n \n     def __init__(self, dev):\n         self.dev = dev\n-        self.tableNo = int(dev[3:])\n+        self.tableNo = 100 + int(dev[3:])\n         self.table = \"Table_%s\" % (dev)\n \n     def addRule(self, rule):",
                "raw_url": "https://github.com/apache/cloudstack/raw/f60f3cec34d0f2471d08cf07b936f7511b5e7eec/systemvm/debian/opt/cloud/bin/cs/CsRule.py",
                "sha": "f1caa298904902e193d1a96225bbd99fd1e942e5",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/f60f3cec34d0f2471d08cf07b936f7511b5e7eec/systemvm/debian/opt/cloud/bin/ipassoc.sh",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/systemvm/debian/opt/cloud/bin/ipassoc.sh?ref=f60f3cec34d0f2471d08cf07b936f7511b5e7eec",
                "deletions": 2,
                "filename": "systemvm/debian/opt/cloud/bin/ipassoc.sh",
                "patch": "@@ -103,7 +103,7 @@ remove_routing() {\n   logger -t cloud \"$(basename $0):Remove routing $pubIp on interface $ethDev\"\n   local ipNoMask=$(echo $pubIp | awk -F'/' '{print $1}')\n   local mask=$(echo $pubIp | awk -F'/' '{print $2}')\n-  local tableNo=$(echo $ethDev | awk -F'eth' '{print $2}')\n+  local tableNo=$((100+$(echo $ethDev | awk -F'eth' '{print $2}')))\n \n   local tableName=\"Table_$ethDev\"\n   local remainip=`ip addr show $ethDev | grep \"inet \"`\n@@ -149,7 +149,7 @@ add_routing() {\n \n   local tableName=\"Table_$ethDev\"\n   local tablePresent=$(grep $tableName /etc/iproute2/rt_tables)\n-  local tableNo=$(echo $ethDev | awk -F'eth' '{print $2}')\n+  local tableNo=$((100+$(echo $ethDev | awk -F'eth' '{print $2}')))\n   if [ \"$tablePresent\" == \"\" ]\n   then\n      if [ \"$tableNo\" == \"\" ]",
                "raw_url": "https://github.com/apache/cloudstack/raw/f60f3cec34d0f2471d08cf07b936f7511b5e7eec/systemvm/debian/opt/cloud/bin/ipassoc.sh",
                "sha": "9bcb13279d76e9b57bc69d172ad50ae4553a3550",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cloudstack/blob/f60f3cec34d0f2471d08cf07b936f7511b5e7eec/systemvm/debian/opt/cloud/bin/update_config.py",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/systemvm/debian/opt/cloud/bin/update_config.py?ref=f60f3cec34d0f2471d08cf07b936f7511b5e7eec",
                "deletions": 9,
                "filename": "systemvm/debian/opt/cloud/bin/update_config.py",
                "patch": "@@ -30,7 +30,7 @@\n \n # first commandline argument should be the file to process\n if (len(sys.argv) != 2):\n-    print \"[ERROR]: Invalid usage\"\n+    logging.error(\"Invalid usage, args passed: %s\" % sys.argv)\n     sys.exit(1)\n \n # FIXME we should get this location from a configuration class\n@@ -47,7 +47,7 @@ def finish_config():\n \n \n def process_file():\n-    print \"[INFO] Processing JSON file %s\" % sys.argv[1]\n+    logging.info(\"Processing JSON file %s\" % sys.argv[1])\n     qf = QueueFile()\n     qf.setFile(sys.argv[1])\n     qf.load(None)\n@@ -70,7 +70,7 @@ def is_guestnet_configured(guestnet_dict, keys):\n         '''\n         It seems all the interfaces have been removed. Let's allow a new configuration to come in.\n         '''\n-        print \"[WARN] update_config.py :: Reconfiguring guest network...\"\n+        logging.warn(\"update_config.py :: Reconfiguring guest network...\")\n         return False\n \n     file = open(jsonConfigFile)\n@@ -80,7 +80,7 @@ def is_guestnet_configured(guestnet_dict, keys):\n         '''\n         Guest network has to be removed.\n         '''\n-        print \"[INFO] update_config.py :: Removing guest network...\"\n+        logging.info(\"update_config.py :: Removing guest network...\")\n         return False\n \n     '''\n@@ -121,7 +121,10 @@ def is_guestnet_configured(guestnet_dict, keys):\n     qf.load(None)\n \n if not (os.path.isfile(jsonConfigFile) and os.access(jsonConfigFile, os.R_OK)):\n-    print \"[ERROR] update_config.py :: Unable to read and access %s to process it\" % jsonConfigFile\n+    # Ignore if file is already processed\n+    if os.path.isfile(jsonPath % (\"processed/\" + jsonFilename + \".gz\")):\n+        sys.exit(0)\n+    logging.error(\"update_config.py :: Unable to read and access %s to process it\" % jsonConfigFile)\n     sys.exit(1)\n \n # If the guest network is already configured and have the same IP, do not try to configure it again otherwise it will break\n@@ -131,14 +134,14 @@ def is_guestnet_configured(guestnet_dict, keys):\n         guestnet_dict = json.load(file)\n \n         if not is_guestnet_configured(guestnet_dict, ['eth1', 'eth2', 'eth3', 'eth4', 'eth5', 'eth6', 'eth7', 'eth8', 'eth9']):\n-            print \"[INFO] update_config.py :: Processing Guest Network.\"\n+            logging.info(\"update_config.py :: Processing Guest Network.\")\n             process_file()\n         else:\n-            print \"[INFO] update_config.py :: No need to process Guest Network.\"\n+            logging.info(\"update_config.py :: No need to process Guest Network.\")\n             finish_config()\n     else:\n-        print \"[INFO] update_config.py :: No GuestNetwork configured yet. Configuring first one now.\"\n+        logging.info(\"update_config.py :: No GuestNetwork configured yet. Configuring first one now.\")\n         process_file()\n else:\n-    print \"[INFO] update_config.py :: Processing incoming file => %s\" % sys.argv[1]\n+    logging.info(\"update_config.py :: Processing incoming file => %s\" % sys.argv[1])\n     process_file()",
                "raw_url": "https://github.com/apache/cloudstack/raw/f60f3cec34d0f2471d08cf07b936f7511b5e7eec/systemvm/debian/opt/cloud/bin/update_config.py",
                "sha": "02161b662e52688cd31c6ff104c81b22b27beb1c",
                "status": "modified"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/cloudstack/blob/f60f3cec34d0f2471d08cf07b936f7511b5e7eec/test/integration/smoke/test_deploy_virtio_scsi_vm.py",
                "changes": 78,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/test/integration/smoke/test_deploy_virtio_scsi_vm.py?ref=f60f3cec34d0f2471d08cf07b936f7511b5e7eec",
                "deletions": 43,
                "filename": "test/integration/smoke/test_deploy_virtio_scsi_vm.py",
                "patch": "@@ -25,35 +25,30 @@\n # base - contains all resources as entities and defines create, delete,\n # list operations on them\n from marvin.lib.base import (Account,\n-                            VirtualMachine,\n-                            ServiceOffering,\n-                            NetworkOffering,\n-                            Network,\n-                            Template,\n-                            DiskOffering,\n-                            StoragePool,\n-                            Volume,\n-                            Host,\n-                            GuestOs)\n-\n-\n+                             VirtualMachine,\n+                             ServiceOffering,\n+                             Template,\n+                             DiskOffering,\n+                             Volume,\n+                             Host,\n+                             GuestOs)\n \n # utils - utility classes for common cleanup, external library wrappers etc\n from marvin.lib.utils import cleanup_resources, get_hypervisor_type, validateList\n \n # common - commonly used methods for all tests are listed here\n-from marvin.lib.common import get_zone, get_domain, get_template, list_hosts, get_pod\n+from marvin.lib.common import get_zone, get_domain, get_pod\n \n from marvin.sshClient import SshClient\n \n-from marvin.codes import FAILED, PASS\n+from marvin.codes import FAILED\n \n from nose.plugins.attrib import attr\n \n import xml.etree.ElementTree as ET\n-import code\n import logging\n \n+\n class Templates:\n     \"\"\"Test data for templates\n     \"\"\"\n@@ -75,11 +70,12 @@ def __init__(self):\n             }\n         }\n \n-class TestDeployVirtioSCSIVM(cloudstackTestCase):\n \n+class TestDeployVirtioSCSIVM(cloudstackTestCase):\n     \"\"\"\n     Test deploy a kvm virtio scsi template\n     \"\"\"\n+\n     @classmethod\n     def setUpClass(cls):\n         cls.logger = logging.getLogger('TestDeployVirtioSCSIVM')\n@@ -100,7 +96,6 @@ def setUpClass(cls):\n         cls.zone = get_zone(cls.apiclient, testClient.getZoneForTests())\n         cls.pod = get_pod(cls.apiclient, cls.zone.id)\n         cls.services['mode'] = cls.zone.networktype\n-        cls._cleanup = []\n         if cls.hypervisor.lower() not in ['kvm']:\n             cls.hypervisorNotSupported = True\n             return\n@@ -153,41 +148,38 @@ def setUpClass(cls):\n \n         cls.vmhost = hosts[0]\n \n-\n+        # Stop VM to reset password\n+        cls.virtual_machine.stop(cls.apiclient)\n \n         password = cls.virtual_machine.resetPassword(cls.apiclient)\n         cls.virtual_machine.username = \"ubuntu\"\n         cls.virtual_machine.password = password\n-        cls._cleanup = [\n+\n+        # Start VM after password reset\n+        cls.virtual_machine.start(cls.apiclient)\n+\n+        cls.cleanup = [\n             cls.template,\n             cls.service_offering,\n             cls.sparse_disk_offering,\n             cls.account\n         ]\n \n-\n     @classmethod\n     def tearDownClass(cls):\n         try:\n+            cls.apiclient = super(\n+                TestDeployVirtioSCSIVM,\n+                cls\n+            ).getClsTestClient().getApiClient()\n             # Cleanup resources used\n-            cleanup_resources(cls.apiclient, cls._cleanup)\n+            cleanup_resources(cls.apiclient, cls.cleanup)\n         except Exception as e:\n             raise Exception(\"Warning: Exception during cleanup : %s\" % e)\n-        return\n \n     def setUp(self):\n         self.apiclient = self.testClient.getApiClient()\n         self.dbclient = self.testClient.getDbConnection()\n-        self.cleanup = []\n-        return\n-\n-    def tearDown(self):\n-        try:\n-            # Clean up, terminate the created instance, volumes and snapshots\n-            cleanup_resources(self.apiclient, self.cleanup)\n-        except Exception as e:\n-            raise Exception(\"Warning: Exception during cleanup : %s\" % e)\n-        return\n \n     def verifyVirshState(self, diskcount):\n         host = self.vmhost.ipaddress\n@@ -212,14 +204,14 @@ def verifyVirshState(self, diskcount):\n             for child in disk:\n                 if child.tag.lower() == \"target\":\n                     dev = child.get(\"dev\")\n-                    self.assert_(dev != None and dev.startswith(\"sd\"), \"disk dev is invalid\")\n+                    self.assert_(dev is not None and dev.startswith(\"sd\"), \"disk dev is invalid\")\n                 elif child.tag.lower() == \"address\":\n                     con = child.get(\"controller\")\n                     self.assertEqual(con, scsiindex, \"disk controller not equal to SCSI \" \\\n-                                     \"controller index\")\n+                                                     \"controller index\")\n                 elif child.tag.lower() == \"driver\":\n                     discard = child.get(\"discard\")\n-                    if discard: # may not be defined by older qemu/libvirt\n+                    if discard:  # may not be defined by older qemu/libvirt\n                         self.assertEqual(discard, \"unmap\", \"discard settings not unmap\")\n \n     def verifyGuestState(self, diskcount):\n@@ -234,21 +226,21 @@ def verifyGuestState(self, diskcount):\n                          \"Could not find appropriate number of scsi disks in guest\")\n \n     def getVirshXML(self, host, instancename):\n-        if host == None:\n+        if host is None:\n             self.logger.debug(\"getVirshXML: host is none\")\n             return \"\"\n         else:\n             self.logger.debug(\"host is: \" + host)\n-        if instancename == None:\n+        if instancename is None:\n             self.logger.debug(\"getVirshXML: instancename is none\")\n             return \"\"\n         else:\n             self.logger.debug(\"instancename is: \" + instancename)\n         sshc = SshClient(\n-                host=host,\n-                port=self.services['configurableData']['host'][\"publicport\"],\n-                user=self.hostConfig['username'],\n-                passwd=self.hostConfig['password'])\n+            host=host,\n+            port=self.services['configurableData']['host'][\"publicport\"],\n+            user=self.hostConfig['username'],\n+            passwd=self.hostConfig['password'])\n \n         ssh = sshc.ssh\n \n@@ -354,9 +346,8 @@ def test_05_change_vm_ostype_restart(self):\n         self.assertIsNotNone(ostypeid,\n                              \"Could not find ostypeid for Ubuntu 16.0.4 (64-bit) mapped to kvm\")\n \n-\n         self.virtual_machine.update(self.apiclient, ostypeid=ostypeid,\n-                                    details=[{\"rootDiskController\":\"scsi\"}])\n+                                    details=[{\"rootDiskController\": \"scsi\"}])\n \n         self.virtual_machine.start(self.apiclient)\n \n@@ -371,6 +362,7 @@ def test_06_verify_guest_lspci_again(self):\n \n         self.verifyGuestState(3)\n \n+\n class CommandNonzeroException(Exception):\n     def __init__(self, code, stderr):\n         self.code = code",
                "raw_url": "https://github.com/apache/cloudstack/raw/f60f3cec34d0f2471d08cf07b936f7511b5e7eec/test/integration/smoke/test_deploy_virtio_scsi_vm.py",
                "sha": "df54c4307a9cb7756474564c91c9cdc6f9cd1f59",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/f60f3cec34d0f2471d08cf07b936f7511b5e7eec/test/integration/smoke/test_vm_life_cycle.py",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/test/integration/smoke/test_vm_life_cycle.py?ref=f60f3cec34d0f2471d08cf07b936f7511b5e7eec",
                "deletions": 1,
                "filename": "test/integration/smoke/test_vm_life_cycle.py",
                "patch": "@@ -918,7 +918,7 @@ def secure_all_hosts(self):\n             cmd = provisionCertificate.provisionCertificateCmd()\n             cmd.hostid = host.id\n             cmd.reconnect = True\n-            self.apiclient.updateConfiguration(cmd)\n+            self.apiclient.provisionCertificate(cmd)\n \n         for host in self.hosts:\n             self.check_connection(secured='true', host=host)",
                "raw_url": "https://github.com/apache/cloudstack/raw/f60f3cec34d0f2471d08cf07b936f7511b5e7eec/test/integration/smoke/test_vm_life_cycle.py",
                "sha": "5906a94869ccb9abb78de17edf29f24c6850f749",
                "status": "modified"
            }
        ],
        "message": "router: Fixes #2789 fix proper mark based packet routing across interfaces (#2791)\n\nPreviously, the ethernet device index was used as rt_table index and\r\npacket marking id/integer. With eth0 that is sometimes used as link-local\r\ninterface, the rt_table index `0` would fail as `0` is already defined\r\nas a catchall (unspecified). The fwmarking on packets on eth0 with 0x0\r\nwould also fail. This fixes the routing issues, by adding 100 to the\r\nethernet device index so the value is a non-zero, for example then the\r\nrelationship between rt_table index and ethernet would be like:\r\n\r\n100 -> Table_eth0 -> eth0 -> fwmark 100 or 0x64\r\n101 -> Table_eth1 -> eth1 -> fwmark 101 or 0x65\r\n102 -> Table_eth2 -> eth2 -> fwmark 102 or 0x66\r\n\r\nThis would maintain the legacy design of routing based on packet mark\r\nand appropriate routing table rules per table/ids. This also fixes a\r\nminor NPE issue around listing of snapshots.\r\n\r\nThis also backports fixes to smoketests from master.\r\n\r\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/33a6ea0c8788d5daf559eb817eacd18c0e863679",
        "patched_files": [
            "ipassoc.sh",
            "update_config.py",
            "test_deploy_virtio_scsi_vm.py",
            "CsRule.py",
            "ApiResponseHelper.java",
            "CsNetfilter.py",
            "test_vm_life_cycle.py",
            "cloud-nic.sh",
            "CsRoute.py"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "ApiResponseHelperTest.java"
        ]
    },
    "cloudstack_f661b63": {
        "bug_id": "cloudstack_f661b63",
        "commit": "https://github.com/apache/cloudstack/commit/f661b631a13ba7f0c501eb5d1915eab3d097a37e",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/f661b631a13ba7f0c501eb5d1915eab3d097a37e/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java?ref=f661b631a13ba7f0c501eb5d1915eab3d097a37e",
                "deletions": 0,
                "filename": "engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "patch": "@@ -1523,6 +1523,8 @@ public NicProfile prepareNic(final VirtualMachineProfile vmProfile, final Deploy\n             nic.setIPv4Address(profile.getIPv4Address());\n             nic.setAddressFormat(profile.getFormat());\n             nic.setIPv6Address(profile.getIPv6Address());\n+            nic.setIPv6Cidr(profile.getIPv6Cidr());\n+            nic.setIPv6Gateway(profile.getIPv6Gateway());\n             nic.setMacAddress(profile.getMacAddress());\n             nic.setIsolationUri(profile.getIsolationUri());\n             nic.setBroadcastUri(profile.getBroadCastUri());",
                "raw_url": "https://github.com/apache/cloudstack/raw/f661b631a13ba7f0c501eb5d1915eab3d097a37e/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "sha": "a2505fbe638e95ca16fabbeb1e09488b9514b973",
                "status": "modified"
            }
        ],
        "message": "ipv6: Set IPv6 CIDR and Gateway in 'nic' profile\n\nWithout this information a NPE might be triggered when starting a VR, SSVM or CP\nas this information is read from the 'nics' table and causes a NPE.\n\nDuring deployment we should set the IPv6 Gateway and CIDR for the NIC object so that\nit is persisted to the database.\n\nSigned-off-by: Wido den Hollander <wido@widodh.nl>",
        "parent": "https://github.com/apache/cloudstack/commit/17787a194a54f218aacbd443909313041d7a69c3",
        "patched_files": [
            "NetworkOrchestrator.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "NetworkOrchestratorTest.java"
        ]
    },
    "cloudstack_f68b6e8": {
        "bug_id": "cloudstack_f68b6e8",
        "commit": "https://github.com/apache/cloudstack/commit/f68b6e831221a892f312fac380b39c8b18bc57d5",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/f68b6e831221a892f312fac380b39c8b18bc57d5/server/src/com/cloud/template/TemplateManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/template/TemplateManagerImpl.java?ref=f68b6e831221a892f312fac380b39c8b18bc57d5",
                "deletions": 1,
                "filename": "server/src/com/cloud/template/TemplateManagerImpl.java",
                "patch": "@@ -1740,7 +1740,7 @@ public VMTemplateVO createPrivateTemplateRecord(CreateTemplateCmd cmd, Account t\n \n             if (sourceTemplateId != null) {\n                 VMTemplateVO sourceTemplate = _tmpltDao.findById(sourceTemplateId);\n-                if(sourceTemplate != null){\n+                if (sourceTemplate != null && sourceTemplate.getDetails() != null) {\n                     details.putAll(sourceTemplate.getDetails());\n                 }\n             }",
                "raw_url": "https://github.com/apache/cloudstack/raw/f68b6e831221a892f312fac380b39c8b18bc57d5/server/src/com/cloud/template/TemplateManagerImpl.java",
                "sha": "7130042bc5c8153324989d7a956fb46ce8a3bfe0",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #1846 from shapeblue/49smoketest-fixes\n\nCLOUDSTACK-9688: Fix failing smoke testsFixes failing smoke tests due to enviroment issues or corner cases:\n- Fixes NPE in Template Manager\n\n@blueorangutan package\n\n* pr/1846:\n  CLOUDSTACK-9688: Fix failing smoke tests\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/5e19e64f2f24d90d8f15d30b82d2a066061425a7",
        "patched_files": [
            "TemplateManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "TemplateManagerImplTest.java"
        ]
    },
    "cloudstack_f803100": {
        "bug_id": "cloudstack_f803100",
        "commit": "https://github.com/apache/cloudstack/commit/f8031008139978abb6831a1d7cb240c993fbf8f5",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/f8031008139978abb6831a1d7cb240c993fbf8f5/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java?ref=f8031008139978abb6831a1d7cb240c993fbf8f5",
                "deletions": 1,
                "filename": "plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "patch": "@@ -1899,7 +1899,7 @@ public Answer execute(ResizeVolumeCommand cmd) {\n             s_logger.debug(\"after resize, size reports as \" + finalSize + \", requested \" + newSize);\n             return new ResizeVolumeAnswer(cmd, true, \"success\", finalSize);\n         } catch (CloudRuntimeException e) {\n-            String error = \"failed to resize volume: \" + e;\n+            String error = \"Failed to resize volume: \" + e.getMessage();\n             s_logger.debug(error);\n             return new ResizeVolumeAnswer(cmd, false, error);\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/f8031008139978abb6831a1d7cb240c993fbf8f5/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "sha": "f6fe75cd5911e9c5576c622eb2743a264249c05d",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/f8031008139978abb6831a1d7cb240c993fbf8f5/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java?ref=f8031008139978abb6831a1d7cb240c993fbf8f5",
                "deletions": 2,
                "filename": "plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "patch": "@@ -564,7 +564,8 @@ private Answer execute(ResizeVolumeCommand cmd) {\n             VirtualDisk disk = vdisk.first();\n             long oldSize = disk.getCapacityInKB();\n             if (newSize < oldSize) {\n-                throw new Exception(\"VMware doesn't support shrinking volume from larger size: \" + oldSize + \" MB to a smaller size: \" + newSize + \" MB\");\n+                throw new Exception(\"VMware doesn't support shrinking volume from larger size: \" + oldSize/(1024*1024) + \" GB to a smaller size: \"\n+                        + newSize/(1024*1024) + \" GB\");\n             } else if (newSize == oldSize) {\n                 return new ResizeVolumeAnswer(cmd, true, \"success\", newSize * 1024);\n             }\n@@ -582,7 +583,7 @@ private Answer execute(ResizeVolumeCommand cmd) {\n             return new ResizeVolumeAnswer(cmd, true, \"success\", newSize * 1024);\n         } catch (Exception e) {\n             s_logger.error(\"Unable to resize volume\", e);\n-            String error = \"failed to resize volume:\" + e;\n+            String error = \"Failed to resize volume: \" + e.getMessage();\n             return new ResizeVolumeAnswer(cmd, false, error);\n         }\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/f8031008139978abb6831a1d7cb240c993fbf8f5/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "sha": "8a2488dd3f88601b646f76420c8f19af3c8593ef",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cloudstack/blob/f8031008139978abb6831a1d7cb240c993fbf8f5/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/VolumeApiServiceImpl.java?ref=f8031008139978abb6831a1d7cb240c993fbf8f5",
                "deletions": 6,
                "filename": "server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "patch": "@@ -925,6 +925,9 @@ public VolumeVO resizeVolume(ResizeVolumeCmd cmd) throws ResourceAllocationExcep\n                     if (jobResult instanceof ConcurrentOperationException) {\n                         throw (ConcurrentOperationException)jobResult;\n                     }\n+                    else if (jobResult instanceof RuntimeException) {\n+                        throw (RuntimeException)jobResult;\n+                    }\n                     else if (jobResult instanceof Throwable) {\n                         throw new RuntimeException(\"Unexpected exception\", (Throwable)jobResult);\n                     }\n@@ -1000,7 +1003,11 @@ private VolumeVO orchestrateResizeVolume(long volumeId, long currentSize, long n\n             VolumeApiResult result = future.get();\n             if (result.isFailed()) {\n                 s_logger.warn(\"Failed to resize the volume \" + volume);\n-                return null;\n+                String details = \"\";\n+                if (result.getResult() != null && !result.getResult().isEmpty()) {\n+                    details = result.getResult();\n+                }\n+                throw new CloudRuntimeException(details);\n             }\n \n             volume = _volsDao.findById(volume.getId());\n@@ -1029,16 +1036,12 @@ private VolumeVO orchestrateResizeVolume(long volumeId, long currentSize, long n\n             } else {\n                 _resourceLimitMgr.decrementResourceCount(volume.getAccountId(), ResourceType.primary_storage, volume.isDisplayVolume(), new Long(currentSize - newSize));\n             }\n-            return volume;\n         } catch (InterruptedException e) {\n             s_logger.warn(\"failed get resize volume result\", e);\n         } catch (ExecutionException e) {\n             s_logger.warn(\"failed get resize volume result\", e);\n-        } catch (Exception e) {\n-            s_logger.warn(\"failed get resize volume result\", e);\n         }\n-\n-        return null;\n+        return volume;\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/cloudstack/raw/f8031008139978abb6831a1d7cb240c993fbf8f5/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "sha": "5a83ac9d0550fedf26f1b64c6b8ee9545a4e9d9a",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-6969. Data Volume Shrink operation failing with \"Unexpected Exception\".\nFor ResizeVolume API command -\n1. If hypervisor resource throws an exception, handle the NPE thrown by the job framework.\n2. Improve user error message in case of RuntimeException by throwing the exception instead of 'Unexpected Exception'.",
        "parent": "https://github.com/apache/cloudstack/commit/fca41bf527372018dc2faaae03b9d37eb564b66a",
        "patched_files": [
            "VolumeApiServiceImpl.java",
            "VmwareResource.java",
            "LibvirtComputingResource.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VmwareResourceTest.java",
            "LibvirtComputingResourceTest.java",
            "VolumeApiServiceImplTest.java"
        ]
    },
    "cloudstack_f8e40ad": {
        "bug_id": "cloudstack_f8e40ad",
        "commit": "https://github.com/apache/cloudstack/commit/f8e40ad43ffd6ead9cf764426c1684bf3b679367",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/f8e40ad43ffd6ead9cf764426c1684bf3b679367/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=f8e40ad43ffd6ead9cf764426c1684bf3b679367",
                "deletions": 1,
                "filename": "engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -1748,6 +1748,10 @@ private void orchestrateStorageMigration(final String vmUuid, final StoragePool\n         final HostVO srcHost = _hostDao.findById(srchostId);\n         final Long srcClusterId = srcHost.getClusterId();\n \n+        if (destPool == null) {\n+            throw new CloudRuntimeException(\"Unable to migrate vm: missing destination storage pool\");\n+        }\n+\n         try {\n             stateTransitTo(vm, VirtualMachine.Event.StorageMigrationRequested, null);\n         } catch (final NoTransitionException e) {\n@@ -1763,7 +1767,7 @@ private void orchestrateStorageMigration(final String vmUuid, final StoragePool\n             if (migrationResult) {\n                 //if the vm is migrated to different pod in basic mode, need to reallocate ip\n \n-                if (!vm.getPodIdToDeployIn().equals(destPool.getPodId())) {\n+                if (destPool.getPodId() != null && !destPool.getPodId().equals(vm.getPodIdToDeployIn())) {\n                     final DataCenterDeployment plan = new DataCenterDeployment(vm.getDataCenterId(), destPool.getPodId(), null, null, null, null);\n                     final VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vm, null, null, null, null);\n                     _networkMgr.reallocate(vmProfile, plan);",
                "raw_url": "https://github.com/apache/cloudstack/raw/f8e40ad43ffd6ead9cf764426c1684bf3b679367/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "f972539fc7dd430bfd448200a5daac51f4a393dc",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #918 from ustcweizhou/NPE-storage-migration\n\nCLOUDSTACK-8941: fix NPE when migrate vm to other zone-wide pools the second timeThis is because the pod_id is set to NULL at the first time when I migrate the instance to a zone-wide pool (not cluster-wide).\n\n* pr/918:\n  CLOUDSTACK-8941: fix NPE when migrate vm to other zone-wide pools the second time\n\nSigned-off-by: Remi Bergsma <github@remi.nl>",
        "parent": "https://github.com/apache/cloudstack/commit/d538e438e77d4514cf452b453dcbc72ebdfe0dc4",
        "patched_files": [
            "VirtualMachineManagerImpl.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_fa7c1e2": {
        "bug_id": "cloudstack_fa7c1e2",
        "commit": "https://github.com/apache/cloudstack/commit/fa7c1e2e654281fac0bcaebcb1e841f030cbd56e",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/fa7c1e2e654281fac0bcaebcb1e841f030cbd56e/api/src/org/apache/cloudstack/api/response/HostHAResponse.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/response/HostHAResponse.java?ref=fa7c1e2e654281fac0bcaebcb1e841f030cbd56e",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/api/response/HostHAResponse.java",
                "patch": "@@ -84,6 +84,9 @@ public void setEnabled(Boolean enabled) {\n \n     public void setHaState(HAConfig.HAState haState) {\n         this.haState = haState;\n+        if (haState == null) {\n+            this.haState = HAConfig.HAState.Disabled;\n+        }\n     }\n \n     public String getProvider() {",
                "raw_url": "https://github.com/apache/cloudstack/raw/fa7c1e2e654281fac0bcaebcb1e841f030cbd56e/api/src/org/apache/cloudstack/api/response/HostHAResponse.java",
                "sha": "a8b44bd5649667e4f5f126aa55335717bdcea194",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/fa7c1e2e654281fac0bcaebcb1e841f030cbd56e/engine/schema/src/com/cloud/upgrade/dao/Upgrade41000to41100.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/upgrade/dao/Upgrade41000to41100.java?ref=fa7c1e2e654281fac0bcaebcb1e841f030cbd56e",
                "deletions": 8,
                "filename": "engine/schema/src/com/cloud/upgrade/dao/Upgrade41000to41100.java",
                "patch": "@@ -167,7 +167,6 @@ private void updateSystemVmTemplates(final Connection conn) {\n \n         final Map<Hypervisor.HypervisorType, String> newTemplateUrl = new HashMap<Hypervisor.HypervisorType, String>() {\n             {\n-                // FIXME: upload templates\n                 put(Hypervisor.HypervisorType.KVM, \"https://download.cloudstack.org/systemvm/4.11/systemvmtemplate-4.11.0-kvm.qcow2.bz2\");\n                 put(Hypervisor.HypervisorType.VMware, \"https://download.cloudstack.org/systemvm/4.11/systemvmtemplate-4.11.0-vmware.ova\");\n                 put(Hypervisor.HypervisorType.XenServer, \"https://download.cloudstack.org/systemvm/4.11/systemvmtemplate-4.11.0-xen.vhd.bz2\");\n@@ -179,13 +178,12 @@ private void updateSystemVmTemplates(final Connection conn) {\n \n         final Map<Hypervisor.HypervisorType, String> newTemplateChecksum = new HashMap<Hypervisor.HypervisorType, String>() {\n             {\n-                // FIXME: update checksums?\n-                put(Hypervisor.HypervisorType.KVM, \"bc2eac46f16a2ece6c19d4b89db41de3\");\n-                put(Hypervisor.HypervisorType.XenServer, \"908c28a8d4c232f960e0f84af7f86c80\");\n-                put(Hypervisor.HypervisorType.VMware, \"970bfb070a80bd74820881d8149643c1\");\n-                put(Hypervisor.HypervisorType.Hyperv, \"0adb35bd9f92e80d3fc63fcdd9bb55e5\");\n-                put(Hypervisor.HypervisorType.LXC, \"bc2eac46f16a2ece6c19d4b89db41de3\");\n-                put(Hypervisor.HypervisorType.Ovm3, \"94a41f0a5361933813bb34a51df56f56\");\n+                put(Hypervisor.HypervisorType.KVM, \"2d8d1e4eacc976814b97f02849481433\");\n+                put(Hypervisor.HypervisorType.XenServer, \"a5ecf7ed485e2da5ec1993069aa60553\");\n+                put(Hypervisor.HypervisorType.VMware, \"84dab5d1e8267b5dc85eb4eaa21a1efe\");\n+                put(Hypervisor.HypervisorType.Hyperv, \"d592ab6a2271303fe75b6a27f8e6bd53\");\n+                put(Hypervisor.HypervisorType.LXC, \"2d8d1e4eacc976814b97f02849481433\");\n+                put(Hypervisor.HypervisorType.Ovm3, \"60fe2227b89a8980ee09f89dc7b19582\");\n             }\n         };\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/fa7c1e2e654281fac0bcaebcb1e841f030cbd56e/engine/schema/src/com/cloud/upgrade/dao/Upgrade41000to41100.java",
                "sha": "53c2340665f387260aaac338a8e6fff8934e11bc",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/fa7c1e2e654281fac0bcaebcb1e841f030cbd56e/packaging/centos63/cloud.spec",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/packaging/centos63/cloud.spec?ref=fa7c1e2e654281fac0bcaebcb1e841f030cbd56e",
                "deletions": 2,
                "filename": "packaging/centos63/cloud.spec",
                "patch": "@@ -130,8 +130,6 @@ Requires: perl\n Requires: libvirt-python\n Requires: qemu-img\n Requires: qemu-kvm\n-Requires: epel-release\n-Requires: aria2\n Provides: cloud-agent\n Obsoletes: cloud-agent < 4.1.0\n Obsoletes: cloud-agent-libs < 4.1.0",
                "raw_url": "https://github.com/apache/cloudstack/raw/fa7c1e2e654281fac0bcaebcb1e841f030cbd56e/packaging/centos63/cloud.spec",
                "sha": "898118fa96df23b4e48ff37539a27f38d2bb05bf",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/fa7c1e2e654281fac0bcaebcb1e841f030cbd56e/packaging/centos7/cloud.spec",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/packaging/centos7/cloud.spec?ref=fa7c1e2e654281fac0bcaebcb1e841f030cbd56e",
                "deletions": 2,
                "filename": "packaging/centos7/cloud.spec",
                "patch": "@@ -111,8 +111,6 @@ Requires: perl\n Requires: libvirt-python\n Requires: qemu-img\n Requires: qemu-kvm\n-Requires: epel-release\n-Requires: aria2\n Provides: cloud-agent\n Group: System Environment/Libraries\n %description agent",
                "raw_url": "https://github.com/apache/cloudstack/raw/fa7c1e2e654281fac0bcaebcb1e841f030cbd56e/packaging/centos7/cloud.spec",
                "sha": "f16858a4a8f15a28d7736b08f448d3dd6e06ae60",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/fa7c1e2e654281fac0bcaebcb1e841f030cbd56e/server/src/com/cloud/template/HypervisorTemplateAdapter.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/template/HypervisorTemplateAdapter.java?ref=fa7c1e2e654281fac0bcaebcb1e841f030cbd56e",
                "deletions": 5,
                "filename": "server/src/com/cloud/template/HypervisorTemplateAdapter.java",
                "patch": "@@ -451,6 +451,7 @@ public boolean delete(TemplateProfile profile) {\n \n         if (imageStores == null || imageStores.size() == 0) {\n             // already destroyed on image stores\n+            success = true;\n             s_logger.info(\"Unable to find image store still having template: \" + template.getName() + \", so just mark the template removed\");\n         } else {\n             // Make sure the template is downloaded to all found image stores\n@@ -536,10 +537,7 @@ public boolean delete(TemplateProfile profile) {\n                                 templateZoneDao.remove(templateZone.getId());\n                             }\n                         }\n-                    } catch (InterruptedException e) {\n-                        s_logger.debug(\"Delete template Failed\", e);\n-                        throw new CloudRuntimeException(\"Delete template Failed\", e);\n-                    } catch (ExecutionException e) {\n+                    } catch (InterruptedException|ExecutionException e) {\n                         s_logger.debug(\"Delete template Failed\", e);\n                         throw new CloudRuntimeException(\"Delete template Failed\", e);\n                     }\n@@ -551,7 +549,7 @@ public boolean delete(TemplateProfile profile) {\n \n         }\n         if (success) {\n-            if ((imageStores.size() > 1) && (profile.getZoneIdList() != null)) {\n+            if ((imageStores != null && imageStores.size() > 1) && (profile.getZoneIdList() != null)) {\n                 //if template is stored in more than one image stores, and the zone id is not null, then don't delete other templates.\n                 return success;\n             }",
                "raw_url": "https://github.com/apache/cloudstack/raw/fa7c1e2e654281fac0bcaebcb1e841f030cbd56e/server/src/com/cloud/template/HypervisorTemplateAdapter.java",
                "sha": "bfa73af6bcd3812f732fab28a19528a4b65c946c",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cloudstack/blob/fa7c1e2e654281fac0bcaebcb1e841f030cbd56e/server/src/org/apache/cloudstack/ha/HAManagerImpl.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/org/apache/cloudstack/ha/HAManagerImpl.java?ref=fa7c1e2e654281fac0bcaebcb1e841f030cbd56e",
                "deletions": 1,
                "filename": "server/src/org/apache/cloudstack/ha/HAManagerImpl.java",
                "patch": "@@ -199,13 +199,16 @@ private boolean checkHAOwnership(final HAConfig haConfig) {\n \n     private HAResource validateAndFindHAResource(final HAConfig haConfig) {\n         HAResource resource = null;\n+        if (haConfig == null) {\n+            return null;\n+        }\n         if (haConfig.getResourceType() == HAResource.ResourceType.Host) {\n             final Host host = hostDao.findById(haConfig.getResourceId());\n             if (host != null && host.getRemoved() != null) {\n                 return null;\n             }\n             resource = host;\n-            if (resource == null && haConfig.getState() != HAConfig.HAState.Disabled) {\n+            if (haConfig.getState() == null || (resource == null && haConfig.getState() != HAConfig.HAState.Disabled)) {\n                 disableHA(haConfig.getResourceId(), haConfig.getResourceType());\n                 return null;\n             }\n@@ -224,6 +227,9 @@ private HAResource validateAndFindHAResource(final HAConfig haConfig) {\n     }\n \n     private HAProvider<HAResource> validateAndFindHAProvider(final HAConfig haConfig, final HAResource resource) {\n+        if (haConfig == null) {\n+            return null;\n+        }\n         final HAProvider<HAResource> haProvider = haProviderMap.get(haConfig.getHaProvider());\n         if (haProvider != null && !haProvider.isEligible(resource)) {\n             if (haConfig.getState() != HAConfig.HAState.Ineligible) {\n@@ -639,6 +645,10 @@ protected void runInContext() {\n                 }\n                 final List<HAConfig> haConfigList = new ArrayList<HAConfig>(haConfigDao.listAll());\n                 for (final HAConfig haConfig : haConfigList) {\n+                    if (haConfig == null) {\n+                        continue;\n+                    }\n+\n                     if (!checkHAOwnership(haConfig)) {\n                         continue;\n                     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/fa7c1e2e654281fac0bcaebcb1e841f030cbd56e/server/src/org/apache/cloudstack/ha/HAManagerImpl.java",
                "sha": "86ac0376de430b9f815ea1fcc700d6ee7a21e7a3",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/fa7c1e2e654281fac0bcaebcb1e841f030cbd56e/test/integration/smoke/test_hostha_simulator.py",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/test/integration/smoke/test_hostha_simulator.py?ref=fa7c1e2e654281fac0bcaebcb1e841f030cbd56e",
                "deletions": 0,
                "filename": "test/integration/smoke/test_hostha_simulator.py",
                "patch": "@@ -352,6 +352,7 @@ def test_ha_configure_enabledisable_across_clusterzones(self):\n             Zone > Cluster > Host\n         \"\"\"\n         host = self.getHost()\n+        self.configureAndDisableHostHa(host.id)\n         self.configureAndEnableHostHa()\n \n         self.checkSyncToState('Available')",
                "raw_url": "https://github.com/apache/cloudstack/raw/fa7c1e2e654281fac0bcaebcb1e841f030cbd56e/test/integration/smoke/test_hostha_simulator.py",
                "sha": "4dfb9e9ba6c095b6f0946772c326876b161a1113",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/fa7c1e2e654281fac0bcaebcb1e841f030cbd56e/test/integration/smoke/test_public_ip_range.py",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/test/integration/smoke/test_public_ip_range.py?ref=fa7c1e2e654281fac0bcaebcb1e841f030cbd56e",
                "deletions": 8,
                "filename": "test/integration/smoke/test_public_ip_range.py",
                "patch": "@@ -218,7 +218,7 @@ def checkSystemVMUp():\n                     return True, response[0].id\n             return False, None\n \n-        res, systemvmId = wait_until(3, 100, checkSystemVMUp)\n+        res, systemvmId = wait_until(3, 200, checkSystemVMUp)\n         if not res:\n             raise Exception(\"Failed to wait for systemvm to be running\")\n         return systemvmId\n@@ -336,13 +336,13 @@ def exists_public_ip_range_for_system_vms(self, zoneid):\n         return False\n \n     @attr(tags = [\"advanced\", \"publiciprange\", \"dedicate\", \"release\"], required_hardware=\"false\")\n-    def test_dedicate_public_ip_range_for_system_vms_cpvm(self):\n-        \"\"\"Test CPVM Public IP\n+    def test_dedicate_public_ip_range_for_system_vms_01_ssvm(self):\n+        \"\"\"Test SSVM Public IP\n         \"\"\"\n         self.debug(\"Precondition: No public IP range dedicated for system vms in the environment\")\n         if self.exists_public_ip_range_for_system_vms(self.services[\"zoneid\"]):\n             self.skipTest(\"An existing IP range defined for system vms, aborting test\")\n-        \n+\n         services = {\n             \"gateway\":\"192.168.100.1\",\n             \"netmask\":\"255.255.255.0\",\n@@ -355,13 +355,13 @@ def test_dedicate_public_ip_range_for_system_vms_cpvm(self):\n \n         self.base_system_vm(\n             services,\n-            'consoleproxy'\n+            'secondarystoragevm'\n         )\n         return\n \n     @attr(tags = [\"advanced\", \"publiciprange\", \"dedicate\", \"release\"], required_hardware=\"false\")\n-    def test_dedicate_public_ip_range_for_system_vms_ssvm(self):\n-        \"\"\"Test SSVM Public IP\n+    def test_dedicate_public_ip_range_for_system_vms_02_cpvm(self):\n+        \"\"\"Test CPVM Public IP\n         \"\"\"\n         self.debug(\"Precondition: No public IP range dedicated for system vms in the environment\")\n         if self.exists_public_ip_range_for_system_vms(self.services[\"zoneid\"]):\n@@ -379,6 +379,6 @@ def test_dedicate_public_ip_range_for_system_vms_ssvm(self):\n \n         self.base_system_vm(\n             services,\n-            'secondarystoragevm'\n+            'consoleproxy'\n         )\n         return",
                "raw_url": "https://github.com/apache/cloudstack/raw/fa7c1e2e654281fac0bcaebcb1e841f030cbd56e/test/integration/smoke/test_public_ip_range.py",
                "sha": "92b35ad3fa4ffc69f04d56909805ee86ef35f04a",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cloudstack/blob/fa7c1e2e654281fac0bcaebcb1e841f030cbd56e/test/integration/smoke/test_ssvm.py",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/test/integration/smoke/test_ssvm.py?ref=fa7c1e2e654281fac0bcaebcb1e841f030cbd56e",
                "deletions": 8,
                "filename": "test/integration/smoke/test_ssvm.py",
                "patch": "@@ -198,7 +198,6 @@ def test_01_list_sec_storage_vm(self):\n                 True,\n                 \"Check list response returns a valid list\"\n             )\n-            iprange = ipranges_response[0]\n \n             # Fetch corresponding Physical Network of SSVM's Zone\n             listphyntwk = PhysicalNetwork.list(\n@@ -213,9 +212,14 @@ def test_01_list_sec_storage_vm(self):\n                         self.apiclient,\n                         physicalnetworkid=listphyntwk[0].id),\n                     list) is True):\n-                self.assertEqual(\n-                    ssvm.gateway,\n-                    iprange.gateway,\n+                gatewayFound = False\n+                for iprange in ipranges_response:\n+                    if ssvm.gateway == iprange.gateway:\n+                        gatewayFound = True\n+                        break\n+\n+                self.assertTrue(\n+                    gatewayFound,\n                     \"Check gateway with that of corresponding ip range\"\n                 )\n \n@@ -333,7 +337,6 @@ def test_02_list_cpvm_vm(self):\n                 True,\n                 \"Check list response returns a valid list\"\n             )\n-            iprange = ipranges_response[0]\n \n             # Fetch corresponding Physical Network of SSVM's Zone\n             listphyntwk = PhysicalNetwork.list(\n@@ -348,13 +351,13 @@ def test_02_list_cpvm_vm(self):\n                         self.apiclient,\n                         physicalnetworkid=listphyntwk[0].id),\n                     list) is True):\n-                cpvmValidGateway = False\n+                gatewayFound = False\n                 for iprange in ipranges_response:\n                     if iprange.gateway == cpvm.gateway:\n-                        cpvmValidGateway = True\n+                        gatewayFound = True\n                         break\n                 self.assertTrue(\n-                    cpvmValidGateway,\n+                    gatewayFound,\n                     \"Check gateway with that of corresponding ip range\"\n                 )\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/fa7c1e2e654281fac0bcaebcb1e841f030cbd56e/test/integration/smoke/test_ssvm.py",
                "sha": "ad5c4ab344b73ac5373169430e7fb8f2e3b2fdbe",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/fa7c1e2e654281fac0bcaebcb1e841f030cbd56e/test/integration/smoke/test_templates.py",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/test/integration/smoke/test_templates.py?ref=fa7c1e2e654281fac0bcaebcb1e841f030cbd56e",
                "deletions": 1,
                "filename": "test/integration/smoke/test_templates.py",
                "patch": "@@ -540,7 +540,6 @@ def setUpClass(cls):\n         cls.services[\"template\"][\"ostypeid\"] = template.ostypeid\n         cls.services[\"template_2\"][\"ostypeid\"] = template.ostypeid\n         cls.services[\"ostypeid\"] = template.ostypeid\n-        cls.services[\"isdynamicallyscalable\"] = template.isdynamicallyscalable\n         cls.account = Account.create(\n                             cls.apiclient,\n                             cls.services[\"account\"],\n@@ -590,6 +589,7 @@ def setUpClass(cls):\n                                          account=cls.account.name,\n                                          domainid=cls.account.domainid\n                                          )\n+        cls.services[\"isdynamicallyscalable\"] = cls.template_1.isdynamicallyscalable\n         cls.template_2 = Template.create(\n                                          cls.apiclient,\n                                          cls.services[\"template_2\"],",
                "raw_url": "https://github.com/apache/cloudstack/raw/fa7c1e2e654281fac0bcaebcb1e841f030cbd56e/test/integration/smoke/test_templates.py",
                "sha": "7057abe3342d94ace912fe8f604fb65afacc945f",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/fa7c1e2e654281fac0bcaebcb1e841f030cbd56e/test/integration/smoke/test_volumes.py",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/test/integration/smoke/test_volumes.py?ref=fa7c1e2e654281fac0bcaebcb1e841f030cbd56e",
                "deletions": 2,
                "filename": "test/integration/smoke/test_volumes.py",
                "patch": "@@ -246,8 +246,6 @@ def test_01_create_volume(self):\n                 ret = checkVolumeSize(ssh_handle=ssh,volume_name=volume_name,size_to_verify=vol_sz)\n             elif list_volume_response[0].hypervisor.lower() == \"hyperv\":\n                 ret = checkVolumeSize(ssh_handle=ssh,volume_name=\"/dev/sdb\",size_to_verify=vol_sz)\n-            elif list_volume_response[0].hypervisor.lower() == \"vmware\":\n-                ret = checkVolumeSize(ssh_handle=ssh,volume_name=\"/dev/sdb\",size_to_verify=vol_sz)\n             else:\n                 ret = checkVolumeSize(ssh_handle=ssh,size_to_verify=vol_sz)\n             self.debug(\" Volume Size Expected %s  Actual :%s\" %(vol_sz,ret[1]))",
                "raw_url": "https://github.com/apache/cloudstack/raw/fa7c1e2e654281fac0bcaebcb1e841f030cbd56e/test/integration/smoke/test_volumes.py",
                "sha": "d40c0fd065f6022a142430d3c256686bef1c6340",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/fa7c1e2e654281fac0bcaebcb1e841f030cbd56e/ui/scripts/templates.js",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/ui/scripts/templates.js?ref=fa7c1e2e654281fac0bcaebcb1e841f030cbd56e",
                "deletions": 2,
                "filename": "ui/scripts/templates.js",
                "patch": "@@ -258,16 +258,19 @@\n                                                     $form.find('.form-item[rel=rootDiskControllerTypeKVM]').hide();\n                                                     $form.find('.form-item[rel=directdownload]').hide();\n \n-                                                    if (isAdmin())\n+                                                    if (isAdmin()) {\n                                                         $form.find('.form-item[rel=xenserverToolsVersion61plus]').css('display', 'inline-block');\n+                                                    }\n                                                 } else if ($(this).val() == \"KVM\") {\n                                                     $form.find('.form-item[rel=rootDiskControllerType]').hide();\n                                                     $form.find('.form-item[rel=nicAdapterType]').hide();\n                                                     $form.find('.form-item[rel=keyboardType]').hide();\n                                                     $form.find('.form-item[rel=xenserverToolsVersion61plus]').hide();\n                                                     $form.find('.form-item[rel=rootDiskControllerTypeKVM]').css('display', 'inline-block');\n                                                     $form.find('.form-item[rel=xenserverToolsVersion61plus]').css('display', 'inline-block');\n-                                                    $form.find('.form-item[rel=directdownload]').css('display', 'inline-block');\n+                                                    if (isAdmin()) {\n+                                                      $form.find('.form-item[rel=directdownload]').css('display', 'inline-block');\n+                                                    }\n                                                 } else {\n                                                     $form.find('.form-item[rel=rootDiskControllerType]').hide();\n                                                     $form.find('.form-item[rel=nicAdapterType]').hide();",
                "raw_url": "https://github.com/apache/cloudstack/raw/fa7c1e2e654281fac0bcaebcb1e841f030cbd56e/ui/scripts/templates.js",
                "sha": "d9d3af0deb076fb406abb012cf14a5130dc26621",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/fa7c1e2e654281fac0bcaebcb1e841f030cbd56e/vmware-base/src/com/cloud/hypervisor/vmware/mo/HostMO.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/vmware-base/src/com/cloud/hypervisor/vmware/mo/HostMO.java?ref=fa7c1e2e654281fac0bcaebcb1e841f030cbd56e",
                "deletions": 1,
                "filename": "vmware-base/src/com/cloud/hypervisor/vmware/mo/HostMO.java",
                "patch": "@@ -1039,7 +1039,7 @@ public ComputeResourceSummary getHyperHostHardwareSummary() throws Exception {\n     @Override\n     public boolean isHyperHostConnected() throws Exception {\n         HostRuntimeInfo runtimeInfo = (HostRuntimeInfo)_context.getVimClient().getDynamicProperty(_mor, \"runtime\");\n-        return runtimeInfo.getConnectionState() == HostSystemConnectionState.CONNECTED;\n+        return runtimeInfo != null && runtimeInfo.getConnectionState() == HostSystemConnectionState.CONNECTED;\n     }\n \n     public boolean revertToSnapshot(ManagedObjectReference morSnapshot) throws Exception {",
                "raw_url": "https://github.com/apache/cloudstack/raw/fa7c1e2e654281fac0bcaebcb1e841f030cbd56e/vmware-base/src/com/cloud/hypervisor/vmware/mo/HostMO.java",
                "sha": "22bfafc2badef7273b6045fedb9588615abc55c3",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-10227: Stabilization fixes for 4.11.0.0 (#2403)\n\nThis fixes regression failures seen in Trillian, fixes NPEs that cause Travis related failures.\r\nThis also removes the aria2 dependency from rpms that require users to enable/install epel-release.\r\nThis finally updates the checksums for 4.11 systemvmtemplates in db upgrade path.\r\n\r\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/a30a31c9b7f9b5fe246a02285bf820e7fe9ce16e",
        "patched_files": [
            "HypervisorTemplateAdapter.java",
            "templates.js",
            "cloud.spec",
            "test_public_ip_range.py",
            "test_ssvm.py",
            "test_hostha_simulator.py",
            "test_volumes.py",
            "test_templates.py"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "HypervisorTemplateAdapterTest.java"
        ]
    },
    "cloudstack_fae4fda": {
        "bug_id": "cloudstack_fae4fda",
        "commit": "https://github.com/apache/cloudstack/commit/fae4fdae5386a517bf417da1f06c5bf11499364b",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/fae4fdae5386a517bf417da1f06c5bf11499364b/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=fae4fdae5386a517bf417da1f06c5bf11499364b",
                "deletions": 2,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -548,8 +548,10 @@ public VMSnapshotResponse createVMSnapshotResponse(VMSnapshot vmSnapshot) {\n         }\n         if (vmSnapshot.getParent() != null) {\n             VMSnapshot vmSnapshotParent = ApiDBUtils.getVMSnapshotById(vmSnapshot.getParent());\n-            vmSnapshotResponse.setParent(vmSnapshotParent.getUuid());\n-            vmSnapshotResponse.setParentName(vmSnapshotParent.getDisplayName());\n+            if (vmSnapshotParent != null) {\n+                vmSnapshotResponse.setParent(vmSnapshotParent.getUuid());\n+                vmSnapshotResponse.setParentName(vmSnapshotParent.getDisplayName());\n+            }\n         }\n         vmSnapshotResponse.setCurrent(vmSnapshot.getCurrent());\n         vmSnapshotResponse.setType(vmSnapshot.getType().toString());",
                "raw_url": "https://github.com/apache/cloudstack/raw/fae4fdae5386a517bf417da1f06c5bf11499364b/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "f7059ef39939109878a560f406b151219bb236b7",
                "status": "modified"
            }
        ],
        "message": "ApiResponseHelper: fix NPE when parent of snapshot is null\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/7c41a1184cb4566a6337b8e50978c1e550b601c6",
        "patched_files": [
            "ApiResponseHelper.java"
        ],
        "repo": "cloudstack",
        "unit_tests": [
            "ApiResponseHelperTest.java"
        ]
    }
}