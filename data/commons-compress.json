{
    "commons-compress_1dcab3f": {
        "bug_id": "commons-compress_1dcab3f",
        "commit": "https://github.com/apache/commons-compress/commit/1dcab3f854e6fffa16c842b8a10a6fa2163795ea",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/commons-compress/blob/1dcab3f854e6fffa16c842b8a10a6fa2163795ea/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java?ref=1dcab3f854e6fffa16c842b8a10a6fa2163795ea",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java",
                "patch": "@@ -865,9 +865,9 @@ public boolean isFIFO() {\n         }\n \n         String[]   list = file.list();\n-        TarArchiveEntry[] result = new TarArchiveEntry[list.length];\n+        TarArchiveEntry[] result = new TarArchiveEntry[list == null ? 0 : list.length];\n \n-        for (int i = 0; i < list.length; ++i) {\n+        for (int i = 0; i < result.length; ++i) {\n             result[i] = new TarArchiveEntry(new File(file, list[i]));\n         }\n ",
                "raw_url": "https://github.com/apache/commons-compress/raw/1dcab3f854e6fffa16c842b8a10a6fa2163795ea/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java",
                "sha": "cdbc80f3b8f559c9250de1ebaa578e146b1f8167",
                "status": "modified"
            }
        ],
        "message": "newer version of findbugs has detected a potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1696471 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-compress/commit/b1e2a02c09936e604d8f5259ad7a0cf9ab99e55d",
        "repo": "commons-compress",
        "unit_tests": [
            "TarArchiveEntryTest.java"
        ]
    },
    "commons-compress_38118ec": {
        "bug_id": "commons-compress_38118ec",
        "commit": "https://github.com/apache/commons-compress/commit/38118ec54482b76c0e1eac150597d13b5c8c8413",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/commons-compress/blob/38118ec54482b76c0e1eac150597d13b5c8c8413/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java?ref=38118ec54482b76c0e1eac150597d13b5c8c8413",
                "deletions": 0,
                "filename": "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java",
                "patch": "@@ -254,6 +254,10 @@ public void closeArchiveEntry() throws IOException {\n         \n         ensureOpen();\n \n+        if (entry == null) {\n+            throw new IOException(\"Trying to close non-existent entry\");\n+        }\n+\n         if (this.entry.getSize() != this.written) {\n             throw new IOException(\"invalid entry size (expected \"\n                     + this.entry.getSize() + \" but got \" + this.written",
                "raw_url": "https://github.com/apache/commons-compress/raw/38118ec54482b76c0e1eac150597d13b5c8c8413/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java",
                "sha": "88c0f41a230ce5fc1830a3676432035212263ea1",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE if closeArchiveEntry called with no active entry\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@769146 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-compress/commit/9b7db4ed2007e0e651a967e499db7cb3ce6ed83b",
        "repo": "commons-compress",
        "unit_tests": [
            "CpioArchiveOutputStreamTest.java"
        ]
    },
    "commons-compress_b2f97b2": {
        "bug_id": "commons-compress_b2f97b2",
        "commit": "https://github.com/apache/commons-compress/commit/b2f97b2460747c82329e1247c59e74d2cfee1cbd",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/commons-compress/blob/b2f97b2460747c82329e1247c59e74d2cfee1cbd/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java?ref=b2f97b2460747c82329e1247c59e74d2cfee1cbd",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java",
                "patch": "@@ -393,10 +393,10 @@ private void processZip64Extra(final ZipLong size, final ZipLong cSize) {\n         current.usesZip64 = z64 != null;\n         if (!current.hasDataDescriptor) {\n             if (z64 != null // same as current.usesZip64 but avoids NPE warning\n-                    && (cSize.equals(ZipLong.ZIP64_MAGIC) || size.equals(ZipLong.ZIP64_MAGIC)) ) {\n+                    && (ZipLong.ZIP64_MAGIC.equals(cSize) || ZipLong.ZIP64_MAGIC.equals(size)) ) {\n                 current.entry.setCompressedSize(z64.getCompressedSize().getLongValue());\n                 current.entry.setSize(z64.getSize().getLongValue());\n-            } else {\n+            } else if (cSize != null && size != null) {\n                 current.entry.setCompressedSize(cSize.getValue());\n                 current.entry.setSize(size.getValue());\n             }",
                "raw_url": "https://github.com/apache/commons-compress/raw/b2f97b2460747c82329e1247c59e74d2cfee1cbd/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java",
                "sha": "5b711dd781cf5a6e1b2d283c733a50bc9966e838",
                "status": "modified"
            }
        ],
        "message": "avoid NPE warning in Sonar",
        "parent": "https://github.com/apache/commons-compress/commit/4ad5d80a6272e007f64a6ac66829ca189a8093b9",
        "repo": "commons-compress",
        "unit_tests": [
            "ZipArchiveInputStreamTest.java"
        ]
    },
    "commons-compress_df8b3b2": {
        "bug_id": "commons-compress_df8b3b2",
        "commit": "https://github.com/apache/commons-compress/commit/df8b3b2e51a9385e02eba25e72f3927fd1e3ea63",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-compress/blob/df8b3b2e51a9385e02eba25e72f3927fd1e3ea63/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java?ref=df8b3b2e51a9385e02eba25e72f3927fd1e3ea63",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java",
                "patch": "@@ -334,10 +334,11 @@ private void processZip64Extra(ZipLong size, ZipLong cSize) {\n                                         .HEADER_ID);\n         current.usesZip64 = z64 != null;\n         if (!current.hasDataDescriptor) {\n-            if (current.usesZip64 && (cSize.equals(ZipLong.ZIP64_MAGIC)\n+            if (z64 != null // same as current.usesZip64 but avoids NPE warning\n+                    && (cSize.equals(ZipLong.ZIP64_MAGIC)\n                                       || size.equals(ZipLong.ZIP64_MAGIC))\n                 ) {\n-                current.entry.setCompressedSize(z64.getCompressedSize() // z64 cannot be null here\n+                current.entry.setCompressedSize(z64.getCompressedSize()\n                                                 .getLongValue());\n                 current.entry.setSize(z64.getSize().getLongValue());\n             } else {",
                "raw_url": "https://github.com/apache/commons-compress/raw/df8b3b2e51a9385e02eba25e72f3927fd1e3ea63/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java",
                "sha": "40a7ed644fd67859888c4ec1e7283ce7333eb5a6",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE warning\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1482156 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-compress/commit/e1379e2ad42d116c6f2efdba19043d515716c0b6",
        "repo": "commons-compress",
        "unit_tests": [
            "ZipArchiveInputStreamTest.java"
        ]
    },
    "commons-compress_e1379e2": {
        "bug_id": "commons-compress_e1379e2",
        "commit": "https://github.com/apache/commons-compress/commit/e1379e2ad42d116c6f2efdba19043d515716c0b6",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/commons-compress/blob/e1379e2ad42d116c6f2efdba19043d515716c0b6/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java?ref=e1379e2ad42d116c6f2efdba19043d515716c0b6",
                "deletions": 0,
                "filename": "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java",
                "patch": "@@ -609,11 +609,17 @@ private void readFilesInfo(final DataInput header, final Archive archive) throws\n                 }\n                 case NID.kEmptyFile: {\n                     debug(\"  kEmptyFile\");\n+                    if (isEmptyStream == null) { // protect against NPE\n+                        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n+                    }\n                     isEmptyFile = readBits(header, isEmptyStream.cardinality());\n                     break;\n                 }\n                 case NID.kAnti: {\n                     debug(\"  kAnti\");\n+                    if (isEmptyStream == null) { // protect against NPE\n+                        throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n+                    }\n                     isAnti = readBits(header, isEmptyStream.cardinality());\n                     break;\n                 }",
                "raw_url": "https://github.com/apache/commons-compress/raw/e1379e2ad42d116c6f2efdba19043d515716c0b6/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java",
                "sha": "887b97a8e0036c72b0d9278642cdf55f3efce290",
                "status": "modified"
            }
        ],
        "message": "Protect against NPE; throw more specific exception\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1482155 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-compress/commit/9ad93a932d19c46edf40d8e48f843877fa60de48",
        "repo": "commons-compress",
        "unit_tests": [
            "SevenZFileTest.java"
        ]
    }
}