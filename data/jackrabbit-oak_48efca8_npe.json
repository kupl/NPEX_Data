[
    {
        "repo": "jackrabbit-oak",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/48efca81de62165637b4ce11cb226d44957e7c31",
        "bug_id": "jackrabbit-oak_48efca8",
        "message": "OAK-2420: DocumentNodeStore revision GC may lead to NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1667782 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/3074f54f9771bafa6fe69f13f231d670eafd79a1",
        "patched_files": [
            "DocumentNodeStore.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 32,
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/48efca81de62165637b4ce11cb226d44957e7c31/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java?ref=48efca81de62165637b4ce11cb226d44957e7c31",
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java",
                "deletions": 15,
                "sha": "fe60e13b92b9afac7bdea538d154bb3f3114a81a",
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/48efca81de62165637b4ce11cb226d44957e7c31/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java",
                "patch": "@@ -18,6 +18,7 @@\n \n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.collect.Iterables.filter;\n import static com.google.common.collect.Iterables.toArray;\n import static com.google.common.collect.Iterables.transform;\n import static org.apache.jackrabbit.oak.api.CommitFailedException.MERGE;\n@@ -27,6 +28,7 @@\n import static org.apache.jackrabbit.oak.plugins.document.DocumentMK.MANY_CHILDREN_THRESHOLD;\n import static org.apache.jackrabbit.oak.plugins.document.UpdateOp.Key;\n import static org.apache.jackrabbit.oak.plugins.document.UpdateOp.Operation;\n+import static org.apache.jackrabbit.oak.plugins.document.util.Utils.getIdFromPath;\n import static org.apache.jackrabbit.oak.plugins.document.util.Utils.unshareString;\n \n import java.io.Closeable;\n@@ -60,6 +62,7 @@\n import javax.management.NotCompliantMBeanException;\n \n import com.google.common.base.Function;\n+import com.google.common.base.Predicates;\n import com.google.common.cache.Cache;\n import com.google.common.collect.Iterables;\n import com.google.common.collect.Lists;\n@@ -866,11 +869,11 @@ public DocumentNodeState call() throws Exception {\n      * @return the child documents.\n      */\n     @Nonnull\n-    Iterable<NodeDocument> readChildDocs(@Nonnull final String path,\n-                                         @Nullable String name,\n-                                         int limit) {\n-        String to = Utils.getKeyUpperLimit(checkNotNull(path));\n-        String from;\n+    private Iterable<NodeDocument> readChildDocs(@Nonnull final String path,\n+                                                 @Nullable String name,\n+                                                 final int limit) {\n+        final String to = Utils.getKeyUpperLimit(checkNotNull(path));\n+        final String from;\n         if (name != null) {\n             from = Utils.getIdFromPath(concat(path, name));\n         } else {\n@@ -881,7 +884,7 @@ public DocumentNodeState call() throws Exception {\n             // or more than 16k child docs are requested\n             return store.query(Collection.NODES, from, to, limit);\n         }\n-        StringValue key = new StringValue(path);\n+        final StringValue key = new StringValue(path);\n         // check cache\n         NodeDocument.Children c = docChildrenCache.getIfPresent(key);\n         if (c == null) {\n@@ -898,10 +901,10 @@ public DocumentNodeState call() throws Exception {\n             // fetch more and update cache\n             String lastName = c.childNames.get(c.childNames.size() - 1);\n             String lastPath = concat(path, lastName);\n-            from = Utils.getIdFromPath(lastPath);\n+            String low = Utils.getIdFromPath(lastPath);\n             int remainingLimit = limit - c.childNames.size();\n             List<NodeDocument> docs = store.query(Collection.NODES,\n-                    from, to, remainingLimit);\n+                    low, to, remainingLimit);\n             NodeDocument.Children clone = c.clone();\n             for (NodeDocument doc : docs) {\n                 String p = doc.getPath();\n@@ -911,22 +914,36 @@ public DocumentNodeState call() throws Exception {\n             docChildrenCache.put(key, clone);\n             c = clone;\n         }\n-        Iterable<NodeDocument> it = transform(c.childNames, new Function<String, NodeDocument>() {\n+        Iterable<NodeDocument> head = filter(transform(c.childNames,\n+                new Function<String, NodeDocument>() {\n             @Override\n             public NodeDocument apply(String name) {\n                 String p = concat(path, name);\n                 NodeDocument doc = store.find(Collection.NODES, Utils.getIdFromPath(p));\n                 if (doc == null) {\n-                    docChildrenCache.invalidateAll();\n-                    throw new NullPointerException(\"Document \" + p + \" not found\");\n+                    docChildrenCache.invalidate(key);\n                 }\n                 return doc;\n             }\n-        });\n-        if (c.childNames.size() > limit * 2) {\n-            it = Iterables.limit(it, limit * 2);\n+        }), Predicates.notNull());\n+        Iterable<NodeDocument> it;\n+        if (c.isComplete) {\n+            it = head;\n+        } else {\n+            // OAK-2420: 'head' may have null documents when documents are\n+            // concurrently removed from the store. concat 'tail' to fetch\n+            // more documents if necessary\n+            final String last = getIdFromPath(concat(\n+                    path, c.childNames.get(c.childNames.size() - 1)));\n+            Iterable<NodeDocument> tail = new Iterable<NodeDocument>() {\n+                @Override\n+                public Iterator<NodeDocument> iterator() {\n+                    return store.query(NODES, last, to, limit).iterator();\n+                }\n+            };\n+            it = Iterables.concat(head, tail);\n         }\n-        return it;\n+        return Iterables.limit(it, limit);\n     }\n \n     /**",
                "changes": 47
            },
            {
                "status": "modified",
                "additions": 15,
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/48efca81de62165637b4ce11cb226d44957e7c31/oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/document/VersionGCDeletionTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/document/VersionGCDeletionTest.java?ref=48efca81de62165637b4ce11cb226d44957e7c31",
                "filename": "oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/document/VersionGCDeletionTest.java",
                "deletions": 10,
                "sha": "5523258c4889be1b2a2b10e20402f5a593718455",
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/48efca81de62165637b4ce11cb226d44957e7c31/oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/document/VersionGCDeletionTest.java",
                "patch": "@@ -30,6 +30,8 @@\n \n import javax.annotation.Nonnull;\n \n+import com.google.common.collect.Lists;\n+\n import org.apache.jackrabbit.oak.api.CommitFailedException;\n import org.apache.jackrabbit.oak.plugins.document.VersionGarbageCollector.VersionGCStats;\n import org.apache.jackrabbit.oak.plugins.document.memory.MemoryDocumentStore;\n@@ -41,7 +43,6 @@\n import org.apache.jackrabbit.oak.stats.Clock;\n import org.junit.After;\n import org.junit.Before;\n-import org.junit.Ignore;\n import org.junit.Test;\n \n import static java.util.concurrent.Executors.newSingleThreadExecutor;\n@@ -164,7 +165,6 @@ public void deleteLargeNumber() throws Exception{\n     }\n \n     // OAK-2420\n-    @Ignore\n     @Test\n     public void queryWhileDocsAreRemoved() throws Exception {\n         //Baseline the clock\n@@ -190,7 +190,7 @@ public void queryWhileDocsAreRemoved() throws Exception {\n         // create nodes\n         NodeBuilder builder = store.getRoot().builder();\n         NodeBuilder node = builder.child(\"node\");\n-        for (int i = 0; i < 100; i++) {\n+        for (int i = 0; i < 200; i++) {\n             node.child(\"c-\" + i);\n         }\n         merge(store, builder);\n@@ -209,23 +209,27 @@ public void queryWhileDocsAreRemoved() throws Exception {\n \n         clock.waitUntil(clock.getTime() + HOURS.toMillis(1));\n \n+        List<String> expected = Lists.newArrayList();\n         // fill caches\n         NodeState n = store.getRoot().getChildNode(\"node\");\n         for (ChildNodeEntry entry : n.getChildNodeEntries()) {\n-            entry.getName();\n+            expected.add(entry.getName());\n         }\n+        assertEquals(110, expected.size());\n \n         // invalidate the nodeChildren cache only\n         store.invalidateNodeChildrenCache();\n \n-        Future f = newSingleThreadExecutor().submit(new Callable<Object>() {\n+        Future<List<String>> f = newSingleThreadExecutor().submit(\n+                new Callable<List<String>>() {\n             @Override\n-            public Object call() throws Exception {\n+            public List<String> call() throws Exception {\n+                List<String> names = Lists.newArrayList();\n                 NodeState n = store.getRoot().getChildNode(\"node\");\n                 for (ChildNodeEntry entry : n.getChildNodeEntries()) {\n-                    entry.getName();\n+                    names.add(entry.getName());\n                 }\n-                return null;\n+                return names;\n             }\n         });\n \n@@ -235,9 +239,10 @@ public Object call() throws Exception {\n         VersionGCStats stats = gc.gc(30, MINUTES);\n         assertEquals(90, stats.deletedDocGCCount);\n \n-        queries.release(100);\n+        queries.release(200);\n \n-        f.get();\n+        List<String> names = f.get();\n+        assertEquals(expected, names);\n     }\n \n     private void merge(DocumentNodeStore store, NodeBuilder builder)",
                "changes": 25
            }
        ],
        "unit_tests": [
            "VersionGCDeletionTest.java",
            "DocumentNodeStoreTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/document/VersionGCDeletionTest.java",
        "buggy_files": [
            "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java"
        ],
        "fixed": true
    }
]