{
    "oodt_100efac": {
        "bug_id": "oodt_100efac",
        "commit": "https://github.com/apache/oodt/commit/100efac28c772af34cfee4d6c676d43e26900d64",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/oodt/blob/100efac28c772af34cfee4d6c676d43e26900d64/protocol/protocol-sftp/src/test/org/apache/oodt/cas/protocol/sftp/TestJschSftpProtocol.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/protocol/protocol-sftp/src/test/org/apache/oodt/cas/protocol/sftp/TestJschSftpProtocol.java?ref=100efac28c772af34cfee4d6c676d43e26900d64",
                "deletions": 2,
                "filename": "protocol/protocol-sftp/src/test/org/apache/oodt/cas/protocol/sftp/TestJschSftpProtocol.java",
                "patch": "@@ -18,6 +18,7 @@\n \n //JUnit imports\n import java.io.File;\n+import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.InputStream;\n import java.util.ArrayList;\n@@ -58,8 +59,8 @@\n \t@Override\n \tpublic void setUp() {\n     try {\n-\t\t\tConfigurationLoader.initialize(false, context = new TestXmlServerConfigurationContext());\n-\t\t} catch (ConfigurationException e1) {\n+\t\t\tConfigurationLoader.initialize(true, context = new TestXmlServerConfigurationContext());\n+\t\t} catch (Exception e) {\n \t\t\tfail(\"Failed to initialize server configuration\");\n \t\t}\n     ",
                "raw_url": "https://github.com/apache/oodt/raw/100efac28c772af34cfee4d6c676d43e26900d64/protocol/protocol-sftp/src/test/org/apache/oodt/cas/protocol/sftp/TestJschSftpProtocol.java",
                "sha": "480f17103a8818205f517a764ff5784cacdeb365",
                "status": "modified"
            }
        ],
        "message": "- force initialize to be called... could be the cause of the NullPointerException on Jenkins\n\ngit-svn-id: https://svn.apache.org/repos/asf/oodt/trunk@1179844 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/oodt/commit/0f643740cc6df3710819f437121bdb9eb08299d5",
        "patched_files": [],
        "repo": "oodt",
        "unit_tests": [
            "TestJschSftpProtocol.java"
        ]
    },
    "oodt_36f320e": {
        "bug_id": "oodt_36f320e",
        "commit": "https://github.com/apache/oodt/commit/36f320e35155ff38eebdde60fb90a07074ad4148",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/oodt/blob/36f320e35155ff38eebdde60fb90a07074ad4148/core/pom.xml",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/core/pom.xml?ref=36f320e35155ff38eebdde60fb90a07074ad4148",
                "deletions": 0,
                "filename": "core/pom.xml",
                "patch": "@@ -74,6 +74,16 @@ the License.\n         <artifactId>aws-java-sdk</artifactId>\n         <version>1.7.4</version>\n       </dependency>\n+      <dependency>\n+        <groupId>org.apache.avro</groupId>\n+        <artifactId>avro-ipc</artifactId>\n+        <version>1.8.2</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.apache.avro</groupId>\n+        <artifactId>avro</artifactId>\n+        <version>1.8.2</version>\n+      </dependency>\n       <dependency>\n         <groupId>com.google.guava</groupId>\n         <artifactId>guava</artifactId>",
                "raw_url": "https://github.com/apache/oodt/raw/36f320e35155ff38eebdde60fb90a07074ad4148/core/pom.xml",
                "sha": "a01df20dc7c62056219f72b4234cbd9c4cc90de7",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/oodt/blob/36f320e35155ff38eebdde60fb90a07074ad4148/filemgr/pom.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/filemgr/pom.xml?ref=36f320e35155ff38eebdde60fb90a07074ad4148",
                "deletions": 4,
                "filename": "filemgr/pom.xml",
                "patch": "@@ -54,13 +54,10 @@\n     <dependency>\n       <groupId>org.apache.avro</groupId>\n       <artifactId>avro</artifactId>\n-      <version>1.8.1</version>\n     </dependency>\n-    <!-- https://mvnrepository.com/artifact/org.apache.avro/avro-ipc -->\n     <dependency>\n       <groupId>org.apache.avro</groupId>\n       <artifactId>avro-ipc</artifactId>\n-      <version>1.8.1</version>\n     </dependency>\n     <dependency>\n       <groupId>org.apache.commons</groupId>\n@@ -291,7 +288,6 @@\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-surefire-plugin</artifactId>\n         <configuration>\n-          <!--forkMode>pertest</forkMode-->\n           <forkMode>pertest</forkMode>\n           <!-- so we can DEBUG -->\n           <argLine>-enableassertions</argLine>",
                "raw_url": "https://github.com/apache/oodt/raw/36f320e35155ff38eebdde60fb90a07074ad4148/filemgr/pom.xml",
                "sha": "971831907fb3c6b1c0f1472e15dd21ae3daad8c8",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/oodt/blob/36f320e35155ff38eebdde60fb90a07074ad4148/filemgr/src/main/assembly/assembly.xml",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/filemgr/src/main/assembly/assembly.xml?ref=36f320e35155ff38eebdde60fb90a07074ad4148",
                "deletions": 3,
                "filename": "filemgr/src/main/assembly/assembly.xml",
                "patch": "@@ -45,9 +45,9 @@ $Id$\n     <fileSet>\n       <directory>${basedir}/src/main/resources</directory>\n       <outputDirectory>logs</outputDirectory>\n-      <includes>\n-        <include>REMOVE.log</include>\n-      </includes>\n+      <excludes>\n+        <exclude>*/**</exclude>\n+      </excludes>\n     </fileSet>\n     <fileSet>\n       <directory>${basedir}/src/main/resources</directory>",
                "raw_url": "https://github.com/apache/oodt/raw/36f320e35155ff38eebdde60fb90a07074ad4148/filemgr/src/main/assembly/assembly.xml",
                "sha": "2e90515b43603a800f40570ea685c74b849950bf",
                "status": "modified"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/oodt/blob/36f320e35155ff38eebdde60fb90a07074ad4148/filemgr/src/main/java/org/apache/oodt/cas/filemgr/system/AvroFileManagerClient.java",
                "changes": 335,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/filemgr/src/main/java/org/apache/oodt/cas/filemgr/system/AvroFileManagerClient.java?ref=36f320e35155ff38eebdde60fb90a07074ad4148",
                "deletions": 312,
                "filename": "filemgr/src/main/java/org/apache/oodt/cas/filemgr/system/AvroFileManagerClient.java",
                "patch": "@@ -17,20 +17,11 @@\n \n package org.apache.oodt.cas.filemgr.system;\n \n-import java.io.IOException;\n-import java.net.InetSocketAddress;\n-import java.net.URL;\n-import java.nio.ByteBuffer;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n import org.apache.avro.AvroRemoteException;\n import org.apache.avro.ipc.NettyTransceiver;\n import org.apache.avro.ipc.Transceiver;\n import org.apache.avro.ipc.specific.SpecificRequestor;\n import org.apache.oodt.cas.filemgr.datatransfer.DataTransfer;\n-import org.apache.oodt.cas.filemgr.exceptions.FileManagerException;\n import org.apache.oodt.cas.filemgr.structs.Element;\n import org.apache.oodt.cas.filemgr.structs.FileTransferStatus;\n import org.apache.oodt.cas.filemgr.structs.Product;\n@@ -58,6 +49,15 @@\n import org.apache.oodt.cas.filemgr.versioning.Versioner;\n import org.apache.oodt.cas.metadata.Metadata;\n \n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n /**\n  * @author radu\n  *\n@@ -68,11 +68,11 @@\n     private static Logger LOG = Logger.getLogger(AvroFileManagerClient.class\n             .getName());\n \n-    /* Avro-Rpc client */\n-    Transceiver client;\n+    /** Avro-Rpc client */\n+    private Transceiver client;\n \n-    /* proxy for the server */\n-    AvroFileManager proxy;\n+    /** proxy for the server */\n+    private AvroFileManager proxy;\n \n     /* URL where the fileManager is */\n     private URL fileManagerUrl;\n@@ -89,18 +89,16 @@ public AvroFileManagerClient(final URL url, boolean testConnection) throws Conne\n         try {\n             this.fileManagerUrl = url;\n             InetSocketAddress inetSocketAddress = new InetSocketAddress(url.getHost(),this.fileManagerUrl.getPort());\n-            this.client = new NettyTransceiver(inetSocketAddress);\n+            this.client = new NettyTransceiver(inetSocketAddress, 40000L);\n             proxy = (AvroFileManager) SpecificRequestor.getClient(AvroFileManager.class, client);\n-\n         } catch (IOException e) {\n             e.printStackTrace();\n             LOG.log(Level.WARNING, \"IOException when connecting to filemgr: [\"\n                     + this.fileManagerUrl + \"]\");\n         }\n \n         if (testConnection && !isAlive()) {\n-            throw new ConnectionException(\"Exception connecting to filemgr: [\"\n-                    + this.fileManagerUrl + \"]\");\n+            throw new ConnectionException(\"Exception connecting to filemgr: [\" + this.fileManagerUrl + \"]\");\n         }\n     }\n \n@@ -124,8 +122,9 @@ public boolean isAlive() {\n         boolean success;\n \n         try {\n-            if(proxy != null)\n+            if (proxy != null) {\n                 success = proxy.isAlive();\n+            }\n             else return false;\n         } catch (AvroRemoteException e) {\n             LOG.log(Level.WARNING, \"AvroRemoteException when connecting to filemgr: [\"\n@@ -144,12 +143,6 @@ public boolean transferringProduct(Product product) throws DataTransferException\n             success = proxy.transferringProduct(AvroTypeFactory.getAvroProduct(product));\n         } catch (AvroRemoteException e) {\n             throw new DataTransferException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new DataTransferException(e.getMessage());\n-            }\n         }\n \n         return success;\n@@ -162,13 +155,7 @@ public boolean removeProductTransferStatus(Product product) throws DataTransferE\n             success = proxy.removeProductTransferStatus(AvroTypeFactory.getAvroProduct(product));\n         } catch (AvroRemoteException e) {\n             throw new DataTransferException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new DataTransferException(e.getMessage());\n-            }\n-        }\n+        } \n         return success;\n     }\n \n@@ -179,12 +166,6 @@ public boolean isTransferComplete(Product product) throws DataTransferException\n             success = this.proxy.isTransferComplete(AvroTypeFactory.getAvroProduct(product));\n         } catch (AvroRemoteException e) {\n             throw new DataTransferException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new DataTransferException(e.getMessage());\n-            }\n         }\n         return success;\n     }\n@@ -196,12 +177,6 @@ public boolean moveProduct(Product product, String newPath) throws DataTransferE\n             success = this.proxy.moveProduct(AvroTypeFactory.getAvroProduct(product), newPath);\n         } catch (AvroRemoteException e) {\n             throw new DataTransferException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new DataTransferException(e.getMessage());\n-            }\n         }\n         return success;\n     }\n@@ -213,12 +188,6 @@ public boolean modifyProduct(Product product) throws CatalogException {\n             success = this.proxy.modifyProduct(AvroTypeFactory.getAvroProduct(product));\n         } catch (AvroRemoteException e) {\n             throw new CatalogException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new CatalogException(e.getMessage());\n-            }\n         }\n         return success;\n     }\n@@ -230,12 +199,6 @@ public boolean removeProduct(Product product) throws CatalogException {\n             success = this.proxy.removeProduct(AvroTypeFactory.getAvroProduct(product));\n         } catch (AvroRemoteException e) {\n             throw new CatalogException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new CatalogException(e.getMessage());\n-            }\n         }\n         return success;\n     }\n@@ -246,12 +209,6 @@ public FileTransferStatus getCurrentFileTransfer() throws DataTransferException\n             return AvroTypeFactory.getFileTransferStatus(this.proxy.getCurrentFileTransfer());\n         } catch (AvroRemoteException e) {\n             throw new DataTransferException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new DataTransferException(e.getMessage());\n-            }\n         }\n     }\n \n@@ -264,12 +221,6 @@ public FileTransferStatus getCurrentFileTransfer() throws DataTransferException\n             }\n         } catch (AvroRemoteException e) {\n             throw new DataTransferException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new DataTransferException(e.getMessage());\n-            }\n         }\n         return fileTransferStatuses;\n     }\n@@ -280,12 +231,6 @@ public double getProductPctTransferred(Product product) throws DataTransferExcep\n             return this.proxy.getProductPctTransferred(AvroTypeFactory.getAvroProduct(product));\n         } catch (AvroRemoteException e) {\n             throw new DataTransferException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new DataTransferException(e.getMessage());\n-            }\n         }\n     }\n \n@@ -295,12 +240,6 @@ public double getRefPctTransferred(Reference reference) throws DataTransferExcep\n             return this.proxy.getRefPctTransferred(AvroTypeFactory.getAvroReference(reference));\n         } catch (AvroRemoteException e) {\n             throw new DataTransferException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new DataTransferException(e.getMessage());\n-            }\n         }\n     }\n \n@@ -315,12 +254,6 @@ public ProductPage pagedQuery(Query query, ProductType type, int pageNum) throws\n             ));\n         } catch (AvroRemoteException e) {\n             throw new CatalogException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new CatalogException(e.getMessage());\n-            }\n         }\n     }\n \n@@ -330,12 +263,6 @@ public ProductPage getFirstPage(ProductType type) throws CatalogException {\n             return AvroTypeFactory.getProductPage(this.proxy.getFirstPage(AvroTypeFactory.getAvroProductType(type)));\n         } catch (AvroRemoteException e) {\n             throw new CatalogException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new CatalogException(e.getMessage());\n-            }\n         }\n     }\n \n@@ -345,12 +272,6 @@ public ProductPage getLastPage(ProductType type) throws CatalogException {\n             return AvroTypeFactory.getProductPage(this.proxy.getLastPage(AvroTypeFactory.getAvroProductType(type)));\n         } catch (AvroRemoteException e) {\n             throw new CatalogException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new CatalogException(e.getMessage());\n-            }\n         }\n     }\n \n@@ -363,12 +284,6 @@ public ProductPage getNextPage(ProductType type, ProductPage currPage) throws Ca\n             ));\n         } catch (AvroRemoteException e) {\n             throw new CatalogException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new CatalogException(e.getMessage());\n-            }\n         }\n     }\n \n@@ -381,12 +296,6 @@ public ProductPage getPrevPage(ProductType type, ProductPage currPage) throws Ca\n             ));\n         } catch (AvroRemoteException e) {\n             throw new CatalogException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new CatalogException(e.getMessage());\n-            }\n         }\n     }\n \n@@ -396,12 +305,6 @@ public String addProductType(ProductType type) throws RepositoryManagerException\n             return this.proxy.addProductType(AvroTypeFactory.getAvroProductType(type));\n         } catch (AvroRemoteException e) {\n             throw new RepositoryManagerException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new RepositoryManagerException(e.getMessage());\n-            }\n         }\n     }\n \n@@ -411,12 +314,6 @@ public boolean hasProduct(String productName) throws CatalogException {\n             return this.proxy.hasProduct(productName);\n         } catch (AvroRemoteException e) {\n             throw new CatalogException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new CatalogException(e.getMessage());\n-            }\n         }\n     }\n \n@@ -426,12 +323,6 @@ public int getNumProducts(ProductType type) throws CatalogException {\n             return this.proxy.getNumProducts(AvroTypeFactory.getAvroProductType(type));\n         } catch (AvroRemoteException e) {\n             throw new CatalogException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new CatalogException(e.getMessage());\n-            }\n         }\n     }\n \n@@ -444,12 +335,6 @@ public int getNumProducts(ProductType type) throws CatalogException {\n             }\n         } catch (AvroRemoteException e) {\n             throw new CatalogException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new CatalogException(e.getMessage());\n-            }\n         }\n         return products;\n     }\n@@ -463,12 +348,6 @@ public int getNumProducts(ProductType type) throws CatalogException {\n             }\n         } catch (AvroRemoteException e) {\n             throw new CatalogException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new CatalogException(e.getMessage());\n-            }\n         }\n         return products;\n     }\n@@ -479,12 +358,6 @@ public void setProductTransferStatus(Product product) throws CatalogException {\n             this.proxy.setProductTransferStatus(AvroTypeFactory.getAvroProduct(product));\n         } catch (AvroRemoteException e) {\n             throw new CatalogException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new CatalogException(e.getMessage());\n-            }\n         }\n     }\n \n@@ -494,12 +367,6 @@ public void addProductReferences(Product product) throws CatalogException {\n             this.proxy.addProductReferences(AvroTypeFactory.getAvroProduct(product));\n         } catch (AvroRemoteException e) {\n             throw new CatalogException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new CatalogException(e.getMessage());\n-            }\n         }\n     }\n \n@@ -510,12 +377,6 @@ public void addMetadata(Product product, Metadata metadata) throws CatalogExcept\n                     AvroTypeFactory.getAvroMetadata(metadata));\n         } catch (AvroRemoteException e) {\n             throw new CatalogException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new CatalogException(e.getMessage());\n-            }\n         }\n \n     }\n@@ -529,12 +390,6 @@ public boolean updateMetadata(Product product, Metadata met) throws CatalogExcep\n             );\n         } catch (AvroRemoteException e) {\n             throw new CatalogException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new CatalogException(e.getMessage());\n-            }\n         }\n     }\n \n@@ -544,12 +399,6 @@ public String catalogProduct(Product product) throws CatalogException {\n             return this.proxy.catalogProduct(AvroTypeFactory.getAvroProduct(product));\n         } catch (AvroRemoteException e) {\n             throw new CatalogException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new CatalogException(e.getMessage());\n-            }\n         }\n     }\n \n@@ -559,12 +408,6 @@ public Metadata getMetadata(Product product) throws CatalogException {\n             return AvroTypeFactory.getMetadata(this.proxy.getMetadata(AvroTypeFactory.getAvroProduct(product)));\n         } catch (AvroRemoteException e) {\n             throw new CatalogException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new CatalogException(e.getMessage());\n-            }\n         }\n     }\n \n@@ -575,12 +418,6 @@ public Metadata getReducedMetadata(Product product, List<?> elements) throws Cat\n                     this.proxy.getReducedMetadata(AvroTypeFactory.getAvroProduct(product), (List<String>) elements));\n         } catch (AvroRemoteException e) {\n             throw new CatalogException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new CatalogException(e.getMessage());\n-            }\n         }\n     }\n \n@@ -590,12 +427,6 @@ public boolean removeFile(String filePath) throws DataTransferException {\n             return this.proxy.removeFile(filePath);\n         } catch (AvroRemoteException e) {\n             throw new DataTransferException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new DataTransferException(e.getMessage());\n-            }\n         }\n     }\n \n@@ -605,12 +436,6 @@ public boolean removeFile(String filePath) throws DataTransferException {\n             return this.proxy.retrieveFile(filePath, offset, numBytes).array();\n         } catch (AvroRemoteException e) {\n             throw new DataTransferException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new DataTransferException(e.getMessage());\n-            }\n         }\n     }\n \n@@ -620,14 +445,7 @@ public void transferFile(String filePath, byte[] fileData, int offset, int numBy\n             this.proxy.transferFile(filePath, ByteBuffer.wrap(fileData), offset, numBytes);\n         } catch (AvroRemoteException e) {\n             throw new DataTransferException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new DataTransferException(e.getMessage());\n-            }\n         }\n-\n     }\n \n     @Override\n@@ -641,14 +459,7 @@ public void transferFile(String filePath, byte[] fileData, int offset, int numBy\n \n         } catch (AvroRemoteException e) {\n             throw new CatalogException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new CatalogException(e.getMessage());\n-            }\n         }\n-\n     }\n \n     @Override\n@@ -660,12 +471,6 @@ public void transferFile(String filePath, byte[] fileData, int offset, int numBy\n             }\n         } catch (AvroRemoteException e) {\n             throw new ValidationLayerException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new ValidationLayerException(e.getMessage());\n-            }\n         }\n         return products;\n     }\n@@ -676,12 +481,6 @@ public Element getElementById(String elementId) throws ValidationLayerException\n             return AvroTypeFactory.getElement(this.proxy.getElementById(elementId));\n         } catch (AvroRemoteException e) {\n             throw new ValidationLayerException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new ValidationLayerException(e.getMessage());\n-            }\n         }\n     }\n \n@@ -691,12 +490,6 @@ public Element getElementByName(String elementName) throws ValidationLayerExcept\n             return AvroTypeFactory.getElement(this.proxy.getElementByName(elementName));\n         } catch (AvroRemoteException e) {\n             throw new ValidationLayerException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new ValidationLayerException(e.getMessage());\n-            }\n         }\n     }\n \n@@ -710,12 +503,6 @@ public Element getElementByName(String elementName) throws ValidationLayerExcept\n             }\n         } catch (AvroRemoteException e) {\n             throw new CatalogException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new CatalogException(e.getMessage());\n-            }\n         }\n         return queryResults;\n     }\n@@ -729,12 +516,6 @@ public Element getElementByName(String elementName) throws ValidationLayerExcept\n             }\n         } catch (AvroRemoteException e) {\n             throw new CatalogException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new CatalogException(e.getMessage());\n-            }\n         }\n         return products;\n     }\n@@ -745,12 +526,6 @@ public ProductType getProductTypeByName(String productTypeName) throws Repositor\n             return AvroTypeFactory.getProductType(this.proxy.getProductTypeByName(productTypeName));\n         } catch (AvroRemoteException e) {\n             throw new RepositoryManagerException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new RepositoryManagerException(e.getMessage());\n-            }\n         }\n     }\n \n@@ -760,12 +535,6 @@ public ProductType getProductTypeById(String productTypeId) throws RepositoryMan\n             return AvroTypeFactory.getProductType(this.proxy.getProductTypeById(productTypeId));\n         } catch (AvroRemoteException e) {\n             throw new RepositoryManagerException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new RepositoryManagerException(e.getMessage());\n-            }\n         }\n     }\n \n@@ -778,12 +547,6 @@ public ProductType getProductTypeById(String productTypeId) throws RepositoryMan\n             }\n         } catch (AvroRemoteException e) {\n             throw new RepositoryManagerException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new RepositoryManagerException(e.getMessage());\n-            }\n         }\n         return productTypes;\n     }\n@@ -797,12 +560,6 @@ public ProductType getProductTypeById(String productTypeId) throws RepositoryMan\n             }\n         } catch (AvroRemoteException e) {\n             throw new CatalogException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new CatalogException(e.getMessage());\n-            }\n         }\n         return references;\n     }\n@@ -813,12 +570,6 @@ public Product getProductById(String productId) throws CatalogException {\n             return AvroTypeFactory.getProduct(this.proxy.getProductById(productId));\n         } catch (AvroRemoteException e) {\n             throw new CatalogException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new CatalogException(e.getMessage());\n-            }\n         }\n     }\n \n@@ -828,12 +579,6 @@ public Product getProductByName(String productName) throws CatalogException {\n             return AvroTypeFactory.getProduct(this.proxy.getProductByName(productName));\n         } catch (AvroRemoteException e) {\n             throw new CatalogException(e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new CatalogException(e.getMessage());\n-            }\n         }\n     }\n \n@@ -848,9 +593,7 @@ public String ingestProduct(Product product, Metadata metadata,\n                     clientTransfer);\n \n             if (clientTransfer) {\n-                LOG.log(Level.FINEST,\n-                        \"File Manager Client: clientTransfer enabled: \"\n-                                + \"transfering product [\"\n+                LOG.log(Level.FINEST, \"File Manager Client: clientTransfer enabled: transfering product [\"\n                                 + product.getProductName() + \"]\");\n \n                 // we need to transfer the product ourselves\n@@ -948,60 +691,28 @@ public String ingestProduct(Product product, Metadata metadata,\n             }\n             throw new Exception(\"Failed to ingest product [\" + product + \"] : \"\n                     + e.getMessage());\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new FileManagerException(e.getMessage());\n-            }\n         }\n-\n     }\n \n     @Override\n     public Metadata getCatalogValues(Metadata metadata, ProductType productType) throws Exception {\n-        try {\n-            return AvroTypeFactory.getMetadata(this.proxy.getCatalogValues(\n+        return AvroTypeFactory.getMetadata(this.proxy.getCatalogValues(\n                 AvroTypeFactory.getAvroMetadata(metadata),\n                 AvroTypeFactory.getAvroProductType(productType)));\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new FileManagerException(e.getMessage());\n-            }\n-        }\n     }\n \n     @Override\n     public Metadata getOrigValues(Metadata metadata, ProductType productType) throws Exception {\n-        try {\n-            return AvroTypeFactory.getMetadata(this.proxy.getOrigValues(\n+        return AvroTypeFactory.getMetadata(this.proxy.getOrigValues(\n                 AvroTypeFactory.getAvroMetadata(metadata),\n                 AvroTypeFactory.getAvroProductType(productType)));\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new FileManagerException(e.getMessage());\n-            }\n-        }\n     }\n \n     @Override\n     public Query getCatalogQuery(Query query, ProductType productType) throws Exception {\n-        try {\n-            return AvroTypeFactory.getQuery(this.proxy.getCatalogQuery(\n+        return AvroTypeFactory.getQuery(this.proxy.getCatalogQuery(\n                 AvroTypeFactory.getAvroQuery(query),\n-                AvroTypeFactory.getAvroProductType(productType)\n-            ));\n-        } finally {\n-            try {\n-                this.client.close();\n-            } catch (IOException e) {\n-                throw new FileManagerException(e.getMessage());\n-            }\n-        }\n+                AvroTypeFactory.getAvroProductType(productType)));\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/oodt/raw/36f320e35155ff38eebdde60fb90a07074ad4148/filemgr/src/main/java/org/apache/oodt/cas/filemgr/system/AvroFileManagerClient.java",
                "sha": "ca3839d8015ca626508f3d53b7d38c0392b4032a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/oodt/blob/36f320e35155ff38eebdde60fb90a07074ad4148/filemgr/src/main/java/org/apache/oodt/cas/filemgr/system/AvroFileManagerServer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/filemgr/src/main/java/org/apache/oodt/cas/filemgr/system/AvroFileManagerServer.java?ref=36f320e35155ff38eebdde60fb90a07074ad4148",
                "deletions": 1,
                "filename": "filemgr/src/main/java/org/apache/oodt/cas/filemgr/system/AvroFileManagerServer.java",
                "patch": "@@ -70,7 +70,7 @@\n     private Server server;\n \n     /* file manager tools */\n-    FileManager fileManager;\n+    private FileManager fileManager;\n \n     public AvroFileManagerServer(int port){\n         this.port = port;",
                "raw_url": "https://github.com/apache/oodt/raw/36f320e35155ff38eebdde60fb90a07074ad4148/filemgr/src/main/java/org/apache/oodt/cas/filemgr/system/AvroFileManagerServer.java",
                "sha": "91258d9f014934e9c6e9d239c7d2db5945a2cbed",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/oodt/blob/36f320e35155ff38eebdde60fb90a07074ad4148/filemgr/src/main/java/org/apache/oodt/cas/filemgr/util/RpcCommunicationFactory.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/filemgr/src/main/java/org/apache/oodt/cas/filemgr/util/RpcCommunicationFactory.java?ref=36f320e35155ff38eebdde60fb90a07074ad4148",
                "deletions": 0,
                "filename": "filemgr/src/main/java/org/apache/oodt/cas/filemgr/util/RpcCommunicationFactory.java",
                "patch": "@@ -124,6 +124,8 @@ public static FileManagerClient createClient(URL filemgrUrl, boolean testConnect\n      * @throws IOException\n      */\n     public static FileManagerServer createServer(int port) throws IOException {\n+        setPror();\n+\n         String serverFactory = System.getProperty(\"filemgr.server\",\n                 \"org.apache.oodt.cas.filemgr.system.rpc.AvroFileManagerServerFactory\");\n ",
                "raw_url": "https://github.com/apache/oodt/raw/36f320e35155ff38eebdde60fb90a07074ad4148/filemgr/src/main/java/org/apache/oodt/cas/filemgr/util/RpcCommunicationFactory.java",
                "sha": "0ea46b246c9a8af44321485091e0cdb059ec4b36",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/oodt/blob/36f320e35155ff38eebdde60fb90a07074ad4148/filemgr/src/main/resources/filemgr.properties",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/filemgr/src/main/resources/filemgr.properties?ref=36f320e35155ff38eebdde60fb90a07074ad4148",
                "deletions": 4,
                "filename": "filemgr/src/main/resources/filemgr.properties",
                "patch": "@@ -16,10 +16,10 @@\n # Configuration properties for the File Manager\n \n # rpc configuration, uncomment the avro implementations to use AvroRPC\n-filemgr.server=org.apache.oodt.cas.filemgr.system.rpc.XmlRpcFileManagerServerFactory\n-filemgr.client=org.apache.oodt.cas.filemgr.system.rpc.XmlRpcFileManagerClientFactory\n-#filemgr.server=org.apache.oodt.cas.filemgr.system.rpc.AvroFileManagerServerFactory\n-#filemgr.client=org.apache.oodt.cas.filemgr.system.rpc.AvroFileManagerClientFactory\n+#filemgr.server=org.apache.oodt.cas.filemgr.system.rpc.XmlRpcFileManagerServerFactory\n+#filemgr.client=org.apache.oodt.cas.filemgr.system.rpc.XmlRpcFileManagerClientFactory\n+filemgr.server=org.apache.oodt.cas.filemgr.system.rpc.AvroFileManagerServerFactory\n+filemgr.client=org.apache.oodt.cas.filemgr.system.rpc.AvroFileManagerClientFactory\n \n # repository factory\n filemgr.repository.factory=org.apache.oodt.cas.filemgr.repository.XMLRepositoryManagerFactory",
                "raw_url": "https://github.com/apache/oodt/raw/36f320e35155ff38eebdde60fb90a07074ad4148/filemgr/src/main/resources/filemgr.properties",
                "sha": "229755511da519d2e10510007a3fc4e8f4bf2efe",
                "status": "modified"
            },
            {
                "additions": 172,
                "blob_url": "https://github.com/apache/oodt/blob/36f320e35155ff38eebdde60fb90a07074ad4148/filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/AbstractFileManagerServerTest.java",
                "changes": 172,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/AbstractFileManagerServerTest.java?ref=36f320e35155ff38eebdde60fb90a07074ad4148",
                "deletions": 0,
                "filename": "filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/AbstractFileManagerServerTest.java",
                "patch": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.oodt.cas.filemgr.system;\n+\n+import junit.framework.TestCase;\n+import org.apache.oodt.cas.filemgr.ingest.StdIngester;\n+import org.apache.oodt.cas.filemgr.metadata.CoreMetKeys;\n+import org.apache.oodt.cas.metadata.Metadata;\n+import org.apache.oodt.cas.metadata.SerializableMetadata;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.net.URL;\n+import java.util.Properties;\n+import java.util.logging.Logger;\n+\n+public abstract class AbstractFileManagerServerTest extends TestCase {\n+\n+    private static final Logger LOG = Logger.getLogger(AbstractFileManagerServerTest.class.getName());\n+\n+    protected static final int FM_PORT = 50001;\n+    protected static final String transferServiceFacClass =\n+            \"org.apache.oodt.cas.filemgr.datatransfer.LocalDataTransferFactory\";\n+\n+    protected FileManagerServer fileManagerServer;\n+    private String luceneCatLoc;\n+    private Properties initialProperties = new Properties(System.getProperties());\n+\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        startFileManagerServer();\n+        ingestTestFile();\n+    }\n+\n+    private void startFileManagerServer() {\n+        Properties properties = new Properties(System.getProperties());\n+\n+        // first make sure to load properties for the file manager\n+        // and make sure to load logging properties as well\n+\n+        // set the log levels\n+        URL loggingPropertiesUrl = this.getClass().getResource(\"/test.logging.properties\");\n+        properties.setProperty(\"java.util.logging.config.file\", new File(loggingPropertiesUrl.getFile())\n+                .getAbsolutePath());\n+\n+        // first load the example configuration\n+        try {\n+            URL filemgrPropertiesUrl = this.getClass().getResource(\"/filemgr.properties\");\n+            properties.load(new FileInputStream(new File(filemgrPropertiesUrl.getFile())));\n+        } catch (Exception e) {\n+            fail(e.getMessage());\n+        }\n+\n+        // override the catalog to use: we'll use lucene\n+        try {\n+            URL ingestUrl = this.getClass().getResource(\"/ingest\");\n+            luceneCatLoc = new File(ingestUrl.getFile()).getCanonicalPath() + \"/cat\";\n+        } catch (Exception e) {\n+            fail(e.getMessage());\n+        }\n+\n+        properties.setProperty(\"filemgr.catalog.factory\", \"org.apache.oodt.cas.filemgr.catalog.LuceneCatalogFactory\");\n+        properties.setProperty(\"org.apache.oodt.cas.filemgr.catalog.lucene.idxPath\", luceneCatLoc);\n+\n+        // now override the repo mgr policy\n+        URL fmpolicyUrl = this.getClass().getResource(\"/ingest/fmpolicy\");\n+        try {\n+            properties.setProperty(\"org.apache.oodt.cas.filemgr.repositorymgr.dirs\",\n+                    \"file://\" + new File(fmpolicyUrl.getFile()).getCanonicalPath());\n+        } catch (Exception e) {\n+            fail(e.getMessage());\n+        }\n+\n+        // now override the val layer ones\n+        properties.setProperty(\"org.apache.oodt.cas.filemgr.validation.dirs\",\n+                \"file://\" + new File(fmpolicyUrl.getFile()).getAbsolutePath());\n+\n+        // set up mime repo path\n+        URL mimeTypesUrl = this.getClass().getResource(\"/mime-types.xml\");\n+        properties.setProperty(\"org.apache.oodt.cas.filemgr.mime.type.repository\",\n+                new File(mimeTypesUrl.getFile()).getAbsolutePath());\n+\n+        // override expand product met\n+        properties.setProperty(\"org.apache.oodt.cas.filemgr.metadata.expandProduct\",\n+                Boolean.toString(shouldExpandProduct()));\n+\n+        System.setProperties(properties);\n+\n+        setProperties();\n+\n+        try {\n+            fileManagerServer = newFileManagerServer(FM_PORT);\n+            fileManagerServer.startUp();\n+        } catch (Exception e) {\n+            fail(e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public void tearDown() throws Exception {\n+        fileManagerServer.shutdown();\n+        fileManagerServer = null;\n+\n+        // blow away lucene cat\n+        deleteAllFiles(luceneCatLoc);\n+\n+        // blow away test file\n+        deleteAllFiles(\"/tmp/test.txt\");\n+\n+        // Reset the System properties to initial values.\n+        System.setProperties(initialProperties);\n+        super.tearDown();\n+    }\n+\n+    protected void deleteAllFiles(String startDir) {\n+        File startDirFile = new File(startDir);\n+        File[] delFiles = startDirFile.listFiles();\n+\n+        if (delFiles != null && delFiles.length > 0) {\n+            for (File delFile : delFiles) {\n+                delFile.delete();\n+            }\n+        }\n+\n+        startDirFile.delete();\n+    }\n+\n+    @SuppressWarnings(\"Duplicates\")\n+    private void ingestTestFile() {\n+        Metadata prodMet;\n+        StdIngester ingester = new StdIngester(transferServiceFacClass);\n+\n+        try {\n+            URL ingestUrl = this.getClass().getResource(\"/ingest\");\n+            URL refUrl = this.getClass().getResource(\"/ingest/test.txt\");\n+            URL metUrl = this.getClass().getResource(\"/ingest/test.txt.met\");\n+\n+            prodMet = new SerializableMetadata(new FileInputStream(new File(metUrl.getFile())));\n+\n+            // now add the right file location\n+            prodMet.addMetadata(CoreMetKeys.FILE_LOCATION, new File(ingestUrl.getFile()).getCanonicalPath());\n+            prodMet.addMetadata(CoreMetKeys.FILENAME, \"test.txt\");\n+            prodMet.addMetadata(CoreMetKeys.PRODUCT_TYPE, \"GenericFile\");\n+            ingester.ingest(new URL(\"http://localhost:\" + FM_PORT), new File(refUrl.getFile()), prodMet);\n+        } catch (Exception e) {\n+            fail(e.getMessage());\n+        }\n+    }\n+\n+    protected abstract void setProperties();\n+\n+    protected abstract FileManagerServer newFileManagerServer(int port) throws Exception;\n+\n+    protected abstract boolean shouldExpandProduct();\n+}",
                "raw_url": "https://github.com/apache/oodt/raw/36f320e35155ff38eebdde60fb90a07074ad4148/filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/AbstractFileManagerServerTest.java",
                "sha": "486532bac23f0a868df0e4e3d5ed8481a7b142fd",
                "status": "added"
            },
            {
                "additions": 220,
                "blob_url": "https://github.com/apache/oodt/blob/36f320e35155ff38eebdde60fb90a07074ad4148/filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/TestAvroFileManagerClient.java",
                "changes": 220,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/TestAvroFileManagerClient.java?ref=36f320e35155ff38eebdde60fb90a07074ad4148",
                "deletions": 0,
                "filename": "filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/TestAvroFileManagerClient.java",
                "patch": "@@ -0,0 +1,220 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.oodt.cas.filemgr.system;\n+\n+import org.apache.oodt.cas.filemgr.ingest.StdIngester;\n+import org.apache.oodt.cas.filemgr.metadata.CoreMetKeys;\n+import org.apache.oodt.cas.filemgr.structs.Product;\n+import org.apache.oodt.cas.filemgr.structs.ProductType;\n+import org.apache.oodt.cas.filemgr.structs.query.ComplexQuery;\n+import org.apache.oodt.cas.filemgr.structs.query.QueryResult;\n+import org.apache.oodt.cas.filemgr.util.SqlParser;\n+import org.apache.oodt.cas.metadata.Metadata;\n+import org.apache.oodt.cas.metadata.SerializableMetadata;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Vector;\n+\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+\n+public class TestAvroFileManagerClient extends AbstractFileManagerServerTest {\n+\n+    /**\n+     * @since OODT-161\n+     */\n+    public void testGetReducedMetadata() {\n+        List<String> arrayListElems = new ArrayList<>();\n+        List<String> vectorElemList = new Vector<>();\n+        List<String> linkedListElemList = new LinkedList<>();\n+\n+        arrayListElems.add(CoreMetKeys.FILENAME);\n+        vectorElemList.add(CoreMetKeys.FILENAME);\n+        linkedListElemList.add(CoreMetKeys.FILENAME);\n+\n+        try {\n+            FileManagerClient fmc = new AvroFileManagerClient(new URL(\"http://localhost:\" + FM_PORT));\n+\n+            Metadata reducedMet;\n+            List pTypes = fmc.getProductTypes();\n+            assertNotNull(pTypes);\n+            assertTrue(pTypes.size() > 0);\n+            ProductType genericFileType = fmc.getProductTypeByName(\"GenericFile\");\n+            assertNotNull(genericFileType);\n+            List products = fmc.getProductsByProductType(genericFileType);\n+            assertNotNull(products);\n+            assertTrue(products.size() > 0);\n+            Product product = (Product) products.get(0);\n+            assertNotNull(product);\n+\n+            reducedMet = fmc.getReducedMetadata(product, arrayListElems);\n+            assertNotNull(reducedMet);\n+            assertTrue(reducedMet.containsKey(CoreMetKeys.FILENAME));\n+            assertEquals(reducedMet.getMap().keySet().size(), 1);\n+\n+            reducedMet = fmc.getReducedMetadata(product, vectorElemList);\n+            assertNotNull(reducedMet);\n+            assertTrue(reducedMet.containsKey(CoreMetKeys.FILENAME));\n+            assertEquals(reducedMet.getMap().keySet().size(), 1);\n+\n+            reducedMet = fmc.getReducedMetadata(product, linkedListElemList);\n+            assertNotNull(reducedMet);\n+            assertTrue(reducedMet.containsKey(CoreMetKeys.FILENAME));\n+            assertEquals(reducedMet.getMap().keySet().size(), 1);\n+        } catch (Exception e) {\n+            fail(e.getMessage());\n+        }\n+    }\n+\n+    public void testIngest() throws Exception {\n+        URL ingestUrl = this.getClass().getResource(\"/ingest\");\n+        URL refUrl = this.getClass().getResource(\"/ingest/test.txt\");\n+\n+        Metadata prodMet = new Metadata();\n+        prodMet.addMetadata(CoreMetKeys.FILE_LOCATION, new File(\n+                ingestUrl.getFile()).getCanonicalPath());\n+        prodMet.addMetadata(CoreMetKeys.FILENAME, \"test.txt\");\n+        prodMet.addMetadata(CoreMetKeys.PRODUCT_NAME, \"TestFile\");\n+        prodMet.addMetadata(CoreMetKeys.PRODUCT_TYPE, \"GenericFile\");\n+\n+        StdIngester ingester = new StdIngester(transferServiceFacClass);\n+        String productId = ingester.ingest(\n+                new URL(\"http://localhost:\" + FM_PORT),\n+                new File(refUrl.getFile()), prodMet);\n+        FileManagerClient fmc = new AvroFileManagerClient(new URL(\"http://localhost:\" + FM_PORT));\n+        Metadata m = fmc.getMetadata(fmc.getProductById(productId));\n+        assertEquals(m.getMetadata(\"Filename\"), \"test.txt\");\n+        deleteAllFiles(\"/tmp/test-type\");\n+    }\n+\n+    /**\n+     * todo This is an incomplete test. No verification done after the file is deleted\n+     *\n+     * @throws Exception\n+     */\n+    public void testRemoveFile() throws Exception {\n+        Path tmpFilePath = Paths.get(\"/tmp\", \"test-delete.txt\");\n+        URL ingestUrl = this.getClass().getResource(\"/ingest\");\n+        URL refUrl = this.getClass().getResource(\"/ingest/test-delete.txt\");\n+        Files.copy(Paths.get(refUrl.toURI()), tmpFilePath, REPLACE_EXISTING);\n+\n+        try {\n+            Metadata prodMet = new Metadata();\n+            prodMet.addMetadata(CoreMetKeys.FILE_LOCATION, new File(ingestUrl.getFile()).getCanonicalPath());\n+            prodMet.addMetadata(CoreMetKeys.FILENAME, \"test-delete.txt\");\n+            prodMet.addMetadata(CoreMetKeys.PRODUCT_NAME, \"TestFile\");\n+            prodMet.addMetadata(CoreMetKeys.PRODUCT_TYPE, \"GenericFile\");\n+\n+            StdIngester ingester = new StdIngester(transferServiceFacClass);\n+            String productId = ingester.ingest(\n+                    new URL(\"http://localhost:\" + FM_PORT),\n+                    new File(refUrl.getFile()), prodMet);\n+            FileManagerClient fmc = new AvroFileManagerClient(new URL(\"http://localhost:\" + FM_PORT));\n+            Metadata m = fmc.getMetadata(fmc.getProductById(productId));\n+            assertEquals(m.getMetadata(\"Filename\"), \"test-delete.txt\");\n+            String loc = m.getMetadata(\"FileLocation\");\n+            fmc.removeFile(loc + \"/\" + m.getMetadata(\"Filename\"));\n+            fmc.getProductById(productId);\n+        } finally {\n+            Files.copy(tmpFilePath, Paths.get(refUrl.toURI()));\n+        }\n+        deleteAllFiles(\"/tmp/test-type\");\n+    }\n+\n+    /**\n+     * @since OODT-404\n+     */\n+    public void testMetadataPersistence() throws Exception {\n+        URL ingestUrl = this.getClass().getResource(\"/ingest\");\n+        URL refUrl = this.getClass().getResource(\"/ingest/test-file-3.txt\");\n+        URL metUrl = this.getClass().getResource(\"/ingest/test-file-3.txt.met\");\n+\n+        Metadata prodMet;\n+        StdIngester ingester = new StdIngester(transferServiceFacClass);\n+        prodMet = new SerializableMetadata(new FileInputStream(metUrl.getFile()));\n+        // now add the right file location\n+        prodMet.addMetadata(CoreMetKeys.FILE_LOCATION, new File(ingestUrl.getFile()).getCanonicalPath());\n+        String productId = ingester.ingest(\n+                new URL(\"http://localhost:\" + FM_PORT),\n+                new File(refUrl.getFile()), prodMet);\n+        FileManagerClient fmc = new AvroFileManagerClient(new URL(\"http://localhost:\" + FM_PORT));\n+\n+        Metadata m = fmc.getMetadata(fmc.getProductById(productId));\n+        assertEquals(m.getAllMetadata(\"TestElement\").size(), 4);\n+        assertEquals(m.getMetadata(\"TestElement\"), \"fe\");\n+    }\n+\n+    public void testComplexQuery() throws Exception {\n+        URL ingestUrl = this.getClass().getResource(\"/ingest\");\n+        URL refUrl1 = this.getClass().getResource(\"/ingest/test-file-1.txt\");\n+        URL refUrl2 = this.getClass().getResource(\"/ingest/test-file-2.txt\");\n+\n+        StdIngester ingester = new StdIngester(transferServiceFacClass);\n+\n+        //ingest first file\n+        Metadata prodMet = new Metadata();\n+        prodMet.addMetadata(CoreMetKeys.FILE_LOCATION, new File(ingestUrl.getFile()).getCanonicalPath());\n+        prodMet.addMetadata(CoreMetKeys.FILENAME, \"test-file-1.txt\");\n+        prodMet.addMetadata(CoreMetKeys.PRODUCT_NAME, \"TestFile1\");\n+        prodMet.addMetadata(CoreMetKeys.PRODUCT_TYPE, \"GenericFile\");\n+        ingester.ingest(new URL(\"http://localhost:\" + FM_PORT), new File(refUrl1.getFile()), prodMet);\n+\n+        //ingest second file\n+        prodMet.replaceMetadata(CoreMetKeys.FILENAME, \"test-file-2.txt\");\n+        prodMet.replaceMetadata(CoreMetKeys.PRODUCT_NAME, \"TestFile2\");\n+        ingester.ingest(new URL(\"http://localhost:\" + FM_PORT), new File(refUrl2.getFile()), prodMet);\n+\n+        //perform complex query\n+        ComplexQuery complexQuery = new ComplexQuery();\n+        List<String> reducedMetadata = new Vector<String>();\n+        reducedMetadata.add(CoreMetKeys.FILENAME);\n+        complexQuery.setReducedMetadata(reducedMetadata);\n+        List<String> productTypeNames = new Vector<String>();\n+        productTypeNames.add(\"GenericFile\");\n+        complexQuery.setReducedProductTypeNames(productTypeNames);\n+        complexQuery.setSortByMetKey(CoreMetKeys.FILENAME);\n+        complexQuery.setToStringResultFormat(\"$\" + CoreMetKeys.FILENAME);\n+        complexQuery.addCriterion(SqlParser.parseSqlWhereClause(\"Filename != 'test.txt'\"));\n+        FileManagerClient fmc = new AvroFileManagerClient(new URL(\"http://localhost:\" + FM_PORT));\n+        List<QueryResult> queryResults = fmc.complexQuery(complexQuery);\n+        assertEquals(\"[test-file-1.txt, test-file-2.txt]\", queryResults.toString());\n+    }\n+\n+    @Override\n+    protected void setProperties() {\n+        System.setProperty(\"filemgr.server\", \"org.apache.oodt.cas.filemgr.system.rpc.AvroFileManagerServerFactory\");\n+        System.setProperty(\"filemgr.client\", \"org.apache.oodt.cas.filemgr.system.rpc.AvroFileManagerClientFactory\");\n+    }\n+\n+    @Override\n+    protected FileManagerServer newFileManagerServer(int port) throws Exception {\n+        return new AvroFileManagerServer(port);\n+    }\n+\n+    @Override\n+    protected boolean shouldExpandProduct() {\n+        return false;\n+    }\n+}",
                "raw_url": "https://github.com/apache/oodt/raw/36f320e35155ff38eebdde60fb90a07074ad4148/filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/TestAvroFileManagerClient.java",
                "sha": "30796ff5bc2d6db344e9f69d93df2db1987c3a7e",
                "status": "added"
            },
            {
                "additions": 155,
                "blob_url": "https://github.com/apache/oodt/blob/36f320e35155ff38eebdde60fb90a07074ad4148/filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/TestAvroFileManagerServer.java",
                "changes": 155,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/TestAvroFileManagerServer.java?ref=36f320e35155ff38eebdde60fb90a07074ad4148",
                "deletions": 0,
                "filename": "filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/TestAvroFileManagerServer.java",
                "patch": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.oodt.cas.filemgr.system;\n+\n+import org.apache.oodt.cas.filemgr.metadata.ProductMetKeys;\n+import org.apache.oodt.cas.filemgr.structs.Product;\n+import org.apache.oodt.cas.filemgr.structs.exceptions.CatalogException;\n+import org.apache.oodt.cas.metadata.Metadata;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+public class TestAvroFileManagerServer extends AbstractFileManagerServerTest {\n+\n+    private static Logger LOG = Logger.getLogger(TestAvroFileManagerServer.class.getName());\n+\n+    public void testExpandProductMet() {\n+        AvroFileManagerClient fmc = null;\n+        try {\n+            fmc = new AvroFileManagerClient(new URL(\"http://localhost:\" + FM_PORT));\n+        } catch (Exception e) {\n+            fail(e.getMessage());\n+        }\n+\n+        Metadata met = null;\n+        try {\n+            met = fmc.getMetadata(fmc.getProductByName(\"test.txt\"));\n+        } catch (CatalogException e) {\n+            LOG.log(Level.SEVERE, e.getMessage());\n+            fail(e.getMessage());\n+        }\n+\n+        assertNotNull(met);\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_ID));\n+        assertNotNull(met.getMetadata(ProductMetKeys.PRODUCT_ID));\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_NAME));\n+        assertNotNull(met.getMetadata(ProductMetKeys.PRODUCT_NAME));\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_STRUCTURE));\n+        assertEquals(\"Flat\", met.getMetadata(ProductMetKeys.PRODUCT_STRUCTURE));\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_TRANSFER_STATUS));\n+        assertEquals(Product.STATUS_RECEIVED, met\n+                .getMetadata(ProductMetKeys.PRODUCT_TRANSFER_STATUS));\n+\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_ORIG_REFS));\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_DATASTORE_REFS));\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_FILE_SIZES));\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_MIME_TYPES));\n+\n+        assertEquals(1, met.getAllMetadata(ProductMetKeys.PRODUCT_ORIG_REFS).size());\n+        assertEquals(1, met.getAllMetadata(ProductMetKeys.PRODUCT_DATASTORE_REFS)\n+                .size());\n+        assertEquals(1, met.getAllMetadata(ProductMetKeys.PRODUCT_FILE_SIZES)\n+                .size());\n+        assertEquals(1, met.getAllMetadata(ProductMetKeys.PRODUCT_MIME_TYPES)\n+                .size());\n+\n+        URL refUrl = this.getClass().getResource(\"/ingest/test.txt\");\n+\n+        String origPath = null;\n+        try {\n+            origPath = new File(refUrl.getFile()).getCanonicalPath();\n+        } catch (IOException e) {\n+            fail(e.getMessage());\n+        }\n+        assertEquals(origPath, met.getMetadata(ProductMetKeys.PRODUCT_ORIG_REFS));\n+        assertEquals(\"/tmp/test.txt/test.txt\", met\n+                .getMetadata(ProductMetKeys.PRODUCT_DATASTORE_REFS));\n+\n+        assertNotNull(met.getMetadata(ProductMetKeys.PRODUCT_FILE_SIZES));\n+        assertEquals(\"text/plain\", met\n+                .getMetadata(ProductMetKeys.PRODUCT_MIME_TYPES));\n+\n+        try {\n+            met = fmc.getReducedMetadata(fmc.getProductByName(\"test.txt\"),\n+                    Collections.EMPTY_LIST);\n+        } catch (CatalogException e) {\n+            LOG.log(Level.SEVERE, e.getMessage());\n+            fail(e.getMessage());\n+        }\n+\n+        assertNotNull(met);\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_ID));\n+        assertNotNull(met.getMetadata(ProductMetKeys.PRODUCT_ID));\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_NAME));\n+        assertNotNull(met.getMetadata(ProductMetKeys.PRODUCT_NAME));\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_STRUCTURE));\n+        assertEquals(\"Flat\", met.getMetadata(ProductMetKeys.PRODUCT_STRUCTURE));\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_TRANSFER_STATUS));\n+        assertEquals(Product.STATUS_RECEIVED, met\n+                .getMetadata(ProductMetKeys.PRODUCT_TRANSFER_STATUS));\n+\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_ORIG_REFS));\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_DATASTORE_REFS));\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_FILE_SIZES));\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_MIME_TYPES));\n+\n+        assertEquals(1, met.getAllMetadata(ProductMetKeys.PRODUCT_ORIG_REFS).size());\n+        assertEquals(1, met.getAllMetadata(ProductMetKeys.PRODUCT_DATASTORE_REFS)\n+                .size());\n+        assertEquals(1, met.getAllMetadata(ProductMetKeys.PRODUCT_FILE_SIZES)\n+                .size());\n+        assertEquals(1, met.getAllMetadata(ProductMetKeys.PRODUCT_MIME_TYPES)\n+                .size());\n+\n+        origPath = null;\n+        try {\n+            origPath = new File(refUrl.getFile()).getCanonicalPath();\n+        } catch (IOException e) {\n+            fail(e.getMessage());\n+        }\n+        assertEquals(origPath, met.getMetadata(ProductMetKeys.PRODUCT_ORIG_REFS));\n+        assertEquals(\"/tmp/test.txt/test.txt\", met\n+                .getMetadata(ProductMetKeys.PRODUCT_DATASTORE_REFS));\n+\n+        assertNotNull(met.getMetadata(ProductMetKeys.PRODUCT_FILE_SIZES));\n+        assertEquals(\"text/plain\", met\n+                .getMetadata(ProductMetKeys.PRODUCT_MIME_TYPES));\n+\n+    }\n+\n+    @Override\n+    protected void setProperties() {\n+        System.setProperty(\"filemgr.server\", \"org.apache.oodt.cas.filemgr.system.rpc.AvroFileManagerServerFactory\");\n+        System.setProperty(\"filemgr.client\", \"org.apache.oodt.cas.filemgr.system.rpc.AvroFileManagerClientFactory\");\n+    }\n+\n+    @Override\n+    protected FileManagerServer newFileManagerServer(int port) throws Exception {\n+        return new AvroFileManagerServer(port);\n+    }\n+\n+    @Override\n+    protected boolean shouldExpandProduct() {\n+        return true;\n+    }\n+}",
                "raw_url": "https://github.com/apache/oodt/raw/36f320e35155ff38eebdde60fb90a07074ad4148/filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/TestAvroFileManagerServer.java",
                "sha": "9cbf617287add2a8d34f1bb84ddc4a901b620fcb",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/oodt/blob/36f320e35155ff38eebdde60fb90a07074ad4148/filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/TestRpcFileManager.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/TestRpcFileManager.java?ref=36f320e35155ff38eebdde60fb90a07074ad4148",
                "deletions": 0,
                "filename": "filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/TestRpcFileManager.java",
                "patch": "@@ -44,6 +44,7 @@\n  * @since OODT-72\n  * \n  */\n+@Deprecated\n public class TestRpcFileManager extends TestCase {\n \n   private static final int FM_PORT = 50002;",
                "raw_url": "https://github.com/apache/oodt/raw/36f320e35155ff38eebdde60fb90a07074ad4148/filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/TestRpcFileManager.java",
                "sha": "256f0190ed63e563a24d4a71230a49a2eda8e8ce",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/oodt/blob/36f320e35155ff38eebdde60fb90a07074ad4148/filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/TestRpcFileManagerClient.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/TestRpcFileManagerClient.java?ref=36f320e35155ff38eebdde60fb90a07074ad4148",
                "deletions": 0,
                "filename": "filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/TestRpcFileManagerClient.java",
                "patch": "@@ -51,6 +51,7 @@\n  * Test suite for the {@link XmlRpcFileManagerClient}\n  * </p>.\n  */\n+@Deprecated\n public class TestRpcFileManagerClient extends TestCase {\n \n     private static int FM_PORT = 50001;",
                "raw_url": "https://github.com/apache/oodt/raw/36f320e35155ff38eebdde60fb90a07074ad4148/filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/TestRpcFileManagerClient.java",
                "sha": "bf60141eb4ed000690c0b761cfee2f366237159b",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/oodt/blob/75d292cd2f3f38fbf8b4be2da587f3b0017c4687/filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/TestXmlRpcFileManager.java",
                "changes": 303,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/TestXmlRpcFileManager.java?ref=75d292cd2f3f38fbf8b4be2da587f3b0017c4687",
                "deletions": 303,
                "filename": "filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/TestXmlRpcFileManager.java",
                "patch": "@@ -1,303 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.oodt.cas.filemgr.system;\n-\n-import org.apache.oodt.cas.filemgr.ingest.StdIngester;\n-import org.apache.oodt.cas.filemgr.metadata.CoreMetKeys;\n-import org.apache.oodt.cas.filemgr.metadata.ProductMetKeys;\n-import org.apache.oodt.cas.filemgr.structs.Product;\n-import org.apache.oodt.cas.filemgr.structs.exceptions.CatalogException;\n-import org.apache.oodt.cas.metadata.Metadata;\n-import org.apache.oodt.cas.metadata.SerializableMetadata;\n-\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.IOException;\n-import java.net.URL;\n-import java.util.Collections;\n-import java.util.Properties;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n-\n-import junit.framework.TestCase;\n-\n-\n-/**\n- * \n- * Test harness for the XmlRpcFileManager.\n- * \n- * @since OODT-72\n- * \n- */\n-public class TestXmlRpcFileManager extends TestCase {\n-  private static Logger LOG = Logger.getLogger(TestXmlRpcFileManager.class.getName());\n-  private static final int FM_PORT = 50001;\n-\n-  private XmlRpcFileManager fm;\n-\n-  private String luceneCatLoc;\n-\n-  private static final String transferServiceFacClass = \n-      \"org.apache.oodt.cas.filemgr.datatransfer.LocalDataTransferFactory\";\n-\n-  private Properties initialProperties = new Properties(\n-      System.getProperties());\n-\n-  /**\n-   * @since OODT-72\n-   */\n-  public void testExpandProductMet() {\n-    XmlRpcFileManagerClient fmc = null;\n-    try {\n-      fmc = new XmlRpcFileManagerClient(new URL(\"http://localhost:\" + FM_PORT));\n-    } catch (Exception e) {\n-      fail(e.getMessage());\n-    }\n-\n-    Metadata met = null;\n-    try {\n-      met = fmc.getMetadata(fmc.getProductByName(\"test.txt\"));\n-    } catch (CatalogException e) {\n-      LOG.log(Level.SEVERE, e.getMessage());\n-      fail(e.getMessage());\n-    }\n-\n-    assertNotNull(met);\n-    assertTrue(met.containsKey(ProductMetKeys.PRODUCT_ID));\n-    assertNotNull(met.getMetadata(ProductMetKeys.PRODUCT_ID));\n-    assertTrue(met.containsKey(ProductMetKeys.PRODUCT_NAME));\n-    assertNotNull(met.getMetadata(ProductMetKeys.PRODUCT_NAME));\n-    assertTrue(met.containsKey(ProductMetKeys.PRODUCT_STRUCTURE));\n-    assertEquals(\"Flat\", met.getMetadata(ProductMetKeys.PRODUCT_STRUCTURE));\n-    assertTrue(met.containsKey(ProductMetKeys.PRODUCT_TRANSFER_STATUS));\n-    assertEquals(Product.STATUS_RECEIVED, met\n-        .getMetadata(ProductMetKeys.PRODUCT_TRANSFER_STATUS));\n-\n-    assertTrue(met.containsKey(ProductMetKeys.PRODUCT_ORIG_REFS));\n-    assertTrue(met.containsKey(ProductMetKeys.PRODUCT_DATASTORE_REFS));\n-    assertTrue(met.containsKey(ProductMetKeys.PRODUCT_FILE_SIZES));\n-    assertTrue(met.containsKey(ProductMetKeys.PRODUCT_MIME_TYPES));\n-\n-    assertEquals(1, met.getAllMetadata(ProductMetKeys.PRODUCT_ORIG_REFS).size());\n-    assertEquals(1, met.getAllMetadata(ProductMetKeys.PRODUCT_DATASTORE_REFS)\n-        .size());\n-    assertEquals(1, met.getAllMetadata(ProductMetKeys.PRODUCT_FILE_SIZES)\n-        .size());\n-    assertEquals(1, met.getAllMetadata(ProductMetKeys.PRODUCT_MIME_TYPES)\n-        .size());\n-\n-    URL refUrl = this.getClass().getResource(\"/ingest/test.txt\");\n-\n-    String origPath = null;\n-    try {\n-      origPath = new File(refUrl.getFile()).getCanonicalPath();\n-    } catch (IOException e) {\n-      fail(e.getMessage());\n-    }\n-    assertEquals(origPath, met.getMetadata(ProductMetKeys.PRODUCT_ORIG_REFS));\n-    assertEquals(\"/tmp/test.txt/test.txt\", met\n-        .getMetadata(ProductMetKeys.PRODUCT_DATASTORE_REFS));\n-\n-    assertNotNull(met.getMetadata(ProductMetKeys.PRODUCT_FILE_SIZES));\n-    assertEquals(\"text/plain\", met\n-        .getMetadata(ProductMetKeys.PRODUCT_MIME_TYPES));\n-\n-    try {\n-      met = fmc.getReducedMetadata(fmc.getProductByName(\"test.txt\"),\n-          Collections.EMPTY_LIST);\n-    } catch (CatalogException e) {\n-      LOG.log(Level.SEVERE, e.getMessage());\n-      fail(e.getMessage());\n-    }\n-\n-    assertNotNull(met);\n-    assertTrue(met.containsKey(ProductMetKeys.PRODUCT_ID));\n-    assertNotNull(met.getMetadata(ProductMetKeys.PRODUCT_ID));\n-    assertTrue(met.containsKey(ProductMetKeys.PRODUCT_NAME));\n-    assertNotNull(met.getMetadata(ProductMetKeys.PRODUCT_NAME));\n-    assertTrue(met.containsKey(ProductMetKeys.PRODUCT_STRUCTURE));\n-    assertEquals(\"Flat\", met.getMetadata(ProductMetKeys.PRODUCT_STRUCTURE));\n-    assertTrue(met.containsKey(ProductMetKeys.PRODUCT_TRANSFER_STATUS));\n-    assertEquals(Product.STATUS_RECEIVED, met\n-        .getMetadata(ProductMetKeys.PRODUCT_TRANSFER_STATUS));\n-\n-    assertTrue(met.containsKey(ProductMetKeys.PRODUCT_ORIG_REFS));\n-    assertTrue(met.containsKey(ProductMetKeys.PRODUCT_DATASTORE_REFS));\n-    assertTrue(met.containsKey(ProductMetKeys.PRODUCT_FILE_SIZES));\n-    assertTrue(met.containsKey(ProductMetKeys.PRODUCT_MIME_TYPES));\n-\n-    assertEquals(1, met.getAllMetadata(ProductMetKeys.PRODUCT_ORIG_REFS).size());\n-    assertEquals(1, met.getAllMetadata(ProductMetKeys.PRODUCT_DATASTORE_REFS)\n-        .size());\n-    assertEquals(1, met.getAllMetadata(ProductMetKeys.PRODUCT_FILE_SIZES)\n-        .size());\n-    assertEquals(1, met.getAllMetadata(ProductMetKeys.PRODUCT_MIME_TYPES)\n-        .size());\n-\n-    origPath = null;\n-    try {\n-      origPath = new File(refUrl.getFile()).getCanonicalPath();\n-    } catch (IOException e) {\n-      fail(e.getMessage());\n-    }\n-    assertEquals(origPath, met.getMetadata(ProductMetKeys.PRODUCT_ORIG_REFS));\n-    assertEquals(\"/tmp/test.txt/test.txt\", met\n-        .getMetadata(ProductMetKeys.PRODUCT_DATASTORE_REFS));\n-\n-    assertNotNull(met.getMetadata(ProductMetKeys.PRODUCT_FILE_SIZES));\n-    assertEquals(\"text/plain\", met\n-        .getMetadata(ProductMetKeys.PRODUCT_MIME_TYPES));\n-\n-  }\n-\n-  /*\n-   * (non-Javadoc)\n-   * \n-   * @see junit.framework.TestCase#setUp()\n-   */\n-  @Override\n-  public void setUp() throws Exception {\n-    startXmlRpcFileManager();\n-    ingestTestFile();\n-  }\n-\n-  /*\n-   * (non-Javadoc)\n-   * \n-   * @see junit.framework.TestCase#tearDown()\n-   */\n-  @Override\n-  public void tearDown() throws Exception {\n-    fm.shutdown();\n-    fm = null;\n-\n-    // blow away lucene cat\n-    deleteAllFiles(luceneCatLoc);\n-\n-    // blow away test file\n-    deleteAllFiles(\"/tmp/test.txt\");\n-\n-    // Reset the System properties to initial values.\n-    System.setProperties(initialProperties);\n-  }\n-\n-  private void deleteAllFiles(String startDir) {\n-    File startDirFile = new File(startDir);\n-    File[] delFiles = startDirFile.listFiles();\n-\n-    if (delFiles != null && delFiles.length > 0) {\n-      for (File delFile : delFiles) {\n-        delFile.delete();\n-      }\n-    }\n-\n-    startDirFile.delete();\n-\n-  }\n-\n-  private void ingestTestFile() {\n-    Metadata prodMet;\n-    StdIngester ingester = new StdIngester(transferServiceFacClass);\n-\n-    try {\n-      URL ingestUrl = this.getClass().getResource(\"/ingest\");\n-      URL refUrl = this.getClass().getResource(\"/ingest/test.txt\");\n-      URL metUrl = this.getClass().getResource(\"/ingest/test.txt.met\");\n-\n-      prodMet = new SerializableMetadata(new FileInputStream(\n-        new File(metUrl.getFile())));\n-\n-      // now add the right file location\n-      prodMet.addMetadata(CoreMetKeys.FILE_LOCATION, new File(\n-        ingestUrl.getFile()).getCanonicalPath());\n-      prodMet.addMetadata(CoreMetKeys.FILENAME, \"test.txt\");\n-      prodMet.addMetadata(CoreMetKeys.PRODUCT_TYPE, \"GenericFile\");\n-      ingester.ingest(new URL(\"http://localhost:\" + FM_PORT), new File(\n-        refUrl.getFile()), prodMet);\n-    } catch (Exception e) {\n-      fail(e.getMessage());\n-    }\n-  }\n-\n-  private void startXmlRpcFileManager() {\n-\n-    Properties properties = new Properties(System.getProperties());\n-\n-    // first make sure to load properties for the file manager\n-    // and make sure to load logging properties as well\n-\n-    // set the log levels\n-    URL loggingPropertiesUrl = this.getClass().getResource(\n-      \"/test.logging.properties\");\n-    properties.setProperty(\"java.util.logging.config.file\", new File(\n-      loggingPropertiesUrl.getFile()).getAbsolutePath());\n-\n-    // first load the example configuration\n-    try {\n-      URL filemgrPropertiesUrl = this.getClass().getResource(\n-        \"/filemgr.properties\");\n-      properties.load(\n-        new FileInputStream(new File(filemgrPropertiesUrl.getFile())));\n-    } catch (Exception e) {\n-      fail(e.getMessage());\n-    }\n-\n-    // override the catalog to use: we'll use lucene\n-    try {\n-      URL ingestUrl = this.getClass().getResource(\"/ingest\");\n-      luceneCatLoc = new File(ingestUrl.getFile()).getCanonicalPath() + \"/cat\";\n-    } catch (Exception e) {\n-      fail(e.getMessage());\n-    }\n-\n-    properties.setProperty(\"filemgr.catalog.factory\",\n-        \"org.apache.oodt.cas.filemgr.catalog.LuceneCatalogFactory\");\n-    properties.setProperty(\"org.apache.oodt.cas.filemgr.catalog.lucene.idxPath\",\n-        luceneCatLoc);\n-\n-    // now override the repo mgr policy\n-    URL fmpolicyUrl = this.getClass().getResource(\"/ingest/fmpolicy\");\n-    try {\n-      properties.setProperty(\"org.apache.oodt.cas.filemgr.repositorymgr.dirs\",\n-        \"file://\" + new File(fmpolicyUrl.getFile()).getCanonicalPath());\n-    } catch (Exception e) {\n-      fail(e.getMessage());\n-    }\n-\n-    // now override the val layer ones\n-    properties.setProperty(\"org.apache.oodt.cas.filemgr.validation.dirs\",\n-      \"file://\" + new File(fmpolicyUrl.getFile()).getAbsolutePath());\n-\n-    // set up mime repo path\n-    URL mimeTypesUrl = this.getClass().getResource(\"/mime-types.xml\");\n-    properties.setProperty(\"org.apache.oodt.cas.filemgr.mime.type.repository\",\n-      new File(mimeTypesUrl.getFile()).getAbsolutePath());\n-\n-    // override expand product met\n-    properties.setProperty(\"org.apache.oodt.cas.filemgr.metadata.expandProduct\",\n-      \"true\");\n-\n-    System.setProperties(properties);\n-\n-    try {\n-      fm = new XmlRpcFileManager(FM_PORT);\n-    } catch (Exception e) {\n-      fail(e.getMessage());\n-    }\n-  }\n-}",
                "raw_url": "https://github.com/apache/oodt/raw/75d292cd2f3f38fbf8b4be2da587f3b0017c4687/filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/TestXmlRpcFileManager.java",
                "sha": "1e3db7eda482d1f4400fc371ac1f624ccab76c1c",
                "status": "removed"
            },
            {
                "additions": 62,
                "blob_url": "https://github.com/apache/oodt/blob/36f320e35155ff38eebdde60fb90a07074ad4148/filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/TestXmlRpcFileManagerClient.java",
                "changes": 268,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/TestXmlRpcFileManagerClient.java?ref=36f320e35155ff38eebdde60fb90a07074ad4148",
                "deletions": 206,
                "filename": "filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/TestXmlRpcFileManagerClient.java",
                "patch": "@@ -19,6 +19,7 @@\n package org.apache.oodt.cas.filemgr.system;\n \n //OODT imports\n+\n import org.apache.oodt.cas.filemgr.ingest.StdIngester;\n import org.apache.oodt.cas.filemgr.metadata.CoreMetKeys;\n import org.apache.oodt.cas.filemgr.structs.Product;\n@@ -29,62 +30,47 @@\n import org.apache.oodt.cas.metadata.Metadata;\n import org.apache.oodt.cas.metadata.SerializableMetadata;\n \n-//JDK imports\n import java.io.File;\n import java.io.FileInputStream;\n import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.LinkedList;\n import java.util.List;\n-import java.util.Properties;\n import java.util.Vector;\n \n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+\n+//JDK imports\n //Junit imports\n-import junit.framework.TestCase;\n \n /**\n  * @author mattmann\n  * @version $Revision$\n- * \n+ * <p>\n  * <p>\n  * Test suite for the {@link XmlRpcFileManagerClient}\n  * </p>.\n  */\n-public class TestXmlRpcFileManagerClient extends TestCase {\n-\n-    private static final int FM_PORT = 50001;\n-\n-    private XmlRpcFileManager fm;\n-    \n-    private String luceneCatLoc;\n-\n-    private static final String transferServiceFacClass = \"org.apache.oodt.cas.\"\n-            + \"filemgr.datatransfer.LocalDataTransferFactory\";\n-\n-    private Properties initialProperties = new Properties(\n-      System.getProperties());\n-\n-    public TestXmlRpcFileManagerClient() {\n-    }\n+public class TestXmlRpcFileManagerClient extends AbstractFileManagerServerTest {\n \n-    \n     /**\n      * @since OODT-161\n-     * \n      */\n     public void testGetReducedMetadata() {\n-        List arrayListElems = new ArrayList();\n-        List vectorElemList = new Vector();\n-        List linkedListElemList = new LinkedList();\n+        List<String> arrayListElems = new ArrayList<>();\n+        List<String> vectorElemList = new Vector<>();\n+        List<String> linkedListElemList = new LinkedList<>();\n \n         arrayListElems.add(CoreMetKeys.FILENAME);\n         vectorElemList.add(CoreMetKeys.FILENAME);\n         linkedListElemList.add(CoreMetKeys.FILENAME);\n \n         try {\n-            XmlRpcFileManagerClient fmc = new XmlRpcFileManagerClient(new URL(\n-                    \"http://localhost:\" + FM_PORT));\n-            \n+            FileManagerClient fmc = new XmlRpcFileManagerClient(new URL(\"http://localhost:\" + FM_PORT));\n+\n             Metadata reducedMet;\n             List pTypes = fmc.getProductTypes();\n             assertNotNull(pTypes);\n@@ -111,66 +97,63 @@ public void testGetReducedMetadata() {\n             assertNotNull(reducedMet);\n             assertTrue(reducedMet.containsKey(CoreMetKeys.FILENAME));\n             assertEquals(reducedMet.getMap().keySet().size(), 1);\n-            \n         } catch (Exception e) {\n             fail(e.getMessage());\n-        }finally {\n-            fm.shutdown();\n         }\n-\n     }\n-    \n+\n     public void testIngest() throws Exception {\n         URL ingestUrl = this.getClass().getResource(\"/ingest\");\n         URL refUrl = this.getClass().getResource(\"/ingest/test.txt\");\n \n         Metadata prodMet = new Metadata();\n         prodMet.addMetadata(CoreMetKeys.FILE_LOCATION, new File(\n-          ingestUrl.getFile()).getCanonicalPath());\n+                ingestUrl.getFile()).getCanonicalPath());\n         prodMet.addMetadata(CoreMetKeys.FILENAME, \"test.txt\");\n         prodMet.addMetadata(CoreMetKeys.PRODUCT_NAME, \"TestFile\");\n         prodMet.addMetadata(CoreMetKeys.PRODUCT_TYPE, \"GenericFile\");\n \n         StdIngester ingester = new StdIngester(transferServiceFacClass);\n         String productId = ingester.ingest(\n-          new URL(\"http://localhost:\" + FM_PORT),\n-          new File(refUrl.getFile()), prodMet);\n-        XmlRpcFileManagerClient fmc = new XmlRpcFileManagerClient(new URL(\n-                \"http://localhost:\" + FM_PORT));\n+                new URL(\"http://localhost:\" + FM_PORT),\n+                new File(refUrl.getFile()), prodMet);\n+        FileManagerClient fmc = new XmlRpcFileManagerClient(new URL(\"http://localhost:\" + FM_PORT));\n         Metadata m = fmc.getMetadata(fmc.getProductById(productId));\n         assertEquals(m.getMetadata(\"Filename\"), \"test.txt\");\n         deleteAllFiles(\"/tmp/test-type\");\n     }\n \n     public void testRemoveFile() throws Exception {\n+        Path tmpFilePath = Paths.get(\"/tmp\", \"test-delete.txt\");\n         URL ingestUrl = this.getClass().getResource(\"/ingest\");\n         URL refUrl = this.getClass().getResource(\"/ingest/test-delete.txt\");\n+        Files.copy(Paths.get(refUrl.toURI()), tmpFilePath, REPLACE_EXISTING);\n \n-        Metadata prodMet = new Metadata();\n-        prodMet.addMetadata(CoreMetKeys.FILE_LOCATION, new File(\n-            ingestUrl.getFile()).getCanonicalPath());\n-        prodMet.addMetadata(CoreMetKeys.FILENAME, \"test-delete.txt\");\n-        prodMet.addMetadata(CoreMetKeys.PRODUCT_NAME, \"TestFile\");\n-        prodMet.addMetadata(CoreMetKeys.PRODUCT_TYPE, \"GenericFile\");\n-\n-        StdIngester ingester = new StdIngester(transferServiceFacClass);\n-        String productId = ingester.ingest(\n-            new URL(\"http://localhost:\" + FM_PORT),\n-            new File(refUrl.getFile()), prodMet);\n-        XmlRpcFileManagerClient fmc = new XmlRpcFileManagerClient(new URL(\n-            \"http://localhost:\" + FM_PORT));\n-        Metadata m = fmc.getMetadata(fmc.getProductById(productId));\n-        assertEquals(m.getMetadata(\"Filename\"), \"test-delete.txt\");\n-        String loc = m.getMetadata(\"FileLocation\");\n-        fmc.removeFile(loc+\"/\"+m.getMetadata(\"Filename\"));\n+        try {\n+            Metadata prodMet = new Metadata();\n+            prodMet.addMetadata(CoreMetKeys.FILE_LOCATION, new File(ingestUrl.getFile()).getCanonicalPath());\n+            prodMet.addMetadata(CoreMetKeys.FILENAME, \"test-delete.txt\");\n+            prodMet.addMetadata(CoreMetKeys.PRODUCT_NAME, \"TestFile\");\n+            prodMet.addMetadata(CoreMetKeys.PRODUCT_TYPE, \"GenericFile\");\n \n-        fmc.getProductById(productId);\n+            StdIngester ingester = new StdIngester(transferServiceFacClass);\n+            String productId = ingester.ingest(\n+                    new URL(\"http://localhost:\" + FM_PORT),\n+                    new File(refUrl.getFile()), prodMet);\n+            FileManagerClient fmc = new XmlRpcFileManagerClient(new URL(\"http://localhost:\" + FM_PORT));\n+            Metadata m = fmc.getMetadata(fmc.getProductById(productId));\n+            assertEquals(m.getMetadata(\"Filename\"), \"test-delete.txt\");\n+            String loc = m.getMetadata(\"FileLocation\");\n+            fmc.removeFile(loc + \"/\" + m.getMetadata(\"Filename\"));\n+            fmc.getProductById(productId);\n+        } finally {\n+            Files.copy(tmpFilePath, Paths.get(refUrl.toURI()));\n+        }\n         deleteAllFiles(\"/tmp/test-type\");\n     }\n \n     /**\n      * @since OODT-404\n-     *\n      */\n     public void testMetadataPersistence() throws Exception {\n         URL ingestUrl = this.getClass().getResource(\"/ingest\");\n@@ -179,23 +162,19 @@ public void testMetadataPersistence() throws Exception {\n \n         Metadata prodMet;\n         StdIngester ingester = new StdIngester(transferServiceFacClass);\n-        prodMet = new SerializableMetadata(new FileInputStream(\n-            metUrl.getFile()));\n+        prodMet = new SerializableMetadata(new FileInputStream(metUrl.getFile()));\n         // now add the right file location\n-        prodMet.addMetadata(CoreMetKeys.FILE_LOCATION, new File(\n-            ingestUrl.getFile()).getCanonicalPath());\n+        prodMet.addMetadata(CoreMetKeys.FILE_LOCATION, new File(ingestUrl.getFile()).getCanonicalPath());\n         String productId = ingester.ingest(\n-            new URL(\"http://localhost:\" + FM_PORT),\n-            new File(refUrl.getFile()), prodMet);\n-        XmlRpcFileManagerClient fmc = new XmlRpcFileManagerClient(new URL(\n-                \"http://localhost:\" + FM_PORT));\n-             \n+                new URL(\"http://localhost:\" + FM_PORT),\n+                new File(refUrl.getFile()), prodMet);\n+        FileManagerClient fmc = new XmlRpcFileManagerClient(new URL(\"http://localhost:\" + FM_PORT));\n+\n         Metadata m = fmc.getMetadata(fmc.getProductById(productId));\n         assertEquals(m.getAllMetadata(\"TestElement\").size(), 4);\n         assertEquals(m.getMetadata(\"TestElement\"), \"fe\");\n     }\n \n-    \n     public void testComplexQuery() throws Exception {\n         URL ingestUrl = this.getClass().getResource(\"/ingest\");\n         URL refUrl1 = this.getClass().getResource(\"/ingest/test-file-1.txt\");\n@@ -205,20 +184,17 @@ public void testComplexQuery() throws Exception {\n \n         //ingest first file\n         Metadata prodMet = new Metadata();\n-        prodMet.addMetadata(CoreMetKeys.FILE_LOCATION, new File(\n-            ingestUrl.getFile()).getCanonicalPath());\n+        prodMet.addMetadata(CoreMetKeys.FILE_LOCATION, new File(ingestUrl.getFile()).getCanonicalPath());\n         prodMet.addMetadata(CoreMetKeys.FILENAME, \"test-file-1.txt\");\n         prodMet.addMetadata(CoreMetKeys.PRODUCT_NAME, \"TestFile1\");\n         prodMet.addMetadata(CoreMetKeys.PRODUCT_TYPE, \"GenericFile\");\n-        ingester.ingest(new URL(\"http://localhost:\" + FM_PORT), new File(\n-            refUrl1.getFile()), prodMet);           \n-        \n+        ingester.ingest(new URL(\"http://localhost:\" + FM_PORT), new File(refUrl1.getFile()), prodMet);\n+\n         //ingest second file\n         prodMet.replaceMetadata(CoreMetKeys.FILENAME, \"test-file-2.txt\");\n         prodMet.replaceMetadata(CoreMetKeys.PRODUCT_NAME, \"TestFile2\");\n-        ingester.ingest(new URL(\"http://localhost:\" + FM_PORT), new File(\n-            refUrl2.getFile()), prodMet);   \n-        \n+        ingester.ingest(new URL(\"http://localhost:\" + FM_PORT), new File(refUrl2.getFile()), prodMet);\n+\n         //perform complex query\n         ComplexQuery complexQuery = new ComplexQuery();\n         List<String> reducedMetadata = new Vector<String>();\n@@ -230,144 +206,24 @@ public void testComplexQuery() throws Exception {\n         complexQuery.setSortByMetKey(CoreMetKeys.FILENAME);\n         complexQuery.setToStringResultFormat(\"$\" + CoreMetKeys.FILENAME);\n         complexQuery.addCriterion(SqlParser.parseSqlWhereClause(\"Filename != 'test.txt'\"));\n-        XmlRpcFileManagerClient fmc = new XmlRpcFileManagerClient(new URL(\n-                \"http://localhost:\" + FM_PORT));\n+        FileManagerClient fmc = new XmlRpcFileManagerClient(new URL(\"http://localhost:\" + FM_PORT));\n         List<QueryResult> queryResults = fmc.complexQuery(complexQuery);\n         assertEquals(\"[test-file-1.txt, test-file-2.txt]\", queryResults.toString());\n     }\n \n-    /*\n-     * (non-Javadoc)\n-     * \n-     * @see junit.framework.TestCase#setUp()\n-     */\n-    protected void setUp() throws Exception {\n-        startXmlRpcFileManager();\n-        ingestTestFile();\n-    }\n-\n-    /*\n-     * (non-Javadoc)\n-     * \n-     * @see junit.framework.TestCase#tearDown()\n-     */\n-    protected void tearDown() throws Exception {\n-        fm.shutdown();\n-        fm = null;\n-        \n-        // blow away lucene cat\n-        deleteAllFiles(luceneCatLoc);\n-\n-        // blow away test file\n-        deleteAllFiles(\"/tmp/test.txt\");\n-\n-        // Reset the System properties to initial values.\n-        System.setProperties(initialProperties);\n-    }\n-\n-    private void deleteAllFiles(String startDir) {\n-        File startDirFile = new File(startDir);\n-        File[] delFiles = startDirFile.listFiles();\n-\n-        if (delFiles != null && delFiles.length > 0) {\n-            for (File delFile : delFiles) {\n-                delFile.delete();\n-            }\n-        }\n-\n-        startDirFile.delete();\n-\n+    @Override\n+    protected void setProperties() {\n+        System.setProperty(\"filemgr.server\", \"org.apache.oodt.cas.filemgr.system.rpc.XmlRpcFileManagerServerFactory\");\n+        System.setProperty(\"filemgr.client\", \"org.apache.oodt.cas.filemgr.system.rpc.XmlRpcFileManagerClientFactory\");\n     }\n \n-    private void ingestTestFile() {\n-        Metadata prodMet;\n-        StdIngester ingester = new StdIngester(transferServiceFacClass);\n-\n-        try {\n-            URL ingestUrl = this.getClass().getResource(\"/ingest\");\n-            URL refUrl = this.getClass().getResource(\"/ingest/test.txt\");\n-            URL metUrl = this.getClass().getResource(\"/ingest/test.txt.met\");\n-\n-            prodMet = new SerializableMetadata(new FileInputStream(\n-                new File(metUrl.getFile())));\n-\n-            // now add the right file location\n-            prodMet.addMetadata(CoreMetKeys.FILE_LOCATION, new File(\n-                ingestUrl.getFile()).getCanonicalPath());\n-            prodMet.addMetadata(CoreMetKeys.FILENAME, \"test.txt\");\n-            prodMet.addMetadata(CoreMetKeys.PRODUCT_TYPE, \"GenericFile\");\n-            ingester.ingest(new URL(\"http://localhost:\" + FM_PORT), new File(\n-                refUrl.getFile()), prodMet);\n-        } catch (Exception e) {\n-            fail(e.getMessage());\n-        }\n+    @Override\n+    protected FileManagerServer newFileManagerServer(int port) throws Exception {\n+        return new XmlRpcFileManagerServer(port);\n     }\n \n-    private void startXmlRpcFileManager() {\n-\n-        Properties properties = new Properties(System.getProperties());\n-\n-        // first make sure to load properties for the file manager\n-        // and make sure to load logging properties as well\n-\n-        // set the log levels\n-        URL loggingPropertiesUrl = this.getClass().getResource(\n-            \"/test.logging.properties\");\n-        properties.setProperty(\"java.util.logging.config.file\", new File(\n-            loggingPropertiesUrl.getFile()).getAbsolutePath());\n-\n-        // first load the example configuration\n-        try {\n-            URL filemgrPropertiesUrl = this.getClass().getResource(\n-                \"/filemgr.properties\");\n-            properties.load(\n-                new FileInputStream(new File(filemgrPropertiesUrl.getFile())));\n-        } catch (Exception e) {\n-            fail(e.getMessage());\n-        }\n-\n-        // override the catalog to use: we'll use lucene\n-        try {\n-            URL ingestUrl = this.getClass().getResource(\"/ingest\");\n-            luceneCatLoc = new File(ingestUrl.getFile()).getCanonicalPath()\n-                + \"/cat\";\n-        } catch (Exception e) {\n-            fail(e.getMessage());\n-        }\n-\n-        properties.setProperty(\"filemgr.catalog.factory\",\n-                \"org.apache.oodt.cas.filemgr.catalog.LuceneCatalogFactory\");\n-        properties.setProperty(\n-                \"org.apache.oodt.cas.filemgr.catalog.lucene.idxPath\",\n-                luceneCatLoc);\n-\n-        // now override the repo mgr policy\n-        URL fmpolicyUrl = this.getClass().getResource(\"/ingest/fmpolicy\");\n-        try {\n-            properties.setProperty(\n-                \"org.apache.oodt.cas.filemgr.repositorymgr.dirs\",\n-                \"file://\" + new File(fmpolicyUrl.getFile()).getCanonicalPath());\n-        } catch (Exception e) {\n-            fail(e.getMessage());\n-        }\n-\n-        // now override the val layer ones\n-        properties.setProperty(\"org.apache.oodt.cas.filemgr.validation.dirs\",\n-            \"file://\" + new File(fmpolicyUrl.getFile()).getAbsolutePath());\n-\n-        // set up mime repo path\n-        URL mimeTypesUrl = this.getClass().getResource(\"/mime-types.xml\");\n-        properties.setProperty(\n-            \"org.apache.oodt.cas.filemgr.mime.type.repository\",\n-            new File(mimeTypesUrl.getFile()).getAbsolutePath());\n-\n-        System.setProperties(properties);\n-\n-        try {\n-            fm = new XmlRpcFileManager(FM_PORT);\n-        } catch (Exception e) {\n-            fail(e.getMessage());\n-        }\n+    @Override\n+    protected boolean shouldExpandProduct() {\n+        return false;\n     }\n-\n }",
                "raw_url": "https://github.com/apache/oodt/raw/36f320e35155ff38eebdde60fb90a07074ad4148/filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/TestXmlRpcFileManagerClient.java",
                "sha": "c368d489d3f23e21f7b2dc2fe923e79ee42b0d39",
                "status": "modified"
            },
            {
                "additions": 149,
                "blob_url": "https://github.com/apache/oodt/blob/36f320e35155ff38eebdde60fb90a07074ad4148/filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/TestXmlRpcFileManagerServer.java",
                "changes": 149,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/TestXmlRpcFileManagerServer.java?ref=36f320e35155ff38eebdde60fb90a07074ad4148",
                "deletions": 0,
                "filename": "filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/TestXmlRpcFileManagerServer.java",
                "patch": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.oodt.cas.filemgr.system;\n+\n+import org.apache.oodt.cas.filemgr.metadata.ProductMetKeys;\n+import org.apache.oodt.cas.filemgr.structs.Product;\n+import org.apache.oodt.cas.filemgr.structs.exceptions.CatalogException;\n+import org.apache.oodt.cas.metadata.Metadata;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Test harness for the XmlRpcFileManager.\n+ *\n+ * @since OODT-72\n+ */\n+public class TestXmlRpcFileManagerServer extends AbstractFileManagerServerTest {\n+\n+    private static Logger LOG = Logger.getLogger(TestXmlRpcFileManagerServer.class.getName());\n+\n+    /**\n+     * @since OODT-72\n+     */\n+    public void testExpandProductMet() {\n+        FileManagerClient fmc = null;\n+        try {\n+            fmc = new XmlRpcFileManagerClient(new URL(\"http://localhost:\" + FM_PORT));\n+        } catch (Exception e) {\n+            fail(e.getMessage());\n+        }\n+\n+        Metadata met = null;\n+        try {\n+            met = fmc.getMetadata(fmc.getProductByName(\"test.txt\"));\n+        } catch (CatalogException e) {\n+            LOG.log(Level.SEVERE, e.getMessage());\n+            fail(e.getMessage());\n+        }\n+\n+        assertNotNull(met);\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_ID));\n+        assertNotNull(met.getMetadata(ProductMetKeys.PRODUCT_ID));\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_NAME));\n+        assertNotNull(met.getMetadata(ProductMetKeys.PRODUCT_NAME));\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_STRUCTURE));\n+        assertEquals(\"Flat\", met.getMetadata(ProductMetKeys.PRODUCT_STRUCTURE));\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_TRANSFER_STATUS));\n+        assertEquals(Product.STATUS_RECEIVED, met.getMetadata(ProductMetKeys.PRODUCT_TRANSFER_STATUS));\n+\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_ORIG_REFS));\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_DATASTORE_REFS));\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_FILE_SIZES));\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_MIME_TYPES));\n+\n+        assertEquals(1, met.getAllMetadata(ProductMetKeys.PRODUCT_ORIG_REFS).size());\n+        assertEquals(1, met.getAllMetadata(ProductMetKeys.PRODUCT_DATASTORE_REFS).size());\n+        assertEquals(1, met.getAllMetadata(ProductMetKeys.PRODUCT_FILE_SIZES).size());\n+        assertEquals(1, met.getAllMetadata(ProductMetKeys.PRODUCT_MIME_TYPES).size());\n+\n+        URL refUrl = this.getClass().getResource(\"/ingest/test.txt\");\n+\n+        String origPath = null;\n+        try {\n+            origPath = new File(refUrl.getFile()).getCanonicalPath();\n+        } catch (IOException e) {\n+            fail(e.getMessage());\n+        }\n+        assertEquals(origPath, met.getMetadata(ProductMetKeys.PRODUCT_ORIG_REFS));\n+        assertEquals(\"/tmp/test.txt/test.txt\", met.getMetadata(ProductMetKeys.PRODUCT_DATASTORE_REFS));\n+\n+        assertNotNull(met.getMetadata(ProductMetKeys.PRODUCT_FILE_SIZES));\n+        assertEquals(\"text/plain\", met.getMetadata(ProductMetKeys.PRODUCT_MIME_TYPES));\n+\n+        try {\n+            met = fmc.getReducedMetadata(fmc.getProductByName(\"test.txt\"), Collections.EMPTY_LIST);\n+        } catch (CatalogException e) {\n+            LOG.log(Level.SEVERE, e.getMessage());\n+            fail(e.getMessage());\n+        }\n+\n+        assertNotNull(met);\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_ID));\n+        assertNotNull(met.getMetadata(ProductMetKeys.PRODUCT_ID));\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_NAME));\n+        assertNotNull(met.getMetadata(ProductMetKeys.PRODUCT_NAME));\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_STRUCTURE));\n+        assertEquals(\"Flat\", met.getMetadata(ProductMetKeys.PRODUCT_STRUCTURE));\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_TRANSFER_STATUS));\n+        assertEquals(Product.STATUS_RECEIVED, met.getMetadata(ProductMetKeys.PRODUCT_TRANSFER_STATUS));\n+\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_ORIG_REFS));\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_DATASTORE_REFS));\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_FILE_SIZES));\n+        assertTrue(met.containsKey(ProductMetKeys.PRODUCT_MIME_TYPES));\n+\n+        assertEquals(1, met.getAllMetadata(ProductMetKeys.PRODUCT_ORIG_REFS).size());\n+        assertEquals(1, met.getAllMetadata(ProductMetKeys.PRODUCT_DATASTORE_REFS).size());\n+        assertEquals(1, met.getAllMetadata(ProductMetKeys.PRODUCT_FILE_SIZES).size());\n+        assertEquals(1, met.getAllMetadata(ProductMetKeys.PRODUCT_MIME_TYPES).size());\n+\n+        origPath = null;\n+        try {\n+            origPath = new File(refUrl.getFile()).getCanonicalPath();\n+        } catch (IOException e) {\n+            fail(e.getMessage());\n+        }\n+        assertEquals(origPath, met.getMetadata(ProductMetKeys.PRODUCT_ORIG_REFS));\n+        assertEquals(\"/tmp/test.txt/test.txt\", met.getMetadata(ProductMetKeys.PRODUCT_DATASTORE_REFS));\n+\n+        assertNotNull(met.getMetadata(ProductMetKeys.PRODUCT_FILE_SIZES));\n+        assertEquals(\"text/plain\", met.getMetadata(ProductMetKeys.PRODUCT_MIME_TYPES));\n+    }\n+\n+    @Override\n+    protected void setProperties() {\n+        System.setProperty(\"filemgr.server\", \"org.apache.oodt.cas.filemgr.system.rpc.XmlRpcFileManagerServerFactory\");\n+        System.setProperty(\"filemgr.client\", \"org.apache.oodt.cas.filemgr.system.rpc.XmlRpcFileManagerClientFactory\");\n+    }\n+\n+    @Override\n+    protected FileManagerServer newFileManagerServer(int port) throws Exception {\n+        return new XmlRpcFileManagerServer(port);\n+    }\n+\n+    @Override\n+    protected boolean shouldExpandProduct() {\n+        return true;\n+    }\n+}",
                "raw_url": "https://github.com/apache/oodt/raw/36f320e35155ff38eebdde60fb90a07074ad4148/filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/TestXmlRpcFileManagerServer.java",
                "sha": "dde1137d35eb2aaa3c405281ff2abb9b6c89855c",
                "status": "added"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/oodt/blob/36f320e35155ff38eebdde60fb90a07074ad4148/filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/distributed/TestDistributedXmlRpcFileManager.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/distributed/TestDistributedXmlRpcFileManager.java?ref=36f320e35155ff38eebdde60fb90a07074ad4148",
                "deletions": 2,
                "filename": "filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/distributed/TestDistributedXmlRpcFileManager.java",
                "patch": "@@ -22,7 +22,7 @@\n import org.apache.oodt.cas.filemgr.metadata.ProductMetKeys;\n import org.apache.oodt.cas.filemgr.structs.Product;\n import org.apache.oodt.cas.filemgr.structs.exceptions.CatalogException;\n-import org.apache.oodt.cas.filemgr.system.AvroFileManagerServer;\n+import org.apache.oodt.cas.filemgr.system.TestXmlRpcFileManagerServer;\n import org.apache.oodt.cas.filemgr.system.XmlRpcFileManager;\n import org.apache.oodt.cas.filemgr.system.XmlRpcFileManagerClient;\n import org.apache.oodt.cas.filemgr.system.XmlRpcFileManagerServer;\n@@ -53,7 +53,7 @@\n  * which will first download and store published files locally. Then the correct functionality of {@link\n  * XmlRpcFileManager} is tested by using those downloaded configuration files for configuration.\n  * <p>\n- * This class is adapted from {@link org.apache.oodt.cas.filemgr.system.TestXmlRpcFileManager} class\n+ * This class is adapted from {@link TestXmlRpcFileManagerServer} class\n  *\n  * @author Imesha Sudasingha\n  */",
                "raw_url": "https://github.com/apache/oodt/raw/36f320e35155ff38eebdde60fb90a07074ad4148/filemgr/src/test/java/org/apache/oodt/cas/filemgr/system/distributed/TestDistributedXmlRpcFileManager.java",
                "sha": "d9bf2a220d12c6ffe706f7874f0375cc033216b1",
                "status": "modified"
            }
        ],
        "message": "This fixes [OODT-970] and [OODT-969] - Tests for Avro File Manager and solve the NPE problem in NettyTransceiver.",
        "parent": "https://github.com/apache/oodt/commit/75d292cd2f3f38fbf8b4be2da587f3b0017c4687",
        "patched_files": [
            "AvroFileManagerClient.java",
            "XmlRpcFileManagerServer.java",
            "filemgr.java",
            "XmlRpcFileManager.java",
            "pom.java",
            "assembly.java",
            "RpcCommunicationFactory.java",
            "AvroFileManagerServer.java",
            "XmlRpcFileManagerClient.java"
        ],
        "repo": "oodt",
        "unit_tests": [
            "AbstractFileManagerServerTest.java",
            "TestAvroFileManagerServer.java",
            "TestXmlRpcFileManager.java",
            "TestXmlRpcFileManagerServer.java",
            "TestDistributedXmlRpcFileManager.java",
            "TestRpcFileManagerClient.java",
            "TestRpcFileManager.java",
            "TestAvroFileManagerClient.java",
            "TestXmlRpcFileManagerClient.java"
        ]
    },
    "oodt_41bb1e8": {
        "bug_id": "oodt_41bb1e8",
        "commit": "https://github.com/apache/oodt/commit/41bb1e895568659d948f6e27dd6eff4359bff2b2",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/oodt/blob/41bb1e895568659d948f6e27dd6eff4359bff2b2/pge/src/main/java/org/apache/oodt/cas/pge/PGETaskInstance.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/pge/src/main/java/org/apache/oodt/cas/pge/PGETaskInstance.java?ref=41bb1e895568659d948f6e27dd6eff4359bff2b2",
                "deletions": 2,
                "filename": "pge/src/main/java/org/apache/oodt/cas/pge/PGETaskInstance.java",
                "patch": "@@ -97,7 +97,7 @@\n  */\n public class PGETaskInstance implements WorkflowTaskInstance {\n \n-   protected Logger logger;\n+   protected Logger logger = Logger.getLogger(PGETaskInstance.class.getName());\n    protected XmlRpcWorkflowManagerClient wm;\n    protected String workflowInstId;\n    protected PgeMetadata pgeMetadata;\n@@ -115,7 +115,7 @@ public void run(Metadata metadata, WorkflowTaskConfiguration config)\n          runPropertyAdders();\n          wm = createWorkflowManagerClient();\n          workflowInstId = getWorkflowInstanceId();\n-         logger = createLogger();\n+         logger = createLogger(); // use workflow ID specific logger from now on \n \n          // Write out PgeMetadata.\n          dumpMetadataIfRequested();",
                "raw_url": "https://github.com/apache/oodt/raw/41bb1e895568659d948f6e27dd6eff4359bff2b2/pge/src/main/java/org/apache/oodt/cas/pge/PGETaskInstance.java",
                "sha": "6ac5eaa1e039a2ee31877a09a1a221e707b359b1",
                "status": "modified"
            }
        ],
        "message": "Resolution: OODT-584 - PGETaskInstance logger and NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/oodt/trunk@1461847 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/oodt/commit/53c3def803eeb0aa21e440728a50b92940398fdb",
        "patched_files": [
            "PGETaskInstance.java"
        ],
        "repo": "oodt",
        "unit_tests": [
            "TestPGETaskInstance.java"
        ]
    },
    "oodt_44c1555": {
        "bug_id": "oodt_44c1555",
        "commit": "https://github.com/apache/oodt/commit/44c1555543ff912a907c592d225b5e69564a6a52",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/oodt/blob/44c1555543ff912a907c592d225b5e69564a6a52/pge/src/main/java/org/apache/oodt/cas/pge/staging/FileManagerFileStager.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/pge/src/main/java/org/apache/oodt/cas/pge/staging/FileManagerFileStager.java?ref=44c1555543ff912a907c592d225b5e69564a6a52",
                "deletions": 0,
                "filename": "pge/src/main/java/org/apache/oodt/cas/pge/staging/FileManagerFileStager.java",
                "patch": "@@ -88,6 +88,7 @@ static void setFileManagerUrl(DataTransfer dataTransferer,\n    @VisibleForTesting\n    static Product createProduct(URI path) {\n       Product product = new Product();\n+      product.setProductStructure(Product.STRUCTURE_FLAT); //TODO: only support flat prods for now\n       Reference reference = new Reference();\n       reference.setDataStoreReference(path.toString());\n       product.setProductReferences(Lists.newArrayList(reference));",
                "raw_url": "https://github.com/apache/oodt/raw/44c1555543ff912a907c592d225b5e69564a6a52/pge/src/main/java/org/apache/oodt/cas/pge/staging/FileManagerFileStager.java",
                "sha": "dbf6602c6f28b74935b0355b3d3d20917f0d2e3c",
                "status": "modified"
            },
            {
                "additions": 41,
                "blob_url": "https://github.com/apache/oodt/blob/44c1555543ff912a907c592d225b5e69564a6a52/pge/src/test/java/org/apache/oodt/cas/pge/staging/TestFileManagerFileStager.java",
                "changes": 41,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/pge/src/test/java/org/apache/oodt/cas/pge/staging/TestFileManagerFileStager.java?ref=44c1555543ff912a907c592d225b5e69564a6a52",
                "deletions": 0,
                "filename": "pge/src/test/java/org/apache/oodt/cas/pge/staging/TestFileManagerFileStager.java",
                "patch": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.oodt.cas.pge.staging;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import org.apache.oodt.cas.filemgr.structs.Product;\n+\n+import junit.framework.TestCase;\n+\n+public class TestFileManagerFileStager extends TestCase {\n+\n+  public void testProductStructure(){\n+    FileManagerFileStager stager = new FileManagerFileStager();\n+    try {\n+      Product p = stager.createProduct(new URI(\"file://tmp/test.txt\"));\n+      assertNotNull(p);\n+      assertEquals(Product.STRUCTURE_FLAT, p.getProductStructure());\n+    } catch (URISyntaxException e) {\n+      e.printStackTrace();\n+      fail(e.getLocalizedMessage());\n+    }\n+    \n+  }\n+}",
                "raw_url": "https://github.com/apache/oodt/raw/44c1555543ff912a907c592d225b5e69564a6a52/pge/src/test/java/org/apache/oodt/cas/pge/staging/TestFileManagerFileStager.java",
                "sha": "e74c6b84d9ef50ffa1976b90c00ad171c1275148",
                "status": "added"
            }
        ],
        "message": "Fix for OODT-954: CAS-PGE FileManagerFileStager has NPE b/c it does not set Product Structure",
        "parent": "https://github.com/apache/oodt/commit/ffd8ad0cc4dd2ee0e9a50c5ecb793817b41cba4e",
        "patched_files": [
            "FileManagerFileStager.java"
        ],
        "repo": "oodt",
        "unit_tests": [
            "TestFileManagerFileStager.java"
        ]
    },
    "oodt_6338e49": {
        "bug_id": "oodt_6338e49",
        "commit": "https://github.com/apache/oodt/commit/6338e4979d4c8b58dad3f8ca1ab7adfbd6f8d8dd",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/oodt/blob/6338e4979d4c8b58dad3f8ca1ab7adfbd6f8d8dd/filemgr/src/main/java/org/apache/oodt/cas/filemgr/catalog/LuceneCatalog.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/filemgr/src/main/java/org/apache/oodt/cas/filemgr/catalog/LuceneCatalog.java?ref=6338e4979d4c8b58dad3f8ca1ab7adfbd6f8d8dd",
                "deletions": 4,
                "filename": "filemgr/src/main/java/org/apache/oodt/cas/filemgr/catalog/LuceneCatalog.java",
                "patch": "@@ -897,7 +897,8 @@ public ProductPage getLastProductPage(ProductType type) {\n      */\n     public ProductPage getNextPage(ProductType type, ProductPage currentPage) {\n         if(type==null){\n-            return null;\n+            LOG.warning(\"getNextPage: Provided type was null: Returning blank page.\");\n+            return ProductPage.blankPage();\n         }\n         if (currentPage == null) {\n             return getFirstPage(type);\n@@ -921,11 +922,11 @@ public ProductPage getNextPage(ProductType type, ProductPage currentPage) {\n                   \"CatalogException getting next page for product type: [\"\n                           + type.getProductTypeId()\n                           + \"] from catalog: Message: \" + e.getMessage());\n-            return null;\n+            return ProductPage.blankPage();\n         }\n         // There are no products and thus no next page\n         if (products == null || (products.size() == 0)) {\n-        \t  return null;\n+        \t  return ProductPage.blankPage();\n         }\n         nextPage.setPageProducts(products);\n \n@@ -940,7 +941,8 @@ public ProductPage getNextPage(ProductType type, ProductPage currentPage) {\n      */\n     public ProductPage getPrevPage(ProductType type, ProductPage currentPage) {\n         if(type==null){\n-            return null;\n+            LOG.warning(\"getPrevPage: Provided type was null: Returning blank page.\");\n+            return ProductPage.blankPage();\n         }\n \n         if (currentPage == null) {",
                "raw_url": "https://github.com/apache/oodt/raw/6338e4979d4c8b58dad3f8ca1ab7adfbd6f8d8dd/filemgr/src/main/java/org/apache/oodt/cas/filemgr/catalog/LuceneCatalog.java",
                "sha": "ae218d89bac8f2e16acdad7b6268d3e6cb9efef0",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/oodt/blob/6338e4979d4c8b58dad3f8ca1ab7adfbd6f8d8dd/filemgr/src/main/java/org/apache/oodt/cas/filemgr/structs/ProductPage.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/filemgr/src/main/java/org/apache/oodt/cas/filemgr/structs/ProductPage.java?ref=6338e4979d4c8b58dad3f8ca1ab7adfbd6f8d8dd",
                "deletions": 0,
                "filename": "filemgr/src/main/java/org/apache/oodt/cas/filemgr/structs/ProductPage.java",
                "patch": "@@ -17,6 +17,7 @@\n \n package org.apache.oodt.cas.filemgr.structs;\n \n+import java.util.Collections;\n //JDK imports\n import java.util.List;\n import java.util.Vector;\n@@ -176,6 +177,7 @@ public static ProductPage blankPage() {\n         blank.setPageNum(0);\n         blank.setTotalPages(0);\n         blank.setPageSize(0);\n+        blank.setPageProducts(Collections.EMPTY_LIST);\n         return blank;\n     }\n     ",
                "raw_url": "https://github.com/apache/oodt/raw/6338e4979d4c8b58dad3f8ca1ab7adfbd6f8d8dd/filemgr/src/main/java/org/apache/oodt/cas/filemgr/structs/ProductPage.java",
                "sha": "2ed9312a406f64664c4a16b7c628217eb71baf2a",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/oodt/blob/6338e4979d4c8b58dad3f8ca1ab7adfbd6f8d8dd/filemgr/src/test/java/org/apache/oodt/cas/filemgr/catalog/TestLuceneCatalog.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/filemgr/src/test/java/org/apache/oodt/cas/filemgr/catalog/TestLuceneCatalog.java?ref=6338e4979d4c8b58dad3f8ca1ab7adfbd6f8d8dd",
                "deletions": 2,
                "filename": "filemgr/src/test/java/org/apache/oodt/cas/filemgr/catalog/TestLuceneCatalog.java",
                "patch": "@@ -502,7 +502,10 @@ public void testGetNextPageNullType(){\n         ProductPage page = myCat.getNextPage(null, myCat.getFirstPage(type));\n \n \n-        assertNull(page);\n+        assertNotNull(page);\n+        assertEquals(0, page.getPageNum());\n+        assertEquals(0, page.getTotalPages());\n+        assertEquals(0, page.getPageSize());\n     }\n \n     public void testGetNextPageNullCurrentPage(){\n@@ -775,7 +778,10 @@ public void testGetPrevPageNullProductType(){\n                                        .size());\n         ProductPage page2 = myCat.getNextPage(type, myCat.getFirstPage(type));\n         ProductPage page = myCat.getPrevPage(null, page2);\n-        assertNull(page);\n+        assertNotNull(page);\n+        assertEquals(0, page.getPageNum());\n+        assertEquals(0, page.getPageSize());\n+        assertEquals(0, page.getTotalPages());\n \n     }\n ",
                "raw_url": "https://github.com/apache/oodt/raw/6338e4979d4c8b58dad3f8ca1ab7adfbd6f8d8dd/filemgr/src/test/java/org/apache/oodt/cas/filemgr/catalog/TestLuceneCatalog.java",
                "sha": "890c20c2a9e506813d5aa845c7272d06556941d8",
                "status": "modified"
            },
            {
                "additions": 37,
                "blob_url": "https://github.com/apache/oodt/blob/6338e4979d4c8b58dad3f8ca1ab7adfbd6f8d8dd/pcs/core/src/main/java/org/apache/oodt/pcs/util/FileManagerUtils.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/pcs/core/src/main/java/org/apache/oodt/pcs/util/FileManagerUtils.java?ref=6338e4979d4c8b58dad3f8ca1ab7adfbd6f8d8dd",
                "deletions": 0,
                "filename": "pcs/core/src/main/java/org/apache/oodt/pcs/util/FileManagerUtils.java",
                "patch": "@@ -22,6 +22,7 @@\n import org.apache.oodt.pcs.query.FilenameQuery;\n import org.apache.oodt.cas.filemgr.structs.Element;\n import org.apache.oodt.cas.filemgr.structs.Product;\n+import org.apache.oodt.cas.filemgr.structs.ProductPage;\n import org.apache.oodt.cas.filemgr.structs.ProductType;\n import org.apache.oodt.cas.filemgr.structs.Query;\n import org.apache.oodt.cas.filemgr.structs.Reference;\n@@ -322,6 +323,42 @@ public Product safeGetProductByName(String prodName) {\n \n     return p;\n   }\n+  \n+\n+  /**\n+   * Gets the number of products for the given type.\n+   * @param type The given type.\n+   * @return The number of products.\n+   */\n+  public int safeGetNumProducts(ProductType type){\n+    int numProducts = -1;\n+    try{\n+      numProducts = this.fmgrClient.getNumProducts(type);\n+    }\n+    catch(Exception e){\n+      e.printStackTrace();\n+      LOG.warning(\"Exception getting num products by type: [\"+type.getName()+\"]: \"\n+          + \"Message: \"+e.getLocalizedMessage());\n+    }\n+    \n+    return numProducts;\n+  }\n+\n+  \n+  /**\n+   * Get a first page of Products using the pagination API.\n+   * @param type Gets the first page of products for this type.\n+   * @return The first page of products for this type.\n+   */\n+  public ProductPage safeFirstPage(ProductType type) {\n+    ProductPage page = null;\n+    try {\n+      page = this.fmgrClient.getFirstPage(type);\n+    } catch (Exception e) {\n+      LOG.info(\"No products found for: \" + type.getName());\n+    }\n+    return page;\n+  }\n \n   public String getFilePath(Product prod) {\n     if (prod.getProductReferences() == null) {",
                "raw_url": "https://github.com/apache/oodt/raw/6338e4979d4c8b58dad3f8ca1ab7adfbd6f8d8dd/pcs/core/src/main/java/org/apache/oodt/pcs/util/FileManagerUtils.java",
                "sha": "aecefb7a350ff5cc7de944bc70ca4355981a719e",
                "status": "modified"
            }
        ],
        "message": "- clear up some NPEs in product paging\n- add some methods to FM utils in PCS core",
        "parent": "https://github.com/apache/oodt/commit/6d5e10de2360352a771f0353aa087bf70d9fa5d9",
        "patched_files": [
            "FileManagerUtils.java",
            "LuceneCatalog.java",
            "ProductPage.java"
        ],
        "repo": "oodt",
        "unit_tests": [
            "TestLuceneCatalog.java"
        ]
    },
    "oodt_818d781": {
        "bug_id": "oodt_818d781",
        "commit": "https://github.com/apache/oodt/commit/818d7814d5862b197cdef558ab5a694359e776a8",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/oodt/blob/818d7814d5862b197cdef558ab5a694359e776a8/filemgr/src/main/java/org/apache/oodt/cas/filemgr/cli/action/FileManagerCliAction.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/filemgr/src/main/java/org/apache/oodt/cas/filemgr/cli/action/FileManagerCliAction.java?ref=818d7814d5862b197cdef558ab5a694359e776a8",
                "deletions": 1,
                "filename": "filemgr/src/main/java/org/apache/oodt/cas/filemgr/cli/action/FileManagerCliAction.java",
                "patch": "@@ -40,7 +40,10 @@ public String getUrl() {\n     }\n \n     /**\n-     * TODO(imesha) Fix client closing problem which makes it usable only once\n+     * Returns a new {@link FileManagerClient}. The client should be closed by calling {@link FileManagerClient#close()}\n+     * after using.\n+     *\n+     * TODO remove reference to {@link #fmc} which cannot be removed atm due to mock client used in tests.\n      *\n      * @return client\n      * @throws MalformedURLException",
                "raw_url": "https://github.com/apache/oodt/raw/818d7814d5862b197cdef558ab5a694359e776a8/filemgr/src/main/java/org/apache/oodt/cas/filemgr/cli/action/FileManagerCliAction.java",
                "sha": "d1dd9cdad2db87910b23a5689af236a0e7e3d159",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/oodt/blob/818d7814d5862b197cdef558ab5a694359e776a8/filemgr/src/main/java/org/apache/oodt/cas/filemgr/structs/Product.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/filemgr/src/main/java/org/apache/oodt/cas/filemgr/structs/Product.java?ref=818d7814d5862b197cdef558ab5a694359e776a8",
                "deletions": 2,
                "filename": "filemgr/src/main/java/org/apache/oodt/cas/filemgr/structs/Product.java",
                "patch": "@@ -360,7 +360,7 @@ private void parse(Document doc) {\n     }\n     /**\n      * Set time product was ingested.\n-     * @param productRecievedTime\n+     * @param productReceivedTime\n      */\n     public void setProductRecievedTime(String productReceivedTime) {\n         this.productReceivedTime = productReceivedTime;\n@@ -372,6 +372,6 @@ public String getProductReceivedTime() {\n \n     @Override\n     public String toString() {\n-        return String.format(\"%s[%s-%s]\", this.getProductId(), this.getProductName(), this.getProductType().getName());\n+        return String.format(\"%s[%s-%s]\", this.getProductId(), this.getProductName(), this.getProductType());\n     }\n }",
                "raw_url": "https://github.com/apache/oodt/raw/818d7814d5862b197cdef558ab5a694359e776a8/filemgr/src/main/java/org/apache/oodt/cas/filemgr/structs/Product.java",
                "sha": "af7ae79880827adc8c7f63185599688a98711b96",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/oodt/blob/818d7814d5862b197cdef558ab5a694359e776a8/pge/src/main/java/org/apache/oodt/cas/pge/PGETaskInstance.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/pge/src/main/java/org/apache/oodt/cas/pge/PGETaskInstance.java?ref=818d7814d5862b197cdef558ab5a694359e776a8",
                "deletions": 5,
                "filename": "pge/src/main/java/org/apache/oodt/cas/pge/PGETaskInstance.java",
                "patch": "@@ -552,7 +552,7 @@ protected void runIngestCrawler(ProductCrawler crawler) throws Exception {\n    }\n \n    protected void verifyIngests(ProductCrawler crawler) throws PGEException {\n-      logger.debug(\"Verifying ingests successful...\");\n+      julLogger.info(\"Verifying ingests successful...\");\n       boolean ingestsSuccess = true;\n       String exceptionMsg = \"\";\n       for (IngestStatus status : crawler.getIngestStatus()) {\n@@ -563,16 +563,16 @@ protected void verifyIngests(ProductCrawler crawler) throws PGEException {\n                   + status.getResult() + \"',msg='\" + status.getMessage() + \"']\";\n             ingestsSuccess = false;\n          } else if (!status.getResult().equals(IngestStatus.Result.SUCCESS)) {\n-            logger.warn(\"Product was not ingested [file='{}', result='{}', msg='{}'\",\n-                    status.getProduct().getAbsolutePath(), status.getResult(),status.getMessage());\n+            julLogger.warning(String.format(\"Product was not ingested [file='%s',result='%s',msg='%s']\",\n+                    status.getProduct().getAbsolutePath(), status.getResult(),status.getMessage()));\n          }\n       }\n \n       if (!ingestsSuccess) {\n-         logger.error(\"Ingest wasn't successful: {}\", exceptionMsg);\n+         julLogger.severe(\"Ingest wasn't successful: \" + exceptionMsg);\n          throw new PGEException(exceptionMsg);\n       } else {\n-         logger.info(\"Ingests were successful\");\n+         julLogger.info(\"Ingests were successful\");\n       }\n    }\n ",
                "raw_url": "https://github.com/apache/oodt/raw/818d7814d5862b197cdef558ab5a694359e776a8/pge/src/main/java/org/apache/oodt/cas/pge/PGETaskInstance.java",
                "sha": "edfe6927c6cfb28b63df61ea1bf8a361613dc07e",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE in Product.toString() and fixed JUL logger related test failure\nin PGETaskInstance",
        "parent": "https://github.com/apache/oodt/commit/a3e51edaafdd221faea3a7d9f9ab3a3471ddf009",
        "patched_files": [
            "PGETaskInstance.java",
            "Product.java"
        ],
        "repo": "oodt",
        "unit_tests": [
            "TestPGETaskInstance.java",
            "TestProduct.java"
        ]
    },
    "oodt_a51bd6a": {
        "bug_id": "oodt_a51bd6a",
        "commit": "https://github.com/apache/oodt/commit/a51bd6a15b2c653a7876d1180924a553d3376ee6",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/oodt/blob/a51bd6a15b2c653a7876d1180924a553d3376ee6/CHANGES.txt",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/CHANGES.txt?ref=a51bd6a15b2c653a7876d1180924a553d3376ee6",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -4,6 +4,8 @@ Apache OODT Change Log\n Release 0.7 - Current Development\n --------------------------------------------\n \n+* OODT-593 Dyn workflows in Workflow Manager cause NPEs on restart (mattmann)\n+\n * OODT-705 RADIX one step script (mattmann)\n \n * OODT-703 DataUtil.createProductZipFile throws exception when creating a zipfile of a hierarchical product (thomas)",
                "raw_url": "https://github.com/apache/oodt/raw/a51bd6a15b2c653a7876d1180924a553d3376ee6/CHANGES.txt",
                "sha": "8db617e546336d8e7c2cf258001bf119ea3643ab",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/oodt/blob/a51bd6a15b2c653a7876d1180924a553d3376ee6/workflow/src/main/java/org/apache/oodt/cas/workflow/system/XmlRpcWorkflowManager.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/workflow/src/main/java/org/apache/oodt/cas/workflow/system/XmlRpcWorkflowManager.java?ref=a51bd6a15b2c653a7876d1180924a553d3376ee6",
                "deletions": 4,
                "filename": "workflow/src/main/java/org/apache/oodt/cas/workflow/system/XmlRpcWorkflowManager.java",
                "patch": "@@ -165,7 +165,7 @@ public Vector getRegisteredEvents() throws RepositoryException {\n     }\n \n     public Hashtable getFirstPage() {\n-        WorkflowInstancePage page = engine.getInstanceRepository()\n+    \tWorkflowInstancePage page = engine.getInstanceRepository()\n                 .getFirstPage();\n         if (page != null) {\n             populateWorkflows(page.getPageWorkflows());\n@@ -174,7 +174,6 @@ public Hashtable getFirstPage() {\n             return XmlRpcStructFactory\n                     .getXmlRpcWorkflowInstancePage(WorkflowInstancePage\n                             .blankPage());\n-\n     }\n \n     public Hashtable getNextPage(Hashtable currentPage) {\n@@ -399,6 +398,12 @@ public Vector getWorkflowInstancesByStatus(String status)\n                     // TODO: hack for now, fix this, we shouldn't have to cast\n                     // here, bad\n                     // design\n+                    if(wDesc == null){\n+                      //Possible dynamic workflow for instance\n+                      //reconsitute it from cache\n+                      wDesc = wInst.getWorkflow();\n+\n+                    }\n                     wInst.setWorkflow(wDesc);\n                     Hashtable workflowInstance = XmlRpcStructFactory\n                             .getXmlRpcWorkflowInstance(wInst);\n@@ -441,6 +446,12 @@ public Vector getWorkflowInstances() throws EngineException {\n                     // pick up the description of the workflow\n                     Workflow wDesc = repo.getWorkflowById(wInst.getWorkflow()\n                             .getId());\n+                    if(wDesc == null){\n+                      //possible dynamic workflow\n+                      //reconsitute it from cached instance\n+                      wDesc = wInst.getWorkflow();\n+\n+                    }\n                     // TODO: hack for now, fix this, we shouldn't have to cast\n                     // here, bad\n                     // design\n@@ -666,8 +677,13 @@ private void populateWorkflows(List wInsts) {\n         if (wInsts != null && wInsts.size() > 0) {\n             for (Iterator i = wInsts.iterator(); i.hasNext();) {\n                 WorkflowInstance wInst = (WorkflowInstance) i.next();\n-                wInst.setWorkflow(safeGetWorkflowById(wInst.getWorkflow()\n-                        .getId()));\n+                if(wInst.getWorkflow() == null || \n+                \t(wInst.getWorkflow() != null && \n+                \t  (wInst.getWorkflow().getName() == null || \n+                \t   wInst.getWorkflow().getId() == null))){\n+                    wInst.setWorkflow(safeGetWorkflowById(wInst.getWorkflow()\n+                            .getId()));                \t\n+                }\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/oodt/raw/a51bd6a15b2c653a7876d1180924a553d3376ee6/workflow/src/main/java/org/apache/oodt/cas/workflow/system/XmlRpcWorkflowManager.java",
                "sha": "26ed5d5bb25f2bd321389c8eac9972f7642e22d7",
                "status": "modified"
            }
        ],
        "message": "- fix for OODT-593 Dyn workflows in Workflow Manager cause NPEs on restart\n\ngit-svn-id: https://svn.apache.org/repos/asf/oodt/trunk@1601671 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/oodt/commit/1ed354fc4c5756e51ca508c34cc35da8e9b16553",
        "patched_files": [
            "XmlRpcWorkflowManager.java"
        ],
        "repo": "oodt",
        "unit_tests": [
            "TestXmlRpcWorkflowManager.java"
        ]
    },
    "oodt_c77ca81": {
        "bug_id": "oodt_c77ca81",
        "commit": "https://github.com/apache/oodt/commit/c77ca81c5fccdcab6c072853d7be051e869a0a35",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/oodt/blob/c77ca81c5fccdcab6c072853d7be051e869a0a35/pge/src/main/java/org/apache/oodt/cas/pge/PGETask.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/pge/src/main/java/org/apache/oodt/cas/pge/PGETask.java?ref=c77ca81c5fccdcab6c072853d7be051e869a0a35",
                "deletions": 4,
                "filename": "pge/src/main/java/org/apache/oodt/cas/pge/PGETask.java",
                "patch": "@@ -20,10 +20,11 @@\n import org.apache.oodt.cas.metadata.SerializableMetadata;\n import org.apache.oodt.cas.workflow.structs.WorkflowTaskConfiguration;\n import org.apache.oodt.cas.workflow.structs.exceptions.WorkflowTaskInstanceException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.io.File;\n import java.io.IOException;\n-import java.util.logging.Logger;\n \n import static org.apache.oodt.cas.pge.util.GenericPgeObjectFactory.createPGETaskInstance;\n \n@@ -37,7 +38,7 @@\n  */\n public class PGETask {\n \n-    private static final Logger LOGGER = Logger.getLogger(PGETask.class.getName());\n+    private static final Logger logger = LoggerFactory.getLogger(PGETask.class);\n \n     private Metadata metadata;\n \n@@ -51,8 +52,7 @@ public PGETask(Metadata metadata, WorkflowTaskConfiguration wftConfig) {\n     public void run(String pgeTaskInstanceClasspath)\n             throws\n         WorkflowTaskInstanceException {\n-        PGETaskInstance pgeTaskInst = createPGETaskInstance(\n-                pgeTaskInstanceClasspath, LOGGER);\n+        PGETaskInstance pgeTaskInst = createPGETaskInstance(pgeTaskInstanceClasspath, logger);\n         pgeTaskInst.run(this.metadata, this.wftConfig);\n     }\n ",
                "raw_url": "https://github.com/apache/oodt/raw/c77ca81c5fccdcab6c072853d7be051e869a0a35/pge/src/main/java/org/apache/oodt/cas/pge/PGETask.java",
                "sha": "d55c5320c5ba1254b0a62c2390368317e86abd4b",
                "status": "modified"
            },
            {
                "additions": 134,
                "blob_url": "https://github.com/apache/oodt/blob/c77ca81c5fccdcab6c072853d7be051e869a0a35/pge/src/main/java/org/apache/oodt/cas/pge/PGETaskInstance.java",
                "changes": 277,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/pge/src/main/java/org/apache/oodt/cas/pge/PGETaskInstance.java?ref=c77ca81c5fccdcab6c072853d7be051e869a0a35",
                "deletions": 143,
                "filename": "pge/src/main/java/org/apache/oodt/cas/pge/PGETaskInstance.java",
                "patch": "@@ -57,6 +57,8 @@\n import org.apache.oodt.cas.workflow.util.ScriptFile;\n import org.apache.oodt.commons.exceptions.CommonsException;\n import org.apache.oodt.commons.exec.ExecUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.context.support.FileSystemXmlApplicationContext;\n \n import java.io.File;\n@@ -71,8 +73,6 @@\n import java.util.LinkedList;\n import java.util.List;\n import java.util.logging.FileHandler;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n import java.util.logging.SimpleFormatter;\n import java.util.regex.Pattern;\n \n@@ -96,7 +96,14 @@\n  */\n public class PGETaskInstance implements WorkflowTaskInstance {\n \n-   protected Logger logger = Logger.getLogger(PGETaskInstance.class.getName());\n+   protected Logger logger = LoggerFactory.getLogger(PGETaskInstance.class);\n+\n+   /**\n+    * This JUL logger is kept for now to avoid large scale changes in logging dependencies.\n+    * Should be removed in future with an alternative to address the logging dependencies.\n+    */\n+   protected java.util.logging.Logger julLogger = java.util.logging.Logger.getLogger(PGETaskInstance.class.getName());\n+\n    private WorkflowManagerClient wmClient;\n    private String workflowInstId;\n    protected PgeMetadata pgeMetadata;\n@@ -106,12 +113,18 @@ protected PGETaskInstance() {}\n \n    @Override\n    public void run(Metadata metadata, WorkflowTaskConfiguration config) throws WorkflowTaskInstanceException {\n+      logger.debug(\"Starting PGE Task instance...\");\n       try {\n          // Initialize CAS-PGE.\n          pgeMetadata = createPgeMetadata(metadata, config);\n          pgeConfig = createPgeConfig();\n          runPropertyAdders();\n-         logger = createLogger(); // use workflow ID specific logger from now on\n+         workflowInstId = getWorkflowInstanceId();\n+\n+         // use workflow ID specific logger from now on\n+         logger = LoggerFactory.getLogger(PGETaskInstance.class.getName() + \".\" + workflowInstId);\n+         logger.debug(\"Workflow instance ID is [{}]\", workflowInstId);\n+         julLogger = createLogger();\n \n          // Write out PgeMetadata.\n          dumpMetadataIfRequested();\n@@ -135,30 +148,27 @@ public void run(Metadata metadata, WorkflowTaskConfiguration config) throws Work\n          // Commit dynamic metadata.\n          updateDynamicMetadata();\n       } catch (Exception e) {\n-         logger.log(Level.SEVERE, \"PGETask FAILED!!! : \" + e.getMessage(), e);\n-         throw new WorkflowTaskInstanceException(\"PGETask FAILED!!! : \"\n-               + e.getMessage(), e);\n+         logger.error(\"PGETask FAILED!!! Error occurred when running\", e);\n+         throw new WorkflowTaskInstanceException(\"PGETask FAILED!!! : \" + e.getMessage(), e);\n       }\n    }\n \n    protected void updateStatus(String status) throws Exception {\n       logger.info(\"Updating status to workflow as [\" + status + \"]\");\n       if (!getWorkflowManagerClient().updateWorkflowInstanceStatus(workflowInstId, status)) {\n-         throw new PGEException(\n-               \"Failed to update workflow status : client returned false\");\n+         throw new PGEException(\"Failed to update workflow status : client returned false\");\n       }\n    }\n \n-   protected Logger createLogger() throws IOException, PGEException {\n+   protected java.util.logging.Logger createLogger() throws IOException, PGEException {\n       File logDir = new File(pgeConfig.getExeDir(), \"logs\");\n       if (!(logDir.exists() || logDir.mkdirs())) {\n          throw new PGEException(\"mkdirs for logs directory return false\");\n       }\n \n-      Logger logger = Logger.getLogger(PGETaskInstance.class.getName()\n-            + \".\" + workflowInstId);\n-      FileHandler handler = new FileHandler(\n-            new File(logDir, createLogFileName()).getAbsolutePath());\n+      java.util.logging.Logger logger = java.util.logging.Logger.getLogger(PGETaskInstance.class.getName() + \".\" + workflowInstId);\n+      // TODO Need to find an alternative way to add a dynamic handler to write workflowInstance logs to a separate file\n+      FileHandler handler = new FileHandler(new File(logDir, createLogFileName()).getAbsolutePath());\n       handler.setEncoding(\"UTF-8\");\n       handler.setFormatter(new SimpleFormatter());\n       logger.addHandler(handler);\n@@ -170,14 +180,14 @@ protected String createLogFileName() {\n       if (filenamePattern != null) {\n          return filenamePattern;\n       } else {\n-         return pgeMetadata.getMetadata(NAME) + \".\" + System.currentTimeMillis()\n-            + \".log\";\n+         return pgeMetadata.getMetadata(NAME) + \".\" + System.currentTimeMillis() + \".log\";\n       }\n    }\n \n-   protected PgeMetadata createPgeMetadata(Metadata dynMetadata,\n-         WorkflowTaskConfiguration config) {\n-      logger.info(\"Converting workflow configuration to static metadata...\");\n+   protected PgeMetadata createPgeMetadata(Metadata dynMetadata, WorkflowTaskConfiguration config) {\n+      logger.info(\"Converting workflow configuration to static metadata\");\n+      logger.debug(\"PGE Metadata Config: {}\", config.getProperties().entrySet());\n+      logger.debug(\"PGE Metadata Dynamic Metadata: {}\", dynMetadata.getMap());\n       Metadata staticMetadata = new Metadata();\n       for (Object objKey : config.getProperties().keySet()) {\n          String key = (String) objKey;\n@@ -187,45 +197,38 @@ protected PgeMetadata createPgeMetadata(Metadata dynMetadata,\n                   Splitter.on(\",\").trimResults()\n                   .omitEmptyStrings()\n                   .split(config.getProperty(key)));\n-            logger.finest(\"Adding static metadata: key = [\" + key\n-                  + \"] value = \" + values);\n+            logger.debug(\"Adding static metadata: key = [{}] value = {}\", key, values);\n             staticMetadata.addMetadata(key, values);\n          } else {\n             String value = config.getProperty(key);\n-            logger.finest(\"Adding static metadata: key = [\" + key\n-                  + \"] value = [\" + value + \"]\");\n+            logger.debug(\"Adding static metadata: key = [{}] value = {}\", key, value);\n             staticMetadata.addMetadata(key, value);\n          }\n       }\n+\n       logger.info(\"Loading workflow context metadata...\");\n       for (String key : dynMetadata.getAllKeys()) {\n-         logger.finest(\n-               \"Adding dynamic metadata: key = [\" + key + \"] value = \"\n-                     + dynMetadata.getAllMetadata(key));\n+         logger.debug(\"Adding dynamic metadata: key = [{}] value = {}\", key, dynMetadata.getAllMetadata(key));\n       }\n       return new PgeMetadata(staticMetadata, dynMetadata);\n    }\n \n    protected PgeConfig createPgeConfig() throws Exception {\n       logger.info(\"Create PgeConfig...\");\n-      String pgeConfigBuilderClass = pgeMetadata\n-            .getMetadata(PGE_CONFIG_BUILDER);\n+      String pgeConfigBuilderClass = pgeMetadata.getMetadata(PGE_CONFIG_BUILDER);\n       if (pgeConfigBuilderClass != null) {\n-         logger.info(\"Using PgeConfigBuilder: \" + pgeConfigBuilderClass);\n-         return createPgeConfigBuilder(pgeConfigBuilderClass, logger)\n-               .build(pgeMetadata);\n+         logger.info(\"Using PgeConfigBuilder: {}\", pgeConfigBuilderClass);\n+         return createPgeConfigBuilder(pgeConfigBuilderClass, logger).build(pgeMetadata);\n       } else {\n-         logger.info(\"Using default PgeConfigBuilder: \"\n-               + XmlFilePgeConfigBuilder.class.getCanonicalName());\n+         logger.info(\"Using default PgeConfigBuilder: {}\", XmlFilePgeConfigBuilder.class.getCanonicalName());\n          return new XmlFilePgeConfigBuilder().build(pgeMetadata);\n       }\n    }\n \n    protected void runPropertyAdders() throws PGEException {\n       try {\n          logger.info(\"Loading/Running property adders...\");\n-         List<String> propertyAdders = pgeMetadata\n-               .getAllMetadata(PROPERTY_ADDERS);\n+         List<String> propertyAdders = pgeMetadata.getAllMetadata(PROPERTY_ADDERS);\n          if (propertyAdders != null) {\n             for (String propertyAdder : propertyAdders) {\n                runPropertyAdder(loadPropertyAdder(propertyAdder));\n@@ -234,22 +237,19 @@ protected void runPropertyAdders() throws PGEException {\n             logger.info(\"No property adders specified\");\n          }\n       } catch (Exception e) {\n-         throw new PGEException(\"Failed to instanciate/run Property Adders : \"\n-               + e.getMessage(), e);\n+         logger.error(\"Error occurred when running property adders\", e);\n+         throw new PGEException(\"Failed to instantiate/run Property Adders : \" + e.getMessage(), e);\n       }\n    }\n \n-   protected ConfigFilePropertyAdder loadPropertyAdder(\n-         String propertyAdderClasspath) {\n-      logger.fine(\"Loading property adder: \" + propertyAdderClasspath);\n+   protected ConfigFilePropertyAdder loadPropertyAdder(String propertyAdderClasspath) {\n+      logger.debug(\"Loading property adder: {}\", propertyAdderClasspath);\n       return createConfigFilePropertyAdder(propertyAdderClasspath, logger);\n    }\n \n    protected void runPropertyAdder(ConfigFilePropertyAdder propAdder) {\n-      logger.info(\"Running property adder: \"\n-            + propAdder.getClass().getCanonicalName());\n-      propAdder.addConfigProperties(pgeMetadata,\n-            pgeConfig.getPropertyAdderCustomArgs());\n+      logger.info(\"Running property adder: {}\", propAdder.getClass().getCanonicalName());\n+      propAdder.addConfigProperties(pgeMetadata, pgeConfig.getPropertyAdderCustomArgs());\n    }\n \n    protected WorkflowManagerClient getWorkflowManagerClient() throws MalformedURLException {\n@@ -265,9 +265,8 @@ protected WorkflowManagerClient getWorkflowManagerClient() throws MalformedURLEx\n \n    protected String getWorkflowInstanceId() {\n       String instanceId = pgeMetadata.getMetadata(CoreMetKeys.WORKFLOW_INST_ID);\n-      logger.info(\"Workflow instanceId is [\" + instanceId + \"]\");\n-      Validate.notNull(instanceId, \"Must specify \"\n-            + CoreMetKeys.WORKFLOW_INST_ID);\n+      logger.debug(\"Workflow instanceId is [{}]\", instanceId);\n+      Validate.notNull(instanceId, \"Must specify \" + CoreMetKeys.WORKFLOW_INST_ID);\n       return instanceId;\n    }\n \n@@ -290,24 +289,22 @@ protected String getDumpMetadataName() {\n    }\n \n    protected void createExeDir() throws PGEException {\n-      logger.info(\"Creating PGE execution working directory: [\"\n-            + pgeConfig.getExeDir() + \"]\");\n+      logger.info(\"Creating PGE execution working directory: [{}]\", pgeConfig.getExeDir());\n       File executionDir = new File(pgeConfig.getExeDir());\n       if (!(executionDir.exists() || executionDir.mkdirs())) {\n-         throw new PGEException(\"mkdirs returned false for creating [\"\n-               + pgeConfig.getExeDir() + \"]\");\n+         logger.warn(\"Unable to create execution working directory: {}\", pgeConfig.getExeDir());\n+         throw new PGEException(\"mkdirs returned false for creating [\" + pgeConfig.getExeDir() + \"]\");\n       }\n    }\n \n    protected void createOuputDirsIfRequested() throws PGEException {\n       for (OutputDir outputDir : pgeConfig.getOuputDirs()) {\n          if (outputDir.isCreateBeforeExe()) {\n-            logger.info(\"Creating PGE file ouput directory: [\"\n-                  + outputDir.getPath() + \"]\");\n+            logger.info(\"Creating PGE file ouput directory: [{}]\", outputDir.getPath());\n             File dir = new File(outputDir.getPath());\n             if (!(dir.exists() || dir.mkdirs())) {\n-               throw new PGEException(\"mkdir returned false for creating [\"\n-                     + outputDir.getPath() + \"]\");\n+               logger.warn(\"Unable to create output dirs: {}\", outputDir.getPath());\n+               throw new PGEException(\"mkdir returned false for creating [\" + outputDir.getPath() + \"]\");\n             }\n          }\n       }\n@@ -319,8 +316,7 @@ protected void stageFiles()\n       if (pgeConfig.getFileStagingInfo() != null) {\n          FileStager fileStager = getFileStager();\n          logger.info(\"Starting file staging...\");\n-         fileStager.stageFiles(\n-               pgeConfig.getFileStagingInfo(), pgeMetadata, logger);\n+         fileStager.stageFiles(pgeConfig.getFileStagingInfo(), pgeMetadata, logger);\n       } else {\n          logger.info(\"No files to stage.\");\n       }\n@@ -329,7 +325,7 @@ protected void stageFiles()\n    protected FileStager getFileStager() {\n       String fileStagerClass = pgeMetadata.getMetadata(FILE_STAGER);\n       if (fileStagerClass != null) {\n-         logger.info(\"Loading FileStager [\" + fileStagerClass + \"]\");\n+         logger.info(\"Loading FileStager [{}]\", fileStagerClass);\n          return createFileStager(fileStagerClass, logger);\n       } else {\n          logger.info(\"Using default FileStager [\"\n@@ -350,130 +346,123 @@ protected void createDynamicConfigFiles() throws IOException, PGEException {\n    protected void createDynamicConfigFile(DynamicConfigFile dynamicConfigFile)\n        throws PGEException, IOException {\n       Validate.notNull(dynamicConfigFile, \"dynamicConfigFile cannot be null\");\n-      logger.fine(\"Starting creation of sci pge config file [\"\n-            + dynamicConfigFile.getFilePath() + \"]...\");\n+      logger.debug(\"Starting creation of sci pge config file: {}\", dynamicConfigFile.getFilePath());\n \n       // Create parent directory if it doesn't exist.\n-      File parentDir = new File(dynamicConfigFile.getFilePath())\n-            .getParentFile();\n+      File parentDir = new File(dynamicConfigFile.getFilePath()).getParentFile();\n       if (!(parentDir.exists() || parentDir.mkdirs())) {\n+         logger.warn(\"Unable to create directory({}) with sci pge config file\", dynamicConfigFile.getFilePath());\n          throw new PGEException(\"Failed to create directory where sci pge config file [\"\n                + dynamicConfigFile.getFilePath() + \"] was to be written\");\n       }\n \n       // Load writer and write file.\n-      logger.fine(\"Loading writer class for sci pge config file [\"\n-            + dynamicConfigFile.getFilePath() + \"]...\");\n-      SciPgeConfigFileWriter writer = createSciPgeConfigFileWriter(\n-            dynamicConfigFile.getWriterClass(), logger);\n-      logger.fine(\"Loaded writer [\" + writer.getClass().getCanonicalName()\n-            + \"] for sci pge config file [\" + dynamicConfigFile.getFilePath()\n-            + \"]...\");\n-      logger.info(\"Writing sci pge config file [\" + dynamicConfigFile.getFilePath()\n-                  + \"]...\");\n+      logger.debug(\"Loading writer class for sci pge config file [{}]\", dynamicConfigFile.getFilePath());\n+      SciPgeConfigFileWriter writer = createSciPgeConfigFileWriter(dynamicConfigFile.getWriterClass(), logger);\n+      logger.debug(\"Loaded writer [{}] for sci pge config file [{}]\",\n+              writer.getClass().getCanonicalName(),dynamicConfigFile.getFilePath());\n+      logger.info(\"Writing sci pge config file [{}]\", dynamicConfigFile.getFilePath());\n       File configFile = writer.createConfigFile(dynamicConfigFile.getFilePath(),\n-            pgeMetadata.asMetadata(), dynamicConfigFile.getArgs());\n+              pgeMetadata.asMetadata(), dynamicConfigFile.getArgs());\n       if (!configFile.exists()) {\n-         throw new PGEException(\"Writer failed to create config file [\"\n-               + configFile + \"], exists returned false\");\n+         logger.warn(\"Failed to create config file '{}'. File doesn't exist\", configFile);\n+         throw new PGEException(\"Writer failed to create config file [\" + configFile + \"], exists returned false\");\n       }\n    }\n \n    protected ScriptFile buildPgeRunScript() {\n-      logger.fine(\"Creating PGE run script for shell [\" + pgeConfig.getShellType()\n-                  + \"] with contents \" + pgeConfig.getExeCmds());\n+      logger.debug(\"Creating PGE run script for shell [{}] with contents: {}\",\n+              pgeConfig.getShellType(), pgeConfig.getExeCmds());\n       ScriptFile sf = new ScriptFile(pgeConfig.getShellType());\n       sf.setCommands(pgeConfig.getExeCmds());\n       return sf;\n    }\n \n    protected File getScriptPath() {\n       File script = new File(pgeConfig.getExeDir(), getPgeScriptName());\n-      logger.fine(\"Script file with be written to [\" + script + \"]\");\n+      logger.debug(\"Script file with be written to [{}]\", script);\n       return script;\n    }\n \n    protected String getPgeScriptName() {\n       String pgeScriptName = \"sciPgeExeScript_\" + pgeMetadata.getMetadata(NAME);\n-      logger.fine(\"Generated script file name [\" + pgeScriptName + \"]\");\n+      logger.debug(\"Generated script file name [{}]\", pgeScriptName);\n       return pgeScriptName;\n    }\n \n    protected void runPge() throws Exception {\n       ScriptFile sf = null;\n       try {\n          long startTime = System.currentTimeMillis();\n-         logger.info(\"PGE start time [\" + new Date(startTime) + \"]\");\n+         logger.info(\"PGE start time [{}]\", new Date(startTime));\n \n          // create script to run\n          sf = buildPgeRunScript();\n          sf.writeScriptFile(getScriptPath().getAbsolutePath());\n \n          // run script and evaluate whether success or failure\n          updateStatus(RUNNING_PGE.getWorkflowStatusName());\n-         logger.info(\"Starting execution of PGE...\");\n+         logger.debug(\"Starting execution of PGE: {}\", sf.getCommands());\n          if (!wasPgeSuccessful(ExecUtils.callProgram(\n-               pgeConfig.getShellType() + \" \" + getScriptPath(), logger,\n+               pgeConfig.getShellType() + \" \" + getScriptPath(), julLogger,\n                new File(pgeConfig.getExeDir()).getAbsoluteFile()))) {\n+            logger.error(\"PGE didn't finish successfully: {}\", sf);\n             throw new RuntimeException(\"Pge didn't finish successfully\");\n          } else {\n-            logger.info(\n-                  \"Successfully completed running: '\" + sf.getCommands() + \"'\");\n+            logger.info(\"Successfully completed running script file: '{}'\", sf);\n          }\n \n          long endTime = System.currentTimeMillis();\n-         logger.info(\"PGE end time [\" + new Date(startTime) + \"]\");\n+         logger.info(\"PGE end time [{}]\", new Date(startTime));\n \n          long runTime = endTime - startTime;\n-         logger.info(\"PGE runtime in millis [\" + runTime + \"]\");\n+         logger.info(\"PGE runtime in millis [{}]\", runTime);\n \n          pgeMetadata.replaceMetadata(PGE_RUNTIME, Long.toString(runTime));\n-\n-      } catch (WorkflowException e) {\n-        throw new PGEException(\"Exception when executing PGE commands '\" + (sf.getCommands()) + \"' : \" + e.getMessage(), e);\n-      } catch (IOException e) {\n-        throw new PGEException(\"Exception when executing PGE commands '\" + (sf.getCommands()) + \"' : \" + e.getMessage(), e);\n+      } catch (WorkflowException | IOException e) {\n+         logger.error(\"Error when executing PGE commands: {}\", sf);\n+        throw new PGEException(\"Exception when executing PGE commands '\" +\n+                (sf.getCommands()) + \"' : \" + e.getMessage(), e);\n       }\n    }\n \n    protected boolean wasPgeSuccessful(int returnCode) {\n       return returnCode == 0;\n    }\n-   \n+\n    protected void processOutput() throws IOException {\n-     for (final OutputDir outputDir : this.pgeConfig.getOuputDirs()) {\n+      logger.debug(\"Processing output\");\n+      for (final OutputDir outputDir : this.pgeConfig.getOuputDirs()) {\n          File[] createdFiles = new File(outputDir.getPath()).listFiles();\n-       if (createdFiles != null) {\n-         for (File createdFile : createdFiles) {\n-             Metadata outputMetadata = new Metadata();\n-             for (RegExprOutputFiles regExprFiles : outputDir\n-                     .getRegExprOutputFiles()) {\n-                 if (Pattern.matches(regExprFiles.getRegExp(), createdFile\n-                         .getName())) {\n+         if (createdFiles != null) {\n+            for (File createdFile : createdFiles) {\n+               Metadata outputMetadata = new Metadata();\n+               for (RegExprOutputFiles regExprFiles : outputDir\n+                       .getRegExprOutputFiles()) {\n+                  if (Pattern.matches(regExprFiles.getRegExp(), createdFile\n+                          .getName())) {\n                      try {\n-                         PcsMetFileWriter writer = (PcsMetFileWriter) Class\n-                                 .forName(regExprFiles.getConverterClass())\n-                                 .newInstance();\n-                         outputMetadata.replaceMetadata(this.getMetadataForFile(\n-                 (regExprFiles.getRenamingConv() != null)\n-               ? createdFile = this.renameFile(createdFile, regExprFiles.getRenamingConv())\n-               : createdFile, writer, regExprFiles.getArgs()));\n+                        PcsMetFileWriter writer = (PcsMetFileWriter) Class\n+                                .forName(regExprFiles.getConverterClass())\n+                                .newInstance();\n+                        outputMetadata.replaceMetadata(this.getMetadataForFile(\n+                                (regExprFiles.getRenamingConv() != null)\n+                                        ? createdFile = this.renameFile(createdFile, regExprFiles.getRenamingConv())\n+                                        : createdFile, writer, regExprFiles.getArgs()));\n                      } catch (Exception e) {\n-                         logger.severe(\n-                                 \"Failed to create metadata file for '\"\n-                                         + createdFile + \"' : \"\n-                                         + e.getMessage());\n+                        logger.error(\"Failed to create metadata file for '{}'\", createdFile, e);\n                      }\n-                 }\n-             }\n-             if (outputMetadata.getAllKeys().size() > 0) {\n-               this.writeFromMetadata(outputMetadata, createdFile.getAbsolutePath()\n-                                                      + \".\" + this.pgeMetadata.getMetadata(MET_FILE_EXT));\n-             }\n+                  }\n+               }\n+\n+               if (outputMetadata.getAllKeys().size() > 0) {\n+                  this.writeFromMetadata(outputMetadata, createdFile.getAbsolutePath()\n+                          + \".\" + this.pgeMetadata.getMetadata(MET_FILE_EXT));\n+               }\n+            }\n          }\n-       }\n-     }\n- }\n+      }\n+   }\n \n \tprotected File renameFile(File file, PathUtilsNamingConvention renamingConv)\n         throws NamingConventionException {\n@@ -496,44 +485,41 @@ protected void writeFromMetadata(Metadata metadata, String toMetFilePath)\n \t\t\t\t.writeMetadataToXmlStream(new FileOutputStream(toMetFilePath));\n \t}\n \n-\tprotected ProductCrawler createProductCrawler()\n-        throws MalformedURLException, IllegalAccessException, CrawlerActionException, MetExtractionException,\n-        InstantiationException, FileNotFoundException, ClassNotFoundException {\n-     /* create a ProductCrawler based on whether or not the output dir specifies a MIME_EXTRACTOR_REPO */\n+   protected ProductCrawler createProductCrawler()\n+           throws MalformedURLException, IllegalAccessException, CrawlerActionException, MetExtractionException,\n+           InstantiationException, FileNotFoundException, ClassNotFoundException {\n+      /* create a ProductCrawler based on whether or not the output dir specifies a MIME_EXTRACTOR_REPO */\n       logger.info(\"Configuring ProductCrawler...\");\n       ProductCrawler crawler;\n-      if (pgeMetadata.getMetadata(MIME_EXTRACTOR_REPO) != null && \n-    \t\t  !pgeMetadata.getMetadata(MIME_EXTRACTOR_REPO).equals(\"\")){\n-          crawler = new AutoDetectProductCrawler();\n-          ((AutoDetectProductCrawler)crawler).\n-            setMimeExtractorRepo(pgeMetadata.getMetadata(MIME_EXTRACTOR_REPO));    \t  \n-      }\n-      else{\n-    \t  crawler = new StdProductCrawler();\n+      if (pgeMetadata.getMetadata(MIME_EXTRACTOR_REPO) != null &&\n+              !pgeMetadata.getMetadata(MIME_EXTRACTOR_REPO).equals(\"\")) {\n+         crawler = new AutoDetectProductCrawler();\n+         ((AutoDetectProductCrawler) crawler).\n+                 setMimeExtractorRepo(pgeMetadata.getMetadata(MIME_EXTRACTOR_REPO));\n+      } else {\n+         crawler = new StdProductCrawler();\n       }\n \n       crawler.setClientTransferer(pgeMetadata\n-            .getMetadata(INGEST_CLIENT_TRANSFER_SERVICE_FACTORY));\n+              .getMetadata(INGEST_CLIENT_TRANSFER_SERVICE_FACTORY));\n       crawler.setFilemgrUrl(pgeMetadata.getMetadata(INGEST_FILE_MANAGER_URL));\n       String crawlerConfigFile = pgeMetadata.getMetadata(CRAWLER_CONFIG_FILE);\n       if (!Strings.isNullOrEmpty(crawlerConfigFile)) {\n          crawler.setApplicationContext(\n-               new FileSystemXmlApplicationContext(crawlerConfigFile));\n+                 new FileSystemXmlApplicationContext(crawlerConfigFile));\n          List<String> actionIds = pgeMetadata.getAllMetadata(ACTION_IDS);\n          if (actionIds != null) {\n             crawler.setActionIds(actionIds);\n          }\n       }\n       crawler.setRequiredMetadata(pgeMetadata.getAllMetadata(REQUIRED_METADATA));\n       crawler.setCrawlForDirs(Boolean.parseBoolean(pgeMetadata\n-            .getMetadata(CRAWLER_CRAWL_FOR_DIRS)));\n+              .getMetadata(CRAWLER_CRAWL_FOR_DIRS)));\n       crawler.setNoRecur(!Boolean.parseBoolean(\n-            pgeMetadata.getMetadata(CRAWLER_RECUR)));\n-      logger.fine(\n-            \"Passing Workflow Metadata to CAS-Crawler as global metadata . . .\");\n+              pgeMetadata.getMetadata(CRAWLER_RECUR)));\n+      logger.debug(\"Passing Workflow Metadata to CAS-Crawler as global metadata . . .\");\n       crawler.setGlobalMetadata(pgeMetadata.asMetadata(PgeMetadata.Type.DYNAMIC));\n-      logger.fine(\"Created ProductCrawler [\"\n-            + crawler.getClass().getCanonicalName() + \"]\");\n+      logger.debug(\"Created ProductCrawler [{}]\", crawler.getClass().getCanonicalName());\n       return crawler;\n    }\n \n@@ -566,7 +552,7 @@ protected void runIngestCrawler(ProductCrawler crawler) throws Exception {\n    }\n \n    protected void verifyIngests(ProductCrawler crawler) throws PGEException {\n-      logger.info(\"Verifying ingests successful...\");\n+      logger.debug(\"Verifying ingests successful...\");\n       boolean ingestsSuccess = true;\n       String exceptionMsg = \"\";\n       for (IngestStatus status : crawler.getIngestStatus()) {\n@@ -577,19 +563,21 @@ protected void verifyIngests(ProductCrawler crawler) throws PGEException {\n                   + status.getResult() + \"',msg='\" + status.getMessage() + \"']\";\n             ingestsSuccess = false;\n          } else if (!status.getResult().equals(IngestStatus.Result.SUCCESS)) {\n-            logger.warning(\"Product was not ingested [file='\"\n-                  + status.getProduct().getAbsolutePath() + \"',result='\"\n-                  + status.getResult() + \"',msg='\" + status.getMessage() + \"']\");\n+            logger.warn(\"Product was not ingested [file='{}', result='{}', msg='{}'\",\n+                    status.getProduct().getAbsolutePath(), status.getResult(),status.getMessage());\n          }\n       }\n+\n       if (!ingestsSuccess) {\n+         logger.error(\"Ingest wasn't successful: {}\", exceptionMsg);\n          throw new PGEException(exceptionMsg);\n       } else {\n          logger.info(\"Ingests were successful\");\n       }\n    }\n \n    protected void updateDynamicMetadata() throws Exception {\n+      logger.debug(\"Updating dynamic metadata ...\");\n       pgeMetadata.commitMarkedDynamicMetadataKeys();\n       getWorkflowManagerClient()\n               .updateMetadataForWorkflow(workflowInstId, pgeMetadata.asMetadata(PgeMetadata.Type.DYNAMIC));\n@@ -600,6 +588,7 @@ public String getWorkflowInstId() {\n    }\n \n    public void setWorkflowInstId(String workflowInstId) {\n+      logger.debug(\"Set workflow instance ID: {}\", workflowInstId);\n       this.workflowInstId = workflowInstId;\n    }\n \n@@ -609,8 +598,10 @@ public void setWmClient(WorkflowManagerClient wmClient) {\n \n    @Override\n    public void finalize() throws IOException {\n+      logger.debug(\"Finalizing ...\");\n       if (wmClient != null) {\n          wmClient.close();\n+         logger.debug(\"Workflow manager client closed\");\n       }\n    }\n }",
                "raw_url": "https://github.com/apache/oodt/raw/c77ca81c5fccdcab6c072853d7be051e869a0a35/pge/src/main/java/org/apache/oodt/cas/pge/PGETaskInstance.java",
                "sha": "2609df12b22147e3a6e25ca8d82c1af792e20e1b",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/oodt/blob/c77ca81c5fccdcab6c072853d7be051e869a0a35/pge/src/main/java/org/apache/oodt/cas/pge/staging/FileManagerFileStager.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/pge/src/main/java/org/apache/oodt/cas/pge/staging/FileManagerFileStager.java?ref=c77ca81c5fccdcab6c072853d7be051e869a0a35",
                "deletions": 8,
                "filename": "pge/src/main/java/org/apache/oodt/cas/pge/staging/FileManagerFileStager.java",
                "patch": "@@ -32,15 +32,14 @@\n //Google imports\n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.collect.Lists;\n+import org.slf4j.Logger;\n \n //JDK imports\n import java.io.File;\n import java.io.IOException;\n import java.net.MalformedURLException;\n import java.net.URI;\n import java.net.URL;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n \n /**\n  * A {@link FileStager} which uses a FileManager {@link DataTransferer}.\n@@ -53,8 +52,7 @@\n    public void stageFile(URI stageFile, File destDir,\n          PgeMetadata pgeMetadata, Logger logger) throws IOException, DataTransferException, InstantiationException {\n       DataTransfer dataTransferer = createDataTransfer(pgeMetadata, logger);\n-      logger.log(Level.INFO, \"Using DataTransfer [\"\n-               + dataTransferer.getClass().getCanonicalName() + \"]\");\n+      logger.info(\"Using DataTransfer [{}]\", dataTransferer.getClass().getCanonicalName());\n       setFileManagerUrl(dataTransferer, pgeMetadata, logger);\n       dataTransferer.retrieveProduct(createProduct(stageFile), destDir);\n    }\n@@ -67,7 +65,7 @@ static DataTransfer createDataTransfer(PgeMetadata pgeMetadata,\n                .getDataTransferServiceFromFactory(pgeMetadata\n                      .getMetadata(QUERY_CLIENT_TRANSFER_SERVICE_FACTORY));\n       } else {\n-         logger.log(Level.INFO, \"Using default DataTransferer\");\n+         logger.info(\"Using default DataTransferer\");\n          return new RemoteDataTransferFactory().createDataTransfer();\n       }\n    }\n@@ -79,9 +77,8 @@ static void setFileManagerUrl(DataTransfer dataTransferer,\n       if (filemgrUrl != null) {\n          dataTransferer.setFileManagerUrl(new URL(filemgrUrl));\n       } else {\n-         logger.log(Level.WARNING, \"Metadata field [\" + QUERY_FILE_MANAGER_URL\n-               + \"] was not set, if DataTranferer requires filemgr server,\"\n-               + \" your transfers will fail\");\n+         logger.warn(\"Metadata field [{}] was not set, if DataTranferer requires filemgr server, your transfers will fail\",\n+                 QUERY_FILE_MANAGER_URL);\n       }\n    }\n ",
                "raw_url": "https://github.com/apache/oodt/raw/c77ca81c5fccdcab6c072853d7be051e869a0a35/pge/src/main/java/org/apache/oodt/cas/pge/staging/FileManagerFileStager.java",
                "sha": "4cbd27571d64ae8f324bcc0ec75a7a836dbda9d0",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/oodt/blob/c77ca81c5fccdcab6c072853d7be051e869a0a35/pge/src/main/java/org/apache/oodt/cas/pge/staging/FileStager.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/pge/src/main/java/org/apache/oodt/cas/pge/staging/FileStager.java?ref=c77ca81c5fccdcab6c072853d7be051e869a0a35",
                "deletions": 20,
                "filename": "pge/src/main/java/org/apache/oodt/cas/pge/staging/FileStager.java",
                "patch": "@@ -30,6 +30,7 @@\n \n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.collect.Lists;\n+import org.slf4j.Logger;\n \n import java.io.File;\n import java.io.IOException;\n@@ -38,8 +39,6 @@\n import java.net.URISyntaxException;\n import java.net.URL;\n import java.util.List;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n \n import static org.apache.oodt.cas.pge.metadata.PgeTaskMetKeys.QUERY_FILE_MANAGER_URL;\n \n@@ -51,36 +50,26 @@\n  */\n public abstract class FileStager {\n \n-   public void stageFiles(FileStagingInfo fileStagingInfo,\n-         PgeMetadata pgeMetadata, Logger logger)\n+   public void stageFiles(FileStagingInfo fileStagingInfo, PgeMetadata pgeMetadata, Logger logger)\n        throws PGEException, CatalogException, URISyntaxException, IOException, ConnectionException,\n        InstantiationException, DataTransferException {\n-      logger.log(Level.INFO, \"Creating staging directory [\"\n-            + fileStagingInfo.getStagingDir() + \"]\");\n+      logger.info(\"Creating staging directory [{}]\", fileStagingInfo.getStagingDir());\n       new File(fileStagingInfo.getStagingDir()).mkdirs();\n       for (String file : fileStagingInfo.getFilePaths()) {\n          File fileHandle = new File(file);\n          if (fileStagingInfo.isForceStaging() || !fileHandle.exists()) {\n-            logger.log(Level.INFO, \"Staging file [\" + file\n-                  + \"] to directory [\"\n-                  + fileStagingInfo.getStagingDir() + \"]\");\n-            stageFile(asURI(file), new File(fileStagingInfo.getStagingDir()),\n-                  pgeMetadata, logger);\n+            logger.info(\"Staging file [{}] to directory [{}]\", file,  fileStagingInfo.getStagingDir());\n+            stageFile(asURI(file), new File(fileStagingInfo.getStagingDir()), pgeMetadata, logger);\n          }\n       }\n       if (!fileStagingInfo.getProductIds().isEmpty()) {\n          FileManagerClient fmClient = createFileManagerClient(pgeMetadata);\n          for (String productId : fileStagingInfo.getProductIds()) {\n-            logger.log(Level.INFO, \"Staging product [\" + productId\n-                  + \"] to directory [\"\n-                  + fileStagingInfo.getStagingDir() + \"]\");\n+            logger.info(\"Staging product [{}] to directory [{}]\", productId, fileStagingInfo.getStagingDir());\n             for (URI uri : getProductReferences(productId, fmClient)) {\n-               logger.log(Level.INFO, \"Staging product [\" + productId\n-                     + \"] reference [\" + uri\n-                     + \"] to directory [\"\n-                     + fileStagingInfo.getStagingDir() + \"]\");\n-               stageFile(uri, new File(fileStagingInfo.getStagingDir()),\n-                     pgeMetadata, logger);\n+               logger.info(\"Staging product [{}] reference [{}] to directory [{}]\",\n+                       productId, uri, fileStagingInfo.getStagingDir());\n+               stageFile(uri, new File(fileStagingInfo.getStagingDir()), pgeMetadata, logger);\n             }\n          }\n       }",
                "raw_url": "https://github.com/apache/oodt/raw/c77ca81c5fccdcab6c072853d7be051e869a0a35/pge/src/main/java/org/apache/oodt/cas/pge/staging/FileStager.java",
                "sha": "28bb24c4ebdcb1d827f9e665fb96108f6c5ed731",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/oodt/blob/c77ca81c5fccdcab6c072853d7be051e869a0a35/pge/src/main/java/org/apache/oodt/cas/pge/util/GenericPgeObjectFactory.java",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/pge/src/main/java/org/apache/oodt/cas/pge/util/GenericPgeObjectFactory.java?ref=c77ca81c5fccdcab6c072853d7be051e869a0a35",
                "deletions": 35,
                "filename": "pge/src/main/java/org/apache/oodt/cas/pge/util/GenericPgeObjectFactory.java",
                "patch": "@@ -16,18 +16,12 @@\n  */\n package org.apache.oodt.cas.pge.util;\n \n-\n-//OODT imports\n import org.apache.oodt.cas.pge.ConfigFilePropertyAdder;\n import org.apache.oodt.cas.pge.PGETaskInstance;\n import org.apache.oodt.cas.pge.config.PgeConfigBuilder;\n import org.apache.oodt.cas.pge.staging.FileStager;\n import org.apache.oodt.cas.pge.writers.SciPgeConfigFileWriter;\n \n-//JDK imports\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n-\n \n /**\n  * Factory for creating {@link Object}s.\n@@ -38,66 +32,48 @@\n \n    private GenericPgeObjectFactory() {}\n \n-   public static PGETaskInstance createPGETaskInstance(\n-         String clazz, Logger logger) {\n+   public static PGETaskInstance createPGETaskInstance(String clazz, org.slf4j.Logger logger) {\n       try {\n          return (PGETaskInstance) Class.forName(clazz).newInstance();\n       } catch (Exception e) {\n-         logger.log(Level.SEVERE, \"Failed to create PGETaskInstance [\"\n-               + clazz + \"] : \" + e.getMessage(), e);\n+         logger.error(\"Failed to create PGETaskInstance [{}]\", clazz, e);\n          return null;\n       }\n    }\n \n-   public static PgeConfigBuilder createPgeConfigBuilder(\n-         String clazz, Logger logger) {\n+   public static PgeConfigBuilder createPgeConfigBuilder(String clazz, org.slf4j.Logger logger) {\n       try {\n          return (PgeConfigBuilder) Class.forName(clazz).newInstance();\n-      } catch (InstantiationException e) {\n-         logger.log(Level.SEVERE, \"Failed to create PgeConfigBuilder [\"\n-                                  + clazz + \"] : \" + e.getMessage(), e);\n-         return null;\n-      } catch (IllegalAccessException e) {\n-         logger.log(Level.SEVERE, \"Failed to create PgeConfigBuilder [\"\n-                                  + clazz + \"] : \" + e.getMessage(), e);\n-         return null;\n-      } catch (ClassNotFoundException e) {\n-         logger.log(Level.SEVERE, \"Failed to create PgeConfigBuilder [\"\n-                                  + clazz + \"] : \" + e.getMessage(), e);\n+      } catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) {\n+         logger.error(\"Failed to create PgeConfigBuilder [{}] : \", clazz, e);\n          return null;\n       }\n \n    }\n \n-   public static ConfigFilePropertyAdder createConfigFilePropertyAdder(\n-         String clazz, Logger logger) {\n+   public static ConfigFilePropertyAdder createConfigFilePropertyAdder(String clazz, org.slf4j.Logger logger) {\n       try {\n          return (ConfigFilePropertyAdder) Class.forName(clazz).newInstance();\n       } catch (Exception e) {\n-         logger.log(Level.SEVERE, \"Failed to create ConfigFilePropertyAdder [\"\n-               + clazz + \"] : \" + e.getMessage(), e);\n+         logger.error(\"Failed to create ConfigFilePropertyAdder [{}]\", clazz, e);\n          return null;\n       }\n    }\n \n-   public static FileStager createFileStager(\n-         String clazz, Logger logger) {\n+   public static FileStager createFileStager(String clazz, org.slf4j.Logger logger) {\n       try {\n          return (FileStager) Class.forName(clazz).newInstance();\n       } catch (Exception e) {\n-         logger.log(Level.SEVERE, \"Failed to create FileStager [\"\n-               + clazz + \"] : \" + e.getMessage(), e);\n+         logger.error(\"Failed to create FileStager [{}]\", clazz, e);\n          return null;\n       }\n    }\n \n-   public static SciPgeConfigFileWriter createSciPgeConfigFileWriter(\n-         String clazz, Logger logger) {\n+   public static SciPgeConfigFileWriter createSciPgeConfigFileWriter(String clazz, org.slf4j.Logger logger) {\n       try {\n          return (SciPgeConfigFileWriter) Class.forName(clazz).newInstance();\n       } catch (Exception e) {\n-         logger.log(Level.SEVERE, \"Failed to create SciPgeConfigFileWriter [\"\n-               + clazz + \"] : \" + e.getMessage(), e);\n+         logger.error(\"Failed to create SciPgeConfigFileWriter [{}]\", clazz, e);\n          return null;\n       }\n    }",
                "raw_url": "https://github.com/apache/oodt/raw/c77ca81c5fccdcab6c072853d7be051e869a0a35/pge/src/main/java/org/apache/oodt/cas/pge/util/GenericPgeObjectFactory.java",
                "sha": "272c657da22f720defbdef139352ca368bbdee1c",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/oodt/blob/c77ca81c5fccdcab6c072853d7be051e869a0a35/pge/src/test/java/org/apache/oodt/cas/pge/TestPGETaskInstance.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/pge/src/test/java/org/apache/oodt/cas/pge/TestPGETaskInstance.java?ref=c77ca81c5fccdcab6c072853d7be051e869a0a35",
                "deletions": 18,
                "filename": "pge/src/test/java/org/apache/oodt/cas/pge/TestPGETaskInstance.java",
                "patch": "@@ -189,15 +189,15 @@ public void testLogger() throws Exception {\n       PGETaskInstance pgeTask1 = createTestInstance();\n       PGETaskInstance pgeTask2 = createTestInstance();\n \n-      pgeTask1.logger.log(Level.INFO, \"pge1 message1\");\n-      pgeTask1.logger.log(Level.INFO, \"pge1 message2\");\n-      pgeTask2.logger.log(Level.SEVERE, \"pge2 message1\");\n-      pgeTask1.logger.log(Level.INFO, \"pge1 message3\");\n+      pgeTask1.julLogger.log(Level.INFO, \"pge1 message1\");\n+      pgeTask1.julLogger.log(Level.INFO, \"pge1 message2\");\n+      pgeTask2.julLogger.log(Level.SEVERE, \"pge2 message1\");\n+      pgeTask1.julLogger.log(Level.INFO, \"pge1 message3\");\n \n-      for (Handler handler : pgeTask1.logger.getHandlers()) {\n+      for (Handler handler : pgeTask1.julLogger.getHandlers()) {\n          handler.flush();\n       }\n-      for (Handler handler : pgeTask2.logger.getHandlers()) {\n+      for (Handler handler : pgeTask2.julLogger.getHandlers()) {\n          handler.flush();\n       }\n       File logDir = new File(pgeTask1.pgeConfig.getExeDir() + \"/logs\");\n@@ -586,17 +586,17 @@ public Result getResult() {\n             Lists.newArrayList(precondsFailIngestStatus));\n       replay(pc);\n \n-      pgeTask.logger = createMock(Logger.class);\n-      pgeTask.logger.info(\"Verifying ingests successful...\");\n-      pgeTask.logger.warning(\n+      pgeTask.julLogger = createMock(Logger.class);\n+      pgeTask.julLogger.info(\"Verifying ingests successful...\");\n+      pgeTask.julLogger.warning(\n             \"Product was not ingested [file='/tmp/dir1',result='PRECONDS_FAILED',msg='Preconditions failed']\");\n-      pgeTask.logger.info(\"Ingests were successful\");\n-      replay(pgeTask.logger);\n+      pgeTask.julLogger.info(\"Ingests were successful\");\n+      replay(pgeTask.julLogger);\n \n       pgeTask.verifyIngests(pc);\n \n       verify(pc);\n-      verify(pgeTask.logger);\n+      verify(pgeTask.julLogger);\n \n       // Test case success.\n       pc = createMock(AutoDetectProductCrawler.class);\n@@ -618,15 +618,15 @@ public Result getResult() {\n             Lists.newArrayList(successIngestStatus));\n       replay(pc);\n \n-      pgeTask.logger = createMock(Logger.class);\n-      pgeTask.logger.info(\"Verifying ingests successful...\");\n-      pgeTask.logger.info(\"Ingests were successful\");\n-      replay(pgeTask.logger);\n+      pgeTask.julLogger = createMock(Logger.class);\n+      pgeTask.julLogger.info(\"Verifying ingests successful...\");\n+      pgeTask.julLogger.info(\"Ingests were successful\");\n+      replay(pgeTask.julLogger);\n \n       pgeTask.verifyIngests(pc);\n \n       verify(pc);\n-      verify(pgeTask.logger);\n+      verify(pgeTask.julLogger);\n    }\n \n    private PGETaskInstance createTestInstance() throws Exception {\n@@ -642,7 +642,7 @@ private PGETaskInstance createTestInstance(String workflowInstId)\n       pgeTask.pgeConfig = new PgeConfig();\n       File exeDir = new File(createTmpDir(), workflowInstId);\n       pgeTask.pgeConfig.setExeDir(exeDir.getAbsolutePath());\n-      pgeTask.logger = pgeTask.createLogger();\n+      pgeTask.julLogger = pgeTask.createLogger();\n       return pgeTask;\n    }\n ",
                "raw_url": "https://github.com/apache/oodt/raw/c77ca81c5fccdcab6c072853d7be051e869a0a35/pge/src/test/java/org/apache/oodt/cas/pge/TestPGETaskInstance.java",
                "sha": "23788493bad2546e2527b3e481f0356bf6dafd0d",
                "status": "modified"
            }
        ],
        "message": "[OODT-984] Logging improvements for PGE and fixed NPE in workflowInstanceId in PGETaskInstance",
        "parent": "https://github.com/apache/oodt/commit/e5d1b7d190b8ba431137e1f780880e7c4905c3d2",
        "patched_files": [
            "FileStager.java",
            "PGETask.java",
            "FileManagerFileStager.java",
            "PGETaskInstance.java",
            "GenericPgeObjectFactory.java"
        ],
        "repo": "oodt",
        "unit_tests": [
            "TestPGETaskInstance.java",
            "TestFileStager.java",
            "TestFileManagerFileStager.java"
        ]
    },
    "oodt_e2cb723": {
        "bug_id": "oodt_e2cb723",
        "commit": "https://github.com/apache/oodt/commit/e2cb7237bf6bd0d01248ea35f78c97347fa024a8",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/oodt/blob/e2cb7237bf6bd0d01248ea35f78c97347fa024a8/CHANGES.txt",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/CHANGES.txt?ref=e2cb7237bf6bd0d01248ea35f78c97347fa024a8",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -4,6 +4,9 @@ Apache OODT Change Log\n Release 0.3-SNAPSHOT (in progress)\n --------------------------------------------\n \n+* OODT-197 Null descriptions from elements.xml cause NPE when writing \n+  elements.xml file back out (mattmann, Michael Starch)\n+\n * OODT-193 PGE ExternMetExtractor MetWriter (bfoster, mattmann)\n \n * OODT-192 PGE FilenameExtractorMetWriter (mattmann)",
                "raw_url": "https://github.com/apache/oodt/raw/e2cb7237bf6bd0d01248ea35f78c97347fa024a8/CHANGES.txt",
                "sha": "23b94b91dfea3e65e5524b451c0d0ad60c3f6d21",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/oodt/blob/e2cb7237bf6bd0d01248ea35f78c97347fa024a8/filemgr/src/main/java/org/apache/oodt/cas/filemgr/util/XmlStructFactory.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/oodt/contents/filemgr/src/main/java/org/apache/oodt/cas/filemgr/util/XmlStructFactory.java?ref=e2cb7237bf6bd0d01248ea35f78c97347fa024a8",
                "deletions": 6,
                "filename": "filemgr/src/main/java/org/apache/oodt/cas/filemgr/util/XmlStructFactory.java",
                "patch": "@@ -290,17 +290,17 @@ public static Document getElementXmlDocument(List<org.apache.oodt.cas.filemgr.st\n             for (Iterator<org.apache.oodt.cas.filemgr.structs.Element> i = elements.iterator(); i.hasNext();) {\n                 org.apache.oodt.cas.filemgr.structs.Element element = i.next();\n                 Element elementElem = document.createElement(\"element\");\n-                elementElem.setAttribute(\"id\", element.getElementId());\n-                elementElem.setAttribute(\"name\", element.getElementName());\n+                elementElem.setAttribute(\"id\", friendlyXml(element.getElementId()));\n+                elementElem.setAttribute(\"name\", friendlyXml(element.getElementName()));\n \n                 Element descriptionElem = document.createElement(\"description\");\n-                descriptionElem.appendChild(document.createTextNode(element\n-                        .getDescription()));\n+                descriptionElem.appendChild(document.createTextNode(friendlyXml(element\n+                        .getDescription())));\n                 elementElem.appendChild(descriptionElem);\n \n                 Element dcElementElem = document.createElement(\"dcElement\");\n-                dcElementElem.appendChild(document.createTextNode(element\n-                        .getDCElement() != null ? element.getDCElement() : \"\"));\n+                dcElementElem.appendChild(document.createTextNode(friendlyXml(element\n+                        .getDCElement())));\n                 elementElem.appendChild(dcElementElem);\n                 \n                 root.appendChild(elementElem);\n@@ -423,5 +423,9 @@ public static Document getProductTypeXmlDocument(List<ProductType> productTypes)\n         productTypeElementMap.put(typeId, elementList);\n         return productTypeElementMap;\n     }\n+    \n+    private static String friendlyXml(String value){\n+      return value != null ? value:\"\";\n+    }\n \n }",
                "raw_url": "https://github.com/apache/oodt/raw/e2cb7237bf6bd0d01248ea35f78c97347fa024a8/filemgr/src/main/java/org/apache/oodt/cas/filemgr/util/XmlStructFactory.java",
                "sha": "1bf47bbfe93aaba2b55b379f8994e3db64e62265",
                "status": "modified"
            }
        ],
        "message": "- fix for OODT-197 Null descriptions from elements.xml cause NPE when writing elements.xml file back out\n\ngit-svn-id: https://svn.apache.org/repos/asf/oodt/trunk@1128938 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/oodt/commit/ce0bd70f7a93f2175e39b063b0dc17bfafde097d",
        "patched_files": [
            "XmlStructFactory.java"
        ],
        "repo": "oodt",
        "unit_tests": [
            "TestXmlStructFactory.java"
        ]
    }
}