{
    "cassandra_0137829": {
        "bug_id": "cassandra_0137829",
        "commit": "https://github.com/apache/cassandra/commit/0137829ac4add5b0e5b4e25b8403e7f9ad057276",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/0137829ac4add5b0e5b4e25b8403e7f9ad057276/CHANGES.txt",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=0137829ac4add5b0e5b4e25b8403e7f9ad057276",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,3 +1,7 @@\n+0.8.0-?\n+ * fix NPE compacting index CFs (CASSANDRA-2528)\n+\n+\n 0.8.0-beta1\n  * remove Avro RPC support (CASSANDRA-926)\n  * adds support for columns that act as incr/decr counters ",
                "raw_url": "https://github.com/apache/cassandra/raw/0137829ac4add5b0e5b4e25b8403e7f9ad057276/CHANGES.txt",
                "sha": "d926c0f0fa25a7b9f16b6966680436b4becbe375",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/cassandra/blob/0137829ac4add5b0e5b4e25b8403e7f9ad057276/src/java/org/apache/cassandra/db/ColumnFamily.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamily.java?ref=0137829ac4add5b0e5b4e25b8403e7f9ad057276",
                "deletions": 19,
                "filename": "src/java/org/apache/cassandra/db/ColumnFamily.java",
                "patch": "@@ -36,7 +36,6 @@\n import org.apache.cassandra.config.CFMetaData;\n import org.apache.cassandra.config.DatabaseDescriptor;\n import org.apache.cassandra.db.filter.QueryPath;\n-import org.apache.cassandra.db.marshal.AbstractCommutativeType;\n import org.apache.cassandra.db.marshal.AbstractType;\n import org.apache.cassandra.db.marshal.MarshalException;\n import org.apache.cassandra.io.IColumnSerializer;\n@@ -49,6 +48,7 @@\n \n     /* The column serializer for this Column Family. Create based on config. */\n     private static ColumnFamilySerializer serializer = new ColumnFamilySerializer();\n+    private final CFMetaData cfm;\n \n     public static ColumnFamilySerializer serializer()\n     {\n@@ -67,29 +67,25 @@ public static ColumnFamily create(String tableName, String cfName)\n \n     public static ColumnFamily create(CFMetaData cfm)\n     {\n-        assert cfm != null;\n-        return new ColumnFamily(cfm.cfType, cfm.comparator, cfm.subcolumnComparator, cfm.cfId);\n+        return new ColumnFamily(cfm);\n     }\n \n-    private final Integer cfid;\n-    private final ColumnFamilyType type;\n-\n     private transient IColumnSerializer columnSerializer;\n     final AtomicLong markedForDeleteAt = new AtomicLong(Long.MIN_VALUE);\n     final AtomicInteger localDeletionTime = new AtomicInteger(Integer.MIN_VALUE);\n     private ConcurrentSkipListMap<ByteBuffer, IColumn> columns;\n     \n-    public ColumnFamily(ColumnFamilyType type, AbstractType comparator, AbstractType subcolumnComparator, Integer cfid)\n+    public ColumnFamily(CFMetaData cfm)\n     {\n-        this.type = type;\n-        columnSerializer = type == ColumnFamilyType.Standard ? Column.serializer() : SuperColumn.serializer(subcolumnComparator);\n-        columns = new ConcurrentSkipListMap<ByteBuffer, IColumn>(comparator);\n-        this.cfid = cfid;\n+        assert cfm != null;\n+        this.cfm = cfm;\n+        columnSerializer = cfm.cfType == ColumnFamilyType.Standard ? Column.serializer() : SuperColumn.serializer(cfm.subcolumnComparator);\n+        columns = new ConcurrentSkipListMap<ByteBuffer, IColumn>(cfm.comparator);\n      }\n     \n     public ColumnFamily cloneMeShallow()\n     {\n-        ColumnFamily cf = new ColumnFamily(type, getComparator(), getSubComparator(), cfid);\n+        ColumnFamily cf = new ColumnFamily(cfm);\n         cf.markedForDeleteAt.set(markedForDeleteAt.get());\n         cf.localDeletionTime.set(localDeletionTime.get());\n         return cf;\n@@ -100,9 +96,9 @@ public AbstractType getSubComparator()\n         return (columnSerializer instanceof SuperColumnSerializer) ? ((SuperColumnSerializer)columnSerializer).getComparator() : null;\n     }\n \n-    public ColumnFamilyType getColumnFamilyType()\n+    public ColumnFamilyType getType()\n     {\n-        return type;\n+        return cfm.cfType;\n     }\n \n     public ColumnFamily cloneMe()\n@@ -114,15 +110,15 @@ public ColumnFamily cloneMe()\n \n     public Integer id()\n     {\n-        return cfid;\n+        return cfm.cfId;\n     }\n \n     /**\n-     * @return The CFMetaData for this row, or null if the column family was dropped.\n+     * @return The CFMetaData for this row\n      */\n     public CFMetaData metadata()\n     {\n-        return DatabaseDescriptor.getCFMetaData(cfid);\n+        return cfm;\n     }\n \n     /*\n@@ -148,7 +144,7 @@ public int getColumnCount()\n \n     public boolean isSuper()\n     {\n-        return type == ColumnFamilyType.Super;\n+        return getType() == ColumnFamilyType.Super;\n     }\n \n     public void addColumn(QueryPath path, ByteBuffer value, long timestamp)\n@@ -294,7 +290,8 @@ public boolean isMarkedForDelete()\n      */\n     public ColumnFamily diff(ColumnFamily cfComposite)\n     {\n-        ColumnFamily cfDiff = new ColumnFamily(cfComposite.type, getComparator(), getSubComparator(), cfComposite.id());\n+        assert cfComposite.id().equals(id());\n+        ColumnFamily cfDiff = new ColumnFamily(cfm);\n         if (cfComposite.getMarkedForDeleteAt() > getMarkedForDeleteAt())\n         {\n             cfDiff.delete(cfComposite.getLocalDeletionTime(), cfComposite.getMarkedForDeleteAt());",
                "raw_url": "https://github.com/apache/cassandra/raw/0137829ac4add5b0e5b4e25b8403e7f9ad057276/src/java/org/apache/cassandra/db/ColumnFamily.java",
                "sha": "b617e41b91c6dc02d8531b70c479c92c2d55bb79",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/0137829ac4add5b0e5b4e25b8403e7f9ad057276/src/java/org/apache/cassandra/tools/SSTableImport.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/tools/SSTableImport.java?ref=0137829ac4add5b0e5b4e25b8403e7f9ad057276",
                "deletions": 3,
                "filename": "src/java/org/apache/cassandra/tools/SSTableImport.java",
                "patch": "@@ -278,7 +278,7 @@ private static int importUnsorted(JsonParser parser, ColumnFamily columnFamily,\n \n         for (Map.Entry<DecoratedKey, String> rowKey : decoratedKeys.entrySet())\n         {\n-            if (columnFamily.getColumnFamilyType() == ColumnFamilyType.Super)\n+            if (columnFamily.getType() == ColumnFamilyType.Super)\n             {\n                 addToSuperCF((Map<?, ?>) data.get(rowKey.getValue()), columnFamily);\n             }\n@@ -350,7 +350,7 @@ public static int importSorted(String jsonFile, ColumnFamily columnFamily, Strin\n \n                 if (tokenName.equals(\"START_ARRAY\"))\n                 {\n-                    if (columnFamily.getColumnFamilyType() == ColumnFamilyType.Super)\n+                    if (columnFamily.getType() == ColumnFamilyType.Super)\n                     {\n                         throw new RuntimeException(\"Can't write Standard columns to the Super Column Family.\");\n                     }\n@@ -360,7 +360,7 @@ public static int importSorted(String jsonFile, ColumnFamily columnFamily, Strin\n                 }\n                 else if (tokenName.equals(\"START_OBJECT\"))\n                 {\n-                    if (columnFamily.getColumnFamilyType() == ColumnFamilyType.Standard)\n+                    if (columnFamily.getType() == ColumnFamilyType.Standard)\n                     {\n                         throw new RuntimeException(\"Can't write Super columns to the Standard Column Family.\");\n                     }",
                "raw_url": "https://github.com/apache/cassandra/raw/0137829ac4add5b0e5b4e25b8403e7f9ad057276/src/java/org/apache/cassandra/tools/SSTableImport.java",
                "sha": "5e6e45c6f8c734f50c7d59999470dc736c97c672",
                "status": "modified"
            }
        ],
        "message": "fix NPE compacting index CFs\npatch by jbellis; reviewed by Jackson Chung for CASSANDRA-2528\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-0.8@1095840 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cassandra/commit/72fb2ade882e14654f12ded2b5d4d0807c7f2d2a",
        "patched_files": [
            "ColumnFamily.java",
            "SSTableImport.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "ColumnFamilyTest.java",
            "SSTableImportTest.java"
        ]
    },
    "cassandra_03ea58a": {
        "bug_id": "cassandra_03ea58a",
        "commit": "https://github.com/apache/cassandra/commit/03ea58a94827087ac75bf48ae1ef8698fb48fda0",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/03ea58a94827087ac75bf48ae1ef8698fb48fda0/src/java/org/apache/cassandra/service/StorageProxy.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageProxy.java?ref=03ea58a94827087ac75bf48ae1ef8698fb48fda0",
                "deletions": 5,
                "filename": "src/java/org/apache/cassandra/service/StorageProxy.java",
                "patch": "@@ -362,11 +362,8 @@ public void runMayThrow() throws IOException\n                 try\n                 {\n                     UUID hostId = StorageService.instance.getTokenMetadata().getHostId(target);\n-                    if (hostId == null) // The node in question will not have a host id if older than MessagingService.VERSION_12 in a mixed version cluster\n-                    {\n-                        logger.warn(\"Unable to store hint for host with missing ID, {} (old node?)\", target.toString());\n-                        return;\n-                    }\n+                    if ((hostId == null) && (Gossiper.instance.getVersion(target) < MessagingService.VERSION_12))\n+                        logger.info(\"Unable to store hint for host with missing ID, {} (old node?)\", target.toString());\n                     RowMutation hintedMutation = RowMutation.hintFor(mutation, ByteBuffer.wrap(UUIDGen.decompose(hostId)));\n                     hintedMutation.apply();\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/03ea58a94827087ac75bf48ae1ef8698fb48fda0/src/java/org/apache/cassandra/service/StorageProxy.java",
                "sha": "9fad95a6e309becfce280eac7cce5ccce4cc38ae",
                "status": "modified"
            }
        ],
        "message": "Revert \"StorageProxy throws NPEs for when there's no hostids for a target\"\n\nThis reverts commit bd32d4f0b9f0f88fed97e8ddf2ee41b5b048d31d.",
        "parent": "https://github.com/apache/cassandra/commit/bd32d4f0b9f0f88fed97e8ddf2ee41b5b048d31d",
        "patched_files": [
            "StorageProxy.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "StorageProxyTest.java"
        ]
    },
    "cassandra_043d180": {
        "bug_id": "cassandra_043d180",
        "commit": "https://github.com/apache/cassandra/commit/043d1808366a40b81d5275090060b7372ae4cbf5",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cassandra/blob/043d1808366a40b81d5275090060b7372ae4cbf5/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamilyStore.java?ref=043d1808366a40b81d5275090060b7372ae4cbf5",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "patch": "@@ -1730,7 +1730,10 @@ public void setMinimumCompactionThreshold(int minCompactionThreshold)\n             throw new RuntimeException(\"The min_compaction_threshold cannot be larger than the max.\");\n \n         this.minCompactionThreshold.set(minCompactionThreshold);\n-        CompactionManager.instance.submitBackground(this);\n+\n+        // this is called as part of CompactionStrategy constructor; avoid circular dependency by checking for null\n+        if (compactionStrategy != null)\n+            CompactionManager.instance.submitBackground(this);\n     }\n \n     public int getMaximumCompactionThreshold()\n@@ -1744,7 +1747,10 @@ public void setMaximumCompactionThreshold(int maxCompactionThreshold)\n             throw new RuntimeException(\"The max_compaction_threshold cannot be smaller than the min.\");\n \n         this.maxCompactionThreshold.set(maxCompactionThreshold);\n-        CompactionManager.instance.submitBackground(this);\n+\n+        // this is called as part of CompactionStrategy constructor; avoid circular dependency by checking for null\n+        if (compactionStrategy != null)\n+            CompactionManager.instance.submitBackground(this);\n     }\n \n     public boolean isCompactionDisabled()",
                "raw_url": "https://github.com/apache/cassandra/raw/043d1808366a40b81d5275090060b7372ae4cbf5/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "sha": "b3da68ee36e69f6ab3b1db09e58f10f662b4ffa0",
                "status": "modified"
            }
        ],
        "message": "fix NPE from circular dependency on compaction strategy",
        "parent": "https://github.com/apache/cassandra/commit/853a75936c886136e9c7d5e0be42583e0305a6bd",
        "patched_files": [
            "ColumnFamilyStore.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "ColumnFamilyStoreTest.java"
        ]
    },
    "cassandra_0d7b232": {
        "bug_id": "cassandra_0d7b232",
        "commit": "https://github.com/apache/cassandra/commit/0d7b232bdb406c2a49784f175ea4c8ab9e245cef",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/0d7b232bdb406c2a49784f175ea4c8ab9e245cef/src/java/org/apache/cassandra/schema/SchemaKeyspace.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/schema/SchemaKeyspace.java?ref=0d7b232bdb406c2a49784f175ea4c8ab9e245cef",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/schema/SchemaKeyspace.java",
                "patch": "@@ -1434,13 +1434,13 @@ private static IndexMetadata createIndexMetadataFromIndexesRow(CFMetaData cfm, U\n \n         Set<String> targetColumnNames = row.getSet(\"target_columns\", UTF8Type.instance);\n         assert targetType == IndexMetadata.TargetType.COLUMN : \"Per row indexes with dynamic target columns are not supported yet\";\n-        assert targetColumnNames.size() == 1 : \"Secondary indexes targetting multiple columns are not supported yet\";\n \n         Set<ColumnIdentifier> targetColumns = new HashSet<>();\n         // if it's not a CQL table, we can't assume that the column name is utf8, so\n         // in that case we have to do a linear scan of the cfm's columns to get the matching one\n         if (targetColumnNames != null)\n         {\n+            assert targetColumnNames.size() == 1 : \"Secondary indexes targetting multiple columns are not supported yet\";\n             targetColumnNames.forEach(targetColumnName -> {\n                 if (cfm.isCQLTable())\n                     targetColumns.add(ColumnIdentifier.getInterned(targetColumnName, true));",
                "raw_url": "https://github.com/apache/cassandra/raw/0d7b232bdb406c2a49784f175ea4c8ab9e245cef/src/java/org/apache/cassandra/schema/SchemaKeyspace.java",
                "sha": "f93ccfdc79d92950451287374d487bcd2dcb0f7b",
                "status": "modified"
            }
        ],
        "message": "Fix coverity warning for potential NPE (CASSANDRA-6717 follow up)",
        "parent": "https://github.com/apache/cassandra/commit/f50e9321f78a644a69383b410b165367b72435c5",
        "patched_files": [
            "SchemaKeyspace.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "SchemaKeyspaceTest.java"
        ]
    },
    "cassandra_1240c9b": {
        "bug_id": "cassandra_1240c9b",
        "commit": "https://github.com/apache/cassandra/commit/1240c9bd228da81c4052eade48e40bc34ec1d34d",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/1240c9bd228da81c4052eade48e40bc34ec1d34d/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=1240c9bd228da81c4052eade48e40bc34ec1d34d",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,5 +1,6 @@\n 2.0.3\n  * Reject bootstrapping if the node already exists in gossip (CASSANDRA-5571)\n+ * Fix NPE while loading paxos state (CASSANDRA-6211)\n Merged from 1.2:\n  * Fix altering column types (CASSANDRA-6185)\n  * cqlsh: fix CREATE/ALTER WITH completion (CASSANDRA-6196)",
                "raw_url": "https://github.com/apache/cassandra/raw/1240c9bd228da81c4052eade48e40bc34ec1d34d/CHANGES.txt",
                "sha": "1df6ade07568945b893a3bd7de5eac63d02fd33a",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/1240c9bd228da81c4052eade48e40bc34ec1d34d/src/java/org/apache/cassandra/db/SystemKeyspace.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/SystemKeyspace.java?ref=1240c9bd228da81c4052eade48e40bc34ec1d34d",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/SystemKeyspace.java",
                "patch": "@@ -844,7 +844,9 @@ public static PaxosState loadPaxosState(ByteBuffer key, CFMetaData metadata)\n         if (results.isEmpty())\n             return new PaxosState(key, metadata);\n         UntypedResultSet.Row row = results.one();\n-        Commit promised = new Commit(key, row.getUUID(\"in_progress_ballot\"), EmptyColumns.factory.create(metadata));\n+        Commit promised = row.has(\"in_progress_ballot\")\n+                        ? new Commit(key, row.getUUID(\"in_progress_ballot\"), EmptyColumns.factory.create(metadata))\n+                        : Commit.emptyCommit(key, metadata);\n         // either we have both a recently accepted ballot and update or we have neither\n         Commit accepted = row.has(\"proposal\")\n                         ? new Commit(key, row.getUUID(\"proposal_ballot\"), ColumnFamily.fromBytes(row.getBytes(\"proposal\")))",
                "raw_url": "https://github.com/apache/cassandra/raw/1240c9bd228da81c4052eade48e40bc34ec1d34d/src/java/org/apache/cassandra/db/SystemKeyspace.java",
                "sha": "1917bc8741ad70f794cfeb938b8c44a5175157de",
                "status": "modified"
            }
        ],
        "message": "Fix potential NPE while loading paxos state\n\npatch by slebresne; reviewed by jbellis for CASSANDRA-6211",
        "parent": "https://github.com/apache/cassandra/commit/93da683e0c835eb7e6cd28a03561c11f90435bb0",
        "patched_files": [
            "SystemKeyspace.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "SystemKeyspaceTest.java"
        ]
    },
    "cassandra_174cf76": {
        "bug_id": "cassandra_174cf76",
        "commit": "https://github.com/apache/cassandra/commit/174cf761f7897443080b8a840b649b7eab17ae25",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/174cf761f7897443080b8a840b649b7eab17ae25/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=174cf761f7897443080b8a840b649b7eab17ae25",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 4.0\n+ * Validate token() arguments early instead of throwing NPE at execution (CASSANDRA-14989)\n  * Add a new tool to dump audit logs (CASSANDRA-14885)\n  * Fix generating javadoc with Java11 (CASSANDRA-14988)\n  * Only cancel conflicting compactions when starting anticompactions and sub range compactions (CASSANDRA-14935)",
                "raw_url": "https://github.com/apache/cassandra/raw/174cf761f7897443080b8a840b649b7eab17ae25/CHANGES.txt",
                "sha": "852cccf248542d881a1e5d1962c4f374975a4ae5",
                "status": "modified"
            },
            {
                "additions": 37,
                "blob_url": "https://github.com/apache/cassandra/blob/174cf761f7897443080b8a840b649b7eab17ae25/src/java/org/apache/cassandra/cql3/functions/FunctionResolver.java",
                "changes": 52,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/functions/FunctionResolver.java?ref=174cf761f7897443080b8a840b649b7eab17ae25",
                "deletions": 15,
                "filename": "src/java/org/apache/cassandra/cql3/functions/FunctionResolver.java",
                "patch": "@@ -69,8 +69,32 @@ public static Function get(String keyspace,\n                                AbstractType<?> receiverType)\n     throws InvalidRequestException\n     {\n+        Collection<Function> candidates = collectCandidates(keyspace, name, receiverKs, receiverCf, receiverType);\n+\n+        if (candidates.isEmpty())\n+            return null;\n+\n+        // Fast path if there is only one choice\n+        if (candidates.size() == 1)\n+        {\n+            Function fun = candidates.iterator().next();\n+            validateTypes(keyspace, fun, providedArgs, receiverKs, receiverCf);\n+            return fun;\n+        }\n+\n+        return pickBestMatch(keyspace, name, providedArgs, receiverKs, receiverCf, receiverType, candidates);\n+    }\n+\n+    private static Collection<Function> collectCandidates(String keyspace,\n+                                                          FunctionName name,\n+                                                          String receiverKs,\n+                                                          String receiverCf,\n+                                                          AbstractType<?> receiverType)\n+    {\n+        Collection<Function> candidates = new ArrayList<>();\n+\n         if (name.equalsNativeFunction(TOKEN_FUNCTION_NAME))\n-            return new TokenFct(Schema.instance.getTableMetadata(receiverKs, receiverCf));\n+            candidates.add(new TokenFct(Schema.instance.getTableMetadata(receiverKs, receiverCf)));\n \n         // The toJson() function can accept any type of argument, so instances of it are not pre-declared.  Instead,\n         // we create new instances as needed while handling selectors (which is the only place that toJson() is supported,\n@@ -83,14 +107,12 @@ public static Function get(String keyspace,\n         {\n             if (receiverType == null)\n                 throw new InvalidRequestException(\"fromJson() cannot be used in the selection clause of a SELECT statement\");\n-            return FromJsonFct.getInstance(receiverType);\n+            candidates.add(FromJsonFct.getInstance(receiverType));\n         }\n \n-        Collection<Function> candidates;\n         if (!name.hasKeyspace())\n         {\n             // function name not fully qualified\n-            candidates = new ArrayList<>();\n             // add 'SYSTEM' (native) candidates\n             candidates.addAll(Schema.instance.getFunctions(name.asNativeFunction()));\n             // add 'current keyspace' candidates\n@@ -99,20 +121,19 @@ public static Function get(String keyspace,\n         else\n         {\n             // function name is fully qualified (keyspace + name)\n-            candidates = Schema.instance.getFunctions(name);\n+            candidates.addAll(Schema.instance.getFunctions(name));\n         }\n \n-        if (candidates.isEmpty())\n-            return null;\n-\n-        // Fast path if there is only one choice\n-        if (candidates.size() == 1)\n-        {\n-            Function fun = candidates.iterator().next();\n-            validateTypes(keyspace, fun, providedArgs, receiverKs, receiverCf);\n-            return fun;\n-        }\n+        return candidates;\n+    }\n \n+    private static Function pickBestMatch(String keyspace,\n+                                          FunctionName name,\n+                                          List<? extends AssignmentTestable> providedArgs,\n+                                          String receiverKs,\n+                                          String receiverCf, AbstractType<?> receiverType,\n+                                          Collection<Function> candidates)\n+    {\n         List<Function> compatibles = null;\n         for (Function toTest : candidates)\n         {\n@@ -166,6 +187,7 @@ public static Function get(String keyspace,\n             throw invalidRequest(\"Ambiguous call to function %s (can be matched by following signatures: %s): use type casts to disambiguate\",\n                                  name, format(compatibles));\n         }\n+\n         return compatibles.get(0);\n     }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/174cf761f7897443080b8a840b649b7eab17ae25/src/java/org/apache/cassandra/cql3/functions/FunctionResolver.java",
                "sha": "ae5d17eff6e1bfd21064f5100cdb9a69b220f841",
                "status": "modified"
            },
            {
                "additions": 73,
                "blob_url": "https://github.com/apache/cassandra/blob/174cf761f7897443080b8a840b649b7eab17ae25/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java",
                "changes": 73,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java?ref=174cf761f7897443080b8a840b649b7eab17ae25",
                "deletions": 0,
                "filename": "test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java",
                "patch": "@@ -3086,4 +3086,77 @@ public void testMixedTTLOnColumnsWide() throws Throwable\n         }\n     }\n \n+    @Test // CASSANDRA-14989\n+    public void testTokenFctAcceptsValidArguments() throws Throwable\n+    {\n+        createTable(\"CREATE TABLE %s (k1 uuid, k2 text, PRIMARY KEY ((k1, k2)))\");\n+        execute(\"INSERT INTO %s (k1, k2) VALUES (uuid(), 'k2')\");\n+        assertRowCount(execute(\"SELECT token(k1, k2) FROM %s\"), 1);\n+    }\n+\n+    @Test\n+    public void testTokenFctRejectsInvalidColumnName() throws Throwable\n+    {\n+        createTable(\"CREATE TABLE %s (k1 uuid, k2 text, PRIMARY KEY ((k1, k2)))\");\n+        execute(\"INSERT INTO %s (k1, k2) VALUES (uuid(), 'k2')\");\n+        assertInvalidMessage(\"Undefined column name \", \"SELECT token(s1, k1) FROM %s\");\n+    }\n+\n+    @Test\n+    public void testTokenFctRejectsInvalidColumnType() throws Throwable\n+    {\n+        createTable(\"CREATE TABLE %s (k1 uuid, k2 text, PRIMARY KEY ((k1, k2)))\");\n+        execute(\"INSERT INTO %s (k1, k2) VALUES (uuid(), 'k2')\");\n+        assertInvalidMessage(\"Type error: k2 cannot be passed as argument 0 of function system.token of type uuid\",\n+                             \"SELECT token(k2, k1) FROM %s\");\n+    }\n+\n+    @Test\n+    public void testTokenFctRejectsInvalidColumnCount() throws Throwable\n+    {\n+        createTable(\"CREATE TABLE %s (k1 uuid, k2 text, PRIMARY KEY ((k1, k2)))\");\n+        execute(\"INSERT INTO %s (k1, k2) VALUES (uuid(), 'k2')\");\n+        assertInvalidMessage(\"Invalid number of arguments in call to function system.token: 2 required but 1 provided\",\n+                             \"SELECT token(k1) FROM %s\");\n+    }\n+\n+    @Test\n+    public void testCreatingUDFWithSameNameAsBuiltin_PrefersCompatibleArgs_SameKeyspace() throws Throwable\n+    {\n+        createTable(\"CREATE TABLE %s (k1 uuid, k2 text, PRIMARY KEY ((k1, k2)))\");\n+        createFunctionOverload(KEYSPACE + \".token\", \"double\",\n+                               \"CREATE FUNCTION %s (val double) RETURNS null ON null INPUT RETURNS double LANGUAGE java AS 'return 10.0d;'\");\n+        execute(\"INSERT INTO %s (k1, k2) VALUES (uuid(), 'k2')\");\n+        assertRows(execute(\"SELECT token(10) FROM %s\"), row(10.0d));\n+    }\n+\n+    @Test\n+    public void testCreatingUDFWithSameNameAsBuiltin_FullyQualifiedFunctionNameWorks() throws Throwable\n+    {\n+        createTable(\"CREATE TABLE %s (k1 uuid, k2 text, PRIMARY KEY ((k1, k2)))\");\n+        createFunctionOverload(KEYSPACE + \".token\", \"double\",\n+                               \"CREATE FUNCTION %s (val double) RETURNS null ON null INPUT RETURNS double LANGUAGE java AS 'return 10.0d;'\");\n+        execute(\"INSERT INTO %s (k1, k2) VALUES (uuid(), 'k2')\");\n+        assertRows(execute(\"SELECT \" + KEYSPACE + \".token(10) FROM %s\"), row(10.0d));\n+    }\n+\n+    @Test\n+    public void testCreatingUDFWithSameNameAsBuiltin_PrefersCompatibleArgs() throws Throwable\n+    {\n+        createTable(\"CREATE TABLE %s (k1 uuid, k2 text, PRIMARY KEY ((k1, k2)))\");\n+        createFunctionOverload(KEYSPACE + \".token\", \"double\",\n+                               \"CREATE FUNCTION %s (val double) RETURNS null ON null INPUT RETURNS double LANGUAGE java AS 'return 10.0d;'\");\n+        execute(\"INSERT INTO %s (k1, k2) VALUES (uuid(), 'k2')\");\n+        assertRowCount(execute(\"SELECT token(k1, k2) FROM %s\"), 1);\n+    }\n+\n+    @Test\n+    public void testCreatingUDFWithSameNameAsBuiltin_FullyQualifiedFunctionNameWorks_SystemKeyspace() throws Throwable\n+    {\n+        createTable(\"CREATE TABLE %s (k1 uuid, k2 text, PRIMARY KEY ((k1, k2)))\");\n+        createFunctionOverload(KEYSPACE + \".token\", \"double\",\n+                               \"CREATE FUNCTION %s (val double) RETURNS null ON null INPUT RETURNS double LANGUAGE java AS 'return 10.0d;'\");\n+        execute(\"INSERT INTO %s (k1, k2) VALUES (uuid(), 'k2')\");\n+        assertRowCount(execute(\"SELECT system.token(k1, k2) FROM %s\"), 1);\n+    }\n }",
                "raw_url": "https://github.com/apache/cassandra/raw/174cf761f7897443080b8a840b649b7eab17ae25/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java",
                "sha": "d7c1e251005fabaf755bf3d08dbd29ee2979e0d8",
                "status": "modified"
            }
        ],
        "message": "Validate token() arguments early instead of throwing NPE at execution\n\npatch by Dinesh Joshi; reviewed by Aleksey Yeschenko and Jon Meredith\nfor CASSANDRA-14989",
        "parent": "https://github.com/apache/cassandra/commit/7d138e20ea987d44fffbc47de4674b253b7431ff",
        "patched_files": [
            "FunctionResolver.java",
            "CHANGES.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "SelectTest.java"
        ]
    },
    "cassandra_182051c": {
        "bug_id": "cassandra_182051c",
        "commit": "https://github.com/apache/cassandra/commit/182051c453c30f6941b49c030092008918cfa2e2",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/auth/Resources.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/auth/Resources.java?ref=182051c453c30f6941b49c030092008918cfa2e2",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/auth/Resources.java",
                "patch": "@@ -58,7 +58,7 @@ public static String toString(List<Object> resource)\n             if (component instanceof byte[])\n                 buff.append(Hex.bytesToHex((byte[])component));\n             else\n-                buff.append(component.toString());\n+                buff.append(component);\n         }\n         return buff.toString();\n     }",
                "raw_url": "https://github.com/apache/cassandra/raw/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/auth/Resources.java",
                "sha": "47a7aa424b33ad11710267641ecad66627ffe9c9",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/cli/CliClient.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cli/CliClient.java?ref=182051c453c30f6941b49c030092008918cfa2e2",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/cli/CliClient.java",
                "patch": "@@ -2102,7 +2102,7 @@ private void executeTraceNextQuery() throws TException\n \n         UUID sessionId = TimeUUIDType.instance.compose(thriftClient.trace_next_query());\n \n-        sessionState.out.println(\"Will trace next query. Session ID: \" + sessionId.toString());\n+        sessionState.out.println(\"Will trace next query. Session ID: \" + sessionId);\n     }\n \n     private void describeKeySpace(String keySpaceName, KsDef metadata) throws TException",
                "raw_url": "https://github.com/apache/cassandra/raw/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/cli/CliClient.java",
                "sha": "703d4c13e77b990016e17ddcc50e7be249bad1d2",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/cql3/ResultSet.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/ResultSet.java?ref=182051c453c30f6941b49c030092008918cfa2e2",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/cql3/ResultSet.java",
                "patch": "@@ -333,7 +333,7 @@ public String toString()\n             {\n                 for (ColumnSpecification name : names)\n                 {\n-                    sb.append(\"[\").append(name.name.toString());\n+                    sb.append(\"[\").append(name.name);\n                     sb.append(\"(\").append(name.ksName).append(\", \").append(name.cfName).append(\")\");\n                     sb.append(\", \").append(name.type).append(\"]\");\n                 }",
                "raw_url": "https://github.com/apache/cassandra/raw/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/cql3/ResultSet.java",
                "sha": "30b5c4edf3b0016325a66933456e068b4e324bd4",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/db/context/CounterContext.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/context/CounterContext.java?ref=182051c453c30f6941b49c030092008918cfa2e2",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/context/CounterContext.java",
                "patch": "@@ -509,7 +509,7 @@ public String toString(ByteBuffer context)\n             if (state.getElementIndex() > 0)\n                 sb.append(\",\");\n             sb.append(\"{\");\n-            sb.append(state.getCounterId().toString()).append(\", \");\n+            sb.append(state.getCounterId()).append(\", \");\n             sb.append(state.getClock()).append(\", \");\n             sb.append(state.getCount());\n             sb.append(\"}\");",
                "raw_url": "https://github.com/apache/cassandra/raw/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/db/context/CounterContext.java",
                "sha": "ffffbb14a53f9cf972efc3ee9846d18ce30c7cce",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/db/marshal/TypeParser.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/marshal/TypeParser.java?ref=182051c453c30f6941b49c030092008918cfa2e2",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/db/marshal/TypeParser.java",
                "patch": "@@ -271,7 +271,7 @@ else if (str.charAt(idx) != ',' && str.charAt(idx) != ')')\n             {\n                 AbstractType<?> type = parse();\n                 if (!(type instanceof CollectionType))\n-                    throw new SyntaxException(type.toString() + \" is not a collection type\");\n+                    throw new SyntaxException(type + \" is not a collection type\");\n                 map.put(bb, (CollectionType)type);\n             }\n             catch (SyntaxException e)\n@@ -572,7 +572,7 @@ public static String stringifyUserTypeParameters(String keysace, ByteBuffer type\n         {\n             sb.append(',');\n             sb.append(ByteBufferUtil.bytesToHex(columnNames.get(i))).append(\":\");\n-            sb.append(columnTypes.get(i).toString());\n+            sb.append(columnTypes.get(i));\n         }\n         sb.append(')');\n         return sb.toString();",
                "raw_url": "https://github.com/apache/cassandra/raw/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/db/marshal/TypeParser.java",
                "sha": "37f8708e30af43bb4bfb826954b035cec560fa0a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/exceptions/RepairException.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/exceptions/RepairException.java?ref=182051c453c30f6941b49c030092008918cfa2e2",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/exceptions/RepairException.java",
                "patch": "@@ -41,6 +41,6 @@ public RepairException(RepairJobDesc desc, String message, Throwable cause)\n     @Override\n     public String getMessage()\n     {\n-        return desc.toString() + \" \" + super.getMessage();\n+        return desc + \" \" + super.getMessage();\n     }\n }",
                "raw_url": "https://github.com/apache/cassandra/raw/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/exceptions/RepairException.java",
                "sha": "2f5f2c1c728774975f88013bc13766d054946c4c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/gms/FailureDetector.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/gms/FailureDetector.java?ref=182051c453c30f6941b49c030092008918cfa2e2",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/gms/FailureDetector.java",
                "patch": "@@ -277,7 +277,7 @@ public String toString()\n         {\n             ArrivalWindow hWnd = arrivalSamples.get(ep);\n             sb.append(ep + \" : \");\n-            sb.append(hWnd.toString());\n+            sb.append(hWnd);\n             sb.append(System.getProperty(\"line.separator\"));\n         }\n         sb.append(\"-----------------------------------------------------------------------\");",
                "raw_url": "https://github.com/apache/cassandra/raw/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/gms/FailureDetector.java",
                "sha": "ec723792559dc90f94a1993aa6b10291dc9f0768",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/hadoop/AbstractColumnFamilyRecordWriter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/hadoop/AbstractColumnFamilyRecordWriter.java?ref=182051c453c30f6941b49c030092008918cfa2e2",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/hadoop/AbstractColumnFamilyRecordWriter.java",
                "patch": "@@ -186,7 +186,7 @@ protected void closeInternal()\n         @Override\n         public String toString()\n         {\n-            return \"#<Client for \" + endpoints.toString() + \">\";\n+            return \"#<Client for \" + endpoints + \">\";\n         }\n     }\n }",
                "raw_url": "https://github.com/apache/cassandra/raw/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/hadoop/AbstractColumnFamilyRecordWriter.java",
                "sha": "cb44beb122f76617286fba1afa0ef63e9ff15dfa",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/streaming/StreamCoordinator.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/streaming/StreamCoordinator.java?ref=182051c453c30f6941b49c030092008918cfa2e2",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/streaming/StreamCoordinator.java",
                "patch": "@@ -175,7 +175,7 @@ private HostStreamingData getHostData(InetAddress peer)\n     {\n         HostStreamingData data = peerSessions.get(peer);\n         if (data == null)\n-            throw new IllegalArgumentException(\"Unknown peer requested: \" + peer.toString());\n+            throw new IllegalArgumentException(\"Unknown peer requested: \" + peer);\n         return data;\n     }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/streaming/StreamCoordinator.java",
                "sha": "04bd1b745bfaa8b3642d154dc205c5b2330c2c4d",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/streaming/StreamEvent.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/streaming/StreamEvent.java?ref=182051c453c30f6941b49c030092008918cfa2e2",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/streaming/StreamEvent.java",
                "patch": "@@ -66,7 +66,7 @@ public ProgressEvent(UUID planId, ProgressInfo progress)\n         @Override\n         public String toString()\n         {\n-            return \"<ProgressEvent \" + progress.toString() + \">\";\n+            return \"<ProgressEvent \" + progress + \">\";\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/streaming/StreamEvent.java",
                "sha": "e3cdce5cf8692f0fc4ac736f43abe911f5959037",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/streaming/StreamLockfile.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/streaming/StreamLockfile.java?ref=182051c453c30f6941b49c030092008918cfa2e2",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/streaming/StreamLockfile.java",
                "patch": "@@ -57,7 +57,7 @@\n \n     public StreamLockfile(File directory, UUID uuid)\n     {\n-        lockfile = new File(directory, uuid.toString() + FILE_EXT);\n+        lockfile = new File(directory, uuid + FILE_EXT);\n     }\n \n     public StreamLockfile(File lockfile)",
                "raw_url": "https://github.com/apache/cassandra/raw/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/streaming/StreamLockfile.java",
                "sha": "d00842a947e8c8ce7fe7e05b531d6651add76ef9",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/thrift/TCustomServerSocket.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/thrift/TCustomServerSocket.java?ref=182051c453c30f6941b49c030092008918cfa2e2",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/thrift/TCustomServerSocket.java",
                "patch": "@@ -72,7 +72,7 @@ public TCustomServerSocket(InetSocketAddress bindAddr, boolean keepAlive, Intege\n         catch (IOException ioe)\n         {\n             serverSocket = null;\n-            throw new TTransportException(\"Could not create ServerSocket on address \" + bindAddr.toString() + \".\");\n+            throw new TTransportException(\"Could not create ServerSocket on address \" + bindAddr + \".\");\n         }\n \n         this.keepAlive = keepAlive;",
                "raw_url": "https://github.com/apache/cassandra/raw/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/thrift/TCustomServerSocket.java",
                "sha": "477ef8c00442d4578a4edba91bb7e562d0c84b6e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/tools/BulkLoader.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/tools/BulkLoader.java?ref=182051c453c30f6941b49c030092008918cfa2e2",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/tools/BulkLoader.java",
                "patch": "@@ -181,7 +181,7 @@ else if (event.eventType == StreamEvent.Type.FILE_PROGRESS || event.eventType ==\n                 // recalculate progress across all sessions in all hosts and display\n                 for (InetAddress peer : sessionsByHost.keySet())\n                 {\n-                    sb.append(\"[\").append(peer.toString()).append(\"]\");\n+                    sb.append(\"[\").append(peer).append(\"]\");\n \n                     for (SessionInfo session : sessionsByHost.get(peer))\n                     {",
                "raw_url": "https://github.com/apache/cassandra/raw/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/tools/BulkLoader.java",
                "sha": "19f49b1c2c0cca3cf4b3198dc7902159bcd4bc31",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/tools/NodeTool.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/tools/NodeTool.java?ref=182051c453c30f6941b49c030092008918cfa2e2",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/tools/NodeTool.java",
                "patch": "@@ -828,7 +828,7 @@ public void verifyColumnFamilies()\n             {\n                 for (String ks : filter.keySet())\n                     if (verifier.get(ks).size() > 0)\n-                        throw new IllegalArgumentException(\"Unknown tables: \" + verifier.get(ks).toString() + \" in keyspace: \" + ks);\n+                        throw new IllegalArgumentException(\"Unknown tables: \" + verifier.get(ks) + \" in keyspace: \" + ks);\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/cassandra/raw/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/tools/NodeTool.java",
                "sha": "9fbee9cb72f851775c6aaeee4a63a401b0c367e1",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/182051c453c30f6941b49c030092008918cfa2e2/tools/stress/src/org/apache/cassandra/stress/operations/predefined/CqlOperation.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/tools/stress/src/org/apache/cassandra/stress/operations/predefined/CqlOperation.java?ref=182051c453c30f6941b49c030092008918cfa2e2",
                "deletions": 1,
                "filename": "tools/stress/src/org/apache/cassandra/stress/operations/predefined/CqlOperation.java",
                "patch": "@@ -638,7 +638,7 @@ private static String formatCqlQuery(String query, List<Object> parms)\n             if (parm instanceof ByteBuffer)\n                 result.append(getUnQuotedCqlBlob((ByteBuffer) parm));\n             else if (parm instanceof Long)\n-                result.append(parm.toString());\n+                result.append(parm);\n             else throw new AssertionError();\n \n             position = marker + 1;",
                "raw_url": "https://github.com/apache/cassandra/raw/182051c453c30f6941b49c030092008918cfa2e2/tools/stress/src/org/apache/cassandra/stress/operations/predefined/CqlOperation.java",
                "sha": "a8144c905fb2379d75b03f24c8ca6907ba6e0411",
                "status": "modified"
            }
        ],
        "message": "simplify/avoid possible npes",
        "parent": "https://github.com/apache/cassandra/commit/995904c2ddb3bf91aa138db9dca93a78b645e7d4",
        "patched_files": [
            "CounterContext.java",
            "TypeParser.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "CounterContextTest.java",
            "TypeParserTest.java"
        ]
    },
    "cassandra_1a1f836": {
        "bug_id": "cassandra_1a1f836",
        "commit": "https://github.com/apache/cassandra/commit/1a1f836f20ba4bf1c263d4fd3c32338e55abbcbc",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/1a1f836f20ba4bf1c263d4fd3c32338e55abbcbc/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=1a1f836f20ba4bf1c263d4fd3c32338e55abbcbc",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 3.0.5\n+ * Fix rare NPE on schema upgrade from 2.x to 3.x (CASSANDRA-10943)\n  * Improve backoff policy for cqlsh COPY FROM (CASSANDRA-11320)\n  * Improve IF NOT EXISTS check in CREATE INDEX (CASSANDRA-11131)\n  * Upgrade ohc to 0.4.3",
                "raw_url": "https://github.com/apache/cassandra/raw/1a1f836f20ba4bf1c263d4fd3c32338e55abbcbc/CHANGES.txt",
                "sha": "0ce75a8ebcd1b6e4f829d7cf87c058a66ac34d4c",
                "status": "modified"
            },
            {
                "additions": 62,
                "blob_url": "https://github.com/apache/cassandra/blob/1a1f836f20ba4bf1c263d4fd3c32338e55abbcbc/src/java/org/apache/cassandra/schema/LegacySchemaMigrator.java",
                "changes": 63,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/schema/LegacySchemaMigrator.java?ref=1a1f836f20ba4bf1c263d4fd3c32338e55abbcbc",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/schema/LegacySchemaMigrator.java",
                "patch": "@@ -284,7 +284,9 @@ private static CFMetaData decodeTableMetadata(UntypedResultSet.Row tableRow,\n         AbstractType<?> subComparator = tableRow.has(\"subcomparator\") ? TypeParser.parse(tableRow.getString(\"subcomparator\")) : null;\n \n         boolean isSuper = \"super\".equals(tableRow.getString(\"type\").toLowerCase());\n-        boolean isDense = tableRow.getBoolean(\"is_dense\");\n+        boolean isDense = tableRow.has(\"is_dense\")\n+                        ? tableRow.getBoolean(\"is_dense\")\n+                        : calculateIsDense(rawComparator, columnRows);\n         boolean isCompound = rawComparator instanceof CompositeType;\n \n         // We don't really use the default validator but as we have it for backward compatibility, we use it to know if it's a counter table\n@@ -364,6 +366,65 @@ private static CFMetaData decodeTableMetadata(UntypedResultSet.Row tableRow,\n                   .triggers(createTriggersFromTriggerRows(triggerRows));\n     }\n \n+    /*\n+     * We call dense a CF for which each component of the comparator is a clustering column, i.e. no\n+     * component is used to store a regular column names. In other words, non-composite static \"thrift\"\n+     * and CQL3 CF are *not* dense.\n+     * We save whether the table is dense or not during table creation through CQL, but we don't have this\n+     * information for table just created through thrift, nor for table prior to CASSANDRA-7744, so this\n+     * method does its best to infer whether the table is dense or not based on other elements.\n+     */\n+    public static boolean calculateIsDense(AbstractType<?> comparator, UntypedResultSet columnRows)\n+    {\n+        /*\n+         * As said above, this method is only here because we need to deal with thrift upgrades.\n+         * Once a CF has been \"upgraded\", i.e. we've rebuilt and save its CQL3 metadata at least once,\n+         * then we'll have saved the \"is_dense\" value and will be good to go.\n+         *\n+         * But non-upgraded thrift CF (and pre-7744 CF) will have no value for \"is_dense\", so we need\n+         * to infer that information without relying on it in that case. And for the most part this is\n+         * easy, a CF that has at least one REGULAR definition is not dense. But the subtlety is that not\n+         * having a REGULAR definition may not mean dense because of CQL3 definitions that have only the\n+         * PRIMARY KEY defined.\n+         *\n+         * So we need to recognize those special case CQL3 table with only a primary key. If we have some\n+         * clustering columns, we're fine as said above. So the only problem is that we cannot decide for\n+         * sure if a CF without REGULAR columns nor CLUSTERING_COLUMN definition is meant to be dense, or if it\n+         * has been created in CQL3 by say:\n+         *    CREATE TABLE test (k int PRIMARY KEY)\n+         * in which case it should not be dense. However, we can limit our margin of error by assuming we are\n+         * in the latter case only if the comparator is exactly CompositeType(UTF8Type).\n+         */\n+        boolean hasRegular = false;\n+        int maxClusteringIdx = -1;\n+\n+        for (UntypedResultSet.Row columnRow : columnRows)\n+        {\n+            switch (columnRow.getString(\"type\"))\n+            {\n+                case \"clustering_key\":\n+                    maxClusteringIdx = Math.max(maxClusteringIdx, columnRow.has(\"component_index\") ? columnRow.getInt(\"component_index\") : 0);\n+                    break;\n+                case \"regular\":\n+                    hasRegular = true;\n+                    break;\n+            }\n+        }\n+\n+        return maxClusteringIdx >= 0\n+               ? maxClusteringIdx == comparator.componentsCount() - 1\n+               : !hasRegular && !isCQL3OnlyPKComparator(comparator);\n+    }\n+\n+    private static boolean isCQL3OnlyPKComparator(AbstractType<?> comparator)\n+    {\n+        if (!(comparator instanceof CompositeType))\n+            return false;\n+\n+        CompositeType ct = (CompositeType)comparator;\n+        return ct.types.size() == 1 && ct.types.get(0) instanceof UTF8Type;\n+    }\n+\n     private static TableParams decodeTableParams(UntypedResultSet.Row row)\n     {\n         TableParams.Builder params = TableParams.builder();",
                "raw_url": "https://github.com/apache/cassandra/raw/1a1f836f20ba4bf1c263d4fd3c32338e55abbcbc/src/java/org/apache/cassandra/schema/LegacySchemaMigrator.java",
                "sha": "7411b9310f5cc2397f222afcc8680038840bb5bd",
                "status": "modified"
            }
        ],
        "message": "Fix rare NPE on schema upgrade from 2.x to 3.x\n\npatch by Aleksey Yeschenko; reviewed by Sylvain Lebresne for\nCASSANDRA-10943",
        "parent": "https://github.com/apache/cassandra/commit/15131391d833c1a0ba0e26903e27867fd101fe72",
        "patched_files": [
            "LegacySchemaMigrator.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "LegacySchemaMigratorTest.java"
        ]
    },
    "cassandra_21c92ca": {
        "bug_id": "cassandra_21c92ca",
        "commit": "https://github.com/apache/cassandra/commit/21c92cab872d9dcbc2722c73555c9dddc4c30ece",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/21c92cab872d9dcbc2722c73555c9dddc4c30ece/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=21c92cab872d9dcbc2722c73555c9dddc4c30ece",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -5,6 +5,7 @@\n  * cqlsh: Fix handling of $$-escaped strings (CASSANDRA-12189)\n  * Fix SSL JMX requiring truststore containing server cert (CASSANDRA-12109)\n Merged from 3.0:\n+ * NullPointerException during compaction on table with static columns (CASSANDRA-12336)\n  * Fixed ConcurrentModificationException when reading metrics in GraphiteReporter (CASSANDRA-11823)\n  * Fix upgrade of super columns on thrift (CASSANDRA-12335)\n  * Fixed flacky BlacklistingCompactionsTest, switched to fixed size types and increased corruption size (CASSANDRA-12359)",
                "raw_url": "https://github.com/apache/cassandra/raw/21c92cab872d9dcbc2722c73555c9dddc4c30ece/CHANGES.txt",
                "sha": "289f370f3d83d453df6210ec4e3386b1117f4ca0",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/21c92cab872d9dcbc2722c73555c9dddc4c30ece/test/unit/org/apache/cassandra/cql3/validation/entities/StaticColumnsTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/cql3/validation/entities/StaticColumnsTest.java?ref=21c92cab872d9dcbc2722c73555c9dddc4c30ece",
                "deletions": 0,
                "filename": "test/unit/org/apache/cassandra/cql3/validation/entities/StaticColumnsTest.java",
                "patch": "@@ -296,6 +296,8 @@ public void testStaticColumnPurging() throws Throwable\n \n         flush();\n \n+        Thread.sleep(1000);\n+\n         compact();\n \n         assertRows(execute(\"SELECT * FROM %s\"), row(\"k1\", \"c1\", null, \"v1\"));",
                "raw_url": "https://github.com/apache/cassandra/raw/21c92cab872d9dcbc2722c73555c9dddc4c30ece/test/unit/org/apache/cassandra/cql3/validation/entities/StaticColumnsTest.java",
                "sha": "74fed69045680e9ba61408c57d638206e6350947",
                "status": "modified"
            }
        ],
        "message": "Merge branch 'cassandra-3.0' into cassandra-3.9\n\n* cassandra-3.0:\n  NullPointerException during compaction on table with static columns",
        "parent": "https://github.com/apache/cassandra/commit/5e319bb697e381e333b22d88ec6e445dd19c473d",
        "patched_files": [
            "CHANGES.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "StaticColumnsTest.java"
        ]
    },
    "cassandra_2206ffa": {
        "bug_id": "cassandra_2206ffa",
        "commit": "https://github.com/apache/cassandra/commit/2206ffadd32b7d4d428e7a391a8c2e11d91a8ea9",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/2206ffadd32b7d4d428e7a391a8c2e11d91a8ea9/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=2206ffadd32b7d4d428e7a391a8c2e11d91a8ea9",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 2.1.4\n+ * Fix rare NPE in ColumnDefinition#hasIndexOption() (CASSANDRA-8786)\n  * cassandra-stress reports per-operation statistics, plus misc (CASSANDRA-8769)\n  * Add SimpleDate (cql date) and Time (cql time) types (CASSANDRA-7523)\n  * Use long for key count in cfstats (CASSANDRA-8913)",
                "raw_url": "https://github.com/apache/cassandra/raw/2206ffadd32b7d4d428e7a391a8c2e11d91a8ea9/CHANGES.txt",
                "sha": "29e7541526fa632000e1339d02bd2204a23cdbd6",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/2206ffadd32b7d4d428e7a391a8c2e11d91a8ea9/src/java/org/apache/cassandra/config/ColumnDefinition.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/ColumnDefinition.java?ref=2206ffadd32b7d4d428e7a391a8c2e11d91a8ea9",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/config/ColumnDefinition.java",
                "patch": "@@ -486,6 +486,6 @@ public IndexType getIndexType()\n      */\n     public boolean hasIndexOption(String name)\n     {\n-        return indexOptions.containsKey(name);\n+        return indexOptions != null && indexOptions.containsKey(name);\n     }\n }",
                "raw_url": "https://github.com/apache/cassandra/raw/2206ffadd32b7d4d428e7a391a8c2e11d91a8ea9/src/java/org/apache/cassandra/config/ColumnDefinition.java",
                "sha": "c44737554dfabeb4f6576391c1042100c5648605",
                "status": "modified"
            }
        ],
        "message": "Fix rare NPE in ColumnDefinition#hasIndexOption()\n\npatch by Aleksey Yeschenko; reviewed by Tyler Hobbs for CASSANDRA-8786",
        "parent": "https://github.com/apache/cassandra/commit/81fe1a2a86772512945a2b19a7b968a3fd1295f4",
        "patched_files": [
            "ColumnDefinition.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "ColumnDefinitionTest.java"
        ]
    },
    "cassandra_25d4a13": {
        "bug_id": "cassandra_25d4a13",
        "commit": "https://github.com/apache/cassandra/commit/25d4a13d5621f11290af83b81b0be1588ffc87db",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/25d4a13d5621f11290af83b81b0be1588ffc87db/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=25d4a13d5621f11290af83b81b0be1588ffc87db",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 2.1.3\n+ * Fix NPE when passing wrong argument in ALTER TABLE statement (CASSANDRA-8355)\n  * Pig: Refactor and deprecate CqlStorage (CASSANDRA-8599)\n  * Don't reuse the same cleanup strategy for all sstables (CASSANDRA-8537)\n  * Fix case-sensitivity of index name on CREATE and DROP INDEX",
                "raw_url": "https://github.com/apache/cassandra/raw/25d4a13d5621f11290af83b81b0be1588ffc87db/CHANGES.txt",
                "sha": "8f312a7ea9f49faf1cf36b7b8541e2227e89b6ec",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cassandra/blob/25d4a13d5621f11290af83b81b0be1588ffc87db/src/java/org/apache/cassandra/cql3/Cql.g",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/Cql.g?ref=25d4a13d5621f11290af83b81b0be1588ffc87db",
                "deletions": 6,
                "filename": "src/java/org/apache/cassandra/cql3/Cql.g",
                "patch": "@@ -942,16 +942,19 @@ functionName returns [String s]\n     | K_TOKEN                       { $s = \"token\"; }\n     ;\n \n-functionArgs returns [List<Term.Raw> a]\n-    : '(' ')' { $a = Collections.emptyList(); }\n-    | '(' t1=term { List<Term.Raw> args = new ArrayList<Term.Raw>(); args.add(t1); }\n-          ( ',' tn=term { args.add(tn); } )*\n-       ')' { $a = args; }\n+function returns [Term.Raw t]\n+    : f=functionName '(' ')'                   { $t = new FunctionCall.Raw(f, Collections.<Term.Raw>emptyList()); }\n+    | f=functionName '(' args=functionArgs ')' { $t = new FunctionCall.Raw(f, args); }\n+    ;\n+\n+functionArgs returns [List<Term.Raw> args]\n+    @init{ $args = new ArrayList<Term.Raw>(); }\n+    : t1=term {args.add(t1); } ( ',' tn=term { args.add(tn); } )*\n     ;\n \n term returns [Term.Raw term]\n     : v=value                          { $term = v; }\n-    | f=functionName args=functionArgs { $term = new FunctionCall.Raw(f, args); }\n+    | f=function                       { $term = f; }\n     | '(' c=comparatorType ')' t=term  { $term = new TypeCast(c, t); }\n     ;\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/25d4a13d5621f11290af83b81b0be1588ffc87db/src/java/org/apache/cassandra/cql3/Cql.g",
                "sha": "9067fc44eeb4eb4e5c1c00fc18afde4788a767d5",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cassandra/blob/25d4a13d5621f11290af83b81b0be1588ffc87db/test/unit/org/apache/cassandra/cql3/AlterTableTest.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/cql3/AlterTableTest.java?ref=25d4a13d5621f11290af83b81b0be1588ffc87db",
                "deletions": 2,
                "filename": "test/unit/org/apache/cassandra/cql3/AlterTableTest.java",
                "patch": "@@ -19,8 +19,6 @@\n \n import org.junit.Test;\n \n-import org.apache.cassandra.exceptions.InvalidRequestException;\n-\n public class AlterTableTest extends CQLTester\n {\n     @Test\n@@ -83,4 +81,13 @@ public void testDropListAndAddMapWithSameName() throws Throwable\n \n         assertInvalid(\"ALTER TABLE %s ADD myCollection map<int, int>;\");\n     }\n+\n+    @Test\n+    public void testChangeStrategyWithUnquotedAgrument() throws Throwable\n+    {\n+        createTable(\"CREATE TABLE %s (id text PRIMARY KEY);\");\n+\n+        assertInvalidSyntaxMessage(\"no viable alternative at input '}'\",\n+                                   \"ALTER TABLE %s WITH caching = {'keys' : 'all', 'rows_per_partition' : ALL};\");\n+    }\n }",
                "raw_url": "https://github.com/apache/cassandra/raw/25d4a13d5621f11290af83b81b0be1588ffc87db/test/unit/org/apache/cassandra/cql3/AlterTableTest.java",
                "sha": "9668a41898b133c8531277d0a87b73cff4466d2d",
                "status": "modified"
            }
        ],
        "message": "Fix NPE when passing wrong argument in ALTER TABLE statement\n\npatch by Benjamin Lerer; reviewed by Robert Stupp for CASSANDRA-8355",
        "parent": "https://github.com/apache/cassandra/commit/cf07fc259799bc403ab4946f9dcb142da1c11ed5",
        "patched_files": [
            "Cql.java",
            "CHANGES.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "AlterTableTest.java"
        ]
    },
    "cassandra_28a4b07": {
        "bug_id": "cassandra_28a4b07",
        "commit": "https://github.com/apache/cassandra/commit/28a4b070a0a215ce586103fd50827eae7865b252",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/28a4b070a0a215ce586103fd50827eae7865b252/src/java/org/apache/cassandra/config/CFMetaData.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/CFMetaData.java?ref=28a4b070a0a215ce586103fd50827eae7865b252",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/config/CFMetaData.java",
                "patch": "@@ -730,6 +730,7 @@ else if (subcolumnComparator != DatabaseDescriptor.getComparator(cf_def.subcompa\n         def.memtable_throughput_in_mb = cfm.memtableThroughputInMb;\n         def.memtable_operations_in_millions = cfm.memtableOperationsInMillions;\n         def.merge_shards_chance = cfm.mergeShardsChance;\n+        def.key_validation_class = cfm.keyValidator.getClass().getName();\n         List<org.apache.cassandra.db.migration.avro.ColumnDef> column_meta = new ArrayList<org.apache.cassandra.db.migration.avro.ColumnDef>(cfm.column_metadata.size());\n         for (ColumnDefinition cd : cfm.column_metadata.values())\n         {",
                "raw_url": "https://github.com/apache/cassandra/raw/28a4b070a0a215ce586103fd50827eae7865b252/src/java/org/apache/cassandra/config/CFMetaData.java",
                "sha": "c392a03439320969f248c081cc279c6d7703d409",
                "status": "modified"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/cassandra/blob/28a4b070a0a215ce586103fd50827eae7865b252/src/java/org/apache/cassandra/cql/QueryProcessor.java",
                "changes": 76,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql/QueryProcessor.java?ref=28a4b070a0a215ce586103fd50827eae7865b252",
                "deletions": 44,
                "filename": "src/java/org/apache/cassandra/cql/QueryProcessor.java",
                "patch": "@@ -69,7 +69,7 @@\n \n import static org.apache.cassandra.thrift.ThriftValidation.validateKey;\n import static org.apache.cassandra.thrift.ThriftValidation.validateColumnFamily;\n-import static org.apache.cassandra.thrift.ThriftValidation.validateKeyType;\n+import static org.apache.cassandra.thrift.ThriftValidation.validateColumnNames;\n \n public class QueryProcessor\n {\n@@ -86,16 +86,17 @@\n         assert select.getKeys().size() == 1;\n         \n         ByteBuffer key = select.getKeys().get(0).getByteBuffer(AsciiType.instance);\n-        validateKey(key);\n-        \n+        CFMetaData metadata = validateColumnFamily(keyspace, select.getColumnFamily(), false);\n+        validateKey(metadata, key);\n+\n         // ...of a list of column names\n         if (!select.isColumnRange())\n         {\n             Collection<ByteBuffer> columnNames = new ArrayList<ByteBuffer>();\n             for (Term column : select.getColumnNames())\n                 columnNames.add(column.getByteBuffer(comparator));\n             \n-            validateColumnNames(keyspace, select.getColumnFamily(), columnNames);\n+            validateColumnNames(metadata, null, columnNames);\n             commands.add(new SliceByNamesReadCommand(keyspace, key, queryPath, columnNames));\n         }\n         // ...a range (slice) of column names\n@@ -104,7 +105,7 @@\n             ByteBuffer start = select.getColumnStart().getByteBuffer(comparator);\n             ByteBuffer finish = select.getColumnFinish().getByteBuffer(comparator);\n             \n-            validateSliceRange(keyspace, select.getColumnFamily(), start, finish, select.isColumnsReversed());\n+            validateSliceRange(metadata, start, finish, select.isColumnsReversed());\n             commands.add(new SliceFromReadCommand(keyspace,\n                                                   key,\n                                                   queryPath,\n@@ -140,10 +141,11 @@\n         IPartitioner<?> p = StorageService.getPartitioner();\n         AbstractBounds bounds = new Bounds(p.getToken(startKey), p.getToken(finishKey));\n         \n-        AbstractType<?> comparator = select.getComparator(keyspace);\n+        CFMetaData metadata = validateColumnFamily(keyspace, select.getColumnFamily(), false);\n+        AbstractType<?> comparator = metadata.getComparatorFor(null);\n         // XXX: Our use of Thrift structs internally makes me Sad. :(\n         SlicePredicate thriftSlicePredicate = slicePredicateFromSelect(select, comparator);\n-        validateSlicePredicate(keyspace, select.getColumnFamily(), thriftSlicePredicate);\n+        validateSlicePredicate(metadata, thriftSlicePredicate);\n \n         try\n         {\n@@ -174,10 +176,11 @@\n     private static List<org.apache.cassandra.db.Row> getIndexedSlices(String keyspace, SelectStatement select)\n     throws TimedOutException, UnavailableException, InvalidRequestException\n     {\n-        AbstractType<?> comparator = select.getComparator(keyspace);\n+        CFMetaData metadata = validateColumnFamily(keyspace, select.getColumnFamily(), false);\n+        AbstractType<?> comparator = metadata.getComparatorFor(null);\n         // XXX: Our use of Thrift structs internally (still) makes me Sad. :~(\n         SlicePredicate thriftSlicePredicate = slicePredicateFromSelect(select, comparator);\n-        validateSlicePredicate(keyspace, select.getColumnFamily(), thriftSlicePredicate);\n+        validateSlicePredicate(metadata, thriftSlicePredicate);\n         \n         List<IndexExpression> expressions = new ArrayList<IndexExpression>();\n         for (Relation columnRelation : select.getColumnRelations())\n@@ -225,7 +228,7 @@ private static void batchUpdate(ClientState clientState, List<UpdateStatement> u\n \n         for (UpdateStatement update : updateStatements)\n         {\n-            String cfname = update.getColumnFamily();\n+            CFMetaData metadata = validateColumnFamily(keyspace, update.getColumnFamily(), false);\n             // Avoid unnecessary authorizations.\n             if (!(cfamsSeen.contains(update.getColumnFamily())))\n             {\n@@ -235,9 +238,7 @@ private static void batchUpdate(ClientState clientState, List<UpdateStatement> u\n             \n             // FIXME: keys as ascii is not a Real Solution\n             ByteBuffer key = update.getKey().getByteBuffer(AsciiType.instance);\n-            validateKey(key);\n-            validateColumnFamily(keyspace, update.getColumnFamily(), false);\n-            validateKeyType(key, keyspace, cfname);\n+            validateKey(metadata, key);\n             AbstractType<?> comparator = update.getComparator(keyspace);\n             \n             RowMutation rm = new RowMutation(keyspace, key);\n@@ -246,7 +247,7 @@ private static void batchUpdate(ClientState clientState, List<UpdateStatement> u\n                 ByteBuffer colName = column.getKey().getByteBuffer(comparator);\n                 ByteBuffer colValue = column.getValue().getByteBuffer(update.getValueValidator(keyspace, colName));\n                 \n-                validateColumn(keyspace, update.getColumnFamily(), colName, colValue);\n+                validateColumn(metadata, colName, colValue);\n                 rm.add(new QueryPath(update.getColumnFamily(), null, colName), colValue, System.currentTimeMillis());\n             }\n             \n@@ -365,33 +366,19 @@ public Object call() throws Exception\n             }\n         }\n     }\n-\n-    private static void validateColumnNames(String keyspace, String columnFamily, Iterable<ByteBuffer> columns)\n-    throws InvalidRequestException\n-    {\n-        for (ByteBuffer name : columns)\n-        {\n-            if (name.remaining() > IColumn.MAX_NAME_LENGTH)\n-                throw new InvalidRequestException(String.format(\"column name is too long (%s > %s)\",\n-                                                                name.remaining(),\n-                                                                IColumn.MAX_NAME_LENGTH));\n-            if (name.remaining() == 0)\n-                throw new InvalidRequestException(\"zero-length column name\");\n-        }\n-    }\n     \n-    private static void validateColumnName(String keyspace, String columnFamily, ByteBuffer column)\n+    private static void validateColumnName(CFMetaData metadata, ByteBuffer column)\n     throws InvalidRequestException\n     {\n-        validateColumnNames(keyspace, columnFamily, Arrays.asList(column));\n+        validateColumnNames(metadata, null, Arrays.asList(column));\n     }\n     \n-    private static void validateColumn(String keyspace, String columnFamily, ByteBuffer name, ByteBuffer value)\n+    private static void validateColumn(CFMetaData metadata, ByteBuffer name, ByteBuffer value)\n     throws InvalidRequestException\n     {\n-        validateColumnName(keyspace, columnFamily, name);\n-        AbstractType<?> validator = DatabaseDescriptor.getValueValidator(keyspace, columnFamily, name);\n-        \n+        validateColumnName(metadata, name);\n+        AbstractType<?> validator = metadata.getValueValidator(name);\n+\n         try\n         {\n             if (validator != null)\n@@ -405,25 +392,25 @@ private static void validateColumn(String keyspace, String columnFamily, ByteBuf\n         }\n     }\n     \n-    private static void validateSlicePredicate(String keyspace, String columnFamily, SlicePredicate predicate)\n+    private static void validateSlicePredicate(CFMetaData metadata, SlicePredicate predicate)\n     throws InvalidRequestException\n     {\n         if (predicate.slice_range != null)\n-            validateSliceRange(keyspace, columnFamily, predicate.slice_range);\n+            validateSliceRange(metadata, predicate.slice_range);\n         else\n-            validateColumnNames(keyspace, columnFamily, predicate.column_names);\n+            validateColumnNames(metadata, null, predicate.column_names);\n     }\n     \n-    private static void validateSliceRange(String keyspace, String columnFamily, SliceRange range)\n+    private static void validateSliceRange(CFMetaData metadata, SliceRange range)\n     throws InvalidRequestException\n     {\n-        validateSliceRange(keyspace, columnFamily, range.start, range.finish, range.reversed);\n+        validateSliceRange(metadata, range.start, range.finish, range.reversed);\n     }\n     \n-    private static void validateSliceRange(String keyspace, String columnFamily, ByteBuffer start, ByteBuffer finish, boolean reversed)\n+    private static void validateSliceRange(CFMetaData metadata, ByteBuffer start, ByteBuffer finish, boolean reversed)\n     throws InvalidRequestException\n     {\n-        AbstractType<?> comparator = ColumnFamily.getComparatorFor(keyspace, columnFamily, null);\n+        AbstractType<?> comparator = metadata.getComparatorFor(null);\n         Comparator<ByteBuffer> orderedComparator = reversed ? comparator.reverseComparator: comparator;\n         if (start.remaining() > 0 && finish.remaining() > 0 && orderedComparator.compare(start, finish) > 0)\n             throw new InvalidRequestException(\"range finish must come after start in traversal order\");\n@@ -577,8 +564,9 @@ public static CqlResult process(String queryString, ClientState clientState)\n             case DELETE:\n                 DeleteStatement delete = (DeleteStatement)statement.statement;\n                 clientState.hasColumnFamilyAccess(delete.getColumnFamily(), Permission.WRITE);\n-                AbstractType<?> comparator = DatabaseDescriptor.getComparator(keyspace, delete.getColumnFamily());\n-                \n+                CFMetaData metadata = validateColumnFamily(keyspace, delete.getColumnFamily(), false);\n+                AbstractType<?> comparator = metadata.getComparatorFor(null);\n+\n                 List<RowMutation> rowMutations = new ArrayList<RowMutation>();\n                 for (Term key : delete.getKeys())\n                 {\n@@ -590,7 +578,7 @@ public static CqlResult process(String queryString, ClientState clientState)\n                         for (Term column : delete.getColumns())\n                         {\n                             ByteBuffer columnName = column.getByteBuffer(comparator);\n-                            validateColumnName(keyspace, delete.getColumnFamily(), columnName);\n+                            validateColumnName(metadata, columnName);\n                             rm.delete(new QueryPath(delete.getColumnFamily(), null, columnName),\n                                       System.currentTimeMillis());\n                         }",
                "raw_url": "https://github.com/apache/cassandra/raw/28a4b070a0a215ce586103fd50827eae7865b252/src/java/org/apache/cassandra/cql/QueryProcessor.java",
                "sha": "c5197ae8ba34e9eda9e5a6d3619d7f54b30dfc4d",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cassandra/blob/28a4b070a0a215ce586103fd50827eae7865b252/src/java/org/apache/cassandra/thrift/CassandraServer.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/thrift/CassandraServer.java?ref=28a4b070a0a215ce586103fd50827eae7865b252",
                "deletions": 10,
                "filename": "src/java/org/apache/cassandra/thrift/CassandraServer.java",
                "patch": "@@ -265,7 +265,7 @@ public ClientState state()\n         {\n             for (ByteBuffer key: keys)\n             {\n-                ThriftValidation.validateKey(key);\n+                ThriftValidation.validateKey(metadata, key);\n                 commands.add(new SliceByNamesReadCommand(keyspace, key, column_parent, predicate.column_names));\n             }\n         }\n@@ -274,7 +274,7 @@ public ClientState state()\n             SliceRange range = predicate.slice_range;\n             for (ByteBuffer key: keys)\n             {\n-                ThriftValidation.validateKey(key);\n+                ThriftValidation.validateKey(metadata, key);\n                 commands.add(new SliceFromReadCommand(keyspace, key, column_parent, range.start, range.finish, range.reversed, range.count));\n             }\n         }\n@@ -293,7 +293,7 @@ private ColumnOrSuperColumn internal_get(ByteBuffer key, ColumnPath column_path,\n \n         QueryPath path = new QueryPath(column_path.column_family, column_path.column == null ? null : column_path.super_column);\n         List<ByteBuffer> nameAsList = Arrays.asList(column_path.column == null ? column_path.super_column : column_path.column);\n-        ThriftValidation.validateKey(key);\n+        ThriftValidation.validateKey(metadata, key);\n         ReadCommand command = new SliceByNamesReadCommand(keyspace, key, path, nameAsList);\n \n         Map<DecoratedKey, ColumnFamily> cfamilies = readColumnFamily(Arrays.asList(command), consistency_level);\n@@ -349,11 +349,10 @@ private void internal_insert(ByteBuffer key, ColumnParent column_parent, Column\n     {\n         state().hasColumnFamilyAccess(column_parent.column_family, Permission.WRITE);\n \n-        ThriftValidation.validateKey(key);\n         CFMetaData metadata = ThriftValidation.validateColumnFamily(state().getKeyspace(), column_parent.column_family, isCommutativeOp);\n+        ThriftValidation.validateKey(metadata, key);\n         if (isCommutativeOp)\n             ThriftValidation.validateCommutativeForWrite(metadata, consistency_level);\n-        ThriftValidation.validateKeyType(key, state().getKeyspace(), column_parent.column_family);\n         ThriftValidation.validateColumnNames(metadata, column_parent, Arrays.asList(column.name));\n         ThriftValidation.validateColumnData(metadata, column);\n \n@@ -387,12 +386,12 @@ private void internal_batch_mutate(Map<ByteBuffer,Map<String,List<Mutation>>> mu\n         {\n             ByteBuffer key = mutationEntry.getKey();\n \n-            ThriftValidation.validateKey(key);\n             Map<String, List<Mutation>> columnFamilyToMutations = mutationEntry.getValue();\n             for (Map.Entry<String, List<Mutation>> columnFamilyMutations : columnFamilyToMutations.entrySet())\n             {\n                 String cfName = columnFamilyMutations.getKey();\n-                ThriftValidation.validateKeyType(key, state().getKeyspace(), cfName);\n+                CFMetaData metadata = ThriftValidation.validateColumnFamily(state().getKeyspace(), cfName, isCommutativeOp);\n+                ThriftValidation.validateKey(metadata, key);\n \n                 // Avoid unneeded authorizations\n                 if (!(cfamsSeen.contains(cfName)))\n@@ -401,7 +400,6 @@ private void internal_batch_mutate(Map<ByteBuffer,Map<String,List<Mutation>>> mu\n                     cfamsSeen.add(cfName);\n                 }\n \n-                CFMetaData metadata = ThriftValidation.validateColumnFamily(state().getKeyspace(), cfName, isCommutativeOp);\n                 if (isCommutativeOp)\n                     ThriftValidation.validateCommutativeForWrite(metadata, consistency_level);\n \n@@ -431,11 +429,11 @@ private void internal_remove(ByteBuffer key, ColumnPath column_path, long timest\n     {\n         state().hasColumnFamilyAccess(column_path.column_family, Permission.WRITE);\n \n-        ThriftValidation.validateKey(key);\n         CFMetaData metadata = ThriftValidation.validateColumnFamily(state().getKeyspace(), column_path.column_family, isCommutativeOp);\n+        ThriftValidation.validateKey(metadata, key);\n+        ThriftValidation.validateColumnPathOrParent(metadata, column_path);\n         if (isCommutativeOp)\n             ThriftValidation.validateCommutativeForWrite(metadata, consistency_level);\n-        ThriftValidation.validateKeyType(key, state().getKeyspace(), column_path.column_family);\n \n         RowMutation rm = new RowMutation(state().getKeyspace(), key);\n         rm.delete(new QueryPath(column_path), timestamp); ",
                "raw_url": "https://github.com/apache/cassandra/raw/28a4b070a0a215ce586103fd50827eae7865b252/src/java/org/apache/cassandra/thrift/CassandraServer.java",
                "sha": "80833da944479f1fff374c47ec3819fb609dea7a",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/28a4b070a0a215ce586103fd50827eae7865b252/src/java/org/apache/cassandra/thrift/ThriftValidation.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/thrift/ThriftValidation.java?ref=28a4b070a0a215ce586103fd50827eae7865b252",
                "deletions": 7,
                "filename": "src/java/org/apache/cassandra/thrift/ThriftValidation.java",
                "patch": "@@ -47,30 +47,27 @@\n  */\n public class ThriftValidation\n {\n-    public static void validateKey(ByteBuffer key) throws InvalidRequestException\n+    public static void validateKey(CFMetaData metadata, ByteBuffer key) throws InvalidRequestException\n     {\n         if (key == null || key.remaining() == 0)\n         {\n             throw new InvalidRequestException(\"Key may not be empty\");\n         }\n+\n         // check that key can be handled by FBUtilities.writeShortByteArray\n         if (key.remaining() > FBUtilities.MAX_UNSIGNED_SHORT)\n         {\n             throw new InvalidRequestException(\"Key length of \" + key.remaining() +\n                                               \" is longer than maximum of \" + FBUtilities.MAX_UNSIGNED_SHORT);\n         }\n-    }\n \n-    public static void validateKeyType(ByteBuffer key, String ksname, String cfname) throws InvalidRequestException\n-    {\n         try\n         {\n-            AbstractType<?> keyValidator = DatabaseDescriptor.getCFMetaData(ksname, cfname).getKeyValidator();\n-            keyValidator.validate(key);\n+            metadata.getKeyValidator().validate(key);\n         }\n         catch (MarshalException e)\n         {\n-            throw new InvalidRequestException(e.toString());\n+            throw new InvalidRequestException(e.getMessage());\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/28a4b070a0a215ce586103fd50827eae7865b252/src/java/org/apache/cassandra/thrift/ThriftValidation.java",
                "sha": "1d041b54f3ce83b96db4740c8d888f7664772e31",
                "status": "modified"
            }
        ],
        "message": "merge validateKey/validateKeyType, add CF validation to cql, add comparator to cql name validation.  fixes test NPE.\npatch by jbellis\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/trunk@1086755 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cassandra/commit/f60187d4d56395f25c45ab26422ac8e7d72f5c9c",
        "patched_files": [
            "ThriftValidation.java",
            "CassandraServer.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "CassandraServerTest.java",
            "ThriftValidationTest.java"
        ]
    },
    "cassandra_28bd6c2": {
        "bug_id": "cassandra_28bd6c2",
        "commit": "https://github.com/apache/cassandra/commit/28bd6c2a031e76b725dd773b949070962555698a",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/28bd6c2a031e76b725dd773b949070962555698a/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=28bd6c2a031e76b725dd773b949070962555698a",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 3.11.3\n+ * CQL fromJson(null) throws NullPointerException (CASSANDRA-13891)\n  * Serialize empty buffer as empty string for json output format (CASSANDRA-14245)\n  * Allow logging implementation to be interchanged for embedded testing (CASSANDRA-13396)\n  * SASI tokenizer for simple delimiter based entries (CASSANDRA-14247)",
                "raw_url": "https://github.com/apache/cassandra/raw/28bd6c2a031e76b725dd773b949070962555698a/CHANGES.txt",
                "sha": "03b744250dbf0d67ef1f52c5b30ebc3fee7150fd",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/28bd6c2a031e76b725dd773b949070962555698a/src/java/org/apache/cassandra/cql3/functions/FunctionCall.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/functions/FunctionCall.java?ref=28bd6c2a031e76b725dd773b949070962555698a",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/cql3/functions/FunctionCall.java",
                "patch": "@@ -99,6 +99,8 @@ public boolean containsBindMarker()\n \n     private static Term.Terminal makeTerminal(Function fun, ByteBuffer result, ProtocolVersion version) throws InvalidRequestException\n     {\n+        if (result == null)\n+            return null;\n         if (fun.returnType().isCollection())\n         {\n             switch (((CollectionType) fun.returnType()).kind)",
                "raw_url": "https://github.com/apache/cassandra/raw/28bd6c2a031e76b725dd773b949070962555698a/src/java/org/apache/cassandra/cql3/functions/FunctionCall.java",
                "sha": "8dcb3da087140e2c4dfba6ca7ffb81344d6c2802",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cassandra/blob/28bd6c2a031e76b725dd773b949070962555698a/test/unit/org/apache/cassandra/cql3/validation/entities/JsonTest.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/cql3/validation/entities/JsonTest.java?ref=28bd6c2a031e76b725dd773b949070962555698a",
                "deletions": 0,
                "filename": "test/unit/org/apache/cassandra/cql3/validation/entities/JsonTest.java",
                "patch": "@@ -249,6 +249,13 @@ public void testFromJsonFct() throws Throwable\n \n         // handle nulls\n         execute(\"INSERT INTO %s (k, asciival) VALUES (?, fromJson(?))\", 0, null);\n+        assertRows(execute(\"SELECT k, asciival FROM %s WHERE k = ?\", 0), row(0, null));\n+\n+        execute(\"INSERT INTO %s (k, frozenmapval) VALUES (?, fromJson(?))\", 0, null);\n+        assertRows(execute(\"SELECT k, frozenmapval FROM %s WHERE k = ?\", 0), row(0, null));\n+\n+        execute(\"INSERT INTO %s (k, udtval) VALUES (?, fromJson(?))\", 0, null);\n+        assertRows(execute(\"SELECT k, udtval FROM %s WHERE k = ?\", 0), row(0, null));\n \n         // ================ ascii ================\n         execute(\"INSERT INTO %s (k, asciival) VALUES (?, fromJson(?))\", 0, \"\\\"ascii text\\\"\");",
                "raw_url": "https://github.com/apache/cassandra/raw/28bd6c2a031e76b725dd773b949070962555698a/test/unit/org/apache/cassandra/cql3/validation/entities/JsonTest.java",
                "sha": "a475671b944c7b47000aec06fe63741f37f5c353",
                "status": "modified"
            }
        ],
        "message": "CQL fromJson(null) throws NullPointerException\n\npatch by Edward Ribeiro; reviewed by jasobrown for CASSANDRA-13891",
        "parent": "https://github.com/apache/cassandra/commit/6f30677b28dcbf82bcd0a291f3294ddf87dafaac",
        "patched_files": [
            "Json.java",
            "FunctionCall.java",
            "CHANGES.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "JsonTest.java"
        ]
    },
    "cassandra_2c15098": {
        "bug_id": "cassandra_2c15098",
        "commit": "https://github.com/apache/cassandra/commit/2c150980cc1bfea81fd039f304e74fc2fb30fb45",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/2c150980cc1bfea81fd039f304e74fc2fb30fb45/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=2c150980cc1bfea81fd039f304e74fc2fb30fb45",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 3.0.17\n+ * Fix NPE when performing comparison against a null frozen in LWT (CASSANDRA-14087)\n  * Log when SSTables are deleted (CASSANDRA-14302)\n  * Fix batch commitlog sync regression (CASSANDRA-14292)\n  * Write to pending endpoint when view replica is also base replica (CASSANDRA-14251)",
                "raw_url": "https://github.com/apache/cassandra/raw/2c150980cc1bfea81fd039f304e74fc2fb30fb45/CHANGES.txt",
                "sha": "9c6a853d11c09a8f06588027fb2add3252bb8f00",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/2c150980cc1bfea81fd039f304e74fc2fb30fb45/src/java/org/apache/cassandra/cql3/ColumnCondition.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/ColumnCondition.java?ref=2c150980cc1bfea81fd039f304e74fc2fb30fb45",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/cql3/ColumnCondition.java",
                "patch": "@@ -513,6 +513,10 @@ else if (operator == Operator.NEQ)\n                 else\n                     throw new InvalidRequestException(String.format(\"Invalid comparison with null for operator \\\"%s\\\"\", operator));\n             }\n+            else if (cell == null) // cell is null but condition has a value\n+            {\n+                return false;\n+            }\n \n             // make sure we use v3 serialization format for comparison\n             ByteBuffer conditionValue;",
                "raw_url": "https://github.com/apache/cassandra/raw/2c150980cc1bfea81fd039f304e74fc2fb30fb45/src/java/org/apache/cassandra/cql3/ColumnCondition.java",
                "sha": "c3a3af715b40c11b88383c46929ab6abc26416ce",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/cassandra/blob/2c150980cc1bfea81fd039f304e74fc2fb30fb45/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionTest.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionTest.java?ref=2c150980cc1bfea81fd039f304e74fc2fb30fb45",
                "deletions": 0,
                "filename": "test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionTest.java",
                "patch": "@@ -871,6 +871,24 @@ public void testMapItem() throws Throwable\n         }\n     }\n \n+    @Test\n+    public void testFrozenWithNullValues() throws Throwable\n+    {\n+        createTable(String.format(\"CREATE TABLE %%s (k int PRIMARY KEY, m %s)\", \"frozen<list<text>>\"));\n+        execute(\"INSERT INTO %s (k, m) VALUES (0, null)\");\n+\n+        assertRows(execute(\"UPDATE %s SET m = ? WHERE k = 0 IF m = ?\", list(\"test\"), list(\"comparison\")), row(false, null));\n+\n+        createTable(String.format(\"CREATE TABLE %%s (k int PRIMARY KEY, m %s)\", \"frozen<map<text,int>>\"));\n+        execute(\"INSERT INTO %s (k, m) VALUES (0, null)\");\n+\n+        assertRows(execute(\"UPDATE %s SET m = ? WHERE k = 0 IF m = ?\", map(\"test\", 3), map(\"comparison\", 2)), row(false, null));\n+\n+        createTable(String.format(\"CREATE TABLE %%s (k int PRIMARY KEY, m %s)\", \"frozen<set<text>>\"));\n+        execute(\"INSERT INTO %s (k, m) VALUES (0, null)\");\n+\n+        assertRows(execute(\"UPDATE %s SET m = ? WHERE k = 0 IF m = ?\", set(\"test\"), set(\"comparison\")), row(false, null));\n+    }\n     /**\n      * Test expanded functionality from CASSANDRA-6839,\n      * migrated from cql_tests.py:TestCQL.expanded_map_item_conditional_test()",
                "raw_url": "https://github.com/apache/cassandra/raw/2c150980cc1bfea81fd039f304e74fc2fb30fb45/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionTest.java",
                "sha": "a47691a1da119f2eb9465dd88e9bbd247880530a",
                "status": "modified"
            }
        ],
        "message": "Fix NPE when performing comparison against a null frozen in LWT\n\nPatch by Kurt Greaves; Reviewed by Blake Eggleston for CASSANDRA-14087",
        "parent": "https://github.com/apache/cassandra/commit/d7740052ff6cee74fb6ab973f1052422180d75bc",
        "patched_files": [
            "CHANGES.java",
            "ColumnCondition.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "ColumnConditionTest.java",
            "InsertUpdateIfConditionTest.java"
        ]
    },
    "cassandra_2c3f9ba": {
        "bug_id": "cassandra_2c3f9ba",
        "commit": "https://github.com/apache/cassandra/commit/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cassandra/blob/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/auth/DataResource.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/auth/DataResource.java?ref=2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2",
                "deletions": 4,
                "filename": "src/java/org/apache/cassandra/auth/DataResource.java",
                "patch": "@@ -152,17 +152,17 @@ public IResource getParent()\n \n     public boolean isRootLevel()\n     {\n-        return level.equals(Level.ROOT);\n+        return level == Level.ROOT;\n     }\n \n     public boolean isKeyspaceLevel()\n     {\n-        return level.equals(Level.KEYSPACE);\n+        return level == Level.KEYSPACE;\n     }\n \n     public boolean isColumnFamilyLevel()\n     {\n-        return level.equals(Level.COLUMN_FAMILY);\n+        return level == Level.COLUMN_FAMILY;\n     }\n     /**\n      * @return keyspace of the resource. Throws IllegalStateException if it's the root-level resource.\n@@ -187,14 +187,16 @@ public String getColumnFamily()\n     /**\n      * @return Whether or not the resource has a parent in the hierarchy.\n      */\n+    @Override\n     public boolean hasParent()\n     {\n-        return !level.equals(Level.ROOT);\n+        return level != Level.ROOT;\n     }\n \n     /**\n      * @return Whether or not the resource exists in Cassandra.\n      */\n+    @Override\n     public boolean exists()\n     {\n         switch (level)",
                "raw_url": "https://github.com/apache/cassandra/raw/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/auth/DataResource.java",
                "sha": "75a3fdf3dc25f91636745c68b3e2402a88a87bba",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cassandra/blob/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/cache/CachingOptions.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cache/CachingOptions.java?ref=2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2",
                "deletions": 6,
                "filename": "src/java/org/apache/cassandra/cache/CachingOptions.java",
                "patch": "@@ -188,7 +188,7 @@ public static KeyCache fromString(String keyCache)\n \n         public boolean isEnabled()\n         {\n-            return type.equals(Type.ALL);\n+            return type == Type.ALL;\n         }\n \n         @Override\n@@ -223,7 +223,7 @@ public String toString()\n \n         public RowCache(Type type)\n         {\n-            this(type, type.equals(Type.ALL) ? Integer.MAX_VALUE : 0);\n+            this(type, (type == Type.ALL) ? Integer.MAX_VALUE : 0);\n         }\n         public RowCache(Type type, int rowsToCache)\n         {\n@@ -246,17 +246,17 @@ else if (rowCache.equalsIgnoreCase(\"all\"))\n         }\n         public boolean isEnabled()\n         {\n-            return type.equals(Type.ALL) || type.equals(Type.HEAD);\n+            return (type == Type.ALL) || (type == Type.HEAD);\n         }\n         public boolean cacheFullPartitions()\n         {\n-            return type.equals(Type.ALL);\n+            return type == Type.ALL;\n         }\n         @Override\n         public String toString()\n         {\n-            if (type.equals(Type.ALL)) return \"ALL\";\n-            if (type.equals(Type.NONE)) return \"NONE\";\n+            if (type == Type.ALL) return \"ALL\";\n+            if (type == Type.NONE) return \"NONE\";\n             return String.valueOf(rowsToCache);\n         }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/cache/CachingOptions.java",
                "sha": "c2605f58479b007c89b0a792ff42a1bf778fe711",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/config/CFMetaData.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/CFMetaData.java?ref=2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/config/CFMetaData.java",
                "patch": "@@ -815,7 +815,7 @@ public void validateCompatility(CFMetaData cfm) throws ConfigurationException\n             throw new ConfigurationException(String.format(\"Column family ID mismatch (found %s; expected %s)\",\n                                                            cfm.cfId, cfId));\n \n-        if (!cfm.cfType.equals(cfType))\n+        if (cfm.cfType != cfType)\n             throw new ConfigurationException(\"types do not match.\");\n \n         if (!cfm.comparator.isCompatibleWith(comparator))",
                "raw_url": "https://github.com/apache/cassandra/raw/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/config/CFMetaData.java",
                "sha": "23c1b8b639328f01afb19f15e3c3c1584b395813",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/cassandra/blob/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/cql3/ColumnCondition.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/ColumnCondition.java?ref=2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2",
                "deletions": 17,
                "filename": "src/java/org/apache/cassandra/cql3/ColumnCondition.java",
                "patch": "@@ -59,7 +59,7 @@ private ColumnCondition(ColumnDefinition column, Term collectionElement, Term va\n         this.inValues = inValues;\n         this.operator = op;\n \n-        if (!operator.equals(Operator.IN))\n+        if (operator != Operator.IN)\n             assert this.inValues == null;\n     }\n \n@@ -117,7 +117,7 @@ public void collectMarkerSpecification(VariableSpecifications boundNames)\n         if (collectionElement != null)\n             collectionElement.collectMarkerSpecification(boundNames);\n \n-        if (operator.equals(Operator.IN) && inValues != null)\n+        if ((operator == Operator.IN) && inValues != null)\n         {\n             for (Term value : inValues)\n                 value.collectMarkerSpecification(boundNames);\n@@ -130,7 +130,7 @@ public void collectMarkerSpecification(VariableSpecifications boundNames)\n \n     public ColumnCondition.Bound bind(QueryOptions options) throws InvalidRequestException\n     {\n-        boolean isInCondition = operator.equals(Operator.IN);\n+        boolean isInCondition = operator == Operator.IN;\n         if (column.type instanceof CollectionType)\n         {\n             if (collectionElement == null)\n@@ -186,7 +186,7 @@ protected boolean compareWithOperator(Operator operator, AbstractType<?> type, B\n             else if (otherValue == null)\n             {\n                 // the condition value is not null, so only NEQ can return true\n-                return operator.equals(Operator.NEQ);\n+                return operator == Operator.NEQ;\n             }\n             int comparison = type.compare(otherValue, value);\n             switch (operator)\n@@ -236,7 +236,7 @@ private SimpleBound(ColumnCondition condition, QueryOptions options) throws Inva\n         {\n             super(condition.column, condition.operator);\n             assert !(column.type instanceof CollectionType) && condition.collectionElement == null;\n-            assert !condition.operator.equals(Operator.IN);\n+            assert condition.operator != Operator.IN;\n             this.value = condition.value.bindAndGet(options);\n         }\n \n@@ -258,7 +258,7 @@ private SimpleInBound(ColumnCondition condition, QueryOptions options) throws In\n         {\n             super(condition.column, condition.operator);\n             assert !(column.type instanceof CollectionType) && condition.collectionElement == null;\n-            assert condition.operator.equals(Operator.IN);\n+            assert condition.operator == Operator.IN;\n             if (condition.inValues == null)\n                 this.inValues = ((Lists.Marker) condition.value).bind(options).getElements();\n             else\n@@ -291,7 +291,7 @@ private ElementAccessBound(ColumnCondition condition, QueryOptions options) thro\n         {\n             super(condition.column, condition.operator);\n             assert column.type instanceof CollectionType && condition.collectionElement != null;\n-            assert !condition.operator.equals(Operator.IN);\n+            assert condition.operator != Operator.IN;\n             this.collectionElement = condition.collectionElement.bindAndGet(options);\n             this.value = condition.value.bindAndGet(options);\n         }\n@@ -468,7 +468,7 @@ private CollectionBound(ColumnCondition condition, QueryOptions options) throws\n         {\n             super(condition.column, condition.operator);\n             assert column.type.isCollection() && condition.collectionElement == null;\n-            assert !condition.operator.equals(Operator.IN);\n+            assert condition.operator != Operator.IN;\n             this.value = condition.value.bind(options);\n         }\n \n@@ -481,9 +481,9 @@ public boolean appliesTo(Composite rowPrefix, ColumnFamily current, final long n\n                 Iterator<Cell> iter = collectionColumns(current.metadata().comparator.create(rowPrefix, column), current, now);\n                 if (value == null)\n                 {\n-                    if (operator.equals(Operator.EQ))\n+                    if (operator == Operator.EQ)\n                         return !iter.hasNext();\n-                    else if (operator.equals(Operator.NEQ))\n+                    else if (operator == Operator.NEQ)\n                         return iter.hasNext();\n                     else\n                         throw new InvalidRequestException(String.format(\"Invalid comparison with null for operator \\\"%s\\\"\", operator));\n@@ -535,7 +535,7 @@ private static boolean setOrListAppliesTo(AbstractType<?> type, Iterator<Cell> i\n             while(iter.hasNext())\n             {\n                 if (!conditionIter.hasNext())\n-                    return operator.equals(Operator.GT) || operator.equals(Operator.GTE) || operator.equals(Operator.NEQ);\n+                    return (operator == Operator.GT) || (operator == Operator.GTE) || (operator == Operator.NEQ);\n \n                 // for lists we use the cell value; for sets we use the cell name\n                 ByteBuffer cellValue = isSet? iter.next().name().collectionElement() : iter.next().value();\n@@ -545,7 +545,7 @@ private static boolean setOrListAppliesTo(AbstractType<?> type, Iterator<Cell> i\n             }\n \n             if (conditionIter.hasNext())\n-                return operator.equals(Operator.LT) || operator.equals(Operator.LTE) || operator.equals(Operator.NEQ);\n+                return (operator == Operator.LT) || (operator == Operator.LTE) || (operator == Operator.NEQ);\n \n             // they're equal\n             return operator == Operator.EQ || operator == Operator.LTE || operator == Operator.GTE;\n@@ -590,7 +590,7 @@ static boolean mapAppliesTo(MapType type, Iterator<Cell> iter, Map<ByteBuffer, B\n             while(iter.hasNext())\n             {\n                 if (!conditionIter.hasNext())\n-                    return operator.equals(Operator.GT) || operator.equals(Operator.GTE) || operator.equals(Operator.NEQ);\n+                    return (operator == Operator.GT) || (operator == Operator.GTE) || (operator == Operator.NEQ);\n \n                 Map.Entry<ByteBuffer, ByteBuffer> conditionEntry = conditionIter.next();\n                 Cell c = iter.next();\n@@ -607,7 +607,7 @@ static boolean mapAppliesTo(MapType type, Iterator<Cell> iter, Map<ByteBuffer, B\n             }\n \n             if (conditionIter.hasNext())\n-                return operator.equals(Operator.LT) || operator.equals(Operator.LTE) || operator.equals(Operator.NEQ);\n+                return (operator == Operator.LT) || (operator == Operator.LTE) || (operator == Operator.NEQ);\n \n             // they're equal\n             return operator == Operator.EQ || operator == Operator.LTE || operator == Operator.GTE;\n@@ -622,7 +622,7 @@ private CollectionInBound(ColumnCondition condition, QueryOptions options) throw\n         {\n             super(condition.column, condition.operator);\n             assert column.type instanceof CollectionType && condition.collectionElement == null;\n-            assert condition.operator.equals(Operator.IN);\n+            assert condition.operator == Operator.IN;\n             inValues = new ArrayList<>();\n             if (condition.inValues == null)\n             {\n@@ -768,7 +768,7 @@ public ColumnCondition prepare(String keyspace, ColumnDefinition receiver) throw\n \n             if (collectionElement == null)\n             {\n-                if (operator.equals(Operator.IN))\n+                if (operator == Operator.IN)\n                 {\n                     if (inValues == null)\n                         return ColumnCondition.inCondition(receiver, inMarker.prepare(keyspace, receiver));\n@@ -802,7 +802,7 @@ public ColumnCondition prepare(String keyspace, ColumnDefinition receiver) throw\n                 default:\n                     throw new AssertionError();\n             }\n-            if (operator.equals(Operator.IN))\n+            if (operator == Operator.IN)\n             {\n                 if (inValues == null)\n                     return ColumnCondition.inCondition(receiver, collectionElement.prepare(keyspace, elementSpec), inMarker.prepare(keyspace, valueSpec));",
                "raw_url": "https://github.com/apache/cassandra/raw/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/cql3/ColumnCondition.java",
                "sha": "a8c8cc2ada36c9c163f3d9310384c91226a1fc27",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/cql3/statements/SelectStatement.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/statements/SelectStatement.java?ref=2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/cql3/statements/SelectStatement.java",
                "patch": "@@ -1422,7 +1422,7 @@ public RawStatement(CFName cfName, Parameters parameters, List<RawSelector> sele\n                         hasQueriableIndex |= queriable[0];\n                         hasQueriableClusteringColumnIndex |= queriable[1];\n                         names.add(def);\n-                        hasMultiColumnRelations |= ColumnDefinition.Kind.CLUSTERING_COLUMN.equals(def.kind);\n+                        hasMultiColumnRelations |= ColumnDefinition.Kind.CLUSTERING_COLUMN == def.kind;\n                     }\n                     updateRestrictionsForRelation(stmt, names, rel, boundNames);\n                 }\n@@ -1434,7 +1434,7 @@ public RawStatement(CFName cfName, Parameters parameters, List<RawSelector> sele\n                     boolean[] queriable = processRelationEntity(stmt, indexManager, relation, entity, def);\n                     hasQueriableIndex |= queriable[0];\n                     hasQueriableClusteringColumnIndex |= queriable[1];\n-                    hasSingleColumnRelations |= ColumnDefinition.Kind.CLUSTERING_COLUMN.equals(def.kind);\n+                    hasSingleColumnRelations |= ColumnDefinition.Kind.CLUSTERING_COLUMN == def.kind;\n                     updateRestrictionsForRelation(stmt, def, rel, boundNames);\n                 }\n             }",
                "raw_url": "https://github.com/apache/cassandra/raw/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/cql3/statements/SelectStatement.java",
                "sha": "960abaa788b3f40642acda2f1e43395608513a75",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/db/DataTracker.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/DataTracker.java?ref=2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/DataTracker.java",
                "patch": "@@ -312,7 +312,7 @@ public void replaceWithNewInstances(Collection<SSTableReader> toReplace, Collect\n     public void replaceEarlyOpenedFiles(Collection<SSTableReader> toReplace, Collection<SSTableReader> replaceWith)\n     {\n         for (SSTableReader s : toReplace)\n-            assert s.openReason.equals(SSTableReader.OpenReason.EARLY);\n+            assert s.openReason == SSTableReader.OpenReason.EARLY;\n         // note that we can replace an early opened file with a real one\n         replaceReaders(toReplace, replaceWith, false);\n     }",
                "raw_url": "https://github.com/apache/cassandra/raw/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/db/DataTracker.java",
                "sha": "f8b9376b927ba24e7b64588dab62940bc6224bdd",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/service/ClientState.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/ClientState.java?ref=2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2",
                "deletions": 4,
                "filename": "src/java/org/apache/cassandra/service/ClientState.java",
                "patch": "@@ -235,10 +235,10 @@ private void hasAccess(String keyspace, Permission perm, DataResource resource)\n             return;\n         validateLogin();\n         preventSystemKSSchemaModification(keyspace, resource, perm);\n-        if (perm.equals(Permission.SELECT) && READABLE_SYSTEM_RESOURCES.contains(resource))\n+        if ((perm == Permission.SELECT) && READABLE_SYSTEM_RESOURCES.contains(resource))\n             return;\n         if (PROTECTED_AUTH_RESOURCES.contains(resource))\n-            if (perm.equals(Permission.CREATE) || perm.equals(Permission.ALTER) || perm.equals(Permission.DROP))\n+            if ((perm == Permission.CREATE) || (perm == Permission.ALTER) || (perm == Permission.DROP))\n                 throw new UnauthorizedException(String.format(\"%s schema is protected\", resource));\n         ensureHasPermission(perm, resource);\n     }\n@@ -258,7 +258,7 @@ public void ensureHasPermission(Permission perm, IResource resource) throws Unau\n     private void preventSystemKSSchemaModification(String keyspace, DataResource resource, Permission perm) throws UnauthorizedException\n     {\n         // we only care about schema modification.\n-        if (!(perm.equals(Permission.ALTER) || perm.equals(Permission.DROP) || perm.equals(Permission.CREATE)))\n+        if (!((perm == Permission.ALTER) || (perm == Permission.DROP) || (perm == Permission.CREATE)))\n             return;\n \n         // prevent system keyspace modification\n@@ -267,7 +267,7 @@ private void preventSystemKSSchemaModification(String keyspace, DataResource res\n \n         // we want to allow altering AUTH_KS and TRACING_KS.\n         Set<String> allowAlter = Sets.newHashSet(Auth.AUTH_KS, TraceKeyspace.NAME);\n-        if (allowAlter.contains(keyspace.toLowerCase()) && !(resource.isKeyspaceLevel() && perm.equals(Permission.ALTER)))\n+        if (allowAlter.contains(keyspace.toLowerCase()) && !(resource.isKeyspaceLevel() && (perm == Permission.ALTER)))\n             throw new UnauthorizedException(String.format(\"Cannot %s %s\", perm, resource));\n     }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/service/ClientState.java",
                "sha": "9c8d7d86e43507c8fb157f6e7bfb4f820099d38b",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/service/StorageService.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2",
                "deletions": 3,
                "filename": "src/java/org/apache/cassandra/service/StorageService.java",
                "patch": "@@ -1335,7 +1335,7 @@ public void beforeChange(InetAddress endpoint, EndpointState currentState, Appli\n      */\n     public void onChange(InetAddress endpoint, ApplicationState state, VersionedValue value)\n     {\n-        if (state.equals(ApplicationState.STATUS))\n+        if (state == ApplicationState.STATUS)\n         {\n             String apStateValue = value.value;\n             String[] pieces = apStateValue.split(VersionedValue.DELIMITER_STR, -1);\n@@ -2194,7 +2194,7 @@ public void forceKeyspaceCompaction(String keyspaceName, String... columnFamilie\n      */\n     public void takeSnapshot(String tag, String... keyspaceNames) throws IOException\n     {\n-        if (operationMode.equals(Mode.JOINING))\n+        if (operationMode == Mode.JOINING)\n             throw new IOException(\"Cannot snapshot until bootstrap completes\");\n         if (tag == null || tag.equals(\"\"))\n             throw new IOException(\"You must supply a snapshot name.\");\n@@ -2233,7 +2233,7 @@ public void takeColumnFamilySnapshot(String keyspaceName, String columnFamilyNam\n     {\n         if (keyspaceName == null)\n             throw new IOException(\"You must supply a keyspace name\");\n-        if (operationMode.equals(Mode.JOINING))\n+        if (operationMode == Mode.JOINING)\n             throw new IOException(\"Cannot snapshot until bootstrap completes\");\n \n         if (columnFamilyName == null)",
                "raw_url": "https://github.com/apache/cassandra/raw/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/service/StorageService.java",
                "sha": "9cc643babaf0846b8f9340da4cdb48de92c942ba",
                "status": "modified"
            }
        ],
        "message": "avoid npe chance, use == with enums",
        "parent": "https://github.com/apache/cassandra/commit/9c564f10fddce15746e81f003798ddddd023522b",
        "patched_files": [
            "CFMetaData.java",
            "ColumnCondition.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "ColumnConditionTest.java",
            "CFMetaDataTest.java"
        ]
    },
    "cassandra_2e5e11d": {
        "bug_id": "cassandra_2e5e11d",
        "commit": "https://github.com/apache/cassandra/commit/2e5e11d66d41038bee8d2f81eb013f735d233def",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/2e5e11d66d41038bee8d2f81eb013f735d233def/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=2e5e11d66d41038bee8d2f81eb013f735d233def",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 2.2.13\n+ * CQL fromJson(null) throws NullPointerException (CASSANDRA-13891)\n  * Fix query pager DEBUG log leak causing hit in paged reads throughput (CASSANDRA-14318)\n  * Backport circleci yaml (CASSANDRA-14240)\n Merged from 2.1:",
                "raw_url": "https://github.com/apache/cassandra/raw/2e5e11d66d41038bee8d2f81eb013f735d233def/CHANGES.txt",
                "sha": "527975c73349f51831b84a4a2ea803a4bd7f3488",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/2e5e11d66d41038bee8d2f81eb013f735d233def/src/java/org/apache/cassandra/cql3/functions/FunctionCall.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/functions/FunctionCall.java?ref=2e5e11d66d41038bee8d2f81eb013f735d233def",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/cql3/functions/FunctionCall.java",
                "patch": "@@ -98,6 +98,8 @@ public boolean containsBindMarker()\n \n     private static Term.Terminal makeTerminal(Function fun, ByteBuffer result, int version) throws InvalidRequestException\n     {\n+        if (result == null)\n+            return null;\n         if (!(fun.returnType() instanceof CollectionType))\n             return new Constants.Value(result);\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/2e5e11d66d41038bee8d2f81eb013f735d233def/src/java/org/apache/cassandra/cql3/functions/FunctionCall.java",
                "sha": "323f1bb40ce1b5ffb55e2143f132145055a385eb",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cassandra/blob/2e5e11d66d41038bee8d2f81eb013f735d233def/test/unit/org/apache/cassandra/cql3/validation/entities/JsonTest.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/cql3/validation/entities/JsonTest.java?ref=2e5e11d66d41038bee8d2f81eb013f735d233def",
                "deletions": 0,
                "filename": "test/unit/org/apache/cassandra/cql3/validation/entities/JsonTest.java",
                "patch": "@@ -247,6 +247,13 @@ public void testFromJsonFct() throws Throwable\n \n         // handle nulls\n         execute(\"INSERT INTO %s (k, asciival) VALUES (?, fromJson(?))\", 0, null);\n+        assertRows(execute(\"SELECT k, asciival FROM %s WHERE k = ?\", 0), row(0, null));\n+\n+        execute(\"INSERT INTO %s (k, frozenmapval) VALUES (?, fromJson(?))\", 0, null);\n+        assertRows(execute(\"SELECT k, frozenmapval FROM %s WHERE k = ?\", 0), row(0, null));\n+\n+        execute(\"INSERT INTO %s (k, udtval) VALUES (?, fromJson(?))\", 0, null);\n+        assertRows(execute(\"SELECT k, udtval FROM %s WHERE k = ?\", 0), row(0, null));\n \n         // ================ ascii ================\n         execute(\"INSERT INTO %s (k, asciival) VALUES (?, fromJson(?))\", 0, \"\\\"ascii text\\\"\");",
                "raw_url": "https://github.com/apache/cassandra/raw/2e5e11d66d41038bee8d2f81eb013f735d233def/test/unit/org/apache/cassandra/cql3/validation/entities/JsonTest.java",
                "sha": "46cdd52e8d3a3f75b9c5f1fb015ec092461f6e27",
                "status": "modified"
            }
        ],
        "message": "CQL fromJson(null) throws NullPointerException\n\npatch by Edward Ribeiro; reviewed by jasobrown for CASSANDRA-13891",
        "parent": "https://github.com/apache/cassandra/commit/ac77e5e7742548f7c7c25da3923841f59d4b2713",
        "patched_files": [
            "Json.java",
            "FunctionCall.java",
            "CHANGES.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "JsonTest.java"
        ]
    },
    "cassandra_3016dc7": {
        "bug_id": "cassandra_3016dc7",
        "commit": "https://github.com/apache/cassandra/commit/3016dc7c2f321c072dc11831be92a0331795ae89",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/3016dc7c2f321c072dc11831be92a0331795ae89/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=3016dc7c2f321c072dc11831be92a0331795ae89",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -7,6 +7,7 @@\n  * Fix SASI PREFIX search in CONTAINS mode with partial terms (CASSANDRA-12073)\n  * Increase size of flushExecutor thread pool (CASSANDRA-12071)\n Merged from 3.0:\n+ * Fix reverse queries ignoring range tombstones (CASSANDRA-11733)\n  * Improve streaming synchronization and fault tolerance (CASSANDRA-11414)\n  * Avoid potential race when rebuilding CFMetaData (CASSANDRA-12098)\n  * Avoid missing sstables when getting the canonical sstables (CASSANDRA-11996)",
                "raw_url": "https://github.com/apache/cassandra/raw/3016dc7c2f321c072dc11831be92a0331795ae89/CHANGES.txt",
                "sha": "90e93aa6ff936ea28c9364f1de13cc22ea5f2958",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/3016dc7c2f321c072dc11831be92a0331795ae89/src/java/org/apache/cassandra/db/columniterator/SSTableReversedIterator.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/columniterator/SSTableReversedIterator.java?ref=3016dc7c2f321c072dc11831be92a0331795ae89",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/columniterator/SSTableReversedIterator.java",
                "patch": "@@ -361,7 +361,7 @@ public void build()\n         {\n             deletionInfo = deletionBuilder.build();\n             built = new ImmutableBTreePartition(metadata, partitionKey, columns, Rows.EMPTY_STATIC_ROW, rowBuilder.build(),\n-                                                DeletionInfo.LIVE, EncodingStats.NO_STATS);\n+                                                deletionInfo, EncodingStats.NO_STATS);\n             deletionBuilder = null;\n         }\n     }",
                "raw_url": "https://github.com/apache/cassandra/raw/3016dc7c2f321c072dc11831be92a0331795ae89/src/java/org/apache/cassandra/db/columniterator/SSTableReversedIterator.java",
                "sha": "8f576f1f25963a1e554b6d68fb51799dbcfc1f4b",
                "status": "modified"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/cassandra/blob/3016dc7c2f321c072dc11831be92a0331795ae89/test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java?ref=3016dc7c2f321c072dc11831be92a0331795ae89",
                "deletions": 0,
                "filename": "test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java",
                "patch": "@@ -1105,4 +1105,30 @@ public void testDeleteColumnNoClustering() throws Throwable\n         compact();\n         assertRows(execute(\"SELECT * FROM %s\"), row(0, null));\n     }\n+\n+    @Test\n+    public void testDeleteAndReverseQueries() throws Throwable\n+    {\n+        // This test insert rows in one sstable and a range tombstone covering some of those rows in another, and it\n+        // validates we correctly get only the non-removed rows when doing reverse queries.\n+\n+        createTable(\"CREATE TABLE %s (k text, i int, PRIMARY KEY (k, i))\");\n+\n+        for (int i = 0; i < 10; i++)\n+            execute(\"INSERT INTO %s(k, i) values (?, ?)\", \"a\", i);\n+\n+        flush();\n+\n+        execute(\"DELETE FROM %s WHERE k = ? AND i >= ? AND i <= ?\", \"a\", 2, 7);\n+\n+        assertRows(execute(\"SELECT i FROM %s WHERE k = ? ORDER BY i DESC\", \"a\"),\n+            row(9), row(8), row(1), row(0)\n+        );\n+\n+        flush();\n+\n+        assertRows(execute(\"SELECT i FROM %s WHERE k = ? ORDER BY i DESC\", \"a\"),\n+            row(9), row(8), row(1), row(0)\n+        );\n+    }\n }",
                "raw_url": "https://github.com/apache/cassandra/raw/3016dc7c2f321c072dc11831be92a0331795ae89/test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java",
                "sha": "9b92ebb0468ced3f5cc7c542948cf7bb3745253e",
                "status": "modified"
            }
        ],
        "message": "Merge branch 'cassandra-3.9' into trunk\n\n* cassandra-3.9:\n  Don't ignore deletion info in sstable on reverse queries\n  NPE when trying to remove purgable tombstones from result",
        "parent": "https://github.com/apache/cassandra/commit/9fd607778091c48910db557d7a95029cac077244",
        "patched_files": [
            "SSTableReversedIterator.java",
            "CHANGES.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "DeleteTest.java"
        ]
    },
    "cassandra_3cc4ee3": {
        "bug_id": "cassandra_3cc4ee3",
        "commit": "https://github.com/apache/cassandra/commit/3cc4ee3df22e0a09d9ee2606e7d15913677fdbd0",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/3cc4ee3df22e0a09d9ee2606e7d15913677fdbd0/src/java/org/apache/cassandra/avro/CassandraServer.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/avro/CassandraServer.java?ref=3cc4ee3df22e0a09d9ee2606e7d15913677fdbd0",
                "deletions": 4,
                "filename": "src/java/org/apache/cassandra/avro/CassandraServer.java",
                "patch": "@@ -53,8 +53,6 @@\n import static org.apache.cassandra.utils.FBUtilities.UTF8;\n \n import org.apache.cassandra.service.StorageService;\n-import org.apache.cassandra.thrift.*;\n-import org.apache.thrift.TException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import static org.apache.cassandra.avro.AvroRecordFactory.*;\n@@ -511,12 +509,14 @@ public Void system_add_keyspace(KsDef ksDef) throws AvroRemoteException, Invalid\n             Collection<CFMetaData> cfDefs = new ArrayList<CFMetaData>((int)ksDef.cf_defs.size());\n             for (CfDef cfDef : ksDef.cf_defs)\n             {\n-                String cfType, compare, subCompare;\n+                String cfType, compare, subCompare, reconcilerName;\n                 cfType = cfDef.column_type == null ? D_CF_CFTYPE : cfDef.column_type.toString();\n                 ClockType clockType = ClockType.create(cfDef.clock_type == null ? D_CF_CFCLOCKTYPE : cfDef.clock_type.toString());\n                 compare = cfDef.comparator_type == null ? D_CF_COMPTYPE : cfDef.comparator_type.toString();\n                 subCompare = cfDef.subcomparator_type == null ? D_CF_SUBCOMPTYPE : cfDef.subcomparator_type.toString();\n-                AbstractReconciler reconciler = DatabaseDescriptor.getReconciler(cfDef.reconciler.toString());\n+                reconcilerName = cfDef.reconciler == null  ? null : cfDef.reconciler.toString();\n+                \n+                AbstractReconciler reconciler = DatabaseDescriptor.getReconciler(reconcilerName);\n                 if (reconciler == null)\n                 {\n                     if (clockType == ClockType.Timestamp)    ",
                "raw_url": "https://github.com/apache/cassandra/raw/3cc4ee3df22e0a09d9ee2606e7d15913677fdbd0/src/java/org/apache/cassandra/avro/CassandraServer.java",
                "sha": "1daa13b20f285a000b4620620166cb55f2017cfe",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/3cc4ee3df22e0a09d9ee2606e7d15913677fdbd0/test/system/__init__.py",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/system/__init__.py?ref=3cc4ee3df22e0a09d9ee2606e7d15913677fdbd0",
                "deletions": 0,
                "filename": "test/system/__init__.py",
                "patch": "@@ -207,6 +207,7 @@ def define_schema(self):\n             'column_type': 'Super',\n             'comparator_type': 'BytesType',\n             'subcomparator_type': 'LongType',\n+            'reconciler': '',\n             'comment': '',\n             'row_cache_size': 1000,\n             'preload_row_cache': False,",
                "raw_url": "https://github.com/apache/cassandra/raw/3cc4ee3df22e0a09d9ee2606e7d15913677fdbd0/test/system/__init__.py",
                "sha": "2bfb87d822d5201db6e9e5e70b08551a6400d858",
                "status": "modified"
            }
        ],
        "message": "fixed NullPointerException in reconciler setup\n\nPatch by eevans\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/trunk@955002 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cassandra/commit/48ed0496a2afe849173141b918407d08027105ac",
        "patched_files": [
            "CassandraServer.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "CassandraServerTest.java"
        ]
    },
    "cassandra_3e5edb8": {
        "bug_id": "cassandra_3e5edb8",
        "commit": "https://github.com/apache/cassandra/commit/3e5edb82c73b7b7c6e1d1e970fb764c3e3158da6",
        "file": [
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/cassandra/blob/3e5edb82c73b7b7c6e1d1e970fb764c3e3158da6/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/DatabaseDescriptor.java?ref=3e5edb82c73b7b7c6e1d1e970fb764c3e3158da6",
                "deletions": 23,
                "filename": "src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "patch": "@@ -158,6 +158,27 @@ public static Config loadConfig() throws ConfigurationException\n         return loader.loadConfig();\n     }\n \n+    private static InetAddress getNetworkInterfaceAddress(String intf, String configName) throws ConfigurationException\n+    {\n+        try\n+        {\n+            NetworkInterface ni = NetworkInterface.getByName(intf);\n+            if (ni == null)\n+                throw new ConfigurationException(\"Configured \" + configName + \" \\\"\" + intf + \"\\\" could not be found\");\n+            Enumeration<InetAddress> addrs = ni.getInetAddresses();\n+            if (!addrs.hasMoreElements())\n+                throw new ConfigurationException(\"Configured \" + configName + \" \\\"\" + intf + \"\\\" was found, but had no addresses\");\n+            InetAddress retval = listenAddress = addrs.nextElement();\n+            if (addrs.hasMoreElements())\n+                throw new ConfigurationException(\"Configured \" + configName + \" \\\"\" + intf + \"\\\" can't have more than one address\");\n+            return retval;\n+        }\n+        catch (SocketException e)\n+        {\n+            throw new ConfigurationException(\"Configured \" + configName + \" \\\"\" + intf + \"\\\" caused an exception\", e);\n+        }\n+    }\n+\n     private static void applyConfig(Config config) throws ConfigurationException\n     {\n         conf = config;\n@@ -326,18 +347,7 @@ else if (conf.listen_address != null)\n         }\n         else if (conf.listen_interface != null)\n         {\n-            try\n-            {\n-                Enumeration<InetAddress> addrs = NetworkInterface.getByName(conf.listen_interface).getInetAddresses();\n-                listenAddress = addrs.nextElement();\n-                if (addrs.hasMoreElements())\n-                    throw new ConfigurationException(\"Interface \" + conf.listen_interface +\" can't have more than one address\");\n-            }\n-            catch (SocketException e)\n-            {\n-                throw new ConfigurationException(\"Unknown network interface in listen_interface \" + conf.listen_interface);\n-            }\n-\n+            listenAddress = getNetworkInterfaceAddress(conf.listen_interface, \"listen_interface\");\n         }\n \n         /* Gossip Address to broadcast */\n@@ -374,17 +384,7 @@ else if (conf.rpc_address != null)\n         }\n         else if (conf.rpc_interface != null)\n         {\n-            try\n-            {\n-                Enumeration<InetAddress> addrs = NetworkInterface.getByName(conf.rpc_interface).getInetAddresses();\n-                rpcAddress = addrs.nextElement();\n-                if (addrs.hasMoreElements())\n-                    throw new ConfigurationException(\"Interface \" + conf.rpc_interface +\" can't have more than one address\");\n-            }\n-            catch (SocketException e)\n-            {\n-                throw new ConfigurationException(\"Unknown network interface in rpc_interface \" + conf.rpc_interface);\n-            }\n+            listenAddress = getNetworkInterfaceAddress(conf.rpc_interface, \"rpc_interface\");\n         }\n         else\n         {",
                "raw_url": "https://github.com/apache/cassandra/raw/3e5edb82c73b7b7c6e1d1e970fb764c3e3158da6/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "sha": "1dd16883eb0da7329d2a7a802a35ef017e0f88d6",
                "status": "modified"
            }
        ],
        "message": "rpc_interface and listen_interface generate NPE on startup when specified interface doesn't exist\n\nPatch by Ariel Weisberg; reviewed by Robert Stupp for CASSANDRA-8677",
        "parent": "https://github.com/apache/cassandra/commit/33297bad040c660c8cd5ea6378189fffb100b0ab",
        "patched_files": [
            "DatabaseDescriptor.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "DatabaseDescriptorTest.java"
        ]
    },
    "cassandra_3f56f6b": {
        "bug_id": "cassandra_3f56f6b",
        "commit": "https://github.com/apache/cassandra/commit/3f56f6b4dd975e4eaed65c9f27d0d50b1b6b5788",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/3f56f6b4dd975e4eaed65c9f27d0d50b1b6b5788/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/DatabaseDescriptor.java?ref=3f56f6b4dd975e4eaed65c9f27d0d50b1b6b5788",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "patch": "@@ -939,7 +939,10 @@ public static String getDataFileLocationForTable(String table, long expectedComp\n     public static AbstractType getComparator(String tableName, String cfName)\n     {\n         assert tableName != null;\n-        return getCFMetaData(tableName, cfName).comparator;\n+        CFMetaData cfmd = getCFMetaData(tableName, cfName);\n+        if (cfmd == null)\n+            throw new NullPointerException(\"Unknown ColumnFamily \" + cfName + \" in keyspace \" + tableName);\n+        return cfmd.comparator;\n     }\n \n     public static AbstractType getSubComparator(String tableName, String cfName)",
                "raw_url": "https://github.com/apache/cassandra/raw/3f56f6b4dd975e4eaed65c9f27d0d50b1b6b5788/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "sha": "2d524a9c416247f222d6ccf18cb2f0acc0b4488e",
                "status": "modified"
            }
        ],
        "message": "include cf/keyspace name in sstable2json NPEs.  patch by jbellis\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/cassandra/trunk@898809 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cassandra/commit/2ad01352a88b319a4364bb5a9e714e601b17a700",
        "patched_files": [
            "DatabaseDescriptor.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "DatabaseDescriptorTest.java"
        ]
    },
    "cassandra_417b175": {
        "bug_id": "cassandra_417b175",
        "commit": "https://github.com/apache/cassandra/commit/417b175fa4bfc80994b3d4e85c9f8d93f3d9ab60",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cassandra/blob/417b175fa4bfc80994b3d4e85c9f8d93f3d9ab60/src/java/org/apache/cassandra/db/RowIndexEntry.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/RowIndexEntry.java?ref=417b175fa4bfc80994b3d4e85c9f8d93f3d9ab60",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/db/RowIndexEntry.java",
                "patch": "@@ -90,6 +90,18 @@ public void serialize(RowIndexEntry rie, DataOutput dos) throws IOException\n             }\n         }\n \n+        public RowIndexEntry deserializePositionOnly(DataInput dis, Descriptor descriptor) throws IOException\n+        {\n+            long position = dis.readLong();\n+            if (descriptor.hasPromotedIndexes)\n+            {\n+                int size = dis.readInt();\n+                if (size > 0)\n+                    FileUtils.skipBytesFully(dis, size);\n+            }\n+            return new RowIndexEntry(position);\n+        }\n+\n         public RowIndexEntry deserialize(DataInput dis, Descriptor descriptor) throws IOException\n         {\n             long position = dis.readLong();",
                "raw_url": "https://github.com/apache/cassandra/raw/417b175fa4bfc80994b3d4e85c9f8d93f3d9ab60/src/java/org/apache/cassandra/db/RowIndexEntry.java",
                "sha": "aea3c2fe4ada58e77c19a085d039621d65230ce6",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cassandra/blob/417b175fa4bfc80994b3d4e85c9f8d93f3d9ab60/src/java/org/apache/cassandra/io/sstable/SSTableReader.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/sstable/SSTableReader.java?ref=417b175fa4bfc80994b3d4e85c9f8d93f3d9ab60",
                "deletions": 5,
                "filename": "src/java/org/apache/cassandra/io/sstable/SSTableReader.java",
                "patch": "@@ -360,23 +360,24 @@ private void load(boolean recreatebloom, Set<DecoratedKey> keysToLoadInCache) th\n                 DecoratedKey decoratedKey = null;\n                 int len = ByteBufferUtil.readShortLength(input);\n \n+                // when primary index file contains info other than data position, there is noway to determine\n+                // the last key without deserializing index entry\n                 boolean firstKey = left == null;\n-                boolean lastKey = indexPosition + DBConstants.SHORT_SIZE + len + DBConstants.LONG_SIZE == indexSize;\n+                boolean lastKeyForUnpromoted = indexPosition + DBConstants.SHORT_SIZE + len + DBConstants.LONG_SIZE == indexSize;\n                 boolean shouldAddEntry = indexSummary.shouldAddEntry();\n-                if (shouldAddEntry || cacheLoading || recreatebloom || firstKey || lastKey)\n+                if (shouldAddEntry || cacheLoading || recreatebloom || firstKey || lastKeyForUnpromoted || descriptor.hasPromotedIndexes)\n                 {\n                     decoratedKey = decodeKey(partitioner, descriptor, ByteBufferUtil.read(input, len));\n                     if (firstKey)\n                         left = decoratedKey;\n-                    if (lastKey)\n-                        right = decoratedKey;\n+                    right = decoratedKey;\n                 }\n                 else\n                 {\n                     FileUtils.skipBytesFully(input, len);\n                 }\n \n-                RowIndexEntry indexEntry = RowIndexEntry.serializer.deserialize(input, descriptor);\n+                RowIndexEntry indexEntry = null;\n                 if (decoratedKey != null)\n                 {\n                     if (recreatebloom)\n@@ -385,8 +386,13 @@ private void load(boolean recreatebloom, Set<DecoratedKey> keysToLoadInCache) th\n                         indexSummary.addEntry(decoratedKey, indexPosition);\n                     // if key cache could be used and we have key already pre-loaded\n                     if (cacheLoading && keysToLoadInCache.contains(decoratedKey))\n+                    {\n+                        indexEntry = RowIndexEntry.serializer.deserialize(input, descriptor);\n                         cacheKey(decoratedKey, indexEntry);\n+                    }\n                 }\n+                if (indexEntry == null)\n+                    indexEntry = RowIndexEntry.serializer.deserializePositionOnly(input, descriptor);\n \n                 indexSummary.incrementRowid();\n                 ibuilder.addPotentialBoundary(indexPosition);",
                "raw_url": "https://github.com/apache/cassandra/raw/417b175fa4bfc80994b3d4e85c9f8d93f3d9ab60/src/java/org/apache/cassandra/io/sstable/SSTableReader.java",
                "sha": "9799846401057cc023376f1b2928ddd1c18724e9",
                "status": "modified"
            }
        ],
        "message": "fix NPE in index summarization\npatch by yukim; reviewed by dbrosius for CASSANDRA-4023",
        "parent": "https://github.com/apache/cassandra/commit/1d850e1a5647697d58c1c37a607d4b3809ca7f9a",
        "patched_files": [
            "SSTableReader.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "SSTableReaderTest.java"
        ]
    },
    "cassandra_44d6f49": {
        "bug_id": "cassandra_44d6f49",
        "commit": "https://github.com/apache/cassandra/commit/44d6f49bb051a3a49fb2b758b6fb8016a1845f13",
        "file": [
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/cassandra/blob/44d6f49bb051a3a49fb2b758b6fb8016a1845f13/test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java?ref=44d6f49bb051a3a49fb2b758b6fb8016a1845f13",
                "deletions": 16,
                "filename": "test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.cassandra.CleanupHelper;\n import org.apache.cassandra.db.migration.AddKeyspace;\n+import org.apache.cassandra.gms.Gossiper;\n import org.apache.cassandra.locator.SimpleStrategy;\n import org.apache.cassandra.thrift.InvalidRequestException;\n \n@@ -64,25 +65,34 @@ public void testTransKsMigration() throws IOException, ConfigurationException\n         CleanupHelper.cleanupAndLeaveDirs();\n         DatabaseDescriptor.loadSchemas();\n         assert Schema.instance.getNonSystemTables().size() == 0;\n-        \n-        // add a few.\n-        AddKeyspace ks0 = new AddKeyspace(KSMetaData.testMetadata(\"ks0\", SimpleStrategy.class, KSMetaData.optsWithRF(3)));\n-        ks0.apply();\n-        AddKeyspace ks1 = new AddKeyspace(KSMetaData.testMetadata(\"ks1\", SimpleStrategy.class, KSMetaData.optsWithRF(3)));\n-        ks1.apply();\n \n-        assert Schema.instance.getTableDefinition(\"ks0\") != null;\n-        assert Schema.instance.getTableDefinition(\"ks1\") != null;\n+        Gossiper.instance.start((int)(System.currentTimeMillis() / 1000));\n \n-        Schema.instance.clearTableDefinition(Schema.instance.getTableDefinition(\"ks0\"));\n-        Schema.instance.clearTableDefinition(Schema.instance.getTableDefinition(\"ks1\"));\n+        try\n+        {\n+            // add a few.\n+            AddKeyspace ks0 = new AddKeyspace(KSMetaData.testMetadata(\"ks0\", SimpleStrategy.class, KSMetaData.optsWithRF(3)));\n+            ks0.apply();\n+            AddKeyspace ks1 = new AddKeyspace(KSMetaData.testMetadata(\"ks1\", SimpleStrategy.class, KSMetaData.optsWithRF(3)));\n+            ks1.apply();\n \n-        assert Schema.instance.getTableDefinition(\"ks0\") == null;\n-        assert Schema.instance.getTableDefinition(\"ks1\") == null;\n-        \n-        DatabaseDescriptor.loadSchemas();\n+            assert Schema.instance.getTableDefinition(\"ks0\") != null;\n+            assert Schema.instance.getTableDefinition(\"ks1\") != null;\n+\n+            Schema.instance.clearTableDefinition(Schema.instance.getTableDefinition(\"ks0\"));\n+            Schema.instance.clearTableDefinition(Schema.instance.getTableDefinition(\"ks1\"));\n+\n+            assert Schema.instance.getTableDefinition(\"ks0\") == null;\n+            assert Schema.instance.getTableDefinition(\"ks1\") == null;\n \n-        assert Schema.instance.getTableDefinition(\"ks0\") != null;\n-        assert Schema.instance.getTableDefinition(\"ks1\") != null;\n+            DatabaseDescriptor.loadSchemas();\n+\n+            assert Schema.instance.getTableDefinition(\"ks0\") != null;\n+            assert Schema.instance.getTableDefinition(\"ks1\") != null;\n+        }\n+        finally\n+        {\n+            Gossiper.instance.stop();\n+        }\n     }\n }",
                "raw_url": "https://github.com/apache/cassandra/raw/44d6f49bb051a3a49fb2b758b6fb8016a1845f13/test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java",
                "sha": "1cb2b64c5b56722faa5d4de118e343d38a169866",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/cassandra/blob/44d6f49bb051a3a49fb2b758b6fb8016a1845f13/test/unit/org/apache/cassandra/db/DefsTest.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/db/DefsTest.java?ref=44d6f49bb051a3a49fb2b758b6fb8016a1845f13",
                "deletions": 0,
                "filename": "test/unit/org/apache/cassandra/db/DefsTest.java",
                "patch": "@@ -39,6 +39,7 @@\n import org.apache.cassandra.db.migration.Migration;\n import org.apache.cassandra.db.migration.UpdateColumnFamily;\n import org.apache.cassandra.db.migration.UpdateKeyspace;\n+import org.apache.cassandra.gms.Gossiper;\n import org.apache.cassandra.io.sstable.Component;\n import org.apache.cassandra.io.sstable.Descriptor;\n import org.apache.cassandra.io.sstable.SSTableDeletingTask;\n@@ -49,10 +50,24 @@\n import org.apache.cassandra.thrift.IndexType;\n import org.apache.cassandra.utils.ByteBufferUtil;\n \n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n import org.junit.Test;\n \n public class DefsTest extends CleanupHelper\n {\n+    @BeforeClass\n+    public static void startGossiper()\n+    {\n+        Gossiper.instance.start((int) (System.currentTimeMillis() / 1000));\n+    }\n+\n+    @AfterClass\n+    public static void stopGossiper()\n+    {\n+        Gossiper.instance.stop();\n+    }\n+\n     @Test\n     public void ensureStaticCFMIdsAreLessThan1000()\n     {",
                "raw_url": "https://github.com/apache/cassandra/raw/44d6f49bb051a3a49fb2b758b6fb8016a1845f13/test/unit/org/apache/cassandra/db/DefsTest.java",
                "sha": "9bfa82c1bf0054670cc7eeea392022cae0450935",
                "status": "modified"
            }
        ],
        "message": "fix NPE in DefsTest and DatabaseDescriptorTest caused by not initialized (started) Gossiper",
        "parent": "https://github.com/apache/cassandra/commit/9dbb1b7757b1601e78254fde5a7142e93f46b620",
        "patched_files": [
            "DatabaseDescriptor.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "DatabaseDescriptorTest.java",
            "DefsTest.java"
        ]
    },
    "cassandra_46e5f23": {
        "bug_id": "cassandra_46e5f23",
        "commit": "https://github.com/apache/cassandra/commit/46e5f23e1bb6cf374d0d89ecff40c84a1824b998",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/46e5f23e1bb6cf374d0d89ecff40c84a1824b998/src/java/org/apache/cassandra/dht/BootStrapper.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/dht/BootStrapper.java?ref=46e5f23e1bb6cf374d0d89ecff40c84a1824b998",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/dht/BootStrapper.java",
                "patch": "@@ -110,7 +110,7 @@ public void run()\n         }).start();\n     }\n \n-    public static void guessTokenIfNotSpecified() throws IOException\n+    public static void guessTokenIfNotSpecified(TokenMetadata metadata) throws IOException\n     {\n         StorageService ss = StorageService.instance();\n         StorageLoadBalancer slb = StorageLoadBalancer.instance();\n@@ -122,8 +122,10 @@ public static void guessTokenIfNotSpecified() throws IOException\n         {\n             double maxLoad = 0;\n             InetAddress maxEndpoint = null;\n-            for (Map.Entry<InetAddress,Double> entry : slb.getLoadInfo().entrySet())\n+            for (Map.Entry<InetAddress, Double> entry : slb.getLoadInfo().entrySet())\n             {\n+                if (!metadata.isMember(entry.getKey()))\n+                    continue;\n                 if (maxEndpoint == null || entry.getValue() > maxLoad)\n                 {\n                     maxEndpoint = entry.getKey();",
                "raw_url": "https://github.com/apache/cassandra/raw/46e5f23e1bb6cf374d0d89ecff40c84a1824b998/src/java/org/apache/cassandra/dht/BootStrapper.java",
                "sha": "7f50e2ff952a2a1bfba09e882d4c89401dfe75fc",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/46e5f23e1bb6cf374d0d89ecff40c84a1824b998/src/java/org/apache/cassandra/locator/TokenMetadata.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/locator/TokenMetadata.java?ref=46e5f23e1bb6cf374d0d89ecff40c84a1824b998",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/locator/TokenMetadata.java",
                "patch": "@@ -114,7 +114,8 @@ public void update(Token token, InetAddress endpoint)\n     public Token getToken(InetAddress endpoint)\n     {\n         assert endpoint != null;\n-\n+        assert isMember(endpoint); // don't want to return nulls\n+        \n         lock.readLock().lock();\n         try\n         {\n@@ -126,7 +127,7 @@ public Token getToken(InetAddress endpoint)\n         }\n     }\n     \n-    public boolean isKnownEndPoint(InetAddress endpoint)\n+    public boolean isMember(InetAddress endpoint)\n     {\n         assert endpoint != null;\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/46e5f23e1bb6cf374d0d89ecff40c84a1824b998/src/java/org/apache/cassandra/locator/TokenMetadata.java",
                "sha": "837e1190ddad70b5922decd3ffbe10db85cd5351",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cassandra/blob/46e5f23e1bb6cf374d0d89ecff40c84a1824b998/src/java/org/apache/cassandra/service/StorageService.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=46e5f23e1bb6cf374d0d89ecff40c84a1824b998",
                "deletions": 8,
                "filename": "src/java/org/apache/cassandra/service/StorageService.java",
                "patch": "@@ -272,7 +272,7 @@ public void start() throws IOException\n         {\n             logger_.info(\"Starting in bootstrap mode (first, sleeping to get load information)\");\n             Gossiper.instance().addApplicationState(MODE, new ApplicationState(MODE_MOVING));\n-            BootStrapper.guessTokenIfNotSpecified();\n+            BootStrapper.guessTokenIfNotSpecified(tokenMetadata_);\n             new BootStrapper(replicationStrategy_, FBUtilities.getLocalAddress(), getLocalToken(), tokenMetadata_).startBootstrap(); // handles token update\n         }\n         else\n@@ -373,20 +373,21 @@ public void onChange(InetAddress endpoint, EndPointState epState)\n             Token newToken = getPartitioner().getTokenFactory().fromString(nodeIdState.getState());\n             if (logger_.isDebugEnabled())\n               logger_.debug(\"CHANGE IN STATE FOR \" + endpoint + \" - has token \" + nodeIdState.getState());\n-            Token oldToken = tokenMetadata_.getToken(endpoint);\n \n-            if ( oldToken != null )\n+            if (tokenMetadata_.isMember(endpoint))\n             {\n+                Token oldToken = tokenMetadata_.getToken(endpoint);\n+\n                 /*\n                  * If oldToken equals the newToken then the node had crashed\n                  * and is coming back up again. If oldToken is not equal to\n                  * the newToken this means that the node is being relocated\n                  * to another position in the ring.\n                 */\n-                if ( !oldToken.equals(newToken) )\n+                if (!oldToken.equals(newToken))\n                 {\n                     if (logger_.isDebugEnabled())\n-                      logger_.debug(\"Relocation for endpoint \" + endpoint);\n+                        logger_.debug(\"Relocation for endpoint \" + endpoint);\n                     updateForeignToken(newToken, endpoint);\n                 }\n                 else\n@@ -396,7 +397,7 @@ public void onChange(InetAddress endpoint, EndPointState epState)\n                      * Deliver the hints that we have for this endpoint.\n                     */\n                     if (logger_.isDebugEnabled())\n-                      logger_.debug(\"Sending hinted data to \" + endpoint);\n+                        logger_.debug(\"Sending hinted data to \" + endpoint);\n                     deliverHints(endpoint);\n                 }\n             }\n@@ -414,10 +415,10 @@ public void onChange(InetAddress endpoint, EndPointState epState)\n              * If we are here and if this node is UP and already has an entry\n              * in the token map. It means that the node was behind a network partition.\n             */\n-            if ( epState.isAlive() && tokenMetadata_.isKnownEndPoint(endpoint) )\n+            if (epState.isAlive() && tokenMetadata_.isMember(endpoint))\n             {\n                 if (logger_.isDebugEnabled())\n-                  logger_.debug(\"InetAddress \" + endpoint + \" just recovered from a partition. Sending hinted data.\");\n+                    logger_.debug(\"InetAddress \" + endpoint + \" just recovered from a partition. Sending hinted data.\");\n                 deliverHints(endpoint);\n             }\n         }",
                "raw_url": "https://github.com/apache/cassandra/raw/46e5f23e1bb6cf374d0d89ecff40c84a1824b998/src/java/org/apache/cassandra/service/StorageService.java",
                "sha": "d39f7c4647b84b07a48d5355bbfbdace18c31411",
                "status": "modified"
            }
        ],
        "message": "fix NPE caused by getToken on endpoint that isn't member of ring yet.  add assert to prevent in the future.\npatch by jbellis for CASSANDRA-522\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/cassandra/trunk@832268 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cassandra/commit/3678daa0be6e88821b3a61e20c78493d6f119449",
        "patched_files": [
            "BootStrapper.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "BootStrapperTest.java"
        ]
    },
    "cassandra_4ae229f": {
        "bug_id": "cassandra_4ae229f",
        "commit": "https://github.com/apache/cassandra/commit/4ae229f5cd270c2b43475b3f752a7b228de260ea",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/4ae229f5cd270c2b43475b3f752a7b228de260ea/doc/source/cql/ddl.rst",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/doc/source/cql/ddl.rst?ref=4ae229f5cd270c2b43475b3f752a7b228de260ea",
                "deletions": 2,
                "filename": "doc/source/cql/ddl.rst",
                "patch": "@@ -463,7 +463,7 @@ A table supports the following options:\n | ``speculative_retry``          | *simple* | 99PERCENTILE| :ref:`Speculative retry options                           |\n |                                |          |             | <speculative-retry-options>`.                             |\n +--------------------------------+----------+-------------+-----------------------------------------------------------+\n-| ``speculative_write_threshold``| *simple* | 99PERCENTILE| :ref:`Speculative retry options                           |\n+| ``additional_write_policy``    | *simple* | 99PERCENTILE| :ref:`Speculative retry options                           |\n |                                |          |             | <speculative-retry-options>`.                             |\n +--------------------------------+----------+-------------+-----------------------------------------------------------+\n | ``gc_grace_seconds``           | *simple* | 864000      | Time to wait before garbage collecting tombstones         |\n@@ -496,7 +496,7 @@ Speculative retry options\n By default, Cassandra read coordinators only query as many replicas as necessary to satisfy\n consistency levels: one for consistency level ``ONE``, a quorum for ``QUORUM``, and so on.\n ``speculative_retry`` determines when coordinators may query additional replicas, which is useful\n-when replicas are slow or unresponsive.  ``speculative_write_threshold`` specifies the threshold at which\n+when replicas are slow or unresponsive.  ``additional_write_policy`` specifies the threshold at which\n a cheap quorum write will be upgraded to include transient replicas.  The following are legal values (case-insensitive):\n \n ============================ ======================== =============================================================================",
                "raw_url": "https://github.com/apache/cassandra/raw/4ae229f5cd270c2b43475b3f752a7b228de260ea/doc/source/cql/ddl.rst",
                "sha": "945e30118b260639b1ac93eb31005e0983f776ea",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/4ae229f5cd270c2b43475b3f752a7b228de260ea/pylib/cqlshlib/cql3handling.py",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/pylib/cqlshlib/cql3handling.py?ref=4ae229f5cd270c2b43475b3f752a7b228de260ea",
                "deletions": 1,
                "filename": "pylib/cqlshlib/cql3handling.py",
                "patch": "@@ -49,7 +49,7 @@ class Cql3ParsingRuleSet(CqlParsingRuleSet):\n         ('max_index_interval', None),\n         ('default_time_to_live', None),\n         ('speculative_retry', None),\n-        ('speculative_write_threshold', None),\n+        ('additional_write_policy', None),\n         ('memtable_flush_period_in_ms', None),\n         ('cdc', None),\n         ('read_repair', None),",
                "raw_url": "https://github.com/apache/cassandra/raw/4ae229f5cd270c2b43475b3f752a7b228de260ea/pylib/cqlshlib/cql3handling.py",
                "sha": "1d1797847b92d0ac9db0ff9dcf35f486cc9b3a21",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/4ae229f5cd270c2b43475b3f752a7b228de260ea/pylib/cqlshlib/test/test_cqlsh_completion.py",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/pylib/cqlshlib/test/test_cqlsh_completion.py?ref=4ae229f5cd270c2b43475b3f752a7b228de260ea",
                "deletions": 3,
                "filename": "pylib/cqlshlib/test/test_cqlsh_completion.py",
                "patch": "@@ -594,7 +594,7 @@ def create_columnfamily_table_template(self, name):\n                                      'memtable_flush_period_in_ms',\n                                      'CLUSTERING',\n                                      'COMPACT', 'caching', 'comment',\n-                                     'min_index_interval', 'speculative_retry', 'speculative_write_threshold', 'cdc'])\n+                                     'min_index_interval', 'speculative_retry', 'additional_write_policy', 'cdc'])\n         self.trycompletions(prefix + ' new_table (col_a int PRIMARY KEY) WITH ',\n                             choices=['bloom_filter_fp_chance', 'compaction',\n                                      'compression',\n@@ -603,7 +603,7 @@ def create_columnfamily_table_template(self, name):\n                                      'memtable_flush_period_in_ms',\n                                      'CLUSTERING',\n                                      'COMPACT', 'caching', 'comment',\n-                                     'min_index_interval', 'speculative_retry', 'speculative_write_threshold', 'cdc'])\n+                                     'min_index_interval', 'speculative_retry', 'additional_write_policy', 'cdc'])\n         self.trycompletions(prefix + ' new_table (col_a int PRIMARY KEY) WITH bloom_filter_fp_chance ',\n                             immediate='= ')\n         self.trycompletions(prefix + ' new_table (col_a int PRIMARY KEY) WITH bloom_filter_fp_chance = ',\n@@ -650,7 +650,7 @@ def create_columnfamily_table_template(self, name):\n                                      'memtable_flush_period_in_ms',\n                                      'CLUSTERING',\n                                      'COMPACT', 'caching', 'comment',\n-                                     'min_index_interval', 'speculative_retry', 'speculative_write_threshold', 'cdc'])\n+                                     'min_index_interval', 'speculative_retry', 'additional_write_policy', 'cdc'])\n         self.trycompletions(prefix + \" new_table (col_a int PRIMARY KEY) WITH compaction = \"\n                             + \"{'class': 'DateTieredCompactionStrategy', '\",\n                             choices=['base_time_seconds', 'max_sstable_age_days',",
                "raw_url": "https://github.com/apache/cassandra/raw/4ae229f5cd270c2b43475b3f752a7b228de260ea/pylib/cqlshlib/test/test_cqlsh_completion.py",
                "sha": "db18e3f1c8f38ca1597f3c45a45f8877e6c41de0",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/4ae229f5cd270c2b43475b3f752a7b228de260ea/pylib/cqlshlib/test/test_cqlsh_output.py",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/pylib/cqlshlib/test/test_cqlsh_output.py?ref=4ae229f5cd270c2b43475b3f752a7b228de260ea",
                "deletions": 1,
                "filename": "pylib/cqlshlib/test/test_cqlsh_output.py",
                "patch": "@@ -623,7 +623,7 @@ def test_describe_columnfamily_output(self):\n                 AND memtable_flush_period_in_ms = 0\n                 AND min_index_interval = 128\n                 AND speculative_retry = '99PERCENTILE'\n-                AND speculative_write_threshold = '99PERCENTILE';\n+                AND additional_write_policy = '99PERCENTILE';\n \n         \"\"\" % quote_name(get_keyspace()))\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/4ae229f5cd270c2b43475b3f752a7b228de260ea/pylib/cqlshlib/test/test_cqlsh_output.py",
                "sha": "fb9fcd61457a9d3201cc7e00fe113042306492c4",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/4ae229f5cd270c2b43475b3f752a7b228de260ea/src/java/org/apache/cassandra/cql3/statements/schema/TableAttributes.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/statements/schema/TableAttributes.java?ref=4ae229f5cd270c2b43475b3f752a7b228de260ea",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/cql3/statements/schema/TableAttributes.java",
                "patch": "@@ -128,8 +128,8 @@ private TableParams build(TableParams.Builder builder)\n         if (hasOption(Option.SPECULATIVE_RETRY))\n             builder.speculativeRetry(SpeculativeRetryPolicy.fromString(getString(Option.SPECULATIVE_RETRY)));\n \n-        if (hasOption(Option.SPECULATIVE_WRITE_THRESHOLD))\n-            builder.speculativeWriteThreshold(SpeculativeRetryPolicy.fromString(getString(Option.SPECULATIVE_WRITE_THRESHOLD)));\n+        if (hasOption(Option.ADDITIONAL_WRITE_POLICY))\n+            builder.additionalWritePolicy(SpeculativeRetryPolicy.fromString(getString(Option.ADDITIONAL_WRITE_POLICY)));\n \n         if (hasOption(Option.CRC_CHECK_CHANCE))\n             builder.crcCheckChance(getDouble(Option.CRC_CHECK_CHANCE));",
                "raw_url": "https://github.com/apache/cassandra/raw/4ae229f5cd270c2b43475b3f752a7b228de260ea/src/java/org/apache/cassandra/cql3/statements/schema/TableAttributes.java",
                "sha": "126e6d7857b12166da4b89871bc2424b1cb922ff",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/4ae229f5cd270c2b43475b3f752a7b228de260ea/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamilyStore.java?ref=4ae229f5cd270c2b43475b3f752a7b228de260ea",
                "deletions": 3,
                "filename": "src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "patch": "@@ -204,7 +204,7 @@\n \n     public final TableMetrics metric;\n     public volatile long sampleReadLatencyNanos;\n-    public volatile long transientWriteLatencyNanos;\n+    public volatile long additionalWriteLatencyNanos;\n \n     private final CassandraTableWriteHandler writeHandler;\n     private final CassandraStreamManager streamManager;\n@@ -384,7 +384,7 @@ public ColumnFamilyStore(Keyspace keyspace,\n         metric = new TableMetrics(this);\n         fileIndexGenerator.set(generation);\n         sampleReadLatencyNanos = TimeUnit.MILLISECONDS.toNanos(DatabaseDescriptor.getReadRpcTimeout() / 2);\n-        transientWriteLatencyNanos = TimeUnit.MILLISECONDS.toNanos(DatabaseDescriptor.getWriteRpcTimeout() / 2);\n+        additionalWriteLatencyNanos = TimeUnit.MILLISECONDS.toNanos(DatabaseDescriptor.getWriteRpcTimeout() / 2);\n \n         logger.info(\"Initializing {}.{}\", keyspace.getName(), name);\n \n@@ -455,7 +455,7 @@ public void updateSpeculationThreshold()\n         try\n         {\n             sampleReadLatencyNanos = metadata().params.speculativeRetry.calculateThreshold(metric.coordinatorReadLatency.getSnapshot(), sampleReadLatencyNanos);\n-            transientWriteLatencyNanos = metadata().params.speculativeWriteThreshold.calculateThreshold(metric.coordinatorWriteLatency.getSnapshot(), transientWriteLatencyNanos);\n+            additionalWriteLatencyNanos = metadata().params.additionalWritePolicy.calculateThreshold(metric.coordinatorWriteLatency.getSnapshot(), additionalWriteLatencyNanos);\n         }\n         catch (Throwable e)\n         {",
                "raw_url": "https://github.com/apache/cassandra/raw/4ae229f5cd270c2b43475b3f752a7b228de260ea/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "sha": "877a3c52ebe6e8f800884ed4325644ec37d89442",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/4ae229f5cd270c2b43475b3f752a7b228de260ea/src/java/org/apache/cassandra/db/TableCQLHelper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/TableCQLHelper.java?ref=4ae229f5cd270c2b43475b3f752a7b228de260ea",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/TableCQLHelper.java",
                "patch": "@@ -310,7 +310,7 @@ private static String toCQL(TableParams tableParams)\n         builder.append(\"\\n\\tAND max_index_interval = \").append(tableParams.maxIndexInterval);\n         builder.append(\"\\n\\tAND memtable_flush_period_in_ms = \").append(tableParams.memtableFlushPeriodInMs);\n         builder.append(\"\\n\\tAND speculative_retry = '\").append(tableParams.speculativeRetry).append(\"'\");\n-        builder.append(\"\\n\\tAND speculative_write_threshold = '\").append(tableParams.speculativeWriteThreshold).append(\"'\");\n+        builder.append(\"\\n\\tAND additional_write_policy = '\").append(tableParams.additionalWritePolicy).append(\"'\");\n         builder.append(\"\\n\\tAND comment = \").append(singleQuote(tableParams.comment));\n         builder.append(\"\\n\\tAND caching = \").append(toCQL(tableParams.caching.asMap()));\n         builder.append(\"\\n\\tAND compaction = \").append(toCQL(tableParams.compaction.asMap()));",
                "raw_url": "https://github.com/apache/cassandra/raw/4ae229f5cd270c2b43475b3f752a7b228de260ea/src/java/org/apache/cassandra/db/TableCQLHelper.java",
                "sha": "21ae56033d1da09f5b6df2b76f7e0d1710a86bb8",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/4ae229f5cd270c2b43475b3f752a7b228de260ea/src/java/org/apache/cassandra/metrics/KeyspaceMetrics.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/metrics/KeyspaceMetrics.java?ref=4ae229f5cd270c2b43475b3f752a7b228de260ea",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/metrics/KeyspaceMetrics.java",
                "patch": "@@ -104,7 +104,7 @@\n     /** Needed to speculate, but didn't have enough replicas **/\n     public final Counter speculativeInsufficientReplicas;\n     /** Needed to write to a transient replica to satisfy quorum **/\n-    public final Counter speculativeWrites;\n+    public final Counter additionalWrites;\n     /** Number of started repairs as coordinator on this keyspace */\n     public final Counter repairsStarted;\n     /** Number of completed repairs as coordinator on this keyspace */\n@@ -292,7 +292,7 @@ public Long getValue(TableMetrics metric)\n         speculativeRetries = createKeyspaceCounter(\"SpeculativeRetries\", metric -> metric.speculativeRetries.getCount());\n         speculativeFailedRetries = createKeyspaceCounter(\"SpeculativeFailedRetries\", metric -> metric.speculativeFailedRetries.getCount());\n         speculativeInsufficientReplicas = createKeyspaceCounter(\"SpeculativeInsufficientReplicas\", metric -> metric.speculativeInsufficientReplicas.getCount());\n-        speculativeWrites = createKeyspaceCounter(\"SpeculativeWrites\", metric -> metric.speculativeWrites.getCount());\n+        additionalWrites = createKeyspaceCounter(\"AdditionalWrites\", metric -> metric.additionalWrites.getCount());\n         repairsStarted = createKeyspaceCounter(\"RepairJobsStarted\", metric -> metric.repairsStarted.getCount());\n         repairsCompleted = createKeyspaceCounter(\"RepairJobsCompleted\", metric -> metric.repairsCompleted.getCount());\n         repairTime = Metrics.timer(factory.createMetricName(\"RepairTime\"));",
                "raw_url": "https://github.com/apache/cassandra/raw/4ae229f5cd270c2b43475b3f752a7b228de260ea/src/java/org/apache/cassandra/metrics/KeyspaceMetrics.java",
                "sha": "ef3338ec98c3ce924661b7d8374727d07c5bd80c",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/4ae229f5cd270c2b43475b3f752a7b228de260ea/src/java/org/apache/cassandra/metrics/TableMetrics.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/metrics/TableMetrics.java?ref=4ae229f5cd270c2b43475b3f752a7b228de260ea",
                "deletions": 4,
                "filename": "src/java/org/apache/cassandra/metrics/TableMetrics.java",
                "patch": "@@ -214,8 +214,8 @@\n     public final Counter speculativeInsufficientReplicas;\n     public final Gauge<Long> speculativeSampleLatencyNanos;\n \n-    public final Counter speculativeWrites;\n-    public final Gauge<Long> speculativeWriteLatencyNanos;\n+    public final Counter additionalWrites;\n+    public final Gauge<Long> additionalWriteLatencyNanos;\n \n     /**\n      * Metrics for inconsistencies detected between repaired data sets across replicas. These\n@@ -843,8 +843,8 @@ public Long getValue()\n         speculativeInsufficientReplicas = createTableCounter(\"SpeculativeInsufficientReplicas\");\n         speculativeSampleLatencyNanos = createTableGauge(\"SpeculativeSampleLatencyNanos\", () -> cfs.sampleReadLatencyNanos);\n \n-        speculativeWrites = createTableCounter(\"SpeculativeWrites\");\n-        speculativeWriteLatencyNanos = createTableGauge(\"SpeculativeWriteLatencyNanos\", () -> cfs.transientWriteLatencyNanos);\n+        additionalWrites = createTableCounter(\"AdditionalWrites\");\n+        additionalWriteLatencyNanos = createTableGauge(\"AdditionalWriteLatencyNanos\", () -> cfs.additionalWriteLatencyNanos);\n \n         keyCacheHitRate = Metrics.register(factory.createMetricName(\"KeyCacheHitRate\"),\n                                            aliasFactory.createMetricName(\"KeyCacheHitRate\"),",
                "raw_url": "https://github.com/apache/cassandra/raw/4ae229f5cd270c2b43475b3f752a7b228de260ea/src/java/org/apache/cassandra/metrics/TableMetrics.java",
                "sha": "41771d116def6289731106631fed52f0531941fd",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cassandra/blob/4ae229f5cd270c2b43475b3f752a7b228de260ea/src/java/org/apache/cassandra/schema/SchemaKeyspace.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/schema/SchemaKeyspace.java?ref=4ae229f5cd270c2b43475b3f752a7b228de260ea",
                "deletions": 4,
                "filename": "src/java/org/apache/cassandra/schema/SchemaKeyspace.java",
                "patch": "@@ -137,7 +137,7 @@ private SchemaKeyspace()\n               + \"min_index_interval int,\"\n               + \"read_repair_chance double,\" // no longer used, left for drivers' sake\n               + \"speculative_retry text,\"\n-              + \"speculative_write_threshold text,\"\n+              + \"additional_write_policy text,\"\n               + \"cdc boolean,\"\n               + \"read_repair text,\"\n               + \"PRIMARY KEY ((keyspace_name), table_name))\");\n@@ -204,7 +204,7 @@ private SchemaKeyspace()\n               + \"min_index_interval int,\"\n               + \"read_repair_chance double,\" // no longer used, left for drivers' sake\n               + \"speculative_retry text,\"\n-              + \"speculative_write_threshold text,\"\n+              + \"additional_write_policy text,\"\n               + \"cdc boolean,\"\n               + \"read_repair text,\"\n               + \"PRIMARY KEY ((keyspace_name), view_name))\");\n@@ -565,7 +565,7 @@ private static void addTableParamsToRowBuilder(TableParams params, Row.SimpleBui\n                .add(\"min_index_interval\", params.minIndexInterval)\n                .add(\"read_repair_chance\", 0.0) // no longer used, left for drivers' sake\n                .add(\"speculative_retry\", params.speculativeRetry.toString())\n-               .add(\"speculative_write_threshold\", params.speculativeWriteThreshold.toString())\n+               .add(\"additional_write_policy\", params.additionalWritePolicy.toString())\n                .add(\"crc_check_chance\", params.crcCheckChance)\n                .add(\"caching\", params.caching.asMap())\n                .add(\"compaction\", params.compaction.asMap())\n@@ -994,7 +994,9 @@ static TableParams createTableParamsFromRow(UntypedResultSet.Row row)\n                           .minIndexInterval(row.getInt(\"min_index_interval\"))\n                           .crcCheckChance(row.getDouble(\"crc_check_chance\"))\n                           .speculativeRetry(SpeculativeRetryPolicy.fromString(row.getString(\"speculative_retry\")))\n-                          .speculativeWriteThreshold(SpeculativeRetryPolicy.fromString(row.getString(\"speculative_write_threshold\")))\n+                          .additionalWritePolicy(row.has(\"additional_write_policy\") ?\n+                                                     SpeculativeRetryPolicy.fromString(row.getString(\"additional_write_policy\")) :\n+                                                     SpeculativeRetryPolicy.fromString(\"99PERCENTILE\"))\n                           .cdc(row.has(\"cdc\") && row.getBoolean(\"cdc\"))\n                           .readRepair(getReadRepairStrategy(row))\n                           .build();",
                "raw_url": "https://github.com/apache/cassandra/raw/4ae229f5cd270c2b43475b3f752a7b228de260ea/src/java/org/apache/cassandra/schema/SchemaKeyspace.java",
                "sha": "d2abc03ce3665e3d9edae2f6c5470416d49b2d5f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/4ae229f5cd270c2b43475b3f752a7b228de260ea/src/java/org/apache/cassandra/schema/TableMetadata.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/schema/TableMetadata.java?ref=4ae229f5cd270c2b43475b3f752a7b228de260ea",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/schema/TableMetadata.java",
                "patch": "@@ -834,9 +834,9 @@ public Builder speculativeRetry(SpeculativeRetryPolicy val)\n             return this;\n         }\n \n-        public Builder speculativeWriteThreshold(SpeculativeRetryPolicy val)\n+        public Builder additionalWritePolicy(SpeculativeRetryPolicy val)\n         {\n-            params.speculativeWriteThreshold(val);\n+            params.additionalWritePolicy(val);\n             return this;\n         }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/4ae229f5cd270c2b43475b3f752a7b228de260ea/src/java/org/apache/cassandra/schema/TableMetadata.java",
                "sha": "02b851b071afb18ef9f05eb9bf558a27d07e266a",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cassandra/blob/4ae229f5cd270c2b43475b3f752a7b228de260ea/src/java/org/apache/cassandra/schema/TableParams.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/schema/TableParams.java?ref=4ae229f5cd270c2b43475b3f752a7b228de260ea",
                "deletions": 7,
                "filename": "src/java/org/apache/cassandra/schema/TableParams.java",
                "patch": "@@ -51,7 +51,7 @@\n         MEMTABLE_FLUSH_PERIOD_IN_MS,\n         MIN_INDEX_INTERVAL,\n         SPECULATIVE_RETRY,\n-        SPECULATIVE_WRITE_THRESHOLD,\n+        ADDITIONAL_WRITE_POLICY,\n         CRC_CHECK_CHANCE,\n         CDC,\n         READ_REPAIR;\n@@ -72,7 +72,7 @@ public String toString()\n     public final int minIndexInterval;\n     public final int maxIndexInterval;\n     public final SpeculativeRetryPolicy speculativeRetry;\n-    public final SpeculativeRetryPolicy speculativeWriteThreshold;\n+    public final SpeculativeRetryPolicy additionalWritePolicy;\n     public final CachingParams caching;\n     public final CompactionParams compaction;\n     public final CompressionParams compression;\n@@ -93,7 +93,7 @@ private TableParams(Builder builder)\n         minIndexInterval = builder.minIndexInterval;\n         maxIndexInterval = builder.maxIndexInterval;\n         speculativeRetry = builder.speculativeRetry;\n-        speculativeWriteThreshold = builder.speculativeWriteThreshold;\n+        additionalWritePolicy = builder.additionalWritePolicy;\n         caching = builder.caching;\n         compaction = builder.compaction;\n         compression = builder.compression;\n@@ -121,7 +121,7 @@ public static Builder builder(TableParams params)\n                             .memtableFlushPeriodInMs(params.memtableFlushPeriodInMs)\n                             .minIndexInterval(params.minIndexInterval)\n                             .speculativeRetry(params.speculativeRetry)\n-                            .speculativeWriteThreshold(params.speculativeWriteThreshold)\n+                            .additionalWritePolicy(params.additionalWritePolicy)\n                             .extensions(params.extensions)\n                             .cdc(params.cdc)\n                             .readRepair(params.readRepair);\n@@ -264,7 +264,7 @@ public String toString()\n         private int minIndexInterval = 128;\n         private int maxIndexInterval = 2048;\n         private SpeculativeRetryPolicy speculativeRetry = PercentileSpeculativeRetryPolicy.NINETY_NINE_P;\n-        private SpeculativeRetryPolicy speculativeWriteThreshold = PercentileSpeculativeRetryPolicy.NINETY_NINE_P;\n+        private SpeculativeRetryPolicy additionalWritePolicy = PercentileSpeculativeRetryPolicy.NINETY_NINE_P;\n         private CachingParams caching = CachingParams.DEFAULT;\n         private CompactionParams compaction = CompactionParams.DEFAULT;\n         private CompressionParams compression = CompressionParams.DEFAULT;\n@@ -335,9 +335,9 @@ public Builder speculativeRetry(SpeculativeRetryPolicy val)\n             return this;\n         }\n \n-        public Builder speculativeWriteThreshold(SpeculativeRetryPolicy val)\n+        public Builder additionalWritePolicy(SpeculativeRetryPolicy val)\n         {\n-            speculativeWriteThreshold = val;\n+            additionalWritePolicy = val;\n             return this;\n         }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/4ae229f5cd270c2b43475b3f752a7b228de260ea/src/java/org/apache/cassandra/schema/TableParams.java",
                "sha": "7c3eaa23be6bc1f4e19818f29db440a200dda86a",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/4ae229f5cd270c2b43475b3f752a7b228de260ea/src/java/org/apache/cassandra/service/AbstractWriteResponseHandler.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/AbstractWriteResponseHandler.java?ref=4ae229f5cd270c2b43475b3f752a7b228de260ea",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/service/AbstractWriteResponseHandler.java",
                "patch": "@@ -298,7 +298,7 @@ public void maybeTryAdditionalReplicas(IMutation mutation, StorageProxy.WritePer\n                                               .map(Schema.instance::getColumnFamilyStoreInstance)\n                                               .collect(Collectors.toList());\n         for (ColumnFamilyStore cf : cfs)\n-            timeout = Math.min(timeout, cf.transientWriteLatencyNanos);\n+            timeout = Math.min(timeout, cf.additionalWriteLatencyNanos);\n \n         // no latency information, or we're overloaded\n         if (timeout > TimeUnit.MILLISECONDS.toNanos(mutation.getTimeout()))\n@@ -309,7 +309,7 @@ public void maybeTryAdditionalReplicas(IMutation mutation, StorageProxy.WritePer\n             if (!condition.await(timeout, TimeUnit.NANOSECONDS))\n             {\n                 for (ColumnFamilyStore cf : cfs)\n-                    cf.metric.speculativeWrites.inc();\n+                    cf.metric.additionalWrites.inc();\n \n                 writePerformer.apply(mutation, replicaPlan.withContact(uncontacted),\n                                      (AbstractWriteResponseHandler<IMutation>) this,",
                "raw_url": "https://github.com/apache/cassandra/raw/4ae229f5cd270c2b43475b3f752a7b228de260ea/src/java/org/apache/cassandra/service/AbstractWriteResponseHandler.java",
                "sha": "1470cadc84bffa9290ba13f79b88e1ec0becaa87",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/4ae229f5cd270c2b43475b3f752a7b228de260ea/src/java/org/apache/cassandra/service/reads/repair/BlockingReadRepair.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/reads/repair/BlockingReadRepair.java?ref=4ae229f5cd270c2b43475b3f752a7b228de260ea",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/service/reads/repair/BlockingReadRepair.java",
                "patch": "@@ -74,7 +74,7 @@ public void maybeSendAdditionalWrites()\n     {\n         for (BlockingPartitionRepair repair: repairs)\n         {\n-            repair.maybeSendAdditionalWrites(cfs.transientWriteLatencyNanos, TimeUnit.NANOSECONDS);\n+            repair.maybeSendAdditionalWrites(cfs.additionalWriteLatencyNanos, TimeUnit.NANOSECONDS);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/4ae229f5cd270c2b43475b3f752a7b228de260ea/src/java/org/apache/cassandra/service/reads/repair/BlockingReadRepair.java",
                "sha": "8016b8944a41a72bd8cdb4e4c1aefe9c899fd1fd",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/4ae229f5cd270c2b43475b3f752a7b228de260ea/test/unit/org/apache/cassandra/db/TableCQLHelperTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/db/TableCQLHelperTest.java?ref=4ae229f5cd270c2b43475b3f752a7b228de260ea",
                "deletions": 2,
                "filename": "test/unit/org/apache/cassandra/db/TableCQLHelperTest.java",
                "patch": "@@ -256,7 +256,7 @@ public void testCfmOptionsCQL()\n                .maxIndexInterval(7)\n                .memtableFlushPeriod(8)\n                .speculativeRetry(AlwaysSpeculativeRetryPolicy.INSTANCE)\n-               .speculativeWriteThreshold(NeverSpeculativeRetryPolicy.INSTANCE)\n+               .additionalWritePolicy(NeverSpeculativeRetryPolicy.INSTANCE)\n                .extensions(ImmutableMap.of(\"ext1\", ByteBuffer.wrap(\"val1\".getBytes())))\n                .recordColumnDrop(ColumnMetadata.regularColumn(keyspace, table, \"reg1\", AsciiType.instance),\n                                  FBUtilities.timestampMicros());\n@@ -274,7 +274,7 @@ public void testCfmOptionsCQL()\n         \"\\tAND max_index_interval = 7\\n\" +\n         \"\\tAND memtable_flush_period_in_ms = 8\\n\" +\n         \"\\tAND speculative_retry = 'ALWAYS'\\n\" +\n-        \"\\tAND speculative_write_threshold = 'NEVER'\\n\" +\n+        \"\\tAND additional_write_policy = 'NEVER'\\n\" +\n         \"\\tAND comment = 'comment'\\n\" +\n         \"\\tAND caching = { 'keys': 'ALL', 'rows_per_partition': 'NONE' }\\n\" +\n         \"\\tAND compaction = { 'max_threshold': '32', 'min_threshold': '4', 'sstable_size_in_mb': '1', 'class': 'org.apache.cassandra.db.compaction.LeveledCompactionStrategy' }\\n\" +",
                "raw_url": "https://github.com/apache/cassandra/raw/4ae229f5cd270c2b43475b3f752a7b228de260ea/test/unit/org/apache/cassandra/db/TableCQLHelperTest.java",
                "sha": "a1cae54bcbc91eb875743a121bf28f9e599d718d",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/4ae229f5cd270c2b43475b3f752a7b228de260ea/test/unit/org/apache/cassandra/service/reads/repair/AbstractReadRepairTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/service/reads/repair/AbstractReadRepairTest.java?ref=4ae229f5cd270c2b43475b3f752a7b228de260ea",
                "deletions": 2,
                "filename": "test/unit/org/apache/cassandra/service/reads/repair/AbstractReadRepairTest.java",
                "patch": "@@ -205,7 +205,7 @@ static void configureClass(ReadRepairStrategy repairStrategy) throws Throwable\n         cfs = ks.getColumnFamilyStore(\"tbl\");\n \n         cfs.sampleReadLatencyNanos = 0;\n-        cfs.transientWriteLatencyNanos = 0;\n+        cfs.additionalWriteLatencyNanos = 0;\n \n         target1 = InetAddressAndPort.getByName(\"127.0.0.255\");\n         target2 = InetAddressAndPort.getByName(\"127.0.0.254\");\n@@ -243,7 +243,7 @@ public void setUp()\n         assert configured : \"configureClass must be called in a @BeforeClass method\";\n \n         cfs.sampleReadLatencyNanos = 0;\n-        cfs.transientWriteLatencyNanos = 0;\n+        cfs.additionalWriteLatencyNanos = 0;\n     }\n \n     static ReplicaPlan.ForRangeRead replicaPlan(ConsistencyLevel consistencyLevel, EndpointsForRange replicas)",
                "raw_url": "https://github.com/apache/cassandra/raw/4ae229f5cd270c2b43475b3f752a7b228de260ea/test/unit/org/apache/cassandra/service/reads/repair/AbstractReadRepairTest.java",
                "sha": "68afedcf76965cfa3c02360b2bbe621548355e9f",
                "status": "modified"
            }
        ],
        "message": "Upgrade to 4.0 fails with NullPointerException\n\nPatch by Ariel Weisberg; Reviewed by Dinesh Joshi for CASSANDRA-14820",
        "parent": "https://github.com/apache/cassandra/commit/12a585c9197002c0d7f7084f90cd54fe53c05949",
        "patched_files": [
            "ColumnFamilyStore.java",
            "KeyspaceMetrics.java",
            "TableCQLHelper.java",
            "TableAttributes.java",
            "ddl.java",
            "AbstractWriteResponseHandler.java",
            "TableMetadata.java",
            "BlockingReadRepair.java",
            "AbstractReadRepair.java",
            "TableMetrics.java",
            "SchemaKeyspace.java",
            "cql3handling.java",
            "TableParams.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "BlockingReadRepairTest.java",
            "ColumnFamilyStoreTest.java",
            "TableCQLHelperTest.java",
            "AbstractReadRepairTest.java",
            "TableMetricsTest.java",
            "SchemaKeyspaceTest.java",
            "test_cqlsh_completion.java",
            "test_cqlsh_output.java"
        ]
    },
    "cassandra_4e96cc9": {
        "bug_id": "cassandra_4e96cc9",
        "commit": "https://github.com/apache/cassandra/commit/4e96cc9d41bccc9781cbe3008db6e72c91c7d5f1",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/4e96cc9d41bccc9781cbe3008db6e72c91c7d5f1/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=4e96cc9d41bccc9781cbe3008db6e72c91c7d5f1",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -23,6 +23,7 @@\n  * remove no-op HHOM.renameHints (CASSANDRA-2693)\n  * clone super columns to avoid modifying them during flush (CASSANDRA-2675)\n  * allow writes to bypass the commitlog for certain keyspaces (CASSANDRA-2683)\n+ * avoid NPE when bypassing commitlog during memtable flush (CASSANDRA-2781)\n \n \n 0.8.0-final",
                "raw_url": "https://github.com/apache/cassandra/raw/4e96cc9d41bccc9781cbe3008db6e72c91c7d5f1/CHANGES.txt",
                "sha": "53cb3f63a6804e46ff3febc88e3d6d1da3f4d858",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/4e96cc9d41bccc9781cbe3008db6e72c91c7d5f1/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamilyStore.java?ref=4e96cc9d41bccc9781cbe3008db6e72c91c7d5f1",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "patch": "@@ -646,7 +646,7 @@ public String getTempSSTablePath(String directory)\n \n             assert getMemtableThreadSafe() == oldMemtable;\n             oldMemtable.freeze();\n-            final ReplayPosition ctx = writeCommitLog ? CommitLog.instance.getContext() : null;\n+            final ReplayPosition ctx = writeCommitLog ? CommitLog.instance.getContext() : ReplayPosition.NONE;\n \n             // submit the memtable for any indexed sub-cfses, and our own.\n             List<ColumnFamilyStore> icc = new ArrayList<ColumnFamilyStore>(indexedColumns.size());",
                "raw_url": "https://github.com/apache/cassandra/raw/4e96cc9d41bccc9781cbe3008db6e72c91c7d5f1/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "sha": "e1759951a9bf30cfff58705fedb530549b1d4492",
                "status": "modified"
            }
        ],
        "message": "fix NPE\twhen bypassing commitlog during\tmemtable flush\n\nPatch by tjake;\t reviewed by Sylvain Lebresne for CASSANDRA-2718\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-0.8@1128306 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cassandra/commit/1dd1df7c912892fe67f37a6fe7437bd3e56259b0",
        "patched_files": [
            "ColumnFamilyStore.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "ColumnFamilyStoreTest.java"
        ]
    },
    "cassandra_5009594": {
        "bug_id": "cassandra_5009594",
        "commit": "https://github.com/apache/cassandra/commit/50095947e25f630ce48ee24d10ff3e1f3fd91183",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/50095947e25f630ce48ee24d10ff3e1f3fd91183/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=50095947e25f630ce48ee24d10ff3e1f3fd91183",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 2.2.6\n+ * Avoid NPE when serializing ErrorMessage with null message (CASSANDRA-11167)\n  * Replacing an aggregate with a new version doesn't reset INITCOND (CASSANDRA-10840)\n  * (cqlsh) cqlsh cannot be called through symlink (CASSANDRA-11037)\n  * fix ohc and java-driver pom dependencies in build.xml (CASSANDRA-10793)",
                "raw_url": "https://github.com/apache/cassandra/raw/50095947e25f630ce48ee24d10ff3e1f3fd91183/CHANGES.txt",
                "sha": "01e7b3d7f12025cc71bb992730926e52c070dc91",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/50095947e25f630ce48ee24d10ff3e1f3fd91183/src/java/org/apache/cassandra/transport/messages/ErrorMessage.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/transport/messages/ErrorMessage.java?ref=50095947e25f630ce48ee24d10ff3e1f3fd91183",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/transport/messages/ErrorMessage.java",
                "patch": "@@ -151,7 +151,8 @@ public void encode(ErrorMessage msg, ByteBuf dest, int version)\n         {\n             final TransportException err = getBackwardsCompatibleException(msg, version);\n             dest.writeInt(err.code().value);\n-            CBUtil.writeString(err.getMessage(), dest);\n+            String errorString = err.getMessage() == null ? \"\" : err.getMessage();\n+            CBUtil.writeString(errorString, dest);\n \n             switch (err.code())\n             {\n@@ -212,7 +213,8 @@ public void encode(ErrorMessage msg, ByteBuf dest, int version)\n         public int encodedSize(ErrorMessage msg, int version)\n         {\n             final TransportException err = getBackwardsCompatibleException(msg, version);\n-            int size = 4 + CBUtil.sizeOfString(err.getMessage());\n+            String errorString = err.getMessage() == null ? \"\" : err.getMessage();\n+            int size = 4 + CBUtil.sizeOfString(errorString);\n             switch (err.code())\n             {\n                 case UNAVAILABLE:",
                "raw_url": "https://github.com/apache/cassandra/raw/50095947e25f630ce48ee24d10ff3e1f3fd91183/src/java/org/apache/cassandra/transport/messages/ErrorMessage.java",
                "sha": "021db5ae749d3cdd2cec6457be6346e7b1f12010",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/cassandra/blob/50095947e25f630ce48ee24d10ff3e1f3fd91183/test/unit/org/apache/cassandra/transport/ProtocolErrorTest.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/transport/ProtocolErrorTest.java?ref=50095947e25f630ce48ee24d10ff3e1f3fd91183",
                "deletions": 0,
                "filename": "test/unit/org/apache/cassandra/transport/ProtocolErrorTest.java",
                "patch": "@@ -113,4 +113,22 @@ public void testBodyLengthOverLimit() throws Exception\n             Assert.assertTrue(e.getMessage().contains(\"Request is too big\"));\n         }\n     }\n+\n+    @Test\n+    public void testErrorMessageWithNullString() throws Exception\n+    {\n+        // test for CASSANDRA-11167\n+        ErrorMessage msg = ErrorMessage.fromException(new ServerError((String) null));\n+        assert msg.toString().endsWith(\"null\") : msg.toString();\n+        int size = ErrorMessage.codec.encodedSize(msg, Server.CURRENT_VERSION);\n+        ByteBuf buf = Unpooled.buffer(size);\n+        ErrorMessage.codec.encode(msg, buf, Server.CURRENT_VERSION);\n+\n+        ByteBuf expected = Unpooled.wrappedBuffer(new byte[]{\n+                0x00, 0x00, 0x00, 0x00,  // int error code\n+                0x00, 0x00               // short message length\n+        });\n+\n+        Assert.assertEquals(expected, buf);\n+    }\n }",
                "raw_url": "https://github.com/apache/cassandra/raw/50095947e25f630ce48ee24d10ff3e1f3fd91183/test/unit/org/apache/cassandra/transport/ProtocolErrorTest.java",
                "sha": "fc8c41cc4bebc84d25625822870de1895d8635e7",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE when serializing ErrorMessage with null msg\n\nPatch by Tyler Hobbs; reviewed by Carl Yeksigian for CASSANDRA-11167",
        "parent": "https://github.com/apache/cassandra/commit/c8c8cf679c0e597dd741d0780a1c2ac5e0113251",
        "patched_files": [
            "ErrorMessage.java",
            "CHANGES.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "ProtocolErrorTest.java"
        ]
    },
    "cassandra_511d163": {
        "bug_id": "cassandra_511d163",
        "commit": "https://github.com/apache/cassandra/commit/511d16321e267d84cc32c88b54a5c896089e6647",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/511d16321e267d84cc32c88b54a5c896089e6647/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=511d16321e267d84cc32c88b54a5c896089e6647",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -19,6 +19,7 @@\n  * fix missing response during range slice repair (CASSANDRA-3551)\n  * 'describe ring' moved from CLI to nodetool and available through JMX (CASSANDRA-3220)\n  * add back partitioner to sstable metadata (CASSANDRA-3540)\n+ * fix NPE in get_count for counters (CASSANDRA-3601)\n Merged from 0.8:\n  * use cannonical host for local node in nodetool info (CASSANDRA-3556)\n  * remove nonlocal DC write optimization since it only worked with",
                "raw_url": "https://github.com/apache/cassandra/raw/511d16321e267d84cc32c88b54a5c896089e6647/CHANGES.txt",
                "sha": "70e7fa44fbb9ad11ea19e1934f54638eac11e321",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/511d16321e267d84cc32c88b54a5c896089e6647/src/java/org/apache/cassandra/thrift/CassandraServer.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/thrift/CassandraServer.java?ref=511d16321e267d84cc32c88b54a5c896089e6647",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/thrift/CassandraServer.java",
                "patch": "@@ -449,7 +449,10 @@ public int get_count(ByteBuffer key, ColumnParent column_parent, SlicePredicate\n             totalCount += columns.size();\n             requestedCount -= columns.size();\n             ColumnOrSuperColumn lastColumn = columns.get(columns.size() - 1);\n-            ByteBuffer lastName = lastColumn.isSetSuper_column() ? lastColumn.super_column.name : lastColumn.column.name;\n+            ByteBuffer lastName =\n+                    lastColumn.isSetSuper_column() ? lastColumn.super_column.name :\n+                        (lastColumn.isSetColumn() ? lastColumn.column.name :\n+                            (lastColumn.isSetCounter_column() ? lastColumn.counter_column.name : lastColumn.counter_super_column.name));\n             if ((requestedCount == 0) || ((columns.size() == 1) && (lastName.equals(predicate.slice_range.start))))\n             {\n                 break;",
                "raw_url": "https://github.com/apache/cassandra/raw/511d16321e267d84cc32c88b54a5c896089e6647/src/java/org/apache/cassandra/thrift/CassandraServer.java",
                "sha": "dd69e4aa7bc0d863063debc532b2abbed8090f64",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in get_count for counters\npatch by ghinkle; reviewed by slebresne for CASSANDRA-3601\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-1.0@1212284 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cassandra/commit/24f8ddeea135b89a828d5ca625932c446695dad2",
        "patched_files": [
            "CassandraServer.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "CassandraServerTest.java"
        ]
    },
    "cassandra_535c56f": {
        "bug_id": "cassandra_535c56f",
        "commit": "https://github.com/apache/cassandra/commit/535c56fb217c1a12d2fb9a217203c03d26642444",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/535c56fb217c1a12d2fb9a217203c03d26642444/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=535c56fb217c1a12d2fb9a217203c03d26642444",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 2.0.7\n+ * Fix NPE in MeteredFlusher (CASSANDRA-6820)\n  * Fix race processing range scan responses (CASSANDRA-6820)\n  * Allow deleting snapshots from dropped keyspaces (CASSANDRA-6821)\n  * Add uuid() function (CASSANDRA-6473)",
                "raw_url": "https://github.com/apache/cassandra/raw/535c56fb217c1a12d2fb9a217203c03d26642444/CHANGES.txt",
                "sha": "ed202cc01e27de8cf3d1f0d5403f5bd4a000e138",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/535c56fb217c1a12d2fb9a217203c03d26642444/src/java/org/apache/cassandra/db/MeteredFlusher.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/MeteredFlusher.java?ref=535c56fb217c1a12d2fb9a217203c03d26642444",
                "deletions": 3,
                "filename": "src/java/org/apache/cassandra/db/MeteredFlusher.java",
                "patch": "@@ -37,9 +37,8 @@ public void run()\n         long totalMemtableBytesAllowed = DatabaseDescriptor.getTotalMemtableSpaceInMB() * 1048576L;\n \n         // first, find how much memory non-active memtables are using\n-        long flushingBytes = Memtable.activelyMeasuring == null\n-                           ? 0\n-                           : Memtable.activelyMeasuring.getMemtableThreadSafe().getLiveSize();\n+        ColumnFamilyStore measuredCfs = Memtable.activelyMeasuring;\n+        long flushingBytes = measuredCfs == null ? 0 : measuredCfs.getMemtableThreadSafe().getLiveSize();\n         flushingBytes += countFlushingBytes();\n         if (flushingBytes > 0)\n             logger.debug(\"Currently flushing {} bytes of {} max\", flushingBytes, totalMemtableBytesAllowed);",
                "raw_url": "https://github.com/apache/cassandra/raw/535c56fb217c1a12d2fb9a217203c03d26642444/src/java/org/apache/cassandra/db/MeteredFlusher.java",
                "sha": "5c71fc6f1e0e27f8f81ac19e606c1ddeed1fc9d8",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in MeteredFlusher\npatch by Nicolas Favre-Felix; reviewed by jbellis for CASSANDRA-6820",
        "parent": "https://github.com/apache/cassandra/commit/d1cc70138ca9088e6d390af767b357bc40d147fc",
        "patched_files": [
            "MeteredFlusher.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "MeteredFlusherTest.java"
        ]
    },
    "cassandra_55dda73": {
        "bug_id": "cassandra_55dda73",
        "commit": "https://github.com/apache/cassandra/commit/55dda732bdafc081addcb2f0280d0f7945343ff6",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/55dda732bdafc081addcb2f0280d0f7945343ff6/src/java/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategy.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategy.java?ref=55dda732bdafc081addcb2f0280d0f7945343ff6",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategy.java",
                "patch": "@@ -151,6 +151,9 @@ public synchronized AbstractCompactionTask getNextBackgroundTask(int gcBefore)\n     public AbstractCompactionTask getMaximalTask(final int gcBefore)\n     {\n         Collection<SSTableReader> sstables = cfs.markAllCompacting();\n+        if (sstables == null)\n+            return null;\n+\n         return new CompactionTask(cfs, sstables, gcBefore);\n     }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/55dda732bdafc081addcb2f0280d0f7945343ff6/src/java/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategy.java",
                "sha": "8d990e51e5d0109919090bbb75a0395eb76e4fe3",
                "status": "modified"
            }
        ],
        "message": "avoid NPE on no-op major compaction",
        "parent": "https://github.com/apache/cassandra/commit/d21556f4f53d4b59c3e2ae1d3571fb1fba6bf5ed",
        "patched_files": [
            "SizeTieredCompactionStrategy.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "SizeTieredCompactionStrategyTest.java"
        ]
    },
    "cassandra_5749fb1": {
        "bug_id": "cassandra_5749fb1",
        "commit": "https://github.com/apache/cassandra/commit/5749fb1eaa81e4c6c6ba06bce38e3b29d17d398e",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/5749fb1eaa81e4c6c6ba06bce38e3b29d17d398e/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamilyStore.java?ref=5749fb1eaa81e4c6c6ba06bce38e3b29d17d398e",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "patch": "@@ -1725,6 +1725,9 @@ public ColumnFamily getColumnFamily(QueryFilter filter)\n      */\n     ColumnFamily filterColumnFamily(ColumnFamily cached, QueryFilter filter)\n     {\n+        if (cached == null)\n+            return null;\n+\n         ColumnFamily cf = cached.cloneMeShallow(ArrayBackedSortedColumns.factory, filter.filter.isReversed());\n         OnDiskAtomIterator ci = filter.getColumnFamilyIterator(cached);\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/5749fb1eaa81e4c6c6ba06bce38e3b29d17d398e/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "sha": "0a2eb1421e92e79d85ee66d0abe2fe810ac251dd",
                "status": "modified"
            }
        ],
        "message": "Fix potential NPE",
        "parent": "https://github.com/apache/cassandra/commit/07a451ea0274ab75f4772aef741bf8aa83e86f91",
        "patched_files": [
            "ColumnFamilyStore.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "ColumnFamilyStoreTest.java"
        ]
    },
    "cassandra_588dc06": {
        "bug_id": "cassandra_588dc06",
        "commit": "https://github.com/apache/cassandra/commit/588dc06eb8b5a7678128e9f0c0421fc391b14bce",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/588dc06eb8b5a7678128e9f0c0421fc391b14bce/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=588dc06eb8b5a7678128e9f0c0421fc391b14bce",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 2.1.10\n+ * Fix NPE in nodetool compactionhistory (CASSANDRA-9758)\n  * (Pig) support BulkOutputFormat as a URL parameter (CASSANDRA-7410)\n  * BATCH statement is broken in cqlsh (CASSANDRA-10272)\n  * Added configurable warning threshold for GC duration (CASSANDRA-8907)",
                "raw_url": "https://github.com/apache/cassandra/raw/588dc06eb8b5a7678128e9f0c0421fc391b14bce/CHANGES.txt",
                "sha": "278773967b9bc1da706b35ce68a0428edde084a2",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/cassandra/blob/588dc06eb8b5a7678128e9f0c0421fc391b14bce/src/java/org/apache/cassandra/utils/FBUtilities.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/utils/FBUtilities.java?ref=588dc06eb8b5a7678128e9f0c0421fc391b14bce",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/utils/FBUtilities.java",
                "patch": "@@ -28,14 +28,16 @@\n import java.nio.ByteBuffer;\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n-import java.text.NumberFormat;\n import java.util.*;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n import java.util.zip.Checksum;\n \n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n import com.google.common.base.Joiner;\n import com.google.common.collect.AbstractIterator;\n import org.apache.cassandra.io.util.FileUtils;\n@@ -472,8 +474,18 @@ public static IAuthenticator newAuthenticator(String className) throws Configura\n         return s;\n     }\n \n-    public static String toString(Map<?,?> map)\n+    /**\n+     * Make straing out of the given {@code Map}.\n+     *\n+     * @param map Map to make string.\n+     * @return String representation of all entries in the map,\n+     *         where key and value pair is concatenated with ':'.\n+     */\n+    @Nonnull\n+    public static String toString(@Nullable Map<?, ?> map)\n     {\n+        if (map == null)\n+            return \"\";\n         Joiner.MapJoiner joiner = Joiner.on(\", \").withKeyValueSeparator(\":\");\n         return joiner.join(map);\n     }",
                "raw_url": "https://github.com/apache/cassandra/raw/588dc06eb8b5a7678128e9f0c0421fc391b14bce/src/java/org/apache/cassandra/utils/FBUtilities.java",
                "sha": "f866610b1dd811a6940d831de7539a391c27a1a0",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/cassandra/blob/588dc06eb8b5a7678128e9f0c0421fc391b14bce/test/unit/org/apache/cassandra/utils/FBUtilitiesTest.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/utils/FBUtilitiesTest.java?ref=588dc06eb8b5a7678128e9f0c0421fc391b14bce",
                "deletions": 0,
                "filename": "test/unit/org/apache/cassandra/utils/FBUtilitiesTest.java",
                "patch": "@@ -27,6 +27,11 @@\n import com.google.common.primitives.Ints;\n import org.junit.Test;\n \n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import static org.junit.Assert.assertEquals;\n+\n public class FBUtilitiesTest\n {\n     @Test\n@@ -70,6 +75,20 @@ public void testCompareByteSubArrays()\n         }\n     }\n \n+    @Test\n+    public void testToString()\n+    {\n+        // null turns to empty string\n+        assertEquals(\"\", FBUtilities.toString(null));\n+        Map<String, String> map = new TreeMap<>();\n+        // empty map turns to empty string\n+        assertEquals(\"\", FBUtilities.toString(map));\n+        map.put(\"aaa\", \"bbb\");\n+        assertEquals(\"aaa:bbb\", FBUtilities.toString(map));\n+        map.put(\"ccc\", \"ddd\");\n+        assertEquals(\"aaa:bbb, ccc:ddd\", FBUtilities.toString(map));\n+    }\n+\n     @Test(expected=CharacterCodingException.class)\n     public void testDecode() throws IOException\n     {",
                "raw_url": "https://github.com/apache/cassandra/raw/588dc06eb8b5a7678128e9f0c0421fc391b14bce/test/unit/org/apache/cassandra/utils/FBUtilitiesTest.java",
                "sha": "c82bcc963ba951b99f0c13d886c9c06d5c9d9856",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in nodetool compactionhistory\n\npatch by Pierre N. and yukim; reviewed by yukim for CASSANDRA-9758",
        "parent": "https://github.com/apache/cassandra/commit/4b1d59e13143f5a55478a7cfcaca61ba22259f9f",
        "patched_files": [
            "FBUtilities.java",
            "CHANGES.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "FBUtilitiesTest.java"
        ]
    },
    "cassandra_58eebc9": {
        "bug_id": "cassandra_58eebc9",
        "commit": "https://github.com/apache/cassandra/commit/58eebc9a977ef7dfafe6ea568cece963191598ce",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/58eebc9a977ef7dfafe6ea568cece963191598ce/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=58eebc9a977ef7dfafe6ea568cece963191598ce",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -10,6 +10,7 @@\n    leveled manifest (CASSANDRA-6093)\n  * make sequential nodetool repair the default (CASSANDRA-5950)\n  * Add more hooks for compaction strategy implementations (CASSANDRA-6111)\n+ * Fix potential NPE on composite 2ndary indexes (CASSANDRA-6098)\n Merged from 1.2:\n  * lock access to TM.endpointToHostIdMap (CASSANDRA-6103)\n  * Allow estimated memtable size to exceed slab allocator size (CASSANDRA-6078)",
                "raw_url": "https://github.com/apache/cassandra/raw/58eebc9a977ef7dfafe6ea568cece963191598ce/CHANGES.txt",
                "sha": "0fa788aa0df2b8f4bef5f5ed0cc892f53c23a589",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/58eebc9a977ef7dfafe6ea568cece963191598ce/src/java/org/apache/cassandra/db/index/composites/CompositesIndexOnClusteringKey.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/index/composites/CompositesIndexOnClusteringKey.java?ref=58eebc9a977ef7dfafe6ea568cece963191598ce",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/db/index/composites/CompositesIndexOnClusteringKey.java",
                "patch": "@@ -110,7 +110,6 @@ public boolean indexes(ByteBuffer name)\n \n     public boolean isStale(IndexedEntry entry, ColumnFamily data, long now)\n     {\n-        return data == null || data.hasOnlyTombstones(now);\n+        return data.hasOnlyTombstones(now);\n     }\n }\n-",
                "raw_url": "https://github.com/apache/cassandra/raw/58eebc9a977ef7dfafe6ea568cece963191598ce/src/java/org/apache/cassandra/db/index/composites/CompositesIndexOnClusteringKey.java",
                "sha": "954f3809ec1f7aea5dc128511146ec0bd0b01e20",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/58eebc9a977ef7dfafe6ea568cece963191598ce/src/java/org/apache/cassandra/db/index/composites/CompositesIndexOnPartitionKey.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/index/composites/CompositesIndexOnPartitionKey.java?ref=58eebc9a977ef7dfafe6ea568cece963191598ce",
                "deletions": 3,
                "filename": "src/java/org/apache/cassandra/db/index/composites/CompositesIndexOnPartitionKey.java",
                "patch": "@@ -97,8 +97,6 @@ public boolean indexes(ByteBuffer name)\n \n     public boolean isStale(IndexedEntry entry, ColumnFamily data, long now)\n     {\n-        return data == null || data.hasOnlyTombstones(now);\n+        return data.hasOnlyTombstones(now);\n     }\n }\n-\n-",
                "raw_url": "https://github.com/apache/cassandra/raw/58eebc9a977ef7dfafe6ea568cece963191598ce/src/java/org/apache/cassandra/db/index/composites/CompositesIndexOnPartitionKey.java",
                "sha": "4e2c5809278e5369862ebc777314bc1c32e25fcc",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/58eebc9a977ef7dfafe6ea568cece963191598ce/src/java/org/apache/cassandra/db/index/composites/CompositesSearcher.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/index/composites/CompositesSearcher.java?ref=58eebc9a977ef7dfafe6ea568cece963191598ce",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/index/composites/CompositesSearcher.java",
                "patch": "@@ -240,7 +240,7 @@ else if (!currentKey.equals(dk))\n                                                                            Integer.MAX_VALUE,\n                                                                            baseCfs.metadata.clusteringKeyColumns().size());\n                         ColumnFamily newData = baseCfs.getColumnFamily(new QueryFilter(dk, baseCfs.name, dataFilter, filter.timestamp));\n-                        if (index.isStale(entry, newData, filter.timestamp))\n+                        if (newData == null || index.isStale(entry, newData, filter.timestamp))\n                         {\n                             index.delete(entry);\n                             continue;",
                "raw_url": "https://github.com/apache/cassandra/raw/58eebc9a977ef7dfafe6ea568cece963191598ce/src/java/org/apache/cassandra/db/index/composites/CompositesSearcher.java",
                "sha": "0242fd2945af616e6c0f69c50dd90b85cff5f703",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/58eebc9a977ef7dfafe6ea568cece963191598ce/test/unit/org/apache/cassandra/SchemaLoader.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/SchemaLoader.java?ref=58eebc9a977ef7dfafe6ea568cece963191598ce",
                "deletions": 1,
                "filename": "test/unit/org/apache/cassandra/SchemaLoader.java",
                "patch": "@@ -222,7 +222,8 @@ public static void stopGossiper()\n                                            superCFMD(ks2, \"Super3\", bytes),\n                                            superCFMD(ks2, \"Super4\", TimeUUIDType.instance),\n                                            indexCFMD(ks2, \"Indexed1\", true),\n-                                           compositeIndexCFMD(ks2, \"Indexed2\", true, withOldCfIds)));\n+                                           compositeIndexCFMD(ks2, \"Indexed2\", true, withOldCfIds),\n+                                           compositeIndexCFMD(ks2, \"Indexed3\", true, withOldCfIds).gcGraceSeconds(0)));\n \n         // Keyspace 3\n         schema.add(KSMetaData.testMetadata(ks3,",
                "raw_url": "https://github.com/apache/cassandra/raw/58eebc9a977ef7dfafe6ea568cece963191598ce/test/unit/org/apache/cassandra/SchemaLoader.java",
                "sha": "55cd329676501af01d511810b839112ecbe23d5d",
                "status": "modified"
            },
            {
                "additions": 48,
                "blob_url": "https://github.com/apache/cassandra/blob/58eebc9a977ef7dfafe6ea568cece963191598ce/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java",
                "changes": 48,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java?ref=58eebc9a977ef7dfafe6ea568cece963191598ce",
                "deletions": 0,
                "filename": "test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java",
                "patch": "@@ -554,6 +554,54 @@ public void testDeleteOfInconsistentValuesFromCompositeIndex() throws Exception\n         assertEquals(0, rows.size());\n     }\n \n+    // See CASSANDRA-6098\n+    @Test\n+    public void testDeleteCompositeIndex() throws Exception\n+    {\n+        String keySpace = \"Keyspace2\";\n+        String cfName = \"Indexed3\"; // has gcGrace 0\n+\n+        Keyspace keyspace = Keyspace.open(keySpace);\n+        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfName);\n+        cfs.truncateBlocking();\n+\n+        ByteBuffer rowKey = ByteBufferUtil.bytes(\"k1\");\n+        ByteBuffer clusterKey = ByteBufferUtil.bytes(\"ck1\");\n+        ByteBuffer colName = ByteBufferUtil.bytes(\"col1\");\n+        CompositeType baseComparator = (CompositeType)cfs.getComparator();\n+        CompositeType.Builder builder = baseComparator.builder();\n+        builder.add(clusterKey);\n+        builder.add(colName);\n+        ByteBuffer compositeName = builder.build();\n+\n+        ByteBuffer val1 = ByteBufferUtil.bytes(\"v2\");\n+\n+        // Insert indexed value.\n+        RowMutation rm;\n+        rm = new RowMutation(keySpace, rowKey);\n+        rm.add(cfName, compositeName, val1, 0);\n+        rm.apply();\n+\n+        // Now delete the value and flush too.\n+        rm = new RowMutation(keySpace, rowKey);\n+        rm.delete(cfName, 1);\n+        rm.apply();\n+\n+        // We want the data to be gcable, but even if gcGrace == 0, we still need to wait 1 second\n+        // since we won't gc on a tie.\n+        try { Thread.sleep(1000); } catch (Exception e) {}\n+\n+        // Read the index and we check we do get no value (and no NPE)\n+        // Note: the index will return the entry because it hasn't been deleted (we\n+        // haven't read yet nor compacted) but the data read itself will return null\n+        IndexExpression expr = new IndexExpression(colName, IndexOperator.EQ, val1);\n+        List<IndexExpression> clause = Arrays.asList(expr);\n+        IDiskAtomFilter filter = new IdentityQueryFilter();\n+        Range<RowPosition> range = Util.range(\"\", \"\");\n+        List<Row> rows = keyspace.getColumnFamilyStore(cfName).search(range, clause, filter, 100);\n+        assertEquals(0, rows.size());\n+    }\n+\n     // See CASSANDRA-2628\n     @Test\n     public void testIndexScanWithLimitOne() throws IOException",
                "raw_url": "https://github.com/apache/cassandra/raw/58eebc9a977ef7dfafe6ea568cece963191598ce/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java",
                "sha": "f01745311ba692ff93289bda1871a72e9820f9c2",
                "status": "modified"
            }
        ],
        "message": "Fix potential NPE in 2ndary indexes\n\npatch by slebresne; reviewed by jbellis for CASSANDRA-6098",
        "parent": "https://github.com/apache/cassandra/commit/65b1e36c7853694275721c6bac1e705e61ee79ef",
        "patched_files": [
            "ColumnFamilyStore.java",
            "CompositesIndexOnClusteringKey.java",
            "CHANGES.java",
            "CompositesIndexOnPartitionKey.java",
            "CompositesSearcher.java",
            "SchemaLoader.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "ColumnFamilyStoreTest.java"
        ]
    },
    "cassandra_59ba098": {
        "bug_id": "cassandra_59ba098",
        "commit": "https://github.com/apache/cassandra/commit/59ba098d29fd492a715b7b5c13e6be17cebd33d9",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/59ba098d29fd492a715b7b5c13e6be17cebd33d9/src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java?ref=59ba098d29fd492a715b7b5c13e6be17cebd33d9",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java",
                "patch": "@@ -141,6 +141,9 @@ public void update(MessageDigest digest)\n         // blindly updating everything wouldn't be correct\n         DataOutputBuffer out = new DataOutputBuffer();\n \n+        // initialize indexBuilder for the benefit of its tombstoneTracker, used by our reducing iterator\n+        indexBuilder = new ColumnIndex.Builder(emptyColumnFamily, key.key, out);\n+\n         try\n         {\n             DeletionTime.serializer.serialize(emptyColumnFamily.deletionInfo().getTopLevelDeletion(), out);\n@@ -158,8 +161,6 @@ public void update(MessageDigest digest)\n             throw new AssertionError(e);\n         }\n \n-        // initialize indexBuilder for the benefit of its tombstoneTracker, used by our reducing iterator\n-        indexBuilder = new ColumnIndex.Builder(emptyColumnFamily, key.key, out);\n         while (iter.hasNext())\n             iter.next().updateDigest(digest);\n         close();",
                "raw_url": "https://github.com/apache/cassandra/raw/59ba098d29fd492a715b7b5c13e6be17cebd33d9/src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java",
                "sha": "f61cc2b8583bafb4707ca0242bf482b3b4d90355",
                "status": "modified"
            }
        ],
        "message": "initialize IndexBuilder before updating digest to avoid NPE (follow up CASSANDRA-8979)",
        "parent": "https://github.com/apache/cassandra/commit/922a2c49b6de281c95b0ef05481c076bf2abd077",
        "patched_files": [
            "LazilyCompactedRow.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "LazilyCompactedRowTest.java"
        ]
    },
    "cassandra_5b6a2b1": {
        "bug_id": "cassandra_5b6a2b1",
        "commit": "https://github.com/apache/cassandra/commit/5b6a2b11bc8a9499ac012d745869e3d814cc91ad",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/5b6a2b11bc8a9499ac012d745869e3d814cc91ad/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamilyStore.java?ref=5b6a2b11bc8a9499ac012d745869e3d814cc91ad",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "patch": "@@ -1192,7 +1192,7 @@ ColumnFamily getColumnFamily(QueryFilter filter, int gcBefore)\n             readStats.addNano(System.nanoTime() - start);\n         }\n \n-        logger.debug(\"Read {} columns\", result.getColumnCount());\n+        logger.debug(\"Read {} columns\", result == null ? 0 : result.getColumnCount());\n         return result;\n     }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/5b6a2b11bc8a9499ac012d745869e3d814cc91ad/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "sha": "ef0e55dcec4d496e8e5305ae6f465a3b45b89f4d",
                "status": "modified"
            }
        ],
        "message": "fix NPE\npatch by David Alves for CASSANDRA-1123",
        "parent": "https://github.com/apache/cassandra/commit/ad52ce4fa303d2c63cbd9833b7245ab2cdff28b3",
        "patched_files": [
            "ColumnFamilyStore.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "ColumnFamilyStoreTest.java"
        ]
    },
    "cassandra_5cde93d": {
        "bug_id": "cassandra_5cde93d",
        "commit": "https://github.com/apache/cassandra/commit/5cde93d9607ddbdb5316afaa2be9b9132d1bec3f",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/5cde93d9607ddbdb5316afaa2be9b9132d1bec3f/CHANGES.txt",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=5cde93d9607ddbdb5316afaa2be9b9132d1bec3f",
                "deletions": 1,
                "filename": "CHANGES.txt",
                "patch": "@@ -15,7 +15,8 @@\n    tasks and upgradesstables (CASSANDRA-3985)\n  * fix NPE on invalid CQL delete command (CASSANDRA-3755)\n  * allow custom types in CLI's assume command (CASSANDRA-4081)\n- * Fix totalBytes count for parallel compactions (CASSANDRA-3758)\n+ * fix totalBytes count for parallel compactions (CASSANDRA-3758)\n+ * fix intermittent NPE in get_slice (CASSANDRA-4095)\n \n \n 1.0.8",
                "raw_url": "https://github.com/apache/cassandra/raw/5cde93d9607ddbdb5316afaa2be9b9132d1bec3f/CHANGES.txt",
                "sha": "bf1a34ff0cb5faeb19d7bfd77233068fcb31091f",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cassandra/blob/5cde93d9607ddbdb5316afaa2be9b9132d1bec3f/src/java/org/apache/cassandra/db/Row.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/Row.java?ref=5cde93d9607ddbdb5316afaa2be9b9132d1bec3f",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/db/Row.java",
                "patch": "@@ -45,6 +45,11 @@ public Row(DecoratedKey<?> key, ColumnFamily cf)\n         this.cf = cf;\n     }\n \n+    public int getLiveColumnCount()\n+    {\n+        return cf == null ? 0 : cf.getLiveColumnCount();\n+    }\n+\n     @Override\n     public String toString()\n     {",
                "raw_url": "https://github.com/apache/cassandra/raw/5cde93d9607ddbdb5316afaa2be9b9132d1bec3f/src/java/org/apache/cassandra/db/Row.java",
                "sha": "71a73323414cf811c36baf25638f85d8ae1ee2d5",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/5cde93d9607ddbdb5316afaa2be9b9132d1bec3f/src/java/org/apache/cassandra/db/SliceFromReadCommand.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/SliceFromReadCommand.java?ref=5cde93d9607ddbdb5316afaa2be9b9132d1bec3f",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/SliceFromReadCommand.java",
                "patch": "@@ -73,7 +73,7 @@ public Row getRow(Table table) throws IOException\n     public ReadCommand maybeGenerateRetryCommand(RepairCallback handler, Row row)\n     {\n         int maxLiveColumns = handler.getMaxLiveColumns();\n-        int liveColumnsInRow = row != null ? row.cf.getLiveColumnCount() : 0;\n+        int liveColumnsInRow = row != null ? row.getLiveColumnCount() : 0;\n \n         assert maxLiveColumns <= count;\n         // We generate a retry if at least one node reply with count live columns but after merge we have less",
                "raw_url": "https://github.com/apache/cassandra/raw/5cde93d9607ddbdb5316afaa2be9b9132d1bec3f/src/java/org/apache/cassandra/db/SliceFromReadCommand.java",
                "sha": "be73472ba8d2946ad1721c2b8f79e1d54a8862bf",
                "status": "modified"
            }
        ],
        "message": "Fix intermittent NPE in get_slice\n\npatch by jbellis; reviewed by vijay for CASSANDRA-4095",
        "parent": "https://github.com/apache/cassandra/commit/3931ee709da29d3b9d9c28b8d0ef34cfdb357c1c",
        "patched_files": [
            "Row.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "RowTest.java"
        ]
    },
    "cassandra_5fe0600": {
        "bug_id": "cassandra_5fe0600",
        "commit": "https://github.com/apache/cassandra/commit/5fe0600744cba01d8e238746c0bd363f2059320c",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/5fe0600744cba01d8e238746c0bd363f2059320c/src/java/org/apache/cassandra/db/DataTracker.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/DataTracker.java?ref=5fe0600744cba01d8e238746c0bd363f2059320c",
                "deletions": 3,
                "filename": "src/java/org/apache/cassandra/db/DataTracker.java",
                "patch": "@@ -437,11 +437,12 @@ public long estimatedKeys()\n     public int getMeanColumns()\n     {\n         long sum = 0;\n-        int count = 0;\n+        long count = 0;\n         for (SSTableReader sstable : getSSTables())\n         {\n-            sum += sstable.getEstimatedColumnCount().mean();\n-            count++;\n+            long n = sstable.getEstimatedColumnCount().count();\n+            sum += sstable.getEstimatedColumnCount().mean() * n;\n+            count += n;\n         }\n         return count > 0 ? (int) (sum / count) : 0;\n     }",
                "raw_url": "https://github.com/apache/cassandra/raw/5fe0600744cba01d8e238746c0bd363f2059320c/src/java/org/apache/cassandra/db/DataTracker.java",
                "sha": "d90c0ffa4d4844e5d276c98ece508b5624ab20db",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/5fe0600744cba01d8e238746c0bd363f2059320c/src/java/org/apache/cassandra/utils/concurrent/WaitQueue.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/utils/concurrent/WaitQueue.java?ref=5fe0600744cba01d8e238746c0bd363f2059320c",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/utils/concurrent/WaitQueue.java",
                "patch": "@@ -111,15 +111,15 @@ public boolean signal()\n      */\n     public void signalAll()\n     {\n-        if (!hasWaiters())\n+        RegisteredSignal last = queue.peekLast();\n+        if (last == null)\n             return;\n         List<Thread> woke = null;\n         if (logger.isTraceEnabled())\n             woke = new ArrayList<>();\n         long start = System.nanoTime();\n         // we wake up only a snapshot of the queue, to avoid a race where the condition is not met and the woken thread\n         // immediately waits on the queue again\n-        RegisteredSignal last = queue.getLast();\n         Iterator<RegisteredSignal> iter = queue.iterator();\n         while (iter.hasNext())\n         {",
                "raw_url": "https://github.com/apache/cassandra/raw/5fe0600744cba01d8e238746c0bd363f2059320c/src/java/org/apache/cassandra/utils/concurrent/WaitQueue.java",
                "sha": "4f3747d3c95404e8bf675348f442e7974d3b484f",
                "status": "modified"
            }
        ],
        "message": "fix NPE\npatch by Benedict Elliott Smith; reviewed by jbellis for CASSANDRA-6671",
        "parent": "https://github.com/apache/cassandra/commit/ff2a92c13c822e3220fe980323590bb4032f32bc",
        "patched_files": [
            "WaitQueue.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "WaitQueueTest.java"
        ]
    },
    "cassandra_62cd28d": {
        "bug_id": "cassandra_62cd28d",
        "commit": "https://github.com/apache/cassandra/commit/62cd28dfef1086607bef8d4b714ceb9be8dde250",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/62cd28dfef1086607bef8d4b714ceb9be8dde250/src/java/org/apache/cassandra/db/Table.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/Table.java?ref=62cd28dfef1086607bef8d4b714ceb9be8dde250",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/Table.java",
                "patch": "@@ -442,7 +442,7 @@ private static void ignoreObsoleteMutations(ColumnFamily cf, SortedSet<ByteBuffe\n             if (bothDeleted || obsoleteRowTombstone || obsoleteColumn)\n             {\n                 if (logger.isDebugEnabled())\n-                    logger.debug(\"skipping index update for obsolete mutation of \" + cf.getComparator().getString(oldColumn.name()));\n+                    logger.debug(\"skipping index update for obsolete mutation of \" + cf.getComparator().getString(name));\n                 iter.remove();\n                 oldIndexedColumns.remove(name);\n             }",
                "raw_url": "https://github.com/apache/cassandra/raw/62cd28dfef1086607bef8d4b714ceb9be8dde250/src/java/org/apache/cassandra/db/Table.java",
                "sha": "063f94c14fb7d7a95fec6cfdfd60097963ee3634",
                "status": "modified"
            }
        ],
        "message": "fix debug log NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-0.7@1100448 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cassandra/commit/0dc0029e820783f168297bdafd6169d03aa6ea20",
        "patched_files": [
            "Table.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "TableTest.java"
        ]
    },
    "cassandra_633babf": {
        "bug_id": "cassandra_633babf",
        "commit": "https://github.com/apache/cassandra/commit/633babf0f02fac56cad7bff03a4ff415feb38f39",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/633babf0f02fac56cad7bff03a4ff415feb38f39/src/java/org/apache/cassandra/streaming/StreamSession.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/streaming/StreamSession.java?ref=633babf0f02fac56cad7bff03a4ff415feb38f39",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/streaming/StreamSession.java",
                "patch": "@@ -241,7 +241,7 @@ public LifecycleTransaction getTransaction(TableId tableId)\n     private boolean isKeepAliveSupported()\n     {\n         CassandraVersion peerVersion = Gossiper.instance.getReleaseVersion(peer);\n-        return peerVersion.compareTo(STREAM_KEEP_ALIVE_VERSION) >= 0;\n+        return peerVersion != null && peerVersion.compareTo(STREAM_KEEP_ALIVE_VERSION) >= 0;\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/cassandra/raw/633babf0f02fac56cad7bff03a4ff415feb38f39/src/java/org/apache/cassandra/streaming/StreamSession.java",
                "sha": "bfae0bf8c21ea33eda33407210a43dbef133553d",
                "status": "modified"
            }
        ],
        "message": "Fix NPE after CASSANDRA-12929",
        "parent": "https://github.com/apache/cassandra/commit/56ea68ef7240982f71b73238c7b1b0c9c3ba28ed",
        "patched_files": [
            "StreamSession.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "StreamSessionTest.java"
        ]
    },
    "cassandra_64e1c79": {
        "bug_id": "cassandra_64e1c79",
        "commit": "https://github.com/apache/cassandra/commit/64e1c79501028d6d8d3e835f72f73c7c5e8c7f11",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/64e1c79501028d6d8d3e835f72f73c7c5e8c7f11/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamilyStore.java?ref=64e1c79501028d6d8d3e835f72f73c7c5e8c7f11",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "patch": "@@ -1149,7 +1149,7 @@ else if (!column.name().hasArray() || !column.value().hasArray())\n                 }\n             }\n \n-            // TFFT resuses the underlying buffer for the key\n+            // avoid keeping a permanent reference to the original key buffer\n             ssTables.getRowCache().put(new DecoratedKey(key.token, ByteBufferUtil.clone(key.key)), cached);\n         }\n         return cached;",
                "raw_url": "https://github.com/apache/cassandra/raw/64e1c79501028d6d8d3e835f72f73c7c5e8c7f11/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "sha": "f9b81703a6951aee8a4289f9f79e9cb749b8b959",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cassandra/blob/64e1c79501028d6d8d3e835f72f73c7c5e8c7f11/src/java/org/apache/cassandra/io/sstable/SSTableReader.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/sstable/SSTableReader.java?ref=64e1c79501028d6d8d3e835f72f73c7c5e8c7f11",
                "deletions": 5,
                "filename": "src/java/org/apache/cassandra/io/sstable/SSTableReader.java",
                "patch": "@@ -417,8 +417,9 @@ public DecoratedKey apply(IndexSummary.KeyPosition kp)\n \n     public void cacheKey(DecoratedKey key, Long info)\n     {\n-        //TFFT reuses the underlying buffer for the key\n-        keyCache.put(new Pair<Descriptor, DecoratedKey>(descriptor, new DecoratedKey(key.token, ByteBufferUtil.clone(key.key))), info);\n+        // avoid keeping a permanent reference to the original key buffer\n+        DecoratedKey copiedKey = new DecoratedKey(key.token, key.key == null ? null : ByteBufferUtil.clone(key.key));\n+        keyCache.put(new Pair<Descriptor, DecoratedKey>(descriptor, copiedKey), info);\n     }\n \n     public Long getCachedPosition(DecoratedKey key)\n@@ -441,8 +442,12 @@ private Long getCachedPosition(Pair<Descriptor, DecoratedKey> unifiedKey)\n     public long getPosition(DecoratedKey decoratedKey, Operator op)\n     {\n         // first, check bloom filter\n-        if (op == Operator.EQ && !bf.isPresent(decoratedKey.key))\n-            return -1;\n+        if (op == Operator.EQ)\n+        {\n+            assert decoratedKey.key != null; // null is ok for GE scans\n+            if (!bf.isPresent(decoratedKey.key))\n+                return -1;\n+        }\n \n         // next, the key cache\n         Pair<Descriptor, DecoratedKey> unifiedKey = new Pair<Descriptor, DecoratedKey>(descriptor, decoratedKey);\n@@ -482,7 +487,7 @@ public long getPosition(DecoratedKey decoratedKey, Operator op)\n                             if (op == Operator.EQ)\n                                 bloomFilterTracker.addTruePositive();\n                             // store exact match for the key\n-                            cacheKey(unifiedKey.right, dataPosition);\n+                            cacheKey(decoratedKey, dataPosition);\n                         }\n                         return dataPosition;\n                     }",
                "raw_url": "https://github.com/apache/cassandra/raw/64e1c79501028d6d8d3e835f72f73c7c5e8c7f11/src/java/org/apache/cassandra/io/sstable/SSTableReader.java",
                "sha": "feb53df07a28308b6518557bb66b7b9a1cd4c0ae",
                "status": "modified"
            }
        ],
        "message": "fix NPE from #2102\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-0.7@1069517 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cassandra/commit/9460a5fb6ec61745b89e50577a8a1e4a81768567",
        "patched_files": [
            "SSTableReader.java",
            "ColumnFamilyStore.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "ColumnFamilyStoreTest.java",
            "SSTableReaderTest.java"
        ]
    },
    "cassandra_6658a6e": {
        "bug_id": "cassandra_6658a6e",
        "commit": "https://github.com/apache/cassandra/commit/6658a6e03cb4062036f84e78aba6fc3114499c80",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cassandra/blob/6658a6e03cb4062036f84e78aba6fc3114499c80/src/java/org/apache/cassandra/io/sstable/SSTableReader.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/sstable/SSTableReader.java?ref=6658a6e03cb4062036f84e78aba6fc3114499c80",
                "deletions": 4,
                "filename": "src/java/org/apache/cassandra/io/sstable/SSTableReader.java",
                "patch": "@@ -89,6 +89,8 @@\n import org.apache.cassandra.io.sstable.metadata.MetadataType;\n import org.apache.cassandra.io.sstable.metadata.StatsMetadata;\n import org.apache.cassandra.io.sstable.metadata.ValidationMetadata;\n+import org.apache.cassandra.io.util.BufferedSegmentedFile;\n+import org.apache.cassandra.io.util.CompressedSegmentedFile;\n import org.apache.cassandra.io.util.DataOutputStreamAndChannel;\n import org.apache.cassandra.io.util.FileDataInput;\n import org.apache.cassandra.io.util.FileUtils;\n@@ -335,10 +337,10 @@ public static SSTableReader openForBatch(Descriptor descriptor, Set<Component> c\n                                                   statsMetadata);\n \n         // special implementation of load to use non-pooled SegmentedFile builders\n-        SegmentedFile.Builder ibuilder = SegmentedFile.getBuilder(DatabaseDescriptor.getIndexAccessMode());\n+        SegmentedFile.Builder ibuilder = new BufferedSegmentedFile.Builder();\n         SegmentedFile.Builder dbuilder = sstable.compression\n-                                       ? SegmentedFile.getCompressedBuilder()\n-                                       : SegmentedFile.getBuilder(DatabaseDescriptor.getDiskAccessMode());\n+                                       ? new CompressedSegmentedFile.Builder()\n+                                       : new BufferedSegmentedFile.Builder();\n         if (!sstable.loadSummary(ibuilder, dbuilder))\n             sstable.buildSummary(false, ibuilder, dbuilder, false, Downsampling.BASE_SAMPLING_LEVEL);\n         sstable.ifile = ibuilder.complete(sstable.descriptor.filenameFor(Component.PRIMARY_INDEX));\n@@ -796,7 +798,7 @@ public boolean loadSummary(SegmentedFile.Builder ibuilder, SegmentedFile.Builder\n         }\n         catch (IOException e)\n         {\n-            logger.debug(\"Cannot deserialize SSTable {} Summary: {}\", toString(), e.getMessage());\n+            logger.debug(\"Cannot deserialize SSTable Summary File {}: {}\", summariesFile.getPath(), e.getMessage());\n             // corrupted; delete it and fall back to creating a new summary\n             FileUtils.closeQuietly(iStream);\n             // delete it and fall back to creating a new summary",
                "raw_url": "https://github.com/apache/cassandra/raw/6658a6e03cb4062036f84e78aba6fc3114499c80/src/java/org/apache/cassandra/io/sstable/SSTableReader.java",
                "sha": "e70fd60c2748125a91f0e37bb1b5589ce0168df4",
                "status": "modified"
            }
        ],
        "message": "Fix sstableloader NPE\n\npatch by benedict; reviewed by yukim for CASSANDRA7015",
        "parent": "https://github.com/apache/cassandra/commit/7232783bc5ab7134c1698d866ceb9cca330d0441",
        "patched_files": [
            "SSTableReader.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "SSTableReaderTest.java"
        ]
    },
    "cassandra_6ad62c3": {
        "bug_id": "cassandra_6ad62c3",
        "commit": "https://github.com/apache/cassandra/commit/6ad62c3f4a44ccbf1b462075610487e771e56f73",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/6ad62c3f4a44ccbf1b462075610487e771e56f73/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=6ad62c3f4a44ccbf1b462075610487e771e56f73",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -4,6 +4,7 @@\n  * Fix dateOf() function for pre-2.0 timestamp columns (CASSANDRA-5928)\n  * Fix SSTable unintentionally loads BF when opened for batch (CASSANDRA-5938)\n  * Add stream session progress to JMX (CASSANDRA-4757)\n+ * Fix NPE during CAS operation (CASSANDRA-5925)\n Merged from 1.2:\n  * Fix getBloomFilterDiskSpaceUsed for AlwaysPresentFilter (CASSANDRA-5900)\n  * Don't announce schema version until we've loaded the changes locally",
                "raw_url": "https://github.com/apache/cassandra/raw/6ad62c3f4a44ccbf1b462075610487e771e56f73/CHANGES.txt",
                "sha": "0cb223fb7488bf65e1ee06e4bbdef20cbb1b3d4f",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cassandra/blob/6ad62c3f4a44ccbf1b462075610487e771e56f73/src/java/org/apache/cassandra/cql3/statements/ModificationStatement.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/statements/ModificationStatement.java?ref=6ad62c3f4a44ccbf1b462075610487e771e56f73",
                "deletions": 3,
                "filename": "src/java/org/apache/cassandra/cql3/statements/ModificationStatement.java",
                "patch": "@@ -108,6 +108,8 @@ public void checkAccess(ClientState state) throws InvalidRequestException, Unaut\n \n     public void validate(ClientState state) throws InvalidRequestException\n     {\n+        if (hasConditions() && attrs.isTimestampSet())\n+            throw new InvalidRequestException(\"Custom timestamps are not allowed when conditions are used\");\n     }\n \n     public void addOperation(Operation op)\n@@ -370,13 +372,17 @@ public ResultMessage executeWithCondition(QueryState queryState, QueryOptions op\n             throw new InvalidRequestException(\"IN on the partition key is not supported with conditional updates\");\n \n         ColumnNameBuilder clusteringPrefix = createClusteringPrefixBuilder(variables);\n-        UpdateParameters params = new UpdateParameters(cfm, variables, getTimestamp(queryState.getTimestamp(), variables), getTimeToLive(variables), null);\n \n         ByteBuffer key = keys.get(0);\n         ThriftValidation.validateKey(cfm, key);\n \n-        ColumnFamily updates = updateForKey(key, clusteringPrefix, params);\n-        ColumnFamily expected = buildConditions(key, clusteringPrefix, params);\n+        UpdateParameters updParams = new UpdateParameters(cfm, variables, queryState.getTimestamp(), getTimeToLive(variables), null);\n+        ColumnFamily updates = updateForKey(key, clusteringPrefix, updParams);\n+\n+        // When building the conditions, we should not use the TTL. It's not useful, and if a very low ttl (1 seconds) is used, it's possible\n+        // for it to expire before actually build the conditions which would break since we would then test for the presence of tombstones.\n+        UpdateParameters condParams = new UpdateParameters(cfm, variables, queryState.getTimestamp(), 0, null);\n+        ColumnFamily expected = buildConditions(key, clusteringPrefix, condParams);\n \n         ColumnFamily result = StorageProxy.cas(keyspace(),\n                                                columnFamily(),",
                "raw_url": "https://github.com/apache/cassandra/raw/6ad62c3f4a44ccbf1b462075610487e771e56f73/src/java/org/apache/cassandra/cql3/statements/ModificationStatement.java",
                "sha": "93c4438d01ea32d07d2c3ce274e145f5787b263f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/6ad62c3f4a44ccbf1b462075610487e771e56f73/src/java/org/apache/cassandra/db/SystemKeyspace.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/SystemKeyspace.java?ref=6ad62c3f4a44ccbf1b462075610487e771e56f73",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/SystemKeyspace.java",
                "patch": "@@ -806,10 +806,11 @@ public static void savePaxosPromise(Commit promise)\n \n     public static void savePaxosProposal(Commit commit)\n     {\n-        processInternal(String.format(\"UPDATE %s USING TIMESTAMP %d AND TTL %d SET proposal = 0x%s WHERE row_key = 0x%s AND cf_id = %s\",\n+        processInternal(String.format(\"UPDATE %s USING TIMESTAMP %d AND TTL %d SET in_progress_ballot = %s, proposal = 0x%s WHERE row_key = 0x%s AND cf_id = %s\",\n                                       PAXOS_CF,\n                                       UUIDGen.microsTimestamp(commit.ballot),\n                                       paxosTtl(commit.update.metadata),\n+                                      commit.ballot,\n                                       ByteBufferUtil.bytesToHex(commit.update.toBytes()),\n                                       ByteBufferUtil.bytesToHex(commit.key),\n                                       commit.update.id()));",
                "raw_url": "https://github.com/apache/cassandra/raw/6ad62c3f4a44ccbf1b462075610487e771e56f73/src/java/org/apache/cassandra/db/SystemKeyspace.java",
                "sha": "5dd505f67cc760c9fe0caea2e51d47b7dd2f3487",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in cas operations\n\npatch by slebresne; reviewed by jbellis for CASSANDRA-5925",
        "parent": "https://github.com/apache/cassandra/commit/cf1de311224dce9c3db51db9dcbeae30bb22cfd0",
        "patched_files": [
            "SystemKeyspace.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "SystemKeyspaceTest.java"
        ]
    },
    "cassandra_6bad57f": {
        "bug_id": "cassandra_6bad57f",
        "commit": "https://github.com/apache/cassandra/commit/6bad57fc3cf967838a220d8402db37ed9a5b3b4e",
        "file": [
            {
                "additions": 51,
                "blob_url": "https://github.com/apache/cassandra/blob/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/src/java/org/apache/cassandra/gms/EndpointState.java",
                "changes": 76,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/gms/EndpointState.java?ref=6bad57fc3cf967838a220d8402db37ed9a5b3b4e",
                "deletions": 25,
                "filename": "src/java/org/apache/cassandra/gms/EndpointState.java",
                "patch": "@@ -18,7 +18,11 @@\n package org.apache.cassandra.gms;\n \n import java.io.*;\n+import java.util.Collections;\n+import java.util.EnumMap;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -27,8 +31,6 @@\n import org.apache.cassandra.io.IVersionedSerializer;\n import org.apache.cassandra.io.util.DataOutputPlus;\n \n-import org.cliffc.high_scale_lib.NonBlockingHashMap;\n-\n /**\n  * This abstraction represents both the HeartBeatState and the ApplicationState in an EndpointState\n  * instance. Any state for a given endpoint can be retrieved from this instance.\n@@ -42,15 +44,21 @@\n     public final static IVersionedSerializer<EndpointState> serializer = new EndpointStateSerializer();\n \n     private volatile HeartBeatState hbState;\n-    final Map<ApplicationState, VersionedValue> applicationState = new NonBlockingHashMap<ApplicationState, VersionedValue>();\n+    private final AtomicReference<Map<ApplicationState, VersionedValue>> applicationState;\n \n     /* fields below do not get serialized */\n     private volatile long updateTimestamp;\n     private volatile boolean isAlive;\n \n     EndpointState(HeartBeatState initialHbState)\n+    {\n+        this(initialHbState, new EnumMap<ApplicationState, VersionedValue>(ApplicationState.class));\n+    }\n+\n+    EndpointState(HeartBeatState initialHbState, Map<ApplicationState, VersionedValue> states)\n     {\n         hbState = initialHbState;\n+        applicationState = new AtomicReference<Map<ApplicationState, VersionedValue>>(new EnumMap<>(states));\n         updateTimestamp = System.nanoTime();\n         isAlive = true;\n     }\n@@ -68,21 +76,37 @@ void setHeartBeatState(HeartBeatState newHbState)\n \n     public VersionedValue getApplicationState(ApplicationState key)\n     {\n-        return applicationState.get(key);\n+        return applicationState.get().get(key);\n     }\n \n-    /**\n-     * TODO replace this with operations that don't expose private state\n-     */\n-    @Deprecated\n-    public Map<ApplicationState, VersionedValue> getApplicationStateMap()\n+    public Set<Map.Entry<ApplicationState, VersionedValue>> states()\n+    {\n+        return applicationState.get().entrySet();\n+    }\n+\n+    public void addApplicationState(ApplicationState key, VersionedValue value)\n     {\n-        return applicationState;\n+        addApplicationStates(Collections.singletonMap(key, value));\n     }\n \n-    void addApplicationState(ApplicationState key, VersionedValue value)\n+    public void addApplicationStates(Map<ApplicationState, VersionedValue> values)\n     {\n-        applicationState.put(key, value);\n+        addApplicationStates(values.entrySet());\n+    }\n+\n+    public void addApplicationStates(Set<Map.Entry<ApplicationState, VersionedValue>> values)\n+    {\n+        while (true)\n+        {\n+            Map<ApplicationState, VersionedValue> orig = applicationState.get();\n+            Map<ApplicationState, VersionedValue> copy = new EnumMap<>(orig);\n+\n+            for (Map.Entry<ApplicationState, VersionedValue> value : values)\n+                copy.put(value.getKey(), value.getValue());\n+\n+            if (applicationState.compareAndSet(orig, copy))\n+                return;\n+        }\n     }\n \n     /* getters and setters */\n@@ -116,7 +140,7 @@ void markDead()\n \n     public String toString()\n     {\n-        return \"EndpointState: HeartBeatState = \" + hbState + \", AppStateMap = \" + applicationState;\n+        return \"EndpointState: HeartBeatState = \" + hbState + \", AppStateMap = \" + applicationState.get();\n     }\n }\n \n@@ -129,39 +153,41 @@ public void serialize(EndpointState epState, DataOutputPlus out, int version) th\n         HeartBeatState.serializer.serialize(hbState, out, version);\n \n         /* serialize the map of ApplicationState objects */\n-        int size = epState.applicationState.size();\n-        out.writeInt(size);\n-        for (Map.Entry<ApplicationState, VersionedValue> entry : epState.applicationState.entrySet())\n+        Set<Map.Entry<ApplicationState, VersionedValue>> states = epState.states();\n+        out.writeInt(states.size());\n+        for (Map.Entry<ApplicationState, VersionedValue> state : states)\n         {\n-            VersionedValue value = entry.getValue();\n-            out.writeInt(entry.getKey().ordinal());\n+            VersionedValue value = state.getValue();\n+            out.writeInt(state.getKey().ordinal());\n             VersionedValue.serializer.serialize(value, out, version);\n         }\n     }\n \n     public EndpointState deserialize(DataInput in, int version) throws IOException\n     {\n         HeartBeatState hbState = HeartBeatState.serializer.deserialize(in, version);\n-        EndpointState epState = new EndpointState(hbState);\n \n         int appStateSize = in.readInt();\n+        Map<ApplicationState, VersionedValue> states = new EnumMap<>(ApplicationState.class);\n         for (int i = 0; i < appStateSize; ++i)\n         {\n             int key = in.readInt();\n             VersionedValue value = VersionedValue.serializer.deserialize(in, version);\n-            epState.addApplicationState(Gossiper.STATES[key], value);\n+            states.put(Gossiper.STATES[key], value);\n         }\n-        return epState;\n+\n+        return new EndpointState(hbState, states);\n     }\n \n     public long serializedSize(EndpointState epState, int version)\n     {\n         long size = HeartBeatState.serializer.serializedSize(epState.getHeartBeatState(), version);\n-        size += TypeSizes.NATIVE.sizeof(epState.applicationState.size());\n-        for (Map.Entry<ApplicationState, VersionedValue> entry : epState.applicationState.entrySet())\n+        Set<Map.Entry<ApplicationState, VersionedValue>> states = epState.states();\n+        size += TypeSizes.NATIVE.sizeof(states.size());\n+        for (Map.Entry<ApplicationState, VersionedValue> state : states)\n         {\n-            VersionedValue value = entry.getValue();\n-            size += TypeSizes.NATIVE.sizeof(entry.getKey().ordinal());\n+            VersionedValue value = state.getValue();\n+            size += TypeSizes.NATIVE.sizeof(state.getKey().ordinal());\n             size += VersionedValue.serializer.serializedSize(value, version);\n         }\n         return size;",
                "raw_url": "https://github.com/apache/cassandra/raw/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/src/java/org/apache/cassandra/gms/EndpointState.java",
                "sha": "3e2929556a290916ae4bd817c3a77688a05c04a4",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/src/java/org/apache/cassandra/gms/FailureDetector.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/gms/FailureDetector.java?ref=6bad57fc3cf967838a220d8402db37ed9a5b3b4e",
                "deletions": 3,
                "filename": "src/java/org/apache/cassandra/gms/FailureDetector.java",
                "patch": "@@ -160,15 +160,16 @@ private void appendEndpointState(StringBuilder sb, EndpointState endpointState)\n     {\n         sb.append(\"  generation:\").append(endpointState.getHeartBeatState().getGeneration()).append(\"\\n\");\n         sb.append(\"  heartbeat:\").append(endpointState.getHeartBeatState().getHeartBeatVersion()).append(\"\\n\");\n-        for (Map.Entry<ApplicationState, VersionedValue> state : endpointState.applicationState.entrySet())\n+        for (Map.Entry<ApplicationState, VersionedValue> state : endpointState.states())\n         {\n             if (state.getKey() == ApplicationState.TOKENS)\n                 continue;\n             sb.append(\"  \").append(state.getKey()).append(\":\").append(state.getValue().version).append(\":\").append(state.getValue().value).append(\"\\n\");\n         }\n-        if (endpointState.applicationState.containsKey(ApplicationState.TOKENS))\n+        VersionedValue tokens = endpointState.getApplicationState(ApplicationState.TOKENS);\n+        if (tokens != null)\n         {\n-            sb.append(\"  TOKENS:\").append(endpointState.applicationState.get(ApplicationState.TOKENS).version).append(\":<hidden>\\n\");\n+            sb.append(\"  TOKENS:\").append(tokens.version).append(\":<hidden>\\n\");\n         }\n         else\n         {",
                "raw_url": "https://github.com/apache/cassandra/raw/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/src/java/org/apache/cassandra/gms/FailureDetector.java",
                "sha": "b2fe9d356b0062f0f0692708876060ad6ca6dd87",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/cassandra/blob/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/src/java/org/apache/cassandra/gms/Gossiper.java",
                "changes": 47,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/gms/Gossiper.java?ref=6bad57fc3cf967838a220d8402db37ed9a5b3b4e",
                "deletions": 23,
                "filename": "src/java/org/apache/cassandra/gms/Gossiper.java",
                "patch": "@@ -224,7 +224,8 @@ public boolean seenAnySeed()\n                 return true;\n             try\n             {\n-                if (entry.getValue().getApplicationStateMap().containsKey(ApplicationState.INTERNAL_IP) && seeds.contains(InetAddress.getByName(entry.getValue().getApplicationState(ApplicationState.INTERNAL_IP).value)))\n+                VersionedValue internalIp = entry.getValue().getApplicationState(ApplicationState.INTERNAL_IP);\n+                if (internalIp != null && seeds.contains(InetAddress.getByName(internalIp.value)))\n                     return true;\n             }\n             catch (UnknownHostException e)\n@@ -371,8 +372,8 @@ protected void markAsShutdown(InetAddress endpoint)\n     int getMaxEndpointStateVersion(EndpointState epState)\n     {\n         int maxVersion = epState.getHeartBeatState().getHeartBeatVersion();\n-        for (VersionedValue value : epState.getApplicationStateMap().values())\n-            maxVersion = Math.max(maxVersion, value.version);\n+        for (Map.Entry<ApplicationState, VersionedValue> state : epState.states())\n+            maxVersion = Math.max(maxVersion, state.getValue().version);\n         return maxVersion;\n     }\n \n@@ -525,8 +526,10 @@ public void advertiseRemoving(InetAddress endpoint, UUID hostId, UUID localHostI\n         logger.info(\"Advertising removal for {}\", endpoint);\n         epState.updateTimestamp(); // make sure we don't evict it too soon\n         epState.getHeartBeatState().forceNewerGenerationUnsafe();\n-        epState.addApplicationState(ApplicationState.STATUS, StorageService.instance.valueFactory.removingNonlocal(hostId));\n-        epState.addApplicationState(ApplicationState.REMOVAL_COORDINATOR, StorageService.instance.valueFactory.removalCoordinator(localHostId));\n+        Map<ApplicationState, VersionedValue> states = new EnumMap<>(ApplicationState.class);\n+        states.put(ApplicationState.STATUS, StorageService.instance.valueFactory.removingNonlocal(hostId));\n+        states.put(ApplicationState.REMOVAL_COORDINATOR, StorageService.instance.valueFactory.removalCoordinator(localHostId));\n+        epState.addApplicationStates(states);\n         endpointStateMap.put(endpoint, epState);\n     }\n \n@@ -867,7 +870,8 @@ EndpointState getStateForVersionBiggerThan(InetAddress forEndpoint, int version)\n                     logger.trace(\"local heartbeat version \" + localHbVersion + \" greater than \" + version + \" for \" + forEndpoint);\n             }\n             /* Accumulate all application states whose versions are greater than \"version\" variable */\n-            for (Entry<ApplicationState, VersionedValue> entry : epState.getApplicationStateMap().entrySet())\n+            Map<ApplicationState, VersionedValue> states = new EnumMap<>(ApplicationState.class);\n+            for (Entry<ApplicationState, VersionedValue> entry : epState.states())\n             {\n                 VersionedValue value = entry.getValue();\n                 if (value.version > version)\n@@ -879,9 +883,11 @@ EndpointState getStateForVersionBiggerThan(InetAddress forEndpoint, int version)\n                     final ApplicationState key = entry.getKey();\n                     if (logger.isTraceEnabled())\n                         logger.trace(\"Adding state \" + key + \": \" + value.value);\n-                    reqdEndpointState.addApplicationState(key, value);\n+\n+                    states.put(key, value);\n                 }\n             }\n+            reqdEndpointState.addApplicationStates(states);\n         }\n         return reqdEndpointState;\n     }\n@@ -1153,19 +1159,13 @@ private void applyNewStates(InetAddress addr, EndpointState localState, Endpoint\n         localState.setHeartBeatState(remoteState.getHeartBeatState());\n         if (logger.isTraceEnabled())\n             logger.trace(\"Updating heartbeat state version to \" + localState.getHeartBeatState().getHeartBeatVersion() + \" from \" + oldVersion + \" for \" + addr + \" ...\");\n-        // we need to make two loops here, one to apply, then another to notify, this way all states in an update are present and current when the notifications are received\n-        for (Entry<ApplicationState, VersionedValue> remoteEntry : remoteState.getApplicationStateMap().entrySet())\n-        {\n-            ApplicationState remoteKey = remoteEntry.getKey();\n-            VersionedValue remoteValue = remoteEntry.getValue();\n \n-            assert remoteState.getHeartBeatState().getGeneration() == localState.getHeartBeatState().getGeneration();\n-            localState.addApplicationState(remoteKey, remoteValue);\n-        }\n-        for (Entry<ApplicationState, VersionedValue> remoteEntry : remoteState.getApplicationStateMap().entrySet())\n-        {\n+        Set<Entry<ApplicationState, VersionedValue>> remoteStates = remoteState.states();\n+        assert remoteState.getHeartBeatState().getGeneration() == localState.getHeartBeatState().getGeneration();\n+        localState.addApplicationStates(remoteStates);\n+\n+        for (Entry<ApplicationState, VersionedValue> remoteEntry : remoteStates)\n             doOnChangeNotifications(addr, remoteEntry.getKey(), remoteEntry.getValue());\n-        }\n     }\n     \n     // notify that a local application state is going to change (doesn't get triggered for remote changes)\n@@ -1279,7 +1279,7 @@ else if (maxRemoteVersion < maxLocalVersion)\n \n     public void start(int generationNumber)\n     {\n-        start(generationNumber, new HashMap<ApplicationState, VersionedValue>());\n+        start(generationNumber, new EnumMap<ApplicationState, VersionedValue>(ApplicationState.class));\n     }\n \n     /**\n@@ -1291,8 +1291,7 @@ public void start(int generationNbr, Map<ApplicationState, VersionedValue> prelo\n         /* initialize the heartbeat state for this localEndpoint */\n         maybeInitializeLocalState(generationNbr);\n         EndpointState localState = endpointStateMap.get(FBUtilities.getBroadcastAddress());\n-        for (Map.Entry<ApplicationState, VersionedValue> entry : preloadLocalStates.entrySet())\n-            localState.addApplicationState(entry.getKey(), entry.getValue());\n+        localState.addApplicationStates(preloadLocalStates);\n \n         //notify snitches that Gossiper is about to start\n         DatabaseDescriptor.getEndpointSnitch().gossiperStarting();\n@@ -1481,8 +1480,10 @@ public void initializeNodeUnsafe(InetAddress addr, UUID uuid, int generationNbr)\n         EndpointState localState = oldState == null ? newState : oldState;\n \n         // always add the version state\n-        localState.addApplicationState(ApplicationState.NET_VERSION, StorageService.instance.valueFactory.networkVersion());\n-        localState.addApplicationState(ApplicationState.HOST_ID, StorageService.instance.valueFactory.hostId(uuid));\n+        Map<ApplicationState, VersionedValue> states = new EnumMap<>(ApplicationState.class);\n+        states.put(ApplicationState.NET_VERSION, StorageService.instance.valueFactory.networkVersion());\n+        states.put(ApplicationState.HOST_ID, StorageService.instance.valueFactory.hostId(uuid));\n+        localState.addApplicationStates(states);\n     }\n \n     @VisibleForTesting",
                "raw_url": "https://github.com/apache/cassandra/raw/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/src/java/org/apache/cassandra/gms/Gossiper.java",
                "sha": "e9ebb6f73e20279e7dc2d8d443a8a2fbc5ca37e5",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cassandra/blob/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/src/java/org/apache/cassandra/gms/VersionedValue.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/gms/VersionedValue.java?ref=6bad57fc3cf967838a220d8402db37ed9a5b3b4e",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/gms/VersionedValue.java",
                "patch": "@@ -105,6 +105,11 @@ public String toString()\n         return \"Value(\" + value + \",\" + version + \")\";\n     }\n \n+    public byte[] toBytes()\n+    {\n+        return value.getBytes(ISO_8859_1);\n+    }\n+\n     private static String versionString(String... args)\n     {\n         return StringUtils.join(args, VersionedValue.DELIMITER);",
                "raw_url": "https://github.com/apache/cassandra/raw/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/src/java/org/apache/cassandra/gms/VersionedValue.java",
                "sha": "810a668c7ddf917461e7992b0f58c1350d948781",
                "status": "modified"
            },
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/cassandra/blob/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/src/java/org/apache/cassandra/service/StorageService.java",
                "changes": 65,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=6bad57fc3cf967838a220d8402db37ed9a5b3b4e",
                "deletions": 34,
                "filename": "src/java/org/apache/cassandra/service/StorageService.java",
                "patch": "@@ -31,6 +31,7 @@\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.EnumMap;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n@@ -518,9 +519,10 @@ public void stopDaemon()\n         hostId = Gossiper.instance.getHostId(DatabaseDescriptor.getReplaceAddress());\n         try\n         {\n-            if (Gossiper.instance.getEndpointStateForEndpoint(DatabaseDescriptor.getReplaceAddress()).getApplicationState(ApplicationState.TOKENS) == null)\n+            VersionedValue tokensVersionedValue = Gossiper.instance.getEndpointStateForEndpoint(DatabaseDescriptor.getReplaceAddress()).getApplicationState(ApplicationState.TOKENS);\n+            if (tokensVersionedValue == null)\n                 throw new RuntimeException(\"Could not find tokens for \" + DatabaseDescriptor.getReplaceAddress() + \" to replace\");\n-            Collection<Token> tokens = TokenSerializer.deserialize(getPartitioner(), new DataInputStream(new ByteArrayInputStream(getApplicationStateValue(DatabaseDescriptor.getReplaceAddress(), ApplicationState.TOKENS))));\n+            Collection<Token> tokens = TokenSerializer.deserialize(getPartitioner(), new DataInputStream(new ByteArrayInputStream(tokensVersionedValue.toBytes())));\n \n             SystemKeyspace.setLocalHostId(hostId); // use the replacee's host Id as our own so we receive hints, etc\n             Gossiper.instance.resetEndpointStateMap(); // clean up since we have what we need\n@@ -767,7 +769,7 @@ private void prepareToJoin() throws ConfigurationException\n     {\n         if (!joined)\n         {\n-            Map<ApplicationState, VersionedValue> appStates = new HashMap<>();\n+            Map<ApplicationState, VersionedValue> appStates = new EnumMap<>(ApplicationState.class);\n \n             if (DatabaseDescriptor.isReplacing() && !(Boolean.parseBoolean(System.getProperty(\"cassandra.join_ring\", \"true\"))))\n                 throw new ConfigurationException(\"Cannot set both join_ring=false and attempt to replace a node\");\n@@ -1506,8 +1508,10 @@ public void onChange(InetAddress endpoint, ApplicationState state, VersionedValu\n                     handleStateBootstrap(endpoint);\n                     break;\n                 case VersionedValue.STATUS_NORMAL:\n+                    handleStateNormal(endpoint, VersionedValue.STATUS_NORMAL);\n+                    break;\n                 case VersionedValue.SHUTDOWN:\n-                    handleStateNormal(endpoint);\n+                    handleStateNormal(endpoint, VersionedValue.SHUTDOWN);\n                     break;\n                 case VersionedValue.REMOVING_TOKEN:\n                 case VersionedValue.REMOVED_TOKEN:\n@@ -1586,7 +1590,7 @@ public void updateTopology()\n     private void updatePeerInfo(InetAddress endpoint)\n     {\n         EndpointState epState = Gossiper.instance.getEndpointStateForEndpoint(endpoint);\n-        for (Map.Entry<ApplicationState, VersionedValue> entry : epState.getApplicationStateMap().entrySet())\n+        for (Map.Entry<ApplicationState, VersionedValue> entry : epState.states())\n         {\n             switch (entry.getKey())\n             {\n@@ -1619,17 +1623,19 @@ private void updatePeerInfo(InetAddress endpoint)\n         }\n     }\n \n-    private byte[] getApplicationStateValue(InetAddress endpoint, ApplicationState appstate)\n-    {\n-        String vvalue = Gossiper.instance.getEndpointStateForEndpoint(endpoint).getApplicationState(appstate).value;\n-        return vvalue.getBytes(ISO_8859_1);\n-    }\n-\n     private Collection<Token> getTokensFor(InetAddress endpoint)\n     {\n         try\n         {\n-            return TokenSerializer.deserialize(getPartitioner(), new DataInputStream(new ByteArrayInputStream(getApplicationStateValue(endpoint, ApplicationState.TOKENS))));\n+            EndpointState state = Gossiper.instance.getEndpointStateForEndpoint(endpoint);\n+            if (state == null)\n+                return Collections.emptyList();\n+\n+            VersionedValue versionedValue = state.getApplicationState(ApplicationState.TOKENS);\n+            if (versionedValue == null)\n+                return Collections.emptyList();\n+\n+            return TokenSerializer.deserialize(getPartitioner(), new DataInputStream(new ByteArrayInputStream(versionedValue.toBytes())));\n         }\n         catch (IOException e)\n         {\n@@ -1679,22 +1685,23 @@ private void handleStateBootstrap(InetAddress endpoint)\n      *\n      * @param endpoint node\n      */\n-    private void handleStateNormal(final InetAddress endpoint)\n+    private void handleStateNormal(final InetAddress endpoint, final String status)\n     {\n-        Collection<Token> tokens;\n-\n-        tokens = getTokensFor(endpoint);\n-\n+        Collection<Token> tokens = getTokensFor(endpoint);\n         Set<Token> tokensToUpdateInMetadata = new HashSet<>();\n         Set<Token> tokensToUpdateInSystemKeyspace = new HashSet<>();\n         Set<InetAddress> endpointsToRemove = new HashSet<>();\n \n-\n         if (logger.isDebugEnabled())\n-            logger.debug(\"Node {} state normal, token {}\", endpoint, tokens);\n+            logger.debug(\"Node {} state {}, token {}\", endpoint, status, tokens);\n \n         if (tokenMetadata.isMember(endpoint))\n-            logger.info(\"Node {} state jump to normal\", endpoint);\n+            logger.info(\"Node {} state jump to {}\", endpoint, status);\n+\n+        if (tokens.isEmpty() && status.equals(VersionedValue.STATUS_NORMAL))\n+            logger.error(\"Node {} is in state normal but it has no tokens, state: {}\",\n+                         endpoint,\n+                         Gossiper.instance.getEndpointStateForEndpoint(endpoint));\n \n         updatePeerInfo(endpoint);\n         // Order Matters, TM.updateHostID() should be called before TM.updateNormalToken(), (see CASSANDRA-4300).\n@@ -1820,8 +1827,7 @@ else if (Gossiper.instance.compareEndpointStartup(endpoint, currentOwner) > 0)\n      */\n     private void handleStateLeaving(InetAddress endpoint)\n     {\n-        Collection<Token> tokens;\n-        tokens = getTokensFor(endpoint);\n+        Collection<Token> tokens = getTokensFor(endpoint);\n \n         if (logger.isDebugEnabled())\n             logger.debug(\"Node {} state leaving, tokens {}\", endpoint, tokens);\n@@ -1855,16 +1861,7 @@ else if (!tokenMetadata.getTokens(endpoint).containsAll(tokens))\n     private void handleStateLeft(InetAddress endpoint, String[] pieces)\n     {\n         assert pieces.length >= 2;\n-        Collection<Token> tokens = null;\n-        try\n-        {\n-            tokens = getTokensFor(endpoint);\n-        }\n-        catch (Throwable th)\n-        {\n-            JVMStabilityInspector.inspectThrowable(th);\n-            logger.warn(\"Unable to calculate tokens for {}.\", endpoint);\n-        }\n+        Collection<Token> tokens = getTokensFor(endpoint);\n \n         if (logger.isDebugEnabled())\n             logger.debug(\"Node {} state left, tokens {}\", endpoint, tokens);\n@@ -1953,7 +1950,7 @@ private void excise(Collection<Token> tokens, InetAddress endpoint)\n         HintedHandOffManager.instance.deleteHintsForEndpoint(endpoint);\n         removeEndpoint(endpoint);\n         tokenMetadata.removeEndpoint(endpoint);\n-        if (tokens != null)\n+        if (!tokens.isEmpty())\n             tokenMetadata.removeBootstrapTokens(tokens);\n \n         if (!isClientMode)\n@@ -2162,7 +2159,7 @@ public void onFailure(Throwable t)\n \n     public void onJoin(InetAddress endpoint, EndpointState epState)\n     {\n-        for (Map.Entry<ApplicationState, VersionedValue> entry : epState.getApplicationStateMap().entrySet())\n+        for (Map.Entry<ApplicationState, VersionedValue> entry : epState.states())\n         {\n             onChange(endpoint, entry.getKey(), entry.getValue());\n         }",
                "raw_url": "https://github.com/apache/cassandra/raw/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/src/java/org/apache/cassandra/service/StorageService.java",
                "sha": "93b1b976f8479ec60f614985b9ca683e590b6510",
                "status": "modified"
            },
            {
                "additions": 159,
                "blob_url": "https://github.com/apache/cassandra/blob/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/test/unit/org/apache/cassandra/gms/EndpointStateTest.java",
                "changes": 159,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/gms/EndpointStateTest.java?ref=6bad57fc3cf967838a220d8402db37ed9a5b3b4e",
                "deletions": 0,
                "filename": "test/unit/org/apache/cassandra/gms/EndpointStateTest.java",
                "patch": "@@ -0,0 +1,159 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.cassandra.gms;\n+\n+import java.util.Collections;\n+import java.util.EnumMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.junit.Test;\n+\n+import org.apache.cassandra.config.DatabaseDescriptor;\n+import org.apache.cassandra.dht.Token;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class EndpointStateTest\n+{\n+    public volatile VersionedValue.VersionedValueFactory valueFactory =\n+        new VersionedValue.VersionedValueFactory(DatabaseDescriptor.getPartitioner());\n+\n+    @Test\n+    public void testMultiThreadedReadConsistency() throws InterruptedException\n+    {\n+        for (int i = 0; i < 500; i++)\n+            innerTestMultiThreadedReadConsistency();\n+    }\n+\n+    /**\n+     * Test that a thread reading values whilst they are updated by another thread will\n+     * not see an entry unless it sees the entry previously added as well, even though\n+     * we are accessing the map via an iterator backed by the underlying map. This\n+     * works because EndpointState copies the map each time values are added.\n+     */\n+    private void innerTestMultiThreadedReadConsistency() throws InterruptedException\n+    {\n+        final Token token = DatabaseDescriptor.getPartitioner().getRandomToken();\n+        final List<Token> tokens = Collections.singletonList(token);\n+        final HeartBeatState hb = new HeartBeatState(0);\n+        final EndpointState state = new EndpointState(hb);\n+        final AtomicInteger numFailures = new AtomicInteger();\n+\n+        Thread t1 = new Thread(new Runnable()\n+        {\n+            public void run()\n+            {\n+                state.addApplicationState(ApplicationState.TOKENS, valueFactory.tokens(tokens));\n+                state.addApplicationState(ApplicationState.STATUS, valueFactory.normal(tokens));\n+            }\n+        });\n+\n+        Thread t2 = new Thread(new Runnable()\n+        {\n+            public void run()\n+            {\n+                for (int i = 0; i < 50; i++)\n+                {\n+                    Map<ApplicationState, VersionedValue> values = new EnumMap<>(ApplicationState.class);\n+                    for (Map.Entry<ApplicationState, VersionedValue> entry : state.states())\n+                        values.put(entry.getKey(), entry.getValue());\n+\n+                    if (values.containsKey(ApplicationState.STATUS) && !values.containsKey(ApplicationState.TOKENS))\n+                    {\n+                        numFailures.incrementAndGet();\n+                        System.out.println(String.format(\"Failed: %s\", values));\n+                    }\n+                }\n+            }\n+        });\n+\n+        t1.start();\n+        t2.start();\n+\n+        t1.join();\n+        t2.join();\n+\n+        assertTrue(numFailures.get() == 0);\n+    }\n+\n+    @Test\n+    public void testMultiThreadWriteConsistency() throws InterruptedException\n+    {\n+        for (int i = 0; i < 500; i++)\n+            innerTestMultiThreadWriteConsistency();\n+    }\n+\n+    /**\n+     * Test that two threads can update the state map concurrently.\n+     */\n+    private void innerTestMultiThreadWriteConsistency() throws InterruptedException\n+    {\n+        final Token token = DatabaseDescriptor.getPartitioner().getRandomToken();\n+        final List<Token> tokens = Collections.singletonList(token);\n+        final String ip = \"127.0.0.1\";\n+        final UUID hostId = UUID.randomUUID();\n+        final HeartBeatState hb = new HeartBeatState(0);\n+        final EndpointState state = new EndpointState(hb);\n+\n+        Thread t1 = new Thread(new Runnable()\n+        {\n+            public void run()\n+            {\n+                Map<ApplicationState, VersionedValue> states = new EnumMap<>(ApplicationState.class);\n+                states.put(ApplicationState.TOKENS, valueFactory.tokens(tokens));\n+                states.put(ApplicationState.STATUS, valueFactory.normal(tokens));\n+                state.addApplicationStates(states);\n+            }\n+        });\n+\n+        Thread t2 = new Thread(new Runnable()\n+        {\n+            public void run()\n+            {\n+                Map<ApplicationState, VersionedValue> states = new EnumMap<>(ApplicationState.class);\n+                states.put(ApplicationState.INTERNAL_IP, valueFactory.internalIP(ip));\n+                states.put(ApplicationState.HOST_ID, valueFactory.hostId(hostId));\n+                state.addApplicationStates(states);\n+            }\n+        });\n+\n+        t1.start();\n+        t2.start();\n+\n+        t1.join();\n+        t2.join();\n+\n+        Set<Map.Entry<ApplicationState, VersionedValue>> states = state.states();\n+        assertEquals(4, states.size());\n+\n+        Map<ApplicationState, VersionedValue> values = new EnumMap<>(ApplicationState.class);\n+        for (Map.Entry<ApplicationState, VersionedValue> entry : states)\n+            values.put(entry.getKey(), entry.getValue());\n+\n+        assertTrue(values.containsKey(ApplicationState.STATUS));\n+        assertTrue(values.containsKey(ApplicationState.TOKENS));\n+        assertTrue(values.containsKey(ApplicationState.INTERNAL_IP));\n+        assertTrue(values.containsKey(ApplicationState.HOST_ID));\n+    }\n+}",
                "raw_url": "https://github.com/apache/cassandra/raw/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/test/unit/org/apache/cassandra/gms/EndpointStateTest.java",
                "sha": "b06c4351052e05c95ed4ebc13cbc00c7766052b3",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/test/unit/org/apache/cassandra/locator/CloudstackSnitchTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/locator/CloudstackSnitchTest.java?ref=6bad57fc3cf967838a220d8402db37ed9a5b3b4e",
                "deletions": 5,
                "filename": "test/unit/org/apache/cassandra/locator/CloudstackSnitchTest.java",
                "patch": "@@ -19,11 +19,10 @@\n \n import java.io.IOException;\n import java.net.InetAddress;\n-import java.net.UnknownHostException;\n+import java.util.EnumMap;\n import java.util.Map;\n \n import org.junit.AfterClass;\n-import org.junit.Assert;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n@@ -32,8 +31,6 @@\n import org.apache.cassandra.gms.ApplicationState;\n import org.apache.cassandra.gms.Gossiper;\n import org.apache.cassandra.gms.VersionedValue;\n-import org.apache.cassandra.net.MessagingService;\n-import org.apache.cassandra.net.OutboundTcpConnectionPool;\n import org.apache.cassandra.service.StorageService;\n import org.apache.cassandra.db.Keyspace;\n \n@@ -81,9 +78,10 @@ public void testRacks() throws IOException, ConfigurationException\n         InetAddress nonlocal = InetAddress.getByName(\"127.0.0.7\");\n \n         Gossiper.instance.addSavedEndpoint(nonlocal);\n-        Map<ApplicationState,VersionedValue> stateMap = Gossiper.instance.getEndpointStateForEndpoint(nonlocal).getApplicationStateMap();\n+        Map<ApplicationState, VersionedValue> stateMap = new EnumMap<>(ApplicationState.class);\n         stateMap.put(ApplicationState.DC, StorageService.instance.valueFactory.datacenter(\"ch-zrh\"));\n         stateMap.put(ApplicationState.RACK, StorageService.instance.valueFactory.rack(\"2\"));\n+        Gossiper.instance.getEndpointStateForEndpoint(nonlocal).addApplicationStates(stateMap);\n \n         assertEquals(\"ch-zrh\", snitch.getDatacenter(nonlocal));\n         assertEquals(\"2\", snitch.getRack(nonlocal));",
                "raw_url": "https://github.com/apache/cassandra/raw/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/test/unit/org/apache/cassandra/locator/CloudstackSnitchTest.java",
                "sha": "90e63e0caf8d0d12337d83db5e0b177064895611",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/test/unit/org/apache/cassandra/locator/EC2SnitchTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/locator/EC2SnitchTest.java?ref=6bad57fc3cf967838a220d8402db37ed9a5b3b4e",
                "deletions": 1,
                "filename": "test/unit/org/apache/cassandra/locator/EC2SnitchTest.java",
                "patch": "@@ -24,6 +24,7 @@\n import java.io.IOException;\n import java.net.InetAddress;\n import java.net.UnknownHostException;\n+import java.util.EnumMap;\n import java.util.Map;\n \n import org.junit.AfterClass;\n@@ -79,9 +80,10 @@ public void testRac() throws IOException, ConfigurationException\n         InetAddress nonlocal = InetAddress.getByName(\"127.0.0.7\");\n \n         Gossiper.instance.addSavedEndpoint(nonlocal);\n-        Map<ApplicationState,VersionedValue> stateMap = Gossiper.instance.getEndpointStateForEndpoint(nonlocal).getApplicationStateMap();\n+        Map<ApplicationState, VersionedValue> stateMap = new EnumMap<>(ApplicationState.class);\n         stateMap.put(ApplicationState.DC, StorageService.instance.valueFactory.datacenter(\"us-west\"));\n         stateMap.put(ApplicationState.RACK, StorageService.instance.valueFactory.datacenter(\"1a\"));\n+        Gossiper.instance.getEndpointStateForEndpoint(nonlocal).addApplicationStates(stateMap);\n \n         assertEquals(\"us-west\", snitch.getDatacenter(nonlocal));\n         assertEquals(\"1a\", snitch.getRack(nonlocal));",
                "raw_url": "https://github.com/apache/cassandra/raw/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/test/unit/org/apache/cassandra/locator/EC2SnitchTest.java",
                "sha": "56bbb775e5ee4fd7e519ed0e634802ae74166a14",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/test/unit/org/apache/cassandra/locator/GoogleCloudSnitchTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/locator/GoogleCloudSnitchTest.java?ref=6bad57fc3cf967838a220d8402db37ed9a5b3b4e",
                "deletions": 5,
                "filename": "test/unit/org/apache/cassandra/locator/GoogleCloudSnitchTest.java",
                "patch": "@@ -23,11 +23,10 @@\n \n import java.io.IOException;\n import java.net.InetAddress;\n-import java.net.UnknownHostException;\n+import java.util.EnumMap;\n import java.util.Map;\n \n import org.junit.AfterClass;\n-import org.junit.Assert;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n@@ -37,8 +36,6 @@\n import org.apache.cassandra.gms.ApplicationState;\n import org.apache.cassandra.gms.Gossiper;\n import org.apache.cassandra.gms.VersionedValue;\n-import org.apache.cassandra.net.MessagingService;\n-import org.apache.cassandra.net.OutboundTcpConnectionPool;\n import org.apache.cassandra.service.StorageService;\n \n import static org.junit.Assert.assertEquals;\n@@ -79,9 +76,10 @@ public void testRac() throws IOException, ConfigurationException\n         InetAddress nonlocal = InetAddress.getByName(\"127.0.0.7\");\n \n         Gossiper.instance.addSavedEndpoint(nonlocal);\n-        Map<ApplicationState,VersionedValue> stateMap = Gossiper.instance.getEndpointStateForEndpoint(nonlocal).getApplicationStateMap();\n+        Map<ApplicationState, VersionedValue> stateMap = new EnumMap<>(ApplicationState.class);\n         stateMap.put(ApplicationState.DC, StorageService.instance.valueFactory.datacenter(\"europe-west1\"));\n         stateMap.put(ApplicationState.RACK, StorageService.instance.valueFactory.datacenter(\"a\"));\n+        Gossiper.instance.getEndpointStateForEndpoint(nonlocal).addApplicationStates(stateMap);\n \n         assertEquals(\"europe-west1\", snitch.getDatacenter(nonlocal));\n         assertEquals(\"a\", snitch.getRack(nonlocal));",
                "raw_url": "https://github.com/apache/cassandra/raw/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/test/unit/org/apache/cassandra/locator/GoogleCloudSnitchTest.java",
                "sha": "1521454ecefca779a00e3bea528ff4e148f4157e",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in Gossip handleStateNormal\n\nPatch by stefania; reviewed by jknighton for CASSANDRA-10089",
        "parent": "https://github.com/apache/cassandra/commit/3674ad9dab8f29173d7d4ee82488a8e9ea586240",
        "patched_files": [
            "FailureDetector.java",
            "Gossiper.java",
            "EndpointState.java",
            "GoogleCloudSnitch.java",
            "VersionedValue.java",
            "StorageService.java",
            "CloudstackSnitch.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "CloudstackSnitchTest.java",
            "GoogleCloudSnitchTest.java",
            "EC2SnitchTest.java",
            "EndpointStateTest.java"
        ]
    },
    "cassandra_6e1f3a0": {
        "bug_id": "cassandra_6e1f3a0",
        "commit": "https://github.com/apache/cassandra/commit/6e1f3a0195b777c9ae79ab89230b67ca20c1adc4",
        "file": [
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/cassandra/blob/6e1f3a0195b777c9ae79ab89230b67ca20c1adc4/src/java/org/apache/cassandra/db/Directories.java",
                "changes": 55,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/Directories.java?ref=6e1f3a0195b777c9ae79ab89230b67ca20c1adc4",
                "deletions": 19,
                "filename": "src/java/org/apache/cassandra/db/Directories.java",
                "patch": "@@ -31,7 +31,6 @@\n import org.apache.cassandra.config.*;\n import org.apache.cassandra.db.compaction.LeveledManifest;\n import org.apache.cassandra.io.util.FileUtils;\n-import org.apache.cassandra.io.util.MmappedSegmentedFile;\n import org.apache.cassandra.io.sstable.*;\n import org.apache.cassandra.service.StorageService;\n import org.apache.cassandra.utils.CLibrary;\n@@ -479,16 +478,24 @@ public static void migrateSSTables()\n             if (!location.exists() || !location.isDirectory())\n                 continue;\n \n-            for (File ksDir : location.listFiles())\n+            File[] ksDirs = location.listFiles();\n+            if (ksDirs != null)\n             {\n-                if (!ksDir.isDirectory())\n-                    continue;\n+                for (File ksDir : ksDirs)\n+                {\n+                    if (!ksDir.isDirectory())\n+                        continue;\n \n-                for (File file : ksDir.listFiles())\n-                    migrateFile(file, ksDir, null);\n+                    File[] files = ksDir.listFiles();\n+                    if (files != null)\n+                    {\n+                        for (File file : files)\n+                            migrateFile(file, ksDir, null);\n+                    }\n \n-                migrateSnapshots(ksDir);\n-                migrateBackups(ksDir);\n+                    migrateSnapshots(ksDir);\n+                    migrateBackups(ksDir);\n+                }\n             }\n         }\n     }\n@@ -499,16 +506,23 @@ private static void migrateSnapshots(File ksDir)\n         if (!snapshotDir.exists())\n             return;\n \n-        for (File snapshot : snapshotDir.listFiles())\n+        File[] snapshots = snapshotDir.listFiles();\n+        if (snapshots != null)\n         {\n-            if (!snapshot.isDirectory())\n-                continue;\n-\n-            for (File f : snapshot.listFiles())\n-                migrateFile(f, ksDir, join(SNAPSHOT_SUBDIR, snapshot.getName()));\n+            for (File snapshot : snapshots)\n+            {\n+                if (!snapshot.isDirectory())\n+                    continue;\n \n-            if (!snapshot.delete())\n-                logger.info(\"Old snapsot directory {} not deleted by migraation as it is not empty\", snapshot);\n+                File[] files = snapshot.listFiles();\n+                if (files != null)\n+                {\n+                    for (File f : files)\n+                        migrateFile(f, ksDir, join(SNAPSHOT_SUBDIR, snapshot.getName()));\n+                }\n+                if (!snapshot.delete())\n+                    logger.info(\"Old snapsot directory {} not deleted by migraation as it is not empty\", snapshot);\n+            }\n         }\n         if (!snapshotDir.delete())\n             logger.info(\"Old directory {} not deleted by migration as it is not empty\", snapshotDir);\n@@ -520,9 +534,12 @@ private static void migrateBackups(File ksDir)\n         if (!backupDir.exists())\n             return;\n \n-        for (File f : backupDir.listFiles())\n-            migrateFile(f, ksDir, BACKUPS_SUBDIR);\n-\n+        File[] files = backupDir.listFiles();\n+        if (files != null)\n+        {\n+            for (File f : files)\n+                migrateFile(f, ksDir, BACKUPS_SUBDIR);\n+        }\n         if (!backupDir.delete())\n             logger.info(\"Old directory {} not deleted by migration as it is not empty\", backupDir);\n     }",
                "raw_url": "https://github.com/apache/cassandra/raw/6e1f3a0195b777c9ae79ab89230b67ca20c1adc4/src/java/org/apache/cassandra/db/Directories.java",
                "sha": "7ee2823d6d4f3761160dde554e9769a59fa0c3f7",
                "status": "modified"
            }
        ],
        "message": "Fix NPE when listing directory; patch by yukim reviewed by jbellis for\nCASSANDRA-4572",
        "parent": "https://github.com/apache/cassandra/commit/b0342978a0a444b067fae25f4bf9a2f7e5dca0e3",
        "patched_files": [
            "Directories.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "DirectoriesTest.java"
        ]
    },
    "cassandra_79a16e5": {
        "bug_id": "cassandra_79a16e5",
        "commit": "https://github.com/apache/cassandra/commit/79a16e5e977bea4ec86fb3fef97a7ea0719a9095",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/79a16e5e977bea4ec86fb3fef97a7ea0719a9095/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=79a16e5e977bea4ec86fb3fef97a7ea0719a9095",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 3.0.10\n+ * Fix NPE in ComponentOfSlice.isEQ() (CASSANDRA-12706)\n  * Fix failure in LogTransactionTest (CASSANDRA-12632)\n  * Fix potentially incomplete non-frozen UDT values when querying with the\n    full primary key specified (CASSANDRA-12605)",
                "raw_url": "https://github.com/apache/cassandra/raw/79a16e5e977bea4ec86fb3fef97a7ea0719a9095/CHANGES.txt",
                "sha": "cbf9ab1ff8975e6067a770f1fee3a661024cb37c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/79a16e5e977bea4ec86fb3fef97a7ea0719a9095/src/java/org/apache/cassandra/db/Slices.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/Slices.java?ref=79a16e5e977bea4ec86fb3fef97a7ea0719a9095",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/Slices.java",
                "patch": "@@ -745,7 +745,7 @@ public static ComponentOfSlice fromSlice(int component, Slice slice)\n \n             public boolean isEQ()\n             {\n-                return startValue.equals(endValue);\n+                return Objects.equals(startValue, endValue);\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/cassandra/raw/79a16e5e977bea4ec86fb3fef97a7ea0719a9095/src/java/org/apache/cassandra/db/Slices.java",
                "sha": "269386e15efec496a667b11105986aae33a6b516",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/cassandra/blob/79a16e5e977bea4ec86fb3fef97a7ea0719a9095/test/unit/org/apache/cassandra/db/SinglePartitionSliceCommandTest.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/db/SinglePartitionSliceCommandTest.java?ref=79a16e5e977bea4ec86fb3fef97a7ea0719a9095",
                "deletions": 0,
                "filename": "test/unit/org/apache/cassandra/db/SinglePartitionSliceCommandTest.java",
                "patch": "@@ -215,4 +215,25 @@ public void staticColumnsAreReturned() throws IOException\n             checkForS(pi);\n         }\n     }\n+\n+    @Test\n+    public void toCQLStringIsSafeToCall() throws IOException\n+    {\n+        DecoratedKey key = cfm.decorateKey(ByteBufferUtil.bytes(\"k1\"));\n+\n+        ColumnFilter columnFilter = ColumnFilter.selection(PartitionColumns.of(s));\n+        Slice slice = Slice.make(Slice.Bound.BOTTOM, Slice.Bound.inclusiveEndOf(ByteBufferUtil.bytes(\"i1\")));\n+        ClusteringIndexSliceFilter sliceFilter = new ClusteringIndexSliceFilter(Slices.with(cfm.comparator, slice), false);\n+        ReadCommand cmd = new SinglePartitionReadCommand(false, MessagingService.VERSION_30, true, cfm,\n+                                                         FBUtilities.nowInSeconds(),\n+                                                         columnFilter,\n+                                                         RowFilter.NONE,\n+                                                         DataLimits.NONE,\n+                                                         key,\n+                                                         sliceFilter);\n+\n+        String ret = cmd.toCQLString();\n+        Assert.assertNotNull(ret);\n+        Assert.assertFalse(ret.isEmpty());\n+    }\n }",
                "raw_url": "https://github.com/apache/cassandra/raw/79a16e5e977bea4ec86fb3fef97a7ea0719a9095/test/unit/org/apache/cassandra/db/SinglePartitionSliceCommandTest.java",
                "sha": "7f59e2fd73bdd62eac1473a932a026c0ca0cc7f4",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in ComponentOfSlice.isEQ()\n\nPatch by Stefania Alborghetti; reviewed by Swen Moczarski for CASSANDRA-12706",
        "parent": "https://github.com/apache/cassandra/commit/cd8a98a2dd2d7e4993cd1aa3c282602b48be73c8",
        "patched_files": [
            "CHANGES.java",
            "Slices.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "SinglePartitionSliceCommandTest.java"
        ]
    },
    "cassandra_7d2ce5f": {
        "bug_id": "cassandra_7d2ce5f",
        "commit": "https://github.com/apache/cassandra/commit/7d2ce5f957b1fb392617c1ff05a561571eccd593",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/7d2ce5f957b1fb392617c1ff05a561571eccd593/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=7d2ce5f957b1fb392617c1ff05a561571eccd593",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -4,6 +4,7 @@\n    (CASSANDRA-5497)\n  * fsync leveled manifest to avoid corruption (CASSANDRA-5535)\n  * Fix Bound intersection computation (CASSANDRA-5551)\n+ * Fix NPE in Pig's widerow mode (CASSANDRA-5488)\n \n 1.1.11\n  * Fix trying to load deleted row into row cache on startup (CASSANDRA-4463)",
                "raw_url": "https://github.com/apache/cassandra/raw/7d2ce5f957b1fb392617c1ff05a561571eccd593/CHANGES.txt",
                "sha": "256e69a019f01a51a0c44591e5b0e68dbb7ea435",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/7d2ce5f957b1fb392617c1ff05a561571eccd593/examples/pig/test/test_storage.pig",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/examples/pig/test/test_storage.pig?ref=7d2ce5f957b1fb392617c1ff05a561571eccd593",
                "deletions": 1,
                "filename": "examples/pig/test/test_storage.pig",
                "patch": "@@ -1,4 +1,4 @@\n-rows = LOAD 'cassandra://PigTest/SomeApp' USING CassandraStorage();\n+rows = LOAD 'cassandra://PigTest/SomeApp?widerows=true' USING CassandraStorage();\n -- full copy\n STORE rows INTO 'cassandra://PigTest/CopyOfSomeApp' USING CassandraStorage();\n -- single tuple",
                "raw_url": "https://github.com/apache/cassandra/raw/7d2ce5f957b1fb392617c1ff05a561571eccd593/examples/pig/test/test_storage.pig",
                "sha": "93dd91f2db0f1a30fb4f08f5254ce84bb28a6598",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cassandra/blob/7d2ce5f957b1fb392617c1ff05a561571eccd593/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java?ref=7d2ce5f957b1fb392617c1ff05a561571eccd593",
                "deletions": 13,
                "filename": "src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java",
                "patch": "@@ -144,7 +144,7 @@ public Tuple getNextWide() throws IOException\n                         if (tuple.size() == 0) // lastRow is a new one\n                         {\n                             key = (ByteBuffer)reader.getCurrentKey();\n-                            addKeyToTuple(tuple, key, cfDef, parseType(cfDef.getKey_validation_class()));\n+                            tuple = addKeyToTuple(tuple, key, cfDef, parseType(cfDef.getKey_validation_class()));\n                         }\n                         for (Map.Entry<ByteBuffer, IColumn> entry : lastRow.entrySet())\n                         {\n@@ -180,7 +180,7 @@ public Tuple getNextWide() throws IOException\n                     key = (ByteBuffer)reader.getCurrentKey();\n                     if (lastKey != null && !(key.equals(lastKey))) // last key only had one value\n                     {\n-                        addKeyToTuple(tuple, lastKey, cfDef, parseType(cfDef.getKey_validation_class()));\n+                        tuple = addKeyToTuple(tuple, lastKey, cfDef, parseType(cfDef.getKey_validation_class()));\n                         for (Map.Entry<ByteBuffer, IColumn> entry : lastRow.entrySet())\n                         {\n                             bag.add(columnToTuple(entry.getValue(), cfDef, parseType(cfDef.getComparator_type())));\n@@ -190,7 +190,7 @@ public Tuple getNextWide() throws IOException\n                         lastRow = (SortedMap<ByteBuffer,IColumn>)reader.getCurrentValue();\n                         return tuple;\n                     }\n-                    addKeyToTuple(tuple, lastKey, cfDef, parseType(cfDef.getKey_validation_class()));\n+                    tuple = addKeyToTuple(tuple, lastKey, cfDef, parseType(cfDef.getKey_validation_class()));\n                 }\n                 SortedMap<ByteBuffer,IColumn> row = (SortedMap<ByteBuffer,IColumn>)reader.getCurrentValue();\n                 if (lastRow != null) // prepend what was read last time\n@@ -233,7 +233,7 @@ public Tuple getNext() throws IOException\n             // output tuple, will hold the key, each indexed column in a tuple, then a bag of the rest\n             // NOTE: we're setting the tuple size here only for the key so we can use setTupleValue on it\n \n-            Tuple tuple = keyToTuple(key, cfDef, parseType(cfDef.getKey_validation_class()));\n+            Tuple tuple = addKeyToTuple(null, key, cfDef, parseType(cfDef.getKey_validation_class()));\n             DefaultDataBag bag = new DefaultDataBag();\n \n             // we must add all the indexed columns first to match the schema\n@@ -292,15 +292,12 @@ private Tuple composeComposite( AbstractCompositeType comparator, ByteBuffer nam\n         return t;\n     }\n \n-    private Tuple keyToTuple(ByteBuffer key, CfDef cfDef, AbstractType comparator) throws IOException\n-    {\n-        Tuple tuple = TupleFactory.getInstance().newTuple(1);\n-        addKeyToTuple(tuple, key, cfDef, comparator);\n-        return tuple;\n-    }\n-\n-    private void addKeyToTuple(Tuple tuple, ByteBuffer key, CfDef cfDef, AbstractType comparator) throws IOException\n+    private Tuple addKeyToTuple(Tuple tuple, ByteBuffer key, CfDef cfDef, AbstractType comparator) throws IOException\n     {\n+        if( tuple == null )\n+        {\n+            tuple = TupleFactory.getInstance().newTuple(1);\n+        }\n         if( comparator instanceof AbstractCompositeType )\n         {\n             setTupleValue(tuple, 0, composeComposite((AbstractCompositeType)comparator,key));\n@@ -309,7 +306,7 @@ private void addKeyToTuple(Tuple tuple, ByteBuffer key, CfDef cfDef, AbstractTyp\n         {\n             setTupleValue(tuple, 0, getDefaultMarshallers(cfDef).get(MarshallerType.KEY_VALIDATOR).compose(key));\n         }\n-\n+        return tuple;\n     }\n \n     private Tuple columnToTuple(IColumn col, CfDef cfDef, AbstractType comparator) throws IOException",
                "raw_url": "https://github.com/apache/cassandra/raw/7d2ce5f957b1fb392617c1ff05a561571eccd593/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java",
                "sha": "b681ee387a84f9b7f3a68cba21e647e2043a2662",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in Pig's widerow mode.\nPatch by Sheetal Gorsani and Jeremy Hanna, reviewed by brandonwilliams\nfor CASSANDRA-5488",
        "parent": "https://github.com/apache/cassandra/commit/c5dc0292e0689f2e714e23495944f6a6a58b5028",
        "patched_files": [
            "CassandraStorage.java",
            "CHANGES.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "test_storage.java"
        ]
    },
    "cassandra_7fe4309": {
        "bug_id": "cassandra_7fe4309",
        "commit": "https://github.com/apache/cassandra/commit/7fe4309430e22bd4d17c7fd91f281bb4d0878ffa",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/7fe4309430e22bd4d17c7fd91f281bb4d0878ffa/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=7fe4309430e22bd4d17c7fd91f281bb4d0878ffa",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -38,6 +38,7 @@\n  * cqlsh: Fix handling of $$-escaped strings (CASSANDRA-12189)\n  * Fix SSL JMX requiring truststore containing server cert (CASSANDRA-12109)\n Merged from 3.0:\n+ * NullPointerException during compaction on table with static columns (CASSANDRA-12336)\n  * Fixed ConcurrentModificationException when reading metrics in GraphiteReporter (CASSANDRA-11823)\n  * Fix upgrade of super columns on thrift (CASSANDRA-12335)\n  * Fixed flacky BlacklistingCompactionsTest, switched to fixed size types and increased corruption size (CASSANDRA-12359)",
                "raw_url": "https://github.com/apache/cassandra/raw/7fe4309430e22bd4d17c7fd91f281bb4d0878ffa/CHANGES.txt",
                "sha": "b67156b35b176898c1857d6005eace7a03c3bcff",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/7fe4309430e22bd4d17c7fd91f281bb4d0878ffa/test/unit/org/apache/cassandra/cql3/validation/entities/StaticColumnsTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/cql3/validation/entities/StaticColumnsTest.java?ref=7fe4309430e22bd4d17c7fd91f281bb4d0878ffa",
                "deletions": 0,
                "filename": "test/unit/org/apache/cassandra/cql3/validation/entities/StaticColumnsTest.java",
                "patch": "@@ -296,6 +296,8 @@ public void testStaticColumnPurging() throws Throwable\n \n         flush();\n \n+        Thread.sleep(1000);\n+\n         compact();\n \n         assertRows(execute(\"SELECT * FROM %s\"), row(\"k1\", \"c1\", null, \"v1\"));",
                "raw_url": "https://github.com/apache/cassandra/raw/7fe4309430e22bd4d17c7fd91f281bb4d0878ffa/test/unit/org/apache/cassandra/cql3/validation/entities/StaticColumnsTest.java",
                "sha": "74fed69045680e9ba61408c57d638206e6350947",
                "status": "modified"
            }
        ],
        "message": "Merge branch 'cassandra-3.9' into trunk\n\n* cassandra-3.9:\n  NullPointerException during compaction on table with static columns",
        "parent": "https://github.com/apache/cassandra/commit/78e9180243731098fe269abcf0549c49277143f5",
        "patched_files": [
            "CHANGES.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "StaticColumnsTest.java"
        ]
    },
    "cassandra_8206839": {
        "bug_id": "cassandra_8206839",
        "commit": "https://github.com/apache/cassandra/commit/8206839328e665108e33de8b48926942d46cf12e",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/8206839328e665108e33de8b48926942d46cf12e/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=8206839328e665108e33de8b48926942d46cf12e",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 3.10\n+ * Fix NPE when using CQLSSTableWriter (CASSANDRA-12667)\n  * Support optional backpressure strategies at the coordinator (CASSANDRA-9318)\n  * Make randompartitioner work with new vnode allocation (CASSANDRA-12647)\n  * Fix cassandra-stress graphing (CASSANDRA-12237)",
                "raw_url": "https://github.com/apache/cassandra/raw/8206839328e665108e33de8b48926942d46cf12e/CHANGES.txt",
                "sha": "74a23722fa2124b41f36095ef54a6639def4916a",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/8206839328e665108e33de8b48926942d46cf12e/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/DatabaseDescriptor.java?ref=8206839328e665108e33de8b48926942d46cf12e",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "patch": "@@ -44,6 +44,7 @@\n import org.apache.cassandra.config.Config.CommitLogSync;\n import org.apache.cassandra.config.Config.RequestSchedulerId;\n import org.apache.cassandra.dht.IPartitioner;\n+import org.apache.cassandra.dht.Murmur3Partitioner;\n import org.apache.cassandra.exceptions.ConfigurationException;\n import org.apache.cassandra.io.FSWriteError;\n import org.apache.cassandra.io.util.DiskOptimizationStrategy;\n@@ -218,6 +219,8 @@ public static void clientInitialization(boolean failIfDaemonOrTool)\n \n         Config.setClientMode(true);\n         conf = new Config();\n+        diskOptimizationStrategy = new SpinningDiskOptimizationStrategy();\n+        partitioner = Murmur3Partitioner.instance;\n     }\n \n     public static boolean isClientInitialized()",
                "raw_url": "https://github.com/apache/cassandra/raw/8206839328e665108e33de8b48926942d46cf12e/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "sha": "963d5649a553d605d7c826a2ea9d169d03e5fe13",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/8206839328e665108e33de8b48926942d46cf12e/src/java/org/apache/cassandra/io/sstable/CQLSSTableWriter.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/sstable/CQLSSTableWriter.java?ref=8206839328e665108e33de8b48926942d46cf12e",
                "deletions": 3,
                "filename": "src/java/org/apache/cassandra/io/sstable/CQLSSTableWriter.java",
                "patch": "@@ -53,6 +53,7 @@\n import org.apache.cassandra.exceptions.RequestValidationException;\n import org.apache.cassandra.exceptions.SyntaxException;\n import org.apache.cassandra.io.sstable.format.SSTableFormat;\n+import org.apache.cassandra.io.util.SpinningDiskOptimizationStrategy;\n import org.apache.cassandra.schema.KeyspaceMetadata;\n import org.apache.cassandra.schema.KeyspaceParams;\n import org.apache.cassandra.schema.Types;\n@@ -105,9 +106,6 @@\n     static\n     {\n         DatabaseDescriptor.clientInitialization(false);\n-        // Partitioner is not set in client mode.\n-        if (DatabaseDescriptor.getPartitioner() == null)\n-            DatabaseDescriptor.setPartitionerUnsafe(Murmur3Partitioner.instance);\n     }\n \n     private final AbstractSSTableSimpleWriter writer;",
                "raw_url": "https://github.com/apache/cassandra/raw/8206839328e665108e33de8b48926942d46cf12e/src/java/org/apache/cassandra/io/sstable/CQLSSTableWriter.java",
                "sha": "dd9eb599bd5b03e36158de540272a6d68b097f49",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cassandra/blob/8206839328e665108e33de8b48926942d46cf12e/test/microbench/org/apache/cassandra/test/microbench/MutationBench.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/microbench/org/apache/cassandra/test/microbench/MutationBench.java?ref=8206839328e665108e33de8b48926942d46cf12e",
                "deletions": 3,
                "filename": "test/microbench/org/apache/cassandra/test/microbench/MutationBench.java",
                "patch": "@@ -65,9 +65,6 @@\n     static\n     {\n         DatabaseDescriptor.clientInitialization(false);\n-        // Partitioner is not set in client mode.\n-        if (DatabaseDescriptor.getPartitioner() == null)\n-            DatabaseDescriptor.setPartitionerUnsafe(Murmur3Partitioner.instance);\n     }\n \n     static String keyspace = \"keyspace1\";",
                "raw_url": "https://github.com/apache/cassandra/raw/8206839328e665108e33de8b48926942d46cf12e/test/microbench/org/apache/cassandra/test/microbench/MutationBench.java",
                "sha": "20d8ff5a30c89802dd4e5713724c4ae9f5ea18bf",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cassandra/blob/8206839328e665108e33de8b48926942d46cf12e/tools/stress/src/org/apache/cassandra/io/sstable/StressCQLSSTableWriter.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/tools/stress/src/org/apache/cassandra/io/sstable/StressCQLSSTableWriter.java?ref=8206839328e665108e33de8b48926942d46cf12e",
                "deletions": 3,
                "filename": "tools/stress/src/org/apache/cassandra/io/sstable/StressCQLSSTableWriter.java",
                "patch": "@@ -99,9 +99,6 @@\n     static\n     {\n         DatabaseDescriptor.clientInitialization(false);\n-        // Partitioner is not set in client mode.\n-        if (DatabaseDescriptor.getPartitioner() == null)\n-            DatabaseDescriptor.setPartitionerUnsafe(Murmur3Partitioner.instance);\n     }\n \n     private final AbstractSSTableSimpleWriter writer;",
                "raw_url": "https://github.com/apache/cassandra/raw/8206839328e665108e33de8b48926942d46cf12e/tools/stress/src/org/apache/cassandra/io/sstable/StressCQLSSTableWriter.java",
                "sha": "d9bf6690de77f5c17ea5ce5ed6342cdeff83bea8",
                "status": "modified"
            }
        ],
        "message": "DatabaseDescriptor should set some defaults to prevent NPE's.\n\nSet Disk Optimization Strategy and Partitioner in DD.clientInitialization.\n\npatch by Jeremiah Jordan; reviewed by Yuki Morishita for CASSANDRA-12667",
        "parent": "https://github.com/apache/cassandra/commit/944608428116b47c25596dd14ef0e697b971197f",
        "patched_files": [
            "DatabaseDescriptor.java",
            "CQLSSTableWriter.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "DatabaseDescriptorTest.java",
            "CQLSSTableWriterTest.java"
        ]
    },
    "cassandra_82e26b2": {
        "bug_id": "cassandra_82e26b2",
        "commit": "https://github.com/apache/cassandra/commit/82e26b217dab3c327bab882be8cc6b8c0c257139",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cassandra/blob/82e26b217dab3c327bab882be8cc6b8c0c257139/test/unit/org/apache/cassandra/io/sstable/CQLSSTableWriterTest.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/io/sstable/CQLSSTableWriterTest.java?ref=82e26b217dab3c327bab882be8cc6b8c0c257139",
                "deletions": 4,
                "filename": "test/unit/org/apache/cassandra/io/sstable/CQLSSTableWriterTest.java",
                "patch": "@@ -70,7 +70,7 @@ public void testUnsortedWriter() throws Exception\n         CQLSSTableWriter writer = CQLSSTableWriter.builder()\n                                                   .inDirectory(dataDir)\n                                                   .forTable(schema)\n-                                                  .withPartitioner(StorageService.instance.getPartitioner())\n+                                                  .withPartitioner(StorageService.getPartitioner())\n                                                   .using(insert).build();\n \n         writer.addRow(0, \"test1\", 24);\n@@ -129,16 +129,21 @@ public void testSyncWithinPartition() throws Exception\n         // Check that the write respect the buffer size even if we only insert rows withing the same partition (#7360)\n         // To do that simply, we use a writer with a buffer of 1MB, and write 2 rows in the same partition with a value\n         // > 1MB and validate that this created more than 1 sstable.\n+        String KS = \"ks\";\n+        String TABLE = \"test\";\n+\n         File tempdir = Files.createTempDir();\n+        File dataDir = new File(tempdir.getAbsolutePath() + File.separator + KS + File.separator + TABLE);\n+        assert dataDir.mkdirs();\n         String schema = \"CREATE TABLE ks.test (\"\n                       + \"  k int PRIMARY KEY,\"\n                       + \"  v blob\"\n                       + \")\";\n         String insert = \"INSERT INTO ks.test (k, v) VALUES (?, ?)\";\n         CQLSSTableWriter writer = CQLSSTableWriter.builder()\n-                                                  .inDirectory(tempdir)\n+                                                  .inDirectory(dataDir)\n                                                   .forTable(schema)\n-                                                  .withPartitioner(StorageService.instance.getPartitioner())\n+                                                  .withPartitioner(StorageService.getPartitioner())\n                                                   .using(insert)\n                                                   .withBufferSizeInMB(1)\n                                                   .build();\n@@ -156,6 +161,6 @@ public boolean accept(File dir, String name)\n                 return name.endsWith(\"-Data.db\");\n             }\n         };\n-        assert tempdir.list(filterDataFiles).length > 1 : Arrays.toString(tempdir.list(filterDataFiles));\n+        assert dataDir.list(filterDataFiles).length > 1 : Arrays.toString(dataDir.list(filterDataFiles));\n     }\n }",
                "raw_url": "https://github.com/apache/cassandra/raw/82e26b217dab3c327bab882be8cc6b8c0c257139/test/unit/org/apache/cassandra/io/sstable/CQLSSTableWriterTest.java",
                "sha": "250545a088f9b7d3e2429de63a42e458cc2ee953",
                "status": "modified"
            }
        ],
        "message": "Fix test timeout in CQLSSTableWriterTest\n\nTime out is caused by NPE when creating SSTable writer.\n3.0 does not have ks and cf names in SSTable file name,\nwhen writing SSTable, it has to be under ks/cf directory.",
        "parent": "https://github.com/apache/cassandra/commit/e39dc56eda3e325d537da44def54d85749def9d2",
        "patched_files": [
            "CQLSSTableWriter.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "CQLSSTableWriterTest.java"
        ]
    },
    "cassandra_849f8cd": {
        "bug_id": "cassandra_849f8cd",
        "commit": "https://github.com/apache/cassandra/commit/849f8cd6162c4850d64581a2c4a542c677e43e0a",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/849f8cd6162c4850d64581a2c4a542c677e43e0a/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=849f8cd6162c4850d64581a2c4a542c677e43e0a",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 3.0.13\n+ * Fix possible NPE on upgrade to 3.0/3.X in case of IO errors (CASSANDRA-13389)\n  * Legacy deserializer can create empty range tombstones (CASSANDRA-13341)\n  * Use the Kernel32 library to retrieve the PID on Windows and fix startup checks (CASSANDRA-13333)\n  * Fix code to not exchange schema across major versions (CASSANDRA-13274)",
                "raw_url": "https://github.com/apache/cassandra/raw/849f8cd6162c4850d64581a2c4a542c677e43e0a/CHANGES.txt",
                "sha": "5d7b2678dd694f83de1898959401edd6b167e9de",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/cassandra/blob/849f8cd6162c4850d64581a2c4a542c677e43e0a/src/java/org/apache/cassandra/db/SystemKeyspace.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/SystemKeyspace.java?ref=849f8cd6162c4850d64581a2c4a542c677e43e0a",
                "deletions": 19,
                "filename": "src/java/org/apache/cassandra/db/SystemKeyspace.java",
                "patch": "@@ -64,6 +64,7 @@\n import static java.util.Collections.singletonMap;\n import static org.apache.cassandra.cql3.QueryProcessor.executeInternal;\n import static org.apache.cassandra.cql3.QueryProcessor.executeOnceInternal;\n+import static org.apache.cassandra.io.util.FileUtils.visitDirectory;\n \n public final class SystemKeyspace\n {\n@@ -1338,28 +1339,33 @@ public static void migrateDataDirs()\n         Iterable<String> dirs = Arrays.asList(DatabaseDescriptor.getAllDataFileLocations());\n         for (String dataDir : dirs)\n         {\n-            logger.trace(\"Checking {} for old files\", dataDir);\n+            logger.debug(\"Checking {} for legacy files\", dataDir);\n             File dir = new File(dataDir);\n             assert dir.exists() : dir + \" should have been created by startup checks\";\n \n-            for (File ksdir : dir.listFiles((d, n) -> new File(d, n).isDirectory()))\n-            {\n-                logger.trace(\"Checking {} for old files\", ksdir);\n-\n-                for (File cfdir : ksdir.listFiles((d, n) -> new File(d, n).isDirectory()))\n-                {\n-                    logger.trace(\"Checking {} for old files\", cfdir);\n-\n-                    if (Descriptor.isLegacyFile(cfdir))\n-                    {\n-                        FileUtils.deleteRecursive(cfdir);\n-                    }\n-                    else\n-                    {\n-                        FileUtils.delete(cfdir.listFiles((d, n) -> Descriptor.isLegacyFile(new File(d, n))));\n-                    }\n-                }\n-            }\n+            visitDirectory(dir.toPath(),\n+                           File::isDirectory,\n+                           ksdir ->\n+                           {\n+                               logger.trace(\"Checking {} for legacy files\", ksdir);\n+                               visitDirectory(ksdir.toPath(),\n+                                              File::isDirectory,\n+                                              cfdir ->\n+                                              {\n+                                                  logger.trace(\"Checking {} for legacy files\", cfdir);\n+\n+                                                  if (Descriptor.isLegacyFile(cfdir))\n+                                                  {\n+                                                      FileUtils.deleteRecursive(cfdir);\n+                                                  }\n+                                                  else\n+                                                  {\n+                                                      visitDirectory(cfdir.toPath(),\n+                                                                     Descriptor::isLegacyFile,\n+                                                                     FileUtils::delete);\n+                                                  }\n+                                              });\n+                           });\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/849f8cd6162c4850d64581a2c4a542c677e43e0a/src/java/org/apache/cassandra/db/SystemKeyspace.java",
                "sha": "cc2143507a56b68c714088f490210b12e9bbc209",
                "status": "modified"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/cassandra/blob/849f8cd6162c4850d64581a2c4a542c677e43e0a/src/java/org/apache/cassandra/io/util/FileUtils.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/util/FileUtils.java?ref=849f8cd6162c4850d64581a2c4a542c677e43e0a",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/io/util/FileUtils.java",
                "patch": "@@ -28,6 +28,9 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Predicate;\n+import java.util.stream.StreamSupport;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -369,6 +372,13 @@ public static boolean delete(String file)\n \n     public static void delete(File... files)\n     {\n+        if (files == null)\n+        {\n+            // CASSANDRA-13389: some callers use Files.listFiles() which, on error, silently returns null\n+            logger.debug(\"Received null list of files to delete\");\n+            return;\n+        }\n+\n         for ( File file : files )\n         {\n             file.delete();\n@@ -387,6 +397,22 @@ public void run()\n         ScheduledExecutors.nonPeriodicTasks.execute(runnable);\n     }\n \n+    public static void visitDirectory(Path dir, Predicate<? super File> filter, Consumer<? super File> consumer)\n+    {\n+        try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir))\n+        {\n+            StreamSupport.stream(stream.spliterator(), false)\n+                         .map(Path::toFile)\n+                         // stream directories are weakly consistent so we always check if the file still exists\n+                         .filter(f -> f.exists() && (filter == null || filter.test(f)))\n+                         .forEach(consumer);\n+        }\n+        catch (IOException|DirectoryIteratorException ex)\n+        {\n+            logger.error(\"Failed to list files in {} with exception: {}\", dir, ex.getMessage(), ex);\n+        }\n+    }\n+\n     public static String stringifyFileSize(double value)\n     {\n         double d;",
                "raw_url": "https://github.com/apache/cassandra/raw/849f8cd6162c4850d64581a2c4a542c677e43e0a/src/java/org/apache/cassandra/io/util/FileUtils.java",
                "sha": "0bfbbb1c2b3385fceebb0ae06022a577bc82861e",
                "status": "modified"
            },
            {
                "additions": 102,
                "blob_url": "https://github.com/apache/cassandra/blob/849f8cd6162c4850d64581a2c4a542c677e43e0a/test/unit/org/apache/cassandra/db/SystemKeyspaceTest.java",
                "changes": 106,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/db/SystemKeyspaceTest.java?ref=849f8cd6162c4850d64581a2c4a542c677e43e0a",
                "deletions": 4,
                "filename": "test/unit/org/apache/cassandra/db/SystemKeyspaceTest.java",
                "patch": "@@ -39,12 +39,15 @@\n import org.apache.cassandra.utils.FBUtilities;\n import org.apache.cassandra.utils.CassandraVersion;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.*;\n \n public class SystemKeyspaceTest\n {\n-    public static final String MIGRATION_SSTABLES_ROOT = \"migration-sstable-root\";\n+    private static final String MIGRATION_SSTABLES_ROOT = \"migration-sstable-root\";\n+\n+    // any file name will do but unrelated files in our folders tend to be log files or very old data files\n+    private static final String UNRELATED_FILE_NAME = \"system.log\";\n+    private static final String UNRELATED_FOLDER_NAME = \"snapshot-abc\";\n \n     @BeforeClass\n     public static void prepSnapshotTracker()\n@@ -221,14 +224,109 @@ private static int numLegacyFiles()\n                     else\n                     {\n                         File[] legacyFiles = cfdir.listFiles((d, n) -> Descriptor.isLegacyFile(new File(d, n)));\n-                        ret += legacyFiles.length;\n+                        if (legacyFiles != null)\n+                            ret += legacyFiles.length;\n                     }\n                 }\n             }\n         }\n         return ret;\n     }\n \n+    @Test\n+    public void testMigrateDataDirs_UnrelatedFiles_2_1() throws IOException\n+    {\n+        testMigrateDataDirsWithUnrelatedFiles(\"2.1\");\n+    }\n+\n+    @Test\n+    public void testMigrateDataDirs_UnrelatedFiles_2_2() throws IOException\n+    {\n+        testMigrateDataDirsWithUnrelatedFiles(\"2.2\");\n+    }\n+\n+    private void testMigrateDataDirsWithUnrelatedFiles(String version) throws IOException\n+    {\n+        Path migrationSSTableRoot = Paths.get(System.getProperty(MIGRATION_SSTABLES_ROOT), version);\n+        Path dataDir = Paths.get(DatabaseDescriptor.getAllDataFileLocations()[0]);\n+\n+        FileUtils.copyDirectory(migrationSSTableRoot.toFile(), dataDir.toFile());\n+\n+        addUnRelatedFiles(dataDir);\n+\n+        SystemKeyspace.migrateDataDirs();\n+\n+        checkUnrelatedFiles(dataDir);\n+    }\n+\n+    /**\n+     * Add some extra and totally unrelated files to the data dir and its sub-folders\n+     */\n+    private void addUnRelatedFiles(Path dataDir) throws IOException\n+    {\n+        File dir = new File(dataDir.toString());\n+        createAndCheck(dir, UNRELATED_FILE_NAME, false);\n+        createAndCheck(dir, UNRELATED_FOLDER_NAME, true);\n+\n+        for (File ksdir : dir.listFiles((d, n) -> new File(d, n).isDirectory()))\n+        {\n+            createAndCheck(ksdir, UNRELATED_FILE_NAME, false);\n+            createAndCheck(ksdir, UNRELATED_FOLDER_NAME, true);\n+\n+            for (File cfdir : ksdir.listFiles((d, n) -> new File(d, n).isDirectory()))\n+            {\n+                createAndCheck(cfdir, UNRELATED_FILE_NAME, false);\n+                createAndCheck(cfdir, UNRELATED_FOLDER_NAME, true);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Make sure the extra files are still in the data dir and its sub-folders, then\n+     * remove them.\n+     */\n+    private void checkUnrelatedFiles(Path dataDir) throws IOException\n+    {\n+        File dir = new File(dataDir.toString());\n+        checkAndDelete(dir, UNRELATED_FILE_NAME, false);\n+        checkAndDelete(dir, UNRELATED_FOLDER_NAME, true);\n+\n+        for (File ksdir : dir.listFiles((d, n) -> new File(d, n).isDirectory()))\n+        {\n+            checkAndDelete(ksdir, UNRELATED_FILE_NAME, false);\n+            checkAndDelete(ksdir, UNRELATED_FOLDER_NAME, true);\n+\n+            for (File cfdir : ksdir.listFiles((d, n) -> new File(d, n).isDirectory()))\n+            {\n+                checkAndDelete(cfdir, UNRELATED_FILE_NAME, false);\n+                checkAndDelete(cfdir, UNRELATED_FOLDER_NAME, true);\n+            }\n+        }\n+    }\n+\n+    private void createAndCheck(File dir, String fileName, boolean isDir) throws IOException\n+    {\n+        File f = new File(dir, fileName);\n+\n+        if (isDir)\n+            f.mkdir();\n+        else\n+            f.createNewFile();\n+\n+        assertTrue(f.exists());\n+    }\n+\n+    private void checkAndDelete(File dir, String fileName, boolean isDir) throws IOException\n+    {\n+        File f = new File(dir, fileName);\n+        assertTrue(f.exists());\n+\n+        if (isDir)\n+            FileUtils.deleteDirectory(f);\n+        else\n+            f.delete();\n+    }\n+\n     private String getOlderVersionString()\n     {\n         String version = FBUtilities.getReleaseVersionString();",
                "raw_url": "https://github.com/apache/cassandra/raw/849f8cd6162c4850d64581a2c4a542c677e43e0a/test/unit/org/apache/cassandra/db/SystemKeyspaceTest.java",
                "sha": "bcbabfde21aa458e0616af62aacf8654c1c39f4b",
                "status": "modified"
            }
        ],
        "message": "Fix possible NPE on upgrade to 3.0/3.X in case of IO errors\n\npatch by Stefania Alborghetti; reviewed by Alex Petrov for CASSANDRA-13389",
        "parent": "https://github.com/apache/cassandra/commit/451fe9d8ac567942f62852f542d28d7d1116f1a1",
        "patched_files": [
            "SystemKeyspace.java",
            "CHANGES.java",
            "FileUtils.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "SystemKeyspaceTest.java",
            "FileUtilsTest.java"
        ]
    },
    "cassandra_886d9fc": {
        "bug_id": "cassandra_886d9fc",
        "commit": "https://github.com/apache/cassandra/commit/886d9fce46b369807071c5fc87204bb552db906d",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/886d9fce46b369807071c5fc87204bb552db906d/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=886d9fce46b369807071c5fc87204bb552db906d",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 2.0.9\n+ * Fix NPE in StreamTransferTask.createMessageForRetry() (CASSANDRA-7323)\n  * Add conditional CREATE/DROP USER support (CASSANDRA-7264)\n  * Swap local and global default read repair chances (CASSANDRA-7320)\n  * Add missing iso8601 patterns for date strings (CASSANDRA-6973)",
                "raw_url": "https://github.com/apache/cassandra/raw/886d9fce46b369807071c5fc87204bb552db906d/CHANGES.txt",
                "sha": "d1d10301d899c351694512a80b22b992ada1b079",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/886d9fce46b369807071c5fc87204bb552db906d/src/java/org/apache/cassandra/streaming/StreamTransferTask.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/streaming/StreamTransferTask.java?ref=886d9fce46b369807071c5fc87204bb552db906d",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/streaming/StreamTransferTask.java",
                "patch": "@@ -99,11 +99,12 @@ public long getTotalSize()\n         return new ArrayList<>(files.values());\n     }\n \n-    public OutgoingFileMessage createMessageForRetry(int sequenceNumber)\n+    public synchronized OutgoingFileMessage createMessageForRetry(int sequenceNumber)\n     {\n         // remove previous time out task to be rescheduled later\n         ScheduledFuture future = timeoutTasks.get(sequenceNumber);\n-        future.cancel(false);\n+        if (future != null)\n+            future.cancel(false);\n         return files.get(sequenceNumber);\n     }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/886d9fce46b369807071c5fc87204bb552db906d/src/java/org/apache/cassandra/streaming/StreamTransferTask.java",
                "sha": "a543d01e8d633d06c6a8de98afc5ed6ddedb404d",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in StreamTransferTask.createMessageForRetry()\n\npatch by Josh McKenzie; reviewed by Aleksey Yeschenko for CASSANDRA-7323",
        "parent": "https://github.com/apache/cassandra/commit/8480fa7be1bbf54c526d76aeee7ecb07c417db6d",
        "patched_files": [
            "StreamTransferTask.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "StreamTransferTaskTest.java"
        ]
    },
    "cassandra_89cdfd8": {
        "bug_id": "cassandra_89cdfd8",
        "commit": "https://github.com/apache/cassandra/commit/89cdfd8e075d8883d776d7f881735f1c25e3cb54",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/89cdfd8e075d8883d776d7f881735f1c25e3cb54/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=89cdfd8e075d8883d776d7f881735f1c25e3cb54",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 2.1.4\n+ * DatabaseDescriptor throws NPE when rpc_interface is used (CASSANDRA-8839)\n  * Don't check if an sstable is live for offline compactions (CASSANDRA-8841)\n  * Don't set clientMode in SSTableLoader (CASSANDRA-8238)\n  * Fix SSTableRewriter with disabled early open (CASSANDRA-8535)",
                "raw_url": "https://github.com/apache/cassandra/raw/89cdfd8e075d8883d776d7f881735f1c25e3cb54/CHANGES.txt",
                "sha": "30bf698e3d564349cb687c0a0acabb47ee151ea3",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cassandra/blob/89cdfd8e075d8883d776d7f881735f1c25e3cb54/conf/cassandra.yaml",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/conf/cassandra.yaml?ref=89cdfd8e075d8883d776d7f881735f1c25e3cb54",
                "deletions": 0,
                "filename": "conf/cassandra.yaml",
                "patch": "@@ -370,8 +370,14 @@ ssl_storage_port: 7001\n # address associated with the hostname (it might not be).\n #\n # Setting listen_address to 0.0.0.0 is always wrong.\n+#\n+# If you choose to specify the interface by name and the interface has an ipv4 and an ipv6 address\n+# you can specify which should be chosen using listen_interface_prefer_ipv6. If false the first ipv4\n+# address will be used. If true the first ipv6 address will be used. Defaults to false preferring\n+# ipv4. If there is only one address it will be selected regardless of ipv4/ipv6.\n listen_address: localhost\n # listen_interface: eth0\n+# listen_interface_prefer_ipv6: false\n \n # Address to broadcast to other Cassandra nodes\n # Leaving this blank will set it to the same value as listen_address\n@@ -422,8 +428,14 @@ start_rpc: true\n # set broadcast_rpc_address to a value other than 0.0.0.0.\n #\n # For security reasons, you should not expose this port to the internet.  Firewall it if needed.\n+#\n+# If you choose to specify the interface by name and the interface has an ipv4 and an ipv6 address\n+# you can specify which should be chosen using rpc_interface_prefer_ipv6. If false the first ipv4\n+# address will be used. If true the first ipv6 address will be used. Defaults to false preferring\n+# ipv4. If there is only one address it will be selected regardless of ipv4/ipv6.\n rpc_address: localhost\n # rpc_interface: eth1\n+# rpc_interface_prefer_ipv6: false\n \n # port for Thrift to listen for clients on\n rpc_port: 9160",
                "raw_url": "https://github.com/apache/cassandra/raw/89cdfd8e075d8883d776d7f881735f1c25e3cb54/conf/cassandra.yaml",
                "sha": "2b43ba73b414e041b07f394c191ad7ec604095e9",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/89cdfd8e075d8883d776d7f881735f1c25e3cb54/src/java/org/apache/cassandra/config/Config.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/Config.java?ref=89cdfd8e075d8883d776d7f881735f1c25e3cb54",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/config/Config.java",
                "patch": "@@ -34,7 +34,7 @@\n \n /**\n  * A class that contains configuration properties for the cassandra node it runs within.\n- * \n+ *\n  * Properties declared as volatile can be mutated via JMX.\n  */\n public class Config\n@@ -101,12 +101,14 @@\n     public Integer ssl_storage_port = 7001;\n     public String listen_address;\n     public String listen_interface;\n+    public Boolean listen_interface_prefer_ipv6 = false;\n     public String broadcast_address;\n     public String internode_authenticator;\n \n     public Boolean start_rpc = true;\n     public String rpc_address;\n     public String rpc_interface;\n+    public Boolean rpc_interface_prefer_ipv6 = false;\n     public String broadcast_rpc_address;\n     public Integer rpc_port = 9160;\n     public Integer rpc_listen_backlog = 50;\n@@ -155,7 +157,7 @@\n     public Double commitlog_sync_batch_window_in_ms;\n     public Integer commitlog_sync_period_in_ms;\n     public int commitlog_segment_size_in_mb = 32;\n- \n+\n     @Deprecated\n     public int commitlog_periodic_queue_size = -1;\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/89cdfd8e075d8883d776d7f881735f1c25e3cb54/src/java/org/apache/cassandra/config/Config.java",
                "sha": "fbbd1dd696de816e24be87c637986556ef39fe7b",
                "status": "modified"
            },
            {
                "additions": 114,
                "blob_url": "https://github.com/apache/cassandra/blob/89cdfd8e075d8883d776d7f881735f1c25e3cb54/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "changes": 205,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/DatabaseDescriptor.java?ref=89cdfd8e075d8883d776d7f881735f1c25e3cb54",
                "deletions": 91,
                "filename": "src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "patch": "@@ -20,6 +20,8 @@\n import java.io.File;\n import java.io.FileFilter;\n import java.io.IOException;\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n import java.net.InetAddress;\n import java.net.NetworkInterface;\n import java.net.SocketException;\n@@ -38,6 +40,7 @@\n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.primitives.Longs;\n+\n import org.apache.cassandra.thrift.ThriftServer;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -158,7 +161,7 @@ public static Config loadConfig() throws ConfigurationException\n         return loader.loadConfig();\n     }\n \n-    private static InetAddress getNetworkInterfaceAddress(String intf, String configName) throws ConfigurationException\n+    private static InetAddress getNetworkInterfaceAddress(String intf, String configName, boolean preferIPv6) throws ConfigurationException\n     {\n         try\n         {\n@@ -168,9 +171,18 @@ private static InetAddress getNetworkInterfaceAddress(String intf, String config\n             Enumeration<InetAddress> addrs = ni.getInetAddresses();\n             if (!addrs.hasMoreElements())\n                 throw new ConfigurationException(\"Configured \" + configName + \" \\\"\" + intf + \"\\\" was found, but had no addresses\");\n-            InetAddress retval = listenAddress = addrs.nextElement();\n-            if (addrs.hasMoreElements())\n-                throw new ConfigurationException(\"Configured \" + configName + \" \\\"\" + intf + \"\\\" can't have more than one address\");\n+\n+            /*\n+             * Try to return the first address of the preferred type, otherwise return the first address\n+             */\n+            InetAddress retval = null;\n+            while (addrs.hasMoreElements())\n+            {\n+                InetAddress temp = addrs.nextElement();\n+                if (preferIPv6 && temp.getClass() == Inet6Address.class) return temp;\n+                if (!preferIPv6 && temp.getClass() == Inet4Address.class) return temp;\n+                if (retval == null) retval = temp;\n+            }\n             return retval;\n         }\n         catch (SocketException e)\n@@ -179,6 +191,103 @@ private static InetAddress getNetworkInterfaceAddress(String intf, String config\n         }\n     }\n \n+    @VisibleForTesting\n+    static void applyAddressConfig(Config config) throws ConfigurationException\n+    {\n+        listenAddress = null;\n+        rpcAddress = null;\n+        broadcastAddress = null;\n+        broadcastRpcAddress = null;\n+\n+        /* Local IP, hostname or interface to bind services to */\n+        if (config.listen_address != null && config.listen_interface != null)\n+        {\n+            throw new ConfigurationException(\"Set listen_address OR listen_interface, not both\");\n+        }\n+        else if (config.listen_address != null)\n+        {\n+            try\n+            {\n+                listenAddress = InetAddress.getByName(config.listen_address);\n+            }\n+            catch (UnknownHostException e)\n+            {\n+                throw new ConfigurationException(\"Unknown listen_address '\" + config.listen_address + \"'\");\n+            }\n+\n+            if (listenAddress.isAnyLocalAddress())\n+                throw new ConfigurationException(\"listen_address cannot be a wildcard address (\" + config.listen_address + \")!\");\n+        }\n+        else if (config.listen_interface != null)\n+        {\n+            listenAddress = getNetworkInterfaceAddress(config.listen_interface, \"listen_interface\", config.listen_interface_prefer_ipv6);\n+        }\n+\n+        /* Gossip Address to broadcast */\n+        if (config.broadcast_address != null)\n+        {\n+            try\n+            {\n+                broadcastAddress = InetAddress.getByName(config.broadcast_address);\n+            }\n+            catch (UnknownHostException e)\n+            {\n+                throw new ConfigurationException(\"Unknown broadcast_address '\" + config.broadcast_address + \"'\");\n+            }\n+\n+            if (broadcastAddress.isAnyLocalAddress())\n+                throw new ConfigurationException(\"broadcast_address cannot be a wildcard address (\" + config.broadcast_address + \")!\");\n+        }\n+\n+        /* Local IP, hostname or interface to bind RPC server to */\n+        if (config.rpc_address != null && config.rpc_interface != null)\n+        {\n+            throw new ConfigurationException(\"Set rpc_address OR rpc_interface, not both\");\n+        }\n+        else if (config.rpc_address != null)\n+        {\n+            try\n+            {\n+                rpcAddress = InetAddress.getByName(config.rpc_address);\n+            }\n+            catch (UnknownHostException e)\n+            {\n+                throw new ConfigurationException(\"Unknown host in rpc_address \" + config.rpc_address);\n+            }\n+        }\n+        else if (config.rpc_interface != null)\n+        {\n+            rpcAddress = getNetworkInterfaceAddress(config.rpc_interface, \"rpc_interface\", config.rpc_interface_prefer_ipv6);\n+        }\n+        else\n+        {\n+            rpcAddress = FBUtilities.getLocalAddress();\n+        }\n+\n+        /* RPC address to broadcast */\n+        if (config.broadcast_rpc_address != null)\n+        {\n+            try\n+            {\n+                broadcastRpcAddress = InetAddress.getByName(config.broadcast_rpc_address);\n+            }\n+            catch (UnknownHostException e)\n+            {\n+                throw new ConfigurationException(\"Unknown broadcast_rpc_address '\" + config.broadcast_rpc_address + \"'\");\n+            }\n+\n+            if (broadcastRpcAddress.isAnyLocalAddress())\n+                throw new ConfigurationException(\"broadcast_rpc_address cannot be a wildcard address (\" + config.broadcast_rpc_address + \")!\");\n+        }\n+        else\n+        {\n+            if (rpcAddress.isAnyLocalAddress())\n+                throw new ConfigurationException(\"If rpc_address is set to a wildcard address (\" + config.rpc_address + \"), then \" +\n+                                                 \"you must set broadcast_rpc_address to a value other than \" + config.rpc_address);\n+            broadcastRpcAddress = rpcAddress;\n+        }\n+    }\n+\n     private static void applyConfig(Config config) throws ConfigurationException\n     {\n         conf = config;\n@@ -326,93 +435,7 @@ else if (conf.disk_access_mode == Config.DiskAccessMode.mmap_index_only)\n         else\n             logger.info(\"Global memtable off-heap threshold is enabled at {}MB\", conf.memtable_offheap_space_in_mb);\n \n-        /* Local IP, hostname or interface to bind services to */\n-        if (conf.listen_address != null && conf.listen_interface != null)\n-        {\n-            throw new ConfigurationException(\"Set listen_address OR listen_interface, not both\");\n-        }\n-        else if (conf.listen_address != null)\n-        {\n-            try\n-            {\n-                listenAddress = InetAddress.getByName(conf.listen_address);\n-            }\n-            catch (UnknownHostException e)\n-            {\n-                throw new ConfigurationException(\"Unknown listen_address '\" + conf.listen_address + \"'\");\n-            }\n-\n-            if (listenAddress.isAnyLocalAddress())\n-                throw new ConfigurationException(\"listen_address cannot be a wildcard address (\" + conf.listen_address + \")!\");\n-        }\n-        else if (conf.listen_interface != null)\n-        {\n-            listenAddress = getNetworkInterfaceAddress(conf.listen_interface, \"listen_interface\");\n-        }\n-\n-        /* Gossip Address to broadcast */\n-        if (conf.broadcast_address != null)\n-        {\n-            try\n-            {\n-                broadcastAddress = InetAddress.getByName(conf.broadcast_address);\n-            }\n-            catch (UnknownHostException e)\n-            {\n-                throw new ConfigurationException(\"Unknown broadcast_address '\" + conf.broadcast_address + \"'\");\n-            }\n-\n-            if (broadcastAddress.isAnyLocalAddress())\n-                throw new ConfigurationException(\"broadcast_address cannot be a wildcard address (\" + conf.broadcast_address + \")!\");\n-        }\n-\n-        /* Local IP, hostname or interface to bind RPC server to */\n-        if (conf.rpc_address != null && conf.rpc_interface != null)\n-        {\n-            throw new ConfigurationException(\"Set rpc_address OR rpc_interface, not both\");\n-        }\n-        else if (conf.rpc_address != null)\n-        {\n-            try\n-            {\n-                rpcAddress = InetAddress.getByName(conf.rpc_address);\n-            }\n-            catch (UnknownHostException e)\n-            {\n-                throw new ConfigurationException(\"Unknown host in rpc_address \" + conf.rpc_address);\n-            }\n-        }\n-        else if (conf.rpc_interface != null)\n-        {\n-            listenAddress = getNetworkInterfaceAddress(conf.rpc_interface, \"rpc_interface\");\n-        }\n-        else\n-        {\n-            rpcAddress = FBUtilities.getLocalAddress();\n-        }\n-\n-        /* RPC address to broadcast */\n-        if (conf.broadcast_rpc_address != null)\n-        {\n-            try\n-            {\n-                broadcastRpcAddress = InetAddress.getByName(conf.broadcast_rpc_address);\n-            }\n-            catch (UnknownHostException e)\n-            {\n-                throw new ConfigurationException(\"Unknown broadcast_rpc_address '\" + conf.broadcast_rpc_address + \"'\");\n-            }\n-\n-            if (broadcastRpcAddress.isAnyLocalAddress())\n-                throw new ConfigurationException(\"broadcast_rpc_address cannot be a wildcard address (\" + conf.broadcast_rpc_address + \")!\");\n-        }\n-        else\n-        {\n-            if (rpcAddress.isAnyLocalAddress())\n-                throw new ConfigurationException(\"If rpc_address is set to a wildcard address (\" + conf.rpc_address + \"), then \" +\n-                                                 \"you must set broadcast_rpc_address to a value other than \" + conf.rpc_address);\n-            broadcastRpcAddress = rpcAddress;\n-        }\n+        applyAddressConfig(config);\n \n         if (conf.thrift_framed_transport_size_in_mb <= 0)\n             throw new ConfigurationException(\"thrift_framed_transport_size_in_mb must be positive\");",
                "raw_url": "https://github.com/apache/cassandra/raw/89cdfd8e075d8883d776d7f881735f1c25e3cb54/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "sha": "65cec9c211b8b1fbdb44f3b6ae732e6417271d72",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cassandra/blob/89cdfd8e075d8883d776d7f881735f1c25e3cb54/src/java/org/apache/cassandra/config/YamlConfigurationLoader.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/YamlConfigurationLoader.java?ref=89cdfd8e075d8883d776d7f881735f1c25e3cb54",
                "deletions": 8,
                "filename": "src/java/org/apache/cassandra/config/YamlConfigurationLoader.java",
                "patch": "@@ -50,7 +50,7 @@\n     /**\n      * Inspect the classpath to find storage configuration file\n      */\n-    private URL getStorageConfigURL() throws ConfigurationException\n+    static URL getStorageConfigURL() throws ConfigurationException\n     {\n         String configUrl = System.getProperty(\"cassandra.config\");\n         if (configUrl == null)\n@@ -100,7 +100,7 @@ public Config loadConfig(URL url) throws ConfigurationException\n                 // getStorageConfigURL should have ruled this out\n                 throw new AssertionError(e);\n             }\n-            \n+\n             logConfig(configBytes);\n             \n             org.yaml.snakeyaml.constructor.Constructor constructor = new org.yaml.snakeyaml.constructor.Constructor(Config.class);\n@@ -134,16 +134,16 @@ private void logConfig(byte[] configBytes)\n         }\n         logger.info(\"Node configuration:[\" + Joiner.on(\"; \").join(configMap.entrySet()) + \"]\");\n     }\n-    \n-    private static class MissingPropertiesChecker extends PropertyUtils \n+\n+    private static class MissingPropertiesChecker extends PropertyUtils\n     {\n         private final Set<String> missingProperties = new HashSet<>();\n-        \n+\n         public MissingPropertiesChecker()\n         {\n             setSkipMissingProperties(true);\n         }\n-        \n+\n         @Override\n         public Property getProperty(Class<? extends Object> type, String name) throws IntrospectionException\n         {\n@@ -154,10 +154,10 @@ public Property getProperty(Class<? extends Object> type, String name) throws In\n             }\n             return result;\n         }\n-        \n+\n         public void check() throws ConfigurationException\n         {\n-            if (!missingProperties.isEmpty()) \n+            if (!missingProperties.isEmpty())\n             {\n                 throw new ConfigurationException(\"Invalid yaml. Please remove properties \" + missingProperties + \" from your cassandra.yaml\");\n             }",
                "raw_url": "https://github.com/apache/cassandra/raw/89cdfd8e075d8883d776d7f881735f1c25e3cb54/src/java/org/apache/cassandra/config/YamlConfigurationLoader.java",
                "sha": "0061926e2ef381adde5908d474de7887aa692edf",
                "status": "modified"
            },
            {
                "additions": 138,
                "blob_url": "https://github.com/apache/cassandra/blob/89cdfd8e075d8883d776d7f881735f1c25e3cb54/test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java",
                "changes": 139,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java?ref=89cdfd8e075d8883d776d7f881735f1c25e3cb54",
                "deletions": 1,
                "filename": "test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java",
                "patch": "@@ -18,9 +18,17 @@\n */\n package org.apache.cassandra.config;\n \n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+\n+import junit.framework.Assert;\n+\n+import org.junit.BeforeClass;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-\n import org.apache.cassandra.OrderedJUnit4ClassRunner;\n import org.apache.cassandra.SchemaLoader;\n import org.apache.cassandra.db.Keyspace;\n@@ -126,4 +134,133 @@ public Config loadConfig() throws ConfigurationException\n             return testConfig;\n         }\n     }\n+\n+    static NetworkInterface suitableInterface = null;\n+    static boolean hasIPv4andIPv6 = false;\n+\n+    /*\n+     * Server only accepts interfaces by name if they have a single address\n+     * OS X seems to always have an ipv4 and ipv6 address on all interfaces which means some tests fail\n+     * if not checked for and skipped\n+     */\n+    @BeforeClass\n+    public static void selectSuitableInterface() throws Exception {\n+        Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();\n+        while(interfaces.hasMoreElements()) {\n+            NetworkInterface intf = interfaces.nextElement();\n+\n+            System.out.println(\"Evaluating \" + intf.getName());\n+\n+            if (intf.isLoopback()) {\n+                suitableInterface = intf;\n+\n+                boolean hasIPv4 = false;\n+                boolean hasIPv6 = false;\n+                Enumeration<InetAddress> addresses = suitableInterface.getInetAddresses();\n+                while (addresses.hasMoreElements()) {\n+                    if (addresses.nextElement().getClass() == Inet6Address.class)\n+                        hasIPv6 = true;\n+                    else\n+                        hasIPv4 = true;\n+                }\n+                hasIPv4andIPv6 = hasIPv4 && hasIPv6;\n+                return;\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testRpcInterface() throws Exception\n+    {\n+        Config testConfig = DatabaseDescriptor.loadConfig();\n+        testConfig.rpc_interface = suitableInterface.getName();\n+        testConfig.rpc_address = null;\n+        DatabaseDescriptor.applyAddressConfig(testConfig);\n+\n+        /*\n+         * Confirm ability to select between IPv4 and IPv6\n+         */\n+        if (hasIPv4andIPv6)\n+        {\n+            testConfig = DatabaseDescriptor.loadConfig();\n+            testConfig.rpc_interface = suitableInterface.getName();\n+            testConfig.rpc_address = null;\n+            testConfig.rpc_interface_prefer_ipv6 = true;\n+            DatabaseDescriptor.applyAddressConfig(testConfig);\n+\n+            assertEquals(DatabaseDescriptor.getRpcAddress().getClass(), Inet6Address.class);\n+\n+            testConfig = DatabaseDescriptor.loadConfig();\n+            testConfig.rpc_interface = suitableInterface.getName();\n+            testConfig.rpc_address = null;\n+            testConfig.rpc_interface_prefer_ipv6 = false;\n+            DatabaseDescriptor.applyAddressConfig(testConfig);\n+\n+            assertEquals(DatabaseDescriptor.getRpcAddress().getClass(), Inet4Address.class);\n+        }\n+        else\n+        {\n+            /*\n+             * Confirm first address of interface is selected\n+             */\n+            assertEquals(DatabaseDescriptor.getRpcAddress(), suitableInterface.getInetAddresses().nextElement());\n+        }\n+    }\n+\n+    @Test\n+    public void testListenInterface() throws Exception\n+    {\n+        Config testConfig = DatabaseDescriptor.loadConfig();\n+        testConfig.listen_interface = suitableInterface.getName();\n+        testConfig.listen_address = null;\n+        DatabaseDescriptor.applyAddressConfig(testConfig);\n+\n+        /*\n+         * Confirm ability to select between IPv4 and IPv6\n+         */\n+        if (hasIPv4andIPv6)\n+        {\n+            testConfig = DatabaseDescriptor.loadConfig();\n+            testConfig.listen_interface = suitableInterface.getName();\n+            testConfig.listen_address = null;\n+            testConfig.listen_interface_prefer_ipv6 = true;\n+            DatabaseDescriptor.applyAddressConfig(testConfig);\n+\n+            assertEquals(DatabaseDescriptor.getListenAddress().getClass(), Inet6Address.class);\n+\n+            testConfig = DatabaseDescriptor.loadConfig();\n+            testConfig.listen_interface = suitableInterface.getName();\n+            testConfig.listen_address = null;\n+            testConfig.listen_interface_prefer_ipv6 = false;\n+            DatabaseDescriptor.applyAddressConfig(testConfig);\n+\n+            assertEquals(DatabaseDescriptor.getListenAddress().getClass(), Inet4Address.class);\n+        }\n+        else\n+        {\n+            /*\n+             * Confirm first address of interface is selected\n+             */\n+            assertEquals(DatabaseDescriptor.getRpcAddress(), suitableInterface.getInetAddresses().nextElement());\n+        }\n+    }\n+\n+    @Test\n+    public void testListenAddress() throws Exception\n+    {\n+        Config testConfig = DatabaseDescriptor.loadConfig();\n+        testConfig.listen_address = suitableInterface.getInterfaceAddresses().get(0).getAddress().getHostAddress();\n+        testConfig.listen_interface = null;\n+        DatabaseDescriptor.applyAddressConfig(testConfig);\n+    }\n+\n+    @Test\n+    public void testRpcAddress() throws Exception\n+    {\n+        Config testConfig = DatabaseDescriptor.loadConfig();\n+        testConfig.rpc_address = suitableInterface.getInterfaceAddresses().get(0).getAddress().getHostAddress();\n+        testConfig.rpc_interface = null;\n+        DatabaseDescriptor.applyAddressConfig(testConfig);\n+\n+    }\n }",
                "raw_url": "https://github.com/apache/cassandra/raw/89cdfd8e075d8883d776d7f881735f1c25e3cb54/test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java",
                "sha": "46522cca822e45436c7cba4c4278903690d90778",
                "status": "modified"
            }
        ],
        "message": "DatabaseDescriptor throws NPE when rpc_interface is used\n\npatch by Ariel Weisberg; reviewed by Carl Yeksigian for CASSANDRA-8839",
        "parent": "https://github.com/apache/cassandra/commit/c0f159b82a9d805990818f60735623e2a7d8c517",
        "patched_files": [
            "DatabaseDescriptor.java",
            "cassandra.java",
            "CHANGES.java",
            "Config.java",
            "YamlConfigurationLoader.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "DatabaseDescriptorTest.java"
        ]
    },
    "cassandra_8fc9275": {
        "bug_id": "cassandra_8fc9275",
        "commit": "https://github.com/apache/cassandra/commit/8fc9275d3020fa0c80ed1852726be0a5a63e487c",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/8fc9275d3020fa0c80ed1852726be0a5a63e487c/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=8fc9275d3020fa0c80ed1852726be0a5a63e487c",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 3.0.15\n+ * Improve config validation and documentation on overflow and NPE (CASSANDRA-13622)\n  * Range deletes in a CAS batch are ignored (CASSANDRA-13655)\n  * Change repair midpoint logging for tiny ranges (CASSANDRA-13603)\n  * Better handle corrupt final commitlog segment (CASSANDRA-11995)",
                "raw_url": "https://github.com/apache/cassandra/raw/8fc9275d3020fa0c80ed1852726be0a5a63e487c/CHANGES.txt",
                "sha": "b00e47c604d83747d35fe81176c70590bee015e5",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/8fc9275d3020fa0c80ed1852726be0a5a63e487c/conf/cassandra.yaml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/conf/cassandra.yaml?ref=8fc9275d3020fa0c80ed1852726be0a5a63e487c",
                "deletions": 2,
                "filename": "conf/cassandra.yaml",
                "patch": "@@ -315,6 +315,7 @@ commitlog_sync_period_in_ms: 10000\n # is reasonable.\n # Max mutation size is also configurable via max_mutation_size_in_kb setting in\n # cassandra.yaml. The default is half the size commitlog_segment_size_in_mb * 1024.\n+# This should be positive and less than 2048.\n #\n # NOTE: If max_mutation_size_in_kb is set explicitly then commitlog_segment_size_in_mb must\n # be set to at least twice the size of max_mutation_size_in_kb / 1024\n@@ -517,7 +518,7 @@ native_transport_port: 9042\n #\n # The maximum size of allowed frame. Frame (requests) larger than this will\n # be rejected as invalid. The default is 256MB. If you're changing this parameter,\n-# you may want to adjust max_value_size_in_mb accordingly.\n+# you may want to adjust max_value_size_in_mb accordingly. This should be positive and less than 2048.\n # native_transport_max_frame_size_in_mb: 256\n \n # The maximum number of concurrent client connections.\n@@ -960,7 +961,7 @@ windows_timer_interval: 1\n \n # Maximum size of any value in SSTables. Safety measure to detect SSTable corruption\n # early. Any value size larger than this threshold will result into marking an SSTable\n-# as corrupted.\n+# as corrupted. This should be positive and less than 2048.\n # max_value_size_in_mb: 256\n \n # Coalescing Strategies #",
                "raw_url": "https://github.com/apache/cassandra/raw/8fc9275d3020fa0c80ed1852726be0a5a63e487c/conf/cassandra.yaml",
                "sha": "d77d27a2f5dd6f5498c6d7e79950e003e0c813c1",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/cassandra/blob/8fc9275d3020fa0c80ed1852726be0a5a63e487c/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/DatabaseDescriptor.java?ref=8fc9275d3020fa0c80ed1852726be0a5a63e487c",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "patch": "@@ -442,6 +442,9 @@ else if (conf.disk_access_mode == Config.DiskAccessMode.mmap_index_only)\n \n         if (conf.native_transport_max_frame_size_in_mb <= 0)\n             throw new ConfigurationException(\"native_transport_max_frame_size_in_mb must be positive, but was \" + conf.native_transport_max_frame_size_in_mb, false);\n+        else if (conf.native_transport_max_frame_size_in_mb >= 2048)\n+            throw new ConfigurationException(\"native_transport_max_frame_size_in_mb must be smaller than 2048, but was \"\n+                    + conf.native_transport_max_frame_size_in_mb, false);\n \n         // fail early instead of OOMing (see CASSANDRA-8116)\n         if (ThriftServer.HSHA.equals(conf.rpc_server_type) && conf.rpc_max_threads == Integer.MAX_VALUE)\n@@ -576,6 +579,8 @@ public int compare(InetAddress endpoint1, InetAddress endpoint2)\n         /* data file and commit log directories. they get created later, when they're needed. */\n         for (String datadir : conf.data_file_directories)\n         {\n+            if (datadir == null)\n+                throw new ConfigurationException(\"data_file_directories must not contain empty entry\", false);\n             if (datadir.equals(conf.commitlog_directory))\n                 throw new ConfigurationException(\"commitlog_directory must not be the same as any data_file_directories\", false);\n             if (datadir.equals(conf.hints_directory))\n@@ -718,6 +723,13 @@ else if (conf.num_tokens > MAX_NUM_TOKENS)\n         if (conf.user_defined_function_fail_timeout < conf.user_defined_function_warn_timeout)\n             throw new ConfigurationException(\"user_defined_function_warn_timeout must less than user_defined_function_fail_timeout\", false);\n \n+        if (conf.commitlog_segment_size_in_mb <= 0)\n+            throw new ConfigurationException(\"commitlog_segment_size_in_mb must be positive, but was \"\n+                    + conf.commitlog_segment_size_in_mb, false);\n+        else if (conf.commitlog_segment_size_in_mb >= 2048)\n+            throw new ConfigurationException(\"commitlog_segment_size_in_mb must be smaller than 2048, but was \"\n+                    + conf.commitlog_segment_size_in_mb, false);\n+\n         if (conf.max_mutation_size_in_kb == null)\n             conf.max_mutation_size_in_kb = conf.commitlog_segment_size_in_mb * 1024 / 2;\n         else if (conf.commitlog_segment_size_in_mb * 1024 < 2 * conf.max_mutation_size_in_kb)\n@@ -733,6 +745,9 @@ else if (conf.commitlog_segment_size_in_mb * 1024 < 2 * conf.max_mutation_size_i\n \n         if (conf.max_value_size_in_mb == null || conf.max_value_size_in_mb <= 0)\n             throw new ConfigurationException(\"max_value_size_in_mb must be positive\", false);\n+        else if (conf.max_value_size_in_mb >= 2048)\n+            throw new ConfigurationException(\"max_value_size_in_mb must be smaller than 2048, but was \"\n+                    + conf.max_value_size_in_mb, false);\n \n         if (conf.otc_coalescing_enough_coalesced_messages > 128)\n             throw new ConfigurationException(\"otc_coalescing_enough_coalesced_messages must be smaller than 128\", false);",
                "raw_url": "https://github.com/apache/cassandra/raw/8fc9275d3020fa0c80ed1852726be0a5a63e487c/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "sha": "029db89cd940dd95d2b3848ef1e697a89cc79c6c",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cassandra/blob/8fc9275d3020fa0c80ed1852726be0a5a63e487c/src/java/org/apache/cassandra/utils/FBUtilities.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/utils/FBUtilities.java?ref=8fc9275d3020fa0c80ed1852726be0a5a63e487c",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/utils/FBUtilities.java",
                "patch": "@@ -34,6 +34,8 @@\n \n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Joiner;\n+import com.google.common.base.Strings;\n+\n import org.apache.commons.lang3.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -82,8 +84,9 @@\n \n     public static int getAvailableProcessors()\n     {\n-        if (System.getProperty(\"cassandra.available_processors\") != null)\n-            return Integer.parseInt(System.getProperty(\"cassandra.available_processors\"));\n+        String availableProcessors = System.getProperty(\"cassandra.available_processors\");\n+        if (!Strings.isNullOrEmpty(availableProcessors))\n+            return Integer.parseInt(availableProcessors);\n         else\n             return Runtime.getRuntime().availableProcessors();\n     }",
                "raw_url": "https://github.com/apache/cassandra/raw/8fc9275d3020fa0c80ed1852726be0a5a63e487c/src/java/org/apache/cassandra/utils/FBUtilities.java",
                "sha": "5562f5e22c370f4ec12fba1346e9fc4e820642e3",
                "status": "modified"
            }
        ],
        "message": "Improve config validation and documentation on overflow and NPE\n\npatch by Zhao Yang; reviewed by Kurt Greaves for CASSANDRA-13622",
        "parent": "https://github.com/apache/cassandra/commit/e86bef4394650dfb96a041533de50c4fbf47bbdb",
        "patched_files": [
            "DatabaseDescriptor.java",
            "FBUtilities.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "FBUtilitiesTest.java",
            "DatabaseDescriptorTest.java"
        ]
    },
    "cassandra_9002e76": {
        "bug_id": "cassandra_9002e76",
        "commit": "https://github.com/apache/cassandra/commit/9002e76d6971c3035a439209a9f2e5b8c2465247",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/9002e76d6971c3035a439209a9f2e5b8c2465247/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamilyStore.java?ref=9002e76d6971c3035a439209a9f2e5b8c2465247",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "patch": "@@ -434,7 +434,8 @@ public boolean accept(File pathname)\n         for (File dir : directories.getCFDirectories())\n         {\n             File[] lockfiles = dir.listFiles(filter);\n-            if (lockfiles.length == 0)\n+            // lock files can be null if I/O error happens\n+            if (lockfiles == null || lockfiles.length == 0)\n                 continue;\n             logger.info(\"Removing SSTables from failed streaming session. Found {} files to cleanup.\", lockfiles.length);\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/9002e76d6971c3035a439209a9f2e5b8c2465247/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "sha": "bfd3b08a9f25e45bfa0c6ba67a6027d99922efb7",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE when doing CFS.scrubDataDirectories",
        "parent": "https://github.com/apache/cassandra/commit/95e09f262ce8d448e8bbbd17aa9c77f6546d5ed1",
        "patched_files": [
            "ColumnFamilyStore.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "ColumnFamilyStoreTest.java"
        ]
    },
    "cassandra_939709f": {
        "bug_id": "cassandra_939709f",
        "commit": "https://github.com/apache/cassandra/commit/939709f977311add1cdc89cdd51bb19dc694d8f7",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/939709f977311add1cdc89cdd51bb19dc694d8f7/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamilyStore.java?ref=939709f977311add1cdc89cdd51bb19dc694d8f7",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "patch": "@@ -1453,7 +1453,7 @@ public ColumnFamily getColumnFamily(QueryFilter filter, int gcBefore) throws IOE\n                 }\n                 catch (Throwable th)\n                 {\n-                    logger_.error(th);\n+                    logger_.error(\"error closing \" + ci, th);\n                 }\n             }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/939709f977311add1cdc89cdd51bb19dc694d8f7/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "sha": "8baf41ffa802e4526085b8aa49e3d8d483571f6e",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/939709f977311add1cdc89cdd51bb19dc694d8f7/src/java/org/apache/cassandra/db/filter/SSTableSliceIterator.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/filter/SSTableSliceIterator.java?ref=939709f977311add1cdc89cdd51bb19dc694d8f7",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/filter/SSTableSliceIterator.java",
                "patch": "@@ -127,7 +127,8 @@ protected IColumn computeNext()\n \n     public void close() throws IOException\n     {\n-        reader.close();\n+        if (reader != null)\n+            reader.close();\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/cassandra/raw/939709f977311add1cdc89cdd51bb19dc694d8f7/src/java/org/apache/cassandra/db/filter/SSTableSliceIterator.java",
                "sha": "15e41cc32b0e4b0779b05fd4f5012603fce68635",
                "status": "modified"
            }
        ],
        "message": "fix NPE on iterator close.  patch by jbellis; reviewed by Chris Goffinet for CASSANDRA-341\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/cassandra/trunk@801047 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cassandra/commit/debfcf8acaf2345c824bd426858ce89159c6d753",
        "patched_files": [
            "ColumnFamilyStore.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "ColumnFamilyStoreTest.java"
        ]
    },
    "cassandra_95c4320": {
        "bug_id": "cassandra_95c4320",
        "commit": "https://github.com/apache/cassandra/commit/95c4320baf468c32085676607521e0f33410c351",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/cache/AutoSavingCache.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cache/AutoSavingCache.java?ref=95c4320baf468c32085676607521e0f33410c351",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/cache/AutoSavingCache.java",
                "patch": "@@ -201,7 +201,7 @@ public int loadSaved()\n                 UUID schemaVersion = new UUID(in.readLong(), in.readLong());\n                 if (!schemaVersion.equals(Schema.instance.getVersion()))\n                     throw new RuntimeException(\"Cache schema version \"\n-                                              + schemaVersion.toString()\n+                                              + schemaVersion\n                                               + \" does not match current schema version \"\n                                               + Schema.instance.getVersion());\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/cache/AutoSavingCache.java",
                "sha": "b7616b9b6a5a637eb1175b4f2c0536ebe4f4597a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/cache/ChunkCache.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cache/ChunkCache.java?ref=95c4320baf468c32085676607521e0f33410c351",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/cache/ChunkCache.java",
                "patch": "@@ -289,7 +289,7 @@ public double getCrcCheckChance()\n         @Override\n         public String toString()\n         {\n-            return \"CachingRebufferer:\" + source.toString();\n+            return \"CachingRebufferer:\" + source;\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/cache/ChunkCache.java",
                "sha": "7e5b9e1ca8d9fc7ee5e3cb43f186d9d3794da325",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/cql3/functions/UDHelper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/functions/UDHelper.java?ref=95c4320baf468c32085676607521e0f33410c351",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/cql3/functions/UDHelper.java",
                "patch": "@@ -159,7 +159,7 @@ public static Object deserialize(TypeCodec<?> codec, ProtocolVersion protocolVer\n     public static ByteBuffer serialize(TypeCodec<?> codec, ProtocolVersion protocolVersion, Object value)\n     {\n         if (!codec.getJavaType().getRawType().isAssignableFrom(value.getClass()))\n-            throw new InvalidTypeException(\"Invalid value for CQL type \" + codec.getCqlType().getName().toString());\n+            throw new InvalidTypeException(\"Invalid value for CQL type \" + codec.getCqlType().getName());\n \n         return ((TypeCodec)codec).serialize(value, com.datastax.driver.core.ProtocolVersion.fromInt(protocolVersion.asInt()));\n     }",
                "raw_url": "https://github.com/apache/cassandra/raw/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/cql3/functions/UDHelper.java",
                "sha": "935b1b8914d30f39a2f235952315470145c1c46f",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/io/util/BufferManagingRebufferer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/util/BufferManagingRebufferer.java?ref=95c4320baf468c32085676607521e0f33410c351",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/io/util/BufferManagingRebufferer.java",
                "patch": "@@ -89,7 +89,7 @@ public double getCrcCheckChance()\n     @Override\n     public String toString()\n     {\n-        return \"BufferManagingRebufferer.\" + getClass().getSimpleName() + \":\" + source.toString();\n+        return \"BufferManagingRebufferer.\" + getClass().getSimpleName() + \":\" + source;\n     }\n \n     // BufferHolder methods",
                "raw_url": "https://github.com/apache/cassandra/raw/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/io/util/BufferManagingRebufferer.java",
                "sha": "f3b9a8824cf433f71001392ac54eecd453afeaab",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/io/util/LimitingRebufferer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/util/LimitingRebufferer.java?ref=95c4320baf468c32085676607521e0f33410c351",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/io/util/LimitingRebufferer.java",
                "patch": "@@ -101,7 +101,7 @@ public void closeReader()\n     @Override\n     public String toString()\n     {\n-        return \"LimitingRebufferer[\" + limiter.toString() + \"]:\" + wrapped.toString();\n+        return \"LimitingRebufferer[\" + limiter + \"]:\" + wrapped;\n     }\n \n     // BufferHolder methods",
                "raw_url": "https://github.com/apache/cassandra/raw/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/io/util/LimitingRebufferer.java",
                "sha": "b5c7f3498d763eef0a99deb1c473833ad86ddf24",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/io/util/RandomAccessReader.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/util/RandomAccessReader.java?ref=95c4320baf468c32085676607521e0f33410c351",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/io/util/RandomAccessReader.java",
                "patch": "@@ -169,7 +169,7 @@ public void close()\n     @Override\n     public String toString()\n     {\n-        return getClass().getSimpleName() + ':' + rebufferer.toString();\n+        return getClass().getSimpleName() + ':' + rebufferer;\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/cassandra/raw/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/io/util/RandomAccessReader.java",
                "sha": "a0ea520aec717d3188a7bd282f3f8d12828df6a5",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/schema/SchemaKeyspace.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/schema/SchemaKeyspace.java?ref=95c4320baf468c32085676607521e0f33410c351",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/schema/SchemaKeyspace.java",
                "patch": "@@ -1074,7 +1074,7 @@ public static ColumnDefinition createColumnFromRow(UntypedResultSet.Row row, Typ\n                                      ? ColumnDefinition.Kind.valueOf(row.getString(\"kind\").toUpperCase())\n                                      : ColumnDefinition.Kind.REGULAR;\n         assert kind == ColumnDefinition.Kind.REGULAR || kind == ColumnDefinition.Kind.STATIC\n-            : \"Unexpected dropped column kind: \" + kind.toString();\n+            : \"Unexpected dropped column kind: \" + kind;\n         return new CFMetaData.DroppedColumn(name, type, droppedTime, kind);\n     }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/schema/SchemaKeyspace.java",
                "sha": "ee0974fb30843da5ae10b3533c8d73a515d57950",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/service/ActiveRepairService.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/ActiveRepairService.java?ref=95c4320baf468c32085676607521e0f33410c351",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/service/ActiveRepairService.java",
                "patch": "@@ -333,13 +333,13 @@ public void onFailure(InetAddress from, RequestFailureReason failureReason)\n         catch (InterruptedException e)\n         {\n             removeParentRepairSession(parentRepairSession);\n-            throw new RuntimeException(\"Did not get replies from all endpoints. List of failed endpoint(s): \" + failedNodes.toString(), e);\n+            throw new RuntimeException(\"Did not get replies from all endpoints. List of failed endpoint(s): \" + failedNodes, e);\n         }\n \n         if (!status.get())\n         {\n             removeParentRepairSession(parentRepairSession);\n-            throw new RuntimeException(\"Did not get positive replies from all endpoints. List of failed endpoint(s): \" + failedNodes.toString());\n+            throw new RuntimeException(\"Did not get positive replies from all endpoints. List of failed endpoint(s): \" + failedNodes);\n         }\n \n         return parentRepairSession;",
                "raw_url": "https://github.com/apache/cassandra/raw/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/service/ActiveRepairService.java",
                "sha": "1e89c8be883af787554be694141ce1d2ce1142b3",
                "status": "modified"
            }
        ],
        "message": "avoid chance of NPEs while generating informational strings",
        "parent": "https://github.com/apache/cassandra/commit/88b7126a177a77e28b34384e7792d4b4394cb55f",
        "patched_files": [
            "SchemaKeyspace.java",
            "ActiveRepairService.java",
            "AutoSavingCache.java",
            "UDHelper.java",
            "RandomAccessReader.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "RandomAccessReaderTest.java",
            "SchemaKeyspaceTest.java",
            "ActiveRepairServiceTest.java",
            "UDHelperTest.java",
            "AutoSavingCacheTest.java"
        ]
    },
    "cassandra_98cf634": {
        "bug_id": "cassandra_98cf634",
        "commit": "https://github.com/apache/cassandra/commit/98cf63431af3d1cd6a411e311250ab71961df9e7",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/98cf63431af3d1cd6a411e311250ab71961df9e7/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=98cf63431af3d1cd6a411e311250ab71961df9e7",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 3.0\n+ * Fix NPE in SelectStatement with empty IN values (CASSANDRA-8419)\n  * Refactor SelectStatement, return IN results in natural order instead\n    of IN value list order (CASSANDRA-7981)\n  * Support UDTs, tuples, and collections in user-defined",
                "raw_url": "https://github.com/apache/cassandra/raw/98cf63431af3d1cd6a411e311250ab71961df9e7/CHANGES.txt",
                "sha": "588f58f2576fffea9656afaa83f39595fcdbef00",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cassandra/blob/98cf63431af3d1cd6a411e311250ab71961df9e7/src/java/org/apache/cassandra/cql3/restrictions/SingleColumnPrimaryKeyRestrictions.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/restrictions/SingleColumnPrimaryKeyRestrictions.java?ref=98cf63431af3d1cd6a411e311250ab71961df9e7",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/cql3/restrictions/SingleColumnPrimaryKeyRestrictions.java",
                "patch": "@@ -186,7 +186,7 @@ public PrimaryKeyRestrictions mergeWith(Restriction restriction) throws InvalidR\n             List<ByteBuffer> values = r.values(options);\n \n             if (values.isEmpty())\n-                return null;\n+                return Collections.emptyList();\n \n             builder.addEachElementToAll(values);\n             checkFalse(builder.containsNull(), \"Invalid null value for column %s\", def.name);\n@@ -236,7 +236,12 @@ public PrimaryKeyRestrictions mergeWith(Restriction restriction) throws InvalidR\n                 return compositeBuilder.buildWithEOC(eoc);\n             }\n \n-            compositeBuilder.addEachElementToAll(r.values(options));\n+            List<ByteBuffer> values = r.values(options);\n+\n+            if (values.isEmpty())\n+                return Collections.emptyList();\n+\n+            compositeBuilder.addEachElementToAll(values);\n \n             checkFalse(compositeBuilder.containsNull(), \"Invalid null clustering key part %s\", def.name);\n             keyPosition++;",
                "raw_url": "https://github.com/apache/cassandra/raw/98cf63431af3d1cd6a411e311250ab71961df9e7/src/java/org/apache/cassandra/cql3/restrictions/SingleColumnPrimaryKeyRestrictions.java",
                "sha": "5c8386e4446100872315e147a9b491dbc29ccf2f",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/98cf63431af3d1cd6a411e311250ab71961df9e7/test/unit/org/apache/cassandra/cql3/MultiColumnRelationTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/cql3/MultiColumnRelationTest.java?ref=98cf63431af3d1cd6a411e311250ab71961df9e7",
                "deletions": 0,
                "filename": "test/unit/org/apache/cassandra/cql3/MultiColumnRelationTest.java",
                "patch": "@@ -441,11 +441,15 @@ public void testMultipleClustering() throws Throwable\n                     row(0, 0, 1, 1)\n             );\n \n+            assertEmpty(execute(\"SELECT * FROM %s WHERE a = ? and (b) IN ()\", 0));\n+\n             assertRows(execute(\"SELECT * FROM %s WHERE a = ? AND (b, c) IN ((?, ?)) ORDER BY b DESC, c DESC, d DESC\", 0, 0, 1),\n                     row(0, 0, 1, 1),\n                     row(0, 0, 1, 0)\n             );\n \n+            assertEmpty(execute(\"SELECT * FROM %s WHERE a = ? AND (b, c) IN () ORDER BY b DESC, c DESC, d DESC\", 0));\n+\n             // IN on both partition key and clustering key\n             execute(\"INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)\", 1, 0, 0, 0);\n             execute(\"INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)\", 1, 0, 1, 0);",
                "raw_url": "https://github.com/apache/cassandra/raw/98cf63431af3d1cd6a411e311250ab71961df9e7/test/unit/org/apache/cassandra/cql3/MultiColumnRelationTest.java",
                "sha": "b178498d2b3aceaabd7d9126bfe3a6673dd546fe",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/cassandra/blob/98cf63431af3d1cd6a411e311250ab71961df9e7/test/unit/org/apache/cassandra/cql3/SingleColumnRelationTest.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/cql3/SingleColumnRelationTest.java?ref=98cf63431af3d1cd6a411e311250ab71961df9e7",
                "deletions": 0,
                "filename": "test/unit/org/apache/cassandra/cql3/SingleColumnRelationTest.java",
                "patch": "@@ -363,4 +363,20 @@ public void testRangeQueryOnIndex() throws Throwable\n                              \"SELECT * FROM %s WHERE setid = 0 AND row < 1;\");\n         assertRows(execute(\"SELECT * FROM %s WHERE setid = 0 AND row < 1 ALLOW FILTERING;\"), row(0, 0, 0));\n     }\n+\n+    @Test\n+    public void testEmptyIN() throws Throwable\n+    {\n+        for (String compactOption : new String[] { \"\", \" WITH COMPACT STORAGE\" })\n+        {\n+            createTable(\"CREATE TABLE %s (k1 int, k2 int, v int, PRIMARY KEY (k1, k2))\" + compactOption);\n+\n+            for (int i = 0; i <= 2; i++)\n+                for (int j = 0; j <= 2; j++)\n+                    execute(\"INSERT INTO %s (k1, k2, v) VALUES (?, ?, ?)\", i, j, i + j);\n+\n+            assertEmpty(execute(\"SELECT v FROM %s WHERE k1 IN ()\"));\n+            assertEmpty(execute(\"SELECT v FROM %s WHERE k1 = 0 AND k2 IN ()\"));\n+        }\n+    }\n }",
                "raw_url": "https://github.com/apache/cassandra/raw/98cf63431af3d1cd6a411e311250ab71961df9e7/test/unit/org/apache/cassandra/cql3/SingleColumnRelationTest.java",
                "sha": "e6412a391548116e42bfc3c61ef625a351176f02",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in SelectStatement with empty IN values\n\nPatch by Benjamin Lerer; reviewed by Tyler Hobbs for CASSANDRA-8419",
        "parent": "https://github.com/apache/cassandra/commit/58c88b7d54ca2290cee9cfb322d8b34e873a370c",
        "patched_files": [
            "SingleColumnPrimaryKeyRestrictions.java",
            "MultiColumnRelation.java",
            "SingleColumnRelation.java",
            "CHANGES.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "MultiColumnRelationTest.java",
            "SingleColumnRelationTest.java"
        ]
    },
    "cassandra_98d81e4": {
        "bug_id": "cassandra_98d81e4",
        "commit": "https://github.com/apache/cassandra/commit/98d81e409a3512fccaeab3ba89f7cf5bfa8f39ae",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/98d81e409a3512fccaeab3ba89f7cf5bfa8f39ae/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=98d81e409a3512fccaeab3ba89f7cf5bfa8f39ae",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 4.0\n+ * Avoid NPE in RepairRunnable.recordFailure (CASSANDRA-15025)\n  * SSL Cert Hot Reloading should check for sanity of the new keystore/truststore before loading it (CASSANDRA-14991)\n  * Avoid leaking threads when failing anticompactions and rate limit anticompactions (CASSANDRA-15002)\n  * Validate token() arguments early instead of throwing NPE at execution (CASSANDRA-14989)",
                "raw_url": "https://github.com/apache/cassandra/raw/98d81e409a3512fccaeab3ba89f7cf5bfa8f39ae/CHANGES.txt",
                "sha": "7b0675724aaa6dc2799e793bbf35688ac4f6d08d",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/98d81e409a3512fccaeab3ba89f7cf5bfa8f39ae/src/java/org/apache/cassandra/repair/CommonRange.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/repair/CommonRange.java?ref=98d81e409a3512fccaeab3ba89f7cf5bfa8f39ae",
                "deletions": 3,
                "filename": "src/java/org/apache/cassandra/repair/CommonRange.java",
                "patch": "@@ -41,10 +41,10 @@\n \n     public CommonRange(Set<InetAddressAndPort> endpoints, Set<InetAddressAndPort> transEndpoints, Collection<Range<Token>> ranges)\n     {\n-        Preconditions.checkArgument(endpoints != null && !endpoints.isEmpty());\n-        Preconditions.checkArgument(transEndpoints != null);\n+        Preconditions.checkArgument(endpoints != null && !endpoints.isEmpty(), \"Endpoints can not be empty\");\n+        Preconditions.checkArgument(transEndpoints != null, \"Transient endpoints can not be null\");\n         Preconditions.checkArgument(endpoints.containsAll(transEndpoints), \"transEndpoints must be a subset of endpoints\");\n-        Preconditions.checkArgument(ranges != null && !ranges.isEmpty());\n+        Preconditions.checkArgument(ranges != null && !ranges.isEmpty(), \"Ranges can not be empty\");\n \n         this.endpoints = ImmutableSet.copyOf(endpoints);\n         this.transEndpoints = ImmutableSet.copyOf(transEndpoints);",
                "raw_url": "https://github.com/apache/cassandra/raw/98d81e409a3512fccaeab3ba89f7cf5bfa8f39ae/src/java/org/apache/cassandra/repair/CommonRange.java",
                "sha": "dab77c51346c9dbbd33e485fd6e3020e286cc33d",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cassandra/blob/98d81e409a3512fccaeab3ba89f7cf5bfa8f39ae/src/java/org/apache/cassandra/repair/RepairRunnable.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/repair/RepairRunnable.java?ref=98d81e409a3512fccaeab3ba89f7cf5bfa8f39ae",
                "deletions": 5,
                "filename": "src/java/org/apache/cassandra/repair/RepairRunnable.java",
                "patch": "@@ -133,10 +133,11 @@ protected void fireProgressEvent(ProgressEvent event)\n     protected void fireErrorAndComplete(int progressCount, int totalProgress, String message)\n     {\n         StorageMetrics.repairExceptions.inc();\n-        fireProgressEvent(new ProgressEvent(ProgressEventType.ERROR, progressCount, totalProgress, message));\n+        String errorMessage = String.format(\"Repair command #%d failed with error %s\", cmd, message);\n+        fireProgressEvent(new ProgressEvent(ProgressEventType.ERROR, progressCount, totalProgress, errorMessage));\n         String completionMessage = String.format(\"Repair command #%d finished with error\", cmd);\n         fireProgressEvent(new ProgressEvent(ProgressEventType.COMPLETE, progressCount, totalProgress, completionMessage));\n-        recordFailure(message, completionMessage);\n+        recordFailure(errorMessage, completionMessage);\n     }\n \n \n@@ -159,7 +160,7 @@ protected void runMayThrow() throws Exception\n         }\n         catch (IllegalArgumentException | IOException e)\n         {\n-            logger.error(\"Repair failed:\", e);\n+            logger.error(\"Repair {} failed:\", parentSession, e);\n             fireErrorAndComplete(progress.get(), totalProgress, e.getMessage());\n             return;\n         }\n@@ -216,7 +217,7 @@ protected void runMayThrow() throws Exception\n         }\n         catch (IllegalArgumentException e)\n         {\n-            logger.error(\"Repair failed:\", e);\n+            logger.error(\"Repair {} failed:\", parentSession, e);\n             fireErrorAndComplete(progress.get(), totalProgress, e.getMessage());\n             return;\n         }\n@@ -230,6 +231,7 @@ protected void runMayThrow() throws Exception\n         }\n         catch (IllegalArgumentException e)\n         {\n+            logger.error(\"Repair {} failed:\", parentSession, e);\n             fireErrorAndComplete(progress.get(), totalProgress, e.getMessage());\n             return;\n         }\n@@ -261,6 +263,7 @@ protected void runMayThrow() throws Exception\n         }\n         catch (Throwable t)\n         {\n+            logger.error(\"Repair {} failed:\", parentSession, t);\n             if (!options.isPreview())\n             {\n                 SystemDistributedKeyspace.failParentRepair(parentSession, t);\n@@ -639,8 +642,11 @@ private void recordFailure(String failureMessage, String completionMessage)\n     {\n         // Note we rely on the first message being the reason for the failure\n         // when inspecting this state from RepairRunner.queryForCompletedRepair\n+        String failure = failureMessage == null ? \"unknown failure\" : failureMessage;\n+        String completion = completionMessage == null ? \"unknown completion\" : completionMessage;\n+\n         ActiveRepairService.instance.recordRepairStatus(cmd, ActiveRepairService.ParentRepairStatus.FAILED,\n-                                               ImmutableList.of(failureMessage, completionMessage));\n+                                               ImmutableList.of(failure, completion));\n     }\n \n     private static void addRangeToNeighbors(List<CommonRange> neighborRangeList, Range<Token> range, EndpointsForRange neighbors)",
                "raw_url": "https://github.com/apache/cassandra/raw/98d81e409a3512fccaeab3ba89f7cf5bfa8f39ae/src/java/org/apache/cassandra/repair/RepairRunnable.java",
                "sha": "7e931e81caab722c6d00e471ab096d524bea847d",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE in fireErrorAndComplete and make sure we log the parentSessionId and exception\n\nPatch by marcuse; reviewed by Blake Eggleston for CASSANDRA-15025",
        "parent": "https://github.com/apache/cassandra/commit/d75c438b21678eda3bf8ba3890fd7f61b9673548",
        "patched_files": [
            "RepairRunnable.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "RepairRunnableTest.java"
        ]
    },
    "cassandra_9b9c4d3": {
        "bug_id": "cassandra_9b9c4d3",
        "commit": "https://github.com/apache/cassandra/commit/9b9c4d32973ea4e586031775b3322180169135cd",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/9b9c4d32973ea4e586031775b3322180169135cd/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=9b9c4d32973ea4e586031775b3322180169135cd",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,5 +1,6 @@\n 0.8.8\n  * fix truncate allowing data to be replayed post-restart (CASSANDRA-3297)\n+ * make iwriter final in IndexWriter to avoid NPE (CASSANDRA-2863)\n \n \n 0.8.7",
                "raw_url": "https://github.com/apache/cassandra/raw/9b9c4d32973ea4e586031775b3322180169135cd/CHANGES.txt",
                "sha": "a8fb6c6b9b0c15c1ded16ef5449f4a0e1158fa82",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cassandra/blob/9b9c4d32973ea4e586031775b3322180169135cd/src/java/org/apache/cassandra/io/sstable/SSTableWriter.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/sstable/SSTableWriter.java?ref=9b9c4d32973ea4e586031775b3322180169135cd",
                "deletions": 11,
                "filename": "src/java/org/apache/cassandra/io/sstable/SSTableWriter.java",
                "patch": "@@ -302,19 +302,18 @@ public SSTableReader build() throws IOException\n         {\n             if (cfs.isInvalid())\n                 return null;\n-            maybeOpenIndexer();\n \n             File ifile = new File(desc.filenameFor(SSTable.COMPONENT_INDEX));\n             File ffile = new File(desc.filenameFor(SSTable.COMPONENT_FILTER));\n             assert !ifile.exists();\n             assert !ffile.exists();\n \n-            long estimatedRows = indexer.prepareIndexing();\n+            maybeOpenIndexer();\n \n             // build the index and filter\n             long rows = indexer.index();\n \n-            logger.debug(\"estimated row count was {} of real count\", ((double)estimatedRows) / rows);\n+            logger.debug(\"estimated row count was {} of real count\", ((double)indexer.estimatedRows) / rows);\n             return SSTableReader.open(rename(desc, SSTable.componentsFor(desc, false)));\n         }\n     }\n@@ -324,8 +323,9 @@ public SSTableReader build() throws IOException\n         protected final Descriptor desc;\n         public final BufferedRandomAccessFile dfile;\n         private final OperationType type;\n+        protected final IndexWriter iwriter;\n+        public final long estimatedRows;\n \n-        protected IndexWriter iwriter;\n         protected ColumnFamilyStore cfs;\n \n         RowIndexer(Descriptor desc, ColumnFamilyStore cfs, OperationType type) throws IOException\n@@ -339,16 +339,11 @@ protected RowIndexer(Descriptor desc, BufferedRandomAccessFile dfile, ColumnFami\n             this.dfile = dfile;\n             this.type = type;\n             this.cfs = cfs;\n-        }\n \n-        long prepareIndexing() throws IOException\n-        {\n-            long estimatedRows;\n             try\n             {\n-                estimatedRows = SSTable.estimateRowsFromData(desc, dfile);\n-                iwriter = new IndexWriter(desc, StorageService.getPartitioner(), estimatedRows);\n-                return estimatedRows;\n+                this.estimatedRows = SSTable.estimateRowsFromData(desc, dfile);\n+                this.iwriter = new IndexWriter(desc, StorageService.getPartitioner(), estimatedRows);\n             }\n             catch(IOException e)\n             {",
                "raw_url": "https://github.com/apache/cassandra/raw/9b9c4d32973ea4e586031775b3322180169135cd/src/java/org/apache/cassandra/io/sstable/SSTableWriter.java",
                "sha": "6a181aeaae287ff7f07afc34807479e821a41bc0",
                "status": "modified"
            }
        ],
        "message": "Make SSTW.RowIndexer.iwriter a final field to avoid NPE\npatch by slebresne; reviewed by jbellis for CASSANDRA-2863\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-0.8@1180958 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cassandra/commit/467e89b12f62bbe3a2e05407383d2cac0b8e88eb",
        "patched_files": [
            "SSTableWriter.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "SSTableWriterTest.java"
        ]
    },
    "cassandra_9ee34b6": {
        "bug_id": "cassandra_9ee34b6",
        "commit": "https://github.com/apache/cassandra/commit/9ee34b6e656428299a98eb2f1403b2246be3190f",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/9ee34b6e656428299a98eb2f1403b2246be3190f/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamilyStore.java?ref=9ee34b6e656428299a98eb2f1403b2246be3190f",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "patch": "@@ -612,6 +612,10 @@ public static void removeUnfinishedCompactionLeftovers(CFMetaData metadata, Map<\n             {\n                 throw new FSReadError(e, desc.filenameFor(Component.STATS));\n             }\n+            catch (NullPointerException e)\n+            {\n+                throw new FSReadError(e, \"Failed to remove unfinished compaction leftovers (file: \" + desc.filenameFor(Component.STATS) + \").  See log for details.\");\n+            }\n \n             if (!ancestors.isEmpty()\n                 && unfinishedGenerations.containsAll(ancestors)",
                "raw_url": "https://github.com/apache/cassandra/raw/9ee34b6e656428299a98eb2f1403b2246be3190f/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "sha": "3d5e4c2d4bae8f9c8bb631c876801f5eec7dde20",
                "status": "modified"
            }
        ],
        "message": "Make logging for NPE in removeUnfinishedCompactionLeftovers more useful\n\nPatch by jmckenzie; reviewed by ayeschenko for CASSANDRA-8544",
        "parent": "https://github.com/apache/cassandra/commit/107545b3929c32c61e7d00c6ca448c10046db792",
        "patched_files": [
            "ColumnFamilyStore.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "ColumnFamilyStoreTest.java"
        ]
    },
    "cassandra_a586f6c": {
        "bug_id": "cassandra_a586f6c",
        "commit": "https://github.com/apache/cassandra/commit/a586f6c88dab173663b765261d084ed8410efe81",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/a586f6c88dab173663b765261d084ed8410efe81/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=a586f6c88dab173663b765261d084ed8410efe81",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,5 +1,6 @@\n 3.0.15\n  * Fix pending view mutations handling and cleanup batchlog when there are local and remote paired mutations (CASSANDRA-13069)\n+ * Improve config validation and documentation on overflow and NPE (CASSANDRA-13622)\n  * Range deletes in a CAS batch are ignored (CASSANDRA-13655)\n  * Change repair midpoint logging for tiny ranges (CASSANDRA-13603)\n  * Better handle corrupt final commitlog segment (CASSANDRA-11995)",
                "raw_url": "https://github.com/apache/cassandra/raw/a586f6c88dab173663b765261d084ed8410efe81/CHANGES.txt",
                "sha": "6053117a109033b785aa7abed23b6eef0a1400d8",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/a586f6c88dab173663b765261d084ed8410efe81/conf/cassandra.yaml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/conf/cassandra.yaml?ref=a586f6c88dab173663b765261d084ed8410efe81",
                "deletions": 2,
                "filename": "conf/cassandra.yaml",
                "patch": "@@ -315,6 +315,7 @@ commitlog_sync_period_in_ms: 10000\n # is reasonable.\n # Max mutation size is also configurable via max_mutation_size_in_kb setting in\n # cassandra.yaml. The default is half the size commitlog_segment_size_in_mb * 1024.\n+# This should be positive and less than 2048.\n #\n # NOTE: If max_mutation_size_in_kb is set explicitly then commitlog_segment_size_in_mb must\n # be set to at least twice the size of max_mutation_size_in_kb / 1024\n@@ -517,7 +518,7 @@ native_transport_port: 9042\n #\n # The maximum size of allowed frame. Frame (requests) larger than this will\n # be rejected as invalid. The default is 256MB. If you're changing this parameter,\n-# you may want to adjust max_value_size_in_mb accordingly.\n+# you may want to adjust max_value_size_in_mb accordingly. This should be positive and less than 2048.\n # native_transport_max_frame_size_in_mb: 256\n \n # The maximum number of concurrent client connections.\n@@ -960,7 +961,7 @@ windows_timer_interval: 1\n \n # Maximum size of any value in SSTables. Safety measure to detect SSTable corruption\n # early. Any value size larger than this threshold will result into marking an SSTable\n-# as corrupted.\n+# as corrupted. This should be positive and less than 2048.\n # max_value_size_in_mb: 256\n \n # Coalescing Strategies #",
                "raw_url": "https://github.com/apache/cassandra/raw/a586f6c88dab173663b765261d084ed8410efe81/conf/cassandra.yaml",
                "sha": "d77d27a2f5dd6f5498c6d7e79950e003e0c813c1",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/cassandra/blob/a586f6c88dab173663b765261d084ed8410efe81/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/DatabaseDescriptor.java?ref=a586f6c88dab173663b765261d084ed8410efe81",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "patch": "@@ -442,6 +442,9 @@ else if (conf.disk_access_mode == Config.DiskAccessMode.mmap_index_only)\n \n         if (conf.native_transport_max_frame_size_in_mb <= 0)\n             throw new ConfigurationException(\"native_transport_max_frame_size_in_mb must be positive, but was \" + conf.native_transport_max_frame_size_in_mb, false);\n+        else if (conf.native_transport_max_frame_size_in_mb >= 2048)\n+            throw new ConfigurationException(\"native_transport_max_frame_size_in_mb must be smaller than 2048, but was \"\n+                    + conf.native_transport_max_frame_size_in_mb, false);\n \n         // fail early instead of OOMing (see CASSANDRA-8116)\n         if (ThriftServer.HSHA.equals(conf.rpc_server_type) && conf.rpc_max_threads == Integer.MAX_VALUE)\n@@ -576,6 +579,8 @@ public int compare(InetAddress endpoint1, InetAddress endpoint2)\n         /* data file and commit log directories. they get created later, when they're needed. */\n         for (String datadir : conf.data_file_directories)\n         {\n+            if (datadir == null)\n+                throw new ConfigurationException(\"data_file_directories must not contain empty entry\", false);\n             if (datadir.equals(conf.commitlog_directory))\n                 throw new ConfigurationException(\"commitlog_directory must not be the same as any data_file_directories\", false);\n             if (datadir.equals(conf.hints_directory))\n@@ -718,6 +723,13 @@ else if (conf.num_tokens > MAX_NUM_TOKENS)\n         if (conf.user_defined_function_fail_timeout < conf.user_defined_function_warn_timeout)\n             throw new ConfigurationException(\"user_defined_function_warn_timeout must less than user_defined_function_fail_timeout\", false);\n \n+        if (conf.commitlog_segment_size_in_mb <= 0)\n+            throw new ConfigurationException(\"commitlog_segment_size_in_mb must be positive, but was \"\n+                    + conf.commitlog_segment_size_in_mb, false);\n+        else if (conf.commitlog_segment_size_in_mb >= 2048)\n+            throw new ConfigurationException(\"commitlog_segment_size_in_mb must be smaller than 2048, but was \"\n+                    + conf.commitlog_segment_size_in_mb, false);\n+\n         if (conf.max_mutation_size_in_kb == null)\n             conf.max_mutation_size_in_kb = conf.commitlog_segment_size_in_mb * 1024 / 2;\n         else if (conf.commitlog_segment_size_in_mb * 1024 < 2 * conf.max_mutation_size_in_kb)\n@@ -733,6 +745,9 @@ else if (conf.commitlog_segment_size_in_mb * 1024 < 2 * conf.max_mutation_size_i\n \n         if (conf.max_value_size_in_mb == null || conf.max_value_size_in_mb <= 0)\n             throw new ConfigurationException(\"max_value_size_in_mb must be positive\", false);\n+        else if (conf.max_value_size_in_mb >= 2048)\n+            throw new ConfigurationException(\"max_value_size_in_mb must be smaller than 2048, but was \"\n+                    + conf.max_value_size_in_mb, false);\n \n         if (conf.otc_coalescing_enough_coalesced_messages > 128)\n             throw new ConfigurationException(\"otc_coalescing_enough_coalesced_messages must be smaller than 128\", false);",
                "raw_url": "https://github.com/apache/cassandra/raw/a586f6c88dab173663b765261d084ed8410efe81/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "sha": "029db89cd940dd95d2b3848ef1e697a89cc79c6c",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cassandra/blob/a586f6c88dab173663b765261d084ed8410efe81/src/java/org/apache/cassandra/utils/FBUtilities.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/utils/FBUtilities.java?ref=a586f6c88dab173663b765261d084ed8410efe81",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/utils/FBUtilities.java",
                "patch": "@@ -34,6 +34,8 @@\n \n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Joiner;\n+import com.google.common.base.Strings;\n+\n import org.apache.commons.lang3.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -82,8 +84,9 @@\n \n     public static int getAvailableProcessors()\n     {\n-        if (System.getProperty(\"cassandra.available_processors\") != null)\n-            return Integer.parseInt(System.getProperty(\"cassandra.available_processors\"));\n+        String availableProcessors = System.getProperty(\"cassandra.available_processors\");\n+        if (!Strings.isNullOrEmpty(availableProcessors))\n+            return Integer.parseInt(availableProcessors);\n         else\n             return Runtime.getRuntime().availableProcessors();\n     }",
                "raw_url": "https://github.com/apache/cassandra/raw/a586f6c88dab173663b765261d084ed8410efe81/src/java/org/apache/cassandra/utils/FBUtilities.java",
                "sha": "5562f5e22c370f4ec12fba1346e9fc4e820642e3",
                "status": "modified"
            }
        ],
        "message": "Improve config validation and documentation on overflow and NPE\n\npatch by Zhao Yang; reviewed by Kurt Greaves for CASSANDRA-13622",
        "parent": "https://github.com/apache/cassandra/commit/12103653f313d6f1ef030a535986123ddcffea9c",
        "patched_files": [
            "DatabaseDescriptor.java",
            "FBUtilities.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "FBUtilitiesTest.java",
            "DatabaseDescriptorTest.java"
        ]
    },
    "cassandra_abb39c2": {
        "bug_id": "cassandra_abb39c2",
        "commit": "https://github.com/apache/cassandra/commit/abb39c2bc4f985b848c07d181b45efd378b4795c",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/abb39c2bc4f985b848c07d181b45efd378b4795c/CHANGES.txt",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=abb39c2bc4f985b848c07d181b45efd378b4795c",
                "deletions": 2,
                "filename": "CHANGES.txt",
                "patch": "@@ -12,6 +12,8 @@\n  * fix stress tool that hangs forever on timeout or error (CASSANDRA-4128)\n  * Fix super columns bug where cache is not updated (CASSANDRA-4190)\n  * stress tool to return appropriate exit code on failure (CASSANDRA-4188)\n+ * fix compaction NPE when out of disk space and assertions disabled\n+   (CASSANDRA-3985)\n \n \n 1.0.9\n@@ -27,8 +29,6 @@\n  * don't change manifest level for cleanup, scrub, and upgradesstables\n    operations under LeveledCompactionStrategy (CASSANDRA-3989, 4112)\n  * fix race leading to super columns assertion failure (CASSANDRA-3957)\n- * ensure that directory is selected for compaction for user-defined\n-   tasks and upgradesstables (CASSANDRA-3985)\n  * fix NPE on invalid CQL delete command (CASSANDRA-3755)\n  * allow custom types in CLI's assume command (CASSANDRA-4081)\n  * fix totalBytes count for parallel compactions (CASSANDRA-3758)",
                "raw_url": "https://github.com/apache/cassandra/raw/abb39c2bc4f985b848c07d181b45efd378b4795c/CHANGES.txt",
                "sha": "1c1c184f6665c2fa572be083f98fce338326cb70",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cassandra/blob/abb39c2bc4f985b848c07d181b45efd378b4795c/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/DatabaseDescriptor.java?ref=abb39c2bc4f985b848c07d181b45efd378b4795c",
                "deletions": 21,
                "filename": "src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "patch": "@@ -757,23 +757,19 @@ public static String getSavedCachesLocation()\n         return Collections.unmodifiableSet(new HashSet(seedProvider.getSeeds()));\n     }\n \n-    public synchronized static String getDataFileLocationForTable(String table, long expectedCompactedFileSize)\n-    {\n-        return getDataFileLocationForTable(table, expectedCompactedFileSize, true);\n-    }\n-\n     /*\n      * Loop through all the disks to see which disk has the max free space\n      * return the disk with max free space for compactions. If the size of the expected\n      * compacted file is greater than the max disk space available return null, we cannot\n      * do compaction in this case.\n      *\n+     * Should only be called by Table.getDataFileLocation, which knows how to free up extra space under\n+     * some contitions to retry.  (Left public because some test methods cheat and call this directly.)\n+     *\n      * @param table name of the table.\n      * @param expectedCompactedSize expected file size in bytes.\n-     * @param ensureFreeSpace Flag if the function should ensure enough free space exists for the expected file size.\n-     *                        If False and there is not enough free space a warning is logged, and the dir with the most space is returned.\n      */\n-    public synchronized static String getDataFileLocationForTable(String table, long expectedCompactedFileSize, boolean ensureFreeSpace)\n+    public synchronized static String getDataFileLocationForTable(String table, long expectedCompactedFileSize)\n     {\n         long maxFreeDisk = 0;\n         int maxDiskIndex = 0;\n@@ -791,22 +787,13 @@ public synchronized static String getDataFileLocationForTable(String table, long\n             }\n         }\n \n-        logger.debug(\"expected data files size is {}; largest free partition has {} bytes free\",\n-                     expectedCompactedFileSize,\n-                     maxFreeDisk);\n-\n         // Load factor of 0.9 we do not want to use the entire disk that is too risky.\n         maxFreeDisk = (long) (0.9 * maxFreeDisk);\n-        if (!ensureFreeSpace || expectedCompactedFileSize < maxFreeDisk)\n-        {\n-            dataFileDirectory = dataDirectoryForTable[maxDiskIndex];\n+        logger.debug(\"expected data files size is {}; largest free partition has {} bytes usable\",\n+                     expectedCompactedFileSize, maxFreeDisk);\n \n-            if (expectedCompactedFileSize >= maxFreeDisk)\n-                logger.warn(String.format(\"Data file location %s only has %d free, expected size is %d\",\n-                                          dataFileDirectory,\n-                                          maxFreeDisk,\n-                                          expectedCompactedFileSize));\n-        }\n+        if (expectedCompactedFileSize < maxFreeDisk)\n+            dataFileDirectory = dataDirectoryForTable[maxDiskIndex];\n \n         return dataFileDirectory;\n     }",
                "raw_url": "https://github.com/apache/cassandra/raw/abb39c2bc4f985b848c07d181b45efd378b4795c/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "sha": "82132012826d3a7068542d59d3a771d2f4b5153d",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cassandra/blob/abb39c2bc4f985b848c07d181b45efd378b4795c/src/java/org/apache/cassandra/db/Table.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/Table.java?ref=abb39c2bc4f985b848c07d181b45efd378b4795c",
                "deletions": 8,
                "filename": "src/java/org/apache/cassandra/db/Table.java",
                "patch": "@@ -556,17 +556,15 @@ private Object indexLockFor(ByteBuffer key)\n \n     public String getDataFileLocation(long expectedSize)\n     {\n-        return getDataFileLocation(expectedSize, true);\n-    }\n+        String path = DatabaseDescriptor.getDataFileLocationForTable(name, expectedSize);\n \n-    public String getDataFileLocation(long expectedSize, boolean ensureFreeSpace)\n-    {\n-        String path = DatabaseDescriptor.getDataFileLocationForTable(name, expectedSize, ensureFreeSpace);\n         // Requesting GC has a chance to free space only if we're using mmap and a non SUN jvm\n         if (path == null\n-         && (DatabaseDescriptor.getDiskAccessMode() == Config.DiskAccessMode.mmap || DatabaseDescriptor.getIndexAccessMode() == Config.DiskAccessMode.mmap)\n-         && !MmappedSegmentedFile.isCleanerAvailable())\n+            && (DatabaseDescriptor.getDiskAccessMode() == Config.DiskAccessMode.mmap || DatabaseDescriptor.getIndexAccessMode() == Config.DiskAccessMode.mmap)\n+            && !MmappedSegmentedFile.isCleanerAvailable())\n         {\n+            logger.info(\"Forcing GC to free up disk space.  Upgrade to the Oracle JVM to avoid this\");\n+\n             StorageService.instance.requestGC();\n             // retry after GCing has forced unmap of compacted SSTables so they can be deleted\n             // Note: GCInspector will do this already, but only sun JVM supports GCInspector so far\n@@ -579,8 +577,9 @@ public String getDataFileLocation(long expectedSize, boolean ensureFreeSpace)\n             {\n                 throw new AssertionError(e);\n             }\n-            path = DatabaseDescriptor.getDataFileLocationForTable(name, expectedSize, ensureFreeSpace);\n+            path = DatabaseDescriptor.getDataFileLocationForTable(name, expectedSize);\n         }\n+\n         return path;\n     }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/abb39c2bc4f985b848c07d181b45efd378b4795c/src/java/org/apache/cassandra/db/Table.java",
                "sha": "d3a38dbe587b6f23c850296b016e1f76f0b6950b",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cassandra/blob/abb39c2bc4f985b848c07d181b45efd378b4795c/src/java/org/apache/cassandra/db/compaction/CompactionTask.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/compaction/CompactionTask.java?ref=abb39c2bc4f985b848c07d181b45efd378b4795c",
                "deletions": 15,
                "filename": "src/java/org/apache/cassandra/db/compaction/CompactionTask.java",
                "patch": "@@ -77,7 +77,7 @@ public int execute(CompactionExecutorStatsCollector collector) throws IOExceptio\n             return 0;\n \n         if (compactionFileLocation == null)\n-            compactionFileLocation = cfs.table.getDataFileLocation(cfs.getExpectedCompactedFileSize(toCompact), ensureFreeSpace());\n+            compactionFileLocation = cfs.table.getDataFileLocation(cfs.getExpectedCompactedFileSize(toCompact));\n \n         if (compactionFileLocation == null && partialCompactionsAcceptable())\n         {\n@@ -89,17 +89,14 @@ public int execute(CompactionExecutorStatsCollector collector) throws IOExceptio\n                 // Note that we have removed files that are still marked as compacting.\n                 // This suboptimal but ok since the caller will unmark all the sstables at the end.\n                 toCompact.remove(cfs.getMaxSizeFile(toCompact));\n-                compactionFileLocation = cfs.table.getDataFileLocation(cfs.getExpectedCompactedFileSize(toCompact),\n-                                                                       ensureFreeSpace());\n-            }\n-\n-            if (compactionFileLocation == null)\n-            {\n-                logger.warn(\"insufficient space to compact even the two smallest files, aborting\");\n-                return 0;\n+                compactionFileLocation = cfs.table.getDataFileLocation(cfs.getExpectedCompactedFileSize(toCompact));\n             }\n         }\n-        assert compactionFileLocation != null;\n+        if (compactionFileLocation == null)\n+        {\n+            logger.warn(\"insufficient space to compact; aborting compaction\");\n+            return 0;\n+        }\n \n         if (DatabaseDescriptor.isSnapshotBeforeCompaction())\n             cfs.snapshotWithoutFlush(System.currentTimeMillis() + \"-\" + \"compact-\" + cfs.columnFamily);\n@@ -231,11 +228,6 @@ protected boolean partialCompactionsAcceptable()\n         return !isUserDefined;\n     }\n \n-    protected boolean ensureFreeSpace()\n-    {\n-        return !isUserDefined;\n-    }\n-\n     //extensibility point for other strategies that may want to limit the upper bounds of the sstable segment size\n     protected boolean newSSTableSegmentThresholdReached(SSTableWriter writer, long position)\n     {",
                "raw_url": "https://github.com/apache/cassandra/raw/abb39c2bc4f985b848c07d181b45efd378b4795c/src/java/org/apache/cassandra/db/compaction/CompactionTask.java",
                "sha": "2a1b4156329bd31c25b0b2c01c0fc88775ecb4eb",
                "status": "modified"
            }
        ],
        "message": "fix compaction NPE when out of disk space and assertions disabled\npatch by jbellis; reviewed by xedin for CASSANDRA-3985",
        "parent": "https://github.com/apache/cassandra/commit/f20badb685393e60f74b236edf623c7c9264f1eb",
        "patched_files": [
            "DatabaseDescriptor.java",
            "Table.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "DatabaseDescriptorTest.java",
            "TableTest.java"
        ]
    },
    "cassandra_ad6ba3d": {
        "bug_id": "cassandra_ad6ba3d",
        "commit": "https://github.com/apache/cassandra/commit/ad6ba3d243058f060569ad16d6713f46e2ce6160",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/ad6ba3d243058f060569ad16d6713f46e2ce6160/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=ad6ba3d243058f060569ad16d6713f46e2ce6160",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 2.0.10\n+ * Fix NPE in FileCacheService.sizeInBytes (CASSANDRA-7756)\n  * (cqlsh) cqlsh should automatically disable tracing when selecting\n    from system_traces (CASSANDRA-7641)\n  * (Hadoop) Add CqlOutputFormat (CASSANDRA-6927)",
                "raw_url": "https://github.com/apache/cassandra/raw/ad6ba3d243058f060569ad16d6713f46e2ce6160/CHANGES.txt",
                "sha": "4306de5652837d3387573bf9a254d850cf4e024b",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/ad6ba3d243058f060569ad16d6713f46e2ce6160/src/java/org/apache/cassandra/io/util/RandomAccessReader.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/util/RandomAccessReader.java?ref=ad6ba3d243058f060569ad16d6713f46e2ce6160",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/io/util/RandomAccessReader.java",
                "patch": "@@ -154,7 +154,10 @@ public String getPath()\n \n     public int getTotalBufferSize()\n     {\n-        return buffer.length;\n+        //This may NPE so we make a ref\n+        //https://issues.apache.org/jira/browse/CASSANDRA-7756\n+        byte[] ref = buffer;\n+        return ref != null ? ref.length : 0;\n     }\n \n     public void reset()",
                "raw_url": "https://github.com/apache/cassandra/raw/ad6ba3d243058f060569ad16d6713f46e2ce6160/src/java/org/apache/cassandra/io/util/RandomAccessReader.java",
                "sha": "09ecac097423b313fe9e110f1f787734c3a349a3",
                "status": "modified"
            },
            {
                "additions": 70,
                "blob_url": "https://github.com/apache/cassandra/blob/ad6ba3d243058f060569ad16d6713f46e2ce6160/test/unit/org/apache/cassandra/io/util/BufferedRandomAccessFileTest.java",
                "changes": 70,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/io/util/BufferedRandomAccessFileTest.java?ref=ad6ba3d243058f060569ad16d6713f46e2ce6160",
                "deletions": 0,
                "filename": "test/unit/org/apache/cassandra/io/util/BufferedRandomAccessFileTest.java",
                "patch": "@@ -19,6 +19,7 @@\n  */\n package org.apache.cassandra.io.util;\n \n+import org.apache.cassandra.service.FileCacheService;\n import org.apache.cassandra.utils.ByteBufferUtil;\n \n import java.io.File;\n@@ -28,6 +29,11 @@\n import java.nio.channels.ClosedChannelException;\n import java.util.Arrays;\n import java.util.concurrent.Callable;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n import static org.apache.cassandra.Util.expectEOF;\n import static org.apache.cassandra.Util.expectException;\n@@ -507,6 +513,70 @@ public void testAssertionErrorWhenBytesPastMarkIsNegative() throws IOException\n         r.bytesPastMark();\n     }\n \n+    @Test\n+    public void testFileCacheService() throws IOException, InterruptedException\n+    {\n+        //see https://issues.apache.org/jira/browse/CASSANDRA-7756\n+\n+        final int THREAD_COUNT = 40;\n+        ExecutorService executorService = Executors.newFixedThreadPool(THREAD_COUNT);\n+\n+        SequentialWriter w1 = createTempFile(\"fscache1\");\n+        SequentialWriter w2 = createTempFile(\"fscache2\");\n+\n+        w1.write(new byte[30]);\n+        w1.close();\n+\n+        w2.write(new byte[30]);\n+        w2.close();\n+\n+        for (int i = 0; i < 20; i++)\n+        {\n+\n+\n+            RandomAccessReader r1 = RandomAccessReader.open(w1);\n+            RandomAccessReader r2 = RandomAccessReader.open(w2);\n+\n+\n+            FileCacheService.instance.put(r1);\n+            FileCacheService.instance.put(r2);\n+\n+            final CountDownLatch finished = new CountDownLatch(THREAD_COUNT);\n+            final AtomicBoolean hadError = new AtomicBoolean(false);\n+\n+            for (int k = 0; k < THREAD_COUNT; k++)\n+            {\n+                executorService.execute( new Runnable()\n+                {\n+                    @Override\n+                    public void run()\n+                    {\n+                        try\n+                        {\n+                            long size = FileCacheService.instance.sizeInBytes();\n+\n+                            while (size > 0)\n+                                size = FileCacheService.instance.sizeInBytes();\n+                        }\n+                        catch (Throwable t)\n+                        {\n+                            t.printStackTrace();\n+                            hadError.set(true);\n+                        }\n+                        finally\n+                        {\n+                            finished.countDown();\n+                        }\n+                    }\n+                });\n+\n+            }\n+\n+            finished.await();\n+            assert !hadError.get();\n+        }\n+    }\n+\n     @Test\n     public void testReadOnly() throws IOException\n     {",
                "raw_url": "https://github.com/apache/cassandra/raw/ad6ba3d243058f060569ad16d6713f46e2ce6160/test/unit/org/apache/cassandra/io/util/BufferedRandomAccessFileTest.java",
                "sha": "a16b2913032e7490a7a9722c9a36b5d4407b36d1",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in FileCacheService.sizeInBytes\n\npatch by tjake; reviewed by jbellis for (CASSANDRA-7756)",
        "parent": "https://github.com/apache/cassandra/commit/e7566609e232d2adee2e2879ad4811b7cce1f5d2",
        "patched_files": [
            "RandomAccessReader.java",
            "CHANGES.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "BufferedRandomAccessFileTest.java"
        ]
    },
    "cassandra_b3a9a44": {
        "bug_id": "cassandra_b3a9a44",
        "commit": "https://github.com/apache/cassandra/commit/b3a9a443433a271fee33bede60d4892e0c8ffb03",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/b3a9a443433a271fee33bede60d4892e0c8ffb03/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=b3a9a443433a271fee33bede60d4892e0c8ffb03",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -27,6 +27,7 @@\n  * Optimize single partition batch statements (CASSANDRA-6737)\n  * Disallow post-query re-ordering when paging (CASSANDRA-6722)\n  * Fix potential paging bug with deleted columns (CASSANDRA-6748)\n+ * Fix NPE on BulkLoader caused by losing StreamEvent (CASSANDRA-6636)\n Merged from 1.2:\n  * Add CMSClassUnloadingEnabled JVM option (CASSANDRA-6541)\n  * Catch memtable flush exceptions during shutdown (CASSANDRA-6735)",
                "raw_url": "https://github.com/apache/cassandra/raw/b3a9a443433a271fee33bede60d4892e0c8ffb03/CHANGES.txt",
                "sha": "3e73f910672d193ad7d229f754e0ecff20027ac5",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/b3a9a443433a271fee33bede60d4892e0c8ffb03/src/java/org/apache/cassandra/io/sstable/SSTableLoader.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/sstable/SSTableLoader.java?ref=b3a9a443433a271fee33bede60d4892e0c8ffb03",
                "deletions": 4,
                "filename": "src/java/org/apache/cassandra/io/sstable/SSTableLoader.java",
                "patch": "@@ -144,7 +144,7 @@ public StreamResultFuture stream()\n         return stream(Collections.<InetAddress>emptySet());\n     }\n \n-    public StreamResultFuture stream(Set<InetAddress> toIgnore)\n+    public StreamResultFuture stream(Set<InetAddress> toIgnore, StreamEventHandler... listeners)\n     {\n         client.init(keyspace);\n         outputHandler.output(\"Established connection to initial hosts\");\n@@ -175,9 +175,8 @@ public StreamResultFuture stream(Set<InetAddress> toIgnore)\n \n             plan.transferFiles(remote, streamingDetails.get(remote));\n         }\n-        StreamResultFuture bulkResult = plan.execute();\n-        bulkResult.addEventListener(this);\n-        return bulkResult;\n+        plan.listeners(this, listeners);\n+        return plan.execute();\n     }\n \n     public void onSuccess(StreamState finalState) {}",
                "raw_url": "https://github.com/apache/cassandra/raw/b3a9a443433a271fee33bede60d4892e0c8ffb03/src/java/org/apache/cassandra/io/sstable/SSTableLoader.java",
                "sha": "1ea4c55b5e684cbb2b8f06253e66125a3d2caa8f",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cassandra/blob/b3a9a443433a271fee33bede60d4892e0c8ffb03/src/java/org/apache/cassandra/streaming/StreamPlan.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/streaming/StreamPlan.java?ref=b3a9a443433a271fee33bede60d4892e0c8ffb03",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/streaming/StreamPlan.java",
                "patch": "@@ -33,6 +33,7 @@\n {\n     private final UUID planId = UUIDGen.getTimeUUID();\n     private final String description;\n+    private final List<StreamEventHandler> handlers = new ArrayList<>();\n \n     // sessions per InetAddress of the other end.\n     private final Map<InetAddress, StreamSession> sessions = new HashMap<>();\n@@ -121,6 +122,14 @@ public StreamPlan transferFiles(InetAddress to, Collection<StreamSession.SSTable\n         return this;\n     }\n \n+    public StreamPlan listeners(StreamEventHandler handler, StreamEventHandler... handlers)\n+    {\n+        this.handlers.add(handler);\n+        if (handlers != null)\n+            Collections.addAll(this.handlers, handlers);\n+        return this;\n+    }\n+\n     /**\n      * @return true if this plan has no plan to execute\n      */\n@@ -136,7 +145,7 @@ public boolean isEmpty()\n      */\n     public StreamResultFuture execute()\n     {\n-        return StreamResultFuture.init(planId, description, sessions.values());\n+        return StreamResultFuture.init(planId, description, sessions.values(), handlers);\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/cassandra/raw/b3a9a443433a271fee33bede60d4892e0c8ffb03/src/java/org/apache/cassandra/streaming/StreamPlan.java",
                "sha": "740ad6645944a37d68e153fe2594e50556c95a10",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cassandra/blob/b3a9a443433a271fee33bede60d4892e0c8ffb03/src/java/org/apache/cassandra/streaming/StreamResultFuture.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/streaming/StreamResultFuture.java?ref=b3a9a443433a271fee33bede60d4892e0c8ffb03",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/streaming/StreamResultFuture.java",
                "patch": "@@ -75,9 +75,14 @@ private StreamResultFuture(UUID planId, String description, Collection<StreamSes\n             set(getCurrentState());\n     }\n \n-    static StreamResultFuture init(UUID planId, String description, Collection<StreamSession> sessions)\n+    static StreamResultFuture init(UUID planId, String description, Collection<StreamSession> sessions, Collection<StreamEventHandler> listeners)\n     {\n         StreamResultFuture future = createAndRegister(planId, description, sessions);\n+        if (listeners != null)\n+        {\n+            for (StreamEventHandler listener : listeners)\n+                future.addEventListener(listener);\n+        }\n \n         logger.info(\"[Stream #{}] Executing streaming plan for {}\", planId,  description);\n         // start sessions",
                "raw_url": "https://github.com/apache/cassandra/raw/b3a9a443433a271fee33bede60d4892e0c8ffb03/src/java/org/apache/cassandra/streaming/StreamResultFuture.java",
                "sha": "dcffaff54c4a9d5c95efb0aea810657bb31f3270",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/b3a9a443433a271fee33bede60d4892e0c8ffb03/src/java/org/apache/cassandra/tools/BulkLoader.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/tools/BulkLoader.java?ref=b3a9a443433a271fee33bede60d4892e0c8ffb03",
                "deletions": 3,
                "filename": "src/java/org/apache/cassandra/tools/BulkLoader.java",
                "patch": "@@ -79,7 +79,10 @@ public static void main(String args[])\n         StreamResultFuture future = null;\n         try\n         {\n-            future = loader.stream(options.ignores);\n+            if (options.noProgress)\n+                future = loader.stream(options.ignores);\n+            else\n+                future = loader.stream(options.ignores, new ProgressIndicator());\n         }\n         catch (Exception e)\n         {\n@@ -94,8 +97,6 @@ public static void main(String args[])\n         }\n \n         handler.output(String.format(\"Streaming session ID: %s\", future.planId));\n-        if (!options.noProgress)\n-            future.addEventListener(new ProgressIndicator());\n \n         try\n         {",
                "raw_url": "https://github.com/apache/cassandra/raw/b3a9a443433a271fee33bede60d4892e0c8ffb03/src/java/org/apache/cassandra/tools/BulkLoader.java",
                "sha": "37ec635d98d966b4802be0a843a63200c15fca65",
                "status": "modified"
            }
        ],
        "message": "Fix NPE on BulkLoader caused by losing StreamEvent\n\npatch by yukim; reviewed by sankalp kohli for CASSANDRA-6636",
        "parent": "https://github.com/apache/cassandra/commit/fd53628cb0e229e1ecc095eeebde056f0ae3e202",
        "patched_files": [
            "SSTableLoader.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "SSTableLoaderTest.java"
        ]
    },
    "cassandra_b66e5a1": {
        "bug_id": "cassandra_b66e5a1",
        "commit": "https://github.com/apache/cassandra/commit/b66e5a189674536903638b2028eaac23af85266b",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/b66e5a189674536903638b2028eaac23af85266b/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=b66e5a189674536903638b2028eaac23af85266b",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 3.0.9\n+ * NullPointerException during compaction on table with static columns (CASSANDRA-12336)\n  * Fixed ConcurrentModificationException when reading metrics in GraphiteReporter (CASSANDRA-11823)\n  * Fix upgrade of super columns on thrift (CASSANDRA-12335)\n  * Fixed flacky BlacklistingCompactionsTest, switched to fixed size types and increased corruption size (CASSANDRA-12359)",
                "raw_url": "https://github.com/apache/cassandra/raw/b66e5a189674536903638b2028eaac23af85266b/CHANGES.txt",
                "sha": "046c8b39b5ea9b460ff125dbe640ff33d10effc3",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/b66e5a189674536903638b2028eaac23af85266b/src/java/org/apache/cassandra/db/transform/BaseRows.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/transform/BaseRows.java?ref=b66e5a189674536903638b2028eaac23af85266b",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/transform/BaseRows.java",
                "patch": "@@ -102,7 +102,8 @@ void add(Transformation transformation)\n         super.add(transformation);\n \n         // transform any existing data\n-        staticRow = transformation.applyToStatic(staticRow);\n+        if (staticRow != null)\n+            staticRow = transformation.applyToStatic(staticRow);\n         next = applyOne(next, transformation);\n     }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/b66e5a189674536903638b2028eaac23af85266b/src/java/org/apache/cassandra/db/transform/BaseRows.java",
                "sha": "058684008d39601a90d459bdbd26d34a0b5b6d19",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/b66e5a189674536903638b2028eaac23af85266b/test/unit/org/apache/cassandra/cql3/validation/entities/StaticColumnsTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/cql3/validation/entities/StaticColumnsTest.java?ref=b66e5a189674536903638b2028eaac23af85266b",
                "deletions": 0,
                "filename": "test/unit/org/apache/cassandra/cql3/validation/entities/StaticColumnsTest.java",
                "patch": "@@ -286,6 +286,8 @@ public void testStaticColumnPurging() throws Throwable\n \n         flush();\n \n+        Thread.sleep(1000);\n+\n         compact();\n \n         assertRows(execute(\"SELECT * FROM %s\"), row(\"k1\", \"c1\", null, \"v1\"));",
                "raw_url": "https://github.com/apache/cassandra/raw/b66e5a189674536903638b2028eaac23af85266b/test/unit/org/apache/cassandra/cql3/validation/entities/StaticColumnsTest.java",
                "sha": "efa48aef7bdca733813a3b9e8427ce4783623d16",
                "status": "modified"
            }
        ],
        "message": "NullPointerException during compaction on table with static columns\n\npatch by Sylvain Lebresne; reviewed by Carl Yeksigian for CASSANDRA-12336",
        "parent": "https://github.com/apache/cassandra/commit/cc8f6cc510f3799dde89c9e1e3cbf7515c2113f9",
        "patched_files": [
            "CHANGES.java",
            "BaseRows.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "StaticColumnsTest.java"
        ]
    },
    "cassandra_bc75679": {
        "bug_id": "cassandra_bc75679",
        "commit": "https://github.com/apache/cassandra/commit/bc756792aa4cef31e4274045ec14768b8375674b",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/bc756792aa4cef31e4274045ec14768b8375674b/CHANGES.txt",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=bc756792aa4cef31e4274045ec14768b8375674b",
                "deletions": 1,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,3 +1,6 @@\n+0.8.4\n+ * include files-to-be-streamed in StreamInSession.getSources (CASSANDRA-2972)\n+\n 0.8.3\n  * add ability to drop local reads/writes that are going to timeout\n    (CASSANDRA-2943)\n@@ -34,7 +37,6 @@\n  * add asynchronous and half-sync/half-async thrift servers (CASSANDRA-1405)\n  * fix potential use of free'd native memory in SerializingCache \n    (CASSANDRA-2951)\n- * include files-to-be-streamed in StreamInSession.getSources (CASSANDRA-2972)\n \n \n 0.8.2",
                "raw_url": "https://github.com/apache/cassandra/raw/bc756792aa4cef31e4274045ec14768b8375674b/CHANGES.txt",
                "sha": "7e7c7f8ff5076243cb0ed690433beba2cf888251",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/bc756792aa4cef31e4274045ec14768b8375674b/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/DatabaseDescriptor.java?ref=bc756792aa4cef31e4274045ec14768b8375674b",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "patch": "@@ -274,6 +274,10 @@ else if (conf.memtable_flush_writers == null)\n                     throw new ConfigurationException(\"Unknown host in rpc_address \" + conf.rpc_address);\n                 }\n             }\n+            else\n+            {\n+                rpcAddress = FBUtilities.getLocalAddress();\n+            }\n \n             if (conf.thrift_framed_transport_size_in_mb <= 0)\n                 throw new ConfigurationException(\"thrift_framed_transport_size_in_mb must be positive\");",
                "raw_url": "https://github.com/apache/cassandra/raw/bc756792aa4cef31e4274045ec14768b8375674b/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "sha": "1ccff5208021fc2afe76c93f66155a103fbdfdda",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cassandra/blob/bc756792aa4cef31e4274045ec14768b8375674b/src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java?ref=bc756792aa4cef31e4274045ec14768b8375674b",
                "deletions": 6,
                "filename": "src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java",
                "patch": "@@ -125,12 +125,6 @@ protected void setup() throws IOException\n \n         listenPort = DatabaseDescriptor.getRpcPort();\n         listenAddr = DatabaseDescriptor.getRpcAddress();\n-        /* \n-         * If ThriftAddress was left completely unconfigured, then assume\n-         * the same default as ListenAddress\n-         */\n-        if (listenAddr == null)\n-            listenAddr = FBUtilities.getLocalAddress();\n \n         Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler()\n         {",
                "raw_url": "https://github.com/apache/cassandra/raw/bc756792aa4cef31e4274045ec14768b8375674b/src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java",
                "sha": "203ecc8bf597c041d7dcc707ba502bf9087ba911",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/bc756792aa4cef31e4274045ec14768b8375674b/src/java/org/apache/cassandra/service/StorageService.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=bc756792aa4cef31e4274045ec14768b8375674b",
                "deletions": 4,
                "filename": "src/java/org/apache/cassandra/service/StorageService.java",
                "patch": "@@ -452,10 +452,7 @@ private void joinTokenRing() throws IOException, org.apache.cassandra.config.Con\n         Gossiper.instance.start(SystemTable.incrementAndGetGeneration()); // needed for node-ring gathering.\n \n         // add rpc listening info\n-        if (DatabaseDescriptor.getRpcAddress() == null)\n-            Gossiper.instance.addLocalApplicationState(ApplicationState.RPC_ADDRESS, valueFactory.rpcaddress(FBUtilities.getLocalAddress()));\n-        else\n-            Gossiper.instance.addLocalApplicationState(ApplicationState.RPC_ADDRESS, valueFactory.rpcaddress(DatabaseDescriptor.getRpcAddress()));\n+        Gossiper.instance.addLocalApplicationState(ApplicationState.RPC_ADDRESS, valueFactory.rpcaddress(DatabaseDescriptor.getRpcAddress()));\n \n         MessagingService.instance().listen(FBUtilities.getLocalAddress());\n         StorageLoadBalancer.instance.startBroadcasting();",
                "raw_url": "https://github.com/apache/cassandra/raw/bc756792aa4cef31e4274045ec14768b8375674b/src/java/org/apache/cassandra/service/StorageService.java",
                "sha": "137e76f1bcbd5d9d8e92f39d095949688fbc0a09",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in getRangeToRpcaddressMap\npatch by slebresne; reviewed by jbellis for CASSANDRA-2996\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-0.8@1154219 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cassandra/commit/931c2f1208dee513634cde9b701ef8a00c566d89",
        "patched_files": [
            "DatabaseDescriptor.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "DatabaseDescriptorTest.java"
        ]
    },
    "cassandra_bd32d4f": {
        "bug_id": "cassandra_bd32d4f",
        "commit": "https://github.com/apache/cassandra/commit/bd32d4f0b9f0f88fed97e8ddf2ee41b5b048d31d",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cassandra/blob/bd32d4f0b9f0f88fed97e8ddf2ee41b5b048d31d/src/java/org/apache/cassandra/service/StorageProxy.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageProxy.java?ref=bd32d4f0b9f0f88fed97e8ddf2ee41b5b048d31d",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/service/StorageProxy.java",
                "patch": "@@ -362,8 +362,11 @@ public void runMayThrow() throws IOException\n                 try\n                 {\n                     UUID hostId = StorageService.instance.getTokenMetadata().getHostId(target);\n-                    if ((hostId == null) && (Gossiper.instance.getVersion(target) < MessagingService.VERSION_12))\n-                        logger.info(\"Unable to store hint for host with missing ID, {} (old node?)\", target.toString());\n+                    if (hostId == null) // The node in question will not have a host id if older than MessagingService.VERSION_12 in a mixed version cluster\n+                    {\n+                        logger.warn(\"Unable to store hint for host with missing ID, {} (old node?)\", target.toString());\n+                        return;\n+                    }\n                     RowMutation hintedMutation = RowMutation.hintFor(mutation, ByteBuffer.wrap(UUIDGen.decompose(hostId)));\n                     hintedMutation.apply();\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/bd32d4f0b9f0f88fed97e8ddf2ee41b5b048d31d/src/java/org/apache/cassandra/service/StorageProxy.java",
                "sha": "10189a0b3989379be91ef638d77356e4575f2f6c",
                "status": "modified"
            }
        ],
        "message": "StorageProxy throws NPEs for when there's no hostids for a target\npatch by dbrosius reviewed by jbellis for CASSANDRA-4227",
        "parent": "https://github.com/apache/cassandra/commit/669025cf2319d66629c362e7e377ee321489bded",
        "patched_files": [
            "StorageProxy.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "StorageProxyTest.java"
        ]
    },
    "cassandra_c198b76": {
        "bug_id": "cassandra_c198b76",
        "commit": "https://github.com/apache/cassandra/commit/c198b76c46e4beae45e2a98910322a8761b73684",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/c198b76c46e4beae45e2a98910322a8761b73684/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=c198b76c46e4beae45e2a98910322a8761b73684",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -21,6 +21,7 @@\n  * Disallow empty column names in cql (CASSANDRA-6136)\n  * Use Java7 file-handling APIs and fix file moving on Windows (CASSANDRA-5383)\n  * Save compaction history to system keyspace (CASSANDRA-5078)\n+ * Fix NPE if StorageService.getOperationMode() is executed before full startup (CASSANDRA-6166)\n Merged from 1.2:\n  * Limit CQL prepared statement cache by size instead of count (CASSANDRA-6107)\n  * Tracing should log write failure rather than raw exceptions (CASSANDRA-6133)",
                "raw_url": "https://github.com/apache/cassandra/raw/c198b76c46e4beae45e2a98910322a8761b73684/CHANGES.txt",
                "sha": "2b37a39fa3d5552583a906f47dc20f8a94cb4f08",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/c198b76c46e4beae45e2a98910322a8761b73684/src/java/org/apache/cassandra/service/StorageService.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=c198b76c46e4beae45e2a98910322a8761b73684",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/service/StorageService.java",
                "patch": "@@ -175,8 +175,8 @@ public static IPartitioner getPartitioner()\n     /* the probability for tracing any particular request, 0 disables tracing and 1 enables for all */\n     private double tracingProbability = 0.0;\n \n-    private static enum Mode { NORMAL, CLIENT, JOINING, LEAVING, DECOMMISSIONED, MOVING, DRAINING, DRAINED, RELOCATING }\n-    private Mode operationMode;\n+    private static enum Mode { STARTING, NORMAL, CLIENT, JOINING, LEAVING, DECOMMISSIONED, MOVING, DRAINING, DRAINED, RELOCATING }\n+    private Mode operationMode = Mode.STARTING;\n \n     private final MigrationManager migrationManager = MigrationManager.instance;\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/c198b76c46e4beae45e2a98910322a8761b73684/src/java/org/apache/cassandra/service/StorageService.java",
                "sha": "33fa25d3d1148fcf2b7debd33fe6c0d337db5451",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cassandra/blob/c198b76c46e4beae45e2a98910322a8761b73684/test/unit/org/apache/cassandra/service/StorageServiceServerTest.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/service/StorageServiceServerTest.java?ref=c198b76c46e4beae45e2a98910322a8761b73684",
                "deletions": 0,
                "filename": "test/unit/org/apache/cassandra/service/StorageServiceServerTest.java",
                "patch": "@@ -263,4 +263,11 @@ public void testPrimaryRangesWithSimpleStrategy() throws Exception\n         assert primaryRanges.size() == 1;\n         assert primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\")));\n     }\n+    \n+    @Test\n+    public void testGetOperationMode()\n+    {\n+    \tString operationMode = StorageService.instance.getOperationMode();\n+    \tassert operationMode.equals(\"STARTING\");\n+    }\n }",
                "raw_url": "https://github.com/apache/cassandra/raw/c198b76c46e4beae45e2a98910322a8761b73684/test/unit/org/apache/cassandra/service/StorageServiceServerTest.java",
                "sha": "7189a26cbe08779bbb8aa9439d796b118b8331bf",
                "status": "modified"
            }
        ],
        "message": "Fix NPE if StorageService.getOperationMode() is executed before full startup\npatch by cwarrington reviewed by dbrosius for cassandra-6166",
        "parent": "https://github.com/apache/cassandra/commit/111c74ef94d4d75c19611ca3e77d7c54552810f0",
        "patched_files": [
            "CHANGES.java",
            "StorageService.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "StorageServiceServerTest.java"
        ]
    },
    "cassandra_c86de2a": {
        "bug_id": "cassandra_c86de2a",
        "commit": "https://github.com/apache/cassandra/commit/c86de2a9817aa45930afe181ae1891d2363393c7",
        "file": [
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/cassandra/blob/c86de2a9817aa45930afe181ae1891d2363393c7/src/java/org/apache/cassandra/net/MessagingService.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/net/MessagingService.java?ref=c86de2a9817aa45930afe181ae1891d2363393c7",
                "deletions": 14,
                "filename": "src/java/org/apache/cassandra/net/MessagingService.java",
                "patch": "@@ -536,8 +536,6 @@ public Object apply(Pair<Integer, ExpiringMap.CacheableObject<CallbackInfo>> pai\n                 if (cp != null)\n                     cp.incrementTimeout();\n \n-                getConnectionPool(expiredCallbackInfo.target).incrementTimeout();\n-\n                 if (expiredCallbackInfo.callback.supportsBackPressure())\n                 {\n                     updateBackPressureOnReceive(expiredCallbackInfo.target, expiredCallbackInfo.callback, true);\n@@ -607,8 +605,12 @@ public void updateBackPressureOnSend(InetAddress host, IAsyncCallback callback,\n     {\n         if (DatabaseDescriptor.backPressureEnabled() && callback.supportsBackPressure())\n         {\n-            BackPressureState backPressureState = getConnectionPool(host).getBackPressureState();\n-            backPressureState.onMessageSent(message);\n+            OutboundTcpConnectionPool cp = getConnectionPool(host);\n+            if (cp != null)\n+            {\n+                BackPressureState backPressureState = cp.getBackPressureState();\n+                backPressureState.onMessageSent(message);\n+            }\n         }\n     }\n \n@@ -623,11 +625,15 @@ public void updateBackPressureOnReceive(InetAddress host, IAsyncCallback callbac\n     {\n         if (DatabaseDescriptor.backPressureEnabled() && callback.supportsBackPressure())\n         {\n-            BackPressureState backPressureState = getConnectionPool(host).getBackPressureState();\n-            if (!timeout)\n-                backPressureState.onResponseReceived();\n-            else\n-                backPressureState.onResponseTimeout();\n+            OutboundTcpConnectionPool cp = getConnectionPool(host);\n+            if (cp != null)\n+            {\n+                BackPressureState backPressureState = cp.getBackPressureState();\n+                if (!timeout)\n+                    backPressureState.onResponseReceived();\n+                else\n+                    backPressureState.onResponseTimeout();\n+            }\n         }\n     }\n \n@@ -644,10 +650,16 @@ public void applyBackPressure(Iterable<InetAddress> hosts, long timeoutInNanos)\n     {\n         if (DatabaseDescriptor.backPressureEnabled())\n         {\n-            backPressure.apply(StreamSupport.stream(hosts.spliterator(), false)\n-                    .filter(h -> !h.equals(FBUtilities.getBroadcastAddress()))\n-                    .map(h -> getConnectionPool(h).getBackPressureState())\n-                    .collect(Collectors.toSet()), timeoutInNanos, TimeUnit.NANOSECONDS);\n+            Set<BackPressureState> states = new HashSet<BackPressureState>();\n+            for (InetAddress host : hosts)\n+            {\n+                if (host.equals(FBUtilities.getBroadcastAddress()))\n+                    continue;\n+                OutboundTcpConnectionPool cp = getConnectionPool(host);\n+                if (cp != null)\n+                    states.add(cp.getBackPressureState());\n+            }\n+            backPressure.apply(states, timeoutInNanos, TimeUnit.NANOSECONDS);\n         }\n     }\n \n@@ -679,7 +691,7 @@ public void convict(InetAddress ep)\n         if (cp != null)\n         {\n             logger.trace(\"Resetting pool for {}\", ep);\n-            getConnectionPool(ep).reset();\n+            cp.reset();\n         }\n         else\n         {",
                "raw_url": "https://github.com/apache/cassandra/raw/c86de2a9817aa45930afe181ae1891d2363393c7/src/java/org/apache/cassandra/net/MessagingService.java",
                "sha": "b7d4329fe8f1919e825853b29543d66247d7d28a",
                "status": "modified"
            }
        ],
        "message": "Fix NPEs in original CASSANDRA-13324 commit\n\nPatch by Ariel Weisberg; Reviewed by Marcus Eriksson",
        "parent": "https://github.com/apache/cassandra/commit/3dabeeaa29bfb6757e79f17031cb467b7b052fcd",
        "patched_files": [
            "MessagingService.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "MessagingServiceTest.java"
        ]
    },
    "cassandra_c8a7618": {
        "bug_id": "cassandra_c8a7618",
        "commit": "https://github.com/apache/cassandra/commit/c8a7618763f59372d291f928d996d2593b93872b",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/c8a7618763f59372d291f928d996d2593b93872b/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=c8a7618763f59372d291f928d996d2593b93872b",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -28,6 +28,7 @@\n  * Store more information into peers table (CASSANDRA-4351)\n  * Configurable bucket size for size tiered compaction (CASSANDRA-4704)\n  * Run leveled compaction in parallel (CASSANDRA-4310)\n+ * Fix potential NPE during CFS reload (CASSANDRA-4786)\n \n \n 1.2-beta1",
                "raw_url": "https://github.com/apache/cassandra/raw/c8a7618763f59372d291f928d996d2593b93872b/CHANGES.txt",
                "sha": "c3df5514e3e84353ab7008e47e729a1c91a8ca8a",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/cassandra/blob/c8a7618763f59372d291f928d996d2593b93872b/src/java/org/apache/cassandra/config/CFMetaData.java",
                "changes": 50,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/CFMetaData.java?ref=c8a7618763f59372d291f928d996d2593b93872b",
                "deletions": 25,
                "filename": "src/java/org/apache/cassandra/config/CFMetaData.java",
                "patch": "@@ -234,40 +234,40 @@ public static Caching fromString(String cache) throws ConfigurationException\n     public final String ksName;                       // name of keyspace\n     public final String cfName;                       // name of this column family\n     public final ColumnFamilyType cfType;             // standard, super\n-    public AbstractType<?> comparator;          // bytes, long, timeuuid, utf8, etc.\n-    public AbstractType<?> subcolumnComparator; // like comparator, for supercolumns\n+    public volatile AbstractType<?> comparator;          // bytes, long, timeuuid, utf8, etc.\n+    public volatile AbstractType<?> subcolumnComparator; // like comparator, for supercolumns\n \n     //OPTIONAL\n-    private String comment;                           // default none, for humans only\n-    private double readRepairChance;                  // default 1.0 (always), chance [0.0,1.0] of read repair\n-    private double dcLocalReadRepairChance;           // default 0.0\n-    private boolean replicateOnWrite;                 // default false\n-    private int gcGraceSeconds;                       // default 864000 (ten days)\n-    private AbstractType<?> defaultValidator;         // default BytesType (no-op), use comparator types\n-    private AbstractType<?> keyValidator;             // default BytesType (no-op), use comparator types\n-    private int minCompactionThreshold;               // default 4\n-    private int maxCompactionThreshold;               // default 32\n-    private List<ByteBuffer> keyAliases = new ArrayList<ByteBuffer>();\n-    private List<ByteBuffer> columnAliases = new ArrayList<ByteBuffer>();\n-    private ByteBuffer valueAlias;                    // default NULL\n-    private Double bloomFilterFpChance;               // default NULL\n-    private Caching caching;                          // default KEYS_ONLY (possible: all, key_only, row_only, none)\n-\n-    Map<ByteBuffer, ColumnDefinition> column_metadata;\n-    public Class<? extends AbstractCompactionStrategy> compactionStrategyClass;\n-    public Map<String, String> compactionStrategyOptions;\n-\n-    public CompressionParameters compressionParameters;\n+    private volatile String comment;                           // default none, for humans only\n+    private volatile double readRepairChance;                  // default 1.0 (always), chance [0.0,1.0] of read repair\n+    private volatile double dcLocalReadRepairChance;           // default 0.0\n+    private volatile boolean replicateOnWrite;                 // default false\n+    private volatile int gcGraceSeconds;                       // default 864000 (ten days)\n+    private volatile AbstractType<?> defaultValidator;         // default BytesType (no-op), use comparator types\n+    private volatile AbstractType<?> keyValidator;             // default BytesType (no-op), use comparator types\n+    private volatile int minCompactionThreshold;               // default 4\n+    private volatile int maxCompactionThreshold;               // default 32\n+    private volatile List<ByteBuffer> keyAliases = new ArrayList<ByteBuffer>();\n+    private volatile List<ByteBuffer> columnAliases = new ArrayList<ByteBuffer>();\n+    private volatile ByteBuffer valueAlias;                    // default NULL\n+    private volatile Double bloomFilterFpChance;               // default NULL\n+    private volatile Caching caching;                          // default KEYS_ONLY (possible: all, key_only, row_only, none)\n+\n+    volatile Map<ByteBuffer, ColumnDefinition> column_metadata;\n+    public volatile Class<? extends AbstractCompactionStrategy> compactionStrategyClass;\n+    public volatile Map<String, String> compactionStrategyOptions;\n+\n+    public volatile CompressionParameters compressionParameters;\n \n     // Default consistency levels for CQL3. The default for those values is ONE,\n     // but we keep the internal default to null as it help handling thrift compatibility\n-    private ConsistencyLevel readConsistencyLevel;\n-    private ConsistencyLevel writeConsistencyLevel;\n+    private volatile ConsistencyLevel readConsistencyLevel;\n+    private volatile ConsistencyLevel writeConsistencyLevel;\n \n     // Processed infos used by CQL. This can be fully reconstructed from the CFMedata,\n     // so it's not saved on disk. It is however costlyish to recreate for each query\n     // so we cache it here (and update on each relevant CFMetadata change)\n-    private CFDefinition cqlCfDef;\n+    private volatile CFDefinition cqlCfDef;\n \n     public CFMetaData comment(String prop) { comment = enforceCommentNotNull(prop); return this;}\n     public CFMetaData readRepairChance(double prop) {readRepairChance = prop; return this;}",
                "raw_url": "https://github.com/apache/cassandra/raw/c8a7618763f59372d291f928d996d2593b93872b/src/java/org/apache/cassandra/config/CFMetaData.java",
                "sha": "fe44b5498edd73ee7491fef0a087530edb58a2bc",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/cassandra/blob/c8a7618763f59372d291f928d996d2593b93872b/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamilyStore.java?ref=c8a7618763f59372d291f928d996d2593b93872b",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "patch": "@@ -156,10 +156,23 @@ public void reload()\n         // If the CF comparator has changed, we need to change the memtable,\n         // because the old one still aliases the previous comparator. We don't\n         // call forceFlush() because it can skip the switch if the memtable is\n-        // clean, which we don't want here.\n+        // clean, which we don't want here. Also, because there can be a race\n+        // between the time we acquire the current memtable and we flush it\n+        // (another thread can have flushed it first), we attempt the switch\n+        // until we know the memtable has the current comparator.\n         try\n         {\n-            maybeSwitchMemtable(getMemtableThreadSafe(), true).get();\n+            while (true)\n+            {\n+                AbstractType comparator = metadata.comparator;\n+                Memtable memtable = getMemtableThreadSafe();\n+                if (memtable.initialComparator == comparator)\n+                    break;\n+\n+                Future future = maybeSwitchMemtable(getMemtableThreadSafe(), true);\n+                if (future != null)\n+                    future.get();\n+            }\n         }\n         catch (ExecutionException e)\n         {",
                "raw_url": "https://github.com/apache/cassandra/raw/c8a7618763f59372d291f928d996d2593b93872b/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "sha": "8a1d54f0461e3757b253c42e51ad905957d9fd59",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cassandra/blob/c8a7618763f59372d291f928d996d2593b93872b/src/java/org/apache/cassandra/db/Memtable.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/Memtable.java?ref=c8a7618763f59372d291f928d996d2593b93872b",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/db/Memtable.java",
                "patch": "@@ -41,6 +41,7 @@\n import org.apache.cassandra.db.filter.AbstractColumnIterator;\n import org.apache.cassandra.db.filter.NamesQueryFilter;\n import org.apache.cassandra.db.filter.SliceQueryFilter;\n+import org.apache.cassandra.db.marshal.AbstractType;\n import org.apache.cassandra.io.sstable.SSTableMetadata;\n import org.apache.cassandra.io.sstable.SSTableReader;\n import org.apache.cassandra.io.sstable.SSTableWriter;\n@@ -101,10 +102,16 @@ public IColumn apply(IColumn c)\n         };\n     };\n \n+    // Record the comparator of the CFS at the creation of the memtable. This\n+    // is only used when a user update the CF comparator, to know if the\n+    // memtable was created with the new or old comparator.\n+    public final AbstractType initialComparator;\n+\n     public Memtable(ColumnFamilyStore cfs)\n     {\n         this.cfs = cfs;\n         this.creationTime = System.currentTimeMillis();\n+        this.initialComparator = cfs.metadata.comparator;\n \n         Callable<Set<Object>> provider = new Callable<Set<Object>>()\n         {",
                "raw_url": "https://github.com/apache/cassandra/raw/c8a7618763f59372d291f928d996d2593b93872b/src/java/org/apache/cassandra/db/Memtable.java",
                "sha": "82d22ca0a3c1b3da56ef2ef8e4e15101aa6e6d0b",
                "status": "modified"
            }
        ],
        "message": "Fix potential NPE during CFS reload\n\npatch by slebresne; reviewed by xedin for CASSANDRA-4786",
        "parent": "https://github.com/apache/cassandra/commit/d525cf969c042b21a9375446f5449ee82d7d1484",
        "patched_files": [
            "CFMetaData.java",
            "ColumnFamilyStore.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "ColumnFamilyStoreTest.java",
            "CFMetaDataTest.java"
        ]
    },
    "cassandra_c939422": {
        "bug_id": "cassandra_c939422",
        "commit": "https://github.com/apache/cassandra/commit/c939422637bdba13fa3b5849cc1e7eacf26d46d0",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/c939422637bdba13fa3b5849cc1e7eacf26d46d0/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=c939422637bdba13fa3b5849cc1e7eacf26d46d0",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 2.0.17\n+ * 'WITH WITH' in alter keyspace statements causes NPE (CASSANDRA-9565)\n  * Display min timestamp in sstablemetadata viewer (CASSANDRA-6767)\n \n ",
                "raw_url": "https://github.com/apache/cassandra/raw/c939422637bdba13fa3b5849cc1e7eacf26d46d0/CHANGES.txt",
                "sha": "6e3a147cfe4481d5c81cd3c91e64ef3418b9a2c8",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/c939422637bdba13fa3b5849cc1e7eacf26d46d0/src/java/org/apache/cassandra/cql3/Cql.g",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/Cql.g?ref=c939422637bdba13fa3b5849cc1e7eacf26d46d0",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/cql3/Cql.g",
                "patch": "@@ -891,8 +891,8 @@ properties[PropertyDefinitions props]\n     ;\n \n property[PropertyDefinitions props]\n-    : k=ident '=' (simple=propertyValue { try { $props.addProperty(k.toString(), simple); } catch (SyntaxException e) { addRecognitionError(e.getMessage()); } }\n-                   |   map=map_literal   { try { $props.addProperty(k.toString(), convertPropertyMap(map)); } catch (SyntaxException e) { addRecognitionError(e.getMessage()); } })\n+    : k=ident '=' simple=propertyValue { try { $props.addProperty(k.toString(), simple); } catch (SyntaxException e) { addRecognitionError(e.getMessage()); } }\n+    | k=ident '=' map=map_literal { try { $props.addProperty(k.toString(), convertPropertyMap(map)); } catch (SyntaxException e) { addRecognitionError(e.getMessage()); } }\n     ;\n \n propertyValue returns [String str]",
                "raw_url": "https://github.com/apache/cassandra/raw/c939422637bdba13fa3b5849cc1e7eacf26d46d0/src/java/org/apache/cassandra/cql3/Cql.g",
                "sha": "8b382fa297e51eb4c385fb65d2db4dca0af4cac1",
                "status": "modified"
            },
            {
                "additions": 89,
                "blob_url": "https://github.com/apache/cassandra/blob/c939422637bdba13fa3b5849cc1e7eacf26d46d0/test/unit/org/apache/cassandra/cql3/CreateAndAlterKeyspaceTest.java",
                "changes": 89,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/cql3/CreateAndAlterKeyspaceTest.java?ref=c939422637bdba13fa3b5849cc1e7eacf26d46d0",
                "deletions": 0,
                "filename": "test/unit/org/apache/cassandra/cql3/CreateAndAlterKeyspaceTest.java",
                "patch": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.cassandra.cql3;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import org.apache.cassandra.SchemaLoader;\n+import org.apache.cassandra.db.ConsistencyLevel;\n+import org.apache.cassandra.exceptions.SyntaxException;\n+import org.apache.cassandra.gms.Gossiper;\n+\n+import static org.apache.cassandra.cql3.QueryProcessor.process;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class CreateAndAlterKeyspaceTest\n+{\n+    @BeforeClass\n+    public static void setUpClass() throws Throwable\n+    {\n+        SchemaLoader.loadSchema();\n+    }\n+\n+    @AfterClass\n+    public static void stopGossiper()\n+    {\n+        Gossiper.instance.stop();\n+    }\n+\n+    @Test\n+    // tests CASSANDRA-9565\n+    public void testCreateAndAlterWithDoubleWith() throws Throwable\n+    {\n+        String[] stmts = new String[] {\"ALTER KEYSPACE WITH WITH DURABLE_WRITES = true\",\n+                                       \"ALTER KEYSPACE ks WITH WITH DURABLE_WRITES = true\",\n+                                       \"CREATE KEYSPACE WITH WITH DURABLE_WRITES = true\",\n+                                       \"CREATE KEYSPACE ks WITH WITH DURABLE_WRITES = true\"};\n+\n+        for (String stmt : stmts) {\n+            assertInvalidSyntax(stmt, \"no viable alternative at input 'WITH'\");\n+        }\n+    }\n+\n+    /**\n+     * Checks that the specified statement result in a <code>SyntaxException</code> containing the specified message.\n+     *\n+     * @param stmt the statement to check\n+     */\n+    private static void assertInvalidSyntax(String stmt, String msg) throws Throwable {\n+        try {\n+            process(stmt, ConsistencyLevel.ONE);\n+            fail();\n+        } catch (RuntimeException e) {\n+            assertSyntaxException(e.getCause(), msg);\n+        }\n+    }\n+\n+    /**\n+     * Asserts that the specified exception is a <code>SyntaxException</code> for which the error message contains\n+     * the specified text.\n+     *\n+     * @param exception the exception to test\n+     * @param expectedContent the expected content of the error message\n+     */\n+    private static void assertSyntaxException(Throwable exception, String expectedContent) {\n+        assertTrue(\"The exception should be a SyntaxException but is not\", exception instanceof SyntaxException);\n+\n+        String msg = exception.getMessage();\n+        assertTrue(String.format(\"The error message was expected to contains: %s but was %s\", expectedContent, msg),\n+                   msg.contains(expectedContent));\n+    }\n+}",
                "raw_url": "https://github.com/apache/cassandra/raw/c939422637bdba13fa3b5849cc1e7eacf26d46d0/test/unit/org/apache/cassandra/cql3/CreateAndAlterKeyspaceTest.java",
                "sha": "45be0df82a26edf9ba4ff56744141a870fabd723",
                "status": "added"
            }
        ],
        "message": "'WITH WITH' in alter keyspace statements causes NPE\n\npatch by Benjamin Lerer; reviewed by Robert Stupp for CASSANDRA-9565",
        "parent": "https://github.com/apache/cassandra/commit/f778c1f88f4deb075b383f3a8b24ef279585bd32",
        "patched_files": [
            "Cql.java",
            "CHANGES.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "CreateAndAlterKeyspaceTest.java"
        ]
    },
    "cassandra_cc672f3": {
        "bug_id": "cassandra_cc672f3",
        "commit": "https://github.com/apache/cassandra/commit/cc672f36158c2dee3abad1fa6f51488f14ffb902",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/cc672f36158c2dee3abad1fa6f51488f14ffb902/CHANGES.txt",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=cc672f36158c2dee3abad1fa6f51488f14ffb902",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,6 @@\n 2.1.5\n+ * Fix NullPointerException when deleting or setting an element by index on\n+   a null list collection (CASSANDRA-9077)\n  * Buffer bloom filter serialization (CASSANDRA-9066)\n  * Fix anti-compaction target bloom filter size (CASSANDRA-9060)\n  * Make FROZEN and TUPLE unreserved keywords in CQL (CASSANDRA-9047)",
                "raw_url": "https://github.com/apache/cassandra/raw/cc672f36158c2dee3abad1fa6f51488f14ffb902/CHANGES.txt",
                "sha": "6137e00a1f3fad4a2fd8b5ea378f066f363b9f94",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cassandra/blob/cc672f36158c2dee3abad1fa6f51488f14ffb902/src/java/org/apache/cassandra/cql3/Lists.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/Lists.java?ref=cc672f36158c2dee3abad1fa6f51488f14ffb902",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/cql3/Lists.java",
                "patch": "@@ -342,6 +342,8 @@ public void execute(ByteBuffer rowKey, ColumnFamily cf, Composite prefix, Update\n \n             List<Cell> existingList = params.getPrefetchedList(rowKey, column.name);\n             int idx = ByteBufferUtil.toInt(index);\n+            if (existingList == null)\n+                throw new InvalidRequestException(\"Attempted to set an element on a list which is null\");\n             if (idx < 0 || idx >= existingList.size())\n                 throw new InvalidRequestException(String.format(\"List index %d out of bound, list has size %d\", idx, existingList.size()));\n \n@@ -453,6 +455,8 @@ public void execute(ByteBuffer rowKey, ColumnFamily cf, Composite prefix, Update\n             // We want to call bind before possibly returning to reject queries where the value provided is not a list.\n             Term.Terminal value = t.bind(params.options);\n \n+            if (existingList == null)\n+                throw new InvalidRequestException(\"Attempted to delete an element from a list which is null\");\n             if (existingList.isEmpty())\n                 return;\n \n@@ -496,6 +500,8 @@ public void execute(ByteBuffer rowKey, ColumnFamily cf, Composite prefix, Update\n \n             List<Cell> existingList = params.getPrefetchedList(rowKey, column.name);\n             int idx = ByteBufferUtil.toInt(index.get(params.options));\n+            if (existingList == null)\n+                throw new InvalidRequestException(\"Attempted to delete an element from a list which is null\");\n             if (idx < 0 || idx >= existingList.size())\n                 throw new InvalidRequestException(String.format(\"List index %d out of bound, list has size %d\", idx, existingList.size()));\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/cc672f36158c2dee3abad1fa6f51488f14ffb902/src/java/org/apache/cassandra/cql3/Lists.java",
                "sha": "6ca495b7f8cfbf422c4c1c450e3d11c7bce39110",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/cassandra/blob/cc672f36158c2dee3abad1fa6f51488f14ffb902/test/unit/org/apache/cassandra/cql3/CollectionsTest.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/cql3/CollectionsTest.java?ref=cc672f36158c2dee3abad1fa6f51488f14ffb902",
                "deletions": 24,
                "filename": "test/unit/org/apache/cassandra/cql3/CollectionsTest.java",
                "patch": "@@ -166,51 +166,47 @@ public void testLists() throws Throwable\n \n         execute(\"INSERT INTO %s(k, l) VALUES (0, ?)\", list(\"v1\", \"v2\", \"v3\"));\n \n-        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"),\n-            row(list(\"v1\", \"v2\", \"v3\"))\n-        );\n+        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"), row(list(\"v1\", \"v2\", \"v3\")));\n \n         execute(\"DELETE l[?] FROM %s WHERE k = 0\", 1);\n \n-        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"),\n-            row(list(\"v1\", \"v3\"))\n-        );\n+        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"), row(list(\"v1\", \"v3\")));\n \n         execute(\"UPDATE %s SET l[?] = ? WHERE k = 0\", 1, \"v4\");\n \n-        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"),\n-            row(list(\"v1\", \"v4\"))\n-        );\n+        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"), row(list(\"v1\", \"v4\")));\n \n         // Full overwrite\n         execute(\"UPDATE %s SET l = ? WHERE k = 0\", list(\"v6\", \"v5\"));\n \n-        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"),\n-            row(list(\"v6\", \"v5\"))\n-        );\n+        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"), row(list(\"v6\", \"v5\")));\n \n         execute(\"UPDATE %s SET l = l + ? WHERE k = 0\", list(\"v7\", \"v8\"));\n \n-        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"),\n-            row(list(\"v6\", \"v5\", \"v7\", \"v8\"))\n-        );\n+        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"), row(list(\"v6\", \"v5\", \"v7\", \"v8\")));\n \n         execute(\"UPDATE %s SET l = ? + l WHERE k = 0\", list(\"v9\"));\n \n-        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"),\n-            row(list(\"v9\", \"v6\", \"v5\", \"v7\", \"v8\"))\n-        );\n+        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"), row(list(\"v9\", \"v6\", \"v5\", \"v7\", \"v8\")));\n \n         execute(\"UPDATE %s SET l = l - ? WHERE k = 0\", list(\"v5\", \"v8\"));\n \n-        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"),\n-            row(list(\"v9\", \"v6\", \"v7\"))\n-        );\n+        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"), row(list(\"v9\", \"v6\", \"v7\")));\n \n         execute(\"DELETE l FROM %s WHERE k = 0\");\n \n-        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"),\n-            row((Object)null)\n-        );\n+        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"), row((Object) null));\n+\n+        assertInvalidMessage(\"Attempted to delete an element from a list which is null\",\n+                             \"DELETE l[0] FROM %s WHERE k=0 \");\n+\n+        assertInvalidMessage(\"Attempted to set an element on a list which is null\",\n+                             \"UPDATE %s SET l[0] = ? WHERE k=0\", list(\"v10\"));\n+\n+        assertInvalidMessage(\"Attempted to delete an element from a list which is null\",\n+                             \"UPDATE %s SET l = l - ? WHERE k=0 \",\n+                             list(\"v11\"));\n+\n+        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"), row((Object) null));\n     }\n }",
                "raw_url": "https://github.com/apache/cassandra/raw/cc672f36158c2dee3abad1fa6f51488f14ffb902/test/unit/org/apache/cassandra/cql3/CollectionsTest.java",
                "sha": "3d266b7c8f0365c8480ee3ab9d14c86c254edd85",
                "status": "modified"
            }
        ],
        "message": "Fix NPE when deleting/setting by index on null list collection\n\nPatch by Jeff Jirsa; reviewed by Benjamin Lerer for CASSANDRA-9077",
        "parent": "https://github.com/apache/cassandra/commit/28af4fa04fc84e61bf35bb3761c01f51533b9b15",
        "patched_files": [
            "CHANGES.java",
            "Lists.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "CollectionsTest.java"
        ]
    },
    "cassandra_cf76ac6": {
        "bug_id": "cassandra_cf76ac6",
        "commit": "https://github.com/apache/cassandra/commit/cf76ac66af4344acaaf44f8dec3ef584cff79bf2",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/cf76ac66af4344acaaf44f8dec3ef584cff79bf2/CHANGES.txt",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=cf76ac66af4344acaaf44f8dec3ef584cff79bf2",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,3 +1,7 @@\n+2.1.0\n+ * Add null check for keys when freezing collection (CASSANDRA-7869)\n+\n+\n 2.1.0-rc7\n  * Add frozen keyword and require UDT to be frozen (CASSANDRA-7857)\n  * Track added sstable size correctly (CASSANDRA-7239)",
                "raw_url": "https://github.com/apache/cassandra/raw/cf76ac66af4344acaaf44f8dec3ef584cff79bf2/CHANGES.txt",
                "sha": "93d77c106e8bd63a3283f9599b0d78f1d012f235",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/cf76ac66af4344acaaf44f8dec3ef584cff79bf2/src/java/org/apache/cassandra/cql3/CQL3Type.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/CQL3Type.java?ref=cf76ac66af4344acaaf44f8dec3ef584cff79bf2",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/cql3/CQL3Type.java",
                "patch": "@@ -404,7 +404,8 @@ private RawCollection(CollectionType.Kind kind, CQL3Type.Raw keys, CQL3Type.Raw\n \n             public Raw freeze()\n             {\n-                keys.freeze();\n+                if (keys != null)\n+                    keys.freeze();\n                 values.freeze();\n                 return super.freeze();\n             }",
                "raw_url": "https://github.com/apache/cassandra/raw/cf76ac66af4344acaaf44f8dec3ef584cff79bf2/src/java/org/apache/cassandra/cql3/CQL3Type.java",
                "sha": "bb3bc62fa5885f9866e333dedc2ce8648cc0d890",
                "status": "modified"
            },
            {
                "additions": 39,
                "blob_url": "https://github.com/apache/cassandra/blob/cf76ac66af4344acaaf44f8dec3ef584cff79bf2/test/unit/org/apache/cassandra/cql3/TupleTypeTest.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/cql3/TupleTypeTest.java?ref=cf76ac66af4344acaaf44f8dec3ef584cff79bf2",
                "deletions": 0,
                "filename": "test/unit/org/apache/cassandra/cql3/TupleTypeTest.java",
                "patch": "@@ -100,4 +100,43 @@ public void testNonFrozenTuple() throws Throwable\n     {\n         assertInvalid(\"CREATE TABLE wrong (k int PRIMARY KEY, v tuple<int, text>)\");\n     }\n+\n+    @Test\n+    public void testFrozenTupleWithList() throws Throwable\n+    {\n+        createTable(\"CREATE TABLE %s (k int PRIMARY KEY, t frozen<tuple<text, list<int>>>)\");\n+\n+        execute(\"INSERT INTO %s (k, t) VALUES (?, ?)\", 0, tuple(\"foo\", list(2, 1)));\n+        execute(\"INSERT INTO %s (k, t) VALUES (?, ?)\", 1, tuple(\"bar\", list(3, 4)));\n+        assertAllRows(\n+            row(0, tuple(\"foo\", list(2, 1))),\n+            row(1, tuple(\"bar\", list(3, 4)))\n+        );\n+    }\n+\n+    @Test\n+    public void testFrozenTupleWithSet() throws Throwable\n+    {\n+        createTable(\"CREATE TABLE %s (k int PRIMARY KEY, t frozen<tuple<text, set<int>>>)\");\n+\n+        execute(\"INSERT INTO %s (k, t) VALUES (?, ?)\", 0, tuple(\"foo\", set(2, 1)));\n+        execute(\"INSERT INTO %s (k, t) VALUES (?, ?)\", 1, tuple(\"bar\", set(3, 4)));\n+        assertAllRows(\n+            row(0, tuple(\"foo\", set(2, 1))),\n+            row(1, tuple(\"bar\", set(3, 4)))\n+        );\n+    }\n+\n+    @Test\n+    public void testFrozenTupleWithMap() throws Throwable\n+    {\n+        createTable(\"CREATE TABLE %s (k int PRIMARY KEY, t frozen<tuple<text, map<int, int>>>)\");\n+\n+        execute(\"INSERT INTO %s (k, t) VALUES (?, ?)\", 0, tuple(\"foo\", map(2, 1)));\n+        execute(\"INSERT INTO %s (k, t) VALUES (?, ?)\", 1, tuple(\"bar\", map(3, 4)));\n+        assertAllRows(\n+            row(0, tuple(\"foo\", map(2, 1))),\n+            row(1, tuple(\"bar\", map(3, 4)))\n+        );\n+    }\n }",
                "raw_url": "https://github.com/apache/cassandra/raw/cf76ac66af4344acaaf44f8dec3ef584cff79bf2/test/unit/org/apache/cassandra/cql3/TupleTypeTest.java",
                "sha": "f8771c18dda896a4761ae3faf427aafe6d0e1e19",
                "status": "modified"
            }
        ],
        "message": "Fix NPE when using collections in frozen tuple\n\npatch by omichallat; reviewed by slebresne for CASSANDRA-7869",
        "parent": "https://github.com/apache/cassandra/commit/82136e3b7e4e3fbe08bd9bcb0220cf79a91760cd",
        "patched_files": [
            "TupleType.java",
            "CHANGES.java",
            "CQL3Type.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "TupleTypeTest.java"
        ]
    },
    "cassandra_da8be1c": {
        "bug_id": "cassandra_da8be1c",
        "commit": "https://github.com/apache/cassandra/commit/da8be1c093ba0a78604effd76769067e428ca04d",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/da8be1c093ba0a78604effd76769067e428ca04d/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=da8be1c093ba0a78604effd76769067e428ca04d",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 2.1.12\n+ * Fix potential NPE from handling result of SIM.highestSelectivityIndex (CASSANDRA-10550)\n  * Fix paging issues with partitions containing only static columns data\n    (CASSANDRA-10381)\n  * Fix conditions on static columns (CASSANDRA-10264)",
                "raw_url": "https://github.com/apache/cassandra/raw/da8be1c093ba0a78604effd76769067e428ca04d/CHANGES.txt",
                "sha": "2a28a86ceba322684569f7d216bd9f9f303157d2",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cassandra/blob/da8be1c093ba0a78604effd76769067e428ca04d/src/java/org/apache/cassandra/db/index/SecondaryIndexManager.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/index/SecondaryIndexManager.java?ref=da8be1c093ba0a78604effd76769067e428ca04d",
                "deletions": 4,
                "filename": "src/java/org/apache/cassandra/db/index/SecondaryIndexManager.java",
                "patch": "@@ -858,11 +858,14 @@ public SecondaryIndexSearcher getHighestSelectivityIndexSearcher(List<IndexExpre\n         for (SecondaryIndexSearcher searcher : indexSearchers)\n         {\n             SecondaryIndex highestSelectivityIndex = searcher.highestSelectivityIndex(clause);\n-            long estimate = highestSelectivityIndex.estimateResultRows();\n-            if (estimate <= bestEstimate)\n+            if (highestSelectivityIndex != null)\n             {\n-                bestEstimate = estimate;\n-                mostSelective = searcher;\n+                long estimate = highestSelectivityIndex.estimateResultRows();\n+                if (estimate <= bestEstimate)\n+                {\n+                    bestEstimate = estimate;\n+                    mostSelective = searcher;\n+                }\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/da8be1c093ba0a78604effd76769067e428ca04d/src/java/org/apache/cassandra/db/index/SecondaryIndexManager.java",
                "sha": "12a0a555b2a8ad43d72248d99a65d2a8416144f8",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/da8be1c093ba0a78604effd76769067e428ca04d/src/java/org/apache/cassandra/service/StorageProxy.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageProxy.java?ref=da8be1c093ba0a78604effd76769067e428ca04d",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/service/StorageProxy.java",
                "patch": "@@ -1571,7 +1571,7 @@ private static float estimateResultRowsPerRange(AbstractRangeCommand command, Ke\n                 {\n                     // use our own mean column count as our estimate for how many matching rows each node will have\n                     SecondaryIndex highestSelectivityIndex = searcher.highestSelectivityIndex(command.rowFilter);\n-                    resultRowsPerRange = Math.min(resultRowsPerRange, highestSelectivityIndex.estimateResultRows());\n+                    resultRowsPerRange = highestSelectivityIndex == null ? resultRowsPerRange : Math.min(resultRowsPerRange, highestSelectivityIndex.estimateResultRows());\n                 }\n             }\n         }",
                "raw_url": "https://github.com/apache/cassandra/raw/da8be1c093ba0a78604effd76769067e428ca04d/src/java/org/apache/cassandra/service/StorageProxy.java",
                "sha": "4f20ef0273db74ee163287e8f5011ae978764bd3",
                "status": "modified"
            }
        ],
        "message": "NPE fix on null highestSelectivityIndex\n\nPatch by Berenguer Blasi; reviewed by Sam Tunnicliffe for\nCASSANDRA-10550",
        "parent": "https://github.com/apache/cassandra/commit/86583af4ca0eac34725136adee3143f9b14b75b4",
        "patched_files": [
            "StorageProxy.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "StorageProxyTest.java"
        ]
    },
    "cassandra_db3c198": {
        "bug_id": "cassandra_db3c198",
        "commit": "https://github.com/apache/cassandra/commit/db3c198ad0ce46e255202d03ead7ad44df127070",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cassandra/blob/db3c198ad0ce46e255202d03ead7ad44df127070/src/java/org/apache/cassandra/io/sstable/SSTableReader.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/sstable/SSTableReader.java?ref=db3c198ad0ce46e255202d03ead7ad44df127070",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/io/sstable/SSTableReader.java",
                "patch": "@@ -84,7 +84,7 @@\n     private IndexSummary indexSummary;\n     private Filter bf;\n \n-    private final InstrumentingCache<KeyCacheKey, RowIndexEntry> keyCache = CacheService.instance.keyCache;\n+    private InstrumentingCache<KeyCacheKey, RowIndexEntry> keyCache;\n \n     private final BloomFilterTracker bloomFilterTracker = new BloomFilterTracker();\n \n@@ -312,6 +312,10 @@ private SSTableReader(Descriptor desc,\n     public void setTrackedBy(DataTracker tracker)\n     {\n         deletingTask.setTracker(tracker);\n+        // under normal operation we can do this at any time, but SSTR is also used outside C* proper,\n+        // e.g. by BulkLoader, which does not initialize the cache.  As a kludge, we set up the cache\n+        // here when we know we're being wired into the rest of the server infrastructure.\n+        keyCache = CacheService.instance.keyCache;\n     }\n \n     void loadBloomFilter() throws IOException\n@@ -680,6 +684,7 @@ public void cacheKey(DecoratedKey key, RowIndexEntry info)\n \n         if (caching == CFMetaData.Caching.NONE\n             || caching == CFMetaData.Caching.ROWS_ONLY\n+            || keyCache == null\n             || keyCache.getCapacity() == 0)\n         {\n             return;\n@@ -697,7 +702,7 @@ public RowIndexEntry getCachedPosition(DecoratedKey key, boolean updateStats)\n \n     private RowIndexEntry getCachedPosition(KeyCacheKey unifiedKey, boolean updateStats)\n     {\n-        if (keyCache.getCapacity() > 0)\n+        if (keyCache != null && keyCache.getCapacity() > 0)\n             return updateStats ? keyCache.get(unifiedKey) : keyCache.getInternal(unifiedKey);\n         return null;\n     }",
                "raw_url": "https://github.com/apache/cassandra/raw/db3c198ad0ce46e255202d03ead7ad44df127070/src/java/org/apache/cassandra/io/sstable/SSTableReader.java",
                "sha": "91713a1469106b562f2b862b0ad1e9b4f614d518",
                "status": "modified"
            }
        ],
        "message": "fix BulkLoader NPE caused by #4732\npatch by jbellis; reviewed by yukim for CASSANDRA-4846",
        "parent": "https://github.com/apache/cassandra/commit/5eb9e1c1576edb90f5b6e2ef975686e87a8c93af",
        "patched_files": [
            "SSTableReader.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "SSTableReaderTest.java"
        ]
    },
    "cassandra_deafdbe": {
        "bug_id": "cassandra_deafdbe",
        "commit": "https://github.com/apache/cassandra/commit/deafdbe373df3717ec21f8e52d93f3d02bb5094a",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/deafdbe373df3717ec21f8e52d93f3d02bb5094a/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=deafdbe373df3717ec21f8e52d93f3d02bb5094a",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 2.2.5\n+ * Fix potential NPE on ORDER BY queries with IN (CASSANDRA-10955)\n  * Avoid over-fetching during the page of range queries (CASSANDRA-8521)\n  * Start L0 STCS-compactions even if there is a L0 -> L1 compaction\n    going (CASSANDRA-10979)",
                "raw_url": "https://github.com/apache/cassandra/raw/deafdbe373df3717ec21f8e52d93f3d02bb5094a/CHANGES.txt",
                "sha": "1a92fd6a0de95ca188ef88101574a52243871ab8",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/cassandra/blob/deafdbe373df3717ec21f8e52d93f3d02bb5094a/src/java/org/apache/cassandra/cql3/statements/SelectStatement.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/statements/SelectStatement.java?ref=deafdbe373df3717ec21f8e52d93f3d02bb5094a",
                "deletions": 7,
                "filename": "src/java/org/apache/cassandra/cql3/statements/SelectStatement.java",
                "patch": "@@ -1092,10 +1092,21 @@ public Parameters(Map<ColumnIdentifier.Raw, Boolean> orderings,\n         }\n     }\n \n+    private static abstract class ColumnComparator<T> implements Comparator<T>\n+    {\n+        protected final int compare(Comparator<ByteBuffer> comparator, ByteBuffer aValue, ByteBuffer bValue)\n+        {\n+            if (aValue == null)\n+                return bValue == null ? 0 : -1;\n+\n+            return bValue == null ? 1 : comparator.compare(aValue, bValue);\n+        }\n+    }\n+\n     /**\n      * Used in orderResults(...) method when single 'ORDER BY' condition where given\n      */\n-    private static class SingleColumnComparator implements Comparator<List<ByteBuffer>>\n+    private static class SingleColumnComparator extends ColumnComparator<List<ByteBuffer>>\n     {\n         private final int index;\n         private final Comparator<ByteBuffer> comparator;\n@@ -1108,14 +1119,14 @@ public SingleColumnComparator(int columnIndex, Comparator<ByteBuffer> orderer)\n \n         public int compare(List<ByteBuffer> a, List<ByteBuffer> b)\n         {\n-            return comparator.compare(a.get(index), b.get(index));\n+            return compare(comparator, a.get(index), b.get(index));\n         }\n     }\n \n     /**\n      * Used in orderResults(...) method when multiple 'ORDER BY' conditions where given\n      */\n-    private static class CompositeComparator implements Comparator<List<ByteBuffer>>\n+    private static class CompositeComparator extends ColumnComparator<List<ByteBuffer>>\n     {\n         private final List<Comparator<ByteBuffer>> orderTypes;\n         private final List<Integer> positions;\n@@ -1133,10 +1144,7 @@ public int compare(List<ByteBuffer> a, List<ByteBuffer> b)\n                 Comparator<ByteBuffer> type = orderTypes.get(i);\n                 int columnPos = positions.get(i);\n \n-                ByteBuffer aValue = a.get(columnPos);\n-                ByteBuffer bValue = b.get(columnPos);\n-\n-                int comparison = type.compare(aValue, bValue);\n+                int comparison = compare(type, a.get(columnPos), b.get(columnPos));\n \n                 if (comparison != 0)\n                     return comparison;",
                "raw_url": "https://github.com/apache/cassandra/raw/deafdbe373df3717ec21f8e52d93f3d02bb5094a/src/java/org/apache/cassandra/cql3/statements/SelectStatement.java",
                "sha": "848b3a6df47f2c7e12f41a4bacc5756b9878b622",
                "status": "modified"
            },
            {
                "additions": 43,
                "blob_url": "https://github.com/apache/cassandra/blob/deafdbe373df3717ec21f8e52d93f3d02bb5094a/test/unit/org/apache/cassandra/cql3/validation/operations/SelectOrderByTest.java",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/cql3/validation/operations/SelectOrderByTest.java?ref=deafdbe373df3717ec21f8e52d93f3d02bb5094a",
                "deletions": 0,
                "filename": "test/unit/org/apache/cassandra/cql3/validation/operations/SelectOrderByTest.java",
                "patch": "@@ -392,6 +392,49 @@ public void testOrderByForInClause() throws Throwable\n                    row(\"A\"));\n     }\n \n+    @Test\n+    public void testOrderByForInClauseWithNullValue() throws Throwable\n+    {\n+        createTable(\"CREATE TABLE %s (a int, b int, c int, s int static, d int, PRIMARY KEY (a, b, c))\");\n+\n+        execute(\"INSERT INTO %s (a, b, c, d) VALUES (1, 1, 1, 1)\");\n+        execute(\"INSERT INTO %s (a, b, c, d) VALUES (1, 1, 2, 1)\");\n+        execute(\"INSERT INTO %s (a, b, c, d) VALUES (2, 2, 1, 1)\");\n+        execute(\"INSERT INTO %s (a, b, c, d) VALUES (2, 2, 2, 1)\");\n+\n+        execute(\"UPDATE %s SET s = 1 WHERE a = 1\");\n+        execute(\"UPDATE %s SET s = 2 WHERE a = 2\");\n+        execute(\"UPDATE %s SET s = 3 WHERE a = 3\");\n+\n+        assertRows(execute(\"SELECT a, b, c, d, s FROM %s WHERE a IN (1, 2, 3) ORDER BY b DESC\"),\n+                   row(2, 2, 2, 1, 2),\n+                   row(2, 2, 1, 1, 2),\n+                   row(1, 1, 2, 1, 1),\n+                   row(1, 1, 1, 1, 1),\n+                   row(3, null, null, null, 3));\n+\n+        assertRows(execute(\"SELECT a, b, c, d, s FROM %s WHERE a IN (1, 2, 3) ORDER BY b ASC\"),\n+                   row(3, null, null, null, 3),\n+                   row(1, 1, 1, 1, 1),\n+                   row(1, 1, 2, 1, 1),\n+                   row(2, 2, 1, 1, 2),\n+                   row(2, 2, 2, 1, 2));\n+\n+        assertRows(execute(\"SELECT a, b, c, d, s FROM %s WHERE a IN (1, 2, 3) ORDER BY b DESC , c DESC\"),\n+                   row(2, 2, 2, 1, 2),\n+                   row(2, 2, 1, 1, 2),\n+                   row(1, 1, 2, 1, 1),\n+                   row(1, 1, 1, 1, 1),\n+                   row(3, null, null, null, 3));\n+\n+        assertRows(execute(\"SELECT a, b, c, d, s FROM %s WHERE a IN (1, 2, 3) ORDER BY b ASC, c ASC\"),\n+                   row(3, null, null, null, 3),\n+                   row(1, 1, 1, 1, 1),\n+                   row(1, 1, 2, 1, 1),\n+                   row(2, 2, 1, 1, 2),\n+                   row(2, 2, 2, 1, 2));\n+    }\n+\n     /**\n      * Test reversed comparators\n      * migrated from cql_tests.py:TestCQL.reversed_comparator_test()",
                "raw_url": "https://github.com/apache/cassandra/raw/deafdbe373df3717ec21f8e52d93f3d02bb5094a/test/unit/org/apache/cassandra/cql3/validation/operations/SelectOrderByTest.java",
                "sha": "f8ec13c73aaf5704068d68e562a9fe647d53be86",
                "status": "modified"
            }
        ],
        "message": "Avoid potential NPE for queries with ORDER BY and IN\n\npatch by blerer; reviewed by beobal for CASSANDRA-10955",
        "parent": "https://github.com/apache/cassandra/commit/0b479a7f3e284960f5ebf8ef5110dfdf2c2db7fd",
        "patched_files": [
            "CHANGES.java",
            "SelectStatement.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "SelectOrderByTest.java"
        ]
    },
    "cassandra_e70502c": {
        "bug_id": "cassandra_e70502c",
        "commit": "https://github.com/apache/cassandra/commit/e70502c094194fd41d69c1bf8356255a8783a21c",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/e70502c094194fd41d69c1bf8356255a8783a21c/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/DatabaseDescriptor.java?ref=e70502c094194fd41d69c1bf8356255a8783a21c",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "patch": "@@ -388,9 +388,9 @@ public static void loadSchemas() throws IOException\n                 Table.open(def.name);\n             }\n             \n-            // since we loaded definitions from local storage, log a warning if definitions exist in xml.\n+            // since we loaded definitions from local storage, log a warning if definitions exist in yaml.\n             \n-            if (conf.keyspaces.size() > 0)\n+            if (conf.keyspaces != null && conf.keyspaces.size() > 0)\n                 logger.warn(\"Schema definitions were defined both locally and in \" + STORAGE_CONF_FILE +\n                     \". Definitions in \" + STORAGE_CONF_FILE + \" were ignored.\");\n             ",
                "raw_url": "https://github.com/apache/cassandra/raw/e70502c094194fd41d69c1bf8356255a8783a21c/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "sha": "720a2f1538003b440a11b1637c2678f0cd13dabf",
                "status": "modified"
            }
        ],
        "message": "avoid NPE when no keyspaces are defined in yaml. Patch by Sylvain Lebresne, reviewd by gdusbabek. CASSANDRA-1080\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/trunk@943566 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cassandra/commit/75e832aa7ae2f6e38050b9c8c87f1c7a8e84bce7",
        "patched_files": [
            "DatabaseDescriptor.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "DatabaseDescriptorTest.java"
        ]
    },
    "cassandra_ef18a17": {
        "bug_id": "cassandra_ef18a17",
        "commit": "https://github.com/apache/cassandra/commit/ef18a1768a6589eac212a7f320f9748ca6dc8371",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/ef18a1768a6589eac212a7f320f9748ca6dc8371/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=ef18a1768a6589eac212a7f320f9748ca6dc8371",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 2.2.8\n+ * NPE when trying to remove purgable tombstones from result (CASSANDRA-12143)\n  * Improve streaming synchronization and fault tolerance (CASSANDRA-11414)\n  * MemoryUtil.getShort() should return an unsigned short also for architectures not supporting unaligned memory accesses (CASSANDRA-11973)\n Merged from 2.1:",
                "raw_url": "https://github.com/apache/cassandra/raw/ef18a1768a6589eac212a7f320f9748ca6dc8371/CHANGES.txt",
                "sha": "e10af6f046ad53131bd3e969bf74ab67455b7bb0",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/ef18a1768a6589eac212a7f320f9748ca6dc8371/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamilyStore.java?ref=ef18a1768a6589eac212a7f320f9748ca6dc8371",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "patch": "@@ -2347,7 +2347,8 @@ public ExtendedFilter makeExtendedFilter(AbstractBounds<RowPosition> range,\n                 }\n \n                 // remove purgable tombstones from result - see CASSANDRA-11427\n-                data.purgeTombstones(gcBefore(filter.timestamp));\n+                if (data != null)\n+                    data.purgeTombstones(gcBefore(filter.timestamp));\n \n                 rows.add(new Row(rawRow.key, data));\n                 if (!ignoreTombstonedPartitions || !data.hasOnlyTombstones(filter.timestamp))",
                "raw_url": "https://github.com/apache/cassandra/raw/ef18a1768a6589eac212a7f320f9748ca6dc8371/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "sha": "ff63163fe7b50f5de9e2e6bc1e9a8a6de291d242",
                "status": "modified"
            },
            {
                "additions": 41,
                "blob_url": "https://github.com/apache/cassandra/blob/ef18a1768a6589eac212a7f320f9748ca6dc8371/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java",
                "changes": 50,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java?ref=ef18a1768a6589eac212a7f320f9748ca6dc8371",
                "deletions": 9,
                "filename": "test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java",
                "patch": "@@ -66,6 +66,7 @@\n import org.apache.cassandra.db.composites.CellNames;\n import org.apache.cassandra.db.composites.Composites;\n import org.apache.cassandra.db.filter.ColumnSlice;\n+import org.apache.cassandra.db.filter.ExtendedFilter;\n import org.apache.cassandra.db.filter.IDiskAtomFilter;\n import org.apache.cassandra.db.filter.NamesQueryFilter;\n import org.apache.cassandra.db.filter.QueryFilter;\n@@ -94,7 +95,6 @@\n import org.apache.cassandra.utils.FBUtilities;\n import org.apache.cassandra.utils.Pair;\n import org.apache.cassandra.utils.WrappedRunnable;\n-import org.apache.thrift.TException;\n \n import static org.apache.cassandra.Util.cellname;\n import static org.apache.cassandra.Util.column;\n@@ -245,6 +245,38 @@ public void runMayThrow() throws IOException\n         KeyspaceTest.reTest(store, r);\n     }\n \n+    @Test\n+    public void testFilterWithNullCF() throws Exception\n+    {\n+        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n+        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_STANDARD1);\n+        final Row row = new Row(Util.dk(\"key1\"), null);\n+\n+        ColumnFamilyStore.AbstractScanIterator iterator = new ColumnFamilyStore.AbstractScanIterator()\n+        {\n+            Iterator<Row> it = Collections.singletonList(row).iterator();\n+\n+            protected Row computeNext()\n+            {\n+                return it.hasNext() ? it.next() : endOfData();\n+            }\n+\n+            @Override\n+            public void close()\n+            {\n+            }\n+        };\n+\n+        ExtendedFilter filter = ExtendedFilter.create(\n+                cfs,\n+                DataRange.allData(DatabaseDescriptor.getPartitioner()), null, 1, true, System.currentTimeMillis());\n+\n+        List<Row> list = cfs.filter(iterator, filter);\n+        assert 1 == list.size();\n+        assert list.get(0).key == row.key;\n+        assert null == list.get(0).cf;\n+    }\n+\n     @Test\n     public void testSkipStartKey()\n     {\n@@ -571,7 +603,7 @@ public void testDeleteOfInconsistentValuesInKeysIndex() throws Exception\n         cfs.truncateBlocking();\n \n         ByteBuffer rowKey = ByteBufferUtil.bytes(\"k1\");\n-        CellName colName = cellname(\"birthdate\"); \n+        CellName colName = cellname(\"birthdate\");\n         ByteBuffer val1 = ByteBufferUtil.bytes(1L);\n         ByteBuffer val2 = ByteBufferUtil.bytes(2L);\n \n@@ -635,7 +667,7 @@ public void testDeleteOfInconsistentValuesFromCompositeIndex() throws Exception\n \n         ByteBuffer rowKey = ByteBufferUtil.bytes(\"k1\");\n         ByteBuffer clusterKey = ByteBufferUtil.bytes(\"ck1\");\n-        ByteBuffer colName = ByteBufferUtil.bytes(\"col1\"); \n+        ByteBuffer colName = ByteBufferUtil.bytes(\"col1\");\n \n         CellNameType baseComparator = cfs.getComparator();\n         CellName compositeName = baseComparator.makeCellName(clusterKey, colName);\n@@ -2291,7 +2323,7 @@ public String apply(Cell arg0)\n         });\n         System.err.println(\"Row key: \" + rowKey + \" Cols: \" + transformed);\n     }\n-    \n+\n     @Test\n     public void testRebuildSecondaryIndex() throws IOException\n     {\n@@ -2303,19 +2335,19 @@ public void testRebuildSecondaryIndex() throws IOException\n \n         rm.apply();\n         assertTrue(Arrays.equals(\"k1\".getBytes(), PerRowSecondaryIndexTest.TestIndex.LAST_INDEXED_KEY.array()));\n-        \n+\n         Keyspace.open(\"PerRowSecondaryIndex\").getColumnFamilyStore(\"Indexed1\").forceBlockingFlush();\n-        \n+\n         PerRowSecondaryIndexTest.TestIndex.reset();\n-        \n+\n         ColumnFamilyStore.rebuildSecondaryIndex(\"PerRowSecondaryIndex\", \"Indexed1\", PerRowSecondaryIndexTest.TestIndex.class.getSimpleName());\n         assertTrue(Arrays.equals(\"k1\".getBytes(), PerRowSecondaryIndexTest.TestIndex.LAST_INDEXED_KEY.array()));\n-        \n+\n         PerRowSecondaryIndexTest.TestIndex.reset();\n         PerRowSecondaryIndexTest.TestIndex.ACTIVE = false;\n         ColumnFamilyStore.rebuildSecondaryIndex(\"PerRowSecondaryIndex\", \"Indexed1\", PerRowSecondaryIndexTest.TestIndex.class.getSimpleName());\n         assertNull(PerRowSecondaryIndexTest.TestIndex.LAST_INDEXED_KEY);\n-        \n+\n         PerRowSecondaryIndexTest.TestIndex.reset();\n     }\n }",
                "raw_url": "https://github.com/apache/cassandra/raw/ef18a1768a6589eac212a7f320f9748ca6dc8371/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java",
                "sha": "2d67baf735c17282e0cdcc7f23e376781aa7f25f",
                "status": "modified"
            }
        ],
        "message": "NPE when trying to remove purgable tombstones from result\n\npatch by mck; reviewed by Sylvain Lebresne for CASSANDRA-12143",
        "parent": "https://github.com/apache/cassandra/commit/00e7ecf1394f8704e2f13369f7950e129459ce2c",
        "patched_files": [
            "ColumnFamilyStore.java",
            "CHANGES.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "ColumnFamilyStoreTest.java"
        ]
    },
    "cassandra_f6ea46e": {
        "bug_id": "cassandra_f6ea46e",
        "commit": "https://github.com/apache/cassandra/commit/f6ea46e93ccd9d5388a6f0fa37ddef9cf2279997",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/f6ea46e93ccd9d5388a6f0fa37ddef9cf2279997/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=f6ea46e93ccd9d5388a6f0fa37ddef9cf2279997",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 2.1.1\n+ * Fix NPE on null nested UDT inside a set (CASSANDRA-8105)\n  * Fix exception when querying secondary index on set items or map keys\n    when some clustering columns are specified (CASSANDRA-8073)\n  * Send proper error response when there is an error during native",
                "raw_url": "https://github.com/apache/cassandra/raw/f6ea46e93ccd9d5388a6f0fa37ddef9cf2279997/CHANGES.txt",
                "sha": "0d3941695062b297ef6567a32fe82464408ddd70",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/f6ea46e93ccd9d5388a6f0fa37ddef9cf2279997/src/java/org/apache/cassandra/db/marshal/TupleType.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/marshal/TupleType.java?ref=f6ea46e93ccd9d5388a6f0fa37ddef9cf2279997",
                "deletions": 4,
                "filename": "src/java/org/apache/cassandra/db/marshal/TupleType.java",
                "patch": "@@ -72,8 +72,7 @@ public int compare(ByteBuffer o1, ByteBuffer o2)\n         ByteBuffer bb1 = o1.duplicate();\n         ByteBuffer bb2 = o2.duplicate();\n \n-        int i = 0;\n-        while (bb1.remaining() > 0 && bb2.remaining() > 0)\n+        for (int i = 0; bb1.remaining() > 0 && bb2.remaining() > 0; i++)\n         {\n             AbstractType<?> comparator = types.get(i);\n \n@@ -95,8 +94,6 @@ public int compare(ByteBuffer o1, ByteBuffer o2)\n             int cmp = comparator.compare(value1, value2);\n             if (cmp != 0)\n                 return cmp;\n-\n-            ++i;\n         }\n \n         if (bb1.remaining() == 0)",
                "raw_url": "https://github.com/apache/cassandra/raw/f6ea46e93ccd9d5388a6f0fa37ddef9cf2279997/src/java/org/apache/cassandra/db/marshal/TupleType.java",
                "sha": "42aaba13cfe679bf4b28ada7b008725549a0fd3d",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/cassandra/blob/f6ea46e93ccd9d5388a6f0fa37ddef9cf2279997/test/unit/org/apache/cassandra/cql3/UserTypesTest.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/cql3/UserTypesTest.java?ref=f6ea46e93ccd9d5388a6f0fa37ddef9cf2279997",
                "deletions": 0,
                "filename": "test/unit/org/apache/cassandra/cql3/UserTypesTest.java",
                "patch": "@@ -31,6 +31,25 @@ public void testInvalidField() throws Throwable\n         assertInvalid(\"INSERT INTO %s (k, v) VALUES (?, {s : ?})\", 0, 1);\n     }\n \n+    @Test\n+    public void testCassandra8105() throws Throwable\n+    {\n+        String ut1 = createType(\"CREATE TYPE %s (a int, b int)\");\n+        String ut2 = createType(\"CREATE TYPE %s (j frozen<\" + KEYSPACE + \".\" + ut1 + \">, k int)\");\n+        createTable(\"CREATE TABLE %s (x int PRIMARY KEY, y set<frozen<\" + KEYSPACE + \".\" + ut2 + \">>)\");\n+        execute(\"INSERT INTO %s (x, y) VALUES (1, { { k: 1 } })\");\n+\n+        String ut3 = createType(\"CREATE TYPE %s (a int, b int)\");\n+        String ut4 = createType(\"CREATE TYPE %s (j frozen<\" + KEYSPACE + \".\" + ut3 + \">, k int)\");\n+        createTable(\"CREATE TABLE %s (x int PRIMARY KEY, y list<frozen<\" + KEYSPACE + \".\" + ut4 + \">>)\");\n+        execute(\"INSERT INTO %s (x, y) VALUES (1, [ { k: 1 } ])\");\n+\n+        String ut5 = createType(\"CREATE TYPE %s (a int, b int)\");\n+        String ut6 = createType(\"CREATE TYPE %s (i int, j frozen<\" + KEYSPACE + \".\" + ut5 + \">)\");\n+        createTable(\"CREATE TABLE %s (x int PRIMARY KEY, y set<frozen<\" + KEYSPACE + \".\" + ut6 + \">>)\");\n+        execute(\"INSERT INTO %s (x, y) VALUES (1, { { i: 1 } })\");\n+    }\n+\n     @Test\n     public void testFor7684() throws Throwable\n     {",
                "raw_url": "https://github.com/apache/cassandra/raw/f6ea46e93ccd9d5388a6f0fa37ddef9cf2279997/test/unit/org/apache/cassandra/cql3/UserTypesTest.java",
                "sha": "184de19cb4d490b0f1529613b0efc3a68c13aedb",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE on null nested UDT inside a set\n\nPatch by Robert Stupp; reviewed by Tyler Hobbs for CASSANDRA-8105",
        "parent": "https://github.com/apache/cassandra/commit/ba79107aefb8a40047c4068b8d3a3f838ddb62fc",
        "patched_files": [
            "TupleType.java",
            "CHANGES.java",
            "UserTypes.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "UserTypesTest.java",
            "TupleTypeTest.java"
        ]
    },
    "cassandra_fad5ad5": {
        "bug_id": "cassandra_fad5ad5",
        "commit": "https://github.com/apache/cassandra/commit/fad5ad5a6af5a9ed2954a6395149f0ca95d34603",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cassandra/blob/fad5ad5a6af5a9ed2954a6395149f0ca95d34603/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/DatabaseDescriptor.java?ref=fad5ad5a6af5a9ed2954a6395149f0ca95d34603",
                "deletions": 9,
                "filename": "src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "patch": "@@ -288,15 +288,6 @@ else if (conf.disk_access_mode == Config.DiskAccessMode.mmap_index_only)\n             logger.info(\"Global memtable off-heap threshold is disabled, HeapAllocator will be used instead\");\n         else\n             logger.info(\"Global memtable off-heap threshold is enabled at {}MB\", conf.memtable_offheap_space_in_mb);\n-        if (conf.memtable_cleanup_threshold < 0.01f)\n-            throw new ConfigurationException(\"memtable_cleanup_threshold must be >= 0.01\");\n-        if (conf.memtable_cleanup_threshold > 0.99f)\n-            throw new ConfigurationException(\"memtable_cleanup_threshold must be <= 0.99\");\n-        if (conf.memtable_cleanup_threshold < 0.1f)\n-            logger.warn(\"memtable_cleanup_threshold is set very low, which may cause performance degradation\");\n-\n-        if (conf.memtable_flush_writers < 1)\n-            throw new ConfigurationException(\"memtable_flush_writers must be at least 1\");\n \n         /* Local IP or hostname to bind services to */\n         if (conf.listen_address != null)\n@@ -486,9 +477,19 @@ public int compare(InetAddress endpoint1, InetAddress endpoint2)\n         if (conf.memtable_flush_writers == null)\n             conf.memtable_flush_writers = Math.min(8, Math.max(2, Math.min(FBUtilities.getAvailableProcessors(), conf.data_file_directories.length)));\n \n+        if (conf.memtable_flush_writers < 1)\n+            throw new ConfigurationException(\"memtable_flush_writers must be at least 1\");\n+\n         if (conf.memtable_cleanup_threshold == null)\n             conf.memtable_cleanup_threshold = (float) (1.0 / (1 + conf.memtable_flush_writers));\n \n+        if (conf.memtable_cleanup_threshold < 0.01f)\n+            throw new ConfigurationException(\"memtable_cleanup_threshold must be >= 0.01\");\n+        if (conf.memtable_cleanup_threshold > 0.99f)\n+            throw new ConfigurationException(\"memtable_cleanup_threshold must be <= 0.99\");\n+        if (conf.memtable_cleanup_threshold < 0.1f)\n+            logger.warn(\"memtable_cleanup_threshold is set very low, which may cause performance degradation\");\n+\n         if (conf.concurrent_compactors == null)\n             conf.concurrent_compactors = Math.min(8, Math.max(2, Math.min(FBUtilities.getAvailableProcessors(), conf.data_file_directories.length)));\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/fad5ad5a6af5a9ed2954a6395149f0ca95d34603/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "sha": "d89967d8e1a07c45da655b47cf196d2a14d4ec2c",
                "status": "modified"
            }
        ],
        "message": "reorder to avoid NPE",
        "parent": "https://github.com/apache/cassandra/commit/233bd3c0340d6bd19fe0c25072bd3b4931be0e1f",
        "patched_files": [
            "DatabaseDescriptor.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "DatabaseDescriptorTest.java"
        ]
    },
    "cassandra_fb347bd": {
        "bug_id": "cassandra_fb347bd",
        "commit": "https://github.com/apache/cassandra/commit/fb347bd3d16e35c50df5fca14ed3c0611e80985b",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/fb347bd3d16e35c50df5fca14ed3c0611e80985b/src/java/org/apache/cassandra/db/ColumnFamily.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamily.java?ref=fb347bd3d16e35c50df5fca14ed3c0611e80985b",
                "deletions": 3,
                "filename": "src/java/org/apache/cassandra/db/ColumnFamily.java",
                "patch": "@@ -32,6 +32,7 @@\n import java.util.concurrent.atomic.AtomicInteger;\r\n \r\n import org.apache.commons.lang.StringUtils;\r\n+import org.apache.commons.lang.ArrayUtils;\r\n import org.apache.log4j.Logger;\r\n \r\n import org.apache.cassandra.config.DatabaseDescriptor;\r\n@@ -399,10 +400,10 @@ public String toString()\n     public byte[] digest()\r\n     {\r\n     \tSet<IColumn> columns = columns_.getSortedColumns();\r\n-    \tbyte[] xorHash = null;\r\n-    \tfor(IColumn column : columns)\r\n+    \tbyte[] xorHash = ArrayUtils.EMPTY_BYTE_ARRAY;\r\n+        for(IColumn column : columns)\r\n     \t{\r\n-    \t\tif(xorHash == null)\r\n+    \t\tif(xorHash.length == 0)\r\n     \t\t{\r\n     \t\t\txorHash = column.digest();\r\n     \t\t}\r",
                "raw_url": "https://github.com/apache/cassandra/raw/fb347bd3d16e35c50df5fca14ed3c0611e80985b/src/java/org/apache/cassandra/db/ColumnFamily.java",
                "sha": "d5312f937c83eff6e72392998f40447ddd27a73f",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/fb347bd3d16e35c50df5fca14ed3c0611e80985b/src/java/org/apache/cassandra/db/ReadResponse.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ReadResponse.java?ref=fb347bd3d16e35c50df5fca14ed3c0611e80985b",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/ReadResponse.java",
                "patch": "@@ -27,6 +27,7 @@\n import org.apache.cassandra.net.Message;\r\n import org.apache.cassandra.net.MessagingService;\r\n import org.apache.cassandra.service.StorageService;\r\n+import org.apache.commons.lang.ArrayUtils;\r\n \r\n \r\n /*\r\n@@ -60,11 +61,12 @@ public static Message makeReadResponseMessage(ReadResponse readResponse) throws\n \t\r\n \tprivate String table_;\r\n \tprivate Row row_;\r\n-\tprivate byte[] digest_ = new byte[0];\r\n+\tprivate byte[] digest_ = ArrayUtils.EMPTY_BYTE_ARRAY;\r\n     private boolean isDigestQuery_ = false;\r\n \r\n \tpublic ReadResponse(String table, byte[] digest )\r\n     {\r\n+        assert digest != null;\r\n \t\ttable_ = table;\r\n \t\tdigest_= digest;\r\n \t}\r",
                "raw_url": "https://github.com/apache/cassandra/raw/fb347bd3d16e35c50df5fca14ed3c0611e80985b/src/java/org/apache/cassandra/db/ReadResponse.java",
                "sha": "e6e069f29a345fc718b05a35b0c771edcff674a1",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/fb347bd3d16e35c50df5fca14ed3c0611e80985b/src/java/org/apache/cassandra/db/ReadVerbHandler.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ReadVerbHandler.java?ref=fb347bd3d16e35c50df5fca14ed3c0611e80985b",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/ReadVerbHandler.java",
                "patch": "@@ -77,7 +77,7 @@ public void doVerb(Message message)\n             Row row = null;\r\n             row = readCommand.getRow(table);\r\n             ReadResponse readResponse = null;\r\n-            if(readCommand.isDigestQuery())\r\n+            if (readCommand.isDigestQuery())\r\n             {\r\n                 readResponse = new ReadResponse(table.getTableName(), row.digest());\r\n             }\r",
                "raw_url": "https://github.com/apache/cassandra/raw/fb347bd3d16e35c50df5fca14ed3c0611e80985b/src/java/org/apache/cassandra/db/ReadVerbHandler.java",
                "sha": "5ec85905b0f9b4f74844aa42ad262b043570e663",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/fb347bd3d16e35c50df5fca14ed3c0611e80985b/src/java/org/apache/cassandra/db/Row.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/Row.java?ref=fb347bd3d16e35c50df5fca14ed3c0611e80985b",
                "deletions": 4,
                "filename": "src/java/org/apache/cassandra/db/Row.java",
                "patch": "@@ -178,12 +178,10 @@ public Row cloneMe()\n             }\r\n             else\r\n             {\r\n-                byte[] tmpHash = columnFamilies_.get(cFamily).digest();\r\n-                xorHash = FBUtilities.xor(xorHash, tmpHash);\r\n+                xorHash = FBUtilities.xor(xorHash, columnFamilies_.get(cFamily).digest());\r\n             }\r\n         }\r\n-        logger_.info(\"DIGEST TIME: \" + (System.currentTimeMillis() - start)\r\n-                     + \" ms.\");\r\n+        logger_.info(\"DIGEST TIME: \" + (System.currentTimeMillis() - start) + \" ms.\");\r\n         return xorHash;\r\n     }\r\n \r",
                "raw_url": "https://github.com/apache/cassandra/raw/fb347bd3d16e35c50df5fca14ed3c0611e80985b/src/java/org/apache/cassandra/db/Row.java",
                "sha": "44f6bcf5fd2a232fcfc2e84dc1bf6d7476a7e4fc",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/fb347bd3d16e35c50df5fca14ed3c0611e80985b/src/java/org/apache/cassandra/utils/FBUtilities.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/utils/FBUtilities.java?ref=fb347bd3d16e35c50df5fca14ed3c0611e80985b",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/utils/FBUtilities.java",
                "patch": "@@ -331,8 +331,10 @@ public static void compressToStream(byte[] input, ByteArrayOutputStream bos) thr\n \r\n      public static byte[] xor(byte[] b1, byte[] b2)\r\n      {\r\n-    \t byte[] bLess = null;\r\n-    \t byte[] bMore = null;\r\n+         assert b1 != null;\r\n+         assert b2 != null;\r\n+    \t byte[] bLess;\r\n+    \t byte[] bMore;\r\n \r\n     \t if(b1.length > b2.length)\r\n     \t {\r",
                "raw_url": "https://github.com/apache/cassandra/raw/fb347bd3d16e35c50df5fca14ed3c0611e80985b/src/java/org/apache/cassandra/utils/FBUtilities.java",
                "sha": "e7a6325fa4b8e8c6610a6d13a62c22fe050559d7",
                "status": "modified"
            },
            {
                "additions": 54,
                "blob_url": "https://github.com/apache/cassandra/blob/fb347bd3d16e35c50df5fca14ed3c0611e80985b/test/unit/org/apache/cassandra/db/ColumnFamilyTest.java",
                "changes": 96,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/db/ColumnFamilyTest.java?ref=fb347bd3d16e35c50df5fca14ed3c0611e80985b",
                "deletions": 42,
                "filename": "test/unit/org/apache/cassandra/db/ColumnFamilyTest.java",
                "patch": "@@ -15,7 +15,8 @@\n     // TODO test SuperColumns\n \n     @Test\n-    public void testSingleColumn() throws IOException {\n+    public void testSingleColumn() throws IOException\n+    {\n         Random random = new Random();\n         byte[] bytes = new byte[1024];\n         random.nextBytes(bytes);\n@@ -35,19 +36,20 @@ public void testSingleColumn() throws IOException {\n     }\n \n     @Test\n-    public void testManyColumns() throws IOException {\n+    public void testManyColumns() throws IOException\n+    {\n         ColumnFamily cf;\n \n-        TreeMap<String, byte[]> map = new TreeMap<String,byte[]>();\n-        for ( int i = 100; i < 1000; ++i )\n+        TreeMap<String, byte[]> map = new TreeMap<String, byte[]>();\n+        for (int i = 100; i < 1000; ++i)\n         {\n             map.put(Integer.toString(i), (\"Avinash Lakshman is a good man: \" + i).getBytes());\n         }\n \n         // write\n         cf = new ColumnFamily(\"Standard1\", \"Standard\");\n         DataOutputBuffer bufOut = new DataOutputBuffer();\n-        for (String cName: map.navigableKeySet())\n+        for (String cName : map.navigableKeySet())\n         {\n             cf.addColumn(cName, map.get(cName), 314);\n         }\n@@ -57,60 +59,70 @@ public void testManyColumns() throws IOException {\n         DataInputBuffer bufIn = new DataInputBuffer();\n         bufIn.reset(bufOut.getData(), bufOut.getLength());\n         cf = ColumnFamily.serializer().deserialize(bufIn);\n-        for (String cName: map.navigableKeySet())\n+        for (String cName : map.navigableKeySet())\n         {\n             assert Arrays.equals(cf.getColumn(cName).value(), map.get(cName));\n \n         }\n         assert new HashSet<String>(cf.getColumns().keySet()).equals(map.keySet());\n     }\n-    \n+\n     @Test\n-\tpublic void testGetColumnCount() {\n-    \tColumnFamily cf = new ColumnFamily(\"Standard1\", \"Standard\");\n-\t\tbyte val[] = \"sample value\".getBytes();\n-\t\t\n-\t\tcf.addColumn(\"col1\", val, 1);\n-\t\tcf.addColumn(\"col2\", val, 2);\n-\t\tcf.addColumn(\"col1\", val, 3);\n-\n-\t\tassert 2 == cf.getColumnCount();\n-\t\tassert 2 == cf.getAllColumns().size();\n-\t}\n-    \n+    public void testGetColumnCount()\n+    {\n+        ColumnFamily cf = new ColumnFamily(\"Standard1\", \"Standard\");\n+        byte val[] = \"sample value\".getBytes();\n+\n+        cf.addColumn(\"col1\", val, 1);\n+        cf.addColumn(\"col2\", val, 2);\n+        cf.addColumn(\"col1\", val, 3);\n+\n+        assert 2 == cf.getColumnCount();\n+        assert 2 == cf.getAllColumns().size();\n+    }\n+\n     @Test\n-    public void testTimestamp() {\n-    \tColumnFamily cf = new ColumnFamily(\"Standard1\", \"Standard\");\n-    \tbyte val1[] = \"sample 1\".getBytes();\n+    public void testTimestamp()\n+    {\n+        ColumnFamily cf = new ColumnFamily(\"Standard1\", \"Standard\");\n+        byte val1[] = \"sample 1\".getBytes();\n         byte val2[] = \"sample 2\".getBytes();\n         byte val3[] = \"sample 3\".getBytes();\n \n-    \tcf.addColumn(\"col1\", val1, 2);\n+        cf.addColumn(\"col1\", val1, 2);\n         cf.addColumn(\"col1\", val2, 2); // same timestamp, new value\n         cf.addColumn(\"col1\", val3, 1); // older timestamp -- should be ignored\n \n         assert Arrays.equals(val2, cf.getColumn(\"col1\").value());\n     }\n-    \n+\n     @Test\n-    public void testMergeAndAdd(){\n-    \tColumnFamily cf_new = new ColumnFamily(\"Standard1\", \"Standard\");\n-    \tColumnFamily cf_old = new ColumnFamily(\"Standard1\", \"Standard\");\n-    \tColumnFamily cf_result = new ColumnFamily(\"Standard1\", \"Standard\");\n-    \tbyte val[] = \"sample value\".getBytes();\n-    \tbyte val2[] = \"x value \".getBytes();\n-    \t\n-    \tcf_new.addColumn(\"col1\", val, 3);\n-    \tcf_new.addColumn(\"col2\", val, 4);\n-\n-    \tcf_old.addColumn(\"col2\", val2, 1);\n-    \tcf_old.addColumn(\"col3\", val2, 2);\n-\n-    \tcf_result.addColumns(cf_new);\n-    \tcf_result.addColumns(cf_old);\n-    \t\n-    \tassert 3 == cf_result.getColumnCount() : \"Count is \" + cf_new.getColumnCount();\n-    \t//addcolumns will only add if timestamp >= old timestamp\n+    public void testMergeAndAdd()\n+    {\n+        ColumnFamily cf_new = new ColumnFamily(\"Standard1\", \"Standard\");\n+        ColumnFamily cf_old = new ColumnFamily(\"Standard1\", \"Standard\");\n+        ColumnFamily cf_result = new ColumnFamily(\"Standard1\", \"Standard\");\n+        byte val[] = \"sample value\".getBytes();\n+        byte val2[] = \"x value \".getBytes();\n+\n+        cf_new.addColumn(\"col1\", val, 3);\n+        cf_new.addColumn(\"col2\", val, 4);\n+\n+        cf_old.addColumn(\"col2\", val2, 1);\n+        cf_old.addColumn(\"col3\", val2, 2);\n+\n+        cf_result.addColumns(cf_new);\n+        cf_result.addColumns(cf_old);\n+\n+        assert 3 == cf_result.getColumnCount() : \"Count is \" + cf_new.getColumnCount();\n+        //addcolumns will only add if timestamp >= old timestamp\n         assert Arrays.equals(val, cf_result.getColumn(\"col2\").value());\n     }\n+\n+    @Test\n+    public void testEmptyDigest()\n+    {\n+        ColumnFamily cf = new ColumnFamily(\"Standard1\", \"Standard\");\n+        assert cf.digest().length == 0;\n+    }\n }",
                "raw_url": "https://github.com/apache/cassandra/raw/fb347bd3d16e35c50df5fca14ed3c0611e80985b/test/unit/org/apache/cassandra/db/ColumnFamilyTest.java",
                "sha": "1647efb335ca2864c42f15caa7103d425fe58720",
                "status": "modified"
            }
        ],
        "message": "fix CF.digest NPE.  patch by jbellis; reviewed by Eric Evans for CASSANDRA-149\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/cassandra/trunk@772690 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cassandra/commit/3395efdb30be0e57dd3039993ade1d5ed691187d",
        "patched_files": [
            "Row.java",
            "ReadResponse.java",
            "FBUtilities.java",
            "ColumnFamily.java",
            "ReadVerbHandler.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "ColumnFamilyTest.java",
            "RowTest.java"
        ]
    },
    "cassandra_ff29d60": {
        "bug_id": "cassandra_ff29d60",
        "commit": "https://github.com/apache/cassandra/commit/ff29d609979aae2c584ec6e6cd370da56945dc18",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/ff29d609979aae2c584ec6e6cd370da56945dc18/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=ff29d609979aae2c584ec6e6cd370da56945dc18",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 4.0\n+ * NPE in IR cleanup when columnfamily has no sstables (CASSANDRA-13585)\n  * Fix Randomness of stress values (CASSANDRA-12744)\n  * Allow selecting Map values and Set elements (CASSANDRA-7396)\n  * Fast and garbage-free Streaming Histogram (CASSANDRA-13444)",
                "raw_url": "https://github.com/apache/cassandra/raw/ff29d609979aae2c584ec6e6cd370da56945dc18/CHANGES.txt",
                "sha": "4425aad7bae778a07c76ba92c944d4f298e13c35",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/ff29d609979aae2c584ec6e6cd370da56945dc18/src/java/org/apache/cassandra/repair/consistent/PendingAntiCompaction.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/repair/consistent/PendingAntiCompaction.java?ref=ff29d609979aae2c584ec6e6cd370da56945dc18",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/repair/consistent/PendingAntiCompaction.java",
                "patch": "@@ -69,8 +69,10 @@\n \n         void abort()\n         {\n-            txn.abort();\n-            refs.release();\n+            if (txn != null)\n+                txn.abort();\n+            if (refs != null)\n+                refs.release();\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/ff29d609979aae2c584ec6e6cd370da56945dc18/src/java/org/apache/cassandra/repair/consistent/PendingAntiCompaction.java",
                "sha": "f183d1443ad76160a9a484f11b627fc562163d60",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/cassandra/blob/ff29d609979aae2c584ec6e6cd370da56945dc18/test/unit/org/apache/cassandra/repair/consistent/PendingAntiCompactionTest.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/repair/consistent/PendingAntiCompactionTest.java?ref=ff29d609979aae2c584ec6e6cd370da56945dc18",
                "deletions": 0,
                "filename": "test/unit/org/apache/cassandra/repair/consistent/PendingAntiCompactionTest.java",
                "patch": "@@ -255,6 +255,20 @@ public void pendingRepairSSTablesAreNotAcquired() throws Exception\n         result.abort();  // releases sstable refs\n     }\n \n+    @Test\n+    public void pendingRepairNoSSTablesExist() throws Exception\n+    {\n+        cfs.disableAutoCompaction();\n+\n+        Assert.assertEquals(0, cfs.getLiveSSTables().size());\n+\n+        PendingAntiCompaction.AcquisitionCallable acquisitionCallable = new PendingAntiCompaction.AcquisitionCallable(cfs, FULL_RANGE, UUIDGen.getTimeUUID());\n+        PendingAntiCompaction.AcquireResult result = acquisitionCallable.call();\n+        Assert.assertNotNull(result);\n+\n+        result.abort();  // There's nothing to release, but we should exit cleanly\n+    }\n+\n     /**\n      * anti compaction task should be submitted if everything is ok\n      */",
                "raw_url": "https://github.com/apache/cassandra/raw/ff29d609979aae2c584ec6e6cd370da56945dc18/test/unit/org/apache/cassandra/repair/consistent/PendingAntiCompactionTest.java",
                "sha": "3119453a30788dde5ab16fc82f9f3d701144a2b3",
                "status": "modified"
            }
        ],
        "message": "NPE in IR cleanup when columnfamily has no sstables\n\nPatch by Jeff Jirsa; Reviewed by Marcus Eriksson for CASSANDRA-13585",
        "parent": "https://github.com/apache/cassandra/commit/10397a1bfca96f07eb815cfa81cc2cb745f42cf1",
        "patched_files": [
            "PendingAntiCompaction.java",
            "CHANGES.java"
        ],
        "repo": "cassandra",
        "unit_tests": [
            "PendingAntiCompactionTest.java"
        ]
    }
}