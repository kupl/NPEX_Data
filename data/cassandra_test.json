{
    "cassandra_3f56f6b": {
        "repo": "cassandra",
        "message": "include cf/keyspace name in sstable2json NPEs.  patch by jbellis\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/cassandra/trunk@898809 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/cassandra/commit/3f56f6b4dd975e4eaed65c9f27d0d50b1b6b5788",
        "parent": "https://github.com/apache/cassandra/commit/2ad01352a88b319a4364bb5a9e714e601b17a700",
        "bug_id": "cassandra_3f56f6b",
        "file": [
            {
                "sha": "2d524a9c416247f222d6ccf18cb2f0acc0b4488e",
                "filename": "src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "blob_url": "https://github.com/apache/cassandra/blob/3f56f6b4dd975e4eaed65c9f27d0d50b1b6b5788/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "raw_url": "https://github.com/apache/cassandra/raw/3f56f6b4dd975e4eaed65c9f27d0d50b1b6b5788/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/DatabaseDescriptor.java?ref=3f56f6b4dd975e4eaed65c9f27d0d50b1b6b5788",
                "patch": "@@ -939,7 +939,10 @@ public static String getDataFileLocationForTable(String table, long expectedComp\n     public static AbstractType getComparator(String tableName, String cfName)\n     {\n         assert tableName != null;\n-        return getCFMetaData(tableName, cfName).comparator;\n+        CFMetaData cfmd = getCFMetaData(tableName, cfName);\n+        if (cfmd == null)\n+            throw new NullPointerException(\"Unknown ColumnFamily \" + cfName + \" in keyspace \" + tableName);\n+        return cfmd.comparator;\n     }\n \n     public static AbstractType getSubComparator(String tableName, String cfName)",
                "deletions": 1
            }
        ],
        "patched_files": [
            "DatabaseDescriptor.java"
        ],
        "unit_tests": [
            "DatabaseDescriptorTest.java"
        ]
    },
    "cassandra_46e5f23": {
        "repo": "cassandra",
        "message": "fix NPE caused by getToken on endpoint that isn't member of ring yet.  add assert to prevent in the future.\npatch by jbellis for CASSANDRA-522\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/cassandra/trunk@832268 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/cassandra/commit/46e5f23e1bb6cf374d0d89ecff40c84a1824b998",
        "parent": "https://github.com/apache/cassandra/commit/3678daa0be6e88821b3a61e20c78493d6f119449",
        "bug_id": "cassandra_46e5f23",
        "file": [
            {
                "sha": "7f50e2ff952a2a1bfba09e882d4c89401dfe75fc",
                "filename": "src/java/org/apache/cassandra/dht/BootStrapper.java",
                "blob_url": "https://github.com/apache/cassandra/blob/46e5f23e1bb6cf374d0d89ecff40c84a1824b998/src/java/org/apache/cassandra/dht/BootStrapper.java",
                "raw_url": "https://github.com/apache/cassandra/raw/46e5f23e1bb6cf374d0d89ecff40c84a1824b998/src/java/org/apache/cassandra/dht/BootStrapper.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/dht/BootStrapper.java?ref=46e5f23e1bb6cf374d0d89ecff40c84a1824b998",
                "patch": "@@ -110,7 +110,7 @@ public void run()\n         }).start();\n     }\n \n-    public static void guessTokenIfNotSpecified() throws IOException\n+    public static void guessTokenIfNotSpecified(TokenMetadata metadata) throws IOException\n     {\n         StorageService ss = StorageService.instance();\n         StorageLoadBalancer slb = StorageLoadBalancer.instance();\n@@ -122,8 +122,10 @@ public static void guessTokenIfNotSpecified() throws IOException\n         {\n             double maxLoad = 0;\n             InetAddress maxEndpoint = null;\n-            for (Map.Entry<InetAddress,Double> entry : slb.getLoadInfo().entrySet())\n+            for (Map.Entry<InetAddress, Double> entry : slb.getLoadInfo().entrySet())\n             {\n+                if (!metadata.isMember(entry.getKey()))\n+                    continue;\n                 if (maxEndpoint == null || entry.getValue() > maxLoad)\n                 {\n                     maxEndpoint = entry.getKey();",
                "deletions": 2
            },
            {
                "sha": "837e1190ddad70b5922decd3ffbe10db85cd5351",
                "filename": "src/java/org/apache/cassandra/locator/TokenMetadata.java",
                "blob_url": "https://github.com/apache/cassandra/blob/46e5f23e1bb6cf374d0d89ecff40c84a1824b998/src/java/org/apache/cassandra/locator/TokenMetadata.java",
                "raw_url": "https://github.com/apache/cassandra/raw/46e5f23e1bb6cf374d0d89ecff40c84a1824b998/src/java/org/apache/cassandra/locator/TokenMetadata.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/locator/TokenMetadata.java?ref=46e5f23e1bb6cf374d0d89ecff40c84a1824b998",
                "patch": "@@ -114,7 +114,8 @@ public void update(Token token, InetAddress endpoint)\n     public Token getToken(InetAddress endpoint)\n     {\n         assert endpoint != null;\n-\n+        assert isMember(endpoint); // don't want to return nulls\n+        \n         lock.readLock().lock();\n         try\n         {\n@@ -126,7 +127,7 @@ public Token getToken(InetAddress endpoint)\n         }\n     }\n     \n-    public boolean isKnownEndPoint(InetAddress endpoint)\n+    public boolean isMember(InetAddress endpoint)\n     {\n         assert endpoint != null;\n ",
                "deletions": 2
            },
            {
                "sha": "d39f7c4647b84b07a48d5355bbfbdace18c31411",
                "filename": "src/java/org/apache/cassandra/service/StorageService.java",
                "blob_url": "https://github.com/apache/cassandra/blob/46e5f23e1bb6cf374d0d89ecff40c84a1824b998/src/java/org/apache/cassandra/service/StorageService.java",
                "raw_url": "https://github.com/apache/cassandra/raw/46e5f23e1bb6cf374d0d89ecff40c84a1824b998/src/java/org/apache/cassandra/service/StorageService.java",
                "status": "modified",
                "changes": 17,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=46e5f23e1bb6cf374d0d89ecff40c84a1824b998",
                "patch": "@@ -272,7 +272,7 @@ public void start() throws IOException\n         {\n             logger_.info(\"Starting in bootstrap mode (first, sleeping to get load information)\");\n             Gossiper.instance().addApplicationState(MODE, new ApplicationState(MODE_MOVING));\n-            BootStrapper.guessTokenIfNotSpecified();\n+            BootStrapper.guessTokenIfNotSpecified(tokenMetadata_);\n             new BootStrapper(replicationStrategy_, FBUtilities.getLocalAddress(), getLocalToken(), tokenMetadata_).startBootstrap(); // handles token update\n         }\n         else\n@@ -373,20 +373,21 @@ public void onChange(InetAddress endpoint, EndPointState epState)\n             Token newToken = getPartitioner().getTokenFactory().fromString(nodeIdState.getState());\n             if (logger_.isDebugEnabled())\n               logger_.debug(\"CHANGE IN STATE FOR \" + endpoint + \" - has token \" + nodeIdState.getState());\n-            Token oldToken = tokenMetadata_.getToken(endpoint);\n \n-            if ( oldToken != null )\n+            if (tokenMetadata_.isMember(endpoint))\n             {\n+                Token oldToken = tokenMetadata_.getToken(endpoint);\n+\n                 /*\n                  * If oldToken equals the newToken then the node had crashed\n                  * and is coming back up again. If oldToken is not equal to\n                  * the newToken this means that the node is being relocated\n                  * to another position in the ring.\n                 */\n-                if ( !oldToken.equals(newToken) )\n+                if (!oldToken.equals(newToken))\n                 {\n                     if (logger_.isDebugEnabled())\n-                      logger_.debug(\"Relocation for endpoint \" + endpoint);\n+                        logger_.debug(\"Relocation for endpoint \" + endpoint);\n                     updateForeignToken(newToken, endpoint);\n                 }\n                 else\n@@ -396,7 +397,7 @@ public void onChange(InetAddress endpoint, EndPointState epState)\n                      * Deliver the hints that we have for this endpoint.\n                     */\n                     if (logger_.isDebugEnabled())\n-                      logger_.debug(\"Sending hinted data to \" + endpoint);\n+                        logger_.debug(\"Sending hinted data to \" + endpoint);\n                     deliverHints(endpoint);\n                 }\n             }\n@@ -414,10 +415,10 @@ public void onChange(InetAddress endpoint, EndPointState epState)\n              * If we are here and if this node is UP and already has an entry\n              * in the token map. It means that the node was behind a network partition.\n             */\n-            if ( epState.isAlive() && tokenMetadata_.isKnownEndPoint(endpoint) )\n+            if (epState.isAlive() && tokenMetadata_.isMember(endpoint))\n             {\n                 if (logger_.isDebugEnabled())\n-                  logger_.debug(\"InetAddress \" + endpoint + \" just recovered from a partition. Sending hinted data.\");\n+                    logger_.debug(\"InetAddress \" + endpoint + \" just recovered from a partition. Sending hinted data.\");\n                 deliverHints(endpoint);\n             }\n         }",
                "deletions": 8
            }
        ],
        "patched_files": [
            "BootStrapper.java"
        ],
        "unit_tests": [
            "BootStrapperTest.java"
        ]
    }
}