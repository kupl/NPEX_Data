[
    {
        "repo": "commons-jexl",
        "commit": "https://github.com/apache/commons-jexl/commit/9dab666d3ecb09fc9ab2e9acd9486ac066e888c8",
        "bug_id": "commons-jexl_9dab666",
        "message": "JEXL-324: fixed grammar for new(arg, ...), made one arg mandatory\n- fixed debugger (belt and suspenders)\nTask #JEXL-324 - JexlEngine.createExpression(\"new()\").getParsedText() throws NPE",
        "parent": "https://github.com/apache/commons-jexl/commit/51a981c900b77109ed090a616b2358b80ccb3e9d",
        "patched_files": [
            "Debugger.java",
            "Parser.jjt"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 7,
                "raw_url": "https://github.com/apache/commons-jexl/raw/9dab666d3ecb09fc9ab2e9acd9486ac066e888c8/src/main/java/org/apache/commons/jexl3/internal/Debugger.java",
                "contents_url": "https://api.github.com/repos/apache/commons-jexl/contents/src/main/java/org/apache/commons/jexl3/internal/Debugger.java?ref=9dab666d3ecb09fc9ab2e9acd9486ac066e888c8",
                "filename": "src/main/java/org/apache/commons/jexl3/internal/Debugger.java",
                "deletions": 5,
                "sha": "e3ffecc9a6022d98071c372616c0937bd13da98a",
                "blob_url": "https://github.com/apache/commons-jexl/blob/9dab666d3ecb09fc9ab2e9acd9486ac066e888c8/src/main/java/org/apache/commons/jexl3/internal/Debugger.java",
                "patch": "@@ -801,10 +801,12 @@ protected Object visit(ASTMapLiteral node, Object data) {\n     protected Object visit(ASTConstructorNode node, Object data) {\n         int num = node.jjtGetNumChildren();\n         builder.append(\"new(\");\n-        accept(node.jjtGetChild(0), data);\n-        for (int i = 1; i < num; ++i) {\n-            builder.append(\", \");\n-            accept(node.jjtGetChild(i), data);\n+        if (num > 0) {\n+            accept(node.jjtGetChild(0), data);\n+            for (int i = 1; i < num; ++i) {\n+                builder.append(\", \");\n+                accept(node.jjtGetChild(i), data);\n+            }\n         }\n         builder.append(\")\");\n         return data;\n@@ -818,7 +820,7 @@ protected Object visit(ASTFunctionNode node, Object data) {\n             builder.append(\":\");\n             accept(node.jjtGetChild(1), data);\n             accept(node.jjtGetChild(2), data);\n-        } else {\n+        } else if (num == 2) {\n             accept(node.jjtGetChild(0), data);\n             accept(node.jjtGetChild(1), data);\n         }",
                "changes": 12
            },
            {
                "status": "modified",
                "additions": 3,
                "raw_url": "https://github.com/apache/commons-jexl/raw/9dab666d3ecb09fc9ab2e9acd9486ac066e888c8/src/main/java/org/apache/commons/jexl3/parser/Parser.jjt",
                "contents_url": "https://api.github.com/repos/apache/commons-jexl/contents/src/main/java/org/apache/commons/jexl3/parser/Parser.jjt?ref=9dab666d3ecb09fc9ab2e9acd9486ac066e888c8",
                "filename": "src/main/java/org/apache/commons/jexl3/parser/Parser.jjt",
                "deletions": 3,
                "sha": "5cbb9a61504bd8e9be8f838c170b61f2f7d8cd7b",
                "blob_url": "https://github.com/apache/commons-jexl/blob/9dab666d3ecb09fc9ab2e9acd9486ac066e888c8/src/main/java/org/apache/commons/jexl3/parser/Parser.jjt",
                "patch": "@@ -70,8 +70,8 @@ public final class Parser extends JexlParser\n         } catch (TokenMgrError xtme) {\n             throw new JexlException.Tokenization(info, xtme).clean();\n         } catch (ParseException xparse) {\n-            Token errortok = token.next;\n-            throw new JexlException.Parsing(info.at(errortok.beginLine, errortok.beginColumn), token.image).clean();\n+            Token errortok = jj_lastpos != null? jj_lastpos : jj_scanpos != null ? jj_scanpos : token;\n+            throw new JexlException.Parsing(info.at(errortok.beginLine, errortok.beginColumn), errortok.image).clean();\n         } finally {\n             token_source.defaultLexState = DEFAULT;\n             cleanup(previous);\n@@ -811,7 +811,7 @@ void FunctionCall() #void : {}\n \n void Constructor() #ConstructorNode() : {}\n {\n-  <NEW> <LPAREN> [ Expression() ( <COMMA> Expression() )* ] <RPAREN>\n+  <NEW> <LPAREN> Expression() ( <COMMA> Expression() )* <RPAREN>\n }\n \n void Parameter() #void :",
                "changes": 6
            },
            {
                "status": "modified",
                "additions": 39,
                "raw_url": "https://github.com/apache/commons-jexl/raw/9dab666d3ecb09fc9ab2e9acd9486ac066e888c8/src/test/java/org/apache/commons/jexl3/Issues300Test.java",
                "contents_url": "https://api.github.com/repos/apache/commons-jexl/contents/src/test/java/org/apache/commons/jexl3/Issues300Test.java?ref=9dab666d3ecb09fc9ab2e9acd9486ac066e888c8",
                "filename": "src/test/java/org/apache/commons/jexl3/Issues300Test.java",
                "deletions": 1,
                "sha": "a7b590471902238ee224c5a2a5613e0463a0275e",
                "blob_url": "https://github.com/apache/commons-jexl/blob/9dab666d3ecb09fc9ab2e9acd9486ac066e888c8/src/test/java/org/apache/commons/jexl3/Issues300Test.java",
                "patch": "@@ -25,6 +25,7 @@\n import java.util.Map;\n import org.junit.Assert;\n import static org.junit.Assert.assertEquals;\n+import org.junit.Ignore;\n import org.junit.Test;\n \n /**\n@@ -377,5 +378,42 @@ public void test322() throws Exception {\n             Assert.assertEquals(ctls[i], output);\n         }\n     }\n-\n+    \n+    @Ignore\n+    public void test323() throws Exception {\n+        // Create or retrieve an engine\n+        JexlEngine jexl = new JexlBuilder().safe(false).create();\n+        // on recent code: JexlEngine jexl = new JexlBuilder().safe(false).create();\n+\n+        // Populate to identical global variables\n+        JexlContext jc = new MapContext();\n+        jc.set(\"NormalVariable\", null);\n+        jc.set(\"ant.variable\", null);\n+\n+        // Evaluate the value of the normal variable\n+        JexlExpression expression1 = jexl.createExpression(\"NormalVariable\");\n+        Object o1 = expression1.evaluate(jc);\n+        Assert.assertEquals(null, o1);\n+\n+        // Evaluate the value of the ant-style variable\n+        JexlExpression expression2 = jexl.createExpression(\"ant.variable\");\n+        Object o2 = expression2.evaluate(jc); // <-- BUG: throws exception instead of returning null\n+        Assert.assertEquals(null, o2);\n+    }\n+    \n+    @Test\n+    public void test324() throws Exception {\n+        JexlEngine jexl = new JexlBuilder().create();\n+        String src42 = \"new('java.lang.Integer', 42)\";\n+        JexlExpression expr0 = jexl.createExpression(src42);\n+        Assert.assertEquals(42, expr0.evaluate(null));\n+        String parsed = expr0.getParsedText();\n+        Assert.assertEquals(src42, parsed);\n+        try {\n+            JexlExpression expr = jexl.createExpression(\"new()\");\n+            Assert.fail(\"should not parse\");\n+        } catch (JexlException.Parsing xparse) {\n+            Assert.assertTrue(xparse.toString().contains(\"new\"));\n+        }\n+    }\n }",
                "changes": 40
            }
        ],
        "unit_tests": [
            "Issues300Test.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "src/test/java/org/apache/commons/jexl3/Issues300Test.java",
        "buggy_files": [
            "src/main/java/org/apache/commons/jexl3/internal/Debugger.java",
            "src/main/java/org/apache/commons/jexl3/parser/Parser.jjt"
        ],
        "fixed": true
    }
]