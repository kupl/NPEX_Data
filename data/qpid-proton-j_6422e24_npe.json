[
    {
        "repo": "qpid-proton-j",
        "commit": "https://github.com/apache/qpid-proton-j/commit/6422e2497b62b46db9e993059bc514a53a8ed643",
        "bug_id": "qpid-proton-j_6422e24",
        "message": "PROTON-1100: also protect against an NPE that occurs if sender link has messages on it before the Open frame is sent",
        "parent": "https://github.com/apache/qpid-proton-j/commit/0c27d5ffbbb272902f24262f13d5c6b2985902b4",
        "patched_files": [
            "TransportImpl.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/qpid-proton-j/raw/6422e2497b62b46db9e993059bc514a53a8ed643/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/TransportImpl.java",
                "contents_url": "https://api.github.com/repos/apache/qpid-proton-j/contents/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/TransportImpl.java?ref=6422e2497b62b46db9e993059bc514a53a8ed643",
                "filename": "proton-j/src/main/java/org/apache/qpid/proton/engine/impl/TransportImpl.java",
                "deletions": 1,
                "sha": "d85794f545087c17ac7d15b56d6e1aa4632b3b4b",
                "blob_url": "https://github.com/apache/qpid-proton-j/blob/6422e2497b62b46db9e993059bc514a53a8ed643/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/TransportImpl.java",
                "patch": "@@ -489,7 +489,7 @@ private void processSenderFlow()\n \n     private void processTransportWork()\n     {\n-        if(_connectionEndpoint != null)\n+        if(_connectionEndpoint != null && _isOpenSent)\n         {\n             DeliveryImpl delivery = _connectionEndpoint.getTransportWorkHead();\n             while(delivery != null)",
                "changes": 2
            },
            {
                "status": "modified",
                "additions": 107,
                "raw_url": "https://github.com/apache/qpid-proton-j/raw/6422e2497b62b46db9e993059bc514a53a8ed643/proton-j/src/test/java/org/apache/qpid/proton/engine/impl/TransportImplTest.java",
                "contents_url": "https://api.github.com/repos/apache/qpid-proton-j/contents/proton-j/src/test/java/org/apache/qpid/proton/engine/impl/TransportImplTest.java?ref=6422e2497b62b46db9e993059bc514a53a8ed643",
                "filename": "proton-j/src/test/java/org/apache/qpid/proton/engine/impl/TransportImplTest.java",
                "deletions": 1,
                "sha": "888f4af5bc154264754afa7d5d06286630015ecc",
                "blob_url": "https://github.com/apache/qpid-proton-j/blob/6422e2497b62b46db9e993059bc514a53a8ed643/proton-j/src/test/java/org/apache/qpid/proton/engine/impl/TransportImplTest.java",
                "patch": "@@ -29,22 +29,32 @@\n import static org.junit.Assert.fail;\n \n import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n import java.util.LinkedList;\n \n import org.apache.qpid.proton.Proton;\n import org.apache.qpid.proton.amqp.UnsignedInteger;\n+import org.apache.qpid.proton.amqp.UnsignedShort;\n+import org.apache.qpid.proton.amqp.messaging.AmqpValue;\n import org.apache.qpid.proton.amqp.transport.Attach;\n import org.apache.qpid.proton.amqp.transport.Begin;\n+import org.apache.qpid.proton.amqp.transport.Flow;\n import org.apache.qpid.proton.amqp.transport.FrameBody;\n import org.apache.qpid.proton.amqp.transport.Open;\n+import org.apache.qpid.proton.amqp.transport.Role;\n+import org.apache.qpid.proton.amqp.transport.Transfer;\n+import org.apache.qpid.proton.engine.Collector;\n import org.apache.qpid.proton.engine.Connection;\n+import org.apache.qpid.proton.engine.Delivery;\n import org.apache.qpid.proton.engine.EndpointState;\n import org.apache.qpid.proton.engine.Link;\n import org.apache.qpid.proton.engine.Receiver;\n+import org.apache.qpid.proton.engine.Sender;\n import org.apache.qpid.proton.engine.Session;\n import org.apache.qpid.proton.engine.Transport;\n import org.apache.qpid.proton.engine.TransportException;\n import org.apache.qpid.proton.framing.TransportFrame;\n+import org.apache.qpid.proton.message.Message;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n@@ -58,6 +68,8 @@\n     private static final TransportFrame TRANSPORT_FRAME_BEGIN = new TransportFrame(CHANNEL_ID, new Begin(), null);\n     private static final TransportFrame TRANSPORT_FRAME_OPEN = new TransportFrame(CHANNEL_ID, new Open(), null);\n \n+    private static final int BUFFER_SIZE = 4096;\n+\n     @Rule\n     public ExpectedException _expectedException = ExpectedException.none();\n \n@@ -457,7 +469,7 @@ void doOpenLinkBeforeOpenConnectionTestImpl(boolean receiverLink)\n      * be pipelined together.\n      */\n     @Test\n-    public void testReceiverFlowWithoutOpen()\n+    public void testReceiverFlowBeforeOpenConnection()\n     {\n         MockTransportImpl transport = new MockTransportImpl();\n         Connection connection = Proton.connection();\n@@ -485,6 +497,76 @@ public void testReceiverFlowWithoutOpen()\n         assertTrue(\"Unexpected frame type\", transport.writes.get(1) instanceof Begin);\n     }\n \n+    @Test\n+    public void testSenderSendBeforeOpenConnection()\n+    {\n+        MockTransportImpl transport = new MockTransportImpl();\n+\n+        Connection connection = Proton.connection();\n+        transport.bind(connection);\n+\n+        Collector collector = Collector.Factory.create();\n+        connection.collect(collector);\n+\n+        Session session = connection.session();\n+        session.open();\n+\n+        String linkName = \"mySender\";\n+        Sender sender = session.sender(linkName);\n+        sender.open();\n+\n+        sendMessage(sender, \"tag1\", \"content1\");\n+\n+        pumpMockTransport(transport);\n+\n+        assertEquals(\"Unexpected frames written: \" + getFrameTypesWritten(transport), 0, transport.writes.size());\n+\n+        // Now open the connection, expect the Open and Begin and Attach frames but\n+        // nothing else as we the sender wont have credit yet.\n+        connection.open();\n+\n+        pumpMockTransport(transport);\n+\n+        assertEquals(\"Unexpected frames written: \" + getFrameTypesWritten(transport), 3, transport.writes.size());\n+\n+        assertTrue(\"Unexpected frame type\", transport.writes.get(0) instanceof Open);\n+        assertTrue(\"Unexpected frame type\", transport.writes.get(1) instanceof Begin);\n+        assertTrue(\"Unexpected frame type\", transport.writes.get(2) instanceof Attach);\n+\n+        // Send the necessary responses to open/begin/attach then give sender credit\n+        transport.handleFrame(new TransportFrame(0, new Open(), null));\n+\n+        Begin begin = new Begin();\n+        begin.setRemoteChannel(UnsignedShort.valueOf((short) 0));\n+        transport.handleFrame(new TransportFrame(0, begin, null));\n+\n+        Attach attach = new Attach();\n+        attach.setHandle(UnsignedInteger.ZERO);\n+        attach.setRole(Role.RECEIVER);\n+        attach.setName(linkName);\n+        attach.setInitialDeliveryCount(UnsignedInteger.ZERO);\n+        transport.handleFrame(new TransportFrame(0, attach, null));\n+\n+        Flow flow = new Flow();\n+        flow.setHandle(UnsignedInteger.ZERO);\n+        flow.setDeliveryCount(UnsignedInteger.ZERO);\n+        flow.setNextIncomingId(UnsignedInteger.ONE);\n+        flow.setNextOutgoingId(UnsignedInteger.ZERO);\n+        flow.setIncomingWindow(UnsignedInteger.valueOf(1024));\n+        flow.setOutgoingWindow(UnsignedInteger.valueOf(1024));\n+        flow.setLinkCredit(UnsignedInteger.valueOf(10));\n+\n+        transport.handleFrame(new TransportFrame(0, flow, null));\n+\n+        assertEquals(\"Unexpected frames written: \" + getFrameTypesWritten(transport), 3, transport.writes.size());\n+\n+        // Now pump the transport again and expect a transfer for the message\n+        pumpMockTransport(transport);\n+\n+        assertEquals(\"Unexpected frames written: \" + getFrameTypesWritten(transport), 4, transport.writes.size());\n+        assertTrue(\"Unexpected frame type\", transport.writes.get(3) instanceof Transfer);\n+    }\n+\n     private void pumpMockTransport(MockTransportImpl transport)\n     {\n         while(transport.pending() > 0)\n@@ -507,4 +589,28 @@ private String getFrameTypesWritten(MockTransportImpl transport)\n             return result;\n         }\n     }\n+\n+    private Delivery sendMessage(Sender sender, String deliveryTag, String messageContent)\n+    {\n+        byte[] tag = deliveryTag.getBytes(StandardCharsets.UTF_8);\n+\n+        Message m = Message.Factory.create();\n+        m.setBody(new AmqpValue(messageContent));\n+\n+        byte[] encoded = new byte[BUFFER_SIZE];\n+        int len = m.encode(encoded, 0, BUFFER_SIZE);\n+\n+        assertTrue(\"given array was too small\", len < BUFFER_SIZE);\n+\n+        Delivery delivery = sender.delivery(tag);\n+\n+        int sent = sender.send(encoded, 0, len);\n+\n+        assertEquals(\"sender unable to send all data at once as assumed for simplicity\", len, sent);\n+\n+        boolean senderAdvanced = sender.advance();\n+        assertTrue(\"sender has not advanced\", senderAdvanced);\n+\n+        return delivery;\n+    }\n }",
                "changes": 108
            }
        ],
        "unit_tests": [
            "TransportImplTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "proton-j/src/test/java/org/apache/qpid/proton/engine/impl/TransportImplTest.java",
        "buggy_files": [
            "proton-j/src/main/java/org/apache/qpid/proton/engine/impl/TransportImpl.java"
        ],
        "fixed": true
    }
]