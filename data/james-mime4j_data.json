[
    {
        "repo": "james-mime4j",
        "message": "Fix NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/james/mime4j/trunk@674229 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/james-mime4j/commit/869168e66ca0fd16e5c7f894b2b3c5c00e7d7be0",
        "parent": "https://github.com/apache/james-mime4j/commit/103a6912cc7cad2177db3e50006ec3d54bc4ab3b",
        "bug_id": "james-mime4j_1",
        "file": [
            {
                "sha": "fbdb3812f99e89d1414785935dcae8389a7f110c",
                "filename": "src/main/java/org/apache/james/mime4j/MimeTokenStream.java",
                "blob_url": "https://github.com/apache/james-mime4j/blob/869168e66ca0fd16e5c7f894b2b3c5c00e7d7be0/src/main/java/org/apache/james/mime4j/MimeTokenStream.java",
                "raw_url": "https://github.com/apache/james-mime4j/raw/869168e66ca0fd16e5c7f894b2b3c5c00e7d7be0/src/main/java/org/apache/james/mime4j/MimeTokenStream.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/james-mime4j/contents/src/main/java/org/apache/james/mime4j/MimeTokenStream.java?ref=869168e66ca0fd16e5c7f894b2b3c5c00e7d7be0",
                "patch": "@@ -213,7 +213,9 @@ public int getRecursionMode() {\n      */\r\n     public void setRecursionMode(int mode) {\r\n         recursionMode = mode;\r\n-        currentStateMachine.setRecursionMode(mode);\r\n+        if (currentStateMachine != null) {\r\n+            currentStateMachine.setRecursionMode(mode);\r\n+        }\r\n     }\r\n \r\n     /**\r",
                "deletions": 1
            },
            {
                "sha": "d7427ce2b448633d25412412c884e430add4722b",
                "filename": "src/test/java/org/apache/james/mime4j/ExampleMail.java",
                "blob_url": "https://github.com/apache/james-mime4j/blob/869168e66ca0fd16e5c7f894b2b3c5c00e7d7be0/src/test/java/org/apache/james/mime4j/ExampleMail.java",
                "raw_url": "https://github.com/apache/james-mime4j/raw/869168e66ca0fd16e5c7f894b2b3c5c00e7d7be0/src/test/java/org/apache/james/mime4j/ExampleMail.java",
                "status": "modified",
                "changes": 37,
                "additions": 35,
                "contents_url": "https://api.github.com/repos/apache/james-mime4j/contents/src/test/java/org/apache/james/mime4j/ExampleMail.java?ref=869168e66ca0fd16e5c7f894b2b3c5c00e7d7be0",
                "patch": "@@ -300,7 +300,40 @@\n     \"Delivered-To: robertburrelldonkin@gmail.com\\r\\n\" +\n     \"\\r\\n\" + ONE_PART_MIME_ASCII_BODY;\n     \n-    \n+    public static final String INNER_MAIL = \"From: Timothy Tayler <tim@example.org>\\r\\n\" +\n+    \"To: Joshua Tetley <joshua@example.org>\\r\\n\" +\n+    \"Date: Tue, 12 Feb 2008 17:34:09 +0000 (GMT)\\r\\n\" +\n+    \"Subject: Multipart Without RFC822 Part\\r\\n\" +\n+    \"Content-Type: multipart/mixed;boundary=42\\r\\n\\r\\n\" +\n+    \"--42\\r\\n\" +\n+    \"Content-Type:text/plain; charset=US-ASCII\\r\\n\\r\\n\" +\n+    \"First part of this mail\\r\\n\" +\n+    \"--42\\r\\n\" +\n+    \"Content-Type:text/plain; charset=US-ASCII\\r\\n\\r\\n\" +\n+    \"Second part of this mail\\r\\n\" +\n+    \"--42--\\r\\n\";\n+\n+    public static final String MAIL_WITH_RFC822_PART = \"MIME-Version: 1.0\\r\\n\" +\n+    \"From: Timothy Tayler <tim@example.org>\\r\\n\" +\n+    \"To: Joshua Tetley <joshua@example.org>\\r\\n\" +\n+    \"Date: Tue, 12 Feb 2008 17:34:09 +0000 (GMT)\\r\\n\" +\n+    \"Subject: Multipart With RFC822 Part\\r\\n\" +\n+    \"Content-Type: multipart/mixed;boundary=1729\\r\\n\\r\\n\" +\n+    \"A short premable\\r\\n\" +\n+    \"--1729\\r\\n\\r\\n\" +\n+    \"First part has no headers\\r\\n\" +\n+    \"--1729\\r\\n\" +\n+    \"Content-Type: text/plain; charset=US-ASCII\\r\\n\\r\\n\" +\n+    \"Second part is plain text\\r\\n\" +\n+    \"--1729\\r\\n\" +\n+    \"Content-Type: message/rfc822\\r\\n\\r\\n\" +\n+    INNER_MAIL +\n+    \"--1729\\r\\n\" +\n+    \"Content-Type: text/plain; charset=US-ASCII\\r\\n\\r\\n\" +\n+    \"Last part is plain text\\r\\n\" +\n+    \"--1729--\\r\\n\" +\n+    \"The End\";\n+        \n     public static final String ONE_PART_MIME_8859 = \"Received: by 10.114.126.16 with HTTP; Thu, 6 Mar 2008 10:02:03 -0800 (PST)\\r\\n\" +\n     \"Message-ID: <f470f68e0803061002n22bc4124he14015a4b6d6327f@mail.gmail.com>\\r\\n\" +\n     \"Date: Thu, 6 Mar 2008 18:02:03 +0000\\r\\n\" +\n@@ -488,7 +521,7 @@\n     public static final byte[] MULTIPART_WITH_BINARY_ATTACHMENTS_BYTES = US_ASCII.encode(MULTIPART_WITH_BINARY_ATTACHMENTS).array();\n     public static final byte[] ONE_PART_MIME_ASCII_COMMENT_IN_MIME_VERSION_BYTES = US_ASCII.encode(ONE_PART_MIME_ASCII_COMMENT_IN_MIME_VERSION).array();\n     public static final byte[] ONE_PART_MIME_ASCII_MIME_VERSION_SPANS_TWO_LINES_BYTES = US_ASCII.encode(ONE_PART_MIME_ASCII_MIME_VERSION_SPANS_TWO_LINES).array();\n-    \n+    public static final byte[] MAIL_WITH_RFC822_PART_BYTES = ascii(MAIL_WITH_RFC822_PART);\n \n     public static final byte[] ascii(String text) {\n         ",
                "deletions": 2
            },
            {
                "sha": "c3aef0e48ef5ad2a08c63fe4a1fac79ceb96b06c",
                "filename": "src/test/java/org/apache/james/mime4j/MimeTokenStreamTest.java",
                "blob_url": "https://github.com/apache/james-mime4j/blob/869168e66ca0fd16e5c7f894b2b3c5c00e7d7be0/src/test/java/org/apache/james/mime4j/MimeTokenStreamTest.java",
                "raw_url": "https://github.com/apache/james-mime4j/raw/869168e66ca0fd16e5c7f894b2b3c5c00e7d7be0/src/test/java/org/apache/james/mime4j/MimeTokenStreamTest.java",
                "status": "added",
                "changes": 78,
                "additions": 78,
                "contents_url": "https://api.github.com/repos/apache/james-mime4j/contents/src/test/java/org/apache/james/mime4j/MimeTokenStreamTest.java?ref=869168e66ca0fd16e5c7f894b2b3c5c00e7d7be0",
                "patch": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.james.mime4j;\n+\n+import java.io.ByteArrayInputStream;\n+\n+import junit.framework.TestCase;\n+\n+public class MimeTokenStreamTest extends TestCase {\n+\n+    MimeTokenStream stream;\n+    \n+    public void setUp() throws Exception {\n+        stream = new MimeTokenStream();\n+    }\n+    \n+    public void testSetRecursionModeBeforeParse() throws Exception {\n+        stream.setRecursionMode(RecursionMode.M_NO_RECURSE);\n+        stream.parse(new ByteArrayInputStream(ExampleMail.MAIL_WITH_RFC822_PART_BYTES));\n+        checkNextIs(EntityStates.T_START_HEADER);\n+        checkNextIs(EntityStates.T_FIELD);\n+        checkNextIs(EntityStates.T_FIELD);\n+        checkNextIs(EntityStates.T_FIELD);\n+        checkNextIs(EntityStates.T_FIELD);\n+        checkNextIs(EntityStates.T_FIELD);\n+        checkNextIs(EntityStates.T_FIELD);\n+        checkNextIs(EntityStates.T_END_HEADER);\n+        checkNextIs(EntityStates.T_START_MULTIPART);\n+        checkNextIs(EntityStates.T_PREAMBLE);\n+        checkNextIs(EntityStates.T_START_BODYPART);\n+        checkNextIs(EntityStates.T_START_HEADER);\n+        checkNextIs(EntityStates.T_END_HEADER);\n+        checkNextIs(EntityStates.T_BODY);\n+        checkNextIs(EntityStates.T_END_BODYPART);\n+        checkNextIs(EntityStates.T_START_BODYPART);\n+        checkNextIs(EntityStates.T_START_HEADER);\n+        checkNextIs(EntityStates.T_FIELD);\n+        checkNextIs(EntityStates.T_END_HEADER);\n+        checkNextIs(EntityStates.T_BODY);\n+        checkNextIs(EntityStates.T_END_BODYPART);\n+        checkNextIs(EntityStates.T_START_BODYPART);\n+        checkNextIs(EntityStates.T_START_HEADER);\n+        checkNextIs(EntityStates.T_FIELD);\n+        checkNextIs(EntityStates.T_END_HEADER);\n+        checkNextIs(EntityStates.T_BODY);\n+        checkNextIs(EntityStates.T_END_BODYPART);\n+        checkNextIs(EntityStates.T_START_BODYPART);\n+        checkNextIs(EntityStates.T_START_HEADER);\n+        checkNextIs(EntityStates.T_FIELD);\n+        checkNextIs(EntityStates.T_END_HEADER);\n+        checkNextIs(EntityStates.T_BODY);\n+        checkNextIs(EntityStates.T_END_BODYPART);\n+        checkNextIs(EntityStates.T_EPILOGUE);\n+        checkNextIs(EntityStates.T_END_MULTIPART);\n+        checkNextIs(EntityStates.T_END_MESSAGE);\n+        checkNextIs(EntityStates.T_END_OF_STREAM);\n+    }\n+    \n+    private void checkNextIs(int expected) throws Exception {\n+        assertEquals(MimeTokenStream.stateToString(expected), MimeTokenStream.stateToString(stream.next()));        \n+    }\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "james-mime4j",
        "message": "Confirmed and fixed MIME4J-36 NullPointerException in Header.writeTo with missing Content-Type https://issues.apache.org/jira/browse/MIME4J-36.\n\ngit-svn-id: https://svn.apache.org/repos/asf/james/mime4j/trunk@659982 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/james-mime4j/commit/998ef6d6cc7c9a93c42c30e8740ba569271b559a",
        "parent": "https://github.com/apache/james-mime4j/commit/40424f0625156e2055896517068298c17967baef",
        "bug_id": "james-mime4j_2",
        "file": [
            {
                "sha": "420f58ea5293e7c80efaf8bd9348ea22cdb28717",
                "filename": "src/test/java/org/apache/james/mime4j/message/MessageWriteToTest.java",
                "blob_url": "https://github.com/apache/james-mime4j/blob/998ef6d6cc7c9a93c42c30e8740ba569271b559a/src/test/java/org/apache/james/mime4j/message/MessageWriteToTest.java",
                "raw_url": "https://github.com/apache/james-mime4j/raw/998ef6d6cc7c9a93c42c30e8740ba569271b559a/src/test/java/org/apache/james/mime4j/message/MessageWriteToTest.java",
                "status": "added",
                "changes": 65,
                "additions": 65,
                "contents_url": "https://api.github.com/repos/apache/james-mime4j/contents/src/test/java/org/apache/james/mime4j/message/MessageWriteToTest.java?ref=998ef6d6cc7c9a93c42c30e8740ba569271b559a",
                "patch": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.james.mime4j.message;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+\n+import org.apache.james.mime4j.ExampleMail;\n+import org.apache.james.mime4j.util.MessageUtils;\n+\n+import junit.framework.TestCase;\n+\n+public class MessageWriteToTest extends TestCase {\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+    \n+    public void testSimpleMailStrictIgnore() throws Exception {\n+        Message message = createMessage(ExampleMail.RFC822_SIMPLE_BYTES);\n+        assertFalse(\"Not multipart\", message.isMultipart());\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        message.writeTo(out, MessageUtils.STRICT_IGNORE);\n+    }\n+    \n+    public void testSimpleMailStrictError() throws Exception {\n+        Message message = createMessage(ExampleMail.RFC822_SIMPLE_BYTES);\n+        assertFalse(\"Not multipart\", message.isMultipart());\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        message.writeTo(out, MessageUtils.STRICT_ERROR);\n+    }\n+    \n+    public void testSimpleMailLenient() throws Exception {\n+        Message message = createMessage(ExampleMail.RFC822_SIMPLE_BYTES);\n+        assertFalse(\"Not multipart\", message.isMultipart());\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        message.writeTo(out, MessageUtils.LENIENT);\n+    }\n+    \n+    private Message createMessage(byte[] octets) throws Exception {\n+        ByteArrayInputStream in = new ByteArrayInputStream(octets);\n+        Message message = new Message(in);\n+        return message;\n+    }\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "james-mime4j",
        "message": "Confirmed and fixed MIME4J-36 NullPointerException in Header.writeTo with missing Content-Type https://issues.apache.org/jira/browse/MIME4J-36.\n\ngit-svn-id: https://svn.apache.org/repos/asf/james/mime4j/trunk@659956 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/james-mime4j/commit/40424f0625156e2055896517068298c17967baef",
        "parent": "https://github.com/apache/james-mime4j/commit/c83ed25afc1c526e9d9ffc9f1931c898c240cdd2",
        "bug_id": "james-mime4j_3",
        "file": [
            {
                "sha": "cf2b9c2920128a5e6ffb61249083e1c4e2313e9f",
                "filename": "src/main/java/org/apache/james/mime4j/message/Header.java",
                "blob_url": "https://github.com/apache/james-mime4j/blob/40424f0625156e2055896517068298c17967baef/src/main/java/org/apache/james/mime4j/message/Header.java",
                "raw_url": "https://github.com/apache/james-mime4j/raw/40424f0625156e2055896517068298c17967baef/src/main/java/org/apache/james/mime4j/message/Header.java",
                "status": "modified",
                "changes": 13,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/james-mime4j/contents/src/main/java/org/apache/james/mime4j/message/Header.java?ref=40424f0625156e2055896517068298c17967baef",
                "patch": "@@ -167,11 +167,16 @@ public String toString() {\n     public void writeTo(final OutputStream out, int mode) throws IOException, MimeException {\r\n         Charset charset = null;\r\n         if (mode == MessageUtils.LENIENT) {\r\n-            ContentTypeField cf = ((ContentTypeField) getField(Field.CONTENT_TYPE));\r\n-            if (cf != null && cf.getCharset() != null) {\r\n-                charset = CharsetUtil.getCharset(cf.getCharset());\r\n+            final ContentTypeField contentTypeField = ((ContentTypeField) getField(Field.CONTENT_TYPE));\r\n+            if (contentTypeField == null) {\r\n+                charset = MessageUtils.DEFAULT_CHARSET;\r\n             } else {\r\n-                charset = MessageUtils.ISO_8859_1;\r\n+                final String contentTypeFieldCharset = contentTypeField.getCharset();\r\n+                if (contentTypeField != null && contentTypeFieldCharset != null) {\r\n+                    charset = CharsetUtil.getCharset(contentTypeFieldCharset);\r\n+                } else {\r\n+                    charset = MessageUtils.ISO_8859_1;\r\n+                }\r\n             }\r\n         } else {\r\n             charset = MessageUtils.DEFAULT_CHARSET;\r",
                "deletions": 4
            },
            {
                "sha": "a0ae60ae918e2e9a0a5aab8dce05b86c585835b8",
                "filename": "src/main/java/org/apache/james/mime4j/message/Message.java",
                "blob_url": "https://github.com/apache/james-mime4j/blob/40424f0625156e2055896517068298c17967baef/src/main/java/org/apache/james/mime4j/message/Message.java",
                "raw_url": "https://github.com/apache/james-mime4j/raw/40424f0625156e2055896517068298c17967baef/src/main/java/org/apache/james/mime4j/message/Message.java",
                "status": "modified",
                "changes": 19,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/james-mime4j/contents/src/main/java/org/apache/james/mime4j/message/Message.java?ref=40424f0625156e2055896517068298c17967baef",
                "patch": "@@ -32,6 +32,7 @@\n import org.apache.james.mime4j.decoder.QuotedPrintableInputStream;\r\n import org.apache.james.mime4j.field.Field;\r\n import org.apache.james.mime4j.field.UnstructuredField;\r\n+import org.apache.james.mime4j.util.MessageUtils;\r\n import org.apache.james.mime4j.util.MimeUtil;\r\n \r\n \r\n@@ -103,6 +104,24 @@ public void writeTo(OutputStream out) throws IOException {\n         }\r\n     }\r\n     \r\n+    /**\r\n+     * Writes out the content of this message..\r\n+     * @param out not null\r\n+     * @param mode header out validation mode {@link MessageUtils}\r\n+     * @throws MimeException \r\n+     * @see org.apache.james.mime4j.message.Entity#writeTo(java.io.OutputStream)\r\n+     */\r\n+    public void writeTo(OutputStream out, int mode) throws IOException, MimeException {\r\n+        getHeader().writeTo(out, mode);\r\n+\r\n+        Body body = getBody();\r\n+        if (body instanceof Multipart) {\r\n+            Multipart mp = (Multipart) body;\r\n+            mp.writeTo(out);\r\n+        } else {\r\n+            body.writeTo(out);\r\n+        }\r\n+    }\r\n     \r\n     private class MessageBuilder implements ContentHandler {\r\n         private Stack stack = new Stack();\r",
                "deletions": 0
            },
            {
                "sha": "63a5f890a3cd554e607bc1388d81985f07d4d42a",
                "filename": "src/test/java/org/apache/james/mime4j/message/MessageCompleteMailTest.java",
                "blob_url": "https://github.com/apache/james-mime4j/blob/40424f0625156e2055896517068298c17967baef/src/test/java/org/apache/james/mime4j/message/MessageCompleteMailTest.java",
                "raw_url": "https://github.com/apache/james-mime4j/raw/40424f0625156e2055896517068298c17967baef/src/test/java/org/apache/james/mime4j/message/MessageCompleteMailTest.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/james-mime4j/contents/src/test/java/org/apache/james/mime4j/message/MessageCompleteMailTest.java?ref=40424f0625156e2055896517068298c17967baef",
                "patch": "@@ -20,10 +20,10 @@\n \n import java.io.ByteArrayInputStream;\n \n-import org.apache.james.mime4j.ExampleMail;\n-\n import junit.framework.TestCase;\n \n+import org.apache.james.mime4j.ExampleMail;\n+\n public class MessageCompleteMailTest extends TestCase {\n \n     protected void setUp() throws Exception {\n@@ -47,7 +47,7 @@ public void testMultipartMixed() throws Exception {\n         Multipart part = (Multipart)message.getBody();\n         assertEquals(\"mixed\", part.getSubType());\n     }\n-    \n+\n     private Message createMessage(byte[] octets) throws Exception {\n         ByteArrayInputStream in = new ByteArrayInputStream(octets);\n         Message message = new Message(in);",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "james-mime4j",
        "message": "MIME4J-235: Content-Type fields containing RFC 2231 formatted boundary attribute cause NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/james/mime4j/trunk@1556608 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/james-mime4j/commit/d0d17ec02579e07e4ae7264f0afce507ec65d461",
        "parent": "https://github.com/apache/james-mime4j/commit/96700349bd451c706a7feec2250ece668e368979",
        "bug_id": "james-mime4j_4",
        "file": [
            {
                "sha": "2f0863a7fefa6b8e66eb95adc2b225bcd14e5583",
                "filename": "core/src/main/java/org/apache/james/mime4j/stream/FallbackBodyDescriptorBuilder.java",
                "blob_url": "https://github.com/apache/james-mime4j/blob/d0d17ec02579e07e4ae7264f0afce507ec65d461/core/src/main/java/org/apache/james/mime4j/stream/FallbackBodyDescriptorBuilder.java",
                "raw_url": "https://github.com/apache/james-mime4j/raw/d0d17ec02579e07e4ae7264f0afce507ec65d461/core/src/main/java/org/apache/james/mime4j/stream/FallbackBodyDescriptorBuilder.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/james-mime4j/contents/core/src/main/java/org/apache/james/mime4j/stream/FallbackBodyDescriptorBuilder.java?ref=d0d17ec02579e07e4ae7264f0afce507ec65d461",
                "patch": "@@ -184,9 +184,8 @@ private void parseContentType(Field field) throws MimeException {\n         }\n         String b = params.get(\"boundary\");\n \n-        if (main != null\n-                && ((main.startsWith(\"multipart/\") && b != null)\n-                        || !main.startsWith(\"multipart/\"))) {\n+        boolean multipart = main != null && main.startsWith(\"multipart/\");\n+        if (multipart && b != null || !multipart) {\n             mimeType = main;\n             mediaType = type;\n             subType = subtype;",
                "deletions": 3
            },
            {
                "sha": "08de6ebb63429f07562aa805969a30f0374ec394",
                "filename": "core/src/main/java/org/apache/james/mime4j/stream/MimeEntity.java",
                "blob_url": "https://github.com/apache/james-mime4j/blob/d0d17ec02579e07e4ae7264f0afce507ec65d461/core/src/main/java/org/apache/james/mime4j/stream/MimeEntity.java",
                "raw_url": "https://github.com/apache/james-mime4j/raw/d0d17ec02579e07e4ae7264f0afce507ec65d461/core/src/main/java/org/apache/james/mime4j/stream/MimeEntity.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/james-mime4j/contents/core/src/main/java/org/apache/james/mime4j/stream/MimeEntity.java?ref=d0d17ec02579e07e4ae7264f0afce507ec65d461",
                "patch": "@@ -362,6 +362,9 @@ public EntityStateMachine advance() throws IOException, MimeException {\n \n     private void createMimePartStream() throws MimeException, IOException {\n         String boundary = body.getBoundary();\n+        if (boundary == null) {\n+            throw new MimeException(\"Multipart body does not have a valid boundary\");\n+        }\n         try {\n             currentMimePartStream = new MimeBoundaryInputStream(inbuffer, boundary,\n                     config.isStrictParsing());",
                "deletions": 0
            },
            {
                "sha": "5aab29298773d24a14288a8a3862d94b501aca76",
                "filename": "core/src/test/java/org/apache/james/mime4j/stream/FallbackBodyDescriptorBuilderTest.java",
                "blob_url": "https://github.com/apache/james-mime4j/blob/d0d17ec02579e07e4ae7264f0afce507ec65d461/core/src/test/java/org/apache/james/mime4j/stream/FallbackBodyDescriptorBuilderTest.java",
                "raw_url": "https://github.com/apache/james-mime4j/raw/d0d17ec02579e07e4ae7264f0afce507ec65d461/core/src/test/java/org/apache/james/mime4j/stream/FallbackBodyDescriptorBuilderTest.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/james-mime4j/contents/core/src/test/java/org/apache/james/mime4j/stream/FallbackBodyDescriptorBuilderTest.java?ref=d0d17ec02579e07e4ae7264f0afce507ec65d461",
                "patch": "@@ -134,6 +134,13 @@ public void testParameters() throws Exception {\n \n     }\n \n+    public void testMultipartNoBoundary() throws Exception {\n+        BodyDescriptorBuilder builder = new FallbackBodyDescriptorBuilder();\n+        builder.addField(new RawField(\"Content-Type\", \"multipart/yada; \"));\n+        BodyDescriptor bd = builder.build();\n+        assertEquals(\"text/plain\", bd.getMimeType());\n+    }\n+\n     public void testGetContentLength() throws Exception {\n         BodyDescriptorBuilder builder = new FallbackBodyDescriptorBuilder();\n         BodyDescriptor bd = builder.build();",
                "deletions": 0
            },
            {
                "sha": "e3d5e7eaaad8e7fecb83dfd5771f98fb755e8de6",
                "filename": "dom/src/main/java/org/apache/james/mime4j/message/DefaultBodyDescriptorBuilder.java",
                "blob_url": "https://github.com/apache/james-mime4j/blob/d0d17ec02579e07e4ae7264f0afce507ec65d461/dom/src/main/java/org/apache/james/mime4j/message/DefaultBodyDescriptorBuilder.java",
                "raw_url": "https://github.com/apache/james-mime4j/raw/d0d17ec02579e07e4ae7264f0afce507ec65d461/dom/src/main/java/org/apache/james/mime4j/message/DefaultBodyDescriptorBuilder.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/james-mime4j/contents/dom/src/main/java/org/apache/james/mime4j/message/DefaultBodyDescriptorBuilder.java?ref=d0d17ec02579e07e4ae7264f0afce507ec65d461",
                "patch": "@@ -108,6 +108,13 @@ public BodyDescriptor build() {\n             actualSubType = contentTypeField.getSubType();\n             actualCharset = contentTypeField.getCharset();\n             actualBoundary = contentTypeField.getBoundary();\n+\n+            boolean multipart = actualMediaType != null && actualMediaType.equalsIgnoreCase(\"multipart\");\n+            if (multipart && actualBoundary == null) {\n+                actualMimeType = null;\n+                actualMediaType = null;\n+                actualSubType = null;\n+            }\n         }\n         if (actualMimeType == null) {\n             if (MimeUtil.isSameMimeType(\"multipart/digest\", parentMimeType)) {",
                "deletions": 0
            },
            {
                "sha": "76ffa7acdbc153e093d14c602ef8df13af3f90e3",
                "filename": "dom/src/test/java/org/apache/james/mime4j/message/MaximalBodyDescriptorTest.java",
                "blob_url": "https://github.com/apache/james-mime4j/blob/d0d17ec02579e07e4ae7264f0afce507ec65d461/dom/src/test/java/org/apache/james/mime4j/message/MaximalBodyDescriptorTest.java",
                "raw_url": "https://github.com/apache/james-mime4j/raw/d0d17ec02579e07e4ae7264f0afce507ec65d461/dom/src/test/java/org/apache/james/mime4j/message/MaximalBodyDescriptorTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/james-mime4j/contents/dom/src/test/java/org/apache/james/mime4j/message/MaximalBodyDescriptorTest.java?ref=d0d17ec02579e07e4ae7264f0afce507ec65d461",
                "patch": "@@ -176,6 +176,14 @@ public void testGetContentLength() throws Exception {\n         Assert.assertEquals(9901, bd.getContentLength());\n     }\n \n+    @Test\n+    public void testMultipartNoBoundary() throws Exception {\n+        BodyDescriptorBuilder builder = new DefaultBodyDescriptorBuilder();\n+        builder.addField(new RawField(\"Content-Type\", \"multipart/yada; \"));\n+        BodyDescriptor bd = builder.build();\n+        assertEquals(\"text/plain\", bd.getMimeType());\n+    }\n+\n     @Test\n     public void testDoDefaultToUsAsciiWhenUntyped() throws Exception {\n         BodyDescriptorBuilder builder = new DefaultBodyDescriptorBuilder();",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "james-mime4j",
        "message": "Made DEFAULT_PARSER static final to prevent NPE in certain conditions, should fix MIME4J-139.\n\ngit-svn-id: https://svn.apache.org/repos/asf/james/mime4j/trunk@836402 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/james-mime4j/commit/442ce56ca2e1a3fdfbaca6385d245bbe91912cd7",
        "parent": "https://github.com/apache/james-mime4j/commit/39e1f495d5b77d92a6dfd8bee12cff593a0948cb",
        "bug_id": "james-mime4j_5",
        "file": [
            {
                "sha": "c61a693ce8b1433c1fdb34057faa2e41df7e594a",
                "filename": "core/src/main/java/org/apache/james/mime4j/field/DelegatingFieldParser.java",
                "blob_url": "https://github.com/apache/james-mime4j/blob/442ce56ca2e1a3fdfbaca6385d245bbe91912cd7/core/src/main/java/org/apache/james/mime4j/field/DelegatingFieldParser.java",
                "raw_url": "https://github.com/apache/james-mime4j/raw/442ce56ca2e1a3fdfbaca6385d245bbe91912cd7/core/src/main/java/org/apache/james/mime4j/field/DelegatingFieldParser.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/james-mime4j/contents/core/src/main/java/org/apache/james/mime4j/field/DelegatingFieldParser.java?ref=442ce56ca2e1a3fdfbaca6385d245bbe91912cd7",
                "patch": "@@ -25,10 +25,10 @@\n import org.apache.james.mime4j.util.ByteSequence;\n \n public class DelegatingFieldParser implements FieldParser {\n-    \n+    private static final FieldParser DEFAULT_PARSER = UnstructuredField.PARSER;\n+\n     private Map<String, FieldParser> parsers = new HashMap<String, FieldParser>();\n-    private FieldParser defaultParser = UnstructuredField.PARSER;\n-    \n+\n     /**\n      * Sets the parser used for the field named <code>name</code>.\n      * @param name the name of the field\n@@ -40,8 +40,8 @@ public void setFieldParser(final String name, final FieldParser parser) {\n     \n     public FieldParser getParser(final String name) {\n         final FieldParser field = parsers.get(name.toLowerCase());\n-        if(field==null) {\n-            return defaultParser;\n+        if (field == null) {\n+            return DEFAULT_PARSER;\n         }\n         return field;\n     }",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "james-mime4j",
        "message": "Fixed NPE MIME4J-28. Fix suggested by Ron Lissack in https://issues.apache.org/jira/browse/MIME4J-28.\n\ngit-svn-id: https://svn.apache.org/repos/asf/james/mime4j/trunk@577431 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/james-mime4j/commit/939de012376e28634e1d301e581a1f72ab0b8008",
        "parent": "https://github.com/apache/james-mime4j/commit/d1f79405f63a72e47f4d06bf52b9e953e5049683",
        "bug_id": "james-mime4j_6",
        "file": [
            {
                "sha": "07c48f023b03a93527f88a210e5f5349f392c230",
                "filename": "src/main/java/org/apache/james/mime4j/message/Header.java",
                "blob_url": "https://github.com/apache/james-mime4j/blob/939de012376e28634e1d301e581a1f72ab0b8008/src/main/java/org/apache/james/mime4j/message/Header.java",
                "raw_url": "https://github.com/apache/james-mime4j/raw/939de012376e28634e1d301e581a1f72ab0b8008/src/main/java/org/apache/james/mime4j/message/Header.java",
                "status": "modified",
                "changes": 13,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/james-mime4j/contents/src/main/java/org/apache/james/mime4j/message/Header.java?ref=939de012376e28634e1d301e581a1f72ab0b8008",
                "patch": "@@ -125,9 +125,16 @@ public Field getField(String name) {\n      * @param name the field name (e.g. From, Subject).\r\n      * @return the list of fields.\r\n      */\r\n-    public List getFields(String name) {\r\n-        List l = (List) fieldMap.get(name.toLowerCase());\r\n-        return Collections.unmodifiableList(l);\r\n+    public List getFields(final String name) {\r\n+        final String lowerCaseName = name.toLowerCase();\r\n+        final List l = (List) fieldMap.get(lowerCaseName);\r\n+        final List results;\r\n+        if (l == null || l.isEmpty()) {\r\n+            results = Collections.EMPTY_LIST;\r\n+        } else {\r\n+            results = Collections.unmodifiableList(l);\r\n+        }\r\n+        return results;\r\n     }\r\n     \r\n     /**\r",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "james-mime4j",
        "message": "Fix possible NPE in MailboxList. When null was passed as parameter to constructor it was not correctly initialized. (found writing coverage unit tests).\n\ngit-svn-id: https://svn.apache.org/repos/asf/james/mime4j/trunk@533087 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/james-mime4j/commit/14052507d24ccd294eaeeac33bc2032408779593",
        "parent": "https://github.com/apache/james-mime4j/commit/9ecd1fd2deafab86eb6bb354679b9f15d2cd4c26",
        "bug_id": "james-mime4j_7",
        "file": [
            {
                "sha": "b25264da3e0c706c61949a4acc40d6e8e44eb164",
                "filename": "src/main/java/org/apache/james/mime4j/field/address/MailboxList.java",
                "blob_url": "https://github.com/apache/james-mime4j/blob/14052507d24ccd294eaeeac33bc2032408779593/src/main/java/org/apache/james/mime4j/field/address/MailboxList.java",
                "raw_url": "https://github.com/apache/james-mime4j/raw/14052507d24ccd294eaeeac33bc2032408779593/src/main/java/org/apache/james/mime4j/field/address/MailboxList.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/james-mime4j/contents/src/main/java/org/apache/james/mime4j/field/address/MailboxList.java?ref=14052507d24ccd294eaeeac33bc2032408779593",
                "patch": "@@ -38,7 +38,7 @@ public MailboxList(ArrayList mailboxes, boolean dontCopy) {\n \t\tif (mailboxes != null)\r\n \t\t\tthis.mailboxes = (dontCopy ? mailboxes : (ArrayList) mailboxes.clone());\r\n \t\telse\r\n-\t\t\tmailboxes = new ArrayList(0);\r\n+\t\t\tthis.mailboxes = new ArrayList(0);\r\n \t}\r\n \t\r\n \t/**\r",
                "deletions": 1
            }
        ]
    }
]