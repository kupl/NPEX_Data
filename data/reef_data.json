[
    {
        "repo": "reef",
        "message": "Merge pull request #24 from Microsoft-CISL/sergiym_close_channel_npe\n\nfix NullPointerException in NettyEventListener.closeChannel()",
        "commit": "https://github.com/apache/reef/commit/b3336bbdf1663d8d23397a86906875faac5648e3",
        "parent": "https://github.com/apache/reef/commit/7bf89971eef352db77f20e4703f06eec2ad1b777",
        "bug_id": "reef_1",
        "file": [
            {
                "sha": "e5ddf2f4390c43479e87254b84d8fce05c33c222",
                "filename": "wake/src/main/java/com/microsoft/wake/remote/transport/netty/AbstractNettyEventListener.java",
                "blob_url": "https://github.com/apache/reef/blob/b3336bbdf1663d8d23397a86906875faac5648e3/wake/src/main/java/com/microsoft/wake/remote/transport/netty/AbstractNettyEventListener.java",
                "raw_url": "https://github.com/apache/reef/raw/b3336bbdf1663d8d23397a86906875faac5648e3/wake/src/main/java/com/microsoft/wake/remote/transport/netty/AbstractNettyEventListener.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/reef/contents/wake/src/main/java/com/microsoft/wake/remote/transport/netty/AbstractNettyEventListener.java?ref=b3336bbdf1663d8d23397a86906875faac5648e3",
                "patch": "@@ -89,8 +89,9 @@ public void channelClosed(final ChannelStateEvent event) {\n   protected abstract void exceptionCleanup(final ExceptionEvent event);\n \n   protected void closeChannel(final Channel channel) {\n-    final LinkReference refRemoved = channel != null ?\n-        this.addrToLinkRefMap.remove(channel.getRemoteAddress()) : null;\n+    final LinkReference refRemoved =\n+        channel != null && channel.getRemoteAddress() != null ?\n+            this.addrToLinkRefMap.remove(channel.getRemoteAddress()) : null;\n     LOG.log(Level.FINER, \"Channel closed: {0}. Link ref found and removed: {1}\",\n         new Object[]{channel, refRemoved != null});\n   }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "reef",
        "message": "[REEF-781] Fix NPE on receiving filename query without arguments\n\nThis PR addresses the followings issues in HttpServerReefEventHandler:\n* Fix NullPointerException on `filename` query without arguments\n* Use typed list to avoid dynamic type-casting\n* Remove mixed use of both `getWriter()` and `getOutputStream()'\n\nJIRA:\n  [REEF-781](https://issues.apache.org/jira/browse/REEF-781)\n\nPull Request:\n  Closes #520",
        "commit": "https://github.com/apache/reef/commit/ce017df225ab618d654585d9c23b32aa3f0e265c",
        "parent": "https://github.com/apache/reef/commit/b9b8dca4aabed02554d631a33e8b1d3be4e04b61",
        "bug_id": "reef_2",
        "file": [
            {
                "sha": "dfa3362a3a22c297ef2e1814a99996ba7deea1d8",
                "filename": "lang/java/reef-webserver/src/main/java/org/apache/reef/webserver/HttpServerReefEventHandler.java",
                "blob_url": "https://github.com/apache/reef/blob/ce017df225ab618d654585d9c23b32aa3f0e265c/lang/java/reef-webserver/src/main/java/org/apache/reef/webserver/HttpServerReefEventHandler.java",
                "raw_url": "https://github.com/apache/reef/raw/ce017df225ab618d654585d9c23b32aa3f0e265c/lang/java/reef-webserver/src/main/java/org/apache/reef/webserver/HttpServerReefEventHandler.java",
                "status": "modified",
                "changes": 39,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/reef/contents/lang/java/reef-webserver/src/main/java/org/apache/reef/webserver/HttpServerReefEventHandler.java?ref=ce017df225ab618d654585d9c23b32aa3f0e265c",
                "patch": "@@ -29,6 +29,7 @@\n import org.apache.reef.util.logging.LoggingScopeFactory;\n import org.apache.reef.util.logging.LoggingScopeImpl;\n import org.apache.reef.wake.EventHandler;\n+\n import javax.inject.Inject;\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletResponse;\n@@ -38,6 +39,7 @@\n import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.Paths;\n+import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n@@ -169,20 +171,22 @@ public void onHttpRequest(\n       writeLines(response, result, \"Current Stages...\");\n       break;\n     case \"logfile\":\n-      final List names = parsedHttpRequest.getQueryMap().get(\"filename\");\n+      final List<String> names = parsedHttpRequest.getQueryMap().get(\"filename\");\n+      final PrintWriter writer = response.getWriter();\n       if (names == null || names.size() == 0) {\n-        response.getWriter().println(String.format(\"File name is not provided\"));\n-      }\n-\n-      final String fileName = (String)names.get(0);\n-      if (!fileName.equals(driverStdoutFile) && !fileName.equals(driverStderrFile)) {\n-        response.getWriter().println(String.format(\"Unsupported file names: [%s] \", fileName));\n-      }\n-      try {\n-        final byte[] outputBody = readFile((String) names.get(0)).getBytes(StandardCharsets.UTF_8);\n-        response.getOutputStream().write(outputBody);\n-      } catch(final IOException e) {\n-        response.getWriter().println(String.format(\"Cannot find the log file: [%s].\", fileName));\n+        writer.println(\"File name is not provided\");\n+      } else {\n+        final String fileName = names.get(0);\n+        if (!fileName.equals(driverStdoutFile) && !fileName.equals(driverStderrFile)) {\n+          writer.println(String.format(\"Unsupported file names: [%s] \", fileName));\n+        } else {\n+          try {\n+            final byte[] outputBody = readFile(fileName).getBytes(StandardCharsets.UTF_8);\n+            writer.print(Arrays.toString(outputBody));\n+          } catch (final IOException e) {\n+            writer.println(String.format(\"Cannot find the log file: [%s].\", fileName));\n+          }\n+        }\n       }\n       break;\n     // TODO[JIRA REEF-798] Use this provider in the HTTP\n@@ -280,7 +284,7 @@ private void writeEvaluatorInfoWebOutput(\n    * Get all evaluator ids and send it back to response as JSON.\n    */\n   private void writeEvaluatorsJsonOutput(final HttpServletResponse response) throws IOException {\n-    LOG.log(Level.INFO, \"HttpServerReefEventHandler getEvaluators is called\");\n+    LOG.log(Level.INFO, \"HttpServerReefEventHandler writeEvaluatorsJsonOutput is called\");\n     try {\n       final EvaluatorListSerializer serializer =\n           Tang.Factory.getTang().newInjector().getInstance(EvaluatorListSerializer.class);\n@@ -302,7 +306,7 @@ private void writeEvaluatorsJsonOutput(final HttpServletResponse response) throw\n    */\n   private void writeEvaluatorsWebOutput(final HttpServletResponse response) throws IOException {\n \n-    LOG.log(Level.INFO, \"HttpServerReefEventHandler getEvaluators is called\");\n+    LOG.log(Level.INFO, \"HttpServerReefEventHandler writeEvaluatorsWebOutput is called\");\n \n     final PrintWriter writer = response.getWriter();\n \n@@ -329,6 +333,9 @@ private void writeEvaluatorsWebOutput(final HttpServletResponse response) throws\n    * Write Driver Info as JSON string to Response.\n    */\n   private void writeDriverJsonInformation(final HttpServletResponse response) throws IOException {\n+\n+    LOG.log(Level.INFO, \"HttpServerReefEventHandler writeDriverJsonInformation invoked.\");\n+\n     try {\n       final DriverInfoSerializer serializer =\n           Tang.Factory.getTang().newInjector().getInstance(DriverInfoSerializer.class);\n@@ -355,7 +362,7 @@ private void writeResponse(final HttpServletResponse response, final String data\n    */\n   private void writeDriverWebInformation(final HttpServletResponse response) throws IOException {\n \n-    LOG.log(Level.INFO, \"HttpServerReefEventHandler writeDriverInformation invoked.\");\n+    LOG.log(Level.INFO, \"HttpServerReefEventHandler writeDriverWebInformation invoked.\");\n \n     final PrintWriter writer = response.getWriter();\n ",
                "deletions": 16
            }
        ]
    },
    {
        "repo": "reef",
        "message": "fix NullPointerException in NettyEventListener.closeChannel()",
        "commit": "https://github.com/apache/reef/commit/7043b8f35ff2be7339d562f48dbea809a1695384",
        "parent": "https://github.com/apache/reef/commit/7bf89971eef352db77f20e4703f06eec2ad1b777",
        "bug_id": "reef_3",
        "file": [
            {
                "sha": "e5ddf2f4390c43479e87254b84d8fce05c33c222",
                "filename": "wake/src/main/java/com/microsoft/wake/remote/transport/netty/AbstractNettyEventListener.java",
                "blob_url": "https://github.com/apache/reef/blob/7043b8f35ff2be7339d562f48dbea809a1695384/wake/src/main/java/com/microsoft/wake/remote/transport/netty/AbstractNettyEventListener.java",
                "raw_url": "https://github.com/apache/reef/raw/7043b8f35ff2be7339d562f48dbea809a1695384/wake/src/main/java/com/microsoft/wake/remote/transport/netty/AbstractNettyEventListener.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/reef/contents/wake/src/main/java/com/microsoft/wake/remote/transport/netty/AbstractNettyEventListener.java?ref=7043b8f35ff2be7339d562f48dbea809a1695384",
                "patch": "@@ -89,8 +89,9 @@ public void channelClosed(final ChannelStateEvent event) {\n   protected abstract void exceptionCleanup(final ExceptionEvent event);\n \n   protected void closeChannel(final Channel channel) {\n-    final LinkReference refRemoved = channel != null ?\n-        this.addrToLinkRefMap.remove(channel.getRemoteAddress()) : null;\n+    final LinkReference refRemoved =\n+        channel != null && channel.getRemoteAddress() != null ?\n+            this.addrToLinkRefMap.remove(channel.getRemoteAddress()) : null;\n     LOG.log(Level.FINER, \"Channel closed: {0}. Link ref found and removed: {1}\",\n         new Object[]{channel, refRemoved != null});\n   }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "reef",
        "message": "[REEF-293] reef-tests NullPointerException on Mesos\n\nThis PR adds virtual cores to avoid the NullPointerException.\n\nJIRA:\n  [REEF-293](https://issues.apache.org/jira/browse/REEF-293)\n\nPull Request:\n  Closes #167",
        "commit": "https://github.com/apache/reef/commit/19fdfcc65f4dc1c86e0a3f20928a93f38380e67e",
        "parent": "https://github.com/apache/reef/commit/2d37964c47dd46f99c431e0f57d62a21e06355e5",
        "bug_id": "reef_4",
        "file": [
            {
                "sha": "1b94182b28649ebb4f86bdfce7b20603f888e01e",
                "filename": "lang/java/reef-runtime-mesos/src/main/java/org/apache/reef/runtime/mesos/driver/REEFScheduler.java",
                "blob_url": "https://github.com/apache/reef/blob/19fdfcc65f4dc1c86e0a3f20928a93f38380e67e/lang/java/reef-runtime-mesos/src/main/java/org/apache/reef/runtime/mesos/driver/REEFScheduler.java",
                "raw_url": "https://github.com/apache/reef/raw/19fdfcc65f4dc1c86e0a3f20928a93f38380e67e/lang/java/reef-runtime-mesos/src/main/java/org/apache/reef/runtime/mesos/driver/REEFScheduler.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/reef/contents/lang/java/reef-runtime-mesos/src/main/java/org/apache/reef/runtime/mesos/driver/REEFScheduler.java?ref=19fdfcc65f4dc1c86e0a3f20928a93f38380e67e",
                "patch": "@@ -384,6 +384,7 @@ private void handleNewExecutor(final Protos.TaskStatus taskStatus) {\n         .setIdentifier(taskStatus.getTaskId().getValue())\n         .setNodeId(taskStatus.getSlaveId().getValue())\n         .setResourceMemory(resourceRequestProto.getMemorySize().get())\n+        .setVirtualCores(resourceRequestProto.getVirtualCores().get())\n         .build();\n     reefEventHandlers.onResourceAllocation(alloc);\n ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "reef",
        "message": "[REEF-588] DeadlockInfo throws NullPointerException when deadlock is not detected\n\nThis patch:\n\n  * Adds a DeadlockInfoTestWithDeadlockAbsent to reproduce the NPE and test the normal behavior when a deadlock does not exist\n  * Renames the DeadlockInfoTest to DeadlockInfoTestWithDeadlockPresent to avoid confusion\n  * Adds a check to the DeadLockInfo constructor to test if the result of findDeadlockedThreads() is null\n  * Makes DeadlockInfo return an empty ThreadInfo array if no deadlocks are found\n  * Makes ThreadLogger log \"none\" if no deadlocks are found\n\nJIRA:\n  [REEF-588](https://issues.apache.org/jira/browse/REEF-588)\n\nPull Request:\n  Closes #564",
        "commit": "https://github.com/apache/reef/commit/ed66b6e991df55036a97f02ff52ed13cc71f4565",
        "parent": "https://github.com/apache/reef/commit/a9fc25862e8b36039adc1a9d2f27108beaeedfd3",
        "bug_id": "reef_5",
        "file": [
            {
                "sha": "a5f49a84cc55f477bdee5dea9d8ef307d6e03101",
                "filename": "lang/java/reef-common/src/main/java/org/apache/reef/util/DeadlockInfo.java",
                "blob_url": "https://github.com/apache/reef/blob/ed66b6e991df55036a97f02ff52ed13cc71f4565/lang/java/reef-common/src/main/java/org/apache/reef/util/DeadlockInfo.java",
                "raw_url": "https://github.com/apache/reef/raw/ed66b6e991df55036a97f02ff52ed13cc71f4565/lang/java/reef-common/src/main/java/org/apache/reef/util/DeadlockInfo.java",
                "status": "modified",
                "changes": 11,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/reef/contents/lang/java/reef-common/src/main/java/org/apache/reef/util/DeadlockInfo.java?ref=ed66b6e991df55036a97f02ff52ed13cc71f4565",
                "patch": "@@ -36,19 +36,26 @@\n final class DeadlockInfo {\n   private final ThreadMXBean mxBean;\n   private final ThreadInfo[] deadlockedThreads;\n+  private final long[] deadlockedThreadsIDs;\n+  private static final ThreadInfo[] EMPTY_ARRAY = new ThreadInfo[0];\n   private final Map<ThreadInfo, Map<StackTraceElement, List<MonitorInfo>>> monitorLockedElements;\n \n   public DeadlockInfo() {\n     mxBean = ManagementFactory.getThreadMXBean();\n-    deadlockedThreads = mxBean.getThreadInfo(mxBean.findDeadlockedThreads(), true, true);\n+    deadlockedThreadsIDs = mxBean.findDeadlockedThreads();\n+\n+    deadlockedThreads = (null == deadlockedThreadsIDs)\n+                        ? EMPTY_ARRAY\n+                        : mxBean.getThreadInfo(deadlockedThreadsIDs, true, true);\n+\n     monitorLockedElements = new HashMap<>();\n     for (final ThreadInfo threadInfo : deadlockedThreads) {\n       monitorLockedElements.put(threadInfo, constructMonitorLockedElements(threadInfo));\n     }\n   }\n \n   /**\n-   * @return An array of deadlocked threads\n+   * @return A (potentially empty) array of deadlocked threads\n    */\n   public ThreadInfo[] getDeadlockedThreads() {\n     return deadlockedThreads;",
                "deletions": 2
            },
            {
                "sha": "104b4686fce437d2a38f3f07fa20411d689aa44c",
                "filename": "lang/java/reef-common/src/main/java/org/apache/reef/util/ThreadLogger.java",
                "blob_url": "https://github.com/apache/reef/blob/ed66b6e991df55036a97f02ff52ed13cc71f4565/lang/java/reef-common/src/main/java/org/apache/reef/util/ThreadLogger.java",
                "raw_url": "https://github.com/apache/reef/raw/ed66b6e991df55036a97f02ff52ed13cc71f4565/lang/java/reef-common/src/main/java/org/apache/reef/util/ThreadLogger.java",
                "status": "modified",
                "changes": 10,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/reef/contents/lang/java/reef-common/src/main/java/org/apache/reef/util/ThreadLogger.java?ref=ed66b6e991df55036a97f02ff52ed13cc71f4565",
                "patch": "@@ -98,7 +98,15 @@ public static String getFormattedDeadlockInfo(\n     final StringBuilder message = new StringBuilder(prefix);\n \n     final DeadlockInfo deadlockInfo = new DeadlockInfo();\n-    for (final ThreadInfo threadInfo : deadlockInfo.getDeadlockedThreads()) {\n+\n+    final ThreadInfo[] deadlockedThreads = deadlockInfo.getDeadlockedThreads();\n+\n+    if (0 == deadlockedThreads.length) {\n+      message.append(\" none \");\n+      return message.toString();\n+    }\n+\n+    for (final ThreadInfo threadInfo : deadlockedThreads) {\n       message.append(threadPrefix).append(\"Thread '\").append(threadInfo.getThreadName())\n           .append(\"' with state \").append(threadInfo.getThreadState());\n ",
                "deletions": 1
            },
            {
                "sha": "307f38c752a5f7a75b0cde13f2ec6576c249d22f",
                "filename": "lang/java/reef-common/src/test/java/org/apache/reef/util/DeadlockInfoWithDeadlockAbsentTest.java",
                "blob_url": "https://github.com/apache/reef/blob/ed66b6e991df55036a97f02ff52ed13cc71f4565/lang/java/reef-common/src/test/java/org/apache/reef/util/DeadlockInfoWithDeadlockAbsentTest.java",
                "raw_url": "https://github.com/apache/reef/raw/ed66b6e991df55036a97f02ff52ed13cc71f4565/lang/java/reef-common/src/test/java/org/apache/reef/util/DeadlockInfoWithDeadlockAbsentTest.java",
                "status": "added",
                "changes": 143,
                "additions": 143,
                "contents_url": "https://api.github.com/repos/apache/reef/contents/lang/java/reef-common/src/test/java/org/apache/reef/util/DeadlockInfoWithDeadlockAbsentTest.java?ref=ed66b6e991df55036a97f02ff52ed13cc71f4565",
                "patch": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.reef.util;\n+\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Test DeadlockInfo by requesting information about\n+ * non-deadlocked threads.\n+ *\n+ * Reproduces REEF-588.\n+ */\n+public class DeadlockInfoWithDeadlockAbsentTest {\n+\n+  private static final Logger LOG = Logger.getLogger(DeadlockInfoWithDeadlockAbsentTest.class.getName());\n+\n+  private static final long TIMEOUT_MILLIS = 100;\n+\n+  private static final CountDownLatch FIRST_LATCH = new CountDownLatch(1);\n+  private static final CountDownLatch SECOND_LATCH = new CountDownLatch(1);\n+\n+  /**\n+    * Create a situation where a deadlock is possible but not present.\n+    *\n+    * Sleep for TIMEOUT_MILLIS to allow this situation to set up.\n+   *\n+  */\n+  @BeforeClass\n+  public static void setUp() {\n+    startNonDeadlockedThreads();\n+    threadSleep(TIMEOUT_MILLIS);\n+  }\n+\n+  /**\n+   * Test the normal DeadlockInfo behaviour in the\n+   * absence of deadlocks.\n+   *\n+   * DeadlockInfo instantiation reproduces the REEF-588\n+   * because the NPE was thrown in the DeadlockInfo constructor.\n+   */\n+  @Test\n+  public void testDeadlockInfoWithDeadlockAbsent()\n+          throws NullPointerException {\n+\n+    final DeadlockInfo deadlockInfo = new DeadlockInfo();\n+    LOG.log(Level.INFO, ThreadLogger.getFormattedDeadlockInfo(\n+              \"DeadlockInfo test, none deadlocks expected. Deadlocks found: \"));\n+    Assert.assertEquals(\"DeadlockInfo found deadlocks when none should exist.\", 0,\n+              deadlockInfo.getDeadlockedThreads().length);\n+\n+  }\n+\n+  /**\n+   * Test logging in the absence of deadlocks.\n+   */\n+  @Test\n+  public void testLogDeadlockInfo() throws NullPointerException {\n+    LOG.log(Level.INFO, ThreadLogger.getFormattedDeadlockInfo(\n+            \"DeadlockInfo test, none deadlocks expected. Deadlocks found: \"));\n+  }\n+\n+  /**\n+   * Create a situation where a deadlock is possible but not present.\n+   *\n+   * Assume there are two resources guarded by latches.\n+   * The deadlock is possible if multiple threads attempt to acquire both latches.\n+   *\n+   * Spawn two threads so that each thread acquires only one latch.\n+   * By design circular wait between the threads can't occur, so the deadlock can't exist.\n+   *\n+   * The threads wait on their latches until the DeadlockInfo tests finish.\n+   * Then the tearDown() wakes up the threads to avoid liveness issues.\n+   */\n+  private static void startNonDeadlockedThreads() {\n+\n+    final Thread thread1 = new Thread(){\n+        @Override\n+        public void run(){\n+            awaitOnLatch(FIRST_LATCH);\n+        }\n+    };\n+\n+    final Thread thread2 = new Thread(){\n+        @Override\n+        public void run(){\n+            awaitOnLatch(SECOND_LATCH);\n+        }\n+    };\n+\n+    thread1.start();\n+    thread2.start();\n+  }\n+\n+  /**\n+   * Allow both threads to finish.\n+   */\n+  @AfterClass\n+  public static void tearDown() {\n+    FIRST_LATCH.countDown();\n+    SECOND_LATCH.countDown();\n+  }\n+\n+  private static void awaitOnLatch(final CountDownLatch latch) {\n+    try {\n+      latch.await();\n+    } catch (final InterruptedException e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  private static void threadSleep(final long millis) {\n+    try {\n+      Thread.sleep(millis);\n+    } catch (final InterruptedException e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "c211ff39611d77d51f71bf7054687e8f6f914fb5",
                "filename": "lang/java/reef-common/src/test/java/org/apache/reef/util/DeadlockInfoWithDeadlockPresentTest.java",
                "blob_url": "https://github.com/apache/reef/blob/ed66b6e991df55036a97f02ff52ed13cc71f4565/lang/java/reef-common/src/test/java/org/apache/reef/util/DeadlockInfoWithDeadlockPresentTest.java",
                "raw_url": "https://github.com/apache/reef/raw/ed66b6e991df55036a97f02ff52ed13cc71f4565/lang/java/reef-common/src/test/java/org/apache/reef/util/DeadlockInfoWithDeadlockPresentTest.java",
                "status": "renamed",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/reef/contents/lang/java/reef-common/src/test/java/org/apache/reef/util/DeadlockInfoWithDeadlockPresentTest.java?ref=ed66b6e991df55036a97f02ff52ed13cc71f4565",
                "patch": "@@ -42,9 +42,9 @@\n /**\n  * Test DeadlockInfo by creating a deadlock.\n  */\n-public final class DeadlockInfoTest {\n \n-  private static final Logger LOG = Logger.getLogger(DeadlockInfoTest.class.getName());\n+public final class DeadlockInfoWithDeadlockPresentTest {\n+  private static final Logger LOG = Logger.getLogger(DeadlockInfoWithDeadlockPresentTest.class.getName());\n \n   private static final long TIMEOUT_MILLIS = 100;\n ",
                "deletions": 2,
                "previous_filename": "lang/java/reef-common/src/test/java/org/apache/reef/util/DeadlockInfoTest.java"
            }
        ]
    },
    {
        "repo": "reef",
        "message": "[REEF-1879] Downgrade netty dependency to 4.0.23.Final\n\nThis addressed the issue by\n  * downgrading REEF to use Netty 4.0.23.Final for Hadoop compatibility\n  * updating NameLookupClient to throw NamingException on replyQueue.poll timeout instead of NullPointerException\n\nJIRA:\n  [REEF-1879](https://issues.apache.org/jira/browse/REEF-1879)\n\nPull request:\n  This closes #1373",
        "commit": "https://github.com/apache/reef/commit/e0634a48d501c7cde124e90cc0e54573fdbfa89a",
        "parent": "https://github.com/apache/reef/commit/b8cecb612feaa96a86c031df0b6f6f7306f215b2",
        "bug_id": "reef_6",
        "file": [
            {
                "sha": "0e10680c0b002d0ef8828477208b5038a442721c",
                "filename": "lang/java/reef-common/src/main/java/org/apache/reef/runtime/common/driver/evaluator/EvaluatorManagerFactory.java",
                "blob_url": "https://github.com/apache/reef/blob/e0634a48d501c7cde124e90cc0e54573fdbfa89a/lang/java/reef-common/src/main/java/org/apache/reef/runtime/common/driver/evaluator/EvaluatorManagerFactory.java",
                "raw_url": "https://github.com/apache/reef/raw/e0634a48d501c7cde124e90cc0e54573fdbfa89a/lang/java/reef-common/src/main/java/org/apache/reef/runtime/common/driver/evaluator/EvaluatorManagerFactory.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/reef/contents/lang/java/reef-common/src/main/java/org/apache/reef/runtime/common/driver/evaluator/EvaluatorManagerFactory.java?ref=e0634a48d501c7cde124e90cc0e54573fdbfa89a",
                "patch": "@@ -61,7 +61,7 @@ private EvaluatorManager getNewEvaluatorManagerInstanceForResource(\n \n     if (nodeDescriptor == null) {\n       final String nodeId = resourceEvent.getNodeId();\n-      LOG.log(Level.WARNING, \"Node {} is not in our catalog, adding it\", nodeId);\n+      LOG.log(Level.WARNING, \"Node {0} is not in our catalog, adding it\", nodeId);\n       final String[] hostNameAndPort = nodeId.split(\":\");\n       Validate.isTrue(hostNameAndPort.length == 2);\n       final NodeDescriptorEvent nodeDescriptorEvent = NodeDescriptorEventImpl.newBuilder().setIdentifier(nodeId)",
                "deletions": 1
            },
            {
                "sha": "d5bf71a3d972ab7cc96d6c092e3a09b18e476fbe",
                "filename": "lang/java/reef-io/src/main/java/org/apache/reef/io/network/naming/NameLookupClient.java",
                "blob_url": "https://github.com/apache/reef/blob/e0634a48d501c7cde124e90cc0e54573fdbfa89a/lang/java/reef-io/src/main/java/org/apache/reef/io/network/naming/NameLookupClient.java",
                "raw_url": "https://github.com/apache/reef/raw/e0634a48d501c7cde124e90cc0e54573fdbfa89a/lang/java/reef-io/src/main/java/org/apache/reef/io/network/naming/NameLookupClient.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/reef/contents/lang/java/reef-io/src/main/java/org/apache/reef/io/network/naming/NameLookupClient.java?ref=e0634a48d501c7cde124e90cc0e54573fdbfa89a",
                "patch": "@@ -49,6 +49,7 @@\n import java.net.InetSocketAddress;\n import java.net.SocketAddress;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n import java.util.concurrent.BlockingQueue;\n import java.util.concurrent.Callable;\n@@ -206,7 +207,8 @@ public InetSocketAddress remoteLookup(final Identifier id) throws Exception {\n         }\n       }\n \n-      final List<NameAssignment> list = resp.getNameAssignments();\n+      final List<NameAssignment> list = resp == null ? Collections.<NameAssignment>emptyList()\n+          : resp.getNameAssignments();\n       if (list.isEmpty()) {\n         throw new NamingException(\"Cannot find \" + id + \" from the name server\");\n       } else {",
                "deletions": 1
            },
            {
                "sha": "bee3374616ab18afb91371f93db6b2f3321a9c5a",
                "filename": "lang/java/reef-wake/wake/src/main/java/org/apache/reef/wake/remote/transport/netty/ChunkedReadWriteHandler.java",
                "blob_url": "https://github.com/apache/reef/blob/e0634a48d501c7cde124e90cc0e54573fdbfa89a/lang/java/reef-wake/wake/src/main/java/org/apache/reef/wake/remote/transport/netty/ChunkedReadWriteHandler.java",
                "raw_url": "https://github.com/apache/reef/raw/e0634a48d501c7cde124e90cc0e54573fdbfa89a/lang/java/reef-wake/wake/src/main/java/org/apache/reef/wake/remote/transport/netty/ChunkedReadWriteHandler.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/reef/contents/lang/java/reef-wake/wake/src/main/java/org/apache/reef/wake/remote/transport/netty/ChunkedReadWriteHandler.java?ref=e0634a48d501c7cde124e90cc0e54573fdbfa89a",
                "patch": "@@ -147,9 +147,9 @@ public void write(final ChannelHandlerContext ctx, final Object msg, final Chann\n    */\n   private byte[] sizeAsByteArr(final int size) {\n     final byte[] ret = new byte[INT_SIZE];\n-    final ByteBuf intBuffer = Unpooled.wrappedBuffer(ret);\n+    final ByteBuf intBuffer = Unpooled.wrappedBuffer(ret).order(Unpooled.LITTLE_ENDIAN);\n     intBuffer.clear();\n-    intBuffer.writeIntLE(size);\n+    intBuffer.writeInt(size);\n     intBuffer.release();\n     return ret;\n   }\n@@ -170,8 +170,8 @@ private int getSize(final byte[] data, final int offset) {\n       return 0;\n     }\n \n-    final ByteBuf intBuffer = Unpooled.wrappedBuffer(data, offset, INT_SIZE);\n-    final int ret = intBuffer.readIntLE();\n+    final ByteBuf intBuffer = Unpooled.wrappedBuffer(data, offset, INT_SIZE).order(Unpooled.LITTLE_ENDIAN);\n+    final int ret = intBuffer.readInt();\n     intBuffer.release();\n \n     return ret;",
                "deletions": 4
            },
            {
                "sha": "2643030116f62d076d3f050d0494d92ed207dcb8",
                "filename": "lang/java/reef-wake/wake/src/main/java/org/apache/reef/wake/remote/transport/netty/NettyMessagingTransport.java",
                "blob_url": "https://github.com/apache/reef/blob/e0634a48d501c7cde124e90cc0e54573fdbfa89a/lang/java/reef-wake/wake/src/main/java/org/apache/reef/wake/remote/transport/netty/NettyMessagingTransport.java",
                "raw_url": "https://github.com/apache/reef/raw/e0634a48d501c7cde124e90cc0e54573fdbfa89a/lang/java/reef-wake/wake/src/main/java/org/apache/reef/wake/remote/transport/netty/NettyMessagingTransport.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/reef/contents/lang/java/reef-wake/wake/src/main/java/org/apache/reef/wake/remote/transport/netty/NettyMessagingTransport.java?ref=e0634a48d501c7cde124e90cc0e54573fdbfa89a",
                "patch": "@@ -320,7 +320,7 @@ public void close() {\n         }\n         break;\n       } catch (final Exception e) {\n-        if (e.getClass().getSimpleName().compareTo(\"AnnotatedConnectException\") == 0) {\n+        if (e.getClass().getSimpleName().compareTo(\"ConnectException\") == 0) {\n           LOG.log(Level.WARNING, \"Connection refused. Retry {0} of {1}\",\n               new Object[]{i + 1, this.numberOfTries});\n           synchronized (flag) {",
                "deletions": 1
            },
            {
                "sha": "6633316a6f32eea3830763c74b06a0353f768395",
                "filename": "pom.xml",
                "blob_url": "https://github.com/apache/reef/blob/e0634a48d501c7cde124e90cc0e54573fdbfa89a/pom.xml",
                "raw_url": "https://github.com/apache/reef/raw/e0634a48d501c7cde124e90cc0e54573fdbfa89a/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/reef/contents/pom.xml?ref=e0634a48d501c7cde124e90cc0e54573fdbfa89a",
                "patch": "@@ -703,7 +703,7 @@ under the License.\n             <dependency>\n                 <groupId>io.netty</groupId>\n                 <artifactId>netty-all</artifactId>\n-                <version>4.1.15.Final</version>\n+                <version>4.0.23.Final</version>\n             </dependency>\n \n             <dependency>",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "reef",
        "message": "Fix NPE",
        "commit": "https://github.com/apache/reef/commit/480af24f0ab2a330bb4548930609bd43befeb533",
        "parent": "https://github.com/apache/reef/commit/9f254cfb85cce20a338663fc23b679cd249ccd71",
        "bug_id": "reef_7",
        "file": [
            {
                "sha": "de33d207f2a1f3253c226cad03c2fb6c84f9f4db",
                "filename": "tang/src/main/java/com/microsoft/tang/implementation/AbstractNode.java",
                "blob_url": "https://github.com/apache/reef/blob/480af24f0ab2a330bb4548930609bd43befeb533/tang/src/main/java/com/microsoft/tang/implementation/AbstractNode.java",
                "raw_url": "https://github.com/apache/reef/raw/480af24f0ab2a330bb4548930609bd43befeb533/tang/src/main/java/com/microsoft/tang/implementation/AbstractNode.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/reef/contents/tang/src/main/java/com/microsoft/tang/implementation/AbstractNode.java?ref=480af24f0ab2a330bb4548930609bd43befeb533",
                "patch": "@@ -24,6 +24,8 @@ public boolean equals(Object o) {\n       parentsEqual = true;\n     } else if (n.parent == null) {\n       parentsEqual = false;\n+    } else if (this.parent == null) {\n+      parentsEqual = false;\n     } else {\n       parentsEqual = n.parent.equals(this.parent);\n     }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "reef",
        "message": "[REEF-539] Ignore unknown tasks in CommunicationGroupDriverImpl.failTask()\n\n`CommunicationGroupDriverImpl.failTask()` now ignores tasks that aren't\npart of the communication group. This resolves an issue where a\n`NullPointerException` is thrown when the wrong communication group\ntries to handle a task.\n\nJIRA:\n  [REEF-539](https://issues.apache.org/jira/browse/REEF-539)\n\nPull Request:\n  This closes #322",
        "commit": "https://github.com/apache/reef/commit/9ebba41b2043e5c88405970988918f9e16f45640",
        "parent": "https://github.com/apache/reef/commit/c9e1bf9b3d73d04e34e76236a6818477ed4f74e6",
        "bug_id": "reef_8",
        "file": [
            {
                "sha": "ffc0f209de67aae09df953208ac5027272619e82",
                "filename": "lang/java/reef-io/src/main/java/org/apache/reef/io/network/group/impl/driver/CommunicationGroupDriverImpl.java",
                "blob_url": "https://github.com/apache/reef/blob/9ebba41b2043e5c88405970988918f9e16f45640/lang/java/reef-io/src/main/java/org/apache/reef/io/network/group/impl/driver/CommunicationGroupDriverImpl.java",
                "raw_url": "https://github.com/apache/reef/raw/9ebba41b2043e5c88405970988918f9e16f45640/lang/java/reef-io/src/main/java/org/apache/reef/io/network/group/impl/driver/CommunicationGroupDriverImpl.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/reef/contents/lang/java/reef-io/src/main/java/org/apache/reef/io/network/group/impl/driver/CommunicationGroupDriverImpl.java?ref=9ebba41b2043e5c88405970988918f9e16f45640",
                "patch": "@@ -317,6 +317,14 @@ public void failTask(final String id) {\n     LOG.fine(getQualifiedName() + \"Got failed Task: \" + id);\n     synchronized (yetToRunLock) {\n       LOG.finest(getQualifiedName() + \"Acquired yetToRunLock\");\n+      // maybe the task does not belong to this communication group.\n+      // if it doesn't, we return, it should belong to other group\n+      // which will handle its failure\n+      if (!perTaskState.containsKey(id)) {\n+        LOG.fine(getQualifiedName()\n+            + \" does not have this task, another communicationGroup must have it\");\n+        return;\n+      }\n       while (cantFailTask(id)) {\n         LOG.finest(getQualifiedName() + \"Need to wait for it run\");\n         try {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "reef",
        "message": "[REEF-779] Implement both null and type checking in equals functions\n\nThis PR prevents potential NPEs and improves performance in equals functions.\n\nJIRA:\n  [REEF-779](https://issues.apache.org/jira/browse/REEF-779)\n\nPull Request:\n  Closes #518",
        "commit": "https://github.com/apache/reef/commit/19809be3cc4691a29e94c826c4747ba043f8ea4f",
        "parent": "https://github.com/apache/reef/commit/0d9dc4f47e1f84606949f2c96f468106d9860126",
        "bug_id": "reef_9",
        "file": [
            {
                "sha": "f558110f8ea0bdbb2105a7352c7c47d6802dc5f9",
                "filename": "lang/java/reef-io/src/main/java/org/apache/reef/io/network/util/StringIdentifier.java",
                "blob_url": "https://github.com/apache/reef/blob/19809be3cc4691a29e94c826c4747ba043f8ea4f/lang/java/reef-io/src/main/java/org/apache/reef/io/network/util/StringIdentifier.java",
                "raw_url": "https://github.com/apache/reef/raw/19809be3cc4691a29e94c826c4747ba043f8ea4f/lang/java/reef-io/src/main/java/org/apache/reef/io/network/util/StringIdentifier.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/reef/contents/lang/java/reef-io/src/main/java/org/apache/reef/io/network/util/StringIdentifier.java?ref=19809be3cc4691a29e94c826c4747ba043f8ea4f",
                "patch": "@@ -53,6 +53,12 @@ public int hashCode() {\n    * @return true if the object is the same as the object argument; false, otherwise\n    */\n   public boolean equals(final Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n     return str.equals(((StringIdentifier) o).toString());\n   }\n ",
                "deletions": 0
            },
            {
                "sha": "81509a5fcfafdd1fdd9411d4b4d920912ba1113f",
                "filename": "lang/java/reef-tang/tang/src/main/java/org/apache/reef/tang/implementation/TangImpl.java",
                "blob_url": "https://github.com/apache/reef/blob/19809be3cc4691a29e94c826c4747ba043f8ea4f/lang/java/reef-tang/tang/src/main/java/org/apache/reef/tang/implementation/TangImpl.java",
                "raw_url": "https://github.com/apache/reef/raw/19809be3cc4691a29e94c826c4747ba043f8ea4f/lang/java/reef-tang/tang/src/main/java/org/apache/reef/tang/implementation/TangImpl.java",
                "status": "modified",
                "changes": 18,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/reef/contents/lang/java/reef-tang/tang/src/main/java/org/apache/reef/tang/implementation/TangImpl.java?ref=19809be3cc4691a29e94c826c4747ba043f8ea4f",
                "patch": "@@ -36,7 +36,7 @@\n    * it to rebuild them over time.\n    */\n   public static void reset() {\n-    defaultClassHierarchy = new HashMap<>(); //new ClassHierarchyImpl();\n+    defaultClassHierarchy = new HashMap<>();\n   }\n \n   @Override\n@@ -51,7 +51,7 @@ public JavaConfigurationBuilder newConfigurationBuilder() {\n       return newConfigurationBuilder(new URL[0], new Configuration[0], new Class[0]);\n     } catch (final BindException e) {\n       throw new IllegalStateException(\n-          \"Caught unexpeceted bind exception!  Implementation bug.\", e);\n+          \"Caught unexpected bind exception! Implementation bug.\", e);\n     }\n   }\n \n@@ -67,7 +67,7 @@ public JavaConfigurationBuilder newConfigurationBuilder(final URL... jars) {\n       return newConfigurationBuilder(jars, new Configuration[0], new Class[0]);\n     } catch (final BindException e) {\n       throw new IllegalStateException(\n-          \"Caught unexpeceted bind exception!  Implementation bug.\", e);\n+          \"Caught unexpected bind exception! Implementation bug.\", e);\n     }\n   }\n \n@@ -88,11 +88,7 @@ public final JavaConfigurationBuilder newConfigurationBuilder(\n   public JavaConfigurationBuilder newConfigurationBuilder(final URL[] jars, final Configuration[] confs,\n           final Class<? extends ExternalConstructor<?>>[] parameterParsers)\n       throws BindException {\n-    final JavaConfigurationBuilder cb = new JavaConfigurationBuilderImpl(jars, confs, parameterParsers);\n-//    for (Configuration c : confs) {\n-//      cb.addConfiguration(c);\n-//    }\n-    return cb;\n+    return new JavaConfigurationBuilderImpl(jars, confs, parameterParsers);\n   }\n \n   @SuppressWarnings(\"unchecked\")\n@@ -151,6 +147,12 @@ public int hashCode() {\n \n     @Override\n     public boolean equals(final Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n       final SetValuedKey other = (SetValuedKey) o;\n       if (other.key.size() != this.key.size()) {\n         return false;",
                "deletions": 8
            },
            {
                "sha": "70c53942ad910742a7f478b82dc3d0ecd6220c1d",
                "filename": "lang/java/reef-tang/tang/src/main/java/org/apache/reef/tang/implementation/types/AbstractNode.java",
                "blob_url": "https://github.com/apache/reef/blob/19809be3cc4691a29e94c826c4747ba043f8ea4f/lang/java/reef-tang/tang/src/main/java/org/apache/reef/tang/implementation/types/AbstractNode.java",
                "raw_url": "https://github.com/apache/reef/raw/19809be3cc4691a29e94c826c4747ba043f8ea4f/lang/java/reef-tang/tang/src/main/java/org/apache/reef/tang/implementation/types/AbstractNode.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/reef/contents/lang/java/reef-tang/tang/src/main/java/org/apache/reef/tang/implementation/types/AbstractNode.java?ref=19809be3cc4691a29e94c826c4747ba043f8ea4f",
                "patch": "@@ -55,12 +55,12 @@ public String getFullName() {\n \n   @Override\n   public boolean equals(final Object o) {\n-    if (o == null) {\n-      return false;\n-    }\n-    if (o == this) {\n+    if (this == o) {\n       return true;\n     }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n \n     final AbstractNode n = (AbstractNode) o;\n     final boolean parentsEqual;",
                "deletions": 4
            },
            {
                "sha": "087e1ed5ba11c60ad709768d9436c9c873345a1a",
                "filename": "lang/java/reef-tang/tang/src/main/java/org/apache/reef/tang/implementation/types/ConstructorArgImpl.java",
                "blob_url": "https://github.com/apache/reef/blob/19809be3cc4691a29e94c826c4747ba043f8ea4f/lang/java/reef-tang/tang/src/main/java/org/apache/reef/tang/implementation/types/ConstructorArgImpl.java",
                "raw_url": "https://github.com/apache/reef/raw/19809be3cc4691a29e94c826c4747ba043f8ea4f/lang/java/reef-tang/tang/src/main/java/org/apache/reef/tang/implementation/types/ConstructorArgImpl.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/reef/contents/lang/java/reef-tang/tang/src/main/java/org/apache/reef/tang/implementation/types/ConstructorArgImpl.java?ref=19809be3cc4691a29e94c826c4747ba043f8ea4f",
                "patch": "@@ -53,6 +53,12 @@ public String toString() {\n \n   @Override\n   public boolean equals(final Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n     final ConstructorArgImpl arg = (ConstructorArgImpl) o;\n     if (!type.equals(arg.type)) {\n       return false;",
                "deletions": 0
            },
            {
                "sha": "38f290e478534e2b30881391eca4ba657220400b",
                "filename": "lang/java/reef-tang/tang/src/main/java/org/apache/reef/tang/implementation/types/ConstructorDefImpl.java",
                "blob_url": "https://github.com/apache/reef/blob/19809be3cc4691a29e94c826c4747ba043f8ea4f/lang/java/reef-tang/tang/src/main/java/org/apache/reef/tang/implementation/types/ConstructorDefImpl.java",
                "raw_url": "https://github.com/apache/reef/raw/19809be3cc4691a29e94c826c4747ba043f8ea4f/lang/java/reef-tang/tang/src/main/java/org/apache/reef/tang/implementation/types/ConstructorDefImpl.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/reef/contents/lang/java/reef-tang/tang/src/main/java/org/apache/reef/tang/implementation/types/ConstructorDefImpl.java?ref=19809be3cc4691a29e94c826c4747ba043f8ea4f",
                "patch": "@@ -120,6 +120,12 @@ private boolean equalsIgnoreOrder(final ConstructorDef<?> def) {\n \n   @Override\n   public boolean equals(final Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n     return equalsIgnoreOrder((ConstructorDef<?>) o);\n   }\n ",
                "deletions": 0
            },
            {
                "sha": "a1c1ae04d7178508229a996b5e931d547bf08531",
                "filename": "lang/java/reef-wake/wake/src/main/java/org/apache/reef/wake/remote/impl/SocketRemoteIdentifier.java",
                "blob_url": "https://github.com/apache/reef/blob/19809be3cc4691a29e94c826c4747ba043f8ea4f/lang/java/reef-wake/wake/src/main/java/org/apache/reef/wake/remote/impl/SocketRemoteIdentifier.java",
                "raw_url": "https://github.com/apache/reef/raw/19809be3cc4691a29e94c826c4747ba043f8ea4f/lang/java/reef-wake/wake/src/main/java/org/apache/reef/wake/remote/impl/SocketRemoteIdentifier.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/reef/contents/lang/java/reef-wake/wake/src/main/java/org/apache/reef/wake/remote/impl/SocketRemoteIdentifier.java?ref=19809be3cc4691a29e94c826c4747ba043f8ea4f",
                "patch": "@@ -90,6 +90,12 @@ public int hashCode() {\n    */\n   @Override\n   public boolean equals(final Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n     return addr.equals(((SocketRemoteIdentifier) o).getSocketAddress());\n   }\n ",
                "deletions": 0
            },
            {
                "sha": "ff0ab9de00aa1a00bb594c0a979b26e57d4a094a",
                "filename": "lang/java/reef-wake/wake/src/main/java/org/apache/reef/wake/remote/impl/Tuple2.java",
                "blob_url": "https://github.com/apache/reef/blob/19809be3cc4691a29e94c826c4747ba043f8ea4f/lang/java/reef-wake/wake/src/main/java/org/apache/reef/wake/remote/impl/Tuple2.java",
                "raw_url": "https://github.com/apache/reef/raw/19809be3cc4691a29e94c826c4747ba043f8ea4f/lang/java/reef-wake/wake/src/main/java/org/apache/reef/wake/remote/impl/Tuple2.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/reef/contents/lang/java/reef-wake/wake/src/main/java/org/apache/reef/wake/remote/impl/Tuple2.java?ref=19809be3cc4691a29e94c826c4747ba043f8ea4f",
                "patch": "@@ -49,6 +49,12 @@ public int hashCode() {\n \n   @Override\n   public boolean equals(final Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n     final Tuple2<T1, T2> tuple = (Tuple2<T1, T2>) o;\n     return t1.equals((Object) tuple.getT1()) && t2.equals((Object) tuple.getT2());\n   }",
                "deletions": 0
            },
            {
                "sha": "222128ed7dad09df757d0fc91f8c39a3525f8d30",
                "filename": "lang/java/reef-wake/wake/src/test/java/org/apache/reef/wake/test/remote/TestRemoteIdentifier.java",
                "blob_url": "https://github.com/apache/reef/blob/19809be3cc4691a29e94c826c4747ba043f8ea4f/lang/java/reef-wake/wake/src/test/java/org/apache/reef/wake/test/remote/TestRemoteIdentifier.java",
                "raw_url": "https://github.com/apache/reef/raw/19809be3cc4691a29e94c826c4747ba043f8ea4f/lang/java/reef-wake/wake/src/test/java/org/apache/reef/wake/test/remote/TestRemoteIdentifier.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/reef/contents/lang/java/reef-wake/wake/src/test/java/org/apache/reef/wake/test/remote/TestRemoteIdentifier.java?ref=19809be3cc4691a29e94c826c4747ba043f8ea4f",
                "patch": "@@ -32,6 +32,12 @@ public String getString() {\n   }\n \n   public boolean equals(final Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n     return str.equals(((TestRemoteIdentifier) o).getString());\n   }\n ",
                "deletions": 0
            }
        ]
    }
]