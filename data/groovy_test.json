{
    "groovy_0550da4": {
        "bug_id": "groovy_0550da4",
        "commit": "https://github.com/apache/groovy/commit/0550da496a6184e258676b9d169559be5a8f1c9f",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/0550da496a6184e258676b9d169559be5a8f1c9f/src/main/groovy/groovy/lang/MissingMethodException.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/groovy/lang/MissingMethodException.java?ref=0550da496a6184e258676b9d169559be5a8f1c9f",
                "deletions": 1,
                "filename": "src/main/groovy/groovy/lang/MissingMethodException.java",
                "patch": "@@ -29,6 +29,7 @@\n  */\n public class MissingMethodException extends GroovyRuntimeException {\n \n+    private static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];\n     private final String method;\n     private final Class type;\n     private final boolean isStatic;\n@@ -48,7 +49,7 @@ public MissingMethodException(String method, Class type, Object[] arguments, boo\n         this.method = method;\n         this.type = type;\n         this.isStatic = isStatic;\n-        this.arguments = arguments;\n+        this.arguments = arguments == null ? EMPTY_OBJECT_ARRAY : arguments;\n     }\n \n     public String getMessage() {",
                "raw_url": "https://github.com/apache/groovy/raw/0550da496a6184e258676b9d169559be5a8f1c9f/src/main/groovy/groovy/lang/MissingMethodException.java",
                "sha": "ae2eea18ecb3bf2aaec970aaa6d4f9eddc9fbf16",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/groovy/blob/0550da496a6184e258676b9d169559be5a8f1c9f/subprojects/groovy-jsr223/src/main/java/org/codehaus/groovy/jsr223/GroovyScriptEngineImpl.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/subprojects/groovy-jsr223/src/main/java/org/codehaus/groovy/jsr223/GroovyScriptEngineImpl.java?ref=0550da496a6184e258676b9d169559be5a8f1c9f",
                "deletions": 1,
                "filename": "subprojects/groovy-jsr223/src/main/java/org/codehaus/groovy/jsr223/GroovyScriptEngineImpl.java",
                "patch": "@@ -367,6 +367,22 @@ private Object invokeImpl(Object thiz, String name, Object... args)\n         }\n     }\n \n+    private Object invokeImplSafe(Object thiz, String name, Object... args) {\n+        if (name == null) {\n+            throw new NullPointerException(\"method name is null\");\n+        }\n+\n+        try {\n+            if (thiz != null) {\n+                return InvokerHelper.invokeMethod(thiz, name, args);\n+            } else {\n+                return callGlobal(name, args);\n+            }\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n     // call the script global function of the given name\n     private Object callGlobal(String name, Object[] args) {\n         return callGlobal(name, args, context);\n@@ -404,7 +420,7 @@ private static synchronized String generateScriptName() {\n                 new InvocationHandler() {\n                     public Object invoke(Object proxy, Method m, Object[] args)\n                             throws Throwable {\n-                        return invokeImpl(thiz, m.getName(), args);\n+                        return invokeImplSafe(thiz, m.getName(), args);\n                     }\n                 });\n     }",
                "raw_url": "https://github.com/apache/groovy/raw/0550da496a6184e258676b9d169559be5a8f1c9f/subprojects/groovy-jsr223/src/main/java/org/codehaus/groovy/jsr223/GroovyScriptEngineImpl.java",
                "sha": "2c9e633d55fdaf5dce70e6e48badcebc2c6ac7f2",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/groovy/blob/0550da496a6184e258676b9d169559be5a8f1c9f/subprojects/groovy-jsr223/src/test/groovy/org/codehaus/groovy/jsr223/JSR223Test.groovy",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/subprojects/groovy-jsr223/src/test/groovy/org/codehaus/groovy/jsr223/JSR223Test.groovy?ref=0550da496a6184e258676b9d169559be5a8f1c9f",
                "deletions": 0,
                "filename": "subprojects/groovy-jsr223/src/test/groovy/org/codehaus/groovy/jsr223/JSR223Test.groovy",
                "patch": "@@ -220,4 +220,29 @@ class JSR223Test extends GroovyTestCase {\n         assert engine.getFactory() == factory\n     }\n \n+    void testGetInterfaceScenarios() {\n+        assertScript '''\n+        interface Test { def foo(); def bar(); def baz() }\n+        def engine = new javax.script.ScriptEngineManager().getEngineByName(\"groovy\")\n+        engine.eval(\"def foo() { 42 }\")\n+        engine.eval(\"def bar() { throw new Exception('Boom!') }\")\n+        def test = engine.getInterface(Test)\n+        assert test.foo() == 42\n+\n+        try {\n+            test.bar()\n+            assert false\n+        } catch(RuntimeException re) {\n+            assert re.message.endsWith('Boom!')\n+        }\n+\n+        try {\n+            test.baz()\n+            assert false\n+        } catch(RuntimeException re) {\n+            assert re.cause.class.name.endsWith('MissingMethodException')\n+        }\n+        '''\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/groovy/raw/0550da496a6184e258676b9d169559be5a8f1c9f/subprojects/groovy-jsr223/src/test/groovy/org/codehaus/groovy/jsr223/JSR223Test.groovy",
                "sha": "ce63254b26da30badf2841986c4c87ea4f499946",
                "status": "modified"
            }
        ],
        "message": "GROOVY-8514: NullPointerException in class MissingMethodException (closes #675)",
        "parent": "https://github.com/apache/groovy/commit/a2851b79a1822600ba1c42b3bc50e87e644351c4",
        "patched_files": [
            "MissingMethodException.java",
            "GroovyScriptEngineImpl.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "JSR223Test.java"
        ]
    },
    "groovy_0695d2a": {
        "bug_id": "groovy_0695d2a",
        "commit": "https://github.com/apache/groovy/commit/0695d2a5d518816059e43d6fe842faa010219064",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/0695d2a5d518816059e43d6fe842faa010219064/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java?ref=0695d2a5d518816059e43d6fe842faa010219064",
                "deletions": 2,
                "filename": "src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java",
                "patch": "@@ -4322,7 +4322,7 @@ private static Collection flatten(Collection elements, Collection addTo) {\n         for (Object element : elements) {\n             if (element instanceof Collection) {\n                 flatten((Collection) element, addTo);\n-            } else if (element.getClass().isArray()) {\n+            } else if (element != null && element.getClass().isArray()) {\n                 flatten(DefaultTypeTransformation.arrayAsCollection(element), addTo);\n             } else {\n                 // found a leaf\n@@ -4351,7 +4351,7 @@ private static Collection flatten(Collection elements, Collection addTo, Closure\n         for (Object element : elements) {\n             if (element instanceof Collection) {\n                 flatten((Collection) element, addTo, flattenUsing);\n-            } else if (element.getClass().isArray()) {\n+            } else if (element != null && element.getClass().isArray()) {\n                 flatten(DefaultTypeTransformation.arrayAsCollection(element), addTo, flattenUsing);\n             } else {\n                 Object flattened = flattenUsing.call(new Object[]{element});",
                "raw_url": "https://github.com/apache/groovy/raw/0695d2a5d518816059e43d6fe842faa010219064/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java",
                "sha": "cd21a3150c9e88b4321d1baf11c258dd8b2504de",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/groovy/blob/0695d2a5d518816059e43d6fe842faa010219064/src/test/groovy/ListTest.groovy",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/ListTest.groovy?ref=0695d2a5d518816059e43d6fe842faa010219064",
                "deletions": 3,
                "filename": "src/test/groovy/ListTest.groovy",
                "patch": "@@ -219,10 +219,11 @@ class ListTest extends GroovyTestCase {\n         assert (b == a && a == [1, \"foo\", (short)3, 4L])\n     }\n \n+    // incorporates GROOVY-2904 and GROOVY-3102\n     void testListFlatten() {\n-        def orig = [[[4, 5, 6, [46, 7, \"erer\"]], 4, [3, 6, 78]], 4]\n+        def orig = [[[4, 5, 6, [46, 7, \"erer\"]], null, 4, [3, 6, 78]], 4]\n         def flat = orig.flatten()\n-        assert flat == [4, 5, 6, 46, 7, \"erer\", 4, 3, 6, 78, 4]\n+        assert flat == [4, 5, 6, 46, 7, \"erer\", null, 4, 3, 6, 78, 4]\n     }\n     \n     void testSetFlatten() {\n@@ -243,8 +244,9 @@ class ListTest extends GroovyTestCase {\n         assert flat == [\"o\", \"n\", \"e\", \"t\", \"w\", \"o\"]\n     }\n \n+    // incorporates GROOVY-2904 and GROOVY-3102\n     void testFlattenListWithSuppliedClosure() {\n-        def orig = [[[4, 5, 6, [46, 7, \"erer\"]], 4, [3, 6, 78]], 4]\n+        def orig = [[[4, 5, 6, [46, 7, \"erer\"]], null, 4, [3, 6, 78]], 4]\n         def flat = orig.flatten{ it.iterator().toList() }\n         assert flat == [4, 5, 6, 46, 7, \"e\", \"r\", \"e\", \"r\", 4, 3, 6, 78, 4]\n     }",
                "raw_url": "https://github.com/apache/groovy/raw/0695d2a5d518816059e43d6fe842faa010219064/src/test/groovy/ListTest.groovy",
                "sha": "9f43bc2da282277a2eb718826a91dc30f22e8785",
                "status": "modified"
            }
        ],
        "message": "GROOVY-3102: NPE with flatten() in case of null elements in the collection\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@13773 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/44d164b6447909bd9b9727199928e1b523f92daf",
        "patched_files": [
            "DefaultGroovyMethods.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "DefaultGroovyMethodsTest.java",
            "ListTest.java"
        ]
    },
    "groovy_0fda882": {
        "bug_id": "groovy_0fda882",
        "commit": "https://github.com/apache/groovy/commit/0fda882423cd16e5f46571a6f977325ea9ae7cd5",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/groovy/blob/0fda882423cd16e5f46571a6f977325ea9ae7cd5/subprojects/groovy-groovysh/src/main/groovy/org/codehaus/groovy/tools/shell/ReflectionCompletor.groovy",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/subprojects/groovy-groovysh/src/main/groovy/org/codehaus/groovy/tools/shell/ReflectionCompletor.groovy?ref=0fda882423cd16e5f46571a6f977325ea9ae7cd5",
                "deletions": 3,
                "filename": "subprojects/groovy-groovysh/src/main/groovy/org/codehaus/groovy/tools/shell/ReflectionCompletor.groovy",
                "patch": "@@ -99,14 +99,21 @@ class ReflectionCompletor implements Completor {\n      * @param prefix the prefix that must be matched\n      * @return the list of public methods and fields that begin with the prefix\n      */\n-    Collection<String> getPublicFieldsAndMethods(Object instance, String prefix) {\n+    static Collection<String> getPublicFieldsAndMethods(Object instance, String prefix) {\n         List<String> rv = []\n-        instance.class.fields.each { Field fit ->\n+        Class clazz = instance.class\n+        if (clazz == null) {\n+            clazz = instance.getClass()\n+        }\n+        if (clazz == null) {\n+            return rv;\n+        }\n+        clazz.fields.each { Field fit ->\n             if (fit.name.startsWith(prefix)) {\n                 rv << fit.name\n             }\n         }\n-        instance.class.methods.each { Method mit ->\n+        clazz.methods.each { Method mit ->\n             if (mit.name.startsWith(prefix)) {\n                 rv << mit.name + (mit.parameterTypes.length == 0 ? \"()\" : \"(\")\n             }",
                "raw_url": "https://github.com/apache/groovy/raw/0fda882423cd16e5f46571a6f977325ea9ae7cd5/subprojects/groovy-groovysh/src/main/groovy/org/codehaus/groovy/tools/shell/ReflectionCompletor.groovy",
                "sha": "9c80b9e315c211a4c35e4e5479f42a338d442226",
                "status": "modified"
            },
            {
                "additions": 71,
                "blob_url": "https://github.com/apache/groovy/blob/0fda882423cd16e5f46571a6f977325ea9ae7cd5/subprojects/groovy-groovysh/src/test/groovy/org/codehaus/groovy/tools/shell/ReflectionCompletorTest.groovy",
                "changes": 73,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/subprojects/groovy-groovysh/src/test/groovy/org/codehaus/groovy/tools/shell/ReflectionCompletorTest.groovy?ref=0fda882423cd16e5f46571a6f977325ea9ae7cd5",
                "deletions": 2,
                "filename": "subprojects/groovy-groovysh/src/test/groovy/org/codehaus/groovy/tools/shell/ReflectionCompletorTest.groovy",
                "patch": "@@ -16,8 +16,77 @@\n \n package org.codehaus.groovy.tools.shell\n \n-class ReflectionCompletorTest\n-extends CompletorTestSupport {\n+import org.codehaus.groovy.antlr.parser.GroovyLexer\n+\n+class ReflectionCompletorUnitTest extends GroovyTestCase {\n+\n+    void testGetFieldsAndMethodsArray() {\n+        Collection<String> result = ReflectionCompletor.getPublicFieldsAndMethods([] as String[], \"\")\n+        assertEquals(result.toString(), 91, result.size())\n+        result = ReflectionCompletor.getPublicFieldsAndMethods([] as String[], \"size\")\n+        assertEquals([\"size()\"], result)\n+    }\n+\n+    void testGetFieldsAndMethodsMap() {\n+        Collection<String> result = ReflectionCompletor.getPublicFieldsAndMethods(['id': '42'], \"\")\n+        assertEquals(96, result.size())\n+        result = ReflectionCompletor.getPublicFieldsAndMethods(['id': '42'], \"size\")\n+        assertEquals([\"size()\"], result)\n+    }\n+\n+    void testGetFieldsAndMethodsString() {\n+        Collection<String> result = ReflectionCompletor.getPublicFieldsAndMethods(\"foo\", \"\")\n+        assertEquals(159, result.size())\n+        result = ReflectionCompletor.getPublicFieldsAndMethods(\"foo\", \"tok\")\n+        assertEquals([\"tokenize(\", \"tokenize()\"], result)\n+        result = ReflectionCompletor.getPublicFieldsAndMethods(String, \"tok\")\n+        assertEquals([\"tokenize(\", \"tokenize()\"], result)\n+    }\n+\n+    void testGetFieldsAndMethodsPrimitive() {\n+        Collection<String> result = ReflectionCompletor.getPublicFieldsAndMethods(3, \"\")\n+        assertEquals(113, result.size())\n+        result = ReflectionCompletor.getPublicFieldsAndMethods(3, \"una\")\n+        assertEquals([\"unaryMinus()\"], result)\n+        result = ReflectionCompletor.getPublicFieldsAndMethods(Integer, \"una\")\n+        assertEquals([\"unaryMinus()\"], result)\n+        result = ReflectionCompletor.getPublicFieldsAndMethods(Integer, \"MA\")\n+        // bug\n+        assertEquals([], result)\n+        result = ReflectionCompletor.getPublicFieldsAndMethods(Integer, \"getI\")\n+        // bug\n+        assertEquals([\"getInterfaces()\"], result)\n+    }\n+\n+    void testGetFieldsAndMethodsInterface() {\n+        Collection<String> result = ReflectionCompletor.getPublicFieldsAndMethods(Set, \"\")\n+        assertEquals(157, result.size())\n+        result = ReflectionCompletor.getPublicFieldsAndMethods(Set, \"toA\")\n+        assertEquals([], result)\n+    }\n+\n+    void testGetInterfaceFields() {\n+        Collection<String> result = ReflectionCompletor.getPublicFieldsAndMethods(GroovyLexer, \"\")\n+        assertEquals(110, result.size())\n+        result = ReflectionCompletor.getPublicFieldsAndMethods(GroovyLexer, \"LITERAL_as\")\n+        // bug\n+        assertEquals([], result)\n+        GroovyLexer lexer = new GroovyLexer(new ByteArrayInputStream(\"\".getBytes()))\n+        result = ReflectionCompletor.getPublicFieldsAndMethods(lexer, \"LITERAL_as\")\n+        assertEquals([\"LITERAL_as\", \"LITERAL_assert\"], result)\n+    }\n+\n+    void testGetFieldsAndMethodsClass() {\n+        Collection<String> result = ReflectionCompletor.getPublicFieldsAndMethods(HashSet, \"\")\n+        assertEquals(157, result.size())\n+        result = ReflectionCompletor.getPublicFieldsAndMethods(HashSet, \"fo\")\n+        assertEquals([\"forName(\"], result)\n+        result = ReflectionCompletor.getPublicFieldsAndMethods(HashSet, \"toA\")\n+        assertEquals([], result)\n+    }\n+}\n+\n+class ReflectionCompletorTest extends CompletorTestSupport {\n \n     void testEmpty() {\n         groovyshMocker.use {",
                "raw_url": "https://github.com/apache/groovy/raw/0fda882423cd16e5f46571a6f977325ea9ae7cd5/subprojects/groovy-groovysh/src/test/groovy/org/codehaus/groovy/tools/shell/ReflectionCompletorTest.groovy",
                "sha": "a74eb864bf01fbe75def8cf95fcdcb8a6352d8f1",
                "status": "modified"
            }
        ],
        "message": "fix getPublicFieldsAndMethods vulnerable to NPE.\n\nTo reproduce:\nmap = ['id':'FX-11']\nmap.<tab>\n===> java.lang.NullPointerException: Cannot get property 'fields' on null object\nstatic method\n\nAdded someunit tests showing further problems with ReflectionCompleter,\nTests passing, bugs to be fixed in another commit",
        "parent": "https://github.com/apache/groovy/commit/e3912c1155b44cd0ce7a38406efd5127a4f3adde",
        "patched_files": [
            "ReflectionCompletor.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "ReflectionCompletorTest.java"
        ]
    },
    "groovy_15102bd": {
        "bug_id": "groovy_15102bd",
        "commit": "https://github.com/apache/groovy/commit/15102bd3ddc9115c98c71a806676d476c32a6f5a",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/groovy/blob/15102bd3ddc9115c98c71a806676d476c32a6f5a/src/main/java/org/codehaus/groovy/control/customizers/builder/SourceAwareCustomizerFactory.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/java/org/codehaus/groovy/control/customizers/builder/SourceAwareCustomizerFactory.java?ref=15102bd3ddc9115c98c71a806676d476c32a6f5a",
                "deletions": 3,
                "filename": "src/main/java/org/codehaus/groovy/control/customizers/builder/SourceAwareCustomizerFactory.java",
                "patch": "@@ -21,6 +21,10 @@\n import groovy.lang.Closure;\n import groovy.util.AbstractFactory;\n import groovy.util.FactoryBuilderSupport;\n+import org.codehaus.groovy.ast.ClassNode;\n+import org.codehaus.groovy.classgen.GeneratorContext;\n+import org.codehaus.groovy.control.CompilePhase;\n+import org.codehaus.groovy.control.SourceUnit;\n import org.codehaus.groovy.control.customizers.CompilationCustomizer;\n import org.codehaus.groovy.control.customizers.SourceAwareCustomizer;\n \n@@ -79,6 +83,13 @@ public Object newInstance(final FactoryBuilderSupport builder, final Object name\n         SourceOptions data = new SourceOptions();\n         if (value instanceof CompilationCustomizer) {\n             data.delegate = (CompilationCustomizer) value;\n+        } else {\n+            // GROOVY-9035 supply a \"no-op\" CompilationCustomizer if none found to make DSL friendly for empty case\n+            data.delegate = new CompilationCustomizer(CompilePhase.FINALIZATION) {\n+                @Override\n+                public void call(SourceUnit source, GeneratorContext context, ClassNode classNode) {\n+                }\n+            };\n         }\n         return data;\n     }\n@@ -116,7 +127,6 @@ private static void addExtensionValidator(final SourceAwareCustomizer sourceAwar\n                 private static final long serialVersionUID = 925642730835101872L;\n \n                 @Override\n-                @SuppressWarnings(\"unchecked\")\n                 public Boolean call(final Object arguments) {\n                     return extensions.contains(arguments);\n                 }\n@@ -134,7 +144,6 @@ private static void addBasenameValidator(final SourceAwareCustomizer sourceAware\n                 private static final long serialVersionUID = 7714937867958607043L;\n \n                 @Override\n-                @SuppressWarnings(\"unchecked\")\n                 public Boolean call(final Object arguments) {\n                     return basenames.contains(arguments);\n                 }\n@@ -159,4 +168,4 @@ public Boolean call(final Object arguments) {\n         public List<String> extensions;\n         public List<String> basenames;\n     }\n-}\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/groovy/raw/15102bd3ddc9115c98c71a806676d476c32a6f5a/src/main/java/org/codehaus/groovy/control/customizers/builder/SourceAwareCustomizerFactory.java",
                "sha": "e1a4df73c7bb6fa106b465073f57a82295b29945",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/groovy/blob/15102bd3ddc9115c98c71a806676d476c32a6f5a/src/test/org/codehaus/groovy/control/customizers/builder/CompilerCustomizationBuilderTest.groovy",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/control/customizers/builder/CompilerCustomizationBuilderTest.groovy?ref=15102bd3ddc9115c98c71a806676d476c32a6f5a",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/control/customizers/builder/CompilerCustomizationBuilderTest.groovy",
                "patch": "@@ -342,6 +342,15 @@ class CompilerCustomizationBuilderTest extends GroovyTestCase {\n         assert config.compilationCustomizers.first().importsWhitelist == []\n     }\n \n+    // GROOVY-9035\n+    void testEmptySourceAwareCustomizerBuilder() {\n+        def builder = new CompilerCustomizationBuilder()\n+        def cz = builder.source {\n+            // intentionally empty\n+        }\n+        assert cz instanceof SourceAwareCustomizer\n+    }\n+\n     private static class SourceUnit {\n         String name\n     }",
                "raw_url": "https://github.com/apache/groovy/raw/15102bd3ddc9115c98c71a806676d476c32a6f5a/src/test/org/codehaus/groovy/control/customizers/builder/CompilerCustomizationBuilderTest.groovy",
                "sha": "b985a83c0a72b0f00e9b6dc7fb1187d1a985c249",
                "status": "modified"
            }
        ],
        "message": "GROOVY-9035: config script: unexpected NPE when processing compiler config DSL",
        "parent": "https://github.com/apache/groovy/commit/bc773c126b814f7cef086171ae03e34e27667110",
        "patched_files": [
            "SourceAwareCustomizerFactory.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "CompilerCustomizationBuilderTest.java"
        ]
    },
    "groovy_1747f18": {
        "bug_id": "groovy_1747f18",
        "commit": "https://github.com/apache/groovy/commit/1747f18002d9526152438bd4597f1ae4bd8e3192",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/groovy/blob/1747f18002d9526152438bd4597f1ae4bd8e3192/src/main/org/codehaus/groovy/antlr/groovy.g",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/antlr/groovy.g?ref=1747f18002d9526152438bd4597f1ae4bd8e3192",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/antlr/groovy.g",
                "patch": "@@ -3629,7 +3629,12 @@ options {\n     protected GroovyRecognizer parser;  // little-used link; TODO: get rid of\n     private void require(boolean z, String problem, String solution) throws SemanticException {\n         // TODO: Direct to a common error handler, rather than through the parser.\n-        if (!z)  parser.requireFailed(problem, solution);\n+        if (!z && parser!=null)  parser.requireFailed(problem, solution);\n+        if (!z) {\n+            int lineNum = inputState.getLine(), colNum = inputState.getColumn();\n+            throw new SemanticException(problem + \";\\n   solution: \" + solution,\n+                                        getFilename(), lineNum, colNum);\n+        }\n     }\n }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/1747f18002d9526152438bd4597f1ae4bd8e3192/src/main/org/codehaus/groovy/antlr/groovy.g",
                "sha": "74d57f8b4cdafb3de70aedbdb50f7559b6128215",
                "status": "modified"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/groovy/blob/1747f18002d9526152438bd4597f1ae4bd8e3192/src/test/org/codehaus/groovy/antlr/GStringEndTest.groovy",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/antlr/GStringEndTest.groovy?ref=1747f18002d9526152438bd4597f1ae4bd8e3192",
                "deletions": 1,
                "filename": "src/test/org/codehaus/groovy/antlr/GStringEndTest.groovy",
                "patch": "@@ -1,4 +1,23 @@\n+/*\n+ * Copyright 2003-2014 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n import org.codehaus.groovy.control.*\n+import org.codehaus.groovy.antlr.parser.GroovyLexer\n+\n+import antlr.TokenStreamRecognitionException;\n \n class GStringEndTest extends GroovyTestCase {\n     void testInvalidEndContainsLineNumber(){\n@@ -10,5 +29,17 @@ class GStringEndTest extends GroovyTestCase {\n             def text = mcee.toString();\n             assert text.contains(\"line 2, column 41\")\n         }\n-  }\n+    }\n+\n+    void testErrorReportOnStringEndWithOutParser() {\n+        // GROOVY-6608: the code did throw a NPE\n+        def s = '''\n+def scanFolders()\n+{ doThis( ~\"(?i)^sometext$\", \n+'''\n+        def lexer = new GroovyLexer(new StringReader(s))\n+        try {\n+            while (lexer.nextToken()!=null) {}\n+        } catch (antlr.TokenStreamRecognitionException se) {}\n+    }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/groovy/raw/1747f18002d9526152438bd4597f1ae4bd8e3192/src/test/org/codehaus/groovy/antlr/GStringEndTest.groovy",
                "sha": "74a09c21ad15b6fc9775b40989bf6893099141dd",
                "status": "modified"
            }
        ],
        "message": "GROOVY-6608 fix NPE",
        "parent": "https://github.com/apache/groovy/commit/fa01121fde4563abf04d986990223090901d70b1",
        "patched_files": [
            "groovy.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "GStringEndTest.java"
        ]
    },
    "groovy_18f6f82": {
        "bug_id": "groovy_18f6f82",
        "commit": "https://github.com/apache/groovy/commit/18f6f8271ed3bfb7c06ab0360dee80fb5be46cb0",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/groovy/blob/18f6f8271ed3bfb7c06ab0360dee80fb5be46cb0/src/main/groovy/lang/MetaClassImpl.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/MetaClassImpl.java?ref=18f6f8271ed3bfb7c06ab0360dee80fb5be46cb0",
                "deletions": 9,
                "filename": "src/main/groovy/lang/MetaClassImpl.java",
                "patch": "@@ -2294,15 +2294,6 @@ public void setProperty(Class sender, Object object, String name, Object newValu\n         //----------------------------------------------------------------------\n         if (newValue instanceof Wrapper) newValue = ((Wrapper) newValue).unwrap();\n \n-        //----------------------------------------------------------------------\n-        // turn setProperty on a Map to put on the Map itself\n-        //----------------------------------------------------------------------\n-        if (!isStatic && this.isMap) {\n-            ((Map) object).put(name, newValue);\n-            return;\n-        }\n-\n-\n         MetaMethod method = null;\n         Object[] arguments = null;\n \n@@ -2403,6 +2394,14 @@ public void setProperty(Class sender, Object object, String name, Object newValu\n             return;\n         }\n \n+        //----------------------------------------------------------------------\n+        // turn setProperty on a Map to put on the Map itself\n+        //----------------------------------------------------------------------\n+        if (!isStatic && this.isMap) {\n+            ((Map) object).put(name, newValue);\n+            return;\n+        }\n+\n         //----------------------------------------------------------------------\n         // error due to missing method/field\n         //----------------------------------------------------------------------",
                "raw_url": "https://github.com/apache/groovy/raw/18f6f8271ed3bfb7c06ab0360dee80fb5be46cb0/src/main/groovy/lang/MetaClassImpl.java",
                "sha": "4b23403e389ae480718abd088dd1db49b3132090",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/groovy/blob/18f6f8271ed3bfb7c06ab0360dee80fb5be46cb0/src/test/org/codehaus/groovy/transform/DelegateTransformTest.groovy",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/transform/DelegateTransformTest.groovy?ref=18f6f8271ed3bfb7c06ab0360dee80fb5be46cb0",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/transform/DelegateTransformTest.groovy",
                "patch": "@@ -119,4 +119,13 @@ class DelegateTransformTest extends GroovyShellTestCase {\n         Foo\r\n       \"\"\"\r\n     }\r\n+\r\n+    /** fix for GROOVY-3471 */\r\n+    void testDelegateOnAMapTypeFieldWithInitializationUsingConstructorProperties() {\r\n+        assertScript \"\"\"\r\n+            class Test3471 { @Delegate Map mp }\r\n+            def t = new Test3471(mp: new HashMap()) // this was resulting in a NPE due to MetaClassImpl's special handling of Map\r\n+            assert t.keySet().size() == 0\r\n+        \"\"\"\r\n+    }\r\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/groovy/raw/18f6f8271ed3bfb7c06ab0360dee80fb5be46cb0/src/test/org/codehaus/groovy/transform/DelegateTransformTest.groovy",
                "sha": "6fdfeea360e83654dc901650d6ac00b7f56f38d0",
                "status": "modified"
            }
        ],
        "message": "GROOVY-3471\nWhen @Delegate was used on a Map field that got initialized through named properties passed to constructor, MetaClassImpl's special handling of Map interface in setProperty() caused an NPE. Fixed it.\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@16502 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/e6e8ac0ac5da29fe30b51adfbd6a54d67b97ba47",
        "patched_files": [
            "MetaClassImpl.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "DelegateTransformTest.java"
        ]
    },
    "groovy_1d7cb7c": {
        "bug_id": "groovy_1d7cb7c",
        "commit": "https://github.com/apache/groovy/commit/1d7cb7c17a85cbba4e37f21c4e7db2b16f9c43aa",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/groovy/blob/1d7cb7c17a85cbba4e37f21c4e7db2b16f9c43aa/src/main/groovy/servlet/AbstractHttpServlet.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/servlet/AbstractHttpServlet.java?ref=1d7cb7c17a85cbba4e37f21c4e7db2b16f9c43aa",
                "deletions": 3,
                "filename": "src/main/groovy/servlet/AbstractHttpServlet.java",
                "patch": "@@ -296,13 +296,20 @@ private String applyResourceNameMatcher(final String aUri) {\n \n     /**\n      * Parses the http request for the real script or template source file.\n-     *\n-     * @param request the http request to analyze\n-     * @return a file object using an absolute file path name\n+     * \n+     * @param request\n+     *            the http request to analyze\n+     * @return a file object using an absolute file path name, or <code>null</code> if the\n+     *         servlet container cannot translate the virtual path to a real\n+     *         path for any reason (such as when the content is being made\n+     *         available from a .war archive).\n      */\n     protected File getScriptUriAsFile(HttpServletRequest request) {\n         String uri = getScriptUri(request);\n         String real = servletContext.getRealPath(uri);\n+        if (real == null) {\n+            return null;\n+        }\n         return new File(real).getAbsoluteFile();\n     }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/1d7cb7c17a85cbba4e37f21c4e7db2b16f9c43aa/src/main/groovy/servlet/AbstractHttpServlet.java",
                "sha": "664d405b068a62303a2e6c415fd4ee3a6a0745fa",
                "status": "modified"
            },
            {
                "additions": 154,
                "blob_url": "https://github.com/apache/groovy/blob/1d7cb7c17a85cbba4e37f21c4e7db2b16f9c43aa/src/main/groovy/servlet/TemplateServlet.java",
                "changes": 234,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/servlet/TemplateServlet.java?ref=1d7cb7c17a85cbba4e37f21c4e7db2b16f9c43aa",
                "deletions": 80,
                "filename": "src/main/groovy/servlet/TemplateServlet.java",
                "patch": "@@ -21,11 +21,12 @@\n \n import java.io.File;\n import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.io.Reader;\n-import java.io.FileReader;\n-import java.io.IOException;\n import java.io.Writer;\n+import java.net.URL;\n import java.util.Date;\n import java.util.Map;\n import java.util.WeakHashMap;\n@@ -111,8 +112,8 @@\n public class TemplateServlet extends AbstractHttpServlet {\n \n     /**\n-     * Simple cache entry that validates against last modified and length\n-     * attributes of the specified file.\n+     * Simple cache entry. If a file is supplied, then the entry is validated against\n+     * last modified and length attributes of the specified file.\n      *\n      * @author Christian Stein\n      */\n@@ -129,9 +130,6 @@ public TemplateCacheEntry(File file, Template template) {\n         }\n \n         public TemplateCacheEntry(File file, Template template, boolean timestamp) {\n-            if (file == null) {\n-                throw new NullPointerException(\"file\");\n-            }\n             if (template == null) {\n                 throw new NullPointerException(\"template\");\n             }\n@@ -141,26 +139,27 @@ public TemplateCacheEntry(File file, Template template, boolean timestamp) {\n                 this.date = null;\n             }\n             this.hit = 0;\n-            this.lastModified = file.lastModified();\n-            this.length = file.length();\n+            if (file != null) {\n+                this.lastModified = file.lastModified();\n+                this.length = file.length();\n+            }\n             this.template = template;\n         }\n \n         /**\n          * Checks the passed file attributes against those cached ones.\n          *\n-         * @param file Other file handle to compare to the cached values.\n+         * @param file Other file handle to compare to the cached values. May be null in which case the validation is skipped.\n          * @return <code>true</code> if all measured values match, else <code>false</code>\n          */\n         public boolean validate(File file) {\n-            if (file == null) {\n-                throw new NullPointerException(\"file\");\n-            }\n-            if (file.lastModified() != this.lastModified) {\n-                return false;\n-            }\n-            if (file.length() != this.length) {\n-                return false;\n+            if (file != null) {\n+                if (file.lastModified() != this.lastModified) {\n+                    return false;\n+                }\n+                if (file.length() != this.length) {\n+                    return false;\n+                }\n             }\n             hit++;\n             return true;\n@@ -178,7 +177,7 @@ public String toString() {\n     /**\n      * Simple file name to template cache map.\n      */\n-    private final Map cache;\n+    private final Map<String, TemplateCacheEntry> cache;\n \n     /**\n      * Underlying template engine used to evaluate template source files.\n@@ -198,32 +197,21 @@ public String toString() {\n      * Create new TemplateServlet.\n      */\n     public TemplateServlet() {\n-        this.cache = new WeakHashMap();\n+        this.cache = new WeakHashMap<String, TemplateCacheEntry>();\n         this.engine = null; // assigned later by init()\n         this.generateBy = true; // may be changed by init()\n         this.fileEncodingParamVal = null; // may be changed by init()\n     }\n \n     /**\n-     * Gets the template created by the underlying engine parsing the request.\n-     * <p/>\n-     * <p>\n-     * This method looks up a simple (weak) hash map for an existing template\n-     * object that matches the source file. If the source file didn't change in\n-     * length and its last modified stamp hasn't changed compared to a precompiled\n-     * template object, this template is used. Otherwise, there is no or an\n-     * invalid template object cache entry, a new one is created by the underlying\n-     * template engine. This new instance is put to the cache for consecutive\n-     * calls.\n-     * </p>\n-     *\n-     * @param file The HttpServletRequest.\n-     * @return The template that will produce the response text.\n-     * @throws ServletException If the request specified an invalid template source file\n+     * Find a cached template for a given key. If a <code>File</code> is passed then\n+     * any cached object is validated against the File to determine if it is out of\n+     * date\n+     * @param key a unique key for the template, such as a file's absolutePath or a URL.\n+     * @param file a file to be used to determine if the cached template is stale. May be null.\n+     * @return The cached template, or null if there was no cached entry, or the entry was stale.\n      */\n-    protected Template getTemplate(File file) throws ServletException {\n-\n-        String key = file.getAbsolutePath();\n+    private Template findCachedTemplate(String key, File file) {\n         Template template = null;\n \n         /*\n@@ -232,6 +220,7 @@ protected Template getTemplate(File file) throws ServletException {\n         if (verbose) {\n             log(\"Looking for cached template by key \\\"\" + key + \"\\\"\");\n         }\n+        \n         TemplateCacheEntry entry = (TemplateCacheEntry) cache.get(key);\n         if (entry != null) {\n             if (entry.validate(file)) {\n@@ -241,56 +230,133 @@ protected Template getTemplate(File file) throws ServletException {\n                 template = entry.template;\n             } else {\n                 if (verbose) {\n-                    log(\"Cached template needs recompilation!\");\n+                    log(\"Cached template \" + key + \" needs recompiliation! \" + entry);\n                 }\n             }\n         } else {\n             if (verbose) {\n-                log(\"Cache miss.\");\n+                log(\"Cache miss for \" + key);\n             }\n         }\n \n-        //\n-        // Template not cached or the source file changed - compile new template!\n-        //\n-        if (template == null) {\n-            if (verbose) {\n-                log(\"Creating new template from file \" + file + \"...\");\n-            }\n+        return template;\n+    }\n \n+    /**\n+     * Compile the template and store it in the cache.\n+     * @param key a unique key for the template, such as a file's absolutePath or a URL.\n+     * @param reader a reader for the template's source.\n+     * @param file a file to be used to determine if the cached template is stale. May be null.\n+     * @return the created template.\n+     * @throws Exception Any exception when creating the template.\n+     */\n+    private Template createAndStoreTemplate(String key, InputStream inputStream, File file) throws Exception {\n+        if (verbose) {\n+            log(\"Creating new template from \" + key + \"...\");\n+        }\n+\n+        Reader reader = null;\n+\n+        try {\n             String fileEncoding = (fileEncodingParamVal != null) ? fileEncodingParamVal :\n                     System.getProperty(GROOVY_SOURCE_ENCODING);\n \n-            Reader reader = null;\n-            try {\n-                reader = fileEncoding == null ? new FileReader(file) : new InputStreamReader(new FileInputStream(file), fileEncoding);\n-                template = engine.createTemplate(reader);\n-            } catch (Exception e) {\n-                throw new ServletException(\"Creation of template failed: \" + e, e);\n-            } finally {\n-                if (reader != null) {\n-                    try {\n-                        reader.close();\n-                    } catch (IOException ignore) {\n-                        // e.printStackTrace();\n-                    }\n-                }\n-            }\n+            reader = fileEncoding == null ? new InputStreamReader(inputStream) : new InputStreamReader(inputStream, fileEncoding);\n+            Template template = engine.createTemplate(reader);\n+\n             cache.put(key, new TemplateCacheEntry(file, template, verbose));\n+\n             if (verbose) {\n-                log(\"Created and added template to cache. [key=\" + key + \"]\");\n+                log(\"Created and added template to cache. [key=\" + key + \"] \" + cache.get(key));\n+            }\n+\n+            //\n+            // Last sanity check.\n+            //\n+            if (template == null) {\n+                throw new ServletException(\"Template is null? Should not happen here!\");\n+            }\n+\n+            return template;\n+        } finally {\n+            if (reader != null) {\n+                reader.close();\n+            } else if (inputStream != null) {\n+                inputStream.close();\n             }\n         }\n+    }\n+\n+    /**\n+     * Gets the template created by the underlying engine parsing the request.\n+     *\n+     * <p>\n+     * This method looks up a simple (weak) hash map for an existing template\n+     * object that matches the source file. If the source file didn't change in\n+     * length and its last modified stamp hasn't changed compared to a precompiled\n+     * template object, this template is used. Otherwise, there is no or an\n+     * invalid template object cache entry, a new one is created by the underlying\n+     * template engine. This new instance is put to the cache for consecutive\n+     * calls.\n+     * </p>\n+     *\n+     * @return The template that will produce the response text.\n+     * @param file\n+     *            The file containing the template source.\n+     *\n+     * @throws ServletException\n+     *            If the request specified an invalid template source file\n+     */\n+    protected Template getTemplate(File file) throws ServletException {\n+\n+        String key = file.getAbsolutePath();\n+        Template template = findCachedTemplate(key, file);\n \n         //\n-        // Last sanity check.\n+        // Template not cached or the source file changed - compile new template!\n         //\n         if (template == null) {\n-            throw new ServletException(\"Template is null? Should not happen here!\");\n+            try {\n+                template = createAndStoreTemplate(key, new FileInputStream(file), file);\n+            } catch (Exception e) {\n+                throw new ServletException(\"Creation of template failed: \" + e, e);\n+            }\n         }\n \n         return template;\n+    }\n \n+    /**\n+     * Gets the template created by the underlying engine parsing the request.\n+     *\n+     * <p>\n+     * This method looks up a simple (weak) hash map for an existing template\n+     * object that matches the source URL. If there is no cache entry, a new one is\n+     * created by the underlying template engine. This new instance is put\n+     * to the cache for consecutive calls.\n+     * </p>\n+     *\n+     * @return The template that will produce the response text.\n+     * @param url\n+     *            The URL containing the template source..\n+     * @throws ServletException\n+     *            If the request specified an invalid template source URL\n+     */\n+    protected Template getTemplate(URL url) throws ServletException {\n+\n+        String key = url.toString();\n+        Template template = findCachedTemplate(key, null);\n+\n+        // Template not cached or the source file changed - compile new template!\n+        if (template == null) {\n+            try {\n+                template = createAndStoreTemplate(key, url.openConnection().getInputStream(), null);\n+            } catch (Exception e) {\n+                throw new ServletException(\"Creation of template failed: \" + e, e);\n+            }\n+\n+        }\n+        return template;\n     }\n \n     /**\n@@ -374,24 +440,32 @@ public void service(HttpServletRequest request, HttpServletResponse response) th\n         //\n         // Get the template source file handle.\n         //\n+        Template template;\n+        long getMillis;\n+        String name;\n+        \n         File file = super.getScriptUriAsFile(request);\n-        String name = file.getName();\n-        if (!file.exists()) {\n-            response.sendError(HttpServletResponse.SC_NOT_FOUND);\n-            return; // throw new IOException(file.getAbsolutePath());\n-        }\n-        if (!file.canRead()) {\n-            response.sendError(HttpServletResponse.SC_FORBIDDEN, \"Can not read \\\"\" + name + \"\\\"!\");\n-            return; // throw new IOException(file.getAbsolutePath());\n+        if (file != null) {\n+            name = file.getName();\n+            if (!file.exists()) {\n+                response.sendError(HttpServletResponse.SC_NOT_FOUND);\n+                return; // throw new IOException(file.getAbsolutePath());\n+            }\n+            if (!file.canRead()) {\n+                response.sendError(HttpServletResponse.SC_FORBIDDEN, \"Can not read \\\"\" + name + \"\\\"!\");\n+                return; // throw new IOException(file.getAbsolutePath());\n+            }\n+            getMillis = System.currentTimeMillis();\n+            template = getTemplate(file);\n+            getMillis = System.currentTimeMillis() - getMillis;\n+        } else {\n+            name = super.getScriptUri(request);\n+            URL url = servletContext.getResource(name);\n+            getMillis = System.currentTimeMillis();\n+            template = getTemplate(url);\n+            getMillis = System.currentTimeMillis() - getMillis;\n         }\n \n-        //\n-        // Get the requested template.\n-        //\n-        long getMillis = System.currentTimeMillis();\n-        Template template = getTemplate(file);\n-        getMillis = System.currentTimeMillis() - getMillis;\n-\n         //\n         // Create new binding for the current request.\n         //",
                "raw_url": "https://github.com/apache/groovy/raw/1d7cb7c17a85cbba4e37f21c4e7db2b16f9c43aa/src/main/groovy/servlet/TemplateServlet.java",
                "sha": "807a2abd5af63acb04736317ba2fe2d54768bf5d",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/groovy/blob/1d7cb7c17a85cbba4e37f21c4e7db2b16f9c43aa/src/test/groovy/servlet/AbstractHttpServletTest.groovy",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/servlet/AbstractHttpServletTest.groovy?ref=1d7cb7c17a85cbba4e37f21c4e7db2b16f9c43aa",
                "deletions": 0,
                "filename": "src/test/groovy/servlet/AbstractHttpServletTest.groovy",
                "patch": "@@ -118,6 +118,28 @@ class AbstractHttpServletTest extends GroovyTestCase {\n         assert file.getName() == \"realPathservletPathpathInfo\"\n     }\n \n+    /**\n+     * Tests getting URIs as files where filename not available.\n+     */\n+    void testGetScriptURIasFileNoMapping() {\n+\n+        def request = [\n+                getAttribute: {null},\n+                getServletPath: {\"servletPath\"},\n+                getPathInfo: {\"pathInfo\"}] as HttpServletRequest\n+\n+        def servletContext = [\n+                getRealPath: { arg -> null}] as ServletContext\n+\n+        def servletConfig = [\n+                getServletContext: {servletContext},\n+                getInitParameter: {null}] as ServletConfig\n+\n+        servlet.init(servletConfig)\n+        def file = servlet.getScriptUriAsFile(request)\n+        assert file == null\n+    }\n+\n     /**\n      * Tests that exception is thrown when resource is not found.\n      */",
                "raw_url": "https://github.com/apache/groovy/raw/1d7cb7c17a85cbba4e37f21c4e7db2b16f9c43aa/src/test/groovy/servlet/AbstractHttpServletTest.groovy",
                "sha": "637b1da6d1fc7f9d7a4fbbd9353d71f3135c6d20",
                "status": "modified"
            }
        ],
        "message": "GROOVY-4660: NPE in groovy.servlet.AbstractHttpServlet if deploy WAR to jetty",
        "parent": "https://github.com/apache/groovy/commit/0c936e47a184646fbff776f4828c6ca9df7f2e43",
        "patched_files": [
            "TemplateServlet.java",
            "AbstractHttpServlet.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "AbstractHttpServletTest.java"
        ]
    },
    "groovy_2211af5": {
        "bug_id": "groovy_2211af5",
        "commit": "https://github.com/apache/groovy/commit/2211af50cd83dc7444c3db0b3df135cf9657f1bf",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/groovy/blob/2211af50cd83dc7444c3db0b3df135cf9657f1bf/src/main/org/codehaus/groovy/transform/MemoizedASTTransformation.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/MemoizedASTTransformation.java?ref=2211af50cd83dc7444c3db0b3df135cf9657f1bf",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/transform/MemoizedASTTransformation.java",
                "patch": "@@ -25,6 +25,7 @@\n import org.codehaus.groovy.ast.ClassHelper;\n import org.codehaus.groovy.ast.ClassNode;\n import org.codehaus.groovy.ast.FieldNode;\n+import org.codehaus.groovy.ast.InnerClassNode;\n import org.codehaus.groovy.ast.MethodNode;\n import org.codehaus.groovy.ast.Parameter;\n import org.codehaus.groovy.ast.expr.ClosureExpression;\n@@ -109,7 +110,11 @@ public void visit(ASTNode[] nodes, final SourceUnit source) {\n             newCode.addStatement(returnS(closureCallExpression));\n             methodNode.setCode(newCode);\n             VariableScopeVisitor visitor = new VariableScopeVisitor(source);\n-            visitor.visitClass(ownerClassNode);\n+            if (ownerClassNode instanceof InnerClassNode) {\n+                visitor.visitClass(((InnerClassNode) ownerClassNode).getOuterMostClass());\n+            } else {\n+                visitor.visitClass(ownerClassNode);\n+            }\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/2211af50cd83dc7444c3db0b3df135cf9657f1bf/src/main/org/codehaus/groovy/transform/MemoizedASTTransformation.java",
                "sha": "2769a33dd78bbc34e358fe0cf077d015f8f40f96",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/groovy/blob/2211af50cd83dc7444c3db0b3df135cf9657f1bf/src/test/org/codehaus/groovy/transform/MemoizedASTTransformationTest.groovy",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/transform/MemoizedASTTransformationTest.groovy?ref=2211af50cd83dc7444c3db0b3df135cf9657f1bf",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/transform/MemoizedASTTransformationTest.groovy",
                "patch": "@@ -193,6 +193,18 @@ class MemoizedASTTransformationTest extends GroovyTestCase {\n         assertEquals(MemoizedTestClass.privateStaticMethodWithParams(20, 5), 15)\n         assertEquals(MemoizedTestClass.privateStaticMethodWithParamsCounter, 3)\n     }\n+\n+    void testMemoizedAIC_Groovy8043() {\n+        assertScript '''\n+            class A {}\n+            assert new A() {\n+                @groovy.transform.Memoized()\n+                String a() {\n+                    return \"a\"\n+                }\n+            }.a() == 'a'\n+        '''\n+    }\n }\n \n class MemoizedTestClass2 {",
                "raw_url": "https://github.com/apache/groovy/raw/2211af50cd83dc7444c3db0b3df135cf9657f1bf/src/test/org/codehaus/groovy/transform/MemoizedASTTransformationTest.groovy",
                "sha": "77e3f619e4da4d6f3e5deee8a5295d7fe6420f2c",
                "status": "modified"
            }
        ],
        "message": "GROOVY-8043: NPE compiling Memoized method with AIC (closes #511)",
        "parent": "https://github.com/apache/groovy/commit/97d8c9ebd1608f2f93b8914971913ffe801809ba",
        "patched_files": [
            "MemoizedASTTransformation.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "MemoizedASTTransformationTest.java"
        ]
    },
    "groovy_22374de": {
        "bug_id": "groovy_22374de",
        "commit": "https://github.com/apache/groovy/commit/22374defd137d3deeef9f88afe15480590f26939",
        "file": [
            {
                "additions": 66,
                "blob_url": "https://github.com/apache/groovy/blob/22374defd137d3deeef9f88afe15480590f26939/src/main/groovy/xml/MarkupBuilder.java",
                "changes": 79,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/xml/MarkupBuilder.java?ref=22374defd137d3deeef9f88afe15480590f26939",
                "deletions": 13,
                "filename": "src/main/groovy/xml/MarkupBuilder.java",
                "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2003-2007 the original author or authors.\n+ * Copyright 2003-2008 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -25,10 +25,11 @@\n \n /**\n  * A helper class for creating XML or HTML markup\n- * \n+ *\n  * @author <a href=\"mailto:james@coredevelopers.net\">James Strachan</a>\n  * @author Stefan Matthias Aust\n  * @author <a href=\"mailto:scottstirling@rcn.com\">Scott Stirling</a>\n+ * @author Paul King\n  * @version $Revision$\n  */\n public class MarkupBuilder extends BuilderSupport {\n@@ -37,6 +38,8 @@\n     private int state;\n     private boolean nodeIsEmpty = true;\n     private boolean useDoubleQuotes = false;\n+    private boolean omitNullAttributes = true;\n+    private boolean omitEmptyAttributes = false;\n \n     public MarkupBuilder() {\n         this(new IndentPrinter());\n@@ -74,6 +77,50 @@ public void setDoubleQuotes(boolean useDoubleQuotes) {\n         this.useDoubleQuotes = useDoubleQuotes;\n     }\n \n+    /**\n+     * Determine whether null attributes will appear in the produced markup.\n+     *\n+     * @return <code>true</code>, if null attributes will be\n+     * removed from the resulting markup.\n+     */\n+    public boolean isOmitNullAttributes() {\n+        return omitNullAttributes;\n+    }\n+\n+    /**\n+     * Allows null attributes to be removed the produced markup.\n+     *\n+     * @param omitNullAttributes if <code>true</code>, null\n+     * attributes will not be included in the resulting markup.\n+     * If <code>false</code> null attributes will be included in the\n+     * markup as empty strings regardless of the omitEmptyAttribute\n+     * setting. Defaults to <code>true</code>.\n+     */\n+    public void setOmitNullAttributes(boolean omitNullAttributes) {\n+        this.omitNullAttributes = omitNullAttributes;\n+    }\n+\n+    /**\n+     * Determine whether empty attributes will appear in the produced markup.\n+     *\n+     * @return <code>true</code>, if empty attributes will be\n+     * removed from the resulting markup.\n+     */\n+    public boolean isOmitEmptyAttributes() {\n+        return omitEmptyAttributes;\n+    }\n+\n+    /**\n+     * Allows empty attributes to be removed the produced markup.\n+     *\n+     * @param omitEmptyAttributes if <code>true</code>, empty\n+     * attributes will not be included in the resulting markup.\n+     * Defaults to <code>false</code>.\n+     */\n+    public void setOmitEmptyAttributes(boolean omitEmptyAttributes) {\n+        this.omitEmptyAttributes = omitEmptyAttributes;\n+    }\n+\n     protected IndentPrinter getPrinter() {\n         return this.out;\n     }\n@@ -113,30 +160,36 @@ protected Object createNode(Object name) {\n     }\n \n     protected Object createNode(Object name, Object value) {\n-        toState(2, name);\n-        this.nodeIsEmpty = false;\n-        out.print(\">\");\n-        out.print(escapeElementContent(value.toString()));\n-        return name;\n+        if (value == null){\n+            return createNode(name);\n+        } else {\n+            toState(2, name);\n+            this.nodeIsEmpty = false;\n+            out.print(\">\");\n+            out.print(escapeElementContent(value.toString()));\n+            return name;\n+        }\n     }\n \n     protected Object createNode(Object name, Map attributes, Object value) {\n         toState(1, name);\n         for (Iterator iter = attributes.entrySet().iterator(); iter.hasNext();) {\n             Map.Entry entry = (Map.Entry) iter.next();\n             Object attributeValue = entry.getValue();\n-            if (attributeValue != null) {\n+            boolean skipNull = attributeValue == null && omitNullAttributes;\n+            boolean skipEmpty = attributeValue != null && omitEmptyAttributes &&\n+                    attributeValue.toString().length() == 0;\n+            if (!skipNull && !skipEmpty) {\n                 out.print(\" \");\n                 // Output the attribute name,\n                 print(entry.getKey().toString());\n                 // Output the attribute value within quotes. Use whichever\n                 // type of quotes are currently configured.\n                 out.print(this.useDoubleQuotes ? \"=\\\"\" : \"='\");\n-                print(escapeAttributeValue(attributeValue.toString()));\n+                print(attributeValue == null ? \"\" : escapeAttributeValue(attributeValue.toString()));\n                 out.print(this.useDoubleQuotes ? \"\\\"\" : \"'\");\n             }\n         }\n-\n         if (value != null) {\n             yield(value.toString());\n         } else {\n@@ -149,7 +202,7 @@ protected Object createNode(Object name, Map attributes, Object value) {\n     protected Object createNode(Object name, Map attributes) {\n         return createNode(name, attributes, null);\n     }\n-    \n+\n     protected void nodeCompleted(Object parent, Object node) {\n         toState(3, node);\n         out.flush();\n@@ -165,15 +218,15 @@ protected Object getName(String methodName) {\n \n     /**\n      * Returns a String with special XML characters escaped as entities so that\n-     * output XML is valid. Escapes the following characters as corresponding \n+     * output XML is valid. Escapes the following characters as corresponding\n      * entities:\n      * <ul>\n      *   <li>\\' as &amp;apos;</li>\n      *   <li>&amp; as &amp;amp;</li>\n      *   <li>&lt; as &amp;lt;</li>\n      *   <li>&gt; as &amp;gt;</li>\n      * </ul>\n-     * \n+     *\n      * @param value to be searched and replaced for XML special characters.\n      * @return value with XML characters escaped\n      * @deprecated",
                "raw_url": "https://github.com/apache/groovy/raw/22374defd137d3deeef9f88afe15480590f26939/src/main/groovy/xml/MarkupBuilder.java",
                "sha": "36c3ad9ef77db5062187223e5b9c84b76b897d68",
                "status": "modified"
            },
            {
                "additions": 45,
                "blob_url": "https://github.com/apache/groovy/blob/22374defd137d3deeef9f88afe15480590f26939/src/test/groovy/xml/MarkupBuilderTest.groovy",
                "changes": 50,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/xml/MarkupBuilderTest.groovy?ref=22374defd137d3deeef9f88afe15480590f26939",
                "deletions": 5,
                "filename": "src/test/groovy/xml/MarkupBuilderTest.groovy",
                "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2003-2007 the original author or authors.\n+ * Copyright 2003-2008 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -173,6 +173,14 @@ class MarkupBuilderTest extends GroovyTestCase {\n   <element attr='value 1 &amp; 2'>chars: &amp; &lt; &gt; \" in middle</element>\n   <greaterthan>&gt;</greaterthan>\n   <emptyElement />\n+  <null />\n+  <nullAttribute />\n+  <emptyWithAttributes attr1='set' />\n+  <emptyAttribute t1='' />\n+  <parent key='value'>\n+    <label for='usernameId'>Username: </label>\n+    <input name='test' id='1' />\n+  </parent>\n </chars>'''\n \n         // Generate the markup.\n@@ -184,6 +192,14 @@ class MarkupBuilderTest extends GroovyTestCase {\n             element(attr: \"value 1 & 2\", \"chars: & < > \\\" in middle\")\n             greaterthan(\">\")\n             emptyElement()\n+            'null'(null)\n+            nullAttribute(t1:null)\n+            emptyWithAttributes(attr1:'set')\n+            emptyAttribute(t1:'')\n+            parent(key:'value'){\n+                label(for:'usernameId', 'Username: ')\n+                input(name:'test', id:1)\n+            }\n         }\n \n         assertEquals(expectedXml, fixEOLs(writer.toString()))\n@@ -288,17 +304,41 @@ require escaping. The other characters consist of:\n         assertExpectedXml('''\\\n <p><em>Usually</em> Hearts &amp; Diamonds <b>beats</b> Spades &amp; Clubs </p>''')\n     }\n-    \n+\n     void testCallingMethod() {\n        // this test is to ensure compatiblity only\n-       xml.p { \n+       xml.p {\n          def aValue = myMethod([:]).value\n          em(aValue)\n       }\n-      \n+\n       assertExpectedXml('<p><em>call to outside</em></p>')\n     }\n-    \n+\n+    void testOmitAttributeSettingsOmitNullKeepEmptyDefaultCase() {\n+        xml.element(att1:null, att2:'')\n+        assertExpectedXml(\"<element att2='' />\")\n+    }\n+\n+    void testOmitAttributeSettingsKeepBoth() {\n+        xml.omitNullAttributes = false\n+        xml.element(att1:null, att2:'')\n+        assertExpectedXml(\"<element att1='' att2='' />\")\n+    }\n+\n+    void testOmitAttributeSettingsKeepNullOmitEmpty() {\n+        xml.omitNullAttributes = false\n+        xml.omitEmptyAttributes = true\n+        xml.element(att1:null, att2:'')\n+        assertExpectedXml(\"<element att1='' />\")\n+    }\n+\n+    void testOmitAttributeSettingsKeepNeither() {\n+        xml.omitEmptyAttributes = true\n+        xml.element(att1:null, att2:'')\n+        assertExpectedXml(\"<element />\")\n+    }\n+\n     private myMethod(x) {\n       x.value='call to outside'\n       return x",
                "raw_url": "https://github.com/apache/groovy/raw/22374defd137d3deeef9f88afe15480590f26939/src/test/groovy/xml/MarkupBuilderTest.groovy",
                "sha": "75718a069283286103368f9252da598886263071",
                "status": "modified"
            }
        ],
        "message": "GROOVY-1684: MarkupBuilder throws NPE if element content or attribute values are null\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@10364 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/70e3577a15fbc28f1b23de244af85db9370db9b2",
        "patched_files": [
            "MarkupBuilder.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "MarkupBuilderTest.java"
        ]
    },
    "groovy_257b914": {
        "bug_id": "groovy_257b914",
        "commit": "https://github.com/apache/groovy/commit/257b9147034ce8b088a2b7294c43f5ba169eaa74",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/groovy/blob/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/main/org/codehaus/groovy/ast/expr/MethodCallExpression.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/ast/expr/MethodCallExpression.java?ref=257b9147034ce8b088a2b7294c43f5ba169eaa74",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/ast/expr/MethodCallExpression.java",
                "patch": "@@ -58,6 +58,7 @@\n     private Expression objectExpression;\n     private String method;\n     private Expression arguments;\n+    private boolean safe;\n     \n     public MethodCallExpression(Expression objectExpression, String method, Expression arguments) {\n         this.objectExpression = objectExpression;\n@@ -85,6 +86,18 @@ public String getText() {\n         return objectExpression.getText() + \".\" + method + arguments.getText();\n     }\n \n+    /**\n+     * @return is this a safe method call, i.e. if true then if the source object is null\n+     * then this method call will return null rather than throwing a null pointer exception\n+     */\n+    public boolean isSafe() {\n+        return safe;\n+    }\n+\n+    public void setSafe(boolean safe) {\n+        this.safe = safe;\n+    }\n+\n     public String toString() {\n         return super.toString() + \"[object: \" + objectExpression + \" method: \" + method + \" arguments: \" + arguments + \"]\";\n     }",
                "raw_url": "https://github.com/apache/groovy/raw/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/main/org/codehaus/groovy/ast/expr/MethodCallExpression.java",
                "sha": "e996bce2de9c6cecec0f82036f7369ddbb517f67",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/groovy/blob/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/main/org/codehaus/groovy/ast/expr/PropertyExpression.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/ast/expr/PropertyExpression.java?ref=257b9147034ce8b088a2b7294c43f5ba169eaa74",
                "deletions": 2,
                "filename": "src/main/org/codehaus/groovy/ast/expr/PropertyExpression.java",
                "patch": "@@ -57,12 +57,18 @@\n \n     private Expression objectExpression;\n     private String property;\n-    \n+    private boolean safe;\n+\n     public PropertyExpression(Expression objectExpression, String property) {\n+        this(objectExpression, property, false);\n+    }\n+\n+    public PropertyExpression(Expression objectExpression, String property, boolean safe) {\n         this.objectExpression = objectExpression;\n         this.property = property;\n+        this.safe = safe;\n     }\n-    \n+\n     public void visit(GroovyCodeVisitor visitor) {\n         visitor.visitPropertyExpression(this);\n     }\n@@ -79,6 +85,14 @@ public String getText() {\n         return objectExpression.getText() + \".\" + property;\n     }\n \n+    /**\n+     * @return is this a safe navigation, i.e. if true then if the source object is null\n+     * then this navigation will return null\n+     */\n+    public boolean isSafe() {\n+        return safe;\n+    }\n+\n     public String toString() {\n         return super.toString() + \"[object: \" + objectExpression + \" property: \" + property + \"]\";\n     }",
                "raw_url": "https://github.com/apache/groovy/raw/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/main/org/codehaus/groovy/ast/expr/PropertyExpression.java",
                "sha": "8be786f229f5fe647b5a6518489a9b133f12ae6e",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/groovy/blob/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/main/org/codehaus/groovy/classgen/ClassGenerator.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/classgen/ClassGenerator.java?ref=257b9147034ce8b088a2b7294c43f5ba169eaa74",
                "deletions": 7,
                "filename": "src/main/org/codehaus/groovy/classgen/ClassGenerator.java",
                "patch": "@@ -138,12 +138,15 @@\n \n     // cached values\n     MethodCaller invokeMethodMethod = MethodCaller.newStatic(InvokerHelper.class, \"invokeMethod\");\n+    MethodCaller invokeMethodSafeMethod = MethodCaller.newStatic(InvokerHelper.class, \"invokeMethodSafe\");\n     MethodCaller invokeStaticMethodMethod = MethodCaller.newStatic(InvokerHelper.class, \"invokeStaticMethod\");\n     MethodCaller invokeConstructorMethod = MethodCaller.newStatic(InvokerHelper.class, \"invokeConstructor\");\n     MethodCaller invokeClosureMethod = MethodCaller.newStatic(InvokerHelper.class, \"invokeClosure\");\n     MethodCaller getPropertyMethod = MethodCaller.newStatic(InvokerHelper.class, \"getProperty\");\n+    MethodCaller getPropertySafeMethod = MethodCaller.newStatic(InvokerHelper.class, \"getPropertySafe\");\n     MethodCaller setPropertyMethod = MethodCaller.newStatic(InvokerHelper.class, \"setProperty\");\n     MethodCaller setPropertyMethod2 = MethodCaller.newStatic(InvokerHelper.class, \"setProperty2\");\n+    MethodCaller setPropertySafeMethod2 = MethodCaller.newStatic(InvokerHelper.class, \"setPropertySafe2\");\n     MethodCaller asIteratorMethod = MethodCaller.newStatic(InvokerHelper.class, \"asIterator\");\n     MethodCaller asBool = MethodCaller.newStatic(InvokerHelper.class, \"asBool\");\n     MethodCaller notBoolean = MethodCaller.newStatic(InvokerHelper.class, \"notBoolean\");\n@@ -600,7 +603,7 @@ public void visitTryCatchFinally(TryCatchStatement statement) {\n \n         //final String exceptionTypeInternalName = (catchStatement != null) ? getTypeDescription(exceptionType) : null;\n         final String exceptionTypeInternalName = (catchStatement != null) ? getClassInternalName(exceptionType) : null;\n-        \n+\n         exceptionBlocks.add(new Runnable() {\n             public void run() {\n                 cv.visitTryCatchBlock(l0, l1, l5, exceptionTypeInternalName);\n@@ -1097,7 +1100,13 @@ else if (size == 1) {\n                     arguments.visit(this);\n                 }\n \n-                invokeMethodMethod.call(cv);\n+                if (call.isSafe()) {\n+                    invokeMethodSafeMethod.call(cv);\n+\n+                }\n+                else {\n+                    invokeMethodMethod.call(cv);\n+                }\n             }\n         }\n     }\n@@ -1163,14 +1172,22 @@ public void visitPropertyExpression(PropertyExpression expression) {\n \n         cv.visitLdcInsn(expression.getProperty());\n \n-        if (left) {\n-            setPropertyMethod2.call(cv);\n+        if (expression.isSafe()) {\n+            if (left) {\n+                setPropertySafeMethod2.call(cv);\n+            }\n+            else {\n+                getPropertySafeMethod.call(cv);\n+            }\n         }\n         else {\n-            getPropertyMethod.call(cv);\n+            if (left) {\n+                setPropertyMethod2.call(cv);\n+            }\n+            else {\n+                getPropertyMethod.call(cv);\n+            }\n         }\n-\n-        //cv.visitInsn(POP);\n     }\n \n     public void visitFieldExpression(FieldExpression expression) {",
                "raw_url": "https://github.com/apache/groovy/raw/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/main/org/codehaus/groovy/classgen/ClassGenerator.java",
                "sha": "caddab8ea01d2f0074b6b9ee56c6624f856eefd1",
                "status": "modified"
            },
            {
                "additions": 56,
                "blob_url": "https://github.com/apache/groovy/blob/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/main/org/codehaus/groovy/runtime/InvokerHelper.java",
                "changes": 91,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/InvokerHelper.java?ref=257b9147034ce8b088a2b7294c43f5ba169eaa74",
                "deletions": 35,
                "filename": "src/main/org/codehaus/groovy/runtime/InvokerHelper.java",
                "patch": "@@ -71,7 +71,7 @@\n public class InvokerHelper {\n     public static final Object[] EMPTY_ARGS = {\n     };\n-    \n+\n     private static final Invoker singleton = new Invoker();\n \n     public static MetaClass getMetaClass(Object object) {\n@@ -86,6 +86,13 @@ public static Object invokeMethod(Object object, String methodName, Object argum\n         return getInstance().invokeMethod(object, methodName, arguments);\n     }\n \n+    public static Object invokeMethodSafe(Object object, String methodName, Object arguments) {\n+        if (object != null) {\n+            return getInstance().invokeMethod(object, methodName, arguments);\n+        }\n+        return null;\n+    }\n+\n     public static Object invokeStaticMethod(String type, String methodName, Object arguments) {\n         return getInstance().invokeStaticMethod(type, methodName, arguments);\n     }\n@@ -118,24 +125,37 @@ public static String toString(Object arguments) {\n         return getInstance().toString(arguments);\n     }\n \n+    public static Object getProperty(Object object, String property) {\n+        return getInstance().getProperty(object, property);\n+    }\n+\n+    public static Object getPropertySafe(Object object, String property) {\n+        if (object != null) {\n+            return getInstance().getProperty(object, property);\n+        }\n+        return null;\n+    }\n+\n     public static void setProperty(Object object, String property, Object newValue) {\n         getInstance().setProperty(object, property, newValue);\n     }\n \n-\t/**\n-\t * This is so we don't have to reorder the stack when we call this method.\n-\t * At some point a better name might be in order.\n-\t * \n-\t * @param newValue\n-\t * @param object\n-\t * @param property\n-\t */\n-\tpublic static void setProperty2(Object newValue, Object object, String property) {\n-\t\tgetInstance().setProperty(object, property, newValue);\n-\t}\n+    /**\n+     * This is so we don't have to reorder the stack when we call this method.\n+     * At some point a better name might be in order.\n+     */\n+    public static void setProperty2(Object newValue, Object object, String property) {\n+        getInstance().setProperty(object, property, newValue);\n+    }\n \n-\tpublic static Object getProperty(Object object, String property) {\n-        return getInstance().getProperty(object, property);\n+    /**\n+     * This is so we don't have to reorder the stack when we call this method.\n+     * At some point a better name might be in order.\n+     */\n+    public static void setPropertySafe2(Object newValue, Object object, String property) {\n+        if (object != null) {\n+            setProperty2(newValue, object, property);\n+        }\n     }\n \n     public static boolean asBool(Object object) {\n@@ -144,31 +164,30 @@ public static boolean asBool(Object object) {\n             return booleanValue.booleanValue();\n         }\n         else if (object instanceof Matcher) {\n-        \tMatcher matcher = (Matcher) object;\n-        \treturn matcher.find();\n+            Matcher matcher = (Matcher) object;\n+            return matcher.find();\n         }\n         else if (object instanceof Collection) {\n-        \tCollection collection = (Collection) object;\n-        \treturn !collection.isEmpty();\n+            Collection collection = (Collection) object;\n+            return !collection.isEmpty();\n         }\n         else if (object instanceof String) {\n             String text = (String) object;\n             return text.equalsIgnoreCase(\"true\");\n         }\n-        throw new InvokerException(object.getClass().getName() +\n-        \t\t\t\t\t\t   \"(\" + object + \") cannot be converted to a boolean.\");\n+        throw new InvokerException(object.getClass().getName() + \"(\" + object + \") cannot be converted to a boolean.\");\n+    }\n+\n+    public static boolean notObject(Object object) {\n+        return !asBool(object);\n     }\n \n-\tpublic static boolean notObject(Object object) {\n-\t\treturn !asBool(object);\n-\t}\n+    public static boolean notBoolean(boolean bool) {\n+        return !bool;\n+    }\n \n-\tpublic static boolean notBoolean(boolean bool) {\n-\t\treturn !bool;\n-\t}\n-\t\n     public static boolean isCase(Object switchValue, Object caseExpression) {\n-        return asBool(invokeMethod(caseExpression, \"isCase\", new Object[] { switchValue}));\n+        return asBool(invokeMethod(caseExpression, \"isCase\", new Object[] { switchValue }));\n     }\n \n     public static boolean compareIdentical(Object left, Object right) {\n@@ -178,17 +197,17 @@ public static boolean compareIdentical(Object left, Object right) {\n     public static boolean compareEqual(Object left, Object right) {\n         return getInstance().objectsEqual(left, right);\n     }\n-    \n+\n     public static Matcher findRegex(Object left, Object right) {\n-    \treturn getInstance().objectFindRegex(left, right);\n+        return getInstance().objectFindRegex(left, right);\n     }\n \n     public static boolean matchRegex(Object left, Object right) {\n-    \treturn getInstance().objectMatchRegex(left, right);\n+        return getInstance().objectMatchRegex(left, right);\n     }\n-    \n+\n     public static Pattern regexPattern(String regex) {\n-    \treturn getInstance().regexPattern(regex);\n+        return getInstance().regexPattern(regex);\n     }\n \n     public static boolean compareNotEqual(Object left, Object right) {\n@@ -251,7 +270,7 @@ public static void assertFailed(Object expression, Object message) {\n             throw new AssertionError(\"\" + message + \". Expression: \" + expression);\n         }\n     }\n-    \n+\n     public static Object runScript(Class scriptClass, String[] args) {\n         ScriptContext context = new ScriptContext(args);\n         Script script = createScript(scriptClass, context);\n@@ -264,7 +283,9 @@ public static Script createScript(Class scriptClass, ScriptContext context) {\n             return (Script) constructor.newInstance(new Object[] { context });\n         }\n         catch (Exception e) {\n-            throw new InvokerException(\"Failed to create Script instance for class: \" + scriptClass + \". Reason: \" + e, e);\n+            throw new InvokerException(\n+                \"Failed to create Script instance for class: \" + scriptClass + \". Reason: \" + e,\n+                e);\n         }\n     }\n }",
                "raw_url": "https://github.com/apache/groovy/raw/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/main/org/codehaus/groovy/runtime/InvokerHelper.java",
                "sha": "0a665d6179a72f95fa6a4c5283d1bb9b23b51403",
                "status": "modified"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/groovy/blob/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/main/org/codehaus/groovy/syntax/parser/ASTBuilder.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/syntax/parser/ASTBuilder.java?ref=257b9147034ce8b088a2b7294c43f5ba169eaa74",
                "deletions": 4,
                "filename": "src/main/org/codehaus/groovy/syntax/parser/ASTBuilder.java",
                "patch": "@@ -777,6 +777,10 @@ protected Expression expression(CSTNode expressionRoot) throws ParserException\n             {\n                 return propertyExpression( expressionRoot );\n             }\n+            case ( Token.NAVIGATE ):\n+            {\n+                return safePropertyExpression( expressionRoot );\n+            }\n             case ( Token.SYNTH_LIST ):\n             {\n                 return listExpression( expressionRoot );\n@@ -888,9 +892,17 @@ protected MethodCallExpression methodCallExpression(CSTNode expressionRoot) thro\n \n         Expression paramList = actualParameterList( expressionRoot.getChild( 2 ) );\n \n-        return new MethodCallExpression( objectExpression,\n-                                         methodName,\n-                                         paramList );\n+        MethodCallExpression answer = new MethodCallExpression(objectExpression, methodName, paramList);\n+        \n+        if (expressionRoot.getChildren().length > 3) \n+        {\n+            CSTNode notExpr = expressionRoot.getChild(3);\n+            if (notExpr != null && notExpr.getToken().getType() == Token.NAVIGATE) \n+            {\n+                answer.setSafe(true);\n+            }\n+        }\n+        return answer;\n     }\n \n     protected Expression actualParameterList(CSTNode paramRoot) throws ParserException\n@@ -1027,7 +1039,17 @@ protected Expression propertyExpression(CSTNode expressionRoot) throws ParserExc\n         String propertyName = expressionRoot.getChild( 1 ).getToken().getText();\n \n         return new PropertyExpression ( objectExpression,\n-                                        propertyName );\n+                propertyName );\n+    }\n+\n+    protected Expression safePropertyExpression(CSTNode expressionRoot) throws ParserException\n+    {\n+        Expression objectExpression = expression( expressionRoot.getChild( 0 ) );\n+\n+        String propertyName = expressionRoot.getChild( 1 ).getToken().getText();\n+\n+        return new PropertyExpression ( objectExpression,\n+                propertyName, true );\n     }\n \n     protected Expression variableOrClassExpression(CSTNode expressionRoot)",
                "raw_url": "https://github.com/apache/groovy/raw/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/main/org/codehaus/groovy/syntax/parser/ASTBuilder.java",
                "sha": "3a1c6fb6ede5d3aa6d2706d2d062826904dd5ccf",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/groovy/blob/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/main/org/codehaus/groovy/syntax/parser/Parser.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/syntax/parser/Parser.java?ref=257b9147034ce8b088a2b7294c43f5ba169eaa74",
                "deletions": 6,
                "filename": "src/main/org/codehaus/groovy/syntax/parser/Parser.java",
                "patch": "@@ -1271,7 +1271,7 @@ protected CSTNode primaryExpression()\n             {\n                 CSTNode replacementExpr = new CSTNode();\n                 CSTNode resultExpr      = sugaryMethodCallExpression( replacementExpr,\n-                                                                      identifier );\n+                                                                      identifier, null );\n                 if ( resultExpr != replacementExpr )\n                 {\n                     expr = resultExpr;\n@@ -1280,18 +1280,18 @@ protected CSTNode primaryExpression()\n             else\n             {\n                 expr = sugaryMethodCallExpression( expr,\n-                                                   identifier );\n+                                                   identifier, null );\n             }\n         }\n \n       DOT_LOOP:\n-        while ( lt() == Token.DOT\n+        while ( (lt() == Token.DOT || lt() == Token.NAVIGATE)\n                 &&\n                 ( lt( 2 ) == Token.IDENTIFIER\n                   ||\n                   lt( 2 ) == Token.KEYWORD_CLASS ) )\n         {\n-            CSTNode dotExpr = rootNode( Token.DOT );\n+            CSTNode dotExpr = rootNode( lt() );\n \n             identifier = rootNode( lt() );\n             \n@@ -1302,7 +1302,7 @@ protected CSTNode primaryExpression()\n                 case ( Token.LEFT_CURLY_BRACE ):\n                 {\n                     expr = sugaryMethodCallExpression( expr,\n-                                                       identifier );\n+                                                       identifier, dotExpr );\n                     break DOT_TYPE_SWITCH;\n                 }\n                 default:\n@@ -1319,7 +1319,7 @@ protected CSTNode primaryExpression()\n     }\n \n     protected CSTNode sugaryMethodCallExpression(CSTNode expr,\n-                                                 CSTNode identifier)\n+                                                 CSTNode identifier, CSTNode dotExpr)\n         throws IOException,SyntaxException\n     {\n         CSTNode methodExpr = null;\n@@ -1353,6 +1353,10 @@ protected CSTNode sugaryMethodCallExpression(CSTNode expr,\n         if ( methodExpr != null )\n         {\n             expr = methodExpr;\n+            if (dotExpr != null) \n+            {    \n+                expr.addChild(dotExpr);\n+            }\n         }\n \n         return expr;",
                "raw_url": "https://github.com/apache/groovy/raw/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/main/org/codehaus/groovy/syntax/parser/Parser.java",
                "sha": "3cf1f00eb0593b841278c21b3baae05cb8e10688",
                "status": "modified"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/groovy/blob/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/test/groovy/SafeNavigationTest.groovy",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/SafeNavigationTest.groovy?ref=257b9147034ce8b088a2b7294c43f5ba169eaa74",
                "deletions": 0,
                "filename": "src/test/groovy/SafeNavigationTest.groovy",
                "patch": "@@ -0,0 +1,36 @@\n+class SafeNavigationTest extends GroovyTestCase {\n+\n+    void testNormalPropertyNavigation() {\n+        x = ['foo':['bar':123, 'x':456], 'z':99]\n+        \n+        y = x->foo->bar\n+        \n+        println(\"found y ${x->foo->bar}\")\n+        \n+        assert y == 123\n+    }\n+\n+    void testNullPropertyNavigation() {\n+        x = null\n+        \n+\t\ty = x->foo->bar\n+        \n+        assert y == null\n+    }\n+    \n+    void testNormalMethodCall() {\n+        x = 1234\n+        \n+        y = x->toString()\n+        \n+        assert y == \"1234\"\n+    }\n+\n+    void testNullMethodCall() {\n+        x = null\n+        \n+        y = x->toString()\n+        \n+        assert y == null\n+    }\n+}",
                "raw_url": "https://github.com/apache/groovy/raw/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/test/groovy/SafeNavigationTest.groovy",
                "sha": "ba9a8ece99d47fa42a9864406de3b229699f81e9",
                "status": "added"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/groovy/blob/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/test/org/codehaus/groovy/syntax/parser/ParserTest.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/syntax/parser/ParserTest.java?ref=257b9147034ce8b088a2b7294c43f5ba169eaa74",
                "deletions": 1,
                "filename": "src/test/org/codehaus/groovy/syntax/parser/ParserTest.java",
                "patch": "@@ -1329,13 +1329,23 @@ public void testConsumeUntil_NotFound()\n     }\n \n     public void testAssignmentExpression()\n-        throws Exception\n+    throws Exception\n     {\n         Parser parser = newParser( \"answer = list.collect( { item | return item * 2 } )\" );\n \n         CSTNode root = parser.expression();\n     }\n \n+    public void testSafeMethodCallExpression()\n+    throws Exception\n+    {\n+        Parser parser = newParser( \"answer = foo->someMethod()\" );\n+\n+        CSTNode root = parser.expression();\n+        \n+        System.out.println(\"Got: \" + root );\n+    }\n+\n     public void testLogicalAndExpression()\n         throws Exception\n     {",
                "raw_url": "https://github.com/apache/groovy/raw/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/test/org/codehaus/groovy/syntax/parser/ParserTest.java",
                "sha": "35876cefc56175ab7af09c1f0e250fb57c6df5b1",
                "status": "modified"
            }
        ],
        "message": "Added support for 'safe navigation' which allows navigation & method calls on null objects without throwing NullPointerExceptions.\n\ne.g.\n\na = null\nb = a->foo->bar->someMethod()\nassert b == null\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@386 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/771d7cf29ae38ebd635cc431aa2a0d0c61c4c636",
        "patched_files": [
            "PropertyExpression.java",
            "Parser.java",
            "ClassGenerator.java",
            "MethodCallExpression.java",
            "InvokerHelper.java",
            "ASTBuilder.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "ParserTest.java",
            "SafeNavigationTest.java",
            "ASTBuilderTest.java"
        ]
    },
    "groovy_2dab24c": {
        "bug_id": "groovy_2dab24c",
        "commit": "https://github.com/apache/groovy/commit/2dab24c5b82be0196e0ad9c4a4dbd292f32ab1e9",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/groovy/blob/2dab24c5b82be0196e0ad9c4a4dbd292f32ab1e9/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java?ref=2dab24c5b82be0196e0ad9c4a4dbd292f32ab1e9",
                "deletions": 4,
                "filename": "src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java",
                "patch": "@@ -1,11 +1,11 @@\n /*\n- * Copyright 2003-2010 the original author or authors.\n+ * Copyright 2003-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -539,6 +539,10 @@ public static boolean checkCompatibleAssignmentTypes(ClassNode left, ClassNode r\n     }\n \n     public static boolean checkCompatibleAssignmentTypes(ClassNode left, ClassNode right, Expression rightExpression) {\n+        return checkCompatibleAssignmentTypes(left, right, rightExpression, true);\n+    }\n+\n+    public static boolean checkCompatibleAssignmentTypes(ClassNode left, ClassNode right, Expression rightExpression, boolean allowConstructorCoercion) {\n         ClassNode leftRedirect = left.redirect();\n         ClassNode rightRedirect = right.redirect();\n \n@@ -588,11 +592,11 @@ public static boolean checkCompatibleAssignmentTypes(ClassNode left, ClassNode r\n \n         // if right is array, map or collection we try invoking the\n         // constructor\n-        if (rightRedirect.implementsInterface(MAP_TYPE) ||\n+        if (allowConstructorCoercion && (rightRedirect.implementsInterface(MAP_TYPE) ||\n                 rightRedirect.implementsInterface(Collection_TYPE) ||\n                 rightRedirect.equals(MAP_TYPE) ||\n                 rightRedirect.equals(Collection_TYPE) ||\n-                rightRedirect.isArray()) {\n+                rightRedirect.isArray())) {\n             //TODO: in case of the array we could maybe make a partial check\n             if (leftRedirect.isArray() && rightRedirect.isArray()) {\n                 return checkCompatibleAssignmentTypes(leftRedirect.getComponentType(), rightRedirect.getComponentType());",
                "raw_url": "https://github.com/apache/groovy/raw/2dab24c5b82be0196e0ad9c4a4dbd292f32ab1e9/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java",
                "sha": "634a007c55df3aa8a65277b0a717fc50ff0fb571",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/groovy/blob/2dab24c5b82be0196e0ad9c4a4dbd292f32ab1e9/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java?ref=2dab24c5b82be0196e0ad9c4a4dbd292f32ab1e9",
                "deletions": 9,
                "filename": "src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "patch": "@@ -1346,7 +1346,7 @@ protected ClassNode checkReturnType(final ReturnStatement statement) {\n             if (!enclosingMethod.isVoidMethod()\n                     && !type.equals(void_WRAPPER_TYPE)\n                     && !type.equals(VOID_TYPE)\n-                    && !checkCompatibleAssignmentTypes(enclosingMethod.getReturnType(), type)\n+                    && !checkCompatibleAssignmentTypes(enclosingMethod.getReturnType(), type, null, false)\n                     && !(isNullConstant(expression))) {\n                 addStaticTypeError(\"Cannot return value of type \" + type.toString(false) + \" on method returning type \" + enclosingMethod.getReturnType().toString(false), expression);\n             } else if (!enclosingMethod.isVoidMethod()) {\n@@ -3107,7 +3107,7 @@ protected ClassNode inferReturnTypeGenerics(final ClassNode receiver, final Meth\n                             resolvedPlaceholders.put(key, new GenericsType(actualType.isArray() ? actualType.getComponentType() : actualType));\n                         }\n                     } else {\n-                        while (!actualType.equals(type)) {\n+                        while (actualType!=null && !actualType.equals(type)) {\n                             Set<ClassNode> interfaces = actualType.getAllInterfaces();\n                             boolean intf = false;\n                             for (ClassNode anInterface : interfaces) {\n@@ -3119,13 +3119,15 @@ protected ClassNode inferReturnTypeGenerics(final ClassNode receiver, final Meth\n                             }\n                             if (!intf) actualType = actualType.getUnresolvedSuperClass();\n                         }\n-                        Map<String, GenericsType> actualTypePlaceholders = GenericsUtils.extractPlaceholders(actualType);\n-                        for (Map.Entry<String, GenericsType> typeEntry : actualTypePlaceholders.entrySet()) {\n-                            String key = typeEntry.getKey();\n-                            GenericsType value = typeEntry.getValue();\n-                            GenericsType alias = typePlaceholders.get(key);\n-                            if (alias != null && alias.isPlaceholder()) {\n-                                resolvedPlaceholders.put(alias.getName(), value);\n+                        if (actualType!=null) {\n+                            Map<String, GenericsType> actualTypePlaceholders = GenericsUtils.extractPlaceholders(actualType);\n+                            for (Map.Entry<String, GenericsType> typeEntry : actualTypePlaceholders.entrySet()) {\n+                                String key = typeEntry.getKey();\n+                                GenericsType value = typeEntry.getValue();\n+                                GenericsType alias = typePlaceholders.get(key);\n+                                if (alias != null && alias.isPlaceholder()) {\n+                                    resolvedPlaceholders.put(alias.getName(), value);\n+                                }\n                             }\n                         }\n                     }",
                "raw_url": "https://github.com/apache/groovy/raw/2dab24c5b82be0196e0ad9c4a4dbd292f32ab1e9/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "sha": "ef267d783327b53e3a7bbc9a3b495b72fee5c4f8",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/groovy/blob/2dab24c5b82be0196e0ad9c4a4dbd292f32ab1e9/src/test/groovy/transform/stc/GenericsSTCTest.groovy",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/transform/stc/GenericsSTCTest.groovy?ref=2dab24c5b82be0196e0ad9c4a4dbd292f32ab1e9",
                "deletions": 2,
                "filename": "src/test/groovy/transform/stc/GenericsSTCTest.groovy",
                "patch": "@@ -1,11 +1,11 @@\n /*\n- * Copyright 2003-2012 the original author or authors.\n+ * Copyright 2003-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -1063,6 +1063,29 @@ class GenericsSTCTest extends StaticTypeCheckingTestCase {\n         '''\n     }\n \n+    // GROOVY-6051\n+    void testGenericsReturnTypeInferenceShouldNotThrowNPE() {\n+        assertScript '''\n+        class Bar {\n+          public static List<Date> bar(List<Date> dummy) {}\n+        }\n+        class Foo extends Bar {\n+            static public Date genericItem() {\n+                @ASTTest(phase=INSTRUCTION_SELECTION, value={\n+                    def inft = node.getNodeMetaData(INFERRED_TYPE)\n+                    assert inft == make(List)\n+                    assert inft.genericsTypes[0].type == make(Date)\n+                })\n+                def res = bar(null)\n+\n+                res[0]\n+            }\n+        }\n+        new Foo()\n+        '''\n+    }\n+\n+\n     static class MyList extends LinkedList<String> {}\n \n     public static class ClassA<T> {",
                "raw_url": "https://github.com/apache/groovy/raw/2dab24c5b82be0196e0ad9c4a4dbd292f32ab1e9/src/test/groovy/transform/stc/GenericsSTCTest.groovy",
                "sha": "eea93a61cbb74c9e4875a10fe1a7929f586d6e07",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/groovy/blob/2dab24c5b82be0196e0ad9c4a4dbd292f32ab1e9/src/test/groovy/transform/stc/WithSTCTest.groovy",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/transform/stc/WithSTCTest.groovy?ref=2dab24c5b82be0196e0ad9c4a4dbd292f32ab1e9",
                "deletions": 1,
                "filename": "src/test/groovy/transform/stc/WithSTCTest.groovy",
                "patch": "@@ -13,6 +13,8 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n+\n package groovy.transform.stc\n \n /**\n@@ -27,7 +29,7 @@ class WithSTCTest extends StaticTypeCheckingTestCase {\n         assertScript '''\n             class Test {\n               static List<String> a( String s ) {\n-                s.with { String it -> [ \"$it\" ] }\n+                s.with { String it -> [ \"$it\".toString() ] }\n               }\n             }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/2dab24c5b82be0196e0ad9c4a4dbd292f32ab1e9/src/test/groovy/transform/stc/WithSTCTest.groovy",
                "sha": "b419faf1fef1708a970d700decac381a4d8e022d",
                "status": "modified"
            }
        ],
        "message": "GROOVY-6051: Fix NPE in generics return type inference",
        "parent": "https://github.com/apache/groovy/commit/27646e7cd324b18e3b7aeb62497da08dc476e771",
        "patched_files": [
            "StaticTypeCheckingSupport.java",
            "StaticTypeCheckingVisitor.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "GenericsSTCTest.java",
            "WithSTCTest.java"
        ]
    },
    "groovy_2e72fa0": {
        "bug_id": "groovy_2e72fa0",
        "commit": "https://github.com/apache/groovy/commit/2e72fa0e86683c50594960a7ba98ee87234b111b",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/groovy/blob/2e72fa0e86683c50594960a7ba98ee87234b111b/src/main/groovy/json/JsonOutput.groovy",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/json/JsonOutput.groovy?ref=2e72fa0e86683c50594960a7ba98ee87234b111b",
                "deletions": 4,
                "filename": "src/main/groovy/json/JsonOutput.groovy",
                "patch": "@@ -139,10 +139,12 @@ class JsonOutput {\n      * @return a JSON object representation for a map\n      */\n     static String toJson(Map m) {\n-        if(m.containsKey(null)) {\n-            throw new IllegalArgumentException('Null key for a Map not allowed')\n-        }\n-        \"{\" + m.collect { k, v -> toJson(k.toString()) + ':' + toJson(v) }.join(',') + \"}\"\n+        \"{\" + m.collect { k, v ->\n+                if (k == null) {\n+                    throw new IllegalArgumentException('Null key for a Map not allowed')\n+                }\n+                toJson(k.toString()) + ':' + toJson(v)\n+        }.join(',') + \"}\"\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/groovy/raw/2e72fa0e86683c50594960a7ba98ee87234b111b/src/main/groovy/json/JsonOutput.groovy",
                "sha": "8704f913f260c8d2b86d8d5c3860c0e572a0ef35",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/groovy/blob/2e72fa0e86683c50594960a7ba98ee87234b111b/src/test/groovy/json/JsonOutputTest.groovy",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/json/JsonOutputTest.groovy?ref=2e72fa0e86683c50594960a7ba98ee87234b111b",
                "deletions": 0,
                "filename": "src/test/groovy/json/JsonOutputTest.groovy",
                "patch": "@@ -287,6 +287,12 @@ class JsonOutputTest extends GroovyTestCase {\n             toJson([(null): 1])\n         }\n     }\n+\n+    void testGROOVY5247() {\n+        def m = new TreeMap()\n+        m.a = 1\n+        assert toJson(m) == '{\"a\":1}'\n+    }\n }\n \n @Canonical",
                "raw_url": "https://github.com/apache/groovy/raw/2e72fa0e86683c50594960a7ba98ee87234b111b/src/test/groovy/json/JsonOutputTest.groovy",
                "sha": "6dd1da716b75e928c6411f158a96c8e1fa75505b",
                "status": "modified"
            }
        ],
        "message": "GROOVY-5247: fixes issue introduced by GROOVY-5162 that caused a NPE when checking for null keys on certain Map implementations (i.e., TreeMap, Hashtable).",
        "parent": "https://github.com/apache/groovy/commit/c845df3ff3539c950195168a6014546863a65428",
        "patched_files": [
            "JsonOutput.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "JsonOutputTest.java"
        ]
    },
    "groovy_31bf411": {
        "bug_id": "groovy_31bf411",
        "commit": "https://github.com/apache/groovy/commit/31bf41149559b20ec59397712eebf1f3c22cc4b6",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/31bf41149559b20ec59397712eebf1f3c22cc4b6/src/main/groovy/lang/MetaClass.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/MetaClass.java?ref=31bf41149559b20ec59397712eebf1f3c22cc4b6",
                "deletions": 1,
                "filename": "src/main/groovy/lang/MetaClass.java",
                "patch": "@@ -211,7 +211,7 @@ public Object invokeMethod(Object object, String methodName, Object[] arguments)\n         */\n \n         if (object == null) {\n-            throw new InvokerException(\"Cannot invoke method: \" + methodName + \" on null object\");\n+            throw new NullPointerException(\"Cannot invoke method: \" + methodName + \" on null object\");\n         }\n \n         List methods = getMethods(methodName);",
                "raw_url": "https://github.com/apache/groovy/raw/31bf41149559b20ec59397712eebf1f3c22cc4b6/src/main/groovy/lang/MetaClass.java",
                "sha": "e2b827e59d8406510200bda60dbe8907d5197013",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/31bf41149559b20ec59397712eebf1f3c22cc4b6/src/main/org/codehaus/groovy/runtime/Invoker.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/Invoker.java?ref=31bf41149559b20ec59397712eebf1f3c22cc4b6",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/runtime/Invoker.java",
                "patch": "@@ -379,7 +379,7 @@ else if (object instanceof Map) {\n      */\n     public Object getProperty(Object object, String property) {\n         if (object == null) {\n-            throw new InvokerException(\"Cannot get property on null object\");\n+            throw new NullPointerException(\"Cannot get property: \" + property + \" on null object\");\n         }\n         else if (object instanceof GroovyObject) {\n             GroovyObject pogo = (GroovyObject) object;",
                "raw_url": "https://github.com/apache/groovy/raw/31bf41149559b20ec59397712eebf1f3c22cc4b6/src/main/org/codehaus/groovy/runtime/Invoker.java",
                "sha": "a0e1d8afa3b03a943325cc7781b23738853179f9",
                "status": "modified"
            }
        ],
        "message": "Throw NullPointerException when navigating null which seems more natural to Java developeres\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@384 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/d360dfbc77eef810fa83374e3d8898b066e0c109",
        "patched_files": [
            "Invoker.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "InvokerTest.java"
        ]
    },
    "groovy_3481fd2": {
        "bug_id": "groovy_3481fd2",
        "commit": "https://github.com/apache/groovy/commit/3481fd2478bb74fad111534db3570475c4b7983d",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/3481fd2478bb74fad111534db3570475c4b7983d/src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java?ref=3481fd2478bb74fad111534db3570475c4b7983d",
                "deletions": 2,
                "filename": "src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java",
                "patch": "@@ -151,8 +151,10 @@ public void buildTree(List<String> filenames) throws IOException, RecognitionExc\n         setOverview();\n \n         List<File> sourcepathFiles = new ArrayList<File>();\n-        for (String sourcepath : sourcepaths) {\n-            sourcepathFiles.add(new File(sourcepath).getAbsoluteFile());\n+        if (sourcepaths != null) {\n+            for (String sourcepath : sourcepaths) {\n+                sourcepathFiles.add(new File(sourcepath).getAbsoluteFile());\n+            }\n         }\n \n         for (String filename : filenames) {",
                "raw_url": "https://github.com/apache/groovy/raw/3481fd2478bb74fad111534db3570475c4b7983d/src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java",
                "sha": "2a18142a8b6b2ad64c97e936e43374f81c44383d",
                "status": "modified"
            }
        ],
        "message": "NPE fix\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@19628 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/7d4e5c7cbf9f6734185e545d53323e1646637383",
        "patched_files": [
            "GroovyRootDocBuilder.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "GroovyRootDocBuilderTest.java"
        ]
    },
    "groovy_3904d5d": {
        "bug_id": "groovy_3904d5d",
        "commit": "https://github.com/apache/groovy/commit/3904d5de4e3df36547ac3cbc935957b9eba3954f",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/groovy/blob/3904d5de4e3df36547ac3cbc935957b9eba3954f/src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionHelper.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionHelper.java?ref=3904d5de4e3df36547ac3cbc935957b9eba3954f",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionHelper.java",
                "patch": "@@ -791,6 +791,9 @@ private void evaluateElvisOperatorExpression(ElvisOperatorExpression expression)\n         int mark = operandStack.getStackLength();\n         boolPart.visit(controller.getAcg());\n         operandStack.dup();\n+        if (ClassHelper.isPrimitiveType(truePartType) && !ClassHelper.isPrimitiveType(operandStack.getTopOperand())) {\n+            truePartType = ClassHelper.getWrapper(truePartType);\n+        }\n         int retValueId = compileStack.defineTemporaryVariable(\"$t\", truePartType, true);\n         operandStack.castToBool(mark,true);\n         ",
                "raw_url": "https://github.com/apache/groovy/raw/3904d5de4e3df36547ac3cbc935957b9eba3954f/src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionHelper.java",
                "sha": "819223602ab0b63ebcd6eb55cc1ecffdf1dcb52d",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/groovy/blob/3904d5de4e3df36547ac3cbc935957b9eba3954f/src/test/org/codehaus/groovy/classgen/asm/sc/BugsStaticCompileTest.groovy",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/classgen/asm/sc/BugsStaticCompileTest.groovy?ref=3904d5de4e3df36547ac3cbc935957b9eba3954f",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/classgen/asm/sc/BugsStaticCompileTest.groovy",
                "patch": "@@ -1158,5 +1158,17 @@ assert it.next() == 1G\n     assert text(String) == 'java.lang.String'\n     '''\n     }\n+\n+    // GROOVY-6342\n+    void testShouldNotThrowNPEIfElvisOperatorIsUsedInsideTernary() {\n+        assertScript '''class Inner {\n+    int somestuff\n+}\n+Inner inner = null\n+int someInt = inner?.somestuff ?: 0\n+println someInt\n+\n+'''\n+    }\n }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/3904d5de4e3df36547ac3cbc935957b9eba3954f/src/test/org/codehaus/groovy/classgen/asm/sc/BugsStaticCompileTest.groovy",
                "sha": "574b7aa8c3ecab04f9cc714bf2ec05d71550b620",
                "status": "modified"
            }
        ],
        "message": "GROOVY-6342: Fix NPE in static compilation with ternary operator and elvis",
        "parent": "https://github.com/apache/groovy/commit/5dc0a4e4ed685838f92e0b133325048cf43930c1",
        "patched_files": [
            "BinaryExpressionHelper.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "BugsStaticCompileTest.java"
        ]
    },
    "groovy_4016ac2": {
        "bug_id": "groovy_4016ac2",
        "commit": "https://github.com/apache/groovy/commit/4016ac26a65c817de195f9897e16e0e47a05b620",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/groovy/blob/4016ac26a65c817de195f9897e16e0e47a05b620/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java?ref=4016ac26a65c817de195f9897e16e0e47a05b620",
                "deletions": 36,
                "filename": "src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "patch": "@@ -3521,12 +3521,7 @@ private static ClassNode getDeclaringClass(MethodNode method, Expression argumen\n     private Map<String, GenericsType> resolvePlaceHoldersFromDeclartion(ClassNode receiver, ClassNode declaration, MethodNode method, boolean isStaticTarget) {\n         Map<String, GenericsType> resolvedPlaceholders;\n         if (isStaticTarget && CLASS_Type.equals(receiver) && receiver.isUsingGenerics() && receiver.getGenericsTypes().length>0) {\n-            resolvedPlaceholders = new HashMap<String, GenericsType>() {\n-                public GenericsType put(String key, GenericsType value) {\n-                    if (key==null || value==null) throw new NullPointerException(\"Key and value must not be null.\");\n-                    return super.put(key,value);\n-                }\n-            };\n+            resolvedPlaceholders = new HashMap<String, GenericsType>();\n             GenericsUtils.extractPlaceholders(receiver.getGenericsTypes()[0].getType(), resolvedPlaceholders);\n         } else {\n             resolvedPlaceholders = extractPlaceHolders(method, receiver, declaration);\n@@ -3542,12 +3537,7 @@ private static void addMethodLevelDeclaredGenerics(MethodNode method, Map<String\n     \n     private static Map<String, GenericsType> extractPlaceHolders(MethodNode method, ClassNode receiver, ClassNode declaringClass) {\n         if (declaringClass.equals(OBJECT_TYPE)) {\n-            Map<String, GenericsType> resolvedPlaceholders = new HashMap<String, GenericsType>() {\n-                public GenericsType put(String key, GenericsType value) {\n-                    if (key==null || value==null) throw new NullPointerException(\"Key and value must not be null.\");\n-                    return super.put(key,value);\n-                }\n-            };\n+            Map<String, GenericsType> resolvedPlaceholders = new HashMap<String, GenericsType>();\n             if (method!=null) addMethodLevelDeclaredGenerics(method, resolvedPlaceholders);\n             return resolvedPlaceholders;\n         }\n@@ -3556,12 +3546,7 @@ public GenericsType put(String key, GenericsType value) {\n         ClassNode current = receiver;\n         while (true) {\n             //extract the place holders\n-            Map<String, GenericsType> currentPlaceHolders = new HashMap<String, GenericsType>() {\n-                public GenericsType put(String key, GenericsType value) {\n-                    if (key==null || value==null) throw new NullPointerException(\"Key and value must not be null.\");\n-                    return super.put(key,value);\n-                }\n-            };\n+            Map<String, GenericsType> currentPlaceHolders = new HashMap<String, GenericsType>();\n             GenericsUtils.extractPlaceholders(current, currentPlaceHolders);\n \n             if (method!=null && declaringClass.equals(current)) {\n@@ -3626,13 +3611,9 @@ public GenericsType put(String key, GenericsType value) {\n      * for which placeholders are resolved recursively.\n      */\n     protected static GenericsType fullyResolve(GenericsType gt, Map<String, GenericsType> placeholders) {\n-        if (gt==null) throw new GroovyBugError(\"gt must not be null.\");\n-        if (placeholders==null) throw new GroovyBugError(\"placeholders map must not be null\");\n         GenericsType fromMap = placeholders.get(gt.getName());\n-        if (fromMap==null) throw new GroovyBugError(\"placeholders entry has null value, key was: \"+gt.getName()+\" and map entry exists: \"+placeholders.containsKey(gt.getName()));\n-\n-        if (gt.isPlaceholder() && placeholders.containsKey(gt.getName()) && !placeholders.get(gt.getName()).isPlaceholder()) {\n-            gt = placeholders.get(gt.getName());\n+        if (gt.isPlaceholder() && fromMap!=null) {\n+            gt = fromMap;\n         }\n \n         ClassNode type = fullyResolveType(gt.getType(), placeholders);\n@@ -3751,12 +3732,7 @@ protected void typeCheckMethodsWithGenerics(ClassNode receiver, ClassNode[] argu\n                 ClassNode firstArgType = GenericsUtils.parameterizeType(receiver, dgmMethodFirstArgType);\n \n \n-                Map<String, GenericsType> placeholders = new HashMap<String, GenericsType>() {\n-                    public GenericsType put(String key, GenericsType value) {\n-                        if (key==null || value==null) throw new NullPointerException(\"Key and value must not be null.\");\n-                        return super.put(key,value);\n-                    }\n-                };\n+                Map<String, GenericsType> placeholders = new HashMap<String, GenericsType>();\n                 GenericsType[] gts = dgmMethodFirstArgType.getGenericsTypes();\n                 for (int i = 0; gts != null && i < gts.length; i++) {\n                     GenericsType gt = gts[i];\n@@ -4076,12 +4052,7 @@ private void applyContextGenerics(Map<String, GenericsType> resolvedPlaceholders\n \n     private static Map<String, GenericsType> mergeGenerics(Map<String, GenericsType> current, GenericsType[] newGenerics) {\n         if (newGenerics == null || newGenerics.length == 0) return null;\n-        if (current==null) current = new HashMap<String, GenericsType>() {\n-            public GenericsType put(String key, GenericsType value) {\n-                if (key==null || value==null) throw new NullPointerException(\"Key and value must not be null.\");\n-                return super.put(key,value);\n-            }\n-        };\n+        if (current==null) current = new HashMap<String, GenericsType>();\n         for (int i = 0; i < newGenerics.length; i++) {\n             GenericsType gt = newGenerics[i];\n             if (!gt.isPlaceholder()) continue;",
                "raw_url": "https://github.com/apache/groovy/raw/4016ac26a65c817de195f9897e16e0e47a05b620/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "sha": "2eed38f10a3fb2f6f47286087d862759a214b47b",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/groovy/blob/4016ac26a65c817de195f9897e16e0e47a05b620/src/test/groovy/transform/stc/ArraysAndCollectionsSTCTest.groovy",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/transform/stc/ArraysAndCollectionsSTCTest.groovy?ref=4016ac26a65c817de195f9897e16e0e47a05b620",
                "deletions": 0,
                "filename": "src/test/groovy/transform/stc/ArraysAndCollectionsSTCTest.groovy",
                "patch": "@@ -534,5 +534,13 @@ class ArraysAndCollectionsSTCTest extends StaticTypeCheckingTestCase {\n             Map<String, Integer> immutableMap = [foo: 123, bar: 456].asImmutable()\n         \"\"\"\n     }\n+    \n+    // GROOVY-6350\n+    void testListPlusList() {\n+        assertScript \"\"\"\n+            def foo = [] + []\n+            assert foo==[]\n+        \"\"\"\n+    }\n }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/4016ac26a65c817de195f9897e16e0e47a05b620/src/test/groovy/transform/stc/ArraysAndCollectionsSTCTest.groovy",
                "sha": "58d3f8e5be03be27e2b3ce06b6b5ced61e67c439",
                "status": "modified"
            }
        ],
        "message": "GROOVY-6350: fixes NPE and removes the debug code from before",
        "parent": "https://github.com/apache/groovy/commit/939c56e25e88774d5996d57eeca8bf17d2fed40f",
        "patched_files": [
            "StaticTypeCheckingVisitor.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "ArraysAndCollectionsSTCTest.java"
        ]
    },
    "groovy_401b3a4": {
        "bug_id": "groovy_401b3a4",
        "commit": "https://github.com/apache/groovy/commit/401b3a4c434083adc84843cfb9abf14f6783c7e7",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/401b3a4c434083adc84843cfb9abf14f6783c7e7/src/main/org/codehaus/groovy/transform/NewifyASTTransformation.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/NewifyASTTransformation.java?ref=401b3a4c434083adc84843cfb9abf14f6783c7e7",
                "deletions": 3,
                "filename": "src/main/org/codehaus/groovy/transform/NewifyASTTransformation.java",
                "patch": "@@ -49,9 +49,7 @@\n import static org.codehaus.groovy.ast.tools.GeneralUtils.classX;\n \n /**\n- * Handles generation of code for the @Newify annotation.\n- *\n- * @author Paul King\n+ * Handles generation of code for the {@code @Newify} AST transform.\n  */\n @GroovyASTTransformation(phase = CompilePhase.CANONICALIZATION)\n public class NewifyASTTransformation extends ClassCodeExpressionTransformer implements ASTTransformation {\n@@ -167,6 +165,7 @@ public Expression transform(Expression expr) {\n             Expression object = transform(mce.getObjectExpression());\n             MethodCallExpression transformed = callX(object, method, args);\n             transformed.setImplicitThis(mce.isImplicitThis());\n+            transformed.setSafe(mce.isSafe());\n             transformed.setSourcePosition(mce);\n             return transformed;\n         } else if (expr instanceof ClosureExpression) {",
                "raw_url": "https://github.com/apache/groovy/raw/401b3a4c434083adc84843cfb9abf14f6783c7e7/src/main/org/codehaus/groovy/transform/NewifyASTTransformation.java",
                "sha": "55ae7de7fd8045929de6fb360326d8d4f6985fe4",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/groovy/blob/401b3a4c434083adc84843cfb9abf14f6783c7e7/src/test/org/codehaus/groovy/transform/NewifyTransformTest.groovy",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/transform/NewifyTransformTest.groovy?ref=401b3a4c434083adc84843cfb9abf14f6783c7e7",
                "deletions": 2,
                "filename": "src/test/org/codehaus/groovy/transform/NewifyTransformTest.groovy",
                "patch": "@@ -19,7 +19,7 @@\n package org.codehaus.groovy.transform\r\n \r\n /**\r\n- * @author Paul King\r\n+ * Tests for the {@code @Newify} AST transform.\r\n  */\r\n class NewifyTransformTest extends GroovyShellTestCase {\r\n \r\n@@ -158,7 +158,6 @@ class NewifyTransformTest extends GroovyShellTestCase {\n         assert test == 'ABC'\r\n     }\r\n \r\n-\r\n     void testNewifyClosureCompileStatic_Groovy7758() {\r\n         assertScript '''\r\n             class A {\r\n@@ -175,4 +174,19 @@ class NewifyTransformTest extends GroovyShellTestCase {\n             assert test(new A()) == 'abc'\r\n         '''\r\n     }\r\n+\r\n+    void testNewifyTransformPreservesSafeMethodCall_Groovy8203() {\r\n+        assertScript '''\r\n+            @Newify(A)\r\n+            class Z {\r\n+                def foo() {\r\n+                    def a\r\n+                    a?.get('b')\r\n+                }\r\n+                class A {}\r\n+            }\r\n+\r\n+            assert !new Z().foo()\r\n+        '''\r\n+    }\r\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/groovy/raw/401b3a4c434083adc84843cfb9abf14f6783c7e7/src/test/org/codehaus/groovy/transform/NewifyTransformTest.groovy",
                "sha": "e3e9890fdee45ad9c4e9c617feaaf347671567ca",
                "status": "modified"
            }
        ],
        "message": "GROOVY-8203: Add @Newify will cause ?. operator NPE (closes #550)",
        "parent": "https://github.com/apache/groovy/commit/6519cbd50722b5b707f957152cb658363d6be3e8",
        "patched_files": [
            "NewifyASTTransformation.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "NewifyTransformTest.java"
        ]
    },
    "groovy_4244569": {
        "bug_id": "groovy_4244569",
        "commit": "https://github.com/apache/groovy/commit/4244569bb17d841d7df3828af4321a6e5dcc505a",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/groovy/blob/4244569bb17d841d7df3828af4321a6e5dcc505a/src/main/java/org/codehaus/groovy/ast/tools/ClosureUtils.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/java/org/codehaus/groovy/ast/tools/ClosureUtils.java?ref=4244569bb17d841d7df3828af4321a6e5dcc505a",
                "deletions": 0,
                "filename": "src/main/java/org/codehaus/groovy/ast/tools/ClosureUtils.java",
                "patch": "@@ -19,6 +19,7 @@\n package org.codehaus.groovy.ast.tools;\n \n import groovy.lang.Closure;\n+import org.codehaus.groovy.ast.Parameter;\n import org.codehaus.groovy.ast.expr.ClosureExpression;\n import org.codehaus.groovy.control.io.ReaderSource;\n /**\n@@ -66,4 +67,18 @@ public static boolean hasSingleStringArg(Closure c) {\n         return typeName.equals(\"java.lang.String\");\n     }\n \n+    /**\n+     * @return true if the ClosureExpression has an implicit 'it' parameter\n+     */\n+    public static boolean hasImplicitParameter(ClosureExpression ce) {\n+        return ce.getParameters() != null && ce.getParameters().length == 0;\n+    }\n+\n+    /**\n+     * @return the parameters for the ClosureExpression\n+     */\n+    public static Parameter[] getParametersSafe(ClosureExpression ce) {\n+        return ce.getParameters() != null ? ce.getParameters() : Parameter.EMPTY_ARRAY;\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/groovy/raw/4244569bb17d841d7df3828af4321a6e5dcc505a/src/main/java/org/codehaus/groovy/ast/tools/ClosureUtils.java",
                "sha": "da0799023debfa80a49b9418a3149d9dfbbabbdb",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/groovy/blob/4244569bb17d841d7df3828af4321a6e5dcc505a/src/main/java/org/codehaus/groovy/control/ResolveVisitor.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/java/org/codehaus/groovy/control/ResolveVisitor.java?ref=4244569bb17d841d7df3828af4321a6e5dcc505a",
                "deletions": 10,
                "filename": "src/main/java/org/codehaus/groovy/control/ResolveVisitor.java",
                "patch": "@@ -81,6 +81,7 @@\n \n import static org.codehaus.groovy.ast.CompileUnit.ConstructedOuterNestedClassNode;\n import static org.codehaus.groovy.ast.GenericsType.GenericsTypeName;\n+import static org.codehaus.groovy.ast.tools.ClosureUtils.getParametersSafe;\n import static org.codehaus.groovy.ast.tools.GeneralUtils.inSamePackage;\n import static org.codehaus.groovy.ast.tools.GeneralUtils.isDefaultVisibility;\n \n@@ -1232,17 +1233,14 @@ protected Expression transformBinaryExpression(BinaryExpression be) {\n     protected Expression transformClosureExpression(ClosureExpression ce) {\n         boolean oldInClosure = inClosure;\n         inClosure = true;\n-        Parameter[] paras = ce.getParameters();\n-        if (paras != null) {\n-            for (Parameter para : paras) {\n-                ClassNode t = para.getType();\n-                resolveOrFail(t, ce);\n-                visitAnnotations(para);\n-                if (para.hasInitialExpression()) {\n-                    para.setInitialExpression(transform(para.getInitialExpression()));\n-                }\n-                visitAnnotations(para);\n+        for (Parameter para : getParametersSafe(ce)) {\n+            ClassNode t = para.getType();\n+            resolveOrFail(t, ce);\n+            visitAnnotations(para);\n+            if (para.hasInitialExpression()) {\n+                para.setInitialExpression(transform(para.getInitialExpression()));\n             }\n+            visitAnnotations(para);\n         }\n \n         Statement code = ce.getCode();",
                "raw_url": "https://github.com/apache/groovy/raw/4244569bb17d841d7df3828af4321a6e5dcc505a/src/main/java/org/codehaus/groovy/control/ResolveVisitor.java",
                "sha": "aeca559ad0928a4a3b4cce43a1c69b249345da9c",
                "status": "modified"
            },
            {
                "additions": 577,
                "blob_url": "https://github.com/apache/groovy/blob/4244569bb17d841d7df3828af4321a6e5dcc505a/src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java",
                "changes": 1155,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java?ref=4244569bb17d841d7df3828af4321a6e5dcc505a",
                "deletions": 578,
                "filename": "src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java",
                "patch": "@@ -1,578 +1,577 @@\n-/*\r\n- *  Licensed to the Apache Software Foundation (ASF) under one\r\n- *  or more contributor license agreements.  See the NOTICE file\r\n- *  distributed with this work for additional information\r\n- *  regarding copyright ownership.  The ASF licenses this file\r\n- *  to you under the Apache License, Version 2.0 (the\r\n- *  \"License\"); you may not use this file except in compliance\r\n- *  with the License.  You may obtain a copy of the License at\r\n- *\r\n- *    http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- *  Unless required by applicable law or agreed to in writing,\r\n- *  software distributed under the License is distributed on an\r\n- *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- *  KIND, either express or implied.  See the License for the\r\n- *  specific language governing permissions and limitations\r\n- *  under the License.\r\n- */\r\n-package org.codehaus.groovy.control;\r\n-\r\n-import org.codehaus.groovy.ast.AnnotatedNode;\r\n-import org.codehaus.groovy.ast.AnnotationNode;\r\n-import org.codehaus.groovy.ast.ClassCodeExpressionTransformer;\r\n-import org.codehaus.groovy.ast.ClassNode;\r\n-import org.codehaus.groovy.ast.DynamicVariable;\r\n-import org.codehaus.groovy.ast.FieldNode;\r\n-import org.codehaus.groovy.ast.ImportNode;\r\n-import org.codehaus.groovy.ast.MethodNode;\r\n-import org.codehaus.groovy.ast.ModuleNode;\r\n-import org.codehaus.groovy.ast.Parameter;\r\n-import org.codehaus.groovy.ast.Variable;\r\n-import org.codehaus.groovy.ast.expr.AnnotationConstantExpression;\r\n-import org.codehaus.groovy.ast.expr.ArgumentListExpression;\r\n-import org.codehaus.groovy.ast.expr.BinaryExpression;\r\n-import org.codehaus.groovy.ast.expr.ClassExpression;\r\n-import org.codehaus.groovy.ast.expr.ClosureExpression;\r\n-import org.codehaus.groovy.ast.expr.ConstantExpression;\r\n-import org.codehaus.groovy.ast.expr.ConstructorCallExpression;\r\n-import org.codehaus.groovy.ast.expr.EmptyExpression;\r\n-import org.codehaus.groovy.ast.expr.Expression;\r\n-import org.codehaus.groovy.ast.expr.MapEntryExpression;\r\n-import org.codehaus.groovy.ast.expr.MethodCallExpression;\r\n-import org.codehaus.groovy.ast.expr.NamedArgumentListExpression;\r\n-import org.codehaus.groovy.ast.expr.PropertyExpression;\r\n-import org.codehaus.groovy.ast.expr.StaticMethodCallExpression;\r\n-import org.codehaus.groovy.ast.expr.TupleExpression;\r\n-import org.codehaus.groovy.ast.expr.VariableExpression;\r\n-import org.codehaus.groovy.ast.stmt.Statement;\r\n-import org.codehaus.groovy.syntax.Types;\r\n-\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-\r\n-import static org.apache.groovy.ast.tools.ClassNodeUtils.getPropNameForAccessor;\r\n-import static org.apache.groovy.ast.tools.ClassNodeUtils.hasPossibleStaticMethod;\r\n-import static org.apache.groovy.ast.tools.ClassNodeUtils.hasPossibleStaticProperty;\r\n-import static org.apache.groovy.ast.tools.ClassNodeUtils.hasStaticProperty;\r\n-import static org.apache.groovy.ast.tools.ClassNodeUtils.isInnerClass;\r\n-import static org.apache.groovy.ast.tools.ClassNodeUtils.isValidAccessorName;\r\n-import static org.apache.groovy.ast.tools.ClassNodeUtils.getField;\r\n-import static org.apache.groovy.ast.tools.ExpressionUtils.transformInlineConstants;\r\n-import static org.apache.groovy.util.BeanUtils.capitalize;\r\n-\r\n-/**\r\n- * Visitor to resolve constants and method calls from static Imports\r\n- */\r\n-public class StaticImportVisitor extends ClassCodeExpressionTransformer {\r\n-    private ClassNode currentClass;\r\n-    private MethodNode currentMethod;\r\n-    private SourceUnit source;\r\n-    private boolean inSpecialConstructorCall;\r\n-    private boolean inClosure;\r\n-    private boolean inPropertyExpression;\r\n-    private Expression foundConstant;\r\n-    private Expression foundArgs;\r\n-    private boolean inAnnotation;\r\n-    private boolean inLeftExpression;\r\n-\r\n-    public void visitClass(ClassNode node, SourceUnit source) {\r\n-        this.currentClass = node;\r\n-        this.source = source;\r\n-        super.visitClass(node);\r\n-    }\r\n-\r\n-    @Override\r\n-    protected void visitConstructorOrMethod(MethodNode node, boolean isConstructor) {\r\n-        this.currentMethod = node;\r\n-        super.visitConstructorOrMethod(node, isConstructor);\r\n-        this.currentMethod = null;\r\n-    }\r\n-\r\n-    @Override\r\n-    public void visitAnnotations(AnnotatedNode node) {\r\n-        boolean oldInAnnotation = inAnnotation;\r\n-        inAnnotation = true;\r\n-        super.visitAnnotations(node);\r\n-        inAnnotation = oldInAnnotation;\r\n-    }\r\n-\r\n-    public Expression transform(Expression exp) {\r\n-        if (exp == null) return null;\r\n-        if (exp.getClass() == VariableExpression.class) {\r\n-            return transformVariableExpression((VariableExpression) exp);\r\n-        }\r\n-        if (exp.getClass() == BinaryExpression.class) {\r\n-            return transformBinaryExpression((BinaryExpression) exp);\r\n-        }\r\n-        if (exp.getClass() == PropertyExpression.class) {\r\n-            return transformPropertyExpression((PropertyExpression) exp);\r\n-        }\r\n-        if (exp.getClass() == MethodCallExpression.class) {\r\n-            return transformMethodCallExpression((MethodCallExpression) exp);\r\n-        }\r\n-        if (exp.getClass() == ClosureExpression.class) {\r\n-            return transformClosureExpression((ClosureExpression) exp);\r\n-        }\r\n-        if (exp.getClass() == ConstructorCallExpression.class) {\r\n-            return transformConstructorCallExpression((ConstructorCallExpression) exp);\r\n-        }\r\n-        if (exp.getClass() == ArgumentListExpression.class) {\r\n-            Expression result = exp.transformExpression(this);\r\n-            if (inPropertyExpression) {\r\n-                foundArgs = result;\r\n-            }\r\n-            return result;\r\n-        }\r\n-        if (exp instanceof ConstantExpression) {\r\n-            Expression result = exp.transformExpression(this);\r\n-            if (inPropertyExpression) {\r\n-                foundConstant = result;\r\n-            }\r\n-            if (inAnnotation && exp instanceof AnnotationConstantExpression) {\r\n-                ConstantExpression ce = (ConstantExpression) result;\r\n-                if (ce.getValue() instanceof AnnotationNode) {\r\n-                    // replicate a little bit of AnnotationVisitor here\r\n-                    // because we can't wait until later to do this\r\n-                    AnnotationNode an = (AnnotationNode) ce.getValue();\r\n-                    Map<String, Expression> attributes = an.getMembers();\r\n-                    for (Map.Entry<String, Expression> entry : attributes.entrySet()) {\r\n-                        Expression attrExpr = transform(entry.getValue());\r\n-                        entry.setValue(attrExpr);\r\n-                    }\r\n-\r\n-                }\r\n-            }\r\n-            return result;\r\n-        }\r\n-        return exp.transformExpression(this);\r\n-    }\r\n-\r\n-    // if you have a Bar class with a static foo property, and this:\r\n-    //   import static Bar.foo as baz\r\n-    // then this constructor (not normal usage of statics):\r\n-    //   new Bar(baz:1)\r\n-    // will become:\r\n-    //   new Bar(foo:1)\r\n-\r\n-    private Expression transformMapEntryExpression(MapEntryExpression me, ClassNode constructorCallType) {\r\n-        Expression key = me.getKeyExpression();\r\n-        Expression value = me.getValueExpression();\r\n-        ModuleNode module = currentClass.getModule();\r\n-        if (module != null && key instanceof ConstantExpression) {\r\n-            Map<String, ImportNode> importNodes = module.getStaticImports();\r\n-            if (importNodes.containsKey(key.getText())) {\r\n-                ImportNode importNode = importNodes.get(key.getText());\r\n-                if (importNode.getType().equals(constructorCallType)) {\r\n-                    String newKey = importNode.getFieldName();\r\n-                    return new MapEntryExpression(new ConstantExpression(newKey), value.transformExpression(this));\r\n-                }\r\n-            }\r\n-        }\r\n-        return me;\r\n-    }\r\n-\r\n-    protected Expression transformBinaryExpression(BinaryExpression be) {\r\n-        int type = be.getOperation().getType();\r\n-        boolean oldInLeftExpression;\r\n-        Expression right = transform(be.getRightExpression());\r\n-        be.setRightExpression(right);\r\n-        Expression left;\r\n-        if (type == Types.EQUAL && be.getLeftExpression() instanceof VariableExpression) {\r\n-            oldInLeftExpression = inLeftExpression;\r\n-            inLeftExpression = true;\r\n-            left = transform(be.getLeftExpression());\r\n-            inLeftExpression = oldInLeftExpression;\r\n-            if (left instanceof StaticMethodCallExpression) {\r\n-                StaticMethodCallExpression smce = (StaticMethodCallExpression) left;\r\n-                StaticMethodCallExpression result = new StaticMethodCallExpression(smce.getOwnerType(), smce.getMethod(), right);\r\n-                setSourcePosition(result, be);\r\n-                return result;\r\n-            }\r\n-        } else {\r\n-            left = transform(be.getLeftExpression());\r\n-        }\r\n-        be.setLeftExpression(left);\r\n-        return be;\r\n-    }\r\n-\r\n-    protected Expression transformVariableExpression(VariableExpression ve) {\r\n-        Variable v = ve.getAccessedVariable();\r\n-        if (v instanceof DynamicVariable) {\r\n-            Expression result = findStaticFieldOrPropAccessorImportFromModule(v.getName());\r\n-            if (result != null) {\r\n-                setSourcePosition(result, ve);\r\n-                if (inAnnotation) {\r\n-                    result = transformInlineConstants(result);\r\n-                }\r\n-                return result;\r\n-            }\r\n-        } else if (v instanceof FieldNode) {\r\n-            if (inSpecialConstructorCall) { // GROOVY-8819\r\n-                FieldNode fn = (FieldNode) v;\r\n-                ClassNode declaringClass = fn.getDeclaringClass();\r\n-                if (fn.isStatic() && currentClass.isDerivedFrom(declaringClass)) {\r\n-                    Expression result = new PropertyExpression(new ClassExpression(declaringClass), v.getName());\r\n-                    result.setSourcePosition(ve);\r\n-\r\n-                    return result;\r\n-                }\r\n-            }\r\n-        }\r\n-        return ve;\r\n-    }\r\n-\r\n-    /**\r\n-     * Set the source position of toSet including its property expression if it has one.\r\n-     *\r\n-     * @param toSet resulting node\r\n-     * @param origNode original node\r\n-     */\r\n-    private static void setSourcePosition(Expression toSet, Expression origNode) {\r\n-        toSet.setSourcePosition(origNode);\r\n-        if (toSet instanceof PropertyExpression) {\r\n-            ((PropertyExpression) toSet).getProperty().setSourcePosition(origNode);\r\n-        }\r\n-    }\r\n-\r\n-    protected Expression transformMethodCallExpression(MethodCallExpression mce) {\r\n-        Expression args = transform(mce.getArguments());\r\n-        Expression method = transform(mce.getMethod());\r\n-        Expression object = transform(mce.getObjectExpression());\r\n-        boolean isExplicitThisOrSuper = false;\r\n-        boolean isExplicitSuper = false;\r\n-        if (object instanceof VariableExpression) {\r\n-            VariableExpression ve = (VariableExpression) object;\r\n-            isExplicitThisOrSuper = !mce.isImplicitThis() && (ve.isThisExpression() || ve.isSuperExpression());\r\n-            isExplicitSuper = ve.isSuperExpression();\r\n-        }\r\n-\r\n-        if (mce.isImplicitThis() || isExplicitThisOrSuper) {\r\n-            if (mce.isImplicitThis()) {\r\n-                if (null == currentClass.tryFindPossibleMethod(mce.getMethodAsString(), args)) {\r\n-\r\n-                    Expression ret = findStaticMethodImportFromModule(method, args);\r\n-                    if (ret != null) {\r\n-                        setSourcePosition(ret, mce);\r\n-                        return ret;\r\n-                    }\r\n-                    if (method instanceof ConstantExpression && !inLeftExpression) {\r\n-                        // could be a closure field\r\n-                        String methodName = (String) ((ConstantExpression) method).getValue();\r\n-                        ret = findStaticFieldOrPropAccessorImportFromModule(methodName);\r\n-                        if (ret != null) {\r\n-                            ret = new MethodCallExpression(ret, \"call\", args);\r\n-                            setSourcePosition(ret, mce);\r\n-                            return ret;\r\n-                        }\r\n-                    }\r\n-                }\r\n-            } else if (currentMethod!=null && currentMethod.isStatic() && isExplicitSuper) {\r\n-                MethodCallExpression ret = new MethodCallExpression(new ClassExpression(currentClass.getSuperClass()), method, args);\r\n-                setSourcePosition(ret, mce);\r\n-                return ret;\r\n-            }\r\n-\r\n-            if (method instanceof ConstantExpression) {\r\n-                ConstantExpression ce = (ConstantExpression) method;\r\n-                Object value = ce.getValue();\r\n-                if (value instanceof String) {\r\n-                    boolean foundInstanceMethod = false;\r\n-                    String methodName = (String) value;\r\n-                    boolean inInnerClass = isInnerClass(currentClass);\r\n-                    if (currentMethod != null && !currentMethod.isStatic()) {\r\n-                        if (currentClass.hasPossibleMethod(methodName, args)) {\r\n-                            foundInstanceMethod = true;\r\n-                        }\r\n-                    }\r\n-                    boolean lookForPossibleStaticMethod = !methodName.equals(\"call\");\r\n-                    lookForPossibleStaticMethod &= !foundInstanceMethod;\r\n-                    lookForPossibleStaticMethod |= inSpecialConstructorCall;\r\n-                    lookForPossibleStaticMethod &= !inInnerClass;\r\n-                    if (!inClosure && lookForPossibleStaticMethod &&\r\n-                            (hasPossibleStaticMethod(currentClass, methodName, args, true))\r\n-                            || hasPossibleStaticProperty(currentClass, methodName)) {\r\n-                        StaticMethodCallExpression smce = new StaticMethodCallExpression(currentClass, methodName, args);\r\n-                        setSourcePosition(smce, mce);\r\n-                        return smce;\r\n-                    }\r\n-                    if (!inClosure && inInnerClass && inSpecialConstructorCall && mce.isImplicitThis() && !foundInstanceMethod) {\r\n-                        if (currentClass.getOuterClass().hasPossibleMethod(methodName, args)) {\r\n-                            object = new PropertyExpression(new ClassExpression(currentClass.getOuterClass()), new ConstantExpression(\"this\"));\r\n-                        } else if (hasPossibleStaticMethod(currentClass.getOuterClass(), methodName, args, true)\r\n-                                || hasPossibleStaticProperty(currentClass.getOuterClass(), methodName)) {\r\n-                            StaticMethodCallExpression smce = new StaticMethodCallExpression(currentClass.getOuterClass(), methodName, args);\r\n-                            setSourcePosition(smce, mce);\r\n-                            return smce;\r\n-                        }\r\n-                    }\r\n-\r\n-                    if (mce.isImplicitThis() && lookForPossibleStaticMethod && hasPossibleStaticMethod(currentClass, methodName, args, true)) {\r\n-                        StaticMethodCallExpression result = new StaticMethodCallExpression(currentClass, methodName, args);\r\n-                        result.setSourcePosition(mce);\r\n-                        return result;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        MethodCallExpression result = new MethodCallExpression(object, method, args);\r\n-        result.setSafe(mce.isSafe());\r\n-        result.setImplicitThis(mce.isImplicitThis());\r\n-        result.setSpreadSafe(mce.isSpreadSafe());\r\n-        result.setMethodTarget(mce.getMethodTarget());\r\n-        // GROOVY-6757\r\n-        result.setGenericsTypes(mce.getGenericsTypes());\r\n-        setSourcePosition(result, mce);\r\n-        return result;\r\n-    }\r\n-\r\n-    protected Expression transformConstructorCallExpression(ConstructorCallExpression cce) {\r\n-        inSpecialConstructorCall = cce.isSpecialCall();\r\n-        Expression expression = cce.getArguments();\r\n-        if (expression instanceof TupleExpression) {\r\n-            TupleExpression tuple = (TupleExpression) expression;\r\n-            if (tuple.getExpressions().size() == 1) {\r\n-                expression = tuple.getExpression(0);\r\n-                if (expression instanceof NamedArgumentListExpression) {\r\n-                    NamedArgumentListExpression namedArgs = (NamedArgumentListExpression) expression;\r\n-                    List<MapEntryExpression> entryExpressions = namedArgs.getMapEntryExpressions();\r\n-                    for (int i = 0; i < entryExpressions.size(); i++) {\r\n-                        entryExpressions.set(i, (MapEntryExpression) transformMapEntryExpression(entryExpressions.get(i), cce.getType()));\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-        Expression ret = cce.transformExpression(this);\r\n-        inSpecialConstructorCall = false;\r\n-        return ret;\r\n-    }\r\n-\r\n-    protected Expression transformClosureExpression(ClosureExpression ce) {\r\n-        boolean oldInClosure = inClosure;\r\n-        inClosure = true;\r\n-        if (ce.getParameters() != null) {\r\n-            for (Parameter p : ce.getParameters()) {\r\n-                if (p.hasInitialExpression()) {\r\n-                    p.setInitialExpression(transform(p.getInitialExpression()));\r\n-                }\r\n-            }\r\n-        }\r\n-        Statement code = ce.getCode();\r\n-        if (code != null) code.visit(this);\r\n-        inClosure = oldInClosure;\r\n-        return ce;\r\n-    }\r\n-\r\n-    protected Expression transformPropertyExpression(PropertyExpression pe) {\r\n-        if (currentMethod!=null && currentMethod.isStatic()\r\n-                && pe.getObjectExpression() instanceof VariableExpression\r\n-                && ((VariableExpression) pe.getObjectExpression()).isSuperExpression()) {\r\n-            PropertyExpression pexp = new PropertyExpression(\r\n-                    new ClassExpression(currentClass.getSuperClass()),\r\n-                    transform(pe.getProperty())\r\n-            );\r\n-            pexp.setSourcePosition(pe);\r\n-            return pexp;\r\n-        }\r\n-        boolean oldInPropertyExpression = inPropertyExpression;\r\n-        Expression oldFoundArgs = foundArgs;\r\n-        Expression oldFoundConstant = foundConstant;\r\n-        inPropertyExpression = true;\r\n-        foundArgs = null;\r\n-        foundConstant = null;\r\n-        Expression objectExpression = transform(pe.getObjectExpression());\r\n-        boolean candidate = false;\r\n-        if (objectExpression instanceof MethodCallExpression) {\r\n-            candidate = ((MethodCallExpression)objectExpression).isImplicitThis();\r\n-        }\r\n-\r\n-        if (foundArgs != null && foundConstant != null && candidate) {\r\n-            Expression result = findStaticMethodImportFromModule(foundConstant, foundArgs);\r\n-            if (result != null) {\r\n-                objectExpression = result;\r\n-                objectExpression.setSourcePosition(pe);\r\n-            }\r\n-        }\r\n-        inPropertyExpression = oldInPropertyExpression;\r\n-        foundArgs = oldFoundArgs;\r\n-        foundConstant = oldFoundConstant;\r\n-        pe.setObjectExpression(objectExpression);\r\n-        return pe;\r\n-    }\r\n-\r\n-    private Expression findStaticFieldOrPropAccessorImportFromModule(String name) {\r\n-        ModuleNode module = currentClass.getModule();\r\n-        if (module == null) return null;\r\n-        Map<String, ImportNode> importNodes = module.getStaticImports();\r\n-        Expression expression;\r\n-        String accessorName = getAccessorName(name);\r\n-        // look for one of these:\r\n-        //   import static MyClass.setProp [as setOtherProp]\r\n-        //   import static MyClass.getProp [as getOtherProp]\r\n-        // when resolving prop reference\r\n-        if (importNodes.containsKey(accessorName)) {\r\n-            expression = findStaticProperty(importNodes, accessorName);\r\n-            if (expression != null) return expression;\r\n-        }\r\n-        if (accessorName.startsWith(\"get\")) {\r\n-            accessorName = \"is\" + accessorName.substring(3);\r\n-            if (importNodes.containsKey(accessorName)) {\r\n-                expression = findStaticProperty(importNodes, accessorName);\r\n-                if (expression != null) return expression;\r\n-            }\r\n-        }\r\n-\r\n-        // look for one of these:\r\n-        //   import static MyClass.prop [as otherProp]\r\n-        // when resolving prop or field reference\r\n-        if (importNodes.containsKey(name)) {\r\n-            ImportNode importNode = importNodes.get(name);\r\n-            expression = findStaticPropertyAccessor(importNode.getType(), importNode.getFieldName());\r\n-            if (expression != null) return expression;\r\n-            expression = findStaticField(importNode.getType(), importNode.getFieldName());\r\n-            if (expression != null) return expression;\r\n-        }\r\n-        // look for one of these:\r\n-        //   import static MyClass.*\r\n-        // when resolving prop or field reference\r\n-        for (ImportNode importNode : module.getStaticStarImports().values()) {\r\n-            ClassNode node = importNode.getType();\r\n-            expression = findStaticPropertyAccessor(node, name);\r\n-            if (expression != null) return expression;\r\n-            expression = findStaticField(node, name);\r\n-            if (expression != null) return expression;\r\n-        }\r\n-        return null;\r\n-    }\r\n-\r\n-    private Expression findStaticProperty(Map<String, ImportNode> importNodes, String accessorName) {\r\n-        Expression result = null;\r\n-        ImportNode importNode = importNodes.get(accessorName);\r\n-        ClassNode importClass = importNode.getType();\r\n-        String importMember = importNode.getFieldName();\r\n-        result = findStaticPropertyAccessorByFullName(importClass, importMember);\r\n-        if (result == null) {\r\n-            result = findStaticPropertyAccessor(importClass, getPropNameForAccessor(importMember));\r\n-        }\r\n-        return result;\r\n-    }\r\n-\r\n-    private Expression findStaticMethodImportFromModule(Expression method, Expression args) {\r\n-        ModuleNode module = currentClass.getModule();\r\n-        if (module == null || !(method instanceof ConstantExpression)) return null;\r\n-        Map<String, ImportNode> importNodes = module.getStaticImports();\r\n-        ConstantExpression ce = (ConstantExpression) method;\r\n-        Expression expression;\r\n-        Object value = ce.getValue();\r\n-        // skip non-Strings, e.g. Integer\r\n-        if (!(value instanceof String)) return null;\r\n-        final String name = (String) value;\r\n-        // look for one of these:\r\n-        //   import static SomeClass.method [as otherName]\r\n-        // when resolving methodCall() or getProp() or setProp()\r\n-        if (importNodes.containsKey(name)) {\r\n-            ImportNode importNode = importNodes.get(name);\r\n-            expression = findStaticMethod(importNode.getType(), importNode.getFieldName(), args);\r\n-            if (expression != null) return expression;\r\n-            expression = findStaticPropertyAccessorGivenArgs(importNode.getType(), getPropNameForAccessor(importNode.getFieldName()), args);\r\n-            if (expression != null) {\r\n-                return new StaticMethodCallExpression(importNode.getType(), importNode.getFieldName(), args);\r\n-            }\r\n-        }\r\n-        // look for one of these:\r\n-        //   import static SomeClass.someProp [as otherName]\r\n-        // when resolving getProp() or setProp()\r\n-        if (isValidAccessorName(name)) {\r\n-            String propName = getPropNameForAccessor(name);\r\n-            if (importNodes.containsKey(propName)) {\r\n-                ImportNode importNode = importNodes.get(propName);\r\n-                ClassNode importClass = importNode.getType();\r\n-                String importMember = importNode.getFieldName();\r\n-                expression = findStaticMethod(importClass, prefix(name) + capitalize(importMember), args);\r\n-                if (expression != null) return expression;\r\n-                expression = findStaticPropertyAccessorGivenArgs(importClass, importMember, args);\r\n-                if (expression != null) {\r\n-                    return new StaticMethodCallExpression(importClass, prefix(name) + capitalize(importMember), args);\r\n-                }\r\n-            }\r\n-        }\r\n-        Map<String, ImportNode> starImports = module.getStaticStarImports();\r\n-        ClassNode starImportType;\r\n-        if (currentClass.isEnum() && starImports.containsKey(currentClass.getName())) {\r\n-            ImportNode importNode = starImports.get(currentClass.getName());\r\n-            starImportType = importNode == null ? null : importNode.getType();\r\n-            expression = findStaticMethod(starImportType, name, args);\r\n-            if (expression != null) return expression;\r\n-        } else {\r\n-            for (ImportNode importNode : starImports.values()) {\r\n-                starImportType = importNode == null ? null : importNode.getType();\r\n-                expression = findStaticMethod(starImportType, name, args);\r\n-                if (expression != null) return expression;\r\n-                expression = findStaticPropertyAccessorGivenArgs(starImportType, getPropNameForAccessor(name), args);\r\n-                if (expression != null) {\r\n-                    return new StaticMethodCallExpression(starImportType, name, args);\r\n-                }\r\n-            }\r\n-        }\r\n-        return null;\r\n-    }\r\n-\r\n-    private static String prefix(String name) {\r\n-        return name.startsWith(\"is\") ? \"is\" : name.substring(0, 3);\r\n-    }\r\n-\r\n-    private String getAccessorName(String name) {\r\n-        return (inLeftExpression ? \"set\" : \"get\") + capitalize(name);\r\n-    }\r\n-\r\n-    private Expression findStaticPropertyAccessorGivenArgs(ClassNode staticImportType, String propName, Expression args) {\r\n-        // TODO validate args?\r\n-        return findStaticPropertyAccessor(staticImportType, propName);\r\n-    }\r\n-\r\n-    private Expression findStaticPropertyAccessor(ClassNode staticImportType, String propName) {\r\n-        String accessorName = getAccessorName(propName);\r\n-        Expression accessor = findStaticPropertyAccessorByFullName(staticImportType, accessorName);\r\n-        if (accessor == null && accessorName.startsWith(\"get\")) {\r\n-            accessor = findStaticPropertyAccessorByFullName(staticImportType, \"is\" + accessorName.substring(3));\r\n-        }\r\n-        if (accessor == null && hasStaticProperty(staticImportType, propName)) {\r\n-            // args will be replaced\r\n-            if (inLeftExpression)\r\n-                accessor = new StaticMethodCallExpression(staticImportType, accessorName, ArgumentListExpression.EMPTY_ARGUMENTS);\r\n-            else\r\n-                accessor = new PropertyExpression(new ClassExpression(staticImportType), propName);\r\n-        }\r\n-        return accessor;\r\n-    }\r\n-\r\n-    private Expression findStaticPropertyAccessorByFullName(ClassNode staticImportType, String accessorMethodName) {\r\n-        // anything will do as we only check size == 1\r\n-        ArgumentListExpression dummyArgs = new ArgumentListExpression();\r\n-        dummyArgs.addExpression(EmptyExpression.INSTANCE);\r\n-        return findStaticMethod(staticImportType, accessorMethodName, (inLeftExpression ? dummyArgs : ArgumentListExpression.EMPTY_ARGUMENTS));\r\n-    }\r\n-\r\n-    private static Expression findStaticField(ClassNode staticImportType, String fieldName) {\r\n-        if (staticImportType.isPrimaryClassNode() || staticImportType.isResolved()) {\r\n-            FieldNode field = getField(staticImportType, fieldName);\r\n-            if (field != null && field.isStatic())\r\n-                return new PropertyExpression(new ClassExpression(staticImportType), fieldName);\r\n-        }\r\n-        return null;\r\n-    }\r\n-\r\n-    private static Expression findStaticMethod(ClassNode staticImportType, String methodName, Expression args) {\r\n-        if (staticImportType.isPrimaryClassNode() || staticImportType.isResolved()) {\r\n-            if (staticImportType.hasPossibleStaticMethod(methodName, args)) {\r\n-                return new StaticMethodCallExpression(staticImportType, methodName, args);\r\n-            }\r\n-        }\r\n-        return null;\r\n-    }\r\n-\r\n-    protected SourceUnit getSourceUnit() {\r\n-        return source;\r\n-    }\r\n-}\r\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.codehaus.groovy.control;\n+\n+import org.codehaus.groovy.ast.AnnotatedNode;\n+import org.codehaus.groovy.ast.AnnotationNode;\n+import org.codehaus.groovy.ast.ClassCodeExpressionTransformer;\n+import org.codehaus.groovy.ast.ClassNode;\n+import org.codehaus.groovy.ast.DynamicVariable;\n+import org.codehaus.groovy.ast.FieldNode;\n+import org.codehaus.groovy.ast.ImportNode;\n+import org.codehaus.groovy.ast.MethodNode;\n+import org.codehaus.groovy.ast.ModuleNode;\n+import org.codehaus.groovy.ast.Parameter;\n+import org.codehaus.groovy.ast.Variable;\n+import org.codehaus.groovy.ast.expr.AnnotationConstantExpression;\n+import org.codehaus.groovy.ast.expr.ArgumentListExpression;\n+import org.codehaus.groovy.ast.expr.BinaryExpression;\n+import org.codehaus.groovy.ast.expr.ClassExpression;\n+import org.codehaus.groovy.ast.expr.ClosureExpression;\n+import org.codehaus.groovy.ast.expr.ConstantExpression;\n+import org.codehaus.groovy.ast.expr.ConstructorCallExpression;\n+import org.codehaus.groovy.ast.expr.EmptyExpression;\n+import org.codehaus.groovy.ast.expr.Expression;\n+import org.codehaus.groovy.ast.expr.MapEntryExpression;\n+import org.codehaus.groovy.ast.expr.MethodCallExpression;\n+import org.codehaus.groovy.ast.expr.NamedArgumentListExpression;\n+import org.codehaus.groovy.ast.expr.PropertyExpression;\n+import org.codehaus.groovy.ast.expr.StaticMethodCallExpression;\n+import org.codehaus.groovy.ast.expr.TupleExpression;\n+import org.codehaus.groovy.ast.expr.VariableExpression;\n+import org.codehaus.groovy.ast.stmt.Statement;\n+import org.codehaus.groovy.syntax.Types;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.apache.groovy.ast.tools.ClassNodeUtils.getPropNameForAccessor;\n+import static org.apache.groovy.ast.tools.ClassNodeUtils.hasPossibleStaticMethod;\n+import static org.apache.groovy.ast.tools.ClassNodeUtils.hasPossibleStaticProperty;\n+import static org.apache.groovy.ast.tools.ClassNodeUtils.hasStaticProperty;\n+import static org.apache.groovy.ast.tools.ClassNodeUtils.isInnerClass;\n+import static org.apache.groovy.ast.tools.ClassNodeUtils.isValidAccessorName;\n+import static org.apache.groovy.ast.tools.ClassNodeUtils.getField;\n+import static org.apache.groovy.ast.tools.ExpressionUtils.transformInlineConstants;\n+import static org.apache.groovy.util.BeanUtils.capitalize;\n+import static org.codehaus.groovy.ast.tools.ClosureUtils.getParametersSafe;\n+\n+/**\n+ * Visitor to resolve constants and method calls from static Imports\n+ */\n+public class StaticImportVisitor extends ClassCodeExpressionTransformer {\n+    private ClassNode currentClass;\n+    private MethodNode currentMethod;\n+    private SourceUnit source;\n+    private boolean inSpecialConstructorCall;\n+    private boolean inClosure;\n+    private boolean inPropertyExpression;\n+    private Expression foundConstant;\n+    private Expression foundArgs;\n+    private boolean inAnnotation;\n+    private boolean inLeftExpression;\n+\n+    public void visitClass(ClassNode node, SourceUnit source) {\n+        this.currentClass = node;\n+        this.source = source;\n+        super.visitClass(node);\n+    }\n+\n+    @Override\n+    protected void visitConstructorOrMethod(MethodNode node, boolean isConstructor) {\n+        this.currentMethod = node;\n+        super.visitConstructorOrMethod(node, isConstructor);\n+        this.currentMethod = null;\n+    }\n+\n+    @Override\n+    public void visitAnnotations(AnnotatedNode node) {\n+        boolean oldInAnnotation = inAnnotation;\n+        inAnnotation = true;\n+        super.visitAnnotations(node);\n+        inAnnotation = oldInAnnotation;\n+    }\n+\n+    public Expression transform(Expression exp) {\n+        if (exp == null) return null;\n+        if (exp.getClass() == VariableExpression.class) {\n+            return transformVariableExpression((VariableExpression) exp);\n+        }\n+        if (exp.getClass() == BinaryExpression.class) {\n+            return transformBinaryExpression((BinaryExpression) exp);\n+        }\n+        if (exp.getClass() == PropertyExpression.class) {\n+            return transformPropertyExpression((PropertyExpression) exp);\n+        }\n+        if (exp.getClass() == MethodCallExpression.class) {\n+            return transformMethodCallExpression((MethodCallExpression) exp);\n+        }\n+        if (exp.getClass() == ClosureExpression.class) {\n+            return transformClosureExpression((ClosureExpression) exp);\n+        }\n+        if (exp.getClass() == ConstructorCallExpression.class) {\n+            return transformConstructorCallExpression((ConstructorCallExpression) exp);\n+        }\n+        if (exp.getClass() == ArgumentListExpression.class) {\n+            Expression result = exp.transformExpression(this);\n+            if (inPropertyExpression) {\n+                foundArgs = result;\n+            }\n+            return result;\n+        }\n+        if (exp instanceof ConstantExpression) {\n+            Expression result = exp.transformExpression(this);\n+            if (inPropertyExpression) {\n+                foundConstant = result;\n+            }\n+            if (inAnnotation && exp instanceof AnnotationConstantExpression) {\n+                ConstantExpression ce = (ConstantExpression) result;\n+                if (ce.getValue() instanceof AnnotationNode) {\n+                    // replicate a little bit of AnnotationVisitor here\n+                    // because we can't wait until later to do this\n+                    AnnotationNode an = (AnnotationNode) ce.getValue();\n+                    Map<String, Expression> attributes = an.getMembers();\n+                    for (Map.Entry<String, Expression> entry : attributes.entrySet()) {\n+                        Expression attrExpr = transform(entry.getValue());\n+                        entry.setValue(attrExpr);\n+                    }\n+\n+                }\n+            }\n+            return result;\n+        }\n+        return exp.transformExpression(this);\n+    }\n+\n+    // if you have a Bar class with a static foo property, and this:\n+    //   import static Bar.foo as baz\n+    // then this constructor (not normal usage of statics):\n+    //   new Bar(baz:1)\n+    // will become:\n+    //   new Bar(foo:1)\n+\n+    private Expression transformMapEntryExpression(MapEntryExpression me, ClassNode constructorCallType) {\n+        Expression key = me.getKeyExpression();\n+        Expression value = me.getValueExpression();\n+        ModuleNode module = currentClass.getModule();\n+        if (module != null && key instanceof ConstantExpression) {\n+            Map<String, ImportNode> importNodes = module.getStaticImports();\n+            if (importNodes.containsKey(key.getText())) {\n+                ImportNode importNode = importNodes.get(key.getText());\n+                if (importNode.getType().equals(constructorCallType)) {\n+                    String newKey = importNode.getFieldName();\n+                    return new MapEntryExpression(new ConstantExpression(newKey), value.transformExpression(this));\n+                }\n+            }\n+        }\n+        return me;\n+    }\n+\n+    protected Expression transformBinaryExpression(BinaryExpression be) {\n+        int type = be.getOperation().getType();\n+        boolean oldInLeftExpression;\n+        Expression right = transform(be.getRightExpression());\n+        be.setRightExpression(right);\n+        Expression left;\n+        if (type == Types.EQUAL && be.getLeftExpression() instanceof VariableExpression) {\n+            oldInLeftExpression = inLeftExpression;\n+            inLeftExpression = true;\n+            left = transform(be.getLeftExpression());\n+            inLeftExpression = oldInLeftExpression;\n+            if (left instanceof StaticMethodCallExpression) {\n+                StaticMethodCallExpression smce = (StaticMethodCallExpression) left;\n+                StaticMethodCallExpression result = new StaticMethodCallExpression(smce.getOwnerType(), smce.getMethod(), right);\n+                setSourcePosition(result, be);\n+                return result;\n+            }\n+        } else {\n+            left = transform(be.getLeftExpression());\n+        }\n+        be.setLeftExpression(left);\n+        return be;\n+    }\n+\n+    protected Expression transformVariableExpression(VariableExpression ve) {\n+        Variable v = ve.getAccessedVariable();\n+        if (v instanceof DynamicVariable) {\n+            Expression result = findStaticFieldOrPropAccessorImportFromModule(v.getName());\n+            if (result != null) {\n+                setSourcePosition(result, ve);\n+                if (inAnnotation) {\n+                    result = transformInlineConstants(result);\n+                }\n+                return result;\n+            }\n+        } else if (v instanceof FieldNode) {\n+            if (inSpecialConstructorCall) { // GROOVY-8819\n+                FieldNode fn = (FieldNode) v;\n+                ClassNode declaringClass = fn.getDeclaringClass();\n+                if (fn.isStatic() && currentClass.isDerivedFrom(declaringClass)) {\n+                    Expression result = new PropertyExpression(new ClassExpression(declaringClass), v.getName());\n+                    result.setSourcePosition(ve);\n+\n+                    return result;\n+                }\n+            }\n+        }\n+        return ve;\n+    }\n+\n+    /**\n+     * Set the source position of toSet including its property expression if it has one.\n+     *\n+     * @param toSet resulting node\n+     * @param origNode original node\n+     */\n+    private static void setSourcePosition(Expression toSet, Expression origNode) {\n+        toSet.setSourcePosition(origNode);\n+        if (toSet instanceof PropertyExpression) {\n+            ((PropertyExpression) toSet).getProperty().setSourcePosition(origNode);\n+        }\n+    }\n+\n+    protected Expression transformMethodCallExpression(MethodCallExpression mce) {\n+        Expression args = transform(mce.getArguments());\n+        Expression method = transform(mce.getMethod());\n+        Expression object = transform(mce.getObjectExpression());\n+        boolean isExplicitThisOrSuper = false;\n+        boolean isExplicitSuper = false;\n+        if (object instanceof VariableExpression) {\n+            VariableExpression ve = (VariableExpression) object;\n+            isExplicitThisOrSuper = !mce.isImplicitThis() && (ve.isThisExpression() || ve.isSuperExpression());\n+            isExplicitSuper = ve.isSuperExpression();\n+        }\n+\n+        if (mce.isImplicitThis() || isExplicitThisOrSuper) {\n+            if (mce.isImplicitThis()) {\n+                if (null == currentClass.tryFindPossibleMethod(mce.getMethodAsString(), args)) {\n+\n+                    Expression ret = findStaticMethodImportFromModule(method, args);\n+                    if (ret != null) {\n+                        setSourcePosition(ret, mce);\n+                        return ret;\n+                    }\n+                    if (method instanceof ConstantExpression && !inLeftExpression) {\n+                        // could be a closure field\n+                        String methodName = (String) ((ConstantExpression) method).getValue();\n+                        ret = findStaticFieldOrPropAccessorImportFromModule(methodName);\n+                        if (ret != null) {\n+                            ret = new MethodCallExpression(ret, \"call\", args);\n+                            setSourcePosition(ret, mce);\n+                            return ret;\n+                        }\n+                    }\n+                }\n+            } else if (currentMethod!=null && currentMethod.isStatic() && isExplicitSuper) {\n+                MethodCallExpression ret = new MethodCallExpression(new ClassExpression(currentClass.getSuperClass()), method, args);\n+                setSourcePosition(ret, mce);\n+                return ret;\n+            }\n+\n+            if (method instanceof ConstantExpression) {\n+                ConstantExpression ce = (ConstantExpression) method;\n+                Object value = ce.getValue();\n+                if (value instanceof String) {\n+                    boolean foundInstanceMethod = false;\n+                    String methodName = (String) value;\n+                    boolean inInnerClass = isInnerClass(currentClass);\n+                    if (currentMethod != null && !currentMethod.isStatic()) {\n+                        if (currentClass.hasPossibleMethod(methodName, args)) {\n+                            foundInstanceMethod = true;\n+                        }\n+                    }\n+                    boolean lookForPossibleStaticMethod = !methodName.equals(\"call\");\n+                    lookForPossibleStaticMethod &= !foundInstanceMethod;\n+                    lookForPossibleStaticMethod |= inSpecialConstructorCall;\n+                    lookForPossibleStaticMethod &= !inInnerClass;\n+                    if (!inClosure && lookForPossibleStaticMethod &&\n+                            (hasPossibleStaticMethod(currentClass, methodName, args, true))\n+                            || hasPossibleStaticProperty(currentClass, methodName)) {\n+                        StaticMethodCallExpression smce = new StaticMethodCallExpression(currentClass, methodName, args);\n+                        setSourcePosition(smce, mce);\n+                        return smce;\n+                    }\n+                    if (!inClosure && inInnerClass && inSpecialConstructorCall && mce.isImplicitThis() && !foundInstanceMethod) {\n+                        if (currentClass.getOuterClass().hasPossibleMethod(methodName, args)) {\n+                            object = new PropertyExpression(new ClassExpression(currentClass.getOuterClass()), new ConstantExpression(\"this\"));\n+                        } else if (hasPossibleStaticMethod(currentClass.getOuterClass(), methodName, args, true)\n+                                || hasPossibleStaticProperty(currentClass.getOuterClass(), methodName)) {\n+                            StaticMethodCallExpression smce = new StaticMethodCallExpression(currentClass.getOuterClass(), methodName, args);\n+                            setSourcePosition(smce, mce);\n+                            return smce;\n+                        }\n+                    }\n+\n+                    if (mce.isImplicitThis() && lookForPossibleStaticMethod && hasPossibleStaticMethod(currentClass, methodName, args, true)) {\n+                        StaticMethodCallExpression result = new StaticMethodCallExpression(currentClass, methodName, args);\n+                        result.setSourcePosition(mce);\n+                        return result;\n+                    }\n+                }\n+            }\n+        }\n+\n+        MethodCallExpression result = new MethodCallExpression(object, method, args);\n+        result.setSafe(mce.isSafe());\n+        result.setImplicitThis(mce.isImplicitThis());\n+        result.setSpreadSafe(mce.isSpreadSafe());\n+        result.setMethodTarget(mce.getMethodTarget());\n+        // GROOVY-6757\n+        result.setGenericsTypes(mce.getGenericsTypes());\n+        setSourcePosition(result, mce);\n+        return result;\n+    }\n+\n+    protected Expression transformConstructorCallExpression(ConstructorCallExpression cce) {\n+        inSpecialConstructorCall = cce.isSpecialCall();\n+        Expression expression = cce.getArguments();\n+        if (expression instanceof TupleExpression) {\n+            TupleExpression tuple = (TupleExpression) expression;\n+            if (tuple.getExpressions().size() == 1) {\n+                expression = tuple.getExpression(0);\n+                if (expression instanceof NamedArgumentListExpression) {\n+                    NamedArgumentListExpression namedArgs = (NamedArgumentListExpression) expression;\n+                    List<MapEntryExpression> entryExpressions = namedArgs.getMapEntryExpressions();\n+                    for (int i = 0; i < entryExpressions.size(); i++) {\n+                        entryExpressions.set(i, (MapEntryExpression) transformMapEntryExpression(entryExpressions.get(i), cce.getType()));\n+                    }\n+                }\n+            }\n+        }\n+        Expression ret = cce.transformExpression(this);\n+        inSpecialConstructorCall = false;\n+        return ret;\n+    }\n+\n+    protected Expression transformClosureExpression(ClosureExpression ce) {\n+        boolean oldInClosure = inClosure;\n+        inClosure = true;\n+        for (Parameter p : getParametersSafe(ce)) {\n+            if (p.hasInitialExpression()) {\n+                p.setInitialExpression(transform(p.getInitialExpression()));\n+            }\n+        }\n+        Statement code = ce.getCode();\n+        if (code != null) code.visit(this);\n+        inClosure = oldInClosure;\n+        return ce;\n+    }\n+\n+    protected Expression transformPropertyExpression(PropertyExpression pe) {\n+        if (currentMethod!=null && currentMethod.isStatic()\n+                && pe.getObjectExpression() instanceof VariableExpression\n+                && ((VariableExpression) pe.getObjectExpression()).isSuperExpression()) {\n+            PropertyExpression pexp = new PropertyExpression(\n+                    new ClassExpression(currentClass.getSuperClass()),\n+                    transform(pe.getProperty())\n+            );\n+            pexp.setSourcePosition(pe);\n+            return pexp;\n+        }\n+        boolean oldInPropertyExpression = inPropertyExpression;\n+        Expression oldFoundArgs = foundArgs;\n+        Expression oldFoundConstant = foundConstant;\n+        inPropertyExpression = true;\n+        foundArgs = null;\n+        foundConstant = null;\n+        Expression objectExpression = transform(pe.getObjectExpression());\n+        boolean candidate = false;\n+        if (objectExpression instanceof MethodCallExpression) {\n+            candidate = ((MethodCallExpression)objectExpression).isImplicitThis();\n+        }\n+\n+        if (foundArgs != null && foundConstant != null && candidate) {\n+            Expression result = findStaticMethodImportFromModule(foundConstant, foundArgs);\n+            if (result != null) {\n+                objectExpression = result;\n+                objectExpression.setSourcePosition(pe);\n+            }\n+        }\n+        inPropertyExpression = oldInPropertyExpression;\n+        foundArgs = oldFoundArgs;\n+        foundConstant = oldFoundConstant;\n+        pe.setObjectExpression(objectExpression);\n+        return pe;\n+    }\n+\n+    private Expression findStaticFieldOrPropAccessorImportFromModule(String name) {\n+        ModuleNode module = currentClass.getModule();\n+        if (module == null) return null;\n+        Map<String, ImportNode> importNodes = module.getStaticImports();\n+        Expression expression;\n+        String accessorName = getAccessorName(name);\n+        // look for one of these:\n+        //   import static MyClass.setProp [as setOtherProp]\n+        //   import static MyClass.getProp [as getOtherProp]\n+        // when resolving prop reference\n+        if (importNodes.containsKey(accessorName)) {\n+            expression = findStaticProperty(importNodes, accessorName);\n+            if (expression != null) return expression;\n+        }\n+        if (accessorName.startsWith(\"get\")) {\n+            accessorName = \"is\" + accessorName.substring(3);\n+            if (importNodes.containsKey(accessorName)) {\n+                expression = findStaticProperty(importNodes, accessorName);\n+                if (expression != null) return expression;\n+            }\n+        }\n+\n+        // look for one of these:\n+        //   import static MyClass.prop [as otherProp]\n+        // when resolving prop or field reference\n+        if (importNodes.containsKey(name)) {\n+            ImportNode importNode = importNodes.get(name);\n+            expression = findStaticPropertyAccessor(importNode.getType(), importNode.getFieldName());\n+            if (expression != null) return expression;\n+            expression = findStaticField(importNode.getType(), importNode.getFieldName());\n+            if (expression != null) return expression;\n+        }\n+        // look for one of these:\n+        //   import static MyClass.*\n+        // when resolving prop or field reference\n+        for (ImportNode importNode : module.getStaticStarImports().values()) {\n+            ClassNode node = importNode.getType();\n+            expression = findStaticPropertyAccessor(node, name);\n+            if (expression != null) return expression;\n+            expression = findStaticField(node, name);\n+            if (expression != null) return expression;\n+        }\n+        return null;\n+    }\n+\n+    private Expression findStaticProperty(Map<String, ImportNode> importNodes, String accessorName) {\n+        Expression result = null;\n+        ImportNode importNode = importNodes.get(accessorName);\n+        ClassNode importClass = importNode.getType();\n+        String importMember = importNode.getFieldName();\n+        result = findStaticPropertyAccessorByFullName(importClass, importMember);\n+        if (result == null) {\n+            result = findStaticPropertyAccessor(importClass, getPropNameForAccessor(importMember));\n+        }\n+        return result;\n+    }\n+\n+    private Expression findStaticMethodImportFromModule(Expression method, Expression args) {\n+        ModuleNode module = currentClass.getModule();\n+        if (module == null || !(method instanceof ConstantExpression)) return null;\n+        Map<String, ImportNode> importNodes = module.getStaticImports();\n+        ConstantExpression ce = (ConstantExpression) method;\n+        Expression expression;\n+        Object value = ce.getValue();\n+        // skip non-Strings, e.g. Integer\n+        if (!(value instanceof String)) return null;\n+        final String name = (String) value;\n+        // look for one of these:\n+        //   import static SomeClass.method [as otherName]\n+        // when resolving methodCall() or getProp() or setProp()\n+        if (importNodes.containsKey(name)) {\n+            ImportNode importNode = importNodes.get(name);\n+            expression = findStaticMethod(importNode.getType(), importNode.getFieldName(), args);\n+            if (expression != null) return expression;\n+            expression = findStaticPropertyAccessorGivenArgs(importNode.getType(), getPropNameForAccessor(importNode.getFieldName()), args);\n+            if (expression != null) {\n+                return new StaticMethodCallExpression(importNode.getType(), importNode.getFieldName(), args);\n+            }\n+        }\n+        // look for one of these:\n+        //   import static SomeClass.someProp [as otherName]\n+        // when resolving getProp() or setProp()\n+        if (isValidAccessorName(name)) {\n+            String propName = getPropNameForAccessor(name);\n+            if (importNodes.containsKey(propName)) {\n+                ImportNode importNode = importNodes.get(propName);\n+                ClassNode importClass = importNode.getType();\n+                String importMember = importNode.getFieldName();\n+                expression = findStaticMethod(importClass, prefix(name) + capitalize(importMember), args);\n+                if (expression != null) return expression;\n+                expression = findStaticPropertyAccessorGivenArgs(importClass, importMember, args);\n+                if (expression != null) {\n+                    return new StaticMethodCallExpression(importClass, prefix(name) + capitalize(importMember), args);\n+                }\n+            }\n+        }\n+        Map<String, ImportNode> starImports = module.getStaticStarImports();\n+        ClassNode starImportType;\n+        if (currentClass.isEnum() && starImports.containsKey(currentClass.getName())) {\n+            ImportNode importNode = starImports.get(currentClass.getName());\n+            starImportType = importNode == null ? null : importNode.getType();\n+            expression = findStaticMethod(starImportType, name, args);\n+            if (expression != null) return expression;\n+        } else {\n+            for (ImportNode importNode : starImports.values()) {\n+                starImportType = importNode == null ? null : importNode.getType();\n+                expression = findStaticMethod(starImportType, name, args);\n+                if (expression != null) return expression;\n+                expression = findStaticPropertyAccessorGivenArgs(starImportType, getPropNameForAccessor(name), args);\n+                if (expression != null) {\n+                    return new StaticMethodCallExpression(starImportType, name, args);\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static String prefix(String name) {\n+        return name.startsWith(\"is\") ? \"is\" : name.substring(0, 3);\n+    }\n+\n+    private String getAccessorName(String name) {\n+        return (inLeftExpression ? \"set\" : \"get\") + capitalize(name);\n+    }\n+\n+    private Expression findStaticPropertyAccessorGivenArgs(ClassNode staticImportType, String propName, Expression args) {\n+        // TODO validate args?\n+        return findStaticPropertyAccessor(staticImportType, propName);\n+    }\n+\n+    private Expression findStaticPropertyAccessor(ClassNode staticImportType, String propName) {\n+        String accessorName = getAccessorName(propName);\n+        Expression accessor = findStaticPropertyAccessorByFullName(staticImportType, accessorName);\n+        if (accessor == null && accessorName.startsWith(\"get\")) {\n+            accessor = findStaticPropertyAccessorByFullName(staticImportType, \"is\" + accessorName.substring(3));\n+        }\n+        if (accessor == null && hasStaticProperty(staticImportType, propName)) {\n+            // args will be replaced\n+            if (inLeftExpression)\n+                accessor = new StaticMethodCallExpression(staticImportType, accessorName, ArgumentListExpression.EMPTY_ARGUMENTS);\n+            else\n+                accessor = new PropertyExpression(new ClassExpression(staticImportType), propName);\n+        }\n+        return accessor;\n+    }\n+\n+    private Expression findStaticPropertyAccessorByFullName(ClassNode staticImportType, String accessorMethodName) {\n+        // anything will do as we only check size == 1\n+        ArgumentListExpression dummyArgs = new ArgumentListExpression();\n+        dummyArgs.addExpression(EmptyExpression.INSTANCE);\n+        return findStaticMethod(staticImportType, accessorMethodName, (inLeftExpression ? dummyArgs : ArgumentListExpression.EMPTY_ARGUMENTS));\n+    }\n+\n+    private static Expression findStaticField(ClassNode staticImportType, String fieldName) {\n+        if (staticImportType.isPrimaryClassNode() || staticImportType.isResolved()) {\n+            FieldNode field = getField(staticImportType, fieldName);\n+            if (field != null && field.isStatic())\n+                return new PropertyExpression(new ClassExpression(staticImportType), fieldName);\n+        }\n+        return null;\n+    }\n+\n+    private static Expression findStaticMethod(ClassNode staticImportType, String methodName, Expression args) {\n+        if (staticImportType.isPrimaryClassNode() || staticImportType.isResolved()) {\n+            if (staticImportType.hasPossibleStaticMethod(methodName, args)) {\n+                return new StaticMethodCallExpression(staticImportType, methodName, args);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    protected SourceUnit getSourceUnit() {\n+        return source;\n+    }\n+}",
                "raw_url": "https://github.com/apache/groovy/raw/4244569bb17d841d7df3828af4321a6e5dcc505a/src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java",
                "sha": "b1a1e56544b6aced59b53247c56a6a84181b4afe",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/4244569bb17d841d7df3828af4321a6e5dcc505a/src/main/java/org/codehaus/groovy/transform/AutoFinalASTTransformation.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/java/org/codehaus/groovy/transform/AutoFinalASTTransformation.java?ref=4244569bb17d841d7df3828af4321a6e5dcc505a",
                "deletions": 1,
                "filename": "src/main/java/org/codehaus/groovy/transform/AutoFinalASTTransformation.java",
                "patch": "@@ -39,6 +39,7 @@\n import java.util.List;\n \n import static org.codehaus.groovy.ast.ClassHelper.make;\n+import static org.codehaus.groovy.ast.tools.ClosureUtils.getParametersSafe;\n \n /**\n  * Handles generation of code for the {@link AutoFinal} annotation.\n@@ -65,7 +66,7 @@ public void visitClosureExpression(ClosureExpression expression) {\n                 if (expression.isSynthetic()) {\n                     return;\n                 }\n-                Parameter[] origParams = expression.getParameters();\n+                Parameter[] origParams = getParametersSafe(expression);\n                 for (Parameter p : origParams) {\n                     p.setModifiers(p.getModifiers() | Modifier.FINAL);\n                 }",
                "raw_url": "https://github.com/apache/groovy/raw/4244569bb17d841d7df3828af4321a6e5dcc505a/src/main/java/org/codehaus/groovy/transform/AutoFinalASTTransformation.java",
                "sha": "176b51e543ba248e942ce0de43fdcb8ed8391cc6",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/groovy/blob/4244569bb17d841d7df3828af4321a6e5dcc505a/src/main/java/org/codehaus/groovy/transform/CategoryASTTransformation.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/java/org/codehaus/groovy/transform/CategoryASTTransformation.java?ref=4244569bb17d841d7df3828af4321a6e5dcc505a",
                "deletions": 10,
                "filename": "src/main/java/org/codehaus/groovy/transform/CategoryASTTransformation.java",
                "patch": "@@ -51,6 +51,10 @@\n import java.util.List;\n import java.util.Set;\n \n+import static org.codehaus.groovy.ast.tools.ClosureUtils.getParametersSafe;\n+import static org.codehaus.groovy.ast.tools.ClosureUtils.hasImplicitParameter;\n+import static org.codehaus.groovy.ast.tools.GeneralUtils.param;\n+import static org.codehaus.groovy.ast.tools.GeneralUtils.params;\n \n /**\n  * Handles generation of code for the @Category annotation.\n@@ -140,7 +144,7 @@ public void visitBlockStatement(BlockStatement block) {\n \n             @Override\n             public void visitClosureExpression(ClosureExpression ce) {\n-                addVariablesToStack(ce.getParameters());\n+                addVariablesToStack(getParametersSafe(ce));\n                 super.visitClosureExpression(ce);\n                 varStack.removeLast();\n             }\n@@ -205,15 +209,10 @@ public Expression transform(Expression exp) {\n                 } else if (exp instanceof ClosureExpression) {\n                     ClosureExpression ce = (ClosureExpression) exp;\n                     ce.getVariableScope().putReferencedLocalVariable((Parameter) parameter.get());\n-                    Parameter[] params = ce.getParameters();\n-                    if (params == null) {\n-                        params = Parameter.EMPTY_ARRAY;\n-                    } else if (params.length == 0) {\n-                        params = new Parameter[]{\n-                                new Parameter(ClassHelper.OBJECT_TYPE, \"it\")\n-                        };\n-                    }\n-                    addVariablesToStack(params);\n+                    addVariablesToStack(\n+                            hasImplicitParameter(ce)\n+                                    ? params(param(ClassHelper.OBJECT_TYPE, \"it\"))\n+                                    : getParametersSafe(ce));\n                     ce.getCode().visit(this);\n                     varStack.removeLast();\n                 }",
                "raw_url": "https://github.com/apache/groovy/raw/4244569bb17d841d7df3828af4321a6e5dcc505a/src/main/java/org/codehaus/groovy/transform/CategoryASTTransformation.java",
                "sha": "443db581beb6c59645ed59c5ae0b0e3d75612ba9",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/groovy/blob/4244569bb17d841d7df3828af4321a6e5dcc505a/src/main/java/org/codehaus/groovy/transform/sc/transformers/ClosureExpressionTransformer.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/java/org/codehaus/groovy/transform/sc/transformers/ClosureExpressionTransformer.java?ref=4244569bb17d841d7df3828af4321a6e5dcc505a",
                "deletions": 6,
                "filename": "src/main/java/org/codehaus/groovy/transform/sc/transformers/ClosureExpressionTransformer.java",
                "patch": "@@ -23,6 +23,8 @@\n import org.codehaus.groovy.ast.expr.Expression;\n import org.codehaus.groovy.ast.stmt.Statement;\n \n+import static org.codehaus.groovy.ast.tools.ClosureUtils.getParametersSafe;\n+\n public class ClosureExpressionTransformer {\n     private final StaticCompilationTransformer transformer;\n \n@@ -31,12 +33,9 @@ public ClosureExpressionTransformer(StaticCompilationTransformer staticCompilati\n     }\n \n     Expression transformClosureExpression(final ClosureExpression expr) {\n-        Parameter[] parameters = expr.getParameters();        \n-        if (parameters!=null) {\n-            for (Parameter parameter : parameters) {\n-                if (parameter.hasInitialExpression()) {\n-                    parameter.setInitialExpression(transformer.transform(parameter.getInitialExpression()));\n-                }\n+        for (Parameter parameter : getParametersSafe(expr)) {\n+            if (parameter.hasInitialExpression()) {\n+                parameter.setInitialExpression(transformer.transform(parameter.getInitialExpression()));\n             }\n         }\n         Statement code = expr.getCode();",
                "raw_url": "https://github.com/apache/groovy/raw/4244569bb17d841d7df3828af4321a6e5dcc505a/src/main/java/org/codehaus/groovy/transform/sc/transformers/ClosureExpressionTransformer.java",
                "sha": "8be64165f6536b9ed0b5250e7b780ac1cb15c093",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/groovy/blob/4244569bb17d841d7df3828af4321a6e5dcc505a/src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java?ref=4244569bb17d841d7df3828af4321a6e5dcc505a",
                "deletions": 18,
                "filename": "src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "patch": "@@ -175,6 +175,7 @@\n import static org.codehaus.groovy.ast.ClassHelper.short_TYPE;\n import static org.codehaus.groovy.ast.ClassHelper.void_WRAPPER_TYPE;\n import static org.codehaus.groovy.ast.GenericsType.GenericsTypeName;\n+import static org.codehaus.groovy.ast.tools.ClosureUtils.getParametersSafe;\n import static org.codehaus.groovy.ast.tools.GeneralUtils.args;\n import static org.codehaus.groovy.ast.tools.GeneralUtils.binX;\n import static org.codehaus.groovy.ast.tools.GeneralUtils.block;\n@@ -831,14 +832,14 @@ public void visitBinaryExpression(BinaryExpression expression) {\n \n                 Expression constructedRightExpression = rightExpression;\n \n-                boolean isMrExprRHS = rightExpression instanceof MethodReferenceExpression && ClassHelper.isFunctionalInterface(lType);\n-                if (isMrExprRHS) {\n+                boolean isMethodRefRHS = rightExpression instanceof MethodReferenceExpression && ClassHelper.isFunctionalInterface(lType);\n+                if (isMethodRefRHS) {\n                     constructedRightExpression = constructLambdaExpressionForMethodReference(lType);\n                 }\n \n                 inferParameterAndReturnTypesOfClosureOnRHS(lType, constructedRightExpression, op);\n \n-                if (isMrExprRHS) {\n+                if (isMethodRefRHS) {\n                     LambdaExpression lambdaExpression = (LambdaExpression) constructedRightExpression;\n                     ClassNode[] argumentTypes =\n                             Arrays.stream(lambdaExpression.getParameters())\n@@ -1002,7 +1003,7 @@ private void inferParameterAndReturnTypesOfClosureOnRHS(ClassNode lType, Express\n                 Tuple2<ClassNode[], ClassNode> typeInfo = GenericsUtils.parameterizeSAM(lType);\n                 ClassNode[] paramTypes = typeInfo.getV1();\n                 ClosureExpression closureExpression = ((ClosureExpression) rightExpression);\n-                Parameter[] closureParameters = closureExpression.getParameters();\n+                Parameter[] closureParameters = getParametersSafe(closureExpression);\n \n                 if (paramTypes.length == closureParameters.length) {\n                     for (int i = 0, n = closureParameters.length; i < n; i++) {\n@@ -2452,11 +2453,8 @@ public void visitClosureExpression(final ClosureExpression expression) {\n         // restore original metadata\n         restoreVariableExpressionMetadata(typesBeforeVisit);\n         typeCheckingContext.isInStaticContext = oldStaticContext;\n-        Parameter[] parameters = expression.getParameters();\n-        if (parameters != null) {\n-            for (Parameter parameter : parameters) {\n-                typeCheckingContext.controlStructureVariables.remove(parameter);\n-            }\n+        for (Parameter parameter : getParametersSafe(expression)) {\n+            typeCheckingContext.controlStructureVariables.remove(parameter);\n         }\n     }\n \n@@ -4520,15 +4518,16 @@ private ClassNode inferSAMTypeGenericsInAssignment(ClassNode samUsage, MethodNod\n         // next we get the block parameter types and set the generics\n         // information just like before\n         // TODO: add vargs handling\n-        Parameter[] closureParams = closureExpression.getParameters();\n-        Parameter[] methodParams = sam.getParameters();\n-        for (int i = 0; i < closureParams.length; i++) {\n-            ClassNode fromClosure = closureParams[i].getType();\n-            ClassNode fromMethod = methodParams[i].getType();\n-            extractGenericsConnections(connections, fromClosure, fromMethod);\n-        }\n-        ClassNode result = applyGenericsContext(connections, samUsage.redirect());\n-        return result;\n+        if (closureExpression.isParameterSpecified()) {\n+            Parameter[] closureParams = closureExpression.getParameters();\n+            Parameter[] methodParams = sam.getParameters();\n+            for (int i = 0; i < closureParams.length; i++) {\n+                ClassNode fromClosure = closureParams[i].getType();\n+                ClassNode fromMethod = methodParams[i].getType();\n+                extractGenericsConnections(connections, fromClosure, fromMethod);\n+            }\n+        }\n+        return applyGenericsContext(connections, samUsage.redirect());\n     }\n \n     protected static ClassNode getGroupOperationResultType(ClassNode a, ClassNode b) {",
                "raw_url": "https://github.com/apache/groovy/raw/4244569bb17d841d7df3828af4321a6e5dcc505a/src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "sha": "0f2b3c3907d52594319ea4f5eef6bce4f69c233c",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/groovy/blob/4244569bb17d841d7df3828af4321a6e5dcc505a/src/test/groovy/transform/stc/ClosuresSTCTest.groovy",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/transform/stc/ClosuresSTCTest.groovy?ref=4244569bb17d841d7df3828af4321a6e5dcc505a",
                "deletions": 0,
                "filename": "src/test/groovy/transform/stc/ClosuresSTCTest.groovy",
                "patch": "@@ -32,6 +32,22 @@ class ClosuresSTCTest extends StaticTypeCheckingTestCase {\n         '''\n     }\n \n+    void testClosureWithoutArgumentsExplicit() {\n+        // GROOVY-9079: no params to statically type check but shouldn't get NPE\n+        assertScript '''\n+            import groovy.transform.CompileStatic\n+            import java.util.concurrent.Callable\n+\n+            @CompileStatic\n+            String makeFoo() {\n+                Callable<String> call = { -> 'foo' }\n+                call()\n+            }\n+\n+            assert makeFoo() == 'foo'\n+        '''\n+    }\n+\n     void testClosureWithArguments() {\n         assertScript '''\n             def printSum = { int a, int b -> print a+b }",
                "raw_url": "https://github.com/apache/groovy/raw/4244569bb17d841d7df3828af4321a6e5dcc505a/src/test/groovy/transform/stc/ClosuresSTCTest.groovy",
                "sha": "108376d96a6a3202aec8d1e2cb1df0c818a44e86",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/groovy/blob/4244569bb17d841d7df3828af4321a6e5dcc505a/src/test/org/codehaus/groovy/transform/AutoFinalTransformBlackBoxTest.groovy",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/transform/AutoFinalTransformBlackBoxTest.groovy?ref=4244569bb17d841d7df3828af4321a6e5dcc505a",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/transform/AutoFinalTransformBlackBoxTest.groovy",
                "patch": "@@ -66,6 +66,22 @@ class AutoFinalTransformBlackBoxTest extends CompilableTestSupport {\n         assertScript(script)\n     }\n \n+    @Test\n+    void testNoargClosureSuccessfullyParsed() {\n+        // GROOVY-9079: no params to make final but shouldn't get NPE\n+        assertScript '''\n+            import groovy.transform.AutoFinal\n+            import java.util.concurrent.Callable\n+\n+            String makeFoo() {\n+                @AutoFinal\n+                Callable<String> call = { -> 'foo' }\n+                call()\n+            }\n+\n+            assert makeFoo() == 'foo'\n+        '''\n+    }\n \n     void assertAutoFinalClassTestScript(final String paramName, final String classPart) {\n         assertAutoFinalTestScriptWithAnnotation(paramName, classPart)",
                "raw_url": "https://github.com/apache/groovy/raw/4244569bb17d841d7df3828af4321a6e5dcc505a/src/test/org/codehaus/groovy/transform/AutoFinalTransformBlackBoxTest.groovy",
                "sha": "a1df9dca6bc4b1ba457e7c84c9255e4a13cfb8a8",
                "status": "modified"
            }
        ],
        "message": "GROOVY-9079: STC: NPE in StaticTypeCheckingVisitor.inferSAMTypeGenericsInAssignment\n\nIncludes some minor refactoring and fix for @AutoFinal",
        "parent": "https://github.com/apache/groovy/commit/dbe9d2d25c3c926f52d3c8b988893987148a63b4",
        "patched_files": [
            "AutoFinalASTTransformation.java",
            "StaticTypeCheckingVisitor.java",
            "CategoryASTTransformation.java",
            "ClosureUtils.java",
            "StaticImportVisitor.java",
            "ResolveVisitor.java",
            "ClosureExpressionTransformer.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "AutoFinalTransformBlackBoxTest.java",
            "ClosuresSTCTest.java"
        ]
    },
    "groovy_428f5f7": {
        "bug_id": "groovy_428f5f7",
        "commit": "https://github.com/apache/groovy/commit/428f5f769a031b1e3483270d0e34611e941c9b54",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/428f5f769a031b1e3483270d0e34611e941c9b54/src/main/groovy/lang/GroovyClassLoader.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/GroovyClassLoader.java?ref=428f5f769a031b1e3483270d0e34611e941c9b54",
                "deletions": 2,
                "filename": "src/main/groovy/lang/GroovyClassLoader.java",
                "patch": "@@ -339,8 +339,10 @@ public ProtectionDomain run() {\n             }\n         });\n         PermissionCollection myPerms = myDomain.getPermissions();\n-        for (Enumeration<Permission> elements = myPerms.elements(); elements.hasMoreElements();) {\n-            perms.add(elements.nextElement());\n+        if(myPerms != null) {\n+            for (Enumeration<Permission> elements = myPerms.elements(); elements.hasMoreElements();) {\n+                perms.add(elements.nextElement());\n+            }\n         }\n         perms.setReadOnly();\n         return perms;",
                "raw_url": "https://github.com/apache/groovy/raw/428f5f769a031b1e3483270d0e34611e941c9b54/src/main/groovy/lang/GroovyClassLoader.java",
                "sha": "7ed98e0829a565103959b46a836addf4dd0f8eaf",
                "status": "modified"
            }
        ],
        "message": "GROOVY-3542\nAdded a null check for permissions returned by ProtectionDomain.getPermissions() call to avoid reported NPE.\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@16478 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/8bf7910c1b3b890b79dcd679a003663f1ac51671",
        "patched_files": [
            "GroovyClassLoader.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "GroovyClassLoaderTest.java"
        ]
    },
    "groovy_4446422": {
        "bug_id": "groovy_4446422",
        "commit": "https://github.com/apache/groovy/commit/4446422142525a9c75bb0b479a746eeb83493de4",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/4446422142525a9c75bb0b479a746eeb83493de4/src/main/org/codehaus/groovy/transform/ImmutableASTTransformation.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/ImmutableASTTransformation.java?ref=4446422142525a9c75bb0b479a746eeb83493de4",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/transform/ImmutableASTTransformation.java",
                "patch": "@@ -406,6 +406,7 @@ private Statement createConstructorStatement(ClassNode cNode, PropertyNode pNode\n             statement = createConstructorStatementCollection(fNode);\n         } else if (fieldType.isResolved()) {\n             addError(createErrorMessage(cNode.getName(), fNode.getName(), fieldType.getName(), \"compiling\"), fNode);\n+            statement = EmptyStatement.INSTANCE;\n         } else {\n             statement = createConstructorStatementGuarded(cNode, fNode);\n         }",
                "raw_url": "https://github.com/apache/groovy/raw/4446422142525a9c75bb0b479a746eeb83493de4/src/main/org/codehaus/groovy/transform/ImmutableASTTransformation.java",
                "sha": "8a1e46c2c4e7e476af1acef582fcfc957a10b511",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/groovy/blob/4446422142525a9c75bb0b479a746eeb83493de4/src/test/org/codehaus/groovy/transform/ImmutableTransformTest.groovy",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/transform/ImmutableTransformTest.groovy?ref=4446422142525a9c75bb0b479a746eeb83493de4",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/transform/ImmutableTransformTest.groovy",
                "patch": "@@ -557,4 +557,17 @@ class ImmutableTransformTest extends GroovyShellTestCase {\n             assert items.list2.class.name.contains('Unmodifiable')\r\n         '''\r\n     }\r\n+\r\n+    // GROOVY-5449\r\n+    void testShouldNotThrowNPE() {\r\n+        def msg = shouldFail(RuntimeException) {\r\n+            evaluate '''\r\n+            @groovy.transform.Immutable\r\n+            class Person {\r\n+                def name\r\n+            }\r\n+            '''\r\n+        }\r\n+        assert msg.contains('@Immutable processor doesn\\'t know how to handle field \\'name\\' of type \\'java.lang.Object or def\\'')\r\n+    }\r\n }\r",
                "raw_url": "https://github.com/apache/groovy/raw/4446422142525a9c75bb0b479a746eeb83493de4/src/test/org/codehaus/groovy/transform/ImmutableTransformTest.groovy",
                "sha": "37f2ab5643c31cc384069b7a95791aa969bb608c",
                "status": "modified"
            }
        ],
        "message": "GROOVY-5449: @Immutable should not throw NPE if an unmanageable type is used",
        "parent": "https://github.com/apache/groovy/commit/fe42125388004a5cdcf1111b32254e9ca5fe1cc3",
        "patched_files": [
            "ImmutableASTTransformation.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "ImmutableTransformTest.java"
        ]
    },
    "groovy_445c2d2": {
        "bug_id": "groovy_445c2d2",
        "commit": "https://github.com/apache/groovy/commit/445c2d20016b1951d05b8073a302b732e1fd19dc",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/groovy/blob/445c2d20016b1951d05b8073a302b732e1fd19dc/src/main/org/codehaus/groovy/transform/trait/TraitASTTransformation.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/trait/TraitASTTransformation.java?ref=445c2d20016b1951d05b8073a302b732e1fd19dc",
                "deletions": 6,
                "filename": "src/main/org/codehaus/groovy/transform/trait/TraitASTTransformation.java",
                "patch": "@@ -15,6 +15,7 @@\n  */\n package org.codehaus.groovy.transform.trait;\n \n+import groovy.transform.CompilationUnitAware;\n import org.codehaus.groovy.ast.ASTNode;\n import org.codehaus.groovy.ast.AnnotatedNode;\n import org.codehaus.groovy.ast.AnnotationNode;\n@@ -34,8 +35,11 @@\n import org.codehaus.groovy.ast.stmt.BlockStatement;\n import org.codehaus.groovy.ast.stmt.ExpressionStatement;\n import org.codehaus.groovy.ast.stmt.Statement;\n+import org.codehaus.groovy.classgen.VariableScopeVisitor;\n import org.codehaus.groovy.classgen.Verifier;\n+import org.codehaus.groovy.control.CompilationUnit;\n import org.codehaus.groovy.control.CompilePhase;\n+import org.codehaus.groovy.control.ResolveVisitor;\n import org.codehaus.groovy.control.SourceUnit;\n import org.codehaus.groovy.syntax.SyntaxException;\n import org.codehaus.groovy.syntax.Token;\n@@ -69,10 +73,23 @@ public void visit(ASTNode[] nodes, SourceUnit source) {\n             ClassNode cNode = (ClassNode) parent;\n             checkNotInterface(cNode, TraitConstants.TRAIT_TYPE_NAME);\n             checkNoConstructor(cNode);\n+            replaceExtendsByImplements(cNode);\n             createHelperClass(cNode);\n         }\n     }\n \n+    private void replaceExtendsByImplements(final ClassNode cNode) {\n+        ClassNode superClass = cNode.getSuperClass();\n+        if (TraitConstants.isTrait(superClass)) {\n+            // move from super class to interface;\n+            cNode.setSuperClass(ClassHelper.OBJECT_TYPE);\n+            cNode.addInterface(superClass);\n+            // we need to resolve again!\n+            VariableScopeVisitor scopeVisitor = new VariableScopeVisitor(unit);\n+            scopeVisitor.visitClass(cNode);\n+        }\n+    }\n+\n     private void checkNoConstructor(final ClassNode cNode) {\n         if (!cNode.getDeclaredConstructors().isEmpty()) {\n             addError(\"Error processing trait '\" + cNode.getName() + \"'. \" +\n@@ -95,12 +112,6 @@ private void createHelperClass(final ClassNode cNode) {\n                 null\n         );\n         cNode.setModifiers(ACC_PUBLIC | ACC_INTERFACE | ACC_ABSTRACT);\n-        ClassNode superClass = cNode.getSuperClass();\n-        if (TraitConstants.isTrait(superClass)) {\n-            // move from super class to interface\n-            cNode.setSuperClass(ClassHelper.OBJECT_TYPE.getPlainNodeReference());\n-            cNode.addInterface(superClass);\n-        }\n \n         MethodNode initializer = new MethodNode(\n                 TraitConstants.STATIC_INIT_METHOD,",
                "raw_url": "https://github.com/apache/groovy/raw/445c2d20016b1951d05b8073a302b732e1fd19dc/src/main/org/codehaus/groovy/transform/trait/TraitASTTransformation.java",
                "sha": "c1614de64f4d8f92ff7449f8d9cf826d8d5f2804",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/groovy/blob/445c2d20016b1951d05b8073a302b732e1fd19dc/src/test/org/codehaus/groovy/transform/traitx/TraitASTTransformationTest.groovy",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/transform/traitx/TraitASTTransformationTest.groovy?ref=445c2d20016b1951d05b8073a302b732e1fd19dc",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/transform/traitx/TraitASTTransformationTest.groovy",
                "patch": "@@ -812,6 +812,22 @@ assert MyEnum.X.bar == 123 && MyEnum.Y.bar == 0\n         '''\n     }\n \n+    void testShouldNotThrowNPEWithInheritanceUsingExtends() {\n+        assertScript '''\n+trait Named {\n+    String name\n+}\n+\n+trait NameSpeakable extends Named {\n+    String speak() { \"My name is $name\" }\n+}\n+\n+class Phone implements NameSpeakable {}\n+\n+def phone = new Phone(name: 'Galaxy S3')\n+assert phone.speak() == 'My name is Galaxy S3\\''''\n+    }\n+\n     static trait TestTrait {\n         int a() { 123 }\n     }",
                "raw_url": "https://github.com/apache/groovy/raw/445c2d20016b1951d05b8073a302b732e1fd19dc/src/test/org/codehaus/groovy/transform/traitx/TraitASTTransformationTest.groovy",
                "sha": "ca813ef7aac78ae24031ee749a24e4460c60c456",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE when trait is defined using \"extends\" and super-trait defines a field/property",
        "parent": "https://github.com/apache/groovy/commit/24090c1477168f764105f450339401a47b4f30ec",
        "patched_files": [
            "TraitASTTransformation.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "TraitASTTransformationTest.java"
        ]
    },
    "groovy_44f25ae": {
        "bug_id": "groovy_44f25ae",
        "commit": "https://github.com/apache/groovy/commit/44f25aec40eb2eef9c69ad051492667f9debb2c2",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/44f25aec40eb2eef9c69ad051492667f9debb2c2/src/main/org/codehaus/groovy/runtime/InvokerHelper.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/InvokerHelper.java?ref=44f25aec40eb2eef9c69ad051492667f9debb2c2",
                "deletions": 4,
                "filename": "src/main/org/codehaus/groovy/runtime/InvokerHelper.java",
                "patch": "@@ -314,16 +314,14 @@ public static Matcher findRegex(Object left, Object right) {\n      * @param right regular expression to compare the string to\n      */\n     public static boolean matchRegex(Object left, Object right) {\n+    \tif(left == null || right == null) return false;\n         Pattern pattern;\n         if (right instanceof Pattern) {\n             pattern = (Pattern) right;\n         } else {\n             pattern = Pattern.compile(toString(right));\n         }\n-        String stringToCompare = null;\n-        if(left != null) {\n-        \tstringToCompare = toString(left);\n-        }\n+        String stringToCompare = toString(left);\n         Matcher matcher = pattern.matcher(stringToCompare);\n         RegexSupport.setLastMatcher(matcher);\n         return matcher.matches();",
                "raw_url": "https://github.com/apache/groovy/raw/44f25aec40eb2eef9c69ad051492667f9debb2c2/src/main/org/codehaus/groovy/runtime/InvokerHelper.java",
                "sha": "8c0b1e5709fac7787729df4452dfdd0252bbe7ee",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/groovy/blob/44f25aec40eb2eef9c69ad051492667f9debb2c2/src/test/groovy/bugs/Groovy3718Bug.groovy",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/bugs/Groovy3718Bug.groovy?ref=44f25aec40eb2eef9c69ad051492667f9debb2c2",
                "deletions": 10,
                "filename": "src/test/groovy/bugs/Groovy3718Bug.groovy",
                "patch": "@@ -2,15 +2,12 @@ package groovy.bugs\n \r\n class Groovy3718Bug extends GroovyTestCase {\r\n     void testPatternMatchOfNull() {\r\n-    \tdef doNullMatch1 = { ->\r\n-    \t\tnull ==~ /[^0-9]+/\r\n-\t    }\r\n-\t\r\n-\t    def doNullMatch2 = { ->\r\n-\t        null ==~ /[0-9]+/\r\n-\t    }\r\n-    \t\r\n-    \tshouldFail NullPointerException, doNullMatch1\r\n-        shouldFail NullPointerException, doNullMatch2\r\n+\t\tassertFalse null ==~ /[^0-9]+/\r\n+\t\t\r\n+\t\tassertFalse null ==~ /[0-9]+/\r\n+\r\n+\t\tassertFalse \"test\" ==~ null\r\n+\t\t\r\n+\t\tassertFalse null ==~ null\r\n     }\r\n }\r",
                "raw_url": "https://github.com/apache/groovy/raw/44f25aec40eb2eef9c69ad051492667f9debb2c2/src/test/groovy/bugs/Groovy3718Bug.groovy",
                "sha": "e831bb3bcadfa2dd9e8c75350d8a5ec96ace8225",
                "status": "modified"
            }
        ],
        "message": "GROOVY-3718\nAfter the discussion on the dev list, it has been decided to return false for null values/patterns instead of NPEs that result from Java.\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@17540 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/9eccac2d4cfb40f97ab9f2a807118e0d2b8b3521",
        "patched_files": [
            "InvokerHelper.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "InvokerHelperTest.java"
        ]
    },
    "groovy_456aa4d": {
        "bug_id": "groovy_456aa4d",
        "commit": "https://github.com/apache/groovy/commit/456aa4dd37dbcebcfb263db2914b2d84246bc30f",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/456aa4dd37dbcebcfb263db2914b2d84246bc30f/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java?ref=456aa4dd37dbcebcfb263db2914b2d84246bc30f",
                "deletions": 4,
                "filename": "src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java",
                "patch": "@@ -15929,7 +15929,7 @@ public static BigInteger toBigInteger(Number self) {\n      * @since 1.0\n      */\n     public static Boolean and(Boolean left, Boolean right) {\n-        return left && right;\n+        return left && Boolean.TRUE.equals(right);\n     }\n \n     /**\n@@ -15941,7 +15941,7 @@ public static Boolean and(Boolean left, Boolean right) {\n      * @since 1.0\n      */\n     public static Boolean or(Boolean left, Boolean right) {\n-        return left || right;\n+        return left || Boolean.TRUE.equals(right);\n     }\n \n     /**\n@@ -15953,7 +15953,7 @@ public static Boolean or(Boolean left, Boolean right) {\n      * @since 1.8.3\n      */\n     public static Boolean implies(Boolean left, Boolean right) {\n-        return !left || right;\n+        return !left || Boolean.TRUE.equals(right);\n     }\n \n     /**\n@@ -15965,7 +15965,7 @@ public static Boolean implies(Boolean left, Boolean right) {\n      * @since 1.0\n      */\n     public static Boolean xor(Boolean left, Boolean right) {\n-        return left ^ right;\n+        return left ^ Boolean.TRUE.equals(right);\n     }\n \n //    public static Boolean negate(Boolean left) {",
                "raw_url": "https://github.com/apache/groovy/raw/456aa4dd37dbcebcfb263db2914b2d84246bc30f/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java",
                "sha": "e77ddb2f1741104cd7760347836c7c3ae2bfb088",
                "status": "modified"
            },
            {
                "additions": 43,
                "blob_url": "https://github.com/apache/groovy/blob/456aa4dd37dbcebcfb263db2914b2d84246bc30f/src/spec/test/OperatorsTest.groovy",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/spec/test/OperatorsTest.groovy?ref=456aa4dd37dbcebcfb263db2914b2d84246bc30f",
                "deletions": 1,
                "filename": "src/spec/test/OperatorsTest.groovy",
                "patch": "@@ -607,4 +607,46 @@ assert (b1 + 11).size == 15\n             assert str1 == str2\n             '''\n     }\n-}\n+\n+    void testBooleanOr() {\n+        assertScript '''\n+boolean trueValue1 = true, trueValue2 = true, trueValue3 = true\n+boolean falseValue1 = false, falseValue2 = false, falseValue3 = false\n+\n+assert (trueValue1 |= true)\n+assert (trueValue2 |= false)\n+assert (trueValue3 |= null)\n+assert (falseValue1 |= true)\n+assert !(falseValue2 |= false)\n+assert !(falseValue3 |= null)\n+'''\n+    }\n+\n+    void testBooleanAnd() {\n+        assertScript '''\n+boolean trueValue1 = true, trueValue2 = true, trueValue3 = true\n+boolean falseValue1 = false, falseValue2 = false, falseValue3 = false\n+\n+assert (trueValue1 &= true)\n+assert !(trueValue2 &= false)\n+assert !(trueValue3 &= null)\n+assert !(falseValue1 &= true)\n+assert !(falseValue2 &= false)\n+assert !(falseValue3 &= null)\n+'''\n+    }\n+\n+    void testBooleanXor() {\n+        assertScript '''\n+boolean trueValue1 = true, trueValue2 = true, trueValue3 = true\n+boolean falseValue1 = false, falseValue2 = false, falseValue3 = false\n+\n+assert !(trueValue1 ^= true)\n+assert (trueValue2 ^= false)\n+assert (trueValue3 ^= null)\n+assert (falseValue1 ^= true)\n+assert !(falseValue2 ^= false)\n+assert !(falseValue3 ^= null)\n+'''\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/groovy/raw/456aa4dd37dbcebcfb263db2914b2d84246bc30f/src/spec/test/OperatorsTest.groovy",
                "sha": "46b87f7e7b3f6a49e7782e059d8d10d6f5944b2d",
                "status": "modified"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/groovy/blob/456aa4dd37dbcebcfb263db2914b2d84246bc30f/src/test/org/codehaus/groovy/runtime/DefaultGroovyMethodsTest.groovy",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/runtime/DefaultGroovyMethodsTest.groovy?ref=456aa4dd37dbcebcfb263db2914b2d84246bc30f",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/runtime/DefaultGroovyMethodsTest.groovy",
                "patch": "@@ -279,4 +279,40 @@ public class DefaultGroovyMethodsTest extends GroovyTestCase {\n             delegate.iterator()\n         }\n     }\n+\n+    public void testBooleanOr() {\n+        assertTrue(DefaultGroovyMethods.or(true, true))\n+        assertTrue(DefaultGroovyMethods.or(true, false))\n+        assertTrue(DefaultGroovyMethods.or(false, true))\n+        assertFalse(DefaultGroovyMethods.or(false, false))\n+        assertFalse(DefaultGroovyMethods.or(false, null))\n+        assertTrue(DefaultGroovyMethods.or(true, null))\n+    }\n+\n+    public void testBooleanAnd() {\n+        assertTrue(DefaultGroovyMethods.and(true, true))\n+        assertFalse(DefaultGroovyMethods.and(true, false))\n+        assertFalse(DefaultGroovyMethods.and(false, true))\n+        assertFalse(DefaultGroovyMethods.and(false, false))\n+        assertFalse(DefaultGroovyMethods.and(false, null))\n+        assertFalse(DefaultGroovyMethods.and(true, null))\n+    }\n+\n+    public void testBooleanXor() {\n+        assertFalse(DefaultGroovyMethods.xor(true, true))\n+        assertTrue(DefaultGroovyMethods.xor(true, false))\n+        assertTrue(DefaultGroovyMethods.xor(false, true))\n+        assertFalse(DefaultGroovyMethods.xor(false, false))\n+        assertFalse(DefaultGroovyMethods.xor(false, null))\n+        assertTrue(DefaultGroovyMethods.xor(true, null))\n+    }\n+\n+    public void testBooleanImplication() {\n+        assertTrue(DefaultGroovyMethods.implies(true, true))\n+        assertFalse(DefaultGroovyMethods.implies(true, false))\n+        assertTrue(DefaultGroovyMethods.implies(false, true))\n+        assertTrue(DefaultGroovyMethods.implies(false, false))\n+        assertTrue(DefaultGroovyMethods.implies(false, null))\n+        assertFalse(DefaultGroovyMethods.implies(true, null))\n+    }\n }",
                "raw_url": "https://github.com/apache/groovy/raw/456aa4dd37dbcebcfb263db2914b2d84246bc30f/src/test/org/codehaus/groovy/runtime/DefaultGroovyMethodsTest.groovy",
                "sha": "2c1c0d723e7a6467c62ace0a97dfa8f480a6e5f9",
                "status": "modified"
            }
        ],
        "message": "GROOVY-8200 - Shorthand |= results in NPE (closes #555)",
        "parent": "https://github.com/apache/groovy/commit/65fcb6a7c8b2444ec6d7e848dea94f13484b5ab4",
        "patched_files": [
            "DefaultGroovyMethods.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "DefaultGroovyMethodsTest.java",
            "OperatorsTest.java"
        ]
    },
    "groovy_47f9aba": {
        "bug_id": "groovy_47f9aba",
        "commit": "https://github.com/apache/groovy/commit/47f9aba12c7d2c706fd82355f251d581ef3797f9",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/47f9aba12c7d2c706fd82355f251d581ef3797f9/src/main/org/codehaus/groovy/transform/sc/transformers/BinaryExpressionTransformer.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/sc/transformers/BinaryExpressionTransformer.java?ref=47f9aba12c7d2c706fd82355f251d581ef3797f9",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/transform/sc/transformers/BinaryExpressionTransformer.java",
                "patch": "@@ -84,7 +84,10 @@ Expression transformBinaryExpression(final BinaryExpression bin) {\n                 if (!rightExpression.getType().equals(declarationType)\n                         && wrapper.isDerivedFrom(ClassHelper.Number_TYPE)\n                         && WideningCategories.isDoubleCategory(unwrapper)) {\n-                    return optimizeConstantInitialization(bin, operation, (ConstantExpression) rightExpression, leftExpression, declarationType);\n+                    ConstantExpression constant = (ConstantExpression) rightExpression;\n+                    if (constant.getValue()!=null) {\n+                        return optimizeConstantInitialization(bin, operation, constant, leftExpression, declarationType);\n+                    }\n                 }\n             }\n         }",
                "raw_url": "https://github.com/apache/groovy/raw/47f9aba12c7d2c706fd82355f251d581ef3797f9/src/main/org/codehaus/groovy/transform/sc/transformers/BinaryExpressionTransformer.java",
                "sha": "9380f6b29294f039c5effc5d17f1a1949220441a",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/groovy/blob/47f9aba12c7d2c706fd82355f251d581ef3797f9/src/test/org/codehaus/groovy/classgen/asm/sc/Groovy7222OptimizationsTest.groovy",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/classgen/asm/sc/Groovy7222OptimizationsTest.groovy?ref=47f9aba12c7d2c706fd82355f251d581ef3797f9",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/classgen/asm/sc/Groovy7222OptimizationsTest.groovy",
                "patch": "@@ -94,4 +94,15 @@ class Groovy7222OptimizationsTest extends StaticTypeCheckingTestCase implements\n             assert !bytecode.contains('java/math/BigDecimal')\n         }\n     }\n+\n+    void testShouldNotThrowNPE() {\n+        assertScript '''\n+            @groovy.transform.CompileStatic\n+            void foo() {\n+              Double d = null\n+            }\n+\n+            foo()\n+        '''\n+    }\n }",
                "raw_url": "https://github.com/apache/groovy/raw/47f9aba12c7d2c706fd82355f251d581ef3797f9/src/test/org/codehaus/groovy/classgen/asm/sc/Groovy7222OptimizationsTest.groovy",
                "sha": "44b659782015409b49f10d86b99c8298e35a4711",
                "status": "modified"
            }
        ],
        "message": "GROOVY-7230: Fix NPE in constant initialization optimizer",
        "parent": "https://github.com/apache/groovy/commit/a6541f4bc7681e396f6693544495f56f281c8499",
        "patched_files": [
            "BinaryExpressionTransformer.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "Groovy7222OptimizationsTest.java"
        ]
    },
    "groovy_486da8d": {
        "bug_id": "groovy_486da8d",
        "commit": "https://github.com/apache/groovy/commit/486da8d7b41e72315cdeaddf2d06e859336eab4f",
        "file": [
            {
                "additions": 92,
                "blob_url": "https://github.com/apache/groovy/blob/486da8d7b41e72315cdeaddf2d06e859336eab4f/src/main/groovy/servlet/GroovyServlet.java",
                "changes": 177,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/servlet/GroovyServlet.java?ref=486da8d7b41e72315cdeaddf2d06e859336eab4f",
                "deletions": 85,
                "filename": "src/main/groovy/servlet/GroovyServlet.java",
                "patch": "@@ -92,93 +92,100 @@\n  */\n public class GroovyServlet extends AbstractHttpServlet {\n \n-  /**\n-   * The script engine executing the Groovy scripts for this servlet\n-   */\n-  private static GroovyScriptEngine gse;\n-\n-  /**\n-   * Initialize the GroovyServlet.\n-   *\n-   * @throws ServletException\n-   *  if this method encountered difficulties\n-   */\n-  public void init(ServletConfig config) throws ServletException {\n-    super.init(config);\n-\n-    // Set up the scripting engine\n-    gse = new GroovyScriptEngine(this);\n-\n-    servletContext.log(\"Groovy servlet initialized\");\n-  }\n-\n-  /**\n-   * Handle web requests to the GroovyServlet\n-   */\n-  public void service(HttpServletRequest request,\n-      HttpServletResponse response) throws IOException {\n-\n-    // Get the script path from the request - include aware (GROOVY-815)\n-    final String scriptUri = getScriptUri(request);\n-\n-    // Set it to HTML by default\n-    response.setContentType(\"text/html\");\n-\n-    // Set up the script context\n-    final Binding binding = new ServletBinding(request, response, servletContext);\n-\n-    // Run the script\n-    try {\n-      Closure closure = new Closure(gse) {\n-\n-        public Object call() {\n-          try {\n-            return ((GroovyScriptEngine) getDelegate()).run(scriptUri, binding);\n-          }\n-          catch (ResourceException e) {\n-            throw new RuntimeException(e);\n-          }\n-          catch (ScriptException e) {\n-            throw new RuntimeException(e);\n-          }\n-        }\n-\n-      };\n-      GroovyCategorySupport.use(ServletCategory.class, closure);\n-      // Set reponse code 200 and flush buffers\n-      response.setStatus(HttpServletResponse.SC_OK);\n-      response.flushBuffer();\n-      // log(\"Flushed response buffer.\");\n+    /**\n+     * The script engine executing the Groovy scripts for this servlet\n+     */\n+    private static GroovyScriptEngine gse;\n+\n+    /**\n+     * Initialize the GroovyServlet.\n+     *\n+     * @throws ServletException\n+     *  if this method encountered difficulties\n+     */\n+    public void init(ServletConfig config) throws ServletException {\n+        super.init(config);\n+\n+        // Set up the scripting engine\n+        gse = new GroovyScriptEngine(this);\n+\n+        servletContext.log(\"Groovy servlet initialized on \" + gse + \".\");\n     }\n-    catch (RuntimeException re) {\n-      StringBuffer error = new StringBuffer(\"GroovyServlet Error: \");\n-      error.append(\" script: '\");\n-      error.append(scriptUri);\n-      error.append(\"': \");\n-      Throwable e = re.getCause();\n-      if (e instanceof ResourceException) {\n-        error.append(\" Script not found, sending 404.\");\n-        servletContext.log(error.toString());\n-        System.out.println(error.toString());\n-        response.sendError(HttpServletResponse.SC_NOT_FOUND);\n-      }\n-      else {\n-        // write the script errors (if any) to the servlet context's log\n-        if (re.getMessage() != null)\n-          error.append(re.getMessage());\n-\n-        if (e != null) {\n-          servletContext.log(\"An error occurred processing the request\", e);\n-        }\n-        else {\n-          servletContext.log(\"An error occurred processing the request\", re);\n+\n+    /**\n+     * Handle web requests to the GroovyServlet\n+     */\n+    public void service(HttpServletRequest request, HttpServletResponse response) throws IOException {\n+\n+        // Get the script path from the request - include aware (GROOVY-815)\n+        final String scriptUri = getScriptUri(request);\n+\n+        // Set it to HTML by default\n+        response.setContentType(\"text/html\");\n+\n+        // Set up the script context\n+        final Binding binding = new ServletBinding(request, response, servletContext);\n+\n+        // Run the script\n+        try {\n+            Closure closure = new Closure(gse) {\n+\n+                public Object call() {\n+                    try {\n+                        return ((GroovyScriptEngine) getDelegate()).run(scriptUri, binding);\n+                    } catch (ResourceException e) {\n+                        throw new RuntimeException(e);\n+                    } catch (ScriptException e) {\n+                        throw new RuntimeException(e);\n+                    }\n+                }\n+\n+            };\n+            GroovyCategorySupport.use(ServletCategory.class, closure);\n+            /*\n+             * Set reponse code 200.\n+             */\n+            response.setStatus(HttpServletResponse.SC_OK);\n+        } catch (RuntimeException runtimeException) {\n+            StringBuffer error = new StringBuffer(\"GroovyServlet Error: \");\n+            error.append(\" script: '\");\n+            error.append(scriptUri);\n+            error.append(\"': \");\n+            Throwable e = runtimeException.getCause();\n+            /*\n+             * Null cause?!\n+             */\n+            if (e == null) {\n+                error.append(\" Script processing failed.\");\n+                servletContext.log(error.toString());\n+                System.err.println(error.toString());\n+                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n+                return;\n+            }\n+            /*\n+             * Resource not found.\n+             */\n+            if (e instanceof ResourceException) {\n+                error.append(\" Script not found, sending 404.\");\n+                servletContext.log(error.toString());\n+                System.err.println(error.toString());\n+                response.sendError(HttpServletResponse.SC_NOT_FOUND);\n+                return;\n+            }\n+            /*\n+             * Other internal error. Perhaps syntax?! \n+             */\n+            servletContext.log(\"An error occurred processing the request\", e);\n+            servletContext.log(error.toString());\n+            System.err.println(error.toString());\n+            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.toString());\n+        } finally {\n+            /*\n+             * Finally, flush the response buffer.\n+             */\n+            response.flushBuffer();\n+            // servletContext.log(\"Flushed response buffer.\");\n         }\n-        servletContext.log(error.toString());\n-        System.out.println(error.toString());\n-        response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.toString());\n-      }\n     }\n \n-  }\n-\n }",
                "raw_url": "https://github.com/apache/groovy/raw/486da8d7b41e72315cdeaddf2d06e859336eab4f/src/main/groovy/servlet/GroovyServlet.java",
                "sha": "4fa7c611b640067473994d65ef09e558bfc74139",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE in catch block and re-formatted the entire file to the Groovy code style. Sorry for the not nice diff.\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@2276 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/b31711d5851cbe4d9076ffa7738e9411d24f9308",
        "patched_files": [
            "GroovyServlet.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "GroovyServletTest.java"
        ]
    },
    "groovy_4d3a020": {
        "bug_id": "groovy_4d3a020",
        "commit": "https://github.com/apache/groovy/commit/4d3a020b5cd8b9549498716e48f45c1b79ab8e99",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/4d3a020b5cd8b9549498716e48f45c1b79ab8e99/src/main/org/codehaus/groovy/runtime/MetaClassHelper.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/MetaClassHelper.java?ref=4d3a020b5cd8b9549498716e48f45c1b79ab8e99",
                "deletions": 2,
                "filename": "src/main/org/codehaus/groovy/runtime/MetaClassHelper.java",
                "patch": "@@ -278,12 +278,12 @@ private static int getPrimitiveDistance(Class from, Class to) {\n     }\n     \n     private static int getMaximumInterfaceDistance(Class c, Class interfaceClass) {\n-        if (c==interfaceClass) return 0;\n+        if (c==null || c==interfaceClass) return 0;\n         Class[] interfaces = c.getInterfaces();\n         int max = 0;\n         for (int i=0; i<interfaces.length; i++) {\n             int sub = 0;\n-            if (interfaces[i].isAssignableFrom(c)) {\n+            if (interfaces[i].isAssignableFrom(interfaceClass)) {\n                 sub = 1+ getMaximumInterfaceDistance(interfaces[i],interfaceClass);\n             }\n             max = Math.max(max,sub);",
                "raw_url": "https://github.com/apache/groovy/raw/4d3a020b5cd8b9549498716e48f45c1b79ab8e99/src/main/org/codehaus/groovy/runtime/MetaClassHelper.java",
                "sha": "aba2584a4fcfbe67ef659b2ebf911399e37cfcbc",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE bug in getMaximumInterfaceDistance\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@5082 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/3cd7a5079e43b61dbf1ff74e8021bd28889cc707",
        "patched_files": [
            "MetaClassHelper.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "MetaClassHelperTest.java"
        ]
    },
    "groovy_5578a5a": {
        "bug_id": "groovy_5578a5a",
        "commit": "https://github.com/apache/groovy/commit/5578a5a72aeab8a03d8fd5419b3228398e78d986",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/5578a5a72aeab8a03d8fd5419b3228398e78d986/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java?ref=5578a5a72aeab8a03d8fd5419b3228398e78d986",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java",
                "patch": "@@ -193,6 +193,7 @@ static ClassNode firstCommonSuperType(List<ClassNode> nodes) {\n      * @return\n      */\n     static boolean allParametersAndArgumentsMatch(Parameter[] params, ClassNode[] args) {\n+        if (params==null) return args.length==0;\n         // we already know the lengths are equal\n         for (int i = 0; i < params.length; i++) {\n             if (!isAssignableTo(params[i].getType(), args[i])) return false;",
                "raw_url": "https://github.com/apache/groovy/raw/5578a5a72aeab8a03d8fd5419b3228398e78d986/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java",
                "sha": "417b737faa73ff1e6a50262573e7bc5d73cefe26",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/groovy/blob/5578a5a72aeab8a03d8fd5419b3228398e78d986/src/test/groovy/transform/stc/ClosuresSTCTest.groovy",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/transform/stc/ClosuresSTCTest.groovy?ref=5578a5a72aeab8a03d8fd5419b3228398e78d986",
                "deletions": 0,
                "filename": "src/test/groovy/transform/stc/ClosuresSTCTest.groovy",
                "patch": "@@ -86,5 +86,10 @@ class ClosuresSTCTest extends StaticTypeCheckingTestCase {\n         ''', 'Cannot assign value of type java.lang.Number to variable of type java.lang.Byte'\n     }\n \n+    void testClosureWithoutParam() {\n+        assertScript '''\n+            { -> println 'Hello' }()\n+        '''\n+    }\n }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/5578a5a72aeab8a03d8fd5419b3228398e78d986/src/test/groovy/transform/stc/ClosuresSTCTest.groovy",
                "sha": "4b42aea83f2bc2adf0b126daecba3849def4dbe7",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE when checking direct closure call without argument",
        "parent": "https://github.com/apache/groovy/commit/f9f674b255c00a78464ff6f4deb68d48c7d4058e",
        "patched_files": [
            "StaticTypeCheckingSupport.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "ClosuresSTCTest.java"
        ]
    },
    "groovy_5872fd8": {
        "bug_id": "groovy_5872fd8",
        "commit": "https://github.com/apache/groovy/commit/5872fd866a1252410a20745c5c1c748ce507e4c2",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/groovy/blob/5872fd866a1252410a20745c5c1c748ce507e4c2/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java?ref=5872fd866a1252410a20745c5c1c748ce507e4c2",
                "deletions": 4,
                "filename": "src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "patch": "@@ -907,7 +907,8 @@ protected void checkGroovyConstructorMap(final Expression receiver, final ClassN\n                 addStaticTypeError(\"Dynamic keys in map-style constructors are unsupported in static type checking\", keyExpr);\n             } else {\n                 AtomicReference<ClassNode> lookup = new AtomicReference<ClassNode>();\n-                boolean hasProperty = existsProperty(new PropertyExpression(new VariableExpression(\"_\", receiverType), keyExpr.getText()), false, new PropertyLookupVisitor(lookup));\n+                PropertyExpression pexp = new PropertyExpression(new VariableExpression(\"_\", receiverType), keyExpr.getText());\n+                boolean hasProperty = existsProperty(pexp, false, new PropertyLookupVisitor(lookup));\n                 if (!hasProperty) {\n                     addStaticTypeError(\"No such property: \" + keyExpr.getText() +\n                             \" for class: \" + receiverType.getName(), receiver);\n@@ -1124,9 +1125,15 @@ protected boolean existsProperty(final PropertyExpression pexp, final boolean re\n                         }\n                     } else {\n                         if (setter != null) {\n-                            // TODO: remove this visit\n-                            // need to visit even if we only look for a setter for compatibility\n-                            if (visitor != null && field!=null) visitor.visitField(field);\n+                            if (visitor != null) {\n+                                if (field!=null) {\n+                                    visitor.visitField(field);\n+                                } else {\n+                                    ClassNode setterType = setter.getParameters()[0].getOriginType();\n+                                    FieldNode virtual = new FieldNode(propertyName, 0, setterType, current, EmptyExpression.INSTANCE);\n+                                    visitor.visitField(virtual);\n+                                }\n+                            }\n \n                             //TODO: apply generics on parameter[0]? \n                             storeType(pexp, setter.getParameters()[0].getType());",
                "raw_url": "https://github.com/apache/groovy/raw/5872fd866a1252410a20745c5c1c748ce507e4c2/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "sha": "4a0fdc0c85c8d8f2f6bb8ab2a07c074b98e7fc85",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/groovy/blob/5872fd866a1252410a20745c5c1c748ce507e4c2/src/test/groovy/transform/stc/ConstructorsSTCTest.groovy",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/transform/stc/ConstructorsSTCTest.groovy?ref=5872fd866a1252410a20745c5c1c748ce507e4c2",
                "deletions": 0,
                "filename": "src/test/groovy/transform/stc/ConstructorsSTCTest.groovy",
                "patch": "@@ -335,5 +335,20 @@ class ConstructorsSTCTest extends StaticTypeCheckingTestCase {\n             new Clz().run()\n         '''\n     }\n+\n+    // GROOVY-6929\n+    void testShouldNotThrowNPEDuringConstructorCallCheck() {\n+        assertScript '''\n+            class MyBean {\n+                private String var\n+                void setFoo(String foo) {\n+                    var = foo\n+                }\n+                String toString() { var }\n+            }\n+            def b = new MyBean(foo: 'Test')\n+            assert b.toString() == 'Test'\n+        '''\n+    }\n }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/5872fd866a1252410a20745c5c1c748ce507e4c2/src/test/groovy/transform/stc/ConstructorsSTCTest.groovy",
                "sha": "3714b8707d79ec6b75dc6a7b4261e38793d8555e",
                "status": "modified"
            }
        ],
        "message": "GROOVY-6929: Fix NPE with map constructor calls and setter only",
        "parent": "https://github.com/apache/groovy/commit/b89a6441e72e2e34f089ae12034b1d593a2e602f",
        "patched_files": [
            "StaticTypeCheckingVisitor.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "ConstructorsSTCTest.java"
        ]
    },
    "groovy_596853f": {
        "bug_id": "groovy_596853f",
        "commit": "https://github.com/apache/groovy/commit/596853fe9b54cc1f5b144b214fe24d40ab006258",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/groovy/blob/596853fe9b54cc1f5b144b214fe24d40ab006258/src/main/groovy/groovy/lang/GroovyRuntimeException.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/groovy/lang/GroovyRuntimeException.java?ref=596853fe9b54cc1f5b144b214fe24d40ab006258",
                "deletions": 1,
                "filename": "src/main/groovy/groovy/lang/GroovyRuntimeException.java",
                "patch": "@@ -60,7 +60,12 @@ public ModuleNode getModule() {\n     }\n \n     public String getMessage() {\n-        return getMessageWithoutLocationText() + getLocationText();\n+        String messageWithoutLocationText = getMessageWithoutLocationText();\n+        String locationText = getLocationText();\n+        if (messageWithoutLocationText == null && locationText.isEmpty()) {\n+            return null; // not \"null\"\n+        }\n+        return messageWithoutLocationText + locationText;\n     }\n \n     public ASTNode getNode() {",
                "raw_url": "https://github.com/apache/groovy/raw/596853fe9b54cc1f5b144b214fe24d40ab006258/src/main/groovy/groovy/lang/GroovyRuntimeException.java",
                "sha": "af62bb6e3ae9bf6fce00cd9d1892f927fdeabeed",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/groovy/blob/596853fe9b54cc1f5b144b214fe24d40ab006258/src/main/groovy/groovy/lang/MissingPropertyException.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/groovy/lang/MissingPropertyException.java?ref=596853fe9b54cc1f5b144b214fe24d40ab006258",
                "deletions": 0,
                "filename": "src/main/groovy/groovy/lang/MissingPropertyException.java",
                "patch": "@@ -58,6 +58,9 @@ public MissingPropertyException(String message, String property, Class type) {\n     }\n \n     public String getMessageWithoutLocationText() {\n+        if (property == null || type == null) {\n+            return super.getMessageWithoutLocationText();\n+        }\n         final Throwable cause = getCause();\n         if (cause == null) {\n             if (super.getMessageWithoutLocationText() != null) {",
                "raw_url": "https://github.com/apache/groovy/raw/596853fe9b54cc1f5b144b214fe24d40ab006258/src/main/groovy/groovy/lang/MissingPropertyException.java",
                "sha": "4d2739352ebd1653c6599c481d800eccc73d04ea",
                "status": "modified"
            },
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/groovy/blob/596853fe9b54cc1f5b144b214fe24d40ab006258/src/test/groovy/lang/MissingPropertyExceptionTest.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/lang/MissingPropertyExceptionTest.java?ref=596853fe9b54cc1f5b144b214fe24d40ab006258",
                "deletions": 0,
                "filename": "src/test/groovy/lang/MissingPropertyExceptionTest.java",
                "patch": "@@ -0,0 +1,34 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package groovy.lang;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Provides unit tests for the <code>MissingPropertyException</code> class.\n+ */\n+public class MissingPropertyExceptionTest extends TestCase {\n+\n+    public void testNullMessage() {\n+        Throwable mpe = new MissingPropertyException(null);\n+        assertNull(mpe.getMessage());\n+        assertEquals(\"groovy.lang.MissingPropertyException\", mpe.toString());\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/groovy/raw/596853fe9b54cc1f5b144b214fe24d40ab006258/src/test/groovy/lang/MissingPropertyExceptionTest.java",
                "sha": "3b6c746c62c4f98bd9fc1538f11538032ebaec42",
                "status": "added"
            }
        ],
        "message": "GROOVY-8936: NPE occurred when `null` message passed into `MissingPropertyException`(closes #844)",
        "parent": "https://github.com/apache/groovy/commit/f667007269f95d212a835f7e38aff8bb8d0eec35",
        "patched_files": [
            "GroovyRuntimeException.java",
            "MissingPropertyException.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "MissingPropertyExceptionTest.java"
        ]
    },
    "groovy_5bd2e26": {
        "bug_id": "groovy_5bd2e26",
        "commit": "https://github.com/apache/groovy/commit/5bd2e260d36f2f73f169168930475fcda7f7a121",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/groovy/blob/5bd2e260d36f2f73f169168930475fcda7f7a121/src/test/org/codehaus/groovy/runtime/NullObjectTest.groovy",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/runtime/NullObjectTest.groovy?ref=5bd2e260d36f2f73f169168930475fcda7f7a121",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/runtime/NullObjectTest.groovy",
                "patch": "@@ -9,6 +9,15 @@ class NullObjectTest extends GroovyTestCase {\n           // is successfull\n         }\n     }\n+    \n+    void testtoStringMethod() {\n+        def foo = null\n+        try {\n+          println foo.toString()\n+        } catch (NullPointerException ex) {\n+          // is successfull\n+        }\n+    }\n \n     void testEquals() {\n         def a = [1]",
                "raw_url": "https://github.com/apache/groovy/raw/5bd2e260d36f2f73f169168930475fcda7f7a121/src/test/org/codehaus/groovy/runtime/NullObjectTest.groovy",
                "sha": "d310e49d24cbb207fe3ca7e66271b823439e742f",
                "status": "modified"
            }
        ],
        "message": "Add test for toString() metod that should throw a NPE\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@4961 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/4d1e457f8a193ac23222de777bdeb6c5d209d030",
        "patched_files": [
            "NullObject.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "NullObjectTest.java"
        ]
    },
    "groovy_5c1406c": {
        "bug_id": "groovy_5c1406c",
        "commit": "https://github.com/apache/groovy/commit/5c1406cc5be8afc486c2e3e0bac39b23f00df70d",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/groovy/blob/5c1406cc5be8afc486c2e3e0bac39b23f00df70d/src/main/org/codehaus/groovy/runtime/callsite/PojoMetaClassSite.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/callsite/PojoMetaClassSite.java?ref=5c1406cc5be8afc486c2e3e0bac39b23f00df70d",
                "deletions": 2,
                "filename": "src/main/org/codehaus/groovy/runtime/callsite/PojoMetaClassSite.java",
                "patch": "@@ -51,7 +51,8 @@ public Object call(Object receiver, Object[] args) throws Throwable {\n     }\n \n     protected final boolean checkCall(Object receiver) {\n-        return receiver.getClass() == metaClass.getTheClass()\n-            && version == classInfo.getVersion(); // metaClass is still valid\n+        return  receiver!=null &&\n+                receiver.getClass() == metaClass.getTheClass() &&\n+                version == classInfo.getVersion(); // metaClass is still valid\n     }\n }",
                "raw_url": "https://github.com/apache/groovy/raw/5c1406cc5be8afc486c2e3e0bac39b23f00df70d/src/main/org/codehaus/groovy/runtime/callsite/PojoMetaClassSite.java",
                "sha": "4d212d855eaede759ac3eb6dc65b64634033998d",
                "status": "modified"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/groovy/blob/5c1406cc5be8afc486c2e3e0bac39b23f00df70d/src/test/groovy/CategoryTest.groovy",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/CategoryTest.groovy?ref=5c1406cc5be8afc486c2e3e0bac39b23f00df70d",
                "deletions": 0,
                "filename": "src/test/groovy/CategoryTest.groovy",
                "patch": "@@ -130,6 +130,35 @@ class CategoryTest extends GroovyTestCase {\n         }\n       \"\"\"\n     }\n+\n+    void testNullReceiverChangeForPOJO() {\n+        // GROOVY-5248\n+        // this test will call a method using a POJO while a category is active\n+        // in call site caching this triggers the usage of POJOMetaClassSite,\n+        // which was missing a null check for the receiver. The last foo call\n+        // uses null to exaclty check that path. I use multiple calls with foo(1)\n+        // before to ensure for example indy will do the right things as well, \n+        // since indy may need more than one call here.\n+        assertScript \"\"\"\n+            class Cat {\n+              public static findAll(Integer x, Closure cl) {1}   \n+            }\n+\n+             def foo(x) {\n+                 x.findAll {}\n+             }\n+             \n+             use (Cat) {\n+                 assert foo(1) == 1\n+                 assert foo(1) == 1\n+                 assert foo(1) == 1\n+                 assert foo(null) == []\n+                 assert foo(1) == 1\n+                 assert foo(1) == 1\n+                 assert foo(1) == 1\n+             }\n+        \"\"\"\n+    }\n }\n \n class StringCategory {",
                "raw_url": "https://github.com/apache/groovy/raw/5c1406cc5be8afc486c2e3e0bac39b23f00df70d/src/test/groovy/CategoryTest.groovy",
                "sha": "e2ca7df53ce723e543c0afac5bde3cfeaaca404a",
                "status": "modified"
            }
        ],
        "message": "GROOVY-5248: add null check to PojoMetaClassSite to avoid an NPE there",
        "parent": "https://github.com/apache/groovy/commit/d83ad2bbf4e94e5d9cc1bd7191e515923bbf1bba",
        "patched_files": [
            "PojoMetaClassSite.java",
            "Category.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "CategoryTest.java"
        ]
    },
    "groovy_6284872": {
        "bug_id": "groovy_6284872",
        "commit": "https://github.com/apache/groovy/commit/6284872c97f055c34f4d8f0f48cc8512e70a957e",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/6284872c97f055c34f4d8f0f48cc8512e70a957e/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java?ref=6284872c97f055c34f4d8f0f48cc8512e70a957e",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "patch": "@@ -576,6 +576,10 @@ protected void inferDiamondType(final ConstructorCallExpression cce, final Class\n             ArgumentListExpression argumentListExpression = InvocationWriter.makeArgumentList(cce.getArguments());\n             if (argumentListExpression.getExpressions().isEmpty()) {\n                 GenericsType[] genericsTypes = lType.getGenericsTypes();\n+                if (lType.getGenericsTypes()==null) {\n+                    // case of def foo = new HashMap<>()\n+                    genericsTypes = node.redirect().getGenericsTypes();\n+                }\n                 GenericsType[] copy = new GenericsType[genericsTypes.length];\n                 for (int i = 0; i < genericsTypes.length; i++) {\n                     GenericsType genericsType = genericsTypes[i];",
                "raw_url": "https://github.com/apache/groovy/raw/6284872c97f055c34f4d8f0f48cc8512e70a957e/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "sha": "b1bc78c040141c3739d43faa0831c0eb19f2eb47",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/groovy/blob/6284872c97f055c34f4d8f0f48cc8512e70a957e/src/test/groovy/transform/stc/GenericsSTCTest.groovy",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/transform/stc/GenericsSTCTest.groovy?ref=6284872c97f055c34f4d8f0f48cc8512e70a957e",
                "deletions": 0,
                "filename": "src/test/groovy/transform/stc/GenericsSTCTest.groovy",
                "patch": "@@ -1125,6 +1125,15 @@ class GenericsSTCTest extends StaticTypeCheckingTestCase {\n         '''\n     }\n \n+    // GROOVY-6129\n+    void testShouldNotThrowNPE() {\n+        assertScript '''\n+            def map = new HashMap<>()\n+            map.put(1, 'foo')\n+            map.put('bar', new Date())\n+        '''\n+    }\n+\n     static class MyList extends LinkedList<String> {}\n \n     public static class ClassA<T> {",
                "raw_url": "https://github.com/apache/groovy/raw/6284872c97f055c34f4d8f0f48cc8512e70a957e/src/test/groovy/transform/stc/GenericsSTCTest.groovy",
                "sha": "64eb37f3123db5370cecc7ae7a65c69089c01de5",
                "status": "modified"
            }
        ],
        "message": "GROOVY-6129: Fix NPE with diamond type inference if left hand side of assignment doesn't have generics",
        "parent": "https://github.com/apache/groovy/commit/986f9f6810344c5dcc23c421859e7489c345e799",
        "patched_files": [
            "StaticTypeCheckingVisitor.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "GenericsSTCTest.java"
        ]
    },
    "groovy_6c4e02d": {
        "bug_id": "groovy_6c4e02d",
        "commit": "https://github.com/apache/groovy/commit/6c4e02da5af4b3879a13f1cc70de7993248862c7",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/6c4e02da5af4b3879a13f1cc70de7993248862c7/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java?ref=6c4e02da5af4b3879a13f1cc70de7993248862c7",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java",
                "patch": "@@ -193,6 +193,7 @@ static ClassNode firstCommonSuperType(List<ClassNode> nodes) {\n      * @return\n      */\n     static boolean allParametersAndArgumentsMatch(Parameter[] params, ClassNode[] args) {\n+        if (params==null) return args.length==0;\n         // we already know the lengths are equal\n         for (int i = 0; i < params.length; i++) {\n             if (!isAssignableTo(params[i].getType(), args[i])) return false;",
                "raw_url": "https://github.com/apache/groovy/raw/6c4e02da5af4b3879a13f1cc70de7993248862c7/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java",
                "sha": "417b737faa73ff1e6a50262573e7bc5d73cefe26",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/groovy/blob/6c4e02da5af4b3879a13f1cc70de7993248862c7/src/test/groovy/transform/stc/ClosuresSTCTest.groovy",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/transform/stc/ClosuresSTCTest.groovy?ref=6c4e02da5af4b3879a13f1cc70de7993248862c7",
                "deletions": 0,
                "filename": "src/test/groovy/transform/stc/ClosuresSTCTest.groovy",
                "patch": "@@ -86,5 +86,10 @@ class ClosuresSTCTest extends StaticTypeCheckingTestCase {\n         ''', 'Cannot assign value of type java.lang.Number to variable of type java.lang.Byte'\n     }\n \n+    void testClosureWithoutParam() {\n+        assertScript '''\n+            { -> println 'Hello' }()\n+        '''\n+    }\n }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/6c4e02da5af4b3879a13f1cc70de7993248862c7/src/test/groovy/transform/stc/ClosuresSTCTest.groovy",
                "sha": "4b42aea83f2bc2adf0b126daecba3849def4dbe7",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE when checking direct closure call without argument",
        "parent": "https://github.com/apache/groovy/commit/f8aa81a7222248e080cdd75e1365c91340f22aaa",
        "patched_files": [
            "StaticTypeCheckingSupport.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "ClosuresSTCTest.java"
        ]
    },
    "groovy_72e530d": {
        "bug_id": "groovy_72e530d",
        "commit": "https://github.com/apache/groovy/commit/72e530db3bb87644cc989039c31381e7f6ab68dc",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/72e530db3bb87644cc989039c31381e7f6ab68dc/src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java?ref=72e530db3bb87644cc989039c31381e7f6ab68dc",
                "deletions": 1,
                "filename": "src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java",
                "patch": "@@ -3499,7 +3499,7 @@ public static Collection collect(Object self) {\n      * @return a List of the transformed values\n      * @since 2.5.0\n      */\n-    public static <S,T> List<T> collect(Iterator<S> self, @ClosureParams(FirstParam.Component.class) Closure<T> transform) {\n+    public static <S,T> List<T> collect(Iterator<S> self, @ClosureParams(FirstParam.FirstGenericType.class) Closure<T> transform) {\n         return (List<T>) collect(self, new ArrayList<T>(), transform);\n     }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/72e530db3bb87644cc989039c31381e7f6ab68dc/src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java",
                "sha": "659a3976ed0c6bb05189884df3827cd0c2c0db2c",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/groovy/blob/72e530db3bb87644cc989039c31381e7f6ab68dc/src/test/groovy/transform/stc/ClosureParamTypeInferenceSTCTest.groovy",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/transform/stc/ClosureParamTypeInferenceSTCTest.groovy?ref=72e530db3bb87644cc989039c31381e7f6ab68dc",
                "deletions": 0,
                "filename": "src/test/groovy/transform/stc/ClosureParamTypeInferenceSTCTest.groovy",
                "patch": "@@ -231,6 +231,13 @@ def items = []\n         '''\n     }\n \n+    void testDGM_collectOnIterator() {\n+        assertScript '''\n+            Iterator<String> itr = ['foo', 'bar', 'baz'].iterator()\n+            assert itr.collect { it.startsWith('ba') } == [false, true, true]\n+        '''\n+    }\n+\n     void testInferenceOnNonExtensionMethod() {\n         assertScript '''import groovy.transform.stc.ClosureParams\n             import groovy.transform.stc.FirstParam",
                "raw_url": "https://github.com/apache/groovy/raw/72e530db3bb87644cc989039c31381e7f6ab68dc/src/test/groovy/transform/stc/ClosureParamTypeInferenceSTCTest.groovy",
                "sha": "0e7f2965d4239955ac86175721a89fe4d838c442",
                "status": "modified"
            }
        ],
        "message": "GROOVY-8610: STC NPE using DGM collect on Iterator (closes #729)",
        "parent": "https://github.com/apache/groovy/commit/a44445510a8e8babb8452f162ceba6bfa661ef1c",
        "patched_files": [
            "DefaultGroovyMethods.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "ClosureParamTypeInferenceSTCTest.java"
        ]
    },
    "groovy_771240d": {
        "bug_id": "groovy_771240d",
        "commit": "https://github.com/apache/groovy/commit/771240d073fa7fc7e16727e5aa1fdbd5df20d490",
        "file": [
            {
                "additions": 86,
                "blob_url": "https://github.com/apache/groovy/blob/771240d073fa7fc7e16727e5aa1fdbd5df20d490/src/main/org/codehaus/groovy/transform/FieldASTTransformation.java",
                "changes": 104,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/FieldASTTransformation.java?ref=771240d073fa7fc7e16727e5aa1fdbd5df20d490",
                "deletions": 18,
                "filename": "src/main/org/codehaus/groovy/transform/FieldASTTransformation.java",
                "patch": "@@ -27,15 +27,19 @@\n import org.codehaus.groovy.ast.ClassCodeExpressionTransformer;\r\n import org.codehaus.groovy.ast.ClassHelper;\r\n import org.codehaus.groovy.ast.ClassNode;\r\n+import org.codehaus.groovy.ast.ConstructorNode;\r\n import org.codehaus.groovy.ast.FieldNode;\r\n import org.codehaus.groovy.ast.MethodNode;\r\n+import org.codehaus.groovy.ast.Parameter;\r\n import org.codehaus.groovy.ast.Variable;\r\n import org.codehaus.groovy.ast.VariableScope;\r\n-import org.codehaus.groovy.ast.expr.BinaryExpression;\r\n+import org.codehaus.groovy.ast.expr.ArgumentListExpression;\r\n import org.codehaus.groovy.ast.expr.ClosureExpression;\r\n import org.codehaus.groovy.ast.expr.ConstantExpression;\r\n+import org.codehaus.groovy.ast.expr.ConstructorCallExpression;\r\n import org.codehaus.groovy.ast.expr.DeclarationExpression;\r\n import org.codehaus.groovy.ast.expr.Expression;\r\n+import org.codehaus.groovy.ast.expr.TupleExpression;\r\n import org.codehaus.groovy.ast.expr.VariableExpression;\r\n import org.codehaus.groovy.ast.stmt.ExpressionStatement;\r\n import org.codehaus.groovy.classgen.VariableScopeVisitor;\r\n@@ -44,6 +48,7 @@\n import org.codehaus.groovy.runtime.MetaClassHelper;\r\n import org.objectweb.asm.Opcodes;\r\n \r\n+import java.util.ArrayList;\r\n import java.util.Arrays;\r\n import java.util.Iterator;\r\n import java.util.List;\r\n@@ -59,9 +64,6 @@\n \r\n /**\r\n  * Handles transformation for the @Field annotation.\r\n- *\r\n- * @author Paul King\r\n- * @author Cedric Champeau\r\n  */\r\n @GroovyASTTransformation(phase = CompilePhase.SEMANTIC_ANALYSIS)\r\n public class FieldASTTransformation extends ClassCodeExpressionTransformer implements ASTTransformation, Opcodes {\r\n@@ -77,6 +79,7 @@\n     private String variableName;\r\n     private FieldNode fieldNode;\r\n     private ClosureExpression currentClosure;\r\n+    private ConstructorCallExpression currentAIC;\r\n \r\n     public void visit(ASTNode[] nodes, SourceUnit source) {\r\n         sourceUnit = source;\r\n@@ -166,23 +169,76 @@ public Expression transform(Expression expr) {\n         } else if (insideScriptBody && expr instanceof VariableExpression && currentClosure != null) {\r\n             VariableExpression ve = (VariableExpression) expr;\r\n             if (ve.getName().equals(variableName)) {\r\n-                // we may only check the variable name because the Groovy compiler\r\n-                // already fails if a variable with the same name already exists in the scope.\r\n-                // this means that a closure cannot shadow a class variable\r\n-                ve.setAccessedVariable(fieldNode);\r\n-                final VariableScope variableScope = currentClosure.getVariableScope();\r\n-                final Iterator<Variable> iterator = variableScope.getReferencedLocalVariablesIterator();\r\n-                while (iterator.hasNext()) {\r\n-                    Variable next = iterator.next();\r\n-                    if (next.getName().equals(variableName)) iterator.remove();\r\n-                }\r\n-                variableScope.putReferencedClassVariable(fieldNode);\r\n+                adjustToClassVar(ve);\r\n                 return ve;\r\n             }\r\n+        } else if (currentAIC != null && expr instanceof ArgumentListExpression) {\r\n+            // if a match is found, the compiler will have already set up aic constructor to hav\r\n+            // an argument which isn't needed since we'll be accessing the field; we must undo it\r\n+            Expression skip = null;\r\n+            List<Expression> origArgList = ((ArgumentListExpression) expr).getExpressions();\r\n+            for (int i = 0; i < origArgList.size(); i++) {\r\n+                Expression arg = origArgList.get(i);\r\n+                if (matchesCandidate(arg)) {\r\n+                    skip = arg;\r\n+                    adjustConstructorAndFields(i, currentAIC.getType());\r\n+                    break;\r\n+                }\r\n+            }\r\n+            if (skip != null) {\r\n+                return adjustedArgList(skip, origArgList);\r\n+            }\r\n         }\r\n         return expr.transformExpression(this);\r\n     }\r\n \r\n+    private boolean matchesCandidate(Expression arg) {\r\n+        return arg instanceof VariableExpression && ((VariableExpression) arg).getAccessedVariable() == candidate.getVariableExpression().getAccessedVariable();\r\n+    }\r\n+\r\n+    private Expression adjustedArgList(Expression skip, List<Expression> origArgs) {\r\n+        List<Expression> newArgs = new ArrayList<Expression>(origArgs.size() - 1);\r\n+        for (Expression origArg : origArgs) {\r\n+            if (skip != origArg) {\r\n+                newArgs.add(origArg);\r\n+            }\r\n+        }\r\n+        return new ArgumentListExpression(newArgs);\r\n+    }\r\n+\r\n+    private void adjustConstructorAndFields(int skipIndex, ClassNode type) {\r\n+        List<ConstructorNode> constructors = type.getDeclaredConstructors();\r\n+        if (constructors.size() == 1) {\r\n+            ConstructorNode constructor = constructors.get(0);\r\n+            Parameter[] params = constructor.getParameters();\r\n+            Parameter[] newParams = new Parameter[params.length - 1];\r\n+            int to = 0;\r\n+            for (int from = 0; from < params.length; from++) {\r\n+                if (from != skipIndex) {\r\n+                    newParams[to++] = params[from];\r\n+                }\r\n+            }\r\n+            type.removeConstructor(constructor);\r\n+            // code doesn't mention the removed param at this point, okay to leave as is\r\n+            type.addConstructor(constructor.getModifiers(), newParams, constructor.getExceptions(), constructor.getCode());\r\n+            type.removeField(variableName);\r\n+        }\r\n+    }\r\n+\r\n+    private void adjustToClassVar(VariableExpression expr) {\r\n+        // we only need to check the variable name because the Groovy compiler\r\n+        // already fails if a variable with the same name already exists in the scope.\r\n+        // this means that a closure cannot shadow a class variable\r\n+        expr.setAccessedVariable(fieldNode);\r\n+        final VariableScope variableScope = currentClosure.getVariableScope();\r\n+        final Iterator<Variable> iterator = variableScope.getReferencedLocalVariablesIterator();\r\n+        while (iterator.hasNext()) {\r\n+            Variable next = iterator.next();\r\n+            if (next.getName().equals(variableName)) iterator.remove();\r\n+        }\r\n+        variableScope.putReferencedClassVariable(fieldNode);\r\n+    }\r\n+\r\n     @Override\r\n     public void visitClosureExpression(final ClosureExpression expression) {\r\n         ClosureExpression old = currentClosure;\r\n@@ -191,6 +247,20 @@ public void visitClosureExpression(final ClosureExpression expression) {\n         currentClosure = old;\r\n     }\r\n \r\n+    @Override\r\n+    public void visitConstructorCallExpression(final ConstructorCallExpression cce) {\r\n+        if (!insideScriptBody || !cce.isUsingAnonymousInnerClass()) return;\r\n+        ConstructorCallExpression old = currentAIC;\r\n+        currentAIC = cce;\r\n+        Expression newArgs = transform(cce.getArguments());\r\n+        if (cce.getArguments() instanceof TupleExpression && newArgs instanceof TupleExpression) {\r\n+            List<Expression> argList = ((TupleExpression) cce.getArguments()).getExpressions();\r\n+            argList.clear();\r\n+            argList.addAll(((TupleExpression) newArgs).getExpressions());\r\n+        }\r\n+        currentAIC = old;\r\n+    }\r\n+\r\n     @Override\r\n     public void visitMethod(MethodNode node) {\r\n         Boolean oldInsideScriptBody = insideScriptBody;\r\n@@ -202,9 +272,7 @@ public void visitMethod(MethodNode node) {\n     @Override\r\n     public void visitExpressionStatement(ExpressionStatement es) {\r\n         Expression exp = es.getExpression();\r\n-        if (exp instanceof BinaryExpression) {\r\n-            exp.visit(this);\r\n-        }\r\n+        exp.visit(this);\r\n         super.visitExpressionStatement(es);\r\n     }\r\n \r",
                "raw_url": "https://github.com/apache/groovy/raw/771240d073fa7fc7e16727e5aa1fdbd5df20d490/src/main/org/codehaus/groovy/transform/FieldASTTransformation.java",
                "sha": "8e6b58e8b55eac971ed72794407bb6d4c239212e",
                "status": "modified"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/groovy/blob/771240d073fa7fc7e16727e5aa1fdbd5df20d490/src/test/org/codehaus/groovy/transform/FieldTransformTest.groovy",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/transform/FieldTransformTest.groovy?ref=771240d073fa7fc7e16727e5aa1fdbd5df20d490",
                "deletions": 3,
                "filename": "src/test/org/codehaus/groovy/transform/FieldTransformTest.groovy",
                "patch": "@@ -21,8 +21,7 @@ package org.codehaus.groovy.transform\n import gls.CompilableTestSupport\r\n \r\n /**\r\n- * @author Paul King\r\n- * @author C\ufffddric Champeau\r\n+ * Tests for the {@code @Field} transformation\r\n  */\r\n class FieldTransformTest extends CompilableTestSupport {\r\n \r\n@@ -226,4 +225,38 @@ class FieldTransformTest extends CompilableTestSupport {\n             assert foo + bar + baz == 'foobarbaz'\r\n         '''\r\n     }\r\n-}\n\\ No newline at end of file\n+\r\n+    void testAnonymousInnerClassReferencesToField() {\r\n+        // GROOVY-8112\r\n+        assertScript '''\r\n+            @groovy.transform.Field\r\n+            StringBuilder logger = new StringBuilder()\r\n+            logger.append('a')\r\n+            ['b'].each {\r\n+                logger.append(it)\r\n+                new Object() {\r\n+                    String toString() {\r\n+                        logger.append('c')\r\n+                        ['d'].each { logger.append(it) }\r\n+                    }\r\n+                }.toString()\r\n+            }\r\n+            Closure c = { logger.append('e') }\r\n+            c()\r\n+            // control: worked previously, make sure we didn't break\r\n+            def method() {\r\n+                logger.append('f')\r\n+                ['g'].each {\r\n+                    logger.append(it)\r\n+                    new Object() {\r\n+                        String toString() {\r\n+                            logger.append('h')\r\n+                        }\r\n+                    }.toString()\r\n+                }\r\n+            }\r\n+            method()\r\n+            assert logger.toString() == 'abcdefgh'\r\n+        '''\r\n+    }\r\n+}\r",
                "raw_url": "https://github.com/apache/groovy/raw/771240d073fa7fc7e16727e5aa1fdbd5df20d490/src/test/org/codehaus/groovy/transform/FieldTransformTest.groovy",
                "sha": "6575720bfb1cff6aa27a84aee8329031980ce943",
                "status": "modified"
            }
        ],
        "message": "GROOVY-8112: NPE in Groovy compiler when referencing @Field in aic (closes #622)",
        "parent": "https://github.com/apache/groovy/commit/9030fbf0b1faf4e72e79100295a8c636665ea2e4",
        "patched_files": [
            "FieldASTTransformation.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "FieldTransformTest.java"
        ]
    },
    "groovy_7a8bc1b": {
        "bug_id": "groovy_7a8bc1b",
        "commit": "https://github.com/apache/groovy/commit/7a8bc1b3a46aecef6bdfc80bc1476457343eafc6",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/7a8bc1b3a46aecef6bdfc80bc1476457343eafc6/src/main/org/codehaus/groovy/ast/tools/GenericsUtils.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/ast/tools/GenericsUtils.java?ref=7a8bc1b3a46aecef6bdfc80bc1476457343eafc6",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/ast/tools/GenericsUtils.java",
                "patch": "@@ -306,6 +306,7 @@ public static ClassNode correctToGenericsSpecRecurse(Map<String,ClassNode> gener\n                         }\n                     }\n                     GenericsType fixed = new GenericsType(oldgType.getType(), upper, lower);\n+                    fixed.setName(oldgType.getName());\n                     fixed.setWildcard(true);\n                     newgTypes[i] = fixed;\n                 } else {",
                "raw_url": "https://github.com/apache/groovy/raw/7a8bc1b3a46aecef6bdfc80bc1476457343eafc6/src/main/org/codehaus/groovy/ast/tools/GenericsUtils.java",
                "sha": "e7a7fecbb7006e9d23e8494a2c9ba4a2bdfbe178",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/7a8bc1b3a46aecef6bdfc80bc1476457343eafc6/src/main/org/codehaus/groovy/transform/trait/TraitASTTransformation.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/trait/TraitASTTransformation.java?ref=7a8bc1b3a46aecef6bdfc80bc1476457343eafc6",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/transform/trait/TraitASTTransformation.java",
                "patch": "@@ -420,6 +420,7 @@ private MethodNode processMethod(ClassNode traitClass, MethodNode methodNode, Cl\n         );\n         mNode.setSourcePosition(methodNode);\n         mNode.addAnnotations(methodNode.getAnnotations());\n+        mNode.setGenericsTypes(methodNode.getGenericsTypes());\n         if (methodNode.isAbstract()) {\n             mNode.setModifiers(ACC_PUBLIC | ACC_ABSTRACT);\n         } else {",
                "raw_url": "https://github.com/apache/groovy/raw/7a8bc1b3a46aecef6bdfc80bc1476457343eafc6/src/main/org/codehaus/groovy/transform/trait/TraitASTTransformation.java",
                "sha": "8e3407ad5040394a19832372a672b4520681b5d6",
                "status": "modified"
            },
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/groovy/blob/7a8bc1b3a46aecef6bdfc80bc1476457343eafc6/src/main/org/codehaus/groovy/transform/trait/TraitComposer.java",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/trait/TraitComposer.java?ref=7a8bc1b3a46aecef6bdfc80bc1476457343eafc6",
                "deletions": 12,
                "filename": "src/main/org/codehaus/groovy/transform/trait/TraitComposer.java",
                "patch": "@@ -20,6 +20,7 @@\n import org.codehaus.groovy.ast.ClassHelper;\n import org.codehaus.groovy.ast.ClassNode;\n import org.codehaus.groovy.ast.FieldNode;\n+import org.codehaus.groovy.ast.GenericsType;\n import org.codehaus.groovy.ast.MethodNode;\n import org.codehaus.groovy.ast.Parameter;\n import org.codehaus.groovy.ast.PropertyNode;\n@@ -55,6 +56,7 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Comparator;\n+import java.util.LinkedHashMap;\n import java.util.LinkedHashSet;\n import java.util.LinkedList;\n import java.util.List;\n@@ -134,7 +136,7 @@ private static void checkTraitAllowed(final ClassNode bottomTrait, final SourceU\n     private static void applyTrait(final ClassNode trait, final ClassNode cNode, final TraitHelpersTuple helpers) {\n         ClassNode helperClassNode = helpers.getHelper();\n         ClassNode fieldHelperClassNode = helpers.getFieldHelper();\n-        Map genericsSpec = GenericsUtils.createGenericsSpec(cNode);\n+        Map<String,ClassNode> genericsSpec = GenericsUtils.createGenericsSpec(cNode);\n         genericsSpec = GenericsUtils.createGenericsSpec(trait, genericsSpec);\n \n         for (MethodNode methodNode : helperClassNode.getAllDeclaredMethods()) {\n@@ -146,10 +148,23 @@ private static void applyTrait(final ClassNode trait, final ClassNode cNode, fin\n                 argList.addExpression(new VariableExpression(\"this\"));\n                 Parameter[] origParams = new Parameter[helperMethodParams.length - 1];\n                 Parameter[] params = new Parameter[helperMethodParams.length - 1];\n+                System.arraycopy(methodNode.getParameters(), 1, params, 0, params.length);\n+                Map<String,ClassNode> methodGenericsSpec = new LinkedHashMap<String, ClassNode>(genericsSpec);\n+                MethodNode originalMethod = trait.getMethod(name, params);\n+                // Original method may be null in case of a private method\n+                GenericsType[] originalMethodGenericsTypes = originalMethod!=null?originalMethod.getGenericsTypes():null;\n+                if (originalMethodGenericsTypes!=null) {\n+                    for (GenericsType type : originalMethodGenericsTypes) {\n+                        String gtTypeName = type.getName();\n+                        if (!methodGenericsSpec.containsKey(gtTypeName)) {\n+                            methodGenericsSpec.put(gtTypeName, type.getType());\n+                        }\n+                    }\n+                }\n                 for (int i = 1; i < helperMethodParams.length; i++) {\n                     Parameter parameter = helperMethodParams[i];\n                     ClassNode originType = parameter.getOriginType();\n-                    ClassNode fixedType = correctToGenericsSpecRecurse(genericsSpec, originType);\n+                    ClassNode fixedType = correctToGenericsSpecRecurse(methodGenericsSpec, originType);\n                     Parameter newParam = new Parameter(fixedType, \"arg\" + i);\n                     List<AnnotationNode> copied = new LinkedList<AnnotationNode>();\n                     List<AnnotationNode> notCopied = new LinkedList<AnnotationNode>();\n@@ -159,7 +174,7 @@ private static void applyTrait(final ClassNode trait, final ClassNode cNode, fin\n                     origParams[i-1] = parameter;\n                     argList.addExpression(new VariableExpression(params[i - 1]));\n                 }\n-                createForwarderMethod(trait, cNode, methodNode, helperClassNode, genericsSpec, helperMethodParams, origParams, params, argList);\n+                createForwarderMethod(trait, cNode, methodNode, originalMethod, helperClassNode, methodGenericsSpec, helperMethodParams, origParams, params, argList);\n             }\n         }\n         cNode.addObjectInitializerStatements(new ExpressionStatement(\n@@ -253,8 +268,9 @@ private static void createForwarderMethod(\n             ClassNode trait,\n             ClassNode targetNode,\n             MethodNode helperMethod,\n+            MethodNode originalMethod,\n             ClassNode helperClassNode,\n-            Map genericsSpec,\n+            Map<String,ClassNode> genericsSpec,\n             Parameter[] helperMethodParams,\n             Parameter[] traitMethodParams,\n             Parameter[] forwarderParams,\n@@ -288,7 +304,9 @@ private static void createForwarderMethod(\n         if (!copied.isEmpty()) {\n             forwarder.addAnnotations(copied);\n         }\n-\n+        if (originalMethod!=null) {\n+            forwarder.setGenericsTypes(originalMethod.getGenericsTypes());\n+        }\n         // add a helper annotation indicating that it is a bridge method\n         AnnotationNode bridgeAnnotation = new AnnotationNode(Traits.TRAITBRIDGE_CLASSNODE);\n         bridgeAnnotation.addMember(\"traitClass\", new ClassExpression(trait));\n@@ -309,7 +327,7 @@ private static void createForwarderMethod(\n      * @param forwarder a forwarder method\n      * @param genericsSpec\n      */\n-    private static void createSuperForwarder(ClassNode targetNode, MethodNode forwarder, final Map genericsSpec) {\n+    private static void createSuperForwarder(ClassNode targetNode, MethodNode forwarder, final Map<String,ClassNode> genericsSpec) {\n         List<ClassNode> interfaces = new ArrayList<ClassNode>(Traits.collectAllInterfacesReverseOrder(targetNode, new LinkedHashSet<ClassNode>()));\n         String name = forwarder.getName();\n         Parameter[] forwarderParameters = forwarder.getParameters();\n@@ -344,7 +362,7 @@ private static void createSuperForwarder(ClassNode targetNode, MethodNode forwar\n      * @param interfacesToGenerateForwarderFor\n      * @param genericsSpec\n      */\n-    private static void doCreateSuperForwarder(ClassNode targetNode, MethodNode forwarderMethod, ClassNode[] interfacesToGenerateForwarderFor, Map genericsSpec) {\n+    private static void doCreateSuperForwarder(ClassNode targetNode, MethodNode forwarderMethod, ClassNode[] interfacesToGenerateForwarderFor, Map<String,ClassNode> genericsSpec) {\n         Parameter[] parameters = forwarderMethod.getParameters();\n         Parameter[] superForwarderParams = new Parameter[parameters.length];\n         for (int i = 0; i < parameters.length; i++) {\n@@ -354,12 +372,13 @@ private static void doCreateSuperForwarder(ClassNode targetNode, MethodNode forw\n         }\n         for (int i = 0; i < interfacesToGenerateForwarderFor.length; i++) {\n             final ClassNode current = interfacesToGenerateForwarderFor[i];\n-            final ClassNode next = i<interfacesToGenerateForwarderFor.length-1?interfacesToGenerateForwarderFor[i+1]:null;\n+            final ClassNode next = i < interfacesToGenerateForwarderFor.length - 1 ? interfacesToGenerateForwarderFor[i + 1] : null;\n             String forwarderName = Traits.getSuperTraitMethodName(current, forwarderMethod.getName());\n-            if (targetNode.getDeclaredMethod(forwarderName, superForwarderParams)==null) {\n-            ClassNode returnType = correctToGenericsSpecRecurse(genericsSpec, forwarderMethod.getReturnType());\n-            Statement delegate = next==null?createSuperFallback(forwarderMethod, returnType):createDelegatingForwarder(forwarderMethod, next);\n-            targetNode.addMethod(forwarderName, Opcodes.ACC_PUBLIC | Opcodes.ACC_SYNTHETIC, returnType, superForwarderParams, ClassNode.EMPTY_ARRAY, delegate);\n+            if (targetNode.getDeclaredMethod(forwarderName, superForwarderParams) == null) {\n+                ClassNode returnType = correctToGenericsSpecRecurse(genericsSpec, forwarderMethod.getReturnType());\n+                Statement delegate = next == null ? createSuperFallback(forwarderMethod, returnType) : createDelegatingForwarder(forwarderMethod, next);\n+                MethodNode methodNode = targetNode.addMethod(forwarderName, Opcodes.ACC_PUBLIC | Opcodes.ACC_SYNTHETIC, returnType, superForwarderParams, ClassNode.EMPTY_ARRAY, delegate);\n+                methodNode.setGenericsTypes(forwarderMethod.getGenericsTypes());\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/groovy/raw/7a8bc1b3a46aecef6bdfc80bc1476457343eafc6/src/main/org/codehaus/groovy/transform/trait/TraitComposer.java",
                "sha": "7fe7ebb64325c5ea4b7c011345f13ae64a99e2ee",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/groovy/blob/7a8bc1b3a46aecef6bdfc80bc1476457343eafc6/src/test/org/codehaus/groovy/transform/traitx/TraitASTTransformationTest.groovy",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/transform/traitx/TraitASTTransformationTest.groovy?ref=7a8bc1b3a46aecef6bdfc80bc1476457343eafc6",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/transform/traitx/TraitASTTransformationTest.groovy",
                "patch": "@@ -2113,6 +2113,25 @@ d.foo()\n '''\n     }\n \n+    // GROOVY-7058\n+    void testShouldNotThrowNPEBecauseOfIncompleteGenericsTypeInformation() {\n+        assertScript '''\n+    class Project { Task task(String name, Map args) {} }\n+    class Task {}\n+    interface Plugin<P>{}\n+    trait PluginUtils {\n+        abstract Project getProject()\n+\n+        public <T extends Task> T createTask(String name, Class<T> type, Closure<?> config) {\n+          project.task(name, type: type, config)\n+        }\n+    }\n+\n+    class MyPlugin implements Plugin<Project>, PluginUtils { Project project }\n+    new MyPlugin()\n+'''\n+    }\n+\n     static trait TestTrait {\n         int a() { 123 }\n     }",
                "raw_url": "https://github.com/apache/groovy/raw/7a8bc1b3a46aecef6bdfc80bc1476457343eafc6/src/test/org/codehaus/groovy/transform/traitx/TraitASTTransformationTest.groovy",
                "sha": "8b997504bba1eea955f2b6d684b4f18693ebfe95",
                "status": "modified"
            }
        ],
        "message": "GROOVY-7058: Fix NPE in instantiation of trait'ed class due to missing generic type information in trait helper",
        "parent": "https://github.com/apache/groovy/commit/7441d9aec269f1aa11af23413e0ad9620f1b64f1",
        "patched_files": [
            "TraitASTTransformation.java",
            "GenericsUtils.java",
            "TraitComposer.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "TraitASTTransformationTest.java"
        ]
    },
    "groovy_7aefad2": {
        "bug_id": "groovy_7aefad2",
        "commit": "https://github.com/apache/groovy/commit/7aefad2dc973e69aa7bd6ceb86d8ac4731c73733",
        "file": [
            {
                "additions": 126,
                "blob_url": "https://github.com/apache/groovy/blob/7aefad2dc973e69aa7bd6ceb86d8ac4731c73733/src/test/org/codehaus/groovy/runtime/DefaultGroovyMethodsTest.groovy",
                "changes": 255,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/runtime/DefaultGroovyMethodsTest.groovy?ref=7aefad2dc973e69aa7bd6ceb86d8ac4731c73733",
                "deletions": 129,
                "filename": "src/test/org/codehaus/groovy/runtime/DefaultGroovyMethodsTest.groovy",
                "patch": "@@ -16,84 +16,81 @@\n  *  specific language governing permissions and limitations\n  *  under the License.\n  */\n-package org.codehaus.groovy.runtime;\n+package org.codehaus.groovy.runtime\n \n-import java.util.*;\n+import java.util.*\n \n /**\n  * @author <a href=\"mailto:james@coredevelopers.net\">James Strachan</a>\n  * @author Marc Guillemot\n  * @author Brad Long\n  */\n-public class DefaultGroovyMethodsTest extends GroovyTestCase {\n-\n-    public void testPrint() throws Exception {\n-        Map<String, String> map = new LinkedHashMap<String, String>();\n-        map.put(\"bob\", \"drools\");\n-        map.put(\"james\", \"geronimo\");\n-        List<Map<String, String>> list = new ArrayList<Map<String, String>>();\n-        list.add(map);\n-        assertEquals(\"[[bob:drools, james:geronimo]]\", InvokerHelper.toString(list));\n+class DefaultGroovyMethodsTest extends GroovyTestCase {\n+\n+    void testPrint() throws Exception {\n+        Map<String, String> map = ['bob': 'drools', 'james': 'geronimo']\n+        List<Map<String, String>> list = [map]\n+        assertEquals(\"[[bob:drools, james:geronimo]]\", InvokerHelper.toString(list))\n     }\n \n-    public void testFloatRounding() throws Exception {\n-        Float f = 1000.123456f;\n-\n-        assertEquals(DefaultGroovyMethods.round(f), 1000);\n-        assertEquals(DefaultGroovyMethods.round(f, 0), 1000.0f);\n-        assertEquals(DefaultGroovyMethods.round(f, 1), 1000.1f);\n-        assertEquals(DefaultGroovyMethods.round(f, 2), 1000.12f);\n-        assertEquals(DefaultGroovyMethods.round(f, 3), 1000.123f);\n-        assertEquals(DefaultGroovyMethods.round(f, 4), 1000.1235f);\n-        assertEquals(DefaultGroovyMethods.round(f, 5), 1000.12346f);\n-        assertEquals(DefaultGroovyMethods.round(f, 6), 1000.123456f);\n+    void testFloatRounding() throws Exception {\n+        Float f = 1000.123456f\n+\n+        assertEquals(DefaultGroovyMethods.round(f), 1000)\n+        assertEquals(DefaultGroovyMethods.round(f, 0), 1000.0f)\n+        assertEquals(DefaultGroovyMethods.round(f, 1), 1000.1f)\n+        assertEquals(DefaultGroovyMethods.round(f, 2), 1000.12f)\n+        assertEquals(DefaultGroovyMethods.round(f, 3), 1000.123f)\n+        assertEquals(DefaultGroovyMethods.round(f, 4), 1000.1235f)\n+        assertEquals(DefaultGroovyMethods.round(f, 5), 1000.12346f)\n+        assertEquals(DefaultGroovyMethods.round(f, 6), 1000.123456f)\n     }\n \n-    public void testDoubleRounding() throws Exception {\n-        Double d = 1000.123456;\n-\n-        assertEquals(DefaultGroovyMethods.round(d), 1000L);\n-        assertEquals(DefaultGroovyMethods.round(d, 0), 1000.0);\n-        assertEquals(DefaultGroovyMethods.round(d, 1), 1000.1);\n-        assertEquals(DefaultGroovyMethods.round(d, 2), 1000.12);\n-        assertEquals(DefaultGroovyMethods.round(d, 3), 1000.123);\n-        assertEquals(DefaultGroovyMethods.round(d, 4), 1000.1235);\n-        assertEquals(DefaultGroovyMethods.round(d, 5), 1000.12346);\n-        assertEquals(DefaultGroovyMethods.round(d, 6), 1000.123456);\n+    void testDoubleRounding() throws Exception {\n+        Double d = 1000.123456\n+\n+        assertEquals(DefaultGroovyMethods.round(d), 1000L)\n+        assertEquals(DefaultGroovyMethods.round(d, 0), 1000.0)\n+        assertEquals(DefaultGroovyMethods.round(d, 1), 1000.1)\n+        assertEquals(DefaultGroovyMethods.round(d, 2), 1000.12)\n+        assertEquals(DefaultGroovyMethods.round(d, 3), 1000.123)\n+        assertEquals(DefaultGroovyMethods.round(d, 4), 1000.1235)\n+        assertEquals(DefaultGroovyMethods.round(d, 5), 1000.12346)\n+        assertEquals(DefaultGroovyMethods.round(d, 6), 1000.123456)\n     }\n \n-    public void testBigDecimalRounding() throws Exception {\n+    void testBigDecimalRounding() throws Exception {\n         BigDecimal bd = new BigDecimal('1000.123456')\n \n-        assertEquals(DefaultGroovyMethods.round(bd), new BigDecimal('1000'));\n-        assertEquals(DefaultGroovyMethods.round(bd, 0), new BigDecimal('1000.0'));\n-        assertEquals(DefaultGroovyMethods.round(bd, 1), new BigDecimal('1000.1'));\n-        assertEquals(DefaultGroovyMethods.round(bd, 2), new BigDecimal('1000.12'));\n-        assertEquals(DefaultGroovyMethods.round(bd, 3), new BigDecimal('1000.123'));\n-        assertEquals(DefaultGroovyMethods.round(bd, 4), new BigDecimal('1000.1235'));\n-        assertEquals(DefaultGroovyMethods.round(bd, 5), new BigDecimal('1000.12346'));\n-        assertEquals(DefaultGroovyMethods.round(bd, 6), new BigDecimal('1000.123456'));\n+        assertEquals(DefaultGroovyMethods.round(bd), new BigDecimal('1000'))\n+        assertEquals(DefaultGroovyMethods.round(bd, 0), new BigDecimal('1000.0'))\n+        assertEquals(DefaultGroovyMethods.round(bd, 1), new BigDecimal('1000.1'))\n+        assertEquals(DefaultGroovyMethods.round(bd, 2), new BigDecimal('1000.12'))\n+        assertEquals(DefaultGroovyMethods.round(bd, 3), new BigDecimal('1000.123'))\n+        assertEquals(DefaultGroovyMethods.round(bd, 4), new BigDecimal('1000.1235'))\n+        assertEquals(DefaultGroovyMethods.round(bd, 5), new BigDecimal('1000.12346'))\n+        assertEquals(DefaultGroovyMethods.round(bd, 6), new BigDecimal('1000.123456'))\n \n         BigDecimal bd2 = new BigDecimal('-123.739')\n \n-        assertEquals(DefaultGroovyMethods.round(bd2), new BigDecimal('-124'));\n-        assertEquals(DefaultGroovyMethods.round(bd2, 0), new BigDecimal('-124.0'));\n-        assertEquals(DefaultGroovyMethods.round(bd2, 1), new BigDecimal('-123.7'));\n-        assertEquals(DefaultGroovyMethods.round(bd2, 2), new BigDecimal('-123.74'));\n-        assertEquals(DefaultGroovyMethods.round(bd2, 3), new BigDecimal('-123.739'));\n+        assertEquals(DefaultGroovyMethods.round(bd2), new BigDecimal('-124'))\n+        assertEquals(DefaultGroovyMethods.round(bd2, 0), new BigDecimal('-124.0'))\n+        assertEquals(DefaultGroovyMethods.round(bd2, 1), new BigDecimal('-123.7'))\n+        assertEquals(DefaultGroovyMethods.round(bd2, 2), new BigDecimal('-123.74'))\n+        assertEquals(DefaultGroovyMethods.round(bd2, 3), new BigDecimal('-123.739'))\n     }\n \n-    public void testFloatTruncate() throws Exception {\n-        Float f = 1000.123456f;\n+    void testFloatTruncate() throws Exception {\n+        Float f = 1000.123456f\n \n-        assertEquals(DefaultGroovyMethods.trunc(f), 1000.0f);\n-        assertEquals(DefaultGroovyMethods.trunc(f, 0), 1000.0f);\n-        assertEquals(DefaultGroovyMethods.trunc(f, 1), 1000.1f);\n-        assertEquals(DefaultGroovyMethods.trunc(f, 2), 1000.12f);\n-        assertEquals(DefaultGroovyMethods.trunc(f, 3), 1000.123f);\n-        assertEquals(DefaultGroovyMethods.trunc(f, 4), 1000.1234f);\n-        assertEquals(DefaultGroovyMethods.trunc(f, 5), 1000.12345f);\n-        assertEquals(DefaultGroovyMethods.trunc(f, 6), 1000.123456f);\n+        assertEquals(DefaultGroovyMethods.trunc(f), 1000.0f)\n+        assertEquals(DefaultGroovyMethods.trunc(f, 0), 1000.0f)\n+        assertEquals(DefaultGroovyMethods.trunc(f, 1), 1000.1f)\n+        assertEquals(DefaultGroovyMethods.trunc(f, 2), 1000.12f)\n+        assertEquals(DefaultGroovyMethods.trunc(f, 3), 1000.123f)\n+        assertEquals(DefaultGroovyMethods.trunc(f, 4), 1000.1234f)\n+        assertEquals(DefaultGroovyMethods.trunc(f, 5), 1000.12345f)\n+        assertEquals(DefaultGroovyMethods.trunc(f, 6), 1000.123456f)\n \n         Float f2 = -123.739f\n \n@@ -103,17 +100,17 @@ public class DefaultGroovyMethodsTest extends GroovyTestCase {\n         assertEquals(DefaultGroovyMethods.trunc(f2, 2), -123.73f)\n     }\n \n-    public void testDoubleTruncate() throws Exception {\n-        Double d = 1000.123456;\n+    void testDoubleTruncate() throws Exception {\n+        Double d = 1000.123456\n \n-        assertEquals(DefaultGroovyMethods.trunc(d), 1000.0);\n-        assertEquals(DefaultGroovyMethods.trunc(d, 0), 1000.0);\n-        assertEquals(DefaultGroovyMethods.trunc(d, 1), 1000.1);\n-        assertEquals(DefaultGroovyMethods.trunc(d, 2), 1000.12);\n-        assertEquals(DefaultGroovyMethods.trunc(d, 3), 1000.123);\n-        assertEquals(DefaultGroovyMethods.trunc(d, 4), 1000.1234);\n-        assertEquals(DefaultGroovyMethods.trunc(d, 5), 1000.12345);\n-        assertEquals(DefaultGroovyMethods.trunc(d, 6), 1000.123456);\n+        assertEquals(DefaultGroovyMethods.trunc(d), 1000.0)\n+        assertEquals(DefaultGroovyMethods.trunc(d, 0), 1000.0)\n+        assertEquals(DefaultGroovyMethods.trunc(d, 1), 1000.1)\n+        assertEquals(DefaultGroovyMethods.trunc(d, 2), 1000.12)\n+        assertEquals(DefaultGroovyMethods.trunc(d, 3), 1000.123)\n+        assertEquals(DefaultGroovyMethods.trunc(d, 4), 1000.1234)\n+        assertEquals(DefaultGroovyMethods.trunc(d, 5), 1000.12345)\n+        assertEquals(DefaultGroovyMethods.trunc(d, 6), 1000.123456)\n \n         Double d2 = -123.739d\n \n@@ -123,7 +120,7 @@ public class DefaultGroovyMethodsTest extends GroovyTestCase {\n         assertEquals(DefaultGroovyMethods.trunc(d2, 2), -123.73d)\n     }\n \n-    public void testBigDecimalTruncate() throws Exception {\n+    void testBigDecimalTruncate() throws Exception {\n         BigDecimal bd = new BigDecimal('1000.123456')\n \n         assertEquals(DefaultGroovyMethods.trunc(bd), new BigDecimal('1000.0'))\n@@ -149,95 +146,95 @@ public class DefaultGroovyMethodsTest extends GroovyTestCase {\n         assert DefaultGroovyMethods.power(13G, 15G) == DefaultGroovyMethods.power(13G, 15)\n     }\n \n-    public void testToMethods() throws Exception {\n-        Number n = 7L;\n-        assertEquals(DefaultGroovyMethods.toInteger(n), new Integer(7));\n-        assertEquals(DefaultGroovyMethods.toLong(n), new Long(7));\n-        assertEquals(DefaultGroovyMethods.toFloat(n), new Float(7));\n-        assertEquals(DefaultGroovyMethods.toDouble(n), new Double(7));\n-        assertEquals(DefaultGroovyMethods.toBigInteger(n), new BigInteger(\"7\"));\n-        assertEquals(DefaultGroovyMethods.toBigDecimal(n), new BigDecimal(\"7\"));\n+    void testToMethods() throws Exception {\n+        Number n = 7L\n+        assertEquals(DefaultGroovyMethods.toInteger(n), new Integer(7))\n+        assertEquals(DefaultGroovyMethods.toLong(n), new Long(7))\n+        assertEquals(DefaultGroovyMethods.toFloat(n), new Float(7))\n+        assertEquals(DefaultGroovyMethods.toDouble(n), new Double(7))\n+        assertEquals(DefaultGroovyMethods.toBigInteger(n), new BigInteger(\"7\"))\n+        assertEquals(DefaultGroovyMethods.toBigDecimal(n), new BigDecimal(\"7\"))\n         // The following is true starting with 1.6 (GROOVY-3171):\n-        assertEquals(new BigDecimal(\"0.1\"), DefaultGroovyMethods.toBigDecimal(0.1));\n-        assertEquals(ResourceGroovyMethods.toURL(\"http://example.org/\"), new URL(\"http://example.org/\"));\n-        assertEquals(ResourceGroovyMethods.toURI(\"http://example.org/\"), new URI(\"http://example.org/\"));\n-        assertEquals(DefaultGroovyMethods.toBoolean(Boolean.FALSE), Boolean.FALSE);\n-        assertEquals(DefaultGroovyMethods.toBoolean(Boolean.TRUE), Boolean.TRUE);\n+        assertEquals(new BigDecimal(\"0.1\"), DefaultGroovyMethods.toBigDecimal(0.1))\n+        assertEquals(ResourceGroovyMethods.toURL(\"http://example.org/\"), new URL(\"http://example.org/\"))\n+        assertEquals(ResourceGroovyMethods.toURI(\"http://example.org/\"), new URI(\"http://example.org/\"))\n+        assertEquals(DefaultGroovyMethods.toBoolean(Boolean.FALSE), Boolean.FALSE)\n+        assertEquals(DefaultGroovyMethods.toBoolean(Boolean.TRUE), Boolean.TRUE)\n     }\n \n-    public void testGetBytes() {\n+    void testGetBytes() {\n         byte[] bytes = [42,45,47,14,10,84] as byte[]\n-        ByteArrayInputStream is = new ByteArrayInputStream(bytes);\n+        ByteArrayInputStream is = new ByteArrayInputStream(bytes)\n         try {\n-            byte[] answer = IOGroovyMethods.getBytes(is);\n-            assertEquals(bytes.length, answer.length);\n-            for (int i = 0; i < bytes.length; i++) {\n-                assertEquals(bytes[i], answer[i]);       \n+            byte[] answer = IOGroovyMethods.getBytes(is)\n+            assertEquals(bytes.length, answer.length)\n+            bytes.eachWithIndex{ byte entry, int i ->\n+                assertEquals(entry, answer[i])\n             }\n         } catch (IOException e) {\n-            fail();\n+            fail()\n         }\n     }\n \n-    public void testSetBytes() {\n+    void testSetBytes() {\n         byte[] bytes = [42,45,47,14,10,84] as byte[]\n-        ByteArrayOutputStream os = new ByteArrayOutputStream();\n+        ByteArrayOutputStream os = new ByteArrayOutputStream()\n         try {\n-            IOGroovyMethods.setBytes(os, bytes);\n-            byte[] answer = os.toByteArray();\n-            assertEquals(bytes.length, answer.length);\n-            for (int i = 0; i < bytes.length; i++) {\n-                assertEquals(bytes[i], answer[i]);\n+            IOGroovyMethods.setBytes(os, bytes)\n+            byte[] answer = os.toByteArray()\n+            assertEquals(bytes.length, answer.length)\n+            bytes.eachWithIndex{ byte entry, int i ->\n+                assertEquals(entry, answer[i])\n             }\n         } catch (IOException e) {\n-            fail();\n+            fail()\n         }\n     }\n \n-    public void testDownto() {\n+    void testDownto() {\n         final int[] count = [0] as int[]\n         final Closure closure = new Closure(null) {\n-            public Object doCall(final Object params) {\n-                count[0]++;\n-                return null;\n+            Object doCall(final Object params) {\n+                count[0]++\n+                return null\n             }\n-        };\n+        }\n \n-        DefaultGroovyMethods.downto(new BigInteger(\"1\"), new BigDecimal(\"0\"), closure);\n-        assertEquals(count[0], 2);\n+        DefaultGroovyMethods.downto(new BigInteger(\"1\"), new BigDecimal(\"0\"), closure)\n+        assertEquals(count[0], 2)\n \n-        count[0] = 0;\n+        count[0] = 0\n \n-        DefaultGroovyMethods.downto(new BigInteger(\"1\"), new BigDecimal(\"0.123\"), closure);\n-        assertEquals(count[0], 1);\n+        DefaultGroovyMethods.downto(new BigInteger(\"1\"), new BigDecimal(\"0.123\"), closure)\n+        assertEquals(count[0], 1)\n     }\n \n-    public void testBulkCollectionForArrayOperations() {\n-        List<String> list = new ArrayList<String>();\n-        assertTrue(DefaultGroovyMethods.addAll(list, \"abcd\".split(\"\")));\n-        assertTrue(DefaultGroovyMethods.removeAll(list, \"def\".split(\"\")));\n-        assertTrue(DefaultGroovyMethods.retainAll(list, \"bcd\".split(\"\")));\n-        List<String> bAndC = Arrays.asList(\"b\", \"c\");\n-        assertTrue(DefaultGroovyMethods.containsAll(list, bAndC.toArray(new String[2])));\n-        assertEquals(list, bAndC);\n-        assertTrue(DefaultGroovyMethods.addAll(list, 1, Arrays.asList(\"a\", \"s\", \"i\").toArray(new String[3])));\n-        assertEquals(list, Arrays.asList(\"b\", \"a\", \"s\", \"i\", \"c\"));\n+    void testBulkCollectionForArrayOperations() {\n+        List<String> list = []\n+        assertTrue(DefaultGroovyMethods.addAll(list, \"abcd\".split(\"\")))\n+        assertTrue(DefaultGroovyMethods.removeAll(list, \"def\".split(\"\")))\n+        assertTrue(DefaultGroovyMethods.retainAll(list, \"bcd\".split(\"\")))\n+        List<String> bAndC = ['b', 'c']\n+        assertTrue(DefaultGroovyMethods.containsAll(list, bAndC.toArray(new String[2])))\n+        assertEquals(list, bAndC)\n+        assertTrue(DefaultGroovyMethods.addAll(list, 1, ['a', 's', 'i'].toArray(new String[3])))\n+        assertEquals(list, ['b', 'a', 's', 'i', 'c'])\n     }\n \n     /**\n      * Tests that a List subclass without a constructor for Collections is still coerced\n      * into the correct list type. \n      */\n-    public void testCollectionTypeConstructors() {\n-        MyList list = DefaultGroovyMethods.asType(Arrays.asList(1, 2, 3), MyList.class);\n-        assertEquals(3, list.size());\n-        assertEquals(1, list.get(0));\n-        assertEquals(2, list.get(1));\n-        assertEquals(3, list.get(2));\n+    void testCollectionTypeConstructors() {\n+        MyList list = DefaultGroovyMethods.asType([1, 2, 3], MyList.class)\n+        assertEquals(3, list.size())\n+        assertEquals(1, list.get(0))\n+        assertEquals(2, list.get(1))\n+        assertEquals(3, list.get(2))\n     }\n \n     // GROOVY-7654\n-    public void testIterableAsList() {\n+    void testIterableAsList() {\n         def list = [1, 2, 3]\n         def iterable = new IterableWrapper(delegate: list)\n \n@@ -256,7 +253,7 @@ public class DefaultGroovyMethodsTest extends GroovyTestCase {\n     }\n \n     // GROOVY-8271\n-    public void testTake() {\n+    void testTake() {\n         int hasNextCount = 0\n         int nextCount = 0\n         def iterator = [\n@@ -269,7 +266,7 @@ public class DefaultGroovyMethodsTest extends GroovyTestCase {\n     }\n \n     private static class MyList extends ArrayList {\n-        public MyList() {}\n+        MyList() {}\n     }\n \n     private static class IterableWrapper implements Iterable {\n@@ -280,7 +277,7 @@ public class DefaultGroovyMethodsTest extends GroovyTestCase {\n         }\n     }\n \n-    public void testBooleanOr() {\n+    void testBooleanOr() {\n         assertTrue(DefaultGroovyMethods.or(true, true))\n         assertTrue(DefaultGroovyMethods.or(true, false))\n         assertTrue(DefaultGroovyMethods.or(false, true))\n@@ -289,7 +286,7 @@ public class DefaultGroovyMethodsTest extends GroovyTestCase {\n         assertTrue(DefaultGroovyMethods.or(true, null))\n     }\n \n-    public void testBooleanAnd() {\n+    void testBooleanAnd() {\n         assertTrue(DefaultGroovyMethods.and(true, true))\n         assertFalse(DefaultGroovyMethods.and(true, false))\n         assertFalse(DefaultGroovyMethods.and(false, true))\n@@ -298,7 +295,7 @@ public class DefaultGroovyMethodsTest extends GroovyTestCase {\n         assertFalse(DefaultGroovyMethods.and(true, null))\n     }\n \n-    public void testBooleanXor() {\n+    void testBooleanXor() {\n         assertFalse(DefaultGroovyMethods.xor(true, true))\n         assertTrue(DefaultGroovyMethods.xor(true, false))\n         assertTrue(DefaultGroovyMethods.xor(false, true))\n@@ -307,7 +304,7 @@ public class DefaultGroovyMethodsTest extends GroovyTestCase {\n         assertTrue(DefaultGroovyMethods.xor(true, null))\n     }\n \n-    public void testBooleanImplication() {\n+    void testBooleanImplication() {\n         assertTrue(DefaultGroovyMethods.implies(true, true))\n         assertFalse(DefaultGroovyMethods.implies(true, false))\n         assertTrue(DefaultGroovyMethods.implies(false, true))",
                "raw_url": "https://github.com/apache/groovy/raw/7aefad2dc973e69aa7bd6ceb86d8ac4731c73733/src/test/org/codehaus/groovy/runtime/DefaultGroovyMethodsTest.groovy",
                "sha": "6e88b4803be3c377848a0f054a6dff9d5a5c1662",
                "status": "modified"
            }
        ],
        "message": "Made the DefaultGroovyMethodsTest file more groovy like.\n\n* Removed unnecessary semicolons and `public` modifiers.\n* replaced java style for loops with groovy `eachWithIndex` closures\n* instantiating maps and lists with `[]` and `[:]` instead of using `new ArrayList`, `Arrays.asList`, or `new LinkedHashMap`\n* updated DefaultGroovyMethods.java boolean operations to allow for the left parameter to be `null` instead of throwing a NullPointerException. I noticed `null` was considered `false` for the right parameter, so i followed the same strategy.\n* adding missing tests for boolean operations",
        "parent": "https://github.com/apache/groovy/commit/7481b0a53f87e5e2b87078d1a3f3aed8d95cae6c",
        "patched_files": [
            "DefaultGroovyMethods.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "DefaultGroovyMethodsTest.java"
        ]
    },
    "groovy_7c8456f": {
        "bug_id": "groovy_7c8456f",
        "commit": "https://github.com/apache/groovy/commit/7c8456f3164e4bb16326c2144e5dae8a5a2e4970",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/groovy/blob/7c8456f3164e4bb16326c2144e5dae8a5a2e4970/src/main/org/codehaus/groovy/transform/stc/GroovyTypeCheckingExtensionSupport.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/stc/GroovyTypeCheckingExtensionSupport.java?ref=7c8456f3164e4bb16326c2144e5dae8a5a2e4970",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/transform/stc/GroovyTypeCheckingExtensionSupport.java",
                "patch": "@@ -27,6 +27,8 @@\n import org.codehaus.groovy.control.CompilationFailedException;\n import org.codehaus.groovy.control.CompilerConfiguration;\n import org.codehaus.groovy.control.customizers.ImportCustomizer;\n+import org.codehaus.groovy.control.messages.ExceptionMessage;\n+import org.codehaus.groovy.control.messages.SimpleMessage;\n import org.codehaus.groovy.runtime.InvokerHelper;\n import org.codehaus.groovy.runtime.InvokerInvocationException;\n import org.objectweb.asm.Opcodes;\n@@ -104,11 +106,17 @@ public void setup() {\n \n         ClassLoader cl = typeCheckingVisitor.getSourceUnit().getClassLoader();\n         InputStream is = cl.getResourceAsStream(scriptPath);\n-        if (is==null) {\n+        if (is == null) {\n             // fallback to the compiler classloader\n             cl = GroovyTypeCheckingExtensionSupport.class.getClassLoader();\n             is = cl.getResourceAsStream(scriptPath);\n         }\n+        if (is == null) {\n+            // if the input stream is still null, we've not found the extension\n+            context.getErrorCollector().addFatalError(\n+                    new SimpleMessage(\"Static type checking extension '\" + scriptPath + \"' was not found on the classpath.\",\n+                            config.getDebug(), typeCheckingVisitor.getSourceUnit()));\n+        }\n         try {\n             TypeCheckingDSL parse = (TypeCheckingDSL) shell.parse(\n                     new InputStreamReader(is, typeCheckingVisitor.getSourceUnit().getConfiguration().getSourceEncoding())",
                "raw_url": "https://github.com/apache/groovy/raw/7c8456f3164e4bb16326c2144e5dae8a5a2e4970/src/main/org/codehaus/groovy/transform/stc/GroovyTypeCheckingExtensionSupport.java",
                "sha": "0a1b28877b0b22f283d1f2d563329af7d763b577",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/groovy/blob/7c8456f3164e4bb16326c2144e5dae8a5a2e4970/src/test/groovy/transform/stc/TypeCheckingExtensionsTest.groovy",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/transform/stc/TypeCheckingExtensionsTest.groovy?ref=7c8456f3164e4bb16326c2144e5dae8a5a2e4970",
                "deletions": 0,
                "filename": "src/test/groovy/transform/stc/TypeCheckingExtensionsTest.groovy",
                "patch": "@@ -15,6 +15,7 @@\n  */\n package groovy.transform.stc\n \n+import org.codehaus.groovy.control.MultipleCompilationErrorsException\n import org.codehaus.groovy.control.customizers.ASTTransformationCustomizer\n \n /**\n@@ -50,6 +51,21 @@ class TypeCheckingExtensionsTest extends StaticTypeCheckingTestCase {\n         '''\n     }\n \n+    void testNonExistentExtension() {\n+        def extensionPath = 'groovy/transform/stc/NonExistentTestExtension.groovy'\n+        extension = extensionPath\n+\n+        String errorMessage = \"Static type checking extension '${extensionPath}' was not found on the classpath.\"\n+\n+        String message = shouldFail(MultipleCompilationErrorsException) {\n+            assertScript '''\n+                assert true\n+            '''\n+        }\n+\n+        assert message.contains(errorMessage)\n+    }\n+\n     void testFinishExtension() {\n         extension = 'groovy/transform/stc/FinishTestExtension.groovy'\n         assertScript '''",
                "raw_url": "https://github.com/apache/groovy/raw/7c8456f3164e4bb16326c2144e5dae8a5a2e4970/src/test/groovy/transform/stc/TypeCheckingExtensionsTest.groovy",
                "sha": "b7e99ca9e46522bd116257b559673d7fa77b0afe",
                "status": "modified"
            }
        ],
        "message": "GROOVY-5910\nNon found static type checking extensions throw unexplicit NPE",
        "parent": "https://github.com/apache/groovy/commit/86f212b92bb584bc962d731941e42e009c29276c",
        "patched_files": [
            "GroovyTypeCheckingExtensionSupport.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "TypeCheckingExtensionsTest.java"
        ]
    },
    "groovy_7d4e5c7": {
        "bug_id": "groovy_7d4e5c7",
        "commit": "https://github.com/apache/groovy/commit/7d4e5c7cbf9f6734185e545d53323e1646637383",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/groovy/blob/7d4e5c7cbf9f6734185e545d53323e1646637383/src/main/org/codehaus/groovy/ant/Groovy.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/ant/Groovy.java?ref=7d4e5c7cbf9f6734185e545d53323e1646637383",
                "deletions": 3,
                "filename": "src/main/org/codehaus/groovy/ant/Groovy.java",
                "patch": "@@ -475,9 +475,11 @@ private void createClasspathParts() {\n         }\n         String groovyHome = null;\n         final String[] strings = getSysProperties().getVariables();\n-        for (String prop : strings) {\n-            if (prop.startsWith(\"-Dgroovy.home=\")) {\n-                groovyHome = prop.substring(\"-Dgroovy.home=\".length());\n+        if (strings != null) {\n+            for (String prop : strings) {\n+                if (prop.startsWith(\"-Dgroovy.home=\")) {\n+                    groovyHome = prop.substring(\"-Dgroovy.home=\".length());\n+                }\n             }\n         }\n         if (groovyHome == null) {",
                "raw_url": "https://github.com/apache/groovy/raw/7d4e5c7cbf9f6734185e545d53323e1646637383/src/main/org/codehaus/groovy/ant/Groovy.java",
                "sha": "b26fd04f264e343163528dc4657d431670cab253",
                "status": "modified"
            }
        ],
        "message": "GROOVY-4108: Possible NPE in Groovy Ant task\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@19626 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/1dafad4016852ebad8b75d9ed5ab74096b7ca2f1",
        "patched_files": [
            "Groovy.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "GroovyTest.java"
        ]
    },
    "groovy_81a79d5": {
        "bug_id": "groovy_81a79d5",
        "commit": "https://github.com/apache/groovy/commit/81a79d55f70bb03d2415741e94a72d4334415cd2",
        "file": [
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/groovy/blob/81a79d55f70bb03d2415741e94a72d4334415cd2/src/test/groovy/MultiDimArraysTest.groovy",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/MultiDimArraysTest.groovy?ref=81a79d55f70bb03d2415741e94a72d4334415cd2",
                "deletions": 5,
                "filename": "src/test/groovy/MultiDimArraysTest.groovy",
                "patch": "@@ -8,13 +8,30 @@ package groovy;\n public class MultiDimArraysTest extends GroovyTestCase {\n \n     void notSupported_testCallTwoDimStringArray(){\n-        def someStringArray =  new SomeClass().anArrayOfStringArrays()\n-        assert 1 == someStringArray.size()\n+        def someArrayOfStringArrays =  new SomeClass().anArrayOfStringArrays()\n+        assert 1 == someArrayOfStringArrays.size()\n     }\n     \n     void testCallTwoDimStringArrayWorkaround(){\n-        def someStringArray =  new SomeClass().anArrayOfStringArraysWorkaround()\n-        assert 1 == someStringArray.size()\n-        assert \"whatever\" == someStringArray[0][0]\n+        def someArrayOfStringArrays =  new SomeClass().anArrayOfStringArraysWorkaround()\n+        assert 1 == someArrayOfStringArrays.size()\n+        assert \"whatever\" == someArrayOfStringArrays[0][0]\n+        for (i in 0..<someArrayOfStringArrays.size()) {\n+            assert someArrayOfStringArrays[i]\n+        }\n+    }\n+\n+    // todo: make this pass\n+    void Failing_testCallTwoDimStringArrayWorkaroundWithNull(){\n+        def someArrayOfStringArrays =  new SomeClass().anArrayOfStringArraysWorkaround()\n+        assert 1 == someArrayOfStringArrays.size()\n+        assert \"whatever\" == someArrayOfStringArrays[0][0]\n+        someArrayOfStringArrays.each(){ assert it}                // throws NPE !!\n+    }\n+\n+    void testInsideGroovyMultiDimReplacement(){\n+        Object[] someArrayOfStringArrays = [[\"a\",\"a\",\"a\"],[\"b\",\"b\",\"b\",null]]\n+        assert \"a\" == someArrayOfStringArrays[0][0]\n+        someArrayOfStringArrays.each(){ assert it}\n     }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/groovy/raw/81a79d55f70bb03d2415741e94a72d4334415cd2/src/test/groovy/MultiDimArraysTest.groovy",
                "sha": "b35bd7097c8c9a1532b9fb99c71949d685ebce41",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/81a79d55f70bb03d2415741e94a72d4334415cd2/src/test/groovy/SomeClass.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/SomeClass.java?ref=81a79d55f70bb03d2415741e94a72d4334415cd2",
                "deletions": 1,
                "filename": "src/test/groovy/SomeClass.java",
                "patch": "@@ -11,6 +11,6 @@\n         return new String[][]{{\"whatever\"}};\n     }\n     public Object[] anArrayOfStringArraysWorkaround(){\n-        return new Object[]{ new String[]{\"whatever\"}};\n+        return new Object[]{ new String[]{\"whatever\",null}};\n     }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/groovy/raw/81a79d55f70bb03d2415741e94a72d4334415cd2/src/test/groovy/SomeClass.java",
                "sha": "c067c2b343616435503e356ef4bbb72416ef71d2",
                "status": "modified"
            }
        ],
        "message": "expose bug GROOVY-886 (each(){} throws NPE when called on a Java Object[], that contains String[]'s with null entries)\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@2329 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/d99c38c2efe84c7dd02aea8e73698a9d2f039515",
        "patched_files": [
            "SomeClass.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "MultiDimArraysTest.java"
        ]
    },
    "groovy_860577a": {
        "bug_id": "groovy_860577a",
        "commit": "https://github.com/apache/groovy/commit/860577a6e59e6c086ded4b23f9120b5d55430d35",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/groovy/blob/860577a6e59e6c086ded4b23f9120b5d55430d35/src/main/org/codehaus/groovy/runtime/InvokerHelper.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/InvokerHelper.java?ref=860577a6e59e6c086ded4b23f9120b5d55430d35",
                "deletions": 12,
                "filename": "src/main/org/codehaus/groovy/runtime/InvokerHelper.java",
                "patch": "@@ -117,9 +117,9 @@ public static String inspect(Object self) {\n     }\n \n     public static Object getAttribute(Object object, String attribute) {\n-//        if (object == null) {\n-//            throw new NullPointerException(\"Cannot get attribute: \" + attribute + \" on null object\");\n-//        }\n+        if (object == null) {\n+            object = NullObject.getNullObject();\n+        }\n \n         if (object instanceof Class) {\n             return metaRegistry.getMetaClass((Class) object).getAttribute(object, attribute);\n@@ -131,9 +131,9 @@ public static Object getAttribute(Object object, String attribute) {\n     }\n \n     public static void setAttribute(Object object, String attribute, Object newValue) {\n-//        if (object == null) {\n-//            throw new GroovyRuntimeException(\"Cannot set attribute on null object\");\n-//        }\n+        if (object == null) {\n+            object = NullObject.getNullObject();\n+        }\n \n         if (object instanceof Class) {\n             metaRegistry.getMetaClass((Class) object).setAttribute(object, attribute, newValue);\n@@ -145,9 +145,10 @@ public static void setAttribute(Object object, String attribute, Object newValue\n     }\n \n     public static Object getProperty(Object object, String property) {\n-//        if (object == null) {\n-//            throw new NullPointerException(\"Cannot get property: \" + property + \" on null object\");\n-//        }\n+        if (object == null) {\n+            object = NullObject.getNullObject();\n+        }\n+        \n         if (object instanceof GroovyObject) {\n             GroovyObject pogo = (GroovyObject) object;\n             return pogo.getProperty(property);\n@@ -167,9 +168,10 @@ public static Object getPropertySafe(Object object, String property) {\n     }\n \n     public static void setProperty(Object object, String property, Object newValue) {\n-//        if (object == null) {\n-//            throw new GroovyRuntimeException(\"Cannot set property on null object\");\n-//        }\n+        if (object == null) {\n+            object = NullObject.getNullObject();\n+        }\n+\n         if (object instanceof GroovyObject) {\n             GroovyObject pogo = (GroovyObject) object;\n             pogo.setProperty(property, newValue);",
                "raw_url": "https://github.com/apache/groovy/raw/860577a6e59e6c086ded4b23f9120b5d55430d35/src/main/org/codehaus/groovy/runtime/InvokerHelper.java",
                "sha": "da4683847532f44852a3ae51851a425aa3292293",
                "status": "modified"
            }
        ],
        "message": "GROOVY-3510: NPE in MetaClassRegistryImpl\nBring back NullObject to properly handle the null cases from within InvokerHelper\n(merge rev 16276)\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@16277 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/c43959198ef3886419f1df6b9b9e83fd9420f9b1",
        "patched_files": [
            "InvokerHelper.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "InvokerHelperTest.java"
        ]
    },
    "groovy_86be867": {
        "bug_id": "groovy_86be867",
        "commit": "https://github.com/apache/groovy/commit/86be867e71eceb3b493773ac567d1cee6b42c05c",
        "file": [
            {
                "additions": 162,
                "blob_url": "https://github.com/apache/groovy/blob/86be867e71eceb3b493773ac567d1cee6b42c05c/src/main/org/codehaus/groovy/ast/ClassHelper.java",
                "changes": 323,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/ast/ClassHelper.java?ref=86be867e71eceb3b493773ac567d1cee6b42c05c",
                "deletions": 161,
                "filename": "src/main/org/codehaus/groovy/ast/ClassHelper.java",
                "patch": "@@ -41,90 +41,87 @@\n \n /**\n  * This class is a Helper for ClassNode and classes handling ClassNodes.\n- * It does contain a set of predefined ClassNodes for the most used \n- * types and some code for cached ClassNode creation and basic \n- * ClassNode handling \n- * \n- * @author Jochen Theodorou\n+ * It does contain a set of predefined ClassNodes for the most used\n+ * types and some code for cached ClassNode creation and basic\n+ * ClassNode handling\n  */\n public class ClassHelper {\n \n-    private static final Class[] classes = new Class[] {\n-        Object.class, Boolean.TYPE, Character.TYPE, Byte.TYPE, Short.TYPE,\n-        Integer.TYPE, Long.TYPE, Double.TYPE, Float.TYPE, Void.TYPE,\n-        Closure.class, GString.class, List.class, Map.class, Range.class,\n-        Pattern.class, Script.class, String.class,  Boolean.class, \n-        Character.class, Byte.class, Short.class, Integer.class, Long.class,\n-        Double.class, Float.class, BigDecimal.class, BigInteger.class, \n-        Number.class, Void.class, Reference.class, Class.class, MetaClass.class, \n-        Iterator.class, GeneratedClosure.class, GroovyObjectSupport.class\n+    private static final Class[] classes = new Class[]{\n+            Object.class, Boolean.TYPE, Character.TYPE, Byte.TYPE, Short.TYPE,\n+            Integer.TYPE, Long.TYPE, Double.TYPE, Float.TYPE, Void.TYPE,\n+            Closure.class, GString.class, List.class, Map.class, Range.class,\n+            Pattern.class, Script.class, String.class, Boolean.class,\n+            Character.class, Byte.class, Short.class, Integer.class, Long.class,\n+            Double.class, Float.class, BigDecimal.class, BigInteger.class,\n+            Number.class, Void.class, Reference.class, Class.class, MetaClass.class,\n+            Iterator.class, GeneratedClosure.class, GroovyObjectSupport.class\n     };\n \n-    private static final String[] primitiveClassNames = new String[] {\n-        \"\", \"boolean\", \"char\", \"byte\", \"short\", \n-        \"int\", \"long\", \"double\", \"float\", \"void\"\n+    private static final String[] primitiveClassNames = new String[]{\n+            \"\", \"boolean\", \"char\", \"byte\", \"short\",\n+            \"int\", \"long\", \"double\", \"float\", \"void\"\n     };\n-    \n-    public static final ClassNode \n-        DYNAMIC_TYPE = makeCached(Object.class),  OBJECT_TYPE = DYNAMIC_TYPE,\n-        VOID_TYPE = makeCached(Void.TYPE),        CLOSURE_TYPE = makeCached(Closure.class),\n-        GSTRING_TYPE = makeCached(GString.class), LIST_TYPE = makeWithoutCaching(List.class),\n-        MAP_TYPE = makeWithoutCaching(Map.class), RANGE_TYPE = makeCached(Range.class),\n-        PATTERN_TYPE = makeCached(Pattern.class), STRING_TYPE = makeCached(String.class),\n-        SCRIPT_TYPE = makeCached(Script.class),   REFERENCE_TYPE = makeWithoutCaching(Reference.class),\n-        BINDING_TYPE = makeCached(Binding.class),\n-\n-        boolean_TYPE = makeCached(boolean.class),     char_TYPE = makeCached(char.class),\n-        byte_TYPE = makeCached(byte.class),           int_TYPE = makeCached(int.class),\n-        long_TYPE = makeCached(long.class),           short_TYPE = makeCached(short.class),\n-        double_TYPE = makeCached(double.class),       float_TYPE = makeCached(float.class),\n-        Byte_TYPE = makeCached(Byte.class),           Short_TYPE = makeCached(Short.class),\n-        Integer_TYPE = makeCached(Integer.class),     Long_TYPE = makeCached(Long.class),\n-        Character_TYPE = makeCached(Character.class), Float_TYPE = makeCached(Float.class),\n-        Double_TYPE = makeCached(Double.class),       Boolean_TYPE = makeCached(Boolean.class),\n-        BigInteger_TYPE =  makeCached(java.math.BigInteger.class),\n-        BigDecimal_TYPE = makeCached(java.math.BigDecimal.class),\n-        Number_TYPE = makeCached(Number.class),\n-        \n-        void_WRAPPER_TYPE = makeCached(Void.class),   METACLASS_TYPE = makeCached(MetaClass.class),\n-        Iterator_TYPE = makeCached(Iterator.class),\n-\n-        Enum_Type = makeWithoutCaching(Enum.class),\n-        Annotation_TYPE = makeCached(Annotation.class),\n-        ELEMENT_TYPE_TYPE = makeCached(ElementType.class),\n-\n-        // uncached constants.\n-        CLASS_Type = makeWithoutCaching(Class.class), COMPARABLE_TYPE = makeWithoutCaching(Comparable.class),        \n-        GENERATED_CLOSURE_Type = makeWithoutCaching(GeneratedClosure.class),\n-        GROOVY_OBJECT_SUPPORT_TYPE = makeWithoutCaching(GroovyObjectSupport.class),\n-        GROOVY_OBJECT_TYPE = makeWithoutCaching(GroovyObject.class),\n-        GROOVY_INTERCEPTABLE_TYPE = makeWithoutCaching(GroovyInterceptable.class)\n-        ;\n-    \n-    private static final ClassNode[] types = new ClassNode[] {\n-        OBJECT_TYPE,\n-        boolean_TYPE, char_TYPE, byte_TYPE, short_TYPE,\n-        int_TYPE, long_TYPE, double_TYPE, float_TYPE,\n-        VOID_TYPE, CLOSURE_TYPE, GSTRING_TYPE,\n-        LIST_TYPE, MAP_TYPE, RANGE_TYPE, PATTERN_TYPE,\n-        SCRIPT_TYPE, STRING_TYPE, Boolean_TYPE, Character_TYPE,\n-        Byte_TYPE, Short_TYPE, Integer_TYPE, Long_TYPE,\n-        Double_TYPE, Float_TYPE, BigDecimal_TYPE, BigInteger_TYPE,\n-        Number_TYPE,\n-        void_WRAPPER_TYPE, REFERENCE_TYPE, CLASS_Type, METACLASS_TYPE,\n-        Iterator_TYPE, GENERATED_CLOSURE_Type, GROOVY_OBJECT_SUPPORT_TYPE, \n-        GROOVY_OBJECT_TYPE, GROOVY_INTERCEPTABLE_TYPE, Enum_Type, Annotation_TYPE\n+\n+    public static final ClassNode\n+            DYNAMIC_TYPE = makeCached(Object.class), OBJECT_TYPE = DYNAMIC_TYPE,\n+            VOID_TYPE = makeCached(Void.TYPE), CLOSURE_TYPE = makeCached(Closure.class),\n+            GSTRING_TYPE = makeCached(GString.class), LIST_TYPE = makeWithoutCaching(List.class),\n+            MAP_TYPE = makeWithoutCaching(Map.class), RANGE_TYPE = makeCached(Range.class),\n+            PATTERN_TYPE = makeCached(Pattern.class), STRING_TYPE = makeCached(String.class),\n+            SCRIPT_TYPE = makeCached(Script.class), REFERENCE_TYPE = makeWithoutCaching(Reference.class),\n+            BINDING_TYPE = makeCached(Binding.class),\n+\n+    boolean_TYPE = makeCached(boolean.class), char_TYPE = makeCached(char.class),\n+            byte_TYPE = makeCached(byte.class), int_TYPE = makeCached(int.class),\n+            long_TYPE = makeCached(long.class), short_TYPE = makeCached(short.class),\n+            double_TYPE = makeCached(double.class), float_TYPE = makeCached(float.class),\n+            Byte_TYPE = makeCached(Byte.class), Short_TYPE = makeCached(Short.class),\n+            Integer_TYPE = makeCached(Integer.class), Long_TYPE = makeCached(Long.class),\n+            Character_TYPE = makeCached(Character.class), Float_TYPE = makeCached(Float.class),\n+            Double_TYPE = makeCached(Double.class), Boolean_TYPE = makeCached(Boolean.class),\n+            BigInteger_TYPE = makeCached(java.math.BigInteger.class),\n+            BigDecimal_TYPE = makeCached(java.math.BigDecimal.class),\n+            Number_TYPE = makeCached(Number.class),\n+\n+    void_WRAPPER_TYPE = makeCached(Void.class), METACLASS_TYPE = makeCached(MetaClass.class),\n+            Iterator_TYPE = makeCached(Iterator.class),\n+\n+    Enum_Type = makeWithoutCaching(Enum.class),\n+            Annotation_TYPE = makeCached(Annotation.class),\n+            ELEMENT_TYPE_TYPE = makeCached(ElementType.class),\n+\n+    // uncached constants.\n+    CLASS_Type = makeWithoutCaching(Class.class), COMPARABLE_TYPE = makeWithoutCaching(Comparable.class),\n+            GENERATED_CLOSURE_Type = makeWithoutCaching(GeneratedClosure.class),\n+            GROOVY_OBJECT_SUPPORT_TYPE = makeWithoutCaching(GroovyObjectSupport.class),\n+            GROOVY_OBJECT_TYPE = makeWithoutCaching(GroovyObject.class),\n+            GROOVY_INTERCEPTABLE_TYPE = makeWithoutCaching(GroovyInterceptable.class);\n+\n+    private static final ClassNode[] types = new ClassNode[]{\n+            OBJECT_TYPE,\n+            boolean_TYPE, char_TYPE, byte_TYPE, short_TYPE,\n+            int_TYPE, long_TYPE, double_TYPE, float_TYPE,\n+            VOID_TYPE, CLOSURE_TYPE, GSTRING_TYPE,\n+            LIST_TYPE, MAP_TYPE, RANGE_TYPE, PATTERN_TYPE,\n+            SCRIPT_TYPE, STRING_TYPE, Boolean_TYPE, Character_TYPE,\n+            Byte_TYPE, Short_TYPE, Integer_TYPE, Long_TYPE,\n+            Double_TYPE, Float_TYPE, BigDecimal_TYPE, BigInteger_TYPE,\n+            Number_TYPE,\n+            void_WRAPPER_TYPE, REFERENCE_TYPE, CLASS_Type, METACLASS_TYPE,\n+            Iterator_TYPE, GENERATED_CLOSURE_Type, GROOVY_OBJECT_SUPPORT_TYPE,\n+            GROOVY_OBJECT_TYPE, GROOVY_INTERCEPTABLE_TYPE, Enum_Type, Annotation_TYPE\n     };\n \n-    private static final int ABSTRACT_STATIC_PRIVATE = \n-            Modifier.ABSTRACT|Modifier.PRIVATE|Modifier.STATIC;\n+    private static final int ABSTRACT_STATIC_PRIVATE =\n+            Modifier.ABSTRACT | Modifier.PRIVATE | Modifier.STATIC;\n     private static final int VISIBILITY = 5; // public|protected\n-    \n+\n     protected static final ClassNode[] EMPTY_TYPE_ARRAY = {};\n-    \n+\n     public static final String OBJECT = \"java.lang.Object\";\n \n-    public static ClassNode makeCached(Class c){\n+    public static ClassNode makeCached(Class c) {\n         final SoftReference<ClassNode> classNodeSoftReference = ClassHelperCache.classCache.get(c);\n         ClassNode classNode;\n         if (classNodeSoftReference == null || (classNode = classNodeSoftReference.get()) == null) {\n@@ -136,171 +133,170 @@ public static ClassNode makeCached(Class c){\n \n         return classNode;\n     }\n-    \n+\n     /**\n      * Creates an array of ClassNodes using an array of classes.\n-     * For each of the given classes a new ClassNode will be \n+     * For each of the given classes a new ClassNode will be\n      * created\n-     * @see #make(Class)\n+     *\n      * @param classes an array of classes used to create the ClassNodes\n      * @return an array of ClassNodes\n+     * @see #make(Class)\n      */\n     public static ClassNode[] make(Class[] classes) {\n         ClassNode[] cns = new ClassNode[classes.length];\n-        for (int i=0; i<cns.length; i++) {\n+        for (int i = 0; i < cns.length; i++) {\n             cns[i] = make(classes[i]);\n         }\n-        \n+\n         return cns;\n     }\n-    \n+\n     /**\n      * Creates a ClassNode using a given class.\n      * A new ClassNode object is only created if the class\n      * is not one of the predefined ones\n-     * \n+     *\n      * @param c class used to created the ClassNode\n      * @return ClassNode instance created from the given class\n      */\n     public static ClassNode make(Class c) {\n-        return make(c,true);\n+        return make(c, true);\n     }\n-    \n+\n     public static ClassNode make(Class c, boolean includeGenerics) {\n-        for (int i=0; i<classes.length; i++) {\n-            if (c==classes[i]) return types[i];\n+        for (int i = 0; i < classes.length; i++) {\n+            if (c == classes[i]) return types[i];\n         }\n         if (c.isArray()) {\n-            ClassNode cn = make(c.getComponentType(),includeGenerics);\n+            ClassNode cn = make(c.getComponentType(), includeGenerics);\n             return cn.makeArray();\n         }\n-        return makeWithoutCaching(c,includeGenerics);\n+        return makeWithoutCaching(c, includeGenerics);\n     }\n-    \n-    public static ClassNode makeWithoutCaching(Class c){\n-        return makeWithoutCaching(c,true);\n+\n+    public static ClassNode makeWithoutCaching(Class c) {\n+        return makeWithoutCaching(c, true);\n     }\n-    \n-    public static ClassNode makeWithoutCaching(Class c, boolean includeGenerics){\n+\n+    public static ClassNode makeWithoutCaching(Class c, boolean includeGenerics) {\n         if (c.isArray()) {\n-            ClassNode cn = makeWithoutCaching(c.getComponentType(),includeGenerics);\n+            ClassNode cn = makeWithoutCaching(c.getComponentType(), includeGenerics);\n             return cn.makeArray();\n         }\n \n         final ClassNode cached = makeCached(c);\n         if (includeGenerics) {\n             return cached;\n-        }\n-        else {\n+        } else {\n             ClassNode t = makeWithoutCaching(c.getName());\n             t.setRedirect(cached);\n             return t;\n         }\n     }\n-    \n-    \n+\n+\n     /**\n      * Creates a ClassNode using a given class.\n      * Unlike make(String) this method will not use the cache\n      * to create the ClassNode. This means the ClassNode created\n      * from this method using the same name will have a different\n      * reference\n-     * \n-     * @see #make(String)\n+     *\n      * @param name of the class the ClassNode is representing\n+     * @see #make(String)\n      */\n-    public static ClassNode makeWithoutCaching(String name) { \n-        ClassNode cn = new ClassNode(name,Opcodes.ACC_PUBLIC,OBJECT_TYPE);\n+    public static ClassNode makeWithoutCaching(String name) {\n+        ClassNode cn = new ClassNode(name, Opcodes.ACC_PUBLIC, OBJECT_TYPE);\n         cn.isPrimaryNode = false;\n         return cn;\n     }\n-    \n-    /**     * Creates a ClassNode using a given class.\n-     * If the name is one of the predefined ClassNodes then the \n+\n+    /**\n+     * Creates a ClassNode using a given class.\n+     * If the name is one of the predefined ClassNodes then the\n      * corresponding ClassNode instance will be returned. If the\n      * name is null or of length 0 the dynamic type is returned\n-     * \n+     *\n      * @param name of the class the ClassNode is representing\n      */\n     public static ClassNode make(String name) {\n         if (name == null || name.length() == 0) return DYNAMIC_TYPE;\n-        \n-        for (int i=0; i<primitiveClassNames.length; i++) {\n+\n+        for (int i = 0; i < primitiveClassNames.length; i++) {\n             if (primitiveClassNames[i].equals(name)) return types[i];\n         }\n-        \n-        for (int i=0; i<classes.length; i++) {\n+\n+        for (int i = 0; i < classes.length; i++) {\n             String cname = classes[i].getName();\n             if (name.equals(cname)) return types[i];\n-        }        \n+        }\n         return makeWithoutCaching(name);\n     }\n-    \n+\n     /**\n-     * Creates a ClassNode containing the wrapper of a ClassNode \n+     * Creates a ClassNode containing the wrapper of a ClassNode\n      * of primitive type. Any ClassNode representing a primitive\n      * type should be created using the predefined types used in\n-     * class. The method will check the parameter for known \n+     * class. The method will check the parameter for known\n      * references of ClassNode representing a primitive type. If\n      * Reference is found, then a ClassNode will be contained that\n      * represents the wrapper class. For example for boolean, the\n      * wrapper class is java.lang.Boolean.\n-     * \n-     * If the parameter is no primitive type, the redirected \n-     * ClassNode will be returned \n-     *   \n+     * <p>\n+     * If the parameter is no primitive type, the redirected\n+     * ClassNode will be returned\n+     *\n+     * @param cn the ClassNode containing a possible primitive type\n      * @see #make(Class)\n      * @see #make(String)\n-     * @param cn the ClassNode containing a possible primitive type\n      */\n     public static ClassNode getWrapper(ClassNode cn) {\n         cn = cn.redirect();\n         if (!isPrimitiveType(cn)) return cn;\n-        if (cn==boolean_TYPE) {\n+        if (cn == boolean_TYPE) {\n             return Boolean_TYPE;\n-        } else if (cn==byte_TYPE) {\n+        } else if (cn == byte_TYPE) {\n             return Byte_TYPE;\n-        } else if (cn==char_TYPE) {\n+        } else if (cn == char_TYPE) {\n             return Character_TYPE;\n-        } else if (cn==short_TYPE) {\n+        } else if (cn == short_TYPE) {\n             return Short_TYPE;\n-        } else if (cn==int_TYPE) {\n+        } else if (cn == int_TYPE) {\n             return Integer_TYPE;\n-        } else if (cn==long_TYPE) {\n+        } else if (cn == long_TYPE) {\n             return Long_TYPE;\n-        } else if (cn==float_TYPE) {\n+        } else if (cn == float_TYPE) {\n             return Float_TYPE;\n-        } else if (cn==double_TYPE) {\n+        } else if (cn == double_TYPE) {\n             return Double_TYPE;\n-        } else if (cn==VOID_TYPE) {\n+        } else if (cn == VOID_TYPE) {\n             return void_WRAPPER_TYPE;\n-        }\n-        else {\n+        } else {\n             return cn;\n         }\n     }\n \n     public static ClassNode getUnwrapper(ClassNode cn) {\n         cn = cn.redirect();\n         if (isPrimitiveType(cn)) return cn;\n-        if (cn==Boolean_TYPE) {\n+        if (cn == Boolean_TYPE) {\n             return boolean_TYPE;\n-        } else if (cn==Byte_TYPE) {\n+        } else if (cn == Byte_TYPE) {\n             return byte_TYPE;\n-        } else if (cn==Character_TYPE) {\n+        } else if (cn == Character_TYPE) {\n             return char_TYPE;\n-        } else if (cn==Short_TYPE) {\n+        } else if (cn == Short_TYPE) {\n             return short_TYPE;\n-        } else if (cn==Integer_TYPE) {\n+        } else if (cn == Integer_TYPE) {\n             return int_TYPE;\n-        } else if (cn==Long_TYPE) {\n+        } else if (cn == Long_TYPE) {\n             return long_TYPE;\n-        } else if (cn==Float_TYPE) {\n+        } else if (cn == Float_TYPE) {\n             return float_TYPE;\n-        } else if (cn==Double_TYPE) {\n+        } else if (cn == Double_TYPE) {\n             return double_TYPE;\n-        }\n-        else {\n+        } else {\n             return cn;\n         }\n     }\n@@ -310,14 +306,14 @@ public static ClassNode getUnwrapper(ClassNode cn) {\n      * Test to determine if a ClassNode is a primitive type.\n      * Note: this only works for ClassNodes created using a\n      * predefined ClassNode\n-     * \n-     * @see #make(Class)\n-     * @see #make(String)\n+     *\n      * @param cn the ClassNode containing a possible primitive type\n      * @return true if the ClassNode is a primitive type\n+     * @see #make(Class)\n+     * @see #make(String)\n      */\n     public static boolean isPrimitiveType(ClassNode cn) {\n-        return  cn == boolean_TYPE ||\n+        return cn == boolean_TYPE ||\n                 cn == char_TYPE ||\n                 cn == byte_TYPE ||\n                 cn == short_TYPE ||\n@@ -331,17 +327,17 @@ public static boolean isPrimitiveType(ClassNode cn) {\n     /**\n      * Test to determine if a ClassNode is a type belongs to the list of types which\n      * are allowed to initialize constants directly in bytecode instead of using &lt;cinit&gt;\n-     *\n+     * <p>\n      * Note: this only works for ClassNodes created using a\n      * predefined ClassNode\n      *\n-     * @see #make(Class)\n-     * @see #make(String)\n      * @param cn the ClassNode to be tested\n      * @return true if the ClassNode is of int, float, long, double or String type\n+     * @see #make(Class)\n+     * @see #make(String)\n      */\n     public static boolean isStaticConstantInitializerType(ClassNode cn) {\n-        return  cn == int_TYPE ||\n+        return cn == int_TYPE ||\n                 cn == float_TYPE ||\n                 cn == long_TYPE ||\n                 cn == double_TYPE ||\n@@ -353,7 +349,7 @@ public static boolean isStaticConstantInitializerType(ClassNode cn) {\n     }\n \n     public static boolean isNumberType(ClassNode cn) {\n-        return  cn == Byte_TYPE ||\n+        return cn == Byte_TYPE ||\n                 cn == Short_TYPE ||\n                 cn == Integer_TYPE ||\n                 cn == Long_TYPE ||\n@@ -381,31 +377,32 @@ public static boolean isCachedType(ClassNode type) {\n     static class ClassHelperCache {\n         static ManagedConcurrentMap<Class, SoftReference<ClassNode>> classCache = new ManagedConcurrentMap<Class, SoftReference<ClassNode>>(ReferenceBundle.getWeakBundle());\n     }\n-    \n+\n     public static boolean isSAMType(ClassNode type) {\n         return findSAM(type) != null;\n     }\n \n     /**\n      * Returns the single abstract method of a class node, if it is a SAM type, or null otherwise.\n+     *\n      * @param type a type for which to search for a single abstract method\n      * @return the method node if type is a SAM type, null otherwise\n      */\n     public static MethodNode findSAM(ClassNode type) {\n         if (!Modifier.isAbstract(type.getModifiers())) return null;\n         if (type.isInterface()) {\n             List<MethodNode> methods = type.getMethods();\n-            MethodNode found=null;\n+            MethodNode found = null;\n             for (MethodNode mi : methods) {\n                 // ignore methods, that are not abstract and from Object\n                 if (!Modifier.isAbstract(mi.getModifiers())) continue;\n                 // ignore trait methods which have a default implementation\n                 if (Traits.hasDefaultImplementation(mi)) continue;\n                 if (mi.getDeclaringClass().equals(OBJECT_TYPE)) continue;\n-                if (OBJECT_TYPE.getDeclaredMethod(mi.getName(), mi.getParameters())!=null) continue;\n+                if (OBJECT_TYPE.getDeclaredMethod(mi.getName(), mi.getParameters()) != null) continue;\n \n                 // we have two methods, so no SAM\n-                if (found!=null) return null;\n+                if (found != null) return null;\n                 found = mi;\n             }\n             return found;\n@@ -414,10 +411,10 @@ public static MethodNode findSAM(ClassNode type) {\n \n             List<MethodNode> methods = type.getAbstractMethods();\n             MethodNode found = null;\n-            if (methods!=null) {\n+            if (methods != null) {\n                 for (MethodNode mi : methods) {\n                     if (!hasUsableImplementation(type, mi)) {\n-                        if (found!=null) return null;\n+                        if (found != null) return null;\n                         found = mi;\n                     }\n                 }\n@@ -427,27 +424,31 @@ public static MethodNode findSAM(ClassNode type) {\n     }\n \n     private static boolean hasUsableImplementation(ClassNode c, MethodNode m) {\n-        if (c==m.getDeclaringClass()) return false;\n+        if (c == m.getDeclaringClass()) return false;\n         MethodNode found = c.getDeclaredMethod(m.getName(), m.getParameters());\n-        if (found==null) return false;\n+        if (found == null) return false;\n         int asp = found.getModifiers() & ABSTRACT_STATIC_PRIVATE;\n         int visible = found.getModifiers() & VISIBILITY;\n-        if (visible !=0 && asp == 0) return true;\n+        if (visible != 0 && asp == 0) return true;\n         if (c.equals(OBJECT_TYPE)) return false;\n         return hasUsableImplementation(c.getSuperClass(), m);\n     }\n \n     /**\n      * Returns a super class or interface for a given class depending on a given target.\n      * If the target is no super class or interface, then null will be returned.\n-     * @param clazz the start class\n+     * For a non-primitive array type, returns an array of the componentType's super class\n+     * or interface if the target is also an array.\n+     *\n+     * @param clazz     the start class\n      * @param goalClazz the goal class\n      * @return the next super class or interface\n      */\n     public static ClassNode getNextSuperClass(ClassNode clazz, ClassNode goalClazz) {\n         if (clazz.isArray()) {\n-            ClassNode cn = getNextSuperClass(clazz.getComponentType(),goalClazz.getComponentType());\n-            if (cn!=null) cn = cn.makeArray();\n+            if (!goalClazz.isArray()) return null;\n+            ClassNode cn = getNextSuperClass(clazz.getComponentType(), goalClazz.getComponentType());\n+            if (cn != null) cn = cn.makeArray();\n             return cn;\n         }\n \n@@ -461,9 +462,9 @@ public static ClassNode getNextSuperClass(ClassNode clazz, ClassNode goalClazz)\n         }\n \n         ClassNode[] interfaces = clazz.getUnresolvedInterfaces();\n-        for (int i=0; i<interfaces.length; i++) {\n-            if (StaticTypeCheckingSupport.implementsInterfaceOrIsSubclassOf(interfaces[i],goalClazz)) {\n-                return interfaces[i];\n+        for (ClassNode anInterface : interfaces) {\n+            if (StaticTypeCheckingSupport.implementsInterfaceOrIsSubclassOf(anInterface, goalClazz)) {\n+                return anInterface;\n             }\n         }\n         //none of the interfaces here match, so continue with super class",
                "raw_url": "https://github.com/apache/groovy/raw/86be867e71eceb3b493773ac567d1cee6b42c05c/src/main/org/codehaus/groovy/ast/ClassHelper.java",
                "sha": "6fc6a22ca18a12237740a8925b04c14cc3f8d127",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/86be867e71eceb3b493773ac567d1cee6b42c05c/src/main/org/codehaus/groovy/ast/tools/GenericsUtils.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/ast/tools/GenericsUtils.java?ref=86be867e71eceb3b493773ac567d1cee6b42c05c",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/ast/tools/GenericsUtils.java",
                "patch": "@@ -431,6 +431,8 @@ public static void extractSuperClassGenerics(ClassNode type, ClassNode target, M\n         if (target==null || type==target) return;\n         if (type.isArray() && target.isArray()) {\n             extractSuperClassGenerics(type.getComponentType(), target.getComponentType(), spec);\n+        } else if (type.isArray() && target.getName().equals(\"java.lang.Object\")) {\n+            // Object is superclass of arrays but no generics involved\n         } else if (target.isGenericsPlaceHolder() || type.equals(target) || !StaticTypeCheckingSupport.implementsInterfaceOrIsSubclassOf(type, target)) {\n             // structural match route\n             if (target.isGenericsPlaceHolder()) {",
                "raw_url": "https://github.com/apache/groovy/raw/86be867e71eceb3b493773ac567d1cee6b42c05c/src/main/org/codehaus/groovy/ast/tools/GenericsUtils.java",
                "sha": "653f3270cca5072d1a790c586c232746dca3b7a2",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/groovy/blob/86be867e71eceb3b493773ac567d1cee6b42c05c/src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java?ref=86be867e71eceb3b493773ac567d1cee6b42c05c",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java",
                "patch": "@@ -164,6 +164,17 @@ public void visit(ASTNode[] nodes, SourceUnit source) {\n                 addGetterIfNeeded(delegate, prop, name, allNames);\n                 addSetterIfNeeded(delegate, prop, name, allNames);\n             }\n+            if (delegate.type.isArray()) {\n+                boolean skipLength = delegate.excludes != null && (delegate.excludes.contains(\"length\") || delegate.excludes.contains(\"getLength\"));\n+                if (!skipLength) {\n+                    delegate.owner.addMethod(\"getLength\",\n+                            ACC_PUBLIC,\n+                            ClassHelper.int_TYPE,\n+                            Parameter.EMPTY_ARRAY,\n+                            null,\n+                            returnS(propX(delegate.getOp, \"length\")));\n+                }\n+            }\n \n             if (skipInterfaces) return;\n ",
                "raw_url": "https://github.com/apache/groovy/raw/86be867e71eceb3b493773ac567d1cee6b42c05c/src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java",
                "sha": "d56da3d0a3bd77e26e21c04b0941467b8987110c",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/groovy/blob/86be867e71eceb3b493773ac567d1cee6b42c05c/src/test/org/codehaus/groovy/transform/DelegateTransformTest.groovy",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/transform/DelegateTransformTest.groovy?ref=86be867e71eceb3b493773ac567d1cee6b42c05c",
                "deletions": 1,
                "filename": "src/test/org/codehaus/groovy/transform/DelegateTransformTest.groovy",
                "patch": "@@ -21,7 +21,7 @@ package org.codehaus.groovy.transform\n import gls.CompilableTestSupport\n \n /**\n- * Tests for the @{code @Delegate} AST transform.\n+ * Tests for the {@code @Delegate} AST transform.\n  */\n class DelegateTransformTest extends CompilableTestSupport {\n \n@@ -811,6 +811,22 @@ assert foo.dm.x == '123'\n             assert new Foo(bar: new Bar()).pls() == 'foo pls'\n         '''\n     }\n+\n+    // GROOVY-8204\n+    void testDelegateToArray() {\n+        assertScript '''\n+            import groovy.lang.Delegate\n+\n+            class BugsMe {\n+                @Delegate\n+                String[] content = ['foo', 'bar']\n+            }\n+\n+            assert new BugsMe().content.join() == 'foobar'\n+            assert new BugsMe().content.length == 2\n+            assert new BugsMe().length == 2\n+        '''\n+    }\n }\n \n interface DelegateFoo {",
                "raw_url": "https://github.com/apache/groovy/raw/86be867e71eceb3b493773ac567d1cee6b42c05c/src/test/org/codehaus/groovy/transform/DelegateTransformTest.groovy",
                "sha": "3321344870c3cb3db841c208761a2354370bfe2e",
                "status": "modified"
            }
        ],
        "message": "GROOVY-8204: @Delegate on arrays causes NPE during compilation (closes #551)",
        "parent": "https://github.com/apache/groovy/commit/401b3a4c434083adc84843cfb9abf14f6783c7e7",
        "patched_files": [
            "ClassHelper.java",
            "GenericsUtils.java",
            "DelegateASTTransformation.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "DelegateTransformTest.java"
        ]
    },
    "groovy_880309a": {
        "bug_id": "groovy_880309a",
        "commit": "https://github.com/apache/groovy/commit/880309ac024abd72fdca1477b8633847bddb0da2",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/groovy/blob/880309ac024abd72fdca1477b8633847bddb0da2/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java?ref=880309ac024abd72fdca1477b8633847bddb0da2",
                "deletions": 6,
                "filename": "src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "patch": "@@ -1757,13 +1757,16 @@ public void visitMethodCallExpression(MethodCallExpression call) {\n                 if (objectExpression == VariableExpression.THIS_EXPRESSION) {\n                     // isClosureCall() check verified earlier that a field exists\n                     FieldNode field = classNode.getDeclaredField(name);\n-                    ClassNode closureReturnType = field.getType().getGenericsTypes()[0].getType();\n-                    Object data = field.getNodeMetaData(StaticTypesMarker.CLOSURE_ARGUMENTS);\n-                    if (data != null) {\n-                        Parameter[] parameters = (Parameter[]) data;\n-                        typeCheckClosureCall(callArguments, args, parameters);\n+                    GenericsType[] genericsTypes = field.getType().getGenericsTypes();\n+                    if (genericsTypes != null) {\n+                        ClassNode closureReturnType = genericsTypes[0].getType();\n+                        Object data = field.getNodeMetaData(StaticTypesMarker.CLOSURE_ARGUMENTS);\n+                        if (data != null) {\n+                            Parameter[] parameters = (Parameter[]) data;\n+                            typeCheckClosureCall(callArguments, args, parameters);\n+                        }\n+                        storeType(call, closureReturnType);\n                     }\n-                    storeType(call, closureReturnType);\n                 } else if (objectExpression instanceof VariableExpression) {\n                     Variable variable = findTargetVariable((VariableExpression) objectExpression);\n                     if (variable instanceof Expression) {",
                "raw_url": "https://github.com/apache/groovy/raw/880309ac024abd72fdca1477b8633847bddb0da2/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "sha": "462c6aeae2ad1ad7b7acd030805bc25713cd5668",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/groovy/blob/880309ac024abd72fdca1477b8633847bddb0da2/src/test/groovy/transform/stc/ClosuresSTCTest.groovy",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/transform/stc/ClosuresSTCTest.groovy?ref=880309ac024abd72fdca1477b8633847bddb0da2",
                "deletions": 0,
                "filename": "src/test/groovy/transform/stc/ClosuresSTCTest.groovy",
                "patch": "@@ -259,5 +259,22 @@ class ClosuresSTCTest extends StaticTypeCheckingTestCase {\n         '''\n     }\n \n+    // GROOVY-5705\n+    void testNPEWhenCallingClosureFromAField() {\n+        assertScript '''\n+            import groovy.transform.*\n+\n+            class Test {\n+                Closure c = { it }\n+\n+                @TypeChecked\n+                void test() {\n+                    c(\"123\")\n+                }\n+            }\n+\n+            new Test().test()\n+        '''\n+    }\n }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/880309ac024abd72fdca1477b8633847bddb0da2/src/test/groovy/transform/stc/ClosuresSTCTest.groovy",
                "sha": "3ddf6a0625875cae43fbd81aeaf8bf9bbc247382",
                "status": "modified"
            }
        ],
        "message": "GROOVY-5705: STC: calling a closure stored in a property yields an NPE",
        "parent": "https://github.com/apache/groovy/commit/9c1eb38d260bbb5fbcc7a74a0ff69de2371fe447",
        "patched_files": [
            "StaticTypeCheckingVisitor.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "ClosuresSTCTest.java"
        ]
    },
    "groovy_8ceb7ce": {
        "bug_id": "groovy_8ceb7ce",
        "commit": "https://github.com/apache/groovy/commit/8ceb7ce443cafa2983d63a8562c58a5e314cd249",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/8ceb7ce443cafa2983d63a8562c58a5e314cd249/src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesStatementWriter.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesStatementWriter.java?ref=8ceb7ce443cafa2983d63a8562c58a5e314cd249",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesStatementWriter.java",
                "patch": "@@ -72,6 +72,7 @@ protected void writeForInLoop(final ForStatement loop) {\n         if (collectionType.implementsInterface(ITERABLE_CLASSNODE)) {\n             MethodCallExpression iterator = new MethodCallExpression(collectionExpression, \"iterator\", new ArgumentListExpression());\n             iterator.setMethodTarget(collectionType.getMethod(\"iterator\", Parameter.EMPTY_ARRAY));\n+            iterator.setImplicitThis(false);\n             iterator.visit(controller.getAcg());\n         } else {\n             collectionExpression.visit(controller.getAcg());",
                "raw_url": "https://github.com/apache/groovy/raw/8ceb7ce443cafa2983d63a8562c58a5e314cd249/src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesStatementWriter.java",
                "sha": "dea503fcb6d509038c47a51425f8bd79abc31764",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/8ceb7ce443cafa2983d63a8562c58a5e314cd249/src/main/org/codehaus/groovy/transform/sc/StaticCompilationVisitor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/sc/StaticCompilationVisitor.java?ref=8ceb7ce443cafa2983d63a8562c58a5e314cd249",
                "deletions": 2,
                "filename": "src/main/org/codehaus/groovy/transform/sc/StaticCompilationVisitor.java",
                "patch": "@@ -91,8 +91,8 @@ public void visitClass(final ClassNode node) {\n         }\n         while (innerClasses.hasNext()) {\n             InnerClassNode innerClassNode = innerClasses.next();\n-            innerClassNode.setNodeMetaData(STATIC_COMPILE_NODE, !skip);\n-            innerClassNode.setNodeMetaData(WriterControllerFactory.class, node.getNodeMetaData(WriterControllerFactory.class));\n+            innerClassNode.putNodeMetaData(STATIC_COMPILE_NODE, !skip);\n+            innerClassNode.putNodeMetaData(WriterControllerFactory.class, node.getNodeMetaData(WriterControllerFactory.class));\n             addPrivateBridgeMethods(innerClassNode);\n             addPrivateFieldsAccessors(innerClassNode);\n         }",
                "raw_url": "https://github.com/apache/groovy/raw/8ceb7ce443cafa2983d63a8562c58a5e314cd249/src/main/org/codehaus/groovy/transform/sc/StaticCompilationVisitor.java",
                "sha": "1c2f5a29183d9952db6a562f39aa6270bdfdac53",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/groovy/blob/8ceb7ce443cafa2983d63a8562c58a5e314cd249/src/test/org/codehaus/groovy/classgen/asm/sc/BugsStaticCompileTest.groovy",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/classgen/asm/sc/BugsStaticCompileTest.groovy?ref=8ceb7ce443cafa2983d63a8562c58a5e314cd249",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/classgen/asm/sc/BugsStaticCompileTest.groovy",
                "patch": "@@ -51,5 +51,23 @@ class BugsStaticCompileTest extends BugsSTCTest {\n             new Test().someMethod()\n         '''\n     }\n+\n+    // GROOVY-5512\n+    void testCreateRangeInInnerClass() {\n+        def shell = new GroovyShell()\n+        shell.evaluate '''\n+            class Outer {\n+                static class Inner {\n+                    @groovy.transform.CompileStatic\n+                    int m() {\n+                        int x = 0\n+                        for (int i in 1..10) {x++}\n+                        x\n+                    }\n+                }\n+            }\n+            assert new Outer.Inner().m() == 10\n+        '''\n+    }\n }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/8ceb7ce443cafa2983d63a8562c58a5e314cd249/src/test/org/codehaus/groovy/classgen/asm/sc/BugsStaticCompileTest.groovy",
                "sha": "c9390604fabfe9c4b9dbb5fd9dfb1af9de3fe427",
                "status": "modified"
            }
        ],
        "message": "GROOVY-5512: NPE when creating a range in an inner class with @CompileStatic",
        "parent": "https://github.com/apache/groovy/commit/fb15771e9bf524c957b7d1157e8e521796bf214e",
        "patched_files": [
            "StaticCompilationVisitor.java",
            "StaticTypesStatementWriter.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "BugsStaticCompileTest.java"
        ]
    },
    "groovy_8d9486a": {
        "bug_id": "groovy_8d9486a",
        "commit": "https://github.com/apache/groovy/commit/8d9486a6a4cad4d82a114f9eb9b1a8e519e5ef0a",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/8d9486a6a4cad4d82a114f9eb9b1a8e519e5ef0a/src/main/org/codehaus/groovy/syntax/parser/ASTBuilder.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/syntax/parser/ASTBuilder.java?ref=8d9486a6a4cad4d82a114f9eb9b1a8e519e5ef0a",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/syntax/parser/ASTBuilder.java",
                "patch": "@@ -456,7 +456,7 @@ protected ClassNode interfaceDeclaration(String packageName,\n \n     protected BlockStatement statementBlock(CSTNode blockRoot) throws ParserException\n     {\n-        if (blockRoot.getToken().getType() == Token.LEFT_CURLY_BRACE) \n+        if (blockRoot.getToken() == null || blockRoot.getToken().getType() == Token.LEFT_CURLY_BRACE) \n         {    \n             return statementBlock(blockRoot, 0);\n         }",
                "raw_url": "https://github.com/apache/groovy/raw/8d9486a6a4cad4d82a114f9eb9b1a8e519e5ef0a/src/main/org/codehaus/groovy/syntax/parser/ASTBuilder.java",
                "sha": "116b09d0baac509e048fed11685660dc59543aba",
                "status": "modified"
            }
        ],
        "message": "fixed NPE I just introduced by accident :)\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@459 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/de00ef804f07e9766778a067cd027c4e535809bd",
        "patched_files": [
            "ASTBuilder.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "ASTBuilderTest.java"
        ]
    },
    "groovy_8ea5329": {
        "bug_id": "groovy_8ea5329",
        "commit": "https://github.com/apache/groovy/commit/8ea532994756c2178365a8aab62f70e4dee87eba",
        "file": [
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/groovy/blob/8ea532994756c2178365a8aab62f70e4dee87eba/src/main/groovy/lang/GroovyClassLoader.java",
                "changes": 67,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/GroovyClassLoader.java?ref=8ea532994756c2178365a8aab62f70e4dee87eba",
                "deletions": 31,
                "filename": "src/main/groovy/lang/GroovyClassLoader.java",
                "patch": "@@ -360,41 +360,46 @@ protected Class findGroovyClass(String name) throws ClassNotFoundException {\n      * @param classpath\n      */\n     private void expandClassPath(List pathList, String base, String classpath) {\n-        String[] paths = classpath.split(File.pathSeparator);\n-        for (int i = 0; i < paths.length; i++) {\n-            File path = null;\n \n-            if (\"\".equals(base)) {\n-                path = new File(paths[i]);\n-            } else {\n-                path = new File(base, paths[i]);\n-            }\n+        // checking against null prevents an NPE when recursevely expanding the classpath\n+        // in case the classpath is malformed\n+        if (classpath != null) {\n \n-            if (path.exists()) {\n-                if (!path.isDirectory()) {\n-                    try {\n-                        JarFile jar = new JarFile(path);\n-                        pathList.add(paths[i]);\n-                        // Get the manifest classpath entry from the jar\n-                        // SPG This code is currently unreliable - the Class-Path attribute\n-                        // returns entries which are delimited in unpredictable ways.\n-                        // See for example openejb-loader jar.  Commenting until we\n-                        // decide how we want to handle these cases (if at all).\n-                        /*\n-                        Manifest manifest = jar.getManifest();\n-                        Attributes classPathAttributes = manifest.getMainAttributes();\n-                        String manifestClassPath = classPathAttributes.getValue(\"Class-Path\");\n-\n-                        if (manifestClassPath != null)\n-                            expandClassPath(pathList, paths[i], manifestClassPath);\n-                        */\n+            // Sun's convention for the class-path attribute is to seperate each entry with spaces\n+            // but some libraries don't respect that convention and add commas, colons, semi-colons\n+            String[] paths = classpath.split(\"[\\\\ ,:;]\");\n \n-                    } catch (IOException e) {\n-                        // Bad jar, ignore\n-                        continue;\n+            for (int i = 0; i < paths.length; i++) {\n+                if (paths.length > 0) {\n+                    File path = null;\n+\n+                    if (\"\".equals(base)) {\n+                        path = new File(paths[i]);\n+                    } else {\n+                        path = new File(base, paths[i]);\n+                    }\n+\n+                    if (path.exists()) {\n+                        if (!path.isDirectory()) {\n+                            try {\n+                                JarFile jar = new JarFile(path);\n+                                pathList.add(paths[i]);\n+\n+                                Manifest manifest = jar.getManifest();\n+                                Attributes classPathAttributes = manifest.getMainAttributes();\n+                                String manifestClassPath = classPathAttributes.getValue(\"Class-Path\");\n+\n+                                if (manifestClassPath != null)\n+                                    expandClassPath(pathList, paths[i], manifestClassPath);\n+\n+                            } catch (IOException e) {\n+                                // Bad jar, ignore\n+                                continue;\n+                            }\n+                        } else {\n+                            pathList.add(paths[i]);\n+                        }\n                     }\n-                } else {\n-                    pathList.add(paths[i]);\n                 }\n             }\n         }",
                "raw_url": "https://github.com/apache/groovy/raw/8ea532994756c2178365a8aab62f70e4dee87eba/src/main/groovy/lang/GroovyClassLoader.java",
                "sha": "41c29ed1a78aee88d5067d2890930d832aa131ba",
                "status": "modified"
            }
        ],
        "message": "GROOVY-452's NPE fixed, and restored the expansion of Class-Path, so that even a mal-formed path be parsed. When Chris adds warning capabilities to the compiler, we'll be able to warn the user that he uses a jar with a malformed manifest file.\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@1151 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/615048528f0d502892ff4470386e3513dda65fe1",
        "patched_files": [
            "GroovyClassLoader.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "GroovyClassLoaderTest.java"
        ]
    },
    "groovy_8ff4623": {
        "bug_id": "groovy_8ff4623",
        "commit": "https://github.com/apache/groovy/commit/8ff4623e772f35208f9aff5d08731b5752266947",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/8ff4623e772f35208f9aff5d08731b5752266947/src/main/org/codehaus/groovy/runtime/NullObject.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/NullObject.java?ref=8ff4623e772f35208f9aff5d08731b5752266947",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/runtime/NullObject.java",
                "patch": "@@ -132,7 +132,7 @@ public Object plus(String s) {\n      * @return nothing\n      */\n     public Object plus(Object o) {\n-        throw new NullPointerException(\"Cannot execute null+null\");\n+        throw new NullPointerException(\"Cannot execute null+\" + String.valueOf(o));\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/groovy/raw/8ff4623e772f35208f9aff5d08731b5752266947/src/main/org/codehaus/groovy/runtime/NullObject.java",
                "sha": "c281db80b3982c1dae18a1588376376f918411c4",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/groovy/blob/8ff4623e772f35208f9aff5d08731b5752266947/src/test/org/codehaus/groovy/runtime/NullObjectTest.groovy",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/runtime/NullObjectTest.groovy?ref=8ff4623e772f35208f9aff5d08731b5752266947",
                "deletions": 1,
                "filename": "src/test/org/codehaus/groovy/runtime/NullObjectTest.groovy",
                "patch": "@@ -76,9 +76,17 @@ class NullObjectTest extends GroovyTestCase {\n     }\n \n     void testNullPlusNull() {\n-        shouldFail(NullPointerException) {\n+        String message = shouldFail(NullPointerException) {\n             null+null\n         }\n+        assert message == \"Cannot execute null+null\"\n+    }\n+\n+    void testNullPlusNumer() {\n+      String message = shouldFail(NullPointerException) {\n+          null+1\n+      }\n+      assert message == \"Cannot execute null+1\"\n     }\n \n     void testNullWith() {",
                "raw_url": "https://github.com/apache/groovy/raw/8ff4623e772f35208f9aff5d08731b5752266947/src/test/org/codehaus/groovy/runtime/NullObjectTest.groovy",
                "sha": "a7afa068208cad829a76c228aad2948fb1e1f159",
                "status": "modified"
            }
        ],
        "message": "GROOVY-7546: fix NullPointerException message when trying to add non-null objects to null (closes #128)",
        "parent": "https://github.com/apache/groovy/commit/9ea46e8d0262fd8607b43bbedc15cf46bd115c2b",
        "patched_files": [
            "NullObject.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "NullObjectTest.java"
        ]
    },
    "groovy_903df1c": {
        "bug_id": "groovy_903df1c",
        "commit": "https://github.com/apache/groovy/commit/903df1c6920db792b4249a2f9e3e130fef8bcc20",
        "file": [
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/groovy/lang/MetaClassImpl.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/MetaClassImpl.java?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 8,
                "filename": "src/main/groovy/lang/MetaClassImpl.java",
                "patch": "@@ -1238,19 +1238,37 @@ else if (MetaClassHelper.isGenericSetMethod(method) && genericSetMethod == null)\n            list.add(method);\n        }\n        else {\n-           if (forceOverwrite) {\n-               removeMatchingMethod(list,method);\n-               list.add(method);\n-           } else if (!MetaClassHelper.containsMatchingMethod(list, method)) {\n+           addMethodToList(list,method,forceOverwrite);\n+       }\n+   }\n+   \n+   private void addMethodToList(List list, MetaMethod method, boolean forceOverwrite) {\n+       MetaMethod match = removeMatchingMethod(list,method);\n+       if (forceOverwrite) {\n+           list.add(method);\n+       } else if (match==null) {\n+           list.add(method);\n+       } else {\n+           Class methodC = method.getDeclaringClass();\n+           Class matchC = match.getDeclaringClass();\n+           if (methodC == matchC){\n+               if (method instanceof NewInstanceMetaMethod) {\n+                   list.add(method);\n+               } else {\n+                   list.add(match);\n+               }               \n+           } else if (MetaClassHelper.isAssignableFrom(methodC,matchC)){\n+               list.add(match);\n+           } else {\n                list.add(method);\n            }\n        }\n    }\n-\n+   \n    /**\n     * remove a method of the same matching prototype was found in the list\n     */\n-   private void removeMatchingMethod(List list, MetaMethod method) {\n+   private MetaMethod removeMatchingMethod(List list, MetaMethod method) {\n        for (Iterator iter = list.iterator(); iter.hasNext();) {\n            MetaMethod aMethod = (MetaMethod) iter.next();\n            Class[] params1 = aMethod.getParameterTypes();\n@@ -1265,11 +1283,11 @@ private void removeMatchingMethod(List list, MetaMethod method) {\n                }\n                if (matches) {\n                    iter.remove();\n-                   return;\n+                   return (MetaMethod) aMethod;\n                }\n            }\n        }\n-       return;\n+       return null;\n    }\n \n ",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/groovy/lang/MetaClassImpl.java",
                "sha": "9436948a0c6528236b90ad5f2efa9aa8d6c1b90f",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/groovy/util/CharsetToolkit.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/util/CharsetToolkit.java?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 14,
                "filename": "src/main/groovy/util/CharsetToolkit.java",
                "patch": "@@ -81,22 +81,26 @@\n      */\n     public CharsetToolkit(File file) throws IOException {\n         this.file = file;\n-        InputStream input = new FileInputStream(file);\n-        byte[] bytes = new byte[4096];\n-        int bytesRead = input.read(bytes);\n-        if (bytesRead == -1) {\n-            this.buffer = new byte[0];\n-        }\n-        else if (bytesRead < 4096) {\n-            byte[] bytesToGuess = new byte[bytesRead];\n-            System.arraycopy(bytes, 0, bytesToGuess, 0, bytesRead);\n-            this.buffer = bytesToGuess;\n-        }\n-        else {\n-            this.buffer = bytes;\n-        }\n         this.defaultCharset = getDefaultSystemCharset();\n         this.charset = null;\n+        InputStream input = new FileInputStream(file);\n+        try {\n+            byte[] bytes = new byte[4096];\n+            int bytesRead = input.read(bytes);\n+            if (bytesRead == -1) {\n+                this.buffer = new byte[0];\n+            }\n+            else if (bytesRead < 4096) {\n+                byte[] bytesToGuess = new byte[bytesRead];\n+                System.arraycopy(bytes, 0, bytesToGuess, 0, bytesRead);\n+                this.buffer = bytesToGuess;\n+            }\n+            else {\n+                this.buffer = bytes;\n+            }\n+        } finally {\n+            try {input.close();} catch (IOException e){}\n+        }\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/groovy/util/CharsetToolkit.java",
                "sha": "f01902677747ba95e0fe1caf7435d4a80d2c8054",
                "status": "modified"
            },
            {
                "additions": 115,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/ConversionHandler.java",
                "changes": 115,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/ConversionHandler.java?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/runtime/ConversionHandler.java",
                "patch": "@@ -0,0 +1,115 @@\n+package org.codehaus.groovy.runtime;\r\n+\r\n+import java.lang.reflect.InvocationHandler;\r\n+import java.lang.reflect.InvocationTargetException;\r\n+import java.lang.reflect.Method;\r\n+\r\n+/**\r\n+ * This class is a general adapter to map a call to an Java interface \r\n+ * to a given delegate.\r\n+ * <p>\r\n+ * @author Ben Yu\r\n+ * @author <a href=\"mailto:blackdrag@gmx.org\">Jochen Theodorou</a>\r\n+ */\r\n+public abstract class ConversionHandler implements InvocationHandler {\r\n+    private Object delegate;\r\n+    \r\n+    /**\r\n+     * Creates a ConversionHandler with an deleagte.\r\n+     * @param delegate the delegate\r\n+     * @throws IllegalArgumentException if the given delegate is null\r\n+     */\r\n+    public ConversionHandler(Object delegate) {\r\n+        if (delegate==null) throw new IllegalArgumentException(\"delegate must not be null\");\r\n+        this.delegate = delegate;\r\n+    }\r\n+    \r\n+    /**\r\n+     * gets the delegate.\r\n+     * @return the delegate\r\n+     */\r\n+    public Object getDelegate(){\r\n+        return delegate;\r\n+    }\r\n+    \r\n+    /**\r\n+     * This method is a default implementation for the invoke method\r\n+     * given in Invocationhandler. Any call to an method with an\r\n+     * declaring class that is not Object is redirected to invokeCustom. \r\n+     * Methods like tostring, equals and hashcode are called on the class\r\n+     * itself instead of the delegate. It is better to overwrite the \r\n+     * invokeCustom method where the Object related methods are filtered out.\r\n+     * \r\n+     * @see #invokeCustom(Object, Method, Object[])\r\n+     * @see InvocationHandler#invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])\r\n+     * \r\n+     * @param proxy the proxy\r\n+     * @param method the method\r\n+     * @param args the arguments\r\n+     * @return the result of the invocation by method or delegate\r\n+     * @throws Throwable any exception caused by the delegate or the method\r\n+     */\r\n+    public Object invoke(Object proxy, Method method, Object[] args)\r\n+    throws Throwable {\r\n+        if(!isObjectMethod(method)){\r\n+            return invokeCustom(proxy,method,args);\r\n+        }\r\n+        try {\r\n+            return method.invoke(this, args);\r\n+        } catch (InvocationTargetException ite) {\r\n+            throw ite.getTargetException();\r\n+        }  \r\n+    }\r\n+    \r\n+    /**\r\n+     * This method is called for all Methods not defined on Object. \r\n+     * The delegate should be called here.\r\n+     * \r\n+     * @param proxy the proxy\r\n+     * @param method the method\r\n+     * @param args the arguments\r\n+     * @return the result of the invocation of the delegate\r\n+     * @throws Throwable any exception causes by the delegate\r\n+     * @see #invoke(Object, Method, Object[])\r\n+     * @see InvocationHandler#invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])\r\n+     * \r\n+     */\r\n+    public abstract Object invokeCustom(Object proxy, Method method, Object[] args) throws Throwable;\r\n+    \r\n+    /**\r\n+     * Indicates whether some other object is \"equal to\" this one.\r\n+     * The delegate is used if the class of the parameter and the\r\n+     * current class are equal. In other cases the method will return \r\n+     * false. The exact class is here used, if inheritance is needed,\r\n+     * this method must be overwritten. \r\n+     *        \r\n+     * @see java.lang.Object#equals(java.lang.Object)\r\n+     */\r\n+    public boolean equals(Object obj) {\r\n+        if (obj!=null && obj.getClass()==this.getClass()){\r\n+            return (((ConversionHandler)obj).getDelegate()).equals(obj);\r\n+        } else {\r\n+            return false;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns a hash code value for the delegate. \r\n+     * @see java.lang.Object#hashCode()\r\n+     */\r\n+    public int hashCode() {\r\n+        return delegate.hashCode();\r\n+    }\r\n+    \r\n+    /**\r\n+     * Returns a String version of the delegate.\r\n+     * @see java.lang.Object#toString()\r\n+     */\r\n+    public String toString() {\r\n+        return delegate.toString();\r\n+    }\r\n+    \r\n+    private static boolean isObjectMethod(Method mtd){\r\n+        return mtd.getDeclaringClass().equals(Object.class);\r\n+    }\r\n+}\r",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/ConversionHandler.java",
                "sha": "4112d5a2a2120337080a25294c031a813f0766c6",
                "status": "added"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/ConvertedClosure.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/ConvertedClosure.java?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/runtime/ConvertedClosure.java",
                "patch": "@@ -0,0 +1,28 @@\n+package org.codehaus.groovy.runtime;\r\n+\r\n+import java.lang.reflect.Method;\r\n+import groovy.lang.Closure;\r\n+\r\n+/**\r\n+ * This class is a general adapter to adapt a closure to any Java interface.\r\n+ * <p>\r\n+ * @author Ben Yu\r\n+ * @author <a href=\"mailto:blackdrag@gmx.org\">Jochen Theodorou</a>\r\n+ * Jul 27, 2006 3:50:51 PM\r\n+ */\r\n+public class ConvertedClosure extends ConversionHandler {\r\n+    \r\n+    /**\r\n+     * to create a ConvertedClosure object.\r\n+     * @param closure the closure object.\r\n+     */\r\n+    protected ConvertedClosure(Closure closure) {\r\n+        super(closure);\r\n+    }\r\n+    \r\n+    public Object invokeCustom(Object proxy, Method method, Object[] args)\r\n+    throws Throwable {\r\n+        return ((Closure) getDelegate()).call(args);\r\n+    }\r\n+}\r\n+\r",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/ConvertedClosure.java",
                "sha": "5a4ce583cce9ca46aeac4575891e3e2b4031f8f3",
                "status": "added"
            },
            {
                "additions": 41,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/ConvertedMap.java",
                "changes": 41,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/ConvertedMap.java?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/runtime/ConvertedMap.java",
                "patch": "@@ -0,0 +1,41 @@\n+/*\r\n+ * ConvertedClosure.java created on 12.10.2006\r\n+ *\r\n+ * To change this generated comment go to \r\n+ * Window>Preferences>Java>Code Generation>Code and Comments\r\n+ */\r\n+package org.codehaus.groovy.runtime;\r\n+\r\n+import java.lang.reflect.Method;\r\n+import java.util.Map;\r\n+\r\n+import groovy.lang.Closure;\r\n+\r\n+/**\r\n+ * This class is a general adapter to adapt a map of closures to\r\n+ * any Java interface.\r\n+ * <p>\r\n+ * @author <a href=\"mailto:blackdrag@gmx.org\">Jochen Theodorou</a>\r\n+ */\r\n+public class ConvertedMap extends ConversionHandler {\r\n+        \r\n+    /**\r\n+     * to create a ConvertedMap object.\r\n+     * @param map the map of closres\r\n+     */\r\n+    protected ConvertedMap(Map closures) {\r\n+        super(closures);\r\n+    }\r\n+    \r\n+    public Object invokeCustom(Object proxy, Method method, Object[] args)\r\n+    throws Throwable {\r\n+        Map m = (Map) getDelegate();\r\n+        Closure cl = (Closure) m.get(method.getName());\r\n+        return cl.call(args);\r\n+    }\r\n+    \r\n+    public String toString() {\r\n+        return DefaultGroovyMethods.toString((Map) getDelegate());\r\n+    }\r\n+}\r\n+\r",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/ConvertedMap.java",
                "sha": "90590d67a2ad57796ab70605e6617681a9506e28",
                "status": "added"
            },
            {
                "additions": 43,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 3,
                "filename": "src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java",
                "patch": "@@ -43,6 +43,7 @@\n import java.lang.reflect.Array;\n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n+import java.lang.reflect.Proxy;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.net.MalformedURLException;\n@@ -551,6 +552,26 @@ public static Collection unique(Collection self) {\n         self.addAll(answer);\n         return self;\n     }\n+    \n+    /**\n+     * A convenience method for making a collection unique using a closure as a comparator\n+     * (by Michael Baehr)\n+     * @param self    a Collection\n+     * @param closure a Closure used as a comparator\n+     * @return self   without any duplicates\n+     */\n+    public static Collection unique(Collection self, Closure closure) {\n+        if (self instanceof Set)\n+            return self;\n+        // use a comparator of one item or two\n+        int params = closure.getMaximumNumberOfParameters();\n+        if (params == 1) {\n+            unique(self, new OrderBy(closure));\n+        } else {\n+            unique(self, new ClosureComparator(closure));\n+        }\n+        return self;\n+    }\n \n     /**\n      * Remove all duplicates from a given Collection.\n@@ -2554,6 +2575,26 @@ public static Object asType(Collection col, Class clazz) {\n         }\n         return asType((Object) col, clazz);\n     }\n+    \n+    public static Object asType(Closure cl, Class clazz) {\n+        if (clazz.isInterface() && !(clazz.isInstance(cl))) {\n+            return Proxy.newProxyInstance(\n+                    clazz.getClassLoader(),\n+                    new Class[]{clazz},\n+                    new ConvertedClosure(cl));\n+        }\n+        return asType((Object) cl, clazz);\n+    }\n+    \n+    public static Object asType(Map map, Class clazz) {\n+        if (clazz.isInterface() && !(clazz.isInstance(map))) {\n+            return Proxy.newProxyInstance(\n+                    clazz.getClassLoader(),\n+                    new Class[]{clazz},\n+                    new ConvertedMap(map));\n+        }\n+        return asType((Object) map, clazz);\n+    }\n \n     /**\n      * Reverses the list\n@@ -2618,12 +2659,11 @@ public static List multiply(Collection self, Number factor) {\n     /**\n      * Create a List composed of the intersection of both collections\n      *\n-     * @param left  a List\n+     * @param left  a Collection\n      * @param right a Collection\n      * @return a List as an intersection of both collections\n      */\n-    public static List intersect(List left, Collection right) {\n-\n+    public static List intersect(Collection left, Collection right) {\n         if (left.size() == 0)\n             return new ArrayList();\n ",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java",
                "sha": "851b07c766fba0fb616d76de6a95b6e580a38d22",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/MetaClassHelper.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/MetaClassHelper.java?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/runtime/MetaClassHelper.java",
                "patch": "@@ -681,6 +681,7 @@ public static Object doMethodInvoke(Object object, MetaMethod method, Object[] a\n     }\n     \n     protected static String getClassName(Object object) {\n+        if (object==null) return null;\n         return (object instanceof Class) ? ((Class)object).getName() : object.getClass().getName();\n     }\n     \n@@ -709,7 +710,7 @@ public static Closure getMethodPointer(Object object, String methodName) {\n         throw new IllegalArgumentException(\"Must be a Method or Constructor\");\n     }\n    \n-    protected static boolean isAssignableFrom(Class classToTransformTo, Class classToTransformFrom) {\n+    public static boolean isAssignableFrom(Class classToTransformTo, Class classToTransformFrom) {\n         if (classToTransformFrom==null) return true;\n         classToTransformTo = autoboxType(classToTransformTo);\n         classToTransformFrom = autoboxType(classToTransformFrom);",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/MetaClassHelper.java",
                "sha": "a35611b481f702d21ed91deb8be1d9dc85b64847",
                "status": "modified"
            },
            {
                "additions": 143,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/typehandling/ClassDistance.java",
                "changes": 143,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/typehandling/ClassDistance.java?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/runtime/typehandling/ClassDistance.java",
                "patch": "@@ -0,0 +1,143 @@\n+/*\r\n+ * Class for calculating \"distances\" between classes. Such a distance\r\n+ * is not a real distance to something but should be seen as the order\r\n+ * classes and interfaces are choosen for method selection. The class\r\n+ * will keep a weak cache and recalculate the distances on demand. \r\n+ */\r\n+package org.codehaus.groovy.runtime.typehandling;\r\n+\r\n+import java.io.Serializable;\r\n+import java.math.BigDecimal;\r\n+import java.math.BigInteger;\r\n+import java.util.WeakHashMap;\r\n+\r\n+public class ClassDistance {\r\n+    private static WeakHashMap classDistances;\r\n+    \r\n+    private static class Entry {\r\n+        \r\n+    }\r\n+    \r\n+    private static class LinearEntry  extends Entry{\r\n+        Class[] entries;\r\n+        void concat(Class[] c,LinearEntry le){\r\n+            entries = new Class[c.length+le.entries.length];\r\n+            System.arraycopy(c,0,entries,0,c.length);\r\n+            System.arraycopy(le.entries,0,entries,c.length,le.entries.length);\r\n+        }\r\n+        void concat(Class c,LinearEntry le){\r\n+            entries = new Class[1+le.entries.length];\r\n+            entries[0] = c;\r\n+            System.arraycopy(le.entries,0,entries,1,le.entries.length);\r\n+        }\r\n+    }\r\n+    \r\n+    static {\r\n+        classDistances = new WeakHashMap();\r\n+        initialPopulate();\r\n+    }\r\n+    \r\n+    private static void initialPopulate() {\r\n+        // int, double, byte, float, BigInteger, BigDecimal, long, short\r\n+        // GString, char\r\n+        \r\n+        \r\n+        LinearEntry object = new LinearEntry();\r\n+        object.entries = new Class[]{Object.class};\r\n+        classDistances.put(Object.class,object);\r\n+        \r\n+        LinearEntry number = new LinearEntry();\r\n+        number.concat(new Class[]{Number.class,Serializable.class},object);\r\n+        classDistances.put(Number.class,number);\r\n+\r\n+        LinearEntry compareableNumber = new LinearEntry();\r\n+        compareableNumber.concat(Comparable.class,number);\r\n+        \r\n+        LinearEntry binteger = new LinearEntry();\r\n+        binteger.concat(new Class[]{BigInteger.class, BigDecimal.class}, compareableNumber);\r\n+        classDistances.put(BigInteger.class,object);\r\n+        \r\n+        LinearEntry bdec = new LinearEntry();\r\n+        binteger.concat(new Class[]{BigDecimal.class, BigInteger.class}, compareableNumber);\r\n+        classDistances.put(BigDecimal.class,object);\r\n+        \r\n+        \r\n+        \r\n+        // byte:\r\n+        LinearEntry start = new LinearEntry();\r\n+        start.entries =  new Class[]{\r\n+                byte.class, Byte.class, short.class, Short.class,\r\n+                int.class, Integer.class, long.class, Long.class,\r\n+                BigInteger.class,\r\n+                float.class, Float.class,  double.class, Double.class, \r\n+                BigDecimal.class,\r\n+                Number.class,Object.class};\r\n+        classDistances.put(byte.class,start);\r\n+        \r\n+        // short:\r\n+        start = new LinearEntry();\r\n+        start.entries =  new Class[]{\r\n+                short.class, Short.class,\r\n+                int.class, Integer.class, long.class, Long.class,\r\n+                BigInteger.class,\r\n+                float.class, Float.class,  double.class, Double.class, \r\n+                BigDecimal.class,\r\n+                Number.class,Object.class};\r\n+        classDistances.put(short.class,start);\r\n+        \r\n+        // int:\r\n+        start = new LinearEntry();\r\n+        start.entries =  new Class[]{\r\n+                int.class, Integer.class, long.class, Long.class,\r\n+                BigInteger.class,\r\n+                float.class, Float.class,  double.class, Double.class, \r\n+                BigDecimal.class,\r\n+                Number.class,Object.class};\r\n+        classDistances.put(int.class,start);\r\n+        \r\n+        // long:\r\n+        start = new LinearEntry();\r\n+        start.entries =  new Class[]{\r\n+                long.class, Long.class,\r\n+                BigInteger.class,\r\n+                float.class, Float.class,  double.class, Double.class, \r\n+                BigDecimal.class,\r\n+                Number.class,Object.class};\r\n+        classDistances.put(long.class,start);\r\n+        \r\n+        // Biginteger:\r\n+        start = new LinearEntry();\r\n+        start.entries =  new Class[]{\r\n+                BigInteger.class,\r\n+                float.class, Float.class,  double.class, Double.class, \r\n+                BigDecimal.class,\r\n+                Number.class,Object.class};\r\n+        classDistances.put(long.class,start);\r\n+        \r\n+        // float:\r\n+        start = new LinearEntry();\r\n+        start.entries =  new Class[]{ \r\n+                byte.class, Byte.class, short.class, Short.class,\r\n+                int.class, Integer.class, long.class, Long.class,\r\n+                BigInteger.class,\r\n+                float.class, Float.class,  double.class, Double.class, \r\n+                BigDecimal.class,\r\n+                Number.class,Object.class};\r\n+        classDistances.put(float.class,start);\r\n+        \r\n+        // double:\r\n+        start = new LinearEntry();\r\n+        start.entries =  new Class[]{ \r\n+                double.class,\r\n+                Double.class, BigDecimal.class,\r\n+                Number.class,Object.class};\r\n+        classDistances.put(double.class,start);\r\n+\r\n+    }\r\n+    \r\n+    private synchronized static void popultate(Class clazz) {\r\n+        if (classDistances.get(clazz) != null) return;\r\n+        \r\n+    }\r\n+    \r\n+}\r",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/typehandling/ClassDistance.java",
                "sha": "da630581ac8b441d81a62eb44931ced19b7d3a0b",
                "status": "added"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java",
                "patch": "@@ -33,6 +33,7 @@\n public class DefaultTypeTransformation {\n     \n     protected static final Object[] EMPTY_ARGUMENTS = {};\n+    protected static final BigInteger ONE_NEG = new BigInteger(\"-1\");\n     \n     //  --------------------------------------------------------\n     //                  unboxing methods\n@@ -249,7 +250,14 @@ public static Object castToType(Object object, Class type) {\n             } else if (type == BigDecimal.class) {\n                 return new BigDecimal(n.toString());\n             } else if (type == BigInteger.class) {\n-                return new BigInteger(n.toString());\n+                if (object instanceof Float || object instanceof Double) {\n+                    BigDecimal bd = new BigDecimal(n.doubleValue());\n+                    return bd.toBigInteger();\n+                } else if (object instanceof BigDecimal) {\n+                    return ((BigDecimal) object).toBigInteger();\n+                } else {\n+                    return new BigInteger(n.toString());\n+                }\n             }\n         } else if (type.isPrimitive()) {\n             if (type == byte.class) {",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java",
                "sha": "6de40cc1294d422b05c43ee3cc802c237d241ac1",
                "status": "modified"
            },
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/groovy/BigDecimalOperationTest.groovy",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/BigDecimalOperationTest.groovy?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 0,
                "filename": "src/test/groovy/BigDecimalOperationTest.groovy",
                "patch": "@@ -86,4 +86,42 @@ class BigDecimalOperationTest extends GroovyTestCase {\n     void testBigDecimalCoerce() {\n         assert echoX(9.95, 1.0) == echoX(9.95, 1)\n     }\n+    \n+    void testAssign() {\n+        BigDecimal foo\n+        foo = (byte) 20\n+        assert foo.class == BigDecimal.class\n+        assert foo == 20\n+\n+        foo = (short) 20\n+        assert foo.class == BigDecimal.class\n+        assert foo == 20\n+\n+        foo = (int) 20\n+        assert foo.class == BigDecimal.class\n+        assert foo == 20\n+\n+        foo = (long) 20\n+        assert foo.class == BigDecimal.class\n+        assert foo == 20\n+\n+        foo = (float) 0.5f\n+        assert foo.class == BigDecimal.class\n+        assert foo == 0.5\n+\n+        foo = (double) 0.5d\n+        assert foo.class == BigDecimal.class\n+        assert foo == 0.5\n+        \n+        foo = 10G\n+        assert foo.class == BigDecimal.class\n+        assert foo == 10\n+        \n+        double d = 1000\n+        d *= d\n+        d *= d\n+        d *= d\n+        assert (long)d != d\n+\t\tassert (BigDecimal) d == d\n+    }\n }",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/groovy/BigDecimalOperationTest.groovy",
                "sha": "f448516e1c3fb91d1211560724bc80b01c4088b9",
                "status": "modified"
            },
            {
                "additions": 39,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/groovy/BigIntegerOperationTest.groovy",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/BigIntegerOperationTest.groovy?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 0,
                "filename": "src/test/groovy/BigIntegerOperationTest.groovy",
                "patch": "@@ -0,0 +1,39 @@\n+class BigIntegerOperationTest extends GroovyTestCase {\r\n+    void testAssign() {\r\n+        BigInteger foo\r\n+        foo = (byte) 20\r\n+        assert foo.class == BigInteger\r\n+        assert foo == 20\r\n+\r\n+        foo = (short) 20\r\n+        assert foo.class == BigInteger\r\n+        assert foo == 20\r\n+\r\n+        foo = (int) 20\r\n+        assert foo.class == BigInteger\r\n+        assert foo == 20\r\n+\r\n+        foo = (long) 20\r\n+        assert foo.class == BigInteger\r\n+        assert foo == 20\r\n+\r\n+        foo = (float) 0.5f\r\n+        assert foo.class == BigInteger\r\n+        assert foo == 0\r\n+\r\n+        foo = (double) 0.5d\r\n+        assert foo.class == BigInteger\r\n+        assert foo == 0\r\n+        \r\n+        foo = 10.5G\r\n+        assert foo.class == BigInteger\r\n+        assert foo == 10\r\n+        \r\n+        double d = 1000\r\n+        d *= d\r\n+        d *= d\r\n+        d *= d\r\n+        assert (long)d != d\r\n+\t\tassert (BigInteger) d == d\r\n+    }\r\n+}\r",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/groovy/BigIntegerOperationTest.groovy",
                "sha": "0205213a5fdee1028a9716f7d46d37d46b1bdb12",
                "status": "added"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/groovy/GroovyMethodsTest.groovy",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/GroovyMethodsTest.groovy?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 0,
                "filename": "src/test/groovy/GroovyMethodsTest.groovy",
                "patch": "@@ -306,6 +306,31 @@ class GroovyMethodsTest extends GroovyTestCase {\n         assert [3.5, 4.6] == result[BigDecimal]\n         assert 3 == result.size()\n     }\n+    \n+    def leftCol  = [\"2\"]\n+    def rightCol = [\"1\",\"2\",\"3\"]\n+\n+    void testList() {\n+      def lst  = [] as LinkedList\n+      doIt(lst)\n+    }\n+\n+    void testSet() {\n+      def set  = [] as HashSet \n+      doIt(set)\n+    }\n+                    \n+    void testVector() {\n+      def vctr  = [] as Vector\n+      doIt(vctr)\n+    }\n+\n+    void doIt(col) {\n+      col.clear();\n+      col.addAll(leftCol);\n+      // not really concerned about  correctness, rather that the method can be called, however..\n+      assert col.intersect(rightCol) == [\"2\"]\n+    }\n }\n \n class WackyHashCode {",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/groovy/GroovyMethodsTest.groovy",
                "sha": "5558c2c9d6cd2e2c552e6106d1f8b5ff139a7dd9",
                "status": "modified"
            },
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/groovy/UniqueTest.groovy",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/UniqueTest.groovy?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 0,
                "filename": "src/test/groovy/UniqueTest.groovy",
                "patch": "@@ -0,0 +1,31 @@\n+/** \r\n+ * @author Michael Baehr\r\n+ */\r\n+class UniqueTest extends GroovyTestCase {\r\n+    \r\n+\tvoid testUnique() {\r\n+\t\tdef list = [-1, 0, 1, 1, 0, -1]\r\n+    assert list.unique() == [-1, 0, 1]\r\n+\t}\r\n+\t\r\n+\tvoid testUniqueWithComparator() {\r\n+\t\tdef list = [-1, 0, 1, 1, 0, -1]\r\n+\t\tdef comparator = new ClosureComparator() {a,b -> Math.abs(a) <=> Math.abs(b)} \r\n+    assert list.unique(comparator) == [-1, 0]\r\n+\t}    \r\n+\t\r\n+\t// new functionality - see GROOVY-1236\r\n+\tvoid testUniqueWithTwoParameterClosure() {\r\n+\t\tdef list = [-1, 0, 1, 1, 0, -1]\r\n+\t\tdef closure = {a,b -> Math.abs(a) <=> Math.abs(b)} \r\n+    assert list.unique(closure) == [-1, 0]\r\n+\t}   \r\n+\r\n+\t// new functionality - see GROOVY-1236\t\r\n+\tvoid testUniqueWithOneParameterClosure() {\r\n+\t\tdef list = [-1, 0, 1, 1, 0, -1]\r\n+\t\tdef closure = {a -> Math.abs(a)} \r\n+    assert list.unique(closure) == [-1, 0]\r\n+\t}   \r\n+\t\t\r\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/groovy/UniqueTest.groovy",
                "sha": "ed7e0e4f8c3da8848421170871e39a8607473a8d",
                "status": "added"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/org/codehaus/groovy/runtime/InterfaceConversionTest.groovy",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/runtime/InterfaceConversionTest.groovy?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/runtime/InterfaceConversionTest.groovy",
                "patch": "@@ -0,0 +1,26 @@\n+class InterfaceConversionTest extends GroovyTestCase {\r\n+ \r\n+  void testClosureConversion(){\r\n+\tdef c1 = {Object[] args -> args?.length}\r\n+\tdef c2 = c1 as InterfaceConversionTestFoo\r\n+\tassert !(c1 instanceof InterfaceConversionTestFoo)\r\n+\tassert c2 instanceof InterfaceConversionTestFoo\r\n+\tassert c2.a() == null\r\n+\tassert c2.b(null) == 1\r\n+  }\r\n+  \r\n+  void testMapConversion() {  \r\n+\tdef m1 = [a:{1}, b:{2}]\r\n+\tdef m2 = m1 as InterfaceConversionTestFoo\r\n+\t\r\n+\tassert !(m1 instanceof InterfaceConversionTestFoo)\r\n+\tassert m2 instanceof InterfaceConversionTestFoo\r\n+\tassert m2.a() == 1\r\n+\tassert m2.b(null) == 2\r\n+  }\r\n+}\r\n+ \r\n+interface InterfaceConversionTestFoo {\r\n+    def a();\r\n+    def b(Integer i);\r\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/org/codehaus/groovy/runtime/InterfaceConversionTest.groovy",
                "sha": "fb803d1661017ea2b3d5323f2fbd8f1acd0d17ee",
                "status": "added"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/org/codehaus/groovy/runtime/MetaClassHelperTest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/runtime/MetaClassHelperTest.java?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/runtime/MetaClassHelperTest.java",
                "patch": "@@ -0,0 +1,10 @@\n+package org.codehaus.groovy.runtime;\r\n+\r\n+import junit.framework.TestCase;\r\n+\r\n+public class MetaClassHelperTest extends TestCase {\r\n+    public void testGetClassName() {\r\n+        // GROOVY-1262\r\n+        MetaClassHelper.getClassName(null); \r\n+    }\r\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/org/codehaus/groovy/runtime/MetaClassHelperTest.java",
                "sha": "202116f4efba90651f7ca37546b8d20821d84966",
                "status": "added"
            }
        ],
        "message": "patches for Groovy-748 (ensure files are closed), Groovy-1125 (intersect on Collection), Groovy-1141 (conversion from int to BigInteger), Groovy-1236 (unique on Collection), Groovy-1262 (NPE in MetaClassHelper), Groovy-1439 (use closure as for interface implementation), Groovy-1529 (use map of closures for interface implementation)\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@4112 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/5abd4ecd0cd98ce5c6b9278ba021f42f07e21788",
        "patched_files": [
            "ClassDistance.java",
            "ConvertedMap.java",
            "ConvertedClosure.java",
            "MetaClassImpl.java",
            "MetaClassHelper.java",
            "DefaultTypeTransformation.java",
            "DefaultGroovyMethods.java",
            "ConversionHandler.java",
            "CharsetToolkit.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "MetaClassHelperTest.java",
            "BigIntegerOperationTest.java",
            "BigDecimalOperationTest.java",
            "DefaultGroovyMethodsTest.java",
            "GroovyMethodsTest.java",
            "InterfaceConversionTest.java",
            "UniqueTest.java"
        ]
    },
    "groovy_9079fb4": {
        "bug_id": "groovy_9079fb4",
        "commit": "https://github.com/apache/groovy/commit/9079fb4bcac30630c0a8a130b5c450a5b346fbab",
        "file": [
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/groovy/blob/9079fb4bcac30630c0a8a130b5c450a5b346fbab/src/main/org/codehaus/groovy/util/ListHashMap.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/util/ListHashMap.java?ref=9079fb4bcac30630c0a8a130b5c450a5b346fbab",
                "deletions": 6,
                "filename": "src/main/org/codehaus/groovy/util/ListHashMap.java",
                "patch": "@@ -25,7 +25,16 @@\n import java.util.Set;\n \n /**\n- * This represents a \n+ * This class represents a {@Map} that is optimized for a small number of\n+ * entries.  For a number of entries up to {@code listSize} the entries\n+ * are stored in arrays.  After {@code listSize} entries are exceeded\n+ * storage switches internally to a {@link Map} and converts back\n+ * to being array based when its size is less than or equal to {@code listSize}.\n+ *\n+ * Null keys or values are not supported.\n+ *\n+ * This class is not thread safe.\n+ *\n  * @author <a href=\"mailto:blackdrag@gmx.org\">Jochen \"blackdrag\" Theodorou</a>\n  */\n public class ListHashMap<K,V> implements Map<K,V> {\n@@ -47,15 +56,22 @@ public ListHashMap(int listSize){\n \n     public void clear() {\n         innerMap = null;\n+        clearArrays();\n+        size = 0;\n+    }\n+\n+    private void clearArrays() {\n         for (int i=0; i<maxListFill; i++) {\n             listValues[i] = null;\n             listKeys[i] = null;\n         }\n-        size = 0;\n     }\n \n     public boolean containsKey(Object key) {\n-        if (size<maxListFill) {\n+        if (size == 0) {\n+            return false;\n+        }\n+        if (innerMap == null) {\n             for (int i=0; i<size; i++) {\n                 if (listKeys[i].equals(key)) return true;\n             }\n@@ -66,7 +82,10 @@ public boolean containsKey(Object key) {\n     }\n \n     public boolean containsValue(Object value) {\n-        if (size<maxListFill) {\n+        if (size == 0) {\n+            return false;\n+        }\n+        if (innerMap == null) {\n             for (int i=0; i<size; i++) {\n                 if (listValues[i].equals(value)) return true;\n             }\n@@ -128,6 +147,8 @@ public V put(K key, V value) {\n                 return null;\n             } else {\n                 innerMap = makeMap();\n+                // Switched over to Map so need to clear array references\n+                clearArrays();\n             }\n         }\n         V val = (V) innerMap.put(key, value);\n@@ -147,8 +168,13 @@ public V remove(Object key) {\n                 if (listKeys[i].equals(key)) {\n                     V old = (V) listValues[i];\n                     size--;\n-                    listValues[i] = listValues[size];\n-                    listKeys[i] = listKeys[size];\n+                    // If last element is not being removed shift the last element into this slot\n+                    if (i < size) {\n+                        listValues[i] = listValues[size];\n+                        listKeys[i] = listKeys[size];\n+                    }\n+                    listValues[size] = null;\n+                    listKeys[size] = null;\n                     return old;\n                 }\n             }",
                "raw_url": "https://github.com/apache/groovy/raw/9079fb4bcac30630c0a8a130b5c450a5b346fbab/src/main/org/codehaus/groovy/util/ListHashMap.java",
                "sha": "b8eddc2ec1d3d7f09e17cf0e2bb0a229a1639b96",
                "status": "modified"
            },
            {
                "additions": 64,
                "blob_url": "https://github.com/apache/groovy/blob/9079fb4bcac30630c0a8a130b5c450a5b346fbab/src/test/org/codehaus/groovy/util/ListHashMapTest.groovy",
                "changes": 64,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/util/ListHashMapTest.groovy?ref=9079fb4bcac30630c0a8a130b5c450a5b346fbab",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/util/ListHashMapTest.groovy",
                "patch": "@@ -122,4 +122,68 @@ class ListHashMapTest extends GroovyTestCase {\n         assert list.isEmpty()\n         assert list.@innerMap == null\n     }\n+\n+    public void testRemoveFirstShiftsKeyValuesAndClearsArraySlot() {\n+        list.putAll([a: '1', b: '2'])\n+        assert list.size() == 2\n+        assert list.@innerMap == null\n+        list.remove('a')\n+        assert list.size() == 1\n+        assert list.@listKeys[0] == 'b'\n+        assert list.@listValues[0] == '2'\n+        assert list.@listKeys[1] == null\n+        assert list.@listValues[1] == null\n+\n+        list.put('c', '3')\n+        assert list.size() == 2\n+        assert list.@listKeys[0] == 'b'\n+        assert list.@listValues[0] == '2'\n+        assert list.@listKeys[1] == 'c'\n+        assert list.@listValues[1] == '3'\n+    }\n+\n+    public void testRemoveLastClearsLastArraySlot() {\n+        list.putAll([a: '1', b: '2'])\n+        assert list.size() == 2\n+        assert list.@innerMap == null\n+        list.remove('b')\n+        assert list.size() == 1\n+        assert list.@listKeys[0] == 'a'\n+        assert list.@listValues[0] == '1'\n+        assert list.@listKeys[1] == null\n+        assert list.@listValues[1] == null\n+\n+        list.put('c', '3')\n+        assert list.size() == 2\n+        assert list.@listKeys[0] == 'a'\n+        assert list.@listValues[0] == '1'\n+        assert list.@listKeys[1] == 'c'\n+        assert list.@listValues[1] == '3'\n+    }\n+\n+    public void testSwitchToInnerMapClearsArrays() {\n+        list.putAll([a: '1', b: '2'])\n+        assert list.size() == 2\n+        assert list.@innerMap == null\n+        assert list.@listKeys[0] == 'a'\n+        assert list.@listKeys[1] == 'b'\n+\n+        list.put('c', '3')\n+        assert list.size() == 3\n+        assert list.@innerMap != null\n+        assert list.@listKeys[0] == null\n+        assert list.@listKeys[1] == null\n+        assert list.@listValues[0] == null\n+        assert list.@listValues[1] == null\n+    }\n+\n+    public void testContainsKey() {\n+        list.putAll([a: '1', b: '2'])\n+        assert list.containsKey('b')\n+    }\n+\n+    public void testContainsValue() {\n+        list.putAll([a: '1', b: '2'])\n+        assert list.containsValue('2')\n+    }\n }",
                "raw_url": "https://github.com/apache/groovy/raw/9079fb4bcac30630c0a8a130b5c450a5b346fbab/src/test/org/codehaus/groovy/util/ListHashMapTest.groovy",
                "sha": "248078f87cf0e95375687cdea46a6ae2bbc83bf6",
                "status": "modified"
            }
        ],
        "message": "ListHashMap fixes (closes #250)\n\nWhen removing entries and/or switching to Map the arrays should be cleared.\n\nMethods containsKey/containsValue throw NPE if size == maxListSize.",
        "parent": "https://github.com/apache/groovy/commit/7ced8a2cacbe0c2cf824eceac431d8a2f02de8f4",
        "patched_files": [
            "ListHashMap.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "ListHashMapTest.java"
        ]
    },
    "groovy_939c56e": {
        "bug_id": "groovy_939c56e",
        "commit": "https://github.com/apache/groovy/commit/939c56e25e88774d5996d57eeca8bf17d2fed40f",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/groovy/blob/939c56e25e88774d5996d57eeca8bf17d2fed40f/src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/control/CompilationUnit.java?ref=939c56e25e88774d5996d57eeca8bf17d2fed40f",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "patch": "@@ -1038,7 +1038,9 @@ public void applyToPrimaryClassNodes(PrimaryClassNodeOperation body) throws Comp\n             } catch (CompilationFailedException e) {\n                 // fall through, getErrorReporter().failIfErrors() will trigger\n             } catch (NullPointerException npe) {\n-                throw npe;\n+                GroovyBugError gbe = new GroovyBugError(\"unexpected NullpointerException\", npe);\n+                changeBugText(gbe, context);\n+                throw gbe;\n             } catch (GroovyBugError e) {\n                 changeBugText(e, context);\n                 throw e;",
                "raw_url": "https://github.com/apache/groovy/raw/939c56e25e88774d5996d57eeca8bf17d2fed40f/src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "sha": "e554a716ca35ce63a618ec58064a54d42d793900",
                "status": "modified"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/groovy/blob/939c56e25e88774d5996d57eeca8bf17d2fed40f/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java?ref=939c56e25e88774d5996d57eeca8bf17d2fed40f",
                "deletions": 6,
                "filename": "src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "patch": "@@ -3435,7 +3435,7 @@ protected ClassNode inferReturnTypeGenerics(final ClassNode receiver, final Meth\n \n         return resolveGenericsWithContext(resolvedPlaceholders, returnType);\n     }\n-    \n+\n     private ClassNode resolveGenericsWithContext(Map<String, GenericsType> resolvedPlaceholders, ClassNode currentType) {\n         Map<String, GenericsType> placeholdersFromContext = getGenericsParameterMapOfThis(typeCheckingContext.getEnclosingMethod());\n         applyContextGenerics(resolvedPlaceholders,placeholdersFromContext);\n@@ -3521,7 +3521,12 @@ private static ClassNode getDeclaringClass(MethodNode method, Expression argumen\n     private Map<String, GenericsType> resolvePlaceHoldersFromDeclartion(ClassNode receiver, ClassNode declaration, MethodNode method, boolean isStaticTarget) {\n         Map<String, GenericsType> resolvedPlaceholders;\n         if (isStaticTarget && CLASS_Type.equals(receiver) && receiver.isUsingGenerics() && receiver.getGenericsTypes().length>0) {\n-            resolvedPlaceholders = new HashMap<String, GenericsType>();\n+            resolvedPlaceholders = new HashMap<String, GenericsType>() {\n+                public GenericsType put(String key, GenericsType value) {\n+                    if (key==null || value==null) throw new NullPointerException(\"Key and value must not be null.\");\n+                    return super.put(key,value);\n+                }\n+            };\n             GenericsUtils.extractPlaceholders(receiver.getGenericsTypes()[0].getType(), resolvedPlaceholders);\n         } else {\n             resolvedPlaceholders = extractPlaceHolders(method, receiver, declaration);\n@@ -3537,7 +3542,12 @@ private static void addMethodLevelDeclaredGenerics(MethodNode method, Map<String\n     \n     private static Map<String, GenericsType> extractPlaceHolders(MethodNode method, ClassNode receiver, ClassNode declaringClass) {\n         if (declaringClass.equals(OBJECT_TYPE)) {\n-            Map<String, GenericsType> resolvedPlaceholders = new HashMap<String, GenericsType>();\n+            Map<String, GenericsType> resolvedPlaceholders = new HashMap<String, GenericsType>() {\n+                public GenericsType put(String key, GenericsType value) {\n+                    if (key==null || value==null) throw new NullPointerException(\"Key and value must not be null.\");\n+                    return super.put(key,value);\n+                }\n+            };\n             if (method!=null) addMethodLevelDeclaredGenerics(method, resolvedPlaceholders);\n             return resolvedPlaceholders;\n         }\n@@ -3546,7 +3556,12 @@ private static void addMethodLevelDeclaredGenerics(MethodNode method, Map<String\n         ClassNode current = receiver;\n         while (true) {\n             //extract the place holders\n-            Map<String, GenericsType> currentPlaceHolders = new HashMap<String, GenericsType>();\n+            Map<String, GenericsType> currentPlaceHolders = new HashMap<String, GenericsType>() {\n+                public GenericsType put(String key, GenericsType value) {\n+                    if (key==null || value==null) throw new NullPointerException(\"Key and value must not be null.\");\n+                    return super.put(key,value);\n+                }\n+            };\n             GenericsUtils.extractPlaceholders(current, currentPlaceHolders);\n \n             if (method!=null && declaringClass.equals(current)) {\n@@ -3611,6 +3626,11 @@ private static void addMethodLevelDeclaredGenerics(MethodNode method, Map<String\n      * for which placeholders are resolved recursively.\n      */\n     protected static GenericsType fullyResolve(GenericsType gt, Map<String, GenericsType> placeholders) {\n+        if (gt==null) throw new GroovyBugError(\"gt must not be null.\");\n+        if (placeholders==null) throw new GroovyBugError(\"placeholders map must not be null\");\n+        GenericsType fromMap = placeholders.get(gt.getName());\n+        if (fromMap==null) throw new GroovyBugError(\"placeholders entry has null value, key was: \"+gt.getName()+\" and map entry exists: \"+placeholders.containsKey(gt.getName()));\n+\n         if (gt.isPlaceholder() && placeholders.containsKey(gt.getName()) && !placeholders.get(gt.getName()).isPlaceholder()) {\n             gt = placeholders.get(gt.getName());\n         }\n@@ -3731,7 +3751,12 @@ protected void typeCheckMethodsWithGenerics(ClassNode receiver, ClassNode[] argu\n                 ClassNode firstArgType = GenericsUtils.parameterizeType(receiver, dgmMethodFirstArgType);\n \n \n-                Map<String, GenericsType> placeholders = new HashMap<String, GenericsType>();\n+                Map<String, GenericsType> placeholders = new HashMap<String, GenericsType>() {\n+                    public GenericsType put(String key, GenericsType value) {\n+                        if (key==null || value==null) throw new NullPointerException(\"Key and value must not be null.\");\n+                        return super.put(key,value);\n+                    }\n+                };\n                 GenericsType[] gts = dgmMethodFirstArgType.getGenericsTypes();\n                 for (int i = 0; gts != null && i < gts.length; i++) {\n                     GenericsType gt = gts[i];\n@@ -4051,7 +4076,12 @@ private void applyContextGenerics(Map<String, GenericsType> resolvedPlaceholders\n \n     private static Map<String, GenericsType> mergeGenerics(Map<String, GenericsType> current, GenericsType[] newGenerics) {\n         if (newGenerics == null || newGenerics.length == 0) return null;\n-        if (current==null) current = new HashMap<String, GenericsType>();\n+        if (current==null) current = new HashMap<String, GenericsType>() {\n+            public GenericsType put(String key, GenericsType value) {\n+                if (key==null || value==null) throw new NullPointerException(\"Key and value must not be null.\");\n+                return super.put(key,value);\n+            }\n+        };\n         for (int i = 0; i < newGenerics.length; i++) {\n             GenericsType gt = newGenerics[i];\n             if (!gt.isPlaceholder()) continue;",
                "raw_url": "https://github.com/apache/groovy/raw/939c56e25e88774d5996d57eeca8bf17d2fed40f/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "sha": "ae26116a925e023c5f59c5332c65203f04c0e33e",
                "status": "modified"
            }
        ],
        "message": "Some modifications to be able to diagnose NPEs better",
        "parent": "https://github.com/apache/groovy/commit/8ee6e5efa8887ce460ff4aa60a5691361a38bd19",
        "patched_files": [
            "CompilationUnit.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "CompilationUnitTest.java"
        ]
    },
    "groovy_97de2e0": {
        "bug_id": "groovy_97de2e0",
        "commit": "https://github.com/apache/groovy/commit/97de2e0628da4085a4bf1ab856a96b1d895a2533",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/97de2e0628da4085a4bf1ab856a96b1d895a2533/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java?ref=97de2e0628da4085a4bf1ab856a96b1d895a2533",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "patch": "@@ -4381,7 +4381,7 @@ private static ClassNode convertClosureTypeToSAMType(final Expression expression\n            }\n \n            // now repeat the same for each parameter given in the ClosureExpression\n-           if (expression instanceof ClosureExpression) {\n+           if (expression instanceof ClosureExpression && sam.getParameters().length > 0) {\n                List<ClassNode[]> genericsToConnect = new LinkedList<ClassNode[]>();\n                Parameter[] closureParams = ((ClosureExpression) expression).getParameters();\n                ClassNode[] closureParamTypes = extractTypesFromParameters(closureParams);",
                "raw_url": "https://github.com/apache/groovy/raw/97de2e0628da4085a4bf1ab856a96b1d895a2533/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "sha": "4a130bd664c4482a1b4567bb9d0c3ba6c8ed66d2",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/groovy/blob/97de2e0628da4085a4bf1ab856a96b1d895a2533/src/test/groovy/transform/stc/GenericsSTCTest.groovy",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/transform/stc/GenericsSTCTest.groovy?ref=97de2e0628da4085a4bf1ab856a96b1d895a2533",
                "deletions": 1,
                "filename": "src/test/groovy/transform/stc/GenericsSTCTest.groovy",
                "patch": "@@ -1797,7 +1797,20 @@ assert result == 'ok'\n                 }\n             }\n             assert new LongWrapper<Long>(42L).value == 42L\n-'''\n+        '''\n+    }\n+\n+    //GROOVY-7804\n+    void testParameterlessClosureToGenericSAMTypeArgumentCoercion() {\n+        assertScript '''\n+            interface Supplier<T> {\n+                public <T> T get()\n+            }\n+\n+            static <T> T doGet(Supplier<T> supplier) { supplier.get() }\n+\n+            assert doGet { -> 'foo' } == 'foo'\n+        '''\n     }\n \n     static class MyList extends LinkedList<String> {}",
                "raw_url": "https://github.com/apache/groovy/raw/97de2e0628da4085a4bf1ab856a96b1d895a2533/src/test/groovy/transform/stc/GenericsSTCTest.groovy",
                "sha": "d5220adb14d76049ced2a9650e464aa777a2c937",
                "status": "modified"
            }
        ],
        "message": "GROOVY-7804: Coercion of parameterless closure to generic SAM type throws NPE during STC (Closes #306)",
        "parent": "https://github.com/apache/groovy/commit/a8a73ee281c18e1ef69345997d23bff7f7c4f86e",
        "patched_files": [
            "StaticTypeCheckingVisitor.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "GenericsSTCTest.java"
        ]
    },
    "groovy_9b1497a": {
        "bug_id": "groovy_9b1497a",
        "commit": "https://github.com/apache/groovy/commit/9b1497ae86b951dae07e4b6285dc7814a5848494",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/groovy/blob/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/groovy/lang/MissingClassException.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/MissingClassException.java?ref=9b1497ae86b951dae07e4b6285dc7814a5848494",
                "deletions": 0,
                "filename": "src/main/groovy/lang/MissingClassException.java",
                "patch": "@@ -46,6 +46,7 @@\n package groovy.lang;\n \n import org.codehaus.groovy.ast.ASTNode;\n+import org.codehaus.groovy.ast.Type;\n \n /**\n  * An exception occurred if a dynamic method dispatch fails with an unknown class.\n@@ -64,6 +65,10 @@ public MissingClassException(String type, ASTNode node, String message) {\n         super(\"No such class: \" + type + \" \" + message, node);\n         this.type = type;\n     }\n+    \n+    public MissingClassException(Type type, String message){\n+        super(\"No such class: \" + type.getName() + \" \" + message);\n+    }\n \n     /**\n      * ",
                "raw_url": "https://github.com/apache/groovy/raw/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/groovy/lang/MissingClassException.java",
                "sha": "f9d0d661844674aa653cc92a2221ab21161d65bd",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/groovy/blob/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/org/codehaus/groovy/ast/ClassNode.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/ast/ClassNode.java?ref=9b1497ae86b951dae07e4b6285dc7814a5848494",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/ast/ClassNode.java",
                "patch": "@@ -630,8 +630,11 @@ protected Parameter createParameter(Class parameterType, int idx) {\n         return new Parameter(Type.makeType(parameterType), \"param\" + idx);\n     }\n \n-\n     public Type resolveClassName(Type type) {\n+        return resolveClassName(type,null);\n+    }\n+    \n+    public Type resolveClassName(Type type, String message) {\n         Type answer = null;\n         if (type != null) {\n             if (getType().equals(type) || getNameWithoutPackage().equals(type.getName())) {\n@@ -650,6 +653,7 @@ public Type resolveClassName(Type type) {\n                 answer = tryResolveClassAndInnerClass(Type.makeType(replacedPointType));\n             }\n         }\n+        if (answer==null && message!=null) throw new MissingClassException(type,message);\n         return answer;\n     }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/org/codehaus/groovy/ast/ClassNode.java",
                "sha": "715e71688e151348b5c3282c110f95425f28343c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java?ref=9b1497ae86b951dae07e4b6285dc7814a5848494",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java",
                "patch": "@@ -1699,7 +1699,7 @@ public void visitConstructorCallExpression(ConstructorCallExpression call) {\n \n         // lets check that the type exists\n         Type type = call.getType();\n-        type = classNode.resolveClassName(type);\n+        type = classNode.resolveClassName(type, \"\");\n         call.setType(type);\n         \n         visitClassExpression(new ClassExpression(type));",
                "raw_url": "https://github.com/apache/groovy/raw/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java",
                "sha": "e4b8a29982286e1bd6f282240e3b66d35f8e62f5",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/control/CompilationUnit.java?ref=9b1497ae86b951dae07e4b6285dc7814a5848494",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "patch": "@@ -54,7 +54,6 @@\n package org.codehaus.groovy.control;\n \n import java.io.File;\n-import java.io.FileNotFoundException;\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n@@ -853,6 +852,8 @@ public void applyToPrimaryClassNodes(LoopBodyForPrimaryClassNodeOperations body)\n                 }\n             } catch (CompilationFailedException e) {\n                 // fall thorugh, getErrorREporter().failIfErrors() will triger\n+            } catch (NullPointerException npe){\n+                throw npe;\n             } catch (Exception e) {\n                 failures = true;\n //                String msg = e.getMessage();",
                "raw_url": "https://github.com/apache/groovy/raw/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "sha": "280b0365f57341a9e9739cb6726f46938f11a4d9",
                "status": "modified"
            }
        ],
        "message": "avoids npe for missing classes and improves error reporting\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@2868 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/c0e40e8e1fe8751652b9e9d5cfbaecd1a7030bce",
        "patched_files": [
            "ClassNode.java",
            "CompilationUnit.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "CompilationUnitTest.java",
            "ClassNodeTest.java"
        ]
    },
    "groovy_9edf433": {
        "bug_id": "groovy_9edf433",
        "commit": "https://github.com/apache/groovy/commit/9edf43319e66a805c1ad1c2ce0cb6e23f1fa3ed6",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/9edf43319e66a805c1ad1c2ce0cb6e23f1fa3ed6/src/main/groovy/util/GroovyScriptEngine.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/util/GroovyScriptEngine.java?ref=9edf43319e66a805c1ad1c2ce0cb6e23f1fa3ed6",
                "deletions": 0,
                "filename": "src/main/groovy/util/GroovyScriptEngine.java",
                "patch": "@@ -296,6 +296,8 @@ public URLConnection getResourceConnection(String resourceName) throws ResourceE\n             }\n         }\n \n+        if(se == null) se = new ResourceException(\"No resource for \" + resourceName + \" was found\");\n+        \n         // If we didn't find anything, report on all the exceptions that occurred.\n         if (groovyScriptConn == null) throw se;\n         return groovyScriptConn;",
                "raw_url": "https://github.com/apache/groovy/raw/9edf43319e66a805c1ad1c2ce0cb6e23f1fa3ed6/src/main/groovy/util/GroovyScriptEngine.java",
                "sha": "04c95459e95f3afc2b275c8513ab09b78c3053ef",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/groovy/blob/9edf43319e66a805c1ad1c2ce0cb6e23f1fa3ed6/src/test/groovy/util/GroovyScriptEngineTest.groovy",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/util/GroovyScriptEngineTest.groovy?ref=9edf43319e66a805c1ad1c2ce0cb6e23f1fa3ed6",
                "deletions": 0,
                "filename": "src/test/groovy/util/GroovyScriptEngineTest.groovy",
                "patch": "@@ -139,6 +139,15 @@ class GroovyScriptEngineTest extends GroovyTestCase {\n \n         assert aScript instanceof CustomBaseClass\n     }\n+    \n+    //GROOVY-3893\n+    void testGSEWithNoScriptRoots() {\n+        shouldFail ResourceException, {\n+            String[] emptyScriptRoots = []\n+            GroovyScriptEngine gse = new GroovyScriptEngine(emptyScriptRoots)\n+            gse.run(\"unknownScriptName\", \"\")\n+        }\n+    }\n \n \t/*\n \t * The script passes the className of the class it's supposed to",
                "raw_url": "https://github.com/apache/groovy/raw/9edf43319e66a805c1ad1c2ce0cb6e23f1fa3ed6/src/test/groovy/util/GroovyScriptEngineTest.groovy",
                "sha": "0e69d61addb84ccdb9c0b24528c248eeb10156fc",
                "status": "modified"
            }
        ],
        "message": "GROOVY-3893\nFixed an NPE in GSE.\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@18363 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/8958520d44ed3456cf795666ba57fe0e39af026b",
        "patched_files": [
            "GroovyScriptEngine.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "GroovyScriptEngineTest.java"
        ]
    },
    "groovy_9fa6742": {
        "bug_id": "groovy_9fa6742",
        "commit": "https://github.com/apache/groovy/commit/9fa67428ae6ab0c38c1c2b3503ad754029bebbf1",
        "file": [
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/groovy/blob/9fa67428ae6ab0c38c1c2b3503ad754029bebbf1/src/main/groovy/xml/StreamingMarkupBuilder.groovy",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/xml/StreamingMarkupBuilder.groovy?ref=9fa67428ae6ab0c38c1c2b3503ad754029bebbf1",
                "deletions": 13,
                "filename": "src/main/groovy/xml/StreamingMarkupBuilder.groovy",
                "patch": "@@ -20,6 +20,8 @@ import groovy.xml.streamingmarkupsupport.StreamingMarkupWriter\n import groovy.xml.streamingmarkupsupport.BaseMarkupBuilder\n \n class StreamingMarkupBuilder extends AbstractStreamingBuilder {\n+    def omitNullAttributes = false\n+    def omitEmptyAttributes = false\n     def pendingStack = []\n     def commentClosure = {doc, pendingNamespaces, namespaces, namespaceSpecificTags, prefix, attrs, body, out ->\n         out.unescaped() << \"<!--\"\n@@ -78,21 +80,26 @@ class StreamingMarkupBuilder extends AbstractStreamingBuilder {\n         out = out.unescaped() << \"<${tag}\"\n \n         attrs.each {key, value ->\n-            if (key.contains('$')) {\n-                def parts = key.tokenize('$')\n-\n-                if (namespaces.containsKey(parts[0]) || pendingNamespaces.containsKey(parts[0])) {\n-                    key = parts[0] + \":\" + parts[1]\n-                } else {\n-                    throw new GroovyRuntimeException(\"bad attribute namespace tag: ${parts[0]} in ${key}\")\n+            boolean skipNull = value == null && omitNullAttributes;\n+            boolean skipEmpty = value != null && omitEmptyAttributes &&\n+                    value.toString().length() == 0;\n+            if (!skipNull && !skipEmpty) {\n+                if (key.contains('$')) {\n+                    def parts = key.tokenize('$')\n+\n+                    if (namespaces.containsKey(parts[0]) || pendingNamespaces.containsKey(parts[0])) {\n+                        key = parts[0] + \":\" + parts[1]\n+                    } else {\n+                        throw new GroovyRuntimeException(\"bad attribute namespace tag: ${parts[0]} in ${key}\")\n+                    }\n                 }\n-            }\n \n-            out << \" ${key}='\"\n-            out.writingAttribute = true\n-            \"${value}\".build(doc)\n-            out.writingAttribute = false\n-            out << \"'\"\n+                out << \" ${key}='\"\n+                out.writingAttribute = true\n+                \"${value}\".build(doc)\n+                out.writingAttribute = false\n+                out << \"'\"\n+            }\n         }\n \n         def hiddenNamespaces = [:]",
                "raw_url": "https://github.com/apache/groovy/raw/9fa67428ae6ab0c38c1c2b3503ad754029bebbf1/src/main/groovy/xml/StreamingMarkupBuilder.groovy",
                "sha": "a7b0d7c061998fe437e5b4fdd0006176ccf8110b",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/groovy/blob/9fa67428ae6ab0c38c1c2b3503ad754029bebbf1/src/test/groovy/xml/MarkupBuilderTest.groovy",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/xml/MarkupBuilderTest.groovy?ref=9fa67428ae6ab0c38c1c2b3503ad754029bebbf1",
                "deletions": 8,
                "filename": "src/test/groovy/xml/MarkupBuilderTest.groovy",
                "patch": "@@ -124,7 +124,7 @@ class MarkupBuilderTest extends GroovyTestCase {\n   <elem1>hello1</elem1>\n   <elem2>hello2</elem2>\n   <nestedElem x='abc' y='def'>\n-    <child z='def' />\n+    <child z='def' nulltest=''/>\n     <child2 />\n   </nestedElem>\n   <nestedElem2 z='zzz'>\n@@ -174,7 +174,7 @@ class MarkupBuilderTest extends GroovyTestCase {\n   <greaterthan>&gt;</greaterthan>\n   <emptyElement />\n   <null />\n-  <nullAttribute />\n+  <nullAttribute t1='' />\n   <emptyWithAttributes attr1='set' />\n   <emptyAttribute t1='' />\n   <parent key='value'>\n@@ -315,26 +315,26 @@ require escaping. The other characters consist of:\n       assertExpectedXml '<p><em>call to outside</em></p>'\n     }\n \n-    void testOmitAttributeSettingsOmitNullKeepEmptyDefaultCase() {\n+    void testOmitAttributeSettingsKeepBothDefaultCase() {\n         xml.element(att1:null, att2:'')\n-        assertExpectedXml \"<element att2='' />\"\n+        assertExpectedXml \"<element att1='' att2='' />\"\n     }\n \n-    void testOmitAttributeSettingsKeepBoth() {\n-        xml.omitNullAttributes = false\n+    void testOmitAttributeSettingsOmitNullKeepEmpty() {\n+        xml.omitNullAttributes = true\n         xml.element(att1:null, att2:'')\n-        assertExpectedXml \"<element att1='' att2='' />\"\n+        assertExpectedXml \"<element att2='' />\"\n     }\n \n     void testOmitAttributeSettingsKeepNullOmitEmpty() {\n-        xml.omitNullAttributes = false\n         xml.omitEmptyAttributes = true\n         xml.element(att1:null, att2:'')\n         assertExpectedXml \"<element att1='' />\"\n     }\n \n     void testOmitAttributeSettingsOmitBoth() {\n         xml.omitEmptyAttributes = true\n+        xml.omitNullAttributes = true\n         xml.element(att1:null, att2:'')\n         assertExpectedXml \"<element />\"\n     }",
                "raw_url": "https://github.com/apache/groovy/raw/9fa67428ae6ab0c38c1c2b3503ad754029bebbf1/src/test/groovy/xml/MarkupBuilderTest.groovy",
                "sha": "0c6991a09931d19d297430c6a26e6e7707d5e97d",
                "status": "modified"
            },
            {
                "additions": 44,
                "blob_url": "https://github.com/apache/groovy/blob/9fa67428ae6ab0c38c1c2b3503ad754029bebbf1/src/test/groovy/xml/StreamingMarkupBuilderTest.groovy",
                "changes": 71,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/xml/StreamingMarkupBuilderTest.groovy?ref=9fa67428ae6ab0c38c1c2b3503ad754029bebbf1",
                "deletions": 27,
                "filename": "src/test/groovy/xml/StreamingMarkupBuilderTest.groovy",
                "patch": "@@ -22,11 +22,20 @@ import org.custommonkey.xmlunit.*\n  * textual markup (XML or HTML) using GroovyMarkup\n  */\n class StreamingMarkupBuilderTest extends TestXmlSupport {\n-    \n-    void testSmallTree() {\n-        def b = new StreamingMarkupBuilder()\n+\n+    private assertExpectedXml(Closure markup, String expectedXml) {\n+        assertExpectedXml new StreamingMarkupBuilder(), markup, expectedXml\n+    }\n+\n+    private assertExpectedXml(StreamingMarkupBuilder builder, Closure markup, String expectedXml) {\n         def writer = new StringWriter()\n-        \n+        writer << builder.bind(markup)\n+        XMLUnit.ignoreWhitespace = true\n+        def xmlDiff = new Diff(expectedXml, writer.toString())\n+        assert xmlDiff.similar(), xmlDiff.toString()\n+    }\n+\n+    void testSmallTree() {\n         def m = {\n             mkp.pi(\"xml-stylesheet\":[href:\"mystyle.css\", type:\"text/css\"])\n             root1(a:5, b:7) {\n@@ -35,24 +44,16 @@ class StreamingMarkupBuilderTest extends TestXmlSupport {\n                 elem3(x:7)\n             }\n         }\n-\n-        def expectedXml = '''\\\n+        assertExpectedXml m, '''\\\n <?xml-stylesheet href=\"mystyle.css\" type=\"text/css\"?>\n <root1 a='5' b='7'>\n   <elem1>hello1</elem1>\n   <elem2>hello2</elem2>\n   <elem3 x='7'/>\n </root1>'''\n-        writer << b.bind(m)\n-        XMLUnit.ignoreWhitespace = true\n-        def xmlDiff = new Diff(expectedXml, writer.toString())\n-        assert xmlDiff.similar(), xmlDiff.toString()\n     }\n \n     void testTree() {\n-        def b = new StreamingMarkupBuilder()\n-        def writer = new StringWriter()\n-\n         def m = {\n             root2(a:5, b:7) {\n                 elem1('hello1')\n@@ -69,7 +70,7 @@ class StreamingMarkupBuilderTest extends TestXmlSupport {\n             }\n         }\n \n-        def expectedXml = '''\\\n+        assertExpectedXml m, '''\\\n <root2 a='5' b='7'>\n   <elem1>hello1</elem1>\n   <elem2>hello2</elem2>\n@@ -82,11 +83,6 @@ class StreamingMarkupBuilderTest extends TestXmlSupport {\n     <child2>hello</child2>\n   </nestedElem2>\n </root2>'''\n-\n-        writer << b.bind(m)\n-        XMLUnit.ignoreWhitespace = true\n-        def xmlDiff = new Diff(expectedXml, writer.toString())\n-        assert xmlDiff.similar(), xmlDiff.toString()\n     }\n \n     void testObjectOperationsInMarkup() {\n@@ -101,9 +97,6 @@ class StreamingMarkupBuilderTest extends TestXmlSupport {\n     }\n \n     void testMixedMarkup() {\n-        def b = new StreamingMarkupBuilder()\n-        def writer = new StringWriter()\n-\n         def m = {\n // uncomment if you want entities like &nbsp; (and add to expected too)\n //            mkp.yieldUnescaped '''<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n@@ -119,16 +112,40 @@ class StreamingMarkupBuilderTest extends TestXmlSupport {\n             }\n         }\n \n-        def expectedXml = '''\\\n+        assertExpectedXml m, '''\\\n <html>\n   <body>\n     <p>The <i>quick</i> brown fox jumped over the <b>lazy</b> dog &amp; sleepy cat</p>\n   </body>\n </html>'''\n+    }\n \n-        writer << b.bind(m)\n-        XMLUnit.ignoreWhitespace = true\n-        def xmlDiff = new Diff(expectedXml, writer.toString())\n-        assert xmlDiff.similar(), xmlDiff.toString()\n+    void testOmitAttributeSettingsKeepBothDefaultCase() {\n+        def b = new StreamingMarkupBuilder()\n+        def m = { element(att1:null, att2:'') }\n+        assertExpectedXml b, m, \"<element att1='' att2='' />\"\n     }\n+\n+    void testOmitAttributeSettingsOmitNull() {\n+        def b = new StreamingMarkupBuilder()\n+        b.omitNullAttributes = true\n+        def m = { element(att1:null, att2:'') }\n+        assertExpectedXml b, m, \"<element att2='' />\"\n+    }\n+\n+    void testOmitAttributeSettingsOmitEmpty() {\n+        def b = new StreamingMarkupBuilder()\n+        b.omitEmptyAttributes = true\n+        def m = { element(att1:null, att2:'') }\n+        assertExpectedXml b, m, \"<element att1='' />\"\n+    }\n+\n+    void testOmitAttributeSettingsOmitBoth() {\n+        def b = new StreamingMarkupBuilder()\n+        b.omitEmptyAttributes = true\n+        b.omitNullAttributes = true\n+        def m = { element(att1:null, att2:'') }\n+        assertExpectedXml b, m, \"<element />\"\n+    }\n+\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/groovy/raw/9fa67428ae6ab0c38c1c2b3503ad754029bebbf1/src/test/groovy/xml/StreamingMarkupBuilderTest.groovy",
                "sha": "a534451a17dc0ab91b90a413dbbba9b37573edcb",
                "status": "modified"
            }
        ],
        "message": "GROOVY-1684: MarkupBuilder throws NPE if element content or attribute values are null (minor refactoring)\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@10374 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/c0e79a1d7a26ec995242dd1798030c68ebfa90b5",
        "patched_files": [
            "StreamingMarkupBuilder.java",
            "MarkupBuilder.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "MarkupBuilderTest.java",
            "StreamingMarkupBuilderTest.java"
        ]
    },
    "groovy_a1c8770": {
        "bug_id": "groovy_a1c8770",
        "commit": "https://github.com/apache/groovy/commit/a1c87707d8139b42bab00a1f58e4ddaf6611d3b0",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/groovy/blob/a1c87707d8139b42bab00a1f58e4ddaf6611d3b0/src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionHelper.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionHelper.java?ref=a1c87707d8139b42bab00a1f58e4ddaf6611d3b0",
                "deletions": 3,
                "filename": "src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionHelper.java",
                "patch": "@@ -399,10 +399,12 @@ private void loadInitValue(ClassNode type) {\n \n     protected void evaluateCompareExpression(MethodCaller compareMethod, BinaryExpression expression) {\n         Expression leftExp = expression.getLeftExpression();\n-        ClassNode leftType = leftExp.getType();\n+        TypeChooser typeChooser = controller.getTypeChooser();\n+        ClassNode cn = controller.getClassNode();\n+        ClassNode leftType = typeChooser.resolveType(leftExp,cn);\n         Expression rightExp = expression.getRightExpression();\n-        ClassNode rightType = rightExp.getType();\n-        \n+        ClassNode rightType = typeChooser.resolveType(rightExp,cn);\n+\n         boolean done = false;\n         if (    ClassHelper.isPrimitiveType(leftType) &&\n                 ClassHelper.isPrimitiveType(rightType)) ",
                "raw_url": "https://github.com/apache/groovy/raw/a1c87707d8139b42bab00a1f58e4ddaf6611d3b0/src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionHelper.java",
                "sha": "c6fad11ca38f74ccd4b928f87318b40a339bf825",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/groovy/blob/a1c87707d8139b42bab00a1f58e4ddaf6611d3b0/src/main/org/codehaus/groovy/transform/sc/transformers/BooleanExpressionTransformer.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/sc/transformers/BooleanExpressionTransformer.java?ref=a1c87707d8139b42bab00a1f58e4ddaf6611d3b0",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/transform/sc/transformers/BooleanExpressionTransformer.java",
                "patch": "@@ -21,6 +21,7 @@\n import org.codehaus.groovy.classgen.asm.WriterController;\n import org.codehaus.groovy.classgen.asm.sc.StaticTypesTypeChooser;\n import org.codehaus.groovy.transform.stc.ExtensionMethodNode;\n+import org.objectweb.asm.Label;\n import org.objectweb.asm.MethodVisitor;\n \n import java.lang.reflect.Modifier;\n@@ -97,9 +98,19 @@ public void visit(final GroovyCodeVisitor visitor) {\n                 }\n                 if (type.equals(ClassHelper.Boolean_TYPE)) {\n                     expression.visit(visitor);\n-                    // unbox\n                     MethodVisitor mv = controller.getMethodVisitor();\n+                    Label unbox = new Label();\n+                    Label exit = new Label();\n+                    // check for null\n+                    mv.visitInsn(DUP);\n+                    mv.visitJumpInsn(IFNONNULL, unbox);\n+                    mv.visitInsn(POP);\n+                    mv.visitInsn(ICONST_0);\n+                    mv.visitJumpInsn(GOTO, exit);\n+                    mv.visitLabel(unbox);\n+                    // unbox\n                     mv.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Boolean\", \"booleanValue\", \"()Z\");\n+                    mv.visitLabel(exit);\n                     controller.getOperandStack().replace(ClassHelper.boolean_TYPE);\n                     return;\n                 }",
                "raw_url": "https://github.com/apache/groovy/raw/a1c87707d8139b42bab00a1f58e4ddaf6611d3b0/src/main/org/codehaus/groovy/transform/sc/transformers/BooleanExpressionTransformer.java",
                "sha": "b78f2601ced6bc8dad3478ab2ce1ca58d7643963",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/a1c87707d8139b42bab00a1f58e4ddaf6611d3b0/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java?ref=a1c87707d8139b42bab00a1f58e4ddaf6611d3b0",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "patch": "@@ -2428,6 +2428,8 @@ public void visitTryCatchFinally(final TryCatchStatement statement) {\n     protected void storeType(Expression exp, ClassNode cn) {\n         if (exp instanceof VariableExpression && ((VariableExpression) exp).isClosureSharedVariable() && isPrimitiveType(cn)) {\n             cn = getWrapper(cn);\n+        } else if (exp instanceof MethodCallExpression && ((MethodCallExpression) exp).isSafe() && isPrimitiveType(cn)) {\n+            cn = getWrapper(cn);\n         }\n         if (cn == UNKNOWN_PARAMETER_TYPE) {\n             // this can happen for example when \"null\" is used in an assignment or a method parameter.",
                "raw_url": "https://github.com/apache/groovy/raw/a1c87707d8139b42bab00a1f58e4ddaf6611d3b0/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "sha": "61fe75300e2fc92250e223dbd15c7c957106d8ec",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/a1c87707d8139b42bab00a1f58e4ddaf6611d3b0/src/test/org/codehaus/groovy/classgen/asm/MethodPatternsTest.groovy",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/classgen/asm/MethodPatternsTest.groovy?ref=a1c87707d8139b42bab00a1f58e4ddaf6611d3b0",
                "deletions": 1,
                "filename": "src/test/org/codehaus/groovy/classgen/asm/MethodPatternsTest.groovy",
                "patch": "@@ -197,7 +197,7 @@ class MethodPatternsTest extends AbstractBytecodeTestCase {\n             'ICONST_1',\n             'IADD',\n             'ISTORE',\n-            'GOTO L14'\n+            'GOTO'\n         ])\n     }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/a1c87707d8139b42bab00a1f58e4ddaf6611d3b0/src/test/org/codehaus/groovy/classgen/asm/MethodPatternsTest.groovy",
                "sha": "6bb753c106b952505e488794a1bb37f71ba1d9e4",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/groovy/blob/a1c87707d8139b42bab00a1f58e4ddaf6611d3b0/src/test/org/codehaus/groovy/classgen/asm/sc/BugsStaticCompileTest.groovy",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/classgen/asm/sc/BugsStaticCompileTest.groovy?ref=a1c87707d8139b42bab00a1f58e4ddaf6611d3b0",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/classgen/asm/sc/BugsStaticCompileTest.groovy",
                "patch": "@@ -803,5 +803,16 @@ import groovy.transform.TypeCheckingMode\n             assert foo.hasSideEffect\n          '''\n     }\n+\n+    void testShouldNotThrowNPEBecauseLHSIsNull() {\n+        assertScript '''\n+            class A {\n+                int foo() { 123 }\n+            }\n+            A a = null\n+            def bar = a?.foo() == 123 // will evaluate to false\n+            assert bar == false\n+        '''\n+    }\n }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/a1c87707d8139b42bab00a1f58e4ddaf6611d3b0/src/test/org/codehaus/groovy/classgen/asm/sc/BugsStaticCompileTest.groovy",
                "sha": "0fcf66df5ea025f0306d2afbaea01c73d4ffe09a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/a1c87707d8139b42bab00a1f58e4ddaf6611d3b0/src/test/org/codehaus/groovy/classgen/asm/sc/StaticCompileNullCompareOptimizationTest.groovy",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/classgen/asm/sc/StaticCompileNullCompareOptimizationTest.groovy?ref=a1c87707d8139b42bab00a1f58e4ddaf6611d3b0",
                "deletions": 1,
                "filename": "src/test/org/codehaus/groovy/classgen/asm/sc/StaticCompileNullCompareOptimizationTest.groovy",
                "patch": "@@ -104,7 +104,7 @@ class StaticCompileNullCompareOptimizationTest extends AbstractBytecodeTestCase\n                 }\n             }\n         ''')\n-        assert bytecode.hasStrictSequence(['ALOAD 1', 'INVOKEVIRTUAL', 'IFEQ'])\n+        assert bytecode.hasStrictSequence(['ALOAD 1', 'DUP', 'IFNONNULL', 'POP', 'ICONST_0', 'GOTO', 'L1', 'INVOKEVIRTUAL', 'L2', 'IFEQ'])\n     }\n \n     void testOptimizeGroovyTruthWithStringShouldNotBeTriggered() {",
                "raw_url": "https://github.com/apache/groovy/raw/a1c87707d8139b42bab00a1f58e4ddaf6611d3b0/src/test/org/codehaus/groovy/classgen/asm/sc/StaticCompileNullCompareOptimizationTest.groovy",
                "sha": "9ec1041febcf64d1eecb11cec388c38d1d8bd192",
                "status": "modified"
            }
        ],
        "message": "GROOVY-6108: NPE may occur when using the null-safe operator on the LHS of an == comparison",
        "parent": "https://github.com/apache/groovy/commit/c48509aa6f75bde1122a471a31c032c3341ee013",
        "patched_files": [
            "StaticTypeCheckingVisitor.java",
            "BooleanExpressionTransformer.java",
            "BinaryExpressionHelper.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "BugsStaticCompileTest.java",
            "MethodPatternsTest.java",
            "StaticCompileNullCompareOptimizationTest.java"
        ]
    },
    "groovy_a57c429": {
        "bug_id": "groovy_a57c429",
        "commit": "https://github.com/apache/groovy/commit/a57c4296d9bd46912dade87796c16988e1962019",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/groovy/blob/a57c4296d9bd46912dade87796c16988e1962019/src/main/org/codehaus/groovy/classgen/asm/StatementWriter.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/classgen/asm/StatementWriter.java?ref=a57c4296d9bd46912dade87796c16988e1962019",
                "deletions": 5,
                "filename": "src/main/org/codehaus/groovy/classgen/asm/StatementWriter.java",
                "patch": "@@ -580,16 +580,16 @@ public void writeReturn(ReturnStatement statement) {\n \n         Expression expression = statement.getExpression();\n         expression.visit(controller.getAcg());\n-        \n+\n+        operandStack.doGroovyCast(returnType);\n+\n         if (controller.getCompileStack().hasBlockRecorder()) {\n             ClassNode type = operandStack.getTopOperand();\n-            // value is always saved in boxed form, so no need to have a special load routine here\n-            int returnValueIdx = controller.getCompileStack().defineTemporaryVariable(\"returnValue\", type, true);\n+            int returnValueIdx = controller.getCompileStack().defineTemporaryVariable(\"returnValue\", returnType, true);\n             controller.getCompileStack().applyBlockRecorder();\n             operandStack.load(type, returnValueIdx);\n         }\n-        \n-        operandStack.doGroovyCast(returnType); \n+\n         BytecodeHelper.doReturn(mv, returnType);\n         operandStack.remove(1);\n     }",
                "raw_url": "https://github.com/apache/groovy/raw/a57c4296d9bd46912dade87796c16988e1962019/src/main/org/codehaus/groovy/classgen/asm/StatementWriter.java",
                "sha": "05e8b0990174e1e8d6c1ed6a58f845cf49e2b8b6",
                "status": "modified"
            },
            {
                "additions": 37,
                "blob_url": "https://github.com/apache/groovy/blob/a57c4296d9bd46912dade87796c16988e1962019/src/test/groovy/lang/SyntheticReturnTest.groovy",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/lang/SyntheticReturnTest.groovy?ref=a57c4296d9bd46912dade87796c16988e1962019",
                "deletions": 0,
                "filename": "src/test/groovy/lang/SyntheticReturnTest.groovy",
                "patch": "@@ -1,6 +1,43 @@\n package groovy.lang\n \n class SyntheticReturnTest extends GroovyShellTestCase{\n+\n+    // GROOVY-5980\n+    void testImplicitReturnWithFinallyBlockAndCastException() {\n+        assertEquals( 'test', evaluate(\"\"\"\n+              s = ''\n+              int f() {\n+                 try { null } finally { s += 'test' }\n+              }\n+              try { f() } catch (ex) {}\n+              s\n+        \"\"\"))\n+    }\n+\n+    void testImplicitReturnWithFinallyBlockMultipleStmtsAndCastException() {\n+        assertEquals( 'test', evaluate(\"\"\"\n+              i = 0\n+              s = ''\n+              int f() {\n+                 try { def t = 41 + 1; i = t; null } finally { assert i == 42; s += 'test' }\n+              }\n+              try { f() } catch (ex) {}\n+              s\n+        \"\"\"))\n+    }\n+\n+    void testImplicitReturnWithFinallyBlockAndTypeCast() {\n+        assertEquals( '42', evaluate(\"\"\"\n+              s = ''\n+              String f() {\n+                 try { 42 } finally { s += 'test' }\n+              }\n+              def result = f()\n+              assert s == 'test'\n+              result\n+        \"\"\"))\n+    }\n+\n     void testExpt () {\n         assertEquals( 5, evaluate(\"\"\"\n               5",
                "raw_url": "https://github.com/apache/groovy/raw/a57c4296d9bd46912dade87796c16988e1962019/src/test/groovy/lang/SyntheticReturnTest.groovy",
                "sha": "e1865e9da4d8f24cebf3c57b087177b70f94dd1b",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #139 from andresteingress/GROOVY-5980\n\nGROOVY-5980: Finally executes twice on NPE while casting method result",
        "parent": "https://github.com/apache/groovy/commit/71488d44dc436a5c45cdde7951ee358d97a8cf4d",
        "patched_files": [
            "StatementWriter.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "SyntheticReturnTest.java"
        ]
    },
    "groovy_a9cba6b": {
        "bug_id": "groovy_a9cba6b",
        "commit": "https://github.com/apache/groovy/commit/a9cba6b1ba223c51293c59c462d1a18bf9854578",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/a9cba6b1ba223c51293c59c462d1a18bf9854578/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java?ref=a9cba6b1ba223c51293c59c462d1a18bf9854578",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "patch": "@@ -453,7 +453,7 @@ private ClassNode getOriginalDeclarationType(Expression lhs) {\n     private void inferDiamondType(final ConstructorCallExpression cce, final ClassNode lType) {\n         // check if constructor call expression makes use of the diamond operator\n         ClassNode node = cce.getType();\n-        if (node.isUsingGenerics() && node.getGenericsTypes().length == 0) {\n+        if (node.isUsingGenerics() && node.getGenericsTypes()!=null && node.getGenericsTypes().length == 0) {\n             ArgumentListExpression argumentListExpression = InvocationWriter.makeArgumentList(cce.getArguments());\n             if (argumentListExpression.getExpressions().isEmpty()) {\n                 GenericsType[] genericsTypes = lType.getGenericsTypes();",
                "raw_url": "https://github.com/apache/groovy/raw/a9cba6b1ba223c51293c59c462d1a18bf9854578/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "sha": "983f225049f7f4b9b0531244dc44bd976098752f",
                "status": "modified"
            },
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/groovy/blob/a9cba6b1ba223c51293c59c462d1a18bf9854578/src/test/groovy/transform/stc/AnonymousInnerClassSTCTest.groovy",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/transform/stc/AnonymousInnerClassSTCTest.groovy?ref=a9cba6b1ba223c51293c59c462d1a18bf9854578",
                "deletions": 0,
                "filename": "src/test/groovy/transform/stc/AnonymousInnerClassSTCTest.groovy",
                "patch": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2003-2012 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package groovy.transform.stc\n+\n+/**\n+ * Test cases specifically aimed at testing the behaviour of the type checker\n+ * with regards to anonymous inner classes.\n+ *\n+ * @author Cedric Champeau\n+ */\n+class AnonymousInnerClassSTCTest extends StaticTypeCheckingTestCase {\n+\n+    // GROOVY-5565\n+    void testShouldNotThrowNPE() {\n+        assertScript '''\n+            Serializable s = new Serializable() { List things = [] }\n+            assert s.things.size() == 0\n+        '''\n+        assertScript '''\n+            Serializable s = new Serializable() { List things = [1] }\n+            assert s.things.size() == 1\n+        '''\n+    }\n+}",
                "raw_url": "https://github.com/apache/groovy/raw/a9cba6b1ba223c51293c59c462d1a18bf9854578/src/test/groovy/transform/stc/AnonymousInnerClassSTCTest.groovy",
                "sha": "5e483a851905c5137ea5f72c5143896bd19c6219",
                "status": "added"
            }
        ],
        "message": "GROOVY-5565: Fix anonymous inner class throwing NPE",
        "parent": "https://github.com/apache/groovy/commit/840c878ce3e0620c29296b5689bbdaf636fffe30",
        "patched_files": [
            "StaticTypeCheckingVisitor.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "AnonymousInnerClassSTCTest.java"
        ]
    },
    "groovy_ad4d5a4": {
        "bug_id": "groovy_ad4d5a4",
        "commit": "https://github.com/apache/groovy/commit/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf",
        "file": [
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/groovy/blob/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/.classpath",
                "changes": 85,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/.classpath?ref=ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf",
                "deletions": 54,
                "filename": ".classpath",
                "patch": "@@ -1,56 +1,33 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-\n <classpath>\n-  <classpathentry kind=\"src\" path=\"src/main\">\n-  </classpathentry>\n-  <classpathentry output=\"target/test-classes\" kind=\"src\" path=\"src/test\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/junit/jars/junit-3.8.1.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" rootpath=\"JRE_SRCROOT\" path=\"JRE_LIB\" sourcepath=\"JRE_SRC\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/asm/jars/asm-1.4.1.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/xerces/jars/xerces-2.4.0.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/xml-apis/jars/xml-apis-1.0.b2.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/classworlds/jars/classworlds-1.0-rc2.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/commons-cli/jars/commons-cli-1.0.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/ant/jars/ant-1.5.2.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/asm/jars/asm-util-1.4.1.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/asm/jars/asm-attrs-1.4.1.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/bsf/jars/bsf-2.3.0-rc1.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/mx4j/jars/mx4j-2.0-beta-1.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/mockobjects/jars/mockobjects-core-0.09.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/openejb/jars/openejb-loader-0.9.2.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/axion/jars/axion-1.0-M3-dev.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/commons-logging/jars/commons-logging-1.0.3.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/commons-collections/jars/commons-collections-3.0-dev2.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/regexp/jars/regexp-1.2.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/servletapi/jars/servletapi-2.3.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/radeox/jars/radeox-0.9.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/radeox/jars/radeox-oro-0.9.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/nekohtml/jars/nekohtml-0.7.7.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/qdox/jars/qdox-1.3.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"output\" path=\"target/classes\">\n-  </classpathentry>\n-</classpath>\n\\ No newline at end of file\n+\t<classpathentry kind=\"src\" path=\"src/main\"/>\n+\t<classpathentry output=\"target/test-classes\" kind=\"src\" path=\"src/test\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/junit/jars/junit-3.8.1.jar\"/>\n+\t<classpathentry sourcepath=\"JRE_SRC\" kind=\"var\" path=\"JRE_LIB\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/asm/jars/asm-1.4.1.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/xerces/jars/xerces-2.4.0.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/xml-apis/jars/xml-apis-1.0.b2.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/classworlds/jars/classworlds-1.0-rc2.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/commons-cli/jars/commons-cli-1.0.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/ant/jars/ant-1.5.2.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/asm/jars/asm-util-1.4.1.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/asm/jars/asm-attrs-1.4.1.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/bsf/jars/bsf-2.3.0-rc1.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/mx4j/jars/mx4j-2.0-beta-1.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/mockobjects/jars/mockobjects-core-0.09.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/openejb/jars/openejb-loader-0.9.2.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/axion/jars/axion-1.0-M3-dev.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/commons-logging/jars/commons-logging-1.0.3.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/commons-collections/jars/commons-collections-3.0-dev2.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/regexp/jars/regexp-1.2.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/servletapi/jars/servletapi-2.3.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/radeox/jars/radeox-0.9.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/radeox/jars/radeox-oro-0.9.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/nekohtml/jars/nekohtml-0.7.7.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/qdox/jars/qdox-1.3.jar\"/>\n+\t<classpathentry kind=\"lib\" path=\"/Applications/eclipse-3.0-m5/plugins/org.codehaus.groovy_1.0.0/asm-1.4.1.jar\"/>\n+\t<classpathentry kind=\"lib\" path=\"/Applications/eclipse-3.0-m5/plugins/org.codehaus.groovy_1.0.0/asm-attrs-1.4.1.jar\"/>\n+\t<classpathentry kind=\"lib\" path=\"/Applications/eclipse-3.0-m5/plugins/org.codehaus.groovy_1.0.0/asm-util-1.4.1.jar\"/>\n+\t<classpathentry kind=\"lib\" path=\"/Applications/eclipse-3.0-m5/plugins/org.codehaus.groovy_1.0.0/groovy-1.0-beta-3.jar\"/>\n+\t<classpathentry kind=\"output\" path=\"target/classes\"/>\n+</classpath>",
                "raw_url": "https://github.com/apache/groovy/raw/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/.classpath",
                "sha": "e44aa8c78d209af749a262ab72461f7c848ef347",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/groovy/blob/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/.project",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/.project?ref=ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf",
                "deletions": 16,
                "filename": ".project",
                "patch": "@@ -1,18 +1,29 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-\n <projectDescription>\n-  <name>groovy</name>\n-  <comment>a powerful and dynamic scripting language for the JVM</comment>\n-  <projects>\n-  </projects>\n-  <buildSpec>\n-    <buildCommand>\n-      <name>org.eclipse.jdt.core.javabuilder</name>\n-      <arguments>\n-      </arguments>\n-    </buildCommand>\n-  </buildSpec>\n-  <natures>\n-    <nature>org.eclipse.jdt.core.javanature</nature>\n-  </natures>\n-</projectDescription>\n\\ No newline at end of file\n+\t<name>groovy-core</name>\n+\t<comment>a powerful and dynamic scripting language for the JVM</comment>\n+\t<projects>\n+\t</projects>\n+\t<buildSpec>\n+\t\t<buildCommand>\n+\t\t\t<name>org.eclipse.jdt.core.javabuilder</name>\n+\t\t\t<arguments>\n+\t\t\t</arguments>\n+\t\t</buildCommand>\n+\t\t<buildCommand>\n+\t\t\t<name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>\n+\t\t\t<arguments>\n+\t\t\t\t<dictionary>\n+\t\t\t\t\t<key>LaunchConfigHandle</key>\n+\t\t\t\t\t<value>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n+&lt;launchConfiguration local=&quot;false&quot; path=&quot;/groovy-core/.externalToolBuilders/org.codehaus.groovy.eclipse.groovyBuilder (1).launch&quot;/&gt;\n+</value>\n+\t\t\t\t</dictionary>\n+\t\t\t</arguments>\n+\t\t</buildCommand>\n+\t</buildSpec>\n+\t<natures>\n+\t\t<nature>org.eclipse.jdt.core.javanature</nature>\n+\t\t<nature>org.codehaus.groovy.eclipse.groovyNature</nature>\n+\t</natures>\n+</projectDescription>",
                "raw_url": "https://github.com/apache/groovy/raw/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/.project",
                "sha": "434b3ff50dd29099f530b526c4e0953f735350e4",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/groovy/blob/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/src/main/groovy/lang/Closure.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/Closure.java?ref=ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf",
                "deletions": 3,
                "filename": "src/main/groovy/lang/Closure.java",
                "patch": "@@ -81,7 +81,7 @@ else if (\"call\".equals(method)) {\n             }\n             catch (MissingMethodException e) {\n                 Object delegate = getDelegate();\n-                if (delegate != this) {\n+                if (delegate != this && delegate != null) {\n                     try {\n                         // lets try invoke method on delegate\n                         return InvokerHelper.invokeMethod(delegate, method, arguments);\n@@ -101,7 +101,7 @@ public Object getProperty(String property) {\n         }\n         catch (GroovyRuntimeException e) {\n             Object delegate = getDelegate();\n-            if (delegate != this) {\n+            if (delegate != this && delegate != null) {\n                 try {\n                     // lets try invoke method on delegate\n                     return InvokerHelper.getProperty(delegate, property);\n@@ -121,7 +121,7 @@ public void setProperty(String property, Object newValue) {\n         }\n         catch (GroovyRuntimeException e) {\n             Object delegate = getDelegate();\n-            if (delegate != this) {\n+            if (delegate != this && delegate != null) {\n                 try {\n                     // lets try invoke method on delegate\n                     InvokerHelper.setProperty(delegate, property, newValue);",
                "raw_url": "https://github.com/apache/groovy/raw/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/src/main/groovy/lang/Closure.java",
                "sha": "f79af4120c12176c1b6dfaa4ecd438252553b168",
                "status": "modified"
            },
            {
                "additions": 89,
                "blob_url": "https://github.com/apache/groovy/blob/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/src/main/org/codehaus/groovy/classgen/ReflectorGenerator.java",
                "changes": 89,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/classgen/ReflectorGenerator.java?ref=ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/classgen/ReflectorGenerator.java",
                "patch": "@@ -47,6 +47,9 @@\n \n import groovy.lang.MetaMethod;\n \n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n import java.util.List;\n \n import org.objectweb.asm.ClassVisitor;\n@@ -183,6 +186,92 @@ protected void invokeMethod(MetaMethod method) {\n         helper.box(method.getReturnType());\n     }\n \n+    /*\n+    protected void generateInvokeSuperMethod() {\n+        List superMethods = new ArrayList(methods);\n+        for (Iterator iter = methods.iterator(); iter.hasNext();) {\n+            MetaMethod method = (MetaMethod) iter.next();\n+            if (!validSuperMethod(method)) {\n+                superMethods.remove(method);\n+            }\n+        }\n+        int methodCount = superMethods.size();\n+        if (methodCount == 0) {\n+            return;\n+        }\n+        cv =\n+            cw.visitMethod(\n+                ACC_PUBLIC,\n+                \"invokeSuper\",\n+                \"(Lgroovy/lang/MetaMethod;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\",\n+                null,\n+                null);\n+        helper = new BytecodeHelper(cv);\n+\n+        cv.visitVarInsn(ALOAD, 1);\n+        cv.visitMethodInsn(INVOKEVIRTUAL, \"groovy/lang/MetaMethod\", \"getMethodIndex\", \"()I\");\n+        Label defaultLabel = new Label();\n+        Label[] labels = new Label[methodCount];\n+        int[] indices = new int[methodCount];\n+        for (int i = 0; i < methodCount; i++) {\n+            labels[i] = new Label();\n+\n+            MetaMethod method = (MetaMethod) superMethods.get(i);\n+            method.setMethodIndex(i + 1);\n+            indices[i] = method.getMethodIndex();\n+\n+            //System.out.println(\"Index: \" + method.getMethodIndex() + \" for: \" + method);\n+        }\n+\n+        cv.visitLookupSwitchInsn(defaultLabel, indices, labels);\n+        //cv.visitTableSwitchInsn(minMethodIndex, maxMethodIndex, defaultLabel, labels);\n+\n+        for (int i = 0; i < methodCount; i++) {\n+            MetaMethod method = (MetaMethod) superMethods.get(i);\n+            cv.visitLabel(labels[i]);\n+\n+            invokeSuperMethod(method);\n+            if (method.getReturnType() == void.class) {\n+                cv.visitInsn(ACONST_NULL);\n+            }\n+            cv.visitInsn(ARETURN);\n+        }\n+\n+        cv.visitLabel(defaultLabel);\n+        cv.visitVarInsn(ALOAD, 0);\n+        cv.visitVarInsn(ALOAD, 1);\n+        cv.visitVarInsn(ALOAD, 2);\n+        cv.visitVarInsn(ALOAD, 3);\n+        cv.visitMethodInsn(\n+            INVOKEVIRTUAL,\n+            classInternalName,\n+            \"noSuchMethod\",\n+            \"(Lgroovy/lang/MetaMethod;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\");\n+        cv.visitInsn(ARETURN);\n+        cv.visitMaxs(4, 4);\n+    }\n+\n+    protected boolean validSuperMethod(MetaMethod method) {\n+        return !method.isStatic() && (method.getModifiers() & (Modifier.FINAL | Modifier.ABSTRACT)) == 0 && theClass == method.getDeclaringClass();\n+    }\n+\n+    protected void invokeSuperMethod(MetaMethod method) {\n+        Class ownerClass = method.getDeclaringClass();\n+        String type = helper.getClassInternalName(ownerClass.getName());\n+        String descriptor = helper.getMethodDescriptor(method.getReturnType(), method.getParameterTypes());\n+\n+//        System.out.println(\"Method: \" + method.getName());\n+//        System.out.println(\"Descriptor: \" + descriptor);\n+\n+        cv.visitVarInsn(ALOAD, 2);\n+        //helper.doCast(ownerClass);\n+        loadParameters(method, 3);\n+        cv.visitMethodInsn(INVOKESPECIAL, type, method.getName(), descriptor);\n+\n+        helper.box(method.getReturnType());\n+    }\n+*/\n+    \n     protected void loadParameters(MetaMethod method, int argumentIndex) {\n         Class[] parameters = method.getParameterTypes();\n         int size = parameters.length;",
                "raw_url": "https://github.com/apache/groovy/raw/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/src/main/org/codehaus/groovy/classgen/ReflectorGenerator.java",
                "sha": "c2976050a148066d12c1cc56722f493c6446b2f0",
                "status": "modified"
            },
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/groovy/blob/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/src/test/groovy/bugs/SuperMethod2Bug.groovy",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/bugs/SuperMethod2Bug.groovy?ref=ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf",
                "deletions": 0,
                "filename": "src/test/groovy/bugs/SuperMethod2Bug.groovy",
                "patch": "@@ -0,0 +1,42 @@\n+/**\n+ * @version $Revision$\n+ */\n+ \n+class SuperMethod2Bug extends GroovyTestCase {\n+     \n+    void testBug() {\n+    /*\n+    \tbase = new SuperBase()\n+    \tvalue = base.doSomething()\n+    \tassert value == \"TestBase\"\n+    */\n+    \t/** @todo fix bug\n+    \t\n+    \tbase = new SuperDerived()\n+    \tvalue = base.doSomething()\n+    \tassert value == \"TestDerived\"\n+    \t*/\n+    }\n+\n+}\n+\n+class SuperBase {\n+    doSomething() {\n+    \t\"TestBase\"\n+    }\n+}\n+\n+class SuperDerived extends SuperBase {\n+\n+\tcalls = 0\n+\t\n+    doSomething() {\n+    \t/** @todo ++calls causes bug */\n+    \t//calls++\n+    \tcalls = calls + 1\n+    \tassert calls < 3\n+    \t\n+    \t\"TestDerived\" + super.doSomething()\n+    }\n+}\n+",
                "raw_url": "https://github.com/apache/groovy/raw/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/src/test/groovy/bugs/SuperMethod2Bug.groovy",
                "sha": "6d883b8e5f06ebfc74cc5569c40c28e90d14fcd4",
                "status": "added"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/src/test/org/codehaus/groovy/classgen/DumpClass3.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/classgen/DumpClass3.java?ref=ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/classgen/DumpClass3.java",
                "patch": "@@ -95,4 +95,8 @@ private Object increment(Object x) {\n         // TODO Auto-generated method stub\n         return null;\n     }\n+    \n+    public Object testSuper() {\n+        return super.getFoo();\n+    }\n }",
                "raw_url": "https://github.com/apache/groovy/raw/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/src/test/org/codehaus/groovy/classgen/DumpClass3.java",
                "sha": "779108c07424633a272fb5d4f28d480e3d45a144",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/src/test/org/codehaus/groovy/classgen/DumpClass4.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/classgen/DumpClass4.java?ref=ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/classgen/DumpClass4.java",
                "patch": "@@ -144,4 +144,8 @@ public void emptyTryCatch() {\n     public void usePrimitiveType() {\n         System.out.println(int.class);\n     }\n+    \n+    public String testSuperCall() {\n+        return super.toString();\n+    }\n }",
                "raw_url": "https://github.com/apache/groovy/raw/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/src/test/org/codehaus/groovy/classgen/DumpClass4.java",
                "sha": "0db61449094ecc0817198c1e263a3df673a3dec4",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/groovy/blob/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/src/test/org/codehaus/groovy/classgen/RunBugsTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/classgen/RunBugsTest.java?ref=ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf",
                "deletions": 1,
                "filename": "src/test/org/codehaus/groovy/classgen/RunBugsTest.java",
                "patch": "@@ -99,9 +99,13 @@ public void testMethodDispatchBug() throws Exception {\n         GroovyObject object = compile(\"src/test/groovy/bugs/MethodDispatchBug.groovy\");\n         object.invokeMethod(\"testBug\", null);\n     }\n-    */\n     public void testNestedClosureBug() throws Exception {\n         GroovyObject object = compile(\"src/test/groovy/bugs/NestedClosureBug.groovy\");\n         object.invokeMethod(\"testBug\", null);\n     }\n+    */\n+    public void testSuperMethod2Bug() throws Exception {\n+        GroovyObject object = compile(\"src/test/groovy/bugs/SuperMethod2Bug.groovy\");\n+        object.invokeMethod(\"testBug\", null);\n+    }\n    }",
                "raw_url": "https://github.com/apache/groovy/raw/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/src/test/org/codehaus/groovy/classgen/RunBugsTest.java",
                "sha": "cebdd7e0ca92da9c069e0e5e4d83256194331bdc",
                "status": "modified"
            }
        ],
        "message": "attempt to fix the super.method() bug (which didn't work, another approach is required) plus avoid throwing NullPointerExceptions if there is no delegate\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@819 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/81c1b8603bc94b7dbafb041ae3490ded24a02e2b",
        "patched_files": [
            "Closure.java",
            "SuperMethod2Bug.java",
            "ReflectorGenerator.java",
            ".java",
            "DumpClass3.java",
            "DumpClass4.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "ReflectorGeneratorTest.java",
            "RunBugsTest.java"
        ]
    },
    "groovy_b0a30ec": {
        "bug_id": "groovy_b0a30ec",
        "commit": "https://github.com/apache/groovy/commit/b0a30ece1778fef261f28809cfa9e2d1ff925247",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/b0a30ece1778fef261f28809cfa9e2d1ff925247/src/main/org/codehaus/groovy/control/customizers/SecureASTCustomizer.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/control/customizers/SecureASTCustomizer.java?ref=b0a30ece1778fef261f28809cfa9e2d1ff925247",
                "deletions": 2,
                "filename": "src/main/org/codehaus/groovy/control/customizers/SecureASTCustomizer.java",
                "patch": "@@ -556,7 +556,7 @@ public void call(final SourceUnit source, final GeneratorContext context, final\n             if (clNode!=classNode) {\n                 checkMethodDefinitionAllowed(clNode);\n                 for (MethodNode methodNode : clNode.getMethods()) {\n-                    if (!methodNode.isSynthetic()) {\n+                    if (!methodNode.isSynthetic() && methodNode.getCode() != null) {\n                         methodNode.getCode().visit(visitor);\n                     }\n                 }\n@@ -566,7 +566,7 @@ public void call(final SourceUnit source, final GeneratorContext context, final\n         List<MethodNode> methods = filterMethods(classNode);\n         if (isMethodDefinitionAllowed) {\n             for (MethodNode method : methods) {\n-                if (method.getDeclaringClass()==classNode) method.getCode().visit(visitor);\n+                if (method.getDeclaringClass()==classNode && method.getCode() != null) method.getCode().visit(visitor);\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/groovy/raw/b0a30ece1778fef261f28809cfa9e2d1ff925247/src/main/org/codehaus/groovy/control/customizers/SecureASTCustomizer.java",
                "sha": "6911651524d9483ef7c5832fc4bef1d7849ac739",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/groovy/blob/b0a30ece1778fef261f28809cfa9e2d1ff925247/src/test/org/codehaus/groovy/control/customizers/SecureASTCustomizerTest.groovy",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/control/customizers/SecureASTCustomizerTest.groovy?ref=b0a30ece1778fef261f28809cfa9e2d1ff925247",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/control/customizers/SecureASTCustomizerTest.groovy",
                "patch": "@@ -410,6 +410,16 @@ class SecureASTCustomizerTest extends GroovyTestCase {\n         assert hasSecurityException {shell.evaluate('def x() { System.println(1) }')}\n     }\n \n+    // GROOVY-7424\n+    void testClassWithInterfaceVisitable() {\n+        def shell = new GroovyShell(configuration)\n+        shell.evaluate '''\n+            interface Foo { def baz() }\n+            class Bar implements Foo { def baz() { 42 }}\n+            assert new Bar().baz() == 42\n+        '''\n+    }\n+\n     // GROOVY-6153\n     void testDeterministicWhitelistBehaviour() {\n         def shell = new GroovyShell(configuration)",
                "raw_url": "https://github.com/apache/groovy/raw/b0a30ece1778fef261f28809cfa9e2d1ff925247/src/test/org/codehaus/groovy/control/customizers/SecureASTCustomizerTest.groovy",
                "sha": "56832ced20b68916f745d1af1d12b65efc73449e",
                "status": "modified"
            }
        ],
        "message": "GROOVY-7424: NPE in SecureASTCustomizer for interface method declarations",
        "parent": "https://github.com/apache/groovy/commit/b9dafc721d09e5d4429b93eb1e26c7d6170b5a65",
        "patched_files": [
            "SecureASTCustomizer.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "SecureASTCustomizerTest.java"
        ]
    },
    "groovy_b18ff1c": {
        "bug_id": "groovy_b18ff1c",
        "commit": "https://github.com/apache/groovy/commit/b18ff1cbdf88c62fe1600104b1852fb7d03f577a",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/b18ff1cbdf88c62fe1600104b1852fb7d03f577a/src/main/groovy/util/GroovyScriptEngine.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/util/GroovyScriptEngine.java?ref=b18ff1cbdf88c62fe1600104b1852fb7d03f577a",
                "deletions": 3,
                "filename": "src/main/groovy/util/GroovyScriptEngine.java",
                "patch": "@@ -98,9 +98,10 @@ protected Class findClass(String className) throws ClassNotFoundException {\n                                     try {\n                                         dependentScriptConn = rc.getResourceConnection(filename);\n                                         ScriptCacheEntry currentCacheEntry = (ScriptCacheEntry) currentCacheEntryHolder.get();\n-                                        currentCacheEntry.dependencies.put(\n-                                                dependentScriptConn.getURL(),\n-                                                new Long(dependentScriptConn.getLastModified()));\n+                                        if(currentCacheEntry != null)\n+\t                                        currentCacheEntry.dependencies.put(\n+\t                                                dependentScriptConn.getURL(),\n+\t                                                new Long(dependentScriptConn.getLastModified()));\n                                         return parseClass(dependentScriptConn.getInputStream(), filename);\n                                     } catch (ResourceException e1) {\n                                         throw new ClassNotFoundException(\"Could not read \" + className + \": \" + e1);",
                "raw_url": "https://github.com/apache/groovy/raw/b18ff1cbdf88c62fe1600104b1852fb7d03f577a/src/main/groovy/util/GroovyScriptEngine.java",
                "sha": "f8913da5fdb3a3eb58193dc9f842535da9467b78",
                "status": "modified"
            },
            {
                "additions": 162,
                "blob_url": "https://github.com/apache/groovy/blob/b18ff1cbdf88c62fe1600104b1852fb7d03f577a/src/test/groovy/util/GroovyScriptEngineTest.groovy",
                "changes": 162,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/util/GroovyScriptEngineTest.groovy?ref=b18ff1cbdf88c62fe1600104b1852fb7d03f577a",
                "deletions": 0,
                "filename": "src/test/groovy/util/GroovyScriptEngineTest.groovy",
                "patch": "@@ -0,0 +1,162 @@\n+/*\n+\t@author Chuck Tassoni\n+*/\n+package groovy.util;\n+\n+import java.awt.Dimension;\n+\n+class GroovyScriptEngineTest extends GroovyTestCase{\n+\n+\tprivate File currentDir\n+\tprivate File srcDir;\n+\tprivate File script\n+\tprivate File com\n+\tprivate File company\n+\tprivate File util\n+\tprivate File makeMeSuper\n+\tprivate File makeMe\n+\tprivate File helperIntf\n+\tprivate File helper\n+\n+    /**\n+    * Here we have inheritance and delegation-- where the delegate implements an\n+    * interface-- all used by a dynamically instantiated class named 'MakeMe'.  \n+    */\n+\tpublic void setUp(){\n+\t\tlocateCurrentDir();\n+\t\tsrcDir = new File(currentDir, 'dynamicSrcRootToBeDeleted')\n+\t\tsrcDir.mkdir();\n+\t\t\n+\t\tscript = new File(srcDir, 'script.groovy')\n+\t\tscript << \"\"\"\n+\t\t    def obj = dynaInstantiate.instantiate(className, getClass().getClassLoader())\n+\t\t    obj.modifyWidth(dim, addThis)\n+\t\t    returnedMessage = obj.message\n+\t\t\"\"\"\n+\t\t\n+\t\tcom = new File(srcDir, 'com')\n+\t\tcom.mkdir()\n+\t\tcompany = new File(com, 'company')\n+\t\tcompany.mkdir()\n+\t\t\n+\t\tmakeMeSuper = new File(company, \"MakeMeSuper.groovy\")\n+\t\tmakeMeSuper << \"\"\"\n+\t\t    package com.company\n+\t\t    import com.company.util.*\n+\t\t    class MakeMeSuper{\n+\t\t       private HelperIntf helper = new Helper()\n+\t\t       def getMessage(){\n+\t\t       \t\thelper.getMessage()\n+\t\t       }\n+\t\t    }    \n+\t\t \"\"\"\n+\t\t\n+\t\tmakeMe = new File(company, \"MakeMe.groovy\")\n+\t\tmakeMe << \"\"\"\n+\t\t    package com.company\n+\t\t    import java.awt.Dimension\n+\t\t    class MakeMe extends MakeMeSuper{\n+\t\t       def modifyWidth(dim, addThis){\n+\t\t          dim.width += addThis\n+\t\t       }\n+\t\t    }    \n+\t\t \"\"\"\n+\t\t \n+\t\t util = new File(company, 'util')\n+\t\t util.mkdir()\n+\t\t \n+\t\t helperIntf = new File(util, \"HelperIntf.groovy\")\n+\t\t helperIntf << \"\"\"\n+\t\t    package com.company.util\n+\t\t    interface HelperIntf{\n+\t\t       public String getMessage();\n+\t\t    }    \n+\t\t \"\"\"\n+\t\t \n+\t\t helper = new File(util, \"Helper.groovy\")\n+\t\t helper << \"\"\"\n+\t\t    package com.company.util\n+\t\t    class Helper implements HelperIntf{\n+\t\t       public String getMessage(){\n+\t\t       \t  'worked'\n+\t\t       }\n+\t\t    }    \n+\t\t \"\"\"\n+\t}\n+\t\n+\tpublic void tearDown(){\n+\t    try{\n+\t    \thelperIntf.delete()\n+\t    \thelper.delete()\n+\t    \tutil.delete()\n+\t    \tmakeMeSuper.delete()\n+\t\t\tmakeMe.delete()\n+ \t\t\tcompany.delete()\n+ \t\t\tcom.delete()\n+ \t\t\tscript.delete()\n+ \t\t\tsrcDir.delete()\n+ \t\t}catch(Exception ex){\n+ \t\t\tthrow new RuntimeException(\"Could not delete entire dynamic tree inside \" + currentDir, ex)\n+ \t\t}\n+\t}\n+\n+\tpublic void testDynamicInstantiation() throws Exception{\n+\t\t//Code run in the script will modify this dimension object.\n+    \tDimension dim = new Dimension();\n+    \t\n+    \tString[] roots = new String[1]\n+    \troots[0] = srcDir.getAbsolutePath()\n+    \tGroovyScriptEngine gse = new GroovyScriptEngine(roots);\n+    \tBinding binding = new Binding();\n+    \tbinding.setVariable(\"dim\", dim);\n+    \tbinding.setVariable(\"dynaInstantiate\", this);\n+    \t\n+    \tbinding.setVariable(\"className\", \"com.company.MakeMe\");\n+    \t\n+    \tint addThis = 3;\n+    \tbinding.setVariable(\"addThis\", addThis);\n+    \t\n+    \tgse.run(\"script.groovy\", binding);\n+    \t\n+    \t//The script instantiated com.company.MakeMe via our own\n+    \t//instantiate method.  The instantiated object modified the\n+    \t//width of our Dimension object, adding the value of our\n+    \t//'addThis' variable to it.\n+    \tassertEquals(new Dimension(addThis,0), dim);\n+    \t\n+    \tassertEquals('worked', binding.getVariable(\"returnedMessage\") )\n+\t}\n+\t\n+\t/*\n+\t * The script passes the className of the class it's supposed to\n+\t * instantiate to this method, expecting a newly instantiated object\n+\t * in return.  The reason this is not done in the script is that\n+\t * we want to ensure that no unforeseen problems occur if \n+\t * the instantiation is not actually done inside the script,\n+\t * since real-world usages will likely require delegating that\n+\t * job.\n+\t */\n+\tpublic Object instantiate(String className, ClassLoader classLoader){\n+\t\tClass clazz = null;\n+\t\ttry {\n+\t\t\tclazz = Class.forName(className, true, classLoader) ;\n+\t\t} catch (ClassNotFoundException e) {\n+\t\t\tthrow new RuntimeException(\"Class.forName failed for  \" + className, ex);\n+\t\t}\n+\t\ttry {\n+\t\t\treturn clazz.newInstance();\n+\t\t} catch (Exception ex) {\n+\t\t\tthrow new RuntimeException(\"Could not instantiate object of class \" + className, ex);\n+\t\t}\t\t\n+\t\t\n+\t}\n+\t\n+\tprivate void locateCurrentDir(){\n+\t\tString bogusFile = \"bogusFile\";\n+\t   \tFile f = new File(bogusFile);\n+\t   \tString path = f.getAbsolutePath();\n+\t   \tpath = path.substring(0, path.length() - bogusFile.length());\n+\t   \tcurrentDir = new File(path);\n+\t}\n+\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/groovy/raw/b18ff1cbdf88c62fe1600104b1852fb7d03f577a/src/test/groovy/util/GroovyScriptEngineTest.groovy",
                "sha": "0b2b25215bb4246df9f3158cf3b7ac06b098be3c",
                "status": "added"
            }
        ],
        "message": "GROOVY-2861: NPE in GroovyScriptEngine\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@13709 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/323fd35e697bc8109f0b23e9153a3ae3ecb61917",
        "patched_files": [
            "GroovyScriptEngine.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "GroovyScriptEngineTest.java"
        ]
    },
    "groovy_b5490dc": {
        "bug_id": "groovy_b5490dc",
        "commit": "https://github.com/apache/groovy/commit/b5490dc68d78fd2401ea4f0d953a4b15ef551575",
        "file": [
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/groovy/blob/b5490dc68d78fd2401ea4f0d953a4b15ef551575/src/test/groovy/util/GroovyScriptEngineTest.groovy",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/util/GroovyScriptEngineTest.groovy?ref=b5490dc68d78fd2401ea4f0d953a4b15ef551575",
                "deletions": 7,
                "filename": "src/test/groovy/util/GroovyScriptEngineTest.groovy",
                "patch": "@@ -3,9 +3,7 @@\n */\n package groovy.util;\n \n-import java.awt.Dimension;\n-\n-class GroovyScriptEngineTest extends GroovyTestCase{\n+class GroovyScriptEngineTest extends GroovyTestCase {\n \n \tprivate File currentDir\n \tprivate File srcDir;\n@@ -54,7 +52,7 @@ class GroovyScriptEngineTest extends GroovyTestCase{\n \t\tmakeMe = new File(company, \"MakeMe.groovy\")\n \t\tmakeMe << \"\"\"\n \t\t    package com.company\n-\t\t    import java.awt.Dimension\n+\n \t\t    class MakeMe extends MakeMeSuper{\n \t\t       def modifyWidth(dim, addThis){\n \t\t          dim.width += addThis\n@@ -100,9 +98,9 @@ class GroovyScriptEngineTest extends GroovyTestCase{\n  \t\t}\n \t}\n \n-\tpublic void testDynamicInstantiation() throws Exception{\n+    public void testDynamicInstantiation() throws Exception{\n \t\t//Code run in the script will modify this dimension object.\n-    \tDimension dim = new Dimension();\n+    \tMyDimension dim = new MyDimension();\n     \t\n     \tString[] roots = new String[1]\n     \troots[0] = srcDir.getAbsolutePath()\n@@ -122,7 +120,7 @@ class GroovyScriptEngineTest extends GroovyTestCase{\n     \t//instantiate method.  The instantiated object modified the\n     \t//width of our Dimension object, adding the value of our\n     \t//'addThis' variable to it.\n-    \tassertEquals(new Dimension(addThis,0), dim);\n+    \tassertEquals(new MyDimension(addThis, 0), dim);\n     \t\n     \tassertEquals('worked', binding.getVariable(\"returnedMessage\") )\n \t}\n@@ -159,4 +157,23 @@ class GroovyScriptEngineTest extends GroovyTestCase{\n \t   \tcurrentDir = new File(path);\n \t}\n \n+}\n+\n+class MyDimension {\n+    int width\n+    int height\n+    \n+    MyDimension(int x, int y) {\n+        width = x\n+        height = y\n+    }\n+\n+    MyDimension() {\n+        width = 0\n+        height = 0\n+    }\n+\n+    boolean equals(o) { o.width == width && o.height == height }\n+\n+    int hashCode() { width + 13 * height }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/groovy/raw/b5490dc68d78fd2401ea4f0d953a4b15ef551575/src/test/groovy/util/GroovyScriptEngineTest.groovy",
                "sha": "2d94c0ffe8f41be72fe291e64b57e425be44de31",
                "status": "modified"
            }
        ],
        "message": "GROOVY-2861: NPE in GroovyScriptEngine (removed the usage of java.awt.Dimension from the original patch)\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@13711 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/b18ff1cbdf88c62fe1600104b1852fb7d03f577a",
        "patched_files": [
            "GroovyScriptEngine.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "GroovyScriptEngineTest.java"
        ]
    },
    "groovy_b7de4ac": {
        "bug_id": "groovy_b7de4ac",
        "commit": "https://github.com/apache/groovy/commit/b7de4ac80c9e13ba239b7b0dd0746cff8f8b3d3a",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/groovy/blob/b7de4ac80c9e13ba239b7b0dd0746cff8f8b3d3a/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java?ref=b7de4ac80c9e13ba239b7b0dd0746cff8f8b3d3a",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "patch": "@@ -2064,6 +2064,12 @@ public void visitMethodCallExpression(MethodCallExpression call) {\n                     mn = disambiguateMethods(mn, call);\n                     if (mn.size() == 1) {\n                         MethodNode directMethodCallCandidate = mn.get(0);\n+                        if (chosenReceiver==null) {\n+                            chosenReceiver = Receiver.make(directMethodCallCandidate.getDeclaringClass());\n+                            if (chosenReceiver==null) {\n+                                chosenReceiver = owners.get(0);\n+                            }\n+                        }\n                         // visit the method to obtain inferred return type\n                         typeCheckingContext.pushEnclosingClassNode(directMethodCallCandidate.getDeclaringClass());\n                         for (ClassNode node : typeCheckingContext.source.getAST().getClasses()) {",
                "raw_url": "https://github.com/apache/groovy/raw/b7de4ac80c9e13ba239b7b0dd0746cff8f8b3d3a/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "sha": "29da42f2b16b6cab40d2ea66250116d2d4c3a4dd",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/groovy/blob/b7de4ac80c9e13ba239b7b0dd0746cff8f8b3d3a/src/test-resources/groovy/transform/stc/Groovy6047Extension.groovy",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test-resources/groovy/transform/stc/Groovy6047Extension.groovy?ref=b7de4ac80c9e13ba239b7b0dd0746cff8f8b3d3a",
                "deletions": 0,
                "filename": "src/test-resources/groovy/transform/stc/Groovy6047Extension.groovy",
                "patch": "@@ -0,0 +1,6 @@\n+// Used to check that GROOVY-6047 no longer throws an NPE\n+methodNotFound { receiver, name, argumentList, argTypes, call ->\n+    if (name=='elems') {\n+        typeCheckingVisitor.findMethodsWithGenerated(receiver, 'elements')\n+    }\n+}",
                "raw_url": "https://github.com/apache/groovy/raw/b7de4ac80c9e13ba239b7b0dd0746cff8f8b3d3a/src/test-resources/groovy/transform/stc/Groovy6047Extension.groovy",
                "sha": "678d8e483f706885329f61b80cd8a627ebfd3b33",
                "status": "added"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/groovy/blob/b7de4ac80c9e13ba239b7b0dd0746cff8f8b3d3a/src/test/groovy/transform/stc/TypeCheckingExtensionsTest.groovy",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/transform/stc/TypeCheckingExtensionsTest.groovy?ref=b7de4ac80c9e13ba239b7b0dd0746cff8f8b3d3a",
                "deletions": 0,
                "filename": "src/test/groovy/transform/stc/TypeCheckingExtensionsTest.groovy",
                "patch": "@@ -438,6 +438,18 @@ class TypeCheckingExtensionsTest extends StaticTypeCheckingTestCase {\n         '''\n     }\n \n+    void testShouldNotThrowNPE_Groovy6047() {\n+        extension = 'groovy/transform/stc/Groovy6047Extension.groovy'\n+        try {\n+            assertScript '''\n+                def b = new Vector()\n+                b.elems()\n+            '''\n+        } catch (MissingMethodException e) {\n+            // it's ok\n+        }\n+    }\n+\n     void testAmbiguousMethodCall() {\n         extension = null\n         shouldFailWithMessages '''",
                "raw_url": "https://github.com/apache/groovy/raw/b7de4ac80c9e13ba239b7b0dd0746cff8f8b3d3a/src/test/groovy/transform/stc/TypeCheckingExtensionsTest.groovy",
                "sha": "b6f72fa94d078603780b50c2f2c5612b2f65289f",
                "status": "modified"
            }
        ],
        "message": "GROOVY-6047: NPE in type checker using an extension",
        "parent": "https://github.com/apache/groovy/commit/f15a42578aba3a5502591aa41c61474060d9a23c",
        "patched_files": [
            "Groovy6047Extension.java",
            "StaticTypeCheckingVisitor.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "TypeCheckingExtensionsTest.java"
        ]
    },
    "groovy_ba04856": {
        "bug_id": "groovy_ba04856",
        "commit": "https://github.com/apache/groovy/commit/ba048562af858ffc03aeb2f589c8970325594b3f",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/ba048562af858ffc03aeb2f589c8970325594b3f/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java?ref=ba048562af858ffc03aeb2f589c8970325594b3f",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "patch": "@@ -3093,8 +3093,12 @@ protected ClassNode inferReturnTypeGenerics(final ClassNode receiver, final Meth\n             if (firstGenericsType.isWildcard()) {\n                 // ? extends Foo\n                 // ? super Foo\n+                // ?\n                 if (firstGenericsType.getLowerBound() != null) return firstGenericsType.getLowerBound();\n                 ClassNode[] upperBounds = firstGenericsType.getUpperBounds();\n+                if (upperBounds==null) { // case \"?\"\n+                    return OBJECT_TYPE;\n+                }\n                 if (upperBounds.length == 1) return upperBounds[0];\n                 return new UnionTypeClassNode(upperBounds);\n             }",
                "raw_url": "https://github.com/apache/groovy/raw/ba048562af858ffc03aeb2f589c8970325594b3f/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "sha": "31cff6917a1b5601244ca4d87449fcb1ebbede4c",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/groovy/blob/ba048562af858ffc03aeb2f589c8970325594b3f/src/test/groovy/transform/stc/GenericsSTCTest.groovy",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/transform/stc/GenericsSTCTest.groovy?ref=ba048562af858ffc03aeb2f589c8970325594b3f",
                "deletions": 0,
                "filename": "src/test/groovy/transform/stc/GenericsSTCTest.groovy",
                "patch": "@@ -1056,6 +1056,13 @@ class GenericsSTCTest extends StaticTypeCheckingTestCase {\n         '''\n     }\n \n+    void testReturnTypeInferenceWithMethodUsingWildcard() {\n+        assertScript '''\n+            public Object createInstance(Class<?> projectComponentClass, String foo) { projectComponentClass.newInstance() }\n+            createInstance(LinkedList, 'a')\n+        '''\n+    }\n+\n     static class MyList extends LinkedList<String> {}\n \n     public static class ClassA<T> {",
                "raw_url": "https://github.com/apache/groovy/raw/ba048562af858ffc03aeb2f589c8970325594b3f/src/test/groovy/transform/stc/GenericsSTCTest.groovy",
                "sha": "dab00db3e28baddb9cbc703b30449aee951d9e67",
                "status": "modified"
            }
        ],
        "message": "GROOVY-5943: Fix NPE when a method uses a wildcard generic",
        "parent": "https://github.com/apache/groovy/commit/fec648c6df307b78f1d525f142deb0047e77481c",
        "patched_files": [
            "StaticTypeCheckingVisitor.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "GenericsSTCTest.java"
        ]
    },
    "groovy_baba6df": {
        "bug_id": "groovy_baba6df",
        "commit": "https://github.com/apache/groovy/commit/baba6dfdf46f3d8d7025ff319a875d4bcbdce80f",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/baba6dfdf46f3d8d7025ff319a875d4bcbdce80f/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java?ref=baba6dfdf46f3d8d7025ff319a875d4bcbdce80f",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "patch": "@@ -2365,7 +2365,10 @@ private void inferSAMType(Parameter param, ClassNode receiver, MethodNode method\n         ClassNode[] blockParameterTypes = (ClassNode[]) openBlock.getNodeMetaData(StaticTypesMarker.CLOSURE_ARGUMENTS);\n         if (blockParameterTypes==null) {\n             Parameter[] p = openBlock.getParameters();\n-            if (p.length==0 && parameterTypesForSAM.length!=0) {\n+            if (p == null) {\n+                // zero parameter closure e.g. { -> println 'no args' }\n+                blockParameterTypes = ClassNode.EMPTY_ARRAY;\n+            } else if (p.length==0 && parameterTypesForSAM.length!=0) {\n                 // implicit it\n                 blockParameterTypes = parameterTypesForSAM;\n             } else {",
                "raw_url": "https://github.com/apache/groovy/raw/baba6dfdf46f3d8d7025ff319a875d4bcbdce80f/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "sha": "c09e12b78aa73dc90d67aad4fe51edef3a126356",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/groovy/blob/baba6dfdf46f3d8d7025ff319a875d4bcbdce80f/src/test/groovy/transform/stc/ClosuresSTCTest.groovy",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/transform/stc/ClosuresSTCTest.groovy?ref=baba6dfdf46f3d8d7025ff319a875d4bcbdce80f",
                "deletions": 0,
                "filename": "src/test/groovy/transform/stc/ClosuresSTCTest.groovy",
                "patch": "@@ -500,5 +500,19 @@ class ClosuresSTCTest extends StaticTypeCheckingTestCase {\n             A.doSomething()\n         '''\n     }\n+\n+    void testParameterlessClosureToSAMTypeArgumentCoercion() {\n+        assertScript '''\n+            interface SamType {\n+                int sam()\n+            }\n+\n+            int foo(SamType samt) {\n+                samt.sam()\n+            }\n+\n+            assert foo { -> 1 }  == 1\n+        '''\n+    }\n }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/baba6dfdf46f3d8d7025ff319a875d4bcbdce80f/src/test/groovy/transform/stc/ClosuresSTCTest.groovy",
                "sha": "1eaeca878f6a7d466e85710190324c40b83e4809",
                "status": "modified"
            }
        ],
        "message": "GROOVY-7618 Parameterless closure to SAM Type argument coercion causes NPE during instruction selection (STC)\n\nCloses #135",
        "parent": "https://github.com/apache/groovy/commit/50e422b845493567b1be30ef61e99cd6104ec333",
        "patched_files": [
            "StaticTypeCheckingVisitor.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "ClosuresSTCTest.java"
        ]
    },
    "groovy_bb3b33e": {
        "bug_id": "groovy_bb3b33e",
        "commit": "https://github.com/apache/groovy/commit/bb3b33ece93355931dc9c5db9fe47c3e1071a3b2",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/bb3b33ece93355931dc9c5db9fe47c3e1071a3b2/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethodsSupport.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethodsSupport.java?ref=bb3b33ece93355931dc9c5db9fe47c3e1071a3b2",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/runtime/DefaultGroovyMethodsSupport.java",
                "patch": "@@ -260,6 +260,8 @@ protected static boolean sameType(Collection[] cols) {\n         Class baseClass;\n         if (first instanceof Number) {\n             baseClass = Number.class;\n+        } else if (first == null) {\n+            baseClass = NullObject.class;\n         } else {\n             baseClass = first.getClass();\n         }",
                "raw_url": "https://github.com/apache/groovy/raw/bb3b33ece93355931dc9c5db9fe47c3e1071a3b2/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethodsSupport.java",
                "sha": "167e9d1a47c8ef0f445fec23bae41db9f50bc734",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/bb3b33ece93355931dc9c5db9fe47c3e1071a3b2/src/test/groovy/GroovyMethodsTest.groovy",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/GroovyMethodsTest.groovy?ref=bb3b33ece93355931dc9c5db9fe47c3e1071a3b2",
                "deletions": 0,
                "filename": "src/test/groovy/GroovyMethodsTest.groovy",
                "patch": "@@ -690,6 +690,8 @@ class GroovyMethodsTest extends GroovySwingTestCase {\n         // strings remove first - deemed most common behavior for strings\n         assert 'abcda.ce' - /a.c/ == 'abcde'\n         assert 'abcda.ce' - ~/a.c/ == 'da.ce'\n+        // should handle nulls too\n+        assert [null] - [1] == [null]\n     }\n \n     void testListDerivativesAreRetainedWithCommonOperators() {",
                "raw_url": "https://github.com/apache/groovy/raw/bb3b33ece93355931dc9c5db9fe47c3e1071a3b2/src/test/groovy/GroovyMethodsTest.groovy",
                "sha": "7ea20821af197a077837e63a489b3967ea9eacc5",
                "status": "modified"
            }
        ],
        "message": "GROOVY-3039: [null]-[1] leads to java.lang.NullPointerException\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@13606 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/8259b884b178160e5e5313da3f11c1808055ce24",
        "patched_files": [
            "DefaultGroovyMethodsSupport.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "GroovyMethodsTest.java"
        ]
    },
    "groovy_be7e765": {
        "bug_id": "groovy_be7e765",
        "commit": "https://github.com/apache/groovy/commit/be7e76536e8aec62e08a527143fe8a1998dc1dfb",
        "file": [
            {
                "additions": 54,
                "blob_url": "https://github.com/apache/groovy/blob/be7e76536e8aec62e08a527143fe8a1998dc1dfb/src/main/groovy/lang/Closure.java",
                "changes": 75,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/Closure.java?ref=be7e76536e8aec62e08a527143fe8a1998dc1dfb",
                "deletions": 21,
                "filename": "src/main/groovy/lang/Closure.java",
                "patch": "@@ -42,9 +42,9 @@\n  * </pre>\n  * To be able to use a Closure in this way with your own\n  * subclass, you need to provide a doCall method with any\n- * signature you want to. This ensures that \n- * {@link #getMaximumNumberOfParameters()} and \n- * {@link #getParameterTypes()} will work too without any \n+ * signature you want to. This ensures that\n+ * {@link #getMaximumNumberOfParameters()} and\n+ * {@link #getParameterTypes()} will work too without any\n  * additional code. If no doCall method is provided a\n  * closure must be used in its long form like\n  * <pre>\n@@ -209,7 +209,7 @@ public Object doCall(Object args) {\n             return args;\n         }\n     };\n-    \n+\n     private Object delegate;\n     private Object owner;\n     private Object thisObject;\n@@ -258,7 +258,7 @@ public void setResolveStrategy(int resolveStrategy) {\n      * Gets the strategy which the closure users to resolve methods and properties\n      *\n      * @return The resolve strategy\n-     * \n+     *\n      * @see groovy.lang.Closure#DELEGATE_FIRST\n      * @see groovy.lang.Closure#DELEGATE_ONLY\n      * @see groovy.lang.Closure#OWNER_FIRST\n@@ -422,7 +422,7 @@ public V call(Object... args) {\n     public V call(final Object arguments) {\n         return call(new Object[]{arguments});\n     }\n-    \n+\n     protected static Object throwRuntimeException(Throwable throwable) {\n         if (throwable instanceof RuntimeException) {\n             throw (RuntimeException) throwable;\n@@ -455,7 +455,7 @@ public Object getDelegate() {\n     public void setDelegate(Object delegate) {\n         this.delegate = delegate;\n     }\n-    \n+\n     /**\n      * @return the parameter types of the longest doCall method\n      * of this closure\n@@ -473,8 +473,8 @@ public int getMaximumNumberOfParameters() {\n     }\n \n     /**\n-     * @return a version of this closure which implements Writable.  Note that \n-     * the returned Writable also overrides {@link #toString()} in order \n+     * @return a version of this closure which implements Writable.  Note that\n+     * the returned Writable also overrides {@link #toString()} in order\n      * to allow rendering the result directly to a String.\n      */\n     public Closure asWritable() {\n@@ -518,7 +518,7 @@ public void run() {\n      * assert e() == 10\n      * assert e(5) == 15\n      * </pre>\n-     * \n+     *\n      *\n      * @param arguments the arguments to bind\n      * @return the new closure with its arguments bound\n@@ -527,6 +527,17 @@ public void run() {\n         return new CurriedClosure<V>(this, arguments);\n     }\n \n+    /**\n+     * Support for Closure currying.\n+     *\n+     * @param argument the argument to bind\n+     * @return the new closure with the argument bound\n+     * @see #curry(Object...)\n+     */\n+    public Closure<V> curry(final Object argument) {\n+        return curry(new Object[]{argument});\n+    }\n+\n     /**\n      * Support for Closure \"right\" currying.\n      * Parameters are supplied on the right rather than left as per the normal curry() method.\n@@ -545,6 +556,17 @@ public void run() {\n         return new CurriedClosure<V>(-arguments.length, this, arguments);\n     }\n \n+    /**\n+     * Support for Closure \"right\" currying.\n+     *\n+     * @param argument the argument to bind\n+     * @return the new closure with the argument bound\n+     * @see #rcurry(Object...)\n+     */\n+    public Closure<V> rcurry(final Object argument) {\n+        return rcurry(new Object[]{argument});\n+    }\n+\n     /**\n      * Support for Closure currying at a given index.\n      * Parameters are supplied from index position \"n\".\n@@ -579,6 +601,17 @@ public void run() {\n         return new CurriedClosure<V>(n, this, arguments);\n     }\n \n+    /**\n+     * Support for Closure currying at a given index.\n+     *\n+     * @param argument the argument to bind\n+     * @return the new closure with the argument bound\n+     * @see #ncurry(int, Object...)\n+     */\n+    public Closure<V> ncurry(int n, final Object argument) {\n+        return ncurry(n, new Object[]{argument});\n+    }\n+\n     /**\n      * Support for Closure forward composition.\n      * <p/>\n@@ -770,7 +803,7 @@ public V leftShift(final Object arg) {\n     public Closure<V> trampoline() {\n         return new TrampolineClosure<V>(this);\n     }\n-    \n+\n     /* (non-Javadoc)\n      * @see java.lang.Object#clone()\n      */\n@@ -781,15 +814,15 @@ public Object clone() {\n             return null;\n         }\n     }\n-    \n+\n     /*\n-     * Implementation note: \n+     * Implementation note:\n      *   This has to be an inner class!\n-     * \n-     * Reason: \n+     *\n+     * Reason:\n      *   Closure.this.call will call the outer call method, but\n      * with the inner class as executing object. This means any\n-     * invokeMethod or getProperty call will be called on this \n+     * invokeMethod or getProperty call will be called on this\n      * inner class instead of the outer!\n      */\n     private class WritableClosure extends Closure implements Writable {\n@@ -848,15 +881,15 @@ public Object call() {\n         public Object call(Object arguments) {\n             return ((Closure) getOwner()).call(arguments);\n         }\n-        \n+\n         public Object call(Object... args) {\n             return ((Closure) getOwner()).call(args);\n         }\n \n         public Object doCall(Object... args) {\n             return call(args);\n         }\n-        \n+\n         /* (non-Javadoc)\n          * @see groovy.lang.Closure#getDelegate()\n          */\n@@ -877,7 +910,7 @@ public void setDelegate(Object delegate) {\n         public Class[] getParameterTypes() {\n             return Closure.this.getParameterTypes();\n         }\n-        \n+\n         /* (non-Javadoc)\n          * @see groovy.lang.Closure#getParameterTypes()\n          */\n@@ -934,15 +967,15 @@ public String toString() {\n \n             return writer.toString();\n         }\n-        \n+\n         public Closure curry(final Object... arguments) {\n             return (new CurriedClosure(this, arguments)).asWritable();\n         }\n \n         public void setResolveStrategy(int resolveStrategy) {\n             Closure.this.setResolveStrategy(resolveStrategy);\n         }\n-        \n+\n         public int getResolveStrategy() {\n             return Closure.this.getResolveStrategy();\n         }",
                "raw_url": "https://github.com/apache/groovy/raw/be7e76536e8aec62e08a527143fe8a1998dc1dfb/src/main/groovy/lang/Closure.java",
                "sha": "b182192a98b1a447e3f89ce6d4405b9bf388716c",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/groovy/blob/be7e76536e8aec62e08a527143fe8a1998dc1dfb/src/test/groovy/ClosureCurryTest.groovy",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/ClosureCurryTest.groovy?ref=be7e76536e8aec62e08a527143fe8a1998dc1dfb",
                "deletions": 0,
                "filename": "src/test/groovy/ClosureCurryTest.groovy",
                "patch": "@@ -204,4 +204,23 @@ class ClosureCurryTest extends GroovyTestCase {\n             assert clos(args as Object[]) == expected\n         }\n     }\n+\n+    void testNullVariants() {\n+        assert { x, y -> x ?: y }.curry(null)(null) == null\n+        assert { x, y -> x ?: y }.curry(null)(2) == 2\n+        assert { x, y -> x ?: y }.curry(1)(null) == 1\n+        assert { x, y -> x ?: y }.curry(1)(2) == 1\n+\n+        assert { x, y -> x ?: y }.curry(null, null)() == null\n+        assert { x, y -> x ?: y }.curry(null, 2)() == 2\n+        assert { x, y -> x ?: y }.curry(1, null)() == 1\n+        assert { x, y -> x ?: y }.curry(1, 2)() == 1\n+\n+        assert { x, y -> x ?: y }(null, null) == null\n+        assert { x, y -> x ?: y }(null, 2) == 2\n+        assert { x, y -> x ?: y }(1, null) == 1\n+        assert { x, y -> x ?: y }(1, 2) == 1\n+\n+        assert { x, y -> x ?: y }.curry([null] as Object[])(2) == 2\n+    }\n }",
                "raw_url": "https://github.com/apache/groovy/raw/be7e76536e8aec62e08a527143fe8a1998dc1dfb/src/test/groovy/ClosureCurryTest.groovy",
                "sha": "6b3f3efee4a74cf1f8eec1212497463d8e3e6247",
                "status": "modified"
            }
        ],
        "message": "GROOVY-4954: Currying closure with null as argument fails with NPE",
        "parent": "https://github.com/apache/groovy/commit/8b8a21cf58eaccbeb6eb7627f7991fe4d39bc7e9",
        "patched_files": [
            "Closure.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "ClosureCurryTest.java"
        ]
    },
    "groovy_bedd8b4": {
        "bug_id": "groovy_bedd8b4",
        "commit": "https://github.com/apache/groovy/commit/bedd8b4f9f94e01d146f9126788f2e87fded164a",
        "file": [
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/groovy/blob/bedd8b4f9f94e01d146f9126788f2e87fded164a/src/main/org/codehaus/groovy/util/HashCodeHelper.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/util/HashCodeHelper.java?ref=bedd8b4f9f94e01d146f9126788f2e87fded164a",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/util/HashCodeHelper.java",
                "patch": "@@ -41,22 +41,42 @@ public static int updateHash(int current, char var) {\n         return shift(current) + (int) var;\r\n     }\r\n \r\n+    public static int updateHash(int current, Character var) {\r\n+        return updateHash(current, var == null ? 0 : var.charValue());\r\n+    }\r\n+\r\n     public static int updateHash(int current, int var) {\r\n         return shift(current) + var;\r\n     }\r\n \r\n+    public static int updateHash(int current, Integer var) {\r\n+        return updateHash(current, var == null ? 0 : var.intValue());\r\n+    }\r\n+\r\n     public static int updateHash(int current, long var) {\r\n         return shift(current) + (int) (var ^ (var >>> 32));\r\n     }\r\n \r\n+    public static int updateHash(int current, Long var) {\r\n+        return updateHash(current, var == null ? 0L : var.longValue());\r\n+    }\r\n+\r\n     public static int updateHash(int current, float var) {\r\n         return updateHash(current, Float.floatToIntBits(var));\r\n     }\r\n \r\n+    public static int updateHash(int current, Float var) {\r\n+        return updateHash(current, var == null ? 0f : var.floatValue());\r\n+    }\r\n+\r\n     public static int updateHash(int current, double var) {\r\n         return updateHash(current, Double.doubleToLongBits(var));\r\n     }\r\n \r\n+    public static int updateHash(int current, Double var) {\r\n+        return updateHash(current, var == null ? 0d : var.doubleValue());\r\n+    }\r\n+\r\n     public static int updateHash(int current, Object var) {\r\n         if (var == null) return updateHash(current, 0);\r\n         if (var.getClass().isArray())\r",
                "raw_url": "https://github.com/apache/groovy/raw/bedd8b4f9f94e01d146f9126788f2e87fded164a/src/main/org/codehaus/groovy/util/HashCodeHelper.java",
                "sha": "9e7afc9aca02ad9f3e34e76d9fdf715e0d3baa39",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/groovy/blob/bedd8b4f9f94e01d146f9126788f2e87fded164a/src/test/org/codehaus/groovy/transform/CanonicalComponentsTransformTest.groovy",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/transform/CanonicalComponentsTransformTest.groovy?ref=bedd8b4f9f94e01d146f9126788f2e87fded164a",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/transform/CanonicalComponentsTransformTest.groovy",
                "patch": "@@ -42,6 +42,24 @@ class CanonicalComponentsTransformTest extends GroovyShellTestCase {\n         \"\"\"\r\n     }\r\n \r\n+    void testHashCodeNullWrapperTypeCompileStatic_GROOVY7518() {\r\n+        assertScript \"\"\"\r\n+            import groovy.transform.*\r\n+\r\n+            @EqualsAndHashCode\r\n+            @CompileStatic\r\n+            class Person {\r\n+                Character someCharacter\r\n+                Integer someInteger\r\n+                Long someLong\r\n+                Float someFloat\r\n+                Double someDouble\r\n+            }\r\n+\r\n+            assert new Person().hashCode()\r\n+        \"\"\"\r\n+    }\r\n+\r\n     void testBooleanPropertyGROOVY6407() {\r\n         assertScript \"\"\"\r\n             @groovy.transform.EqualsAndHashCode\r",
                "raw_url": "https://github.com/apache/groovy/raw/bedd8b4f9f94e01d146f9126788f2e87fded164a/src/test/org/codehaus/groovy/transform/CanonicalComponentsTransformTest.groovy",
                "sha": "57943796ecbb0a62def8487ce94072f1c67172f4",
                "status": "modified"
            }
        ],
        "message": "GROOVY-7518: hashCode() throws NPE when using @CompileStatic with @EqualsAndHashCode (closes #70)",
        "parent": "https://github.com/apache/groovy/commit/6eb4466c28823b6a2dad8bddfbc183be10615feb",
        "patched_files": [
            "HashCodeHelper.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "CanonicalComponentsTransformTest.java"
        ]
    },
    "groovy_befa786": {
        "bug_id": "groovy_befa786",
        "commit": "https://github.com/apache/groovy/commit/befa7863c985ed24a72c9f69ce42d529616be3ec",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/befa7863c985ed24a72c9f69ce42d529616be3ec/src/main/org/codehaus/groovy/ast/ClassNode.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/ast/ClassNode.java?ref=befa7863c985ed24a72c9f69ce42d529616be3ec",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/ast/ClassNode.java",
                "patch": "@@ -327,6 +327,7 @@ public List getAbstractMethods() {\n         // No need to be extra carefull here for that.\n         ClassNode parent = this.redirect();\n         do {\n+        \tabstractNodes.add(parent);\n             ClassNode[] interfaces = parent.getInterfaces();\n             for (int i = 0; i < interfaces.length; i++) {\n                 abstractNodes.add(interfaces[i].redirect());",
                "raw_url": "https://github.com/apache/groovy/raw/befa7863c985ed24a72c9f69ce42d529616be3ec/src/main/org/codehaus/groovy/ast/ClassNode.java",
                "sha": "d3debbb4ff99576cd57ddcaa2a4c1ba73525632e",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/groovy/blob/befa7863c985ed24a72c9f69ce42d529616be3ec/src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java?ref=befa7863c985ed24a72c9f69ce42d529616be3ec",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java",
                "patch": "@@ -295,7 +295,6 @@ public AsmClassGenerator(\n     }\n     \n     protected SourceUnit getSourceUnit() {\n-        // TODO Auto-generated method stub\n         return null;\n     }\n \n@@ -3050,6 +3049,12 @@ protected ClassNode getExpressionType(Expression expression) {\n             return ClassHelper.boolean_TYPE;\n         }\n         if (expression instanceof VariableExpression) {\n+        \tif (expression == VariableExpression.THIS_EXPRESSION) {\n+        \t\treturn classNode;\n+        \t}else  if (expression==VariableExpression.SUPER_EXPRESSION) {\n+        \t\treturn classNode.getSuperClass();\n+        \t}\n+        \t\n             VariableExpression varExpr = (VariableExpression) expression;\n             Variable variable = compileStack.getVariable(varExpr.getName(),false);\n             if (variable != null && !variable.isHolder()) {",
                "raw_url": "https://github.com/apache/groovy/raw/befa7863c985ed24a72c9f69ce42d529616be3ec/src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java",
                "sha": "7ed3eb20f93b2df26af759cc9ecf457f351701e6",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/befa7863c985ed24a72c9f69ce42d529616be3ec/src/main/org/codehaus/groovy/classgen/Variable.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/classgen/Variable.java?ref=befa7863c985ed24a72c9f69ce42d529616be3ec",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/classgen/Variable.java",
                "patch": "@@ -74,7 +74,7 @@\n     private boolean dynamicTyped;\n \n     private Variable(){\n-        dynamicTyped = false;\n+        dynamicTyped = true;\n         index=0;\n         holder=false;\n         property=false;",
                "raw_url": "https://github.com/apache/groovy/raw/befa7863c985ed24a72c9f69ce42d529616be3ec/src/main/org/codehaus/groovy/classgen/Variable.java",
                "sha": "659d55d44318d676722e27a932fab64a64590d12",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/groovy/blob/befa7863c985ed24a72c9f69ce42d529616be3ec/src/test/groovy/AbstractClassAndInterfaceTest.groovy",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/AbstractClassAndInterfaceTest.groovy?ref=befa7863c985ed24a72c9f69ce42d529616be3ec",
                "deletions": 23,
                "filename": "src/test/groovy/AbstractClassAndInterfaceTest.groovy",
                "patch": "@@ -1,6 +1,18 @@\n+import org.codehaus.groovy.control.CompilationFailedException\n \n class AbstractClassAndInterfaceTest extends GroovyTestCase {\n \n+\tdef shouldNotCompile(String script) {\n+\t  try {\n+        GroovyShell shell = new GroovyShell()\n+        shell.parse(script, getTestClassName())\n+      } catch (CompilationFailedException cfe) {\n+        assert true\n+        return\n+      }\n+      fail(\"the compilation succeeded but should have failed\")\n+\t}\n+\n \tvoid testInterface() {\n     \tdef shell = new GroovyShell()\n         def text = \"\"\"\n@@ -26,8 +38,7 @@ class AbstractClassAndInterfaceTest extends GroovyTestCase {\n \t}\n \t\n \tvoid testClassImplementingAnInterfaceButMissesMethod() {\n-    \tdef shell = new GroovyShell()\n-        def text = \"\"\"\n+        shouldNotCompile \"\"\"\n         \tinterface A {\n \t\t\t\tvoid methodOne(Object o)\n \t\t\t\tObject methodTwo()\n@@ -40,10 +51,8 @@ class AbstractClassAndInterfaceTest extends GroovyTestCase {\n \t\t\tdef b = new B();\n \t\t\treturn b.methodTwo()\n \t\t\t\"\"\"\n-\t\tshouldFail {\n-\t\t\tshell.evaluate(text)\n-\t\t}\n-\t\ttext = \"\"\"\n+\t\t\n+\t\tshouldNotCompile \"\"\"\n \t\t\tinterface A {\n \t\t\t\tObject methodTwo()\n \t\t    }\n@@ -58,9 +67,6 @@ class AbstractClassAndInterfaceTest extends GroovyTestCase {\n \t\t\tdef b = new C();\n \t\t\treturn b.methodTwo()\n \t\t\t\"\"\"\n-\t\tshouldFail {\n-\t\t\tshell.evaluate(text)\n-\t\t}\t\t\t\n \t}\n \t\n \tvoid testAbstractClass() {\n@@ -87,8 +93,7 @@ class AbstractClassAndInterfaceTest extends GroovyTestCase {\n \t}\t\n \t\n \tvoid testClassExtendingAnAbstractClassButMissesMethod() {\n-    \tdef shell = new GroovyShell()\n-        def text = \"\"\"\n+        shouldNotCompile \"\"\"\n         \tabstract class A {\n \t\t\t\tabstract void methodOne(Object o)\n \t\t\t\tObject methodTwo(){\n@@ -107,12 +112,9 @@ class AbstractClassAndInterfaceTest extends GroovyTestCase {\n \t\t\t\n \t\t\tdef b = new C();\n \t\t\treturn b.methodTwo()\n-\t\t\t\"\"\"\n-\t\tshouldFail {\n-\t\t\tshell.evaluate(text)\n-\t\t}\t\t\t\n+\t\t\t\"\"\"\t\n \t\t\n-        text = \"\"\"\n+       shouldNotCompile \"\"\"\n         \tabstract class A {\n \t\t\t\tabstract void methodOne(Object o)\n \t\t\t\tObject methodTwo(){\n@@ -130,9 +132,6 @@ class AbstractClassAndInterfaceTest extends GroovyTestCase {\n \t\t\tdef b = new B();\n \t\t\treturn b.methodTwo()\n \t\t\t\"\"\"\n-\t\tshouldFail {\n-\t\t\tshell.evaluate(text)\n-\t\t}\n \t}\n \t\n \tvoid testInterfaceAbstractClassCombination() {\n@@ -157,7 +156,7 @@ class AbstractClassAndInterfaceTest extends GroovyTestCase {\n \t\t\t\"\"\"\n \t\tshell.evaluate(text)\n \t\t\n-\t\ttext = \"\"\"\n+\t\tshouldNotCompile \"\"\"\n \t\t\tinterface A {\n \t\t\t\tvoid methodOne()\n \t\t\t}\n@@ -170,9 +169,6 @@ class AbstractClassAndInterfaceTest extends GroovyTestCase {\n \t\t\tdef c = new c()\n \t\t\tc.methodTwo()\n \t\t\t\"\"\"\n-\t\tshouldFail {\n-\t\t\tshell.evaluate(text)\n-\t\t}\t\n \t}\n \t\n \tvoid testDefaultModifiersForInterfaces() {",
                "raw_url": "https://github.com/apache/groovy/raw/befa7863c985ed24a72c9f69ce42d529616be3ec/src/test/groovy/AbstractClassAndInterfaceTest.groovy",
                "sha": "878cba837a487d4bd966d1569e80ea0a47a71e7b",
                "status": "modified"
            }
        ],
        "message": "fix for NPE and abstract class test\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@3693 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/740d1bc8ee263386d9ea2e53f728997d8ddb2157",
        "patched_files": [
            "AsmClassGenerator.java",
            "ClassNode.java",
            "Variable.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "AbstractClassAndInterfaceTest.java",
            "ClassNodeTest.java"
        ]
    },
    "groovy_c0e79a1": {
        "bug_id": "groovy_c0e79a1",
        "commit": "https://github.com/apache/groovy/commit/c0e79a1d7a26ec995242dd1798030c68ebfa90b5",
        "file": [
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/groovy/blob/c0e79a1d7a26ec995242dd1798030c68ebfa90b5/src/test/groovy/xml/MarkupBuilderTest.groovy",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/xml/MarkupBuilderTest.groovy?ref=c0e79a1d7a26ec995242dd1798030c68ebfa90b5",
                "deletions": 22,
                "filename": "src/test/groovy/xml/MarkupBuilderTest.groovy",
                "patch": "@@ -47,12 +47,12 @@ class MarkupBuilderTest extends GroovyTestCase {\n             elem2('hello2')\n             elem3(x:7)\n         }\n-        assertExpectedXml('''\\\n+        assertExpectedXml '''\\\n <root1 a='5' b='7'>\n   <elem1>hello1</elem1>\n   <elem2>hello2</elem2>\n   <elem3 x='7' />\n-</root1>''')\n+</root1>'''\n     }\n \n     // It is not recommended practice to use the value attribute\n@@ -85,7 +85,7 @@ class MarkupBuilderTest extends GroovyTestCase {\n                 elem2(d:4)\n             }\n         }\n-        assertExpectedXml('''\\\n+        assertExpectedXml '''\\\n <root1 a='5' b='7'>hello1<elem1 c='4'>hello2<elem2 d='4'>hello3</elem2>\n </elem1>\n <elem1 c='4'>hello2<elem2>hello3</elem2>\n@@ -103,7 +103,7 @@ class MarkupBuilderTest extends GroovyTestCase {\n <elem1>hello2<elem2 d='4'>hello3</elem2>\n <elem2 d='4' />\n </elem1>\n-</root1>''')\n+</root1>'''\n     }\n \n     void testTree() {\n@@ -119,7 +119,7 @@ class MarkupBuilderTest extends GroovyTestCase {\n                 child2(\"hello\")\n             }\n         }\n-        assertExpectedXml('''\\\n+        assertExpectedXml '''\\\n <root2 a='5' b='7'>\n   <elem1>hello1</elem1>\n   <elem2>hello2</elem2>\n@@ -131,12 +131,12 @@ class MarkupBuilderTest extends GroovyTestCase {\n     <child z='def' />\n     <child2>hello</child2>\n   </nestedElem2>\n-</root2>''')\n+</root2>'''\n     }\n \n     void testContentAndDataInMarkup() {\n         xml.a(href:\"http://groovy.codehaus.org\", \"groovy\")\n-        assertExpectedXml(\"<a href='http://groovy.codehaus.org'>groovy</a>\")\n+        assertExpectedXml \"<a href='http://groovy.codehaus.org'>groovy</a>\"\n     }\n \n     void testMarkupWithColonsAndNamespaces() {\n@@ -155,7 +155,7 @@ class MarkupBuilderTest extends GroovyTestCase {\n                 \"initial-letters\"(\"A.J.\")\n             }\n         }\n-        assertEquals(expectedXml, fixEOLs(writer.toString()))\n+        assertEquals expectedXml, fixEOLs(writer.toString())\n     }\n \n     /**\n@@ -202,7 +202,7 @@ class MarkupBuilderTest extends GroovyTestCase {\n             }\n         }\n \n-        assertEquals(expectedXml, fixEOLs(writer.toString()))\n+        assertEquals expectedXml, fixEOLs(writer.toString())\n     }\n \n     /**\n@@ -232,7 +232,7 @@ class MarkupBuilderTest extends GroovyTestCase {\n             emptyElement()\n         }\n \n-        assertEquals(expectedXml, fixEOLs(writer.toString()))\n+        assertEquals expectedXml, fixEOLs(writer.toString())\n     }\n \n     /**\n@@ -249,13 +249,13 @@ require escaping. The other characters consist of:\n     * & - ampersand\n ''')\n \n-        assertExpectedXml('''\\\n+        assertExpectedXml '''\\\n <element>This is multi-line content with characters, such as &lt;, that\n require escaping. The other characters consist of:\n \n     * &gt; - greater than\n     * &amp; - ampersand\n-</element>''')\n+</element>'''\n     }\n \n     /**\n@@ -276,7 +276,7 @@ require escaping. The other characters consist of:\n             }\n         }\n \n-        assertExpectedXml('''\\\n+        assertExpectedXml '''\\\n <ELEM1>\n   <ELEM2 type='2' id='first'>\n     <ELEM3A id='first' />\n@@ -290,7 +290,7 @@ require escaping. The other characters consist of:\n     <ELEM3A id='third' />\n     <ELEM3B type='3'>text</ELEM3B>\n   </ELEM2>\n-</ELEM1>''')\n+</ELEM1>'''\n     }\n \n     void testMixedMarkup() {\n@@ -301,8 +301,8 @@ require escaping. The other characters consist of:\n             mkp.yieldUnescaped ' Spades &amp; Clubs'\n         }\n \n-        assertExpectedXml('''\\\n-<p><em>Usually</em> Hearts &amp; Diamonds <b>beats</b> Spades &amp; Clubs </p>''')\n+        assertExpectedXml '''\\\n+<p><em>Usually</em> Hearts &amp; Diamonds <b>beats</b> Spades &amp; Clubs </p>'''\n     }\n \n     void testCallingMethod() {\n@@ -312,31 +312,31 @@ require escaping. The other characters consist of:\n          em(aValue)\n       }\n \n-      assertExpectedXml('<p><em>call to outside</em></p>')\n+      assertExpectedXml '<p><em>call to outside</em></p>'\n     }\n \n     void testOmitAttributeSettingsOmitNullKeepEmptyDefaultCase() {\n         xml.element(att1:null, att2:'')\n-        assertExpectedXml(\"<element att2='' />\")\n+        assertExpectedXml \"<element att2='' />\"\n     }\n \n     void testOmitAttributeSettingsKeepBoth() {\n         xml.omitNullAttributes = false\n         xml.element(att1:null, att2:'')\n-        assertExpectedXml(\"<element att1='' att2='' />\")\n+        assertExpectedXml \"<element att1='' att2='' />\"\n     }\n \n     void testOmitAttributeSettingsKeepNullOmitEmpty() {\n         xml.omitNullAttributes = false\n         xml.omitEmptyAttributes = true\n         xml.element(att1:null, att2:'')\n-        assertExpectedXml(\"<element att1='' />\")\n+        assertExpectedXml \"<element att1='' />\"\n     }\n \n-    void testOmitAttributeSettingsKeepNeither() {\n+    void testOmitAttributeSettingsOmitBoth() {\n         xml.omitEmptyAttributes = true\n         xml.element(att1:null, att2:'')\n-        assertExpectedXml(\"<element />\")\n+        assertExpectedXml \"<element />\"\n     }\n \n     private myMethod(x) {",
                "raw_url": "https://github.com/apache/groovy/raw/c0e79a1d7a26ec995242dd1798030c68ebfa90b5/src/test/groovy/xml/MarkupBuilderTest.groovy",
                "sha": "ffcfb6019c0450af835e13aa245c4b00fc236be2",
                "status": "modified"
            }
        ],
        "message": "GROOVY-1684: MarkupBuilder throws NPE if element content or attribute values are null (minor refactoring)\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@10368 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/22374defd137d3deeef9f88afe15480590f26939",
        "patched_files": [
            "MarkupBuilder.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "MarkupBuilderTest.java"
        ]
    },
    "groovy_c13994e": {
        "bug_id": "groovy_c13994e",
        "commit": "https://github.com/apache/groovy/commit/c13994ea07956717a1f3c8b2def273896c5430c4",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/c13994ea07956717a1f3c8b2def273896c5430c4/src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java?ref=c13994ea07956717a1f3c8b2def273896c5430c4",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java",
                "patch": "@@ -51,7 +51,7 @@ public void visitClass(ClassNode node) {\n         currentClass = node;\n         \n         checkImplementsAndExtends(node);\n-        if (!getSourceUnit().getErrorCollector().hasErrors()) {\n+        if (source!=null && !source.getErrorCollector().hasErrors()) {\n             checkClassForOverwritingFinal(node);\n             checkMethodsForOverwritingFinal(node);\n             checkNoAbstractMethodsNonabstractClass(node);",
                "raw_url": "https://github.com/apache/groovy/raw/c13994ea07956717a1f3c8b2def273896c5430c4/src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java",
                "sha": "4af1af5eb654206d1ac6a9507bb52948172ffda4",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/c13994ea07956717a1f3c8b2def273896c5430c4/src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/control/CompilationUnit.java?ref=c13994ea07956717a1f3c8b2def273896c5430c4",
                "deletions": 3,
                "filename": "src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "patch": "@@ -295,8 +295,7 @@ public void addSources(File[] files) {\n     public SourceUnit addSource(File file) {\n         return addSource(new SourceUnit(file, configuration, classLoader, getErrorCollector()));\n     }\n-\n-\n+    \n     /**\n      * Adds a source file to the unit.\n      */\n@@ -357,7 +356,9 @@ public void remove() {\n \n     /**\n      * Adds a ClassNode directly to the unit (ie. without source).\n-     * Used primarily for testing support.\n+     * WARNING: the source is needed for error reporting, using\n+     *          this method without setting a SourceUnit will cause\n+     *          NullPinterExceptions\n      */\n     public void addClassNode(ClassNode node) {\n         ModuleNode module = new ModuleNode(this.ast);",
                "raw_url": "https://github.com/apache/groovy/raw/c13994ea07956717a1f3c8b2def273896c5430c4/src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "sha": "a770c0a9ce69455bacc82c5d23a5fee15856cd99",
                "status": "modified"
            }
        ],
        "message": "warning comment for adding ClassNodes without SourceUnit added and test for SourceUnit in ClassCompletionVerifyer added to avoid NPEs in cases without faliures\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@3729 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/8976032fce3bff693f72047a9db2a1e0b9c64321",
        "patched_files": [
            "CompilationUnit.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "CompilationUnitTest.java"
        ]
    },
    "groovy_c1eedf7": {
        "bug_id": "groovy_c1eedf7",
        "commit": "https://github.com/apache/groovy/commit/c1eedf78514e5fdcd62ee4e7995f39ed17d0573e",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/groovy/blob/c1eedf78514e5fdcd62ee4e7995f39ed17d0573e/src/main/org/codehaus/groovy/classgen/asm/StatementWriter.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/classgen/asm/StatementWriter.java?ref=c1eedf78514e5fdcd62ee4e7995f39ed17d0573e",
                "deletions": 5,
                "filename": "src/main/org/codehaus/groovy/classgen/asm/StatementWriter.java",
                "patch": "@@ -580,16 +580,16 @@ public void writeReturn(ReturnStatement statement) {\n \n         Expression expression = statement.getExpression();\n         expression.visit(controller.getAcg());\n-        \n+\n+        operandStack.doGroovyCast(returnType);\n+\n         if (controller.getCompileStack().hasBlockRecorder()) {\n             ClassNode type = operandStack.getTopOperand();\n-            // value is always saved in boxed form, so no need to have a special load routine here\n-            int returnValueIdx = controller.getCompileStack().defineTemporaryVariable(\"returnValue\", type, true);\n+            int returnValueIdx = controller.getCompileStack().defineTemporaryVariable(\"returnValue\", returnType, true);\n             controller.getCompileStack().applyBlockRecorder();\n             operandStack.load(type, returnValueIdx);\n         }\n-        \n-        operandStack.doGroovyCast(returnType); \n+\n         BytecodeHelper.doReturn(mv, returnType);\n         operandStack.remove(1);\n     }",
                "raw_url": "https://github.com/apache/groovy/raw/c1eedf78514e5fdcd62ee4e7995f39ed17d0573e/src/main/org/codehaus/groovy/classgen/asm/StatementWriter.java",
                "sha": "05e8b0990174e1e8d6c1ed6a58f845cf49e2b8b6",
                "status": "modified"
            },
            {
                "additions": 37,
                "blob_url": "https://github.com/apache/groovy/blob/c1eedf78514e5fdcd62ee4e7995f39ed17d0573e/src/test/groovy/lang/SyntheticReturnTest.groovy",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/lang/SyntheticReturnTest.groovy?ref=c1eedf78514e5fdcd62ee4e7995f39ed17d0573e",
                "deletions": 0,
                "filename": "src/test/groovy/lang/SyntheticReturnTest.groovy",
                "patch": "@@ -1,6 +1,43 @@\n package groovy.lang\n \n class SyntheticReturnTest extends GroovyShellTestCase{\n+\n+    // GROOVY-5980\n+    void testImplicitReturnWithFinallyBlockAndCastException() {\n+        assertEquals( 'test', evaluate(\"\"\"\n+              s = ''\n+              int f() {\n+                 try { null } finally { s += 'test' }\n+              }\n+              try { f() } catch (ex) {}\n+              s\n+        \"\"\"))\n+    }\n+\n+    void testImplicitReturnWithFinallyBlockMultipleStmtsAndCastException() {\n+        assertEquals( 'test', evaluate(\"\"\"\n+              i = 0\n+              s = ''\n+              int f() {\n+                 try { def t = 41 + 1; i = t; null } finally { assert i == 42; s += 'test' }\n+              }\n+              try { f() } catch (ex) {}\n+              s\n+        \"\"\"))\n+    }\n+\n+    void testImplicitReturnWithFinallyBlockAndTypeCast() {\n+        assertEquals( '42', evaluate(\"\"\"\n+              s = ''\n+              String f() {\n+                 try { 42 } finally { s += 'test' }\n+              }\n+              def result = f()\n+              assert s == 'test'\n+              result\n+        \"\"\"))\n+    }\n+\n     void testExpt () {\n         assertEquals( 5, evaluate(\"\"\"\n               5",
                "raw_url": "https://github.com/apache/groovy/raw/c1eedf78514e5fdcd62ee4e7995f39ed17d0573e/src/test/groovy/lang/SyntheticReturnTest.groovy",
                "sha": "e1865e9da4d8f24cebf3c57b087177b70f94dd1b",
                "status": "modified"
            }
        ],
        "message": "GROOVY-5980: Finally executes twice on NPE while casting method result",
        "parent": "https://github.com/apache/groovy/commit/21892372f95bde61f3d6a664bd9a9314ff8a5fc6",
        "patched_files": [
            "StatementWriter.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "SyntheticReturnTest.java"
        ]
    },
    "groovy_c3cad56": {
        "bug_id": "groovy_c3cad56",
        "commit": "https://github.com/apache/groovy/commit/c3cad5627d2c25fb17809430a8aaf02c8468aa69",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/groovy/blob/c3cad5627d2c25fb17809430a8aaf02c8468aa69/src/main/org/codehaus/groovy/runtime/ConvertedMap.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/ConvertedMap.java?ref=c3cad5627d2c25fb17809430a8aaf02c8468aa69",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/runtime/ConvertedMap.java",
                "patch": "@@ -40,6 +40,9 @@ public Object invokeCustom(Object proxy, Method method, Object[] args)\n     throws Throwable {\r\n         Map m = (Map) getDelegate();\r\n         Closure cl = (Closure) m.get(method.getName());\r\n+        if(cl == null) {\r\n+            throw new UnsupportedOperationException();\r\n+        }\r\n         return cl.call(args);\r\n     }\r\n     \r",
                "raw_url": "https://github.com/apache/groovy/raw/c3cad5627d2c25fb17809430a8aaf02c8468aa69/src/main/org/codehaus/groovy/runtime/ConvertedMap.java",
                "sha": "17ed3a912fc1d543953c08445b47b4b4315ab8ac",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/groovy/blob/c3cad5627d2c25fb17809430a8aaf02c8468aa69/src/test/groovy/lang/MapOfClosureTest.groovy",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/lang/MapOfClosureTest.groovy?ref=c3cad5627d2c25fb17809430a8aaf02c8468aa69",
                "deletions": 0,
                "filename": "src/test/groovy/lang/MapOfClosureTest.groovy",
                "patch": "@@ -32,6 +32,18 @@ class MapOfClosureTest extends GroovyTestCase {\n         assert outer == 2\r\n     }\r\n \r\n+    void testInterfaceProxyWithoutAllMethods() {\r\n+        def proxy = [ methodOne: { 'some string' } ] as MultiMethodInterface\r\n+        \r\n+        assert proxy instanceof MultiMethodInterface\r\n+        \r\n+        assertEquals 'some string', proxy.methodOne()\r\n+        \r\n+        shouldFail(UnsupportedOperationException) {\r\n+            proxy.methodTwo()\r\n+        }\r\n+    }\r\n+    \r\n     void testObject() {\r\n         def m = [bar: { \"foo\" }]\r\n         def x = m as Object\r\n@@ -93,3 +105,8 @@ class B extends A {\n class C {\r\n     String[] foo(int a, List b, Double[] c) { [\"foo\"] as String[] }\r\n }\r\n+\r\n+interface MultiMethodInterface {\r\n+    String methodOne()\r\n+    String methodTwo()\r\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/groovy/raw/c3cad5627d2c25fb17809430a8aaf02c8468aa69/src/test/groovy/lang/MapOfClosureTest.groovy",
                "sha": "af55935d798a26e7cedf49d1238a9f447d8eff25",
                "status": "modified"
            }
        ],
        "message": "GROOVY-3200 - UnsupportedOperationException is now thrown instead of NullPointerException when calling unimplemented methods on a proxy created from a map\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@14411 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/8cb87d8f15d37ec8cd6a936b0473ae8c98525cdc",
        "patched_files": [
            "ConvertedMap.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "MapOfClosureTest.java"
        ]
    },
    "groovy_c49640e": {
        "bug_id": "groovy_c49640e",
        "commit": "https://github.com/apache/groovy/commit/c49640e76a7ae80bca8d0ed80ce6f4811b989f1f",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/groovy/blob/c49640e76a7ae80bca8d0ed80ce6f4811b989f1f/src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java?ref=c49640e76a7ae80bca8d0ed80ce6f4811b989f1f",
                "deletions": 4,
                "filename": "src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "patch": "@@ -611,10 +611,13 @@ public void visitVariableExpression(VariableExpression vexp) {\n                     if (vexp.getNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER) == null) {\n                         ClassNode owner = (ClassNode) vexp.getNodeMetaData(StaticCompilationMetadataKeys.PROPERTY_OWNER);\n                         if (owner != null) {\n-                            boolean lhsOfEnclosingAssignment = isLHSOfEnclosingAssignment(vexp);\n-                            fieldNode = owner.getField(vexp.getName());\n-                            vexp.setAccessedVariable(fieldNode);\n-                            checkOrMarkPrivateAccess(vexp, fieldNode, lhsOfEnclosingAssignment);\n+                            FieldNode veFieldNode = owner.getField(vexp.getName());\n+                            if (veFieldNode != null) {\n+                                fieldNode = veFieldNode;\n+                                boolean lhsOfEnclosingAssignment = isLHSOfEnclosingAssignment(vexp);\n+                                vexp.setAccessedVariable(fieldNode);\n+                                checkOrMarkPrivateAccess(vexp, fieldNode, lhsOfEnclosingAssignment);\n+                            }\n                         }\n                     }\n                 }",
                "raw_url": "https://github.com/apache/groovy/raw/c49640e76a7ae80bca8d0ed80ce6f4811b989f1f/src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "sha": "96faeb9ca9e6d523bbe2e163d4c8db1beb8c5c39",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/groovy/blob/c49640e76a7ae80bca8d0ed80ce6f4811b989f1f/src/spec/test/typing/TypeCheckingExtensionSpecTest.groovy",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/spec/test/typing/TypeCheckingExtensionSpecTest.groovy?ref=c49640e76a7ae80bca8d0ed80ce6f4811b989f1f",
                "deletions": 0,
                "filename": "src/spec/test/typing/TypeCheckingExtensionSpecTest.groovy",
                "patch": "@@ -587,6 +587,25 @@ new DelegateTest().delegate()\n '''\n     }\n \n+    void testDelegateVariableFromDifferentOwningClass() {\n+        assertScript '''\n+        @groovy.transform.CompileStatic\n+        class A {\n+            static private int MAX_LINES = 2\n+            static class B {\n+                @Delegate\n+                private Map<String, Object> delegate = [:]\n+                void m(int c) {\n+                    if (c > MAX_LINES) {\n+                        return\n+                    }\n+                }\n+            }\n+        }\n+        null\n+        '''\n+    }\n+\n     private static class SpecSupport {\n         static int getLongueur(String self) { self.length() }\n         static int longueur(String self) { self.length() }",
                "raw_url": "https://github.com/apache/groovy/raw/c49640e76a7ae80bca8d0ed80ce6f4811b989f1f/src/spec/test/typing/TypeCheckingExtensionSpecTest.groovy",
                "sha": "cb1e4fa2d7096e5b02f4aa87925227c5978eda48",
                "status": "modified"
            }
        ],
        "message": "Fix NPE if accessed property not a member of the owning class (closes #724)",
        "parent": "https://github.com/apache/groovy/commit/16b98fb059ee642da7062452798bc90f5e30fb26",
        "patched_files": [
            "StaticTypeCheckingVisitor.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "TypeCheckingExtensionSpecTest.java"
        ]
    },
    "groovy_c515f6d": {
        "bug_id": "groovy_c515f6d",
        "commit": "https://github.com/apache/groovy/commit/c515f6d2ae0b174ecf0c7ef06eb7552cf490fc91",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/groovy/blob/c515f6d2ae0b174ecf0c7ef06eb7552cf490fc91/src/main/org/codehaus/groovy/runtime/MetaClassHelper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/MetaClassHelper.java?ref=c515f6d2ae0b174ecf0c7ef06eb7552cf490fc91",
                "deletions": 2,
                "filename": "src/main/org/codehaus/groovy/runtime/MetaClassHelper.java",
                "patch": "@@ -303,8 +303,6 @@ private static long calculateParameterDistance(Class argument, CachedClass param\n             // choose the distance to Object if a parameter is null\n             // this will mean that Object is preferred over a more\n             // specific type\n-            // remove one to dist to be sure Object is preferred\n-            objectDistance--;\n             Class clazz = parameter.getTheClass();\n             if (clazz.isPrimitive()) {\n                 objectDistance += 2;",
                "raw_url": "https://github.com/apache/groovy/raw/c515f6d2ae0b174ecf0c7ef06eb7552cf490fc91/src/main/org/codehaus/groovy/runtime/MetaClassHelper.java",
                "sha": "ca56ec6a1833b085813973d5958d9cde887ada44",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/groovy/blob/c515f6d2ae0b174ecf0c7ef06eb7552cf490fc91/src/test/groovy/bugs/Groovy4029Bug.groovy",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/bugs/Groovy4029Bug.groovy?ref=c515f6d2ae0b174ecf0c7ef06eb7552cf490fc91",
                "deletions": 0,
                "filename": "src/test/groovy/bugs/Groovy4029Bug.groovy",
                "patch": "@@ -0,0 +1,9 @@\n+package groovy.bugs\r\n+\r\n+class Groovy4029Bug extends GroovyTestCase {\r\n+    void testAddNullKeyEntryInMapUsingSubscriptNotation() {\r\n+\t\tMap m = [:]\r\n+\t\tm[null] = null\r\n+\t\tassert m.size() == 1\r\n+    }\r\n+}\r",
                "raw_url": "https://github.com/apache/groovy/raw/c515f6d2ae0b174ecf0c7ef06eb7552cf490fc91/src/test/groovy/bugs/Groovy4029Bug.groovy",
                "sha": "dfe15ec7e0ee086100d7515b4c760a35f1b4dbf2",
                "status": "added"
            }
        ],
        "message": "GROOVY-4029\nPutting a map entry using subscript notation with a null key resulted in NPE. Fixed it.\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@19202 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/c2f1bebfa12aec40261d029fe4061f40048b1b07",
        "patched_files": [
            "MetaClassHelper.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "MetaClassHelperTest.java"
        ]
    },
    "groovy_d1060da": {
        "bug_id": "groovy_d1060da",
        "commit": "https://github.com/apache/groovy/commit/d1060da7a0612b2a820a483ad8fa73f61f3baa2b",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/groovy/blob/d1060da7a0612b2a820a483ad8fa73f61f3baa2b/src/main/org/codehaus/groovy/classgen/Verifier.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/classgen/Verifier.java?ref=d1060da7a0612b2a820a483ad8fa73f61f3baa2b",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/classgen/Verifier.java",
                "patch": "@@ -49,6 +49,7 @@\n \n     public static final String STATIC_METACLASS_BOOL = \"__$stMC\";\n     public static final String SWAP_INIT = \"__$swapInit\";\n+    public static final String INITIAL_EXPRESSION = \"INITIAL_EXPRESSION\";\n \n     public static final String __TIMESTAMP = \"__timeStamp\";\n     public static final String __TIMESTAMP__ = \"__timeStamp__239_neverHappen\";\n@@ -786,7 +787,8 @@ protected void addDefaultParameters(DefaultArgsAction action, MethodNode method)\n         }\n \n         for (Parameter parameter : parameters) {\n-            // remove default expression\n+            // remove default expression and store it as node metadata\n+            parameter.putNodeMetaData(Verifier.INITIAL_EXPRESSION, parameter.getInitialExpression());\n             parameter.setInitialExpression(null);\n         }\n     }",
                "raw_url": "https://github.com/apache/groovy/raw/d1060da7a0612b2a820a483ad8fa73f61f3baa2b/src/main/org/codehaus/groovy/classgen/Verifier.java",
                "sha": "6246e83965035292d5f496d945736cb0c842cc8e",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/d1060da7a0612b2a820a483ad8fa73f61f3baa2b/src/main/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java?ref=d1060da7a0612b2a820a483ad8fa73f61f3baa2b",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java",
                "patch": "@@ -26,6 +26,7 @@\n import org.codehaus.groovy.ast.stmt.ExpressionStatement;\n import org.codehaus.groovy.ast.stmt.ForStatement;\n import org.codehaus.groovy.classgen.AsmClassGenerator;\n+import org.codehaus.groovy.classgen.Verifier;\n import org.codehaus.groovy.classgen.asm.*;\n import org.codehaus.groovy.runtime.InvokerHelper;\n import org.codehaus.groovy.syntax.SyntaxException;\n@@ -259,6 +260,9 @@ protected void loadArguments(List<Expression> argumentList, Parameter[] para) {\n                 Expression initialExpression = (Expression) curParam.getNodeMetaData(StaticTypesMarker.INITIAL_EXPRESSION);\n                 if (initialExpression == null && curParam.hasInitialExpression())\n                     initialExpression = curParam.getInitialExpression();\n+                if (initialExpression == null && curParam.getNodeMetaData(Verifier.INITIAL_EXPRESSION)!=null) {\n+                    initialExpression = (Expression) curParam.getNodeMetaData(Verifier.INITIAL_EXPRESSION);\n+                }\n                 ClassNode curArgType = curArg == null ? null : typeChooser.resolveType(curArg, classNode);\n \n                 if (initialExpression != null && !compatibleArgumentType(curArgType, curParamType)) {",
                "raw_url": "https://github.com/apache/groovy/raw/d1060da7a0612b2a820a483ad8fa73f61f3baa2b/src/main/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java",
                "sha": "c7176b2e1d8920a0b2aee2c0e91c645da848c1fc",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/groovy/blob/d1060da7a0612b2a820a483ad8fa73f61f3baa2b/src/test/org/codehaus/groovy/classgen/asm/sc/BugsStaticCompileTest.groovy",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/classgen/asm/sc/BugsStaticCompileTest.groovy?ref=d1060da7a0612b2a820a483ad8fa73f61f3baa2b",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/classgen/asm/sc/BugsStaticCompileTest.groovy",
                "patch": "@@ -311,5 +311,18 @@ class BugsStaticCompileTest extends BugsSTCTest {\n                 assert list.sort(c) == [1,2,3,4,5]\n             '''\n     }\n+\n+    // GROOVY-5658\n+    void testShouldNotThrowNPEUsingDefaultArgumentValues() {\n+        assertScript '''\n+            boolean event() {\n+                initPlugins()\n+            }\n+            static boolean initPlugins(ignoreBinary = false) { ignoreBinary }\n+            assert event() == false\n+            assert initPlugins(false) == false\n+            assert initPlugins(true) == true\n+        '''\n+    }\n }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/d1060da7a0612b2a820a483ad8fa73f61f3baa2b/src/test/org/codehaus/groovy/classgen/asm/sc/BugsStaticCompileTest.groovy",
                "sha": "fff745815cc4dccb375d900a2dfe43b5d2751ca9",
                "status": "modified"
            }
        ],
        "message": "GROOVY-5658: NPE using @CompileStatic and default parameters",
        "parent": "https://github.com/apache/groovy/commit/4a1a3cdf1b06d57647fcf9cc9c49a512043da7ff",
        "patched_files": [
            "StaticInvocationWriter.java",
            "Verifier.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "BugsStaticCompileTest.java"
        ]
    },
    "groovy_d21d71d": {
        "bug_id": "groovy_d21d71d",
        "commit": "https://github.com/apache/groovy/commit/d21d71d898ec3d3b77521d48f339038ba7e7ce69",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/groovy/blob/d21d71d898ec3d3b77521d48f339038ba7e7ce69/src/main/org/codehaus/groovy/runtime/Invoker.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/Invoker.java?ref=d21d71d898ec3d3b77521d48f339038ba7e7ce69",
                "deletions": 2,
                "filename": "src/main/org/codehaus/groovy/runtime/Invoker.java",
                "patch": "@@ -445,8 +445,9 @@ public String toTypeString(Object[] arguments) {\n \t\t}\n \t    StringBuffer argBuf = new StringBuffer();\n \t    for (int i = 0; i < arguments.length; i++) {\n-\t    \tif (i>0)argBuf.append(\", \");\n-\t\t\targBuf.append(arguments[i].getClass().getName());\n+\t    \tif (i>0)\n+                argBuf.append(\", \");\n+\t\t\targBuf.append(arguments[i] != null ? arguments[i].getClass().getName() : \"null\");\n \t\t}\n \t    return argBuf.toString();\n \t}",
                "raw_url": "https://github.com/apache/groovy/raw/d21d71d898ec3d3b77521d48f339038ba7e7ce69/src/main/org/codehaus/groovy/runtime/Invoker.java",
                "sha": "c5dfbe936390fc4dafce218f59343ab765552796",
                "status": "modified"
            }
        ],
        "message": "Fixed a potential NPE (GROOVY-561)\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@1256 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/87b8129c1ed56c2f57072f8c9de0420c84435ee6",
        "patched_files": [
            "Invoker.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "InvokerTest.java"
        ]
    },
    "groovy_e1ce482": {
        "bug_id": "groovy_e1ce482",
        "commit": "https://github.com/apache/groovy/commit/e1ce4824186f62f5fb05a407da79b8da61bc87a4",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/e1ce4824186f62f5fb05a407da79b8da61bc87a4/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java?ref=e1ce4824186f62f5fb05a407da79b8da61bc87a4",
                "deletions": 4,
                "filename": "src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java",
                "patch": "@@ -15959,7 +15959,7 @@ public static BigInteger toBigInteger(Number self) {\n      * @since 1.0\n      */\n     public static Boolean and(Boolean left, Boolean right) {\n-        return left && Boolean.TRUE.equals(right);\n+        return Boolean.TRUE.equals(left) && Boolean.TRUE.equals(right);\n     }\n \n     /**\n@@ -15971,7 +15971,7 @@ public static Boolean and(Boolean left, Boolean right) {\n      * @since 1.0\n      */\n     public static Boolean or(Boolean left, Boolean right) {\n-        return left || Boolean.TRUE.equals(right);\n+        return Boolean.TRUE.equals(left) || Boolean.TRUE.equals(right);\n     }\n \n     /**\n@@ -15983,7 +15983,7 @@ public static Boolean or(Boolean left, Boolean right) {\n      * @since 1.8.3\n      */\n     public static Boolean implies(Boolean left, Boolean right) {\n-        return !left || Boolean.TRUE.equals(right);\n+        return !Boolean.TRUE.equals(left) || Boolean.TRUE.equals(right);\n     }\n \n     /**\n@@ -15995,7 +15995,7 @@ public static Boolean implies(Boolean left, Boolean right) {\n      * @since 1.0\n      */\n     public static Boolean xor(Boolean left, Boolean right) {\n-        return left ^ Boolean.TRUE.equals(right);\n+        return Boolean.TRUE.equals(left) ^ Boolean.TRUE.equals(right);\n     }\n \n //    public static Boolean negate(Boolean left) {",
                "raw_url": "https://github.com/apache/groovy/raw/e1ce4824186f62f5fb05a407da79b8da61bc87a4/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java",
                "sha": "e06699815134e820653f1f461a0dd486ebcd4db5",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/groovy/blob/e1ce4824186f62f5fb05a407da79b8da61bc87a4/src/test/org/codehaus/groovy/runtime/DefaultGroovyMethodsTest.groovy",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/runtime/DefaultGroovyMethodsTest.groovy?ref=e1ce4824186f62f5fb05a407da79b8da61bc87a4",
                "deletions": 3,
                "filename": "src/test/org/codehaus/groovy/runtime/DefaultGroovyMethodsTest.groovy",
                "patch": "@@ -17,9 +17,6 @@\n  *  under the License.\n  */\n package org.codehaus.groovy.runtime\n-\n-import java.util.*\n-\n /**\n  * Tests for DGM methods\n  */\n@@ -280,34 +277,42 @@ class DefaultGroovyMethodsTest extends GroovyTestCase {\n         assertTrue(DefaultGroovyMethods.or(true, false))\n         assertTrue(DefaultGroovyMethods.or(false, true))\n         assertFalse(DefaultGroovyMethods.or(false, false))\n+        assertFalse(DefaultGroovyMethods.or(null, false))\n         assertFalse(DefaultGroovyMethods.or(false, null))\n         assertTrue(DefaultGroovyMethods.or(true, null))\n+        assertTrue(DefaultGroovyMethods.or(null, true))\n     }\n \n     void testBooleanAnd() {\n         assertTrue(DefaultGroovyMethods.and(true, true))\n         assertFalse(DefaultGroovyMethods.and(true, false))\n         assertFalse(DefaultGroovyMethods.and(false, true))\n         assertFalse(DefaultGroovyMethods.and(false, false))\n+        assertFalse(DefaultGroovyMethods.and(null, false))\n         assertFalse(DefaultGroovyMethods.and(false, null))\n         assertFalse(DefaultGroovyMethods.and(true, null))\n+        assertFalse(DefaultGroovyMethods.and(null, true))\n     }\n \n     void testBooleanXor() {\n         assertFalse(DefaultGroovyMethods.xor(true, true))\n         assertTrue(DefaultGroovyMethods.xor(true, false))\n         assertTrue(DefaultGroovyMethods.xor(false, true))\n         assertFalse(DefaultGroovyMethods.xor(false, false))\n+        assertFalse(DefaultGroovyMethods.xor(null, false))\n         assertFalse(DefaultGroovyMethods.xor(false, null))\n         assertTrue(DefaultGroovyMethods.xor(true, null))\n+        assertTrue(DefaultGroovyMethods.xor(null, true))\n     }\n \n     void testBooleanImplication() {\n         assertTrue(DefaultGroovyMethods.implies(true, true))\n         assertFalse(DefaultGroovyMethods.implies(true, false))\n         assertTrue(DefaultGroovyMethods.implies(false, true))\n         assertTrue(DefaultGroovyMethods.implies(false, false))\n+        assertTrue(DefaultGroovyMethods.implies(null, false))\n         assertTrue(DefaultGroovyMethods.implies(false, null))\n         assertFalse(DefaultGroovyMethods.implies(true, null))\n+        assertTrue(DefaultGroovyMethods.implies(null, true))\n     }\n }",
                "raw_url": "https://github.com/apache/groovy/raw/e1ce4824186f62f5fb05a407da79b8da61bc87a4/src/test/org/codehaus/groovy/runtime/DefaultGroovyMethodsTest.groovy",
                "sha": "045a42d944dbf02cec6d922bae26245a2cbc9400",
                "status": "modified"
            }
        ],
        "message": "Update DefaultGroovyMethods boolean operations (closes #636)\n\n* updated DefaultGroovyMethods.java boolean operations to allow for the\n  left parameter to be null instead of throwing a NullPointerException.\n  I noticed null was considered false for the right parameter, so i\n  followed the same strategy.\n* adding missing tests for boolean operations",
        "parent": "https://github.com/apache/groovy/commit/89227d7267aba11b6280c15827a0c7b3bd836015",
        "patched_files": [
            "DefaultGroovyMethods.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "DefaultGroovyMethodsTest.java"
        ]
    },
    "groovy_e244b60": {
        "bug_id": "groovy_e244b60",
        "commit": "https://github.com/apache/groovy/commit/e244b60c14f2b0e46b0fb847adcf14f6c8d4d5d6",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/e244b60c14f2b0e46b0fb847adcf14f6c8d4d5d6/src/main/groovy/xml/MarkupBuilder.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/xml/MarkupBuilder.java?ref=e244b60c14f2b0e46b0fb847adcf14f6c8d4d5d6",
                "deletions": 2,
                "filename": "src/main/groovy/xml/MarkupBuilder.java",
                "patch": "@@ -38,7 +38,7 @@\n     private int state;\n     private boolean nodeIsEmpty = true;\n     private boolean useDoubleQuotes = false;\n-    private boolean omitNullAttributes = true;\n+    private boolean omitNullAttributes = false;\n     private boolean omitEmptyAttributes = false;\n \n     public MarkupBuilder() {\n@@ -94,7 +94,7 @@ public boolean isOmitNullAttributes() {\n      * attributes will not be included in the resulting markup.\n      * If <code>false</code> null attributes will be included in the\n      * markup as empty strings regardless of the omitEmptyAttribute\n-     * setting. Defaults to <code>true</code>.\n+     * setting. Defaults to <code>false</code>.\n      */\n     public void setOmitNullAttributes(boolean omitNullAttributes) {\n         this.omitNullAttributes = omitNullAttributes;",
                "raw_url": "https://github.com/apache/groovy/raw/e244b60c14f2b0e46b0fb847adcf14f6c8d4d5d6/src/main/groovy/xml/MarkupBuilder.java",
                "sha": "41c68fdc9d42e0c65eeae75ce61f0f50a243376f",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/groovy/blob/e244b60c14f2b0e46b0fb847adcf14f6c8d4d5d6/src/test/groovy/xml/MarkupBuilderTest.groovy",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/xml/MarkupBuilderTest.groovy?ref=e244b60c14f2b0e46b0fb847adcf14f6c8d4d5d6",
                "deletions": 8,
                "filename": "src/test/groovy/xml/MarkupBuilderTest.groovy",
                "patch": "@@ -124,7 +124,7 @@ class MarkupBuilderTest extends GroovyTestCase {\n   <elem1>hello1</elem1>\n   <elem2>hello2</elem2>\n   <nestedElem x='abc' y='def'>\n-    <child z='def' />\n+    <child z='def' nulltest=''/>\n     <child2 />\n   </nestedElem>\n   <nestedElem2 z='zzz'>\n@@ -174,7 +174,7 @@ class MarkupBuilderTest extends GroovyTestCase {\n   <greaterthan>&gt;</greaterthan>\n   <emptyElement />\n   <null />\n-  <nullAttribute />\n+  <nullAttribute t1='' />\n   <emptyWithAttributes attr1='set' />\n   <emptyAttribute t1='' />\n   <parent key='value'>\n@@ -315,26 +315,26 @@ require escaping. The other characters consist of:\n       assertExpectedXml '<p><em>call to outside</em></p>'\n     }\n \n-    void testOmitAttributeSettingsOmitNullKeepEmptyDefaultCase() {\n+    void testOmitAttributeSettingsKeepBothDefaultCase() {\n         xml.element(att1:null, att2:'')\n-        assertExpectedXml \"<element att2='' />\"\n+        assertExpectedXml \"<element att1='' att2='' />\"\n     }\n \n-    void testOmitAttributeSettingsKeepBoth() {\n-        xml.omitNullAttributes = false\n+    void testOmitAttributeSettingsOmitNullKeepEmpty() {\n+        xml.omitNullAttributes = true\n         xml.element(att1:null, att2:'')\n-        assertExpectedXml \"<element att1='' att2='' />\"\n+        assertExpectedXml \"<element att2='' />\"\n     }\n \n     void testOmitAttributeSettingsKeepNullOmitEmpty() {\n-        xml.omitNullAttributes = false\n         xml.omitEmptyAttributes = true\n         xml.element(att1:null, att2:'')\n         assertExpectedXml \"<element att1='' />\"\n     }\n \n     void testOmitAttributeSettingsOmitBoth() {\n         xml.omitEmptyAttributes = true\n+        xml.omitNullAttributes = true\n         xml.element(att1:null, att2:'')\n         assertExpectedXml \"<element />\"\n     }",
                "raw_url": "https://github.com/apache/groovy/raw/e244b60c14f2b0e46b0fb847adcf14f6c8d4d5d6/src/test/groovy/xml/MarkupBuilderTest.groovy",
                "sha": "0c6991a09931d19d297430c6a26e6e7707d5e97d",
                "status": "modified"
            }
        ],
        "message": "GROOVY-1684: MarkupBuilder throws NPE if element content or attribute values are null (align default behavior with StreamingMarkupBuilder)\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@10390 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/79d77b04faaae86d3d6448c639543a5f54448c76",
        "patched_files": [
            "MarkupBuilder.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "MarkupBuilderTest.java"
        ]
    },
    "groovy_e459750": {
        "bug_id": "groovy_e459750",
        "commit": "https://github.com/apache/groovy/commit/e45975016c7dbb773d27f29c0bba43875b99647b",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/groovy/blob/e45975016c7dbb773d27f29c0bba43875b99647b/src/main/org/codehaus/groovy/transform/BaseScriptASTTransformation.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/BaseScriptASTTransformation.java?ref=e45975016c7dbb773d27f29c0bba43875b99647b",
                "deletions": 11,
                "filename": "src/main/org/codehaus/groovy/transform/BaseScriptASTTransformation.java",
                "patch": "@@ -129,22 +129,26 @@ private void changeBaseScriptType(final AnnotatedNode parent, final ClassNode cN\n         MethodNode runScriptMethod = ClassHelper.findSAM(baseScriptType);\r\n \r\n         // If they want to use a name other than than \"run\", then make the change.\r\n-        if (isSuitableAbstractMethod(runScriptMethod)) {\r\n+        if (isCustomScriptBodyMethod(runScriptMethod)) {\r\n             MethodNode defaultMethod = cNode.getDeclaredMethod(\"run\", Parameter.EMPTY_ARRAY);\r\n-            cNode.removeMethod(defaultMethod);\r\n-            MethodNode methodNode = new MethodNode(runScriptMethod.getName(), runScriptMethod.getModifiers() & ~ACC_ABSTRACT\r\n-                    , runScriptMethod.getReturnType(), runScriptMethod.getParameters(), runScriptMethod.getExceptions()\r\n-                    , defaultMethod.getCode());\r\n-            // The AST node metadata has the flag that indicates that this method is a script body.\r\n-            // It may also be carrying data for other AST transforms.\r\n-            methodNode.copyNodeMetaData(defaultMethod);\r\n-            cNode.addMethod(methodNode);\r\n+            // GROOVY-6706: Sometimes an NPE is thrown here.\r\n+            // The reason is that our transform is getting called more than once sometimes.  \r\n+            if (defaultMethod != null) {\r\n+                cNode.removeMethod(defaultMethod);\r\n+                MethodNode methodNode = new MethodNode(runScriptMethod.getName(), runScriptMethod.getModifiers() & ~ACC_ABSTRACT\r\n+                        , runScriptMethod.getReturnType(), runScriptMethod.getParameters(), runScriptMethod.getExceptions()\r\n+                        , defaultMethod.getCode());\r\n+                // The AST node metadata has the flag that indicates that this method is a script body.\r\n+                // It may also be carrying data for other AST transforms.\r\n+                methodNode.copyNodeMetaData(defaultMethod);\r\n+                cNode.addMethod(methodNode);\r\n+            }\r\n         }\r\n     }\r\n \r\n-    private boolean isSuitableAbstractMethod(MethodNode node) {\r\n+    private boolean isCustomScriptBodyMethod(MethodNode node) {\r\n         return node != null\r\n-                && !(node.getDeclaringClass().equals(ClassHelper.SCRIPT_TYPE)\r\n+            && !(node.getDeclaringClass().equals(ClassHelper.SCRIPT_TYPE)\r\n                 && \"run\".equals(node.getName())\r\n                 && node.getParameters().length == 0);\r\n     }\r",
                "raw_url": "https://github.com/apache/groovy/raw/e45975016c7dbb773d27f29c0bba43875b99647b/src/main/org/codehaus/groovy/transform/BaseScriptASTTransformation.java",
                "sha": "52d7798f3ad1005a645c6a4c54730af218c2b9f7",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/groovy/blob/e45975016c7dbb773d27f29c0bba43875b99647b/src/test/org/codehaus/groovy/transform/BaseScriptTransformTest.groovy",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/transform/BaseScriptTransformTest.groovy?ref=e45975016c7dbb773d27f29c0bba43875b99647b",
                "deletions": 3,
                "filename": "src/test/org/codehaus/groovy/transform/BaseScriptTransformTest.groovy",
                "patch": "@@ -106,6 +106,8 @@ class BaseScriptTransformTest extends CompilableTestSupport {\n         \"\"\"\r\n     }\r\n \r\n+    abstract class MyCustomScript extends Script {}\r\n+\r\n     void testBaseScriptFromCompiler(){\r\n         CompilerConfiguration config = new CompilerConfiguration()\r\n         config.scriptBaseClass = MyCustomScript.name\r\n@@ -259,6 +261,37 @@ class BaseScriptTransformTest extends CompilableTestSupport {\n         assert result\r\n     }\r\n \r\n+    /**\r\n+     * Test GROOVY-6706.  Base script in import (or package) with a SAM.\r\n+     */\r\n+    void testGROOVY_6706() {\r\n+        assertScript '''\r\n+@BaseScript(CustomBase)\r\n+import groovy.transform.BaseScript\r\n+\r\n+assert did_before\r\n+assert !did_after\r\n+\r\n+42\r\n+\r\n+abstract class CustomBase extends Script {\r\n+    boolean did_before = false\r\n+    boolean did_after = false\r\n+\r\n+    def run() {\r\n+        before()\r\n+        def r = internalRun()\r\n+        after()\r\n+        assert r == 42\r\n+    }\r\n+\r\n+    abstract internalRun()\r\n+\r\n+    def before() { did_before = true }\r\n+    def after()  { did_after = true  }\r\n+}'''\r\n+    }\r\n+\r\n     void testBaseScriptOnPackage() {\r\n         def result = new GroovyShell().evaluate('''\r\n             @BaseScript(DeclaredBaseScript)\r\n@@ -315,7 +348,4 @@ class BaseScriptTransformTest extends CompilableTestSupport {\n             println 'ok'\r\n         '''\r\n     }\r\n-\r\n }\r\n-\r\n-abstract class MyCustomScript extends Script {}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/groovy/raw/e45975016c7dbb773d27f29c0bba43875b99647b/src/test/org/codehaus/groovy/transform/BaseScriptTransformTest.groovy",
                "sha": "1a39623bb693d6f79e6906adca4fa691ffd8c70e",
                "status": "modified"
            }
        ],
        "message": "Fix for GROOVY-6706.  NPE in some certain situations with @BaseScript.",
        "parent": "https://github.com/apache/groovy/commit/b7fa36101489dbaafe1dba8a43773932ddd77134",
        "patched_files": [
            "BaseScriptASTTransformation.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "BaseScriptTransformTest.java"
        ]
    },
    "groovy_e47744a": {
        "bug_id": "groovy_e47744a",
        "commit": "https://github.com/apache/groovy/commit/e47744aa5258ba8a386dbe97bead4dabcf4003f7",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/build.gradle",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/build.gradle?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 0,
                "filename": "build.gradle",
                "patch": "@@ -138,6 +138,7 @@ dependencies {\n         exclude(group: 'junit', module: 'junit')\n         exclude(group: 'jmock', module: 'jmock')\n     }\n+    compile files(\"lib/openbeans-1.0.jar\")\n     compile \"org.fusesource.jansi:jansi:$jansiVersion\"\n     compile(\"org.apache.ivy:ivy:$ivyVersion\") {\n         transitive = false",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/build.gradle",
                "sha": "496808eee911b2d6bbe9b8936244d1856a1741ba",
                "status": "modified"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/gradle/assemble.gradle",
                "changes": 41,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/gradle/assemble.gradle?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 5,
                "filename": "gradle/assemble.gradle",
                "patch": "@@ -133,9 +133,10 @@ allprojects {\n         classifier = jar.classifier\n         includeEmptyDirs = false\n         def target = new File(\"${archivePath}.tmp\")\n-        from zipTree(target)\n \n         doFirst {\n+            from zipTree(target)\n+\n             def keepUntouched = [\n                     'org/codehaus/groovy/cli/GroovyPosixParser*.class',\n                     'groovy/util/CliBuilder*.class',\n@@ -154,7 +155,7 @@ allprojects {\n                     // only groovy core will include the dependencies repackaged\n                     if (isRoot) {\n                         configurations.runtime.files.findAll { file ->\n-                            ['antlr', 'asm', 'commons-cli'].any {\n+                            ['antlr', 'asm', 'commons-cli', 'openbeans'].any {\n                                 file.name.startsWith(it)\n                             } && ['asm-attr', 'asm-util', 'asm-analysis'].every { !file.name.startsWith(it) }\n                         }.each { jarjarFile ->\n@@ -189,13 +190,43 @@ allprojects {\n \n         }\n         doLast {\n-            // for some obscure reason, this produces a Gradle warning\n             target.delete()\n-            rootProject.isJarJar = false\n         }\n     }\n-}\n \n+    if (project.name in ['groovy', 'groovy-test']) {\n+        task grooidjar(type: Jar) {\n+            onlyIf {\n+                !rootProject.useIndy()\n+            }\n+            destinationDir = jar.destinationDir\n+            baseName = jar.baseName\n+            appendix = jar.appendix\n+            classifier = jar.classifier ? \"${jar.classifier}grooid\" : 'grooid'\n+            includeEmptyDirs = false\n+            def target = new File(\"${archivePath}.tmp\")\n+\n+            doFirst {\n+                from zipTree(target)\n+                ant {\n+                    taskdef name: 'jarjar', classname: 'com.tonicsystems.jarjar.JarJarTask', classpath: rootProject.configurations.tools.asPath\n+                    jarjar(jarfile: target) {\n+                        zipfileset(src: jarjar.archivePath)\n+\n+                        rule pattern: 'com.googlecode.openbeans.**', result: 'groovyjarjaropenbeans.@1'\n+                        rule pattern: 'org.apache.harmony.beans.**', result: 'groovyjarjarharmonybeans.@1'\n+                        rule pattern: 'java.beans.**', result: 'groovyjarjaropenbeans.@1'\n+                    }\n+                }\n+\n+            }\n+            doLast {\n+                target.delete()\n+            }\n+        }\n+        jarjar.finalizedBy(grooidjar)\n+    }\n+}\n \n subprojects {\n     jar {",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/gradle/assemble.gradle",
                "sha": "b36315ff373c1d88e0228fc556735d6ea7164b97",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/gradle/upload.gradle",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/gradle/upload.gradle?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 0,
                "filename": "gradle/upload.gradle",
                "patch": "@@ -75,6 +75,10 @@ allprojects {\n             if (indyJar.exists()) {\n                 project.artifacts.add('archives', indyJar)\n             }\n+            def grooidJar = new File(archive.parent, archive.name[0..archive.name.lastIndexOf('.')-1]+'-grooid.jar')\n+            if (grooidJar.exists()) {\n+                project.artifacts.add('archives', grooidJar)\n+            }\n         }\n     }\n }\n@@ -94,6 +98,10 @@ allprojects {\n         if (indyJar.exists()) {\n             project.artifacts.add('archives', indyJar)\n         }\n+        def grooidJar = new File(archive.parent, archive.name[0..archive.name.lastIndexOf('.')-1]+'-grooid.jar')\n+        if (grooidJar.exists()) {\n+            project.artifacts.add('archives', grooidJar)\n+        }\n     }\n }\n ext.pomAll = {",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/gradle/upload.gradle",
                "sha": "6e5839c6bafcf1a5c3a82c9e6b5b596474e4321a",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/lib/openbeans-1.0.jar",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/lib/openbeans-1.0.jar?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 0,
                "filename": "lib/openbeans-1.0.jar",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/lib/openbeans-1.0.jar",
                "sha": "7e61907094f0c05e5b7fea03b33722865f92b8c2",
                "status": "added"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/groovy/lang/GroovyClassLoader.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/GroovyClassLoader.java?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 15,
                "filename": "src/main/groovy/lang/GroovyClassLoader.java",
                "patch": "@@ -335,22 +335,27 @@ private void definePackage(String className) {\n     protected PermissionCollection getPermissions(CodeSource codeSource) {\n         PermissionCollection perms;\n         try {\n-            perms = super.getPermissions(codeSource);\n-        } catch (SecurityException e) {\n-            // We lied about our CodeSource and that makes URLClassLoader unhappy.\n-            perms = new Permissions();\n-        }\n-\n-        ProtectionDomain myDomain = AccessController.doPrivileged(new PrivilegedAction<ProtectionDomain>() {\n-            public ProtectionDomain run() {\n-                return getClass().getProtectionDomain();\n+            try {\n+                perms = super.getPermissions(codeSource);\n+            } catch (SecurityException e) {\n+                // We lied about our CodeSource and that makes URLClassLoader unhappy.\n+                perms = new Permissions();\n             }\n-        });\n-        PermissionCollection myPerms = myDomain.getPermissions();\n-        if (myPerms != null) {\n-            for (Enumeration<Permission> elements = myPerms.elements(); elements.hasMoreElements();) {\n-                perms.add(elements.nextElement());\n+\n+            ProtectionDomain myDomain = AccessController.doPrivileged(new PrivilegedAction<ProtectionDomain>() {\n+                public ProtectionDomain run() {\n+                    return getClass().getProtectionDomain();\n+                }\n+            });\n+            PermissionCollection myPerms = myDomain.getPermissions();\n+            if (myPerms != null) {\n+                for (Enumeration<Permission> elements = myPerms.elements(); elements.hasMoreElements();) {\n+                    perms.add(elements.nextElement());\n+                }\n             }\n+        } catch (Throwable e) {\n+            // We lied about our CodeSource and that makes URLClassLoader unhappy.\n+            perms = new Permissions();\n         }\n         perms.setReadOnly();\n         return perms;\n@@ -474,8 +479,13 @@ public GroovyClassLoader getDefiningClassLoader() {\n         }\n \n         protected Class createClass(byte[] code, ClassNode classNode) {\n+            BytecodeProcessor bytecodePostprocessor = unit.getConfiguration().getBytecodePostprocessor();\n+            byte[] fcode = code;\n+            if (bytecodePostprocessor!=null) {\n+                fcode = bytecodePostprocessor.processBytecode(classNode.getName(), fcode);\n+            }\n             GroovyClassLoader cl = getDefiningClassLoader();\n-            Class theClass = cl.defineClass(classNode.getName(), code, 0, code.length, unit.getAST().getCodeSource());\n+            Class theClass = cl.defineClass(classNode.getName(), fcode, 0, fcode.length, unit.getAST().getCodeSource());\n             this.loadedClasses.add(theClass);\n \n             if (generatedClass == null) {",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/groovy/lang/GroovyClassLoader.java",
                "sha": "c8c8224f5e4b59018cc0677c47668c93721e6155",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/groovy/lang/MetaClassImpl.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/MetaClassImpl.java?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 2,
                "filename": "src/main/groovy/lang/MetaClassImpl.java",
                "patch": "@@ -16,7 +16,6 @@\n package groovy.lang;\n \n import org.codehaus.groovy.GroovyBugError;\n-import org.codehaus.groovy.ast.ClassHelper;\n import org.codehaus.groovy.ast.ClassNode;\n import org.codehaus.groovy.classgen.asm.BytecodeHelper;\n import org.codehaus.groovy.control.CompilationUnit;\n@@ -32,6 +31,7 @@\n import org.codehaus.groovy.runtime.ConvertedClosure;\n import org.codehaus.groovy.runtime.CurriedClosure;\n import org.codehaus.groovy.runtime.DefaultGroovyMethods;\n+import org.codehaus.groovy.runtime.ExceptionUtils;\n import org.codehaus.groovy.runtime.GeneratedClosure;\n import org.codehaus.groovy.runtime.GroovyCategorySupport;\n import org.codehaus.groovy.runtime.InvokerHelper;\n@@ -68,6 +68,7 @@\n import org.codehaus.groovy.util.ComplexKeyHashMap;\n import org.codehaus.groovy.util.FastArray;\n import org.codehaus.groovy.util.SingleKeyHashMap;\n+import org.codehaus.groovy.reflection.android.AndroidSupport;\n import org.objectweb.asm.ClassVisitor;\n \n import java.beans.BeanInfo;\n@@ -3043,7 +3044,15 @@ private boolean isGenericGetMethod(MetaMethod method) {\n     public synchronized void initialize() {\n         if (!isInitialized()) {\n             fillMethodIndex();\n-            addProperties();\n+            try {\n+                addProperties();\n+            } catch (Throwable e) {\n+                if (!AndroidSupport.isRunningAndroid()) {\n+                    ExceptionUtils.sneakyThrow(e);\n+                }\n+                // Introspection failure...\n+                // May happen in Android\n+            }\n             initialized = true;\n         }\n     }",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/groovy/lang/MetaClassImpl.java",
                "sha": "f3644512c5c644f263815b8a2e7851f216f5b43f",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java",
                "patch": "@@ -226,6 +226,10 @@ private void makeInnerClassEntry(ClassNode cn) {\n         int mods = adjustedClassModifiersForInnerClassTable(cn);\n \n \n+        if (Modifier.isPrivate(mods)) {\n+            mods = mods ^ Modifier.PRIVATE;\n+            innerClass.setModifiers(mods);\n+        }\n         cv.visitInnerClass(\n                 innerClassInternalName,\n                 outerClassName,",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java",
                "sha": "50020a3de549ca3d85f8cd2a87db88d6bf574c0e",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/control/BytecodeProcessor.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/control/BytecodeProcessor.java?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/control/BytecodeProcessor.java",
                "patch": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2003-2013 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.codehaus.groovy.control;\n+\n+public interface BytecodeProcessor {\n+    byte[] processBytecode(String name, byte[] original);\n+}",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/control/BytecodeProcessor.java",
                "sha": "0931d313f88dbe58fd982b8b8de9985e452c000d",
                "status": "added"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/control/CompilerConfiguration.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/control/CompilerConfiguration.java?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/control/CompilerConfiguration.java",
                "patch": "@@ -161,6 +161,8 @@\n      */\n     private Set<String> disabledGlobalASTTransformations;\n \n+    private BytecodeProcessor bytecodePostprocessor;\n+\n     /**\n      * Sets the Flags to defaults.\n      */\n@@ -828,4 +830,12 @@ public CompilerConfiguration addCompilationCustomizers(CompilationCustomizer...\n     public void setDisabledGlobalASTTransformations(final Set<String> disabledGlobalASTTransformations) {\n         this.disabledGlobalASTTransformations = disabledGlobalASTTransformations;\n     }\n+\n+    public BytecodeProcessor getBytecodePostprocessor() {\n+        return bytecodePostprocessor;\n+    }\n+\n+    public void setBytecodePostprocessor(final BytecodeProcessor bytecodePostprocessor) {\n+        this.bytecodePostprocessor = bytecodePostprocessor;\n+    }\n }",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/control/CompilerConfiguration.java",
                "sha": "a1d0145eb66ece73770a4f340c760e29e183256a",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/reflection/CachedClass.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/reflection/CachedClass.java?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 5,
                "filename": "src/main/org/codehaus/groovy/reflection/CachedClass.java",
                "patch": "@@ -81,13 +81,18 @@\n             final Method[] declaredMethods = (Method[])\n                AccessController.doPrivileged(new PrivilegedAction/*<Method[]>*/() {\n                    public /*Method[]*/ Object run() {\n-                       final Method[] dm = getTheClass().getDeclaredMethods();\n                        try {\n-                           AccessibleObject.setAccessible(dm, true);\n-                       } catch (SecurityException e) {\n-                           // swallow for strict security managers\n+                           final Method[] dm = getTheClass().getDeclaredMethods();\n+                           try {\n+                               AccessibleObject.setAccessible(dm, true);\n+                           } catch (SecurityException e) {\n+                               // swallow for strict security managers\n+                           }\n+                           return dm;\n+                       } catch (Throwable e) {\n+                           // Typically, Android can throw ClassNotFoundException\n+                           return new Method[0];\n                        }\n-                       return dm;\n                    }\n                });\n             List<CachedMethod> methods = new ArrayList<CachedMethod>(declaredMethods.length);",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/reflection/CachedClass.java",
                "sha": "a3fe0693d2dc0d35afdc13d7b1d1e42d1b6893e9",
                "status": "modified"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/reflection/android/AndroidSupport.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/reflection/android/AndroidSupport.java?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/reflection/android/AndroidSupport.java",
                "patch": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2003-2014 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.codehaus.groovy.reflection.android;\n+\n+public abstract class AndroidSupport {\n+    private static final boolean IS_ANDROID;\n+\n+    static {\n+        boolean isAndroid = true;\n+        try {\n+            Class.forName(\"android.app.Activity\", false, AndroidSupport.class.getClassLoader());\n+        } catch (ClassNotFoundException e) {\n+            isAndroid = false;\n+        }\n+        IS_ANDROID = isAndroid;\n+    }\n+\n+    public static boolean isRunningAndroid() {\n+        return IS_ANDROID;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/reflection/android/AndroidSupport.java",
                "sha": "83cd4ec6f74d7437f5b88503481e790b5545c133",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/runtime/callsite/CallSiteGenerator.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/callsite/CallSiteGenerator.java?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/runtime/callsite/CallSiteGenerator.java",
                "patch": "@@ -19,6 +19,7 @@\n import org.codehaus.groovy.classgen.asm.BytecodeHelper;\n import org.codehaus.groovy.reflection.CachedClass;\n import org.codehaus.groovy.reflection.CachedMethod;\n+import org.codehaus.groovy.reflection.android.AndroidSupport;\n import org.objectweb.asm.ClassWriter;\n import org.objectweb.asm.Label;\n import org.objectweb.asm.MethodVisitor;\n@@ -242,7 +243,8 @@ public static Constructor compileStaticMethod(CachedMethod cachedMethod) {\n     }\n \n     public static boolean isCompilable (CachedMethod method) {\n-        return GroovySunClassLoader.sunVM != null || Modifier.isPublic(method.cachedClass.getModifiers()) && method.isPublic() && publicParams(method);\n+        return (GroovySunClassLoader.sunVM != null || Modifier.isPublic(method.cachedClass.getModifiers()) && method.isPublic() && publicParams(method))\n+                && !AndroidSupport.isRunningAndroid();\n     }\n \n     private static boolean publicParams(CachedMethod method) {",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/runtime/callsite/CallSiteGenerator.java",
                "sha": "64064c806d936c0b2078c106fb252102fa76d40a",
                "status": "modified"
            }
        ],
        "message": "Raw modifications to run Groovy on Android\n   * replaced uses of java.beans with openbeans\n   * added a bytecode postprocessor\n   * commented code which triggered NPEs on Android due to security exceptions\n   * Repackage openbeans within core jar\n   * Android patch: Catch introspection errors\n   * Use \"grooid\" classifier for modified jars",
        "parent": "https://github.com/apache/groovy/commit/198af57011ae357acef42c8095fed9e3b91953e1",
        "patched_files": [
            "GroovyClassLoader.java",
            "CompilerConfiguration.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "CompilerConfigurationTest.java",
            "GroovyClassLoaderTest.java"
        ]
    },
    "groovy_e6e8ac0": {
        "bug_id": "groovy_e6e8ac0",
        "commit": "https://github.com/apache/groovy/commit/e6e8ac0ac5da29fe30b51adfbd6a54d67b97ba47",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/groovy/blob/e6e8ac0ac5da29fe30b51adfbd6a54d67b97ba47/src/main/org/codehaus/groovy/runtime/NullObject.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/NullObject.java?ref=e6e8ac0ac5da29fe30b51adfbd6a54d67b97ba47",
                "deletions": 3,
                "filename": "src/main/org/codehaus/groovy/runtime/NullObject.java",
                "patch": "@@ -42,8 +42,8 @@ public static NullObject getNullObject() {\n      * Since this is implemented as a singleton, we should avoid the\n      * use of the clone method\n      */\n-    public Object clone() throws CloneNotSupportedException {\n-        throw new CloneNotSupportedException();\n+    public Object clone() {\n+        throw new NullPointerException(\"Cannot invoke method clone() on null object\");\n     }\n \n     /**\n@@ -136,6 +136,6 @@ public String toString() {\n     }\n \n     public int hashCode() {\n-        throw new NullPointerException(\"hashCode() not allowed on null\");\n+        throw new NullPointerException(\"Cannot invoke method hashCode() on null object\");\n     }\n }",
                "raw_url": "https://github.com/apache/groovy/raw/e6e8ac0ac5da29fe30b51adfbd6a54d67b97ba47/src/main/org/codehaus/groovy/runtime/NullObject.java",
                "sha": "57355bcdf8a5364f52610ec610a994c568c08bfe",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/groovy/blob/e6e8ac0ac5da29fe30b51adfbd6a54d67b97ba47/src/test/org/codehaus/groovy/runtime/NullObjectTest.groovy",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/runtime/NullObjectTest.groovy?ref=e6e8ac0ac5da29fe30b51adfbd6a54d67b97ba47",
                "deletions": 5,
                "filename": "src/test/org/codehaus/groovy/runtime/NullObjectTest.groovy",
                "patch": "@@ -3,11 +3,8 @@ package org.codehaus.groovy.runtime\n class NullObjectTest extends GroovyTestCase {\n     void testCallingMethod() {\n         def foo = null\n-        try {\n+        shouldFail(NullPointerException) {\n           println foo.bar\n-          assert false  // should throw exception\n-        } catch (NullPointerException ex) {\n-          // is successfull\n         }\n     }\n     \n@@ -44,7 +41,14 @@ class NullObjectTest extends GroovyTestCase {\n                 assert n + \" is a null value\" == \" is a null value\"\n                 assert \"this is a null value \" + null == \"this is a null value \"\n             }\n-        } \n+        }\n+\n+    void testClone() {\n+        def foo = null\n+        shouldFail(NullPointerException) {\n+            foo.clone()    \n+        }\n+    }\n }\n \n class MyCategory {",
                "raw_url": "https://github.com/apache/groovy/raw/e6e8ac0ac5da29fe30b51adfbd6a54d67b97ba47/src/test/org/codehaus/groovy/runtime/NullObjectTest.groovy",
                "sha": "edc3c061fbf9fadf6b7b49770a6e6eae5364bafb",
                "status": "modified"
            }
        ],
        "message": "GROOVY-3381: null.clone() should throw NPE instead of CloneNotSupportedException\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@16495 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/cdc629219b467e3b57697f1a4d06153a901e714f",
        "patched_files": [
            "NullObject.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "NullObjectTest.java"
        ]
    },
    "groovy_e9e7724": {
        "bug_id": "groovy_e9e7724",
        "commit": "https://github.com/apache/groovy/commit/e9e7724da1951fc1b4c17909854a9a36c130bc99",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/groovy/blob/e9e7724da1951fc1b4c17909854a9a36c130bc99/src/main/org/codehaus/groovy/transform/MapConstructorASTTransformation.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/MapConstructorASTTransformation.java?ref=e9e7724da1951fc1b4c17909854a9a36c130bc99",
                "deletions": 2,
                "filename": "src/main/org/codehaus/groovy/transform/MapConstructorASTTransformation.java",
                "patch": "@@ -54,6 +54,7 @@\n import static org.codehaus.groovy.ast.tools.GeneralUtils.getSuperPropertyFields;\n import static org.codehaus.groovy.ast.tools.GeneralUtils.getSetterName;\n import static org.codehaus.groovy.ast.tools.GeneralUtils.ifS;\n+import static org.codehaus.groovy.ast.tools.GeneralUtils.notNullX;\n import static org.codehaus.groovy.ast.tools.GeneralUtils.param;\n import static org.codehaus.groovy.ast.tools.GeneralUtils.params;\n import static org.codehaus.groovy.ast.tools.GeneralUtils.propX;\n@@ -141,16 +142,18 @@ public static void createConstructor(ClassNode cNode, boolean includeFields, boo\n             ClosureExpression transformed = (ClosureExpression) transformer.transform(pre);\n             copyStatementsWithSuperAdjustment(transformed, body);\n         }\n+        final BlockStatement inner = new BlockStatement();\n         for (FieldNode fNode : superList) {\n             String name = fNode.getName();\n             if (shouldSkip(name, excludes, includes, allNames)) continue;\n-            assignField(useSetters, map, body, name);\n+            assignField(useSetters, map, inner, name);\n         }\n         for (FieldNode fNode : list) {\n             String name = fNode.getName();\n             if (shouldSkip(name, excludes, includes, allNames)) continue;\n-            assignField(useSetters, map, body, name);\n+            assignField(useSetters, map, inner, name);\n         }\n+        body.addStatement(ifS(notNullX(varX(\"args\")), inner));\n         if (post != null) {\n             ClosureExpression transformed = (ClosureExpression) transformer.transform(post);\n             body.addStatement(transformed.getCode());",
                "raw_url": "https://github.com/apache/groovy/raw/e9e7724da1951fc1b4c17909854a9a36c130bc99/src/main/org/codehaus/groovy/transform/MapConstructorASTTransformation.java",
                "sha": "89917789a2e9357e63417c9455b250eaef148997",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/groovy/blob/e9e7724da1951fc1b4c17909854a9a36c130bc99/src/test/org/codehaus/groovy/transform/MapConstructorTransformTest.groovy",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/transform/MapConstructorTransformTest.groovy?ref=e9e7724da1951fc1b4c17909854a9a36c130bc99",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/transform/MapConstructorTransformTest.groovy",
                "patch": "@@ -200,4 +200,16 @@ class MapConstructorTransformTest extends GroovyShellTestCase {\n         '''\n     }\n \n+    // GROOVY-8012\n+    void testMapConstructorWithNoArgs() {\n+        assertScript '''\n+            @groovy.transform.MapConstructor\n+            class Foo {\n+                String bar\n+            }\n+\n+            assert new Foo() instanceof Foo\n+        '''\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/groovy/raw/e9e7724da1951fc1b4c17909854a9a36c130bc99/src/test/org/codehaus/groovy/transform/MapConstructorTransformTest.groovy",
                "sha": "a48d3ff8df9af3a0c907fac7031d3796cd043a36",
                "status": "modified"
            }
        ],
        "message": "GROOVY-8012: A class with a @MapConstructor when supplied with no args throws NPE (closes #466)",
        "parent": "https://github.com/apache/groovy/commit/eb1a2b029278b707a2a989ddfaf3cd8b800888d2",
        "patched_files": [
            "MapConstructorASTTransformation.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "MapConstructorTransformTest.java"
        ]
    },
    "groovy_ec89363": {
        "bug_id": "groovy_ec89363",
        "commit": "https://github.com/apache/groovy/commit/ec89363470d0aa3bba5afee627eba261dc78a91d",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/ec89363470d0aa3bba5afee627eba261dc78a91d/src/main/org/codehaus/groovy/ast/ClassNode.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/ast/ClassNode.java?ref=ec89363470d0aa3bba5afee627eba261dc78a91d",
                "deletions": 2,
                "filename": "src/main/org/codehaus/groovy/ast/ClassNode.java",
                "patch": "@@ -119,11 +119,13 @@ protected ClassNode redirect(){\n     }\n     \n     /**\n-     * Sets this instance as proxy for the given ClassNode\n+     * Sets this instance as proxy for the given ClassNode. \n+     * @param cn the class to redirect to. If set to null the redirect will be removed\n      */\n     public void setRedirect(ClassNode cn) {\n         if (isPrimaryNode) throw new GroovyBugError(\"tried to set a redirect for a primary ClassNode (\"+getName()+\"->\"+cn.getName()+\").\");\n-        redirect = cn.redirect();        \n+        if (cn!=null) cn = cn.redirect();\n+        redirect = cn;\n     }\n     \n     /**",
                "raw_url": "https://github.com/apache/groovy/raw/ec89363470d0aa3bba5afee627eba261dc78a91d/src/main/org/codehaus/groovy/ast/ClassNode.java",
                "sha": "c5224a9df45a8f7194f170a717e558ee386951c1",
                "status": "modified"
            }
        ],
        "message": "avoid NPE when setting redirect\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@3685 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/3d0ae5fb032021f51733b14691ba3ea92f919c5f",
        "patched_files": [
            "ClassNode.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "ClassNodeTest.java"
        ]
    },
    "groovy_f0213c0": {
        "bug_id": "groovy_f0213c0",
        "commit": "https://github.com/apache/groovy/commit/f0213c0dea6be606da51354e45396d58aac73e74",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/groovy/blob/f0213c0dea6be606da51354e45396d58aac73e74/src/main/org/codehaus/groovy/runtime/NullObject.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/NullObject.java?ref=f0213c0dea6be606da51354e45396d58aac73e74",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/runtime/NullObject.java",
                "patch": "@@ -109,6 +109,18 @@ public Object plus(String s) {\n         return getMetaClass().invokeMethod(this, \"toString\", new Object[]{}) + s;\n     }\n \n+    /**\n+     * Fallback for null+null.\n+     * The result is always a NPE. The plus(String) version will catch \n+     * the case of adding a non null String to null.\n+     *\n+     * @param o - the Object\n+     * @return nothing\n+     */\n+    public Object plus(Object o) {\n+        throw new NullPointerException(\"Cannot execute null+null\");\n+    }\n+\n     /**\n      * The method \"is\" is used to test for equal references.\n      * This method will return true only if the given parameter",
                "raw_url": "https://github.com/apache/groovy/raw/f0213c0dea6be606da51354e45396d58aac73e74/src/main/org/codehaus/groovy/runtime/NullObject.java",
                "sha": "439540ad66e24bc2acb8b77f044c7324e769ef81",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/groovy/blob/f0213c0dea6be606da51354e45396d58aac73e74/src/test/org/codehaus/groovy/runtime/NullObjectTest.groovy",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/runtime/NullObjectTest.groovy?ref=f0213c0dea6be606da51354e45396d58aac73e74",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/runtime/NullObjectTest.groovy",
                "patch": "@@ -56,6 +56,12 @@ class NullObjectTest extends GroovyTestCase {\n         assert null.hello() == \"Greeting from null\"\n         null.setMetaClass(oldMC)\n     }\n+\n+    void testNullPlusNull() {\n+        shouldFail(NullPointerException) {\n+            null+null\n+        }\n+    }\n }\n \n class MyCategory {",
                "raw_url": "https://github.com/apache/groovy/raw/f0213c0dea6be606da51354e45396d58aac73e74/src/test/org/codehaus/groovy/runtime/NullObjectTest.groovy",
                "sha": "5689e8bfa5f29cbee8e0fc4e6d3925ca8b8a75b7",
                "status": "modified"
            }
        ],
        "message": "GROOVY-4841: ensure a NPE is thrown for null+null",
        "parent": "https://github.com/apache/groovy/commit/4763b585e65cca27fe4585975947880e4cf23aff",
        "patched_files": [
            "NullObject.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "NullObjectTest.java"
        ]
    },
    "groovy_f233b54": {
        "bug_id": "groovy_f233b54",
        "commit": "https://github.com/apache/groovy/commit/f233b543f3f887b37888fc5157e650ce27181dc2",
        "file": [
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/groovy/blob/f233b543f3f887b37888fc5157e650ce27181dc2/src/main/org/codehaus/groovy/ant/Groovyc.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/ant/Groovyc.java?ref=f233b543f3f887b37888fc5157e650ce27181dc2",
                "deletions": 8,
                "filename": "src/main/org/codehaus/groovy/ant/Groovyc.java",
                "patch": "@@ -115,6 +115,8 @@\n     private boolean jointCompilation;\n \n     private List<File> temporaryFiles = new ArrayList(2);\n+    private File stubDir;\n+    private boolean keepStubs;\n \n \n     /**\n@@ -667,7 +669,7 @@ protected void compile() {\n                                 || (key.contains(\"encoding\"))\n                                 || (key.contains(\"source\"))\n                                 || (key.contains(\"target\"))\n-                                || (key.contains(\"verbose\"))) {\n+                                || (key.contains(\"verbose\"))) { // TODO remove extra verbose?\n                             jointOptions.add(\"-J\" + key + \"=\" + value);\n                         } else {\n                             log(\"The option \" + key + \" cannot be set on the contained <javac> element. The option will be ignored\", Project.MSG_WARN);\n@@ -859,12 +861,18 @@ protected void compile() {\n     }\n \n     protected CompilationUnit makeCompileUnit() {\n-        if (configuration.getJointCompilationOptions() != null) {\n-            if (!configuration.getJointCompilationOptions().containsKey(\"stubDir\")) {\n+        Map<String, Object> options = configuration.getJointCompilationOptions();\n+        if (options != null) {\n+            if (keepStubs) {\n+                options.put(\"keepStubs\", Boolean.TRUE);\n+            }\n+            if (stubDir != null) {\n+                options.put(\"stubDir\", stubDir);\n+            } else {\n                 try {\n                     File tempStubDir = FileSystemCompiler.createTempDir();\n                     temporaryFiles.add(tempStubDir);\n-                    configuration.getJointCompilationOptions().put(\"stubDir\", tempStubDir);\n+                    options.put(\"stubDir\", tempStubDir);\n                 } catch (IOException ioe) {\n                     throw new BuildException(ioe);\n                 }\n@@ -911,14 +919,15 @@ protected GroovyClassLoader buildClassLoaderFor() {\n \n     /**\n      * Set the stub directory into which the Java source stub\n-     * files should be generated. The directory should exist \n-     * will not be deleted automatically.\n+     * files should be generated. The directory need not exist\n+     * and will not be deleted automatically - though its contents\n+     * will be cleared unless 'keepStubs' is true. Ignored when forked.\n      *\n      * @param stubDir the stub directory\n      */\n     public void setStubdir(File stubDir) {\n         jointCompilation = true;\n-        configuration.getJointCompilationOptions().put(\"stubDir\", stubDir);\n+        this.stubDir = stubDir;\n     }\n \n     /**\n@@ -928,6 +937,25 @@ public void setStubdir(File stubDir) {\n      * @return the stub directory\n      */\n     public File getStubdir() {\n-        return (File) configuration.getJointCompilationOptions().get(\"stubDir\");\n+        return stubDir;\n+    }\n+\n+    /**\n+     * Set the keepStubs flag. Defaults to false. Set to true for debugging.\n+     * Ignored when forked.\n+     *\n+     * @param keepStubs should stubs be retained\n+     */\n+    public void setKeepStubs(boolean keepStubs) {\n+        this.keepStubs = keepStubs;\n+    }\n+\n+    /**\n+     * Gets the keepStubs flag.\n+     *\n+     * @return the keepStubs flag\n+     */\n+    public boolean getKeepStubs() {\n+        return keepStubs;\n     }\n }",
                "raw_url": "https://github.com/apache/groovy/raw/f233b543f3f887b37888fc5157e650ce27181dc2/src/main/org/codehaus/groovy/ant/Groovyc.java",
                "sha": "f40b55aeeb4934c53a923a333eb0ce711468b39d",
                "status": "modified"
            }
        ],
        "message": "GROOVY-4203: Groovyc Ant task can get a NPE when trying to set stubDir plus doesn't expose keepStubs flag\n\n\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@20009 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/0ebac128a8aa7cad9a20df4616eac00e07f2cceb",
        "patched_files": [
            "Groovyc.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "GroovycTest.java"
        ]
    },
    "groovy_f433a5e": {
        "bug_id": "groovy_f433a5e",
        "commit": "https://github.com/apache/groovy/commit/f433a5ea14a731f65318f3c66efc5e7c01e2bb44",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/f433a5ea14a731f65318f3c66efc5e7c01e2bb44/pom.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/pom.xml?ref=f433a5ea14a731f65318f3c66efc5e7c01e2bb44",
                "deletions": 0,
                "filename": "pom.xml",
                "patch": "@@ -443,6 +443,10 @@\n             <name>Bernhard Huber</name>\n             <email></email>\n         </contributor>\n+        <contributor>\n+            <name>Marc DeXeT</name>\n+            <email></email>\n+        </contributor>\n     </contributors>\n \n     <dependencies>",
                "raw_url": "https://github.com/apache/groovy/raw/f433a5ea14a731f65318f3c66efc5e7c01e2bb44/pom.xml",
                "sha": "f3d0afb2f450a03217c13d36aa03d93dd9e18336",
                "status": "modified"
            },
            {
                "additions": 100,
                "blob_url": "https://github.com/apache/groovy/blob/f433a5ea14a731f65318f3c66efc5e7c01e2bb44/src/main/groovy/sql/Sql.java",
                "changes": 152,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/sql/Sql.java?ref=f433a5ea14a731f65318f3c66efc5e7c01e2bb44",
                "deletions": 52,
                "filename": "src/main/groovy/sql/Sql.java",
                "patch": "@@ -26,7 +26,6 @@\n import java.sql.DriverManager;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n-import java.sql.ResultSetMetaData;\n import java.sql.SQLException;\n import java.sql.Statement;\n import java.sql.Types;\n@@ -44,7 +43,9 @@\n  * Represents an extent of objects\n  *\n  * @author Chris Stevenson\n- * @author <a href=\"mailto:james@coredevelopers.net\">James Strachan </a>\n+ * @author <a href=\"mailto:james@coredevelopers.net\">James Strachan</a>\n+ * @author Paul King\n+ * @author Marc DeXeT\n  * @version $Revision$\n  */\n public class Sql {\n@@ -59,26 +60,28 @@\n     private int resultSetConcurrency = ResultSet.CONCUR_READ_ONLY;\n     private int resultSetHoldability = -1;\n \n-    /**\n-     * let's only warn of using deprecated methods once\n-     */\n-    private boolean warned;\n-\n     // store the last row count for executeUpdate\n     int updateCount = 0;\n \n     /**\n      * allows a closure to be used to configure the statement before its use\n      */\n     private Closure configureStatement;\n+\n     /**\n      * property for allowing statements caching feature\n      */\n     private boolean cacheStatements;\n+\n+    /**\n+     * Statement cache\n+     */\n+    private final Map<String, Statement> statementCache = new HashMap<String, Statement>();\n+\n     /**\n-     * Statements cache\n+     * property for allowing connection caching feature\n      */\n-    private HashMap statementCache;\n+    private boolean cacheConnection;\n \n     /**\n      * Creates a new Sql instance given a JDBC connection URL.\n@@ -439,7 +442,7 @@ public Sql(DataSource dataSource) {\n      * Constructs an SQL instance using the given Connection. It is the caller's\n      * responsibility to close the Connection after the Sql instance has been\n      * used. You can do this on the connection object directly or by calling the\n-     * {@link Connection#close()}  method.\n+     * {@link Connection#close()} method.\n      *\n      * @param connection the Connection to use\n      */\n@@ -1137,7 +1140,6 @@ public int call(GString gstring) throws Exception {\n         return call(sql, params);\n     }\n \n-\n     /**\n      * Performs a stored procedure call with the given parameters,\n      * calling the closure once with all result objects.\n@@ -1160,32 +1162,63 @@ public void call(GString gstring, Closure closure) throws Exception {\n      * @throws SQLException if a database access error occurs\n      */\n     public void close() throws SQLException {\n-        if (useConnection == null) return;\n-        useConnection.close();\n+        if (useConnection == null) {\n+            log.log(Level.FINEST, \"Close operation not supported when using datasets\");\n+            return;\n+        }\n+        try {\n+            useConnection.close();\n+        }\n+        catch (SQLException e) {\n+            log.log(Level.SEVERE, \"Caught exception closing connection: \" + e, e);\n+            throw e;\n+        }\n     }\n \n     public DataSource getDataSource() {\n         return dataSource;\n     }\n \n \n-    public void commit() {\n-        if (useConnection == null) return;\n+    /**\n+     * If this SQL object was created with a Connection then this method commits\n+     * the connection. If this SQL object was created from a DataSource then\n+     * this method does nothing.\n+     *\n+     * @throws SQLException if a database access error occurs\n+     */\n+    public void commit() throws SQLException {\n+        if (useConnection == null) {\n+            log.log(Level.FINEST, \"Commit operation not supported when using datasets\");\n+            return;\n+        }\n         try {\n-            this.useConnection.commit();\n+            useConnection.commit();\n         }\n         catch (SQLException e) {\n             log.log(Level.SEVERE, \"Caught exception committing connection: \" + e, e);\n+            throw e;\n         }\n     }\n \n-    public void rollback() {\n-        if (useConnection == null) return;\n+    /**\n+     * If this SQL object was created with a Connection then this method rolls back\n+     * the connection. If this SQL object was created from a DataSource then\n+     * this method does nothing.\n+     *\n+     * @throws SQLException if a database access error occurs\n+     */\n+    public void rollback() throws SQLException {\n+        if (useConnection == null) {\n+            log.log(Level.FINEST, \"Rollback operation not supported when using datasets\");\n+            return;\n+        }\n         try {\n-            this.useConnection.rollback();\n+            useConnection.rollback();\n         }\n         catch (SQLException e) {\n-            log.log(Level.SEVERE, \"Caught exception rollbacking connection: \" + e, e);\n+            log.log(Level.SEVERE, \"Caught exception rolling back connection: \" + e, e);\n+            throw e;\n         }\n     }\n \n@@ -1355,12 +1388,13 @@ protected List getParameters(GString gstring) {\n     /**\n      * Appends the parameters to the given statement.\n      *\n+     * @param params the parameters to append\n+     * @param statement the statement\n      * @throws SQLException if a database access error occurs\n      */\n     protected void setParameters(List params, PreparedStatement statement) throws SQLException {\n         int i = 1;\n-        for (Iterator iter = params.iterator(); iter.hasNext();) {\n-            Object value = iter.next();\n+        for (Object value : params) {\n             setObject(statement, i++, value);\n         }\n     }\n@@ -1369,6 +1403,9 @@ protected void setParameters(List params, PreparedStatement statement) throws SQ\n      * Strategy method allowing derived classes to handle types differently\n      * such as for CLOBs etc.\n      *\n+     * @param statement the statement of interest\n+     * @param i the index of the object of interest\n+     * @param value the new object value\n      * @throws SQLException if a database access error occurs\n      */\n     protected void setObject(PreparedStatement statement, int i, Object value)\n@@ -1397,14 +1434,13 @@ protected void setObject(PreparedStatement statement, int i, Object value)\n     }\n \n     protected Connection createConnection() throws SQLException {\n-        if (isCacheStatements() && useConnection != null) {\n+        if ((cacheStatements || cacheConnection) && useConnection != null) {\n             return useConnection;\n         }\n         if (dataSource != null) {\n-            //Use a doPrivileged here as many different properties need to be\n-            // read, and the policy\n-            //shouldn't have to list them all.\n-            Connection con = null;\n+            // Use a doPrivileged here as many different properties need to be\n+            // read, and the policy shouldn't have to list them all.\n+            Connection con;\n             try {\n                 con = (Connection) AccessController.doPrivileged(new PrivilegedExceptionAction() {\n                     public Object run() throws SQLException {\n@@ -1420,7 +1456,7 @@ public Object run() throws SQLException {\n                     throw (RuntimeException) e;\n                 }\n             }\n-            if (isCacheStatements()) {\n+            if (cacheStatements || cacheConnection) {\n                 useConnection = con;\n             }\n             return con;\n@@ -1435,7 +1471,7 @@ protected void closeResources(Connection connection, Statement statement, Result\n                 results.close();\n             }\n             catch (SQLException e) {\n-                log.log(Level.SEVERE, \"Caught exception closing resultSet: \" + e, e);\n+                log.log(Level.INFO, \"Caught exception closing resultSet: \" + e, e);\n             }\n         }\n         closeResources(connection, statement);\n@@ -1448,15 +1484,15 @@ protected void closeResources(Connection connection, Statement statement) {\n                 statement.close();\n             }\n             catch (SQLException e) {\n-                log.log(Level.SEVERE, \"Caught exception closing statement: \" + e, e);\n+                log.log(Level.INFO, \"Caught exception closing statement: \" + e, e);\n             }\n         }\n         if (dataSource != null) {\n             try {\n                 connection.close();\n             }\n             catch (SQLException e) {\n-                log.log(Level.SEVERE, \"Caught exception closing connection: \" + e, e);\n+                log.log(Level.INFO, \"Caught exception closing connection: \" + e, e);\n             }\n         }\n     }\n@@ -1473,17 +1509,15 @@ protected void configure(Statement statement) {\n     }\n \n     /**\n-     * Enables statements caching.</br>\n+     * Enables statement caching.</br>\n      * if <i>b</i> is true, cache is created and all created prepared statements will be cached.</br>\n      * if <i>b</i> is false, all cached statements will be properly closed.\n      *\n-     * @param b\n+     * @param cacheStatements the new value\n      */\n-    public synchronized void setCacheStatements(boolean b) {\n-        cacheStatements = b;\n-        if (cacheStatements && statementCache == null) {\n-            createStatementCache();\n-        } else if (!cacheStatements && statementCache != null) {\n+    public synchronized void setCacheStatements(boolean cacheStatements) {\n+        this.cacheStatements = cacheStatements;\n+        if (!cacheStatements) {\n             clearStatementCache();\n         }\n     }\n@@ -1495,13 +1529,32 @@ public boolean isCacheStatements() {\n         return cacheStatements;\n     }\n \n+    /**\n+     * Caches the connection used while the closure is active.\n+     *\n+     * @param closure the given closure\n+     * @throws SQLException if a database error occurs\n+     */\n+    public synchronized void cacheConnection(Closure closure) throws SQLException {\n+        cacheConnection = true;\n+        Connection connection = null;\n+        try {\n+            connection = createConnection();\n+            closure.call();\n+        }\n+        finally {\n+            cacheConnection = false;\n+            closeResources(connection, null);\n+        }\n+    }\n+\n     /**\n      * Caches every created preparedStatement in closure <i>closure</i></br>\n-     * Every cached preparedStatement is properly closed after closure has been called.\n+     * Every cached preparedStatement is closed after closure has been called.\n      *\n-     * @param closure\n-     * @throws SQLException\n-     * @see {@link #setCacheStatements(boolean)}\n+     * @param closure the given closure\n+     * @throws SQLException if a database error occurs\n+     * @see #setCacheStatements(boolean)\n      */\n     public synchronized void cacheStatements(Closure closure) throws SQLException {\n         setCacheStatements(true);\n@@ -1517,26 +1570,21 @@ public synchronized void cacheStatements(Closure closure) throws SQLException {\n     }\n \n     private synchronized void clearStatementCache() {\n-        if (statementCache != null) {\n+        if (!statementCache.isEmpty()) {\n             for (Object o : statementCache.values())\n                 try {\n                     ((Statement) o).close();\n                 } catch (SQLException e) {\n+                    log.log(Level.FINEST, \"Failed to close statement. Already closed?\", e);\n                 }\n             statementCache.clear();\n         }\n     }\n \n-    private synchronized void createStatementCache() {\n-        if (statementCache == null) {\n-            statementCache = new HashMap();\n-        }\n-    }\n-\n     private Statement getStatement(Connection connection, String sql) throws SQLException {\n         Statement stmt;\n-        if (isCacheStatements()) {\n-            stmt = (Statement) statementCache.get(sql);\n+        if (cacheStatements) {\n+            stmt = statementCache.get(sql);\n             if (stmt == null) {\n                 synchronized (statementCache) {\n                     stmt = createStatement(connection);\n@@ -1551,7 +1599,7 @@ private Statement getStatement(Connection connection, String sql) throws SQLExce\n \n     private PreparedStatement getPreparedStatement(Connection connection, String sql, int returnGeneratedKeys) throws SQLException {\n         PreparedStatement pStmt;\n-        if (isCacheStatements()) {\n+        if (cacheStatements) {\n             pStmt = (PreparedStatement) statementCache.get(sql);\n             if (pStmt == null) {\n                 synchronized (statementCache) {",
                "raw_url": "https://github.com/apache/groovy/raw/f433a5ea14a731f65318f3c66efc5e7c01e2bb44/src/main/groovy/sql/Sql.java",
                "sha": "2ae697c2f1a097eecf228b0256e57573b6b0b22d",
                "status": "modified"
            },
            {
                "additions": 44,
                "blob_url": "https://github.com/apache/groovy/blob/f433a5ea14a731f65318f3c66efc5e7c01e2bb44/src/test/groovy/sql/SqlCacheTest.groovy",
                "changes": 81,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/sql/SqlCacheTest.groovy?ref=f433a5ea14a731f65318f3c66efc5e7c01e2bb44",
                "deletions": 37,
                "filename": "src/test/groovy/sql/SqlCacheTest.groovy",
                "patch": "@@ -87,38 +87,35 @@ class SqlCacheTest extends GroovyTestCase {\n         }\r\n     }\r\n \r\n-    /**\r\n-     * Test with saveOn\r\n-     * Statements are prepared only if need be.\r\n-     * There's 3 different statements and only 3 calls to prepareStatement\r\n-     */\r\n     void testCachePreparedStatements() {\r\n         prepareStatementCallCounter = 0\r\n         prepareStatementExpectedCall = 3\r\n         sql.cacheStatements {\r\n-            sql.eachRow(\"SELECT * FROM PERSON\", []) { r ->\r\n-                sql.eachRow(\"SELECT * FROM PERSON_FOOD WHERE personid = ?\", [r[\"id\"]]) { pf ->\r\n-                    sql.firstRow(\"SELECT * FROM FOOD WHERE id = ?\", [pf[\"foodid\"]])\r\n-                }\r\n-            }\r\n+            invokeQuery()\r\n         }\r\n-        assert prepareStatementCallCounter == 3\r\n+        assert prepareStatementCallCounter == 3 // 3 diff statements\r\n+    }\r\n+\r\n+    void testCacheConection() {\r\n+        prepareStatementCallCounter = 0\r\n+        sql.cacheConnection {\r\n+            invokeQuery()\r\n+        }\r\n+        assert prepareStatementCallCounter == 13\r\n     }\r\n \r\n-    /**\r\n-     * test without saveOn.\r\n-     * Statements are prepared each time.\r\n-     * There's 3 different statements but more than 3 calls to\r\n-     * prepareStatement\r\n-     */\r\n     void testNotCacheStatements() {\r\n         prepareStatementCallCounter = 0\r\n-        sql.eachRow(\"SELECT * FROM PERSON\", []) {r ->\r\n-            sql.eachRow(\"SELECT * FROM PERSON_FOOD WHERE personid = ?\", [r[\"id\"]]) {pf ->\r\n-                sql.firstRow(\"SELECT * FROM FOOD WHERE id = ?\", [pf[\"foodid\"]])\r\n+        invokeQuery()\r\n+        assert prepareStatementCallCounter == 13\r\n+    }\r\n+\r\n+    private invokeQuery() {\r\n+        sql.eachRow(\"SELECT * FROM PERSON\", []) { person ->\r\n+            sql.eachRow(\"SELECT * FROM PERSON_FOOD WHERE personid = ?\", [person.id]) { food ->\r\n+                sql.firstRow(\"SELECT * FROM FOOD WHERE id = ?\", [food.foodid])\r\n             }\r\n         }\r\n-        assert prepareStatementCallCounter == 13\r\n     }\r\n \r\n     /**\r\n@@ -131,7 +128,7 @@ class SqlCacheTest extends GroovyTestCase {\n      * prepareStatementCallCounter must be increased.\r\n      *\r\n      */\r\n-    void testCaching() {\r\n+    void testManuallyControlledCaching() {\r\n         sql.cacheStatements = true\r\n         sql.firstRow(\"SELECT * FROM PERSON WHERE lastname NOT like ? \", ['%a%'])\r\n         assert prepareStatementCallCounter == 1\r\n@@ -159,7 +156,7 @@ class SqlCacheTest extends GroovyTestCase {\n     }\r\n \r\n     /**\r\n-     * @see #testCaching()\r\n+     * @see #testManuallyControlledCaching()\r\n      */\r\n     void testNoCaching() {\r\n         // preparedStatements\r\n@@ -181,7 +178,7 @@ class SqlCacheTest extends GroovyTestCase {\n      * Use a wrapped delegate for counting javax.sql.DataSource.getConnection() calls.\r\n      * When caching is off, javax.sql.DataSource.getConnection() must be called each time.\r\n      */\r\n-    void testCachingWithDataSource() {\r\n+    void testManuallyControlledCachingWithDataSource() {\r\n         def connectionCallNumber = 0\r\n         def methodOverride = [getConnection:{connectionCallNumber++; ds.getConnection()}]\r\n         DataSource wrappedDs = ProxyGenerator.INSTANCE.instantiateDelegate(methodOverride, [DataSource], ds)\r\n@@ -202,36 +199,46 @@ class SqlCacheTest extends GroovyTestCase {\n         assert connectionCallNumber == 3\r\n     }\r\n \r\n-    /**\r\n-     * Tests #1 Exception is not swallowed\r\n-     */\r\n-    void testException() {\r\n+    void testExceptionIsNotSwallowedCachingStatements() {\r\n+        checkExceptionIsNotSwallowedCachingStatements(new Exception('test.exception'))\r\n+    }\r\n+\r\n+    void testSQLExceptionIsNotSwallowedCachingStatements() {\r\n+        checkExceptionIsNotSwallowedCachingStatements(new SQLException('test.exception'))\r\n+    }\r\n+\r\n+    private checkExceptionIsNotSwallowedCachingStatements(Throwable t) {\r\n         try {\r\n             sql.cacheStatements {\r\n                 sql.eachRow(\"SELECT * FROM PERSON\", []) {\r\n-                    throw new Exception('test.exception')\r\n+                    throw t\r\n                 }\r\n             }\r\n             fail('Exception must be raised !')\r\n         } catch (Exception e) {\r\n-            assert e.message == 'test.exception'\r\n+            assert e.message == t.message\r\n             assert !sql.cacheStatements\r\n         }\r\n     }\r\n \r\n-    /**\r\n-     * Tests #1 SQLException is not swallowed\r\n-     */\r\n-    void testSQLException() {\r\n+    void testExceptionIsNotSwallowedCachingConnection() {\r\n+        checkExceptionIsNotSwallowedCachingConnection(new Exception('test.exception'))\r\n+    }\r\n+\r\n+    void testSQLExceptionIsNotSwallowedCachingConnection() {\r\n+        checkExceptionIsNotSwallowedCachingConnection(new SQLException('test.exception'))\r\n+    }\r\n+\r\n+    private checkExceptionIsNotSwallowedCachingConnection(Throwable t) {\r\n         try {\r\n-            sql.cacheStatements {\r\n+            sql.cacheConnection {\r\n                 sql.eachRow(\"SELECT * FROM PERSON\", []) {\r\n-                    throw new SQLException('test.exception')\r\n+                    throw t\r\n                 }\r\n             }\r\n             fail('Exception must be raised !')\r\n         } catch (Exception e) {\r\n-            assert e.message == 'test.exception'\r\n+            assert e.message == t.message\r\n             assert !sql.cacheStatements\r\n         }\r\n     }\r",
                "raw_url": "https://github.com/apache/groovy/raw/f433a5ea14a731f65318f3c66efc5e7c01e2bb44/src/test/groovy/sql/SqlCacheTest.groovy",
                "sha": "48fe89545cbfb337c011d10f4f0041a98dbf22c3",
                "status": "modified"
            }
        ],
        "message": "GROOVY-1725: SQL pipeline improvement\nGROOVY-2793: NullPointerException when using SQL.rollback()/commit() when DataSource is being used\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@13342 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/7e7b34994f731f3c7775431ddabe1c9e42f33d12",
        "patched_files": [
            "Sql.java",
            "pom.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "SqlCacheTest.java"
        ]
    },
    "groovy_f5ff44a": {
        "bug_id": "groovy_f5ff44a",
        "commit": "https://github.com/apache/groovy/commit/f5ff44a4a528ca61d9293abf05a9802e63a5b60c",
        "file": [
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/groovy/blob/f5ff44a4a528ca61d9293abf05a9802e63a5b60c/src/main/groovy/lang/GroovyClassLoader.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/GroovyClassLoader.java?ref=f5ff44a4a528ca61d9293abf05a9802e63a5b60c",
                "deletions": 22,
                "filename": "src/main/groovy/lang/GroovyClassLoader.java",
                "patch": "@@ -538,47 +538,48 @@ protected synchronized Class loadClass(final String name, boolean resolve) throw\n             }\n         }\n         \n-        boolean loadGroovyFile = false;\n         Class cls = null;\n         ClassNotFoundException last = null;\n         try {\n             cls = super.loadClass(name, resolve);\n     \n+            boolean recompile = false;\n             if (getTimeStamp(cls) < Long.MAX_VALUE) {\n-                Class[] inters = cls.getInterfaces();\n-                boolean isGroovyObject = false;\n+                Class[] inters = cls.getInterfaces();                \n                 for (int i = 0; i < inters.length; i++) {\n                     if (inters[i].getName().equals(GroovyObject.class.getName())) {\n-                        loadGroovyFile = true;\n+                        recompile=true;\n                         break;\n                     }\n-                }\n+                }                \n             }\n+            if (!recompile) return cls;\n         } catch (ClassNotFoundException cnfe) {\n             last = cnfe; \n-            loadGroovyFile=true;\n         }\n         \n-        if (loadGroovyFile) {\n-            try {\n-                File source = (File) AccessController.doPrivileged(new PrivilegedAction() {\n-                    public Object run() {\n-                        return getSourceFile(name);\n-                    }\n-                });\n-                if (source != null) {\n-                    if ((cls!=null && isSourceNewer(source, cls)) || (cls==null)) {\n-                      cls = parseClass(source);\n-                    }\n+        // try groovy file\n+        try {\n+            File source = (File) AccessController.doPrivileged(new PrivilegedAction() {\n+                public Object run() {\n+                    return getSourceFile(name);\n                 }\n-            } catch (Exception e) {\n-                synchronized (cache) {\n-                    cache.put(name, NOT_RESOLVED.class);\n+            });\n+            if (source != null) {\n+                if ((cls!=null && isSourceNewer(source, cls)) || (cls==null)) {\n+                    cls = parseClass(source);\n                 }\n-                throw new ClassNotFoundException(\"Failed to parse groovy file: \" + name, e);\n             }\n+        } catch (Exception e) {\n+            synchronized (cache) {\n+                cache.put(name, NOT_RESOLVED.class);\n+            }\n+            throw new ClassNotFoundException(\"Failed to parse groovy file: \" + name, e);\n         }\n-        if (cls==null) throw last;\n+        if (cls==null) {\n+            if (last==null) throw new AssertionError(true);\n+            throw last;            \n+        }        \n         return cls;\n     }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/f5ff44a4a528ca61d9293abf05a9802e63a5b60c/src/main/groovy/lang/GroovyClassLoader.java",
                "sha": "4d9dd26e6f30ad3b1f5f17cb23c336e555ea1cb1",
                "status": "modified"
            }
        ],
        "message": "another change to avoid NPEs during handling dependent scripts\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@2332 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/5835d302ae2e9934160274d016bec495898d0c5d",
        "patched_files": [
            "GroovyClassLoader.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "GroovyClassLoaderTest.java"
        ]
    },
    "groovy_f6a194f": {
        "bug_id": "groovy_f6a194f",
        "commit": "https://github.com/apache/groovy/commit/f6a194fe908666396988df4ce7e5e2b305091f31",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/f6a194fe908666396988df4ce7e5e2b305091f31/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java?ref=f6a194fe908666396988df4ce7e5e2b305091f31",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "patch": "@@ -3373,6 +3373,8 @@ protected void storeType(Expression exp, ClassNode cn) {\n             cn = getWrapper(cn);\n         } else if (exp instanceof MethodCallExpression && ((MethodCallExpression) exp).isSafe() && isPrimitiveType(cn)) {\n             cn = getWrapper(cn);\n+        } else if (exp instanceof PropertyExpression && ((PropertyExpression) exp).isSafe() && isPrimitiveType(cn)) {\n+            cn = getWrapper(cn);\n         }\n         if (cn == UNKNOWN_PARAMETER_TYPE) {\n             // this can happen for example when \"null\" is used in an assignment or a method parameter.",
                "raw_url": "https://github.com/apache/groovy/raw/f6a194fe908666396988df4ce7e5e2b305091f31/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "sha": "05522de1a1801e3d67772ae04118ce1fffcf505f",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/groovy/blob/f6a194fe908666396988df4ce7e5e2b305091f31/src/test/org/codehaus/groovy/classgen/asm/sc/BugsStaticCompileTest.groovy",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/classgen/asm/sc/BugsStaticCompileTest.groovy?ref=f6a194fe908666396988df4ce7e5e2b305091f31",
                "deletions": 3,
                "filename": "src/test/org/codehaus/groovy/classgen/asm/sc/BugsStaticCompileTest.groovy",
                "patch": "@@ -259,7 +259,7 @@ class BugsStaticCompileTest extends BugsSTCTest implements StaticCompilationTest\n         }\n         A a = new A()\n         @ASTTest(phase=INSTRUCTION_SELECTION, value={\n-            assert node.getNodeMetaData(INFERRED_TYPE) == int_TYPE\n+            assert node.getNodeMetaData(INFERRED_TYPE) == Integer_TYPE\n         })\n         def x = a?.x\n         '''\n@@ -272,7 +272,7 @@ class BugsStaticCompileTest extends BugsSTCTest implements StaticCompilationTest\n         }\n         A a = new A()\n         @ASTTest(phase=INSTRUCTION_SELECTION, value={\n-            assert node.getNodeMetaData(INFERRED_TYPE) == long_TYPE\n+            assert node.getNodeMetaData(INFERRED_TYPE) == Long_TYPE\n         })\n         def x = a?.x\n         '''\n@@ -285,7 +285,7 @@ class BugsStaticCompileTest extends BugsSTCTest implements StaticCompilationTest\n         }\n         A a = new A()\n         @ASTTest(phase=INSTRUCTION_SELECTION, value={\n-            assert node.getNodeMetaData(INFERRED_TYPE) == char_TYPE\n+            assert node.getNodeMetaData(INFERRED_TYPE) == Character_TYPE\n         })\n         def x = a?.x\n         assert x == 'a'\n@@ -1426,5 +1426,18 @@ println someInt\n             assert (char) 1 != null\n         '''\n     }\n+\n+    // GROOVY-7639\n+    void testComparisonOfPrimitiveWithNullSafePrimitivePropertyExpression() {\n+        assertScript '''\n+            class Foo {\n+                int bar\n+            }\n+            Foo foo = null\n+            assert !(foo?.bar == 7)\n+            assert !(foo?.bar > 7)\n+            assert foo?.bar < 7\n+        '''\n+    }\n }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/f6a194fe908666396988df4ce7e5e2b305091f31/src/test/org/codehaus/groovy/classgen/asm/sc/BugsStaticCompileTest.groovy",
                "sha": "617e3757f54ea0f505a0fcf8498fba3e8f241a60",
                "status": "modified"
            }
        ],
        "message": "GROOVY-7639 Comparing primitive to null safe primitive property expression should not throw NPE\n* Correct assertions in tests for GROOVY-5613\nCloses #167",
        "parent": "https://github.com/apache/groovy/commit/58d4d6a16a3f7f0beb17feb0e5e15cffe50bb145",
        "patched_files": [
            "StaticTypeCheckingVisitor.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "BugsStaticCompileTest.java"
        ]
    },
    "groovy_f815a54": {
        "bug_id": "groovy_f815a54",
        "commit": "https://github.com/apache/groovy/commit/f815a54a3639fe6bc311f07151b58e018a7104df",
        "file": [
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/groovy/blob/f815a54a3639fe6bc311f07151b58e018a7104df/src/main/org/codehaus/groovy/transform/sc/StaticCompilationVisitor.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/sc/StaticCompilationVisitor.java?ref=f815a54a3639fe6bc311f07151b58e018a7104df",
                "deletions": 2,
                "filename": "src/main/org/codehaus/groovy/transform/sc/StaticCompilationVisitor.java",
                "patch": "@@ -35,6 +35,7 @@\n \n import java.util.*;\n \n+import static org.codehaus.groovy.ast.tools.GenericsUtils.*;\n import static org.codehaus.groovy.transform.sc.StaticCompilationMetadataKeys.*;\n import static org.codehaus.groovy.transform.stc.StaticTypesMarker.DIRECT_METHOD_CALL_TARGET;\n import static org.objectweb.asm.Opcodes.ACC_PUBLIC;\n@@ -215,9 +216,19 @@ private void addPrivateBridgeMethods(final ClassNode node) {\n         for (MethodNode method : methods) {\n             if (accessedMethods.contains(method)) {\n                 i++;\n+                ClassNode declaringClass = method.getDeclaringClass();\n+                Map<String,ClassNode> genericsSpec = createGenericsSpec(node);\n+                genericsSpec = addMethodGenerics(method, genericsSpec);\n+                extractSuperClassGenerics(node, declaringClass, genericsSpec);\n                 Parameter[] methodParameters = method.getParameters();\n                 Parameter[] newParams = new Parameter[methodParameters.length+1];\n-                System.arraycopy(methodParameters, 0, newParams, 1, methodParameters.length);\n+                for (int j = 1; j < newParams.length; j++) {\n+                    Parameter orig = methodParameters[j-1];\n+                    newParams[j] = new Parameter(\n+                            correctToGenericsSpecRecurse(genericsSpec, orig.getOriginType(),methodSpecificGenerics(method)),\n+                            orig.getName()\n+                    );\n+                }\n                 newParams[0] = new Parameter(node.getPlainNodeReference(), \"$that\");\n                 Expression arguments;\n                 if (method.getParameters()==null || method.getParameters().length==0) {\n@@ -234,7 +245,12 @@ private void addPrivateBridgeMethods(final ClassNode node) {\n                 mce.setMethodTarget(method);\n \n                 ExpressionStatement returnStatement = new ExpressionStatement(mce);\n-                MethodNode bridge = node.addMethod(\"access$\"+i, access, method.getReturnType(), newParams, method.getExceptions(), returnStatement);\n+                MethodNode bridge = node.addMethod(\n+                        \"access$\"+i, access,\n+                        correctToGenericsSpecRecurse(genericsSpec, method.getReturnType(), methodSpecificGenerics(method)),\n+                        newParams,\n+                        method.getExceptions(),\n+                        returnStatement);\n                 privateBridgeMethods.put(method, bridge);\n                 bridge.addAnnotation(new AnnotationNode(COMPILESTATIC_CLASSNODE));\n             }\n@@ -244,6 +260,17 @@ private void addPrivateBridgeMethods(final ClassNode node) {\n         }\n     }\n \n+    private static List<String> methodSpecificGenerics(final MethodNode method) {\n+        List<String> genericTypeTokens = new ArrayList<String>();\n+        GenericsType[] candidateGenericsTypes = method.getGenericsTypes();\n+        if (candidateGenericsTypes != null) {\n+            for (GenericsType gt : candidateGenericsTypes) {\n+                genericTypeTokens.add(gt.getName());\n+            }\n+        }\n+        return genericTypeTokens;\n+    }\n+\n     private void memorizeInitialExpressions(final MethodNode node) {\n         // add node metadata for default parameters because they are erased by the Verifier\n         if (node.getParameters()!=null) {",
                "raw_url": "https://github.com/apache/groovy/raw/f815a54a3639fe6bc311f07151b58e018a7104df/src/main/org/codehaus/groovy/transform/sc/StaticCompilationVisitor.java",
                "sha": "39c8b842da229f4e07e8921e7154a77f27fc9d2b",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/groovy/blob/f815a54a3639fe6bc311f07151b58e018a7104df/src/test/org/codehaus/groovy/classgen/asm/sc/MethodCallsStaticCompilationTest.groovy",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/classgen/asm/sc/MethodCallsStaticCompilationTest.groovy?ref=f815a54a3639fe6bc311f07151b58e018a7104df",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/classgen/asm/sc/MethodCallsStaticCompilationTest.groovy",
                "patch": "@@ -195,9 +195,34 @@ import groovy.transform.TypeCheckingMode//import org.codehaus.groovy.classgen.as\n         '''\n     }\n \n+    // GROOVY-7264\n+    void testCallProtectedMethodWithGenericTypes() {\n+        assertScript '''\n+            import org.codehaus.groovy.classgen.asm.sc.MethodCallsStaticCompilationTest.BaseGeneric\n+\n+            class Ext extends BaseGeneric<Integer> {\n+\n+                int doSomething() {\n+                    def c = {\n+                        foo(123)\n+                    }\n+                    c.call()?1:0\n+                }\n+            }\n+            def ext = new Ext()\n+            assert ext.doSomething() == 1\n+        '''\n+    }\n+\n     public static class Base {\n         protected int foo() {\n             123\n         }\n     }\n+\n+    public static class BaseGeneric<T> {\n+        protected boolean foo(T t) {\n+            true\n+        }\n+    }\n }",
                "raw_url": "https://github.com/apache/groovy/raw/f815a54a3639fe6bc311f07151b58e018a7104df/src/test/org/codehaus/groovy/classgen/asm/sc/MethodCallsStaticCompilationTest.groovy",
                "sha": "69e78dae6bbeb5cef96edc821b8d21ddf8f0f3e3",
                "status": "modified"
            }
        ],
        "message": "GROOVY-7264: NPE in TypeResolver when a bridge method involves generic placeholders not defined in the class itself",
        "parent": "https://github.com/apache/groovy/commit/adca098206264027bd4db50fbfad48ca33c507f9",
        "patched_files": [
            "StaticCompilationVisitor.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "MethodCallsStaticCompilationTest.java"
        ]
    },
    "groovy_f855a6a": {
        "bug_id": "groovy_f855a6a",
        "commit": "https://github.com/apache/groovy/commit/f855a6a3eb97a53ef5699c6daf2b684a23ff68aa",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/groovy/blob/f855a6a3eb97a53ef5699c6daf2b684a23ff68aa/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java?ref=f855a6a3eb97a53ef5699c6daf2b684a23ff68aa",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java",
                "patch": "@@ -198,6 +198,9 @@ public static boolean isCase(Object caseValue, Object switchValue) {\n     }\n \n     public static boolean isCase(String caseValue, Object switchValue) {\n+        if (switchValue == null) {\n+            return caseValue == null;\n+        }\n         return caseValue.equals(switchValue.toString());\n     }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/f855a6a3eb97a53ef5699c6daf2b684a23ff68aa/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java",
                "sha": "af07ac0cccbc4392bad097d3905705a544cc4816",
                "status": "modified"
            }
        ],
        "message": "fixed NPE\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@535 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/9aaf4fd018b1c47359ff4fc991a5bce4700a494b",
        "patched_files": [
            "DefaultGroovyMethods.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "DefaultGroovyMethodsTest.java"
        ]
    },
    "groovy_f962b46": {
        "bug_id": "groovy_f962b46",
        "commit": "https://github.com/apache/groovy/commit/f962b4689335c80d64f9ec2ef84e24df652b3ce2",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/groovy/blob/f962b4689335c80d64f9ec2ef84e24df652b3ce2/src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java?ref=f962b4689335c80d64f9ec2ef84e24df652b3ce2",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java",
                "patch": "@@ -200,6 +200,9 @@ public ModuleNode buildAST(SourceUnit sourceUnit, ClassLoader classLoader, Reduc\n         makeModule();\n         try {\n             convertGroovy(ast);\n+            if(output.getStatementBlock().isEmpty() && output.getMethods().isEmpty() && output.getClasses().isEmpty()) {\n+            \toutput.addStatement(ReturnStatement.RETURN_NULL_OR_VOID);\n+            }\n         }\n         catch (ASTRuntimeException e) {\n             throw new ASTParserException(e.getMessage() + \". File: \" + sourceUnit.getName(), e);",
                "raw_url": "https://github.com/apache/groovy/raw/f962b4689335c80d64f9ec2ef84e24df652b3ce2/src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java",
                "sha": "7994f04f57b210cbd9ce44a15cce521b3499fbad",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/groovy/blob/f962b4689335c80d64f9ec2ef84e24df652b3ce2/src/main/org/codehaus/groovy/jsr223/GroovyScriptEngineImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/jsr223/GroovyScriptEngineImpl.java?ref=f962b4689335c80d64f9ec2ef84e24df652b3ce2",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/jsr223/GroovyScriptEngineImpl.java",
                "patch": "@@ -110,7 +110,9 @@ public Object eval(Reader reader, ScriptContext ctx)\n     public Object eval(String script, ScriptContext ctx) \n                        throws ScriptException {\n         try {\n-            return eval(getScriptClass(script), ctx);\n+        \tClass clazz = getScriptClass(script);\n+            if(clazz == null) throw new ScriptException(\"Script class is null\");\n+            return eval(clazz, ctx);\n         } catch (SyntaxException e) {\n             throw new ScriptException(e.getMessage(), \n                                       e.getSourceLocator(), e.getLine());",
                "raw_url": "https://github.com/apache/groovy/raw/f962b4689335c80d64f9ec2ef84e24df652b3ce2/src/main/org/codehaus/groovy/jsr223/GroovyScriptEngineImpl.java",
                "sha": "bf2ab5490b087926d7eff4730761f8a418138742",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/groovy/blob/f962b4689335c80d64f9ec2ef84e24df652b3ce2/src/test/org/codehaus/groovy/antlr/treewalker/UnimplementedSyntaxTest.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/antlr/treewalker/UnimplementedSyntaxTest.java?ref=f962b4689335c80d64f9ec2ef84e24df652b3ce2",
                "deletions": 3,
                "filename": "src/test/org/codehaus/groovy/antlr/treewalker/UnimplementedSyntaxTest.java",
                "patch": "@@ -203,11 +203,17 @@ public void test_SpreadExpressionInGString2_FAILS() throws Exception {\n     // -----------------------\n     // TODO: move somewhere else\n     public void test_StaticImport1() throws Exception {\n-        assertNotNull(compile(\"import static foo.Bar.mooky\"));\n+    \t//GROOVY-3711: The following call now results in a valid script class node, so foo.Bar needs to get resolved.\n+    \tGroovyShell groovyShell = new GroovyShell();\n+    \tcompile(\"package foo; class Bar{}\", groovyShell);\n+        assertNotNull(compile(\"import static foo.Bar.mooky\", groovyShell));\n     }\n \n     public void test_StaticImport2() throws Exception {\n-        assertNotNull(compile(\"import static foo.Bar.*\"));\n+    \t//GROOVY-3711: The following call now results in a valid script class node, so foo.Bar needs to get resolved.\n+    \tGroovyShell groovyShell = new GroovyShell();\n+    \tcompile(\"package foo; class Bar{}\", groovyShell);\n+        assertNotNull(compile(\"import static foo.Bar.*\", groovyShell));\n     }\n \n     // TODO: move somewhere else GROOVY-1874\n@@ -233,9 +239,12 @@ public void test_TypeParameters_FAILS() throws Exception {\n     }\n \n     private Script compile(String input) throws Exception {\n+    \treturn compile(input, new GroovyShell());\n+    }\n+\n+    private Script compile(String input, GroovyShell groovyShell) throws Exception {\n         TraversalTestHelper traverser = new TraversalTestHelper();\n         traverser.traverse(input, SourcePrinter.class, Boolean.FALSE);\n-        GroovyShell groovyShell = new GroovyShell();\n         return groovyShell.parse(input);\n     }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/f962b4689335c80d64f9ec2ef84e24df652b3ce2/src/test/org/codehaus/groovy/antlr/treewalker/UnimplementedSyntaxTest.java",
                "sha": "6ecea81a719b5330c969b1249eabd8448c67b0ce",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/groovy/blob/f962b4689335c80d64f9ec2ef84e24df652b3ce2/src/test/org/codehaus/groovy/jsr223/JSR223Test.groovy",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/jsr223/JSR223Test.groovy?ref=f962b4689335c80d64f9ec2ef84e24df652b3ce2",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/jsr223/JSR223Test.groovy",
                "patch": "@@ -83,4 +83,13 @@ public class JSR223Test extends TestCase {\n         } catch (ScriptException e) {\n         }\n     }\n+\n+    public void testEmptyScriptWithJustImports() {\n+        ScriptEngine engine = manager.getEngineByName(\"groovy\");\n+        assertNotNull(engine);\n+\n+        // GROOVY-3711: The eval of the following script earlier resulted in NPE\n+        // as groovy did not generate a script class in this case\n+        engine.eval(\"import java.lang.*\");\n+    }\n }",
                "raw_url": "https://github.com/apache/groovy/raw/f962b4689335c80d64f9ec2ef84e24df652b3ce2/src/test/org/codehaus/groovy/jsr223/JSR223Test.groovy",
                "sha": "1004f1e94ccc9c3ed695d5c4d302bf271368c6f7",
                "status": "modified"
            }
        ],
        "message": "GROOVY-3711\nGroovyScriptEngine failed with NPE to eval a script that just had import statements and nothing else in script body. Fixed it.\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@17485 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/5e3da4a55bd6f32ddc23c37675bb6e16287798d2",
        "patched_files": [
            "GroovyScriptEngineImpl.java",
            "AntlrParserPlugin.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "JSR223Test.java",
            "UnimplementedSyntaxTest.java"
        ]
    },
    "groovy_feca30c": {
        "bug_id": "groovy_feca30c",
        "commit": "https://github.com/apache/groovy/commit/feca30c017351f48686c09ea041a6c64b00a2494",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/groovy/blob/feca30c017351f48686c09ea041a6c64b00a2494/src/main/groovy/xml/dom/DOMCategory.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/xml/dom/DOMCategory.java?ref=feca30c017351f48686c09ea041a6c64b00a2494",
                "deletions": 1,
                "filename": "src/main/groovy/xml/dom/DOMCategory.java",
                "patch": "@@ -260,7 +260,12 @@ public static NodeList depthFirst(Element self) {\n     }\n \n     public static void setValue(Element self, String value) {\n-        self.getFirstChild().setNodeValue(value);\n+        Node firstChild = self.getFirstChild();\n+        if (firstChild == null) {\n+            firstChild = self.getOwnerDocument().createTextNode(value);\n+            self.appendChild(firstChild);\n+        }\n+        firstChild.setNodeValue(value);\n     }\n \n     public static void putAt(Element self, String property, Object value) {",
                "raw_url": "https://github.com/apache/groovy/raw/feca30c017351f48686c09ea041a6c64b00a2494/src/main/groovy/xml/dom/DOMCategory.java",
                "sha": "79716999fe0481529ba2f84921c8fa8fbb34917c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/feca30c017351f48686c09ea041a6c64b00a2494/src/test/groovy/util/XmlParserTest.groovy",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/util/XmlParserTest.groovy?ref=feca30c017351f48686c09ea041a6c64b00a2494",
                "deletions": 0,
                "filename": "src/test/groovy/util/XmlParserTest.groovy",
                "patch": "@@ -199,6 +199,7 @@ p() {\n     }\n \n     void testElement() {\n+        GpathSyntaxTestSupport.checkUpdateElementValue(getRoot)\n         GpathSyntaxTestSupport.checkElement(getRoot)\n         GpathSyntaxTestSupport.checkFindElement(getRoot)\n         GpathSyntaxTestSupport.checkElementTypes(getRoot)",
                "raw_url": "https://github.com/apache/groovy/raw/feca30c017351f48686c09ea041a6c64b00a2494/src/test/groovy/util/XmlParserTest.groovy",
                "sha": "a9c4d150a1a8a1f9eb9d532402ef75831a083125",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/feca30c017351f48686c09ea041a6c64b00a2494/src/test/groovy/util/XmlSlurperTest.groovy",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/util/XmlSlurperTest.groovy?ref=feca30c017351f48686c09ea041a6c64b00a2494",
                "deletions": 0,
                "filename": "src/test/groovy/util/XmlSlurperTest.groovy",
                "patch": "@@ -53,6 +53,8 @@ class XmlSlurperTest extends GroovyTestCase {\n     }\n \n     void testElement() {\n+        // can't update value directly with XmlSlurper, use replaceNode instead\n+        // GpathSyntaxTestSupport.checkUpdateElementValue(getRoot)\n         GpathSyntaxTestSupport.checkElement(getRoot)\n         GpathSyntaxTestSupport.checkFindElement(getRoot)\n         GpathSyntaxTestSupport.checkElementTypes(getRoot)",
                "raw_url": "https://github.com/apache/groovy/raw/feca30c017351f48686c09ea041a6c64b00a2494/src/test/groovy/util/XmlSlurperTest.groovy",
                "sha": "36984e6d2e7445e42b08c6630152d62ff797e6c4",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/groovy/blob/feca30c017351f48686c09ea041a6c64b00a2494/src/test/groovy/xml/GpathSyntaxTestSupport.groovy",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/xml/GpathSyntaxTestSupport.groovy?ref=feca30c017351f48686c09ea041a6c64b00a2494",
                "deletions": 0,
                "filename": "src/test/groovy/xml/GpathSyntaxTestSupport.groovy",
                "patch": "@@ -47,6 +47,26 @@ class GpathSyntaxTestSupport {\n </root>\n '''\n \n+    static void checkUpdateElementValue(Closure getRoot) {\n+        def root = getRoot('<root><a>foo</a><b/></root>')\n+        assert root != null\n+        def a = root.a[0]\n+        def b = root.b[0]\n+        a.value = a.text() + 'bar'\n+        b.value = 'baz'\n+        String actual = XmlUtil.serialize(root)\n+        def expected = '''\\\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<root>\n+  <a>foobar</a>\n+  <b>baz</b>\n+</root>\n+'''\n+        XMLUnit.ignoreWhitespace = true\n+        def xmlDiff = new Diff(actual, expected)\n+        assert xmlDiff.similar(), xmlDiff.toString()\n+    }\n+\n     static void checkElement(Closure getRoot) {\n         def root = getRoot(sampleXml)\n         assert root != null",
                "raw_url": "https://github.com/apache/groovy/raw/feca30c017351f48686c09ea041a6c64b00a2494/src/test/groovy/xml/GpathSyntaxTestSupport.groovy",
                "sha": "3b22102371d99282bd27b17df9fb8250d0d18e69",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/feca30c017351f48686c09ea041a6c64b00a2494/src/test/groovy/xml/dom/DOMCategoryTest.groovy",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/xml/dom/DOMCategoryTest.groovy?ref=feca30c017351f48686c09ea041a6c64b00a2494",
                "deletions": 0,
                "filename": "src/test/groovy/xml/dom/DOMCategoryTest.groovy",
                "patch": "@@ -45,6 +45,7 @@ class DOMCategoryTest extends GroovyTestCase {\n \n     void testElement() {\n         use(DOMCategory) {\n+            GpathSyntaxTestSupport.checkUpdateElementValue(getRoot)\n             GpathSyntaxTestSupport.checkElement(getRoot)\n             GpathSyntaxTestSupport.checkFindElement(getRoot)\n             GpathSyntaxTestSupport.checkElementTypes(getRoot)",
                "raw_url": "https://github.com/apache/groovy/raw/feca30c017351f48686c09ea041a6c64b00a2494/src/test/groovy/xml/dom/DOMCategoryTest.groovy",
                "sha": "779e4e028bc8290b4d0cd036a16516c78657e657",
                "status": "modified"
            }
        ],
        "message": "GROOVY-5280: DOMCategory: NullPointerException in setValue() when element has no text",
        "parent": "https://github.com/apache/groovy/commit/01d061a860c3df518b155df7550806e34380ff3a",
        "patched_files": [
            "XmlParser.java",
            "XmlSlurper.java",
            "DOMCategory.java",
            "GpathSyntaxTestSupport.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "DOMCategoryTest.java",
            "XmlSlurperTest.java",
            "XmlParserTest.java"
        ]
    }
}