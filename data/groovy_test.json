{
    "groovy_0695d2a": {
        "bug_id": "groovy_0695d2a",
        "commit": "https://github.com/apache/groovy/commit/0695d2a5d518816059e43d6fe842faa010219064",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/0695d2a5d518816059e43d6fe842faa010219064/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java?ref=0695d2a5d518816059e43d6fe842faa010219064",
                "deletions": 2,
                "filename": "src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java",
                "patch": "@@ -4322,7 +4322,7 @@ private static Collection flatten(Collection elements, Collection addTo) {\n         for (Object element : elements) {\n             if (element instanceof Collection) {\n                 flatten((Collection) element, addTo);\n-            } else if (element.getClass().isArray()) {\n+            } else if (element != null && element.getClass().isArray()) {\n                 flatten(DefaultTypeTransformation.arrayAsCollection(element), addTo);\n             } else {\n                 // found a leaf\n@@ -4351,7 +4351,7 @@ private static Collection flatten(Collection elements, Collection addTo, Closure\n         for (Object element : elements) {\n             if (element instanceof Collection) {\n                 flatten((Collection) element, addTo, flattenUsing);\n-            } else if (element.getClass().isArray()) {\n+            } else if (element != null && element.getClass().isArray()) {\n                 flatten(DefaultTypeTransformation.arrayAsCollection(element), addTo, flattenUsing);\n             } else {\n                 Object flattened = flattenUsing.call(new Object[]{element});",
                "raw_url": "https://github.com/apache/groovy/raw/0695d2a5d518816059e43d6fe842faa010219064/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java",
                "sha": "cd21a3150c9e88b4321d1baf11c258dd8b2504de",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/groovy/blob/0695d2a5d518816059e43d6fe842faa010219064/src/test/groovy/ListTest.groovy",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/ListTest.groovy?ref=0695d2a5d518816059e43d6fe842faa010219064",
                "deletions": 3,
                "filename": "src/test/groovy/ListTest.groovy",
                "patch": "@@ -219,10 +219,11 @@ class ListTest extends GroovyTestCase {\n         assert (b == a && a == [1, \"foo\", (short)3, 4L])\n     }\n \n+    // incorporates GROOVY-2904 and GROOVY-3102\n     void testListFlatten() {\n-        def orig = [[[4, 5, 6, [46, 7, \"erer\"]], 4, [3, 6, 78]], 4]\n+        def orig = [[[4, 5, 6, [46, 7, \"erer\"]], null, 4, [3, 6, 78]], 4]\n         def flat = orig.flatten()\n-        assert flat == [4, 5, 6, 46, 7, \"erer\", 4, 3, 6, 78, 4]\n+        assert flat == [4, 5, 6, 46, 7, \"erer\", null, 4, 3, 6, 78, 4]\n     }\n     \n     void testSetFlatten() {\n@@ -243,8 +244,9 @@ class ListTest extends GroovyTestCase {\n         assert flat == [\"o\", \"n\", \"e\", \"t\", \"w\", \"o\"]\n     }\n \n+    // incorporates GROOVY-2904 and GROOVY-3102\n     void testFlattenListWithSuppliedClosure() {\n-        def orig = [[[4, 5, 6, [46, 7, \"erer\"]], 4, [3, 6, 78]], 4]\n+        def orig = [[[4, 5, 6, [46, 7, \"erer\"]], null, 4, [3, 6, 78]], 4]\n         def flat = orig.flatten{ it.iterator().toList() }\n         assert flat == [4, 5, 6, 46, 7, \"e\", \"r\", \"e\", \"r\", 4, 3, 6, 78, 4]\n     }",
                "raw_url": "https://github.com/apache/groovy/raw/0695d2a5d518816059e43d6fe842faa010219064/src/test/groovy/ListTest.groovy",
                "sha": "9f43bc2da282277a2eb718826a91dc30f22e8785",
                "status": "modified"
            }
        ],
        "message": "GROOVY-3102: NPE with flatten() in case of null elements in the collection\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@13773 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/44d164b6447909bd9b9727199928e1b523f92daf",
        "patched_files": [
            "DefaultGroovyMethods.java",
            "ListTest.groovy"
        ],
        "repo": "groovy",
        "unit_tests": [
            "DefaultGroovyMethodsTest.java"
        ]
    },
    "groovy_257b914": {
        "bug_id": "groovy_257b914",
        "commit": "https://github.com/apache/groovy/commit/257b9147034ce8b088a2b7294c43f5ba169eaa74",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/groovy/blob/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/main/org/codehaus/groovy/ast/expr/MethodCallExpression.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/ast/expr/MethodCallExpression.java?ref=257b9147034ce8b088a2b7294c43f5ba169eaa74",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/ast/expr/MethodCallExpression.java",
                "patch": "@@ -58,6 +58,7 @@\n     private Expression objectExpression;\n     private String method;\n     private Expression arguments;\n+    private boolean safe;\n     \n     public MethodCallExpression(Expression objectExpression, String method, Expression arguments) {\n         this.objectExpression = objectExpression;\n@@ -85,6 +86,18 @@ public String getText() {\n         return objectExpression.getText() + \".\" + method + arguments.getText();\n     }\n \n+    /**\n+     * @return is this a safe method call, i.e. if true then if the source object is null\n+     * then this method call will return null rather than throwing a null pointer exception\n+     */\n+    public boolean isSafe() {\n+        return safe;\n+    }\n+\n+    public void setSafe(boolean safe) {\n+        this.safe = safe;\n+    }\n+\n     public String toString() {\n         return super.toString() + \"[object: \" + objectExpression + \" method: \" + method + \" arguments: \" + arguments + \"]\";\n     }",
                "raw_url": "https://github.com/apache/groovy/raw/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/main/org/codehaus/groovy/ast/expr/MethodCallExpression.java",
                "sha": "e996bce2de9c6cecec0f82036f7369ddbb517f67",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/groovy/blob/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/main/org/codehaus/groovy/ast/expr/PropertyExpression.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/ast/expr/PropertyExpression.java?ref=257b9147034ce8b088a2b7294c43f5ba169eaa74",
                "deletions": 2,
                "filename": "src/main/org/codehaus/groovy/ast/expr/PropertyExpression.java",
                "patch": "@@ -57,12 +57,18 @@\n \n     private Expression objectExpression;\n     private String property;\n-    \n+    private boolean safe;\n+\n     public PropertyExpression(Expression objectExpression, String property) {\n+        this(objectExpression, property, false);\n+    }\n+\n+    public PropertyExpression(Expression objectExpression, String property, boolean safe) {\n         this.objectExpression = objectExpression;\n         this.property = property;\n+        this.safe = safe;\n     }\n-    \n+\n     public void visit(GroovyCodeVisitor visitor) {\n         visitor.visitPropertyExpression(this);\n     }\n@@ -79,6 +85,14 @@ public String getText() {\n         return objectExpression.getText() + \".\" + property;\n     }\n \n+    /**\n+     * @return is this a safe navigation, i.e. if true then if the source object is null\n+     * then this navigation will return null\n+     */\n+    public boolean isSafe() {\n+        return safe;\n+    }\n+\n     public String toString() {\n         return super.toString() + \"[object: \" + objectExpression + \" property: \" + property + \"]\";\n     }",
                "raw_url": "https://github.com/apache/groovy/raw/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/main/org/codehaus/groovy/ast/expr/PropertyExpression.java",
                "sha": "8be786f229f5fe647b5a6518489a9b133f12ae6e",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/groovy/blob/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/main/org/codehaus/groovy/classgen/ClassGenerator.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/classgen/ClassGenerator.java?ref=257b9147034ce8b088a2b7294c43f5ba169eaa74",
                "deletions": 7,
                "filename": "src/main/org/codehaus/groovy/classgen/ClassGenerator.java",
                "patch": "@@ -138,12 +138,15 @@\n \n     // cached values\n     MethodCaller invokeMethodMethod = MethodCaller.newStatic(InvokerHelper.class, \"invokeMethod\");\n+    MethodCaller invokeMethodSafeMethod = MethodCaller.newStatic(InvokerHelper.class, \"invokeMethodSafe\");\n     MethodCaller invokeStaticMethodMethod = MethodCaller.newStatic(InvokerHelper.class, \"invokeStaticMethod\");\n     MethodCaller invokeConstructorMethod = MethodCaller.newStatic(InvokerHelper.class, \"invokeConstructor\");\n     MethodCaller invokeClosureMethod = MethodCaller.newStatic(InvokerHelper.class, \"invokeClosure\");\n     MethodCaller getPropertyMethod = MethodCaller.newStatic(InvokerHelper.class, \"getProperty\");\n+    MethodCaller getPropertySafeMethod = MethodCaller.newStatic(InvokerHelper.class, \"getPropertySafe\");\n     MethodCaller setPropertyMethod = MethodCaller.newStatic(InvokerHelper.class, \"setProperty\");\n     MethodCaller setPropertyMethod2 = MethodCaller.newStatic(InvokerHelper.class, \"setProperty2\");\n+    MethodCaller setPropertySafeMethod2 = MethodCaller.newStatic(InvokerHelper.class, \"setPropertySafe2\");\n     MethodCaller asIteratorMethod = MethodCaller.newStatic(InvokerHelper.class, \"asIterator\");\n     MethodCaller asBool = MethodCaller.newStatic(InvokerHelper.class, \"asBool\");\n     MethodCaller notBoolean = MethodCaller.newStatic(InvokerHelper.class, \"notBoolean\");\n@@ -600,7 +603,7 @@ public void visitTryCatchFinally(TryCatchStatement statement) {\n \n         //final String exceptionTypeInternalName = (catchStatement != null) ? getTypeDescription(exceptionType) : null;\n         final String exceptionTypeInternalName = (catchStatement != null) ? getClassInternalName(exceptionType) : null;\n-        \n+\n         exceptionBlocks.add(new Runnable() {\n             public void run() {\n                 cv.visitTryCatchBlock(l0, l1, l5, exceptionTypeInternalName);\n@@ -1097,7 +1100,13 @@ else if (size == 1) {\n                     arguments.visit(this);\n                 }\n \n-                invokeMethodMethod.call(cv);\n+                if (call.isSafe()) {\n+                    invokeMethodSafeMethod.call(cv);\n+\n+                }\n+                else {\n+                    invokeMethodMethod.call(cv);\n+                }\n             }\n         }\n     }\n@@ -1163,14 +1172,22 @@ public void visitPropertyExpression(PropertyExpression expression) {\n \n         cv.visitLdcInsn(expression.getProperty());\n \n-        if (left) {\n-            setPropertyMethod2.call(cv);\n+        if (expression.isSafe()) {\n+            if (left) {\n+                setPropertySafeMethod2.call(cv);\n+            }\n+            else {\n+                getPropertySafeMethod.call(cv);\n+            }\n         }\n         else {\n-            getPropertyMethod.call(cv);\n+            if (left) {\n+                setPropertyMethod2.call(cv);\n+            }\n+            else {\n+                getPropertyMethod.call(cv);\n+            }\n         }\n-\n-        //cv.visitInsn(POP);\n     }\n \n     public void visitFieldExpression(FieldExpression expression) {",
                "raw_url": "https://github.com/apache/groovy/raw/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/main/org/codehaus/groovy/classgen/ClassGenerator.java",
                "sha": "caddab8ea01d2f0074b6b9ee56c6624f856eefd1",
                "status": "modified"
            },
            {
                "additions": 56,
                "blob_url": "https://github.com/apache/groovy/blob/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/main/org/codehaus/groovy/runtime/InvokerHelper.java",
                "changes": 91,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/InvokerHelper.java?ref=257b9147034ce8b088a2b7294c43f5ba169eaa74",
                "deletions": 35,
                "filename": "src/main/org/codehaus/groovy/runtime/InvokerHelper.java",
                "patch": "@@ -71,7 +71,7 @@\n public class InvokerHelper {\n     public static final Object[] EMPTY_ARGS = {\n     };\n-    \n+\n     private static final Invoker singleton = new Invoker();\n \n     public static MetaClass getMetaClass(Object object) {\n@@ -86,6 +86,13 @@ public static Object invokeMethod(Object object, String methodName, Object argum\n         return getInstance().invokeMethod(object, methodName, arguments);\n     }\n \n+    public static Object invokeMethodSafe(Object object, String methodName, Object arguments) {\n+        if (object != null) {\n+            return getInstance().invokeMethod(object, methodName, arguments);\n+        }\n+        return null;\n+    }\n+\n     public static Object invokeStaticMethod(String type, String methodName, Object arguments) {\n         return getInstance().invokeStaticMethod(type, methodName, arguments);\n     }\n@@ -118,24 +125,37 @@ public static String toString(Object arguments) {\n         return getInstance().toString(arguments);\n     }\n \n+    public static Object getProperty(Object object, String property) {\n+        return getInstance().getProperty(object, property);\n+    }\n+\n+    public static Object getPropertySafe(Object object, String property) {\n+        if (object != null) {\n+            return getInstance().getProperty(object, property);\n+        }\n+        return null;\n+    }\n+\n     public static void setProperty(Object object, String property, Object newValue) {\n         getInstance().setProperty(object, property, newValue);\n     }\n \n-\t/**\n-\t * This is so we don't have to reorder the stack when we call this method.\n-\t * At some point a better name might be in order.\n-\t * \n-\t * @param newValue\n-\t * @param object\n-\t * @param property\n-\t */\n-\tpublic static void setProperty2(Object newValue, Object object, String property) {\n-\t\tgetInstance().setProperty(object, property, newValue);\n-\t}\n+    /**\n+     * This is so we don't have to reorder the stack when we call this method.\n+     * At some point a better name might be in order.\n+     */\n+    public static void setProperty2(Object newValue, Object object, String property) {\n+        getInstance().setProperty(object, property, newValue);\n+    }\n \n-\tpublic static Object getProperty(Object object, String property) {\n-        return getInstance().getProperty(object, property);\n+    /**\n+     * This is so we don't have to reorder the stack when we call this method.\n+     * At some point a better name might be in order.\n+     */\n+    public static void setPropertySafe2(Object newValue, Object object, String property) {\n+        if (object != null) {\n+            setProperty2(newValue, object, property);\n+        }\n     }\n \n     public static boolean asBool(Object object) {\n@@ -144,31 +164,30 @@ public static boolean asBool(Object object) {\n             return booleanValue.booleanValue();\n         }\n         else if (object instanceof Matcher) {\n-        \tMatcher matcher = (Matcher) object;\n-        \treturn matcher.find();\n+            Matcher matcher = (Matcher) object;\n+            return matcher.find();\n         }\n         else if (object instanceof Collection) {\n-        \tCollection collection = (Collection) object;\n-        \treturn !collection.isEmpty();\n+            Collection collection = (Collection) object;\n+            return !collection.isEmpty();\n         }\n         else if (object instanceof String) {\n             String text = (String) object;\n             return text.equalsIgnoreCase(\"true\");\n         }\n-        throw new InvokerException(object.getClass().getName() +\n-        \t\t\t\t\t\t   \"(\" + object + \") cannot be converted to a boolean.\");\n+        throw new InvokerException(object.getClass().getName() + \"(\" + object + \") cannot be converted to a boolean.\");\n+    }\n+\n+    public static boolean notObject(Object object) {\n+        return !asBool(object);\n     }\n \n-\tpublic static boolean notObject(Object object) {\n-\t\treturn !asBool(object);\n-\t}\n+    public static boolean notBoolean(boolean bool) {\n+        return !bool;\n+    }\n \n-\tpublic static boolean notBoolean(boolean bool) {\n-\t\treturn !bool;\n-\t}\n-\t\n     public static boolean isCase(Object switchValue, Object caseExpression) {\n-        return asBool(invokeMethod(caseExpression, \"isCase\", new Object[] { switchValue}));\n+        return asBool(invokeMethod(caseExpression, \"isCase\", new Object[] { switchValue }));\n     }\n \n     public static boolean compareIdentical(Object left, Object right) {\n@@ -178,17 +197,17 @@ public static boolean compareIdentical(Object left, Object right) {\n     public static boolean compareEqual(Object left, Object right) {\n         return getInstance().objectsEqual(left, right);\n     }\n-    \n+\n     public static Matcher findRegex(Object left, Object right) {\n-    \treturn getInstance().objectFindRegex(left, right);\n+        return getInstance().objectFindRegex(left, right);\n     }\n \n     public static boolean matchRegex(Object left, Object right) {\n-    \treturn getInstance().objectMatchRegex(left, right);\n+        return getInstance().objectMatchRegex(left, right);\n     }\n-    \n+\n     public static Pattern regexPattern(String regex) {\n-    \treturn getInstance().regexPattern(regex);\n+        return getInstance().regexPattern(regex);\n     }\n \n     public static boolean compareNotEqual(Object left, Object right) {\n@@ -251,7 +270,7 @@ public static void assertFailed(Object expression, Object message) {\n             throw new AssertionError(\"\" + message + \". Expression: \" + expression);\n         }\n     }\n-    \n+\n     public static Object runScript(Class scriptClass, String[] args) {\n         ScriptContext context = new ScriptContext(args);\n         Script script = createScript(scriptClass, context);\n@@ -264,7 +283,9 @@ public static Script createScript(Class scriptClass, ScriptContext context) {\n             return (Script) constructor.newInstance(new Object[] { context });\n         }\n         catch (Exception e) {\n-            throw new InvokerException(\"Failed to create Script instance for class: \" + scriptClass + \". Reason: \" + e, e);\n+            throw new InvokerException(\n+                \"Failed to create Script instance for class: \" + scriptClass + \". Reason: \" + e,\n+                e);\n         }\n     }\n }",
                "raw_url": "https://github.com/apache/groovy/raw/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/main/org/codehaus/groovy/runtime/InvokerHelper.java",
                "sha": "0a665d6179a72f95fa6a4c5283d1bb9b23b51403",
                "status": "modified"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/groovy/blob/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/main/org/codehaus/groovy/syntax/parser/ASTBuilder.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/syntax/parser/ASTBuilder.java?ref=257b9147034ce8b088a2b7294c43f5ba169eaa74",
                "deletions": 4,
                "filename": "src/main/org/codehaus/groovy/syntax/parser/ASTBuilder.java",
                "patch": "@@ -777,6 +777,10 @@ protected Expression expression(CSTNode expressionRoot) throws ParserException\n             {\n                 return propertyExpression( expressionRoot );\n             }\n+            case ( Token.NAVIGATE ):\n+            {\n+                return safePropertyExpression( expressionRoot );\n+            }\n             case ( Token.SYNTH_LIST ):\n             {\n                 return listExpression( expressionRoot );\n@@ -888,9 +892,17 @@ protected MethodCallExpression methodCallExpression(CSTNode expressionRoot) thro\n \n         Expression paramList = actualParameterList( expressionRoot.getChild( 2 ) );\n \n-        return new MethodCallExpression( objectExpression,\n-                                         methodName,\n-                                         paramList );\n+        MethodCallExpression answer = new MethodCallExpression(objectExpression, methodName, paramList);\n+        \n+        if (expressionRoot.getChildren().length > 3) \n+        {\n+            CSTNode notExpr = expressionRoot.getChild(3);\n+            if (notExpr != null && notExpr.getToken().getType() == Token.NAVIGATE) \n+            {\n+                answer.setSafe(true);\n+            }\n+        }\n+        return answer;\n     }\n \n     protected Expression actualParameterList(CSTNode paramRoot) throws ParserException\n@@ -1027,7 +1039,17 @@ protected Expression propertyExpression(CSTNode expressionRoot) throws ParserExc\n         String propertyName = expressionRoot.getChild( 1 ).getToken().getText();\n \n         return new PropertyExpression ( objectExpression,\n-                                        propertyName );\n+                propertyName );\n+    }\n+\n+    protected Expression safePropertyExpression(CSTNode expressionRoot) throws ParserException\n+    {\n+        Expression objectExpression = expression( expressionRoot.getChild( 0 ) );\n+\n+        String propertyName = expressionRoot.getChild( 1 ).getToken().getText();\n+\n+        return new PropertyExpression ( objectExpression,\n+                propertyName, true );\n     }\n \n     protected Expression variableOrClassExpression(CSTNode expressionRoot)",
                "raw_url": "https://github.com/apache/groovy/raw/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/main/org/codehaus/groovy/syntax/parser/ASTBuilder.java",
                "sha": "3a1c6fb6ede5d3aa6d2706d2d062826904dd5ccf",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/groovy/blob/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/main/org/codehaus/groovy/syntax/parser/Parser.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/syntax/parser/Parser.java?ref=257b9147034ce8b088a2b7294c43f5ba169eaa74",
                "deletions": 6,
                "filename": "src/main/org/codehaus/groovy/syntax/parser/Parser.java",
                "patch": "@@ -1271,7 +1271,7 @@ protected CSTNode primaryExpression()\n             {\n                 CSTNode replacementExpr = new CSTNode();\n                 CSTNode resultExpr      = sugaryMethodCallExpression( replacementExpr,\n-                                                                      identifier );\n+                                                                      identifier, null );\n                 if ( resultExpr != replacementExpr )\n                 {\n                     expr = resultExpr;\n@@ -1280,18 +1280,18 @@ protected CSTNode primaryExpression()\n             else\n             {\n                 expr = sugaryMethodCallExpression( expr,\n-                                                   identifier );\n+                                                   identifier, null );\n             }\n         }\n \n       DOT_LOOP:\n-        while ( lt() == Token.DOT\n+        while ( (lt() == Token.DOT || lt() == Token.NAVIGATE)\n                 &&\n                 ( lt( 2 ) == Token.IDENTIFIER\n                   ||\n                   lt( 2 ) == Token.KEYWORD_CLASS ) )\n         {\n-            CSTNode dotExpr = rootNode( Token.DOT );\n+            CSTNode dotExpr = rootNode( lt() );\n \n             identifier = rootNode( lt() );\n             \n@@ -1302,7 +1302,7 @@ protected CSTNode primaryExpression()\n                 case ( Token.LEFT_CURLY_BRACE ):\n                 {\n                     expr = sugaryMethodCallExpression( expr,\n-                                                       identifier );\n+                                                       identifier, dotExpr );\n                     break DOT_TYPE_SWITCH;\n                 }\n                 default:\n@@ -1319,7 +1319,7 @@ protected CSTNode primaryExpression()\n     }\n \n     protected CSTNode sugaryMethodCallExpression(CSTNode expr,\n-                                                 CSTNode identifier)\n+                                                 CSTNode identifier, CSTNode dotExpr)\n         throws IOException,SyntaxException\n     {\n         CSTNode methodExpr = null;\n@@ -1353,6 +1353,10 @@ protected CSTNode sugaryMethodCallExpression(CSTNode expr,\n         if ( methodExpr != null )\n         {\n             expr = methodExpr;\n+            if (dotExpr != null) \n+            {    \n+                expr.addChild(dotExpr);\n+            }\n         }\n \n         return expr;",
                "raw_url": "https://github.com/apache/groovy/raw/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/main/org/codehaus/groovy/syntax/parser/Parser.java",
                "sha": "3cf1f00eb0593b841278c21b3baae05cb8e10688",
                "status": "modified"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/groovy/blob/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/test/groovy/SafeNavigationTest.groovy",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/SafeNavigationTest.groovy?ref=257b9147034ce8b088a2b7294c43f5ba169eaa74",
                "deletions": 0,
                "filename": "src/test/groovy/SafeNavigationTest.groovy",
                "patch": "@@ -0,0 +1,36 @@\n+class SafeNavigationTest extends GroovyTestCase {\n+\n+    void testNormalPropertyNavigation() {\n+        x = ['foo':['bar':123, 'x':456], 'z':99]\n+        \n+        y = x->foo->bar\n+        \n+        println(\"found y ${x->foo->bar}\")\n+        \n+        assert y == 123\n+    }\n+\n+    void testNullPropertyNavigation() {\n+        x = null\n+        \n+\t\ty = x->foo->bar\n+        \n+        assert y == null\n+    }\n+    \n+    void testNormalMethodCall() {\n+        x = 1234\n+        \n+        y = x->toString()\n+        \n+        assert y == \"1234\"\n+    }\n+\n+    void testNullMethodCall() {\n+        x = null\n+        \n+        y = x->toString()\n+        \n+        assert y == null\n+    }\n+}",
                "raw_url": "https://github.com/apache/groovy/raw/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/test/groovy/SafeNavigationTest.groovy",
                "sha": "ba9a8ece99d47fa42a9864406de3b229699f81e9",
                "status": "added"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/groovy/blob/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/test/org/codehaus/groovy/syntax/parser/ParserTest.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/syntax/parser/ParserTest.java?ref=257b9147034ce8b088a2b7294c43f5ba169eaa74",
                "deletions": 1,
                "filename": "src/test/org/codehaus/groovy/syntax/parser/ParserTest.java",
                "patch": "@@ -1329,13 +1329,23 @@ public void testConsumeUntil_NotFound()\n     }\n \n     public void testAssignmentExpression()\n-        throws Exception\n+    throws Exception\n     {\n         Parser parser = newParser( \"answer = list.collect( { item | return item * 2 } )\" );\n \n         CSTNode root = parser.expression();\n     }\n \n+    public void testSafeMethodCallExpression()\n+    throws Exception\n+    {\n+        Parser parser = newParser( \"answer = foo->someMethod()\" );\n+\n+        CSTNode root = parser.expression();\n+        \n+        System.out.println(\"Got: \" + root );\n+    }\n+\n     public void testLogicalAndExpression()\n         throws Exception\n     {",
                "raw_url": "https://github.com/apache/groovy/raw/257b9147034ce8b088a2b7294c43f5ba169eaa74/src/test/org/codehaus/groovy/syntax/parser/ParserTest.java",
                "sha": "35876cefc56175ab7af09c1f0e250fb57c6df5b1",
                "status": "modified"
            }
        ],
        "message": "Added support for 'safe navigation' which allows navigation & method calls on null objects without throwing NullPointerExceptions.\n\ne.g.\n\na = null\nb = a->foo->bar->someMethod()\nassert b == null\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@386 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/771d7cf29ae38ebd635cc431aa2a0d0c61c4c636",
        "patched_files": [
            "SafeNavigationTest.groovy",
            "PropertyExpression.java",
            "ASTBuilder.java",
            "MethodCallExpression.java",
            "InvokerHelper.java",
            "Parser.java",
            "ClassGenerator.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "ParserTest.java",
            "ASTBuilderTest.java"
        ]
    },
    "groovy_31bf411": {
        "bug_id": "groovy_31bf411",
        "commit": "https://github.com/apache/groovy/commit/31bf41149559b20ec59397712eebf1f3c22cc4b6",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/31bf41149559b20ec59397712eebf1f3c22cc4b6/src/main/groovy/lang/MetaClass.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/MetaClass.java?ref=31bf41149559b20ec59397712eebf1f3c22cc4b6",
                "deletions": 1,
                "filename": "src/main/groovy/lang/MetaClass.java",
                "patch": "@@ -211,7 +211,7 @@ public Object invokeMethod(Object object, String methodName, Object[] arguments)\n         */\n \n         if (object == null) {\n-            throw new InvokerException(\"Cannot invoke method: \" + methodName + \" on null object\");\n+            throw new NullPointerException(\"Cannot invoke method: \" + methodName + \" on null object\");\n         }\n \n         List methods = getMethods(methodName);",
                "raw_url": "https://github.com/apache/groovy/raw/31bf41149559b20ec59397712eebf1f3c22cc4b6/src/main/groovy/lang/MetaClass.java",
                "sha": "e2b827e59d8406510200bda60dbe8907d5197013",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/31bf41149559b20ec59397712eebf1f3c22cc4b6/src/main/org/codehaus/groovy/runtime/Invoker.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/Invoker.java?ref=31bf41149559b20ec59397712eebf1f3c22cc4b6",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/runtime/Invoker.java",
                "patch": "@@ -379,7 +379,7 @@ else if (object instanceof Map) {\n      */\n     public Object getProperty(Object object, String property) {\n         if (object == null) {\n-            throw new InvokerException(\"Cannot get property on null object\");\n+            throw new NullPointerException(\"Cannot get property: \" + property + \" on null object\");\n         }\n         else if (object instanceof GroovyObject) {\n             GroovyObject pogo = (GroovyObject) object;",
                "raw_url": "https://github.com/apache/groovy/raw/31bf41149559b20ec59397712eebf1f3c22cc4b6/src/main/org/codehaus/groovy/runtime/Invoker.java",
                "sha": "a0e1d8afa3b03a943325cc7781b23738853179f9",
                "status": "modified"
            }
        ],
        "message": "Throw NullPointerException when navigating null which seems more natural to Java developeres\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@384 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/d360dfbc77eef810fa83374e3d8898b066e0c109",
        "patched_files": [
            "Invoker.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "InvokerTest.java"
        ]
    },
    "groovy_3481fd2": {
        "bug_id": "groovy_3481fd2",
        "commit": "https://github.com/apache/groovy/commit/3481fd2478bb74fad111534db3570475c4b7983d",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/3481fd2478bb74fad111534db3570475c4b7983d/src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java?ref=3481fd2478bb74fad111534db3570475c4b7983d",
                "deletions": 2,
                "filename": "src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java",
                "patch": "@@ -151,8 +151,10 @@ public void buildTree(List<String> filenames) throws IOException, RecognitionExc\n         setOverview();\n \n         List<File> sourcepathFiles = new ArrayList<File>();\n-        for (String sourcepath : sourcepaths) {\n-            sourcepathFiles.add(new File(sourcepath).getAbsoluteFile());\n+        if (sourcepaths != null) {\n+            for (String sourcepath : sourcepaths) {\n+                sourcepathFiles.add(new File(sourcepath).getAbsoluteFile());\n+            }\n         }\n \n         for (String filename : filenames) {",
                "raw_url": "https://github.com/apache/groovy/raw/3481fd2478bb74fad111534db3570475c4b7983d/src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java",
                "sha": "2a18142a8b6b2ad64c97e936e43374f81c44383d",
                "status": "modified"
            }
        ],
        "message": "NPE fix\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@19628 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/7d4e5c7cbf9f6734185e545d53323e1646637383",
        "patched_files": [
            "GroovyRootDocBuilder.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "GroovyRootDocBuilderTest.java"
        ]
    },
    "groovy_428f5f7": {
        "bug_id": "groovy_428f5f7",
        "commit": "https://github.com/apache/groovy/commit/428f5f769a031b1e3483270d0e34611e941c9b54",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/428f5f769a031b1e3483270d0e34611e941c9b54/src/main/groovy/lang/GroovyClassLoader.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/GroovyClassLoader.java?ref=428f5f769a031b1e3483270d0e34611e941c9b54",
                "deletions": 2,
                "filename": "src/main/groovy/lang/GroovyClassLoader.java",
                "patch": "@@ -339,8 +339,10 @@ public ProtectionDomain run() {\n             }\n         });\n         PermissionCollection myPerms = myDomain.getPermissions();\n-        for (Enumeration<Permission> elements = myPerms.elements(); elements.hasMoreElements();) {\n-            perms.add(elements.nextElement());\n+        if(myPerms != null) {\n+            for (Enumeration<Permission> elements = myPerms.elements(); elements.hasMoreElements();) {\n+                perms.add(elements.nextElement());\n+            }\n         }\n         perms.setReadOnly();\n         return perms;",
                "raw_url": "https://github.com/apache/groovy/raw/428f5f769a031b1e3483270d0e34611e941c9b54/src/main/groovy/lang/GroovyClassLoader.java",
                "sha": "7ed98e0829a565103959b46a836addf4dd0f8eaf",
                "status": "modified"
            }
        ],
        "message": "GROOVY-3542\nAdded a null check for permissions returned by ProtectionDomain.getPermissions() call to avoid reported NPE.\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@16478 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/8bf7910c1b3b890b79dcd679a003663f1ac51671",
        "patched_files": [
            "GroovyClassLoader.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "GroovyClassLoaderTest.java"
        ]
    },
    "groovy_44f25ae": {
        "bug_id": "groovy_44f25ae",
        "commit": "https://github.com/apache/groovy/commit/44f25aec40eb2eef9c69ad051492667f9debb2c2",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/44f25aec40eb2eef9c69ad051492667f9debb2c2/src/main/org/codehaus/groovy/runtime/InvokerHelper.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/InvokerHelper.java?ref=44f25aec40eb2eef9c69ad051492667f9debb2c2",
                "deletions": 4,
                "filename": "src/main/org/codehaus/groovy/runtime/InvokerHelper.java",
                "patch": "@@ -314,16 +314,14 @@ public static Matcher findRegex(Object left, Object right) {\n      * @param right regular expression to compare the string to\n      */\n     public static boolean matchRegex(Object left, Object right) {\n+    \tif(left == null || right == null) return false;\n         Pattern pattern;\n         if (right instanceof Pattern) {\n             pattern = (Pattern) right;\n         } else {\n             pattern = Pattern.compile(toString(right));\n         }\n-        String stringToCompare = null;\n-        if(left != null) {\n-        \tstringToCompare = toString(left);\n-        }\n+        String stringToCompare = toString(left);\n         Matcher matcher = pattern.matcher(stringToCompare);\n         RegexSupport.setLastMatcher(matcher);\n         return matcher.matches();",
                "raw_url": "https://github.com/apache/groovy/raw/44f25aec40eb2eef9c69ad051492667f9debb2c2/src/main/org/codehaus/groovy/runtime/InvokerHelper.java",
                "sha": "8c0b1e5709fac7787729df4452dfdd0252bbe7ee",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/groovy/blob/44f25aec40eb2eef9c69ad051492667f9debb2c2/src/test/groovy/bugs/Groovy3718Bug.groovy",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/bugs/Groovy3718Bug.groovy?ref=44f25aec40eb2eef9c69ad051492667f9debb2c2",
                "deletions": 10,
                "filename": "src/test/groovy/bugs/Groovy3718Bug.groovy",
                "patch": "@@ -2,15 +2,12 @@ package groovy.bugs\n \r\n class Groovy3718Bug extends GroovyTestCase {\r\n     void testPatternMatchOfNull() {\r\n-    \tdef doNullMatch1 = { ->\r\n-    \t\tnull ==~ /[^0-9]+/\r\n-\t    }\r\n-\t\r\n-\t    def doNullMatch2 = { ->\r\n-\t        null ==~ /[0-9]+/\r\n-\t    }\r\n-    \t\r\n-    \tshouldFail NullPointerException, doNullMatch1\r\n-        shouldFail NullPointerException, doNullMatch2\r\n+\t\tassertFalse null ==~ /[^0-9]+/\r\n+\t\t\r\n+\t\tassertFalse null ==~ /[0-9]+/\r\n+\r\n+\t\tassertFalse \"test\" ==~ null\r\n+\t\t\r\n+\t\tassertFalse null ==~ null\r\n     }\r\n }\r",
                "raw_url": "https://github.com/apache/groovy/raw/44f25aec40eb2eef9c69ad051492667f9debb2c2/src/test/groovy/bugs/Groovy3718Bug.groovy",
                "sha": "e831bb3bcadfa2dd9e8c75350d8a5ec96ace8225",
                "status": "modified"
            }
        ],
        "message": "GROOVY-3718\nAfter the discussion on the dev list, it has been decided to return false for null values/patterns instead of NPEs that result from Java.\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@17540 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/9eccac2d4cfb40f97ab9f2a807118e0d2b8b3521",
        "patched_files": [
            "Groovy3718Bug.groovy",
            "InvokerHelper.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "InvokerHelperTest.java"
        ]
    },
    "groovy_486da8d": {
        "bug_id": "groovy_486da8d",
        "commit": "https://github.com/apache/groovy/commit/486da8d7b41e72315cdeaddf2d06e859336eab4f",
        "file": [
            {
                "additions": 92,
                "blob_url": "https://github.com/apache/groovy/blob/486da8d7b41e72315cdeaddf2d06e859336eab4f/src/main/groovy/servlet/GroovyServlet.java",
                "changes": 177,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/servlet/GroovyServlet.java?ref=486da8d7b41e72315cdeaddf2d06e859336eab4f",
                "deletions": 85,
                "filename": "src/main/groovy/servlet/GroovyServlet.java",
                "patch": "@@ -92,93 +92,100 @@\n  */\n public class GroovyServlet extends AbstractHttpServlet {\n \n-  /**\n-   * The script engine executing the Groovy scripts for this servlet\n-   */\n-  private static GroovyScriptEngine gse;\n-\n-  /**\n-   * Initialize the GroovyServlet.\n-   *\n-   * @throws ServletException\n-   *  if this method encountered difficulties\n-   */\n-  public void init(ServletConfig config) throws ServletException {\n-    super.init(config);\n-\n-    // Set up the scripting engine\n-    gse = new GroovyScriptEngine(this);\n-\n-    servletContext.log(\"Groovy servlet initialized\");\n-  }\n-\n-  /**\n-   * Handle web requests to the GroovyServlet\n-   */\n-  public void service(HttpServletRequest request,\n-      HttpServletResponse response) throws IOException {\n-\n-    // Get the script path from the request - include aware (GROOVY-815)\n-    final String scriptUri = getScriptUri(request);\n-\n-    // Set it to HTML by default\n-    response.setContentType(\"text/html\");\n-\n-    // Set up the script context\n-    final Binding binding = new ServletBinding(request, response, servletContext);\n-\n-    // Run the script\n-    try {\n-      Closure closure = new Closure(gse) {\n-\n-        public Object call() {\n-          try {\n-            return ((GroovyScriptEngine) getDelegate()).run(scriptUri, binding);\n-          }\n-          catch (ResourceException e) {\n-            throw new RuntimeException(e);\n-          }\n-          catch (ScriptException e) {\n-            throw new RuntimeException(e);\n-          }\n-        }\n-\n-      };\n-      GroovyCategorySupport.use(ServletCategory.class, closure);\n-      // Set reponse code 200 and flush buffers\n-      response.setStatus(HttpServletResponse.SC_OK);\n-      response.flushBuffer();\n-      // log(\"Flushed response buffer.\");\n+    /**\n+     * The script engine executing the Groovy scripts for this servlet\n+     */\n+    private static GroovyScriptEngine gse;\n+\n+    /**\n+     * Initialize the GroovyServlet.\n+     *\n+     * @throws ServletException\n+     *  if this method encountered difficulties\n+     */\n+    public void init(ServletConfig config) throws ServletException {\n+        super.init(config);\n+\n+        // Set up the scripting engine\n+        gse = new GroovyScriptEngine(this);\n+\n+        servletContext.log(\"Groovy servlet initialized on \" + gse + \".\");\n     }\n-    catch (RuntimeException re) {\n-      StringBuffer error = new StringBuffer(\"GroovyServlet Error: \");\n-      error.append(\" script: '\");\n-      error.append(scriptUri);\n-      error.append(\"': \");\n-      Throwable e = re.getCause();\n-      if (e instanceof ResourceException) {\n-        error.append(\" Script not found, sending 404.\");\n-        servletContext.log(error.toString());\n-        System.out.println(error.toString());\n-        response.sendError(HttpServletResponse.SC_NOT_FOUND);\n-      }\n-      else {\n-        // write the script errors (if any) to the servlet context's log\n-        if (re.getMessage() != null)\n-          error.append(re.getMessage());\n-\n-        if (e != null) {\n-          servletContext.log(\"An error occurred processing the request\", e);\n-        }\n-        else {\n-          servletContext.log(\"An error occurred processing the request\", re);\n+\n+    /**\n+     * Handle web requests to the GroovyServlet\n+     */\n+    public void service(HttpServletRequest request, HttpServletResponse response) throws IOException {\n+\n+        // Get the script path from the request - include aware (GROOVY-815)\n+        final String scriptUri = getScriptUri(request);\n+\n+        // Set it to HTML by default\n+        response.setContentType(\"text/html\");\n+\n+        // Set up the script context\n+        final Binding binding = new ServletBinding(request, response, servletContext);\n+\n+        // Run the script\n+        try {\n+            Closure closure = new Closure(gse) {\n+\n+                public Object call() {\n+                    try {\n+                        return ((GroovyScriptEngine) getDelegate()).run(scriptUri, binding);\n+                    } catch (ResourceException e) {\n+                        throw new RuntimeException(e);\n+                    } catch (ScriptException e) {\n+                        throw new RuntimeException(e);\n+                    }\n+                }\n+\n+            };\n+            GroovyCategorySupport.use(ServletCategory.class, closure);\n+            /*\n+             * Set reponse code 200.\n+             */\n+            response.setStatus(HttpServletResponse.SC_OK);\n+        } catch (RuntimeException runtimeException) {\n+            StringBuffer error = new StringBuffer(\"GroovyServlet Error: \");\n+            error.append(\" script: '\");\n+            error.append(scriptUri);\n+            error.append(\"': \");\n+            Throwable e = runtimeException.getCause();\n+            /*\n+             * Null cause?!\n+             */\n+            if (e == null) {\n+                error.append(\" Script processing failed.\");\n+                servletContext.log(error.toString());\n+                System.err.println(error.toString());\n+                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n+                return;\n+            }\n+            /*\n+             * Resource not found.\n+             */\n+            if (e instanceof ResourceException) {\n+                error.append(\" Script not found, sending 404.\");\n+                servletContext.log(error.toString());\n+                System.err.println(error.toString());\n+                response.sendError(HttpServletResponse.SC_NOT_FOUND);\n+                return;\n+            }\n+            /*\n+             * Other internal error. Perhaps syntax?! \n+             */\n+            servletContext.log(\"An error occurred processing the request\", e);\n+            servletContext.log(error.toString());\n+            System.err.println(error.toString());\n+            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.toString());\n+        } finally {\n+            /*\n+             * Finally, flush the response buffer.\n+             */\n+            response.flushBuffer();\n+            // servletContext.log(\"Flushed response buffer.\");\n         }\n-        servletContext.log(error.toString());\n-        System.out.println(error.toString());\n-        response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.toString());\n-      }\n     }\n \n-  }\n-\n }",
                "raw_url": "https://github.com/apache/groovy/raw/486da8d7b41e72315cdeaddf2d06e859336eab4f/src/main/groovy/servlet/GroovyServlet.java",
                "sha": "4fa7c611b640067473994d65ef09e558bfc74139",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE in catch block and re-formatted the entire file to the Groovy code style. Sorry for the not nice diff.\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@2276 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/b31711d5851cbe4d9076ffa7738e9411d24f9308",
        "patched_files": [
            "GroovyServlet.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "GroovyServletTest.java"
        ]
    },
    "groovy_4d3a020": {
        "bug_id": "groovy_4d3a020",
        "commit": "https://github.com/apache/groovy/commit/4d3a020b5cd8b9549498716e48f45c1b79ab8e99",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/4d3a020b5cd8b9549498716e48f45c1b79ab8e99/src/main/org/codehaus/groovy/runtime/MetaClassHelper.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/MetaClassHelper.java?ref=4d3a020b5cd8b9549498716e48f45c1b79ab8e99",
                "deletions": 2,
                "filename": "src/main/org/codehaus/groovy/runtime/MetaClassHelper.java",
                "patch": "@@ -278,12 +278,12 @@ private static int getPrimitiveDistance(Class from, Class to) {\n     }\n     \n     private static int getMaximumInterfaceDistance(Class c, Class interfaceClass) {\n-        if (c==interfaceClass) return 0;\n+        if (c==null || c==interfaceClass) return 0;\n         Class[] interfaces = c.getInterfaces();\n         int max = 0;\n         for (int i=0; i<interfaces.length; i++) {\n             int sub = 0;\n-            if (interfaces[i].isAssignableFrom(c)) {\n+            if (interfaces[i].isAssignableFrom(interfaceClass)) {\n                 sub = 1+ getMaximumInterfaceDistance(interfaces[i],interfaceClass);\n             }\n             max = Math.max(max,sub);",
                "raw_url": "https://github.com/apache/groovy/raw/4d3a020b5cd8b9549498716e48f45c1b79ab8e99/src/main/org/codehaus/groovy/runtime/MetaClassHelper.java",
                "sha": "aba2584a4fcfbe67ef659b2ebf911399e37cfcbc",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE bug in getMaximumInterfaceDistance\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@5082 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/3cd7a5079e43b61dbf1ff74e8021bd28889cc707",
        "patched_files": [
            "MetaClassHelper.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "MetaClassHelperTest.java"
        ]
    },
    "groovy_596853f": {
        "bug_id": "groovy_596853f",
        "commit": "https://github.com/apache/groovy/commit/596853fe9b54cc1f5b144b214fe24d40ab006258",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/groovy/blob/596853fe9b54cc1f5b144b214fe24d40ab006258/src/main/groovy/groovy/lang/GroovyRuntimeException.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/groovy/lang/GroovyRuntimeException.java?ref=596853fe9b54cc1f5b144b214fe24d40ab006258",
                "deletions": 1,
                "filename": "src/main/groovy/groovy/lang/GroovyRuntimeException.java",
                "patch": "@@ -60,7 +60,12 @@ public ModuleNode getModule() {\n     }\n \n     public String getMessage() {\n-        return getMessageWithoutLocationText() + getLocationText();\n+        String messageWithoutLocationText = getMessageWithoutLocationText();\n+        String locationText = getLocationText();\n+        if (messageWithoutLocationText == null && locationText.isEmpty()) {\n+            return null; // not \"null\"\n+        }\n+        return messageWithoutLocationText + locationText;\n     }\n \n     public ASTNode getNode() {",
                "raw_url": "https://github.com/apache/groovy/raw/596853fe9b54cc1f5b144b214fe24d40ab006258/src/main/groovy/groovy/lang/GroovyRuntimeException.java",
                "sha": "af62bb6e3ae9bf6fce00cd9d1892f927fdeabeed",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/groovy/blob/596853fe9b54cc1f5b144b214fe24d40ab006258/src/main/groovy/groovy/lang/MissingPropertyException.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/groovy/lang/MissingPropertyException.java?ref=596853fe9b54cc1f5b144b214fe24d40ab006258",
                "deletions": 0,
                "filename": "src/main/groovy/groovy/lang/MissingPropertyException.java",
                "patch": "@@ -58,6 +58,9 @@ public MissingPropertyException(String message, String property, Class type) {\n     }\n \n     public String getMessageWithoutLocationText() {\n+        if (property == null || type == null) {\n+            return super.getMessageWithoutLocationText();\n+        }\n         final Throwable cause = getCause();\n         if (cause == null) {\n             if (super.getMessageWithoutLocationText() != null) {",
                "raw_url": "https://github.com/apache/groovy/raw/596853fe9b54cc1f5b144b214fe24d40ab006258/src/main/groovy/groovy/lang/MissingPropertyException.java",
                "sha": "4d2739352ebd1653c6599c481d800eccc73d04ea",
                "status": "modified"
            },
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/groovy/blob/596853fe9b54cc1f5b144b214fe24d40ab006258/src/test/groovy/lang/MissingPropertyExceptionTest.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/lang/MissingPropertyExceptionTest.java?ref=596853fe9b54cc1f5b144b214fe24d40ab006258",
                "deletions": 0,
                "filename": "src/test/groovy/lang/MissingPropertyExceptionTest.java",
                "patch": "@@ -0,0 +1,34 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package groovy.lang;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Provides unit tests for the <code>MissingPropertyException</code> class.\n+ */\n+public class MissingPropertyExceptionTest extends TestCase {\n+\n+    public void testNullMessage() {\n+        Throwable mpe = new MissingPropertyException(null);\n+        assertNull(mpe.getMessage());\n+        assertEquals(\"groovy.lang.MissingPropertyException\", mpe.toString());\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/groovy/raw/596853fe9b54cc1f5b144b214fe24d40ab006258/src/test/groovy/lang/MissingPropertyExceptionTest.java",
                "sha": "3b6c746c62c4f98bd9fc1538f11538032ebaec42",
                "status": "added"
            }
        ],
        "message": "GROOVY-8936: NPE occurred when `null` message passed into `MissingPropertyException`(closes #844)",
        "parent": "https://github.com/apache/groovy/commit/f667007269f95d212a835f7e38aff8bb8d0eec35",
        "patched_files": [
            "MissingPropertyException.java",
            "GroovyRuntimeException.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "MissingPropertyExceptionTest.java"
        ]
    },
    "groovy_7d4e5c7": {
        "bug_id": "groovy_7d4e5c7",
        "commit": "https://github.com/apache/groovy/commit/7d4e5c7cbf9f6734185e545d53323e1646637383",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/groovy/blob/7d4e5c7cbf9f6734185e545d53323e1646637383/src/main/org/codehaus/groovy/ant/Groovy.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/ant/Groovy.java?ref=7d4e5c7cbf9f6734185e545d53323e1646637383",
                "deletions": 3,
                "filename": "src/main/org/codehaus/groovy/ant/Groovy.java",
                "patch": "@@ -475,9 +475,11 @@ private void createClasspathParts() {\n         }\n         String groovyHome = null;\n         final String[] strings = getSysProperties().getVariables();\n-        for (String prop : strings) {\n-            if (prop.startsWith(\"-Dgroovy.home=\")) {\n-                groovyHome = prop.substring(\"-Dgroovy.home=\".length());\n+        if (strings != null) {\n+            for (String prop : strings) {\n+                if (prop.startsWith(\"-Dgroovy.home=\")) {\n+                    groovyHome = prop.substring(\"-Dgroovy.home=\".length());\n+                }\n             }\n         }\n         if (groovyHome == null) {",
                "raw_url": "https://github.com/apache/groovy/raw/7d4e5c7cbf9f6734185e545d53323e1646637383/src/main/org/codehaus/groovy/ant/Groovy.java",
                "sha": "b26fd04f264e343163528dc4657d431670cab253",
                "status": "modified"
            }
        ],
        "message": "GROOVY-4108: Possible NPE in Groovy Ant task\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@19626 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/1dafad4016852ebad8b75d9ed5ab74096b7ca2f1",
        "patched_files": [
            "Groovy.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "GroovyTest.java"
        ]
    },
    "groovy_860577a": {
        "bug_id": "groovy_860577a",
        "commit": "https://github.com/apache/groovy/commit/860577a6e59e6c086ded4b23f9120b5d55430d35",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/groovy/blob/860577a6e59e6c086ded4b23f9120b5d55430d35/src/main/org/codehaus/groovy/runtime/InvokerHelper.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/InvokerHelper.java?ref=860577a6e59e6c086ded4b23f9120b5d55430d35",
                "deletions": 12,
                "filename": "src/main/org/codehaus/groovy/runtime/InvokerHelper.java",
                "patch": "@@ -117,9 +117,9 @@ public static String inspect(Object self) {\n     }\n \n     public static Object getAttribute(Object object, String attribute) {\n-//        if (object == null) {\n-//            throw new NullPointerException(\"Cannot get attribute: \" + attribute + \" on null object\");\n-//        }\n+        if (object == null) {\n+            object = NullObject.getNullObject();\n+        }\n \n         if (object instanceof Class) {\n             return metaRegistry.getMetaClass((Class) object).getAttribute(object, attribute);\n@@ -131,9 +131,9 @@ public static Object getAttribute(Object object, String attribute) {\n     }\n \n     public static void setAttribute(Object object, String attribute, Object newValue) {\n-//        if (object == null) {\n-//            throw new GroovyRuntimeException(\"Cannot set attribute on null object\");\n-//        }\n+        if (object == null) {\n+            object = NullObject.getNullObject();\n+        }\n \n         if (object instanceof Class) {\n             metaRegistry.getMetaClass((Class) object).setAttribute(object, attribute, newValue);\n@@ -145,9 +145,10 @@ public static void setAttribute(Object object, String attribute, Object newValue\n     }\n \n     public static Object getProperty(Object object, String property) {\n-//        if (object == null) {\n-//            throw new NullPointerException(\"Cannot get property: \" + property + \" on null object\");\n-//        }\n+        if (object == null) {\n+            object = NullObject.getNullObject();\n+        }\n+        \n         if (object instanceof GroovyObject) {\n             GroovyObject pogo = (GroovyObject) object;\n             return pogo.getProperty(property);\n@@ -167,9 +168,10 @@ public static Object getPropertySafe(Object object, String property) {\n     }\n \n     public static void setProperty(Object object, String property, Object newValue) {\n-//        if (object == null) {\n-//            throw new GroovyRuntimeException(\"Cannot set property on null object\");\n-//        }\n+        if (object == null) {\n+            object = NullObject.getNullObject();\n+        }\n+\n         if (object instanceof GroovyObject) {\n             GroovyObject pogo = (GroovyObject) object;\n             pogo.setProperty(property, newValue);",
                "raw_url": "https://github.com/apache/groovy/raw/860577a6e59e6c086ded4b23f9120b5d55430d35/src/main/org/codehaus/groovy/runtime/InvokerHelper.java",
                "sha": "da4683847532f44852a3ae51851a425aa3292293",
                "status": "modified"
            }
        ],
        "message": "GROOVY-3510: NPE in MetaClassRegistryImpl\nBring back NullObject to properly handle the null cases from within InvokerHelper\n(merge rev 16276)\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@16277 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/c43959198ef3886419f1df6b9b9e83fd9420f9b1",
        "patched_files": [
            "InvokerHelper.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "InvokerHelperTest.java"
        ]
    },
    "groovy_8d9486a": {
        "bug_id": "groovy_8d9486a",
        "commit": "https://github.com/apache/groovy/commit/8d9486a6a4cad4d82a114f9eb9b1a8e519e5ef0a",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/8d9486a6a4cad4d82a114f9eb9b1a8e519e5ef0a/src/main/org/codehaus/groovy/syntax/parser/ASTBuilder.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/syntax/parser/ASTBuilder.java?ref=8d9486a6a4cad4d82a114f9eb9b1a8e519e5ef0a",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/syntax/parser/ASTBuilder.java",
                "patch": "@@ -456,7 +456,7 @@ protected ClassNode interfaceDeclaration(String packageName,\n \n     protected BlockStatement statementBlock(CSTNode blockRoot) throws ParserException\n     {\n-        if (blockRoot.getToken().getType() == Token.LEFT_CURLY_BRACE) \n+        if (blockRoot.getToken() == null || blockRoot.getToken().getType() == Token.LEFT_CURLY_BRACE) \n         {    \n             return statementBlock(blockRoot, 0);\n         }",
                "raw_url": "https://github.com/apache/groovy/raw/8d9486a6a4cad4d82a114f9eb9b1a8e519e5ef0a/src/main/org/codehaus/groovy/syntax/parser/ASTBuilder.java",
                "sha": "116b09d0baac509e048fed11685660dc59543aba",
                "status": "modified"
            }
        ],
        "message": "fixed NPE I just introduced by accident :)\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@459 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/de00ef804f07e9766778a067cd027c4e535809bd",
        "patched_files": [
            "ASTBuilder.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "ASTBuilderTest.java"
        ]
    },
    "groovy_8ea5329": {
        "bug_id": "groovy_8ea5329",
        "commit": "https://github.com/apache/groovy/commit/8ea532994756c2178365a8aab62f70e4dee87eba",
        "file": [
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/groovy/blob/8ea532994756c2178365a8aab62f70e4dee87eba/src/main/groovy/lang/GroovyClassLoader.java",
                "changes": 67,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/GroovyClassLoader.java?ref=8ea532994756c2178365a8aab62f70e4dee87eba",
                "deletions": 31,
                "filename": "src/main/groovy/lang/GroovyClassLoader.java",
                "patch": "@@ -360,41 +360,46 @@ protected Class findGroovyClass(String name) throws ClassNotFoundException {\n      * @param classpath\n      */\n     private void expandClassPath(List pathList, String base, String classpath) {\n-        String[] paths = classpath.split(File.pathSeparator);\n-        for (int i = 0; i < paths.length; i++) {\n-            File path = null;\n \n-            if (\"\".equals(base)) {\n-                path = new File(paths[i]);\n-            } else {\n-                path = new File(base, paths[i]);\n-            }\n+        // checking against null prevents an NPE when recursevely expanding the classpath\n+        // in case the classpath is malformed\n+        if (classpath != null) {\n \n-            if (path.exists()) {\n-                if (!path.isDirectory()) {\n-                    try {\n-                        JarFile jar = new JarFile(path);\n-                        pathList.add(paths[i]);\n-                        // Get the manifest classpath entry from the jar\n-                        // SPG This code is currently unreliable - the Class-Path attribute\n-                        // returns entries which are delimited in unpredictable ways.\n-                        // See for example openejb-loader jar.  Commenting until we\n-                        // decide how we want to handle these cases (if at all).\n-                        /*\n-                        Manifest manifest = jar.getManifest();\n-                        Attributes classPathAttributes = manifest.getMainAttributes();\n-                        String manifestClassPath = classPathAttributes.getValue(\"Class-Path\");\n-\n-                        if (manifestClassPath != null)\n-                            expandClassPath(pathList, paths[i], manifestClassPath);\n-                        */\n+            // Sun's convention for the class-path attribute is to seperate each entry with spaces\n+            // but some libraries don't respect that convention and add commas, colons, semi-colons\n+            String[] paths = classpath.split(\"[\\\\ ,:;]\");\n \n-                    } catch (IOException e) {\n-                        // Bad jar, ignore\n-                        continue;\n+            for (int i = 0; i < paths.length; i++) {\n+                if (paths.length > 0) {\n+                    File path = null;\n+\n+                    if (\"\".equals(base)) {\n+                        path = new File(paths[i]);\n+                    } else {\n+                        path = new File(base, paths[i]);\n+                    }\n+\n+                    if (path.exists()) {\n+                        if (!path.isDirectory()) {\n+                            try {\n+                                JarFile jar = new JarFile(path);\n+                                pathList.add(paths[i]);\n+\n+                                Manifest manifest = jar.getManifest();\n+                                Attributes classPathAttributes = manifest.getMainAttributes();\n+                                String manifestClassPath = classPathAttributes.getValue(\"Class-Path\");\n+\n+                                if (manifestClassPath != null)\n+                                    expandClassPath(pathList, paths[i], manifestClassPath);\n+\n+                            } catch (IOException e) {\n+                                // Bad jar, ignore\n+                                continue;\n+                            }\n+                        } else {\n+                            pathList.add(paths[i]);\n+                        }\n                     }\n-                } else {\n-                    pathList.add(paths[i]);\n                 }\n             }\n         }",
                "raw_url": "https://github.com/apache/groovy/raw/8ea532994756c2178365a8aab62f70e4dee87eba/src/main/groovy/lang/GroovyClassLoader.java",
                "sha": "41c29ed1a78aee88d5067d2890930d832aa131ba",
                "status": "modified"
            }
        ],
        "message": "GROOVY-452's NPE fixed, and restored the expansion of Class-Path, so that even a mal-formed path be parsed. When Chris adds warning capabilities to the compiler, we'll be able to warn the user that he uses a jar with a malformed manifest file.\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@1151 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/615048528f0d502892ff4470386e3513dda65fe1",
        "patched_files": [
            "GroovyClassLoader.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "GroovyClassLoaderTest.java"
        ]
    },
    "groovy_903df1c": {
        "bug_id": "groovy_903df1c",
        "commit": "https://github.com/apache/groovy/commit/903df1c6920db792b4249a2f9e3e130fef8bcc20",
        "file": [
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/groovy/lang/MetaClassImpl.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/MetaClassImpl.java?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 8,
                "filename": "src/main/groovy/lang/MetaClassImpl.java",
                "patch": "@@ -1238,19 +1238,37 @@ else if (MetaClassHelper.isGenericSetMethod(method) && genericSetMethod == null)\n            list.add(method);\n        }\n        else {\n-           if (forceOverwrite) {\n-               removeMatchingMethod(list,method);\n-               list.add(method);\n-           } else if (!MetaClassHelper.containsMatchingMethod(list, method)) {\n+           addMethodToList(list,method,forceOverwrite);\n+       }\n+   }\n+   \n+   private void addMethodToList(List list, MetaMethod method, boolean forceOverwrite) {\n+       MetaMethod match = removeMatchingMethod(list,method);\n+       if (forceOverwrite) {\n+           list.add(method);\n+       } else if (match==null) {\n+           list.add(method);\n+       } else {\n+           Class methodC = method.getDeclaringClass();\n+           Class matchC = match.getDeclaringClass();\n+           if (methodC == matchC){\n+               if (method instanceof NewInstanceMetaMethod) {\n+                   list.add(method);\n+               } else {\n+                   list.add(match);\n+               }               \n+           } else if (MetaClassHelper.isAssignableFrom(methodC,matchC)){\n+               list.add(match);\n+           } else {\n                list.add(method);\n            }\n        }\n    }\n-\n+   \n    /**\n     * remove a method of the same matching prototype was found in the list\n     */\n-   private void removeMatchingMethod(List list, MetaMethod method) {\n+   private MetaMethod removeMatchingMethod(List list, MetaMethod method) {\n        for (Iterator iter = list.iterator(); iter.hasNext();) {\n            MetaMethod aMethod = (MetaMethod) iter.next();\n            Class[] params1 = aMethod.getParameterTypes();\n@@ -1265,11 +1283,11 @@ private void removeMatchingMethod(List list, MetaMethod method) {\n                }\n                if (matches) {\n                    iter.remove();\n-                   return;\n+                   return (MetaMethod) aMethod;\n                }\n            }\n        }\n-       return;\n+       return null;\n    }\n \n ",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/groovy/lang/MetaClassImpl.java",
                "sha": "9436948a0c6528236b90ad5f2efa9aa8d6c1b90f",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/groovy/util/CharsetToolkit.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/util/CharsetToolkit.java?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 14,
                "filename": "src/main/groovy/util/CharsetToolkit.java",
                "patch": "@@ -81,22 +81,26 @@\n      */\n     public CharsetToolkit(File file) throws IOException {\n         this.file = file;\n-        InputStream input = new FileInputStream(file);\n-        byte[] bytes = new byte[4096];\n-        int bytesRead = input.read(bytes);\n-        if (bytesRead == -1) {\n-            this.buffer = new byte[0];\n-        }\n-        else if (bytesRead < 4096) {\n-            byte[] bytesToGuess = new byte[bytesRead];\n-            System.arraycopy(bytes, 0, bytesToGuess, 0, bytesRead);\n-            this.buffer = bytesToGuess;\n-        }\n-        else {\n-            this.buffer = bytes;\n-        }\n         this.defaultCharset = getDefaultSystemCharset();\n         this.charset = null;\n+        InputStream input = new FileInputStream(file);\n+        try {\n+            byte[] bytes = new byte[4096];\n+            int bytesRead = input.read(bytes);\n+            if (bytesRead == -1) {\n+                this.buffer = new byte[0];\n+            }\n+            else if (bytesRead < 4096) {\n+                byte[] bytesToGuess = new byte[bytesRead];\n+                System.arraycopy(bytes, 0, bytesToGuess, 0, bytesRead);\n+                this.buffer = bytesToGuess;\n+            }\n+            else {\n+                this.buffer = bytes;\n+            }\n+        } finally {\n+            try {input.close();} catch (IOException e){}\n+        }\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/groovy/util/CharsetToolkit.java",
                "sha": "f01902677747ba95e0fe1caf7435d4a80d2c8054",
                "status": "modified"
            },
            {
                "additions": 115,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/ConversionHandler.java",
                "changes": 115,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/ConversionHandler.java?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/runtime/ConversionHandler.java",
                "patch": "@@ -0,0 +1,115 @@\n+package org.codehaus.groovy.runtime;\r\n+\r\n+import java.lang.reflect.InvocationHandler;\r\n+import java.lang.reflect.InvocationTargetException;\r\n+import java.lang.reflect.Method;\r\n+\r\n+/**\r\n+ * This class is a general adapter to map a call to an Java interface \r\n+ * to a given delegate.\r\n+ * <p>\r\n+ * @author Ben Yu\r\n+ * @author <a href=\"mailto:blackdrag@gmx.org\">Jochen Theodorou</a>\r\n+ */\r\n+public abstract class ConversionHandler implements InvocationHandler {\r\n+    private Object delegate;\r\n+    \r\n+    /**\r\n+     * Creates a ConversionHandler with an deleagte.\r\n+     * @param delegate the delegate\r\n+     * @throws IllegalArgumentException if the given delegate is null\r\n+     */\r\n+    public ConversionHandler(Object delegate) {\r\n+        if (delegate==null) throw new IllegalArgumentException(\"delegate must not be null\");\r\n+        this.delegate = delegate;\r\n+    }\r\n+    \r\n+    /**\r\n+     * gets the delegate.\r\n+     * @return the delegate\r\n+     */\r\n+    public Object getDelegate(){\r\n+        return delegate;\r\n+    }\r\n+    \r\n+    /**\r\n+     * This method is a default implementation for the invoke method\r\n+     * given in Invocationhandler. Any call to an method with an\r\n+     * declaring class that is not Object is redirected to invokeCustom. \r\n+     * Methods like tostring, equals and hashcode are called on the class\r\n+     * itself instead of the delegate. It is better to overwrite the \r\n+     * invokeCustom method where the Object related methods are filtered out.\r\n+     * \r\n+     * @see #invokeCustom(Object, Method, Object[])\r\n+     * @see InvocationHandler#invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])\r\n+     * \r\n+     * @param proxy the proxy\r\n+     * @param method the method\r\n+     * @param args the arguments\r\n+     * @return the result of the invocation by method or delegate\r\n+     * @throws Throwable any exception caused by the delegate or the method\r\n+     */\r\n+    public Object invoke(Object proxy, Method method, Object[] args)\r\n+    throws Throwable {\r\n+        if(!isObjectMethod(method)){\r\n+            return invokeCustom(proxy,method,args);\r\n+        }\r\n+        try {\r\n+            return method.invoke(this, args);\r\n+        } catch (InvocationTargetException ite) {\r\n+            throw ite.getTargetException();\r\n+        }  \r\n+    }\r\n+    \r\n+    /**\r\n+     * This method is called for all Methods not defined on Object. \r\n+     * The delegate should be called here.\r\n+     * \r\n+     * @param proxy the proxy\r\n+     * @param method the method\r\n+     * @param args the arguments\r\n+     * @return the result of the invocation of the delegate\r\n+     * @throws Throwable any exception causes by the delegate\r\n+     * @see #invoke(Object, Method, Object[])\r\n+     * @see InvocationHandler#invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])\r\n+     * \r\n+     */\r\n+    public abstract Object invokeCustom(Object proxy, Method method, Object[] args) throws Throwable;\r\n+    \r\n+    /**\r\n+     * Indicates whether some other object is \"equal to\" this one.\r\n+     * The delegate is used if the class of the parameter and the\r\n+     * current class are equal. In other cases the method will return \r\n+     * false. The exact class is here used, if inheritance is needed,\r\n+     * this method must be overwritten. \r\n+     *        \r\n+     * @see java.lang.Object#equals(java.lang.Object)\r\n+     */\r\n+    public boolean equals(Object obj) {\r\n+        if (obj!=null && obj.getClass()==this.getClass()){\r\n+            return (((ConversionHandler)obj).getDelegate()).equals(obj);\r\n+        } else {\r\n+            return false;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns a hash code value for the delegate. \r\n+     * @see java.lang.Object#hashCode()\r\n+     */\r\n+    public int hashCode() {\r\n+        return delegate.hashCode();\r\n+    }\r\n+    \r\n+    /**\r\n+     * Returns a String version of the delegate.\r\n+     * @see java.lang.Object#toString()\r\n+     */\r\n+    public String toString() {\r\n+        return delegate.toString();\r\n+    }\r\n+    \r\n+    private static boolean isObjectMethod(Method mtd){\r\n+        return mtd.getDeclaringClass().equals(Object.class);\r\n+    }\r\n+}\r",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/ConversionHandler.java",
                "sha": "4112d5a2a2120337080a25294c031a813f0766c6",
                "status": "added"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/ConvertedClosure.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/ConvertedClosure.java?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/runtime/ConvertedClosure.java",
                "patch": "@@ -0,0 +1,28 @@\n+package org.codehaus.groovy.runtime;\r\n+\r\n+import java.lang.reflect.Method;\r\n+import groovy.lang.Closure;\r\n+\r\n+/**\r\n+ * This class is a general adapter to adapt a closure to any Java interface.\r\n+ * <p>\r\n+ * @author Ben Yu\r\n+ * @author <a href=\"mailto:blackdrag@gmx.org\">Jochen Theodorou</a>\r\n+ * Jul 27, 2006 3:50:51 PM\r\n+ */\r\n+public class ConvertedClosure extends ConversionHandler {\r\n+    \r\n+    /**\r\n+     * to create a ConvertedClosure object.\r\n+     * @param closure the closure object.\r\n+     */\r\n+    protected ConvertedClosure(Closure closure) {\r\n+        super(closure);\r\n+    }\r\n+    \r\n+    public Object invokeCustom(Object proxy, Method method, Object[] args)\r\n+    throws Throwable {\r\n+        return ((Closure) getDelegate()).call(args);\r\n+    }\r\n+}\r\n+\r",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/ConvertedClosure.java",
                "sha": "5a4ce583cce9ca46aeac4575891e3e2b4031f8f3",
                "status": "added"
            },
            {
                "additions": 41,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/ConvertedMap.java",
                "changes": 41,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/ConvertedMap.java?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/runtime/ConvertedMap.java",
                "patch": "@@ -0,0 +1,41 @@\n+/*\r\n+ * ConvertedClosure.java created on 12.10.2006\r\n+ *\r\n+ * To change this generated comment go to \r\n+ * Window>Preferences>Java>Code Generation>Code and Comments\r\n+ */\r\n+package org.codehaus.groovy.runtime;\r\n+\r\n+import java.lang.reflect.Method;\r\n+import java.util.Map;\r\n+\r\n+import groovy.lang.Closure;\r\n+\r\n+/**\r\n+ * This class is a general adapter to adapt a map of closures to\r\n+ * any Java interface.\r\n+ * <p>\r\n+ * @author <a href=\"mailto:blackdrag@gmx.org\">Jochen Theodorou</a>\r\n+ */\r\n+public class ConvertedMap extends ConversionHandler {\r\n+        \r\n+    /**\r\n+     * to create a ConvertedMap object.\r\n+     * @param map the map of closres\r\n+     */\r\n+    protected ConvertedMap(Map closures) {\r\n+        super(closures);\r\n+    }\r\n+    \r\n+    public Object invokeCustom(Object proxy, Method method, Object[] args)\r\n+    throws Throwable {\r\n+        Map m = (Map) getDelegate();\r\n+        Closure cl = (Closure) m.get(method.getName());\r\n+        return cl.call(args);\r\n+    }\r\n+    \r\n+    public String toString() {\r\n+        return DefaultGroovyMethods.toString((Map) getDelegate());\r\n+    }\r\n+}\r\n+\r",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/ConvertedMap.java",
                "sha": "90590d67a2ad57796ab70605e6617681a9506e28",
                "status": "added"
            },
            {
                "additions": 43,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 3,
                "filename": "src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java",
                "patch": "@@ -43,6 +43,7 @@\n import java.lang.reflect.Array;\n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n+import java.lang.reflect.Proxy;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.net.MalformedURLException;\n@@ -551,6 +552,26 @@ public static Collection unique(Collection self) {\n         self.addAll(answer);\n         return self;\n     }\n+    \n+    /**\n+     * A convenience method for making a collection unique using a closure as a comparator\n+     * (by Michael Baehr)\n+     * @param self    a Collection\n+     * @param closure a Closure used as a comparator\n+     * @return self   without any duplicates\n+     */\n+    public static Collection unique(Collection self, Closure closure) {\n+        if (self instanceof Set)\n+            return self;\n+        // use a comparator of one item or two\n+        int params = closure.getMaximumNumberOfParameters();\n+        if (params == 1) {\n+            unique(self, new OrderBy(closure));\n+        } else {\n+            unique(self, new ClosureComparator(closure));\n+        }\n+        return self;\n+    }\n \n     /**\n      * Remove all duplicates from a given Collection.\n@@ -2554,6 +2575,26 @@ public static Object asType(Collection col, Class clazz) {\n         }\n         return asType((Object) col, clazz);\n     }\n+    \n+    public static Object asType(Closure cl, Class clazz) {\n+        if (clazz.isInterface() && !(clazz.isInstance(cl))) {\n+            return Proxy.newProxyInstance(\n+                    clazz.getClassLoader(),\n+                    new Class[]{clazz},\n+                    new ConvertedClosure(cl));\n+        }\n+        return asType((Object) cl, clazz);\n+    }\n+    \n+    public static Object asType(Map map, Class clazz) {\n+        if (clazz.isInterface() && !(clazz.isInstance(map))) {\n+            return Proxy.newProxyInstance(\n+                    clazz.getClassLoader(),\n+                    new Class[]{clazz},\n+                    new ConvertedMap(map));\n+        }\n+        return asType((Object) map, clazz);\n+    }\n \n     /**\n      * Reverses the list\n@@ -2618,12 +2659,11 @@ public static List multiply(Collection self, Number factor) {\n     /**\n      * Create a List composed of the intersection of both collections\n      *\n-     * @param left  a List\n+     * @param left  a Collection\n      * @param right a Collection\n      * @return a List as an intersection of both collections\n      */\n-    public static List intersect(List left, Collection right) {\n-\n+    public static List intersect(Collection left, Collection right) {\n         if (left.size() == 0)\n             return new ArrayList();\n ",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java",
                "sha": "851b07c766fba0fb616d76de6a95b6e580a38d22",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/MetaClassHelper.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/MetaClassHelper.java?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/runtime/MetaClassHelper.java",
                "patch": "@@ -681,6 +681,7 @@ public static Object doMethodInvoke(Object object, MetaMethod method, Object[] a\n     }\n     \n     protected static String getClassName(Object object) {\n+        if (object==null) return null;\n         return (object instanceof Class) ? ((Class)object).getName() : object.getClass().getName();\n     }\n     \n@@ -709,7 +710,7 @@ public static Closure getMethodPointer(Object object, String methodName) {\n         throw new IllegalArgumentException(\"Must be a Method or Constructor\");\n     }\n    \n-    protected static boolean isAssignableFrom(Class classToTransformTo, Class classToTransformFrom) {\n+    public static boolean isAssignableFrom(Class classToTransformTo, Class classToTransformFrom) {\n         if (classToTransformFrom==null) return true;\n         classToTransformTo = autoboxType(classToTransformTo);\n         classToTransformFrom = autoboxType(classToTransformFrom);",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/MetaClassHelper.java",
                "sha": "a35611b481f702d21ed91deb8be1d9dc85b64847",
                "status": "modified"
            },
            {
                "additions": 143,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/typehandling/ClassDistance.java",
                "changes": 143,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/typehandling/ClassDistance.java?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/runtime/typehandling/ClassDistance.java",
                "patch": "@@ -0,0 +1,143 @@\n+/*\r\n+ * Class for calculating \"distances\" between classes. Such a distance\r\n+ * is not a real distance to something but should be seen as the order\r\n+ * classes and interfaces are choosen for method selection. The class\r\n+ * will keep a weak cache and recalculate the distances on demand. \r\n+ */\r\n+package org.codehaus.groovy.runtime.typehandling;\r\n+\r\n+import java.io.Serializable;\r\n+import java.math.BigDecimal;\r\n+import java.math.BigInteger;\r\n+import java.util.WeakHashMap;\r\n+\r\n+public class ClassDistance {\r\n+    private static WeakHashMap classDistances;\r\n+    \r\n+    private static class Entry {\r\n+        \r\n+    }\r\n+    \r\n+    private static class LinearEntry  extends Entry{\r\n+        Class[] entries;\r\n+        void concat(Class[] c,LinearEntry le){\r\n+            entries = new Class[c.length+le.entries.length];\r\n+            System.arraycopy(c,0,entries,0,c.length);\r\n+            System.arraycopy(le.entries,0,entries,c.length,le.entries.length);\r\n+        }\r\n+        void concat(Class c,LinearEntry le){\r\n+            entries = new Class[1+le.entries.length];\r\n+            entries[0] = c;\r\n+            System.arraycopy(le.entries,0,entries,1,le.entries.length);\r\n+        }\r\n+    }\r\n+    \r\n+    static {\r\n+        classDistances = new WeakHashMap();\r\n+        initialPopulate();\r\n+    }\r\n+    \r\n+    private static void initialPopulate() {\r\n+        // int, double, byte, float, BigInteger, BigDecimal, long, short\r\n+        // GString, char\r\n+        \r\n+        \r\n+        LinearEntry object = new LinearEntry();\r\n+        object.entries = new Class[]{Object.class};\r\n+        classDistances.put(Object.class,object);\r\n+        \r\n+        LinearEntry number = new LinearEntry();\r\n+        number.concat(new Class[]{Number.class,Serializable.class},object);\r\n+        classDistances.put(Number.class,number);\r\n+\r\n+        LinearEntry compareableNumber = new LinearEntry();\r\n+        compareableNumber.concat(Comparable.class,number);\r\n+        \r\n+        LinearEntry binteger = new LinearEntry();\r\n+        binteger.concat(new Class[]{BigInteger.class, BigDecimal.class}, compareableNumber);\r\n+        classDistances.put(BigInteger.class,object);\r\n+        \r\n+        LinearEntry bdec = new LinearEntry();\r\n+        binteger.concat(new Class[]{BigDecimal.class, BigInteger.class}, compareableNumber);\r\n+        classDistances.put(BigDecimal.class,object);\r\n+        \r\n+        \r\n+        \r\n+        // byte:\r\n+        LinearEntry start = new LinearEntry();\r\n+        start.entries =  new Class[]{\r\n+                byte.class, Byte.class, short.class, Short.class,\r\n+                int.class, Integer.class, long.class, Long.class,\r\n+                BigInteger.class,\r\n+                float.class, Float.class,  double.class, Double.class, \r\n+                BigDecimal.class,\r\n+                Number.class,Object.class};\r\n+        classDistances.put(byte.class,start);\r\n+        \r\n+        // short:\r\n+        start = new LinearEntry();\r\n+        start.entries =  new Class[]{\r\n+                short.class, Short.class,\r\n+                int.class, Integer.class, long.class, Long.class,\r\n+                BigInteger.class,\r\n+                float.class, Float.class,  double.class, Double.class, \r\n+                BigDecimal.class,\r\n+                Number.class,Object.class};\r\n+        classDistances.put(short.class,start);\r\n+        \r\n+        // int:\r\n+        start = new LinearEntry();\r\n+        start.entries =  new Class[]{\r\n+                int.class, Integer.class, long.class, Long.class,\r\n+                BigInteger.class,\r\n+                float.class, Float.class,  double.class, Double.class, \r\n+                BigDecimal.class,\r\n+                Number.class,Object.class};\r\n+        classDistances.put(int.class,start);\r\n+        \r\n+        // long:\r\n+        start = new LinearEntry();\r\n+        start.entries =  new Class[]{\r\n+                long.class, Long.class,\r\n+                BigInteger.class,\r\n+                float.class, Float.class,  double.class, Double.class, \r\n+                BigDecimal.class,\r\n+                Number.class,Object.class};\r\n+        classDistances.put(long.class,start);\r\n+        \r\n+        // Biginteger:\r\n+        start = new LinearEntry();\r\n+        start.entries =  new Class[]{\r\n+                BigInteger.class,\r\n+                float.class, Float.class,  double.class, Double.class, \r\n+                BigDecimal.class,\r\n+                Number.class,Object.class};\r\n+        classDistances.put(long.class,start);\r\n+        \r\n+        // float:\r\n+        start = new LinearEntry();\r\n+        start.entries =  new Class[]{ \r\n+                byte.class, Byte.class, short.class, Short.class,\r\n+                int.class, Integer.class, long.class, Long.class,\r\n+                BigInteger.class,\r\n+                float.class, Float.class,  double.class, Double.class, \r\n+                BigDecimal.class,\r\n+                Number.class,Object.class};\r\n+        classDistances.put(float.class,start);\r\n+        \r\n+        // double:\r\n+        start = new LinearEntry();\r\n+        start.entries =  new Class[]{ \r\n+                double.class,\r\n+                Double.class, BigDecimal.class,\r\n+                Number.class,Object.class};\r\n+        classDistances.put(double.class,start);\r\n+\r\n+    }\r\n+    \r\n+    private synchronized static void popultate(Class clazz) {\r\n+        if (classDistances.get(clazz) != null) return;\r\n+        \r\n+    }\r\n+    \r\n+}\r",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/typehandling/ClassDistance.java",
                "sha": "da630581ac8b441d81a62eb44931ced19b7d3a0b",
                "status": "added"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java",
                "patch": "@@ -33,6 +33,7 @@\n public class DefaultTypeTransformation {\n     \n     protected static final Object[] EMPTY_ARGUMENTS = {};\n+    protected static final BigInteger ONE_NEG = new BigInteger(\"-1\");\n     \n     //  --------------------------------------------------------\n     //                  unboxing methods\n@@ -249,7 +250,14 @@ public static Object castToType(Object object, Class type) {\n             } else if (type == BigDecimal.class) {\n                 return new BigDecimal(n.toString());\n             } else if (type == BigInteger.class) {\n-                return new BigInteger(n.toString());\n+                if (object instanceof Float || object instanceof Double) {\n+                    BigDecimal bd = new BigDecimal(n.doubleValue());\n+                    return bd.toBigInteger();\n+                } else if (object instanceof BigDecimal) {\n+                    return ((BigDecimal) object).toBigInteger();\n+                } else {\n+                    return new BigInteger(n.toString());\n+                }\n             }\n         } else if (type.isPrimitive()) {\n             if (type == byte.class) {",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java",
                "sha": "6de40cc1294d422b05c43ee3cc802c237d241ac1",
                "status": "modified"
            },
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/groovy/BigDecimalOperationTest.groovy",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/BigDecimalOperationTest.groovy?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 0,
                "filename": "src/test/groovy/BigDecimalOperationTest.groovy",
                "patch": "@@ -86,4 +86,42 @@ class BigDecimalOperationTest extends GroovyTestCase {\n     void testBigDecimalCoerce() {\n         assert echoX(9.95, 1.0) == echoX(9.95, 1)\n     }\n+    \n+    void testAssign() {\n+        BigDecimal foo\n+        foo = (byte) 20\n+        assert foo.class == BigDecimal.class\n+        assert foo == 20\n+\n+        foo = (short) 20\n+        assert foo.class == BigDecimal.class\n+        assert foo == 20\n+\n+        foo = (int) 20\n+        assert foo.class == BigDecimal.class\n+        assert foo == 20\n+\n+        foo = (long) 20\n+        assert foo.class == BigDecimal.class\n+        assert foo == 20\n+\n+        foo = (float) 0.5f\n+        assert foo.class == BigDecimal.class\n+        assert foo == 0.5\n+\n+        foo = (double) 0.5d\n+        assert foo.class == BigDecimal.class\n+        assert foo == 0.5\n+        \n+        foo = 10G\n+        assert foo.class == BigDecimal.class\n+        assert foo == 10\n+        \n+        double d = 1000\n+        d *= d\n+        d *= d\n+        d *= d\n+        assert (long)d != d\n+\t\tassert (BigDecimal) d == d\n+    }\n }",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/groovy/BigDecimalOperationTest.groovy",
                "sha": "f448516e1c3fb91d1211560724bc80b01c4088b9",
                "status": "modified"
            },
            {
                "additions": 39,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/groovy/BigIntegerOperationTest.groovy",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/BigIntegerOperationTest.groovy?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 0,
                "filename": "src/test/groovy/BigIntegerOperationTest.groovy",
                "patch": "@@ -0,0 +1,39 @@\n+class BigIntegerOperationTest extends GroovyTestCase {\r\n+    void testAssign() {\r\n+        BigInteger foo\r\n+        foo = (byte) 20\r\n+        assert foo.class == BigInteger\r\n+        assert foo == 20\r\n+\r\n+        foo = (short) 20\r\n+        assert foo.class == BigInteger\r\n+        assert foo == 20\r\n+\r\n+        foo = (int) 20\r\n+        assert foo.class == BigInteger\r\n+        assert foo == 20\r\n+\r\n+        foo = (long) 20\r\n+        assert foo.class == BigInteger\r\n+        assert foo == 20\r\n+\r\n+        foo = (float) 0.5f\r\n+        assert foo.class == BigInteger\r\n+        assert foo == 0\r\n+\r\n+        foo = (double) 0.5d\r\n+        assert foo.class == BigInteger\r\n+        assert foo == 0\r\n+        \r\n+        foo = 10.5G\r\n+        assert foo.class == BigInteger\r\n+        assert foo == 10\r\n+        \r\n+        double d = 1000\r\n+        d *= d\r\n+        d *= d\r\n+        d *= d\r\n+        assert (long)d != d\r\n+\t\tassert (BigInteger) d == d\r\n+    }\r\n+}\r",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/groovy/BigIntegerOperationTest.groovy",
                "sha": "0205213a5fdee1028a9716f7d46d37d46b1bdb12",
                "status": "added"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/groovy/GroovyMethodsTest.groovy",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/GroovyMethodsTest.groovy?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 0,
                "filename": "src/test/groovy/GroovyMethodsTest.groovy",
                "patch": "@@ -306,6 +306,31 @@ class GroovyMethodsTest extends GroovyTestCase {\n         assert [3.5, 4.6] == result[BigDecimal]\n         assert 3 == result.size()\n     }\n+    \n+    def leftCol  = [\"2\"]\n+    def rightCol = [\"1\",\"2\",\"3\"]\n+\n+    void testList() {\n+      def lst  = [] as LinkedList\n+      doIt(lst)\n+    }\n+\n+    void testSet() {\n+      def set  = [] as HashSet \n+      doIt(set)\n+    }\n+                    \n+    void testVector() {\n+      def vctr  = [] as Vector\n+      doIt(vctr)\n+    }\n+\n+    void doIt(col) {\n+      col.clear();\n+      col.addAll(leftCol);\n+      // not really concerned about  correctness, rather that the method can be called, however..\n+      assert col.intersect(rightCol) == [\"2\"]\n+    }\n }\n \n class WackyHashCode {",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/groovy/GroovyMethodsTest.groovy",
                "sha": "5558c2c9d6cd2e2c552e6106d1f8b5ff139a7dd9",
                "status": "modified"
            },
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/groovy/UniqueTest.groovy",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/UniqueTest.groovy?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 0,
                "filename": "src/test/groovy/UniqueTest.groovy",
                "patch": "@@ -0,0 +1,31 @@\n+/** \r\n+ * @author Michael Baehr\r\n+ */\r\n+class UniqueTest extends GroovyTestCase {\r\n+    \r\n+\tvoid testUnique() {\r\n+\t\tdef list = [-1, 0, 1, 1, 0, -1]\r\n+    assert list.unique() == [-1, 0, 1]\r\n+\t}\r\n+\t\r\n+\tvoid testUniqueWithComparator() {\r\n+\t\tdef list = [-1, 0, 1, 1, 0, -1]\r\n+\t\tdef comparator = new ClosureComparator() {a,b -> Math.abs(a) <=> Math.abs(b)} \r\n+    assert list.unique(comparator) == [-1, 0]\r\n+\t}    \r\n+\t\r\n+\t// new functionality - see GROOVY-1236\r\n+\tvoid testUniqueWithTwoParameterClosure() {\r\n+\t\tdef list = [-1, 0, 1, 1, 0, -1]\r\n+\t\tdef closure = {a,b -> Math.abs(a) <=> Math.abs(b)} \r\n+    assert list.unique(closure) == [-1, 0]\r\n+\t}   \r\n+\r\n+\t// new functionality - see GROOVY-1236\t\r\n+\tvoid testUniqueWithOneParameterClosure() {\r\n+\t\tdef list = [-1, 0, 1, 1, 0, -1]\r\n+\t\tdef closure = {a -> Math.abs(a)} \r\n+    assert list.unique(closure) == [-1, 0]\r\n+\t}   \r\n+\t\t\r\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/groovy/UniqueTest.groovy",
                "sha": "ed7e0e4f8c3da8848421170871e39a8607473a8d",
                "status": "added"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/org/codehaus/groovy/runtime/InterfaceConversionTest.groovy",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/runtime/InterfaceConversionTest.groovy?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/runtime/InterfaceConversionTest.groovy",
                "patch": "@@ -0,0 +1,26 @@\n+class InterfaceConversionTest extends GroovyTestCase {\r\n+ \r\n+  void testClosureConversion(){\r\n+\tdef c1 = {Object[] args -> args?.length}\r\n+\tdef c2 = c1 as InterfaceConversionTestFoo\r\n+\tassert !(c1 instanceof InterfaceConversionTestFoo)\r\n+\tassert c2 instanceof InterfaceConversionTestFoo\r\n+\tassert c2.a() == null\r\n+\tassert c2.b(null) == 1\r\n+  }\r\n+  \r\n+  void testMapConversion() {  \r\n+\tdef m1 = [a:{1}, b:{2}]\r\n+\tdef m2 = m1 as InterfaceConversionTestFoo\r\n+\t\r\n+\tassert !(m1 instanceof InterfaceConversionTestFoo)\r\n+\tassert m2 instanceof InterfaceConversionTestFoo\r\n+\tassert m2.a() == 1\r\n+\tassert m2.b(null) == 2\r\n+  }\r\n+}\r\n+ \r\n+interface InterfaceConversionTestFoo {\r\n+    def a();\r\n+    def b(Integer i);\r\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/org/codehaus/groovy/runtime/InterfaceConversionTest.groovy",
                "sha": "fb803d1661017ea2b3d5323f2fbd8f1acd0d17ee",
                "status": "added"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/org/codehaus/groovy/runtime/MetaClassHelperTest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/runtime/MetaClassHelperTest.java?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/runtime/MetaClassHelperTest.java",
                "patch": "@@ -0,0 +1,10 @@\n+package org.codehaus.groovy.runtime;\r\n+\r\n+import junit.framework.TestCase;\r\n+\r\n+public class MetaClassHelperTest extends TestCase {\r\n+    public void testGetClassName() {\r\n+        // GROOVY-1262\r\n+        MetaClassHelper.getClassName(null); \r\n+    }\r\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/org/codehaus/groovy/runtime/MetaClassHelperTest.java",
                "sha": "202116f4efba90651f7ca37546b8d20821d84966",
                "status": "added"
            }
        ],
        "message": "patches for Groovy-748 (ensure files are closed), Groovy-1125 (intersect on Collection), Groovy-1141 (conversion from int to BigInteger), Groovy-1236 (unique on Collection), Groovy-1262 (NPE in MetaClassHelper), Groovy-1439 (use closure as for interface implementation), Groovy-1529 (use map of closures for interface implementation)\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@4112 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/5abd4ecd0cd98ce5c6b9278ba021f42f07e21788",
        "patched_files": [
            "UniqueTest.groovy",
            "CharsetToolkit.java",
            "DefaultTypeTransformation.java",
            "MetaClassHelper.java",
            "BigDecimalOperationTest.groovy",
            "ConversionHandler.java",
            "GroovyMethodsTest.groovy",
            "ClassDistance.java",
            "ConvertedMap.java",
            "ConvertedClosure.java",
            "MetaClassImpl.java",
            "InterfaceConversionTest.groovy",
            "DefaultGroovyMethods.java",
            "BigIntegerOperationTest.groovy"
        ],
        "repo": "groovy",
        "unit_tests": [
            "DefaultGroovyMethodsTest.java",
            "MetaClassHelperTest.java"
        ]
    },
    "groovy_939c56e": {
        "bug_id": "groovy_939c56e",
        "commit": "https://github.com/apache/groovy/commit/939c56e25e88774d5996d57eeca8bf17d2fed40f",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/groovy/blob/939c56e25e88774d5996d57eeca8bf17d2fed40f/src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/control/CompilationUnit.java?ref=939c56e25e88774d5996d57eeca8bf17d2fed40f",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "patch": "@@ -1038,7 +1038,9 @@ public void applyToPrimaryClassNodes(PrimaryClassNodeOperation body) throws Comp\n             } catch (CompilationFailedException e) {\n                 // fall through, getErrorReporter().failIfErrors() will trigger\n             } catch (NullPointerException npe) {\n-                throw npe;\n+                GroovyBugError gbe = new GroovyBugError(\"unexpected NullpointerException\", npe);\n+                changeBugText(gbe, context);\n+                throw gbe;\n             } catch (GroovyBugError e) {\n                 changeBugText(e, context);\n                 throw e;",
                "raw_url": "https://github.com/apache/groovy/raw/939c56e25e88774d5996d57eeca8bf17d2fed40f/src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "sha": "e554a716ca35ce63a618ec58064a54d42d793900",
                "status": "modified"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/groovy/blob/939c56e25e88774d5996d57eeca8bf17d2fed40f/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java?ref=939c56e25e88774d5996d57eeca8bf17d2fed40f",
                "deletions": 6,
                "filename": "src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "patch": "@@ -3435,7 +3435,7 @@ protected ClassNode inferReturnTypeGenerics(final ClassNode receiver, final Meth\n \n         return resolveGenericsWithContext(resolvedPlaceholders, returnType);\n     }\n-    \n+\n     private ClassNode resolveGenericsWithContext(Map<String, GenericsType> resolvedPlaceholders, ClassNode currentType) {\n         Map<String, GenericsType> placeholdersFromContext = getGenericsParameterMapOfThis(typeCheckingContext.getEnclosingMethod());\n         applyContextGenerics(resolvedPlaceholders,placeholdersFromContext);\n@@ -3521,7 +3521,12 @@ private static ClassNode getDeclaringClass(MethodNode method, Expression argumen\n     private Map<String, GenericsType> resolvePlaceHoldersFromDeclartion(ClassNode receiver, ClassNode declaration, MethodNode method, boolean isStaticTarget) {\n         Map<String, GenericsType> resolvedPlaceholders;\n         if (isStaticTarget && CLASS_Type.equals(receiver) && receiver.isUsingGenerics() && receiver.getGenericsTypes().length>0) {\n-            resolvedPlaceholders = new HashMap<String, GenericsType>();\n+            resolvedPlaceholders = new HashMap<String, GenericsType>() {\n+                public GenericsType put(String key, GenericsType value) {\n+                    if (key==null || value==null) throw new NullPointerException(\"Key and value must not be null.\");\n+                    return super.put(key,value);\n+                }\n+            };\n             GenericsUtils.extractPlaceholders(receiver.getGenericsTypes()[0].getType(), resolvedPlaceholders);\n         } else {\n             resolvedPlaceholders = extractPlaceHolders(method, receiver, declaration);\n@@ -3537,7 +3542,12 @@ private static void addMethodLevelDeclaredGenerics(MethodNode method, Map<String\n     \n     private static Map<String, GenericsType> extractPlaceHolders(MethodNode method, ClassNode receiver, ClassNode declaringClass) {\n         if (declaringClass.equals(OBJECT_TYPE)) {\n-            Map<String, GenericsType> resolvedPlaceholders = new HashMap<String, GenericsType>();\n+            Map<String, GenericsType> resolvedPlaceholders = new HashMap<String, GenericsType>() {\n+                public GenericsType put(String key, GenericsType value) {\n+                    if (key==null || value==null) throw new NullPointerException(\"Key and value must not be null.\");\n+                    return super.put(key,value);\n+                }\n+            };\n             if (method!=null) addMethodLevelDeclaredGenerics(method, resolvedPlaceholders);\n             return resolvedPlaceholders;\n         }\n@@ -3546,7 +3556,12 @@ private static void addMethodLevelDeclaredGenerics(MethodNode method, Map<String\n         ClassNode current = receiver;\n         while (true) {\n             //extract the place holders\n-            Map<String, GenericsType> currentPlaceHolders = new HashMap<String, GenericsType>();\n+            Map<String, GenericsType> currentPlaceHolders = new HashMap<String, GenericsType>() {\n+                public GenericsType put(String key, GenericsType value) {\n+                    if (key==null || value==null) throw new NullPointerException(\"Key and value must not be null.\");\n+                    return super.put(key,value);\n+                }\n+            };\n             GenericsUtils.extractPlaceholders(current, currentPlaceHolders);\n \n             if (method!=null && declaringClass.equals(current)) {\n@@ -3611,6 +3626,11 @@ private static void addMethodLevelDeclaredGenerics(MethodNode method, Map<String\n      * for which placeholders are resolved recursively.\n      */\n     protected static GenericsType fullyResolve(GenericsType gt, Map<String, GenericsType> placeholders) {\n+        if (gt==null) throw new GroovyBugError(\"gt must not be null.\");\n+        if (placeholders==null) throw new GroovyBugError(\"placeholders map must not be null\");\n+        GenericsType fromMap = placeholders.get(gt.getName());\n+        if (fromMap==null) throw new GroovyBugError(\"placeholders entry has null value, key was: \"+gt.getName()+\" and map entry exists: \"+placeholders.containsKey(gt.getName()));\n+\n         if (gt.isPlaceholder() && placeholders.containsKey(gt.getName()) && !placeholders.get(gt.getName()).isPlaceholder()) {\n             gt = placeholders.get(gt.getName());\n         }\n@@ -3731,7 +3751,12 @@ protected void typeCheckMethodsWithGenerics(ClassNode receiver, ClassNode[] argu\n                 ClassNode firstArgType = GenericsUtils.parameterizeType(receiver, dgmMethodFirstArgType);\n \n \n-                Map<String, GenericsType> placeholders = new HashMap<String, GenericsType>();\n+                Map<String, GenericsType> placeholders = new HashMap<String, GenericsType>() {\n+                    public GenericsType put(String key, GenericsType value) {\n+                        if (key==null || value==null) throw new NullPointerException(\"Key and value must not be null.\");\n+                        return super.put(key,value);\n+                    }\n+                };\n                 GenericsType[] gts = dgmMethodFirstArgType.getGenericsTypes();\n                 for (int i = 0; gts != null && i < gts.length; i++) {\n                     GenericsType gt = gts[i];\n@@ -4051,7 +4076,12 @@ private void applyContextGenerics(Map<String, GenericsType> resolvedPlaceholders\n \n     private static Map<String, GenericsType> mergeGenerics(Map<String, GenericsType> current, GenericsType[] newGenerics) {\n         if (newGenerics == null || newGenerics.length == 0) return null;\n-        if (current==null) current = new HashMap<String, GenericsType>();\n+        if (current==null) current = new HashMap<String, GenericsType>() {\n+            public GenericsType put(String key, GenericsType value) {\n+                if (key==null || value==null) throw new NullPointerException(\"Key and value must not be null.\");\n+                return super.put(key,value);\n+            }\n+        };\n         for (int i = 0; i < newGenerics.length; i++) {\n             GenericsType gt = newGenerics[i];\n             if (!gt.isPlaceholder()) continue;",
                "raw_url": "https://github.com/apache/groovy/raw/939c56e25e88774d5996d57eeca8bf17d2fed40f/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "sha": "ae26116a925e023c5f59c5332c65203f04c0e33e",
                "status": "modified"
            }
        ],
        "message": "Some modifications to be able to diagnose NPEs better",
        "parent": "https://github.com/apache/groovy/commit/8ee6e5efa8887ce460ff4aa60a5691361a38bd19",
        "patched_files": [
            "CompilationUnit.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "CompilationUnitTest.java"
        ]
    },
    "groovy_9b1497a": {
        "bug_id": "groovy_9b1497a",
        "commit": "https://github.com/apache/groovy/commit/9b1497ae86b951dae07e4b6285dc7814a5848494",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/groovy/blob/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/groovy/lang/MissingClassException.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/MissingClassException.java?ref=9b1497ae86b951dae07e4b6285dc7814a5848494",
                "deletions": 0,
                "filename": "src/main/groovy/lang/MissingClassException.java",
                "patch": "@@ -46,6 +46,7 @@\n package groovy.lang;\n \n import org.codehaus.groovy.ast.ASTNode;\n+import org.codehaus.groovy.ast.Type;\n \n /**\n  * An exception occurred if a dynamic method dispatch fails with an unknown class.\n@@ -64,6 +65,10 @@ public MissingClassException(String type, ASTNode node, String message) {\n         super(\"No such class: \" + type + \" \" + message, node);\n         this.type = type;\n     }\n+    \n+    public MissingClassException(Type type, String message){\n+        super(\"No such class: \" + type.getName() + \" \" + message);\n+    }\n \n     /**\n      * ",
                "raw_url": "https://github.com/apache/groovy/raw/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/groovy/lang/MissingClassException.java",
                "sha": "f9d0d661844674aa653cc92a2221ab21161d65bd",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/groovy/blob/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/org/codehaus/groovy/ast/ClassNode.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/ast/ClassNode.java?ref=9b1497ae86b951dae07e4b6285dc7814a5848494",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/ast/ClassNode.java",
                "patch": "@@ -630,8 +630,11 @@ protected Parameter createParameter(Class parameterType, int idx) {\n         return new Parameter(Type.makeType(parameterType), \"param\" + idx);\n     }\n \n-\n     public Type resolveClassName(Type type) {\n+        return resolveClassName(type,null);\n+    }\n+    \n+    public Type resolveClassName(Type type, String message) {\n         Type answer = null;\n         if (type != null) {\n             if (getType().equals(type) || getNameWithoutPackage().equals(type.getName())) {\n@@ -650,6 +653,7 @@ public Type resolveClassName(Type type) {\n                 answer = tryResolveClassAndInnerClass(Type.makeType(replacedPointType));\n             }\n         }\n+        if (answer==null && message!=null) throw new MissingClassException(type,message);\n         return answer;\n     }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/org/codehaus/groovy/ast/ClassNode.java",
                "sha": "715e71688e151348b5c3282c110f95425f28343c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java?ref=9b1497ae86b951dae07e4b6285dc7814a5848494",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java",
                "patch": "@@ -1699,7 +1699,7 @@ public void visitConstructorCallExpression(ConstructorCallExpression call) {\n \n         // lets check that the type exists\n         Type type = call.getType();\n-        type = classNode.resolveClassName(type);\n+        type = classNode.resolveClassName(type, \"\");\n         call.setType(type);\n         \n         visitClassExpression(new ClassExpression(type));",
                "raw_url": "https://github.com/apache/groovy/raw/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java",
                "sha": "e4b8a29982286e1bd6f282240e3b66d35f8e62f5",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/control/CompilationUnit.java?ref=9b1497ae86b951dae07e4b6285dc7814a5848494",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "patch": "@@ -54,7 +54,6 @@\n package org.codehaus.groovy.control;\n \n import java.io.File;\n-import java.io.FileNotFoundException;\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n@@ -853,6 +852,8 @@ public void applyToPrimaryClassNodes(LoopBodyForPrimaryClassNodeOperations body)\n                 }\n             } catch (CompilationFailedException e) {\n                 // fall thorugh, getErrorREporter().failIfErrors() will triger\n+            } catch (NullPointerException npe){\n+                throw npe;\n             } catch (Exception e) {\n                 failures = true;\n //                String msg = e.getMessage();",
                "raw_url": "https://github.com/apache/groovy/raw/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "sha": "280b0365f57341a9e9739cb6726f46938f11a4d9",
                "status": "modified"
            }
        ],
        "message": "avoids npe for missing classes and improves error reporting\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@2868 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/c0e40e8e1fe8751652b9e9d5cfbaecd1a7030bce",
        "patched_files": [
            "CompilationUnit.java",
            "ClassNode.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "ClassNodeTest.java",
            "CompilationUnitTest.java"
        ]
    },
    "groovy_ad4d5a4": {
        "bug_id": "groovy_ad4d5a4",
        "commit": "https://github.com/apache/groovy/commit/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf",
        "file": [
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/groovy/blob/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/.classpath",
                "changes": 85,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/.classpath?ref=ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf",
                "deletions": 54,
                "filename": ".classpath",
                "patch": "@@ -1,56 +1,33 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-\n <classpath>\n-  <classpathentry kind=\"src\" path=\"src/main\">\n-  </classpathentry>\n-  <classpathentry output=\"target/test-classes\" kind=\"src\" path=\"src/test\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/junit/jars/junit-3.8.1.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" rootpath=\"JRE_SRCROOT\" path=\"JRE_LIB\" sourcepath=\"JRE_SRC\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/asm/jars/asm-1.4.1.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/xerces/jars/xerces-2.4.0.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/xml-apis/jars/xml-apis-1.0.b2.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/classworlds/jars/classworlds-1.0-rc2.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/commons-cli/jars/commons-cli-1.0.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/ant/jars/ant-1.5.2.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/asm/jars/asm-util-1.4.1.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/asm/jars/asm-attrs-1.4.1.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/bsf/jars/bsf-2.3.0-rc1.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/mx4j/jars/mx4j-2.0-beta-1.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/mockobjects/jars/mockobjects-core-0.09.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/openejb/jars/openejb-loader-0.9.2.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/axion/jars/axion-1.0-M3-dev.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/commons-logging/jars/commons-logging-1.0.3.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/commons-collections/jars/commons-collections-3.0-dev2.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/regexp/jars/regexp-1.2.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/servletapi/jars/servletapi-2.3.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/radeox/jars/radeox-0.9.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/radeox/jars/radeox-oro-0.9.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/nekohtml/jars/nekohtml-0.7.7.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"var\" path=\"MAVEN_REPO/qdox/jars/qdox-1.3.jar\">\n-  </classpathentry>\n-  <classpathentry kind=\"output\" path=\"target/classes\">\n-  </classpathentry>\n-</classpath>\n\\ No newline at end of file\n+\t<classpathentry kind=\"src\" path=\"src/main\"/>\n+\t<classpathentry output=\"target/test-classes\" kind=\"src\" path=\"src/test\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/junit/jars/junit-3.8.1.jar\"/>\n+\t<classpathentry sourcepath=\"JRE_SRC\" kind=\"var\" path=\"JRE_LIB\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/asm/jars/asm-1.4.1.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/xerces/jars/xerces-2.4.0.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/xml-apis/jars/xml-apis-1.0.b2.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/classworlds/jars/classworlds-1.0-rc2.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/commons-cli/jars/commons-cli-1.0.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/ant/jars/ant-1.5.2.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/asm/jars/asm-util-1.4.1.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/asm/jars/asm-attrs-1.4.1.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/bsf/jars/bsf-2.3.0-rc1.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/mx4j/jars/mx4j-2.0-beta-1.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/mockobjects/jars/mockobjects-core-0.09.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/openejb/jars/openejb-loader-0.9.2.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/axion/jars/axion-1.0-M3-dev.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/commons-logging/jars/commons-logging-1.0.3.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/commons-collections/jars/commons-collections-3.0-dev2.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/regexp/jars/regexp-1.2.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/servletapi/jars/servletapi-2.3.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/radeox/jars/radeox-0.9.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/radeox/jars/radeox-oro-0.9.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/nekohtml/jars/nekohtml-0.7.7.jar\"/>\n+\t<classpathentry kind=\"var\" path=\"MAVEN_REPO/qdox/jars/qdox-1.3.jar\"/>\n+\t<classpathentry kind=\"lib\" path=\"/Applications/eclipse-3.0-m5/plugins/org.codehaus.groovy_1.0.0/asm-1.4.1.jar\"/>\n+\t<classpathentry kind=\"lib\" path=\"/Applications/eclipse-3.0-m5/plugins/org.codehaus.groovy_1.0.0/asm-attrs-1.4.1.jar\"/>\n+\t<classpathentry kind=\"lib\" path=\"/Applications/eclipse-3.0-m5/plugins/org.codehaus.groovy_1.0.0/asm-util-1.4.1.jar\"/>\n+\t<classpathentry kind=\"lib\" path=\"/Applications/eclipse-3.0-m5/plugins/org.codehaus.groovy_1.0.0/groovy-1.0-beta-3.jar\"/>\n+\t<classpathentry kind=\"output\" path=\"target/classes\"/>\n+</classpath>",
                "raw_url": "https://github.com/apache/groovy/raw/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/.classpath",
                "sha": "e44aa8c78d209af749a262ab72461f7c848ef347",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/groovy/blob/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/.project",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/.project?ref=ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf",
                "deletions": 16,
                "filename": ".project",
                "patch": "@@ -1,18 +1,29 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-\n <projectDescription>\n-  <name>groovy</name>\n-  <comment>a powerful and dynamic scripting language for the JVM</comment>\n-  <projects>\n-  </projects>\n-  <buildSpec>\n-    <buildCommand>\n-      <name>org.eclipse.jdt.core.javabuilder</name>\n-      <arguments>\n-      </arguments>\n-    </buildCommand>\n-  </buildSpec>\n-  <natures>\n-    <nature>org.eclipse.jdt.core.javanature</nature>\n-  </natures>\n-</projectDescription>\n\\ No newline at end of file\n+\t<name>groovy-core</name>\n+\t<comment>a powerful and dynamic scripting language for the JVM</comment>\n+\t<projects>\n+\t</projects>\n+\t<buildSpec>\n+\t\t<buildCommand>\n+\t\t\t<name>org.eclipse.jdt.core.javabuilder</name>\n+\t\t\t<arguments>\n+\t\t\t</arguments>\n+\t\t</buildCommand>\n+\t\t<buildCommand>\n+\t\t\t<name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>\n+\t\t\t<arguments>\n+\t\t\t\t<dictionary>\n+\t\t\t\t\t<key>LaunchConfigHandle</key>\n+\t\t\t\t\t<value>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n+&lt;launchConfiguration local=&quot;false&quot; path=&quot;/groovy-core/.externalToolBuilders/org.codehaus.groovy.eclipse.groovyBuilder (1).launch&quot;/&gt;\n+</value>\n+\t\t\t\t</dictionary>\n+\t\t\t</arguments>\n+\t\t</buildCommand>\n+\t</buildSpec>\n+\t<natures>\n+\t\t<nature>org.eclipse.jdt.core.javanature</nature>\n+\t\t<nature>org.codehaus.groovy.eclipse.groovyNature</nature>\n+\t</natures>\n+</projectDescription>",
                "raw_url": "https://github.com/apache/groovy/raw/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/.project",
                "sha": "434b3ff50dd29099f530b526c4e0953f735350e4",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/groovy/blob/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/src/main/groovy/lang/Closure.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/Closure.java?ref=ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf",
                "deletions": 3,
                "filename": "src/main/groovy/lang/Closure.java",
                "patch": "@@ -81,7 +81,7 @@ else if (\"call\".equals(method)) {\n             }\n             catch (MissingMethodException e) {\n                 Object delegate = getDelegate();\n-                if (delegate != this) {\n+                if (delegate != this && delegate != null) {\n                     try {\n                         // lets try invoke method on delegate\n                         return InvokerHelper.invokeMethod(delegate, method, arguments);\n@@ -101,7 +101,7 @@ public Object getProperty(String property) {\n         }\n         catch (GroovyRuntimeException e) {\n             Object delegate = getDelegate();\n-            if (delegate != this) {\n+            if (delegate != this && delegate != null) {\n                 try {\n                     // lets try invoke method on delegate\n                     return InvokerHelper.getProperty(delegate, property);\n@@ -121,7 +121,7 @@ public void setProperty(String property, Object newValue) {\n         }\n         catch (GroovyRuntimeException e) {\n             Object delegate = getDelegate();\n-            if (delegate != this) {\n+            if (delegate != this && delegate != null) {\n                 try {\n                     // lets try invoke method on delegate\n                     InvokerHelper.setProperty(delegate, property, newValue);",
                "raw_url": "https://github.com/apache/groovy/raw/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/src/main/groovy/lang/Closure.java",
                "sha": "f79af4120c12176c1b6dfaa4ecd438252553b168",
                "status": "modified"
            },
            {
                "additions": 89,
                "blob_url": "https://github.com/apache/groovy/blob/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/src/main/org/codehaus/groovy/classgen/ReflectorGenerator.java",
                "changes": 89,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/classgen/ReflectorGenerator.java?ref=ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/classgen/ReflectorGenerator.java",
                "patch": "@@ -47,6 +47,9 @@\n \n import groovy.lang.MetaMethod;\n \n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n import java.util.List;\n \n import org.objectweb.asm.ClassVisitor;\n@@ -183,6 +186,92 @@ protected void invokeMethod(MetaMethod method) {\n         helper.box(method.getReturnType());\n     }\n \n+    /*\n+    protected void generateInvokeSuperMethod() {\n+        List superMethods = new ArrayList(methods);\n+        for (Iterator iter = methods.iterator(); iter.hasNext();) {\n+            MetaMethod method = (MetaMethod) iter.next();\n+            if (!validSuperMethod(method)) {\n+                superMethods.remove(method);\n+            }\n+        }\n+        int methodCount = superMethods.size();\n+        if (methodCount == 0) {\n+            return;\n+        }\n+        cv =\n+            cw.visitMethod(\n+                ACC_PUBLIC,\n+                \"invokeSuper\",\n+                \"(Lgroovy/lang/MetaMethod;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\",\n+                null,\n+                null);\n+        helper = new BytecodeHelper(cv);\n+\n+        cv.visitVarInsn(ALOAD, 1);\n+        cv.visitMethodInsn(INVOKEVIRTUAL, \"groovy/lang/MetaMethod\", \"getMethodIndex\", \"()I\");\n+        Label defaultLabel = new Label();\n+        Label[] labels = new Label[methodCount];\n+        int[] indices = new int[methodCount];\n+        for (int i = 0; i < methodCount; i++) {\n+            labels[i] = new Label();\n+\n+            MetaMethod method = (MetaMethod) superMethods.get(i);\n+            method.setMethodIndex(i + 1);\n+            indices[i] = method.getMethodIndex();\n+\n+            //System.out.println(\"Index: \" + method.getMethodIndex() + \" for: \" + method);\n+        }\n+\n+        cv.visitLookupSwitchInsn(defaultLabel, indices, labels);\n+        //cv.visitTableSwitchInsn(minMethodIndex, maxMethodIndex, defaultLabel, labels);\n+\n+        for (int i = 0; i < methodCount; i++) {\n+            MetaMethod method = (MetaMethod) superMethods.get(i);\n+            cv.visitLabel(labels[i]);\n+\n+            invokeSuperMethod(method);\n+            if (method.getReturnType() == void.class) {\n+                cv.visitInsn(ACONST_NULL);\n+            }\n+            cv.visitInsn(ARETURN);\n+        }\n+\n+        cv.visitLabel(defaultLabel);\n+        cv.visitVarInsn(ALOAD, 0);\n+        cv.visitVarInsn(ALOAD, 1);\n+        cv.visitVarInsn(ALOAD, 2);\n+        cv.visitVarInsn(ALOAD, 3);\n+        cv.visitMethodInsn(\n+            INVOKEVIRTUAL,\n+            classInternalName,\n+            \"noSuchMethod\",\n+            \"(Lgroovy/lang/MetaMethod;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\");\n+        cv.visitInsn(ARETURN);\n+        cv.visitMaxs(4, 4);\n+    }\n+\n+    protected boolean validSuperMethod(MetaMethod method) {\n+        return !method.isStatic() && (method.getModifiers() & (Modifier.FINAL | Modifier.ABSTRACT)) == 0 && theClass == method.getDeclaringClass();\n+    }\n+\n+    protected void invokeSuperMethod(MetaMethod method) {\n+        Class ownerClass = method.getDeclaringClass();\n+        String type = helper.getClassInternalName(ownerClass.getName());\n+        String descriptor = helper.getMethodDescriptor(method.getReturnType(), method.getParameterTypes());\n+\n+//        System.out.println(\"Method: \" + method.getName());\n+//        System.out.println(\"Descriptor: \" + descriptor);\n+\n+        cv.visitVarInsn(ALOAD, 2);\n+        //helper.doCast(ownerClass);\n+        loadParameters(method, 3);\n+        cv.visitMethodInsn(INVOKESPECIAL, type, method.getName(), descriptor);\n+\n+        helper.box(method.getReturnType());\n+    }\n+*/\n+    \n     protected void loadParameters(MetaMethod method, int argumentIndex) {\n         Class[] parameters = method.getParameterTypes();\n         int size = parameters.length;",
                "raw_url": "https://github.com/apache/groovy/raw/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/src/main/org/codehaus/groovy/classgen/ReflectorGenerator.java",
                "sha": "c2976050a148066d12c1cc56722f493c6446b2f0",
                "status": "modified"
            },
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/groovy/blob/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/src/test/groovy/bugs/SuperMethod2Bug.groovy",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/bugs/SuperMethod2Bug.groovy?ref=ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf",
                "deletions": 0,
                "filename": "src/test/groovy/bugs/SuperMethod2Bug.groovy",
                "patch": "@@ -0,0 +1,42 @@\n+/**\n+ * @version $Revision$\n+ */\n+ \n+class SuperMethod2Bug extends GroovyTestCase {\n+     \n+    void testBug() {\n+    /*\n+    \tbase = new SuperBase()\n+    \tvalue = base.doSomething()\n+    \tassert value == \"TestBase\"\n+    */\n+    \t/** @todo fix bug\n+    \t\n+    \tbase = new SuperDerived()\n+    \tvalue = base.doSomething()\n+    \tassert value == \"TestDerived\"\n+    \t*/\n+    }\n+\n+}\n+\n+class SuperBase {\n+    doSomething() {\n+    \t\"TestBase\"\n+    }\n+}\n+\n+class SuperDerived extends SuperBase {\n+\n+\tcalls = 0\n+\t\n+    doSomething() {\n+    \t/** @todo ++calls causes bug */\n+    \t//calls++\n+    \tcalls = calls + 1\n+    \tassert calls < 3\n+    \t\n+    \t\"TestDerived\" + super.doSomething()\n+    }\n+}\n+",
                "raw_url": "https://github.com/apache/groovy/raw/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/src/test/groovy/bugs/SuperMethod2Bug.groovy",
                "sha": "6d883b8e5f06ebfc74cc5569c40c28e90d14fcd4",
                "status": "added"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/src/test/org/codehaus/groovy/classgen/DumpClass3.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/classgen/DumpClass3.java?ref=ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/classgen/DumpClass3.java",
                "patch": "@@ -95,4 +95,8 @@ private Object increment(Object x) {\n         // TODO Auto-generated method stub\n         return null;\n     }\n+    \n+    public Object testSuper() {\n+        return super.getFoo();\n+    }\n }",
                "raw_url": "https://github.com/apache/groovy/raw/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/src/test/org/codehaus/groovy/classgen/DumpClass3.java",
                "sha": "779108c07424633a272fb5d4f28d480e3d45a144",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/src/test/org/codehaus/groovy/classgen/DumpClass4.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/classgen/DumpClass4.java?ref=ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/classgen/DumpClass4.java",
                "patch": "@@ -144,4 +144,8 @@ public void emptyTryCatch() {\n     public void usePrimitiveType() {\n         System.out.println(int.class);\n     }\n+    \n+    public String testSuperCall() {\n+        return super.toString();\n+    }\n }",
                "raw_url": "https://github.com/apache/groovy/raw/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/src/test/org/codehaus/groovy/classgen/DumpClass4.java",
                "sha": "0db61449094ecc0817198c1e263a3df673a3dec4",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/groovy/blob/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/src/test/org/codehaus/groovy/classgen/RunBugsTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/classgen/RunBugsTest.java?ref=ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf",
                "deletions": 1,
                "filename": "src/test/org/codehaus/groovy/classgen/RunBugsTest.java",
                "patch": "@@ -99,9 +99,13 @@ public void testMethodDispatchBug() throws Exception {\n         GroovyObject object = compile(\"src/test/groovy/bugs/MethodDispatchBug.groovy\");\n         object.invokeMethod(\"testBug\", null);\n     }\n-    */\n     public void testNestedClosureBug() throws Exception {\n         GroovyObject object = compile(\"src/test/groovy/bugs/NestedClosureBug.groovy\");\n         object.invokeMethod(\"testBug\", null);\n     }\n+    */\n+    public void testSuperMethod2Bug() throws Exception {\n+        GroovyObject object = compile(\"src/test/groovy/bugs/SuperMethod2Bug.groovy\");\n+        object.invokeMethod(\"testBug\", null);\n+    }\n    }",
                "raw_url": "https://github.com/apache/groovy/raw/ad4d5a41f5378c7166a5cda78c0edff6ebfc55bf/src/test/org/codehaus/groovy/classgen/RunBugsTest.java",
                "sha": "cebdd7e0ca92da9c069e0e5e4d83256194331bdc",
                "status": "modified"
            }
        ],
        "message": "attempt to fix the super.method() bug (which didn't work, another approach is required) plus avoid throwing NullPointerExceptions if there is no delegate\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@819 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/81c1b8603bc94b7dbafb041ae3490ded24a02e2b",
        "patched_files": [
            "DumpClass4.java",
            "DumpClass3.java",
            ".project",
            "Closure.java",
            "ReflectorGenerator.java",
            "SuperMethod2Bug.groovy",
            ".classpath"
        ],
        "repo": "groovy",
        "unit_tests": [
            "ReflectorGeneratorTest.java",
            "RunBugsTest.java"
        ]
    },
    "groovy_befa786": {
        "bug_id": "groovy_befa786",
        "commit": "https://github.com/apache/groovy/commit/befa7863c985ed24a72c9f69ce42d529616be3ec",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/befa7863c985ed24a72c9f69ce42d529616be3ec/src/main/org/codehaus/groovy/ast/ClassNode.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/ast/ClassNode.java?ref=befa7863c985ed24a72c9f69ce42d529616be3ec",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/ast/ClassNode.java",
                "patch": "@@ -327,6 +327,7 @@ public List getAbstractMethods() {\n         // No need to be extra carefull here for that.\n         ClassNode parent = this.redirect();\n         do {\n+        \tabstractNodes.add(parent);\n             ClassNode[] interfaces = parent.getInterfaces();\n             for (int i = 0; i < interfaces.length; i++) {\n                 abstractNodes.add(interfaces[i].redirect());",
                "raw_url": "https://github.com/apache/groovy/raw/befa7863c985ed24a72c9f69ce42d529616be3ec/src/main/org/codehaus/groovy/ast/ClassNode.java",
                "sha": "d3debbb4ff99576cd57ddcaa2a4c1ba73525632e",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/groovy/blob/befa7863c985ed24a72c9f69ce42d529616be3ec/src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java?ref=befa7863c985ed24a72c9f69ce42d529616be3ec",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java",
                "patch": "@@ -295,7 +295,6 @@ public AsmClassGenerator(\n     }\n     \n     protected SourceUnit getSourceUnit() {\n-        // TODO Auto-generated method stub\n         return null;\n     }\n \n@@ -3050,6 +3049,12 @@ protected ClassNode getExpressionType(Expression expression) {\n             return ClassHelper.boolean_TYPE;\n         }\n         if (expression instanceof VariableExpression) {\n+        \tif (expression == VariableExpression.THIS_EXPRESSION) {\n+        \t\treturn classNode;\n+        \t}else  if (expression==VariableExpression.SUPER_EXPRESSION) {\n+        \t\treturn classNode.getSuperClass();\n+        \t}\n+        \t\n             VariableExpression varExpr = (VariableExpression) expression;\n             Variable variable = compileStack.getVariable(varExpr.getName(),false);\n             if (variable != null && !variable.isHolder()) {",
                "raw_url": "https://github.com/apache/groovy/raw/befa7863c985ed24a72c9f69ce42d529616be3ec/src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java",
                "sha": "7ed3eb20f93b2df26af759cc9ecf457f351701e6",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/befa7863c985ed24a72c9f69ce42d529616be3ec/src/main/org/codehaus/groovy/classgen/Variable.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/classgen/Variable.java?ref=befa7863c985ed24a72c9f69ce42d529616be3ec",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/classgen/Variable.java",
                "patch": "@@ -74,7 +74,7 @@\n     private boolean dynamicTyped;\n \n     private Variable(){\n-        dynamicTyped = false;\n+        dynamicTyped = true;\n         index=0;\n         holder=false;\n         property=false;",
                "raw_url": "https://github.com/apache/groovy/raw/befa7863c985ed24a72c9f69ce42d529616be3ec/src/main/org/codehaus/groovy/classgen/Variable.java",
                "sha": "659d55d44318d676722e27a932fab64a64590d12",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/groovy/blob/befa7863c985ed24a72c9f69ce42d529616be3ec/src/test/groovy/AbstractClassAndInterfaceTest.groovy",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/AbstractClassAndInterfaceTest.groovy?ref=befa7863c985ed24a72c9f69ce42d529616be3ec",
                "deletions": 23,
                "filename": "src/test/groovy/AbstractClassAndInterfaceTest.groovy",
                "patch": "@@ -1,6 +1,18 @@\n+import org.codehaus.groovy.control.CompilationFailedException\n \n class AbstractClassAndInterfaceTest extends GroovyTestCase {\n \n+\tdef shouldNotCompile(String script) {\n+\t  try {\n+        GroovyShell shell = new GroovyShell()\n+        shell.parse(script, getTestClassName())\n+      } catch (CompilationFailedException cfe) {\n+        assert true\n+        return\n+      }\n+      fail(\"the compilation succeeded but should have failed\")\n+\t}\n+\n \tvoid testInterface() {\n     \tdef shell = new GroovyShell()\n         def text = \"\"\"\n@@ -26,8 +38,7 @@ class AbstractClassAndInterfaceTest extends GroovyTestCase {\n \t}\n \t\n \tvoid testClassImplementingAnInterfaceButMissesMethod() {\n-    \tdef shell = new GroovyShell()\n-        def text = \"\"\"\n+        shouldNotCompile \"\"\"\n         \tinterface A {\n \t\t\t\tvoid methodOne(Object o)\n \t\t\t\tObject methodTwo()\n@@ -40,10 +51,8 @@ class AbstractClassAndInterfaceTest extends GroovyTestCase {\n \t\t\tdef b = new B();\n \t\t\treturn b.methodTwo()\n \t\t\t\"\"\"\n-\t\tshouldFail {\n-\t\t\tshell.evaluate(text)\n-\t\t}\n-\t\ttext = \"\"\"\n+\t\t\n+\t\tshouldNotCompile \"\"\"\n \t\t\tinterface A {\n \t\t\t\tObject methodTwo()\n \t\t    }\n@@ -58,9 +67,6 @@ class AbstractClassAndInterfaceTest extends GroovyTestCase {\n \t\t\tdef b = new C();\n \t\t\treturn b.methodTwo()\n \t\t\t\"\"\"\n-\t\tshouldFail {\n-\t\t\tshell.evaluate(text)\n-\t\t}\t\t\t\n \t}\n \t\n \tvoid testAbstractClass() {\n@@ -87,8 +93,7 @@ class AbstractClassAndInterfaceTest extends GroovyTestCase {\n \t}\t\n \t\n \tvoid testClassExtendingAnAbstractClassButMissesMethod() {\n-    \tdef shell = new GroovyShell()\n-        def text = \"\"\"\n+        shouldNotCompile \"\"\"\n         \tabstract class A {\n \t\t\t\tabstract void methodOne(Object o)\n \t\t\t\tObject methodTwo(){\n@@ -107,12 +112,9 @@ class AbstractClassAndInterfaceTest extends GroovyTestCase {\n \t\t\t\n \t\t\tdef b = new C();\n \t\t\treturn b.methodTwo()\n-\t\t\t\"\"\"\n-\t\tshouldFail {\n-\t\t\tshell.evaluate(text)\n-\t\t}\t\t\t\n+\t\t\t\"\"\"\t\n \t\t\n-        text = \"\"\"\n+       shouldNotCompile \"\"\"\n         \tabstract class A {\n \t\t\t\tabstract void methodOne(Object o)\n \t\t\t\tObject methodTwo(){\n@@ -130,9 +132,6 @@ class AbstractClassAndInterfaceTest extends GroovyTestCase {\n \t\t\tdef b = new B();\n \t\t\treturn b.methodTwo()\n \t\t\t\"\"\"\n-\t\tshouldFail {\n-\t\t\tshell.evaluate(text)\n-\t\t}\n \t}\n \t\n \tvoid testInterfaceAbstractClassCombination() {\n@@ -157,7 +156,7 @@ class AbstractClassAndInterfaceTest extends GroovyTestCase {\n \t\t\t\"\"\"\n \t\tshell.evaluate(text)\n \t\t\n-\t\ttext = \"\"\"\n+\t\tshouldNotCompile \"\"\"\n \t\t\tinterface A {\n \t\t\t\tvoid methodOne()\n \t\t\t}\n@@ -170,9 +169,6 @@ class AbstractClassAndInterfaceTest extends GroovyTestCase {\n \t\t\tdef c = new c()\n \t\t\tc.methodTwo()\n \t\t\t\"\"\"\n-\t\tshouldFail {\n-\t\t\tshell.evaluate(text)\n-\t\t}\t\n \t}\n \t\n \tvoid testDefaultModifiersForInterfaces() {",
                "raw_url": "https://github.com/apache/groovy/raw/befa7863c985ed24a72c9f69ce42d529616be3ec/src/test/groovy/AbstractClassAndInterfaceTest.groovy",
                "sha": "878cba837a487d4bd966d1569e80ea0a47a71e7b",
                "status": "modified"
            }
        ],
        "message": "fix for NPE and abstract class test\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@3693 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/740d1bc8ee263386d9ea2e53f728997d8ddb2157",
        "patched_files": [
            "AbstractClassAndInterfaceTest.groovy",
            "ClassNode.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "ClassNodeTest.java"
        ]
    },
    "groovy_c13994e": {
        "bug_id": "groovy_c13994e",
        "commit": "https://github.com/apache/groovy/commit/c13994ea07956717a1f3c8b2def273896c5430c4",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/c13994ea07956717a1f3c8b2def273896c5430c4/src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java?ref=c13994ea07956717a1f3c8b2def273896c5430c4",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java",
                "patch": "@@ -51,7 +51,7 @@ public void visitClass(ClassNode node) {\n         currentClass = node;\n         \n         checkImplementsAndExtends(node);\n-        if (!getSourceUnit().getErrorCollector().hasErrors()) {\n+        if (source!=null && !source.getErrorCollector().hasErrors()) {\n             checkClassForOverwritingFinal(node);\n             checkMethodsForOverwritingFinal(node);\n             checkNoAbstractMethodsNonabstractClass(node);",
                "raw_url": "https://github.com/apache/groovy/raw/c13994ea07956717a1f3c8b2def273896c5430c4/src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java",
                "sha": "4af1af5eb654206d1ac6a9507bb52948172ffda4",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/c13994ea07956717a1f3c8b2def273896c5430c4/src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/control/CompilationUnit.java?ref=c13994ea07956717a1f3c8b2def273896c5430c4",
                "deletions": 3,
                "filename": "src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "patch": "@@ -295,8 +295,7 @@ public void addSources(File[] files) {\n     public SourceUnit addSource(File file) {\n         return addSource(new SourceUnit(file, configuration, classLoader, getErrorCollector()));\n     }\n-\n-\n+    \n     /**\n      * Adds a source file to the unit.\n      */\n@@ -357,7 +356,9 @@ public void remove() {\n \n     /**\n      * Adds a ClassNode directly to the unit (ie. without source).\n-     * Used primarily for testing support.\n+     * WARNING: the source is needed for error reporting, using\n+     *          this method without setting a SourceUnit will cause\n+     *          NullPinterExceptions\n      */\n     public void addClassNode(ClassNode node) {\n         ModuleNode module = new ModuleNode(this.ast);",
                "raw_url": "https://github.com/apache/groovy/raw/c13994ea07956717a1f3c8b2def273896c5430c4/src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "sha": "a770c0a9ce69455bacc82c5d23a5fee15856cd99",
                "status": "modified"
            }
        ],
        "message": "warning comment for adding ClassNodes without SourceUnit added and test for SourceUnit in ClassCompletionVerifyer added to avoid NPEs in cases without faliures\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@3729 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/8976032fce3bff693f72047a9db2a1e0b9c64321",
        "patched_files": [
            "CompilationUnit.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "CompilationUnitTest.java"
        ]
    },
    "groovy_c515f6d": {
        "bug_id": "groovy_c515f6d",
        "commit": "https://github.com/apache/groovy/commit/c515f6d2ae0b174ecf0c7ef06eb7552cf490fc91",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/groovy/blob/c515f6d2ae0b174ecf0c7ef06eb7552cf490fc91/src/main/org/codehaus/groovy/runtime/MetaClassHelper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/MetaClassHelper.java?ref=c515f6d2ae0b174ecf0c7ef06eb7552cf490fc91",
                "deletions": 2,
                "filename": "src/main/org/codehaus/groovy/runtime/MetaClassHelper.java",
                "patch": "@@ -303,8 +303,6 @@ private static long calculateParameterDistance(Class argument, CachedClass param\n             // choose the distance to Object if a parameter is null\n             // this will mean that Object is preferred over a more\n             // specific type\n-            // remove one to dist to be sure Object is preferred\n-            objectDistance--;\n             Class clazz = parameter.getTheClass();\n             if (clazz.isPrimitive()) {\n                 objectDistance += 2;",
                "raw_url": "https://github.com/apache/groovy/raw/c515f6d2ae0b174ecf0c7ef06eb7552cf490fc91/src/main/org/codehaus/groovy/runtime/MetaClassHelper.java",
                "sha": "ca56ec6a1833b085813973d5958d9cde887ada44",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/groovy/blob/c515f6d2ae0b174ecf0c7ef06eb7552cf490fc91/src/test/groovy/bugs/Groovy4029Bug.groovy",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/bugs/Groovy4029Bug.groovy?ref=c515f6d2ae0b174ecf0c7ef06eb7552cf490fc91",
                "deletions": 0,
                "filename": "src/test/groovy/bugs/Groovy4029Bug.groovy",
                "patch": "@@ -0,0 +1,9 @@\n+package groovy.bugs\r\n+\r\n+class Groovy4029Bug extends GroovyTestCase {\r\n+    void testAddNullKeyEntryInMapUsingSubscriptNotation() {\r\n+\t\tMap m = [:]\r\n+\t\tm[null] = null\r\n+\t\tassert m.size() == 1\r\n+    }\r\n+}\r",
                "raw_url": "https://github.com/apache/groovy/raw/c515f6d2ae0b174ecf0c7ef06eb7552cf490fc91/src/test/groovy/bugs/Groovy4029Bug.groovy",
                "sha": "dfe15ec7e0ee086100d7515b4c760a35f1b4dbf2",
                "status": "added"
            }
        ],
        "message": "GROOVY-4029\nPutting a map entry using subscript notation with a null key resulted in NPE. Fixed it.\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@19202 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/c2f1bebfa12aec40261d029fe4061f40048b1b07",
        "patched_files": [
            "Groovy4029Bug.groovy",
            "MetaClassHelper.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "MetaClassHelperTest.java"
        ]
    },
    "groovy_d21d71d": {
        "bug_id": "groovy_d21d71d",
        "commit": "https://github.com/apache/groovy/commit/d21d71d898ec3d3b77521d48f339038ba7e7ce69",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/groovy/blob/d21d71d898ec3d3b77521d48f339038ba7e7ce69/src/main/org/codehaus/groovy/runtime/Invoker.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/Invoker.java?ref=d21d71d898ec3d3b77521d48f339038ba7e7ce69",
                "deletions": 2,
                "filename": "src/main/org/codehaus/groovy/runtime/Invoker.java",
                "patch": "@@ -445,8 +445,9 @@ public String toTypeString(Object[] arguments) {\n \t\t}\n \t    StringBuffer argBuf = new StringBuffer();\n \t    for (int i = 0; i < arguments.length; i++) {\n-\t    \tif (i>0)argBuf.append(\", \");\n-\t\t\targBuf.append(arguments[i].getClass().getName());\n+\t    \tif (i>0)\n+                argBuf.append(\", \");\n+\t\t\targBuf.append(arguments[i] != null ? arguments[i].getClass().getName() : \"null\");\n \t\t}\n \t    return argBuf.toString();\n \t}",
                "raw_url": "https://github.com/apache/groovy/raw/d21d71d898ec3d3b77521d48f339038ba7e7ce69/src/main/org/codehaus/groovy/runtime/Invoker.java",
                "sha": "c5dfbe936390fc4dafce218f59343ab765552796",
                "status": "modified"
            }
        ],
        "message": "Fixed a potential NPE (GROOVY-561)\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@1256 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/87b8129c1ed56c2f57072f8c9de0420c84435ee6",
        "patched_files": [
            "Invoker.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "InvokerTest.java"
        ]
    },
    "groovy_e47744a": {
        "bug_id": "groovy_e47744a",
        "commit": "https://github.com/apache/groovy/commit/e47744aa5258ba8a386dbe97bead4dabcf4003f7",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/build.gradle",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/build.gradle?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 0,
                "filename": "build.gradle",
                "patch": "@@ -138,6 +138,7 @@ dependencies {\n         exclude(group: 'junit', module: 'junit')\n         exclude(group: 'jmock', module: 'jmock')\n     }\n+    compile files(\"lib/openbeans-1.0.jar\")\n     compile \"org.fusesource.jansi:jansi:$jansiVersion\"\n     compile(\"org.apache.ivy:ivy:$ivyVersion\") {\n         transitive = false",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/build.gradle",
                "sha": "496808eee911b2d6bbe9b8936244d1856a1741ba",
                "status": "modified"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/gradle/assemble.gradle",
                "changes": 41,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/gradle/assemble.gradle?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 5,
                "filename": "gradle/assemble.gradle",
                "patch": "@@ -133,9 +133,10 @@ allprojects {\n         classifier = jar.classifier\n         includeEmptyDirs = false\n         def target = new File(\"${archivePath}.tmp\")\n-        from zipTree(target)\n \n         doFirst {\n+            from zipTree(target)\n+\n             def keepUntouched = [\n                     'org/codehaus/groovy/cli/GroovyPosixParser*.class',\n                     'groovy/util/CliBuilder*.class',\n@@ -154,7 +155,7 @@ allprojects {\n                     // only groovy core will include the dependencies repackaged\n                     if (isRoot) {\n                         configurations.runtime.files.findAll { file ->\n-                            ['antlr', 'asm', 'commons-cli'].any {\n+                            ['antlr', 'asm', 'commons-cli', 'openbeans'].any {\n                                 file.name.startsWith(it)\n                             } && ['asm-attr', 'asm-util', 'asm-analysis'].every { !file.name.startsWith(it) }\n                         }.each { jarjarFile ->\n@@ -189,13 +190,43 @@ allprojects {\n \n         }\n         doLast {\n-            // for some obscure reason, this produces a Gradle warning\n             target.delete()\n-            rootProject.isJarJar = false\n         }\n     }\n-}\n \n+    if (project.name in ['groovy', 'groovy-test']) {\n+        task grooidjar(type: Jar) {\n+            onlyIf {\n+                !rootProject.useIndy()\n+            }\n+            destinationDir = jar.destinationDir\n+            baseName = jar.baseName\n+            appendix = jar.appendix\n+            classifier = jar.classifier ? \"${jar.classifier}grooid\" : 'grooid'\n+            includeEmptyDirs = false\n+            def target = new File(\"${archivePath}.tmp\")\n+\n+            doFirst {\n+                from zipTree(target)\n+                ant {\n+                    taskdef name: 'jarjar', classname: 'com.tonicsystems.jarjar.JarJarTask', classpath: rootProject.configurations.tools.asPath\n+                    jarjar(jarfile: target) {\n+                        zipfileset(src: jarjar.archivePath)\n+\n+                        rule pattern: 'com.googlecode.openbeans.**', result: 'groovyjarjaropenbeans.@1'\n+                        rule pattern: 'org.apache.harmony.beans.**', result: 'groovyjarjarharmonybeans.@1'\n+                        rule pattern: 'java.beans.**', result: 'groovyjarjaropenbeans.@1'\n+                    }\n+                }\n+\n+            }\n+            doLast {\n+                target.delete()\n+            }\n+        }\n+        jarjar.finalizedBy(grooidjar)\n+    }\n+}\n \n subprojects {\n     jar {",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/gradle/assemble.gradle",
                "sha": "b36315ff373c1d88e0228fc556735d6ea7164b97",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/gradle/upload.gradle",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/gradle/upload.gradle?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 0,
                "filename": "gradle/upload.gradle",
                "patch": "@@ -75,6 +75,10 @@ allprojects {\n             if (indyJar.exists()) {\n                 project.artifacts.add('archives', indyJar)\n             }\n+            def grooidJar = new File(archive.parent, archive.name[0..archive.name.lastIndexOf('.')-1]+'-grooid.jar')\n+            if (grooidJar.exists()) {\n+                project.artifacts.add('archives', grooidJar)\n+            }\n         }\n     }\n }\n@@ -94,6 +98,10 @@ allprojects {\n         if (indyJar.exists()) {\n             project.artifacts.add('archives', indyJar)\n         }\n+        def grooidJar = new File(archive.parent, archive.name[0..archive.name.lastIndexOf('.')-1]+'-grooid.jar')\n+        if (grooidJar.exists()) {\n+            project.artifacts.add('archives', grooidJar)\n+        }\n     }\n }\n ext.pomAll = {",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/gradle/upload.gradle",
                "sha": "6e5839c6bafcf1a5c3a82c9e6b5b596474e4321a",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/lib/openbeans-1.0.jar",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/lib/openbeans-1.0.jar?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 0,
                "filename": "lib/openbeans-1.0.jar",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/lib/openbeans-1.0.jar",
                "sha": "7e61907094f0c05e5b7fea03b33722865f92b8c2",
                "status": "added"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/groovy/lang/GroovyClassLoader.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/GroovyClassLoader.java?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 15,
                "filename": "src/main/groovy/lang/GroovyClassLoader.java",
                "patch": "@@ -335,22 +335,27 @@ private void definePackage(String className) {\n     protected PermissionCollection getPermissions(CodeSource codeSource) {\n         PermissionCollection perms;\n         try {\n-            perms = super.getPermissions(codeSource);\n-        } catch (SecurityException e) {\n-            // We lied about our CodeSource and that makes URLClassLoader unhappy.\n-            perms = new Permissions();\n-        }\n-\n-        ProtectionDomain myDomain = AccessController.doPrivileged(new PrivilegedAction<ProtectionDomain>() {\n-            public ProtectionDomain run() {\n-                return getClass().getProtectionDomain();\n+            try {\n+                perms = super.getPermissions(codeSource);\n+            } catch (SecurityException e) {\n+                // We lied about our CodeSource and that makes URLClassLoader unhappy.\n+                perms = new Permissions();\n             }\n-        });\n-        PermissionCollection myPerms = myDomain.getPermissions();\n-        if (myPerms != null) {\n-            for (Enumeration<Permission> elements = myPerms.elements(); elements.hasMoreElements();) {\n-                perms.add(elements.nextElement());\n+\n+            ProtectionDomain myDomain = AccessController.doPrivileged(new PrivilegedAction<ProtectionDomain>() {\n+                public ProtectionDomain run() {\n+                    return getClass().getProtectionDomain();\n+                }\n+            });\n+            PermissionCollection myPerms = myDomain.getPermissions();\n+            if (myPerms != null) {\n+                for (Enumeration<Permission> elements = myPerms.elements(); elements.hasMoreElements();) {\n+                    perms.add(elements.nextElement());\n+                }\n             }\n+        } catch (Throwable e) {\n+            // We lied about our CodeSource and that makes URLClassLoader unhappy.\n+            perms = new Permissions();\n         }\n         perms.setReadOnly();\n         return perms;\n@@ -474,8 +479,13 @@ public GroovyClassLoader getDefiningClassLoader() {\n         }\n \n         protected Class createClass(byte[] code, ClassNode classNode) {\n+            BytecodeProcessor bytecodePostprocessor = unit.getConfiguration().getBytecodePostprocessor();\n+            byte[] fcode = code;\n+            if (bytecodePostprocessor!=null) {\n+                fcode = bytecodePostprocessor.processBytecode(classNode.getName(), fcode);\n+            }\n             GroovyClassLoader cl = getDefiningClassLoader();\n-            Class theClass = cl.defineClass(classNode.getName(), code, 0, code.length, unit.getAST().getCodeSource());\n+            Class theClass = cl.defineClass(classNode.getName(), fcode, 0, fcode.length, unit.getAST().getCodeSource());\n             this.loadedClasses.add(theClass);\n \n             if (generatedClass == null) {",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/groovy/lang/GroovyClassLoader.java",
                "sha": "c8c8224f5e4b59018cc0677c47668c93721e6155",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/groovy/lang/MetaClassImpl.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/MetaClassImpl.java?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 2,
                "filename": "src/main/groovy/lang/MetaClassImpl.java",
                "patch": "@@ -16,7 +16,6 @@\n package groovy.lang;\n \n import org.codehaus.groovy.GroovyBugError;\n-import org.codehaus.groovy.ast.ClassHelper;\n import org.codehaus.groovy.ast.ClassNode;\n import org.codehaus.groovy.classgen.asm.BytecodeHelper;\n import org.codehaus.groovy.control.CompilationUnit;\n@@ -32,6 +31,7 @@\n import org.codehaus.groovy.runtime.ConvertedClosure;\n import org.codehaus.groovy.runtime.CurriedClosure;\n import org.codehaus.groovy.runtime.DefaultGroovyMethods;\n+import org.codehaus.groovy.runtime.ExceptionUtils;\n import org.codehaus.groovy.runtime.GeneratedClosure;\n import org.codehaus.groovy.runtime.GroovyCategorySupport;\n import org.codehaus.groovy.runtime.InvokerHelper;\n@@ -68,6 +68,7 @@\n import org.codehaus.groovy.util.ComplexKeyHashMap;\n import org.codehaus.groovy.util.FastArray;\n import org.codehaus.groovy.util.SingleKeyHashMap;\n+import org.codehaus.groovy.reflection.android.AndroidSupport;\n import org.objectweb.asm.ClassVisitor;\n \n import java.beans.BeanInfo;\n@@ -3043,7 +3044,15 @@ private boolean isGenericGetMethod(MetaMethod method) {\n     public synchronized void initialize() {\n         if (!isInitialized()) {\n             fillMethodIndex();\n-            addProperties();\n+            try {\n+                addProperties();\n+            } catch (Throwable e) {\n+                if (!AndroidSupport.isRunningAndroid()) {\n+                    ExceptionUtils.sneakyThrow(e);\n+                }\n+                // Introspection failure...\n+                // May happen in Android\n+            }\n             initialized = true;\n         }\n     }",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/groovy/lang/MetaClassImpl.java",
                "sha": "f3644512c5c644f263815b8a2e7851f216f5b43f",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java",
                "patch": "@@ -226,6 +226,10 @@ private void makeInnerClassEntry(ClassNode cn) {\n         int mods = adjustedClassModifiersForInnerClassTable(cn);\n \n \n+        if (Modifier.isPrivate(mods)) {\n+            mods = mods ^ Modifier.PRIVATE;\n+            innerClass.setModifiers(mods);\n+        }\n         cv.visitInnerClass(\n                 innerClassInternalName,\n                 outerClassName,",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java",
                "sha": "50020a3de549ca3d85f8cd2a87db88d6bf574c0e",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/control/BytecodeProcessor.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/control/BytecodeProcessor.java?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/control/BytecodeProcessor.java",
                "patch": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2003-2013 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.codehaus.groovy.control;\n+\n+public interface BytecodeProcessor {\n+    byte[] processBytecode(String name, byte[] original);\n+}",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/control/BytecodeProcessor.java",
                "sha": "0931d313f88dbe58fd982b8b8de9985e452c000d",
                "status": "added"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/control/CompilerConfiguration.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/control/CompilerConfiguration.java?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/control/CompilerConfiguration.java",
                "patch": "@@ -161,6 +161,8 @@\n      */\n     private Set<String> disabledGlobalASTTransformations;\n \n+    private BytecodeProcessor bytecodePostprocessor;\n+\n     /**\n      * Sets the Flags to defaults.\n      */\n@@ -828,4 +830,12 @@ public CompilerConfiguration addCompilationCustomizers(CompilationCustomizer...\n     public void setDisabledGlobalASTTransformations(final Set<String> disabledGlobalASTTransformations) {\n         this.disabledGlobalASTTransformations = disabledGlobalASTTransformations;\n     }\n+\n+    public BytecodeProcessor getBytecodePostprocessor() {\n+        return bytecodePostprocessor;\n+    }\n+\n+    public void setBytecodePostprocessor(final BytecodeProcessor bytecodePostprocessor) {\n+        this.bytecodePostprocessor = bytecodePostprocessor;\n+    }\n }",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/control/CompilerConfiguration.java",
                "sha": "a1d0145eb66ece73770a4f340c760e29e183256a",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/reflection/CachedClass.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/reflection/CachedClass.java?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 5,
                "filename": "src/main/org/codehaus/groovy/reflection/CachedClass.java",
                "patch": "@@ -81,13 +81,18 @@\n             final Method[] declaredMethods = (Method[])\n                AccessController.doPrivileged(new PrivilegedAction/*<Method[]>*/() {\n                    public /*Method[]*/ Object run() {\n-                       final Method[] dm = getTheClass().getDeclaredMethods();\n                        try {\n-                           AccessibleObject.setAccessible(dm, true);\n-                       } catch (SecurityException e) {\n-                           // swallow for strict security managers\n+                           final Method[] dm = getTheClass().getDeclaredMethods();\n+                           try {\n+                               AccessibleObject.setAccessible(dm, true);\n+                           } catch (SecurityException e) {\n+                               // swallow for strict security managers\n+                           }\n+                           return dm;\n+                       } catch (Throwable e) {\n+                           // Typically, Android can throw ClassNotFoundException\n+                           return new Method[0];\n                        }\n-                       return dm;\n                    }\n                });\n             List<CachedMethod> methods = new ArrayList<CachedMethod>(declaredMethods.length);",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/reflection/CachedClass.java",
                "sha": "a3fe0693d2dc0d35afdc13d7b1d1e42d1b6893e9",
                "status": "modified"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/reflection/android/AndroidSupport.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/reflection/android/AndroidSupport.java?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/reflection/android/AndroidSupport.java",
                "patch": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2003-2014 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.codehaus.groovy.reflection.android;\n+\n+public abstract class AndroidSupport {\n+    private static final boolean IS_ANDROID;\n+\n+    static {\n+        boolean isAndroid = true;\n+        try {\n+            Class.forName(\"android.app.Activity\", false, AndroidSupport.class.getClassLoader());\n+        } catch (ClassNotFoundException e) {\n+            isAndroid = false;\n+        }\n+        IS_ANDROID = isAndroid;\n+    }\n+\n+    public static boolean isRunningAndroid() {\n+        return IS_ANDROID;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/reflection/android/AndroidSupport.java",
                "sha": "83cd4ec6f74d7437f5b88503481e790b5545c133",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/runtime/callsite/CallSiteGenerator.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/callsite/CallSiteGenerator.java?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/runtime/callsite/CallSiteGenerator.java",
                "patch": "@@ -19,6 +19,7 @@\n import org.codehaus.groovy.classgen.asm.BytecodeHelper;\n import org.codehaus.groovy.reflection.CachedClass;\n import org.codehaus.groovy.reflection.CachedMethod;\n+import org.codehaus.groovy.reflection.android.AndroidSupport;\n import org.objectweb.asm.ClassWriter;\n import org.objectweb.asm.Label;\n import org.objectweb.asm.MethodVisitor;\n@@ -242,7 +243,8 @@ public static Constructor compileStaticMethod(CachedMethod cachedMethod) {\n     }\n \n     public static boolean isCompilable (CachedMethod method) {\n-        return GroovySunClassLoader.sunVM != null || Modifier.isPublic(method.cachedClass.getModifiers()) && method.isPublic() && publicParams(method);\n+        return (GroovySunClassLoader.sunVM != null || Modifier.isPublic(method.cachedClass.getModifiers()) && method.isPublic() && publicParams(method))\n+                && !AndroidSupport.isRunningAndroid();\n     }\n \n     private static boolean publicParams(CachedMethod method) {",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/runtime/callsite/CallSiteGenerator.java",
                "sha": "64064c806d936c0b2078c106fb252102fa76d40a",
                "status": "modified"
            }
        ],
        "message": "Raw modifications to run Groovy on Android\n   * replaced uses of java.beans with openbeans\n   * added a bytecode postprocessor\n   * commented code which triggered NPEs on Android due to security exceptions\n   * Repackage openbeans within core jar\n   * Android patch: Catch introspection errors\n   * Use \"grooid\" classifier for modified jars",
        "parent": "https://github.com/apache/groovy/commit/198af57011ae357acef42c8095fed9e3b91953e1",
        "patched_files": [
            "upload.gradle",
            "openbeans-1.0.jar",
            "assemble.gradle",
            "build.gradle",
            "CompilerConfiguration.java",
            "GroovyClassLoader.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "GroovyClassLoaderTest.java",
            "CompilerConfigurationTest.java"
        ]
    },
    "groovy_ec89363": {
        "bug_id": "groovy_ec89363",
        "commit": "https://github.com/apache/groovy/commit/ec89363470d0aa3bba5afee627eba261dc78a91d",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/ec89363470d0aa3bba5afee627eba261dc78a91d/src/main/org/codehaus/groovy/ast/ClassNode.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/ast/ClassNode.java?ref=ec89363470d0aa3bba5afee627eba261dc78a91d",
                "deletions": 2,
                "filename": "src/main/org/codehaus/groovy/ast/ClassNode.java",
                "patch": "@@ -119,11 +119,13 @@ protected ClassNode redirect(){\n     }\n     \n     /**\n-     * Sets this instance as proxy for the given ClassNode\n+     * Sets this instance as proxy for the given ClassNode. \n+     * @param cn the class to redirect to. If set to null the redirect will be removed\n      */\n     public void setRedirect(ClassNode cn) {\n         if (isPrimaryNode) throw new GroovyBugError(\"tried to set a redirect for a primary ClassNode (\"+getName()+\"->\"+cn.getName()+\").\");\n-        redirect = cn.redirect();        \n+        if (cn!=null) cn = cn.redirect();\n+        redirect = cn;\n     }\n     \n     /**",
                "raw_url": "https://github.com/apache/groovy/raw/ec89363470d0aa3bba5afee627eba261dc78a91d/src/main/org/codehaus/groovy/ast/ClassNode.java",
                "sha": "c5224a9df45a8f7194f170a717e558ee386951c1",
                "status": "modified"
            }
        ],
        "message": "avoid NPE when setting redirect\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@3685 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/3d0ae5fb032021f51733b14691ba3ea92f919c5f",
        "patched_files": [
            "ClassNode.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "ClassNodeTest.java"
        ]
    },
    "groovy_f233b54": {
        "bug_id": "groovy_f233b54",
        "commit": "https://github.com/apache/groovy/commit/f233b543f3f887b37888fc5157e650ce27181dc2",
        "file": [
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/groovy/blob/f233b543f3f887b37888fc5157e650ce27181dc2/src/main/org/codehaus/groovy/ant/Groovyc.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/ant/Groovyc.java?ref=f233b543f3f887b37888fc5157e650ce27181dc2",
                "deletions": 8,
                "filename": "src/main/org/codehaus/groovy/ant/Groovyc.java",
                "patch": "@@ -115,6 +115,8 @@\n     private boolean jointCompilation;\n \n     private List<File> temporaryFiles = new ArrayList(2);\n+    private File stubDir;\n+    private boolean keepStubs;\n \n \n     /**\n@@ -667,7 +669,7 @@ protected void compile() {\n                                 || (key.contains(\"encoding\"))\n                                 || (key.contains(\"source\"))\n                                 || (key.contains(\"target\"))\n-                                || (key.contains(\"verbose\"))) {\n+                                || (key.contains(\"verbose\"))) { // TODO remove extra verbose?\n                             jointOptions.add(\"-J\" + key + \"=\" + value);\n                         } else {\n                             log(\"The option \" + key + \" cannot be set on the contained <javac> element. The option will be ignored\", Project.MSG_WARN);\n@@ -859,12 +861,18 @@ protected void compile() {\n     }\n \n     protected CompilationUnit makeCompileUnit() {\n-        if (configuration.getJointCompilationOptions() != null) {\n-            if (!configuration.getJointCompilationOptions().containsKey(\"stubDir\")) {\n+        Map<String, Object> options = configuration.getJointCompilationOptions();\n+        if (options != null) {\n+            if (keepStubs) {\n+                options.put(\"keepStubs\", Boolean.TRUE);\n+            }\n+            if (stubDir != null) {\n+                options.put(\"stubDir\", stubDir);\n+            } else {\n                 try {\n                     File tempStubDir = FileSystemCompiler.createTempDir();\n                     temporaryFiles.add(tempStubDir);\n-                    configuration.getJointCompilationOptions().put(\"stubDir\", tempStubDir);\n+                    options.put(\"stubDir\", tempStubDir);\n                 } catch (IOException ioe) {\n                     throw new BuildException(ioe);\n                 }\n@@ -911,14 +919,15 @@ protected GroovyClassLoader buildClassLoaderFor() {\n \n     /**\n      * Set the stub directory into which the Java source stub\n-     * files should be generated. The directory should exist \n-     * will not be deleted automatically.\n+     * files should be generated. The directory need not exist\n+     * and will not be deleted automatically - though its contents\n+     * will be cleared unless 'keepStubs' is true. Ignored when forked.\n      *\n      * @param stubDir the stub directory\n      */\n     public void setStubdir(File stubDir) {\n         jointCompilation = true;\n-        configuration.getJointCompilationOptions().put(\"stubDir\", stubDir);\n+        this.stubDir = stubDir;\n     }\n \n     /**\n@@ -928,6 +937,25 @@ public void setStubdir(File stubDir) {\n      * @return the stub directory\n      */\n     public File getStubdir() {\n-        return (File) configuration.getJointCompilationOptions().get(\"stubDir\");\n+        return stubDir;\n+    }\n+\n+    /**\n+     * Set the keepStubs flag. Defaults to false. Set to true for debugging.\n+     * Ignored when forked.\n+     *\n+     * @param keepStubs should stubs be retained\n+     */\n+    public void setKeepStubs(boolean keepStubs) {\n+        this.keepStubs = keepStubs;\n+    }\n+\n+    /**\n+     * Gets the keepStubs flag.\n+     *\n+     * @return the keepStubs flag\n+     */\n+    public boolean getKeepStubs() {\n+        return keepStubs;\n     }\n }",
                "raw_url": "https://github.com/apache/groovy/raw/f233b543f3f887b37888fc5157e650ce27181dc2/src/main/org/codehaus/groovy/ant/Groovyc.java",
                "sha": "f40b55aeeb4934c53a923a333eb0ce711468b39d",
                "status": "modified"
            }
        ],
        "message": "GROOVY-4203: Groovyc Ant task can get a NPE when trying to set stubDir plus doesn't expose keepStubs flag\n\n\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@20009 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/0ebac128a8aa7cad9a20df4616eac00e07f2cceb",
        "patched_files": [
            "Groovyc.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "GroovycTest.java"
        ]
    },
    "groovy_f5ff44a": {
        "bug_id": "groovy_f5ff44a",
        "commit": "https://github.com/apache/groovy/commit/f5ff44a4a528ca61d9293abf05a9802e63a5b60c",
        "file": [
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/groovy/blob/f5ff44a4a528ca61d9293abf05a9802e63a5b60c/src/main/groovy/lang/GroovyClassLoader.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/GroovyClassLoader.java?ref=f5ff44a4a528ca61d9293abf05a9802e63a5b60c",
                "deletions": 22,
                "filename": "src/main/groovy/lang/GroovyClassLoader.java",
                "patch": "@@ -538,47 +538,48 @@ protected synchronized Class loadClass(final String name, boolean resolve) throw\n             }\n         }\n         \n-        boolean loadGroovyFile = false;\n         Class cls = null;\n         ClassNotFoundException last = null;\n         try {\n             cls = super.loadClass(name, resolve);\n     \n+            boolean recompile = false;\n             if (getTimeStamp(cls) < Long.MAX_VALUE) {\n-                Class[] inters = cls.getInterfaces();\n-                boolean isGroovyObject = false;\n+                Class[] inters = cls.getInterfaces();                \n                 for (int i = 0; i < inters.length; i++) {\n                     if (inters[i].getName().equals(GroovyObject.class.getName())) {\n-                        loadGroovyFile = true;\n+                        recompile=true;\n                         break;\n                     }\n-                }\n+                }                \n             }\n+            if (!recompile) return cls;\n         } catch (ClassNotFoundException cnfe) {\n             last = cnfe; \n-            loadGroovyFile=true;\n         }\n         \n-        if (loadGroovyFile) {\n-            try {\n-                File source = (File) AccessController.doPrivileged(new PrivilegedAction() {\n-                    public Object run() {\n-                        return getSourceFile(name);\n-                    }\n-                });\n-                if (source != null) {\n-                    if ((cls!=null && isSourceNewer(source, cls)) || (cls==null)) {\n-                      cls = parseClass(source);\n-                    }\n+        // try groovy file\n+        try {\n+            File source = (File) AccessController.doPrivileged(new PrivilegedAction() {\n+                public Object run() {\n+                    return getSourceFile(name);\n                 }\n-            } catch (Exception e) {\n-                synchronized (cache) {\n-                    cache.put(name, NOT_RESOLVED.class);\n+            });\n+            if (source != null) {\n+                if ((cls!=null && isSourceNewer(source, cls)) || (cls==null)) {\n+                    cls = parseClass(source);\n                 }\n-                throw new ClassNotFoundException(\"Failed to parse groovy file: \" + name, e);\n             }\n+        } catch (Exception e) {\n+            synchronized (cache) {\n+                cache.put(name, NOT_RESOLVED.class);\n+            }\n+            throw new ClassNotFoundException(\"Failed to parse groovy file: \" + name, e);\n         }\n-        if (cls==null) throw last;\n+        if (cls==null) {\n+            if (last==null) throw new AssertionError(true);\n+            throw last;            \n+        }        \n         return cls;\n     }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/f5ff44a4a528ca61d9293abf05a9802e63a5b60c/src/main/groovy/lang/GroovyClassLoader.java",
                "sha": "4d9dd26e6f30ad3b1f5f17cb23c336e555ea1cb1",
                "status": "modified"
            }
        ],
        "message": "another change to avoid NPEs during handling dependent scripts\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@2332 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/5835d302ae2e9934160274d016bec495898d0c5d",
        "patched_files": [
            "GroovyClassLoader.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "GroovyClassLoaderTest.java"
        ]
    },
    "groovy_f855a6a": {
        "bug_id": "groovy_f855a6a",
        "commit": "https://github.com/apache/groovy/commit/f855a6a3eb97a53ef5699c6daf2b684a23ff68aa",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/groovy/blob/f855a6a3eb97a53ef5699c6daf2b684a23ff68aa/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java?ref=f855a6a3eb97a53ef5699c6daf2b684a23ff68aa",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java",
                "patch": "@@ -198,6 +198,9 @@ public static boolean isCase(Object caseValue, Object switchValue) {\n     }\n \n     public static boolean isCase(String caseValue, Object switchValue) {\n+        if (switchValue == null) {\n+            return caseValue == null;\n+        }\n         return caseValue.equals(switchValue.toString());\n     }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/f855a6a3eb97a53ef5699c6daf2b684a23ff68aa/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java",
                "sha": "af07ac0cccbc4392bad097d3905705a544cc4816",
                "status": "modified"
            }
        ],
        "message": "fixed NPE\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@535 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/9aaf4fd018b1c47359ff4fc991a5bce4700a494b",
        "patched_files": [
            "DefaultGroovyMethods.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "DefaultGroovyMethodsTest.java"
        ]
    },
    "groovy_f962b46": {
        "bug_id": "groovy_f962b46",
        "commit": "https://github.com/apache/groovy/commit/f962b4689335c80d64f9ec2ef84e24df652b3ce2",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/groovy/blob/f962b4689335c80d64f9ec2ef84e24df652b3ce2/src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java?ref=f962b4689335c80d64f9ec2ef84e24df652b3ce2",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java",
                "patch": "@@ -200,6 +200,9 @@ public ModuleNode buildAST(SourceUnit sourceUnit, ClassLoader classLoader, Reduc\n         makeModule();\n         try {\n             convertGroovy(ast);\n+            if(output.getStatementBlock().isEmpty() && output.getMethods().isEmpty() && output.getClasses().isEmpty()) {\n+            \toutput.addStatement(ReturnStatement.RETURN_NULL_OR_VOID);\n+            }\n         }\n         catch (ASTRuntimeException e) {\n             throw new ASTParserException(e.getMessage() + \". File: \" + sourceUnit.getName(), e);",
                "raw_url": "https://github.com/apache/groovy/raw/f962b4689335c80d64f9ec2ef84e24df652b3ce2/src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java",
                "sha": "7994f04f57b210cbd9ce44a15cce521b3499fbad",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/groovy/blob/f962b4689335c80d64f9ec2ef84e24df652b3ce2/src/main/org/codehaus/groovy/jsr223/GroovyScriptEngineImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/jsr223/GroovyScriptEngineImpl.java?ref=f962b4689335c80d64f9ec2ef84e24df652b3ce2",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/jsr223/GroovyScriptEngineImpl.java",
                "patch": "@@ -110,7 +110,9 @@ public Object eval(Reader reader, ScriptContext ctx)\n     public Object eval(String script, ScriptContext ctx) \n                        throws ScriptException {\n         try {\n-            return eval(getScriptClass(script), ctx);\n+        \tClass clazz = getScriptClass(script);\n+            if(clazz == null) throw new ScriptException(\"Script class is null\");\n+            return eval(clazz, ctx);\n         } catch (SyntaxException e) {\n             throw new ScriptException(e.getMessage(), \n                                       e.getSourceLocator(), e.getLine());",
                "raw_url": "https://github.com/apache/groovy/raw/f962b4689335c80d64f9ec2ef84e24df652b3ce2/src/main/org/codehaus/groovy/jsr223/GroovyScriptEngineImpl.java",
                "sha": "bf2ab5490b087926d7eff4730761f8a418138742",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/groovy/blob/f962b4689335c80d64f9ec2ef84e24df652b3ce2/src/test/org/codehaus/groovy/antlr/treewalker/UnimplementedSyntaxTest.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/antlr/treewalker/UnimplementedSyntaxTest.java?ref=f962b4689335c80d64f9ec2ef84e24df652b3ce2",
                "deletions": 3,
                "filename": "src/test/org/codehaus/groovy/antlr/treewalker/UnimplementedSyntaxTest.java",
                "patch": "@@ -203,11 +203,17 @@ public void test_SpreadExpressionInGString2_FAILS() throws Exception {\n     // -----------------------\n     // TODO: move somewhere else\n     public void test_StaticImport1() throws Exception {\n-        assertNotNull(compile(\"import static foo.Bar.mooky\"));\n+    \t//GROOVY-3711: The following call now results in a valid script class node, so foo.Bar needs to get resolved.\n+    \tGroovyShell groovyShell = new GroovyShell();\n+    \tcompile(\"package foo; class Bar{}\", groovyShell);\n+        assertNotNull(compile(\"import static foo.Bar.mooky\", groovyShell));\n     }\n \n     public void test_StaticImport2() throws Exception {\n-        assertNotNull(compile(\"import static foo.Bar.*\"));\n+    \t//GROOVY-3711: The following call now results in a valid script class node, so foo.Bar needs to get resolved.\n+    \tGroovyShell groovyShell = new GroovyShell();\n+    \tcompile(\"package foo; class Bar{}\", groovyShell);\n+        assertNotNull(compile(\"import static foo.Bar.*\", groovyShell));\n     }\n \n     // TODO: move somewhere else GROOVY-1874\n@@ -233,9 +239,12 @@ public void test_TypeParameters_FAILS() throws Exception {\n     }\n \n     private Script compile(String input) throws Exception {\n+    \treturn compile(input, new GroovyShell());\n+    }\n+\n+    private Script compile(String input, GroovyShell groovyShell) throws Exception {\n         TraversalTestHelper traverser = new TraversalTestHelper();\n         traverser.traverse(input, SourcePrinter.class, Boolean.FALSE);\n-        GroovyShell groovyShell = new GroovyShell();\n         return groovyShell.parse(input);\n     }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/f962b4689335c80d64f9ec2ef84e24df652b3ce2/src/test/org/codehaus/groovy/antlr/treewalker/UnimplementedSyntaxTest.java",
                "sha": "6ecea81a719b5330c969b1249eabd8448c67b0ce",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/groovy/blob/f962b4689335c80d64f9ec2ef84e24df652b3ce2/src/test/org/codehaus/groovy/jsr223/JSR223Test.groovy",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/jsr223/JSR223Test.groovy?ref=f962b4689335c80d64f9ec2ef84e24df652b3ce2",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/jsr223/JSR223Test.groovy",
                "patch": "@@ -83,4 +83,13 @@ public class JSR223Test extends TestCase {\n         } catch (ScriptException e) {\n         }\n     }\n+\n+    public void testEmptyScriptWithJustImports() {\n+        ScriptEngine engine = manager.getEngineByName(\"groovy\");\n+        assertNotNull(engine);\n+\n+        // GROOVY-3711: The eval of the following script earlier resulted in NPE\n+        // as groovy did not generate a script class in this case\n+        engine.eval(\"import java.lang.*\");\n+    }\n }",
                "raw_url": "https://github.com/apache/groovy/raw/f962b4689335c80d64f9ec2ef84e24df652b3ce2/src/test/org/codehaus/groovy/jsr223/JSR223Test.groovy",
                "sha": "1004f1e94ccc9c3ed695d5c4d302bf271368c6f7",
                "status": "modified"
            }
        ],
        "message": "GROOVY-3711\nGroovyScriptEngine failed with NPE to eval a script that just had import statements and nothing else in script body. Fixed it.\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@17485 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/5e3da4a55bd6f32ddc23c37675bb6e16287798d2",
        "patched_files": [
            "AntlrParserPlugin.java",
            "JSR223Test.groovy",
            "GroovyScriptEngineImpl.java"
        ],
        "repo": "groovy",
        "unit_tests": [
            "UnimplementedSyntaxTest.java"
        ]
    }
}