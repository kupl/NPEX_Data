{
    "commons-math_1977d4d": {
        "bug_id": "commons-math_1977d4d",
        "commit": "https://github.com/apache/commons-math/commit/1977d4d9682daf14620b0da472de5aabc98b8780",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/commons-math/blob/1977d4d9682daf14620b0da472de5aabc98b8780/src/main/java/org/apache/commons/math3/util/Incrementor.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math3/util/Incrementor.java?ref=1977d4d9682daf14620b0da472de5aabc98b8780",
                "deletions": 9,
                "filename": "src/main/java/org/apache/commons/math3/util/Incrementor.java",
                "patch": "@@ -58,26 +58,30 @@ public Incrementor() {\n      * @param max Maximal count.\n      */\n     public Incrementor(int max) {\n-        this(max,\n-             new MaxCountExceededCallback() {\n-                 /** {@inheritDoc} */\n-                 public void trigger(int max) {\n-                     throw new MaxCountExceededException(max);\n-                 }\n-             });\n+        this(max, null);\n     }\n \n     /**\n      * Defines a maximal count and a callback method to be triggered at\n      * counter exhaustion.\n      *\n      * @param max Maximal count.\n-     * @param cb Function to be called when the maximal count has been reached.\n+     * @param cb Function to be called when the maximal count has been reached\n+     * (can be {@code null}).\n      */\n     public Incrementor(int max,\n                        MaxCountExceededCallback cb) {\n         maximalCount = max;\n-        maxCountCallback = cb;\n+        if (cb != null) {\n+            maxCountCallback = cb;\n+        } else {\n+            maxCountCallback = new MaxCountExceededCallback() {\n+                /** {@inheritDoc} */\n+                public void trigger(int max) {\n+                    throw new MaxCountExceededException(max);\n+                }\n+            };\n+        }\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/commons-math/raw/1977d4d9682daf14620b0da472de5aabc98b8780/src/main/java/org/apache/commons/math3/util/Incrementor.java",
                "sha": "972b579286e8b91cb1479d7e2363f1f57b363b83",
                "status": "modified"
            }
        ],
        "message": "In o.a.c.m3.Incrementor, modified constructor to allow for null values of the MaxCountExceededCallback. Null value was previously not checked wich could lead to a NullPointerException much later (at exhaustion of the counter).\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1353140 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-math/commit/b30f3d55562471055862c3be42fb3a1a5c5d341a",
        "patched_files": [
            "Incrementor.java"
        ],
        "repo": "commons-math",
        "unit_tests": [
            "IncrementorTest.java"
        ]
    },
    "commons-math_35b688b": {
        "bug_id": "commons-math_35b688b",
        "commit": "https://github.com/apache/commons-math/commit/35b688b7ec3b32dc671af4c7cb9556ff26e761eb",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/commons-math/blob/35b688b7ec3b32dc671af4c7cb9556ff26e761eb/src/changes/changes.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/changes/changes.xml?ref=35b688b7ec3b32dc671af4c7cb9556ff26e761eb",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -54,6 +54,10 @@ If the output is not quite correct, check for invisible trailing spaces!\n     </release>\n \n     <release version=\"4.0\" date=\"XXXX-XX-XX\" description=\"\">\n+      <action dev=\"tn\" type=\"update\" issue=\"MATH-869\">\n+        \"NullArgumentException\" extends now \"java.lang.NullPointerException\"\n+        instead of \"MathIllegalArgumentException\".\n+      </action>\n       <action dev=\"tn\" type=\"update\" issue=\"MATH-839\" due-to=\"Gilles Sadowski\">\n         Renamed \"cumulativeProbability(double, double)\" to \"probability(double, double)\"\n         in \"IntegerDistribution\" and \"RealDistribution\".",
                "raw_url": "https://github.com/apache/commons-math/raw/35b688b7ec3b32dc671af4c7cb9556ff26e761eb/src/changes/changes.xml",
                "sha": "ee73fca8ac4c3171ac8979597cf8a36c7928ab8b",
                "status": "modified"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/commons-math/blob/35b688b7ec3b32dc671af4c7cb9556ff26e761eb/src/main/java/org/apache/commons/math4/exception/NullArgumentException.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math4/exception/NullArgumentException.java?ref=35b688b7ec3b32dc671af4c7cb9556ff26e761eb",
                "deletions": 3,
                "filename": "src/main/java/org/apache/commons/math4/exception/NullArgumentException.java",
                "patch": "@@ -16,6 +16,8 @@\n  */\n package org.apache.commons.math4.exception;\n \n+import org.apache.commons.math4.exception.util.ExceptionContext;\n+import org.apache.commons.math4.exception.util.ExceptionContextProvider;\n import org.apache.commons.math4.exception.util.Localizable;\n import org.apache.commons.math4.exception.util.LocalizedFormats;\n \n@@ -26,12 +28,20 @@\n  * argument\") and so does not extend the standard {@code NullPointerException}.\n  * Propagation of {@code NullPointerException} from within Commons-Math is\n  * construed to be a bug.\n+ * <p>\n+ * Note: from 4.0 onwards, this class extends {@link NullPointerException} instead\n+ * of {@link MathIllegalArgumentException}.\n  *\n  * @since 2.2\n  */\n-public class NullArgumentException extends MathIllegalArgumentException {\n+public class NullArgumentException extends NullPointerException\n+    implements ExceptionContextProvider {\n+\n     /** Serializable version Id. */\n-    private static final long serialVersionUID = -6024911025449780478L;\n+    private static final long serialVersionUID = 20150225L;\n+\n+    /** Context. */\n+    private final ExceptionContext context;\n \n     /**\n      * Default constructor.\n@@ -46,6 +56,28 @@ public NullArgumentException() {\n      */\n     public NullArgumentException(Localizable pattern,\n                                  Object ... arguments) {\n-        super(pattern, arguments);\n+        context = new ExceptionContext(this);\n+        context.addMessage(pattern, arguments);\n+    }\n+    \n+    /**\n+     * {@inheritDoc}\n+     * @since 4.0\n+     */\n+    public ExceptionContext getContext() {\n+        return context;\n     }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public String getMessage() {\n+        return context.getMessage();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public String getLocalizedMessage() {\n+        return context.getLocalizedMessage();\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/commons-math/raw/35b688b7ec3b32dc671af4c7cb9556ff26e761eb/src/main/java/org/apache/commons/math4/exception/NullArgumentException.java",
                "sha": "5577042a753243b27ba9650283389cd322e59c7b",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/commons-math/blob/35b688b7ec3b32dc671af4c7cb9556ff26e761eb/src/test/java/org/apache/commons/math4/analysis/solvers/UnivariateSolverUtilsTest.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math4/analysis/solvers/UnivariateSolverUtilsTest.java?ref=35b688b7ec3b32dc671af4c7cb9556ff26e761eb",
                "deletions": 3,
                "filename": "src/test/java/org/apache/commons/math4/analysis/solvers/UnivariateSolverUtilsTest.java",
                "patch": "@@ -23,6 +23,7 @@\n import org.apache.commons.math4.analysis.solvers.UnivariateSolverUtils;\n import org.apache.commons.math4.exception.MathIllegalArgumentException;\n import org.apache.commons.math4.exception.NoBracketingException;\n+import org.apache.commons.math4.exception.NullArgumentException;\n import org.apache.commons.math4.util.FastMath;\n import org.junit.Assert;\n import org.junit.Test;\n@@ -33,7 +34,7 @@\n \n     protected UnivariateFunction sin = new Sin();\n \n-    @Test(expected=MathIllegalArgumentException.class)\n+    @Test(expected=NullArgumentException.class)\n     public void testSolveNull() {\n         UnivariateSolverUtils.solve(null, 0.0, 4.0);\n     }\n@@ -60,7 +61,7 @@ public void testSolveSin() {\n         Assert.assertEquals(FastMath.PI, x, 1.0e-4);\n     }\n \n-    @Test(expected=MathIllegalArgumentException.class)\n+    @Test(expected=NullArgumentException.class)\n     public void testSolveAccuracyNull()  {\n         double accuracy = 1.0e-6;\n         UnivariateSolverUtils.solve(null, 0.0, 4.0, accuracy);\n@@ -144,7 +145,7 @@ public void testBracketEndpointRoot() {\n         Assert.assertTrue(sin.value(result[1]) > 0);\n     }\n \n-    @Test(expected=MathIllegalArgumentException.class)\n+    @Test(expected=NullArgumentException.class)\n     public void testNullFunction() {\n         UnivariateSolverUtils.bracket(null, 1.5, 0, 2.0);\n     }",
                "raw_url": "https://github.com/apache/commons-math/raw/35b688b7ec3b32dc671af4c7cb9556ff26e761eb/src/test/java/org/apache/commons/math4/analysis/solvers/UnivariateSolverUtilsTest.java",
                "sha": "f2471b7c79d4edd6ae9a79edb2850ae68f788f56",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/commons-math/blob/35b688b7ec3b32dc671af4c7cb9556ff26e761eb/src/test/java/org/apache/commons/math4/fraction/FractionTest.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math4/fraction/FractionTest.java?ref=35b688b7ec3b32dc671af4c7cb9556ff26e761eb",
                "deletions": 9,
                "filename": "src/test/java/org/apache/commons/math4/fraction/FractionTest.java",
                "patch": "@@ -19,7 +19,7 @@\n import org.apache.commons.math4.TestUtils;\n import org.apache.commons.math4.exception.ConvergenceException;\n import org.apache.commons.math4.exception.MathArithmeticException;\n-import org.apache.commons.math4.exception.MathIllegalArgumentException;\n+import org.apache.commons.math4.exception.NullArgumentException;\n import org.apache.commons.math4.fraction.Fraction;\n import org.apache.commons.math4.fraction.FractionConversionException;\n import org.apache.commons.math4.util.FastMath;\n@@ -348,8 +348,8 @@ public void testAdd() {\n \n         try {\n             f.add(null);\n-            Assert.fail(\"expecting MathIllegalArgumentException\");\n-        } catch (MathIllegalArgumentException ex) {}\n+            Assert.fail(\"expecting NullArgumentException\");\n+        } catch (NullArgumentException ex) {}\n \n         // if this fraction is added naively, it will overflow.\n         // check that it doesn't.\n@@ -445,8 +445,8 @@ public void testDivide() {\n \n         try {\n             f.divide(null);\n-            Assert.fail(\"MathIllegalArgumentException\");\n-        } catch (MathIllegalArgumentException ex) {}\n+            Assert.fail(\"NullArgumentException\");\n+        } catch (NullArgumentException ex) {}\n \n         try {\n             f1 = new Fraction(1, Integer.MAX_VALUE);\n@@ -484,8 +484,8 @@ public void testMultiply() {\n \n         try {\n             f.multiply(null);\n-            Assert.fail(\"expecting MathIllegalArgumentException\");\n-        } catch (MathIllegalArgumentException ex) {}\n+            Assert.fail(\"expecting NullArgumentException\");\n+        } catch (NullArgumentException ex) {}\n \n         f1 = new Fraction(6, 35);\n         f  = f1.multiply(15);\n@@ -506,8 +506,8 @@ public void testSubtract() {\n         Fraction f = new Fraction(1,1);\n         try {\n             f.subtract(null);\n-            Assert.fail(\"expecting MathIllegalArgumentException\");\n-        } catch (MathIllegalArgumentException ex) {}\n+            Assert.fail(\"expecting NullArgumentException\");\n+        } catch (NullArgumentException ex) {}\n \n         // if this fraction is subtracted naively, it will overflow.\n         // check that it doesn't.",
                "raw_url": "https://github.com/apache/commons-math/raw/35b688b7ec3b32dc671af4c7cb9556ff26e761eb/src/test/java/org/apache/commons/math4/fraction/FractionTest.java",
                "sha": "aca7d05a47306c55c3a84baa571ab806d94c9f8b",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/commons-math/blob/35b688b7ec3b32dc671af4c7cb9556ff26e761eb/src/test/java/org/apache/commons/math4/stat/StatUtilsTest.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math4/stat/StatUtilsTest.java?ref=35b688b7ec3b32dc671af4c7cb9556ff26e761eb",
                "deletions": 17,
                "filename": "src/test/java/org/apache/commons/math4/stat/StatUtilsTest.java",
                "patch": "@@ -19,6 +19,7 @@\n \n import org.apache.commons.math4.TestUtils;\n import org.apache.commons.math4.exception.MathIllegalArgumentException;\n+import org.apache.commons.math4.exception.NullArgumentException;\n import org.apache.commons.math4.stat.StatUtils;\n import org.apache.commons.math4.stat.descriptive.DescriptiveStatistics;\n import org.apache.commons.math4.util.FastMath;\n@@ -122,14 +123,14 @@ public void testSumSq() {\n         try {\n             StatUtils.sumSq(x);\n             Assert.fail(\"null is not a valid data array.\");\n-        } catch (MathIllegalArgumentException ex) {\n+        } catch (NullArgumentException ex) {\n             // success\n         }\n \n         try {\n             StatUtils.sumSq(x, 0, 4);\n             Assert.fail(\"null is not a valid data array.\");\n-        } catch (MathIllegalArgumentException ex) {\n+        } catch (NullArgumentException ex) {\n             // success\n         }\n \n@@ -157,14 +158,14 @@ public void testProduct() {\n         try {\n             StatUtils.product(x);\n             Assert.fail(\"null is not a valid data array.\");\n-        } catch (MathIllegalArgumentException ex) {\n+        } catch (NullArgumentException ex) {\n             // success\n         }\n \n         try {\n             StatUtils.product(x, 0, 4);\n             Assert.fail(\"null is not a valid data array.\");\n-        } catch (MathIllegalArgumentException ex) {\n+        } catch (NullArgumentException ex) {\n             // success\n         }\n \n@@ -192,14 +193,14 @@ public void testSumLog() {\n         try {\n             StatUtils.sumLog(x);\n             Assert.fail(\"null is not a valid data array.\");\n-        } catch (MathIllegalArgumentException ex) {\n+        } catch (NullArgumentException ex) {\n             // success\n         }\n \n         try {\n             StatUtils.sumLog(x, 0, 4);\n             Assert.fail(\"null is not a valid data array.\");\n-        } catch (MathIllegalArgumentException ex) {\n+        } catch (NullArgumentException ex) {\n             // success\n         }\n \n@@ -226,7 +227,7 @@ public void testMean() {\n         try {\n             StatUtils.mean(x, 0, 4);\n             Assert.fail(\"null is not a valid data array.\");\n-        } catch (MathIllegalArgumentException ex) {\n+        } catch (NullArgumentException ex) {\n             // success\n         }\n \n@@ -250,7 +251,7 @@ public void testVariance() {\n         try {\n             StatUtils.variance(x, 0, 4);\n             Assert.fail(\"null is not a valid data array.\");\n-        } catch (MathIllegalArgumentException ex) {\n+        } catch (NullArgumentException ex) {\n             // success\n         }\n \n@@ -278,7 +279,7 @@ public void testPopulationVariance() {\n         try {\n             StatUtils.variance(x, 0, 4);\n             Assert.fail(\"null is not a valid data array.\");\n-        } catch (MathIllegalArgumentException ex) {\n+        } catch (NullArgumentException ex) {\n             // success\n         }\n \n@@ -307,7 +308,7 @@ public void testMax() {\n         try {\n             StatUtils.max(x, 0, 4);\n             Assert.fail(\"null is not a valid data array.\");\n-        } catch (MathIllegalArgumentException ex) {\n+        } catch (NullArgumentException ex) {\n             // success\n         }\n \n@@ -347,7 +348,7 @@ public void testMin() {\n         try {\n             StatUtils.min(x, 0, 4);\n             Assert.fail(\"null is not a valid data array.\");\n-        } catch (MathIllegalArgumentException ex) {\n+        } catch (NullArgumentException ex) {\n             // success\n         }\n \n@@ -388,14 +389,14 @@ public void testPercentile() {\n         try {\n             StatUtils.percentile(x, .25);\n             Assert.fail(\"null is not a valid data array.\");\n-        } catch (MathIllegalArgumentException ex) {\n+        } catch (NullArgumentException ex) {\n             // success\n         }\n \n         try {\n             StatUtils.percentile(x, 0, 4, 0.25);\n             Assert.fail(\"null is not a valid data array.\");\n-        } catch (MathIllegalArgumentException ex) {\n+        } catch (NullArgumentException ex) {\n             // success\n         }\n \n@@ -452,8 +453,8 @@ public void testGeometricMean() {\n         double[] test = null;\n         try {\n             StatUtils.geometricMean(test);\n-            Assert.fail(\"Expecting MathIllegalArgumentException\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"Expecting NullArgumentException\");\n+        } catch (NullArgumentException ex) {\n             // expected\n         }\n         test = new double[] {2, 4, 6, 8};\n@@ -547,8 +548,8 @@ public void testMode() {\n         final double[] nullArray = null;\n         try {\n             StatUtils.mode(nullArray);\n-            Assert.fail(\"Expecting MathIllegalArgumentException\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"Expecting NullArgumentException\");\n+        } catch (NullArgumentException ex) {\n             // Expected\n         }\n     }",
                "raw_url": "https://github.com/apache/commons-math/raw/35b688b7ec3b32dc671af4c7cb9556ff26e761eb/src/test/java/org/apache/commons/math4/stat/StatUtilsTest.java",
                "sha": "2528f3c79677bc428894c49a8300e5ebbad9bb09",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/commons-math/blob/35b688b7ec3b32dc671af4c7cb9556ff26e761eb/src/test/java/org/apache/commons/math4/stat/descriptive/AbstractUnivariateStatisticTest.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math4/stat/descriptive/AbstractUnivariateStatisticTest.java?ref=35b688b7ec3b32dc671af4c7cb9556ff26e761eb",
                "deletions": 4,
                "filename": "src/test/java/org/apache/commons/math4/stat/descriptive/AbstractUnivariateStatisticTest.java",
                "patch": "@@ -18,6 +18,7 @@\n \n \n import org.apache.commons.math4.exception.MathIllegalArgumentException;\n+import org.apache.commons.math4.exception.NullArgumentException;\n import org.apache.commons.math4.stat.descriptive.moment.Mean;\n import org.junit.Assert;\n import org.junit.Test;\n@@ -76,14 +77,14 @@ public void testTestNegative() {\n         }\n         try {\n             testStatistic.test(nullArray, 0, 1);  // null array\n-            Assert.fail(\"Expecting MathIllegalArgumentException\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"Expecting NullArgumentException\");\n+        } catch (NullArgumentException ex) {\n             // expected\n         }\n         try {\n             testStatistic.test(testArray, nullArray, 0, 1);  // null weights array\n-            Assert.fail(\"Expecting MathIllegalArgumentException\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"Expecting NullArgumentException\");\n+        } catch (NullArgumentException ex) {\n             // expected\n         }\n         try {",
                "raw_url": "https://github.com/apache/commons-math/raw/35b688b7ec3b32dc671af4c7cb9556ff26e761eb/src/test/java/org/apache/commons/math4/stat/descriptive/AbstractUnivariateStatisticTest.java",
                "sha": "b455f5b7b04cb4f6c4e84c42056256f69eaf791f",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-math/blob/35b688b7ec3b32dc671af4c7cb9556ff26e761eb/src/test/java/org/apache/commons/math4/stat/descriptive/moment/SemiVarianceTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math4/stat/descriptive/moment/SemiVarianceTest.java?ref=35b688b7ec3b32dc671af4c7cb9556ff26e761eb",
                "deletions": 3,
                "filename": "src/test/java/org/apache/commons/math4/stat/descriptive/moment/SemiVarianceTest.java",
                "patch": "@@ -18,7 +18,7 @@\n package org.apache.commons.math4.stat.descriptive.moment;\n \n import org.apache.commons.math4.TestUtils;\n-import org.apache.commons.math4.exception.MathIllegalArgumentException;\n+import org.apache.commons.math4.exception.NullArgumentException;\n import org.apache.commons.math4.stat.StatUtils;\n import org.apache.commons.math4.stat.descriptive.moment.SemiVariance;\n import org.junit.Assert;\n@@ -34,14 +34,14 @@ public void testInsufficientData() {\n         try {\n             sv.evaluate(nothing);\n             Assert.fail(\"null is not a valid data array.\");\n-        } catch (MathIllegalArgumentException iae) {\n+        } catch (NullArgumentException nae) {\n         }\n \n         try {\n             sv.setVarianceDirection(SemiVariance.UPSIDE_VARIANCE);\n             sv.evaluate(nothing);\n             Assert.fail(\"null is not a valid data array.\");\n-        } catch (MathIllegalArgumentException iae) {\n+        } catch (NullArgumentException nae) {\n         }\n         nothing = new double[] {};\n         Assert.assertTrue(Double.isNaN(sv.evaluate(nothing)));",
                "raw_url": "https://github.com/apache/commons-math/raw/35b688b7ec3b32dc671af4c7cb9556ff26e761eb/src/test/java/org/apache/commons/math4/stat/descriptive/moment/SemiVarianceTest.java",
                "sha": "c964a78b7c2da96f4f651576d364c83249b07a73",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/commons-math/blob/35b688b7ec3b32dc671af4c7cb9556ff26e761eb/src/test/java/org/apache/commons/math4/stat/descriptive/rank/PSquarePercentileTest.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math4/stat/descriptive/rank/PSquarePercentileTest.java?ref=35b688b7ec3b32dc671af4c7cb9556ff26e761eb",
                "deletions": 1,
                "filename": "src/test/java/org/apache/commons/math4/stat/descriptive/rank/PSquarePercentileTest.java",
                "patch": "@@ -28,6 +28,7 @@\n import org.apache.commons.math4.distribution.NormalDistribution;\n import org.apache.commons.math4.distribution.RealDistribution;\n import org.apache.commons.math4.exception.MathIllegalArgumentException;\n+import org.apache.commons.math4.exception.NullArgumentException;\n import org.apache.commons.math4.exception.OutOfRangeException;\n import org.apache.commons.math4.random.RandomGenerator;\n import org.apache.commons.math4.random.Well19937c;\n@@ -439,7 +440,7 @@ public void test5() {\n                 1.0);// changed the accuracy to 1 instead of tolerance\n     }\n \n-    @Test(expected = MathIllegalArgumentException.class)\n+    @Test(expected = NullArgumentException.class)\n     public void testNull() {\n         PSquarePercentile percentile = new PSquarePercentile(50d);\n         double[] nullArray = null;",
                "raw_url": "https://github.com/apache/commons-math/raw/35b688b7ec3b32dc671af4c7cb9556ff26e761eb/src/test/java/org/apache/commons/math4/stat/descriptive/rank/PSquarePercentileTest.java",
                "sha": "8751b00b946974ef0cc0d66d9be8dac3559dd9cb",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/commons-math/blob/35b688b7ec3b32dc671af4c7cb9556ff26e761eb/src/test/java/org/apache/commons/math4/stat/descriptive/rank/PercentileTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math4/stat/descriptive/rank/PercentileTest.java?ref=35b688b7ec3b32dc671af4c7cb9556ff26e761eb",
                "deletions": 4,
                "filename": "src/test/java/org/apache/commons/math4/stat/descriptive/rank/PercentileTest.java",
                "patch": "@@ -171,8 +171,8 @@ public void testNullEmpty() {\n         final double[] emptyArray = new double[] {};\n         try {\n             percentile.evaluate(nullArray);\n-            Assert.fail(\"Expecting MathIllegalArgumentException for null array\");\n-        } catch (final MathIllegalArgumentException ex) {\n+            Assert.fail(\"Expecting NullArgumentException for null array\");\n+        } catch (final NullArgumentException ex) {\n             // expected\n         }\n         Assert.assertTrue(Double.isNaN(percentile.evaluate(emptyArray)));\n@@ -364,9 +364,9 @@ public void testAllTechniquesNullEmpty() {\n             final UnivariateStatistic percentile = getUnivariateStatistic();\n             try {\n                 percentile.evaluate(nullArray);\n-                Assert.fail(\"Expecting MathIllegalArgumentException \"\n+                Assert.fail(\"Expecting NullArgumentException \"\n                         + \"for null array\");\n-            } catch (final MathIllegalArgumentException ex) {\n+            } catch (final NullArgumentException ex) {\n                 // expected\n             }\n             Assert.assertTrue(Double.isNaN(percentile.evaluate(emptyArray)));",
                "raw_url": "https://github.com/apache/commons-math/raw/35b688b7ec3b32dc671af4c7cb9556ff26e761eb/src/test/java/org/apache/commons/math4/stat/descriptive/rank/PercentileTest.java",
                "sha": "8b2107b4982b5e4e8b9081c1b29442414d3bccd3",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-math/blob/35b688b7ec3b32dc671af4c7cb9556ff26e761eb/src/test/java/org/apache/commons/math4/stat/regression/GLSMultipleLinearRegressionTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math4/stat/regression/GLSMultipleLinearRegressionTest.java?ref=35b688b7ec3b32dc671af4c7cb9556ff26e761eb",
                "deletions": 2,
                "filename": "src/test/java/org/apache/commons/math4/stat/regression/GLSMultipleLinearRegressionTest.java",
                "patch": "@@ -20,6 +20,7 @@\n import org.junit.Before;\n import org.junit.Test;\n import org.apache.commons.math4.TestUtils;\n+import org.apache.commons.math4.exception.NullArgumentException;\n import org.apache.commons.math4.linear.MatrixUtils;\n import org.apache.commons.math4.linear.RealMatrix;\n import org.apache.commons.math4.linear.RealVector;\n@@ -77,12 +78,12 @@ public void setUp(){\n         super.setUp();\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullArgumentException.class)\n     public void cannotAddXSampleData() {\n         createRegression().newSampleData(new double[]{}, null, null);\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullArgumentException.class)\n     public void cannotAddNullYSampleData() {\n         createRegression().newSampleData(null, new double[][]{}, null);\n     }",
                "raw_url": "https://github.com/apache/commons-math/raw/35b688b7ec3b32dc671af4c7cb9556ff26e761eb/src/test/java/org/apache/commons/math4/stat/regression/GLSMultipleLinearRegressionTest.java",
                "sha": "a2f5f62bcb67a3a158a2773950a33576fec97c0b",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/commons-math/blob/35b688b7ec3b32dc671af4c7cb9556ff26e761eb/src/test/java/org/apache/commons/math4/stat/regression/MultipleLinearRegressionAbstractTest.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math4/stat/regression/MultipleLinearRegressionAbstractTest.java?ref=35b688b7ec3b32dc671af4c7cb9556ff26e761eb",
                "deletions": 3,
                "filename": "src/test/java/org/apache/commons/math4/stat/regression/MultipleLinearRegressionAbstractTest.java",
                "patch": "@@ -16,6 +16,7 @@\n  */\n package org.apache.commons.math4.stat.regression;\n \n+import org.apache.commons.math4.exception.NullArgumentException;\n import org.apache.commons.math4.linear.RealMatrix;\n import org.apache.commons.math4.linear.RealVector;\n import org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression;\n@@ -104,7 +105,7 @@ public void testNewSample() {\n         Assert.assertEquals(flatY, regression.getY());\n     }\n     \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullArgumentException.class)\n     public void testNewSampleNullData() {\n         double[] data = null;\n         createRegression().newSampleData(data, 2, 3); \n@@ -122,12 +123,12 @@ public void testNewSampleInsufficientData() {\n         createRegression().newSampleData(data, 1, 3);\n     }\n     \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullArgumentException.class)\n     public void testXSampleDataNull() {\n         createRegression().newXSampleData(null);\n     }\n     \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullArgumentException.class)\n     public void testYSampleDataNull() {\n         createRegression().newYSampleData(null);\n     }",
                "raw_url": "https://github.com/apache/commons-math/raw/35b688b7ec3b32dc671af4c7cb9556ff26e761eb/src/test/java/org/apache/commons/math4/stat/regression/MultipleLinearRegressionAbstractTest.java",
                "sha": "1fc839bc23832cafeccbc457ef79ad5dbc5aa10b",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-math/blob/35b688b7ec3b32dc671af4c7cb9556ff26e761eb/src/test/java/org/apache/commons/math4/stat/regression/OLSMultipleLinearRegressionTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math4/stat/regression/OLSMultipleLinearRegressionTest.java?ref=35b688b7ec3b32dc671af4c7cb9556ff26e761eb",
                "deletions": 2,
                "filename": "src/test/java/org/apache/commons/math4/stat/regression/OLSMultipleLinearRegressionTest.java",
                "patch": "@@ -18,6 +18,7 @@\n \n \n import org.apache.commons.math4.TestUtils;\n+import org.apache.commons.math4.exception.NullArgumentException;\n import org.apache.commons.math4.linear.Array2DRowRealMatrix;\n import org.apache.commons.math4.linear.DefaultRealMatrixChangingVisitor;\n import org.apache.commons.math4.linear.MatrixUtils;\n@@ -500,12 +501,12 @@ public void testNewSample2() {\n         Assert.assertEquals(combinedY, regression.getY());\n     }\n     \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullArgumentException.class)\n     public void testNewSampleDataYNull() {\n         createRegression().newSampleData(null, new double[][] {});\n     }\n     \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullArgumentException.class)\n     public void testNewSampleDataXNull() {\n         createRegression().newSampleData(new double[] {}, null);\n     }",
                "raw_url": "https://github.com/apache/commons-math/raw/35b688b7ec3b32dc671af4c7cb9556ff26e761eb/src/test/java/org/apache/commons/math4/stat/regression/OLSMultipleLinearRegressionTest.java",
                "sha": "d383d0fcdf1dff61199dcf98e45b41f3c4a02656",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/commons-math/blob/35b688b7ec3b32dc671af4c7cb9556ff26e761eb/src/test/java/org/apache/commons/math4/util/MathArraysTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math4/util/MathArraysTest.java?ref=35b688b7ec3b32dc671af4c7cb9556ff26e761eb",
                "deletions": 4,
                "filename": "src/test/java/org/apache/commons/math4/util/MathArraysTest.java",
                "patch": "@@ -1128,14 +1128,14 @@ public void testVerifyValuesNegative() {\n         }\n         try {\n             MathArrays.verifyValues(nullArray, 0, 1);  // null array\n-            Assert.fail(\"Expecting MathIllegalArgumentException\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"Expecting NullArgumentException\");\n+        } catch (NullArgumentException ex) {\n             // expected\n         }\n         try {\n             MathArrays.verifyValues(testArray, nullArray, 0, 1);  // null weights array\n-            Assert.fail(\"Expecting MathIllegalArgumentException\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"Expecting NullArgumentException\");\n+        } catch (NullArgumentException ex) {\n             // expected\n         }\n         try {",
                "raw_url": "https://github.com/apache/commons-math/raw/35b688b7ec3b32dc671af4c7cb9556ff26e761eb/src/test/java/org/apache/commons/math4/util/MathArraysTest.java",
                "sha": "16e6a529ff10fa2ceca77664f9d58126834f7124",
                "status": "modified"
            }
        ],
        "message": "[MATH-869] NullArgumentException now extends NullPointerException.",
        "parent": "https://github.com/apache/commons-math/commit/c22e7fb6f9b5df6f5c3ea9d595214d63bc803a6c",
        "patched_files": [
            "Fraction.java",
            "GLSMultipleLinearRegression.java",
            "SemiVariance.java",
            "OLSMultipleLinearRegression.java",
            "PSquarePercentile.java",
            "UnivariateSolverUtils.java",
            "changes.xml",
            "AbstractUnivariateStatistic.java",
            "NullArgumentException.java",
            "MathArrays.java",
            "StatUtils.java",
            "Percentile.java"
        ],
        "repo": "commons-math",
        "unit_tests": [
            "StatUtilsTest.java",
            "SemiVarianceTest.java",
            "PSquarePercentileTest.java",
            "MathArraysTest.java",
            "AbstractUnivariateStatisticTest.java",
            "PercentileTest.java",
            "OLSMultipleLinearRegressionTest.java",
            "MultipleLinearRegressionAbstractTest.java",
            "UnivariateSolverUtilsTest.java",
            "GLSMultipleLinearRegressionTest.java",
            "FractionTest.java"
        ]
    },
    "commons-math_448759e": {
        "bug_id": "commons-math_448759e",
        "commit": "https://github.com/apache/commons-math/commit/448759e46e4b2102d1fded445f5182c6564c418b",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/commons-math/blob/448759e46e4b2102d1fded445f5182c6564c418b/src/java/org/apache/commons/math/MathException.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/java/org/apache/commons/math/MathException.java?ref=448759e46e4b2102d1fded445f5182c6564c418b",
                "deletions": 1,
                "filename": "src/java/org/apache/commons/math/MathException.java",
                "patch": "@@ -99,7 +99,7 @@ private static String buildMessage(String pattern, Object[] arguments, Locale lo\n     public MathException() {\n         super();\n         this.pattern   = null;\n-        this.arguments = null;\n+        this.arguments = new Object[0];\n     }\n     \n     /**",
                "raw_url": "https://github.com/apache/commons-math/raw/448759e46e4b2102d1fded445f5182c6564c418b/src/java/org/apache/commons/math/MathException.java",
                "sha": "143e9a067f0c07bde9cebdf9f15690b10473c520",
                "status": "modified"
            }
        ],
        "message": "fixed a forgotten possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/branches/MATH_2_0@712178 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-math/commit/0c7099ab354b91cb9b981419533fead5935f9042",
        "patched_files": [
            "MathException.java"
        ],
        "repo": "commons-math",
        "unit_tests": [
            "MathExceptionTest.java"
        ]
    },
    "commons-math_62a313f": {
        "bug_id": "commons-math_62a313f",
        "commit": "https://github.com/apache/commons-math/commit/62a313f67d40f2cd192b7f5890f0be14f358b390",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 6,
                "filename": "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java",
                "patch": "@@ -21,10 +21,12 @@\n \n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.exception.NoDataException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.analysis.ParametricUnivariateRealFunction;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Immutable representation of a real polynomial function with real coefficients.\n@@ -57,11 +59,13 @@\n      * the coefficients property.</p>\n      *\n      * @param c Polynomial coefficients.\n-     * @throws NullPointerException if {@code c} is {@code null}.\n+     * @throws NullArgumentException if {@code c} is {@code null}.\n      * @throws NoDataException if {@code c} is empty.\n      */\n-    public PolynomialFunction(double c[]) {\n+    public PolynomialFunction(double c[])\n+        throws NullArgumentException, NoDataException {\n         super();\n+        MathUtils.checkNotNull(c);\n         int n = c.length;\n         if (n == 0) {\n             throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);\n@@ -117,9 +121,11 @@ public int degree() {\n      * @param argument Input value.\n      * @return the value of the polynomial.\n      * @throws NoDataException if {@code coefficients} is empty.\n-     * @throws NullPointerException if {@code coefficients} is {@code null}.\n+     * @throws NullArgumentException if {@code coefficients} is {@code null}.\n      */\n-    protected static double evaluate(double[] coefficients, double argument) {\n+    protected static double evaluate(double[] coefficients, double argument)\n+        throws NullArgumentException, NoDataException {\n+        MathUtils.checkNotNull(coefficients);\n         int n = coefficients.length;\n         if (n == 0) {\n             throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);\n@@ -224,9 +230,11 @@ public PolynomialFunction multiply(final PolynomialFunction p) {\n      * @param coefficients Coefficients of the polynomial to differentiate.\n      * @return the coefficients of the derivative or {@code null} if coefficients has length 1.\n      * @throws NoDataException if {@code coefficients} is empty.\n-     * @throws NullPointerException if {@code coefficients} is {@code null}.\n+     * @throws NullArgumentException if {@code coefficients} is {@code null}.\n      */\n-    protected static double[] differentiate(double[] coefficients) {\n+    protected static double[] differentiate(double[] coefficients)\n+        throws NullArgumentException, NoDataException {\n+        MathUtils.checkNotNull(coefficients);\n         int n = coefficients.length;\n         if (n == 0) {\n             throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java",
                "sha": "d0128b66d1613f660b1c188835b4bcc647a45000",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/complex/Complex.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/complex/Complex.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 13,
                "filename": "src/main/java/org/apache/commons/math/complex/Complex.java",
                "patch": "@@ -23,6 +23,7 @@\n \n import org.apache.commons.math.FieldElement;\n import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.MathUtils;\n import org.apache.commons.math.util.FastMath;\n@@ -144,9 +145,11 @@ public double abs() {\n      *\n      * @param rhs the other complex number\n      * @return the complex number sum\n-     * @throws NullPointerException if <code>rhs</code> is null\n+     * @throws NullArgumentException if <code>rhs</code> is null\n      */\n-    public Complex add(Complex rhs) {\n+    public Complex add(Complex rhs)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(rhs);\n         return createComplex(real + rhs.getReal(),\n             imaginary + rhs.getImaginary());\n     }\n@@ -205,9 +208,11 @@ public Complex conjugate() {\n      *\n      * @param rhs the other complex number\n      * @return the complex number quotient\n-     * @throws NullPointerException if <code>rhs</code> is null\n+     * @throws NullArgumentException if <code>rhs</code> is null\n      */\n-    public Complex divide(Complex rhs) {\n+    public Complex divide(Complex rhs)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(rhs);\n         if (isNaN() || rhs.isNaN()) {\n             return NaN;\n         }\n@@ -352,9 +357,11 @@ public boolean isInfinite() {\n      *\n      * @param rhs the other complex number\n      * @return the complex number product\n-     * @throws NullPointerException if <code>rhs</code> is null\n+     * @throws NullArgumentException if <code>rhs</code> is null\n      */\n-    public Complex multiply(Complex rhs) {\n+    public Complex multiply(Complex rhs)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(rhs);\n         if (isNaN() || rhs.isNaN()) {\n             return NaN;\n         }\n@@ -437,9 +444,11 @@ public Complex negate() {\n      *\n      * @param rhs the other complex number\n      * @return the complex number difference\n-     * @throws NullPointerException if <code>rhs</code> is null\n+     * @throws NullArgumentException if <code>rhs</code> is null\n      */\n-    public Complex subtract(Complex rhs) {\n+    public Complex subtract(Complex rhs)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(rhs);\n         if (isNaN() || rhs.isNaN()) {\n             return NaN;\n         }\n@@ -673,13 +682,12 @@ public Complex log() {\n      *\n      * @param x the exponent.\n      * @return <code>this</code><sup><code>x</code></sup>\n-     * @throws NullPointerException if x is null\n+     * @throws NullArgumentException if x is null\n      * @since 1.2\n      */\n-    public Complex pow(Complex x) {\n-        if (x == null) {\n-            throw new NullPointerException();\n-        }\n+    public Complex pow(Complex x)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(x);\n         return this.log().multiply(x).exp();\n     }\n ",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/complex/Complex.java",
                "sha": "e65f63371180b938fa503d8165930259929ef4a4",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/exception/NullArgumentException.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/exception/NullArgumentException.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 1,
                "filename": "src/main/java/org/apache/commons/math/exception/NullArgumentException.java",
                "patch": "@@ -24,7 +24,7 @@\n  * this exception.\n  * This class is meant to signal a precondition violation (\"null is an illegal\n  * argument\") and so does not extend the standard {@code NullPointerException}.\n- * Proagation of {@code NullPointerException} from within Commons-Math is\n+ * Propagation of {@code NullPointerException} from within Commons-Math is\n  * construed to be a bug.\n  *\n  * @since 2.2",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/exception/NullArgumentException.java",
                "sha": "23309b6363557c9d3f36e3be067e548dfdfaddfb",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/fraction/BigFraction.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/fraction/BigFraction.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/math/fraction/BigFraction.java",
                "patch": "@@ -458,10 +458,11 @@ public BigFraction abs() {\n      * @param bg\n      *            the {@link BigInteger} to add, must'nt be <code>null</code>.\n      * @return a <code>BigFraction</code> instance with the resulting values.\n-     * @throws NullPointerException\n+     * @throws NullArgumentException\n      *             if the {@link BigInteger} is <code>null</code>.\n      */\n-    public BigFraction add(final BigInteger bg) {\n+    public BigFraction add(final BigInteger bg) throws NullArgumentException {\n+        MathUtils.checkNotNull(bg);\n         return new BigFraction(numerator.add(denominator.multiply(bg)), denominator);\n     }\n ",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/fraction/BigFraction.java",
                "sha": "8eddcc4ccb5fd28357425b03efc53e1fa9d40cf6",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 1,
                "filename": "src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
                "patch": "@@ -22,6 +22,7 @@\n import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.MathUtils;\n import org.apache.commons.math.util.FastMath;\n@@ -385,7 +386,9 @@ public void copySubMatrix(int[] selectedRows, int[] selectedColumns, double[][]\n     }\n \n     /** {@inheritDoc} */\n-    public void setSubMatrix(final double[][] subMatrix, final int row, final int column) {\n+    public void setSubMatrix(final double[][] subMatrix, final int row, final int column)\n+        throws NoDataException, DimensionMismatchException, NullArgumentException {\n+        MathUtils.checkNotNull(subMatrix);\n         final int nRows = subMatrix.length;\n         if (nRows == 0) {\n             throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
                "sha": "c707aeca53ae28bcefa501c92f8e75a0dc13c97e",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 6,
                "filename": "src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java",
                "patch": "@@ -24,7 +24,9 @@\n import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MathIllegalStateException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Implementation of FieldMatrix<T> using a {@link FieldElement}[][] array to store entries.\n@@ -140,18 +142,16 @@ public Array2DRowFieldMatrix(final T[][] d, final boolean copyArray) {\n      * @param copyArray Whether to copy or reference the input array.\n      * @throws DimensionMismatchException if {@code d} is not rectangular.\n      * @throws NoDataException if there are not at least one row and one column.\n-     * @throws org.apache.commons.math.exception.NullArgumentException\n-     * if {@code d} is {@code null}.\n+     * @throws NullArgumentException if {@code d} is {@code null}.\n      * @see #Array2DRowFieldMatrix(FieldElement[][])\n      */\n-    public Array2DRowFieldMatrix(final Field<T> field, final T[][] d, final boolean copyArray) {\n+    public Array2DRowFieldMatrix(final Field<T> field, final T[][] d, final boolean copyArray)\n+        throws DimensionMismatchException, NoDataException, NullArgumentException {\n         super(field);\n         if (copyArray) {\n             copyIn(d);\n         } else {\n-            if (d == null) {\n-                throw new NullPointerException();\n-            }\n+            MathUtils.checkNotNull(d);\n             final int nRows = d.length;\n             if (nRows == 0) {\n                 throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java",
                "sha": "7255e0f637e0d48162637c62719814b2c5d73516",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 4,
                "filename": "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
                "patch": "@@ -24,6 +24,7 @@\n import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.exception.MathIllegalStateException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Implementation of RealMatrix using a double[][] array to store entries and\n@@ -87,10 +88,11 @@ public Array2DRowRealMatrix(final int rowDimension, final int columnDimension) {\n      * @param d Data for the new matrix.\n      * @throws DimensionMismatchException if {@code d} is not rectangular.\n      * @throws NoDataException if {@code d} row or colum dimension is zero.\n-     * @throws NullPointerException if {@code d} is {@code null}.\n+     * @throws NullArgumentException if {@code d} is {@code null}.\n      * @see #Array2DRowRealMatrix(double[][], boolean)\n      */\n-    public Array2DRowRealMatrix(final double[][] d) {\n+    public Array2DRowRealMatrix(final double[][] d)\n+        throws DimensionMismatchException, NoDataException, NullArgumentException {\n         copyIn(d);\n     }\n \n@@ -275,6 +277,7 @@ public void setSubMatrix(final double[][] subMatrix,\n             if (column > 0) {\n                 throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);\n             }\n+            MathUtils.checkNotNull(subMatrix);\n             final int nRows = subMatrix.length;\n             if (nRows == 0) {\n                 throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n@@ -526,10 +529,11 @@ public double walkInColumnOrder(final RealMatrixPreservingVisitor visitor,\n      * @param in Data to copy.\n      * @throws NoDataException if the input array is empty.\n      * @throws DimensionMismatchException if the input array is not rectangular.\n-     * @throws org.apache.commons.math.exception.NullArgumentException if\n+     * @throws NullArgumentException if\n      * the input array is {@code null}.\n      */\n-    private void copyIn(final double[][] in) {\n+    private void copyIn(final double[][] in)\n+        throws DimensionMismatchException, NoDataException, NullArgumentException {\n         setSubMatrix(in, 0, 0);\n     }\n }",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
                "sha": "8db8dc7161413e73b9c1492c879a60f034c0428f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 0,
                "filename": "src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java",
                "patch": "@@ -25,6 +25,7 @@\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Cache-friendly implementation of FieldMatrix using a flat arrays to store\n@@ -759,6 +760,7 @@ private void copyBlockPart(final T[] srcBlock, final int srcWidth,\n     @Override\n     public void setSubMatrix(final T[][] subMatrix, final int row, final int column) {\n         // safety checks\n+        MathUtils.checkNotNull(subMatrix);\n         final int refLength = subMatrix[0].length;\n         if (refLength == 0) {\n             throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java",
                "sha": "8e9378317e080646f5bc9890a694be3364b668d2",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 1,
                "filename": "src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java",
                "patch": "@@ -22,8 +22,10 @@\n \n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.NoDataException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Cache-friendly implementation of RealMatrix using a flat arrays to store\n@@ -764,8 +766,10 @@ private void copyBlockPart(final double[] srcBlock, final int srcWidth,\n \n     /** {@inheritDoc} */\n     @Override\n-    public void setSubMatrix(final double[][] subMatrix, final int row, final int column) {\n+    public void setSubMatrix(final double[][] subMatrix, final int row, final int column)\n+        throws NoDataException, NullArgumentException {\n         // safety checks\n+        MathUtils.checkNotNull(subMatrix);\n         final int refLength = subMatrix[0].length;\n         if (refLength == 0) {\n             throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java",
                "sha": "b466fb6bd0c03fb551fba723914793335bd1af81",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/linear/RealMatrix.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/linear/RealMatrix.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 10,
                "filename": "src/main/java/org/apache/commons/math/linear/RealMatrix.java",
                "patch": "@@ -17,6 +17,11 @@\n \n package org.apache.commons.math.linear;\n \n+import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.OutOfRangeException;\n+import org.apache.commons.math.exception.ZeroException;\n+\n /**\n  * Interface defining a real-valued matrix with basic algebraic operations.\n  * <p>\n@@ -210,19 +215,16 @@ void copySubMatrix(int startRow, int endRow, int startColumn, int endColumn,\n     * @param subMatrix  array containing the submatrix replacement data\n     * @param row  row coordinate of the top, left element to be replaced\n     * @param column  column coordinate of the top, left element to be replaced\n-    * @throws org.apache.commons.math.exception.ZeroException if\n-    * {@code subMatrix} does not contain at least one column.\n-    * @throws org.apache.commons.math.exception.OutOfRangeException if\n-    * {@code subMatrix} does not fit into this matrix from element in\n-    * {@code (row, column)}.\n-    * @throws org.apache.commons.math.exception.DimensionMismatchException\n-    * if {@code subMatrix} is not rectangular.\n+    * @throws ZeroException if {@code subMatrix} does not contain at least one column.\n+    * @throws OutOfRangeException if {@code subMatrix} does not fit into\n+    * this matrix from element in {@code (row, column)}.\n+    * @throws DimensionMismatchException if {@code subMatrix} is not rectangular.\n     * (not all rows have the same length) or empty.\n-    * @throws org.apache.commons.math.exception.NullArgumentException if\n-    * {@code subMatrix} is {@code null}.\n+    * @throws NullArgumentException if {@code subMatrix} is {@code null}.\n     * @since 2.0\n     */\n-    void setSubMatrix(double[][] subMatrix, int row, int column);\n+    void setSubMatrix(double[][] subMatrix, int row, int column)\n+        throws ZeroException, OutOfRangeException, DimensionMismatchException, NullArgumentException;\n \n    /**\n     * Geet the entries at the given row index",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/linear/RealMatrix.java",
                "sha": "a0f4fd3c15877c394a4f2c19a133cf9626e08744",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 1,
                "filename": "src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java",
                "patch": "@@ -22,6 +22,7 @@\n import java.net.URL;\n import java.util.List;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.StatisticalSummary;\n import org.apache.commons.math.stat.descriptive.SummaryStatistics;\n \n@@ -62,6 +63,7 @@\n      *\n      * @param file the input file\n      * @throws IOException if an IO error occurs\n+     * @throws NullArgumentException if file is null\n      */\n     void load(File file) throws IOException;\n \n@@ -70,8 +72,9 @@\n      *\n      * @param url url of the input file\n      * @throws IOException if an IO error occurs\n+     * @throws NullArgumentException if url is null\n      */\n-    void load(URL url) throws IOException;\n+    void load(URL url) throws IOException, NullArgumentException;\n \n     /**\n      * Generates a random value from this distribution.",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java",
                "sha": "b0a1047a47b456ed54a7b1e04cb31d65e90ff0d4",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 4,
                "filename": "src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java",
                "patch": "@@ -28,10 +28,12 @@\n import java.util.List;\n \n import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.StatisticalSummary;\n import org.apache.commons.math.stat.descriptive.SummaryStatistics;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Implements <code>EmpiricalDistribution</code> interface.  This implementation\n@@ -115,8 +117,9 @@ public EmpiricalDistributionImpl(int binCount) {\n      * array of numbers.\n      *\n      * @param in the input data array\n+     * @exception NullArgumentException if in is null\n      */\n-    public void load(double[] in) {\n+    public void load(double[] in) throws NullArgumentException {\n         DataAdapter da = new ArrayDataAdapter(in);\n         try {\n             da.computeStats();\n@@ -133,8 +136,10 @@ public void load(double[] in) {\n      * @param url  url of the input file\n      *\n      * @throws IOException if an IO error occurs\n+     * @throws NullArgumentException if url is null\n      */\n-    public void load(URL url) throws IOException {\n+    public void load(URL url) throws IOException, NullArgumentException {\n+        MathUtils.checkNotNull(url);\n         BufferedReader in =\n             new BufferedReader(new InputStreamReader(url.openStream()));\n         try {\n@@ -161,8 +166,10 @@ public void load(URL url) throws IOException {\n      *\n      * @param file the input file\n      * @throws IOException if an IO error occurs\n+     * @throws NullArgumentException if file is null\n      */\n-    public void load(File file) throws IOException {\n+    public void load(File file) throws IOException, NullArgumentException {\n+        MathUtils.checkNotNull(file);\n         BufferedReader in = new BufferedReader(new FileReader(file));\n         try {\n             DataAdapter da = new StreamDataAdapter(in);\n@@ -288,9 +295,11 @@ public void computeStats() throws IOException {\n          * Construct an ArrayDataAdapter from a double[] array\n          *\n          * @param in double[] array holding the data\n+         * @throws NullArgumentException if in is null\n          */\n-        public ArrayDataAdapter(double[] in){\n+        public ArrayDataAdapter(double[] in) throws NullArgumentException {\n             super();\n+            MathUtils.checkNotNull(in);\n             inputArray = in;\n         }\n ",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java",
                "sha": "4604ac2280498b0191c22783599c2ab5f84236aa",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
                "patch": "@@ -21,6 +21,7 @@\n import java.util.Arrays;\n \n import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.moment.GeometricMean;\n import org.apache.commons.math.stat.descriptive.moment.Kurtosis;\n@@ -32,6 +33,7 @@\n import org.apache.commons.math.stat.descriptive.rank.Percentile;\n import org.apache.commons.math.stat.descriptive.summary.Sum;\n import org.apache.commons.math.stat.descriptive.summary.SumOfSquares;\n+import org.apache.commons.math.util.MathUtils;\n import org.apache.commons.math.util.ResizableDoubleArray;\n import org.apache.commons.math.util.FastMath;\n \n@@ -699,9 +701,12 @@ public DescriptiveStatistics copy() {\n      *\n      * @param source DescriptiveStatistics to copy\n      * @param dest DescriptiveStatistics to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(DescriptiveStatistics source, DescriptiveStatistics dest) {\n+    public static void copy(DescriptiveStatistics source, DescriptiveStatistics dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         // Copy data and window size\n         dest.eDA = source.eDA.copy();\n         dest.windowSize = source.windowSize;",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
                "sha": "c25a4819859cf16036115ee5f4052a5cb89839f8",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
                "patch": "@@ -19,6 +19,7 @@\n import java.io.Serializable;\n \n import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.moment.GeometricMean;\n import org.apache.commons.math.stat.descriptive.moment.Mean;\n@@ -652,9 +653,12 @@ public SummaryStatistics copy() {\n      *\n      * @param source SummaryStatistics to copy\n      * @param dest SummaryStatistics to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(SummaryStatistics source, SummaryStatistics dest) {\n+    public static void copy(SummaryStatistics source, SummaryStatistics dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.maxImpl = source.maxImpl.copy();\n         dest.meanImpl = source.meanImpl.copy();\n         dest.minImpl = source.minImpl.copy();",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
                "sha": "d4f80e57c68fef810c2800fd89a75e7bae0d55bf",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java",
                "patch": "@@ -16,6 +16,9 @@\n  */\n package org.apache.commons.math.stat.descriptive;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.util.MathUtils;\n+\n /**\n  * Implementation of\n  * {@link org.apache.commons.math.stat.descriptive.DescriptiveStatistics} that\n@@ -159,10 +162,13 @@ public synchronized SynchronizedDescriptiveStatistics copy() {\n      *\n      * @param source SynchronizedDescriptiveStatistics to copy\n      * @param dest SynchronizedDescriptiveStatistics to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n     public static void copy(SynchronizedDescriptiveStatistics source,\n-            SynchronizedDescriptiveStatistics dest) {\n+                            SynchronizedDescriptiveStatistics dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         synchronized (source) {\n             synchronized (dest) {\n                 DescriptiveStatistics.copy(source, dest);",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java",
                "sha": "0dc015e78426c98468eb9163eec8b965b19f5763",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java",
                "patch": "@@ -16,6 +16,9 @@\n  */\n package org.apache.commons.math.stat.descriptive;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.util.MathUtils;\n+\n /**\n  * Implementation of\n  * {@link org.apache.commons.math.stat.descriptive.SummaryStatistics} that\n@@ -319,10 +322,13 @@ public synchronized SynchronizedSummaryStatistics copy() {\n      *\n      * @param source SynchronizedSummaryStatistics to copy\n      * @param dest SynchronizedSummaryStatistics to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n     public static void copy(SynchronizedSummaryStatistics source,\n-            SynchronizedSummaryStatistics dest) {\n+                            SynchronizedSummaryStatistics dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         synchronized (source) {\n             synchronized (dest) {\n                 SummaryStatistics.copy(source, dest);",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java",
                "sha": "fa4782838c86dc16bd312a3b4914c9e5ded79a3c",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java",
                "patch": "@@ -17,7 +17,10 @@\n package org.apache.commons.math.stat.descriptive.moment;\n \n import java.io.Serializable;\n+\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Computes the first moment (arithmetic mean).  Uses the definitional formula:\n@@ -148,9 +151,12 @@ public FirstMoment copy() {\n      *\n      * @param source FirstMoment to copy\n      * @param dest FirstMoment to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(FirstMoment source, FirstMoment dest) {\n+    public static void copy(FirstMoment source, FirstMoment dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.n = source.n;\n         dest.m1 = source.m1;",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java",
                "sha": "5d5b2f4bcde8b5bee0d5c63b17d8d5471e166621",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java",
                "patch": "@@ -18,6 +18,9 @@\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.util.MathUtils;\n+\n /**\n  * Computes a statistic related to the Fourth Central Moment.  Specifically,\n  * what is computed is the sum of\n@@ -133,9 +136,12 @@ public FourthMoment copy() {\n      *\n      * @param source FourthMoment to copy\n      * @param dest FourthMoment to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(FourthMoment source, FourthMoment dest) {\n+    public static void copy(FourthMoment source, FourthMoment dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         ThirdMoment.copy(source, dest);\n         dest.m4 = source.m4;\n     }",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java",
                "sha": "ed288e708e03007d53390990b65a8d70f1c52d22",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java",
                "patch": "@@ -19,11 +19,13 @@\n import java.io.Serializable;\n \n import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic;\n import org.apache.commons.math.stat.descriptive.summary.SumOfLogs;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Returns the <a href=\"http://www.xycoon.com/geometric_mean.htm\">\n@@ -183,9 +185,12 @@ public StorelessUnivariateStatistic getSumLogImpl() {\n      *\n      * @param source GeometricMean to copy\n      * @param dest GeometricMean to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(GeometricMean source, GeometricMean dest) {\n+    public static void copy(GeometricMean source, GeometricMean dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.sumOfLogs = source.sumOfLogs.copy();\n     }",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java",
                "sha": "735efea71a1e3e38242d21c08a6f3cb1cceb896f",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java",
                "patch": "@@ -19,9 +19,11 @@\n import java.io.Serializable;\n \n import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n \n /**\n@@ -211,9 +213,12 @@ public Kurtosis copy() {\n      *\n      * @param source Kurtosis to copy\n      * @param dest Kurtosis to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(Kurtosis source, Kurtosis dest) {\n+    public static void copy(Kurtosis source, Kurtosis dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.moment = source.moment.copy();\n         dest.incMoment = source.incMoment;",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java",
                "sha": "e0e552412a8f84d53e70085555779fe50903ae9d",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java",
                "patch": "@@ -18,9 +18,11 @@\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math.stat.descriptive.WeightedEvaluation;\n import org.apache.commons.math.stat.descriptive.summary.Sum;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * <p>Computes the arithmetic mean of a set of values. Uses the definitional\n@@ -262,9 +264,12 @@ public Mean copy() {\n      *\n      * @param source Mean to copy\n      * @param dest Mean to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(Mean source, Mean dest) {\n+    public static void copy(Mean source, Mean dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.incMoment = source.incMoment;\n         dest.moment = source.moment.copy();",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java",
                "sha": "b1b67fd1e31780ccf346589bea11bf877c324685",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java",
                "patch": "@@ -18,6 +18,9 @@\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.util.MathUtils;\n+\n /**\n  * Computes a statistic related to the Second Central Moment.  Specifically,\n  * what is computed is the sum of squared deviations from the sample mean.\n@@ -114,9 +117,12 @@ public SecondMoment copy() {\n      *\n      * @param source SecondMoment to copy\n      * @param dest SecondMoment to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(SecondMoment source, SecondMoment dest) {\n+    public static void copy(SecondMoment source, SecondMoment dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         FirstMoment.copy(source, dest);\n         dest.m2 = source.m2;\n     }",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java",
                "sha": "53cdf331954562e8ab23e2c879635b342e85fcf9",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java",
                "patch": "@@ -21,6 +21,7 @@\n import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * <p>Computes the semivariance of a set of values with respect to a given cutoff value.\n@@ -156,9 +157,12 @@ public SemiVariance copy() {\n      *\n      * @param source SemiVariance to copy\n      * @param dest SemiVariance to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(final SemiVariance source, SemiVariance dest) {\n+    public static void copy(final SemiVariance source, SemiVariance dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.biasCorrected = source.biasCorrected;\n         dest.varianceDirection = source.varianceDirection;",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java",
                "sha": "707a9767520e18b243e058d86bb581fdd3a95fbc",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java",
                "patch": "@@ -18,8 +18,10 @@\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Computes the skewness of the available values.\n@@ -203,9 +205,12 @@ public Skewness copy() {\n      *\n      * @param source Skewness to copy\n      * @param dest Skewness to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(Skewness source, Skewness dest) {\n+    public static void copy(Skewness source, Skewness dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.moment = new ThirdMoment(source.moment.copy());\n         dest.incMoment = source.incMoment;",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java",
                "sha": "a33cbbb2c8d9bec0462dbb0d5f46b03c2c58e80b",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java",
                "patch": "@@ -18,8 +18,10 @@\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Computes the sample standard deviation.  The standard deviation\n@@ -261,9 +263,12 @@ public StandardDeviation copy() {\n      *\n      * @param source StandardDeviation to copy\n      * @param dest StandardDeviation to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(StandardDeviation source, StandardDeviation dest) {\n+    public static void copy(StandardDeviation source, StandardDeviation dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.variance = source.variance.copy();\n     }",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java",
                "sha": "10a23ed1b8fcccf636cb5a2d3123c04248101643",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java",
                "patch": "@@ -18,6 +18,9 @@\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.util.MathUtils;\n+\n \n /**\n  * Computes a statistic related to the Third Central Moment.  Specifically,\n@@ -128,9 +131,12 @@ public ThirdMoment copy() {\n      *\n      * @param source ThirdMoment to copy\n      * @param dest ThirdMoment to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(ThirdMoment source, ThirdMoment dest) {\n+    public static void copy(ThirdMoment source, ThirdMoment dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         SecondMoment.copy(source, dest);\n         dest.m3 = source.m3;\n         dest.nDevSq = source.nDevSq;",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java",
                "sha": "7e7c49c8bb3a7f1552f8ecd553367def7ea2d8fa",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 6,
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java",
                "patch": "@@ -22,6 +22,7 @@\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.WeightedEvaluation;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Computes the variance of the available values.  By default, the unbiased\n@@ -595,13 +596,12 @@ public Variance copy() {\n      *\n      * @param source Variance to copy\n      * @param dest Variance to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(Variance source, Variance dest) {\n-        if (source == null ||\n-            dest == null) {\n-            throw new NullArgumentException();\n-        }\n+    public static void copy(Variance source, Variance dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.moment = source.moment.copy();\n         dest.isBiasCorrected = source.isBiasCorrected;",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java",
                "sha": "124d266f1e758ed17a514968b012660490dc3bed",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java",
                "patch": "@@ -18,7 +18,9 @@\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Returns the maximum of the available values.\n@@ -153,9 +155,12 @@ public Max copy() {\n      *\n      * @param source Max to copy\n      * @param dest Max to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(Max source, Max dest) {\n+    public static void copy(Max source, Max dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.n = source.n;\n         dest.value = source.value;",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java",
                "sha": "c59ed540c3798434ba0eaff2bb35236300bd6a30",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java",
                "patch": "@@ -18,7 +18,9 @@\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Returns the minimum of the available values.\n@@ -153,9 +155,12 @@ public Min copy() {\n      *\n      * @param source Min to copy\n      * @param dest Min to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(Min source, Min dest) {\n+    public static void copy(Min source, Min dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.n = source.n;\n         dest.value = source.value;",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java",
                "sha": "6f5c82d283348ba556b49ca2863dd0ecfb8c2c49",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java",
                "patch": "@@ -19,10 +19,12 @@\n import java.io.Serializable;\n import java.util.Arrays;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Provides percentile computation.\n@@ -482,9 +484,12 @@ public Percentile copy() {\n      *\n      * @param source Percentile to copy\n      * @param dest Percentile to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(Percentile source, Percentile dest) {\n+    public static void copy(Percentile source, Percentile dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         if (source.cachedPivots != null) {\n             System.arraycopy(source.cachedPivots, 0, dest.cachedPivots, 0, source.cachedPivots.length);",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java",
                "sha": "c3cd66e0fd286da6b64a9e1f1fee0f380c0714c7",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java",
                "patch": "@@ -18,9 +18,11 @@\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math.stat.descriptive.WeightedEvaluation;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Returns the product of the available values.\n@@ -210,9 +212,12 @@ public Product copy() {\n      *\n      * @param source Product to copy\n      * @param dest Product to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(Product source, Product dest) {\n+    public static void copy(Product source, Product dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.n = source.n;\n         dest.value = source.value;",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java",
                "sha": "bc656d3c4deb0f1f3fd60c53caca254e149e148d",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java",
                "patch": "@@ -18,7 +18,9 @@\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n+import org.apache.commons.math.util.MathUtils;\n \n \n /**\n@@ -206,9 +208,12 @@ public Sum copy() {\n      *\n      * @param source Sum to copy\n      * @param dest Sum to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(Sum source, Sum dest) {\n+    public static void copy(Sum source, Sum dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.n = source.n;\n         dest.value = source.value;",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java",
                "sha": "f865f8d826565dc568b83c027367f9f65a36f1b1",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java",
                "patch": "@@ -18,8 +18,10 @@\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Returns the sum of the natural logs for this collection of values.\n@@ -152,9 +154,12 @@ public SumOfLogs copy() {\n      *\n      * @param source SumOfLogs to copy\n      * @param dest SumOfLogs to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(SumOfLogs source, SumOfLogs dest) {\n+    public static void copy(SumOfLogs source, SumOfLogs dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.n = source.n;\n         dest.value = source.value;",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java",
                "sha": "8166d289d1c9639d2dc047cb9726fdf6c9fd05ea",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java",
                "patch": "@@ -18,7 +18,9 @@\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Returns the sum of the squares of the available values.\n@@ -140,9 +142,12 @@ public SumOfSquares copy() {\n      *\n      * @param source SumOfSquares to copy\n      * @param dest SumOfSquares to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(SumOfSquares source, SumOfSquares dest) {\n+    public static void copy(SumOfSquares source, SumOfSquares dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.n = source.n;\n         dest.value = source.value;",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java",
                "sha": "15053c8980046db1772c3ef8390fdcfde7e59b23",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java",
                "patch": "@@ -19,6 +19,7 @@\n import org.apache.commons.math.MathException;\n import org.apache.commons.math.exception.NotPositiveException;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n@@ -27,6 +28,7 @@\n import org.apache.commons.math.distribution.ChiSquaredDistributionImpl;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Implements Chi-Square test statistics defined in the\n@@ -337,10 +339,12 @@ private void checkArray(long[][] in) {\n      * Throws MathIllegalArgumentException if the input array is not rectangular.\n      *\n      * @param in array to be tested\n-     * @throws NullPointerException if input array is null\n+     * @throws NullArgumentException if input array is null\n      * @throws MathIllegalArgumentException if input array is not rectangular\n      */\n-    private void checkRectangular(long[][] in) {\n+    private void checkRectangular(long[][] in)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(in);\n         for (int i = 1; i < in.length; i++) {\n             if (in[i].length != in[0].length) {\n                 throw new DimensionMismatchException(LocalizedFormats.DIFFERENT_ROWS_LENGTHS,",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java",
                "sha": "090aacd0d95356674d3ac76b7e01f9ae7969ab01",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/util/MathUtils.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/util/MathUtils.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 1,
                "filename": "src/main/java/org/apache/commons/math/util/MathUtils.java",
                "patch": "@@ -2325,7 +2325,8 @@ public static void checkNotNull(Object o,\n      * @param o Object to be checked.\n      * @throws NullArgumentException if {@code o} is {@code null}.\n      */\n-    public static void checkNotNull(Object o) {\n+    public static void checkNotNull(Object o)\n+        throws NullArgumentException {\n         if (o == null) {\n             throw new NullArgumentException();\n         }",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/util/MathUtils.java",
                "sha": "85cb6d26e13d4be96da56a9ebccba272ff17dcfc",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 5,
                "filename": "src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java",
                "patch": "@@ -20,6 +20,7 @@\n import java.util.Arrays;\n \n import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n@@ -277,13 +278,16 @@ public ResizableDoubleArray(int initialCapacity, float expansionFactor,\n     /**\n      * Copy constructor.  Creates a new ResizableDoubleArray that is a deep,\n      * fresh copy of the original. Needs to acquire synchronization lock\n-     * on original.  Original may not be null; otherwise a NullPointerException\n+     * on original.  Original may not be null; otherwise a {@link NullArgumentException}\n      * is thrown.\n      *\n      * @param original array to copy\n+     * @exception NullArgumentException if original is null\n      * @since 2.0\n      */\n-    public ResizableDoubleArray(ResizableDoubleArray original) {\n+    public ResizableDoubleArray(ResizableDoubleArray original)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(original);\n         copy(original, this);\n     }\n \n@@ -823,16 +827,20 @@ public synchronized int start() {\n      * <p>Obtains synchronization locks on both source and dest\n      * (in that order) before performing the copy.</p>\n      *\n-     * <p>Neither source nor dest may be null; otherwise a NullPointerException\n+     * <p>Neither source nor dest may be null; otherwise a {@link NullArgumentException}\n      * is thrown</p>\n      *\n      * @param source ResizableDoubleArray to copy\n      * @param dest ResizableArray to replace with a copy of the source array\n+     * @exception NullArgumentException if either source or dest is null\n      * @since 2.0\n      *\n      */\n-    public static void copy(ResizableDoubleArray source, ResizableDoubleArray dest) {\n-       synchronized(source) {\n+    public static void copy(ResizableDoubleArray source, ResizableDoubleArray dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n+        synchronized(source) {\n            synchronized(dest) {\n                dest.initialCapacity = source.initialCapacity;\n                dest.contractionCriteria = source.contractionCriteria;",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java",
                "sha": "e80f2c0120e4c36d1f0910ab96f70307ef25e2fd",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/site/xdoc/changes.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/site/xdoc/changes.xml?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 0,
                "filename": "src/site/xdoc/changes.xml",
                "patch": "@@ -52,6 +52,9 @@ The <action> type attribute can be add,update,fix,remove.\n     If the output is not quite correct, check for invisible trailing spaces!\n      -->\n     <release version=\"3.0\" date=\"TBD\" description=\"TBD\">\n+      <action dev=\"luc\" type=\"fix\" issue=\"MATH-403\">\n+        Replaced NullPointerException by NullArgumentException.\n+      </action>\n       <action dev=\"luc\" type=\"add\">\n         Added a consistent classes hierarchy for Euclidean spaces in dimension 1, 2 and 3.\n       </action>",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/site/xdoc/changes.xml",
                "sha": "8d10be3fc0f28af04769d6eb12329907aabb542a",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/test/java/org/apache/commons/math/complex/ComplexTest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math/complex/ComplexTest.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 7,
                "filename": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
                "patch": "@@ -18,6 +18,7 @@\n package org.apache.commons.math.complex;\n \n import org.apache.commons.math.TestUtils;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.util.FastMath;\n import org.junit.Assert;\n import org.junit.Test;\n@@ -632,14 +633,9 @@ public void testPowZero() {\n                new Complex(-1, 3).pow(Complex.ZERO), 10e-12);\n    }\n \n-    @Test\n+    @Test(expected=NullArgumentException.class)\n     public void testpowNull() {\n-        try {\n-            Complex.ONE.pow(null);\n-            Assert.fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {\n-            // expected\n-        }\n+        Complex.ONE.pow(null);\n     }\n \n     @Test",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/test/java/org/apache/commons/math/complex/ComplexTest.java",
                "sha": "3eb6d3eabaf9e7ba03ca399f1a6935425ec76df1",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 2,
                "filename": "src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
                "patch": "@@ -23,6 +23,7 @@\n import org.apache.commons.math.util.FastMath;\n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n@@ -930,8 +931,8 @@ public void testSetSubMatrix() throws Exception {\n         // null\n         try {\n             m.setSubMatrix(null,1,1);\n-            Assert.fail(\"expecting NullPointerException\");\n-        } catch (NullPointerException e) {\n+            Assert.fail(\"expecting NullArgumentException\");\n+        } catch (NullArgumentException e) {\n             // expected\n         }\n         Array2DRowRealMatrix m2 = new Array2DRowRealMatrix();",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
                "sha": "100d3478b11562fc2a002000186088bd41528593",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 2,
                "filename": "src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java",
                "patch": "@@ -27,6 +27,7 @@\n import org.apache.commons.math.fraction.Fraction;\n import org.apache.commons.math.fraction.FractionField;\n import org.apache.commons.math.exception.NoDataException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n@@ -1213,8 +1214,8 @@ public void testSetSubMatrix() throws Exception {\n         // null\n         try {\n             m.setSubMatrix(null,1,1);\n-            Assert.fail(\"expecting NullPointerException\");\n-        } catch (NullPointerException e) {\n+            Assert.fail(\"expecting NullArgumentException\");\n+        } catch (NullArgumentException e) {\n             // expected\n         }\n ",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java",
                "sha": "15212c3f8a728923bb802e26dcd469c6ab0c8cdc",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 2,
                "filename": "src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java",
                "patch": "@@ -25,6 +25,7 @@\n import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n@@ -1113,8 +1114,8 @@ public void testSetSubMatrix() throws Exception {\n         // null\n         try {\n             m.setSubMatrix(null,1,1);\n-            Assert.fail(\"expecting NullPointerException\");\n-        } catch (NullPointerException e) {\n+            Assert.fail(\"expecting NullArgumentException\");\n+        } catch (NullArgumentException e) {\n             // expected\n         }\n ",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java",
                "sha": "9099b9971e977a0f47c81fdddbe4d84756f7a3b2",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 2,
                "filename": "src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java",
                "patch": "@@ -20,6 +20,7 @@\n import org.junit.Assert;\n \n import org.apache.commons.math.TestUtils;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n@@ -629,8 +630,8 @@ public void testSetSubMatrix() {\n         // null\n         try {\n             m.setSubMatrix(null, 1, 1);\n-            Assert.fail(\"expecting NullPointerException\");\n-        } catch (NullPointerException e) {\n+            Assert.fail(\"expecting NullArgumentException\");\n+        } catch (NullArgumentException e) {\n             // expected\n         }\n         try {",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java",
                "sha": "ba69bd02178a4d3e66eff64328d52ea915634d89",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "deletions": 24,
                "filename": "src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java",
                "patch": "@@ -25,6 +25,7 @@\n \n import org.apache.commons.math.RetryRunner;\n import org.apache.commons.math.TestUtils;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.SummaryStatistics;\n import org.junit.Assert;\n import org.junit.Before;\n@@ -184,37 +185,19 @@ public void testSerialization() {\n         verifySame(empiricalDistribution2, dist2);\n     }\n \n-    @Test\n+    @Test(expected=NullArgumentException.class)\n     public void testLoadNullDoubleArray() {\n-        EmpiricalDistribution dist = new EmpiricalDistributionImpl();\n-        try {\n-            dist.load((double[]) null);\n-            Assert.fail(\"load((double[]) null) expected NullPointerException\");\n-        } catch (NullPointerException e) {\n-            // expected\n-        }\n+       new EmpiricalDistributionImpl().load((double[]) null);\n     }\n \n-    @Test\n+    @Test(expected=NullArgumentException.class)\n     public void testLoadNullURL() throws Exception {\n-        EmpiricalDistribution dist = new EmpiricalDistributionImpl();\n-        try {\n-            dist.load((URL) null);\n-            Assert.fail(\"load((URL) null) expected NullPointerException\");\n-        } catch (NullPointerException e) {\n-            // expected\n-        }\n+        new EmpiricalDistributionImpl().load((URL) null);\n     }\n \n-    @Test\n+    @Test(expected=NullArgumentException.class)\n     public void testLoadNullFile() throws Exception {\n-        EmpiricalDistribution dist = new EmpiricalDistributionImpl();\n-        try {\n-            dist.load((File) null);\n-            Assert.fail(\"load((File) null) expected NullPointerException\");\n-        } catch (NullPointerException e) {\n-            // expected\n-        }\n+        new EmpiricalDistributionImpl().load((File) null);\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java",
                "sha": "9a2ab369edfd14af139cb175dbe9c91f4689405c",
                "status": "modified"
            }
        ],
        "message": "Replaced NullPointerException by NullArgumentException\n\nJIRA: MATH-403\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1132432 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-math/commit/a4e6f75c86973bf51b5e7c4a11ac38ee90c325d3",
        "patched_files": [
            "DescriptiveStatistics.java",
            "Complex.java",
            "GeometricMean.java",
            "Sum.java",
            "Max.java",
            "ChiSquareTestImpl.java",
            "changes.xml",
            "EmpiricalDistribution.java",
            "FirstMoment.java",
            "StandardDeviation.java",
            "FourthMoment.java",
            "BigFraction.java",
            "ResizableDoubleArray.java",
            "SynchronizedSummaryStatistics.java",
            "SemiVariance.java",
            "SumOfLogs.java",
            "RealMatrix.java",
            "Array2DRowFieldMatrix.java",
            "NullArgumentException.java",
            "SparseRealMatrix.java",
            "Kurtosis.java",
            "Percentile.java",
            "Array2DRowRealMatrix.java",
            "AbstractRealMatrix.java",
            "Mean.java",
            "BlockFieldMatrix.java",
            "MathUtils.java",
            "Skewness.java",
            "Variance.java",
            "BlockRealMatrix.java",
            "Product.java",
            "SumOfSquares.java",
            "ThirdMoment.java",
            "PolynomialFunction.java",
            "SummaryStatistics.java",
            "Min.java",
            "SynchronizedDescriptiveStatistics.java",
            "EmpiricalDistributionImpl.java",
            "SecondMoment.java"
        ],
        "repo": "commons-math",
        "unit_tests": [
            "EmpiricalDistributionTest.java",
            "SummaryStatisticsTest.java",
            "MaxTest.java",
            "BlockFieldMatrixTest.java",
            "SynchronizedDescriptiveStatisticsTest.java",
            "Array2DRowRealMatrixTest.java",
            "StandardDeviationTest.java",
            "BlockRealMatrixTest.java",
            "SumTest.java",
            "SecondMomentTest.java",
            "VarianceTest.java",
            "DescriptiveStatisticsTest.java",
            "BigFractionTest.java",
            "MeanTest.java",
            "MathUtilsTest.java",
            "ResizableDoubleArrayTest.java",
            "SparseRealMatrixTest.java",
            "ThirdMomentTest.java",
            "PercentileTest.java",
            "GeometricMeanTest.java",
            "PolynomialFunctionTest.java",
            "ComplexTest.java",
            "KurtosisTest.java",
            "SemiVarianceTest.java",
            "FirstMomentTest.java",
            "SkewnessTest.java",
            "ProductTest.java",
            "MinTest.java",
            "FourthMomentTest.java",
            "SynchronizedSummaryStatisticsTest.java"
        ]
    },
    "commons-math_692c542": {
        "bug_id": "commons-math_692c542",
        "commit": "https://github.com/apache/commons-math/commit/692c542c5e3038ec9edc5a05ca6ea7c4d2f070ff",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/commons-math/blob/692c542c5e3038ec9edc5a05ca6ea7c4d2f070ff/src/main/java/org/apache/commons/math3/util/Incrementor.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math3/util/Incrementor.java?ref=692c542c5e3038ec9edc5a05ca6ea7c4d2f070ff",
                "deletions": 13,
                "filename": "src/main/java/org/apache/commons/math3/util/Incrementor.java",
                "patch": "@@ -58,30 +58,30 @@ public Incrementor() {\n      * @param max Maximal count.\n      */\n     public Incrementor(int max) {\n-        this(max, null);\n+        this(max,\n+             new MaxCountExceededCallback() {\n+                 /** {@inheritDoc} */\n+                 public void trigger(int max) {\n+                     throw new MaxCountExceededException(max);\n+                 }\n+             });\n     }\n \n     /**\n      * Defines a maximal count and a callback method to be triggered at\n      * counter exhaustion.\n      *\n      * @param max Maximal count.\n-     * @param cb Function to be called when the maximal count has been reached\n-     * (can be {@code null}).\n+     * @param cb Function to be called when the maximal count has been reached.\n+     * @throws NullPointerException if {@code cb} is {@code null}\n      */\n     public Incrementor(int max,\n                        MaxCountExceededCallback cb) {\n-        maximalCount = max;\n-        if (cb != null) {\n-            maxCountCallback = cb;\n-        } else {\n-            maxCountCallback = new MaxCountExceededCallback() {\n-                /** {@inheritDoc} */\n-                public void trigger(int max) {\n-                    throw new MaxCountExceededException(max);\n-                }\n-            };\n+        if (cb == null){\n+            throw new NullPointerException();\n         }\n+        maximalCount = max;\n+        maxCountCallback = cb;\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/commons-math/raw/692c542c5e3038ec9edc5a05ca6ea7c4d2f070ff/src/main/java/org/apache/commons/math3/util/Incrementor.java",
                "sha": "f3c5227a0f73b484296058fcf9e0b2f55346959d",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/commons-math/blob/692c542c5e3038ec9edc5a05ca6ea7c4d2f070ff/src/main/java/org/apache/commons/math3/util/IterationManager.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math3/util/IterationManager.java?ref=692c542c5e3038ec9edc5a05ca6ea7c4d2f070ff",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/math3/util/IterationManager.java",
                "patch": "@@ -43,18 +43,23 @@\n      * @param maxIterations the maximum number of iterations\n      */\n     public IterationManager(final int maxIterations) {\n-        this(maxIterations, null);\n+        this.iterations = new Incrementor(maxIterations);\n+        this.listeners = new CopyOnWriteArrayList<IterationListener>();\n     }\n \n     /**\n      * Creates a new instance of this class.\n      *\n      * @param maxIterations the maximum number of iterations\n      * @param callBack the function to be called when the maximum number of\n-     * iterations has been reached (can be {@code null})\n+     * iterations has been reached\n+     * @throws NullPointerException if {@code callBack} is {@code null}\n      */\n     public IterationManager(final int maxIterations,\n                             final Incrementor.MaxCountExceededCallback callBack) {\n+        if (callBack == null) {\n+            throw new NullPointerException();\n+        }\n         this.iterations = new Incrementor(maxIterations, callBack);\n         this.listeners = new CopyOnWriteArrayList<IterationListener>();\n     }",
                "raw_url": "https://github.com/apache/commons-math/raw/692c542c5e3038ec9edc5a05ca6ea7c4d2f070ff/src/main/java/org/apache/commons/math3/util/IterationManager.java",
                "sha": "7ba99c209aa216d7df206206be76dd29e5dafe0c",
                "status": "modified"
            }
        ],
        "message": "Reverted changes committed in r1353140. In o.a.c.m3.util.Incrementor, a NullPointerException is now thrown if the call-back function specified at construction is null. o.a.c.m3.util.IterationManager was updated accordingly (used to explicitely use the constructor with null argument).\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1353386 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-math/commit/2881c10609f395c127571cfff329e36f1b0813ef",
        "patched_files": [
            "Incrementor.java"
        ],
        "repo": "commons-math",
        "unit_tests": [
            "IncrementorTest.java"
        ]
    },
    "commons-math_7774fb6": {
        "bug_id": "commons-math_7774fb6",
        "commit": "https://github.com/apache/commons-math/commit/7774fb6ffb0290c4d5f4910309200f681624eee9",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/commons-math/blob/7774fb6ffb0290c4d5f4910309200f681624eee9/src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java?ref=7774fb6ffb0290c4d5f4910309200f681624eee9",
                "deletions": 18,
                "filename": "src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java",
                "patch": "@@ -16,6 +16,8 @@\n  */\n package org.apache.commons.math.stat.regression;\n \n+import junit.framework.Assert;\n+\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.stat.correlation.PearsonsCorrelation;\n import org.apache.commons.math.TestUtils;\n@@ -178,9 +180,7 @@ public void testRegressAirlineConstantExternal() {\n         instance.addObservations(x, y);\n         try {\n             RegressionResults result = instance.regress();\n-            if (result == null) {\n-                fail(\"The test case is a prototype.\");\n-            }\n+            Assert.assertNotNull(\"The test case is a prototype.\", result);\n             TestUtils.assertEquals(\n                     new double[]{9.5169, 0.8827, 0.4540, -1.6275},\n                     result.getParameterEstimates(), 1e-4);\n@@ -212,9 +212,7 @@ public void testRegressAirlineConstantInternal() {\n         instance.addObservations(x, y);\n         try {\n             RegressionResults result = instance.regress();\n-            if (result == null) {\n-                fail(\"The test case is a prototype.\");\n-            }\n+            Assert.assertNotNull(\"The test case is a prototype.\", result);\n             TestUtils.assertEquals(\n                     new double[]{9.5169, 0.8827, 0.4540, -1.6275},\n                     result.getParameterEstimates(), 1e-4);\n@@ -783,15 +781,11 @@ public void testOneRedundantColumn() {\n \n         instance.addObservations(x, y);\n         RegressionResults result = instance.regress();\n-        if (result == null) {\n-            fail(\"Could not estimate initial regression\");\n-        }\n+        Assert.assertNotNull(\"Could not estimate initial regression\", result);\n \n         instance2.addObservations(x2, y);\n         RegressionResults resultRedundant = instance2.regress();\n-        if (resultRedundant == null) {\n-            fail(\"Could not estimate redundant regression\");\n-        }\n+        Assert.assertNotNull(\"Could not estimate redundant regression\", resultRedundant);\n         double[] beta = result.getParameterEstimates();\n         double[] betar = resultRedundant.getParameterEstimates();\n         double[] se = result.getStdErrorOfEstimates();\n@@ -849,15 +843,11 @@ public void testThreeRedundantColumn() {\n \n         instance.addObservations(x, y);\n         RegressionResults result = instance.regress();\n-        if (result == null) {\n-            fail(\"Could not estimate initial regression\");\n-        }\n+        Assert.assertNotNull(\"Could not estimate initial regression\", result);\n \n         instance2.addObservations(x2, y);\n         RegressionResults resultRedundant = instance2.regress();\n-        if (resultRedundant == null) {\n-            fail(\"Could not estimate redundant regression\");\n-        }\n+        Assert.assertNotNull(\"Could not estimate redundant regression\", resultRedundant);\n         double[] beta = result.getParameterEstimates();\n         double[] betar = resultRedundant.getParameterEstimates();\n         double[] se = result.getStdErrorOfEstimates();",
                "raw_url": "https://github.com/apache/commons-math/raw/7774fb6ffb0290c4d5f4910309200f681624eee9/src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java",
                "sha": "7c9bcafc2994f582853adc71c21c3ba51ac61b3d",
                "status": "modified"
            }
        ],
        "message": "Use asserNotNull(var) instead of if (var != null) and avoid subsequent NPE warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1200365 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-math/commit/f2c22d1d36466b962dcf7da98b7a8a4d9a4c1ef1",
        "patched_files": [
            "MillerUpdatingRegression.java"
        ],
        "repo": "commons-math",
        "unit_tests": [
            "MillerUpdatingRegressionTest.java"
        ]
    },
    "commons-math_9fb08c2": {
        "bug_id": "commons-math_9fb08c2",
        "commit": "https://github.com/apache/commons-math/commit/9fb08c2f9e208acff6c8e3d3b8ee98850922e996",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/commons-math/blob/9fb08c2f9e208acff6c8e3d3b8ee98850922e996/src/main/java/org/apache/commons/math3/util/MathArrays.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math3/util/MathArrays.java?ref=9fb08c2f9e208acff6c8e3d3b8ee98850922e996",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/math3/util/MathArrays.java",
                "patch": "@@ -677,13 +677,15 @@ public static void sortInPlace(double[] x,\n                                    double[] ... yList)\n         throws NullArgumentException,\n                DimensionMismatchException {\n-        final int yListLen = yList.length;\n-        final int len = x.length;\n \n         // Consistency checks.\n         if (x == null) {\n             throw new NullArgumentException();\n         }\n+\n+        final int yListLen = yList.length;\n+        final int len = x.length;\n+\n         for (int j = 0; j < yListLen; j++) {\n             final double[] y = yList[j];\n             if (y == null) {",
                "raw_url": "https://github.com/apache/commons-math/raw/9fb08c2f9e208acff6c8e3d3b8ee98850922e996/src/main/java/org/apache/commons/math3/util/MathArrays.java",
                "sha": "1aa56cc7d3613e922842b5867cb9ac1152887cc4",
                "status": "modified"
            }
        ],
        "message": "Do sanity checks first to prevent NullPointerException.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1499076 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-math/commit/9d5ce0045369cd4dcccb66b005c184124f222e32",
        "patched_files": [
            "MathArrays.java"
        ],
        "repo": "commons-math",
        "unit_tests": [
            "MathArraysTest.java"
        ]
    },
    "commons-math_a197ba8": {
        "bug_id": "commons-math_a197ba8",
        "commit": "https://github.com/apache/commons-math/commit/a197ba858ecf364f9ddf2fe56f3611cf97b4c3b1",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/commons-math/blob/a197ba858ecf364f9ddf2fe56f3611cf97b4c3b1/src/changes/changes.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/changes/changes.xml?ref=a197ba858ecf364f9ddf2fe56f3611cf97b4c3b1",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -73,6 +73,10 @@ Users are encouraged to upgrade to this version as this release not\n   2. A few methods in the FastMath class are in fact slower that their\n   counterpart in either Math or StrictMath (cf. MATH-740 and MATH-901).\n \">\n+      <action dev=\"luc\" type=\"fix\" issue=\"MATH-1123\" due-to=\"Aur\u00e9lien Labrosse\">\n+        Fixed NullPointerException when chopping-off a sub-hyperplane\n+        that is exactly at a region boundary.\n+      </action>\n       <action dev=\"erans\" type=\"fix\" issue=\"MATH-1121\" due-to=\"Ajo Fod\">\n         \"BrentOptimizer\": increment base class iteration counter.\n       </action>",
                "raw_url": "https://github.com/apache/commons-math/raw/a197ba858ecf364f9ddf2fe56f3611cf97b4c3b1/src/changes/changes.xml",
                "sha": "a6a5cda52efb6173323e650f4524c2fe14f3a4fd",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/commons-math/blob/a197ba858ecf364f9ddf2fe56f3611cf97b4c3b1/src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java?ref=a197ba858ecf364f9ddf2fe56f3611cf97b4c3b1",
                "deletions": 1,
                "filename": "src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java",
                "patch": "@@ -294,7 +294,7 @@ public void visit(final BSPTreeVisitor<S> visitor) {\n      */\n     private SubHyperplane<S> fitToCell(final SubHyperplane<S> sub) {\n         SubHyperplane<S> s = sub;\n-        for (BSPTree<S> tree = this; tree.parent != null; tree = tree.parent) {\n+        for (BSPTree<S> tree = this; tree.parent != null && s != null; tree = tree.parent) {\n             if (tree == tree.parent.plus) {\n                 s = s.split(tree.parent.cut.getHyperplane()).getPlus();\n             } else {",
                "raw_url": "https://github.com/apache/commons-math/raw/a197ba858ecf364f9ddf2fe56f3611cf97b4c3b1/src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java",
                "sha": "5aec175fcc858ea2c7d99c6dabd78b7b9e20f6c0",
                "status": "modified"
            },
            {
                "additions": 97,
                "blob_url": "https://github.com/apache/commons-math/blob/a197ba858ecf364f9ddf2fe56f3611cf97b4c3b1/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/hull/ConvexHullGenerator2DAbstractTest.java",
                "changes": 97,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/hull/ConvexHullGenerator2DAbstractTest.java?ref=a197ba858ecf364f9ddf2fe56f3611cf97b4c3b1",
                "deletions": 0,
                "filename": "src/test/java/org/apache/commons/math3/geometry/euclidean/twod/hull/ConvexHullGenerator2DAbstractTest.java",
                "patch": "@@ -203,6 +203,103 @@ public void testClosePoints() {\n         checkConvexHull(points, hull);\n     }\n \n+    @Test\n+    public void testIssue1123() {\n+\n+        List<Vector2D> points = new ArrayList<Vector2D>();\n+\n+        int[][] data = new int[][] { { -11, -1 }, { -11, 0 }, { -11, 1 },\n+                { -10, -3 }, { -10, -2 }, { -10, -1 }, { -10, 0 }, { -10, 1 },\n+                { -10, 2 }, { -10, 3 }, { -9, -4 }, { -9, -3 }, { -9, -2 },\n+                { -9, -1 }, { -9, 0 }, { -9, 1 }, { -9, 2 }, { -9, 3 },\n+                { -9, 4 }, { -8, -5 }, { -8, -4 }, { -8, -3 }, { -8, -2 },\n+                { -8, -1 }, { -8, 0 }, { -8, 1 }, { -8, 2 }, { -8, 3 },\n+                { -8, 4 }, { -8, 5 }, { -7, -6 }, { -7, -5 }, { -7, -4 },\n+                { -7, -3 }, { -7, -2 }, { -7, -1 }, { -7, 0 }, { -7, 1 },\n+                { -7, 2 }, { -7, 3 }, { -7, 4 }, { -7, 5 }, { -7, 6 },\n+                { -6, -7 }, { -6, -6 }, { -6, -5 }, { -6, -4 }, { -6, -3 },\n+                { -6, -2 }, { -6, -1 }, { -6, 0 }, { -6, 1 }, { -6, 2 },\n+                { -6, 3 }, { -6, 4 }, { -6, 5 }, { -6, 6 }, { -6, 7 },\n+                { -5, -7 }, { -5, -6 }, { -5, -5 }, { -5, -4 }, { -5, -3 },\n+                { -5, -2 }, { -5, 4 }, { -5, 5 }, { -5, 6 }, { -5, 7 },\n+                { -4, -7 }, { -4, -6 }, { -4, -5 }, { -4, -4 }, { -4, -3 },\n+                { -4, -2 }, { -4, 4 }, { -4, 5 }, { -4, 6 }, { -4, 7 },\n+                { -3, -8 }, { -3, -7 }, { -3, -6 }, { -3, -5 }, { -3, -4 },\n+                { -3, -3 }, { -3, -2 }, { -3, 4 }, { -3, 5 }, { -3, 6 },\n+                { -3, 7 }, { -3, 8 }, { -2, -8 }, { -2, -7 }, { -2, -6 },\n+                { -2, -5 }, { -2, -4 }, { -2, -3 }, { -2, -2 }, { -2, 4 },\n+                { -2, 5 }, { -2, 6 }, { -2, 7 }, { -2, 8 }, { -1, -8 },\n+                { -1, -7 }, { -1, -6 }, { -1, -5 }, { -1, -4 }, { -1, -3 },\n+                { -1, -2 }, { -1, 4 }, { -1, 5 }, { -1, 6 }, { -1, 7 },\n+                { -1, 8 }, { 0, -8 }, { 0, -7 }, { 0, -6 }, { 0, -5 },\n+                { 0, -4 }, { 0, -3 }, { 0, -2 }, { 0, 4 }, { 0, 5 }, { 0, 6 },\n+                { 0, 7 }, { 0, 8 }, { 1, -8 }, { 1, -7 }, { 1, -6 }, { 1, -5 },\n+                { 1, -4 }, { 1, -3 }, { 1, -2 }, { 1, -1 }, { 1, 0 }, { 1, 1 },\n+                { 1, 2 }, { 1, 3 }, { 1, 4 }, { 1, 5 }, { 1, 6 }, { 1, 7 },\n+                { 1, 8 }, { 2, -8 }, { 2, -7 }, { 2, -6 }, { 2, -5 },\n+                { 2, -4 }, { 2, -3 }, { 2, -2 }, { 2, -1 }, { 2, 0 }, { 2, 1 },\n+                { 2, 2 }, { 2, 3 }, { 2, 4 }, { 2, 5 }, { 2, 6 }, { 2, 7 },\n+                { 2, 8 }, { 3, -8 }, { 3, -7 }, { 3, -6 }, { 3, -5 },\n+                { 3, -4 }, { 3, -3 }, { 3, -2 }, { 3, -1 }, { 3, 0 }, { 3, 1 },\n+                { 3, 2 }, { 3, 3 }, { 3, 4 }, { 3, 5 }, { 3, 6 }, { 3, 7 },\n+                { 3, 8 }, { 4, -7 }, { 4, -6 }, { 4, -5 }, { 4, -4 },\n+                { 4, -3 }, { 4, -2 }, { 4, -1 }, { 4, 0 }, { 4, 1 }, { 4, 2 },\n+                { 4, 3 }, { 4, 4 }, { 4, 5 }, { 4, 6 }, { 4, 7 }, { 5, -7 },\n+                { 5, -6 }, { 5, -5 }, { 5, -4 }, { 5, -3 }, { 5, -2 },\n+                { 5, -1 }, { 5, 0 }, { 5, 1 }, { 5, 2 }, { 5, 3 }, { 5, 4 },\n+                { 5, 5 }, { 5, 6 }, { 5, 7 }, { 6, -7 }, { 6, -6 }, { 6, -5 },\n+                { 6, -4 }, { 6, -3 }, { 6, -2 }, { 6, -1 }, { 6, 0 }, { 6, 1 },\n+                { 6, 2 }, { 6, 3 }, { 6, 4 }, { 6, 5 }, { 6, 6 }, { 6, 7 },\n+                { 7, -6 }, { 7, -5 }, { 7, -4 }, { 7, -3 }, { 7, -2 },\n+                { 7, -1 }, { 7, 0 }, { 7, 1 }, { 7, 2 }, { 7, 3 }, { 7, 4 },\n+                { 7, 5 }, { 7, 6 }, { 8, -5 }, { 8, -4 }, { 8, -3 }, { 8, -2 },\n+                { 8, -1 }, { 8, 0 }, { 8, 1 }, { 8, 2 }, { 8, 3 }, { 8, 4 },\n+                { 8, 5 }, { 9, -4 }, { 9, -3 }, { 9, -2 }, { 9, -1 }, { 9, 0 },\n+                { 9, 1 }, { 9, 2 }, { 9, 3 }, { 9, 4 }, { 10, -3 }, { 10, -2 },\n+                { 10, -1 }, { 10, 0 }, { 10, 1 }, { 10, 2 }, { 10, 3 },\n+                { 11, -1 }, { 11, 0 }, { 11, 1 } };\n+\n+        for (int[] line : data) {\n+            points.add(new Vector2D(line[0], line[1]));\n+        }\n+\n+        Vector2D[] referenceHull = new Vector2D[] { \n+            new Vector2D(-11.0, -1.0),\n+            new Vector2D(-10.0, -3.0),\n+            new Vector2D( -6.0, -7.0),\n+            new Vector2D( -3.0, -8.0),\n+            new Vector2D(  3.0, -8.0),\n+            new Vector2D(  6.0, -7.0),\n+            new Vector2D( 10.0, -3.0),\n+            new Vector2D( 11.0, -1.0),\n+            new Vector2D( 11.0,  1.0),\n+            new Vector2D( 10.0,  3.0),\n+            new Vector2D(  6.0,  7.0),\n+            new Vector2D(  3.0,  8.0),\n+            new Vector2D( -3.0,  8.0),\n+            new Vector2D( -6.0,  7.0),\n+            new Vector2D(-10.0,  3.0),\n+            new Vector2D(-11.0,  1.0),\n+        };\n+\n+        ConvexHullGenerator2D generator = new MonotoneChain(true, 1e-6);\n+        ConvexHull2D convHull = generator.generate(points);\n+        Region<Euclidean2D> hullRegion = convHull.createRegion();\n+\n+        Assert.assertEquals(274.0, hullRegion.getSize(), 1.0e-12);\n+        double perimeter = 0;\n+        for (int i = 0; i < referenceHull.length; ++i) {\n+            perimeter += Vector2D.distance(referenceHull[i],\n+                                           referenceHull[(i + 1) % referenceHull.length]);\n+        }\n+        Assert.assertEquals(perimeter, hullRegion.getBoundarySize(), 1.0e-12);\n+\n+        for (int i = 0; i < referenceHull.length; ++i) {\n+            Assert.assertEquals(Location.BOUNDARY, hullRegion.checkPoint(referenceHull[i]));\n+        }\n+\n+    }\n+\n     // ------------------------------------------------------------------------------\n     \n     protected final List<Vector2D> createRandomPoints(int size) {",
                "raw_url": "https://github.com/apache/commons-math/raw/a197ba858ecf364f9ddf2fe56f3611cf97b4c3b1/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/hull/ConvexHullGenerator2DAbstractTest.java",
                "sha": "670033cdf24b94aebfb12616490c5cdf8e1b6bdd",
                "status": "modified"
            }
        ],
        "message": "Fixed NullPointerException in BSPTree.\n\nThe error occurred when chopping-off a sub-hyperplane\nthat was exactly at a region boundary.\n\nThanks to Aur\u00e9lien Labrosse for the fix.\n\nJIRA: MATH-1123\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1595924 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-math/commit/e1db2379ff3a09614f7287354406cb984f87f43d",
        "patched_files": [
            "changes.xml",
            "BSPTree.java"
        ],
        "repo": "commons-math",
        "unit_tests": [
            "ConvexHullGenerator2DAbstractTest.java"
        ]
    },
    "commons-math_a4e4583": {
        "bug_id": "commons-math_a4e4583",
        "commit": "https://github.com/apache/commons-math/commit/a4e4583de20f845d58be996f97767f94d2950fd8",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-math/blob/a4e4583de20f845d58be996f97767f94d2950fd8/src/main/java/org/apache/commons/math3/util/Incrementor.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math3/util/Incrementor.java?ref=a4e4583de20f845d58be996f97767f94d2950fd8",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/math3/util/Incrementor.java",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.commons.math3.util;\n \n import org.apache.commons.math3.exception.MaxCountExceededException;\n+import org.apache.commons.math3.exception.NullArgumentException;\n \n /**\n  * Utility that increments a counter until a maximum is reached, at\n@@ -73,12 +74,12 @@ public void trigger(int max) {\n      *\n      * @param max Maximal count.\n      * @param cb Function to be called when the maximal count has been reached.\n-     * @throws NullPointerException if {@code cb} is {@code null}\n+     * @throws NullArgumentException if {@code cb} is {@code null}\n      */\n     public Incrementor(int max,\n                        MaxCountExceededCallback cb) {\n         if (cb == null){\n-            throw new NullPointerException();\n+            throw new NullArgumentException();\n         }\n         maximalCount = max;\n         maxCountCallback = cb;",
                "raw_url": "https://github.com/apache/commons-math/raw/a4e4583de20f845d58be996f97767f94d2950fd8/src/main/java/org/apache/commons/math3/util/Incrementor.java",
                "sha": "30f7a8ac7fec907e3a57e782d5e0bd0629e8fdc2",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-math/blob/a4e4583de20f845d58be996f97767f94d2950fd8/src/main/java/org/apache/commons/math3/util/IterationManager.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math3/util/IterationManager.java?ref=a4e4583de20f845d58be996f97767f94d2950fd8",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/math3/util/IterationManager.java",
                "patch": "@@ -20,6 +20,7 @@\n import java.util.concurrent.CopyOnWriteArrayList;\n \n import org.apache.commons.math3.exception.MaxCountExceededException;\n+import org.apache.commons.math3.exception.NullArgumentException;\n \n /**\n  * This abstract class provides a general framework for managing iterative\n@@ -53,12 +54,12 @@ public IterationManager(final int maxIterations) {\n      * @param maxIterations the maximum number of iterations\n      * @param callBack the function to be called when the maximum number of\n      * iterations has been reached\n-     * @throws NullPointerException if {@code callBack} is {@code null}\n+     * @throws NullArgumentException if {@code callBack} is {@code null}\n      */\n     public IterationManager(final int maxIterations,\n                             final Incrementor.MaxCountExceededCallback callBack) {\n         if (callBack == null) {\n-            throw new NullPointerException();\n+            throw new NullArgumentException();\n         }\n         this.iterations = new Incrementor(maxIterations, callBack);\n         this.listeners = new CopyOnWriteArrayList<IterationListener>();",
                "raw_url": "https://github.com/apache/commons-math/raw/a4e4583de20f845d58be996f97767f94d2950fd8/src/main/java/org/apache/commons/math3/util/IterationManager.java",
                "sha": "fd20282a0b4cfc7b42f1c9d10a8796508464d213",
                "status": "modified"
            }
        ],
        "message": "Replaced NullPointerException with NullArgumentException.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1353451 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-math/commit/3e8cbfa5c99b8abf82f472f9a63c9b7a51abed1d",
        "patched_files": [
            "Incrementor.java"
        ],
        "repo": "commons-math",
        "unit_tests": [
            "IncrementorTest.java"
        ]
    },
    "commons-math_d270055": {
        "bug_id": "commons-math_d270055",
        "commit": "https://github.com/apache/commons-math/commit/d270055e874148a2742604be36ab977eec030fba",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-math/blob/d270055e874148a2742604be36ab977eec030fba/src/changes/changes.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/changes/changes.xml?ref=d270055e874148a2742604be36ab977eec030fba",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -51,6 +51,9 @@ If the output is not quite correct, check for invisible trailing spaces!\n   </properties>\n   <body>\n     <release version=\"x.y\" date=\"TBD\" description=\"TBD\">\n+      <action dev=\"luc\" type=\"fix\" issue=\"MATH-988\" due-to=\"Andreas Huber\">\n+        Fixed NullPointerException in 2D and 3D sub-line intersections.\n+      </action>\n       <action dev=\"psteitz\" type=\"update\" issue=\"MATH-987\" due-to=\"Ajo Fod\">\n         Added append method to SimpleRegression, making this class map/reducible.\n       </action>",
                "raw_url": "https://github.com/apache/commons-math/raw/d270055e874148a2742604be36ab977eec030fba/src/changes/changes.xml",
                "sha": "1b0155445a2a4d0357fd44db430e01e3061ce429",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-math/blob/d270055e874148a2742604be36ab977eec030fba/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java?ref=d270055e874148a2742604be36ab977eec030fba",
                "deletions": 0,
                "filename": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java",
                "patch": "@@ -111,6 +111,9 @@ public Vector3D intersection(final SubLine subLine, final boolean includeEndPoin\n \n         // compute the intersection on infinite line\n         Vector3D v1D = line.intersection(subLine.line);\n+        if (v1D == null) {\n+            return null;\n+        }\n \n         // check location of point with respect to first sub-line\n         Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));",
                "raw_url": "https://github.com/apache/commons-math/raw/d270055e874148a2742604be36ab977eec030fba/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java",
                "sha": "aad7b65a54be93af25a11f91a1a3db704efcdf26",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-math/blob/d270055e874148a2742604be36ab977eec030fba/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java?ref=d270055e874148a2742604be36ab977eec030fba",
                "deletions": 0,
                "filename": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java",
                "patch": "@@ -115,6 +115,9 @@ public Vector2D intersection(final SubLine subLine, final boolean includeEndPoin\n \n         // compute the intersection on infinite line\n         Vector2D v2D = line1.intersection(line2);\n+        if (v2D == null) {\n+            return null;\n+        }\n \n         // check location of point with respect to first sub-line\n         Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));",
                "raw_url": "https://github.com/apache/commons-math/raw/d270055e874148a2742604be36ab977eec030fba/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java",
                "sha": "ea9e96a49043cc3009ccb021c1cca528acfb8018",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/commons-math/blob/d270055e874148a2742604be36ab977eec030fba/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java?ref=d270055e874148a2742604be36ab977eec030fba",
                "deletions": 0,
                "filename": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java",
                "patch": "@@ -152,5 +152,13 @@ public void testIntersectionOutsideOutside() throws MathIllegalArgumentException\n         Assert.assertNull(sub1.intersection(sub2, true));\n         Assert.assertNull(sub1.intersection(sub2, false));\n     }\n+    \n+    @Test\n+    public void testIntersectionNotIntersecting() throws MathIllegalArgumentException {\n+        SubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(1.5, 1, 1));\n+        SubLine sub2 = new SubLine(new Vector3D(2, 3, 0), new Vector3D(2, 3, 0.5));\n+        Assert.assertNull(sub1.intersection(sub2, true));\n+        Assert.assertNull(sub1.intersection(sub2, false));\n+    }\n \n }",
                "raw_url": "https://github.com/apache/commons-math/raw/d270055e874148a2742604be36ab977eec030fba/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java",
                "sha": "b941ffae715a16e617acb92dd7ce9819f3ab1e3d",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/commons-math/blob/d270055e874148a2742604be36ab977eec030fba/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SubLineTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SubLineTest.java?ref=d270055e874148a2742604be36ab977eec030fba",
                "deletions": 0,
                "filename": "src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SubLineTest.java",
                "patch": "@@ -144,4 +144,12 @@ public void testIntersectionOutsideOutside() {\n         Assert.assertNull(sub1.intersection(sub2, false));\n     }\n \n+    @Test\n+    public void testIntersectionParallel() {\n+        final SubLine sub1 = new SubLine(new Vector2D(0, 1), new Vector2D(0, 2));\n+        final SubLine sub2 = new SubLine(new Vector2D(66, 3), new Vector2D(66, 4));\n+        Assert.assertNull(sub1.intersection(sub2, true));\n+        Assert.assertNull(sub1.intersection(sub2, false));\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/commons-math/raw/d270055e874148a2742604be36ab977eec030fba/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SubLineTest.java",
                "sha": "7a9defe56499b2e1f2b7ea6854ab6aee2f134c08",
                "status": "modified"
            }
        ],
        "message": "Fixed NullPointerException in 2D and 3D sub-line intersections.\n\nPatch contributed by Andeas Huber.\n\nJIRA: MATH-988\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1488866 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-math/commit/0ee817712b9e8330fdfd6985752aa8f1b25ba9d9",
        "patched_files": [
            "changes.xml",
            "SubLine.java"
        ],
        "repo": "commons-math",
        "unit_tests": [
            "SubLineTest.java"
        ]
    },
    "commons-math_d6a8ed5": {
        "bug_id": "commons-math_d6a8ed5",
        "commit": "https://github.com/apache/commons-math/commit/d6a8ed57b8e1fdeaa3b6bb4360b6de0d66dc6450",
        "file": [
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/commons-math/blob/d6a8ed57b8e1fdeaa3b6bb4360b6de0d66dc6450/src/test/java/org/apache/commons/math4/ode/nonstiff/AbstractRungeKuttaFieldStepInterpolatorTest.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math4/ode/nonstiff/AbstractRungeKuttaFieldStepInterpolatorTest.java?ref=d6a8ed57b8e1fdeaa3b6bb4360b6de0d66dc6450",
                "deletions": 5,
                "filename": "src/test/java/org/apache/commons/math4/ode/nonstiff/AbstractRungeKuttaFieldStepInterpolatorTest.java",
                "patch": "@@ -22,7 +22,9 @@\n \n import org.apache.commons.math4.Field;\n import org.apache.commons.math4.RealFieldElement;\n+import org.apache.commons.math4.ode.AbstractIntegrator;\n import org.apache.commons.math4.ode.EquationsMapper;\n+import org.apache.commons.math4.ode.ExpandableStatefulODE;\n import org.apache.commons.math4.ode.FieldEquationsMapper;\n import org.apache.commons.math4.ode.FieldExpandableODE;\n import org.apache.commons.math4.ode.FieldFirstOrderDifferentialEquations;\n@@ -70,7 +72,7 @@\n \n         RungeKuttaFieldStepInterpolator<T> interpolator = setUpInterpolator(field,\n                                                                             new SinCos<>(field),\n-                                                                            0.0, new double[] { 0.0, 1.0 }, 0.125);\n+                                                                            0.0, new double[] { 0.0, 1.0 }, 0.0125);\n \n         int n = 100;\n         double maxErrorSin = 0;\n@@ -95,9 +97,10 @@\n                                                                                      double epsilonSin, double epsilonCos,\n                                                                                      double epsilonSinDot, double epsilonCosDot) {\n \n+        FieldFirstOrderDifferentialEquations<T> eqn = new SinCos<>(field);\n         RungeKuttaFieldStepInterpolator<T> fieldInterpolator =\n-                        setUpInterpolator(field, new SinCos<>(field), 0.0, new double[] { 0.0, 1.0 }, 0.125);\n-        RungeKuttaStepInterpolator regularInterpolator = convertInterpolator(fieldInterpolator);\n+                        setUpInterpolator(field, eqn, 0.0, new double[] { 0.0, 1.0 }, 0.125);\n+        RungeKuttaStepInterpolator regularInterpolator = convertInterpolator(fieldInterpolator, eqn);\n \n         int n = 100;\n         double maxErrorSin    = 0;\n@@ -185,7 +188,8 @@\n     }\n \n     private <T extends RealFieldElement<T>>\n-    RungeKuttaStepInterpolator convertInterpolator(final RungeKuttaFieldStepInterpolator<T> fieldInterpolator) {\n+    RungeKuttaStepInterpolator convertInterpolator(final RungeKuttaFieldStepInterpolator<T> fieldInterpolator,\n+                                                   final FieldFirstOrderDifferentialEquations<T> eqn) {\n \n         RungeKuttaStepInterpolator regularInterpolator = null;\n         try {\n@@ -225,7 +229,25 @@ RungeKuttaStepInterpolator convertInterpolator(final RungeKuttaFieldStepInterpol\n                 secondaryMappers[i] = new EquationsMapper(start[i + 1], start[i + 2]);\n             }\n \n-            regularInterpolator.reinitialize(null, y, yDotArray,\n+            AbstractIntegrator dummyIntegrator = new AbstractIntegrator(\"dummy\") {\n+                @Override\n+                public void integrate(ExpandableStatefulODE equations, double t) {\n+                    Assert.fail(\"this method should not be called\");\n+                }\n+                @Override\n+                public void computeDerivatives(final double t, final double[] y, final double[] yDot) {\n+                    T fieldT = fieldInterpolator.getField().getZero().add(t);\n+                    T[] fieldY = MathArrays.buildArray(fieldInterpolator.getField(), y.length);\n+                    for (int i = 0; i < y.length; ++i) {\n+                        fieldY[i] = fieldInterpolator.getField().getZero().add(y[i]);\n+                    }\n+                    T[] fieldYDot = eqn.computeDerivatives(fieldT, fieldY);\n+                    for (int i = 0; i < yDot.length; ++i) {\n+                        yDot[i] = fieldYDot[i].getReal();\n+                    }\n+                }\n+            };\n+            regularInterpolator.reinitialize(dummyIntegrator, y, yDotArray,\n                                              fieldInterpolator.isForward(),\n                                              primaryMapper, secondaryMappers);\n ",
                "raw_url": "https://github.com/apache/commons-math/raw/d6a8ed57b8e1fdeaa3b6bb4360b6de0d66dc6450/src/test/java/org/apache/commons/math4/ode/nonstiff/AbstractRungeKuttaFieldStepInterpolatorTest.java",
                "sha": "64e91a227362cac2977ab059cfde987f9924305d",
                "status": "modified"
            }
        ],
        "message": "Prevent NullPointerException in tests.",
        "parent": "https://github.com/apache/commons-math/commit/a2718fc3a9bc54d5932214b07514446a2fe4c5bf",
        "patched_files": [],
        "repo": "commons-math",
        "unit_tests": [
            "AbstractRungeKuttaFieldStepInterpolatorTest.java"
        ]
    },
    "commons-math_e79fcea": {
        "bug_id": "commons-math_e79fcea",
        "commit": "https://github.com/apache/commons-math/commit/e79fcea6cfa46ae58d80e38bd56bfba87080e17d",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/commons-math/blob/e79fcea6cfa46ae58d80e38bd56bfba87080e17d/src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java?ref=e79fcea6cfa46ae58d80e38bd56bfba87080e17d",
                "deletions": 1,
                "filename": "src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.commons.math.stat;\n \n import java.io.BufferedReader;\n+import java.io.InputStream;\n import java.io.InputStreamReader;\n \n \n@@ -112,10 +113,12 @@ private void loadStats(String resource, Object u) throws Exception {\n         mean = Double.NaN;\n         std = Double.NaN;\n \n+        InputStream resourceAsStream = CertifiedDataTest.class.getResourceAsStream(resource);\n+        Assert.assertNotNull(\"Could not find resource \"+resource,resourceAsStream);\n         BufferedReader in =\n             new BufferedReader(\n                     new InputStreamReader(\n-                            CertifiedDataTest.class.getResourceAsStream(resource)));\n+                            resourceAsStream));\n \n         String line = null;\n \n@@ -144,6 +147,7 @@ private void loadStats(String resource, Object u) throws Exception {\n             line = in.readLine();\n         }\n \n+        resourceAsStream.close();\n         in.close();\n     }\n }",
                "raw_url": "https://github.com/apache/commons-math/raw/e79fcea6cfa46ae58d80e38bd56bfba87080e17d/src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java",
                "sha": "6991c9030e30b1a6e7e860f0548422a122bfaa9b",
                "status": "modified"
            }
        ],
        "message": "Report missing resource rather than failing with NPE if not fount\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1164986 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-math/commit/7dabaab1130b8ca475f7e1e5ab8fa5f155081004",
        "patched_files": [],
        "repo": "commons-math",
        "unit_tests": [
            "CertifiedDataTest.java"
        ]
    },
    "commons-math_ef9b639": {
        "bug_id": "commons-math_ef9b639",
        "commit": "https://github.com/apache/commons-math/commit/ef9b639afc3dd8d1c35eab23cc9cb6b3a6a2c858",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/commons-math/blob/ef9b639afc3dd8d1c35eab23cc9cb6b3a6a2c858/src/main/java/org/apache/commons/math/util/MathUtils.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/util/MathUtils.java?ref=ef9b639afc3dd8d1c35eab23cc9cb6b3a6a2c858",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/math/util/MathUtils.java",
                "patch": "@@ -1621,9 +1621,9 @@ public static double distance(double[] p1, double[] p2) {\n      * @return the L<sub>2</sub> distance between the two points\n      */\n     public static double distance(int[] p1, int[] p2) {\n-      int sum = 0;\n+      double sum = 0;\n       for (int i = 0; i < p1.length; i++) {\n-          final int dp = p1[i] - p2[i];\n+          final double dp = p1[i] - p2[i];\n           sum += dp * dp;\n       }\n       return Math.sqrt(sum);",
                "raw_url": "https://github.com/apache/commons-math/raw/ef9b639afc3dd8d1c35eab23cc9cb6b3a6a2c858/src/main/java/org/apache/commons/math/util/MathUtils.java",
                "sha": "ad77a56eb45c0a38a9fbd72e45e14941eb1d5983",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/commons-math/blob/ef9b639afc3dd8d1c35eab23cc9cb6b3a6a2c858/src/site/xdoc/changes.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/site/xdoc/changes.xml?ref=ef9b639afc3dd8d1c35eab23cc9cb6b3a6a2c858",
                "deletions": 0,
                "filename": "src/site/xdoc/changes.xml",
                "patch": "@@ -39,6 +39,11 @@ The <action> type attribute can be add,update,fix,remove.\n   </properties>\n   <body>\n     <release version=\"2.1\" date=\"TBD\" description=\"TBD\">\n+      <action dev=\"psteitz\" type=\"fix\" issue=\"MATH-305\" due-to=\"Erik van Ingen\">\n+        Fixed an overflow error in MathUtils.distance that was causing KMeansPlusPlusClusterer\n+        to fail with a NullPointerException when component distances between points\n+        exceeded Integer.MAXVALUE.\n+      </action>\n       <action dev=\"psteitz\" type=\"update\" issue=\"MATH-315\" due-to=\"Mikkel Meyer Andersen\">\n         Added generationsEvolved property to GeneticAlgorithm to track the number of generations\n         evolved by the evolve() method before reaching the StoppingCondition.",
                "raw_url": "https://github.com/apache/commons-math/raw/ef9b639afc3dd8d1c35eab23cc9cb6b3a6a2c858/src/site/xdoc/changes.xml",
                "sha": "bd1f4d344d89299e7c7e580ceea0f1a5d6005243",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/commons-math/blob/ef9b639afc3dd8d1c35eab23cc9cb6b3a6a2c858/src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java?ref=ef9b639afc3dd8d1c35eab23cc9cb6b3a6a2c858",
                "deletions": 0,
                "filename": "src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java",
                "patch": "@@ -93,5 +93,27 @@ public void dimension2() {\n         assertTrue(cluster3Found);\n \n     }\n+    \n+    /**\n+     * JIRA: MATH-305\n+     * \n+     * Two points, one cluster, one iteration\n+     */\n+    @Test\n+    public void testPerformClusterAnalysisDegenerate() {\n+        KMeansPlusPlusClusterer<EuclideanIntegerPoint> transformer = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(\n+                new Random(1746432956321l));\n+        EuclideanIntegerPoint[] points = new EuclideanIntegerPoint[] {\n+                new EuclideanIntegerPoint(new int[] { 1959, 325100 }),\n+                new EuclideanIntegerPoint(new int[] { 1960, 373200 }), };\n+        List<Cluster<EuclideanIntegerPoint>> clusters = transformer.cluster(Arrays.asList(points), 1, 1);\n+        assertEquals(1, clusters.size());\n+        assertEquals(2, (clusters.get(0).getPoints().size()));\n+        EuclideanIntegerPoint pt1 = new EuclideanIntegerPoint(new int[] { 1959, 325100 });\n+        EuclideanIntegerPoint pt2 = new EuclideanIntegerPoint(new int[] { 1960, 373200 });\n+        assertTrue(clusters.get(0).getPoints().contains(pt1));\n+        assertTrue(clusters.get(0).getPoints().contains(pt2));\n+\n+    } \n \n }",
                "raw_url": "https://github.com/apache/commons-math/raw/ef9b639afc3dd8d1c35eab23cc9cb6b3a6a2c858/src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java",
                "sha": "dfe89adefb79c83f68820bf84ac84c17f996a3f7",
                "status": "modified"
            }
        ],
        "message": "Fixed an overflow error in MathUtils.distance that was causing KMeansPlusPlusClusterer to fail with a NullPointerException when\ncomponent distances between points exceeded Integer.MAXVALUE.\nJIRA: MATH-305\nReported by Erik van Ingen\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@885027 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-math/commit/9e6576e7cd4ad17185c5102fd3c6f9f9a6941ed4",
        "patched_files": [
            "changes.xml",
            "MathUtils.java",
            "KMeansPlusPlusClusterer.java"
        ],
        "repo": "commons-math",
        "unit_tests": [
            "MathUtilsTest.java",
            "KMeansPlusPlusClustererTest.java"
        ]
    },
    "commons-math_f2c22d1": {
        "bug_id": "commons-math_f2c22d1",
        "commit": "https://github.com/apache/commons-math/commit/f2c22d1d36466b962dcf7da98b7a8a4d9a4c1ef1",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-math/blob/f2c22d1d36466b962dcf7da98b7a8a4d9a4c1ef1/src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java?ref=f2c22d1d36466b962dcf7da98b7a8a4d9a4c1ef1",
                "deletions": 3,
                "filename": "src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java",
                "patch": "@@ -122,7 +122,7 @@ public void testRegressIfaceMethod(){\n \n         //should not be null\n         final RegressionResults fullReg = iface.regress( );\n-        Assert.assertTrue(fullReg != null);\n+        Assert.assertNotNull(fullReg);\n         Assert.assertEquals(\"intercept\", regression.getIntercept(), fullReg.getParameterEstimate(0), 1.0e-16);\n         Assert.assertEquals(\"intercept std err\",regression.getInterceptStdErr(), fullReg.getStdErrorOfEstimate(0),1.0E-16);\n         Assert.assertEquals(\"slope\", regression.getSlope(), fullReg.getParameterEstimate(1), 1.0e-16);\n@@ -135,7 +135,7 @@ public void testRegressIfaceMethod(){\n \n \n         final RegressionResults noInt   = iface.regress( new int[]{1} );\n-        Assert.assertTrue(noInt != null);\n+        Assert.assertNotNull(noInt);\n         Assert.assertEquals(\"slope\", regressionNoint.getSlope(), noInt.getParameterEstimate(0), 1.0e-12);\n         Assert.assertEquals(\"slope std err\",regressionNoint.getSlopeStdErr(), noInt.getStdErrorOfEstimate(0),1.0E-16);\n         Assert.assertEquals(\"number of observations\",regressionNoint.getN(), noInt.getN());\n@@ -145,7 +145,7 @@ public void testRegressIfaceMethod(){\n         Assert.assertEquals(\"SSE\", regressionNoint.getSumSquaredErrors(), noInt.getErrorSumSquares() ,1.0E-16);\n \n         final RegressionResults onlyInt = iface.regress( new int[]{0} );\n-        Assert.assertTrue( onlyInt != null );\n+        Assert.assertNotNull(onlyInt);\n         Assert.assertEquals(\"slope\", regressionIntOnly.getSlope(), onlyInt.getParameterEstimate(0), 1.0e-12);\n         Assert.assertEquals(\"slope std err\",regressionIntOnly.getSlopeStdErr(), onlyInt.getStdErrorOfEstimate(0),1.0E-12);\n         Assert.assertEquals(\"number of observations\",regressionIntOnly.getN(), onlyInt.getN());",
                "raw_url": "https://github.com/apache/commons-math/raw/f2c22d1d36466b962dcf7da98b7a8a4d9a4c1ef1/src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java",
                "sha": "c94b0ebacfb2efb2519f9fab805d809e262b97ad",
                "status": "modified"
            }
        ],
        "message": "Use asserNotNull(var) instead of assertTrue(var != null) and avoid subsequent NPE warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1200359 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-math/commit/416084f96449417cb4e5c4bc6ec0679a50a2af00",
        "patched_files": [
            "SimpleRegression.java"
        ],
        "repo": "commons-math",
        "unit_tests": [
            "SimpleRegressionTest.java"
        ]
    },
    "commons-math_f4a4464": {
        "bug_id": "commons-math_f4a4464",
        "commit": "https://github.com/apache/commons-math/commit/f4a4464beea8118386b84bace4b08e6c16443dab",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/commons-math/blob/f4a4464beea8118386b84bace4b08e6c16443dab/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java?ref=f4a4464beea8118386b84bace4b08e6c16443dab",
                "deletions": 1,
                "filename": "src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java",
                "patch": "@@ -69,7 +69,7 @@ public double solve(double min, double max)\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+        return solve(f, min, max);\n     }\n \n     /** {@inheritDoc} */",
                "raw_url": "https://github.com/apache/commons-math/raw/f4a4464beea8118386b84bace4b08e6c16443dab/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java",
                "sha": "180caefbc16cc5378a9c511eae9361dabef283da",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-math/blob/f4a4464beea8118386b84bace4b08e6c16443dab/src/site/xdoc/changes.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/site/xdoc/changes.xml?ref=f4a4464beea8118386b84bace4b08e6c16443dab",
                "deletions": 0,
                "filename": "src/site/xdoc/changes.xml",
                "patch": "@@ -52,6 +52,9 @@ The <action> type attribute can be add,update,fix,remove.\n     If the output is not quite correct, check for invisible trailing spaces!\n      -->\n     <release version=\"2.2\" date=\"TBD\" description=\"TBD\">\n+      <action dev=\"luc\" type=\"fix\" issue=\"MATH-369\" due-to=\"Sasun Pundev\">\n+        Fix NullPointerException in BisectionSolver.solve(f, min, max, initial)\n+      </action>\n     </release>\n     <release version=\"2.1\" date=\"2010-04-02\" description=\"\n This is primarily a maintenance release, but it also includes new features and enhancements.",
                "raw_url": "https://github.com/apache/commons-math/raw/f4a4464beea8118386b84bace4b08e6c16443dab/src/site/xdoc/changes.xml",
                "sha": "8452074ffffcede458300c8cd617ed6218285a7d",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/commons-math/blob/f4a4464beea8118386b84bace4b08e6c16443dab/src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java?ref=f4a4464beea8118386b84bace4b08e6c16443dab",
                "deletions": 0,
                "filename": "src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java",
                "patch": "@@ -95,6 +95,12 @@ public void testQuinticZero() throws MathException {\n         assertTrue(solver.getIterationCount() > 0);\n     }\n \n+    public void testMath369() throws Exception {\n+        UnivariateRealFunction f = new SinFunction();\n+        UnivariateRealSolver solver = new BisectionSolver();\n+        assertEquals(Math.PI, solver.solve(f, 3.0, 3.2, 3.1), solver.getAbsoluteAccuracy());\n+    }\n+\n     /**\n      *\n      */",
                "raw_url": "https://github.com/apache/commons-math/raw/f4a4464beea8118386b84bace4b08e6c16443dab/src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java",
                "sha": "a13ad2efad1c91272d7442a86985c753c3c49300",
                "status": "modified"
            }
        ],
        "message": "Fix NullPointerException in BisectionSolver.solve(f, min, max, initial)\nJIRA: MATH-369\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@940565 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-math/commit/58f8b21d3587e1419f0a421731280f84a8c0afe4",
        "patched_files": [
            "changes.xml",
            "BisectionSolver.java"
        ],
        "repo": "commons-math",
        "unit_tests": [
            "BisectionSolverTest.java"
        ]
    },
    "commons-math_f6fd043": {
        "bug_id": "commons-math_f6fd043",
        "commit": "https://github.com/apache/commons-math/commit/f6fd0430728b75fce8afc3d369c49a57ac84015a",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/commons-math/blob/f6fd0430728b75fce8afc3d369c49a57ac84015a/src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java?ref=f6fd0430728b75fce8afc3d369c49a57ac84015a",
                "deletions": 5,
                "filename": "src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java",
                "patch": "@@ -72,11 +72,13 @@ public String getLocalizedMessage() {\n      */\n     private List<Object> flatten(Object[] array) {\n         final List<Object> list = new ArrayList<Object>();\n-        for (Object o : array) {\n-            if (o instanceof Object[]) {\n-                list.addAll(flatten((Object[]) o));\n-            } else {\n-                list.add(o);\n+        if (array != null) {\n+            for (Object o : array) {\n+                if (o instanceof Object[]) {\n+                    list.addAll(flatten((Object[]) o));\n+                } else {\n+                    list.add(o);\n+                }\n             }\n         }\n         return list;",
                "raw_url": "https://github.com/apache/commons-math/raw/f6fd0430728b75fce8afc3d369c49a57ac84015a/src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java",
                "sha": "5fb3a0d9c4919d591781dc3968e04f43bfb3d266",
                "status": "modified"
            },
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/commons-math/blob/f6fd0430728b75fce8afc3d369c49a57ac84015a/src/test/java/org/apache/commons/math/exception/DimensionMismatchExceptionTest.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math/exception/DimensionMismatchExceptionTest.java?ref=f6fd0430728b75fce8afc3d369c49a57ac84015a",
                "deletions": 0,
                "filename": "src/test/java/org/apache/commons/math/exception/DimensionMismatchExceptionTest.java",
                "patch": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test for {@link DimensionMismatchException}.\n+ * \n+ * @version $Revision$ $Date$ \n+ */\n+public class DimensionMismatchExceptionTest {\n+    @Test\n+    public void testAccessors() {\n+        final DimensionMismatchException e = new DimensionMismatchException(1, 2);\n+        Assert.assertEquals(1, e.getArgument());\n+        Assert.assertEquals(2, e.getDimension());\n+    }\n+}",
                "raw_url": "https://github.com/apache/commons-math/raw/f6fd0430728b75fce8afc3d369c49a57ac84015a/src/test/java/org/apache/commons/math/exception/DimensionMismatchExceptionTest.java",
                "sha": "5ba51f9312652b7fa1e60cfcca8402cca6f1d163",
                "status": "added"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/commons-math/blob/f6fd0430728b75fce8afc3d369c49a57ac84015a/src/test/java/org/apache/commons/math/exception/NotPositiveExceptionTest.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math/exception/NotPositiveExceptionTest.java?ref=f6fd0430728b75fce8afc3d369c49a57ac84015a",
                "deletions": 0,
                "filename": "src/test/java/org/apache/commons/math/exception/NotPositiveExceptionTest.java",
                "patch": "@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test for {@link NotPositiveException}.\n+ * \n+ * @version $Revision$ $Date$ \n+ */\n+public class NotPositiveExceptionTest {\n+    @Test\n+    public void testAccessors() {\n+        final NotPositiveException e = new NotPositiveException(-1);\n+        Assert.assertEquals(-1, e.getArgument());\n+    }\n+}",
                "raw_url": "https://github.com/apache/commons-math/raw/f6fd0430728b75fce8afc3d369c49a57ac84015a/src/test/java/org/apache/commons/math/exception/NotPositiveExceptionTest.java",
                "sha": "21bb4dc70eab7be1c7837a46a67ce8e20502cb3c",
                "status": "added"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/commons-math/blob/f6fd0430728b75fce8afc3d369c49a57ac84015a/src/test/java/org/apache/commons/math/exception/NotStrictlyPositiveExceptionTest.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math/exception/NotStrictlyPositiveExceptionTest.java?ref=f6fd0430728b75fce8afc3d369c49a57ac84015a",
                "deletions": 0,
                "filename": "src/test/java/org/apache/commons/math/exception/NotStrictlyPositiveExceptionTest.java",
                "patch": "@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test for {@link NotStrictlyPositiveException}.\n+ * \n+ * @version $Revision$ $Date$ \n+ */\n+public class NotStrictlyPositiveExceptionTest {\n+    @Test\n+    public void testAccessors() {\n+        final NotStrictlyPositiveException e = new NotStrictlyPositiveException(0);\n+        Assert.assertEquals(0, e.getArgument());\n+    }\n+}",
                "raw_url": "https://github.com/apache/commons-math/raw/f6fd0430728b75fce8afc3d369c49a57ac84015a/src/test/java/org/apache/commons/math/exception/NotStrictlyPositiveExceptionTest.java",
                "sha": "f0c8c03ef37d43c59c130e043f8f354854916d3a",
                "status": "added"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/commons-math/blob/f6fd0430728b75fce8afc3d369c49a57ac84015a/src/test/java/org/apache/commons/math/exception/OutOfRangeExceptionTest.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math/exception/OutOfRangeExceptionTest.java?ref=f6fd0430728b75fce8afc3d369c49a57ac84015a",
                "deletions": 0,
                "filename": "src/test/java/org/apache/commons/math/exception/OutOfRangeExceptionTest.java",
                "patch": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test for {@link OutOfRangeException}.\n+ * \n+ * @version $Revision$ $Date$ \n+ */\n+public class OutOfRangeExceptionTest {\n+    @Test\n+    public void testAccessors() {\n+        final OutOfRangeException e = new OutOfRangeException(-1, 0, 2);\n+        Assert.assertEquals(-1, e.getArgument());\n+        Assert.assertEquals(0, e.getLo());\n+        Assert.assertEquals(2, e.getHi());\n+    }\n+}",
                "raw_url": "https://github.com/apache/commons-math/raw/f6fd0430728b75fce8afc3d369c49a57ac84015a/src/test/java/org/apache/commons/math/exception/OutOfRangeExceptionTest.java",
                "sha": "5d6153c935935b0bda0cc23b4a2860ff8033828f",
                "status": "added"
            }
        ],
        "message": "MATH-361.\nAdded a check to avoid triggering a \"NullPointerException\" if the argument\nlist is \"null\".\nAdded unit tests.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@958551 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-math/commit/4102ba5dfb2bd58d49c4a60687c65bd2919af597",
        "patched_files": [
            "NotPositiveException.java",
            "DimensionMismatchException.java",
            "MathIllegalArgumentException.java",
            "OutOfRangeException.java",
            "NotStrictlyPositiveException.java"
        ],
        "repo": "commons-math",
        "unit_tests": [
            "NotPositiveExceptionTest.java",
            "DimensionMismatchExceptionTest.java",
            "NotStrictlyPositiveExceptionTest.java",
            "OutOfRangeExceptionTest.java"
        ]
    }
}