{
    "attic-wink_3657272": {
        "bug_id": "attic-wink_3657272",
        "commit": "https://github.com/apache/attic-wink/commit/365727280242a164181be69b5cdba548dfcba3f7",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/attic-wink/blob/365727280242a164181be69b5cdba548dfcba3f7/wink-common/src/main/java/org/apache/wink/common/internal/registry/metadata/ProviderMetadataCollector.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/attic-wink/contents/wink-common/src/main/java/org/apache/wink/common/internal/registry/metadata/ProviderMetadataCollector.java?ref=365727280242a164181be69b5cdba548dfcba3f7",
                "deletions": 2,
                "filename": "wink-common/src/main/java/org/apache/wink/common/internal/registry/metadata/ProviderMetadataCollector.java",
                "patch": "@@ -21,6 +21,7 @@\n \n import java.lang.reflect.AccessibleObject;\n import java.lang.reflect.Member;\n+import java.lang.reflect.Modifier;\n import java.lang.reflect.Type;\n \n import javax.ws.rs.core.Context;\n@@ -52,16 +53,21 @@ public static boolean isProvider(Class<?> cls) {\n             return false;\n         }\n \n+        if (Modifier.isInterface(cls.getModifiers()) || Modifier.isAbstract(cls.getModifiers())) {\n+            logger.warn(Messages.getMessage(\"providerIsInterfaceOrAbstract\", cls));\n+            return false;\n+        }\n+\n         if (cls.getAnnotation(Provider.class) != null) {\n             return true;\n         }\n \n         Class<?> declaringClass = cls;\n \n-        while (!declaringClass.equals(Object.class)) {\n+        while (declaringClass != null && !declaringClass.equals(Object.class)) {\n             // try a superclass\n             Class<?> superclass = declaringClass.getSuperclass();\n-            if (superclass.getAnnotation(Provider.class) != null) {\n+            if (superclass != null && superclass.getAnnotation(Provider.class) != null) {\n                 // issue warning\n                 logger.warn(Messages.getMessage(\"providerShouldBeAnnotatedDirectly\", cls));\n                 return true;",
                "raw_url": "https://github.com/apache/attic-wink/raw/365727280242a164181be69b5cdba548dfcba3f7/wink-common/src/main/java/org/apache/wink/common/internal/registry/metadata/ProviderMetadataCollector.java",
                "sha": "5f25e975324c1f96ae9ab32292e799133571660b",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/attic-wink/blob/365727280242a164181be69b5cdba548dfcba3f7/wink-common/src/main/resources/org/apache/wink/common/internal/i18n/resource.properties",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/attic-wink/contents/wink-common/src/main/resources/org/apache/wink/common/internal/i18n/resource.properties?ref=365727280242a164181be69b5cdba548dfcba3f7",
                "deletions": 0,
                "filename": "wink-common/src/main/resources/org/apache/wink/common/internal/i18n/resource.properties",
                "patch": "@@ -226,3 +226,4 @@ missingClientAuthenticationCredentialForUser=Missing client authentication crede\n serviceFailedToAuthenticateUser=Service failed to authenticate user: {0}\n providerShouldBeAnnotatedDirectly=@javax.ws.rs.ext.Provider was found on a superclass or interface on class {0}.  Annotate @javax.ws.rs.ext.Provider on the provider class directly to ensure portability between environments.\n rootResourceShouldBeAnnotatedDirectly=@javax.ws.rs.Path was found on a superclass or interface on class {0}.  Annotate @javax.ws.rs.Path on the root resource class directly to ensure portability between environments.\n+providerIsInterfaceOrAbstract=@javax.ws.rs.ext.Provider found on interface or abstract class {0} and is being ignored. Annotate @javax.ws.rs.ext.Provider on the provider implementation or base class directly and return that in your javax.ws.rs.core.Application subclass.",
                "raw_url": "https://github.com/apache/attic-wink/raw/365727280242a164181be69b5cdba548dfcba3f7/wink-common/src/main/resources/org/apache/wink/common/internal/i18n/resource.properties",
                "sha": "7ac86eec8690877c70b5b4e83c88d5d2a7a1e5ce",
                "status": "modified"
            },
            {
                "additions": 63,
                "blob_url": "https://github.com/apache/attic-wink/blob/365727280242a164181be69b5cdba548dfcba3f7/wink-common/src/test/java/org/apache/wink/common/internal/registry/metadata/ProviderMetadataCollectorTest.java",
                "changes": 63,
                "contents_url": "https://api.github.com/repos/apache/attic-wink/contents/wink-common/src/test/java/org/apache/wink/common/internal/registry/metadata/ProviderMetadataCollectorTest.java?ref=365727280242a164181be69b5cdba548dfcba3f7",
                "deletions": 0,
                "filename": "wink-common/src/test/java/org/apache/wink/common/internal/registry/metadata/ProviderMetadataCollectorTest.java",
                "patch": "@@ -0,0 +1,63 @@\n+package org.apache.wink.common.internal.registry.metadata;\r\n+\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.Produces;\r\n+import javax.ws.rs.ext.Provider;\r\n+\r\n+import junit.framework.TestCase;\r\n+\r\n+public class ProviderMetadataCollectorTest extends TestCase {\r\n+\r\n+    @Path(\"/\")\r\n+    public interface Interface {\r\n+\r\n+        @GET\r\n+        @Produces(\"text/plain\")\r\n+        public String method();\r\n+\r\n+    }\r\n+    \r\n+    @Path(\"/\")\r\n+    public class Class {\r\n+        \r\n+        @GET\r\n+        @Produces(\"text/plain\")\r\n+        public String method() {\r\n+            return \"method\";\r\n+        }\r\n+    }\r\n+    \r\n+    @Provider\r\n+    public interface ProviderInterface {\r\n+        \r\n+    }\r\n+    \r\n+    public class ProviderInterfaceImpl implements ProviderInterface {\r\n+        \r\n+    }\r\n+    \r\n+    @Provider\r\n+    public abstract class AbstractProvider {\r\n+        \r\n+    }\r\n+    \r\n+    public class ProviderBaseClass extends AbstractProvider {\r\n+        \r\n+    }\r\n+    \r\n+    @Provider\r\n+    public static class ProviderStandalone {\r\n+        \r\n+    }\r\n+    \r\n+    public void testIsProvider() {\r\n+        assertFalse(ProviderMetadataCollector.isProvider(Interface.class));\r\n+        assertFalse(ProviderMetadataCollector.isProvider(Class.class));\r\n+        assertFalse(ProviderMetadataCollector.isProvider(ProviderInterface.class));\r\n+        assertTrue(ProviderMetadataCollector.isProvider(ProviderInterfaceImpl.class));\r\n+        assertFalse(ProviderMetadataCollector.isProvider(AbstractProvider.class));\r\n+        assertTrue(ProviderMetadataCollector.isProvider(ProviderBaseClass.class));\r\n+        assertTrue(ProviderMetadataCollector.isProvider(ProviderStandalone.class));\r\n+    }\r\n+}\r",
                "raw_url": "https://github.com/apache/attic-wink/raw/365727280242a164181be69b5cdba548dfcba3f7/wink-common/src/test/java/org/apache/wink/common/internal/registry/metadata/ProviderMetadataCollectorTest.java",
                "sha": "8416184f62f8502d345b53ab8aa77cd6e3489798",
                "status": "added"
            }
        ],
        "message": "[WINK-275] Ingore interfaces and abstract classes with Provider annotation. Handle interface implemntations without NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wink/trunk@938078 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/attic-wink/commit/50033cd5dcfdfefa77f903d46674664325fcb421",
        "patched_files": [
            "resource.java",
            "ProviderMetadataCollector.java"
        ],
        "repo": "attic-wink",
        "unit_tests": [
            "ProviderMetadataCollectorTest.java"
        ]
    },
    "attic-wink_a9aae29": {
        "bug_id": "attic-wink_a9aae29",
        "commit": "https://github.com/apache/attic-wink/commit/a9aae29d28395152e2f25a65b69bde923db7643f",
        "file": [
            {
                "additions": 45,
                "blob_url": "https://github.com/apache/attic-wink/blob/a9aae29d28395152e2f25a65b69bde923db7643f/wink-common/src/main/java/org/apache/wink/common/internal/providers/entity/SourceProvider.java",
                "changes": 70,
                "contents_url": "https://api.github.com/repos/apache/attic-wink/contents/wink-common/src/main/java/org/apache/wink/common/internal/providers/entity/SourceProvider.java?ref=a9aae29d28395152e2f25a65b69bde923db7643f",
                "deletions": 25,
                "filename": "wink-common/src/main/java/org/apache/wink/common/internal/providers/entity/SourceProvider.java",
                "patch": "@@ -137,20 +137,18 @@ public boolean isReadable(Class<?> type,\n             return (DOMSource.class == type && super.isReadable(mediaType));\n         }\n         \n-        private void setupDocumentBuilderToFilterDTD(DocumentBuilder dbuilder) {\n-            /*\n-             * You might think you could just do this to prevent entity expansion:\n-             *    documentBuilderFactory.setExpandEntityReferences(false);\n-             * In fact, you should not do that, because it will just increase the size\n-             * of your DOMSource.  We want to actively reject XML when a DTD is present, so...\n-             */\n-            dbuilder.setEntityResolver(new EntityResolver() {\n-                public InputSource resolveEntity(String name, String baseURI)\n-                throws SAXException, IOException {\n-                    // we don't support entity resolution here\n-                    throw new SAXParseException(Messages.getMessage(\"entityRefsNotSupported\"), null);  //$NON-NLS-1$\n+        private DocumentBuilder getDocumentBuilder() throws ParserConfigurationException {\n+            RuntimeContext runtimeContext = RuntimeContextTLS.getRuntimeContext();\n+            WinkConfiguration winkConfig = runtimeContext.getAttribute(WinkConfiguration.class);\n+            if (winkConfig != null) {\n+                Properties props = winkConfig.getProperties();\n+                if (props != null) {\n+                    // use valueOf method to require the word \"true\"\n+                    if (Boolean.valueOf(props.getProperty(\"wink.supportDTDEntityExpansion\"))) { //$NON-NLS-1$\n+                        return documentBuilderFactory.newDocumentBuilder();\n+                    }\n                 }\n-            });\n+            }\n             try {\n                 // important: keep this order\n                 documentBuilderFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n@@ -160,10 +158,26 @@ public InputSource resolveEntity(String name, String baseURI)\n             }\n             try {\n                 // workaround for JDK5 bug that causes NPE in checking done due to above FEATURE_SECURE_PROCESSING\n-                documentBuilderFactory.setFeature(\"http://apache.org/xml/features/dom/defer-node-expansion\", false); //$NON-NLS-1$\n+                // For Apache Xerces-J:  https://issues.apache.org/jira/browse/XERCESJ-977\n+                documentBuilderFactory.setFeature(\"http://apache.org/xml/features/dom/defer-node-expansion\", Boolean.FALSE); //$NON-NLS-1$\n             } catch (ParserConfigurationException e) {\n                 // possible if not on apache parser?  ignore...\n             }\n+            DocumentBuilder dbuilder = documentBuilderFactory.newDocumentBuilder();\n+            /*\n+             * You might think you could just do this to prevent entity expansion:\n+             *    documentBuilderFactory.setExpandEntityReferences(false);\n+             * In fact, you should not do that, because it will just increase the size\n+             * of your DOMSource.  We want to actively reject XML when a DTD is present, so...\n+             */\n+            dbuilder.setEntityResolver(new EntityResolver() {\n+                public InputSource resolveEntity(String name, String baseURI)\n+                throws SAXException, IOException {\n+                    // we don't support entity resolution here\n+                    throw new SAXParseException(Messages.getMessage(\"entityRefsNotSupported\"), null);  //$NON-NLS-1$\n+                }\n+            });\n+            return dbuilder;\n         }\n \n         public DOMSource readFrom(Class<DOMSource> type,\n@@ -174,19 +188,25 @@ public DOMSource readFrom(Class<DOMSource> type,\n                                   InputStream entityStream) throws IOException,\n             WebApplicationException {\n             try {\n-                DocumentBuilder dbuilder = documentBuilderFactory.newDocumentBuilder();\n-                RuntimeContext runtimeContext = RuntimeContextTLS.getRuntimeContext();\n-                WinkConfiguration winkConfig = runtimeContext.getAttribute(WinkConfiguration.class);\n-                if (winkConfig != null) {\n-                    Properties props = winkConfig.getProperties();\n-                    if (props != null) {\n-                        // use valueOf method to require the word \"true\"\n-                        if (!Boolean.valueOf(props.getProperty(\"wink.supportDTDEntityExpansion\"))) { //$NON-NLS-1$\n-                            setupDocumentBuilderToFilterDTD(dbuilder);\n-                        }\n+                DocumentBuilder dbuilder = getDocumentBuilder();  //documentBuilderFactory.newDocumentBuilder();\n+                return new DOMSource(dbuilder.parse(entityStream));\n+            } catch (NullPointerException npe) {\n+                // For Sun JDK5, they will never fix this problem.  See http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6181020\n+                // Let's be as safe as possible, and check that all the conditions that indicate we're avoiding DTD expansion attack\n+                // are present.  We'll need the catch the NPE when we do the parse, inspect the stack, and fail gracefully.  Ugly\n+                // hack, but it works.  (Ideally, we'd also inspect the entityStream to ensure we're definitely doing DTD expansion\n+                // when we get this NPE, but we cannot reliably reset the stream and re-read it due to possibly getting a stream\n+                // that does not support .reset().)\n+                StackTraceElement[] stackTraceElement = npe.getStackTrace();\n+                for(int i = 0; i < stackTraceElement.length; i++) {\n+                    if(stackTraceElement[i].getClassName().equals(\"com.sun.org.apache.xerces.internal.dom.DeferredDocumentImpl\") //$NON-NLS-1$\n+                            && (stackTraceElement[i].getMethodName().equals(\"setChunkIndex\"))) { //$NON-NLS-1$\n+                        // then it's really Sun JDK5, and as far as we can tell, it's related to DTD expansion attack, and we should fail gracefully\n+                        logger.error(Messages.getMessage(\"entityRefsNotSupportedSunJDK5\"), npe); //$NON-NLS-1$\n+                        throw new WebApplicationException(Response.Status.BAD_REQUEST);\n                     }\n                 }\n-                return new DOMSource(dbuilder.parse(entityStream));\n+                throw npe;\n             } catch (SAXException e) {\n                 logger.error(Messages.getMessage(\"saxParseException\", type.getName()), e); //$NON-NLS-1$\n                 throw new WebApplicationException(e, Response.Status.BAD_REQUEST);",
                "raw_url": "https://github.com/apache/attic-wink/raw/a9aae29d28395152e2f25a65b69bde923db7643f/wink-common/src/main/java/org/apache/wink/common/internal/providers/entity/SourceProvider.java",
                "sha": "0f82bda36a14627224f1feaef5ede5a0e06d94fc",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/attic-wink/blob/a9aae29d28395152e2f25a65b69bde923db7643f/wink-common/src/main/resources/org/apache/wink/common/internal/i18n/resource.properties",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/attic-wink/contents/wink-common/src/main/resources/org/apache/wink/common/internal/i18n/resource.properties?ref=a9aae29d28395152e2f25a65b69bde923db7643f",
                "deletions": 0,
                "filename": "wink-common/src/main/resources/org/apache/wink/common/internal/i18n/resource.properties",
                "patch": "@@ -209,6 +209,7 @@ providerShouldBeAnnotatedDirectly=The @javax.ws.rs.ext.Provider annotation was f\n rootResourceShouldBeAnnotatedDirectly=The @javax.ws.rs.Path annotation was found on a superclass or interface on the {0} class.  Annotate @javax.ws.rs.Path on the root resource class directly to ensure portability between environments.\n providerIsInterfaceOrAbstract=A @javax.ws.rs.ext.Provider annotation was found on {0} which is an interface or an abstract class and is being ignored. Annotate @javax.ws.rs.ext.Provider on the provider implementation or base class directly and return that in your javax.ws.rs.core.Application subclass.\n entityRefsNotSupported=Entity references are not supported in XML documents due to possible security vulnerabilities.\n+entityRefsNotSupportedSunJDK5=Entity references are not supported in XML documents due to possible security vulnerabilities.  Sun JDK5 does not support the necessary feature to prevent a NullPointerException.  See http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6181020\n saxParseException=The system cannot parse the XML content into a {0} instance.  Verify that the XML content is valid.\n saxParserConfigurationException=The system cannot configure the SAX parser with the given configuration parameter.\n badXMLReaderInitialStart=The XMLStreamReader instance has already been partially processed.",
                "raw_url": "https://github.com/apache/attic-wink/raw/a9aae29d28395152e2f25a65b69bde923db7643f/wink-common/src/main/resources/org/apache/wink/common/internal/i18n/resource.properties",
                "sha": "6c2475c91ed7a9a4034e2acf20f9cb514cc998d9",
                "status": "modified"
            }
        ],
        "message": "WINK-298 followup: fix hudson build break, handle Sun JDK5 NPE bug in DocumentBuilder.parse when DTD is present\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wink/trunk@960998 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/attic-wink/commit/da602013d4639d855d57abc924f97a5074b5e1fc",
        "patched_files": [
            "SourceProvider.java"
        ],
        "repo": "attic-wink",
        "unit_tests": [
            "SourceProviderTest.java"
        ]
    },
    "attic-wink_aa1cbe6": {
        "bug_id": "attic-wink_aa1cbe6",
        "commit": "https://github.com/apache/attic-wink/commit/aa1cbe61a6f3b71f617468aed2e2ac2ba96a1825",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/attic-wink/blob/aa1cbe61a6f3b71f617468aed2e2ac2ba96a1825/wink-common/src/main/java/org/apache/wink/common/model/multipart/InPart.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/attic-wink/contents/wink-common/src/main/java/org/apache/wink/common/model/multipart/InPart.java?ref=aa1cbe61a6f3b71f617468aed2e2ac2ba96a1825",
                "deletions": 1,
                "filename": "wink-common/src/main/java/org/apache/wink/common/model/multipart/InPart.java",
                "patch": "@@ -99,7 +99,11 @@ protected void setHeaders(MultivaluedMap<String, String> headers) {\n \n \n     public String getContentType() {\n-        return getHeaders().getFirst(HttpHeaders.CONTENT_TYPE);\n+        String res = getHeaders().getFirst(HttpHeaders.CONTENT_TYPE);\n+        if(res == null)\n+        \tres = MediaType.TEXT_PLAIN;\n+        return res;\n+        \n     }\n \n     public Set<String> getHeadersName() {",
                "raw_url": "https://github.com/apache/attic-wink/raw/aa1cbe61a6f3b71f617468aed2e2ac2ba96a1825/wink-common/src/main/java/org/apache/wink/common/model/multipart/InPart.java",
                "sha": "aa4463f2650028131cff2b2521fd1cb8a88f2b8f",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/attic-wink/blob/aa1cbe61a6f3b71f617468aed2e2ac2ba96a1825/wink-common/src/main/java/org/apache/wink/common/model/multipart/OutPart.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/attic-wink/contents/wink-common/src/main/java/org/apache/wink/common/model/multipart/OutPart.java?ref=aa1cbe61a6f3b71f617468aed2e2ac2ba96a1825",
                "deletions": 1,
                "filename": "wink-common/src/main/java/org/apache/wink/common/model/multipart/OutPart.java",
                "patch": "@@ -65,7 +65,11 @@ public void setContentType(String contentType) {\n     }\n \n     public String getContentType() {\n-        return getHeaders().getFirst(HttpHeaders.CONTENT_TYPE);\n+    \tString res = getHeaders().getFirst(HttpHeaders.CONTENT_TYPE);\n+        if(res == null)\n+        \tres = MediaType.TEXT_PLAIN;\n+        return res;\n+        //return getHeaders().getFirst(HttpHeaders.CONTENT_TYPE);\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/attic-wink/raw/aa1cbe61a6f3b71f617468aed2e2ac2ba96a1825/wink-common/src/main/java/org/apache/wink/common/model/multipart/OutPart.java",
                "sha": "73cc7b5e0fe16bcd9eafa4abf542daf51d968188",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/attic-wink/blob/aa1cbe61a6f3b71f617468aed2e2ac2ba96a1825/wink-common/src/test/java/org/apache/wink/common/internal/providers/multipart/TestMultiPartProvider.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/attic-wink/contents/wink-common/src/test/java/org/apache/wink/common/internal/providers/multipart/TestMultiPartProvider.java?ref=aa1cbe61a6f3b71f617468aed2e2ac2ba96a1825",
                "deletions": 2,
                "filename": "wink-common/src/test/java/org/apache/wink/common/internal/providers/multipart/TestMultiPartProvider.java",
                "patch": "@@ -50,14 +50,22 @@\n import org.apache.wink.common.model.multipart.OutPart;\n \n public class TestMultiPartProvider extends TestCase {\n+\t public void testBufferdMultiPartNoContentType() throws IOException {\n+\t\t runTestBufferdMultiPart(null);\n+\t\t \n+\t }\n+\t public void testBufferdMultiPart() throws IOException {\n+\t\t runTestBufferdMultiPart(MediaType.TEXT_PLAIN);\n+\t\t \n+\t }\n \n     /**\n      * create A BufferdMultipart ,serialized it, un serilized it using providers\n      * and check consistency\n      * \n      * @throws IOException\n      */\n-    public void testBufferdMultiPart() throws IOException {\n+    public void runTestBufferdMultiPart(String contentType) throws IOException {\n         String bounary = \"1267h27\";\n         String body = \"This is the Body String\";\n         BufferedOutMultiPart bomp = new BufferedOutMultiPart();\n@@ -67,7 +75,8 @@ public void testBufferdMultiPart() throws IOException {\n \n         op.addHeader(\"nAme\", \"value\");\n         assertEquals(op.getHeaders().getFirst(\"NaMe\"), \"value\");\n-        op.setContentType(MediaType.TEXT_PLAIN);\n+        if(contentType!= null)\n+        \top.setContentType(contentType);\n         op.setBody(body);\n         bomp.addPart(op);\n \n@@ -90,6 +99,9 @@ public void testBufferdMultiPart() throws IOException {\n         // bomp.write(os, null);\n \n     }\n+    \n+    \n+    \n \n     /**\n      * extends the OutMultiPart (FileOutMultiPart) pass a file, serialized",
                "raw_url": "https://github.com/apache/attic-wink/raw/aa1cbe61a6f3b71f617468aed2e2ac2ba96a1825/wink-common/src/test/java/org/apache/wink/common/internal/providers/multipart/TestMultiPartProvider.java",
                "sha": "7bf1ecaa7a61c6bf95f4f345b8a61724b3125eee",
                "status": "modified"
            }
        ],
        "message": "Fix issue WINK-230 \"NullPointerException occurs when Content type in MultiPart isn't sent\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wink/trunk@886702 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/attic-wink/commit/14ba5c043a491af098c525640ac3196da724849c",
        "patched_files": [
            "InPart.java",
            "OutPart.java"
        ],
        "repo": "attic-wink",
        "unit_tests": [
            "TestMultiPartProvider.java"
        ]
    },
    "attic-wink_ae7f801": {
        "bug_id": "attic-wink_ae7f801",
        "commit": "https://github.com/apache/attic-wink/commit/ae7f801d03ad72888711772b15fee04e53c4ea04",
        "file": [
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/attic-wink/blob/ae7f801d03ad72888711772b15fee04e53c4ea04/wink-common/src/main/java/org/apache/wink/common/internal/registry/ProvidersRegistry.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/attic-wink/contents/wink-common/src/main/java/org/apache/wink/common/internal/registry/ProvidersRegistry.java?ref=ae7f801d03ad72888711772b15fee04e53c4ea04",
                "deletions": 0,
                "filename": "wink-common/src/main/java/org/apache/wink/common/internal/registry/ProvidersRegistry.java",
                "patch": "@@ -89,6 +89,9 @@ public ProvidersRegistry(OFFactoryRegistry factoryRegistry,\n \r\n     @SuppressWarnings(\"unchecked\")\r\n     public boolean addProvider(Class<?> cls, double priority) {\r\n+        if (cls == null) {\r\n+            throw new NullPointerException(\"cls\");\r\n+        }\r\n         writersLock.lock();\r\n         try {\r\n             ObjectFactory<?> objectFactory = factoryFactoryRegistry.getObjectFactory(cls);\r\n@@ -100,6 +103,9 @@ public boolean addProvider(Class<?> cls, double priority) {\n \r\n     @SuppressWarnings(\"unchecked\")\r\n     public boolean addProvider(Object provider, double priority) {\r\n+        if (provider == null) {\r\n+            throw new NullPointerException(\"provider\");\r\n+        }\r\n         writersLock.lock();\r\n         try {\r\n             ObjectFactory<?> objectFactory = factoryFactoryRegistry.getObjectFactory(provider);\r\n@@ -155,6 +161,12 @@ public boolean addProvider(Object provider) {\n     @SuppressWarnings(\"unchecked\")\r\n     public <T> ContextResolver<T> getContextResolver(final Class<T> contextType,\r\n         MediaType mediaType, RuntimeContext runtimeContext) {\r\n+        if (contextType == null) {\r\n+            throw new NullPointerException(\"contextType\");\r\n+        }\r\n+        if (mediaType == null) {\r\n+            throw new NullPointerException(\"mediaType\");\r\n+        }\r\n         readersLock.lock();\r\n         try {\r\n             final List<ObjectFactory<ContextResolver<?>>> factories = contextResolvers.getProvidersByMediaType(\r\n@@ -207,6 +219,9 @@ public Object invoke(Object proxy, Method method, Object[] args)\n     @SuppressWarnings(\"unchecked\")\r\n     public <T extends Throwable> ExceptionMapper<T> getExceptionMapper(Class<T> type,\r\n         RuntimeContext runtimeContext) {\r\n+        if (type == null) {\r\n+            throw new NullPointerException(\"type\");\r\n+        }\r\n         readersLock.lock();\r\n         try {\r\n             List<ExceptionMapper<?>> matchingMappers = new ArrayList<ExceptionMapper<?>>();\r\n@@ -251,6 +266,12 @@ public Object invoke(Object proxy, Method method, Object[] args)\n     @SuppressWarnings(\"unchecked\")\r\n     public <T> MessageBodyReader<T> getMessageBodyReader(Class<T> type, Type genericType,\r\n         Annotation[] annotations, MediaType mediaType, RuntimeContext runtimeContext) {\r\n+        if (type == null) {\r\n+            throw new NullPointerException(\"type\");\r\n+        }\r\n+        if (mediaType == null) {\r\n+            throw new NullPointerException(\"mediaType\");\r\n+        }\r\n         readersLock.lock();\r\n         try {\r\n             List<ObjectFactory<MessageBodyReader<?>>> factories = messageBodyReaders.getProvidersByMediaType(\r\n@@ -270,6 +291,12 @@ public Object invoke(Object proxy, Method method, Object[] args)\n     @SuppressWarnings(\"unchecked\")\r\n     public <T> MessageBodyWriter<T> getMessageBodyWriter(Class<T> type, Type genericType,\r\n         Annotation[] annotations, MediaType mediaType, RuntimeContext runtimeContext) {\r\n+        if (type == null) {\r\n+            throw new NullPointerException(\"type\");\r\n+        }\r\n+        if (mediaType == null) {\r\n+            throw new NullPointerException(\"mediaType\");\r\n+        }\r\n         readersLock.lock();\r\n         try {\r\n             List<ObjectFactory<MessageBodyWriter<?>>> writersFactories = messageBodyWriters.getProvidersByMediaType(\r\n@@ -287,6 +314,9 @@ public Object invoke(Object proxy, Method method, Object[] args)\n     }\r\n \r\n     public Set<MediaType> getMessageBodyWriterMediaTypes(Class<?> type) {\r\n+        if (type == null) {\r\n+            throw new NullPointerException(\"type\");\r\n+        }\r\n         Set<MediaType> mediaTypes = messageBodyWriters.getProvidersMediaTypes(type);\r\n         return mediaTypes;\r\n     }\r",
                "raw_url": "https://github.com/apache/attic-wink/raw/ae7f801d03ad72888711772b15fee04e53c4ea04/wink-common/src/main/java/org/apache/wink/common/internal/registry/ProvidersRegistry.java",
                "sha": "cd5ae4ce743f71ac1907d6ba067dad3a385da161",
                "status": "modified"
            }
        ],
        "message": "throw NPE explicitly, when required parameters are null\nSee [WINK-37]\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wink/trunk@792093 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/attic-wink/commit/fba40aabb0848757706f722bc2a487824ea65a26",
        "patched_files": [
            "ProvidersRegistry.java"
        ],
        "repo": "attic-wink",
        "unit_tests": [
            "ProvidersRegistryTest.java"
        ]
    },
    "attic-wink_fe82718": {
        "bug_id": "attic-wink_fe82718",
        "commit": "https://github.com/apache/attic-wink/commit/fe82718ba15fd01506b141f3ba7f1c9be3390356",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/attic-wink/blob/fe82718ba15fd01506b141f3ba7f1c9be3390356/wink-server/src/main/java/org/apache/wink/server/internal/registry/ResourceRecordFactory.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/attic-wink/contents/wink-server/src/main/java/org/apache/wink/server/internal/registry/ResourceRecordFactory.java?ref=fe82718ba15fd01506b141f3ba7f1c9be3390356",
                "deletions": 1,
                "filename": "wink-server/src/main/java/org/apache/wink/server/internal/registry/ResourceRecordFactory.java",
                "patch": "@@ -51,7 +51,7 @@\n \n     public ResourceRecordFactory(LifecycleManagersRegistry lifecycleManagerRegistry) {\n         if (lifecycleManagerRegistry == null) {\n-            throw new NullPointerException();\n+            throw new NullPointerException(\"lifecycleManagerRegistry\"); //$NON-NLS-1$\n         }\n         this.lifecycleManagerRegistry = lifecycleManagerRegistry;\n         this.cacheByClass = new HashMap<Class<?>, ResourceRecord>();",
                "raw_url": "https://github.com/apache/attic-wink/raw/fe82718ba15fd01506b141f3ba7f1c9be3390356/wink-server/src/main/java/org/apache/wink/server/internal/registry/ResourceRecordFactory.java",
                "sha": "72b1d3ba6164dfa3f83be18e2f1104b1775d724d",
                "status": "modified"
            }
        ],
        "message": "Update NPE with actual variable to help debug\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wink/trunk@952888 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/attic-wink/commit/531771e5b2bf2f470fe728efe25e471d3b23659f",
        "patched_files": [
            "ResourceRecordFactory.java"
        ],
        "repo": "attic-wink",
        "unit_tests": [
            "ResourceRecordFactoryTest.java"
        ]
    }
}