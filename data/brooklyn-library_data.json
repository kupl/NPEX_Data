[
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/4a5208e582ae94e552cc9cb4135487696c61dac3",
        "file": [
            {
                "patch": "@@ -290,6 +290,7 @@ protected void connectSensors() {\n     private final static class ListOfHostAndPort implements Function<Set<Entity>, List<String>> {\n         @Override public List<String> apply(Set<Entity> input) {\n             List<String> addresses = Lists.newArrayList();\n+            if (input == null) return addresses;\n             for (Entity entity : input) {\n                 addresses.add(String.format(\"%s\",\n                         BrooklynAccessUtils.getBrooklynAccessibleAddress(entity, entity.getAttribute(CouchbaseNode.COUCHBASE_WEB_ADMIN_PORT))));",
                "additions": 1,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/4a5208e582ae94e552cc9cb4135487696c61dac3/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/couchbase/CouchbaseClusterImpl.java",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "ed8b7ee005707c51d623c964331f358b9b0426b7",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/4a5208e582ae94e552cc9cb4135487696c61dac3/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/couchbase/CouchbaseClusterImpl.java",
                "filename": "software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/couchbase/CouchbaseClusterImpl.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/couchbase/CouchbaseClusterImpl.java?ref=4a5208e582ae94e552cc9cb4135487696c61dac3"
            }
        ],
        "bug_id": "brooklyn-library_1",
        "parent": "https://github.com/apache/brooklyn-library/commit/d3562cd7c51f0d4e821ee03376f54bd99cb65ce7",
        "message": "Fix NPE in CouchbaseCluster enricher",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/da264093a6bd1a8cc39a68cf508c9d6f3136a169",
        "file": [
            {
                "patch": "@@ -137,10 +137,10 @@\n     AttributeSensorAndConfigKey<Integer, Integer> EPMD_LISTENER_PORT = ConfigKeys.newIntegerSensorAndConfigKey(\"riak.epmd.port\", \"Erlang Port Mapper Daemon Listener Port\", 4369);\n \n     @SetFromFlag(\"erlangPortRangeStart\")\n-    AttributeSensorAndConfigKey<Integer, Integer> ERLANG_PORT_RANGE_START = ConfigKeys.newIntegerSensorAndConfigKey(\"riak.erlang.portrange.start\", \"Erlang Port Range Start\");\n+    AttributeSensorAndConfigKey<Integer, Integer> ERLANG_PORT_RANGE_START = ConfigKeys.newIntegerSensorAndConfigKey(\"riak.erlang.portrange.start\", \"Erlang Port Range Start\", 6000);\n \n     @SetFromFlag(\"erlangPortRangeEnd\")\n-    AttributeSensorAndConfigKey<Integer, Integer> ERLANG_PORT_RANGE_END = ConfigKeys.newIntegerSensorAndConfigKey(\"riak.erlang.portrange.end\", \"Erlang Port Range End\");\n+    AttributeSensorAndConfigKey<Integer, Integer> ERLANG_PORT_RANGE_END = ConfigKeys.newIntegerSensorAndConfigKey(\"riak.erlang.portrange.end\", \"Erlang Port Range End\", 7999);\n \n     @SetFromFlag(\"configInternalNetworking\")\n     ConfigKey<Boolean> CONFIGURE_INTERNAL_NETWORKING = ConfigKeys.newBooleanConfigKey(\"riak.networking.internal\", \"Set up internal networking for intra-node communication\", Boolean.TRUE);",
                "additions": 2,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/da264093a6bd1a8cc39a68cf508c9d6f3136a169/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/riak/RiakNode.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "d19ab35356b0c9d9c719df26a665ba77c7fc0174",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/da264093a6bd1a8cc39a68cf508c9d6f3136a169/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/riak/RiakNode.java",
                "filename": "software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/riak/RiakNode.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/riak/RiakNode.java?ref=da264093a6bd1a8cc39a68cf508c9d6f3136a169"
            },
            {
                "patch": "@@ -113,14 +113,20 @@ public boolean isPackageDownloadUrlProvided() {\n         sensors().set(ERLANG_PORT_RANGE_START, erlangRangeStart);\n         sensors().set(ERLANG_PORT_RANGE_END, erlangRangeEnd);\n \n-        boolean configureInternalNetworking = config().get(CONFIGURE_INTERNAL_NETWORKING);\n+        return super.getRequiredOpenPorts();\n+    }\n+\n+    // Called after machine is provisioned, but before the driver tries to install Riak\n+    @Override\n+    protected void preStart() {\n+        super.preStart();\n+        \n+        boolean configureInternalNetworking = Boolean.TRUE.equals(config().get(CONFIGURE_INTERNAL_NETWORKING));\n         if (configureInternalNetworking) {\n             configureInternalNetworking();\n         }\n-\n-        return super.getRequiredOpenPorts();\n     }\n-\n+    \n     private void configureInternalNetworking() {\n         Location location = getDriver().getLocation();\n         if (!(location instanceof JcloudsSshMachineLocation)) {",
                "additions": 10,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/da264093a6bd1a8cc39a68cf508c9d6f3136a169/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/riak/RiakNodeImpl.java",
                "status": "modified",
                "changes": 14,
                "deletions": 4,
                "sha": "6f52b6310c19c7cc74d15186c08b3dad5e418bb2",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/da264093a6bd1a8cc39a68cf508c9d6f3136a169/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/riak/RiakNodeImpl.java",
                "filename": "software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/riak/RiakNodeImpl.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/riak/RiakNodeImpl.java?ref=da264093a6bd1a8cc39a68cf508c9d6f3136a169"
            }
        ],
        "bug_id": "brooklyn-library_2",
        "parent": "https://github.com/apache/brooklyn-library/commit/1de87f9e77fa95b19d4eb6793ffa3d0825f3a65d",
        "message": "Fix riak (configureInternalNetwork throwing NPE)",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/03fede0de3699a0a663d244c21ab1e3288573133",
        "file": [
            {
                "patch": "@@ -78,7 +78,9 @@ public String generateConfigFile(NginxDriver driver, NginxController nginx) {\n             config.append(\"  }\\n\");\n             config.append(\"  server {\\n\");\n             config.append(getCodeForServerConfig());\n-            appendCodeForProxySSLConfig(nginx.getId(), config, \"    \", globalSslConfig);\n+            if (globalSslConfig != null) {\n+                appendCodeForProxySSLConfig(nginx.getId(), config, \"    \", globalSslConfig);\n+            }\n             config.append(\"    listen \"+nginx.getPort()+\";\\n\");\n             if (nginx.getDomain()!=null)\n                 config.append(\"    server_name \"+nginx.getDomain()+\";\\n\");",
                "additions": 3,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/03fede0de3699a0a663d244c21ab1e3288573133/software/webapp/src/main/java/org/apache/brooklyn/entity/proxy/nginx/NginxDefaultConfigGenerator.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "341bf67bf8226608d9d9dcd1cebf3a98a133b525",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/03fede0de3699a0a663d244c21ab1e3288573133/software/webapp/src/main/java/org/apache/brooklyn/entity/proxy/nginx/NginxDefaultConfigGenerator.java",
                "filename": "software/webapp/src/main/java/org/apache/brooklyn/entity/proxy/nginx/NginxDefaultConfigGenerator.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/webapp/src/main/java/org/apache/brooklyn/entity/proxy/nginx/NginxDefaultConfigGenerator.java?ref=03fede0de3699a0a663d244c21ab1e3288573133"
            }
        ],
        "bug_id": "brooklyn-library_3",
        "parent": "https://github.com/apache/brooklyn-library/commit/69efaf57628e26f8501772710af0338717e64b2b",
        "message": "Fix NPE generating Nginx config when no SSL configured",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/ac537cf8765999b7194348dab59e13ab41846205",
        "file": [
            {
                "patch": "@@ -221,9 +221,8 @@ public void run() {\n     }\n \n     private void serverRemoved(MongoDBServer server) {\n-        if (LOG.isInfoEnabled())\n-            LOG.info(\"Informing {} primary {} of removal of member: {}\",\n-                    new Object[]{getReplicaSetName(), getPrimary().getId(), server});\n+        if (LOG.isDebugEnabled())\n+            LOG.debug(\"Scheduling removal of member from {}: {}\", getReplicaSetName(), server);\n         executor.submit(removeMember(server));\n     }\n ",
                "additions": 2,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/ac537cf8765999b7194348dab59e13ab41846205/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBReplicaSetImpl.java",
                "status": "modified",
                "changes": 5,
                "deletions": 3,
                "sha": "cdfaeb565e739db4107ce4bf3b40e16dca76f971",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/ac537cf8765999b7194348dab59e13ab41846205/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBReplicaSetImpl.java",
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBReplicaSetImpl.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBReplicaSetImpl.java?ref=ac537cf8765999b7194348dab59e13ab41846205"
            }
        ],
        "bug_id": "brooklyn-library_4",
        "parent": "https://github.com/apache/brooklyn-library/commit/eca34de0d5dc7506bad29f1aa73737cb09b17fd3",
        "message": "Avoid NullPointerException when removing primary from a replica set\n\ngetPrimary() checks all members but the entity that /was/ the primary\nhas been removed from the group by the time this log statement is reached.\nIf the set hasn't chosen a new primary and the sensors haven't updated\nthis causes a NullPointerException.",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/978ee5f42f85cb1cb688c24bea300eabbb035055",
        "file": [
            {
                "patch": "@@ -399,7 +399,8 @@ public void update() {\n                 setAttribute(HOSTNAME, upNode.get().getAttribute(Attributes.HOSTNAME));\n                 setAttribute(THRIFT_PORT, upNode.get().getAttribute(CassandraNode.THRIFT_PORT));\n                 \n-                Set<String> oldNodes = MutableSet.copyOf(getAttribute(CASSANDRA_CLUSTER_NODES));\n+                List<String> currentNodes = getAttribute(CASSANDRA_CLUSTER_NODES);\n+                Set<String> oldNodes = (currentNodes != null) ? MutableSet.copyOf(currentNodes) : MutableSet.<String>of();\n                 Set<String> newNodes = MutableSet.<String>of();\n                 for (Entity member: getMembers()) {\n                     if (member.getAttribute(SERVICE_UP)==Boolean.TRUE) {",
                "additions": 2,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/978ee5f42f85cb1cb688c24bea300eabbb035055/software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java",
                "status": "modified",
                "changes": 3,
                "deletions": 1,
                "sha": "d5e449a41ffc1db43b46b0d7b0f7c6f3a4cca4e7",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/978ee5f42f85cb1cb688c24bea300eabbb035055/software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java",
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java?ref=978ee5f42f85cb1cb688c24bea300eabbb035055"
            }
        ],
        "bug_id": "brooklyn-library_5",
        "parent": "https://github.com/apache/brooklyn-library/commit/6777e02e9da81a47f25a5104a0c90b983f3348c7",
        "message": "Merge pull request #1111 from grkvlt/fix/cassandra-npe\n\nFix NPE when CASSANDRA_CLUSTER_NODES not set",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/3eb1a71898bc8015a2cb2303b2228a9c81cc3326",
        "file": [
            {
                "patch": "@@ -89,11 +89,15 @@ protected void addShards() {\n         for (Entity member : this.getMembers()) {\n             if (member.getAttribute(Startable.SERVICE_UP) && !addedMembers.contains(member)) {\n                 MongoDBServer primary = member.getAttribute(MongoDBReplicaSet.PRIMARY_ENTITY);\n-                String addr = Strings.removeFromStart(primary.getAttribute(MongoDBServer.MONGO_SERVER_ENDPOINT), \"http://\");\n-                String replicaSetURL = ((MongoDBReplicaSet) member).getName() + \"/\" + addr;\n-                LOG.info(\"Using {} to add shard URL {}...\", router, replicaSetURL);\n-                client.addShardToRouter(replicaSetURL);\n-                addedMembers.add(member);\n+                if (primary != null) {\n+                    String addr = Strings.removeFromStart(primary.getAttribute(MongoDBServer.MONGO_SERVER_ENDPOINT), \"http://\");\n+                    String replicaSetURL = ((MongoDBReplicaSet) member).getName() + \"/\" + addr;\n+                    LOG.info(\"Using {} to add shard URL {}...\", router, replicaSetURL);\n+                    client.addShardToRouter(replicaSetURL);\n+                    addedMembers.add(member);\n+                } else {\n+                    LOG.debug(\"{} not set for member {}); not adding shart to router {}\", new Object[] {MongoDBReplicaSet.PRIMARY_ENTITY, member, router});\n+                }\n             }\n         }\n     }",
                "additions": 9,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/3eb1a71898bc8015a2cb2303b2228a9c81cc3326/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/sharding/MongoDBShardClusterImpl.java",
                "status": "modified",
                "changes": 14,
                "deletions": 5,
                "sha": "5b465caed57cbd7581641b699871047fb686dd0f",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/3eb1a71898bc8015a2cb2303b2228a9c81cc3326/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/sharding/MongoDBShardClusterImpl.java",
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/sharding/MongoDBShardClusterImpl.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/sharding/MongoDBShardClusterImpl.java?ref=3eb1a71898bc8015a2cb2303b2228a9c81cc3326"
            }
        ],
        "bug_id": "brooklyn-library_6",
        "parent": "https://github.com/apache/brooklyn-library/commit/c2edafa9647a43bf3038b80eeb353773e147229e",
        "message": "Avoid NPE in MongoDBShardClusterImpl",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/138f6b32ebfe8a9d6da4b1324b4f3a481c0756aa",
        "file": [
            {
                "patch": "@@ -78,7 +78,9 @@ public String generateConfigFile(NginxDriver driver, NginxController nginx) {\n             config.append(\"  }\\n\");\n             config.append(\"  server {\\n\");\n             config.append(getCodeForServerConfig());\n-            appendCodeForProxySSLConfig(nginx.getId(), config, \"    \", globalSslConfig);\n+            if (globalSslConfig != null) {\n+                appendCodeForProxySSLConfig(nginx.getId(), config, \"    \", globalSslConfig);\n+            }\n             config.append(\"    listen \"+nginx.getPort()+\";\\n\");\n             if (nginx.getDomain()!=null)\n                 config.append(\"    server_name \"+nginx.getDomain()+\";\\n\");",
                "additions": 3,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/138f6b32ebfe8a9d6da4b1324b4f3a481c0756aa/software/webapp/src/main/java/org/apache/brooklyn/entity/proxy/nginx/NginxDefaultConfigGenerator.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "341bf67bf8226608d9d9dcd1cebf3a98a133b525",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/138f6b32ebfe8a9d6da4b1324b4f3a481c0756aa/software/webapp/src/main/java/org/apache/brooklyn/entity/proxy/nginx/NginxDefaultConfigGenerator.java",
                "filename": "software/webapp/src/main/java/org/apache/brooklyn/entity/proxy/nginx/NginxDefaultConfigGenerator.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/webapp/src/main/java/org/apache/brooklyn/entity/proxy/nginx/NginxDefaultConfigGenerator.java?ref=138f6b32ebfe8a9d6da4b1324b4f3a481c0756aa"
            }
        ],
        "bug_id": "brooklyn-library_7",
        "parent": "https://github.com/apache/brooklyn-library/commit/69efaf57628e26f8501772710af0338717e64b2b",
        "message": "This closes #59\n\n* github/pr/59:\n  Fix NPE generating Nginx config when no SSL configured",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/91fdec46cd9486e56f9bcf602ba20f850d0188ac",
        "file": [
            {
                "patch": "@@ -2,6 +2,16 @@\n \n import java.util.Map;\n \n+<<<<<<< HEAD\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Predicate;\n+import com.google.common.base.Predicates;\n+\n+=======\n+>>>>>>> upstream/master\n import brooklyn.entity.basic.EntityLocal;\n import brooklyn.entity.nosql.mongodb.sharding.MongoDBRouter;\n import brooklyn.entity.nosql.mongodb.sharding.MongoDBRouterCluster;\n@@ -18,6 +28,8 @@\n \n public class MongoDBClientSshDriver extends AbstractMongoDBSshDriver implements MongoDBClientDriver {\n     \n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDBClientSshDriver.class);\n+\n     private boolean isRunning = false;\n \n     public MongoDBClientSshDriver(EntityLocal entity, SshMachineLocation machine) {\n@@ -41,8 +53,15 @@ public void launch() {\n         AbstractMongoDBServer server = getServer();\n         String host = server.getAttribute(AbstractMongoDBServer.HOSTNAME);\n         Integer port = server.getAttribute(AbstractMongoDBServer.PORT);\n-        for (String scriptName : entity.getConfig(MongoDBClient.STARTUP_JS_SCRIPTS)) {\n-            runScript(\"\", scriptName, host, port);\n+        try {\n+            for (String scriptName : entity.getConfig(MongoDBClient.STARTUP_JS_SCRIPTS)) {\n+                runScript(\"\", scriptName, host, port);\n+            }\n+        } catch (NullPointerException e) {\n+            // FIXME avoid the null ptr, and do something more intelligent\n+            LOG.error(\"startupScripts not specified in MongoDBClientSshDriver launch method;\", e);\n+            isRunning = false;\n+            return;\n         }\n         isRunning = true;\n     }",
                "additions": 21,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/91fdec46cd9486e56f9bcf602ba20f850d0188ac/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java",
                "status": "modified",
                "changes": 23,
                "deletions": 2,
                "sha": "267397fdadb4c48ce6c75e488ff6935943e8bffb",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/91fdec46cd9486e56f9bcf602ba20f850d0188ac/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java",
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java?ref=91fdec46cd9486e56f9bcf602ba20f850d0188ac"
            }
        ],
        "bug_id": "brooklyn-library_8",
        "parent": "https://github.com/apache/brooklyn-library/commit/78547bd12d42f542ece2a215f93915c363472655",
        "message": "Added npe check",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/63f903b7e7c0bef469e17313b4ad9a0cb4b2d17e",
        "file": [
            {
                "patch": "@@ -137,6 +137,7 @@ public Entity apply(@Nullable Collection<Entity> entities) {\n     \n     @Override\n     public void init() {\n+        super.init();\n         enrichers().add(Enrichers.builder()\n                 .aggregating(MongoDBAuthenticationMixins.ROOT_USERNAME)\n                 .publishing(MongoDBAuthenticationMixins.ROOT_USERNAME)",
                "additions": 1,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/63f903b7e7c0bef469e17313b4ad9a0cb4b2d17e/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/mongodb/MongoDBReplicaSetImpl.java",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "1a80c3ab9908294a17d93819141b82625bb197ac",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/63f903b7e7c0bef469e17313b4ad9a0cb4b2d17e/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/mongodb/MongoDBReplicaSetImpl.java",
                "filename": "software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/mongodb/MongoDBReplicaSetImpl.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/mongodb/MongoDBReplicaSetImpl.java?ref=63f903b7e7c0bef469e17313b4ad9a0cb4b2d17e"
            }
        ],
        "bug_id": "brooklyn-library_9",
        "parent": "https://github.com/apache/brooklyn-library/commit/717e50fb16bc851ac35a0eff471682ec4c46573a",
        "message": "Prevent DynamicCluster NPE when subclasses have not called super.init()",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/8a57ff78d1944fc16c36c2423bbb6e36a2e55a24",
        "file": [
            {
                "patch": "@@ -38,7 +38,7 @@\n public interface ZooKeeperNode extends SoftwareProcess {\n \n     @SetFromFlag(\"version\")\n-    ConfigKey<String> SUGGESTED_VERSION = ConfigKeys.newConfigKeyWithDefault(SoftwareProcess.SUGGESTED_VERSION, \"3.4.5\");\n+    ConfigKey<String> SUGGESTED_VERSION = ConfigKeys.newConfigKeyWithDefault(SoftwareProcess.SUGGESTED_VERSION, \"3.4.9\");\n \n     @SetFromFlag(\"archiveNameFormat\")\n     ConfigKey<String> ARCHIVE_DIRECTORY_NAME_FORMAT = ConfigKeys.newConfigKeyWithDefault(SoftwareProcess.ARCHIVE_DIRECTORY_NAME_FORMAT, \"zookeeper-%s\");",
                "additions": 1,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/8a57ff78d1944fc16c36c2423bbb6e36a2e55a24/software/messaging/src/main/java/org/apache/brooklyn/entity/zookeeper/ZooKeeperNode.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "e0644df0851ceb7b619ec358b5d5169771b6876c",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/8a57ff78d1944fc16c36c2423bbb6e36a2e55a24/software/messaging/src/main/java/org/apache/brooklyn/entity/zookeeper/ZooKeeperNode.java",
                "filename": "software/messaging/src/main/java/org/apache/brooklyn/entity/zookeeper/ZooKeeperNode.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/messaging/src/main/java/org/apache/brooklyn/entity/zookeeper/ZooKeeperNode.java?ref=8a57ff78d1944fc16c36c2423bbb6e36a2e55a24"
            },
            {
                "patch": "@@ -30,4 +30,9 @@ public ZooKeeperNodeImpl() {}\n         return ZooKeeperDriver.class;\n     }\n \n+    @Override\n+    public void init() {\n+        super.init();\n+        sensors().set(ZooKeeperNode.MY_ID, 1);\n+    }\n }",
                "additions": 5,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/8a57ff78d1944fc16c36c2423bbb6e36a2e55a24/software/messaging/src/main/java/org/apache/brooklyn/entity/zookeeper/ZooKeeperNodeImpl.java",
                "status": "modified",
                "changes": 5,
                "deletions": 0,
                "sha": "f0eee043bb497531c57a44605edaa443571facd0",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/8a57ff78d1944fc16c36c2423bbb6e36a2e55a24/software/messaging/src/main/java/org/apache/brooklyn/entity/zookeeper/ZooKeeperNodeImpl.java",
                "filename": "software/messaging/src/main/java/org/apache/brooklyn/entity/zookeeper/ZooKeeperNodeImpl.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/messaging/src/main/java/org/apache/brooklyn/entity/zookeeper/ZooKeeperNodeImpl.java?ref=8a57ff78d1944fc16c36c2423bbb6e36a2e55a24"
            },
            {
                "patch": "@@ -62,17 +62,21 @@ protected int getMyId() {\n     // Need a way to terminate the wait based on the entity going on-fire etc.\n     // FIXME Race in getMemebers. Should we change DynamicCluster.grow to create the members and only then call start on them all?\n     public List<ZooKeeperServerConfig> getZookeeperServers() throws ExecutionException, InterruptedException {\n-        ZooKeeperEnsemble ensemble = (ZooKeeperEnsemble) entity.getParent();\n         List<ZooKeeperServerConfig> result = Lists.newArrayList();\n \n-        for (Entity member : ensemble.getMembers()) {\n-            Integer myid = Entities.attributeSupplierWhenReady(member, ZooKeeperNode.MY_ID).get();\n-            String hostname = Entities.attributeSupplierWhenReady(member, ZooKeeperNode.HOSTNAME).get();\n-            Integer port = Entities.attributeSupplierWhenReady(member, ZooKeeperNode.ZOOKEEPER_PORT).get();\n-            Integer leaderPort = Entities.attributeSupplierWhenReady(member, ZooKeeperNode.ZOOKEEPER_LEADER_PORT).get();\n-            Integer electionPort = Entities.attributeSupplierWhenReady(member, ZooKeeperNode.ZOOKEEPER_ELECTION_PORT).get();\n-            result.add(new ZooKeeperServerConfig(myid, hostname, port, leaderPort, electionPort));\n+        if (entity.getParent().getClass().isAssignableFrom(ZooKeeperEnsemble.class)) {\n+            ZooKeeperEnsemble ensemble = (ZooKeeperEnsemble) entity.getParent();\n+\n+            for (Entity member : ensemble.getMembers()) {\n+                Integer myid = Entities.attributeSupplierWhenReady(member, ZooKeeperNode.MY_ID).get();\n+                String hostname = Entities.attributeSupplierWhenReady(member, ZooKeeperNode.HOSTNAME).get();\n+                Integer port = Entities.attributeSupplierWhenReady(member, ZooKeeperNode.ZOOKEEPER_PORT).get();\n+                Integer leaderPort = Entities.attributeSupplierWhenReady(member, ZooKeeperNode.ZOOKEEPER_LEADER_PORT).get();\n+                Integer electionPort = Entities.attributeSupplierWhenReady(member, ZooKeeperNode.ZOOKEEPER_ELECTION_PORT).get();\n+                result.add(new ZooKeeperServerConfig(myid, hostname, port, leaderPort, electionPort));\n+            }\n         }\n+\n         return result;\n     }\n ",
                "additions": 12,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/8a57ff78d1944fc16c36c2423bbb6e36a2e55a24/software/messaging/src/main/java/org/apache/brooklyn/entity/zookeeper/ZooKeeperSshDriver.java",
                "status": "modified",
                "changes": 20,
                "deletions": 8,
                "sha": "e4ed3385be283b0c581174c19e2e3f463e253792",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/8a57ff78d1944fc16c36c2423bbb6e36a2e55a24/software/messaging/src/main/java/org/apache/brooklyn/entity/zookeeper/ZooKeeperSshDriver.java",
                "filename": "software/messaging/src/main/java/org/apache/brooklyn/entity/zookeeper/ZooKeeperSshDriver.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/messaging/src/main/java/org/apache/brooklyn/entity/zookeeper/ZooKeeperSshDriver.java?ref=8a57ff78d1944fc16c36c2423bbb6e36a2e55a24"
            }
        ],
        "bug_id": "brooklyn-library_10",
        "parent": "https://github.com/apache/brooklyn-library/commit/c1dc94aa601f2793fc5620aae39cba457d1d68c1",
        "message": "Closes #69\n\nUpdate default Zookeeper version and fix NPE\n\nThis updates the Zookeeper version to use (version 3.4.5 not available anymore).\nIt also fixes a NPE on customize phase, caused by:\n- the `ZookeeperNode.MY_ID` not set for a single `ZookeeperNode`\n- getZookeeperServers() expecting the parent to be and entity of type `ZookeeperEnsemble`, which is not the case for a single `ZookeeperNode`",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/149353448ac7ad556a4243f7ff3cad4bb061a1bd",
        "file": [
            {
                "patch": "@@ -70,7 +70,7 @@ public void connectSensors() {\n     @Override\n     public void disconnectSensors() {\n         super.disconnectSensors();\n-        if (getDriver().isJmxEnabled()) {\n+        if (getDriver() != null && getDriver().isJmxEnabled()) {\n            if (jmxFeed != null) jmxFeed.stop();\n         } else {\n             disconnectServiceUpIsRunning();",
                "additions": 1,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/149353448ac7ad556a4243f7ff3cad4bb061a1bd/software/webapp/src/main/java/brooklyn/entity/webapp/tomcat/TomcatServerImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "dd4ac9464b4fee58a1f8521496fd6fa68926a1d5",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/149353448ac7ad556a4243f7ff3cad4bb061a1bd/software/webapp/src/main/java/brooklyn/entity/webapp/tomcat/TomcatServerImpl.java",
                "filename": "software/webapp/src/main/java/brooklyn/entity/webapp/tomcat/TomcatServerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/webapp/src/main/java/brooklyn/entity/webapp/tomcat/TomcatServerImpl.java?ref=149353448ac7ad556a4243f7ff3cad4bb061a1bd"
            }
        ],
        "bug_id": "brooklyn-library_11",
        "parent": "https://github.com/apache/brooklyn-library/commit/b6f976bd9103d91e4f83873f54dfe9b2f9b6d2da",
        "message": "Avoid NPE in TomcatServer.disconnectSensors",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/1efe72870056ce96cafe925d9da922a6d51accaf",
        "file": [
            {
                "patch": "@@ -268,7 +268,7 @@ public void run() {\n     @Override\n     public void update() {\n         Task<?> task = updateAsync();\n-        task.getUnchecked();\n+        if (task != null) task.getUnchecked();\n     }\n     \n     public synchronized Task<?> updateAsync() {",
                "additions": 1,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/1efe72870056ce96cafe925d9da922a6d51accaf/software/webapp/src/main/java/brooklyn/entity/proxy/AbstractControllerImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "95ac9975fcf5ace89dc87c0cbe85ddd5d0f39de3",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/1efe72870056ce96cafe925d9da922a6d51accaf/software/webapp/src/main/java/brooklyn/entity/proxy/AbstractControllerImpl.java",
                "filename": "software/webapp/src/main/java/brooklyn/entity/proxy/AbstractControllerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/webapp/src/main/java/brooklyn/entity/proxy/AbstractControllerImpl.java?ref=1efe72870056ce96cafe925d9da922a6d51accaf"
            }
        ],
        "bug_id": "brooklyn-library_12",
        "parent": "https://github.com/apache/brooklyn-library/commit/c2b9bc332bb38b216d664a72b0d80beea31a53f3",
        "message": "Fix NPE in AbstractController.update",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/c75d869a406fe5b2e01c802121219dde299e98f1",
        "file": [
            {
                "patch": "@@ -69,7 +69,7 @@ public class TomcatNode extends AbstractEntity implements Startable {\n         }\n \t}\n \t\n-\tprivate double getJmxSensors(JmxSensorEffectorTool jmxTool) {\n+\tprivate double getJmxSensors() {\n \t\tdef reqs = jmxTool.getChildrenAttributesWithTotal(\"Catalina:type=GlobalRequestProcessor,name=\\\"*\\\"\")\n \t\treqs.put \"timestamp\", System.currentTimeMillis()\n \t\t//update to explicit location in activity map, but not linked to sensor so probably shouldn't be used too widely ",
                "additions": 1,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/c75d869a406fe5b2e01c802121219dde299e98f1/org.overpaas.core/src/main/java/org/overpaas/web/tomcat/TomcatNode.groovy",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "4724e5afa00e5ec34dfbbf05318139eefd4472d6",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/c75d869a406fe5b2e01c802121219dde299e98f1/org.overpaas.core/src/main/java/org/overpaas/web/tomcat/TomcatNode.groovy",
                "filename": "org.overpaas.core/src/main/java/org/overpaas/web/tomcat/TomcatNode.groovy",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/org.overpaas.core/src/main/java/org/overpaas/web/tomcat/TomcatNode.groovy?ref=c75d869a406fe5b2e01c802121219dde299e98f1"
            }
        ],
        "bug_id": "brooklyn-library_13",
        "parent": "https://github.com/apache/brooklyn-library/commit/d1c423e121b7f1938551189ce00ec9c921000a50",
        "message": "Fix NPE on getJmxSensors",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/6b7726c26d433b58b2d32574194abc5aaec8ddab",
        "file": [
            {
                "patch": "@@ -313,7 +313,11 @@ protected void connectSensors() {\n         connectEnrichers();\n         \n         // track members\n-        policy = new AbstractMembershipTrackingPolicy(MutableMap.of(\"name\", \"Cassandra Cluster Tracker\")) {\n+        Map<String, Object> flags = MutableMap.<String, Object>builder()\n+                .put(\"name\", \"Cassandra Cluster Tracker\")\n+                .put(\"sensorsToTrack\", ImmutableSet.of(Attributes.SERVICE_UP, Attributes.HOSTNAME, CassandraNode.THRIFT_PORT))\n+                .build();\n+        policy = new AbstractMembershipTrackingPolicy(flags) {\n             @Override\n             protected void onEntityChange(Entity member) {\n                 if (log.isDebugEnabled()) log.debug(\"Node {} updated in Cluster {}\", member, this);\n@@ -404,8 +408,11 @@ public void update() {\n                 Set<String> newNodes = MutableSet.<String>of();\n                 for (Entity member : getMembers()) {\n                     if (member instanceof CassandraNode && Boolean.TRUE.equals(member.getAttribute(SERVICE_UP))) {\n-                        HostAndPort address = HostAndPort.fromParts(member.getAttribute(HOSTNAME), member.getAttribute(THRIFT_PORT));\n-                        newNodes.add(address.toString());\n+                        String hostname = member.getAttribute(HOSTNAME);\n+                        Integer thriftPort = member.getAttribute(THRIFT_PORT);\n+                        if (hostname != null && thriftPort != null) {\n+                            newNodes.add(HostAndPort.fromParts(hostname, thriftPort).toString());\n+                        }\n                     }\n                 }\n                 if (Sets.symmetricDifference(oldNodes, newNodes).size() > 0) {",
                "additions": 10,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/6b7726c26d433b58b2d32574194abc5aaec8ddab/software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java",
                "status": "modified",
                "changes": 13,
                "deletions": 3,
                "sha": "aa10487b86b5653651c6a605205bba97fb68b5fe",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/6b7726c26d433b58b2d32574194abc5aaec8ddab/software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java",
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java?ref=6b7726c26d433b58b2d32574194abc5aaec8ddab"
            }
        ],
        "bug_id": "brooklyn-library_14",
        "parent": "https://github.com/apache/brooklyn-library/commit/3b8239cb974df50eb7423885ea0461ec5a1e4eee",
        "message": "Fix NPE in CassandraClusterImpl update of HostAndPort",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/703e2ad42a322c8dca496a3f78f50f7489599dcb",
        "file": [
            {
                "patch": "@@ -454,7 +454,7 @@ public void disconnectSensors() {\n \n         if (jmxFeed != null) jmxFeed.stop();\n         if (jmxMxBeanFeed != null) jmxMxBeanFeed.stop();\n-        if (jmxHelper.isConnected()) jmxHelper.disconnect();\n+        if (jmxHelper != null && jmxHelper.isConnected()) jmxHelper.disconnect();\n         if (functionFeed != null) functionFeed.stop();\n     }\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/703e2ad42a322c8dca496a3f78f50f7489599dcb/software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraNodeImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "160c4f67271ccb209dd2fb48cf3d46ecd5ca754b",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/703e2ad42a322c8dca496a3f78f50f7489599dcb/software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraNodeImpl.java",
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraNodeImpl.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraNodeImpl.java?ref=703e2ad42a322c8dca496a3f78f50f7489599dcb"
            }
        ],
        "bug_id": "brooklyn-library_15",
        "parent": "https://github.com/apache/brooklyn-library/commit/2910a6ffe04faf2a361890b42b5ecd97017654fd",
        "message": "avoid NPE when stopping after error (cassandra)",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/c2b9bc332bb38b216d664a72b0d80beea31a53f3",
        "file": [
            {
                "patch": "@@ -1,6 +1,6 @@\n package brooklyn.entity.webapp.tomcat;\n \n-import static java.lang.String.*;\n+import static java.lang.String.format;\n \n import java.util.concurrent.TimeUnit;\n \n@@ -71,7 +71,7 @@ public void connectSensors() {\n     public void disconnectSensors() {\n         super.disconnectSensors();\n         if (getDriver().isJmxEnabled()) {\n-           if (jmxFeed.isActivated()) jmxFeed.stop();\n+           if (jmxFeed != null) jmxFeed.stop();\n         } else {\n             disconnectServiceUpIsRunning();\n         }",
                "additions": 2,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/c2b9bc332bb38b216d664a72b0d80beea31a53f3/software/webapp/src/main/java/brooklyn/entity/webapp/tomcat/TomcatServerImpl.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "a6c1b728a4d705eda9ba444ce16f1e0459b86d72",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/c2b9bc332bb38b216d664a72b0d80beea31a53f3/software/webapp/src/main/java/brooklyn/entity/webapp/tomcat/TomcatServerImpl.java",
                "filename": "software/webapp/src/main/java/brooklyn/entity/webapp/tomcat/TomcatServerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/webapp/src/main/java/brooklyn/entity/webapp/tomcat/TomcatServerImpl.java?ref=c2b9bc332bb38b216d664a72b0d80beea31a53f3"
            }
        ],
        "bug_id": "brooklyn-library_16",
        "parent": "https://github.com/apache/brooklyn-library/commit/36bde454adf42e65c4b3ba73fd35c1bb10e744c3",
        "message": "Fix NPE in TomcatServer.disconnectSensors (when inactive)",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/6b003dfd69f44fd585f2ded73ee11a7c074eb0fa",
        "file": [
            {
                "patch": "@@ -64,7 +64,9 @@ public class TomcatSimulator {\n     }\n \n     public void shutdown() {\n-        jmxService.shutdown();\n+        if (jmxService) {\n+            jmxService.shutdown();\n+        }\n         jmxService = null;\n         synchronized (activeInstances) { activeInstances.remove(this) }\n         lock.release()",
                "additions": 3,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/6b003dfd69f44fd585f2ded73ee11a7c074eb0fa/extra/src/test/java/brooklyn/entity/webapp/tomcat/TomcatSimulator.groovy",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "a35df49fa3f3a9374bcc9d9ca1c09519c47b0a16",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/6b003dfd69f44fd585f2ded73ee11a7c074eb0fa/extra/src/test/java/brooklyn/entity/webapp/tomcat/TomcatSimulator.groovy",
                "filename": "extra/src/test/java/brooklyn/entity/webapp/tomcat/TomcatSimulator.groovy",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/extra/src/test/java/brooklyn/entity/webapp/tomcat/TomcatSimulator.groovy?ref=6b003dfd69f44fd585f2ded73ee11a7c074eb0fa"
            }
        ],
        "bug_id": "brooklyn-library_17",
        "parent": "https://github.com/apache/brooklyn-library/commit/e93eaf920fad71b1a368bc623e01987d468b2358",
        "message": "Eliminating NPE when port in use",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/bea36b1ee81a31e2f49e7998c35ce684a5b1e662",
        "file": [
            {
                "patch": "@@ -38,7 +38,7 @@\n public interface ZooKeeperNode extends SoftwareProcess {\n \n     @SetFromFlag(\"version\")\n-    ConfigKey<String> SUGGESTED_VERSION = ConfigKeys.newConfigKeyWithDefault(SoftwareProcess.SUGGESTED_VERSION, \"3.4.5\");\n+    ConfigKey<String> SUGGESTED_VERSION = ConfigKeys.newConfigKeyWithDefault(SoftwareProcess.SUGGESTED_VERSION, \"3.4.9\");\n \n     @SetFromFlag(\"archiveNameFormat\")\n     ConfigKey<String> ARCHIVE_DIRECTORY_NAME_FORMAT = ConfigKeys.newConfigKeyWithDefault(SoftwareProcess.ARCHIVE_DIRECTORY_NAME_FORMAT, \"zookeeper-%s\");",
                "additions": 1,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/bea36b1ee81a31e2f49e7998c35ce684a5b1e662/software/messaging/src/main/java/org/apache/brooklyn/entity/zookeeper/ZooKeeperNode.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "e0644df0851ceb7b619ec358b5d5169771b6876c",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/bea36b1ee81a31e2f49e7998c35ce684a5b1e662/software/messaging/src/main/java/org/apache/brooklyn/entity/zookeeper/ZooKeeperNode.java",
                "filename": "software/messaging/src/main/java/org/apache/brooklyn/entity/zookeeper/ZooKeeperNode.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/messaging/src/main/java/org/apache/brooklyn/entity/zookeeper/ZooKeeperNode.java?ref=bea36b1ee81a31e2f49e7998c35ce684a5b1e662"
            },
            {
                "patch": "@@ -30,4 +30,9 @@ public ZooKeeperNodeImpl() {}\n         return ZooKeeperDriver.class;\n     }\n \n+    @Override\n+    public void init() {\n+        super.init();\n+        sensors().set(ZooKeeperNode.MY_ID, 1);\n+    }\n }",
                "additions": 5,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/bea36b1ee81a31e2f49e7998c35ce684a5b1e662/software/messaging/src/main/java/org/apache/brooklyn/entity/zookeeper/ZooKeeperNodeImpl.java",
                "status": "modified",
                "changes": 5,
                "deletions": 0,
                "sha": "f0eee043bb497531c57a44605edaa443571facd0",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/bea36b1ee81a31e2f49e7998c35ce684a5b1e662/software/messaging/src/main/java/org/apache/brooklyn/entity/zookeeper/ZooKeeperNodeImpl.java",
                "filename": "software/messaging/src/main/java/org/apache/brooklyn/entity/zookeeper/ZooKeeperNodeImpl.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/messaging/src/main/java/org/apache/brooklyn/entity/zookeeper/ZooKeeperNodeImpl.java?ref=bea36b1ee81a31e2f49e7998c35ce684a5b1e662"
            },
            {
                "patch": "@@ -62,17 +62,21 @@ protected int getMyId() {\n     // Need a way to terminate the wait based on the entity going on-fire etc.\n     // FIXME Race in getMemebers. Should we change DynamicCluster.grow to create the members and only then call start on them all?\n     public List<ZooKeeperServerConfig> getZookeeperServers() throws ExecutionException, InterruptedException {\n-        ZooKeeperEnsemble ensemble = (ZooKeeperEnsemble) entity.getParent();\n         List<ZooKeeperServerConfig> result = Lists.newArrayList();\n \n-        for (Entity member : ensemble.getMembers()) {\n-            Integer myid = Entities.attributeSupplierWhenReady(member, ZooKeeperNode.MY_ID).get();\n-            String hostname = Entities.attributeSupplierWhenReady(member, ZooKeeperNode.HOSTNAME).get();\n-            Integer port = Entities.attributeSupplierWhenReady(member, ZooKeeperNode.ZOOKEEPER_PORT).get();\n-            Integer leaderPort = Entities.attributeSupplierWhenReady(member, ZooKeeperNode.ZOOKEEPER_LEADER_PORT).get();\n-            Integer electionPort = Entities.attributeSupplierWhenReady(member, ZooKeeperNode.ZOOKEEPER_ELECTION_PORT).get();\n-            result.add(new ZooKeeperServerConfig(myid, hostname, port, leaderPort, electionPort));\n+        if (entity.getParent().getClass().isAssignableFrom(ZooKeeperEnsemble.class)) {\n+            ZooKeeperEnsemble ensemble = (ZooKeeperEnsemble) entity.getParent();\n+\n+            for (Entity member : ensemble.getMembers()) {\n+                Integer myid = Entities.attributeSupplierWhenReady(member, ZooKeeperNode.MY_ID).get();\n+                String hostname = Entities.attributeSupplierWhenReady(member, ZooKeeperNode.HOSTNAME).get();\n+                Integer port = Entities.attributeSupplierWhenReady(member, ZooKeeperNode.ZOOKEEPER_PORT).get();\n+                Integer leaderPort = Entities.attributeSupplierWhenReady(member, ZooKeeperNode.ZOOKEEPER_LEADER_PORT).get();\n+                Integer electionPort = Entities.attributeSupplierWhenReady(member, ZooKeeperNode.ZOOKEEPER_ELECTION_PORT).get();\n+                result.add(new ZooKeeperServerConfig(myid, hostname, port, leaderPort, electionPort));\n+            }\n         }\n+\n         return result;\n     }\n ",
                "additions": 12,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/bea36b1ee81a31e2f49e7998c35ce684a5b1e662/software/messaging/src/main/java/org/apache/brooklyn/entity/zookeeper/ZooKeeperSshDriver.java",
                "status": "modified",
                "changes": 20,
                "deletions": 8,
                "sha": "e4ed3385be283b0c581174c19e2e3f463e253792",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/bea36b1ee81a31e2f49e7998c35ce684a5b1e662/software/messaging/src/main/java/org/apache/brooklyn/entity/zookeeper/ZooKeeperSshDriver.java",
                "filename": "software/messaging/src/main/java/org/apache/brooklyn/entity/zookeeper/ZooKeeperSshDriver.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/messaging/src/main/java/org/apache/brooklyn/entity/zookeeper/ZooKeeperSshDriver.java?ref=bea36b1ee81a31e2f49e7998c35ce684a5b1e662"
            }
        ],
        "bug_id": "brooklyn-library_18",
        "parent": "https://github.com/apache/brooklyn-library/commit/1db9b4f7bf8a8aaf4339ac497c7e9e0039d4ac4d",
        "message": "Update default Zookeeper version and fix NPE on customize phase, caused by the ZookeeperNode.MY_ID and getZookeeperServers() when used to deploy only one node",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/d73e5b026df93e5244e94023925d881ac775300d",
        "file": [
            {
                "patch": "@@ -1,7 +1,11 @@\n package brooklyn.entity.nosql.mongodb;\n \n+import java.util.List;\n import java.util.Map;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import brooklyn.entity.basic.EntityLocal;\n import brooklyn.entity.nosql.mongodb.sharding.MongoDBRouter;\n import brooklyn.entity.nosql.mongodb.sharding.MongoDBRouterCluster;\n@@ -18,6 +22,8 @@\n \n public class MongoDBClientSshDriver extends AbstractMongoDBSshDriver implements MongoDBClientDriver {\n     \n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDBClientSshDriver.class);\n+\n     private boolean isRunning = false;\n \n     public MongoDBClientSshDriver(EntityLocal entity, SshMachineLocation machine) {\n@@ -41,17 +47,39 @@ public void launch() {\n         AbstractMongoDBServer server = getServer();\n         String host = server.getAttribute(AbstractMongoDBServer.HOSTNAME);\n         Integer port = server.getAttribute(AbstractMongoDBServer.PORT);\n-        for (String scriptName : entity.getConfig(MongoDBClient.STARTUP_JS_SCRIPTS)) {\n-            runScript(\"\", scriptName, host, port);\n+        \n+        List<String> scripts = entity.getConfig(MongoDBClient.STARTUP_JS_SCRIPTS);\n+        if (scripts!=null) {\n+            for (String scriptName : scripts) {\n+                try {\n+                    LOG.debug(\"Running MongoDB script \"+scriptName+\" at \"+getEntity());\n+                    runScript(\"\", scriptName, host, port);\n+                } catch (Exception e) {\n+                    LOG.warn(\"Error running MongoDB script \"+scriptName+\" at \"+getEntity()+\", throwing: \"+e);\n+                    isRunning = false;\n+                    Exceptions.propagateIfFatal(e);\n+                    throw new IllegalStateException(\"Error running MongoDB script \"+scriptName+\" at \"+entity+\": \"+e, e);\n+                }\n+            }\n         }\n         isRunning = true;\n     }\n     \n     @Override\n     public boolean isRunning() {\n+        // TODO better would be to get some confirmation\n         return isRunning;\n     }\n     \n+    @Override\n+    public void stop() {\n+        try {\n+            super.stop();\n+        } finally {\n+            isRunning = false;\n+        }\n+    }\n+    \n     private String getUserScriptDir() {\n         return getRunDir() + \"/userScripts/\" ;\n     }",
                "additions": 30,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/d73e5b026df93e5244e94023925d881ac775300d/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java",
                "status": "modified",
                "changes": 32,
                "deletions": 2,
                "sha": "5e4f325323a9476d340a84752fef6021a148ba42",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/d73e5b026df93e5244e94023925d881ac775300d/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java",
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java?ref=d73e5b026df93e5244e94023925d881ac775300d"
            }
        ],
        "bug_id": "brooklyn-library_19",
        "parent": "https://github.com/apache/brooklyn-library/commit/388499a55281013a68095b34df0072c6d7c76843",
        "message": "Merge pull request #1344 from ahgittin/mongo\n\nMongo NPE check",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/8e0c678d6a9f1d84d22a692ef52d00d98160d76e",
        "file": [
            {
                "patch": "@@ -399,7 +399,8 @@ public void update() {\n                 setAttribute(HOSTNAME, upNode.get().getAttribute(Attributes.HOSTNAME));\n                 setAttribute(THRIFT_PORT, upNode.get().getAttribute(CassandraNode.THRIFT_PORT));\n                 \n-                Set<String> oldNodes = MutableSet.copyOf(getAttribute(CASSANDRA_CLUSTER_NODES));\n+                List<String> currentNodes = getAttribute(CASSANDRA_CLUSTER_NODES);\n+                Set<String> oldNodes = (currentNodes != null) ? MutableSet.copyOf(currentNodes) : MutableSet.<String>of();\n                 Set<String> newNodes = MutableSet.<String>of();\n                 for (Entity member: getMembers()) {\n                     if (member.getAttribute(SERVICE_UP)==Boolean.TRUE) {",
                "additions": 2,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/8e0c678d6a9f1d84d22a692ef52d00d98160d76e/software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java",
                "status": "modified",
                "changes": 3,
                "deletions": 1,
                "sha": "d5e449a41ffc1db43b46b0d7b0f7c6f3a4cca4e7",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/8e0c678d6a9f1d84d22a692ef52d00d98160d76e/software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java",
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java?ref=8e0c678d6a9f1d84d22a692ef52d00d98160d76e"
            }
        ],
        "bug_id": "brooklyn-library_20",
        "parent": "https://github.com/apache/brooklyn-library/commit/670f169ca8427cb6276a6776cdf850301ea75414",
        "message": "Fix NPE when CASSANDRA_CLUSTER_NODES not set",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/267bc3f2263a487339da28a4935f7ad926c01628",
        "file": [
            {
                "patch": "@@ -8,6 +8,7 @@\n \n import brooklyn.entity.basic.Attributes;\n import brooklyn.entity.basic.SoftwareProcessImpl;\n+import brooklyn.event.AttributeSensor;\n import brooklyn.event.SensorEvent;\n import brooklyn.event.SensorEventListener;\n import brooklyn.event.feed.http.HttpFeed;\n@@ -19,6 +20,9 @@\n import brooklyn.location.cloud.CloudLocationConfig;\n import brooklyn.util.collections.MutableSet;\n import brooklyn.util.config.ConfigBag;\n+import brooklyn.util.guava.Functionals;\n+import brooklyn.util.guava.MaybeFunctions;\n+import brooklyn.util.guava.TypeTokens;\n import brooklyn.util.http.HttpToolResponse;\n \n import com.google.common.base.Function;\n@@ -88,26 +92,35 @@ public void rebalance() {\n         getDriver().rebalance();\n     }\n \n+    protected final static Function<HttpToolResponse, JsonElement> GET_THIS_NODE_STATS = Functionals.chain(\n+        HttpValueFunctions.jsonContents(), \n+        JsonFunctions.walk(\"nodes\"), \n+        new Function<JsonElement, JsonElement>() {\n+            @Override public JsonElement apply(JsonElement input) {\n+                JsonArray nodes = input.getAsJsonArray();\n+                for (JsonElement element : nodes) {\n+                    JsonElement thisNode = element.getAsJsonObject().get(\"thisNode\");\n+                    if (thisNode!=null && Boolean.TRUE.equals(thisNode.getAsBoolean())) {\n+                        return element.getAsJsonObject().get(\"interestingStats\");\n+                    }\n+                }\n+                return null;\n+        }}\n+    );\n+    \n+    protected final static <T> HttpPollConfig<T> getSensorFromNodeStat(AttributeSensor<T> sensor, String ...jsonPath) {\n+        return new HttpPollConfig<T>(sensor)\n+            .onSuccess(Functionals.chain(GET_THIS_NODE_STATS, \n+                MaybeFunctions.<JsonElement>wrap(), \n+                JsonFunctions.walkM(jsonPath), \n+                JsonFunctions.castM(TypeTokens.getRawRawType(sensor.getTypeToken()), null)))\n+            .onFailureOrException(Functions.<T>constant(null));\n+    }\n \n     public void connectSensors() {\n         super.connectSensors();\n         connectServiceUpIsRunning();\n-        \n-        Function<HttpToolResponse, JsonElement> getThisNodesStats = HttpValueFunctions.chain(\n-            HttpValueFunctions.jsonContents(), \n-            JsonFunctions.walk(\"nodes\"), \n-            new Function<JsonElement, JsonElement>() {\n-                @Override public JsonElement apply(JsonElement input) {\n-                    JsonArray nodes = input.getAsJsonArray();\n-                    for (JsonElement element : nodes) {\n-                        if (Boolean.TRUE.equals(element.getAsJsonObject().get(\"thisNode\").getAsBoolean())) {\n-                            return element.getAsJsonObject().get(\"interestingStats\");\n-                        }\n-                    }\n-                    return null;\n-            }}\n-        );\n-        \n+                \n         Integer rawPort = getAttribute(CouchbaseNode.COUCHBASE_WEB_ADMIN_PORT);\n         Preconditions.checkNotNull(rawPort, \"HTTP_PORT sensors not set for %s; is an acceptable port available?\", this);\n         HostAndPort hp = BrooklynAccessUtils.getBrooklynAccessibleAddress(this, rawPort);\n@@ -119,42 +132,18 @@ public void connectSensors() {\n             .period(1000)\n             .baseUri(adminUrl + \"/pools/nodes/\")\n             .credentialsIfNotNull(getConfig(CouchbaseNode.COUCHBASE_ADMIN_USERNAME), getConfig(CouchbaseNode.COUCHBASE_ADMIN_PASSWORD))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.OPS)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"ops\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.COUCH_DOCS_DATA_SIZE)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"couch_docs_data_size\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.COUCH_DOCS_ACTUAL_DISK_SIZE)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"couch_docs_actual_disk_size\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.EP_BG_FETCHED)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"ep_bg_fetched\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.MEM_USED)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"mem_used\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.COUCH_VIEWS_ACTUAL_DISK_SIZE)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"couch_views_actual_disk_size\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.CURR_ITEMS)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"curr_items\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.VB_REPLICA_CURR_ITEMS)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"vb_replica_curr_items\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.COUCH_VIEWS_DATA_SIZE)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"couch_views_data_size\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.GET_HITS)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"get_hits\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.CMD_GET)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"cmd_get\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.CURR_ITEMS_TOT)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"curr_items_tot\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.OPS, \"ops\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.COUCH_DOCS_DATA_SIZE, \"couch_docs_data_size\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.COUCH_DOCS_ACTUAL_DISK_SIZE, \"couch_docs_actual_disk_size\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.EP_BG_FETCHED, \"ep_bg_fetched\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.MEM_USED, \"mem_used\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.COUCH_VIEWS_ACTUAL_DISK_SIZE, \"couch_views_actual_disk_size\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.CURR_ITEMS, \"curr_items\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.VB_REPLICA_CURR_ITEMS, \"vb_replica_curr_items\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.COUCH_VIEWS_DATA_SIZE, \"couch_views_data_size\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.GET_HITS, \"get_hits\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.CMD_GET, \"cmd_get\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.CURR_ITEMS_TOT, \"curr_items_tot\"))\n             .build();\n     }\n ",
                "additions": 41,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/267bc3f2263a487339da28a4935f7ad926c01628/software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNodeImpl.java",
                "status": "modified",
                "changes": 93,
                "deletions": 52,
                "sha": "06d9c187688fc6e83e67f3561749e028f71de1d0",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/267bc3f2263a487339da28a4935f7ad926c01628/software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNodeImpl.java",
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNodeImpl.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNodeImpl.java?ref=267bc3f2263a487339da28a4935f7ad926c01628"
            }
        ],
        "bug_id": "brooklyn-library_21",
        "parent": "https://github.com/apache/brooklyn-library/commit/377eb1e4df9fa1915de901b2124390d87b0fdc18",
        "message": "tidy code for gathering couchbase sensors, and prevent NPE's using new functional methods",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/e33c704237fc18f67d3479e448d7a5f59064b914",
        "file": [
            {
                "patch": "@@ -1,14 +1,11 @@\n package brooklyn.entity.nosql.mongodb;\n \n+import java.util.List;\n import java.util.Map;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.google.common.base.Preconditions;\n-import com.google.common.base.Predicate;\n-import com.google.common.base.Predicates;\n-\n import brooklyn.entity.basic.EntityLocal;\n import brooklyn.entity.nosql.mongodb.sharding.MongoDBRouter;\n import brooklyn.entity.nosql.mongodb.sharding.MongoDBRouterCluster;\n@@ -50,24 +47,39 @@ public void launch() {\n         AbstractMongoDBServer server = getServer();\n         String host = server.getAttribute(AbstractMongoDBServer.HOSTNAME);\n         Integer port = server.getAttribute(AbstractMongoDBServer.PORT);\n-        try {\n-            for (String scriptName : entity.getConfig(MongoDBClient.STARTUP_JS_SCRIPTS)) {\n-                runScript(\"\", scriptName, host, port);\n+        \n+        List<String> scripts = entity.getConfig(MongoDBClient.STARTUP_JS_SCRIPTS);\n+        if (scripts!=null) {\n+            for (String scriptName : scripts) {\n+                try {\n+                    LOG.debug(\"Running MongoDB script \"+scriptName+\" at \"+getEntity());\n+                    runScript(\"\", scriptName, host, port);\n+                } catch (Exception e) {\n+                    LOG.warn(\"Error running MongoDB script \"+scriptName+\" at \"+getEntity()+\", throwing: \"+e);\n+                    isRunning = false;\n+                    Exceptions.propagateIfFatal(e);\n+                    throw new IllegalStateException(\"Error running MongoDB script \"+scriptName+\" at \"+entity+\": \"+e, e);\n+                }\n             }\n-        } catch (NullPointerException e) {\n-            // FIXME avoid the null ptr, and do something more intelligent\n-            LOG.error(\"startupScripts not specified in MongoDBClientSshDriver launch method;\", e);\n-            isRunning = false;\n-            return;\n         }\n         isRunning = true;\n     }\n     \n     @Override\n     public boolean isRunning() {\n+        // TODO better would be to get some confirmation\n         return isRunning;\n     }\n     \n+    @Override\n+    public void stop() {\n+        try {\n+            super.stop();\n+        } finally {\n+            isRunning = false;\n+        }\n+    }\n+    \n     private String getUserScriptDir() {\n         return getRunDir() + \"/userScripts/\" ;\n     }",
                "additions": 24,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/e33c704237fc18f67d3479e448d7a5f59064b914/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java",
                "status": "modified",
                "changes": 36,
                "deletions": 12,
                "sha": "5e4f325323a9476d340a84752fef6021a148ba42",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/e33c704237fc18f67d3479e448d7a5f59064b914/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java",
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java?ref=e33c704237fc18f67d3479e448d7a5f59064b914"
            }
        ],
        "bug_id": "brooklyn-library_22",
        "parent": "https://github.com/apache/brooklyn-library/commit/5a98f8ca29b5288c17031d825dd32c9e7a08733f",
        "message": "tidy of MongoDB client NPE check (as per discussion in #1327), and clearing isRunning on stop",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/5a98f8ca29b5288c17031d825dd32c9e7a08733f",
        "file": [
            {
                "patch": "@@ -2,6 +2,13 @@\n \n import java.util.Map;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Predicate;\n+import com.google.common.base.Predicates;\n+\n import brooklyn.entity.basic.EntityLocal;\n import brooklyn.entity.nosql.mongodb.sharding.MongoDBRouter;\n import brooklyn.entity.nosql.mongodb.sharding.MongoDBRouterCluster;\n@@ -18,6 +25,8 @@\n \n public class MongoDBClientSshDriver extends AbstractMongoDBSshDriver implements MongoDBClientDriver {\n     \n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDBClientSshDriver.class);\n+\n     private boolean isRunning = false;\n \n     public MongoDBClientSshDriver(EntityLocal entity, SshMachineLocation machine) {\n@@ -41,8 +50,15 @@ public void launch() {\n         AbstractMongoDBServer server = getServer();\n         String host = server.getAttribute(AbstractMongoDBServer.HOSTNAME);\n         Integer port = server.getAttribute(AbstractMongoDBServer.PORT);\n-        for (String scriptName : entity.getConfig(MongoDBClient.STARTUP_JS_SCRIPTS)) {\n-            runScript(\"\", scriptName, host, port);\n+        try {\n+            for (String scriptName : entity.getConfig(MongoDBClient.STARTUP_JS_SCRIPTS)) {\n+                runScript(\"\", scriptName, host, port);\n+            }\n+        } catch (NullPointerException e) {\n+            // FIXME avoid the null ptr, and do something more intelligent\n+            LOG.error(\"startupScripts not specified in MongoDBClientSshDriver launch method;\", e);\n+            isRunning = false;\n+            return;\n         }\n         isRunning = true;\n     }",
                "additions": 18,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/5a98f8ca29b5288c17031d825dd32c9e7a08733f/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java",
                "status": "modified",
                "changes": 20,
                "deletions": 2,
                "sha": "a8636b3756b40b89f860d8ec3e95b454cd9eb79c",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/5a98f8ca29b5288c17031d825dd32c9e7a08733f/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java",
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java?ref=5a98f8ca29b5288c17031d825dd32c9e7a08733f"
            }
        ],
        "bug_id": "brooklyn-library_23",
        "parent": "https://github.com/apache/brooklyn-library/commit/7029b29aaa8396527aff42997345c8fa06f63e7e",
        "message": "Merge branch 'npe' of https://github.com/dave-finnegan/brooklyn into misc",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/8c7b440ac0839fa4582f894def4ed3bfd63b5a41",
        "file": [
            {
                "patch": "@@ -396,14 +396,14 @@ public void update() {\n             setAttribute(SERVICE_UP, upNode.isPresent());\n \n             if (upNode.isPresent()) {\n-                setAttribute(HOSTNAME, upNode.get().getAttribute(Attributes.HOSTNAME));\n-                setAttribute(THRIFT_PORT, upNode.get().getAttribute(CassandraNode.THRIFT_PORT));\n+                setAttribute(HOSTNAME, upNode.get().getAttribute(HOSTNAME));\n+                setAttribute(THRIFT_PORT, upNode.get().getAttribute(THRIFT_PORT));\n \n                 List<String> currentNodes = getAttribute(CASSANDRA_CLUSTER_NODES);\n                 Set<String> oldNodes = (currentNodes != null) ? ImmutableSet.copyOf(currentNodes) : ImmutableSet.<String>of();\n                 Set<String> newNodes = MutableSet.<String>of();\n-                for (Entity member: getMembers()) {\n-                    if (member.getAttribute(SERVICE_UP)==Boolean.TRUE) {\n+                for (Entity member : getMembers()) {\n+                    if (member instanceof CassandraNode && member.getAttribute(SERVICE_UP) == Boolean.TRUE) {\n                         HostAndPort address = HostAndPort.fromParts(member.getAttribute(HOSTNAME), member.getAttribute(THRIFT_PORT));\n                         newNodes.add(address.toString());\n                     }",
                "additions": 4,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/8c7b440ac0839fa4582f894def4ed3bfd63b5a41/software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java",
                "status": "modified",
                "changes": 8,
                "deletions": 4,
                "sha": "6c73ae175347f19d2450c22e44a9443a21226a8f",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/8c7b440ac0839fa4582f894def4ed3bfd63b5a41/software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java",
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java?ref=8c7b440ac0839fa4582f894def4ed3bfd63b5a41"
            }
        ],
        "bug_id": "brooklyn-library_24",
        "parent": "https://github.com/apache/brooklyn-library/commit/80078f9264f5a3535e7031061d448c6160bdfa83",
        "message": "Fix NPE in tests by adding instanceof check for cluster members",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/08e185c2a11d466a1198625764c641905830d5d2",
        "file": [
            {
                "patch": "@@ -25,10 +25,12 @@\n import brooklyn.entity.basic.SoftwareProcess;\n import brooklyn.entity.proxying.ImplementedBy;\n import brooklyn.event.AttributeSensor;\n+import brooklyn.event.basic.BasicAttributeSensor;\n import brooklyn.event.basic.BasicConfigKey;\n import brooklyn.event.basic.PortAttributeSensorAndConfigKey;\n import brooklyn.location.basic.PortRanges;\n import brooklyn.util.flags.SetFromFlag;\n+import brooklyn.util.net.Cidr;\n \n import com.google.common.base.Predicate;\n import com.google.common.base.Predicates;\n@@ -52,12 +54,11 @@\n \n     @SetFromFlag(\"reverseLookupNetwork\")\n     ConfigKey<String> REVERSE_LOOKUP_NETWORK = new BasicConfigKey<String>(String.class,\n-            \"bind.reverse-lookup.address\", \"Network address for reverse lookup zone (defaults to server address /24)\");\n+            \"bind.reverse-lookup.address\", \"Network address for reverse lookup zone\");\n \n     @SetFromFlag(\"subnet\")\n     ConfigKey<String> MANAGEMENT_CIDR = new BasicConfigKey<String>(String.class,\n-            \"bind.access.cidr\", \"Subnet CIDR allowed to access DNS\", \"0.0.0.0/0\");\n-            // TODO should default be a /0, or 'any', or use brooklyn management CIDR?\n+            \"bind.access.cidr\", \"Subnet CIDR or ACL allowed to access DNS\", \"0.0.0.0/0\");\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     @SetFromFlag(\"hostnameSensor\")\n@@ -82,6 +83,14 @@\n             \"bind.template.named-conf\", \"The BIND named configuration file (as FreeMarker template)\",\n             \"classpath://brooklyn/entity/network/bind/named.conf\");\n \n+    /* Reverse lookup attributes. */\n+\n+    AttributeSensor<Cidr> REVERSE_LOOKUP_CIDR = new BasicAttributeSensor<Cidr>(Cidr.class,\n+            \"bind.reverse-lookup.cidr\", \"The network CIDR that hosts must have for reverse lookup entriers to be added (default uses server address /24)\");\n+\n+    AttributeSensor<String> REVERSE_LOOKUP_DOMAIN = new BasicAttributeSensor<String>(String.class,\n+            \"bind.reverse-lookup.domain\", \"The in-addr.arpa reverse lookup domain name\");\n+\n     /* Configuration applicable to clients of the BIND DNS service. */\n \n     @SetFromFlag(\"replaceResolvConf\")",
                "additions": 12,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/08e185c2a11d466a1198625764c641905830d5d2/software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServer.java",
                "status": "modified",
                "changes": 15,
                "deletions": 3,
                "sha": "271e898bac199988041f3e2eee2b5712b633937b",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/08e185c2a11d466a1198625764c641905830d5d2/software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServer.java",
                "filename": "software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServer.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServer.java?ref=08e185c2a11d466a1198625764c641905830d5d2"
            },
            {
                "patch": "@@ -16,8 +16,6 @@\n package brooklyn.entity.network.bind;\n \n import java.io.ByteArrayInputStream;\n-import java.net.InetAddress;\n-import java.util.List;\n import java.util.Map;\n import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.atomic.AtomicLong;\n@@ -67,7 +65,6 @@\n     private Multimap<Location, Entity> entityLocations = HashMultimap.create();\n     private ConcurrentMap<String, String> addressMappings = Maps.newConcurrentMap();\n     private ConcurrentMap<String, String> reverseMappings = Maps.newConcurrentMap();\n-    private Cidr reverseNetwork;\n \n     public BindDnsServerImpl() {\n         super();\n@@ -89,11 +86,12 @@ public long getSerial() {\n         return serial.incrementAndGet();\n     }\n \n+    public Cidr getReverseLookupNetwork() {\n+        return getAttribute(REVERSE_LOOKUP_CIDR);\n+    }\n+\n     public String getReverseLookupDomain() {\n-        String reverse = getConfig(REVERSE_LOOKUP_NETWORK);\n-        if (Strings.isBlank(reverse)) reverse = getAttribute(ADDRESS);\n-        reverseNetwork = new Cidr(reverse + \"/24\");\n-        return Joiner.on('.').join(Iterables.skip(Lists.reverse(Lists.newArrayList(Splitter.on('.').split(reverse))), 1)) + \" .in-addr.arpa\";\n+        return getAttribute(REVERSE_LOOKUP_DOMAIN);\n     }\n \n     @Override\n@@ -134,6 +132,12 @@ public void disconnectSensors() {\n \n     @Override\n     protected void preStart() {\n+        String reverse = getConfig(REVERSE_LOOKUP_NETWORK);\n+        if (Strings.isBlank(reverse)) reverse = getAttribute(ADDRESS);\n+        setAttribute(REVERSE_LOOKUP_CIDR, new Cidr(reverse + \"/24\"));\n+        String reverseLookupDomain = Joiner.on('.').join(Iterables.skip(Lists.reverse(Lists.newArrayList(Splitter.on('.').split(reverse))), 1)) + \".in-addr.arpa\";\n+        setAttribute(REVERSE_LOOKUP_DOMAIN, reverseLookupDomain);\n+\n         Map<?, ?> flags = MutableMap.builder()\n                 .put(\"name\", \"Address tracker\")\n                 .put(\"sensorsToTrack\", ImmutableSet.of(getConfig(HOSTNAME_SENSOR)))\n@@ -142,14 +146,16 @@ protected void preStart() {\n             @Override\n             protected void onEntityChange(Entity member) { added(member); }\n             @Override\n-            protected void onEntityAdded(Entity member) { added(member); }\n+            protected void onEntityAdded(Entity member) {\n+                if (Strings.isNonBlank(member.getAttribute(getConfig(HOSTNAME_SENSOR)))) added(member); // Ignore, unless hostname set\n+            }\n             @Override\n             protected void onEntityRemoved(Entity member) { removed(member); }\n         };\n \n         // For any entities that have already come up\n         for (Entity member : entities.getMembers()) {\n-            added(member);\n+            if (Strings.isNonBlank(member.getAttribute(getConfig(HOSTNAME_SENSOR)))) added(member); // Ignore, unless hostname set\n         }\n \n         addPolicy(policy);\n@@ -171,7 +177,7 @@ public void added(Entity member) {\n                 if (!entityLocations.containsKey(machine)) {\n                     entityLocations.put(machine, member);\n                     addressMappings.putIfAbsent(address, hostname);\n-                    if (reverseNetwork.contains(new Cidr(address + \"/32\"))) {\n+                    if (getReverseLookupNetwork().contains(new Cidr(address + \"/32\"))) {\n                         String octet = Iterables.get(Splitter.on('.').split(address), 3);\n                         reverseMappings.putIfAbsent(hostname, octet);\n                     }\n@@ -181,8 +187,6 @@ public void added(Entity member) {\n                     configure(machine);\n                     LOG.info(\"{} added at location {} with name {}\", new Object[] { member, machine, hostname });\n                 }\n-            } else {\n-                LOG.warn(\"added({}) called but entity not ready\", member);\n             }\n         }\n     }\n@@ -208,12 +212,10 @@ private Location findLocation(Entity member) {\n                     return entry.getKey();\n                 }\n             }\n-            return null;\n-        } else {\n-            return null;\n         }\n+        return null;\n     }\n-    \n+\n     public void update() {\n         Optional<Location> location = Iterables.tryFind(getLocations(), Predicates.instanceOf(SshMachineLocation.class));\n         SshMachineLocation machine = (SshMachineLocation) location.get();",
                "additions": 18,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/08e185c2a11d466a1198625764c641905830d5d2/software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServerImpl.java",
                "status": "modified",
                "changes": 34,
                "deletions": 16,
                "sha": "6ab00b68adf0e39a92ce61eeb5260b6c4935ae91",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/08e185c2a11d466a1198625764c641905830d5d2/software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServerImpl.java",
                "filename": "software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServerImpl.java?ref=08e185c2a11d466a1198625764c641905830d5d2"
            }
        ],
        "bug_id": "brooklyn-library_25",
        "parent": "https://github.com/apache/brooklyn-library/commit/cd3e70ff53fdc46f96d65dfc837ad561b804d5c4",
        "message": "Review changes for #810 including fix for NPE and adding new reverse lookup attributes",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/9646913394b964be1f6b88243cbfac01ab01f004",
        "file": [
            {
                "patch": "@@ -5,8 +5,8 @@\n import io.brooklyn.camp.brooklyn.spi.creation.BrooklynEntityMatcher;\n import io.brooklyn.camp.brooklyn.spi.dsl.BrooklynDslInterpreter;\n import io.brooklyn.camp.brooklyn.spi.platform.BrooklynImmutableCampPlatform;\n-import io.brooklyn.camp.brooklyn.spi.platform.HasBrooklynManagementContext;\n import io.brooklyn.camp.spi.PlatformRootSummary;\n+import brooklyn.camp.brooklyn.api.HasBrooklynManagementContext;\n import brooklyn.config.BrooklynProperties;\n import brooklyn.management.ManagementContext;\n import brooklyn.management.ManagementContext.PropertiesReloadListener;",
                "additions": 1,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/9646913394b964be1f6b88243cbfac01ab01f004/usage/camp/src/main/java/io/brooklyn/camp/brooklyn/BrooklynCampPlatform.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "32102eea744b126f89b31c50433c6ce0746a701c",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/9646913394b964be1f6b88243cbfac01ab01f004/usage/camp/src/main/java/io/brooklyn/camp/brooklyn/BrooklynCampPlatform.java",
                "filename": "usage/camp/src/main/java/io/brooklyn/camp/brooklyn/BrooklynCampPlatform.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/usage/camp/src/main/java/io/brooklyn/camp/brooklyn/BrooklynCampPlatform.java?ref=9646913394b964be1f6b88243cbfac01ab01f004"
            }
        ],
        "bug_id": "brooklyn-library_26",
        "parent": "https://github.com/apache/brooklyn-library/commit/5ccaffaf5e925806fbef35e41c7d3edccbc0fafe",
        "message": "create specs from catalog items, and use these in many places.  also fix some NPE and serialization issues.",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/b37975348fde31fbc571ed1ba31b416b8a581806",
        "file": [
            {
                "patch": "@@ -19,6 +19,7 @@\n import brooklyn.config.ConfigKey;\n import brooklyn.entity.Entity;\n import brooklyn.entity.Group;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.entity.basic.ConfigKeys;\n import brooklyn.entity.group.Cluster;\n import brooklyn.entity.group.DynamicCluster;\n@@ -30,7 +31,6 @@\n import brooklyn.event.AttributeSensor;\n import brooklyn.event.basic.BasicAttributeSensor;\n import brooklyn.event.basic.BasicAttributeSensorAndConfigKey;\n-import brooklyn.event.basic.BasicConfigKey;\n import brooklyn.util.flags.SetFromFlag;\n \n /**\n@@ -56,7 +56,7 @@\n public interface KafkaCluster extends Entity, Startable, Resizable, Group  {\n \n     @SetFromFlag(\"startTimeout\")\n-    ConfigKey<Integer> START_TIMEOUT = ConfigKeys.START_TIMEOUT;\n+    ConfigKey<Integer> START_TIMEOUT = BrooklynConfigKeys.START_TIMEOUT;\n \n     @SetFromFlag(\"initialSize\")\n     ConfigKey<Integer> INITIAL_SIZE = ConfigKeys.newConfigKeyWithDefault(Cluster.INITIAL_SIZE, 1);",
                "additions": 2,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/b37975348fde31fbc571ed1ba31b416b8a581806/software/messaging/src/main/java/brooklyn/entity/messaging/kafka/KafkaCluster.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "1217468e22ea2ac72731d2b5cdd8fc8577f61e5a",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/b37975348fde31fbc571ed1ba31b416b8a581806/software/messaging/src/main/java/brooklyn/entity/messaging/kafka/KafkaCluster.java",
                "filename": "software/messaging/src/main/java/brooklyn/entity/messaging/kafka/KafkaCluster.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/messaging/src/main/java/brooklyn/entity/messaging/kafka/KafkaCluster.java?ref=b37975348fde31fbc571ed1ba31b416b8a581806"
            }
        ],
        "bug_id": "brooklyn-library_27",
        "parent": "https://github.com/apache/brooklyn-library/commit/a63a037ad78bda0a836e85a7f9e8a0fffcf083f4",
        "message": "Deletes keys defined in ConfigKeys\n\n- Update all uses to the new BrooklynConfigKeys\n- Was previously deprecated, with fields in ConfigKeys referencing\n  those in BrooklynConfigKeys. But this led to strange NPEs where\n  ConfigKeys fields were null (presumably due to ordering of\n  initialising the two classes' fields)!\n- Breaks backwards compatibility, but better to have a compilation error\n  than a weird NPE.",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/fa6744e994c34529b36a0b3f97463b657ff0d67b",
        "file": [
            {
                "patch": "@@ -21,12 +21,16 @@\n import java.util.Collection;\n \n import brooklyn.enricher.Enrichers;\n+import brooklyn.entity.basic.Entities;\n import brooklyn.entity.basic.SameServerEntityImpl;\n import brooklyn.entity.proxying.EntitySpec;\n import brooklyn.entity.trait.Startable;\n import brooklyn.event.basic.DependentConfiguration;\n import brooklyn.location.Location;\n \n+import com.google.common.base.Predicates;\n+import com.google.common.collect.Iterables;\n+\n public class CoLocatedMongoDBRouterImpl extends SameServerEntityImpl implements CoLocatedMongoDBRouter {\n     @Override\n     public void init() {\n@@ -35,15 +39,32 @@ public void init() {\n         for (EntitySpec<?> siblingSpec : getConfig(CoLocatedMongoDBRouter.SIBLING_SPECS)) {\n             addChild(siblingSpec);\n         }\n-        setAttribute(ROUTER, addChild(EntitySpec.create(MongoDBRouter.class)\n-                .configure(MongoDBRouter.CONFIG_SERVERS,\n-                        DependentConfiguration.attributeWhenReady(getConfig(CoLocatedMongoDBRouter.SHARDED_DEPLOYMENT), MongoDBConfigServerCluster.CONFIG_SERVER_ADDRESSES))));\n-        addEnricher(Enrichers.builder().propagating(MongoDBRouter.PORT).from(getAttribute(ROUTER)).build());\n     }\n-    \n+\n     @Override\n     protected void doStart(Collection<? extends Location> locations) {\n-        super.start(locations);\n+        // TODO Changed to create the router child after init as a workaround.\n+        // When we use `mongo-sharded.yaml`, and we call \n+        // `getConfig(CoLocatedMongoDBRouter.SHARDED_DEPLOYMENT)`,\n+        // the value is `$brooklyn:component(\"shardeddeployment\")`.\n+        // To look up the component, it tries to do `entity().getApplication()` to\n+        // search the entities for one with the correct id. However if being done\n+        // during `init()`, then this (which is returned by `entity()`) has not had its parent\n+        // set, so `entity().getApplication()` returns null.\n+        //\n+        // We should move this code back to `init()` once we have a solution for that.\n+        // We can also remove the call to Entities.manage() once this is in init() again.\n+        \n+        MongoDBRouter router = addChild(EntitySpec.create(MongoDBRouter.class)\n+                .configure(MongoDBRouter.CONFIG_SERVERS,\n+                        DependentConfiguration.attributeWhenReady(\n+                                getConfig(CoLocatedMongoDBRouter.SHARDED_DEPLOYMENT), \n+                                MongoDBConfigServerCluster.CONFIG_SERVER_ADDRESSES)));\n+        Entities.manage(router);\n+        setAttribute(ROUTER, (MongoDBRouter) Iterables.tryFind(getChildren(), Predicates.instanceOf(MongoDBRouter.class)).get());\n+        addEnricher(Enrichers.builder().propagating(MongoDBRouter.PORT).from(router).build());\n+        \n+        super.doStart(locations);\n         setAttribute(Startable.SERVICE_UP, true);\n     }\n }",
                "additions": 27,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/fa6744e994c34529b36a0b3f97463b657ff0d67b/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/sharding/CoLocatedMongoDBRouterImpl.java",
                "status": "modified",
                "changes": 33,
                "deletions": 6,
                "sha": "a8bec4e8af0194b14208ad122d75f652179df3fb",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/fa6744e994c34529b36a0b3f97463b657ff0d67b/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/sharding/CoLocatedMongoDBRouterImpl.java",
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/sharding/CoLocatedMongoDBRouterImpl.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/sharding/CoLocatedMongoDBRouterImpl.java?ref=fa6744e994c34529b36a0b3f97463b657ff0d67b"
            }
        ],
        "bug_id": "brooklyn-library_28",
        "parent": "https://github.com/apache/brooklyn-library/commit/332b6b50ceebc7c17f9fbc0718cd27f42c84fa3b",
        "message": "Fix sharded-mongodb, with CoLocatedMongoDbRouter\n\n- was getting NPE in CoLocatedMongoDbRouter.init, while trying to\n  resolve config set in yam that pointed at another entity.",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/113d0392c00cdcb6810bc58780b9b846ad2c4e8a",
        "file": [
            {
                "patch": "@@ -8,12 +8,14 @@\n import brooklyn.entity.basic.MethodEffector;\n import brooklyn.entity.basic.SoftwareProcess;\n import brooklyn.entity.proxying.ImplementedBy;\n+import brooklyn.entity.webapp.WebAppService;\n import brooklyn.entity.webapp.WebAppServiceConstants;\n import brooklyn.event.AttributeSensor;\n import brooklyn.event.basic.BasicAttributeSensorAndConfigKey;\n import brooklyn.event.basic.PortAttributeSensorAndConfigKey;\n import brooklyn.event.basic.Sensors;\n import brooklyn.util.flags.SetFromFlag;\n+import brooklyn.util.text.ByteSizeStrings;\n \n @ImplementedBy(CouchbaseNodeImpl.class)\n public interface CouchbaseNode extends SoftwareProcess {\n@@ -78,27 +80,33 @@\n             \"Retrieved from pools/nodes/<current node>/interestingStats/cmd_get\");\n     AttributeSensor<Integer> CURR_ITEMS_TOT = Sensors.newIntegerSensor(\"couchbase.stats.curr.items.tot\", \n             \"Retrieved from pools/nodes/<current node>/interestingStats/curr_items_tot\");\n+\n     \n-    // this class is added because the ROOT_URL relies on a static initialization which unfortunately\n-    // can't be added to\n-    // an interface.\n     class RootUrl {\n-        public static final AttributeSensor<String> ROOT_URL = Sensors.newStringSensor(\"webapp.url\", \"URL\");\n-\n+        public static final AttributeSensor<String> ROOT_URL = WebAppService.ROOT_URL;\n+        \n         static {\n-            RendererHints.register(ROOT_URL, new RendererHints.NamedActionWithUrl(\"Open\"));\n+            // ROOT_URL does not need init because it refers to something already initialized\n             RendererHints.register(COUCHBASE_WEB_ADMIN_URL, new RendererHints.NamedActionWithUrl(\"Open\"));\n+\n+            RendererHints.register(COUCH_DOCS_DATA_SIZE, RendererHints.displayValue(ByteSizeStrings.metric()));\n+            RendererHints.register(COUCH_DOCS_ACTUAL_DISK_SIZE, RendererHints.displayValue(ByteSizeStrings.metric()));\n+            RendererHints.register(MEM_USED, RendererHints.displayValue(ByteSizeStrings.metric()));\n+            RendererHints.register(COUCH_VIEWS_ACTUAL_DISK_SIZE, RendererHints.displayValue(ByteSizeStrings.metric()));\n+            RendererHints.register(COUCH_VIEWS_DATA_SIZE, RendererHints.displayValue(ByteSizeStrings.metric()));\n         }\n     }\n+    \n+    // this long-winded reference is done just to trigger the initialization above\n+    AttributeSensor<String> ROOT_URL = RootUrl.ROOT_URL;\n \n-    public static final MethodEffector<Void> SERVER_ADD = new MethodEffector<Void>(CouchbaseNode.class, \"serverAdd\");\n-    public static final MethodEffector<Void> REBALANCE = new MethodEffector<Void>(CouchbaseNode.class, \"rebalance\");\n+    MethodEffector<Void> SERVER_ADD = new MethodEffector<Void>(CouchbaseNode.class, \"serverAdd\");\n+    MethodEffector<Void> REBALANCE = new MethodEffector<Void>(CouchbaseNode.class, \"rebalance\");\n \n     @Effector(description = \"add a server to a cluster\")\n     public void serverAdd(@EffectorParam(name = \"serverHostname\") String serverToAdd, @EffectorParam(name = \"username\") String username, @EffectorParam(name = \"password\") String password);\n \n     @Effector(description = \"rebalance the couchbase cluster\")\n     public void rebalance();\n \n-\n }",
                "additions": 17,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/113d0392c00cdcb6810bc58780b9b846ad2c4e8a/software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNode.java",
                "status": "modified",
                "changes": 26,
                "deletions": 9,
                "sha": "46b49f5cd5fb10cd194ea0f4a7502174a7bf9f71",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/113d0392c00cdcb6810bc58780b9b846ad2c4e8a/software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNode.java",
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNode.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNode.java?ref=113d0392c00cdcb6810bc58780b9b846ad2c4e8a"
            },
            {
                "patch": "@@ -8,6 +8,7 @@\n \n import brooklyn.entity.basic.Attributes;\n import brooklyn.entity.basic.SoftwareProcessImpl;\n+import brooklyn.event.AttributeSensor;\n import brooklyn.event.SensorEvent;\n import brooklyn.event.SensorEventListener;\n import brooklyn.event.feed.http.HttpFeed;\n@@ -19,6 +20,9 @@\n import brooklyn.location.cloud.CloudLocationConfig;\n import brooklyn.util.collections.MutableSet;\n import brooklyn.util.config.ConfigBag;\n+import brooklyn.util.guava.Functionals;\n+import brooklyn.util.guava.MaybeFunctions;\n+import brooklyn.util.guava.TypeTokens;\n import brooklyn.util.http.HttpToolResponse;\n \n import com.google.common.base.Function;\n@@ -88,26 +92,35 @@ public void rebalance() {\n         getDriver().rebalance();\n     }\n \n+    protected final static Function<HttpToolResponse, JsonElement> GET_THIS_NODE_STATS = Functionals.chain(\n+        HttpValueFunctions.jsonContents(), \n+        JsonFunctions.walk(\"nodes\"), \n+        new Function<JsonElement, JsonElement>() {\n+            @Override public JsonElement apply(JsonElement input) {\n+                JsonArray nodes = input.getAsJsonArray();\n+                for (JsonElement element : nodes) {\n+                    JsonElement thisNode = element.getAsJsonObject().get(\"thisNode\");\n+                    if (thisNode!=null && Boolean.TRUE.equals(thisNode.getAsBoolean())) {\n+                        return element.getAsJsonObject().get(\"interestingStats\");\n+                    }\n+                }\n+                return null;\n+        }}\n+    );\n+    \n+    protected final static <T> HttpPollConfig<T> getSensorFromNodeStat(AttributeSensor<T> sensor, String ...jsonPath) {\n+        return new HttpPollConfig<T>(sensor)\n+            .onSuccess(Functionals.chain(GET_THIS_NODE_STATS, \n+                MaybeFunctions.<JsonElement>wrap(), \n+                JsonFunctions.walkM(jsonPath), \n+                JsonFunctions.castM(TypeTokens.getRawRawType(sensor.getTypeToken()), null)))\n+            .onFailureOrException(Functions.<T>constant(null));\n+    }\n \n     public void connectSensors() {\n         super.connectSensors();\n         connectServiceUpIsRunning();\n-        \n-        Function<HttpToolResponse, JsonElement> getThisNodesStats = HttpValueFunctions.chain(\n-            HttpValueFunctions.jsonContents(), \n-            JsonFunctions.walk(\"nodes\"), \n-            new Function<JsonElement, JsonElement>() {\n-                @Override public JsonElement apply(JsonElement input) {\n-                    JsonArray nodes = input.getAsJsonArray();\n-                    for (JsonElement element : nodes) {\n-                        if (Boolean.TRUE.equals(element.getAsJsonObject().get(\"thisNode\").getAsBoolean())) {\n-                            return element.getAsJsonObject().get(\"interestingStats\");\n-                        }\n-                    }\n-                    return null;\n-            }}\n-        );\n-        \n+                \n         Integer rawPort = getAttribute(CouchbaseNode.COUCHBASE_WEB_ADMIN_PORT);\n         Preconditions.checkNotNull(rawPort, \"HTTP_PORT sensors not set for %s; is an acceptable port available?\", this);\n         HostAndPort hp = BrooklynAccessUtils.getBrooklynAccessibleAddress(this, rawPort);\n@@ -119,42 +132,18 @@ public void connectSensors() {\n             .period(1000)\n             .baseUri(adminUrl + \"/pools/nodes/\")\n             .credentialsIfNotNull(getConfig(CouchbaseNode.COUCHBASE_ADMIN_USERNAME), getConfig(CouchbaseNode.COUCHBASE_ADMIN_PASSWORD))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.OPS)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"ops\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.COUCH_DOCS_DATA_SIZE)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"couch_docs_data_size\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.COUCH_DOCS_ACTUAL_DISK_SIZE)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"couch_docs_actual_disk_size\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.EP_BG_FETCHED)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"ep_bg_fetched\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.MEM_USED)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"mem_used\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.COUCH_VIEWS_ACTUAL_DISK_SIZE)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"couch_views_actual_disk_size\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.CURR_ITEMS)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"curr_items\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.VB_REPLICA_CURR_ITEMS)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"vb_replica_curr_items\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.COUCH_VIEWS_DATA_SIZE)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"couch_views_data_size\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.GET_HITS)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"get_hits\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.CMD_GET)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"cmd_get\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.CURR_ITEMS_TOT)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"curr_items_tot\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.OPS, \"ops\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.COUCH_DOCS_DATA_SIZE, \"couch_docs_data_size\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.COUCH_DOCS_ACTUAL_DISK_SIZE, \"couch_docs_actual_disk_size\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.EP_BG_FETCHED, \"ep_bg_fetched\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.MEM_USED, \"mem_used\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.COUCH_VIEWS_ACTUAL_DISK_SIZE, \"couch_views_actual_disk_size\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.CURR_ITEMS, \"curr_items\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.VB_REPLICA_CURR_ITEMS, \"vb_replica_curr_items\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.COUCH_VIEWS_DATA_SIZE, \"couch_views_data_size\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.GET_HITS, \"get_hits\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.CMD_GET, \"cmd_get\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.CURR_ITEMS_TOT, \"curr_items_tot\"))\n             .build();\n     }\n ",
                "additions": 41,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/113d0392c00cdcb6810bc58780b9b846ad2c4e8a/software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNodeImpl.java",
                "status": "modified",
                "changes": 93,
                "deletions": 52,
                "sha": "06d9c187688fc6e83e67f3561749e028f71de1d0",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/113d0392c00cdcb6810bc58780b9b846ad2c4e8a/software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNodeImpl.java",
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNodeImpl.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNodeImpl.java?ref=113d0392c00cdcb6810bc58780b9b846ad2c4e8a"
            },
            {
                "patch": "@@ -1,9 +1,11 @@\n package brooklyn.entity.webapp;\n \n+import brooklyn.config.render.RendererHints;\n import brooklyn.entity.group.DynamicCluster;\n import brooklyn.entity.proxying.ImplementedBy;\n import brooklyn.event.AttributeSensor;\n import brooklyn.event.basic.BasicAttributeSensor;\n+import brooklyn.util.time.Duration;\n \n /**\n  * DynamicWebAppClusters provide cluster-wide aggregates of entity attributes.  Currently totals and averages:\n@@ -29,10 +31,17 @@\n     public static final AttributeSensor<Double> REQUESTS_PER_SECOND_IN_WINDOW_PER_NODE = new BasicAttributeSensor<Double>(\n             Double.class, \"webapp.reqs.perSec.windowed.perNode\", \"Reqs/sec (over time window) averaged over all nodes\");\n \n-    public static final AttributeSensor<Integer> TOTAL_PROCESSING_TIME_PER_NODE = new BasicAttributeSensor<Integer>(\n-            Integer.class, \"webapp.reqs.processingTime.perNode\", \"Total processing time per node\");\n+    public static final AttributeSensor<Integer> TOTAL_PROCESSING_TIME_PER_NODE = ApplyDisplayHints.TOTAL_PROCESSING_TIME_PER_NODE;\n \n     public static final AttributeSensor<Double> PROCESSING_TIME_FRACTION_IN_WINDOW_PER_NODE = new BasicAttributeSensor<Double>(\n             Double.class, \"webapp.reqs.processingTime.fraction.windowed.perNode\", \"Fraction of time spent processing reported by webserver (percentage, over time window) averaged over all nodes\");\n \n+    class ApplyDisplayHints {\n+        public static final AttributeSensor<Integer> TOTAL_PROCESSING_TIME_PER_NODE = new BasicAttributeSensor<Integer>(\n+            Integer.class, \"webapp.reqs.processingTime.perNode\", \"Total processing time per node (millis)\");\n+        static {\n+            RendererHints.register(TOTAL_PROCESSING_TIME_PER_NODE, RendererHints.displayValue(Duration.millisToStringRounded()));\n+        }\n+    }\n+\n }",
                "additions": 11,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/113d0392c00cdcb6810bc58780b9b846ad2c4e8a/software/webapp/src/main/java/brooklyn/entity/webapp/DynamicWebAppCluster.java",
                "status": "modified",
                "changes": 13,
                "deletions": 2,
                "sha": "19f320d4ef5594deb7ac1f374395eb650300b95f",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/113d0392c00cdcb6810bc58780b9b846ad2c4e8a/software/webapp/src/main/java/brooklyn/entity/webapp/DynamicWebAppCluster.java",
                "filename": "software/webapp/src/main/java/brooklyn/entity/webapp/DynamicWebAppCluster.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/webapp/src/main/java/brooklyn/entity/webapp/DynamicWebAppCluster.java?ref=113d0392c00cdcb6810bc58780b9b846ad2c4e8a"
            },
            {
                "patch": "@@ -23,12 +23,8 @@\n     public static final AttributeSensor<Integer> ERROR_COUNT_PER_NODE = new BasicAttributeSensor<Integer>(\n             Integer.class, \"webapp.reqs.errors.perNode\", \"Fabric entity request error average\");\n \n-    public static final AttributeSensor<Double> REQUESTS_PER_SECOND_LAST_PER_NODE = new BasicAttributeSensor<Double>(\n-            Double.class, \"webapp.reqs.perSec.last.perNode\", \"Reqs/sec (last datapoint) averaged over all nodes\");\n+    public static final AttributeSensor<Double> REQUESTS_PER_SECOND_LAST_PER_NODE = DynamicWebAppCluster.REQUESTS_PER_SECOND_LAST_PER_NODE;\n+    public static final AttributeSensor<Double> REQUESTS_PER_SECOND_IN_WINDOW_PER_NODE = DynamicWebAppCluster.REQUESTS_PER_SECOND_IN_WINDOW_PER_NODE;\n+    public static final AttributeSensor<Integer> TOTAL_PROCESSING_TIME_PER_NODE = DynamicWebAppCluster.TOTAL_PROCESSING_TIME_PER_NODE;\n \n-    public static final AttributeSensor<Double> REQUESTS_PER_SECOND_IN_WINDOW_PER_NODE = new BasicAttributeSensor<Double>(\n-            Double.class, \"webapp.reqs.perSec.windowed.perNode\", \"Reqs/sec (over time window) averaged over all nodes\");\n-\n-    public static final AttributeSensor<Integer> TOTAL_PROCESSING_TIME_PER_NODE = new BasicAttributeSensor<Integer>(\n-            Integer.class, \"webapp.reqs.processingTime.perNode\", \"Total processing time per node\");\n }",
                "additions": 3,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/113d0392c00cdcb6810bc58780b9b846ad2c4e8a/software/webapp/src/main/java/brooklyn/entity/webapp/DynamicWebAppFabric.java",
                "status": "modified",
                "changes": 10,
                "deletions": 7,
                "sha": "b1c75cfc9d3cc63c0dda56536244def7413640e3",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/113d0392c00cdcb6810bc58780b9b846ad2c4e8a/software/webapp/src/main/java/brooklyn/entity/webapp/DynamicWebAppFabric.java",
                "filename": "software/webapp/src/main/java/brooklyn/entity/webapp/DynamicWebAppFabric.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/webapp/src/main/java/brooklyn/entity/webapp/DynamicWebAppFabric.java?ref=113d0392c00cdcb6810bc58780b9b846ad2c4e8a"
            },
            {
                "patch": "@@ -10,6 +10,8 @@\n import brooklyn.event.basic.PortAttributeSensorAndConfigKey;\n import brooklyn.event.basic.Sensors;\n import brooklyn.util.flags.SetFromFlag;\n+import brooklyn.util.text.ByteSizeStrings;\n+import brooklyn.util.time.Duration;\n \n import com.google.common.collect.ImmutableList;\n \n@@ -71,5 +73,9 @@\n \n     static {\n         RendererHints.register(ROOT_URL, new RendererHints.NamedActionWithUrl(\"Open\"));\n+        RendererHints.register(WebAppServiceConstants.TOTAL_PROCESSING_TIME, RendererHints.displayValue(Duration.millisToStringRounded()));\n+        RendererHints.register(WebAppServiceConstants.MAX_PROCESSING_TIME, RendererHints.displayValue(Duration.millisToStringRounded()));\n+        RendererHints.register(WebAppServiceConstants.BYTES_RECEIVED, RendererHints.displayValue(ByteSizeStrings.metric()));\n+        RendererHints.register(WebAppServiceConstants.BYTES_SENT, RendererHints.displayValue(ByteSizeStrings.metric()));\n     }\n }",
                "additions": 6,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/113d0392c00cdcb6810bc58780b9b846ad2c4e8a/software/webapp/src/main/java/brooklyn/entity/webapp/WebAppServiceConstants.java",
                "status": "modified",
                "changes": 6,
                "deletions": 0,
                "sha": "91a46e2cd91158aeeddcb8d2b2d8b07069aed1a4",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/113d0392c00cdcb6810bc58780b9b846ad2c4e8a/software/webapp/src/main/java/brooklyn/entity/webapp/WebAppServiceConstants.java",
                "filename": "software/webapp/src/main/java/brooklyn/entity/webapp/WebAppServiceConstants.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/webapp/src/main/java/brooklyn/entity/webapp/WebAppServiceConstants.java?ref=113d0392c00cdcb6810bc58780b9b846ad2c4e8a"
            }
        ],
        "bug_id": "brooklyn-library_29",
        "parent": "https://github.com/apache/brooklyn-library/commit/70f2e77d071e6e662b908a67ab8ca3cd498f465a",
        "message": "Merge pull request #1474 from ahgittin/couchbase\n\nCouchbase code tidy, nicer way to define sensors, and prevent NPE's, using new `Functionals`",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/023e49287c8acdb6daf3af171e7e7277b145f63a",
        "file": [
            {
                "patch": "@@ -54,6 +54,7 @@\n import org.slf4j.LoggerFactory;\n \n import com.google.common.base.Objects;\n+import com.google.common.base.Optional;\n import com.google.common.base.Predicates;\n import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n@@ -230,7 +231,15 @@ public String getProtocol() {\n     public String getDomain() {\n         return getAttribute(DOMAIN_NAME);\n     }\n-    \n+\n+    protected String getDomainWithoutWildcard() {\n+        String domain = getDomain();\n+        if (domain != null && domain.startsWith(\"*.\")) {\n+            domain = domain.replace(\"*.\", \"\"); // Strip wildcard\n+        }\n+        return domain;\n+    }\n+\n     @Override\n     public Integer getPort() {\n         if (isSsl())\n@@ -267,39 +276,21 @@ protected String inferProtocol() {\n         return isSsl() ? \"https\" : \"http\";\n     }\n \n-    protected String inferUrlSubnet() {\n-        String protocol = checkNotNull(getProtocol(), \"no protocol configured\");\n-        String domain = getDomain();\n-        if (domain != null && domain.startsWith(\"*.\")) {\n-            domain = domain.replace(\"*.\", \"\"); // Strip wildcard\n-        }\n-        Integer port = checkNotNull(getPort(), \"no port configured (the requested port may be in use)\");\n-\n+    protected String inferUrlForSubnet() {\n+        String domain = getDomainWithoutWildcard();\n         if (domain==null) domain = getAttribute(Attributes.SUBNET_ADDRESS);\n-        if (domain==null) return null;\n-        return protocol+\"://\"+domain+\":\"+port+\"/\"+getConfig(SERVICE_UP_URL_PATH);\n+        return inferUrl(domain, Optional.<Integer>absent());\n     }\n \n-    protected String inferUrlPublic() {\n-        String protocol = checkNotNull(getProtocol(), \"no protocol configured\");\n-        String domain = getDomain();\n-        if (domain != null && domain.startsWith(\"*.\")) {\n-            domain = domain.replace(\"*.\", \"\"); // Strip wildcard\n-        }\n-        Integer port = checkNotNull(getPort(), \"no port configured (the requested port may be in use)\");\n-\n+    protected String inferUrlForPublic() {\n+        String domain = getDomainWithoutWildcard();\n         if (domain==null) domain = getAttribute(Attributes.ADDRESS);\n-        if (domain==null) return null;\n-        return protocol+\"://\"+domain+\":\"+port+\"/\"+getConfig(SERVICE_UP_URL_PATH);\n+        return inferUrl(domain, Optional.<Integer>absent());\n     }\n \n     /** returns URL, if it can be inferred; null otherwise */\n     protected String inferUrl(boolean requireManagementAccessible) {\n-        String protocol = checkNotNull(getProtocol(), \"no protocol configured\");\n-        String domain = getDomain();\n-        if (domain != null && domain.startsWith(\"*.\")) {\n-            domain = domain.replace(\"*.\", \"\"); // Strip wildcard\n-        }\n+        String domain = getDomainWithoutWildcard();\n         Integer port = checkNotNull(getPort(), \"no port configured (the requested port may be in use)\");\n         if (requireManagementAccessible) {\n             HostAndPort accessible = BrooklynAccessUtils.getBrooklynAccessibleAddress(this, port);\n@@ -309,8 +300,15 @@ protected String inferUrl(boolean requireManagementAccessible) {\n             }\n         }\n         if (domain==null) domain = Machines.findSubnetHostname(this).orNull();\n-        if (domain==null) return null;\n-        return protocol+\"://\"+domain+\":\"+port+\"/\"+getConfig(SERVICE_UP_URL_PATH);\n+        return inferUrl(domain, Optional.of(port));\n+    }\n+\n+    protected String inferUrl(String host, Optional<Integer> portOverride) {\n+        if (host == null) return null;\n+        String protocol = checkNotNull(getProtocol(), \"no protocol configured\");\n+        int port = portOverride.isPresent() ? portOverride.get() : checkNotNull(getPort(), \"no port configured (the requested port may be in use)\");\n+        String path = getConfig(SERVICE_UP_URL_PATH);\n+        return protocol+\"://\"+host+\":\"+port+\"/\"+path;\n     }\n \n     protected String inferUrl() {\n@@ -343,14 +341,26 @@ protected void computePortsAndUrls() {\n         ConfigToAttributes.apply(this);\n \n         sensors().set(PROTOCOL, inferProtocol());\n-        sensors().set(MAIN_URI, URI.create(inferUrl()));\n-        sensors().set(MAIN_URI_MAPPED_SUBNET, URI.create(inferUrlSubnet()));\n-        sensors().set(MAIN_URI_MAPPED_PUBLIC, URI.create(inferUrlPublic()));\n+        sensors().set(MAIN_URI, createUriOrNull(inferUrl()));\n+        sensors().set(MAIN_URI_MAPPED_SUBNET, createUriOrNull(inferUrlForSubnet()));\n+        sensors().set(MAIN_URI_MAPPED_PUBLIC, createUriOrNull(inferUrlForPublic()));\n         sensors().set(ROOT_URL, inferUrl());\n  \n         checkNotNull(getPortNumberSensor(), \"no sensor configured to infer port number\");\n     }\n     \n+    private URI createUriOrNull(String val) {\n+        if (val == null) {\n+            return null;\n+        }\n+        try {\n+            return URI.create(val);\n+        } catch (IllegalArgumentException e) {\n+            LOG.warn(\"Invalid URI for {}: {}\", this, val);\n+            return null;\n+        }\n+    }\n+    \n     @Override\n     protected void connectSensors() {\n         super.connectSensors();",
                "additions": 41,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/023e49287c8acdb6daf3af171e7e7277b145f63a/software/webapp/src/main/java/org/apache/brooklyn/entity/proxy/AbstractControllerImpl.java",
                "status": "modified",
                "changes": 72,
                "deletions": 31,
                "sha": "3277e381f59311f97d0ac8ea831497ca2fb9a318",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/023e49287c8acdb6daf3af171e7e7277b145f63a/software/webapp/src/main/java/org/apache/brooklyn/entity/proxy/AbstractControllerImpl.java",
                "filename": "software/webapp/src/main/java/org/apache/brooklyn/entity/proxy/AbstractControllerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/webapp/src/main/java/org/apache/brooklyn/entity/proxy/AbstractControllerImpl.java?ref=023e49287c8acdb6daf3af171e7e7277b145f63a"
            },
            {
                "patch": "@@ -31,7 +31,6 @@\n import java.util.Set;\n \n import org.apache.brooklyn.api.entity.Entity;\n-import org.apache.brooklyn.api.entity.EntityLocal;\n import org.apache.brooklyn.api.entity.EntitySpec;\n import org.apache.brooklyn.api.location.Location;\n import org.apache.brooklyn.api.location.LocationSpec;\n@@ -43,6 +42,7 @@\n import org.apache.brooklyn.core.entity.EntityAsserts;\n import org.apache.brooklyn.core.entity.factory.EntityFactory;\n import org.apache.brooklyn.core.entity.trait.Startable;\n+import org.apache.brooklyn.core.location.HasSubnetHostname;\n import org.apache.brooklyn.core.location.PortRanges;\n import org.apache.brooklyn.core.test.BrooklynAppUnitTestSupport;\n import org.apache.brooklyn.core.test.entity.TestEntity;\n@@ -155,7 +155,7 @@ public void testUpdateCalledWhenChildHostnameAndPortChanges() throws Exception {\n     public void testUpdateCalledWithAddressesOfNewChildren() {\n         // First child\n         cluster.resize(1);\n-        EntityLocal child = (EntityLocal) Iterables.getOnlyElement(cluster.getMembers());\n+        Entity child = Iterables.getOnlyElement(cluster.getMembers());\n         \n         List<Collection<String>> u = Lists.newArrayList(controller.getUpdates());\n         assertTrue(u.isEmpty(), \"expected empty list but got \"+u);\n@@ -171,7 +171,7 @@ public void testUpdateCalledWithAddressesOfNewChildren() {\n             public void run() {\n                 assertEquals(cluster.getMembers().size(), 2);\n             }});\n-        EntityLocal child2 = (EntityLocal) Iterables.getOnlyElement(MutableSet.builder().addAll(cluster.getMembers()).remove(child).build());\n+        Entity child2 = Iterables.getOnlyElement(MutableSet.<Entity>builder().addAll(cluster.getMembers()).remove(child).build());\n         \n         child2.sensors().set(ClusteredEntity.HTTP_PORT, 1234);\n         child2.sensors().set(Startable.SERVICE_UP, true);\n@@ -192,8 +192,8 @@ public void testUpdateCalledWithAddressesRemovedForStoppedChildren() {\n         // Get some children, so we can remove one...\n         cluster.resize(2);\n         for (Entity it: cluster.getMembers()) { \n-            ((EntityLocal)it).sensors().set(ClusteredEntity.HTTP_PORT, 1234);\n-            ((EntityLocal)it).sensors().set(Startable.SERVICE_UP, true);\n+            it.sensors().set(ClusteredEntity.HTTP_PORT, 1234);\n+            it.sensors().set(Startable.SERVICE_UP, true);\n         }\n         assertEventuallyAddressesMatchCluster();\n \n@@ -208,17 +208,17 @@ public void testUpdateCalledWithAddressesRemovedForServiceDownChildrenThatHaveCl\n         // Get some children, so we can remove one...\n         cluster.resize(2);\n         for (Entity it: cluster.getMembers()) { \n-            ((EntityLocal)it).sensors().set(ClusteredEntity.HTTP_PORT, 1234);\n-            ((EntityLocal)it).sensors().set(Startable.SERVICE_UP, true);\n+            it.sensors().set(ClusteredEntity.HTTP_PORT, 1234);\n+            it.sensors().set(Startable.SERVICE_UP, true);\n         }\n         assertEventuallyAddressesMatchCluster();\n \n         // Now unset host/port, and remove children\n         // Note the unsetting of hostname is done in SoftwareProcessImpl.stop(), so this is realistic\n         for (Entity it : cluster.getMembers()) {\n-            ((EntityLocal)it).sensors().set(ClusteredEntity.HTTP_PORT, null);\n-            ((EntityLocal)it).sensors().set(ClusteredEntity.HOSTNAME, null);\n-            ((EntityLocal)it).sensors().set(Startable.SERVICE_UP, false);\n+            it.sensors().set(ClusteredEntity.HTTP_PORT, null);\n+            it.sensors().set(ClusteredEntity.HOSTNAME, null);\n+            it.sensors().set(Startable.SERVICE_UP, false);\n         }\n         assertEventuallyAddressesMatch(ImmutableList.<Entity>of());\n     }\n@@ -314,24 +314,34 @@ public void testMainUriSensorsCorrectlyComputedWithDomain() throws Exception {\n \n     @Test\n     public void testMainUriSensorsCorrectlyComputedWithoutDomain() throws Exception {\n+        // The MachineLocation needs to implement HasSubnetHostname for the Attributes.SUBNET_HOSTNAME \n+        // to be set with the subnet addresss (otherwise it will fall back to using machine.getAddress()).\n+        // See Machines.getSubnetHostname. \n+        \n         TrackingAbstractController controller2 = app.addChild(EntitySpec.create(TrackingAbstractController.class)\n                 .configure(TrackingAbstractController.SERVER_POOL, cluster)\n                 .configure(TrackingAbstractController.PROXY_HTTP_PORT, PortRanges.fromInteger(8081))\n-                .location(LocationSpec.create(SshMachineLocation.class)\n+                .location(LocationSpec.create(SshMachineLocationWithSubnetHostname.class)\n                         .configure(\"address\", Inet4Address.getByName(\"1.1.1.1\"))\n                         .configure(SshMachineLocation.PRIVATE_ADDRESSES, ImmutableList.of(\"2.2.2.2\"))));\n         controller2.start(ImmutableList.<Location>of());\n \n-        // Unfortunately the Attributes.SUBNET_HOSTNAME is 1.1.1.1, because SshMachineLocation does not implement\n-        // HasSubnetHostname (see Machines.getSubnetHostname). It falls back to using the machine.getAddress().\n-        // Hence the MAIN_URI uses 1.1.1.1.\n         EntityAsserts.assertAttributeEquals(controller2, Attributes.ADDRESS, \"1.1.1.1\");\n         EntityAsserts.assertAttributeEquals(controller2, Attributes.SUBNET_ADDRESS, \"2.2.2.2\");\n-        EntityAsserts.assertAttributeEquals(controller2, Attributes.MAIN_URI, URI.create(\"http://1.1.1.1:8081/\"));\n+        EntityAsserts.assertAttributeEquals(controller2, Attributes.MAIN_URI, URI.create(\"http://2.2.2.2:8081/\"));\n         EntityAsserts.assertAttributeEquals(controller2, Attributes.MAIN_URI_MAPPED_PUBLIC, URI.create(\"http://1.1.1.1:8081/\"));\n         EntityAsserts.assertAttributeEquals(controller2, Attributes.MAIN_URI_MAPPED_SUBNET, URI.create(\"http://2.2.2.2:8081/\"));\n     }\n-\n+    public static class SshMachineLocationWithSubnetHostname extends SshMachineLocation implements HasSubnetHostname {\n+        @Override public String getSubnetHostname() {\n+            return getSubnetIp();\n+        }\n+        @Override public String getSubnetIp() {\n+            Set<String> addrs = getPrivateAddresses();\n+            return (addrs.isEmpty()) ? getAddress().getHostAddress() : Iterables.get(addrs, 0);\n+        }\n+    }\n+    \n     private void assertEventuallyAddressesMatchCluster() {\n         assertEventuallyAddressesMatch(cluster.getMembers());\n     }\n@@ -388,10 +398,10 @@ public ClusteredEntity newEntity(Map flags, Entity parent) {\n         @SetFromFlag(\"hostAndPort\")\n         public static final AttributeSensor<String> HOST_AND_PORT = Attributes.HOST_AND_PORT;\n         \n-        MachineProvisioningLocation provisioner;\n+        MachineProvisioningLocation<MachineLocation> provisioner;\n         \n         public void start(Collection<? extends Location> locs) {\n-            provisioner = (MachineProvisioningLocation) locs.iterator().next();\n+            provisioner = (MachineProvisioningLocation<MachineLocation>) locs.iterator().next();\n             MachineLocation machine;\n             try {\n                 machine = provisioner.obtain(MutableMap.of());",
                "additions": 28,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/023e49287c8acdb6daf3af171e7e7277b145f63a/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/AbstractControllerTest.java",
                "status": "modified",
                "changes": 46,
                "deletions": 18,
                "sha": "831df4c7a49f4416438d78ff4df336ed33ce9342",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/023e49287c8acdb6daf3af171e7e7277b145f63a/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/AbstractControllerTest.java",
                "filename": "software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/AbstractControllerTest.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/AbstractControllerTest.java?ref=023e49287c8acdb6daf3af171e7e7277b145f63a"
            }
        ],
        "bug_id": "brooklyn-library_30",
        "parent": "https://github.com/apache/brooklyn-library/commit/313203f0b45d2178fa142167d2b42238544b8dce",
        "message": "Improvements for PR #66\n\n* Avoid NPE in in AbstractController.computePortsAndUrls() if inferUrl\n  returns null.\n* Remove some duplication from inferUrl*()\n* Renames inferUrlPublic() to inferUrlForPublic() - and same for subnet\n* testMainUriSensorsCorrectlyComputedWithoutDomain to use machineLocation\n  extending HasSubnetHostname, so subnet address set as expected.\n* Tidy deprecated code and generics in test.",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/02230b5d7ce850140b0d394ec8928966a2a16e27",
        "file": [
            {
                "patch": "@@ -70,7 +70,7 @@ public void connectSensors() {\n                     .pollAttribute(new JmxAttributePollConfig<String>(CONNECTOR_STATUS)\n                             .objectName(connectorMbeanName)\n                             .attributeName(\"stateName\"))\n-                    .pollAttribute(new JmxAttributePollConfig<Boolean>(SERVICE_UP)\n+                    .pollAttribute(new JmxAttributePollConfig<Boolean>(SERVICE_PROCESS_IS_RUNNING)\n                             .objectName(connectorMbeanName)\n                             .attributeName(\"stateName\")\n                             .onSuccess(Functions.forPredicate(Predicates.<Object>equalTo(\"STARTED\")))",
                "additions": 1,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/02230b5d7ce850140b0d394ec8928966a2a16e27/software/webapp/src/main/java/brooklyn/entity/webapp/tomcat/TomcatServerImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "5bc9204bd8e0058b4b209a3398238b1172594621",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/02230b5d7ce850140b0d394ec8928966a2a16e27/software/webapp/src/main/java/brooklyn/entity/webapp/tomcat/TomcatServerImpl.java",
                "filename": "software/webapp/src/main/java/brooklyn/entity/webapp/tomcat/TomcatServerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/webapp/src/main/java/brooklyn/entity/webapp/tomcat/TomcatServerImpl.java?ref=02230b5d7ce850140b0d394ec8928966a2a16e27"
            }
        ],
        "bug_id": "brooklyn-library_31",
        "parent": "https://github.com/apache/brooklyn-library/commit/208ec3d7180b5fb92165988904c559cfb137331c",
        "message": "fix misc errors during hot standby (access to unavailable methods, clearing more things on location unmanagement) and after rebind (NPE in SshMachineLocation), and fix sensor logic bug in tomcat",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/389eb0c962a612327cb3ceb802aaa0c115070275",
        "file": [
            {
                "patch": "@@ -1,15 +1,19 @@\n package brooklyn.entity.messaging.rabbit;\n \n+import static java.lang.String.format;\n import static brooklyn.entity.basic.lifecycle.CommonCommands.*\n \n import org.slf4j.Logger\n import org.slf4j.LoggerFactory\n \n import brooklyn.entity.basic.AbstractSoftwareProcessSshDriver\n+import brooklyn.entity.basic.lifecycle.CommonCommands\n import brooklyn.entity.messaging.amqp.AmqpServer\n import brooklyn.location.basic.SshMachineLocation\n import brooklyn.util.NetworkUtils\n \n+import com.google.common.collect.ImmutableList\n+\n /**\n  * TODO javadoc\n  */\n@@ -35,7 +39,7 @@ public class RabbitSshDriver extends AbstractSoftwareProcessSshDriver implements\n         String url = \"http://www.rabbitmq.com/releases/rabbitmq-server/v${version}/rabbitmq-server-generic-unix-${version}.tar.gz\";\n         String saveAs = \"rabbitmq-server-generic-unix-${version}.tar.gz\";\n \n-        List<String> commands = ImmutableList.builder()\n+        List<String> commands = ImmutableList.<String>builder()\n                 .add(installPackage(\"erlang\", // NOTE only 'port' states the version of Erlang used, maybe remove this constraint?\n                         apt:\"erlang-nox erlang-dev\",\n                         port:\"erlang@${erlangVersion}+ssl\"))",
                "additions": 5,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/389eb0c962a612327cb3ceb802aaa0c115070275/software/messaging/src/main/java/brooklyn/entity/messaging/rabbit/RabbitSshDriver.groovy",
                "status": "modified",
                "changes": 6,
                "deletions": 1,
                "sha": "12a95355135a00566f87c50147f92fdd7504603d",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/389eb0c962a612327cb3ceb802aaa0c115070275/software/messaging/src/main/java/brooklyn/entity/messaging/rabbit/RabbitSshDriver.groovy",
                "filename": "software/messaging/src/main/java/brooklyn/entity/messaging/rabbit/RabbitSshDriver.groovy",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/messaging/src/main/java/brooklyn/entity/messaging/rabbit/RabbitSshDriver.groovy?ref=389eb0c962a612327cb3ceb802aaa0c115070275"
            },
            {
                "patch": "@@ -122,19 +122,19 @@ public class NginxUrlMappingIntegrationTest {\n             for (int i = 0; i < 2; i++) {\n                 assertUrlHasText(\"http://localhost1:${port}\", \"Hello\");\n                 assertUrlHasText(\"http://localhost1:${port}/\", \"Hello\");\n-                assertUrlHasText(\"http://localhost1:${port}/hello/frank\", \"http://\"+u0.id+\"/hello/frank\");\n+                assertUrlHasText(\"http://localhost1:${port}/hello/frank\", \"http://localhost1:${port}/hello/frank\");\n             }\n             //cluster 1\n             for (int i = 0; i < 2; i++) {\n                 assertUrlHasText(\"http://localhost2:${port}/hello-world\", \"Hello\");\n                 assertUrlHasText(\"http://localhost2:${port}/hello-world/\", \"Hello\");\n-                assertUrlHasText(\"http://localhost2:${port}/hello-world/hello/bob\", \"http://\"+u1.id+\"/hello-world/hello/bob\");\n+                assertUrlHasText(\"http://localhost2:${port}/hello-world/hello/bob\", \"http://localhost2:${port}/hello-world/hello/bob\");\n             }\n             //cluster 2\n             for (int i = 0; i < 2; i++) {\n                 assertUrlHasText(\"http://localhost3:${port}/c2\", \"Hello\");\n                 assertUrlHasText(\"http://localhost3:${port}/c2/\", \"Hello\");\n-                assertUrlHasText(\"http://localhost3:${port}/c2/hello/joe\", \"http://\"+u2.id+\"/c2/hello/new%20joe\");\n+                assertUrlHasText(\"http://localhost3:${port}/c2/hello/joe\", \"http://localhost3:${port}/c2/hello/new%20joe\");\n             }\n         }\n         \n@@ -273,24 +273,24 @@ public class NginxUrlMappingIntegrationTest {\n         executeUntilSucceeds {\n             // health check\n             assertUrlHasText(\"http://localhost1:${port}\", \"Hello\");\n-            assertUrlHasText(\"http://localhost1:${port}/hello/frank\", \"http://\"+u0.id+\"/hello/frank\");\n+            assertUrlHasText(\"http://localhost1:${port}/hello/frank\", \"http://localhost1:${port}/hello/frank\");\n             \n             // goodbye rewritten to hello\n-            assertUrlHasText(\"http://localhost1:${port}/goodbye/frank\", \"http://\"+u0.id+\"/hello/frank\");\n+            assertUrlHasText(\"http://localhost1:${port}/goodbye/frank\", \"http://localhost1:${port}/hello/frank\");\n             // hello al rewritten to hello Big Al\n-            assertUrlHasText(\"http://localhost1:${port}/hello/aled\", \"http://\"+u0.id+\"/hello/Big%20Aled\");\n+            assertUrlHasText(\"http://localhost1:${port}/hello/aled\", \"http://localhost1:${port}/hello/Big%20Aled\");\n             // hello andrew rewritten to hello Sir Andrew\n-            assertUrlHasText(\"http://localhost1:${port}/hello/andrew\", \"http://\"+u0.id+\"/hello/Sir%20Andrew\");\n+            assertUrlHasText(\"http://localhost1:${port}/hello/andrew\", \"http://localhost1:${port}/hello/Sir%20Andrew\");\n             \n             // goodbye alex rewritten to hello Big Alex (two rewrites)\n-            assertUrlHasText(\"http://localhost1:${port}/goodbye/alex\", \"http://\"+u0.id+\"/hello/Big%20Alex\");\n+            assertUrlHasText(\"http://localhost1:${port}/goodbye/alex\", \"http://localhost1:${port}/hello/Big%20Alex\");\n             // but goodbye andrew rewritten only to hello Andrew -- test the \"break\" logic above (won't continue rewriting)\n-            assertUrlHasText(\"http://localhost1:${port}/goodbye/andrew\", \"http://\"+u0.id+\"/hello/andrew\");\n+            assertUrlHasText(\"http://localhost1:${port}/goodbye/andrew\", \"http://localhost1:${port}/hello/andrew\");\n             \n             // al rewrite can be anywhere\n-            assertUrlHasText(\"http://localhost1:${port}/hello/hello/alex\", \"http://\"+u0.id+\"/hello/hello/Big%20Alex\");\n+            assertUrlHasText(\"http://localhost1:${port}/hello/hello/alex\", \"http://localhost1:${port}/hello/hello/Big%20Alex\");\n             // but an rewrite must be at beginning\n-            assertUrlHasText(\"http://localhost1:${port}/hello/hello/andrew\", \"http://\"+u0.id+\"/hello/hello/andrew\");\n+            assertUrlHasText(\"http://localhost1:${port}/hello/hello/andrew\", \"http://localhost1:${port}/hello/hello/andrew\");\n         }\n     }\n     ",
                "additions": 11,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/389eb0c962a612327cb3ceb802aaa0c115070275/software/webapp/src/test/java/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.groovy",
                "status": "modified",
                "changes": 22,
                "deletions": 11,
                "sha": "18934137c6cc8718afa4fea77bf88d54ff6a785f",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/389eb0c962a612327cb3ceb802aaa0c115070275/software/webapp/src/test/java/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.groovy",
                "filename": "software/webapp/src/test/java/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.groovy",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/webapp/src/test/java/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.groovy?ref=389eb0c962a612327cb3ceb802aaa0c115070275"
            },
            {
                "patch": "@@ -33,6 +33,6 @@ public class ElasticJavaWebAppServiceIntegrationTest {\n         app.start([new LocalhostMachineProvisioningLocation()]);\n         String url = svc.getAttribute(ElasticJavaWebAppService.ROOT_URL);\n         Assert.assertNotNull(url);\n-        HttpTestUtils.assertContentContainsText(url, \"Hello\");\n+        HttpTestUtils.assertContentEventuallyContainsText(url, \"Hello\");\n     }\n }",
                "additions": 1,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/389eb0c962a612327cb3ceb802aaa0c115070275/software/webapp/src/test/java/brooklyn/entity/webapp/ElasticJavaWebAppServiceIntegrationTest.groovy",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "931b1e193efeefb1d236049d67ae39690b376a59",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/389eb0c962a612327cb3ceb802aaa0c115070275/software/webapp/src/test/java/brooklyn/entity/webapp/ElasticJavaWebAppServiceIntegrationTest.groovy",
                "filename": "software/webapp/src/test/java/brooklyn/entity/webapp/ElasticJavaWebAppServiceIntegrationTest.groovy",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/webapp/src/test/java/brooklyn/entity/webapp/ElasticJavaWebAppServiceIntegrationTest.groovy?ref=389eb0c962a612327cb3ceb802aaa0c115070275"
            }
        ],
        "bug_id": "brooklyn-library_32",
        "parent": "https://github.com/apache/brooklyn-library/commit/d32586eef146d117e09fcd8bdc20a2d8f9ac1953",
        "message": "Fix integration tests\n\n- NginxUrlMapping: test webapp changed, so writes out original url rather\n  than url-mapping id\n- Fix ElasticJavaWebAppServiceIntegrationTest\n- Avoid NPE in ReflectionScanner if class can't be found\n- fix RabbitSshDriver imports",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/2a71311f2a82611b7c8c71526a53380fbc42b744",
        "file": [
            {
                "patch": "@@ -5,6 +5,7 @@\n import java.net.InetAddress;\n import java.net.MalformedURLException;\n import java.net.URL;\n+import java.net.UnknownHostException;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n@@ -47,11 +48,17 @@\n \n     protected Map<Entity, HostGeoInfo> targetHosts = Collections.synchronizedMap(new LinkedHashMap<Entity, HostGeoInfo>());\n     \n-    // We complain when we encounter a target entity for whom we can't derive geo information; the commonest case is a\n-    // transient condition between the time the entity is created and the time it is started (at which point the location is\n-    // specified). This set contains those entities we've complained about already, to avoid repetitive logging.\n+    // We complain (at debug) when we encounter a target entity for whom we can't derive hostname/ip information; \n+    // this is the commonest case for the transient condition between the time the entity is created and the time \n+    // it is started (at which point the location is specified). This set contains those entities we've complained \n+    // about already, to avoid repetitive logging.\n+    transient protected Set<Entity> entitiesWithoutHostname = new HashSet<Entity>();\n+\n+    // We complain (at info/warn) when we encounter a target entity for whom we can't derive geo information, even \n+    // when hostname/ip is known. This set contains those entities we've complained about already, to avoid repetitive \n+    // logging.\n     transient protected Set<Entity> entitiesWithoutGeoInfo = new HashSet<Entity>();\n-    \n+\n     public AbstractGeoDnsServiceImpl() {\n         super();\n     }\n@@ -170,53 +177,58 @@ protected void refreshGroupMembership() {\n     \n     /**\n      * Adds this host, if it is absent or if its hostname has changed.\n-     *  \n+     * \n+     * For whether to use hostname or ip, see config and attributes {@link AbstractGeoDnsService#USE_HOSTNAMES}, \n+     * {@link Attributes#HOSTNAME} and {@link Attributes#ADDRESS} (via {@link #inferHostname(Entity)} and {@link #inferIp(Entity)}.\n+     * Note that the \"hostname\" could infact be an IP address, if {@link #inferHostname(Entity)} returns an IP!\n+     * <p>\n+     * The \"hostname\" is always preferred for inferring the geo info, if it is available. The {@code USE_HOSTNAMES==false} \n+     * is just used to say whether to fall back to IP if that is not available (and whether to switch the the geo-info so it\n+     * refs the IP instead of the hostname).\n+     * \n+     * TODO in a future release, we may change this to explicitly set the sensor(s) to look at on the entity, and \n+     * be stricter about using them in order.\n+     * \n      * @return true if host is added or changed\n      */\n-    protected boolean addTargetHost(Entity e) {\n+    protected boolean addTargetHost(Entity entity) {\n         try {\n-            HostGeoInfo oldGeo = targetHosts.get(e);\n-            String hostname = inferHostname(e);\n-            String ip = inferIp(e);\n-            HostGeoInfo geoH = (hostname == null) ? null : HostGeoInfo.fromIpAddress(InetAddress.getByName(hostname));\n-            HostGeoInfo geoE = HostGeoInfo.fromEntity(e);\n-\n-            // Switch to IP address if that's what we're configured to use, and it's available\n-            if (!getConfig(USE_HOSTNAMES) && ip != null) {\n-                geoH = HostGeoInfo.create(ip, geoH.displayName, geoH.latitude, geoH.longitude);\n-            }\n-            \n-            if (hostname == null || (!getConfig(USE_HOSTNAMES) && ip!=null)) hostname = ip;\n+            HostGeoInfo oldGeo = targetHosts.get(entity);\n+            String hostname = inferHostname(entity);\n+            String ip = inferIp(entity);\n+            String addr = (getConfig(USE_HOSTNAMES) || ip == null) ? hostname : ip;\n+            HostGeoInfo geoE = HostGeoInfo.fromEntity(entity);\n+            HostGeoInfo geoH = inferHostGeoInfo(hostname, ip);\n             \n-            if (hostname == null) {\n-                if (entitiesWithoutGeoInfo.add(e)) {\n-                    log.debug(\"GeoDns ignoring {}, will continue scanning (no hostname or URL available)\", e);\n+            if (addr == null) {\n+                if (entitiesWithoutHostname.add(entity)) {\n+                    log.debug(\"GeoDns ignoring {}, will continue scanning (no hostname or URL available)\", entity);\n                 }\n                 return false;\n             }\n             \n-            if (Networking.isPrivateSubnet(hostname)) {\n+            if (Networking.isPrivateSubnet(addr)) {\n                 if (getConfig(INCLUDE_HOMELESS_ENTITIES)) {\n-                    if (entitiesWithoutGeoInfo.add(e)) {\n-                        log.info(\"GeoDns including {}, even though {} is a private subnet (homeless entities included)\", e, hostname);\n+                    if (entitiesWithoutGeoInfo.add(entity)) {\n+                        log.info(\"GeoDns including {}, even though {} is a private subnet (homeless entities included)\", entity, addr);\n                     }\n                 } else {\n-                    if (entitiesWithoutGeoInfo.add(e)) {\n-                        log.warn(\"GeoDns ignoring {} (private subnet detected for {})\", e, hostname);\n+                    if (entitiesWithoutGeoInfo.add(entity)) {\n+                        log.warn(\"GeoDns ignoring {} (private subnet detected for {})\", entity, addr);\n                     }\n                     return false;\n                 }\n             }\n             \n             if (geoH == null) {\n                 if (getConfig(INCLUDE_HOMELESS_ENTITIES)) {\n-                    if (entitiesWithoutGeoInfo.add(e)) {\n-                        log.info(\"GeoDns including {}, even though no geography info available for {})\", e, hostname);\n+                    if (entitiesWithoutGeoInfo.add(entity)) {\n+                        log.info(\"GeoDns including {}, even though no geography info available for {})\", entity, addr);\n                     }\n-                    geoH = (geoE != null) ? geoE : HostGeoInfo.create(hostname, \"unknownLocation(\"+hostname+\")\", 0, 0);\n+                    geoH = (geoE != null) ? geoE : HostGeoInfo.create(addr, \"unknownLocation(\"+addr+\")\", 0, 0);\n                 } else {\n-                    if (entitiesWithoutGeoInfo.add(e)) {\n-                        log.warn(\"GeoDns ignoring {} (no geography info available for {})\", e, hostname);\n+                    if (entitiesWithoutGeoInfo.add(entity)) {\n+                        log.warn(\"GeoDns ignoring {} (no geography info available for {})\", entity, addr);\n                     }\n                     return false;\n                 }\n@@ -231,17 +243,18 @@ protected boolean addTargetHost(Entity e) {\n             if (geoE != null) {\n                 if ((Math.abs(geoH.latitude-geoE.latitude)>3) ||\n                         (Math.abs(geoH.longitude-geoE.longitude)>3) ) {\n-                    log.warn(\"GeoDns mismatch, {} is in {} but hosts URL in {}\", new Object[] {e, geoE, geoH});\n+                    log.warn(\"GeoDns mismatch, {} is in {} but hosts URL in {}\", new Object[] {entity, geoE, geoH});\n                 }\n             }\n             \n-            entitiesWithoutGeoInfo.remove(e);\n-            log.info(\"GeoDns adding \"+e+\" at \"+geoH+(oldGeo != null ? \" (previously \"+oldGeo+\")\" : \"\"));\n-            targetHosts.put(e, geoH);\n+            entitiesWithoutHostname.remove(entity);\n+            entitiesWithoutGeoInfo.remove(entity);\n+            log.info(\"GeoDns adding \"+entity+\" at \"+geoH+(oldGeo != null ? \" (previously \"+oldGeo+\")\" : \"\"));\n+            targetHosts.put(entity, geoH);\n             return true;\n \n         } catch (Exception ee) {\n-            log.warn(\"GeoDns ignoring {} (error analysing location, {}\", e, ee);\n+            log.warn(\"GeoDns ignoring {} (error analysing location, {}\", entity, ee);\n             return false;\n         }\n     }\n@@ -301,4 +314,36 @@ protected String inferHostname(Entity entity) {\n     protected String inferIp(Entity entity) {\n         return entity.getAttribute(Attributes.ADDRESS);\n     }\n+    \n+    protected HostGeoInfo inferHostGeoInfo(String hostname, String ip) throws UnknownHostException {\n+        // Look up the geo-info from the hostname/ip\n+        HostGeoInfo geoH;\n+        try {\n+            InetAddress addr = (hostname == null) ? null : InetAddress.getByName(hostname);\n+            geoH = (addr == null) ? null : HostGeoInfo.fromIpAddress(addr);\n+        } catch (UnknownHostException e) {\n+            if (getConfig(USE_HOSTNAMES) || ip == null) {\n+                throw e;\n+            } else {\n+                if (log.isTraceEnabled()) log.trace(\"GeoDns failed to infer GeoInfo from hostname {}; will try with IP {} ({})\", new Object[] {hostname, ip, e});\n+                geoH = null;\n+            }\n+        }\n+\n+        // Switch to IP address if that's what we're configured to use, and it's available\n+        if (!getConfig(USE_HOSTNAMES) && ip != null) {\n+            if (geoH == null) {\n+                InetAddress addr = Networking.getInetAddressWithFixedName(ip);\n+                geoH = HostGeoInfo.fromIpAddress(addr);\n+                if (log.isTraceEnabled()) log.trace(\"GeoDns inferred GeoInfo {} from ip {} (could not infer from hostname {})\", new Object[] {geoH, ip, hostname});\n+            } else {\n+                geoH = HostGeoInfo.create(ip, geoH.displayName, geoH.latitude, geoH.longitude);\n+                if (log.isTraceEnabled()) log.trace(\"GeoDns inferred GeoInfo {} from hostname {}; switching it to ip {}\", new Object[] {geoH, hostname, ip});\n+            }\n+        } else {\n+            if (log.isTraceEnabled()) log.trace(\"GeoDns inferred GeoInfo {} from hostname {}\", geoH, hostname);\n+        }\n+        \n+        return geoH;\n+    }\n }",
                "additions": 81,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/2a71311f2a82611b7c8c71526a53380fbc42b744/software/webapp/src/main/java/brooklyn/entity/dns/AbstractGeoDnsServiceImpl.java",
                "status": "modified",
                "changes": 117,
                "deletions": 36,
                "sha": "d22a88a9fe37b4b90de59535a8bd4a59bc745300",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/2a71311f2a82611b7c8c71526a53380fbc42b744/software/webapp/src/main/java/brooklyn/entity/dns/AbstractGeoDnsServiceImpl.java",
                "filename": "software/webapp/src/main/java/brooklyn/entity/dns/AbstractGeoDnsServiceImpl.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/webapp/src/main/java/brooklyn/entity/dns/AbstractGeoDnsServiceImpl.java?ref=2a71311f2a82611b7c8c71526a53380fbc42b744"
            },
            {
                "patch": "@@ -92,6 +92,9 @@ public void tearDown() throws Exception {\n     \n     @Test(groups={\"Integration\"})\n     public void testRoutesToExpectedLocation() {\n+        // Without this config, running on a home network (i.e. no public IP) the entity will have a private IP and will be ignored\n+        ((EntityLocal)geoDns).setConfig(GeoscalingDnsService.INCLUDE_HOMELESS_ENTITIES, true);\n+        \n         target.setAttribute(Attributes.HOSTNAME,addrWithGeo.getHostName());\n         \n         app.start(ImmutableList.of(locWithGeo));\n@@ -121,12 +124,14 @@ public void testIgnoresAddressWithoutGeography() {\n     public void testIncludesAddressWithoutGeography() {\n         System.setProperty(BrooklynSystemProperties.HOST_GEO_LOOKUP_IMPL.getPropertyName(), StubHostGeoLookup.class.getName());\n         ((EntityLocal)geoDns).setConfig(GeoscalingDnsService.INCLUDE_HOMELESS_ENTITIES, true);\n-        target.setAttribute(Attributes.HOSTNAME, StubHostGeoLookup.HOMELESS_IP);\n+        //target.setAttribute(Attributes.HOSTNAME, StubHostGeoLookup.HOMELESS_IP);\n         \n         app.start(ImmutableList.of(locWithoutGeo));\n         \n         LOG.info(\"geo-scaling test, using {}.{}; expect to be wired to {}\", new Object[] {subDomain, primaryDomain, addrWithoutGeo});\n         \n+        target.setAttribute(Attributes.HOSTNAME, StubHostGeoLookup.HOMELESS_IP);\n+        \n         assertTargetHostsEventually(geoDns, 1);\n     }\n ",
                "additions": 6,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/2a71311f2a82611b7c8c71526a53380fbc42b744/software/webapp/src/test/java/brooklyn/entity/dns/geoscaling/GeoscalingIntegrationTest.java",
                "status": "modified",
                "changes": 7,
                "deletions": 1,
                "sha": "cb5dd20ce94e1aa1ce089fc007cc20f95120ba21",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/2a71311f2a82611b7c8c71526a53380fbc42b744/software/webapp/src/test/java/brooklyn/entity/dns/geoscaling/GeoscalingIntegrationTest.java",
                "filename": "software/webapp/src/test/java/brooklyn/entity/dns/geoscaling/GeoscalingIntegrationTest.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/webapp/src/test/java/brooklyn/entity/dns/geoscaling/GeoscalingIntegrationTest.java?ref=2a71311f2a82611b7c8c71526a53380fbc42b744"
            }
        ],
        "bug_id": "brooklyn-library_33",
        "parent": "https://github.com/apache/brooklyn-library/commit/c58c63f7153f71bd26d565f78a865029d25f7f4e",
        "message": "Cleanup AbstractGeoDnsService.addTargetHost\n\n- avoid NPE when hostname==null and ip!=null, and !USE_HOSTNAMES\n- improve logging, so if log about hostname missing and then subsequent\n  can't infer geo, then still log about the latter.\n- general code cleanup; but more could be done.",
        "repo": "brooklyn-library"
    },
    {
        "commit": "https://github.com/apache/brooklyn-library/commit/71527c835600be1ada7ba86da85d94808b3079b4",
        "file": [
            {
                "patch": "@@ -75,7 +75,7 @@ public void tearDown() throws Exception {\n         \tmonitor.terminate();\n         }\n         if (executor != null) executor.shutdownNow();\n-        if (newApp != null) newApp.stop();\n+        if (newApp != null && newApp.getManagementSupport().getManagementContext(true).isManaged(newApp)) newApp.stop();\n         if (origApp != null && origApp.getManagementSupport().getManagementContext(true).isManaged(origApp)) origApp.stop();\n         //if (mementoDir != null) RebindTestUtils.deleteMementoDir(mementoDir);\n     }",
                "additions": 1,
                "raw_url": "https://github.com/apache/brooklyn-library/raw/71527c835600be1ada7ba86da85d94808b3079b4/software/webapp/src/test/java/brooklyn/entity/proxy/nginx/NginxRebindIntegrationTest.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "fa5103cbf416cbc26cec109f5115b6f18510fc9b",
                "blob_url": "https://github.com/apache/brooklyn-library/blob/71527c835600be1ada7ba86da85d94808b3079b4/software/webapp/src/test/java/brooklyn/entity/proxy/nginx/NginxRebindIntegrationTest.java",
                "filename": "software/webapp/src/test/java/brooklyn/entity/proxy/nginx/NginxRebindIntegrationTest.java",
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/webapp/src/test/java/brooklyn/entity/proxy/nginx/NginxRebindIntegrationTest.java?ref=71527c835600be1ada7ba86da85d94808b3079b4"
            }
        ],
        "bug_id": "brooklyn-library_34",
        "parent": "https://github.com/apache/brooklyn-library/commit/308ad03b30018779d1a251463b78429fcb18a0d4",
        "message": "Supports periodic persist for RebindManager\n\n- Avoids hammering the CPU too much, by continually serializing\n  mementos and persisting them.\n- Fixes NPE in AbstractEntity.invalidate\n- Fixes location rebind, where was overwriting all fields\n  with their default values!\n- In EntityManagementSupport, sets currentlyDeployed before\n  calling onManagementStarting.\n- ScheduledTask: make it useable from java\n- Fixes SoftwareProcessEntity rebind (so provisioningLocation is\n  restored, and stop can subsequently release the machine)",
        "repo": "brooklyn-library"
    }
]