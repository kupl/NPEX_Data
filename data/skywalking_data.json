[
    {
        "repo": "skywalking",
        "message": "Fix NullPointerException in Spring interceptor (#4063)",
        "commit": "https://github.com/apache/skywalking/commit/4c6a323e4d3364fa4fc607ae819c9abab36579f9",
        "parent": "https://github.com/apache/skywalking/commit/a836612534a09aa3f30db2a1ba86ab4b70144299",
        "bug_id": "skywalking_1",
        "file": [
            {
                "sha": "276f8421564eed058ee30a36d12615348bfc9699",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/GetPropertyDescriptorsInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/4c6a323e4d3364fa4fc607ae819c9abab36579f9/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/GetPropertyDescriptorsInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/4c6a323e4d3364fa4fc607ae819c9abab36579f9/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/GetPropertyDescriptorsInterceptor.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/GetPropertyDescriptorsInterceptor.java?ref=4c6a323e4d3364fa4fc607ae819c9abab36579f9",
                "patch": "@@ -41,7 +41,8 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA\n \n         PropertyDescriptor[] propertyDescriptors = (PropertyDescriptor[])ret;\n \n-        if (EnhancedInstance.class.isAssignableFrom(((BeanWrapperImpl)objInst).getRootClass())) {\n+        Class<?> rootClass = ((BeanWrapperImpl) objInst).getRootClass();\n+        if (rootClass != null && EnhancedInstance.class.isAssignableFrom(rootClass)) {\n             List<PropertyDescriptor> newPropertyDescriptors = new ArrayList<PropertyDescriptor>();\n             for (PropertyDescriptor descriptor : propertyDescriptors) {\n                 if (!\"skyWalkingDynamicField\".equals(descriptor.getName())) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "fix judge NPE when worker not found (#4039)",
        "commit": "https://github.com/apache/skywalking/commit/cfb3379cd0e3c2afc721acf3c781fb49b2e4e03e",
        "parent": "https://github.com/apache/skywalking/commit/3f2f75a6663b885104488bc9d9e096866e04ab34",
        "bug_id": "skywalking_2",
        "file": [
            {
                "sha": "f8deaa20fdfb8616a32003a832f4848665ec306e",
                "filename": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/remote/RemoteServiceHandler.java",
                "blob_url": "https://github.com/apache/skywalking/blob/cfb3379cd0e3c2afc721acf3c781fb49b2e4e03e/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/remote/RemoteServiceHandler.java",
                "raw_url": "https://github.com/apache/skywalking/raw/cfb3379cd0e3c2afc721acf3c781fb49b2e4e03e/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/remote/RemoteServiceHandler.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/remote/RemoteServiceHandler.java?ref=cfb3379cd0e3c2afc721acf3c781fb49b2e4e03e",
                "patch": "@@ -93,10 +93,10 @@ public RemoteServiceHandler(ModuleDefineHolder moduleDefineHolder) {\n \n                     try {\n                         RemoteHandleWorker handleWorker = workerInstanceGetter.get(nextWorkerName);\n-                        AbstractWorker nextWorker = handleWorker.getWorker();\n-                        StreamData streamData = handleWorker.getStreamDataClass().newInstance();\n-                        streamData.deserialize(remoteData);\n-                        if (nextWorker != null) {\n+                        if (handleWorker != null) {\n+                            AbstractWorker nextWorker = handleWorker.getWorker();\n+                            StreamData streamData = handleWorker.getStreamDataClass().newInstance();\n+                            streamData.deserialize(remoteData);\n                             nextWorker.in(streamData);\n                         } else {\n                             remoteInTargetNotFoundCounter.inc();",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "the static paramater is best to be referenced by the class (#2868)\n\n* fix potential NullPointerException\r\n\r\n* Revert \"fix potential NullPointerException\"\r\n\r\nThis reverts commit 8393656\r\n\r\n* fix potential NullPointerException\r\nthe static paramater is best to use the class to reference",
        "commit": "https://github.com/apache/skywalking/commit/bc0c25ad5549635128a1eb54bfb8c1263f6f689b",
        "parent": "https://github.com/apache/skywalking/commit/c3de8e8b7c9c786112b20b41c7b00119492bd92d",
        "bug_id": "skywalking_3",
        "file": [
            {
                "sha": "320a6305888b6df768aeb6777f30a5c204fef90f",
                "filename": "oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/K8sALSServiceMeshHTTPAnalysis.java",
                "blob_url": "https://github.com/apache/skywalking/blob/bc0c25ad5549635128a1eb54bfb8c1263f6f689b/oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/K8sALSServiceMeshHTTPAnalysis.java",
                "raw_url": "https://github.com/apache/skywalking/raw/bc0c25ad5549635128a1eb54bfb8c1263f6f689b/oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/K8sALSServiceMeshHTTPAnalysis.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/K8sALSServiceMeshHTTPAnalysis.java?ref=bc0c25ad5549635128a1eb54bfb8c1263f6f689b",
                "patch": "@@ -175,7 +175,7 @@ private ServiceMetaInfo createServiceMetaInfo(final V1ObjectMeta podMeta) {\n                 if (request != null) {\n                     endpoint = request.getPath();\n                     String schema = request.getScheme();\n-                    if (schema.equals(\"http\") || schema.equals(\"https\")) {\n+                    if (\"http\".equals(schema) || \"https\".equals(schema)) {\n                         protocol = Protocol.HTTP;\n                     } else {\n                         protocol = Protocol.gRPC;\n@@ -278,7 +278,7 @@ protected void analysisProxy(StreamAccessLogsMessage.Identifier identifier,\n                 if (request != null) {\n                     endpoint = request.getPath();\n                     String schema = request.getScheme();\n-                    if (schema.equals(\"http\") || schema.equals(\"https\")) {\n+                    if (\"http\".equals(schema) || \"https\".equals(schema)) {\n                         protocol = Protocol.HTTP;\n                     } else {\n                         protocol = Protocol.gRPC;",
                "deletions": 2
            },
            {
                "sha": "726adb00e007f3e5081d9bb025e7011276dc3f3d",
                "filename": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/SegmentParse.java",
                "blob_url": "https://github.com/apache/skywalking/blob/bc0c25ad5549635128a1eb54bfb8c1263f6f689b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/SegmentParse.java",
                "raw_url": "https://github.com/apache/skywalking/raw/bc0c25ad5549635128a1eb54bfb8c1263f6f689b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/SegmentParse.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/SegmentParse.java?ref=bc0c25ad5549635128a1eb54bfb8c1263f6f689b",
                "patch": "@@ -275,7 +275,7 @@ public void send(UpstreamSegment segment, Source source) {\n             segmentParse.setStandardizationWorker(standardizationWorker);\n             boolean parseResult = segmentParse.parse(bufferData, Source.Buffer);\n             if (parseResult) {\n-                segmentParse.TRACE_BUFFER_FILE_OUT.inc();\n+                TRACE_BUFFER_FILE_OUT.inc();\n             }\n \n             return parseResult;",
                "deletions": 1
            },
            {
                "sha": "6c18c822a66cc3e2d7f738ff9cc454c6fdb37e81",
                "filename": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/SegmentParseV2.java",
                "blob_url": "https://github.com/apache/skywalking/blob/bc0c25ad5549635128a1eb54bfb8c1263f6f689b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/SegmentParseV2.java",
                "raw_url": "https://github.com/apache/skywalking/raw/bc0c25ad5549635128a1eb54bfb8c1263f6f689b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/SegmentParseV2.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/SegmentParseV2.java?ref=bc0c25ad5549635128a1eb54bfb8c1263f6f689b",
                "patch": "@@ -275,7 +275,7 @@ public void send(UpstreamSegment segment, SegmentSource source) {\n             segmentParse.setStandardizationWorker(standardizationWorker);\n             boolean parseResult = segmentParse.parse(bufferData, SegmentSource.Buffer);\n             if (parseResult) {\n-                segmentParse.TRACE_BUFFER_FILE_OUT.inc();\n+                TRACE_BUFFER_FILE_OUT.inc();\n             }\n \n             return parseResult;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "Merge pull request #574 from zhangkewei/NPE\n\nAgentStream NullPointerException with RemoteWorker",
        "commit": "https://github.com/apache/skywalking/commit/329e53ca143fdc03c842ab60981818567db5faa4",
        "parent": "https://github.com/apache/skywalking/commit/1bf4764598b8f64b200740952e5fc7d0a7bbf662",
        "bug_id": "skywalking_4",
        "file": [
            {
                "sha": "1eb17e2239b0d587a60c1217792368d423f5826a",
                "filename": "apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/component/NodeComponentSpanListener.java",
                "blob_url": "https://github.com/apache/skywalking/blob/329e53ca143fdc03c842ab60981818567db5faa4/apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/component/NodeComponentSpanListener.java",
                "raw_url": "https://github.com/apache/skywalking/raw/329e53ca143fdc03c842ab60981818567db5faa4/apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/component/NodeComponentSpanListener.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/component/NodeComponentSpanListener.java?ref=329e53ca143fdc03c842ab60981818567db5faa4",
                "patch": "@@ -60,6 +60,7 @@ public void parseExit(SpanDecorator spanDecorator, int applicationId, int applic\n         }\n \n         nodeComponent.setPeerId(spanDecorator.getPeerId());\n+        nodeComponent.setPeer(Const.EMPTY_STRING);\n         id = id + Const.ID_SPLIT + nodeComponent.getPeerId();\n         nodeComponent.setId(id);\n         nodeComponents.add(nodeComponent);\n@@ -81,6 +82,7 @@ public void parseEntry(SpanDecorator spanDecorator, int applicationId, int appli\n         }\n \n         nodeComponent.setPeerId(applicationId);\n+        nodeComponent.setPeer(Const.EMPTY_STRING);\n         id = id + Const.ID_SPLIT + String.valueOf(applicationId);\n         nodeComponent.setId(id);\n ",
                "deletions": 0
            },
            {
                "sha": "410830ea88e83c579a7f00de9e52ef4ac3c60011",
                "filename": "apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/mapping/NodeMappingSpanListener.java",
                "blob_url": "https://github.com/apache/skywalking/blob/329e53ca143fdc03c842ab60981818567db5faa4/apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/mapping/NodeMappingSpanListener.java",
                "raw_url": "https://github.com/apache/skywalking/raw/329e53ca143fdc03c842ab60981818567db5faa4/apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/mapping/NodeMappingSpanListener.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/mapping/NodeMappingSpanListener.java?ref=329e53ca143fdc03c842ab60981818567db5faa4",
                "patch": "@@ -51,6 +51,7 @@\n         NodeMappingDataDefine.NodeMapping nodeMapping = new NodeMappingDataDefine.NodeMapping();\n         nodeMapping.setApplicationId(applicationId);\n         nodeMapping.setAddressId(referenceDecorator.getNetworkAddressId());\n+        nodeMapping.setAddress(Const.EMPTY_STRING);\n         String id = String.valueOf(applicationId) + Const.ID_SPLIT + String.valueOf(nodeMapping.getAddressId());\n         nodeMapping.setId(id);\n         nodeMappings.add(nodeMapping);",
                "deletions": 0
            },
            {
                "sha": "ccbcd8189587fb6db8d7b34a6c634a0de03b0f44",
                "filename": "apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/noderef/NodeReferenceSpanListener.java",
                "blob_url": "https://github.com/apache/skywalking/blob/329e53ca143fdc03c842ab60981818567db5faa4/apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/noderef/NodeReferenceSpanListener.java",
                "raw_url": "https://github.com/apache/skywalking/raw/329e53ca143fdc03c842ab60981818567db5faa4/apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/noderef/NodeReferenceSpanListener.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/noderef/NodeReferenceSpanListener.java?ref=329e53ca143fdc03c842ab60981818567db5faa4",
                "patch": "@@ -53,6 +53,7 @@ public void parseExit(SpanDecorator spanDecorator, int applicationId, int applic\n         NodeReferenceDataDefine.NodeReference nodeReference = new NodeReferenceDataDefine.NodeReference();\n         nodeReference.setFrontApplicationId(applicationId);\n         nodeReference.setBehindApplicationId(spanDecorator.getPeerId());\n+        nodeReference.setBehindPeer(Const.EMPTY_STRING);\n         nodeReference.setTimeBucket(TimeBucketUtils.INSTANCE.getMinuteTimeBucket(spanDecorator.getStartTime()));\n \n         StringBuilder idBuilder = new StringBuilder();\n@@ -79,6 +80,7 @@ public void parseEntry(SpanDecorator spanDecorator, int applicationId, int appli\n             NodeReferenceDataDefine.NodeReference nodeReference = new NodeReferenceDataDefine.NodeReference();\n             nodeReference.setFrontApplicationId(Const.USER_ID);\n             nodeReference.setBehindApplicationId(applicationId);\n+            nodeReference.setBehindPeer(Const.EMPTY_STRING);\n             nodeReference.setTimeBucket(TimeBucketUtils.INSTANCE.getMinuteTimeBucket(spanDecorator.getStartTime()));\n \n             String idBuilder = String.valueOf(nodeReference.getTimeBucket()) + Const.ID_SPLIT + nodeReference.getFrontApplicationId() +\n@@ -96,6 +98,7 @@ public void parseEntry(SpanDecorator spanDecorator, int applicationId, int appli\n         NodeReferenceDataDefine.NodeReference referenceSum = new NodeReferenceDataDefine.NodeReference();\n         referenceSum.setFrontApplicationId(parentApplicationId);\n         referenceSum.setBehindApplicationId(applicationId);\n+        referenceSum.setBehindPeer(Const.EMPTY_STRING);\n         references.add(referenceSum);\n     }\n ",
                "deletions": 0
            },
            {
                "sha": "dc7a0cb65cea2de4b222a96a64270cd5c073e6ee",
                "filename": "apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/serviceref/ServiceReferenceSpanListener.java",
                "blob_url": "https://github.com/apache/skywalking/blob/329e53ca143fdc03c842ab60981818567db5faa4/apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/serviceref/ServiceReferenceSpanListener.java",
                "raw_url": "https://github.com/apache/skywalking/raw/329e53ca143fdc03c842ab60981818567db5faa4/apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/serviceref/ServiceReferenceSpanListener.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/serviceref/ServiceReferenceSpanListener.java?ref=329e53ca143fdc03c842ab60981818567db5faa4",
                "patch": "@@ -127,12 +127,15 @@ private void sendToAggregationWorker(StreamModuleContext context,\n \n         idBuilder.append(entryServiceId).append(Const.ID_SPLIT);\n         serviceReference.setEntryServiceId(entryServiceId);\n+        serviceReference.setEntryServiceName(Const.EMPTY_STRING);\n \n         idBuilder.append(frontServiceId).append(Const.ID_SPLIT);\n         serviceReference.setFrontServiceId(frontServiceId);\n+        serviceReference.setFrontServiceName(Const.EMPTY_STRING);\n \n         idBuilder.append(behindServiceId);\n         serviceReference.setBehindServiceId(behindServiceId);\n+        serviceReference.setBehindServiceName(Const.EMPTY_STRING);\n \n         serviceReference.setId(idBuilder.toString());\n         serviceReference.setTimeBucket(timeBucket);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "Support spring-tx in optional plugin (#3857)\n\n* plugin code\r\n\r\n* NPE FIX",
        "commit": "https://github.com/apache/skywalking/commit/6ffd92792d176b9af2562dd1d165576d05542c48",
        "parent": "https://github.com/apache/skywalking/commit/1b433da7e4a53d0b68d62c4af932d59ed49ecb68",
        "bug_id": "skywalking_5",
        "file": [
            {
                "sha": "eb15e93e4799649afd9993f084c2b5a5a4368d55",
                "filename": "Jenkinsfile-Agent-Test-2",
                "blob_url": "https://github.com/apache/skywalking/blob/6ffd92792d176b9af2562dd1d165576d05542c48/Jenkinsfile-Agent-Test-2",
                "raw_url": "https://github.com/apache/skywalking/raw/6ffd92792d176b9af2562dd1d165576d05542c48/Jenkinsfile-Agent-Test-2",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/Jenkinsfile-Agent-Test-2?ref=6ffd92792d176b9af2562dd1d165576d05542c48",
                "patch": "@@ -67,7 +67,7 @@ pipeline {\n                 sh './mvnw -f test/plugin/pom.xml clean package -DskipTests docker:build'\n             }\n         }\n-        stage('Test Cases Report (136)') {\n+        stage('Test Cases Report (146)') {\n             steps {\n                 echo \"Test Cases Report\"\n             }\n@@ -82,6 +82,12 @@ pipeline {\n             parallel {\n                 stage('Group1') {\n                     stages {\n+                        stage('spring-tx 4.x+ (10)') {\n+                            steps {\n+                                sh 'bash test/plugin/run.sh spring-tx-scenario'\n+                            }\n+                        }\n+\n                         stage('spring 4.3.x-5.2.x (54)') {\n                             steps {\n                                 sh 'bash test/plugin/run.sh spring-4.3.x-scenario'",
                "deletions": 1
            },
            {
                "sha": "6d1eedfeeb39a3be3eacc2687d4eb761602425aa",
                "filename": "apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/ComponentsDefine.java",
                "blob_url": "https://github.com/apache/skywalking/blob/6ffd92792d176b9af2562dd1d165576d05542c48/apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/ComponentsDefine.java",
                "raw_url": "https://github.com/apache/skywalking/raw/6ffd92792d176b9af2562dd1d165576d05542c48/apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/ComponentsDefine.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/ComponentsDefine.java?ref=6ffd92792d176b9af2562dd1d165576d05542c48",
                "patch": "@@ -145,4 +145,6 @@\n     public static final OfficialComponent SOCKET_IO = new OfficialComponent(76, \"SocketIO\");\n \n     public static final OfficialComponent REST_HIGH_LEVEL_CLIENT = new OfficialComponent(77, \"rest-high-level-client\");\n+\n+    public static final OfficialComponent SPRING_TX = new OfficialComponent(78, \"spring-tx\");\n }",
                "deletions": 0
            },
            {
                "sha": "89632bd7f30e773ade391a79ca6f0994029011e4",
                "filename": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java",
                "blob_url": "https://github.com/apache/skywalking/blob/6ffd92792d176b9af2562dd1d165576d05542c48/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java",
                "raw_url": "https://github.com/apache/skywalking/raw/6ffd92792d176b9af2562dd1d165576d05542c48/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java?ref=6ffd92792d176b9af2562dd1d165576d05542c48",
                "patch": "@@ -330,5 +330,13 @@\n              */\n             public static boolean TRACE_HANDLER_CHAIN = false;\n         }\n+\n+        public static class SpringTransaction {\n+\n+            /**\n+             * If true, the transaction definition name will be simplified\n+             */\n+            public static boolean SIMPLIFY_TRANSACTION_DEFINITION_NAME = false;\n+        }\n     }\n }",
                "deletions": 0
            },
            {
                "sha": "3284106e16194dc1a76b6e530fcd1032fa2bb22c",
                "filename": "apm-sniffer/optional-plugins/optional-spring-plugins/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/6ffd92792d176b9af2562dd1d165576d05542c48/apm-sniffer/optional-plugins/optional-spring-plugins/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/6ffd92792d176b9af2562dd1d165576d05542c48/apm-sniffer/optional-plugins/optional-spring-plugins/pom.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/optional-plugins/optional-spring-plugins/pom.xml?ref=6ffd92792d176b9af2562dd1d165576d05542c48",
                "patch": "@@ -30,6 +30,7 @@\n \n     <modules>\n         <module>spring-annotation-plugin</module>\n+        <module>spring-tx-plugin</module>\n         <module>optional-spring-cloud</module>\n     </modules>\n ",
                "deletions": 0
            },
            {
                "sha": "04b7e9e08f3def421452c6dfab0e1f177c8ba163",
                "filename": "apm-sniffer/optional-plugins/optional-spring-plugins/spring-tx-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/6ffd92792d176b9af2562dd1d165576d05542c48/apm-sniffer/optional-plugins/optional-spring-plugins/spring-tx-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/6ffd92792d176b9af2562dd1d165576d05542c48/apm-sniffer/optional-plugins/optional-spring-plugins/spring-tx-plugin/pom.xml",
                "status": "added",
                "changes": 43,
                "additions": 43,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/optional-plugins/optional-spring-plugins/spring-tx-plugin/pom.xml?ref=6ffd92792d176b9af2562dd1d165576d05542c48",
                "patch": "@@ -0,0 +1,43 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one or more\n+  ~ contributor license agreements.  See the NOTICE file distributed with\n+  ~ this work for additional information regarding copyright ownership.\n+  ~ The ASF licenses this file to You under the Apache License, Version 2.0\n+  ~ (the \"License\"); you may not use this file except in compliance with\n+  ~ the License.  You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  ~\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>optional-spring-plugins</artifactId>\n+        <groupId>org.apache.skywalking</groupId>\n+        <version>6.6.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+    <packaging>jar</packaging>\n+\n+    <artifactId>apm-spring-tx-plugin</artifactId>\n+\n+    <properties>\n+        <spring-tx.version>5.1.2.RELEASE</spring-tx.version>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-tx</artifactId>\n+            <version>${spring-tx.version}</version>\n+            <scope>provided</scope>\n+        </dependency>\n+    </dependencies>\n+</project>\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "f3ea9df55ec1bfa72e9e7f9979d92b1556ce2f3f",
                "filename": "apm-sniffer/optional-plugins/optional-spring-plugins/spring-tx-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/transaction/EndTransactionMethodInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/6ffd92792d176b9af2562dd1d165576d05542c48/apm-sniffer/optional-plugins/optional-spring-plugins/spring-tx-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/transaction/EndTransactionMethodInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/6ffd92792d176b9af2562dd1d165576d05542c48/apm-sniffer/optional-plugins/optional-spring-plugins/spring-tx-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/transaction/EndTransactionMethodInterceptor.java",
                "status": "added",
                "changes": 59,
                "additions": 59,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/optional-plugins/optional-spring-plugins/spring-tx-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/transaction/EndTransactionMethodInterceptor.java?ref=6ffd92792d176b9af2562dd1d165576d05542c48",
                "patch": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.skywalking.apm.plugin.spring.transaction;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.skywalking.apm.plugin.spring.transaction.context.Constants;\n+import org.springframework.transaction.TransactionStatus;\n+\n+import java.lang.reflect.Method;\n+\n+/**\n+ * @author zhaoyuguang\n+ */\n+public class EndTransactionMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+                             MethodInterceptResult result) throws Throwable {\n+        AbstractSpan span = ContextManager.createLocalSpan(Constants.OPERATION_NAME_SPRING_TRANSACTION_PREFIX + method.getName());\n+        TransactionStatus status = (TransactionStatus) allArguments[0];\n+        span.tag(Constants.TAG_SPRING_TRANSACTION_IS_NEW_TRANSACTION, String.valueOf(status.isNewTransaction()));\n+        span.tag(Constants.TAG_SPRING_TRANSACTION_HAS_SAVEPOINT, String.valueOf(status.hasSavepoint()));\n+        span.tag(Constants.TAG_SPRING_TRANSACTION_ROLLBACK_ONLY, String.valueOf(status.isRollbackOnly()));\n+        span.tag(Constants.TAG_SPRING_TRANSACTION_IS_COMPLETED, String.valueOf(status.isCompleted()));\n+        span.setComponent(ComponentsDefine.SPRING_TX);\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+                              Object ret) throws Throwable {\n+        ContextManager.stopSpan();\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                                      Class<?>[] argumentsTypes, Throwable t) {\n+        ContextManager.activeSpan().errorOccurred().log(t);\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "64059b9da21790598e47c4d9ba6f7426927c6bb2",
                "filename": "apm-sniffer/optional-plugins/optional-spring-plugins/spring-tx-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/transaction/GetTransactionMethodInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/6ffd92792d176b9af2562dd1d165576d05542c48/apm-sniffer/optional-plugins/optional-spring-plugins/spring-tx-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/transaction/GetTransactionMethodInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/6ffd92792d176b9af2562dd1d165576d05542c48/apm-sniffer/optional-plugins/optional-spring-plugins/spring-tx-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/transaction/GetTransactionMethodInterceptor.java",
                "status": "added",
                "changes": 81,
                "additions": 81,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/optional-plugins/optional-spring-plugins/spring-tx-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/transaction/GetTransactionMethodInterceptor.java?ref=6ffd92792d176b9af2562dd1d165576d05542c48",
                "patch": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.skywalking.apm.plugin.spring.transaction;\n+\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.skywalking.apm.plugin.spring.transaction.context.Constants;\n+import org.springframework.transaction.TransactionDefinition;\n+\n+import java.lang.reflect.Method;\n+\n+/**\n+ * @author zhaoyuguang\n+ */\n+public class GetTransactionMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+                             MethodInterceptResult result) throws Throwable {\n+        if (allArguments[0] == null) {\n+            AbstractSpan span = ContextManager.createLocalSpan(Constants.OPERATION_NAME_SPRING_TRANSACTION_NO_TRANSACTION_DEFINITION_GIVEN);\n+            span.setComponent(ComponentsDefine.SPRING_TX);\n+            return;\n+        }\n+        TransactionDefinition definition = (TransactionDefinition) allArguments[0];\n+        AbstractSpan span = ContextManager.createLocalSpan(Constants.OPERATION_NAME_SPRING_TRANSACTION_GET_TRANSACTION_METHOD + buildOperationName(definition.getName()));\n+        span.tag(Constants.TAG_SPRING_TRANSACTION_ISOLATION_LEVEL, String.valueOf(definition.getIsolationLevel()));\n+        span.tag(Constants.TAG_SPRING_TRANSACTION_PROPAGATION_BEHAVIOR, String.valueOf(definition.getPropagationBehavior()));\n+        span.tag(Constants.TAG_SPRING_TRANSACTION_TIMEOUT, String.valueOf(definition.getTimeout()));\n+        span.setComponent(ComponentsDefine.SPRING_TX);\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+                              Object ret) throws Throwable {\n+        ContextManager.stopSpan();\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                                      Class<?>[] argumentsTypes, Throwable t) {\n+        ContextManager.activeSpan().errorOccurred().log(t);\n+    }\n+\n+    private String buildOperationName(String transactionDefinitionName) {\n+        if (!Config.Plugin.SpringTransaction.SIMPLIFY_TRANSACTION_DEFINITION_NAME) {\n+            return transactionDefinitionName;\n+        }\n+        String[] ss = transactionDefinitionName.split(\"\\\\.\");\n+\n+        int simplifiedLength = ss.length - 2;\n+        if (simplifiedLength < 0) {\n+            return transactionDefinitionName;\n+        }\n+        StringBuilder name = new StringBuilder();\n+        for (int i = 0; i < ss.length - 1; i++) {\n+            name.append(i < simplifiedLength ? ss[i].charAt(0) : ss[i]).append(\".\");\n+        }\n+        return name.append(ss[ss.length - 1]).toString();\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "37001362aafc8d547d63be0d8e733dedd8f7ab8d",
                "filename": "apm-sniffer/optional-plugins/optional-spring-plugins/spring-tx-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/transaction/context/Constants.java",
                "blob_url": "https://github.com/apache/skywalking/blob/6ffd92792d176b9af2562dd1d165576d05542c48/apm-sniffer/optional-plugins/optional-spring-plugins/spring-tx-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/transaction/context/Constants.java",
                "raw_url": "https://github.com/apache/skywalking/raw/6ffd92792d176b9af2562dd1d165576d05542c48/apm-sniffer/optional-plugins/optional-spring-plugins/spring-tx-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/transaction/context/Constants.java",
                "status": "added",
                "changes": 35,
                "additions": 35,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/optional-plugins/optional-spring-plugins/spring-tx-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/transaction/context/Constants.java?ref=6ffd92792d176b9af2562dd1d165576d05542c48",
                "patch": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.skywalking.apm.plugin.spring.transaction.context;\n+\n+/**\n+ * @author zhaoyuguang\n+ */\n+\n+public interface Constants {\n+    String OPERATION_NAME_SPRING_TRANSACTION_PREFIX = \"TX/\";\n+    String OPERATION_NAME_SPRING_TRANSACTION_GET_TRANSACTION_METHOD = OPERATION_NAME_SPRING_TRANSACTION_PREFIX + \"get/\";\n+    String OPERATION_NAME_SPRING_TRANSACTION_NO_TRANSACTION_DEFINITION_GIVEN = OPERATION_NAME_SPRING_TRANSACTION_GET_TRANSACTION_METHOD + \"noTransactionDefinitionGiven\";\n+    String TAG_SPRING_TRANSACTION_ISOLATION_LEVEL = \"isolationLevel\";\n+    String TAG_SPRING_TRANSACTION_PROPAGATION_BEHAVIOR = \"propagationBehavior\";\n+    String TAG_SPRING_TRANSACTION_TIMEOUT = \"timeout\";\n+    String TAG_SPRING_TRANSACTION_IS_NEW_TRANSACTION = \"isNewTransaction\";\n+    String TAG_SPRING_TRANSACTION_HAS_SAVEPOINT = \"hasSavepoint\";\n+    String TAG_SPRING_TRANSACTION_ROLLBACK_ONLY = \"rollbackOnly\";\n+    String TAG_SPRING_TRANSACTION_IS_COMPLETED = \"isCompleted\";\n+}",
                "deletions": 0
            },
            {
                "sha": "5b1372a47ad9cfc7b8c424408e8171aa6894487f",
                "filename": "apm-sniffer/optional-plugins/optional-spring-plugins/spring-tx-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/transaction/define/AbstractPlatformTransactionManagerInstrumentation.java",
                "blob_url": "https://github.com/apache/skywalking/blob/6ffd92792d176b9af2562dd1d165576d05542c48/apm-sniffer/optional-plugins/optional-spring-plugins/spring-tx-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/transaction/define/AbstractPlatformTransactionManagerInstrumentation.java",
                "raw_url": "https://github.com/apache/skywalking/raw/6ffd92792d176b9af2562dd1d165576d05542c48/apm-sniffer/optional-plugins/optional-spring-plugins/spring-tx-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/transaction/define/AbstractPlatformTransactionManagerInstrumentation.java",
                "status": "added",
                "changes": 80,
                "additions": 80,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/optional-plugins/optional-spring-plugins/spring-tx-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/transaction/define/AbstractPlatformTransactionManagerInstrumentation.java?ref=6ffd92792d176b9af2562dd1d165576d05542c48",
                "patch": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.skywalking.apm.plugin.spring.transaction.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;\n+\n+/**\n+ * @author zhaoyuguang\n+ */\n+public class AbstractPlatformTransactionManagerInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {\n+\n+    @Override\n+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {\n+        return new ConstructorInterceptPoint[0];\n+    }\n+\n+    @Override\n+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {\n+        return new InstanceMethodsInterceptPoint[]{\n+            new InstanceMethodsInterceptPoint() {\n+                @Override\n+                public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                    return named(\"getTransaction\");\n+                }\n+\n+                @Override\n+                public String getMethodsInterceptor() {\n+                    return \"org.apache.skywalking.apm.plugin.spring.transaction.GetTransactionMethodInterceptor\";\n+                }\n+\n+                @Override\n+                public boolean isOverrideArgs() {\n+                    return false;\n+                }\n+            }, new InstanceMethodsInterceptPoint() {\n+                @Override\n+                public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                    return named(\"commit\").or(named(\"rollback\"));\n+                }\n+\n+                @Override\n+                public String getMethodsInterceptor() {\n+                    return \"org.apache.skywalking.apm.plugin.spring.transaction.EndTransactionMethodInterceptor\";\n+                }\n+\n+                @Override\n+                public boolean isOverrideArgs() {\n+                    return false;\n+                }\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public ClassMatch enhanceClass() {\n+        return byName(\"org.springframework.transaction.support.AbstractPlatformTransactionManager\");\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "2eae6963851649a8215640fa6a362607a46573ac",
                "filename": "apm-sniffer/optional-plugins/optional-spring-plugins/spring-tx-plugin/src/main/resources/skywalking-plugin.def",
                "blob_url": "https://github.com/apache/skywalking/blob/6ffd92792d176b9af2562dd1d165576d05542c48/apm-sniffer/optional-plugins/optional-spring-plugins/spring-tx-plugin/src/main/resources/skywalking-plugin.def",
                "raw_url": "https://github.com/apache/skywalking/raw/6ffd92792d176b9af2562dd1d165576d05542c48/apm-sniffer/optional-plugins/optional-spring-plugins/spring-tx-plugin/src/main/resources/skywalking-plugin.def",
                "status": "added",
                "changes": 17,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/optional-plugins/optional-spring-plugins/spring-tx-plugin/src/main/resources/skywalking-plugin.def?ref=6ffd92792d176b9af2562dd1d165576d05542c48",
                "patch": "@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+spring-tx=org.apache.skywalking.apm.plugin.spring.transaction.define.AbstractPlatformTransactionManagerInstrumentation",
                "deletions": 0
            },
            {
                "sha": "193cc992c7830eb68cfff00cee16b0973b03d098",
                "filename": "docs/en/guides/Plugin-test.md",
                "blob_url": "https://github.com/apache/skywalking/blob/6ffd92792d176b9af2562dd1d165576d05542c48/docs/en/guides/Plugin-test.md",
                "raw_url": "https://github.com/apache/skywalking/raw/6ffd92792d176b9af2562dd1d165576d05542c48/docs/en/guides/Plugin-test.md",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/docs/en/guides/Plugin-test.md?ref=6ffd92792d176b9af2562dd1d165576d05542c48",
                "patch": "@@ -630,9 +630,10 @@ canal 1.0.24-1.1.2 | 5 | 214.05\n \n \n ### Workload 2\n-#### Group 1 (2351.54s)\n+#### Group 1 (2906.54s)\n scenario name | versions | elapsed time (sec)\n ---|---|---\n+spring-tx 4.x+ | 10 | 555.00\n spring 4.3.x-5.2.x | 54 | 1769.32\n dubbo 2.5.x-2.6.x | 10 | 367.23\n dubbo 2.7.x | 4 | 214.99",
                "deletions": 1
            },
            {
                "sha": "b478a2fda8e5bcf21bb49938480d482271757472",
                "filename": "docs/en/setup/service-agent/java-agent/README.md",
                "blob_url": "https://github.com/apache/skywalking/blob/6ffd92792d176b9af2562dd1d165576d05542c48/docs/en/setup/service-agent/java-agent/README.md",
                "raw_url": "https://github.com/apache/skywalking/raw/6ffd92792d176b9af2562dd1d165576d05542c48/docs/en/setup/service-agent/java-agent/README.md",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/docs/en/setup/service-agent/java-agent/README.md?ref=6ffd92792d176b9af2562dd1d165576d05542c48",
                "patch": "@@ -109,6 +109,7 @@ property key | Description | Default |\n `plugin.solrj.trace_ops_params`|If true, trace all the operation parameters in Solr request, default is false.|`false`|\n `plugin.light4j.trace_handler_chain`|If true, trace all middleware/business handlers that are part of the Light4J handler chain for a request.|false|\n `plugin.opgroup.*`|Support operation name customize group rules in different plugins. Read [Group rule supported plugins](op_name_group_rule.md)|Not set|\n+`plugin.springtransaction.simplify_transaction_definition_name`|If true, the transaction definition name will be simplified.|false|\n \n ## Optional Plugins\n Java agent plugins are all pluggable. Optional plugins could be provided in `optional-plugins` folder under agent or 3rd party repositories.\n@@ -124,6 +125,7 @@ Now, we have the following known optional plugins.\n * [Customize enhance](Customize-enhance-trace.md) Trace methods based on description files, rather than write plugin or change source codes.\n * Plugin of Spring Cloud Gateway 2.1.x in optional plugin folder. Please only active this plugin when you install agent in Spring Gateway.\n * Plugin of [Play Framework](https://www.playframework.com/) 2.6+ (JDK 1.8 required & Scala 2.12/2.13) in optional plugin folder. Please only active this plugin when you install agent in [Play Framework](https://www.playframework.com/). \n+* Plugin of Spring Transaction in optional plugin folder. The reason of being optional plugin is, many local span are generated, which also spend more CPU, memory and network.\n \n ## Bootstrap class plugins\n All bootstrap plugins are optional, due to unexpected risk. Bootstrap plugins are provided in `bootstrap-plugins` folder.",
                "deletions": 0
            },
            {
                "sha": "e14c23d3df4ec467b834f817725f3cc652471c08",
                "filename": "docs/en/setup/service-agent/java-agent/Supported-list.md",
                "blob_url": "https://github.com/apache/skywalking/blob/6ffd92792d176b9af2562dd1d165576d05542c48/docs/en/setup/service-agent/java-agent/Supported-list.md",
                "raw_url": "https://github.com/apache/skywalking/raw/6ffd92792d176b9af2562dd1d165576d05542c48/docs/en/setup/service-agent/java-agent/Supported-list.md",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/docs/en/setup/service-agent/java-agent/Supported-list.md?ref=6ffd92792d176b9af2562dd1d165576d05542c48",
                "patch": "@@ -70,6 +70,7 @@\n * Spring Ecosystem\n   * Spring Bean annotations(@Bean, @Service, @Component, @Repository) 3.x and 4.x (Optional\u00b2)\n   * Spring Core Async SuccessCallback/FailureCallback/ListenableFutureCallback 4.x\n+  * Spring Transaction 4.x and 5.x (Optional\u00b2)\n * [Hystrix: Latency and Fault Tolerance for Distributed Systems](https://github.com/Netflix/Hystrix) 1.4.20 -> 1.5.12\n * Scheduler\n   * [Elastic Job](https://github.com/elasticjob/elastic-job) 2.x",
                "deletions": 0
            },
            {
                "sha": "fe1aa1f625124ad6b80629fd3ac3df15ae9fed22",
                "filename": "oap-server/server-core/src/test/resources/component-libraries.yml",
                "blob_url": "https://github.com/apache/skywalking/blob/6ffd92792d176b9af2562dd1d165576d05542c48/oap-server/server-core/src/test/resources/component-libraries.yml",
                "raw_url": "https://github.com/apache/skywalking/raw/6ffd92792d176b9af2562dd1d165576d05542c48/oap-server/server-core/src/test/resources/component-libraries.yml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-core/src/test/resources/component-libraries.yml?ref=6ffd92792d176b9af2562dd1d165576d05542c48",
                "patch": "@@ -233,6 +233,9 @@ SocketIO:\n rest-high-level-client:\n   id: 77\n   languages: Java\n+spring-tx:\n+  id: 78\n+  languages: Java\n \n # .NET/.NET Core components\n # [3000, 4000) for C#/.NET only",
                "deletions": 0
            },
            {
                "sha": "1f8f73d84ffb0c6b14c3a5aa7f5c76ba80c73caa",
                "filename": "oap-server/server-starter/src/main/resources/component-libraries.yml",
                "blob_url": "https://github.com/apache/skywalking/blob/6ffd92792d176b9af2562dd1d165576d05542c48/oap-server/server-starter/src/main/resources/component-libraries.yml",
                "raw_url": "https://github.com/apache/skywalking/raw/6ffd92792d176b9af2562dd1d165576d05542c48/oap-server/server-starter/src/main/resources/component-libraries.yml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-starter/src/main/resources/component-libraries.yml?ref=6ffd92792d176b9af2562dd1d165576d05542c48",
                "patch": "@@ -260,6 +260,9 @@ SocketIO:\n rest-high-level-client:\n   id: 77\n   languages: Java\n+spring-tx:\n+  id: 78\n+  languages: Java\n \n # .NET/.NET Core components\n # [3000, 4000) for C#/.NET only",
                "deletions": 0
            },
            {
                "sha": "012d0342fd5a3102979363c6d6ed59d17a8c3797",
                "filename": "test/plugin/scenarios/spring-tx-scenario/bin/startup.sh",
                "blob_url": "https://github.com/apache/skywalking/blob/6ffd92792d176b9af2562dd1d165576d05542c48/test/plugin/scenarios/spring-tx-scenario/bin/startup.sh",
                "raw_url": "https://github.com/apache/skywalking/raw/6ffd92792d176b9af2562dd1d165576d05542c48/test/plugin/scenarios/spring-tx-scenario/bin/startup.sh",
                "status": "added",
                "changes": 21,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/spring-tx-scenario/bin/startup.sh?ref=6ffd92792d176b9af2562dd1d165576d05542c48",
                "patch": "@@ -0,0 +1,21 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+home=\"$(cd \"$(dirname $0)\"; pwd)\"\n+\n+java -Dmysql.servers=${MYSQL_SERVERS} -Dskywalking.plugin.springtransaction.simplify_transaction_definition_name=true -jar ${agent_opts} ${home}/../libs/spring-tx-scenario.jar &\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "72cf9955a8e813ad91435f38c3847730a08c35a1",
                "filename": "test/plugin/scenarios/spring-tx-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/6ffd92792d176b9af2562dd1d165576d05542c48/test/plugin/scenarios/spring-tx-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/6ffd92792d176b9af2562dd1d165576d05542c48/test/plugin/scenarios/spring-tx-scenario/config/expectedData.yaml",
                "status": "added",
                "changes": 168,
                "additions": 168,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/spring-tx-scenario/config/expectedData.yaml?ref=6ffd92792d176b9af2562dd1d165576d05542c48",
                "patch": "@@ -0,0 +1,168 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+registryItems:\n+  applications:\n+    - {spring-tx-scenario: 2}\n+  instances:\n+    - {spring-tx-scenario: 1}\n+  operationNames:\n+    - spring-tx-scenario: [Mysql/JDBI/Statement/execute, Mysql/JDBI/Connection/commit,\n+                           Mysql/JDBI/PreparedStatement/executeUpdate, /case/spring-tx-case, /case/healthCheck,\n+                           Mysql/JDBI/Connection/close, Mysql/JDBI/Statement/executeQuery]\n+  heartbeat: []\n+segmentItems:\n+  - applicationCode: spring-tx-scenario\n+    segmentSize: nq 0\n+    segments:\n+      - segmentId: not null\n+        spans:\n+          - operationName: TX/get/t.o.a.s.a.t.s.t.s.i.DemoServiceImpl.doBiz\n+            operationId: 0\n+            parentSpanId: 0\n+            spanId: 1\n+            spanLayer: Unknown\n+            startTime: not null\n+            endTime: not null\n+            componentId: 78\n+            componentName: ''\n+            isError: false\n+            spanType: Local\n+            peer: ''\n+            peerId: 0\n+            tags:\n+              - {key: isolationLevel, value: '-1'}\n+              - {key: propagationBehavior, value: '0'}\n+              - {key: timeout, value: '-1'}\n+          - operationName: Mysql/JDBI/PreparedStatement/executeUpdate\n+            operationId: 0\n+            parentSpanId: 0\n+            spanId: 2\n+            spanLayer: Database\n+            startTime: not null\n+            endTime: not null\n+            componentId: 33\n+            componentName: ''\n+            isError: false\n+            spanType: Exit\n+            peer: mysql:3306\n+            peerId: 0\n+            tags:\n+              - {key: db.type, value: sql}\n+              - {key: db.instance, value: ''}\n+              - {key: db.statement, value: 'insert into `test`.`table_demo`(name) values(?)'}\n+          - operationName: Mysql/JDBI/PreparedStatement/executeUpdate\n+            operationId: 0\n+            parentSpanId: 0\n+            spanId: 3\n+            spanLayer: Database\n+            startTime: not null\n+            endTime: not null\n+            componentId: 33\n+            componentName: ''\n+            isError: false\n+            spanType: Exit\n+            peer: mysql:3306\n+            peerId: 0\n+            tags:\n+              - {key: db.type, value: sql}\n+              - {key: db.instance, value: ''}\n+              - {key: db.statement, value: 'insert into `test`.`table_demo`(name) values(?)'}\n+          - operationName: Mysql/JDBI/Connection/commit\n+            operationId: 0\n+            parentSpanId: 4\n+            spanId: 5\n+            spanLayer: Database\n+            startTime: not null\n+            endTime: not null\n+            componentId: 33\n+            componentName: ''\n+            isError: false\n+            spanType: Exit\n+            peer: mysql:3306\n+            peerId: 0\n+            tags:\n+              - {key: db.type, value: sql}\n+              - {key: db.instance, value: ''}\n+              - {key: db.statement, value: ''}\n+          - operationName: Mysql/JDBI/Statement/executeQuery\n+            operationId: 0\n+            parentSpanId: 4\n+            spanId: 6\n+            spanLayer: Database\n+            startTime: not null\n+            endTime: not null\n+            componentId: 33\n+            componentName: ''\n+            isError: false\n+            spanType: Exit\n+            peer: mysql:3306\n+            peerId: 0\n+            tags:\n+              - {key: db.type, value: sql}\n+              - {key: db.instance, value: ''}\n+              - {key: db.statement, value: select @@session.tx_read_only}\n+          - operationName: Mysql/JDBI/Connection/close\n+            operationId: 0\n+            parentSpanId: 4\n+            spanId: 7\n+            spanLayer: Database\n+            startTime: not null\n+            endTime: not null\n+            componentId: 33\n+            componentName: ''\n+            isError: false\n+            spanType: Exit\n+            peer: mysql:3306\n+            peerId: 0\n+            tags:\n+              - {key: db.type, value: sql}\n+              - {key: db.instance, value: ''}\n+              - {key: db.statement, value: ''}\n+          - operationName: TX/commit\n+            operationId: 0\n+            parentSpanId: 0\n+            spanId: 4\n+            spanLayer: Unknown\n+            startTime: not null\n+            endTime: not null\n+            componentId: 78\n+            componentName: ''\n+            isError: false\n+            spanType: Local\n+            peer: ''\n+            peerId: 0\n+            tags:\n+              - {key: isNewTransaction, value: 'true'}\n+              - {key: hasSavepoint, value: 'false'}\n+              - {key: rollbackOnly, value: 'false'}\n+              - {key: isCompleted, value: 'false'}\n+          - operationName: /case/spring-tx-case\n+            operationId: 0\n+            parentSpanId: -1\n+            spanId: 0\n+            spanLayer: Http\n+            startTime: not null\n+            endTime: not null\n+            componentId: 14\n+            componentName: ''\n+            isError: false\n+            spanType: Entry\n+            peer: ''\n+            peerId: 0\n+            tags:\n+              - {key: url, value: 'http://localhost:8080/spring-tx-scenario/case/spring-tx-case'}\n+              - {key: http.method, value: GET}\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "56a0b875e35298c7b2393e777e683a4970e61039",
                "filename": "test/plugin/scenarios/spring-tx-scenario/configuration.yml",
                "blob_url": "https://github.com/apache/skywalking/blob/6ffd92792d176b9af2562dd1d165576d05542c48/test/plugin/scenarios/spring-tx-scenario/configuration.yml",
                "raw_url": "https://github.com/apache/skywalking/raw/6ffd92792d176b9af2562dd1d165576d05542c48/test/plugin/scenarios/spring-tx-scenario/configuration.yml",
                "status": "added",
                "changes": 34,
                "additions": 34,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/spring-tx-scenario/configuration.yml?ref=6ffd92792d176b9af2562dd1d165576d05542c48",
                "patch": "@@ -0,0 +1,34 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+type: jvm\n+entryService: http://localhost:8080/spring-tx-scenario/case/spring-tx-case\n+healthCheck: http://localhost:8080/spring-tx-scenario/case/healthCheck\n+startScript: ./bin/startup.sh\n+framework: spring-tx\n+runningMode: with_optional\n+withPlugins: apm-spring-tx-plugin-*.jar\n+environment:\n+  - MYSQL_SERVERS=mysql:3306\n+  - MYSQL_DATABASE=test\n+depends_on:\n+  - mysql\n+dependencies:\n+  mysql:\n+    image: mysql:5.6\n+    hostname: mysql\n+    environment:\n+      - MYSQL_ROOT_PASSWORD=000000\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "b622b1a7a2c301e9d09b534f1b467f51eeabaea3",
                "filename": "test/plugin/scenarios/spring-tx-scenario/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/6ffd92792d176b9af2562dd1d165576d05542c48/test/plugin/scenarios/spring-tx-scenario/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/6ffd92792d176b9af2562dd1d165576d05542c48/test/plugin/scenarios/spring-tx-scenario/pom.xml",
                "status": "added",
                "changes": 109,
                "additions": 109,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/spring-tx-scenario/pom.xml?ref=6ffd92792d176b9af2562dd1d165576d05542c48",
                "patch": "@@ -0,0 +1,109 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one or more\n+  ~ contributor license agreements.  See the NOTICE file distributed with\n+  ~ this work for additional information regarding copyright ownership.\n+  ~ The ASF licenses this file to You under the Apache License, Version 2.0\n+  ~ (the \"License\"); you may not use this file except in compliance with\n+  ~ the License.  You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  ~\n+  -->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <groupId>org.apache.skywalking</groupId>\n+    <artifactId>spring-tx-scenario</artifactId>\n+    <version>5.0.0</version>\n+\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <compiler.version>1.8</compiler.version>\n+        <test.framework.version>2.0.0.RELEASE</test.framework.version>\n+        <docker.image.version>${test.framework.version}</docker.image.version>\n+    </properties>\n+\n+    <name>skywalking-spring-tx-scenario</name>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-web</artifactId>\n+            <version>${test.framework.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-jdbc</artifactId>\n+            <version>${test.framework.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>mysql</groupId>\n+            <artifactId>mysql-connector-java</artifactId>\n+            <version>6.0.6</version>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <finalName>spring-tx-scenario</finalName>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.springframework.boot</groupId>\n+                <artifactId>spring-boot-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>repackage</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <configuration>\n+                    <source>${compiler.version}</source>\n+                    <target>${compiler.version}</target>\n+                    <encoding>${project.build.sourceEncoding}</encoding>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-assembly-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>assemble</id>\n+                        <phase>package</phase>\n+                        <goals>\n+                            <goal>single</goal>\n+                        </goals>\n+                        <configuration>\n+                            <descriptors>\n+                                <descriptor>src/main/assembly/assembly.xml</descriptor>\n+                            </descriptors>\n+                            <outputDirectory>./target/</outputDirectory>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <pluginRepositories>\n+        <pluginRepository>\n+            <id>spring-snapshots</id>\n+            <url>http://repo.spring.io/snapshot</url>\n+        </pluginRepository>\n+        <pluginRepository>\n+            <id>spring-milestones</id>\n+            <url>http://repo.spring.io/milestone</url>\n+        </pluginRepository>\n+    </pluginRepositories>\n+</project>\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "f3feb135aee7717e0f951a16a775c66b4373020d",
                "filename": "test/plugin/scenarios/spring-tx-scenario/src/main/assembly/assembly.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/6ffd92792d176b9af2562dd1d165576d05542c48/test/plugin/scenarios/spring-tx-scenario/src/main/assembly/assembly.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/6ffd92792d176b9af2562dd1d165576d05542c48/test/plugin/scenarios/spring-tx-scenario/src/main/assembly/assembly.xml",
                "status": "added",
                "changes": 41,
                "additions": 41,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/spring-tx-scenario/src/main/assembly/assembly.xml?ref=6ffd92792d176b9af2562dd1d165576d05542c48",
                "patch": "@@ -0,0 +1,41 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one or more\n+  ~ contributor license agreements.  See the NOTICE file distributed with\n+  ~ this work for additional information regarding copyright ownership.\n+  ~ The ASF licenses this file to You under the Apache License, Version 2.0\n+  ~ (the \"License\"); you may not use this file except in compliance with\n+  ~ the License.  You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  ~\n+  -->\n+<assembly\n+        xmlns=\"http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2\"\n+        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+        xsi:schemaLocation=\"http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2 http://maven.apache.org/xsd/assembly-1.1.2.xsd\">\n+    <formats>\n+        <format>zip</format>\n+    </formats>\n+\n+    <fileSets>\n+        <fileSet>\n+            <directory>./bin</directory>\n+            <fileMode>0775</fileMode>\n+        </fileSet>\n+    </fileSets>\n+\n+    <files>\n+        <file>\n+            <source>${project.build.directory}/spring-tx-scenario.jar</source>\n+            <outputDirectory>./libs</outputDirectory>\n+            <fileMode>0775</fileMode>\n+        </file>\n+    </files>\n+</assembly>",
                "deletions": 0
            },
            {
                "sha": "406530bcdcb026a49336808c24812eddd13c9961",
                "filename": "test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/Application.java",
                "blob_url": "https://github.com/apache/skywalking/blob/6ffd92792d176b9af2562dd1d165576d05542c48/test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/Application.java",
                "raw_url": "https://github.com/apache/skywalking/raw/6ffd92792d176b9af2562dd1d165576d05542c48/test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/Application.java",
                "status": "added",
                "changes": 35,
                "additions": 35,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/Application.java?ref=6ffd92792d176b9af2562dd1d165576d05542c48",
                "patch": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package test.org.apache.skywalking.apm.testcase.spring.transaction;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.transaction.annotation.EnableTransactionManagement;\n+\n+/**\n+ * @author zhaoyuguang\n+ */\n+@SpringBootApplication\n+@EnableTransactionManagement\n+public class Application {\n+\n+    public static void main(String[] args) {\n+        SpringApplication.run(Application.class, args);\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "2f91fc1811dc57653269c15fa719e68c4d0bf9fa",
                "filename": "test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/config/JdbcConfig.java",
                "blob_url": "https://github.com/apache/skywalking/blob/6ffd92792d176b9af2562dd1d165576d05542c48/test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/config/JdbcConfig.java",
                "raw_url": "https://github.com/apache/skywalking/raw/6ffd92792d176b9af2562dd1d165576d05542c48/test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/config/JdbcConfig.java",
                "status": "added",
                "changes": 53,
                "additions": 53,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/config/JdbcConfig.java?ref=6ffd92792d176b9af2562dd1d165576d05542c48",
                "patch": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package test.org.apache.skywalking.apm.testcase.spring.transaction.config;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.datasource.DriverManagerDataSource;\n+\n+import javax.sql.DataSource;\n+\n+\n+/**\n+ * @author zhaoyuguang\n+ */\n+@Configuration\n+public class JdbcConfig {\n+\n+    @Value(\"${mysql.servers}\")\n+    private String url;\n+\n+    @Bean(name = \"dataSource\")\n+    public DataSource createDataSource() {\n+        DriverManagerDataSource dataSource = new DriverManagerDataSource();\n+        dataSource.setDriverClassName(\"com.mysql.cj.jdbc.Driver\");\n+        dataSource.setUrl(\"jdbc:mysql://\" + url + \"?useSSL=false\");\n+        dataSource.setUsername(\"root\");\n+        dataSource.setPassword(\"000000\");\n+        return dataSource;\n+    }\n+\n+    @Bean(name = \"jdbcTemplate\")\n+    public JdbcTemplate createJdbcTemplate(DataSource dataSource) {\n+        return new JdbcTemplate(dataSource);\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "cbd421fe4e676417940c8c2da23c9e08d4b66556",
                "filename": "test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/config/TransactionConfig.java",
                "blob_url": "https://github.com/apache/skywalking/blob/6ffd92792d176b9af2562dd1d165576d05542c48/test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/config/TransactionConfig.java",
                "raw_url": "https://github.com/apache/skywalking/raw/6ffd92792d176b9af2562dd1d165576d05542c48/test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/config/TransactionConfig.java",
                "status": "added",
                "changes": 38,
                "additions": 38,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/config/TransactionConfig.java?ref=6ffd92792d176b9af2562dd1d165576d05542c48",
                "patch": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package test.org.apache.skywalking.apm.testcase.spring.transaction.config;\n+\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.jdbc.datasource.DataSourceTransactionManager;\n+import org.springframework.transaction.PlatformTransactionManager;\n+\n+import javax.sql.DataSource;\n+\n+/**\n+ * @author zhaoyuguang\n+ */\n+@Configuration\n+public class TransactionConfig {\n+\n+    @Bean\n+    public PlatformTransactionManager transactionManager(DataSource dataSource){\n+        return new DataSourceTransactionManager(dataSource);\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "92d652462f03c4a539e6598e7198be1ec2b84a30",
                "filename": "test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/controller/CaseController.java",
                "blob_url": "https://github.com/apache/skywalking/blob/6ffd92792d176b9af2562dd1d165576d05542c48/test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/controller/CaseController.java",
                "raw_url": "https://github.com/apache/skywalking/raw/6ffd92792d176b9af2562dd1d165576d05542c48/test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/controller/CaseController.java",
                "status": "added",
                "changes": 72,
                "additions": 72,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/controller/CaseController.java?ref=6ffd92792d176b9af2562dd1d165576d05542c48",
                "patch": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package test.org.apache.skywalking.apm.testcase.spring.transaction.controller;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import test.org.apache.skywalking.apm.testcase.spring.transaction.service.DemoService;\n+\n+/**\n+ * @author zhaoyuguang\n+ */\n+@Controller\n+@RequestMapping(\"/case\")\n+@PropertySource(\"classpath:application.properties\")\n+public class CaseController {\n+\n+    @Value(\"${mysql.servers}\")\n+    private String address;\n+    @Autowired\n+    private JdbcTemplate jdbcTemplate;\n+\n+    @Autowired\n+    private DemoService demoService;\n+\n+\n+    @RequestMapping(\"/spring-tx-case\")\n+    @ResponseBody\n+    public String springTransactionCase() {\n+        demoService.doBiz();\n+        return \"Success\";\n+    }\n+\n+    @RequestMapping(\"/healthCheck\")\n+    @ResponseBody\n+    public String healthCheck() {\n+        try {\n+            jdbcTemplate.execute(\"create database if not exists test default charset = utf8\");\n+            jdbcTemplate.execute(\"\" +\n+                    \"CREATE TABLE IF NOT EXISTS `test`.`table_demo` (\\n\" +\n+                    \"  `id` bigint(20) NOT NULL AUTO_INCREMENT,\\n\" +\n+                    \"  `name` varchar(60),\\n\" +\n+                    \"  PRIMARY KEY (`id`)\\n\" +\n+                    \") ENGINE=InnoDB\");\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            throw e;\n+        }\n+        return \"success\";\n+    }\n+\n+}\n+",
                "deletions": 0
            },
            {
                "sha": "7d5459eeac1074e5ac4dcae1d8d4e60d1ad9ceb0",
                "filename": "test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/dao/DemoDao.java",
                "blob_url": "https://github.com/apache/skywalking/blob/6ffd92792d176b9af2562dd1d165576d05542c48/test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/dao/DemoDao.java",
                "raw_url": "https://github.com/apache/skywalking/raw/6ffd92792d176b9af2562dd1d165576d05542c48/test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/dao/DemoDao.java",
                "status": "added",
                "changes": 28,
                "additions": 28,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/dao/DemoDao.java?ref=6ffd92792d176b9af2562dd1d165576d05542c48",
                "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package test.org.apache.skywalking.apm.testcase.spring.transaction.dao;\n+\n+/**\n+ * @author zhaoyuguang\n+ */\n+\n+public interface DemoDao {\n+\n+    int insert(String name);\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "806ebc9c5d41296c8c4f69eb6bf7e807a9c21042",
                "filename": "test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/dao/impl/DemoDaoImpl.java",
                "blob_url": "https://github.com/apache/skywalking/blob/6ffd92792d176b9af2562dd1d165576d05542c48/test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/dao/impl/DemoDaoImpl.java",
                "raw_url": "https://github.com/apache/skywalking/raw/6ffd92792d176b9af2562dd1d165576d05542c48/test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/dao/impl/DemoDaoImpl.java",
                "status": "added",
                "changes": 39,
                "additions": 39,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/dao/impl/DemoDaoImpl.java?ref=6ffd92792d176b9af2562dd1d165576d05542c48",
                "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package test.org.apache.skywalking.apm.testcase.spring.transaction.dao.impl;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Repository;\n+import test.org.apache.skywalking.apm.testcase.spring.transaction.dao.DemoDao;\n+\n+/**\n+ * @author zhaoyuguang\n+ */\n+@Repository\n+public class DemoDaoImpl implements DemoDao {\n+\n+    @Autowired\n+    private JdbcTemplate jdbcTemplate;\n+\n+    @Override\n+    public int insert(String name) {\n+        return jdbcTemplate.update(\"insert into `test`.`table_demo`(name) values(?)\", name);\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "a4ad4eb16eef111e6bb40276f3ff0aea7c1a37f5",
                "filename": "test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/service/DemoService.java",
                "blob_url": "https://github.com/apache/skywalking/blob/6ffd92792d176b9af2562dd1d165576d05542c48/test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/service/DemoService.java",
                "raw_url": "https://github.com/apache/skywalking/raw/6ffd92792d176b9af2562dd1d165576d05542c48/test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/service/DemoService.java",
                "status": "added",
                "changes": 28,
                "additions": 28,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/service/DemoService.java?ref=6ffd92792d176b9af2562dd1d165576d05542c48",
                "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package test.org.apache.skywalking.apm.testcase.spring.transaction.service;\n+\n+/**\n+ * @author zhaoyuguang\n+ */\n+\n+public interface DemoService {\n+\n+    void doBiz();\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "19b42868cb56078f1668b46b3ad4e471da920fc0",
                "filename": "test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/service/impl/DemoServiceImpl.java",
                "blob_url": "https://github.com/apache/skywalking/blob/6ffd92792d176b9af2562dd1d165576d05542c48/test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/service/impl/DemoServiceImpl.java",
                "raw_url": "https://github.com/apache/skywalking/raw/6ffd92792d176b9af2562dd1d165576d05542c48/test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/service/impl/DemoServiceImpl.java",
                "status": "added",
                "changes": 41,
                "additions": 41,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/spring-tx-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/transaction/service/impl/DemoServiceImpl.java?ref=6ffd92792d176b9af2562dd1d165576d05542c48",
                "patch": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package test.org.apache.skywalking.apm.testcase.spring.transaction.service.impl;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+import test.org.apache.skywalking.apm.testcase.spring.transaction.dao.DemoDao;\n+import test.org.apache.skywalking.apm.testcase.spring.transaction.service.DemoService;\n+\n+/**\n+ * @author zhaoyuguang\n+ */\n+@Service\n+public class DemoServiceImpl implements DemoService {\n+\n+    @Autowired\n+    private DemoDao demoDao;\n+\n+    @Override\n+    @Transactional\n+    public void doBiz() {\n+        demoDao.insert(\"1\");\n+        demoDao.insert(\"2\");\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "e9aaf725ef9a385c62700498dbc09f8a45276891",
                "filename": "test/plugin/scenarios/spring-tx-scenario/src/main/resources/application.properties",
                "blob_url": "https://github.com/apache/skywalking/blob/6ffd92792d176b9af2562dd1d165576d05542c48/test/plugin/scenarios/spring-tx-scenario/src/main/resources/application.properties",
                "raw_url": "https://github.com/apache/skywalking/raw/6ffd92792d176b9af2562dd1d165576d05542c48/test/plugin/scenarios/spring-tx-scenario/src/main/resources/application.properties",
                "status": "added",
                "changes": 21,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/spring-tx-scenario/src/main/resources/application.properties?ref=6ffd92792d176b9af2562dd1d165576d05542c48",
                "patch": "@@ -0,0 +1,21 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+#\n+\n+server.port=8080\n+server.contextPath=/spring-tx-scenario\n+server.servlet.contextPath=/spring-tx-scenario\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "4045a35cafebf1829e6fd3f4578d3f1a3c3772f1",
                "filename": "test/plugin/scenarios/spring-tx-scenario/support-version.list",
                "blob_url": "https://github.com/apache/skywalking/blob/6ffd92792d176b9af2562dd1d165576d05542c48/test/plugin/scenarios/spring-tx-scenario/support-version.list",
                "raw_url": "https://github.com/apache/skywalking/raw/6ffd92792d176b9af2562dd1d165576d05542c48/test/plugin/scenarios/spring-tx-scenario/support-version.list",
                "status": "added",
                "changes": 26,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/spring-tx-scenario/support-version.list?ref=6ffd92792d176b9af2562dd1d165576d05542c48",
                "patch": "@@ -0,0 +1,26 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+2.1.9.RELEASE\n+2.1.5.RELEASE\n+2.1.0.RELEASE\n+2.0.9.RELEASE\n+2.0.5.RELEASE\n+2.0.0.RELEASE\n+1.5.22.RELEASE\n+1.5.11.RELEASE\n+1.5.0.RELEASE\n+1.4.7.RELEASE\n\\ No newline at end of file",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "Remove the local/exit span register mechanism in Java agent scenario (#4059)\n\n* Remove the local span and exit span register mechanism in Java agent scenario.\r\n\r\n* Fix config, plugin, and document, as exit span is not required register anymore.\r\n\r\n* Try to fix the test case expected data due to no register for exit span.\r\n\r\n* Fix toolkit case.\r\n\r\n* Remove exit span from plugin test framework document.\r\n\r\n* Update protocol, FAQ, and CHANGELOG documents to highlight this change.\r\n\r\n* Fix NPE when no entry span in the whole segment. Set endpoint to null in segment entity.\r\n\r\n* Fix the snapshot and add inexistence operation name id.\r\n\r\n* Fix several async cases.\r\n\r\n* Fix undertow test case.\r\n\r\n* Fix wrong error log name.\r\n\r\n* Keep name consistent with 6.x concepts.\r\n\r\n* Try to fix 3 async scenarios.\r\n\r\n* Fix okhttp case.\r\n\r\n* Fix Spring Async case.\r\n\r\n* Fix another NPE\r\n\r\n* Fix NPE when first span has no endpoint id when it is local or exit span.\r\n\r\n* Still fill first operation name when no endpoint id.",
        "commit": "https://github.com/apache/skywalking/commit/4e501328171f434c74144d373be6df0264f43a24",
        "parent": "https://github.com/apache/skywalking/commit/23311ca1dc75f810842d7faf2d545fc12b37cf6b",
        "bug_id": "skywalking_6",
        "file": [
            {
                "sha": "c8c84886d0767eecbb7bb753f19bf5dffb778e1b",
                "filename": ".gitignore",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/.gitignore",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/.gitignore",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/.gitignore?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -18,3 +18,5 @@ OALLexer.tokens\n .vscode \n .checkstyle\n .externalToolBuilders\n+/test/plugin/dist\n+/test/plugin/workspace",
                "deletions": 0
            },
            {
                "sha": "8724c472a08d0a88278e55a3c9d100b35bc4693b",
                "filename": "CHANGES.md",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/CHANGES.md",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/CHANGES.md",
                "status": "modified",
                "changes": 11,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/CHANGES.md?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -2,6 +2,15 @@ Changes by Version\n ==================\n Release Notes.\n \n+6.6.0\n+------------------\n+TODO\n+\n+#### Project\n+- [**IMPORTANT**] Local span and exit span are not treated as endpoint detected at client and local. Only entry span is the endpoint. Reduce the load of register and memory cost.\n+\n+All issues and pull requests are [here](https://github.com/apache/skywalking/milestone/37?closed=1)\n+\n 6.5.0\n ------------------\n \n@@ -74,6 +83,8 @@ Release Notes.\n - Update als setup doc as istio 1.3 released (#3470)\n - Fill faq reply in official document. (#3450)\n \n+All issues and pull requests are [here](https://github.com/apache/skywalking/milestone/36?closed=1)\n+\n \n 6.4.0\n ------------------",
                "deletions": 0
            },
            {
                "sha": "2bc276c3b58edb6d7bc0862fa9574437fbfc169e",
                "filename": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java",
                "status": "modified",
                "changes": 11,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -317,11 +317,14 @@\n          */\n         public static class OPGroup {\n             /**\n-             * Rules for RestTemplate plugin\n+             * Since 6.6.0, exit span is not requesting endpoint register,\n+             * this group rule is not required.\n+             *\n+             * Keep this commented, just as a reminder that, it will be reused in a RPC server side plugin.\n              */\n-            public static class RestTemplate implements OPGroupDefinition {\n-                public static Map<String, String> RULE = new HashMap<String, String>();\n-            }\n+//            public static class RestTemplate implements OPGroupDefinition {\n+//                public static Map<String, String> RULE = new HashMap<String, String>();\n+//            }\n         }\n \n         public static class Light4J {",
                "deletions": 4
            },
            {
                "sha": "ccb9aae523513298321938ee689015664f9e849b",
                "filename": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/TracingContext.java",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/TracingContext.java",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/TracingContext.java",
                "status": "modified",
                "changes": 106,
                "additions": 64,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/TracingContext.java?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -74,7 +74,7 @@\n     /**\n      * Active spans stored in a Stack, usually called 'ActiveSpanStack'. This {@link LinkedList} is the in-memory\n      * storage-structure. <p> I use {@link LinkedList#removeLast()}, {@link LinkedList#addLast(Object)} and {@link\n-     * LinkedList#last} instead of {@link #pop()}, {@link #push(AbstractSpan)}, {@link #peek()}\n+     * LinkedList#getLast()} instead of {@link #pop()}, {@link #push(AbstractSpan)}, {@link #peek()}\n      */\n     private LinkedList<AbstractSpan> activeSpanStack = new LinkedList<AbstractSpan>();\n \n@@ -131,34 +131,58 @@ public void inject(ContextCarrier carrier) {\n         } else {\n             carrier.setPeerId(peerId);\n         }\n+\n+        AbstractSpan firstSpan = first();\n+        String firstSpanOperationName = firstSpan.getOperationName();\n+\n         List<TraceSegmentRef> refs = this.segment.getRefs();\n-        int operationId;\n-        String operationName;\n+        int operationId = DictionaryUtil.inexistence();\n+        String operationName = \"\";\n         int entryApplicationInstanceId;\n+\n         if (refs != null && refs.size() > 0) {\n             TraceSegmentRef ref = refs.get(0);\n             operationId = ref.getEntryEndpointId();\n             operationName = ref.getEntryEndpointName();\n             entryApplicationInstanceId = ref.getEntryServiceInstanceId();\n         } else {\n-            AbstractSpan firstSpan = first();\n-            operationId = firstSpan.getOperationId();\n-            operationName = firstSpan.getOperationName();\n+            if (firstSpan.isEntry()) {\n+                /**\n+                 * Since 6.6.0, if first span is not entry span, then this is an internal segment(no RPC),\n+                 * rather than an endpoint.\n+                 */\n+                operationId = firstSpan.getOperationId();\n+                operationName = firstSpanOperationName;\n+            }\n             entryApplicationInstanceId = this.segment.getApplicationInstanceId();\n+\n         }\n         carrier.setEntryServiceInstanceId(entryApplicationInstanceId);\n \n         if (operationId == DictionaryUtil.nullValue()) {\n             if (!StringUtil.isEmpty(operationName)) {\n                 carrier.setEntryEndpointName(operationName);\n+            } else {\n+                /**\n+                 * Since 6.6.0, if first span is not entry span, then this is an internal segment(no RPC),\n+                 * rather than an endpoint.\n+                 */\n             }\n         } else {\n             carrier.setEntryEndpointId(operationId);\n         }\n \n-        int parentOperationId = first().getOperationId();\n+        int parentOperationId = firstSpan.getOperationId();\n         if (parentOperationId == DictionaryUtil.nullValue()) {\n-            carrier.setParentEndpointName(first().getOperationName());\n+            if (firstSpan.isEntry() && !StringUtil.isEmpty(firstSpanOperationName)) {\n+                carrier.setParentEndpointName(firstSpanOperationName);\n+            } else {\n+                /**\n+                 * Since 6.6.0, if first span is not entry span, then this is an internal segment(no RPC),\n+                 * rather than an endpoint.\n+                 */\n+                carrier.setParentEndpointId(DictionaryUtil.inexistence());\n+            }\n         } else {\n             carrier.setParentEndpointId(parentOperationId);\n         }\n@@ -195,33 +219,57 @@ public ContextSnapshot capture() {\n             activeSpan().getSpanId(),\n             segment.getRelatedGlobalTraces());\n         int entryOperationId;\n-        String entryOperationName;\n+        String entryOperationName = \"\";\n         int entryApplicationInstanceId;\n         AbstractSpan firstSpan = first();\n+        String firstSpanOperationName = firstSpan.getOperationName();\n+\n         if (refs != null && refs.size() > 0) {\n             TraceSegmentRef ref = refs.get(0);\n             entryOperationId = ref.getEntryEndpointId();\n             entryOperationName = ref.getEntryEndpointName();\n             entryApplicationInstanceId = ref.getEntryServiceInstanceId();\n         } else {\n-            entryOperationId = firstSpan.getOperationId();\n-            entryOperationName = firstSpan.getOperationName();\n+            if (firstSpan.isEntry()) {\n+                entryOperationId = firstSpan.getOperationId();\n+                entryOperationName = firstSpanOperationName;\n+            } else {\n+                /**\n+                 * Since 6.6.0, if first span is not entry span, then this is an internal segment(no RPC),\n+                 * rather than an endpoint.\n+                 */\n+                entryOperationId = DictionaryUtil.inexistence();\n+            }\n             entryApplicationInstanceId = this.segment.getApplicationInstanceId();\n         }\n         snapshot.setEntryApplicationInstanceId(entryApplicationInstanceId);\n \n         if (entryOperationId == DictionaryUtil.nullValue()) {\n             if (!StringUtil.isEmpty(entryOperationName)) {\n                 snapshot.setEntryOperationName(entryOperationName);\n+            } else {\n+                /**\n+                 * Since 6.6.0, if first span is not entry span, then this is an internal segment(no RPC),\n+                 * rather than an endpoint.\n+                 */\n             }\n         } else {\n             snapshot.setEntryOperationId(entryOperationId);\n         }\n \n-        if (firstSpan.getOperationId() == DictionaryUtil.nullValue()) {\n-            snapshot.setParentOperationName(firstSpan.getOperationName());\n+        int parentOperationId = firstSpan.getOperationId();\n+        if (parentOperationId == DictionaryUtil.nullValue()) {\n+            if (firstSpan.isEntry() && !StringUtil.isEmpty(firstSpanOperationName)) {\n+                snapshot.setParentOperationName(firstSpanOperationName);\n+            } else {\n+                /**\n+                 * Since 6.6.0, if first span is not entry span, then this is an internal segment(no RPC),\n+                 * rather than an endpoint.\n+                 */\n+                snapshot.setParentOperationId(DictionaryUtil.inexistence());\n+            }\n         } else {\n-            snapshot.setParentOperationId(firstSpan.getOperationId());\n+            snapshot.setParentOperationId(parentOperationId);\n         }\n         return snapshot;\n     }\n@@ -341,39 +389,13 @@ public AbstractSpan createExitSpan(final String operationName, final String remo\n                     new PossibleFound.FoundAndObtain() {\n                         @Override\n                         public Object doProcess(final int peerId) {\n-                            return DictionaryManager.findEndpointSection()\n-                                .findOnly(segment.getServiceId(), operationName)\n-                                .doInCondition(\n-                                    new PossibleFound.FoundAndObtain() {\n-                                        @Override\n-                                        public Object doProcess(int operationId) {\n-                                            return new ExitSpan(spanIdGenerator++, parentSpanId, operationId, peerId);\n-                                        }\n-                                    }, new PossibleFound.NotFoundAndObtain() {\n-                                        @Override\n-                                        public Object doProcess() {\n-                                            return new ExitSpan(spanIdGenerator++, parentSpanId, operationName, peerId);\n-                                        }\n-                                    });\n+                            return new ExitSpan(spanIdGenerator++, parentSpanId, operationName, peerId);\n                         }\n                     },\n                     new PossibleFound.NotFoundAndObtain() {\n                         @Override\n                         public Object doProcess() {\n-                            return DictionaryManager.findEndpointSection()\n-                                .findOnly(segment.getServiceId(), operationName)\n-                                .doInCondition(\n-                                    new PossibleFound.FoundAndObtain() {\n-                                        @Override\n-                                        public Object doProcess(int operationId) {\n-                                            return new ExitSpan(spanIdGenerator++, parentSpanId, operationId, remotePeer);\n-                                        }\n-                                    }, new PossibleFound.NotFoundAndObtain() {\n-                                        @Override\n-                                        public Object doProcess() {\n-                                            return new ExitSpan(spanIdGenerator++, parentSpanId, operationName, remotePeer);\n-                                        }\n-                                    });\n+                            return new ExitSpan(spanIdGenerator++, parentSpanId, operationName, remotePeer);\n                         }\n                     });\n             push(exitSpan);",
                "deletions": 42
            },
            {
                "sha": "cdf26a8d7e10c2e6efaba1228904c6cb3f8fc43e",
                "filename": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/StackBasedTracingSpan.java",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/StackBasedTracingSpan.java",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/StackBasedTracingSpan.java",
                "status": "modified",
                "changes": 33,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/StackBasedTracingSpan.java?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -89,21 +89,26 @@ protected StackBasedTracingSpan(int spanId, int parentSpanId, String operationNa\n     @Override\n     public boolean finish(TraceSegment owner) {\n         if (--stackDepth == 0) {\n-            if (this.operationId == DictionaryUtil.nullValue()) {\n-                this.operationId = (Integer)DictionaryManager.findEndpointSection()\n-                    .findOrPrepare4Register(owner.getServiceId(), operationName, this.isEntry(), this.isExit())\n-                    .doInCondition(\n-                        new PossibleFound.FoundAndObtain() {\n-                            @Override public Object doProcess(int value) {\n-                                return value;\n+            /**\n+             * Since 6.6.0, only entry span requires the op name register, which is endpoint.\n+             */\n+            if (this.isEntry()) {\n+                if (this.operationId == DictionaryUtil.nullValue()) {\n+                    this.operationId = (Integer)DictionaryManager.findEndpointSection()\n+                        .findOrPrepare4Register(owner.getServiceId(), operationName)\n+                        .doInCondition(\n+                            new PossibleFound.FoundAndObtain() {\n+                                @Override public Object doProcess(int value) {\n+                                    return value;\n+                                }\n+                            },\n+                            new PossibleFound.NotFoundAndObtain() {\n+                                @Override public Object doProcess() {\n+                                    return DictionaryUtil.nullValue();\n+                                }\n                             }\n-                        },\n-                        new PossibleFound.NotFoundAndObtain() {\n-                            @Override public Object doProcess() {\n-                                return DictionaryUtil.nullValue();\n-                            }\n-                        }\n-                    );\n+                        );\n+                }\n             }\n             return super.finish(owner);\n         } else {",
                "deletions": 14
            },
            {
                "sha": "d8ac1d55ec89c26effda301b0de6eaf36462787f",
                "filename": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/dictionary/DictionaryUtil.java",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/dictionary/DictionaryUtil.java",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/dictionary/DictionaryUtil.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/dictionary/DictionaryUtil.java?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -30,4 +30,11 @@ public static int nullValue() {\n     public static boolean isNull(int id) {\n         return id == nullValue();\n     }\n+\n+    /**\n+     * @return -1 represent the object doesn't exist.\n+     */\n+    public static int inexistence() {\n+        return -1;\n+    }\n }",
                "deletions": 0
            },
            {
                "sha": "3447d8a18e1aaa0e970e72436b6ba121c521689b",
                "filename": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/dictionary/EndpointNameDictionary.java",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/dictionary/EndpointNameDictionary.java",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/dictionary/EndpointNameDictionary.java",
                "status": "modified",
                "changes": 45,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/dictionary/EndpointNameDictionary.java?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -37,21 +37,20 @@\n     private Map<OperationNameKey, Integer> endpointDictionary = new ConcurrentHashMap<OperationNameKey, Integer>();\n     private Set<OperationNameKey> unRegisterEndpoints = new ConcurrentSet<OperationNameKey>();\n \n-    public PossibleFound findOrPrepare4Register(int serviceId, String endpointName,\n-        boolean isEntry, boolean isExit) {\n-        return find0(serviceId, endpointName, isEntry, isExit, true);\n+    public PossibleFound findOrPrepare4Register(int serviceId, String endpointName) {\n+        return find0(serviceId, endpointName, true);\n     }\n \n     public PossibleFound findOnly(int serviceId, String endpointName) {\n-        return find0(serviceId, endpointName, false, false, false);\n+        return find0(serviceId, endpointName, false);\n     }\n \n     private PossibleFound find0(int serviceId, String endpointName,\n-        boolean isEntry, boolean isExit, boolean registerWhenNotFound) {\n+        boolean registerWhenNotFound) {\n         if (endpointName == null || endpointName.length() == 0) {\n             return new NotFound();\n         }\n-        OperationNameKey key = new OperationNameKey(serviceId, endpointName, isEntry, isExit);\n+        OperationNameKey key = new OperationNameKey(serviceId, endpointName);\n         Integer operationId = endpointDictionary.get(key);\n         if (operationId != null) {\n             return new Found(operationId);\n@@ -72,7 +71,7 @@ public void syncRemoteDictionary(\n                 Endpoint endpoint = Endpoint.newBuilder()\n                     .setServiceId(operationNameKey.getServiceId())\n                     .setEndpointName(operationNameKey.getEndpointName())\n-                    .setFrom(operationNameKey.getSpanType())\n+                    .setFrom(DetectPoint.server)\n                     .build();\n                 builder.addEndpoints(endpoint);\n             }\n@@ -81,9 +80,7 @@ public void syncRemoteDictionary(\n                 for (EndpointMappingElement element : serviceNameMappingCollection.getElementsList()) {\n                     OperationNameKey key = new OperationNameKey(\n                         element.getServiceId(),\n-                        element.getEndpointName(),\n-                        DetectPoint.server.equals(element.getFrom()),\n-                        DetectPoint.client.equals(element.getFrom()));\n+                        element.getEndpointName());\n                     unRegisterEndpoints.remove(key);\n                     endpointDictionary.put(key, element.getEndpointId());\n                 }\n@@ -98,14 +95,10 @@ public void clear() {\n     private class OperationNameKey {\n         private int serviceId;\n         private String endpointName;\n-        private boolean isEntry;\n-        private boolean isExit;\n \n-        public OperationNameKey(int serviceId, String endpointName, boolean isEntry, boolean isExit) {\n+        public OperationNameKey(int serviceId, String endpointName) {\n             this.serviceId = serviceId;\n             this.endpointName = endpointName;\n-            this.isEntry = isEntry;\n-            this.isExit = isExit;\n         }\n \n         public int getServiceId() {\n@@ -128,8 +121,7 @@ public String getEndpointName() {\n             if (serviceId == key.serviceId && endpointName.equals(key.endpointName)) {\n                 isServiceEndpointMatch = true;\n             }\n-            return isServiceEndpointMatch && isEntry == key.isEntry\n-                && isExit == key.isExit;\n+            return isServiceEndpointMatch;\n         }\n \n         @Override public int hashCode() {\n@@ -138,30 +130,11 @@ public String getEndpointName() {\n             return result;\n         }\n \n-        boolean isEntry() {\n-            return isEntry;\n-        }\n-\n-        boolean isExit() {\n-            return isExit;\n-        }\n-\n-        DetectPoint getSpanType() {\n-            if (isEntry) {\n-                return DetectPoint.server;\n-            } else if (isExit) {\n-                return DetectPoint.client;\n-            } else {\n-                return DetectPoint.UNRECOGNIZED;\n-            }\n-        }\n \n         @Override public String toString() {\n             return \"OperationNameKey{\" +\n                 \"serviceId=\" + serviceId +\n                 \", endpointName='\" + endpointName + '\\'' +\n-                \", isEntry=\" + isEntry +\n-                \", isExit=\" + isExit +\n                 '}';\n         }\n     }",
                "deletions": 36
            },
            {
                "sha": "48bbf2aff67d72e57a6980cfe22883a2428ca8d4",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java",
                "status": "modified",
                "changes": 11,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -20,12 +20,9 @@\n \n import java.lang.reflect.Method;\n import java.net.URI;\n-import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n-import org.apache.skywalking.apm.agent.core.conf.Config;\n import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n import org.apache.skywalking.apm.agent.core.context.ContextManager;\n import org.apache.skywalking.apm.agent.core.context.ContextSnapshot;\n-import org.apache.skywalking.apm.agent.core.context.OperationNameFormatService;\n import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n@@ -37,22 +34,16 @@\n import org.springframework.http.HttpMethod;\n \n public class RestExecuteInterceptor implements InstanceMethodsAroundInterceptor {\n-    private OperationNameFormatService nameFormatService;\n-\n     @Override\n     public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         MethodInterceptResult result) throws Throwable {\n         final URI requestURL = (URI)allArguments[0];\n         final HttpMethod httpMethod = (HttpMethod)allArguments[1];\n         final ContextCarrier contextCarrier = new ContextCarrier();\n \n-        if (nameFormatService == null) {\n-            nameFormatService = ServiceManager.INSTANCE.findService(OperationNameFormatService.class);\n-        }\n-\n         String remotePeer = requestURL.getHost() + \":\" + (requestURL.getPort() > 0 ? requestURL.getPort() : \"https\".equalsIgnoreCase(requestURL.getScheme()) ? 443 : 80);\n \n-        String formatURIPath = nameFormatService.formatOperationName(Config.Plugin.OPGroup.RestTemplate.class, requestURL.getPath());\n+        String formatURIPath = requestURL.getPath();\n         AbstractSpan span = ContextManager.createExitSpan(\n             formatURIPath,\n             contextCarrier, remotePeer);",
                "deletions": 10
            },
            {
                "sha": "66b0e779da2ae8258ac8c961e543caa6abb373da",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/sync/RestExecuteInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/sync/RestExecuteInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/sync/RestExecuteInterceptor.java",
                "status": "modified",
                "changes": 15,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/sync/RestExecuteInterceptor.java?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -20,36 +20,27 @@\n \n import java.lang.reflect.Method;\n import java.net.URI;\n-import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n-import org.apache.skywalking.apm.agent.core.conf.Config;\n import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n-import org.apache.skywalking.apm.agent.core.context.OperationNameFormatService;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n-import org.apache.skywalking.apm.agent.core.context.ContextManager;\n-import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n import org.springframework.http.HttpMethod;\n \n public class RestExecuteInterceptor implements InstanceMethodsAroundInterceptor {\n-    private OperationNameFormatService nameFormatService;\n-\n     @Override\n     public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         MethodInterceptResult result) throws Throwable {\n         final URI requestURL = (URI)allArguments[0];\n         final HttpMethod httpMethod = (HttpMethod)allArguments[1];\n         final ContextCarrier contextCarrier = new ContextCarrier();\n \n-        if (nameFormatService == null) {\n-            nameFormatService = ServiceManager.INSTANCE.findService(OperationNameFormatService.class);\n-        }\n-\n         String remotePeer = requestURL.getHost() + \":\" + (requestURL.getPort() > 0 ? requestURL.getPort() : \"https\".equalsIgnoreCase(requestURL.getScheme()) ? 443 : 80);\n-        String formatURIPath = nameFormatService.formatOperationName(Config.Plugin.OPGroup.RestTemplate.class, requestURL.getPath());\n+        String formatURIPath = requestURL.getPath();\n         AbstractSpan span = ContextManager.createExitSpan(formatURIPath, contextCarrier, remotePeer);\n \n         span.setComponent(ComponentsDefine.SPRING_REST_TEMPLATE);",
                "deletions": 12
            },
            {
                "sha": "3e0e79fcd7a23e317e660ef8c4cd49356551f13d",
                "filename": "docs/en/FAQ/README.md",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/docs/en/FAQ/README.md",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/docs/en/FAQ/README.md",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/docs/en/FAQ/README.md?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -18,3 +18,4 @@ These are known and common FAQs. We welcome you to contribute yours.\n * [IllegalStateException when install Java agent on WebSphere 7](install_agent_on_websphere.md)\n * [\"FORBIDDEN/12/index read-only / allow delete (api)\" appears in the log](https://discuss.elastic.co/t/forbidden-12-index-read-only-allow-delete-api/110282)\n * [No data shown and backend replies with \"Variable 'serviceId' has coerced Null value for NonNull type 'ID!'\"](time-and-timezone.md)\n+* [**Unexpected endpoint register** warning after 6.6.0](Unexpected-endpoint-register.md)",
                "deletions": 0
            },
            {
                "sha": "dd732daef683ab881c1c14328e018781efaf9848",
                "filename": "docs/en/FAQ/Unexpected-endpoint-register.md",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/docs/en/FAQ/Unexpected-endpoint-register.md",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/docs/en/FAQ/Unexpected-endpoint-register.md",
                "status": "added",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/docs/en/FAQ/Unexpected-endpoint-register.md?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -0,0 +1,12 @@\n+# Local span and Exit span should not be register\n+\n+Since 6.6.0, SkyWalking cancelled the local span and exit span register. If old java agent(before 6.6.0) is still running,\n+and do register to 6.6.0+ backend, you will face the following warning message.\n+```\n+class=RegisterServiceHandler, message = Unexpected endpoint register, endpoint isn't detected from server side.\n+```\n+\n+This will not harm the backend or cause any issue. This is a reminder that, your agent or other client should follow the new protocol\n+requirements.\n+\n+You could simply use `log4j2.xml` to filter this warning message out.\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "207e41a18cc194d9b0fb692788e6a7ff2eb5af35",
                "filename": "docs/en/guides/Plugin-test.md",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/docs/en/guides/Plugin-test.md",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/docs/en/guides/Plugin-test.md",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/docs/en/guides/Plugin-test.md?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -230,7 +230,7 @@ registryItems:\n | --- | ---\n | applications | The registered service codes. Normally, not 0 should be enough.\n | instances | The number of service instances exists in this test case.\n-| operationNames | All endpoint registered in this test case. Also means, the operation names of all entry and exit spans.\n+| operationNames | All endpoint registered in this test case. Also means, the operation names of all entry spans.\n \n \n **Segment verify description format**",
                "deletions": 1
            },
            {
                "sha": "fa4b4a73b0f257d38f32085d334a1a5106caa8bc",
                "filename": "docs/en/protocols/Skywalking-Cross-Process-Propagation-Headers-Protocol-v2.md",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/docs/en/protocols/Skywalking-Cross-Process-Propagation-Headers-Protocol-v2.md",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/docs/en/protocols/Skywalking-Cross-Process-Propagation-Headers-Protocol-v2.md",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/docs/en/protocols/Skywalking-Cross-Process-Propagation-Headers-Protocol-v2.md?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -38,6 +38,8 @@ _This value can use exchange/compress collector service to get the id(integer) t\n 1. Parent endpoint of the parent service. **String(BASE64 encoded)**. \n _This value can use exchange/compress collector service to get the id(integer) to represent the string. If you use the string, it must start with `#`, others use integer directly._\n \n+endpoint id = -1 and parent endpoint name is empty mean there is no real parent endpoint. Since 6.6.0\n+\n ## Sample values\n 1. Short version, `1-TRACEID-SEGMENTID-3-5-2-IPPORT`\n 1. Complete version, `1-TRACEID-SEGMENTID-3-5-2-IPPORT-ENTRYURI-PARENTURI`",
                "deletions": 0
            },
            {
                "sha": "787d90ea3f99190f25948203e9d40c766e43fc16",
                "filename": "docs/en/setup/service-agent/java-agent/README.md",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/docs/en/setup/service-agent/java-agent/README.md",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/docs/en/setup/service-agent/java-agent/README.md",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/docs/en/setup/service-agent/java-agent/README.md?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -158,6 +158,9 @@ Now, we have the following known bootstrap plugins.\n SkyWalking java agent supports plugin to extend [the supported list](Supported-list.md). Please follow \n our [Plugin Development Guide](../../../guides/Java-Plugin-Development-Guide.md).\n \n+If some RPC framework endpoints(server side) could include parameter, please read [Operation Name Group Rule](op_name_group_rule.md),\n+and consider to add this feature.\n+\n # Test\n If you are interested in plugin compatible tests or agent performance, see the following reports.\n * [Plugin Test](https://github.com/SkyAPMTest/agent-integration-test-report)",
                "deletions": 0
            },
            {
                "sha": "6deaca2c0d4352466e2e7adfa41ffb62c492bd30",
                "filename": "docs/en/setup/service-agent/java-agent/op_name_group_rule.md",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/docs/en/setup/service-agent/java-agent/op_name_group_rule.md",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/docs/en/setup/service-agent/java-agent/op_name_group_rule.md",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/docs/en/setup/service-agent/java-agent/op_name_group_rule.md?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -4,8 +4,7 @@ Those operation name are also as known endpoint name in most cases.\n Such as /api/checkTicket/tk/{userToken}.\n \n We solved most of these cases, by leverage the parameter pattern path in framework, such as SpringMVC, Webflux, etc. \n-But it is undetected in RPC client side, such as HTTP restful client.\n-In this case, we have to ask the users to set the group rule manually.\n+In this case, it is undetected in this way, so we have to ask the users to set the group rule manually.\n \n All rules are supported to set through agent.config, system properties and system env, like other agent settings.\n - Config format, `plugin.opgroup.`plugin name`.rule[`rule name`]`=pattern regex expression",
                "deletions": 2
            },
            {
                "sha": "f7e7bf3c386773b3c8ae63947a6226071d44e6c4",
                "filename": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/Const.java",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/Const.java",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/Const.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/Const.java?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -32,6 +32,7 @@\n     public static final int USER_SERVICE_ID = 1;\n     public static final int USER_INSTANCE_ID = 1;\n     public static final int USER_ENDPOINT_ID = 1;\n+    public static final int INEXISTENCE_ENDPOINT_ID = -1;\n     public static final String USER_CODE = \"User\";\n     public static final String SEGMENT_SPAN_SPLIT = \"S\";\n     public static final String UNKNOWN = \"Unknown\";",
                "deletions": 0
            },
            {
                "sha": "3e9a60535e94cb8bbf8173c1637ec98a01217e72",
                "filename": "oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/register/provider/handler/v6/grpc/RegisterServiceHandler.java",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/register/provider/handler/v6/grpc/RegisterServiceHandler.java",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/register/provider/handler/v6/grpc/RegisterServiceHandler.java",
                "status": "modified",
                "changes": 21,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/register/provider/handler/v6/grpc/RegisterServiceHandler.java?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -163,14 +163,19 @@ public RegisterServiceHandler(ModuleManager moduleManager) {\n             int serviceId = endpoint.getServiceId();\n             String endpointName = endpoint.getEndpointName();\n \n-            int endpointId = inventoryService.getOrCreate(serviceId, endpointName, DetectPoint.fromNetworkProtocolDetectPoint(endpoint.getFrom()));\n-\n-            if (endpointId != Const.NONE) {\n-                builder.addElements(EndpointMappingElement.newBuilder()\n-                    .setServiceId(serviceId)\n-                    .setEndpointName(endpointName)\n-                    .setEndpointId(endpointId)\n-                    .setFrom(endpoint.getFrom()));\n+            DetectPoint detectPoint = DetectPoint.fromNetworkProtocolDetectPoint(endpoint.getFrom());\n+            if (DetectPoint.SERVER.equals(detectPoint)) {\n+                int endpointId = inventoryService.getOrCreate(serviceId, endpointName, detectPoint);\n+\n+                if (endpointId != Const.NONE) {\n+                    builder.addElements(EndpointMappingElement.newBuilder()\n+                        .setServiceId(serviceId)\n+                        .setEndpointName(endpointName)\n+                        .setEndpointId(endpointId)\n+                        .setFrom(endpoint.getFrom()));\n+                }\n+            } else {\n+                logger.warn(\"Unexpected endpoint register, endpoint isn't detected from server side. {}\", request);\n             }\n         });\n ",
                "deletions": 8
            },
            {
                "sha": "1b527bcaba5cf0c2a2d05a8b5abc3ced0d93b443",
                "filename": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/SegmentParse.java",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/SegmentParse.java",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/SegmentParse.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/SegmentParse.java?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -141,7 +141,7 @@ private boolean preBuild(List<UniqueId> traceIds, SegmentDecorator segmentDecora\n         for (int i = 0; i < segmentDecorator.getSpansCount(); i++) {\n             SpanDecorator spanDecorator = segmentDecorator.getSpans(i);\n \n-            if (!SpanIdExchanger.getInstance(moduleManager).exchange(spanDecorator, segmentCoreInfo.getServiceId())) {\n+            if (!SpanExchanger.getInstance(moduleManager).exchange(spanDecorator, segmentCoreInfo.getServiceId())) {\n                 exchanged = false;\n             } else {\n                 for (int j = 0; j < spanDecorator.getRefsCount(); j++) {",
                "deletions": 1
            },
            {
                "sha": "583301bbe15be198ef80dd2d31d3ae9c2d1d3bad",
                "filename": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/SegmentParseV2.java",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/SegmentParseV2.java",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/SegmentParseV2.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/SegmentParseV2.java?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -158,7 +158,7 @@ private boolean preBuild(List<UniqueId> traceIds, SegmentDecorator segmentDecora\n         for (int i = 0; i < segmentDecorator.getSpansCount(); i++) {\n             SpanDecorator spanDecorator = segmentDecorator.getSpans(i);\n \n-            if (!SpanIdExchanger.getInstance(moduleManager).exchange(spanDecorator, segmentCoreInfo.getServiceId())) {\n+            if (!SpanExchanger.getInstance(moduleManager).exchange(spanDecorator, segmentCoreInfo.getServiceId())) {\n                 exchanged = false;\n             } else {\n                 for (int j = 0; j < spanDecorator.getRefsCount(); j++) {",
                "deletions": 1
            },
            {
                "sha": "705c782fc49fe5528e07fe91707395a2e901182f",
                "filename": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/endpoint/MultiScopesSpanListener.java",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/endpoint/MultiScopesSpanListener.java",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/endpoint/MultiScopesSpanListener.java",
                "status": "modified",
                "changes": 19,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/endpoint/MultiScopesSpanListener.java?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -106,7 +106,11 @@ public void parseEntry(SpanDecorator spanDecorator, SegmentCoreInfo segmentCoreI\n             for (int i = 0; i < spanDecorator.getRefsCount(); i++) {\n                 ReferenceDecorator reference = spanDecorator.getRefs(i);\n                 SourceBuilder sourceBuilder = new SourceBuilder();\n-                sourceBuilder.setSourceEndpointId(reference.getParentEndpointId());\n+                if (reference.getParentEndpointId() == Const.INEXISTENCE_ENDPOINT_ID) {\n+                    sourceBuilder.setSourceEndpointId(Const.USER_ENDPOINT_ID);\n+                } else {\n+                    sourceBuilder.setSourceEndpointId(reference.getParentEndpointId());\n+                }\n \n                 final int networkAddressId = reference.getNetworkAddressId();\n                 final int serviceIdByPeerId = serviceInventoryCache.getServiceId(networkAddressId);\n@@ -161,10 +165,8 @@ public void parseEntry(SpanDecorator spanDecorator, SegmentCoreInfo segmentCoreI\n         int destInstanceId = instanceInventoryCache.getServiceInstanceId(destServiceId, peerId);\n         int mappingServiceInstanceId = instanceInventoryCache.get(destInstanceId).getMappingServiceInstanceId();\n \n-        sourceBuilder.setSourceEndpointId(Const.USER_ENDPOINT_ID);\n         sourceBuilder.setSourceServiceInstanceId(segmentCoreInfo.getServiceInstanceId());\n         sourceBuilder.setSourceServiceId(segmentCoreInfo.getServiceId());\n-        sourceBuilder.setDestEndpointId(spanDecorator.getOperationNameId());\n         if (Const.NONE == mappingServiceId) {\n             sourceBuilder.setDestServiceId(destServiceId);\n         } else {\n@@ -235,10 +237,14 @@ private void setPublicAttrs(SourceBuilder sourceBuilder, SpanDecorator spanDecor\n \n         sourceBuilder.setSourceServiceName(serviceInventoryCache.get(sourceBuilder.getSourceServiceId()).getName());\n         sourceBuilder.setSourceServiceInstanceName(instanceInventoryCache.get(sourceBuilder.getSourceServiceInstanceId()).getName());\n-        sourceBuilder.setSourceEndpointName(endpointInventoryCache.get(sourceBuilder.getSourceEndpointId()).getName());\n+        if (sourceBuilder.getSourceEndpointId() != Const.NONE) {\n+            sourceBuilder.setSourceEndpointName(endpointInventoryCache.get(sourceBuilder.getSourceEndpointId()).getName());\n+        }\n         sourceBuilder.setDestServiceName(serviceInventoryCache.get(sourceBuilder.getDestServiceId()).getName());\n         sourceBuilder.setDestServiceInstanceName(instanceInventoryCache.get(sourceBuilder.getDestServiceInstanceId()).getName());\n-        sourceBuilder.setDestEndpointName(endpointInventoryCache.get(sourceBuilder.getDestEndpointId()).getName());\n+        if (sourceBuilder.getDestEndpointId() != Const.NONE) {\n+            sourceBuilder.setDestEndpointName(endpointInventoryCache.get(sourceBuilder.getDestEndpointId()).getName());\n+        }\n     }\n \n     @Override public void build() {\n@@ -255,6 +261,9 @@ private void setPublicAttrs(SourceBuilder sourceBuilder, SpanDecorator spanDecor\n              * Parent endpoint could be none, because in SkyWalking Cross Process Propagation Headers Protocol v2,\n              * endpoint in ref could be empty, based on that, endpoint relation maybe can't be established.\n              * So, I am making this source as optional.\n+             *\n+             * Also, since 6.6.0, source endpoint could be none, if this trace begins by an internal task(local span or exit span), such as Timer,\n+             * rather than, normally begin as an entry span, like a RPC server side.\n              */\n             if (endpointRelation != null) {\n                 sourceReceiver.receive(endpointRelation);",
                "deletions": 5
            },
            {
                "sha": "492b1d6de9ff9551e9200a7fe50d09d97a675892",
                "filename": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/segment/SegmentSpanListener.java",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/segment/SegmentSpanListener.java",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/segment/SegmentSpanListener.java",
                "status": "modified",
                "changes": 19,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/segment/SegmentSpanListener.java?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -19,6 +19,7 @@\n package org.apache.skywalking.oap.server.receiver.trace.provider.parser.listener.segment;\n \n import org.apache.skywalking.apm.network.language.agent.UniqueId;\n+import org.apache.skywalking.oap.server.core.Const;\n import org.apache.skywalking.oap.server.core.CoreModule;\n import org.apache.skywalking.oap.server.core.cache.EndpointInventoryCache;\n import org.apache.skywalking.oap.server.core.source.Segment;\n@@ -51,6 +52,7 @@\n     private SAMPLE_STATUS sampleStatus = SAMPLE_STATUS.UNKNOWN;\n     private int entryEndpointId = 0;\n     private int firstEndpointId = 0;\n+    private String firstEndpointName = \"\";\n \n     private SegmentSpanListener(ModuleManager moduleManager, TraceSegmentSampler sampler) {\n         this.sampler = sampler;\n@@ -85,6 +87,7 @@ public void parseFirst(SpanDecorator spanDecorator, SegmentCoreInfo segmentCoreI\n         segment.setVersion(segmentCoreInfo.isV2() ? 2 : 1);\n \n         firstEndpointId = spanDecorator.getOperationNameId();\n+        firstEndpointName = spanDecorator.getOperationName();\n     }\n \n     @Override public void parseEntry(SpanDecorator spanDecorator, SegmentCoreInfo segmentCoreInfo) {\n@@ -124,9 +127,19 @@ public void parseFirst(SpanDecorator spanDecorator, SegmentCoreInfo segmentCoreI\n             return;\n         }\n \n-        if (entryEndpointId == 0) {\n-            segment.setEndpointId(firstEndpointId);\n-            segment.setEndpointName(serviceNameCacheService.get(firstEndpointId).getName());\n+        if (entryEndpointId == Const.NONE) {\n+            if (firstEndpointId != Const.NONE) {\n+                /**\n+                 * Since 6.6.0, only entry span is treated as an endpoint. Other span's endpoint id == 0.\n+                 */\n+                segment.setEndpointId(firstEndpointId);\n+                segment.setEndpointName(serviceNameCacheService.get(firstEndpointId).getName());\n+            } else {\n+                /**\n+                 * Only fill first operation name for the trace list query, as no endpoint id.\n+                 */\n+                segment.setEndpointName(firstEndpointName);\n+            }\n         } else {\n             segment.setEndpointId(entryEndpointId);\n             segment.setEndpointName(serviceNameCacheService.get(entryEndpointId).getName());",
                "deletions": 3
            },
            {
                "sha": "0fcff21bf4ab650da27fb52e14584be7d84fe2c0",
                "filename": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/standardization/ReferenceIdExchanger.java",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/standardization/ReferenceIdExchanger.java",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/standardization/ReferenceIdExchanger.java",
                "status": "modified",
                "changes": 20,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/standardization/ReferenceIdExchanger.java?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -70,6 +70,10 @@ private ReferenceIdExchanger(ModuleManager moduleManager) {\n                 standardBuilder.setEntryEndpointId(entryEndpointId);\n                 standardBuilder.setEntryEndpointName(Const.EMPTY_STRING);\n             }\n+        } else {\n+            /**\n+             * Since 6.6.0, endpoint id could be -1, as it is not an endpoint. Such as local span and exist span.\n+             */\n         }\n \n         if (standardBuilder.getParentEndpointId() == 0) {\n@@ -88,6 +92,10 @@ private ReferenceIdExchanger(ModuleManager moduleManager) {\n                 standardBuilder.setParentEndpointId(parentEndpointId);\n                 standardBuilder.setParentEndpointName(Const.EMPTY_STRING);\n             }\n+        } else {\n+            /**\n+             * Since 6.6.0, endpoint id could be -1, as it is not an endpoint. Such as local span and exist span.\n+             */\n         }\n \n         if (standardBuilder.getNetworkAddressId() == 0 && !Strings.isNullOrEmpty(standardBuilder.getNetworkAddress())) {\n@@ -104,16 +112,18 @@ private ReferenceIdExchanger(ModuleManager moduleManager) {\n                 standardBuilder.setNetworkAddressId(networkAddressId);\n                 standardBuilder.setNetworkAddress(Const.EMPTY_STRING);\n             }\n+        } else {\n+            /**\n+             * Since 6.6.0, endpoint id could be -1, as it is not an endpoint. Such as local span and exist span.\n+             */\n         }\n         return exchanged;\n     }\n \n     /**\n-     * Endpoint in ref could be local or exit span's operation name.\n-     * Especially if it is local span operation name,\n-     * exchange may not happen at agent, such as Java agent,\n-     * then put literal endpoint string in the header,\n-     * Need to try to get the id by assuming the endpoint name is detected at server, local or client.\n+     * Endpoint in ref could be local or exit span's operation name. Especially if it is local span operation name,\n+     * exchange may not happen at agent, such as Java agent, then put literal endpoint string in the header, Need to try\n+     * to get the id by assuming the endpoint name is detected at server, local or client.\n      *\n      * If agent does the exchange, then always use endpoint id.\n      */",
                "deletions": 5
            },
            {
                "sha": "b3518834e7a4068cb39eeb7471185d27853e1116",
                "filename": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/standardization/SpanExchanger.java",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/standardization/SpanExchanger.java",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/standardization/SpanExchanger.java",
                "status": "renamed",
                "changes": 43,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/standardization/SpanExchanger.java?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -22,6 +22,7 @@\n import com.google.gson.JsonObject;\n import org.apache.skywalking.apm.network.common.KeyStringValuePair;\n import org.apache.skywalking.apm.network.language.agent.SpanLayer;\n+import org.apache.skywalking.apm.network.language.agent.SpanType;\n import org.apache.skywalking.oap.server.core.Const;\n import org.apache.skywalking.oap.server.core.CoreModule;\n import org.apache.skywalking.oap.server.core.cache.ServiceInstanceInventoryCache;\n@@ -45,11 +46,11 @@\n /**\n  * @author peng-yongsheng\n  */\n-public class SpanIdExchanger implements IdExchanger<SpanDecorator> {\n+public class SpanExchanger implements IdExchanger<SpanDecorator> {\n \n-    private static final Logger logger = LoggerFactory.getLogger(SpanIdExchanger.class);\n+    private static final Logger logger = LoggerFactory.getLogger(SpanExchanger.class);\n \n-    private static SpanIdExchanger EXCHANGER;\n+    private static SpanExchanger EXCHANGER;\n     private final ServiceInventoryCache serviceInventoryCacheDAO;\n     private final IServiceInventoryRegister serviceInventoryRegister;\n     private final ServiceInstanceInventoryCache serviceInstanceInventoryCacheDAO;\n@@ -58,14 +59,14 @@\n     private final INetworkAddressInventoryRegister networkAddressInventoryRegister;\n     private final IComponentLibraryCatalogService componentLibraryCatalogService;\n \n-    public static SpanIdExchanger getInstance(ModuleManager moduleManager) {\n+    public static SpanExchanger getInstance(ModuleManager moduleManager) {\n         if (EXCHANGER == null) {\n-            EXCHANGER = new SpanIdExchanger(moduleManager);\n+            EXCHANGER = new SpanExchanger(moduleManager);\n         }\n         return EXCHANGER;\n     }\n \n-    private SpanIdExchanger(ModuleManager moduleManager) {\n+    private SpanExchanger(ModuleManager moduleManager) {\n         this.serviceInventoryCacheDAO = moduleManager.find(CoreModule.NAME).provider().getService(ServiceInventoryCache.class);\n         this.serviceInventoryRegister = moduleManager.find(CoreModule.NAME).provider().getService(IServiceInventoryRegister.class);\n         this.serviceInstanceInventoryCacheDAO = moduleManager.find(CoreModule.NAME).provider().getService(ServiceInstanceInventoryCache.class);\n@@ -135,19 +136,25 @@ private SpanIdExchanger(ModuleManager moduleManager) {\n         }\n \n         if (standardBuilder.getOperationNameId() == Const.NONE) {\n-            String endpointName = Strings.isNullOrEmpty(standardBuilder.getOperationName()) ? Const.DOMAIN_OPERATION_NAME : standardBuilder.getOperationName();\n-            int endpointId = endpointInventoryRegister.getOrCreate(serviceId, endpointName, DetectPoint.fromSpanType(standardBuilder.getSpanType()));\n-\n-            if (endpointId == 0) {\n-                if (logger.isDebugEnabled()) {\n-                    logger.debug(\"endpoint name: {} from service id: {} exchange failed\", endpointName, serviceId);\n+            /**\n+             * Only operation name of entry span is being treated as an endpoint,\n+             * so, since 6.6.0, only it triggers register.\n+             */\n+            if (SpanType.Entry.equals(standardBuilder.getSpanType())) {\n+                String endpointName = Strings.isNullOrEmpty(standardBuilder.getOperationName()) ? Const.DOMAIN_OPERATION_NAME : standardBuilder.getOperationName();\n+                int endpointId = endpointInventoryRegister.getOrCreate(serviceId, endpointName, DetectPoint.fromSpanType(standardBuilder.getSpanType()));\n+\n+                if (endpointId == 0) {\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"endpoint name: {} from service id: {} exchange failed\", endpointName, serviceId);\n+                    }\n+\n+                    exchanged = false;\n+                } else {\n+                    standardBuilder.toBuilder();\n+                    standardBuilder.setOperationNameId(endpointId);\n+                    standardBuilder.setOperationName(Const.EMPTY_STRING);\n                 }\n-\n-                exchanged = false;\n-            } else {\n-                standardBuilder.toBuilder();\n-                standardBuilder.setOperationNameId(endpointId);\n-                standardBuilder.setOperationName(Const.EMPTY_STRING);\n             }\n         }\n         return exchanged;",
                "deletions": 18,
                "previous_filename": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/standardization/SpanIdExchanger.java"
            },
            {
                "sha": "dd6d25ada7e2c18ba241a74002288742cbd4d246",
                "filename": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/mock/ServiceAMock.java",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/mock/ServiceAMock.java",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/mock/ServiceAMock.java",
                "status": "modified",
                "changes": 9,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/mock/ServiceAMock.java?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -90,11 +90,7 @@ private ByteString createSegment(long startTimestamp, UniqueId.Builder segmentId\n         span.setParentSpanId(0);\n         span.setStartTime(startTimestamp + 100);\n         span.setEndTime(startTimestamp + 500);\n-        if (isPrepare) {\n-            span.setOperationName(\"org.apache.skywalking.Local.do\");\n-        } else {\n-            span.setOperationNameId(3);\n-        }\n+        span.setOperationName(\"org.apache.skywalking.Local.do\");\n         span.setIsError(false);\n         return span;\n     }\n@@ -108,12 +104,11 @@ private ByteString createSegment(long startTimestamp, UniqueId.Builder segmentId\n         span.setStartTime(startTimestamp + 120);\n         span.setEndTime(startTimestamp + 5800);\n         span.setComponentId(ComponentsDefine.DUBBO.getId());\n+        span.setOperationName(DUBBO_ENDPOINT);\n         if (isPrepare) {\n             span.setPeer(DUBBO_ADDRESS);\n-            span.setOperationName(DUBBO_ENDPOINT);\n         } else {\n             span.setPeerId(2);\n-            span.setOperationNameId(6);\n         }\n         span.setIsError(false);\n         return span;",
                "deletions": 7
            },
            {
                "sha": "73893ee1e0202943a2803f0467e2732d1b7bedb4",
                "filename": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/mock/ServiceBMock.java",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/mock/ServiceBMock.java",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/mock/ServiceBMock.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/mock/ServiceBMock.java?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -119,11 +119,10 @@ private ByteString createSegment(long startTimestamp, UniqueId.Builder segmentId\n         span.addTags(KeyWithStringValue.newBuilder().setKey(\"db.statement\").setValue(\"select * from database where complex = 1;\").build());\n         span.addTags(KeyWithStringValue.newBuilder().setKey(\"db.type\").setValue(\"mongodb\").build());\n \n+        span.setOperationName(\"mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\");\n         if (isPrepare) {\n-            span.setOperationName(\"mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\");\n             span.setPeer(\"localhost:27017\");\n         } else {\n-            span.setOperationNameId(7);\n             span.setPeerId(3);\n         }\n         return span;\n@@ -140,11 +139,10 @@ private ByteString createSegment(long startTimestamp, UniqueId.Builder segmentId\n         span.setComponentId(ComponentsDefine.ROCKET_MQ_PRODUCER.getId());\n         span.setIsError(false);\n \n+        span.setOperationName(ROCKET_MQ_ENDPOINT);\n         if (isPrepare) {\n-            span.setOperationName(ROCKET_MQ_ENDPOINT);\n             span.setPeer(ROCKET_MQ_ADDRESS);\n         } else {\n-            span.setOperationNameId(8);\n             span.setPeerId(4);\n         }\n         return span;",
                "deletions": 4
            },
            {
                "sha": "788aa918f45bc6e2cbcc466aec802fe21622a677",
                "filename": "test/plugin/scenarios/apm-toolkit-trace-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/apm-toolkit-trace-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/apm-toolkit-trace-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 11,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/apm-toolkit-trace-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -20,9 +20,8 @@ registryItems:\n   instances:\n     - {apm-toolkit-trace-scenario: 1}\n   operationNames:\n-    - apm-toolkit-trace-scenario: [/apm-toolkit-trace-scenario/case/asyncVisit/runnable,\n-                                   /case/asyncVisit/runnable, /case/asyncVisit/callable, /apm-toolkit-trace-scenario/case/asyncVisit/callable,\n-                                   /case/tool-kit,/apm-toolkit-trace-scenario/case/asyncVisit/supplier,/case/asyncVisit/supplier]\n+    - apm-toolkit-trace-scenario: [/case/asyncVisit/runnable, /case/asyncVisit/callable,\n+                                   /case/tool-kit, /case/asyncVisit/supplier]\n   heartbeat: []\n segmentItems:\n   - applicationCode: apm-toolkit-trace-scenario\n@@ -163,7 +162,7 @@ segmentItems:\n               - {key: url, value: 'http://localhost:8080/apm-toolkit-trace-scenario/case/asyncVisit/callable'}\n               - {key: http.method, value: GET}\n             refs:\n-              - {parentEndpointId: 0, parentEndpoint: Thread/org.apache.skywalking.apm.toolkit.trace.CallableWrapper/call,\n+              - {parentEndpointId: -1, parentEndpoint: '',\n                  networkAddressId: 0, entryEndpointId: 0, refType: CrossProcess, parentSpanId: 1,\n                  parentTraceSegmentId: not null, parentServiceInstanceId: 1,\n                  networkAddress: 'localhost:8080', entryEndpoint: /case/tool-kit, entryServiceInstanceId: 1}\n@@ -258,7 +257,7 @@ segmentItems:\n               - {key: url, value: 'http://localhost:8080/apm-toolkit-trace-scenario/case/asyncVisit/runnable'}\n               - {key: http.method, value: GET}\n             refs:\n-              - {parentEndpointId: 0, parentEndpoint: Thread/org.apache.skywalking.apm.toolkit.trace.RunnableWrapper/run,\n+              - {parentEndpointId: -1, parentEndpoint: '',\n                  networkAddressId: 0, entryEndpointId: 0, refType: CrossProcess, parentSpanId: 1,\n                  parentTraceSegmentId: not null, parentServiceInstanceId: 1,\n                  networkAddress: 'localhost:8080', entryEndpoint: /case/tool-kit, entryServiceInstanceId: 1}\n@@ -317,7 +316,7 @@ segmentItems:\n               - {key: url, value: 'http://localhost:8080/apm-toolkit-trace-scenario/case/asyncVisit/supplier'}\n               - {key: http.method, value: GET}\n             refs:\n-              - {parentEndpointId: 0, parentEndpoint: Thread/org.apache.skywalking.apm.toolkit.trace.SupplierWrapper/get,\n+              - {parentEndpointId: -1, parentEndpoint: '',\n                  networkAddressId: 0, entryEndpointId: 0, refType: CrossProcess, parentSpanId: 1,\n                  parentTraceSegmentId: not null, parentServiceInstanceId: 1,\n                  networkAddress: 'localhost:8080', entryEndpoint: /case/tool-kit, entryServiceInstanceId: 1}\n\\ No newline at end of file",
                "deletions": 6
            },
            {
                "sha": "de5e7c29eb87a8feeeb966a7ecb218a04505ee9b",
                "filename": "test/plugin/scenarios/canal-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/canal-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/canal-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/canal-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -19,7 +19,7 @@ registryItems:\n   instances:\n     - {canal-scenario: 1}\n   operationNames:\n-    - canal-scenario: [Canal/example, /canal-scenario/case/canal-case]\n+    - canal-scenario: [/canal-scenario/case/canal-case]\n   heartbeat: []\n segmentItems:\n   - applicationCode: canal-scenario",
                "deletions": 1
            },
            {
                "sha": "233019790841d4ff1f8640a6e10564d0cf5116f1",
                "filename": "test/plugin/scenarios/cassandra-java-driver-3.x-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/cassandra-java-driver-3.x-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/cassandra-java-driver-3.x-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/cassandra-java-driver-3.x-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -19,7 +19,7 @@ registryItems:\n   instances:\n     - {cassandra-java-driver-3.x-scenario: 1}\n   operationNames:\n-    - cassandra-java-driver-3.x-scenario: [Cassandra/execute, Cassandra/executeAsync, /cassandra-java-driver-3.x-scenario/case/cassandra]\n+    - cassandra-java-driver-3.x-scenario: [/cassandra-java-driver-3.x-scenario/case/cassandra]\n   heartbeat: []\n segmentItems:\n   - applicationCode: cassandra-java-driver-3.x-scenario",
                "deletions": 1
            },
            {
                "sha": "5fa2275fcb391978e4f405093bbfa58f64dc11d8",
                "filename": "test/plugin/scenarios/dubbo-2.5.x-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/dubbo-2.5.x-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/dubbo-2.5.x-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 20,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/dubbo-2.5.x-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -19,30 +19,12 @@ registryItems:\n   instances:\n     - {dubbo-2.5.x-scenario: 1}\n   operationNames:\n-    - dubbo-2.5.x-scenario: [/dubbo-2.5.x-scenario/case/healthCheck, /dubbo-2.5.x-scenario/case/dubbo, org.apache.skywalking.apm.testcase.dubbo.services.GreetService.doBusiness()]\n+    - dubbo-2.5.x-scenario: [/dubbo-2.5.x-scenario/case/dubbo, org.apache.skywalking.apm.testcase.dubbo.services.GreetService.doBusiness()]\n   heartbeat: []\n segmentItems:\n   - applicationCode: dubbo-2.5.x-scenario\n     segmentSize: ge 3\n     segments:\n-      - segmentId: not null\n-        spans:\n-          - operationName: /dubbo-2.5.x-scenario/case/healthCheck\n-            operationId: 0\n-            parentSpanId: -1\n-            spanId: 0\n-            spanLayer: Http\n-            startTime: nq 0\n-            endTime: nq 0\n-            componentId: 1\n-            componentName: ''\n-            isError: false\n-            spanType: Entry\n-            peer: ''\n-            peerId: 0\n-            tags:\n-              - {key: url, value: 'http://localhost:8080/dubbo-2.5.x-scenario/case/healthCheck'}\n-              - {key: http.method, value: HEAD}\n       - segmentId: not null\n         spans:\n           - operationName: org.apache.skywalking.apm.testcase.dubbo.services.GreetService.doBusiness()",
                "deletions": 19
            },
            {
                "sha": "b48b542ddace97baf79f7d32a6292f7b1dc07926",
                "filename": "test/plugin/scenarios/dubbo-2.7.x-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/dubbo-2.7.x-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/dubbo-2.7.x-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 21,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/dubbo-2.7.x-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -19,32 +19,13 @@ registryItems:\n   instances:\n     - {dubbo-2.7.x-scenario: 1}\n   operationNames:\n-    - dubbo-2.7.x-scenario: [/dubbo-2.7.x-scenario/case/healthCheck,\n-                             /dubbo-2.7.x-scenario/case/dubbo,\n+    - dubbo-2.7.x-scenario: [/dubbo-2.7.x-scenario/case/dubbo,\n                              org.apache.skywalking.apm.testcase.dubbo.services.GreetService.doBusiness()]\n   heartbeat: []\n segmentItems:\n   - applicationCode: dubbo-2.7.x-scenario\n     segmentSize: ge 3\n     segments:\n-      - segmentId: not null\n-        spans:\n-          - operationName: /dubbo-2.7.x-scenario/case/healthCheck\n-            operationId: 0\n-            parentSpanId: -1\n-            spanId: 0\n-            spanLayer: Http\n-            startTime: nq 0\n-            endTime: nq 0\n-            componentId: 1\n-            componentName: ''\n-            isError: false\n-            spanType: Entry\n-            peer: ''\n-            peerId: 0\n-            tags:\n-              - {key: url, value: 'http://localhost:8080/dubbo-2.7.x-scenario/case/healthCheck'}\n-              - {key: http.method, value: HEAD}\n       - segmentId: not null\n         spans:\n           - operationName: org.apache.skywalking.apm.testcase.dubbo.services.GreetService.doBusiness()",
                "deletions": 20
            },
            {
                "sha": "b2a077a07bc1818f7321a52616e362a9f6970587",
                "filename": "test/plugin/scenarios/ehcache-2.x-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/ehcache-2.x-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/ehcache-2.x-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/ehcache-2.x-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -19,7 +19,7 @@ registryItems:\n   instances:\n     - {ehcache-2.x-scenario: 1}\n   operationNames:\n-    - ehcache-2.x-scenario: [/ehcache-2.x-scenario/case/ehcache, /ehcache-2.x-scenario/healthCheck]\n+    - ehcache-2.x-scenario: [/ehcache-2.x-scenario/case/ehcache]\n   heartbeat: []\n segmentItems:\n   - applicationCode: ehcache-2.x-scenario",
                "deletions": 1
            },
            {
                "sha": "36058787b1bacc8ee58e21ef5ed5f1f18b4b7f71",
                "filename": "test/plugin/scenarios/elasticsearch-5.x-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/elasticsearch-5.x-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/elasticsearch-5.x-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 5,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/elasticsearch-5.x-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -19,10 +19,7 @@ registryItems:\n     instances:\n     - {elasticsearch-5.x-scenario: 1}\n     operationNames:\n-    - elasticsearch-5.x-scenario: [Elasticsearch/IndexRequest, Elasticsearch/GetRequest,\n-                                   Elasticsearch/SearchRequest, Elasticsearch/UpdateRequest,\n-                                   Elasticsearch/DeleteRequest, Elasticsearch/DeleteIndexRequest,\n-                                   /case/elasticsearch]\n+    - elasticsearch-5.x-scenario: [/case/elasticsearch]\n     heartbeat: []\n segmentItems:\n - applicationCode: elasticsearch-5.x-scenario",
                "deletions": 4
            },
            {
                "sha": "38fb50b1b29378495fb3f1c3fba56dfde1f68675",
                "filename": "test/plugin/scenarios/elasticsearch-6.x-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/elasticsearch-6.x-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/elasticsearch-6.x-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 5,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/elasticsearch-6.x-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -19,10 +19,7 @@ registryItems:\n     instances:\n     - {elasticsearch-6.x-scenario: 1}\n     operationNames:\n-    - elasticsearch-6.x-scenario: [Elasticsearch/CreateRequest, Elasticsearch/IndexRequest,\n-                                   Elasticsearch/GetRequest, Elasticsearch/SearchRequest,\n-                                   Elasticsearch/UpdateRequest, Elasticsearch/DeleteRequest,\n-                                   /elasticsearch-case/case/elasticsearch]\n+    - elasticsearch-6.x-scenario: [/elasticsearch-case/case/elasticsearch]\n     heartbeat: []\n segmentItems:\n - applicationCode: elasticsearch-6.x-scenario",
                "deletions": 4
            },
            {
                "sha": "d7454bf4f2d300ce9e24ab61b372ecfe1d30366d",
                "filename": "test/plugin/scenarios/elasticsearch-7.x-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/elasticsearch-7.x-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/elasticsearch-7.x-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 5,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/elasticsearch-7.x-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -19,10 +19,7 @@ registryItems:\n   instances:\n   - {elasticsearch-7.x-scenario: 1}\n   operationNames:\n-  - elasticsearch-7.x-scenario: [Elasticsearch/CreateRequest, Elasticsearch/IndexRequest,\n-                                 Elasticsearch/GetRequest, Elasticsearch/SearchRequest,\n-                                 Elasticsearch/UpdateRequest, Elasticsearch/DeleteRequest,\n-                                 /elasticsearch-case/case/elasticsearch]\n+  - elasticsearch-7.x-scenario: [/elasticsearch-case/case/elasticsearch]\n   heartbeat: []\n segmentItems:\n - applicationCode: elasticsearch-7.x-scenario",
                "deletions": 4
            },
            {
                "sha": "e1a1c9e24331b1c29e914aa5269d04baac46ba96",
                "filename": "test/plugin/scenarios/hystrix-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/hystrix-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/hystrix-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/hystrix-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -47,7 +47,8 @@ segmentItems:\n         - {key: message, value: not null}\n         - {key: stack, value: not null}\n       refs:\n-      - {parentEndpointId: 0, parentEndpoint: /case/hystrix-scenario, networkAddressId: 0, entryEndpointId: 0, refType: CrossThread, parentSpanId: 0, parentTraceSegmentId: '${hystrix-scenario[2]}', parentServiceInstanceId: nq 0, networkAddress: '', entryEndpoint: /case/hystrix-scenario, entryServiceInstanceId: nq 0 }\n+      - {parentEndpointId: 0, parentEndpoint: /case/hystrix-scenario, networkAddressId: 0, entryEndpointId: 0, refType: CrossThread,\n+         parentSpanId: 0, parentTraceSegmentId: '${hystrix-scenario[2]}', parentServiceInstanceId: nq 0, networkAddress: '', entryEndpoint: /case/hystrix-scenario, entryServiceInstanceId: nq 0 }\n   - segmentId: not null\n     spans:\n     - operationName: Hystrix/TestACommand/Fallback\n@@ -64,7 +65,8 @@ segmentItems:\n       peer: ''\n       peerId: 0\n       refs:\n-      - {parentEndpointId: 0, parentEndpoint: Hystrix/TestACommand/Execution, networkAddressId: 0, entryEndpointId: 0, refType: CrossThread, parentSpanId: 0, parentTraceSegmentId: '${hystrix-scenario[0]}', parentServiceInstanceId: nq 0, networkAddress: '', entryEndpoint: /case/hystrix-scenario, entryServiceInstanceId: nq 0}\n+      - {parentEndpointId: -1, parentEndpoint: '', networkAddressId: 0, entryEndpointId: 0, refType: CrossThread, parentSpanId: 0,\n+         parentTraceSegmentId: '${hystrix-scenario[0]}', parentServiceInstanceId: nq 0, networkAddress: '', entryEndpoint: /case/hystrix-scenario, entryServiceInstanceId: nq 0}\n   - segmentId: not null\n     spans:\n     - operationName: Hystrix/TestBCommand/Execution",
                "deletions": 2
            },
            {
                "sha": "181927b4d55627c653f021e8dd21bdbcd2c6b7b4",
                "filename": "test/plugin/scenarios/jedis-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/jedis-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/jedis-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/jedis-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -20,8 +20,7 @@ registryItems:\n   instances:\n     - {jedis-scenario: 1}\n   operationNames:\n-    - jedis-scenario: [Jedis/set, Jedis/echo, Jedis/del,\n-                       Jedis/get, /jedis-scenario/case/jedis-scenario]\n+    - jedis-scenario: [/jedis-scenario/case/jedis-scenario]\n   heartbeat: []\n segmentItems:\n   - applicationCode: jedis-scenario",
                "deletions": 2
            },
            {
                "sha": "ecfa7dd49611f28b06905c83920c59164ff798bf",
                "filename": "test/plugin/scenarios/jetty-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/jetty-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/jetty-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/jetty-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -22,8 +22,7 @@ registryItems:\n   - {jettyclient-scenario: 1}\n   operationNames:\n   - jettyserver-scenario: [/jettyserver-case/case/receiveContext-0]\n-  - jettyclient-scenario: [/jettyserver-case/case/receiveContext-0,\n-                           /jettyclient-case/case/jettyclient-case,\n+  - jettyclient-scenario: [/jettyclient-case/case/jettyclient-case,\n                            /jettyclient-case/case/healthCheck]\n segmentItems:\n - applicationCode: jettyserver-scenario",
                "deletions": 2
            },
            {
                "sha": "b85df953f2c6eeebe881403dadf8d8417550dcc2",
                "filename": "test/plugin/scenarios/kafka-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/kafka-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/kafka-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 23,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/kafka-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -19,31 +19,12 @@ registryItems:\n   instances:\n     - {kafka-scenario: 1}\n   operationNames:\n-    - kafka-scenario: [Kafka/test/Producer, Kafka/test/Consumer/testGroup,\n-                       /case/healthCheck, /case/kafka-case]\n+    - kafka-scenario: [Kafka/test/Consumer/testGroup, /case/kafka-case]\n   heartbeat: []\n segmentItems:\n   - applicationCode: kafka-scenario\n-    segmentSize: gt 4\n+    segmentSize: gt 3\n     segments:\n-      - segmentId: not null\n-        spans:\n-          - operationName: /case/healthCheck\n-            operationId: 0\n-            parentSpanId: -1\n-            spanId: 0\n-            spanLayer: Http\n-            startTime: nq 0\n-            endTime: nq 0\n-            componentId: 14\n-            componentName: ''\n-            isError: false\n-            spanType: Entry\n-            peer: ''\n-            peerId: 0\n-            tags:\n-              - {key: url, value: 'http://localhost:8080/kafka-scenario/case/healthCheck'}\n-              - {key: http.method, value: HEAD}\n       - segmentId: not null\n         spans:\n           - operationName: Kafka/Producer/Callback",
                "deletions": 21
            },
            {
                "sha": "20bce04a0305f4cd5973ebf986713af87f8ec532",
                "filename": "test/plugin/scenarios/mongodb-3.x-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/mongodb-3.x-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/mongodb-3.x-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/mongodb-3.x-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -20,8 +20,7 @@ registryItems:\n   instances:\n     - {mongodb-3.x-scenario: 1}\n   operationNames:\n-    - mongodb-3.x-scenario: [/mongodb-case/case/mongodb, MongoDB/DropDatabaseOperation, MongoDB/FindOperation,\n-                             MongoDB/CreateCollectionOperation, MongoDB/MixedBulkWriteOperation]\n+    - mongodb-3.x-scenario: [/mongodb-case/case/mongodb]\n   heartbeat: []\n \n segmentItems:",
                "deletions": 2
            },
            {
                "sha": "be73e68b30633b667ad379519ceb3c0642c1d9a7",
                "filename": "test/plugin/scenarios/mysql-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/mysql-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/mysql-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/mysql-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -19,8 +19,7 @@ registryItems:\n   instances:\n     - {mysql-scenario: 1}\n   operationNames:\n-    - mysql-scenario: [Mysql/JDBI/Statement/execute, /mysql-scenario/case/healthCheck,\n-                       Mysql/JDBI/PreparedStatement/execute, /mysql-scenario/case/mysql-scenario, Mysql/JDBI/Connection/close]\n+    - mysql-scenario: [/mysql-scenario/case/healthCheck, /mysql-scenario/case/mysql-scenario]\n segmentItems:\n   - applicationCode: mysql-scenario\n     segmentSize: ge 2",
                "deletions": 2
            },
            {
                "sha": "021e00c2dd0bef4a8c0be1436c458ae97d87c73d",
                "filename": "test/plugin/scenarios/netty-socketio-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/netty-socketio-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/netty-socketio-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/netty-socketio-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -20,7 +20,7 @@ registryItems:\n   instances:\n     - {netty-socketio-scenario: 1}\n   operationNames:\n-    - netty-socketio-scenario: [/netty-socketio-scenario/case/netty-socketio, /socket.io/,\n+    - netty-socketio-scenario: [/netty-socketio-scenario/case/netty-socketio,\n                                 /netty-socketio-scenario/healthCheck, SocketIO/onConnect, SocketIO/send_data/receive]\n   heartbeat: []\n segmentItems:",
                "deletions": 1
            },
            {
                "sha": "6d4af0cfca4a8d9d884bea91f7aef5c359d1eb27",
                "filename": "test/plugin/scenarios/okhttp-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/okhttp-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/okhttp-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 12,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/okhttp-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -20,7 +20,7 @@ registryItems:\n   instances:\n   - {okhttp-scenario: 1}\n   operationNames:\n-  - okhttp-scenario: [/case/receiveContext-0, /okhttp-case/case/receiveContext-0,/case/healthCheck, /case/okhttp-case, /case/receiveContext-1]\n+  - okhttp-scenario: [/case/receiveContext-0, /case/healthCheck, /case/okhttp-case, /case/receiveContext-1]\n   heartbeat: []\n segmentItems:\n - applicationCode: okhttp-scenario\n@@ -76,7 +76,9 @@ segmentItems:\n       - {key: url, value: 'http://127.0.0.1:8080/okhttp-case/case/receiveContext-0'}\n       - {key: http.method, value: GET}\n       refs:\n-      - {parentEndpointId: 0, parentEndpoint: /okhttp-case/case/receiveContext-0, networkAddressId: 0, entryEndpointId: 0, refType: CrossProcess, parentSpanId: 0, parentTraceSegmentId: nq 0, parentServiceInstanceId: nq 0, networkAddress: '127.0.0.1:8080', entryEndpoint: /case/okhttp-case, entryServiceInstanceId: nq 0}\n+      - {parentEndpointId: -1, parentEndpoint: '', networkAddressId: 0, entryEndpointId: 0,\n+         refType: CrossProcess, parentSpanId: 0, parentTraceSegmentId: nq 0, parentServiceInstanceId: nq 0, networkAddress: '127.0.0.1:8080',\n+         entryEndpoint: /case/okhttp-case, entryServiceInstanceId: nq 0}\n   - segmentId: not null\n     spans:\n     - operationName: /case/receiveContext-1\n@@ -96,7 +98,8 @@ segmentItems:\n       - {key: url, value: 'http://127.0.0.1:8080/okhttp-case/case/receiveContext-1'}\n       - {key: http.method, value: GET}\n       refs:\n-      - {parentEndpointId: 0, parentEndpoint: /okhttp-case/case/receiveContext-0, networkAddressId: 0, entryEndpointId: 0, refType: CrossProcess, parentSpanId: 0, parentTraceSegmentId: nq 0, parentServiceInstanceId: nq 0, networkAddress: '127.0.0.1:8080', entryEndpoint: /case/okhttp-case, entryServiceInstanceId: nq 0}\n+      - {parentEndpointId: -1, parentEndpoint: '', networkAddressId: 0, entryEndpointId: 0, refType: CrossProcess, parentSpanId: 0,\n+         parentTraceSegmentId: nq 0, parentServiceInstanceId: nq 0, networkAddress: '127.0.0.1:8080', entryEndpoint: /case/okhttp-case, entryServiceInstanceId: nq 0}\n   - segmentId: not null\n     spans:\n     - operationName: /okhttp-case/case/receiveContext-0\n@@ -116,4 +119,5 @@ segmentItems:\n       - {key: http.method, value: GET}\n       - {key: url, value: 'http://127.0.0.1:8080/okhttp-case/case/receiveContext-0'}\n       refs:\n-      - {parentEndpointId: 0, parentEndpoint: /case/okhttp-case, networkAddressId: 0, entryEndpointId: 0, refType: CrossThread, parentSpanId: 1, parentTraceSegmentId: nq 0, parentServiceInstanceId: nq 0, networkAddress: '', entryEndpoint: /case/okhttp-case, entryServiceInstanceId: nq 0}\n+      - {parentEndpointId: 0, parentEndpoint: '/case/okhttp-case', networkAddressId: 0, entryEndpointId: 0, refType: CrossThread, parentSpanId: 1,\n+         parentTraceSegmentId: nq 0, parentServiceInstanceId: nq 0, networkAddress: '', entryEndpoint: /case/okhttp-case, entryServiceInstanceId: nq 0}",
                "deletions": 4
            },
            {
                "sha": "c85f2f792ff020889e72f1840f037d71840df451",
                "filename": "test/plugin/scenarios/oracle-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/oracle-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/oracle-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 4,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/oracle-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -19,9 +19,7 @@ registryItems:\n   instances:\n   - {oracle-scenario: 1}\n   operationNames:\n-  - oracle-scenario: [Oracle/JDBI/Connection/close, Oracle/JDBI/PreparedStatement/executeQuery,\n-                      Oracle/JDBI/PreparedStatement/execute, Oracle/JDBI/Statement/execute,\n-                      /oracle-scenario/case/oracle]\n+  - oracle-scenario: [/oracle-scenario/case/oracle]\n segmentItems:\n - applicationCode: oracle-scenario\n   segmentSize: ge 1",
                "deletions": 3
            },
            {
                "sha": "2fa965b4a6afb5ec9f6c1836cab62baae0e645b7",
                "filename": "test/plugin/scenarios/postgresql-above9.4.1207-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/postgresql-above9.4.1207-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/postgresql-above9.4.1207-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 4,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/postgresql-above9.4.1207-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -19,9 +19,7 @@ registryItems:\n     instances:\n     - {postgresql-above9.4.1207-scenario: 1}\n     operationNames:\n-    - postgresql-above9.4.1207-scenario: [/postgresql-scenario/case/postgres, PostgreSQL/JDBI/PreparedStatement/executeWithFlags,\n-                            PostgreSQL/JDBI/CallableStatement/executeWithFlags, PostgreSQL/JDBI/Statement/execute,\n-                            PostgreSQL/JDBI/Connection/close]\n+    - postgresql-above9.4.1207-scenario: [/postgresql-scenario/case/postgres]\n segmentItems:\n - applicationCode: postgresql-above9.4.1207-scenario\n   segmentSize: ge 1",
                "deletions": 3
            },
            {
                "sha": "06405767355ac3b6c0be764873cecf39d09344e0",
                "filename": "test/plugin/scenarios/postgresql-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/postgresql-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/postgresql-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 4,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/postgresql-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -19,9 +19,7 @@ registryItems:\n     instances:\n     - {postgresql-scenario: 1}\n     operationNames:\n-    - postgresql-scenario: [/postgresql-scenario/case/postgres, PostgreSQL/JDBI/PreparedStatement/execute,\n-                            PostgreSQL/JDBI/CallableStatement/execute, PostgreSQL/JDBI/Statement/execute,\n-                            PostgreSQL/JDBI/Connection/close]\n+    - postgresql-scenario: [/postgresql-scenario/case/postgres]\n     heartbeat: []\n segmentItems:\n - applicationCode: postgresql-scenario",
                "deletions": 3
            },
            {
                "sha": "559082791e78a5c5ae6431b8fd060fd8c04318c7",
                "filename": "test/plugin/scenarios/pulsar-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/pulsar-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/pulsar-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/pulsar-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -20,7 +20,7 @@ registryItems:\n   instances:\n   - {pulsar-scenario: nq 0}\n   operationNames:\n-  - pulsar-scenario: [Pulsar/test/Producer, /case/pulsar-case, Pulsar/test/Consumer/test]\n+  - pulsar-scenario: [/case/pulsar-case, Pulsar/test/Consumer/test]\n segmentItems:\n - applicationCode: pulsar-scenario\n   segmentSize: ge 3",
                "deletions": 1
            },
            {
                "sha": "8b6b964b80763ab0d06b4b35a8bedfa010252a6f",
                "filename": "test/plugin/scenarios/rabbitmq-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/rabbitmq-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/rabbitmq-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/rabbitmq-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -19,7 +19,7 @@ registryItems:\n   instances:\n   - {rabbitmq-scenario: 1}\n   operationNames:\n-  - rabbitmq-scenario: [/rabbitmq-scenario/case/rabbitmq,RabbitMQ/Topic/Queue/test/Producer,RabbitMQ/Topic/Queue/test/Consumer]\n+  - rabbitmq-scenario: [/rabbitmq-scenario/case/rabbitmq, RabbitMQ/Topic/Queue/test/Consumer]\n segmentItems:\n - applicationCode: rabbitmq-scenario\n   segmentSize: gt 2",
                "deletions": 1
            },
            {
                "sha": "aac27237eb819ab44dc9b1e356eb59b3442872e0",
                "filename": "test/plugin/scenarios/redisson-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/redisson-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/redisson-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/redisson-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -20,7 +20,7 @@ registryItems:\n   instances:\n     - {redisson-scenario: 1}\n   operationNames:\n-    - redisson-scenario: [/case/healthCheck, Redisson/BATCH_EXECUTE, Redisson/SET, /case/redisson-case]\n+    - redisson-scenario: [/case/healthCheck, /case/redisson-case]\n   heartbeat: []\n segmentItems:\n   - applicationCode: redisson-scenario",
                "deletions": 1
            },
            {
                "sha": "efe708f2d278f70d5bf7b71d97e232fe574b84f9",
                "filename": "test/plugin/scenarios/solrj-7.x-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/solrj-7.x-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/solrj-7.x-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 4,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/solrj-7.x-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -19,9 +19,7 @@ registryItems:\n   instances:\n     - {solrj-7.x-scenario: nq 0}\n   operationNames:\n-    - solrj-7.x-scenario: [/solrj-scenario/case/solrj, solrJ/mycore/update/COMMIT, solrJ/mycore/update/DELETE_BY_IDS,\n-                           solrJ/mycore/select, solrJ/mycore/update/DELETE_BY_QUERY, solrJ/mycore/get,\n-                           solrJ/mycore/update/OPTIMIZE, solrJ/mycore/update/ADD]\n+    - solrj-7.x-scenario: [/solrj-scenario/case/solrj]\n   heartbeat: []\n segmentItems:\n   - applicationCode: solrj-7.x-scenario",
                "deletions": 3
            },
            {
                "sha": "5f5acdfdc1a20af66c4c61045c2720f0f8af23a2",
                "filename": "test/plugin/scenarios/spring-3.1.x-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/spring-3.1.x-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/spring-3.1.x-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/spring-3.1.x-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -20,9 +20,8 @@ registryItems:\n     - {spring-3.1.x-scenario: 1}\n   operationNames:\n     - spring-3.1.x-scenario: ['{DELETE}/delete/{id}', /case/resttemplate, '{GET}/get/{id}',\n-                              /spring-3.1.x-scenario/delete/1, '{POST}/create/', /healthCheck, /case/spring3,\n-                              /spring-3.1.x-scenario/case/spring3/, /spring-3.1.x-scenario/update/1, '{PUT}/update/{id}',\n-                              /spring-3.1.x-scenario/create/, /spring-3.1.x-scenario/get/1]\n+                              '{POST}/create/', /healthCheck, /case/spring3,\n+                              '{PUT}/update/{id}']\n   heartbeat: []\n segmentItems:\n   - applicationCode: spring-3.1.x-scenario",
                "deletions": 3
            },
            {
                "sha": "0f4931bb411e8d216ae69267afa648a3416f4487",
                "filename": "test/plugin/scenarios/spring-4.1.x-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/spring-4.1.x-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/spring-4.1.x-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 4,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/spring-4.1.x-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -20,9 +20,7 @@ registryItems:\n     - {spring-4.1.x-scenario: 1}\n   operationNames:\n     - spring-4.1.x-scenario: ['{DELETE}/delete/{id}', /case/resttemplate, '{GET}/get/{id}',\n-                              /spring-4.1.x-scenario/delete/1, '{POST}/create/', /healthCheck, /case/spring3,\n-                              /spring-4.1.x-scenario/case/spring3/, /spring-4.1.x-scenario/update/1, '{PUT}/update/{id}',\n-                              /spring-4.1.x-scenario/create/, /spring-4.1.x-scenario/get/1]\n+                               '{POST}/create/', /healthCheck, /case/spring3, '{PUT}/update/{id}']\n   heartbeat: []\n segmentItems:\n   - applicationCode: spring-4.1.x-scenario",
                "deletions": 3
            },
            {
                "sha": "982805a273c3de948cc19023690f6d22448d70bb",
                "filename": "test/plugin/scenarios/spring-4.3.x-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/spring-4.3.x-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/spring-4.3.x-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 4,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/spring-4.3.x-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -20,9 +20,7 @@ registryItems:\n     - {spring-4.3.x-scenario: 1}\n   operationNames:\n     - spring-4.3.x-scenario: [/create/, '/delete/{id}', /inherit/child/test, /healthCheck,\n-                              /spring-4.3.x-scenario/case/spring3/, /spring-4.3.x-scenario/create/, /spring-4.3.x-scenario/get/1,\n-                              '/get/{id}', '/update/{id}', /case/resttemplate, /spring-4.3.x-scenario/delete/1,\n-                              /spring-4.3.x-scenario/inherit/child/test, /spring-4.3.x-scenario/update/1,\n+                              '/get/{id}', '/update/{id}', /case/resttemplate,\n                               /case/spring3]\n   heartbeat: []\n segmentItems:",
                "deletions": 3
            },
            {
                "sha": "e2377b747040e574b251551c2bac5d88e399afc4",
                "filename": "test/plugin/scenarios/spring-async-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/spring-async-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/spring-async-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/spring-async-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -63,7 +63,7 @@ segmentItems:\n               - {key: url, value: 'http://localhost:8080/spring-async-scenario/case/asyncVisit'}\n               - {key: http.method, value: GET}\n             refs:\n-              - {parentEndpointId: 0, parentEndpoint: SpringAsync, networkAddressId: 0, entryEndpointId: 0,\n+              - {parentEndpointId: -1, parentEndpoint: '', networkAddressId: 0, entryEndpointId: 0,\n                  refType: CrossProcess, parentSpanId: 1, parentTraceSegmentId: not null,\n                  parentServiceInstanceId: 1, networkAddress: 'localhost:8080', entryEndpoint: /spring-async-scenario/case/spring-async,\n                  entryServiceInstanceId: 1}\n@@ -86,7 +86,7 @@ segmentItems:\n               - {key: url, value: 'http://localhost:8080/spring-async-scenario/case/asyncVisit'}\n               - {key: http.method, value: GET}\n             refs:\n-              - {parentEndpointId: 0, parentEndpoint: SpringAsync, networkAddressId: 0, entryEndpointId: 0,\n+              - {parentEndpointId: -1, parentEndpoint: '', networkAddressId: 0, entryEndpointId: 0,\n                  refType: CrossProcess, parentSpanId: 1, parentTraceSegmentId: not null,\n                  parentServiceInstanceId: 1, networkAddress: 'localhost:8080', entryEndpoint: /spring-async-scenario/case/spring-async,\n                  entryServiceInstanceId: 1}",
                "deletions": 2
            },
            {
                "sha": "46a42e601d956e44368fd0899bf943a743fe4786",
                "filename": "test/plugin/scenarios/spring-tx-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/spring-tx-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/spring-tx-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 4,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/spring-tx-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -20,9 +20,7 @@ registryItems:\n   instances:\n     - {spring-tx-scenario: 1}\n   operationNames:\n-    - spring-tx-scenario: [Mysql/JDBI/Statement/execute, Mysql/JDBI/Connection/commit,\n-                           Mysql/JDBI/PreparedStatement/executeUpdate, /case/spring-tx-case, /case/healthCheck,\n-                           Mysql/JDBI/Connection/close, Mysql/JDBI/Statement/executeQuery]\n+    - spring-tx-scenario: [/case/spring-tx-case, /case/healthCheck]\n   heartbeat: []\n segmentItems:\n   - applicationCode: spring-tx-scenario",
                "deletions": 3
            },
            {
                "sha": "010032df772de18c57427dad624994dd330bf5f7",
                "filename": "test/plugin/scenarios/undertow-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/undertow-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/undertow-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/undertow-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -20,7 +20,7 @@ registryItems:\n   instances:\n     - {undertow-scenario: 1}\n   operationNames:\n-    - undertow-scenario: [/undertow-scenario/case/undertow1, /undertow-scenario/case/undertow, /undertow-routing-scenario/case/undertow,\n+    - undertow-scenario: [/undertow-scenario/case/undertow1, /undertow-scenario/case/undertow,\n                           '/undertow-routing-scenario/case/{context}']\n   heartbeat: []\n segmentItems:\n@@ -64,7 +64,7 @@ segmentItems:\n               - {key: url, value: 'http://localhost:8081/undertow-routing-scenario/case/undertow'}\n               - {key: http.method, value: GET}\n             refs:\n-              - {parentEndpointId: 0, parentEndpoint: UndertowDispatch, networkAddressId: 0,\n+              - {parentEndpointId: -1, parentEndpoint: '', networkAddressId: 0,\n                  entryEndpointId: 0, refType: CrossProcess, parentSpanId: 1, parentTraceSegmentId: not null,\n                  parentServiceInstanceId: 1, networkAddress: 'localhost:8081', entryEndpoint: /undertow-scenario/case/undertow,\n                  entryServiceInstanceId: 1}\n@@ -87,7 +87,7 @@ segmentItems:\n               - {key: url, value: 'http://localhost:8080/undertow-scenario/case/undertow1'}\n               - {key: http.method, value: GET}\n             refs:\n-              - {parentEndpointId: 0, parentEndpoint: UndertowDispatch, networkAddressId: 0,\n+              - {parentEndpointId: -1, parentEndpoint: '', networkAddressId: 0,\n                  entryEndpointId: 0, refType: CrossProcess, parentSpanId: 1, parentTraceSegmentId: not null,\n                  parentServiceInstanceId: 1, networkAddress: 'localhost:8080', entryEndpoint: /undertow-scenario/case/undertow,\n                  entryServiceInstanceId: 1}",
                "deletions": 3
            },
            {
                "sha": "9c29c6df9403e9a10ef1c44b615d5d0ff42ee419",
                "filename": "test/plugin/scenarios/webflux-scenario/config/expectedData.yaml",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/webflux-scenario/config/expectedData.yaml",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/scenarios/webflux-scenario/config/expectedData.yaml",
                "status": "modified",
                "changes": 4,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/scenarios/webflux-scenario/config/expectedData.yaml?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -27,9 +27,7 @@ registryItems:\n                                   WEBFLUX.handle, org.apache.skywalking.apm.testcase.sc.webflux.projectB.controller.TestAnnotationController.error,\n                                   org.apache.skywalking.apm.testcase.sc.webflux.projectB.controller.TestAnnotationController.healthCheck,\n                                   RoutingConfiguration.org.apache.skywalking.apm.testcase.sc.webflux.projectB.route.TestHandler]\n-    - webflux-projectA-scenario: [/testcase/annotation/mono/hello, /projectA/testcase,\n-                                  /testcase/annotation/success, /testcase/annotation/healthCheck, /notFound, /projectA/healthCheck,\n-                                  /testcase/route/error, /testcase/route/success, /testcase/annotation/error]\n+    - webflux-projectA-scenario: [/projectA/testcase]\n   heartbeat: []\n segmentItems:\n   - applicationCode: webflux-projectB-scenario",
                "deletions": 3
            },
            {
                "sha": "8baaf370c53157f21da6359f6e03e4b9afb4e606",
                "filename": "test/plugin/validator/src/main/java/org/apache/skywalking/plugin/test/agent/tool/validator/assertor/SegmentAssert.java",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/validator/src/main/java/org/apache/skywalking/plugin/test/agent/tool/validator/assertor/SegmentAssert.java",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/validator/src/main/java/org/apache/skywalking/plugin/test/agent/tool/validator/assertor/SegmentAssert.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/validator/src/main/java/org/apache/skywalking/plugin/test/agent/tool/validator/assertor/SegmentAssert.java?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -211,8 +211,8 @@ private static SegmentRef findSegmentRef(List<SegmentRef> actual, SegmentRef exp\n \n     private static boolean simpleSegmentRefEquals(SegmentRef expected, SegmentRef actual) {\n         try {\n-            ExpressParser.parse(expected.entryServiceName()).assertValue(\"entry service name\", actual.entryServiceName());\n-            ExpressParser.parse(expected.parentServiceName()).assertValue(\"parent service name\", actual.parentServiceName());\n+            ExpressParser.parse(expected.entryEndpointName()).assertValue(\"entry service name\", actual.entryEndpointName());\n+            ExpressParser.parse(expected.parentEndpointName()).assertValue(\"parent service name\", actual.parentEndpointName());\n             ExpressParser.parse(expected.refType()).assertValue(\"ref type\", actual.refType());\n             return true;\n         } catch (ValueAssertFailedException e) {",
                "deletions": 2
            },
            {
                "sha": "fffc10a1740b6d84bab40c21cc32112e1d94ef82",
                "filename": "test/plugin/validator/src/main/java/org/apache/skywalking/plugin/test/agent/tool/validator/assertor/SegmentRefAssert.java",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/validator/src/main/java/org/apache/skywalking/plugin/test/agent/tool/validator/assertor/SegmentRefAssert.java",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/validator/src/main/java/org/apache/skywalking/plugin/test/agent/tool/validator/assertor/SegmentRefAssert.java",
                "status": "modified",
                "changes": 12,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/validator/src/main/java/org/apache/skywalking/plugin/test/agent/tool/validator/assertor/SegmentRefAssert.java?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -57,17 +57,17 @@ private static SegmentRef findSegmentRef(List<SegmentRef> actual, SegmentRef exp\n \n     private static boolean segmentRefEquals(SegmentRef expected, SegmentRef actual) {\n         try {\n-            ExpressParser.parse(expected.entryServiceName()).assertValue(\"entry service name\", actual.entryServiceName());\n+            ExpressParser.parse(expected.entryEndpointName()).assertValue(\"entry endpoint name\", actual.entryEndpointName());\n             ExpressParser.parse(expected.networkAddress()).assertValue(\"network address\", actual.networkAddress());\n             ExpressParser.parse(expected.parentTraceSegmentId()).assertValue(\"parent segment id\", actual.parentTraceSegmentId());\n             ExpressParser.parse(expected.parentSpanId()).assertValue(\"span id\", actual.parentSpanId());\n-            ExpressParser.parse(expected.entryServiceId()).assertValue(\"entry service id\", actual.entryServiceId());\n+            ExpressParser.parse(expected.entryEndpointId()).assertValue(\"entry endpoint id\", actual.entryEndpointId());\n             ExpressParser.parse(expected.networkAddressId()).assertValue(\"network address id\", actual.networkAddressId());\n-            ExpressParser.parse(expected.parentApplicationInstanceId()).assertValue(\"parent application instance id\", actual.parentApplicationInstanceId());\n-            ExpressParser.parse(expected.parentServiceId()).assertValue(\"parent service id\", actual.parentServiceId());\n-            ExpressParser.parse(expected.parentServiceName()).assertValue(\"parent service name\", actual.parentServiceName());\n+            ExpressParser.parse(expected.parentServiceInstanceId()).assertValue(\"parent application instance id\", actual.parentServiceInstanceId());\n+            ExpressParser.parse(expected.parentEndpointId()).assertValue(\"parent endpoint id\", actual.parentEndpointId());\n+            ExpressParser.parse(expected.parentEndpointName()).assertValue(\"parent endpoint name\", actual.parentEndpointName());\n             ExpressParser.parse(expected.refType()).assertValue(\"ref type\", actual.refType());\n-            ExpressParser.parse(expected.entryApplicationInstanceId()).assertValue(\"entry application instance id\", actual.entryApplicationInstanceId());\n+            ExpressParser.parse(expected.entryServiceInstanceId()).assertValue(\"entry application instance id\", actual.entryServiceInstanceId());\n             return true;\n         } catch (ValueAssertFailedException e) {\n             throw new SegmentRefAssertFailedException(e, expected, actual);",
                "deletions": 6
            },
            {
                "sha": "268efb96cc604fd659359f46049b875e50e5f787",
                "filename": "test/plugin/validator/src/main/java/org/apache/skywalking/plugin/test/agent/tool/validator/assertor/exception/SegmentRefNotFoundException.java",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/validator/src/main/java/org/apache/skywalking/plugin/test/agent/tool/validator/assertor/exception/SegmentRefNotFoundException.java",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/validator/src/main/java/org/apache/skywalking/plugin/test/agent/tool/validator/assertor/exception/SegmentRefNotFoundException.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/validator/src/main/java/org/apache/skywalking/plugin/test/agent/tool/validator/assertor/exception/SegmentRefNotFoundException.java?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -40,9 +40,9 @@ public String getCauseMessage() {\n             String reason = cause.getFailedCause().getCauseMessage();\n \n             StringBuilder actualSegmentRef = new StringBuilder(String.format(\"\\nSegmentRef:\\t%s\\n\", reason));\n-            actualSegmentRef.append(String.format(\" - entryServiceName:\\t\\t%s\\n\", actual.entryServiceName()))\n+            actualSegmentRef.append(String.format(\" - entryServiceName:\\t\\t%s\\n\", actual.entryEndpointName()))\n                 .append(String.format(\" - networkAddress:\\t\\t\\t%s\\n\", actual.networkAddress()))\n-                .append(String.format(\" - parentServiceName:\\t\\t%s\\n\", actual.parentServiceName()))\n+                .append(String.format(\" - parentServiceName:\\t\\t%s\\n\", actual.parentEndpointName()))\n                 .append(String.format(\" - parentSpanId:\\t\\t\\t%s\\n\", actual.parentSpanId()))\n                 .append(String.format(\" - parentTraceSegmentId:\\t%s\\n\", actual.parentTraceSegmentId()))\n                 .append(String.format(\" - refType:\\t\\t\\t\\t\\t%s\", actual.refType())).toString();",
                "deletions": 2
            },
            {
                "sha": "b5c6dc5b7a62cd2c6c92ceab91e96d1a5e4899f7",
                "filename": "test/plugin/validator/src/main/java/org/apache/skywalking/plugin/test/agent/tool/validator/entity/SegmentForRead.java",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/validator/src/main/java/org/apache/skywalking/plugin/test/agent/tool/validator/entity/SegmentForRead.java",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/validator/src/main/java/org/apache/skywalking/plugin/test/agent/tool/validator/entity/SegmentForRead.java",
                "status": "modified",
                "changes": 16,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/validator/src/main/java/org/apache/skywalking/plugin/test/agent/tool/validator/entity/SegmentForRead.java?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -110,19 +110,19 @@ public void setEntryServiceInstanceId(String entryServiceInstanceId) {\n             this.entryServiceInstanceId = entryServiceInstanceId;\n         }\n \n-        @Override public String parentServiceId() {\n+        @Override public String parentEndpointId() {\n             return parentEndpointId;\n         }\n \n-        @Override public String parentServiceName() {\n+        @Override public String parentEndpointName() {\n             return parentEndpoint;\n         }\n \n         @Override public String networkAddressId() {\n             return networkAddressId;\n         }\n \n-        @Override public String entryServiceId() {\n+        @Override public String entryEndpointId() {\n             return entryEndpointId;\n         }\n \n@@ -138,31 +138,31 @@ public void setEntryServiceInstanceId(String entryServiceInstanceId) {\n             return parentTraceSegmentId;\n         }\n \n-        @Override public String parentApplicationInstanceId() {\n+        @Override public String parentServiceInstanceId() {\n             return parentServiceInstanceId;\n         }\n \n         @Override public String networkAddress() {\n             return networkAddress;\n         }\n \n-        @Override public String entryServiceName() {\n+        @Override public String entryEndpointName() {\n             return entryEndpoint;\n         }\n \n         @Override public void parentTraceSegmentId(String parentTraceSegmentId) {\n             this.parentTraceSegmentId = parentTraceSegmentId;\n         }\n \n-        @Override public String entryApplicationInstanceId() {\n+        @Override public String entryServiceInstanceId() {\n             return entryServiceInstanceId;\n         }\n \n         @Override public String toString() {\n             StringBuilder actualSegmentRef = new StringBuilder(\"\\nSegmentRef:\\n\");\n-            return actualSegmentRef.append(String.format(\" - entryServiceName:\\t\\t%s\\n\", entryServiceName()))\n+            return actualSegmentRef.append(String.format(\" - entryServiceName:\\t\\t%s\\n\", entryEndpointName()))\n                 .append(String.format(\" - networkAddress:\\t\\t\\t%s\\n\", networkAddress()))\n-                .append(String.format(\" - parentServiceName:\\t\\t%s\\n\", parentServiceName()))\n+                .append(String.format(\" - parentServiceName:\\t\\t%s\\n\", parentEndpointName()))\n                 .append(String.format(\" - parentSpanId:\\t\\t\\t%s\\n\", parentSpanId()))\n                 .append(String.format(\" - parentTraceSegmentId:\\t%s\\n\", parentTraceSegmentId()))\n                 .append(String.format(\" - refType:\\t\\t\\t\\t\\t%s\", refType())).toString();",
                "deletions": 8
            },
            {
                "sha": "c654f68e8f80561aa90371cbc478bbfce849e592",
                "filename": "test/plugin/validator/src/main/java/org/apache/skywalking/plugin/test/agent/tool/validator/entity/SegmentRef.java",
                "blob_url": "https://github.com/apache/skywalking/blob/4e501328171f434c74144d373be6df0264f43a24/test/plugin/validator/src/main/java/org/apache/skywalking/plugin/test/agent/tool/validator/entity/SegmentRef.java",
                "raw_url": "https://github.com/apache/skywalking/raw/4e501328171f434c74144d373be6df0264f43a24/test/plugin/validator/src/main/java/org/apache/skywalking/plugin/test/agent/tool/validator/entity/SegmentRef.java",
                "status": "modified",
                "changes": 12,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test/plugin/validator/src/main/java/org/apache/skywalking/plugin/test/agent/tool/validator/entity/SegmentRef.java?ref=4e501328171f434c74144d373be6df0264f43a24",
                "patch": "@@ -21,27 +21,27 @@\n  */\n public interface SegmentRef {\n \n-    String parentServiceId();\n+    String parentEndpointId();\n \n-    String parentServiceName();\n+    String parentEndpointName();\n \n     String networkAddressId();\n \n-    String entryServiceId();\n+    String entryEndpointId();\n \n     String refType();\n \n     String parentSpanId();\n \n     String parentTraceSegmentId();\n \n-    String parentApplicationInstanceId();\n+    String parentServiceInstanceId();\n \n     String networkAddress();\n \n-    String entryServiceName();\n+    String entryEndpointName();\n \n     void parentTraceSegmentId(String parentTraceSegmentId);\n \n-    String entryApplicationInstanceId();\n+    String entryServiceInstanceId();\n }",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "Fix RabbitMq NPE case (#2450)\n\n* Fix npe",
        "commit": "https://github.com/apache/skywalking/commit/ea566b19a501b44c29ca4083c28c560160ad86cf",
        "parent": "https://github.com/apache/skywalking/commit/128a119077d74ad4481a942e3e3705d6043a429b",
        "bug_id": "skywalking_7",
        "file": [
            {
                "sha": "91be8bb7f08852b8ee636c739773db0ae01b72a6",
                "filename": "apm-sniffer/apm-sdk-plugin/rabbitmq-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rabbitmq/RabbitMQConsumerInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/ea566b19a501b44c29ca4083c28c560160ad86cf/apm-sniffer/apm-sdk-plugin/rabbitmq-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rabbitmq/RabbitMQConsumerInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/ea566b19a501b44c29ca4083c28c560160ad86cf/apm-sniffer/apm-sdk-plugin/rabbitmq-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rabbitmq/RabbitMQConsumerInterceptor.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/rabbitmq-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rabbitmq/RabbitMQConsumerInterceptor.java?ref=ea566b19a501b44c29ca4083c28c560160ad86cf",
                "patch": "@@ -51,7 +51,11 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n         CarrierItem next = contextCarrier.items();\n         while (next.hasNext()) {\n             next = next.next();\n-            next.setHeadValue(properties.getHeaders().get(next.getHeadKey()).toString());\n+            if (properties.getHeaders() != null && properties.getHeaders().get(next.getHeadKey()) != null) {\n+                next.setHeadValue(properties.getHeaders().get(next.getHeadKey()).toString());\n+            } else {\n+                next.setHeadValue(\"\");\n+            }\n         }\n         ContextManager.extract(contextCarrier);\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "NPE fix (#2732)",
        "commit": "https://github.com/apache/skywalking/commit/effe49a102e94d4473f49bdb5d29107631fd02b5",
        "parent": "https://github.com/apache/skywalking/commit/202918cbea7337cce4f2e07167359025108a668d",
        "bug_id": "skywalking_8",
        "file": [
            {
                "sha": "f8908ea010f6704a0635356b55719272dfdf0e20",
                "filename": "oap-server/server-starter/src/main/java/org/apache/skywalking/oap/server/starter/config/ApplicationConfigLoader.java",
                "blob_url": "https://github.com/apache/skywalking/blob/effe49a102e94d4473f49bdb5d29107631fd02b5/oap-server/server-starter/src/main/java/org/apache/skywalking/oap/server/starter/config/ApplicationConfigLoader.java",
                "raw_url": "https://github.com/apache/skywalking/raw/effe49a102e94d4473f49bdb5d29107631fd02b5/oap-server/server-starter/src/main/java/org/apache/skywalking/oap/server/starter/config/ApplicationConfigLoader.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-starter/src/main/java/org/apache/skywalking/oap/server/starter/config/ApplicationConfigLoader.java?ref=effe49a102e94d4473f49bdb5d29107631fd02b5",
                "patch": "@@ -69,7 +69,9 @@ private void loadConfig(ApplicationConfiguration configuration) throws ConfigFil\n                                     properties.put(key, value);\n                                     final Object replaceValue = yaml.load(PropertyPlaceholderHelper.INSTANCE\n                                         .replacePlaceholders(value + \"\", properties));\n-                                    properties.replace(key, replaceValue);\n+                                    if (replaceValue != null) {\n+                                        properties.replace(key, replaceValue);\n+                                    }\n                                     logger.info(\"The property with key: {}, value: {}, in {} provider\", key, replaceValue.toString(), name);\n                                 });\n                             }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "Fix NPE when ALS is off. (#2715)",
        "commit": "https://github.com/apache/skywalking/commit/7b21c337e020381a02293d1bf788e2cbca05d283",
        "parent": "https://github.com/apache/skywalking/commit/9c2f5c9c25939a444b8d965b983372e883eb4f13",
        "bug_id": "skywalking_9",
        "file": [
            {
                "sha": "108f96555b88ad630233b09805aab687246ecfe0",
                "filename": "oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/EnvoyMetricReceiverConfig.java",
                "blob_url": "https://github.com/apache/skywalking/blob/7b21c337e020381a02293d1bf788e2cbca05d283/oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/EnvoyMetricReceiverConfig.java",
                "raw_url": "https://github.com/apache/skywalking/raw/7b21c337e020381a02293d1bf788e2cbca05d283/oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/EnvoyMetricReceiverConfig.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/EnvoyMetricReceiverConfig.java?ref=7b21c337e020381a02293d1bf788e2cbca05d283",
                "patch": "@@ -18,18 +18,21 @@\n \n package org.apache.skywalking.oap.server.receiver.envoy;\n \n+import com.google.common.base.Strings;\n import java.util.*;\n import java.util.stream.Collectors;\n-\n import org.apache.skywalking.oap.server.library.module.ModuleConfig;\n \n /**\n- * @author wusheng,gaohongtao\n+ * @author wusheng, gaohongtao\n  */\n public class EnvoyMetricReceiverConfig extends ModuleConfig {\n     private String alsHTTPAnalysis;\n \n     public List<String> getAlsHTTPAnalysis() {\n+        if (Strings.isNullOrEmpty(alsHTTPAnalysis)) {\n+            return Collections.EMPTY_LIST;\n+        }\n         return Arrays.stream(alsHTTPAnalysis.trim().split(\",\")).map(String::trim).collect(Collectors.toList());\n     }\n }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "fix spring data redis usercase NPE (#2621)",
        "commit": "https://github.com/apache/skywalking/commit/c46554a1aea5f65d7dc6aad60119b954398a60ff",
        "parent": "https://github.com/apache/skywalking/commit/37c92523d500ac30cafba0f962e2f2b701021743",
        "bug_id": "skywalking_10",
        "file": [
            {
                "sha": "e9f0fec8b91efbbfded29e4dd9a4f53715e8c3fc",
                "filename": "apm-sniffer/optional-plugins/lettuce-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/lettuce/v5/AbstractRedisClientInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/c46554a1aea5f65d7dc6aad60119b954398a60ff/apm-sniffer/optional-plugins/lettuce-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/lettuce/v5/AbstractRedisClientInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/c46554a1aea5f65d7dc6aad60119b954398a60ff/apm-sniffer/optional-plugins/lettuce-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/lettuce/v5/AbstractRedisClientInterceptor.java",
                "status": "added",
                "changes": 57,
                "additions": 57,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/optional-plugins/lettuce-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/lettuce/v5/AbstractRedisClientInterceptor.java?ref=c46554a1aea5f65d7dc6aad60119b954398a60ff",
                "patch": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.lettuce.v5;\n+\n+import io.lettuce.core.AbstractRedisClient;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+/**\n+ * @author zhaoyuguang\n+ */\n+public class AbstractRedisClientInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+                             MethodInterceptResult result) throws Throwable {\n+        EnhancedInstance clientOptions = (EnhancedInstance) allArguments[0];\n+        if (clientOptions == null) {\n+            return;\n+        }\n+        AbstractRedisClient client = (AbstractRedisClient) objInst;\n+        if (client.getOptions() == null || ((EnhancedInstance) client.getOptions()).getSkyWalkingDynamicField() == null) {\n+            return;\n+        }\n+        clientOptions.setSkyWalkingDynamicField(((EnhancedInstance) client.getOptions()).getSkyWalkingDynamicField());\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                              Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                                      Class<?>[] argumentsTypes, Throwable t) {\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "c461647a085c9a3d4eb2b1e0fd94ab4142ab765b",
                "filename": "apm-sniffer/optional-plugins/lettuce-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/lettuce/v5/define/AbstractRedisClientInstrumentation.java",
                "blob_url": "https://github.com/apache/skywalking/blob/c46554a1aea5f65d7dc6aad60119b954398a60ff/apm-sniffer/optional-plugins/lettuce-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/lettuce/v5/define/AbstractRedisClientInstrumentation.java",
                "raw_url": "https://github.com/apache/skywalking/raw/c46554a1aea5f65d7dc6aad60119b954398a60ff/apm-sniffer/optional-plugins/lettuce-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/lettuce/v5/define/AbstractRedisClientInstrumentation.java",
                "status": "added",
                "changes": 70,
                "additions": 70,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/optional-plugins/lettuce-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/lettuce/v5/define/AbstractRedisClientInstrumentation.java?ref=c46554a1aea5f65d7dc6aad60119b954398a60ff",
                "patch": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+\n+package org.apache.skywalking.apm.plugin.lettuce.v5.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static org.apache.skywalking.apm.agent.core.plugin.bytebuddy.ArgumentTypeNameMatch.takesArgumentWithType;\n+import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;\n+\n+/**\n+ * @author zhaoyuguang\n+ */\n+public class AbstractRedisClientInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {\n+\n+    private static final String ENHANCE_CLASS = \"io.lettuce.core.AbstractRedisClient\";\n+\n+    private static final String ABSTRACT_REDIS_CLIENT_CONSTRUCTOR_INTERCEPTOR_CLASS = \"org.apache.skywalking.apm.plugin.lettuce.v5.AbstractRedisClientInterceptor\";\n+\n+    @Override\n+    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {\n+        return new ConstructorInterceptPoint[0];\n+    }\n+\n+    @Override\n+    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {\n+        return new InstanceMethodsInterceptPoint[] {\n+            new InstanceMethodsInterceptPoint() {\n+                @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                    return named(\"setOptions\").and(takesArgumentWithType(0, \"io.lettuce.core.ClientOptions\"));\n+                }\n+\n+                @Override public String getMethodsInterceptor() {\n+                    return ABSTRACT_REDIS_CLIENT_CONSTRUCTOR_INTERCEPTOR_CLASS;\n+                }\n+\n+                @Override public boolean isOverrideArgs() {\n+                    return false;\n+                }\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public ClassMatch enhanceClass() {\n+        return byName(ENHANCE_CLASS);\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "7ab687d0cbe3d61f8b120328e5987e358d6ae8ca",
                "filename": "apm-sniffer/optional-plugins/lettuce-5.x-plugin/src/main/resources/skywalking-plugin.def",
                "blob_url": "https://github.com/apache/skywalking/blob/c46554a1aea5f65d7dc6aad60119b954398a60ff/apm-sniffer/optional-plugins/lettuce-5.x-plugin/src/main/resources/skywalking-plugin.def",
                "raw_url": "https://github.com/apache/skywalking/raw/c46554a1aea5f65d7dc6aad60119b954398a60ff/apm-sniffer/optional-plugins/lettuce-5.x-plugin/src/main/resources/skywalking-plugin.def",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/optional-plugins/lettuce-5.x-plugin/src/main/resources/skywalking-plugin.def?ref=c46554a1aea5f65d7dc6aad60119b954398a60ff",
                "patch": "@@ -14,6 +14,7 @@\n # See the License for the specific language governing permissions and\n # limitations under the License.\n \n+lettuce-5.x=org.apache.skywalking.apm.plugin.lettuce.v5.define.AbstractRedisClientInstrumentation\n lettuce-5.x=org.apache.skywalking.apm.plugin.lettuce.v5.define.AsyncCommandInstrumentation\n lettuce-5.x=org.apache.skywalking.apm.plugin.lettuce.v5.define.ClientOptionsInstrumentation\n lettuce-5.x=org.apache.skywalking.apm.plugin.lettuce.v5.define.RedisChannelWriterInstrumentation",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "Fix bug about match query in ElasticSearch storage. (#2550)\n\n* Fix bug about match query.\r\n\r\n* Update UI and alarm query\r\n\r\n* Fix style\r\n\r\n* Fix NPE.",
        "commit": "https://github.com/apache/skywalking/commit/9901005995ebf545857c6b092a442dd4c8f55136",
        "parent": "https://github.com/apache/skywalking/commit/2dcf27b79940d60a2e2f19cc7ba9eb9730a463a6",
        "bug_id": "skywalking_11",
        "file": [
            {
                "sha": "96a7a2c3741350d38c16a87ba536683111542eb4",
                "filename": "CHANGES.md",
                "blob_url": "https://github.com/apache/skywalking/blob/9901005995ebf545857c6b092a442dd4c8f55136/CHANGES.md",
                "raw_url": "https://github.com/apache/skywalking/raw/9901005995ebf545857c6b092a442dd4c8f55136/CHANGES.md",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/CHANGES.md?ref=9901005995ebf545857c6b092a442dd4c8f55136",
                "patch": "@@ -52,6 +52,7 @@ Significantly cost less CPU in low payload.**\n - Support set separated gRPC/Jetty ip:port for receiver, default still use core settings.\n - Fix JVM receiver bug.\n - Fix wrong dest service in mesh analysis.\n+- Fix search doesn't work as expected.\n - Refactor `ScopeDeclaration` annotation.\n - Refactor register lock mechanism.\n - Add SmartSql component for .NET",
                "deletions": 0
            },
            {
                "sha": "acbec882476a46eddfdf0f3b498497569e7819bc",
                "filename": "oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/AlarmQuery.java",
                "blob_url": "https://github.com/apache/skywalking/blob/9901005995ebf545857c6b092a442dd4c8f55136/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/AlarmQuery.java",
                "raw_url": "https://github.com/apache/skywalking/raw/9901005995ebf545857c6b092a442dd4c8f55136/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/AlarmQuery.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/AlarmQuery.java?ref=9901005995ebf545857c6b092a442dd4c8f55136",
                "patch": "@@ -54,6 +54,11 @@ public Alarms getAlarm(final Duration duration, final Scope scope, final String\n         long startTimeBucket = DurationUtils.INSTANCE.startTimeDurationToSecondTimeBucket(duration.getStep(), duration.getStart());\n         long endTimeBucket = DurationUtils.INSTANCE.endTimeDurationToSecondTimeBucket(duration.getStep(), duration.getEnd());\n \n-        return getQueryService().getAlarm(scope.getScopeId(), keyword, paging, startTimeBucket, endTimeBucket);\n+        Integer scopeId = null;\n+        if (scope != null) {\n+            scopeId = scope.getScopeId();\n+        }\n+\n+        return getQueryService().getAlarm(scopeId, keyword, paging, startTimeBucket, endTimeBucket);\n     }\n }",
                "deletions": 1
            },
            {
                "sha": "02ddbfa8d84865e1a85a25f49933307970d0ab71",
                "filename": "oap-server/server-query-plugin/query-graphql-plugin/src/main/resources/query-protocol",
                "blob_url": null,
                "raw_url": null,
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-query-plugin/query-graphql-plugin/src/main/resources/query-protocol?ref=9901005995ebf545857c6b092a442dd4c8f55136",
                "patch": "@@ -1 +1 @@\n-Subproject commit a005dd1024c2b7e68fbcab5795824634cb81cde8\n+Subproject commit 02ddbfa8d84865e1a85a25f49933307970d0ab71",
                "deletions": 1
            },
            {
                "sha": "47a7ad45e24f3e407777ce963e1c4e7b73179f9a",
                "filename": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/StorageEsInstaller.java",
                "blob_url": "https://github.com/apache/skywalking/blob/9901005995ebf545857c6b092a442dd4c8f55136/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/StorageEsInstaller.java",
                "raw_url": "https://github.com/apache/skywalking/raw/9901005995ebf545857c6b092a442dd4c8f55136/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/StorageEsInstaller.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/StorageEsInstaller.java?ref=9901005995ebf545857c6b092a442dd4c8f55136",
                "patch": "@@ -120,7 +120,7 @@ private JsonObject createMapping(Model tableDefine) {\n                 JsonObject matchColumn = new JsonObject();\n                 matchColumn.addProperty(\"type\", \"text\");\n                 matchColumn.addProperty(\"analyzer\", \"oap_analyzer\");\n-                properties.add(columnDefine.getColumnName().getName(), matchColumn);\n+                properties.add(matchCName, matchColumn);\n             } else {\n                 JsonObject column = new JsonObject();\n                 column.addProperty(\"type\", columnTypeEsMapping.transform(columnDefine.getType()));",
                "deletions": 1
            },
            {
                "sha": "3c0a3041710a6ec8e4ca32449e04a34e7dd1ef39",
                "filename": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/AlarmQueryEsDAO.java",
                "blob_url": "https://github.com/apache/skywalking/blob/9901005995ebf545857c6b092a442dd4c8f55136/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/AlarmQueryEsDAO.java",
                "raw_url": "https://github.com/apache/skywalking/raw/9901005995ebf545857c6b092a442dd4c8f55136/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/AlarmQueryEsDAO.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/AlarmQueryEsDAO.java?ref=9901005995ebf545857c6b092a442dd4c8f55136",
                "patch": "@@ -54,7 +54,7 @@ public Alarms getAlarm(final Integer scopeId, final String keyword, final int li\n \n         if (!Strings.isNullOrEmpty(keyword)) {\n             String matchCName = MatchCNameBuilder.INSTANCE.build(AlarmRecord.ALARM_MESSAGE);\n-            boolQueryBuilder.must().add(QueryBuilders.matchQuery(matchCName, keyword));\n+            boolQueryBuilder.must().add(QueryBuilders.matchPhraseQuery(matchCName, keyword));\n         }\n \n         sourceBuilder.query(boolQueryBuilder);",
                "deletions": 1
            },
            {
                "sha": "600eb4e58ab86ac481015eef78238b1773bce0bb",
                "filename": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/TraceQueryEsDAO.java",
                "blob_url": "https://github.com/apache/skywalking/blob/9901005995ebf545857c6b092a442dd4c8f55136/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/TraceQueryEsDAO.java",
                "raw_url": "https://github.com/apache/skywalking/raw/9901005995ebf545857c6b092a442dd4c8f55136/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/TraceQueryEsDAO.java",
                "status": "modified",
                "changes": 21,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/TraceQueryEsDAO.java?ref=9901005995ebf545857c6b092a442dd4c8f55136",
                "patch": "@@ -20,25 +20,15 @@\n \n import com.google.common.base.Strings;\n import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Base64;\n-import java.util.Collections;\n-import java.util.List;\n+import java.util.*;\n import org.apache.skywalking.oap.server.core.analysis.manual.segment.SegmentRecord;\n-import org.apache.skywalking.oap.server.core.query.entity.BasicTrace;\n-import org.apache.skywalking.oap.server.core.query.entity.QueryOrder;\n-import org.apache.skywalking.oap.server.core.query.entity.Span;\n-import org.apache.skywalking.oap.server.core.query.entity.TraceBrief;\n-import org.apache.skywalking.oap.server.core.query.entity.TraceState;\n+import org.apache.skywalking.oap.server.core.query.entity.*;\n import org.apache.skywalking.oap.server.core.storage.query.ITraceQueryDAO;\n import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;\n import org.apache.skywalking.oap.server.library.util.BooleanUtils;\n-import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.EsDAO;\n+import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.*;\n import org.elasticsearch.action.search.SearchResponse;\n-import org.elasticsearch.index.query.BoolQueryBuilder;\n-import org.elasticsearch.index.query.QueryBuilder;\n-import org.elasticsearch.index.query.QueryBuilders;\n-import org.elasticsearch.index.query.RangeQueryBuilder;\n+import org.elasticsearch.index.query.*;\n import org.elasticsearch.search.SearchHit;\n import org.elasticsearch.search.builder.SearchSourceBuilder;\n import org.elasticsearch.search.sort.SortOrder;\n@@ -80,7 +70,8 @@ public TraceBrief queryBasicTraces(long startSecondTB, long endSecondTB, long mi\n             boolQueryBuilder.must().add(rangeQueryBuilder);\n         }\n         if (!Strings.isNullOrEmpty(endpointName)) {\n-            mustQueryList.add(QueryBuilders.matchPhraseQuery(SegmentRecord.ENDPOINT_NAME, endpointName));\n+            String matchCName = MatchCNameBuilder.INSTANCE.build(SegmentRecord.ENDPOINT_NAME);\n+            mustQueryList.add(QueryBuilders.matchPhraseQuery(matchCName, endpointName));\n         }\n         if (serviceId != 0) {\n             boolQueryBuilder.must().add(QueryBuilders.termQuery(SegmentRecord.SERVICE_ID, serviceId));",
                "deletions": 15
            },
            {
                "sha": "5bcf69cecaf45125ae96ef0c64fe72f3554fdb9a",
                "filename": "oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2AlarmQueryDAO.java",
                "blob_url": "https://github.com/apache/skywalking/blob/9901005995ebf545857c6b092a442dd4c8f55136/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2AlarmQueryDAO.java",
                "raw_url": "https://github.com/apache/skywalking/raw/9901005995ebf545857c6b092a442dd4c8f55136/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2AlarmQueryDAO.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2AlarmQueryDAO.java?ref=9901005995ebf545857c6b092a442dd4c8f55136",
                "patch": "@@ -46,7 +46,9 @@ public Alarms getAlarm(Integer scopeId, String keyword, int limit, int from, lon\n         sql.append(\"from \").append(AlarmRecord.INDEX_NAME).append(\" where \");\n         sql.append(\" 1=1 \");\n         sql.append(\" and \").append(AlarmRecord.SCOPE).append(\" = ?\");\n-        parameters.add(scopeId.intValue());\n+        if (Objects.nonNull(scopeId)) {\n+            parameters.add(scopeId.intValue());\n+        }\n         if (startTB != 0 && endTB != 0) {\n             sql.append(\" and \").append(AlarmRecord.TIME_BUCKET).append(\" >= ?\");\n             parameters.add(startTB);",
                "deletions": 1
            },
            {
                "sha": "7647b72a1674b581f7775daf2b67894ca973af30",
                "filename": "oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLAlarmQueryDAO.java",
                "blob_url": "https://github.com/apache/skywalking/blob/9901005995ebf545857c6b092a442dd4c8f55136/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLAlarmQueryDAO.java",
                "raw_url": "https://github.com/apache/skywalking/raw/9901005995ebf545857c6b092a442dd4c8f55136/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLAlarmQueryDAO.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLAlarmQueryDAO.java?ref=9901005995ebf545857c6b092a442dd4c8f55136",
                "patch": "@@ -46,7 +46,9 @@ public Alarms getAlarm(Integer scopeId, String keyword, int limit, int from, lon\n         sql.append(\"from \").append(AlarmRecord.INDEX_NAME).append(\" where \");\n         sql.append(\" 1=1 \");\n         sql.append(\" and \").append(AlarmRecord.SCOPE).append(\" = ?\");\n-        parameters.add(scopeId.intValue());\n+        if (Objects.nonNull(scopeId)) {\n+            parameters.add(scopeId.intValue());\n+        }\n         if (startTB != 0 && endTB != 0) {\n             sql.append(\" and \").append(AlarmRecord.TIME_BUCKET).append(\" >= ?\");\n             parameters.add(startTB);",
                "deletions": 1
            },
            {
                "sha": "e58119dbb6a1dabfb5d921df5efd636b51399d9e",
                "filename": "skywalking-ui",
                "blob_url": null,
                "raw_url": null,
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/skywalking-ui?ref=9901005995ebf545857c6b092a442dd4c8f55136",
                "patch": "@@ -1 +1 @@\n-Subproject commit b6b3f9b0022c7e8c997abad5f7b8363cf5345181\n+Subproject commit e58119dbb6a1dabfb5d921df5efd636b51399d9e",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "Fix the NPE about elasticsearch plugin (#1985)",
        "commit": "https://github.com/apache/skywalking/commit/aa9a7c443774d96385f308f2ec1f425f47719958",
        "parent": "https://github.com/apache/skywalking/commit/45f44544eb604afeb2ecab3023e54ac6f09324af",
        "bug_id": "skywalking_12",
        "file": [
            {
                "sha": "880b3644207ab53caf0ab53795b44182510df977",
                "filename": "apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/ActionRequestBuilderInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/45f44544eb604afeb2ecab3023e54ac6f09324af/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/ActionRequestBuilderInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/45f44544eb604afeb2ecab3023e54ac6f09324af/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/ActionRequestBuilderInterceptor.java",
                "status": "removed",
                "changes": 65,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/ActionRequestBuilderInterceptor.java?ref=45f44544eb604afeb2ecab3023e54ac6f09324af",
                "patch": "@@ -1,65 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- */\n-\n-package org.apache.skywalking.apm.plugin.elasticsearch.v5;\n-\n-import org.apache.skywalking.apm.agent.core.context.ContextManager;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n-import org.elasticsearch.client.transport.TransportClient;\n-\n-import static org.apache.skywalking.apm.plugin.elasticsearch.v5.Constants.ES_ENHANCE_INFO;\n-\n-/**\n- * @author oatiz.\n- */\n-public class ActionRequestBuilderInterceptor implements InstanceConstructorInterceptor {\n-\n-    @Override\n-    public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {\n-        ElasticSearchEnhanceInfo enhanceInfo = new ElasticSearchEnhanceInfo();\n-\n-        parseClientInfo(allArguments[0], enhanceInfo);\n-\n-        ContextManager.getRuntimeContext().put(ES_ENHANCE_INFO, enhanceInfo);\n-    }\n-\n-    private void parseClientInfo(Object client, ElasticSearchEnhanceInfo enhanceInfo) {\n-\n-        if (client instanceof TransportClient) {\n-            TransportClient transportClient = (TransportClient) client;\n-\n-            StringBuilder builder = new StringBuilder();\n-            for (int i = 0; i < transportClient.transportAddresses().size(); i++) {\n-                if (i != transportClient.transportAddresses().size() - 1) {\n-                    builder.append(transportClient.transportAddresses().get(i).toString()).append(\",\");\n-                } else {\n-                    builder.append(transportClient.transportAddresses().get(i).toString());\n-                }\n-            }\n-\n-            enhanceInfo.setTransportAddress(builder.toString());\n-        } else {\n-            // avoid NPE\n-            enhanceInfo.setTransportAddress(\"\");\n-        }\n-\n-\n-    }\n-\n-}",
                "deletions": 65
            },
            {
                "sha": "0d2d1e13a46347d095d9388512379fc40541e65e",
                "filename": "apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/AddTransportAddressesInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/aa9a7c443774d96385f308f2ec1f425f47719958/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/AddTransportAddressesInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/aa9a7c443774d96385f308f2ec1f425f47719958/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/AddTransportAddressesInterceptor.java",
                "status": "added",
                "changes": 49,
                "additions": 49,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/AddTransportAddressesInterceptor.java?ref=aa9a7c443774d96385f308f2ec1f425f47719958",
                "patch": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticsearch.v5;\n+\n+import java.lang.reflect.Method;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.elasticsearch.common.transport.TransportAddress;\n+\n+public class AddTransportAddressesInterceptor implements InstanceMethodsAroundInterceptor {\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+        MethodInterceptResult result) throws Throwable {\n+\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+        Object ret) throws Throwable {\n+        TransportAddressCache transportAddressCache = (TransportAddressCache)objInst.getSkyWalkingDynamicField();\n+        if (transportAddressCache == null) {\n+            transportAddressCache = new TransportAddressCache();\n+        }\n+        transportAddressCache.addDiscoveryNode((TransportAddress[])allArguments[0]);\n+        objInst.setSkyWalkingDynamicField(transportAddressCache);\n+        return ret;\n+    }\n+\n+    @Override public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments,\n+        Class<?>[] argumentsTypes, Throwable t) {\n+\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "7ac3c7f2816e6f8f98cef07541dbf1c32ed7db08",
                "filename": "apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/Constants.java",
                "blob_url": "https://github.com/apache/skywalking/blob/aa9a7c443774d96385f308f2ec1f425f47719958/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/Constants.java",
                "raw_url": "https://github.com/apache/skywalking/raw/aa9a7c443774d96385f308f2ec1f425f47719958/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/Constants.java",
                "status": "modified",
                "changes": 2,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/Constants.java?ref=aa9a7c443774d96385f308f2ec1f425f47719958",
                "patch": "@@ -27,8 +27,6 @@\n \n     static final String ELASTICSEARCH_DB_OP_PREFIX = \"Elasticsearch/\";\n \n-    static final String ES_ENHANCE_INFO = \"es_enhance_info\";\n-\n     static final String BASE_FUTURE_METHOD = \"actionGet\";\n \n     static final String ES_NODE = \"node.address\";",
                "deletions": 2
            },
            {
                "sha": "1d950dc7ed8309785210ed9a5aa1a19401b4c8e0",
                "filename": "apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/ElasticSearchEnhanceInfo.java",
                "blob_url": "https://github.com/apache/skywalking/blob/aa9a7c443774d96385f308f2ec1f425f47719958/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/ElasticSearchEnhanceInfo.java",
                "raw_url": "https://github.com/apache/skywalking/raw/aa9a7c443774d96385f308f2ec1f425f47719958/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/ElasticSearchEnhanceInfo.java",
                "status": "modified",
                "changes": 17,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/ElasticSearchEnhanceInfo.java?ref=aa9a7c443774d96385f308f2ec1f425f47719958",
                "patch": "@@ -18,14 +18,12 @@\n \n package org.apache.skywalking.apm.plugin.elasticsearch.v5;\n \n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+\n /**\n  * @author oatiz.\n  */\n public class ElasticSearchEnhanceInfo {\n-    /**\n-     * elasticsearch host and port\n-     */\n-    private String transportAddress;\n     /**\n      * elasticsearch cluster name\n      */\n@@ -47,12 +45,10 @@\n      */\n     private String source;\n \n-    public String getTransportAddress() {\n-        return transportAddress;\n-    }\n+    private EnhancedInstance transportAddressHolder;\n \n-    public void setTransportAddress(String transportAddress) {\n-        this.transportAddress = transportAddress;\n+    public String transportAddresses() {\n+        return ((TransportAddressCache)transportAddressHolder.getSkyWalkingDynamicField()).transportAddress();\n     }\n \n     public String getClusterName() {\n@@ -95,4 +91,7 @@ public void setSource(String source) {\n         this.source = source;\n     }\n \n+    public void setTransportAddressHolder(EnhancedInstance service) {\n+        this.transportAddressHolder = service;\n+    }\n }",
                "deletions": 9
            },
            {
                "sha": "c3fcdf7e1341443be875727ad18f392b57492073",
                "filename": "apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/GenericActionConstructorInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/aa9a7c443774d96385f308f2ec1f425f47719958/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/GenericActionConstructorInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/aa9a7c443774d96385f308f2ec1f425f47719958/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/GenericActionConstructorInterceptor.java",
                "status": "added",
                "changes": 28,
                "additions": 28,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/GenericActionConstructorInterceptor.java?ref=aa9a7c443774d96385f308f2ec1f425f47719958",
                "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticsearch.v5;\n+\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+\n+public class GenericActionConstructorInterceptor implements InstanceConstructorInterceptor {\n+    @Override\n+    public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {\n+        //DO Nothing, just for pass parameter\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "5c7835b0ea985ddfd2e051219f3c98f9e2844f83",
                "filename": "apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/RemoveTransportAddressInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/aa9a7c443774d96385f308f2ec1f425f47719958/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/RemoveTransportAddressInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/aa9a7c443774d96385f308f2ec1f425f47719958/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/RemoveTransportAddressInterceptor.java",
                "status": "added",
                "changes": 49,
                "additions": 49,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/RemoveTransportAddressInterceptor.java?ref=aa9a7c443774d96385f308f2ec1f425f47719958",
                "patch": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticsearch.v5;\n+\n+import java.lang.reflect.Method;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.elasticsearch.common.transport.TransportAddress;\n+\n+public class RemoveTransportAddressInterceptor implements InstanceMethodsAroundInterceptor {\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+        MethodInterceptResult result) throws Throwable {\n+\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+        Object ret) throws Throwable {\n+        TransportAddressCache transportAddressCache = (TransportAddressCache)objInst.getSkyWalkingDynamicField();\n+        if (transportAddressCache == null) {\n+            transportAddressCache = new TransportAddressCache();\n+        }\n+        transportAddressCache.removeDiscoveryNode((TransportAddress)allArguments[0]);\n+        objInst.setSkyWalkingDynamicField(transportAddressCache);\n+        return ret;\n+    }\n+\n+    @Override public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments,\n+        Class<?>[] argumentsTypes, Throwable t) {\n+\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "adc431c61e008f11c05197cafc8ca777c53d4f4c",
                "filename": "apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/TransportActionNodeProxyInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/aa9a7c443774d96385f308f2ec1f425f47719958/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/TransportActionNodeProxyInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/aa9a7c443774d96385f308f2ec1f425f47719958/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/TransportActionNodeProxyInterceptor.java",
                "status": "modified",
                "changes": 31,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/TransportActionNodeProxyInterceptor.java?ref=aa9a7c443774d96385f308f2ec1f425f47719958",
                "patch": "@@ -18,60 +18,67 @@\n \n package org.apache.skywalking.apm.plugin.elasticsearch.v5;\n \n+import java.lang.reflect.Method;\n import org.apache.skywalking.apm.agent.core.context.ContextManager;\n import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n import org.elasticsearch.cluster.node.DiscoveryNode;\n \n-import java.lang.reflect.Method;\n-\n import static org.apache.skywalking.apm.agent.core.conf.Config.Plugin.Elasticsearch.TRACE_DSL;\n-import static org.apache.skywalking.apm.plugin.elasticsearch.v5.Constants.*;\n+import static org.apache.skywalking.apm.plugin.elasticsearch.v5.Constants.DB_TYPE;\n+import static org.apache.skywalking.apm.plugin.elasticsearch.v5.Constants.ELASTICSEARCH_DB_OP_PREFIX;\n+import static org.apache.skywalking.apm.plugin.elasticsearch.v5.Constants.ES_INDEX;\n+import static org.apache.skywalking.apm.plugin.elasticsearch.v5.Constants.ES_NODE;\n+import static org.apache.skywalking.apm.plugin.elasticsearch.v5.Constants.ES_TYPE;\n import static org.apache.skywalking.apm.plugin.elasticsearch.v5.Util.wrapperNullStringValue;\n \n /**\n  * @author oatiz.\n  */\n-public class TransportActionNodeProxyInterceptor implements InstanceMethodsAroundInterceptor {\n+public class TransportActionNodeProxyInterceptor implements InstanceConstructorInterceptor, InstanceMethodsAroundInterceptor {\n \n     @Override\n     public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments,\n-                             Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n-\n-        ElasticSearchEnhanceInfo enhanceInfo = (ElasticSearchEnhanceInfo) ContextManager.getRuntimeContext().get(ES_ENHANCE_INFO);\n+        Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n \n+        ElasticSearchEnhanceInfo enhanceInfo = (ElasticSearchEnhanceInfo)((EnhancedInstance)objInst.getSkyWalkingDynamicField()).getSkyWalkingDynamicField();\n         String opType = allArguments[1].getClass().getSimpleName();\n         String operationName = ELASTICSEARCH_DB_OP_PREFIX + opType;\n-        AbstractSpan span = ContextManager.createExitSpan(operationName, enhanceInfo.getTransportAddress());\n+        AbstractSpan span = ContextManager.createExitSpan(operationName, enhanceInfo.transportAddresses());\n         span.setComponent(ComponentsDefine.TRANSPORT_CLIENT);\n         Tags.DB_TYPE.set(span, DB_TYPE);\n         Tags.DB_INSTANCE.set(span, enhanceInfo.getClusterName());\n         if (TRACE_DSL) {\n             Tags.DB_STATEMENT.set(span, enhanceInfo.getSource());\n         }\n-        span.tag(ES_NODE, ((DiscoveryNode) allArguments[0]).getAddress().toString());\n+        span.tag(ES_NODE, ((DiscoveryNode)allArguments[0]).getAddress().toString());\n         span.tag(ES_INDEX, wrapperNullStringValue(enhanceInfo.getIndices()));\n         span.tag(ES_TYPE, wrapperNullStringValue(enhanceInfo.getTypes()));\n         SpanLayer.asDB(span);\n-        ContextManager.getRuntimeContext().remove(ES_ENHANCE_INFO);\n     }\n \n     @Override\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments,\n-                              Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        Class<?>[] argumentsTypes, Object ret) throws Throwable {\n         ContextManager.stopSpan();\n         return ret;\n     }\n \n     @Override\n     public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments,\n-                                      Class<?>[] argumentsTypes, Throwable t) {\n+        Class<?>[] argumentsTypes, Throwable t) {\n         ContextManager.activeSpan().errorOccurred().log(t);\n     }\n \n+    @Override\n+    public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {\n+        EnhancedInstance actions = (EnhancedInstance)allArguments[1];\n+        objInst.setSkyWalkingDynamicField(actions);\n+    }\n }",
                "deletions": 12
            },
            {
                "sha": "725dcb621d7ce0307b1b8ba7e2efb4f143b81df8",
                "filename": "apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/TransportAddressCache.java",
                "blob_url": "https://github.com/apache/skywalking/blob/aa9a7c443774d96385f308f2ec1f425f47719958/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/TransportAddressCache.java",
                "raw_url": "https://github.com/apache/skywalking/raw/aa9a7c443774d96385f308f2ec1f425f47719958/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/TransportAddressCache.java",
                "status": "added",
                "changes": 60,
                "additions": 60,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/TransportAddressCache.java?ref=aa9a7c443774d96385f308f2ec1f425f47719958",
                "patch": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticsearch.v5;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.elasticsearch.common.transport.TransportAddress;\n+\n+public class TransportAddressCache {\n+\n+    private List<TransportAddress> transportAddresses = new ArrayList<TransportAddress>();\n+    private String transportAddressesStr;\n+\n+    public synchronized void addDiscoveryNode(TransportAddress... transportAddress) {\n+        transportAddresses.addAll(Arrays.asList(transportAddress));\n+        transportAddressesStr = format();\n+    }\n+\n+    public synchronized void removeDiscoveryNode(TransportAddress transportAddress) {\n+        List<TransportAddress> nodesBuilder = new ArrayList<TransportAddress>();\n+\n+        for (TransportAddress otherNode : transportAddresses) {\n+            if (!otherNode.getAddress().equals(transportAddress.getAddress())) {\n+                nodesBuilder.add(otherNode);\n+            }\n+        }\n+\n+        transportAddresses = nodesBuilder;\n+        transportAddressesStr = format();\n+    }\n+\n+    private String format() {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        for (TransportAddress node : transportAddresses) {\n+            stringBuilder.append(node.getAddress()).append(\":\").append(node.getPort()).append(\";\");\n+        }\n+\n+        return stringBuilder.toString();\n+    }\n+\n+    public String transportAddress() {\n+        return transportAddressesStr;\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "65130016d87e730536cd88f04b741f7de1d2fed4",
                "filename": "apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/TransportProxyClientInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/aa9a7c443774d96385f308f2ec1f425f47719958/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/TransportProxyClientInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/aa9a7c443774d96385f308f2ec1f425f47719958/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/TransportProxyClientInterceptor.java",
                "status": "modified",
                "changes": 64,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/TransportProxyClientInterceptor.java?ref=aa9a7c443774d96385f308f2ec1f425f47719958",
                "patch": "@@ -6,26 +6,25 @@\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n  */\n \n package org.apache.skywalking.apm.plugin.elasticsearch.v5;\n \n-import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import java.io.IOException;\n+import java.util.List;\n import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n import org.apache.skywalking.apm.util.StringUtil;\n+import org.elasticsearch.action.GenericAction;\n import org.elasticsearch.action.delete.DeleteRequest;\n import org.elasticsearch.action.get.GetRequest;\n import org.elasticsearch.action.index.IndexRequest;\n@@ -34,45 +33,32 @@\n import org.elasticsearch.common.settings.Settings;\n import org.elasticsearch.common.xcontent.XContentFactory;\n \n-import java.io.IOException;\n-import java.lang.reflect.Method;\n-\n import static org.apache.skywalking.apm.agent.core.conf.Config.Plugin.Elasticsearch.TRACE_DSL;\n-import static org.apache.skywalking.apm.plugin.elasticsearch.v5.Constants.ES_ENHANCE_INFO;\n-import static org.apache.skywalking.apm.plugin.elasticsearch.v5.Util.wrapperNullStringValue;\n \n /**\n- * @author oatiz.\n+ * @author oatiz, zhang xin.\n  */\n-public class TransportProxyClientInterceptor implements InstanceConstructorInterceptor, InstanceMethodsAroundInterceptor {\n+public class TransportProxyClientInterceptor implements InstanceConstructorInterceptor {\n \n     private static final ILog logger = LogManager.getLogger(TransportProxyClientInterceptor.class);\n \n     @Override\n     public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {\n-        Settings settings = (Settings) allArguments[0];\n+        Settings settings = (Settings)allArguments[0];\n         String clusterName = settings.get(\"cluster.name\");\n-        objInst.setSkyWalkingDynamicField(wrapperNullStringValue(clusterName));\n-    }\n \n-    @Override\n-    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments,\n-                             Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n-        ElasticSearchEnhanceInfo enhanceInfo = (ElasticSearchEnhanceInfo) ContextManager.getRuntimeContext().get(ES_ENHANCE_INFO);\n-        enhanceInfo.setClusterName((String) objInst.getSkyWalkingDynamicField());\n-        parseRequestInfo(allArguments[1], enhanceInfo);\n-    }\n+        EnhancedInstance nodeService = (EnhancedInstance)allArguments[2];\n+        List<GenericAction> genericActions = (List<GenericAction>)allArguments[3];\n \n-    @Override\n-    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments,\n-                              Class<?>[] argumentsTypes, Object ret) throws Throwable {\n-        return ret;\n-    }\n-\n-    @Override\n-    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments,\n-                                      Class<?>[] argumentsTypes, Throwable t) {\n-        ContextManager.activeSpan().errorOccurred().log(t);\n+        for (GenericAction action : genericActions) {\n+            if (action instanceof EnhancedInstance) {\n+                ElasticSearchEnhanceInfo elasticSearchEnhanceInfo = new ElasticSearchEnhanceInfo();\n+                elasticSearchEnhanceInfo.setClusterName(clusterName);\n+                parseRequestInfo(action, elasticSearchEnhanceInfo);\n+                elasticSearchEnhanceInfo.setTransportAddressHolder(nodeService);\n+                ((EnhancedInstance)action).setSkyWalkingDynamicField(elasticSearchEnhanceInfo);\n+            }\n+        }\n     }\n \n     private void parseRequestInfo(Object request, ElasticSearchEnhanceInfo enhanceInfo) {\n@@ -103,7 +89,7 @@ private void parseRequestInfo(Object request, ElasticSearchEnhanceInfo enhanceIn\n     }\n \n     private void parseSearchRequest(Object request, ElasticSearchEnhanceInfo enhanceInfo) {\n-        SearchRequest searchRequest = (SearchRequest) request;\n+        SearchRequest searchRequest = (SearchRequest)request;\n         enhanceInfo.setIndices(StringUtil.join(',', searchRequest.indices()));\n         enhanceInfo.setTypes(StringUtil.join(',', searchRequest.types()));\n         if (TRACE_DSL) {\n@@ -112,7 +98,7 @@ private void parseSearchRequest(Object request, ElasticSearchEnhanceInfo enhance\n     }\n \n     private void parseGetRequest(Object request, ElasticSearchEnhanceInfo enhanceInfo) {\n-        GetRequest getRequest = (GetRequest) request;\n+        GetRequest getRequest = (GetRequest)request;\n         enhanceInfo.setIndices(StringUtil.join(',', getRequest.indices()));\n         enhanceInfo.setTypes(getRequest.type());\n         if (TRACE_DSL) {\n@@ -121,7 +107,7 @@ private void parseGetRequest(Object request, ElasticSearchEnhanceInfo enhanceInf\n     }\n \n     private void parseIndexRequest(Object request, ElasticSearchEnhanceInfo enhanceInfo) {\n-        IndexRequest indexRequest = (IndexRequest) request;\n+        IndexRequest indexRequest = (IndexRequest)request;\n         enhanceInfo.setIndices(StringUtil.join(',', indexRequest.indices()));\n         enhanceInfo.setTypes(indexRequest.type());\n         if (TRACE_DSL) {\n@@ -130,7 +116,7 @@ private void parseIndexRequest(Object request, ElasticSearchEnhanceInfo enhanceI\n     }\n \n     private void parseUpdateRequest(Object request, ElasticSearchEnhanceInfo enhanceInfo) {\n-        UpdateRequest updateRequest = (UpdateRequest) request;\n+        UpdateRequest updateRequest = (UpdateRequest)request;\n         enhanceInfo.setIndices(StringUtil.join(',', updateRequest.indices()));\n         enhanceInfo.setTypes(updateRequest.type());\n         if (TRACE_DSL) {\n@@ -145,7 +131,7 @@ private void parseUpdateRequest(Object request, ElasticSearchEnhanceInfo enhance\n     }\n \n     private void parseDeleteRequest(Object request, ElasticSearchEnhanceInfo enhanceInfo) {\n-        DeleteRequest deleteRequest = (DeleteRequest) request;\n+        DeleteRequest deleteRequest = (DeleteRequest)request;\n         enhanceInfo.setIndices(StringUtil.join(',', deleteRequest.indices()));\n         enhanceInfo.setTypes(deleteRequest.type());\n         if (TRACE_DSL) {",
                "deletions": 39
            },
            {
                "sha": "9bb444b73ebefefbb599aaf3dfa53f8f2477fab0",
                "filename": "apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/define/GenericActionInstrumentation.java",
                "blob_url": "https://github.com/apache/skywalking/blob/aa9a7c443774d96385f308f2ec1f425f47719958/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/define/GenericActionInstrumentation.java",
                "raw_url": "https://github.com/apache/skywalking/raw/aa9a7c443774d96385f308f2ec1f425f47719958/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/define/GenericActionInstrumentation.java",
                "status": "renamed",
                "changes": 45,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/define/GenericActionInstrumentation.java?ref=aa9a7c443774d96385f308f2ec1f425f47719958",
                "patch": "@@ -6,14 +6,13 @@\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n  */\n \n package org.apache.skywalking.apm.plugin.elasticsearch.v5.define;\n@@ -22,43 +21,37 @@\n import net.bytebuddy.matcher.ElementMatcher;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.StaticMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassEnhancePluginDefine;\n import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n \n import static net.bytebuddy.matcher.ElementMatchers.any;\n-import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;\n-\n-/**\n- * @author oatiz.\n- */\n-public class ActionRequestBuilderInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {\n+import static org.apache.skywalking.apm.agent.core.plugin.match.HierarchyMatch.byHierarchyMatch;\n \n-    private static final String ENHANCE_CLASS = \"org.apache.skywalking.apm.plugin.elasticsearch.v5.ActionRequestBuilderInterceptor\";\n-\n-    @Override\n-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {\n-        return new ConstructorInterceptPoint[]{\n+public class GenericActionInstrumentation extends ClassEnhancePluginDefine {\n+    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {\n+        return new ConstructorInterceptPoint[] {\n             new ConstructorInterceptPoint() {\n-                @Override\n-                public ElementMatcher<MethodDescription> getConstructorMatcher() {\n+                @Override public ElementMatcher<MethodDescription> getConstructorMatcher() {\n                     return any();\n                 }\n \n-                @Override\n-                public String getConstructorInterceptor() {\n-                    return ENHANCE_CLASS;\n+                @Override public String getConstructorInterceptor() {\n+                    return \"org.apache.skywalking.apm.plugin.elasticsearch.v5.GenericActionConstructorInterceptor\";\n                 }\n             }\n         };\n     }\n \n-    @Override\n-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {\n+    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {\n         return new InstanceMethodsInterceptPoint[0];\n     }\n \n-    @Override\n-    protected ClassMatch enhanceClass() {\n-        return byName(\"org.elasticsearch.action.ActionRequestBuilder\");\n+    @Override protected StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {\n+        return new StaticMethodsInterceptPoint[0];\n+    }\n+\n+    @Override protected ClassMatch enhanceClass() {\n+        return byHierarchyMatch(new String[] {\"org.elasticsearch.action.GenericAction\"});\n     }\n }",
                "deletions": 26,
                "previous_filename": "apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/define/ActionRequestBuilderInstrumentation.java"
            },
            {
                "sha": "d4b28a7828bc821b9561a473b48f31e822ff1d34",
                "filename": "apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/define/TransportActionNodeProxyInstrumentation.java",
                "blob_url": "https://github.com/apache/skywalking/blob/aa9a7c443774d96385f308f2ec1f425f47719958/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/define/TransportActionNodeProxyInstrumentation.java",
                "raw_url": "https://github.com/apache/skywalking/raw/aa9a7c443774d96385f308f2ec1f425f47719958/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/define/TransportActionNodeProxyInstrumentation.java",
                "status": "modified",
                "changes": 20,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/define/TransportActionNodeProxyInstrumentation.java?ref=aa9a7c443774d96385f308f2ec1f425f47719958",
                "patch": "@@ -26,6 +26,7 @@\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassEnhancePluginDefine;\n import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n \n+import static net.bytebuddy.matcher.ElementMatchers.any;\n import static net.bytebuddy.matcher.ElementMatchers.named;\n import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;\n \n@@ -34,9 +35,22 @@\n  */\n public class TransportActionNodeProxyInstrumentation extends ClassEnhancePluginDefine {\n \n+    public static final String INTERCEPTOR_CLASS = \"org.apache.skywalking.apm.plugin.elasticsearch.v5.TransportActionNodeProxyInterceptor\";\n+    public static final String ENHANC_CLASS = \"org.elasticsearch.action.TransportActionNodeProxy\";\n+\n     @Override\n     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {\n-        return new ConstructorInterceptPoint[0];\n+        return new ConstructorInterceptPoint[]{\n+            new ConstructorInterceptPoint() {\n+                @Override public ElementMatcher<MethodDescription> getConstructorMatcher() {\n+                    return any();\n+                }\n+\n+                @Override public String getConstructorInterceptor() {\n+                    return INTERCEPTOR_CLASS;\n+                }\n+            }\n+        };\n     }\n \n     @Override\n@@ -50,7 +64,7 @@\n \n                 @Override\n                 public String getMethodsInterceptor() {\n-                    return \"org.apache.skywalking.apm.plugin.elasticsearch.v5.TransportActionNodeProxyInterceptor\";\n+                    return INTERCEPTOR_CLASS;\n                 }\n \n                 @Override\n@@ -68,6 +82,6 @@ public boolean isOverrideArgs() {\n \n     @Override\n     protected ClassMatch enhanceClass() {\n-        return byName(\"org.elasticsearch.action.TransportActionNodeProxy\");\n+        return byName(ENHANC_CLASS);\n     }\n }",
                "deletions": 3
            },
            {
                "sha": "243fe3210407a2d63fb6ecb53e8b30b7552ad683",
                "filename": "apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/define/TransportClientNodesServiceInstrumentation.java",
                "blob_url": "https://github.com/apache/skywalking/blob/aa9a7c443774d96385f308f2ec1f425f47719958/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/define/TransportClientNodesServiceInstrumentation.java",
                "raw_url": "https://github.com/apache/skywalking/raw/aa9a7c443774d96385f308f2ec1f425f47719958/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/define/TransportClientNodesServiceInstrumentation.java",
                "status": "added",
                "changes": 74,
                "additions": 74,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/define/TransportClientNodesServiceInstrumentation.java?ref=aa9a7c443774d96385f308f2ec1f425f47719958",
                "patch": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticsearch.v5.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;\n+\n+public class TransportClientNodesServiceInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {\n+\n+    public static final String ADD_TRANSPORT_ADDRESSES_INTERCEPTOR = \"org.apache.skywalking.apm.plugin.elasticsearch.v5.AddTransportAddressesInterceptor\";\n+    public static final String REMOVE_TRANSPORT_ADDRESS_INTERCEPTOR = \"org.apache.skywalking.apm.plugin.elasticsearch.v5.RemoveTransportAddressInterceptor\";\n+    public static final String ENHANCE_CLASS = \"org.elasticsearch.client.transport.TransportClientNodesService\";\n+\n+    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {\n+        return new ConstructorInterceptPoint[0];\n+    }\n+\n+    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {\n+        return new InstanceMethodsInterceptPoint[]{\n+            new InstanceMethodsInterceptPoint() {\n+                @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                    return named(\"addTransportAddresses\");\n+                }\n+\n+                @Override public String getMethodsInterceptor() {\n+                    return ADD_TRANSPORT_ADDRESSES_INTERCEPTOR;\n+                }\n+\n+                @Override public boolean isOverrideArgs() {\n+                    return false;\n+                }\n+            },\n+            new InstanceMethodsInterceptPoint() {\n+                @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                    return named(\"removeTransportAddress\");\n+                }\n+\n+                @Override public String getMethodsInterceptor() {\n+                    return REMOVE_TRANSPORT_ADDRESS_INTERCEPTOR;\n+                }\n+\n+                @Override public boolean isOverrideArgs() {\n+                    return false;\n+                }\n+            }\n+        };\n+    }\n+\n+    @Override protected ClassMatch enhanceClass() {\n+        return byName(ENHANCE_CLASS);\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "5cb67e6fdab39b32f4b12907416de73dd056182f",
                "filename": "apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/define/TransportProxyClientInstrumentation.java",
                "blob_url": "https://github.com/apache/skywalking/blob/aa9a7c443774d96385f308f2ec1f425f47719958/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/define/TransportProxyClientInstrumentation.java",
                "raw_url": "https://github.com/apache/skywalking/raw/aa9a7c443774d96385f308f2ec1f425f47719958/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/define/TransportProxyClientInstrumentation.java",
                "status": "modified",
                "changes": 26,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/define/TransportProxyClientInstrumentation.java?ref=aa9a7c443774d96385f308f2ec1f425f47719958",
                "patch": "@@ -23,23 +23,22 @@\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.StaticMethodsInterceptPoint;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n \n import static net.bytebuddy.matcher.ElementMatchers.any;\n-import static net.bytebuddy.matcher.ElementMatchers.named;\n import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;\n \n /**\n  * @author oatiz.\n  */\n-public class TransportProxyClientInstrumentation extends ClassEnhancePluginDefine {\n+public class TransportProxyClientInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {\n \n     private static final String ENHANCE_CLASS = \"org.apache.skywalking.apm.plugin.elasticsearch.v5.TransportProxyClientInterceptor\";\n \n     @Override\n     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {\n-        return new ConstructorInterceptPoint[]{\n+        return new ConstructorInterceptPoint[] {\n             new ConstructorInterceptPoint() {\n                 @Override\n                 public ElementMatcher<MethodDescription> getConstructorMatcher() {\n@@ -56,24 +55,7 @@ public String getConstructorInterceptor() {\n \n     @Override\n     protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {\n-        return new InstanceMethodsInterceptPoint[]{\n-            new InstanceMethodsInterceptPoint() {\n-                @Override\n-                public ElementMatcher<MethodDescription> getMethodsMatcher() {\n-                    return named(\"execute\");\n-                }\n-\n-                @Override\n-                public String getMethodsInterceptor() {\n-                    return ENHANCE_CLASS;\n-                }\n-\n-                @Override\n-                public boolean isOverrideArgs() {\n-                    return false;\n-                }\n-            }\n-        };\n+        return new InstanceMethodsInterceptPoint[0];\n     }\n \n     @Override",
                "deletions": 22
            },
            {
                "sha": "d031d4e000905511ee5bb08c142ea6fb8919165b",
                "filename": "apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/resources/skywalking-plugin.def",
                "blob_url": "https://github.com/apache/skywalking/blob/aa9a7c443774d96385f308f2ec1f425f47719958/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/resources/skywalking-plugin.def",
                "raw_url": "https://github.com/apache/skywalking/raw/aa9a7c443774d96385f308f2ec1f425f47719958/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/resources/skywalking-plugin.def",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/resources/skywalking-plugin.def?ref=aa9a7c443774d96385f308f2ec1f425f47719958",
                "patch": "@@ -14,7 +14,8 @@\n # See the License for the specific language governing permissions and\n # limitations under the License.\n \n-elasticsearch-5.x=org.apache.skywalking.apm.plugin.elasticsearch.v5.define.ActionRequestBuilderInstrumentation\n elasticsearch-5.x=org.apache.skywalking.apm.plugin.elasticsearch.v5.define.TransportProxyClientInstrumentation\n elasticsearch-5.x=org.apache.skywalking.apm.plugin.elasticsearch.v5.define.TransportActionNodeProxyInstrumentation\n elasticsearch-5.x=org.apache.skywalking.apm.plugin.elasticsearch.v5.define.PlainListenableActionFutureInstrumentation\n+elasticsearch-5.x=org.apache.skywalking.apm.plugin.elasticsearch.v5.define.GenericActionInstrumentation\n+elasticsearch-5.x=org.apache.skywalking.apm.plugin.elasticsearch.v5.define.TransportClientNodesServiceInstrumentation",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "avoid NPE. (#1869)",
        "commit": "https://github.com/apache/skywalking/commit/76e4c5996d42e2219501e958d3ff7542dfb45daa",
        "parent": "https://github.com/apache/skywalking/commit/75e4c6795237ea402b07c4ad4f23c970f9ad3be3",
        "bug_id": "skywalking_13",
        "file": [
            {
                "sha": "8e8a87b66054d73c1717a9c9b38e658cc9625d28",
                "filename": "oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/ServiceMeshMetricDataDecorator.java",
                "blob_url": "https://github.com/apache/skywalking/blob/76e4c5996d42e2219501e958d3ff7542dfb45daa/oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/ServiceMeshMetricDataDecorator.java",
                "raw_url": "https://github.com/apache/skywalking/raw/76e4c5996d42e2219501e958d3ff7542dfb45daa/oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/ServiceMeshMetricDataDecorator.java",
                "status": "modified",
                "changes": 18,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/ServiceMeshMetricDataDecorator.java?ref=76e4c5996d42e2219501e958d3ff7542dfb45daa",
                "patch": "@@ -85,21 +85,23 @@ boolean tryMetaDataRegister() {\n             }\n         }\n         String endpoint = origin.getEndpoint();\n-        if (destServiceId != Const.NONE) {\n-            DetectPoint point = origin.getDetectPoint();\n \n-            if (DetectPoint.client.equals(point)) {\n+        DetectPoint point = origin.getDetectPoint();\n+        if (DetectPoint.client.equals(point)) {\n+            if (sourceServiceId != Const.NONE) {\n                 endpointId = CoreRegisterLinker.getEndpointInventoryRegister().getOrCreate(sourceServiceId, endpoint,\n                     org.apache.skywalking.oap.server.core.source.DetectPoint.fromMeshDetectPoint(point));\n-            } else {\n+            }\n+        } else {\n+            if (destServiceId != Const.NONE) {\n                 endpointId = CoreRegisterLinker.getEndpointInventoryRegister().getOrCreate(destServiceId, endpoint,\n                     org.apache.skywalking.oap.server.core.source.DetectPoint.fromMeshDetectPoint(point));\n             }\n+        }\n \n-            if (endpointId != Const.NONE) {\n-            } else {\n-                isRegistered = false;\n-            }\n+        if (endpointId != Const.NONE) {\n+        } else {\n+            isRegistered = false;\n         }\n \n         return isRegistered;",
                "deletions": 8
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": " FIx NPE in InstanceMetricAlarmAssertWorker (#1614)\n\n* add user\r\n\r\n* add user\r\n\r\n* FIx NPE in InstanceMetricAlarmAssertWorker",
        "commit": "https://github.com/apache/skywalking/commit/9275eeaa7a7b4a8b24955728338a928ad902686d",
        "parent": "https://github.com/apache/skywalking/commit/cfee02cbf5055cf6f105aec05d465ac0e4826f8e",
        "bug_id": "skywalking_14",
        "file": [
            {
                "sha": "c6cd3993218562f5b3df49fbda03f04db30bf8e1",
                "filename": "apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/instance/InstanceMetricAlarmAssertWorker.java",
                "blob_url": "https://github.com/apache/skywalking/blob/9275eeaa7a7b4a8b24955728338a928ad902686d/apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/instance/InstanceMetricAlarmAssertWorker.java",
                "raw_url": "https://github.com/apache/skywalking/raw/9275eeaa7a7b4a8b24955728338a928ad902686d/apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/instance/InstanceMetricAlarmAssertWorker.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/instance/InstanceMetricAlarmAssertWorker.java?ref=9275eeaa7a7b4a8b24955728338a928ad902686d",
                "patch": "@@ -66,7 +66,7 @@ public InstanceMetricAlarmAssertWorker(ModuleManager moduleManager) {\n         Instance instance = instanceDAO.getInstance(alarm.getInstanceId());\n         JsonObject osInfo = gson.fromJson(instance.getOsInfo(), JsonObject.class);\n         String serverName = Const.UNKNOWN;\n-        if (osInfo.has(\"hostName\")) {\n+        if (osInfo != null && osInfo.has(\"hostName\")) {\n             serverName = osInfo.get(\"hostName\").getAsString();\n         }\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "Fixed the NullPointerException in getServerThroughput method.",
        "commit": "https://github.com/apache/skywalking/commit/0006cb4b10072a05c6c2f45d5065ae56272ebc89",
        "parent": "https://github.com/apache/skywalking/commit/da3d993e4ddf969787777c80c55394d3ba5c31ee",
        "bug_id": "skywalking_15",
        "file": [
            {
                "sha": "dd5f3ca0515bbaf605f61217f8558b33090052f9",
                "filename": "apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/main/java/org/apache/skywalking/apm/collector/ui/service/ServerService.java",
                "blob_url": "https://github.com/apache/skywalking/blob/0006cb4b10072a05c6c2f45d5065ae56272ebc89/apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/main/java/org/apache/skywalking/apm/collector/ui/service/ServerService.java",
                "raw_url": "https://github.com/apache/skywalking/raw/0006cb4b10072a05c6c2f45d5065ae56272ebc89/apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/main/java/org/apache/skywalking/apm/collector/ui/service/ServerService.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/main/java/org/apache/skywalking/apm/collector/ui/service/ServerService.java?ref=0006cb4b10072a05c6c2f45d5065ae56272ebc89",
                "patch": "@@ -26,6 +26,7 @@\n import java.util.List;\n import org.apache.skywalking.apm.collector.cache.CacheModule;\n import org.apache.skywalking.apm.collector.cache.service.ApplicationCacheService;\n+import org.apache.skywalking.apm.collector.cache.service.InstanceCacheService;\n import org.apache.skywalking.apm.collector.core.module.ModuleManager;\n import org.apache.skywalking.apm.collector.core.util.Const;\n import org.apache.skywalking.apm.collector.core.util.StringUtils;\n@@ -59,6 +60,7 @@\n     private final IGCMetricUIDAO gcMetricUIDAO;\n     private final IMemoryMetricUIDAO memoryMetricUIDAO;\n     private final ApplicationCacheService applicationCacheService;\n+    private final InstanceCacheService instanceCacheService;\n     private final SecondBetweenService secondBetweenService;\n \n     public ServerService(ModuleManager moduleManager) {\n@@ -68,6 +70,7 @@ public ServerService(ModuleManager moduleManager) {\n         this.gcMetricUIDAO = moduleManager.find(StorageModule.NAME).getService(IGCMetricUIDAO.class);\n         this.memoryMetricUIDAO = moduleManager.find(StorageModule.NAME).getService(IMemoryMetricUIDAO.class);\n         this.applicationCacheService = moduleManager.find(CacheModule.NAME).getService(ApplicationCacheService.class);\n+        this.instanceCacheService = moduleManager.find(CacheModule.NAME).getService(InstanceCacheService.class);\n         this.secondBetweenService = new SecondBetweenService(moduleManager);\n     }\n \n@@ -105,7 +108,8 @@ public ResponseTimeTrend getServerResponseTimeTrend(int instanceId, Step step, l\n \n         List<AppServerInfo> serverThroughput = instanceMetricUIDAO.getServerThroughput(applicationId, step, startTimeBucket, endTimeBucket, secondBetween, topN, MetricSource.Callee);\n         serverThroughput.forEach(appServerInfo -> {\n-            String applicationCode = applicationCacheService.getApplicationById(applicationId).getApplicationCode();\n+            appServerInfo.setApplicationId(instanceCacheService.getApplicationId(appServerInfo.getId()));\n+            String applicationCode = applicationCacheService.getApplicationById(appServerInfo.getApplicationId()).getApplicationCode();\n             appServerInfo.setApplicationCode(applicationCode);\n             Instance instance = instanceUIDAO.getInstance(appServerInfo.getId());\n             appServerInfo.setOsInfo(instance.getOsInfo());",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "Fix Mysql 6.x plugin (#2803)\n\n* fix NPE\r\n\r\n* fix 6.x\r\n\r\n* optimize\r\n\r\n* add final\r\n\r\n* fix ci\r\n\r\n* Update apm-sniffer/apm-sdk-plugin/jdbc-commons/src/main/java/org/apache/skywalking/apm/plugin/jdbc/JDBCDriverInterceptor.java\r\n\r\nadd not null\r\n\r\nCo-Authored-By: Xin,Zhang <zhangxin@apache.org>",
        "commit": "https://github.com/apache/skywalking/commit/8716bb0dc56780093ff3832e2d692f4bae8982bb",
        "parent": "https://github.com/apache/skywalking/commit/f803a2ade32ac27971e306edaaa7df4e4e390dac",
        "bug_id": "skywalking_16",
        "file": [
            {
                "sha": "ef6a2ccabb54f3f658d0131da9a746bba45acfad",
                "filename": "apm-sniffer/apm-sdk-plugin/jdbc-commons/src/main/java/org/apache/skywalking/apm/plugin/jdbc/ConnectionServiceMethodInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/8716bb0dc56780093ff3832e2d692f4bae8982bb/apm-sniffer/apm-sdk-plugin/jdbc-commons/src/main/java/org/apache/skywalking/apm/plugin/jdbc/ConnectionServiceMethodInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/8716bb0dc56780093ff3832e2d692f4bae8982bb/apm-sniffer/apm-sdk-plugin/jdbc-commons/src/main/java/org/apache/skywalking/apm/plugin/jdbc/ConnectionServiceMethodInterceptor.java",
                "status": "modified",
                "changes": 19,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/jdbc-commons/src/main/java/org/apache/skywalking/apm/plugin/jdbc/ConnectionServiceMethodInterceptor.java?ref=8716bb0dc56780093ff3832e2d692f4bae8982bb",
                "patch": "@@ -45,19 +45,24 @@ public final void beforeMethod(EnhancedInstance objInst, Method method, Object[]\n         Class<?>[] argumentsTypes,\n         MethodInterceptResult result) throws Throwable {\n         ConnectionInfo connectInfo = (ConnectionInfo)objInst.getSkyWalkingDynamicField();\n-        AbstractSpan span = ContextManager.createExitSpan(connectInfo.getDBType() + \"/JDBI/Connection/\" + method.getName(), connectInfo.getDatabasePeer());\n-        Tags.DB_TYPE.set(span, \"sql\");\n-        Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());\n-        Tags.DB_STATEMENT.set(span, \"\");\n-        span.setComponent(connectInfo.getComponent());\n-        SpanLayer.asDB(span);\n+        if (connectInfo != null) {\n+            AbstractSpan span = ContextManager.createExitSpan(connectInfo.getDBType() + \"/JDBI/Connection/\" + method.getName(), connectInfo.getDatabasePeer());\n+            Tags.DB_TYPE.set(span, \"sql\");\n+            Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());\n+            Tags.DB_STATEMENT.set(span, \"\");\n+            span.setComponent(connectInfo.getComponent());\n+            SpanLayer.asDB(span);\n+        }\n     }\n \n     @Override\n     public final Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments,\n         Class<?>[] argumentsTypes,\n         Object ret) throws Throwable {\n-        ContextManager.stopSpan();\n+        ConnectionInfo connectInfo = (ConnectionInfo)objInst.getSkyWalkingDynamicField();\n+        if (connectInfo != null) {\n+            ContextManager.stopSpan();\n+        }\n         return ret;\n     }\n ",
                "deletions": 7
            },
            {
                "sha": "1ffe7b98ac8b22d7c8084be1718d0c3d97743a22",
                "filename": "apm-sniffer/apm-sdk-plugin/jdbc-commons/src/main/java/org/apache/skywalking/apm/plugin/jdbc/JDBCDriverInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/8716bb0dc56780093ff3832e2d692f4bae8982bb/apm-sniffer/apm-sdk-plugin/jdbc-commons/src/main/java/org/apache/skywalking/apm/plugin/jdbc/JDBCDriverInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/8716bb0dc56780093ff3832e2d692f4bae8982bb/apm-sniffer/apm-sdk-plugin/jdbc-commons/src/main/java/org/apache/skywalking/apm/plugin/jdbc/JDBCDriverInterceptor.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/jdbc-commons/src/main/java/org/apache/skywalking/apm/plugin/jdbc/JDBCDriverInterceptor.java?ref=8716bb0dc56780093ff3832e2d692f4bae8982bb",
                "patch": "@@ -41,7 +41,7 @@\n \n     @Override public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments,\n         Class<?>[] argumentsTypes, Object ret) throws Throwable {\n-        if (ret != null) {\n+        if (ret != null && ret instanceof EnhancedInstance) {\n             ((EnhancedInstance)ret).setSkyWalkingDynamicField(URLParser.parser((String)allArguments[0]));\n         }\n ",
                "deletions": 1
            },
            {
                "sha": "57050487e58432b22c5a201863bbdd9026c9dac1",
                "filename": "apm-sniffer/apm-sdk-plugin/jdbc-commons/src/main/java/org/apache/skywalking/apm/plugin/jdbc/connectionurl/parser/MysqlURLParser.java",
                "blob_url": "https://github.com/apache/skywalking/blob/8716bb0dc56780093ff3832e2d692f4bae8982bb/apm-sniffer/apm-sdk-plugin/jdbc-commons/src/main/java/org/apache/skywalking/apm/plugin/jdbc/connectionurl/parser/MysqlURLParser.java",
                "raw_url": "https://github.com/apache/skywalking/raw/8716bb0dc56780093ff3832e2d692f4bae8982bb/apm-sniffer/apm-sdk-plugin/jdbc-commons/src/main/java/org/apache/skywalking/apm/plugin/jdbc/connectionurl/parser/MysqlURLParser.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/jdbc-commons/src/main/java/org/apache/skywalking/apm/plugin/jdbc/connectionurl/parser/MysqlURLParser.java?ref=8716bb0dc56780093ff3832e2d692f4bae8982bb",
                "patch": "@@ -84,12 +84,12 @@ public ConnectionInfo parse() {\n             StringBuilder sb = new StringBuilder();\n             for (String host : hostSegment) {\n                 if (host.split(\":\").length == 1) {\n-                    sb.append(host + \":\" + DEFAULT_PORT + \",\");\n+                    sb.append(host).append(\":\").append(DEFAULT_PORT).append(\",\");\n                 } else {\n-                    sb.append(host + \",\");\n+                    sb.append(host).append(\",\");\n                 }\n             }\n-            return new ConnectionInfo(ComponentsDefine.MYSQL_JDBC_DRIVER, DB_TYPE, sb.toString(), fetchDatabaseNameFromURL());\n+            return new ConnectionInfo(ComponentsDefine.MYSQL_JDBC_DRIVER, DB_TYPE, sb.substring(0, sb.length() - 1), fetchDatabaseNameFromURL());\n         } else {\n             String[] hostAndPort = hostSegment[0].split(\":\");\n             if (hostAndPort.length != 1) {",
                "deletions": 3
            },
            {
                "sha": "3eec7b03154943cc32368733cb9f16550854d4e5",
                "filename": "apm-sniffer/apm-sdk-plugin/jdbc-commons/src/test/java/org/apache/skywalking/apm/plugin/jdbc/connectionurl/parser/URLParserTest.java",
                "blob_url": "https://github.com/apache/skywalking/blob/8716bb0dc56780093ff3832e2d692f4bae8982bb/apm-sniffer/apm-sdk-plugin/jdbc-commons/src/test/java/org/apache/skywalking/apm/plugin/jdbc/connectionurl/parser/URLParserTest.java",
                "raw_url": "https://github.com/apache/skywalking/raw/8716bb0dc56780093ff3832e2d692f4bae8982bb/apm-sniffer/apm-sdk-plugin/jdbc-commons/src/test/java/org/apache/skywalking/apm/plugin/jdbc/connectionurl/parser/URLParserTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/jdbc-commons/src/test/java/org/apache/skywalking/apm/plugin/jdbc/connectionurl/parser/URLParserTest.java?ref=8716bb0dc56780093ff3832e2d692f4bae8982bb",
                "patch": "@@ -55,15 +55,15 @@ public void testParseMysqlJDBCURLWithMultiHost() {\n         ConnectionInfo connectionInfo = new URLParser().parser(\"jdbc:mysql//primaryhost:3307,secondaryhost1,secondaryhost2/test?profileSQL=true\");\n         assertThat(connectionInfo.getDBType(), is(\"Mysql\"));\n         assertThat(connectionInfo.getDatabaseName(), is(\"test\"));\n-        assertThat(connectionInfo.getDatabasePeer(), is(\"primaryhost:3307,secondaryhost1:3306,secondaryhost2:3306,\"));\n+        assertThat(connectionInfo.getDatabasePeer(), is(\"primaryhost:3307,secondaryhost1:3306,secondaryhost2:3306\"));\n     }\n \n     @Test\n     public void testParseMysqlJDBCURLWithConnectorJs() {\n         ConnectionInfo connectionInfo = new URLParser().parser(\"jdbc:mysql:replication://master,slave1,slave2,slave3/test\");\n         assertThat(connectionInfo.getDBType(), is(\"Mysql\"));\n         assertThat(connectionInfo.getDatabaseName(), is(\"test\"));\n-        assertThat(connectionInfo.getDatabasePeer(), is(\"master:3306,slave1:3306,slave2:3306,slave3:3306,\"));\n+        assertThat(connectionInfo.getDatabasePeer(), is(\"master:3306,slave1:3306,slave2:3306,slave3:3306\"));\n     }\n \n     @Test",
                "deletions": 2
            },
            {
                "sha": "115ea5d0607f30497716a9521a54b24e4183df5c",
                "filename": "apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v5/ConnectionCreate5xInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/8716bb0dc56780093ff3832e2d692f4bae8982bb/apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v5/ConnectionCreate5xInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/8716bb0dc56780093ff3832e2d692f4bae8982bb/apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v5/ConnectionCreate5xInterceptor.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v5/ConnectionCreate5xInterceptor.java?ref=8716bb0dc56780093ff3832e2d692f4bae8982bb",
                "patch": "@@ -22,6 +22,7 @@\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;\n import org.apache.skywalking.apm.plugin.jdbc.connectionurl.parser.URLParser;\n+import org.apache.skywalking.apm.plugin.jdbc.mysql.ConnectionCache;\n import org.apache.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;\n \n import java.lang.reflect.Method;",
                "deletions": 0
            },
            {
                "sha": "28dfd3974db01de1babce56339a6848dd4b7f420",
                "filename": "apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v5/define/CacheIpsInstrumentation.java",
                "blob_url": "https://github.com/apache/skywalking/blob/8716bb0dc56780093ff3832e2d692f4bae8982bb/apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v5/define/CacheIpsInstrumentation.java",
                "raw_url": "https://github.com/apache/skywalking/raw/8716bb0dc56780093ff3832e2d692f4bae8982bb/apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v5/define/CacheIpsInstrumentation.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v5/define/CacheIpsInstrumentation.java?ref=8716bb0dc56780093ff3832e2d692f4bae8982bb",
                "patch": "@@ -26,6 +26,7 @@\n \n import static net.bytebuddy.matcher.ElementMatchers.named;\n import static org.apache.skywalking.apm.agent.core.plugin.match.MultiClassNameMatch.byMultiClassMatch;\n+import static org.apache.skywalking.apm.plugin.jdbc.mysql.Constants.DRIVER_CONNECT_INTERCEPTOR;\n \n /**\n  * @author: dingshaocheng\n@@ -35,7 +36,6 @@\n     private static final String ENHANCE_CLASS_NON_REG_REP = \"com.mysql.jdbc.NonRegisteringReplicationDriver\";\n     private static final String ENHANCE_CLASS = \"com.mysql.jdbc.Driver\";\n     private static final String ENHANCE_CLASS_NON_REG = \"com.mysql.jdbc.NonRegisteringDriver\";\n-    private static final String METHOD_INTERCEPTOR_CLASS = \"org.apache.skywalking.apm.plugin.jdbc.mysql.v5.DriverConnectInterceptor\";\n \n \n     @Override\n@@ -54,7 +54,7 @@\n \n                 @Override\n                 public String getMethodsInterceptor() {\n-                    return METHOD_INTERCEPTOR_CLASS;\n+                    return DRIVER_CONNECT_INTERCEPTOR;\n                 }\n \n                 @Override",
                "deletions": 2
            },
            {
                "sha": "e7a5adf35cadc42a046a2367756ecf0d2a1cd967",
                "filename": "apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/ConnectionCreateNewInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/8716bb0dc56780093ff3832e2d692f4bae8982bb/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/ConnectionCreateNewInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/8716bb0dc56780093ff3832e2d692f4bae8982bb/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/ConnectionCreateNewInterceptor.java",
                "status": "renamed",
                "changes": 46,
                "additions": 24,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/ConnectionCreateNewInterceptor.java?ref=8716bb0dc56780093ff3832e2d692f4bae8982bb",
                "patch": "@@ -6,49 +6,51 @@\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n  */\n \n package org.apache.skywalking.apm.plugin.jdbc.mysql.v6;\n \n-import com.mysql.cj.api.jdbc.JdbcConnection;\n-import com.mysql.cj.core.conf.url.ConnectionUrl;\n import com.mysql.cj.core.conf.url.HostInfo;\n-import java.lang.reflect.Method;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;\n-import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n-import org.apache.skywalking.apm.plugin.jdbc.mysql.v6.wrapper.JdbcConnectionWrapper;\n+import org.apache.skywalking.apm.plugin.jdbc.connectionurl.parser.URLParser;\n import org.apache.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;\n \n-public class CreateJdbcConnectionProxyInstanceInterceptor implements StaticMethodsAroundInterceptor {\n+import java.lang.reflect.Method;\n+\n+/**\n+ * for mysql connector java 6.0.4+\n+ * @author lican\n+ */\n+public class ConnectionCreateNewInterceptor implements StaticMethodsAroundInterceptor {\n+\n+\n     @Override\n-    public void beforeMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n-        MethodInterceptResult result) {\n+    public void beforeMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, MethodInterceptResult result) {\n+\n     }\n \n     @Override\n-    public Object afterMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n-        Object ret) {\n-        ConnectionUrl connectionUrl = (ConnectionUrl)allArguments[0];\n-\n-        StringBuilder hosts = new StringBuilder();\n-        for (HostInfo info : connectionUrl.getHostsList()) {\n-            hosts.append(info.getHost()).append(\":\").append(info.getPort()).append(\",\");\n+    public Object afterMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, Object ret) {\n+        if (ret instanceof EnhancedInstance) {\n+            final HostInfo hostInfo = (HostInfo) allArguments[0];\n+            ConnectionInfo connectionInfo = URLParser.parser(hostInfo.getDatabaseUrl());\n+            ((EnhancedInstance) ret).setSkyWalkingDynamicField(connectionInfo);\n         }\n-        ConnectionInfo connectionInfo = new ConnectionInfo(ComponentsDefine.MYSQL_JDBC_DRIVER, \"Mysql\", hosts.toString(), connectionUrl.getDatabase());\n-        return new JdbcConnectionWrapper((JdbcConnection)ret, connectionInfo);\n+        return ret;\n     }\n \n     @Override\n-    public void handleMethodException(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n-        Throwable t) {\n+    public void handleMethodException(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, Throwable t) {\n \n     }\n }",
                "deletions": 22,
                "previous_filename": "apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/CreateJdbcConnectionProxyInstanceInterceptor.java"
            },
            {
                "sha": "65cc785881813a49910722d405f2c1bdcad0e508",
                "filename": "apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/ConnectionCreateOldInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/8716bb0dc56780093ff3832e2d692f4bae8982bb/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/ConnectionCreateOldInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/8716bb0dc56780093ff3832e2d692f4bae8982bb/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/ConnectionCreateOldInterceptor.java",
                "status": "added",
                "changes": 54,
                "additions": 54,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/ConnectionCreateOldInterceptor.java?ref=8716bb0dc56780093ff3832e2d692f4bae8982bb",
                "patch": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.jdbc.mysql.v6;\n+\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.plugin.jdbc.mysql.ConnectionCache;\n+import org.apache.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;\n+\n+import java.lang.reflect.Method;\n+\n+/**\n+ * for mysql connector java 6.0.2,6.0.3\n+ * @author lican\n+ */\n+public class ConnectionCreateOldInterceptor implements StaticMethodsAroundInterceptor {\n+\n+\n+    @Override\n+    public void beforeMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, MethodInterceptResult result) {\n+\n+    }\n+\n+    @Override\n+    public Object afterMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, Object ret) {\n+        if (ret instanceof EnhancedInstance) {\n+            ConnectionInfo connectionInfo = ConnectionCache.get(allArguments[1].toString(), allArguments[2].toString());\n+            ((EnhancedInstance) ret).setSkyWalkingDynamicField(connectionInfo);\n+        }\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, Throwable t) {\n+\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "a48146573e124cf74f63a8cde7f839763586c8f1",
                "filename": "apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/CreateLoadBalancedConnectionProxyInstanceInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/f803a2ade32ac27971e306edaaa7df4e4e390dac/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/CreateLoadBalancedConnectionProxyInstanceInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/f803a2ade32ac27971e306edaaa7df4e4e390dac/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/CreateLoadBalancedConnectionProxyInstanceInterceptor.java",
                "status": "removed",
                "changes": 53,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/CreateLoadBalancedConnectionProxyInstanceInterceptor.java?ref=f803a2ade32ac27971e306edaaa7df4e4e390dac",
                "patch": "@@ -1,53 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-\n-package org.apache.skywalking.apm.plugin.jdbc.mysql.v6;\n-\n-import com.mysql.cj.api.jdbc.ha.LoadBalancedConnection;\n-import com.mysql.cj.core.conf.url.ConnectionUrl;\n-import com.mysql.cj.core.conf.url.HostInfo;\n-import java.lang.reflect.Method;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;\n-import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n-import org.apache.skywalking.apm.plugin.jdbc.mysql.v6.wrapper.LoadBalancedConnectionWrapper;\n-import org.apache.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;\n-\n-public class CreateLoadBalancedConnectionProxyInstanceInterceptor implements StaticMethodsAroundInterceptor {\n-    @Override public void beforeMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n-        MethodInterceptResult result) {\n-\n-    }\n-\n-    @Override public Object afterMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n-        Object ret) {\n-        ConnectionUrl connectionUrl = (ConnectionUrl)allArguments[0];\n-\n-        StringBuilder hosts = new StringBuilder();\n-        for (HostInfo info : connectionUrl.getHostsList()) {\n-            hosts.append(info.getHost()).append(\":\").append(info.getPort()).append(\",\");\n-        }\n-        ConnectionInfo connectionInfo = new ConnectionInfo(ComponentsDefine.MYSQL_JDBC_DRIVER, \"Mysql\", hosts.toString(), connectionUrl.getDatabase());\n-        return new LoadBalancedConnectionWrapper((LoadBalancedConnection)ret, connectionInfo);\n-    }\n-\n-    @Override\n-    public void handleMethodException(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n-        Throwable t) {\n-\n-    }\n-}",
                "deletions": 53
            },
            {
                "sha": "7c0aaa7cbd51590194ce9c9440b87eeb22263fc5",
                "filename": "apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/CreateReplicationConnectionProxyInstanceInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/f803a2ade32ac27971e306edaaa7df4e4e390dac/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/CreateReplicationConnectionProxyInstanceInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/f803a2ade32ac27971e306edaaa7df4e4e390dac/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/CreateReplicationConnectionProxyInstanceInterceptor.java",
                "status": "removed",
                "changes": 53,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/CreateReplicationConnectionProxyInstanceInterceptor.java?ref=f803a2ade32ac27971e306edaaa7df4e4e390dac",
                "patch": "@@ -1,53 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-\n-package org.apache.skywalking.apm.plugin.jdbc.mysql.v6;\n-\n-import com.mysql.cj.api.jdbc.ha.ReplicationConnection;\n-import com.mysql.cj.core.conf.url.ConnectionUrl;\n-import com.mysql.cj.core.conf.url.HostInfo;\n-import java.lang.reflect.Method;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;\n-import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n-import org.apache.skywalking.apm.plugin.jdbc.mysql.v6.wrapper.ReplicationConnectionWrapper;\n-import org.apache.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;\n-\n-public class CreateReplicationConnectionProxyInstanceInterceptor implements StaticMethodsAroundInterceptor {\n-    @Override public void beforeMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n-        MethodInterceptResult result) {\n-\n-    }\n-\n-    @Override public Object afterMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n-        Object ret) {\n-        ConnectionUrl connectionUrl = (ConnectionUrl)allArguments[0];\n-\n-        StringBuilder hosts = new StringBuilder();\n-        for (HostInfo info : connectionUrl.getHostsList()) {\n-            hosts.append(info.getHost()).append(\":\").append(info.getPort()).append(\",\");\n-        }\n-        ConnectionInfo connectionInfo = new ConnectionInfo(ComponentsDefine.MYSQL_JDBC_DRIVER, \"Mysql\", hosts.toString(), connectionUrl.getDatabase());\n-        return new ReplicationConnectionWrapper((ReplicationConnection)ret, connectionInfo);\n-    }\n-\n-    @Override\n-    public void handleMethodException(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n-        Throwable t) {\n-\n-    }\n-}",
                "deletions": 53
            },
            {
                "sha": "c7b2240d8057f1e9defa410da31f89fe6bc2f316",
                "filename": "apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/CacheIpsInstrumentation.java",
                "blob_url": "https://github.com/apache/skywalking/blob/8716bb0dc56780093ff3832e2d692f4bae8982bb/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/CacheIpsInstrumentation.java",
                "raw_url": "https://github.com/apache/skywalking/raw/8716bb0dc56780093ff3832e2d692f4bae8982bb/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/CacheIpsInstrumentation.java",
                "status": "added",
                "changes": 69,
                "additions": 69,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/CacheIpsInstrumentation.java?ref=8716bb0dc56780093ff3832e2d692f4bae8982bb",
                "patch": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.jdbc.mysql.v6.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static org.apache.skywalking.apm.agent.core.plugin.match.MultiClassNameMatch.byMultiClassMatch;\n+import static org.apache.skywalking.apm.plugin.jdbc.mysql.Constants.DRIVER_CONNECT_INTERCEPTOR;\n+\n+/**\n+ * @author dingshaocheng lican\n+ */\n+public class CacheIpsInstrumentation extends AbstractMysqlInstrumentation {\n+\n+    private static final String ENHANCE_CLASS_NON_REG = \"com.mysql.cj.jdbc.NonRegisteringDriver\";\n+\n+\n+    @Override\n+    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {\n+        return new ConstructorInterceptPoint[0];\n+    }\n+\n+    @Override\n+    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {\n+        return new InstanceMethodsInterceptPoint[]{new InstanceMethodsInterceptPoint() {\n+            @Override\n+            public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                return named(\"connect\");\n+            }\n+\n+            @Override\n+            public String getMethodsInterceptor() {\n+                return DRIVER_CONNECT_INTERCEPTOR;\n+            }\n+\n+            @Override\n+            public boolean isOverrideArgs() {\n+                return false;\n+            }\n+        }\n+        };\n+    }\n+\n+    @Override\n+    protected ClassMatch enhanceClass() {\n+        return byMultiClassMatch(ENHANCE_CLASS_NON_REG);\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "454a31bc71cda1e9d5d29abf1db1080efdd24622",
                "filename": "apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/ConnectionImplCreateInstrumentation.java",
                "blob_url": "https://github.com/apache/skywalking/blob/8716bb0dc56780093ff3832e2d692f4bae8982bb/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/ConnectionImplCreateInstrumentation.java",
                "raw_url": "https://github.com/apache/skywalking/raw/8716bb0dc56780093ff3832e2d692f4bae8982bb/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/ConnectionImplCreateInstrumentation.java",
                "status": "added",
                "changes": 89,
                "additions": 89,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/ConnectionImplCreateInstrumentation.java?ref=8716bb0dc56780093ff3832e2d692f4bae8982bb",
                "patch": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+\n+package org.apache.skywalking.apm.plugin.jdbc.mysql.v6.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.StaticMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;\n+\n+/**\n+ * interceptor the method {@link com.mysql.cj.jdbc.ConnectionImpl#getInstance} for mysql client version 6.x\n+ *\n+ * @author dingshaocheng lican\n+ */\n+public class ConnectionImplCreateInstrumentation extends AbstractMysqlInstrumentation {\n+\n+    private static final String JDBC_ENHANCE_CLASS = \"com.mysql.cj.jdbc.ConnectionImpl\";\n+\n+    private static final String CONNECT_METHOD = \"getInstance\";\n+\n+    private static final String GET_INSTANCE_NEW_INTERCEPTOR = \"org.apache.skywalking.apm.plugin.jdbc.mysql.v6.ConnectionCreateNewInterceptor\";\n+\n+    private static final String GET_INSTANCE_OLD_INTERCEPTOR = \"org.apache.skywalking.apm.plugin.jdbc.mysql.v6.ConnectionCreateOldInterceptor\";\n+\n+\n+    @Override\n+    protected StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {\n+        return new StaticMethodsInterceptPoint[]{\n+            new StaticMethodsInterceptPoint() {\n+                @Override\n+                public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                    return named(CONNECT_METHOD).and(takesArguments(1));\n+                }\n+\n+                @Override\n+                public String getMethodsInterceptor() {\n+                    return GET_INSTANCE_NEW_INTERCEPTOR;\n+                }\n+\n+                @Override\n+                public boolean isOverrideArgs() {\n+                    return false;\n+                }\n+            },\n+            new StaticMethodsInterceptPoint() {\n+                @Override\n+                public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                    return named(CONNECT_METHOD).and(takesArguments(4));\n+                }\n+\n+                @Override\n+                public String getMethodsInterceptor() {\n+                    return GET_INSTANCE_OLD_INTERCEPTOR;\n+                }\n+\n+                @Override\n+                public boolean isOverrideArgs() {\n+                    return false;\n+                }\n+            }\n+        };\n+    }\n+\n+    @Override\n+    protected ClassMatch enhanceClass() {\n+        return byName(JDBC_ENHANCE_CLASS);\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "c1f9271e06e0c99041177f35fcf4688a6e384352",
                "filename": "apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/FailoverConnectionProxyInstrumentation.java",
                "blob_url": "https://github.com/apache/skywalking/blob/f803a2ade32ac27971e306edaaa7df4e4e390dac/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/FailoverConnectionProxyInstrumentation.java",
                "raw_url": "https://github.com/apache/skywalking/raw/f803a2ade32ac27971e306edaaa7df4e4e390dac/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/FailoverConnectionProxyInstrumentation.java",
                "status": "removed",
                "changes": 57,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/FailoverConnectionProxyInstrumentation.java?ref=f803a2ade32ac27971e306edaaa7df4e4e390dac",
                "patch": "@@ -1,57 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-\n-package org.apache.skywalking.apm.plugin.jdbc.mysql.v6.define;\n-\n-import net.bytebuddy.description.method.MethodDescription;\n-import net.bytebuddy.matcher.ElementMatcher;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.StaticMethodsInterceptPoint;\n-import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n-\n-import static net.bytebuddy.matcher.ElementMatchers.named;\n-import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;\n-\n-public class FailoverConnectionProxyInstrumentation extends AbstractMysqlInstrumentation {\n-\n-    public static final String METHOD_INTERCEPTOR = \"org.apache.skywalking.apm.plugin.jdbc.mysql.v6.CreateJdbcConnectionProxyInstanceInterceptor\";\n-    public static final String INTERCEPT_CLASS = \"com.mysql.cj.jdbc.ha.FailoverConnectionProxy\";\n-\n-    @Override\n-    protected StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {\n-        return new StaticMethodsInterceptPoint[] {\n-            new StaticMethodsInterceptPoint() {\n-                @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {\n-                    return named(\"createProxyInstance\");\n-                }\n-\n-                @Override public String getMethodsInterceptor() {\n-                    return METHOD_INTERCEPTOR;\n-                }\n-\n-                @Override public boolean isOverrideArgs() {\n-                    return false;\n-                }\n-            }\n-        };\n-    }\n-\n-    @Override\n-    protected ClassMatch enhanceClass() {\n-        return byName(INTERCEPT_CLASS);\n-    }\n-\n-}",
                "deletions": 57
            },
            {
                "sha": "842daa45f77cfa47de470c2d38750e4e4401e0e2",
                "filename": "apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/LoadBalancedConnectionProxyInstrumentation.java",
                "blob_url": "https://github.com/apache/skywalking/blob/f803a2ade32ac27971e306edaaa7df4e4e390dac/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/LoadBalancedConnectionProxyInstrumentation.java",
                "raw_url": "https://github.com/apache/skywalking/raw/f803a2ade32ac27971e306edaaa7df4e4e390dac/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/LoadBalancedConnectionProxyInstrumentation.java",
                "status": "removed",
                "changes": 55,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/LoadBalancedConnectionProxyInstrumentation.java?ref=f803a2ade32ac27971e306edaaa7df4e4e390dac",
                "patch": "@@ -1,55 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-\n-package org.apache.skywalking.apm.plugin.jdbc.mysql.v6.define;\n-\n-import net.bytebuddy.description.method.MethodDescription;\n-import net.bytebuddy.matcher.ElementMatcher;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.StaticMethodsInterceptPoint;\n-import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n-\n-import static net.bytebuddy.matcher.ElementMatchers.named;\n-import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;\n-\n-public class LoadBalancedConnectionProxyInstrumentation extends AbstractMysqlInstrumentation {\n-\n-    public static final String METHOD_INTERCEPTOR = \"org.apache.skywalking.apm.plugin.jdbc.mysql.v6.CreateLoadBalancedConnectionProxyInstanceInterceptor\";\n-    public static final String INTERCEPT_CLASS = \"com.mysql.cj.jdbc.ha.LoadBalancedConnectionProxy\";\n-\n-    @Override protected StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {\n-        return new StaticMethodsInterceptPoint[] {\n-            new StaticMethodsInterceptPoint() {\n-                @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {\n-                    return named(\"createProxyInstance\");\n-                }\n-\n-                @Override public String getMethodsInterceptor() {\n-                    return METHOD_INTERCEPTOR;\n-                }\n-\n-                @Override public boolean isOverrideArgs() {\n-                    return false;\n-                }\n-            }\n-        };\n-    }\n-\n-    @Override protected ClassMatch enhanceClass() {\n-        return byName(INTERCEPT_CLASS);\n-    }\n-\n-}",
                "deletions": 55
            },
            {
                "sha": "3077bd3b2ef3db8e45b902d15b74f5bb8c38c314",
                "filename": "apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/ReplicationConnectionProxyInstrumentation.java",
                "blob_url": "https://github.com/apache/skywalking/blob/f803a2ade32ac27971e306edaaa7df4e4e390dac/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/ReplicationConnectionProxyInstrumentation.java",
                "raw_url": "https://github.com/apache/skywalking/raw/f803a2ade32ac27971e306edaaa7df4e4e390dac/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/ReplicationConnectionProxyInstrumentation.java",
                "status": "removed",
                "changes": 54,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/ReplicationConnectionProxyInstrumentation.java?ref=f803a2ade32ac27971e306edaaa7df4e4e390dac",
                "patch": "@@ -1,54 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-\n-package org.apache.skywalking.apm.plugin.jdbc.mysql.v6.define;\n-\n-import net.bytebuddy.description.method.MethodDescription;\n-import net.bytebuddy.matcher.ElementMatcher;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.StaticMethodsInterceptPoint;\n-import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n-\n-import static net.bytebuddy.matcher.ElementMatchers.named;\n-import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;\n-\n-public class ReplicationConnectionProxyInstrumentation extends AbstractMysqlInstrumentation {\n-\n-    public static final String METHOD_INTERCEPTOR = \"org.apache.skywalking.apm.plugin.jdbc.mysql.v6.CreateReplicationConnectionProxyInstanceInterceptor\";\n-    public static final String INTERCEPT_CLASS = \"com.mysql.cj.jdbc.ha.ReplicationConnectionProxy\";\n-\n-    @Override protected StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {\n-        return new StaticMethodsInterceptPoint[] {\n-            new StaticMethodsInterceptPoint() {\n-                @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {\n-                    return named(\"createProxyInstance\");\n-                }\n-\n-                @Override public String getMethodsInterceptor() {\n-                    return METHOD_INTERCEPTOR;\n-                }\n-\n-                @Override public boolean isOverrideArgs() {\n-                    return false;\n-                }\n-            }\n-        };\n-    }\n-\n-    @Override protected ClassMatch enhanceClass() {\n-        return byName(INTERCEPT_CLASS);\n-    }\n-}",
                "deletions": 54
            },
            {
                "sha": "78811f7e8efa0c9187b148a3a5ede76f6c33fd02",
                "filename": "apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/CallableStatementWrapper.java",
                "blob_url": "https://github.com/apache/skywalking/blob/f803a2ade32ac27971e306edaaa7df4e4e390dac/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/CallableStatementWrapper.java",
                "raw_url": "https://github.com/apache/skywalking/raw/f803a2ade32ac27971e306edaaa7df4e4e390dac/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/CallableStatementWrapper.java",
                "status": "removed",
                "changes": 539,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/CallableStatementWrapper.java?ref=f803a2ade32ac27971e306edaaa7df4e4e390dac",
                "patch": "@@ -1,539 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-\n-package org.apache.skywalking.apm.plugin.jdbc.mysql.v6.wrapper;\n-\n-import java.io.InputStream;\n-import java.io.Reader;\n-import java.math.BigDecimal;\n-import java.net.URL;\n-import java.sql.Array;\n-import java.sql.Blob;\n-import java.sql.CallableStatement;\n-import java.sql.Clob;\n-import java.sql.Date;\n-import java.sql.NClob;\n-import java.sql.Ref;\n-import java.sql.RowId;\n-import java.sql.SQLException;\n-import java.sql.SQLType;\n-import java.sql.SQLXML;\n-import java.sql.Time;\n-import java.sql.Timestamp;\n-import java.util.Calendar;\n-import java.util.Map;\n-import org.apache.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;\n-\n-public class CallableStatementWrapper extends PreparedStatementWrapper implements CallableStatement {\n-\n-    @Override public void registerOutParameter(int parameterIndex, int sqlType) throws SQLException {\n-        call.registerOutParameter(parameterIndex, sqlType);\n-    }\n-\n-    @Override public void registerOutParameter(int parameterIndex, int sqlType, int scale) throws SQLException {\n-        call.registerOutParameter(parameterIndex, sqlType, scale);\n-    }\n-\n-    @Override public boolean wasNull() throws SQLException {\n-        return call.wasNull();\n-    }\n-\n-    @Override public String getString(int parameterIndex) throws SQLException {\n-        return call.getString(parameterIndex);\n-    }\n-\n-    @Override public boolean getBoolean(int parameterIndex) throws SQLException {\n-        return call.getBoolean(parameterIndex);\n-    }\n-\n-    @Override public byte getByte(int parameterIndex) throws SQLException {\n-        return call.getByte(parameterIndex);\n-    }\n-\n-    @Override public short getShort(int parameterIndex) throws SQLException {\n-        return call.getShort(parameterIndex);\n-    }\n-\n-    @Override public int getInt(int parameterIndex) throws SQLException {\n-        return call.getInt(parameterIndex);\n-    }\n-\n-    @Override public long getLong(int parameterIndex) throws SQLException {\n-        return call.getLong(parameterIndex);\n-    }\n-\n-    @Override public float getFloat(int parameterIndex) throws SQLException {\n-        return call.getFloat(parameterIndex);\n-    }\n-\n-    @Override public double getDouble(int parameterIndex) throws SQLException {\n-        return call.getDouble(parameterIndex);\n-    }\n-\n-    @Override @Deprecated public BigDecimal getBigDecimal(int parameterIndex, int scale) throws SQLException {\n-        return call.getBigDecimal(parameterIndex, scale);\n-    }\n-\n-    @Override public byte[] getBytes(int parameterIndex) throws SQLException {\n-        return call.getBytes(parameterIndex);\n-    }\n-\n-    @Override public Date getDate(int parameterIndex) throws SQLException {\n-        return call.getDate(parameterIndex);\n-    }\n-\n-    @Override public Time getTime(int parameterIndex) throws SQLException {\n-        return call.getTime(parameterIndex);\n-    }\n-\n-    @Override public Timestamp getTimestamp(int parameterIndex) throws SQLException {\n-        return call.getTimestamp(parameterIndex);\n-    }\n-\n-    @Override public Object getObject(int parameterIndex) throws SQLException {\n-        return call.getObject(parameterIndex);\n-    }\n-\n-    @Override public BigDecimal getBigDecimal(int parameterIndex) throws SQLException {\n-        return call.getBigDecimal(parameterIndex);\n-    }\n-\n-    @Override public Object getObject(int parameterIndex, Map<String, Class<?>> map) throws SQLException {\n-        return call.getObject(parameterIndex, map);\n-    }\n-\n-    @Override public Ref getRef(int parameterIndex) throws SQLException {\n-        return call.getRef(parameterIndex);\n-    }\n-\n-    @Override public Blob getBlob(int parameterIndex) throws SQLException {\n-        return call.getBlob(parameterIndex);\n-    }\n-\n-    @Override public Clob getClob(int parameterIndex) throws SQLException {\n-        return call.getClob(parameterIndex);\n-    }\n-\n-    @Override public Array getArray(int parameterIndex) throws SQLException {\n-        return call.getArray(parameterIndex);\n-    }\n-\n-    @Override public Date getDate(int parameterIndex, Calendar cal) throws SQLException {\n-        return call.getDate(parameterIndex, cal);\n-    }\n-\n-    @Override public Time getTime(int parameterIndex, Calendar cal) throws SQLException {\n-        return call.getTime(parameterIndex, cal);\n-    }\n-\n-    @Override public Timestamp getTimestamp(int parameterIndex, Calendar cal) throws SQLException {\n-        return call.getTimestamp(parameterIndex, cal);\n-    }\n-\n-    @Override public void registerOutParameter(int parameterIndex, int sqlType, String typeName) throws SQLException {\n-        call.registerOutParameter(parameterIndex, sqlType, typeName);\n-    }\n-\n-    @Override public void registerOutParameter(String parameterName, int sqlType) throws SQLException {\n-        call.registerOutParameter(parameterName, sqlType);\n-    }\n-\n-    @Override public void registerOutParameter(String parameterName, int sqlType, int scale) throws SQLException {\n-        call.registerOutParameter(parameterName, sqlType, scale);\n-    }\n-\n-    @Override public void registerOutParameter(String parameterName, int sqlType, String typeName) throws SQLException {\n-        call.registerOutParameter(parameterName, sqlType, typeName);\n-    }\n-\n-    @Override public URL getURL(int parameterIndex) throws SQLException {\n-        return call.getURL(parameterIndex);\n-    }\n-\n-    @Override public void setURL(String parameterName, URL val) throws SQLException {\n-        call.setURL(parameterName, val);\n-    }\n-\n-    @Override public void setNull(String parameterName, int sqlType) throws SQLException {\n-        call.setNull(parameterName, sqlType);\n-    }\n-\n-    @Override public void setBoolean(String parameterName, boolean x) throws SQLException {\n-        call.setBoolean(parameterName, x);\n-    }\n-\n-    @Override public void setByte(String parameterName, byte x) throws SQLException {\n-        call.setByte(parameterName, x);\n-    }\n-\n-    @Override public void setShort(String parameterName, short x) throws SQLException {\n-        call.setShort(parameterName, x);\n-    }\n-\n-    @Override public void setInt(String parameterName, int x) throws SQLException {\n-        call.setInt(parameterName, x);\n-    }\n-\n-    @Override public void setLong(String parameterName, long x) throws SQLException {\n-        call.setLong(parameterName, x);\n-    }\n-\n-    @Override public void setFloat(String parameterName, float x) throws SQLException {\n-        call.setFloat(parameterName, x);\n-    }\n-\n-    @Override public void setDouble(String parameterName, double x) throws SQLException {\n-        call.setDouble(parameterName, x);\n-    }\n-\n-    @Override public void setBigDecimal(String parameterName, BigDecimal x) throws SQLException {\n-        call.setBigDecimal(parameterName, x);\n-    }\n-\n-    @Override public void setString(String parameterName, String x) throws SQLException {\n-        call.setString(parameterName, x);\n-    }\n-\n-    @Override public void setBytes(String parameterName, byte[] x) throws SQLException {\n-        call.setBytes(parameterName, x);\n-    }\n-\n-    @Override public void setDate(String parameterName, Date x) throws SQLException {\n-        call.setDate(parameterName, x);\n-    }\n-\n-    @Override public void setTime(String parameterName, Time x) throws SQLException {\n-        call.setTime(parameterName, x);\n-    }\n-\n-    @Override public void setTimestamp(String parameterName, Timestamp x) throws SQLException {\n-        call.setTimestamp(parameterName, x);\n-    }\n-\n-    @Override public void setAsciiStream(String parameterName, InputStream x, int length) throws SQLException {\n-        call.setAsciiStream(parameterName, x, length);\n-    }\n-\n-    @Override public void setBinaryStream(String parameterName, InputStream x, int length) throws SQLException {\n-        call.setBinaryStream(parameterName, x, length);\n-    }\n-\n-    @Override public void setObject(String parameterName, Object x, int targetSqlType, int scale) throws SQLException {\n-        call.setObject(parameterName, x, targetSqlType, scale);\n-    }\n-\n-    @Override public void setObject(String parameterName, Object x, int targetSqlType) throws SQLException {\n-        call.setObject(parameterName, x, targetSqlType);\n-    }\n-\n-    @Override public void setObject(String parameterName, Object x) throws SQLException {\n-        call.setObject(parameterName, x);\n-    }\n-\n-    @Override public void setCharacterStream(String parameterName, Reader reader, int length) throws SQLException {\n-        call.setCharacterStream(parameterName, reader, length);\n-    }\n-\n-    @Override public void setDate(String parameterName, Date x, Calendar cal) throws SQLException {\n-        call.setDate(parameterName, x, cal);\n-    }\n-\n-    @Override public void setTime(String parameterName, Time x, Calendar cal) throws SQLException {\n-        call.setTime(parameterName, x, cal);\n-    }\n-\n-    @Override public void setTimestamp(String parameterName, Timestamp x, Calendar cal) throws SQLException {\n-        call.setTimestamp(parameterName, x, cal);\n-    }\n-\n-    @Override public void setNull(String parameterName, int sqlType, String typeName) throws SQLException {\n-        call.setNull(parameterName, sqlType, typeName);\n-    }\n-\n-    @Override public String getString(String parameterName) throws SQLException {\n-        return call.getString(parameterName);\n-    }\n-\n-    @Override public boolean getBoolean(String parameterName) throws SQLException {\n-        return call.getBoolean(parameterName);\n-    }\n-\n-    @Override public byte getByte(String parameterName) throws SQLException {\n-        return call.getByte(parameterName);\n-    }\n-\n-    @Override public short getShort(String parameterName) throws SQLException {\n-        return call.getShort(parameterName);\n-    }\n-\n-    @Override public int getInt(String parameterName) throws SQLException {\n-        return call.getInt(parameterName);\n-    }\n-\n-    @Override public long getLong(String parameterName) throws SQLException {\n-        return call.getLong(parameterName);\n-    }\n-\n-    @Override public float getFloat(String parameterName) throws SQLException {\n-        return call.getFloat(parameterName);\n-    }\n-\n-    @Override public double getDouble(String parameterName) throws SQLException {\n-        return call.getDouble(parameterName);\n-    }\n-\n-    @Override public byte[] getBytes(String parameterName) throws SQLException {\n-        return call.getBytes(parameterName);\n-    }\n-\n-    @Override public Date getDate(String parameterName) throws SQLException {\n-        return call.getDate(parameterName);\n-    }\n-\n-    @Override public Time getTime(String parameterName) throws SQLException {\n-        return call.getTime(parameterName);\n-    }\n-\n-    @Override public Timestamp getTimestamp(String parameterName) throws SQLException {\n-        return call.getTimestamp(parameterName);\n-    }\n-\n-    @Override public Object getObject(String parameterName) throws SQLException {\n-        return call.getObject(parameterName);\n-    }\n-\n-    @Override public BigDecimal getBigDecimal(String parameterName) throws SQLException {\n-        return call.getBigDecimal(parameterName);\n-    }\n-\n-    @Override public Object getObject(String parameterName, Map<String, Class<?>> map) throws SQLException {\n-        return call.getObject(parameterName, map);\n-    }\n-\n-    @Override public Ref getRef(String parameterName) throws SQLException {\n-        return call.getRef(parameterName);\n-    }\n-\n-    @Override public Blob getBlob(String parameterName) throws SQLException {\n-        return call.getBlob(parameterName);\n-    }\n-\n-    @Override public Clob getClob(String parameterName) throws SQLException {\n-        return call.getClob(parameterName);\n-    }\n-\n-    @Override public Array getArray(String parameterName) throws SQLException {\n-        return call.getArray(parameterName);\n-    }\n-\n-    @Override public Date getDate(String parameterName, Calendar cal) throws SQLException {\n-        return call.getDate(parameterName, cal);\n-    }\n-\n-    @Override public Time getTime(String parameterName, Calendar cal) throws SQLException {\n-        return call.getTime(parameterName, cal);\n-    }\n-\n-    @Override public Timestamp getTimestamp(String parameterName, Calendar cal) throws SQLException {\n-        return call.getTimestamp(parameterName, cal);\n-    }\n-\n-    @Override public URL getURL(String parameterName) throws SQLException {\n-        return call.getURL(parameterName);\n-    }\n-\n-    @Override public RowId getRowId(int parameterIndex) throws SQLException {\n-        return call.getRowId(parameterIndex);\n-    }\n-\n-    @Override public RowId getRowId(String parameterName) throws SQLException {\n-        return call.getRowId(parameterName);\n-    }\n-\n-    @Override public void setRowId(String parameterName, RowId x) throws SQLException {\n-        call.setRowId(parameterName, x);\n-    }\n-\n-    @Override public void setNString(String parameterName, String value) throws SQLException {\n-        call.setNString(parameterName, value);\n-    }\n-\n-    @Override public void setNCharacterStream(String parameterName, Reader value, long length) throws SQLException {\n-        call.setNCharacterStream(parameterName, value, length);\n-    }\n-\n-    @Override public void setNClob(String parameterName, NClob value) throws SQLException {\n-        call.setNClob(parameterName, value);\n-    }\n-\n-    @Override public void setClob(String parameterName, Reader reader, long length) throws SQLException {\n-        call.setClob(parameterName, reader, length);\n-    }\n-\n-    @Override public void setBlob(String parameterName, InputStream inputStream, long length) throws SQLException {\n-        call.setBlob(parameterName, inputStream, length);\n-    }\n-\n-    @Override public void setNClob(String parameterName, Reader reader, long length) throws SQLException {\n-        call.setNClob(parameterName, reader, length);\n-    }\n-\n-    @Override public NClob getNClob(int parameterIndex) throws SQLException {\n-        return call.getNClob(parameterIndex);\n-    }\n-\n-    @Override public NClob getNClob(String parameterName) throws SQLException {\n-        return call.getNClob(parameterName);\n-    }\n-\n-    @Override public void setSQLXML(String parameterName, SQLXML xmlObject) throws SQLException {\n-        call.setSQLXML(parameterName, xmlObject);\n-    }\n-\n-    @Override public SQLXML getSQLXML(int parameterIndex) throws SQLException {\n-        return call.getSQLXML(parameterIndex);\n-    }\n-\n-    @Override public SQLXML getSQLXML(String parameterName) throws SQLException {\n-        return call.getSQLXML(parameterName);\n-    }\n-\n-    @Override public String getNString(int parameterIndex) throws SQLException {\n-        return call.getNString(parameterIndex);\n-    }\n-\n-    @Override public String getNString(String parameterName) throws SQLException {\n-        return call.getNString(parameterName);\n-    }\n-\n-    @Override public Reader getNCharacterStream(int parameterIndex) throws SQLException {\n-        return call.getNCharacterStream(parameterIndex);\n-    }\n-\n-    @Override public Reader getNCharacterStream(String parameterName) throws SQLException {\n-        return call.getNCharacterStream(parameterName);\n-    }\n-\n-    @Override public Reader getCharacterStream(int parameterIndex) throws SQLException {\n-        return call.getCharacterStream(parameterIndex);\n-    }\n-\n-    @Override public Reader getCharacterStream(String parameterName) throws SQLException {\n-        return call.getCharacterStream(parameterName);\n-    }\n-\n-    @Override public void setBlob(String parameterName, Blob x) throws SQLException {\n-        call.setBlob(parameterName, x);\n-    }\n-\n-    @Override public void setClob(String parameterName, Clob x) throws SQLException {\n-        call.setClob(parameterName, x);\n-    }\n-\n-    @Override public void setAsciiStream(String parameterName, InputStream x, long length) throws SQLException {\n-        call.setAsciiStream(parameterName, x, length);\n-    }\n-\n-    @Override public void setBinaryStream(String parameterName, InputStream x, long length) throws SQLException {\n-        call.setBinaryStream(parameterName, x, length);\n-    }\n-\n-    @Override public void setCharacterStream(String parameterName, Reader reader, long length) throws SQLException {\n-        call.setCharacterStream(parameterName, reader, length);\n-    }\n-\n-    @Override public void setAsciiStream(String parameterName, InputStream x) throws SQLException {\n-        call.setAsciiStream(parameterName, x);\n-    }\n-\n-    @Override public void setBinaryStream(String parameterName, InputStream x) throws SQLException {\n-        call.setBinaryStream(parameterName, x);\n-    }\n-\n-    @Override public void setCharacterStream(String parameterName, Reader reader) throws SQLException {\n-        call.setCharacterStream(parameterName, reader);\n-    }\n-\n-    @Override public void setNCharacterStream(String parameterName, Reader value) throws SQLException {\n-        call.setNCharacterStream(parameterName, value);\n-    }\n-\n-    @Override public void setClob(String parameterName, Reader reader) throws SQLException {\n-        call.setClob(parameterName, reader);\n-    }\n-\n-    @Override public void setBlob(String parameterName, InputStream inputStream) throws SQLException {\n-        call.setBlob(parameterName, inputStream);\n-    }\n-\n-    @Override public void setNClob(String parameterName, Reader reader) throws SQLException {\n-        call.setNClob(parameterName, reader);\n-    }\n-\n-    @Override public <T> T getObject(int parameterIndex, Class<T> type) throws SQLException {\n-        return call.getObject(parameterIndex, type);\n-    }\n-\n-    @Override public <T> T getObject(String parameterName, Class<T> type) throws SQLException {\n-        return call.getObject(parameterName, type);\n-    }\n-\n-    @Override public void setObject(String parameterName, Object x, SQLType targetSqlType,\n-        int scaleOrLength) throws SQLException {\n-        call.setObject(parameterName, x, targetSqlType, scaleOrLength);\n-    }\n-\n-    @Override public void setObject(String parameterName, Object x, SQLType targetSqlType) throws SQLException {\n-        call.setObject(parameterName, x, targetSqlType);\n-    }\n-\n-    @Override public void registerOutParameter(int parameterIndex, SQLType sqlType) throws SQLException {\n-        call.registerOutParameter(parameterIndex, sqlType);\n-    }\n-\n-    @Override public void registerOutParameter(int parameterIndex, SQLType sqlType, int scale) throws SQLException {\n-        call.registerOutParameter(parameterIndex, sqlType, scale);\n-    }\n-\n-    @Override\n-    public void registerOutParameter(int parameterIndex, SQLType sqlType, String typeName) throws SQLException {\n-        call.registerOutParameter(parameterIndex, sqlType, typeName);\n-    }\n-\n-    @Override public void registerOutParameter(String parameterName, SQLType sqlType) throws SQLException {\n-        call.registerOutParameter(parameterName, sqlType);\n-    }\n-\n-    @Override public void registerOutParameter(String parameterName, SQLType sqlType, int scale) throws SQLException {\n-        call.registerOutParameter(parameterName, sqlType, scale);\n-    }\n-\n-    @Override\n-    public void registerOutParameter(String parameterName, SQLType sqlType, String typeName) throws SQLException {\n-        call.registerOutParameter(parameterName, sqlType, typeName);\n-    }\n-\n-    private final CallableStatement call;\n-    private final String sql;\n-\n-    public CallableStatementWrapper(CallableStatement call, ConnectionInfo connectionInfo, String sql) {\n-        super(call, connectionInfo, sql, \"Callable\");\n-        this.call = call;\n-        this.sql = sql;\n-    }\n-\n-}",
                "deletions": 539
            },
            {
                "sha": "016d5d395f47b2359435df20d2e9bd7be9937b92",
                "filename": "apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/JdbcConnectionWrapper.java",
                "blob_url": "https://github.com/apache/skywalking/blob/f803a2ade32ac27971e306edaaa7df4e4e390dac/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/JdbcConnectionWrapper.java",
                "raw_url": "https://github.com/apache/skywalking/raw/f803a2ade32ac27971e306edaaa7df4e4e390dac/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/JdbcConnectionWrapper.java",
                "status": "removed",
                "changes": 652,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/JdbcConnectionWrapper.java?ref=f803a2ade32ac27971e306edaaa7df4e4e390dac",
                "patch": "@@ -1,652 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-\n-package org.apache.skywalking.apm.plugin.jdbc.mysql.v6.wrapper;\n-\n-import com.mysql.cj.api.exceptions.ExceptionInterceptor;\n-import com.mysql.cj.api.jdbc.ClientInfoProvider;\n-import com.mysql.cj.api.jdbc.JdbcConnection;\n-import com.mysql.cj.api.jdbc.JdbcPropertySet;\n-import com.mysql.cj.api.jdbc.interceptors.StatementInterceptor;\n-import com.mysql.cj.api.jdbc.result.ResultSetInternalMethods;\n-import com.mysql.cj.api.mysqla.io.PacketPayload;\n-import com.mysql.cj.api.mysqla.result.ColumnDefinition;\n-import com.mysql.cj.core.ServerVersion;\n-import com.mysql.cj.jdbc.ServerPreparedStatement;\n-import com.mysql.cj.jdbc.StatementImpl;\n-import com.mysql.cj.jdbc.result.CachedResultSetMetaData;\n-import com.mysql.cj.mysqla.MysqlaSession;\n-import java.sql.Array;\n-import java.sql.Blob;\n-import java.sql.CallableStatement;\n-import java.sql.Clob;\n-import java.sql.DatabaseMetaData;\n-import java.sql.NClob;\n-import java.sql.PreparedStatement;\n-import java.sql.SQLClientInfoException;\n-import java.sql.SQLException;\n-import java.sql.SQLWarning;\n-import java.sql.SQLXML;\n-import java.sql.Savepoint;\n-import java.sql.Statement;\n-import java.sql.Struct;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n-import java.util.Timer;\n-import java.util.concurrent.Executor;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n-import org.apache.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;\n-\n-public class JdbcConnectionWrapper implements JdbcConnection, EnhancedInstance {\n-\n-    public JdbcConnectionWrapper(JdbcConnection delegate, ConnectionInfo connectionInfo) {\n-        this.delegate = delegate;\n-        this.connectionInfo = connectionInfo;\n-    }\n-\n-    public JdbcPropertySet getPropertySet() {\n-        return delegate.getPropertySet();\n-    }\n-\n-    public MysqlaSession getSession() {\n-        return delegate.getSession();\n-    }\n-\n-    public void changeUser(String s, String s1) throws SQLException {\n-        delegate.changeUser(s, s1);\n-    }\n-\n-    @Deprecated public void clearHasTriedMaster() {\n-        delegate.clearHasTriedMaster();\n-    }\n-\n-    public PreparedStatement clientPrepareStatement(String s) throws SQLException {\n-        return delegate.clientPrepareStatement(s);\n-    }\n-\n-    public PreparedStatement clientPrepareStatement(String s, int i) throws SQLException {\n-        return delegate.clientPrepareStatement(s, i);\n-    }\n-\n-    public PreparedStatement clientPrepareStatement(String s, int i, int i1) throws SQLException {\n-        return delegate.clientPrepareStatement(s, i, i1);\n-    }\n-\n-    public PreparedStatement clientPrepareStatement(String s, int[] ints) throws SQLException {\n-        return delegate.clientPrepareStatement(s, ints);\n-    }\n-\n-    public PreparedStatement clientPrepareStatement(String s, int i, int i1, int i2) throws SQLException {\n-        return delegate.clientPrepareStatement(s, i, i1, i2);\n-    }\n-\n-    public PreparedStatement clientPrepareStatement(String s, String[] strings) throws SQLException {\n-        return delegate.clientPrepareStatement(s, strings);\n-    }\n-\n-    public int getActiveStatementCount() {\n-        return delegate.getActiveStatementCount();\n-    }\n-\n-    public long getIdleFor() {\n-        return delegate.getIdleFor();\n-    }\n-\n-    public String getStatementComment() {\n-        return delegate.getStatementComment();\n-    }\n-\n-    @Deprecated public boolean hasTriedMaster() {\n-        return delegate.hasTriedMaster();\n-    }\n-\n-    public boolean isInGlobalTx() {\n-        return delegate.isInGlobalTx();\n-    }\n-\n-    public void setInGlobalTx(boolean b) {\n-        delegate.setInGlobalTx(b);\n-    }\n-\n-    public boolean isMasterConnection() {\n-        return delegate.isMasterConnection();\n-    }\n-\n-    public boolean isNoBackslashEscapesSet() {\n-        return delegate.isNoBackslashEscapesSet();\n-    }\n-\n-    public boolean isSameResource(JdbcConnection connection) {\n-        return delegate.isSameResource(connection);\n-    }\n-\n-    public boolean lowerCaseTableNames() {\n-        return delegate.lowerCaseTableNames();\n-    }\n-\n-    public void ping() throws SQLException {\n-        delegate.ping();\n-    }\n-\n-    public void resetServerState() throws SQLException {\n-        delegate.resetServerState();\n-    }\n-\n-    public PreparedStatement serverPrepareStatement(String s) throws SQLException {\n-        return delegate.serverPrepareStatement(s);\n-    }\n-\n-    public PreparedStatement serverPrepareStatement(String s, int i) throws SQLException {\n-        return delegate.serverPrepareStatement(s, i);\n-    }\n-\n-    public PreparedStatement serverPrepareStatement(String s, int i, int i1) throws SQLException {\n-        return delegate.serverPrepareStatement(s, i, i1);\n-    }\n-\n-    public PreparedStatement serverPrepareStatement(String s, int i, int i1, int i2) throws SQLException {\n-        return delegate.serverPrepareStatement(s, i, i1, i2);\n-    }\n-\n-    public PreparedStatement serverPrepareStatement(String s, int[] ints) throws SQLException {\n-        return delegate.serverPrepareStatement(s, ints);\n-    }\n-\n-    public PreparedStatement serverPrepareStatement(String s, String[] strings) throws SQLException {\n-        return delegate.serverPrepareStatement(s, strings);\n-    }\n-\n-    public void setFailedOver(boolean b) {\n-        delegate.setFailedOver(b);\n-    }\n-\n-    public void setStatementComment(String s) {\n-        delegate.setStatementComment(s);\n-    }\n-\n-    public void shutdownServer() throws SQLException {\n-        delegate.shutdownServer();\n-    }\n-\n-    public void reportQueryTime(long l) {\n-        delegate.reportQueryTime(l);\n-    }\n-\n-    public boolean isAbonormallyLongQuery(long l) {\n-        return delegate.isAbonormallyLongQuery(l);\n-    }\n-\n-    public int getAutoIncrementIncrement() {\n-        return delegate.getAutoIncrementIncrement();\n-    }\n-\n-    public boolean hasSameProperties(JdbcConnection connection) {\n-        return delegate.hasSameProperties(connection);\n-    }\n-\n-    public String getHost() {\n-        return delegate.getHost();\n-    }\n-\n-    public String getHostPortPair() {\n-        return delegate.getHostPortPair();\n-    }\n-\n-    public void setProxy(JdbcConnection connection) {\n-        delegate.setProxy(connection);\n-    }\n-\n-    public boolean isServerLocal() throws SQLException {\n-        return delegate.isServerLocal();\n-    }\n-\n-    public int getSessionMaxRows() {\n-        return delegate.getSessionMaxRows();\n-    }\n-\n-    public void setSessionMaxRows(int i) throws SQLException {\n-        delegate.setSessionMaxRows(i);\n-    }\n-\n-    public void setSchema(String s) throws SQLException {\n-        delegate.setSchema(s);\n-    }\n-\n-    public void abortInternal() throws SQLException {\n-        delegate.abortInternal();\n-    }\n-\n-    public void checkClosed() {\n-        delegate.checkClosed();\n-    }\n-\n-    public boolean isProxySet() {\n-        return delegate.isProxySet();\n-    }\n-\n-    public JdbcConnection duplicate() throws SQLException {\n-        return delegate.duplicate();\n-    }\n-\n-    public ResultSetInternalMethods execSQL(StatementImpl statement,\n-        String s, int i, PacketPayload payload, boolean b, String s1,\n-        ColumnDefinition definition) throws SQLException {\n-        return delegate.execSQL(statement, s, i, payload, b, s1, definition);\n-    }\n-\n-    public ResultSetInternalMethods execSQL(StatementImpl statement,\n-        String s, int i, PacketPayload payload, boolean b, String s1,\n-        ColumnDefinition definition, boolean b1) throws SQLException {\n-        return delegate.execSQL(statement, s, i, payload, b, s1, definition, b1);\n-    }\n-\n-    public StringBuilder generateConnectionCommentBlock(StringBuilder builder) {\n-        return delegate.generateConnectionCommentBlock(builder);\n-    }\n-\n-    public CachedResultSetMetaData getCachedMetaData(String s) {\n-        return delegate.getCachedMetaData(s);\n-    }\n-\n-    public Timer getCancelTimer() {\n-        return delegate.getCancelTimer();\n-    }\n-\n-    public String getCharacterSetMetadata() {\n-        return delegate.getCharacterSetMetadata();\n-    }\n-\n-    public Statement getMetadataSafeStatement() throws SQLException {\n-        return delegate.getMetadataSafeStatement();\n-    }\n-\n-    public boolean getRequiresEscapingEncoder() {\n-        return delegate.getRequiresEscapingEncoder();\n-    }\n-\n-    public ServerVersion getServerVersion() {\n-        return delegate.getServerVersion();\n-    }\n-\n-    public List<StatementInterceptor> getStatementInterceptorsInstances() {\n-        return delegate.getStatementInterceptorsInstances();\n-    }\n-\n-    public void incrementNumberOfPreparedExecutes() {\n-        delegate.incrementNumberOfPreparedExecutes();\n-    }\n-\n-    public void incrementNumberOfPrepares() {\n-        delegate.incrementNumberOfPrepares();\n-    }\n-\n-    public void incrementNumberOfResultSetsCreated() {\n-        delegate.incrementNumberOfResultSetsCreated();\n-    }\n-\n-    public void initializeResultsMetadataFromCache(String s, CachedResultSetMetaData data,\n-        ResultSetInternalMethods methods) throws SQLException {\n-        delegate.initializeResultsMetadataFromCache(s, data, methods);\n-    }\n-\n-    public void initializeSafeStatementInterceptors() throws SQLException {\n-        delegate.initializeSafeStatementInterceptors();\n-    }\n-\n-    public boolean isReadInfoMsgEnabled() {\n-        return delegate.isReadInfoMsgEnabled();\n-    }\n-\n-    public boolean isReadOnly(boolean b) throws SQLException {\n-        return delegate.isReadOnly(b);\n-    }\n-\n-    public void pingInternal(boolean b, int i) throws SQLException {\n-        delegate.pingInternal(b, i);\n-    }\n-\n-    public void realClose(boolean b, boolean b1, boolean b2, Throwable throwable) throws SQLException {\n-        delegate.realClose(b, b1, b2, throwable);\n-    }\n-\n-    public void recachePreparedStatement(ServerPreparedStatement statement) throws SQLException {\n-        delegate.recachePreparedStatement(statement);\n-    }\n-\n-    public void decachePreparedStatement(ServerPreparedStatement statement) throws SQLException {\n-        delegate.decachePreparedStatement(statement);\n-    }\n-\n-    public void registerQueryExecutionTime(long l) {\n-        delegate.registerQueryExecutionTime(l);\n-    }\n-\n-    public void registerStatement(com.mysql.cj.api.jdbc.Statement statement) {\n-        delegate.registerStatement(statement);\n-    }\n-\n-    public void reportNumberOfTablesAccessed(int i) {\n-        delegate.reportNumberOfTablesAccessed(i);\n-    }\n-\n-    public void setReadInfoMsgEnabled(boolean b) {\n-        delegate.setReadInfoMsgEnabled(b);\n-    }\n-\n-    public void setReadOnlyInternal(boolean b) throws SQLException {\n-        delegate.setReadOnlyInternal(b);\n-    }\n-\n-    public boolean storesLowerCaseTableName() {\n-        return delegate.storesLowerCaseTableName();\n-    }\n-\n-    public void throwConnectionClosedException() throws SQLException {\n-        delegate.throwConnectionClosedException();\n-    }\n-\n-    public void transactionBegun() throws SQLException {\n-        delegate.transactionBegun();\n-    }\n-\n-    public void transactionCompleted() throws SQLException {\n-        delegate.transactionCompleted();\n-    }\n-\n-    public void unregisterStatement(com.mysql.cj.api.jdbc.Statement statement) {\n-        delegate.unregisterStatement(statement);\n-    }\n-\n-    public void unSafeStatementInterceptors() throws SQLException {\n-        delegate.unSafeStatementInterceptors();\n-    }\n-\n-    public boolean useAnsiQuotedIdentifiers() {\n-        return delegate.useAnsiQuotedIdentifiers();\n-    }\n-\n-    public JdbcConnection getMultiHostSafeProxy() {\n-        return delegate.getMultiHostSafeProxy();\n-    }\n-\n-    public ClientInfoProvider getClientInfoProviderImpl() throws SQLException {\n-        return delegate.getClientInfoProviderImpl();\n-    }\n-\n-    public Statement createStatement() throws SQLException {\n-        return new StatementWrapper(delegate.createStatement(), connectionInfo);\n-    }\n-\n-    public PreparedStatement prepareStatement(String sql) throws SQLException {\n-        return new PreparedStatementWrapper(delegate.prepareStatement(sql), connectionInfo, sql);\n-    }\n-\n-    public CallableStatement prepareCall(String sql) throws SQLException {\n-        return new CallableStatementWrapper(delegate.prepareCall(sql), connectionInfo, sql);\n-    }\n-\n-    public String nativeSQL(String sql) throws SQLException {\n-        return delegate.nativeSQL(sql);\n-    }\n-\n-    public void setAutoCommit(boolean autoCommit) throws SQLException {\n-        delegate.setAutoCommit(autoCommit);\n-    }\n-\n-    public boolean getAutoCommit() throws SQLException {\n-        return delegate.getAutoCommit();\n-    }\n-\n-    public void commit() throws SQLException {\n-        delegate.commit();\n-    }\n-\n-    public void rollback() throws SQLException {\n-        delegate.rollback();\n-    }\n-\n-    public void close() throws SQLException {\n-        delegate.close();\n-    }\n-\n-    public boolean isClosed() throws SQLException {\n-        return delegate.isClosed();\n-    }\n-\n-    public DatabaseMetaData getMetaData() throws SQLException {\n-        return delegate.getMetaData();\n-    }\n-\n-    public void setReadOnly(boolean readOnly) throws SQLException {\n-        delegate.setReadOnly(readOnly);\n-    }\n-\n-    public boolean isReadOnly() throws SQLException {\n-        return delegate.isReadOnly();\n-    }\n-\n-    public void setCatalog(String catalog) throws SQLException {\n-        delegate.setCatalog(catalog);\n-    }\n-\n-    public String getCatalog() throws SQLException {\n-        return delegate.getCatalog();\n-    }\n-\n-    public void setTransactionIsolation(int level) throws SQLException {\n-        delegate.setTransactionIsolation(level);\n-    }\n-\n-    public int getTransactionIsolation() throws SQLException {\n-        return delegate.getTransactionIsolation();\n-    }\n-\n-    public SQLWarning getWarnings() throws SQLException {\n-        return delegate.getWarnings();\n-    }\n-\n-    public void clearWarnings() throws SQLException {\n-        delegate.clearWarnings();\n-    }\n-\n-    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {\n-        return new StatementWrapper(delegate.createStatement(resultSetType, resultSetConcurrency), connectionInfo);\n-    }\n-\n-    public PreparedStatement prepareStatement(String sql, int resultSetType,\n-        int resultSetConcurrency) throws SQLException {\n-        return new PreparedStatementWrapper(delegate.prepareStatement(sql, resultSetType, resultSetConcurrency), connectionInfo, sql);\n-    }\n-\n-    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {\n-        return new CallableStatementWrapper(delegate.prepareCall(sql, resultSetType, resultSetConcurrency), connectionInfo, sql);\n-    }\n-\n-    public Map<String, Class<?>> getTypeMap() throws SQLException {\n-        return delegate.getTypeMap();\n-    }\n-\n-    public void setTypeMap(Map<String, Class<?>> map) throws SQLException {\n-        delegate.setTypeMap(map);\n-    }\n-\n-    public void setHoldability(int holdability) throws SQLException {\n-        delegate.setHoldability(holdability);\n-    }\n-\n-    public int getHoldability() throws SQLException {\n-        return delegate.getHoldability();\n-    }\n-\n-    public Savepoint setSavepoint() throws SQLException {\n-        return delegate.setSavepoint();\n-    }\n-\n-    public Savepoint setSavepoint(String name) throws SQLException {\n-        return delegate.setSavepoint(name);\n-    }\n-\n-    public void rollback(Savepoint savepoint) throws SQLException {\n-        delegate.rollback(savepoint);\n-    }\n-\n-    public void releaseSavepoint(Savepoint savepoint) throws SQLException {\n-        delegate.releaseSavepoint(savepoint);\n-    }\n-\n-    public Statement createStatement(int resultSetType, int resultSetConcurrency,\n-        int resultSetHoldability) throws SQLException {\n-        return new StatementWrapper(delegate.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability), connectionInfo);\n-    }\n-\n-    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency,\n-        int resultSetHoldability) throws SQLException {\n-        return new PreparedStatementWrapper(delegate.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability), connectionInfo, sql);\n-    }\n-\n-    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency,\n-        int resultSetHoldability) throws SQLException {\n-        return new CallableStatementWrapper(delegate.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability), connectionInfo, sql);\n-    }\n-\n-    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {\n-        return new PreparedStatementWrapper(delegate.prepareStatement(sql, autoGeneratedKeys), connectionInfo, sql);\n-    }\n-\n-    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {\n-        return new PreparedStatementWrapper(delegate.prepareStatement(sql, columnIndexes), connectionInfo, sql);\n-    }\n-\n-    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {\n-        return new PreparedStatementWrapper(delegate.prepareStatement(sql, columnNames), connectionInfo, sql);\n-    }\n-\n-    public Clob createClob() throws SQLException {\n-        return delegate.createClob();\n-    }\n-\n-    public Blob createBlob() throws SQLException {\n-        return delegate.createBlob();\n-    }\n-\n-    public NClob createNClob() throws SQLException {\n-        return delegate.createNClob();\n-    }\n-\n-    public SQLXML createSQLXML() throws SQLException {\n-        return delegate.createSQLXML();\n-    }\n-\n-    public boolean isValid(int timeout) throws SQLException {\n-        return delegate.isValid(timeout);\n-    }\n-\n-    public void setClientInfo(String name, String value) throws SQLClientInfoException {\n-        delegate.setClientInfo(name, value);\n-    }\n-\n-    public void setClientInfo(Properties properties) throws SQLClientInfoException {\n-        delegate.setClientInfo(properties);\n-    }\n-\n-    public String getClientInfo(String name) throws SQLException {\n-        return delegate.getClientInfo(name);\n-    }\n-\n-    public Properties getClientInfo() throws SQLException {\n-        return delegate.getClientInfo();\n-    }\n-\n-    public Array createArrayOf(String typeName, Object[] elements) throws SQLException {\n-        return delegate.createArrayOf(typeName, elements);\n-    }\n-\n-    public Struct createStruct(String typeName, Object[] attributes) throws SQLException {\n-        return delegate.createStruct(typeName, attributes);\n-    }\n-\n-    public String getSchema() throws SQLException {\n-        return delegate.getSchema();\n-    }\n-\n-    public void abort(Executor executor) throws SQLException {\n-        delegate.abort(executor);\n-    }\n-\n-    public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {\n-        delegate.setNetworkTimeout(executor, milliseconds);\n-    }\n-\n-    public int getNetworkTimeout() throws SQLException {\n-        return delegate.getNetworkTimeout();\n-    }\n-\n-    public <T> T unwrap(Class<T> iface) throws SQLException {\n-        return delegate.unwrap(iface);\n-    }\n-\n-    public boolean isWrapperFor(Class<?> iface) throws SQLException {\n-        return delegate.isWrapperFor(iface);\n-    }\n-\n-    public void createNewIO(boolean b) {\n-        delegate.createNewIO(b);\n-    }\n-\n-    public long getId() {\n-        return delegate.getId();\n-    }\n-\n-    public Properties getProperties() {\n-        return delegate.getProperties();\n-    }\n-\n-    public String getProcessHost() {\n-        return delegate.getProcessHost();\n-    }\n-\n-    public Object getConnectionMutex() {\n-        return delegate.getConnectionMutex();\n-    }\n-\n-    public String getURL() {\n-        return delegate.getURL();\n-    }\n-\n-    public String getUser() {\n-        return delegate.getUser();\n-    }\n-\n-    public ExceptionInterceptor getExceptionInterceptor() {\n-        return delegate.getExceptionInterceptor();\n-    }\n-\n-    private final JdbcConnection delegate;\n-    private final ConnectionInfo connectionInfo;\n-    private Object dynamicField;\n-\n-    @Override\n-    public Object getSkyWalkingDynamicField() {\n-        return dynamicField;\n-    }\n-\n-    @Override\n-    public void setSkyWalkingDynamicField(Object value) {\n-        this.dynamicField = value;\n-    }\n-}",
                "deletions": 652
            },
            {
                "sha": "a3bc07e3deb4f752c1bce9779deed1eb8f457c79",
                "filename": "apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/LoadBalancedConnectionWrapper.java",
                "blob_url": "https://github.com/apache/skywalking/blob/f803a2ade32ac27971e306edaaa7df4e4e390dac/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/LoadBalancedConnectionWrapper.java",
                "raw_url": "https://github.com/apache/skywalking/raw/f803a2ade32ac27971e306edaaa7df4e4e390dac/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/LoadBalancedConnectionWrapper.java",
                "status": "removed",
                "changes": 48,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/LoadBalancedConnectionWrapper.java?ref=f803a2ade32ac27971e306edaaa7df4e4e390dac",
                "patch": "@@ -1,48 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-\n-package org.apache.skywalking.apm.plugin.jdbc.mysql.v6.wrapper;\n-\n-import com.mysql.cj.api.jdbc.ha.LoadBalancedConnection;\n-import java.sql.SQLException;\n-import org.apache.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;\n-\n-public class LoadBalancedConnectionWrapper extends JdbcConnectionWrapper implements LoadBalancedConnection {\n-\n-    @Override\n-    public boolean addHost(String s) throws SQLException {\n-        return delegate.addHost(s);\n-    }\n-\n-    @Override public void removeHost(String s) throws SQLException {\n-        delegate.removeHost(s);\n-    }\n-\n-    @Override public void removeHostWhenNotInUse(String s) throws SQLException {\n-        delegate.removeHostWhenNotInUse(s);\n-    }\n-\n-    @Override public void ping(boolean b) throws SQLException {\n-        delegate.ping(b);\n-    }\n-\n-    private LoadBalancedConnection delegate;\n-\n-    public LoadBalancedConnectionWrapper(LoadBalancedConnection delegate, ConnectionInfo info) {\n-        super(delegate, info);\n-    }\n-}",
                "deletions": 48
            },
            {
                "sha": "b0cb9f552b48a60acb6fa2ffef0396cbc6af239b",
                "filename": "apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/PreparedStatementWrapper.java",
                "blob_url": "https://github.com/apache/skywalking/blob/f803a2ade32ac27971e306edaaa7df4e4e390dac/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/PreparedStatementWrapper.java",
                "raw_url": "https://github.com/apache/skywalking/raw/f803a2ade32ac27971e306edaaa7df4e4e390dac/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/PreparedStatementWrapper.java",
                "status": "removed",
                "changes": 303,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/PreparedStatementWrapper.java?ref=f803a2ade32ac27971e306edaaa7df4e4e390dac",
                "patch": "@@ -1,303 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-\n-package org.apache.skywalking.apm.plugin.jdbc.mysql.v6.wrapper;\n-\n-import java.io.InputStream;\n-import java.io.Reader;\n-import java.math.BigDecimal;\n-import java.net.URL;\n-import java.sql.Array;\n-import java.sql.Blob;\n-import java.sql.Clob;\n-import java.sql.Date;\n-import java.sql.NClob;\n-import java.sql.ParameterMetaData;\n-import java.sql.PreparedStatement;\n-import java.sql.Ref;\n-import java.sql.ResultSet;\n-import java.sql.ResultSetMetaData;\n-import java.sql.RowId;\n-import java.sql.SQLException;\n-import java.sql.SQLType;\n-import java.sql.SQLXML;\n-import java.sql.Time;\n-import java.sql.Timestamp;\n-import java.util.Calendar;\n-import org.apache.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;\n-\n-public class PreparedStatementWrapper extends StatementWrapper implements PreparedStatement {\n-\n-    public PreparedStatementWrapper(PreparedStatement statement, ConnectionInfo connectionInfo, String sql,\n-        String statementType) {\n-        super(statement, connectionInfo, statementType);\n-        this.statement = statement;\n-        this.sql = sql;\n-    }\n-\n-    public PreparedStatementWrapper(PreparedStatement statement, ConnectionInfo connectionInfo, String sql) {\n-        this(statement, connectionInfo, sql, \"PreparedStatement\");\n-    }\n-\n-    @Override public ResultSet executeQuery() throws SQLException {\n-        return TracingUtils.trace(connectionInfo, \"executeQuery\", sql, stateType, new TracingUtils.Executable<ResultSet>() {\n-            @Override public ResultSet exe(String sql) throws SQLException {\n-                return statement.executeQuery();\n-            }\n-        });\n-    }\n-\n-    @Override public int executeUpdate() throws SQLException {\n-        return TracingUtils.trace(connectionInfo, \"executeUpdate\", sql, stateType, new TracingUtils.Executable<Integer>() {\n-            @Override public Integer exe(String sql) throws SQLException {\n-                return statement.executeUpdate();\n-            }\n-        });\n-    }\n-\n-    @Override public void setNull(int parameterIndex, int sqlType) throws SQLException {\n-        statement.setNull(parameterIndex, sqlType);\n-    }\n-\n-    @Override public void setBoolean(int parameterIndex, boolean x) throws SQLException {\n-        statement.setBoolean(parameterIndex, x);\n-    }\n-\n-    @Override public void setByte(int parameterIndex, byte x) throws SQLException {\n-        statement.setByte(parameterIndex, x);\n-    }\n-\n-    @Override public void setShort(int parameterIndex, short x) throws SQLException {\n-        statement.setShort(parameterIndex, x);\n-    }\n-\n-    @Override public void setInt(int parameterIndex, int x) throws SQLException {\n-        statement.setInt(parameterIndex, x);\n-    }\n-\n-    @Override public void setLong(int parameterIndex, long x) throws SQLException {\n-        statement.setLong(parameterIndex, x);\n-    }\n-\n-    @Override public void setFloat(int parameterIndex, float x) throws SQLException {\n-        statement.setFloat(parameterIndex, x);\n-    }\n-\n-    @Override public void setDouble(int parameterIndex, double x) throws SQLException {\n-        statement.setDouble(parameterIndex, x);\n-    }\n-\n-    @Override public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {\n-        statement.setBigDecimal(parameterIndex, x);\n-    }\n-\n-    @Override public void setString(int parameterIndex, String x) throws SQLException {\n-        statement.setString(parameterIndex, x);\n-    }\n-\n-    @Override public void setBytes(int parameterIndex, byte[] x) throws SQLException {\n-        statement.setBytes(parameterIndex, x);\n-    }\n-\n-    @Override public void setDate(int parameterIndex, Date x) throws SQLException {\n-        statement.setDate(parameterIndex, x);\n-    }\n-\n-    @Override public void setTime(int parameterIndex, Time x) throws SQLException {\n-        statement.setTime(parameterIndex, x);\n-    }\n-\n-    @Override public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {\n-        statement.setTimestamp(parameterIndex, x);\n-    }\n-\n-    @Override public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {\n-        statement.setAsciiStream(parameterIndex, x, length);\n-    }\n-\n-    @Override @Deprecated\n-    public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {\n-        statement.setUnicodeStream(parameterIndex, x, length);\n-    }\n-\n-    @Override public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {\n-        statement.setBinaryStream(parameterIndex, x, length);\n-    }\n-\n-    @Override public void clearParameters() throws SQLException {\n-        statement.clearParameters();\n-    }\n-\n-    @Override public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {\n-        statement.setObject(parameterIndex, x, targetSqlType);\n-    }\n-\n-    @Override public void setObject(int parameterIndex, Object x) throws SQLException {\n-        statement.setObject(parameterIndex, x);\n-    }\n-\n-    @Override public boolean execute() throws SQLException {\n-        return TracingUtils.trace(connectionInfo, \"execute\", sql, stateType, new TracingUtils.Executable<Boolean>() {\n-            @Override public Boolean exe(String sql) throws SQLException {\n-                return statement.execute();\n-            }\n-        });\n-    }\n-\n-    @Override public void addBatch() throws SQLException {\n-        statement.addBatch();\n-    }\n-\n-    @Override public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {\n-        statement.setCharacterStream(parameterIndex, reader, length);\n-    }\n-\n-    @Override public void setRef(int parameterIndex, Ref x) throws SQLException {\n-        statement.setRef(parameterIndex, x);\n-    }\n-\n-    @Override public void setBlob(int parameterIndex, Blob x) throws SQLException {\n-        statement.setBlob(parameterIndex, x);\n-    }\n-\n-    @Override public void setClob(int parameterIndex, Clob x) throws SQLException {\n-        statement.setClob(parameterIndex, x);\n-    }\n-\n-    @Override public void setArray(int parameterIndex, Array x) throws SQLException {\n-        statement.setArray(parameterIndex, x);\n-    }\n-\n-    @Override public ResultSetMetaData getMetaData() throws SQLException {\n-        return statement.getMetaData();\n-    }\n-\n-    @Override public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {\n-        statement.setDate(parameterIndex, x, cal);\n-    }\n-\n-    @Override public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {\n-        statement.setTime(parameterIndex, x, cal);\n-    }\n-\n-    @Override public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {\n-        statement.setTimestamp(parameterIndex, x, cal);\n-    }\n-\n-    @Override public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException {\n-        statement.setNull(parameterIndex, sqlType, typeName);\n-    }\n-\n-    @Override public void setURL(int parameterIndex, URL x) throws SQLException {\n-        statement.setURL(parameterIndex, x);\n-    }\n-\n-    @Override public ParameterMetaData getParameterMetaData() throws SQLException {\n-        return statement.getParameterMetaData();\n-    }\n-\n-    @Override public void setRowId(int parameterIndex, RowId x) throws SQLException {\n-        statement.setRowId(parameterIndex, x);\n-    }\n-\n-    @Override public void setNString(int parameterIndex, String value) throws SQLException {\n-        statement.setNString(parameterIndex, value);\n-    }\n-\n-    @Override public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {\n-        statement.setNCharacterStream(parameterIndex, value, length);\n-    }\n-\n-    @Override public void setNClob(int parameterIndex, NClob value) throws SQLException {\n-        statement.setNClob(parameterIndex, value);\n-    }\n-\n-    @Override public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {\n-        statement.setClob(parameterIndex, reader, length);\n-    }\n-\n-    @Override public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {\n-        statement.setBlob(parameterIndex, inputStream, length);\n-    }\n-\n-    @Override public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {\n-        statement.setNClob(parameterIndex, reader, length);\n-    }\n-\n-    @Override public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {\n-        statement.setSQLXML(parameterIndex, xmlObject);\n-    }\n-\n-    @Override\n-    public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException {\n-        statement.setObject(parameterIndex, x, targetSqlType, scaleOrLength);\n-    }\n-\n-    @Override public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {\n-        statement.setAsciiStream(parameterIndex, x, length);\n-    }\n-\n-    @Override public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {\n-        statement.setBinaryStream(parameterIndex, x, length);\n-    }\n-\n-    @Override public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {\n-        statement.setCharacterStream(parameterIndex, reader, length);\n-    }\n-\n-    @Override public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {\n-        statement.setAsciiStream(parameterIndex, x);\n-    }\n-\n-    @Override public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {\n-        statement.setBinaryStream(parameterIndex, x);\n-    }\n-\n-    @Override public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {\n-        statement.setCharacterStream(parameterIndex, reader);\n-    }\n-\n-    @Override public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {\n-        statement.setNCharacterStream(parameterIndex, value);\n-    }\n-\n-    @Override public void setClob(int parameterIndex, Reader reader) throws SQLException {\n-        statement.setClob(parameterIndex, reader);\n-    }\n-\n-    @Override public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {\n-        statement.setBlob(parameterIndex, inputStream);\n-    }\n-\n-    @Override public void setNClob(int parameterIndex, Reader reader) throws SQLException {\n-        statement.setNClob(parameterIndex, reader);\n-    }\n-\n-    @Override\n-    public void setObject(int parameterIndex, Object x, SQLType targetSqlType, int scaleOrLength) throws SQLException {\n-        statement.setObject(parameterIndex, x, targetSqlType, scaleOrLength);\n-    }\n-\n-    @Override\n-    public void setObject(int parameterIndex, Object x, SQLType targetSqlType) throws SQLException {\n-        statement.setObject(parameterIndex, x, targetSqlType);\n-    }\n-\n-    private final PreparedStatement statement;\n-    private final String sql;\n-\n-}",
                "deletions": 303
            },
            {
                "sha": "e1453f37b9809ec8cd432e8dd7c74812b898fc78",
                "filename": "apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/ReplicationConnectionWrapper.java",
                "blob_url": "https://github.com/apache/skywalking/blob/f803a2ade32ac27971e306edaaa7df4e4e390dac/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/ReplicationConnectionWrapper.java",
                "raw_url": "https://github.com/apache/skywalking/raw/f803a2ade32ac27971e306edaaa7df4e4e390dac/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/ReplicationConnectionWrapper.java",
                "status": "removed",
                "changes": 80,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/ReplicationConnectionWrapper.java?ref=f803a2ade32ac27971e306edaaa7df4e4e390dac",
                "patch": "@@ -1,80 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-\n-package org.apache.skywalking.apm.plugin.jdbc.mysql.v6.wrapper;\n-\n-import com.mysql.cj.api.jdbc.JdbcConnection;\n-import com.mysql.cj.api.jdbc.ha.ReplicationConnection;\n-import java.sql.SQLException;\n-import org.apache.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;\n-\n-public class ReplicationConnectionWrapper extends JdbcConnectionWrapper implements ReplicationConnection {\n-\n-    public ReplicationConnectionWrapper(JdbcConnection delegate, ConnectionInfo connectionInfo) {\n-        super(delegate, connectionInfo);\n-    }\n-\n-    @Override public long getConnectionGroupId() {\n-        return replicationConnection.getConnectionGroupId();\n-    }\n-\n-    @Override public JdbcConnection getCurrentConnection() {\n-        return replicationConnection.getCurrentConnection();\n-    }\n-\n-    @Override public JdbcConnection getMasterConnection() {\n-        return replicationConnection.getMasterConnection();\n-    }\n-\n-    @Override public void promoteSlaveToMaster(String s) throws SQLException {\n-        replicationConnection.promoteSlaveToMaster(s);\n-    }\n-\n-    @Override public void removeMasterHost(String s) throws SQLException {\n-        replicationConnection.removeMasterHost(s);\n-    }\n-\n-    @Override public void removeMasterHost(String s, boolean b) throws SQLException {\n-        replicationConnection.removeMasterHost(s, b);\n-    }\n-\n-    @Override public boolean isHostMaster(String s) {\n-        return replicationConnection.isHostMaster(s);\n-    }\n-\n-    @Override public JdbcConnection getSlavesConnection() {\n-        return replicationConnection.getSlavesConnection();\n-    }\n-\n-    @Override public void addSlaveHost(String s) throws SQLException {\n-        replicationConnection.addSlaveHost(s);\n-    }\n-\n-    @Override public void removeSlave(String s) throws SQLException {\n-        replicationConnection.removeSlave(s);\n-    }\n-\n-    @Override public void removeSlave(String s, boolean b) throws SQLException {\n-        replicationConnection.removeSlave(s, b);\n-    }\n-\n-    @Override public boolean isHostSlave(String s) {\n-        return replicationConnection.isHostSlave(s);\n-    }\n-\n-    private ReplicationConnection replicationConnection;\n-}",
                "deletions": 80
            },
            {
                "sha": "24b46b8e393ba151363ad1ed4aa5fe0b62c0d473",
                "filename": "apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/StatementWrapper.java",
                "blob_url": "https://github.com/apache/skywalking/blob/f803a2ade32ac27971e306edaaa7df4e4e390dac/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/StatementWrapper.java",
                "raw_url": "https://github.com/apache/skywalking/raw/f803a2ade32ac27971e306edaaa7df4e4e390dac/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/StatementWrapper.java",
                "status": "removed",
                "changes": 307,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/StatementWrapper.java?ref=f803a2ade32ac27971e306edaaa7df4e4e390dac",
                "patch": "@@ -1,307 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-\n-package org.apache.skywalking.apm.plugin.jdbc.mysql.v6.wrapper;\n-\n-import java.sql.Connection;\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n-import java.sql.SQLWarning;\n-import java.sql.Statement;\n-import org.apache.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;\n-\n-public class StatementWrapper implements Statement {\n-\n-    @Override\n-    public ResultSet executeQuery(String sql) throws SQLException {\n-        return TracingUtils.trace(connectionInfo, \"executeQuery\", sql, stateType, new TracingUtils.Executable<ResultSet>() {\n-            @Override public ResultSet exe(String sql) throws SQLException {\n-                return statement.executeQuery(sql);\n-            }\n-        });\n-    }\n-\n-    @Override public int executeUpdate(String sql) throws SQLException {\n-        return TracingUtils.trace(connectionInfo, \"executeUpdate\", sql, stateType, new TracingUtils.Executable<Integer>() {\n-            @Override public Integer exe(String sql) throws SQLException {\n-                return statement.executeUpdate(sql);\n-            }\n-        });\n-    }\n-\n-    @Override public void close() throws SQLException {\n-        statement.close();\n-    }\n-\n-    @Override public int getMaxFieldSize() throws SQLException {\n-        return statement.getMaxFieldSize();\n-    }\n-\n-    @Override public void setMaxFieldSize(int max) throws SQLException {\n-        statement.setMaxFieldSize(max);\n-    }\n-\n-    @Override public int getMaxRows() throws SQLException {\n-        return statement.getMaxRows();\n-    }\n-\n-    @Override public void setMaxRows(int max) throws SQLException {\n-        statement.setMaxRows(max);\n-    }\n-\n-    @Override public void setEscapeProcessing(boolean enable) throws SQLException {\n-        statement.setEscapeProcessing(enable);\n-    }\n-\n-    @Override public int getQueryTimeout() throws SQLException {\n-        return statement.getQueryTimeout();\n-    }\n-\n-    @Override public void setQueryTimeout(int seconds) throws SQLException {\n-        statement.setQueryTimeout(seconds);\n-    }\n-\n-    @Override public void cancel() throws SQLException {\n-        statement.cancel();\n-    }\n-\n-    @Override public SQLWarning getWarnings() throws SQLException {\n-        return statement.getWarnings();\n-    }\n-\n-    @Override public void clearWarnings() throws SQLException {\n-        statement.clearWarnings();\n-    }\n-\n-    @Override public void setCursorName(String name) throws SQLException {\n-        statement.setCursorName(name);\n-    }\n-\n-    @Override public boolean execute(String sql) throws SQLException {\n-        return TracingUtils.trace(connectionInfo, \"execute\", sql, stateType, new TracingUtils.Executable<Boolean>() {\n-            @Override public Boolean exe(String sql) throws SQLException {\n-                return statement.execute(sql);\n-            }\n-        });\n-    }\n-\n-    @Override public ResultSet getResultSet() throws SQLException {\n-        return statement.getResultSet();\n-    }\n-\n-    @Override public int getUpdateCount() throws SQLException {\n-        return statement.getUpdateCount();\n-    }\n-\n-    @Override public boolean getMoreResults() throws SQLException {\n-        return statement.getMoreResults();\n-    }\n-\n-    @Override public void setFetchDirection(int direction) throws SQLException {\n-        statement.setFetchDirection(direction);\n-    }\n-\n-    @Override public int getFetchDirection() throws SQLException {\n-        return statement.getFetchDirection();\n-    }\n-\n-    @Override public void setFetchSize(int rows) throws SQLException {\n-        statement.setFetchSize(rows);\n-    }\n-\n-    @Override public int getFetchSize() throws SQLException {\n-        return statement.getFetchSize();\n-    }\n-\n-    @Override public int getResultSetConcurrency() throws SQLException {\n-        return statement.getResultSetConcurrency();\n-    }\n-\n-    @Override public int getResultSetType() throws SQLException {\n-        return statement.getResultSetType();\n-    }\n-\n-    @Override public void addBatch(String sql) throws SQLException {\n-        statement.addBatch(sql);\n-    }\n-\n-    @Override public void clearBatch() throws SQLException {\n-        statement.clearBatch();\n-    }\n-\n-    @Override public int[] executeBatch() throws SQLException {\n-        return TracingUtils.trace(connectionInfo, \"executeBatch\", null, stateType, new TracingUtils.Executable<int[]>() {\n-            @Override public int[] exe(String sql) throws SQLException {\n-                return statement.executeBatch();\n-            }\n-        });\n-    }\n-\n-    @Override public Connection getConnection() throws SQLException {\n-        return statement.getConnection();\n-    }\n-\n-    @Override public boolean getMoreResults(int current) throws SQLException {\n-        return statement.getMoreResults(current);\n-    }\n-\n-    @Override public ResultSet getGeneratedKeys() throws SQLException {\n-        return statement.getGeneratedKeys();\n-    }\n-\n-    @Override public int executeUpdate(String sql, final int autoGeneratedKeys) throws SQLException {\n-        return TracingUtils.trace(connectionInfo, \"executeUpdate\", sql, stateType, new TracingUtils.Executable<Integer>() {\n-            @Override public Integer exe(String sql) throws SQLException {\n-                return statement.executeUpdate(sql, autoGeneratedKeys);\n-            }\n-        });\n-    }\n-\n-    @Override public int executeUpdate(String sql, final int[] columnIndexes) throws SQLException {\n-        return TracingUtils.trace(connectionInfo, \"executeUpdate\", sql, stateType, new TracingUtils.Executable<Integer>() {\n-            @Override public Integer exe(String sql) throws SQLException {\n-                return statement.executeUpdate(sql, columnIndexes);\n-            }\n-        });\n-    }\n-\n-    @Override public int executeUpdate(String sql, final String[] columnNames) throws SQLException {\n-        return TracingUtils.trace(connectionInfo, \"executeUpdate\", sql, stateType, new TracingUtils.Executable<Integer>() {\n-            @Override public Integer exe(String sql) throws SQLException {\n-                return statement.executeUpdate(sql, columnNames);\n-            }\n-        });\n-    }\n-\n-    @Override public boolean execute(String sql, final int autoGeneratedKeys) throws SQLException {\n-        return TracingUtils.trace(connectionInfo, \"execute\", sql, stateType, new TracingUtils.Executable<Boolean>() {\n-            @Override public Boolean exe(String sql) throws SQLException {\n-                return statement.execute(sql, autoGeneratedKeys);\n-            }\n-        });\n-    }\n-\n-    @Override public boolean execute(String sql, final int[] columnIndexes) throws SQLException {\n-        return TracingUtils.trace(connectionInfo, \"execute\", sql, stateType, new TracingUtils.Executable<Boolean>() {\n-            @Override public Boolean exe(String sql) throws SQLException {\n-                return statement.execute(sql, columnIndexes);\n-            }\n-        });\n-    }\n-\n-    @Override public boolean execute(String sql, final String[] columnNames) throws SQLException {\n-        return TracingUtils.trace(connectionInfo, \"execute\", sql, stateType, new TracingUtils.Executable<Boolean>() {\n-            @Override public Boolean exe(String sql) throws SQLException {\n-                return statement.execute(sql, columnNames);\n-            }\n-        });\n-    }\n-\n-    @Override public int getResultSetHoldability() throws SQLException {\n-        return statement.getResultSetHoldability();\n-    }\n-\n-    @Override public boolean isClosed() throws SQLException {\n-        return statement.isClosed();\n-    }\n-\n-    @Override public void setPoolable(boolean poolable) throws SQLException {\n-        statement.setPoolable(poolable);\n-    }\n-\n-    @Override public boolean isPoolable() throws SQLException {\n-        return statement.isPoolable();\n-    }\n-\n-    @Override public void closeOnCompletion() throws SQLException {\n-        statement.closeOnCompletion();\n-    }\n-\n-    @Override public boolean isCloseOnCompletion() throws SQLException {\n-        return statement.isCloseOnCompletion();\n-    }\n-\n-    @Override public long getLargeUpdateCount() throws SQLException {\n-        return statement.getLargeUpdateCount();\n-    }\n-\n-    @Override public void setLargeMaxRows(long max) throws SQLException {\n-        statement.setLargeMaxRows(max);\n-    }\n-\n-    @Override public long getLargeMaxRows() throws SQLException {\n-        return statement.getLargeMaxRows();\n-    }\n-\n-    @Override public long[] executeLargeBatch() throws SQLException {\n-        return statement.executeLargeBatch();\n-    }\n-\n-    @Override public long executeLargeUpdate(String sql) throws SQLException {\n-        return TracingUtils.trace(connectionInfo, \"executeLargeUpdate\", sql, stateType, new TracingUtils.Executable<Long>() {\n-            @Override public Long exe(String sql) throws SQLException {\n-                return statement.executeLargeUpdate(sql);\n-            }\n-        });\n-    }\n-\n-    @Override public long executeLargeUpdate(String sql, final int autoGeneratedKeys) throws SQLException {\n-        return TracingUtils.trace(connectionInfo, \"executeLargeUpdate\", sql, stateType, new TracingUtils.Executable<Long>() {\n-            @Override public Long exe(String sql) throws SQLException {\n-                return statement.executeLargeUpdate(sql, autoGeneratedKeys);\n-            }\n-        });\n-    }\n-\n-    @Override public long executeLargeUpdate(String sql, final int[] columnIndexes) throws SQLException {\n-        return TracingUtils.trace(connectionInfo, \"executeLargeUpdate\", sql, stateType, new TracingUtils.Executable<Long>() {\n-            @Override public Long exe(String sql) throws SQLException {\n-                return statement.executeLargeUpdate(sql, columnIndexes);\n-            }\n-        });\n-    }\n-\n-    @Override public long executeLargeUpdate(String sql, final String[] columnNames) throws SQLException {\n-        return TracingUtils.trace(connectionInfo, \"executeLargeUpdate\", sql, stateType, new TracingUtils.Executable<Long>() {\n-            @Override public Long exe(String sql) throws SQLException {\n-                return statement.executeLargeUpdate(sql, columnNames);\n-            }\n-        });\n-    }\n-\n-    private final Statement statement;\n-    protected final ConnectionInfo connectionInfo;\n-    protected final String stateType;\n-\n-    public StatementWrapper(Statement statement, ConnectionInfo connectionInfo, String stateType) {\n-        this.statement = statement;\n-        this.connectionInfo = connectionInfo;\n-        this.stateType = stateType;\n-    }\n-\n-    public StatementWrapper(Statement statement, ConnectionInfo connectionInfo) {\n-        this(statement, connectionInfo, \"Statement\");\n-    }\n-\n-    @Override public <T> T unwrap(Class<T> iface) throws SQLException {\n-        return statement.unwrap(iface);\n-    }\n-\n-    @Override public boolean isWrapperFor(Class<?> iface) throws SQLException {\n-        return statement.isWrapperFor(iface);\n-    }\n-}",
                "deletions": 307
            },
            {
                "sha": "2093bb5044500b1d486f4f4522595180b3d9b8b7",
                "filename": "apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/TracingUtils.java",
                "blob_url": "https://github.com/apache/skywalking/blob/f803a2ade32ac27971e306edaaa7df4e4e390dac/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/TracingUtils.java",
                "raw_url": "https://github.com/apache/skywalking/raw/f803a2ade32ac27971e306edaaa7df4e4e390dac/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/TracingUtils.java",
                "status": "removed",
                "changes": 53,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/TracingUtils.java?ref=f803a2ade32ac27971e306edaaa7df4e4e390dac",
                "patch": "@@ -1,53 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-\n-package org.apache.skywalking.apm.plugin.jdbc.mysql.v6.wrapper;\n-\n-import java.sql.SQLException;\n-import org.apache.skywalking.apm.agent.core.context.ContextManager;\n-import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n-import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n-import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n-import org.apache.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;\n-\n-public class TracingUtils {\n-\n-    public static <R> R trace(ConnectionInfo connectInfo, String method, String sql, String statementType,\n-        TracingUtils.Executable<R> exec)\n-        throws SQLException {\n-        try {\n-            AbstractSpan span = ContextManager.createExitSpan(connectInfo.getDBType() + \"/JDBI/\" + statementType + \"/\" + method, connectInfo.getDatabasePeer());\n-            Tags.DB_TYPE.set(span, \"sql\");\n-            Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());\n-            Tags.DB_STATEMENT.set(span, sql);\n-            span.setComponent(connectInfo.getComponent());\n-            SpanLayer.asDB(span);\n-            return exec.exe(sql);\n-        } catch (SQLException e) {\n-            AbstractSpan span = ContextManager.activeSpan();\n-            span.errorOccurred();\n-            span.log(e);\n-            throw e;\n-        } finally {\n-            ContextManager.stopSpan();\n-        }\n-    }\n-\n-    public interface Executable<R> {\n-        R exe(String sql) throws SQLException;\n-    }\n-}",
                "deletions": 53
            },
            {
                "sha": "087d2af2bf81ba30469dd95e0179c9dc805cc3db",
                "filename": "apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/resources/skywalking-plugin.def",
                "blob_url": "https://github.com/apache/skywalking/blob/8716bb0dc56780093ff3832e2d692f4bae8982bb/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/resources/skywalking-plugin.def",
                "raw_url": "https://github.com/apache/skywalking/raw/8716bb0dc56780093ff3832e2d692f4bae8982bb/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/resources/skywalking-plugin.def",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/resources/skywalking-plugin.def?ref=8716bb0dc56780093ff3832e2d692f4bae8982bb",
                "patch": "@@ -19,6 +19,5 @@ mysql-6.x=org.apache.skywalking.apm.plugin.jdbc.mysql.v6.define.ConnectionInstru\n mysql-6.x=org.apache.skywalking.apm.plugin.jdbc.mysql.v6.define.CallableInstrumentation\n mysql-6.x=org.apache.skywalking.apm.plugin.jdbc.mysql.v6.define.PreparedStatementInstrumentation\n mysql-6.x=org.apache.skywalking.apm.plugin.jdbc.mysql.v6.define.StatementInstrumentation\n-mysql-6.x=org.apache.skywalking.apm.plugin.jdbc.mysql.v6.define.FailoverConnectionProxyInstrumentation\n-mysql-6.x=org.apache.skywalking.apm.plugin.jdbc.mysql.v6.define.LoadBalancedConnectionProxyInstrumentation\n-mysql-6.x=org.apache.skywalking.apm.plugin.jdbc.mysql.v6.define.ReplicationConnectionProxyInstrumentation\n+mysql-6.x=org.apache.skywalking.apm.plugin.jdbc.mysql.v6.define.CacheIpsInstrumentation\n+mysql-6.x=org.apache.skywalking.apm.plugin.jdbc.mysql.v6.define.ConnectionImplCreateInstrumentation",
                "deletions": 3
            },
            {
                "sha": "183c45d290e8178d4d1a160121fd8ab19c9b09b6",
                "filename": "apm-sniffer/apm-sdk-plugin/mysql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v8/define/PreparedStatementInstrumentation.java",
                "blob_url": "https://github.com/apache/skywalking/blob/8716bb0dc56780093ff3832e2d692f4bae8982bb/apm-sniffer/apm-sdk-plugin/mysql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v8/define/PreparedStatementInstrumentation.java",
                "raw_url": "https://github.com/apache/skywalking/raw/8716bb0dc56780093ff3832e2d692f4bae8982bb/apm-sniffer/apm-sdk-plugin/mysql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v8/define/PreparedStatementInstrumentation.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/mysql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v8/define/PreparedStatementInstrumentation.java?ref=8716bb0dc56780093ff3832e2d692f4bae8982bb",
                "patch": "@@ -32,7 +32,7 @@\n public class PreparedStatementInstrumentation extends AbstractMysqlInstrumentation {\n \n     private static final String PREPARED_STATEMENT_CLASS_NAME = \"com.mysql.cj.jdbc.ClientPreparedStatement\";\n-    private static final String PREPARED_STATEMENT_SERVERSIDE_CLASS_NAME = \"com.mysql.cj.jdbc.ServerPreparedStatement\";\n+    private static final String PREPARED_STATEMENT_SERVER_SIDE_CLASS_NAME = \"com.mysql.cj.jdbc.ServerPreparedStatement\";\n \n     private static final String SERVICE_METHOD_INTERCEPTOR =  Constants.PREPARED_STATEMENT_EXECUTE_METHODS_INTERCEPTOR;\n \n@@ -62,6 +62,6 @@\n     }\n \n     @Override protected ClassMatch enhanceClass() {\n-        return byMultiClassMatch(PREPARED_STATEMENT_CLASS_NAME,PREPARED_STATEMENT_SERVERSIDE_CLASS_NAME);\n+        return byMultiClassMatch(PREPARED_STATEMENT_CLASS_NAME, PREPARED_STATEMENT_SERVER_SIDE_CLASS_NAME);\n     }\n }",
                "deletions": 2
            },
            {
                "sha": "d24b01cfa23264ca5e75b2c3691f3911ae4150b4",
                "filename": "apm-sniffer/apm-sdk-plugin/mysql-common/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/ConnectionCache.java",
                "blob_url": "https://github.com/apache/skywalking/blob/8716bb0dc56780093ff3832e2d692f4bae8982bb/apm-sniffer/apm-sdk-plugin/mysql-common/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/ConnectionCache.java",
                "raw_url": "https://github.com/apache/skywalking/raw/8716bb0dc56780093ff3832e2d692f4bae8982bb/apm-sniffer/apm-sdk-plugin/mysql-common/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/ConnectionCache.java",
                "status": "renamed",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/mysql-common/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/ConnectionCache.java?ref=8716bb0dc56780093ff3832e2d692f4bae8982bb",
                "patch": "@@ -16,7 +16,7 @@\n  *\n  */\n \n-package org.apache.skywalking.apm.plugin.jdbc.mysql.v5;\n+package org.apache.skywalking.apm.plugin.jdbc.mysql;\n \n import org.apache.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;\n import org.apache.skywalking.apm.util.StringUtil;\n@@ -27,9 +27,9 @@\n  * @author: dingshaocheng\n  */\n public class ConnectionCache {\n-    private static ConcurrentHashMap<String, ConnectionInfo> CONNECTIONS_MAP = new ConcurrentHashMap<String, ConnectionInfo>();\n+    private static final ConcurrentHashMap<String, ConnectionInfo> CONNECTIONS_MAP = new ConcurrentHashMap<String, ConnectionInfo>();\n \n-    private static String CONNECTION_SPLIT_STR = \",\";\n+    private static final String CONNECTION_SPLIT_STR = \",\";\n \n     public static ConnectionInfo get(String host, String port) {\n         final String connStr = String.format(\"%s:%s\", host, port);",
                "deletions": 3,
                "previous_filename": "apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v5/ConnectionCache.java"
            },
            {
                "sha": "a22c79b32e589ab4610d1961b9ab72841ba59666",
                "filename": "apm-sniffer/apm-sdk-plugin/mysql-common/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/Constants.java",
                "blob_url": "https://github.com/apache/skywalking/blob/8716bb0dc56780093ff3832e2d692f4bae8982bb/apm-sniffer/apm-sdk-plugin/mysql-common/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/Constants.java",
                "raw_url": "https://github.com/apache/skywalking/raw/8716bb0dc56780093ff3832e2d692f4bae8982bb/apm-sniffer/apm-sdk-plugin/mysql-common/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/Constants.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/mysql-common/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/Constants.java?ref=8716bb0dc56780093ff3832e2d692f4bae8982bb",
                "patch": "@@ -28,4 +28,5 @@\n     public static final String PREPARED_STATEMENT_EXECUTE_METHODS_INTERCEPTOR = \"org.apache.skywalking.apm.plugin.jdbc.mysql.PreparedStatementExecuteMethodsInterceptor\";\n     public static final String SET_CATALOG_INTERCEPTOR = \"org.apache.skywalking.apm.plugin.jdbc.mysql.SetCatalogInterceptor\";\n     public static final String STATEMENT_EXECUTE_METHODS_INTERCEPTOR = \"org.apache.skywalking.apm.plugin.jdbc.mysql.StatementExecuteMethodsInterceptor\";\n+    public static final String DRIVER_CONNECT_INTERCEPTOR = \"org.apache.skywalking.apm.plugin.jdbc.mysql.DriverConnectInterceptor\";\n }",
                "deletions": 0
            },
            {
                "sha": "b32519f2c91a931395ca2b141d9c24509c0e67bd",
                "filename": "apm-sniffer/apm-sdk-plugin/mysql-common/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/DriverConnectInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/8716bb0dc56780093ff3832e2d692f4bae8982bb/apm-sniffer/apm-sdk-plugin/mysql-common/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/DriverConnectInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/8716bb0dc56780093ff3832e2d692f4bae8982bb/apm-sniffer/apm-sdk-plugin/mysql-common/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/DriverConnectInterceptor.java",
                "status": "renamed",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/mysql-common/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/DriverConnectInterceptor.java?ref=8716bb0dc56780093ff3832e2d692f4bae8982bb",
                "patch": "@@ -16,7 +16,7 @@\n  *\n  */\n \n-package org.apache.skywalking.apm.plugin.jdbc.mysql.v5;\n+package org.apache.skywalking.apm.plugin.jdbc.mysql;\n \n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;",
                "deletions": 1,
                "previous_filename": "apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v5/DriverConnectInterceptor.java"
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "AgentStream NullPointerException with RemoteWorker",
        "commit": "https://github.com/apache/skywalking/commit/cf232524ca21930f12b4cd782c1c78719e99c543",
        "parent": "https://github.com/apache/skywalking/commit/a1276c86a5f78e3a104510b0c5bc009667ab4f55",
        "bug_id": "skywalking_17",
        "file": [
            {
                "sha": "1eb17e2239b0d587a60c1217792368d423f5826a",
                "filename": "apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/component/NodeComponentSpanListener.java",
                "blob_url": "https://github.com/apache/skywalking/blob/cf232524ca21930f12b4cd782c1c78719e99c543/apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/component/NodeComponentSpanListener.java",
                "raw_url": "https://github.com/apache/skywalking/raw/cf232524ca21930f12b4cd782c1c78719e99c543/apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/component/NodeComponentSpanListener.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/component/NodeComponentSpanListener.java?ref=cf232524ca21930f12b4cd782c1c78719e99c543",
                "patch": "@@ -60,6 +60,7 @@ public void parseExit(SpanDecorator spanDecorator, int applicationId, int applic\n         }\n \n         nodeComponent.setPeerId(spanDecorator.getPeerId());\n+        nodeComponent.setPeer(Const.EMPTY_STRING);\n         id = id + Const.ID_SPLIT + nodeComponent.getPeerId();\n         nodeComponent.setId(id);\n         nodeComponents.add(nodeComponent);\n@@ -81,6 +82,7 @@ public void parseEntry(SpanDecorator spanDecorator, int applicationId, int appli\n         }\n \n         nodeComponent.setPeerId(applicationId);\n+        nodeComponent.setPeer(Const.EMPTY_STRING);\n         id = id + Const.ID_SPLIT + String.valueOf(applicationId);\n         nodeComponent.setId(id);\n ",
                "deletions": 0
            },
            {
                "sha": "410830ea88e83c579a7f00de9e52ef4ac3c60011",
                "filename": "apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/mapping/NodeMappingSpanListener.java",
                "blob_url": "https://github.com/apache/skywalking/blob/cf232524ca21930f12b4cd782c1c78719e99c543/apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/mapping/NodeMappingSpanListener.java",
                "raw_url": "https://github.com/apache/skywalking/raw/cf232524ca21930f12b4cd782c1c78719e99c543/apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/mapping/NodeMappingSpanListener.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/mapping/NodeMappingSpanListener.java?ref=cf232524ca21930f12b4cd782c1c78719e99c543",
                "patch": "@@ -51,6 +51,7 @@\n         NodeMappingDataDefine.NodeMapping nodeMapping = new NodeMappingDataDefine.NodeMapping();\n         nodeMapping.setApplicationId(applicationId);\n         nodeMapping.setAddressId(referenceDecorator.getNetworkAddressId());\n+        nodeMapping.setAddress(Const.EMPTY_STRING);\n         String id = String.valueOf(applicationId) + Const.ID_SPLIT + String.valueOf(nodeMapping.getAddressId());\n         nodeMapping.setId(id);\n         nodeMappings.add(nodeMapping);",
                "deletions": 0
            },
            {
                "sha": "ccbcd8189587fb6db8d7b34a6c634a0de03b0f44",
                "filename": "apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/noderef/NodeReferenceSpanListener.java",
                "blob_url": "https://github.com/apache/skywalking/blob/cf232524ca21930f12b4cd782c1c78719e99c543/apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/noderef/NodeReferenceSpanListener.java",
                "raw_url": "https://github.com/apache/skywalking/raw/cf232524ca21930f12b4cd782c1c78719e99c543/apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/noderef/NodeReferenceSpanListener.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/noderef/NodeReferenceSpanListener.java?ref=cf232524ca21930f12b4cd782c1c78719e99c543",
                "patch": "@@ -53,6 +53,7 @@ public void parseExit(SpanDecorator spanDecorator, int applicationId, int applic\n         NodeReferenceDataDefine.NodeReference nodeReference = new NodeReferenceDataDefine.NodeReference();\n         nodeReference.setFrontApplicationId(applicationId);\n         nodeReference.setBehindApplicationId(spanDecorator.getPeerId());\n+        nodeReference.setBehindPeer(Const.EMPTY_STRING);\n         nodeReference.setTimeBucket(TimeBucketUtils.INSTANCE.getMinuteTimeBucket(spanDecorator.getStartTime()));\n \n         StringBuilder idBuilder = new StringBuilder();\n@@ -79,6 +80,7 @@ public void parseEntry(SpanDecorator spanDecorator, int applicationId, int appli\n             NodeReferenceDataDefine.NodeReference nodeReference = new NodeReferenceDataDefine.NodeReference();\n             nodeReference.setFrontApplicationId(Const.USER_ID);\n             nodeReference.setBehindApplicationId(applicationId);\n+            nodeReference.setBehindPeer(Const.EMPTY_STRING);\n             nodeReference.setTimeBucket(TimeBucketUtils.INSTANCE.getMinuteTimeBucket(spanDecorator.getStartTime()));\n \n             String idBuilder = String.valueOf(nodeReference.getTimeBucket()) + Const.ID_SPLIT + nodeReference.getFrontApplicationId() +\n@@ -96,6 +98,7 @@ public void parseEntry(SpanDecorator spanDecorator, int applicationId, int appli\n         NodeReferenceDataDefine.NodeReference referenceSum = new NodeReferenceDataDefine.NodeReference();\n         referenceSum.setFrontApplicationId(parentApplicationId);\n         referenceSum.setBehindApplicationId(applicationId);\n+        referenceSum.setBehindPeer(Const.EMPTY_STRING);\n         references.add(referenceSum);\n     }\n ",
                "deletions": 0
            },
            {
                "sha": "dc7a0cb65cea2de4b222a96a64270cd5c073e6ee",
                "filename": "apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/serviceref/ServiceReferenceSpanListener.java",
                "blob_url": "https://github.com/apache/skywalking/blob/cf232524ca21930f12b4cd782c1c78719e99c543/apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/serviceref/ServiceReferenceSpanListener.java",
                "raw_url": "https://github.com/apache/skywalking/raw/cf232524ca21930f12b4cd782c1c78719e99c543/apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/serviceref/ServiceReferenceSpanListener.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/serviceref/ServiceReferenceSpanListener.java?ref=cf232524ca21930f12b4cd782c1c78719e99c543",
                "patch": "@@ -127,12 +127,15 @@ private void sendToAggregationWorker(StreamModuleContext context,\n \n         idBuilder.append(entryServiceId).append(Const.ID_SPLIT);\n         serviceReference.setEntryServiceId(entryServiceId);\n+        serviceReference.setEntryServiceName(Const.EMPTY_STRING);\n \n         idBuilder.append(frontServiceId).append(Const.ID_SPLIT);\n         serviceReference.setFrontServiceId(frontServiceId);\n+        serviceReference.setFrontServiceName(Const.EMPTY_STRING);\n \n         idBuilder.append(behindServiceId);\n         serviceReference.setBehindServiceId(behindServiceId);\n+        serviceReference.setBehindServiceName(Const.EMPTY_STRING);\n \n         serviceReference.setId(idBuilder.toString());\n         serviceReference.setTimeBucket(timeBucket);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "Fix NPE in protobuf and illegal query parameter. (#1847)",
        "commit": "https://github.com/apache/skywalking/commit/dbf0444ec12c1fbe8aee89ee9c05e24c22608108",
        "parent": "https://github.com/apache/skywalking/commit/041ed43309cdd896628fbeeb9061f5baff75772d",
        "bug_id": "skywalking_18",
        "file": [
            {
                "sha": "cd83c2f20495167403b8111df8c28c7f7dc7d880",
                "filename": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/MetricQueryService.java",
                "blob_url": "https://github.com/apache/skywalking/blob/dbf0444ec12c1fbe8aee89ee9c05e24c22608108/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/MetricQueryService.java",
                "raw_url": "https://github.com/apache/skywalking/raw/dbf0444ec12c1fbe8aee89ee9c05e24c22608108/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/MetricQueryService.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/MetricQueryService.java?ref=dbf0444ec12c1fbe8aee89ee9c05e24c22608108",
                "patch": "@@ -31,6 +31,7 @@\n import org.apache.skywalking.oap.server.core.storage.query.IMetricQueryDAO;\n import org.apache.skywalking.oap.server.library.module.*;\n import org.apache.skywalking.oap.server.library.module.Service;\n+import org.apache.skywalking.oap.server.library.util.CollectionUtils;\n import org.slf4j.*;\n \n /**\n@@ -56,6 +57,10 @@ private IMetricQueryDAO getMetricQueryDAO() {\n \n     public IntValues getValues(final String indName, final List<String> ids, final Step step, final long startTB,\n         final long endTB) throws IOException {\n+        if (CollectionUtils.isEmpty(ids)) {\n+            throw new RuntimeException(\"IDs can't be null\");\n+        }\n+\n         Where where = new Where();\n         KeyValues intKeyValues = new KeyValues();\n         intKeyValues.setKey(Indicator.ENTITY_ID);",
                "deletions": 0
            },
            {
                "sha": "3d330f86e18a152b3b0ead326bfbad6c4e348d6f",
                "filename": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/EndpointInventory.java",
                "blob_url": "https://github.com/apache/skywalking/blob/dbf0444ec12c1fbe8aee89ee9c05e24c22608108/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/EndpointInventory.java",
                "raw_url": "https://github.com/apache/skywalking/raw/dbf0444ec12c1fbe8aee89ee9c05e24c22608108/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/EndpointInventory.java",
                "status": "modified",
                "changes": 12,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/EndpointInventory.java?ref=dbf0444ec12c1fbe8aee89ee9c05e24c22608108",
                "patch": "@@ -18,15 +18,19 @@\n \n package org.apache.skywalking.oap.server.core.register;\n \n-import java.util.*;\n-import lombok.*;\n+import java.util.HashMap;\n+import java.util.Map;\n+import lombok.Getter;\n+import lombok.Setter;\n import org.apache.skywalking.oap.server.core.Const;\n import org.apache.skywalking.oap.server.core.register.annotation.InventoryType;\n import org.apache.skywalking.oap.server.core.remote.annotation.StreamData;\n import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;\n import org.apache.skywalking.oap.server.core.source.Scope;\n import org.apache.skywalking.oap.server.core.storage.StorageBuilder;\n-import org.apache.skywalking.oap.server.core.storage.annotation.*;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.StorageEntity;\n+import org.apache.skywalking.oap.server.library.util.StringUtils;\n \n /**\n  * @author peng-yongsheng\n@@ -87,7 +91,7 @@ public static String buildId(int serviceId, String endpointName) {\n         remoteBuilder.addDataLongs(getRegisterTime());\n         remoteBuilder.addDataLongs(getHeartbeatTime());\n \n-        remoteBuilder.addDataStrings(name);\n+        remoteBuilder.addDataStrings(StringUtils.getOrDefault(name, Const.EMPTY_STRING));\n         return remoteBuilder;\n     }\n ",
                "deletions": 4
            },
            {
                "sha": "cf465b68c3b2cd75a31bac2624d99458495495b9",
                "filename": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/NetworkAddressInventory.java",
                "blob_url": "https://github.com/apache/skywalking/blob/dbf0444ec12c1fbe8aee89ee9c05e24c22608108/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/NetworkAddressInventory.java",
                "raw_url": "https://github.com/apache/skywalking/raw/dbf0444ec12c1fbe8aee89ee9c05e24c22608108/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/NetworkAddressInventory.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/NetworkAddressInventory.java?ref=dbf0444ec12c1fbe8aee89ee9c05e24c22608108",
                "patch": "@@ -27,6 +27,7 @@\n import org.apache.skywalking.oap.server.core.source.Scope;\n import org.apache.skywalking.oap.server.core.storage.StorageBuilder;\n import org.apache.skywalking.oap.server.core.storage.annotation.*;\n+import org.apache.skywalking.oap.server.library.util.StringUtils;\n \n /**\n  * @author peng-yongsheng\n@@ -87,7 +88,7 @@ public static String buildId(String networkAddress) {\n         remoteBuilder.addDataLongs(getRegisterTime());\n         remoteBuilder.addDataLongs(getHeartbeatTime());\n \n-        remoteBuilder.addDataStrings(name);\n+        remoteBuilder.addDataStrings(StringUtils.getOrDefault(name, Const.EMPTY_STRING));\n         return remoteBuilder;\n     }\n ",
                "deletions": 1
            },
            {
                "sha": "519a7d2e35d2abf3d1bd69b8e43a391d57dd9a72",
                "filename": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/ServiceInstanceInventory.java",
                "blob_url": "https://github.com/apache/skywalking/blob/dbf0444ec12c1fbe8aee89ee9c05e24c22608108/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/ServiceInstanceInventory.java",
                "raw_url": "https://github.com/apache/skywalking/raw/dbf0444ec12c1fbe8aee89ee9c05e24c22608108/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/ServiceInstanceInventory.java",
                "status": "modified",
                "changes": 11,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/ServiceInstanceInventory.java?ref=dbf0444ec12c1fbe8aee89ee9c05e24c22608108",
                "patch": "@@ -30,6 +30,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageBuilder;\n import org.apache.skywalking.oap.server.core.storage.annotation.*;\n import org.apache.skywalking.oap.server.library.util.BooleanUtils;\n+import org.apache.skywalking.oap.server.library.util.StringUtils;\n \n /**\n  * @author peng-yongsheng\n@@ -122,11 +123,11 @@ public static String buildId(int serviceId, int addressId) {\n         remoteBuilder.addDataLongs(getRegisterTime());\n         remoteBuilder.addDataLongs(getHeartbeatTime());\n \n-        remoteBuilder.addDataStrings(name);\n-        remoteBuilder.addDataStrings(osName);\n-        remoteBuilder.addDataStrings(hostName);\n-        remoteBuilder.addDataStrings(ipv4s);\n-        remoteBuilder.addDataStrings(instanceUUID);\n+        remoteBuilder.addDataStrings(StringUtils.getOrDefault(name, Const.EMPTY_STRING));\n+        remoteBuilder.addDataStrings(StringUtils.getOrDefault(osName, Const.EMPTY_STRING));\n+        remoteBuilder.addDataStrings(StringUtils.getOrDefault(hostName, Const.EMPTY_STRING));\n+        remoteBuilder.addDataStrings(StringUtils.getOrDefault(ipv4s, Const.EMPTY_STRING));\n+        remoteBuilder.addDataStrings(StringUtils.getOrDefault(instanceUUID, Const.EMPTY_STRING));\n         return remoteBuilder;\n     }\n ",
                "deletions": 5
            },
            {
                "sha": "c2c219975c2821113a44bfa9b68b0af88c4f8e5b",
                "filename": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/ServiceInventory.java",
                "blob_url": "https://github.com/apache/skywalking/blob/dbf0444ec12c1fbe8aee89ee9c05e24c22608108/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/ServiceInventory.java",
                "raw_url": "https://github.com/apache/skywalking/raw/dbf0444ec12c1fbe8aee89ee9c05e24c22608108/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/ServiceInventory.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/ServiceInventory.java?ref=dbf0444ec12c1fbe8aee89ee9c05e24c22608108",
                "patch": "@@ -28,6 +28,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageBuilder;\n import org.apache.skywalking.oap.server.core.storage.annotation.*;\n import org.apache.skywalking.oap.server.library.util.BooleanUtils;\n+import org.apache.skywalking.oap.server.library.util.StringUtils;\n \n /**\n  * @author peng-yongsheng\n@@ -105,7 +106,7 @@ public static String buildId(int addressId) {\n         remoteBuilder.addDataLongs(getHeartbeatTime());\n         remoteBuilder.addDataLongs(getMappingLastUpdateTime());\n \n-        remoteBuilder.addDataStrings(name);\n+        remoteBuilder.addDataStrings(StringUtils.getOrDefault(name, Const.EMPTY_STRING));\n         return remoteBuilder;\n     }\n ",
                "deletions": 1
            },
            {
                "sha": "2d425c46b933028e504110c6f8f01fa98aad88a2",
                "filename": "oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/StringUtils.java",
                "blob_url": "https://github.com/apache/skywalking/blob/dbf0444ec12c1fbe8aee89ee9c05e24c22608108/oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/StringUtils.java",
                "raw_url": "https://github.com/apache/skywalking/raw/dbf0444ec12c1fbe8aee89ee9c05e24c22608108/oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/StringUtils.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/StringUtils.java?ref=dbf0444ec12c1fbe8aee89ee9c05e24c22608108",
                "patch": "@@ -32,4 +32,8 @@ public static boolean isEmpty(Object str) {\n     public static boolean isNotEmpty(Object str) {\n         return !isEmpty(str);\n     }\n+\n+    public static String getOrDefault(String value, String defaultValue) {\n+        return value == null ? defaultValue : value;\n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "Fix linear data npe (#1731)\n\n* Avoid null point exception",
        "commit": "https://github.com/apache/skywalking/commit/46c55ebdb9e616f6e7dfc78771371e8c8e0c8867",
        "parent": "https://github.com/apache/skywalking/commit/363b925ade2fec26caa3655d2705578c5c90fe97",
        "bug_id": "skywalking_19",
        "file": [
            {
                "sha": "7dab015956a103f161dd139cc80f08f83c9cc6d5",
                "filename": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/PxxIndicator.java",
                "blob_url": "https://github.com/apache/skywalking/blob/46c55ebdb9e616f6e7dfc78771371e8c8e0c8867/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/PxxIndicator.java",
                "raw_url": "https://github.com/apache/skywalking/raw/46c55ebdb9e616f6e7dfc78771371e8c8e0c8867/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/PxxIndicator.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/PxxIndicator.java?ref=46c55ebdb9e616f6e7dfc78771371e8c8e0c8867",
                "patch": "@@ -38,7 +38,7 @@\n     protected static final String VALUE = \"value\";\n     protected static final String PRECISION = \"precision\";\n \n-    @Getter @Setter @Column(columnName = VALUE) private int value;\n+    @Getter @Setter @Column(columnName = VALUE, isValue = true) private int value;\n     @Getter @Setter @Column(columnName = PRECISION) private int precision;\n     @Getter @Setter @Column(columnName = DETAIL_GROUP) private IntKeyLongValueArray detailGroup;\n ",
                "deletions": 1
            },
            {
                "sha": "ba9d192c7be7b3cdf7ad836634f421070a5a44fd",
                "filename": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetricQueryEsDAO.java",
                "blob_url": "https://github.com/apache/skywalking/blob/46c55ebdb9e616f6e7dfc78771371e8c8e0c8867/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetricQueryEsDAO.java",
                "raw_url": "https://github.com/apache/skywalking/raw/46c55ebdb9e616f6e7dfc78771371e8c8e0c8867/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetricQueryEsDAO.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetricQueryEsDAO.java?ref=46c55ebdb9e616f6e7dfc78771371e8c8e0c8867",
                "patch": "@@ -89,11 +89,14 @@ private void functionAggregation(Function function, TermsAggregationBuilder pare\n \n         IntValues intValues = new IntValues();\n         for (MultiGetItemResponse itemResponse : response.getResponses()) {\n-            int value = ((Number)itemResponse.getResponse().getSource().getOrDefault(valueCName, 0)).intValue();\n \n             KVInt kvInt = new KVInt();\n             kvInt.setId(itemResponse.getId());\n-            kvInt.setValue(value);\n+            kvInt.setValue(0);\n+            Map<String, Object> source = itemResponse.getResponse().getSource();\n+            if (source != null) {\n+                kvInt.setValue(((Number)source.getOrDefault(valueCName, 0)).intValue());\n+            }\n             intValues.getValues().add(kvInt);\n         }\n         return intValues;",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "FIX NPE in tomcat plugin ForwardInterceptor (#1562)",
        "commit": "https://github.com/apache/skywalking/commit/7c2aa4c43a01964dd4d15a55c281ce720e0e4af0",
        "parent": "https://github.com/apache/skywalking/commit/03af5f1806d6a9d7052a8836d07b2135277bc2d5",
        "bug_id": "skywalking_20",
        "file": [
            {
                "sha": "68416c7ed6734fe6e043c098f205dadf306571d5",
                "filename": "apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/ForwardInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/7c2aa4c43a01964dd4d15a55c281ce720e0e4af0/apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/ForwardInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/7c2aa4c43a01964dd4d15a55c281ce720e0e4af0/apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/ForwardInterceptor.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/ForwardInterceptor.java?ref=7c2aa4c43a01964dd4d15a55c281ce720e0e4af0",
                "patch": "@@ -37,7 +37,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n         if (ContextManager.isActive()) {\n             AbstractSpan abstractTracingSpan = ContextManager.activeSpan();\n             Map<String, String> eventMap = new HashMap<String, String>();\n-            eventMap.put(\"forward-url\", (String)objInst.getSkyWalkingDynamicField());\n+            eventMap.put(\"forward-url\", objInst.getSkyWalkingDynamicField() == null ? \"\" : String.valueOf(objInst.getSkyWalkingDynamicField()));\n             abstractTracingSpan.log(System.currentTimeMillis(), eventMap);\n             ContextManager.getRuntimeContext().put(Constants.FORWARD_REQUEST_FLAG, true);\n         }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "FIX NPE in tomcat plugin ForwardInterceptor (#1562)",
        "commit": "https://github.com/apache/skywalking/commit/dd942d15a30958483ccc939bf66b0121859cc243",
        "parent": "https://github.com/apache/skywalking/commit/a29a8d7c09641b7c4e722d03c9816d15d68855c4",
        "bug_id": "skywalking_21",
        "file": [
            {
                "sha": "68416c7ed6734fe6e043c098f205dadf306571d5",
                "filename": "apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/ForwardInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/dd942d15a30958483ccc939bf66b0121859cc243/apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/ForwardInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/dd942d15a30958483ccc939bf66b0121859cc243/apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/ForwardInterceptor.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/ForwardInterceptor.java?ref=dd942d15a30958483ccc939bf66b0121859cc243",
                "patch": "@@ -37,7 +37,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n         if (ContextManager.isActive()) {\n             AbstractSpan abstractTracingSpan = ContextManager.activeSpan();\n             Map<String, String> eventMap = new HashMap<String, String>();\n-            eventMap.put(\"forward-url\", (String)objInst.getSkyWalkingDynamicField());\n+            eventMap.put(\"forward-url\", objInst.getSkyWalkingDynamicField() == null ? \"\" : String.valueOf(objInst.getSkyWalkingDynamicField()));\n             abstractTracingSpan.log(System.currentTimeMillis(), eventMap);\n             ContextManager.getRuntimeContext().put(Constants.FORWARD_REQUEST_FLAG, true);\n         }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "Fix #1454: fix NPE issue about spring apo interceptor (#1467)",
        "commit": "https://github.com/apache/skywalking/commit/d38b208c9e8dfa6aa872ea51fe0de340d6d493af",
        "parent": "https://github.com/apache/skywalking/commit/48348efe74112c7daeb36984b4954de93e6f5e1e",
        "bug_id": "skywalking_22",
        "file": [
            {
                "sha": "a7300e4190d3a68a7e0dacc729031f171e309752",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/CreateAopProxyInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/d38b208c9e8dfa6aa872ea51fe0de340d6d493af/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/CreateAopProxyInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/d38b208c9e8dfa6aa872ea51fe0de340d6d493af/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/CreateAopProxyInterceptor.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/CreateAopProxyInterceptor.java?ref=d38b208c9e8dfa6aa872ea51fe0de340d6d493af",
                "patch": "@@ -44,7 +44,8 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA\n         Object ret) throws Throwable {\n         AdvisedSupport advisedSupport = (AdvisedSupport)allArguments[0];\n \n-        if (EnhancedInstance.class.isAssignableFrom(advisedSupport.getTargetClass())) {\n+        Class targetClass = advisedSupport.getTargetClass();\n+        if (targetClass != null && EnhancedInstance.class.isAssignableFrom(targetClass)) {\n             return true;\n         }\n         return ret;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "Fix #1454: fix NPE issue about spring apo interceptor (#1467)",
        "commit": "https://github.com/apache/skywalking/commit/630e62312ce1dc37d60780351d15f68ff47dd5f0",
        "parent": "https://github.com/apache/skywalking/commit/7744911c32e7179ffdf6b9cbaed19ae019338fc6",
        "bug_id": "skywalking_23",
        "file": [
            {
                "sha": "a7300e4190d3a68a7e0dacc729031f171e309752",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/CreateAopProxyInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/630e62312ce1dc37d60780351d15f68ff47dd5f0/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/CreateAopProxyInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/630e62312ce1dc37d60780351d15f68ff47dd5f0/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/CreateAopProxyInterceptor.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/CreateAopProxyInterceptor.java?ref=630e62312ce1dc37d60780351d15f68ff47dd5f0",
                "patch": "@@ -44,7 +44,8 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA\n         Object ret) throws Throwable {\n         AdvisedSupport advisedSupport = (AdvisedSupport)allArguments[0];\n \n-        if (EnhancedInstance.class.isAssignableFrom(advisedSupport.getTargetClass())) {\n+        Class targetClass = advisedSupport.getTargetClass();\n+        if (targetClass != null && EnhancedInstance.class.isAssignableFrom(targetClass)) {\n             return true;\n         }\n         return ret;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "Provide plugin for Solr-7.x(client) (#2730)\n\n* new branch for solrj-plugin\r\n\r\n* rollback and add module solrj-plugin\r\n\r\n* preparing to pr\r\n\r\n* to resolve reviewers' suggestions\r\n\r\n* remove unused code\r\n\r\n* remove unused code\r\n\r\n* remove unused comments\r\n\r\n* To avoid NPE\r\n\r\n* fix typo\r\n\r\n* Change to JRE6\r\n\r\n* fix pom.xml merge incorrectly. and java.net.URL instead of Regex\r\n\r\n* Using RuntimeContext instead of ThreadLocal\r\n\r\n* To reduce unnecessary tags\r\n\r\n* add test cases\r\n\r\n* fix validation fail\r\n\r\n* add solrj-plugin into component-libraries & Supported-list\r\n\r\n* to trace all patch to avoid recheck status of span\r\n\r\n* remove unnecessary properites\r\n\r\n* remove unnecessary tags\r\n\r\n* Add the config to document of setup",
        "commit": "https://github.com/apache/skywalking/commit/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
        "parent": "https://github.com/apache/skywalking/commit/3217ff1444a922a9f57fde64e5d73bbd8fcefe5c",
        "bug_id": "skywalking_24",
        "file": [
            {
                "sha": "c8dec42ee00f7c61cc0de856ed2c8f02dda527f4",
                "filename": "apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/ComponentsDefine.java",
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/ComponentsDefine.java",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/ComponentsDefine.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/ComponentsDefine.java?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "patch": "@@ -122,6 +122,8 @@\n \n     public static final OfficialComponent RESTEASY =  new OfficialComponent(62, \"RESTEasy\");\n \n+    public static final OfficialComponent SOLRJ =  new OfficialComponent(63, \"solrj\");\n+\n     private static ComponentsDefine INSTANCE = new ComponentsDefine();\n \n     private String[] components;\n@@ -179,6 +181,7 @@ public ComponentsDefine() {\n         addComponent(VERTX);\n         addComponent(SPRING_CLOUD_GATEWAY);\n         addComponent(RESTEASY);\n+        addComponent(SOLRJ);\n     }\n \n     private void addComponent(OfficialComponent component) {",
                "deletions": 0
            },
            {
                "sha": "a1e4f81dccc3ec9178d4e2e452a62991badad780",
                "filename": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java",
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "patch": "@@ -193,5 +193,17 @@\n              */\n             public static boolean USE_QUALIFIED_NAME_AS_OPERATION_NAME = false;\n         }\n+\n+        public static class SolrJ {\n+            /**\n+             * If true, trace all the query parameters(include deleteByIds and deleteByQuery) in Solr query request, default is false.\n+             */\n+            public static boolean TRACE_STATEMENT = false;\n+\n+            /**\n+             * If true, trace all the operation parameters in Solr request, default is false.\n+             */\n+            public static boolean TRACE_OPS_PARAMS = false;\n+        }\n     }\n }",
                "deletions": 0
            },
            {
                "sha": "71725d366f314ffc1015f47212baa80a2c1ccd9d",
                "filename": "apm-sniffer/apm-sdk-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/pom.xml",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/pom.xml?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "patch": "@@ -73,6 +73,7 @@\n         <module>dubbo-2.7.x-conflict-patch</module>\n         <module>vertx-plugins</module>\n         <module>resteasy-plugin</module>\n+        <module>solrj-7.x-plugin</module>\n     </modules>\n     <packaging>pom</packaging>\n \n@@ -182,4 +183,4 @@\n             </plugin>\n         </plugins>\n     </build>\n-</project>\n+</project>\n\\ No newline at end of file",
                "deletions": 1
            },
            {
                "sha": "31b931ade3bb9b44caa9282831c2cbc036103e4d",
                "filename": "apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/pom.xml",
                "status": "added",
                "changes": 47,
                "additions": 47,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/pom.xml?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "patch": "@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one or more\n+  ~ contributor license agreements.  See the NOTICE file distributed with\n+  ~ this work for additional information regarding copyright ownership.\n+  ~ The ASF licenses this file to You under the Apache License, Version 2.0\n+  ~ (the \"License\"); you may not use this file except in compliance with\n+  ~ the License.  You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  ~\n+  -->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>apm-sdk-plugin</artifactId>\n+        <groupId>org.apache.skywalking</groupId>\n+        <version>6.2.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>apm-solrj-7.x-plugin</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>solrj-7.x-plugin</name>\n+    <url>http://maven.apache.org</url>\n+\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <solr-solrj.version>7.7.1</solr-solrj.version>\n+\t</properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.apache.solr</groupId>\n+            <artifactId>solr-solrj</artifactId>\n+            <version>${solr-solrj.version}</version>\n+            <scope>provided</scope>\n+        </dependency>\n+    </dependencies>\n+\n+</project>\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "5c4d69a22bfb76f6959c32b835cb196aec69a605",
                "filename": "apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/SolrClientInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/SolrClientInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/SolrClientInterceptor.java",
                "status": "added",
                "changes": 229,
                "additions": 229,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/SolrClientInterceptor.java?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "patch": "@@ -0,0 +1,229 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.skywalking.apm.plugin.solrj;\n+\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.skywalking.apm.plugin.solrj.commons.SolrjInstance;\n+import org.apache.skywalking.apm.plugin.solrj.commons.SolrjTags;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.HttpSolrClient;\n+import org.apache.solr.client.solrj.request.AbstractUpdateRequest;\n+import org.apache.solr.client.solrj.request.QueryRequest;\n+import org.apache.solr.client.solrj.request.UpdateRequest;\n+import org.apache.solr.common.SolrDocumentList;\n+import org.apache.solr.common.SolrException;\n+import org.apache.solr.common.SolrInputDocument;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.ModifiableSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.params.UpdateParams;\n+import org.apache.solr.common.util.NamedList;\n+\n+import java.lang.reflect.Method;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class SolrClientInterceptor implements InstanceMethodsAroundInterceptor, InstanceConstructorInterceptor {\n+    private static final String DB_TYPE = \"Solr\";\n+\n+    @Override\n+    public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {\n+        SolrjInstance instance = new SolrjInstance();\n+        HttpSolrClient client = (HttpSolrClient) objInst;\n+\n+        try {\n+            URL url = new URL(client.getBaseURL());\n+            instance.setRemotePeer(url.getHost() + \":\" + url.getPort());\n+\n+            String path = url.getPath();\n+            int idx = path.lastIndexOf('/');\n+            if (idx > 0) {\n+                instance.setCollection(path.substring(idx + 1));\n+            }\n+        } catch (MalformedURLException ignore) {\n+        }\n+        objInst.setSkyWalkingDynamicField(instance);\n+    }\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+                             MethodInterceptResult result) throws Throwable {\n+        SolrRequest<?> request = (SolrRequest<?>) allArguments[0];\n+        SolrjInstance instance = (SolrjInstance) objInst.getSkyWalkingDynamicField();\n+\n+        SolrParams params = getParams(request.getParams());\n+        String collection = getCollection(instance, allArguments[2]);\n+\n+        if (\"/update\".equals(request.getPath())) {\n+            AbstractUpdateRequest update = (AbstractUpdateRequest) request;\n+\n+            AbstractUpdateRequest.ACTION action = update.getAction();\n+            if (action == null) {\n+                if (update instanceof UpdateRequest) {\n+                    AbstractSpan span = null;\n+\n+                    UpdateRequest ur = (UpdateRequest) update;\n+                    List<SolrInputDocument> documents = ur.getDocuments();\n+                    if (documents == null) {\n+                        String actionName = \"DELETE_BY_IDS\";\n+\n+                        List<String> deleteBy = ur.getDeleteById();\n+                        if (deleteBy == null) {\n+                            actionName = \"DELETE_BY_QUERY\";\n+                            deleteBy = ur.getDeleteQuery();\n+                        }\n+                        if (deleteBy == null) {\n+                            deleteBy = new ArrayList<String>();\n+                        }\n+                        String operator = getOperatorNameWithAction(collection, request.getPath(), actionName);\n+                        span = getSpan(operator, instance.getRemotePeer());\n+                        if (Config.Plugin.SolrJ.TRACE_STATEMENT) {\n+                            span.tag(Tags.DB_STATEMENT, deleteBy.toString());\n+                        }\n+                    } else {\n+                        String operator = getOperatorNameWithAction(collection, request.getPath(), \"ADD\");\n+                        span = getSpan(operator, instance.getRemotePeer());\n+                        if (Config.Plugin.SolrJ.TRACE_STATEMENT) {\n+                            span.tag(SolrjTags.TAG_DOCS_SIZE, String.valueOf(documents.size()));\n+                        }\n+                    }\n+                    if (Config.Plugin.SolrJ.TRACE_OPS_PARAMS) {\n+                        span.tag(SolrjTags.TAG_COMMIT_WITHIN, String.valueOf(ur.getCommitWithin()));\n+                    }\n+                } else {\n+                    getSpan(getOperatorName(collection, request.getPath()), instance.getRemotePeer());\n+                }\n+            } else {\n+                String operator = getOperatorNameWithAction(collection, request.getPath(), action.name());\n+                AbstractSpan span = getSpan(operator, instance.getRemotePeer());\n+\n+                if (Config.Plugin.SolrJ.TRACE_OPS_PARAMS) {\n+                    if (action == AbstractUpdateRequest.ACTION.COMMIT) {\n+                        span.tag(SolrjTags.TAG_SOFT_COMMIT, params.get(UpdateParams.SOFT_COMMIT, \"\"));\n+                    } else {\n+                        span.tag(SolrjTags.TAG_MAX_OPTIMIZE_SEGMENTS, params.get(UpdateParams.MAX_OPTIMIZE_SEGMENTS, \"1\"));\n+                    }\n+                }\n+            }\n+        } else if (request instanceof QueryRequest) {\n+            AbstractSpan span = getSpan(getOperatorName(collection, request.getPath()), instance.getRemotePeer());\n+\n+            span.tag(SolrjTags.TAG_START, params.get(CommonParams.START, \"0\"));\n+            span.tag(SolrjTags.TAG_QT, params.get(CommonParams.QT, request.getPath()));\n+\n+            if (Config.Plugin.SolrJ.TRACE_STATEMENT) {\n+                span.tag(Tags.DB_STATEMENT, toQueryString(params));\n+            }\n+        } else {\n+            getSpan(getOperatorName(collection, request.getPath()), instance.getRemotePeer());\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                              Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        if (!ContextManager.isActive()) {\n+            return ret;\n+        }\n+\n+        AbstractSpan span = ContextManager.activeSpan();\n+        if (ret != null) {\n+            NamedList<Object> result = (NamedList<Object>) ret;\n+            NamedList<Object> header = (NamedList<Object>) result.get(\"responseHeader\");\n+\n+            if (header != null) {\n+                span.tag(SolrjTags.TAG_Q_TIME, String.valueOf(header.get(\"QTime\")));\n+            }\n+            SolrDocumentList list = (SolrDocumentList) result.get(\"response\");\n+            if (list != null) {\n+                span.tag(SolrjTags.TAG_NUM_FOUND, String.valueOf(list.getNumFound()));\n+            }\n+        }\n+\n+        ContextManager.stopSpan();\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+        if (ContextManager.isActive()) {\n+            AbstractSpan span = ContextManager.activeSpan();\n+            int code = 500;\n+            if (t instanceof SolrException) {\n+                code = ((SolrException) t).code();\n+            }\n+            span.tag(SolrjTags.TAG_STATUS, String.valueOf(code));\n+            span.errorOccurred().log(t);\n+        }\n+    }\n+\n+    private static final AbstractSpan getSpan(String operatorName, String remotePeer) {\n+        return ContextManager.createExitSpan(operatorName, remotePeer)\n+                .setComponent(ComponentsDefine.SOLRJ)\n+                .setLayer(SpanLayer.DB)\n+                .tag(Tags.DB_TYPE, DB_TYPE);\n+    }\n+\n+    private static final String getOperatorNameWithAction(String collection, String path, String action) {\n+        return String.format(\"solrJ/%s%s/%s\", collection, path, action);\n+    }\n+\n+    private static final String getOperatorName(String collection, String path) {\n+        return String.format(\"solrJ/%s%s\", collection, path);\n+    }\n+\n+    private static final String getCollection(SolrjInstance instance, Object argument) {\n+        if (null == argument) {\n+            return instance.getCollection();\n+        }\n+        return String.valueOf(argument);\n+    }\n+\n+    private static final SolrParams getParams(SolrParams params) {\n+        if (params == null) {\n+            return new ModifiableSolrParams();\n+        }\n+        return params;\n+    }\n+\n+    private static final String toQueryString(SolrParams params) {\n+        final StringBuilder sb = new StringBuilder(128);\n+        boolean first = true;\n+        for (final Iterator<String> it = params.getParameterNamesIterator(); it.hasNext();) {\n+            final String name = it.next();\n+            for (String val : params.getParams(name)) {\n+                sb.append(first ? '?' : '&').append(name).append('=').append(val);\n+                first = false;\n+            }\n+        }\n+        return sb.toString();\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "d6c00b5662656fb4ae5fc6a987828569fa638f7e",
                "filename": "apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/SolrConnectorInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/SolrConnectorInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/SolrConnectorInterceptor.java",
                "status": "added",
                "changes": 59,
                "additions": 59,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/SolrConnectorInterceptor.java?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "patch": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.skywalking.apm.plugin.solrj;\n+\n+import org.apache.http.client.methods.HttpUriRequest;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+public class SolrConnectorInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+                             MethodInterceptResult result) throws Throwable {\n+        HttpUriRequest request = (HttpUriRequest) allArguments[0];\n+\n+        ContextCarrier carrier = new ContextCarrier();\n+        ContextManager.inject(carrier);\n+\n+        CarrierItem items = carrier.items();\n+        while (items.hasNext()) {\n+            items = items.next();\n+            request.setHeader(items.getHeadKey(), items.getHeadValue());\n+        }\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+                              Object ret) throws Throwable {\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+        if (ContextManager.isActive()) {\n+            ContextManager.activeSpan().errorOccurred().log(t);\n+        }\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "91e4cfb362f065c5bf644cd7dd44f9bffa8c2571",
                "filename": "apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/commons/SolrjInstance.java",
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/commons/SolrjInstance.java",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/commons/SolrjInstance.java",
                "status": "added",
                "changes": 39,
                "additions": 39,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/commons/SolrjInstance.java?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.skywalking.apm.plugin.solrj.commons;\n+\n+public class SolrjInstance {\n+    private String collection = \"Unknown\";\n+    private String remotePeer = \"Unknown\";\n+\n+    public String getCollection() {\n+        return collection;\n+    }\n+\n+    public void setCollection(String collection) {\n+        this.collection = collection;\n+    }\n+\n+    public String getRemotePeer() {\n+        return remotePeer;\n+    }\n+\n+    public void setRemotePeer(String remotePeer) {\n+        this.remotePeer = remotePeer;\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "3040b850b5291ec1384c65711c2fa3a20aceaa0b",
                "filename": "apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/commons/SolrjTags.java",
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/commons/SolrjTags.java",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/commons/SolrjTags.java",
                "status": "added",
                "changes": 39,
                "additions": 39,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/commons/SolrjTags.java?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.skywalking.apm.plugin.solrj.commons;\n+\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+\n+public class SolrjTags {\n+    public static StringTag TAG_QT = new StringTag(\"qt\");\n+    public static StringTag TAG_COLLECTION = new StringTag(\"collection\");\n+\n+    public static StringTag TAG_Q_TIME = new StringTag(\"QTime\");\n+    public static StringTag TAG_STATUS = new StringTag(\"status\");\n+\n+    public static StringTag TAG_START = new StringTag(\"start\");\n+    public static StringTag TAG_SORT_BY = new StringTag(\"sort\");\n+    public static StringTag TAG_NUM_FOUND = new StringTag(\"numFound\");\n+\n+    public static StringTag TAG_SOFT_COMMIT = new StringTag(\"softCommit\");\n+    public static StringTag TAG_COMMIT_WITHIN = new StringTag(\"commitWithin\");\n+    public static StringTag TAG_MAX_OPTIMIZE_SEGMENTS = new StringTag(\"maxOptimizeSegs\");\n+\n+    public static StringTag TAG_DOCS_SIZE = new StringTag(\"docsSize\");\n+    public static StringTag TAG_DELETE_VALUE = new StringTag(\"delete.by\");\n+}",
                "deletions": 0
            },
            {
                "sha": "56e752b07282d5bedee2f6cdfc3707961f37c3f7",
                "filename": "apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/define/HttpClientInstrumentation.java",
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/define/HttpClientInstrumentation.java",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/define/HttpClientInstrumentation.java",
                "status": "added",
                "changes": 64,
                "additions": 64,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/define/HttpClientInstrumentation.java?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "patch": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.skywalking.apm.plugin.solrj.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.apache.http.client.methods.HttpUriRequest;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+import org.apache.skywalking.apm.agent.core.plugin.match.NameMatch;\n+\n+public class HttpClientInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {\n+    private static String ENHANCE_CLASS = \"org.apache.http.impl.client.CloseableHttpClient\";\n+\n+    @Override\n+    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {\n+        return new ConstructorInterceptPoint[]{};\n+    }\n+\n+    @Override\n+    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {\n+        return new InstanceMethodsInterceptPoint[]{\n+            new InstanceMethodsInterceptPoint() {\n+                @Override\n+                public boolean isOverrideArgs() {\n+                    return false;\n+                }\n+\n+                @Override\n+                public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                    return ElementMatchers.named(\"execute\").and(ElementMatchers.takesArgument(0, HttpUriRequest.class));\n+                }\n+\n+                @Override\n+                public String getMethodsInterceptor() {\n+                    return \"org.apache.skywalking.apm.plugin.solrj.SolrConnectorInterceptor\";\n+                }\n+            }\n+        };\n+    }\n+\n+    @Override\n+    protected ClassMatch enhanceClass() {\n+        return NameMatch.byName(ENHANCE_CLASS);\n+    }\n+}\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "75f3a2e27b83c72e301c29dae91ddf8e5717527c",
                "filename": "apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/define/SolrClientInstrumentation.java",
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/define/SolrClientInstrumentation.java",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/define/SolrClientInstrumentation.java",
                "status": "added",
                "changes": 75,
                "additions": 75,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/define/SolrClientInstrumentation.java?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "patch": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.skywalking.apm.plugin.solrj.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+import org.apache.skywalking.apm.agent.core.plugin.match.NameMatch;\n+\n+public class SolrClientInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {\n+\n+    @Override\n+    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {\n+        return new ConstructorInterceptPoint[]{\n+            new ConstructorInterceptPoint() {\n+\n+                @Override\n+                public String getConstructorInterceptor() {\n+                    return \"org.apache.skywalking.apm.plugin.solrj.SolrClientInterceptor\";\n+                }\n+\n+                @Override\n+                public ElementMatcher<MethodDescription> getConstructorMatcher() {\n+                    return ElementMatchers.any();\n+                }\n+            }\n+        };\n+    }\n+\n+    @Override\n+    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {\n+        return new InstanceMethodsInterceptPoint[]{\n+            new InstanceMethodsInterceptPoint() {\n+                @Override\n+                public boolean isOverrideArgs() {\n+                    return false;\n+                }\n+\n+                @Override\n+                public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                    return ElementMatchers.named(\"request\").and(ElementMatchers.takesArguments(3));\n+                }\n+\n+                @Override\n+                public String getMethodsInterceptor() {\n+                    return \"org.apache.skywalking.apm.plugin.solrj.SolrClientInterceptor\";\n+                }\n+            }\n+        };\n+    }\n+\n+    @Override\n+    protected ClassMatch enhanceClass() {\n+        return NameMatch.byName(\"org.apache.solr.client.solrj.impl.HttpSolrClient\");\n+    }\n+}\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "fd2fd6cd0b67f5f4a98a1bde79440ecd817569f3",
                "filename": "apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/resources/skywalking-plugin.def",
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/resources/skywalking-plugin.def",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/resources/skywalking-plugin.def",
                "status": "added",
                "changes": 18,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/resources/skywalking-plugin.def?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "patch": "@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+solrj-7.x=org.apache.skywalking.apm.plugin.solrj.define.SolrClientInstrumentation\n+solrj-7.x=org.apache.skywalking.apm.plugin.solrj.define.HttpClientInstrumentation\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "c7311a8c6b884617add3cca28f1aac104c4df0c6",
                "filename": "apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/solrj/SolrClientInterceptorTest.java",
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/solrj/SolrClientInterceptorTest.java",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/solrj/SolrClientInterceptorTest.java",
                "status": "added",
                "changes": 428,
                "additions": 428,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/solrj/SolrClientInterceptorTest.java?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "patch": "@@ -0,0 +1,428 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.solrj;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.test.helper.SegmentHelper;\n+import org.apache.skywalking.apm.agent.test.tools.*;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.skywalking.apm.plugin.solrj.commons.SolrjInstance;\n+import org.apache.solr.client.solrj.ResponseParser;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.HttpSolrClient;\n+import org.apache.solr.client.solrj.request.AbstractUpdateRequest;\n+import org.apache.solr.client.solrj.request.QueryRequest;\n+import org.apache.solr.client.solrj.request.UpdateRequest;\n+import org.apache.solr.common.*;\n+import org.apache.solr.common.params.ModifiableSolrParams;\n+import org.apache.solr.common.util.NamedList;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.powermock.modules.junit4.PowerMockRunnerDelegate;\n+\n+import java.lang.reflect.Method;\n+import java.util.List;\n+\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(PowerMockRunner.class)\n+@PowerMockRunnerDelegate(TracingSegmentRunner.class)\n+public class SolrClientInterceptorTest {\n+    SolrClientInterceptor interceptor = new SolrClientInterceptor();\n+\n+    @SegmentStoragePoint\n+    private SegmentStorage segmentStorage;\n+\n+    @Rule\n+    public AgentServiceRule serviceRule = new AgentServiceRule();\n+\n+    @Mock\n+    private HttpSolrClient client;\n+\n+    @Mock\n+    private Method method;\n+\n+    @Mock\n+    private EnhancedInstance enhancedInstance;\n+\n+    private Object[] arguments = null;\n+    private Class[] argumentType = new Class[] {\n+        SolrRequest.class,\n+        ResponseParser.class,\n+        String.class\n+    };\n+    private String collection = null;\n+    private HttpSolrClient.Builder builder;\n+\n+    @Mock\n+    private SolrjInstance instance;\n+    private NamedList<Object> header;\n+\n+    @Before\n+    public void setup() throws Exception {\n+        builder = new HttpSolrClient.Builder().withBaseSolrUrl(\"http://solr-server:8983/solr/collection\");\n+        enhancedInstance = new EnhanceHttpSolrClient(builder);\n+\n+        when(instance.getCollection()).thenReturn(\"collection\");\n+        when(instance.getRemotePeer()).thenReturn(\"solr-server:8983\");\n+        enhancedInstance.setSkyWalkingDynamicField(instance);\n+\n+        header = new NamedList<Object>();\n+        header.add(\"status\", 0);\n+        header.add(\"QTime\", 5);\n+\n+//        Config.Plugin.SolrJ.TRACE_STATEMENT = true;\n+//        Config.Plugin.SolrJ.TRACE_OPS_PARAMS = true;\n+    }\n+\n+\n+    @Test\n+    public void testConstructor() throws Throwable {\n+        arguments = new Object[] {builder};\n+        interceptor.onConstruct(enhancedInstance, arguments);\n+        SolrjInstance instance = (SolrjInstance) enhancedInstance.getSkyWalkingDynamicField();\n+        Assert.assertEquals(instance.getRemotePeer(), \"solr-server:8983\");\n+        Assert.assertEquals(instance.getCollection(), \"collection\");\n+    }\n+\n+\n+    @Test\n+    public void testUpdateWithAdd() throws Throwable {\n+        UpdateRequest request = new UpdateRequest();\n+        List<SolrInputDocument> docs = Lists.newArrayList();\n+        for (int start = 0; start < 100; start++) {\n+            SolrInputDocument doc = new SolrInputDocument();\n+            doc.addField(\"id\", start);\n+            docs.add(doc);\n+        }\n+        arguments = new Object[] {\n+            request.add(docs),\n+            null,\n+            collection\n+        };\n+        interceptor.beforeMethod(enhancedInstance, method, arguments, argumentType, null);\n+        interceptor.afterMethod(enhancedInstance, method, arguments, argumentType, getResponse());\n+\n+        List<TraceSegment> segments = segmentStorage.getTraceSegments();\n+        Assert.assertEquals(segments.size(), 1);\n+\n+        List<AbstractTracingSpan> spans = SegmentHelper.getSpans(segments.get(0));\n+        Assert.assertEquals(spans.size(), 1);\n+\n+        AbstractTracingSpan span = spans.get(0);\n+        int pox = 0;\n+        if (Config.Plugin.SolrJ.TRACE_STATEMENT) {\n+            SpanAssert.assertTag(span, ++pox, \"100\");\n+        }\n+        if (Config.Plugin.SolrJ.TRACE_OPS_PARAMS) {\n+            SpanAssert.assertTag(span, ++pox, \"-1\");\n+        }\n+        spanCommonAssert(span, pox,\"solrJ/collection/update/ADD\");\n+    }\n+\n+    @Test\n+    public void testUpdateWithCommit() throws Throwable {\n+        final boolean softCommit = false;\n+        AbstractUpdateRequest request = (new UpdateRequest()).setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true, false);\n+        arguments = new Object[]{\n+            request,\n+            null,\n+            collection\n+        };\n+        interceptor.beforeMethod(enhancedInstance, method, arguments, argumentType, null);\n+        interceptor.afterMethod(enhancedInstance, method, arguments, argumentType, getResponse());\n+\n+        List<TraceSegment> segments = segmentStorage.getTraceSegments();\n+        Assert.assertEquals(segments.size(), 1);\n+\n+        List<AbstractTracingSpan> spans = SegmentHelper.getSpans(segments.get(0));\n+        Assert.assertEquals(spans.size(), 1);\n+\n+        int start = 0;\n+        AbstractTracingSpan span = spans.get(0);\n+        if (Config.Plugin.SolrJ.TRACE_OPS_PARAMS) {\n+            SpanAssert.assertTag(span, ++start, String.valueOf(softCommit));\n+        }\n+        spanCommonAssert(span, start, \"solrJ/collection/update/COMMIT\");\n+    }\n+\n+    @Test\n+    public void testUpdateWithOptimize() throws Throwable {\n+        final int maxSegments = 1;\n+        AbstractUpdateRequest request = (new UpdateRequest()).setAction(AbstractUpdateRequest.ACTION.OPTIMIZE, false, true, maxSegments);\n+        arguments = new Object[]{\n+            request,\n+            null,\n+            collection\n+        };\n+        interceptor.beforeMethod(enhancedInstance, method, arguments, argumentType, null);\n+        interceptor.afterMethod(enhancedInstance, method, arguments, argumentType, getResponse());\n+\n+        List<TraceSegment> segments = segmentStorage.getTraceSegments();\n+        List<AbstractTracingSpan> spans = SegmentHelper.getSpans(segments.get(0));\n+\n+        Assert.assertEquals(segments.size(), 1);\n+        Assert.assertEquals(spans.size(), 1);\n+\n+        AbstractTracingSpan span = spans.get(0);\n+        int start = 0;\n+        if (Config.Plugin.SolrJ.TRACE_OPS_PARAMS) {\n+            SpanAssert.assertTag(span, ++start, String.valueOf(maxSegments));\n+        }\n+        spanCommonAssert(span, start, \"solrJ/collection/update/OPTIMIZE\");\n+    }\n+\n+    @Test\n+    public void testQuery() throws Throwable {\n+        QueryRequest request = new QueryRequest();\n+        arguments = new Object[] {\n+            request,\n+            null,\n+            collection\n+        };\n+\n+        interceptor.beforeMethod(enhancedInstance, method, arguments, argumentType, null);\n+        interceptor.afterMethod(enhancedInstance, method, arguments, argumentType, getQueryResponse());\n+\n+        List<TraceSegment> segments = segmentStorage.getTraceSegments();\n+        List<AbstractTracingSpan> spans = SegmentHelper.getSpans(segments.get(0));\n+\n+        Assert.assertEquals(segments.size(), 1);\n+        Assert.assertEquals(spans.size(), 1);\n+\n+        AbstractTracingSpan span = spans.get(0);\n+        querySpanAssert(span, \"/select\", 100, \"solrJ/collection/select\");\n+    }\n+\n+    @Test\n+    public void testGet() throws Throwable {\n+        ModifiableSolrParams reqParams = new ModifiableSolrParams();\n+        if (StringUtils.isEmpty(reqParams.get(\"qt\"))) {\n+            reqParams.set(\"qt\", new String[]{\"/get\"});\n+        }\n+        reqParams.set(\"ids\", new String[] {\"99\", \"98\"});\n+        QueryRequest request = new QueryRequest(reqParams);\n+\n+        arguments = new Object[] {\n+            request,\n+            null,\n+            collection\n+        };\n+        interceptor.beforeMethod(enhancedInstance, method, arguments, argumentType, null);\n+        interceptor.afterMethod(enhancedInstance, method, arguments, argumentType, getGetResponse());\n+\n+        List<TraceSegment> segments = segmentStorage.getTraceSegments();\n+        List<AbstractTracingSpan> spans = SegmentHelper.getSpans(segments.get(0));\n+        Assert.assertEquals(segments.size(), 1);\n+        Assert.assertEquals(spans.size(), 1);\n+\n+        AbstractTracingSpan span = spans.get(0);\n+        querySpanAssert(span, \"/get\", 1, \"solrJ/collection/get\");\n+    }\n+\n+    @Test\n+    public void testDeleteById() throws Throwable {\n+        UpdateRequest request = new UpdateRequest();\n+        arguments = new Object[] {\n+            request.deleteById(\"12\"),\n+            null,\n+            collection\n+        };\n+        interceptor.beforeMethod(enhancedInstance, method, arguments, argumentType, null);\n+        interceptor.afterMethod(enhancedInstance, method, arguments, argumentType, getResponse());\n+\n+        List<TraceSegment> segments = segmentStorage.getTraceSegments();\n+        List<AbstractTracingSpan> spans = SegmentHelper.getSpans(segments.get(0));\n+\n+        Assert.assertEquals(segments.size(), 1);\n+        Assert.assertEquals(spans.size(), 1);\n+\n+        AbstractTracingSpan span = spans.get(0);\n+        spanDeleteAssert(span, \"solrJ/collection/update/DELETE_BY_IDS\", \"[12]\");\n+    }\n+\n+    @Test\n+    public void testDeleteByQuery() throws Throwable {\n+        UpdateRequest request = new UpdateRequest();\n+        arguments = new Object[] {\n+            request.deleteByQuery(\"id:[2 TO 5]\"),\n+            null,\n+            collection\n+        };\n+        interceptor.beforeMethod(enhancedInstance, method, arguments, argumentType, null);\n+        interceptor.afterMethod(enhancedInstance, method, arguments, argumentType, getResponse());\n+\n+        List<TraceSegment> segments = segmentStorage.getTraceSegments();\n+        List<AbstractTracingSpan> spans = SegmentHelper.getSpans(segments.get(0));\n+\n+        Assert.assertEquals(segments.size(), 1);\n+        Assert.assertEquals(spans.size(), 1);\n+\n+        AbstractTracingSpan span = spans.get(0);\n+        spanDeleteAssert(span, \"solrJ/collection/update/DELETE_BY_QUERY\", \"[id:[2 TO 5]]\");\n+    }\n+\n+    @Test\n+    public void testException() throws Throwable {\n+        QueryRequest request = new QueryRequest();\n+        arguments = new Object[] {\n+            request,\n+            null,\n+            collection\n+        };\n+        NamedList<Object> response = new NamedList<Object>();\n+        NamedList<Object> header = new NamedList<Object>();\n+        header.add(\"status\", 500);\n+        header.add(\"QTime\", 5);\n+        response.add(\"responseHeader\", header);\n+\n+        interceptor.beforeMethod(enhancedInstance, method, arguments, argumentType, null);\n+        interceptor.handleMethodException(enhancedInstance, method, arguments, argumentType,\n+                new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"for test\",  new Exception()));\n+        interceptor.afterMethod(enhancedInstance, method, arguments, argumentType, response);\n+\n+        List<TraceSegment> segments = segmentStorage.getTraceSegments();\n+        List<AbstractTracingSpan> spans = SegmentHelper.getSpans(segments.get(0));\n+\n+        Assert.assertEquals(segments.size(), 1);\n+        Assert.assertEquals(spans.size(), 1);\n+\n+        AbstractTracingSpan span = spans.get(0);\n+        SpanAssert.assertOccurException(span, true);\n+    }\n+\n+\n+\n+    private void querySpanAssert(AbstractSpan span, String qt, int numFound, String operationName) {\n+        Assert.assertEquals(span.getOperationName(), operationName);\n+        SpanAssert.assertTag(span, 0, \"Solr\");\n+        SpanAssert.assertTag(span, 1, \"0\");\n+        SpanAssert.assertTag(span, 2, qt);\n+\n+        int start = 3;\n+        if (Config.Plugin.SolrJ.TRACE_STATEMENT) {\n+            start++;\n+        }\n+        SpanAssert.assertTag(span, start++, \"5\");\n+        SpanAssert.assertTag(span, start++, String.valueOf(numFound));\n+    }\n+\n+    private void spanCommonAssert(AbstractSpan span, int start, String operationName) {\n+        SpanAssert.assertComponent(span, ComponentsDefine.SOLRJ);\n+        SpanAssert.assertOccurException(span, false);\n+        SpanAssert.assertLogSize(span, 0);\n+        SpanAssert.assertLayer(span, SpanLayer.DB);\n+\n+        SpanAssert.assertTag(span, 0, \"Solr\");\n+        SpanAssert.assertTag(span, start + 1, \"5\");\n+\n+        Assert.assertEquals(span.getOperationName(), operationName);\n+    }\n+\n+    private void spanDeleteAssert(AbstractSpan span, String operationName, String statement) {\n+        Assert.assertEquals(span.getOperationName(), operationName);\n+        SpanAssert.assertComponent(span, ComponentsDefine.SOLRJ);\n+        SpanAssert.assertOccurException(span, false);\n+        SpanAssert.assertLogSize(span, 0);\n+        SpanAssert.assertLayer(span, SpanLayer.DB);\n+\n+        SpanAssert.assertTag(span, 0, \"Solr\");\n+\n+        int start = 0;\n+        if (Config.Plugin.SolrJ.TRACE_STATEMENT) {\n+            SpanAssert.assertTag(span, ++start, statement);\n+        }\n+        if (Config.Plugin.SolrJ.TRACE_OPS_PARAMS) {\n+            SpanAssert.assertTag(span, ++start, \"-1\");\n+        }\n+\n+        SpanAssert.assertTag(span, start + 1, \"5\");\n+    }\n+\n+    private NamedList<Object> getResponse() {\n+        NamedList<Object> response = new NamedList<Object>();\n+        response.add(\"responseHeader\", header);\n+        return response;\n+    }\n+\n+    private NamedList<Object> getQueryResponse() {\n+        NamedList<Object> response = new NamedList<Object>();\n+        response.add(\"responseHeader\", header);\n+        SolrDocumentList list = new SolrDocumentList();\n+        list.setStart(0);\n+        list.setNumFound(100);\n+        list.setMaxScore(.0f);\n+\n+        for (int start = 0; start < 10; start++) {\n+            SolrDocument doc = new SolrDocument();\n+            doc.addField(\"id\", start);\n+            doc.addField(\"_version\", 1634676349644832768L);\n+            list.add(doc);\n+        }\n+        response.add(\"response\", list);\n+        return response;\n+    }\n+\n+    private NamedList<Object> getGetResponse() {\n+        NamedList<Object> response = new NamedList<Object>();\n+        response.add(\"responseHeader\", header);\n+        SolrDocumentList list = new SolrDocumentList();\n+        list.setStart(0);\n+        list.setNumFound(1);\n+        list.setMaxScore(.0f);\n+\n+        SolrDocument doc = new SolrDocument();\n+        doc.addField(\"id\", 1);\n+        doc.addField(\"_version\", 1634676349644832768L);\n+        list.add(doc);\n+\n+        response.add(\"response\", list);\n+        return response;\n+    }\n+\n+    class EnhanceHttpSolrClient extends HttpSolrClient implements EnhancedInstance {\n+        Object value = null;\n+\n+        protected EnhanceHttpSolrClient(Builder builder) {\n+            super(builder);\n+        }\n+\n+        @Override\n+        public Object getSkyWalkingDynamicField() {\n+            return value;\n+        }\n+\n+        @Override\n+        public void setSkyWalkingDynamicField(Object value) {\n+            this.value = value;\n+        }\n+    }\n+\n+}\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "9b727d5d2a2492be7b2aef047c2280c40f9b2d76",
                "filename": "docs/en/setup/service-agent/java-agent/README.md",
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/docs/en/setup/service-agent/java-agent/README.md",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/docs/en/setup/service-agent/java-agent/README.md",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/docs/en/setup/service-agent/java-agent/README.md?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "patch": "@@ -82,6 +82,8 @@ property key | Description | Default |\n `plugin.elasticsearch.trace_dsl`|If true, trace all the DSL(Domain Specific Language) in ElasticSearch access, default is false.|`false`|\n `plugin.springmvc.use_qualified_name_as_endpoint_name`|If true, the fully qualified method name will be used as the endpoint name instead of the request URL, default is false.|`false`|\n `plugin.toolit.use_qualified_name_as_operation_name`|If true, the fully qualified method name will be used as the operation name instead of the given operation name, default is false.|`false`|\n+`plugin.solrj.trace_statement`|If true, trace all the query parameters(include deleteByIds and deleteByQuery) in Solr query request, default is false.|`false`|\n+`plugin.solrj.trace_ops_params`|If true, trace all the operation parameters in Solr request, default is false.|`false`|\n \n ## Optional Plugins\n Java agent plugins are all pluggable. Optional plugins could be provided in `optional-plugins` folder under agent or 3rd party repositores.",
                "deletions": 0
            },
            {
                "sha": "dcfda3d8ca733087b8130aa1da3e844249107483",
                "filename": "docs/en/setup/service-agent/java-agent/Supported-list.md",
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/docs/en/setup/service-agent/java-agent/Supported-list.md",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/docs/en/setup/service-agent/java-agent/Supported-list.md",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/docs/en/setup/service-agent/java-agent/Supported-list.md?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "patch": "@@ -53,6 +53,7 @@\n     * [Xmemcached](https://github.com/killme2008/xmemcached) 2.x\n   * [Elasticsearch](https://github.com/elastic/elasticsearch)\n     * [transport-client](https://github.com/elastic/elasticsearch/tree/master/client/transport) 5.2.x-5.6.x\n+  * [SolrJ](https://lucene.apache.org/solr) 7.0.0-7.7.1\n * Service Discovery\n   * [Netflix Eureka](https://github.com/Netflix/eureka)\n * Distributed Coordination",
                "deletions": 0
            },
            {
                "sha": "86d29e5206138a66ebb5f043bc7f194cb58e4b9a",
                "filename": "oap-server/server-core/src/test/resources/component-libraries.yml",
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/oap-server/server-core/src/test/resources/component-libraries.yml",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/oap-server/server-core/src/test/resources/component-libraries.yml",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-core/src/test/resources/component-libraries.yml?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "patch": "@@ -198,6 +198,12 @@ spring-cloud-gateway:\n RESTEasy:\n   id: 62\n   languages: Java\n+SolrJ:\n+  id: 63\n+  languages: Java\n+Solr:\n+  id: 64\n+  languages: Java\n \n # .NET/.NET Core components\n # [3000, 4000) for C#/.NET only\n@@ -295,3 +301,4 @@ Component-Server-Mappings:\n   Pomelo.EntityFrameworkCore.MySql: Mysql\n   Npgsql.EntityFrameworkCore.PostgreSQL: PostgreSQL\n   transport-client: Elasticsearch\n+  SolrJ: Solr",
                "deletions": 0
            },
            {
                "sha": "87e213f1ad7e3894ff977d85a338c37d4132a91e",
                "filename": "oap-server/server-starter/src/main/resources/component-libraries.yml",
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/oap-server/server-starter/src/main/resources/component-libraries.yml",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/oap-server/server-starter/src/main/resources/component-libraries.yml",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-starter/src/main/resources/component-libraries.yml?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "patch": "@@ -216,6 +216,12 @@ spring-cloud-gateway:\n RESTEasy:\n   id: 62\n   languages: Java\n+SolrJ:\n+  id: 63\n+  languages: Java\n+Solr:\n+  id: 64\n+  languages: Java\n \n # .NET/.NET Core components\n # [3000, 4000) for C#/.NET only\n@@ -315,3 +321,4 @@ Component-Server-Mappings:\n   Pomelo.EntityFrameworkCore.MySql: Mysql\n   Npgsql.EntityFrameworkCore.PostgreSQL: PostgreSQL\n   transport-client: Elasticsearch\n+  SolrJ: Solr",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "fix NPE when has connection exception (#1253)",
        "commit": "https://github.com/apache/skywalking/commit/d55640454ee63b151272f043697f8779bb6cdd50",
        "parent": "https://github.com/apache/skywalking/commit/e249e0607d461b609eb76be48c046d114b34bfd5",
        "bug_id": "skywalking_25",
        "file": [
            {
                "sha": "d9a9ae7abf8867788b105bbe7431a40b6e76648b",
                "filename": "apm-sniffer/apm-sdk-plugin/okhttp-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/okhttp/v3/RealCallInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/d55640454ee63b151272f043697f8779bb6cdd50/apm-sniffer/apm-sdk-plugin/okhttp-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/okhttp/v3/RealCallInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/d55640454ee63b151272f043697f8779bb6cdd50/apm-sniffer/apm-sdk-plugin/okhttp-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/okhttp/v3/RealCallInterceptor.java",
                "status": "modified",
                "changes": 13,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/okhttp-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/okhttp/v3/RealCallInterceptor.java?ref=d55640454ee63b151272f043697f8779bb6cdd50",
                "patch": "@@ -100,12 +100,13 @@ public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments,\n         Class<?>[] argumentsTypes, Object ret) throws Throwable {\n         Response response = (Response)ret;\n-        int statusCode = response.code();\n-\n-        AbstractSpan span = ContextManager.activeSpan();\n-        if (statusCode >= 400) {\n-            span.errorOccurred();\n-            Tags.STATUS_CODE.set(span, Integer.toString(statusCode));\n+        if (response != null) {\n+            int statusCode = response.code();\n+            AbstractSpan span = ContextManager.activeSpan();\n+            if (statusCode >= 400) {\n+                span.errorOccurred();\n+                Tags.STATUS_CODE.set(span, Integer.toString(statusCode));\n+            }\n         }\n \n         ContextManager.stopSpan();",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "Fix #1488: Fix NPE when the targetAop class is null (#1507)",
        "commit": "https://github.com/apache/skywalking/commit/5eea1ae7670b58acaa7278ee3b3e730235d17bc7",
        "parent": "https://github.com/apache/skywalking/commit/6295af53fbd32559dbcaf8d2cb4d59dd6a32c7e7",
        "bug_id": "skywalking_26",
        "file": [
            {
                "sha": "5c99a886904ef3eae8d455c155c42390186dc71a",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/AopExpressionMatchInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/5eea1ae7670b58acaa7278ee3b3e730235d17bc7/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/AopExpressionMatchInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/5eea1ae7670b58acaa7278ee3b3e730235d17bc7/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/AopExpressionMatchInterceptor.java",
                "status": "modified",
                "changes": 27,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/AopExpressionMatchInterceptor.java?ref=5eea1ae7670b58acaa7278ee3b3e730235d17bc7",
                "patch": "@@ -15,17 +15,15 @@\n  * limitations under the License.\n  */\n \n-\n package org.apache.skywalking.apm.plugin.spring.patch;\n \n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;\n-\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;\n \n /**\n  * {@link AopExpressionMatchInterceptor} check if the method is match the enhanced method\n@@ -42,30 +40,33 @@ public AopExpressionMatchInterceptor() {\n     }\n \n     @Override\n-    public void beforeMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, MethodInterceptResult result) {\n+    public void beforeMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n+        MethodInterceptResult result) {\n \n     }\n \n     @Override\n-    public Object afterMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, Object ret) {\n-        Method targetAopMethod = (Method) allArguments[1];\n-        Class<?> targetAopClass = (Class<?>) allArguments[2];\n-        if (EnhancedInstance.class.isAssignableFrom(targetAopClass) && isEnhancedMethod(targetAopMethod)) {\n+    public Object afterMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n+        Object ret) {\n+        Method targetAopMethod = (Method)allArguments[1];\n+        Class<?> targetAopClass = (Class<?>)allArguments[2];\n+        if (targetAopClass != null && EnhancedInstance.class.isAssignableFrom(targetAopClass) && isEnhancedMethod(targetAopMethod)) {\n             return false;\n         }\n         return ret;\n     }\n \n     @Override\n-    public void handleMethodException(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, Throwable t) {\n+    public void handleMethodException(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n+        Throwable t) {\n \n     }\n \n     private boolean isEnhancedMethod(Method targetMethod) {\n         for (Method method : methods) {\n             if (method.getName().equals(targetMethod.getName())\n-                    && method.getReturnType().equals(targetMethod.getReturnType())\n-                    && equalParamTypes(method.getParameterTypes(), targetMethod.getParameterTypes())) {\n+                && method.getReturnType().equals(targetMethod.getReturnType())\n+                && equalParamTypes(method.getParameterTypes(), targetMethod.getParameterTypes())) {\n                 return true;\n             }\n         }",
                "deletions": 13
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "Fix #1488: Fix NPE when the targetAop class is null (#1507)",
        "commit": "https://github.com/apache/skywalking/commit/a5d261039278019b6d288d72a760ba3beda7444a",
        "parent": "https://github.com/apache/skywalking/commit/eed6fa18c88ad14277d17149fea92946e9cb1b40",
        "bug_id": "skywalking_27",
        "file": [
            {
                "sha": "5c99a886904ef3eae8d455c155c42390186dc71a",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/AopExpressionMatchInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/a5d261039278019b6d288d72a760ba3beda7444a/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/AopExpressionMatchInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/a5d261039278019b6d288d72a760ba3beda7444a/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/AopExpressionMatchInterceptor.java",
                "status": "modified",
                "changes": 27,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/AopExpressionMatchInterceptor.java?ref=a5d261039278019b6d288d72a760ba3beda7444a",
                "patch": "@@ -15,17 +15,15 @@\n  * limitations under the License.\n  */\n \n-\n package org.apache.skywalking.apm.plugin.spring.patch;\n \n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;\n-\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;\n \n /**\n  * {@link AopExpressionMatchInterceptor} check if the method is match the enhanced method\n@@ -42,30 +40,33 @@ public AopExpressionMatchInterceptor() {\n     }\n \n     @Override\n-    public void beforeMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, MethodInterceptResult result) {\n+    public void beforeMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n+        MethodInterceptResult result) {\n \n     }\n \n     @Override\n-    public Object afterMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, Object ret) {\n-        Method targetAopMethod = (Method) allArguments[1];\n-        Class<?> targetAopClass = (Class<?>) allArguments[2];\n-        if (EnhancedInstance.class.isAssignableFrom(targetAopClass) && isEnhancedMethod(targetAopMethod)) {\n+    public Object afterMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n+        Object ret) {\n+        Method targetAopMethod = (Method)allArguments[1];\n+        Class<?> targetAopClass = (Class<?>)allArguments[2];\n+        if (targetAopClass != null && EnhancedInstance.class.isAssignableFrom(targetAopClass) && isEnhancedMethod(targetAopMethod)) {\n             return false;\n         }\n         return ret;\n     }\n \n     @Override\n-    public void handleMethodException(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, Throwable t) {\n+    public void handleMethodException(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n+        Throwable t) {\n \n     }\n \n     private boolean isEnhancedMethod(Method targetMethod) {\n         for (Method method : methods) {\n             if (method.getName().equals(targetMethod.getName())\n-                    && method.getReturnType().equals(targetMethod.getReturnType())\n-                    && equalParamTypes(method.getParameterTypes(), targetMethod.getParameterTypes())) {\n+                && method.getReturnType().equals(targetMethod.getReturnType())\n+                && equalParamTypes(method.getParameterTypes(), targetMethod.getParameterTypes())) {\n                 return true;\n             }\n         }",
                "deletions": 13
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "Fix the issue that Hystrix plugin case NPE (#1293)",
        "commit": "https://github.com/apache/skywalking/commit/a960272f7148eb2a620a1f50276469f4b7b17d4e",
        "parent": "https://github.com/apache/skywalking/commit/3f7a86f98f8f719f1a6ee44acbc88b9e942a7e97",
        "bug_id": "skywalking_28",
        "file": [
            {
                "sha": "2dd1f4f9c15ea3da522cd832edf73fc3a9668ed1",
                "filename": "apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/HystrixCommandGetFallbackInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/a960272f7148eb2a620a1f50276469f4b7b17d4e/apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/HystrixCommandGetFallbackInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/a960272f7148eb2a620a1f50276469f4b7b17d4e/apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/HystrixCommandGetFallbackInterceptor.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/HystrixCommandGetFallbackInterceptor.java?ref=a960272f7148eb2a620a1f50276469f4b7b17d4e",
                "patch": "@@ -36,7 +36,9 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n \n         AbstractSpan activeSpan = ContextManager.createLocalSpan(enhanceRequireObjectCache.getOperationNamePrefix() + \"/Fallback\");\n         activeSpan.setComponent(ComponentsDefine.HYSTRIX);\n-        ContextManager.continued(snapshot);\n+        if (snapshot != null) {\n+            ContextManager.continued(snapshot);\n+        }\n     }\n \n     @Override",
                "deletions": 1
            },
            {
                "sha": "28dce1a39b4cedc1c8fc7262e80ab88dd9da1fdb",
                "filename": "apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/HystrixCommandRunInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/a960272f7148eb2a620a1f50276469f4b7b17d4e/apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/HystrixCommandRunInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/a960272f7148eb2a620a1f50276469f4b7b17d4e/apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/HystrixCommandRunInterceptor.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/HystrixCommandRunInterceptor.java?ref=a960272f7148eb2a620a1f50276469f4b7b17d4e",
                "patch": "@@ -41,7 +41,9 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n \n         AbstractSpan activeSpan = ContextManager.createLocalSpan(enhanceRequireObjectCache.getOperationNamePrefix() + \"/Execution\");\n         activeSpan.setComponent(ComponentsDefine.HYSTRIX);\n-        ContextManager.continued(snapshot);\n+        if (snapshot != null) {\n+            ContextManager.continued(snapshot);\n+        }\n         // Because of `fall back` method running in other thread. so we need capture concurrent span for tracing.\n         enhanceRequireObjectCache.setContextSnapshot(ContextManager.capture());\n ",
                "deletions": 1
            },
            {
                "sha": "fbe0022a00882d8fd745ef892e2f047dce50fd5d",
                "filename": "apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/SWExecutionHookWrapper.java",
                "blob_url": "https://github.com/apache/skywalking/blob/a960272f7148eb2a620a1f50276469f4b7b17d4e/apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/SWExecutionHookWrapper.java",
                "raw_url": "https://github.com/apache/skywalking/raw/a960272f7148eb2a620a1f50276469f4b7b17d4e/apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/SWExecutionHookWrapper.java",
                "status": "modified",
                "changes": 8,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/SWExecutionHookWrapper.java?ref=a960272f7148eb2a620a1f50276469f4b7b17d4e",
                "patch": "@@ -41,7 +41,9 @@ public SWExecutionHookWrapper(HystrixCommandExecutionHook actual) {\n     public <T> void onStart(HystrixInvokable<T> commandInstance) {\n         EnhancedInstance enhancedInstance = (EnhancedInstance)commandInstance;\n         EnhanceRequireObjectCache enhanceRequireObjectCache = (EnhanceRequireObjectCache)enhancedInstance.getSkyWalkingDynamicField();\n-        enhanceRequireObjectCache.setContextSnapshot(ContextManager.capture());\n+        if (ContextManager.isActive()) {\n+            enhanceRequireObjectCache.setContextSnapshot(ContextManager.capture());\n+        }\n         actual.onStart(commandInstance);\n     }\n \n@@ -166,7 +168,9 @@ public SWExecutionHookWrapper(HystrixCommandExecutionHook actual) {\n     @Override public <T> void onStart(HystrixCommand<T> commandInstance) {\n         EnhancedInstance enhancedInstance = (EnhancedInstance)commandInstance;\n         EnhanceRequireObjectCache enhanceRequireObjectCache = (EnhanceRequireObjectCache)enhancedInstance.getSkyWalkingDynamicField();\n-        enhanceRequireObjectCache.setContextSnapshot(ContextManager.capture());\n+        if (ContextManager.isActive()) {\n+            enhanceRequireObjectCache.setContextSnapshot(ContextManager.capture());\n+        }\n         actual.onStart(commandInstance);\n     }\n ",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "Merge pull request #691 from apache/fix/sampling-service-npe\n\nFix npe",
        "commit": "https://github.com/apache/skywalking/commit/40df96089eb5ab27fc057dfd0006e0f9af677b8c",
        "parent": "https://github.com/apache/skywalking/commit/5319d72f3f36954cb87691e5aab744471909ee03",
        "bug_id": "skywalking_29",
        "file": [
            {
                "sha": "e2910bba6a3a722c314f4d6e11f19438aec001b3",
                "filename": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/sampling/SamplingService.java",
                "blob_url": "https://github.com/apache/skywalking/blob/40df96089eb5ab27fc057dfd0006e0f9af677b8c/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/sampling/SamplingService.java",
                "raw_url": "https://github.com/apache/skywalking/raw/40df96089eb5ab27fc057dfd0006e0f9af677b8c/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/sampling/SamplingService.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/sampling/SamplingService.java?ref=40df96089eb5ab27fc057dfd0006e0f9af677b8c",
                "patch": "@@ -26,10 +26,10 @@\n import java.util.concurrent.atomic.AtomicInteger;\n import org.apache.skywalking.apm.agent.core.boot.BootService;\n import org.apache.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;\n import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n-import org.apache.skywalking.apm.agent.core.conf.Config;\n \n /**\n  * The <code>SamplingService</code> take charge of how to sample the {@link TraceSegment}. Every {@link TraceSegment}s\n@@ -83,7 +83,9 @@ public void afterBoot() throws Throwable {\n \n     @Override\n     public void shutdown() throws Throwable {\n-        scheduledFuture.cancel(true);\n+        if (scheduledFuture != null) {\n+            scheduledFuture.cancel(true);\n+        }\n     }\n \n     /**",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "Print exception stack into console or log files because of I found some NPE message in the log files. But I don't known where are they from without exception stack. (#1986)",
        "commit": "https://github.com/apache/skywalking/commit/5777103a2b721e6d6cb28ab8139228aef524ff78",
        "parent": "https://github.com/apache/skywalking/commit/e2f2356a6fcbfe5e361ce0538b80a790d236b7cc",
        "bug_id": "skywalking_30",
        "file": [
            {
                "sha": "3057dcf92b2cf0dc8897c8be2738807957ee5e01",
                "filename": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/cache/NetworkAddressInventoryCacheEsDAO.java",
                "blob_url": "https://github.com/apache/skywalking/blob/5777103a2b721e6d6cb28ab8139228aef524ff78/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/cache/NetworkAddressInventoryCacheEsDAO.java",
                "raw_url": "https://github.com/apache/skywalking/raw/5777103a2b721e6d6cb28ab8139228aef524ff78/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/cache/NetworkAddressInventoryCacheEsDAO.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/cache/NetworkAddressInventoryCacheEsDAO.java?ref=5777103a2b721e6d6cb28ab8139228aef524ff78",
                "patch": "@@ -19,7 +19,7 @@\n package org.apache.skywalking.oap.server.storage.plugin.elasticsearch.cache;\n \n import org.apache.skywalking.oap.server.core.Const;\n-import org.apache.skywalking.oap.server.core.register.*;\n+import org.apache.skywalking.oap.server.core.register.NetworkAddressInventory;\n import org.apache.skywalking.oap.server.core.storage.cache.INetworkAddressInventoryCacheDAO;\n import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;\n import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.EsDAO;\n@@ -52,8 +52,8 @@ public NetworkAddressInventoryCacheEsDAO(ElasticSearchClient client) {\n             } else {\n                 return Const.NONE;\n             }\n-        } catch (Throwable e) {\n-            logger.error(e.getMessage());\n+        } catch (Throwable t) {\n+            logger.error(t.getMessage(), t);\n             return Const.NONE;\n         }\n     }\n@@ -71,8 +71,8 @@ public NetworkAddressInventoryCacheEsDAO(ElasticSearchClient client) {\n             } else {\n                 return null;\n             }\n-        } catch (Throwable e) {\n-            logger.error(e.getMessage());\n+        } catch (Throwable t) {\n+            logger.error(t.getMessage(), t);\n             return null;\n         }\n     }",
                "deletions": 5
            },
            {
                "sha": "fa1ae8782cc7c57f96acffdd4e11bf80a0fb32d7",
                "filename": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/cache/ServiceInstanceInventoryCacheDAO.java",
                "blob_url": "https://github.com/apache/skywalking/blob/5777103a2b721e6d6cb28ab8139228aef524ff78/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/cache/ServiceInstanceInventoryCacheDAO.java",
                "raw_url": "https://github.com/apache/skywalking/raw/5777103a2b721e6d6cb28ab8139228aef524ff78/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/cache/ServiceInstanceInventoryCacheDAO.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/cache/ServiceInstanceInventoryCacheDAO.java?ref=5777103a2b721e6d6cb28ab8139228aef524ff78",
                "patch": "@@ -56,8 +56,8 @@ public ServiceInstanceInventoryCacheDAO(ElasticSearchClient client) {\n             } else {\n                 return null;\n             }\n-        } catch (Throwable e) {\n-            logger.error(e.getMessage());\n+        } catch (Throwable t) {\n+            logger.error(t.getMessage(), t);\n             return null;\n         }\n     }\n@@ -80,8 +80,8 @@ private int get(String id) {\n             } else {\n                 return Const.NONE;\n             }\n-        } catch (Throwable e) {\n-            logger.error(e.getMessage());\n+        } catch (Throwable t) {\n+            logger.error(t.getMessage(), t);\n             return Const.NONE;\n         }\n     }",
                "deletions": 4
            },
            {
                "sha": "b34ea8bca2460d0ef0f2e6487e804277302f99ff",
                "filename": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/cache/ServiceInventoryCacheEsDAO.java",
                "blob_url": "https://github.com/apache/skywalking/blob/5777103a2b721e6d6cb28ab8139228aef524ff78/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/cache/ServiceInventoryCacheEsDAO.java",
                "raw_url": "https://github.com/apache/skywalking/raw/5777103a2b721e6d6cb28ab8139228aef524ff78/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/cache/ServiceInventoryCacheEsDAO.java",
                "status": "modified",
                "changes": 12,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/cache/ServiceInventoryCacheEsDAO.java?ref=5777103a2b721e6d6cb28ab8139228aef524ff78",
                "patch": "@@ -63,8 +63,8 @@ private int get(String id) {\n             } else {\n                 return Const.NONE;\n             }\n-        } catch (Throwable e) {\n-            logger.error(e.getMessage());\n+        } catch (Throwable t) {\n+            logger.error(t.getMessage(), t);\n             return Const.NONE;\n         }\n     }\n@@ -82,8 +82,8 @@ private int get(String id) {\n             } else {\n                 return null;\n             }\n-        } catch (Throwable e) {\n-            logger.error(e.getMessage());\n+        } catch (Throwable t) {\n+            logger.error(t.getMessage(), t);\n             return null;\n         }\n     }\n@@ -106,8 +106,8 @@ private int get(String id) {\n             for (SearchHit searchHit : response.getHits().getHits()) {\n                 serviceInventories.add(this.builder.map2Data(searchHit.getSourceAsMap()));\n             }\n-        } catch (Throwable e) {\n-            logger.error(e.getMessage());\n+        } catch (Throwable t) {\n+            logger.error(t.getMessage(), t);\n         }\n \n         return serviceInventories;",
                "deletions": 6
            },
            {
                "sha": "d76c650b079aac8537ddf678fbf7c140705e5a83",
                "filename": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/lock/RegisterLockDAOImpl.java",
                "blob_url": "https://github.com/apache/skywalking/blob/5777103a2b721e6d6cb28ab8139228aef524ff78/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/lock/RegisterLockDAOImpl.java",
                "raw_url": "https://github.com/apache/skywalking/raw/5777103a2b721e6d6cb28ab8139228aef524ff78/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/lock/RegisterLockDAOImpl.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/lock/RegisterLockDAOImpl.java?ref=5777103a2b721e6d6cb28ab8139228aef524ff78",
                "patch": "@@ -89,7 +89,7 @@ private void lock(String id, int timeout, long version) throws IOException {\n \n             getClient().forceUpdate(RegisterLockIndex.NAME, id, source);\n         } catch (Throwable t) {\n-            logger.error(\"Release lock failure.\");\n+            logger.error(\"Release lock failure.\", t);\n         }\n     }\n }",
                "deletions": 1
            },
            {
                "sha": "0334ed1ed9575664982aaedb8538b8e2ae67e936",
                "filename": "oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2ServiceInventoryCacheDAO.java",
                "blob_url": "https://github.com/apache/skywalking/blob/5777103a2b721e6d6cb28ab8139228aef524ff78/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2ServiceInventoryCacheDAO.java",
                "raw_url": "https://github.com/apache/skywalking/raw/5777103a2b721e6d6cb28ab8139228aef524ff78/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2ServiceInventoryCacheDAO.java",
                "status": "modified",
                "changes": 14,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2ServiceInventoryCacheDAO.java?ref=5777103a2b721e6d6cb28ab8139228aef524ff78",
                "patch": "@@ -19,17 +19,13 @@\n package org.apache.skywalking.oap.server.storage.plugin.jdbc.h2.dao;\n \n import java.io.IOException;\n-import java.sql.Connection;\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n-import java.util.ArrayList;\n-import java.util.List;\n+import java.sql.*;\n+import java.util.*;\n import org.apache.skywalking.oap.server.core.register.ServiceInventory;\n import org.apache.skywalking.oap.server.core.storage.cache.IServiceInventoryCacheDAO;\n import org.apache.skywalking.oap.server.library.client.jdbc.hikaricp.JDBCHikariCPClient;\n import org.apache.skywalking.oap.server.library.util.BooleanUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.slf4j.*;\n \n /**\n  * @author wusheng\n@@ -82,8 +78,8 @@ public H2ServiceInventoryCacheDAO(JDBCHikariCPClient h2Client) {\n             } catch (SQLException e) {\n                 throw new IOException(e);\n             }\n-        } catch (Throwable e) {\n-            logger.error(e.getMessage());\n+        } catch (Throwable t) {\n+            logger.error(t.getMessage(), t);\n         }\n         return serviceInventories;\n     }",
                "deletions": 9
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "Fix npe",
        "commit": "https://github.com/apache/skywalking/commit/09b979c5af374a548b9ccbc4a6f08801bbce38bf",
        "parent": "https://github.com/apache/skywalking/commit/5319d72f3f36954cb87691e5aab744471909ee03",
        "bug_id": "skywalking_31",
        "file": [
            {
                "sha": "e2910bba6a3a722c314f4d6e11f19438aec001b3",
                "filename": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/sampling/SamplingService.java",
                "blob_url": "https://github.com/apache/skywalking/blob/09b979c5af374a548b9ccbc4a6f08801bbce38bf/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/sampling/SamplingService.java",
                "raw_url": "https://github.com/apache/skywalking/raw/09b979c5af374a548b9ccbc4a6f08801bbce38bf/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/sampling/SamplingService.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/sampling/SamplingService.java?ref=09b979c5af374a548b9ccbc4a6f08801bbce38bf",
                "patch": "@@ -26,10 +26,10 @@\n import java.util.concurrent.atomic.AtomicInteger;\n import org.apache.skywalking.apm.agent.core.boot.BootService;\n import org.apache.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;\n import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n-import org.apache.skywalking.apm.agent.core.conf.Config;\n \n /**\n  * The <code>SamplingService</code> take charge of how to sample the {@link TraceSegment}. Every {@link TraceSegment}s\n@@ -83,7 +83,9 @@ public void afterBoot() throws Throwable {\n \n     @Override\n     public void shutdown() throws Throwable {\n-        scheduledFuture.cancel(true);\n+        if (scheduledFuture != null) {\n+            scheduledFuture.cancel(true);\n+        }\n     }\n \n     /**",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "Fix occure the NPE when SpringMVC and hystrix work together (#1256)",
        "commit": "https://github.com/apache/skywalking/commit/a835fe4ec5d41266e90ff6159d48da8d84715773",
        "parent": "https://github.com/apache/skywalking/commit/29f6f6e50ecc01b4f04241742c1961e8527badf2",
        "bug_id": "skywalking_32",
        "file": [
            {
                "sha": "97c204c92b87a113a29f5717891483cd7f8de850",
                "filename": "apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/Constants.java",
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/Constants.java",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/Constants.java",
                "status": "added",
                "changes": 24,
                "additions": 24,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/Constants.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "patch": "@@ -0,0 +1,24 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.hystrix.v1;\n+\n+public class Constants {\n+\n+    public static final String ISOLATE_STRATEGY_KEY_IN_RUNNING_CONTEXT = \"ISOLATE_STRATEGY\";\n+}",
                "deletions": 0
            },
            {
                "sha": "c6f1bcc97e713fe33cc35cadc61b645436424435",
                "filename": "apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/HystrixCommandRunInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/HystrixCommandRunInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/HystrixCommandRunInterceptor.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/HystrixCommandRunInterceptor.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "patch": "@@ -18,6 +18,7 @@\n \n package org.apache.skywalking.apm.plugin.hystrix.v1;\n \n+import com.netflix.hystrix.HystrixCommand;\n import java.lang.reflect.Method;\n import org.apache.skywalking.apm.agent.core.context.ContextManager;\n import org.apache.skywalking.apm.agent.core.context.ContextSnapshot;\n@@ -27,6 +28,8 @@\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n \n+import static org.apache.skywalking.apm.plugin.hystrix.v1.Constants.ISOLATE_STRATEGY_KEY_IN_RUNNING_CONTEXT;\n+\n public class HystrixCommandRunInterceptor implements InstanceMethodsAroundInterceptor {\n     @Override\n     public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n@@ -41,6 +44,8 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n         ContextManager.continued(snapshot);\n         // Because of `fall back` method running in other thread. so we need capture concurrent span for tracing.\n         enhanceRequireObjectCache.setContextSnapshot(ContextManager.capture());\n+\n+        ContextManager.getRuntimeContext().put(ISOLATE_STRATEGY_KEY_IN_RUNNING_CONTEXT, ((HystrixCommand)objInst).getProperties().executionIsolationStrategy().get().name().toUpperCase());\n     }\n \n     @Override",
                "deletions": 0
            },
            {
                "sha": "19f2f6e784a79d127a17c5c99d79540c98f6626d",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/HandlerMethodInvokerInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/HandlerMethodInvokerInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/HandlerMethodInvokerInterceptor.java",
                "status": "modified",
                "changes": 7,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/HandlerMethodInvokerInterceptor.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "patch": "@@ -16,16 +16,17 @@\n  *\n  */\n \n-\n package org.apache.skywalking.apm.plugin.spring.mvc.v3;\n \n import java.lang.reflect.Method;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n-import org.apache.skywalking.apm.plugin.spring.mvc.commons.EnhanceRequireObjectCache;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n import org.springframework.web.context.request.NativeWebRequest;\n \n+import static org.apache.skywalking.apm.plugin.spring.mvc.commons.Constants.RESPONSE_KEY_IN_RUNTIME_CONTEXT;\n+\n /**\n  * {@link HandlerMethodInvokerInterceptor} pass the {@link NativeWebRequest} object into the {@link\n  * org.springframework.stereotype.Controller} object.\n@@ -38,7 +39,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n         MethodInterceptResult result) throws Throwable {\n         Object handler = allArguments[1];\n         if (handler instanceof EnhancedInstance) {\n-            ((EnhanceRequireObjectCache)((EnhancedInstance)handler).getSkyWalkingDynamicField()).setNativeWebRequest((NativeWebRequest)allArguments[2]);\n+            ContextManager.getRuntimeContext().put(RESPONSE_KEY_IN_RUNTIME_CONTEXT, ((NativeWebRequest)allArguments[2]).getNativeResponse());\n         }\n     }\n ",
                "deletions": 3
            },
            {
                "sha": "e534a6e0ef4ee5d2562ad7bc93584949d0212dbc",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/AbstractSpring3Instrumentation.java",
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/AbstractSpring3Instrumentation.java",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/AbstractSpring3Instrumentation.java",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/AbstractSpring3Instrumentation.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "patch": "@@ -16,7 +16,6 @@\n  *\n  */\n \n-\n package org.apache.skywalking.apm.plugin.spring.mvc.v3.define;\n \n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;",
                "deletions": 1
            },
            {
                "sha": "dd24d03e6a9ac771c58e5364be25434a21a3bf6d",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/ControllerInstrumentation.java",
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/ControllerInstrumentation.java",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/ControllerInstrumentation.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/ControllerInstrumentation.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "patch": "@@ -21,9 +21,9 @@\n \n import net.bytebuddy.description.method.MethodDescription;\n import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n import org.apache.skywalking.apm.agent.core.plugin.match.ClassAnnotationMatch;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n \n import static net.bytebuddy.matcher.ElementMatchers.any;",
                "deletions": 1
            },
            {
                "sha": "88f7cc6fad0a26123b97f5984d11c49596f3837e",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/InvocableHandlerInstrumentation.java",
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/InvocableHandlerInstrumentation.java",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/InvocableHandlerInstrumentation.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/InvocableHandlerInstrumentation.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "patch": "@@ -16,13 +16,12 @@\n  *\n  */\n \n-\n package org.apache.skywalking.apm.plugin.spring.mvc.v3.define;\n \n import net.bytebuddy.description.method.MethodDescription;\n import net.bytebuddy.matcher.ElementMatcher;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n \n import static net.bytebuddy.matcher.ElementMatchers.named;",
                "deletions": 2
            },
            {
                "sha": "b4ec3f59284ed9822590b8de07d76604add78d6f",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/GetBeanInterceptorTest.java",
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/GetBeanInterceptorTest.java",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/GetBeanInterceptorTest.java",
                "status": "modified",
                "changes": 11,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/GetBeanInterceptorTest.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "patch": "@@ -16,18 +16,17 @@\n  *\n  */\n \n-\n package org.apache.skywalking.apm.plugin.spring.mvc.v3;\n \n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n import org.apache.skywalking.apm.plugin.spring.mvc.commons.EnhanceRequireObjectCache;\n+import org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor.GetBeanInterceptor;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.Matchers;\n import org.mockito.Mock;\n import org.mockito.runners.MockitoJUnitRunner;\n-import org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor.GetBeanInterceptor;\n import org.springframework.web.context.request.NativeWebRequest;\n \n import static org.mockito.Mockito.times;\n@@ -62,12 +61,4 @@ public void testResultIsNotEnhanceInstance() throws Throwable {\n \n         verify(enhanceRet, times(0)).setSkyWalkingDynamicField(Matchers.any());\n     }\n-\n-    @Test\n-    public void testResultIsEnhanceInstance() throws Throwable {\n-        interceptor.afterMethod(enhancedInstance, null, null, null, enhanceRet);\n-\n-        verify(enhanceRet, times(0)).setSkyWalkingDynamicField(Matchers.any());\n-    }\n-\n }",
                "deletions": 10
            },
            {
                "sha": "3760e1dca5a19a21c4fa36f5192a0badd4178179",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/InvokeForRequestInterceptorTest.java",
                "blob_url": "https://github.com/apache/skywalking/blob/29f6f6e50ecc01b4f04241742c1961e8527badf2/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/InvokeForRequestInterceptorTest.java",
                "raw_url": "https://github.com/apache/skywalking/raw/29f6f6e50ecc01b4f04241742c1961e8527badf2/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/InvokeForRequestInterceptorTest.java",
                "status": "removed",
                "changes": 59,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/InvokeForRequestInterceptorTest.java?ref=29f6f6e50ecc01b4f04241742c1961e8527badf2",
                "patch": "@@ -1,59 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- */\n-\n-\n-package org.apache.skywalking.apm.plugin.spring.mvc.v3;\n-\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n-import org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor.InvokeForRequestInterceptor;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.Matchers;\n-import org.mockito.Mock;\n-import org.mockito.runners.MockitoJUnitRunner;\n-import org.springframework.web.context.request.NativeWebRequest;\n-\n-import static org.mockito.Mockito.times;\n-import static org.mockito.Mockito.verify;\n-\n-@RunWith(MockitoJUnitRunner.class)\n-public class InvokeForRequestInterceptorTest {\n-    private InvokeForRequestInterceptor interceptor;\n-\n-    @Mock\n-    private EnhancedInstance enhancedInstance;\n-\n-    @Mock\n-    private NativeWebRequest nativeWebRequest;\n-\n-    private Object argument[];\n-\n-    @Before\n-    public void setUp() {\n-        interceptor = new InvokeForRequestInterceptor();\n-        argument = new Object[] {nativeWebRequest};\n-    }\n-\n-    @Test\n-    public void testPassNativeWebRequest() throws Throwable {\n-        interceptor.beforeMethod(enhancedInstance, null, argument, new Class[] {NativeWebRequest.class}, null);\n-\n-        verify(enhancedInstance, times(1)).setSkyWalkingDynamicField(Matchers.any());\n-    }\n-}",
                "deletions": 59
            },
            {
                "sha": "225b657bbf256c55bf7616d9a690e2a408c24c34",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/define/AbstractControllerInstrumentation.java",
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/define/AbstractControllerInstrumentation.java",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/define/AbstractControllerInstrumentation.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/define/AbstractControllerInstrumentation.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "patch": "@@ -16,16 +16,15 @@\n  *\n  */\n \n-\n package org.apache.skywalking.apm.plugin.spring.mvc.v4.define;\n \n import net.bytebuddy.description.method.MethodDescription;\n import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n import org.apache.skywalking.apm.agent.core.plugin.match.ClassAnnotationMatch;\n import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n import org.apache.skywalking.apm.plugin.spring.mvc.commons.Constants;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n \n import static net.bytebuddy.matcher.ElementMatchers.any;\n import static net.bytebuddy.matcher.ElementMatchers.isAnnotatedWith;",
                "deletions": 2
            },
            {
                "sha": "bedbae744ac7b28bf39041c5c8843421760cb4cc",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/RequestMappingMethodInterceptorTest.java",
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/RequestMappingMethodInterceptorTest.java",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/RequestMappingMethodInterceptorTest.java",
                "status": "modified",
                "changes": 67,
                "additions": 37,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/RequestMappingMethodInterceptorTest.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "patch": "@@ -16,48 +16,47 @@\n  *\n  */\n \n-\n package org.apache.skywalking.apm.plugin.spring.mvc.v4;\n \n import java.lang.reflect.Method;\n import java.util.List;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.LogDataEntity;\n import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;\n+import org.apache.skywalking.apm.agent.core.context.trace.TraceSegmentRef;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n import org.apache.skywalking.apm.agent.test.helper.SegmentHelper;\n+import org.apache.skywalking.apm.agent.test.helper.SegmentRefHelper;\n import org.apache.skywalking.apm.agent.test.helper.SpanHelper;\n+import org.apache.skywalking.apm.agent.test.tools.AgentServiceRule;\n import org.apache.skywalking.apm.agent.test.tools.SegmentStorage;\n import org.apache.skywalking.apm.agent.test.tools.SegmentStoragePoint;\n import org.apache.skywalking.apm.agent.test.tools.SpanAssert;\n+import org.apache.skywalking.apm.agent.test.tools.TracingSegmentRunner;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n import org.apache.skywalking.apm.plugin.spring.mvc.commons.EnhanceRequireObjectCache;\n import org.apache.skywalking.apm.plugin.spring.mvc.commons.PathMappingCache;\n+import org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor.RequestMappingMethodInterceptor;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.Mock;\n import org.powermock.modules.junit4.PowerMockRunner;\n import org.powermock.modules.junit4.PowerMockRunnerDelegate;\n-import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n-import org.apache.skywalking.apm.agent.core.context.trace.LogDataEntity;\n-import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;\n-import org.apache.skywalking.apm.agent.core.context.trace.TraceSegmentRef;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n-import org.apache.skywalking.apm.agent.test.helper.SegmentRefHelper;\n-import org.apache.skywalking.apm.agent.test.tools.AgentServiceRule;\n-import org.apache.skywalking.apm.agent.test.tools.TracingSegmentRunner;\n-import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n-import org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor.RequestMappingMethodInterceptor;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.context.request.NativeWebRequest;\n import org.springframework.web.context.request.RequestContextHolder;\n import org.springframework.web.context.request.ServletRequestAttributes;\n \n+import static org.apache.skywalking.apm.agent.test.tools.SpanAssert.assertComponent;\n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.mockito.Mockito.when;\n-import static org.apache.skywalking.apm.agent.test.tools.SpanAssert.assertComponent;\n \n @RunWith(PowerMockRunner.class)\n @PowerMockRunnerDelegate(TracingSegmentRunner.class)\n@@ -103,7 +102,6 @@ public void setUp() throws Exception {\n         when(request.getRequestURI()).thenReturn(\"/test/testRequestURL\");\n         when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://localhost:8080/test/testRequestURL\"));\n         when(response.getStatus()).thenReturn(200);\n-        when(nativeWebRequest.getNativeResponse()).thenReturn(response);\n \n         arguments = new Object[] {request, response};\n         argumentType = new Class[] {request.getClass(), response.getClass()};\n@@ -112,31 +110,39 @@ public void setUp() throws Exception {\n \n     @Test\n     public void testWithoutSerializedContextData() throws Throwable {\n-        controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n-        RequestMappingClass1 mappingClass1 = new RequestMappingClass1();\n-        Method m = mappingClass1.getClass().getMethod(\"testRequestURL\");\n-        RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n-\n-        interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n-        interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+        SpringTestCaseHelper.createCaseHandler(request, response, new SpringTestCaseHelper.CaseHandler() {\n+            @Override\n+            public void handleCase() throws Throwable {\n+                controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n+                RequestMappingClass1 mappingClass1 = new RequestMappingClass1();\n+                Method m = mappingClass1.getClass().getMethod(\"testRequestURL\");\n+                RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n+\n+                interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n+                interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+            }\n+        });\n \n         assertThat(segmentStorage.getTraceSegments().size(), is(1));\n         TraceSegment traceSegment = segmentStorage.getTraceSegments().get(0);\n         List<AbstractTracingSpan> spans = SegmentHelper.getSpans(traceSegment);\n-\n         assertHttpSpan(spans.get(0));\n     }\n \n     @Test\n     public void testWithOccurException() throws Throwable {\n-        controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n-        RequestMappingClass1 mappingClass1 = new RequestMappingClass1();\n-        Method m = mappingClass1.getClass().getMethod(\"testRequestURL\");\n-        RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n-\n-        interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n-        interceptor.handleMethodException(enhancedInstance, m, arguments, argumentType, new RuntimeException());\n-        interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+        SpringTestCaseHelper.createCaseHandler(request, response, new SpringTestCaseHelper.CaseHandler() {\n+            @Override public void handleCase() throws Throwable {\n+                controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n+                RequestMappingClass1 mappingClass1 = new RequestMappingClass1();\n+                Method m = mappingClass1.getClass().getMethod(\"testRequestURL\");\n+                RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n+\n+                interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n+                interceptor.handleMethodException(enhancedInstance, m, arguments, argumentType, new RuntimeException());\n+                interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+            }\n+        });\n \n         assertThat(segmentStorage.getTraceSegments().size(), is(1));\n         TraceSegment traceSegment = segmentStorage.getTraceSegments().get(0);\n@@ -168,8 +174,9 @@ private void assertHttpSpan(AbstractTracingSpan span) {\n \n         @Override\n         public Object getSkyWalkingDynamicField() {\n+\n             value.setPathMappingCache(new PathMappingCache(\"/test\"));\n-            value.setNativeWebRequest(nativeWebRequest);\n+\n             return value;\n         }\n ",
                "deletions": 30
            },
            {
                "sha": "ccff690c5aac442bb254f3af8a7c3ed89ef95df9",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/RestMappingMethodInterceptorTest.java",
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/RestMappingMethodInterceptorTest.java",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/RestMappingMethodInterceptorTest.java",
                "status": "modified",
                "changes": 176,
                "additions": 103,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/RestMappingMethodInterceptorTest.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "patch": "@@ -16,7 +16,6 @@\n  *\n  */\n \n-\n package org.apache.skywalking.apm.plugin.spring.mvc.v4;\n \n import java.lang.reflect.Method;\n@@ -112,16 +111,20 @@ public void setUp() throws Exception {\n \n     @Test\n     public void testGetMapping() throws Throwable {\n-        controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n-        RestMappingClass1 mappingClass1 = new RestMappingClass1();\n-        Method m = mappingClass1.getClass().getMethod(\"getRequestURL\");\n-        when(request.getRequestURI()).thenReturn(\"/test/testRequestURL\");\n-        when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://localhost:8080/test/getRequestURL\"));\n-        ServletRequestAttributes servletRequestAttributes = new ServletRequestAttributes(request, response);\n-        RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n-\n-        interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n-        interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+        SpringTestCaseHelper.createCaseHandler(request, response, new SpringTestCaseHelper.CaseHandler() {\n+            @Override public void handleCase() throws Throwable {\n+                controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n+                RestMappingClass1 mappingClass1 = new RestMappingClass1();\n+                Method m = mappingClass1.getClass().getMethod(\"getRequestURL\");\n+                when(request.getRequestURI()).thenReturn(\"/test/testRequestURL\");\n+                when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://localhost:8080/test/getRequestURL\"));\n+                ServletRequestAttributes servletRequestAttributes = new ServletRequestAttributes(request, response);\n+                RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n+\n+                interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n+                interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+            }\n+        });\n \n         assertThat(segmentStorage.getTraceSegments().size(), is(1));\n         TraceSegment traceSegment = segmentStorage.getTraceSegments().get(0);\n@@ -132,16 +135,21 @@ public void testGetMapping() throws Throwable {\n \n     @Test\n     public void testPostMapping() throws Throwable {\n-        controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n-        RestMappingClass1 mappingClass1 = new RestMappingClass1();\n-        Method m = mappingClass1.getClass().getMethod(\"postRequestURL\");\n-        when(request.getRequestURI()).thenReturn(\"/test/testRequestURL\");\n-        when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://localhost:8080/test/postRequestURL\"));\n-        ServletRequestAttributes servletRequestAttributes = new ServletRequestAttributes(request, response);\n-        RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n-\n-        interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n-        interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+        SpringTestCaseHelper.createCaseHandler(request, response, new SpringTestCaseHelper.CaseHandler() {\n+            @Override public void handleCase() throws Throwable {\n+                controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n+                RestMappingClass1 mappingClass1 = new RestMappingClass1();\n+                Method m = mappingClass1.getClass().getMethod(\"postRequestURL\");\n+                when(request.getRequestURI()).thenReturn(\"/test/testRequestURL\");\n+                when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://localhost:8080/test/postRequestURL\"));\n+                ServletRequestAttributes servletRequestAttributes = new ServletRequestAttributes(request, response);\n+                RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n+\n+                interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n+                interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+\n+            }\n+        });\n \n         assertThat(segmentStorage.getTraceSegments().size(), is(1));\n         TraceSegment traceSegment = segmentStorage.getTraceSegments().get(0);\n@@ -152,16 +160,21 @@ public void testPostMapping() throws Throwable {\n \n     @Test\n     public void testPutMapping() throws Throwable {\n-        controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n-        RestMappingClass1 mappingClass1 = new RestMappingClass1();\n-        Method m = mappingClass1.getClass().getMethod(\"putRequestURL\");\n-        when(request.getRequestURI()).thenReturn(\"/test/testRequestURL\");\n-        when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://localhost:8080/test/putRequestURL\"));\n-        ServletRequestAttributes servletRequestAttributes = new ServletRequestAttributes(request, response);\n-        RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n-\n-        interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n-        interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+        SpringTestCaseHelper.createCaseHandler(request, response, new SpringTestCaseHelper.CaseHandler() {\n+            @Override public void handleCase() throws Throwable {\n+                controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n+                RestMappingClass1 mappingClass1 = new RestMappingClass1();\n+                Method m = mappingClass1.getClass().getMethod(\"putRequestURL\");\n+                when(request.getRequestURI()).thenReturn(\"/test/testRequestURL\");\n+                when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://localhost:8080/test/putRequestURL\"));\n+                ServletRequestAttributes servletRequestAttributes = new ServletRequestAttributes(request, response);\n+                RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n+\n+                interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n+                interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+\n+            }\n+        });\n \n         assertThat(segmentStorage.getTraceSegments().size(), is(1));\n         TraceSegment traceSegment = segmentStorage.getTraceSegments().get(0);\n@@ -172,16 +185,21 @@ public void testPutMapping() throws Throwable {\n \n     @Test\n     public void testDeleteMapping() throws Throwable {\n-        controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n-        RestMappingClass1 mappingClass1 = new RestMappingClass1();\n-        Method m = mappingClass1.getClass().getMethod(\"deleteRequestURL\");\n-        when(request.getRequestURI()).thenReturn(\"/test/testRequestURL\");\n-        when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://localhost:8080/test/deleteRequestURL\"));\n-        ServletRequestAttributes servletRequestAttributes = new ServletRequestAttributes(request, response);\n-        RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n-\n-        interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n-        interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+        SpringTestCaseHelper.createCaseHandler(request, response, new SpringTestCaseHelper.CaseHandler() {\n+            @Override public void handleCase() throws Throwable {\n+                controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n+                RestMappingClass1 mappingClass1 = new RestMappingClass1();\n+                Method m = mappingClass1.getClass().getMethod(\"deleteRequestURL\");\n+                when(request.getRequestURI()).thenReturn(\"/test/testRequestURL\");\n+                when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://localhost:8080/test/deleteRequestURL\"));\n+                ServletRequestAttributes servletRequestAttributes = new ServletRequestAttributes(request, response);\n+                RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n+\n+                interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n+                interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+\n+            }\n+        });\n \n         assertThat(segmentStorage.getTraceSegments().size(), is(1));\n         TraceSegment traceSegment = segmentStorage.getTraceSegments().get(0);\n@@ -192,16 +210,20 @@ public void testDeleteMapping() throws Throwable {\n \n     @Test\n     public void testPatchMapping() throws Throwable {\n-        controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n-        RestMappingClass1 mappingClass1 = new RestMappingClass1();\n-        Method m = mappingClass1.getClass().getMethod(\"patchRequestURL\");\n-        when(request.getRequestURI()).thenReturn(\"/test/testRequestURL\");\n-        when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://localhost:8080/test/patchRequestURL\"));\n-        ServletRequestAttributes servletRequestAttributes = new ServletRequestAttributes(request, response);\n-        RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n-\n-        interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n-        interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+        SpringTestCaseHelper.createCaseHandler(request, response, new SpringTestCaseHelper.CaseHandler() {\n+            @Override public void handleCase() throws Throwable {\n+                controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n+                RestMappingClass1 mappingClass1 = new RestMappingClass1();\n+                Method m = mappingClass1.getClass().getMethod(\"patchRequestURL\");\n+                when(request.getRequestURI()).thenReturn(\"/test/testRequestURL\");\n+                when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://localhost:8080/test/patchRequestURL\"));\n+                ServletRequestAttributes servletRequestAttributes = new ServletRequestAttributes(request, response);\n+                RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n+\n+                interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n+                interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+            }\n+        });\n \n         assertThat(segmentStorage.getTraceSegments().size(), is(1));\n         TraceSegment traceSegment = segmentStorage.getTraceSegments().get(0);\n@@ -212,16 +234,21 @@ public void testPatchMapping() throws Throwable {\n \n     @Test\n     public void testDummy() throws Throwable {\n-        controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n-        RestMappingClass1 mappingClass1 = new RestMappingClass1();\n-        Method m = mappingClass1.getClass().getMethod(\"dummy\");\n-        when(request.getRequestURI()).thenReturn(\"/test\");\n-        when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://localhost:8080/test\"));\n-        ServletRequestAttributes servletRequestAttributes = new ServletRequestAttributes(request, response);\n-        RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n-\n-        interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n-        interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+        SpringTestCaseHelper.createCaseHandler(request, response, new SpringTestCaseHelper.CaseHandler() {\n+            @Override public void handleCase() throws Throwable {\n+                controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n+                RestMappingClass1 mappingClass1 = new RestMappingClass1();\n+                Method m = mappingClass1.getClass().getMethod(\"dummy\");\n+                when(request.getRequestURI()).thenReturn(\"/test\");\n+                when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://localhost:8080/test\"));\n+                ServletRequestAttributes servletRequestAttributes = new ServletRequestAttributes(request, response);\n+                RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n+\n+                interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n+                interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+\n+            }\n+        });\n \n         assertThat(segmentStorage.getTraceSegments().size(), is(1));\n         TraceSegment traceSegment = segmentStorage.getTraceSegments().get(0);\n@@ -232,17 +259,21 @@ public void testDummy() throws Throwable {\n \n     @Test\n     public void testWithOccurException() throws Throwable {\n-        controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n-        RestMappingClass1 mappingClass1 = new RestMappingClass1();\n-        Method m = mappingClass1.getClass().getMethod(\"getRequestURL\");\n-        when(request.getRequestURI()).thenReturn(\"/test/testRequestURL\");\n-        when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://localhost:8080/test/getRequestURL\"));\n-        ServletRequestAttributes servletRequestAttributes = new ServletRequestAttributes(request, response);\n-        RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n-\n-        interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n-        interceptor.handleMethodException(enhancedInstance, m, arguments, argumentType, new RuntimeException());\n-        interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+        SpringTestCaseHelper.createCaseHandler(request, response, new SpringTestCaseHelper.CaseHandler() {\n+            @Override public void handleCase() throws Throwable {\n+                controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n+                RestMappingClass1 mappingClass1 = new RestMappingClass1();\n+                Method m = mappingClass1.getClass().getMethod(\"getRequestURL\");\n+                when(request.getRequestURI()).thenReturn(\"/test/testRequestURL\");\n+                when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://localhost:8080/test/getRequestURL\"));\n+                ServletRequestAttributes servletRequestAttributes = new ServletRequestAttributes(request, response);\n+                RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n+\n+                interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n+                interceptor.handleMethodException(enhancedInstance, m, arguments, argumentType, new RuntimeException());\n+                interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+            }\n+        });\n \n         assertThat(segmentStorage.getTraceSegments().size(), is(1));\n         TraceSegment traceSegment = segmentStorage.getTraceSegments().get(0);\n@@ -275,7 +306,6 @@ private void assertHttpSpan(AbstractTracingSpan span, String suffix) {\n         @Override\n         public Object getSkyWalkingDynamicField() {\n             value.setPathMappingCache(new PathMappingCache(\"/test\"));\n-            value.setNativeWebRequest(nativeWebRequest);\n             return value;\n         }\n ",
                "deletions": 73
            },
            {
                "sha": "34b257aebae094eb394ca880debf30c8aad953bd",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/SpringTestCaseHelper.java",
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/SpringTestCaseHelper.java",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/SpringTestCaseHelper.java",
                "status": "added",
                "changes": 40,
                "additions": 40,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/SpringTestCaseHelper.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "patch": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.spring.mvc.v4;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.plugin.spring.mvc.commons.Constants;\n+\n+public final class SpringTestCaseHelper {\n+\n+    public final static void createCaseHandler(HttpServletRequest request, HttpServletResponse response,\n+        CaseHandler a) throws Throwable {\n+        ContextManager.createLocalSpan(\"For-Test\");\n+        ContextManager.getRuntimeContext().put(Constants.REQUEST_KEY_IN_RUNTIME_CONTEXT, request);\n+        ContextManager.getRuntimeContext().put(Constants.RESPONSE_KEY_IN_RUNTIME_CONTEXT, response);\n+        a.handleCase();\n+        ContextManager.stopSpan();\n+    }\n+\n+    public interface CaseHandler {\n+        void handleCase() throws Throwable;\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "ca42b3ee89898e948910f13e4ea3a48dd14b767d",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/Constants.java",
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/Constants.java",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/Constants.java",
                "status": "modified",
                "changes": 9,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/Constants.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "patch": "@@ -16,7 +16,6 @@\n  *\n  */\n \n-\n package org.apache.skywalking.apm.plugin.spring.mvc.commons;\n \n /**\n@@ -32,4 +31,12 @@\n     public static final String REQUEST_MAPPING_METHOD_INTERCEPTOR = \"org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor.RequestMappingMethodInterceptor\";\n \n     public static final String REST_MAPPING_METHOD_INTERCEPTOR = \"org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor.RestMappingMethodInterceptor\";\n+\n+    public static final String HYSTRIX_COMMAND_ANNOTATION = \"com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand\";\n+\n+    public static final String REQUEST_KEY_IN_RUNTIME_CONTEXT = \"SW_REQUEST\";\n+\n+    public static final String RESPONSE_KEY_IN_RUNTIME_CONTEXT = \"SW_RESPONSE\";\n+\n+    public static final String ISOLATE_STRATEGY_KEY_IN_RUNNING_CONTEXT = \"ISOLATE_STRATEGY\";\n }",
                "deletions": 1
            },
            {
                "sha": "8337591fbdaf520f3e8c472b62ede4ca6cee8192",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/EnhanceRequireObjectCache.java",
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/EnhanceRequireObjectCache.java",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/EnhanceRequireObjectCache.java",
                "status": "modified",
                "changes": 23,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/EnhanceRequireObjectCache.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "patch": "@@ -18,28 +18,15 @@\n \n package org.apache.skywalking.apm.plugin.spring.mvc.commons;\n \n-import org.springframework.web.context.request.NativeWebRequest;\n-\n-import javax.servlet.http.HttpServletResponse;\n import java.lang.reflect.Method;\n \n public class EnhanceRequireObjectCache {\n     private PathMappingCache pathMappingCache;\n-    private ThreadLocal<NativeWebRequest> nativeWebRequest = new ThreadLocal<NativeWebRequest>();\n-    private ThreadLocal<HttpServletResponse> httpResponse = new ThreadLocal<HttpServletResponse>();\n \n     public void setPathMappingCache(PathMappingCache pathMappingCache) {\n         this.pathMappingCache = pathMappingCache;\n     }\n \n-    public HttpServletResponse getHttpServletResponse() {\n-        return httpResponse.get() == null ? (HttpServletResponse) nativeWebRequest.get().getNativeResponse() : httpResponse.get();\n-    }\n-\n-    public void setNativeWebRequest(NativeWebRequest nativeWebRequest) {\n-        this.nativeWebRequest.set(nativeWebRequest);\n-    }\n-\n     public String findPathMapping(Method method) {\n         return pathMappingCache.findPathMapping(method);\n     }\n@@ -51,14 +38,4 @@ public void addPathMapping(Method method, String url) {\n     public PathMappingCache getPathMappingCache() {\n         return pathMappingCache;\n     }\n-\n-    public void setHttpResponse(HttpServletResponse httpResponse) {\n-        this.httpResponse.set(httpResponse);\n-    }\n-\n-    public void clearRequestAndResponse() {\n-        setNativeWebRequest(null);\n-        setHttpResponse(null);\n-    }\n-\n }",
                "deletions": 23
            },
            {
                "sha": "ded96e74579f9cf74edc66e0e111ba02db866bdf",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java",
                "status": "modified",
                "changes": 53,
                "additions": 30,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "patch": "@@ -16,9 +16,11 @@\n  *\n  */\n \n-\n package org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor;\n \n+import java.lang.reflect.Method;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n import org.apache.skywalking.apm.agent.core.context.ContextManager;\n@@ -30,12 +32,10 @@\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n import org.apache.skywalking.apm.plugin.spring.mvc.commons.EnhanceRequireObjectCache;\n-import org.springframework.web.context.request.RequestContextHolder;\n-import org.springframework.web.context.request.ServletRequestAttributes;\n \n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import java.lang.reflect.Method;\n+import static org.apache.skywalking.apm.plugin.spring.mvc.commons.Constants.ISOLATE_STRATEGY_KEY_IN_RUNNING_CONTEXT;\n+import static org.apache.skywalking.apm.plugin.spring.mvc.commons.Constants.REQUEST_KEY_IN_RUNTIME_CONTEXT;\n+import static org.apache.skywalking.apm.plugin.spring.mvc.commons.Constants.RESPONSE_KEY_IN_RUNTIME_CONTEXT;\n \n /**\n  * the abstract method inteceptor\n@@ -54,38 +54,45 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n             requestURL = pathMappingCache.findPathMapping(method);\n         }\n \n-        HttpServletRequest request = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();\n+        String hystrixIsolateStrategy = (String)ContextManager.getRuntimeContext().get(ISOLATE_STRATEGY_KEY_IN_RUNNING_CONTEXT);\n+        HttpServletRequest request = (HttpServletRequest)ContextManager.getRuntimeContext().get(REQUEST_KEY_IN_RUNTIME_CONTEXT);\n \n-        ContextCarrier contextCarrier = new ContextCarrier();\n-        CarrierItem next = contextCarrier.items();\n-        while (next.hasNext()) {\n-            next = next.next();\n-            next.setHeadValue(request.getHeader(next.getHeadKey()));\n-        }\n+        if (hystrixIsolateStrategy != null) {\n+            ContextManager.createLocalSpan(requestURL);\n+        } else if (request != null) {\n+            ContextCarrier contextCarrier = new ContextCarrier();\n+            CarrierItem next = contextCarrier.items();\n+            while (next.hasNext()) {\n+                next = next.next();\n+                next.setHeadValue(request.getHeader(next.getHeadKey()));\n+            }\n \n-        AbstractSpan span = ContextManager.createEntrySpan(requestURL, contextCarrier);\n-        Tags.URL.set(span, request.getRequestURL().toString());\n-        Tags.HTTP.METHOD.set(span, request.getMethod());\n-        span.setComponent(ComponentsDefine.SPRING_MVC_ANNOTATION);\n-        SpanLayer.asHttp(span);\n+            AbstractSpan span = ContextManager.createEntrySpan(requestURL, contextCarrier);\n+            Tags.URL.set(span, request.getRequestURL().toString());\n+            Tags.HTTP.METHOD.set(span, request.getMethod());\n+            span.setComponent(ComponentsDefine.SPRING_MVC_ANNOTATION);\n+            SpanLayer.asHttp(span);\n+        }\n     }\n \n     @Override\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         Object ret) throws Throwable {\n-        try {\n-            HttpServletResponse response = ((EnhanceRequireObjectCache) objInst.getSkyWalkingDynamicField()).getHttpServletResponse();\n+        String hystrixIsolateStrategy = (String)ContextManager.getRuntimeContext().get(ISOLATE_STRATEGY_KEY_IN_RUNNING_CONTEXT);\n+        HttpServletResponse response = (HttpServletResponse)ContextManager.getRuntimeContext().get(RESPONSE_KEY_IN_RUNTIME_CONTEXT);\n \n+        if (hystrixIsolateStrategy != null) {\n+            ContextManager.stopSpan();\n+        } else if (response != null) {\n             AbstractSpan span = ContextManager.activeSpan();\n             if (response.getStatus() >= 400) {\n                 span.errorOccurred();\n                 Tags.STATUS_CODE.set(span, Integer.toString(response.getStatus()));\n             }\n             ContextManager.stopSpan();\n-            return ret;\n-        } finally {\n-            ((EnhanceRequireObjectCache)objInst.getSkyWalkingDynamicField()).clearRequestAndResponse();\n         }\n+\n+        return ret;\n     }\n \n     @Override",
                "deletions": 23
            },
            {
                "sha": "613481fcde3c4d835a6e2b133b10ccdd0e289ebd",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/GetBeanInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/GetBeanInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/GetBeanInterceptor.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/GetBeanInterceptor.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "patch": "@@ -16,15 +16,18 @@\n  *\n  */\n \n-\n package org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor;\n \n import java.lang.reflect.Method;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n-import org.apache.skywalking.apm.plugin.spring.mvc.commons.EnhanceRequireObjectCache;\n import org.springframework.web.context.request.NativeWebRequest;\n+import org.springframework.web.context.request.RequestContextHolder;\n+import org.springframework.web.context.request.ServletRequestAttributes;\n+\n+import static org.apache.skywalking.apm.plugin.spring.mvc.commons.Constants.REQUEST_KEY_IN_RUNTIME_CONTEXT;\n \n /**\n  * {@link GetBeanInterceptor} pass the {@link NativeWebRequest} object into the {@link\n@@ -42,7 +45,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         Object ret) throws Throwable {\n         if (ret instanceof EnhancedInstance) {\n-            ((EnhanceRequireObjectCache)((EnhancedInstance)ret).getSkyWalkingDynamicField()).setNativeWebRequest((NativeWebRequest)objInst.getSkyWalkingDynamicField());\n+            ContextManager.getRuntimeContext().put(REQUEST_KEY_IN_RUNTIME_CONTEXT, ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest());\n         }\n         return ret;\n     }",
                "deletions": 3
            },
            {
                "sha": "f1762a93483a5fa32cf5f2c46b6040d960756dd4",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/InvokeForRequestInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/InvokeForRequestInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/InvokeForRequestInterceptor.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/InvokeForRequestInterceptor.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "patch": "@@ -19,13 +19,16 @@\n \n package org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor;\n \n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n import org.springframework.web.context.request.NativeWebRequest;\n \n import java.lang.reflect.Method;\n \n+import static org.apache.skywalking.apm.plugin.spring.mvc.commons.Constants.RESPONSE_KEY_IN_RUNTIME_CONTEXT;\n+\n /**\n  * {@link InvokeForRequestInterceptor} pass the {@link NativeWebRequest} object into the {@link\n  * org.springframework.stereotype.Controller} object.\n@@ -36,7 +39,7 @@\n     @Override\n     public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         MethodInterceptResult result) throws Throwable {\n-        objInst.setSkyWalkingDynamicField(allArguments[0]);\n+        ContextManager.getRuntimeContext().put(RESPONSE_KEY_IN_RUNTIME_CONTEXT, ((NativeWebRequest)allArguments[0]).getNativeResponse());\n     }\n \n     @Override",
                "deletions": 1
            },
            {
                "sha": "33fbec273f0cfa520b2970c62ed872ceb8579358",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/InvokeHandlerMethodInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/InvokeHandlerMethodInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/InvokeHandlerMethodInterceptor.java",
                "status": "modified",
                "changes": 10,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/InvokeHandlerMethodInterceptor.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "patch": "@@ -18,20 +18,22 @@\n \n package org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor;\n \n+import java.lang.reflect.Method;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n-import org.apache.skywalking.apm.plugin.spring.mvc.commons.EnhanceRequireObjectCache;\n \n-import javax.servlet.http.HttpServletResponse;\n-import java.lang.reflect.Method;\n+import static org.apache.skywalking.apm.plugin.spring.mvc.commons.Constants.REQUEST_KEY_IN_RUNTIME_CONTEXT;\n+import static org.apache.skywalking.apm.plugin.spring.mvc.commons.Constants.RESPONSE_KEY_IN_RUNTIME_CONTEXT;\n \n public class InvokeHandlerMethodInterceptor implements InstanceMethodsAroundInterceptor {\n     @Override\n     public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         MethodInterceptResult result) throws Throwable {\n         if (allArguments[2] instanceof EnhancedInstance) {\n-            ((EnhanceRequireObjectCache)((EnhancedInstance)allArguments[2]).getSkyWalkingDynamicField()).setHttpResponse((HttpServletResponse)allArguments[1]);\n+            ContextManager.getRuntimeContext().put(RESPONSE_KEY_IN_RUNTIME_CONTEXT, allArguments[1]);\n+            ContextManager.getRuntimeContext().put(REQUEST_KEY_IN_RUNTIME_CONTEXT, allArguments[0]);\n         }\n     }\n ",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "Fix NPE in alarm content generation. (#1558)\n\n* Update InstanceReferenceMetricAlarmAssertWorker.java\r\n\r\n\u589e\u52a0osInfo \u5224\u7a7a\r\n\r\n* Update InstanceReferenceMetricAlarmAssertWorker.java\r\n\r\n\u589e\u52a0osinfo \u5224\u7a7a",
        "commit": "https://github.com/apache/skywalking/commit/a29a8d7c09641b7c4e722d03c9816d15d68855c4",
        "parent": "https://github.com/apache/skywalking/commit/8302bbfdfd102a8462ccbc9d177037d7c99cade3",
        "bug_id": "skywalking_33",
        "file": [
            {
                "sha": "9f5ffc389c7e3ed76ba9f736e0800b112c0ac735",
                "filename": "apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/instance/InstanceReferenceMetricAlarmAssertWorker.java",
                "blob_url": "https://github.com/apache/skywalking/blob/a29a8d7c09641b7c4e722d03c9816d15d68855c4/apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/instance/InstanceReferenceMetricAlarmAssertWorker.java",
                "raw_url": "https://github.com/apache/skywalking/raw/a29a8d7c09641b7c4e722d03c9816d15d68855c4/apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/instance/InstanceReferenceMetricAlarmAssertWorker.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/instance/InstanceReferenceMetricAlarmAssertWorker.java?ref=a29a8d7c09641b7c4e722d03c9816d15d68855c4",
                "patch": "@@ -68,7 +68,7 @@ public InstanceReferenceMetricAlarmAssertWorker(ModuleManager moduleManager) {\n         Instance instance = instanceDAO.getInstance(alarm.getBehindInstanceId());\n         JsonObject osInfo = gson.fromJson(instance.getOsInfo(), JsonObject.class);\n         String serverName = Const.UNKNOWN;\n-        if (osInfo.has(\"hostName\")) {\n+        if (osInfo != null && osInfo.has(\"hostName\")) {\n             serverName = osInfo.get(\"hostName\").getAsString();\n         }\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "Merge branch 'master' into NPE",
        "commit": "https://github.com/apache/skywalking/commit/a31a71a5c73e025a8f9bf0075dd0dfae2b2d84ea",
        "parent": "https://github.com/apache/skywalking/commit/cf232524ca21930f12b4cd782c1c78719e99c543",
        "bug_id": "skywalking_34",
        "file": [
            {
                "sha": "191d8607b16ddc539741d3b9f68c49cb787b0880",
                "filename": "apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/postgresql/define/Jdbc3ConnectionInstrumentation.java",
                "blob_url": "https://github.com/apache/skywalking/blob/a31a71a5c73e025a8f9bf0075dd0dfae2b2d84ea/apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/postgresql/define/Jdbc3ConnectionInstrumentation.java",
                "raw_url": "https://github.com/apache/skywalking/raw/a31a71a5c73e025a8f9bf0075dd0dfae2b2d84ea/apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/postgresql/define/Jdbc3ConnectionInstrumentation.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/postgresql/define/Jdbc3ConnectionInstrumentation.java?ref=a31a71a5c73e025a8f9bf0075dd0dfae2b2d84ea",
                "patch": "@@ -41,8 +41,8 @@\n import static org.skywalking.apm.plugin.jdbc.define.Constants.SERVICE_METHOD_INTERCEPT_CLASS;\n \n /**\n- * {@link ConnectionInstrumentation} intercept the following methods that the class which extend {@link\n- * org.postgresql.jdbc.PgConnection}. <br/>\n+ * {@link Jdbc3ConnectionInstrumentation} intercept the following methods that the class which extend {@link\n+ * org.postgresql.jdbc3.Jdbc3Connection}. <br/>\n  *\n  * 1. Enhance <code>prepareStatement</code> by <code>org.skywalking.apm.plugin.jdbc.define.JDBCPrepareStatementInterceptor</code>\n  * 2. Enhance <code>prepareCall</code> by",
                "deletions": 2
            },
            {
                "sha": "7be5b62f6032d16adf51dbaa4f1e9a42ba7e8a22",
                "filename": "apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/postgresql/define/Jdbc4ConnectionInstrumentation.java",
                "blob_url": "https://github.com/apache/skywalking/blob/a31a71a5c73e025a8f9bf0075dd0dfae2b2d84ea/apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/postgresql/define/Jdbc4ConnectionInstrumentation.java",
                "raw_url": "https://github.com/apache/skywalking/raw/a31a71a5c73e025a8f9bf0075dd0dfae2b2d84ea/apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/postgresql/define/Jdbc4ConnectionInstrumentation.java",
                "status": "added",
                "changes": 124,
                "additions": 124,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/postgresql/define/Jdbc4ConnectionInstrumentation.java?ref=a31a71a5c73e025a8f9bf0075dd0dfae2b2d84ea",
                "patch": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2017, OpenSkywalking Organization All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Project repository: https://github.com/OpenSkywalking/skywalking\n+ */\n+\n+package org.skywalking.apm.plugin.jdbc.postgresql.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+import static org.skywalking.apm.agent.core.plugin.match.NameMatch.byName;\n+import static org.skywalking.apm.plugin.jdbc.define.Constants.CLOSE_METHOD_NAME;\n+import static org.skywalking.apm.plugin.jdbc.define.Constants.COMMIT_METHOD_NAME;\n+import static org.skywalking.apm.plugin.jdbc.define.Constants.CREATE_STATEMENT_INTERCEPT_CLASS;\n+import static org.skywalking.apm.plugin.jdbc.define.Constants.CREATE_STATEMENT_METHOD_NAME;\n+import static org.skywalking.apm.plugin.jdbc.define.Constants.PREPARE_CALL_INTERCEPT_CLASS;\n+import static org.skywalking.apm.plugin.jdbc.define.Constants.PREPARE_CALL_METHOD_NAME;\n+import static org.skywalking.apm.plugin.jdbc.define.Constants.PREPARE_STATEMENT_INTERCEPT_CLASS;\n+import static org.skywalking.apm.plugin.jdbc.define.Constants.PREPARE_STATEMENT_METHOD_NAME;\n+import static org.skywalking.apm.plugin.jdbc.define.Constants.RELEASE_SAVE_POINT_METHOD_NAME;\n+import static org.skywalking.apm.plugin.jdbc.define.Constants.ROLLBACK_METHOD_NAME;\n+import static org.skywalking.apm.plugin.jdbc.define.Constants.SERVICE_METHOD_INTERCEPT_CLASS;\n+\n+/**\n+ * {@link Jdbc4ConnectionInstrumentation} intercept the following methods that the class which extend {@link\n+ * org.postgresql.jdbc4.Jdbc4Connection}. <br/>\n+ *\n+ * 1. Enhance <code>prepareStatement</code> by <code>org.skywalking.apm.plugin.jdbc.define.JDBCPrepareStatementInterceptor</code>\n+ * 2. Enhance <code>prepareCall</code> by\n+ * <code>org.skywalking.apm.plugin.jdbc.define.JDBCPrepareCallInterceptor</code>\n+ * 3. Enhance <code>createStatement</code>\n+ * by <code>org.skywalking.apm.plugin.jdbc.define.JDBCStatementInterceptor</code>\n+ * 4. Enhance <code>commit, rollback, close, releaseSavepoint</code> by <code>org.skywalking.apm.plugin.jdbc.define.ConnectionServiceMethodInterceptor</code>\n+ *\n+ * @author zhangxin\n+ */\n+public class Jdbc4ConnectionInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {\n+\n+    public static final String ENHANCE_CLASS = \"org.postgresql.jdbc4.Jdbc4Connection\";\n+\n+    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {\n+        return new ConstructorInterceptPoint[0];\n+    }\n+\n+    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {\n+        return new InstanceMethodsInterceptPoint[] {\n+            new InstanceMethodsInterceptPoint() {\n+                @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                    return named(PREPARE_STATEMENT_METHOD_NAME).and(takesArguments(4));\n+                }\n+\n+                @Override public String getMethodsInterceptor() {\n+                    return PREPARE_STATEMENT_INTERCEPT_CLASS;\n+                }\n+\n+                @Override public boolean isOverrideArgs() {\n+                    return false;\n+                }\n+            },\n+            new InstanceMethodsInterceptPoint() {\n+                @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                    return named(PREPARE_CALL_METHOD_NAME).and(takesArguments(4));\n+                }\n+\n+                @Override public String getMethodsInterceptor() {\n+                    return PREPARE_CALL_INTERCEPT_CLASS;\n+                }\n+\n+                @Override public boolean isOverrideArgs() {\n+                    return false;\n+                }\n+            },\n+            new InstanceMethodsInterceptPoint() {\n+                @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                    return named(CREATE_STATEMENT_METHOD_NAME).and(takesArguments(3));\n+                }\n+\n+                @Override public String getMethodsInterceptor() {\n+                    return CREATE_STATEMENT_INTERCEPT_CLASS;\n+                }\n+\n+                @Override public boolean isOverrideArgs() {\n+                    return false;\n+                }\n+            },\n+            new InstanceMethodsInterceptPoint() {\n+                @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                    return named(COMMIT_METHOD_NAME).or(named(ROLLBACK_METHOD_NAME)).or(named(CLOSE_METHOD_NAME)).or(named(RELEASE_SAVE_POINT_METHOD_NAME));\n+                }\n+\n+                @Override public String getMethodsInterceptor() {\n+                    return SERVICE_METHOD_INTERCEPT_CLASS;\n+                }\n+\n+                @Override public boolean isOverrideArgs() {\n+                    return false;\n+                }\n+            }\n+        };\n+    }\n+\n+    @Override protected ClassMatch enhanceClass() {\n+        return byName(ENHANCE_CLASS);\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "3fe0ad09bc367d8700b902b01c9cd02549f88cd2",
                "filename": "apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/resources/skywalking-plugin.def",
                "blob_url": "https://github.com/apache/skywalking/blob/a31a71a5c73e025a8f9bf0075dd0dfae2b2d84ea/apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/resources/skywalking-plugin.def",
                "raw_url": "https://github.com/apache/skywalking/raw/a31a71a5c73e025a8f9bf0075dd0dfae2b2d84ea/apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/resources/skywalking-plugin.def",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/resources/skywalking-plugin.def?ref=a31a71a5c73e025a8f9bf0075dd0dfae2b2d84ea",
                "patch": "@@ -1,3 +1,4 @@\n postgresql-8.x=org.skywalking.apm.plugin.jdbc.postgresql.define.DriverInstrumentation\n postgresql-8.x=org.skywalking.apm.plugin.jdbc.postgresql.define.Jdbc3ConnectionInstrumentation\n+postgresql-8.x=org.skywalking.apm.plugin.jdbc.postgresql.define.Jdbc4ConnectionInstrumentation\n postgresql-8.x=org.skywalking.apm.plugin.jdbc.postgresql.define.ConnectionInstrumentation",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "[Agent] Apache http client plugin bug (#1448) (#1452)\n\n* #1447\r\n\r\nFixed the after method interceptor for the apache http client NPE error when the response is null cause by the doExecute method throw a exception.",
        "commit": "https://github.com/apache/skywalking/commit/6b99abffff801cc7bfd6ce32919329b1acb0bd8a",
        "parent": "https://github.com/apache/skywalking/commit/86bb1c05e420b8e11ab137775fc0a0f0790cb28e",
        "bug_id": "skywalking_35",
        "file": [
            {
                "sha": "5d2cf2908385e48480b964e87fc337008267d810",
                "filename": "apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/6b99abffff801cc7bfd6ce32919329b1acb0bd8a/apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/6b99abffff801cc7bfd6ce32919329b1acb0bd8a/apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java",
                "status": "modified",
                "changes": 40,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java?ref=6b99abffff801cc7bfd6ce32919329b1acb0bd8a",
                "patch": "@@ -18,23 +18,14 @@\n \n package org.apache.skywalking.apm.plugin.httpClient.v4;\n \n-import org.apache.http.HttpHost;\n-import org.apache.http.HttpRequest;\n-import org.apache.http.HttpResponse;\n-import org.apache.http.StatusLine;\n-import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n-import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n-import org.apache.skywalking.apm.agent.core.context.ContextManager;\n-import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n-import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n-import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n-import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n-\n import java.lang.reflect.Method;\n import java.net.URL;\n+import org.apache.http.*;\n+import org.apache.skywalking.apm.agent.core.context.*;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.*;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.*;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n \n public class HttpClientExecuteInterceptor implements InstanceMethodsAroundInterceptor {\n \n@@ -73,16 +64,19 @@\n             return ret;\n         }\n \n-        HttpResponse response = (HttpResponse)ret;\n-        StatusLine responseStatusLine = response.getStatusLine();\n-        if (responseStatusLine != null) {\n-            int statusCode = responseStatusLine.getStatusCode();\n-            AbstractSpan span = ContextManager.activeSpan();\n-            if (statusCode >= 400) {\n-                span.errorOccurred();\n-                Tags.STATUS_CODE.set(span, Integer.toString(statusCode));\n+        if (ret != null) {\n+            HttpResponse response = (HttpResponse)ret;\n+            StatusLine responseStatusLine = response.getStatusLine();\n+            if (responseStatusLine != null) {\n+                int statusCode = responseStatusLine.getStatusCode();\n+                AbstractSpan span = ContextManager.activeSpan();\n+                if (statusCode >= 400) {\n+                    span.errorOccurred();\n+                    Tags.STATUS_CODE.set(span, Integer.toString(statusCode));\n+                }\n             }\n         }\n+        \n         ContextManager.stopSpan();\n         return ret;\n     }",
                "deletions": 23
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "[Agent] Apache http client plugin bug (#1448)\n\n* #1447\r\n\r\nFixed the after method interceptor for the apache http client NPE error when the response is null cause by the doExecute method throw a exception.",
        "commit": "https://github.com/apache/skywalking/commit/b8206b8cecd787891f1ace550ecd9550d7bec1bf",
        "parent": "https://github.com/apache/skywalking/commit/5299a68e7c7e469b3cfe4d440228d351f12c3860",
        "bug_id": "skywalking_36",
        "file": [
            {
                "sha": "5d2cf2908385e48480b964e87fc337008267d810",
                "filename": "apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/b8206b8cecd787891f1ace550ecd9550d7bec1bf/apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/b8206b8cecd787891f1ace550ecd9550d7bec1bf/apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java",
                "status": "modified",
                "changes": 40,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java?ref=b8206b8cecd787891f1ace550ecd9550d7bec1bf",
                "patch": "@@ -18,23 +18,14 @@\n \n package org.apache.skywalking.apm.plugin.httpClient.v4;\n \n-import org.apache.http.HttpHost;\n-import org.apache.http.HttpRequest;\n-import org.apache.http.HttpResponse;\n-import org.apache.http.StatusLine;\n-import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n-import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n-import org.apache.skywalking.apm.agent.core.context.ContextManager;\n-import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n-import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n-import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n-import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n-\n import java.lang.reflect.Method;\n import java.net.URL;\n+import org.apache.http.*;\n+import org.apache.skywalking.apm.agent.core.context.*;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.*;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.*;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n \n public class HttpClientExecuteInterceptor implements InstanceMethodsAroundInterceptor {\n \n@@ -73,16 +64,19 @@\n             return ret;\n         }\n \n-        HttpResponse response = (HttpResponse)ret;\n-        StatusLine responseStatusLine = response.getStatusLine();\n-        if (responseStatusLine != null) {\n-            int statusCode = responseStatusLine.getStatusCode();\n-            AbstractSpan span = ContextManager.activeSpan();\n-            if (statusCode >= 400) {\n-                span.errorOccurred();\n-                Tags.STATUS_CODE.set(span, Integer.toString(statusCode));\n+        if (ret != null) {\n+            HttpResponse response = (HttpResponse)ret;\n+            StatusLine responseStatusLine = response.getStatusLine();\n+            if (responseStatusLine != null) {\n+                int statusCode = responseStatusLine.getStatusCode();\n+                AbstractSpan span = ContextManager.activeSpan();\n+                if (statusCode >= 400) {\n+                    span.errorOccurred();\n+                    Tags.STATUS_CODE.set(span, Integer.toString(statusCode));\n+                }\n             }\n         }\n+        \n         ContextManager.stopSpan();\n         return ret;\n     }",
                "deletions": 23
            }
        ]
    },
    {
        "repo": "skywalking",
        "message": "Merge branch 'master' into feature/collector-modelization\n\n* master:\n  Update version for 3.2.4 release.\n  add exception handler for disruptorQueue\n  support jdbc4 api of postgresql\n  support for logback MDC\n  AgentStream NullPointerException with RemoteWorker",
        "commit": "https://github.com/apache/skywalking/commit/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
        "parent": "https://github.com/apache/skywalking/commit/ba695f89ae40a4824facd7540ad527274f8ca201",
        "bug_id": "skywalking_37",
        "file": [
            {
                "sha": "46334d58258eb91c4a9fc2919040c589fcf3a5ee",
                "filename": "apm-application-toolkit/apm-toolkit-log4j-1.x/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-application-toolkit/apm-toolkit-log4j-1.x/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-application-toolkit/apm-toolkit-log4j-1.x/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-application-toolkit/apm-toolkit-log4j-1.x/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n     <parent>\n         <artifactId>apm-application-toolkit</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "ab3778be838af5cf660c54936bdfe247feccb4a6",
                "filename": "apm-application-toolkit/apm-toolkit-log4j-2.x/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-application-toolkit/apm-toolkit-log4j-2.x/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-application-toolkit/apm-toolkit-log4j-2.x/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-application-toolkit/apm-toolkit-log4j-2.x/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n     <parent>\n         <artifactId>apm-application-toolkit</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "e51649ba57f774bb8e01bf01b92c8940ce8a2a94",
                "filename": "apm-application-toolkit/apm-toolkit-logback-1.x/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-application-toolkit/apm-toolkit-logback-1.x/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-application-toolkit/apm-toolkit-logback-1.x/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-application-toolkit/apm-toolkit-logback-1.x/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n     <parent>\n         <artifactId>apm-application-toolkit</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "e1c8d7b0828b04d4c4da7961ed48b31d328b431a",
                "filename": "apm-application-toolkit/apm-toolkit-logback-1.x/src/main/java/org/skywalking/apm/toolkit/log/logback/v1/x/mdc/LogbackMDCPatternConverter.java",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-application-toolkit/apm-toolkit-logback-1.x/src/main/java/org/skywalking/apm/toolkit/log/logback/v1/x/mdc/LogbackMDCPatternConverter.java",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-application-toolkit/apm-toolkit-logback-1.x/src/main/java/org/skywalking/apm/toolkit/log/logback/v1/x/mdc/LogbackMDCPatternConverter.java",
                "status": "added",
                "changes": 48,
                "additions": 48,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-application-toolkit/apm-toolkit-logback-1.x/src/main/java/org/skywalking/apm/toolkit/log/logback/v1/x/mdc/LogbackMDCPatternConverter.java?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2017, OpenSkywalking Organization All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Project repository: https://github.com/OpenSkywalking/skywalking\n+ */\n+\n+package org.skywalking.apm.toolkit.log.logback.v1.x.mdc;\n+\n+import ch.qos.logback.classic.pattern.MDCConverter;\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.util.OptionHelper;\n+\n+/**\n+ * @author zhangkewei\n+ */\n+public class LogbackMDCPatternConverter extends MDCConverter {\n+    private static final  String CONVERT_KEY = \"tid\";\n+\n+    private boolean convert4TID = false;\n+    @Override\n+    public void start() {\n+        super.start();\n+        String[] key = OptionHelper.extractDefaultReplacement(getFirstOption());\n+        if (null != key && key.length > 0 && CONVERT_KEY.equals(key[0])) {\n+            convert4TID = true;\n+        }\n+    }\n+    @Override\n+    public String convert(ILoggingEvent iLoggingEvent) {\n+        return convert4TID ? convertTID() : super.convert(iLoggingEvent);\n+    }\n+\n+    public String convertTID() {\n+        return \"TID: N/A\";\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "d67142578d12a69d14cc09867caeef42e518f7b7",
                "filename": "apm-application-toolkit/apm-toolkit-logback-1.x/src/main/java/org/skywalking/apm/toolkit/log/logback/v1/x/mdc/TraceIdMDCPatternLogbackLayout.java",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-application-toolkit/apm-toolkit-logback-1.x/src/main/java/org/skywalking/apm/toolkit/log/logback/v1/x/mdc/TraceIdMDCPatternLogbackLayout.java",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-application-toolkit/apm-toolkit-logback-1.x/src/main/java/org/skywalking/apm/toolkit/log/logback/v1/x/mdc/TraceIdMDCPatternLogbackLayout.java",
                "status": "added",
                "changes": 31,
                "additions": 31,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-application-toolkit/apm-toolkit-logback-1.x/src/main/java/org/skywalking/apm/toolkit/log/logback/v1/x/mdc/TraceIdMDCPatternLogbackLayout.java?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2017, OpenSkywalking Organization All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Project repository: https://github.com/OpenSkywalking/skywalking\n+ */\n+\n+package org.skywalking.apm.toolkit.log.logback.v1.x.mdc;\n+\n+import ch.qos.logback.classic.PatternLayout;\n+\n+/**\n+ * Override \"X\",SuperClass run before Subclass.\n+ * @author zhangkewei\n+ */\n+public class TraceIdMDCPatternLogbackLayout extends PatternLayout {\n+    static {\n+        defaultConverterMap.put(\"X\", LogbackMDCPatternConverter.class.getName());\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "cb7f2e989dfff428d6e94d62db0c175125823bee",
                "filename": "apm-application-toolkit/apm-toolkit-opentracing/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-application-toolkit/apm-toolkit-opentracing/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-application-toolkit/apm-toolkit-opentracing/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-application-toolkit/apm-toolkit-opentracing/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n     <parent>\n         <artifactId>apm-application-toolkit</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "4489fd5778f420edcec30c70695cd604dfe9fffd",
                "filename": "apm-application-toolkit/apm-toolkit-trace/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-application-toolkit/apm-toolkit-trace/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-application-toolkit/apm-toolkit-trace/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-application-toolkit/apm-toolkit-trace/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -22,7 +22,7 @@\n     <parent>\n         <artifactId>apm-application-toolkit</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "0d4ab34f7fe16d0c3ef4bce8e099c9ce51e725e9",
                "filename": "apm-application-toolkit/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-application-toolkit/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-application-toolkit/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-application-toolkit/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -21,7 +21,7 @@\n     <parent>\n         <artifactId>apm</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n     <artifactId>apm-application-toolkit</artifactId>",
                "deletions": 1
            },
            {
                "sha": "1e988fada41a2e27dcaae8b5d8c072764425ceb1",
                "filename": "apm-collector-3.2.3/apm-collector-agentregister/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector-3.2.3/apm-collector-agentregister/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector-3.2.3/apm-collector-agentregister/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector-3.2.3/apm-collector-agentregister/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n     <parent>\n         <artifactId>apm-collector-3.2.3</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "f709582d2783f0e5db8daba28d74439ebb6419c0",
                "filename": "apm-collector-3.2.3/apm-collector-agentstream/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector-3.2.3/apm-collector-agentstream/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector-3.2.3/apm-collector-agentstream/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector-3.2.3/apm-collector-agentstream/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n     <parent>\n         <artifactId>apm-collector-3.2.3</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "26026dc0938e15709da66cf77e693a99409b7f95",
                "filename": "apm-collector-3.2.3/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/component/NodeComponentSpanListener.java",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector-3.2.3/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/component/NodeComponentSpanListener.java",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector-3.2.3/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/component/NodeComponentSpanListener.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector-3.2.3/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/component/NodeComponentSpanListener.java?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -60,6 +60,7 @@ public void parseExit(SpanDecorator spanDecorator, int applicationId, int applic\n         }\n \n         nodeComponent.setPeerId(spanDecorator.getPeerId());\n+        nodeComponent.setPeer(Const.EMPTY_STRING);\n         id = id + Const.ID_SPLIT + nodeComponent.getPeerId();\n         nodeComponent.setId(id);\n         nodeComponents.add(nodeComponent);\n@@ -81,6 +82,7 @@ public void parseEntry(SpanDecorator spanDecorator, int applicationId, int appli\n         }\n \n         nodeComponent.setPeerId(applicationId);\n+        nodeComponent.setPeer(Const.EMPTY_STRING);\n         id = id + Const.ID_SPLIT + String.valueOf(applicationId);\n         nodeComponent.setId(id);\n ",
                "deletions": 0
            },
            {
                "sha": "d0b76fe344c04fd6c784fa869f0beff090a142cf",
                "filename": "apm-collector-3.2.3/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/mapping/NodeMappingSpanListener.java",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector-3.2.3/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/mapping/NodeMappingSpanListener.java",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector-3.2.3/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/mapping/NodeMappingSpanListener.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector-3.2.3/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/mapping/NodeMappingSpanListener.java?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -51,6 +51,7 @@\n         NodeMappingDataDefine.NodeMapping nodeMapping = new NodeMappingDataDefine.NodeMapping();\n         nodeMapping.setApplicationId(applicationId);\n         nodeMapping.setAddressId(referenceDecorator.getNetworkAddressId());\n+        nodeMapping.setAddress(Const.EMPTY_STRING);\n         String id = String.valueOf(applicationId) + Const.ID_SPLIT + String.valueOf(nodeMapping.getAddressId());\n         nodeMapping.setId(id);\n         nodeMappings.add(nodeMapping);",
                "deletions": 0
            },
            {
                "sha": "8e309c69e1a62fd40ac3cbbee795f998fe3e189b",
                "filename": "apm-collector-3.2.3/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/noderef/NodeReferenceSpanListener.java",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector-3.2.3/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/noderef/NodeReferenceSpanListener.java",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector-3.2.3/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/noderef/NodeReferenceSpanListener.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector-3.2.3/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/noderef/NodeReferenceSpanListener.java?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -53,6 +53,7 @@ public void parseExit(SpanDecorator spanDecorator, int applicationId, int applic\n         NodeReferenceDataDefine.NodeReference nodeReference = new NodeReferenceDataDefine.NodeReference();\n         nodeReference.setFrontApplicationId(applicationId);\n         nodeReference.setBehindApplicationId(spanDecorator.getPeerId());\n+        nodeReference.setBehindPeer(Const.EMPTY_STRING);\n         nodeReference.setTimeBucket(TimeBucketUtils.INSTANCE.getMinuteTimeBucket(spanDecorator.getStartTime()));\n \n         StringBuilder idBuilder = new StringBuilder();\n@@ -79,6 +80,7 @@ public void parseEntry(SpanDecorator spanDecorator, int applicationId, int appli\n             NodeReferenceDataDefine.NodeReference nodeReference = new NodeReferenceDataDefine.NodeReference();\n             nodeReference.setFrontApplicationId(Const.USER_ID);\n             nodeReference.setBehindApplicationId(applicationId);\n+            nodeReference.setBehindPeer(Const.EMPTY_STRING);\n             nodeReference.setTimeBucket(TimeBucketUtils.INSTANCE.getMinuteTimeBucket(spanDecorator.getStartTime()));\n \n             String idBuilder = String.valueOf(nodeReference.getTimeBucket()) + Const.ID_SPLIT + nodeReference.getFrontApplicationId() +\n@@ -96,6 +98,7 @@ public void parseEntry(SpanDecorator spanDecorator, int applicationId, int appli\n         NodeReferenceDataDefine.NodeReference referenceSum = new NodeReferenceDataDefine.NodeReference();\n         referenceSum.setFrontApplicationId(parentApplicationId);\n         referenceSum.setBehindApplicationId(applicationId);\n+        referenceSum.setBehindPeer(Const.EMPTY_STRING);\n         references.add(referenceSum);\n     }\n ",
                "deletions": 0
            },
            {
                "sha": "0115fc58e5fab77a069af0a6f7a6c0903f2c1535",
                "filename": "apm-collector-3.2.3/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/serviceref/ServiceReferenceSpanListener.java",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector-3.2.3/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/serviceref/ServiceReferenceSpanListener.java",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector-3.2.3/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/serviceref/ServiceReferenceSpanListener.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector-3.2.3/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/serviceref/ServiceReferenceSpanListener.java?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -127,12 +127,15 @@ private void sendToAggregationWorker(StreamModuleContext context,\n \n         idBuilder.append(entryServiceId).append(Const.ID_SPLIT);\n         serviceReference.setEntryServiceId(entryServiceId);\n+        serviceReference.setEntryServiceName(Const.EMPTY_STRING);\n \n         idBuilder.append(frontServiceId).append(Const.ID_SPLIT);\n         serviceReference.setFrontServiceId(frontServiceId);\n+        serviceReference.setFrontServiceName(Const.EMPTY_STRING);\n \n         idBuilder.append(behindServiceId);\n         serviceReference.setBehindServiceId(behindServiceId);\n+        serviceReference.setBehindServiceName(Const.EMPTY_STRING);\n \n         serviceReference.setId(idBuilder.toString());\n         serviceReference.setTimeBucket(timeBucket);",
                "deletions": 0
            },
            {
                "sha": "d6ea5c4f37824d9f8c1d8a943871ecfebb8c3084",
                "filename": "apm-collector-3.2.3/apm-collector-client/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector-3.2.3/apm-collector-client/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector-3.2.3/apm-collector-client/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector-3.2.3/apm-collector-client/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n     <parent>\n         <artifactId>apm-collector-3.2.3</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "320a22206b51572349bcdab4b81110074070b4e2",
                "filename": "apm-collector-3.2.3/apm-collector-queue/src/main/java/org/skywalking/apm/collector/queue/disruptor/DisruptorQueueCreator.java",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector-3.2.3/apm-collector-queue/src/main/java/org/skywalking/apm/collector/queue/disruptor/DisruptorQueueCreator.java",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector-3.2.3/apm-collector-queue/src/main/java/org/skywalking/apm/collector/queue/disruptor/DisruptorQueueCreator.java",
                "status": "modified",
                "changes": 19,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector-3.2.3/apm-collector-queue/src/main/java/org/skywalking/apm/collector/queue/disruptor/DisruptorQueueCreator.java?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -18,19 +18,24 @@\n \n package org.skywalking.apm.collector.queue.disruptor;\n \n+import com.lmax.disruptor.ExceptionHandler;\n import com.lmax.disruptor.RingBuffer;\n import com.lmax.disruptor.dsl.Disruptor;\n import org.skywalking.apm.collector.core.queue.DaemonThreadFactory;\n import org.skywalking.apm.collector.core.queue.MessageHolder;\n import org.skywalking.apm.collector.core.queue.QueueCreator;\n import org.skywalking.apm.collector.core.queue.QueueEventHandler;\n import org.skywalking.apm.collector.core.queue.QueueExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * @author peng-yongsheng\n  */\n public class DisruptorQueueCreator implements QueueCreator {\n \n+    private final Logger logger = LoggerFactory.getLogger(DisruptorQueueCreator.class);\n+\n     @Override public QueueEventHandler create(int queueSize, QueueExecutor executor) {\n         // Specify the size of the ring buffer, must be power of 2.\n         if (!((((queueSize - 1) & queueSize) == 0) && queueSize != 0)) {\n@@ -40,6 +45,20 @@\n         // Construct the Disruptor\n         Disruptor<MessageHolder> disruptor = new Disruptor(MessageHolderFactory.INSTANCE, queueSize, DaemonThreadFactory.INSTANCE);\n \n+        disruptor.setDefaultExceptionHandler(new ExceptionHandler<MessageHolder>() {\n+            @Override public void handleEventException(Throwable ex, long sequence, MessageHolder event) {\n+                logger.error(\"handler message error! message: {}.\", event.getMessage(), ex);\n+            }\n+\n+            @Override public void handleOnStartException(Throwable ex) {\n+                logger.error(\"create disruptor failed!\", ex);\n+            }\n+\n+            @Override public void handleOnShutdownException(Throwable ex) {\n+                logger.error(\"shutdown disruptor failed!\", ex);\n+            }\n+        });\n+\n         RingBuffer<MessageHolder> ringBuffer = disruptor.getRingBuffer();\n         DisruptorEventHandler eventHandler = new DisruptorEventHandler(ringBuffer, executor);\n ",
                "deletions": 0
            },
            {
                "sha": "3ff91382154c4d0b41f27a2283be762c083ec89f",
                "filename": "apm-collector-3.2.3/apm-collector-server/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector-3.2.3/apm-collector-server/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector-3.2.3/apm-collector-server/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector-3.2.3/apm-collector-server/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n     <parent>\n         <artifactId>apm-collector-3.2.3</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "afe5bcf0bb1150371eb36e89a7451392fd796219",
                "filename": "apm-collector-3.2.3/apm-collector-ui/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector-3.2.3/apm-collector-ui/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector-3.2.3/apm-collector-ui/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector-3.2.3/apm-collector-ui/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n     <parent>\n         <artifactId>apm-collector-3.2.3</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "05ef93a0591cc36532b1b9fde216e8bd5545865e",
                "filename": "apm-collector/apm-collector-boot/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector/apm-collector-boot/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector/apm-collector-boot/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector/apm-collector-boot/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n     <parent>\n         <artifactId>apm-collector</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "55983ea3abcf895a5668669d8dd64055da042235",
                "filename": "apm-collector/apm-collector-cache/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector/apm-collector-cache/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector/apm-collector-cache/pom.xml",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector/apm-collector-cache/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -5,7 +5,7 @@\n     <parent>\n         <artifactId>apm-collector</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n \n@@ -24,4 +24,4 @@\n             <version>${project.version}</version>\n         </dependency>\n     </dependencies>\n-</project>\n\\ No newline at end of file\n+</project>",
                "deletions": 2
            },
            {
                "sha": "341bbbace864195316813b6af2298f1c0cf7dce3",
                "filename": "apm-collector/apm-collector-cluster/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector/apm-collector-cluster/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector/apm-collector-cluster/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector/apm-collector-cluster/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -5,7 +5,7 @@\n     <parent>\n         <artifactId>apm-collector</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "3ab0bc9dcb2ddb75c912b4c234ca56bafafad65b",
                "filename": "apm-collector/apm-collector-core/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector/apm-collector-core/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector/apm-collector-core/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector/apm-collector-core/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -5,7 +5,7 @@\n     <parent>\n         <artifactId>apm-collector</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "7c8f5f184c15e2bbcdc78f0bb390815cf1deb3de",
                "filename": "apm-collector/apm-collector-queue/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector/apm-collector-queue/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector/apm-collector-queue/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector/apm-collector-queue/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n     <parent>\n         <artifactId>apm-collector</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "41b000e62032d2927de6011cfe538cdf012b0b37",
                "filename": "apm-collector/apm-collector-remote/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector/apm-collector-remote/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector/apm-collector-remote/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector/apm-collector-remote/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -5,7 +5,7 @@\n     <parent>\n         <artifactId>apm-collector</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "a44bded603086c61a0f43ecbceccbbd35f796bae",
                "filename": "apm-collector/apm-collector-storage/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector/apm-collector-storage/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector/apm-collector-storage/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector/apm-collector-storage/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -5,7 +5,7 @@\n     <parent>\n         <artifactId>apm-collector</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "2544a549e0790b295b9387e6a0ec0e50711c8117",
                "filename": "apm-collector/apm-collector-stream/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector/apm-collector-stream/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector/apm-collector-stream/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector/apm-collector-stream/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n     <parent>\n         <artifactId>apm-collector</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "0a79e871af7fd25edf8d996cbf45ac0520feeb02",
                "filename": "apm-collector/apm-collector-ui/collector-ui-jetty-provider/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector/apm-collector-ui/collector-ui-jetty-provider/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector/apm-collector-ui/collector-ui-jetty-provider/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector/apm-collector-ui/collector-ui-jetty-provider/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n     <parent>\n         <artifactId>apm-collector-ui</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "e3520b03b2b30985585968c6438f3e51ffa2334b",
                "filename": "apm-collector/apm-collector-ui/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector/apm-collector-ui/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector/apm-collector-ui/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector/apm-collector-ui/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -5,7 +5,7 @@\n     <parent>\n         <artifactId>apm-collector</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "048731b38708ab9c28c086b69bccb96fa8df8a46",
                "filename": "apm-collector/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-collector/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n     <parent>\n         <artifactId>apm</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "795d5758b45dda4cd090fc3eabade1a891d96288",
                "filename": "apm-commons/apm-datacarrier/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-commons/apm-datacarrier/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-commons/apm-datacarrier/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-commons/apm-datacarrier/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n     <parent>\n         <artifactId>apm-commons</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "3f8d2128fbb72c63f790b938b88f1f80ebdd4b19",
                "filename": "apm-commons/apm-util/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-commons/apm-util/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-commons/apm-util/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-commons/apm-util/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -21,7 +21,7 @@\n     <parent>\n         <artifactId>apm-commons</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "6806bd74064f1c4cd09df3c384cd1ab1c6423f2b",
                "filename": "apm-commons/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-commons/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-commons/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-commons/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -21,7 +21,7 @@\n     <parent>\n         <artifactId>apm</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "a67754da2c4f041702829cc5c2e200aea43e1dd2",
                "filename": "apm-network/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-network/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-network/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-network/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n     <parent>\n         <artifactId>apm</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "5f73e72d19e78597197e03c02151c716d70cf9a5",
                "filename": "apm-sniffer/apm-agent-core/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-agent-core/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-agent-core/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-agent-core/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n     <parent>\n         <groupId>org.skywalking</groupId>\n         <artifactId>apm-sniffer</artifactId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n \n     <artifactId>apm-agent-core</artifactId>",
                "deletions": 1
            },
            {
                "sha": "237753c3ebdb0a9d5d4fdb15a097ccb8f19056bb",
                "filename": "apm-sniffer/apm-agent/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-agent/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-agent/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-agent/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n     <parent>\n         <groupId>org.skywalking</groupId>\n         <artifactId>apm-sniffer</artifactId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n \n     <artifactId>apm-agent</artifactId>",
                "deletions": 1
            },
            {
                "sha": "8eee51e49f3a2859168a18a8edab5d341da0fb68",
                "filename": "apm-sniffer/apm-sdk-plugin/dubbo-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/dubbo-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/dubbo-plugin/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/dubbo-plugin/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -21,7 +21,7 @@\n     <parent>\n         <artifactId>apm-sdk-plugin</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "a467a4458d9b167be74723efce4c7df567fa39fc",
                "filename": "apm-sniffer/apm-sdk-plugin/feign-default-http-9.x-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/feign-default-http-9.x-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/feign-default-http-9.x-plugin/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/feign-default-http-9.x-plugin/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n     <parent>\n         <groupId>org.skywalking</groupId>\n         <artifactId>apm-sdk-plugin</artifactId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "d4d18af14d47b8fcf7c9b7d720917d244e391629",
                "filename": "apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -24,7 +24,7 @@\n     <parent>\n         <groupId>org.skywalking</groupId>\n         <artifactId>apm-sdk-plugin</artifactId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n \n     <artifactId>apm-grpc-1.x-plugin</artifactId>",
                "deletions": 1
            },
            {
                "sha": "59acd3f7f145b6770888eb64b0c7afe2152c2747",
                "filename": "apm-sniffer/apm-sdk-plugin/h2-1.x-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/h2-1.x-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/h2-1.x-plugin/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/h2-1.x-plugin/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -21,7 +21,7 @@\n     <parent>\n         <artifactId>apm-sdk-plugin</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "9f6edf39a6e0d9611df485945be0e9d72f18940d",
                "filename": "apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -24,7 +24,7 @@\n     <parent>\n         <groupId>org.skywalking</groupId>\n         <artifactId>apm-sdk-plugin</artifactId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n \n     <artifactId>apm-httpClient-4.x-plugin</artifactId>",
                "deletions": 1
            },
            {
                "sha": "6901fc284c313a96e70787e1a48416506db2b6da",
                "filename": "apm-sniffer/apm-sdk-plugin/jdbc-commons/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/jdbc-commons/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/jdbc-commons/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/jdbc-commons/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -21,7 +21,7 @@\n     <parent>\n         <artifactId>apm-sdk-plugin</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "434e7e158e35c2c3b5aef314e916dc1e50394e8c",
                "filename": "apm-sniffer/apm-sdk-plugin/jedis-2.x-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/jedis-2.x-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/jedis-2.x-plugin/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/jedis-2.x-plugin/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -24,7 +24,7 @@\n     <parent>\n         <groupId>org.skywalking</groupId>\n         <artifactId>apm-sdk-plugin</artifactId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n \n     <artifactId>apm-jedis-2.x-plugin</artifactId>",
                "deletions": 1
            },
            {
                "sha": "e1a66df1de0f50fc39fdb77f0c5096b047ba7ef6",
                "filename": "apm-sniffer/apm-sdk-plugin/jetty-plugin/jetty-client-9.x-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/jetty-plugin/jetty-client-9.x-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/jetty-plugin/jetty-client-9.x-plugin/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/jetty-plugin/jetty-client-9.x-plugin/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -21,7 +21,7 @@\n     <parent>\n         <artifactId>jetty-plugins</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "83ea380800a2211dae122bf550e1b3ff1f91a18d",
                "filename": "apm-sniffer/apm-sdk-plugin/jetty-plugin/jetty-server-9.x-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/jetty-plugin/jetty-server-9.x-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/jetty-plugin/jetty-server-9.x-plugin/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/jetty-plugin/jetty-server-9.x-plugin/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -21,7 +21,7 @@\n     <parent>\n         <artifactId>jetty-plugins</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "2cb5d3a1287a8e4ce8ae6954116d335d8c9d11ad",
                "filename": "apm-sniffer/apm-sdk-plugin/jetty-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/jetty-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/jetty-plugin/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/jetty-plugin/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -24,7 +24,7 @@\n     <parent>\n         <groupId>org.skywalking</groupId>\n         <artifactId>apm-sdk-plugin</artifactId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n \n     <artifactId>jetty-plugins</artifactId>",
                "deletions": 1
            },
            {
                "sha": "ccb0b097a3216026671642b6d7b0d21e3c3f5895",
                "filename": "apm-sniffer/apm-sdk-plugin/mongodb-3.x-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/mongodb-3.x-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/mongodb-3.x-plugin/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/mongodb-3.x-plugin/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -22,7 +22,7 @@\n     <parent>\n         <artifactId>apm-sdk-plugin</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n \n     <artifactId>apm-mongodb-3.x-plugin</artifactId>",
                "deletions": 1
            },
            {
                "sha": "8dd26be8f176b592c50ab6263e275f0f9fabf12b",
                "filename": "apm-sniffer/apm-sdk-plugin/motan-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/motan-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/motan-plugin/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/motan-plugin/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -21,7 +21,7 @@\n     <parent>\n         <artifactId>apm-sdk-plugin</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "4c3271451f453a9a128a584e21afb4ed5614674c",
                "filename": "apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -21,7 +21,7 @@\n     <parent>\n         <artifactId>apm-sdk-plugin</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "e3c5885694fdaa0f3d79baf1ae95e002d81f9b9c",
                "filename": "apm-sniffer/apm-sdk-plugin/nutz-plugins/http-1.x-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/nutz-plugins/http-1.x-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/nutz-plugins/http-1.x-plugin/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/nutz-plugins/http-1.x-plugin/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -21,7 +21,7 @@\n     <parent>\n         <artifactId>nutz-plugins</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "91299b622328d24592ec8e9beb689ab241d90bbe",
                "filename": "apm-sniffer/apm-sdk-plugin/nutz-plugins/mvc-annotation-1.x-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/nutz-plugins/mvc-annotation-1.x-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/nutz-plugins/mvc-annotation-1.x-plugin/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/nutz-plugins/mvc-annotation-1.x-plugin/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -21,7 +21,7 @@\n     <parent>\n         <artifactId>nutz-plugins</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "fd56aaa282fa3aa76e7eac8f9d322644d58e9b57",
                "filename": "apm-sniffer/apm-sdk-plugin/nutz-plugins/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/nutz-plugins/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/nutz-plugins/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/nutz-plugins/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -24,7 +24,7 @@\n     <parent>\n         <groupId>org.skywalking</groupId>\n         <artifactId>apm-sdk-plugin</artifactId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n \n     <artifactId>nutz-plugins</artifactId>",
                "deletions": 1
            },
            {
                "sha": "7f22cbbec8ee70ed6ce02689f9b210596efe0a4b",
                "filename": "apm-sniffer/apm-sdk-plugin/okhttp-3.x-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/okhttp-3.x-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/okhttp-3.x-plugin/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/okhttp-3.x-plugin/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n     <parent>\n         <groupId>org.skywalking</groupId>\n         <artifactId>apm-sdk-plugin</artifactId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "703ed2bfb8fb863a7ccab18a3437b5401105c348",
                "filename": "apm-sniffer/apm-sdk-plugin/oracle-10.x-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/oracle-10.x-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/oracle-10.x-plugin/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/oracle-10.x-plugin/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -21,7 +21,7 @@\n     <parent>\n         <artifactId>apm-sdk-plugin</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "8c527c6edf0be925066785253d8647d5f2239e3f",
                "filename": "apm-sniffer/apm-sdk-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -24,7 +24,7 @@\n     <parent>\n         <groupId>org.skywalking</groupId>\n         <artifactId>apm-sniffer</artifactId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n \n     <artifactId>apm-sdk-plugin</artifactId>",
                "deletions": 1
            },
            {
                "sha": "eabff19567c0707f77f41e90e470e833e48f2d35",
                "filename": "apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -21,7 +21,7 @@\n     <parent>\n         <artifactId>apm-sdk-plugin</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "191d8607b16ddc539741d3b9f68c49cb787b0880",
                "filename": "apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/postgresql/define/Jdbc3ConnectionInstrumentation.java",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/postgresql/define/Jdbc3ConnectionInstrumentation.java",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/postgresql/define/Jdbc3ConnectionInstrumentation.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/postgresql/define/Jdbc3ConnectionInstrumentation.java?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -41,8 +41,8 @@\n import static org.skywalking.apm.plugin.jdbc.define.Constants.SERVICE_METHOD_INTERCEPT_CLASS;\n \n /**\n- * {@link ConnectionInstrumentation} intercept the following methods that the class which extend {@link\n- * org.postgresql.jdbc.PgConnection}. <br/>\n+ * {@link Jdbc3ConnectionInstrumentation} intercept the following methods that the class which extend {@link\n+ * org.postgresql.jdbc3.Jdbc3Connection}. <br/>\n  *\n  * 1. Enhance <code>prepareStatement</code> by <code>org.skywalking.apm.plugin.jdbc.define.JDBCPrepareStatementInterceptor</code>\n  * 2. Enhance <code>prepareCall</code> by",
                "deletions": 2
            },
            {
                "sha": "7be5b62f6032d16adf51dbaa4f1e9a42ba7e8a22",
                "filename": "apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/postgresql/define/Jdbc4ConnectionInstrumentation.java",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/postgresql/define/Jdbc4ConnectionInstrumentation.java",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/postgresql/define/Jdbc4ConnectionInstrumentation.java",
                "status": "added",
                "changes": 124,
                "additions": 124,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/postgresql/define/Jdbc4ConnectionInstrumentation.java?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2017, OpenSkywalking Organization All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Project repository: https://github.com/OpenSkywalking/skywalking\n+ */\n+\n+package org.skywalking.apm.plugin.jdbc.postgresql.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+import static org.skywalking.apm.agent.core.plugin.match.NameMatch.byName;\n+import static org.skywalking.apm.plugin.jdbc.define.Constants.CLOSE_METHOD_NAME;\n+import static org.skywalking.apm.plugin.jdbc.define.Constants.COMMIT_METHOD_NAME;\n+import static org.skywalking.apm.plugin.jdbc.define.Constants.CREATE_STATEMENT_INTERCEPT_CLASS;\n+import static org.skywalking.apm.plugin.jdbc.define.Constants.CREATE_STATEMENT_METHOD_NAME;\n+import static org.skywalking.apm.plugin.jdbc.define.Constants.PREPARE_CALL_INTERCEPT_CLASS;\n+import static org.skywalking.apm.plugin.jdbc.define.Constants.PREPARE_CALL_METHOD_NAME;\n+import static org.skywalking.apm.plugin.jdbc.define.Constants.PREPARE_STATEMENT_INTERCEPT_CLASS;\n+import static org.skywalking.apm.plugin.jdbc.define.Constants.PREPARE_STATEMENT_METHOD_NAME;\n+import static org.skywalking.apm.plugin.jdbc.define.Constants.RELEASE_SAVE_POINT_METHOD_NAME;\n+import static org.skywalking.apm.plugin.jdbc.define.Constants.ROLLBACK_METHOD_NAME;\n+import static org.skywalking.apm.plugin.jdbc.define.Constants.SERVICE_METHOD_INTERCEPT_CLASS;\n+\n+/**\n+ * {@link Jdbc4ConnectionInstrumentation} intercept the following methods that the class which extend {@link\n+ * org.postgresql.jdbc4.Jdbc4Connection}. <br/>\n+ *\n+ * 1. Enhance <code>prepareStatement</code> by <code>org.skywalking.apm.plugin.jdbc.define.JDBCPrepareStatementInterceptor</code>\n+ * 2. Enhance <code>prepareCall</code> by\n+ * <code>org.skywalking.apm.plugin.jdbc.define.JDBCPrepareCallInterceptor</code>\n+ * 3. Enhance <code>createStatement</code>\n+ * by <code>org.skywalking.apm.plugin.jdbc.define.JDBCStatementInterceptor</code>\n+ * 4. Enhance <code>commit, rollback, close, releaseSavepoint</code> by <code>org.skywalking.apm.plugin.jdbc.define.ConnectionServiceMethodInterceptor</code>\n+ *\n+ * @author zhangxin\n+ */\n+public class Jdbc4ConnectionInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {\n+\n+    public static final String ENHANCE_CLASS = \"org.postgresql.jdbc4.Jdbc4Connection\";\n+\n+    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {\n+        return new ConstructorInterceptPoint[0];\n+    }\n+\n+    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {\n+        return new InstanceMethodsInterceptPoint[] {\n+            new InstanceMethodsInterceptPoint() {\n+                @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                    return named(PREPARE_STATEMENT_METHOD_NAME).and(takesArguments(4));\n+                }\n+\n+                @Override public String getMethodsInterceptor() {\n+                    return PREPARE_STATEMENT_INTERCEPT_CLASS;\n+                }\n+\n+                @Override public boolean isOverrideArgs() {\n+                    return false;\n+                }\n+            },\n+            new InstanceMethodsInterceptPoint() {\n+                @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                    return named(PREPARE_CALL_METHOD_NAME).and(takesArguments(4));\n+                }\n+\n+                @Override public String getMethodsInterceptor() {\n+                    return PREPARE_CALL_INTERCEPT_CLASS;\n+                }\n+\n+                @Override public boolean isOverrideArgs() {\n+                    return false;\n+                }\n+            },\n+            new InstanceMethodsInterceptPoint() {\n+                @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                    return named(CREATE_STATEMENT_METHOD_NAME).and(takesArguments(3));\n+                }\n+\n+                @Override public String getMethodsInterceptor() {\n+                    return CREATE_STATEMENT_INTERCEPT_CLASS;\n+                }\n+\n+                @Override public boolean isOverrideArgs() {\n+                    return false;\n+                }\n+            },\n+            new InstanceMethodsInterceptPoint() {\n+                @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                    return named(COMMIT_METHOD_NAME).or(named(ROLLBACK_METHOD_NAME)).or(named(CLOSE_METHOD_NAME)).or(named(RELEASE_SAVE_POINT_METHOD_NAME));\n+                }\n+\n+                @Override public String getMethodsInterceptor() {\n+                    return SERVICE_METHOD_INTERCEPT_CLASS;\n+                }\n+\n+                @Override public boolean isOverrideArgs() {\n+                    return false;\n+                }\n+            }\n+        };\n+    }\n+\n+    @Override protected ClassMatch enhanceClass() {\n+        return byName(ENHANCE_CLASS);\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "3fe0ad09bc367d8700b902b01c9cd02549f88cd2",
                "filename": "apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/resources/skywalking-plugin.def",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/resources/skywalking-plugin.def",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/resources/skywalking-plugin.def",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/resources/skywalking-plugin.def?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -1,3 +1,4 @@\n postgresql-8.x=org.skywalking.apm.plugin.jdbc.postgresql.define.DriverInstrumentation\n postgresql-8.x=org.skywalking.apm.plugin.jdbc.postgresql.define.Jdbc3ConnectionInstrumentation\n+postgresql-8.x=org.skywalking.apm.plugin.jdbc.postgresql.define.Jdbc4ConnectionInstrumentation\n postgresql-8.x=org.skywalking.apm.plugin.jdbc.postgresql.define.ConnectionInstrumentation",
                "deletions": 0
            },
            {
                "sha": "5b99f27912785596e15f73035ff76c6a6f9abc6f",
                "filename": "apm-sniffer/apm-sdk-plugin/resin-3.x-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/resin-3.x-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/resin-3.x-plugin/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/resin-3.x-plugin/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -25,7 +25,7 @@\n     <parent>\n         <artifactId>apm-sdk-plugin</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n \n     <artifactId>apm-resin-3.x-plugin</artifactId>",
                "deletions": 1
            },
            {
                "sha": "3311a6af842ff3e70b9afa03ac9b48ef0cb80144",
                "filename": "apm-sniffer/apm-sdk-plugin/resin-4.x-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/resin-4.x-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/resin-4.x-plugin/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/resin-4.x-plugin/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -25,7 +25,7 @@\n     <parent>\n         <artifactId>apm-sdk-plugin</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n \n     <artifactId>apm-resin-4.x-plugin</artifactId>",
                "deletions": 1
            },
            {
                "sha": "bad7dd4235cba7b2627e1d728e4c8681f175a22f",
                "filename": "apm-sniffer/apm-sdk-plugin/sharding-jdbc-1.5.x-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/sharding-jdbc-1.5.x-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/sharding-jdbc-1.5.x-plugin/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/sharding-jdbc-1.5.x-plugin/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n     <parent>\n         <artifactId>apm-sdk-plugin</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "9c9933d682a59304260a3e1608ff5f3df2c4712d",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/concurrent-util-4.x-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/spring-plugins/concurrent-util-4.x-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/spring-plugins/concurrent-util-4.x-plugin/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/concurrent-util-4.x-plugin/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -21,7 +21,7 @@\n     <parent>\n         <artifactId>spring-plugins</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "49d9334e8b66d8fea3020075d3f236ab8dd141a9",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -21,7 +21,7 @@\n     <parent>\n         <artifactId>spring-plugins</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "60d1068d3ab3638a5171f93755cf65590bb37e69",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -21,7 +21,7 @@\n     <parent>\n         <artifactId>spring-plugins</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "5df7c48e4f1706ca7a5e387d7ea98a162c6c44e6",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/spring-plugins/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/spring-plugins/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -24,7 +24,7 @@\n     <parent>\n         <groupId>org.skywalking</groupId>\n         <artifactId>apm-sdk-plugin</artifactId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n \n     <artifactId>spring-plugins</artifactId>",
                "deletions": 1
            },
            {
                "sha": "c6bbc5c16a18dbbfb8c2e593cccd74ae1e8ff154",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -21,7 +21,7 @@\n     <parent>\n         <artifactId>spring-plugins</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "46dd4a07f4a6f055e93f5288e222dbe794b2c885",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/spring-cloud/netflix-plugins/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/spring-plugins/spring-cloud/netflix-plugins/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/spring-plugins/spring-cloud/netflix-plugins/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/spring-cloud/netflix-plugins/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -24,7 +24,7 @@\n     <parent>\n         <groupId>org.skywalking</groupId>\n         <artifactId>spring-cloud</artifactId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n \n     <artifactId>netflix-plugins</artifactId>",
                "deletions": 1
            },
            {
                "sha": "93b9534e0f4c8235951e5f1f1f48c6bb7952d1e3",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/spring-cloud/netflix-plugins/spring-cloud-feign-1.x-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/spring-plugins/spring-cloud/netflix-plugins/spring-cloud-feign-1.x-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/spring-plugins/spring-cloud/netflix-plugins/spring-cloud-feign-1.x-plugin/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/spring-cloud/netflix-plugins/spring-cloud-feign-1.x-plugin/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -24,7 +24,7 @@\n     <parent>\n         <groupId>org.skywalking</groupId>\n         <artifactId>netflix-plugins</artifactId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n \n     <artifactId>apm-spring-cloud-feign-1.x-plugin</artifactId>",
                "deletions": 1
            },
            {
                "sha": "0fc2a64ff100326362b94a82fbedd64fbc404412",
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/spring-cloud/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/spring-plugins/spring-cloud/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/spring-plugins/spring-cloud/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/spring-cloud/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -24,7 +24,7 @@\n     <parent>\n         <groupId>org.skywalking</groupId>\n         <artifactId>spring-plugins</artifactId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n \n     <artifactId>spring-cloud</artifactId>",
                "deletions": 1
            },
            {
                "sha": "28e00faae19ce89f4560e8d205df71f8654d041e",
                "filename": "apm-sniffer/apm-sdk-plugin/spymemcached-2.x-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/spymemcached-2.x-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/spymemcached-2.x-plugin/pom.xml",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spymemcached-2.x-plugin/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -24,7 +24,7 @@\n     <parent>\n         <groupId>org.skywalking</groupId>\n         <artifactId>apm-sdk-plugin</artifactId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n \n     <artifactId>apm-spymemcached-2.x-plugin</artifactId>\n@@ -50,4 +50,4 @@\n             <scope>test</scope>\n         </dependency>\n     </dependencies>\n-</project>\n\\ No newline at end of file\n+</project>",
                "deletions": 2
            },
            {
                "sha": "e84b6e2b899a1eb5080904755ab762383e95fe8e",
                "filename": "apm-sniffer/apm-sdk-plugin/struts2-2.x-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/struts2-2.x-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/struts2-2.x-plugin/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/struts2-2.x-plugin/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -21,7 +21,7 @@\n     <parent>\n         <artifactId>apm-sdk-plugin</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "e622245d812bc3ae6b57134dd6259ebe479fbd14",
                "filename": "apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -21,7 +21,7 @@\n     <parent>\n         <artifactId>apm-sdk-plugin</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "af7da6aa6d3e3a843e084e50109938515821906c",
                "filename": "apm-sniffer/apm-sdk-plugin/xmemcached-2.x-plugin/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/xmemcached-2.x-plugin/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-sdk-plugin/xmemcached-2.x-plugin/pom.xml",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/xmemcached-2.x-plugin/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n     <parent>\n         <groupId>org.skywalking</groupId>\n         <artifactId>apm-sdk-plugin</artifactId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n \n     <artifactId>apm-xmemcached-2.x-plugin</artifactId>\n@@ -49,4 +49,4 @@\n             <scope>test</scope>\n         </dependency>\n     </dependencies>\n-</project>\n\\ No newline at end of file\n+</project>",
                "deletions": 2
            },
            {
                "sha": "795b81aaa5c1bd5967910ef21f5da07ccfe94045",
                "filename": "apm-sniffer/apm-test-tools/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-test-tools/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-test-tools/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-test-tools/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n     <parent>\n         <groupId>org.skywalking</groupId>\n         <artifactId>apm-sniffer</artifactId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n \n     <artifactId>apm-test-tools</artifactId>",
                "deletions": 1
            },
            {
                "sha": "f4916644a136123f93f5365922ca8b9257886989",
                "filename": "apm-sniffer/apm-toolkit-activation/apm-toolkit-log4j-1.x-activation/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-toolkit-activation/apm-toolkit-log4j-1.x-activation/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-toolkit-activation/apm-toolkit-log4j-1.x-activation/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-toolkit-activation/apm-toolkit-log4j-1.x-activation/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n     <parent>\n         <artifactId>apm-toolkit-activation</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "2209bc95b3e9deb515726a7cd1e835b21659ca31",
                "filename": "apm-sniffer/apm-toolkit-activation/apm-toolkit-log4j-2.x-activation/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-toolkit-activation/apm-toolkit-log4j-2.x-activation/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-toolkit-activation/apm-toolkit-log4j-2.x-activation/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-toolkit-activation/apm-toolkit-log4j-2.x-activation/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n     <parent>\n         <artifactId>apm-toolkit-activation</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "e8c83b09ad8c81dbf96e4f6a25eaa514467ed115",
                "filename": "apm-sniffer/apm-toolkit-activation/apm-toolkit-logback-1.x-activation/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-toolkit-activation/apm-toolkit-logback-1.x-activation/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-toolkit-activation/apm-toolkit-logback-1.x-activation/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-toolkit-activation/apm-toolkit-logback-1.x-activation/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n     <parent>\n         <artifactId>apm-toolkit-activation</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "4a99e90666e4d6183a8580807dfb85d324a6f58d",
                "filename": "apm-sniffer/apm-toolkit-activation/apm-toolkit-logback-1.x-activation/src/main/java/org/skywalking/apm/toolkit/activation/log/logback/v1/x/mdc/MDCConverterActivation.java",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-toolkit-activation/apm-toolkit-logback-1.x-activation/src/main/java/org/skywalking/apm/toolkit/activation/log/logback/v1/x/mdc/MDCConverterActivation.java",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-toolkit-activation/apm-toolkit-logback-1.x-activation/src/main/java/org/skywalking/apm/toolkit/activation/log/logback/v1/x/mdc/MDCConverterActivation.java",
                "status": "added",
                "changes": 66,
                "additions": 66,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-toolkit-activation/apm-toolkit-logback-1.x-activation/src/main/java/org/skywalking/apm/toolkit/activation/log/logback/v1/x/mdc/MDCConverterActivation.java?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2017, OpenSkywalking Organization All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Project repository: https://github.com/OpenSkywalking/skywalking\n+ */\n+package org.skywalking.apm.toolkit.activation.log.logback.v1.x.mdc;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static org.skywalking.apm.agent.core.plugin.match.NameMatch.byName;\n+\n+/**\n+ * Support MDC https://logback.qos.ch/manual/mdc.html\n+ * @author: zhangkewei\n+ */\n+public class MDCConverterActivation extends ClassInstanceMethodsEnhancePluginDefine {\n+\n+    @Override\n+    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {\n+        return null;\n+    }\n+\n+    @Override\n+    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {\n+        return new InstanceMethodsInterceptPoint[] {\n+            new InstanceMethodsInterceptPoint() {\n+                @Override\n+                public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                    return named(\"convertTID\");\n+                }\n+\n+                @Override\n+                public String getMethodsInterceptor() {\n+                    return \"org.skywalking.apm.toolkit.activation.log.logback.v1.x.mdc.PrintMDCTraceIdInterceptor\";\n+                }\n+\n+                @Override public boolean isOverrideArgs() {\n+                    return false;\n+                }\n+            }\n+        };\n+    }\n+\n+    @Override\n+    protected ClassMatch enhanceClass() {\n+        return byName(\"org.skywalking.apm.toolkit.log.logback.v1.x.mdc.LogbackMDCPatternConverter\");\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "d052778f372a0066593aadce123b0b32f9618539",
                "filename": "apm-sniffer/apm-toolkit-activation/apm-toolkit-logback-1.x-activation/src/main/java/org/skywalking/apm/toolkit/activation/log/logback/v1/x/mdc/PrintMDCTraceIdInterceptor.java",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-toolkit-activation/apm-toolkit-logback-1.x-activation/src/main/java/org/skywalking/apm/toolkit/activation/log/logback/v1/x/mdc/PrintMDCTraceIdInterceptor.java",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-toolkit-activation/apm-toolkit-logback-1.x-activation/src/main/java/org/skywalking/apm/toolkit/activation/log/logback/v1/x/mdc/PrintMDCTraceIdInterceptor.java",
                "status": "added",
                "changes": 45,
                "additions": 45,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-toolkit-activation/apm-toolkit-logback-1.x-activation/src/main/java/org/skywalking/apm/toolkit/activation/log/logback/v1/x/mdc/PrintMDCTraceIdInterceptor.java?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2017, OpenSkywalking Organization All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Project repository: https://github.com/OpenSkywalking/skywalking\n+ */\n+package org.skywalking.apm.toolkit.activation.log.logback.v1.x.mdc;\n+\n+import org.skywalking.apm.agent.core.context.ContextManager;\n+import org.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+/**\n+ * @author zhangkewei\n+ */\n+public class PrintMDCTraceIdInterceptor implements InstanceMethodsAroundInterceptor {\n+    @Override public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments,\n+        Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+\n+    }\n+\n+    @Override public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments,\n+        Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        return \"TID:\" + ContextManager.getGlobalTraceId();\n+    }\n+\n+    @Override public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments,\n+        Class<?>[] argumentsTypes, Throwable t) {\n+\n+    }\n+}\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "e910f4542067b9104e9444c738ca6485f815ab3b",
                "filename": "apm-sniffer/apm-toolkit-activation/apm-toolkit-logback-1.x-activation/src/main/resources/skywalking-plugin.def",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-toolkit-activation/apm-toolkit-logback-1.x-activation/src/main/resources/skywalking-plugin.def",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-toolkit-activation/apm-toolkit-logback-1.x-activation/src/main/resources/skywalking-plugin.def",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-toolkit-activation/apm-toolkit-logback-1.x-activation/src/main/resources/skywalking-plugin.def?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -1 +1,2 @@\n toolkit-logback=org.skywalking.apm.toolkit.activation.log.logback.v1.x.LogbackPatternConverterActivation\n+toolkit-logback=org.skywalking.apm.toolkit.activation.log.logback.v1.x.mdc.MDCConverterActivation\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "ba097971a5e57a59441aad2b94d0b2b172595e96",
                "filename": "apm-sniffer/apm-toolkit-activation/apm-toolkit-opentracing-activation/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-toolkit-activation/apm-toolkit-opentracing-activation/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-toolkit-activation/apm-toolkit-opentracing-activation/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-toolkit-activation/apm-toolkit-opentracing-activation/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n     <parent>\n         <artifactId>apm-toolkit-activation</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "2706980c1a53a19f43c6b0bd09c77939aa5049ad",
                "filename": "apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n     <parent>\n         <artifactId>apm-toolkit-activation</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "cee26941c6ab3a1df204f33c4f8b6e6576a09aef",
                "filename": "apm-sniffer/apm-toolkit-activation/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-toolkit-activation/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/apm-toolkit-activation/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-toolkit-activation/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n     <parent>\n         <artifactId>apm-sniffer</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n     <packaging>pom</packaging>",
                "deletions": 1
            },
            {
                "sha": "22fdb6f5da34c9a78d8e67911d3ce3b51e30e179",
                "filename": "apm-sniffer/pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/apm-sniffer/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n     <parent>\n         <artifactId>apm</artifactId>\n         <groupId>org.skywalking</groupId>\n-        <version>3.2.3-2017</version>\n+        <version>3.2.4-2017</version>\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n ",
                "deletions": 1
            },
            {
                "sha": "c9c948bbdcbd767a3cab2718c37a14ac55a14246",
                "filename": "docker-compose.yml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/docker-compose.yml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/docker-compose.yml",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/docker-compose.yml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -1,7 +1,7 @@\n version: '2.1'\n services:\n   skywalking-webui:\n-    image: skywalking/skywalking-ui:3.2.3-2017\n+    image: skywalking/skywalking-ui:3.2.4-2017\n     expose:\n       - \"8080\"\n     ports:\n@@ -15,7 +15,7 @@ services:\n       - COLLECTOR_SERVERS=skywalking-collector:10800\n \n   skywalking-collector:\n-    image: skywalking/skywalking-collector:3.2.3-2017\n+    image: skywalking/skywalking-collector:3.2.4-2017\n     expose:\n       - \"10800\"\n       - \"11800\"",
                "deletions": 2
            },
            {
                "sha": "bf3ea48ad994bf111a8122aac9aa07493a6c2b85",
                "filename": "pom.xml",
                "blob_url": "https://github.com/apache/skywalking/blob/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/pom.xml",
                "raw_url": "https://github.com/apache/skywalking/raw/1e0e052496a6c5dfd1e4f22cd7699d9d3e214668/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/pom.xml?ref=1e0e052496a6c5dfd1e4f22cd7699d9d3e214668",
                "patch": "@@ -23,7 +23,7 @@\n \n     <groupId>org.skywalking</groupId>\n     <artifactId>apm</artifactId>\n-    <version>3.2.3-2017</version>\n+    <version>3.2.4-2017</version>\n \n     <licenses>\n         <license>",
                "deletions": 1
            }
        ]
    }
]