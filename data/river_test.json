{
    "river_44ca7fd": {
        "bug_id": "river_44ca7fd",
        "commit": "https://github.com/apache/river/commit/44ca7fd4e7e5ce5111e122dcb233ee984c670cf7",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/river/blob/44ca7fd4e7e5ce5111e122dcb233ee984c670cf7/qa/src/com/sun/jini/test/share/BaseQATest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/river/contents/qa/src/com/sun/jini/test/share/BaseQATest.java?ref=44ca7fd4e7e5ce5111e122dcb233ee984c670cf7",
                "deletions": 1,
                "filename": "qa/src/com/sun/jini/test/share/BaseQATest.java",
                "patch": "@@ -1551,7 +1551,9 @@ protected void waitForDiscovery(LookupListener listener)\n                         String[] groups = (String[])pair.getValue();\n                         logger.log(Level.FINE,\n                                          \"   discoveredMap.locator = \"+loc);\n-                        if( groups.length <= 0 ) {\n+                        if (groups == null) {\n+                            logger.log(Level.FINE, \"     discoveredMap.groups is null\");\n+                        } else if( groups.length <= 0 ) {\n                             logger.log(Level.FINE,\n                                    \"     discoveredMap.groups == NO_GROUPS\");\n                         } else {",
                "raw_url": "https://github.com/apache/river/raw/44ca7fd4e7e5ce5111e122dcb233ee984c670cf7/qa/src/com/sun/jini/test/share/BaseQATest.java",
                "sha": "0d5a9bdf49b4a72b0cc4c6e3ce74205f10f04e90",
                "status": "modified"
            }
        ],
        "message": "Fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/river/jtsk/skunk/qa_refactor/trunk@1448054 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/river/commit/e981fea7df9430810f285ab980d5e31df699983b",
        "patched_files": [],
        "repo": "river",
        "unit_tests": [
            "BaseQATest.java"
        ]
    },
    "river_52e488e": {
        "bug_id": "river_52e488e",
        "commit": "https://github.com/apache/river/commit/52e488e576744e44862acabd3ba114e70e489104",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/river/blob/52e488e576744e44862acabd3ba114e70e489104/src/org/apache/river/impl/net/UriString.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/river/contents/src/org/apache/river/impl/net/UriString.java?ref=52e488e576744e44862acabd3ba114e70e489104",
                "deletions": 1,
                "filename": "src/org/apache/river/impl/net/UriString.java",
                "patch": "@@ -430,7 +430,7 @@ public static URI normalisation(URI uri) throws URISyntaxException {\n          */\n         String authority = uri.getAuthority();\n         String path = uri.getPath();\n-        if (path != null || !path.equals(\"\") ){\n+        if (path != null && !path.equals(\"\") ){\n             if (authority != null){\n                 if ( !path.startsWith(\"/\")) path = '/' + path;\n             } else {",
                "raw_url": "https://github.com/apache/river/raw/52e488e576744e44862acabd3ba114e70e489104/src/org/apache/river/impl/net/UriString.java",
                "sha": "f569b4ef866cc9ebc8eb80c61270e7b7b8cf9387",
                "status": "modified"
            }
        ],
        "message": "Fix NullPointerException bug revealed by MS Windows\n\ngit-svn-id: https://svn.apache.org/repos/asf/river/jtsk/trunk@1406894 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/river/commit/e4e647ac23ec75008e1daa64aa2a23e97ab1a28f",
        "patched_files": [
            "UriString.java"
        ],
        "repo": "river",
        "unit_tests": [
            "UriStringTest.java"
        ]
    },
    "river_8121164": {
        "bug_id": "river_8121164",
        "commit": "https://github.com/apache/river/commit/8121164d69b1fc95c7644624854548aee3b6ad6e",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/river/blob/8121164d69b1fc95c7644624854548aee3b6ad6e/qa/src/com/sun/jini/test/impl/norm/OneExpireOneNotTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/river/contents/qa/src/com/sun/jini/test/impl/norm/OneExpireOneNotTest.java?ref=8121164d69b1fc95c7644624854548aee3b6ad6e",
                "deletions": 0,
                "filename": "qa/src/com/sun/jini/test/impl/norm/OneExpireOneNotTest.java",
                "patch": "@@ -123,6 +123,7 @@ public void run() throws Exception {\n             \"test.normLeasePreparer\", expsLease);\n \n \tfinal LeaseBackEndImpl backend = new LeaseBackEndImpl(leaseCount);\n+        backend.export();\n \n \tfor (int i=0; i<leaseCount; i+=2) {\n \t    long initExpiration = System.currentTimeMillis() + renewGrant;",
                "raw_url": "https://github.com/apache/river/raw/8121164d69b1fc95c7644624854548aee3b6ad6e/qa/src/com/sun/jini/test/impl/norm/OneExpireOneNotTest.java",
                "sha": "861d09d5dcd99cc137288f24b7daa17c2c52f2b0",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/river/blob/8121164d69b1fc95c7644624854548aee3b6ad6e/qa/src/com/sun/jini/test/share/LeaseBackEndImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/river/contents/qa/src/com/sun/jini/test/share/LeaseBackEndImpl.java?ref=8121164d69b1fc95c7644624854548aee3b6ad6e",
                "deletions": 1,
                "filename": "qa/src/com/sun/jini/test/share/LeaseBackEndImpl.java",
                "patch": "@@ -114,7 +114,7 @@ public LeaseBackEndImpl(int leaseCount, Class factoryClass)\n         this.factoryClass = factoryClass;\n     }\n     \n-    private synchronized void export() throws ExportException, RemoteException {\n+    public synchronized void export() throws ExportException, RemoteException {\n         LeaseBackEnd stub = \n \t    (LeaseBackEnd) exporter.export(this);\n ",
                "raw_url": "https://github.com/apache/river/raw/8121164d69b1fc95c7644624854548aee3b6ad6e/qa/src/com/sun/jini/test/share/LeaseBackEndImpl.java",
                "sha": "78cd6e933144041049044d8c777b5dc0e18fb385",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/river/blob/8121164d69b1fc95c7644624854548aee3b6ad6e/qa/src/com/sun/jini/test/share/TestLeaseProvider.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/river/contents/qa/src/com/sun/jini/test/share/TestLeaseProvider.java?ref=8121164d69b1fc95c7644624854548aee3b6ad6e",
                "deletions": 0,
                "filename": "qa/src/com/sun/jini/test/share/TestLeaseProvider.java",
                "patch": "@@ -59,6 +59,7 @@\n      */\n     public TestLeaseProvider(int leaseCount) throws RemoteException {\n \tleaseBackEnd = new LeaseBackEndImpl(leaseCount);\n+        leaseBackEnd.export();\n     }\n \n     /**\n@@ -73,6 +74,7 @@ public TestLeaseProvider(int leaseCount) throws RemoteException {\n     public TestLeaseProvider(int leaseCount, Class factoryClass) \n \t       throws RemoteException {\n \tleaseBackEnd = new LeaseBackEndImpl(leaseCount, factoryClass);\n+        leaseBackEnd.export();\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/river/raw/8121164d69b1fc95c7644624854548aee3b6ad6e/qa/src/com/sun/jini/test/share/TestLeaseProvider.java",
                "sha": "e0552d2400d8f8c86271ed4e888926e06f6a9f37",
                "status": "modified"
            },
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/river/blob/8121164d69b1fc95c7644624854548aee3b6ad6e/qa/src/com/sun/jini/test/spec/discoveryservice/lease/LeaseExpiration.java",
                "changes": 56,
                "contents_url": "https://api.github.com/repos/apache/river/contents/qa/src/com/sun/jini/test/spec/discoveryservice/lease/LeaseExpiration.java?ref=8121164d69b1fc95c7644624854548aee3b6ad6e",
                "deletions": 22,
                "filename": "qa/src/com/sun/jini/test/spec/discoveryservice/lease/LeaseExpiration.java",
                "patch": "@@ -68,6 +68,7 @@\n \n import com.sun.jini.proxy.BasicProxyTrustVerifier;\n import com.sun.jini.qa.harness.Test;\n+import java.rmi.server.ExportException;\n \n /**\n  * This class determines if, when a client's lease on a registration with the\n@@ -90,13 +91,16 @@\n     /** Convenience class for handling the events sent by the service\n      *  with which the client (the test) has registered\n      */\n-\n-    private Object proxy;\n+    \n+    \n \n     public class ServiceEventListener implements RemoteEventListener, \n \t\t\t\t\t\t ServerProxyTrust,\n \t\t\t\t\t\t Serializable \n     {\n+        private final Exporter exporter;\n+        private Object proxy;\n+        \n         public ServiceEventListener() throws RemoteException {\n             super();\n \t    Configuration c = getConfig().getConfiguration();\n@@ -110,14 +114,19 @@ public ServiceEventListener() throws RemoteException {\n \t\t    throw new RemoteException(\"Could not find listener exporter\", e);\n \t\t}\n \t    }\n+            this.exporter = exporter;\n+        }\n+        \n+        private synchronized void export() throws ExportException{\n             proxy = exporter.export(this);\n         }\n+        \n \n-\tpublic Object writeReplace() throws ObjectStreamException {\n+\tpublic synchronized Object writeReplace() throws ObjectStreamException {\n \t    return proxy;\n \t}\n \n-\tpublic TrustVerifier getProxyVerifier() {\n+\tpublic synchronized TrustVerifier getProxyVerifier() {\n \t    return new BasicProxyTrustVerifier(proxy);\n \t}\n \n@@ -175,14 +184,14 @@ public void notify(LeaseRenewalEvent ev) {\n     }//end class LRMListener\n \n     private ServiceRegistrar srvcReg = null;\n-    private ArrayList lookupList = new ArrayList();\n+    private final ArrayList lookupList = new ArrayList();\n     private String[] memberGroups = DiscoveryGroupManagement.NO_GROUPS;\n     private static final int N_CYCLES_WAIT_EXPIRATION = 10;\n     private static final long N_SECS = 30;\n-    private long duration = N_SECS*1000;\n+    private final long duration = N_SECS*1000;\n     private MarshalledObject handback = null;\n     private boolean eventReceived = false;\n-    private Object eventLock = new Object();\n+    private final Object eventLock = new Object();\n \n     /** Constructs and returns the duration values (in milliseconds) to \n      *  request on each renewal attempt (can be overridden by sub-classes)\n@@ -205,21 +214,23 @@ public Test construct(QAConfig config) throws Exception {\n         /* Start a lookup service */\n         logger.log(Level.FINE, \n                           \"starting a new lookup service\");\n-        synchronized(eventLock) {\n-            eventReceived = false;\n-            srvcReg = getManager().startLookupService(); // already prepared\n-            lookupList.add( srvcReg );\n+        synchronized (this){\n+            synchronized(eventLock) {\n+                eventReceived = false;\n+                srvcReg = getManager().startLookupService(); // already prepared\n+                lookupList.add( srvcReg );\n+            }\n+            DiscoveryAdmin admin = DiscoveryAdminUtil.getDiscoveryAdmin(srvcReg);\n+            memberGroups = admin.getMemberGroups();\n+            LocatorsUtil.displayLocator(QAConfig.getConstrainedLocator(srvcReg.getLocator()),\n+                                        \"  lookup locator\",Level.FINE);\n+            logger.log(Level.FINE, \n+                       \"  lookup MemberGroup(s) = \"\n+                       +GroupsUtil.toCommaSeparatedStr(memberGroups));\n+            handback = new MarshalledObject\n+                                  (GroupsUtil.toCommaSeparatedStr(memberGroups));\n+            return this;\n         }\n-        DiscoveryAdmin admin = DiscoveryAdminUtil.getDiscoveryAdmin(srvcReg);\n-        memberGroups = admin.getMemberGroups();\n-        LocatorsUtil.displayLocator(QAConfig.getConstrainedLocator(srvcReg.getLocator()),\n-                                    \"  lookup locator\",Level.FINE);\n-        logger.log(Level.FINE, \n-\t\t   \"  lookup MemberGroup(s) = \"\n-\t\t   +GroupsUtil.toCommaSeparatedStr(memberGroups));\n-\thandback = new MarshalledObject\n-                              (GroupsUtil.toCommaSeparatedStr(memberGroups));\n-        return this;\n     }//end construct\n \n     /** Executes the current test by doing the following:\n@@ -257,7 +268,7 @@ public Test construct(QAConfig config) throws Exception {\n      *  9. Verify that the lookup discovery service does not send anymore\n      *     discovery events to the registration's listener\n      */\n-    public void run() throws Exception {\n+    public synchronized void run() throws Exception {\n         logger.log(Level.FINE, \"run()\");\n         if(discoverySrvc == null) {\n             throw new TestException(\"could not successfully start the service \"\n@@ -270,6 +281,7 @@ public void run() throws Exception {\n         /* Request a registration with the lookup discovery service */\n         logger.log(Level.FINE, \"registering with the lookup discovery service\");\n \tServiceEventListener eventListener = new ServiceEventListener();\n+        eventListener.export();\n \tLookupDiscoveryRegistration reg = \n \t    DiscoveryServiceUtil.getRegistration\n \t                  (discoverySrvc,",
                "raw_url": "https://github.com/apache/river/raw/8121164d69b1fc95c7644624854548aee3b6ad6e/qa/src/com/sun/jini/test/spec/discoveryservice/lease/LeaseExpiration.java",
                "sha": "d3d340b971e514e958ecb82cd8cd9beea10a1c85",
                "status": "modified"
            }
        ],
        "message": "River-420 Fixes for unsafe publication during construction.\n\nFixed NullPointerException caused by previous commit not calling export after removing it from constructor.\n\ngit-svn-id: https://svn.apache.org/repos/asf/river/jtsk/skunk/qa_refactor/trunk@1485607 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/river/commit/53075ac1c9a85f14123cf6eab3ec584464f117bc",
        "patched_files": [
            "LeaseExpiration.java",
            "LeaseBackEndImpl.java"
        ],
        "repo": "river",
        "unit_tests": [
            "LeaseExpirationTest.java",
            "TestLeaseProvider.java",
            "OneExpireOneNotTest.java"
        ]
    }
}