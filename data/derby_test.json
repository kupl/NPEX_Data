{
    "derby_02fcca3": {
        "bug_id": "derby_02fcca3",
        "commit": "https://github.com/apache/derby/commit/02fcca3729ed28a4be5900f965da3f8413b4026e",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/derby/blob/02fcca3729ed28a4be5900f965da3f8413b4026e/java/engine/org/apache/derby/catalog/Java5SystemProcedures.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/catalog/Java5SystemProcedures.java?ref=02fcca3729ed28a4be5900f965da3f8413b4026e",
                "deletions": 3,
                "filename": "java/engine/org/apache/derby/catalog/Java5SystemProcedures.java",
                "patch": "@@ -23,14 +23,14 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \n import java.sql.SQLException;\n \n-import org.apache.derby.iapi.sql.compile.CompilerContext;\n import org.apache.derby.iapi.sql.conn.ConnectionUtil;\n import org.apache.derby.iapi.sql.dictionary.OptionalTool;\n import org.apache.derby.iapi.error.PublicAPI;\n import org.apache.derby.iapi.error.StandardException;\n import org.apache.derby.iapi.reference.SQLState;\n import org.apache.derby.iapi.services.context.ContextService;\n import org.apache.derby.iapi.services.loader.ClassFactory;\n+import org.apache.derby.iapi.services.loader.ClassFactoryContext;\n import org.apache.derby.shared.common.sanity.SanityManager;\n \n /**\n@@ -94,8 +94,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n         throws SQLException\n     {\n         try {\n-\t\t\tCompilerContext cc = (CompilerContext) ContextService.getContext( CompilerContext.CONTEXT_ID );\n-            ClassFactory    classFactory = cc.getClassFactory();\n+\t\t\tClassFactoryContext cfc = (ClassFactoryContext) ContextService.getContext( ClassFactoryContext.CONTEXT_ID );\n+            ClassFactory    classFactory = cfc.getClassFactory();\n \n             String              toolClassName = findToolClassName( toolName, optionalArgs );            \n             OptionalTool    tool = null;",
                "raw_url": "https://github.com/apache/derby/raw/02fcca3729ed28a4be5900f965da3f8413b4026e/java/engine/org/apache/derby/catalog/Java5SystemProcedures.java",
                "sha": "30d26daf2b56f578c9cf2ea577759a87789911d1",
                "status": "modified"
            },
            {
                "additions": 140,
                "blob_url": "https://github.com/apache/derby/blob/02fcca3729ed28a4be5900f965da3f8413b4026e/java/testing/org/apache/derbyTesting/functionTests/tests/lang/Test_6496.java",
                "changes": 140,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/Test_6496.java?ref=02fcca3729ed28a4be5900f965da3f8413b4026e",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/Test_6496.java",
                "patch": "@@ -0,0 +1,140 @@\n+/*\n+\n+   Derby - Class org.apache.derbyTesting.functionTests.tests.lang.Test_6496\n+\n+   Licensed to the Apache Software Foundation (ASF) under one or more\n+   contributor license agreements.  See the NOTICE file distributed with\n+   this work for additional information regarding copyright ownership.\n+   The ASF licenses this file to you under the Apache License, Version 2.0\n+   (the \"License\"); you may not use this file except in compliance with\n+   the License.  You may obtain a copy of the License at\n+\n+     http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+\n+ */\n+\n+package org.apache.derbyTesting.functionTests.tests.lang;\n+\n+import java.sql.SQLException;\n+import java.sql.SQLWarning;\n+import java.sql.Connection;\n+import java.sql.Statement;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.DriverManager;\n+import java.util.ArrayList;\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import org.apache.derbyTesting.junit.BaseJDBCTestCase;\n+import org.apache.derbyTesting.junit.JDBC;\n+import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;\n+import org.apache.derbyTesting.junit.JDBC;\n+import org.apache.derbyTesting.junit.SecurityManagerSetup;\n+import org.apache.derbyTesting.junit.TestConfiguration;\n+import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;\n+import org.apache.derbyTesting.junit.JDBC;\n+\n+/**\n+ * <p>\n+ * Test the loading of optional tools when the CompilerContext is not available\n+ * at execution time. See DERBY-6496.\n+ * </p>\n+ */\n+public class Test_6496 extends GeneratedColumnsHelper\n+{\n+    ///////////////////////////////////////////////////////////////////////////////////\n+    //\n+    // CONSTANTS\n+    //\n+    ///////////////////////////////////////////////////////////////////////////////////\n+\n+    private static  final   String      TEST_DBO = \"TEST_DBO\";\n+\n+    private static  final   String      LOAD_TOOL = \"call syscs_util.syscs_register_tool( 'databaseMetaData', true )\";\n+    private static  final   String      UNLOAD_TOOL = \"call syscs_util.syscs_register_tool( 'databaseMetaData', false )\";\n+\n+    ///////////////////////////////////////////////////////////////////////////////////\n+    //\n+    // STATE\n+    //\n+    ///////////////////////////////////////////////////////////////////////////////////\n+\n+    ///////////////////////////////////////////////////////////////////////////////////\n+    //\n+    // CONSTRUCTOR\n+    //\n+    ///////////////////////////////////////////////////////////////////////////////////\n+\n+    /**\n+     * Create a new instance.\n+     */\n+\n+    public Test_6496(String name)\n+    {\n+        super(name);\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////////////\n+    //\n+    // JUnit BEHAVIOR\n+    //\n+    ///////////////////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * Construct top level suite in this JUnit test\n+     */\n+    public static Test suite()\n+    {\n+        TestSuite suite = (TestSuite) TestConfiguration.embeddedSuite(Test_6496.class);\n+\n+        return suite;\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////////////\n+    //\n+    // TESTS\n+    //\n+    ///////////////////////////////////////////////////////////////////////////////////\n+\n+    /**\n+     * <p>\n+     * Test baseline permissions where no grants are made.\n+     * </p>\n+     */\n+    public  void    test_001()\n+        throws Exception\n+    {\n+        Connection  dboConnection = openUserConnection( TEST_DBO );\n+\n+        goodStatement( dboConnection, LOAD_TOOL );\n+        goodStatement( dboConnection, UNLOAD_TOOL );\n+    }\n+\n+    /**\n+     * <p>\n+     * Test that a user can grant access to her indexes.\n+     * </p>\n+     */\n+    public  void    test_002()\n+        throws Exception\n+    {\n+        Connection  dboConnection = openUserConnection( TEST_DBO );\n+\n+        goodStatement( dboConnection, LOAD_TOOL );\n+        goodStatement( dboConnection, UNLOAD_TOOL );\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////////////\n+    //\n+    // MINIONS\n+    //\n+    ///////////////////////////////////////////////////////////////////////////////////\n+\n+}",
                "raw_url": "https://github.com/apache/derby/raw/02fcca3729ed28a4be5900f965da3f8413b4026e/java/testing/org/apache/derbyTesting/functionTests/tests/lang/Test_6496.java",
                "sha": "c650548c3aec90d679654c68d65ed11838abc5d4",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/derby/blob/02fcca3729ed28a4be5900f965da3f8413b4026e/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java?ref=02fcca3729ed28a4be5900f965da3f8413b4026e",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java",
                "patch": "@@ -243,6 +243,7 @@ public static Test suite() {\n         suite.addTest(NewOptimizerOverridesTest.suite());\n         suite.addTest(XMLOptimizerTraceTest.suite());\n         suite.addTest(MergeStatementTest.suite());\n+        suite.addTest(Test_6496.suite());\n         suite.addTest(ConstraintCharacteristicsTest.suite());\n         suite.addTest(DB2IsolationLevelsTest.suite());\n         suite.addTest(Derby5866TriggerOrderTest.suite());",
                "raw_url": "https://github.com/apache/derby/raw/02fcca3729ed28a4be5900f965da3f8413b4026e/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java",
                "sha": "62ca445cb534a05ff14cf0547a5d382aa7262ab8",
                "status": "modified"
            }
        ],
        "message": "DERBY-6496: Fix NPE while loading optional tools; tests passed cleanly on derby-6496-01-ab-useClassFactoryContext.diff.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1574752 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/b1c9bd27989d7163ac4ad9c7286e38a170757958",
        "patched_files": [
            "_Suite.java",
            "Java5SystemProcedures.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "Test_6496.java"
        ]
    },
    "derby_0397292": {
        "bug_id": "derby_0397292",
        "commit": "https://github.com/apache/derby/commit/039729285afafbb60517281c4c6939906bc56aad",
        "file": [
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/derby/blob/039729285afafbb60517281c4c6939906bc56aad/java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java?ref=039729285afafbb60517281c4c6939906bc56aad",
                "deletions": 6,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java",
                "patch": "@@ -575,7 +575,6 @@ void forbidGenerationOverrides( ResultColumnList targetRCL, boolean forUpdate, C\n                         {\n                             newRC.setName( rc.getName() );\n                             newRC.setResultSetNumber( updateResultSet.getResultSetNumber() );\n-                            \n                             sourceRCL.setElementAt( newRC, j );\n                             \n                         }\n@@ -1582,6 +1581,7 @@ public boolean requiresDeferredProcessing()\n       *\n       * @param rcl  describes the row of expressions to be put into the bas table\n       * @param resultSetNumber  index of base table into array of ResultSets\n+      * @param isUpdate true if this is for an UPDATE statement\n       * @param ecb code generation state variable\n       * @param mb the method being generated\n       *\n@@ -1591,6 +1591,7 @@ public boolean requiresDeferredProcessing()\n \t(\n         ResultColumnList            rcl,\n         int                                 resultSetNumber,\n+        boolean                         isUpdate,\n \t\tExpressionClassBuilder\tecb,\n \t\tMethodBuilder\t\t\tmb\n     )\n@@ -1637,7 +1638,7 @@ public boolean requiresDeferredProcessing()\n \t\t}\n \t\telse\n \t\t{\n-\t\t\tMethodBuilder\tuserExprFun = generateGenerationClauses( rcl, resultSetNumber, ecb);\n+\t\t\tMethodBuilder\tuserExprFun = generateGenerationClauses( rcl, resultSetNumber, isUpdate, ecb);\n \n \t   \t\t// generation clause evaluation is used in the final result set \n \t\t\t// as an access of the new static\n@@ -1651,13 +1652,15 @@ public boolean requiresDeferredProcessing()\n       *\n       * @param rcl  describes the row of expressions to be put into the bas table\n       * @param rsNumber  index of base table into array of ResultSets\n+      * @param isUpdate true if this is for an UPDATE statement\n       * @param ecb code generation state variable\n       *\n \t  */\n \tprivate\tMethodBuilder\tgenerateGenerationClauses\n \t(\n         ResultColumnList            rcl,\n         int                                 rsNumber,\n+        boolean                         isUpdate,\n \t\tExpressionClassBuilder\tecb\n     )\n \t\tthrows StandardException\n@@ -1666,18 +1669,29 @@ public boolean requiresDeferredProcessing()\n \t\t// generates:\n \t\t// \tjava.lang.Object userExprFun( ) { }\n \t\tMethodBuilder userExprFun = ecb.newUserExprFun();\n-\t\t\n+\n \t\t/* Declare the field and load it with the current row */\n \t\tLocalField field = ecb.newFieldDeclaration(Modifier.PRIVATE, ClassName.ExecRow);\n         userExprFun.pushThis();\n         userExprFun.push( rsNumber );\n         userExprFun.callMethod(VMOpcode.INVOKEVIRTUAL, ClassName.BaseActivation, \"getCurrentRow\", ClassName.Row, 1);\n         userExprFun.putField( field );\n \n-\t\t// loop through the result columns, computing generated columns\n-        // as we go\n+\t\t// Loop through the result columns, computing generated columns\n+        // as we go. \n         int     size = rcl.size();\n-        for ( int i = 0; i < size; i++ )\n+        int     startColumn = 0;\n+        // For UPDATEs, we only compute the updated value for the\n+        // column. The updated value lives in the second half of the row.\n+        // This means we ignore the first half of the row, which holds\n+        // the before-images of the columns.\n+        if ( isUpdate )\n+        {\n+            // throw away the last cell in the row, which is the row id\n+            startColumn = size - 1;\n+            startColumn = startColumn / 2;\n+        }\n+        for ( int i = startColumn; i < size; i++ )\n         {\n             ResultColumn    rc = (ResultColumn) rcl.elementAt( i );\n ",
                "raw_url": "https://github.com/apache/derby/raw/039729285afafbb60517281c4c6939906bc56aad/java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java",
                "sha": "535311dbee509c9b4e36063fac910cdfa02606f9",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/derby/blob/039729285afafbb60517281c4c6939906bc56aad/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java?ref=039729285afafbb60517281c4c6939906bc56aad",
                "deletions": 1,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/InsertNode.java",
                "patch": "@@ -849,7 +849,7 @@ public void generate(ActivationClassBuilder acb,\n \t\t\tresultSet.generate(acb, mb);\n \n \t\t\t// arg 2 generate code to evaluate generation clauses\n-\t\t\tgenerateGenerationClauses( resultColumnList, resultSet.getResultSetNumber(), acb, mb );\n+\t\t\tgenerateGenerationClauses( resultColumnList, resultSet.getResultSetNumber(), false, acb, mb );\n \n \t\t\t// arg 3 generate code to evaluate CHECK CONSTRAINTS\n \t\t\tgenerateCheckConstraints( checkConstraints, acb, mb );",
                "raw_url": "https://github.com/apache/derby/raw/039729285afafbb60517281c4c6939906bc56aad/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java",
                "sha": "22352f53e2391ac5dda2ed1bd35d02f68f69faeb",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/derby/blob/039729285afafbb60517281c4c6939906bc56aad/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java?ref=039729285afafbb60517281c4c6939906bc56aad",
                "deletions": 1,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java",
                "patch": "@@ -844,7 +844,7 @@ public void generate(ActivationClassBuilder acb,\n         else\n         {\n \t\t\t// arg 2 generate code to evaluate generation clauses\n-\t\t\tgenerateGenerationClauses( resultColumnList, resultSet.getResultSetNumber(), acb, mb );\n+\t\t\tgenerateGenerationClauses( resultColumnList, resultSet.getResultSetNumber(), true, acb, mb );\n \n             // generate code to evaluate CHECK CONSTRAINTS\n             generateCheckConstraints( checkConstraints, acb, mb ); // arg 3",
                "raw_url": "https://github.com/apache/derby/raw/039729285afafbb60517281c4c6939906bc56aad/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java",
                "sha": "a12411c3347612d68a68fbc4c58c7d844b77a0d3",
                "status": "modified"
            },
            {
                "additions": 67,
                "blob_url": "https://github.com/apache/derby/blob/039729285afafbb60517281c4c6939906bc56aad/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java",
                "changes": 67,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java?ref=039729285afafbb60517281c4c6939906bc56aad",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java",
                "patch": "@@ -4573,10 +4573,77 @@ public  void    test_025_basicUpdatableResultSets()\n              false\n              );\n         conn.commit();\n+        conn.setAutoCommit( true );\n \n         stmt.close();\n     }\n \n+    /**\n+     * <p>\n+     * Test that we correctly handle foreign keys with ON DELETE SET NULL\n+     * clauses. DERBY-3964.\n+     * </p>\n+     */\n+    public  void    test_026_onDeleteSetNull()\n+        throws Exception\n+    {\n+        Connection  conn = getConnection();\n+\n+        //\n+        // Setup\n+        //\n+        goodStatement\n+            (\n+             conn,\n+             \"create table t_dhw_1( a int primary key )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"create table t_dhw_2( a int references t_dhw_1( a ) on delete set null check ( a is null or a > 0 ), b int generated always as ( -a ) check ( b is null or b < 0 ) )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_dhw_1( a ) values ( 1 ), ( 2 )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_dhw_2( a ) values( 1 )\"\n+             );\n+\n+        //\n+        // Verify that when you delete from the primary table, the foreign key\n+        // table is updated and the update percolates through to the generated column.\n+        //\n+        goodStatement\n+            (\n+             conn,\n+             \"delete from t_dhw_1 where a = 1\"\n+             );\n+        assertResults\n+            (\n+             conn,\n+             \"select * from t_dhw_1 order by a\",\n+             new String[][]\n+             {\n+                 { \"2\", },\n+             },\n+             false\n+             );\n+        assertResults\n+            (\n+             conn,\n+             \"select * from t_dhw_2 order by a\",\n+             new String[][]\n+             {\n+                 { null, null, },\n+             },\n+             false\n+             );\n+    }\n+    \n     ///////////////////////////////////////////////////////////////////////////////////\n     //\n     // MINIONS",
                "raw_url": "https://github.com/apache/derby/raw/039729285afafbb60517281c4c6939906bc56aad/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java",
                "sha": "449820424d372312e83ee09278cfb7c669a550f1",
                "status": "modified"
            }
        ],
        "message": "DERBY-3964: Fix NPE in evaluation of generated columns while processing an ON DELETE SET NULL referential action.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@722623 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/f07a7c38040833b85853904932c721870dcf6a9d",
        "patched_files": [
            "DMLModStatementNode.java",
            "InsertNode.java",
            "UpdateNode.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "GeneratedColumnsTest.java"
        ]
    },
    "derby_05b022f": {
        "bug_id": "derby_05b022f",
        "commit": "https://github.com/apache/derby/commit/05b022f3e5e341b4f695d93f74e74962ea89dee0",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/derby/blob/05b022f3e5e341b4f695d93f74e74962ea89dee0/java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java?ref=05b022f3e5e341b4f695d93f74e74962ea89dee0",
                "deletions": 1,
                "filename": "java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java",
                "patch": "@@ -353,7 +353,7 @@ public void setTopResultSet(ResultSet topResultSet,\n \t\t\t\t}\n \t\t\t\tfor (int index = 0; index < subqueryTrackingArray.length; index++)\n \t\t\t\t{\n-\t\t\t\t\tif (this.subqueryTrackingArray[index] != null)\n+                    if (this.materializedSubqueries[index] != null)\n \t\t\t\t\t{\n \t\t\t\t\t\tsubqueryTrackingArray[index] = this.materializedSubqueries[index];\n \t\t\t\t\t}",
                "raw_url": "https://github.com/apache/derby/raw/05b022f3e5e341b4f695d93f74e74962ea89dee0/java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java",
                "sha": "c43bb85ae705e48f3c5b7fbe5824fa031e6b6591",
                "status": "modified"
            },
            {
                "additions": 51,
                "blob_url": "https://github.com/apache/derby/blob/05b022f3e5e341b4f695d93f74e74962ea89dee0/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java",
                "changes": 55,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java?ref=05b022f3e5e341b4f695d93f74e74962ea89dee0",
                "deletions": 4,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java",
                "patch": "@@ -58,6 +58,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n     private static final String NO_TABLE_PERMISSION = \"42500\";\n     private static final String USER_EXCEPTION = \"38000\";\n     private static final String JAVA_EXCEPTION = \"XJ001\";\n+    private static final String NOT_SINGLE_COLUMN = \"42X39\";\n+    private static final String NON_SCALAR_QUERY = \"21000\";\n \n     public TriggerWhenClauseTest(String name) {\n         super(name);\n@@ -209,17 +211,17 @@ public void testBasicSyntax() throws SQLException {\n     }\n \n     /**\n-     * A row trigger whose WHEN clause contains a subquery, could cause a\n-     * NullPointerException. This test case is disabled until the bug is fixed.\n+     * A row trigger whose WHEN clause contains a subquery, used to cause a\n+     * NullPointerException in some situations.\n      */\n-    public void xtestSubqueryInWhenClauseNPE() throws SQLException {\n+    public void testSubqueryInWhenClauseNPE() throws SQLException {\n         Statement s = createStatement();\n         s.execute(\"create table t1(x int)\");\n         s.execute(\"create table t2(x int)\");\n         s.execute(\"create trigger tr1 after insert on t1 for each row \"\n                 + \"when ((values true)) insert into t2 values 1\");\n \n-        // This statement results in a NullPointerException.\n+        // This statement used to result in a NullPointerException.\n         s.execute(\"insert into t1 values 1,2,3\");\n     }\n \n@@ -359,6 +361,15 @@ public void testIllegalWhenClauses() throws SQLException {\n                 \"create trigger tr after delete on t1 \"\n                 + \"when ((select true from sysibm.sysdummy where ibmreqd = ?)) \"\n                 + \"call int_proc(1)\");\n+\n+        // Subqueries in the WHEN clause must have a single column\n+        assertCompileError(NOT_SINGLE_COLUMN,\n+                \"create trigger tr no cascade before insert on t1 \"\n+                + \"when ((values (true, false))) call int_proc(1)\");\n+        assertCompileError(NOT_SINGLE_COLUMN,\n+                \"create trigger tr after update of x on t1 \"\n+                + \"when ((select tablename, schemaid from sys.systables)) \"\n+                + \"call int_proc(1)\");\n     }\n \n     /**\n@@ -743,4 +754,40 @@ public void testRuntimeException() throws SQLException {\n         JDBC.assertFullResultSet(s.executeQuery(\"select * from t2 order by x\"),\n                                  new String[][] {{\"1\"}, {\"2\"}, {\"3\"}});\n     }\n+\n+    /**\n+     * Test that scalar subqueries are allowed, and that non-scalar subqueries\n+     * result in exceptions when the trigger fires.\n+     */\n+    public void testScalarSubquery() throws SQLException {\n+        Statement s = createStatement();\n+        s.execute(\"create table t1(x int)\");\n+        s.execute(\"create table t2(x int)\");\n+        s.execute(\"create table t3(x int)\");\n+\n+        s.execute(\"insert into t3 values 0,1,2,2\");\n+\n+        s.execute(\"create trigger tr1 after insert on t1 \"\n+                + \"referencing new as new for each row \"\n+                + \"when ((select x > 0 from t3 where x = new.x)) \"\n+                + \"insert into t2 values 1\");\n+\n+        // Subquery returns no rows, so the trigger should not fire.\n+        s.execute(\"insert into t1 values 42\");\n+        assertTableRowCount(\"T2\", 0);\n+\n+        // Subquery returns a single value, which is false, so the trigger\n+        // should not fire.\n+        s.execute(\"insert into t1 values 0\");\n+        assertTableRowCount(\"T2\", 0);\n+\n+        // Subquery returns a single value, which is true, so the trigger\n+        // should fire.\n+        s.execute(\"insert into t1 values 1\");\n+        assertTableRowCount(\"T2\", 1);\n+\n+        // Subquery returns multiple values, so an error should be raised.\n+        assertStatementError(NON_SCALAR_QUERY, s, \"insert into t1 values 2\");\n+        assertTableRowCount(\"T2\", 1);\n+    }\n }",
                "raw_url": "https://github.com/apache/derby/raw/05b022f3e5e341b4f695d93f74e74962ea89dee0/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java",
                "sha": "d01a2c9be9451b0ed684d4570313ebba2e0c09c1",
                "status": "modified"
            }
        ],
        "message": "DERBY-534: Support use of the WHEN clause in CREATE TRIGGER statements\n\nFix incorrect null check when merging subqueryTrackingArray and\nmaterializedSubqueries in GenericStatementContext.setTopResultSet().\nUsed to cause NullPointerException in some cases when a WHEN clause\ncontained a subquery.\n\nAdd more tests for scalar subqueries in WHEN clauses.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1532666 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/800a411c4c61975e97260a40665690d8dd3dc57a",
        "patched_files": [
            "GenericStatementContext.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "TriggerWhenClauseTest.java"
        ]
    },
    "derby_063dd55": {
        "bug_id": "derby_063dd55",
        "commit": "https://github.com/apache/derby/commit/063dd554d30bb6ef19425e10b91b86cf973cbd0d",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/derby/blob/063dd554d30bb6ef19425e10b91b86cf973cbd0d/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java?ref=063dd554d30bb6ef19425e10b91b86cf973cbd0d",
                "deletions": 2,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/InsertNode.java",
                "patch": "@@ -867,8 +867,13 @@ public void optimizeStatement() throws StandardException\n         //\n         HasTableFunctionVisitor tableFunctionVisitor = new HasTableFunctionVisitor();\n         this.accept( tableFunctionVisitor );\n-        if ( tableFunctionVisitor.hasNode() ) { requestBulkInsert(); }\n-\t}\n+        // DERBY-5614: See if the target is a global temporary table (GTT),\n+        // in which case we don't support bulk insert.\n+        if ( tableFunctionVisitor.hasNode() &&\n+                !isSessionSchema(targetTableDescriptor.getSchemaDescriptor())) {\n+            requestBulkInsert();\n+        }\n+    }\n \n     /**\n      * Request bulk insert optimization at run time.",
                "raw_url": "https://github.com/apache/derby/raw/063dd554d30bb6ef19425e10b91b86cf973cbd0d/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java",
                "sha": "478989190fd478a365592f416c691512a3f23090",
                "status": "modified"
            },
            {
                "additions": 56,
                "blob_url": "https://github.com/apache/derby/blob/063dd554d30bb6ef19425e10b91b86cf973cbd0d/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java",
                "changes": 76,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java?ref=063dd554d30bb6ef19425e10b91b86cf973cbd0d",
                "deletions": 20,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java",
                "patch": "@@ -30,6 +30,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import java.sql.Connection;\n \n import junit.framework.Test;\n+import org.apache.derbyTesting.functionTests.util.SampleVTI;\n \n \n import org.apache.derbyTesting.junit.BaseJDBCTestCase;\n@@ -1163,6 +1164,50 @@ public void testDMLRollback2() throws SQLException {\n         assertEquals(1, rs1.getInt(2));\n         assertUpdateCount(s , 0 , \"DROP TABLE SESSION.t2\");\n     }\n+\n+    /**\n+     * Tests that you can insert data into a GTT with a VTI as the source.\n+     * <p>\n+     * This used to fail because inserting from a VTI would trigger bulk insert,\n+     * but the bulk insert code path is not supported for GTT as the\n+     * destination of the insert.\n+     * <p>\n+     * See DERBY-5614.\n+     */\n+    public void testVtiInsertIntoGTT()\n+            throws SQLException {\n+        Statement s = createStatement();\n+        s.executeUpdate(\"DECLARE GLOBAL TEMPORARY TABLE SESSION.vtitogtt(\" +\n+                \"c1 varchar(10)) not logged on commit preserve rows\");\n+        // Use an empty VTI as the source.\n+        s.executeUpdate(\"CREATE FUNCTION emptySampleVTI() \" +\n+                \"RETURNS TABLE(v1 varchar(10))\" +\n+                \"LANGUAGE JAVA \" +\n+                \"PARAMETER STYLE DERBY_JDBC_RESULT_SET \" +\n+                \"NO SQL \" +\n+                \"EXTERNAL NAME 'org.apache.derbyTesting.functionTests.\" +\n+                \"util.SampleVTI.emptySampleVTI'\");\n+        s.executeUpdate(\"insert into session.vtitogtt \" +\n+                \"select * from table(emptySampleVTI()) as v\");\n+        JDBC.assertEmpty(s.executeQuery(\"select * from session.vtitogtt\"));\n+        s.executeUpdate(\"DROP FUNCTION emptySampleVTI\");\n+\n+        // Now try to actually insert some data.\n+        s.executeUpdate(\"CREATE FUNCTION sampleVTI() \" +\n+                \"RETURNS TABLE(v1 varchar(10))\" +\n+                \"LANGUAGE JAVA \" +\n+                \"PARAMETER STYLE DERBY_JDBC_RESULT_SET \" +\n+                \"NO SQL \" +\n+                \"EXTERNAL NAME 'org.apache.derbyTesting.functionTests.\" +\n+                \"util.SampleVTI.oneColSampleVTI'\");\n+        s.executeUpdate(\"insert into session.vtitogtt \" +\n+                \"select * from table(sampleVTI()) as v\");\n+        JDBC.assertUnorderedResultSet(\n+                s.executeQuery(\"select * from session.vtitogtt\"),\n+                SampleVTI.oneColSampleVTIData());\n+        s.executeUpdate(\"DROP FUNCTION sampleVTI\");\n+    }\n+\n     /**\n      * \n      * A Utility method that deletes all the SESSION schema tables before each fixture.\n@@ -1171,26 +1216,17 @@ public void testDMLRollback2() throws SQLException {\n      */\n     public void dropSchemaTables() throws SQLException {\n         Statement s = createStatement();\n-        try {\n-            s.executeUpdate(\"DROP TABLE SESSION.t1\");\n-        } catch (SQLException e) {\n-        }\n-        try {\n-            s.executeUpdate(\"DROP TABLE SESSION.t2\");\n-        } catch (SQLException e) {\n-        }\n-        try {\n-            s.executeUpdate(\"DROP TABLE SESSION.t3\");\n-        } catch (SQLException e) {\n-        }\n-        try {\n-            s.executeUpdate(\"DROP TABLE SESSION.t4\");\n-        } catch (SQLException e) {\n-        }\n-        try {\n-            s.executeUpdate(\"DROP TABLE SESSION.t5\");\n-        } catch (SQLException e) {\n+        // Query the meta data to avoid filling the log with lots of\n+        // table-not-found error messages.\n+        ResultSet rs = getConnection().getMetaData().getTables(\n+                null, \"SESSION\", \"%\", null);\n+        while (rs.next()) {\n+            try {\n+                s.executeUpdate(\"DROP TABLE \" + rs.getString(2) + \".\" +\n+                        rs.getString(3));\n+            } catch (SQLException e) {\n+            }\n         }\n+        rs.close();\n     }\n }\n-",
                "raw_url": "https://github.com/apache/derby/raw/063dd554d30bb6ef19425e10b91b86cf973cbd0d/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java",
                "sha": "f98799eb20bf75728611bb1df7d600340c57b819",
                "status": "modified"
            },
            {
                "additions": 285,
                "blob_url": "https://github.com/apache/derby/blob/063dd554d30bb6ef19425e10b91b86cf973cbd0d/java/testing/org/apache/derbyTesting/functionTests/util/SampleVTI.java",
                "changes": 285,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/util/SampleVTI.java?ref=063dd554d30bb6ef19425e10b91b86cf973cbd0d",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/util/SampleVTI.java",
                "patch": "@@ -0,0 +1,285 @@\n+/*\n+\n+   Derby - Class org.apache.derbyTesting.functionTests.util.SampleVTI\n+\n+   Licensed to the Apache Software Foundation (ASF) under one or more\n+   contributor license agreements.  See the NOTICE file distributed with\n+   this work for additional information regarding copyright ownership.\n+   The ASF licenses this file to You under the Apache License, Version 2.0\n+   (the \"License\"); you may not use this file except in compliance with\n+   the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+\n+ */\n+package org.apache.derbyTesting.functionTests.util;\n+\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+\n+import org.apache.derby.vti.VTITemplate;\n+\n+/**\n+ * A very simple, read-only, sample VTI.\n+ * <p>\n+ * This VTI is incomplete and has its quirks - it is intended for basic testing\n+ * only! Supported getters:\n+ * <ul> <li>getString</li>\n+ *      <li>getInt</li>\n+ * </ul>\n+ */\n+public class SampleVTI\n+    extends VTITemplate {\n+\n+    private static final String[][] oneColData = new String[][] {\n+            {\"one\"}, {\"two\"}, {\"three\"}, {\"four\"}, {\"five\"}\n+        };\n+\n+    /** Returns a sample VTI that is empty (has zero rows). */\n+    public static ResultSet emptySampleVTI() {\n+        return new SampleVTI(new String[0][0]);\n+    }\n+\n+    /**\n+     * Returns a sample VTI with the some test data.\n+     *\n+     *@return A result set with a single column with string data (five rows).\n+     */\n+    public static ResultSet oneColSampleVTI() {\n+        return new SampleVTI(oneColData);\n+    }\n+\n+    public static String[][] oneColSampleVTIData() {\n+        return (String[][])oneColData.clone();\n+    }\n+\n+    private final String[][] data;\n+    private final int rows;\n+    private final int cols;\n+    private int index = -1;\n+    private boolean wasNull;\n+    private boolean closed;\n+\n+    private SampleVTI(String[][] data) {\n+        this.data = data;\n+        this.rows = data.length;\n+        this.cols = rows == 0 ? 0 : data[0].length;\n+    }\n+\n+    private String getColumn(int columnIndex)\n+            throws SQLException {\n+        if (closed) {\n+            throw new SQLException(\"result set closed\");\n+        }\n+        if (columnIndex < 1 || columnIndex > cols) {\n+            throw new SQLException(\"column value out of range\");\n+        }\n+        String val = data[index][columnIndex -1];\n+        wasNull = val == null;\n+        return val;\n+    }\n+\n+    //@Override\n+    public ResultSetMetaData getMetaData() throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    //@Override\n+    public boolean next() throws SQLException {\n+        if (closed) {\n+            throw new SQLException(\"result set closed\");\n+        }\n+        return ++index < rows;\n+    }\n+\n+    //@Override\n+    public void close() throws SQLException {\n+        this.closed = true;\n+    }\n+\n+    //@Override\n+    public String getString(int columnIndex)\n+            throws SQLException {\n+        return getColumn(columnIndex);\n+    }\n+\n+    //@Override\n+    public int getInt(int columnIndex)\n+            throws SQLException {\n+        String raw = getColumn(columnIndex);\n+        if (wasNull) {\n+            raw = \"0\";\n+        }\n+        try {\n+            return Integer.parseInt(raw);\n+        } catch (NumberFormatException nfe) {\n+            throw new SQLException(\"cannot get value as int\");\n+        }\n+    }\n+\n+    //@Override\n+    public boolean wasNull() {\n+        return wasNull;\n+    }\n+\n+    public int getHoldability() throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public boolean isClosed() throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateNString(int columnIndex, String nString) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateNString(String columnLabel, String nString) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public String getNString(int columnIndex) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public String getNString(String columnLabel) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public Reader getNCharacterStream(int columnIndex) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public Reader getNCharacterStream(String columnLabel) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateNCharacterStream(int columnIndex, Reader x, long length) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateNCharacterStream(String columnLabel, Reader reader, long length) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateAsciiStream(int columnIndex, InputStream x, long length) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateBinaryStream(int columnIndex, InputStream x, long length) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateCharacterStream(int columnIndex, Reader x, long length) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateAsciiStream(String columnLabel, InputStream x, long length) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateBinaryStream(String columnLabel, InputStream x, long length) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateCharacterStream(String columnLabel, Reader reader, long length) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateBlob(int columnIndex, InputStream inputStream, long length) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateBlob(String columnLabel, InputStream inputStream, long length) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateClob(int columnIndex, Reader reader, long length) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateClob(String columnLabel, Reader reader, long length) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateNClob(int columnIndex, Reader reader, long length) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateNClob(String columnLabel, Reader reader, long length) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateNCharacterStream(int columnIndex, Reader x) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateNCharacterStream(String columnLabel, Reader reader) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateAsciiStream(int columnIndex, InputStream x) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateBinaryStream(int columnIndex, InputStream x) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateCharacterStream(int columnIndex, Reader x) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateAsciiStream(String columnLabel, InputStream x) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateBinaryStream(String columnLabel, InputStream x) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateCharacterStream(String columnLabel, Reader reader) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateBlob(int columnIndex, InputStream inputStream) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateBlob(String columnLabel, InputStream inputStream) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateClob(int columnIndex, Reader reader) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateClob(String columnLabel, Reader reader) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateNClob(int columnIndex, Reader reader) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateNClob(String columnLabel, Reader reader) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public Object getObject(int columnIndex, Class type) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public Object getObject(String columnLabel, Class type) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+}",
                "raw_url": "https://github.com/apache/derby/raw/063dd554d30bb6ef19425e10b91b86cf973cbd0d/java/testing/org/apache/derbyTesting/functionTests/util/SampleVTI.java",
                "sha": "67db779ea515f21cb4f9ec3b25625cbc745536cc",
                "status": "added"
            }
        ],
        "message": "DERBY-5614: NullPointerException with INSERT INTO [global temporary table] SELECT ... FROM [VTI]\n\nDisables bulk-insert for GTTs when selecting from a VTI.\nAdded a new test case.\nAdded SampleVTI, which is an incomplete (only supports a few getters) VTI\nintended for basic testing.\n\nPatch file: derby-5614-1b-disable_bulkinsert_gtt.diff\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1295085 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/61b02b72e27b874561a17bc74ff14870f170b216",
        "patched_files": [
            "SampleVTI.java",
            "InsertNode.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "DeclareGlobalTempTableJavaTest.java"
        ]
    },
    "derby_0915039": {
        "bug_id": "derby_0915039",
        "commit": "https://github.com/apache/derby/commit/09150393e2b9d87cb24d953a5d023cd9001fed71",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/derby/blob/09150393e2b9d87cb24d953a5d023cd9001fed71/java/drda/org/apache/derby/drda/NetworkServerControl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/drda/NetworkServerControl.java?ref=09150393e2b9d87cb24d953a5d023cd9001fed71",
                "deletions": 1,
                "filename": "java/drda/org/apache/derby/drda/NetworkServerControl.java",
                "patch": "@@ -86,7 +86,8 @@\n \tThis changes where new trace files will be placed. \n \tFor sessions with tracing already turned on,  \n \ttrace files remain in the previous location. \n-\tDefault is clousdcape.system.home</LI>\n+\tDefault is derby.system.home, if it is set. \n+\tOtherwise the default is the current directory.</LI>\n \n \t</UL>\n \t<P>Properties can be set in the derby.properties file or on the command line.",
                "raw_url": "https://github.com/apache/derby/raw/09150393e2b9d87cb24d953a5d023cd9001fed71/java/drda/org/apache/derby/drda/NetworkServerControl.java",
                "sha": "8522fb548da50a465eefb388f69c805bae33cc6e",
                "status": "modified"
            },
            {
                "additions": 41,
                "blob_url": "https://github.com/apache/derby/blob/09150393e2b9d87cb24d953a5d023cd9001fed71/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java",
                "changes": 52,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java?ref=09150393e2b9d87cb24d953a5d023cd9001fed71",
                "deletions": 11,
                "filename": "java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java",
                "patch": "@@ -285,8 +285,8 @@\n \t// constructor\n \tpublic NetworkServerControlImpl() throws Exception\n \t{\n-\t\tgetPropertyInfo();\n \t\tinit();\n+\t\tgetPropertyInfo();\n     }\n \n \n@@ -299,12 +299,12 @@ public NetworkServerControlImpl() throws Exception\n \t */\n \tpublic NetworkServerControlImpl(InetAddress address, int portNumber) throws Exception\n \t{\n+\t\tinit();\n \t\tgetPropertyInfo();\n \t\tthis.hostAddress = address;\n \t\tthis.portNumber = (portNumber <= 0) ?\n \t\t\tthis.portNumber: portNumber;\n \t\tthis.hostArg = address.getHostAddress();\n-\t\tinit();\n \t}\n \n     private void init() throws Exception\n@@ -2448,29 +2448,51 @@ private void  getPropertyInfo() throws Exception\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \"true\"))  \n \t\t\tsetTraceAll(true);\n \n-\t\tsetTraceDirectory(PropertyUtil.getSystemProperty( \n-\t\t\tProperty.DRDA_PROP_TRACEDIRECTORY));\n+\t\t//If the derby.system.home property has been set, it is the default. \n+\t\t//Otherwise, the default is the current directory. \n+\t\t//If derby.system.home is not set, directory will be null and trace files will get\n+\t\t//created in current directory.\n+\t\tpropval = PropertyUtil.getSystemProperty(Property.DRDA_PROP_TRACEDIRECTORY,directory);\n+\t\tif(propval != null){\n+\t\t\tif(propval.equals(\"\"))\n+\t\t\t\tpropval = directory;\n+\t\t\tsetTraceDirectory(propval);\n+\t\t}\n \n+\t\t//DERBY-375 If a system property is specified without any value, getProperty returns \n+\t\t//an empty string. Use default values in such cases.\n \t\tpropval = PropertyUtil.getSystemProperty( \n \t\t\tProperty.DRDA_PROP_MINTHREADS);\n-\t\tif (propval != null)\n+\t\tif (propval != null){\n+\t\t\tif(propval.equals(\"\"))\n+\t\t\t\tpropval = \"0\";\n \t\t\tsetMinThreads(getIntPropVal(Property.DRDA_PROP_MINTHREADS, propval));\n+\t\t}\n \n \t\tpropval = PropertyUtil.getSystemProperty( \n \t\t\tProperty.DRDA_PROP_MAXTHREADS);\n-\t\tif (propval != null)\n+\t\tif (propval != null){\n+\t\t\tif(propval.equals(\"\"))\n+\t\t\t\tpropval = \"0\";\n \t\t\tsetMaxThreads(getIntPropVal(Property.DRDA_PROP_MAXTHREADS, propval));\n+\t\t}\n \n \n \t\tpropval = PropertyUtil.getSystemProperty( \n \t\t\tProperty.DRDA_PROP_TIMESLICE);\n-\t\tif (propval != null)\n+\t\tif (propval != null){\n+\t\t\tif(propval.equals(\"\"))\n+\t\t\t\tpropval = \"0\";\n \t\t\tsetTimeSlice(getIntPropVal(Property.DRDA_PROP_TIMESLICE, propval));\n+\t\t}\n \n \t\tpropval = PropertyUtil.getSystemProperty( \n \t\t\tProperty.DRDA_PROP_PORTNUMBER);\n-\t\tif (propval != null)\n+\t\tif (propval != null){\n+\t\t\tif(propval.equals(\"\"))\n+\t\t\t\tpropval = String.valueOf(NetworkServerControl.DEFAULT_PORTNUMBER);\n \t\t\tportNumber = getIntPropVal(Property.DRDA_PROP_PORTNUMBER, propval);\n+\t\t}\n \n \t\tpropval = PropertyUtil.getSystemProperty( \n \t\t\tProperty.DRDA_PROP_KEEPALIVE);\n@@ -2480,9 +2502,12 @@ private void  getPropertyInfo() throws Exception\n \t\t\n \t\tpropval = PropertyUtil.getSystemProperty( \n \t\t\tProperty.DRDA_PROP_HOSTNAME);\n-\t\tif (propval != null)\n-\t\t\thostArg = propval;\n-\n+\t\tif (propval != null){\n+\t\t\tif(propval.equals(\"\"))\n+\t\t\t\thostArg = DEFAULT_HOST; \n+\t\t\telse\n+\t\t\t\thostArg = propval;\n+\t\t}\t\n \t\tpropval = PropertyUtil.getSystemProperty(\n \t\t\t\t\t\t NetworkServerControlImpl.DRDA_PROP_DEBUG);\n \t\tif (propval != null  && StringUtil.SQLEqualsIgnoreCase(propval, \"true\"))\n@@ -3214,6 +3239,11 @@ private Properties getPropertyValues()\n \t\tretval.put(Property.DRDA_PROP_TIMESLICE, new  Integer(getTimeSlice()).toString());\n \t\tretval.put(Property.DRDA_PROP_LOGCONNECTIONS, new Boolean(getLogConnections()).toString());\n \t\tString startDRDA = PropertyUtil.getSystemProperty(Property.START_DRDA);\n+\t\t//DERBY-375 If a system property is specified without any value, getProperty returns \n+\t\t//an empty string. Use default values in such cases.\n+\t\tif(startDRDA!=null && startDRDA.equals(\"\"))\n+\t\t\tstartDRDA = \"false\";\n+\t\t\n \t\tretval.put(Property.START_DRDA, (startDRDA == null)? \"false\" : startDRDA);\n \n \t\t//get the trace value for each session if tracing for all is not set",
                "raw_url": "https://github.com/apache/derby/raw/09150393e2b9d87cb24d953a5d023cd9001fed71/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java",
                "sha": "3b0fb30867ca8cf26a11ffdade06a9e1d93da4ea",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/derby/blob/09150393e2b9d87cb24d953a5d023cd9001fed71/java/testing/org/apache/derbyTesting/functionTests/master/testProperties.out",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/testProperties.out?ref=09150393e2b9d87cb24d953a5d023cd9001fed71",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/testProperties.out",
                "patch": "@@ -14,4 +14,22 @@ org.apache.derby.drda.NetworkServerControl start -p 1530\n Successfully Connected\n org.apache.derby.drda.NetworkServerControl shutdown -p 1530 \n Shutdown successful.\n+Testing start server by specifying system properties without values\n+First shutdown server started on default port by the test harness\n+org.apache.derby.drda.NetworkServerControl shutdown -p 1527 \n+Shutdown successful.\n+-Dderby.drda.logConnections -Dderby.drda.traceAll -Dderby.drda.traceDirectory -Dderby.drda.keepAlive -Dderby.drda.timeSlice -Dderby.drda.host -Dderby.drda.portNumber -Dderby.drda.minThreads -Dderby.drda.maxThreads -Dderby.drda.startNetworkServer -Dderby.drda.debug org.apache.derby.drda.NetworkServerControl start \n+-- listing properties --\n+derby.drda.maxThreads=0\n+derby.drda.keepAlive=true\n+derby.drda.minThreads=0\n+derby.drda.portNumber=1527\n+derby.drda.logConnections=false\n+derby.drda.timeSlice=0\n+derby.drda.startNetworkServer=false\n+derby.drda.host=localhost\n+derby.drda.traceAll=false\n+Successfully Connected\n+org.apache.derby.drda.NetworkServerControl shutdown -p 1527 \n+Shutdown successful.\n End test",
                "raw_url": "https://github.com/apache/derby/raw/09150393e2b9d87cb24d953a5d023cd9001fed71/java/testing/org/apache/derbyTesting/functionTests/master/testProperties.out",
                "sha": "17ebabd8a2b1c9b6c6cf7e21baacc2cf4f567ca0",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/derby/blob/09150393e2b9d87cb24d953a5d023cd9001fed71/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/copyfiles.ant",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/copyfiles.ant?ref=09150393e2b9d87cb24d953a5d023cd9001fed71",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/copyfiles.ant",
                "patch": "@@ -7,6 +7,7 @@ dataSourcePermissions_net_app.properties\n dataSourcePermissions_net_sed.properties\n default_app.properties\n default_derby.properties\n+getCurrentProperties_sed.properties\n runtimeinfo_sed.properties\n sysinfo_sed.properties\n testij.sql",
                "raw_url": "https://github.com/apache/derby/raw/09150393e2b9d87cb24d953a5d023cd9001fed71/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/copyfiles.ant",
                "sha": "846d4bfda38ff55c6b9142c492faa0d4eebbdcf7",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/derby/blob/09150393e2b9d87cb24d953a5d023cd9001fed71/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/getCurrentProperties_sed.properties",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/getCurrentProperties_sed.properties?ref=09150393e2b9d87cb24d953a5d023cd9001fed71",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/getCurrentProperties_sed.properties",
                "patch": "@@ -0,0 +1,9 @@\n+# Filters and substitutes for SED\n+# Multiple patterns for DELETE: comma separated\n+#   delete=pattern1,pattern2,...,patternn\n+# No commas can be allowed in the patterns.\n+#\n+# Multiple patterns for SUBSTITUTE: comma separated <pattern;substitute> pair\n+#   substitute=pattern1;substitute1,pattern2;substitute2,...,patternn;substituten\n+# No commas or semicolons can be allowed in the patterns/subsitutes.\n+delete=traceDirectory\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/derby/raw/09150393e2b9d87cb24d953a5d023cd9001fed71/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/getCurrentProperties_sed.properties",
                "sha": "1ef3257a7e83a764e07032c7b7bbecda36ac1412",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/derby/blob/09150393e2b9d87cb24d953a5d023cd9001fed71/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/sysinfo_sed.properties",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/sysinfo_sed.properties?ref=09150393e2b9d87cb24d953a5d023cd9001fed71",
                "deletions": 1,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/sysinfo_sed.properties",
                "patch": "@@ -1 +1 @@\n-delete=Version,version,Java,OS,[0-9*].[0-9*].[0-9*],JRE - JDBC\n+delete=Version,version,Java,OS,[0-9*].[0-9*].[0-9*],JRE - JDBC,traceDirectory",
                "raw_url": "https://github.com/apache/derby/raw/09150393e2b9d87cb24d953a5d023cd9001fed71/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/sysinfo_sed.properties",
                "sha": "9bb5dc5051b781ef7fe07fb315ad45171ef8236b",
                "status": "modified"
            },
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/derby/blob/09150393e2b9d87cb24d953a5d023cd9001fed71/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProperties.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProperties.java?ref=09150393e2b9d87cb24d953a5d023cd9001fed71",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProperties.java",
                "patch": "@@ -42,6 +42,9 @@\n \t   default\n \n \t   The command line should take precedence\n+\n+\tIt also tests start server by specifying system properties without values.\n+\tIn this case the server will use default values.\n */\n \n public class testProperties\n@@ -52,6 +55,21 @@\n \tprivate static Vector vCmd;\n     private static  BufferedOutputStream bos = null;\n \n+    //Command to start server specifying system properties without values\n+    private static String[] startServerCmd =\n+\t\t\t\t\tnew String[] {  \"-Dderby.drda.logConnections\",\n+    \t\t\t\t\t\t\t\t\"-Dderby.drda.traceAll\",\n+\t\t\t\t\t\t\t\t\t\"-Dderby.drda.traceDirectory\",\n+\t\t\t\t\t\t\t\t\t\"-Dderby.drda.keepAlive\",\n+\t\t\t\t\t\t\t\t\t\"-Dderby.drda.timeSlice\",\n+\t\t\t\t\t\t\t\t\t\"-Dderby.drda.host\",\n+\t\t\t\t\t\t\t\t\t\"-Dderby.drda.portNumber\",\n+\t\t\t\t\t\t\t\t\t\"-Dderby.drda.minThreads\",\n+\t\t\t\t\t\t\t\t\t\"-Dderby.drda.maxThreads\",\n+\t\t\t\t\t\t\t\t\t\"-Dderby.drda.startNetworkServer\",\n+\t\t\t\t\t\t\t\t\t\"-Dderby.drda.debug\",\n+\t\t\t\t\t\t\t\t\t\"org.apache.derby.drda.NetworkServerControl\",\n+\t\t\t\t\t\t\t\t\t\"start\"};\n \n \t/**\n \t * Execute the given command and dump the results to standard out\n@@ -160,6 +178,14 @@ private static void waitForStart(String portString, int timeToWait) throws Excep\n         }\n \t}\n \n+\tprivate static void listProperties(String portString) throws Exception{\n+\t\tint port = Integer.parseInt(portString);\n+\t\tNetworkServerControl derbyServer = new NetworkServerControl( InetAddress.getByName(\"localhost\"),\n+\t\t\t\t\t\t\t\t\t\t\t\t\tport);\n+\t\tProperties p = derbyServer.getCurrentProperties();\n+\t\tp.list(System.out);\n+\t}\n+\n \tpublic static void main (String args[]) throws Exception\n \t{\n \t\tif ((System.getProperty(\"java.vm.name\") != null) && System.getProperty(\"java.vm.name\").equals(\"J9\"))\n@@ -204,6 +230,22 @@ public static void main (String args[]) throws Exception\n \t\t\tSystem.out.println(\"Successfully Connected\");\n \t\t\t//shutdown - with command line option\n \t\t\tderbyServerCmd(\"shutdown\",\"1530\");\n+\n+\t\t\t/**********************************************************************\n+\t\t\t *  Test start server specifying system properties without values\n+\t\t\t *********************************************************************/\n+\t\t\tSystem.out.println(\"Testing start server by specifying system properties without values\");\n+\t\t\tSystem.out.println(\"First shutdown server started on default port by the test harness\");\n+\n+\t\t\t//Shutdown the server started by test\n+\t\t\tderbyServerCmd(\"shutdown\",\"1527\");\n+\t\t\texecCmd(startServerCmd);\n+\t\t\twaitForStart(\"1527\",15000);\n+\t\t\t//check that default properties are used\n+\t\t\tlistProperties(\"1527\");\n+\t\t\tSystem.out.println(\"Successfully Connected\");\n+\t\t\tderbyServerCmd(\"shutdown\",\"1527\");\n+\n \t\t\tSystem.out.println(\"End test\");\n \t\t\tbos.close();\n \t\t}",
                "raw_url": "https://github.com/apache/derby/raw/09150393e2b9d87cb24d953a5d023cd9001fed71/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProperties.java",
                "sha": "1fcd1fd074218ad7088d2d22f0d2fa5e0f376b28",
                "status": "modified"
            }
        ],
        "message": "DERBY-375\n\nSpecification of incomplete server properties on command line causes NPE with NetworkServerControl when starting the server.\n\nThe patch does the following:\n1. Moves the call to 'init', which initializes 'langUtil', before the call to 'getPropertyInfo' method in the constructors of NetworkServerControlImpl.\n2. If the system properties are specified without values, use defaults for them.\n3. For 'derby.drda.traceDirectory' property following is mentioned in the doc - \"If the derby.system.home property has been set, it is the default. Otherwise, the default is the current directory.\". 'getPropertyInfo' was getting the value of 'derby.system.home' but not using it as default for 'derby.drda.traceDirectory'.\nSo the current directory was always getting used as default. Changed this.\n4. When I added the default for 'derby.drda.traceDirectory', the tests derbynet/getCurrentProperties.java and derbynet/sysinfo.java had additional lines for derby.drda.traceDirectory in their outputs. Since the directory listed is dependent on the test directory, I have sed out 'traceDirectory' lines for these tests.\n5. Adds tests to derbynet/testProperties.java.\n6. Fixes javadoc for 'traceDirectory' in NetworkServerControl.\n\nContributed by Deepa Remesh\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@321274 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/117d8b57c9860a1d112fecaa6d14a2b69fc4e8ea",
        "patched_files": [
            "getCurrentProperties_sed.properties",
            "sysinfo_sed.properties",
            "NetworkServerControlImpl.java",
            "copyfiles.ant",
            "NetworkServerControl.java",
            "testProperties.out"
        ],
        "repo": "derby",
        "unit_tests": [
            "testProperties.java"
        ]
    },
    "derby_0a6a846": {
        "bug_id": "derby_0a6a846",
        "commit": "https://github.com/apache/derby/commit/0a6a8464ef48ebdbabb92da0dd0902836ae5d2af",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/derby/blob/0a6a8464ef48ebdbabb92da0dd0902836ae5d2af/java/engine/org/apache/derby/impl/sql/execute/DistinctScalarAggregateResultSet.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/DistinctScalarAggregateResultSet.java?ref=0a6a8464ef48ebdbabb92da0dd0902836ae5d2af",
                "deletions": 4,
                "filename": "java/engine/org/apache/derby/impl/sql/execute/DistinctScalarAggregateResultSet.java",
                "patch": "@@ -138,10 +138,20 @@ public void\topenCore() throws StandardException\n \n         source.openCore();\n \n-\t\t/*\n-\t\t** Load up the sorter because we have something to sort.\n-\t\t*/\n-\t\tscanController = loadSorter();\n+\t\ttry {\n+\t\t\t/*\n+\t\t\t** Load up the sorter because we have something to sort.\n+\t\t\t*/\n+\t\t\tscanController = loadSorter();\n+\t\t} catch (StandardException e) {\n+\t\t\t// DERBY-4330 Result set tree must be atomically open or\n+\t\t\t// closed for reuse to work (after DERBY-827).\n+\n+\t\t\tisOpen = true; // to make close do its thing:\n+\t\t\ttry { close(); } catch (StandardException ee) {}\n+\t\t\tthrow e;\n+\t\t}\n+\n \t\tsorted = true;\n \n \t    isOpen = true;",
                "raw_url": "https://github.com/apache/derby/raw/0a6a8464ef48ebdbabb92da0dd0902836ae5d2af/java/engine/org/apache/derby/impl/sql/execute/DistinctScalarAggregateResultSet.java",
                "sha": "c3654452447c6d7c150bc41bd4c23f185a31f171",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/derby/blob/0a6a8464ef48ebdbabb92da0dd0902836ae5d2af/java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java?ref=0a6a8464ef48ebdbabb92da0dd0902836ae5d2af",
                "deletions": 18,
                "filename": "java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java",
                "patch": "@@ -158,26 +158,35 @@ public void\topenCore() throws StandardException\n \n         source.openCore();\n \n-\t\t/* If this is an in-order group by then we do not need the sorter.\n-\t\t * (We can do the aggregation ourselves.)\n-\t\t * We save a clone of the first row so that subsequent next()s\n-\t\t * do not overwrite the saved row.\n-\t\t */\n-\t\tif (isInSortedOrder)\n-\t\t{\n-\t\t\tcurrSortedRow = getNextRowFromRS();\n-\t\t\tif (currSortedRow != null)\n+\t\ttry {\n+\t\t\t/* If this is an in-order group by then we do not need the sorter.\n+\t\t\t * (We can do the aggregation ourselves.)\n+\t\t\t * We save a clone of the first row so that subsequent next()s\n+\t\t\t * do not overwrite the saved row.\n+\t\t\t */\n+\t\t\tif (isInSortedOrder)\n \t\t\t{\n-\t\t\t\tcurrSortedRow = (ExecIndexRow) currSortedRow.getClone();\n-\t\t\t\tinitializeVectorAggregation(currSortedRow);\n+\t\t\t\tcurrSortedRow = getNextRowFromRS();\n+\t\t\t\tif (currSortedRow != null)\n+\t\t\t\t{\n+\t\t\t\t\tcurrSortedRow = (ExecIndexRow) currSortedRow.getClone();\n+\t\t\t\t\tinitializeVectorAggregation(currSortedRow);\n+\t\t\t\t}\n \t\t\t}\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\t/*\n-\t\t\t** Load up the sorter\n-\t\t\t*/\n-\t\t\tscanController = loadSorter();\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\t/*\n+\t\t\t\t** Load up the sorter\n+\t\t\t\t*/\n+\t\t\t\tscanController = loadSorter();\n+\t\t\t}\n+\t\t} catch (StandardException e) {\n+\t\t\t// DERBY-4330 Result set tree must be atomically open or\n+\t\t\t// closed for reuse to work (after DERBY-827).\n+\n+\t\t\tisOpen = true; // to make close do its thing:\n+\t\t\ttry { close(); } catch (StandardException ee) {}\n+\t\t\tthrow e;\n \t\t}\n \n \t    isOpen = true;",
                "raw_url": "https://github.com/apache/derby/raw/0a6a8464ef48ebdbabb92da0dd0902836ae5d2af/java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java",
                "sha": "51ef42513718e58d09c62d8504c07c894a15dfb1",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/derby/blob/0a6a8464ef48ebdbabb92da0dd0902836ae5d2af/java/engine/org/apache/derby/impl/sql/execute/JoinResultSet.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/JoinResultSet.java?ref=0a6a8464ef48ebdbabb92da0dd0902836ae5d2af",
                "deletions": 6,
                "filename": "java/engine/org/apache/derby/impl/sql/execute/JoinResultSet.java",
                "patch": "@@ -143,14 +143,25 @@ public void\topenCore() throws StandardException\n \t\tif (SanityManager.DEBUG)\n \t    \tSanityManager.ASSERT( ! isOpen, \"JoinResultSet already open\");\n \n-\t    isOpen = true;\n \t\tleftResultSet.openCore();\n-\t\tleftRow = leftResultSet.getNextRowCore();\n-\t\tif (leftRow != null)\n-\t\t{\n-\t\t\topenRight();\n-\t\t\trowsSeenLeft++;\n+\n+\t\ttry {\n+\t\t\tleftRow = leftResultSet.getNextRowCore();\n+\t\t\tif (leftRow != null)\n+\t\t\t{\n+\t\t\t\topenRight();\n+\t\t\t\trowsSeenLeft++;\n+\t\t\t}\n+\t\t} catch (StandardException e) {\n+\t\t\t// DERBY-4330 Result set tree must be atomically open or\n+\t\t\t// closed for reuse to work (after DERBY-827).\n+\n+\t\t\tisOpen = true; // to make close work:\n+\t\t\ttry { close(); } catch (StandardException ee) {}\n+\t\t\tthrow e;\n \t\t}\n+\n+\t    isOpen = true;\n \t\tnumOpens++;\n \n \t\topenTime += getElapsedMillis(beginTime);",
                "raw_url": "https://github.com/apache/derby/raw/0a6a8464ef48ebdbabb92da0dd0902836ae5d2af/java/engine/org/apache/derby/impl/sql/execute/JoinResultSet.java",
                "sha": "faa050bd883b0b1572add01d08e30cf2ff3b108f",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/derby/blob/0a6a8464ef48ebdbabb92da0dd0902836ae5d2af/java/engine/org/apache/derby/impl/sql/execute/SetOpResultSet.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/SetOpResultSet.java?ref=0a6a8464ef48ebdbabb92da0dd0902836ae5d2af",
                "deletions": 3,
                "filename": "java/engine/org/apache/derby/impl/sql/execute/SetOpResultSet.java",
                "patch": "@@ -108,15 +108,25 @@ public void\topenCore() throws StandardException\n \t\tif (SanityManager.DEBUG)\n \t    \tSanityManager.ASSERT( ! isOpen, \"SetOpResultSet already open\");\n \n-        isOpen = true;\n         leftSource.openCore();\n-        rightSource.openCore();\n-        rightInputRow = rightSource.getNextRowCore();\n+\n+        try {\n+            rightSource.openCore();\n+            rightInputRow = rightSource.getNextRowCore();\n+        } catch (StandardException e) {\n+            // DERBY-4330 Result set tree must be atomically open or\n+            // closed for reuse to work (after DERBY-827).\n+            isOpen = true; // to make close work:\n+            try { close(); } catch (StandardException ee) {}\n+            throw e;\n+        }\n+\n         if (rightInputRow != null)\n         {\n             rowsSeenRight++;\n         }\n \n+        isOpen = true;\n \t\tnumOpens++;\n \n \t\topenTime += getElapsedMillis(beginTime);",
                "raw_url": "https://github.com/apache/derby/raw/0a6a8464ef48ebdbabb92da0dd0902836ae5d2af/java/engine/org/apache/derby/impl/sql/execute/SetOpResultSet.java",
                "sha": "45c47eb18cde3d20cf4440def3aa0187f7db936f",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/derby/blob/0a6a8464ef48ebdbabb92da0dd0902836ae5d2af/java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java?ref=0a6a8464ef48ebdbabb92da0dd0902836ae5d2af",
                "deletions": 18,
                "filename": "java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java",
                "patch": "@@ -247,26 +247,35 @@ public void\topenCore() throws StandardException\n \n         source.openCore();\n \n-\t\t/* If this is an in-order distinct then we do not need the sorter.\n-\t\t * (We filter out the duplicate rows ourselves.)\n-\t\t * We save a clone of the first row so that subsequent next()s\n-\t\t * do not overwrite the saved row.\n-\t\t */\n-\t\tif (isInSortedOrder && distinct)\n-\t\t{\n-\t\t\tcurrSortedRow = getNextRowFromRS();\n-\t\t\tif (currSortedRow != null)\n+\t\ttry {\n+\t\t\t/* If this is an in-order distinct then we do not need the sorter.\n+\t\t\t * (We filter out the duplicate rows ourselves.)  We save a clone\n+\t\t\t * of the first row so that subsequent next()s do not overwrite the\n+\t\t\t * saved row.\n+\t\t\t */\n+\t\t\tif (isInSortedOrder && distinct)\n+\t\t\t{\n+\t\t\t\tcurrSortedRow = getNextRowFromRS();\n+\n+\t\t\t\tif (currSortedRow != null)\n+\t\t\t\t{\n+\t\t\t\t\tcurrSortedRow = (ExecRow) currSortedRow.getClone();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\telse\n \t\t\t{\n-\t\t\t\tcurrSortedRow = (ExecRow) currSortedRow.getClone();\n+\t\t\t\t/*\n+\t\t\t\t** Load up the sorter.\n+\t\t\t\t*/\n+\t\t\t\tscanController = loadSorter();\n+\t\t\t\tsorted = true;\n \t\t\t}\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\t/*\n-\t\t\t** Load up the sorter.\n-\t\t\t*/\n-\t\t\tscanController = loadSorter();\n-\t\t\tsorted = true;\n+\t\t} catch (StandardException e) {\n+\t\t\t// DERBY-4330 Result set tree must be atomically open or\n+\t\t\t// closed for reuse to work (after DERBY-827).\n+\t\t\tisOpen = true; // to make close do its thing:\n+\t\t\ttry { close(); } catch (StandardException ee) {}\n+\t\t\tthrow e;\n \t\t}\n \n \t    isOpen = true;",
                "raw_url": "https://github.com/apache/derby/raw/0a6a8464ef48ebdbabb92da0dd0902836ae5d2af/java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java",
                "sha": "da7857a774a4ef65a957c73723982742031c7961",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/derby/blob/0a6a8464ef48ebdbabb92da0dd0902836ae5d2af/java/engine/org/apache/derby/impl/sql/execute/UnionResultSet.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/UnionResultSet.java?ref=0a6a8464ef48ebdbabb92da0dd0902836ae5d2af",
                "deletions": 1,
                "filename": "java/engine/org/apache/derby/impl/sql/execute/UnionResultSet.java",
                "patch": "@@ -99,8 +99,8 @@ public void\topenCore() throws StandardException\n \t\tif (SanityManager.DEBUG)\n \t    \tSanityManager.ASSERT( ! isOpen, \"UnionResultSet already open\");\n \n-        isOpen = true;\n         source1.openCore();\n+        isOpen = true;\n \t\tnumOpens++;\n \n \t\topenTime += getElapsedMillis(beginTime);",
                "raw_url": "https://github.com/apache/derby/raw/0a6a8464ef48ebdbabb92da0dd0902836ae5d2af/java/engine/org/apache/derby/impl/sql/execute/UnionResultSet.java",
                "sha": "4ed519d0f15636756c4537ca365985b88981c0e6",
                "status": "modified"
            },
            {
                "additions": 389,
                "blob_url": "https://github.com/apache/derby/blob/0a6a8464ef48ebdbabb92da0dd0902836ae5d2af/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ResultSetsFromPreparedStatementTest.java",
                "changes": 389,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ResultSetsFromPreparedStatementTest.java?ref=0a6a8464ef48ebdbabb92da0dd0902836ae5d2af",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/ResultSetsFromPreparedStatementTest.java",
                "patch": "@@ -169,6 +169,10 @@ public static String ref(String table) {\n     /** Secondary connection. Used if something needs to be executed in a\n      * separate transaction. */\n     private Connection c2;\n+    private Connection c3;\n+\n+\n+    private static final long DERBY_DEFAULT_TIMEOUT = 60;\n \n     /**\n      * Creates a String containing an insert statement for the\n@@ -454,6 +458,31 @@ protected void tearDown() throws Exception {\n         try { s.executeUpdate(\"drop table emp\"); } catch (SQLException e) {}\n         try { s.executeUpdate(\"drop table emp2\"); } catch (SQLException e) {}\n         try { s.executeUpdate(\"drop table dept\"); } catch (SQLException e) {}\n+\n+        // DERBY-4330 tables:\n+        try {\n+            if (c3 != null && !c3.isClosed()) {\n+                c3.rollback();\n+                c3.close();\n+            }\n+        } catch (SQLException e) {\n+        }\n+\n+        try { s.executeUpdate(\n+                \"drop table APP.FILECHANGES\"); } catch (SQLException e) {}\n+        try { s.executeUpdate(\n+                \"drop table APP.CHANGESETS\"); } catch (SQLException e) {}\n+        try { s.executeUpdate(\n+                \"drop table APP.AUTHORS\"); } catch (SQLException e) {}\n+        try { s.executeUpdate(\n+                \"drop table APP.FILES\"); } catch (SQLException e) {}\n+        try { s.executeUpdate(\n+                \"drop table APP.REPOSITORIES\"); } catch (SQLException e) {}\n+        try { s.executeUpdate(\n+                \"drop table APP.FILECHANGES_2\"); } catch (SQLException e) {}\n+\n+        try { setTimeout(DERBY_DEFAULT_TIMEOUT); } catch (SQLException e) {}\n+\n         s.close();\n         commit();\n \n@@ -2244,4 +2273,364 @@ public void testRuntimeStatisticsForCall() throws SQLException {\n                 null); // XPLAIN doesn't work for CALL statements currently.\n     }\n \n+\n+    public void testDerby4330_JoinResultSet()  throws SQLException {\n+        setTimeout(1);\n+        setSchema(\"APP\");\n+        createDerby4330_join_tables();\n+\n+        PreparedStatement ps = prepareStatement(\n+            \"SELECT CS.REVISION, A.NAME, CS.TIME, CS.MESSAGE, F.PATH \" +\n+            \"FROM \" +\n+            \"CHANGESETS CS, FILECHANGES FC, \" +\n+            \"           REPOSITORIES R, FILES F, AUTHORS A \" +\n+            \"WHERE \" +\n+            \"F.REPOSITORY = R.ID AND A.REPOSITORY = R.ID AND \" +\n+            \"CS.REPOSITORY = R.ID AND CS.ID = FC.CHANGESET AND \" +\n+            \"F.ID = FC.FILE AND A.ID = CS.AUTHOR AND \" +\n+            \"EXISTS ( \" +\n+            \"SELECT 1 \" +\n+            \"FROM FILES F2 \" +\n+            \"WHERE \" +\n+            \"F2.ID = FC.FILE AND F2.REPOSITORY = R.ID) \" +\n+            \"ORDER BY CS.ID DESC\");\n+\n+        c3 = openDefaultConnection();\n+        c3.setAutoCommit(false);\n+        Statement stm2 = c3.createStatement();\n+        stm2.execute(\"LOCK TABLE FILECHANGES IN EXCLUSIVE MODE\");\n+        stm2.close();\n+\n+        try {\n+            ps.executeQuery();\n+            fail();\n+        } catch (SQLException e) {\n+            assertSQLState(\"Expected timeout\", \"40XL1\", e);\n+        }\n+\n+        c3.rollback();\n+        c3.close();\n+\n+        ResultSet rs = ps.executeQuery();\n+        assertTrue(rs.next());\n+        assertEquals(rs.getString(2), \"xyz\"); // name\n+        assertFalse(rs.next());\n+        ps.close();\n+\n+    }\n+\n+\n+    public void testDerby4330_UnionResultSet()  throws SQLException {\n+        setTimeout(1);\n+        setSchema(\"APP\");\n+        createDerby4330_union_tables();\n+\n+        PreparedStatement ps = prepareStatement(\n+            \"SELECT * FROM (\" +\n+            \"SELECT * FROM FILECHANGES_2  UNION \" +\n+            \"SELECT * FROM FILECHANGES) X\"); // locked file last\n+\n+        PreparedStatement ps_inverse = prepareStatement(\n+            \"SELECT * FROM (\" +\n+            \"SELECT * FROM FILECHANGES  UNION \" + // locked file first\n+            \"SELECT * FROM FILECHANGES_2) X\");\n+\n+        c3 = openDefaultConnection();\n+        c3.setAutoCommit(false);\n+        Statement stm2 = c3.createStatement();\n+        stm2.execute(\"LOCK TABLE FILECHANGES IN EXCLUSIVE MODE\");\n+        stm2.close();\n+\n+        try {\n+            ps.executeQuery();\n+            fail();\n+        } catch (SQLException e) {\n+            assertSQLState(\"Expected timeout\", \"40XL1\", e);\n+        }\n+\n+        try {\n+            ps_inverse.executeQuery();\n+            fail();\n+        } catch (SQLException e) {\n+            assertSQLState(\"Expected timeout\", \"40XL1\", e);\n+        }\n+\n+        c3.rollback();\n+        c3.close();\n+\n+        ResultSet rs = ps.executeQuery();\n+        JDBC.assertFullResultSet(rs, new String[][]{{\"1\", \"1\", \"1\"}});\n+\n+        rs = ps_inverse.executeQuery();\n+        JDBC.assertFullResultSet(rs, new String[][]{{\"1\", \"1\", \"1\"}});\n+\n+        ps.close();\n+        ps_inverse.close();\n+\n+    }\n+\n+\n+    public void testDerby4330_SetOpResultSet()  throws SQLException {\n+        setTimeout(1);\n+        setSchema(\"APP\");\n+        createDerby4330_union_tables();\n+\n+        String[] ops = {\"EXCEPT\", \"INTERSECT\"};\n+        String[][][] opExpectedRs = {null, {{\"1\", \"1\", \"1\"}}};\n+\n+        for (int i=0; i < 2; i++) {\n+            PreparedStatement ps = prepareStatement(\n+                \"SELECT * FROM (\" +\n+                \"SELECT * FROM FILECHANGES_2 \" + ops[i] + \" \" +\n+                // locked file last\n+                \"SELECT * FROM FILECHANGES) X ORDER BY ID\");\n+\n+            PreparedStatement ps_inverse = prepareStatement(\n+                \"SELECT * FROM (\" +\n+                 // locked file first:\n+                \"SELECT * FROM FILECHANGES \" + ops[i] + \" \" +\n+                \"SELECT * FROM FILECHANGES_2) X ORDER BY ID\");\n+\n+            c3 = openDefaultConnection();\n+            c3.setAutoCommit(false);\n+            Statement stm2 = c3.createStatement();\n+            stm2.execute(\"LOCK TABLE FILECHANGES IN EXCLUSIVE MODE\");\n+            stm2.close();\n+\n+            try {\n+                ps.executeQuery();\n+                fail();\n+            } catch (SQLException e) {\n+                assertSQLState(\"Expected timeout\", \"40XL1\", e);\n+            }\n+\n+            try {\n+                ps_inverse.executeQuery();\n+                fail();\n+            } catch (SQLException e) {\n+                assertSQLState(\"Expected timeout\", \"40XL1\", e);\n+            }\n+\n+            c3.rollback();\n+            c3.close();\n+\n+            ResultSet rs = ps.executeQuery();\n+\n+            if (opExpectedRs[i] != null) {\n+                JDBC.assertFullResultSet(rs, opExpectedRs[i]);\n+            } else {\n+                JDBC.assertEmpty(rs);\n+            }\n+\n+            rs = ps_inverse.executeQuery();\n+\n+            if (opExpectedRs[i] != null) {\n+                JDBC.assertFullResultSet(rs, opExpectedRs[i]);\n+            } else {\n+                JDBC.assertEmpty(rs);\n+            }\n+\n+            ps.close();\n+            ps_inverse.close();\n+\n+        }\n+\n+    }\n+\n+\n+    public void testDerby4330_GroupedAggregateResultSet()  throws SQLException {\n+        setTimeout(1);\n+        setSchema(\"APP\");\n+        createDerby4330_union_tables();\n+\n+        PreparedStatement ps = prepareStatement(\n+            \"SELECT SUM(CHANGESET) from FILECHANGES GROUP BY FILE\");\n+\n+        c3 = openDefaultConnection();\n+        c3.setAutoCommit(false);\n+        Statement stm2 = c3.createStatement();\n+        // Next statement gives an exclusive write lock on a row in FILECHANGES:\n+        stm2.execute(\"INSERT INTO FILECHANGES(FILE,CHANGESET) VALUES (2,2)\");\n+        stm2.close();\n+\n+        try {\n+            ps.executeQuery();\n+            fail();\n+        } catch (SQLException e) {\n+            assertSQLState(\"Expected timeout\", \"40XL1\", e);\n+        }\n+\n+        c3.rollback();\n+        c3.close();\n+\n+        ResultSet rs = ps.executeQuery();\n+        JDBC.assertFullResultSet(rs, new String[][]{{\"1\"}});\n+\n+        ps.close();\n+    }\n+\n+\n+    public void testDerby4330_DistinctGroupedAggregateResultSet()\n+            throws SQLException\n+    {\n+        setTimeout(1);\n+        setSchema(\"APP\");\n+        createDerby4330_union_tables();\n+\n+        PreparedStatement ps = prepareStatement(\n+            \"SELECT SUM(DISTINCT CHANGESET) from FILECHANGES GROUP BY FILE\");\n+\n+        c3 = openDefaultConnection();\n+        c3.setAutoCommit(false);\n+        Statement stm2 = c3.createStatement();\n+        // Next statement gives an exclusive write lock on a row in FILECHANGES:\n+        stm2.execute(\"INSERT INTO FILECHANGES(FILE,CHANGESET) VALUES (2,2)\");\n+        stm2.close();\n+\n+        try {\n+            ps.executeQuery();\n+            fail();\n+        } catch (SQLException e) {\n+            assertSQLState(\"Expected timeout\", \"40XL1\", e);\n+        }\n+\n+        c3.rollback();\n+        c3.close();\n+\n+        ResultSet rs = ps.executeQuery();\n+        JDBC.assertFullResultSet(rs, new String[][]{{\"1\"}});\n+\n+        ps.close();\n+    }\n+\n+\n+    public void testDerby4330_DistinctScalarAggregateResultSet()\n+            throws SQLException\n+    {\n+        setTimeout(1);\n+        setSchema(\"APP\");\n+        createDerby4330_union_tables();\n+\n+        PreparedStatement ps = prepareStatement(\n+            \"SELECT SUM(DISTINCT CHANGESET) from FILECHANGES\");\n+\n+        c3 = openDefaultConnection();\n+        c3.setAutoCommit(false);\n+        Statement stm2 = c3.createStatement();\n+        // Next statement gives an exclusive write lock on a row in FILECHANGES:\n+        stm2.execute(\"INSERT INTO FILECHANGES(FILE,CHANGESET) VALUES (2,2)\");\n+        stm2.close();\n+\n+        try {\n+            ps.executeQuery();\n+            fail();\n+        } catch (SQLException e) {\n+            assertSQLState(\"Expected timeout\", \"40XL1\", e);\n+        }\n+\n+        c3.rollback();\n+        c3.close();\n+\n+        ResultSet rs = ps.executeQuery();\n+        JDBC.assertFullResultSet(rs, new String[][]{{\"1\"}});\n+\n+        ps.close();\n+    }\n+\n+\n+    private void setTimeout(long t) throws SQLException {\n+        Statement stm = createStatement();\n+        stm.execute(\"call syscs_util.syscs_set_database_property(\" +\n+                    \"'derby.locks.waitTimeout', '\" + t + \"')\");\n+        stm.close();\n+    }\n+\n+\n+    private void createDerby4330_join_tables()  throws SQLException {\n+        Statement stm = createStatement();\n+        stm.execute(\n+            \"CREATE TABLE REPOSITORIES (\" +\n+            \"ID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\" +\n+            \"PATH VARCHAR(32672) UNIQUE NOT NULL)\");\n+\n+        stm.execute(\n+            \"INSERT INTO REPOSITORIES(PATH) VALUES ('r')\");\n+\n+        stm.execute(\n+            \"CREATE TABLE FILES (\" +\n+            \"ID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\" +\n+            \"PATH VARCHAR(32672) NOT NULL,\" +\n+            \"REPOSITORY INT NOT NULL REFERENCES REPOSITORIES\" +\n+            \"    ON DELETE CASCADE,\" +\n+            \"UNIQUE (REPOSITORY, PATH))\");\n+\n+        stm.execute(\n+            \"INSERT INTO FILES(PATH, REPOSITORY) VALUES ('/adsf',1)\");\n+\n+        stm.execute(\n+            \"CREATE TABLE AUTHORS (\" +\n+            \"ID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\" +\n+            \"REPOSITORY INT NOT NULL REFERENCES REPOSITORIES \" +\n+            \"           ON DELETE CASCADE,\" +\n+            \"NAME VARCHAR(32672) NOT NULL,\" +\n+            \"UNIQUE (REPOSITORY, NAME))\");\n+\n+        stm.execute(\n+            \"INSERT INTO AUTHORS(REPOSITORY, NAME) VALUES (1, 'xyz')\");\n+\n+        stm.execute(\n+            \"CREATE TABLE CHANGESETS (\" +\n+            \"ID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\" +\n+            \"REPOSITORY INT NOT NULL REFERENCES REPOSITORIES \" +\n+            \"           ON DELETE CASCADE,\" +\n+            \"REVISION VARCHAR(1024) NOT NULL,\" +\n+            \"AUTHOR INT NOT NULL REFERENCES AUTHORS ON DELETE CASCADE,\" +\n+            \"TIME TIMESTAMP NOT NULL,\" +\n+            \"MESSAGE VARCHAR(32672) NOT NULL,\" +\n+            \"UNIQUE (REPOSITORY, REVISION))\");\n+\n+        stm.execute(\n+            \"INSERT INTO CHANGESETS(REPOSITORY, REVISION, \" +\n+            \"                       AUTHOR, TIME, MESSAGE)\" +\n+            \" VALUES (1,'',1,CURRENT_TIMESTAMP,'')\");\n+\n+        stm.execute(\n+            \"CREATE TABLE FILECHANGES (\" +\n+            \"ID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\" +\n+            \"FILE INT NOT NULL REFERENCES FILES ON DELETE CASCADE,\" +\n+            \"CHANGESET INT NOT NULL REFERENCES CHANGESETS ON DELETE CASCADE,\" +\n+            \"UNIQUE (FILE, CHANGESET))\");\n+\n+        stm.execute(\"INSERT INTO FILECHANGES(FILE,CHANGESET) VALUES (1,1)\");\n+        stm.close();\n+        commit();\n+    }\n+\n+\n+    private void createDerby4330_union_tables()  throws SQLException {\n+        Statement stm = createStatement();\n+        stm.execute(\"CREATE TABLE FILECHANGES (\" +\n+                    \"ID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\" +\n+                    \"FILE INT NOT NULL,\" +\n+                    \"CHANGESET INT NOT NULL,\" +\n+                    \"UNIQUE (FILE, CHANGESET))\");\n+\n+        stm.execute(\"CREATE TABLE FILECHANGES_2 (\" +\n+                    \"ID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\" +\n+                    \"FILE INT NOT NULL,\" +\n+                    \"CHANGESET INT NOT NULL,\" +\n+                    \"UNIQUE (FILE, CHANGESET))\");\n+\n+        stm.execute(\"INSERT INTO FILECHANGES(FILE,CHANGESET) VALUES (1,1)\");\n+        stm.execute(\"INSERT INTO FILECHANGES_2(FILE,CHANGESET) VALUES (1,1)\");\n+        stm.close();\n+        commit();\n+    }\n+\n+\n+    private void setSchema(String schema) throws SQLException {\n+        Statement stm = createStatement();\n+        stm.execute(\"SET SCHEMA \" + schema);\n+        stm.close();\n+    }\n }",
                "raw_url": "https://github.com/apache/derby/raw/0a6a8464ef48ebdbabb92da0dd0902836ae5d2af/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ResultSetsFromPreparedStatementTest.java",
                "sha": "4c07a8fd081d1a4623bcb0bb82bfd065f66577f9",
                "status": "modified"
            }
        ],
        "message": "DERBY-4330 NullPointerException or assert failure when re-executing PreparedStatement after lock timeout\n\nPatch derby-4330c fixes this issue. The problem is that when a timeout\nhappens (or a deadlock), the result set tree for prepared statements\nfor some queries is partically in a closed, partially in an open\nstate. (The issue was reported for a join query, but exists for others\nqueries as well). This causes problems when the result set tree is\nbeing reused, i.e. when the prpared statement is attempted re-executed\nafter the timeout, since the tree is expected to be fully closed at\nthat time, cuasing the assert or NPE.\n\nThe fix ensures that the tree is left in a fully closed state in such\ncases.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@804271 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/60d10e68b0bc0f0f8fa5cd852f7b0c867a78b2a7",
        "patched_files": [
            "JoinResultSet.java",
            "UnionResultSet.java",
            "SortResultSet.java",
            "DistinctScalarAggregateResultSet.java",
            "SetOpResultSet.java",
            "GroupedAggregateResultSet.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "ResultSetsFromPreparedStatementTest.java"
        ]
    },
    "derby_0af1f88": {
        "bug_id": "derby_0af1f88",
        "commit": "https://github.com/apache/derby/commit/0af1f882a8d733446656542a4f55aba7785828a3",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/derby/blob/0af1f882a8d733446656542a4f55aba7785828a3/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java?ref=0af1f882a8d733446656542a4f55aba7785828a3",
                "deletions": 3,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/SelectNode.java",
                "patch": "@@ -176,11 +176,13 @@ public void init(Object selectList,\n \n \t\tif (resultColumns != null) {\n \n-\t\t\t// Collect window functions used in result columns, and check them\n-\t\t\t// for any <in-line window specification>s.\n+            // Collect simply contained window functions (note: *not*\n+            // any inside nested SELECTs) used in result columns, and\n+            // check them for any <in-line window specification>s.\n \n \t\t\tCollectNodesVisitor cnvw =\n-\t\t\t\tnew CollectNodesVisitor(WindowFunctionNode.class);\n+                new CollectNodesVisitor(WindowFunctionNode.class,\n+                                        SelectNode.class);\n \t\t\tresultColumns.accept(cnvw);\n \t\t\twindowFuncCalls = cnvw.getList();\n ",
                "raw_url": "https://github.com/apache/derby/raw/0af1f882a8d733446656542a4f55aba7785828a3/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java",
                "sha": "1b6aa2f4d8f264fef2c253724b7a1315f8c7396d",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/derby/blob/0af1f882a8d733446656542a4f55aba7785828a3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java?ref=0af1f882a8d733446656542a4f55aba7785828a3",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java",
                "patch": "@@ -305,6 +305,23 @@ public void testBasicOperations()\n \t\t\t\t\t\t\t\t\t  {\"4\", \"4\"}};\n \t\tJDBC.assertFullResultSet(rs, expectedRows);\n \n+        // Subquery in SELECT list. DERBY-5954\n+        rs = s.executeQuery(\n+            \"SELECT rn_t1, (\" +\n+            \"     SELECT rn_t2 FROM (\" +\n+            \"         SELECT row_number() over() as rn_t2 FROM t2) \" +\n+            \"         as T_2\" +\n+            \"         where T_2.rn_t2 = T_1.rn_t1 + 1  ) \" +\n+            \"     as rn_outer\" +\n+            \"     FROM (SELECT row_number() over() as rn_t1 from t2) as T_1\");\n+\n+        expectedRows = new String[][]{{\"1\", \"2\"},\n+                                      {\"2\", \"3\"},\n+                                      {\"3\", \"4\"},\n+                                      {\"4\", \"5\"},\n+                                      {\"5\", null}};\n+        JDBC.assertFullResultSet(rs, expectedRows);\n+\n \n \t\t/*\n \t\t * Group by and having",
                "raw_url": "https://github.com/apache/derby/raw/0af1f882a8d733446656542a4f55aba7785828a3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java",
                "sha": "98fa01c3fe240430a0d60ceef3623c297a0bdf11",
                "status": "modified"
            }
        ],
        "message": "DERBY-5954 NPE in SELECT involving subselects and windows functions\n\nPatch \"derby-5954-with-test-2\" makes the code only look for in-lined\nwindow specification in simply contained select lists. Adds a new test\ncase to OLAPTest which would fail with an NPE before this patch,\ncf. original JIRA problem.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1406240 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/5948150058fce0b2df3f1f13a9aa0384acc222bc",
        "patched_files": [
            "SelectNode.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "OLAPTest.java"
        ]
    },
    "derby_0c997ed": {
        "bug_id": "derby_0c997ed",
        "commit": "https://github.com/apache/derby/commit/0c997ed8e2cf7d46f3bebc0131cbd684bf0d518d",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/derby/blob/0c997ed8e2cf7d46f3bebc0131cbd684bf0d518d/java/testing/org/apache/derbyTesting/system/nstest/tester/TesterObject.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/system/nstest/tester/TesterObject.java?ref=0c997ed8e2cf7d46f3bebc0131cbd684bf0d518d",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/system/nstest/tester/TesterObject.java",
                "patch": "@@ -96,6 +96,19 @@ public Connection getConnection() {\n \t\treturn conn; // null if there was a problem, else a valid connection\n \t}\n \n+    /** Get a new connection and raise an error if this can't be done */\n+    public  Connection  getNewConnection()\n+    {\n+        Connection  conn = getConnection();\n+\n+        if ( conn == null )\n+        {\n+            throw new RuntimeException( \"Could not get a connection!\" );\n+        }\n+\n+        return conn;\n+    }\n+\n \t// *******************************************************************************\n \t//\n \t// Sets the isolation level to that indicated.\n@@ -142,6 +155,8 @@ public void doIUDOperation() {\n \t\t// decide Insert, Update or Delete\n \t\tint decider = (int) (Math.random() * 100) % 3;\n \n+        if ( connex == null ) { connex = getNewConnection(); }\n+\n \t\tswitch (decider) {\n \n \t\tcase 0: // do an Insert",
                "raw_url": "https://github.com/apache/derby/raw/0c997ed8e2cf7d46f3bebc0131cbd684bf0d518d/java/testing/org/apache/derbyTesting/system/nstest/tester/TesterObject.java",
                "sha": "ec6f2a7e1ad5cd0c7ca2cba7ae8b4da6412ade9b",
                "status": "modified"
            }
        ],
        "message": "DERBY-6533: Plug another NPE in NsTest; commit derby-6533-aa-anotherNPE.diff.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1588289 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/396a5cda91b7d83f8032d6ebc5fab85bfe3a6a9b",
        "patched_files": [],
        "repo": "derby",
        "unit_tests": [
            "TesterObject.java"
        ]
    },
    "derby_1061fd2": {
        "bug_id": "derby_1061fd2",
        "commit": "https://github.com/apache/derby/commit/1061fd2082258262eccb55c3194a79c28b3bc8cf",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/derby/blob/1061fd2082258262eccb55c3194a79c28b3bc8cf/java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java?ref=1061fd2082258262eccb55c3194a79c28b3bc8cf",
                "deletions": 0,
                "filename": "java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java",
                "patch": "@@ -157,6 +157,12 @@ private boolean executeSPS(SPSDescriptor sps, boolean isWhen)\n \t\t\t*/\n \t\t\tif (ps == null || recompile)\n \t\t\t{\n+                // The SPS activation will set its parent activation from\n+                // the statement context. Reset it to the original parent\n+                // activation first so that it doesn't use the activation of\n+                // the previously executed SPS as parent. DERBY-6348.\n+                lcc.getStatementContext().setActivation(activation);\n+\n \t\t\t\t/*\n \t\t\t\t** We need to clone the prepared statement so we don't\n \t\t\t\t** wind up marking that ps that is tied to sps as finished",
                "raw_url": "https://github.com/apache/derby/raw/1061fd2082258262eccb55c3194a79c28b3bc8cf/java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java",
                "sha": "df74f42bc84ef35ab7cf9373d66e7b9afafb03c9",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/derby/blob/1061fd2082258262eccb55c3194a79c28b3bc8cf/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java?ref=1061fd2082258262eccb55c3194a79c28b3bc8cf",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java",
                "patch": "@@ -1916,4 +1916,34 @@ public void testDerby6371DropColumn() throws SQLException {\n         JDBC.assertSingleValueResultSet(\n                 s.executeQuery(\"select * from t2\"), \"2\");\n     }\n+\n+    public void testDerby6348() throws SQLException {\n+        setAutoCommit(false);\n+        Statement s = createStatement();\n+        s.execute(\"create table d6348(x int)\");\n+        s.execute(\"insert into d6348 values 1\");\n+        s.execute(\"create trigger d6348_tr1 after update on d6348 values 1\");\n+        s.execute(\"create trigger d6348_tr2 after update on d6348 \"\n+                + \"for each row update d6348 set x = x + 1 where x < 3\");\n+\n+        // Used to fail with assert failure or NullPointerException before\n+        // DERBY-6348.\n+        s.execute(\"update d6348 set x = x + 1\");\n+\n+        JDBC.assertSingleValueResultSet(\n+                s.executeQuery(\"select * from d6348\"),\n+                \"3\");\n+\n+        rollback();\n+\n+        s.execute(\"create table d6348(x int)\");\n+        s.execute(\"create trigger d6348_tr1 after insert on d6348 \"\n+                + \"values current_user\");\n+        s.execute(\"create trigger d6348_tr2 after insert on d6348 \"\n+                + \"values current_user\");\n+\n+        // Used to fail with assert failure or NullPointerException before\n+        // DERBY-6348.\n+        s.execute(\"insert into d6348 values 1\");\n+    }\n }",
                "raw_url": "https://github.com/apache/derby/raw/1061fd2082258262eccb55c3194a79c28b3bc8cf/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java",
                "sha": "165131c902bae30d69339b6975242998e30dc20d",
                "status": "modified"
            },
            {
                "additions": 87,
                "blob_url": "https://github.com/apache/derby/blob/1061fd2082258262eccb55c3194a79c28b3bc8cf/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java",
                "changes": 87,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java?ref=1061fd2082258262eccb55c3194a79c28b3bc8cf",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java",
                "patch": "@@ -60,6 +60,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n     private static final String JAVA_EXCEPTION = \"XJ001\";\n     private static final String NOT_SINGLE_COLUMN = \"42X39\";\n     private static final String NON_SCALAR_QUERY = \"21000\";\n+    private static final String TRIGGER_RECURSION = \"54038\";\n \n     public TriggerWhenClauseTest(String name) {\n         super(name);\n@@ -790,4 +791,90 @@ public void testScalarSubquery() throws SQLException {\n         assertStatementError(NON_SCALAR_QUERY, s, \"insert into t1 values 2\");\n         assertTableRowCount(\"T2\", 1);\n     }\n+\n+    /**\n+     * Test that a WHEN clause can call the CURRENT_USER function.\n+     */\n+    public void testCurrentUser() throws SQLException {\n+        Statement s = createStatement();\n+        s.execute(\"create table t1(x int)\");\n+        s.execute(\"create table t2(x varchar(10))\");\n+\n+        // Create one trigger that should only fire when current user is U2,\n+        // and one that should only fire when current user is different from\n+        // U2.\n+        s.execute(\"create trigger tr01 after insert on t1 \"\n+                + \"when (current_user = 'U2') \"\n+                + \"insert into t2 values 'TR01'\");\n+        s.execute(\"create trigger tr02 after insert on t1 \"\n+                + \"when (current_user <> 'U2') \"\n+                + \"insert into t2 values 'TR02'\");\n+        s.execute(\"grant insert on t1 to u2\");\n+\n+        commit();\n+\n+        // Used to get an assert failure or a NullPointerException here before\n+        // DERBY-6348. Expect it to succeed, and expect TR02 to have fired.\n+        s.execute(\"insert into t1 values 1\");\n+        JDBC.assertSingleValueResultSet(\n+                s.executeQuery(\"select * from t2\"), \"TR02\");\n+\n+        rollback();\n+\n+        // Now try the same insert as user U2.\n+        Connection c2 = openUserConnection(\"u2\");\n+        c2.setAutoCommit(true);\n+        Statement s2 = c2.createStatement();\n+        s2.execute(\"insert into \"\n+            + JDBC.escape(TestConfiguration.getCurrent().getUserName(), \"T1\")\n+            + \" values 1\");\n+        s2.close();\n+        c2.close();\n+\n+        // Since the insert was performed by user U2, expect TR01 to have fired.\n+        JDBC.assertSingleValueResultSet(\n+                s.executeQuery(\"select * from t2\"), \"TR01\");\n+\n+        // Cleanup.\n+        dropTable(\"T1\");\n+        dropTable(\"T2\");\n+        commit();\n+    }\n+\n+    /**\n+     * Test that a trigger with a WHEN clause can be recursive.\n+     */\n+    public void testRecursiveTrigger() throws SQLException {\n+        Statement s = createStatement();\n+        s.execute(\"create table t(x int)\");\n+        s.execute(\"create trigger tr1 after insert on t \"\n+                + \"referencing new as new for each row \"\n+                + \"when (new.x > 0) insert into t values new.x - 1\");\n+\n+        // Now fire the trigger. This used to cause an assert failure or a\n+        // NullPointerException before DERBY-6348.\n+        s.execute(\"insert into t values 15, 1, 2\");\n+\n+        // The row trigger will fire three times, so that the above statement\n+        // will insert the values { 15, 14, 13, ... , 0 }, { 1, 0 } and\n+        // { 2, 1, 0 }.\n+        String[][] expectedRows = {\n+            {\"0\"}, {\"0\"}, {\"0\"}, {\"1\"}, {\"1\"}, {\"1\"}, {\"2\"}, {\"2\"}, {\"3\"},\n+            {\"4\"}, {\"5\"}, {\"6\"}, {\"7\"}, {\"8\"}, {\"9\"}, {\"10\"}, {\"11\"},\n+            {\"12\"}, {\"13\"}, {\"14\"}, {\"15\"}\n+        };\n+\n+        JDBC.assertFullResultSet(s.executeQuery(\"select * from t order by x\"),\n+                                 expectedRows);\n+\n+        // Now fire the trigger with a value so that the maximum trigger\n+        // recursion depth (16) is exceeded, and verify that we get the\n+        // expected error.\n+        assertStatementError(TRIGGER_RECURSION, s, \"insert into t values 16\");\n+\n+        // The contents of the table should not have changed, since the\n+        // above statement failed and was rolled back.\n+        JDBC.assertFullResultSet(s.executeQuery(\"select * from t order by x\"),\n+                                 expectedRows);\n+    }\n }",
                "raw_url": "https://github.com/apache/derby/raw/1061fd2082258262eccb55c3194a79c28b3bc8cf/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java",
                "sha": "7f1cc5e4a1a66bba4ef872797a1bae49b5ef8e0f",
                "status": "modified"
            }
        ],
        "message": "DERBY-6348: NPE or assert failure in recursive trigger\n\nReset the activation in the statement context before setting up the\nactivation for the next trigger, so that the nested trigger activation\nis a child of the top-level activation, and not a child of the\nprevious trigger's activation.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1537393 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/65aba97a20ef9ec7355f3b4cf558ad12ad0869cd",
        "patched_files": [
            "GenericTriggerExecutor.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "TriggerTest.java",
            "TriggerWhenClauseTest.java"
        ]
    },
    "derby_16164d5": {
        "bug_id": "derby_16164d5",
        "commit": "https://github.com/apache/derby/commit/16164d57a7a25381b85671379a516fee80b845ac",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/derby/blob/16164d57a7a25381b85671379a516fee80b845ac/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java?ref=16164d57a7a25381b85671379a516fee80b845ac",
                "deletions": 1,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/SelectNode.java",
                "patch": "@@ -591,7 +591,18 @@ public void bindExpressionsWithTables(FromList fromListParam)\n \tpublic void bindTargetExpressions(FromList fromListParam)\n \t\t\t\t\tthrows StandardException\n \t{\n-\t\tbindTargetListOnly = true;\n+\t\t/*\n+\t\t * With a FromSubquery in the FromList we cannot bind target expressions \n+\t\t * at this level (DERBY-3321)\n+\t\t */\n+\t\tCollectNodesVisitor cnv = new CollectNodesVisitor(FromSubquery.class, \n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t  FromSubquery.class);\n+\t\tfromList.accept(cnv);\n+\t\tif (!cnv.getList().isEmpty()){\t\t\n+\t\t\tbindTargetListOnly = false;\n+\t\t} else {\n+\t\t\tbindTargetListOnly = true;\t\t\t\t\n+\t\t}\t\t\n \t\tbindExpressions(fromListParam);\n \t\tbindTargetListOnly = false;\n \t}",
                "raw_url": "https://github.com/apache/derby/raw/16164d57a7a25381b85671379a516fee80b845ac/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java",
                "sha": "30fd57a1a6a27534b9e076de6c7b71d5210e9f37",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/derby/blob/16164d57a7a25381b85671379a516fee80b845ac/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NestedWhereSubqueryTest.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NestedWhereSubqueryTest.java?ref=16164d57a7a25381b85671379a516fee80b845ac",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/NestedWhereSubqueryTest.java",
                "patch": "@@ -355,6 +355,33 @@ public void testBasicOperations()\n \t\t/* Expected rows are as above */\n \t\tJDBC.assertUnorderedResultSet(rs, expectedRows);\n \t\t\n+\t\t/*\n+\t\t * DERBY-3321 revealed an NPE with a subquery in the [NOT] EXIST subuery FromList.\n+\t\t */\n+\t\ts.executeUpdate(\"create table a (aa int, bb int)\");\n+\t\ts.executeUpdate(\"create table b (bb int)\");\n+\t\ts.executeUpdate(\"insert into a values (1,1),(1,2),(2,2)\");\n+\t\ts.executeUpdate(\"insert into b values (1)\");\n+\t\t\n+\t\t/* NOT EXISTS */\n+\t\tsb = new StringBuffer();\n+\t\tsb.append(\"select * from a \");\n+\t\tsb.append(\"where not exists \");\n+\t\tsb.append(\"(select bb from (select bb from b) p where a.bb=p.bb)\");\n+\t\trs = s.executeQuery(sb.toString());\n+\t\texpectedRows = new String [][] {{\"1\",\"2\"},\t\t\n+\t\t\t\t\t\t\t\t\t\t{\"2\",\"2\"}};\n+\t\tJDBC.assertUnorderedResultSet(rs, expectedRows);\t\t\n+\t\t\n+\t\t/* EXISTS */\n+\t\tsb = new StringBuffer();\n+\t\tsb.append(\"select * from a \");\n+\t\tsb.append(\"where exists \");\n+\t\tsb.append(\"(select bb from (select bb from b) p where a.bb=p.bb)\");\n+\t\trs = s.executeQuery(sb.toString());\n+\t\texpectedRows = new String [][] {{\"1\",\"1\"}};\t\t\t\t\t\t\t\t\t\t\n+\t\tJDBC.assertUnorderedResultSet(rs, expectedRows);\t\n+\t\t\n \t\t/*\n \t\t * Clean up the tables used.\n \t\t */\t\t\t\t\n@@ -363,6 +390,9 @@ public void testBasicOperations()\n \t\ts.executeUpdate(\"drop table employees\");\n \t\ts.executeUpdate(\"drop table departments\");\t\t\t\n \t\t\n+\t\ts.executeUpdate(\"drop table a\");\t\n+\t\ts.executeUpdate(\"drop table b\");\t\n+\t\t\n \t\ts.close();\n \t}\n ",
                "raw_url": "https://github.com/apache/derby/raw/16164d57a7a25381b85671379a516fee80b845ac/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NestedWhereSubqueryTest.java",
                "sha": "987d85b03dd53d7e47daadce648a7fda06fa2571",
                "status": "modified"
            }
        ],
        "message": "DERBY-3321: NullPointerException for 'NOT EXISTS' with nested subquery\nChecks fromList for a FromSubquery using a CollectNodesVistior.\nThe value of bindTargetListOnly is based on the contents of the visitor. \nPatch contributed by Thomas Nielsen\nPatch file: d3321.diff\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@634316 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/c3df437ba649c5427e68beaebae51499f6fa201d",
        "patched_files": [
            "SelectNode.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "NestedWhereSubqueryTest.java"
        ]
    },
    "derby_1c31b3a": {
        "bug_id": "derby_1c31b3a",
        "commit": "https://github.com/apache/derby/commit/1c31b3a13123938cc060c4b9e440127253a90163",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/derby/blob/1c31b3a13123938cc060c4b9e440127253a90163/java/engine/org/apache/derby/impl/io/DirStorageFactory4.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/io/DirStorageFactory4.java?ref=1c31b3a13123938cc060c4b9e440127253a90163",
                "deletions": 2,
                "filename": "java/engine/org/apache/derby/impl/io/DirStorageFactory4.java",
                "patch": "@@ -52,9 +52,14 @@ public DirStorageFactory4()\n      */\n     StorageFile newPersistentFile( String path)\n     {\n+        String dir = dataDirectory;\n+        if (canonicalName != null && path != null && home != null && \n+                !path.startsWith(home)) {\n+            dir = canonicalName;\n+        }\n         if( path == null)\n-            return new DirFile4( dataDirectory, rwsOK);\n-        return new DirFile4(dataDirectory, path, rwsOK);\n+            return new DirFile4(dir, rwsOK);\n+        return new DirFile4(dir, path, rwsOK);\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/derby/raw/1c31b3a13123938cc060c4b9e440127253a90163/java/engine/org/apache/derby/impl/io/DirStorageFactory4.java",
                "sha": "8421f972de3ef5a1b504e6a8676ad97d2ce9b7dd",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/derby/blob/1c31b3a13123938cc060c4b9e440127253a90163/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java?ref=1c31b3a13123938cc060c4b9e440127253a90163",
                "deletions": 2,
                "filename": "java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java",
                "patch": "@@ -1436,8 +1436,8 @@ are active and calls bootPersistentServices(PersistentService)\n \t\tto boot all the services that that provider knows about.\n \t*/\n \tprotected void bootPersistentServices() {\n-\t\tfor (Enumeration e = new ProviderEnumeration( applicationProperties); ; ) {\n-\n+\t\tEnumeration e = new ProviderEnumeration( applicationProperties);\n+\t\twhile (e.hasMoreElements()) {\n \t\t\tPersistentService provider = (PersistentService) e.nextElement();\n \t\t\tbootProviderServices(provider);\n \t\t}",
                "raw_url": "https://github.com/apache/derby/raw/1c31b3a13123938cc060c4b9e440127253a90163/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java",
                "sha": "c13722858e0a056f226c33d319b6fcbd56fafb81",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/derby/blob/1c31b3a13123938cc060c4b9e440127253a90163/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java?ref=1c31b3a13123938cc060c4b9e440127253a90163",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java",
                "patch": "@@ -164,6 +164,7 @@ public static void main(String[] args) throws Exception {\n \n         //Filter to suppress absould paths in error message for roll forward recovery tests \n         searchStrings.addElement(\"Directory.*.wombat.already.exists\");\n+        searchStrings.addElement(\"Directory.*.extinout/crwombatlog/log.*.exists\");\n \n         // Filter for \"DB2ConnectionCorrelator\" text that can be printed as\n         // part of some JCC error messages.\n@@ -233,6 +234,7 @@ public static void main(String[] args) throws Exception {\n             subStrings.addElement(\"-----\"); \n         }\n         subStrings.addElement(\"Directory DBLOCATION/wombat already exists\");\n+        subStrings.addElement(\"Directory 'extinout<sp>crwombatlog<sp>log' exists\");\n         // ignore the 'DB2ConnectionCorrelator' thing altogether.\n         subStrings.addElement(\"\");\n \t\t// Filter for SAX exception name diffs between jvms.",
                "raw_url": "https://github.com/apache/derby/raw/1c31b3a13123938cc060c4b9e440127253a90163/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java",
                "sha": "ce1dc6dadcc87ec7a2a166d469eebcd0827dfa7f",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/derby/blob/1c31b3a13123938cc060c4b9e440127253a90163/java/testing/org/apache/derbyTesting/functionTests/suites/storemore.runall",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/suites/storemore.runall?ref=1c31b3a13123938cc060c4b9e440127253a90163",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/suites/storemore.runall",
                "patch": "@@ -35,3 +35,4 @@ store/OnlineBackupTest3.java\n store/onlineBackupTest4.sql\n store/BackupPathTests.java\n store/LogDeviceTest.java\n+store/BootAllTest.junit",
                "raw_url": "https://github.com/apache/derby/raw/1c31b3a13123938cc060c4b9e440127253a90163/java/testing/org/apache/derbyTesting/functionTests/suites/storemore.runall",
                "sha": "0d430a8aef598db472753d02fe69d990614d56b6",
                "status": "modified"
            },
            {
                "additions": 144,
                "blob_url": "https://github.com/apache/derby/blob/1c31b3a13123938cc060c4b9e440127253a90163/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootAllTest.java",
                "changes": 144,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootAllTest.java?ref=1c31b3a13123938cc060c4b9e440127253a90163",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/store/BootAllTest.java",
                "patch": "@@ -0,0 +1,144 @@\n+/*\n+\n+   Derby - Class org.apache.derbyTesting.functionTests.tests.store.BootAllTest\n+\n+   Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+\n+ */\n+\n+package org.apache.derbyTesting.functionTests.tests.store;\n+\n+import org.apache.derbyTesting.functionTests.util.BaseTestCase;\n+import org.apache.derbyTesting.functionTests.util.TestUtil;\n+\n+import junit.framework.*;\n+import java.sql.*;\n+import java.util.Properties;\n+import java.util.Arrays;\n+\n+/**\n+ * Tests for the system property \"derby.system.bootAll\"\n+ *\n+ * DERBY-1296 - Setting property derby.system.bootAll causes an Exception\n+ * \n+ */\n+public class BootAllTest  extends BaseTestCase {\n+\n+    /** JDBC Connection */\n+    private Connection con;\n+    private Driver driver;\n+    private String databases[] = new String[] {\"wombat1\", \"wombat2\", \"wombat3\"};\n+    \n+    final static String DATABASE_SHUT_DOWN = \"08006\";\n+    final static String ALL_DATABASES_SHUT_DOWN = \"XJ015\";\n+\n+    /**\n+     * Creates a new instance of BootAllTest\n+     */\n+    public BootAllTest(String name) {\n+        super(name);\n+    }\n+\n+    /**\n+     * Create the databases\n+     */\n+    public void setUp() throws Exception {\n+        for (int i = 0; i < databases.length; i++) {\n+            con = CONFIG.getConnection(databases[i]);\n+            con.close();\n+            try {\n+                con = CONFIG.\n+                        getConnection(databases[i] + \";shutdown=true\");\n+            } catch (SQLException se) {\n+                assertEquals(\"Expected exception on setUp \" + se.getSQLState(), \n+                        DATABASE_SHUT_DOWN, se.getSQLState());\n+            }\n+        }\n+        String url = CONFIG.getJDBCUrl(\"\");\n+        driver = DriverManager.getDriver(url);\n+        DriverManager.deregisterDriver(driver);\n+        try {\n+            driver.connect(url + \";shutdown=true\", null);\n+        } catch (SQLException se) {\n+            assertEquals(\"Expected exception on tearDown \" + se.getSQLState(), \n+                    ALL_DATABASES_SHUT_DOWN, se.getSQLState());\n+        }\n+        System.runFinalization();\n+        System.gc();\n+    }\n+\n+    /**\n+     * Shutdown all databases\n+     */\n+    public void tearDown() throws Exception {\n+        String driverName = CONFIG.getJDBCClient().getJDBCDriverName();\n+        Class.forName(driverName);\n+        println(\"Teardown of: \" + getName());\n+        try {\n+            con = CONFIG.\n+                    getConnection(\";shutdown=true\");\n+        } catch (SQLException se) {\n+            assertEquals(\"Expected exception on tearDown \" + se.getSQLState(), \n+                    ALL_DATABASES_SHUT_DOWN, se.getSQLState());\n+        }\n+    }\n+\n+    /**\n+     * DERBY-1296 - Setting property derby.system.bootAll causes an Exception\n+     *\n+     * Check that setting the system property \"derby.system.bootAll\" will not \n+     * cause an exception when used in combination with the system property\n+     * \"derby.system.home\".\n+     *\n+     * The property \"derby.system.home\" is set by default for all tests and does\n+     * not need to be explicitly set in this test.\n+     */\n+    public void testSettingBootAllPropertyWithHomePropertySet() \n+            throws Exception \n+    {\n+        String returnedDatabases[] = null;\n+\n+        setSystemProperty(\"derby.system.bootAll\", \"true\");\n+\n+        String driverName = CONFIG.getJDBCClient().getJDBCDriverName();\n+        String url = CONFIG.getJDBCUrl(\"\");\n+\n+        Class.forName(driverName).newInstance();\n+        DriverManager.registerDriver(driver);\n+\n+        Driver driver = DriverManager.getDriver(url);\n+\n+        DriverPropertyInfo[] attributes = driver.getPropertyInfo(url, null);\n+        for (int i = 0; i < attributes.length; i++) {\n+            if (attributes[i].name.equalsIgnoreCase(\"databaseName\")) {\n+                returnedDatabases = attributes[i].choices;\n+            }\n+        }\n+\n+        Arrays.sort(returnedDatabases);\n+\n+        assertEquals(\"The number of databases should be\", \n+                databases.length, \n+                returnedDatabases.length);\n+\n+        for (int i = 0; i < databases.length; i++) {\n+            assertEquals(\"Database names should be\", \n+                    databases[i], \n+                    returnedDatabases[i]);\n+        }\n+\n+    }\n+    \n+}",
                "raw_url": "https://github.com/apache/derby/raw/1c31b3a13123938cc060c4b9e440127253a90163/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootAllTest.java",
                "sha": "9e7c5c25ec80ef335100c33d58659e35bfb9ad8c",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/derby/blob/1c31b3a13123938cc060c4b9e440127253a90163/java/testing/org/apache/derbyTesting/functionTests/tests/store/build.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/store/build.xml?ref=1c31b3a13123938cc060c4b9e440127253a90163",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/store/build.xml",
                "patch": "@@ -65,6 +65,7 @@\n       <classpath>\n         <!--pathelement location=\"${oro}\"/-->\n         <pathelement path=\"${compile.classpath}\"/>\n+        <pathelement path=\"${junit}\"/>\n       </classpath>\n       <include name=\"${this.dir}/*.java\"/>\n       <exclude name=\"${this.dir}/bootLock.java\"/>",
                "raw_url": "https://github.com/apache/derby/raw/1c31b3a13123938cc060c4b9e440127253a90163/java/testing/org/apache/derbyTesting/functionTests/tests/store/build.xml",
                "sha": "9383a710ccdc6b98fddad1d1a8e3997f41526341",
                "status": "modified"
            },
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/derby/blob/1c31b3a13123938cc060c4b9e440127253a90163/java/testing/org/apache/derbyTesting/functionTests/util/TestConfiguration.java",
                "changes": 49,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/util/TestConfiguration.java?ref=1c31b3a13123938cc060c4b9e440127253a90163",
                "deletions": 7,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/util/TestConfiguration.java",
                "patch": "@@ -127,7 +127,7 @@ public Object run() {\n      */\n     private String createJDBCUrlWithDatabaseName(String name) {\n         if (jdbcClient == JDBCClient.EMBEDDED) {\n-            return jdbcClient.getUrlBase() + dbName;\n+            return jdbcClient.getUrlBase() + name;\n         } else {\n             return jdbcClient.getUrlBase() + hostName + \":\" + port + \"/\" + name;\n         }\n@@ -216,23 +216,40 @@ public int getPort() {\n      */\n     public Connection getDefaultConnection()\n         throws SQLException {\n+        return getConnection(getDatabaseName());\n+    }\n+    \n+    /**\n+     * Get connection to a database.\n+     * If the database does not exist, it will be created.\n+     * A default username and password will be used for the connection.\n+     *\n+     * @param databaseName database to connect to\n+     *\n+     * @return connection to default database.\n+     */\n+    public Connection getConnection (String databaseName) throws SQLException {\n         Connection con = null;\n         JDBCClient client =getJDBCClient();\n         if (HAVE_DRIVER) {            \n             loadJDBCDriver(client.getJDBCDriverName());\n             if (!isSingleLegXA()) {\n                 con = DriverManager.getConnection(\n-                        getJDBCUrl() + \";create=true\",\n+                        getJDBCUrl(databaseName) + \";create=true\",\n                         getUserName(),\n                         getUserPassword());\n             }\n             else {\n-                con = TestDataSourceFactory.getXADataSource().getXAConnection (getUserName(),\n-                            getUserPassword()).getConnection();                \n+                Properties attrs = \n+                        getDataSourcePropertiesForDatabase(databaseName);\n+                con = TestDataSourceFactory.getXADataSource(attrs).\n+                        getXAConnection (getUserName(), \n+                        getUserPassword()).getConnection();\n             }\n         } else {\n             //Use DataSource for JSR169\n-            con = TestDataSourceFactory.getDataSource().getConnection();\n+            Properties attrs = getDataSourcePropertiesForDatabase(databaseName);\n+            con = TestDataSourceFactory.getDataSource(attrs).getConnection();\n         }\n         return con;\n     }\n@@ -390,16 +407,34 @@ public boolean isSingleLegXA () {\n      * connect to the default database\n      */\n     public static Properties getDefaultDataSourceProperties() {\n+        return getDataSourcePropertiesForDatabase(\n+                DERBY_TEST_CONFIG.getDatabaseName());\n+    }\n+    \n+    /**\n+     * Generate properties which can be set on a\n+     * <code>DataSource</code> in order to connect to a given\n+     * database.\n+     *\n+     * @param databaseName database to connect to\n+     *\n+     * @return a <code>Properties</code> object containing server\n+     * name, port number, database name and other attributes needed to\n+     * connect to the database\n+     */\n+    public static Properties getDataSourcePropertiesForDatabase\n+            (String databaseName) \n+    {\n         Properties attrs = new Properties();\n         if (!(DERBY_TEST_CONFIG.getJDBCClient() == JDBCClient.EMBEDDED)) {\n             attrs.setProperty(\"serverName\", DERBY_TEST_CONFIG.getHostName());\n             attrs.setProperty(\"portNumber\", Integer.toString(DERBY_TEST_CONFIG.getPort()));\n         }\n-        attrs.setProperty(\"databaseName\", DERBY_TEST_CONFIG.getDatabaseName());\n+        attrs.setProperty(\"databaseName\", databaseName);\n         attrs.setProperty(\"connectionAttributes\", \"create=true\");\n         return attrs;\n     }\n-    \n+\n     /**\n      * Load the specified JDBC driver\n      *",
                "raw_url": "https://github.com/apache/derby/raw/1c31b3a13123938cc060c4b9e440127253a90163/java/testing/org/apache/derbyTesting/functionTests/util/TestConfiguration.java",
                "sha": "247fe514c966c26cbb3e1a9b3f2848d2aa099fcb",
                "status": "modified"
            }
        ],
        "message": "DERBY-1296 Setting property derby.system.bootAll causes NullPointerException in BaseMonitor.bootProviderServices. Fix and test contributed by Fernanda Pizzorno\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@425388 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/5d18b03d2564d69acd0949001cc25b0199f3d99d",
        "patched_files": [
            "DirStorageFactory4.java",
            "BaseMonitor.java",
            "build.xml",
            "Sed.java",
            "storemore.runall",
            "Configuration.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "BootAllTest.java",
            "TestConfiguration.java"
        ]
    },
    "derby_1d4b49f": {
        "bug_id": "derby_1d4b49f",
        "commit": "https://github.com/apache/derby/commit/1d4b49f7545176a9063a2f193ca4a88888b51091",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/derby/blob/1d4b49f7545176a9063a2f193ca4a88888b51091/java/engine/org/apache/derby/impl/sql/compile/ConstantNode.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/ConstantNode.java?ref=1d4b49f7545176a9063a2f193ca4a88888b51091",
                "deletions": 1,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/ConstantNode.java",
                "patch": "@@ -282,7 +282,11 @@ protected boolean isEquivalent(ValueNode o) throws StandardException\n \t{\n \t\tif (isSameNodeType(o)) {\n \t\t\tConstantNode other = (ConstantNode)o;\n-\t\t\treturn other.getValue().compare(getValue()) == 0;\n+\t\t\t\n+\t\t\t// value can be null which represents a SQL NULL value.\n+\t\t\treturn ( (other.getValue() == null && getValue() == null) || \n+\t\t\t\t\t (other.getValue() != null && \n+\t\t\t\t\t\t\t other.getValue().compare(getValue()) == 0) );\n \t\t}\n \t\treturn false;\n \t}",
                "raw_url": "https://github.com/apache/derby/raw/1d4b49f7545176a9063a2f193ca4a88888b51091/java/engine/org/apache/derby/impl/sql/compile/ConstantNode.java",
                "sha": "7dc5577561e70dfe6b33fcdb02bad5aa991042d2",
                "status": "modified"
            },
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/derby/blob/1d4b49f7545176a9063a2f193ca4a88888b51091/java/engine/org/apache/derby/impl/sql/compile/ValueNode.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/ValueNode.java?ref=1d4b49f7545176a9063a2f193ca4a88888b51091",
                "deletions": 0,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/ValueNode.java",
                "patch": "@@ -1334,7 +1334,45 @@ public boolean isParameterNode()\n \t * Tests if this node is equivalent to the specified ValueNode. Two \n \t * ValueNodes are considered equivalent if they will evaluate to the same\n \t * value during query execution. \n+\t * <p> \n+\t * This method provides basic expression matching facility for the derived \n+\t * class of ValueNode and it is used by the language layer to compare the \n+\t * node structural form of the two expressions for equivalence at bind \n+\t * phase.  \n+\t *  <p>\n+\t * Note that it is not comparing the actual row values at runtime to produce \n+\t * a result; hence, when comparing SQL NULLs, they are considered to be \n+\t * equivalent and not unknown.  \n+\t *  <p>\n+\t * One usage case of this method in this context is to compare the select \n+\t * column expression against the group by expression to check if they are \n+\t * equivalent.  e.g.:\n+\t *  <p>\n+\t * SELECT c1+c2 FROM t1 GROUP BY c1+c2   \n+\t *  <p>\n+\t * In general, node equivalence is determined by the derived class of \n+\t * ValueNode.  But they generally abide to the rules below:\n+\t *  <ul>\n+\t * <li>The two ValueNodes must be of the same node type to be considered \n+\t *   equivalent.  e.g.:  CastNode vs. CastNode - equivalent (if their args \n+\t *   also match), ColumnReference vs CastNode - not equivalent.\n+\t *   \n+\t * <li>If node P contains other ValueNode(s) and so on, those node(s) must \n+\t *   also be of the same node type to be considered equivalent.\n+\t *   \n+\t * <li>If node P takes a parameter list, then the number of arguments and its \n+\t *   arguments for the two nodes must also match to be considered \n+\t *   equivalent.  e.g.:  CAST(c1 as INTEGER) vs CAST(c1 as SMALLINT), they \n+\t *   are not equivalent.\n+\t *   \n+\t * <li>When comparing SQL NULLs in this context, they are considered to be \n+\t *   equivalent.\n \t * \n+\t * <li>If this does not apply or it is determined that the two nodes are not \n+\t *   equivalent then the derived class of this method should return false; \n+\t *   otherwise, return true.\n+\t * </ul>   \n+\t *   \n \t * @param other the node to compare this ValueNode against.\n \t * @return <code>true</code> if the two nodes are equivalent, \n \t * <code>false</code> otherwise.",
                "raw_url": "https://github.com/apache/derby/raw/1d4b49f7545176a9063a2f193ca4a88888b51091/java/engine/org/apache/derby/impl/sql/compile/ValueNode.java",
                "sha": "859038242252626a79896df325bf6e4e1a751539",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/derby/blob/1d4b49f7545176a9063a2f193ca4a88888b51091/java/testing/org/apache/derbyTesting/functionTests/master/groupBy.out",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/groupBy.out?ref=1d4b49f7545176a9063a2f193ca4a88888b51091",
                "deletions": 24,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/groupBy.out",
                "patch": "@@ -636,28 +636,4 @@ select 10,avg(c) from t having 1 < 2;\n 10         |2          \n ij> drop table t;\n 0 rows inserted/updated/deleted\n-ij> -- DERBY-2008\n--- test SUBSTR with 2 args with GROUP BY expression\n-create table dt (vc varchar(30));\n-0 rows inserted/updated/deleted\n-ij> insert into dt values ('1928-09-21'), ('1903-12-08');\n-2 rows inserted/updated/deleted\n-ij> -- ok\n-select substr(vc, 3) from dt group by substr(vc, 3);\n-1                             \n-------------------------------\n-03-12-08                      \n-28-09-21                      \n-ij> select substr(vc, 3, 4) from dt group by substr(vc, 3, 4);\n-1   \n-----\n-03-1\n-28-0\n-ij> -- expect errors\n-select substr(vc, 3, 4) from dt group by substr(vc, 3);\n-ERROR 42Y30: The SELECT list of a grouped query contains at least one invalid expression. If a SELECT list has a GROUP BY, the list may only contain valid grouping expressions and valid aggregate expressions.  \n-ij> select substr(vc, 3) from dt group by substr(vc, 3, 4);\n-ERROR 42Y30: The SELECT list of a grouped query contains at least one invalid expression. If a SELECT list has a GROUP BY, the list may only contain valid grouping expressions and valid aggregate expressions.  \n-ij> drop table dt;\n-0 rows inserted/updated/deleted\n ij> ",
                "raw_url": "https://github.com/apache/derby/raw/1d4b49f7545176a9063a2f193ca4a88888b51091/java/testing/org/apache/derbyTesting/functionTests/master/groupBy.out",
                "sha": "3ce5985985c73ded262fc0e47459e4c6fd9293b4",
                "status": "modified"
            },
            {
                "additions": 115,
                "blob_url": "https://github.com/apache/derby/blob/1d4b49f7545176a9063a2f193ca4a88888b51091/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java",
                "changes": 118,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java?ref=1d4b49f7545176a9063a2f193ca4a88888b51091",
                "deletions": 3,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java",
                "patch": "@@ -36,7 +36,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n public class GroupByExpressionTest extends BaseJDBCTestCase\n {\n \n-    private static String[][] TABLES = { \n+\tprivate static String[][] TABLES = { \n         {\"test\", \"create table test (c1 int, c2 int, c3 int, c4 int)\"},\n         {\"coal\", \"create table coal (vc1 varchar(2), vc2 varchar(2))\"},\n         {\"alltypes\", \n@@ -45,7 +45,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n             \" d double precision, r real, \" + \n             \" dt date, t time, ts timestamp, \" +\n             \" b char(2) for bit data, bv varchar(8) for bit data, \" +\n-            \" lbv long varchar for bit data, dc decimal(5,2))\"}};\n+            \" lbv long varchar for bit data, dc decimal(5,2))\"},\n+        {\"t1\", \"create table t1 (c1 varchar(30))\"},\n+        {\"t2\", \"create table t2 (c1 varchar(10))\"},\n+        {\"t3\", \"create table t3 (c1 int, c2 int)\"}\n+    };\n+\n     private static String[][] FUNCTIONS = {\n         {\"r\", \"create function r() returns double external name \" +\n             \"'java.lang.Math.random' language java parameter style java\"}};\n@@ -182,6 +187,81 @@ public void testMiscExpressions() throws Exception\n                         {\"dupl\", new Integer(14)},\n                         {\"good\", new Integer(1)}});\n \n+        // DERBY-2008 \n+        // substr (2-args)\n+        verifyQueryResults(\n+                \"substr-Q1\",\n+                \"select substr(c1, 3) from t1 group by substr(c1, 3)\",\n+                new String[][] { {\"03-12-08\"},\n+                                 {\"28-09-21\"} });\n+        // substr (3-args)\n+        verifyQueryResults(\n+                \"substr-Q2\",\n+                \"select substr(c1, 3, 4) from t1 group by substr(c1, 3, 4)\",\n+                new String[][] { {\"03-1\"},\n+                                 {\"28-0\"} });\n+\n+        // ltrim\n+        verifyQueryResults(\n+                \"ltrim\",\n+                \"select ltrim(c1) from t2 group by ltrim(c1)\",\n+                new String[][] { {\"123 \"},\n+                                 {\"abc \"} });\n+\n+        // rtrim\n+        verifyQueryResults(\n+                \"rtrim\",\n+                \"select rtrim(c1) from t2 group by rtrim(c1)\",\n+                new String[][] { {\"123\"},\n+                                 {\"abc\"} });\n+\n+        // locate (2-args)\n+        verifyQueryResults(\n+                \"locate-Q1\",\n+                \"select locate(c1, 'abc') from t2 group by locate(c1, 'abc')\",\n+                new int[][] { { 0 }, \n+                              { 1 } });\n+\n+        // locate (3-args)\n+        verifyQueryResults(\n+                \"locate-Q2\",\n+                \"select locate(c1, 'abc', 1) from t2 group by locate(c1, 'abc',1)\",\n+                new int[][] { { 0 }, \n+                              { 1 } });\n+        \n+        // cast with NULL\n+        verifyQueryResults(\n+                \"cast-Q2\",\n+                \"select (cast (NULL as INTEGER)) from t2 group by (cast (NULL as INTEGER))\",\n+                new Object[][] { { null } } );\n+\n+        // DERBY-2014\n+        // nullif\n+        verifyQueryResults(\n+                \"nullif-Q1\",\n+                \"select nullif(c1,c1) from t3 group by nullif(c1,c1)\",\n+                new Object[][] { { null } } );\n+\n+        verifyQueryResults(\n+                \"nullif-Q2\",\n+                \"select nullif(c1,c2) from t3 group by nullif(c1,c2)\",\n+                new Object[][] { { new Integer(5) }, \n+                                 { null } });\n+\n+        verifyQueryResults(\n+                \"nullif-Q3\",\n+                \"select nullif(c1,10) from t3 group by nullif(c1,10)\",\n+                new Object[][] { { new Integer(1) },\n+                                 { new Integer(2) },\n+                                 { new Integer(3) },\n+                                 { new Integer(5) },\n+                                 { null } });\n+\n+        verifyQueryResults(\n+                \"nullif-Q4\",\n+                \"select nullif(1,c1) from t3 group by nullif(1,c1)\",\n+                new Object[][] { { new Integer(1) }, \n+                                 { null } });\n     }\n     \n     public void testExtractOperator() throws Exception\n@@ -263,6 +343,34 @@ public void testNegative()\n         assertCompileError(\n                 \"42Y30\",\n                 \"select substr(c, 3, 4) from alltypes group by substr(v, 3, 4)\");\n+\n+        // DERBY-2008\n+        // invalid grouping expression \n+        assertCompileError(\n+                \"42Y30\",\n+                \"select substr(c1, 3, 4) from t1 group by substr(c1, 3)\");\n+        assertCompileError(\n+                \"42Y30\",\n+                \"select substr(c1, 3) from t1 group by substr(c1, 3, 4)\");\n+        assertCompileError(\n+                \"42Y30\",\n+                \"select locate(c1, 'abc') from t2 group by locate(c1, 'abc',3)\");\n+        assertCompileError(\n+                \"42Y30\",\n+                \"select locate(c1, 'abc',2) from t2 group by locate(c1, 'abc')\");\n+        assertCompileError(\n+                \"42Y30\",\n+                \"select locate(c1, 'abc',2) from t2 group by locate(c1, 'abc',3)\");\n+\n+        // DERBY-2014\n+        // invalid grouping expression\n+        assertCompileError(\n+                \"42Y30\",\n+                \"select nullif(c1,c2) from t3 group by nullif(c2,c1)\");\n+        assertCompileError(\n+                \"42Y30\",\n+                \"select nullif(c1,100) from t3 group by nullif(c1,200)\");\n+\n         // aggregates in group by list.\n         assertCompileError(\n                 \"42Y26\",\n@@ -463,7 +571,11 @@ public void setUp() throws Exception\n                     \" date('1992-03-04'), time('12:30:42'), \" + \n                     \" timestamp('1992-03-04 12:30:42'), \" +\n                     \" X'12af', X'1111111111111111', X'1234', 111.11) \" );\n-                \n+\n+                s.execute(\"insert into t1 values ('1928-09-21'), ('1903-12-08')\");\n+                s.execute(\"insert into t2 values '123 ', 'abc ', '123', 'abc'\") ;\n+                s.execute(\"insert into t3 values (1,1), (2,2), (2,2), (3,3), (null, null), (5,100)\");\n+\n                 s.close();\n                 c.commit();\n                 c.close();",
                "raw_url": "https://github.com/apache/derby/raw/1d4b49f7545176a9063a2f193ca4a88888b51091/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java",
                "sha": "abb8eb1318638d4f106a75e7740cbdddcc86a6cc",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/derby/blob/1d4b49f7545176a9063a2f193ca4a88888b51091/java/testing/org/apache/derbyTesting/functionTests/tests/lang/groupBy.sql",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/groupBy.sql?ref=1d4b49f7545176a9063a2f193ca4a88888b51091",
                "deletions": 12,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/groupBy.sql",
                "patch": "@@ -360,15 +360,3 @@ select 10 from t having 1 < 2;\n -- ok, gives one row\n select 10,avg(c) from t having 1 < 2;\n drop table t;\n-\n--- DERBY-2008\n--- test SUBSTR with 2 args with GROUP BY expression\n-create table dt (vc varchar(30));\n-insert into dt values ('1928-09-21'), ('1903-12-08');\n--- ok\n-select substr(vc, 3) from dt group by substr(vc, 3); \n-select substr(vc, 3, 4) from dt group by substr(vc, 3, 4); \n--- expect errors\n-select substr(vc, 3, 4) from dt group by substr(vc, 3); \n-select substr(vc, 3) from dt group by substr(vc, 3, 4);\n-drop table dt;",
                "raw_url": "https://github.com/apache/derby/raw/1d4b49f7545176a9063a2f193ca4a88888b51091/java/testing/org/apache/derbyTesting/functionTests/tests/lang/groupBy.sql",
                "sha": "a3b734f25d1fdccb1ebbbbdacf7194610c84fc8c",
                "status": "modified"
            }
        ],
        "message": "DERBY-2014: NullPointerException with NULLIF in GROUP BY clause\n\nThis change was contributed by Yip Ng (yipng168@gmail.com)\n\nThe NPE happens in isEquivalent() method where it does not handle\nvalue is null. (same symptom as DERBY-2008) and the patch addresses\nthis + additonal testcases.\n\nThe isEquivalent() method is used to compare the select column\nagainst the group by with expression. Note that it is comparing\nthe structural form of the two expressions for equivalence at bind phase\nand not comparing the actual row values at runtime to produce a result.\n\nThis patch converts all the tests in the previous patch into junit.\nAlso the javadoc for ValueNode.isEquivalent() method has been updated.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@471459 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/d3965ed0cc60591a0b467f41eaf4cbf1bcc82dc5",
        "patched_files": [
            "groupBy.sql",
            "groupBy.out",
            "ValueNode.java",
            "ConstantNode.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "GroupByExpressionTest.java"
        ]
    },
    "derby_2302f2a": {
        "bug_id": "derby_2302f2a",
        "commit": "https://github.com/apache/derby/commit/2302f2a55d00d7acd4eaf7800f5a1660ab3a7a1d",
        "file": [
            {
                "additions": 101,
                "blob_url": "https://github.com/apache/derby/blob/2302f2a55d00d7acd4eaf7800f5a1660ab3a7a1d/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java",
                "changes": 101,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java?ref=2302f2a55d00d7acd4eaf7800f5a1660ab3a7a1d",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java",
                "patch": "@@ -44,7 +44,108 @@ public InsertTest(String name) {\n     public static Test suite() {\n         return TestConfiguration.defaultSuite(InsertTest.class);\n     }\n+    \n+    public void testDerby6786Case1() throws SQLException {\n+        Statement s = createStatement();\n+        s.execute(\"CREATE TABLE K1 (K VARCHAR(64), S DECIMAL)\");\n+        s.execute(\"CREATE TABLE K2 (K VARCHAR(64), S DECIMAL)\");\n+        s.execute(\"CREATE TABLE T  (S DECIMAL)\");\n+        s.execute(\"INSERT INTO K1 VALUES ('110007', 224)\");\n+        s.execute(\"INSERT INTO K2 VALUES ('110007', 361)\");\n+        //Run just plain select\n+        derby6786QueriesToRun(s, \"\");\n+        //Run insert into ... select\n+        derby6786QueriesToRun(s, \"insert into t \");\n+        s.execute(\"DROP   TABLE K1\");\n+        s.execute(\"DROP   TABLE K2\");\n+        s.execute(\"DROP   TABLE T\");\n+    }\n+\n+    public void testDerby6786InsertIntoSelectCase2() throws SQLException {\n+        Statement s = createStatement();\n+        s.execute(\"CREATE TABLE K1 (K VARCHAR(64), S DECIMAL)\");\n+        s.execute(\"CREATE TABLE K2 (K VARCHAR(64), S DECIMAL)\");\n+        s.execute(\"CREATE TABLE T  (S DECIMAL)\");\n+        s.execute(\"INSERT INTO K1 VALUES ('110007', 224)\");\n+        s.execute(\"INSERT INTO K2 VALUES ('110007', null)\");\n+        //Run just plain select\n+        derby6786QueriesToRun(s, \"\");\n+        //Run insert into ... select\n+        derby6786QueriesToRun(s, \"insert into t \");\n+        s.execute(\"DROP   TABLE K1\");\n+        s.execute(\"DROP   TABLE K2\");\n+        s.execute(\"DROP   TABLE T\");\n+    }\n \n+    //DERBY-6786(NullPointerException in INSERT INTO statement with multiple subselects)\n+    //Following test case has zz against its name and hence it won't run. \n+    // This is because some queries in the test can cause NPE. Once \n+    // DERBY-6786 is fixed, following test should be enabled by removing\n+    // zz.\n+    public void zztestDerby6786InsertIntoSelectCase3() throws SQLException {\n+        Statement s = createStatement();\n+        s.execute(\"CREATE TABLE K1 (K VARCHAR(64), S DECIMAL)\");\n+        s.execute(\"CREATE TABLE K2 (K VARCHAR(64), S DECIMAL)\");\n+        s.execute(\"CREATE TABLE T  (S DECIMAL)\");\n+        s.execute(\"INSERT INTO K1 VALUES ('110007', 224)\");\n+        s.execute(\"INSERT INTO K2 VALUES ('110019', null)\");\n+        //Run just plain select\n+        derby6786QueriesToRun(s, \"\");\n+        //Run insert into ... select. Running insert will into can result into\n+        // NPE for some of the queries until DERBY-6786 is fixed.\n+        derby6786QueriesToRun(s, \"insert into t \");\n+        s.execute(\"DROP   TABLE K1\");\n+        s.execute(\"DROP   TABLE K2\");\n+        s.execute(\"DROP   TABLE T\");\n+    }\n+    \n+    private void derby6786QueriesToRun(Statement s, String insertInto) throws SQLException {\n+        //following left join works\n+        s.execute(insertInto +\n+            \"select erg.* from ( \" +\n+            \"select d1.s from (select k,s from k1) as d1 \" +\n+            \"left join \"+\n+            \"(select k,s from k2) as d2 on d1.k=d2.k\" +\n+            \") as erg \" +\n+            \"where s > 10\");\n+        //DERBY-6786 : following left join can fail if the right table  \n+        // does not have a matching row\n+        s.execute(insertInto +\n+                \"select erg.* from ( \" +\n+                \"select d2.s from (select k,s from k1) as d1 \" +\n+                \"left join \"+\n+                \"(select k,s from k2) as d2 on d1.k=d2.k\" +\n+                \") as erg \" +\n+                \"where s > 10\");\n+        //DERBY-6786 : following is another example of left join that can fail \n+        // if the right table does not have a matching row\n+        s.execute(insertInto +\n+                \"select erg.* from ( \" +\n+                \"select d2.s from k1 \" +\n+                \"left join \"+\n+                \"(select k,s from k2) as d2 on k1.k=d2.k\" +\n+                \") as erg \" +\n+                \"where s > 10\");\n+        //DERBY-6786 : following right join can fail if the left table  \n+        // does not have a matching row\n+        s.execute(insertInto +\n+            \"select erg.* from ( \" +\n+            \"select d1.s from (select k,s from k1) as d1 \" +\n+            \"right join \"+\n+            \"(select k,s from k2) as d2 on d1.k=d2.k\" +\n+            \") as erg \" +\n+            \"where s > 10\");\n+        //following right join works\n+        s.execute(insertInto +\n+                \"select erg.* from ( \" +\n+                \"select d2.s from (select k,s from k1) as d1 \" +\n+                \"right join \"+\n+                \"(select k,s from k2) as d2 on d1.k=d2.k\" +\n+                \") as erg \" +\n+                \"where s > 10\");\n+\n+    }\n+    \n     /**\n      * Regression test case for DERBY-4348 where an INSERT INTO .. SELECT FROM\n      * statement would result in a LONG VARCHAR column becoming populated with",
                "raw_url": "https://github.com/apache/derby/raw/2302f2a55d00d7acd4eaf7800f5a1660ab3a7a1d/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java",
                "sha": "1bafeb43a65021c3fabdec0aeccb7864bce532c0",
                "status": "modified"
            }
        ],
        "message": "DERBY-6786(NullPointerException in INSERT INTO statement with multiple subselects)\n\nAdding test casee for DERBY-6786. One test case(zztestDerby6786InsertIntoSelectCase3) which will result into NPE has been disabled. Once DERBY-6786 is fixed, we should enable that test by removing the zz in front of the test name.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1651707 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/314a19ac8bb51ab665c4e72961950ebd69d8bcba",
        "patched_files": [],
        "repo": "derby",
        "unit_tests": [
            "InsertTest.java"
        ]
    },
    "derby_2c140d8": {
        "bug_id": "derby_2c140d8",
        "commit": "https://github.com/apache/derby/commit/2c140d81eb31552064ed43f437ee81362dc39887",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/derby/blob/2c140d81eb31552064ed43f437ee81362dc39887/java/client/org/apache/derby/client/am/PreparedStatement.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/am/PreparedStatement.java?ref=2c140d81eb31552064ed43f437ee81362dc39887",
                "deletions": 3,
                "filename": "java/client/org/apache/derby/client/am/PreparedStatement.java",
                "patch": "@@ -2261,9 +2261,11 @@ void flowExecute(int executeType) throws SqlException {\n         }\n \n         for (int i = 0; i < batchSize; i++) {\n-            parameterMetaData_.clientParamtertype_ = (int[]) parameterTypeList.get(i);\n-            parameters_ = (Object[]) batch_.get(i);\n-\n+            if (parameterMetaData_ != null) {\n+                parameterMetaData_.clientParamtertype_ = (int[]) parameterTypeList.get(i);\n+                parameters_ = (Object[]) batch_.get(i);\n+            }\n+            \n             if (sqlMode_ != isCall__) {\n                 boolean outputExpected;\n                 try {",
                "raw_url": "https://github.com/apache/derby/raw/2c140d81eb31552064ed43f437ee81362dc39887/java/client/org/apache/derby/client/am/PreparedStatement.java",
                "sha": "3e900edd3ce0105412a88a559ce5ebf990f71614",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/derby/blob/2c140d81eb31552064ed43f437ee81362dc39887/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java?ref=2c140d81eb31552064ed43f437ee81362dc39887",
                "deletions": 8,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java",
                "patch": "@@ -92,7 +92,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n  *      try executing a batch which nothing in it.\n  *    - testNoParametersPreparedBatch()\n  *      try executing a batch with no parameters. \n- *      (fails with NullPointerException with NetworkServer. See DERBY-2112\n  *    - testSingleValueSetPreparedBatch()\n  *      try executing a batch which one parameter set in it.\n  *    - testMultipleValueSetPreparedBatch()\n@@ -1017,14 +1016,10 @@ public void testEmptyValueSetPreparedBatch() throws SQLException {\n         commit();\n     }\n     \n-    // try prepared statement batch with just no settable parameters.\n+    // try prepared statement batch without settable parameters.\n     public void testNoParametersPreparedBatch() throws SQLException {\n \n-        // TODO: analyze & implement for NetworkServer when DERBY-2112 is fixed\n-        // test fails with NullPointerException with NetworkServer\n-        // see DERBY-2112\n-        if (!usingEmbedded())\n-            return;\n+        // Note: also tests for fix of NPE of DERBY-2112\n      \n         Statement stmt = createStatement();\n         ResultSet rs;\n@@ -1649,4 +1644,4 @@ else if (usingDerbyNetClient())\n         conn2.rollback();\n         commit();\n     }\n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/derby/raw/2c140d81eb31552064ed43f437ee81362dc39887/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java",
                "sha": "4dd0d6f1cdbb31c07cf05255fbde6be2cca692d1",
                "status": "modified"
            }
        ],
        "message": "DERBY-2112 - fix NPE on executeBatchRequestX when PreparedStatement has no parameters. \n  Fix suggested by reporter, Cesar Devera.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@505700 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/d0b190e48f38f20f4edfd0b2071800769132936c",
        "patched_files": [
            "PreparedStatement.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "PreparedStatementTest.java",
            "BatchUpdateTest.java"
        ]
    },
    "derby_2e2d2ee": {
        "bug_id": "derby_2e2d2ee",
        "commit": "https://github.com/apache/derby/commit/2e2d2ee298dbf29eda79f01dfc9bf03fff3e1ba7",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/derby/blob/2e2d2ee298dbf29eda79f01dfc9bf03fff3e1ba7/java/client/org/apache/derby/client/ClientPooledConnection.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/ClientPooledConnection.java?ref=2e2d2ee298dbf29eda79f01dfc9bf03fff3e1ba7",
                "deletions": 0,
                "filename": "java/client/org/apache/derby/client/ClientPooledConnection.java",
                "patch": "@@ -311,6 +311,13 @@ public synchronized void addConnectionEventListener(\n         if (logWriter_ != null) {\n             logWriter_.traceEntry(this, \"addConnectionEventListener\", listener);\n         }\n+\n+        if (listener == null) {\n+            // Ignore the listener if it is null. Otherwise, an exception is\n+            // thrown when a connection event occurs (DERBY-3307).\n+            return;\n+        }\n+\n         if (eventIterators > 0) {\n             // DERBY-3401: Someone is iterating over the ArrayList, and since\n             // we were able to synchronize on this, that someone is us. Clone",
                "raw_url": "https://github.com/apache/derby/raw/2e2d2ee298dbf29eda79f01dfc9bf03fff3e1ba7/java/client/org/apache/derby/client/ClientPooledConnection.java",
                "sha": "6a2595f3d330e04a77c204b69310e8ea10c8a821",
                "status": "modified"
            },
            {
                "additions": 60,
                "blob_url": "https://github.com/apache/derby/blob/2e2d2ee298dbf29eda79f01dfc9bf03fff3e1ba7/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java",
                "changes": 61,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java?ref=2e2d2ee298dbf29eda79f01dfc9bf03fff3e1ba7",
                "deletions": 1,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java",
                "patch": "@@ -138,6 +138,8 @@ private static Test baseSuite(String postfix) {\n         suite.addTest(new J2EEDataSourceTest(\"testBadConnectionAttributeSyntax\"));\n         suite.addTest(new J2EEDataSourceTest(\"testDescriptionProperty\"));\n         suite.addTest(new J2EEDataSourceTest(\"testConnectionErrorEvent\"));\n+        suite.addTest(new J2EEDataSourceTest(\n+                              \"testConnectionEventListenerIsNull\"));\n         suite.addTest(new J2EEDataSourceTest(\"testReadOnlyToWritableTran\"));\n         suite.addTest(new J2EEDataSourceTest(\"testAutoCommitOnXAResourceStart\"));\n         suite.addTest(new J2EEDataSourceTest(\"testAllDataSources\"));\n@@ -608,7 +610,64 @@ public void testConnectionErrorEvent() throws SQLException, Exception\n         conn = getConnection();\n         conn.close();\n     }\n-    \n+\n+    /**\n+     * Test that event notification doesn't fail when a null listener has\n+     * been registered (DERBY-3307).\n+     */\n+    public void testConnectionEventListenerIsNull() throws SQLException {\n+        ConnectionPoolDataSource cpds =\n+            J2EEDataSource.getConnectionPoolDataSource();\n+        subtestCloseEventWithNullListener(cpds.getPooledConnection());\n+        subtestErrorEventWithNullListener(cpds.getPooledConnection());\n+\n+        XADataSource xads = J2EEDataSource.getXADataSource();\n+        subtestCloseEventWithNullListener(xads.getXAConnection());\n+        subtestErrorEventWithNullListener(xads.getXAConnection());\n+    }\n+\n+    /**\n+     * Test that notification of a close event doesn't fail when the\n+     * listener is null.\n+     */\n+    private void subtestCloseEventWithNullListener(PooledConnection pc)\n+        throws SQLException\n+    {\n+        pc.addConnectionEventListener(null);\n+        // Trigger a close event\n+        pc.getConnection().close();\n+        pc.close();\n+    }\n+\n+    /**\n+     * Test that notification of an error event doesn't fail when the\n+     * listener is null.\n+     */\n+    private void subtestErrorEventWithNullListener(PooledConnection pc)\n+        throws SQLException\n+    {\n+        pc.addConnectionEventListener(null);\n+        Connection c = pc.getConnection();\n+        // Shut down the database to invalidate all connections\n+        getTestConfiguration().shutdownDatabase();\n+        try {\n+            // Should trigger an error event since the connection is no\n+            // longer valid\n+            c.prepareStatement(\"VALUES 1\");\n+            fail(\"Statement should fail after database shutdown\");\n+        } catch (SQLException e) {\n+            if (usingEmbedded()) {\n+                // No current connection is expected on embedded\n+                assertSQLState(\"08003\", e);\n+            } else {\n+                // The client driver reports communication error\n+                assertSQLState(\"08006\", e);\n+            }\n+        }\n+        c.close();\n+        pc.close();\n+    }\n+\n     /**\n      * Test that a PooledConnection can be reused and closed\n      * (separately) during the close event raised by the",
                "raw_url": "https://github.com/apache/derby/raw/2e2d2ee298dbf29eda79f01dfc9bf03fff3e1ba7/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java",
                "sha": "835b5c468de742ec6fd80b6e5c7e25b86d63cf83",
                "status": "modified"
            }
        ],
        "message": "DERBY-3307: NPE in PooledConnction event notification handling if a null listener is added\n\n- Added null check in ClientPooledConnection.addConnectionEventListener().\n\n- Added regression test in J2EEDataSourceTest\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@666040 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/d2291224feae5d74b7d3f589ebf3866f3b51bd43",
        "patched_files": [
            "ClientPooledConnection.java",
            "J2EEDataSource.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "J2EEDataSourceTest.java"
        ]
    },
    "derby_2e4a44e": {
        "bug_id": "derby_2e4a44e",
        "commit": "https://github.com/apache/derby/commit/2e4a44ee331251458ee6be6a67ec77275768b525",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/CodePointNameTable.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/CodePointNameTable.java?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "deletions": 0,
                "filename": "java/drda/org/apache/derby/impl/drda/CodePointNameTable.java",
                "patch": "@@ -70,6 +70,7 @@\n     put (new Integer (CodePoint.MGRDEPRM), \"MGRDEPRM\");\n     put (new Integer (CodePoint.MGRLVLLS), \"MGRLVLLS\");\n     put (new Integer (CodePoint.MGRLVLRM), \"MGRLVLRM\");\n+    put (new Integer (CodePoint.MONITOR), \"MONITOR\");\n     put (new Integer (CodePoint.NBRROW), \"NBRROW\");\n     put (new Integer (CodePoint.OBJNSPRM), \"OBJNSPRM\");\n     put (new Integer (CodePoint.OPNQFLRM), \"OPNQFLRM\");\n@@ -83,6 +84,7 @@\n     put (new Integer (CodePoint.PKGBNARM), \"PKGBNARM\");\n     put (new Integer (CodePoint.PKGBPARM), \"PKGBPARM\");\n     put (new Integer (CodePoint.PKGNAMCSN), \"PKGNAMCSN\");\n+    put (new Integer (CodePoint.PKGNAMCT), \"PKGNAMCT\");\n     put (new Integer (CodePoint.PRCCNVRM), \"PRCCNVRM\");\n     put (new Integer (CodePoint.PRDID), \"PRDID\");\n     put (new Integer (CodePoint.PRDDTA), \"PRDDTA\");\n@@ -91,6 +93,7 @@\n     put (new Integer (CodePoint.QRYBLKCTL), \"QRYBLKCTL\");\n     put (new Integer (CodePoint.QRYBLKRST), \"QRYBLKRST\");\n     put (new Integer (CodePoint.QRYBLKSZ), \"QRYBLKSZ\");\n+    put (new Integer (CodePoint.QRYCLSRLS), \"QRYCLSRLS\");\n     put (new Integer (CodePoint.QRYDSC), \"QRYDSC\");\n     put (new Integer (CodePoint.QRYDTA), \"QRYDTA\");\n     put (new Integer (CodePoint.QRYINSID), \"QRYINSID\");",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/CodePointNameTable.java",
                "sha": "aee22df4b5fa6310cb3533edcd197f3f01038073",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/DDMReader.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/DDMReader.java?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "deletions": 18,
                "filename": "java/drda/org/apache/derby/impl/drda/DDMReader.java",
                "patch": "@@ -285,17 +285,6 @@ protected boolean isCmd() throws DRDAProtocolException, java.io.UnsupportedEncod\n \t\treturn NetworkServerControlImpl.isCmd(val);\n \t}\n \n-\t/**\n-\t * Return buffer \n-\t *\n-\t *\n-\t * @return buffer\n-\t */\n-\tprotected byte [] getBuffer()\n-\t{\n-\t\treturn buffer;\n-\t}\n-\n \t/**\n \t * Read DSS header\n \t * DSS Header format is \n@@ -513,13 +502,9 @@ protected int readLengthAndCodePoint() throws DRDAProtocolException\n \t{\n \t\tensureBLayerDataInBuffer (4, NO_ADJUST_LENGTHS);\n \n-\t\tddmScalarLen =\n-\t\t\t((buffer[pos++] & 0xff) << 8) +\n-\t\t\t((buffer[pos++] & 0xff) << 0);\n-\n-\t\tint codePoint =\n-\t\t\t((buffer[pos++] & 0xff) << 8) +\n-\t\t\t((buffer[pos++] & 0xff) << 0);\n+\t\tddmScalarLen = readCodePoint();\n+\t\tint codePoint = readCodePoint();\n+\t\t\n \t\tif (SanityManager.DEBUG)\n \t\t\ttrace(\"length = \"+ ddmScalarLen + \" codepoint = \" + java.lang.Integer.toHexString(codePoint));\n \t\t// SYNERRCD 0x0D - Object code point index not supported.",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/DDMReader.java",
                "sha": "9311cb4093dcbed337bbb049e8df72c0c5f5fbaa",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/DDMWriter.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/DDMWriter.java?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "deletions": 7,
                "filename": "java/drda/org/apache/derby/impl/drda/DDMWriter.java",
                "patch": "@@ -1720,12 +1720,6 @@ private void sendBytes (java.io.OutputStream socketOutputStream) throws java.io.\n     }\n   }\n \n-\n-\tprivate static int min (int i, int j)\n-\t{\n-\t\treturn (i < j) ? i : j;\n-\t}\n-\n \tprotected String toDebugString(String indent)\n \t{\n \t\tString s = indent + \"***** DDMWriter toDebugString ******\\n\";\n@@ -1815,7 +1809,7 @@ protected void finalizeChain(byte currChainByte,\n \t\t\tagent.trace(\"Sending data\");\n \n \t\tresetChainState();\n-\t\tif (offset != 0) {\n+\t\tif (doesRequestContainData()) {\n \t\t\ttry {\n \t\t\t\tflush(socketOutputStream);\n \t\t\t} catch (java.io.IOException e) {",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/DDMWriter.java",
                "sha": "c047809b1a4e27fb28cf8166e8c19bd5633d16e0",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "deletions": 11,
                "filename": "java/drda/org/apache/derby/impl/drda/DRDAConnThread.java",
                "patch": "@@ -1714,10 +1714,6 @@ private String parseOPNQRY() throws DRDAProtocolException, SQLException\n \t\t\t\t\t// Ignore release of read locks.  Nothing we can do here\n \t\t\t\t\tparseQRYCLSRLS();\n \t\t\t\t\tbreak;\n-\t\t\t\tcase CodePoint.QRYOPTVAL:\n-\t\t\t\t\t// optimize for n rows. Not supported by cloudscape(ignore)\n-\t\t\t\t\tparseQRYOPTVAL();\n-\t\t\t\t\tbreak;\n \t\t\t\t// optional\n \t\t\t\tcase CodePoint.MONITOR:\n \t\t\t\t\tparseMONITOR();\n@@ -1896,12 +1892,6 @@ private int parseQRYCLSRLS() throws DRDAProtocolException\n \t\treturn 0;\n \t}\n \n-\tprivate int parseQRYOPTVAL() throws DRDAProtocolException\n-\t{\n-\t\treader.skipBytes();\n-\t\treturn 0;\n-\t}\n-\n \t/**\n \t * Write a QRYPOPRM - Query Previously opened\n \t * Instance Variables\n@@ -4820,7 +4810,17 @@ private String parseCcsidMBC(int length) throws DRDAProtocolException\n \tprivate String parseCcsidSBC(int length) throws DRDAProtocolException\n \t{\n \t\tString strVal = null;\n-\t\tString ccsidSBCEncoding = database.getCurrentStatement().ccsidSBCEncoding;\n+\t\tDRDAStatement  currentStatement;\n+\t\t\n+\t\tcurrentStatement = database.getCurrentStatement();\n+\t\tif (currentStatement == null)\n+\t\t{\n+\t\t\tcurrentStatement = database.getDefaultStatement();\n+\t\t\tcurrentStatement.initialize();\n+\t\t}\n+\t\tString ccsidSBCEncoding = currentStatement.ccsidSBCEncoding;\n+\t\tSystem.out.println(\"ccsidSBCEncoding - \" + ccsidSBCEncoding);\n+\t\t\n \t\tif (length == 0)\n \t\t\treturn null;\n \t\tbyte [] byteStr = reader.readBytes(length);",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java",
                "sha": "fbcc3d87f0e1e1f8a82bf7e0d37a939d31804d9f",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/DRDAProtocolException.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/DRDAProtocolException.java?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "deletions": 31,
                "filename": "java/drda/org/apache/derby/impl/drda/DRDAProtocolException.java",
                "patch": "@@ -323,37 +323,6 @@ protected static DRDAProtocolException newAgentError(DRDAConnThread agent,\n \t\t\t\t\t\t\t\t\t\toa);\n \t}\n \t\n-\tprotected final byte[] getCrrtkn()\n-\t{\n-\t\treturn crrtkn;\n-\t}\n-\t\n-\tprotected final int getCodpntArg()\n-\t{\n-\t\treturn codpntArg;\n-\t}\n-\t\n-\tprotected final int getErrorCodePoint()\n-\t{\n-\t\treturn errorCodePoint;\n-\t}\n-\t\n-\tprotected final int getSvrcod()\n-\t{\n-\t\treturn  svrcod;\n-\t}\n-\t\n-\tprotected final int getErrcd()\n-\t{\n-\t\treturn  errcd;\n-\t}\n-\t\n-\tprotected final String getMessageid()\n-\t{\n-\t\treturn  messageid;\n-\t}\n-\t\n-\t\n \tprotected final boolean isDisconnectException()\n \t{\n \t\treturn (errorCodePoint == 0);",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/DRDAProtocolException.java",
                "sha": "0724d97fa12b94722b2c003471e603c038cff49f",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/DRDAStatement.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/DRDAStatement.java?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "deletions": 8,
                "filename": "java/drda/org/apache/derby/impl/drda/DRDAStatement.java",
                "patch": "@@ -195,14 +195,6 @@ protected void setRsDefaultOptions(DRDAResultSet drs)\n \t\tdrs.qryrowset = qryrowset;\n \t}\n \n-\t/**\n-\t * Set result set options to default for statement\n-\t */\n-\tprotected void setRsDefaultOptions()\n-\t{\n-\t\tsetRsDefaultOptions(currentDrdaRs);\n-\t}\n-\n \t/**\n \t * Get the extData Objects\n \t *",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/DRDAStatement.java",
                "sha": "4a70294a47225516b3c0425117e74e53afcfad64",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/Database.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/Database.java?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "deletions": 34,
                "filename": "java/drda/org/apache/derby/impl/drda/Database.java",
                "patch": "@@ -163,21 +163,6 @@ protected DRDAStatement getDefaultStatement(String pkgnamcsn)\n \t\treturn currentStatement;\n \t}\n \n-\t/**\n-\t * Get prepared statement based on pkgnamcsn\n-\t *\n-\t * @param pkgnamcsn - key to access statement\n-\t * @return prepared statement\n-\t */\n-\tprotected PreparedStatement getPreparedStatement(String pkgnamcsn) \n-\t\tthrows SQLException\n-\t{\n-\t\tcurrentStatement = getDRDAStatement(pkgnamcsn);\n-\t\tif (currentStatement == null)\n-\t\t\treturn null;\n-\t\treturn currentStatement.getPreparedStatement();\n-\t}\n-\t\n \t/**\n \t * Get a new DRDA statement and store it in the stmtTable if stortStmt is true\n \t * If possible recycle an existing statement\n@@ -271,25 +256,6 @@ String appendAttrString(Properties p)\n \t\treturn attrString;\n \t}\n \n-\t/**\n-\t * Get result set\n-\t *\n-\t * @param pkgnamcsn - key to access prepared statement\n-\t * @return result set\n-\t */\n-\tprotected ResultSet getResultSet(String pkgnamcsn) throws SQLException\n-\t{\n-\t\treturn getDRDAStatement(pkgnamcsn).getResultSet();\n-\t}\n-\t/**\n- \t * Set result set\n-\t *\n-\t * @param value\n-\t */\n-\tprotected void setResultSet(ResultSet value) throws SQLException\n-\t{\n-\t\tcurrentStatement.setResultSet(value);\n-\t}\n \t/**\n \t * Store DRDA prepared statement\n \t * @param  stmt\tDRDA prepared statement",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/Database.java",
                "sha": "33b41bfd1e7df41b220842955eec3348dce0ec69",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/Session.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/Session.java?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "deletions": 30,
                "filename": "java/drda/org/apache/derby/impl/drda/Session.java",
                "patch": "@@ -268,34 +268,4 @@ protected  String buildRuntimeInfo(String indent, LocalizedResource localLangUti\n \t\ts += \"\\n\";\n \t\treturn s;\n \t}\n-\n-\tprivate String getStateString(int s)\n-\t{\n-\t\tswitch (s)\n-\t\t{\n-\t\t\tcase INIT: \n-\t\t\t\treturn \"INIT\";\n-\t\t\tcase ATTEXC:\n-\t\t\t\treturn \"ATTEXC\";\n-\t\t\tcase CLOSED:\n-\t\t\t\treturn \"CLOSED\";\n-\t\t\tdefault:\n-\t\t\t\treturn \"UNKNOWN_STATE\";\n-\n-\t\t}\n-\t}\n-\n-\tprivate String getTypeString(int t)\n-\t{\n-\t\tswitch (t)\n-\t\t{\n-\t\t\tcase DRDA_SESSION:\n-\t\t\t\treturn \"DRDA_SESSION\";\n-\t\t\tcase CMD_SESSION:\n-\t\t\t\treturn \"CMD_SESSION\";\n-\t\t\tdefault:\n-\t\t\t\treturn \"UNKNOWN_TYPE\";\n-\t\t}\n-\t\t\t\t\t\n-\t}\n }",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/Session.java",
                "sha": "29ac511bc2095533ebebe928ba271d05c15a5770",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/TestProto.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/TestProto.java?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "deletions": 2,
                "filename": "java/drda/org/apache/derby/impl/drda/TestProto.java",
                "patch": "@@ -865,8 +865,8 @@ private void readLengthAndCodePoint() throws IOException, DRDAProtocolException\n \t */\n \tprivate void cpError(int cp, int reqCP) throws IOException\n \t{\n-\t\tString cpName = (String)codePointNameTable.get(new Integer(cp));\n-\t\tString reqCPName = (String)codePointNameTable.get(new Integer(reqCP));\n+\t\tString cpName = codePointNameTable.lookup(cp);\n+\t\tString reqCPName = codePointNameTable.lookup(reqCP);\n \t\tfail(\"wrong codepoint val = \" + Integer.toHexString(cp) + \n \t\t\t \"(\"+cpName+\")\" +\n \t\t\t \", required codepoint = \" + Integer.toHexString(reqCP) +",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/TestProto.java",
                "sha": "1129345a6a8de197e18e0d37d11b239431e11b4d",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/XADatabase.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/XADatabase.java?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "deletions": 1,
                "filename": "java/drda/org/apache/derby/impl/drda/XADatabase.java",
                "patch": "@@ -80,7 +80,7 @@ protected synchronized Connection makeConnection(Properties p) throws\n \t\tif (conn == null)\n \t\t{\n \t\t\txaConnection = xaDataSource.getXAConnection(userId,password);\n-\t\t\txaResource = xaConnection.getXAResource();\n+\t\t\tsetXAResource(xaConnection.getXAResource());\n \t\t}\n \t\telse // this is just a connection reset. Close the logical connection.\n \t\t{",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/XADatabase.java",
                "sha": "1b2c39b4ff081ccf447cb4660e9b9ea95874b482",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/runtimeinfo.out",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/runtimeinfo.out?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "deletions": 22,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/runtimeinfo.out",
                "patch": "@@ -16,23 +16,6 @@ Session # :3\n # Waiting  Sessions : 0\n Total Memory : #####\tFree Memory : #####\n End test\n-Testing Runtimeinfo (method)\n------ Derby Network Server Runtime Information ---\n------ Session Information ---------------\n-Session # :2\n-Database :wombat;create=true\n-User :APP\n-# Statements:0\n-Prepared Statement Information: \n-\tStmt ID\t\tSQLText\n-\t-------------\t-----------\n-Session # :4\n------\n-# Connection Threads : 2\n-# Active Sessions : 2\n-# Waiting  Sessions : 0\n-Total Memory : #####\tFree Memory : #####\n-End test (method)\n Testing Runtimeinfo (locale)\n -----Duser.language=err -Duser.country=DE org.apache.derby.drda.NetworkServerControl runtimeinfo \n ----- Derby Network Server Runtime Information ---\n@@ -46,7 +29,7 @@ Prepared Statement Information:\n \t-------------\t-----------\n \tSYSLH0002\tVALUES(1)\n \tSYSLH0001\tSELECT count(*) from sys.systables\n-Session # :5\n+Session # :4\n Database :wombat;create=true\n User :APP\n # Statements:2\n@@ -55,25 +38,24 @@ Prepared Statement Information:\n \t-------------\t-----------\n \tSYSLH0002\tVALUES(2)\n \tSYSLH0001\tSELECT count(*) from sys.systables\n-Session # :6\n+Session # :5\n Database :wombat;create=true\n User :APP\n # Statements:0\n Prepared Statement Information: \n \tStmt ID\t\tSQLText\n \t-------------\t-----------\n-Session # :7\n+Session # :6\n -----\n # Connection Threads : 4\n # Active Sessions : 4\n # Waiting  Sessions : 0\n Total Memory : #####\tFree Memory : #####\n End test (locale)\n Testing Runtimeinfo after closing connectiosn\n-org.apache.derby.drda.NetworkServerControl runtimeinfo \n ----- Derby Network Server Runtime Information ---\n ----- Session Information ---------------\n-Session # :8\n+Session # :7\n -----\n # Connection Threads : 4\n # Active Sessions : 1",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/runtimeinfo.out",
                "sha": "1ca09afd8acdf862b93b33cf7328b77b9d76861a",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/master/runtimeinfo.out",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/runtimeinfo.out?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "deletions": 22,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/runtimeinfo.out",
                "patch": "@@ -16,23 +16,6 @@ Session # :3\n # Waiting  Sessions : 0\n Total Memory : #####\tFree Memory : #####\n End test\n-Testing Runtimeinfo (method)\n------ Derby Network Server Runtime Information ---\n------ Session Information ---------------\n-Session # :2\n-Database :wombat;create=true\n-User :APP\n-# Statements:0\n-Prepared Statement Information: \n-\tStmt ID\t\tSQLText\n-\t-------------\t-----------\n-Session # :4\n------\n-# Connection Threads : 2\n-# Active Sessions : 2\n-# Waiting  Sessions : 0\n-Total Memory : #####\tFree Memory : #####\n-End test (method)\n Testing Runtimeinfo (locale)\n -----Duser.language=err -Duser.country=DE org.apache.derby.drda.NetworkServerControl runtimeinfo \n ----- Derby Network Server Runtime Information ---\n@@ -46,7 +29,7 @@ Prepared Statement Information:\n \t-------------\t-----------\n \tSYSSH2001\tSELECT count(*) from sys.systables\n \tSYSSH2002\tVALUES(1)\n-Session # :5\n+Session # :4\n Database :wombat;create=true\n User :APP\n # Statements:2\n@@ -55,25 +38,24 @@ Prepared Statement Information:\n \t-------------\t-----------\n \tSYSSH2001\tSELECT count(*) from sys.systables\n \tSYSSH2002\tVALUES(2)\n-Session # :6\n+Session # :5\n Database :wombat;create=true\n User :APP\n # Statements:0\n Prepared Statement Information: \n \tStmt ID\t\tSQLText\n \t-------------\t-----------\n-Session # :7\n+Session # :6\n -----\n # Connection Threads : 4\n # Active Sessions : 4\n # Waiting  Sessions : 0\n Total Memory : #####\tFree Memory : #####\n End test (locale)\n Testing Runtimeinfo after closing connectiosn\n-org.apache.derby.drda.NetworkServerControl runtimeinfo \n ----- Derby Network Server Runtime Information ---\n ----- Session Information ---------------\n-Session # :8\n+Session # :7\n -----\n # Connection Threads : 4\n # Active Sessions : 1",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/master/runtimeinfo.out",
                "sha": "d64dd6c9ea2b026a2521bc6046d10d43b833600e",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/master/testProperties.out",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/testProperties.out?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/testProperties.out",
                "patch": "@@ -44,6 +44,19 @@ derby.drda.timeSlice=0\n derby.drda.startNetworkServer=false\n derby.drda.host=localhost\n derby.drda.traceAll=true\n+org.apache.derby.drda.NetworkServerControl trace off -p 1527 \n+Trace turned off for all sessions.\n+Trace turned off for all sessions.\n+----- listing properties --\n+derby.drda.maxThreads=0\n+derby.drda.keepAlive=true\n+derby.drda.minThreads=0\n+derby.drda.portNumber=1527\n+derby.drda.logConnections=true\n+derby.drda.timeSlice=0\n+derby.drda.startNetworkServer=false\n+derby.drda.host=localhost\n+derby.drda.traceAll=false\n org.apache.derby.drda.NetworkServerControl shutdown -p 1527 \n Shutdown successful.\n org.apache.derby.drda.NetworkServerControl ",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/master/testProperties.out",
                "sha": "2ec2bcfed0a2fca87aa9c96977270c28d4812607",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/master/testProtocol.out",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/testProtocol.out?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/testProtocol.out",
                "patch": "@@ -137,6 +137,7 @@ PASSED\n Test that we only send one RDBUPRM per transaction\n PASSED\n Test for missing PKGNAMCSN on OPNQRY\n+Also test QRYCLSRLS and MONITOR codepoints which are ignored currently\n PASSED\n Test for missing QRYBLKSZ on OPNQRY\n PASSED\n@@ -160,6 +161,8 @@ Test too large value for QRYROWSET codepoint on CNTQRY\n PASSED\n Test invalid value for QRYROWSET on OPNQRY\n PASSED\n+Test to see OPNQRY returns PRCCNVRM if non-existent RDBNAM specified\n+PASSED\n Test too large value for QRYRFRTBL codepoint on CNTQRY\n PASSED\n Test invalid value for QRYRFRTBL codepoint on CNTQRY\n@@ -281,3 +284,7 @@ Test for invalid codepoint in DSCSQLSTT\n PASSED\n Test for non-existant prepared statement in DSCSQLSTT\n PASSED\n+Test exception is thrown when specifying non-null indicator for both MBCS and SBCS in SQLSTT\n+PASSED\n+Test for missing SQLSTT in EXCSQLSET - PKGNAMCT is ignored\n+PASSED",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/master/testProtocol.out",
                "sha": "131ddc015222868d582c7fe5e1ae60e664acc08f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/copyfiles.ant",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/copyfiles.ant?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/copyfiles.ant",
                "patch": "@@ -20,7 +20,9 @@ testconnection_app.properties\n testij_app.properties\n testij_sed.properties\n testProperties_app.properties\n+testProperties_derby.properties\n testProtocol_app.properties\n+testProtocol_derby.properties\n testSecMec_app.properties\n timeslice_app.properties\n protocol.tests",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/copyfiles.ant",
                "sha": "29f10318f9f5723aefb35d96b60ec4b48541a9e3",
                "status": "modified"
            },
            {
                "additions": 109,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/protocol.tests",
                "changes": 109,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/protocol.tests?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/protocol.tests",
                "patch": "@@ -1359,6 +1359,7 @@ moreData false\n endTest\n //\n DISPLAY \"Test for missing PKGNAMCSN on OPNQRY\"\n+DISPLAY \"Also test QRYCLSRLS and MONITOR codepoints which are ignored currently\"\n include connect.inc\n createDssRequest\n startDdm PRPSQLSTT\n@@ -1382,6 +1383,12 @@ flush\n checkSQLCard 0 \"     \"\n createDssRequest\n startDdm OPNQRY\n+startDdm QRYCLSRLS\n+writeBytes \"0x00\" \n+endDdm\n+startDdm MONITOR\n+writeBytes \"00000000\" \n+endDdm\n endDdm\n endDss\n flush\n@@ -1794,6 +1801,52 @@ flush\n checkerror SYNTAXRM 8 20 QRYROWSET\n endTest\n //\n+DISPLAY \"Test to see OPNQRY returns PRCCNVRM if non-existent RDBNAM specified\"\n+include connect.inc\n+createDssRequest\n+startDdm PRPSQLSTT\n+startDdm PKGNAMCSN\n+writePaddedString \"test\" 18\n+writePaddedString \"rdbcolid\" 18\n+writePaddedString \"pkgid\"  18\n+writeBytes \"0x0101010101010101\"\n+writeShort 1\n+endDdm\n+endDdm\n+endDss\n+createDssObject \n+startDdm SQLSTT\n+writeByte 0\t// null indicator\n+writeEncodedLDString \"values(1)\" \"UTF-8\" 4\n+writeByte 255 // null indicator\n+endDdm\n+endDss\n+flush\n+checkSQLCard 0 \"     \"\n+createDssRequest\n+startDdm OPNQRY\n+startDdm PKGNAMCSN\n+writePaddedString \"test\" 18\n+writePaddedString \"rdbcolid\" 18\n+writePaddedString \"pkgid\"  18\n+writeBytes \"0x0101010101010101\"\n+writeShort 1\n+endDdm\n+startDdm QRYBLKSZ\n+writeInt 32767\n+endDdm\n+startDdm QRYROWSET \n+writeInt 1\t\n+endDdm\n+startDdm RDBNAM \t//this is optional\n+writeScalarString RDBNAM \"non-existent-db   \" \n+endDdm\n+endDdm\n+endDss\n+flush\n+checkerror PRCCNVRM 8 18\n+endTest\n+//\n DISPLAY \"Test too large value for QRYRFRTBL codepoint on CNTQRY\"\n include values1.inc\n createDssRequest\n@@ -2469,6 +2522,7 @@ endDss\n flush\n checkError SYNTAXRM 8 20 PKGNAMCSN\n endTest\n+//\n // Remove this test for now until JCC issue with JCC sending close twice \n // resolved\n DISPLAY \"Test closing an already closed statement\"\n@@ -2992,3 +3046,58 @@ flush\n checkError SYNTAXRM\t8 20 PKGNAMCSN\n endTest\n //\n+DISPLAY \"Test exception is thrown when specifying non-null indicator for both MBCS and SBCS in SQLSTT\"\n+//This covers DRDAConnThread.agentError method\n+include connect.inc\n+createDssRequest\n+startDdm PRPSQLSTT\n+startDdm PKGNAMCSN\n+writePaddedString \"test\" 18\n+writePaddedString \"rdbcolid\" 18\n+writePaddedString \"pkgid\"  18\n+writeBytes \"0x0101010101010101\"\n+writeShort 1\n+endDdm\n+endDdm\n+endDss\n+createDssObject \n+startDdm SQLSTT\n+writeByte 0\t// non-null indicator\n+writeEncodedLDString \"values(1)\" \"UTF-8\" 4\n+writeByte 0 // non-null indicator\n+endDdm\n+endDss\n+flush\n+//Network server throws a DRDAProtocolException\n+//It does not send back anything\n+endTest\n+//\n+DISPLAY \"Test for missing SQLSTT in EXCSQLSET - PKGNAMCT is ignored\"\n+include connect.inc\n+createDssRequest\n+startDdm EXCSQLSET\n+startDdm PKGNAMCT\n+writePaddedString \"test\" 18\n+writePaddedString \"rdbcolid\" 18\n+writePaddedString \"pkgid\"  18\n+writeBytes \"0x0101010101010101\"\n+writeShort 1\n+endDdm\n+startDdm PKGNAMCSN\n+writePaddedString \"test\" 18\n+writePaddedString \"rdbcolid\" 18\n+writePaddedString \"pkgid\"  18\n+writeBytes \"0x0101010101010101\"\n+writeShort 1\n+endDdm\n+writeScalarString TYPDEFNAM  QTDSQLASC\n+startDdm TYPDEFOVR\n+writeScalar2Bytes CCSIDSBC\t1208\n+writeScalar2Bytes CCSIDMBC\t1208\n+endDdm\n+endDdm\n+endDss\n+flush\n+checkError SYNTAXRM\t8 29 TYPDEFNAM\n+endTest\n+//",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/protocol.tests",
                "sha": "b369fd12c8950baf82d9115c83f35d4a2211c34d",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/runtimeinfo.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/runtimeinfo.java?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "deletions": 11,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/runtimeinfo.java",
                "patch": "@@ -118,16 +118,6 @@ public static void main (String args[]) throws Exception\n \t\t\texecCmdDumpResults(RuntimeinfoCmd);\t\n \t\t\tSystem.out.println(\"End test\");\n \t\t\t\n-\t\t\t/******************************************************************\n-\t\t\t *  Test runtimeinfo by calling NetworkServerControl.getRuntimeInfo\n-\t\t\t******************************************************************/\n-\t\t\tSystem.out.println(\"Testing Runtimeinfo (method)\");\n-\t\t\tNetworkServerControl derbyServer = \n-\t\t\t\tnew NetworkServerControl( InetAddress.getByName(\"localhost\"),\n-\t\t\t\t\t\t\t\t\t\tNetworkServerControl.DEFAULT_PORTNUMBER);\n-\t\t\tSystem.out.println(derbyServer.getRuntimeInfo());\t\n-\t\t\tSystem.out.println(\"End test (method)\");\n-\t\t\t\n \t\t\t// Now get a couple of connections with some prepared statements\n \t\t\tConnection conn2 = ij.startJBMS();\n \t\t\tPreparedStatement ps = prepareAndExecuteQuery(conn1,\"SELECT count(*) from sys.systables\");\n@@ -152,9 +142,13 @@ public static void main (String args[]) throws Exception\n \t\t\tconn2.close();\n \t\t\tconn3.close();\n \t\t\t/** once more after closing the connections \n+\t\t\t * - by calling NetworkServerControl.getRuntimeInfo \n \t\t\t */\n \t\t\tSystem.out.println(\"Testing Runtimeinfo after closing connectiosn\");\n-\t\t\texecCmdDumpResults(RuntimeinfoCmd);\t\n+\t\t\tNetworkServerControl derbyServer = \n+\t\t\t\tnew NetworkServerControl( InetAddress.getByName(\"localhost\"),\n+\t\t\t\t\t\t\t\t\t\tNetworkServerControl.DEFAULT_PORTNUMBER);\n+\t\t\tSystem.out.println(derbyServer.getRuntimeInfo());\t\n \t\t\tSystem.out.println(\"End test\");\n \n \t\t\tbos.close();",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/runtimeinfo.java",
                "sha": "d4e25a4def007e6bfd0db217af5a0f6676e270ab",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProperties.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProperties.java?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProperties.java",
                "patch": "@@ -94,6 +94,14 @@\n \t\t\t\t\t\t\t\t\t\"-p\",\n \t\t\t\t\t\t\t\t\t\"1527\"};\n     \n+    //trace off\n+    private static String[] cmdTraceOff =\n+\t\tnew String[] {  \"org.apache.derby.drda.NetworkServerControl\",\n+\t\t\t\t\t\t\"trace\",\n+\t\t\t\t\t\t\"off\",\n+\t\t\t\t\t\t\"-p\",\n+\t\t\t\t\t\t\"1527\"};\n+    \n     //logconnections on\n     private static String[] cmdLogconnectionsOn =\n \t\t\t\t\tnew String[] {  \"org.apache.derby.drda.NetworkServerControl\",\n@@ -273,9 +281,13 @@ public static void main (String args[]) throws Exception\n \t\t\twaitForStart(\"1527\",15000);\n \t\t\t//check that default properties are used\n \t\t\tlistProperties(\"1527\");\n+\t\t\t\n+\t\t\t//Test trace and logconnections commands\n \t\t\texecCmdDumpResults(cmdTraceOn);\n \t\t\texecCmdDumpResults(cmdLogconnectionsOn);\n \t\t\tlistProperties(\"1527\");\n+\t\t\texecCmdDumpResults(cmdTraceOff);\n+\t\t\tlistProperties(\"1527\");\n \t\t\tderbyServerCmd(\"shutdown\",\"1527\");\n \t\t\t\n \t\t\t//Test error conditions in command-line",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProperties.java",
                "sha": "a95da456cddce8bf919da1bca710b4cb58aeb3b6",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProperties_derby.properties",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProperties_derby.properties?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProperties_derby.properties",
                "patch": "@@ -0,0 +1,19 @@\n+#defaults\n+derby.infolog.append=true\n+derby.locks.waitTimeout=120\n+derby.language.logStatementText=true\n+\n+#added to cover call to memCheck class\n+derby.drda.debug=true#defaults\n+derby.infolog.append=true\n+derby.locks.waitTimeout=120\n+derby.language.logStatementText=true\n+\n+#added to cover call to memCheck class\n+derby.drda.debug=true#defaults\n+derby.infolog.append=true\n+derby.locks.waitTimeout=120\n+derby.language.logStatementText=true\n+\n+#added to cover call to memCheck class\n+derby.drda.debug=true\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProperties_derby.properties",
                "sha": "da9d9192cbb93cef9a91a36ef233db682d5cb08c",
                "status": "added"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProtocol_derby.properties",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProtocol_derby.properties?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProtocol_derby.properties",
                "patch": "@@ -0,0 +1,7 @@\n+#defaults\n+derby.infolog.append=true\n+derby.locks.waitTimeout=120\n+derby.language.logStatementText=true\n+\n+#added to cover call to DssTrace methods\n+derby.drda.traceAll=true\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProtocol_derby.properties",
                "sha": "1c8a960f63494e4e719ea3cbd2c1c39e2f0ee39d",
                "status": "added"
            }
        ],
        "message": "DERBY-706 Improve testing and increase code coverage for Network Server classes\n\nhave attached a second patch 'derby-706_2.diff' which adds some more tests and re-arranges/removes some internal methods. Details of patch are:\n\n* DDMWriter: Removes min method because Math.min is used. Use doesRequestContainData() method.\n* DDMReader: Use readCodePoint() method\n* DRDAConnThread: QRYOPTVAL codepoint is not part of DRDA spec. parseCcsidSBC was giving NPE.\n* CodePointNameTable: Add codepoints to be used in protocol.tests\n* protocol.tests: Added tests to cover methods which were not tested before.\n* Session, DRDAStatement, Database, DRDAProtocolException: Remove some methods which are not needed. The same can be done using other methods.\n* TestProto: Use lookup method.\n* testProtocol: Added \"derby.drda.traceAll=true\" to derby.properties file to test methods in DssTrace\n* testProperties: Added test for trace off command. Added \"derby.drda.traceAll=true\" to derby.properties file to test memcheck.\n* runtimeinfo: Rearranged test because the output was not predictable on different jvms/machines.\n\nRan derbyall with Sun JDK 1.4.2 on WinXP. No failures. \n\nContributed by Deepa Remesh\n\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@356553 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/558e1e4643b228724766a3cc03b5c456079a9deb",
        "patched_files": [
            "DRDAStatement.java",
            "testProtocol_derby.properties",
            "testProtocol.out",
            "DRDAConnThread.java",
            "runtimeinfo.java",
            "DDMWriter.java",
            "protocol.tests",
            "testProperties.out",
            "XADatabase.java",
            "testProperties_derby.properties",
            "CodePointNameTable.java",
            "copyfiles.ant",
            "DRDAProtocolException.java",
            "runtimeinfo.out",
            "DDMReader.java",
            "Session.java",
            "Database.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "TestProto.java",
            "testProperties.java"
        ]
    },
    "derby_2e7e8f6": {
        "bug_id": "derby_2e7e8f6",
        "commit": "https://github.com/apache/derby/commit/2e7e8f6dd036011d170b1c497c3daa0d8ba86999",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/derby/blob/2e7e8f6dd036011d170b1c497c3daa0d8ba86999/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java?ref=2e7e8f6dd036011d170b1c497c3daa0d8ba86999",
                "deletions": 20,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java",
                "patch": "@@ -548,26 +548,6 @@ public ResultColumn\tgetNewExpressionResultColumn(DataDictionary\tdd)\n \t\t\toperand;\n \n \n-\t\t/* The operand for this aggregate node was initialized at bind\n-\t\t * time. Between then and now it's possible that certain changes\n-\t\t * have been made to the query tree which affect this operand. In\n-\t\t * particular, if the operand was pointing to a result column in\n-\t\t * a JoinNode and then that JoinNode was flattened during pre-\n-\t\t * processing, all of the references to that JoinNode--including\n-\t\t * this aggregate's operand--need to be updated to reflect the\n-\t\t * fact that the Join Node no longer exists. So check to see if\n-\t\t * the operand is a column reference, and if so, make a call to\n-\t\t * remap it to its underlying expression. If nothing has happened\n-\t\t * then this will be a no-op; but if something has changed to void\n-\t\t * out the result column to which the operand points, the result\n-\t\t * column will be marked \"redundant\" and the following call should\n-\t\t * remap as appropriate. DERBY-3880.\n-\t\t */\n-\t\tif (operand instanceof ColumnReference)\n-\t\t{\n-\t\t\t((ColumnReference)operand).remapColumnReferencesToExpressions();\n-\t\t}\n-\n \t\treturn (ResultColumn) getNodeFactory().getNode(\n \t\t\t\t\t\t\t\tC_NodeTypes.RESULT_COLUMN,\n \t\t\t\t\t\t\t\t\"##aggregate expression\",",
                "raw_url": "https://github.com/apache/derby/raw/2e7e8f6dd036011d170b1c497c3daa0d8ba86999/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java",
                "sha": "5b4d045ad2a162f7375b26060ef0724a38ba3d34",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/derby/blob/2e7e8f6dd036011d170b1c497c3daa0d8ba86999/java/engine/org/apache/derby/impl/sql/compile/FromList.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/FromList.java?ref=2e7e8f6dd036011d170b1c497c3daa0d8ba86999",
                "deletions": 2,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/FromList.java",
                "patch": "@@ -708,13 +708,15 @@ public void preprocess(int numTables,\n \t * @param predicateList\t\tThe PredicateList from the outer query\n \t * @param sql\t\t\t\tThe SubqueryList from the outer query\n \t * @param gbl\t\t\t\tThe group by list, if any\n+     * @param havingClause      The HAVING clause, if any\n \t *\n \t * @exception StandardException\t\tThrown on error\n \t */\n \tpublic void flattenFromTables(ResultColumnList rcl,\n \t\t\t\t\t\t\t\t  PredicateList predicateList,\n \t\t\t\t\t\t\t\t  SubqueryList sql,\n-\t\t\t\t\t\t\t\t  GroupByList gbl)\n+                                  GroupByList gbl,\n+                                  ValueNode havingClause)\n \t\t\t\t\t\t\t\t\tthrows StandardException\n \t{\n \t\tboolean\t\t\tflattened = true;\n@@ -757,7 +759,8 @@ public void flattenFromTables(ResultColumnList rcl,\n \t\t\t\t\t\t\t\t\t\t\t\t\t\trcl,\n \t\t\t\t\t\t\t\t\t\t\t\t\t\tpredicateList,\n \t\t\t\t\t\t\t\t\t\t\t\t\t\tsql,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\tgbl);\n+                                                        gbl,\n+                                                        havingClause);\n \t\t\t\t\tif (SanityManager.DEBUG)\n \t\t\t\t\t{\n \t\t\t\t\t\tSanityManager.ASSERT(flatteningFL == null ||",
                "raw_url": "https://github.com/apache/derby/raw/2e7e8f6dd036011d170b1c497c3daa0d8ba86999/java/engine/org/apache/derby/impl/sql/compile/FromList.java",
                "sha": "2680322d5f06eb6be3f8ee1bc38dc43477655c25",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/derby/blob/2e7e8f6dd036011d170b1c497c3daa0d8ba86999/java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java?ref=2e7e8f6dd036011d170b1c497c3daa0d8ba86999",
                "deletions": 1,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java",
                "patch": "@@ -483,6 +483,7 @@ public ResultSetNode extractSubquery(int numTables)\n \t * @param outerPList\tPredicateList to append wherePredicates to.\n \t * @param sql\t\t\t\tThe SubqueryList from the outer query\n \t * @param gbl\t\t\t\tThe group by list, if any\n+     * @param havingClause      The HAVING clause, if any\n \t *\n \t * @return FromList\t\tThe fromList from the underlying SelectNode.\n \t *\n@@ -491,7 +492,8 @@ public ResultSetNode extractSubquery(int numTables)\n \tpublic FromList flatten(ResultColumnList rcl,\n \t\t\t\t\t\t\tPredicateList outerPList,\n \t\t\t\t\t\t\tSubqueryList sql,\n-\t\t\t\t\t\t\tGroupByList gbl)\n+                            GroupByList gbl,\n+                            ValueNode havingClause)\n \n \t\t\tthrows StandardException\n \t{\n@@ -541,6 +543,10 @@ else if ( ! (subquery instanceof RowResultSetNode))\n \t\t\tgbl.remapColumnReferencesToExpressions();\n \t\t}\n \n+        if (havingClause != null) {\n+            havingClause.remapColumnReferencesToExpressions();\n+        }\n+\n \t\treturn fromList;\n \t}\n ",
                "raw_url": "https://github.com/apache/derby/raw/2e7e8f6dd036011d170b1c497c3daa0d8ba86999/java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java",
                "sha": "5321118e1ef710c1db27653e9cbaf9344d3db95d",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/derby/blob/2e7e8f6dd036011d170b1c497c3daa0d8ba86999/java/engine/org/apache/derby/impl/sql/compile/FromTable.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/FromTable.java?ref=2e7e8f6dd036011d170b1c497c3daa0d8ba86999",
                "deletions": 1,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/FromTable.java",
                "patch": "@@ -1420,6 +1420,7 @@ protected void markUpdatableByCursor(Vector updateColumns)\n \t * @param outerPList\tPredicateList to append wherePredicates to.\n \t * @param sql\t\t\t\tThe SubqueryList from the outer query\n \t * @param gbl\t\t\t\tThe group by list, if any\n+     * @param havingClause      The HAVING clause, if any\n \t *\n \t * @return FromList\t\tThe fromList from the underlying SelectNode.\n \t *\n@@ -1428,7 +1429,8 @@ protected void markUpdatableByCursor(Vector updateColumns)\n \tpublic FromList flatten(ResultColumnList rcl,\n \t\t\t\t\t\t\tPredicateList outerPList,\n \t\t\t\t\t\t\tSubqueryList sql,\n-\t\t\t\t\t\t\tGroupByList gbl)\n+                            GroupByList gbl,\n+                            ValueNode havingClause)\n \n \t\t\tthrows StandardException\n \t{",
                "raw_url": "https://github.com/apache/derby/raw/2e7e8f6dd036011d170b1c497c3daa0d8ba86999/java/engine/org/apache/derby/impl/sql/compile/FromTable.java",
                "sha": "7eaa7a50689d462f31c9544fdf708a1dc0520600",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/derby/blob/2e7e8f6dd036011d170b1c497c3daa0d8ba86999/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java?ref=2e7e8f6dd036011d170b1c497c3daa0d8ba86999",
                "deletions": 1,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/JoinNode.java",
                "patch": "@@ -1414,6 +1414,7 @@ private void grabJoinPredicates(PredicateList outerPredicateList)\n \t * @param outerPList\t\tPredicateList to append wherePredicates to.\n \t * @param sql\t\t\t\tThe SubqueryList from the outer query\n \t * @param gbl\t\t\t\tThe group by list, if any\n+     * @param havingClause      The HAVING clause, if any\n \t *\n \t * @return FromList\t\tThe fromList from the underlying SelectNode.\n \t *\n@@ -1422,7 +1423,8 @@ private void grabJoinPredicates(PredicateList outerPredicateList)\n \tpublic FromList flatten(ResultColumnList rcl,\n \t\t\t\t\t\t\tPredicateList outerPList,\n \t\t\t\t\t\t\tSubqueryList sql,\n-\t\t\t\t\t\t\tGroupByList gbl)\n+                            GroupByList gbl,\n+                            ValueNode havingClause)\n \n \t\t\tthrows StandardException\n \t{\n@@ -1466,6 +1468,11 @@ public FromList flatten(ResultColumnList rcl,\n \t\t\tgbl.remapColumnReferencesToExpressions();\n \t\t}\n \n+        if (havingClause != null) {\n+            havingClause.remapColumnReferencesToExpressions();\n+        }\n+\n+\n \t\tif (joinPredicates.size() > 0)\n \t\t{\n \t\t\touterPList.destructiveAppend(joinPredicates);",
                "raw_url": "https://github.com/apache/derby/raw/2e7e8f6dd036011d170b1c497c3daa0d8ba86999/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java",
                "sha": "8aedeaf921b585524de8102fb74103abc0791139",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/derby/blob/2e7e8f6dd036011d170b1c497c3daa0d8ba86999/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java?ref=2e7e8f6dd036011d170b1c497c3daa0d8ba86999",
                "deletions": 1,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/SelectNode.java",
                "patch": "@@ -1087,7 +1087,8 @@ public ResultSetNode preprocess(int numTables,\n \t\tfromList.flattenFromTables(resultColumns, \n \t\t\t\t\t\t\t\t   wherePredicates, \n \t\t\t\t\t\t\t\t   whereSubquerys,\n-\t\t\t\t\t\t\t\t   groupByList);\n+                                   groupByList,\n+                                   havingClause);\n \n \t\tif (wherePredicates != null && wherePredicates.size() > 0 && fromList.size() > 0)\n \t\t{",
                "raw_url": "https://github.com/apache/derby/raw/2e7e8f6dd036011d170b1c497c3daa0d8ba86999/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java",
                "sha": "3fa694059743f5368765f69788a392d10a38e7df",
                "status": "modified"
            },
            {
                "additions": 81,
                "blob_url": "https://github.com/apache/derby/blob/2e7e8f6dd036011d170b1c497c3daa0d8ba86999/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "changes": 81,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java?ref=2e7e8f6dd036011d170b1c497c3daa0d8ba86999",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "patch": "@@ -2270,4 +2270,85 @@ public void testDerby4450() throws SQLException {\n                 {\"50\"},{\"45\"},{\"46\"},{\"90\"}});\n         rollback();\n     }\n+\n+\n+    /**\n+     * HAVING with an aggregate function in presence of join flattening\n+     * DERBY-4698. See also DERBY-3880.\n+     * @throws SQLException\n+     */\n+    public void testDerby4698() throws SQLException {\n+        setAutoCommit(false);\n+        Statement s = createStatement();\n+        ResultSet rs;\n+\n+        s.executeUpdate(\n+            \"create table usr ( user_id  bigint primary key,\" +\n+            \"                  deleted  char(1) not null)\");\n+        s.executeUpdate(\n+            \"create table  user_account ( user_account_id bigint primary key,\" +\n+            \"                             user_id  bigint not null,\" +\n+            \"                             account_id  bigint not null)\");\n+\n+        s.executeUpdate(\n+            \"CREATE TABLE  ACCOUNT  (ACCOUNT_ID  BIGINT PRIMARY KEY,\" +\n+            \"                        ACCOUNT_TYPE  VARCHAR(10) NOT NULL,\" +\n+            \"                        BALANCE  DOUBLE NOT NULL)\");\n+\n+        s.executeUpdate(\n+            \"insert into usr values \" +\n+            \"   (3003, 'Y'), (3004, 'N'), (1001, 'N'), (1002, 'Y'),\" +\n+            \"   (1003, 'N'), (1004, 'N'), (1005, 'N'), (1006, 'N'),\" +\n+            \"   (1007, 'N'), (1008, 'N'), (2002, 'N')\");\n+\n+        s.executeUpdate(\n+            \"insert into user_account values \" +\n+            \"  (4004, 3003, 9009), (4005, 3004, 9010), (5005, 1001, 10010),\" +\n+            \"  (5006, 3004, 10011), (5007, 2002, 10012), (5008, 1003, 10013),\" +\n+            \"  (5009, 1004, 10014), (5010, 1005, 10015), (5011, 1006, 10016),\" +\n+            \"  (5012, 1007, 10017), (5013, 1008, 10018), (6006, 1001, 11011),\" +\n+            \"  (6007, 3004, 11012), (6008, 2002, 11013), (6009, 1003, 11014),\" +\n+            \"  (6010, 1004, 11015), (6011, 1005, 11016), (6012, 1006, 11017),\" +\n+            \"  (6013, 1007, 11018), (6014, 1008, 11019), (1001, 1001, 1002),\" +\n+            \"  (1002, 1002, 1003), (1003, 1003, 1004), (1004, 1004, 1005),\" +\n+            \"  (1005, 1005, 1006), (1006, 1006, 1007), (1007, 1007, 1008),\" +\n+            \"  (1008, 1008, 1009), (1009, 1004, 1010), (2002, 1004, 6006),\" +\n+            \"  (3003, 2002, 7007)\");\n+\n+        s.executeUpdate(\n+            \"insert into account values \" +\n+            \" (9009, 'USER', 12.5), (9010, 'USER', 12.5),\" +\n+            \" (10010, 'USER-01', 0.0), (10011, 'USER-01', 0.0),\" +\n+            \" (10012, 'USER-01', 0.0), (10013, 'USER-01', 0.0),\" +\n+            \" (10014, 'USER-01', 99.0), (10015, 'USER-01', 0.0),\" +\n+            \" (10016, 'USER-01', 0.0), (10017, 'USER-01', 0.0),\" +\n+            \" (10018, 'USER-01', 0.0), (11011, 'USER-02', 0.0),\" +\n+            \" (11012, 'USER-02', 0.0), (11013, 'USER-02', 0.0),\" +\n+            \" (11014, 'USER-02', 0.0), (11015, 'USER-02', 0.0),\" +\n+            \" (11016, 'USER-02', 0.0), (11017, 'USER-02', 0.0),\" +\n+            \" (11018, 'USER-02', 0.0), (11019, 'USER-02', 0.0),\" +\n+            \" (1002, 'USER', 10.0), (1003, 'USER', 80.31),\" +\n+            \" (1004, 'USER', 10.0), (1005, 'USER', 161.7),\" +\n+            \" (1006, 'USER', 10.0), (1007, 'USER', 10.0),\" +\n+            \" (1008, 'USER', 10.0), (1009, 'USER', 10.0),\" +\n+            \" (7007, 'USER', 11.0)\");\n+\n+        rs = s.executeQuery(\n+            \"SELECT user0_.user_id AS col_0_0_,\" +\n+            \"   SUM(account2_.balance) AS col_1_0_ \" +\n+            \"   FROM usr user0_ \" +\n+            \"   INNER JOIN user_account accountlin1_ \" +\n+            \"   ON user0_.user_id = accountlin1_.user_id \" +\n+            \"   INNER JOIN account account2_ \" +\n+            \"   ON accountlin1_.account_id = account2_.account_id \" +\n+            \"WHERE user0_.deleted = 'N' \" +\n+            \"      AND ( account2_.account_type IN ( 'USER-01', 'USER' ) )\" +\n+            \"GROUP BY user0_.user_id \" +\n+            \"HAVING SUM(account2_.balance) >= 100.0 \");\n+\n+        JDBC.assertFullResultSet(rs, new String[][] {\n+                {\"1004\", \"260.7\"} });\n+\n+            rollback();\n+    }\n }",
                "raw_url": "https://github.com/apache/derby/raw/2e7e8f6dd036011d170b1c497c3daa0d8ba86999/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "sha": "7d0349ad0ca840ce0dbb61f5d5cac278c65a8c9f",
                "status": "modified"
            }
        ],
        "message": "DERBY-4698 Simple query with HAVING clause crashes with NullPointerException\n\nPatch derby-4698-2. The case of column references in HAVING clauses\nbeing wrong after JOIN flattening was initially solved by\nDERBY-3880. That solution was partial in that it can sometimes happen\ntoo late. \n\nThis patch changes the fix-up of column references in a having clause\nafter join flattening to the same point in time as that of other\ncolumn references that need fix-up after the flattening (rcl, column\nreferences in join predicates and group by clauses). Thus the fixup is\nmoved from the modifyaccesspath phase to the preprocess phase.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@956234 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/c8bb7d7ad7d2fb59d896c115ebd56c839d6c41a8",
        "patched_files": [
            "FromTable.java",
            "JoinNode.java",
            "SelectNode.java",
            "AggregateNode.java",
            "FromSubquery.java",
            "FromList.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "GroupByTest.java"
        ]
    },
    "derby_31d80c0": {
        "bug_id": "derby_31d80c0",
        "commit": "https://github.com/apache/derby/commit/31d80c00e8dbd862e1de2276ecb09006cd98846b",
        "file": [
            {
                "additions": 85,
                "blob_url": "https://github.com/apache/derby/blob/31d80c00e8dbd862e1de2276ecb09006cd98846b/java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java",
                "changes": 95,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java?ref=31d80c00e8dbd862e1de2276ecb09006cd98846b",
                "deletions": 10,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java",
                "patch": "@@ -23,6 +23,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \n import java.util.Iterator;\n import java.util.Vector;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.Collections;\n \n import org.apache.derby.catalog.IndexDescriptor;\n import org.apache.derby.iapi.error.StandardException;\n@@ -343,6 +346,10 @@ private void addUnAggColumns() throws StandardException\n \t\tResultColumnList bottomRCL  = childResult.getResultColumns();\n \t\tResultColumnList groupByRCL = resultColumns;\n \n+\t\tArrayList referencesToSubstitute = new ArrayList();\n+\t\tArrayList havingRefsToSubstitute = null;\n+\t\tif (havingClause != null)\n+\t\t\thavingRefsToSubstitute = new ArrayList();\n \t\tint sz = groupingList.size();\n \t\tfor (int i = 0; i < sz; i++) \n \t\t{\n@@ -385,12 +392,27 @@ private void addUnAggColumns() throws StandardException\n \t\t\t// in the projection list with a virtual column node\n \t\t\t// that effectively points to a result column \n \t\t\t// in the result set doing the group by\n-\t\t\tSubstituteExpressionVisitor se = \n-\t\t\t\tnew SubstituteExpressionVisitor(\n-\t\t\t\t\t\tgbc.getColumnExpression(),\n-\t\t\t\t\t\tvc,\n+\t\t\t//\n+\t\t\t// Note that we don't perform the replacements\n+\t\t\t// immediately, but instead we accumulate them\n+\t\t\t// until the end of the loop. This allows us to\n+\t\t\t// sort the expressions and process them in\n+\t\t\t// descending order of complexity, necessary\n+\t\t\t// because a compound expression may contain a\n+\t\t\t// reference to a simple grouped column, but in\n+\t\t\t// such a case we want to process the expression\n+\t\t\t// as an expression, not as individual column\n+\t\t\t// references. E.g., if the statement was:\n+\t\t\t//   SELECT ... GROUP BY C1, C1 * (C2 / 100), C3\n+\t\t\t// then we don't want the replacement of the\n+\t\t\t// simple column reference C1 to affect the\n+\t\t\t// compound expression C1 * (C2 / 100). DERBY-3094.\n+\t\t\t//\n+\t\t\tValueNode vn = gbc.getColumnExpression();\n+\t\t\tSubstituteExpressionVisitor vis =\n+\t\t\t\tnew SubstituteExpressionVisitor(vn, vc,\n \t\t\t\t\t\tAggregateNode.class);\n-\t\t\tparent.getResultColumns().accept(se);\n+\t\t\treferencesToSubstitute.add(vis);\n \t\t\t\n \t\t\t// Since we always need a PR node on top of the GB \n \t\t\t// node to perform projection we can use it to perform \n@@ -414,15 +436,26 @@ private void addUnAggColumns() throws StandardException\n \t\t\t// GBN (RCL) -> (C1, SUM(C2), <input>, <aggregator>, MAX(C3), <input>, <aggregator>\n \t\t\t//              |\n \t\t\t//       FBT (C1, C2)\n-\t\t\tif (havingClause != null) {\n+\t\t\tif (havingClause != null)\n+\t\t\t{\n \t\t\t\tSubstituteExpressionVisitor havingSE =\n-\t\t\t\t\tnew SubstituteExpressionVisitor(\n-\t\t\t\t\t\t\tgbc.getColumnExpression(),\n-\t\t\t\t\t\t\tvc, null);\n-\t\t\t\thavingClause.accept(havingSE);\n+\t\t\t\t\tnew SubstituteExpressionVisitor(vn,vc,null);\n+\t\t\t\thavingRefsToSubstitute.add(havingSE);\n \t\t\t}\n \t\t\tgbc.setColumnPosition(bottomRCL.size());\n \t\t}\n+\t\tComparator sorter = new ExpressionSorter();\n+\t\tCollections.sort(referencesToSubstitute,sorter);\n+\t\tfor (int r = 0; r < referencesToSubstitute.size(); r++)\n+\t\t\tparent.getResultColumns().accept(\n+\t\t\t\t(SubstituteExpressionVisitor)referencesToSubstitute.get(r));\n+\t\tif (havingRefsToSubstitute != null)\n+\t\t{\n+\t\t\tCollections.sort(havingRefsToSubstitute,sorter);\n+\t\t\tfor (int r = 0; r < havingRefsToSubstitute.size(); r++)\n+\t\t\t\thavingClause.accept(\n+\t\t\t\t\t(SubstituteExpressionVisitor)havingRefsToSubstitute.get(r));\n+}\n \t}\n \n \t/**\n@@ -1223,4 +1256,46 @@ else if (an.getOperand() instanceof ConstantNode)\n \t\t\t}\n \t\t}\n \t}\n+\n+\t/**\n+\t * Comparator class for GROUP BY expression substitution.\n+\t *\n+\t * This class enables the sorting of a collection of\n+\t * SubstituteExpressionVisitor instances. We sort the visitors\n+\t * during the tree manipulation processing in order to process\n+\t * expressions of higher complexity prior to expressions of\n+\t * lower complexity. Processing the expressions in this order ensures\n+\t * that we choose the best match for an expression, and thus avoids\n+\t * problems where we substitute a sub-expression instead of the\n+\t * full expression. For example, if the statement is:\n+\t *   ... GROUP BY a+b, a, a*(a+b), a+b+c\n+\t * we'll process those expressions in the order: a*(a+b),\n+\t * a+b+c, a+b, then a.\n+\t */\n+\tprivate static final class ExpressionSorter implements Comparator\n+\t{\n+\t\tpublic int compare(Object o1, Object o2)\n+\t\t{\n+\t\t\ttry {\n+\t\t\t\tValueNode v1 = ((SubstituteExpressionVisitor)o1).getSource();\n+\t\t\t\tValueNode v2 = ((SubstituteExpressionVisitor)o2).getSource();\n+\t\t\t\tint refCount1, refCount2;\n+\t\t\t\tCollectNodesVisitor vis = new CollectNodesVisitor(\n+\t\t\t\tColumnReference.class);\n+\t\t\t\tv1.accept(vis);\n+\t\t\t\trefCount1 = vis.getList().size();\n+\t\t\t\tvis = new CollectNodesVisitor(ColumnReference.class);\n+\t\t\t\tv2.accept(vis);\n+\t\t\t\trefCount2 = vis.getList().size();\n+\t\t\t\t// The ValueNode with the larger number of refs\n+\t\t\t\t// should compare lower. That way we are sorting\n+\t\t\t\t// the expressions in descending order of complexity.\n+\t\t\t\treturn refCount2 - refCount1;\n+\t\t\t}\n+\t\t\tcatch (StandardException e)\n+\t\t\t{\n+\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t}\n+\t\t}\n+\t}\n }",
                "raw_url": "https://github.com/apache/derby/raw/31d80c00e8dbd862e1de2276ecb09006cd98846b/java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java",
                "sha": "d6252be9a8d819ecf7427a0d7264d2ae4a04250a",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/derby/blob/31d80c00e8dbd862e1de2276ecb09006cd98846b/java/engine/org/apache/derby/impl/sql/compile/SubstituteExpressionVisitor.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/SubstituteExpressionVisitor.java?ref=31d80c00e8dbd862e1de2276ecb09006cd98846b",
                "deletions": 0,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/SubstituteExpressionVisitor.java",
                "patch": "@@ -43,6 +43,14 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \t\tskipOverClass = skipThisClass;\n \t}\n \n+\t/**\n+\t * used by GroupByNode to process expressions by complexity level.\n+\t */\n+\tpublic ValueNode getSource()\n+\t{\n+\t\treturn source;\n+\t}\n+\n \tpublic Visitable visit(Visitable node) throws StandardException \n \t{\n \t\tif (!(node instanceof ValueNode))",
                "raw_url": "https://github.com/apache/derby/raw/31d80c00e8dbd862e1de2276ecb09006cd98846b/java/engine/org/apache/derby/impl/sql/compile/SubstituteExpressionVisitor.java",
                "sha": "055f5b335a0b2985b2e34d768cb88df1f2dfda8b",
                "status": "modified"
            },
            {
                "additions": 121,
                "blob_url": "https://github.com/apache/derby/blob/31d80c00e8dbd862e1de2276ecb09006cd98846b/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java",
                "changes": 121,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java?ref=31d80c00e8dbd862e1de2276ecb09006cd98846b",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java",
                "patch": "@@ -122,6 +122,127 @@ public void testSimpleExpressions() throws Exception\n                         {9,13,2}});\n     }\n     \n+    /**\n+     * queries which combine compound expressions and simple column refs.\n+     */\n+    public void testDerby3094Expressions() throws Exception\n+    {\n+        verifyQueryResults(\n+                \"Q1\",\n+                \"select c1+c2, sum(c3) from test group by c1+c2, c1\",\n+                new int[][] {\n+                        {11, 100}, \n+                        {12, 100},  // c1=1, c2=11\n+                        {12, 100},  // c1=2, c2=10\n+                        {13, 202}});\n+        verifyQueryResults(\n+                \"Q2\",\n+                \"select c1+c2, sum(c3) from test group by c1, c1+c2\",\n+                new int[][] {\n+                        {11, 100}, \n+                        {12, 100},  // c1=1, c2=11\n+                        {12, 100},  // c1=2, c2=10\n+                        {13, 202}});\n+        verifyQueryResults(\n+                \"Q3\",\n+                \"select c1, c1+c2 from test group by c1, c1+c2\",\n+                new int[][] {\n+                        {1, 11}, \n+                        {1, 12},\n+                        {2, 12},\n+                        {2, 13}});\n+        verifyQueryResults(\n+                \"Q4\",\n+                \"select c1+c2, sum(c3) from test group by c1+c2\",\n+                new int[][] {\n+                        {11, 100}, \n+                        {12, 200},\n+                        {13, 202}});\n+        verifyQueryResults(\n+                \"Q5\",\n+                \"select c1,c2,c1+c2,sum(c3) from test group by c1,c2,c1+c2\",\n+                new int[][] {\n+                        {1, 10, 11, 100},\n+                        {1, 11, 12, 100},\n+                        {2, 10, 12, 100},\n+                        {2, 11, 13, 202}});\n+        verifyQueryResults(\n+                \"Q6\",\n+                \"select c1,c2,sum(c3) from test group by c2, c1\",\n+                new int[][] {\n+                        {1, 10, 100},\n+                        {2, 10, 100},\n+                        {1, 11, 100},\n+                        {2, 11, 202}});\n+        verifyQueryResults(\n+                \"Q7\",\n+                \"select c1 as c2, sum(c3) from test group by c1,c2\",\n+                new int[][] {\n+                        {1, 100},\n+                        {1, 100},\n+                        {2, 100},\n+                        {2, 202}});\n+        verifyQueryResults(\n+                \"Q8\",\n+                \"select c1 as c2, sum(c3) from test group by c1\",\n+                new int[][] {\n+                        {1, 200},\n+                        {2, 302}});\n+        verifyQueryResults(\n+                \"Q9\",\n+            \"select c1+c2, sum(c3) from test group by c1+c2 having c1+c2 > 11\",\n+                new int[][] {\n+                        {12, 200},\n+                        {13, 202}});\n+        verifyQueryResults(\n+                \"Q10\",\n+            \"select c1+c2, sum(c3) from test \" +\n+                     \"group by c1, c1+c2 having c1+c2 > 11\",\n+                new int[][] {\n+                        {12, 100},\n+                        {12, 100},\n+                        {13, 202}});\n+        verifyQueryResults(\n+                \"Q11\",\n+                \"select c1*((c1+c2)/2), count(*) from test \" +\n+                \" group by (c1+c2),  c1*((c1+c2)/2)\",\n+                new int[][] {\n+                        {5, 1},\n+                        {6, 1},\n+                        {12, 1},\n+                        {12, 2}});\n+        verifyQueryResults(\n+                \"Q12\",\n+                \"select c1, c1+c2, (c1+c2)+c3, count(*) from test \" +\n+                \" group by c1, c1+c2, (c1+c2)+c3\",\n+                new int[][] {\n+                        {1, 11, 111, 1},\n+                        {1, 12, 112, 1},\n+                        {2, 12, 112, 1},\n+                        {2, 13, 114, 2}});\n+        verifyQueryResults(\n+                \"Q13\",\n+                \"select (c1+c2)+c3, count(*) from test \" +\n+                \" group by c3, c1+c2\",\n+                new int[][] {\n+                        {111, 1},\n+                        {112, 2},\n+                        {114, 2}});\n+        assertCompileError(\n+                \"42Y30\", \"select c1+c2, sum(c3) from test group by c1\");\n+        assertCompileError(\n+                \"42Y30\", \"select c1,c2, sum(c3) from test group by c1+c2,c1\");\n+        assertCompileError(\n+                \"42Y30\", \"select c1+c2, sum(c3) from test group by 1\");\n+        assertCompileError(\n+            \"42X04\", \"select c1+c2 as expr, sum(c3) from test group by expr\");\n+        assertCompileError(\n+            \"42X04\", \"select c1 as c1a, c2, sum(c3) from test group by c1a,c2\");\n+        assertCompileError(\n+                \"42Y30\", \"select c1 as c2, sum(c3) from test group by c2\");\n+        assertCompileError(\n+                \"42Y30\", \"select c1+(c2+c3), sum(c3) from test group by c3, (c1+c2)\");\n+    }\n     \n     public void testSubSelect() throws Exception\n     {",
                "raw_url": "https://github.com/apache/derby/raw/31d80c00e8dbd862e1de2276ecb09006cd98846b/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java",
                "sha": "379713a182d5a87e8b79a09c36fd44b7016ac005",
                "status": "modified"
            }
        ],
        "message": "DERBY-3094: Grouping by expressions causes NullPointerException\n\nThis change modifies GroupByNode.addUnAggColumns to process the expressions\nin the GROUP BY list in descending order of complexity, as measured by the\nnumber of column references in the GROUP BY list element. This ensures\nthat when we are matching up expressions in the SELECT list with expressions\nin the GROUP BY list, that we choose the best match, and don't erroneously\nmatch a sub-expression.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@632221 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/1e67bdad5fa4ddbf4d5ab624bce90634b8b47041",
        "patched_files": [
            "SubstituteExpressionVisitor.java",
            "GroupByNode.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "GroupByExpressionTest.java"
        ]
    },
    "derby_3243958": {
        "bug_id": "derby_3243958",
        "commit": "https://github.com/apache/derby/commit/32439582d1039a00d7d1c578e6304d45688ca100",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/derby/blob/32439582d1039a00d7d1c578e6304d45688ca100/java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java?ref=32439582d1039a00d7d1c578e6304d45688ca100",
                "deletions": 0,
                "filename": "java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java",
                "patch": "@@ -625,6 +625,7 @@ public void\tclose() throws StandardException\n             if (past2FutureTbl != null)\n             {\n                 past2FutureTbl.close();\n+                past2FutureTbl = null;\n             }\n \t    }\n \t\telse",
                "raw_url": "https://github.com/apache/derby/raw/32439582d1039a00d7d1c578e6304d45688ca100/java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java",
                "sha": "23974f6e477802b72d2f844e76fd5539b2174b7d",
                "status": "modified"
            },
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/derby/blob/32439582d1039a00d7d1c578e6304d45688ca100/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/UpdatableResultSetTest.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/UpdatableResultSetTest.java?ref=32439582d1039a00d7d1c578e6304d45688ca100",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/UpdatableResultSetTest.java",
                "patch": "@@ -26,6 +26,8 @@\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Statement;\n+import java.sql.Timestamp;\n+import java.util.Date;\n import junit.framework.Test;\n import org.apache.derbyTesting.junit.BaseJDBCTestCase;\n import org.apache.derbyTesting.junit.TestConfiguration;\n@@ -717,4 +719,40 @@ private ResultSet fetch(String colName, int key)\n         return stmt.executeQuery(\"select \" + colName +\n                 \" from UpdateTestTableResultSet where sno = \" + key);\n     }\n+\n+    public void testDerby6981()\n+        throws SQLException\n+    {\n+        Statement stmt = createStatement();\n+        stmt.executeUpdate(\"CREATE TABLE TEST1 \" +\n+            \"(ID int PRIMARY KEY NOT NULL,LASTUPDATE timestamp)\");\n+        PreparedStatement ps = prepareStatement(\n+            \"SELECT id, LASTUPDATE FROM test1 WHERE id = ? \" +\n+                    \"FOR UPDATE OF id, LASTUPDATE \",\n+            ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);\n+\n+        long newDate = new Date().getTime();\n+\n+        for (int i = 0; i < 3; i++)\n+        {\n+            ps.setInt(1, 3);\n+            ResultSet rs = ps.executeQuery();\n+            if (!rs.next())\n+            {\n+                rs.moveToInsertRow();\n+                rs.updateInt(1, 3);\n+                rs.updateTimestamp(2, new Timestamp(newDate));\n+                rs.insertRow();\n+            }\n+            else\n+            {\n+                rs.updateInt(1, 3);\n+                rs.updateTimestamp(2, new Timestamp(newDate));\n+                rs.updateRow();\n+            }\n+            rs.close();\n+        }\n+        stmt.close();\n+        ps.close();\n+    }\n }",
                "raw_url": "https://github.com/apache/derby/raw/32439582d1039a00d7d1c578e6304d45688ca100/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/UpdatableResultSetTest.java",
                "sha": "3d57560ca52a7a3312bd2cb2cd8c7966ddff58f2",
                "status": "modified"
            }
        ],
        "message": "DERBY-6981: NullPointerException when re-executing PreparedStatement query.\n\nTableScanResultSet's past2FutureTbl is a hash table containing updated\nrows that are thrown into the future direction of the index scan, so\nthat the scan knows it's seen these rows already and should skip them\nsubsequently.\n\nWhen the TableScanResultSet.close() method was called, it was closing the\npast2FutureTbl, but not clearing the pointer, which caused the lazy\ninitialization of the past2FutureTbl to be incorrectly performed the\nnext time the same TableScanResultSet was opened and scanned, resulting\nin the NullPointerException in the underlying BackingStoreHashtable code\nin that second scan.\n\nThe fix is to clear the old instance and freshly initialize a new instance,\neach time the TableScanResultSet is closed and reopened.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1823037 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/6d3942652ecf6025501fc08acb10d3e192a9662c",
        "patched_files": [
            "TableScanResultSet.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "UpdatableResultSetTest.java"
        ]
    },
    "derby_32edb61": {
        "bug_id": "derby_32edb61",
        "commit": "https://github.com/apache/derby/commit/32edb61bd5e90f1546ae84751163b93734b4f7ab",
        "file": [
            {
                "additions": 54,
                "blob_url": "https://github.com/apache/derby/blob/32edb61bd5e90f1546ae84751163b93734b4f7ab/java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java",
                "changes": 62,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java?ref=32edb61bd5e90f1546ae84751163b93734b4f7ab",
                "deletions": 8,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java",
                "patch": "@@ -80,9 +80,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \t * this BinRelOp is for an IN-list probe predicate; 2) if the\n \t * optimizer chooses a plan for which the probe predicate is\n \t * not usable as a start/stop key then we'll \"revert\" the pred\n-\t * back to the InListOperatorNode referenced here.\n+\t * back to the InListOperatorNode referenced here.  NOTE: Once\n+\t * set, this variable should *only* ever be accessed via the\n+\t * isInListProbeNode() or getInListOp() methods--see comments\n+\t * in the latter method for more.\n \t */\n-\tInListOperatorNode inListProbeSource = null;\n+\tprivate InListOperatorNode inListProbeSource = null;\n \n \tpublic void init(Object leftOperand, Object rightOperand)\n \t{\n@@ -153,10 +156,46 @@ public void init(Object leftOperand, Object rightOperand, Object inListOp)\n \t * If this rel op was created for an IN-list probe predicate then return\n \t * the underlying InListOperatorNode.  Will return null if this rel\n \t * op is a \"legitimate\" relational operator (as opposed to a disguised\n-\t * IN-list).\n+\t * IN-list).  With the exception of nullability checking via the\n+\t * isInListProbeNode() method, all access to this.inListProbeSource\n+\t * MUST come through this method, as this method ensures that the\n+\t * left operand of the inListProbeSource is set correctly before\n+\t * returning it.\n \t */\n \tprotected InListOperatorNode getInListOp()\n \t{\n+\t\tif (inListProbeSource != null)\n+\t\t{\n+\t\t\t/* Depending on where this probe predicate currently sits\n+\t\t\t * in the query tree, this.leftOperand *may* have been\n+\t\t\t * transformed, replaced, or remapped one or more times\n+\t\t\t * since inListProbeSource was last referenced. Since the\n+\t\t\t * leftOperand of the IN list should be the same regardless\n+\t\t\t * of which \"version\" of the operation we're looking at\n+\t\t\t * (i.e. the \"probe predicate\" version (this node) vs the\n+\t\t\t * original version (inListProbeSource)), we have to make\n+\t\t\t * sure that all of the changes made to this.leftOperand\n+\t\t\t * are reflected in inListProbeSource's leftOperand, as\n+\t\t\t * well.  In doing so we ensure the caller of this method\n+\t\t\t * will see an up-to-date version of the InListOperatorNode--\n+\t\t\t * and thus, if the caller references the InListOperatorNode's\n+\t\t\t * leftOperand, it will see the correct information. One\n+\t\t\t * notable example of this is at code generation time, where\n+\t\t\t * if this probe predicate is deemed \"not useful\", we'll\n+\t\t\t * generate the underlying InListOperatorNode instead of\n+\t\t\t * \"this\".  For that to work correctly, the InListOperatorNode\n+\t\t\t * must have the correct leftOperand. DERBY-3253.\n+\t\t\t *\n+\t\t\t * That said, since this.leftOperand will always be \"up-to-\n+\t\t\t * date\" w.r.t. the current query tree (because this probe\n+\t\t\t * predicate sits in the query tree and so all relevant\n+\t\t\t * transformations will be applied here), the simplest way\n+\t\t\t * to ensure the underlying InListOperatorNode also has an\n+\t\t\t * up-to-date leftOperand is to set it to this.leftOperand.\n+\t\t\t */\n+\t\t\tinListProbeSource.setLeftOperand(this.leftOperand);\n+\t\t}\n+\n \t\treturn inListProbeSource;\n \t}\n \n@@ -777,7 +816,7 @@ public boolean isQualifier(Optimizable optTable, boolean forPush)\n \t\t * the IN-list).  That would lead to wrong results (missing rows)\n \t\t * because that restriction is incorrect.\n \t\t */\n-\t\tif (inListProbeSource != null)\n+\t\tif (isInListProbeNode())\n \t\t\treturn false;\n \n \t\tFromTable\tft;\n@@ -1215,7 +1254,7 @@ public boolean isRelationalOperator()\n \t\t * it a \"relational operator\"; it's actually a disguised IN-list\n \t\t * operator.\n \t\t */\n-\t\treturn (inListProbeSource == null);\n+\t\treturn !isInListProbeNode();\n \t}\n \t\n \t/** @see ValueNode#isBinaryEqualsOperatorNode */\n@@ -1225,11 +1264,18 @@ public boolean isBinaryEqualsOperatorNode()\n \t\t * it as an \"equals operator\"; it's actually a disguised IN-list\n \t\t * operator.\n \t\t */\n-\t\treturn (inListProbeSource == null) &&\n+\t\treturn !isInListProbeNode() &&\n \t\t\t(operatorType == RelationalOperator.EQUALS_RELOP);\n \t}\n \n-\t/** @see ValueNode#isInListProbeNode */\n+\t/**\n+\t * @see ValueNode#isInListProbeNode\n+\t *\n+\t * It's okay for this method to reference inListProbeSource directly\n+\t * because it does not rely on the contents of inListProbeSource's\n+\t * leftOperand, and a caller of this method cannot gain access to\n+\t * inListProbeSource's leftOperand through this method.\n+\t */\n \tpublic boolean isInListProbeNode()\n \t{\n \t\treturn (inListProbeSource != null);\n@@ -1247,7 +1293,7 @@ public boolean optimizableEqualityNode(Optimizable optTable,\n \t\t/* If this rel op is for a probe predicate then we do not treat\n \t\t * it as an equality node; it's actually a disguised IN-list node.\n \t\t */\n-\t\tif (inListProbeSource != null)\n+\t\tif (isInListProbeNode())\n \t\t\treturn false;\n \n \t\tColumnReference cr = getColumnOperand(optTable,",
                "raw_url": "https://github.com/apache/derby/raw/32edb61bd5e90f1546ae84751163b93734b4f7ab/java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java",
                "sha": "7523ab45c5cb026a7ed0232d6ffa2b23673d9903",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/derby/blob/32edb61bd5e90f1546ae84751163b93734b4f7ab/java/engine/org/apache/derby/impl/sql/compile/OrNode.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/OrNode.java?ref=32edb61bd5e90f1546ae84751163b93734b4f7ab",
                "deletions": 2,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/OrNode.java",
                "patch": "@@ -152,7 +152,7 @@ public ValueNode preprocess(int numTables,\n \t\t\t\t\t\tif (left instanceof BinaryRelationalOperatorNode)\n \t\t\t\t\t\t{\n  \t\t\t\t\t\t\tbron = (BinaryRelationalOperatorNode)left;\n-\t\t\t\t\t\t\tif (bron.getInListOp() == null)\n+\t\t\t\t\t\t\tif (!bron.isInListProbeNode())\n \t\t\t\t\t\t\t{\n \t\t\t\t\t\t\t\tSanityManager.THROWASSERT(\n \t\t\t\t\t\t\t\t\"isRelationalOperator() unexpectedly returned \"\n@@ -223,7 +223,7 @@ else if (tableNumber != cr.getTableNumber() ||\n \t\t\t\t\tOrNode on = (OrNode) vn;\n \t\t\t\t\tBinaryRelationalOperatorNode bron =\n \t\t\t\t\t\t(BinaryRelationalOperatorNode) on.getLeftOperand();\n-\t\t\t\t\tif (bron.getInListOp() != null)\n+\t\t\t\t\tif (bron.isInListProbeNode())\n \t\t\t\t\t{\n \t\t\t\t\t\t/* If we have an OR between multiple IN-lists on the same\n \t\t\t\t\t\t * column then just combine them into a single IN-list.",
                "raw_url": "https://github.com/apache/derby/raw/32edb61bd5e90f1546ae84751163b93734b4f7ab/java/engine/org/apache/derby/impl/sql/compile/OrNode.java",
                "sha": "395e0c768ec35951f9e7d83a39c7058c390b6048",
                "status": "modified"
            },
            {
                "additions": 52,
                "blob_url": "https://github.com/apache/derby/blob/32edb61bd5e90f1546ae84751163b93734b4f7ab/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java",
                "changes": 57,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java?ref=32edb61bd5e90f1546ae84751163b93734b4f7ab",
                "deletions": 5,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java",
                "patch": "@@ -212,11 +212,10 @@ protected void decorateSQL(Statement s) throws SQLException\n     }\n \n     /**\n-     * The one test fixture for this test.  Executes three different types\n-     * of queries (\"strategies\") repeatedly with an increasing number of\n-     * values in the IN list.  Underneath we will check the query plan\n-     * for each query to make sure that Derby is doing multi-probing as\n-     * expected.\n+     * Executes three different types of queries (\"strategies\") repeatedly\n+     * with an increasing number of values in the IN list.  Underneath we\n+     * will check the query plan for each query to make sure that Derby is\n+     * doing multi-probing as expected.\n      */\n     public void testMultiProbing() throws Exception\n     {\n@@ -498,6 +497,54 @@ public void testMultipleStartStopPreds() throws Exception\n         st.close();\n     }\n \n+    /**\n+     * Test the scenario in which Derby creates an IN-list probe\n+     * predicate, remaps its left operand to point to a nested\n+     * SELECT query, and then decides to *not* use the probe\n+     * predicate in the final plan.  The remapping of the left\n+     * operand will cause the probe predicate's left operand to\n+     * be set to a different ColumnReference object--one that\n+     * points to the target table in the subselect.  Then when\n+     * the optimizer decides to *not* use the probe predicate\n+     * in the final query, we'll revert back to the original IN\n+     * list (InListOperatorNode) and generate that for the query.\n+     * When we do so, the left operand of the InListOperatorNode\n+     * must reflect the fact that the IN operation's left operand\n+     * has changed (it now points to the table from the subselect).\n+     * Otherwise the InListOperatorNode will generate an invalid\n+     * ColumnReference.  DERBY-3253.\n+     */\n+    public void testProbePredPushedIntoSelectThenReverted()\n+        throws Exception\n+    {\n+        Statement st = createStatement();\n+\n+        st.execute(\"create table d3253 (i int, vc varchar(10))\");\n+        st.execute(\"insert into d3253 values \" +\n+            \"(1, 'one'), (2, 'two'), (3, 'three'), (1, 'un')\");\n+\n+        /* Before DERBY-3253 was fixed, this query would have thrown\n+         * an execution time NPE due to the fact the generated column\n+         * reference was pointing to the wrong place.\n+         */\n+        JDBC.assertUnorderedResultSet(st.executeQuery(\n+            \"select x.* from d3253, (select * from d3253) x \" +\n+            \"where d3253.i = x.i and x.vc in ('un', 'trois')\"),\n+            new String [][] {{\"1\",\"un\"},{\"1\",\"un\"}});\n+\n+        JDBC.assertUnorderedResultSet(st.executeQuery(\n+            \"select x.* from d3253, (select * from d3253) x \" +\n+            \"where d3253.i = x.i and x.i in (2, 3)\"),\n+            new String [][] {{\"2\",\"two\"},{\"3\",\"three\"}});\n+\n+        JDBC.assertEmpty(st.executeQuery(\n+            \"select x.* from d3253, (select * from d3253) x \" +\n+            \"where d3253.i = x.i and x.vc in ('uno', 'tres')\"));\n+\n+        st.execute(\"drop table d3253\");\n+        st.close();\n+    }\n+\n     /**\n      * Insert the received number of rows into DATA_TABLE via\n      * batch processing.",
                "raw_url": "https://github.com/apache/derby/raw/32edb61bd5e90f1546ae84751163b93734b4f7ab/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java",
                "sha": "c60a9081ab4913b212daa02cd1fed8a3f29d09a6",
                "status": "modified"
            }
        ],
        "message": "DERBY-3253: Fix NPE for IN list operator when the probe predicate is\npushed into a subselect but then multi-probing does not occur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@605616 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/019c40a89896e6642767a4d9e86b2c8270f9bfd8",
        "patched_files": [
            "OrNode.java",
            "BinaryRelationalOperatorNode.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "InListMultiProbeTest.java"
        ]
    },
    "derby_35c061a": {
        "bug_id": "derby_35c061a",
        "commit": "https://github.com/apache/derby/commit/35c061a65d9e20a7515a69812d63b673f4e207f2",
        "file": [
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/derby/blob/35c061a65d9e20a7515a69812d63b673f4e207f2/java/engine/org/apache/derby/impl/sql/compile/CastNode.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/CastNode.java?ref=35c061a65d9e20a7515a69812d63b673f4e207f2",
                "deletions": 2,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/CastNode.java",
                "patch": "@@ -55,7 +55,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \tprivate int\t\t\t\t\ttargetCharType;\n \tTypeId\tsourceCTI = null;\n \tprivate boolean forDataTypeFunction = false;\n-    \n+\n+    /** The original, unbound descriptor for the target type, if it is a UDT. */\n+    private DataTypeDescriptor targetUDT;\n+\n     /** This variable gets set by the parser to indicate that this CAST node\n \t * has been generated by the parser. This means that we should use the \n      * collation info of the current compilation schema for this node's\n@@ -99,7 +102,17 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n              ContextManager cm) throws StandardException {\n         super(cm);\n         this.castOperand = castOperand;\n-        setType(castTarget);\n+\n+        // DERBY-6421: setType() tries to bind user defined types. We don't\n+        // want to do any binding here, since we could be called during\n+        // parsing. If the target type is a UDT, just store it for now and\n+        // do the binding later when bindExpression() or bindCastNodeOnly()\n+        // is called.\n+        if (castTarget.getTypeId().isUserDefinedTypeId()) {\n+            targetUDT = castTarget;\n+        } else {\n+            setType(castTarget);\n+        }\n \t}\n \n \t/**\n@@ -192,6 +205,11 @@ ValueNode bindExpression(FromList fromList, SubqueryList subqueryList, List<Aggr\n \t\t\t\t\t\t\t\tfromList, subqueryList,\n                                 aggregates);\n \n+        // Bind the target UDT.\n+        if (targetUDT != null) {\n+            setType(targetUDT);\n+        }\n+\n \t\tif (getTypeServices() == null)   //CHAR or VARCHAR function without specifying target length\n \t\t{\n \t\t\tDataTypeDescriptor opndType = castOperand.getTypeServices();\n@@ -355,6 +373,10 @@ else if (destJDBCTypeId == Types.CHAR)\n     void bindCastNodeOnly()\n \t\tthrows StandardException\n \t{\n+        // Bind the target UDT.\n+        if (targetUDT != null) {\n+            setType(targetUDT);\n+        }\n \n \t\t/*\n \t\t** The result type is always castTarget.",
                "raw_url": "https://github.com/apache/derby/raw/35c061a65d9e20a7515a69812d63b673f4e207f2/java/engine/org/apache/derby/impl/sql/compile/CastNode.java",
                "sha": "78f41b81e01570e914c10f07a553d3f145b5b5c7",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/derby/blob/35c061a65d9e20a7515a69812d63b673f4e207f2/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java?ref=35c061a65d9e20a7515a69812d63b673f4e207f2",
                "deletions": 1,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java",
                "patch": "@@ -28,6 +28,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n import java.util.HashMap;\n \n import junit.framework.Test;\n@@ -48,7 +50,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n     ///////////////////////////////////////////////////////////////////////////////////\n \n     public static final String OBJECT_EXISTS = \"X0Y68\";\n-    public static final String SYNTAX_ERROR = \"42X01\";\n     public static final String VIEW_DEPENDS_ON_TYPE = \"X0Y23\";\n     public static final String TRIGGER_DEPENDS_ON_TYPE = \"X0Y24\";\n \n@@ -1219,6 +1220,25 @@ public void test_17_outputParameters() throws Exception\n         assertEquals( \"[ 0, 0 ]\", obj.toString() );\n     }\n \n+    /**\n+     * Verify that you can cast a value to an UDT in a generation clause or\n+     * a CHECK constraint. Regression test case for DERBY-6421.\n+     */\n+    public void test_18_derby6421() throws SQLException {\n+        setAutoCommit(false);\n+\n+        Statement s = createStatement();\n+        s.execute(\"create type d6421_type external name 'java.util.ArrayList' \"\n+                + \"language java\");\n+        s.execute(\"create table d6421_table \"\n+                + \"(x generated always as (cast(null as d6421_type)), \"\n+                + \"check (cast(null as d6421_type) is null))\");\n+\n+        // This insert used to cause assert failure (in sane builds) or\n+        // NullPointerException (in insane builds).\n+        s.execute(\"insert into d6421_table values default\");\n+    }\n+\n     ///////////////////////////////////////////////////////////////////////////////////\n     //\n     // PROCEDURES AND FUNCTIONS",
                "raw_url": "https://github.com/apache/derby/raw/35c061a65d9e20a7515a69812d63b673f4e207f2/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java",
                "sha": "c1c48dc4036620580fd93f07071bf1e7ccf66f64",
                "status": "modified"
            }
        ],
        "message": "DERBY-6421: Cast to UDT in CHECK constraint causes NPE or assert failure\n\nDelay binding of target UDT in CastNode till bind time.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1548104 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/23362a4374af7d970f6a3bb9b0867b08f5697f82",
        "patched_files": [
            "CastNode.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "UDTTest.java"
        ]
    },
    "derby_36dd3e2": {
        "bug_id": "derby_36dd3e2",
        "commit": "https://github.com/apache/derby/commit/36dd3e2035ffd195f054abf6755ce38388410166",
        "file": [
            {
                "additions": 45,
                "blob_url": "https://github.com/apache/derby/blob/36dd3e2035ffd195f054abf6755ce38388410166/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java?ref=36dd3e2035ffd195f054abf6755ce38388410166",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java",
                "patch": "@@ -44,6 +44,51 @@ public InsertTest(String name) {\n     public static Test suite() {\n         return TestConfiguration.defaultSuite(InsertTest.class);\n     }\n+\n+    //DERBY-6788(Wrong value inserted by INSERT INTO with multiple subselects)\n+    //Following test case has zz against its name and hence it won't run. \n+    // This is because one INSERT with JOIN in the test can cause data .  \n+    // corruption. Once DERBY-6788 is fixed, following test should be enabled \n+    // by removing zz. This bug might be related to \n+    // DERBY-6786(NullPointerException in INSERT INTO statement with multiple \n+    //  subselects)\n+    public void zztestDerby6788() throws SQLException {\n+        Statement s = createStatement();\n+        s.execute(\"CREATE TABLE M1 (K varchar(64), S decimal)\");\n+        s.execute(\"CREATE TABLE M2 (K varchar(64), S decimal)\");\n+        s.execute(\"CREATE TABLE V  (S DECIMAL)\");\n+        s.execute(\"INSERT INTO M1 VALUES ('Bug', 2015)\");\n+        s.execute(\"INSERT INTO M2 VALUES ('Bug', 1957)\");\n+        JDBC.assertFullResultSet(\n+            s.executeQuery(\n+            \"SELECT res.* FROM (SELECT d2.s FROM m1 \"+\n+            \"LEFT JOIN \" +\n+            \"(SELECT k,s FROM m2) AS d2 ON m1.k=d2.k) AS res\"),\n+            new String[][]{{\"1957\"}});\n+        //The INSERT below will insert incorrect value into V because of\n+        // DERBY-6788. This bug might be related to \n+        // DERBY-6786(NullPointerException in INSERT INTO statement with  \n+        //  multiple subselects)\n+        s.execute(\"INSERT INTO V \"+\n+                \"(SELECT res.* FROM (SELECT d2.s FROM m1 \" +\n+        \t\t\"LEFT JOIN \" +\n+                \"(SELECT k,s FROM m2) AS d2 ON m1.k=d2.k) AS res)\");\n+        JDBC.assertFullResultSet(\n+                s.executeQuery(\n+                \"SELECT * FROM V\"),\n+                new String[][]{{\"1957\"}});\n+        s.execute(\"INSERT INTO V \"+\n+                \"(SELECT res.* FROM (SELECT d2.s*1 FROM m1 \" +\n+        \t\t\"LEFT JOIN \" +\n+                \"(SELECT k,s FROM m2) AS d2 ON m1.k=d2.k) AS res)\");\n+        JDBC.assertFullResultSet(\n+                s.executeQuery(\n+                \"SELECT * FROM V\"),\n+                new String[][]{{\"1957\"},{\"1957\"}});\n+        s.execute(\"DROP   TABLE M1\");\n+        s.execute(\"DROP   TABLE M2\");\n+        s.execute(\"DROP   TABLE V\");\n+    }\n     \n     public void testDerby6786Case1() throws SQLException {\n         Statement s = createStatement();",
                "raw_url": "https://github.com/apache/derby/raw/36dd3e2035ffd195f054abf6755ce38388410166/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java",
                "sha": "82a016720d13877982dcab5581d3413d30a077b8",
                "status": "modified"
            }
        ],
        "message": "DERBY-6788(Wrong value inserted by INSERT INTO with multiple subselects)\n\nAdding a junit test case for DERBY-6788. This bug might be related to DERBY-6786(NullPointerException in INSERT INTO statement with  multiple subselects)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1653986 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/e94357aad8f6ac748d1a969dc928d0fbe1b3ca17",
        "patched_files": [],
        "repo": "derby",
        "unit_tests": [
            "InsertTest.java"
        ]
    },
    "derby_38520af": {
        "bug_id": "derby_38520af",
        "commit": "https://github.com/apache/derby/commit/38520af26380540185da2b4af4f153eb84e59c39",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/derby/blob/93ce86581eee70c7122e4e7560378f64bd3c31aa/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/testij.out",
                "changes": 75,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/testij.out?ref=93ce86581eee70c7122e4e7560378f64bd3c31aa",
                "deletions": 75,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/testij.out",
                "patch": "@@ -1,75 +0,0 @@\n-Testing various ij connections and comments in front of selects\n-org.apache.derby.tools.ij xxxFILTERED_TESTIJSOURCExxx\n-ij> --\n------   Licensed to the Apache Software Foundation (ASF) under one or more\n------   contributor license agreements.  See the NOTICE file distributed with\n------   this work for additional information regarding copyright ownership.\n------   The ASF licenses this file to You under the Apache License, Version 2.0\n------   (the \"License\"); you may not use this file except in compliance with\n------   the License.  You may obtain a copy of the License at\n------\n------      http://www.apache.org/licenses/LICENSE-2.0\n------\n------   Unless required by applicable law or agreed to in writing, software\n------   distributed under the License is distributed on an \"AS IS\" BASIS,\n------   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n------   See the License for the specific language governing permissions and\n------   limitations under the License.\n------\n-driver 'org.apache.derby.jdbc.ClientDriver';\n-ij> --Bug 4632  Make the db italian to make sure string selects  are working\n-connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/wombat;create=true;territory=it' USER 'dbadmin' PASSWORD 'dbadmin';\n-ij> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/wombat' USER 'dbadmin' PASSWORD 'dbadbmin';\n-ij(CONNECTION1)> -- this is a comment, a comment in front of a select should not cause an error\n-select * from sys.systables where 1=0;\n-TABLEID |TABLENAME |& |SCHEMAID |&\n------\n-0 rows selected\n-ij(CONNECTION1)> -- this is a comment, a comment in front of a values clauses should not cause an error\n-values(1);\n-1          \n------\n-1          \n-1 row selected\n-ij(CONNECTION1)> -- Try some URL attributes\n-disconnect all;\n-ij> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/junk;create=true' USER 'dbadmin' PASSWORD 'dbadbmin';\n-ij> select * from APP.notthere;\n-ERROR 42X05: Table/View 'APP.NOTTHERE' does not exist.\n-ij> -- examples from the docs\n-connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/wombat;create=true;user=judy;password=judy';\n-ij(CONNECTION1)> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/./wombat;user=judy;password=judy';\n-ij(CONNECTION2)> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/toursDB';\n-ERROR 08004: The connection was refused because the database toursDB was not found.\n-ij(CONNECTION2)> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/toursDB' USER 'dbadmin' PASSWORD 'dbadbmin';\n-ERROR 08004: The connection was refused because the database toursDB was not found.\n-ij(CONNECTION2)> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/wombat' USER 'APP' PASSWORD 'APP';\n-ij(CONNECTION3)> connect  'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/my-db-name;create=true;user=usr;password=pwd';\n-ij(CONNECTION4)> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/my-db-name;upgrade=true;user=usr;password=pwd';\n-ij(CONNECTION5)> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/my-db-name;shutdown=true;user=usr;password=pwd';\n-ERROR 08006: DERBY SQL error: SQLCODE: -1, SQLSTATE: 08006, SQLERRMC: Database 'my-db-name' shutdown.\n-ij(CONNECTION5)> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/./my-dbname;create=true;user=usr;password=pwd';\n-ij(CONNECTION6)> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/./my-dbname;create=true;user=usr;password=pwd';\n-ij(CONNECTION7)> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/toursDB' USER 'dbadmin' PASSWORD 'dbadbmin';\n-ERROR 08004: The connection was refused because the database toursDB was not found.\n-ij(CONNECTION7)> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/wombat' USER 'APP' PASSWORD 'APP';\n-ij(CONNECTION8)> connect  'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/my-db-name;create=true;user=usr;password=pwd';\n-ij(CONNECTION9)> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/my-db-name;upgrade=true;user=usr;password=pwd';\n-ij(CONNECTION10)> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/my-db-name;shutdown=true;user=usr;password=pwd';\n-ERROR 08006: DERBY SQL error: SQLCODE: -1, SQLSTATE: 08006, SQLERRMC: Database 'my-db-name' shutdown.\n-ij(CONNECTION10)> -- Database names with /'s\n-connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/./my-dbname;create=true;user=usr;password=pwd';\n-ij(CONNECTION11)> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/./my-dbname;create=true;user=usr;password=pwd';\n-ij(CONNECTION12)> -- retrieveMessageText Testing\n-connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/my-db-name;create=true;user=usr;password=pwd;retrieveMessageText=false';\n-ij(CONNECTION13)> -- Should not get message text\n-select * from APP.notthere;\n-ERROR 42X05: DERBY SQL error: SQLCODE: -1, SQLSTATE: 42X05, SQLERRMC: APP.NOTTHERE\u001442X05\n-ij(CONNECTION13)> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/my-db-name;create=true;user=usr;password=pwd;retrieveMessageText=true';\n-ij(CONNECTION14)> -- Should see message text\n-select * from APP.notthere;\n-ERROR 42X05: Table/View 'APP.NOTTHERE' does not exist.\n-ij(CONNECTION14)> -- just user security mechanism\n-connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/my-db-name;create=true;user=usr;retrieveMessageText=true';\n-ij(CONNECTION15)> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/wombat' USER 'APP';\n-ij(CONNECTION16)> End test",
                "raw_url": "https://github.com/apache/derby/raw/93ce86581eee70c7122e4e7560378f64bd3c31aa/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/testij.out",
                "sha": "8088ada8268e9f7b90d3339a33e08208201749a0",
                "status": "removed"
            },
            {
                "additions": 72,
                "blob_url": "https://github.com/apache/derby/blob/38520af26380540185da2b4af4f153eb84e59c39/java/testing/org/apache/derbyTesting/functionTests/master/testclientij.out",
                "changes": 72,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/testclientij.out?ref=38520af26380540185da2b4af4f153eb84e59c39",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/testclientij.out",
                "patch": "@@ -0,0 +1,72 @@\n+ij version 10.3\n+ij> --\n+--   Licensed to the Apache Software Foundation (ASF) under one or more\n+--   contributor license agreements.  See the NOTICE file distributed with\n+--   this work for additional information regarding copyright ownership.\n+--   The ASF licenses this file to You under the Apache License, Version 2.0\n+--   (the \"License\"); you may not use this file except in compliance with\n+--   the License.  You may obtain a copy of the License at\n+--\n+--      http://www.apache.org/licenses/LICENSE-2.0\n+--\n+--   Unless required by applicable law or agreed to in writing, software\n+--   distributed under the License is distributed on an \"AS IS\" BASIS,\n+--   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+--   See the License for the specific language governing permissions and\n+--   limitations under the License.\n+--\n+driver 'org.apache.derby.jdbc.ClientDriver';\n+ij> --Bug 4632  Make the db italian to make sure string selects  are working\n+connect 'jdbc:derby://localhost:1527/testij;create=true;territory=it' USER 'dbadmin' PASSWORD 'dbadmin';\n+ij> connect 'jdbc:derby://localhost:1527/testij' USER 'dbadmin' PASSWORD 'dbadbmin';\n+ij(CONNECTION1)> -- this is a comment, a comment in front of a select should not cause an error\n+select * from sys.systables where 1=0;\n+TABLEID                             |TABLENAME                                                                                                                       |&|SCHEMAID                            |&\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n+\n+0 rows selected\n+ij(CONNECTION1)> -- this is a comment, a comment in front of a values clauses should not cause an error\n+values(1);\n+1          \n+-----------\n+1          \n+\n+1 row selected\n+ij(CONNECTION1)> -- Try some URL attributes\n+disconnect all;\n+ij> connect 'jdbc:derby://localhost:1527/testij2;create=true' USER 'dbadmin' PASSWORD 'dbadbmin';\n+ij> select * from APP.notthere;\n+ERROR 42X05: Table/View 'APP.NOTTHERE' does not exist.\n+ij> -- examples from the docs\n+\n+connect 'jdbc:derby://localhost:1527/testij2;create=true;user=judy;password=judy';\n+ij(CONNECTION1)> connect 'jdbc:derby://localhost:1527/./testij2;user=judy;password=judy';\n+ij(CONNECTION2)> connect 'jdbc:derby://localhost:1527/toursDB';\n+ERROR 08004: The connection was refused because the database toursDB was not found.\n+ij(CONNECTION2)> connect 'jdbc:derby://localhost:1527/toursDB' USER 'dbadmin' PASSWORD 'dbadbmin';\n+ERROR 08004: The connection was refused because the database toursDB was not found.\n+ij(CONNECTION2)> connect 'jdbc:derby://localhost:1527/wombat' USER 'APP' PASSWORD 'APP';\n+ij(CONNECTION3)> connect  'jdbc:derby://localhost:1527/testij2;create=true;user=usr;password=pwd';\n+ij(CONNECTION4)> connect 'jdbc:derby://localhost:1527/testij2;upgrade=true;user=usr;password=pwd';\n+ij(CONNECTION5)> connect 'jdbc:derby://localhost:1527/testij2;shutdown=true;user=usr;password=pwd';\n+ERROR 08006: DERBY SQL error: SQLCODE: -1, SQLSTATE: 08006, SQLERRMC: Database 'testij2' shutdown.\n+ij(CONNECTION5)> connect 'jdbc:derby://localhost:1527/./testij2;create=true;user=usr;password=pwd';\n+ij(CONNECTION6)> connect 'jdbc:derby://localhost:1527/./testij2;create=true;user=usr;password=pwd';\n+ij(CONNECTION7)> connect  'jdbc:derby://localhost:1527/testij2;create=true;user=usr;password=pwd';\n+ij(CONNECTION8)> connect 'jdbc:derby://localhost:1527/testij2;upgrade=true;user=usr;password=pwd';\n+ij(CONNECTION9)> connect 'jdbc:derby://localhost:1527/testij2;shutdown=true;user=usr;password=pwd';\n+ERROR 08006: DERBY SQL error: SQLCODE: -1, SQLSTATE: 08006, SQLERRMC: Database 'testij2' shutdown.\n+ij(CONNECTION9)> -- retrieveMessageText Testing\n+connect 'jdbc:derby://localhost:1527/testij2;create=true;user=usr;password=pwd;retrieveMessageText=false';\n+ij(CONNECTION10)> -- Should not get message text\n+select * from APP.notthere;\n+ERROR 42X05: DERBY SQL error: SQLCODE: -1, SQLSTATE: 42X05, SQLERRMC: APP.NOTTHERE\u001442X05\n+ij(CONNECTION10)> connect 'jdbc:derby://localhost:1527/testij2;create=true;user=usr;password=pwd;retrieveMessageText=true';\n+ij(CONNECTION11)> -- Should see message text\n+select * from APP.notthere;\n+ERROR 42X05: Table/View 'APP.NOTTHERE' does not exist.\n+ij(CONNECTION11)> -- just user security mechanism\n+connect 'jdbc:derby://localhost:1527/testij2;create=true;user=usr;retrieveMessageText=true';\n+ij(CONNECTION12)> connect 'jdbc:derby://localhost:1527/wombat' USER 'APP';\n+ij(CONNECTION13)> disconnect all;\n+ij> \n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/derby/raw/38520af26380540185da2b4af4f153eb84e59c39/java/testing/org/apache/derbyTesting/functionTests/master/testclientij.out",
                "sha": "10ae010166a88e30d63b280047dfff185b488a24",
                "status": "added"
            },
            {
                "additions": 46,
                "blob_url": "https://github.com/apache/derby/blob/38520af26380540185da2b4af4f153eb84e59c39/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetIjTests.java",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetIjTests.java?ref=38520af26380540185da2b4af4f153eb84e59c39",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetIjTests.java",
                "patch": "@@ -0,0 +1,46 @@\n+/*\n+ *\n+ * Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.NetIjTests\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, \n+ * software distributed under the License is distributed on an \n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, \n+ * either express or implied. See the License for the specific \n+ * language governing permissions and limitations under the License.\n+ */\n+\n+package org.apache.derbyTesting.functionTests.tests.derbynet;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.derbyTesting.functionTests.util.IjTestCase;\n+import org.apache.derbyTesting.junit.TestConfiguration;\n+\n+/**\n+ * Network client .sql tests to run via ij.\n+ */\n+public class NetIjTests extends IjTestCase {\n+\t\n+\tprivate NetIjTests(String name) {\n+\t\tsuper(name);\n+\t}\n+\t\n+\tpublic static Test suite() {\n+        \n+        TestSuite suite = new TestSuite(\"NetIjTests\");\n+        suite.addTest(TestConfiguration.clientServerDecorator(\n+        \t\tnew NetIjTests(\"testclientij\")));\n+        \n+        return suite;\n+    }\n+}",
                "raw_url": "https://github.com/apache/derby/raw/38520af26380540185da2b4af4f153eb84e59c39/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetIjTests.java",
                "sha": "5bc75cece7e93b20a04d26c0d8c37beeb3ff90a2",
                "status": "added"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/derby/blob/38520af26380540185da2b4af4f153eb84e59c39/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testclientij.sql",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testclientij.sql?ref=38520af26380540185da2b4af4f153eb84e59c39",
                "deletions": 28,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testclientij.sql",
                "patch": "@@ -16,72 +16,62 @@\n --\n driver 'org.apache.derby.jdbc.ClientDriver';\n --Bug 4632  Make the db italian to make sure string selects  are working\n-connect 'jdbc:derby://localhost:1527/wombat;create=true;territory=it' USER 'dbadmin' PASSWORD 'dbadmin';\n+connect 'jdbc:derby://localhost:1527/testij;create=true;territory=it' USER 'dbadmin' PASSWORD 'dbadmin';\n \n-connect 'jdbc:derby://localhost:1527/wombat' USER 'dbadmin' PASSWORD 'dbadbmin';\n+connect 'jdbc:derby://localhost:1527/testij' USER 'dbadmin' PASSWORD 'dbadbmin';\n -- this is a comment, a comment in front of a select should not cause an error\n select * from sys.systables where 1=0;\n -- this is a comment, a comment in front of a values clauses should not cause an error\n values(1);\n \n -- Try some URL attributes\n disconnect all;\n-connect 'jdbc:derby://localhost:1527/junk;create=true' USER 'dbadmin' PASSWORD 'dbadbmin';\n+connect 'jdbc:derby://localhost:1527/testij2;create=true' USER 'dbadmin' PASSWORD 'dbadbmin';\n select * from APP.notthere;\n \n \n -- examples from the docs\n \n-connect 'jdbc:derby://localhost:1527/wombat;create=true;user=judy;password=judy';\n+connect 'jdbc:derby://localhost:1527/testij2;create=true;user=judy;password=judy';\n \n-connect 'jdbc:derby://localhost:1527/./wombat;user=judy;password=judy';\n+connect 'jdbc:derby://localhost:1527/./testij2;user=judy;password=judy';\n \n connect 'jdbc:derby://localhost:1527/toursDB';\n \n-\n connect 'jdbc:derby://localhost:1527/toursDB' USER 'dbadmin' PASSWORD 'dbadbmin';\n \n connect 'jdbc:derby://localhost:1527/wombat' USER 'APP' PASSWORD 'APP';\n \n-connect  'jdbc:derby://localhost:1527/my-db-name;create=true;user=usr;password=pwd';\n-\n-connect 'jdbc:derby://localhost:1527/my-db-name;upgrade=true;user=usr;password=pwd';\n-\n-connect 'jdbc:derby://localhost:1527/my-db-name;shutdown=true;user=usr;password=pwd';\n+connect  'jdbc:derby://localhost:1527/testij2;create=true;user=usr;password=pwd';\n \n-connect 'jdbc:derby://localhost:1527/./my-dbname;create=true;user=usr;password=pwd';\n+connect 'jdbc:derby://localhost:1527/testij2;upgrade=true;user=usr;password=pwd';\n \n-connect 'jdbc:derby://localhost:1527/./my-dbname;create=true;user=usr;password=pwd';\n+connect 'jdbc:derby://localhost:1527/testij2;shutdown=true;user=usr;password=pwd';\n \n-connect 'jdbc:derby://localhost:1527/toursDB' USER 'dbadmin' PASSWORD 'dbadbmin';\n-\n-connect 'jdbc:derby://localhost:1527/wombat' USER 'APP' PASSWORD 'APP';\n+connect 'jdbc:derby://localhost:1527/./testij2;create=true;user=usr;password=pwd';\n \n-connect  'jdbc:derby://localhost:1527/my-db-name;create=true;user=usr;password=pwd';\n+connect 'jdbc:derby://localhost:1527/./testij2;create=true;user=usr;password=pwd';\n \n-connect 'jdbc:derby://localhost:1527/my-db-name;upgrade=true;user=usr;password=pwd';\n-\n-connect 'jdbc:derby://localhost:1527/my-db-name;shutdown=true;user=usr;password=pwd';\n-\n--- Database names with /'s\n-connect 'jdbc:derby://localhost:1527/./my-dbname;create=true;user=usr;password=pwd';\n-\n-connect 'jdbc:derby://localhost:1527/./my-dbname;create=true;user=usr;password=pwd';\n+connect  'jdbc:derby://localhost:1527/testij2;create=true;user=usr;password=pwd';\n \n+connect 'jdbc:derby://localhost:1527/testij2;upgrade=true;user=usr;password=pwd';\n \n+connect 'jdbc:derby://localhost:1527/testij2;shutdown=true;user=usr;password=pwd';\n \n -- retrieveMessageText Testing\n-connect 'jdbc:derby://localhost:1527/my-db-name;create=true;user=usr;password=pwd;retrieveMessageText=false';\n+connect 'jdbc:derby://localhost:1527/testij2;create=true;user=usr;password=pwd;retrieveMessageText=false';\n \n -- Should not get message text\n select * from APP.notthere;\n \n-connect 'jdbc:derby://localhost:1527/my-db-name;create=true;user=usr;password=pwd;retrieveMessageText=true';\n+connect 'jdbc:derby://localhost:1527/testij2;create=true;user=usr;password=pwd;retrieveMessageText=true';\n \n -- Should see message text\n select * from APP.notthere;\n \n -- just user security mechanism\n-connect 'jdbc:derby://localhost:1527/my-db-name;create=true;user=usr;retrieveMessageText=true';\n+connect 'jdbc:derby://localhost:1527/testij2;create=true;user=usr;retrieveMessageText=true';\n \n connect 'jdbc:derby://localhost:1527/wombat' USER 'APP';\n+\n+disconnect all;",
                "raw_url": "https://github.com/apache/derby/raw/38520af26380540185da2b4af4f153eb84e59c39/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testclientij.sql",
                "sha": "4726a4d5976cddaf33133ac08dcfed1f005b2c75",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/derby/blob/93ce86581eee70c7122e4e7560378f64bd3c31aa/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij.java",
                "changes": 165,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij.java?ref=93ce86581eee70c7122e4e7560378f64bd3c31aa",
                "deletions": 165,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij.java",
                "patch": "@@ -1,165 +0,0 @@\n-/*\n-\n-   Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.testij\n-\n-   Licensed to the Apache Software Foundation (ASF) under one or more\n-   contributor license agreements.  See the NOTICE file distributed with\n-   this work for additional information regarding copyright ownership.\n-   The ASF licenses this file to You under the Apache License, Version 2.0\n-   (the \"License\"); you may not use this file except in compliance with\n-   the License.  You may obtain a copy of the License at\n-\n-      http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n-\n- */\n-package org.apache.derbyTesting.functionTests.tests.derbynet;\n-\n-import java.sql.*;\n-import java.util.Vector;\n-import java.util.Properties;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n-import java.io.BufferedOutputStream;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n-import java.io.ByteArrayInputStream;\n-import java.io.FileNotFoundException;\n-\n-import org.apache.derbyTesting.functionTests.harness.jvm;\n-import org.apache.derbyTesting.functionTests.harness.Sed;\n-import org.apache.derbyTesting.functionTests.util.TestUtil;\n-import org.apache.derbyTesting.functionTests.util.ExecProcUtil;\n-\n-import org.apache.derby.drda.NetworkServerControl;\n-\n-\n-public class testij\n-{\n-\n-\n-\tprivate static Properties properties = new java.util.Properties();\n-\tprivate static jvm jvm;\n-\tprivate static Vector vCmd;\n-\n-\tprivate static String IjCmd=\"org.apache.derby.tools.ij\";\n-\tprivate static String SqlDir=\"extin\";\n-\tprivate static String jccSqlFile=\"testij.sql\";\n-\tprivate static String sep;\n-\tprivate static String clientSqlFile=\"testclientij.sql\";\n-\tprivate static String altExtinDir;\n-\tprivate static boolean useAltExtinDir=false;\n-    \n-\tprivate static void execCmd (String[] args) throws Exception\n-\t{\n-\t\tint totalSize = vCmd.size() + args.length;\n-\t\tString serverCmd[] = new String[totalSize];\n-\t\tint i;\n-\t\tfor (i = 0; i < vCmd.size(); i++)\n-\t\t{\n-\t\t\tserverCmd[i] = (String)vCmd.elementAt(i);\n-\t\t//\tSystem.out.println(\"serverCmd[\"+i+\"]: \"+serverCmd[i]);\n-\t\t}\n-\t\tint j = 0;\n-\t\tfor (; i < totalSize; i++)\n-\t\t{\n-\t\t\tserverCmd[i] = args[j++];\n-\t\t//\tSystem.out.println(\"serverCmd[\"+i+\"]: \"+serverCmd[i]);\n-\t\t}\n- \n-\t\t// Start a process to run the command\n-\t\tProcess pr = Runtime.getRuntime().exec(serverCmd);\n-\t\tpr.waitFor();\t\t// make sure this is executed first\n-\t}\n-\t\n-    public static void massageSqlFile (String hostName, String fileName) throws Exception {\n-        // only called if hostName is *not* localhost. \n-        // Need to replace each occurrence of the string 'localhost' with \n-        // whatever is the hostName\n-        File tmpFile = new File(\"extin\", \"tmpFile.sql\");\n-        File orgFile = new File(\"extin\", fileName);\n-        // wrap this in a try to possibly try using user.dir to find the file\n-        InputStream original; \n-        OutputStream copy; \n-        try { \n-            fileName = SqlDir + sep + fileName; \n-            original = new FileInputStream(fileName);\n-            copy = new FileOutputStream(tmpFile);\n-        }\n-        catch (FileNotFoundException fnfe) {\n-            // we must be running from within a suite...\n-            useAltExtinDir = true;\n-            String userdir =  System.getProperty(\"user.dir\");\n-            altExtinDir = userdir + sep + \"..\"; \n-            tmpFile = new File(altExtinDir, \"tmpFile.sql\");\n-            orgFile = new File (altExtinDir,  fileName); \n-            fileName = altExtinDir + sep + fileName;\n-            original = new FileInputStream(fileName);\n-            copy = new FileOutputStream(tmpFile);\n-        }\n-        int content;\n-        while ((content = original.read())> 0 ) {\n-            copy.write(content);\n-        }\n-        copy.close();\n-        original.close();\n-        Sed hostSed = new Sed();\n-        InputStream sedIs = new ByteArrayInputStream((\"substitute=localhost;\" + hostName).getBytes(\"UTF-8\"));\n-        hostSed.exec(tmpFile, orgFile, sedIs, false, false, false);\t\t\n-    }\n-\n-\tpublic static void main (String args[]) throws Exception\n-\t{\n-\t\tif ((System.getProperty(\"java.vm.name\") != null) && System.getProperty(\"java.vm.name\").equals(\"J9\"))\n-\t\t\tjvm = jvm.getJvm(\"j9_13\");\n-\t\telse\n-\t\t\tjvm = jvm.getJvm(\"currentjvm\");\t\t// ensure compatibility\n-\t\tvCmd = jvm.getCommandLine();\n-\t\tsep =  System.getProperty(\"file.separator\");\n-\t\ttry\n-\t\t{\n-            BufferedOutputStream bos = new BufferedOutputStream(System.out, 1024);\n-\t\t\t/************************************************************\n-\t\t\t *  Test comments in front of select's doesn't cause problems\n-\t\t\t ************************************************************/\n-\t\t\t//create wombat database\n-\t\t\tNetworkServerControl server = new NetworkServerControl();\n-\t\t\tSystem.out.println(\"Testing various ij connections and comments in front of selects\");\n-\t\t\t\n-\t\t\t// first, we have to massage the .sql file to replace localhost, if \n-\t\t\t// there is a system property set.\n-\t\t\t\t\t\t\n-\t\t\tString hostName=TestUtil.getHostName();\n-\t\t\tif (TestUtil.isJCCFramework()){\n-\t\t\t\t// use jccSqlfile\n-\t\t\t\tif (!hostName.equals(\"localhost\")) \n-\t\t\t\t\tmassageSqlFile(hostName,jccSqlFile);\n-\t\t\t\tif (useAltExtinDir)\t\n-\t\t\t\t\tExecProcUtil.execCmdDumpResults(new String[]{IjCmd,(altExtinDir + sep + SqlDir + sep + jccSqlFile)},vCmd,bos);\n-\t\t\t\tExecProcUtil.execCmdDumpResults(new String[]{IjCmd,(SqlDir + sep + jccSqlFile)},vCmd,bos);\n-\t\t\t} else {   // Derby Client\n-\t\t\t\t// use clientSqlFile\n-\t\t\t\tif(!hostName.equals(\"localhost\")) {\n-\t\t\t\t\tmassageSqlFile(hostName,clientSqlFile);\n-\t\t\t\tif (useAltExtinDir)\t\n-\t\t\t\t\tExecProcUtil.execCmdDumpResults(new String[]{IjCmd,(altExtinDir + sep + SqlDir + sep + clientSqlFile)},vCmd,bos);\n-\t\t\t\t}\n-\t\t\t\tExecProcUtil.execCmdDumpResults(new String[]{IjCmd,(SqlDir + sep + clientSqlFile)},vCmd,bos);\n-\t\t\t}\n-\t\t\tSystem.out.println(\"End test\");\n-\t\t}\n-\t\tcatch (Exception e)\n-\t\t{\n-\t\t\te.printStackTrace();\n-\t\t}\n-\t}\n-\n-}\n-\n-",
                "raw_url": "https://github.com/apache/derby/raw/93ce86581eee70c7122e4e7560378f64bd3c31aa/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij.java",
                "sha": "c6acde95ce00ab3d9a03cc6a9398dd61ee68c359",
                "status": "removed"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/derby/blob/93ce86581eee70c7122e4e7560378f64bd3c31aa/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij.sql",
                "changes": 61,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij.sql?ref=93ce86581eee70c7122e4e7560378f64bd3c31aa",
                "deletions": 61,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij.sql",
                "patch": "@@ -1,61 +0,0 @@\n---\n---   Licensed to the Apache Software Foundation (ASF) under one or more\n---   contributor license agreements.  See the NOTICE file distributed with\n---   this work for additional information regarding copyright ownership.\n---   The ASF licenses this file to You under the Apache License, Version 2.0\n---   (the \"License\"); you may not use this file except in compliance with\n---   the License.  You may obtain a copy of the License at\n---\n---      http://www.apache.org/licenses/LICENSE-2.0\n---\n---   Unless required by applicable law or agreed to in writing, software\n---   distributed under the License is distributed on an \"AS IS\" BASIS,\n---   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n---   See the License for the specific language governing permissions and\n---   limitations under the License.\n---\n-driver 'com.ibm.db2.jcc.DB2Driver';\n---Bug 4632  Make the db italian to make sure string selects  are working\n-connect 'jdbc:derby:net://localhost:1527/wombat;create=true;territory=it:retrieveMessagesFromServerOnGetMessage=true;' USER 'dbadmin' PASSWORD 'dbadmin';\n-\n-connect 'jdbc:derby:net://localhost:1527/wombat' USER 'dbadmin' PASSWORD 'dbadbmin';\n--- this is a comment, a comment in front of a select should not cause an error\n-select * from sys.systables where 1=0;\n--- this is a comment, a comment in front of a values clauses should not cause an error\n-values(1);\n-\n--- Try some URL attributes\n-disconnect all;\n-connect 'jdbc:derby:net://localhost:1527/junk;create=true:retrieveMessagesFromServerOnGetMessage=true;' USER 'dbadmin' PASSWORD 'dbadbmin';\n-select * from APP.notthere;\n-\n-\n--- examples from the docs\n-\n-connect 'jdbc:derby:net://localhost:1527/wombat;create=true:user=judy;password=judy;retrieveMessagesFromServerOnGetMessage=true;';\n-\n-connect 'jdbc:derby:net://localhost:1527/\"./wombat\":user=judy;password=judy;retrieveMessagesFromServerOnGetMessage=true;';\n-\n-connect 'jdbc:derby:net://localhost:1527/toursDB:retrieveMessagesFromServerOnGetMessage=true;';\n-\n-\n-connect 'jdbc:derby:net://localhost:1527/toursDB:retrieveMessagesFromServerOnGetMessage=true;' USER 'dbadmin' PASSWORD 'dbadbmin';\n-\n-connect 'jdbc:derby:net://localhost:1527/wombat' USER 'APP' PASSWORD 'APP';\n-\n-connect  'jdbc:derby:net://localhost:1527/my-db-name;create=true:user=usr;password=pwd;retrieveMessagesFromServerOnGetMessage=true;';\n-\n-connect 'jdbc:derby:net://localhost:1527/my-db-name;upgrade=true:user=usr;password=pwd;retrieveMessagesFromServerOnGetMessage=true;';\n-\n-\n-connect 'jdbc:derby:net://localhost:1527/my-db-name;shutdown=true:user=usr;password=pwd;'\n-\n--- Quoted db and attributes\n-connect 'jdbc:derby:net://localhost:1527/\"./my-dbname;create=true\":user=usr;password=pwd;';\n-\n-connect 'jdbc:derby:net://localhost:1527/\"./my-dbname;create=true\":user=usr;password=pwd;retrieveMessagesFromServerOnGetMessage=true;';\n-\n-\n--- with no user\n-connect 'jdbc:derby:net://localhost:1527/wombat;create=true:retrieveMessagesFromServerOnGetMessage=true;';\n-",
                "raw_url": "https://github.com/apache/derby/raw/93ce86581eee70c7122e4e7560378f64bd3c31aa/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij.sql",
                "sha": "f4c6bb99f021cb263edf4d751c4b5946b5b85b88",
                "status": "removed"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/derby/blob/93ce86581eee70c7122e4e7560378f64bd3c31aa/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij_app.properties",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij_app.properties?ref=93ce86581eee70c7122e4e7560378f64bd3c31aa",
                "deletions": 12,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij_app.properties",
                "patch": "@@ -1,12 +0,0 @@\n-\n-supportfiles=tests/derbynet/testij.sql,tests/derbynet/testclientij.sql\n-useextdirs=true\n-\n-#exclude with SecurityManager\n-# test execs another jvm with a relative path that means\n-# the permission FilePermission(\"<<ALL FILES>>\",\"execute\")\n-# would be required. Don't want to grant such a wide permission\n-# to the testing jar.\n-noSecurityManager=true\n-\n-",
                "raw_url": "https://github.com/apache/derby/raw/93ce86581eee70c7122e4e7560378f64bd3c31aa/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij_app.properties",
                "sha": "8e396ffd9aaddfea57a52446f255ed3b7019b69d",
                "status": "removed"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/derby/blob/93ce86581eee70c7122e4e7560378f64bd3c31aa/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij_sed.properties",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij_sed.properties?ref=93ce86581eee70c7122e4e7560378f64bd3c31aa",
                "deletions": 17,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij_sed.properties",
                "patch": "@@ -1,17 +0,0 @@\n-# Filters and substitutes for SED\n-# Multiple patterns for DELETE: comma separated\n-#   delete=pattern1,pattern2,...,patternn\n-# No commas can be allowed in the patterns.\n-#\n-# Multiple patterns for SUBSTITUTE: comma separated <pattern;substitute> pair\n-#   substitute=pattern1;substitute1,pattern2;substitute2,...,patternn;substitut\n-en\n-# No commas or semicolons can be allowed in the patterns/subsitutes.\n--------------------------------------------------------------------------------\n---\n-substitute=(server log.*);(server log XXX),Required user property not set;null userid not supported,org.apache.derby.tools.ij.*;org.apache.derby.tools.ij xxxFILTERED_TESTIJSOURCExxx\n-\n-\n-\n-\n-",
                "raw_url": "https://github.com/apache/derby/raw/93ce86581eee70c7122e4e7560378f64bd3c31aa/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij_sed.properties",
                "sha": "c4ff5d5944930fa13e9c3c0cec7b46f5e977edcd",
                "status": "removed"
            },
            {
                "additions": 110,
                "blob_url": "https://github.com/apache/derby/blob/38520af26380540185da2b4af4f153eb84e59c39/java/testing/org/apache/derbyTesting/functionTests/util/IjTestCase.java",
                "changes": 110,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/util/IjTestCase.java?ref=38520af26380540185da2b4af4f153eb84e59c39",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/util/IjTestCase.java",
                "patch": "@@ -0,0 +1,110 @@\n+/*\n+ * Derby - Class org.apache.derbyTesting.functionTests.util.ExecIjTestCase\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, \n+ * software distributed under the License is distributed on an \n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, \n+ * either express or implied. See the License for the specific \n+ * language governing permissions and limitations under the License.\n+ */\n+\n+package org.apache.derbyTesting.functionTests.util;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.OutputStream;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+\n+import org.apache.derby.tools.ij;\n+\n+/**\n+ * Run a .sql script via ij's main method and compare with a canon.\n+ */\n+public class IjTestCase extends ScriptTestCase {\n+\n+\tString scriptName;\n+\tString outfileName;\n+    File outfile;\n+\t\n+    /**\n+     * Create a script testcase that runs the .sql script with the\n+     * given name. The name should not include the \".sql\" suffix.\n+     */\n+\tpublic IjTestCase(String name) {\n+\t\tsuper(name);\n+\t\tscriptName = getName() + \".sql\";\n+\t\toutfileName = \"system\" + File.separator + getName() + \".out\";\n+\t\toutfile = new File(outfileName);\n+\t}\n+\t\n+\tpublic void setUp() throws Exception{\n+\t    super.setUp();\n+\t\tsetSystemProperty(\"ij.outfile\", outfileName);\n+\t\tsetSystemProperty(\"ij.defaultResourcePackage\",\n+\t\t\t\t\"/org/apache/derbyTesting/functionTests/tests/\"\n+\t\t\t\t+ getArea() + File.separator);\n+\t}\n+\t\n+\tpublic void tearDown() throws Exception {\n+\t\tsuper.tearDown();\n+\t\tremoveSystemProperty(\"ij.outfile\");\n+\t\tremoveSystemProperty(\"ij.defaultResourcePackage\");\n+\t}\n+\t\n+\t/**\n+\t * Run a .sql test, calling ij's main method.\n+\t * Then, take the output filre and read it into our OutputStream\n+\t * so that it can be compared via compareCanon().\n+\t */\n+\tpublic void runTest() throws Throwable {\n+\t\tString [] args = { \"-fr\", scriptName };\n+\t\tij.main(args);\n+\t\t\n+\t\tString canon =\n+\t\t\t\"org/apache/derbyTesting/functionTests/master/\"\n+\t\t\t+ getName() + \".out\";\n+\t\t\n+\t\tfinal File out = outfile;\n+\t\tFileInputStream fis = (FileInputStream) AccessController.doPrivileged(new PrivilegedAction() {\n+\t\t\tpublic Object run() {\n+\t\t\t\tFileInputStream fis = null;\n+\t\t\t\ttry {\n+\t\t\t\t\tfis = new FileInputStream(out);\n+\t\t\t\t} catch (FileNotFoundException e) {\n+\t\t\t\t\tfail(\"Could not open ij output file.\");\n+\t\t\t\t}\t\t\t\t\n+\t\t\t\treturn fis;\n+\t\t\t}\n+\t\t});\n+\t\tOutputStream os = getOutputStream();\n+\t\tint b;\n+\t\twhile ((b = fis.read()) != -1) {\n+\t\t\tos.write(b);\n+\t\t}\n+\t\tfis.close();\n+\t\t\n+\t\tBoolean deleted = (Boolean) AccessController.doPrivileged(new PrivilegedAction() {\n+\t\t\tpublic Object run() {\n+\t\t\t\tboolean d = outfile.delete();\n+\t\t\t\t\n+\t\t\t\treturn new Boolean(d);\n+\t\t\t}\n+\t\t});\n+\t\t\n+\t\tif (!deleted.booleanValue())\n+\t\t\tprintln(\"Could not delete outfile for \" + scriptName);\n+\t\t\n+\t\tthis.compareCanon(canon);\n+\t}\n+}",
                "raw_url": "https://github.com/apache/derby/raw/38520af26380540185da2b4af4f153eb84e59c39/java/testing/org/apache/derbyTesting/functionTests/util/IjTestCase.java",
                "sha": "ad3f221e82360a1a37de9c90e0a15a5ba8e2ce86",
                "status": "added"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/derby/blob/38520af26380540185da2b4af4f153eb84e59c39/java/tools/org/apache/derby/impl/tools/ij/ConnectionEnv.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/tools/org/apache/derby/impl/tools/ij/ConnectionEnv.java?ref=38520af26380540185da2b4af4f153eb84e59c39",
                "deletions": 2,
                "filename": "java/tools/org/apache/derby/impl/tools/ij/ConnectionEnv.java",
                "patch": "@@ -28,6 +28,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import java.util.Enumeration;\n import java.util.Properties;\n \n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.SQLException;\n@@ -64,8 +66,12 @@ void init(LocalizedOutput out) throws SQLException, ClassNotFoundException, Inst\n \t\t// only load up ij.connection.* properties if there is\n \t\t// only one ConnectionEnv in the system.\n \t\tif (only) {\n-\t\t    Properties p = System.getProperties();\n-\t\t    protocol = p.getProperty(ij.PROTOCOL_PROPERTY);\n+            Properties p = (Properties) AccessController.doPrivileged(new PrivilegedAction() {\n+            \tpublic Object run() {\n+                \treturn System.getProperties();\n+            \t}\n+            });\n+            protocol = p.getProperty(ij.PROTOCOL_PROPERTY);\n \n \t        String prefix = CONNECTION_PROPERTY + \".\";\n \t\t    for (Enumeration e = p.propertyNames(); e.hasMoreElements(); )",
                "raw_url": "https://github.com/apache/derby/raw/38520af26380540185da2b4af4f153eb84e59c39/java/tools/org/apache/derby/impl/tools/ij/ConnectionEnv.java",
                "sha": "6462e516bc47be38a8ea898ac5d3e5f79b4696ad",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/derby/blob/38520af26380540185da2b4af4f153eb84e59c39/java/tools/org/apache/derby/impl/tools/ij/Main.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/tools/org/apache/derby/impl/tools/ij/Main.java?ref=38520af26380540185da2b4af4f153eb84e59c39",
                "deletions": 7,
                "filename": "java/tools/org/apache/derby/impl/tools/ij/Main.java",
                "patch": "@@ -37,6 +37,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import java.io.UnsupportedEncodingException;\n import java.io.IOException;\n \n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.sql.Connection;\n import java.sql.SQLException;\n \n@@ -132,15 +134,25 @@ public static void mainCore(String[] args, Main main)\n                     }\n                 }\n \n-\t\tString outFile = util.getSystemProperty(\"ij.outfile\");\n+\t\tfinal String outFile = util.getSystemProperty(\"ij.outfile\");\n \t\tif (outFile != null && outFile.length()>0) {\n \t\t\tLocalizedOutput oldOut = out;\n-\t\t\ttry {\n-\t\t\t\tout = langUtil.getNewOutput(new FileOutputStream(outFile));\n-\t\t\t}\n-\t\t\tcatch (IOException ioe) {\n-\t\t\t\toldOut.println(langUtil.getTextMessage(\"IJ_IjErroUnabTo\",outFile));\n-\t\t\t}\n+\t\t\tFileOutputStream fos = (FileOutputStream) AccessController.doPrivileged(new PrivilegedAction() {\n+\t\t\t\tpublic Object run() {\n+\t\t\t\t\tFileOutputStream out = null;\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tout = new FileOutputStream(outFile);\n+\t\t\t\t\t} catch (FileNotFoundException e) {\n+\t\t\t\t\t\tout = null;\n+\t\t\t\t\t}\n+\t\t\t\t\treturn out;\n+\t\t\t\t}\n+\t\t\t});\n+\t\t\tout = langUtil.getNewOutput(fos);\n+\n+\t\t\tif (out == null)\n+\t\t\t   oldOut.println(langUtil.getTextMessage(\"IJ_IjErroUnabTo\",outFile));\n+\t\n \t\t}\n \n \t\t// the old property name is deprecated...\n@@ -238,4 +250,5 @@ private void initAppUI(){\n \t\t// adjust the application in accordance with derby.ui.locale and derby.ui.codeset\n \tLocalizedResource.getInstance();\t\n   }\n+  \n }",
                "raw_url": "https://github.com/apache/derby/raw/38520af26380540185da2b4af4f153eb84e59c39/java/tools/org/apache/derby/impl/tools/ij/Main.java",
                "sha": "ea55353a3667e4f577a67d983e8a60209f8e1445",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/derby/blob/38520af26380540185da2b4af4f153eb84e59c39/java/tools/org/apache/derby/impl/tools/ij/ij.jj",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/tools/org/apache/derby/impl/tools/ij/ij.jj?ref=38520af26380540185da2b4af4f153eb84e59c39",
                "deletions": 3,
                "filename": "java/tools/org/apache/derby/impl/tools/ij/ij.jj",
                "patch": "@@ -47,6 +47,8 @@ import org.apache.derby.iapi.services.info.JVMInfo;\n import org.apache.derby.tools.URLCheck;\n \n import java.lang.reflect.*;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.sql.Connection;\n import java.sql.DatabaseMetaData;\n import java.sql.DriverManager;\n@@ -98,14 +100,16 @@ import java.util.Locale;\n  */\n class ij {\n \tstatic final String PROTOCOL_PROPERTY = \"ij.protocol\";\n-    static final String USER_PROPERTY = \"ij.user\";\n+    static final String URLCHECK_PROPERTY = \"ij.URLCheck\";\n+\tstatic final String USER_PROPERTY = \"ij.user\";\n     static final String PASSWORD_PROPERTY = \"ij.password\";\n \tstatic final String FRAMEWORK_PROPERTY = \"framework\";\n \n \tboolean\t\t\telapsedTime = false;\n \n \tConnection theConnection = null;\n \tConnectionEnv currentConnEnv = null;\n+\tString urlCheck = null;\n \n \txaAbstractHelper xahelper = null;\n \tboolean exit = false;\n@@ -138,7 +142,12 @@ class ij {\n \n \t\t// load all protocols specified via properties\n \t\t//\n-\t\tProperties p = System.getProperties();\n+        Properties p = (Properties) AccessController.doPrivileged(new PrivilegedAction() {\n+          \tpublic Object run() {\n+              \treturn System.getProperties();\n+            }\n+        });\n+        urlCheck = p.getProperty(URLCHECK_PROPERTY);\n \t\tprotocol = p.getProperty(PROTOCOL_PROPERTY);\n \t\tString framework_property = p.getProperty(FRAMEWORK_PROPERTY);\n \t\t\n@@ -1473,7 +1482,7 @@ throws SQLException\n                         }\n \t\t\t// By default perform extra checking on the URL attributes.\n \t\t\t// This checking does not change the processing.\n-                        if (System.getProperty(\"ij.URLCheck\") == null || Boolean.getBoolean(\"ij.URLCheck\")) {\n+\t\t\tif (urlCheck == null || Boolean.valueOf(urlCheck).booleanValue()) {\n                           URLCheck aCheck = new URLCheck(sVal);\n                         }\n \t\tif (!sVal.startsWith(\"jdbc:\") && (p == null) && (protocol != null)) {",
                "raw_url": "https://github.com/apache/derby/raw/38520af26380540185da2b4af4f153eb84e59c39/java/tools/org/apache/derby/impl/tools/ij/ij.jj",
                "sha": "eda2a2e024c58a4461be02cc820e6b39cfb81689",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/derby/blob/38520af26380540185da2b4af4f153eb84e59c39/java/tools/org/apache/derby/impl/tools/ij/util.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/tools/org/apache/derby/impl/tools/ij/util.java?ref=38520af26380540185da2b4af4f153eb84e59c39",
                "deletions": 4,
                "filename": "java/tools/org/apache/derby/impl/tools/ij/util.java",
                "patch": "@@ -31,6 +31,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import java.io.IOException;\n import java.lang.reflect.InvocationTargetException;\n \n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.SQLException;\n@@ -219,11 +221,19 @@ resourceName is not absolute (does not begin with a \"/\") this qualifies\n \t  */\n \tstatic public InputStream getResourceAsStream(String resourceName) \n \t{\n-\t\tClass c= util.class;\n-\t\tresourceName = qualifyResourceName(resourceName,true);\n-\t\tif (resourceName == null) \n+\t\tfinal Class c = util.class;\n+\t\tfinal String resource = qualifyResourceName(resourceName,true);\n+\t\tif (resource == null) \n \t\t\treturn null;\n-\t\tInputStream is = c.getResourceAsStream(resourceName);\n+\t\tInputStream is = (InputStream) AccessController.doPrivileged(new PrivilegedAction() {\n+            public Object run() { \n+                      InputStream locis = \n+                          c.getResourceAsStream(resource);\n+                                  return locis;\n+            }\n+        }\n+     );\n+\n \t\tif (is != null) \n \t\t\tis = new BufferedInputStream(is, utilMain.BUFFEREDFILESIZE);\n \t\treturn is;",
                "raw_url": "https://github.com/apache/derby/raw/38520af26380540185da2b4af4f153eb84e59c39/java/tools/org/apache/derby/impl/tools/ij/util.java",
                "sha": "12637ef61e8900615c6783345702a64ceabd2871",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/derby/blob/38520af26380540185da2b4af4f153eb84e59c39/java/tools/org/apache/derby/impl/tools/ij/utilMain.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/tools/org/apache/derby/impl/tools/ij/utilMain.java?ref=38520af26380540185da2b4af4f153eb84e59c39",
                "deletions": 3,
                "filename": "java/tools/org/apache/derby/impl/tools/ij/utilMain.java",
                "patch": "@@ -42,6 +42,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import java.io.BufferedInputStream;\n import java.io.FileNotFoundException;\n import java.io.StringReader;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.sql.DriverManager;\n import java.sql.Driver;\n import java.sql.Connection;\n@@ -248,13 +250,25 @@ public void go(LocalizedInput[] in, LocalizedOutput out,\n \n       \t\t//check if the property is set to not show select count and set the static variable\n       \t\t//accordingly. \n-    \t\tboolean showNoCountForSelect = Boolean.getBoolean(\"ij.showNoCountForSelect\");\n+    \t\t//boolean showNoCountForSelect = Boolean.getBoolean(\"ij.showNoCountForSelect\");\n+    \t\tString prop = (String) AccessController.doPrivileged(new PrivilegedAction() {\n+    \t\t\t\t\tpublic Object run() {\n+    \t\t\t\t\t\treturn System.getProperty(\"ij.showNoCountForSelect\");\n+    \t\t\t\t\t}\n+    \t\t});\n+    \t\tboolean showNoCountForSelect = Boolean.valueOf(prop).booleanValue();\n       \t\tJDBCDisplayUtil.showSelectCount = !showNoCountForSelect;\n \n       \t\t//check if the property is set to not show initial connections and accordingly set the\n       \t\t//static variable.\n-    \t\tboolean showNoConnectionsAtStart = Boolean.getBoolean(\"ij.showNoConnectionsAtStart\");\n-      \t\tif (!(showNoConnectionsAtStart)) {\n+    \t\tprop = (String) AccessController.doPrivileged(new PrivilegedAction() {\n+\t\t\t\tpublic Object run() {\n+\t\t\t\t\treturn System.getProperty(\"ij.showNoConnectionsAtStart\");\n+\t\t\t\t}\n+         \t});\n+    \t\tboolean showNoConnectionsAtStart = Boolean.valueOf(prop).booleanValue();\n+\n+    \t\tif (!(showNoConnectionsAtStart)) {\n          \t\ttry {\n            \t\t\tijResult result = ijParser.showConnectionsMethod(true);\n  \t\t\t\t\tdisplayResult(out,result,connEnv[currCE].getConnection());",
                "raw_url": "https://github.com/apache/derby/raw/38520af26380540185da2b4af4f153eb84e59c39/java/tools/org/apache/derby/impl/tools/ij/utilMain.java",
                "sha": "cf2e9307d00e3d28e4d89219ffcb076ed47847cd",
                "status": "modified"
            }
        ],
        "message": "DERBY-2505 (partial): Convert derbynet/testij.java to JUnit. Getting an NPE\nlooking for the test script when running with jars, need to resolve that before\nhooking it into the derbynet _Suite.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@525326 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/93ce86581eee70c7122e4e7560378f64bd3c31aa",
        "patched_files": [
            "testij_sed.properties",
            "testij.sql",
            "testclientij.out",
            "ij.jj",
            "util.java",
            "utilMain.java",
            "Main.java",
            "NetIjTests.java",
            "testij.out",
            "testij_app.properties",
            "ConnectionEnv.java",
            "ij.java",
            "IjTestCase.java",
            "testclientij.sql"
        ],
        "repo": "derby",
        "unit_tests": [
            "testij.java"
        ]
    },
    "derby_3d7c2ea": {
        "bug_id": "derby_3d7c2ea",
        "commit": "https://github.com/apache/derby/commit/3d7c2eab93c0d51ab45bb2704052a71ff42bc1be",
        "file": [
            {
                "additions": 70,
                "blob_url": "https://github.com/apache/derby/blob/3d7c2eab93c0d51ab45bb2704052a71ff42bc1be/java/testing/org/apache/derbyTesting/system/nstest/tester/TesterObject.java",
                "changes": 138,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/system/nstest/tester/TesterObject.java?ref=3d7c2eab93c0d51ab45bb2704052a71ff42bc1be",
                "deletions": 68,
                "filename": "java/testing/org/apache/derbyTesting/system/nstest/tester/TesterObject.java",
                "patch": "@@ -230,74 +230,76 @@ public int doSelectOperation(int numRowsToSelect) throws SQLException {\n \t\t\ts.close();\n \t\t}\n \n-\t\t// Now work over the returned ResultSet and keep track of number of rows\n-\t\t// returned\n-\t\t// We execute the getXXX methods on each of the selected columns so that\n-\t\t// data flow out\n-\t\t// from the network server is also tested.\n-\t\ttry {\n-\t\t\twhile (rSet.next()) {\n-\t\t\t\t// get value of column id\n-\t\t\t\tint id1 = rSet.getInt(1);\n-\n-\t\t\t\t// get value of column t_char\n-\t\t\t\tString str1 = rSet.getString(2);\n-\n-\t\t\t\t// get value of column t_date\n-\t\t\t\tDate dt = rSet.getDate(3);\n-\n-\t\t\t\t// get value of column t_decimal\n-\t\t\t\tdouble doub1 = rSet.getDouble(4);\n-\n-\t\t\t\t// get value of column t_decimal_nn\n-\t\t\t\tdouble doub2 = rSet.getDouble(5);\n-\n-\t\t\t\t// get value of column t_double\n-\t\t\t\tdouble doub3 = rSet.getDouble(6);\n-\n-\t\t\t\t// get value of column t_float\n-\t\t\t\tfloat flt1 = rSet.getFloat(7);\n-\n-\t\t\t\t// get value of column t_int\n-\t\t\t\tint id2 = rSet.getInt(8);\n-\n-\t\t\t\t// get value of column t_longint\n-\t\t\t\tlong lg1 = rSet.getLong(9);\n-\n-\t\t\t\t// get value of column t_numeric_large\n-\t\t\t\tdouble doub4 = rSet.getDouble(10);\n-\n-\t\t\t\t// get value of column t_real\n-\t\t\t\tfloat flt2 = rSet.getFloat(11);\n-\n-\t\t\t\t// get value of column t_smallint\n-\t\t\t\tint id3 = rSet.getInt(12);\n-\n-\t\t\t\t// get value of column t_time\n-\t\t\t\tTime tm = rSet.getTime(13);\n-\n-\t\t\t\t// get value of column t_timestamp\n-\t\t\t\tTimestamp tstmp = rSet.getTimestamp(14);\n-\n-\t\t\t\t// get value of column t_varchar\n-\t\t\t\tString str2 = rSet.getString(15);\n-\n-\t\t\t\t// get value of column serialkey\n-\t\t\t\tlong lg2 = rSet.getLong(16);\n-\n-\t\t\t\tnumRowsSelected++;\n-\t\t\t}\n-\t\t\tNsTest.addStats(NsTest.SELECT, 1);\n-\t\t\tSystem.out.println(this.thread_id + \" selected \" + numRowsSelected\n-\t\t\t\t\t+ \" rows\");\n-\t\t} catch (Exception e) {\n-\t\t\tSystem.out\n-\t\t\t.println(\"FAIL: doSelectOperation() had problems working over the ResultSet\");\n-\t\t\tNsTest.addStats(NsTest.FAILED_SELECT, 1);\n-\t\t\tprintException(\"processing ResultSet during row data retrieval\", e);\n-\t\t\trSet.close();\n-\t\t\ts.close();\n-\t\t\tSystem.out.println(\"Closed the select statement\");\n+\t\tif (rSet != null) {\n+\t\t    // Now work over the returned ResultSet and keep track of number of rows\n+\t\t    // returned\n+\t\t    // We execute the getXXX methods on each of the selected columns so that\n+\t\t    // data flow out\n+\t\t    // from the network server is also tested.\n+\t\t    try {\n+\t\t        while (rSet.next()) {\n+\t\t            // get value of column id\n+\t\t            int id1 = rSet.getInt(1);\n+\n+\t\t            // get value of column t_char\n+\t\t            String str1 = rSet.getString(2);\n+\n+\t\t            // get value of column t_date\n+\t\t            Date dt = rSet.getDate(3);\n+\n+\t\t            // get value of column t_decimal\n+\t\t            double doub1 = rSet.getDouble(4);\n+\n+\t\t            // get value of column t_decimal_nn\n+\t\t            double doub2 = rSet.getDouble(5);\n+\n+\t\t            // get value of column t_double\n+\t\t            double doub3 = rSet.getDouble(6);\n+\n+\t\t            // get value of column t_float\n+\t\t            float flt1 = rSet.getFloat(7);\n+\n+\t\t            // get value of column t_int\n+\t\t            int id2 = rSet.getInt(8);\n+\n+\t\t            // get value of column t_longint\n+\t\t            long lg1 = rSet.getLong(9);\n+\n+\t\t            // get value of column t_numeric_large\n+\t\t            double doub4 = rSet.getDouble(10);\n+\n+\t\t            // get value of column t_real\n+\t\t            float flt2 = rSet.getFloat(11);\n+\n+\t\t            // get value of column t_smallint\n+\t\t            int id3 = rSet.getInt(12);\n+\n+\t\t            // get value of column t_time\n+\t\t            Time tm = rSet.getTime(13);\n+\n+\t\t            // get value of column t_timestamp\n+\t\t            Timestamp tstmp = rSet.getTimestamp(14);\n+\n+\t\t            // get value of column t_varchar\n+\t\t            String str2 = rSet.getString(15);\n+\n+\t\t            // get value of column serialkey\n+\t\t            long lg2 = rSet.getLong(16);\n+\n+\t\t            numRowsSelected++;\n+\t\t        }\n+\t\t        NsTest.addStats(NsTest.SELECT, 1);\n+\t\t        System.out.println(this.thread_id + \" selected \" + numRowsSelected\n+\t\t                + \" rows\");\n+\t\t    } catch (Exception e) {\n+\t\t        System.out\n+\t\t        .println(\"FAIL: doSelectOperation() had problems working over the ResultSet\");\n+\t\t        NsTest.addStats(NsTest.FAILED_SELECT, 1);\n+\t\t        printException(\"processing ResultSet during row data retrieval\", e);\n+\t\t        rSet.close();\n+\t\t        s.close();\n+\t\t        System.out.println(\"Closed the select statement\");\n+\t\t    }\n \t\t}\n \n \t\t// close the ResultSet and statement and release it's resources.",
                "raw_url": "https://github.com/apache/derby/raw/3d7c2eab93c0d51ab45bb2704052a71ff42bc1be/java/testing/org/apache/derbyTesting/system/nstest/tester/TesterObject.java",
                "sha": "94e74bbb34c7d40ee7d141fcce4066016a12a29a",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/derby/blob/3d7c2eab93c0d51ab45bb2704052a71ff42bc1be/java/testing/org/apache/derbyTesting/system/nstest/utils/DbUtil.java",
                "changes": 55,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/system/nstest/utils/DbUtil.java?ref=3d7c2eab93c0d51ab45bb2704052a71ff42bc1be",
                "deletions": 51,
                "filename": "java/testing/org/apache/derbyTesting/system/nstest/utils/DbUtil.java",
                "patch": "@@ -226,16 +226,7 @@ public int add_one_row(Connection conn, String thread_id) throws Exception {\n \t\t\t// ps.close();\n \t\t}\n \t\t\n-\t\tif (ps != null) {\n-\t\t\ttry {\n-\t\t\t\tps.close();\n-\t\t\t\t\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tprintException(\n-\t\t\t\t\t\t\"closing insert stmt in dbUtil when there was a problem creating it\",\n-\t\t\t\t\t\te);\n-\t\t\t}\n-\t\t}\n+\t\n \t\treturn rowsAdded;\n \t}\n \t\n@@ -256,8 +247,6 @@ public int update_one_row(Connection conn, String thread_id)\n \t\tif (skey == 0) { // means we did not find a row\n \t\t\tSystem.out.println(thread_id\n \t\t\t\t\t+ \" could not find a row to update or there was an error.\");\n-\t\t\tif (ps2 != null)\n-\t\t\t\tps2.close();\n \t\t\treturn rowsUpdated;\n \t\t}\n \t\t\n@@ -272,7 +261,6 @@ public int update_one_row(Connection conn, String thread_id)\n \t\t\t\t\t+ \" = ? \" + \" where serialkey = \" + skey);\n \t\t\t\n \t\t} catch (Exception e) {\n-\t\t\tps2.close();\n \t\t\tprintException(\n \t\t\t\t\t\"closing update prepared stmt in dbUtil.update_one_row() \",\n \t\t\t\t\te);\n@@ -385,7 +373,6 @@ public int update_one_row(Connection conn, String thread_id)\n \t\t\t\t\t+ \" \" + sqe.getMessage());\n \t\t\tsqe.printStackTrace();\n \t\t} catch (Exception e) {\n-\t\t\tps2.close();\n \t\t\tprintException(\"Error in update_one_row()\", e);\n \t\t\te.printStackTrace();\n \t\t} finally {\n@@ -400,14 +387,7 @@ public int update_one_row(Connection conn, String thread_id)\n \t\t\tSystem.out\n \t\t\t.println(thread_id + \" update failed, no such row exists\");\n \t\t\n-\t\tif (ps2 != null) {\n-\t\t\ttry {\n-\t\t\t\tps2.close();\n-\t\t\t\t\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tprintException(\"closing update stmt after work is done\", e);\n-\t\t\t}\n-\t\t}\n+\t\n \t\treturn rowsUpdated;\n \t}\n \t\n@@ -432,8 +412,6 @@ public int delete_one_row(Connection conn, String thread_id)\n \t\t\tSystem.out\n \t\t\t.println(\"Unexpected error preparing the statement in delete_one()\");\n \t\t\tprintException(\"delete_one_row prepare \", e);\n-\t\t\tif (ps != null)\n-\t\t\t\tps.close();\n \t\t\treturn rowsDeleted;\n \t\t}\n \t\t\n@@ -443,7 +421,6 @@ public int delete_one_row(Connection conn, String thread_id)\n \t\tif (skey == 0) { // means we did not find a row\n \t\t\tSystem.out.println(thread_id\n \t\t\t\t\t+ \" could not find a row to delete or there was an error.\");\n-\t\t\tps.close();\n \t\t\treturn rowsDeleted;\n \t\t}\n \t\t\n@@ -453,7 +430,6 @@ public int delete_one_row(Connection conn, String thread_id)\n \t\t} catch (Exception e) {\n \t\t\tSystem.out\n \t\t\t.println(\"Error in delete_one(): either with setLong() or executeUpdate\");\n-\t\t\tps.close();\n \t\t\tprintException(\"failure to execute delete stmt\", e);\n \t\t} finally {\n \t\t\tconn\n@@ -468,16 +444,6 @@ public int delete_one_row(Connection conn, String thread_id)\n \t\t\tSystem.out.println(thread_id + \" delete for serialkey \" + skey\n \t\t\t\t\t+ \" failed, no such row exists.\");\n \t\t\n-\t\tif (ps != null) {\n-\t\t\ttry {\n-\t\t\t\tps.close();\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tSystem.out\n-\t\t\t\t.println(\"Error in closing prepared statement of delete_one()\");\n-\t\t\t\tprintException(\"failure to close delete stmt after work done\",\n-\t\t\t\t\t\te);\n-\t\t\t}\n-\t\t}\n \t\treturn rowsDeleted;\n \t}// end of method delete_one()\n \t\n@@ -499,8 +465,6 @@ public long pick_one(Connection conn, String thread_id) throws Exception {\n \t\t\tps = conn\n \t\t\t.prepareStatement(\"select max(serialkey) from nstesttab where serialkey > ?\");\n \t\t} catch (Exception e) {\n-\t\t\tif (ps != null)\n-\t\t\t\tps.close();\n \t\t\tSystem.out\n \t\t\t.println(\"Unexpected error creating the select prepared statement in pick_one()\");\n \t\t\tprintException(\"failure to prepare select stmt in pick_one()\", e);\n@@ -543,22 +507,11 @@ public long pick_one(Connection conn, String thread_id) throws Exception {\n \t\t\tsqe.printStackTrace();\n \t\t}\n \t\t\n-\t\tif (ps != null) {\n-\t\t\ttry {\n-\t\t\t\tps.close();\n-\t\t\t\t\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tSystem.out\n-\t\t\t\t.println(\"Error in closing prepared statement of pick_one()\");\n-\t\t\t\tprintException(\n-\t\t\t\t\t\t\"failure closing select stmt in pick_one after work is done\",\n-\t\t\t\t\t\te);\n-\t\t\t}\n-\t\t}\n+\t\n \t\t\n \t\treturn rowToReturn;\n \t\t\n-\t}// end of method pick_one(...)\n+\t}//of method pick_one(...)\n \t\n \t// ** This method abstracts exception message printing for all exception\n \t// messages. You may want to change",
                "raw_url": "https://github.com/apache/derby/raw/3d7c2eab93c0d51ab45bb2704052a71ff42bc1be/java/testing/org/apache/derbyTesting/system/nstest/utils/DbUtil.java",
                "sha": "db38fe9701068d95c5d4a9e9d035b965dc54422d",
                "status": "modified"
            }
        ],
        "message": "DERBY-5421;  NullPointerException during system.nstest.utils.Dbutil.update_one_row\n\tmerging 1177446 from 10.8 to trunk\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1177475 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/8ee7b83d09ef3f81b145a5cb033134d459ff46e5",
        "patched_files": [
            "DbUtil.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "TesterObject.java"
        ]
    },
    "derby_3e293c2": {
        "bug_id": "derby_3e293c2",
        "commit": "https://github.com/apache/derby/commit/3e293c2435ff52a91169f8ec8f555c0b83fbec2c",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/derby/blob/3e293c2435ff52a91169f8ec8f555c0b83fbec2c/java/engine/org/apache/derby/impl/sql/compile/GroupByList.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/GroupByList.java?ref=3e293c2435ff52a91169f8ec8f555c0b83fbec2c",
                "deletions": 5,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/GroupByList.java",
                "patch": "@@ -213,11 +213,10 @@ void bindGroupByColumns(SelectNode select, List<AggregateNode> aggregates)\n \t\t}\n \n \t\t/* Verify that no subqueries got added to the dummy list */\n-\t\tif (SanityManager.DEBUG)\n-\t\t{\n-\t\t\tSanityManager.ASSERT(dummySubqueryList.size() == 0,\n-\t\t\t\t\"dummySubqueryList.size() is expected to be 0\");\n-\t\t}\n+        if (dummySubqueryList.size() != 0) {\n+            throw StandardException.newException(\n+                    SQLState.LANG_SUBQUERY_IN_GROUPBY_LIST);\n+        }\n \n \t\tnumGroupingColsAdded+= numColsAddedHere;\n \t}",
                "raw_url": "https://github.com/apache/derby/raw/3e293c2435ff52a91169f8ec8f555c0b83fbec2c/java/engine/org/apache/derby/impl/sql/compile/GroupByList.java",
                "sha": "3b8ac1d03c73050bc0e08580ad6b544255758469",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/derby/blob/3e293c2435ff52a91169f8ec8f555c0b83fbec2c/java/engine/org/apache/derby/loc/messages.xml",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/loc/messages.xml?ref=3e293c2435ff52a91169f8ec8f555c0b83fbec2c",
                "deletions": 1,
                "filename": "java/engine/org/apache/derby/loc/messages.xml",
                "patch": "@@ -2432,10 +2432,15 @@ Guide.\n             </msg>\n \n             <msg>\n-                <name>42Y26</name>\n+                <name>42Y26.S.0</name>\n                 <text>Aggregates are not allowed in the GROUP BY list.</text>\n             </msg>\n \n+            <msg>\n+                <name>42Y26.S.1</name>\n+                <text>Subqueries are not allowed in the GROUP BY list.</text>\n+            </msg>\n+\n             <msg>\n                 <name>42Y27</name>\n                 <text>Parameters are not allowed in the trigger action.</text>",
                "raw_url": "https://github.com/apache/derby/raw/3e293c2435ff52a91169f8ec8f555c0b83fbec2c/java/engine/org/apache/derby/loc/messages.xml",
                "sha": "9fbada604d26fc53f8e22106ccf916ca79308328",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/derby/blob/3e293c2435ff52a91169f8ec8f555c0b83fbec2c/java/shared/org/apache/derby/shared/common/reference/SQLState.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/shared/org/apache/derby/shared/common/reference/SQLState.java?ref=3e293c2435ff52a91169f8ec8f555c0b83fbec2c",
                "deletions": 1,
                "filename": "java/shared/org/apache/derby/shared/common/reference/SQLState.java",
                "patch": "@@ -982,7 +982,8 @@ The message identifier (ie. the value that matches a field in this class)\n \tString LANG_BAD_J_D_B_C_TYPE_INFO                                  = \"42Y23\";\n \tString LANG_VIEW_NOT_UPDATEABLE                                    = \"42Y24\";\n \tString LANG_UPDATE_SYSTEM_TABLE_ATTEMPTED                          = \"42Y25\";\n-    \tString LANG_AGGREGATE_IN_GROUPBY_LIST                              = \"42Y26\";\n+    String LANG_AGGREGATE_IN_GROUPBY_LIST                              = \"42Y26.S.0\";\n+    String LANG_SUBQUERY_IN_GROUPBY_LIST                               = \"42Y26.S.1\";\n \tString LANG_NO_PARAMS_IN_TRIGGER_ACTION                            = \"42Y27\";\n \t// String LANG_NO_TRIGGER_ON_SYSTEM_TABLE                             = \"42Y28\"; -- replaced by 42X62\n \tString LANG_INVALID_NON_GROUPED_SELECT_LIST                        = \"42Y29\";",
                "raw_url": "https://github.com/apache/derby/raw/3e293c2435ff52a91169f8ec8f555c0b83fbec2c/java/shared/org/apache/derby/shared/common/reference/SQLState.java",
                "sha": "df1c62c42a0f4e71506e63b74a8070b9ddbba3a8",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/derby/blob/3e293c2435ff52a91169f8ec8f555c0b83fbec2c/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java?ref=3e293c2435ff52a91169f8ec8f555c0b83fbec2c",
                "deletions": 1,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "patch": "@@ -370,7 +370,13 @@ public void testGroupByErrors()\n         \n         assertStatementError(\"X0X67\", st,\n             \" select c1, max(1) from unmapped group by c1\");\n-\t\tst.close();\n+\n+        // group by on aggregate\n+        assertCompileError(\"42Y26\", \"select sum(a) from t1 group by sum(a)\");\n+\n+        // group by on subquery (DERBY-4403)\n+        assertCompileError(\"42Y26\",\n+                \"select sum(a) from t1 group by (select a from t1)\");\n \t}\n \n \t/**",
                "raw_url": "https://github.com/apache/derby/raw/3e293c2435ff52a91169f8ec8f555c0b83fbec2c/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "sha": "f594a72fac06951ac18e04b9733e5c4ab04841b3",
                "status": "modified"
            }
        ],
        "message": "DERBY-4403: Disallow subqueries in the GROUP BY list\n\nQueries that were grouped by subqueries used to fail with a\nNullPointerException or an assert failure. Make them fail with a\nproper syntax error instead.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1575226 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/15e94e0d3b31c9d0bb28841f7e591536832a30b1",
        "patched_files": [
            "messages.xml",
            "SQLState.java",
            "GroupByList.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "GroupByTest.java"
        ]
    },
    "derby_40a9fb5": {
        "bug_id": "derby_40a9fb5",
        "commit": "https://github.com/apache/derby/commit/40a9fb59ee6af32ea474ceae3d82443af1d6f668",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/derby/blob/40a9fb59ee6af32ea474ceae3d82443af1d6f668/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java?ref=40a9fb59ee6af32ea474ceae3d82443af1d6f668",
                "deletions": 9,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java",
                "patch": "@@ -304,12 +304,8 @@ public void bindTargetExpressions(FromList fromListParam)\n \t}\n \n \t/**\n-\t * Set the type of each parameter in the result column list if this node\n-\t * represents a table constructor (aka VALUES clause). Table constructors\n-\t * are represented either by a {@code RowResultSetNode} or by a\n-\t * {@code UnionNode} with multiple {@code RowResultSetNode} children and\n-\t * whose {@code tableConstructor()} method returns {@code true}. For all\n-\t * other nodes, this method should be a no-op.\n+\t * Set the type of each parameter in the result column list for this\n+\t * table constructor.\n \t *\n \t * @param typeColumns\tThe ResultColumnList containing the desired result\n \t *\t\t\t\t\t\ttypes.\n@@ -319,9 +315,17 @@ public void bindTargetExpressions(FromList fromListParam)\n \tvoid setTableConstructorTypes(ResultColumnList typeColumns)\n \t\t\tthrows StandardException\n \t{\n-\t\t// Nothing to be done unless this node represents a VALUES clause, in\n-\t\t// which case the overrides in RowResultSetNode or UnionNode will do\n-\t\t// the necessary work.\n+        // VALUES clause needs special handling that's taken care of in a\n+        // sub-class. For all other nodes, just go through the result columns\n+        // and set the type for dynamic parameters.\n+        for (int i = 0; i < resultColumns.size(); i++) {\n+            ResultColumn rc = (ResultColumn) resultColumns.elementAt(i);\n+            ValueNode re = rc.getExpression();\n+            if (re != null && re.requiresTypeFromContext()) {\n+                ResultColumn typeCol = (ResultColumn) typeColumns.elementAt(i);\n+                re.setType(typeCol.getTypeServices());\n+            }\n+        }\n \t}\n \n \t/**",
                "raw_url": "https://github.com/apache/derby/raw/40a9fb59ee6af32ea474ceae3d82443af1d6f668/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java",
                "sha": "ff9a71d1f3c041c7bd9c623fa0c9ebf5ade878f0",
                "status": "modified"
            },
            {
                "additions": 53,
                "blob_url": "https://github.com/apache/derby/blob/40a9fb59ee6af32ea474ceae3d82443af1d6f668/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java",
                "changes": 53,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java?ref=40a9fb59ee6af32ea474ceae3d82443af1d6f668",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java",
                "patch": "@@ -34,6 +34,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n  */\n public class InsertTest extends BaseJDBCTestCase {\n \n+    private static final String PARAMETER_IN_SELECT_LIST = \"42X34\";\n+\n     public InsertTest(String name) {\n         super(name);\n     }\n@@ -134,4 +136,55 @@ public void testInsertFromExceptOrIntersect() throws SQLException {\n                 \"1\");\n         s.execute(\"delete from t3\");\n     }\n+\n+    /**\n+     * Regression test for DERBY-4671. Verify that dynamic parameters can be\n+     * used in the select list in an INSERT INTO ... SELECT FROM statement.\n+     * This used to work, but the fix for DERBY-4420 made it throw a\n+     * NullPointerException.\n+     */\n+    public void testInsertFromSelectWithParameters() throws SQLException {\n+        Statement s = createStatement();\n+        s.execute(\"create table derby4671(x int)\");\n+        s.execute(\"insert into derby4671 values (1), (2)\");\n+\n+        // This call failed with a NullPointerException\n+        PreparedStatement ins1 = prepareStatement(\n+                \"insert into derby4671 select ? from derby4671\");\n+\n+        ins1.setInt(1, 7);\n+        assertUpdateCount(ins1, 2);\n+\n+        JDBC.assertFullResultSet(\n+                s.executeQuery(\"select * from derby4671 order by x\"),\n+                new String[][] {{\"1\"}, {\"2\"}, {\"7\"}, {\"7\"}});\n+\n+        // Also verify that it works when the ? is in an expression\n+        PreparedStatement ins2 = prepareStatement(\n+                \"insert into derby4671 select (x+?)*10 from derby4671\");\n+\n+        ins2.setInt(1, 77);\n+        assertUpdateCount(ins2, 4);\n+\n+        JDBC.assertFullResultSet(\n+                s.executeQuery(\"select * from derby4671 order by x\"),\n+                new String[][] {\n+                    {\"1\"}, {\"2\"}, {\"7\"}, {\"7\"},\n+                    {\"780\"}, {\"790\"}, {\"840\"}, {\"840\"}});\n+\n+        // We only accept ? in the top level select list, so these should\n+        // still fail\n+        assertCompileError(\n+                PARAMETER_IN_SELECT_LIST,\n+                \"insert into derby4671 select ? from derby4671 \"\n+                + \"union select ? from derby4671\");\n+        assertCompileError(\n+                PARAMETER_IN_SELECT_LIST,\n+                \"insert into derby4671 select ? from derby4671 \"\n+                + \"except select ? from derby4671\");\n+        assertCompileError(\n+                PARAMETER_IN_SELECT_LIST,\n+                \"insert into derby4671 select ? from derby4671 \"\n+                + \"intersect select ? from derby4671\");\n+    }\n }",
                "raw_url": "https://github.com/apache/derby/raw/40a9fb59ee6af32ea474ceae3d82443af1d6f668/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java",
                "sha": "fe250b539056139980044fe5e6daa4693e82be84",
                "status": "modified"
            }
        ],
        "message": "DERBY-4671: Embedded driver does not work with jbossCache\n\nSet the type of the dynamic parameters in statements like\n\n  INSERT INTO T SELECT ? FROM T\n\nto prevent a NullPointerException and to revert to the pre-10.6\nbehaviour.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@948045 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/da4e4830e4e74aee09c7f03df2394c2878a4b93b",
        "patched_files": [
            "ResultSetNode.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "InsertTest.java"
        ]
    },
    "derby_4ce6a9b": {
        "bug_id": "derby_4ce6a9b",
        "commit": "https://github.com/apache/derby/commit/4ce6a9b488aff11cc705a26c1ca30d61091a3ca2",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/derby/blob/4ce6a9b488aff11cc705a26c1ca30d61091a3ca2/java/engine/org/apache/derby/impl/sql/compile/CallStatementNode.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/CallStatementNode.java?ref=4ce6a9b488aff11cc705a26c1ca30d61091a3ca2",
                "deletions": 1,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/CallStatementNode.java",
                "patch": "@@ -122,15 +122,24 @@ public void bindStatement() throws StandardException\n \t\tif (SanityManager.DEBUG)\n \t\t\tSanityManager.ASSERT((dd != null), \"Failed to get data dictionary\");\n \n+        SubqueryList subqueries = (SubqueryList) getNodeFactory().getNode(\n+                C_NodeTypes.SUBQUERY_LIST, getContextManager());\n+\n \t\tgetCompilerContext().pushCurrentPrivType(getPrivType());\n \t\tmethodCall = (JavaToSQLValueNode) methodCall.bindExpression(\n \t\t\t\t\t\t\t(FromList) getNodeFactory().getNode(\n \t\t\t\t\t\t\t\tC_NodeTypes.FROM_LIST,\n \t\t\t\t\t\t\t\tgetNodeFactory().doJoinOrderOptimization(),\n \t\t\t\t\t\t\t\tgetContextManager()), \n-\t\t\t\t\t\t\tnull,\n+                            subqueries,\n \t\t\t\t\t\t\tnull);\n \n+        // Don't allow sub-queries in CALL statements.\n+        if (subqueries.size() != 0) {\n+            throw StandardException.newException(\n+                    SQLState.LANG_INVALID_CALL_STATEMENT);\n+        }\n+\n \t\t// Disallow creation of BEFORE triggers which contain calls to \n \t\t// procedures that modify SQL data. \n   \t\tcheckReliability();",
                "raw_url": "https://github.com/apache/derby/raw/4ce6a9b488aff11cc705a26c1ca30d61091a3ca2/java/engine/org/apache/derby/impl/sql/compile/CallStatementNode.java",
                "sha": "18fdf17f91ae25b9e19aaadf4e5a4c48b9da62db",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/derby/blob/4ce6a9b488aff11cc705a26c1ca30d61091a3ca2/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java?ref=4ce6a9b488aff11cc705a26c1ca30d61091a3ca2",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java",
                "patch": "@@ -48,6 +48,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n public class LangProcedureTest extends BaseJDBCTestCase {\n \n     private final static String LANG_STRING_TRUNCATION = \"22001\";\n+    private final static String LANG_INVALID_CALL_STATEMENT = \"42X74\";\n     private final String thisClassName = getClass().getName();\n \n     public LangProcedureTest(String name) {\n@@ -202,6 +203,10 @@ public void testCreateRoutineErrors() throws SQLException {\n             \"42X15\", s,\n             \"call syscs_util.syscs_set_database_property(\\\"foo\\\", \\\"bar\\\")\");\n \n+        // Not so long ago (DERBY-6212) this caused a NullPointerException.\n+        assertCompileError(LANG_INVALID_CALL_STATEMENT,\n+          \"call syscs_util.syscs_set_database_property('foo', (values 'bar'))\");\n+\n         s.close();\n     }\n ",
                "raw_url": "https://github.com/apache/derby/raw/4ce6a9b488aff11cc705a26c1ca30d61091a3ca2/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java",
                "sha": "9fbef5cf73979065bc1996fab8e5bf026da9b101",
                "status": "modified"
            }
        ],
        "message": "DERBY-6212: NullPointerException when calling a procedure with sub-query as argument\n\nRaise a syntax error instead of a NullPointerException if a sub-query\nis given as argument to a CALL statement.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1480909 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/b565f41eb31d118c572770aaf69bd0c568538ff5",
        "patched_files": [
            "CallStatementNode.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "LangProcedureTest.java"
        ]
    },
    "derby_4f7da81": {
        "bug_id": "derby_4f7da81",
        "commit": "https://github.com/apache/derby/commit/4f7da81c8876b5a8d02b4e2fbb3bcbca9fc90401",
        "file": [
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/derby/blob/4f7da81c8876b5a8d02b4e2fbb3bcbca9fc90401/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerateController.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerateController.java?ref=4f7da81c8876b5a8d02b4e2fbb3bcbca9fc90401",
                "deletions": 0,
                "filename": "java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerateController.java",
                "patch": "@@ -284,6 +284,14 @@ public boolean fetch(\n                 pos, (RowPosition) null, false, true);\n         }\n \n+        if (pos.current_page == null)\n+        {\n+            // The page is not latched after locking the row. This happens if\n+            // the row was deleted while we were waiting for the lock. Return\n+            // false to indicate that the row is no longer valid. (DERBY-4676)\n+            return false;\n+        }\n+\n         // Fetch the row.\n         // RESOLVE (STO061) - don't know whether the fetch is for update or not.\n         //\n@@ -381,6 +389,14 @@ public boolean fetch(\n                 pos, (RowPosition) null, false, waitForLock);\n         }\n \n+        if (pos.current_page == null)\n+        {\n+            // The page is not latched after locking the row. This happens if\n+            // the row was deleted while we were waiting for the lock. Return\n+            // false to indicate that the row is no longer valid. (DERBY-4676)\n+            return false;\n+        }\n+\n         // Fetch the row.\n         // RESOLVE (STO061) - don't know whether the fetch is for update or not.\n         //",
                "raw_url": "https://github.com/apache/derby/raw/4f7da81c8876b5a8d02b4e2fbb3bcbca9fc90401/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerateController.java",
                "sha": "e1a8ac4396b72ddbe73add28fc3fb98c004e7916",
                "status": "modified"
            },
            {
                "additions": 51,
                "blob_url": "https://github.com/apache/derby/blob/4f7da81c8876b5a8d02b4e2fbb3bcbca9fc90401/java/engine/org/apache/derby/impl/store/access/conglomerate/OpenConglomerate.java",
                "changes": 53,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/store/access/conglomerate/OpenConglomerate.java?ref=4f7da81c8876b5a8d02b4e2fbb3bcbca9fc90401",
                "deletions": 2,
                "filename": "java/engine/org/apache/derby/impl/store/access/conglomerate/OpenConglomerate.java",
                "patch": "@@ -276,11 +276,25 @@ else if (pos.current_pageno != ContainerHandle.INVALID_PAGE_NUMBER)\n     }\n \n     /**\n+     * <p>\n      * Latch the page containing the current RowPosition.\n+     * </p>\n+     *\n      * <p>\n      * This implementation also automatically updates the RowPosition to\n      * point at the slot containing the current RowPosition.  This slot \n      * value is only valid while the latch is held.\n+     * </p>\n+     *\n+     * <p>\n+     * If the row pointed to by {@code pos} does not exist (including the\n+     * case where the page itself does not exist), the page will not be\n+     * latched, and {@code pos.current_page} will be set to {@code null}.\n+     * </p>\n+     *\n+     * @param pos the position to a row on the page that should be latched\n+     * @return {@code true} if the page was successfully latched, or\n+     * {@code false} otherwise\n      *\n \t * @exception  StandardException  Standard exception policy.\n      **/\n@@ -329,13 +343,18 @@ public boolean latchPage(RowPosition pos)\n \n \n     /**\n+     * <p>\n      * Lock row at given row position for read.\n+     * </p>\n+     *\n      * <p>\n      * This routine requests a row lock NOWAIT on the row located at the given\n      * RowPosition.  If the lock is granted NOWAIT the \n      * routine will return true.  If the lock cannot be granted NOWAIT, then \n      * the routine will release the latch on \"page\" and then it will request \n      * a WAIT lock on the row.  \n+     * </p>\n+     *\n      * <p>\n      * This implementation:\n      * Assumes latch held on current_page.\n@@ -344,20 +363,31 @@ public boolean latchPage(RowPosition pos)\n      * If the current_rh field of RowPosition is null, it is assumed the we\n      * want to lock the indicated current_slot.  Upon return current_rh will\n      * point to the record handle associated with current_slot.\n+     * </p>\n+     *\n      * <p>\n      * After waiting and getting the lock on the row, this routine will fix up\n      * RowPosition to point at the row locked.  This means it will get the\n      * page latch again, and it will fix the current_slot to point at the \n      * waited for record handle - it may have moved while waiting on the lock.\n+     * </p>\n+     *\n+     * <p>\n+     * When this method returns, the page holding the row pointed to by the\n+     * {@code RowLocation} is latched. This is however not the case if\n+     * {@code moveForwardIfRowDisappears} is {@code false} and the row has\n+     * disappeared. Then the latch will be released before the method returns,\n+     * and {@code pos.current_page} will be set to {@code null}.\n+     * </p>\n      *\n      * @param pos       Position to lock.\n      * @param aux_pos   If you have to give up latch to get lock, then also \n      *                  unlock this position if it is non-null.\n      * @param moveForwardIfRowDisappears\n      *                  If true, then this routine must handle the case where\n      *                  the row id we are waiting on disappears when the latch\n-     *                  is released.  If false an exception will be thrown if\n-     *                  the row disappears.\n+     *                  is released.  If false, and the row disappears, the\n+     *                  latch will be released again and false is returned.\n      * @param waitForLock\n      *                  if true wait for lock, if lock can't be granted NOWAIT,\n      *                  else if false, throw a lock timeout exception if the\n@@ -470,6 +500,25 @@ public boolean lockPositionForRead(\n         return(lock_granted_with_latch_held);\n     }\n \n+    /**\n+     * <p>\n+     * Lock the row at the given position for write.\n+     * </p>\n+     *\n+     * <p>\n+     * The page pointed to by the {@code RowPosition} is assumed to be latched\n+     * when this method is called. If the lock cannot be obtained without\n+     * waiting, the latch will be released and re-obtained when the lock has\n+     * been acquired.\n+     * </p>\n+     *\n+     * <p>\n+     * If the latch was released while waiting for the lock, and the row does\n+     * not exist after the lock is obtained, the latch will be released again\n+     * before the method returns, and {@code pos.current_page} will be set to\n+     * {@code null}.\n+     * </p>\n+     */\n     public boolean lockPositionForWrite(\n     RowPosition pos,\n     boolean     forInsert,",
                "raw_url": "https://github.com/apache/derby/raw/4f7da81c8876b5a8d02b4e2fbb3bcbca9fc90401/java/engine/org/apache/derby/impl/store/access/conglomerate/OpenConglomerate.java",
                "sha": "0d174b0a09ab032b5bce59ce1bbbd3eba31e2515",
                "status": "modified"
            },
            {
                "additions": 153,
                "blob_url": "https://github.com/apache/derby/blob/4f7da81c8876b5a8d02b4e2fbb3bcbca9fc90401/java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby4676Test.java",
                "changes": 153,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby4676Test.java?ref=4f7da81c8876b5a8d02b4e2fbb3bcbca9fc90401",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby4676Test.java",
                "patch": "@@ -0,0 +1,153 @@\n+/*\n+  Class org.apache.derbyTesting.functionTests.tests.store.Derby4676Test\n+\n+  Licensed to the Apache Software Foundation (ASF) under one or more\n+  contributor license agreements.  See the NOTICE file distributed with\n+  this work for additional information regarding copyright ownership.\n+  The ASF licenses this file to you under the Apache License, Version 2.0\n+  (the \"License\"); you may not use this file except in compliance with\n+  the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+\n+*/\n+\n+package org.apache.derbyTesting.functionTests.tests.store;\n+\n+import java.sql.Connection;\n+import java.sql.Statement;\n+import java.util.ArrayList;\n+import java.util.List;\n+import junit.framework.Test;\n+import org.apache.derbyTesting.junit.BaseJDBCTestCase;\n+import org.apache.derbyTesting.junit.JDBC;\n+import org.apache.derbyTesting.junit.TestConfiguration;\n+\n+/**\n+ * Regression test for DERBY-4676.\n+ */\n+public class Derby4676Test extends BaseJDBCTestCase {\n+    /** List of {@code HelperThread}s used in the test. */\n+    private List threads;\n+\n+    public Derby4676Test(String name) {\n+        super(name);\n+    }\n+\n+    /** Create a suite of tests. */\n+    public static Test suite() {\n+        return TestConfiguration.defaultSuite(Derby4676Test.class);\n+    }\n+\n+    /** Set up the test environment. */\n+    protected void setUp() {\n+        threads = new ArrayList();\n+    }\n+\n+    /** Tear down the test environment. */\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+\n+        List localThreads = threads;\n+        threads = null;\n+\n+        // First, wait for all threads to terminate and close all connections.\n+        for (int i = 0; i < localThreads.size(); i++) {\n+            HelperThread t = (HelperThread) localThreads.get(i);\n+            t.join();\n+            Connection c = t.conn;\n+            if (c != null && !c.isClosed()) {\n+                c.rollback();\n+                c.close();\n+            }\n+        }\n+\n+        // Then check if any of the helper threads failed.\n+        for (int i = 0; i < localThreads.size(); i++) {\n+            HelperThread t = (HelperThread) localThreads.get(i);\n+            if (t.exception != null) {\n+                fail(\"Helper thread failed\", t.exception);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * <p>\n+     * Regression test case for DERBY-4676. Before the fix, fetching a row by\n+     * its row location would sometimes fail with a NullPointerException if\n+     * the row was deleted while the fetch operation was waiting for a lock.\n+     * </p>\n+     */\n+    public void testConcurrentFetchAndDelete() throws Exception {\n+        // Create a table to use in the test. Note that we need to have a\n+        // non-covering index on the table so that the row location is fetched\n+        // from the index and used to look up the row in the heap. If the\n+        // index covers all the columns, we won't fetch the row location from\n+        // it and the bug won't be reproduced.\n+        Statement s = createStatement();\n+        s.execute(\"create table t(x int, y int)\");\n+        s.execute(\"create index idx on t(x)\");\n+\n+        // Create a thread that repeatedly inserts and deletes a row.\n+        HelperThread thread = new HelperThread() {\n+            void body(Connection conn) throws Exception {\n+                Thread.sleep(1000); // Wait for the select loop to start so\n+                                    // that the insert/delete loop doesn't\n+                                    // complete before it has started.\n+                Statement s = conn.createStatement();\n+                for (int i = 0; i < 1000; i++) {\n+                    s.execute(\"insert into t values (1,2)\");\n+                    s.execute(\"delete from t\");\n+                }\n+                s.close();\n+            }\n+        };\n+\n+        startThread(thread);\n+\n+        // As long as the insert/delete thread is running, try to read the\n+        // rows of the table using the index. This used to cause intermittent\n+        // NullPointerExceptions.\n+        while (thread.isAlive()) {\n+            JDBC.assertDrainResults(s.executeQuery(\n+                \"select * from t --derby-properties index=idx\"));\n+        }\n+    }\n+\n+    /**\n+     * Helper class for running database operations in a separate thread and\n+     * in a separate transaction.\n+     */\n+    private abstract class HelperThread extends Thread {\n+        Exception exception;\n+        Connection conn;\n+\n+        public void run() {\n+            try {\n+                conn = openDefaultConnection();\n+                body(conn);\n+            } catch (Exception ex) {\n+                exception = ex;\n+            }\n+        }\n+\n+        abstract void body(Connection conn) throws Exception;\n+    }\n+\n+    /**\n+     * Start a helper thread and register it for automatic clean-up in\n+     * {@link #tearDown()}.\n+     *\n+     * @param thread the helper thread to start\n+     */\n+    private void startThread(HelperThread thread) {\n+        thread.start();\n+        threads.add(thread);\n+    }\n+}",
                "raw_url": "https://github.com/apache/derby/raw/4f7da81c8876b5a8d02b4e2fbb3bcbca9fc90401/java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby4676Test.java",
                "sha": "c226c44e570295626830401cc482b1331a4df5a5",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/derby/blob/4f7da81c8876b5a8d02b4e2fbb3bcbca9fc90401/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java?ref=4f7da81c8876b5a8d02b4e2fbb3bcbca9fc90401",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java",
                "patch": "@@ -57,6 +57,7 @@ public static Test suite() {\n         suite.addTest(StreamingColumnTest.suite());\n         suite.addTest(Derby3625Test.suite());\n         suite.addTest(Derby151Test.suite());\n+        suite.addTest(Derby4676Test.suite());\n         suite.addTest(BootLockTest.suite());\n         suite.addTest(PositionedStoreStreamTest.suite());\n         suite.addTest(OSReadOnlyTest.suite());",
                "raw_url": "https://github.com/apache/derby/raw/4f7da81c8876b5a8d02b4e2fbb3bcbca9fc90401/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java",
                "sha": "e0268295ed2040d753942e1ca1258dde4cb72ef1",
                "status": "modified"
            }
        ],
        "message": "DERBY-4676: NullPointerException on SELECT on INNER JOIN\n\nCheck whether the page is latched after waiting for a lock, and assume\nthat the row has been deleted if it is not latched.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@952138 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/571f201a7ce93ee524e4a20777e0394fd4237a9a",
        "patched_files": [
            "_Suite.java",
            "OpenConglomerate.java",
            "GenericConglomerateController.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "Derby4676Test.java"
        ]
    },
    "derby_4fc5f9c": {
        "bug_id": "derby_4fc5f9c",
        "commit": "https://github.com/apache/derby/commit/4fc5f9c837aab62a44f559e5bbb38abb2be3299a",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/derby/blob/4fc5f9c837aab62a44f559e5bbb38abb2be3299a/java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java?ref=4fc5f9c837aab62a44f559e5bbb38abb2be3299a",
                "deletions": 1,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java",
                "patch": "@@ -387,7 +387,7 @@ void copyFields(ColumnReference oldCR)\n \t * @exception StandardException\t\tThrown on error\n \t */\n     @Override\n-    ValueNode bindExpression(FromList fromList,\n+    ColumnReference bindExpression(FromList fromList,\n                              SubqueryList subqueryList,\n                              List<AggregateNode> aggregates)\n             throws StandardException",
                "raw_url": "https://github.com/apache/derby/raw/4fc5f9c837aab62a44f559e5bbb38abb2be3299a/java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java",
                "sha": "cdd9fa84882a9e32ef732fbf4e4127c75219fd9e",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/derby/blob/4fc5f9c837aab62a44f559e5bbb38abb2be3299a/java/engine/org/apache/derby/impl/sql/compile/FromList.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/FromList.java?ref=4fc5f9c837aab62a44f559e5bbb38abb2be3299a",
                "deletions": 1,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/FromList.java",
                "patch": "@@ -622,7 +622,8 @@ ResultColumnList expandAll(TableName allTableName)\n \t *\n \t * @param columnReference\tThe ColumnReference describing the column to bind\n \t *\n-\t * @return\tResultColumn\tThe matching ResultColumn\n+     * @return ResultColumn     The matching ResultColumn, or {@code null} if\n+     *                          there is no matching column\n \t *\n \t * @exception StandardException\t\tThrown on error\n \t */",
                "raw_url": "https://github.com/apache/derby/raw/4fc5f9c837aab62a44f559e5bbb38abb2be3299a/java/engine/org/apache/derby/impl/sql/compile/FromList.java",
                "sha": "9ce9be52243148fdcbe411fbfc8e9e5c4bbe7b71",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/derby/blob/4fc5f9c837aab62a44f559e5bbb38abb2be3299a/java/engine/org/apache/derby/impl/sql/compile/MergeNode.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/MergeNode.java?ref=4fc5f9c837aab62a44f559e5bbb38abb2be3299a",
                "deletions": 2,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/MergeNode.java",
                "patch": "@@ -942,9 +942,11 @@ private void    addTargetRowLocation( ResultColumnList selectList )\n     {\n         if ( cr.getTableName() == null )\n         {\n-            ResultColumn    rc = _leftJoinFromList.bindColumnReference( cr );\n+            cr = cr.bindExpression(\n+                    _leftJoinFromList,\n+                    new SubqueryList(getContextManager()),\n+                    new ArrayList<AggregateNode>());\n             TableName       tableName = cr.getQualifiedTableName();\n-            if ( tableName == null ) { tableName = new TableName( null, rc.getTableName(), getContextManager() ); }\n             cr = new ColumnReference( cr.getColumnName(), tableName, getContextManager() );\n         }\n ",
                "raw_url": "https://github.com/apache/derby/raw/4fc5f9c837aab62a44f559e5bbb38abb2be3299a/java/engine/org/apache/derby/impl/sql/compile/MergeNode.java",
                "sha": "a48ce6cd673903cd107d17b965685428e7d1ca72",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/derby/blob/4fc5f9c837aab62a44f559e5bbb38abb2be3299a/java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java?ref=4fc5f9c837aab62a44f559e5bbb38abb2be3299a",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java",
                "patch": "@@ -324,6 +324,13 @@ public  void    test_001_badSyntax()\n               \"when matched then delete\\n\"\n               );\n \n+        // Variant of the above, where no table name is specified in the\n+        // column reference that is out of scope. Used to fail with a\n+        // NullPointerException (DERBY-6703).\n+        expectCompilationError(dboConnection, COLUMN_OUT_OF_SCOPE,\n+                \"merge into t1 using t2 on no_such_column \" +\n+                \"when matched then delete\");\n+\n         //\n         // The matching refinement clauses can only mention columns in the\n         // source and target tables.",
                "raw_url": "https://github.com/apache/derby/raw/4fc5f9c837aab62a44f559e5bbb38abb2be3299a/java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java",
                "sha": "38368e5dcfa197eb6dea351361f79bfb0b429d5d",
                "status": "modified"
            }
        ],
        "message": "DERBY-6703: MERGE statement fails with NullPointerException if ON clause references non-existent column\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1618114 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/8ad67d3b766b525b94eaf87a8abf24aad4f48b32",
        "patched_files": [
            "ColumnReference.java",
            "MergeNode.java",
            "FromList.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "MergeStatementTest.java"
        ]
    },
    "derby_501b8b0": {
        "bug_id": "derby_501b8b0",
        "commit": "https://github.com/apache/derby/commit/501b8b044739bef8bea8a956fc5a689fd38eee51",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/derby/blob/501b8b044739bef8bea8a956fc5a689fd38eee51/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericController.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericController.java?ref=501b8b044739bef8bea8a956fc5a689fd38eee51",
                "deletions": 1,
                "filename": "java/engine/org/apache/derby/impl/store/access/conglomerate/GenericController.java",
                "patch": "@@ -221,8 +221,16 @@ public void setEstimatedRowCount(long count)\n         if (container == null)\n             open_conglom.reopen();\n \n-        open_conglom.getContainer().setEstimatedRowCount(\n+        // the container could still be null if a DROP TABLE or TRUNCATE TABLE\n+        // has removed the old conglomerate\n+\n+        container = open_conglom.getContainer();\n+\n+        if ( container != null )\n+        {\n+            container.setEstimatedRowCount(\n                 count, /* unused flag */ 0);\n+        }\n     }\n \n     /**************************************************************************",
                "raw_url": "https://github.com/apache/derby/raw/501b8b044739bef8bea8a956fc5a689fd38eee51/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericController.java",
                "sha": "edc5ada49c802bcefa1bfd291fab50e0d0dd1f0d",
                "status": "modified"
            },
            {
                "additions": 61,
                "blob_url": "https://github.com/apache/derby/blob/501b8b044739bef8bea8a956fc5a689fd38eee51/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TruncateTableTest.java",
                "changes": 61,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TruncateTableTest.java?ref=501b8b044739bef8bea8a956fc5a689fd38eee51",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/TruncateTableTest.java",
                "patch": "@@ -224,5 +224,66 @@ public void testPerms() throws Exception\n         aliceConnection.close();\n         ruthConnection.close();\n     }\n+\n+    /**\n+     * Test that TRUNCATE TABLE and DROP TABLE do not cause held cursors\n+     * to trip across an NPE. See DERBY-268.\n+     */\n+    public void testCursor() throws Exception\n+    {\n+        Connection cursorConnection = openUserConnection( ALICE );\n+        Connection truncatorConnection = openUserConnection( ALICE );\n+\n+        cursorConnection.setAutoCommit( false );\n+        truncatorConnection.setAutoCommit( false );\n+\n+        cursorMinion( cursorConnection, truncatorConnection, \"truncateTab\", \"truncate table \" );\n+        cursorMinion( cursorConnection, truncatorConnection, \"dropTab\", \"drop table \" );\n+\n+        cursorConnection.close();\n+    }\n+    private void cursorMinion\n+        ( Connection cursorConnection, Connection truncatorConnection, String tableName, String truncationStub )\n+        throws Exception\n+    {\n+        Statement ddlStatement = cursorConnection.createStatement();\n+        Statement truncatorStatement = truncatorConnection.createStatement();\n+\n+        ddlStatement.execute( \"create table \" + tableName + \"( a int )\" );\n+        ddlStatement.execute( \"insert into \" + tableName + \"( a ) values ( 1 ), ( 2 )\" );\n+        ddlStatement.close();\n+        cursorConnection.commit();\n+\n+        Statement cursorStatement = cursorConnection.createStatement\n+            (\n+             ResultSet.TYPE_SCROLL_SENSITIVE,\n+             ResultSet.CONCUR_READ_ONLY,\n+             ResultSet.HOLD_CURSORS_OVER_COMMIT\n+             );\n+        ResultSet cursor = cursorStatement.executeQuery( \"select * from \" + tableName );\n+\n+        // read first row, then commit the holdable cursor\n+        cursor.next();\n+        assertEquals( 1, cursor.getInt( 1 ) );\n+        cursorConnection.commit();\n+\n+        // now truncate the table and commit\n+        truncatorStatement.execute( truncationStub + tableName );\n+        truncatorConnection.commit();\n+\n+        // we expect to be able to finish draining the cursor\n+        cursor.next();\n+        assertEquals( 2, cursor.getInt( 1 ) );\n+\n+        // and we expect to be told that the cursor is drained. this is\n+        // where the NPE was raised\n+        assertFalse( cursor.next() );\n+        \n+        cursor.close();\n+        cursorConnection.commit();\n+        \n+        cursorStatement.close();\n+        truncatorStatement.close();\n+    }\n     \n }",
                "raw_url": "https://github.com/apache/derby/raw/501b8b044739bef8bea8a956fc5a689fd38eee51/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TruncateTableTest.java",
                "sha": "fdb2ceb7c1e2d226cfb385805ea4d8b2829f30ac",
                "status": "modified"
            }
        ],
        "message": "DERBY-268: Eliminate NPE when reading past the end of a cursor on a truncated or dropped table.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1002232 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/c7bf46c3b620937be5b86839f1cf1688e92997f4",
        "patched_files": [
            "GenericController.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "TruncateTableTest.java"
        ]
    },
    "derby_51ef6db": {
        "bug_id": "derby_51ef6db",
        "commit": "https://github.com/apache/derby/commit/51ef6db8abbd980b391ad9ce3d18d521134d8038",
        "file": [
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/derby/blob/51ef6db8abbd980b391ad9ce3d18d521134d8038/java/client/org/apache/derby/client/am/CallableLocatorProcedures.java",
                "changes": 41,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/am/CallableLocatorProcedures.java?ref=51ef6db8abbd980b391ad9ce3d18d521134d8038",
                "deletions": 16,
                "filename": "java/client/org/apache/derby/client/am/CallableLocatorProcedures.java",
                "patch": "@@ -113,7 +113,8 @@ int blobCreateLocator() throws SqlException\n         }\n         \n         try {\n-            if (blobCreateLocatorCall == null) {\n+            if (blobCreateLocatorCall == null ||\n+                    !blobCreateLocatorCall.openOnClient_) {\n                 blobCreateLocatorCall = connection.prepareCallX\n                         (\"? = CALL SYSIBM.BLOBCREATELOCATOR()\",\n                         java.sql.ResultSet.TYPE_FORWARD_ONLY,\n@@ -164,7 +165,8 @@ int blobCreateLocator() throws SqlException\n      */\n     void blobReleaseLocator(int locator) throws SqlException\n     {\n-        if (blobReleaseLocatorCall == null) {\n+        if (blobReleaseLocatorCall == null ||\n+                !blobReleaseLocatorCall.openOnClient_) {\n             blobReleaseLocatorCall = connection.prepareCallX\n                 (\"CALL SYSIBM.BLOBRELEASELOCATOR(?)\",\n                  java.sql.ResultSet.TYPE_FORWARD_ONLY, \n@@ -200,7 +202,8 @@ long blobGetPositionFromLocator(int locator,\n                                     int searchLocator, \n                                     long fromPosition) throws SqlException\n     {\n-        if (blobGetPositionFromLocatorCall == null) {\n+        if (blobGetPositionFromLocatorCall == null ||\n+                !blobGetPositionFromLocatorCall.openOnClient_) {\n             blobGetPositionFromLocatorCall = connection.prepareCallX\n                 (\"? = CALL SYSIBM.BLOBGETPOSITIONFROMLOCATOR(?, ?, ?)\",\n                  java.sql.ResultSet.TYPE_FORWARD_ONLY, \n@@ -327,7 +330,8 @@ private long blobGetPositionFromBytes(int locator,\n                                           int offset,\n                                           int length) throws SqlException\n     {\n-        if (blobGetPositionFromBytesCall == null) {\n+        if (blobGetPositionFromBytesCall == null ||\n+                !blobGetPositionFromBytesCall.openOnClient_) {\n             blobGetPositionFromBytesCall = connection.prepareCallX\n                 (\"? = CALL SYSIBM.BLOBGETPOSITIONFROMBYTES(?, ?, ?)\",\n                  java.sql.ResultSet.TYPE_FORWARD_ONLY, \n@@ -371,7 +375,7 @@ private long blobGetPositionFromBytes(int locator,\n      */\n     long blobGetLength(int sourceLocator) throws SqlException\n     {\n-        if (blobGetLengthCall == null) {\n+        if (blobGetLengthCall == null || !blobGetLengthCall.openOnClient_) {\n             blobGetLengthCall = connection.prepareCallX\n                 (\"? = CALL SYSIBM.BLOBGETLENGTH(?)\",\n                  java.sql.ResultSet.TYPE_FORWARD_ONLY, \n@@ -421,7 +425,7 @@ long blobGetLength(int sourceLocator) throws SqlException\n     {\n         if (forLength == 0) return new byte[0];\n         \n-        if (blobGetBytesCall == null) {\n+        if (blobGetBytesCall == null || !blobGetBytesCall.openOnClient_) {\n             blobGetBytesCall = connection.prepareCallX\n                 (\"? = CALL SYSIBM.BLOBGETBYTES(?, ?, ?)\",\n                  java.sql.ResultSet.TYPE_FORWARD_ONLY, \n@@ -495,7 +499,7 @@ void blobSetBytes(int sourceLocator,\n                       int forLength, \n                       byte[] bytes) throws SqlException\n     {\n-        if (blobSetBytesCall == null) {\n+        if (blobSetBytesCall == null || !blobSetBytesCall.openOnClient_) {\n             blobSetBytesCall = connection.prepareCallX\n                 (\"CALL SYSIBM.BLOBSETBYTES(?, ?, ?, ?)\",\n                  java.sql.ResultSet.TYPE_FORWARD_ONLY, \n@@ -551,7 +555,7 @@ void blobSetBytes(int sourceLocator,\n      */\n     void blobTruncate(int sourceLocator, long length) throws SqlException\n     {\n-        if (blobTruncateCall == null) {\n+        if (blobTruncateCall == null || !blobTruncateCall.openOnClient_) {\n             blobTruncateCall = connection.prepareCallX\n                 (\"CALL SYSIBM.BLOBTRUNCATE(?, ?)\",\n                  java.sql.ResultSet.TYPE_FORWARD_ONLY, \n@@ -590,7 +594,8 @@ int clobCreateLocator() throws SqlException\n         }\n         \n         try {\n-            if (clobCreateLocatorCall == null) {\n+            if (clobCreateLocatorCall == null ||\n+                    !clobCreateLocatorCall.openOnClient_) {\n                 clobCreateLocatorCall = connection.prepareCallX\n                         (\"? = CALL SYSIBM.CLOBCREATELOCATOR()\",\n                         java.sql.ResultSet.TYPE_FORWARD_ONLY,\n@@ -641,7 +646,8 @@ int clobCreateLocator() throws SqlException\n      */\n     void clobReleaseLocator(int locator) throws SqlException\n     {\n-        if (clobReleaseLocatorCall == null) {\n+        if (clobReleaseLocatorCall == null ||\n+                !clobReleaseLocatorCall.openOnClient_) {\n             clobReleaseLocatorCall = connection.prepareCallX\n                 (\"CALL SYSIBM.CLOBRELEASELOCATOR(?)\",\n                  java.sql.ResultSet.TYPE_FORWARD_ONLY, \n@@ -760,7 +766,8 @@ private long clobGetPositionFromString(int locator,\n                                            int offset,\n                                            int length) throws SqlException\n     {\n-        if (clobGetPositionFromStringCall == null) {\n+        if (clobGetPositionFromStringCall == null ||\n+                !clobGetPositionFromStringCall.openOnClient_) {\n             clobGetPositionFromStringCall = connection.prepareCallX\n                 (\"? = CALL SYSIBM.CLOBGETPOSITIONFROMSTRING(?, ?, ?)\",\n                  java.sql.ResultSet.TYPE_FORWARD_ONLY, \n@@ -809,7 +816,8 @@ long clobGetPositionFromLocator(int locator,\n                                     int searchLocator, \n                                     long fromPosition) throws SqlException\n     {\n-        if (clobGetPositionFromLocatorCall == null) {\n+        if (clobGetPositionFromLocatorCall == null ||\n+                !clobGetPositionFromLocatorCall.openOnClient_) {\n             clobGetPositionFromLocatorCall = connection.prepareCallX\n                 (\"? = CALL SYSIBM.CLOBGETPOSITIONFROMLOCATOR(?, ?, ?)\",\n                  java.sql.ResultSet.TYPE_FORWARD_ONLY, \n@@ -843,7 +851,7 @@ long clobGetPositionFromLocator(int locator,\n      */\n     long clobGetLength(int sourceLocator) throws SqlException\n     {\n-        if (clobGetLengthCall == null) {\n+        if (clobGetLengthCall == null || !clobGetLengthCall.openOnClient_) {\n             clobGetLengthCall = connection.prepareCallX\n                 (\"? = CALL SYSIBM.CLOBGETLENGTH(?)\",\n                  java.sql.ResultSet.TYPE_FORWARD_ONLY, \n@@ -893,7 +901,8 @@ String clobGetSubString(int sourceLocator, long fromPosition, int forLength)\n     {\n         if (forLength == 0) return \"\";\n \n-        if (clobGetSubStringCall == null) {\n+        if (clobGetSubStringCall == null ||\n+                !clobGetSubStringCall.openOnClient_) {\n             clobGetSubStringCall = connection.prepareCallX\n                 (\"? = CALL SYSIBM.CLOBGETSUBSTRING(?, ?, ?)\",\n                  java.sql.ResultSet.TYPE_FORWARD_ONLY, \n@@ -969,7 +978,7 @@ void clobSetString(int sourceLocator,\n                        int forLength, \n                        String string) throws SqlException\n     {\n-        if (clobSetStringCall == null) {\n+        if (clobSetStringCall == null || !clobSetStringCall.openOnClient_) {\n             clobSetStringCall = connection.prepareCallX\n                 (\"CALL SYSIBM.CLOBSETSTRING(?, ?, ?, ?)\",\n                  java.sql.ResultSet.TYPE_FORWARD_ONLY, \n@@ -1021,7 +1030,7 @@ void clobSetString(int sourceLocator,\n      */\n     void clobTruncate(int sourceLocator, long length) throws SqlException\n     {\n-        if (clobTruncateCall == null) {\n+        if (clobTruncateCall == null || !clobTruncateCall.openOnClient_) {\n             clobTruncateCall = connection.prepareCallX\n                 (\"CALL SYSIBM.CLOBTRUNCATE(?, ?)\",\n                  java.sql.ResultSet.TYPE_FORWARD_ONLY, ",
                "raw_url": "https://github.com/apache/derby/raw/51ef6db8abbd980b391ad9ce3d18d521134d8038/java/client/org/apache/derby/client/am/CallableLocatorProcedures.java",
                "sha": "440d1321c05cb366a919d88754e57674a9ac058e",
                "status": "modified"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/derby/blob/51ef6db8abbd980b391ad9ce3d18d521134d8038/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java?ref=51ef6db8abbd980b391ad9ce3d18d521134d8038",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java",
                "patch": "@@ -155,6 +155,7 @@ private static Test baseSuite(String postfix) {\n         suite.addTest(new J2EEDataSourceTest(\"testPooledReuseOnClose\"));\n         suite.addTest(new J2EEDataSourceTest(\"testSchemaIsReset\"));\n         suite.addTest(new J2EEDataSourceTest(\"testSchemaIsResetWhenDeleted\"));\n+        suite.addTest(new J2EEDataSourceTest(\"testDerby3799\"));\n         return suite;\n     }\n \n@@ -243,6 +244,9 @@ protected void decorateSQL(Statement s) throws SQLException {\n                             \"'org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.\" +\n                             getNestedMethodName() +\n                     \"'\");\n+                    s.execute(\"create table derby3799 (dClob clob)\");\n+                    s.executeUpdate(\"insert into derby3799 values (\" +\n+                            \"'myLittleTestClob')\");\n                 }\n             };\n         }\n@@ -3048,6 +3052,34 @@ public void testConnectionLeakInDatabaseMetaData()\n         }\n     }\n \n+    /**\n+     * Regression test for a NullPointerException when trying to use the LOB\n+     * stored procedures after closing and then getting a new logical\n+     * connection. The problem was that the LOB stored procedure objects on the\n+     * server side were closed and not reprepared.\n+     * See Jira issue DERBY-3799.\n+     */\n+    public void testDerby3799() throws SQLException {\n+        ConnectionPoolDataSource cpDs =\n+                J2EEDataSource.getConnectionPoolDataSource();\n+        PooledConnection pc = cpDs.getPooledConnection();\n+        // Get first logical connection.\n+        Connection con1 = pc.getConnection();\n+        Statement stmt = con1.createStatement();\n+        ResultSet rs = stmt.executeQuery(\"select dClob from derby3799\");\n+        assertTrue(rs.next());\n+        rs.getString(1);\n+        rs.close();\n+        con1.close();\n+        // Get second logical connection.\n+        Connection con2 = pc.getConnection();\n+        stmt = con2.createStatement();\n+        rs = stmt.executeQuery(\"select dClob from derby3799\");\n+        assertTrue(rs.next());\n+        rs.getString(1); // NPE happened here.\n+        con2.close();\n+    }\n+\n     /**\n      * Tests for DERBY-1144\n      * ",
                "raw_url": "https://github.com/apache/derby/raw/51ef6db8abbd980b391ad9ce3d18d521134d8038/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java",
                "sha": "c857113a7fecded3fb7850dcd49f0468a71a24b7",
                "status": "modified"
            }
        ],
        "message": "DERBY-3799: NullPointerException when accessing a clob through a pooled connection.\nVerify that the LOB stored procedure statements are open (not only non-null).\nPatch file: derby-3799-1a-checkIfClosed.diff\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@681694 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/780767dda3837db9177e070c8acacafcf05fbcf1",
        "patched_files": [
            "CallableLocatorProcedures.java",
            "J2EEDataSource.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "J2EEDataSourceTest.java"
        ]
    },
    "derby_54a4649": {
        "bug_id": "derby_54a4649",
        "commit": "https://github.com/apache/derby/commit/54a46498119e425108bc72deeb43e8ef4e1bbdbe",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/derby/blob/54a46498119e425108bc72deeb43e8ef4e1bbdbe/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java?ref=54a46498119e425108bc72deeb43e8ef4e1bbdbe",
                "deletions": 4,
                "filename": "java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java",
                "patch": "@@ -951,6 +951,7 @@ private void tempTablesAndRollback()\n                     // conglomerate associated with it\n \n                     TableDescriptor td = tempTableInfo.getTableDescriptor();\n+                    invalidateCleanupDroppedTable( td );\n \n                     //remove the conglomerate created for this temp table\n                     tran.dropConglomerate(td.getHeapConglomerateId()); \n@@ -1004,18 +1005,25 @@ else if (tempTableInfo.getModifiedInSavepointLevel() >=\n                 tempTableInfo.setModifiedInSavepointLevel(-1);\n                 TableDescriptor td = tempTableInfo.getTableDescriptor();\n \n-                getDataDictionary().getDependencyManager().invalidateFor(\n-                        td, DependencyManager.DROP_TABLE, this);\n-\n-                cleanupTempTableOnCommitOrRollback(td, true);\n+                invalidateCleanupDroppedTable( td );\n             } \n             // there is no else here because there is no special processing \n             // required for temp tables declares in earlier work of \n             // unit/transaction and not modified\n         }\n     \n         if (allDeclaredGlobalTempTables.size() == 0)\n+        {\n             allDeclaredGlobalTempTables = null;\n+        }\n+    }\n+\n+    /** Invalidate a dropped temp table */\n+    private void    invalidateCleanupDroppedTable( TableDescriptor td )\n+        throws StandardException\n+    {\n+        getDataDictionary().getDependencyManager().invalidateFor( td, DependencyManager.DROP_TABLE, this );\n+        cleanupTempTableOnCommitOrRollback( td, true );\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/derby/raw/54a46498119e425108bc72deeb43e8ef4e1bbdbe/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java",
                "sha": "cef45ec84bbefa10d67aa488b68ccda2359770da",
                "status": "modified"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/derby/blob/54a46498119e425108bc72deeb43e8ef4e1bbdbe/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaJDBC30Test.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaJDBC30Test.java?ref=54a46498119e425108bc72deeb43e8ef4e1bbdbe",
                "deletions": 1,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaJDBC30Test.java",
                "patch": "@@ -927,5 +927,33 @@ public void testPooledConnectionClosed() throws SQLException {\n         JDBC.assertSingleValueResultSet(s.executeQuery(\n                 \"select count(*) from SESSION.tx\") , \"3\");\n         s.executeUpdate(\"drop table SESSION.tx\");\n-    }\t\n+    }\n+\n+    /**\n+     * Test that we don't get an NPE when re-using a PreparedStatement\n+     * on a temp table declared and then rolled back. See DERBY-6189.\n+     */\n+    public  void    test_derby_6189() throws Exception\n+    {\n+        Connection  conn = getConnection();\n+\n+        conn.prepareStatement\n+            ( \"DECLARE GLOBAL TEMPORARY TABLE SESSION.t6189( c21 int, c22 int) not logged on commit preserve rows\" )\n+            .execute();        \n+        PreparedStatement pStmtInsert = conn.prepareStatement( \"insert into SESSION.t6189 values (23, 1)\" );\n+\n+        pStmtInsert.execute();\n+\n+        conn.rollback();\n+\n+        try {\n+            pStmtInsert.execute();\n+            fail( \"Should fail!\" );\n+        }\n+        catch ( SQLException se)\n+        {\n+            assertEquals( \"42X05\", se.getSQLState() );\n+        }\n+    }\n+    \n }",
                "raw_url": "https://github.com/apache/derby/raw/54a46498119e425108bc72deeb43e8ef4e1bbdbe/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaJDBC30Test.java",
                "sha": "54d6005cb5d201e1f4adcf60389fae56bb26c997",
                "status": "modified"
            }
        ],
        "message": "DERBY-6189: Fix NPE involving rollback of temporary table.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1469802 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/126f27bc3e379a8c76c1b72ac7faf0dcd3f755f7",
        "patched_files": [
            "GenericLanguageConnectionContext.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "DeclareGlobalTempTableJavaJDBC30Test.java"
        ]
    },
    "derby_57191b4": {
        "bug_id": "derby_57191b4",
        "commit": "https://github.com/apache/derby/commit/57191b46737ce29454714beafaedb3b35635010b",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/derby/blob/57191b46737ce29454714beafaedb3b35635010b/java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java?ref=57191b46737ce29454714beafaedb3b35635010b",
                "deletions": 2,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java",
                "patch": "@@ -1186,10 +1186,13 @@ void considerPostOptimizeOptimizations(boolean selectHasPredicates)\n \t\t\t\t\t\t\tint colNum = crs[0].getColumnNumber();\n \t\t\t\t\t\t\t\n \t\t\t\t\t\t\t/* Check if we have an access path, this will be\n-\t\t\t\t\t\t\t * null in a join case (See Beetle 4423)\n+\t\t\t\t\t\t\t * null in a join case (See Beetle 4423,DERBY-3904)\n \t\t\t\t\t\t\t */\n \t\t\t\t\t\t\tAccessPath accessPath= getTrulyTheBestAccessPath();\n-\t\t\t\t\t\t\tif (accessPath == null)\n+\t\t\t\t\t\t\tif (accessPath == null ||\n+\t\t\t\t\t\t\t\taccessPath.getConglomerateDescriptor()==null||\n+\t\t\t\t\t\t\t\taccessPath.getConglomerateDescriptor().\n+\t\t\t\t\t\t\t\t           getIndexDescriptor() == null)\n \t\t\t\t\t\t\t\treturn;\n \t\t\t\t\t\t\tIndexDescriptor id = accessPath.\n \t\t\t\t\t\t\t\t\t\t\t\tgetConglomerateDescriptor().",
                "raw_url": "https://github.com/apache/derby/raw/57191b46737ce29454714beafaedb3b35635010b/java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java",
                "sha": "a0f2a7350c10c6f9d3e80184900d0bc14760b805",
                "status": "modified"
            },
            {
                "additions": 60,
                "blob_url": "https://github.com/apache/derby/blob/57191b46737ce29454714beafaedb3b35635010b/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "changes": 60,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java?ref=57191b46737ce29454714beafaedb3b35635010b",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "patch": "@@ -41,6 +41,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import org.apache.derbyTesting.junit.BaseJDBCTestCase;\n import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;\n import org.apache.derbyTesting.junit.JDBC;\n+import org.apache.derbyTesting.junit.RuntimeStatisticsParser;\n+import org.apache.derbyTesting.junit.SQLUtilities;\n \n /**\n  * Many of these test cases were converted from the old groupBy.sql\n@@ -106,6 +108,16 @@ private static void createSchemaObjects(Statement st)\n \n         st.execute(\"create table d3219 (a varchar(10), b varchar(1000))\");\n \n+\t\tst.execute(\"CREATE TABLE d3904_T1( \" +\n+\t\t\t\t\"D1 DATE NOT NULL PRIMARY KEY, N1 VARCHAR( 10 ))\");\n+\t\tst.execute(\"CREATE TABLE d3904_T2( \" +\n+\t\t\t\t\"D2 DATE NOT NULL PRIMARY KEY, N2 VARCHAR( 10 ))\");\n+\t\tst.execute(\"INSERT INTO d3904_T1 VALUES \"+\n+\t\t\t\t\"( DATE( '2008-10-01' ), 'something' ), \"+\n+\t\t\t\t\"( DATE( '2008-10-02' ), 'something' )\" );\n+\t\tst.execute(\"INSERT INTO d3904_T2 VALUES\" +\n+\t\t\t\t\"( DATE( '2008-10-01' ), 'something' )\" ); \n+\n         st.executeUpdate(\"create table d2457_o (name varchar(20), ord int)\");\n         st.executeUpdate(\"create table d2457_a (ord int, amount int)\");\n         st.executeUpdate(\"insert into d2457_o values ('John', 1),\" +\n@@ -2118,5 +2130,53 @@ private static List resultArrayToList(String[][] results) {\n         }\n         return rows;\n     }\n+\n+    /**\n+      * DERBY-3904: Min/Max optimization needs to be aware of joins.\n+      */\n+    public void testDerby3904MinMaxOptimization() throws SQLException\n+    {\n+        Statement s = createStatement();\n+\n+        JDBC.assertFullResultSet(\n+                s.executeQuery(\"SELECT d3904_T1.D1 \" +\n+\t\t\t\t\t\"FROM d3904_T1 LEFT JOIN d3904_T2 \" +\n+\t\t\t\t    \"ON d3904_T1.D1 = d3904_T2.D2 \" +\n+\t\t\t\t\t\"WHERE d3904_T2.D2 IS NULL\"), \n+            new String[][] {  {\"2008-10-02\"} } );\n+        JDBC.assertFullResultSet(\n+                s.executeQuery(\"SELECT MAX( d3904_T1.D1 ) as D \" +\n+\t\t\t\t\t\"FROM d3904_T1 WHERE d3904_T1.D1 NOT IN \" +\n+\t\t\t\t\t\"( SELECT d3904_T2.D2 FROM d3904_T2 )\"), \n+            new String[][] {  {\"2008-10-02\"} } );\n+\t\t//\n+\t\t// In DERBY-3904, this next query fails with a null pointer\n+\t\t// exception because GroupByNode doesn't realize that there\n+\t\t// is a join involved here\n+\t\t//\n+        JDBC.assertFullResultSet(\n+                s.executeQuery(\"SELECT MAX( d3904_T1.D1 ) AS D \" +\n+\t\t\t\t\t\"FROM d3904_T1 LEFT JOIN d3904_T2 \" +\n+\t\t\t\t\t\"ON d3904_T1.D1 = d3904_T2.D2 \" +\n+\t\t\t\t\t\"WHERE d3904_T2.D2 IS NULL\"),\n+            new String[][] {  {\"2008-10-02\"} } );\n+\n+\t\t// Verify that the min/max optimization still works for the\n+\t\t// simple query SELECT MAX(D1) FROM T1:\n+\t\ts.execute(\"call SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1)\");\n+        JDBC.assertFullResultSet(\n+                s.executeQuery(\"SELECT MAX(D1) FROM D3904_T1\"),\n+            new String[][] {  {\"2008-10-02\"} } );\n+\t\tRuntimeStatisticsParser rtsp =\n+\t\t\tSQLUtilities.getRuntimeStatisticsParser(s);\n+\t\tassertTrue(rtsp.usedLastKeyIndexScan());\n+\t\tassertFalse(rtsp.usedIndexRowToBaseRow());\n+\n+\t\t// A form of the Beetle 4423 query:\n+        JDBC.assertFullResultSet(\n+                s.executeQuery(\"SELECT MAX(D1) \" +\n+\t\t\t\t\t\"FROM d3904_T1, D3904_T2 WHERE d3904_T1.D1='2008-10-02'\"),\n+            new String[][] {  {\"2008-10-02\"} } );\n+\t}\n }\n ",
                "raw_url": "https://github.com/apache/derby/raw/57191b46737ce29454714beafaedb3b35635010b/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "sha": "c13027406fdc72e87dd85cbf1d29a0986e555bce",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/derby/blob/57191b46737ce29454714beafaedb3b35635010b/java/testing/org/apache/derbyTesting/junit/RuntimeStatisticsParser.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/junit/RuntimeStatisticsParser.java?ref=57191b46737ce29454714beafaedb3b35635010b",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/junit/RuntimeStatisticsParser.java",
                "patch": "@@ -31,6 +31,7 @@\n     private boolean tableScan = false;\n     private final boolean indexScan;\n     private final boolean indexRowToBaseRow;\n+\tprivate final boolean lastKeyIndexScan;\n     private String statistics = \"\";\n     private boolean scrollInsensitive = false;\n     private final HashSet qualifiers;\n@@ -65,6 +66,7 @@ else if (rts.indexOf(\"at repeatable read isolation level\") != -1)\n         indexScan = (rts.indexOf(\"Index Scan ResultSet\") >= 0);\n         indexRowToBaseRow =\n             (rts.indexOf(\"Index Row to Base Row ResultSet\") >= 0);\n+        lastKeyIndexScan = (rts.indexOf(\"Last Key Index Scan ResultSet\") >= 0);\n         \n         if (rts.indexOf(\"Eliminate duplicates = true\") > 0) {\n         \teliminatedDuplicates = true;\n@@ -202,6 +204,15 @@ public boolean usedIndexScan() {\n         return indexScan;\n     }\n \n+    /**\n+     * Return whether or not a last key index scan result set was used\n+\t * in the query. A last key index scan is a special optimization for\n+\t * MIN and MAX queries against an indexed column (SELECT MAX(ID) FROM T).\n+     */\n+    public boolean usedLastKeyIndexScan() {\n+        return lastKeyIndexScan;\n+    }\n+\n     /**\n      * Return whether or not an index row to base row result set was used in\n      * the query.",
                "raw_url": "https://github.com/apache/derby/raw/57191b46737ce29454714beafaedb3b35635010b/java/testing/org/apache/derbyTesting/junit/RuntimeStatisticsParser.java",
                "sha": "77c9dc177662d85c8ba7430ca24542a16b7a9a89",
                "status": "modified"
            }
        ],
        "message": "DERBY-3904: NPE on left join with aggregate\n\nThe issue involves a very special optimization that is performed\nfor MIN and MAX queries in which we may be able to use an index\nto go directly to the lowest/highest value of the desired column.\nFor example, in the query\n\n  SELECT MAX(d1) FROM t1\n\nif there is an index on d1, we can use that index to retrieve\nthe max value very rapidly. In order to incorporate this\noptimization, the following conditions must be met:\n\n - No group by\n - One of:\n   - min/max(ColumnReference) is only aggregate && source is\n     ordered on the ColumnReference\n   - min/max(ConstantNode)\nThe optimization of the other way around (min with desc index or\nmax with asc index) has the same restrictions with the additional\ntemporary restriction of no qualifications at all (because\nwe don't have true backward scans). \n\nThe source of the data must also be \"simple\" (not a result of a join),\nand the NullPointerException occurred during the code that tried\nto establish the above conditions because it wasn't thoroughly\nenough excluding the join case. In the query:\n\n  SELECT MAX( T1.D1 ) AS D FROM T1 LEFT JOIN T2 ON T1.D1 = T2.D2\n  WHERE T2.D2 IS NULL\n\nthe code in GroupByNode.considerPostOptimizeOptimizations was\ntrying to traverse the AccessPathImpl to find the index scan\ninformation, but for this LEFT JOIN case there is an AccessPathImpl\nbut no index scan information, because there is a join being\nperformed, not an index scan.\n\nThe solution is to examine the AccessPathImpl more carefully,\nand only search the index scan information if an index scan\nis actually present.\n\nAlso added a few tests, including an enhancement to the test\nlibrary's RuntimeStatisticsParser so that it can determine\nif a Last Key Index Scan is being performed by the query.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@708002 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/b70badf6d92f5eff30a568512064323765c1ed40",
        "patched_files": [
            "RuntimeStatisticsParser.java",
            "GroupByNode.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "GroupByTest.java"
        ]
    },
    "derby_591ff9f": {
        "bug_id": "derby_591ff9f",
        "commit": "https://github.com/apache/derby/commit/591ff9f9781e2b2dc2964366dc118d14ad3adff4",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/derby/blob/591ff9f9781e2b2dc2964366dc118d14ad3adff4/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java?ref=591ff9f9781e2b2dc2964366dc118d14ad3adff4",
                "deletions": 4,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java",
                "patch": "@@ -35,30 +35,28 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import org.apache.derby.iapi.services.compiler.MethodBuilder;\n import org.apache.derby.iapi.services.context.ContextManager;\n import org.apache.derby.iapi.services.io.FormatableBitSet;\n-import org.apache.derby.shared.common.sanity.SanityManager;\n import org.apache.derby.iapi.sql.StatementType;\n import org.apache.derby.iapi.sql.compile.CompilerContext;\n import org.apache.derby.iapi.sql.compile.TagFilter;\n import org.apache.derby.iapi.sql.conn.Authorizer;\n import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;\n-import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;\n import org.apache.derby.iapi.sql.dictionary.CheckConstraintDescriptor;\n import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;\n import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;\n import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;\n import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;\n import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;\n import org.apache.derby.iapi.sql.dictionary.DataDictionary;\n-import org.apache.derby.iapi.sql.dictionary.TriggerDescriptorList;\n import org.apache.derby.iapi.sql.dictionary.TableDescriptor;\n import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;\n+import org.apache.derby.iapi.sql.dictionary.TriggerDescriptorList;\n import org.apache.derby.iapi.sql.execute.ConstantAction;\n import org.apache.derby.iapi.sql.execute.ExecPreparedStatement;\n import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;\n import org.apache.derby.iapi.store.access.TransactionController;\n-import org.apache.derby.iapi.types.DataTypeDescriptor;\n import org.apache.derby.iapi.types.TypeId;\n import org.apache.derby.iapi.util.ReuseFactory;\n+import org.apache.derby.shared.common.sanity.SanityManager;\n import org.apache.derby.vti.DeferModification;\n \n /**\n@@ -549,6 +547,9 @@ else if (cursorTargetTableName != null)\n         //\n         if ( inMatchingClause() ) { associateAddedColumns(); }\n \n+        // SQL 2011, section 6.10, SR 4b.\n+        SelectNode.checkNoWindowFunctions(resultSet, \"<update source>\");\n+\n \t\t/* Bind the expressions */\n \t\tsuper.bindExpressions();\n ",
                "raw_url": "https://github.com/apache/derby/raw/591ff9f9781e2b2dc2964366dc118d14ad3adff4/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java",
                "sha": "28c137b19a5261bea2e6ad61f31c7f1e0f40c36f",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/derby/blob/591ff9f9781e2b2dc2964366dc118d14ad3adff4/java/engine/org/apache/derby/impl/sql/compile/WindowResultSetNode.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/WindowResultSetNode.java?ref=591ff9f9781e2b2dc2964366dc118d14ad3adff4",
                "deletions": 13,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/WindowResultSetNode.java",
                "patch": "@@ -21,6 +21,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n package org.apache.derby.impl.sql.compile;\n \n import java.util.ArrayList;\n+import java.util.Iterator;\n import java.util.List;\n import org.apache.derby.iapi.error.StandardException;\n import org.apache.derby.iapi.reference.ClassName;\n@@ -58,6 +59,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n      *\n      * @exception StandardException     Thrown on error\n      */\n+    @SuppressWarnings(\"LeakingThisInConstructor\")\n     WindowResultSetNode(ResultSetNode            bottomPR,\n                         WindowDefinitionNode     windowDef,\n                         List<WindowFunctionNode> windowFuncCalls,\n@@ -82,7 +84,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n         setResultColumns( childResult.getResultColumns() );\n         childResult.setResultColumns(newBottomRCL);\n \n-        // Wrao purselved int a project/restrict as per convention.\n+        // Wrap ourselves in a project/restrict as per convention.\n         addNewPRNode();\n \n         // Add the extra result columns required\n@@ -92,7 +94,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n     /**\n      * Add a new PR node.  Put the new PR under any sort.\n      *\n-     * @exception standard exception\n+     * @throws StandardException standard error policy\n      */\n     private void addNewPRNode()\n         throws StandardException\n@@ -167,9 +169,7 @@ private void addNewPRNode()\n         ResultColumnList bottomRCL  = childResult.getResultColumns();\n         ResultColumnList windowingRCL = getResultColumns();\n \n-        for (int i= 0; i< uniqueCols.size(); i++) {\n-            ValueNode crOrVcn = uniqueCols.get(i);\n-\n+        for (ValueNode crOrVcn : uniqueCols) {\n             ResultColumn newRC = new ResultColumn(\n                     \"##UnWindowingColumn\",\n                     crOrVcn,\n@@ -209,15 +209,18 @@ private void addNewPRNode()\n \n \n     /**\n+     * @param uniqueColRefs list of unique column references\n+     * @param cand the candidate to check is present in list\n      * @return {@code true} if an equivalent column reference to {@code cand}\n      *         is already present in {@code uniqueColRefs}\n+     * @throws StandardException standard error policy\n      */\n     private boolean colRefAlreadySeen(List<ValueNode> uniqueColRefs,\n                                       ColumnReference cand)\n             throws StandardException {\n \n-        for (int i= 0; i< uniqueColRefs.size(); i++) {\n-            ColumnReference cr = (ColumnReference)uniqueColRefs.get(i);\n+        for (ValueNode uniqueColRef : uniqueColRefs) {\n+            ColumnReference cr = (ColumnReference) uniqueColRef;\n \n             if (cr.isEquivalent(cand)) {\n                 return true;\n@@ -229,6 +232,8 @@ private boolean colRefAlreadySeen(List<ValueNode> uniqueColRefs,\n     /**\n      * Substitute new result columns for window function calls and add the\n      * result columns to childResult's list of columns.\n+     *\n+     * @throws StandardException standard error policy\n      */\n     private void addNewColumns() throws StandardException {\n         /*\n@@ -246,8 +251,7 @@ private void addNewColumns() throws StandardException {\n                 ResultSetNode.class);\n         parent.getResultColumns().accept(replaceCallsVisitor);\n \n-        for (int i=0; i < windowFuncCalls.size(); i++) {\n-            WindowFunctionNode winFunc = windowFuncCalls.get(i);\n+        for (WindowFunctionNode winFunc : windowFuncCalls) {\n \n             if (SanityManager.DEBUG) {\n                 SanityManager.ASSERT(\n@@ -307,10 +311,6 @@ private void addNewColumns() throws StandardException {\n     }\n \n \n-    /**\n-     * override\n-     * @see QueryTreeNode#generate\n-     */\n     @Override\n     void generate(ActivationClassBuilder acb, MethodBuilder mb)\n             throws StandardException",
                "raw_url": "https://github.com/apache/derby/raw/591ff9f9781e2b2dc2964366dc118d14ad3adff4/java/engine/org/apache/derby/impl/sql/compile/WindowResultSetNode.java",
                "sha": "7ac709dcf1067852379ecbb3302f447af0a4fc76",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/derby/blob/591ff9f9781e2b2dc2964366dc118d14ad3adff4/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java?ref=591ff9f9781e2b2dc2964366dc118d14ad3adff4",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java",
                "patch": "@@ -587,6 +587,12 @@ public void testBasicOperations()\n             s,\n             \"select * from t4 t_1 join t4 t_2 on \" +\n             \"                     t_1.a = row_number() over () + t_2.a\");\n+\n+        // DERBY-6565\n+        assertStatementError(\n+                LANG_WINDOW_FUNCTION_CONTEXT_ERROR,\n+                s,\n+                \"update t3 set y = y - row_number() over ()\");\n     }\n \n ",
                "raw_url": "https://github.com/apache/derby/raw/591ff9f9781e2b2dc2964366dc118d14ad3adff4/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java",
                "sha": "34a61e52d106e312782d6c147dde25860c3c77cc",
                "status": "modified"
            }
        ],
        "message": "DERBY-6565 ROW_NUMBER function throws NullPointerException in UPDATE statement\n\nPatch *derby-6565-forbid.diff* which makes it illegal to use window\nfunctions in the update source. Adds a new test for this error\ncondition. Also cleans up some Javadocs and modernizes some loops.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1615982 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/4637dbf55d56c8fbd649ec3270efda783639031a",
        "patched_files": [
            "WindowResultSetNode.java",
            "UpdateNode.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "OLAPTest.java"
        ]
    },
    "derby_5c57294": {
        "bug_id": "derby_5c57294",
        "commit": "https://github.com/apache/derby/commit/5c572944df57c79b4fb935f824d187e97f3a82c3",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/derby/blob/5c572944df57c79b4fb935f824d187e97f3a82c3/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java?ref=5c572944df57c79b4fb935f824d187e97f3a82c3",
                "deletions": 16,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java",
                "patch": "@@ -132,23 +132,22 @@ private static Test baseSuite(String name)  {\n         topSuite.addTest(dsDecorator);\n         fillDataSourceSuite(dsSuite, dsDecorator);\n \n-        if (JDBC.vmSupportsJSR169()) {\n-            // JSR169 doesn't support ConnectionPoolDataSource and XADataSource\n-            return dsSuite;\n+        // JDBC 3 required for ConnectionPoolDataSource and XADataSource\n+        if (JDBC.vmSupportsJDBC3()) {\n+            \n+            TestSuite poolSuite = new TestSuite(\n+                    \"ClosedObjectTest ConnectionPoolDataSource\");\n+            PoolDataSourceDecorator poolDecorator =\n+                new PoolDataSourceDecorator(poolSuite);\n+            topSuite.addTest(poolDecorator);\n+            fillDataSourceSuite(poolSuite, poolDecorator);\n+    \n+            TestSuite xaSuite = new TestSuite(\"ClosedObjectTest XA\");\n+            XADataSourceDecorator xaDecorator = new XADataSourceDecorator(xaSuite);\n+            topSuite.addTest(xaDecorator);\n+            fillDataSourceSuite(xaSuite, xaDecorator);\n         }\n \n-        TestSuite poolSuite = new TestSuite(\n-                \"ClosedObjectTest ConnectionPoolDataSource\");\n-        PoolDataSourceDecorator poolDecorator =\n-            new PoolDataSourceDecorator(poolSuite);\n-        topSuite.addTest(poolDecorator);\n-        fillDataSourceSuite(poolSuite, poolDecorator);\n-\n-        TestSuite xaSuite = new TestSuite(\"ClosedObjectTest XA\");\n-        XADataSourceDecorator xaDecorator = new XADataSourceDecorator(xaSuite);\n-        topSuite.addTest(xaDecorator);\n-        fillDataSourceSuite(xaSuite, xaDecorator);\n-\n         return topSuite;\n     }\n \n@@ -682,7 +681,7 @@ public DataSourceDecorator(Test test) {\n          * @exception SQLException if an error occurs\n          */\n         public final void setUp() throws SQLException {\n-            connection_ = newConnection();\n+             connection_ = newConnection();\n         }\n \n         /**",
                "raw_url": "https://github.com/apache/derby/raw/5c572944df57c79b4fb935f824d187e97f3a82c3/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java",
                "sha": "1ec12677ef6f48ea3369e3e60c4edbd9e4afe731",
                "status": "modified"
            }
        ],
        "message": "DERBY-2324 Fix ClosedObjectTest so as to not throw NullPointerExceptions on J2ME.\nCaused by returning the wrong suite when running in J2ME. Changed the baseSuite method\nso that the check is a positive one for the JDBC environment, which lead to clearer\ncode that fixed the bug.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@510140 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/b918c3822c663618b0783077329caaac6414762b",
        "patched_files": [],
        "repo": "derby",
        "unit_tests": [
            "ClosedObjectTest.java"
        ]
    },
    "derby_5dcbe31": {
        "bug_id": "derby_5dcbe31",
        "commit": "https://github.com/apache/derby/commit/5dcbe31ee0f7bc09e0e48a6e36b81beeffc70e26",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/derby/blob/5dcbe31ee0f7bc09e0e48a6e36b81beeffc70e26/java/testing/org/apache/derbyTesting/system/nstest/NsTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/system/nstest/NsTest.java?ref=5dcbe31ee0f7bc09e0e48a6e36b81beeffc70e26",
                "deletions": 1,
                "filename": "java/testing/org/apache/derbyTesting/system/nstest/NsTest.java",
                "patch": "@@ -606,7 +606,7 @@ public static synchronized void printException(String where, Exception e) {\n \t\t\t\t\t\t+ \" SQLSTATE: \" + m);\n \t\t\t}\n \t\t}\n-\t\tif (e.getMessage().equals(null)) {\n+\t\tif (e.getMessage() == null) {\n \t\t\tSystem.out.println(\"NULL error message detected\");\n \t\t\tSystem.out.println(\"Here is the NULL exection - \" + e.toString());\n \t\t\tSystem.out.println(\"Stack trace of the NULL exception - \");",
                "raw_url": "https://github.com/apache/derby/raw/5dcbe31ee0f7bc09e0e48a6e36b81beeffc70e26/java/testing/org/apache/derbyTesting/system/nstest/NsTest.java",
                "sha": "ff89494d7c42c8b7ed35404e1e47a06b63e2a60f",
                "status": "modified"
            }
        ],
        "message": "DERBY-5452: Possible NPE in NsTest.printException()\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1180858 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/b8339336a78a17a790f51898dd58ec8b04f7eb95",
        "patched_files": [],
        "repo": "derby",
        "unit_tests": [
            "NsTest.java"
        ]
    },
    "derby_601e027": {
        "bug_id": "derby_601e027",
        "commit": "https://github.com/apache/derby/commit/601e027b04418d0d7c37ef12a66fac944396ff77",
        "file": [
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/derby/blob/601e027b04418d0d7c37ef12a66fac944396ff77/java/engine/org/apache/derby/impl/jdbc/authentication/NativeAuthenticationServiceImpl.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/jdbc/authentication/NativeAuthenticationServiceImpl.java?ref=601e027b04418d0d7c37ef12a66fac944396ff77",
                "deletions": 4,
                "filename": "java/engine/org/apache/derby/impl/jdbc/authentication/NativeAuthenticationServiceImpl.java",
                "patch": "@@ -284,6 +284,7 @@ public void boot(boolean create, Properties properties)\n         try {\n             // No \"guest\" user\n             if ( userName == null ) { return false; }\n+            if ( userPassword == null ) { return false; }\n \n             //\n             // We must handle these cases:\n@@ -405,7 +406,7 @@ private String  getCanonicalServiceName( String rawName )\n         }\n         \n         SQLWarning  warnings = null;\n-        \n+\n         try {\n             Properties  properties = new Properties();\n             properties.setProperty( Attribute.USERNAME_ATTR, userName );\n@@ -496,7 +497,20 @@ private void callDataSourceSetter( DataSource ds, String methodName, String valu\n         DataDictionary      dd = (DataDictionary) Monitor.getServiceModule( this, DataDictionary.MODULE );        \n         UserDescriptor      userDescriptor = dd.getUser( userName );\n         \n-        if ( userDescriptor == null )   { return false; }\n+        if ( userDescriptor == null )\n+        {\n+            //\n+            // Before returning, we pretend to evaluate the password.\n+            // This helps prevent blackhats from discovering legal usernames\n+            // by measuring how long password evaluation takes. For more context,\n+            // see the 2012-02-22 comment on DERBY-5539.\n+            //\n+            PasswordHasher          hasher = dd.makePasswordHasher( getDatabaseProperties() );\n+            \n+            hasher.hashPasswordIntoString( userName, userPassword ).toCharArray();\n+\n+            return false;\n+        }\n         \n         PasswordHasher      hasher = new PasswordHasher( userDescriptor.getHashingScheme() );\n         char[]                     candidatePassword = hasher.hashPasswordIntoString( userName, userPassword ).toCharArray();\n@@ -512,8 +526,8 @@ private void callDataSourceSetter( DataSource ds, String methodName, String valu\n             }\n         } finally\n         {\n-            Arrays.fill( candidatePassword, (char) 0 );\n-            Arrays.fill( actualPassword, (char) 0 );\n+            if ( candidatePassword != null ) { Arrays.fill( candidatePassword, (char) 0 ); }\n+            if ( actualPassword != null ) { Arrays.fill( actualPassword, (char) 0 ); }\n         }\n \n         //",
                "raw_url": "https://github.com/apache/derby/raw/601e027b04418d0d7c37ef12a66fac944396ff77/java/engine/org/apache/derby/impl/jdbc/authentication/NativeAuthenticationServiceImpl.java",
                "sha": "a8bd7dbc0bc2e8002d2c33583fc252f04123d862",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/derby/blob/601e027b04418d0d7c37ef12a66fac944396ff77/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java?ref=601e027b04418d0d7c37ef12a66fac944396ff77",
                "deletions": 2,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java",
                "patch": "@@ -659,6 +659,9 @@ private void    vetCoreBehavior()   throws Exception\n         // create the credentials database\n         Connection  sysadminConn = openConnection( CREDENTIALS_DB, DBO, true, null );\n \n+        // null password should not generate NPE\n+        getConnection( _nativeAuthentication, true, CREDENTIALS_DB, DBO, null, INVALID_AUTHENTICATION );\n+\n         // add another legal user\n         addUser( sysadminConn, APPLE_USER );\n         addUser( sysadminConn, BANANA_USER );\n@@ -1239,13 +1242,19 @@ private void    vetSQLAuthorizationOn() throws Exception\n     private Connection  getConnection\n         ( boolean shouldFail, boolean isLogicalName, String dbName, String user, String expectedSQLState )\n         throws Exception\n+    {\n+        return getConnection( shouldFail, isLogicalName, dbName, user, getPassword( user ), expectedSQLState );\n+    }\n+    private Connection  getConnection\n+        ( boolean shouldFail, boolean isLogicalName, String dbName, String user, String password, String expectedSQLState )\n+        throws Exception\n     {\n         Connection  conn = null;\n \n         reportConnectionAttempt( dbName, user, isLogicalName );\n \n         try {\n-            conn = openConnection( dbName, user, isLogicalName, null );\n+            conn = openConnection( dbName, user, password, isLogicalName, null );\n \n             if ( shouldFail )   { fail( tagError( \"Connection to \" + dbName + \" should have failed.\" ) ); }\n         }\n@@ -1350,7 +1359,11 @@ private void  vetStatement( boolean shouldFail, Connection conn, String command,\n     private Connection  openConnection( String dbName, String user, boolean isLogicalName, Properties props )\n         throws SQLException\n     {\n-        String  password = getPassword( user );\n+        return openConnection( dbName, user, getPassword( user ), isLogicalName, props );\n+    }\n+    private Connection  openConnection( String dbName, String user, String password, boolean isLogicalName, Properties props )\n+        throws SQLException\n+    {\n         if ( isLogicalName )\n         {\n             return getTestConfiguration().openConnection( dbName, user, password );",
                "raw_url": "https://github.com/apache/derby/raw/601e027b04418d0d7c37ef12a66fac944396ff77/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java",
                "sha": "978e4918e0800aa975b4515cfbf5409b64fcbbe1",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/derby/blob/601e027b04418d0d7c37ef12a66fac944396ff77/java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java?ref=601e027b04418d0d7c37ef12a66fac944396ff77",
                "deletions": 2,
                "filename": "java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java",
                "patch": "@@ -91,8 +91,8 @@ public Connection openConnection(String databaseName, String user, String passwo\n \n         Properties connectionAttributes =\n                 new Properties(config.getConnectionAttributes());\n-        connectionAttributes.setProperty(\"user\", user);\n-        connectionAttributes.setProperty(\"password\", password);\n+        if ( user != null ) { connectionAttributes.setProperty(\"user\", user); }\n+        if ( password  != null ) { connectionAttributes.setProperty(\"password\", password); }\n \n         if ( connectionProperties != null ) { connectionAttributes.putAll( connectionProperties ); }\n ",
                "raw_url": "https://github.com/apache/derby/raw/601e027b04418d0d7c37ef12a66fac944396ff77/java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java",
                "sha": "7fc8c1a4b8cb1f77cddc425896ee6f2ff6dd1f47",
                "status": "modified"
            }
        ],
        "message": "DERBY-866: Cleanup an NPE in NATIVE authentication and add some defensive code to frustrate blackhats.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1295189 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/063dd554d30bb6ef19425e10b91b86cf973cbd0d",
        "patched_files": [
            "DriverManagerConnector.java",
            "NativeAuthenticationServiceImpl.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "NativeAuthenticationServiceTest.java"
        ]
    },
    "derby_615cb37": {
        "bug_id": "derby_615cb37",
        "commit": "https://github.com/apache/derby/commit/615cb37cc1e569b5ff5838722d102dc17dcf6d14",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/derby/blob/615cb37cc1e569b5ff5838722d102dc17dcf6d14/java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java?ref=615cb37cc1e569b5ff5838722d102dc17dcf6d14",
                "deletions": 9,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java",
                "patch": "@@ -512,9 +512,9 @@ private void resolveRoutine(FromList fromList, SubqueryList subqueryList, Vector\n \n \t\t\tAliasDescriptor proc = (AliasDescriptor) list.get(i);\n \n-\t\t\tRoutineAliasInfo routineInfo = (RoutineAliasInfo) proc.getAliasInfo();\n-\t\t\tint parameterCount = routineInfo.getParameterCount();\n-            boolean hasVarargs = routineInfo.hasVarargs();\n+\t\t\tRoutineAliasInfo rai = (RoutineAliasInfo) proc.getAliasInfo();\n+\t\t\tint parameterCount = rai.getParameterCount();\n+            boolean hasVarargs = rai.hasVarargs();\n \n             if ( hasVarargs )\n             {\n@@ -528,10 +528,10 @@ else if (parameterCount != methodParms.length)\n \t\t\t// pre-form the method signature. If it is a dynamic result set procedure\n \t\t\t// then we need to add in the ResultSet array\n \n-\t\t\tTypeDescriptor[] parameterTypes = routineInfo.getParameterTypes();\n+\t\t\tTypeDescriptor[] parameterTypes = rai.getParameterTypes();\n \n \t\t\tint sigParameterCount = parameterCount;\n-\t\t\tif (routineInfo.getMaxDynamicResultSets() > 0)\n+\t\t\tif (rai.getMaxDynamicResultSets() > 0)\n             { sigParameterCount++; }\n \n \t\t\tsignature = new JSQLType[sigParameterCount];\n@@ -547,7 +547,7 @@ else if (parameterCount != methodParms.length)\n \n \n \t\t\t\t// if it's an OUT or INOUT parameter we need an array.\n-\t\t\t\tint parameterMode = routineInfo.getParameterModes()[ getRoutineArgIdx( routineInfo, p ) ];\n+\t\t\t\tint parameterMode = rai.getParameterModes()[ getRoutineArgIdx( rai, p ) ];\n \n \t\t\t\tif (parameterMode != JDBC30Translation.PARAMETER_MODE_IN) {\n \n@@ -609,6 +609,7 @@ else if (parameterCount != methodParms.length)\n                         coerceMethodParameter\n                             (\n                              fromList, subqueryList, aggregateVector,\n+                             rai,\n                              methodParms.length,\n                              paramdtd, parameterTypeId, parameterMode,\n                              idx\n@@ -620,6 +621,7 @@ else if (parameterCount != methodParms.length)\n                     coerceMethodParameter\n                         (\n                          fromList, subqueryList, aggregateVector,\n+                         rai,\n                          methodParms.length,\n                          paramdtd, parameterTypeId, parameterMode,\n                          p\n@@ -641,7 +643,7 @@ else if (parameterCount != methodParms.length)\n \n \t\t\t}\n \n-\t\t\tthis.routineInfo = routineInfo;\n+\t\t\tthis.routineInfo = rai;\n \t\t\tad = proc;\n \n \t\t\t// If a procedure is in the system schema and defined as executing\n@@ -675,7 +677,8 @@ else if (parameterCount != methodParms.length)\n         (\n          FromList fromList,\n          SubqueryList subqueryList,\n-         Vector aggregateVector, \n+         Vector aggregateVector,\n+         RoutineAliasInfo rai,\n          int    parameterCount, // number of declared routine args\n          DataTypeDescriptor paramdtd,   // declared type of routine arg\n          TypeId parameterTypeId,    // declared type id of routine arg\n@@ -703,7 +706,7 @@ else if (parameterCount != methodParms.length)\n                     (\n                      SQLState.LANG_DB2_PARAMETER_NEEDS_MARKER,\n                      RoutineAliasInfo.parameterMode(parameterMode),\n-                     routineInfo.getParameterNames()[p]\n+                     rai.getParameterNames()[p]\n                      );\n             }\n             isParameterMarker = false;",
                "raw_url": "https://github.com/apache/derby/raw/615cb37cc1e569b5ff5838722d102dc17dcf6d14/java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java",
                "sha": "895b041b081076271e30098aeecae8bb693619e4",
                "status": "modified"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/derby/blob/615cb37cc1e569b5ff5838722d102dc17dcf6d14/java/testing/org/apache/derbyTesting/functionTests/tests/lang/VarargsTest.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/VarargsTest.java?ref=615cb37cc1e569b5ff5838722d102dc17dcf6d14",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/VarargsTest.java",
                "patch": "@@ -54,6 +54,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n     private static  final   String  BAD_TIME_FORMAT = \"22007\";\n     private static  final   String  BAD_BOOLEAN_FORMAT = \"22018\";\n     private static  final   String  NEEDS_DJRS_STYLE = \"42ZB2\";\n+    private static  final   String  NEEDS_PARAMETER_MARKER = \"42886\";\n \n     ///////////////////////////////////////////////////////////////////////////////////\n     //\n@@ -1157,6 +1158,28 @@ public void test_06_tableFunctions() throws Exception\n \n     }\n \n+    /**\n+     * <p>\n+     * Test for NPE reported on DERBY-6047.\n+     * </p>\n+     */\n+    public void test_07_6047() throws Exception\n+    {\n+        Connection conn = getConnection();\n+\n+        goodStatement\n+            ( conn,\n+              \"create procedure PROC_6047( inout x int )\\n\" +\n+              \"parameter style java modifies sql data language java\\n\" +\n+              \"external name 'DUMMY.PROC_6047'\\n\"\n+              );\n+\n+        expectCompilationError\n+            ( NEEDS_PARAMETER_MARKER,\n+              \"call PROC_6047(1)\"\n+              );\n+    }\n+    \n     ///////////////////////////////////////////////////////////////////////////////////\n     //\n     // MINIONS",
                "raw_url": "https://github.com/apache/derby/raw/615cb37cc1e569b5ff5838722d102dc17dcf6d14/java/testing/org/apache/derbyTesting/functionTests/tests/lang/VarargsTest.java",
                "sha": "dbaaf342e3ed18fca52f108d0a9ee4160809c804",
                "status": "modified"
            }
        ],
        "message": "DERBY-6047: Fix NPE in routine resolution introduced by work on DERBY-3069.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1435267 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/05e6355ebbad040a67f515a63e2a2db60e3eafe2",
        "patched_files": [
            "StaticMethodCallNode.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "VarargsTest.java"
        ]
    },
    "derby_617d55a": {
        "bug_id": "derby_617d55a",
        "commit": "https://github.com/apache/derby/commit/617d55aba2641523093e9c7496659b07224bdc0c",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/derby/blob/617d55aba2641523093e9c7496659b07224bdc0c/java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java?ref=617d55aba2641523093e9c7496659b07224bdc0c",
                "deletions": 2,
                "filename": "java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java",
                "patch": "@@ -411,7 +411,7 @@ private SPSDescriptor getSPS(LanguageConnectionContext lcc,\n \t\t\t\t\treferencedCols,\n \t\t\t\t\treferencedColsInTriggerAction,\n                     0,\n-\t\t\t\t\ttd,\n+\t\t\t\t\tgetTableDescriptor(),\n \t\t\t\t\t-1,\n                     false,\n                     null);\n@@ -423,7 +423,7 @@ private SPSDescriptor getSPS(LanguageConnectionContext lcc,\n \t\t\t\t\treferencedCols,\n \t\t\t\t\treferencedColsInTriggerAction,\n \t\t\t\t\t0,\n-\t\t\t\t\ttd,\n+\t\t\t\t\tgetTableDescriptor(),\n \t\t\t\t\t-1,\n                     false,\n                     null,",
                "raw_url": "https://github.com/apache/derby/raw/617d55aba2641523093e9c7496659b07224bdc0c/java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java",
                "sha": "f4f97995b1908c0fa96480f6592b4250b7e0c415",
                "status": "modified"
            },
            {
                "additions": 135,
                "blob_url": "https://github.com/apache/derby/blob/617d55aba2641523093e9c7496659b07224bdc0c/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java",
                "changes": 135,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java?ref=617d55aba2641523093e9c7496659b07224bdc0c",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java",
                "patch": "@@ -301,6 +301,141 @@ public void testDerby6383StatementTriggerBugTst2() throws SQLException\n         s.executeUpdate(\"drop table DERBY_6368_TAB2\");\n     }\n \n+    public void testDerby6726()\n+        throws SQLException\n+    {\n+        Statement s = createStatement();\n+        s.executeUpdate( \"CREATE TABLE LOG (\" +\n+                    \"ID BIGINT NOT NULL PRIMARY KEY \" +\n+                    \"   GENERATED ALWAYS AS IDENTITY \" +\n+                    \"   (START WITH 1, INCREMENT BY 1),\" +\n+                    \"NAME VARCHAR(80) DEFAULT 'New Log' NOT NULL,\" +\n+                    \"VERSION INT NOT NULL,\" +\n+                    \"DEPTH_UNITS VARCHAR(12) DEFAULT 'M',\" + \n+                    \"TOP_DEPTH DOUBLE DEFAULT -999.25,\" +\n+                    \"BOTTOM_DEPTH DOUBLE DEFAULT -999.25\" +\n+                    \")\");\n+\n+        s.executeUpdate(\"CREATE TABLE CURVE (\" +\n+                    \"ID BIGINT NOT NULL PRIMARY KEY \" +\n+                    \"   GENERATED ALWAYS AS IDENTITY \" +\n+                    \"   (START WITH 1, INCREMENT BY 1),\" +\n+                    \"LOG_ID BIGINT NOT NULL,\" +\n+                    \"NAME VARCHAR(80) DEFAULT 'New Curve' NOT NULL,\" +\n+                    \"TYPE VARCHAR(40) DEFAULT '.' NOT NULL,\" +\n+                    \"VERSION INT NOT NULL,\" +\n+                    \"PERSISTENCE VARCHAR(40) DEFAULT 'NUMBER',\" +\n+                    \"DEPTH_UNITS VARCHAR(12) DEFAULT 'M',\" + \n+                    \"CURVE_UNITS VARCHAR(40) DEFAULT '.',\" + \n+                    \"TOP_DEPTH DOUBLE DEFAULT -999.25,\" +\n+                    \"BOTTOM_DEPTH DOUBLE DEFAULT -999.25,\" +\n+                    \"MINCVAL DOUBLE DEFAULT -999.25,\" + \n+                    \"MAXCVAL DOUBLE DEFAULT -999.25,\" + \n+                    \"CREATED_BY VARCHAR(40) DEFAULT USER,\" +\n+                    \"CREATE_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\" +\n+                    \"LAST_UPDATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP\" +\n+                    \")\");\n+\n+        s.executeUpdate(\"CREATE TRIGGER CURVE_TRIG_LAST \" +\n+                    \" AFTER UPDATE OF NAME, TYPE, VERSION, PERSISTENCE, \" +\n+                    \"       DEPTH_UNITS, CURVE_UNITS, TOP_DEPTH, \" +\n+                    \"       BOTTOM_DEPTH, MINCVAL, MAXCVAL ON CURVE \" +\n+                    \" REFERENCING OLD AS UPDATEDROW \" +\n+                    \" FOR EACH ROW \" +\n+                    \"    UPDATE CURVE SET LAST_UPDATED=CURRENT_TIMESTAMP \" +\n+                    \"           WHERE ID=UPDATEDROW.ID\");\n+\n+        s.executeUpdate(\"CREATE TRIGGER CURVE_TRIG_UP \" +\n+                    \" AFTER UPDATE OF TOP_DEPTH, BOTTOM_DEPTH ON CURVE \" +\n+                    \" REFERENCING OLD AS UPDATEDROW \" +\n+                    \" FOR EACH ROW \" +\n+                    \"    UPDATE LOG SET \" +\n+                    \"        TOP_DEPTH=(\" +\n+                    \"            SELECT MIN(TOP_DEPTH) FROM CURVE \" +\n+                    \"                   WHERE LOG_ID=UPDATEDROW.LOG_ID AND \" +\n+                    \"                         TOP_DEPTH<>-999.25), \" +\n+                    \"        BOTTOM_DEPTH=(\" +\n+                    \"            SELECT MAX(BOTTOM_DEPTH) FROM CURVE \" +\n+                    \"                   WHERE LOG_ID=UPDATEDROW.LOG_ID AND \" +\n+                    \"                         BOTTOM_DEPTH<>-999.25) \" +\n+                    \"        WHERE ID=UPDATEDROW.LOG_ID\");\n+\n+        s.executeUpdate(\"CREATE TABLE CURVE_DATA_NUMBER (\" +\n+                    \"CURVE_ID BIGINT NOT NULL,\" +\n+                    \"SEQ_NUM BIGINT NOT NULL,\" +\n+                    \"MDEPTH DOUBLE,\" +\n+                    \"CVALUE DOUBLE DEFAULT -999.25\" +\n+                    \")\");\n+\n+        s.executeUpdate(\"ALTER TABLE CURVE_DATA_NUMBER \" +\n+                        \"  ADD CONSTRAINT CURVE_DATA_NUMBER_CURVE_ID_FK \" +\n+                        \"      FOREIGN KEY (CURVE_ID) REFERENCES CURVE (ID) \" +\n+                        \"      ON DELETE CASCADE\");\n+\n+        s.executeUpdate(\"ALTER TABLE CURVE_DATA_NUMBER \" +\n+                        \"  ADD CONSTRAINT CURVE_DATA_NUMBER_UN \" +\n+                        \"      UNIQUE (CURVE_ID, SEQ_NUM)\");\n+\n+        s.executeUpdate(\"CREATE INDEX CURVE_DATA_NUMBER_SEQ_NUM_INDEX \" +\n+                        \"  on CURVE_DATA_NUMBER (SEQ_NUM)\");\n+\n+        s.executeUpdate(\"CREATE TRIGGER CURVE_DATA_NUMBER_TRIG_UP \" +\n+                        \" AFTER UPDATE OF CURVE_ID, SEQ_NUM, MDEPTH, CVALUE \" +\n+                        \"       ON CURVE_DATA_NUMBER \" +\n+                        \" REFERENCING OLD AS UPDATEDROW \" +\n+                        \" FOR EACH ROW \" +\n+                        \"    UPDATE CURVE SET \" + \n+                        \"        TOP_DEPTH=(\" +\n+                        \"            SELECT MIN(MDEPTH) FROM CURVE_DATA_NUMBER \" +\n+                        \"                   WHERE CURVE_ID=UPDATEDROW.CURVE_ID AND \" +\n+                        \"                   MDEPTH<>-999.25),\" + \n+                        \"        BOTTOM_DEPTH=(\" +\n+                        \"            SELECT MAX(MDEPTH) FROM CURVE_DATA_NUMBER \" +\n+                        \"                   WHERE CURVE_ID=UPDATEDROW.CURVE_ID AND \" +\n+                        \"                   MDEPTH<>-999.25),\" + \n+                        \"        MINCVAL=(\" +\n+                        \"            SELECT MIN(CVALUE) FROM CURVE_DATA_NUMBER \" +\n+                        \"                   WHERE CURVE_ID=UPDATEDROW.CURVE_ID AND \" +\n+                        \"                   CVALUE<>-999.25),\" + \n+                        \"        MAXCVAL=(\" +\n+                        \"            SELECT MAX(CVALUE) FROM CURVE_DATA_NUMBER \" +\n+                        \"                   WHERE CURVE_ID=UPDATEDROW.CURVE_ID AND \" +\n+                        \"                   CVALUE<>-999.25) \" + \n+                        \"    WHERE ID=UPDATEDROW.CURVE_ID\");\n+\n+        s.executeUpdate(\"INSERT INTO LOG (NAME, VERSION) VALUES('TESTLOG',1)\");\n+\n+        s.executeUpdate(\"INSERT INTO CURVE(LOG_ID,NAME,VERSION) VALUES(1,'GR',1)\");\n+\n+        PreparedStatement ps = prepareStatement(\n+                        \"INSERT INTO CURVE_DATA_NUMBER \" +\n+                        \"   (CURVE_ID, SEQ_NUM, MDEPTH, CVALUE) \" +\n+                        \"   VALUES(?,?,?,?)\");\n+\n+        for(int i=1; i< 1000; i++) {\n+            ps.setInt(1, 1);\n+            ps.setInt(2, i);\n+            ps.setDouble(3, 1000.0 + i);\n+            ps.setDouble(4, 43.0 + i);\n+            ps.executeUpdate();\n+        }\n+\n+        s.executeUpdate(\"UPDATE CURVE_DATA_NUMBER \" +\n+                        \"  SET CURVE_ID=1 WHERE CURVE_ID=1 AND SEQ_NUM=1\");\n+\n+        s.executeUpdate(\"DROP TRIGGER CURVE_DATA_NUMBER_TRIG_UP\");\n+        s.executeUpdate(\"DROP TRIGGER CURVE_TRIG_UP\");\n+        s.executeUpdate(\"DROP TRIGGER CURVE_TRIG_LAST\");\n+        s.executeUpdate(\"ALTER TABLE CURVE_DATA_NUMBER \" +\n+                        \" DROP CONSTRAINT CURVE_DATA_NUMBER_CURVE_ID_FK\");\n+        s.executeUpdate(\"ALTER TABLE CURVE_DATA_NUMBER \" +\n+                        \" DROP CONSTRAINT CURVE_DATA_NUMBER_UN\");\n+        s.executeUpdate(\"DROP INDEX CURVE_DATA_NUMBER_SEQ_NUM_INDEX\");\n+        s.executeUpdate(\"DROP TABLE LOG\");\n+        s.executeUpdate(\"DROP TABLE CURVE\");\n+        s.executeUpdate(\"DROP TABLE CURVE_DATA_NUMBER\");\n+    }\n+\n /**\n      * Test that invalidating stored statements marks the statement invalid\n      *  in SYS.SYSSTATEMENTS. And when one of those invalid statements is",
                "raw_url": "https://github.com/apache/derby/raw/617d55aba2641523093e9c7496659b07224bdc0c/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java",
                "sha": "4f29e64ac2f6e81f77f7f16e373ce47a1cfbe533",
                "status": "modified"
            }
        ],
        "message": "DERBY-6726: NPE from trigger\n\nWhen there are multiple triggers on the same table, it is crucial that the\nTriggerDescriptor class always uses the getTableDescriptor() getter method\nto access its 'td' member field, so that the field can be lazy-initialized\nif it has not yet been set.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1763024 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/b1047191cf38ccd210002346bfdc54e0458a9381",
        "patched_files": [
            "TriggerDescriptor.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "TriggerTest.java"
        ]
    },
    "derby_63ecb28": {
        "bug_id": "derby_63ecb28",
        "commit": "https://github.com/apache/derby/commit/63ecb285f23d6087e4bf314e7e3f02dc2bc8d555",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/derby/blob/63ecb285f23d6087e4bf314e7e3f02dc2bc8d555/java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java?ref=63ecb285f23d6087e4bf314e7e3f02dc2bc8d555",
                "deletions": 3,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java",
                "patch": "@@ -31,7 +31,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import org.apache.derby.iapi.services.context.ContextService;\n import org.apache.derby.iapi.services.i18n.MessageService;\n import org.apache.derby.iapi.services.loader.ClassFactory;\n-import org.apache.derby.iapi.sql.compile.CompilerContext;\n+import org.apache.derby.iapi.services.loader.ClassFactoryContext;\n import org.apache.derby.iapi.sql.compile.OptTrace;\n import org.apache.derby.iapi.sql.dictionary.OptionalTool;\n \n@@ -107,8 +107,8 @@ else if ( \"custom\".equals( configurationParameters[ 0 ] ) )\n             String  customOptTraceName = configurationParameters[ 1 ];\n \n             try {\n-                CompilerContext cc = (CompilerContext) ContextService.getContext( CompilerContext.CONTEXT_ID );\n-                ClassFactory    classFactory = cc.getClassFactory();\n+                ClassFactoryContext cfc = (ClassFactoryContext) ContextService.getContext( ClassFactoryContext.CONTEXT_ID );\n+                ClassFactory    classFactory = cfc.getClassFactory();\n \n                 tracer = (OptTrace) classFactory.loadApplicationClass( customOptTraceName ).newInstance();\n             }",
                "raw_url": "https://github.com/apache/derby/raw/63ecb285f23d6087e4bf314e7e3f02dc2bc8d555/java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java",
                "sha": "f9d2c3a1eb93bd638d834951adc225786caf79a8",
                "status": "modified"
            },
            {
                "additions": 46,
                "blob_url": "https://github.com/apache/derby/blob/63ecb285f23d6087e4bf314e7e3f02dc2bc8d555/java/testing/org/apache/derbyTesting/functionTests/tests/lang/Test_6496.java",
                "changes": 72,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/Test_6496.java?ref=63ecb285f23d6087e4bf314e7e3f02dc2bc8d555",
                "deletions": 26,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/Test_6496.java",
                "patch": "@@ -21,24 +21,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \n package org.apache.derbyTesting.functionTests.tests.lang;\n \n-import java.sql.SQLException;\n-import java.sql.SQLWarning;\n import java.sql.Connection;\n-import java.sql.Statement;\n-import java.sql.PreparedStatement;\n-import java.sql.ResultSet;\n-import java.sql.DriverManager;\n-import java.util.ArrayList;\n import junit.framework.Test;\n import junit.framework.TestSuite;\n-import org.apache.derbyTesting.junit.BaseJDBCTestCase;\n-import org.apache.derbyTesting.junit.JDBC;\n-import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;\n-import org.apache.derbyTesting.junit.JDBC;\n-import org.apache.derbyTesting.junit.SecurityManagerSetup;\n import org.apache.derbyTesting.junit.TestConfiguration;\n-import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;\n-import org.apache.derbyTesting.junit.JDBC;\n \n /**\n  * <p>\n@@ -56,8 +42,11 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \n     private static  final   String      TEST_DBO = \"TEST_DBO\";\n \n-    private static  final   String      LOAD_TOOL = \"call syscs_util.syscs_register_tool( 'databaseMetaData', true )\";\n-    private static  final   String      UNLOAD_TOOL = \"call syscs_util.syscs_register_tool( 'databaseMetaData', false )\";\n+    private static  final   String      LOAD_METADATA_TOOL = \"call syscs_util.syscs_register_tool( 'databaseMetaData', true )\";\n+    private static  final   String      UNLOAD_METADATA_TOOL = \"call syscs_util.syscs_register_tool( 'databaseMetaData', false )\";\n+\n+    private static  final   String      LOAD_OPTIMIZER_TOOL = \"call syscs_util.syscs_register_tool('optimizerTracing', true, 'custom', 'org.apache.derbyTesting.functionTests.tests.lang.DummyOptTrace')\";\n+    private static  final   String      UNLOAD_OPTIMIZER_TOOL = \"call syscs_util.syscs_register_tool('optimizerTracing', false)\";\n \n     ///////////////////////////////////////////////////////////////////////////////////\n     //\n@@ -105,30 +94,54 @@ public static Test suite()\n \n     /**\n      * <p>\n-     * Test baseline permissions where no grants are made.\n+     * Test that we can load the metadata tool twice without popping an NPE.\n      * </p>\n      */\n-    public  void    test_001()\n+    public  void    test_001_metadata()\n         throws Exception\n     {\n-        Connection  dboConnection = openUserConnection( TEST_DBO );\n+        metadataTester();\n+    }\n \n-        goodStatement( dboConnection, LOAD_TOOL );\n-        goodStatement( dboConnection, UNLOAD_TOOL );\n+    /**\n+     * <p>\n+     * Test that we can load the metadata tool twice without popping an NPE.\n+     * </p>\n+     */\n+    public  void    test_002_metadata()\n+        throws Exception\n+    {\n+        metadataTester();\n+    }\n+    private void    metadataTester() throws Exception\n+    {\n+        toolTester( LOAD_METADATA_TOOL, UNLOAD_METADATA_TOOL );\n     }\n \n     /**\n      * <p>\n-     * Test that a user can grant access to her indexes.\n+     * Test that we can load the optimizer tool twice without popping an NPE.\n      * </p>\n      */\n-    public  void    test_002()\n+    public  void    test_003_optimizer()\n         throws Exception\n     {\n-        Connection  dboConnection = openUserConnection( TEST_DBO );\n+        optimizerTester();\n+    }\n \n-        goodStatement( dboConnection, LOAD_TOOL );\n-        goodStatement( dboConnection, UNLOAD_TOOL );\n+    /**\n+     * <p>\n+     * Test that we can load the optimizer tool twice without popping an NPE.\n+     * </p>\n+     */\n+    public  void    test_004_optimizer()\n+        throws Exception\n+    {\n+        optimizerTester();\n+    }\n+    private void    optimizerTester() throws Exception\n+    {\n+        toolTester( LOAD_OPTIMIZER_TOOL, UNLOAD_OPTIMIZER_TOOL );\n     }\n \n     ///////////////////////////////////////////////////////////////////////////////////\n@@ -137,4 +150,11 @@ public  void    test_002()\n     //\n     ///////////////////////////////////////////////////////////////////////////////////\n \n+    private void    toolTester( String loadTool, String unloadTool ) throws Exception\n+    {\n+        Connection  dboConnection = openUserConnection( TEST_DBO );\n+\n+        goodStatement( dboConnection, loadTool );\n+        goodStatement( dboConnection, unloadTool );\n+    }\n }",
                "raw_url": "https://github.com/apache/derby/raw/63ecb285f23d6087e4bf314e7e3f02dc2bc8d555/java/testing/org/apache/derbyTesting/functionTests/tests/lang/Test_6496.java",
                "sha": "fd9744fbac56ee2bf598cc823a6ae995fda48fd1",
                "status": "modified"
            }
        ],
        "message": "DERBY-6496: Fix NPE in loading of the optimizer tracing tool; tests passed cleanly on derby-6496-02-aa-optimizerTracer.diff.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1574927 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/02fcca3729ed28a4be5900f965da3f8413b4026e",
        "patched_files": [
            "OptimizerTracer.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "Test_6496.java"
        ]
    },
    "derby_67790a0": {
        "bug_id": "derby_67790a0",
        "commit": "https://github.com/apache/derby/commit/67790a0ed8acd00d35026e4bbbae8a454dbc252e",
        "file": [
            {
                "additions": 48,
                "blob_url": "https://github.com/apache/derby/blob/67790a0ed8acd00d35026e4bbbae8a454dbc252e/java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java",
                "changes": 79,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java?ref=67790a0ed8acd00d35026e4bbbae8a454dbc252e",
                "deletions": 31,
                "filename": "java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java",
                "patch": "@@ -126,6 +126,20 @@ public void printStackTrace(PrintWriter s) {\n         s.println(threadDump);\n     }\n \n+    /**\n+     * Tells if generating a thread dump is supported in the running JVM.\n+     */\n+    private boolean supportsThreadDump() {\n+        try {\n+            // This checks that we are on a jvm >= 1.5 where we\n+            // can actually do threaddumps.\n+            Thread.class.getMethod(\"getAllStackTraces\", new Class[] {});\n+            return true;\n+        } catch (NoSuchMethodException nsme) {\n+            // Ignore exception\n+        }\n+        return false;\n+    }\n \n     /**\n      * Dumps stack traces for all the threads if the JVM supports it.\n@@ -140,54 +154,57 @@ public void printStackTrace(PrintWriter s) {\n      */\n     private String dumpThreads() {\n \n+        if (!supportsThreadDump()) {\n+            return \"(Skipping thread dump because it is not \" +\n+                    \"supported on JVM 1.4)\";\n+        }\n+            \n+        // NOTE: No need to flush with the StringWriter/PrintWriter combination.\n         StringWriter out = new StringWriter();\n         PrintWriter p = new PrintWriter(out, true);\n \n-        //Try to get a thread dump and deal with various situations.\n+        // Load the class and method we need with reflection.\n+        final Method m;\n         try {\n-            //This checks that we are on a jvm >= 1.5 where we\n-            //can actually do threaddumps.\n-            Thread.class.getMethod(\"getAllStackTraces\", new Class[] {});\n-\n-            //Then get the thread dump.\n-            Class c = Class.\n-            forName(\"org.apache.derby.shared.common.sanity.ThreadDump\");\n-            final Method m = c.getMethod(\"getStackDumpString\",new Class[] {});\n-\n-            String dump;\n+            Class c = Class.forName(\n+                    \"org.apache.derby.shared.common.sanity.ThreadDump\");\n+            m = c.getMethod(\"getStackDumpString\", new Class[] {});\n+        } catch (Exception e) {\n+            p.println(\"Failed to load class/method required to generate \" +\n+                    \"a thread dump:\");\n+            e.printStackTrace(p);\n+            return out.toString();\n+        }\n \n-            dump = (String) AccessController.doPrivileged\n+        //Try to get a thread dump and deal with various situations.\n+        try {\n+            String dump = (String) AccessController.doPrivileged\n             (new PrivilegedExceptionAction(){\n                 public Object run() throws\n-                IllegalArgumentException,\n-                IllegalAccessException,\n-                InvocationTargetException{\n-                    return m.invoke(null, null);\n+                        IllegalArgumentException,\n+                        IllegalAccessException,\n+                        InvocationTargetException {\n+                    return m.invoke(null, (Object[])null);\n                 }\n             }\n             );\n \n             //Print the dump to the message string. That went OK.\n-            p.print(\"---------------\\nStack traces for all \" +\n-            \"live threads:\");\n+            p.print(\"---------------\\nStack traces for all live threads:\");\n             p.println(\"\\n\" + dump);\n             p.println(\"---------------\");\n-        } catch (NoSuchMethodException e) {\n-            p.println(\"(Skipping thread dump because it is not \" +\n-            \"supported on JVM 1.4)\");\n-\n-        } catch (Exception e) {\n-            if (e instanceof PrivilegedActionException &&\n-                e.getCause() instanceof InvocationTargetException &&\n-                e.getCause().getCause() instanceof AccessControlException){\n+        } catch (PrivilegedActionException pae) {\n+            Throwable cause = pae.getCause();\n+            if (cause instanceof InvocationTargetException &&\n+                cause.getCause() instanceof AccessControlException) {\n \n                 p.println(\"(Skipping thread dump \"\n-                        + \"because of insufficient permissions:\\n\"\n-                        + e.getCause().getCause() + \")\\n\");\n+                    + \"because of insufficient permissions:\\n\"\n+                    + cause.getCause() + \")\\n\");\n             } else {\n-                p.println(\"\\nAssertFailure tried to do a thread dump, but \"\n-                        + \"there was an error:\");\n-                e.getCause().printStackTrace(p);\n+                p.println(\"\\nAssertFailure tried to do a thread dump, \"\n+                    + \"but there was an error:\");\n+                cause.printStackTrace(p);\n             }\n         }\n         return out.toString();",
                "raw_url": "https://github.com/apache/derby/raw/67790a0ed8acd00d35026e4bbbae8a454dbc252e/java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java",
                "sha": "f23b88aa4d3727a2a66a7e49f17d197e81eaa653",
                "status": "modified"
            }
        ],
        "message": "DERBY-5256: Improve error reporting in common.sanity.AssertFailure \n\nAdded more specific error reporting, and fixed code that could result\nin an NPE under some circumstances.\n\nPatch file: derby-5256-1a-error_reporting.diff\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1130964 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/6f271b4bcca9f126632aee43c3e144061773c08d",
        "patched_files": [
            "AssertFailure.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "AssertFailureTest.java"
        ]
    },
    "derby_6a072f8": {
        "bug_id": "derby_6a072f8",
        "commit": "https://github.com/apache/derby/commit/6a072f828dd040b8cf63d0c0fb160ee086ddb4e0",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/derby/blob/6a072f828dd040b8cf63d0c0fb160ee086ddb4e0/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java?ref=6a072f828dd040b8cf63d0c0fb160ee086ddb4e0",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java",
                "patch": "@@ -36,6 +36,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Statement;\n+import java.util.Properties;\n \n import junit.framework.Test;\n \n@@ -45,6 +46,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import org.apache.derbyTesting.junit.TestConfiguration;\n import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;\n import org.apache.derbyTesting.junit.JDBC;\n+import org.apache.derbyTesting.junit.SystemPropertyTestSetup;\n \n /**\n  * This test is part of the \"largedata\" suite because this test tests data for\n@@ -132,6 +134,11 @@ public static Test suite() {\n      * @return a test suite\n      */\n     static Test baseSuite(final int biggestSize, final int bigSize) {\n+    \t//Run the suite with following properties in case we run into lock\n+    \t// time out issues. It will help debug the problem if timeouts occur.\n+        Properties sysprops = new Properties();\n+        sysprops.setProperty(\"derby.locks.deadlockTrace\", \"true\");\n+        sysprops.setProperty(\"derby.locks.monitor\", \"true\");\n         // Some of the test cases depend on certain other test cases to run\n         // first, so force the test cases to run in lexicographical order.\n         Test suite = new CleanDatabaseTestSetup(\n@@ -141,6 +148,7 @@ protected void decorateSQL(Statement s)\n                 setupTables(s, biggestSize, bigSize);\n             }\n         };\n+        suite = new SystemPropertyTestSetup(suite,sysprops);\n \n         return new SupportFilesSetup(suite);\n     }",
                "raw_url": "https://github.com/apache/derby/raw/6a072f828dd040b8cf63d0c0fb160ee086ddb4e0/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java",
                "sha": "c02f42ab87a3f5d0de3eccf86f773438846d1bac",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/derby/blob/6a072f828dd040b8cf63d0c0fb160ee086ddb4e0/java/testing/org/apache/derbyTesting/junit/SystemPropertyTestSetup.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/junit/SystemPropertyTestSetup.java?ref=6a072f828dd040b8cf63d0c0fb160ee086ddb4e0",
                "deletions": 3,
                "filename": "java/testing/org/apache/derbyTesting/junit/SystemPropertyTestSetup.java",
                "patch": "@@ -51,7 +51,6 @@ public SystemPropertyTestSetup(Test test,\n \t{\n \t\tsuper(test);\n \t\tthis.newValues = newValues;\n-\t\tthis.oldValues = new Properties();\n \t\tthis.staticProperties = staticProperties;\n \t}\n \n@@ -67,7 +66,6 @@ public SystemPropertyTestSetup(Test test,\n \t{\n \t\tsuper(test);\n \t\tthis.newValues = newValues;\n-\t\tthis.oldValues = new Properties();\n \t\tthis.staticProperties = false;\n \t}\n \t/**\n@@ -77,6 +75,15 @@ public SystemPropertyTestSetup(Test test,\n     protected void setUp()\n     throws java.lang.Exception\n     {\n+    \t//DERBY-5663 Getting NPE when trying to set \n+    \t// derby.language.logStatementText property to true inside a junit \n+    \t// suite.\n+    \t//The same instance of SystemPropertyTestSetup can be used again\n+    \t// and hence we want to make sure that oldValues is not null as set\n+    \t// in the tearDown() method. If we leave it null, we will run into NPE\n+    \t// during the tearDown of SystemPropertyTestSetup during the \n+    \t// decorator's reuse.\n+\t\tthis.oldValues = new Properties();\n     \t// shutdown engine so static properties take effect\n         // shutdown the engine before setting the properties. this\n         // is because the properties may change authentication settings\n@@ -106,7 +113,6 @@ protected void tearDown()\n     \t// shutdown engine to restore any static properties\n     \tif (staticProperties)\n     \t\tTestConfiguration.getCurrent().shutdownEngine();\n-        newValues = null;\n         oldValues = null;\n     }\n     ",
                "raw_url": "https://github.com/apache/derby/raw/6a072f828dd040b8cf63d0c0fb160ee086ddb4e0/java/testing/org/apache/derbyTesting/junit/SystemPropertyTestSetup.java",
                "sha": "a5340a09aa59ca862c5bd51d1ac1ac6514d09337",
                "status": "modified"
            }
        ],
        "message": "DerbyDERBY-5663 Getting NPE when trying to set derby.language.logStatementText property to true inside a junit suite.\n\nIt is possible that the same instance of SystemPropertyTestSetup decorator is used more than once. In such a case, nulling out the oldValues in tearDown method can cause a null pointer exception in the subsequent use of the same SystemPropertyTestSetup. The right thing to do is to initialize oldValues to new Properties object everytime SystemPropertyTestSetup.setUp gets used. In order to do this, we are removing the initialization of oldValues from the constructor and putting it in setUp method.\n\nAdditionally, we do not want to null out newValues in tearDown method because the subsequent use of same SystemPropertyTestSetup instance will loose the new values requested by the user of the decorator. Because of this, we will not null newValues in tearDown anymore.\n\nExisting junit All suite and derbyall ran fine with these changes.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1309244 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/26e4e3f309325129a419a60c8037464956afa128",
        "patched_files": [
            "SystemPropertyTestSetup.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "LobLimitsTest.java"
        ]
    },
    "derby_7017a35": {
        "bug_id": "derby_7017a35",
        "commit": "https://github.com/apache/derby/commit/7017a3517a29a37001afad516eff8fc1a52f269d",
        "file": [
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/derby/blob/7017a3517a29a37001afad516eff8fc1a52f269d/java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java?ref=7017a3517a29a37001afad516eff8fc1a52f269d",
                "deletions": 0,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java",
                "patch": "@@ -427,4 +427,22 @@ public ValueNode preprocess(int numTables,\n \t\t}\n \t\treturn this;\n \t}\n+\n+    /**\n+     * Remap all the {@code ColumnReference}s in this tree to be clones of\n+     * the underlying expression.\n+     *\n+     * @return the remapped tree\n+     * @throws StandardException if an error occurs\n+     */\n+    public ValueNode remapColumnReferencesToExpressions()\n+            throws StandardException\n+    {\n+        for (int i = 0; i < argumentsList.size(); i++) {\n+            ValueNode vn = (ValueNode) argumentsList.elementAt(i);\n+            vn.remapColumnReferencesToExpressions();\n+        }\n+        return this;\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/derby/raw/7017a3517a29a37001afad516eff8fc1a52f269d/java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java",
                "sha": "f8e98a50270ca6fae09b70beea06bde9857369d2",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/derby/blob/7017a3517a29a37001afad516eff8fc1a52f269d/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CoalesceTest.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CoalesceTest.java?ref=7017a3517a29a37001afad516eff8fc1a52f269d",
                "deletions": 1,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/CoalesceTest.java",
                "patch": "@@ -30,10 +30,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import java.io.UnsupportedEncodingException;\n \n import junit.framework.Test;\n-import junit.framework.TestSuite;\n import org.apache.derbyTesting.junit.BaseJDBCTestCase;\n import org.apache.derbyTesting.junit.TestConfiguration;\n import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;\n+import org.apache.derbyTesting.junit.JDBC;\n \n \n /**\n@@ -1170,6 +1170,19 @@ public void testAggregateDerby2016() throws SQLException\n                expectedValues[index++]);\n     }\n \n+    /**\n+     * Regression test for DERBY-4342. A self-join with COALESCE in the WHERE\n+     * clause used to fail with a NullPointerException because\n+     * CoalesceFunctionNode didn't remap column references correctly.\n+     */\n+    public void testColumnRemappingDerby4342() throws SQLException {\n+        JDBC.assertSingleValueResultSet(s.executeQuery(\n+                \"select t1.smallintcol from \" +\n+                \"AllDataTypesTable t1 join AllDataTypesTable t2 \" +\n+                \"on t1.smallintcol=t2.smallintcol where \" +\n+                \"coalesce(t1.smallintcol, t1.integercol) = 1\"),\n+                \"1\");\n+    }\n \n     /**************supporting methods *******************/\n     private void dumpRS(ResultSet rs, String expectedValue) throws SQLException",
                "raw_url": "https://github.com/apache/derby/raw/7017a3517a29a37001afad516eff8fc1a52f269d/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CoalesceTest.java",
                "sha": "6828a137904859e65171451cf5f066d5788ba315",
                "status": "modified"
            }
        ],
        "message": "DERBY-4342: SQLSTATE 38000 (NullPointerException) at inner self join and value(x1, x2...)\n\nOverride ValueNode.remapColumnReferencesToExpressions() in CoalesceFunctionNode\nso that its arguments are properly remapped. The lack of remapping made the\ngenerated code access the wrong result set, eventually causing the\nNullPointerException.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@819006 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/d95d0e7f5004d65bdabeba2228e8fdebcb76224d",
        "patched_files": [
            "CoalesceFunctionNode.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "CoalesceTest.java"
        ]
    },
    "derby_7522707": {
        "bug_id": "derby_7522707",
        "commit": "https://github.com/apache/derby/commit/75227075f76b4222d3b346b7662e39b1d84767eb",
        "file": [
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/derby/blob/75227075f76b4222d3b346b7662e39b1d84767eb/java/testing/org/apache/derbyTesting/functionTests/tests/lang/PrimaryKeyTest.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/PrimaryKeyTest.java?ref=75227075f76b4222d3b346b7662e39b1d84767eb",
                "deletions": 6,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/PrimaryKeyTest.java",
                "patch": "@@ -25,13 +25,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import java.sql.ResultSetMetaData;\n import java.sql.SQLException;\n import java.sql.Statement;\n-\n import junit.framework.Test;\n import junit.framework.TestSuite;\n-\n import org.apache.derbyTesting.junit.BaseJDBCTestCase;\n import org.apache.derbyTesting.junit.JDBC;\n-import org.apache.derbyTesting.junit.Utilities;\n \n public class PrimaryKeyTest extends BaseJDBCTestCase\n {\t\n@@ -41,13 +38,12 @@ public PrimaryKeyTest(String name)      {\n \tpublic static Test suite() {\n \t\treturn new TestSuite(PrimaryKeyTest.class);\n \t}\n+\n+    @Override\n \tprotected void setUp() throws Exception {\n \t\tsuper.setUp();\n \t\tgetConnection().setAutoCommit(false);\n \t}\n-\tprotected void tearDown() throws Exception {\n-\t\tsuper.tearDown();\n-\t}\n \n \t\t\t\t\t/************ NEGATIVE TESTS ************/\t\n \t/**\n@@ -278,5 +274,27 @@ public void testBug5420() throws SQLException\n \t\tassertUpdateCount(s , 0 , \"drop table B5420_5.t5\");\n \t\tassertUpdateCount(s , 0 , \"drop table B5420_6.t6\");\n \t}\n+\n+    public void testDerby5111() throws SQLException {\n+        final Statement s = createStatement();\n+        s.executeUpdate(\"create table t1 (t1_id integer not null, \" +\n+                \"t0_id integer not null, value varchar(75) not null)\");\n+\n+        try {\n+            s.executeUpdate(\"create unique index ui1 on t1 (t1_id)\");\n+            s.executeUpdate(\"alter table t1 add constraint pk1 \" +\n+                    \"                       primary key (t1_id)\");\n+            s.executeUpdate(\"create unique index ui2 on t1 (t0_id, value)\");\n+\n+            s.executeUpdate(\"insert into t1 values(0, 0, 'Test')\");\n+\n+            // The next statement tries to insert a duplicate.  It used to\n+            // throw an NPE before the fix.\n+            assertStatementError(\n+                    \"23505\", s, \"insert into t1 values(1, 0, 'Test')\");\n+        } finally {\n+            try { s.executeUpdate(\"drop table t1\"); } catch (SQLException e){}\n+        }\n+    }\n }\n ",
                "raw_url": "https://github.com/apache/derby/raw/75227075f76b4222d3b346b7662e39b1d84767eb/java/testing/org/apache/derbyTesting/functionTests/tests/lang/PrimaryKeyTest.java",
                "sha": "db00c33339d8a9565697c237bb6eef3ad0b507f8",
                "status": "modified"
            }
        ],
        "message": "DERBY-5111 NullPointerException on unique constraint violation with unique index\n\nPatch derby-5111-test, which adds the repro for this issue as a new test case.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1582819 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/0f43aec711b158ad9a142d688f7940caba4bd84c",
        "patched_files": [],
        "repo": "derby",
        "unit_tests": [
            "PrimaryKeyTest.java"
        ]
    },
    "derby_75fbb86": {
        "bug_id": "derby_75fbb86",
        "commit": "https://github.com/apache/derby/commit/75fbb86586cf9fdaefbb883e6daff51410818fb1",
        "file": [
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/derby/blob/75fbb86586cf9fdaefbb883e6daff51410818fb1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java?ref=75fbb86586cf9fdaefbb883e6daff51410818fb1",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java",
                "patch": "@@ -21,6 +21,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \n package org.apache.derbyTesting.functionTests.tests.lang;\n \n+import java.sql.Connection;\n import java.sql.SQLException;\n import java.sql.Statement;\n import junit.framework.Test;\n@@ -41,6 +42,13 @@ public static Test suite() {\n         return TestConfiguration.defaultSuite(TriggerWhenClauseTest.class);\n     }\n \n+    @Override\n+    protected void initializeConnection(Connection conn) throws SQLException {\n+        // Run the test cases with auto-commit off so that all changes to\n+        // the database can be rolled back in tearDown().\n+        conn.setAutoCommit(false);\n+    }\n+\n     public void testBasicSyntax() throws SQLException {\n         Statement s = createStatement();\n         s.execute(\"create table t1(x int)\");\n@@ -91,4 +99,19 @@ public void testBasicSyntax() throws SQLException {\n             });\n     }\n \n+    /**\n+     * A row trigger whose WHEN clause contains a subquery, could cause a\n+     * NullPointerException. This test case is disabled until the bug is fixed.\n+     */\n+    public void xtestSubqueryInWhenClauseNPE() throws SQLException {\n+        Statement s = createStatement();\n+        s.execute(\"create table t1(x int)\");\n+        s.execute(\"create table t2(x int)\");\n+        s.execute(\"create trigger tr1 after insert on t1 for each row \"\n+                + \"when ((values true)) insert into t2 values 1\");\n+\n+        // This statement results in a NullPointerException.\n+        s.execute(\"insert into t1 values 1,2,3\");\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/derby/raw/75fbb86586cf9fdaefbb883e6daff51410818fb1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java",
                "sha": "bf397d944e7e64749ddb17e2d227653ada19802b",
                "status": "modified"
            }
        ],
        "message": "DERBY-534: Add a disabled test case for NPE with subquery in WHEN clause\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1525819 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/b79920cce88f7cb842025b52967da820c237bd57",
        "patched_files": [],
        "repo": "derby",
        "unit_tests": [
            "TriggerWhenClauseTest.java"
        ]
    },
    "derby_7775fc7": {
        "bug_id": "derby_7775fc7",
        "commit": "https://github.com/apache/derby/commit/7775fc76794422e94dbbb18dfb45ee1049260181",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/derby/blob/7775fc76794422e94dbbb18dfb45ee1049260181/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java?ref=7775fc76794422e94dbbb18dfb45ee1049260181",
                "deletions": 0,
                "filename": "java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java",
                "patch": "@@ -1494,6 +1494,7 @@ private void truncateTable(Activation activation)\n \t\t{\n \t\t\tindexRows = new ExecIndexRow[numIndexes];\n \t\t\tordering  = new ColumnOrdering[numIndexes][];\n+\t\t\tcollation = new int[numIndexes][];\n \n \t\t\tfor (int index = 0; index < numIndexes; index++)\n \t\t\t{",
                "raw_url": "https://github.com/apache/derby/raw/7775fc76794422e94dbbb18dfb45ee1049260181/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java",
                "sha": "447fe9a019e3758e47c8f682063d5c1f0c6e5a10",
                "status": "modified"
            },
            {
                "additions": 72,
                "blob_url": "https://github.com/apache/derby/blob/7775fc76794422e94dbbb18dfb45ee1049260181/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TruncateTableTest.java",
                "changes": 72,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TruncateTableTest.java?ref=7775fc76794422e94dbbb18dfb45ee1049260181",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/TruncateTableTest.java",
                "patch": "@@ -0,0 +1,72 @@\n+/*\n+ * Class org.apache.derbyTesting.functionTests.tests.lang.TruncateTableTest\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.derbyTesting.functionTests.tests.lang;\n+\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import junit.framework.Test;\n+import org.apache.derby.iapi.services.sanity.SanityManager;\n+import org.apache.derbyTesting.junit.BaseJDBCTestCase;\n+import org.apache.derbyTesting.junit.TestConfiguration;\n+\n+/**\n+ * Tests for TRUNCATE TABLE. Currently, Derby only supports TRUNCATE TABLE in\n+ * debug builds.\n+ */\n+public class TruncateTableTest extends BaseJDBCTestCase {\n+\n+    public TruncateTableTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        if (!SanityManager.DEBUG) {\n+            // Since Derby doesn't support TRUNCATE TABLE in non-debug builds,\n+            // only test that a \"not implemented\" exception is thrown.\n+            return new TruncateTableTest(\"unsupportedInInsaneBuilds\");\n+        }\n+        return TestConfiguration.defaultSuite(TruncateTableTest.class);\n+    }\n+\n+    /**\n+     * Test that a \"not implemented\" exception is thrown if TRUNCATE TABLE\n+     * is used in insane builds.\n+     */\n+    public void unsupportedInInsaneBuilds() throws SQLException {\n+        assertFalse(\"Not to be tested in sane builds\", SanityManager.DEBUG);\n+        assertStatementError(\"0A000\", createStatement(),\n+                             \"truncate table table_that_does_not_exist\");\n+    }\n+\n+    /**\n+     * Test that TRUNCATE TABLE works when there is an index on one of the\n+     * columns. (This code would throw a {@code NullPointerException} before\n+     * DERBY-3352 was fixed).\n+     */\n+    public void testTruncateWithIndex() throws SQLException {\n+        Statement s = createStatement();\n+        s.execute(\"create table t_with_index (x varchar(128) unique, y int)\");\n+        s.execute(\"insert into t_with_index values ('one', 1), ('two', 2)\");\n+        s.execute(\"truncate table t_with_index\");\n+        assertTableRowCount(\"T_WITH_INDEX\", 0);\n+    }\n+}",
                "raw_url": "https://github.com/apache/derby/raw/7775fc76794422e94dbbb18dfb45ee1049260181/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TruncateTableTest.java",
                "sha": "4c7e005eef09eb2cd329a4e05a2bb0b00acc93b9",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/derby/blob/7775fc76794422e94dbbb18dfb45ee1049260181/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java?ref=7775fc76794422e94dbbb18dfb45ee1049260181",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java",
                "patch": "@@ -77,6 +77,7 @@ public static Test suite() {\n         suite.addTest(StreamsTest.suite());\n         suite.addTest(TimeHandlingTest.suite());\n         suite.addTest(TriggerTest.suite());\n+        suite.addTest(TruncateTableTest.suite());\n         suite.addTest(VTITest.suite());\n         suite.addTest(SysDiagVTIMappingTest.suite());\n         suite.addTest(UpdatableResultSetTest.suite());",
                "raw_url": "https://github.com/apache/derby/raw/7775fc76794422e94dbbb18dfb45ee1049260181/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java",
                "sha": "5ca7561e422450fd71fc823e2275425069167dae",
                "status": "modified"
            }
        ],
        "message": "DERBY-3352: truncateTable crashed, Caused by: java.lang.NullPointerException\nPatch files: derby-3352.diff, test.diff (contributed by Knut Anders Hatlen)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@642996 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/c283bcdc89766e8b7399394e009e5e2867873624",
        "patched_files": [
            "AlterTableConstantAction.java",
            "_Suite.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "TruncateTableTest.java"
        ]
    },
    "derby_7a27cab": {
        "bug_id": "derby_7a27cab",
        "commit": "https://github.com/apache/derby/commit/7a27cabe5354712a3e53028c73f501e1bf069c1a",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/derby/blob/7a27cabe5354712a3e53028c73f501e1bf069c1a/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java",
                "changes": 147,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java?ref=7a27cabe5354712a3e53028c73f501e1bf069c1a",
                "deletions": 138,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java",
                "patch": "@@ -304,7 +304,12 @@ public void bindTargetExpressions(FromList fromListParam)\n \t}\n \n \t/**\n-\t * Set the type of each parameter in the result column list for this table constructor.\n+\t * Set the type of each parameter in the result column list if this node\n+\t * represents a table constructor (aka VALUES clause). Table constructors\n+\t * are represented either by a {@code RowResultSetNode} or by a\n+\t * {@code UnionNode} with multiple {@code RowResultSetNode} children and\n+\t * whose {@code tableConstructor()} method returns {@code true}. For all\n+\t * other nodes, this method should be a no-op.\n \t *\n \t * @param typeColumns\tThe ResultColumnList containing the desired result\n \t *\t\t\t\t\t\ttypes.\n@@ -314,143 +319,9 @@ public void bindTargetExpressions(FromList fromListParam)\n \tvoid setTableConstructorTypes(ResultColumnList typeColumns)\n \t\t\tthrows StandardException\n \t{\n-\t\tif (SanityManager.DEBUG)\n-\t\t\tSanityManager.ASSERT(resultColumns.visibleSize() <= typeColumns.size(),\n-\t\t\t\t\"More columns in ResultColumnList than in base table\");\n-\n-\t\t/* Look for ? parameters in the result column list */\n-\t\tint rclSize = resultColumns.size();\n-\t\tfor (int index = 0; index < rclSize; index++)\n-\t\t{\n-\t\t\tResultColumn\trc = (ResultColumn) resultColumns.elementAt(index);\n-\n-\t\t\tValueNode re = rc.getExpression();\n-\n-\t\t\tif (re.requiresTypeFromContext())\n-\t\t\t{\n-\t\t\t\tResultColumn\ttypeCol =\n-\t\t\t\t\t(ResultColumn) typeColumns.elementAt(index);\n-\n-\t\t\t\t/*\n-\t\t\t\t** We found a ? - set its type to the type of the\n-\t\t\t\t** corresponding column of the target table.\n-\t\t\t\t*/\n-\t\t\t\tre.setType(typeCol.getTypeServices());\n-\t\t\t}\n-\t\t\telse if (re instanceof CharConstantNode)\n-\t\t\t{\n-\t\t\t\t// Character constants are of type CHAR (fixed length string).\n-\t\t\t\t// This causes a problem (beetle 5160) when multiple row values are provided\n-\t\t\t\t// as constants for insertion into a variable length string column.\n-\t\t\t\t//\n-\t\t\t\t// This issue is the query expression\n-\t\t\t\t// VALUES 'abc', 'defghi'\n-\t\t\t\t// has type of CHAR(6), ie. the length of largest row value for that column.\n-\t\t\t\t// This is from the UNION defined behaviour.\n-\t\t\t\t// This causes strings with less than the maximum length to be blank padded\n-\t\t\t\t// to that length (CHAR semantics). Thus if this VALUES clause is used to\n-\t\t\t\t// insert into a variable length string column, then these blank padded values\n-\t\t\t\t// are inserted, which is not what is required ...\n-\t\t\t\t// \n-\t\t\t\t// BECAUSE, when the VALUES is used as a table constructor SQL standard says the\n-\t\t\t\t// types of the table constructor's columns are set by the table's column types.\n-\t\t\t\t// Thus, in this case, each of those string constants should be of type VARCHAR\n-\t\t\t\t// (or the matching string type for the table).\n-\t\t\t\t//\n-\t\t\t\t//\n-\t\t\t\t// This is only an issue for fixed length character (CHAR, BIT) string or\n-\t\t\t\t// binary consraints being inserted into variable length types.\n-\t\t\t\t// This is because any other type's fundemental literal value is not affected\n-\t\t\t\t// by its data type. E.g. Numeric types such as INT, REAL, BIGINT, DECIMAL etc.\n-\t\t\t\t// do not have their value modifed by the union since even if the type is promoted\n-\t\t\t\t// to a higher type, its fundemental value remains unchanged. \n-\t\t\t\t// values (1.2, 34.4567, 234.47) will be promoted to\n-\t\t\t\t// values (1.2000, 34.4567, 234.4700)\n-\t\t\t\t// but their numeric value remains the same.\n-\t\t\t\t//\n-\t\t\t\t//\n-\t\t\t\t//\n-\t\t\t\t// The fix is to change the base type of the table constructor's value to\n-\t\t\t\t// match the column type. Its length can be left as-is, because there is\n-\t\t\t\t// still a normailzation step when the value is inserted into the table.\n-\t\t\t\t// That will set the correct length and perform truncation checks etc.\n-\n-\t\t\t\tResultColumn\ttypeCol =\n-\t\t\t\t\t(ResultColumn) typeColumns.elementAt(index);\n-\n-\t\t\t\tTypeId colTypeId = typeCol.getTypeId();\n-\n-\t\t\t\tif (colTypeId.isStringTypeId()) {\n-\n-\t\t\t\t\tif (colTypeId.getJDBCTypeId() != java.sql.Types.CHAR) {\n-\n-\t\t\t\t\t\tint maxWidth = re.getTypeServices().getMaximumWidth();\n-\n-\t\t\t\t\t\tre.setType(new DataTypeDescriptor(colTypeId, true, maxWidth));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\telse if (colTypeId.isBitTypeId()) {\n-\t\t\t\t\tif (colTypeId.getJDBCTypeId() == java.sql.Types.VARBINARY) {\n-\t\t\t\t\t// then we're trying to cast a char literal into a\n-\t\t\t\t\t// variable bit column.  We can't change the base\n-\t\t\t\t\t// type of the table constructor's value from char\n-\t\t\t\t\t// to bit, so instead, we just change the base type\n-\t\t\t\t\t// of that value from char to varchar--that way,\n-\t\t\t\t\t// no padding will be added when we convert to\n-\t\t\t\t\t// bits later on (Beetle 5306).\n-\t\t\t\t\t\tTypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.VARCHAR);\n-\t\t\t\t\t\tre.setType(new DataTypeDescriptor(tId, true));\n-\t\t\t\t\t\ttypeColumns.setElementAt(typeCol, index);\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (colTypeId.getJDBCTypeId() == java.sql.Types.LONGVARBINARY) {\n-\t\t\t\t\t\tTypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.LONGVARCHAR);\n-\t\t\t\t\t\tre.setType(new DataTypeDescriptor(tId, true));\n-\t\t\t\t\t\ttypeColumns.setElementAt(typeCol, index);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t}\n-\t\t\telse if (re instanceof BitConstantNode)\n-\t\t\t{\n-\t\t\t\tResultColumn\ttypeCol =\n-\t\t\t\t\t(ResultColumn) typeColumns.elementAt(index);\n-\n-\t\t\t\tTypeId colTypeId = typeCol.getTypeId();\n-\n-\t\t\t\tif (colTypeId.isBitTypeId()) {\n-\n-\t\t\t\t\t// NOTE: Don't bother doing this if the column type is BLOB,\n-\t\t\t\t\t// as we don't allow bit literals to be inserted into BLOB\n-\t\t\t\t\t// columns (they have to be explicitly casted first); beetle 5266.\n-\t\t\t\t\tif ((colTypeId.getJDBCTypeId() != java.sql.Types.BINARY) &&\n-\t\t\t\t\t\t(colTypeId.getJDBCTypeId() != java.sql.Types.BLOB)) {\n-\n-\t\t\t\t\t\tint maxWidth = re.getTypeServices().getMaximumWidth();\n-\n-\t\t\t\t\t\tre.setType(new DataTypeDescriptor(colTypeId, true, maxWidth));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\telse if (colTypeId.isStringTypeId()) {\n-\t\t\t\t\tif (colTypeId.getJDBCTypeId() == java.sql.Types.VARCHAR) {\n-\t\t\t\t\t// then we're trying to cast a bit literal into a\n-\t\t\t\t\t// variable char column.  We can't change the base\n-\t\t\t\t\t// type of the table constructor's value from bit\n-\t\t\t\t\t// to char, so instead, we just change the base\n-\t\t\t\t\t// type of that value from bit to varbit--that way,\n-\t\t\t\t\t// no padding will be added when we convert to\n-\t\t\t\t\t// char later on.\n-\t\t\t\t\t\tTypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.VARBINARY);\n-\t\t\t\t\t\tre.setType(new DataTypeDescriptor(tId, true));\n-\t\t\t\t\t\ttypeColumns.setElementAt(typeCol, index);\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (colTypeId.getJDBCTypeId() == java.sql.Types.LONGVARCHAR) {\n-\t\t\t\t\t\tTypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.LONGVARBINARY);\n-\t\t\t\t\t\tre.setType(new DataTypeDescriptor(tId, true));\n-\t\t\t\t\t\ttypeColumns.setElementAt(typeCol, index);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n+\t\t// Nothing to be done unless this node represents a VALUES clause, in\n+\t\t// which case the overrides in RowResultSetNode or UnionNode will do\n+\t\t// the necessary work.\n \t}\n \n \t/**",
                "raw_url": "https://github.com/apache/derby/raw/7a27cabe5354712a3e53028c73f501e1bf069c1a/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java",
                "sha": "b29456c059ec1a7c27af216cd27feca4a905fb21",
                "status": "modified"
            },
            {
                "additions": 153,
                "blob_url": "https://github.com/apache/derby/blob/7a27cabe5354712a3e53028c73f501e1bf069c1a/java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java",
                "changes": 164,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java?ref=7a27cabe5354712a3e53028c73f501e1bf069c1a",
                "deletions": 11,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java",
                "patch": "@@ -21,14 +21,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \n package\torg.apache.derby.impl.sql.compile;\n \n-import org.apache.derby.iapi.services.context.ContextManager;\n-\n-import org.apache.derby.iapi.sql.compile.CompilerContext;\n import org.apache.derby.iapi.sql.compile.CostEstimate;\n import org.apache.derby.iapi.sql.compile.Optimizer;\n-import org.apache.derby.iapi.sql.compile.OptimizableList;\n import org.apache.derby.iapi.sql.compile.Optimizable;\n-import org.apache.derby.iapi.sql.compile.OptimizablePredicate;\n import org.apache.derby.iapi.sql.compile.OptimizablePredicateList;\n import org.apache.derby.iapi.sql.compile.RequiredRowOrdering;\n import org.apache.derby.iapi.sql.compile.RowOrdering;\n@@ -38,25 +33,22 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;\n import org.apache.derby.iapi.sql.dictionary.TableDescriptor;\n \n-import org.apache.derby.iapi.sql.Activation;\n-import org.apache.derby.iapi.sql.ResultSet;\n-import org.apache.derby.iapi.sql.Row;\n import org.apache.derby.iapi.error.StandardException;\n \n-import org.apache.derby.impl.sql.compile.ActivationClassBuilder;\n import org.apache.derby.iapi.services.compiler.MethodBuilder;\n \n import org.apache.derby.iapi.store.access.Qualifier;\n \n import org.apache.derby.iapi.services.sanity.SanityManager;\n \n+import org.apache.derby.iapi.types.DataTypeDescriptor;\n+import org.apache.derby.iapi.types.TypeId;\n+\n import org.apache.derby.iapi.util.JBitSet;\n import org.apache.derby.iapi.reference.SQLState;\n import org.apache.derby.iapi.reference.ClassName;\n import org.apache.derby.iapi.services.classfile.VMOpcode;\n \n-import java.util.Enumeration;\n-import java.util.Properties;\n import java.util.Vector;\n \n /**\n@@ -640,6 +632,156 @@ boolean returnsAtMostOneRow()\n \t\treturn true;\n \t}\n \n+\t/**\n+\t * Set the type of each parameter in the result column list for this table constructor.\n+\t *\n+\t * @param typeColumns\tThe ResultColumnList containing the desired result\n+\t *\t\t\t\t\t\ttypes.\n+\t *\n+\t * @exception StandardException\t\tThrown on error\n+\t */\n+\tvoid setTableConstructorTypes(ResultColumnList typeColumns)\n+\t\t\tthrows StandardException\n+\t{\n+\t\tif (SanityManager.DEBUG)\n+\t\t\tSanityManager.ASSERT(resultColumns.visibleSize() <= typeColumns.size(),\n+\t\t\t\t\"More columns in ResultColumnList than in base table\");\n+\n+\t\t/* Look for ? parameters in the result column list */\n+\t\tint rclSize = resultColumns.size();\n+\t\tfor (int index = 0; index < rclSize; index++)\n+\t\t{\n+\t\t\tResultColumn\trc = (ResultColumn) resultColumns.elementAt(index);\n+\n+\t\t\tValueNode re = rc.getExpression();\n+\n+\t\t\tif (re.requiresTypeFromContext())\n+\t\t\t{\n+\t\t\t\tResultColumn\ttypeCol =\n+\t\t\t\t\t(ResultColumn) typeColumns.elementAt(index);\n+\n+\t\t\t\t/*\n+\t\t\t\t** We found a ? - set its type to the type of the\n+\t\t\t\t** corresponding column of the target table.\n+\t\t\t\t*/\n+\t\t\t\tre.setType(typeCol.getTypeServices());\n+\t\t\t}\n+\t\t\telse if (re instanceof CharConstantNode)\n+\t\t\t{\n+\t\t\t\t// Character constants are of type CHAR (fixed length string).\n+\t\t\t\t// This causes a problem (beetle 5160) when multiple row values are provided\n+\t\t\t\t// as constants for insertion into a variable length string column.\n+\t\t\t\t//\n+\t\t\t\t// This issue is the query expression\n+\t\t\t\t// VALUES 'abc', 'defghi'\n+\t\t\t\t// has type of CHAR(6), ie. the length of largest row value for that column.\n+\t\t\t\t// This is from the UNION defined behaviour.\n+\t\t\t\t// This causes strings with less than the maximum length to be blank padded\n+\t\t\t\t// to that length (CHAR semantics). Thus if this VALUES clause is used to\n+\t\t\t\t// insert into a variable length string column, then these blank padded values\n+\t\t\t\t// are inserted, which is not what is required ...\n+\t\t\t\t//\n+\t\t\t\t// BECAUSE, when the VALUES is used as a table constructor SQL standard says the\n+\t\t\t\t// types of the table constructor's columns are set by the table's column types.\n+\t\t\t\t// Thus, in this case, each of those string constants should be of type VARCHAR\n+\t\t\t\t// (or the matching string type for the table).\n+\t\t\t\t//\n+\t\t\t\t//\n+\t\t\t\t// This is only an issue for fixed length character (CHAR, BIT) string or\n+\t\t\t\t// binary consraints being inserted into variable length types.\n+\t\t\t\t// This is because any other type's fundemental literal value is not affected\n+\t\t\t\t// by its data type. E.g. Numeric types such as INT, REAL, BIGINT, DECIMAL etc.\n+\t\t\t\t// do not have their value modifed by the union since even if the type is promoted\n+\t\t\t\t// to a higher type, its fundemental value remains unchanged.\n+\t\t\t\t// values (1.2, 34.4567, 234.47) will be promoted to\n+\t\t\t\t// values (1.2000, 34.4567, 234.4700)\n+\t\t\t\t// but their numeric value remains the same.\n+\t\t\t\t//\n+\t\t\t\t//\n+\t\t\t\t//\n+\t\t\t\t// The fix is to change the base type of the table constructor's value to\n+\t\t\t\t// match the column type. Its length can be left as-is, because there is\n+\t\t\t\t// still a normailzation step when the value is inserted into the table.\n+\t\t\t\t// That will set the correct length and perform truncation checks etc.\n+\n+\t\t\t\tResultColumn\ttypeCol =\n+\t\t\t\t\t(ResultColumn) typeColumns.elementAt(index);\n+\n+\t\t\t\tTypeId colTypeId = typeCol.getTypeId();\n+\n+\t\t\t\tif (colTypeId.isStringTypeId()) {\n+\n+\t\t\t\t\tif (colTypeId.getJDBCTypeId() != java.sql.Types.CHAR) {\n+\n+\t\t\t\t\t\tint maxWidth = re.getTypeServices().getMaximumWidth();\n+\n+\t\t\t\t\t\tre.setType(new DataTypeDescriptor(colTypeId, true, maxWidth));\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\telse if (colTypeId.isBitTypeId()) {\n+\t\t\t\t\tif (colTypeId.getJDBCTypeId() == java.sql.Types.VARBINARY) {\n+\t\t\t\t\t// then we're trying to cast a char literal into a\n+\t\t\t\t\t// variable bit column.  We can't change the base\n+\t\t\t\t\t// type of the table constructor's value from char\n+\t\t\t\t\t// to bit, so instead, we just change the base type\n+\t\t\t\t\t// of that value from char to varchar--that way,\n+\t\t\t\t\t// no padding will be added when we convert to\n+\t\t\t\t\t// bits later on (Beetle 5306).\n+\t\t\t\t\t\tTypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.VARCHAR);\n+\t\t\t\t\t\tre.setType(new DataTypeDescriptor(tId, true));\n+\t\t\t\t\t\ttypeColumns.setElementAt(typeCol, index);\n+\t\t\t\t\t}\n+\t\t\t\t\telse if (colTypeId.getJDBCTypeId() == java.sql.Types.LONGVARBINARY) {\n+\t\t\t\t\t\tTypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.LONGVARCHAR);\n+\t\t\t\t\t\tre.setType(new DataTypeDescriptor(tId, true));\n+\t\t\t\t\t\ttypeColumns.setElementAt(typeCol, index);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t}\n+\t\t\telse if (re instanceof BitConstantNode)\n+\t\t\t{\n+\t\t\t\tResultColumn\ttypeCol =\n+\t\t\t\t\t(ResultColumn) typeColumns.elementAt(index);\n+\n+\t\t\t\tTypeId colTypeId = typeCol.getTypeId();\n+\n+\t\t\t\tif (colTypeId.isBitTypeId()) {\n+\n+\t\t\t\t\t// NOTE: Don't bother doing this if the column type is BLOB,\n+\t\t\t\t\t// as we don't allow bit literals to be inserted into BLOB\n+\t\t\t\t\t// columns (they have to be explicitly casted first); beetle 5266.\n+\t\t\t\t\tif ((colTypeId.getJDBCTypeId() != java.sql.Types.BINARY) &&\n+\t\t\t\t\t\t(colTypeId.getJDBCTypeId() != java.sql.Types.BLOB)) {\n+\n+\t\t\t\t\t\tint maxWidth = re.getTypeServices().getMaximumWidth();\n+\n+\t\t\t\t\t\tre.setType(new DataTypeDescriptor(colTypeId, true, maxWidth));\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\telse if (colTypeId.isStringTypeId()) {\n+\t\t\t\t\tif (colTypeId.getJDBCTypeId() == java.sql.Types.VARCHAR) {\n+\t\t\t\t\t// then we're trying to cast a bit literal into a\n+\t\t\t\t\t// variable char column.  We can't change the base\n+\t\t\t\t\t// type of the table constructor's value from bit\n+\t\t\t\t\t// to char, so instead, we just change the base\n+\t\t\t\t\t// type of that value from bit to varbit--that way,\n+\t\t\t\t\t// no padding will be added when we convert to\n+\t\t\t\t\t// char later on.\n+\t\t\t\t\t\tTypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.VARBINARY);\n+\t\t\t\t\t\tre.setType(new DataTypeDescriptor(tId, true));\n+\t\t\t\t\t\ttypeColumns.setElementAt(typeCol, index);\n+\t\t\t\t\t}\n+\t\t\t\t\telse if (colTypeId.getJDBCTypeId() == java.sql.Types.LONGVARCHAR) {\n+\t\t\t\t\t\tTypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.LONGVARBINARY);\n+\t\t\t\t\t\tre.setType(new DataTypeDescriptor(tId, true));\n+\t\t\t\t\t\ttypeColumns.setElementAt(typeCol, index);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n     /**\n      * The generated ResultSet will be:\n      *",
                "raw_url": "https://github.com/apache/derby/raw/7a27cabe5354712a3e53028c73f501e1bf069c1a/java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java",
                "sha": "e788ef39cbf40b66de1c1f647bf1d5f04487c385",
                "status": "modified"
            },
            {
                "additions": 48,
                "blob_url": "https://github.com/apache/derby/blob/7a27cabe5354712a3e53028c73f501e1bf069c1a/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java",
                "changes": 48,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java?ref=7a27cabe5354712a3e53028c73f501e1bf069c1a",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java",
                "patch": "@@ -86,4 +86,52 @@ public void testInsertIntoSelectFromWithLongVarchar() throws SQLException {\n                     \"select * from t2 order by int(cast (a as varchar(10)))\"),\n                 data);\n     }\n+\n+    /**\n+     * INSERT used to fail with a NullPointerException if the source was an\n+     * EXCEPT operation or an INTERSECT operation. DERBY-4420.\n+     */\n+    public void testInsertFromExceptOrIntersect() throws SQLException {\n+        setAutoCommit(false);\n+        Statement s = createStatement();\n+\n+        // Create tables to fetch data from\n+        s.execute(\"create table t1(x int)\");\n+        s.execute(\"insert into t1 values 1,2,3\");\n+        s.execute(\"create table t2(x int)\");\n+        s.execute(\"insert into t2 values 2,3,4\");\n+\n+        // Create table to insert into\n+        s.execute(\"create table t3(x int)\");\n+\n+        // INTERSECT (used to cause NullPointerException)\n+        s.execute(\"insert into t3 select * from t1 intersect select * from t2\");\n+        JDBC.assertFullResultSet(\n+                s.executeQuery(\"select * from t3 order by x\"),\n+                new String[][]{{\"2\"}, {\"3\"}});\n+        s.execute(\"delete from t3\");\n+\n+        // INTERSECT ALL (used to cause NullPointerException)\n+        s.execute(\"insert into t3 select * from t1 \" +\n+                  \"intersect all select * from t2\");\n+        JDBC.assertFullResultSet(\n+                s.executeQuery(\"select * from t3 order by x\"),\n+                new String[][]{{\"2\"}, {\"3\"}});\n+        s.execute(\"delete from t3\");\n+\n+        // EXCEPT (used to cause NullPointerException)\n+        s.execute(\"insert into t3 select * from t1 except select * from t2\");\n+        JDBC.assertSingleValueResultSet(\n+                s.executeQuery(\"select * from t3 order by x\"),\n+                \"1\");\n+        s.execute(\"delete from t3\");\n+\n+        // EXCEPT ALL (used to cause NullPointerException)\n+        s.execute(\"insert into t3 select * from t1 \" +\n+                  \"except all select * from t2\");\n+        JDBC.assertSingleValueResultSet(\n+                s.executeQuery(\"select * from t3 order by x\"),\n+                \"1\");\n+        s.execute(\"delete from t3\");\n+    }\n }",
                "raw_url": "https://github.com/apache/derby/raw/7a27cabe5354712a3e53028c73f501e1bf069c1a/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java",
                "sha": "b98de28d39e1c087162b825d6117e5db81534a3f",
                "status": "modified"
            }
        ],
        "message": "DERBY-4420: NullPointerException with INSERT INTO ... from EXCEPT/INTERSECT\n\nThe failing code in ResultSetNode.setTableConstructorTypes() was meant\nto handle the case where the node represented a table constructor (aka\nVALUES clause). UnionNode already had an override to make it a no-op\nunless it actually represented a multi-row VALUES clause that had been\nrewritten to a union of single-row VALUES clauses.\n\nSince a VALUES clause is never rewritten to EXCEPT or INTERSECT, the\ncorrect handling is to make setTableConstructorTypes() a no-op in\nIntersectOrExceptNode. Rather than adding an empty override in\nIntersectOrExceptNode, the code was moved from\nResultSetNode.setTableConstructorTypes() to\nRowResultSetNode.setTableConstructorTypes(), and the default\nimplementation in ResultSetNode was left empty.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@832379 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/48229dfd0bd83ed052c8ff6d2c528dd049eb0695",
        "patched_files": [
            "RowResultSetNode.java",
            "ResultSetNode.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "InsertTest.java"
        ]
    },
    "derby_7b429a3": {
        "bug_id": "derby_7b429a3",
        "commit": "https://github.com/apache/derby/commit/7b429a3186a9c705baa9d5172f3ad3e2cfcc446c",
        "file": [
            {
                "additions": 59,
                "blob_url": "https://github.com/apache/derby/blob/7b429a3186a9c705baa9d5172f3ad3e2cfcc446c/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java",
                "changes": 59,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java?ref=7b429a3186a9c705baa9d5172f3ad3e2cfcc446c",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java",
                "patch": "@@ -1789,6 +1789,65 @@ public void testAlterColumn() throws Exception {\n \n         st.executeUpdate(\n                 \"rename column renc_schema_2.renc_8.b to b2\");\n+        \n+        //DERBY-3823 While a resulset is still open, network server allows\n+        // ALTER TABLE to change the length of the column in the resultset,\n+        // but that length is not reflected in resultset's metadata. This\n+        // most likely is happening because of the pre-fetching by the \n+        // server. Related jiras are DERBY-3839 and DERBY-4373.\n+        //Once DERBY-3823 is fixed, we should see the change in metadata\n+        // reflected in resultset's metadata. A fix for DERBY-3823 will\n+        // cause the following test to fail. Right now, the following\n+        // test accepts the incorrect metadata length obtained through\n+        // the resultset's metadata after ALTER TABLE has been performed.\n+        conn.setAutoCommit(false);\n+        //Create table and load data\n+        st.executeUpdate(\n+                \"create table derby_3823_t1 (c11 int, c12 varchar(5))\");\n+        PreparedStatement ps = prepareStatement(\n+        \t\t\"insert into derby_3823_t1 values(?,'aaaaa')\");\n+        for (int i = 0; i < 1000; i++) { \n+        \tps.setInt(1, i); \n+        \tps.executeUpdate(); \n+    \t} \n+        conn.commit();\n+        //Open a resultset on the table which will be altered because\n+        // the resultset has been exhausted. The alter table will fail\n+        // in embedded mode because of the open resulset but will succeed\n+        // in network server because of the pre-fetching.\n+        rs = st.executeQuery(\"select * from derby_3823_t1\");\n+        //Just get first 100 rows rather than going through all the rows\n+        //Next, we will attempt to change the column length of one of the\n+        // columns in the resultset and see what happens\n+        for (int i = 0; i < 100; i++) { \n+        \trs.next(); \n+    \t}\n+        rsmd = rs.getMetaData();\n+        //The column c12's length at this point is 2\n+        assertEquals(5, rsmd.getColumnDisplaySize(2));\n+        Statement st1 = createStatement();\n+        // This should fail, as c12's column length at this point is 2 and\n+        //  data being inserted is 8 characters in length\n+        assertStatementError(\"22001\", st1, \"insert into derby_3823_t1 values(99,'12345678')\");\n+        if (usingEmbedded()) \n+        {\n+        \t//ALTER TABLE will fail in embedded because of the open resulset\n+            assertStatementError(\"X0X95\", st1,\n+                    \"alter table derby_3823_t1 alter column c12 set data type varchar(8)\");\n+        } else {\n+        \t//ALTER TABLE does not fail in network server because of pre-fetching\n+            st1.execute(\"alter table derby_3823_t1 alter column c12 set data type varchar(8)\"); \n+            //BUG - but the following metadata of the resultset does not show\n+            //  the new column length for C12 which is 8 rather than 2\n+            rsmd = rs.getMetaData(); \n+            //Following is incorrect. The column length should have been 8\n+            // rather than 5\n+            assertEquals(5, rsmd.getColumnDisplaySize(2));\n+            //Following shows that we are able to enter 8character string after\n+            // alter table alter column. It is the resulset metadata which does\n+            // not reflect the change in length\n+            st1.executeUpdate(\"insert into derby_3823_t1 values(99,'12345678')\"); \n+        }\n     }\n     \n     // DERBY-5120 Make sure that sysdepends will catch trigger",
                "raw_url": "https://github.com/apache/derby/raw/7b429a3186a9c705baa9d5172f3ad3e2cfcc446c/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java",
                "sha": "2d43bcaa7696b62e8ad139ebb1349bda4fb9b674",
                "status": "modified"
            }
        ],
        "message": "DERBY-3823 NullPointerException in stress.multi test\n\nAdding a test case showing that in case of a network server, an open resulset's metadata can get changed underneath it but it is\n\tnot reflected in the metadata. The test creates a table with one of column as varchar(5). It inserts 1000 rows and then\n\topens a reulset on that table with varchar column as one of the columns. The test verifies that the reulset's metadata\n\tat this point shows the length of the column as 5. Next, while the resulset is still open, the tests does an ALTER TABLE\n\tto increase the varchar column's length to 8. In case of embedded mode, this fails because of the open resulset. In case \n\tof network server, because of prefetching of rows, the ALTER TABLE is allowed but when the test gets the resulset's \n\tmetadata again and checks the length of varchar column, it still shows the length to be 5 rather than 8. \n\nThere are couple other jiras related to network server prefetching, namely, DERBY-3839 and DERBY-4373.\n\nOnce DERBY-3823 is fixed, we should see the change in metadata reflected in resultset's metadata. A fix for DERBY-3823 will\n        cause the following the test added here to fail. Right now, the new test accepts the incorrect metadata length obtained \n\tthrough the resultset's metadata after ALTER TABLE has been performed in network server mode.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1182570 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/4ff594e4ddcb3281ce71ac24784453e2d2a8eab1",
        "patched_files": [],
        "repo": "derby",
        "unit_tests": [
            "AlterTableTest.java"
        ]
    },
    "derby_877a43d": {
        "bug_id": "derby_877a43d",
        "commit": "https://github.com/apache/derby/commit/877a43d446d95e4c05a658ca8c735cabf11d2986",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/derby/blob/877a43d446d95e4c05a658ca8c735cabf11d2986/java/engine/org/apache/derby/impl/services/monitor/ModuleInstance.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/services/monitor/ModuleInstance.java?ref=877a43d446d95e4c05a658ca8c735cabf11d2986",
                "deletions": 0,
                "filename": "java/engine/org/apache/derby/impl/services/monitor/ModuleInstance.java",
                "patch": "@@ -56,6 +56,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \t*/\n \tprotected Object\tservice;\n \n+    /** Flag that tells whether booting of the module has completed. */\n+    private boolean booted;\n+\n \t/*\n \t** Constructor\n \t*/\n@@ -111,4 +114,20 @@ protected Object getTopLevelService() {\n \tprotected Object getInstance() {\n \t\treturn instance;\n \t}\n+\n+    /**\n+     * Set a flag that indicates that booting of the module has completed.\n+     */\n+    synchronized void setBooted() {\n+        booted = true;\n+    }\n+\n+    /**\n+     * Check whether booting of the module has completed.\n+     * @return {@code true} if the module has been booted, or {@code false}\n+     * otherwise\n+     */\n+    synchronized boolean isBooted() {\n+        return booted;\n+    }\n }",
                "raw_url": "https://github.com/apache/derby/raw/877a43d446d95e4c05a658ca8c735cabf11d2986/java/engine/org/apache/derby/impl/services/monitor/ModuleInstance.java",
                "sha": "73b6a851c5184df9ee61f571f267c0afc8b4c20c",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/derby/blob/877a43d446d95e4c05a658ca8c735cabf11d2986/java/engine/org/apache/derby/impl/services/monitor/TopService.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/services/monitor/TopService.java?ref=877a43d446d95e4c05a658ca8c735cabf11d2986",
                "deletions": 0,
                "filename": "java/engine/org/apache/derby/impl/services/monitor/TopService.java",
                "patch": "@@ -255,6 +255,16 @@ Object bootModule(boolean create, Object service, ProtocolKey key, Properties pr\n \t\t\tfor (int i = 0; i < moduleInstances.size(); i++) {\n \t\t\t\tModuleInstance module = (ModuleInstance) moduleInstances.elementAt(i);\n \n+                // DERBY-2074: The module has not been properly booted, so we\n+                // cannot yet determine whether or not this is a module we can\n+                // use. Assume that we cannot use it and continue looking. We\n+                // may end up booting the module twice if the assumption\n+                // doesn't hold, but we'll detect and resolve that later when\n+                // we call addToProtocol().\n+                if (!module.isBooted()) {\n+                    continue;\n+                }\n+\n \t\t\t\tif (!module.isTypeAndName((PersistentService) null, key.getFactoryInterface(), key.getIdentifier()))\n \t\t\t\t\tcontinue;\n \n@@ -294,6 +304,8 @@ Object bootModule(boolean create, Object service, ProtocolKey key, Properties pr\n \t\t\tthrow se;\n \t\t}\n \n+        module.setBooted();\n+\n \t\tsynchronized (this) {\n \n ",
                "raw_url": "https://github.com/apache/derby/raw/877a43d446d95e4c05a658ca8c735cabf11d2986/java/engine/org/apache/derby/impl/services/monitor/TopService.java",
                "sha": "6b4b489df3b65577e086d7e74daeca91fa038511",
                "status": "modified"
            },
            {
                "additions": 138,
                "blob_url": "https://github.com/apache/derby/blob/877a43d446d95e4c05a658ca8c735cabf11d2986/java/testing/org/apache/derbyTesting/functionTests/tests/engine/ModuleLoadingTest.java",
                "changes": 138,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/engine/ModuleLoadingTest.java?ref=877a43d446d95e4c05a658ca8c735cabf11d2986",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/engine/ModuleLoadingTest.java",
                "patch": "@@ -0,0 +1,138 @@\n+/*\n+ * Derby - Class org.apache.derbyTesting.functionTests.tests.engine.ModuleLoadingTest\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.derbyTesting.functionTests.tests.engine;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.util.ArrayList;\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import org.apache.derbyTesting.junit.BaseJDBCTestCase;\n+import org.apache.derbyTesting.junit.JDBC;\n+import org.apache.derbyTesting.junit.TestConfiguration;\n+\n+/**\n+ * This class contains tests for correct loading (booting) of modules\n+ * and factories.\n+ */\n+public class ModuleLoadingTest extends BaseJDBCTestCase {\n+    public ModuleLoadingTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite ts = new TestSuite();\n+\n+        // Run concurrentLoadingOfSortFactory in a separate database so that\n+        // the sort factory isn't already loaded.\n+        ts.addTest(TestConfiguration.singleUseDatabaseDecorator(\n+                new ModuleLoadingTest(\"concurrentLoadingOfSortFactory\")));\n+\n+        return ts;\n+    }\n+\n+    /**\n+     * Test case for DERBY-2074. When multiple threads tried to load\n+     * ExternalSortFactory concurrently, we sometimes got a\n+     * NullPointerException.\n+     */\n+    public void concurrentLoadingOfSortFactory() throws Throwable {\n+        // number of concurrent threads\n+        final int numThreads = 10;\n+\n+        // Helper object to make it easier to refer to ModuleLoadingTest.this\n+        // from within the nested Runnable class. Used for synchronization\n+        // between the threads.\n+        final Object me = this;\n+\n+        // Flag that tells the threads whether they're allowed to start.\n+        final boolean[] go = new boolean[1];\n+        // Active threads count.\n+        final int[] activeThreads = new int[1];\n+        // List of exceptions/throwables thrown by the forked threads.\n+        final ArrayList exceptions = new ArrayList();\n+\n+        Thread[] threads = new Thread[numThreads];\n+\n+        // Start the threads.\n+        for (int i = 0; i < numThreads; i++) {\n+            final Connection c = openDefaultConnection();\n+            // Prepare a statement that ends up calling\n+            // DistinctScalarAggregateResultSet.loadSorter().\n+            final PreparedStatement ps = c.prepareStatement(\n+                    \"select count(distinct tablename) from sys.systables\");\n+            threads[i] = new Thread(new Runnable() {\n+                public void run() {\n+                    try {\n+                        _run();\n+                    } catch (Throwable t) {\n+                        synchronized (me) {\n+                            exceptions.add(t);\n+                        }\n+                    }\n+                }\n+                private void _run() throws Exception {\n+                    synchronized (me) {\n+                        // Notify the main thread that we're ready to execute.\n+                        activeThreads[0]++;\n+                        me.notifyAll();\n+\n+                        // Wait for the main thread to notify us that we\n+                        // should go ahead.\n+                        while (!go[0]) {\n+                            me.wait();\n+                        }\n+                    }\n+                    // executeQuery() below used to get occational NPEs before\n+                    // DERBY-2074.\n+                    JDBC.assertDrainResults(ps.executeQuery());\n+                    ps.close();\n+                    c.close();\n+                }\n+            });\n+            threads[i].start();\n+        }\n+\n+        // We want all threads to execute the statement at the same time,\n+        // so wait for all threads to be ready before giving them the GO\n+        // signal.\n+        synchronized (me) {\n+            while (activeThreads[0] < numThreads && exceptions.isEmpty()) {\n+                me.wait();\n+            }\n+\n+            // All threads are active, or at least one of the threads have\n+            // failed, so tell the threads to stop waiting.\n+            go[0] = true;\n+            me.notifyAll();\n+        }\n+\n+        // The threads have been started, now wait for them to finish.\n+        for (int i = 0; i < numThreads; i++) {\n+            threads[i].join();\n+        }\n+\n+        // At least one of the threads failed. Re-throw the first error\n+        // reported.\n+        if (!exceptions.isEmpty()) {\n+            throw (Throwable) exceptions.get(0);\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/derby/raw/877a43d446d95e4c05a658ca8c735cabf11d2986/java/testing/org/apache/derbyTesting/functionTests/tests/engine/ModuleLoadingTest.java",
                "sha": "6b5641e0739e8e33b2566e14d1857389b8fce867",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/derby/blob/877a43d446d95e4c05a658ca8c735cabf11d2986/java/testing/org/apache/derbyTesting/functionTests/tests/engine/_Suite.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/engine/_Suite.java?ref=877a43d446d95e4c05a658ca8c735cabf11d2986",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/engine/_Suite.java",
                "patch": "@@ -47,6 +47,7 @@ public static Test suite() {\n         TestSuite suite = new TestSuite(\"engine\");\n \n         suite.addTest(ErrorStreamTest.suite());\n+        suite.addTest(ModuleLoadingTest.suite());\n \n         return suite;\n     }",
                "raw_url": "https://github.com/apache/derby/raw/877a43d446d95e4c05a658ca8c735cabf11d2986/java/testing/org/apache/derbyTesting/functionTests/tests/engine/_Suite.java",
                "sha": "c3ab5b17df57200cbc864bb112ee5bfe7fa97b1c",
                "status": "modified"
            }
        ],
        "message": "DERBY-2074: NullPointerException when two threads load sort factory concurrently\n\nAdded a flag in ModuleInstance that tells whether the module is fully\nbooted. This flag is checked when we go through the list of modules,\nso that we can avoid using partly booted instances.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@788670 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/03e89c8c1bd49236ac3057e5bea55b693e8f1245",
        "patched_files": [
            "_Suite.java",
            "TopService.java",
            "ModuleInstance.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "ModuleLoadingTest.java"
        ]
    },
    "derby_8a4e363": {
        "bug_id": "derby_8a4e363",
        "commit": "https://github.com/apache/derby/commit/8a4e363f3d59ea8cbe135ef9f77445f65ad915f2",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/derby/blob/8a4e363f3d59ea8cbe135ef9f77445f65ad915f2/java/client/org/apache/derby/client/ClientPooledConnection40.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/ClientPooledConnection40.java?ref=8a4e363f3d59ea8cbe135ef9f77445f65ad915f2",
                "deletions": 1,
                "filename": "java/client/org/apache/derby/client/ClientPooledConnection40.java",
                "patch": "@@ -81,7 +81,9 @@ public void addStatementEventListener(StatementEventListener listener) {\n         if (logWriter_ != null) {\n             logWriter_.traceEntry(this, \"addStatementEventListener\", listener);\n         }\n-        statementEventListeners.add(listener);\n+        if (listener != null) {\n+            statementEventListeners.add(listener);\n+        }\n     }\n     \n     /**",
                "raw_url": "https://github.com/apache/derby/raw/8a4e363f3d59ea8cbe135ef9f77445f65ad915f2/java/client/org/apache/derby/client/ClientPooledConnection40.java",
                "sha": "a3fd041d98317d30b8da08b2c92d106d1dc56e3c",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/derby/blob/8a4e363f3d59ea8cbe135ef9f77445f65ad915f2/java/client/org/apache/derby/client/ClientXAConnection40.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/ClientXAConnection40.java?ref=8a4e363f3d59ea8cbe135ef9f77445f65ad915f2",
                "deletions": 1,
                "filename": "java/client/org/apache/derby/client/ClientXAConnection40.java",
                "patch": "@@ -91,7 +91,9 @@ public void addStatementEventListener(StatementEventListener listener) {\n         if (logWriter_ != null) {\n             logWriter_.traceEntry(this, \"addStatementEventListener\", listener);\n         }\n-        statementEventListeners.add(listener);\n+        if (listener != null) {\n+            statementEventListeners.add(listener);\n+        }\n     }\n     \n     /**",
                "raw_url": "https://github.com/apache/derby/raw/8a4e363f3d59ea8cbe135ef9f77445f65ad915f2/java/client/org/apache/derby/client/ClientXAConnection40.java",
                "sha": "1c73ffade10bb26bc1550a80df41abbe4caba7e5",
                "status": "modified"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/derby/blob/8a4e363f3d59ea8cbe135ef9f77445f65ad915f2/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementEventsTest.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementEventsTest.java?ref=8a4e363f3d59ea8cbe135ef9f77445f65ad915f2",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementEventsTest.java",
                "patch": "@@ -231,6 +231,35 @@ public void testCloseEvent() throws SQLException {\n         assertEquals(\"Incorrect close count.\", 1, closedCount);\n     }\n \n+    /**\n+     * Test that you don't get a NullPointerException when the listeners are\n+     * triggered and one of them is null. DERBY-3695\n+     */\n+    public void testAddNullEvent() throws SQLException {\n+        pooledConnection.addStatementEventListener(null);\n+        PreparedStatement ps = prepare(\"VALUES (1)\");\n+        ps.close(); // trigger close event\n+        assertEquals(1, closedCount);\n+        assertEquals(0, errorCount);\n+        ps = prepare(\"VALUES (1)\");\n+        connection.close();\n+        try {\n+            ps.execute();\n+            fail(\"Execute should fail on closed connection\");\n+        } catch (SQLNonTransientConnectionException e) {\n+            assertSQLState(\"08003\", e);\n+        }\n+        assertEquals(1, errorCount);\n+    }\n+\n+    /**\n+     * Test that you can call {@code removeStatementEventListener()} with a\n+     * {@code null} argument.\n+     */\n+    public void testRemoveNullEvent() throws SQLException {\n+        pooledConnection.removeStatementEventListener(null);\n+    }\n+\n     /**\n      * Test whether a close event is raised when a connection is\n      * closed. (Client should raise a close event since the connection calls",
                "raw_url": "https://github.com/apache/derby/raw/8a4e363f3d59ea8cbe135ef9f77445f65ad915f2/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementEventsTest.java",
                "sha": "946a256dd22fae9477584ad3e59b4b6655aebbb3",
                "status": "modified"
            }
        ],
        "message": "DERBY-3695: NullPointerException when invoking statement event listeners if one of the listeners is null\n\nMade addStatementEventListener(null) a no-op on the client to match embedded.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@661292 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/a840fa504d9984b8a79ba99c41a3dd09023975f3",
        "patched_files": [
            "ClientXAConnection40.java",
            "ClientPooledConnection40.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "StatementEventsTest.java"
        ]
    },
    "derby_8bef59d": {
        "bug_id": "derby_8bef59d",
        "commit": "https://github.com/apache/derby/commit/8bef59d404c84b3288e6b86afb8328721ac31cf1",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/derby/blob/8bef59d404c84b3288e6b86afb8328721ac31cf1/java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java?ref=8bef59d404c84b3288e6b86afb8328721ac31cf1",
                "deletions": 10,
                "filename": "java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java",
                "patch": "@@ -23,7 +23,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \n import java.sql.ResultSet;\n import java.sql.SQLException;\n-import java.util.Enumeration;\n import java.util.Hashtable;\n import java.util.Map;\n import java.util.Vector;\n@@ -233,20 +232,21 @@ void clearTrigger() throws StandardException\n \tprotected void cleanup()\n \t\tthrows StandardException\n \t{\n-\t\tlcc.popTriggerExecutionContext(this);\n+        if (lcc != null) {\n+            lcc.popTriggerExecutionContext(this);\n+        }\n \n \t\t/*\n \t\t** Explicitly close all result sets that we have\n \t\t** given out to the user.  \n \t \t*/\n-\t\tfor (Enumeration<java.sql.ResultSet> e = resultSetVector.elements();\n-\t\t\t e.hasMoreElements(); )\n-\t\t{\n-\t\t\tjava.sql.ResultSet rs = e.nextElement();\n-\t\t\ttry\n-\t\t\t{\n-\t\t\t\trs.close();\n-\t\t\t} catch (SQLException se) {}\n+        if (resultSetVector != null) {\n+            for (ResultSet rs : resultSetVector) {\n+                try {\n+                    rs.close();\n+                } catch (SQLException se) {\n+                }\n+            }\n \t\t}\n \t\tresultSetVector = null;\n \t",
                "raw_url": "https://github.com/apache/derby/raw/8bef59d404c84b3288e6b86afb8328721ac31cf1/java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java",
                "sha": "6449003523be0e4dff64c700f3c7440b62be8c70",
                "status": "modified"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/derby/blob/8bef59d404c84b3288e6b86afb8328721ac31cf1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java?ref=8bef59d404c84b3288e6b86afb8328721ac31cf1",
                "deletions": 1,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java",
                "patch": "@@ -41,6 +41,14 @@\n  * execution.\n  */\n public class StalePlansTest extends BaseJDBCTestCase {\n+    /**\n+     * The value of derby.language.stalePlanCheckInterval to use in this\n+     * test. The default value is 100, but we use 10 to reduce the number\n+     * of times the test has to execute statements to get to the desired\n+     * state.\n+     */\n+    private static final int STALE_PLAN_CHECK_INTERVAL = 10;\n+\n     public StalePlansTest(String name) {\n         super(name);\n     }\n@@ -53,7 +61,8 @@ public static Test suite() {\n         Properties props = new Properties();\n         // Check for stale plans on every 10th execution (default 100) to\n         // reduce the number of times we need to execute each statement.\n-        props.setProperty(\"derby.language.stalePlanCheckInterval\", \"10\");\n+        props.setProperty(\"derby.language.stalePlanCheckInterval\",\n+                          String.valueOf(STALE_PLAN_CHECK_INTERVAL));\n         // Disable the index statistics daemon so that it doesn't cause\n         // recompilation of statements at random times.\n         props.setProperty(\"derby.storage.indexStats.auto\", \"false\");\n@@ -299,4 +308,29 @@ public void testStalePlansOnLargeTable() throws SQLException {\n         insert2.close();\n         ps.close();\n     }\n+\n+    /**\n+     * Regression test case for DERBY-6724, where an INSERT statement would\n+     * fail with a NullPointerException if it had fired a trigger, and it\n+     * was detected during execution that the statement plan was stale and\n+     * had to be recompiled.\n+     */\n+    public void testDerby6724() throws SQLException {\n+        Statement s = createStatement();\n+        s.execute(\"create table d6724_t(x int)\");\n+        s.execute(\"create trigger d6724_tr after insert on d6724_t values 1\");\n+        s.execute(\"insert into d6724_t values 1\");\n+\n+        // Before DERBY-6724 this statement would fail with an NPE in the\n+        // (STALE_PLAN_CHECK_INTERVAL+1)'th execution.\n+        PreparedStatement ps = prepareStatement(\n+                \"insert into d6724_t select * from d6724_t\");\n+        for (int i = 0; i < STALE_PLAN_CHECK_INTERVAL + 1; i++) {\n+            // Execute the statement and verify that the correct number of\n+            // rows are inserted. The number doubles for each execution.\n+            assertUpdateCount(ps, 1 << i);\n+        }\n+\n+        rollback();\n+    }\n }",
                "raw_url": "https://github.com/apache/derby/raw/8bef59d404c84b3288e6b86afb8328721ac31cf1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java",
                "sha": "8cec2c9fe4a64467a6a1fe3191f9b98236a14df0",
                "status": "modified"
            }
        ],
        "message": "DERBY-6724: NPE if insert statement needs recompilation after having fired a trigger\n\nAllow InternalTriggerExecutionContext.cleanup() to be called more than once.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1622631 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/7af32f6954f0d94893a04fea8f78c74dd7057781",
        "patched_files": [
            "InternalTriggerExecutionContext.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "StalePlansTest.java"
        ]
    },
    "derby_8d13a1f": {
        "bug_id": "derby_8d13a1f",
        "commit": "https://github.com/apache/derby/commit/8d13a1f37b9bca1d5b160ba9a21be1103699b5a1",
        "file": [
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/derby/blob/8d13a1f37b9bca1d5b160ba9a21be1103699b5a1/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java?ref=8d13a1f37b9bca1d5b160ba9a21be1103699b5a1",
                "deletions": 0,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java",
                "patch": "@@ -539,6 +539,27 @@ public ResultColumn\tgetNewExpressionResultColumn(DataDictionary\tdd)\n \t\t\tthis.getNewNullResultExpression() :\n \t\t\toperand;\n \n+\n+\t\t/* The operand for this aggregate node was initialized at bind\n+\t\t * time. Between then and now it's possible that certain changes\n+\t\t * have been made to the query tree which affect this operand. In\n+\t\t * particular, if the operand was pointing to a result column in\n+\t\t * a JoinNode and then that JoinNode was flattened during pre-\n+\t\t * processing, all of the references to that JoinNode--including\n+\t\t * this aggregate's operand--need to be updated to reflect the\n+\t\t * fact that the Join Node no longer exists. So check to see if\n+\t\t * the operand is a column reference, and if so, make a call to\n+\t\t * remap it to its underlying expression. If nothing has happened\n+\t\t * then this will be a no-op; but if something has changed to void\n+\t\t * out the result column to which the operand points, the result\n+\t\t * column will be marked \"redundant\" and the following call should\n+\t\t * remap as appropriate. DERBY-3880.\n+\t\t */\n+\t\tif (operand instanceof ColumnReference)\n+\t\t{\n+\t\t\t((ColumnReference)operand).remapColumnReferencesToExpressions();\n+\t\t}\n+\n \t\treturn (ResultColumn) getNodeFactory().getNode(\n \t\t\t\t\t\t\t\tC_NodeTypes.RESULT_COLUMN,\n \t\t\t\t\t\t\t\t\"##aggregate expression\",",
                "raw_url": "https://github.com/apache/derby/raw/8d13a1f37b9bca1d5b160ba9a21be1103699b5a1/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java",
                "sha": "0185f07eb9bf141ccfb6db592cf85315ecda5933",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/derby/blob/8d13a1f37b9bca1d5b160ba9a21be1103699b5a1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java?ref=8d13a1f37b9bca1d5b160ba9a21be1103699b5a1",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "patch": "@@ -276,6 +276,16 @@ private static void createSchemaObjects(Statement st)\n \n       st.executeUpdate(\n     \t\t  \"insert into EMPTAB values( 1, 1000, 1 )\"); \n+\t\n+      // tables for DERBY-3880 testing\n+      st.executeUpdate(\"CREATE TABLE T1_D3880(i int, c varchar(20))\");\n+      st.executeUpdate(\"create table t2_D3880(i int, c2 varchar(20), i2 int)\");\n+      st.executeUpdate(\"insert into t1_D3880 values(1, 'abc')\");\n+      st.executeUpdate(\"insert into t1_D3880 values(2, 'abc')\");\n+      st.executeUpdate(\"insert into t2_D3880 values(1, 'xyz', 10)\");\n+      st.executeUpdate(\"insert into t2_D3880 values(1, 'aaa', 20)\");\n+      st.executeUpdate(\"insert into t2_D3880 values(2, 'xxx', 30)\");\n+      \n \t}\n \n \t/**\n@@ -1446,6 +1456,16 @@ public void testGroupByWithTempTable() throws SQLException {\n \t\tJDBC.assertEmpty(s.executeQuery(\"select orderID from session.ztemp group by orderID\"));\n \t}\n \n+\tpublic void testHavingWithInnerJoinDerby3880() throws SQLException {\n+\t\tStatement s = createStatement();\n+\t\tResultSet rs = s.executeQuery(\"select   t1_D3880.i, avg(t2_D3880.i2)  from t1_D3880 \" +\n+\t\t\t\t\"inner join t2_D3880 on (t1_D3880.i = t2_D3880.i) group by t1_D3880.i having \"  +\n+\t\t\t\t\t\t\"avg(t2_D3880.i2) > 0\");\n+\t\tString[][] expRs = new String[][] {{\"1\",\"15\"},{\"2\",\"30\"}};\n+\t\tJDBC.assertFullResultSet(rs,expRs);\n+\n+\t}\n+\t\n \t/**\n \t * DERBY-280: Wrong result from select when aliasing to same name as used\n \t * in group by",
                "raw_url": "https://github.com/apache/derby/raw/8d13a1f37b9bca1d5b160ba9a21be1103699b5a1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "sha": "4ac7a7d7f6d46dbc12298e705a79d4d8aae7f300",
                "status": "modified"
            }
        ],
        "message": "DERBY-3880 NPE on a query with having clause involving a join\n\nremap expression for AggregateNode operand if the JoinNode has been flattened.\n\nFix contributed by Army Brown\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@711321 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/f9f83296a76f890dae83e69b35bce6852a0ef2f5",
        "patched_files": [
            "AggregateNode.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "GroupByTest.java"
        ]
    },
    "derby_90701f7": {
        "bug_id": "derby_90701f7",
        "commit": "https://github.com/apache/derby/commit/90701f7b6a169adf5db790cd2a32bd4b1c3bd436",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/derby/blob/90701f7b6a169adf5db790cd2a32bd4b1c3bd436/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java?ref=90701f7b6a169adf5db790cd2a32bd4b1c3bd436",
                "deletions": 2,
                "filename": "java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java",
                "patch": "@@ -1036,7 +1036,7 @@ public DataValueDescriptor getNull() throws StandardException {\n \t */\n \tpublic\tString\t\tgetTypeName()\n \t{\n-\t\treturn typeId.getSQLTypeName();\n+\t\treturn typeDescriptor.getTypeName();\n \t}\n \n \t/**\n@@ -1753,7 +1753,7 @@ public void readExternal( ObjectInput in )\n \t{\n \t\ttypeDescriptor = (TypeDescriptorImpl) in.readObject();\n         \n-        typeId = TypeId.getBuiltInTypeId(this.getJDBCTypeId());\n+        typeId = TypeId.getBuiltInTypeId(this.getTypeName());\n         \n         collationDerivation = in.readInt();\n \t}",
                "raw_url": "https://github.com/apache/derby/raw/90701f7b6a169adf5db790cd2a32bd4b1c3bd436/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java",
                "sha": "87ac06d5b597975e150468744bcdbb9689e7c775",
                "status": "modified"
            },
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/derby/blob/90701f7b6a169adf5db790cd2a32bd4b1c3bd436/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java?ref=90701f7b6a169adf5db790cd2a32bd4b1c3bd436",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java",
                "patch": "@@ -399,6 +399,46 @@ public static void logTriggerInfo(String info)\n     {\n         ((List) TRIGGER_INFO.get()).add(info);  \n     }\n+\n+    /** \n+     * Test for DERBY-3718 NPE when a trigger is fired\n+     * \n+     * @throws SQLException\n+     * @throws IOException\n+     */\n+    public void testNPEinTriggerFire() throws SQLException\n+    {\n+        Statement s = createStatement();\n+        \n+    \tString sql = \" CREATE TABLE TRADE(ID INT PRIMARY KEY GENERATED \"+\n+    \t\"BY DEFAULT AS IDENTITY (START WITH 1000), BUYID INT NOT NULL,\" +\n+    \t\"QTY FLOAT(2) NOT NULL)\";\n+        s.executeUpdate(sql);\n+\n+        sql = \"CREATE TABLE TOTAL(BUYID INT NOT NULL, TOTALQTY FLOAT(2) NOT NULL)\";\n+        s.executeUpdate(sql);\n+        \n+        sql = \"CREATE TRIGGER TRADE_INSERT AFTER INSERT ON TRADE REFERENCING \"+ \n+        \"NEW AS NEWROW FOR EACH ROW MODE DB2SQL UPDATE TOTAL SET TOTALQTY \"+\n+        \"= NEWROW.QTY WHERE BUYID = NEWROW.BUYID\"; \n+        s.executeUpdate(sql);\n+        \n+        s.executeUpdate(\"INSERT INTO TOTAL VALUES (1, 0)\");\n+        //Before DERBY-3718 was fixed, following would cause NPE in 10.4 and \n+        //trunk. This happened because starting 10.4, rather than saving the\n+        //TypeId of the DataTypeDescriptor (in writeExternal method), we rely\n+        //on reconstructing TypeId (in readExternal) by using the Types.xxx \n+        //information(DERBY-2917 revision r619995). This approach does not\n+        //work for internal datatype REF, because we use Types.OTHER for REF\n+        //datatypes. Types.OTHER is not enough to know that the type to be \n+        //constructed is REF. \n+        //To get around the problem, for reconstructing TypeId, we will\n+        //use the type name rather than Types.xxx. Since we have the correct\n+        //type name for internal datatype REF, we can successfully reconstruct\n+        //REF datatype. \n+        s.executeUpdate(\"INSERT INTO TRADE VALUES(1, 1, 10)\");\n+        commit();      \n+    }\n     \n     /** \n      * Test for DERBY-3238 trigger fails with IOException if triggering table has large lob.",
                "raw_url": "https://github.com/apache/derby/raw/90701f7b6a169adf5db790cd2a32bd4b1c3bd436/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java",
                "sha": "0568fc69032ed8ce18a6407b28aa314358900917",
                "status": "modified"
            }
        ],
        "message": "DERBY-3718\n\nDerby has an internal datatype called REF. For REF datatypes, we associate Types.OTHER as it's type. This\n association of Types.OTHER for REF datatype is causing NPE when a row level trigger is fired in the test \ncase provided in DERBY-3718.\n\nThis NPE happens only in 10.4 and trunk. This is because starting 10.4(DERBY-2917 revision r619995),\nrather than saving the TypeId of the DataTypeDescriptor (in DataTypeDescriptor.writeExternal method), we\nrely on reconstructing TypeId (in readExternal) by using the Types.xxx associated with a type. This \napproach does not work for internal datatype REF, because we use Types.OTHER for REF datatypes. \nTypes.OTHER is not enough to know that the type to be constructed is REF.  \n\nSince we are dealing with the internal type which will be assigned a Types.OTHER type then we can't rely on Types.xxx to get us the correct data type. This fix relies on using the name of the data type rather \nthan it's Type.xxx to construct the correct TypeId. This is being accomplised by changing \nDataTypeDescriptor.readExternal to use this.getTypeName rather than this.getJDBCTypeId to construct the TypeId. In addition to this change, I had to change DataTypeDescriptor.getTypeName() to use TypeDescriptor to get the type name rather than TypeId. This is because TypeId is not available when DataTypeDescriptor.readExternal calls DataTypeDescriptor.getTypeName. This will match how we already implement DataTypeDescriptor.getJDBCTypeId(). Junit and old harness suite have run with no new regressions. \n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@670778 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/f6abacbd48cd693d40779569fb0901697115b18b",
        "patched_files": [
            "DataTypeDescriptor.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "TriggerTest.java"
        ]
    },
    "derby_9247f31": {
        "bug_id": "derby_9247f31",
        "commit": "https://github.com/apache/derby/commit/9247f313449c367d8b0b6927b3157cec0c781ee0",
        "file": [
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/derby/blob/9247f313449c367d8b0b6927b3157cec0c781ee0/java/engine/org/apache/derby/impl/sql/compile/FromList.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/FromList.java?ref=9247f313449c367d8b0b6927b3157cec0c781ee0",
                "deletions": 0,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/FromList.java",
                "patch": "@@ -1548,6 +1548,42 @@ void genExistsBaseTables(JBitSet referencedTableMap, FromList outerFromList,\n \t\t}\n \t}\n \n+\t/**\n+\t * determine whether this table is NOT EXISTS.\n+\t *\n+\t * This routine searches for the indicated table number in the fromlist\n+\t * and returns TRUE if the table is present in the from list and is \n+\t * marked NOT EXISTS, false otherwise.\n+\t *\n+\t * A table may be present in the from list for NOT EXISTS if it is used\n+\t * as a correlated NOT EXISTS subquery. In such a situation, when the\n+\t * subquery is flattened, it is important that we remember that this is\n+\t * a NOT EXISTS subquery, because the join semantics are different \n+\t * (we're looking for rows that do NOT match, rather than rows\n+\t * that do). And since the join semantics are different, we cannot\n+\t * include this table into a transitive closure of equijoins\n+\t * (See DERBY-3033 for a situation where this occurs).\n+\t *\n+\t * @param tableNumber\twhich table to check\n+\t * @return true if this table is in the from list as NOT EXISTS\n+\t */\n+\tboolean tableNumberIsNotExists(int tableNumber)\n+\t\tthrows StandardException\n+\t{\n+\t\tint size = size();\n+\t\tfor (int index = 0; index < size; index++)\n+\t\t{\n+\t\t\tProjectRestrictNode prn = (ProjectRestrictNode) elementAt(index);\n+\t\t\tif (! (prn.getChildResult() instanceof FromTable))\n+\t\t\t{\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tFromTable ft = (FromTable) prn.getChildResult();\n+\t\t\tif (ft.getTableNumber() == tableNumber)\n+\t\t\t\treturn ft.isNotExists();\n+\t\t}\n+\t\treturn false;\n+\t}\n \t/**\n \t * Get the lock mode for the target of an update statement\n \t * (a delete or update).  The update mode will always be row for",
                "raw_url": "https://github.com/apache/derby/raw/9247f313449c367d8b0b6927b3157cec0c781ee0/java/engine/org/apache/derby/impl/sql/compile/FromList.java",
                "sha": "e66a5a5b95cc95ff046999eefddc7bf06c44cef3",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/derby/blob/9247f313449c367d8b0b6927b3157cec0c781ee0/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java?ref=9247f313449c367d8b0b6927b3157cec0c781ee0",
                "deletions": 1,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/PredicateList.java",
                "patch": "@@ -1817,6 +1817,14 @@ else if (vn instanceof UnaryOperatorNode)\n      * other side of the middle predicate to see if we can find an equijoin \n      * between outer and inner.  If so, then we simply assign it to the same \n      * equivalence class.  If not, then we add the new equijoin clause.\n+\t *\n+\t * Note that an equijoin predicate between two tables CANNOT be\n+\t * used for transitive closure, if either of the tables is in the\n+\t * fromlist for NOT EXISTS. In that case, the join predicate\n+\t * actually specifies that the rows from the indicated table must\n+\t * NOT exist, and therefore those non-existent rows cannot be\n+\t * transitively joined to the other matching tables. See DERBY-3033\n+\t * for a description of a situation in which this actually arises.\n \t *\n \t * @param numTables\tThe number of tables in the query\n \t * @param fromList\tThe FromList in question.\n@@ -1867,7 +1875,9 @@ void joinClauseTransitiveClosure(int numTables,\n \t\t\t\tColumnReference leftCR = (ColumnReference) left;\n \t\t\t\tColumnReference rightCR = (ColumnReference) right;\n \t\t\t\tif (leftCR.getSourceLevel() == rightCR.getSourceLevel() &&\n-\t\t\t\t\tleftCR.getTableNumber() != rightCR.getTableNumber())\n+\t\t\t\t\tleftCR.getTableNumber() != rightCR.getTableNumber() &&\n+\t\t\t\t\t!fromList.tableNumberIsNotExists(leftCR.getTableNumber()) &&\n+\t\t\t\t\t!fromList.tableNumberIsNotExists(rightCR.getTableNumber()))\n \t\t\t\t{\n \t\t\t\t\t// Add the equijoin clause to each of the lists\n \t\t\t\t\tjoinClauses[leftCR.getTableNumber()].addElement(predicate);",
                "raw_url": "https://github.com/apache/derby/raw/9247f313449c367d8b0b6927b3157cec0c781ee0/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java",
                "sha": "05ab42eb630a9b232b23db771284e054516debfe",
                "status": "modified"
            },
            {
                "additions": 163,
                "blob_url": "https://github.com/apache/derby/blob/9247f313449c367d8b0b6927b3157cec0c781ee0/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ExistsWithSubqueriesTest.java",
                "changes": 168,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ExistsWithSubqueriesTest.java?ref=9247f313449c367d8b0b6927b3157cec0c781ee0",
                "deletions": 5,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/ExistsWithSubqueriesTest.java",
                "patch": "@@ -1,6 +1,6 @@\n /*\n  \n-   Derby - Class org.apache.derbyTesting.functionTests.tests.lang.ExistsWithSetOpsTest\n+   Derby - Class org.apache.derbyTesting.functionTests.tests.lang.ExistsWithSubqueriesTest\n \n    Licensed to the Apache Software Foundation (ASF) under one or more\n    contributor license agreements.  See the NOTICE file distributed with\n@@ -31,18 +31,27 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Statement;\n+import java.sql.PreparedStatement;\n \n /**\n- * This test ensures that an EXISTS predicate which wraps a set operation--\n+ * This test contains a variety of cases of EXISTS predicates with subqueries.\n+ *\n+ * Several tests ensure that an EXISTS predicate which wraps a set operation--\n  * meaning a UNION, INTERSECT, or EXCEPT node--returns the correct results.\n  * For example:\n  *\n  *   select * from ( values 'BAD' ) as T\n  *     where exists ((values 1) intersect (values 2))\n  *\n  * should return zero rows. Prompted by DERBY-2370.\n+ *\n+ * A somewhat unrelated test verifies the DERBY-3033 behavior, which\n+ * involves flattening of subqueries with NOT EXISTS predicates. The\n+ * issue here is that a flattened NOT EXISTS subquery cannot be used\n+ * to perform equi-join transitive closure, because the implied predicate\n+ * that results from the flattening is a NOT EQUALS condition.\n  */\n-public class ExistsWithSetOpsTest extends BaseJDBCTestCase {\n+public class ExistsWithSubqueriesTest extends BaseJDBCTestCase {\n     \n     private static final String EXISTS_PREFIX_1 =\n         \"select * from ( values 'GOT_A_ROW' ) as T where exists (\";\n@@ -55,7 +64,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n      * @param name name of the test.\n      *\n      */\n-    public ExistsWithSetOpsTest(String name)\n+    public ExistsWithSubqueriesTest(String name)\n     {\n         super(name);\n     }\n@@ -72,7 +81,7 @@ public static Test suite()\n          * to run the test against one or the other; we choose embedded.\n          */\n         suite.addTest(\n-            TestConfiguration.embeddedSuite(ExistsWithSetOpsTest.class));\n+            TestConfiguration.embeddedSuite(ExistsWithSubqueriesTest.class));\n \n         /* Wrap the suite in a CleanDatabaseTestSetup that will create\n          * and populate the test tables.\n@@ -382,4 +391,153 @@ private void checkQuery(Statement st, String [][] expRS,\n             JDBC.assertFullResultSet(rs, expRS);\n         rs.close();\n     }\n+\n+    /**\n+     * Regression test for Derby-3033.\n+     *\n+     * This method constructs a query with the property that it:\n+     * - contains a NOT EXISTS condition against a correlated subquery\n+     * - such that if that subquery is flattened, the result is 3 tables\n+     *   which all have join predicates on the same key.\n+     * The point of the test is that it is *not* correct to construct\n+     * a new equijoin predicate between table d3033_a and d3033_c via\n+     * transitive closure, because the join condition between d3033_b and\n+     * d3033_c is NOT EXISTS.\n+     *\n+     * In the original bug, the compiler/optimizer erroneously generated\n+     * the extra equijoin predicate, which caused NPE exceptions at\n+     * runtime due to attempts to reference the non-existent (NOT EXISTS) row.\n+     *\n+     * So this test succeeds if it gets the right results and no NPE.\n+     */\n+    public void testDerby3033()\n+        throws Exception\n+    {\n+        setupDerby3033();\n+\n+        PreparedStatement pstmt = prepareStatement(\n+            \"select c1, c2_b \" +\n+            \"from (select distinct st.c1,st.c2_b,dsr.c3_a,st.c3_b \" +\n+            \"      from \" +\n+            \"             d3033_a dsr, \" +  // Table order matters here!\n+            \"             d3033_b st \" +\n+            \"      where dsr.c4_a is null \" +\n+            \"      and   dsr.c2 = ? \" +\n+            \"      and   dsr.c1 = st.c1 \" +\n+            \"      and   not exists ( \" +\n+            \"              select 1 \" +\n+            \"              from d3033_c \" +\n+            \"              where d3033_c.c1 = st.c1 \" +\n+            \"              and   d3033_c.c2 = ? \" +\n+            \"              and   d3033_c.c3_c = ? \" +\n+            \"              ) \" +\n+            \") temp \"\n+        );\n+ \n+        pstmt.setInt(1, 4);\n+        pstmt.setInt(2, 4);\n+        pstmt.setInt(3, 100);\n+ \n+        String [][]expected = {\n+            { \"1\", \"100\" },\n+            { \"2\", \"200\" },\n+            { \"3\", \"300\" },\n+        };\n+        ResultSet rs = pstmt.executeQuery();\n+        JDBC.assertFullResultSet(rs, expected);\n+        pstmt.close();\n+    }\n+\n+    /**\n+     * Ensure that the #rows statistics are updated\n+     */\n+    private void updateStats(Statement st, String tName)\n+        throws Exception\n+    {\n+        ResultSet rs = st.executeQuery(\"select * from \" + tName);\n+        int numRows = 0;\n+        while (rs.next())\n+            numRows ++;\n+        rs.close();\n+    }\n+\n+    private void setupDerby3033()\n+        throws Exception\n+    {\n+        // The pattern of inserting the data is fairly important, as we\n+        // are going to do a combination of joins between the three tables\n+        // and we want both matching data and non-matching data. We load:\n+        //\n+        // d3033_a      d3033_b       d3033_c\n+        // --------     --------      --------\n+        //    1            1             1\n+        //    2            2             3\n+        //    3            3\n+        //                 4\n+        //\n+        // We also load a whole pile of irrelevant data into tables a and c\n+        // so that the index becomes relevant in the optimizer's analysis,\n+        // then we create some constraints and indexes and delete the rows\n+        // from table d3033_c (the NOT EXISTS table).\n+        //\n+        Statement s = createStatement();\n+\n+        s.executeUpdate(\"create table d3033_a \"+\n+                        \"(c1 int, c2 int, c3_a int, c4_a date)\");\n+        s.executeUpdate(\"create table d3033_b \"+\n+                        \"(c1 int primary key not null, c2_b int, c3_b date)\");\n+        s.executeUpdate(\"create table d3033_c (c1 int, c2 int, c3_c int)\");\n+        s.executeUpdate(\"insert into d3033_a (c1,c2,c3_a) values(1, 4, 10)\");\n+        s.executeUpdate(\"insert into d3033_a (c1,c2,c3_a) values(2, 4, 20)\");\n+        s.executeUpdate(\"insert into d3033_a (c1,c2,c3_a) values(3, 4, 30)\");\n+        s.executeUpdate(\"insert into d3033_b values(1, 100, CURRENT_DATE)\");\n+        s.executeUpdate(\"insert into d3033_b values(2, 200, CURRENT_DATE)\");\n+        s.executeUpdate(\"insert into d3033_b values(3, 300, CURRENT_DATE)\");\n+        s.executeUpdate(\"insert into d3033_b values(4, 400, CURRENT_DATE)\");\n+        s.executeUpdate(\"insert into d3033_c values(1, 4, 100)\");\n+        s.executeUpdate(\"insert into d3033_c values(3, 4, 100)\");\n+            \n+        PreparedStatement pstmt2 = prepareStatement(\n+                \"insert into d3033_a (c1, c2, c3_a) values (?,?,?)\");\n+\n+        PreparedStatement pstmt = prepareStatement(\n+                \"insert into d3033_b (c1, c2_b, c3_b) values (?,?,?)\");\n+\n+        java.util.Date now = new java.util.Date();\n+        java.sql.Timestamp nowTS = new java.sql.Timestamp(now.getTime());\n+        for (int i = 0; i < 15; i++)\n+        {\n+            pstmt.setInt(1, 100+i);\n+            pstmt.setInt(2, 100+i);\n+            pstmt.setTimestamp(3, nowTS);\n+            pstmt.executeUpdate();\n+\n+            for (int j = 0; j < 200; j++)\n+            {\n+                pstmt2.setInt(1, 1000+j);\n+                pstmt2.setInt(2, 100+i); // note \"i\" here (FK)\n+                pstmt2.setInt(3, 1000 + (j+1)*10);\n+                pstmt2.executeUpdate();\n+            }\n+        }\n+\n+\n+        s.executeUpdate(\"alter table d3033_a add constraint \" +\n+                \"d3033_a_fk foreign key (c2) references d3033_b(c1) \" +\n+                \"on delete cascade on update no action\");\n+\n+        s.executeUpdate(\"alter table d3033_c add constraint \" +\n+                \"d3033_c_fk foreign key (c1) references d3033_b(c1) \" +\n+                \"on delete cascade on update no action\");\n+\n+        s.executeUpdate(\"delete from d3033_c\");\n+\n+        // Update the statistics on the 3 tables:\n+        updateStats(s, \"d3033_a\");\n+        updateStats(s, \"d3033_b\");\n+        updateStats(s, \"d3033_c\");\n+\n+        s.close();\n+    }\n+\n }",
                "previous_filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/ExistsWithSetOpsTest.java",
                "raw_url": "https://github.com/apache/derby/raw/9247f313449c367d8b0b6927b3157cec0c781ee0/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ExistsWithSubqueriesTest.java",
                "sha": "f190251da3eb90518eb0850819f2f995c52fae4e",
                "status": "renamed"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/derby/blob/9247f313449c367d8b0b6927b3157cec0c781ee0/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java?ref=9247f313449c367d8b0b6927b3157cec0c781ee0",
                "deletions": 1,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java",
                "patch": "@@ -63,7 +63,7 @@ public static Test suite() {\n         suite.addTest(CreateTableFromQueryTest.suite());\n         suite.addTest(DatabaseClassLoadingTest.suite());\n         suite.addTest(DynamicLikeOptimizationTest.suite());\n-        suite.addTest(ExistsWithSetOpsTest.suite());\n+        suite.addTest(ExistsWithSubqueriesTest.suite());\n         suite.addTest(GrantRevokeTest.suite());\n         suite.addTest(GroupByExpressionTest.suite());\n \t\tsuite.addTest(LangScripts.suite());",
                "raw_url": "https://github.com/apache/derby/raw/9247f313449c367d8b0b6927b3157cec0c781ee0/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java",
                "sha": "e9a76fa83ee03da2631307f7404c821400afedf3",
                "status": "modified"
            }
        ],
        "message": "DERBY-3033: NullPointerExceptions with flattening of NOT EXISTS subqueries\n\nThis patch modifies the behavior of queries which contain correlated\nsubqueries using a NOT EXISTS predicate. For example:\n\n   select ... from a, b where <join criteria> \n       and not exists (select from c where c.col = b.col)\n\nDepending on various conditions, subqueries may be \"flattened\", which is\na term used to describe an internal rewriting process in which the\nsubquery is converted into a same-level join with the parent tables.\n\nFor many types of queries, such flattening results in multiple tables\nequijoined together, and the optimizer may recognize, via transitive\nclosure of the equijoin predicates, additional opportunities for join\npredicates.\n\nHowever, when a NOT EXISTS table is in the join's from list, join\npredicates that mention the NOT EXISTS table cannot be used for such\ntransitive closure, because these are not equijoin predicates, they\nare equi-NON-join predicates: the join succeeds when there are NOT\nmatching rows in that table.\n\nPrior to this change, Derby might incorrectly infer an equijoin predicate\nin such a situation, which could lead to wrong results, or to crashes\nduring query execution when the join processing attempted to access the\nnon-existing rows. This change modifies the PredicateList processing to\nnote when a join predicate includes a NOT EXISTS table, and to omit\nthat join predicate from transitive closure processing.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@581943 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/48152c29b26574030f0fdbed0e8a3445891a2b07",
        "patched_files": [
            "_Suite.java",
            "PredicateList.java",
            "FromList.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "ExistsWithSubqueriesTest.java"
        ]
    },
    "derby_96748ad": {
        "bug_id": "derby_96748ad",
        "commit": "https://github.com/apache/derby/commit/96748ad12e1da41f237504adef5e9ae0ef15d2b1",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/derby/blob/96748ad12e1da41f237504adef5e9ae0ef15d2b1/java/engine/org/apache/derby/iapi/types/BigIntegerDecimal.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/iapi/types/BigIntegerDecimal.java?ref=96748ad12e1da41f237504adef5e9ae0ef15d2b1",
                "deletions": 0,
                "filename": "java/engine/org/apache/derby/iapi/types/BigIntegerDecimal.java",
                "patch": "@@ -21,6 +21,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \n package org.apache.derby.iapi.types;\n \n+import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.sql.Types;\n \n@@ -195,6 +196,12 @@ public void setValue(String theValue) throws StandardException\n \t}\n \t\n \t\n+\tpublic Object\tgetObject() throws StandardException\n+\t{\n+\t\tif ( isNull() ) { return null; }\n+        else { return new BigDecimal( getString() ); }\n+\t}\n+\n \t/* (non-Javadoc)\n \t * @see org.apache.derby.iapi.types.DataValueDescriptor#getString()\n \t */\n@@ -526,6 +533,16 @@ private static BigInteger rescale(BigInteger bi, int deltaScale) {\n \t\t}\n \t\treturn bi;\n \t}\n+    \n+\tpublic void setBigDecimal(Number theValue) throws StandardException\n+\t{\n+        if ( theValue == null ) { setToNull(); }\n+\t\telse\n+        {\n+            setValue( theValue.toString() );\n+        }\n+\t}\n+    \n \t/*\n \t * String display of value\n \t */",
                "raw_url": "https://github.com/apache/derby/raw/96748ad12e1da41f237504adef5e9ae0ef15d2b1/java/engine/org/apache/derby/iapi/types/BigIntegerDecimal.java",
                "sha": "2ecbee58fc67f688aad65d06c301fabf89aa0aa6",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/derby/blob/96748ad12e1da41f237504adef5e9ae0ef15d2b1/java/engine/org/apache/derby/iapi/types/J2SEDataValueFactory.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/iapi/types/J2SEDataValueFactory.java?ref=96748ad12e1da41f237504adef5e9ae0ef15d2b1",
                "deletions": 3,
                "filename": "java/engine/org/apache/derby/iapi/types/J2SEDataValueFactory.java",
                "patch": "@@ -39,9 +39,6 @@ public J2SEDataValueFactory() {\n \n    \tpublic void boot(boolean create, Properties properties) throws StandardException {\n    \t\t\n-   \t\tNumberDataType.MINLONG_MINUS_ONE = SQLDecimal.MINLONG_MINUS_ONE;\n-   \t\tNumberDataType.MAXLONG_PLUS_ONE = SQLDecimal.MAXLONG_PLUS_ONE;\n-\n     \tsuper.boot(create, properties);\n    \t}\n \t",
                "raw_url": "https://github.com/apache/derby/raw/96748ad12e1da41f237504adef5e9ae0ef15d2b1/java/engine/org/apache/derby/iapi/types/J2SEDataValueFactory.java",
                "sha": "49d8aa2a115bca4ef1dfb1ba2073b6259a793087",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/derby/blob/96748ad12e1da41f237504adef5e9ae0ef15d2b1/java/engine/org/apache/derby/iapi/types/NumberDataType.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/iapi/types/NumberDataType.java?ref=96748ad12e1da41f237504adef5e9ae0ef15d2b1",
                "deletions": 8,
                "filename": "java/engine/org/apache/derby/iapi/types/NumberDataType.java",
                "patch": "@@ -21,6 +21,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \n package org.apache.derby.iapi.types;\n \n+import java.math.BigDecimal;\n+\n import org.apache.derby.iapi.error.StandardException;\n import org.apache.derby.iapi.types.NumberDataValue;\n import org.apache.derby.iapi.services.sanity.SanityManager;\n@@ -48,14 +50,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \t */\n \tstatic DataValueDescriptor ZERO_DECIMAL;\n \t\n-\t/**\n-\t * Set by the booting DataValueFactory implementation.\n-\t */\n-\tstatic Comparable MINLONG_MINUS_ONE;\n-\t/**\n-\t * Set by the booting DataValueFactory implementation.\n-\t */\n-\tstatic Comparable MAXLONG_PLUS_ONE;\n+\tstatic final BigDecimal ZERO = BigDecimal.valueOf(0L);\n+\tstatic final BigDecimal ONE = BigDecimal.valueOf(1L);\n+\tstatic final BigDecimal MAXLONG_PLUS_ONE = BigDecimal.valueOf(Long.MAX_VALUE).add(ONE);\n+\tstatic final BigDecimal MINLONG_MINUS_ONE = BigDecimal.valueOf(Long.MIN_VALUE).subtract(ONE);\n \n     /**\n      * Numbers check for isNegative first and negate it if negative.",
                "raw_url": "https://github.com/apache/derby/raw/96748ad12e1da41f237504adef5e9ae0ef15d2b1/java/engine/org/apache/derby/iapi/types/NumberDataType.java",
                "sha": "59043a8a63cf22a5bd51bdc49b45c8d7054fa7fa",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/derby/blob/96748ad12e1da41f237504adef5e9ae0ef15d2b1/java/engine/org/apache/derby/iapi/types/SQLDecimal.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/iapi/types/SQLDecimal.java?ref=96748ad12e1da41f237504adef5e9ae0ef15d2b1",
                "deletions": 9,
                "filename": "java/engine/org/apache/derby/iapi/types/SQLDecimal.java",
                "patch": "@@ -67,13 +67,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n  */\n public final class SQLDecimal extends NumberDataType implements VariableSizeDataValue\n {\n-\tprivate static final BigDecimal ZERO = BigDecimal.valueOf(0L);\n-\tprivate static final BigDecimal ONE = BigDecimal.valueOf(1L);\n-\tstatic final BigDecimal MAXLONG_PLUS_ONE = BigDecimal.valueOf(Long.MAX_VALUE).add(ONE);\n-\tstatic final BigDecimal MINLONG_MINUS_ONE = BigDecimal.valueOf(Long.MIN_VALUE).subtract(ONE);\n-\n-\n-\n \t/**\n \t * object state.  Note that scale and precision are \n \t * always determined dynamically from value when\n@@ -236,8 +229,8 @@ public long\tgetLong() throws StandardException\n \t\t// e.g. 9223372036854775807.1  converts to 9223372036854775807\n \t\t// this matches DB2 UDB behaviour\n \n-\t\tif (   (localValue.compareTo(SQLDecimal.MINLONG_MINUS_ONE) == 1)\n-\t\t\t&& (localValue.compareTo(SQLDecimal.MAXLONG_PLUS_ONE) == -1)) {\n+\t\tif (   (localValue.compareTo(MINLONG_MINUS_ONE) == 1)\n+\t\t\t&& (localValue.compareTo(MAXLONG_PLUS_ONE) == -1)) {\n \n \t\t\treturn localValue.longValue();\n \t\t}",
                "raw_url": "https://github.com/apache/derby/raw/96748ad12e1da41f237504adef5e9ae0ef15d2b1/java/engine/org/apache/derby/iapi/types/SQLDecimal.java",
                "sha": "0404e849692b1e0c954f6f46a2470a9184e45233",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/derby/blob/96748ad12e1da41f237504adef5e9ae0ef15d2b1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java?ref=96748ad12e1da41f237504adef5e9ae0ef15d2b1",
                "deletions": 7,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java",
                "patch": "@@ -563,7 +563,7 @@ public void testParameterMapping() throws Exception {\n             try {\n                 if (!HAVE_BIG_DECIMAL && SQLTypes[type].equals(\"DECIMAL(10,5)\"))\n                     continue;\n-                //System.out.println(procSQL);\n+                println(procSQL);\n                 s.execute(procSQL);\n             } catch (SQLException sqle) {\n                 // may get error that column is not allowed\n@@ -1090,7 +1090,8 @@ public  void    testBigInteger() throws  Exception\n         }\n         catch (SQLException se )\n         {\n-            assertEquals( errorState, se.getSQLState() );\n+            assertEquals\n+                ( \"Expecting failure for seed = \" + seed + \" and insertText = '\" + insertText + \"'\" , errorState, se.getSQLState() );\n         }\n     }\n \n@@ -4292,11 +4293,7 @@ private static String showFirstTwo(byte[] data) {\n     \n     public static Test suite() {\n         \n-        // Don't run for JSR169 until DERBY-2403 is resolved.\n-        if (JDBC.vmSupportsJDBC3())\n-            return TestConfiguration.defaultSuite(ParameterMappingTest.class);\n-        else\n-            return  new TestSuite(\"ParameterMapping\");\n+        return TestConfiguration.defaultSuite(ParameterMappingTest.class);\n     }\n         /*\n         ** Procedures for parameter mapping testing.",
                "raw_url": "https://github.com/apache/derby/raw/96748ad12e1da41f237504adef5e9ae0ef15d2b1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java",
                "sha": "60be1ac4c0c711abeba968058afc8f9c257a73bb",
                "status": "modified"
            }
        ],
        "message": "DERBY-5488: Eliminate some NPEs in ParameterMappingTest when run on OJEC.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1199392 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/fd4430da1dcb0f86a939115742a1987c0296d773",
        "patched_files": [
            "SQLDecimal.java",
            "J2SEDataValueFactory.java",
            "NumberDataType.java",
            "BigIntegerDecimal.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "ParameterMappingTest.java"
        ]
    },
    "derby_987f4fd": {
        "bug_id": "derby_987f4fd",
        "commit": "https://github.com/apache/derby/commit/987f4fd7279133e6db24e70c991fdb8737262a90",
        "file": [
            {
                "additions": 100,
                "blob_url": "https://github.com/apache/derby/blob/987f4fd7279133e6db24e70c991fdb8737262a90/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java",
                "changes": 125,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java?ref=987f4fd7279133e6db24e70c991fdb8737262a90",
                "deletions": 25,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java",
                "patch": "@@ -24,6 +24,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import java.sql.Driver;\n import java.sql.DriverManager;\n import java.sql.SQLException;\n+import java.util.Enumeration;\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n@@ -33,6 +34,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import org.apache.derbyTesting.junit.Derby;\n import org.apache.derbyTesting.junit.JDBC;\n import org.apache.derbyTesting.junit.NetworkServerTestSetup;\n+import org.apache.derbyTesting.junit.SecurityManagerSetup;\n import org.apache.derbyTesting.junit.TestConfiguration;\n \n /**\n@@ -59,42 +61,54 @@ public static Test suite() {\n \n         boolean embeddedAutoLoad = false;\n         boolean clientAutoLoad = false;\n+        boolean jdbc4Autoload = false;\n         \n         if (JDBC.vmSupportsJDBC4() && TestConfiguration.loadingFromJars())\n         {\n-            // test client & embedded\n-            embeddedAutoLoad = true;\n-            clientAutoLoad = true;\n+            // test client & embedded,but the JDBC 4 auto boot is not\n+            // a full boot of the engine. Thus while there is no\n+            // need to explicitly load the driver, the embedded engine\n+            // does not start up. Unlike when the embedded driver is\n+            // put in jdbc.drivers.\n+            \n+            jdbc4Autoload = true;\n         }\n-        else\n-        {\n-            // Simple test to see if the driver class is\n-            // in the value. Could get fancy and see if it is\n-            // correctly formatted but not worth it.\n \n-            try {\n-                String jdbcDrivers = getSystemProperty(\"jdbc.drivers\");\n-                if (jdbcDrivers == null)\n-                    jdbcDrivers = \"\";\n \n-                embeddedAutoLoad = jdbcDrivers\n-                        .indexOf(\"org.apache.derby.jdbc.EmbeddedDriver\") != -1;\n+        // Simple test to see if the driver class is\n+        // in the value. Could get fancy and see if it is\n+        // correctly formatted but not worth it.\n \n-                clientAutoLoad = jdbcDrivers\n-                        .indexOf(\"org.apache.derby.jdbc.ClientDriver\") != -1;\n+        try {\n+            String jdbcDrivers = getSystemProperty(\"jdbc.drivers\");\n+            if (jdbcDrivers == null)\n+                jdbcDrivers = \"\";\n \n-            } catch (SecurityException se) {\n-                // assume there is no autoloading if\n-                // we can't read the value of jdbc.drivers.\n-            }\n+            embeddedAutoLoad = jdbcDrivers\n+                    .indexOf(\"org.apache.derby.jdbc.EmbeddedDriver\") != -1;\n+\n+            clientAutoLoad = jdbcDrivers\n+                    .indexOf(\"org.apache.derby.jdbc.ClientDriver\") != -1;\n+\n+        } catch (SecurityException se) {\n+            // assume there is no autoloading if\n+            // we can't read the value of jdbc.drivers.\n         }\n+\n         \n-        if (embeddedAutoLoad || clientAutoLoad)\n+        if (jdbc4Autoload || embeddedAutoLoad || clientAutoLoad)\n         {\n             TestSuite suite = new TestSuite(\"AutoloadTest\");\n-            if (embeddedAutoLoad)\n+            \n+            if (jdbc4Autoload && !embeddedAutoLoad)\n+            {\n+                suite.addTest(SecurityManagerSetup.noSecurityManager(\n+                        new AutoloadTest(\"testEmbeddedNotStarted\")));\n+            }\n+            \n+            if (jdbc4Autoload || embeddedAutoLoad)\n                 suite.addTest(baseAutoLoadSuite(\"embedded\"));\n-            if (clientAutoLoad)\n+            if (jdbc4Autoload || clientAutoLoad)\n                 suite.addTest(\n                   TestConfiguration.clientServerDecorator(\n                           baseAutoLoadSuite(\"client\")));\n@@ -106,6 +120,7 @@ public static Test suite() {\n         // not loaded implicitly by some other means.\n         TestSuite suite = new TestSuite(\"AutoloadTest: no autoloading expected\");\n         \n+        suite.addTest(new AutoloadTest(\"testEmbeddedNotStarted\"));\n         suite.addTest(new AutoloadTest(\"noloadTestNodriverLoaded\"));\n         suite.addTest(TestConfiguration.clientServerDecorator(\n                 new AutoloadTest(\"noloadTestNodriverLoaded\")));\n@@ -129,8 +144,14 @@ private static Test baseAutoLoadSuite(String which)\n                 suite.addTest(new AutoloadTest(\"testAutoNetworkServerBoot\"));\n \n         }\n-            \n+        \n         suite.addTest(new AutoloadTest(\"testSuccessfulConnect\"));\n+        \n+        if (\"embedded\".equals(which)) {\n+            suite.addTest(SecurityManagerSetup.noSecurityManager(\n+                new AutoloadTest(\"testEmbeddedStarted\")));\n+        }\n+\n         suite.addTest(new AutoloadTest(\"testUnsuccessfulConnect\"));\n         suite.addTest(new AutoloadTest(\"testExplicitLoad\"));\n         return suite;\n@@ -150,7 +171,7 @@ public void testRegisteredDriver() throws SQLException\n     {\n         String protocol =\n             getTestConfiguration().getJDBCClient().getUrlBase();\n-                    \n+                         \n         Driver driver = DriverManager.getDriver(protocol);\n         assertNotNull(\"Expected registered driver\", driver);\n     }\n@@ -273,5 +294,59 @@ private boolean fullEngineAutoBoot()\n         String jdbcDrivers = getSystemProperty(\"jdbc.drivers\");\n         return jdbcDrivers.indexOf(\"org.apache.derby.jdbc.EmbeddedDriver\") != -1;\n     }\n+    \n+    /**\n+     * Test indirect artifiacts through public apis that\n+     * the embedded engine has not been started.\n+     */\n+    \n+    public void testEmbeddedNotStarted()\n+    {\n+        assertFalse(hasDerbyThreadGroup());\n+    }\n+    \n+    /**\n+     * Check the test(s) we use to determine if the embedded driver\n+     * is not up indicate the opposite once the driver has been\n+     * fully booted.\n+     *\n+     */\n+    public void testEmbeddedStarted()\n+    {\n+        assertTrue(hasDerbyThreadGroup());\n+    }\n+    \n+    /**\n+     * Return true if a ThreadGroup exists that has a name\n+     * starting with derby.\n+     * @return\n+     */\n+    private boolean hasDerbyThreadGroup() {\n+        ThreadGroup tg = Thread.currentThread().getThreadGroup();\n+        \n+        while (tg.getParent() != null)\n+        {\n+            tg = tg.getParent();\n+        }\n+        \n+        // estimate of groups        \n+        ThreadGroup[] allGroups = new ThreadGroup[tg.activeGroupCount()];\n+        int actual;\n+        for (;;)\n+        {\n+            actual = tg.enumerate(allGroups, true);\n+            if (actual < allGroups.length)\n+                break;\n+            // just double the size\n+            allGroups = new ThreadGroup[allGroups.length * 2];\n+        }\n+\n+        for (int i = 0; i < actual; i++)\n+        {\n+            if (allGroups[i].getName().startsWith(\"derby.\"))\n+                return true;\n+        }\n+        return false;\n+    }\n }\n ",
                "raw_url": "https://github.com/apache/derby/raw/987f4fd7279133e6db24e70c991fdb8737262a90/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java",
                "sha": "3978c252e96a107f1da5a66e4af8f2673fec2803",
                "status": "modified"
            }
        ],
        "message": "DERBY-1952 Add a check to the AutoloadTest that indicates in a somewhat non-internal way that Derby's\nembedded engine was actually booted in not. Will replace the use of internal apis and checking\nfor a NPE in the jdbc4 version of the test.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@545332 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/c6148c9048f186cdb22518a84e45ef67f98c142e",
        "patched_files": [],
        "repo": "derby",
        "unit_tests": [
            "AutoloadTest.java"
        ]
    },
    "derby_9a428e4": {
        "bug_id": "derby_9a428e4",
        "commit": "https://github.com/apache/derby/commit/9a428e437ad5611088cf502742a1f011bfecb053",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/derby/blob/9a428e437ad5611088cf502742a1f011bfecb053/java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java?ref=9a428e437ad5611088cf502742a1f011bfecb053",
                "deletions": 1,
                "filename": "java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java",
                "patch": "@@ -351,9 +351,16 @@ public void\tclose() throws StandardException\n \t\t\t** is on, then the run time statistics from the autocommit is the\n \t\t\t** only one that the user would ever see.  So, we don't overwrite\n \t\t\t** the run time statistics object for a commit.\n+            ** DERBY-2353: Also make an exception when the activation is\n+            ** closed. If the activation is closed, the run time statistics\n+            ** object is null and there's nothing to print. This may happen\n+            ** if a top-level result set closes the activation and close() is\n+            ** subsequently called on the child result sets. The information\n+            ** about the children is also printed by the parent, so it's safe\n+            ** to skip printing it.\n \t\t\t*/\n \t\t\tif (lcc.getRunTimeStatisticsMode() &&\n-\t\t\t\t! doesCommit())\n+\t\t\t\t!doesCommit() && !activation.isClosed())\n \t\t\t{\n \t\t\t\tendExecutionTime = getCurrentTimeMillis();\n ",
                "raw_url": "https://github.com/apache/derby/raw/9a428e437ad5611088cf502742a1f011bfecb053/java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java",
                "sha": "e2727b6c1a380e3f2406289c3beaec963fdacbd1",
                "status": "modified"
            },
            {
                "additions": 66,
                "blob_url": "https://github.com/apache/derby/blob/9a428e437ad5611088cf502742a1f011bfecb053/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ReferentialActionsTest.java",
                "changes": 66,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ReferentialActionsTest.java?ref=9a428e437ad5611088cf502742a1f011bfecb053",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/ReferentialActionsTest.java",
                "patch": "@@ -0,0 +1,66 @@\n+/*\n+\n+   Derby - Class org.apache.derbyTesting.functionTests.tests.lang.ReferentialActionsTest\n+\n+   Licensed to the Apache Software Foundation (ASF) under one or more\n+   contributor license agreements.  See the NOTICE file distributed with\n+   this work for additional information regarding copyright ownership.\n+   The ASF licenses this file to you under the Apache License, Version 2.0\n+   (the \"License\"); you may not use this file except in compliance with\n+   the License.  You may obtain a copy of the License at\n+\n+     http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+\n+ */\n+\n+package org.apache.derbyTesting.functionTests.tests.lang;\n+\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import org.apache.derbyTesting.junit.BaseJDBCTestCase;\n+import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;\n+\n+/**\n+ * This class tests SQL referential actions.\n+ */\n+public class ReferentialActionsTest extends BaseJDBCTestCase {\n+\n+    public ReferentialActionsTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(\"ReferentialActionsTest\");\n+\n+        // DERBY-2353: Need to set derby.language.logQueryPlan to expose the\n+        // bug (got a NullPointerException when writing the plan to derby.log)\n+        suite.addTest(DatabasePropertyTestSetup.singleProperty(\n+                new ReferentialActionsTest(\"onDeleteCascadeWithLogQueryPlan\"),\n+                \"derby.language.logQueryPlan\", \"true\", true));\n+\n+        return suite;\n+    }\n+\n+    /**\n+     * Test that cascading delete works when derby.language.logQueryPlan is\n+     * set to true - DERBY-2353.\n+     */\n+    public void onDeleteCascadeWithLogQueryPlan() throws SQLException {\n+        setAutoCommit(false);\n+        Statement s = createStatement();\n+        s.execute(\"create table a (a1 int primary key)\");\n+        s.execute(\"insert into a values 1\");\n+        s.execute(\"create table b (b1 int references a on delete cascade)\");\n+        s.execute(\"insert into b values 1\");\n+        // The next line used to cause a NullPointerException\n+        s.execute(\"delete from a\");\n+    }\n+}",
                "raw_url": "https://github.com/apache/derby/raw/9a428e437ad5611088cf502742a1f011bfecb053/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ReferentialActionsTest.java",
                "sha": "de77f82de25c45c0bee42cca119deaa0fa8c7410",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/derby/blob/9a428e437ad5611088cf502742a1f011bfecb053/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java?ref=9a428e437ad5611088cf502742a1f011bfecb053",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java",
                "patch": "@@ -70,6 +70,7 @@ public static Test suite() {\n \t\tsuite.addTest(LangScripts.suite());\n         suite.addTest(MathTrigFunctionsTest.suite());\n         suite.addTest(PrepareExecuteDDL.suite());\n+        suite.addTest(ReferentialActionsTest.suite());\n         suite.addTest(RolesTest.suite());\n         suite.addTest(RolesConferredPrivilegesTest.suite());\n         suite.addTest(SQLSessionContextTest.suite());",
                "raw_url": "https://github.com/apache/derby/raw/9a428e437ad5611088cf502742a1f011bfecb053/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java",
                "sha": "5e3c5e237fcebfb4fbaf8204e7b5619df219dcc5",
                "status": "modified"
            }
        ],
        "message": "DERBY-2353: intermittent NPEs during DELETE ops in a reasonably large transaction\n\nWhen derby.language.logQueryPlan is true, don't try to print the query\nplan if the activation has been closed.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@763900 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/d835c4041ae49dc5592cff66072dc9776ccda6b8",
        "patched_files": [
            "_Suite.java",
            "NoRowsResultSetImpl.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "ReferentialActionsTest.java"
        ]
    },
    "derby_9d24308": {
        "bug_id": "derby_9d24308",
        "commit": "https://github.com/apache/derby/commit/9d24308dd44df406f0997fad87f9b34f31811d13",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/derby/blob/9d24308dd44df406f0997fad87f9b34f31811d13/java/engine/org/apache/derby/impl/sql/GenericColumnDescriptor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/GenericColumnDescriptor.java?ref=9d24308dd44df406f0997fad87f9b34f31811d13",
                "deletions": 1,
                "filename": "java/engine/org/apache/derby/impl/sql/GenericColumnDescriptor.java",
                "patch": "@@ -239,7 +239,9 @@ public String toString()\n \t\t\treturn \"GenericColumnDescriptor\\n\\tname: \"+name+\n \t\t\t\t\"\\n\\tTable: \"+schemaName+\".\"+tableName+\n \t\t\t\t\"\\n\\tcolumnPos: \"+columnPos+\n-\t\t\t\t\"\\n\\tType: \"+type;\n+\t\t\t\t\"\\n\\tType: \"+type+\n+\t\t\t\t\"\\n\\tisAutoincrement: \" + isAutoincrement +\n+\t\t\t\t\"\\n\\thasGenerationClause: \" + hasGenerationClause;\n \t\t}\n \t\telse\n \t\t{",
                "raw_url": "https://github.com/apache/derby/raw/9d24308dd44df406f0997fad87f9b34f31811d13/java/engine/org/apache/derby/impl/sql/GenericColumnDescriptor.java",
                "sha": "43d7995899ff11ebebfa7c575fb28218f83418e9",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/derby/blob/9d24308dd44df406f0997fad87f9b34f31811d13/java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java?ref=9d24308dd44df406f0997fad87f9b34f31811d13",
                "deletions": 1,
                "filename": "java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java",
                "patch": "@@ -168,7 +168,12 @@ public void addToFreeList(DataValueDescriptor[] objectArray, int maxFreeListSize\n \t\t{\n \t\t\t// the only difference between getClone and cloneObject is cloneObject does\n \t\t\t// not objectify a stream.  We use getClone here.  Beetle 4896.\n-\t\t\tnewArray[i] = origArray[i].getClone();\n+\n+\t\t\t// DERBY-4413 shows that the value for a generated column will be\n+\t\t\t// null as the result set is computed as part of an INSERT INTO, so\n+\t\t\t// accept a null also.\n+\t\t\tnewArray[i] =\n+\t\t\t\t(origArray[i] != null ? origArray[i].getClone() : null);\n \t\t}\n \n \t\treturn newArray;",
                "raw_url": "https://github.com/apache/derby/raw/9d24308dd44df406f0997fad87f9b34f31811d13/java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java",
                "sha": "a7297e07f27416dd5b024c78c60910bbf69f9e2c",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/derby/blob/9d24308dd44df406f0997fad87f9b34f31811d13/java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java?ref=9d24308dd44df406f0997fad87f9b34f31811d13",
                "deletions": 3,
                "filename": "java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java",
                "patch": "@@ -126,6 +126,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \t**/\n \tprotected boolean columnOrderingNullsLowMap[];\n \n+\n+\t/**\n+    Determine whether a column is used for ordering or not.\n+\t**/\n+\tprivate boolean isOrderingColumn[];\n+\n \t/**\n \tThe sort observer.  May be null.  Used as a callback.\n \t**/\n@@ -455,8 +461,18 @@ void checkColumnTypes(DataValueDescriptor[] row)\n                 Object col2 = template[colid];\n                 if (col1 == null)\n \t\t\t\t{\n-\t\t\t\t\tSanityManager.THROWASSERT(\n-\t\t\t\t\t\t\"col[\" + colid + \"]  is null\");\n+\t\t\t\t\tif (!isOrderingColumn[colid]) {\n+\n+\t\t\t\t\t\t// DERBY-4413 shows that the value for a generated\n+\t\t\t\t\t\t// column will be null as the result set is computed as\n+\t\t\t\t\t\t// part of an INSERT INTO, so accept a null also.\n+\t\t\t\t\t\t// This column would not be part of the sort key.\n+\n+\t\t\t\t\t\tcontinue;\n+\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tSanityManager.THROWASSERT(\"col[\" + colid + \"] is null\");\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\t\t\t\n                 if (!(col1 instanceof CloneableObject))\n@@ -546,13 +562,27 @@ public void initialize(\n         columnOrderingMap          = new int[columnOrdering.length];\n         columnOrderingAscendingMap = new boolean[columnOrdering.length];\n         columnOrderingNullsLowMap  = new boolean[columnOrdering.length];\n-        for (int i = 0; i < columnOrdering.length; i++)\n+\n+\t\tif (SanityManager.DEBUG) {\n+\t\t\tisOrderingColumn = new boolean[template.length];\n+\n+\t\t\tfor (int i = 0; i < isOrderingColumn.length; i++) {\n+\t\t\t\tisOrderingColumn[i] = false;\n+\t\t\t}\n+\t\t}\n+\n+\t\tfor (int i = 0; i < columnOrdering.length; i++)\n         {\n             columnOrderingMap[i] = columnOrdering[i].getColumnId();\n             columnOrderingAscendingMap[i] = columnOrdering[i].getIsAscending();\n             columnOrderingNullsLowMap[i] = columnOrdering[i].getIsNullsOrderedLow();\n+\n+\t\t\tif (SanityManager.DEBUG) {\n+\t\t\t\tisOrderingColumn[columnOrderingMap[i]] = true;\n+\t\t\t}\n         }\n \n+\n \t\t// No inserter or scan yet.\n \t\tthis.inserter = null;\n \t\tthis.scan = null;",
                "raw_url": "https://github.com/apache/derby/raw/9d24308dd44df406f0997fad87f9b34f31811d13/java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java",
                "sha": "ec6e1b775dd6e6792f2d72727500b25b5dba9ce3",
                "status": "modified"
            },
            {
                "additions": 50,
                "blob_url": "https://github.com/apache/derby/blob/9d24308dd44df406f0997fad87f9b34f31811d13/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java",
                "changes": 52,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java?ref=9d24308dd44df406f0997fad87f9b34f31811d13",
                "deletions": 2,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java",
                "patch": "@@ -5258,7 +5258,55 @@ public  void    test_030_derby_4146()\n              );\n \n     }\n-    \n+\n+\n+   /**\n+    * Test INSERT INTO .. select distinct in presence of generated column.\n+    * Cf DERBY-4413.\n+    */\n+    public  void    test_031_derby_4413()\n+            throws Exception\n+    {\n+        Connection  conn = getConnection();\n+\n+        //\n+        // Schema\n+        //\n+        goodStatement\n+            (\n+                conn,\n+                \"create table t_4413 (\" +\n+                \"     i integer, \" +\n+                \"     j integer not null generated always as (i*2))\"\n+            );\n+        goodStatement\n+            (\n+                conn,\n+                \"insert into t_4413(i) values 1,2,1\"\n+            );\n+\n+        goodStatement\n+            (\n+                conn,\n+                \"insert into t_4413(i) select distinct i from t_4413\"\n+            );\n+        assertResults\n+            (\n+                conn,\n+                \"select * from t_4413\",\n+                new String[][]\n+                {\n+                    { \"1\", \"2\", },\n+                    { \"2\", \"4\", },\n+                    { \"1\", \"2\", },\n+                    { \"1\", \"2\", },\n+                    { \"2\", \"4\", },\n+                },\n+                false\n+            );\n+\n+    }\n+\n \n     ///////////////////////////////////////////////////////////////////////////////////\n     //\n@@ -5436,4 +5484,4 @@ public  static  void    showValues( String tag, Integer a, Integer b, Integer c\n     }\n \n \n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/derby/raw/9d24308dd44df406f0997fad87f9b34f31811d13/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java",
                "sha": "7d645a212c49721e0dc17d5040a0ee9c85803e3f",
                "status": "modified"
            }
        ],
        "message": "DERBY-4413 INSERT from SELECT DISTINCT gives assertFailure (sane), or NPE (insane) in presence of generated columns\n\nPatch DERBY-4413-2 makes sort accept columns that are null. In sane mode, it is checked that in such a case, the\nempty column is not part of the sort key.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@829410 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/7a9ce7e9e625cde2953831e1f62ee1a0ff50cbdc",
        "patched_files": [
            "GenericColumnDescriptor.java",
            "BasicSortObserver.java",
            "MergeSort.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "GeneratedColumnsTest.java"
        ]
    },
    "derby_a823c6a": {
        "bug_id": "derby_a823c6a",
        "commit": "https://github.com/apache/derby/commit/a823c6a885f3d798c16dc4682d8a9bea318360bc",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/derby/blob/a823c6a885f3d798c16dc4682d8a9bea318360bc/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java?ref=a823c6a885f3d798c16dc4682d8a9bea318360bc",
                "deletions": 0,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/JoinNode.java",
                "patch": "@@ -1512,6 +1512,13 @@ public FromTable transformOuterJoins(ValueNode predicateTree, int numTables)\n \t\t/* Can't flatten if no predicates in where clause. */\n \t\tif (predicateTree == null)\n \t\t{\n+            // DERBY-4712. Make sure any nested outer joins know we are non\n+            // flattenable, too, since they inform their left and right sides\n+            // which, is they are inner joins, a priori think they are\n+            // flattenable. If left/right result sets are not outer joins,\n+            // these next two calls are no-ops.\n+            ((FromTable) leftResultSet).transformOuterJoins(null, numTables);\n+            ((FromTable) rightResultSet).transformOuterJoins(null, numTables);\n \t\t\treturn this;\n \t\t}\n ",
                "raw_url": "https://github.com/apache/derby/raw/a823c6a885f3d798c16dc4682d8a9bea318360bc/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java",
                "sha": "cf71e3c860791b5807b75bbd45a6c5d54dd538d4",
                "status": "modified"
            },
            {
                "additions": 246,
                "blob_url": "https://github.com/apache/derby/blob/a823c6a885f3d798c16dc4682d8a9bea318360bc/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OuterJoinTest.java",
                "changes": 246,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OuterJoinTest.java?ref=a823c6a885f3d798c16dc4682d8a9bea318360bc",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/OuterJoinTest.java",
                "patch": "@@ -3133,4 +3133,250 @@ public void testDerby_4736_nullability() throws Exception\n \n         JDBC.assertFullResultSet(rs, expRS);\n     }\n+\n+\n+    /**\n+     * Test the queries reported in DERBY-4712 as giving null pointer\n+     * exceptions. Should fail with NPE before the fix went in.  For bug\n+     * explanation, see the JIRA issue and {@code JoinNode#transformOuterJoins}.\n+     */\n+    public void testDerby_4712_NPEs() throws Exception\n+    {\n+        setAutoCommit(false);\n+\n+        Statement st = createStatement();\n+        ResultSet rs = null;\n+        String [][] expRS;\n+\n+        st.executeUpdate(\"create table t0(x0 int)\");\n+        st.executeUpdate(\"create table t1(x1 int)\");\n+        st.executeUpdate(\"create table t2(x2 int)\");\n+        st.executeUpdate(\"create table t3(x3 int)\");\n+        st.executeUpdate(\"create table t4(x4 int)\");\n+        st.executeUpdate(\"insert into t4 values(0)\");\n+        st.executeUpdate(\"insert into t4 values(1)\");\n+        st.executeUpdate(\"insert into t4 values(2)\");\n+        st.executeUpdate(\"insert into t4 values(3)\");\n+        st.executeUpdate(\"create table t5(x5 int)\");\n+        st.executeUpdate(\"insert into t5 values(0)\");\n+        st.executeUpdate(\"insert into t5 values(1)\");\n+        st.executeUpdate(\"insert into t5 values(2)\");\n+        st.executeUpdate(\"insert into t5 values(3)\");\n+        st.executeUpdate(\"insert into t5 values(4)\");\n+        st.executeUpdate(\"create table t6(x6 int)\");\n+        st.executeUpdate(\"insert into t6 values(0)\");\n+        st.executeUpdate(\"insert into t6 values(1)\");\n+        st.executeUpdate(\"insert into t6 values(2)\");\n+        st.executeUpdate(\"insert into t6 values(3)\");\n+        st.executeUpdate(\"insert into t6 values(4)\");\n+        st.executeUpdate(\"insert into t6 values(5)\");\n+        st.executeUpdate(\"create table t7(x7 int)\");\n+        st.executeUpdate(\"insert into t7 values(0)\");\n+        st.executeUpdate(\"insert into t7 values(1)\");\n+        st.executeUpdate(\"insert into t7 values(2)\");\n+        st.executeUpdate(\"insert into t7 values(3)\");\n+        st.executeUpdate(\"insert into t7 values(4)\");\n+        st.executeUpdate(\"insert into t7 values(5)\");\n+        st.executeUpdate(\"insert into t7 values(6)\");\n+        st.executeUpdate(\"create table t8(x8 int)\");\n+        st.executeUpdate(\"insert into t8 values(0)\");\n+        st.executeUpdate(\"insert into t8 values(1)\");\n+        st.executeUpdate(\"insert into t8 values(2)\");\n+        st.executeUpdate(\"insert into t8 values(3)\");\n+        st.executeUpdate(\"insert into t8 values(4)\");\n+        st.executeUpdate(\"insert into t8 values(5)\");\n+        st.executeUpdate(\"insert into t8 values(6)\");\n+        st.executeUpdate(\"insert into t8 values(7)\");\n+        st.executeUpdate(\"create table t9(x9 int)\");\n+        st.executeUpdate(\"insert into t9 values(0)\");\n+        st.executeUpdate(\"insert into t9 values(1)\");\n+        st.executeUpdate(\"insert into t9 values(2)\");\n+        st.executeUpdate(\"insert into t9 values(3)\");\n+        st.executeUpdate(\"insert into t9 values(4)\");\n+        st.executeUpdate(\"insert into t9 values(5)\");\n+        st.executeUpdate(\"insert into t9 values(6)\");\n+        st.executeUpdate(\"insert into t9 values(7)\");\n+        st.executeUpdate(\"insert into t9 values(8)\");\n+        st.executeUpdate(\"insert into t0 values(1)\");\n+        st.executeUpdate(\"insert into t1 values(2)\");\n+        st.executeUpdate(\"insert into t0 values(3)\");\n+        st.executeUpdate(\"insert into t1 values(3)\");\n+        st.executeUpdate(\"insert into t2 values(4)\");\n+        st.executeUpdate(\"insert into t0 values(5)\");\n+        st.executeUpdate(\"insert into t2 values(5)\");\n+        st.executeUpdate(\"insert into t1 values(6)\");\n+        st.executeUpdate(\"insert into t2 values(6)\");\n+        st.executeUpdate(\"insert into t0 values(7)\");\n+        st.executeUpdate(\"insert into t1 values(7)\");\n+        st.executeUpdate(\"insert into t2 values(7)\");\n+        st.executeUpdate(\"insert into t3 values(8)\");\n+        st.executeUpdate(\"insert into t0 values(9)\");\n+        st.executeUpdate(\"insert into t3 values(9)\");\n+        st.executeUpdate(\"insert into t1 values(10)\");\n+        st.executeUpdate(\"insert into t3 values(10)\");\n+        st.executeUpdate(\"insert into t0 values(11)\");\n+        st.executeUpdate(\"insert into t1 values(11)\");\n+        st.executeUpdate(\"insert into t3 values(11)\");\n+        st.executeUpdate(\"insert into t2 values(12)\");\n+        st.executeUpdate(\"insert into t3 values(12)\");\n+        st.executeUpdate(\"insert into t0 values(13)\");\n+        st.executeUpdate(\"insert into t2 values(13)\");\n+        st.executeUpdate(\"insert into t3 values(13)\");\n+        st.executeUpdate(\"insert into t1 values(14)\");\n+        st.executeUpdate(\"insert into t2 values(14)\");\n+        st.executeUpdate(\"insert into t3 values(14)\");\n+        st.executeUpdate(\"insert into t0 values(15)\");\n+        st.executeUpdate(\"insert into t1 values(15)\");\n+        st.executeUpdate(\"insert into t2 values(15)\");\n+        st.executeUpdate(\"insert into t3 values(15)\");\n+\n+        rs = st.executeQuery(\n+        \"SELECT t0.x0,                                                  \" +\n+        \"       t1.x1,                                                  \" +\n+        \"       t2.x2,                                                  \" +\n+        \"       t3.x3,                                                  \" +\n+        \"       t4.x4,                                                  \" +\n+        \"       t5.x5,                                                  \" +\n+        \"       t6.x6,                                                  \" +\n+        \"       t7.x7,                                                  \" +\n+        \"       t8.x8                                                   \" +\n+        \"FROM   (((t0                                                   \" +\n+        \"          INNER JOIN ((t1                                      \" +\n+        \"                       RIGHT OUTER JOIN (t2                    \" +\n+        \"                                         INNER JOIN t3         \" +\n+        \"                                           ON t2.x2 = t3.x3 )  \" +\n+        \"                         ON t1.x1 = t2.x2 )                    \" +\n+        \"                      LEFT OUTER JOIN (t4                      \" +\n+        \"                                       INNER JOIN t5           \" +\n+        \"                                         ON t4.x4 = t5.x5 )    \" +\n+        \"                        ON t1.x1 = t4.x4 )                     \" +\n+        \"            ON t0.x0 = t2.x2 )                                 \" +\n+        \"         LEFT OUTER JOIN (t6                                   \" +\n+        \"                          INNER JOIN t7                        \" +\n+        \"                            ON t6.x6 = t7.x7 )                 \" +\n+        \"           ON t1.x1 = t6.x6 )                                  \" +\n+        \"        INNER JOIN t8                                          \" +\n+        \"          ON t5.x5 = t8.x8 )                                   \");\n+\n+        JDBC.assertEmpty(rs);\n+\n+        rs = st.executeQuery(\n+        \"SELECT t0.x0,                                               \" +\n+        \"       t1.x1,                                               \" +\n+        \"       t2.x2,                                               \" +\n+        \"       t3.x3,                                               \" +\n+        \"       t4.x4,                                               \" +\n+        \"       t5.x5,                                               \" +\n+        \"       t6.x6,                                               \" +\n+        \"       t7.x7                                                \" +\n+        \"FROM   ((t0                                                 \" +\n+        \"         RIGHT OUTER JOIN t1                                \" +\n+        \"           ON t0.x0 = t1.x1 )                               \" +\n+        \"        INNER JOIN (((t2                                    \" +\n+        \"                      INNER JOIN (t3                        \" +\n+        \"                                  LEFT OUTER JOIN t4        \" +\n+        \"                                    ON t3.x3 = t4.x4 )      \" +\n+        \"                        ON t2.x2 = t3.x3 )                  \" +\n+        \"                     RIGHT OUTER JOIN t5                    \" +\n+        \"                       ON t2.x2 = t5.x5 )                   \" +\n+        \"                    LEFT OUTER JOIN (t6                     \" +\n+        \"                                     INNER JOIN t7          \" +\n+        \"                                       ON t6.x6 = t7.x7 )   \" +\n+        \"                      ON t4.x4 = t6.x6 )                    \" +\n+        \"          ON t0.x0 = t5.x5 )                                \");\n+\n+        expRS = new String [][]\n+        {\n+            {\"3\", \"3\", null, null, null, \"3\", null, null}\n+        };\n+\n+        JDBC.assertFullResultSet(rs, expRS);\n+\n+        rs = st.executeQuery(\n+        \"SELECT t0.x0,                                                \" +\n+        \"       t1.x1,                                                \" +\n+        \"       t2.x2,                                                \" +\n+        \"       t3.x3,                                                \" +\n+        \"       t4.x4,                                                \" +\n+        \"       t5.x5,                                                \" +\n+        \"       t6.x6,                                                \" +\n+        \"       t7.x7                                                 \" +\n+        \"FROM   ((((t0                                                \" +\n+        \"           LEFT OUTER JOIN t1                                \" +\n+        \"             ON t0.x0 = t1.x1 )                              \" +\n+        \"          RIGHT OUTER JOIN t2                                \" +\n+        \"            ON t0.x0 = t2.x2 )                               \" +\n+        \"         RIGHT OUTER JOIN t3                                 \" +\n+        \"           ON t0.x0 = t3.x3 )                                \" +\n+        \"        INNER JOIN ((t4                                      \" +\n+        \"                     INNER JOIN t5                           \" +\n+        \"                       ON t4.x4 = t5.x5 )                    \" +\n+        \"                    RIGHT OUTER JOIN (t6                     \" +\n+        \"                                      RIGHT OUTER JOIN t7    \" +\n+        \"                                        ON t6.x6 = t7.x7 )   \" +\n+        \"                      ON t4.x4 = t6.x6 )                     \" +\n+        \"          ON t1.x1 = t4.x4 )                                 \");\n+\n+        JDBC.assertEmpty(rs);\n+\n+        rs = st.executeQuery(\n+        \"SELECT t0.x0,                                    \" +\n+        \"       t1.x1,                                    \" +\n+        \"       t2.x2,                                    \" +\n+        \"       t3.x3,                                    \" +\n+        \"       t4.x4,                                    \" +\n+        \"       t5.x5                                     \" +\n+        \"FROM   (((t0                                     \" +\n+        \"          INNER JOIN t1                          \" +\n+        \"            ON t0.x0 = t1.x1 )                   \" +\n+        \"         RIGHT OUTER JOIN (t2                    \" +\n+        \"                           RIGHT OUTER JOIN t3   \" +\n+        \"                             ON t2.x2 = t3.x3 )  \" +\n+        \"           ON t0.x0 = t2.x2 )                    \" +\n+        \"        INNER JOIN (t4                           \" +\n+        \"                    LEFT OUTER JOIN t5           \" +\n+        \"                      ON t4.x4 = t5.x5 )         \" +\n+        \"          ON t1.x1 = t4.x4 )                     \");\n+\n+        JDBC.assertEmpty(rs);\n+\n+        rs = st.executeQuery(\n+        \"SELECT t0.x0,                                                    \" +\n+        \"       t1.x1,                                                    \" +\n+        \"       t2.x2,                                                    \" +\n+        \"       t3.x3,                                                    \" +\n+        \"       t4.x4,                                                    \" +\n+        \"       t5.x5,                                                    \" +\n+        \"       t6.x6                                                     \" +\n+        \"FROM   ((t0                                                      \" +\n+        \"         RIGHT OUTER JOIN                                        \" +\n+        \"                  (t1                                            \" +\n+        \"                   RIGHT OUTER JOIN (t2                          \" +\n+        \"                                     LEFT OUTER JOIN             \" +\n+        \"                                           (t3                   \" +\n+        \"                                            LEFT OUTER JOIN t4   \" +\n+        \"                                               ON t3.x3 = t4.x4  \" +\n+        \"                                            )                    \" +\n+        \"                                               ON t2.x2 = t3.x3 )\" +\n+        \"                      ON t1.x1 = t3.x3 )                         \" +\n+        \"           ON t0.x0 = t1.x1 )                                    \" +\n+        \"        LEFT OUTER JOIN (t5                                      \" +\n+        \"                         INNER JOIN t6                           \" +\n+        \"                           ON t5.x5 = t6.x6 )                    \" +\n+        \"          ON t2.x2 = t5.x5 )                                     \");\n+\n+        expRS = new String [][]\n+        {\n+            {null, null, \"4\", null, null, \"4\", \"4\"},\n+            {null, null, \"5\", null, null, null, null},\n+            {null, null, \"6\", null, null, null, null},\n+            {null, null, \"7\", null, null, null, null},\n+            {null, null, \"12\", \"12\", null, null, null},\n+            {null, null, \"13\", \"13\", null, null, null},\n+            {null, \"14\", \"14\", \"14\", null, null, null},\n+            {\"15\", \"15\", \"15\", \"15\", null, null, null},\n+        };\n+\n+        JDBC.assertFullResultSet(rs, expRS);\n+    }\n }",
                "raw_url": "https://github.com/apache/derby/raw/a823c6a885f3d798c16dc4682d8a9bea318360bc/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OuterJoinTest.java",
                "sha": "f99ef0a2490ced21a0f0b06e102e9ddc9f46a418",
                "status": "modified"
            }
        ],
        "message": "DERBY-4712 Complex nested joins problems\n\nPatch DERBY-4712b, which removes one of the source for NPE seen by the reporter.\nThe other is covered by DERBY-4798.\n\nA corner case: the patch makes an inner join which decides it is not\nflattenable, propagate this fact down to any nested outer join nodes\ncontaining nested inner joins, the latter inner joins will otherwise\nthink they are flattenable (a priori value for inner joins).\n\nAdds new test cases.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@997325 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/66f38fa688e555d0d5a97cb8467f1de103eb12f1",
        "patched_files": [
            "JoinNode.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "OuterJoinTest.java"
        ]
    },
    "derby_a9ce088": {
        "bug_id": "derby_a9ce088",
        "commit": "https://github.com/apache/derby/commit/a9ce08817be091aba7d5d542b60f291927303c8b",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/derby/blob/a9ce08817be091aba7d5d542b60f291927303c8b/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java?ref=a9ce08817be091aba7d5d542b60f291927303c8b",
                "deletions": 0,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java",
                "patch": "@@ -1609,6 +1609,16 @@ public void expandAllsAndNameColumns(FromList fromList)\n \t\t\t\t\tinsertElementAt(allExpansion.elementAt(inner), index + inner);\n \t\t\t\t}\n \n+\t\t\t\t// Move the index position to account for the removals and the\n+\t\t\t\t// insertions. Should be positioned on the last column in the\n+\t\t\t\t// expansion to prevent double processing of the columns.\n+\t\t\t\t// DERBY-4410: If the expansion is empty, this will move the\n+\t\t\t\t// position one step back because the * was removed and nothing\n+\t\t\t\t// was inserted, so all columns to the right of the current\n+\t\t\t\t// position have been moved one position to the left. If we\n+\t\t\t\t// don't adjust the position, we end up skipping columns.\n+\t\t\t\tindex += (allExpansion.size() - 1);\n+\n \t\t\t\t// If the rc was a \"*\", we need to set the initial list size\n \t\t\t\t// to the number of columns that are actually returned to\n \t\t\t\t// the user.",
                "raw_url": "https://github.com/apache/derby/raw/a9ce08817be091aba7d5d542b60f291927303c8b/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java",
                "sha": "033ffbe888d34a941b9e83c78614630295c03988",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/derby/blob/a9ce08817be091aba7d5d542b60f291927303c8b/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java?ref=a9ce08817be091aba7d5d542b60f291927303c8b",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java",
                "patch": "@@ -652,5 +652,11 @@ public void testUsingClause() throws SQLException {\n                 \"select x.* from t1 x left join t1 y using (a,b,c)\");\n         assertStatementError(NO_COLUMNS, s,\n                 \"select x.* from t1 x right join t1 y using (a,b,c)\");\n+\n+        // DERBY-4410: If X.* expanded to no columns, the result column that\n+        // immediately followed it (Y.*) would not be expanded, which eventually\n+        // resulted in a NullPointerException.\n+        assertStatementError(NO_COLUMNS, s,\n+                \"select x.*, y.* from t1 x inner join t1 y using (a, b, c)\");\n     }\n }",
                "raw_url": "https://github.com/apache/derby/raw/a9ce08817be091aba7d5d542b60f291927303c8b/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java",
                "sha": "1f22b2f6d57a2e5ffedc9eaaec71369239230f43",
                "status": "modified"
            }
        ],
        "message": "DERBY-4410: NullPointerException when USING clause contains all columns in both join tables\n\nAdjust index properly when looping through the result columns and\nexpanding *. The old code didn't expect the number of columns to\ndecrease after the expansion and could therefore potentially skip\nthe processing of some of the columns.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@829034 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/5825a32c736ea1bfaa8a0c1e34361bac4a65a028",
        "patched_files": [
            "ResultColumnList.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "JoinTest.java"
        ]
    },
    "derby_ad15102": {
        "bug_id": "derby_ad15102",
        "commit": "https://github.com/apache/derby/commit/ad15102afe0541a4b1a95f51a60833a2a1dea880",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/derby/blob/ad15102afe0541a4b1a95f51a60833a2a1dea880/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java?ref=ad15102afe0541a4b1a95f51a60833a2a1dea880",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java",
                "patch": "@@ -223,6 +223,11 @@ public static Test suite() {\n      * @return A suite of tests.\n      */\n     private static Test connectionPoolingSuite(String jdbcClient) {\n+        // Return an empty suite if running in JavaME environment.\n+        if (JDBC.vmSupportsJSR169()) {\n+            return new TestSuite(\"Base connection pooling suite:DISABLED\");\n+        }\n+\n         TestSuite baseCpSuite = new TestSuite(\"Base connection pooling suite\");\n         // Add the tests here.\n         baseCpSuite.addTest(new DatabaseMetaDataTest(\"testConnectionSpecific\"));",
                "raw_url": "https://github.com/apache/derby/raw/ad15102afe0541a4b1a95f51a60833a2a1dea880/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java",
                "sha": "84913b1cb58510b41521ac34ed32ffb2f079919b",
                "status": "modified"
            }
        ],
        "message": "DERBY-3685: weme 6.1 Base connection pooling suitejunit.framework.AssertionFailedError: java.lang.NullPointerException.\nThe test causing the failures will no longer be run in a JavaME environment.\nPatch file: derby-3685-1a-disable_test_javame.diff\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@659166 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/58500429d531b30d0f7e5927500ee948deb738ca",
        "patched_files": [
            "DatabaseMetaData.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "DatabaseMetaDataTest.java"
        ]
    },
    "derby_b08f421": {
        "bug_id": "derby_b08f421",
        "commit": "https://github.com/apache/derby/commit/b08f4211aa72f8fa43cb04a12d0258f06e4b461f",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/derby/blob/b08f4211aa72f8fa43cb04a12d0258f06e4b461f/java/engine/org/apache/derby/impl/sql/execute/FKInfo.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/FKInfo.java?ref=b08f4211aa72f8fa43cb04a12d0258f06e4b461f",
                "deletions": 0,
                "filename": "java/engine/org/apache/derby/impl/sql/execute/FKInfo.java",
                "patch": "@@ -291,6 +291,7 @@ public void writeExternal(ObjectOutput out) throws IOException\n \t\tArrayUtil.writeIntArray(out, colArray);\n \t\tArrayUtil.writeIntArray(out, raRules);\n         ArrayUtil.writeBooleanArray(out, deferrable);\n+        ArrayUtil.writeArray(out, fkIds);\n \t}\n \n \t/**\n@@ -334,6 +335,8 @@ public void readExternal(ObjectInput in)\n \t\t\tcolArray = ArrayUtil.readIntArray(in);\n \t\t\traRules = ArrayUtil.readIntArray(in);\n             deferrable = ArrayUtil.readBooleanArray(in);\n+            fkIds = new UUID[ArrayUtil.readArrayLength(in)];\n+            ArrayUtil.readArrayItems(in, fkIds);\n \t\t}\n \t\tcatch (StandardException exception)\n \t\t{",
                "raw_url": "https://github.com/apache/derby/raw/b08f4211aa72f8fa43cb04a12d0258f06e4b461f/java/engine/org/apache/derby/impl/sql/execute/FKInfo.java",
                "sha": "12fa3c59c38c01f68bbd8417aa9bfcfc69845f41",
                "status": "modified"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/derby/blob/b08f4211aa72f8fa43cb04a12d0258f06e4b461f/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java?ref=b08f4211aa72f8fa43cb04a12d0258f06e4b461f",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java",
                "patch": "@@ -65,6 +65,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n     private static final String HAS_DEPENDENT_SPS = \"X0Y24\";\n     private static final String HAS_DEPENDENT_TRIGGER = \"X0Y25\";\n     private static final String TRIGGER_DROPPED = \"01502\";\n+    private static final String FOREIGN_KEY_VIOLATION = \"23503\";\n    \n     /**\n      * Thread local that a trigger can access to\n@@ -2545,4 +2546,31 @@ public void testQualifiedNamesInSystemTables() throws SQLException {\n         //s.execute(\"insert into t1 values (1,2,3)\");\n         s.execute(\"insert into tp_t1 values cast(null as tp)\");\n     }\n+\n+    /**\n+     * Regression test case for DERBY-6663 (NPE when a trigger tries to\n+     * insert into a table with a foreign key).\n+     */\n+    public void testDerby6663() throws SQLException {\n+        setAutoCommit(false);\n+        Statement s = createStatement();\n+        s.execute(\"create table d6663_t1(pk int primary key)\");\n+        s.execute(\"create table d6663_t2(x int references d6663_t1)\");\n+        s.execute(\"create table d6663_t3(y int)\");\n+        s.execute(\"create trigger d6663_tr after insert on d6663_t3 \"\n+                + \"referencing new as new for each row \"\n+                + \"insert into d6663_t2 values new.y\");\n+\n+        // Used to fail with NPE instead of foreign key violation.\n+        assertStatementError(\n+                FOREIGN_KEY_VIOLATION, s, \"insert into d6663_t3 values 1\");\n+\n+        // Verify that trigger executes successfully if there is no\n+        // foreign key violation.\n+        s.execute(\"insert into d6663_t1 values 1\");\n+        s.execute(\"insert into d6663_t3 values 1\");\n+        JDBC.assertSingleValueResultSet(\n+                s.executeQuery(\"select * from d6663_t2\"),\n+                \"1\");\n+    }\n }",
                "raw_url": "https://github.com/apache/derby/raw/b08f4211aa72f8fa43cb04a12d0258f06e4b461f/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java",
                "sha": "22ff332cdc265cc01c3898e94aa7fd0e0b52768b",
                "status": "modified"
            }
        ],
        "message": "DERBY-6663: NPE when a trigger tries to insert into a table with a foreign key\n\nMake sure FKInfo serializes its fkIds field so that the information is\navailable in stored prepared plans too.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1610711 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/f6df18497bba79b6e8d474c0a1b0b7a2a5b7ec69",
        "patched_files": [
            "FKInfo.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "TriggerTest.java"
        ]
    },
    "derby_b2bb8cd": {
        "bug_id": "derby_b2bb8cd",
        "commit": "https://github.com/apache/derby/commit/b2bb8cddf43743787d78bb7844d99625ad645c05",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/derby/blob/b2bb8cddf43743787d78bb7844d99625ad645c05/java/client/org/apache/derby/client/am/CrossConverters.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/am/CrossConverters.java?ref=b2bb8cddf43743787d78bb7844d99625ad645c05",
                "deletions": 1,
                "filename": "java/client/org/apache/derby/client/am/CrossConverters.java",
                "patch": "@@ -807,7 +807,9 @@ final Object setObject(int targetType, java.sql.Clob source) throws SqlException\n     // The Java compiler uses static binding, so we can't rely on the strongly\n     // typed setObject() methods above for each of the Java Object instance types.\n     final Object setObject(int targetType, Object source) throws SqlException {\n-        if (source instanceof Boolean) {\n+        if (source == null) {\n+            return null;\n+        } else if (source instanceof Boolean) {\n             return setObject(targetType, ((Boolean) source).booleanValue());\n         } else if (source instanceof Integer) {\n             return setObject(targetType, ((Integer) source).intValue());",
                "raw_url": "https://github.com/apache/derby/raw/b2bb8cddf43743787d78bb7844d99625ad645c05/java/client/org/apache/derby/client/am/CrossConverters.java",
                "sha": "8defde90d51a21fdf256c39285a955d7b833b45b",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/derby/blob/b2bb8cddf43743787d78bb7844d99625ad645c05/java/client/org/apache/derby/client/am/ResultSet.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/am/ResultSet.java?ref=b2bb8cddf43743787d78bb7844d99625ad645c05",
                "deletions": 1,
                "filename": "java/client/org/apache/derby/client/am/ResultSet.java",
                "patch": "@@ -1413,7 +1413,6 @@ private boolean wasNonNullSensitiveUpdate(int column) {\n     // indicates column has been updated, then column is updated to null.\n     private boolean wasNullSensitiveUpdate(int column) {\n         return\n-                resultSetType_ == java.sql.ResultSet.TYPE_SCROLL_SENSITIVE &&\n                 updatedColumns_ != null &&\n                 updatedColumns_[column - 1] == null &&\n                 columnUpdated_[column - 1];",
                "raw_url": "https://github.com/apache/derby/raw/b2bb8cddf43743787d78bb7844d99625ad645c05/java/client/org/apache/derby/client/am/ResultSet.java",
                "sha": "75a182aef9d92369d44e931a63d15ec7b39db643",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/derby/blob/b2bb8cddf43743787d78bb7844d99625ad645c05/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/jdk14/updatableResultSet.out",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/jdk14/updatableResultSet.out?ref=b2bb8cddf43743787d78bb7844d99625ad645c05",
                "deletions": 34,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/jdk14/updatableResultSet.out",
                "patch": "@@ -2226,9 +2226,7 @@ Next datatype to test is SMALLINT\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is INTEGER\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2273,9 +2271,7 @@ Next datatype to test is INTEGER\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is BIGINT\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2320,9 +2316,7 @@ Next datatype to test is BIGINT\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is DECIMAL(10,5)\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2367,9 +2361,7 @@ Next datatype to test is DECIMAL(10,5)\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is REAL\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2412,9 +2404,7 @@ Next datatype to test is REAL\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is DOUBLE\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2457,9 +2447,7 @@ Next datatype to test is DOUBLE\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is CHAR(60)\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2494,9 +2482,7 @@ Next datatype to test is CHAR(60)\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is VARCHAR(60)\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2531,9 +2517,7 @@ Next datatype to test is VARCHAR(60)\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is LONG VARCHAR\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2568,9 +2552,7 @@ Next datatype to test is LONG VARCHAR\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is CHAR(2) FOR BIT DATA\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'BINARY'.\n@@ -2627,9 +2609,7 @@ Next datatype to test is CHAR(2) FOR BIT DATA\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'BINARY'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is VARCHAR(2) FOR BIT DATA\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'VARBINARY'.\n@@ -2686,9 +2666,7 @@ Next datatype to test is VARCHAR(2) FOR BIT DATA\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'VARBINARY'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is LONG VARCHAR FOR BIT DATA\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'LONGVARBINARY'.\n@@ -2743,9 +2721,7 @@ Next datatype to test is LONG VARCHAR FOR BIT DATA\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'LONGVARBINARY'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is CLOB(1k)\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'CLOB'.\n@@ -2800,9 +2776,7 @@ Next datatype to test is CLOB(1k)\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'CLOB'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is DATE\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'DATE'.\n@@ -2857,9 +2831,7 @@ Next datatype to test is DATE\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'DATE'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is TIME\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'TIME'.\n@@ -2914,9 +2886,7 @@ Next datatype to test is TIME\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'TIME'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is TIMESTAMP\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'TIMESTAMP'.\n@@ -2971,9 +2941,7 @@ Next datatype to test is TIMESTAMP\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'TIMESTAMP'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is BLOB(1k)\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'BLOB'.\n@@ -3028,9 +2996,7 @@ Next datatype to test is BLOB(1k)\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'BLOB'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Positive Test23 - Test cancelRowUpdates after updateXXX methods on all the supported sql datatypes\n   updateShort and then cancelRowUpdates\n   updateInt and then cancelRowUpdates",
                "raw_url": "https://github.com/apache/derby/raw/b2bb8cddf43743787d78bb7844d99625ad645c05/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/jdk14/updatableResultSet.out",
                "sha": "3378a948041b1c05b1bb85697040bf07e19be70a",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/derby/blob/b2bb8cddf43743787d78bb7844d99625ad645c05/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/jdk16/updatableResultSet.out",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/jdk16/updatableResultSet.out?ref=b2bb8cddf43743787d78bb7844d99625ad645c05",
                "deletions": 34,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/jdk16/updatableResultSet.out",
                "patch": "@@ -2226,9 +2226,7 @@ Next datatype to test is SMALLINT\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is INTEGER\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2273,9 +2271,7 @@ Next datatype to test is INTEGER\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is BIGINT\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2320,9 +2316,7 @@ Next datatype to test is BIGINT\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is DECIMAL(10,5)\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2367,9 +2361,7 @@ Next datatype to test is DECIMAL(10,5)\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is REAL\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2412,9 +2404,7 @@ Next datatype to test is REAL\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is DOUBLE\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2457,9 +2447,7 @@ Next datatype to test is DOUBLE\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is CHAR(60)\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2494,9 +2482,7 @@ Next datatype to test is CHAR(60)\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is VARCHAR(60)\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2531,9 +2517,7 @@ Next datatype to test is VARCHAR(60)\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is LONG VARCHAR\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2568,9 +2552,7 @@ Next datatype to test is LONG VARCHAR\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is CHAR(2) FOR BIT DATA\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'BINARY'.\n@@ -2627,9 +2609,7 @@ Next datatype to test is CHAR(2) FOR BIT DATA\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'BINARY'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is VARCHAR(2) FOR BIT DATA\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'VARBINARY'.\n@@ -2686,9 +2666,7 @@ Next datatype to test is VARCHAR(2) FOR BIT DATA\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'VARBINARY'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is LONG VARCHAR FOR BIT DATA\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'LONGVARBINARY'.\n@@ -2743,9 +2721,7 @@ Next datatype to test is LONG VARCHAR FOR BIT DATA\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'LONGVARBINARY'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is CLOB(1k)\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'CLOB'.\n@@ -2800,9 +2776,7 @@ Next datatype to test is CLOB(1k)\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'CLOB'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is DATE\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'DATE'.\n@@ -2857,9 +2831,7 @@ Next datatype to test is DATE\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'DATE'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is TIME\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'TIME'.\n@@ -2914,9 +2886,7 @@ Next datatype to test is TIME\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'TIME'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is TIMESTAMP\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'TIMESTAMP'.\n@@ -2971,9 +2941,7 @@ Next datatype to test is TIMESTAMP\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'TIMESTAMP'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is BLOB(1k)\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'BLOB'.\n@@ -3028,9 +2996,7 @@ Next datatype to test is BLOB(1k)\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'BLOB'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Positive Test23 - Test cancelRowUpdates after updateXXX methods on all the supported sql datatypes\n   updateShort and then cancelRowUpdates\n   updateInt and then cancelRowUpdates",
                "raw_url": "https://github.com/apache/derby/raw/b2bb8cddf43743787d78bb7844d99625ad645c05/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/jdk16/updatableResultSet.out",
                "sha": "0ec4ecc45a81aa24d182f269aca9726e853d109a",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/derby/blob/b2bb8cddf43743787d78bb7844d99625ad645c05/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/updatableResultSet.out",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/updatableResultSet.out?ref=b2bb8cddf43743787d78bb7844d99625ad645c05",
                "deletions": 34,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/updatableResultSet.out",
                "patch": "@@ -2074,9 +2074,7 @@ Next datatype to test is SMALLINT\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is INTEGER\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2113,9 +2111,7 @@ Next datatype to test is INTEGER\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is BIGINT\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2152,9 +2148,7 @@ Next datatype to test is BIGINT\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is DECIMAL(10,5)\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2191,9 +2185,7 @@ Next datatype to test is DECIMAL(10,5)\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is REAL\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2228,9 +2220,7 @@ Next datatype to test is REAL\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is DOUBLE\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2265,9 +2255,7 @@ Next datatype to test is DOUBLE\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is CHAR(60)\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2296,9 +2284,7 @@ Next datatype to test is CHAR(60)\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is VARCHAR(60)\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2327,9 +2313,7 @@ Next datatype to test is VARCHAR(60)\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is LONG VARCHAR\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2358,9 +2342,7 @@ Next datatype to test is LONG VARCHAR\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is CHAR(2) FOR BIT DATA\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'BINARY'.\n@@ -2409,9 +2391,7 @@ Next datatype to test is CHAR(2) FOR BIT DATA\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'BINARY'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is VARCHAR(2) FOR BIT DATA\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'VARBINARY'.\n@@ -2460,9 +2440,7 @@ Next datatype to test is VARCHAR(2) FOR BIT DATA\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'VARBINARY'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is LONG VARCHAR FOR BIT DATA\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'LONGVARBINARY'.\n@@ -2511,9 +2489,7 @@ Next datatype to test is LONG VARCHAR FOR BIT DATA\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'LONGVARBINARY'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is CLOB(1k)\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'CLOB'.\n@@ -2562,9 +2538,7 @@ Next datatype to test is CLOB(1k)\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'CLOB'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is DATE\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'DATE'.\n@@ -2611,9 +2585,7 @@ Next datatype to test is DATE\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'DATE'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is TIME\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'TIME'.\n@@ -2660,9 +2632,7 @@ Next datatype to test is TIME\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'TIME'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is TIMESTAMP\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'TIMESTAMP'.\n@@ -2709,9 +2679,7 @@ Next datatype to test is TIMESTAMP\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'TIMESTAMP'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is BLOB(1k)\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'BLOB'.\n@@ -2760,9 +2728,7 @@ Next datatype to test is BLOB(1k)\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'BLOB'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Positive Test23 - Test cancelRowUpdates after updateXXX methods on all the supported sql datatypes\n   updateShort and then cancelRowUpdates\n   updateInt and then cancelRowUpdates",
                "raw_url": "https://github.com/apache/derby/raw/b2bb8cddf43743787d78bb7844d99625ad645c05/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/updatableResultSet.out",
                "sha": "d5aa86137e80d82c4e4f0f3754e8753dae056cb5",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/derby/blob/b2bb8cddf43743787d78bb7844d99625ad645c05/java/testing/org/apache/derbyTesting/functionTests/suites/DerbyNet.exclude",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/suites/DerbyNet.exclude?ref=b2bb8cddf43743787d78bb7844d99625ad645c05",
                "deletions": 2,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/suites/DerbyNet.exclude",
                "patch": "@@ -35,10 +35,10 @@ jdbcapi/savepointJdbc30_XA.java\n # excluding jdbcapi/derbyStress.java - jcc runs out of memory with this test\n jdbcapi/derbyStress.java\n largedata/LobLimits.java\n-# These next four fail with an error saying that a null username is not \n-# supported. When fixing the username issue, they will fail since the\n+# These next five tests fail since the\n # db2 driver produces statements which Derby cannot compile in \n # ResultSet.updateRow()\n+jdbcapi/UpdateXXXTest.junit\n jdbcapi/SURQueryMixTest.junit\n jdbcapi/SURTest.junit\n jdbcapi/ConcurrencyTest.junit",
                "raw_url": "https://github.com/apache/derby/raw/b2bb8cddf43743787d78bb7844d99625ad645c05/java/testing/org/apache/derbyTesting/functionTests/suites/DerbyNet.exclude",
                "sha": "5e43a64f0cef180edc7a2d51577569b06c16293e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/derby/blob/b2bb8cddf43743787d78bb7844d99625ad645c05/java/testing/org/apache/derbyTesting/functionTests/suites/jdbcapi.runall",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/suites/jdbcapi.runall?ref=b2bb8cddf43743787d78bb7844d99625ad645c05",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/suites/jdbcapi.runall",
                "patch": "@@ -21,5 +21,6 @@ jdbcapi/prepStmtNull.java\n jdbcapi/testRelative.java\n jdbcapi/rsgetXXXcolumnNames.java\n jdbcapi/Stream.java\n+jdbcapi/UpdateXXXTest.junit\n jdbcapi/SURQueryMixTest.junit\n jdbcapi/SURTest.junit",
                "raw_url": "https://github.com/apache/derby/raw/b2bb8cddf43743787d78bb7844d99625ad645c05/java/testing/org/apache/derbyTesting/functionTests/suites/jdbcapi.runall",
                "sha": "bfbe9738f7bd40aef5c03ec786effe72ca98f14a",
                "status": "modified"
            },
            {
                "additions": 347,
                "blob_url": "https://github.com/apache/derby/blob/b2bb8cddf43743787d78bb7844d99625ad645c05/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/UpdateXXXTest.java",
                "changes": 347,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/UpdateXXXTest.java?ref=b2bb8cddf43743787d78bb7844d99625ad645c05",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/UpdateXXXTest.java",
                "patch": "@@ -0,0 +1,347 @@\n+/*\n+ *\n+ * Derby - Class UpdateXXXTest\n+ *\n+ * Copyright 2006 The Apache Software Foundation or its\n+ * licensors, as applicable.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\")\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied. See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ */\n+package org.apache.derbyTesting.functionTests.tests.jdbcapi;\n+\n+import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.PreparedStatement;\n+import java.sql.Statement;\n+import java.sql.Connection;\n+\n+import java.math.BigDecimal;\n+\n+\n+/**\n+ * Tests updateXXX() methods on updatable resultsets.\n+ * This is done by creating a table which has n columns with\n+ * different SQL types. Then there is one testcase for each\n+ * updateXXX method, which calls updateXXX on all columns.\n+ */\n+final public class UpdateXXXTest extends BaseJDBCTestCase\n+{\n+    /**\n+     * Constructor\n+     * @param name name of testcase. Should be the name of test method.\n+     */\n+    public UpdateXXXTest(final String name) {\n+        super(name);\n+    }\n+\n+    /**\n+     * The setup creates a Connection to the database, and also\n+     * creates a table with one row. Then it creates an updatable\n+     * ResultSet which is positioned on the row.\n+     * @exception Exception any exception will cause test to fail with error.\n+     */\n+    public void setUp()\n+        throws Exception\n+    {\n+        try {\n+            con = getConnection();\n+            con.setAutoCommit(false);\n+            \n+            Statement stmt = con.createStatement();\n+            String createTableString = \"CREATE TABLE \" + TABLE_NAME + \" (\" +\n+                \"F01 SMALLINT,\" + \n+                \"F02 INTEGER,\" +\n+                \"F03 BIGINT,\" + \n+                \"F04 REAL,\" +\n+                \"F05 FLOAT,\" +\n+                \"F06 DOUBLE,\" +\n+                \"F07 DECIMAL,\" +\n+                \"F08 NUMERIC,\" +\n+                \"F09 CHAR(100),\" +\n+                \"F10 VARCHAR(256) )\";\n+            println(createTableString);\n+            stmt.executeUpdate(createTableString);\n+            PreparedStatement ps = con.prepareStatement\n+                (\"insert into \" + TABLE_NAME + \" values(?,?,?,?,?,?,?,?,?,?)\");\n+            \n+            ps.setShort(1, (short) 1);\n+            ps.setInt(2, 1);\n+            ps.setLong(3, 1L);\n+            ps.setFloat(4, 1.0f);\n+            ps.setDouble(5, 1.0);\n+            ps.setDouble(6, 1.0);\n+            ps.setBigDecimal(7, BigDecimal.valueOf(1L));\n+            ps.setBigDecimal(8, BigDecimal.valueOf(1L));\n+            ps.setString(9, \"1\");\n+            ps.setString(10, \"1\");\n+            ps.executeUpdate();\n+            \n+            rs = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, \n+                                     ResultSet.CONCUR_UPDATABLE).\n+                executeQuery(SELECT_STMT);\n+            rs.next();\n+        } catch (SQLException e) {\n+            con.rollback();\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Teardown test.\n+     * Rollback connection and close it.\n+     * @exception Exceptions causes the test to fail with error\n+     */\n+    public void tearDown() \n+        throws Exception \n+    {\n+        try { \n+            con.rollback();\n+            con.close();\n+        } catch (SQLException e) {\n+            printStackTrace(e);\n+        }      \n+    }\n+        \n+    /**\n+     * Tests calling updateString on all columns of the row.\n+     * @exception SQLException database access error. Causes test to \n+     *                         fail with an error.\n+     */\n+    public void testUpdateString() \n+        throws SQLException\n+    {\n+        for (int i = 1; i <= COLUMNS; i++) {\n+            rs.updateString(i, \"2\");\n+            assertEquals(\"Expected rs.getDouble(\" + i + \n+                         \") to match updated value\", 2, (int) rs.getDouble(i));\n+        }\n+        rs.updateRow();\n+        checkColumnsAreUpdated();\n+        \n+    }\n+\n+    /**\n+     * Tests calling updateInt on all columns of the row.\n+     * @exception SQLException database access error. Causes test to \n+     *                         fail with an error.\n+     */\n+    public void testUpdateInt() \n+        throws SQLException\n+    {\n+        for (int i = 1; i <= COLUMNS; i++) {\n+            rs.updateInt(i, 2);\n+            assertEquals(\"Expected rs.getInt(\" + i + \n+                         \") to match updated value\", 2, rs.getInt(i));\n+        }\n+        rs.updateRow();\n+        checkColumnsAreUpdated();\n+    }\n+\n+    /**\n+     * Tests calling updateLong on all columns of the row.\n+     * @exception SQLException database access error. Causes test to \n+     *                         fail with an error.\n+     */\n+    public void testUpdateLong() \n+        throws SQLException\n+    {\n+        for (int i = 1; i <= COLUMNS; i++) {\n+            rs.updateLong(i, 2L);\n+            assertEquals(\"Expected rs.getLong(\" + i + \n+                         \") to match updated value\", 2L, rs.getLong(i));\n+        }\n+        rs.updateRow();\n+        checkColumnsAreUpdated();\n+    }\n+\n+    /**\n+     * Tests calling updateShort on all columns of the row.\n+     * @exception SQLException database access error. Causes test to \n+     *                         fail with an error.\n+     */\n+    public void testUpdateShort() \n+        throws SQLException\n+    {\n+        for (int i = 1; i <= COLUMNS; i++) {\n+            rs.updateShort(i, (short) 2);\n+            assertEquals(\"Expected rs.getShort(\" + i + \n+                         \") to match updated value\", 2, (int) rs.getShort(i));\n+        }\n+        rs.updateRow();\n+        checkColumnsAreUpdated();\n+    }\n+    \n+    /**\n+     * Tests calling updateFloat on all columns of the row.\n+     * @exception SQLException database access error. Causes test to \n+     *                         fail with an error.\n+     */\n+    public void testUpdateFloat() \n+        throws SQLException\n+    {\n+        for (int i = 1; i <= COLUMNS; i++) {\n+            rs.updateFloat(i, 2.0f);\n+            assertEquals(\"Expected rs.getFloat(\" + i + \n+                         \") to match updated value\", 2, (int) rs.getFloat(i));\n+        }\n+        rs.updateRow();\n+        checkColumnsAreUpdated();\n+    }\n+    \n+    /**\n+     * Tests calling updateDouble on all columns of the row.\n+     * @exception SQLException database access error. Causes test to \n+     *                         fail with an error.\n+     */\n+    public void testUpdateDouble() \n+        throws SQLException\n+    {\n+        for (int i = 1; i <= COLUMNS; i++) {\n+            rs.updateDouble(i, 2.0);\n+            assertEquals(\"Expected rs.getDouble(\" + i + \n+                         \") to match updated value\", 2, (int) rs.getDouble(i));\n+        }\n+        rs.updateRow();\n+        checkColumnsAreUpdated();\n+    }\n+\n+    /**\n+     * Tests calling update on all columns of the row.\n+     * @exception SQLException database access error. Causes test to \n+     *                         fail with an error.\n+     */\n+    public void testUpdateBigDecimal() \n+        throws SQLException\n+    {\n+        for (int i = 1; i <= COLUMNS; i++) {\n+            rs.updateBigDecimal(i, BigDecimal.valueOf(2L));\n+            assertEquals(\"Expected rs.getBigDecimal(\" + i + \n+                         \") to match updated value\", 2, \n+                         rs.getBigDecimal(i).intValue());\n+        }\n+        rs.updateRow();\n+        checkColumnsAreUpdated();\n+    }\n+    \n+    /**\n+     * Tests calling updateObject with a null value on all columns.\n+     * @exception SQLException database access error. Causes test to \n+     *                         fail with an error.\n+     */\n+    public void testUpdateObjectWithNull() \n+        throws SQLException\n+    {\n+        Object value = null;\n+        \n+        for (int i = 1; i <= COLUMNS; i++) {\n+            rs.updateObject(i, value);\n+            assertNull(\"Expected rs.getObject(\" + i + \") to be null\", \n+                       rs.getObject(i));\n+            assertTrue(\"Expected rs.wasNull() to return true\",\n+                       rs.wasNull());\n+        }\n+        rs.updateRow();\n+        checkColumnsAreNull();\n+    }\n+\n+    /**\n+     * Tests calling setNull on all columns\n+     * @exception SQLException database access error. Causes test to \n+     *                         fail with an error.\n+     */\n+    public void testUpdateNull() \n+        throws SQLException\n+    {\n+        for (int i = 1; i <= COLUMNS; i++) {\n+            rs.updateNull(i);\n+            assertNull(\"Expected rs.getObject(\" + i + \") to be null\", \n+                       rs.getObject(i));\n+            assertTrue(\"Expected rs.wasNull() to return true\",\n+                       rs.wasNull());\n+        }\n+        rs.updateRow();\n+        checkColumnsAreNull();\n+    }\n+\n+    /**\n+     * Checks that the columns in the row are all SQL null.\n+     * @exception SQLException database access error. Causes test to \n+     *                         fail with an error.\n+     */\n+    private void checkColumnsAreNull() \n+        throws SQLException\n+    {\n+        rs.close();\n+        \n+        rs = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, \n+                                 ResultSet.CONCUR_READ_ONLY).\n+            executeQuery(SELECT_STMT);\n+        \n+        rs.next();\n+        \n+        for (int i = 1; i <= COLUMNS; i++) {\n+            assertNull(\"Expected column \" + i + \" to be null\", \n+                       rs.getObject(i));\n+            assertTrue(\"Expected wasNull() after reading column \" + i +\n+                       \" to be true when data is SQL Null on column\", \n+                       rs.wasNull());\n+        }\n+    }\n+\n+    /**\n+     * Checks that the columns in the row are updated in the database.\n+     * Using a new ResultSet to do this check.\n+     * @exception SQLException database access error. Causes test to \n+     *                         fail with an error.\n+     */\n+    private void checkColumnsAreUpdated() \n+        throws SQLException\n+    {\n+        rs.close();\n+        \n+        rs = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, \n+                                 ResultSet.CONCUR_READ_ONLY).\n+            executeQuery(SELECT_STMT);\n+        \n+        rs.next();\n+        for (int i = 1; i <= COLUMNS; i++) {\n+            int expectedVal = 2;\n+            \n+            // Since rs.getInt(i) on CHAR/VARCHAR columns with value 2.0 gives:\n+            // \"ERROR 22018: Invalid character string format for type int\"\n+            // we use getDouble(i). We cast it to int, because there is not\n+            // assertEquals(..) methods which takes double.\n+            int actualVal = (int) rs.getDouble(i); \n+            assertEquals(\"Unexpected value from rs.getDouble( + \" + i + \")\",\n+                         expectedVal, actualVal);\n+        }\n+    }\n+    \n+    /* Updatable ResultSet */\n+    private ResultSet rs = null;\n+    \n+    /* Connection */\n+    private Connection con = null;\n+    \n+    /* Table name */\n+    private static final String TABLE_NAME = \"MultiTypeTable\";\n+\n+    /* SQL String for the SELECT statement */\n+    private static final  String SELECT_STMT = \n+        \"SELECT * FROM \" + TABLE_NAME;\n+                             \n+    /* Number of columns in table */\n+    private static final int COLUMNS = 10;\n+}",
                "raw_url": "https://github.com/apache/derby/raw/b2bb8cddf43743787d78bb7844d99625ad645c05/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/UpdateXXXTest.java",
                "sha": "79e33934a2cd8f9d5973c12e41d65adc4df98dd8",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/derby/blob/b2bb8cddf43743787d78bb7844d99625ad645c05/java/testing/org/apache/derbyTesting/functionTests/tests/lang/updatableResultSet.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/updatableResultSet.java?ref=b2bb8cddf43743787d78bb7844d99625ad645c05",
                "deletions": 6,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/updatableResultSet.java",
                "patch": "@@ -1956,15 +1956,10 @@ else if (updateXXXName == 11){ //update column with updateBytes methods\n \t\t\t\t\t\t\t\t\trs.updateObject(sqlType, null);\n \t\t\t\t\t\t\t\telse //test by passing column name\n \t\t\t\t\t\t\t\t\trs.updateObject(ColumnNames[sqlType-1], null);\n-\t\t\t\t\t\t\t\t} catch (Throwable e) {\n-\t\t\t\t\t\t\t\tif (TestUtil.isNetFramework()) {\n-\t\t\t\t\t\t\t\t\tSystem.out.println(\"   Got expected exception:\" + e.getMessage());\n-\t\t\t\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t} catch (Throwable e) {\t\t\t\t\t\t\t\n \t\t\t\t\t\t\t\t\tSystem.out.println(\"   Got UNexpected exception:\" + e.getMessage());\n \t\t\t\t\t\t\t\t\treturn;\n \t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t} else if (updateXXXName == 20 || updateXXXName == 21) //since Derby does not support Array, Ref datatype, this is a no-op\n \t\t\t\t\t\t\t\t\tcontinue;\n ",
                "raw_url": "https://github.com/apache/derby/raw/b2bb8cddf43743787d78bb7844d99625ad645c05/java/testing/org/apache/derbyTesting/functionTests/tests/lang/updatableResultSet.java",
                "sha": "c18e0ef7337e42777a823dc46b0866c2882d6a83",
                "status": "modified"
            }
        ],
        "message": " DERBY-1177 updateObject with null as argument causes network driver to fail with NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@392236 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/81ff69245caa6b8ca644cd9628d7008b7d10ca00",
        "patched_files": [
            "updatableResultSet.java",
            "jdbcapi.runall",
            "ResultSet.java",
            "DerbyNet.exclude",
            "updatableResultSet.out",
            "CrossConverters.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "UpdateXXXTest.java"
        ]
    },
    "derby_b862050": {
        "bug_id": "derby_b862050",
        "commit": "https://github.com/apache/derby/commit/b862050f562929ba2760f051fa984da04d2750c6",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/derby/blob/b862050f562929ba2760f051fa984da04d2750c6/java/client/org/apache/derby/client/am/Agent.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/am/Agent.java?ref=b862050f562929ba2760f051fa984da04d2750c6",
                "deletions": 5,
                "filename": "java/client/org/apache/derby/client/am/Agent.java",
                "patch": "@@ -267,9 +267,8 @@ final void disconnectEvent() {\n         }\n         connection_.completeChainBreakingDisconnect();\n     }\n-\n-    public void beginWriteChainOutsideUOW() throws SqlException {\n-    }\n+    \n+    abstract public void beginWriteChainOutsideUOW() throws SqlException;\n \n     public void beginWriteChain(ClientStatement statement) throws SqlException {\n         connection_.writeTransactionStart(statement);\n@@ -280,10 +279,10 @@ final void beginBatchedWriteChain(ClientStatement statement)\n         beginWriteChain(statement);\n     }\n \n-    protected void endWriteChain() {\n-    }\n+    abstract protected void endWriteChain();\n \n     private final void endBatchedWriteChain() {\n+        endWriteChain();\n     }\n \n     protected void beginReadChain(ClientStatement statement)",
                "raw_url": "https://github.com/apache/derby/raw/b862050f562929ba2760f051fa984da04d2750c6/java/client/org/apache/derby/client/am/Agent.java",
                "sha": "76c0ae6c53864d6023486a3b18aa3c47c5cb5483",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/derby/blob/b862050f562929ba2760f051fa984da04d2750c6/java/client/org/apache/derby/client/am/BlobLocatorInputStream.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/am/BlobLocatorInputStream.java?ref=b862050f562929ba2760f051fa984da04d2750c6",
                "deletions": 3,
                "filename": "java/client/org/apache/derby/client/am/BlobLocatorInputStream.java",
                "patch": "@@ -179,9 +179,10 @@ public int read(byte[] b, int off, int len) throws IOException\n             currentPos += result.length;\n             return result;       \n         } catch (SqlException ex) {\n-            IOException ioEx = new IOException();\n-            ioEx.initCause(ex);\n-            throw ioEx;\n+            // Passing cause as ctor argument ensures that the IOException \n+            // inherits the cause's message, (unlike invoking initCause() on a \n+            // default-constructed IOException).\n+            throw new IOException(ex);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/derby/raw/b862050f562929ba2760f051fa984da04d2750c6/java/client/org/apache/derby/client/am/BlobLocatorInputStream.java",
                "sha": "a519137bceea8c828b0ed57e19ea2e145f38d3be",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/derby/blob/b862050f562929ba2760f051fa984da04d2750c6/java/client/org/apache/derby/client/am/ClobLocatorInputStream.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/am/ClobLocatorInputStream.java?ref=b862050f562929ba2760f051fa984da04d2750c6",
                "deletions": 3,
                "filename": "java/client/org/apache/derby/client/am/ClobLocatorInputStream.java",
                "patch": "@@ -153,9 +153,10 @@ public int read(byte[] b, int off, int len) throws IOException {\n             currentPos += result.length;\n             return result;\n         } catch (SqlException ex) {\n-            IOException ioEx = new IOException();\n-            ioEx.initCause(ex);\n-            throw ioEx;\n+            // Passing cause as ctor argument ensures that the IOException \n+            // inherits the cause's message, (unlike invoking initCause() on a \n+            // default-constructed IOException).\n+            throw new IOException(ex);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/derby/raw/b862050f562929ba2760f051fa984da04d2750c6/java/client/org/apache/derby/client/am/ClobLocatorInputStream.java",
                "sha": "0e135fc18ce83155f87e6a07a763755715eb289e",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/derby/blob/b862050f562929ba2760f051fa984da04d2750c6/java/client/org/apache/derby/client/am/ClobLocatorReader.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/am/ClobLocatorReader.java?ref=b862050f562929ba2760f051fa984da04d2750c6",
                "deletions": 3,
                "filename": "java/client/org/apache/derby/client/am/ClobLocatorReader.java",
                "patch": "@@ -227,9 +227,10 @@ private void checkClosed() throws IOException {\n             currentPos += result.length;\n             return result;\n         } catch (SqlException ex) {\n-            IOException ioEx = new IOException();\n-            ioEx.initCause(ex);\n-            throw ioEx;\n+            // Passing cause as ctor argument ensures that the IOException \n+            // inherits the cause's message, (unlike invoking initCause() on a \n+            // default-constructed IOException).\n+            throw new IOException(ex);\n         }\n     }\n }",
                "raw_url": "https://github.com/apache/derby/raw/b862050f562929ba2760f051fa984da04d2750c6/java/client/org/apache/derby/client/am/ClobLocatorReader.java",
                "sha": "48043870d1ecb6bdeb2af645ac74440d8e2f9a0f",
                "status": "modified"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/derby/blob/b862050f562929ba2760f051fa984da04d2750c6/java/client/org/apache/derby/client/net/NetAgent.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/net/NetAgent.java?ref=b862050f562929ba2760f051fa984da04d2750c6",
                "deletions": 10,
                "filename": "java/client/org/apache/derby/client/net/NetAgent.java",
                "patch": "@@ -107,6 +107,13 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n     SqlException exceptionOpeningSocket_ = null;\n     SqlException exceptionConvertingRdbnam = null;\n     \n+    /**\n+     * Flag which indicates that a writeChain has been started and data sent to\n+     * the server.\n+     * If true, starting a new write chain will throw a DisconnectException. \n+     * It is cleared when the write chain is ended.\n+     */\n+    private boolean writeChainIsDirty_ = false;\n     //---------------------constructors/finalizer---------------------------------\n \n     // Only used for testing\n@@ -462,23 +469,41 @@ private void writeDeferredResetConnection() throws SqlException {\n             throw de;\n         }\n     }\n-\n+    /**\n+     * Marks the agent's write chain as dirty. A write chain is dirty when data\n+     * from it has been sent to the server. A dirty write chain cannot be reset \n+     * and reused for another request until the remaining data has been sent to\n+     * the server and the write chain properly ended. \n+     * \n+     * Resetting a dirty chain will cause the new request to be appended to the \n+     * unfinished request already at the server, which will likely lead to \n+     * cryptic syntax errors.\n+     */\n+    void markWriteChainAsDirty() {    \n+        writeChainIsDirty_ = true;\n+    }\n+    \n+    private void verifyWriteChainIsClean() throws DisconnectException {\n+        if (writeChainIsDirty_) { \n+            throw new DisconnectException(this, \n+                new ClientMessageId(SQLState.NET_WRITE_CHAIN_IS_DIRTY));\n+        }\n+    }\n     public void beginWriteChainOutsideUOW() throws SqlException {\n+        verifyWriteChainIsClean();\n         request_.initialize();\n         writeDeferredResetConnection();\n-        super.beginWriteChainOutsideUOW();\n     }\n \n     public void beginWriteChain(ClientStatement statement) throws SqlException {\n+        verifyWriteChainIsClean();\n         request_.initialize();\n         writeDeferredResetConnection();\n         super.beginWriteChain(statement);\n     }\n \n-    protected void endWriteChain() {\n-        super.endWriteChain();\n-    }\n-\n+    protected void endWriteChain() {}\n+    \n     private void readDeferredResetConnection() throws SqlException {\n         if (!netConnection_.resetConnectionAtFirstSql_) {\n             return;\n@@ -496,19 +521,19 @@ private void readDeferredResetConnection() throws SqlException {\n \n     protected void beginReadChain(ClientStatement statement)\n             throws SqlException {\n+        // Clear here as endWriteChain may not always be called\n+        writeChainIsDirty_ = false;\n         readDeferredResetConnection();\n         super.beginReadChain(statement);\n     }\n \n     protected void beginReadChainOutsideUOW() throws SqlException {\n+        // Clear here as endWriteChain may not always be called\n+        writeChainIsDirty_ = false;\n         readDeferredResetConnection();\n         super.beginReadChainOutsideUOW();\n     }\n \n-    public void endReadChain() throws SqlException {\n-        super.endReadChain();\n-    }\n-\n     /**\n      * Switches the current CCSID manager to UTF-8\n      */",
                "raw_url": "https://github.com/apache/derby/raw/b862050f562929ba2760f051fa984da04d2750c6/java/client/org/apache/derby/client/net/NetAgent.java",
                "sha": "108a4fa07d0ec6f093ece8b9709d65095a7fbe68",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/derby/blob/b862050f562929ba2760f051fa984da04d2750c6/java/client/org/apache/derby/client/net/Request.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/net/Request.java?ref=b862050f562929ba2760f051fa984da04d2750c6",
                "deletions": 3,
                "filename": "java/client/org/apache/derby/client/net/Request.java",
                "patch": "@@ -41,6 +41,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import java.nio.CharBuffer;\n import java.nio.charset.Charset;\n import java.util.Hashtable;\n+import org.apache.derby.iapi.error.ExceptionUtil;\n \n \n class Request {\n@@ -315,16 +316,36 @@ final private void writePlainScalarStream(boolean chained,\n                 try {\n                     bytesRead =\n                         in.read(buffer.array(), buffer.position(), bytesToRead);\n-                } catch (Exception e) {\n+                } catch (IOException ioe) {\n+                    if (netAgent_.getOutputStream() == null) {\n+                        // The exception has taken down the connection, so we \n+                        // check if it was caused by attempting to \n+                        // read the stream from our own connection...\n+                        for (Throwable t = ioe; t != null; t = t.getCause()) {\n+                            if (t instanceof SqlException\n+                                    && ((SqlException) t).getSQLState().equals(ExceptionUtil.getSQLStateFromIdentifier(SQLState.NET_WRITE_CHAIN_IS_DIRTY))) {\n+                                throw new SqlException(netAgent_.logWriter_,\n+                                        new ClientMessageId(SQLState.NET_LOCATOR_STREAM_PARAMS_NOT_SUPPORTED),\n+                                        ioe, parameterIndex);\n+                            }\n+                        }\n+                        // Something else has killed the connection, fast forward to despair...\n+                        throw new SqlException(netAgent_.logWriter_,\n+                                new ClientMessageId(SQLState.NET_DISCONNECT_EXCEPTION_ON_READ),\n+                                ioe, parameterIndex, ioe.getMessage());\n+                    }\n+                    // The OutPutStream is still intact so try to finish request\n+                    // with what we managed to read\n+\n                     status = DRDAConstants.STREAM_READ_ERROR;\n                     padScalarStreamForError(leftToRead, bytesToRead,\n                             writeEXTDTAStatusByte, status);\n                     // set with SQLSTATE 01004: The value of a string was truncated when assigned to a host variable.\n                     netAgent_.accumulateReadException(\n-                        new SqlException(\n+                            new SqlException(\n                             netAgent_.logWriter_,\n                             new ClientMessageId(SQLState.NET_EXCEPTION_ON_READ),\n-                            e, parameterIndex, e.getMessage()));\n+                            ioe, parameterIndex, ioe.getMessage()));\n \n                     return;\n                 }\n@@ -1176,6 +1197,7 @@ protected void flush(OutputStream socketOutputStream) throws IOException {\n     private void sendBytes(OutputStream socketOutputStream)\n             throws IOException {\n         try {\n+            netAgent_.markWriteChainAsDirty();\n             socketOutputStream.write(buffer.array(), 0, buffer.position());\n             socketOutputStream.flush();\n         } finally {",
                "raw_url": "https://github.com/apache/derby/raw/b862050f562929ba2760f051fa984da04d2750c6/java/client/org/apache/derby/client/net/Request.java",
                "sha": "e51b0e2fb682ae766f2c10ca54101c4bd24d352d",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/derby/blob/b862050f562929ba2760f051fa984da04d2750c6/java/engine/org/apache/derby/loc/messages.xml",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/loc/messages.xml?ref=b862050f562929ba2760f051fa984da04d2750c6",
                "deletions": 0,
                "filename": "java/engine/org/apache/derby/loc/messages.xml",
                "patch": "@@ -5263,6 +5263,23 @@ ln=lower-case two-letter ISO-639 language code, CO=upper-case two-letter ISO-316\n                 <arg>targetClassName</arg>\n             </msg>\n \n+            <msg>\n+                <name>XN022.C</name>\n+                <text>A write chain that has transmitted data to the server cannot be reset until the request is finished and the chain terminated.</text>\n+            </msg>\n+            \n+            <msg>\n+                <name>XN023.C</name>\n+                <text>The stream specified by parameter #{0} is locator-based and requires a nested request on the same connection to be materialized. This is not supported.</text>\n+                <arg>number</arg>\n+            </msg>\n+            \n+            <msg>\n+                <name>XN024.C</name>\n+                <text>Encountered an exception which terminated the connection, while reading from the stream specified by parameter #{0}. The Exception had this message: '{1}'.</text>\n+                <arg>number</arg>\n+                <arg>messageText</arg>\n+            </msg>\n         </family>\n \n ",
                "raw_url": "https://github.com/apache/derby/raw/b862050f562929ba2760f051fa984da04d2750c6/java/engine/org/apache/derby/loc/messages.xml",
                "sha": "63494252d49a0294e053867967e7fb1742c9a438",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/derby/blob/b862050f562929ba2760f051fa984da04d2750c6/java/shared/org/apache/derby/shared/common/reference/SQLState.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/shared/org/apache/derby/shared/common/reference/SQLState.java?ref=b862050f562929ba2760f051fa984da04d2750c6",
                "deletions": 0,
                "filename": "java/shared/org/apache/derby/shared/common/reference/SQLState.java",
                "patch": "@@ -1630,6 +1630,9 @@ The message identifier (ie. the value that matches a field in this class)\n     String NET_XARETVAL_ERROR                                       = \"XN019.S\";\n     String NET_MARSHALLING_UDT_ERROR                     = \"XN020.S\";\n     String NET_UDT_COERCION_ERROR                               = \"XN021.S\";\n+    String NET_WRITE_CHAIN_IS_DIRTY                                 = \"XN022.C\";\n+    String NET_LOCATOR_STREAM_PARAMS_NOT_SUPPORTED                  = \"XN023.C\";\n+    String NET_DISCONNECT_EXCEPTION_ON_READ                         = \"XN024.C\";\n     \n     // XML - Derby-specific XML errors not covered by\n     // SQL standard.",
                "raw_url": "https://github.com/apache/derby/raw/b862050f562929ba2760f051fa984da04d2750c6/java/shared/org/apache/derby/shared/common/reference/SQLState.java",
                "sha": "7a4f39d6f99de3b7e3199687e4df4f45180cac29",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/derby/blob/b862050f562929ba2760f051fa984da04d2750c6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java?ref=b862050f562929ba2760f051fa984da04d2750c6",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java",
                "patch": "@@ -201,6 +201,9 @@ public void test_errorcode() throws Exception\n         \t\t{\"XJ05B\",\"JDBC attribute '{0}' has an invalid value '{1}', valid values are '{2}'.\",\"40000\"},\n         \t\t{\"XJ081\",\"Conflicting create/restore/recovery attributes specified.\",\"40000\"},\n         \t\t{\"XJ213\",\"The traceLevel connection property does not have a valid format for a number.\",\"40000\"},\n+        \t\t{\"XN022\",\"A write chain that has transmitted data to the server cannot be reset until the request is finished and the chain terminated.\",\"40000\"},\n+        \t\t{\"XN023\",\"The stream specified by parameter #{0} is locator-based and requires a nested request on the same connection to be materialized. This is not supported.\",\"40000\"},\n+        \t\t{\"XN024\",\"Encountered an exception which terminated the connection, while reading from the stream specified by parameter #{0}. The Exception had this message: '{1}'.\",\"40000\"},\n         \t\t{\"XRE20\",\"Failover performed successfully for database '{0}', the database has been shutdown.\",\"45000\"},\n         \t\t{\"XSDB0\",\"Unexpected exception on in-memory page {0}\",\"45000\"},\n         \t\t{\"XSDB1\",\"Unknown page format at page {0}\",\"45000\"},",
                "raw_url": "https://github.com/apache/derby/raw/b862050f562929ba2760f051fa984da04d2750c6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java",
                "sha": "5b90325b66dd29b9b692e7e8aa3896ed7638963d",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/derby/blob/b862050f562929ba2760f051fa984da04d2750c6/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java?ref=b862050f562929ba2760f051fa984da04d2750c6",
                "deletions": 12,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java",
                "patch": "@@ -1082,18 +1082,22 @@ private void selectUpdateClob(String testId,\n         long dlen = rs.getLong(2);\n         assertEquals(\"FAIL - MISMATCH LENGTHS GOT \" + l + \" expected \"\n                 + dlen + \" for row in CLOBTBL with ID=\" + id, dlen, l);\n-        // DERBY-5317 cannot use setCharacterStream with value from\n-        // Clob.getCharacterStream because server will try to stream\n-        // lob to and from server at the same time. setClob can be\n-        // used as a work around.\n-        if (!usingDerbyNetClient()) {\n-            PreparedStatement psUpd =\n-                    prepareStatement(\"update CLOBTBL set content=?, \" +\n-                            \"dlen =? where id = ?\");\n-            psUpd.setCharacterStream(1, value.getCharacterStream(), (int) l);\n-            psUpd.setLong(2, l);\n-            psUpd.setInt(3, updateId);\n-\n+                \n+        PreparedStatement psUpd =\n+                prepareStatement(\"update CLOBTBL set content=?, \"\n+                + \"dlen =? where id = ?\");\n+        psUpd.setCharacterStream(1, value.getCharacterStream(), (int) l);\n+        psUpd.setLong(2, l);\n+        psUpd.setInt(3, updateId);\n+        if (usingDerbyNetClient()) {\n+            // DERBY-5317 cannot use setCharacterStream with value from\n+            // Clob.getCharacterStream because server will try to stream\n+            // lob to and from server at the same time. setClob can be\n+            // used as a work around.\n+            // Verify that new error is thrown \n+            assertPreparedStatementError(\"XN023\", psUpd);\n+            return;\n+        } else {\n             assertUpdateCount(psUpd, 1);\n         }\n         commit();",
                "raw_url": "https://github.com/apache/derby/raw/b862050f562929ba2760f051fa984da04d2750c6/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java",
                "sha": "05f57adaa3d6f2e962b7d83b92bafee2cfbb0f9b",
                "status": "modified"
            }
        ],
        "message": "DERBY-5317: Detect attempts to reuse a connection that in the middle of sending a request to the server. Use this to provide a better error message and avoid the NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1530704 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/d76dd28c6619868e332d6eb1a511ba23e2b76014",
        "patched_files": [
            "ClobLocatorReader.java",
            "NetAgent.java",
            "BlobLocatorInputStream.java",
            "ClobLocatorInputStream.java",
            "Agent.java",
            "messages.xml",
            "Request.java",
            "SQLState.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "ErrorCodeTest.java",
            "LobLimitsTest.java"
        ]
    },
    "derby_b8b524c": {
        "bug_id": "derby_b8b524c",
        "commit": "https://github.com/apache/derby/commit/b8b524c00d7736560a43e1eeb7ef1a3f42356843",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/derby/blob/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java?ref=b8b524c00d7736560a43e1eeb7ef1a3f42356843",
                "deletions": 1,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java",
                "patch": "@@ -410,12 +410,15 @@ public void bindStatement() throws StandardException\n \t\t\t/* Now that we've finally goobered stuff up, bind and validate\n \t\t\t * the check constraints and generation clauses.\n \t\t\t */\n-\t\t\tif  (numCheckConstraints > 0) { tableElementList.bindAndValidateCheckConstraints(fromList); }\n \t\t\tif  (numGenerationClauses > 0)\n             { tableElementList.bindAndValidateGenerationClauses( schemaDescriptor, fromList, generatedColumns ); }\n+\t\t\tif  (numCheckConstraints > 0) { tableElementList.bindAndValidateCheckConstraints(fromList); }\n             if ( numReferenceConstraints > 0) { tableElementList.validateForeignKeysOnGenerationClauses( fromList, generatedColumns ); }\n \t\t}\n \n+        // must be done after resolving the datatypes of the generation clauses\n+        if (tableElementList != null) { tableElementList.validatePrimaryKeyNullability(); }\n+\n \t\t//Check if we are in alter table to update the statistics. If yes, then\n \t\t//check if we are here to update the statistics of a specific index. If\n \t\t//yes, then verify that the indexname provided is a valid one.",
                "raw_url": "https://github.com/apache/derby/raw/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java",
                "sha": "430a7c1f8010ea5698018782bb7cbfe071e65d15",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/derby/blob/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java?ref=b8b524c00d7736560a43e1eeb7ef1a3f42356843",
                "deletions": 1,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java",
                "patch": "@@ -438,10 +438,12 @@ public void bindStatement() throws StandardException\n \t\t\t/* Now that we've finally goobered stuff up, bind and validate\n \t\t\t * the check constraints and generation clauses.\n \t\t\t */\n-\t\t\tif  (numCheckConstraints > 0) { tableElementList.bindAndValidateCheckConstraints(fromList); }\n \t\t\tif  (numGenerationClauses > 0) { tableElementList.bindAndValidateGenerationClauses( sd, fromList, generatedColumns ); }\n+\t\t\tif  (numCheckConstraints > 0) { tableElementList.bindAndValidateCheckConstraints(fromList); }\n             if ( numReferenceConstraints > 0) { tableElementList.validateForeignKeysOnGenerationClauses( fromList, generatedColumns ); }\n \t\t}\n+\n+        if ( numPrimaryKeys > 0 ) { tableElementList.validatePrimaryKeyNullability(); }\n \t}\n \n \t/**",
                "raw_url": "https://github.com/apache/derby/raw/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java",
                "sha": "b93005740638d285049a10db7d759015b999dbff",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/derby/blob/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java?ref=b8b524c00d7736560a43e1eeb7ef1a3f42356843",
                "deletions": 2,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java",
                "patch": "@@ -277,6 +277,21 @@ public ResultColumn getOrderByColumn(int position)\n \t */\n \n \tpublic ResultColumn getResultColumn(String columnName)\n+\t{\n+        return getResultColumn( columnName, true );\n+\t}\n+\n+\t/**\n+\t * Get a ResultColumn that matches the specified columnName. If requested\n+\t * to, mark the column as referenced.\n+\t *\n+\t * @param columnName\tThe ResultColumn to get from the list\n+\t * @param markIfReferenced True if we should mark this column as referenced.\n+\t *\n+\t * @return\tthe column that matches that name.\n+\t */\n+\n+\tpublic ResultColumn getResultColumn(String columnName, boolean markIfReferenced )\n \t{\n \t\tint size = size();\n \t\tfor (int index = 0; index < size; index++)\n@@ -285,8 +300,8 @@ public ResultColumn getResultColumn(String columnName)\n \n \t\t\tif (columnName.equals( resultColumn.getName()) )\n \t\t\t{\n-\t\t\t\t/* Mark ResultColumn as referenced and return it */\n-\t\t\t\tresultColumn.setReferenced();\n+                /* Mark ResultColumn as referenced and return it */\n+                if ( markIfReferenced ) { resultColumn.setReferenced(); }\n \t\t\t\treturn resultColumn;\n \t\t\t}\n \t\t}",
                "raw_url": "https://github.com/apache/derby/raw/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java",
                "sha": "be18061bbd3ff51ef8466f9b173083b3b07d36df",
                "status": "modified"
            },
            {
                "additions": 46,
                "blob_url": "https://github.com/apache/derby/blob/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/engine/org/apache/derby/impl/sql/compile/TableElementList.java",
                "changes": 57,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/TableElementList.java?ref=b8b524c00d7736560a43e1eeb7ef1a3f42356843",
                "deletions": 11,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/TableElementList.java",
                "patch": "@@ -344,21 +344,11 @@ else if (destConstraint instanceof ConstraintDescriptor)\n \t\t\t\t}\n \t\t\t}\n \n+            // validation of primary key nullability moved to validatePrimaryKeyNullability().\n             if (cdn.hasPrimaryKeyConstraint())\n             {\n                 // for PRIMARY KEY, check that columns are unique\n                 verifyUniqueColumnList(ddlStmt, cdn);\n-\n-                if (td == null)\n-                {\n-                    // in CREATE TABLE so set PRIMARY KEY columns to NOT NULL\n-                    setColumnListToNotNull(cdn);\n-                }\n-                else\n-                {\n-                    // in ALTER TABLE so raise error if any columns are nullable\n-                    checkForNullColumns(cdn, td);\n-                }\n             }\n             else if (cdn.hasUniqueKeyConstraint())\n             {\n@@ -386,6 +376,44 @@ else if (cdn.hasForeignKeyConstraint())\n \n \t}\n \n+    /**\n+\t * Validate nullability of primary keys. This logic was moved out of the main validate\n+\t * method so that it can be called after binding generation clauses. We need\n+\t * to perform the nullability checks later on because the datatype may be\n+\t * omitted on the generation clause--we can't set/vet the nullability of the\n+\t * datatype until we determine what the datatype is.\n+\t */\n+    public  void    validatePrimaryKeyNullability()\n+        throws StandardException\n+    {\n+\t\tint\t\t\tsize = size();\n+\t\tfor (int index = 0; index < size; index++)\n+\t\t{\n+\t\t\tTableElementNode tableElement = (TableElementNode) elementAt(index);\n+\n+\t\t\tif (! (tableElement.hasConstraint()))\n+\t\t\t{\n+\t\t\t\tcontinue;\n+\t\t\t}\n+            \n+\t\t\tConstraintDefinitionNode cdn = (ConstraintDefinitionNode) tableElement;\n+\n+            if (cdn.hasPrimaryKeyConstraint())\n+            {\n+                if (td == null)\n+                {\n+                    // in CREATE TABLE so set PRIMARY KEY columns to NOT NULL\n+                    setColumnListToNotNull(cdn);\n+                }\n+                else\n+                {\n+                    // in ALTER TABLE so raise error if any columns are nullable\n+                    checkForNullColumns(cdn, td);\n+                }\n+            }\n+        }\n+    }\n+    \n     /**\n \t * Count the number of constraints of the specified type.\n \t *\n@@ -721,6 +749,7 @@ void bindAndValidateGenerationClauses( SchemaDescriptor sd, FromList fromList, F\n \t{\n \t\tCompilerContext cc;\n \t\tFromBaseTable\t\t\t\ttable = (FromBaseTable) fromList.elementAt(0);\n+        ResultColumnList            tableColumns = table.getResultColumns();\n         int                                 columnCount = table.getResultColumns().size();\n \t\tint\t\t\t\t\t\t  size = size();\n \n@@ -787,6 +816,12 @@ void bindAndValidateGenerationClauses( SchemaDescriptor sd, FromList fromList, F\n                 {\n                     cdn.setType( generationClauseType );\n \n+                    //\n+                    // Poke the type into the FromTable so that constraints will\n+                    // compile.\n+                    //\n+                    tableColumns.getResultColumn( cdn.getColumnName(), false ).setType( generationClauseType );\n+\n                     //\n                     // We skipped these steps earlier on because we didn't have\n                     // a datatype. Now that we have a datatype, revisit these",
                "raw_url": "https://github.com/apache/derby/raw/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/engine/org/apache/derby/impl/sql/compile/TableElementList.java",
                "sha": "469badcd3d4c53f231a2ac10558b89e63e6d91a8",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/derby/blob/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj?ref=b8b524c00d7736560a43e1eeb7ef1a3f42356843",
                "deletions": 0,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj",
                "patch": "@@ -12195,6 +12195,10 @@ columnConstraint(TableName constraintName,\n \t\t//throw an exception\n \t\tif (explicitNull) \n                    throw StandardException.newException(SQLState.LANG_ADDING_COLUMN_WITH_NULL_AND_NOT_NULL_CONSTRAINT, columnName); \n+\n+\t\t// columns with generation clauses can omit the datatype\n+\t\tif ( dataTypeDescriptor[0] == null ) { throw StandardException.newException(SQLState.LANG_NOT_NULL_NEEDS_DATATYPE); }\n+\n \t\tdataTypeDescriptor[0] = dataTypeDescriptor[0].getNullabilityType(false);\n \t\treturn null;\n \t}",
                "raw_url": "https://github.com/apache/derby/raw/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj",
                "sha": "f19bfc603bab993dba03eb24e315c5252dcf11c0",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/derby/blob/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/engine/org/apache/derby/loc/messages.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/loc/messages.xml?ref=b8b524c00d7736560a43e1eeb7ef1a3f42356843",
                "deletions": 0,
                "filename": "java/engine/org/apache/derby/loc/messages.xml",
                "patch": "@@ -2031,6 +2031,11 @@ Guide.\n                 <arg>columnName</arg>\n             </msg>\n \n+            <msg>\n+                <name>42XAB</name>\n+                <text>NOT NULL is allowed only if you explicitly declare a datatype.</text>\n+            </msg>\n+\n             <msg>\n                 <name>42Y00</name>\n                 <text>Class '{0}' does not implement org.apache.derby.iapi.db.AggregateDefinition and thus cannot be used as an aggregate expression.</text>",
                "raw_url": "https://github.com/apache/derby/raw/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/engine/org/apache/derby/loc/messages.xml",
                "sha": "ca96a01a990494974a2efb3de23497bd204afdd9",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/derby/blob/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/shared/org/apache/derby/shared/common/reference/SQLState.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/shared/org/apache/derby/shared/common/reference/SQLState.java?ref=b8b524c00d7736560a43e1eeb7ef1a3f42356843",
                "deletions": 0,
                "filename": "java/shared/org/apache/derby/shared/common/reference/SQLState.java",
                "patch": "@@ -905,6 +905,7 @@ The message identifier (ie. the value that matches a field in this class)\n     String LANG_GEN_COL_BAD_RENAME                                           = \"42XA8\";\n     String LANG_NEEDS_DATATYPE                                                      = \"42XA9\";\n     String LANG_GEN_COL_BEFORE_TRIG                                             = \"42XAA\";\n+    String LANG_NOT_NULL_NEEDS_DATATYPE                                    = \"42XAB\";\n \tString LANG_INVALID_USER_AGGREGATE_DEFINITION2                     = \"42Y00\";\n \tString LANG_INVALID_CHECK_CONSTRAINT                               = \"42Y01\";\n \t// String LANG_NO_ALTER_TABLE_COMPRESS_ON_TARGET_TABLE                = \"42Y02\";",
                "raw_url": "https://github.com/apache/derby/raw/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/shared/org/apache/derby/shared/common/reference/SQLState.java",
                "sha": "b1e2bc44843495198e817b4b6429435f1b6d6869",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/derby/blob/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java?ref=b8b524c00d7736560a43e1eeb7ef1a3f42356843",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java",
                "patch": "@@ -57,6 +57,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n     ///////////////////////////////////////////////////////////////////////////////////\n \n     protected static  final   String  REDUNDANT_CLAUSE = \"42613\";\n+    protected static  final   String  CANT_CONTAIN_NULLS = \"42831\";\n     protected static  final   String  ILLEGAL_AGGREGATE = \"42XA1\";\n     protected static  final   String  UNSTABLE_RESULTS = \"42XA2\";\n     protected static  final   String  CANT_OVERRIDE_GENERATION_CLAUSE = \"42XA3\";\n@@ -67,6 +68,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n     protected static  final   String  ILLEGAL_RENAME = \"42XA8\";\n     protected static  final   String  NEED_EXPLICIT_DATATYPE = \"42XA9\";\n     protected static  final   String  BAD_BEFORE_TRIGGER = \"42XAA\";\n+    protected static  final   String  NOT_NULL_NEEDS_DATATYPE = \"42XAB\";\n     \n     protected static  final   String  NOT_NULL_VIOLATION = \"23502\";\n     protected static  final   String  CONSTRAINT_VIOLATION = \"23513\";",
                "raw_url": "https://github.com/apache/derby/raw/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java",
                "sha": "7dc1cd11d82a03769676f02bf15a0faebfa93073",
                "status": "modified"
            },
            {
                "additions": 381,
                "blob_url": "https://github.com/apache/derby/blob/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java",
                "changes": 381,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java?ref=b8b524c00d7736560a43e1eeb7ef1a3f42356843",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java",
                "patch": "@@ -4644,6 +4644,387 @@ public  void    test_026_onDeleteSetNull()\n              );\n     }\n     \n+    /**\n+     * <p>\n+     * Test that we can put constraints on generated columns when we omit the datatype.\n+     * DERBY-3969.\n+     * </p>\n+     */\n+    public  void    test_027_constraintsNoDatatype()\n+        throws Exception\n+    {\n+        Connection  conn = getConnection();\n+\n+        //\n+        // Verify that we can declare check constraints on generated columns\n+        // which omit the datatype.\n+        //\n+        goodStatement\n+            (\n+             conn,\n+             \"create table t_ccnd_1( a int, b generated always as ( -a ) check ( b < 0 ) )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_ccnd_1( a ) values ( 1 )\"\n+             );\n+        expectExecutionError\n+            (\n+             conn,\n+             CONSTRAINT_VIOLATION,\n+             \"insert into t_ccnd_1( a ) values ( -1 )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"alter table t_ccnd_1 add column c generated always as ( -a ) check ( c > -10 )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_ccnd_1( a ) values ( 2 )\"\n+             );\n+        expectExecutionError\n+            (\n+             conn,\n+             CONSTRAINT_VIOLATION,\n+             \"insert into t_ccnd_1( a ) values ( 20 )\"\n+             );\n+        assertResults\n+            (\n+             conn,\n+             \"select * from t_ccnd_1 order by a\",\n+             new String[][]\n+             {\n+                 { \"1\", \"-1\", \"-1\" },\n+                 { \"2\", \"-2\", \"-2\" },\n+             },\n+             false\n+             );\n+\n+        //\n+        // Verify that we can declare foreign keys on generated columns\n+        // which omit the datatype.\n+        //\n+        goodStatement\n+            (\n+             conn,\n+             \"create table t_ccnd_2( b int primary key )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"create table t_ccnd_3( a int, b generated always as ( -a ) references t_ccnd_2( b ) )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"create table t_ccnd_4( a int )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_ccnd_2( b ) values ( 1 )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_ccnd_3( a ) values ( -1 )\"\n+             );\n+        expectExecutionError\n+            (\n+             conn,\n+             FOREIGN_KEY_VIOLATION,\n+             \"insert into t_ccnd_3( a ) values ( -2 )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"alter table t_ccnd_4 add column b generated always as ( -a ) references t_ccnd_2( b )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_ccnd_4( a ) values ( -1 )\"\n+             );\n+        expectExecutionError\n+            (\n+             conn,\n+             FOREIGN_KEY_VIOLATION,\n+             \"insert into t_ccnd_4( a ) values ( -2 )\"\n+             );\n+        assertResults\n+            (\n+             conn,\n+             \"select * from t_ccnd_3 order by a\",\n+             new String[][]\n+             {\n+                 { \"-1\", \"1\", },\n+             },\n+             false\n+             );\n+        assertResults\n+            (\n+             conn,\n+             \"select * from t_ccnd_4 order by a\",\n+             new String[][]\n+             {\n+                 { \"-1\", \"1\", },\n+             },\n+             false\n+             );\n+\n+        //\n+        // Verify that we can declare primary keys on generated columns\n+        // which omit the datatype.\n+        //\n+        goodStatement\n+            (\n+             conn,\n+             \"create table t_ccnd_5( a int, b generated always as ( -a ) primary key )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_ccnd_5( a ) values ( 1 )\"\n+             );\n+        expectExecutionError\n+            (\n+             conn,\n+             ILLEGAL_DUPLICATE,\n+             \"insert into t_ccnd_5( a ) values ( 1 )\"\n+             );\n+        assertResults\n+            (\n+             conn,\n+             \"select * from t_ccnd_5 order by a\",\n+             new String[][]\n+             {\n+                 { \"1\", \"-1\", },\n+             },\n+             false\n+             );\n+        \n+        //\n+        // Verify that you CANNOT declare a generated column to be NOT NULL\n+        // if you omit the datatype.\n+        //\n+        expectCompilationError\n+            (\n+             NOT_NULL_NEEDS_DATATYPE,\n+             \"create table t_ccnd_6( a int, b generated always as ( -a ) not null )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"create table t_ccnd_6( a int )\"\n+             );\n+        expectCompilationError\n+            (\n+             NOT_NULL_NEEDS_DATATYPE,\n+             \"alter table t_ccnd_6 add column b generated always as ( -a ) not null\"\n+             );\n+        \n+        //\n+        // Verify that you CAN declare a generated column to be NOT NULL\n+        // if you include the datatype.\n+        //\n+        goodStatement\n+            (\n+             conn,\n+             \"create table t_ccnd_7( a int, b int generated always as ( -a ) not null )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_ccnd_7( a ) values ( 1 )\"\n+             );\n+        expectExecutionError\n+            (\n+             conn,\n+             NOT_NULL_VIOLATION,\n+             \"insert into t_ccnd_7( a ) values ( null )\"\n+             );\n+        assertResults\n+            (\n+             conn,\n+             \"select * from t_ccnd_7 order by a\",\n+             new String[][]\n+             {\n+                 { \"1\", \"-1\", },\n+             },\n+             false\n+             );\n+        \n+        //\n+        // Verify that we can add generated columns with primary keys\n+        // but only if you include the datatype or if the resolved datatype\n+        // is not nullable.\n+        //\n+        goodStatement\n+            (\n+             conn,\n+             \"create table t_ccnd_8( a int )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"create table t_ccnd_9( a int not null )\"\n+             );\n+        expectCompilationError\n+            (\n+             CANT_CONTAIN_NULLS,\n+             \"alter table t_ccnd_8 add column b generated always as ( -a ) primary key\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"alter table t_ccnd_8 add column b int not null generated always as ( -a ) primary key\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_ccnd_8( a ) values ( 1 )\"\n+             );\n+        expectExecutionError\n+            (\n+             conn,\n+             NOT_NULL_VIOLATION,\n+             \"insert into t_ccnd_8( a ) values ( null )\"\n+             );\n+        expectExecutionError\n+            (\n+             conn,\n+             ILLEGAL_DUPLICATE,\n+             \"insert into t_ccnd_8( a ) values ( 1 )\"\n+             );\n+        assertResults\n+            (\n+             conn,\n+             \"select * from t_ccnd_8 order by a\",\n+             new String[][]\n+             {\n+                 { \"1\", \"-1\", },\n+             },\n+             false\n+             );\n+\n+        goodStatement\n+            (\n+             conn,\n+             \"alter table t_ccnd_9 add column b generated always as ( -a ) primary key\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_ccnd_9( a ) values ( 1 )\"\n+             );\n+        expectExecutionError\n+            (\n+             conn,\n+             ILLEGAL_DUPLICATE,\n+             \"insert into t_ccnd_9( a ) values ( 1 )\"\n+             );\n+        assertResults\n+            (\n+             conn,\n+             \"select * from t_ccnd_9 order by a\",\n+             new String[][]\n+             {\n+                 { \"1\", \"-1\", },\n+             },\n+             false\n+             );\n+        \n+        //\n+        // Verify that we can create generated columns with unique constraints.\n+        //\n+        goodStatement\n+            (\n+             conn,\n+             \"create table t_ccnd_10( a int, b generated always as ( -a ) unique )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"create table t_ccnd_11( a int )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_ccnd_10( a ) values ( 1 )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_ccnd_10( a ) values ( null )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_ccnd_10( a ) values ( null )\"\n+             );\n+        expectExecutionError\n+            (\n+             conn,\n+             ILLEGAL_DUPLICATE,\n+             \"insert into t_ccnd_10( a ) values ( 1 )\"\n+             );\n+        assertResults\n+            (\n+             conn,\n+             \"select * from t_ccnd_10 order by a\",\n+             new String[][]\n+             {\n+                 { \"1\", \"-1\", },\n+                 { null, null, },\n+                 { null, null, },\n+             },\n+             false\n+             );\n+\n+        goodStatement\n+            (\n+             conn,\n+             \"alter table t_ccnd_11 add column b generated always as ( -a ) unique\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_ccnd_11( a ) values ( 1 )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_ccnd_11( a ) values ( null )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_ccnd_11( a ) values ( null )\"\n+             );\n+        expectExecutionError\n+            (\n+             conn,\n+             ILLEGAL_DUPLICATE,\n+             \"insert into t_ccnd_11( a ) values ( 1 )\"\n+             );\n+        assertResults\n+            (\n+             conn,\n+             \"select * from t_ccnd_11 order by a\",\n+             new String[][]\n+             {\n+                 { \"1\", \"-1\", },\n+                 { null, null, },\n+                 { null, null, },\n+             },\n+             false\n+             );\n+\n+    }\n+    \n     ///////////////////////////////////////////////////////////////////////////////////\n     //\n     // MINIONS",
                "raw_url": "https://github.com/apache/derby/raw/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java",
                "sha": "a443e5bb4e754c548ba4699525fa34e3ca6ce615",
                "status": "modified"
            }
        ],
        "message": "DERBY-3969: Fix NPEs when declaring constraints on generated columns without explicit datatypes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@723184 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/dd2650ff3109af94ac8bb87a94c23d700bd4c98c",
        "patched_files": [
            "AlterTableNode.java",
            "CreateTableNode.java",
            "GeneratedColumnsHelper.java",
            "sqlgrammar.jj",
            "messages.xml",
            "ResultColumnList.java",
            "SQLState.java",
            "TableElementList.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "GeneratedColumnsTest.java"
        ]
    },
    "derby_c0091b3": {
        "bug_id": "derby_c0091b3",
        "commit": "https://github.com/apache/derby/commit/c0091b3ff54eebbff592d3c9cf75d58c84031d56",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/derby/blob/c0091b3ff54eebbff592d3c9cf75d58c84031d56/java/testing/org/apache/derbyTesting/functionTests/tests/memory/XAMemTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/memory/XAMemTest.java?ref=c0091b3ff54eebbff592d3c9cf75d58c84031d56",
                "deletions": 1,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/memory/XAMemTest.java",
                "patch": "@@ -30,9 +30,11 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import javax.transaction.xa.Xid;\n \n import junit.framework.Test;\n+import junit.framework.TestSuite;\n \n import org.apache.derbyTesting.junit.BaseJDBCTestCase;\n import org.apache.derbyTesting.junit.J2EEDataSource;\n+import org.apache.derbyTesting.junit.JDBC;\n import org.apache.derbyTesting.junit.TestConfiguration;\n import org.apache.derbyTesting.junit.XATestUtil;\n \n@@ -86,6 +88,10 @@ public void testDerby4137_TransactionTimeoutSpecifiedNotExceeded()\n     }\n \n     public static Test suite() {\n-        return TestConfiguration.defaultSuite(XAMemTest.class);\n+        if (JDBC.vmSupportsJDBC3()) {\n+            return TestConfiguration.defaultSuite(XAMemTest.class);\n+        }\n+\n+        return new TestSuite(\"XAMemTest skipped - XADataSource not available\");\n     }\n }",
                "raw_url": "https://github.com/apache/derby/raw/c0091b3ff54eebbff592d3c9cf75d58c84031d56/java/testing/org/apache/derbyTesting/functionTests/tests/memory/XAMemTest.java",
                "sha": "0af63a2db30474e374f000feeb7621e6e26d26ef",
                "status": "modified"
            }
        ],
        "message": "DERBY-5291: test failure: NullPointerException with J2ME (weme 6.2) in testDerby4137_TransactionTimeoutSpecifiedNotExceeded(org.apache.derbyTesting.functionTests.tests.memory.XAMemTest)\n\nDisabled test case for DERBY-4137 on platforms that don't support XADataSource.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1138341 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/b1043a6ab10c58057ca3678f26536b7674fa13f9",
        "patched_files": [],
        "repo": "derby",
        "unit_tests": [
            "XAMemTest.java"
        ]
    },
    "derby_c617243": {
        "bug_id": "derby_c617243",
        "commit": "https://github.com/apache/derby/commit/c617243586bb6d318633eb5129bfdab6477b9b7f",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/derby/blob/c617243586bb6d318633eb5129bfdab6477b9b7f/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java?ref=c617243586bb6d318633eb5129bfdab6477b9b7f",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java",
                "patch": "@@ -5307,6 +5307,21 @@ public  void    test_031_derby_4413()\n \n     }\n \n+    public void test_derby_4425()\n+        throws Exception\n+    {\n+        Connection conn = getConnection();\n+        goodStatement(conn, \"create table t4425_1(x int)\");\n+        goodStatement(conn, \"create table t4425_2(x int)\");\n+        goodStatement(conn, \"insert into t4425_1 values 1,2\");\n+        goodStatement(conn, \"insert into t4425_2 values 2,3\");\n+        goodStatement(conn, \"create table t4425_3 (x int, \" +\n+                \"y generated always as (2*x))\");\n+        goodStatement(conn, \"insert into t4425_3(x) \" +\n+                \"select * from t4425_1 union select * from t4425_2\");\n+        assertResults(conn, \"select * from t4425_3\",\n+                new String[][] { {\"1\",\"2\"},{\"2\",\"4\"},{\"3\",\"6\"}}, false);\n+    }\n \n     ///////////////////////////////////////////////////////////////////////////////////\n     //",
                "raw_url": "https://github.com/apache/derby/raw/c617243586bb6d318633eb5129bfdab6477b9b7f/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java",
                "sha": "5f91b0cc8cd7e549f6b96a4890977523b0d80a4c",
                "status": "modified"
            }
        ],
        "message": "DERBY-4425: NPE with INSERT .. SELECT .. UNION and generated expressions\n\nThis patch adds a test which confirms that DERBY-4425 is fixed. The code\nchange which resolved DERBY-4425 was performed as part of fixing DERBY-4419,\nsince the same code change fixes both symptoms, so this is a test-only patch.\n\nsubversion revision 831304 contains the DERBY-4419 code change.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@831319 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/6b8ccdd94378fb7211470195b273b41eea6197d9",
        "patched_files": [],
        "repo": "derby",
        "unit_tests": [
            "GeneratedColumnsTest.java"
        ]
    },
    "derby_caa8627": {
        "bug_id": "derby_caa8627",
        "commit": "https://github.com/apache/derby/commit/caa8627c64f6db6769dcdf00dbc6073083111f98",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/derby/blob/caa8627c64f6db6769dcdf00dbc6073083111f98/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java?ref=caa8627c64f6db6769dcdf00dbc6073083111f98",
                "deletions": 1,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java",
                "patch": "@@ -1040,7 +1040,8 @@ public void testDatabaseMetadata() throws SQLException {\n         assertUpdateCount(s , 0 , \"CREATE TABLE SESSION.t3(c31 int, c32 int)\");\n         ResultSet rs1 = databaseMetaData.getTables(\"\", null, \"%\", null);\n         while (rs1.next()) {\n-            if ((\"T2\" == rs1.getString(3)) && (\"SESSION\" == rs1.getString(2)))\n+            if ((\"T2\".equals(rs1.getString(3))) &&\n+                    (\"SESSION\".equals(rs1.getString(2))))\n                 fail(\"Temporary table Found\");\n             count++;\n         }",
                "raw_url": "https://github.com/apache/derby/raw/caa8627c64f6db6769dcdf00dbc6073083111f98/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java",
                "sha": "3c854d990b69232014daf86298c9ce16e3389072",
                "status": "modified"
            }
        ],
        "message": "DERBY-5614: NullPointerException with INSERT INTO [global temporary table] SELECT ... FROM [VTI]\n\nFixed string comparison with == in GTT test.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1294522 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/78b8a9c8b2a30ea0f6e350ffca19df6237efc00a",
        "patched_files": [],
        "repo": "derby",
        "unit_tests": [
            "DeclareGlobalTempTableJavaTest.java"
        ]
    },
    "derby_cb29d72": {
        "bug_id": "derby_cb29d72",
        "commit": "https://github.com/apache/derby/commit/cb29d72648bebee5311134077f2173f5640a247d",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/derby/blob/cb29d72648bebee5311134077f2173f5640a247d/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java?ref=cb29d72648bebee5311134077f2173f5640a247d",
                "deletions": 1,
                "filename": "java/drda/org/apache/derby/impl/drda/DRDAConnThread.java",
                "patch": "@@ -1261,7 +1261,7 @@ private int getConnFromDatabaseName() throws DRDAProtocolException\n         if ((database.securityMechanism == CodePoint.SECMEC_USRSSBPWD) &&\n             (database.dbName.indexOf(Attribute.PASSWORD_ATTR) == -1))\n         {\n-            p.put(Attribute.CLIENT_SECURITY_MECHANISM,\n+            p.put(Attribute.DRDA_SECMEC,\n                   String.valueOf(database.securityMechanism));\n             p.put(Attribute.DRDA_SECTKN_IN,\n                   DecryptionManager.toHexString(database.secTokenIn, 0,",
                "raw_url": "https://github.com/apache/derby/raw/cb29d72648bebee5311134077f2173f5640a247d/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java",
                "sha": "bcae24eaaf94ba800e81eb0af817105417c62892",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/derby/blob/cb29d72648bebee5311134077f2173f5640a247d/java/engine/org/apache/derby/iapi/reference/Attribute.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/iapi/reference/Attribute.java?ref=cb29d72648bebee5311134077f2173f5640a247d",
                "deletions": 0,
                "filename": "java/engine/org/apache/derby/iapi/reference/Attribute.java",
                "patch": "@@ -237,6 +237,15 @@ List of all connection (JDBC) attributes by the system.\n      */\n     String DRDA_SECTKN_IN = \"drdaSecTokenIn\";\n     String DRDA_SECTKN_OUT = \"drdaSecTokenOut\";\n+    /**\n+     * Internal attribute which holds the value of the securityMechanism\n+     * attribute specified by the client. Used for passing information about\n+     * which security mechanism to use from the network server to the embedded\n+     * driver. Use another name than \"securityMechanism\" in order to prevent\n+     * confusion if an attempt is made to establish an embedded connection with\n+     * securityMechanism specified (see DERBY-3025).\n+     */\n+    String DRDA_SECMEC = \"drdaSecMec\";\n \n \t/**\n \t * Internal attribute. Used to always allow soft upgrade for",
                "raw_url": "https://github.com/apache/derby/raw/cb29d72648bebee5311134077f2173f5640a247d/java/engine/org/apache/derby/iapi/reference/Attribute.java",
                "sha": "f9ed5d93d08d5dd182184cf8a6490ef3fd110f1e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/derby/blob/cb29d72648bebee5311134077f2173f5640a247d/java/engine/org/apache/derby/impl/jdbc/authentication/BasicAuthenticationServiceImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/jdbc/authentication/BasicAuthenticationServiceImpl.java?ref=cb29d72648bebee5311134077f2173f5640a247d",
                "deletions": 1,
                "filename": "java/engine/org/apache/derby/impl/jdbc/authentication/BasicAuthenticationServiceImpl.java",
                "patch": "@@ -176,7 +176,7 @@ public boolean\tauthenticateUser(String userName,\n         // assess the substitute password to be legitimate for Derby's\n         // BUILTIN authentication scheme/provider.\n         if ((clientSecurityMechanism =\n-                info.getProperty(Attribute.CLIENT_SECURITY_MECHANISM)) != null)\n+                info.getProperty(Attribute.DRDA_SECMEC)) != null)\n         {\n             secMec = Integer.parseInt(clientSecurityMechanism);\n         }",
                "raw_url": "https://github.com/apache/derby/raw/cb29d72648bebee5311134077f2173f5640a247d/java/engine/org/apache/derby/impl/jdbc/authentication/BasicAuthenticationServiceImpl.java",
                "sha": "e9b4d5093f9f79635030d32a908f8c923d60df58",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/derby/blob/cb29d72648bebee5311134077f2173f5640a247d/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java?ref=cb29d72648bebee5311134077f2173f5640a247d",
                "deletions": 3,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java",
                "patch": "@@ -41,6 +41,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import org.apache.derby.drda.NetworkServerControl;\n \n import org.apache.derbyTesting.junit.BaseJDBCTestCase;\n+import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;\n import org.apache.derbyTesting.junit.J2EEDataSource;\n import org.apache.derbyTesting.junit.JDBCDataSource;\n import org.apache.derbyTesting.junit.NetworkServerTestSetup;\n@@ -173,9 +174,20 @@ public NSSecurityMechanismTest(String name)\n     public static Test suite() \n     {\n         TestSuite suite = new TestSuite(\"NSSecurityMechanismTest\");\n-        suite.addTest(new NSSecurityMechanismTest(\n+\n+        TestSuite clientSuite =\n+            new TestSuite(\"NSSecurityMechanismTest - client\");\n+        clientSuite.addTest(new NSSecurityMechanismTest(\n             \"testNetworkServerSecurityMechanism\"));\n-        return TestConfiguration.clientServerDecorator((suite));\n+        suite.addTest(TestConfiguration.clientServerDecorator(clientSuite));\n+\n+        // Test case for embedded mode. Enable builtin authentication.\n+        suite.addTest(\n+            DatabasePropertyTestSetup.builtinAuthentication(\n+                new NSSecurityMechanismTest(\"testSecurityMechanismOnEmbedded\"),\n+                new String[] { \"calvin\" }, \"pw\"));\n+\n+        return suite;\n     }\n     \n     public void tearDown() throws Exception {\n@@ -368,7 +380,22 @@ else if (derby_drda_securityMechanism.equals(\n             }\n         }\n     }\n-    \n+\n+    /**\n+     * Test that securityMechanism=8 is ignored by the embedded driver\n+     * (DERBY-3025).\n+     */\n+    public void testSecurityMechanismOnEmbedded() throws SQLException {\n+        DataSource ds = JDBCDataSource.getDataSource();\n+        JDBCDataSource.setBeanProperty(\n+            ds, \"connectionAttributes\", \"securityMechanism=8\");\n+\n+        // DERBY-3025: NullPointerException or AssertFailure was thrown here\n+        Connection c = ds.getConnection(\"calvin\", \"calvinpw\");\n+\n+        c.close();\n+    }\n+\n     // returns a boolean true if the security mechanism is not supported\n     // so the loop in which this is called can be continued without\n     // causing unnecessary/impossible tests to be run",
                "raw_url": "https://github.com/apache/derby/raw/cb29d72648bebee5311134077f2173f5640a247d/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java",
                "sha": "767f6d35e885e4ceac0d899f5e35a0c63986cc9a",
                "status": "modified"
            }
        ],
        "message": "DERBY-3025: NPE when connecting to database with securityMechanism=8\n\nUse an internal attribute name when passing security mechanism from\nthe network server to the embedded driver. This prevents confusion if\nan embedded connection is established with securityMechanism specified\n(in which case the security mechanism should be ignored).\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@570663 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/1c0881385de96f5d8fc6558174ea6991217c9924",
        "patched_files": [
            "DRDAConnThread.java",
            "BasicAuthenticationServiceImpl.java",
            "Attribute.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "NSSecurityMechanismTest.java"
        ]
    },
    "derby_cd5717c": {
        "bug_id": "derby_cd5717c",
        "commit": "https://github.com/apache/derby/commit/cd5717c780b8b41031ed25c3efeb4aafcc410b3a",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/derby/blob/cd5717c780b8b41031ed25c3efeb4aafcc410b3a/java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java?ref=cd5717c780b8b41031ed25c3efeb4aafcc410b3a",
                "deletions": 1,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java",
                "patch": "@@ -179,7 +179,6 @@ ValueNode bindExpression(FromList fromList, SubqueryList subqueryList, List<Aggr\n \t\t\tif (((ValueNode) argumentsList.elementAt(index)).requiresTypeFromContext())\n \t\t\t{\n \t\t\t\t((ValueNode)argumentsList.elementAt(index)).setType(getTypeServices());\n-\t\t\t\tbreak;\n \t\t\t}\n \t\t}\n \t\treturn this;",
                "raw_url": "https://github.com/apache/derby/raw/cd5717c780b8b41031ed25c3efeb4aafcc410b3a/java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java",
                "sha": "011774949ef4374799d42519a7a8a7d5449aad71",
                "status": "modified"
            },
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/derby/blob/cd5717c780b8b41031ed25c3efeb4aafcc410b3a/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CoalesceTest.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CoalesceTest.java?ref=cd5717c780b8b41031ed25c3efeb4aafcc410b3a",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/CoalesceTest.java",
                "patch": "@@ -1067,6 +1067,48 @@ public void testPredicateCategorizationDerby4594() throws SQLException {\n                 \"where coalesce(a2, 0) <> 1\"));\n     }\n \n+    /**\n+     * If more than one of the arguments passed to COALESCE are untyped\n+     * parameter markers, compilation used to fail with a NullPointerException.\n+     * Fixed in DERBY-6273.\n+     */\n+    public void testMultipleUntypedParameters() throws SQLException {\n+        // All parameters cannot be untyped. This should still fail.\n+        assertCompileError(\"42610\", \"values coalesce(?,?,?)\");\n+\n+        // But as long as we know the type of one parameter, it should be\n+        // possible to have multiple parameters whose types are determined\n+        // from the context. These queries used to raise NullPointerException\n+        // before DERBY-6273.\n+        vetThreeArgCoalesce(\"values coalesce(cast(? as char(1)), ?, ?)\");\n+        vetThreeArgCoalesce(\"values coalesce(?, cast(? as char(1)), ?)\");\n+        vetThreeArgCoalesce(\"values coalesce(?, ?, cast(? as char(1)))\");\n+    }\n+\n+    private void vetThreeArgCoalesce(String sql) throws SQLException {\n+        // First three values in each row are arguments to COALESCE. The\n+        // last value is the expected return value.\n+        String[][] data = {\n+            {\"a\",  \"b\",  \"c\",  \"a\"},\n+            {null, \"b\",  \"c\",  \"b\"},\n+            {\"a\",  null, \"c\",  \"a\"},\n+            {\"a\",  \"b\",  null, \"a\"},\n+            {null, null, \"c\",  \"c\"},\n+            {\"a\",  null, null, \"a\"},\n+            {null, \"b\",  null, \"b\"},\n+            {null, null, null, null},\n+        };\n+\n+        PreparedStatement ps = prepareStatement(sql);\n+\n+        for (int i = 0; i < data.length; i++) {\n+            ps.setString(1, data[i][0]);\n+            ps.setString(2, data[i][1]);\n+            ps.setString(3, data[i][2]);\n+            JDBC.assertSingleValueResultSet(ps.executeQuery(), data[i][3]);\n+        }\n+    }\n+\n     /**************supporting methods *******************/\n     private void dumpRS(ResultSet rs, String expectedValue) throws SQLException\n     {",
                "raw_url": "https://github.com/apache/derby/raw/cd5717c780b8b41031ed25c3efeb4aafcc410b3a/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CoalesceTest.java",
                "sha": "2fafd79332896bafce3b4f64c5e5ba690cf7cb8f",
                "status": "modified"
            }
        ],
        "message": "DERBY-6273: NullPointerException when using more than one parameter in COALESCE\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1496837 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/434e1655b2c2e96c37880c44e93c5bc94496a1f7",
        "patched_files": [
            "CoalesceFunctionNode.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "CoalesceTest.java"
        ]
    },
    "derby_d32b042": {
        "bug_id": "derby_d32b042",
        "commit": "https://github.com/apache/derby/commit/d32b042dd2b5ad4403988d21310f28d9c0ac2a77",
        "file": [
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/derby/blob/d32b042dd2b5ad4403988d21310f28d9c0ac2a77/java/engine/org/apache/derby/impl/io/DirFile.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/io/DirFile.java?ref=d32b042dd2b5ad4403988d21310f28d9c0ac2a77",
                "deletions": 3,
                "filename": "java/engine/org/apache/derby/impl/io/DirFile.java",
                "patch": "@@ -402,11 +402,21 @@ public boolean renameTo( StorageFile newName)\n      */\n     public boolean deleteAll()\n     {\n-        if( !exists())\n+        // Nothing to do if the file doesn't exist.\n+        if (!exists()) {\n             return false;\n-        if( isDirectory())\n+        }\n+\n+        // If the file is a directory, delete its contents recursively.\n+        // File.list() will return null if it is not a directory, or if the\n+        // contents of the directory cannot be read. Skip the recursive step\n+        // in both of those cases. If it turns out that the file in fact is a\n+        // directory, and we couldn't delete its contents, the delete() call\n+        // at the end of this method will return false to notify the caller\n+        // that the directory could not be deleted.\n+        String[] childList = super.list();\n+        if (childList != null)\n         {\n-            String[] childList = super.list();\n             String parentName = getPath();\n             for( int i = 0; i < childList.length; i++)\n             {\n@@ -417,6 +427,9 @@ public boolean deleteAll()\n                     return false;\n             }\n         }\n+\n+        // Finally, attempt to delete the file (or directory) and return\n+        // whether or not we succeeded.\n         return delete();\n     } // end of deleteAll\n ",
                "raw_url": "https://github.com/apache/derby/raw/d32b042dd2b5ad4403988d21310f28d9c0ac2a77/java/engine/org/apache/derby/impl/io/DirFile.java",
                "sha": "a261c636009a9382d10bf05b92021d6a9c6a53f1",
                "status": "modified"
            },
            {
                "additions": 77,
                "blob_url": "https://github.com/apache/derby/blob/d32b042dd2b5ad4403988d21310f28d9c0ac2a77/java/testing/org/apache/derbyTesting/functionTests/tests/engine/Derby6396Test.java",
                "changes": 77,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/engine/Derby6396Test.java?ref=d32b042dd2b5ad4403988d21310f28d9c0ac2a77",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/engine/Derby6396Test.java",
                "patch": "@@ -0,0 +1,77 @@\n+/*\n+  Class org.apache.derbyTesting.functionTests.tests.engine.Derby6396Test\n+\n+  Licensed to the Apache Software Foundation (ASF) under one or more\n+  contributor license agreements.  See the NOTICE file distributed with\n+  this work for additional information regarding copyright ownership.\n+  The ASF licenses this file to you under the Apache License, Version 2.0\n+  (the \"License\"); you may not use this file except in compliance with\n+  the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+\n+*/\n+\n+package org.apache.derbyTesting.functionTests.tests.engine;\n+\n+import java.io.File;\n+import java.sql.SQLException;\n+import junit.framework.Test;\n+import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;\n+import org.apache.derbyTesting.junit.BaseJDBCTestCase;\n+import org.apache.derbyTesting.junit.TestConfiguration;\n+\n+/**\n+ * Regression test case for DERBY-6396. Verify that booting the database\n+ * does not fail with a NullPointerException if the user lacks read access\n+ * on the temporary directory.\n+ */\n+public class Derby6396Test extends BaseJDBCTestCase {\n+    private File tmpDir;\n+\n+    public Derby6396Test(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        // Use a separate database for this test to reduce the risk of\n+        // interfering with other tests when changing file permissions.\n+        return TestConfiguration.singleUseDatabaseDecorator(\n+                TestConfiguration.embeddedSuite(Derby6396Test.class));\n+    }\n+\n+    @Override\n+    protected void tearDown() throws Exception {\n+        if (tmpDir != null) {\n+            // Reset the permission of the temporary directory so that we\n+            // don't run into problems when dropping the database.\n+            PrivilegedFileOpsForTests.setReadable(tmpDir, true, true);\n+            tmpDir = null;\n+        }\n+        super.tearDown();\n+    }\n+\n+    public void testTempNotReadable() throws SQLException {\n+        final TestConfiguration config = TestConfiguration.getCurrent();\n+\n+        // First make sure the database exists and is not booted.\n+        getConnection().close();\n+        config.shutdownDatabase();\n+\n+        // Now make sure the database has a tmp directory that cannot be read.\n+        tmpDir = new File(\n+            config.getDatabasePath(config.getDefaultDatabaseName()), \"tmp\");\n+        assertTrue(PrivilegedFileOpsForTests.mkdir(tmpDir));\n+        PrivilegedFileOpsForTests.setReadable(tmpDir, false, true);\n+\n+        // Booting the database used to fail with a NullPointerException.\n+        // Should succeed now.\n+        getConnection().close();\n+    }\n+}",
                "raw_url": "https://github.com/apache/derby/raw/d32b042dd2b5ad4403988d21310f28d9c0ac2a77/java/testing/org/apache/derbyTesting/functionTests/tests/engine/Derby6396Test.java",
                "sha": "80748bbecc29cb25afe81503b10c2aa42a84bcfc",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/derby/blob/d32b042dd2b5ad4403988d21310f28d9c0ac2a77/java/testing/org/apache/derbyTesting/functionTests/tests/engine/_Suite.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/engine/_Suite.java?ref=d32b042dd2b5ad4403988d21310f28d9c0ac2a77",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/engine/_Suite.java",
                "patch": "@@ -54,6 +54,7 @@ public static Test suite() throws Exception {\n         suite.addTest(ModuleLoadingTest.suite());\n         suite.addTest(ReadMeFilesTest.suite());\n         suite.addTest(ShutdownWithoutDeregisterPermissionTest.suite());\n+        suite.addTest(Derby6396Test.suite());\n \n         return suite;\n     }",
                "raw_url": "https://github.com/apache/derby/raw/d32b042dd2b5ad4403988d21310f28d9c0ac2a77/java/testing/org/apache/derbyTesting/functionTests/tests/engine/_Suite.java",
                "sha": "6d3e29fb6c3d98b547f94521a66e2fbcc3a81b99",
                "status": "modified"
            },
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/derby/blob/d32b042dd2b5ad4403988d21310f28d9c0ac2a77/java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java?ref=d32b042dd2b5ad4403988d21310f28d9c0ac2a77",
                "deletions": 1,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java",
                "patch": "@@ -161,6 +161,37 @@ public Boolean run() {\n                     });\n     }\n \n+    /**\n+     * Create a directory.\n+     * @param dir the directory to create\n+     * @return {@code true} if and only if the directory was created\n+     */\n+    public static boolean mkdir(final File dir) {\n+        return AccessController.doPrivileged(new PrivilegedAction<Boolean>() {\n+            public Boolean run() {\n+                return dir.mkdir();\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Set the read permission for a file.\n+     * @param file      the file to set the read permission for\n+     * @param readable  {@code true} to allow read, {@code false} to deny it\n+     * @param ownerOnly {@code true} if it should be set for the owner only,\n+     *                  {@code false} if it should be set for everyone\n+     * @return {@code true} if the operation succeeded, {@code false} otherwise\n+     */\n+    public static boolean setReadable(final File file,\n+                                      final boolean readable,\n+                                      final boolean ownerOnly) {\n+        return AccessController.doPrivileged(new PrivilegedAction<Boolean>() {\n+            public Boolean run() {\n+                return file.setReadable(readable, ownerOnly);\n+            }\n+        });\n+    }\n+\n     /**\n      * Obtains a reader for the specified file.\n      *\n@@ -193,7 +224,6 @@ public FileReader run()\n      *\n      * @param file the file to obtain a writer for\n      * @return An writer for the specified file.\n-     * @throws IOException \n      * @throws IOException if the file cannot be opened\n      * @throws SecurityException if the required permissions to write to the file,\n      *      or the path it is in, are missing",
                "raw_url": "https://github.com/apache/derby/raw/d32b042dd2b5ad4403988d21310f28d9c0ac2a77/java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java",
                "sha": "f22f4ca27e273df6b270ab617ae24d323ac17b0d",
                "status": "modified"
            }
        ],
        "message": "DERBY-6396: NullPointerException in DirFile\n\nCheck that the array returned by File.list() is non-null before\nattempting to iterate through it. Null is a valid return value.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1537394 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/1061fd2082258262eccb55c3194a79c28b3bc8cf",
        "patched_files": [
            "_Suite.java",
            "DirFile.java",
            "PrivilegedFileOpsForTests.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "Derby6396Test.java"
        ]
    },
    "derby_d3fbd72": {
        "bug_id": "derby_d3fbd72",
        "commit": "https://github.com/apache/derby/commit/d3fbd72700c8839e8eafb5d4c45049e0a9661549",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/derby/blob/d3fbd72700c8839e8eafb5d4c45049e0a9661549/java/client/org/apache/derby/client/am/SqlWarning.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/am/SqlWarning.java?ref=d3fbd72700c8839e8eafb5d4c45049e0a9661549",
                "deletions": 10,
                "filename": "java/client/org/apache/derby/client/am/SqlWarning.java",
                "patch": "@@ -71,17 +71,9 @@ public SQLWarning getSQLWarning()\n         // Set up the nextException chain\n         if ( nextWarning_ != null )\n         {\n-            // The exception chain gets constructed automatically through \n+            // The warning chain gets constructed automatically through\n             // the beautiful power of recursion\n-            //\n-            // We have to use the right method to convert the next exception\n-            // depending upon its type.  Luckily with all the other subclasses\n-            // of SQLException we don't have to make our own matching \n-            // subclasses because \n-            sqlw.setNextException(\n-                nextException_ instanceof SqlWarning ?\n-                    ((SqlWarning)nextException_).getSQLWarning() :\n-                    nextException_.getSQLException());\n+            sqlw.setNextWarning(nextWarning_.getSQLWarning());\n         }\n         \n         return sqlw;",
                "raw_url": "https://github.com/apache/derby/raw/d3fbd72700c8839e8eafb5d4c45049e0a9661549/java/client/org/apache/derby/client/am/SqlWarning.java",
                "sha": "94349d4d4f87958ba9cfa3a1fa4a6eb808fc2dc1",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/derby/blob/d3fbd72700c8839e8eafb5d4c45049e0a9661549/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java?ref=d3fbd72700c8839e8eafb5d4c45049e0a9661549",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java",
                "patch": "@@ -32,6 +32,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n+import java.sql.SQLWarning;\n import java.sql.Statement;\n import java.sql.Time;\n import java.sql.Timestamp;\n@@ -359,6 +360,38 @@ public void testMultipleStatementsBatch() throws SQLException {\n         commit();\n     }\n \n+    /**\n+     * Regression test case for DERBY-6373.\n+     */\n+    public void testMultipleStatementsBatchWithWarnings() throws SQLException {\n+        Statement s = createStatement();\n+        s.execute(\"insert into t1 values 1\");\n+\n+        // Execute a batch of three deletes. All of them should get a warning\n+        // because no rows matched the WHERE clause.\n+        s.addBatch(\"delete from t1 where c1 in (select 0 from t1)\");\n+        s.addBatch(\"delete from t1 where c1 in (select 0 from t1)\");\n+        s.addBatch(\"delete from t1 where c1 in (select 0 from t1)\");\n+        s.executeBatch();\n+\n+        // Used to fail with NullPointerException on the client.\n+        SQLWarning w = s.getWarnings();\n+\n+        // Expect one warning per delete on the client. Embedded gives only\n+        // a single warning.\n+        assertSQLState(\"02000\", w);\n+        w = w.getNextWarning();\n+        if (usingEmbedded()) {\n+            assertNull(w);\n+        } else {\n+            assertSQLState(\"02000\", w);\n+            w = w.getNextWarning();\n+            assertSQLState(\"02000\", w);\n+            w = w.getNextWarning();\n+            assertNull(w);\n+        }\n+    }\n+\n     // try executing a batch with 1000 statements in it.\n     public void test1000StatementsBatch() throws SQLException {\n         int updateCount[];",
                "raw_url": "https://github.com/apache/derby/raw/d3fbd72700c8839e8eafb5d4c45049e0a9661549/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java",
                "sha": "98c218a1d9702aebabdfdbbed1d358ce3f327b95",
                "status": "modified"
            }
        ],
        "message": "DERBY-6373: NPE in Statement.getWarnings()\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1534523 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/fa6bcd6bd16dc632f764a5570f01157f01f7d36f",
        "patched_files": [
            "SqlWarning.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "BatchUpdateTest.java"
        ]
    },
    "derby_d9a720b": {
        "bug_id": "derby_d9a720b",
        "commit": "https://github.com/apache/derby/commit/d9a720b296eba5fdea4c37ff5d2b15287663b2bd",
        "file": [
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/derby/blob/d9a720b296eba5fdea4c37ff5d2b15287663b2bd/java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java?ref=d9a720b296eba5fdea4c37ff5d2b15287663b2bd",
                "deletions": 18,
                "filename": "java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java",
                "patch": "@@ -150,26 +150,30 @@ private void objectifyStreams(ExecRow row) throws StandardException\n \t\t\t\t\theapIx :\n \t\t\t\t\tbaseRowReadMap[heapIx];\n \n-                \n \t\t\t\tDataValueDescriptor col = row.getColumn(readIx+1);\n-\t\t\t\tInputStream stream = ((StreamStorable)col).returnStream();\n-\t\t\t\t((StreamStorable)col).loadStream();\n-\t\t\t\t// DERBY-3238 \n-\t\t\t\t// fix up any duplicate streams, for instance in the case of an update with a trigger,\n-\t\t\t\t// all the columns are read as update columns even if they are not updated, so \n-\t\t\t\t// the update column will still have a reference to the original stream.\n-\t\t\t\t// If we knew from this context that this was an update and we knew the number\n-\t\t\t\t// of columns in the base table we would be able to calculate exactly the offset to \n-\t\t\t\t// check, but we don't have that information from this context.\n-\t\t\t\t// If DERBY-1482 is fixed, perhaps this code can be removed.\n \t\t\t\t\n-\t\t\t\tif (stream != null)\n-\t\t\t\t\tfor (int i = 1; i <= row.nColumns(); i++)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tDataValueDescriptor c = row.getColumn(i);\n-\t\t\t\t\t\tif (c instanceof StreamStorable)\n-\t\t\t\t\t\t\tif (((StreamStorable)c).returnStream() == stream)\n-\t\t\t\t\t\t\t\trow.setColumn(i, col.cloneValue(false));\n+\t\t\t\t// Derby-4779\n+\t\t\t\tif ( col != null ) {\n+\t\t\t\t\tInputStream stream = ((StreamStorable)col).returnStream();\n+\t\t\t\t\t((StreamStorable)col).loadStream();\n+\n+\t\t\t\t\t// DERBY-3238\n+\t\t\t\t\t// fix up any duplicate streams, for instance in the case of an update with a trigger,\n+\t\t\t\t\t// all the columns are read as update columns even if they are not updated, so \n+\t\t\t\t\t// the update column will still have a reference to the original stream.\n+\t\t\t\t\t// If we knew from this context that this was an update and we knew the number\n+\t\t\t\t\t// of columns in the base table we would be able to calculate exactly the offset to \n+\t\t\t\t\t// check, but we don't have that information from this context.\n+\t\t\t\t\t// If DERBY-1482 is fixed, perhaps this code can be removed.\n+\n+\t\t\t\t\tif (stream != null)\n+\t\t\t\t\t\tfor (int i = 1; i <= row.nColumns(); i++)\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\tDataValueDescriptor c = row.getColumn(i);\n+\t\t\t\t\t\t\tif (c instanceof StreamStorable)\n+\t\t\t\t\t\t\t\tif (((StreamStorable)c).returnStream() == stream)\n+\t\t\t\t\t\t\t\t\trow.setColumn(i, col.cloneValue(false));\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}",
                "raw_url": "https://github.com/apache/derby/raw/d9a720b296eba5fdea4c37ff5d2b15287663b2bd/java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java",
                "sha": "045f190de141e2dfa9499ffbcfb994549aa39ee0",
                "status": "modified"
            },
            {
                "additions": 63,
                "blob_url": "https://github.com/apache/derby/blob/d9a720b296eba5fdea4c37ff5d2b15287663b2bd/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java",
                "changes": 64,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java?ref=d9a720b296eba5fdea4c37ff5d2b15287663b2bd",
                "deletions": 1,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java",
                "patch": "@@ -986,7 +986,7 @@ public  void    test_007_basicTriggers()\n                  { \"before_insert_statement_trigger: [ -1, -1, -1 ]\" },\n                  { \"after_insert_row_trigger: [ 1, -1, null ]\" },\n                  { \"after_insert_row_trigger: [ 2, -2, null ]\" },\n-                 { \"after_insert_row_trigger: [ 3, -3, null ]\" },                                                           \n+                 { \"after_insert_row_trigger: [ 3, -3, null ]\" },\n                  { \"after_insert_statement_trigger: [ -1, -1, -1 ]\" },\n              }\n              );\n@@ -5472,7 +5472,69 @@ public void test_derby_4425()\n                 new String[][] { {\"1\",\"2\"},{\"2\",\"4\"},{\"3\",\"6\"}}, false);\n     }\n \n+    // Derby 4779\n+    public void test_derby_4779()\n+        throws Exception\n+    {\n+    \tConnection conn = getConnection();\n+\n+        goodStatement\n+        (\n+         conn,\n+         \"create function f_getRegion\\n\" +\n+         \"(\\n\" +\n+         \"    v int\\n\" +\n+         \")\\n\" +\n+         \"returns int\\n\" +\n+         \"language java\\n\" +\n+         \"parameter style java\\n\" +\n+         \"deterministic\\n\" +\n+         \"no sql\\n\" +\n+         \"external name 'java.lang.Integer.signum'\\n\"\n+        );\n+\n+        goodStatement\n+        (\n+         conn,\n+         \"create table t1_orders( price int, region generated always as \" +\n+         \"( f_getRegion(price) ) )\\n\"\n+        );\n+        \n+        goodStatement\n+        (\n+         conn,\n+         \"create table t1_dummy(a int)\\n\"\n+        );\n+\n+        goodStatement\n+        (\n+         conn,\n+         \"create trigger t1_trig_after_insert_row_trigger_4779\\n\" +\n+         \"after insert on t1_orders\\n\" +\n+         \"referencing new as ar\\n\" +\n+         \"for each row\\n\" +\n+         \"insert into t1_dummy( a ) values ( 1 )\\n\"\n+        );\n+\n+        goodStatement\n+        (\n+         conn, \n+         \"insert into t1_orders(price) values (1), (2)\"\n+        );\n \n+        assertResults\n+        ( \n+         conn,\n+         \"select a from t1_dummy\",\n+         new String[][]\n+                      {\n+                          { \"1\" },\n+                          { \"1\" }\n+                      },\n+                      false\n+         \n+        );\n+    }\n \n     ///////////////////////////////////////////////////////////////////////////////////\n     //",
                "raw_url": "https://github.com/apache/derby/raw/d9a720b296eba5fdea4c37ff5d2b15287663b2bd/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java",
                "sha": "2c428b22160769d57b076b92641ccd6b5ebeab90",
                "status": "modified"
            }
        ],
        "message": "DERBY-4779: Commit patch contributed by Siddharth Srivastava which eliminates an NPE caused by the interaction of generated columns and triggers.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1140222 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/0f64b702033f94ed87d2edb01ed898e3b247d0b6",
        "patched_files": [
            "DMLWriteResultSet.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "GeneratedColumnsTest.java"
        ]
    },
    "derby_d9dd1e5": {
        "bug_id": "derby_d9dd1e5",
        "commit": "https://github.com/apache/derby/commit/d9dd1e59ca68518bfe4b470b569de8e8588a22b4",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/derby/blob/d9dd1e59ca68518bfe4b470b569de8e8588a22b4/java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java?ref=d9dd1e59ca68518bfe4b470b569de8e8588a22b4",
                "deletions": 1,
                "filename": "java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java",
                "patch": "@@ -1474,7 +1474,23 @@ public Activation getParentActivation() {\n \tprotected final DataValueDescriptor getColumnFromRow(int rsNumber, int colId)\n \t\tthrows StandardException {\n \n-\t\treturn row[rsNumber].getColumn(colId);\n+        if (row[rsNumber] == null) {\n+            /* This actually happens. NoPutResultSetImpl.clearOrderableCache\n+             * attempts to prefetch invariant values into a cache. This fails\n+             * in some deeply nested joins. See Beetle 4736 and 4880.*/\n+\n+            /*\n+             * Update: DERBY-4798 shows a query for which we get an NPE unless\n+             * this escape is in place (once removed by DERBY-3097, but\n+             * reintroduced by DERBY-4798 until we understand how we can get\n+             * rid of this anomaly). Thus, for now,\n+             * OuterJoinTest#testDerby_4798_NPE will provoke an NPE if this\n+             * code is removed.\n+             */\n+            return null;\n+        }\n+\n+        return row[rsNumber].getColumn(colId);\n \t}\n \n     /**",
                "raw_url": "https://github.com/apache/derby/raw/d9dd1e59ca68518bfe4b470b569de8e8588a22b4/java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java",
                "sha": "656b7cd16a33a658d1f77d5ae9634c1c84df6d27",
                "status": "modified"
            },
            {
                "additions": 117,
                "blob_url": "https://github.com/apache/derby/blob/d9dd1e59ca68518bfe4b470b569de8e8588a22b4/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OuterJoinTest.java",
                "changes": 118,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OuterJoinTest.java?ref=d9dd1e59ca68518bfe4b470b569de8e8588a22b4",
                "deletions": 1,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/OuterJoinTest.java",
                "patch": "@@ -35,7 +35,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;\n import org.apache.derbyTesting.junit.RuntimeStatisticsParser;\n import org.apache.derbyTesting.junit.TestConfiguration;\n-import org.apache.derby.iapi.services.sanity.SanityManager;\n \n public final class OuterJoinTest extends BaseJDBCTestCase\n {\n@@ -3379,4 +3378,121 @@ public void testDerby_4712_NPEs() throws Exception\n \n         JDBC.assertFullResultSet(rs, expRS);\n     }\n+\n+\n+    /**\n+     * Test the queries reported in DERBY-4798 as giving null pointer\n+     * exceptions. Should fail with NPE before the fix went in.\n+     */\n+    public void testDerby_4798_NPE() throws Exception\n+    {\n+        setAutoCommit(false);\n+\n+        Statement st = createStatement();\n+        ResultSet rs = null;\n+        String [][] expRS;\n+\n+        st.executeUpdate(\"create table t0(x0 int)\");\n+        st.executeUpdate(\"create table t1(x1 int)\");\n+        st.executeUpdate(\"create table t2(x2 int)\");\n+        st.executeUpdate(\"create table t3(x3 int)\");\n+        st.executeUpdate(\"create table t4(x4 int)\");\n+        st.executeUpdate(\"insert into t4 values(0)\");\n+        st.executeUpdate(\"insert into t4 values(1)\");\n+        st.executeUpdate(\"insert into t4 values(2)\");\n+        st.executeUpdate(\"insert into t4 values(3)\");\n+        st.executeUpdate(\"create table t5(x5 int)\");\n+        st.executeUpdate(\"insert into t5 values(0)\");\n+        st.executeUpdate(\"insert into t5 values(1)\");\n+        st.executeUpdate(\"insert into t5 values(2)\");\n+        st.executeUpdate(\"insert into t5 values(3)\");\n+        st.executeUpdate(\"insert into t5 values(4)\");\n+        st.executeUpdate(\"create table t6(x6 int)\");\n+        st.executeUpdate(\"insert into t6 values(0)\");\n+        st.executeUpdate(\"insert into t6 values(1)\");\n+        st.executeUpdate(\"insert into t6 values(2)\");\n+        st.executeUpdate(\"insert into t6 values(3)\");\n+        st.executeUpdate(\"insert into t6 values(4)\");\n+        st.executeUpdate(\"insert into t6 values(5)\");\n+        st.executeUpdate(\"create table t7(x7 int)\");\n+        st.executeUpdate(\"insert into t7 values(0)\");\n+        st.executeUpdate(\"insert into t7 values(1)\");\n+        st.executeUpdate(\"insert into t7 values(2)\");\n+        st.executeUpdate(\"insert into t7 values(3)\");\n+        st.executeUpdate(\"insert into t7 values(4)\");\n+        st.executeUpdate(\"insert into t7 values(5)\");\n+        st.executeUpdate(\"insert into t7 values(6)\");\n+        st.executeUpdate(\"insert into t0 values(1)\");\n+        st.executeUpdate(\"insert into t1 values(2)\");\n+        st.executeUpdate(\"insert into t0 values(3)\");\n+        st.executeUpdate(\"insert into t1 values(3)\");\n+        st.executeUpdate(\"insert into t2 values(4)\");\n+        st.executeUpdate(\"insert into t0 values(5)\");\n+        st.executeUpdate(\"insert into t2 values(5)\");\n+        st.executeUpdate(\"insert into t1 values(6)\");\n+        st.executeUpdate(\"insert into t2 values(6)\");\n+        st.executeUpdate(\"insert into t0 values(7)\");\n+        st.executeUpdate(\"insert into t1 values(7)\");\n+        st.executeUpdate(\"insert into t2 values(7)\");\n+        st.executeUpdate(\"insert into t3 values(8)\");\n+        st.executeUpdate(\"insert into t0 values(9)\");\n+        st.executeUpdate(\"insert into t3 values(9)\");\n+        st.executeUpdate(\"insert into t1 values(10)\");\n+        st.executeUpdate(\"insert into t3 values(10)\");\n+        st.executeUpdate(\"insert into t0 values(11)\");\n+        st.executeUpdate(\"insert into t1 values(11)\");\n+        st.executeUpdate(\"insert into t3 values(11)\");\n+        st.executeUpdate(\"insert into t2 values(12)\");\n+        st.executeUpdate(\"insert into t3 values(12)\");\n+        st.executeUpdate(\"insert into t0 values(13)\");\n+        st.executeUpdate(\"insert into t2 values(13)\");\n+        st.executeUpdate(\"insert into t3 values(13)\");\n+        st.executeUpdate(\"insert into t1 values(14)\");\n+        st.executeUpdate(\"insert into t2 values(14)\");\n+        st.executeUpdate(\"insert into t3 values(14)\");\n+        st.executeUpdate(\"insert into t0 values(15)\");\n+        st.executeUpdate(\"insert into t1 values(15)\");\n+        st.executeUpdate(\"insert into t2 values(15)\");\n+        st.executeUpdate(\"insert into t3 values(15)\");\n+\n+        rs = st.executeQuery(\n+        \"SELECT t0.x0, \" +\n+        \"       t1.x1,\" +\n+        \"       t2.x2,\" +\n+        \"       t3.x3,\" +\n+        \"       t4.x4,\" +\n+        \"       t5.x5,\" +\n+        \"       t6.x6,\" +\n+        \"       t7.x7 \" +\n+        \"FROM         \" +\n+        \" ((t0                                                               \" +\n+        \"   LEFT OUTER JOIN ((t1                                             \" +\n+        \"                     LEFT OUTER JOIN (t2                            \" +\n+        \"                                      LEFT OUTER JOIN t3            \" +\n+        \"                                        ON t2.x2 = t3.x3 )          \" +\n+        \"                       ON t1.x1 = t2.x2 )                           \" +\n+        \"                    LEFT OUTER JOIN (t4                             \" +\n+        \"                                     INNER JOIN (t5                 \" +\n+        \"                                                 LEFT OUTER JOIN t6 \" +\n+        \"                                                   ON t5.x5 = t6.x6)\" +\n+        \"                                       ON t4.x4 = t5.x5 )           \" +\n+        \"                      ON t1.x1 = t5.x5 )                            \" +\n+        \"     ON t0.x0 = t5.x5 )                                             \" +\n+        \"  LEFT OUTER JOIN t7                                                \" +\n+        \"    ON t3.x3 = t7.x7 )                                              \");\n+\n+        expRS = new String [][]\n+        {\n+            {\"1\", \"1\", null, null, null, null, null, null},\n+            {\"3\", \"3\", \"3\", null, \"3\", \"3\", \"3\", null},\n+            {\"5\", \"5\", null, null, null, null, null, null},\n+            {\"7\", \"7\", null, null, null, null, null, null},\n+            {\"9\", \"9\", null, null, null, null, null, null},\n+            {\"11\", \"11\", null, null, null, null, null, null},\n+            {\"13\", \"13\", null, null, null, null, null, null},\n+            {\"15\", \"15\", null, null, null, null, null, null}\n+        };\n+\n+        JDBC.assertFullResultSet(rs, expRS);\n+    }\n }",
                "raw_url": "https://github.com/apache/derby/raw/d9dd1e59ca68518bfe4b470b569de8e8588a22b4/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OuterJoinTest.java",
                "sha": "58b7d638d848a546deb6422eceb2454b1d84500b",
                "status": "modified"
            }
        ],
        "message": "DERBY-4798 NPE in nested outer join\n\nPatch derby-4798a.\n\nReintroduces the bailout code in BaseActivation#getColumnFromRow which\nwas removed in DERBY-3097 until we understand why it is needed. \n\nAdds the repro for this issue to OuterJoinTest\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@998170 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/ec6fcf1f3b93d7b9d350071632731d67cfe04508",
        "patched_files": [
            "BaseActivation.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "OuterJoinTest.java"
        ]
    },
    "derby_dcd2b04": {
        "bug_id": "derby_dcd2b04",
        "commit": "https://github.com/apache/derby/commit/dcd2b0434d78beea3de4700711cfabebb4f08e54",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/derby/blob/dcd2b0434d78beea3de4700711cfabebb4f08e54/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java?ref=dcd2b0434d78beea3de4700711cfabebb4f08e54",
                "deletions": 5,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/SelectNode.java",
                "patch": "@@ -1604,14 +1604,24 @@ public ResultSetNode genProjectRestrict(int origFromListSize)\n \t\t\t// select c1 from t group by c1, c2\n \t\t\t// we would have added c2 to the projection list which will have to be \n \t\t\t// projected out.\n-\t\t\t\n-\t\t\tResultColumnList newSelectList = prnRSN.getResultColumns().copyListAndObjects(); \n-\t\t\tnewSelectList.removeGeneratedGroupingColumns();\n-\t\t\tnewSelectList.genVirtualColumnNodes(prnRSN, prnRSN.getResultColumns());\n+\t\t\t//\n+\n+\t\t\t// Keep the same RCL on top, since there may be\n+\t\t\t// references to its result columns above us, e.g. in this query:\n+\t\t\t//\n+\t\t\t// select sum(j),i from t group by i having i\n+\t\t\t//             in (select i from t group by i,j )\n+\t\t\t//\n+\t\t\tResultColumnList topList = prnRSN.getResultColumns();\n+\t\t\tResultColumnList newSelectList = topList.copyListAndObjects();\n+\t\t\tprnRSN.setResultColumns(newSelectList);\n+\n+\t\t\ttopList.removeGeneratedGroupingColumns();\n+\t\t\ttopList.genVirtualColumnNodes(prnRSN, newSelectList);\n \t\t\tprnRSN = (ResultSetNode) getNodeFactory().getNode(\n \t\t\t\t\t\tC_NodeTypes.PROJECT_RESTRICT_NODE,\n \t\t\t\t\t\tprnRSN,\n-\t\t\t\t\t\tnewSelectList,\n+\t\t\t\t\t\ttopList,\n \t\t\t\t\t\tnull,\n \t\t\t\t\t\tnull,\n \t\t\t\t\t\tnull,",
                "raw_url": "https://github.com/apache/derby/raw/dcd2b0434d78beea3de4700711cfabebb4f08e54/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java",
                "sha": "b62832b1ad96192ede4c0251a146c6d9b2bc5c85",
                "status": "modified"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/derby/blob/dcd2b0434d78beea3de4700711cfabebb4f08e54/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java?ref=dcd2b0434d78beea3de4700711cfabebb4f08e54",
                "deletions": 1,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "patch": "@@ -2243,4 +2243,31 @@ public void testDerby4071AggregateOnGroupByColumnInHaving() throws SQLException\n          \n          JDBC.assertFullResultSet(rs, new String[][] {{\"4\",\"2\"},{\"5\",\"2\"}});\n     }\n-}\n\\ No newline at end of file\n+\n+    /**\n+     * GROUP BY in an IN-subquery inside HAVING clause whose select list is\n+     * subset of group by columns.\n+     *\n+     * @throws SQLException\n+     */\n+    public void testDerby4450() throws SQLException {\n+        setAutoCommit(false);\n+        Statement s = createStatement();\n+        ResultSet rs;\n+\n+        s.executeUpdate(\n+            \"create table tt(i int not null,\" +\n+            \"               j int, k int)\");\n+        s.executeUpdate(\n+            \"insert into tt values \" +\n+            \"    (1,10,1), (1,40,1),(3,45,1),(4,46,1),(5,90,1)\");\n+\n+        rs = s.executeQuery(\n+            \"select sum(j) from tt group by i having i \" +\n+            \"                     in (select i from tt group by i,j )\");\n+\n+        JDBC.assertFullResultSet(rs, new String[][] {\n+                {\"50\"},{\"45\"},{\"46\"},{\"90\"}});\n+        rollback();\n+    }\n+}",
                "raw_url": "https://github.com/apache/derby/raw/dcd2b0434d78beea3de4700711cfabebb4f08e54/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "sha": "5a35a9d1b0c3a4e4e62bf4e0583889db54ac3f25",
                "status": "modified"
            }
        ],
        "message": "DERBY-4450 GROUP BY in an IN-subquery inside HAVING clause whose select list is subset of group by columns, gives NPE\n\nPatch derby-4450b + Knut's simplification of the autocommit call in GrooupByTest#testDerby4450.\n\nThis solves the problem seen in this issue, which was a regression\nfrom DERBY-681.  The crux of the problem is that a PRN is added in the\nresult set tree without adjusting a higher level reference so that\nwrong code is generated. The solution here is to reuse the result\ncolumn list in the inserted PRN, so that reference from above will\npoint correctly even after the PRN insertion (more details in JIRA).\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@882732 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/fa292b99f0de0c5a1ded9244ce7dbeb4050284be",
        "patched_files": [
            "SelectNode.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "GroupByTest.java"
        ]
    },
    "derby_e9ac824": {
        "bug_id": "derby_e9ac824",
        "commit": "https://github.com/apache/derby/commit/e9ac824113c436a74aa642fc4995071a6c4366cf",
        "file": [
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/derby/blob/e9ac824113c436a74aa642fc4995071a6c4366cf/java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java?ref=e9ac824113c436a74aa642fc4995071a6c4366cf",
                "deletions": 17,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java",
                "patch": "@@ -622,7 +622,25 @@ ValueNode preprocess(int numTables,\n \t\tboolean\t\tflattenable;\n \t\tValueNode\ttopNode = this;\n \n-\t\tresultSet = resultSet.preprocess(numTables, null, (FromList) null);\n+        final boolean haveOrderBy; // need to remember for flattening decision\n+\n+        // Push the order by list down to the ResultSet\n+        if (orderByList != null) {\n+            haveOrderBy = true;\n+            // If we have more than 1 ORDERBY columns, we may be able to\n+            // remove duplicate columns, e.g., \"ORDER BY 1, 1, 2\".\n+            if (orderByList.size() > 1)\n+            {\n+                orderByList.removeDupColumns();\n+            }\n+\n+            resultSet.pushOrderByList(orderByList);\n+            orderByList = null;\n+        } else {\n+            haveOrderBy = false;\n+        }\n+\n+        resultSet = resultSet.preprocess(numTables, null, (FromList) null);\n \n         if (leftOperand != null)\n         {\n@@ -684,7 +702,7 @@ ValueNode preprocess(int numTables,\n \t\t */\n \t\tflattenable = (resultSet instanceof RowResultSetNode) &&\n \t\t\t\t\t  underTopAndNode && !havingSubquery &&\n-                      orderByList == null &&\n+                      !haveOrderBy &&\n                       offset == null &&\n                       fetchFirst == null &&\n \t\t\t\t\t  !isWhereExistsAnyInWithWhereSubquery() &&\n@@ -756,7 +774,7 @@ ValueNode preprocess(int numTables,\n \n \t\tflattenable = (resultSet instanceof SelectNode) &&\n  \t\t\t          !((SelectNode)resultSet).hasWindows() &&\n-                      orderByList == null &&\n+                      !haveOrderBy &&\n                       offset == null &&\n                       fetchFirst == null &&\n \t\t\t\t\t  underTopAndNode && !havingSubquery &&\n@@ -855,20 +873,6 @@ else if ( (isIN() || isANY() || isEXISTS() || flattenableNotExists) &&\n \n         resultSet.pushQueryExpressionSuffix();\n \n-\t\t// Push the order by list down to the ResultSet\n-\t\tif (orderByList != null) {\n-\t\t\t// If we have more than 1 ORDERBY columns, we may be able to\n-\t\t\t// remove duplicate columns, e.g., \"ORDER BY 1, 1, 2\".\n-\t\t\tif (orderByList.size() > 1)\n-\t\t\t{\n-\t\t\t\torderByList.removeDupColumns();\n-\t\t\t}\n-\n-\t\t\tresultSet.pushOrderByList(orderByList);\n-\t\t\torderByList = null;\n-\t\t}\n-\n-\n         resultSet.pushOffsetFetchFirst( offset, fetchFirst, hasJDBClimitClause );\n \n \t\t/* We transform the leftOperand and the select list for quantified ",
                "raw_url": "https://github.com/apache/derby/raw/e9ac824113c436a74aa642fc4995071a6c4366cf/java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java",
                "sha": "04e29e7210099b85e43558c6f2af88ad65f88bef",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/derby/blob/e9ac824113c436a74aa642fc4995071a6c4366cf/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java?ref=e9ac824113c436a74aa642fc4995071a6c4366cf",
                "deletions": 1,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java",
                "patch": "@@ -588,11 +588,37 @@ public void testBasicOperations()\n             \"select * from t4 t_1 join t4 t_2 on \" +\n             \"                     t_1.a = row_number() over () + t_2.a\");\n \n-        // DERBY-6565\n+        // DERBY-6565: NPE before\n         assertStatementError(\n                 LANG_WINDOW_FUNCTION_CONTEXT_ERROR,\n                 s,\n                 \"update t3 set y = y - row_number() over ()\");\n+\n+        // DERBY-6688: subquery using SubqueryNode rather than FromSubquery\n+        // had problems with presence of window function in order by.\n+\n+        JDBC.assertFullResultSet(s.executeQuery(\"select * from t3\"),\n+                new String[][]{{\"4\"},{\"5\"},{\"6\"},{\"7\"},{\"8\"}});\n+\n+        // failed prior to DERBY-6688\n+        s.executeUpdate(\n+            \"update t3 set y = y - \" +\n+            \"    (select y from t3 order by row_number() over () \" +\n+            \"     fetch first 1 row only)\");\n+        JDBC.assertFullResultSet(s.executeQuery(\"select * from t3\"),\n+                new String[][]{{\"0\"},{\"1\"},{\"2\"},{\"3\"},{\"4\"}});\n+\n+        // Used to work before\n+        JDBC.assertFullResultSet(s.executeQuery(\n+            \"select * from  \" +\n+            \"    (select y from t3 order by row_number() over () fetch first 1 row only) tt\"),\n+            new String[][]{{\"0\"}});\n+\n+        // failed prior to DERBY-6688\n+        JDBC.assertFullResultSet(s.executeQuery(\n+            \"select * from t3 where y = \" +\n+                \"    (select y from t3 order by row_number() over () fetch first row only)\"),\n+            new String[][]{{\"0\"}});\n     }\n \n ",
                "raw_url": "https://github.com/apache/derby/raw/e9ac824113c436a74aa642fc4995071a6c4366cf/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java",
                "sha": "c9d88319565f065a80602ea073bcc08522c3c255",
                "status": "modified"
            }
        ],
        "message": "DERBY-6688 NPE (or sane: ASSERT failure) with ROW_NUMBER in some subqueries\n\nIn FromSubquery (used in the OK subquery) the phasing is different\nthan in SubqueryNode (used in the failing query): the order by list is\npushed down too late in the SubqueryNode (after the\nSelectNode#preprocess), so that the fact that the order by carries an\nimplicit window definition isn't recorded, causing the \"windows\" field\nto be null, leading to missing rewriting in the getProjectRestrict\nphase, hence the error.\n\nIn FromSubquery, the order by list is pushed down into the child\nselect node just before calling its preprocess method, i.e. the order\nby list is present what that happens.\n\nThe patch (derby-6688-b) moves the pushing down of the order by list\nin SubqueryNode#preprocess to the resultSet (the SelectNode) to just\nbefore the call to preprocess of the resultSet, so the rest of the\nwindows rewriting machinery kicks in.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1616332 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/4222fe98ddeecbedbca29e6d9a5eddc7bd8de43d",
        "patched_files": [
            "SubqueryNode.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "OLAPTest.java"
        ]
    },
    "derby_ed8967c": {
        "bug_id": "derby_ed8967c",
        "commit": "https://github.com/apache/derby/commit/ed8967c0b5de3bfaacf58d82272ad371571f1624",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/derby/blob/ed8967c0b5de3bfaacf58d82272ad371571f1624/java/engine/org/apache/derby/impl/sql/compile/MergeNode.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/MergeNode.java?ref=ed8967c0b5de3bfaacf58d82272ad371571f1624",
                "deletions": 0,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/MergeNode.java",
                "patch": "@@ -385,6 +385,9 @@ public void bindStatement() throws StandardException\n             FromList    dummyFromList = cloneFromList( dd, dflTarget );\n             FromBaseTable   dummyTargetTable = (FromBaseTable) dummyFromList.elementAt( TARGET_TABLE_INDEX );\n             mcn.bind( dd, this, dummyFromList, dummyTargetTable );\n+\n+            // window function not allowed\n+            SelectNode.checkNoWindowFunctions(mcn, \"matching clause\");\n         }\n         \n         bindLeftJoin( dd );",
                "raw_url": "https://github.com/apache/derby/raw/ed8967c0b5de3bfaacf58d82272ad371571f1624/java/engine/org/apache/derby/impl/sql/compile/MergeNode.java",
                "sha": "16838d8c5e60e07e1ead8285cdc7f06e59bc0aed",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/derby/blob/ed8967c0b5de3bfaacf58d82272ad371571f1624/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java?ref=ed8967c0b5de3bfaacf58d82272ad371571f1624",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java",
                "patch": "@@ -619,6 +619,11 @@ public void testBasicOperations()\n             \"select * from t3 where y = \" +\n                 \"    (select y from t3 order by row_number() over () fetch first row only)\"),\n             new String[][]{{\"0\"}});\n+\n+        // DERBY-6689: NPE before\n+        assertStatementError(LANG_WINDOW_FUNCTION_CONTEXT_ERROR,\n+            s,\n+            \"merge into t2 using t3 on (t2.x=t3.y) when not matched then insert values (row_number() over ())\");\n     }\n \n ",
                "raw_url": "https://github.com/apache/derby/raw/ed8967c0b5de3bfaacf58d82272ad371571f1624/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java",
                "sha": "76492b51437feb267ae7ffeb989043e8f9942de4",
                "status": "modified"
            }
        ],
        "message": "DERBY-6689 Assert failure/NPE when using ROW_NUMBER in MERGE ... INSERT\n\nPatch derby-6689. Adds checking for presence of window functions in\nthe matching clause nodes and throws 42ZC2 is that's the case. Adds a\ntest case.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1616334 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/e9ac824113c436a74aa642fc4995071a6c4366cf",
        "patched_files": [
            "MergeNode.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "OLAPTest.java"
        ]
    },
    "derby_f36770c": {
        "bug_id": "derby_f36770c",
        "commit": "https://github.com/apache/derby/commit/f36770cc9888fde309c606859a2993c32a15364f",
        "file": [
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/derby/blob/f36770cc9888fde309c606859a2993c32a15364f/java/engine/org/apache/derby/impl/sql/compile/IndexToBaseRowNode.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/IndexToBaseRowNode.java?ref=f36770cc9888fde309c606859a2993c32a15364f",
                "deletions": 0,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/IndexToBaseRowNode.java",
                "patch": "@@ -27,6 +27,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import org.apache.derby.iapi.sql.compile.CostEstimate;\n import org.apache.derby.iapi.sql.compile.Optimizable;\n import org.apache.derby.iapi.sql.compile.RequiredRowOrdering;\n+import org.apache.derby.iapi.sql.compile.Visitable;\n+import org.apache.derby.iapi.sql.compile.Visitor;\n \n import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;\n \n@@ -409,4 +411,30 @@ void adjustForSortElimination(RequiredRowOrdering rowOrdering)\n \t\treturn indexColMapping;\n \t}\n \n+\t/**\n+\t * Accept a visitor, and call v.visit()\n+\t * on child nodes as necessary.  \n+\t * \n+\t * @param v the visitor\n+\t *\n+\t * @exception StandardException on error\n+\t */\n+\tpublic Visitable accept(Visitor v) \n+\t\tthrows StandardException\n+\t{\n+\t\tif (v.skipChildren(this))\n+\t\t{\n+\t\t\treturn v.visit(this);\n+\t\t}\n+\n+\t\tVisitable returnNode = super.accept(v);\n+\n+\t\tif (source != null && !v.stopTraversal())\n+\t\t{\n+\t\t\tsource = (FromBaseTable)source.accept(v);\n+\t\t}\n+\n+\t\treturn returnNode;\n+\t}\n+\n }",
                "raw_url": "https://github.com/apache/derby/raw/f36770cc9888fde309c606859a2993c32a15364f/java/engine/org/apache/derby/impl/sql/compile/IndexToBaseRowNode.java",
                "sha": "1ce4433c87663c21c8f9703d865f2198930c48c4",
                "status": "modified"
            },
            {
                "additions": 43,
                "blob_url": "https://github.com/apache/derby/blob/f36770cc9888fde309c606859a2993c32a15364f/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java?ref=f36770cc9888fde309c606859a2993c32a15364f",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "patch": "@@ -242,6 +242,28 @@ private static void createSchemaObjects(Statement st)\n         st.executeUpdate(\n             \"insert into tab1 select i, s, l, c, v, lvc, d, r, \"\n             + \"dt, t, ts from t\");\n+        \n+        //Following setup is for DERBY-3872\n+        st.executeUpdate(\n+        \t\t\"CREATE TABLE EMPTAB (EMPID INTEGER NOT NULL, \"\n+        \t\t+ \"SALARY DECIMAL(10, 4), DEPT_DEPTNO INTEGER)\"); \n+\n+        st.executeUpdate(\n+        \t\t\"ALTER TABLE EMPTAB ADD CONSTRAINT \" +\n+        \t\t\"PK_EMPTAB PRIMARY KEY (EMPID)\"); \n+\n+        st.executeUpdate(\n+        \t\t\"CREATE TABLE DEPTTAB (DEPTNO INTEGER NOT NULL)\");\n+\n+      st.executeUpdate(\n+    \t\t  \"ALTER TABLE DEPTTAB ADD CONSTRAINT \"+\n+    \t\t  \"PK_DEPTTAB PRIMARY KEY (DEPTNO)\");\n+\n+      st.executeUpdate(\n+    \t\t  \"insert into DEPTTAB values( 1 )\");\n+\n+      st.executeUpdate(\n+    \t\t  \"insert into EMPTAB values( 1, 1000, 1 )\"); \n \t}\n \n \t/**\n@@ -1087,6 +1109,27 @@ public void testHavingClauseInSubquery()\n             {\"0\", \"1992-09-09\", \"0\", \"1992-09-09\"}\n         };\n         \n+        JDBC.assertFullResultSet(rs, expRS, true);\n+\n+        //Test case for DERBY-3872 Prior to fix for DERBY-3872, following\n+        //query resulted in NPE because of missing chain of\n+        //VirtualColumn-to-ResultColumn nodes for the where clause in\n+        //the HAVING clause. The reason for this that we didn't overwrite \n+        //the method \"accept()\" in IndexToBaseRowNode. This missing code\n+        //caused Derby to associate the ResultColumn for the HAVING\n+        //clause incorrectly with the ResultColumn used for the join\n+        //clause. More info can be found in the jira\n+        rs = st.executeQuery(\n+        \t\t\"select  q1.DEPTNO from DEPTTAB q1, EMPTAB q2 where \"+ \n+        \t\t\"( integer (1.1) = 1)  and  ( q2.DEPT_DEPTNO = q1.DEPTNO) \"+\n+        \t\t\" GROUP BY q1.DEPTNO HAVING  max( q2.SALARY) >=  \"+\n+        \t\t\"( select  q3.SALARY from EMPTAB q3 where  \"+\n+        \t\t\"(q3.EMPID =  q1.DEPTNO) )\");\n+        \n+        expRS = new String [][]\n+        {\n+            {\"1\"}\n+        };\n         JDBC.assertFullResultSet(rs, expRS, true);\n \t\tst.close();\n \t}",
                "raw_url": "https://github.com/apache/derby/raw/f36770cc9888fde309c606859a2993c32a15364f/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "sha": "274b276ce103c18ddb0d28b50b55f3e17f73e3f9",
                "status": "modified"
            }
        ],
        "message": "DERBY-3872\n\nThe NPE in this jira entry was caused by the missing overwrite of accept() method in IndexToBaseRowNode.\nBecause of the missing code, the additional layer of VirtualColumn node over ResultColumn was not \nhappening for the where clause in HAVING. Once the accept method was added to IndexToBaseRowNode, the\nVirtualColumn on top of the ResultColumn got the correct resultset number associated with it and at the\ncode generation time, we start referencing the correct resultset rather than the one associated with\nthe JOIN clause. Thanks a ton to Army and Bryan on this jira entry for their help.\n\nI have added a test case for this in lang/GroupByTest.java\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@705037 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/d7731394ae0f07b3946972d26600320b6ac3ab89",
        "patched_files": [
            "IndexToBaseRowNode.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "GroupByTest.java"
        ]
    },
    "derby_f8d48a3": {
        "bug_id": "derby_f8d48a3",
        "commit": "https://github.com/apache/derby/commit/f8d48a3ce3cc2fb95b92cbfa7da4d98d39d4a271",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/derby/blob/f8d48a3ce3cc2fb95b92cbfa7da4d98d39d4a271/java/engine/org/apache/derby/impl/sql/compile/BetweenOperatorNode.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/BetweenOperatorNode.java?ref=f8d48a3ce3cc2fb95b92cbfa7da4d98d39d4a271",
                "deletions": 1,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/BetweenOperatorNode.java",
                "patch": "@@ -127,11 +127,17 @@ ValueNode eliminateNots(boolean underNotNode)\n \t\t/* Set type info for the operator node */\n \t\tleftBCO.bindComparisonOperator();\n \n+        // DERBY-4388: If leftOperand is a ColumnReference, it may be remapped\n+        // during optimization, and that requires the less-than node and the\n+        // greater-than node to have separate objects.\n+        ValueNode leftClone = (leftOperand instanceof ColumnReference) ?\n+            leftOperand.getClone() : leftOperand;\n+\n \t\t/* leftO > rightOList.elementAt(1) */\n \t\trightBCO = (BinaryComparisonOperatorNode) \n \t\t\t\t\tnodeFactory.getNode(\n \t\t\t\t\t\t\t\tC_NodeTypes.BINARY_GREATER_THAN_OPERATOR_NODE,\n-\t\t\t\t\t\t\t\tleftOperand, \n+\t\t\t\t\t\t\t\tleftClone,\n \t\t\t\t\t\t\t\trightOperandList.elementAt(1),\n \t\t\t\t\t\t\t\tcm);\n \t\t/* Set type info for the operator node */",
                "raw_url": "https://github.com/apache/derby/raw/f8d48a3ce3cc2fb95b92cbfa7da4d98d39d4a271/java/engine/org/apache/derby/impl/sql/compile/BetweenOperatorNode.java",
                "sha": "e502904b6f8d5d75f20f6253b3828403b214ff39",
                "status": "modified"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/derby/blob/f8d48a3ce3cc2fb95b92cbfa7da4d98d39d4a271/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InbetweenTest.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InbetweenTest.java?ref=f8d48a3ce3cc2fb95b92cbfa7da4d98d39d4a271",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/InbetweenTest.java",
                "patch": "@@ -4501,4 +4501,27 @@ public void testReproductionBeetle5135() throws SQLException{\n         conn.rollback();\n         st.close();\n     }\n+\n+    /**\n+     * Regression test cases for DERBY-4388, where the not elimination in\n+     * BetweenOperatorNode could make column references point to the wrong\n+     * result sets after optimization, causing NullPointerExceptions.\n+     */\n+    public void testDerby4388NotElimination() throws SQLException {\n+        setAutoCommit(false); // for easy cleanup with rollback() in tearDown()\n+        Statement s = createStatement();\n+        s.execute(\"create table d4388_t1(a int)\");\n+        s.execute(\"create table d4388_t2(b int)\");\n+        s.execute(\"insert into d4388_t1 values 0,1,2,3,4,5,6\");\n+        s.execute(\"insert into d4388_t2 values 0,1,2,3\");\n+        // The queries below used to cause NullPointerException.\n+        JDBC.assertFullResultSet(\n+                s.executeQuery(\"select * from d4388_t1 left join d4388_t2 \" +\n+                               \"on a=b where b not between 1 and 5\"),\n+                new String[][]{{\"0\", \"0\"}});\n+        JDBC.assertFullResultSet(\n+                s.executeQuery(\"select * from d4388_t2 right join d4388_t1 \" +\n+                               \"on a=b where b not between 1 and 5\"),\n+                new String[][]{{\"0\", \"0\"}});\n+    }\n }",
                "raw_url": "https://github.com/apache/derby/raw/f8d48a3ce3cc2fb95b92cbfa7da4d98d39d4a271/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InbetweenTest.java",
                "sha": "814ddd35b48ac823f09b53fcfb52b72b87bdc84e",
                "status": "modified"
            }
        ],
        "message": "DERBY-4388: NullPointerException in RIGHT JOIN with NOT BETWEEN\n\nClone the left operand when performing not-elimination in\nBetweenOperatorNode to prevent ColumnReferences from being shared, as\nthey can be remapped during optimization.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@822289 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/58355bbddb4c06fa936fe966eaeedb25e177efaf",
        "patched_files": [
            "BetweenOperatorNode.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "InbetweenTest.java"
        ]
    },
    "derby_f9f8329": {
        "bug_id": "derby_f9f8329",
        "commit": "https://github.com/apache/derby/commit/f9f83296a76f890dae83e69b35bce6852a0ef2f5",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/derby/blob/f9f83296a76f890dae83e69b35bce6852a0ef2f5/java/build/org/apache/derbyBuild/splitmessages.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/build/org/apache/derbyBuild/splitmessages.java?ref=f9f83296a76f890dae83e69b35bce6852a0ef2f5",
                "deletions": 0,
                "filename": "java/build/org/apache/derbyBuild/splitmessages.java",
                "patch": "@@ -118,6 +118,7 @@ static void initClientMessageIds()\n         clientMessageIds.add(SQLState.NET_VCM_VCS_LENGTHS_INVALID);\n         clientMessageIds.add(SQLState.LANG_STRING_TOO_LONG);\n         clientMessageIds.add(SQLState.INVALID_COLUMN_ARRAY_LENGTH);\n+        clientMessageIds.add(SQLState.PROPERTY_INVALID_VALUE);\n     }\n \n \tpublic static void main(String[] args) throws Exception {",
                "raw_url": "https://github.com/apache/derby/raw/f9f83296a76f890dae83e69b35bce6852a0ef2f5/java/build/org/apache/derbyBuild/splitmessages.java",
                "sha": "52c76b11c1d511534a963420202244e536ae0f50",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/derby/blob/f9f83296a76f890dae83e69b35bce6852a0ef2f5/java/client/org/apache/derby/client/net/NetConnection.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/net/NetConnection.java?ref=f9f83296a76f890dae83e69b35bce6852a0ef2f5",
                "deletions": 2,
                "filename": "java/client/org/apache/derby/client/net/NetConnection.java",
                "patch": "@@ -33,6 +33,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import org.apache.derby.shared.common.i18n.MessageUtil;\n import org.apache.derby.client.am.Statement;\n import org.apache.derby.client.am.Utils;\n+import org.apache.derby.iapi.reference.Attribute;\n import org.apache.derby.jdbc.ClientBaseDataSource;\n import org.apache.derby.jdbc.ClientDriver;\n import org.apache.derby.client.ClientPooledConnection;\n@@ -299,8 +300,19 @@ private void initialize(String password,\n         this.rmId_ = rmId;\n         this.isXAConnection_ = isXAConn;\n         flowConnect(password, securityMechanism_);\n-        completeConnect();\n-\n+        // it's possible that the internal Driver.connect() calls returned null,\n+        // thus, a null connection, e.g. when the databasename has a : in it\n+        // (which the InternalDriver assumes means there's a subsubprotocol)  \n+        // and it's not a subsubprotocol recognized by our drivers.\n+        // If so, bail out here.\n+        if(!isConnectionNull())\n+            completeConnect();\n+        else\n+        {\n+            agent_.accumulateChainBreakingReadExceptionAndThrow(new DisconnectException(agent_,\n+                    new ClientMessageId(SQLState.PROPERTY_INVALID_VALUE),\n+                    Attribute.DBNAME_ATTR,databaseName_));\n+        }\n     }\n \n     // preferably without password in the method signature.",
                "raw_url": "https://github.com/apache/derby/raw/f9f83296a76f890dae83e69b35bce6852a0ef2f5/java/client/org/apache/derby/client/net/NetConnection.java",
                "sha": "884548dd464d8a0ca877a036cf84457527d82d3e",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/derby/blob/f9f83296a76f890dae83e69b35bce6852a0ef2f5/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java?ref=f9f83296a76f890dae83e69b35bce6852a0ef2f5",
                "deletions": 10,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java",
                "patch": "@@ -103,6 +103,7 @@ private static Test baseSuite(String postfix) {\n         suite.addTest(new DataSourceTest(\"testBadConnectionAttributeSyntax\"));\n         suite.addTest(new DataSourceTest(\"testDescriptionProperty\"));\n         suite.addTest(new DataSourceTest(\"testAllDataSources\"));\n+        suite.addTest(new DataSourceTest(\"testJira95ds\"));\n         return suite;\n     }\n \n@@ -130,8 +131,6 @@ private static Test getClientSuite() {\n     private static Test getEmbeddedSuite(String postfix) {\n         TestSuite suite = new TestSuite(\"Embedded\" + postfix);\n         suite.addTest(new DataSourceTest(\"testDSRequestAuthentication\"));\n-        // when DERBY-2498 gets fixed, move this one to baseSuite\n-        suite.addTest(new DataSourceTest(\"testJira95ds\"));\n         return suite;\n     }\n     \n@@ -231,15 +230,9 @@ public void testJira95ds() throws SQLException {\n             ds.getConnection();\n             fail (\"expected an SQLException!\");\n         } catch (SQLException sqle) {\n-            // DERBY-2498: with client, getting a NullPointerException.\n-            // Note also: the NPE does not occur with XADataSource - see\n-            // testJira95xads().\n-            if (usingEmbedded())\n-                assertSQLState(\"XCY00\", sqle);\n+            assertSQLState(\"XCY00\", sqle);\n         } catch (Exception e) {\n-            // DERBY-2498, when fixed, remove 'if'\n-            if (usingEmbedded())\n-                fail (\"unexpected exception: \" + e.toString());\n+            fail (\"unexpected exception: \" + e.toString());\n         }\n     } \n ",
                "raw_url": "https://github.com/apache/derby/raw/f9f83296a76f890dae83e69b35bce6852a0ef2f5/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java",
                "sha": "29dc6ce87fc943bc8702c1b798a865584fd41564",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/derby/blob/f9f83296a76f890dae83e69b35bce6852a0ef2f5/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java?ref=f9f83296a76f890dae83e69b35bce6852a0ef2f5",
                "deletions": 8,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java",
                "patch": "@@ -134,6 +134,7 @@ private static Test baseSuite(String postfix) {\n         TestSuite suite = new TestSuite(\"ClientAndEmbedded\" + postfix);\n         suite.addTest(new J2EEDataSourceTest(\"testGlobalLocalInterleaf\"));\n         suite.addTest(new J2EEDataSourceTest(\"testSetIsolationWithStatement\"));\n+        suite.addTest(new J2EEDataSourceTest(\"testJira95pds\"));\n         suite.addTest(new J2EEDataSourceTest(\"testJira95xads\"));\n         suite.addTest(new J2EEDataSourceTest(\"testBadConnectionAttributeSyntax\"));\n         suite.addTest(new J2EEDataSourceTest(\"testCloseActiveConnection_DS\"));\n@@ -183,8 +184,6 @@ private static Test getClientSuite() {\n     private static Test getEmbeddedSuite(String postfix) {\n         TestSuite suite = new TestSuite(\"Embedded\" + postfix);\n         suite.addTest(new J2EEDataSourceTest(\"testDSRequestAuthentication\"));\n-        // when DERBY-2498 gets fixed, move this one to baseSuite\n-        suite.addTest(new J2EEDataSourceTest(\"testJira95pds\"));\n         // Following cannot run with client because of DERBY-2533; it hangs\n         // when fixed, this can be moved to baseSuite.\n         suite.addTest(new J2EEDataSourceTest(\"testReuseAcrossGlobalLocal\"));\n@@ -2203,13 +2202,9 @@ public void testJira95pds() throws Exception {\n             pds.getPooledConnection();\n             fail (\"expected an SQLException!\");\n         } catch (SQLException sqle) {\n-            // DERBY-2498 - when fixed, remove if\n-            if (usingEmbedded())\n-                assertSQLState(\"XCY00\", sqle);\n+            assertSQLState(\"XCY00\", sqle);\n         } catch (Exception e) {\n-            // DERBY-2498 - when fixed, remove if\n-            if (usingEmbedded())\n-                throw e;\n+            throw e;\n         }\n     }\n     ",
                "raw_url": "https://github.com/apache/derby/raw/f9f83296a76f890dae83e69b35bce6852a0ef2f5/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java",
                "sha": "adf6f11ae1e96857f133967994ab2554c1c07b94",
                "status": "modified"
            }
        ],
        "message": "DERBY-2498; fix NullPointerException in clientDataSource.getConnection and ClientConnectionPoolDataSource.getConnection when the databaseName is invalid.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@711266 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/c0342dee1ff21e53439ebd4a6ffc43141b6f062c",
        "patched_files": [
            "DataSource.java",
            "NetConnection.java",
            "J2EEDataSource.java",
            "splitmessages.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "J2EEDataSourceTest.java",
            "DataSourceTest.java"
        ]
    },
    "derby_fb2cca3": {
        "bug_id": "derby_fb2cca3",
        "commit": "https://github.com/apache/derby/commit/fb2cca3ab7176fc840d0d9372ca7ce46b55c180e",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/derby/blob/fb2cca3ab7176fc840d0d9372ca7ce46b55c180e/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesTest.java?ref=fb2cca3ab7176fc840d0d9372ca7ce46b55c180e",
                "deletions": 1,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesTest.java",
                "patch": "@@ -645,7 +645,9 @@ public void testSemantics() throws SQLException\n \n         _stm.close();\n \n-        testCurrentRoleIsReset();\n+        if (!JDBC.vmSupportsJSR169()) {\n+            testCurrentRoleIsReset();\n+        }\n     }\n \n ",
                "raw_url": "https://github.com/apache/derby/raw/fb2cca3ab7176fc840d0d9372ca7ce46b55c180e/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesTest.java",
                "sha": "6be7c2a96e7d0808755a5e01307c678617ed58da",
                "status": "modified"
            }
        ],
        "message": "DERBY-3865 NPE in testSemantics(.....lang.RolesTest) on JavaME / CVM\n\nPatch derby-3865-2; RolesTest now skips a a test case for small devices platforms\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@702914 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/036a61fe60538007d16df830bdfe29d9d8a15d12",
        "patched_files": [],
        "repo": "derby",
        "unit_tests": [
            "RolesTest.java"
        ]
    },
    "derby_fbf52ee": {
        "bug_id": "derby_fbf52ee",
        "commit": "https://github.com/apache/derby/commit/fbf52ee492c624169e72cd35cc918b452a370e20",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/derby/blob/fbf52ee492c624169e72cd35cc918b452a370e20/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java?ref=fbf52ee492c624169e72cd35cc918b452a370e20",
                "deletions": 0,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java",
                "patch": "@@ -454,6 +454,10 @@ public ValueNode bindExpression(\n         ( DataDictionary dd, SchemaDescriptor sd, String rawName )\n         throws StandardException\n     {\n+        // if the schema has a null UUID, that means the schema has not\n+        // been created yet. in that case, it doesn't have any aggregates in it.\n+        if ( sd.getUUID() == null ) { return null; }\n+        \n \t\tjava.util.List list = dd.getRoutineList\n             ( sd.getUUID().toString(), rawName, AliasInfo.ALIAS_NAME_SPACE_AGGREGATE_AS_CHAR );\n ",
                "raw_url": "https://github.com/apache/derby/raw/fbf52ee492c624169e72cd35cc918b452a370e20/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java",
                "sha": "6f2882e45b78720b210210b304a7206d6f93bb2d",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/derby/blob/fbf52ee492c624169e72cd35cc918b452a370e20/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDAPermsTest.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDAPermsTest.java?ref=fbf52ee492c624169e72cd35cc918b452a370e20",
                "deletions": 1,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDAPermsTest.java",
                "patch": "@@ -60,7 +60,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n     private static  final   String      RUTH = \"RUTH\";\n     private static  final   String      ALICE = \"ALICE\";\n     private static  final   String      FRANK = \"FRANK\";\n-    private static  final   String[]    LEGAL_USERS = { TEST_DBO, ALICE, RUTH, FRANK  };\n+    private static  final   String      TONY = \"TONY\";\n+    private static  final   String[]    LEGAL_USERS = { TEST_DBO, ALICE, RUTH, FRANK, TONY  };\n+\n+    private static  final   String      MISSING_ROUTINE = \"42Y03\";\n \n     ///////////////////////////////////////////////////////////////////////////////////\n     //\n@@ -439,4 +442,18 @@ public  void    test_003_typePrivs()\n              );\n     }\n     \n+   /**\n+     * <p>\n+     * Test that we fixed an NPE in resolving function names when the\n+     * schema hasn't been created yet.\n+     * </p>\n+     */\n+    public  void    test_004_emptySchema()\n+        throws Exception\n+    {\n+        Connection  tonyConnection = openUserConnection( TONY );\n+\n+        expectCompilationError( tonyConnection, MISSING_ROUTINE, \"values toString( 100 )\" );\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/derby/raw/fbf52ee492c624169e72cd35cc918b452a370e20/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDAPermsTest.java",
                "sha": "7e27cec9c5034b169fb7bee28905d38ab91eb33f",
                "status": "modified"
            }
        ],
        "message": "DERBY-6022: Fix NPE when resolving a function/aggregate name in a schema which hasn't been created yet.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1434363 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/6a23c3b00ec5b57a5979fd39e0e708ce15286a85",
        "patched_files": [
            "AggregateNode.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "UDAPermsTest.java"
        ]
    },
    "derby_fd6e2d9": {
        "bug_id": "derby_fd6e2d9",
        "commit": "https://github.com/apache/derby/commit/fd6e2d96102073637306251b911e660040a22896",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/derby/blob/fd6e2d96102073637306251b911e660040a22896/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java?ref=fd6e2d96102073637306251b911e660040a22896",
                "deletions": 0,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/JoinNode.java",
                "patch": "@@ -428,11 +428,20 @@ public ResultColumnList getAllResultColumns(TableName allTableName)\n \t\t */\n \t\tif (leftRCL == null)\n \t\t{\n+\t\t\tif (rightRCL == null)\n+\t\t\t{\n+\t\t\t\t// Both sides are null. This only happens if allTableName is\n+\t\t\t\t// non-null and doesn't match the table name of any of the\n+\t\t\t\t// join tables (DERBY-4414).\n+\t\t\t\treturn null;\n+\t\t\t}\n \t\t\trightRCL.resetVirtualColumnIds();\n \t\t\treturn rightRCL;\n \t\t}\n \t\telse if (rightRCL == null)\n \t\t{\n+\t\t\t// leftRCL is non-null, otherwise the previous leg of the if\n+\t\t\t// statement would have been chosen.\n \t\t\tleftRCL.resetVirtualColumnIds();\n \t\t\treturn leftRCL;\n \t\t}",
                "raw_url": "https://github.com/apache/derby/raw/fd6e2d96102073637306251b911e660040a22896/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java",
                "sha": "06f54694aca7ad146f3a5f6e6fcd6e4d9490a310",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/derby/blob/fd6e2d96102073637306251b911e660040a22896/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java?ref=fd6e2d96102073637306251b911e660040a22896",
                "deletions": 1,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java",
                "patch": "@@ -484,7 +484,9 @@ public void verifySelectStarSubquery(FromList outerFromList, int subqueryType)\n \t *\n \t * @param allTableName\t\tThe qualifier on the \"*\"\n \t *\n-\t * @return ResultColumnList The expanded list\n+\t * @return ResultColumnList The expanded list, or {@code null} if\n+\t * {@code allTableName} is non-null and doesn't match a table name in\n+\t * this result set\n \t *\n \t * @exception StandardException\t\tThrown on error\n \t */",
                "raw_url": "https://github.com/apache/derby/raw/fd6e2d96102073637306251b911e660040a22896/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java",
                "sha": "d7958d7d99c38cc9a3df2bbd10484777b83f5c3e",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/derby/blob/fd6e2d96102073637306251b911e660040a22896/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java?ref=fd6e2d96102073637306251b911e660040a22896",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java",
                "patch": "@@ -39,6 +39,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n     private static final String COLUMN_NOT_IN_SCOPE = \"42X04\";\n     private static final String NON_COMPARABLE = \"42818\";\n     private static final String NO_COLUMNS = \"42X81\";\n+    private static final String TABLE_NAME_NOT_IN_SCOPE = \"42X10\";\n \n     public JoinTest(String name) {\n         super(name);\n@@ -658,5 +659,11 @@ public void testUsingClause() throws SQLException {\n         // resulted in a NullPointerException.\n         assertStatementError(NO_COLUMNS, s,\n                 \"select x.*, y.* from t1 x inner join t1 y using (a, b, c)\");\n+\n+        // DERBY-4414: If the table name in an asterisked identifier chain does\n+        // not match the table names of either side in the join, the query\n+        // should fail gracefully and not throw a NullPointerException.\n+        assertStatementError(TABLE_NAME_NOT_IN_SCOPE, s,\n+                \"select xyz.* from t1 join t2 using (b)\");\n     }\n }",
                "raw_url": "https://github.com/apache/derby/raw/fd6e2d96102073637306251b911e660040a22896/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java",
                "sha": "23aaf8c9f1e508ea75644009b6a6544908dac6be",
                "status": "modified"
            }
        ],
        "message": "DERBY-4414: NullPointerException with JOIN...USING and invalid table name in select list\n\nFail gracefully if the table name in an asterisked identifier chain\ndoesn't match any of the joined tables.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@829041 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/a9ce08817be091aba7d5d542b60f291927303c8b",
        "patched_files": [
            "JoinNode.java",
            "ResultSetNode.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "JoinTest.java"
        ]
    },
    "derby_feeb7eb": {
        "bug_id": "derby_feeb7eb",
        "commit": "https://github.com/apache/derby/commit/feeb7ebcc41cb3b96916e89d4dbb34660d977dfb",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/derby/blob/feeb7ebcc41cb3b96916e89d4dbb34660d977dfb/java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java?ref=feeb7ebcc41cb3b96916e89d4dbb34660d977dfb",
                "deletions": 0,
                "filename": "java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java",
                "patch": "@@ -352,6 +352,12 @@ public void bindStatement() throws StandardException\n                         //\n \n                         if ( cdn.hasGenerationClause() && ( cdn.getType() == null ) ) { continue; }\n+\n+                        if ( cdn.getType() == null )\n+                        {\n+                            throw StandardException.newException\n+                                ( SQLState.LANG_NEEDS_DATATYPE, cdn.getColumnName() );\n+                        }\n                         \n \t\t\t\t\t\tif (cdn.getType().getTypeId().isStringTypeId()) {\n \t\t\t\t\t\t\t//we found what we are looking for. Set the ",
                "raw_url": "https://github.com/apache/derby/raw/feeb7ebcc41cb3b96916e89d4dbb34660d977dfb/java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java",
                "sha": "48f41c9b29531caedb3c2a33ecb934f4050c7fd9",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/derby/blob/feeb7ebcc41cb3b96916e89d4dbb34660d977dfb/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java?ref=feeb7ebcc41cb3b96916e89d4dbb34660d977dfb",
                "deletions": 0,
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java",
                "patch": "@@ -130,6 +130,10 @@ public void testAddColumn() throws Exception {\n         assertStatementError(\"X0Y32\", st,\n                 \"alter table t0 add column c1 int\");\n \n+        // add a column without a datatype (DERBY-5160)\n+        assertStatementError(\"42XA9\", st,\n+                \"alter table t0 add column y\");\n+\n         // alter a system table\n         assertStatementError(\"42X62\", st,\n                 \"alter table sys.systables add column c1 int\");",
                "raw_url": "https://github.com/apache/derby/raw/feeb7ebcc41cb3b96916e89d4dbb34660d977dfb/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java",
                "sha": "200c763dae60e7bdee543cd89d21cdebcc9a7ca5",
                "status": "modified"
            }
        ],
        "message": "DERBY-5160: Fix NPE when adding a column without specifying a datatype.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1087457 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/503e54d5bb6901c06c456914d9e42226ff3d7d51",
        "patched_files": [
            "AlterTableNode.java"
        ],
        "repo": "derby",
        "unit_tests": [
            "AlterTableTest.java"
        ]
    }
}