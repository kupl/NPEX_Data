{
    "cxf_0028906": {
        "bug_id": "cxf_0028906",
        "commit": "https://github.com/apache/cxf/commit/002890617019d1e706a32847b71952f1e99f2c68",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/002890617019d1e706a32847b71952f1e99f2c68/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/utils/AuthorizationUtils.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/utils/AuthorizationUtils.java?ref=002890617019d1e706a32847b71952f1e99f2c68",
                "deletions": 1,
                "filename": "rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/utils/AuthorizationUtils.java",
                "patch": "@@ -73,7 +73,7 @@ private AuthorizationUtils() {\n                                                  Set<String> challenges,\n                                                  String realm) {\n         List<String> headers = mc.getHttpHeaders().getRequestHeader(\"Authorization\");\n-        if (headers.size() == 1) {\n+        if (headers != null && headers.size() == 1) {\n             String[] parts = headers.get(0).split(\" \");\n             if (parts.length > 0 \n                 && (challenges == null || challenges.isEmpty() || challenges.contains(parts[0]))) {",
                "raw_url": "https://github.com/apache/cxf/raw/002890617019d1e706a32847b71952f1e99f2c68/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/utils/AuthorizationUtils.java",
                "sha": "09df5ef5c938c196df82b71571fed8ec52adc92c",
                "status": "modified"
            }
        ],
        "message": "[CXF-6153] Fixing NPE",
        "parent": "https://github.com/apache/cxf/commit/1946e323a0df6e5f9748af82106cff39d7b5d01f",
        "patched_files": [
            "AuthorizationUtils.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "AuthorizationUtilsTest.java"
        ]
    },
    "cxf_0101153": {
        "bug_id": "cxf_0101153",
        "commit": "https://github.com/apache/cxf/commit/01011537a4222969e9bb2e1268ddb7010f8eaa94",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/01011537a4222969e9bb2e1268ddb7010f8eaa94/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/interceptor/SoapOutInterceptor.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/interceptor/SoapOutInterceptor.java?ref=01011537a4222969e9bb2e1268ddb7010f8eaa94",
                "deletions": 0,
                "filename": "rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/interceptor/SoapOutInterceptor.java",
                "patch": "@@ -215,6 +215,9 @@ private boolean handleHeaderPart(boolean preexistingHeaders, SoapMessage message\n \n             for (SoapHeaderInfo header : headers) {\n                 MessagePartInfo part = header.getPart();\n+                if (wrappedBmi != bmi) {\n+                    part = wrappedBmi.getMessageInfo().addMessagePart(part.getName());\n+                }\n                 if (part.getIndex() >= objs.size()) {\n                     // The optional out of band header is not a part of parameters of the method\n                     continue;",
                "raw_url": "https://github.com/apache/cxf/raw/01011537a4222969e9bb2e1268ddb7010f8eaa94/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/interceptor/SoapOutInterceptor.java",
                "sha": "fd867ef5916c381bfe014a3bcba5da734faf5283",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/01011537a4222969e9bb2e1268ddb7010f8eaa94/rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLServiceBuilder.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLServiceBuilder.java?ref=01011537a4222969e9bb2e1268ddb7010f8eaa94",
                "deletions": 2,
                "filename": "rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLServiceBuilder.java",
                "patch": "@@ -617,8 +617,11 @@ public static void checkForWrapped(OperationInfo opInfo, boolean allowRefs, bool\n         // The operation's input and output message (if present) each contain\n         // only a single part\n         // input message must exist\n-        if (inputMessage == null || inputMessage.size() != 1\n-            || (outputMessage != null && outputMessage.size() > 1)) {\n+        if (inputMessage == null || inputMessage.size() == 0 \n+            || (inputMessage.size() > 1 && !relaxed)) {\n+            passedRule = false;\n+        }\n+        if (outputMessage != null && outputMessage.size() > 1) {\n             passedRule = false;\n         }\n ",
                "raw_url": "https://github.com/apache/cxf/raw/01011537a4222969e9bb2e1268ddb7010f8eaa94/rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLServiceBuilder.java",
                "sha": "50628fd6b5bef06d3f8776d8a7a85fecfc4d826d",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/cxf/blob/01011537a4222969e9bb2e1268ddb7010f8eaa94/rt/frontend/simple/src/main/java/org/apache/cxf/service/factory/ReflectionServiceFactoryBean.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/simple/src/main/java/org/apache/cxf/service/factory/ReflectionServiceFactoryBean.java?ref=01011537a4222969e9bb2e1268ddb7010f8eaa94",
                "deletions": 0,
                "filename": "rt/frontend/simple/src/main/java/org/apache/cxf/service/factory/ReflectionServiceFactoryBean.java",
                "patch": "@@ -801,6 +801,7 @@ private boolean initializeParameter(OperationInfo o, Method method, int i,\n                                      Class paramType, Type genericType) {\n         boolean isIn = isInParam(method, i);\n         boolean isOut = isOutParam(method, i);\n+        boolean isHeader = isHeader(method, i);\n         Annotation[] paraAnnos = null;\n         if (i != -1 && o.getProperty(METHOD_PARAM_ANNOTATIONS) != null) {\n             Annotation[][] anns = (Annotation[][])o.getProperty(METHOD_PARAM_ANNOTATIONS);\n@@ -816,6 +817,20 @@ private boolean initializeParameter(OperationInfo o, Method method, int i,\n             if (part == null && isFromWsdl()) {\n                 part = o.getInput().getMessagePartByIndex(i);\n             }\n+            if (part == null && isHeader && o.isUnwrapped()) {\n+                part = ((UnwrappedOperationInfo)o).getWrappedOperation().getInput().getMessagePart(name);\n+                if (part != null) {\n+                    //header part in wsdl, need to get this mapped in to the unwrapped form\n+                    MessagePartInfo inf = o.getInput().addMessagePart(part.getName());\n+                    inf.setTypeQName(part.getTypeQName());\n+                    inf.setElement(part.isElement());\n+                    inf.setElementQName(part.getElementQName());\n+                    inf.setConcreteName(part.getConcreteName());\n+                    inf.setXmlSchema(part.getXmlSchema());\n+                    part = inf;\n+                    inf.setProperty(HEADER, Boolean.TRUE);\n+                }\n+            }\n             if (part == null) {\n                 return false;\n             }\n@@ -840,6 +855,9 @@ private boolean initializeParameter(OperationInfo o, Method method, int i,\n             if (part == null && this.isFromWsdl()) {\n                 part = o.getInput().getMessagePartByIndex(i);\n             }\n+            if (part == null && isHeader && o.isUnwrapped()) {\n+                part = o.getUnwrappedOperation().getInput().getMessagePart(name);\n+            }\n             if (part == null) {\n                 return false;\n             }",
                "raw_url": "https://github.com/apache/cxf/raw/01011537a4222969e9bb2e1268ddb7010f8eaa94/rt/frontend/simple/src/main/java/org/apache/cxf/service/factory/ReflectionServiceFactoryBean.java",
                "sha": "fefe6cb7bc47c71654f3a4f1333289003f9ce0b8",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/01011537a4222969e9bb2e1268ddb7010f8eaa94/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/ClientServerMiscTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/ClientServerMiscTest.java?ref=01011537a4222969e9bb2e1268ddb7010f8eaa94",
                "deletions": 1,
                "filename": "systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/ClientServerMiscTest.java",
                "patch": "@@ -425,6 +425,7 @@ public void testSimpleClientWithWsdl() throws Exception {\n         assertEquals(\"Hello\", echoMsg);\n     }\n     private void runDocLitTest(DocLitWrappedCodeFirstService port) throws Exception {\n+        assertEquals(\"snarf\", port.doBug2692(\"snarf\"));\n         CXF2411Result<CXF2411SubClass> o = port.doCXF2411();\n         assertNotNull(o);\n         assertNotNull(o.getContent());\n@@ -433,7 +434,6 @@ private void runDocLitTest(DocLitWrappedCodeFirstService port) throws Exception\n         Foo foo = new Foo();\n         foo.setName(\"blah\");\n         assertEquals(\"blah\", port.modifyFoo(foo).getName());\n-        \n \n         assertEquals(\"hello\", port.outOnly(new Holder<String>(), new Holder<String>()));\n         ",
                "raw_url": "https://github.com/apache/cxf/raw/01011537a4222969e9bb2e1268ddb7010f8eaa94/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/ClientServerMiscTest.java",
                "sha": "a244621ae95697306736b06cf60d334e9d1f59a3",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cxf/blob/01011537a4222969e9bb2e1268ddb7010f8eaa94/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/DocLitWrappedCodeFirstService.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/DocLitWrappedCodeFirstService.java?ref=01011537a4222969e9bb2e1268ddb7010f8eaa94",
                "deletions": 0,
                "filename": "systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/DocLitWrappedCodeFirstService.java",
                "patch": "@@ -195,6 +195,10 @@ public String getName() {\n         }\n     }\n     \n+    @WebResult(name = \"return\")\n+    String doBug2692(@WebParam(name = \"name\", header = true) String name);\n+\n+    \n     Set<Foo> getFooSet();\n     \n     Foo modifyFoo(Foo foo);",
                "raw_url": "https://github.com/apache/cxf/raw/01011537a4222969e9bb2e1268ddb7010f8eaa94/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/DocLitWrappedCodeFirstService.java",
                "sha": "a87bc16de7bbe45761c143c2b5eed455245fbb7e",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cxf/blob/01011537a4222969e9bb2e1268ddb7010f8eaa94/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/DocLitWrappedCodeFirstServiceImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/DocLitWrappedCodeFirstServiceImpl.java?ref=01011537a4222969e9bb2e1268ddb7010f8eaa94",
                "deletions": 0,
                "filename": "systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/DocLitWrappedCodeFirstServiceImpl.java",
                "patch": "@@ -236,5 +236,9 @@ public Foo modifyFoo(Foo f) {\n         ret.setContent(content);\n         return ret;\n     }\n+\n+    public String doBug2692(String name) {\n+        return name;\n+    }\n     \n }",
                "raw_url": "https://github.com/apache/cxf/raw/01011537a4222969e9bb2e1268ddb7010f8eaa94/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/DocLitWrappedCodeFirstServiceImpl.java",
                "sha": "06c94a8492383ae3be4b45222fd31cfd3f8f607f",
                "status": "modified"
            }
        ],
        "message": "[CXF-2692] Fix NPE with meethod with only header param\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@920568 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/9ddbb73b9e581604d1cd405d553a810d3e8cd992",
        "patched_files": [
            "DocLitWrappedCodeFirstServiceImpl.java",
            "WSDLServiceBuilder.java",
            "SoapOutInterceptor.java",
            "ReflectionServiceFactoryBean.java",
            "DocLitWrappedCodeFirstService.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "ClientServerMiscTest.java",
            "WSDLServiceBuilderTest.java",
            "SoapOutInterceptorTest.java"
        ]
    },
    "cxf_045d3c0": {
        "bug_id": "cxf_045d3c0",
        "commit": "https://github.com/apache/cxf/commit/045d3c0501341dfc76e49640eb57a45bfca2429a",
        "file": [
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/cxf/blob/045d3c0501341dfc76e49640eb57a45bfca2429a/rt/rs/extensions/providers/src/main/java/org/apache/cxf/jaxrs/provider/atom/AtomPojoProvider.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/extensions/providers/src/main/java/org/apache/cxf/jaxrs/provider/atom/AtomPojoProvider.java?ref=045d3c0501341dfc76e49640eb57a45bfca2429a",
                "deletions": 16,
                "filename": "rt/rs/extensions/providers/src/main/java/org/apache/cxf/jaxrs/provider/atom/AtomPojoProvider.java",
                "patch": "@@ -561,8 +561,8 @@ private void reportError(String message, Exception ex) {\n         reportError(message, ex, 500);\n     }\n     \n-    private boolean isFeedRequested(MediaType mt) {\n-        if (\"entry\".equals(mt.getParameters().get(\"type\"))) {\n+    protected boolean isFeedRequested(MediaType mt) {\n+        if (\"entry\".equalsIgnoreCase(mt.getParameters().get(\"type\"))) {\n             return false;\n         }\n         return true;\n@@ -603,25 +603,29 @@ public Object readFrom(Class<Object> cls, Type type, Annotation[] anns, MediaTyp\n         boolean isFeed = isFeedRequested(mt);\n         \n         if (isFeed) {\n-            return readFromFeed(cls, mt, headers, is);\n+            return readFromFeedOrEntry(cls, mt, headers, is);\n         } else {\n             AtomEntryProvider p = new AtomEntryProvider();\n             p.setAutodetectCharset(autodetectCharset);\n             Entry entry = p.readFrom(Entry.class, Entry.class, \n                                      new Annotation[]{}, mt, headers, is);\n-            return readFromEntry(entry, cls, mt, headers, is);\n+            return readFromEntry(entry, cls);\n         }\n     }\n     \n     @SuppressWarnings(\"unchecked\")\n-    private Object readFromFeed(Class<Object> cls, MediaType mt, \n+    private Object readFromFeedOrEntry(Class<Object> cls, MediaType mt, \n                            MultivaluedMap<String, String> headers, InputStream is) \n         throws IOException {\n         \n         AtomFeedProvider p = new AtomFeedProvider();\n         p.setAutodetectCharset(autodetectCharset);\n-        Feed feed = p.readFrom(Feed.class, Feed.class, new Annotation[]{}, mt, headers, is);\n-        \n+        Object atomObject = p.readFrom(Feed.class, Feed.class, new Annotation[]{}, mt, headers, is);\n+        if (atomObject instanceof Entry) {\n+            return this.readFromEntry((Entry)atomObject, cls);\n+        }\n+            \n+        Feed feed = (Feed)atomObject;\n         AtomElementReader<?, ?> reader = getAtomReader(cls);\n         if (reader != null) {\n             return ((AtomElementReader<Feed, Object>)reader).readFrom(feed);\n@@ -634,7 +638,7 @@ private Object readFromFeed(Class<Object> cls, MediaType mt,\n                 = (Class<Object>)InjectionUtils.getActualType(m.getGenericParameterTypes()[0]);\n             List<Object> objects = new ArrayList<Object>();\n             for (Entry e : feed.getEntries()) {\n-                objects.add(readFromEntry(e, realCls, mt, headers, is));\n+                objects.add(readFromEntry(e, realCls));\n             }\n             instance = cls.newInstance();\n             m.invoke(instance, new Object[]{objects});\n@@ -646,20 +650,22 @@ private Object readFromFeed(Class<Object> cls, MediaType mt,\n     }\n     \n     @SuppressWarnings(\"unchecked\")\n-    private Object readFromEntry(Entry entry, Class<Object> cls, MediaType mt, \n-                            MultivaluedMap<String, String> headers, InputStream is) \n+    private Object readFromEntry(Entry entry, Class<Object> cls) \n         throws IOException {\n         \n         AtomElementReader<?, ?> reader = getAtomReader(cls);\n         if (reader != null) {\n             return ((AtomElementReader<Entry, Object>)reader).readFrom(entry);\n         }\n-        try {\n-            Unmarshaller um = \n-                jaxbProvider.getJAXBContext(cls, cls).createUnmarshaller();\n-            return cls.cast(um.unmarshal(new StringReader(entry.getContent())));\n-        } catch (Exception ex) {\n-            reportError(\"Object of type \" + cls.getName() + \" can not be deserialized from Entry\", ex, 400);\n+        String entryContent = entry.getContent();\n+        if (entryContent != null) {\n+            try {\n+                Unmarshaller um = \n+                    jaxbProvider.getJAXBContext(cls, cls).createUnmarshaller();\n+                return cls.cast(um.unmarshal(new StringReader(entryContent)));\n+            } catch (Exception ex) {\n+                reportError(\"Object of type \" + cls.getName() + \" can not be deserialized from Entry\", ex, 400);\n+            }\n         }\n         return null;\n     }",
                "raw_url": "https://github.com/apache/cxf/raw/045d3c0501341dfc76e49640eb57a45bfca2429a/rt/rs/extensions/providers/src/main/java/org/apache/cxf/jaxrs/provider/atom/AtomPojoProvider.java",
                "sha": "8e313eeaf352d602e11374ccd9a750d2c48b4ffd",
                "status": "modified"
            },
            {
                "additions": 67,
                "blob_url": "https://github.com/apache/cxf/blob/045d3c0501341dfc76e49640eb57a45bfca2429a/rt/rs/extensions/providers/src/test/java/org/apache/cxf/jaxrs/provider/atom/AtomPojoProviderTest.java",
                "changes": 69,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/extensions/providers/src/test/java/org/apache/cxf/jaxrs/provider/atom/AtomPojoProviderTest.java?ref=045d3c0501341dfc76e49640eb57a45bfca2429a",
                "deletions": 2,
                "filename": "rt/rs/extensions/providers/src/test/java/org/apache/cxf/jaxrs/provider/atom/AtomPojoProviderTest.java",
                "patch": "@@ -22,6 +22,7 @@\n import java.io.ByteArrayOutputStream;\n import java.io.StringReader;\n import java.lang.annotation.Annotation;\n+import java.nio.charset.Charset;\n import java.util.ArrayList;\n import java.util.List;\n \n@@ -31,6 +32,7 @@\n \n import org.apache.abdera.model.Entry;\n import org.apache.abdera.model.Feed;\n+import org.apache.cxf.jaxrs.impl.MetadataMap;\n import org.apache.cxf.jaxrs.provider.JAXBElementProvider;\n \n import org.junit.Assert;\n@@ -39,7 +41,6 @@\n \n import org.springframework.context.support.ClassPathXmlApplicationContext;\n \n-\n public class AtomPojoProviderTest extends Assert {\n \n     private ClassPathXmlApplicationContext ctx;\n@@ -177,7 +178,71 @@ private void doTestReadFeed(AtomPojoProvider provider) throws Exception {\n         assertTrue(\"a\".equals(list.get(0).getName()) || \"a\".equals(list.get(1).getName()));\n         assertTrue(\"b\".equals(list.get(0).getName()) || \"b\".equals(list.get(1).getName()));        \n     }\n-        \n+     \n+    @Test\n+    public void testReadEntryNoContent() throws Exception {\n+        /** A sample entry without content. */\n+        final String entryNoContent =\n+            \"<?xml version='1.0' encoding='UTF-8'?>\\n\" \n+            + \"<entry xmlns=\\\"http://www.w3.org/2005/Atom\\\">\\n\" \n+            + \"  <id>84297856</id>\\n\" \n+            + \"</entry>\";\n+\n+        AtomPojoProvider atomPojoProvider = new AtomPojoProvider();\n+        @SuppressWarnings({\n+            \"rawtypes\", \"unchecked\"\n+        })\n+        JaxbDataType type = (JaxbDataType)atomPojoProvider.readFrom((Class)JaxbDataType.class,\n+                                  JaxbDataType.class,\n+                                  new Annotation[0],\n+                                  MediaType.valueOf(\"application/atom+xml;type=entry\"),\n+                                  new MetadataMap<String, String>(),\n+                                  new ByteArrayInputStream(entryNoContent.getBytes(Charset.forName(\"UTF-8\"))));\n+        assertNull(type);\n+    }\n+    \n+    @Test\n+    public void testReadEntryWithUpperCaseTypeParam() throws Exception {\n+        doReadEntryWithContent(\"application/atom+xml;type=ENTRY\");\n+    }\n+    \n+    @Test\n+    public void testReadEntryNoTypeParam() throws Exception {\n+        doReadEntryWithContent(\"application/atom+xml\");\n+    }\n+    \n+    private void doReadEntryWithContent(String mediaType) throws Exception {\n+        final String entryWithContent =\n+            \"<?xml version='1.0' encoding='UTF-8'?>\\n\" \n+            + \"<entry xmlns=\\\"http://www.w3.org/2005/Atom\\\">\\n\" \n+            + \"  <id>84297856</id>\\n\" \n+            + \"  <content type=\\\"application/xml\\\">\\n\" \n+            + \"    <jaxbDataType xmlns=\\\"\\\">\\n\" \n+            + \"    </jaxbDataType>\\n\" \n+            + \"  </content>\\n\" \n+            + \"</entry>\";\n+\n+        AtomPojoProvider atomPojoProvider = new AtomPojoProvider();\n+        @SuppressWarnings({\n+            \"rawtypes\", \"unchecked\"\n+        })\n+        JaxbDataType type = (JaxbDataType)atomPojoProvider.readFrom((Class)JaxbDataType.class,\n+                                  JaxbDataType.class,\n+                                  new Annotation[0],\n+                                  MediaType.valueOf(mediaType),\n+                                  new MetadataMap<String, String>(),\n+                                  new ByteArrayInputStream(entryWithContent.getBytes(Charset.forName(\"UTF-8\"))));\n+        assertNotNull(type);\n+    }\n+    \n+    /**\n+     * A sample JAXB data-type to read data into.\n+     */\n+    @XmlRootElement\n+    public static class JaxbDataType {\n+        // no data\n+    }\n+    \n     private Entry getEntry(List<Entry> entries, String title) {\n         for (Entry e : entries) {\n             if (title.equals(e.getTitle())) {",
                "raw_url": "https://github.com/apache/cxf/raw/045d3c0501341dfc76e49640eb57a45bfca2429a/rt/rs/extensions/providers/src/test/java/org/apache/cxf/jaxrs/provider/atom/AtomPojoProviderTest.java",
                "sha": "934f76375da5215ae3b7d2b4e44be5e828f60486",
                "status": "modified"
            }
        ],
        "message": "[CXF-5404,CXF-5406] Fixing NPE and ClassCastException when reading entries with no content or without 'type' parameter\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1543800 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/48cf4d7192c07581d56438c8779f24401531c286",
        "patched_files": [
            "AtomPojoProvider.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "AtomPojoProviderTest.java"
        ]
    },
    "cxf_06a5519": {
        "bug_id": "cxf_06a5519",
        "commit": "https://github.com/apache/cxf/commit/06a551954350575c4f34f5de9d348af3df430926",
        "file": [
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/cxf/blob/06a551954350575c4f34f5de9d348af3df430926/api/src/main/java/org/apache/cxf/interceptor/DocLiteralInInterceptor.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/api/src/main/java/org/apache/cxf/interceptor/DocLiteralInInterceptor.java?ref=06a551954350575c4f34f5de9d348af3df430926",
                "deletions": 11,
                "filename": "api/src/main/java/org/apache/cxf/interceptor/DocLiteralInInterceptor.java",
                "patch": "@@ -30,6 +30,7 @@\n import javax.xml.stream.XMLStreamReader;\n \n import org.apache.cxf.common.logging.LogUtils;\n+import org.apache.cxf.common.util.XMLSchemaQNames;\n import org.apache.cxf.databinding.DataReader;\n import org.apache.cxf.endpoint.Endpoint;\n import org.apache.cxf.message.Exchange;\n@@ -148,17 +149,7 @@ public void handleMessage(Message message) {\n     \n                 if (xmlReader == null || !StaxUtils.toNextElement(xmlReader)) {\n                     // empty input\n-    \n-                    // TO DO : check duplicate operation with no input\n-                    for (OperationInfo op : operations) {\n-                        MessageInfo bmsg = op.getInput();\n-                        if (bmsg.getMessageParts().size() == 0) {\n-                            BindingOperationInfo boi = ep.getEndpointInfo().getBinding().getOperation(op);\n-                            exchange.put(BindingOperationInfo.class, boi);\n-                            exchange.put(OperationInfo.class, op);\n-                            exchange.setOneWay(op.isOneWay());\n-                        }\n-                    }\n+                    getBindingOperationForEmptyBody(operations, ep, exchange);\n                     return;\n                 }\n \n@@ -220,6 +211,22 @@ public void handleMessage(Message message) {\n         }\n     }\n \n+    private void getBindingOperationForEmptyBody(Collection<OperationInfo> operations, Endpoint ep, Exchange exchange) {\n+        // TO DO : check duplicate operation with no input and also check if the action matches \n+        for (OperationInfo op : operations) {\n+            MessageInfo bmsg = op.getInput();\n+            List<MessagePartInfo> bparts = bmsg.getMessageParts();\n+            if (bparts.size() == 0\n+                || (bparts.size() == 1 \n+                    && XMLSchemaQNames.XSD_ANY.equals(bparts.get(0).getTypeQName()))) {\n+                BindingOperationInfo boi = ep.getEndpointInfo().getBinding().getOperation(op);\n+                exchange.put(BindingOperationInfo.class, boi);\n+                exchange.put(OperationInfo.class, op);\n+                exchange.setOneWay(op.isOneWay());\n+            }\n+        }\n+    }\n+\n     private BindingOperationInfo getBindingOperationInfo(DepthXMLStreamReader xmlReader, Exchange exchange,\n                                                          BindingOperationInfo bop, boolean client) {\n         //bop might be a unwrapped, wrap it back so that we can get correct info ",
                "raw_url": "https://github.com/apache/cxf/raw/06a551954350575c4f34f5de9d348af3df430926/api/src/main/java/org/apache/cxf/interceptor/DocLiteralInInterceptor.java",
                "sha": "065be6dc0e615d113eb93fa2e2a8527e172b048a",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/06a551954350575c4f34f5de9d348af3df430926/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/interceptors/MessageModeInInterceptor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/interceptors/MessageModeInInterceptor.java?ref=06a551954350575c4f34f5de9d348af3df430926",
                "deletions": 2,
                "filename": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/interceptors/MessageModeInInterceptor.java",
                "patch": "@@ -68,8 +68,8 @@ public MessageModeInInterceptor(Class<?> c, QName bName) {\n     }\n \n     public void handleMessage(Message message) throws Fault {\n-        if (!bindingName.equals(message.getExchange().get(BindingOperationInfo.class)\n-                               .getBinding().getName())) {\n+        BindingOperationInfo bop = message.getExchange().get(BindingOperationInfo.class); \n+        if (bop == null || !bindingName.equals(bop.getBinding().getName())) {\n             return;\n         }\n         Object o = message.getContent(soapMsgClass);",
                "raw_url": "https://github.com/apache/cxf/raw/06a551954350575c4f34f5de9d348af3df430926/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/interceptors/MessageModeInInterceptor.java",
                "sha": "e8823eb39ff0e7ab84e64b6d0fb7ca1bf767d630",
                "status": "modified"
            },
            {
                "additions": 138,
                "blob_url": "https://github.com/apache/cxf/blob/06a551954350575c4f34f5de9d348af3df430926/systests/jaxws/src/test/java/org/apache/cxf/systest/provider/NBProviderClientServerTest.java",
                "changes": 138,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/jaxws/src/test/java/org/apache/cxf/systest/provider/NBProviderClientServerTest.java?ref=06a551954350575c4f34f5de9d348af3df430926",
                "deletions": 0,
                "filename": "systests/jaxws/src/test/java/org/apache/cxf/systest/provider/NBProviderClientServerTest.java",
                "patch": "@@ -0,0 +1,138 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.systest.provider;\n+\n+import java.lang.reflect.UndeclaredThrowableException;\n+\n+import javax.xml.namespace.QName;\n+import javax.xml.soap.MessageFactory;\n+import javax.xml.soap.SOAPEnvelope;\n+import javax.xml.soap.SOAPException;\n+import javax.xml.soap.SOAPMessage;\n+import javax.xml.ws.Dispatch;\n+import javax.xml.ws.Endpoint;\n+import javax.xml.ws.Service;\n+import javax.xml.ws.soap.SOAPBinding;\n+\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+import org.apache.cxf.testutil.common.AbstractBusClientServerTestBase;\n+import org.apache.cxf.testutil.common.AbstractBusTestServerBase;\n+import org.apache.cxf.testutil.common.TestUtil;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class NBProviderClientServerTest extends AbstractBusClientServerTestBase {\n+    public static final String ADDRESS \n+        = \"http://localhost:\" + TestUtil.getPortNumber(Server.class)\n+            + \"/SoapContext/SoapProviderPort\";\n+\n+    private static QName sayHi = new QName(\"http://apache.org/hello_world_soap_http/types\", \"sayHi\");\n+\n+    public static class Server extends AbstractBusTestServerBase {\n+        Endpoint ep;\n+        \n+        protected void run() {\n+            Object implementor = new NBSoapMessageDocProvider();\n+            ep = Endpoint.publish(ADDRESS, implementor);                                 \n+        }\n+\n+        @Override\n+        public void tearDown() {\n+            ep.stop();\n+        }\n+\n+        public static void main(String[] args) {\n+            try {\n+                Server s = new Server();\n+                s.start();\n+            } catch (Exception ex) {\n+                ex.printStackTrace();\n+                System.exit(-1);\n+            } finally {\n+                System.out.println(\"done!\");\n+            }\n+        }\n+    }\n+\n+    @BeforeClass\n+    public static void startServers() throws Exception {\n+        assertTrue(\"server did not launch correctly\", launchServer(Server.class, true));\n+    }\n+    \n+    @Test\n+    public void testSOAPMessageModeDocLit() throws Exception {\n+        QName serviceName = \n+            new QName(\"http://apache.org/hello_world_soap_http\", \"SOAPProviderService\");\n+        QName portName = \n+            new QName(\"http://apache.org/hello_world_soap_http\", \"SoapProviderPort\");\n+\n+        Service service = Service.create(serviceName);\n+        assertNotNull(service);\n+        service.addPort(portName, SOAPBinding.SOAP11HTTP_BINDING, ADDRESS);\n+\n+        try {\n+            Dispatch<SOAPMessage> dispatch = service.createDispatch(portName, SOAPMessage.class, Service.Mode.MESSAGE);\n+            \n+            MessageFactory factory = MessageFactory.newInstance();\n+            SOAPMessage request = encodeRequest(factory, \"sayHi\");\n+            SOAPMessage response;\n+            try {\n+                response = dispatch.invoke(request);\n+                fail(\"Should have thrown an exception\");\n+            } catch (Exception ex) {\n+                //expected \n+                assertEquals(\"no body expected\", ex.getMessage());\n+            }\n+            \n+            request = encodeRequest(factory, null);\n+            response = dispatch.invoke(request);\n+            String resp = decodeResponse(response);\n+            assertEquals(\"Bonjour\", resp);\n+            \n+        } catch (UndeclaredThrowableException ex) {\n+            throw (Exception)ex.getCause();\n+        }\n+        \n+    }\n+\n+    private SOAPMessage encodeRequest(MessageFactory factory, String value) throws SOAPException {\n+        SOAPMessage request = factory.createMessage();\n+        SOAPEnvelope envelope = request.getSOAPPart().getEnvelope();\n+        request.setProperty(\"soapaction\", \"\");\n+        if (value != null) {\n+            request.getSOAPBody().addBodyElement(envelope.createName(value, \"ns1\", sayHi.getNamespaceURI()));\n+        }\n+        \n+        return request;\n+    }\n+\n+    private String decodeResponse(SOAPMessage response) throws SOAPException {\n+        NodeList nodelist = response.getSOAPBody().getElementsByTagNameNS(sayHi.getNamespaceURI(), \"responseType\");\n+        if (nodelist.getLength() == 1) {\n+            Node node = nodelist.item(0).getFirstChild();\n+            if (node != null) {\n+                return node.getNodeValue();\n+            }\n+        }\n+        return null;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cxf/raw/06a551954350575c4f34f5de9d348af3df430926/systests/jaxws/src/test/java/org/apache/cxf/systest/provider/NBProviderClientServerTest.java",
                "sha": "0ba83ffb54a96b92c6e15d4e0a817083d3c1f366",
                "status": "added"
            },
            {
                "additions": 65,
                "blob_url": "https://github.com/apache/cxf/blob/06a551954350575c4f34f5de9d348af3df430926/systests/jaxws/src/test/java/org/apache/cxf/systest/provider/NBSoapMessageDocProvider.java",
                "changes": 65,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/jaxws/src/test/java/org/apache/cxf/systest/provider/NBSoapMessageDocProvider.java?ref=06a551954350575c4f34f5de9d348af3df430926",
                "deletions": 0,
                "filename": "systests/jaxws/src/test/java/org/apache/cxf/systest/provider/NBSoapMessageDocProvider.java",
                "patch": "@@ -0,0 +1,65 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.systest.provider;\n+\n+import java.io.InputStream;\n+\n+import javax.xml.soap.MessageFactory;\n+import javax.xml.soap.SOAPBody;\n+import javax.xml.soap.SOAPException;\n+import javax.xml.soap.SOAPMessage;\n+import javax.xml.ws.Provider;\n+import javax.xml.ws.Service;\n+import javax.xml.ws.ServiceMode;\n+import javax.xml.ws.WebServiceProvider;\n+\n+import org.apache.cxf.binding.soap.saaj.SAAJUtils;\n+\n+@WebServiceProvider(portName = \"SoapProviderPort\", serviceName = \"SOAPProviderService\",\n+                    targetNamespace = \"http://apache.org/hello_world_soap_http\")\n+@ServiceMode(value = Service.Mode.MESSAGE)            \n+public class NBSoapMessageDocProvider implements Provider<SOAPMessage> {\n+    private SOAPMessage sayHiResponse;\n+    \n+    public NBSoapMessageDocProvider() {\n+       \n+        try {\n+            MessageFactory factory = MessageFactory.newInstance();            \n+            InputStream is = getClass().getResourceAsStream(\"resources/sayHiDocLiteralResp.xml\");\n+            sayHiResponse =  factory.createMessage(null, is);\n+            is.close();\n+        } catch (Exception ex) {\n+            ex.printStackTrace();\n+        }\n+    }\n+    \n+    public SOAPMessage invoke(SOAPMessage request) {\n+        SOAPBody body = null;\n+        try {\n+            body = SAAJUtils.getBody(request);\n+        } catch (SOAPException e) {\n+            throw new RuntimeException(\"soap body expected\");\n+        }\n+        if (body.getFirstChild() != null) {\n+            throw new RuntimeException(\"no body expected\");\n+        }\n+        return sayHiResponse;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cxf/raw/06a551954350575c4f34f5de9d348af3df430926/systests/jaxws/src/test/java/org/apache/cxf/systest/provider/NBSoapMessageDocProvider.java",
                "sha": "e67f1de799751f7394257d16348e24d1f544b70c",
                "status": "added"
            }
        ],
        "message": "[CXF-4812] NPE on MessageModeInInterceptor when sending empty SOAPBody\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1444251 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/53e5857352897bc197a78d11b77d84cffe8ead0e",
        "patched_files": [
            "DocLiteralInInterceptor.java",
            "MessageModeInInterceptor.java",
            "NBSoapMessageDocProvider.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "DocLiteralInInterceptorTest.java",
            "NBProviderClientServerTest.java"
        ]
    },
    "cxf_0a51e42": {
        "bug_id": "cxf_0a51e42",
        "commit": "https://github.com/apache/cxf/commit/0a51e42fcb3c783c53ed9de9a4cce455d7272ba9",
        "file": [
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/cxf/blob/0a51e42fcb3c783c53ed9de9a4cce455d7272ba9/systests/wsdl_maven/java2ws/pom.xml",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/wsdl_maven/java2ws/pom.xml?ref=0a51e42fcb3c783c53ed9de9a4cce455d7272ba9",
                "deletions": 0,
                "filename": "systests/wsdl_maven/java2ws/pom.xml",
                "patch": "@@ -69,6 +69,24 @@\n                             <goal>java2ws</goal>\n                         </goals>\n                     </execution>\n+                    <execution>\n+                        <id>process-classes2</id>\n+                        <phase>process-classes</phase>\n+                        <configuration>\n+                            <fork>${cxf.codegenplugin.forkmode}</fork>\n+                            <additionalJvmArgs>${cxf.codegen.jvmArgs}</additionalJvmArgs>\n+                            <className>org.apache.cxf.systests.java2ws.HelloWorldArgs</className>\n+                            <genWsdl>true</genWsdl>\n+                            <verbose>true</verbose>\n+                            <classifier>test</classifier>\n+                            <attachWsdl>true</attachWsdl>\n+                            <genWrapperbean>true</genWrapperbean>\n+                            <argline>-s ./target/generated-sources</argline>\n+                        </configuration>\n+                        <goals>\n+                            <goal>java2ws</goal>\n+                        </goals>\n+                    </execution>\n                 </executions>\n             </plugin>\n         </plugins>",
                "raw_url": "https://github.com/apache/cxf/raw/0a51e42fcb3c783c53ed9de9a4cce455d7272ba9/systests/wsdl_maven/java2ws/pom.xml",
                "sha": "edc87322c981743a6bddabf6a8474258edb04d9e",
                "status": "modified"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/cxf/blob/0a51e42fcb3c783c53ed9de9a4cce455d7272ba9/systests/wsdl_maven/java2ws/src/main/java/org/apache/cxf/systests/java2ws/HelloWorldArgs.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/wsdl_maven/java2ws/src/main/java/org/apache/cxf/systests/java2ws/HelloWorldArgs.java?ref=0a51e42fcb3c783c53ed9de9a4cce455d7272ba9",
                "deletions": 0,
                "filename": "systests/wsdl_maven/java2ws/src/main/java/org/apache/cxf/systests/java2ws/HelloWorldArgs.java",
                "patch": "@@ -0,0 +1,35 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.systests.java2ws;\n+\n+import java.util.Date;\n+\n+import javax.jws.WebParam;\n+import javax.jws.WebService;\n+\n+import org.apache.cxf.annotations.WSDLDocumentation;\n+\n+@WebService\n+@WSDLDocumentation(value = \"A simple service with only one method\")\n+public interface HelloWorldArgs {\n+    @WSDLDocumentation(value = \"Simply return the given text\")\n+    String sayHi(@WebParam(name = \"text\") String text, @WebParam(name = \"date\") Date date,\n+                 StringWrapper[][] wrapper);\n+}",
                "raw_url": "https://github.com/apache/cxf/raw/0a51e42fcb3c783c53ed9de9a4cce455d7272ba9/systests/wsdl_maven/java2ws/src/main/java/org/apache/cxf/systests/java2ws/HelloWorldArgs.java",
                "sha": "84f0b8d10a94bbf3b0767f59a38d7c112dab550c",
                "status": "added"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/cxf/blob/0a51e42fcb3c783c53ed9de9a4cce455d7272ba9/systests/wsdl_maven/java2ws/src/main/java/org/apache/cxf/systests/java2ws/StringWrapper.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/wsdl_maven/java2ws/src/main/java/org/apache/cxf/systests/java2ws/StringWrapper.java?ref=0a51e42fcb3c783c53ed9de9a4cce455d7272ba9",
                "deletions": 0,
                "filename": "systests/wsdl_maven/java2ws/src/main/java/org/apache/cxf/systests/java2ws/StringWrapper.java",
                "patch": "@@ -0,0 +1,32 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.systests.java2ws;\n+\n+public class StringWrapper {\n+    private String value;\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(String value) {\n+        this.value = value;\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cxf/raw/0a51e42fcb3c783c53ed9de9a4cce455d7272ba9/systests/wsdl_maven/java2ws/src/main/java/org/apache/cxf/systests/java2ws/StringWrapper.java",
                "sha": "15415792dfd4930693c58f3773c18dda0150b65a",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/0a51e42fcb3c783c53ed9de9a4cce455d7272ba9/tools/javato/ws/src/main/java/org/apache/cxf/tools/java2wsdl/processor/internal/jaxws/Wrapper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/javato/ws/src/main/java/org/apache/cxf/tools/java2wsdl/processor/internal/jaxws/Wrapper.java?ref=0a51e42fcb3c783c53ed9de9a4cce455d7272ba9",
                "deletions": 1,
                "filename": "tools/javato/ws/src/main/java/org/apache/cxf/tools/java2wsdl/processor/internal/jaxws/Wrapper.java",
                "patch": "@@ -182,7 +182,7 @@ protected boolean isBuiltInTypes(Class<?> clz) {\n         if (clz == null || clz.isPrimitive()) {\n             return true;\n         }\n-        return \"java.lang\".equals(clz.getPackage().getName());\n+        return clz.getPackage() != null && \"java.lang\".equals(clz.getPackage().getName());\n     }\n \n     protected List<JavaField> buildFields() {",
                "raw_url": "https://github.com/apache/cxf/raw/0a51e42fcb3c783c53ed9de9a4cce455d7272ba9/tools/javato/ws/src/main/java/org/apache/cxf/tools/java2wsdl/processor/internal/jaxws/Wrapper.java",
                "sha": "41a6869e500de68bdbc92e8810cd5ba35a41be94",
                "status": "modified"
            }
        ],
        "message": "CXF-7969 - NullPointerException in CXF JavaToWS",
        "parent": "https://github.com/apache/cxf/commit/ecb15d9ed53a1b4dd462399a33a9c4eb8a93e195",
        "patched_files": [
            "Wrapper.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "WrapperTest.java"
        ]
    },
    "cxf_0a7a0d0": {
        "bug_id": "cxf_0a7a0d0",
        "commit": "https://github.com/apache/cxf/commit/0a7a0d023cffec2db34da7df4582c832dabbcdcd",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cxf/blob/0a7a0d023cffec2db34da7df4582c832dabbcdcd/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/FilterProviderInfo.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/FilterProviderInfo.java?ref=0a7a0d023cffec2db34da7df4582c832dabbcdcd",
                "deletions": 0,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/FilterProviderInfo.java",
                "patch": "@@ -24,12 +24,19 @@\n import java.util.Set;\n \n import org.apache.cxf.Bus;\n+import org.apache.cxf.jaxrs.provider.ProviderFactory;\n \n public class FilterProviderInfo<T> extends ProviderInfo<T> {\n \n     private Set<String> nameBinding;\n     private Map<Class<?>, Integer> supportedContracts;\n     \n+    public FilterProviderInfo(T provider,\n+                              Bus bus,\n+                              Map<Class<?>, Integer> supportedContracts) {\n+        this(provider, bus, ProviderFactory.DEFAULT_FILTER_NAME_BINDING, supportedContracts);        \n+    }\n+    \n     public FilterProviderInfo(T provider,\n                               Bus bus,\n                               String nameBinding,",
                "raw_url": "https://github.com/apache/cxf/raw/0a7a0d023cffec2db34da7df4582c832dabbcdcd/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/FilterProviderInfo.java",
                "sha": "403c0f81965085b07d99adcbdc54d3ddd25d88d5",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cxf/blob/0a7a0d023cffec2db34da7df4582c832dabbcdcd/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ProviderFactory.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ProviderFactory.java?ref=0a7a0d023cffec2db34da7df4582c832dabbcdcd",
                "deletions": 4,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ProviderFactory.java",
                "patch": "@@ -77,7 +77,7 @@\n import org.apache.cxf.message.MessageUtils;\n \n public abstract class ProviderFactory {\n-    protected static final String DEFAULT_FILTER_NAME_BINDING = \"org.apache.cxf.filter.binding\";\n+    public static final String DEFAULT_FILTER_NAME_BINDING = \"org.apache.cxf.filter.binding\";\n     protected static final String SERVER_FACTORY_NAME = \"org.apache.cxf.jaxrs.provider.ServerProviderFactory\";\n     protected static final String CLIENT_FACTORY_NAME = \"org.apache.cxf.jaxrs.client.ClientProviderFactory\";\n     protected static final String IGNORE_TYPE_VARIABLES = \"org.apache.cxf.jaxrs.providers.ignore.typevars\";\n@@ -362,7 +362,7 @@ public Configuration getDynamicConfiguration() {\n             if (size > 0) {\n                 interceptors = new ArrayList<ReaderInterceptor>(size + 1);\n                 List<ProviderInfo<ReaderInterceptor>> readers =\n-                    getPostMatchContainerFilters(readerInterceptors, names);\n+                    getBoundFilters(readerInterceptors, names);\n                 for (ProviderInfo<ReaderInterceptor> p : readers) {\n                     InjectionUtils.injectContexts(p.getProvider(), p, m);\n                     interceptors.add(p.getProvider());\n@@ -401,7 +401,7 @@ public Configuration getDynamicConfiguration() {\n             if (size > 0) {\n                 interceptors = new ArrayList<WriterInterceptor>(size + 1);\n                 List<ProviderInfo<WriterInterceptor>> writers =\n-                    getPostMatchContainerFilters(writerInterceptors, names);\n+                    getBoundFilters(writerInterceptors, names);\n                 for (ProviderInfo<WriterInterceptor> p : writers) {\n                     InjectionUtils.injectContexts(p.getProvider(), p, m);\n                     interceptors.add(p.getProvider());\n@@ -884,7 +884,7 @@ public void setSchemaLocations(List<String> schemas) {\n         }\n     }\n \n-    protected static <T> List<ProviderInfo<T>> getPostMatchContainerFilters(Map<NameKey, ProviderInfo<T>> boundFilters,\n+    protected static <T> List<ProviderInfo<T>> getBoundFilters(Map<NameKey, ProviderInfo<T>> boundFilters,\n                                                                           Set<String> names) {\n         if (boundFilters.isEmpty()) {\n             return Collections.emptyList();",
                "raw_url": "https://github.com/apache/cxf/raw/0a7a0d023cffec2db34da7df4582c832dabbcdcd/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ProviderFactory.java",
                "sha": "aa5d71e49ee512a96e93ed78c33fbe4c306d1c5c",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/0a7a0d023cffec2db34da7df4582c832dabbcdcd/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ServerProviderFactory.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ServerProviderFactory.java?ref=0a7a0d023cffec2db34da7df4582c832dabbcdcd",
                "deletions": 2,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ServerProviderFactory.java",
                "patch": "@@ -138,7 +138,7 @@ private static synchronized ServerProviderFactory initBaseFactory(Bus bus) {\n     }\n     \n     public List<ProviderInfo<ContainerRequestFilter>> getPostMatchContainerRequestFilters(Set<String> names) {\n-        return getPostMatchContainerFilters(postMatchContainerRequestFilters, names);\n+        return getBoundFilters(postMatchContainerRequestFilters, names);\n         \n     }\n     \n@@ -165,7 +165,7 @@ private static synchronized ServerProviderFactory initBaseFactory(Bus bus) {\n     }\n     \n     public List<ProviderInfo<ContainerResponseFilter>> getContainerResponseFilters(Set<String> names) {\n-        return getPostMatchContainerFilters(postMatchContainerResponseFilters, \n+        return getBoundFilters(postMatchContainerResponseFilters, \n                                             names);\n     }\n     ",
                "raw_url": "https://github.com/apache/cxf/raw/0a7a0d023cffec2db34da7df4582c832dabbcdcd/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ServerProviderFactory.java",
                "sha": "51f333031d7f37fc4e8a846997a3f5a2eb0dfd16",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/0a7a0d023cffec2db34da7df4582c832dabbcdcd/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/spec/ClientImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/spec/ClientImpl.java?ref=0a7a0d023cffec2db34da7df4582c832dabbcdcd",
                "deletions": 1,
                "filename": "rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/spec/ClientImpl.java",
                "patch": "@@ -210,7 +210,7 @@ public Builder request() {\n                     providers.add(p);\n                 } else {\n                     providers.add(\n-                        new FilterProviderInfo<Object>(p, pf.getBus(), null, contracts));\n+                        new FilterProviderInfo<Object>(p, pf.getBus(), contracts));\n                 }\n             }\n             ",
                "raw_url": "https://github.com/apache/cxf/raw/0a7a0d023cffec2db34da7df4582c832dabbcdcd/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/spec/ClientImpl.java",
                "sha": "b04b3a3762d394e19e8f0c512a68b7c27435fd05",
                "status": "modified"
            }
        ],
        "message": "[CXF-5135] Using default binding name when creating client interceptors to prevent NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1520291 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/415fc29334310285b25d2c9a59c2640ee56a5963",
        "patched_files": [
            "ClientImpl.java",
            "ServerProviderFactory.java",
            "ProviderFactory.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "ClientImplTest.java",
            "ProviderFactoryTest.java",
            "ServerProviderFactoryTest.java"
        ]
    },
    "cxf_0ada3f2": {
        "bug_id": "cxf_0ada3f2",
        "commit": "https://github.com/apache/cxf/commit/0ada3f2b8ce9575ce27ed67b1eeecaf0be52943e",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/0ada3f2b8ce9575ce27ed67b1eeecaf0be52943e/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/AbstractJAXBProvider.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/AbstractJAXBProvider.java?ref=0ada3f2b8ce9575ce27ed67b1eeecaf0be52943e",
                "deletions": 1,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/AbstractJAXBProvider.java",
                "patch": "@@ -223,7 +223,7 @@ public void init(List<ClassResourceInfo> cris) {\n             }\n             if (!schemaLocs.isEmpty()) {\n                 this.setSchemaLocations(schemaLocs);\n-                if (cris.size() == 0 && schema != null) {\n+                if (cris.size() == 0 && schema != null && sv != null) {\n                     SchemaValidation.SchemaValidationType type = sv.type();\n                     if (type == SchemaValidation.SchemaValidationType.OUT) {\n                         validateInputIfPossible = false;",
                "raw_url": "https://github.com/apache/cxf/raw/0ada3f2b8ce9575ce27ed67b1eeecaf0be52943e/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/AbstractJAXBProvider.java",
                "sha": "eed47448c840fea211324d175bf8528e8f09119b",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/0ada3f2b8ce9575ce27ed67b1eeecaf0be52943e/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java?ref=0ada3f2b8ce9575ce27ed67b1eeecaf0be52943e",
                "deletions": 2,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java",
                "patch": "@@ -929,12 +929,12 @@ private static Object injectIntoCollectionOrArray(Class<?> rawType,\n             realGenericType = realType;\n         } else {\n             Type[] types = getActualTypes(genericType);\n-            if (types.length == 0 || !(types[0] instanceof ParameterizedType)) {\n+            if (types == null || types.length == 0 || !(types[0] instanceof ParameterizedType)) {\n                 realType = getActualType(genericType);\n                 realGenericType = realType;\n             } else {\n                 realType = getRawType(types[0]);\n-                realGenericType = types[0] == realType ? realType : types[0];\n+                realGenericType = types[0];\n             }\n         }\n         Object theValues = null;",
                "raw_url": "https://github.com/apache/cxf/raw/0ada3f2b8ce9575ce27ed67b1eeecaf0be52943e/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java",
                "sha": "37897c8bf4446fd8530dc175e7e99a48db61a617",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cxf/blob/0ada3f2b8ce9575ce27ed67b1eeecaf0be52943e/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java?ref=0ada3f2b8ce9575ce27ed67b1eeecaf0be52943e",
                "deletions": 4,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java",
                "patch": "@@ -339,7 +339,8 @@ public static void injectParameters(OperationResourceInfo ori,\n                 if (cris.isEmpty()) {\n                     firstCri = cri;\n                     cris.put(cri, entry.getValue());\n-                } else if (URITemplate.compareTemplates(firstCri.getURITemplate(), cri.getURITemplate()) == 0) {\n+                } else if (firstCri != null\n+                        && URITemplate.compareTemplates(firstCri.getURITemplate(), cri.getURITemplate()) == 0) {\n                     cris.put(cri, entry.getValue());\n                 } else {\n                     break;\n@@ -1550,8 +1551,10 @@ private static boolean compareCompositeSubtypes(MediaType requiredType, MediaTyp\n                     String subTypeBeforePlus1 = splitMediaSubType(subType1, false);\n                     String subTypeBeforePlus2 = splitMediaSubType(subType2, false);\n                     nullPossible = subTypeBeforePlus1 == null || subTypeBeforePlus2 == null;\n-                    isCompatible = subTypeBeforePlus1 == null && subTypeBeforePlus2.equals(subType1)\n-                        || subTypeBeforePlus2 == null && subTypeBeforePlus1.equals(subType2);\n+                    isCompatible = subTypeBeforePlus1 == null && subTypeBeforePlus2 != null\n+                            && subTypeBeforePlus2.equals(subType1)\n+                            || subTypeBeforePlus2 == null && subTypeBeforePlus1 != null\n+                            && subTypeBeforePlus1.equals(subType2);\n                     if (!isCompatible && !nullPossible) {\n                         isCompatible = subTypeBeforePlus1.equalsIgnoreCase(subTypeBeforePlus2)\n                             && (subType1.charAt(subType1.length() - 1) == '*'\n@@ -1569,7 +1572,7 @@ private static boolean compareCompositeSubtypes(MediaType requiredType, MediaTyp\n                     String subTypeBeforePlus1 = splitMediaSubType(subType1, false);\n                     String subTypeBeforePlus2 = splitMediaSubType(subType2, false);\n \n-                    isCompatible = subTypeBeforePlus1.equalsIgnoreCase(subTypeBeforePlus2)\n+                    isCompatible = subTypeBeforePlus1 != null && subTypeBeforePlus1.equalsIgnoreCase(subTypeBeforePlus2)\n                         && (subType1.charAt(subType1.length() - 1) == '*'\n                             || subType2.charAt(subType2.length() - 1) == '*');\n                 }",
                "raw_url": "https://github.com/apache/cxf/raw/0ada3f2b8ce9575ce27ed67b1eeecaf0be52943e/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java",
                "sha": "87217bf00af22dcc9003dcb69f5834d61372fba4",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/0ada3f2b8ce9575ce27ed67b1eeecaf0be52943e/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java?ref=0ada3f2b8ce9575ce27ed67b1eeecaf0be52943e",
                "deletions": 1,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java",
                "patch": "@@ -896,7 +896,7 @@ public static JAXRSServerFactoryBean createApplication(Application app,\n     public static Object createProviderInstance(Class<?> cls) {\n         try {\n             Constructor<?> c = ResourceUtils.findResourceConstructor(cls, false);\n-            if (c.getParameterTypes().length == 0) {\n+            if (c != null && c.getParameterTypes().length == 0) {\n                 return c.newInstance();\n             }\n             return c;",
                "raw_url": "https://github.com/apache/cxf/raw/0ada3f2b8ce9575ce27ed67b1eeecaf0be52943e/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java",
                "sha": "5e93b5f6df714a4854dda05ac0b966d46ae54bf7",
                "status": "modified"
            }
        ],
        "message": "Add some NPE checks",
        "parent": "https://github.com/apache/cxf/commit/85e9a478055cb35f917e5cfa8e19fa52a7290fe0",
        "patched_files": [
            "JAXRSUtils.java",
            "ResourceUtils.java",
            "InjectionUtils.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JAXRSUtilsTest.java",
            "InjectionUtilsTest.java",
            "ResourceUtilsTest.java"
        ]
    },
    "cxf_0c307b6": {
        "bug_id": "cxf_0c307b6",
        "commit": "https://github.com/apache/cxf/commit/0c307b67340dcafd75a1fd40ce003869ddd4594b",
        "file": [
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/cxf/blob/0c307b67340dcafd75a1fd40ce003869ddd4594b/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/soap/SOAPHandlerInterceptor.java",
                "changes": 47,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/soap/SOAPHandlerInterceptor.java?ref=0c307b67340dcafd75a1fd40ce003869ddd4594b",
                "deletions": 23,
                "filename": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/soap/SOAPHandlerInterceptor.java",
                "patch": "@@ -254,35 +254,36 @@ protected MessageContext createProtocolMessageContext(SoapMessage message) {\n         Exchange exch = message.getExchange();\n         setupBindingOperationInfo(exch, sm);\n         SOAPMessage msg = sm.getMessage();\n-        try {\n-            List<SOAPElement> params = new ArrayList<>();\n-            message.put(MessageContext.REFERENCE_PARAMETERS, params);\n-            SOAPHeader head = SAAJUtils.getHeader(msg);\n-            if (head != null) {\n-                Iterator<Node> it = CastUtils.cast(head.getChildElements());\n-                while (it != null && it.hasNext()) {\n-                    Node nd = it.next();\n-                    if (nd instanceof SOAPElement) {\n-                        SOAPElement el = (SOAPElement)nd;\n-                        if (el.hasAttributeNS(Names.WSA_NAMESPACE_NAME, \"IsReferenceParameter\")\n-                            && (\"1\".equals(el.getAttributeNS(Names.WSA_NAMESPACE_NAME,\n-                                                             \"IsReferenceParameter\"))\n-                                || Boolean.parseBoolean(el.getAttributeNS(Names.WSA_NAMESPACE_NAME,\n-                                                                          \"IsReferenceParameter\")))) {\n-                            params.add(el);\n+        if (msg != null) {\n+            try {\n+                List<SOAPElement> params = new ArrayList<>();\n+                message.put(MessageContext.REFERENCE_PARAMETERS, params);\n+                SOAPHeader head = SAAJUtils.getHeader(msg);\n+                if (head != null) {\n+                    Iterator<Node> it = CastUtils.cast(head.getChildElements());\n+                    while (it != null && it.hasNext()) {\n+                        Node nd = it.next();\n+                        if (nd instanceof SOAPElement) {\n+                            SOAPElement el = (SOAPElement) nd;\n+                            if (el.hasAttributeNS(Names.WSA_NAMESPACE_NAME, \"IsReferenceParameter\")\n+                                    && (\"1\".equals(el.getAttributeNS(Names.WSA_NAMESPACE_NAME,\n+                                    \"IsReferenceParameter\"))\n+                                    || Boolean.parseBoolean(el.getAttributeNS(Names.WSA_NAMESPACE_NAME,\n+                                    \"IsReferenceParameter\")))) {\n+                                params.add(el);\n+                            }\n                         }\n                     }\n                 }\n+                if (isRequestor(message) && msg.getSOAPPart().getEnvelope().getBody() != null\n+                        && msg.getSOAPPart().getEnvelope().getBody().hasFault()) {\n+                    return null;\n+                }\n+            } catch (SOAPException e) {\n+                throw new Fault(e);\n             }\n-            if (isRequestor(message) && msg.getSOAPPart().getEnvelope().getBody() != null\n-                && msg.getSOAPPart().getEnvelope().getBody().hasFault()) {\n-                return null;\n-            }\n-        } catch (SOAPException e) {\n-            throw new Fault(e);\n         }\n \n-\n         return sm;\n     }\n ",
                "raw_url": "https://github.com/apache/cxf/raw/0c307b67340dcafd75a1fd40ce003869ddd4594b/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/soap/SOAPHandlerInterceptor.java",
                "sha": "340c966ac8f3484971040f05acf7e4ac3470c1c2",
                "status": "modified"
            }
        ],
        "message": "[CXF-7412] avoid NPE occuring when handler chain contains a SoapHandler and empty message is received",
        "parent": "https://github.com/apache/cxf/commit/dcb4070248666908113395b0f1c689dc1c30b493",
        "patched_files": [
            "SOAPHandlerInterceptor.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "SOAPHandlerInterceptorTest.java"
        ]
    },
    "cxf_0dd2a34": {
        "bug_id": "cxf_0dd2a34",
        "commit": "https://github.com/apache/cxf/commit/0dd2a34a95055652731dbef0f10234dcc51dfea3",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cxf/blob/0dd2a34a95055652731dbef0f10234dcc51dfea3/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java?ref=0dd2a34a95055652731dbef0f10234dcc51dfea3",
                "deletions": 2,
                "filename": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "patch": "@@ -639,8 +639,13 @@ public static Object unmarshall(JAXBContext context, Schema schema, Object sourc\n         } catch (Throwable ex) {\n             if (ex instanceof javax.xml.bind.UnmarshalException) {\n                 javax.xml.bind.UnmarshalException unmarshalEx = (javax.xml.bind.UnmarshalException)ex;\n-                throw new Fault(new Message(\"UNMARSHAL_ERROR\", BUNDLE, unmarshalEx.getLinkedException()\n-                    .getMessage()), ex);\n+                if (unmarshalEx.getLinkedException() != null) {\n+                    throw new Fault(new Message(\"UNMARSHAL_ERROR\", BUNDLE, \n+                                            unmarshalEx.getLinkedException().getMessage()), ex);\n+                } else {\n+                    throw new Fault(new Message(\"UNMARSHAL_ERROR\", BUNDLE, \n+                                                unmarshalEx.getMessage()), ex);                    \n+                }\n             } else {\n                 throw new Fault(new Message(\"UNMARSHAL_ERROR\", BUNDLE, ex.getMessage()), ex);\n             }",
                "raw_url": "https://github.com/apache/cxf/raw/0dd2a34a95055652731dbef0f10234dcc51dfea3/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "sha": "39cb1952f40a81d7e65e5ab48a97435cb4f55bee",
                "status": "modified"
            }
        ],
        "message": "Guard against NPE when creating a fault\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@658241 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/d9e18df6cd7fe118fd6f24b58c5e85265021181b",
        "patched_files": [
            "JAXBEncoderDecoder.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JAXBEncoderDecoderTest.java"
        ]
    },
    "cxf_0fdde9e": {
        "bug_id": "cxf_0fdde9e",
        "commit": "https://github.com/apache/cxf/commit/0fdde9e2b7057328a71c978a0b1727a80a8078db",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/0fdde9e2b7057328a71c978a0b1727a80a8078db/rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java?ref=0fdde9e2b7057328a71c978a0b1727a80a8078db",
                "deletions": 1,
                "filename": "rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java",
                "patch": "@@ -217,7 +217,7 @@ public boolean isRepeatable() {\n             .setSocketTimeout((int) csPolicy.getReceiveTimeout())\n             .setConnectTimeout((int) csPolicy.getConnectionTimeout());\n         Proxy p = proxyFactory.createProxy(csPolicy , uri);\n-        if (p != null) {\n+        if (p != null && p.type() != Proxy.Type.DIRECT) {\n             InetSocketAddress isa = (InetSocketAddress)p.address();\n             HttpHost proxy = new HttpHost(isa.getHostName(), isa.getPort());\n             b.setProxy(proxy);",
                "raw_url": "https://github.com/apache/cxf/raw/0fdde9e2b7057328a71c978a0b1727a80a8078db/rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java",
                "sha": "d1d6abd81488e0096aed248ea4cac8acd7a0ba66",
                "status": "modified"
            }
        ],
        "message": "[CXF-5836] Fix NPE when nonProxyHosts is used\nPatch from Nicolas Sprauel applied",
        "parent": "https://github.com/apache/cxf/commit/d40ea830bd7ddd973d9b2b15b42783f30a399790",
        "patched_files": [
            "AsyncHTTPConduit.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "AsyncHTTPConduitTest.java"
        ]
    },
    "cxf_10ebf9c": {
        "bug_id": "cxf_10ebf9c",
        "commit": "https://github.com/apache/cxf/commit/10ebf9ccfd29ad5888e639b4d4f558cc59bbdc60",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/10ebf9ccfd29ad5888e639b4d4f558cc59bbdc60/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/grants/code/AbstractCodeDataProvider.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/grants/code/AbstractCodeDataProvider.java?ref=10ebf9ccfd29ad5888e639b4d4f558cc59bbdc60",
                "deletions": 1,
                "filename": "rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/grants/code/AbstractCodeDataProvider.java",
                "patch": "@@ -69,7 +69,7 @@ public static ServerAuthorizationCodeGrant initCodeGrant(AuthorizationCodeRegist\n     protected abstract void saveCodeGrant(ServerAuthorizationCodeGrant grant);\n \n     public static boolean isCodeMatched(ServerAuthorizationCodeGrant grant, Client c, UserSubject sub) {\n-        if (c == null || grant.getClient().getClientId().equals(c.getClientId())) {\n+        if (grant != null && (c == null || grant.getClient().getClientId().equals(c.getClientId()))) {\n             UserSubject grantSub = grant.getSubject();\n             return sub == null || grantSub != null && grantSub.getLogin().equals(sub.getLogin());\n         }",
                "raw_url": "https://github.com/apache/cxf/raw/10ebf9ccfd29ad5888e639b4d4f558cc59bbdc60/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/grants/code/AbstractCodeDataProvider.java",
                "sha": "8787a8bf508cae1f9988bff0c94bd21a1e1c8454",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/10ebf9ccfd29ad5888e639b4d4f558cc59bbdc60/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/AbstractOAuthDataProvider.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/AbstractOAuthDataProvider.java?ref=10ebf9ccfd29ad5888e639b4d4f558cc59bbdc60",
                "deletions": 1,
                "filename": "rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/AbstractOAuthDataProvider.java",
                "patch": "@@ -579,7 +579,7 @@ protected static boolean isClientMatched(Client c, UserSubject resourceOwner) {\n                 && c.getResourceOwnerSubject().getLogin().equals(resourceOwner.getLogin());\n     }\n     protected static boolean isTokenMatched(ServerAccessToken token, Client c, UserSubject sub) {\n-        if (c == null || token.getClient().getClientId().equals(c.getClientId())) {\n+        if (token != null && (c == null || token.getClient().getClientId().equals(c.getClientId()))) {\n             UserSubject tokenSub = token.getSubject();\n             if (sub == null || tokenSub != null && tokenSub.getLogin().equals(sub.getLogin())) {\n                 return true;",
                "raw_url": "https://github.com/apache/cxf/raw/10ebf9ccfd29ad5888e639b4d4f558cc59bbdc60/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/AbstractOAuthDataProvider.java",
                "sha": "cc1b623248bb0517c39c9f206d1e5fedbc0f9710",
                "status": "modified"
            }
        ],
        "message": "Avoiding possible NPEs in the oauth2 providers",
        "parent": "https://github.com/apache/cxf/commit/19121e3da243bb1516d605fd1498087efedd387c",
        "patched_files": [
            "AbstractOAuthDataProvider.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "AbstractOAuthDataProviderTest.java"
        ]
    },
    "cxf_156b166": {
        "bug_id": "cxf_156b166",
        "commit": "https://github.com/apache/cxf/commit/156b166b093aa92c1fc400e0f1f7440ded701169",
        "file": [
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/cxf/blob/156b166b093aa92c1fc400e0f1f7440ded701169/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/CryptoCoverageChecker.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/CryptoCoverageChecker.java?ref=156b166b093aa92c1fc400e0f1f7440ded701169",
                "deletions": 21,
                "filename": "rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/CryptoCoverageChecker.java",
                "patch": "@@ -137,31 +137,33 @@ public void handleMessage(SoapMessage message) throws Fault {\n                 (List<?>) message.get(WSHandlerConstants.RECV_RESULTS));\n \n         // Get all encrypted and signed references\n-        for (WSHandlerResult wshr : results) {\n-            List<WSSecurityEngineResult> signedResults = wshr.getActionResults().get(WSConstants.SIGN);\n-            if (signedResults != null) {\n-                for (WSSecurityEngineResult signedResult : signedResults) {\n-                    List<WSDataRef> sl =\n-                        CastUtils.cast((List<?>)signedResult.get(WSSecurityEngineResult.TAG_DATA_REF_URIS));\n-                    if (sl != null) {\n-                        if (sl.size() == 1\n-                            && sl.get(0).getName().equals(new QName(WSConstants.SIG_NS, WSConstants.SIG_LN))) {\n-                            //endorsing the signature so don't include\n-                            continue;\n+        if (results != null) {\n+            for (WSHandlerResult wshr : results) {\n+                List<WSSecurityEngineResult> signedResults = wshr.getActionResults().get(WSConstants.SIGN);\n+                if (signedResults != null) {\n+                    for (WSSecurityEngineResult signedResult : signedResults) {\n+                        List<WSDataRef> sl =\n+                            CastUtils.cast((List<?>)signedResult.get(WSSecurityEngineResult.TAG_DATA_REF_URIS));\n+                        if (sl != null) {\n+                            if (sl.size() == 1\n+                                && sl.get(0).getName().equals(new QName(WSConstants.SIG_NS, WSConstants.SIG_LN))) {\n+                                //endorsing the signature so don't include\n+                                continue;\n+                            }\n+\n+                            signed.addAll(sl);\n                         }\n-\n-                        signed.addAll(sl);\n                     }\n                 }\n-            }\n \n-            List<WSSecurityEngineResult> encryptedResults = wshr.getActionResults().get(WSConstants.ENCR);\n-            if (encryptedResults != null) {\n-                for (WSSecurityEngineResult encryptedResult : encryptedResults) {\n-                    List<WSDataRef> el =\n-                        CastUtils.cast((List<?>)encryptedResult.get(WSSecurityEngineResult.TAG_DATA_REF_URIS));\n-                    if (el != null) {\n-                        encrypted.addAll(el);\n+                List<WSSecurityEngineResult> encryptedResults = wshr.getActionResults().get(WSConstants.ENCR);\n+                if (encryptedResults != null) {\n+                    for (WSSecurityEngineResult encryptedResult : encryptedResults) {\n+                        List<WSDataRef> el =\n+                            CastUtils.cast((List<?>)encryptedResult.get(WSSecurityEngineResult.TAG_DATA_REF_URIS));\n+                        if (el != null) {\n+                            encrypted.addAll(el);\n+                        }\n                     }\n                 }\n             }",
                "raw_url": "https://github.com/apache/cxf/raw/156b166b093aa92c1fc400e0f1f7440ded701169/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/CryptoCoverageChecker.java",
                "sha": "bcca66826c0135ad5641140cd363a49b1c775a58",
                "status": "modified"
            }
        ],
        "message": "NPE fix",
        "parent": "https://github.com/apache/cxf/commit/19cad14f41be42f02a429bdcf93613fa43673448",
        "patched_files": [
            "CryptoCoverageChecker.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "CryptoCoverageCheckerTest.java"
        ]
    },
    "cxf_1708206": {
        "bug_id": "cxf_1708206",
        "commit": "https://github.com/apache/cxf/commit/1708206e4a56af6b8d852a1505713d10c05a004c",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/cxf/blob/1708206e4a56af6b8d852a1505713d10c05a004c/api/src/main/java/org/apache/cxf/message/MessageImpl.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/api/src/main/java/org/apache/cxf/message/MessageImpl.java?ref=1708206e4a56af6b8d852a1505713d10c05a004c",
                "deletions": 15,
                "filename": "api/src/main/java/org/apache/cxf/message/MessageImpl.java",
                "patch": "@@ -110,7 +110,7 @@ public Object getContextualProperty(String key) {\n         Object val = get(key);\n         \n         Exchange ex = getExchange();\n-        if (val == null) {\n+        if (val == null && ex != null) {\n             val = ex.get(key);\n         }\n         \n@@ -121,7 +121,7 @@ public Object getContextualProperty(String key) {\n             }\n         }\n         \n-        if (val == null) {\n+        if (val == null && ex != null) {\n             Endpoint ep = ex.get(Endpoint.class); \n             if (ep != null) {\n                 val = ep.get(key);\n@@ -135,19 +135,17 @@ public Object getContextualProperty(String key) {\n                 }\n \n             }\n-        }\n-        \n-        if (val == null) {\n-            Service ep = ex.get(Service.class); \n-            if (ep != null) {\n-                val = ep.get(key);\n-            }\n-        }\n-        \n-        if (val == null) {\n-            Bus bus = ex.get(Bus.class);\n-            if (bus != null) {\n-                val = bus.getProperty(key);\n+            if (val == null) {\n+                Service sv = ex.get(Service.class); \n+                if (sv != null) {\n+                    val = sv.get(key);\n+                }\n+                if (val == null) {\n+                    Bus bus = ex.get(Bus.class);\n+                    if (bus != null) {\n+                        val = bus.getProperty(key);\n+                    }\n+                }\n             }\n         }\n         ",
                "raw_url": "https://github.com/apache/cxf/raw/1708206e4a56af6b8d852a1505713d10c05a004c/api/src/main/java/org/apache/cxf/message/MessageImpl.java",
                "sha": "40d2b930d0c6431f455a78e7ff6d2f05da846f24",
                "status": "modified"
            },
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/cxf/blob/1708206e4a56af6b8d852a1505713d10c05a004c/rt/core/src/test/java/org/apache/cxf/attachment/AttachmentDeserializerTest.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/test/java/org/apache/cxf/attachment/AttachmentDeserializerTest.java?ref=1708206e4a56af6b8d852a1505713d10c05a004c",
                "deletions": 0,
                "filename": "rt/core/src/test/java/org/apache/cxf/attachment/AttachmentDeserializerTest.java",
                "patch": "@@ -25,6 +25,11 @@\n import java.util.Collection;\n import java.util.Iterator;\n \n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.xml.sax.helpers.DefaultHandler;\n+\n import org.apache.cxf.helpers.IOUtils;\n import org.apache.cxf.message.Attachment;\n import org.apache.cxf.message.Exchange;\n@@ -299,4 +304,33 @@ public void testSmallStream() throws Exception {\n         assertEquals(-1, m.read(new byte[1000]));\n         assertEquals(-1, m.read(new byte[1000]));\n     }\n+    \n+    @Test\n+    public void testCXF2542() throws Exception {\n+        StringBuffer buf = new StringBuffer();\n+        buf.append(\"------=_Part_0_2180223.1203118300920\\n\");\n+        buf.append(\"Content-Type: application/xop+xml; charset=UTF-8; type=\\\"text/xml\\\"\\n\");\n+        buf.append(\"Content-Transfer-Encoding: 8bit\\n\");\n+        buf.append(\"Content-ID: <soap.xml@xfire.codehaus.org>\\n\");\n+        buf.append(\"\\n\");\n+        buf.append(\"<soap:Envelope xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" \"\n+                   + \"xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" \"\n+                   + \"xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\"\n+                   + \"<soap:Body><getNextMessage xmlns=\\\"http://foo.bar\\\" /></soap:Body>\"\n+                   + \"</soap:Envelope>\\n\");\n+        buf.append(\"------=_Part_0_2180223.1203118300920--\\n\");\n+\n+        InputStream rawInputStream = new ByteArrayInputStream(buf.toString().getBytes());\n+        MessageImpl message = new MessageImpl();\n+        message.setContent(InputStream.class, rawInputStream);\n+        message.put(Message.CONTENT_TYPE, \n+                    \"multipart/related; type=\\\"application/xop+xml\\\"; \"\n+                    + \"start=\\\"<soap.xml@xfire.codehaus.org>\\\"; \"\n+                    + \"start-info=\\\"text/xml\\\"; boundary=\\\"----=_Part_0_2180223.1203118300920\\\"\");\n+        new AttachmentDeserializer(message).initializeAttachments();\n+        InputStream inputStreamWithoutAttachments = message.getContent(InputStream.class);\n+        SAXParser parser = SAXParserFactory.newInstance().newSAXParser();\n+        parser.parse(inputStreamWithoutAttachments, new DefaultHandler());\n+        System.out.println(\"All done.\");\n+    }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cxf/raw/1708206e4a56af6b8d852a1505713d10c05a004c/rt/core/src/test/java/org/apache/cxf/attachment/AttachmentDeserializerTest.java",
                "sha": "c9603c678ec95eb4c9ac82e1e43585e420db63b3",
                "status": "modified"
            }
        ],
        "message": "[CXF-2543] Add NPE guards to MssageImpl\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@880989 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/d9252676cbeea867b573de360a826de2b996a350",
        "patched_files": [
            "MessageImpl.java",
            "AttachmentDeserializer.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "AttachmentDeserializerTest.java"
        ]
    },
    "cxf_1855e28": {
        "bug_id": "cxf_1855e28",
        "commit": "https://github.com/apache/cxf/commit/1855e288a4564803be42dad7b9957e16c6b10ac5",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/1855e288a4564803be42dad7b9957e16c6b10ac5/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/SoapBindingFactory.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/SoapBindingFactory.java?ref=1855e288a4564803be42dad7b9957e16c6b10ac5",
                "deletions": 1,
                "filename": "rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/SoapBindingFactory.java",
                "patch": "@@ -632,7 +632,7 @@ private void initializeMessage(SoapBindingInfo bi, BindingOperationInfo boi, Bin\n                             bmsg.getMessageParts().remove(mpi);\n                         } else if (SOAPBindingUtil.isSOAPBody(content)) {\n                             SoapBody sb = SOAPBindingUtil.getSoapBody(content);\n-                            if (sb.getParts().size() == 1) {\n+                            if (sb.getParts() != null && sb.getParts().size() == 1) {\n                                 partName = (String) sb.getParts().get(0);\n                             }\n ",
                "raw_url": "https://github.com/apache/cxf/raw/1855e288a4564803be42dad7b9957e16c6b10ac5/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/SoapBindingFactory.java",
                "sha": "249d632dee6bb1a08463938bdf9b64d0324d45ce",
                "status": "modified"
            }
        ],
        "message": "[CXF-1603] Add another NPE guard, fix from Benjamin Coiffe applied\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@659126 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/bec4331cd2eb9ef60a80480d7ce718299563a42d",
        "patched_files": [
            "SoapBindingFactory.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "SoapBindingFactoryTest.java"
        ]
    },
    "cxf_189b12e": {
        "bug_id": "cxf_189b12e",
        "commit": "https://github.com/apache/cxf/commit/189b12e8ca5131f409e6fe68e6665cc9bc02b3d1",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cxf/blob/189b12e8ca5131f409e6fe68e6665cc9bc02b3d1/rt/ws/security/src/main/java/org/apache/cxf/ws/security/tokenstore/SecurityToken.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/security/src/main/java/org/apache/cxf/ws/security/tokenstore/SecurityToken.java?ref=189b12e8ca5131f409e6fe68e6665cc9bc02b3d1",
                "deletions": 2,
                "filename": "rt/ws/security/src/main/java/org/apache/cxf/ws/security/tokenstore/SecurityToken.java",
                "patch": "@@ -225,13 +225,20 @@ private void processLifeTime(Element lifetimeElem) {\n                 DOMUtils.getFirstChildWithName(lifetimeElem,\n                                                 WSS4JConstants.WSU_NS,\n                                                 WSS4JConstants.CREATED_LN);\n-            this.created = ZonedDateTime.parse(DOMUtils.getContent(createdElem)).toInstant();\n+            if (createdElem == null) {\n+                // The spec says that if there is no Created Element in the Lifetime, then take the current time\n+                this.created = Instant.now();\n+            } else {\n+                this.created = ZonedDateTime.parse(DOMUtils.getContent(createdElem)).toInstant();\n+            }\n \n             Element expiresElem =\n                 DOMUtils.getFirstChildWithName(lifetimeElem,\n                                                 WSS4JConstants.WSU_NS,\n                                                 WSS4JConstants.EXPIRES_LN);\n-            this.expires = ZonedDateTime.parse(DOMUtils.getContent(expiresElem)).toInstant();\n+            if (expiresElem != null) {\n+                this.expires = ZonedDateTime.parse(DOMUtils.getContent(expiresElem)).toInstant();\n+            }\n         } catch (DateTimeParseException e) {\n             //shouldn't happen\n         }",
                "raw_url": "https://github.com/apache/cxf/raw/189b12e8ca5131f409e6fe68e6665cc9bc02b3d1/rt/ws/security/src/main/java/org/apache/cxf/ws/security/tokenstore/SecurityToken.java",
                "sha": "08e458b3545bcdac7e369215f03fc5b11cdee853",
                "status": "modified"
            },
            {
                "additions": 130,
                "blob_url": "https://github.com/apache/cxf/blob/189b12e8ca5131f409e6fe68e6665cc9bc02b3d1/rt/ws/security/src/test/java/org/apache/cxf/ws/security/tokenstore/SecurityTokenTest.java",
                "changes": 130,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/security/src/test/java/org/apache/cxf/ws/security/tokenstore/SecurityTokenTest.java?ref=189b12e8ca5131f409e6fe68e6665cc9bc02b3d1",
                "deletions": 0,
                "filename": "rt/ws/security/src/test/java/org/apache/cxf/ws/security/tokenstore/SecurityTokenTest.java",
                "patch": "@@ -0,0 +1,130 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.ws.security.tokenstore;\n+\n+import java.time.Instant;\n+import java.time.ZoneOffset;\n+\n+import org.w3c.dom.Element;\n+\n+import org.apache.cxf.helpers.DOMUtils;\n+import org.apache.cxf.staxutils.W3CDOMStreamWriter;\n+import org.apache.cxf.ws.security.trust.STSUtils;\n+import org.apache.wss4j.common.WSS4JConstants;\n+import org.apache.wss4j.common.util.DateUtil;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+public class SecurityTokenTest {\n+\n+    @org.junit.Test\n+    public void testCreateSecurityToken() throws Exception {\n+        String key = \"key\";\n+        Instant created = Instant.now();\n+        Instant expires = created.plusSeconds(20L);\n+\n+        SecurityToken token = new SecurityToken(key, created, expires);\n+        assertEquals(key, token.getId());\n+        assertEquals(created, token.getCreated());\n+        assertEquals(expires, token.getExpires());\n+    }\n+\n+    @org.junit.Test\n+    public void testParseLifetimeElement() throws Exception {\n+        String key = \"key\";\n+        Element tokenElement = DOMUtils.createDocument().createElement(\"token\");\n+\n+        // Create Lifetime\n+        W3CDOMStreamWriter writer = new W3CDOMStreamWriter();\n+        Instant created = Instant.now();\n+        Instant expires = created.plusSeconds(20L);\n+\n+        String namespace = STSUtils.WST_NS_05_12;\n+        writer.writeStartElement(\"wst\", \"Lifetime\", namespace);\n+        writer.writeNamespace(\"wst\", namespace);\n+        writer.writeNamespace(\"wsu\", WSS4JConstants.WSU_NS);\n+        writer.writeStartElement(\"wsu\", \"Created\", WSS4JConstants.WSU_NS);\n+        writer.writeCharacters(created.atZone(ZoneOffset.UTC).format(DateUtil.getDateTimeFormatter(true)));\n+        writer.writeEndElement();\n+\n+        writer.writeStartElement(\"wsu\", \"Expires\", WSS4JConstants.WSU_NS);\n+        writer.writeCharacters(expires.atZone(ZoneOffset.UTC).format(DateUtil.getDateTimeFormatter(true)));\n+        writer.writeEndElement();\n+        writer.writeEndElement();\n+\n+        SecurityToken token = new SecurityToken(key, tokenElement, writer.getDocument().getDocumentElement());\n+        assertEquals(key, token.getId());\n+        assertEquals(created, token.getCreated());\n+        assertEquals(expires, token.getExpires());\n+    }\n+\n+    @org.junit.Test\n+    public void testLifetimeNoCreated() throws Exception {\n+        String key = \"key\";\n+        Element tokenElement = DOMUtils.createDocument().createElement(\"token\");\n+\n+        // Create Lifetime\n+        W3CDOMStreamWriter writer = new W3CDOMStreamWriter();\n+        Instant created = Instant.now();\n+        Instant expires = created.plusSeconds(20L);\n+\n+        String namespace = STSUtils.WST_NS_05_12;\n+        writer.writeStartElement(\"wst\", \"Lifetime\", namespace);\n+        writer.writeNamespace(\"wst\", namespace);\n+        writer.writeNamespace(\"wsu\", WSS4JConstants.WSU_NS);\n+\n+        writer.writeStartElement(\"wsu\", \"Expires\", WSS4JConstants.WSU_NS);\n+        writer.writeCharacters(expires.atZone(ZoneOffset.UTC).format(DateUtil.getDateTimeFormatter(true)));\n+        writer.writeEndElement();\n+        writer.writeEndElement();\n+\n+        SecurityToken token = new SecurityToken(key, tokenElement, writer.getDocument().getDocumentElement());\n+        assertEquals(key, token.getId());\n+        // It should default to the current time\n+        assertNotNull(token.getCreated());\n+        assertEquals(expires, token.getExpires());\n+    }\n+\n+    @org.junit.Test\n+    public void testLifetimeNoExpires() throws Exception {\n+        String key = \"key\";\n+        Element tokenElement = DOMUtils.createDocument().createElement(\"token\");\n+\n+        // Create Lifetime\n+        W3CDOMStreamWriter writer = new W3CDOMStreamWriter();\n+        Instant created = Instant.now();\n+\n+        String namespace = STSUtils.WST_NS_05_12;\n+        writer.writeStartElement(\"wst\", \"Lifetime\", namespace);\n+        writer.writeNamespace(\"wst\", namespace);\n+        writer.writeNamespace(\"wsu\", WSS4JConstants.WSU_NS);\n+        writer.writeStartElement(\"wsu\", \"Created\", WSS4JConstants.WSU_NS);\n+        writer.writeCharacters(created.atZone(ZoneOffset.UTC).format(DateUtil.getDateTimeFormatter(true)));\n+        writer.writeEndElement();\n+\n+        writer.writeEndElement();\n+\n+        SecurityToken token = new SecurityToken(key, tokenElement, writer.getDocument().getDocumentElement());\n+        assertEquals(key, token.getId());\n+        assertEquals(created, token.getCreated());\n+        assertNull(token.getExpires());\n+    }\n+}",
                "raw_url": "https://github.com/apache/cxf/raw/189b12e8ca5131f409e6fe68e6665cc9bc02b3d1/rt/ws/security/src/test/java/org/apache/cxf/ws/security/tokenstore/SecurityTokenTest.java",
                "sha": "d8b2dea36d63f89eca9c0fff0bb8f727666a32b6",
                "status": "added"
            }
        ],
        "message": "CXF-8139 - SecurityToken, parsing the lifetime may cause a NullPointerException",
        "parent": "https://github.com/apache/cxf/commit/277430f6673140643a5593b979316ff981839b2b",
        "patched_files": [
            "SecurityToken.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "SecurityTokenTest.java"
        ]
    },
    "cxf_19f7992": {
        "bug_id": "cxf_19f7992",
        "commit": "https://github.com/apache/cxf/commit/19f79924ada3850e62ab429e538ee63a23445836",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cxf/blob/19f79924ada3850e62ab429e538ee63a23445836/rt/core/src/main/java/org/apache/cxf/bus/blueprint/ConfigurerImpl.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/main/java/org/apache/cxf/bus/blueprint/ConfigurerImpl.java?ref=19f79924ada3850e62ab429e538ee63a23445836",
                "deletions": 4,
                "filename": "rt/core/src/main/java/org/apache/cxf/bus/blueprint/ConfigurerImpl.java",
                "patch": "@@ -131,11 +131,13 @@ public synchronized void configureBean(String bn, Object beanInstance, boolean c\n                 //Aries blueprint 0.3.x\n                 m = ReflectionUtil.findMethod(container.getClass(), \"getRepository\");\n                 Object o = ReflectionUtil.setAccessible(m).invoke(container);\n-                m = ReflectionUtil.findMethod(container.getClass(), \"getRecipe\", String.class);\n+                m = ReflectionUtil.findMethod(o.getClass(), \"getRecipe\", String.class);\n                 o = ReflectionUtil.setAccessible(m).invoke(o, bn);  //returns the recipe\n-                m = ReflectionUtil.findMethod(o.getClass(), \"setProperties\", Object.class);\n-                if (m != null) {\n-                    ReflectionUtil.setAccessible(m).invoke(o, beanInstance);\n+                if (o != null) {\n+                    m = ReflectionUtil.findMethod(o.getClass(), \"setProperties\", Object.class);\n+                    if (m != null) {\n+                        ReflectionUtil.setAccessible(m).invoke(o, beanInstance);\n+                    }\n                 }\n             }\n         } catch (InvocationTargetException ite) {",
                "raw_url": "https://github.com/apache/cxf/raw/19f79924ada3850e62ab429e538ee63a23445836/rt/core/src/main/java/org/apache/cxf/bus/blueprint/ConfigurerImpl.java",
                "sha": "4ab9163b41b2c3f0cee419cab335d7d77a878ea3",
                "status": "modified"
            }
        ],
        "message": "Fix a potential NPE in blueprint configuration\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1311832 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/21df6d90185c755079d817cc39be3baefd93fcdc",
        "patched_files": [
            "ConfigurerImpl.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "ConfigurerImplTest.java"
        ]
    },
    "cxf_1a0d8e4": {
        "bug_id": "cxf_1a0d8e4",
        "commit": "https://github.com/apache/cxf/commit/1a0d8e4ccd4c6546bc8812fb96ddd93aea6a9a97",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/1a0d8e4ccd4c6546bc8812fb96ddd93aea6a9a97/rt/ws/rm/src/test/java/org/apache/cxf/ws/rm/DestinationSequenceTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/rm/src/test/java/org/apache/cxf/ws/rm/DestinationSequenceTest.java?ref=1a0d8e4ccd4c6546bc8812fb96ddd93aea6a9a97",
                "deletions": 1,
                "filename": "rt/ws/rm/src/test/java/org/apache/cxf/ws/rm/DestinationSequenceTest.java",
                "patch": "@@ -638,7 +638,7 @@ public void testSequenceTerminationNotNecessary() {\n         DestinationSequence seq = new DestinationSequence(id, ref, destination,\n             ProtocolVariation.RM10WSA200408);\n         RMEndpoint rme = control.createMock(RMEndpoint.class);\n-        EasyMock.expect(destination.getReliableEndpoint()).andReturn(rme);\n+        EasyMock.expect(destination.getReliableEndpoint()).andReturn(rme).anyTimes();\n         DestinationSequence.SequenceTermination st = seq.new SequenceTermination();\n         st.updateInactivityTimeout(30000L);\n         long lastAppMessage = System.currentTimeMillis() - 1000L;",
                "raw_url": "https://github.com/apache/cxf/raw/1a0d8e4ccd4c6546bc8812fb96ddd93aea6a9a97/rt/ws/rm/src/test/java/org/apache/cxf/ws/rm/DestinationSequenceTest.java",
                "sha": "a1642568406c574c1c9ce777ba63688dc0181de9",
                "status": "modified"
            }
        ],
        "message": "fix NPE at ws.rm.DestinationSequenceTest\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1463972 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/d5e5211301d67aeaf81d078cb2fc9b76478e555f",
        "patched_files": [
            "DestinationSequence.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "DestinationSequenceTest.java"
        ]
    },
    "cxf_1df1d21": {
        "bug_id": "cxf_1df1d21",
        "commit": "https://github.com/apache/cxf/commit/1df1d2127bd64b26fa763e4d8d7ec8f67767f757",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cxf/blob/1df1d2127bd64b26fa763e4d8d7ec8f67767f757/rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/ContextUtils.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/ContextUtils.java?ref=1df1d2127bd64b26fa763e4d8d7ec8f67767f757",
                "deletions": 1,
                "filename": "rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/ContextUtils.java",
                "patch": "@@ -756,7 +756,10 @@ private static String getActionFromServiceModel(Message message,\n                 // http://www.w3.org/2005/02/addressing/wsdl schema\n                 for (BindingFaultInfo bfi : bindingOpInfo.getFaults()) {\n                     FaultInfo fi = bfi.getFaultInfo();\n-                    if (t != null && t.getClass().isAssignableFrom(fi.getMessagePart(0).getTypeClass())) {\n+                    Class<?> fiTypeClass = fi.getMessagePart(0).getTypeClass();\n+                    if (t != null \n+                            && fiTypeClass != null\n+                            && t.getClass().isAssignableFrom(fiTypeClass)) {\n                         if (fi.getExtensionAttributes() == null) {\n                             continue;\n                         }",
                "raw_url": "https://github.com/apache/cxf/raw/1df1d2127bd64b26fa763e4d8d7ec8f67767f757/rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/ContextUtils.java",
                "sha": "ff5c79c29f1eef0e25d304bccd232fa1079e4301",
                "status": "modified"
            },
            {
                "additions": 44,
                "blob_url": "https://github.com/apache/cxf/blob/1df1d2127bd64b26fa763e4d8d7ec8f67767f757/rt/ws/addr/src/test/java/org/apache/cxf/ws/addressing/MAPAggregatorTest.java",
                "changes": 50,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/addr/src/test/java/org/apache/cxf/ws/addressing/MAPAggregatorTest.java?ref=1df1d2127bd64b26fa763e4d8d7ec8f67767f757",
                "deletions": 6,
                "filename": "rt/ws/addr/src/test/java/org/apache/cxf/ws/addressing/MAPAggregatorTest.java",
                "patch": "@@ -22,8 +22,11 @@\n \n import java.lang.reflect.Method;\n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n \n import javax.wsdl.extensions.ExtensibilityElement;\n import javax.xml.namespace.QName;\n@@ -38,16 +41,19 @@\n import org.apache.cxf.binding.Binding;\n import org.apache.cxf.binding.soap.SoapFault;\n import org.apache.cxf.endpoint.Endpoint;\n+import org.apache.cxf.interceptor.Fault;\n import org.apache.cxf.message.Exchange;\n import org.apache.cxf.message.Message;\n import org.apache.cxf.message.MessageImpl;\n import org.apache.cxf.phase.PhaseManager;\n import org.apache.cxf.phase.PhaseManagerImpl;\n import org.apache.cxf.service.Service;\n+import org.apache.cxf.service.model.BindingFaultInfo;\n import org.apache.cxf.service.model.BindingInfo;\n import org.apache.cxf.service.model.BindingMessageInfo;\n import org.apache.cxf.service.model.BindingOperationInfo;\n import org.apache.cxf.service.model.EndpointInfo;\n+import org.apache.cxf.service.model.FaultInfo;\n import org.apache.cxf.service.model.InterfaceInfo;\n import org.apache.cxf.service.model.MessageInfo.Type;\n import org.apache.cxf.service.model.OperationInfo;\n@@ -292,6 +298,7 @@ public void testResponderOutboundFault() throws Exception {\n                                                       true,\n                                                       false,\n                                                       true});\n+        \n         aggregator.mediate(message, true);\n         control.verify();\n         verifyMessage(message, false, true, true);\n@@ -405,7 +412,7 @@ private Message setUpMessage(boolean[] params)\n         \n         Message message = getMessage();        \n         Exchange exchange = getExchange();\n-        setUpOutbound(message, exchange, outbound);\n+        setUpOutbound(message, exchange, outbound, fault);\n         setUpMessageProperty(message,\n                              REQUESTOR_ROLE,\n                              Boolean.valueOf(requestor));\n@@ -574,7 +581,14 @@ private void setUpResponder(Message message,\n                 setUpMessageProperty(message,\n                                      REQUESTOR_ROLE,\n                                      Boolean.FALSE);\n-                expectedAction = \"http://foo/bar/SEI/opResponse\";\n+                \n+                if (fault) {\n+                    message.setContent(Exception.class, new SoapFault(\"blah\",\n+                            (Throwable) new Exception(), Fault.FAULT_CODE_SERVER));\n+                    expectedAction = \"http://foo/bar/SEI/Fault/Exception\";\n+                } else {\n+                    expectedAction = \"http://foo/bar/SEI/opResponse\";\n+                }\n             }\n             setUpMessageProperty(message,\n                                  REQUESTOR_ROLE,\n@@ -631,9 +645,9 @@ private void setUpOneway(Message message, Exchange exchange, boolean oneway) {\n         setUpExchangeOneway(exchange, oneway);\n     }\n \n-    private void setUpOutbound(Message message, Exchange exchange, boolean outbound) {\n+    private void setUpOutbound(Message message, Exchange exchange, boolean outbound, boolean fault) {\n         setUpMessageExchange(message, exchange);\n-        setUpExchangeOutbound(exchange, message, outbound);\n+        setUpExchangeOutbound(exchange, message, outbound, fault);\n     }\n \n     private void setUpConduit(Message message, Exchange exchange) {\n@@ -657,6 +671,10 @@ private void setUpMethod(Message message, Exchange exchange, Method method) {\n                         opInfo.createMessage(new QName(\"http://foo/bar\", \"opRequest\"), Type.INPUT));\n         opInfo.setOutput(\"opResponse\",\n                          opInfo.createMessage(new QName(\"http://foo/bar\", \"opResponse\"), Type.INPUT));\n+        FaultInfo finfo = opInfo.addFault(new QName(\"http://foo/bar\", \"opFault\"),\n+                new QName(\"http://foo/bar\", \"opFault\"));\n+        finfo.addMessagePart(\"fault\");\n+        \n         BindingOperationInfo bindingOpInfo = new TestBindingOperationInfo(opInfo);\n         setUpExchangeGet(exchange, BindingOperationInfo.class, bindingOpInfo);\n         // Usual fun with EasyMock not always working as expected\n@@ -718,8 +736,13 @@ private void setUpExchangeOneway(Exchange exchange, boolean oneway) {\n \n     private void setUpExchangeOutbound(Exchange exchange,\n                                        Message message,\n-                                       boolean outbound) {\n-        exchange.getOutMessage();\n+                                       boolean outbound,\n+                                       boolean fault) {\n+        if (fault) {\n+            exchange.getOutFaultMessage();\n+        } else {\n+            exchange.getOutMessage();\n+        }\n         EasyMock.expectLastCall().andReturn(outbound ? message : null).anyTimes();\n         //exchange.setOutMessage(outbound ? message : new MessageImpl());\n     }\n@@ -797,8 +820,18 @@ private void verifyMessage(Message message,\n     }\n \n     private static class TestBindingOperationInfo extends BindingOperationInfo {\n+        private Map<QName, BindingFaultInfo> faults;\n+        \n         public TestBindingOperationInfo(OperationInfo oi) {\n             opInfo = oi;\n+            \n+            Collection<FaultInfo> of = opInfo.getFaults();\n+            if (of != null && !of.isEmpty()) {\n+                faults = new ConcurrentHashMap<QName, BindingFaultInfo>(of.size());\n+                for (FaultInfo fault : of) {\n+                    faults.put(fault.getFaultName(), new BindingFaultInfo(fault, this));\n+                }\n+            }\n         }\n \n         public BindingMessageInfo getInput() {\n@@ -808,5 +841,10 @@ public BindingMessageInfo getInput() {\n         public BindingMessageInfo getOutput() {\n             return new TestBindingMessageInfo();\n         }\n+\n+        @Override\n+        public Collection<BindingFaultInfo> getFaults() {\n+            return Collections.unmodifiableCollection(this.faults.values());\n+        }        \n     }\n }",
                "raw_url": "https://github.com/apache/cxf/raw/1df1d2127bd64b26fa763e4d8d7ec8f67767f757/rt/ws/addr/src/test/java/org/apache/cxf/ws/addressing/MAPAggregatorTest.java",
                "sha": "9403729986396dfdfc6167dd8d5293cd7c27d15d",
                "status": "modified"
            }
        ],
        "message": "WS-A support throws NullPointerException in cases where we aren't mapped\ndirectly to class objects (example: camel/smx routes and such)\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@903443 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/d81e85b5765774bef64b43a10e6b1e8bab26cbf8",
        "patched_files": [
            "ContextUtils.java",
            "MAPAggregator.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "ContextUtilsTest.java",
            "MAPAggregatorTest.java"
        ]
    },
    "cxf_1fa008d": {
        "bug_id": "cxf_1fa008d",
        "commit": "https://github.com/apache/cxf/commit/1fa008dd160dde9c4d614700556ba9f0d8f17fdd",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/1fa008dd160dde9c4d614700556ba9f0d8f17fdd/rt/rs/security/oauth-parent/oauth2-jwt/src/test/java/org/apache/cxf/rs/security/oauth2/jwe/JweCompactReaderWriterTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/security/oauth-parent/oauth2-jwt/src/test/java/org/apache/cxf/rs/security/oauth2/jwe/JweCompactReaderWriterTest.java?ref=1fa008dd160dde9c4d614700556ba9f0d8f17fdd",
                "deletions": 1,
                "filename": "rt/rs/security/oauth-parent/oauth2-jwt/src/test/java/org/apache/cxf/rs/security/oauth2/jwe/JweCompactReaderWriterTest.java",
                "patch": "@@ -175,7 +175,7 @@ private String encryptContent(String content, boolean createIfException) throws\n         }\n         JweEncryptionProvider encryptor = new WrappedKeyJweEncryption(\n                                                         new JweHeaders(Algorithm.RSA_OAEP.getJwtName(), jwtKeyName),  \n-                                                        key.getEncoded(), \n+                                                        key == null ? null : key.getEncoded(), \n                                                         INIT_VECTOR_A1,\n                                                         new RSAOaepKeyEncryptionAlgorithm(publicKey, \n                                                             Algorithm.RSA_OAEP.getJwtName()));",
                "raw_url": "https://github.com/apache/cxf/raw/1fa008dd160dde9c4d614700556ba9f0d8f17fdd/rt/rs/security/oauth-parent/oauth2-jwt/src/test/java/org/apache/cxf/rs/security/oauth2/jwe/JweCompactReaderWriterTest.java",
                "sha": "ef70a3986070f790f798af465c8f8fea2fc0f2d5",
                "status": "modified"
            }
        ],
        "message": "Preventing NPE in a JWE test",
        "parent": "https://github.com/apache/cxf/commit/30529297e058283728aabf4899606a0847326c54",
        "patched_files": [],
        "repo": "cxf",
        "unit_tests": [
            "JweCompactReaderWriterTest.java"
        ]
    },
    "cxf_2040cc7": {
        "bug_id": "cxf_2040cc7",
        "commit": "https://github.com/apache/cxf/commit/2040cc7d79b65de0d61802f62e10b5723e623049",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/cxf/blob/2040cc7d79b65de0d61802f62e10b5723e623049/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceConfiguration.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceConfiguration.java?ref=2040cc7d79b65de0d61802f62e10b5723e623049",
                "deletions": 15,
                "filename": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceConfiguration.java",
                "patch": "@@ -145,29 +145,31 @@ public Boolean isWebMethod(final Method method) {\n         if (method == null\n             || method.getReturnType().equals(Future.class)\n             || method.getReturnType().equals(Response.class)) {\n-            return false;\n+            return Boolean.FALSE;\n         }\n         \n-        if (method != null) {\n-            WebMethod wm = method.getAnnotation(WebMethod.class);\n-            if (wm != null) {\n-                if (wm.exclude()) {\n-                    return Boolean.FALSE;\n-                } else {\n-                    return Boolean.TRUE;\n-                }\n+        WebMethod wm = method.getAnnotation(WebMethod.class);\n+        if (wm != null) {\n+            if (wm.exclude()) {\n+                return Boolean.FALSE;\n             } else {\n-                if (method.getDeclaringClass().isInterface()) {\n-                    return hasWebServiceAnnotation(method);\n-                }\n-                return hasWebServiceAnnotation(method);              \n+                return Boolean.TRUE;\n             }\n+        } \n+        if (method.getDeclaringClass().isInterface()) {\n+            return hasWebServiceAnnotation(method);\n+        }\n+        if (implInfo.getSEIClass() == null) {\n+            return hasWebServiceAnnotation(method);\n         }\n-        return Boolean.FALSE;\n+        return implInfo.getSEIClass().isAssignableFrom(method.getDeclaringClass());\n     }\n \n     @Override\n     public Boolean isOperation(final Method method) {\n+        if (Object.class.equals(method.getDeclaringClass())) {\n+            return false;\n+        }\n         Class implClz = implInfo.getImplementorClass();\n         if (isWebMethod(getDeclaredMethod(implClz, method))) {\n             return true;\n@@ -190,7 +192,7 @@ private Method getDeclaredMethod(Class<?> endpointClass, Method method) {\n             } catch (SecurityException e) {\n                 throw new ServiceConstructionException(e);\n             } catch (NoSuchMethodException e) {\n-                return null;\n+                return isWebMethod(method) ? method : null;\n             }\n         }\n         return method;",
                "raw_url": "https://github.com/apache/cxf/raw/2040cc7d79b65de0d61802f62e10b5723e623049/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceConfiguration.java",
                "sha": "5aa45fff95f5a000114722b002a14509d3d47503",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/2040cc7d79b65de0d61802f62e10b5723e623049/tools/javato/ws/src/test/java/org/apache/cxf/tools/java2ws/JavaToWSTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/javato/ws/src/test/java/org/apache/cxf/tools/java2ws/JavaToWSTest.java?ref=2040cc7d79b65de0d61802f62e10b5723e623049",
                "deletions": 1,
                "filename": "tools/javato/ws/src/test/java/org/apache/cxf/tools/java2ws/JavaToWSTest.java",
                "patch": "@@ -271,7 +271,7 @@ public void testImplClassWithoutSei() throws Exception {\n         File wsdlFile = outputFile(\"tmp.wsdl\");\n         String[] args = new String[] {\"-wsdl\", \"-o\", output.getPath() + \"/tmp.wsdl\", \"-verbose\", \"-s\",\n                                       output.getPath(), \"-frontend\", \"jaxws\", \"-client\", \"-server\",\n-                                      \"org.apache.cxf.tools.fortest.GreeterImpl\"};\n+                                      org.apache.cxf.tools.fortest.GreeterImpl.class.getName()};\n         JavaToWS.main(args);\n         assertTrue(\"Failed to generate WSDL file\", wsdlFile.exists());\n ",
                "raw_url": "https://github.com/apache/cxf/raw/2040cc7d79b65de0d61802f62e10b5723e623049/tools/javato/ws/src/test/java/org/apache/cxf/tools/java2ws/JavaToWSTest.java",
                "sha": "76d8cef8001cf4d2d8a55839959fa3eb7e23c205",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/2040cc7d79b65de0d61802f62e10b5723e623049/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/template/impl.vm",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/template/impl.vm?ref=2040cc7d79b65de0d61802f62e10b5723e623049",
                "deletions": 1,
                "filename": "tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/template/impl.vm",
                "patch": "@@ -34,7 +34,7 @@ import ${import};\n  * \r\n  */\r\n \r\n-@javax.jws.WebService(name = \"$intf.Name\",\r\n+@javax.jws.WebService(\r\n #if ($service.ServiceName != \"\") \r\n                       serviceName = \"$service.ServiceName\",\r\n #end\r",
                "raw_url": "https://github.com/apache/cxf/raw/2040cc7d79b65de0d61802f62e10b5723e623049/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/template/impl.vm",
                "sha": "39a6b3523d4851f1cf087ede23b01d3505918875",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cxf/blob/2040cc7d79b65de0d61802f62e10b5723e623049/tools/wsdlto/test/src/test/java/org/apache/cxf/tools/wsdlto/jaxws/CodeGenBugTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/wsdlto/test/src/test/java/org/apache/cxf/tools/wsdlto/jaxws/CodeGenBugTest.java?ref=2040cc7d79b65de0d61802f62e10b5723e623049",
                "deletions": 2,
                "filename": "tools/wsdlto/test/src/test/java/org/apache/cxf/tools/wsdlto/jaxws/CodeGenBugTest.java",
                "patch": "@@ -94,7 +94,8 @@ public void testLogicalOnlyWSDL() throws Exception {\n \n         Class clz = classLoader.loadClass(\"org.apache.cxf.cxf1678.hello_world_soap_http.GreeterImpl\");\n         WebService webServiceAnn = AnnotationUtil.getPrivClassAnnotation(clz, WebService.class);\n-        assertEquals(\"Greeter\", webServiceAnn.name());\n+        assertEquals(\"org.apache.cxf.cxf1678.hello_world_soap_http.Greeter\",\n+                     webServiceAnn.endpointInterface());\n     }\n \n     @Test\n@@ -119,7 +120,8 @@ public void testBug305773() throws Exception {\n         Class clz = classLoader.loadClass(\"org.apache.cxf.w2j.hello_world_soap_http.GreeterImpl\");\n \n         WebService webServiceAnn = AnnotationUtil.getPrivClassAnnotation(clz, WebService.class);\n-        assertEquals(\"Greeter\", webServiceAnn.name());\n+        assertTrue(\"Impl class should note generate name property value in webService annotation\",\n+                    webServiceAnn.name().equals(\"\"));\n         assertFalse(\"Impl class should generate portName property value in webService annotation\",\n                     webServiceAnn.portName().equals(\"\"));\n         assertFalse(\"Impl class should generate serviceName property value in webService annotation\",",
                "raw_url": "https://github.com/apache/cxf/raw/2040cc7d79b65de0d61802f62e10b5723e623049/tools/wsdlto/test/src/test/java/org/apache/cxf/tools/wsdlto/jaxws/CodeGenBugTest.java",
                "sha": "35f2385695ded2ba54d6950c713dedca5ab3a753",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cxf/blob/2040cc7d79b65de0d61802f62e10b5723e623049/tools/wsdlto/test/src/test/java/org/apache/cxf/tools/wsdlto/jaxws/CodeGenTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/wsdlto/test/src/test/java/org/apache/cxf/tools/wsdlto/jaxws/CodeGenTest.java?ref=2040cc7d79b65de0d61802f62e10b5723e623049",
                "deletions": 1,
                "filename": "tools/wsdlto/test/src/test/java/org/apache/cxf/tools/wsdlto/jaxws/CodeGenTest.java",
                "patch": "@@ -315,7 +315,6 @@ public void testRPCLit() throws Exception {\n         assertTrue(\"Webservice annotation wsdlLocation should begin with file\", ws.wsdlLocation()\n             .startsWith(\"file\"));\n         assertEquals(\"org.apache.cxf.w2j.hello_world_rpclit.GreeterRPCLit\", ws.endpointInterface());\n-        assertEquals(\"GreeterRPCLit\", ws.name());\n \n     }\n ",
                "raw_url": "https://github.com/apache/cxf/raw/2040cc7d79b65de0d61802f62e10b5723e623049/tools/wsdlto/test/src/test/java/org/apache/cxf/tools/wsdlto/jaxws/CodeGenTest.java",
                "sha": "f724b92a0aee31233c6640a0a1034a29a4ff4962",
                "status": "modified"
            }
        ],
        "message": "Update to try and eliminate a NPE with service creation\n[CXF-1756] Remove name attribute from generated impls\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@687463 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/e212736195d6e6d92d4adc30ffd4972d588ce209",
        "patched_files": [
            "JaxWsServiceConfiguration.java",
            "JavaToWS.java",
            "impl.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "CodeGenTest.java",
            "JaxWsServiceConfigurationTest.java",
            "CodeGenBugTest.java",
            "JavaToWSTest.java"
        ]
    },
    "cxf_20663ce": {
        "bug_id": "cxf_20663ce",
        "commit": "https://github.com/apache/cxf/commit/20663ce50eb1210cfbfa765dfadefe702c6ed920",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cxf/blob/20663ce50eb1210cfbfa765dfadefe702c6ed920/core/src/main/java/org/apache/cxf/common/classloader/ClassLoaderUtils.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/common/classloader/ClassLoaderUtils.java?ref=20663ce50eb1210cfbfa765dfadefe702c6ed920",
                "deletions": 11,
                "filename": "core/src/main/java/org/apache/cxf/common/classloader/ClassLoaderUtils.java",
                "patch": "@@ -89,11 +89,10 @@ public static ClassLoader getURLClassLoader(\n      * @param callingClass The Class object of the calling object\n      */\n     public static URL getResource(String resourceName, Class<?> callingClass) {\n-        URL url = Thread.currentThread().getContextClassLoader().getResource(resourceName);\n+        URL url = getContextClassLoader().getResource(resourceName);\n         if (url == null && resourceName.startsWith(\"/\")) {\n             //certain classloaders need it without the leading /\n-            url = Thread.currentThread().getContextClassLoader()\n-                .getResource(resourceName.substring(1));\n+            url = getContextClassLoader().getResource(resourceName.substring(1));\n         }\n \n         ClassLoader cluClassloader = ClassLoaderUtils.class.getClassLoader();\n@@ -151,16 +150,14 @@ public URL nextElement() {\n \n         };\n         try {\n-            urls = Thread.currentThread().getContextClassLoader()\n-                .getResources(resourceName);\n+            urls = getContextClassLoader().getResources(resourceName);\n         } catch (IOException e) {\n             //ignore\n         }\n         if (!urls.hasMoreElements() && resourceName.startsWith(\"/\")) {\n             //certain classloaders need it without the leading /\n             try {\n-                urls = Thread.currentThread().getContextClassLoader()\n-                    .getResources(resourceName.substring(1));\n+                urls = getContextClassLoader().getResources(resourceName.substring(1));\n             } catch (IOException e) {\n                 // ignore\n             }\n@@ -295,16 +292,18 @@ public static InputStream getResourceAsStream(String resourceName, Class<?> call\n         }\n     }\n \n-    private static ClassLoader getContextClassLoader() {\n+    static ClassLoader getContextClassLoader() {\n         final SecurityManager sm = System.getSecurityManager();\n         if (sm != null) {\n             return AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {\n                 public ClassLoader run() {\n-                    return Thread.currentThread().getContextClassLoader();\n+                    ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+                    return loader != null ? loader : ClassLoader.getSystemClassLoader();\n                 }\n             });\n-        }\n-        return Thread.currentThread().getContextClassLoader();\n+        } \n+        ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        return loader != null ? loader : ClassLoader.getSystemClassLoader();\n     }\n \n     private static ClassLoader getClassLoader(final Class<?> clazz) {",
                "raw_url": "https://github.com/apache/cxf/raw/20663ce50eb1210cfbfa765dfadefe702c6ed920/core/src/main/java/org/apache/cxf/common/classloader/ClassLoaderUtils.java",
                "sha": "ce39516665045aa3258e348837d06c6f7bfa7a7a",
                "status": "modified"
            },
            {
                "additions": 79,
                "blob_url": "https://github.com/apache/cxf/blob/20663ce50eb1210cfbfa765dfadefe702c6ed920/core/src/test/java/org/apache/cxf/common/classloader/ClassLoaderUtilsTest.java",
                "changes": 79,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/test/java/org/apache/cxf/common/classloader/ClassLoaderUtilsTest.java?ref=20663ce50eb1210cfbfa765dfadefe702c6ed920",
                "deletions": 0,
                "filename": "core/src/test/java/org/apache/cxf/common/classloader/ClassLoaderUtilsTest.java",
                "patch": "@@ -0,0 +1,79 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.classloader;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class ClassLoaderUtilsTest extends Assert {\n+\n+    private static void setTCCL(ClassLoader loader) {\n+        Thread.currentThread().setContextClassLoader(loader);\n+    }\n+\n+    /**\n+     * This test confirms that the expected thread context classloader\n+     * is returned from the getContextClassLoader method.\n+     */\n+    @Test\n+    public void getContextClassLoader() throws MalformedURLException {\n+        final ClassLoader nullLoader = null;\n+        final ClassLoader jvmAppLoader = ClassLoader.getSystemClassLoader();\n+        final ClassLoader jvmExtLoader = jvmAppLoader.getParent();\n+        final ClassLoader testClassLoader = ClassLoaderUtilsTest.class.getClassLoader();\n+        final ClassLoader clildLoader = new URLClassLoader(new URL[]{new URL(\"file:/.\")});\n+        final ClassLoader previousTCCL = Thread.currentThread().getContextClassLoader();\n+\n+        try {\n+            // TCCL = null\n+            setTCCL(nullLoader);\n+            assertEquals(\"TCCL == null; wrong loader returned; expected JVM App loader\", \n+                         jvmAppLoader, ClassLoaderUtils.getContextClassLoader());\n+\n+            // TCCL = JVM App CL\n+            setTCCL(jvmAppLoader);\n+            assertEquals(\"TCCL == JVM App loader; wrong loader returned; expected JVM App loader\",\n+                         jvmAppLoader, ClassLoaderUtils.getContextClassLoader());\n+\n+            // TCCL = JVM Ext CL\n+            setTCCL(jvmExtLoader);\n+            assertEquals(\"TCCL == JVM Ext loader; wrong loader returned; expected JVM Ext loader\",\n+                         jvmExtLoader, ClassLoaderUtils.getContextClassLoader());\n+\n+            // TCCL = This test class loader (which is likely also the JVM App CL)\n+            setTCCL(testClassLoader);\n+            assertEquals(\"TCCL == this test laoder; wrong loader returned; expected JVM App loader\",\n+                         testClassLoader, ClassLoaderUtils.getContextClassLoader());\n+\n+            // TCCL = a random child classloader\n+            setTCCL(clildLoader);\n+            assertEquals(\"TCCL == random child loader, wrong loader returned; expected child of test class loader\",\n+                         clildLoader, ClassLoaderUtils.getContextClassLoader());\n+\n+        } finally {\n+            // reset the TCCL for other tests\n+            setTCCL(previousTCCL);\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/cxf/raw/20663ce50eb1210cfbfa765dfadefe702c6ed920/core/src/test/java/org/apache/cxf/common/classloader/ClassLoaderUtilsTest.java",
                "sha": "8e1fa18032393f5e0c77454897fd91c044c1ff7f",
                "status": "added"
            }
        ],
        "message": "CXF-7349 Merge branch 'NPE-ClassLoaderUtils' of github.com:andymc12/cxf",
        "parent": "https://github.com/apache/cxf/commit/59c2f5ab18b7b39f1e1cdf74910a6de03dcc8a31",
        "patched_files": [
            "ClassLoaderUtils.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "ClassLoaderUtilsTest.java"
        ]
    },
    "cxf_2158264": {
        "bug_id": "cxf_2158264",
        "commit": "https://github.com/apache/cxf/commit/2158264d2a1826556c6a88a68e82ea46a7fc2fc3",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/2158264d2a1826556c6a88a68e82ea46a7fc2fc3/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/persistence/jdbc/Messages.properties",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/persistence/jdbc/Messages.properties?ref=2158264d2a1826556c6a88a68e82ea46a7fc2fc3",
                "deletions": 1,
                "filename": "rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/persistence/jdbc/Messages.properties",
                "patch": "@@ -24,4 +24,5 @@ CLOSE_FAILED_MSG = Failed to close connection.\n RECONNECT_WAIT_MSG = Waiting for the next reconnect attempt.\n SELECT_DEST_SEQ_FAILED_MSG = Failed to retrieve destination sequences from persistent store.\n SELECT_SRC_SEQ_FAILED_MSG = Failed to retrieve source sequences from persistent store.\n-VERIFY_TABLE_FAILED_MSG = Failed to verify the table definition.\n\\ No newline at end of file\n+VERIFY_TABLE_FAILED_MSG = Failed to verify the table definition.\n+INITIALIZATION_FAILED_MSG = Failed to initialize RMTxStore.\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cxf/raw/2158264d2a1826556c6a88a68e82ea46a7fc2fc3/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/persistence/jdbc/Messages.properties",
                "sha": "ca40717e8240f4a4eda5a009d918b528bf183335",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/2158264d2a1826556c6a88a68e82ea46a7fc2fc3/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/persistence/jdbc/RMTxStore.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/persistence/jdbc/RMTxStore.java?ref=2158264d2a1826556c6a88a68e82ea46a7fc2fc3",
                "deletions": 3,
                "filename": "rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/persistence/jdbc/RMTxStore.java",
                "patch": "@@ -877,7 +877,7 @@ protected void createTables() throws SQLException {\n                 }\n             }\n         } finally {\n-            if (connection == null) {\n+            if (connection == null && con != null) {\n                 con.close();\n             }\n         }\n@@ -1068,7 +1068,6 @@ public synchronized void init() {\n                 cacheStatements();\n             }\n         } catch (SQLException ex) {\n-            ex.printStackTrace();\n             LogUtils.log(LOG, Level.SEVERE, \"CONNECT_EXC\", ex);\n             SQLException se = ex;\n             while (se.getNextException() != null) {\n@@ -1077,7 +1076,7 @@ public synchronized void init() {\n             }\n             throw new RMStoreException(ex);\n         } catch (Throwable ex) {\n-            ex.printStackTrace();\n+            LogUtils.log(LOG, Level.SEVERE, \"INITIALIZATION_FAILED_MSG\", ex);\n         }\n     }   \n     ",
                "raw_url": "https://github.com/apache/cxf/raw/2158264d2a1826556c6a88a68e82ea46a7fc2fc3/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/persistence/jdbc/RMTxStore.java",
                "sha": "5d037e7b23a6a14513c80d85d07558cb0cb3d2ac",
                "status": "modified"
            }
        ],
        "message": "Fix ignorable NPE stack traces in tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1359285 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/55781e1c2eb52fddcc3b62138e2fa79604d69b93",
        "patched_files": [
            "RMTxStore.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "RMTxStoreTest.java"
        ]
    },
    "cxf_21843f1": {
        "bug_id": "cxf_21843f1",
        "commit": "https://github.com/apache/cxf/commit/21843f1697a1a7aed6da589c3e86c05adfd37a96",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/21843f1697a1a7aed6da589c3e86c05adfd37a96/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/RMInInterceptor.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/RMInInterceptor.java?ref=21843f1697a1a7aed6da589c3e86c05adfd37a96",
                "deletions": 0,
                "filename": "rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/RMInInterceptor.java",
                "patch": "@@ -47,6 +47,9 @@ public RMInInterceptor() {\n     @Override\n     public void handleFault(Message message) {\n         message.put(MAPAggregator.class.getName(), true);\n+        if (null == RMContextUtils.getProtocolVariation(message)) {\n+            return;\n+        }\n         if (MessageUtils.isTrue(message.get(RMMessageConstants.DELIVERING_ROBUST_ONEWAY))) {\n             // revert the delivering entry from the destination sequence\n             try {",
                "raw_url": "https://github.com/apache/cxf/raw/21843f1697a1a7aed6da589c3e86c05adfd37a96/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/RMInInterceptor.java",
                "sha": "7b1e7e97fa90c69fa1f2aa1248baf2dfba15cd3e",
                "status": "modified"
            },
            {
                "additions": 82,
                "blob_url": "https://github.com/apache/cxf/blob/21843f1697a1a7aed6da589c3e86c05adfd37a96/rt/ws/rm/src/test/java/org/apache/cxf/ws/rm/RMInInterceptorTest.java",
                "changes": 82,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/rm/src/test/java/org/apache/cxf/ws/rm/RMInInterceptorTest.java?ref=21843f1697a1a7aed6da589c3e86c05adfd37a96",
                "deletions": 0,
                "filename": "rt/ws/rm/src/test/java/org/apache/cxf/ws/rm/RMInInterceptorTest.java",
                "patch": "@@ -282,7 +282,89 @@ public void testProcessDeliveryAssurance() {\n         control.replay(); \n         // TODO\n     }\n+\n+    @Test\n+    public void testProcessInvalidMessage() throws SequenceFault, RMException {\n+        interceptor = new RMInInterceptor();\n+        \n+        Message message = control.createMock(Message.class);\n+        Exchange exchange = control.createMock(Exchange.class);\n+        org.apache.cxf.transport.Destination destination = \n+            control.createMock(org.apache.cxf.transport.Destination.class);\n+        EasyMock.expect(message.getExchange()).andReturn(exchange).anyTimes();\n+        EasyMock.expect(exchange.getDestination()).andReturn(destination).anyTimes();\n+        EasyMock.expect(exchange.getOutMessage()).andReturn(null).anyTimes();\n+        EasyMock.expect(exchange.getOutFaultMessage()).andReturn(null).anyTimes();\n+        control.replay();\n+\n+        try {\n+            interceptor.handle(message);\n+            fail(\"must reject the invalid rm message\");\n+        } catch (Exception e) {\n+            assertTrue(e instanceof RMException);\n+            // verify a partial error text match to exclude an unexpected exception\n+            // (see WSA_REQUIRED_EXC in Messages.properties)\n+            final String text = \"WS-Addressing is required\";\n+            assertTrue(e.getMessage() != null \n+                && e.getMessage().indexOf(text) >= 0);\n+        }\n+        \n+        control.reset();\n+        EasyMock.expect(message.getExchange()).andReturn(exchange).anyTimes();\n+        AddressingPropertiesImpl maps = control.createMock(AddressingPropertiesImpl.class);\n+        EasyMock.expect(maps.getNamespaceURI()).andReturn(Names200408.WSA_NAMESPACE_NAME).anyTimes();\n+        EasyMock.expect(message.get(JAXWSAConstants.SERVER_ADDRESSING_PROPERTIES_INBOUND)).andReturn(maps);\n+        AttributedURIType actionURI = control.createMock(AttributedURIType.class);\n+        EasyMock.expect(maps.getAction()).andReturn(actionURI).times(2);\n+        EasyMock.expect(actionURI.getValue()).andReturn(\"foo\");\n+        EasyMock.expect(message.get(RMMessageConstants.RM_PROPERTIES_INBOUND)).andReturn(rmps);\n+        EasyMock.expect(exchange.getDestination()).andReturn(destination).anyTimes();\n+        EasyMock.expect(exchange.getOutMessage()).andReturn(null).anyTimes();\n+        EasyMock.expect(exchange.getOutFaultMessage()).andReturn(null).anyTimes();\n+\n+        control.replay();\n+        \n+        try {\n+            interceptor.handle(message);\n+            fail(\"must reject the invalid rm message\");\n+        } catch (Exception e) {\n+            System.out.println(e);\n+            assertTrue(e instanceof RMException);\n+            // verify a partial error text match to exclude an unexpected exception\n+            // (see WSRM_REQUIRED_EXC in Messages.properties)\n+            final String text = \"WS-ReliableMessaging is required\";\n+            assertTrue(e.getMessage() != null \n+                && e.getMessage().indexOf(text) >= 0);\n+        }\n+    }\n     \n+    @Test\n+    public void testProcessInvalidMessageOnFault() throws SequenceFault, RMException {\n+        interceptor = new RMInInterceptor();\n+        \n+        Message message = control.createMock(Message.class);\n+        Exchange exchange = control.createMock(Exchange.class);\n+        EasyMock.expect(message.getExchange()).andReturn(exchange).anyTimes();\n+        control.replay();\n+        \n+        try {\n+            interceptor.handleFault(message);\n+        } catch (Exception e) {\n+            fail(\"unexpected exception thrown from handleFault: \" + e);\n+        }\n+        \n+        control.reset();\n+        EasyMock.expect(message.getExchange()).andReturn(exchange).anyTimes();\n+        EasyMock.expect(message.get(RMMessageConstants.DELIVERING_ROBUST_ONEWAY)).andReturn(true).anyTimes();\n+        control.replay();\n+        \n+        try {\n+            interceptor.handleFault(message);\n+        } catch (Exception e) {\n+            fail(\"unexpected exception thrown from handleFault: \" + e);\n+        }\n+    }\n+\n     private Message setupInboundMessage(String action, boolean serverSide) throws RMException {\n         Message message = control.createMock(Message.class);\n         Exchange exchange = control.createMock(Exchange.class);",
                "raw_url": "https://github.com/apache/cxf/raw/21843f1697a1a7aed6da589c3e86c05adfd37a96/rt/ws/rm/src/test/java/org/apache/cxf/ws/rm/RMInInterceptorTest.java",
                "sha": "b5fcfdbcac40d344f1a213c23d6a59191017b06c",
                "status": "modified"
            }
        ],
        "message": "[CXF-4601] invlaid WS-RM messages to a robust WS-RM endpoint may lead to NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1402084 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/e74b62fa7554f68ecf46eb1f578500fedcc65e41",
        "patched_files": [
            "RMInInterceptor.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "RMInInterceptorTest.java"
        ]
    },
    "cxf_26aec87": {
        "bug_id": "cxf_26aec87",
        "commit": "https://github.com/apache/cxf/commit/26aec8750ada9e05d829efbc3e3bba8991710998",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/26aec8750ada9e05d829efbc3e3bba8991710998/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/DefaultLogEventMapper.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/DefaultLogEventMapper.java?ref=26aec8750ada9e05d829efbc3e3bba8991710998",
                "deletions": 1,
                "filename": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/DefaultLogEventMapper.java",
                "patch": "@@ -191,7 +191,8 @@ private boolean isSOAPMessage(Message message) {\n     private String getMessageId(Message message) {\n         AddressingProperties addrProp = ContextUtils.retrieveMAPs(message, false,\n                                                                   MessageUtils.isOutbound(message), false);\n-        return (addrProp != null) ? addrProp.getMessageID().getValue() : UUID.randomUUID().toString();\n+        return addrProp != null && addrProp.getMessageID() != null\n+            ? addrProp.getMessageID().getValue() : UUID.randomUUID().toString();\n     }\n \n     private String getOperationName(Message message) {",
                "raw_url": "https://github.com/apache/cxf/raw/26aec8750ada9e05d829efbc3e3bba8991710998/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/DefaultLogEventMapper.java",
                "sha": "17a07bfcc8c9f38dfbaa89a7efafa323c103fa4e",
                "status": "modified"
            }
        ],
        "message": "[CXF-6721] Preventing NPE",
        "parent": "https://github.com/apache/cxf/commit/f0d6854a8c9e9cf20ec50daa86ae2c5396f365b7",
        "patched_files": [
            "DefaultLogEventMapper.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "DefaultLogEventMapperTest.java"
        ]
    },
    "cxf_288259b": {
        "bug_id": "cxf_288259b",
        "commit": "https://github.com/apache/cxf/commit/288259b274c9ac59803c6c5016467413be980400",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cxf/blob/288259b274c9ac59803c6c5016467413be980400/rt/ws/security/src/main/java/org/apache/cxf/ws/security/policy/interceptors/NegotiationUtils.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/security/src/main/java/org/apache/cxf/ws/security/policy/interceptors/NegotiationUtils.java?ref=288259b274c9ac59803c6c5016467413be980400",
                "deletions": 4,
                "filename": "rt/ws/security/src/main/java/org/apache/cxf/ws/security/policy/interceptors/NegotiationUtils.java",
                "patch": "@@ -275,11 +275,13 @@ static boolean parseSCTResult(SoapMessage message) {\n                             getTokenStore(message).add(token);\n                         }\n                     }\n-                    final SecurityContext sc = token.getSecurityContext();\n-                    if (sc != null) {\n-                        message.put(SecurityContext.class, sc);\n+                    if (token != null) {\n+                        final SecurityContext sc = token.getSecurityContext();\n+                        if (sc != null) {\n+                            message.put(SecurityContext.class, sc);\n+                        }\n+                        return true;\n                     }\n-                    return true;\n                 }\n             }\n         }",
                "raw_url": "https://github.com/apache/cxf/raw/288259b274c9ac59803c6c5016467413be980400/rt/ws/security/src/main/java/org/apache/cxf/ws/security/policy/interceptors/NegotiationUtils.java",
                "sha": "68c05b8643a0fa8617aaf22bc7167f3aeda664fc",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/cxf/blob/288259b274c9ac59803c6c5016467413be980400/services/sts/systests/advanced/src/test/java/org/apache/cxf/systest/sts/secure_conv/SecureConversationTest.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/services/sts/systests/advanced/src/test/java/org/apache/cxf/systest/sts/secure_conv/SecureConversationTest.java?ref=288259b274c9ac59803c6c5016467413be980400",
                "deletions": 0,
                "filename": "services/sts/systests/advanced/src/test/java/org/apache/cxf/systest/sts/secure_conv/SecureConversationTest.java",
                "patch": "@@ -110,6 +110,27 @@ public void testSecureConversationSymmetric() throws Exception {\n         bus.shutdown(true);\n     }\n \n+    @org.junit.Test\n+    public void testSecureConversationSupporting() throws Exception {\n+        SpringBusFactory bf = new SpringBusFactory();\n+        URL busFile = SecureConversationTest.class.getResource(\"cxf-client.xml\");\n+\n+        Bus bus = bf.createBus(busFile.toString());\n+        SpringBusFactory.setDefaultBus(bus);\n+        SpringBusFactory.setThreadDefaultBus(bus);\n+\n+        URL wsdl = SecureConversationTest.class.getResource(\"DoubleIt.wsdl\");\n+        Service service = Service.create(wsdl, SERVICE_QNAME);\n+        QName portQName = new QName(NAMESPACE, \"DoubleItTransportSupportingPort\");\n+        DoubleItPortType transportPort = \n+            service.getPort(portQName, DoubleItPortType.class);\n+        updateAddressPort(transportPort, PORT);\n+\n+        doubleIt(transportPort, 25);\n+        \n+        bus.shutdown(true);\n+    }\n+    \n     private static void doubleIt(DoubleItPortType port, int numToDouble) {\n         int resp = port.doubleIt(numToDouble);\n         assertTrue(resp == 2 * numToDouble);",
                "raw_url": "https://github.com/apache/cxf/raw/288259b274c9ac59803c6c5016467413be980400/services/sts/systests/advanced/src/test/java/org/apache/cxf/systest/sts/secure_conv/SecureConversationTest.java",
                "sha": "921998bd1654e0ae2ab2f89cbde83fd79f1ba8d9",
                "status": "modified"
            },
            {
                "additions": 61,
                "blob_url": "https://github.com/apache/cxf/blob/288259b274c9ac59803c6c5016467413be980400/services/sts/systests/advanced/src/test/resources/org/apache/cxf/systest/sts/secure_conv/DoubleIt.wsdl",
                "changes": 61,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/services/sts/systests/advanced/src/test/resources/org/apache/cxf/systest/sts/secure_conv/DoubleIt.wsdl?ref=288259b274c9ac59803c6c5016467413be980400",
                "deletions": 0,
                "filename": "services/sts/systests/advanced/src/test/resources/org/apache/cxf/systest/sts/secure_conv/DoubleIt.wsdl",
                "patch": "@@ -49,13 +49,32 @@\n             </wsdl:output>\n         </wsdl:operation>\n     </wsdl:binding>\n+    <wsdl:binding name=\"DoubleItTransportSupportingBinding\" type=\"tns:DoubleItPortType\">\n+        <wsp:PolicyReference URI=\"#DoubleItBindingTransportSupportingPolicy\"/>\n+        <soap:binding style=\"document\" transport=\"http://schemas.xmlsoap.org/soap/http\"/>\n+        <wsdl:operation name=\"DoubleIt\">\n+            <soap:operation soapAction=\"\"/>\n+            <wsdl:input>\n+                <soap:body use=\"literal\"/>\n+                <wsp:PolicyReference URI=\"#DoubleItBinding_DoubleIt_Input_Policy\"/>\n+            </wsdl:input>\n+            <wsdl:output>\n+                <soap:body use=\"literal\"/>\n+                <wsp:PolicyReference URI=\"#DoubleItBinding_DoubleIt_Output_Policy\"/>\n+            </wsdl:output>\n+        </wsdl:operation>\n+    </wsdl:binding>\n     <wsdl:service name=\"DoubleItService\">\n         <wsdl:port name=\"DoubleItTransportSecureConvPort\" binding=\"tns:DoubleItTransportSecureConvBinding\">\n             <soap:address location=\"https://localhost:8081/doubleit/services/doubleittransportsecureconv\"/>\n         </wsdl:port>\n         <wsdl:port name=\"DoubleItSymmetricSecureConvPort\" binding=\"tns:DoubleItSymmetricSecureConvBinding\">\n             <soap:address location=\"http://localhost:8082/doubleit/services/doubleitsymmetricsecureconv\"/>\n         </wsdl:port>\n+        <wsdl:port name=\"DoubleItTransportSupportingPort\" \n+                   binding=\"tns:DoubleItTransportSupportingBinding\">\n+            <soap:address location=\"https://localhost:8081/doubleit/services/doubleittransportsupporting\"/>\n+        </wsdl:port>\n     </wsdl:service>\n     <wsp:Policy wsu:Id=\"DoubleItBindingTransportSecureConvPolicy\">\n         <wsp:ExactlyOne>\n@@ -226,6 +245,48 @@\n             </wsp:All>\n         </wsp:ExactlyOne>\n     </wsp:Policy>\n+    <wsp:Policy wsu:Id=\"DoubleItBindingTransportSupportingPolicy\">\n+        <wsp:ExactlyOne>\n+            <wsp:All>\n+                <wsam:Addressing wsp:Optional=\"false\">\n+                    <wsp:Policy/>\n+                </wsam:Addressing>\n+                <sp:TransportBinding xmlns:sp=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\">\n+                    <wsp:Policy>\n+                        <sp:TransportToken>\n+                            <wsp:Policy>\n+                                <sp:HttpsToken>\n+                                    <wsp:Policy/>\n+                                </sp:HttpsToken>\n+                            </wsp:Policy>\n+                        </sp:TransportToken>\n+                        <sp:AlgorithmSuite>\n+                            <wsp:Policy>\n+                                <sp:Basic128/>\n+                            </wsp:Policy>\n+                        </sp:AlgorithmSuite>\n+                        <sp:Layout>\n+                            <wsp:Policy>\n+                                <sp:Lax/>\n+                            </wsp:Policy>\n+                        </sp:Layout>\n+                        <sp:IncludeTimestamp/>\n+                    </wsp:Policy>\n+                </sp:TransportBinding>\n+                <sp:SupportingTokens xmlns:sp=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\">\n+                    <wsp:Policy>\n+                        <sp:SecureConversationToken sp:IncludeToken=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient\">\n+                            <wsp:Policy>\n+                                <sp:BootstrapPolicy>\n+                                    <wsp:Policy />\n+                                </sp:BootstrapPolicy>\n+                            </wsp:Policy>\n+                        </sp:SecureConversationToken>\n+                    </wsp:Policy>\n+                </sp:SupportingTokens>\n+            </wsp:All>\n+        </wsp:ExactlyOne>\n+    </wsp:Policy>\n     <wsp:Policy wsu:Id=\"DoubleItBinding_DoubleIt_Input_Policy\">\n         <wsp:ExactlyOne>\n             <wsp:All>",
                "raw_url": "https://github.com/apache/cxf/raw/288259b274c9ac59803c6c5016467413be980400/services/sts/systests/advanced/src/test/resources/org/apache/cxf/systest/sts/secure_conv/DoubleIt.wsdl",
                "sha": "d860e53063379c7803e20602f52d6ad39441b61c",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cxf/blob/288259b274c9ac59803c6c5016467413be980400/services/sts/systests/advanced/src/test/resources/org/apache/cxf/systest/sts/secure_conv/cxf-client.xml",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/services/sts/systests/advanced/src/test/resources/org/apache/cxf/systest/sts/secure_conv/cxf-client.xml?ref=288259b274c9ac59803c6c5016467413be980400",
                "deletions": 0,
                "filename": "services/sts/systests/advanced/src/test/resources/org/apache/cxf/systest/sts/secure_conv/cxf-client.xml",
                "patch": "@@ -49,6 +49,12 @@\n             <entry key=\"ws-security.sts.client\" value-ref=\"stsClient\"/>\n         </jaxws:properties>\n     </jaxws:client>\n+    <jaxws:client name=\"{http://www.example.org/contract/DoubleIt}DoubleItTransportSupportingPort\" createdFromAPI=\"true\">\n+        <jaxws:properties>\n+            <entry key=\"ws-security.sts.client\" value-ref=\"stsClient\"/>\n+        </jaxws:properties>\n+    </jaxws:client>\n+    \n     <http:conduit name=\"https://localhost:.*\">\n         <http:tlsClientParameters disableCNCheck=\"true\">\n             <sec:trustManagers>",
                "raw_url": "https://github.com/apache/cxf/raw/288259b274c9ac59803c6c5016467413be980400/services/sts/systests/advanced/src/test/resources/org/apache/cxf/systest/sts/secure_conv/cxf-client.xml",
                "sha": "2349fb93c57d98eff882eefa9974146b12a6222a",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/cxf/blob/288259b274c9ac59803c6c5016467413be980400/services/sts/systests/advanced/src/test/resources/org/apache/cxf/systest/sts/secure_conv/cxf-service.xml",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/services/sts/systests/advanced/src/test/resources/org/apache/cxf/systest/sts/secure_conv/cxf-service.xml?ref=288259b274c9ac59803c6c5016467413be980400",
                "deletions": 0,
                "filename": "services/sts/systests/advanced/src/test/resources/org/apache/cxf/systest/sts/secure_conv/cxf-service.xml",
                "patch": "@@ -55,6 +55,25 @@\n             </entry>\n         </jaxws:properties>\n     </jaxws:endpoint>\n+    <jaxws:endpoint xmlns:s=\"http://www.example.org/contract/DoubleIt\" id=\"doubleittransportsupporting\" implementor=\"org.apache.cxf.systest.sts.common.DoubleItPortTypeImpl\" endpointName=\"s:DoubleItTransportSupportingPort\" serviceName=\"s:DoubleItService\" depends-on=\"ClientAuthHttpsSettings\" address=\"https://localhost:${testutil.ports.Server}/doubleit/services/doubleittransportsupporting\" wsdlLocation=\"org/apache/cxf/systest/sts/secure_conv/DoubleIt.wsdl\">\n+        <jaxws:properties>\n+            <entry key=\"ws-security.callback-handler\" value=\"org.apache.cxf.systest.sts.common.CommonCallbackHandler\"/>\n+            <entry key=\"ws-security.signature.properties\" value=\"serviceKeystore.properties\"/>\n+            <entry key=\"ws-security.sct.validator\">\n+                <bean class=\"org.apache.cxf.systest.sts.secure_conv.SCTTokenValidator\"/>\n+            </entry>\n+            <entry key=\"ws-security.sts.client\">\n+                <bean class=\"org.apache.cxf.ws.security.trust.STSClient\">\n+                    <constructor-arg ref=\"cxf\"/>\n+                    <property name=\"wsdlLocation\" value=\"https://localhost:${testutil.ports.STSServer}/SecurityTokenService/TransportSCT?wsdl\"/>\n+                    <property name=\"serviceName\" value=\"{http://docs.oasis-open.org/ws-sx/ws-trust/200512/}SecurityTokenService\"/>\n+                    <property name=\"endpointName\" value=\"{http://docs.oasis-open.org/ws-sx/ws-trust/200512/}Transport_Port\"/>\n+                    <property name=\"tokenType\" value=\"http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0\"/>\n+                </bean>\n+            </entry>\n+        </jaxws:properties>\n+    </jaxws:endpoint>\n+    \n     <httpj:engine-factory id=\"ClientAuthHttpsSettings\" bus=\"cxf\">\n         <httpj:engine port=\"${testutil.ports.Server}\">\n             <httpj:tlsServerParameters>",
                "raw_url": "https://github.com/apache/cxf/raw/288259b274c9ac59803c6c5016467413be980400/services/sts/systests/advanced/src/test/resources/org/apache/cxf/systest/sts/secure_conv/cxf-service.xml",
                "sha": "6ddfd39ade647db1ee77e6bd499d5125d09da725",
                "status": "modified"
            }
        ],
        "message": "Another SCT system test + a NPE fix",
        "parent": "https://github.com/apache/cxf/commit/bc00a781cda125b815297a2829991430be877146",
        "patched_files": [
            "NegotiationUtils.java",
            "DoubleIt.java",
            "cxf-service.java",
            "cxf-client.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "SecureConversationTest.java"
        ]
    },
    "cxf_2b8ccfb": {
        "bug_id": "cxf_2b8ccfb",
        "commit": "https://github.com/apache/cxf/commit/2b8ccfbe36c007b74e5d93690fa68e3a974c0bf2",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/2b8ccfbe36c007b74e5d93690fa68e3a974c0bf2/rt/transports/http/src/main/java/org/apache/cxf/transport/http/Headers.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/http/Headers.java?ref=2b8ccfbe36c007b74e5d93690fa68e3a974c0bf2",
                "deletions": 1,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/http/Headers.java",
                "patch": "@@ -362,7 +362,7 @@ private String getContentTypeFromMessage() {\n     protected void copyToResponse(HttpServletResponse response) {\r\n         String contentType = getContentTypeFromMessage();\r\n  \r\n-        if (!headers.containsKey(Message.CONTENT_TYPE)) {\r\n+        if (!headers.containsKey(Message.CONTENT_TYPE) && contentType != null) {\r\n             response.setContentType(contentType);\r\n         }\r\n \r",
                "raw_url": "https://github.com/apache/cxf/raw/2b8ccfbe36c007b74e5d93690fa68e3a974c0bf2/rt/transports/http/src/main/java/org/apache/cxf/transport/http/Headers.java",
                "sha": "b9ad81f4b26c561747d966e920eb059ced79eaff",
                "status": "modified"
            }
        ],
        "message": "[CXF-3232] Add a NPE guard around setting the content type\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1057390 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/9e0729a6977313f550d34e03686d80abe8784d61",
        "patched_files": [
            "Headers.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "HeadersTest.java"
        ]
    },
    "cxf_2c81965": {
        "bug_id": "cxf_2c81965",
        "commit": "https://github.com/apache/cxf/commit/2c81965cfe31529b2364326facca5703a423199d",
        "file": [
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/cxf/blob/2c81965cfe31529b2364326facca5703a423199d/rt/core/src/main/java/org/apache/cxf/attachment/LazyDataSource.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/main/java/org/apache/cxf/attachment/LazyDataSource.java?ref=2c81965cfe31529b2364326facca5703a423199d",
                "deletions": 0,
                "filename": "rt/core/src/main/java/org/apache/cxf/attachment/LazyDataSource.java",
                "patch": "@@ -22,7 +22,9 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.List;\n \n import javax.activation.DataSource;\n \n@@ -53,6 +55,27 @@ private synchronized void load() {\n                 }\n             }\n         }\n+        if (dataSource == null) {\n+            //couldn't find it, build up error message\n+            List<String> ids = new ArrayList<String>(10);\n+            for (Attachment a : attachments) {\n+                ids.add(a.getId());\n+                if (a.getId().equals(id)) {\n+                    this.dataSource = a.getDataHandler().getDataSource();\n+                    if (dataSource != null) {\n+                        ids = null;\n+                        break;\n+                    } else {\n+                        throw new IllegalStateException(\"Could not get DataSource for \"\n+                                                        + \"attachment of id \" + id);\n+                    }\n+                }\n+            }\n+            if (ids != null) {\n+                throw new IllegalStateException(\"No attachment for \"\n+                                                + \" id \" + id + \" found in \" + ids);\n+            }\n+        }\n     }\n     \n     public String getContentType() {",
                "raw_url": "https://github.com/apache/cxf/raw/2c81965cfe31529b2364326facca5703a423199d/rt/core/src/main/java/org/apache/cxf/attachment/LazyDataSource.java",
                "sha": "483f8479d1e53dcf1124f32889e7efd967beb1b8",
                "status": "modified"
            }
        ],
        "message": "[CXF-3477] Stick a better error message in (rather than an NPE) if an\nattachment couldn't be found.\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1129987 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/3ce1441e61233845b8fef403536bd6df323ad876",
        "patched_files": [
            "LazyDataSource.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "LazyDataSourceTest.java"
        ]
    },
    "cxf_2cf78fe": {
        "bug_id": "cxf_2cf78fe",
        "commit": "https://github.com/apache/cxf/commit/2cf78fe07827e899067b9711aaeb3f6748feb81c",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/2cf78fe07827e899067b9711aaeb3f6748feb81c/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/interceptors/WrapperClassInInterceptor.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/interceptors/WrapperClassInInterceptor.java?ref=2cf78fe07827e899067b9711aaeb3f6748feb81c",
                "deletions": 1,
                "filename": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/interceptors/WrapperClassInInterceptor.java",
                "patch": "@@ -55,7 +55,8 @@ public WrapperClassInInterceptor() {\n     public void handleMessage(Message message) throws Fault {\n         Exchange ex = message.getExchange();\n         BindingOperationInfo boi = ex.get(BindingOperationInfo.class);\n-        if (boi == null) {\n+        if (Boolean.TRUE.equals(message.get(Message.PARTIAL_RESPONSE_MESSAGE)) \n+            || boi == null) {\n             return;\n         }\n                ",
                "raw_url": "https://github.com/apache/cxf/raw/2cf78fe07827e899067b9711aaeb3f6748feb81c/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/interceptors/WrapperClassInInterceptor.java",
                "sha": "d2cd5a5d7131e03617f59cd098a961321807170b",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/cxf/blob/2cf78fe07827e899067b9711aaeb3f6748feb81c/systests/src/test/java/org/apache/cxf/systest/ws/rm/SequenceTest.java",
                "changes": 41,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/src/test/java/org/apache/cxf/systest/ws/rm/SequenceTest.java?ref=2cf78fe07827e899067b9711aaeb3f6748feb81c",
                "deletions": 17,
                "filename": "systests/src/test/java/org/apache/cxf/systest/ws/rm/SequenceTest.java",
                "patch": "@@ -28,6 +28,7 @@\n import java.util.concurrent.Executors;\n import java.util.logging.Logger;\n \n+import javax.xml.namespace.QName;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n import javax.xml.transform.Transformer;\n@@ -39,8 +40,8 @@\n import javax.xml.ws.BindingProvider;\n import javax.xml.ws.Dispatch;\n import javax.xml.ws.Service;\n-\n import javax.xml.ws.WebServiceException;\n+import javax.xml.ws.handler.MessageContext;\n \n import org.w3c.dom.Document;\n \n@@ -92,8 +93,12 @@\n public class SequenceTest extends AbstractBusClientServerTestBase {\n \n     private static final Logger LOG = LogUtils.getLogger(SequenceTest.class);\n+    private static final QName GREETMEONEWAY_NAME \n+        = new QName(\"http://cxf.apache.org/greeter_control\", \"greetMeOneWay\");\n     private static final String GREETMEONEWAY_ACTION \n         = \"http://cxf.apache.org/greeter_control/Greeter/greetMeOneWayRequest\";\n+    private static final QName GREETME_NAME \n+        = new QName(\"http://cxf.apache.org/greeter_control\", \"greetMe\");\n     private static final String GREETME_ACTION\n         = \"http://cxf.apache.org/greeter_control/Greeter/greetMeRequest\";\n     private static final String GREETME_RESPONSE_ACTION\n@@ -188,23 +193,24 @@ public void testOnewayAnonymousAcks() throws Exception {\n         greeter.greetMeOneWay(\"twice\");\n         greeter.greetMeOneWay(\"thrice\");\n \n-        verifyOnewayAnonymousAcks(GREETMEONEWAY_ACTION);\n+        verifyOnewayAnonymousAcks();\n     }\n \n     @Test\n     public void testOnewayAnonymousAcksDispatch() throws Exception {\n         init(\"org/apache/cxf/systest/ws/rm/rminterceptors.xml\", false, true);\n \n+        dispatch.getRequestContext().put(MessageContext.WSDL_OPERATION,\n+                                         GREETMEONEWAY_NAME);\n+\n         dispatch.invokeOneWay(getDOMRequest(\"One\", true));\n         dispatch.invokeOneWay(getDOMRequest(\"Two\", true));\n         dispatch.invokeOneWay(getDOMRequest(\"Three\", true));\n \n-        String dispatchStyleAction = \n-            \"http://cxf.apache.org/jaxws/dispatch/Greeter/InvokeOneWayRequest\";\n-        verifyOnewayAnonymousAcks(dispatchStyleAction);\n+        verifyOnewayAnonymousAcks();\n     }\n \n-    private void verifyOnewayAnonymousAcks(String greeterAction) throws Exception {\n+    private void verifyOnewayAnonymousAcks() throws Exception {\n         // three application messages plus createSequence\n \n         awaitMessages(4, 4);\n@@ -213,9 +219,9 @@ private void verifyOnewayAnonymousAcks(String greeterAction) throws Exception {\n \n         mf.verifyMessages(4, true);\n         String[] expectedActions = new String[] {RMConstants.getCreateSequenceAction(),\n-                                                 greeterAction,\n-                                                 greeterAction,\n-                                                 greeterAction};\n+                                                 GREETMEONEWAY_ACTION,\n+                                                 GREETMEONEWAY_ACTION,\n+                                                 GREETMEONEWAY_ACTION};\n         mf.verifyActions(expectedActions, true);\n         mf.verifyMessageNumbers(new String[] {null, \"1\", \"2\", \"3\"}, true);\n \n@@ -422,23 +428,24 @@ public void testTwowayNonAnonymous() throws Exception {\n         assertEquals(\"TWO\", greeter.greetMe(\"two\"));\n         assertEquals(\"THREE\", greeter.greetMe(\"three\"));\n \n-        verifyTwowayNonAnonymous(GREETME_ACTION);\n+        verifyTwowayNonAnonymous();\n     }\n \n     @Test\n     public void testTwowayNonAnonymousDispatch() throws Exception {\n         init(\"org/apache/cxf/systest/ws/rm/rminterceptors.xml\", true, true);\n \n+        dispatch.getRequestContext().put(MessageContext.WSDL_OPERATION,\n+                                         GREETME_NAME);\n+\n         verifyDOMResponse(dispatch.invoke(getDOMRequest(\"One\")), \"ONE\");\n         verifyDOMResponse(dispatch.invoke(getDOMRequest(\"Two\")), \"TWO\");\n         verifyDOMResponse(dispatch.invoke(getDOMRequest(\"Three\")), \"THREE\");\n \n-        String dispatchStyleAction = \n-            \"http://cxf.apache.org/jaxws/dispatch/Greeter/InvokeRequest\";\n-        verifyTwowayNonAnonymous(dispatchStyleAction);\n+        verifyTwowayNonAnonymous();\n     }\n \n-    private void verifyTwowayNonAnonymous(String greeterAction) throws Exception {\n+    private void verifyTwowayNonAnonymous() throws Exception {\n     \n         // CreateSequence and three greetMe messages\n         // TODO there should be partial responses to the decoupled responses!\n@@ -450,9 +457,9 @@ private void verifyTwowayNonAnonymous(String greeterAction) throws Exception {\n         \n         mf.verifyMessages(4, true);\n         String[] expectedActions = new String[] {RMConstants.getCreateSequenceAction(), \n-                                                 greeterAction,\n-                                                 greeterAction, \n-                                                 greeterAction};\n+                                                 GREETME_ACTION,\n+                                                 GREETME_ACTION, \n+                                                 GREETME_ACTION};\n         mf.verifyActions(expectedActions, true);\n         mf.verifyMessageNumbers(new String[] {null, \"1\", \"2\", \"3\"}, true);\n         mf.verifyLastMessage(new boolean[] {false, false, false, false}, true);",
                "raw_url": "https://github.com/apache/cxf/raw/2cf78fe07827e899067b9711aaeb3f6748feb81c/systests/src/test/java/org/apache/cxf/systest/ws/rm/SequenceTest.java",
                "sha": "2f0c28d5fd7f7b2ef26134d7844dc3432e0dff71",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE exception in Dispatch client in receipt of partial response when operation was provided via Message.WSDL_OPERATION property on request context.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@775926 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/8747a0eaabfed393b1c2b2320616ea727d4d0521",
        "patched_files": [
            "WrapperClassInInterceptor.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "SequenceTest.java"
        ]
    },
    "cxf_2d3145f": {
        "bug_id": "cxf_2d3145f",
        "commit": "https://github.com/apache/cxf/commit/2d3145fe8323533e371b11f40888ecc70a424df7",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/2d3145fe8323533e371b11f40888ecc70a424df7/core/src/main/java/org/apache/cxf/interceptor/LoggingInInterceptor.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/interceptor/LoggingInInterceptor.java?ref=2d3145fe8323533e371b11f40888ecc70a424df7",
                "deletions": 1,
                "filename": "core/src/main/java/org/apache/cxf/interceptor/LoggingInInterceptor.java",
                "patch": "@@ -78,7 +78,7 @@ public LoggingInInterceptor(String id, PrintWriter w) {\n     \n     public void handleMessage(Message message) throws Fault {\n         Logger logger = getMessageLogger(message);\n-        if (writer != null || logger.isLoggable(Level.INFO)) {\n+        if (logger != null && (writer != null || logger.isLoggable(Level.INFO))) {\n             logging(logger, message);\n         }\n     }",
                "raw_url": "https://github.com/apache/cxf/raw/2d3145fe8323533e371b11f40888ecc70a424df7/core/src/main/java/org/apache/cxf/interceptor/LoggingInInterceptor.java",
                "sha": "d214f462d0ade282c2d7f35c11da801fac17b967",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/2d3145fe8323533e371b11f40888ecc70a424df7/core/src/main/java/org/apache/cxf/interceptor/LoggingOutInterceptor.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/interceptor/LoggingOutInterceptor.java?ref=2d3145fe8323533e371b11f40888ecc70a424df7",
                "deletions": 1,
                "filename": "core/src/main/java/org/apache/cxf/interceptor/LoggingOutInterceptor.java",
                "patch": "@@ -69,7 +69,7 @@ public void handleMessage(Message message) throws Fault {\n             return;\n         }\n         Logger logger = getMessageLogger(message);\n-        if (logger.isLoggable(Level.INFO) || writer != null) {\n+        if (logger != null && (logger.isLoggable(Level.INFO) || writer != null)) {\n             // Write the output while caching it for the log message\n             boolean hasLogged = message.containsKey(LOG_SETUP);\n             if (!hasLogged) {",
                "raw_url": "https://github.com/apache/cxf/raw/2d3145fe8323533e371b11f40888ecc70a424df7/core/src/main/java/org/apache/cxf/interceptor/LoggingOutInterceptor.java",
                "sha": "043aa373198993d6edefafcc123c088a5145194d",
                "status": "modified"
            }
        ],
        "message": "NullPointerException when using org.apache.cxf.logging.enable and logging interceptors\nThis closes #225",
        "parent": "https://github.com/apache/cxf/commit/dd81c1eb76d853f735b2265a18653ab862298468",
        "patched_files": [
            "LoggingInInterceptor.java",
            "LoggingOutInterceptor.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "LoggingOutInterceptorTest.java",
            "LoggingInInterceptorTest.java"
        ]
    },
    "cxf_2e1f619": {
        "bug_id": "cxf_2e1f619",
        "commit": "https://github.com/apache/cxf/commit/2e1f619f65e6981c7ad3bf957078e9f1967d49c7",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cxf/blob/2e1f619f65e6981c7ad3bf957078e9f1967d49c7/rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/ContextUtils.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/ContextUtils.java?ref=2e1f619f65e6981c7ad3bf957078e9f1967d49c7",
                "deletions": 5,
                "filename": "rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/ContextUtils.java",
                "patch": "@@ -360,7 +360,7 @@ public static boolean hasEmptyAction(AddressingProperties maps) {\n      * @param inMAPs the inbound MAPs\n      * @param inMessage the current message\n      */\n-    public static void rebaseResponse(final EndpointReferenceType reference,\n+    public static void rebaseResponse(EndpointReferenceType reference,\n                                       AddressingProperties inMAPs,\n                                       final Message inMessage) {\n         \n@@ -382,12 +382,13 @@ public static void rebaseResponse(final EndpointReferenceType reference,\n             }\n             \n             try {\n+                if (reference == null) {\n+                    reference = ContextUtils.getNoneEndpointReference();\n+                }\n                 exchange.setOutMessage(partialResponse);\n                 Conduit backChannel = target.getBackChannel(inMessage,\n                                                             partialResponse,\n-                                                            reference == null\n-                                                            ? ContextUtils.getNoneEndpointReference()\n-                                                            : reference);\n+                                                            reference);\n \n                 if (backChannel != null) {\n                     // set up interceptor chains and send message\n@@ -419,7 +420,8 @@ public static void rebaseResponse(final EndpointReferenceType reference,\n                     exchange.setOutMessage(fullResponse);\n                     \n                     Destination destination = createDecoupledDestination(\n-                        exchange, reference);\n+                        exchange, \n+                        reference);\n                     exchange.setDestination(destination);\n                          \n                     ",
                "raw_url": "https://github.com/apache/cxf/raw/2e1f619f65e6981c7ad3bf957078e9f1967d49c7/rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/ContextUtils.java",
                "sha": "6835eb9bc58af7608e204e2eb310a3e5c54eccd7",
                "status": "modified"
            }
        ],
        "message": "[CXF-3349] Fix possible NPE in WS-RM scenarios\nPatch suggestion from Aki Yoshida applied\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1072196 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/3694146adde1a15ceecc3aa3dc465b5d11c6eccc",
        "patched_files": [
            "ContextUtils.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "ContextUtilsTest.java"
        ]
    },
    "cxf_32caf7f": {
        "bug_id": "cxf_32caf7f",
        "commit": "https://github.com/apache/cxf/commit/32caf7feff3b8730d797f428be5d0d80148be062",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/32caf7feff3b8730d797f428be5d0d80148be062/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/DefaultParamConverterProvider.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/DefaultParamConverterProvider.java?ref=32caf7feff3b8730d797f428be5d0d80148be062",
                "deletions": 1,
                "filename": "rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/DefaultParamConverterProvider.java",
                "patch": "@@ -48,7 +48,7 @@ public Date fromString(final String value) {\n         \n         @Override\n         public String toString(final Date value) {\n-            return DateTools.dateToString(value, Resolution.MILLISECOND);\n+            return value != null ? DateTools.dateToString(value, Resolution.MILLISECOND) : null;\n         }\n     }\n     ",
                "raw_url": "https://github.com/apache/cxf/raw/32caf7feff3b8730d797f428be5d0d80148be062/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/DefaultParamConverterProvider.java",
                "sha": "67b01edec6e63d1fc8892900c36bace40bf80096",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/cxf/blob/32caf7feff3b8730d797f428be5d0d80148be062/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/extraction/BookCatalog.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/extraction/BookCatalog.java?ref=32caf7feff3b8730d797f428be5d0d80148be062",
                "deletions": 0,
                "filename": "systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/extraction/BookCatalog.java",
                "patch": "@@ -29,6 +29,7 @@\n \n import javax.activation.DataHandler;\n import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n@@ -113,6 +114,20 @@ public Response addBook(final MultipartBody body) throws Exception {\n             reader.close();\n         }\n     }\n+    \n+    @DELETE\n+    public Response delete() throws IOException {\n+        final IndexWriter writer = new IndexWriter(directory, config);\n+        \n+        try {\n+            writer.deleteAll();\n+            writer.commit();\n+        } finally {\n+            writer.close();\n+        }  \n+        \n+        return Response.ok().build();\n+    }\n }\n \n ",
                "raw_url": "https://github.com/apache/cxf/raw/32caf7feff3b8730d797f428be5d0d80148be062/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/extraction/BookCatalog.java",
                "sha": "76785d5db3b141f48c5c03ef03efa581dead4e55",
                "status": "modified"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/cxf/blob/32caf7feff3b8730d797f428be5d0d80148be062/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/extraction/JAXRSClientServerTikaTest.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/extraction/JAXRSClientServerTikaTest.java?ref=32caf7feff3b8730d797f428be5d0d80148be062",
                "deletions": 1,
                "filename": "systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/extraction/JAXRSClientServerTikaTest.java",
                "patch": "@@ -35,6 +35,7 @@\n import org.apache.cxf.jaxrs.ext.multipart.MultipartBody;\n import org.apache.cxf.jaxrs.ext.search.SearchBean;\n import org.apache.cxf.jaxrs.ext.search.SearchContextProvider;\n+import org.apache.cxf.jaxrs.ext.search.SearchUtils;\n import org.apache.cxf.jaxrs.ext.search.fiql.FiqlParser;\n import org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider;\n import org.apache.cxf.jaxrs.model.AbstractResourceInfo;\n@@ -43,6 +44,7 @@\n import org.apache.cxf.testutil.common.AbstractBusTestServerBase;\n import org.apache.lucene.search.ScoreDoc;\n import org.junit.BeforeClass;\n+import org.junit.Before;\n import org.junit.Ignore;\n import org.junit.Test;\n \n@@ -57,6 +59,7 @@ protected void run() {\n             final Map< String, Object > properties = new HashMap< String, Object >();        \n             properties.put(\"search.query.parameter.name\", \"$filter\");\n             properties.put(\"search.parser\", new FiqlParser< SearchBean >(SearchBean.class));\n+            properties.put(SearchUtils.DATE_FORMAT_PROPERTY, \"yyyy/MM/dd\");\n             \n             sf.setResourceClasses(BookCatalog.class);\n             sf.setResourceProvider(BookCatalog.class, new SingletonResourceProvider(new BookCatalog()));\n@@ -90,6 +93,11 @@ public static void startServers() throws Exception {\n         createStaticBus();\n     }\n     \n+    @Before\n+    public void setUp() {\n+        createWebClient(\"/catalog\").delete();        \n+    }\n+    \n     @Test\n     public void testUploadIndexAndSearchPdfFile() {\n         final WebClient wc = createWebClient(\"/catalog\").type(MediaType.MULTIPART_FORM_DATA);\n@@ -99,9 +107,23 @@ public void testUploadIndexAndSearchPdfFile() {\n             getClass().getResourceAsStream(\"/files/testPDF.pdf\"), disposition);\n         wc.post(new MultipartBody(attachment));\n         \n-        final Collection<ScoreDoc> hits = search(\"modified=le=2007-09-16\");        \n+        final Collection<ScoreDoc> hits = search(\"modified=le=2007-09-16T09:00:00\");        \n         assertEquals(hits.size(), 1);\n     }\n+    \n+    @Test\n+    public void testUploadIndexAndSearchPdfFileUsingUserDefinedDatePattern() {\n+        final WebClient wc = createWebClient(\"/catalog\").type(MediaType.MULTIPART_FORM_DATA);\n+        \n+        final ContentDisposition disposition = new ContentDisposition(\"attachment;filename=testPDF.pdf\");\n+        final Attachment attachment = new Attachment(\"root\", \n+            getClass().getResourceAsStream(\"/files/testPDF.pdf\"), disposition);\n+        wc.post(new MultipartBody(attachment));\n+        \n+        // Use user-defined date pattern\n+        final Collection<ScoreDoc> custom = search(\"modified=le=2007/09/16\");        \n+        assertEquals(custom.size(), 1);\n+    }\n \n     @SuppressWarnings(\"unchecked\")\n     private Collection<ScoreDoc> search(final String expression) {",
                "raw_url": "https://github.com/apache/cxf/raw/32caf7feff3b8730d797f428be5d0d80148be062/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/extraction/JAXRSClientServerTikaTest.java",
                "sha": "2cb7e24fc88a00bf374cac606b5c8358ab8d5cfe",
                "status": "modified"
            }
        ],
        "message": "CXF-5549: Introduce Tika Search Visitor. Added contextual property systest and fixed NPE (DefaultParamConverterProvider)",
        "parent": "https://github.com/apache/cxf/commit/ebd537875cc6a785421cecacfb187d0b8f4d0988",
        "patched_files": [
            "DefaultParamConverterProvider.java",
            "BookCatalog.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JAXRSClientServerTikaTest.java"
        ]
    },
    "cxf_3453c6c": {
        "bug_id": "cxf_3453c6c",
        "commit": "https://github.com/apache/cxf/commit/3453c6ccac9bb829af8ecc65823e66b68db3e831",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/3453c6ccac9bb829af8ecc65823e66b68db3e831/rt/rs/description-swagger/src/main/java/org/apache/cxf/jaxrs/swagger/Swagger2Feature.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/description-swagger/src/main/java/org/apache/cxf/jaxrs/swagger/Swagger2Feature.java?ref=3453c6ccac9bb829af8ecc65823e66b68db3e831",
                "deletions": 1,
                "filename": "rt/rs/description-swagger/src/main/java/org/apache/cxf/jaxrs/swagger/Swagger2Feature.java",
                "patch": "@@ -305,7 +305,7 @@ protected void initBeanConfig(BeanConfig beanConfig, Properties props) {\n         if (theLicense == null && !licenseWasSet) {\n             if (props != null) {\n                 theLicense = props.getProperty(LICENSE_PROPERTY);\n-                if (theLicense.isEmpty()) {\n+                if (theLicense != null && theLicense.isEmpty()) {\n                     theLicense = null;\n                 }\n             } else {",
                "raw_url": "https://github.com/apache/cxf/raw/3453c6ccac9bb829af8ecc65823e66b68db3e831/rt/rs/description-swagger/src/main/java/org/apache/cxf/jaxrs/swagger/Swagger2Feature.java",
                "sha": "4679e6e27e2c9e049388c0a43280bfe0f6c33b47",
                "status": "modified"
            }
        ],
        "message": "fixed NPE",
        "parent": "https://github.com/apache/cxf/commit/70ac8edcc95d88ae4a338005ffd07fe149b46793",
        "patched_files": [
            "Swagger2Feature.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "Swagger2FeatureTest.java"
        ]
    },
    "cxf_351364f": {
        "bug_id": "cxf_351364f",
        "commit": "https://github.com/apache/cxf/commit/351364f7f32970754af4583ffc0626b177b023e9",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/351364f7f32970754af4583ffc0626b177b023e9/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/PrettyLoggingFilter.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/PrettyLoggingFilter.java?ref=351364f7f32970754af4583ffc0626b177b023e9",
                "deletions": 0,
                "filename": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/PrettyLoggingFilter.java",
                "patch": "@@ -66,6 +66,7 @@ public String getPrettyMessage(String message, String encoding) {\n             // that can occur when we set a limit and cur the rest off\n             XMLStreamWriter xwriter = StaxUtils.createXMLStreamWriter(swriter);\n             xwriter = new PrettyPrintXMLStreamWriter(xwriter, 2);\n+            encoding = encoding == null ? \"UTF-8\" : encoding;\n             InputStream in = new ByteArrayInputStream(message.getBytes(encoding));\n             try {\n                 StaxUtils.copy(new StreamSource(in), xwriter);",
                "raw_url": "https://github.com/apache/cxf/raw/351364f7f32970754af4583ffc0626b177b023e9/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/PrettyLoggingFilter.java",
                "sha": "db42fd4ef04e77a80cf313aeec2f871e615dd28b",
                "status": "modified"
            }
        ],
        "message": "[CXF-6770] Fixing NPE",
        "parent": "https://github.com/apache/cxf/commit/cf492753cd899f1ac7056e3523270db6714d4420",
        "patched_files": [
            "PrettyLoggingFilter.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "TestPrettyLoggingFilter.java"
        ]
    },
    "cxf_395dafd": {
        "bug_id": "cxf_395dafd",
        "commit": "https://github.com/apache/cxf/commit/395dafda97d485c91e32f2733e97f7c0183f591a",
        "file": [
            {
                "additions": 65,
                "blob_url": "https://github.com/apache/cxf/blob/395dafda97d485c91e32f2733e97f7c0183f591a/maven-plugins/codegen-plugin/src/main/java/org/apache/cxf/maven_plugin/wsdl2java/WSDL2JavaMojo.java",
                "changes": 85,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/maven-plugins/codegen-plugin/src/main/java/org/apache/cxf/maven_plugin/wsdl2java/WSDL2JavaMojo.java?ref=395dafda97d485c91e32f2733e97f7c0183f591a",
                "deletions": 20,
                "filename": "maven-plugins/codegen-plugin/src/main/java/org/apache/cxf/maven_plugin/wsdl2java/WSDL2JavaMojo.java",
                "patch": "@@ -23,6 +23,7 @@\n import java.io.IOException;\n import java.io.OutputStream;\n import java.net.URI;\n+import java.net.URISyntaxException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.LinkedHashSet;\n@@ -51,6 +52,69 @@\n  */\n public class WSDL2JavaMojo extends AbstractCodegenMoho {\n \n+    final class MavenToolErrorListener extends ToolErrorListener {\n+        private final List<File> errorfiles;\n+\n+        MavenToolErrorListener(List<File> errorfiles) {\n+            this.errorfiles = errorfiles;\n+        }\n+\n+        public void addError(final String file, int line, int column, String message, Throwable t) {\n+            super.addError(file, line, column, message, t);\n+            \n+            File f = mapFile(file);\n+            \n+            if (f != null && !errorfiles.contains(f)) {\n+                buildContext.removeMessages(f);\n+                errorfiles.add(f);\n+            }\n+            if (f == null) {\n+                f = new File(file) {\n+                    private static final long serialVersionUID = 1L;\n+                    public String getAbsolutePath() {\n+                        return file;\n+                    }\n+                };\n+            }\n+            buildContext.addMessage(f, line, column, message, BuildContext.SEVERITY_ERROR, t);\n+        }\n+\n+        public void addWarning(final String file, int line, int column, String message, Throwable t) {\n+            File f = mapFile(file);\n+            if (f != null && !errorfiles.contains(f)) {\n+                buildContext.removeMessages(f);\n+                errorfiles.add(f);\n+            }\n+            if (f == null) {\n+                f = new File(file) {\n+                    private static final long serialVersionUID = 1L;\n+                    public String getAbsolutePath() {\n+                        return file;\n+                    }\n+                };\n+            }\n+            //don't send to super which just LOG.warns.   We'll let Maven do that to\n+            //not duplicate the error message.\n+            buildContext.addMessage(f, line, column, message, BuildContext.SEVERITY_WARNING, t);\n+        }\n+\n+        private File mapFile(String s) {\n+            File file = null;\n+            if (s != null && s.startsWith(\"file:\")) {\n+                if (s.contains(\"#\")) {\n+                    s = s.substring(0, s.indexOf('#'));\n+                }\n+                try {\n+                    URI uri = new URI(s);\n+                    file = new File(uri);\n+                } catch (URISyntaxException e) {\n+                    //ignore\n+                }\n+            }\n+            return file;\n+        }\n+    }\n+\n     /**\n      * @parameter expression=\"${cxf.testSourceRoot}\"\n      */\n@@ -257,26 +321,7 @@ public OutputStream createOutputStream(File file) throws IOException {\n                         return buildContext.newFileOutputStream(file);\n                     }\n                 });\n-                ctx.setErrorListener(new ToolErrorListener() {\n-                    public void addError(File file, int line, int column, String message, Throwable t) {\n-                        super.addError(file, line, column, message, t);\n-                        if (!errorfiles.contains(file)) {\n-                            buildContext.removeMessages(file);\n-                            errorfiles.add(file);\n-                        }\n-                        buildContext.addMessage(file, line, column, message, BuildContext.SEVERITY_ERROR, t);\n-                    }\n-\n-                    public void addWarning(File file, int line, int column, String message, Throwable t) {\n-                        if (!errorfiles.contains(file)) {\n-                            buildContext.removeMessages(file);\n-                            errorfiles.add(file);\n-                        }\n-                        //don't send to super which just LOG.warns.   We'll let Maven do that to\n-                        //not duplicate the error message.\n-                        buildContext.addMessage(file, line, column, message, BuildContext.SEVERITY_WARNING, t);\n-                    }\n-                });\n+                ctx.setErrorListener(new MavenToolErrorListener(errorfiles));\n                 new WSDLToJava(args).run(ctx);\n                 \n                 List<File> oldFiles = CastUtils.cast((List<?>)buildContext",
                "raw_url": "https://github.com/apache/cxf/raw/395dafda97d485c91e32f2733e97f7c0183f591a/maven-plugins/codegen-plugin/src/main/java/org/apache/cxf/maven_plugin/wsdl2java/WSDL2JavaMojo.java",
                "sha": "f221f843f84549869630c718b4f193bd9e25638c",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cxf/blob/395dafda97d485c91e32f2733e97f7c0183f591a/tools/common/src/main/java/org/apache/cxf/tools/common/ToolErrorListener.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/common/src/main/java/org/apache/cxf/tools/common/ToolErrorListener.java?ref=395dafda97d485c91e32f2733e97f7c0183f591a",
                "deletions": 9,
                "filename": "tools/common/src/main/java/org/apache/cxf/tools/common/ToolErrorListener.java",
                "patch": "@@ -19,7 +19,6 @@\n \n package org.apache.cxf.tools.common;\n \n-import java.io.File;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.logging.Logger;\n@@ -33,13 +32,13 @@\n     private static final Logger LOG = LogUtils.getL7dLogger(ToolErrorListener.class);\n     \n     class ErrorInfo {\n-        File file;\n+        String file;\n         int line;\n         int col;\n         Throwable cause;\n         String message;\n         \n-        ErrorInfo(File f, int l, int c, String m, Throwable t) {\n+        ErrorInfo(String f, int l, int c, String m, Throwable t) {\n             file = f;\n             line = l;\n             col = c;\n@@ -49,19 +48,19 @@\n     }\n     List<ErrorInfo> errors = new LinkedList<ErrorInfo>();\n     \n-    public void addError(File file, int line, int column, String message) {\n+    public void addError(String file, int line, int column, String message) {\n         addError(file, line, column, null);\n     }\n-    public void addError(File file, int line, int column, String message, Throwable t) {\n+    public void addError(String file, int line, int column, String message, Throwable t) {\n         errors.add(new ErrorInfo(file, line, column, message, t));\n     }\n \n-    public void addWarning(File file, int line, int column, String message) {\n+    public void addWarning(String file, int line, int column, String message) {\n         addWarning(file, line, column, null);\n     }\n-    public void addWarning(File file, int line, int column, String message, Throwable t) {\n+    public void addWarning(String file, int line, int column, String message, Throwable t) {\n         if (file != null) {\n-            message = file.getAbsolutePath() + \" [\" + line + \",\" + column + \"]: \" + message; \n+            message = file + \" [\" + line + \",\" + column + \"]: \" + message; \n         }\n         LOG.warning(message);\n     }\n@@ -71,7 +70,7 @@ public int getErrorCount() {\n     }\n     private StringBuilder createMessage(StringBuilder b, ToolErrorListener.ErrorInfo e) {\n         if (e.file != null) {\n-            b.append(e.file.getAbsolutePath())\n+            b.append(e.file)\n                 .append(\" [\").append(e.line).append(',').append(e.col).append(\"]: \").append(e.message);\n         } else if (e.message == null && e.cause != null) {\n             b.append(e.cause.getLocalizedMessage());",
                "raw_url": "https://github.com/apache/cxf/raw/395dafda97d485c91e32f2733e97f7c0183f591a/tools/common/src/main/java/org/apache/cxf/tools/common/ToolErrorListener.java",
                "sha": "5d695aeb5da9c6e25aad7d83d20f257f9659d0fb",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/395dafda97d485c91e32f2733e97f7c0183f591a/tools/common/src/main/java/org/apache/cxf/tools/common/ToolException.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/common/src/main/java/org/apache/cxf/tools/common/ToolException.java?ref=395dafda97d485c91e32f2733e97f7c0183f591a",
                "deletions": 1,
                "filename": "tools/common/src/main/java/org/apache/cxf/tools/common/ToolException.java",
                "patch": "@@ -89,7 +89,7 @@ public ToolException(String messageId, Logger logger, Object ... args) {\n     }\n     private String createMessage(ToolErrorListener.ErrorInfo e) {\n         if (e.file != null) {\n-            return e.file.getAbsolutePath() + \" [\" + e.line + \",\" + e.col + \"]: \" + e.message; \n+            return e.file + \" [\" + e.line + \",\" + e.col + \"]: \" + e.message; \n         }\n         if (e.message == null && e.cause != null) {\n             return e.cause.getLocalizedMessage();",
                "raw_url": "https://github.com/apache/cxf/raw/395dafda97d485c91e32f2733e97f7c0183f591a/tools/common/src/main/java/org/apache/cxf/tools/common/ToolException.java",
                "sha": "05ceb09ca6b5c51fe0caea3973db80fed11a79c5",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/395dafda97d485c91e32f2733e97f7c0183f591a/tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBBindErrorListener.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBBindErrorListener.java?ref=395dafda97d485c91e32f2733e97f7c0183f591a",
                "deletions": 32,
                "filename": "tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBBindErrorListener.java",
                "patch": "@@ -19,10 +19,6 @@\n \n package org.apache.cxf.tools.wsdlto.databinding.jaxb;\n \n-import java.io.File;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-\n import com.sun.tools.xjc.api.ErrorListener;\n \n import org.apache.cxf.tools.common.ToolErrorListener;\n@@ -41,20 +37,7 @@ public boolean hasErrors() {\n     }\n \n     public void error(org.xml.sax.SAXParseException exception) {\n-        String s = exception.getSystemId();\n-        File file = null;\n-        if (s != null && s.startsWith(\"file:\")) {\n-            if (s.contains(\"#\")) {\n-                s = s.substring(0, s.indexOf('#'));\n-            }\n-            try {\n-                URI uri = new URI(s);\n-                file = new File(uri);\n-            } catch (URISyntaxException e) {\n-                //ignore\n-            }\n-        }\n-        listener.addError(file,\n+        listener.addError(exception.getSystemId(),\n                           exception.getLineNumber(),\n                           exception.getColumnNumber(),\n                           mapMessage(exception.getLocalizedMessage()),\n@@ -77,20 +60,7 @@ public void warning(org.xml.sax.SAXParseException exception) {\n             System.out.println(\"JAXB parsing schema warning \" + exception.toString()\n                                + \" in schema \" + exception.getSystemId());\n         }\n-        String s = exception.getSystemId();\n-        File file = null;\n-        if (s != null && s.startsWith(\"file:\")) {\n-            if (s.contains(\"#\")) {\n-                s = s.substring(0, s.indexOf('#'));\n-            }\n-            try {\n-                URI uri = new URI(s);\n-                file = new File(uri);\n-            } catch (URISyntaxException e) {\n-                //ignore\n-            }\n-        }\n-        listener.addWarning(file,\n+        listener.addWarning(exception.getSystemId(),\n                           exception.getLineNumber(),\n                           exception.getColumnNumber(),\n                           mapMessage(exception.getLocalizedMessage()),",
                "raw_url": "https://github.com/apache/cxf/raw/395dafda97d485c91e32f2733e97f7c0183f591a/tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBBindErrorListener.java",
                "sha": "d0892e4791933e778f93d537f21731fd4e080f9b",
                "status": "modified"
            }
        ],
        "message": "Update to keep the \"file\" where the error occured as a String for as long as possible to avoid NPE and allow the file to be a real url like an HTTP url\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1375635 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/898ab0ab675eaf62519394e9e425b7e954468852",
        "patched_files": [
            "ToolException.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "ToolExceptionTest.java"
        ]
    },
    "cxf_3c056d9": {
        "bug_id": "cxf_3c056d9",
        "commit": "https://github.com/apache/cxf/commit/3c056d9f8a5324ecc9de46e687436937c03b2f46",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/3c056d9f8a5324ecc9de46e687436937c03b2f46/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/validation/ValidationUtils.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/validation/ValidationUtils.java?ref=3c056d9f8a5324ecc9de46e687436937c03b2f46",
                "deletions": 0,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/validation/ValidationUtils.java",
                "patch": "@@ -35,6 +35,9 @@ public static Object getResourceInstance(Message message) {\n         if (ori == null) {\n             return null;\n         }\n+        if (!ori.getClassResourceInfo().isRoot()) {\n+            return message.getExchange().get(\"org.apache.cxf.service.object.last\");\n+        }\n         final ResourceProvider resourceProvider = ori.getClassResourceInfo().getResourceProvider();\n         if (!resourceProvider.isSingleton()) {\n             String error = \"Service object is not a singleton, use a custom invoker to validate\";",
                "raw_url": "https://github.com/apache/cxf/raw/3c056d9f8a5324ecc9de46e687436937c03b2f46/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/validation/ValidationUtils.java",
                "sha": "5bc108f3b5772bb212afc25068802a3840e7c282",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/3c056d9f8a5324ecc9de46e687436937c03b2f46/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/validation/BookStoreWithValidation.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/validation/BookStoreWithValidation.java?ref=3c056d9f8a5324ecc9de46e687436937c03b2f46",
                "deletions": 0,
                "filename": "systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/validation/BookStoreWithValidation.java",
                "patch": "@@ -67,6 +67,11 @@ public Response getBookResponseNoValidation(@PathParam(\"bookId\") String id) {\n         return Response.ok(books.get(id)).build();\n     }\n     \n+    @Path(\"/sub\")\n+    public BookStoreWithValidation getBookResponseSub() {\n+        return this;\n+    }\n+    \n     @POST\n     @Path(\"/books\")\n     public Response addBook(@Context final UriInfo uriInfo, ",
                "raw_url": "https://github.com/apache/cxf/raw/3c056d9f8a5324ecc9de46e687436937c03b2f46/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/validation/BookStoreWithValidation.java",
                "sha": "7b6d46359ce58ea49af763871370c9d66d843aff",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cxf/blob/3c056d9f8a5324ecc9de46e687436937c03b2f46/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/validation/JAXRSClientServerValidationTest.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/validation/JAXRSClientServerValidationTest.java?ref=3c056d9f8a5324ecc9de46e687436937c03b2f46",
                "deletions": 0,
                "filename": "systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/validation/JAXRSClientServerValidationTest.java",
                "patch": "@@ -180,6 +180,15 @@ public void testThatResponseValidationForOneBookNotFails()  {\n         assertEquals(200, r.getStatus());\n     }\n     \n+    @Test\n+    public void testThatResponseValidationForOneBookSubNotFails()  {\n+        Response r = createWebClient(\"/bookstore/books\").post(new Form().param(\"id\", \"1234\").param(\"name\", \"cxf\"));\n+        assertEquals(Status.CREATED.getStatusCode(), r.getStatus());\n+\n+        r = createWebClient(\"/bookstore/sub/books/1234\").get();\n+        assertEquals(200, r.getStatus());\n+    }\n+    \n     @Test\n     public void testThatResponseValidationForNullBookFails()  {\n         Response r = createWebClient(\"/bookstore/books\").post(new Form().param(\"id\", \"1234\").param(\"name\", \"cxf\"));",
                "raw_url": "https://github.com/apache/cxf/raw/3c056d9f8a5324ecc9de46e687436937c03b2f46/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/validation/JAXRSClientServerValidationTest.java",
                "sha": "08d6bae1099bf2fe9403bdeb2e126a9a3f8f1190",
                "status": "modified"
            }
        ],
        "message": "[CXF-6297] Avoiding NPE if a subresource method was invoked",
        "parent": "https://github.com/apache/cxf/commit/26e8350e122ed94155e58aa1f937cace205cfbc5",
        "patched_files": [
            "ValidationUtils.java",
            "BookStoreWithValidation.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JAXRSClientServerValidationTest.java"
        ]
    },
    "cxf_3c2a97a": {
        "bug_id": "cxf_3c2a97a",
        "commit": "https://github.com/apache/cxf/commit/3c2a97a926baa894d9eea469e0c174fda1b5d006",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cxf/blob/3c2a97a926baa894d9eea469e0c174fda1b5d006/rt/ws/security/src/main/java/org/apache/cxf/ws/security/trust/STSClient.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/security/src/main/java/org/apache/cxf/ws/security/trust/STSClient.java?ref=3c2a97a926baa894d9eea469e0c174fda1b5d006",
                "deletions": 1,
                "filename": "rt/ws/security/src/main/java/org/apache/cxf/ws/security/trust/STSClient.java",
                "patch": "@@ -820,7 +820,12 @@ private X509Certificate getCert(Crypto crypto) throws Exception {\n         }\n         CryptoType cryptoType = new CryptoType(CryptoType.TYPE.ALIAS);\n         cryptoType.setAlias(alias);\n-        return crypto.getX509Certificates(cryptoType)[0];\n+        \n+        X509Certificate certs[] = crypto.getX509Certificates(cryptoType);\n+        if (certs == null || certs.length == 0) {\n+            throw new Fault(\"Could not get X509Certificate for alias \" + alias, LOG);\n+        }\n+        return certs[0];\n     }\n \n     private void addLifetime(XMLStreamWriter writer) throws XMLStreamException {",
                "raw_url": "https://github.com/apache/cxf/raw/3c2a97a926baa894d9eea469e0c174fda1b5d006/rt/ws/security/src/main/java/org/apache/cxf/ws/security/trust/STSClient.java",
                "sha": "d055266b9112add4a0e2f34a8fccdd9504675002",
                "status": "modified"
            }
        ],
        "message": "Add a NPE guard\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1082698 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/4bdbcc0af48d90dd7e229721969bf9743d59ede7",
        "patched_files": [
            "STSClient.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "STSClientTest.java"
        ]
    },
    "cxf_3ee75a8": {
        "bug_id": "cxf_3ee75a8",
        "commit": "https://github.com/apache/cxf/commit/3ee75a865656883ac9602d75ff19ef0312d03743",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/3ee75a865656883ac9602d75ff19ef0312d03743/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/DefaultLogEventMapper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/DefaultLogEventMapper.java?ref=3ee75a865656883ac9602d75ff19ef0312d03743",
                "deletions": 1,
                "filename": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/DefaultLogEventMapper.java",
                "patch": "@@ -269,7 +269,7 @@ private String getRestOperationName(Message curMessage) {\n     }\n     \n     private static String safeGet(Message message, String key) {\n-        if (!message.containsKey(key)) {\n+        if (message == null || !message.containsKey(key)) {\n             return null;\n         }\n         Object value = message.get(key);",
                "raw_url": "https://github.com/apache/cxf/raw/3ee75a865656883ac9602d75ff19ef0312d03743/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/DefaultLogEventMapper.java",
                "sha": "8324dae9fc5e86a480f39c129df692ac4abc417f",
                "status": "modified"
            }
        ],
        "message": "Fix NPE if message is null",
        "parent": "https://github.com/apache/cxf/commit/d655bcb160e5403f60a8365b2bf41ef07cb0414b",
        "patched_files": [
            "DefaultLogEventMapper.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "DefaultLogEventMapperTest.java"
        ]
    },
    "cxf_3f719f9": {
        "bug_id": "cxf_3f719f9",
        "commit": "https://github.com/apache/cxf/commit/3f719f99dbb6ba9ae961d90323e7f8c55961e616",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/3f719f99dbb6ba9ae961d90323e7f8c55961e616/rt/rs/security/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/security/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java?ref=3f719f99dbb6ba9ae961d90323e7f8c55961e616",
                "deletions": 0,
                "filename": "rt/rs/security/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
                "patch": "@@ -236,6 +236,9 @@ public static JsonWebKeys loadJwkSet(Properties props, Bus bus, JweDecryptionPro\n         if (keyStoreLoc != null) {\n             try {\n                 InputStream is = ResourceUtils.getResourceStream(keyStoreLoc, bus);\n+                if (is == null) {\n+                    throw new SecurityException(\"Error in loading keystore location: \" + keyStoreLoc);\n+                }\n                 keyContent = IOUtils.readStringFromStream(is);\n             } catch (Exception ex) {\n                 throw new SecurityException(ex);",
                "raw_url": "https://github.com/apache/cxf/raw/3f719f99dbb6ba9ae961d90323e7f8c55961e616/rt/rs/security/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
                "sha": "241fe6b4ff1007b2ec8263b3465ee612a00c224a",
                "status": "modified"
            }
        ],
        "message": "NPE fix",
        "parent": "https://github.com/apache/cxf/commit/3e8d71b42b3cf74b15080fad9769330992e384ca",
        "patched_files": [
            "JwkUtils.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JwkUtilsTest.java"
        ]
    },
    "cxf_403a4fb": {
        "bug_id": "cxf_403a4fb",
        "commit": "https://github.com/apache/cxf/commit/403a4fb83a23b6bae60bc12eb48c357d1f822040",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cxf/blob/403a4fb83a23b6bae60bc12eb48c357d1f822040/core/src/main/java/org/apache/cxf/common/util/PropertiesLoaderUtils.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/common/util/PropertiesLoaderUtils.java?ref=403a4fb83a23b6bae60bc12eb48c357d1f822040",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/cxf/common/util/PropertiesLoaderUtils.java",
                "patch": "@@ -63,6 +63,10 @@ public static Properties loadAllProperties(String resourceName, ClassLoader clas\n                                                Logger logger, Level level, String msg)\n         throws IOException {\n         Properties properties = new Properties();\n+        // Set default class loader if neccessary\n+        if (classLoader == null) {\n+            classLoader = PropertiesLoaderUtils.class.getClassLoader();\n+        }\n         Enumeration<URL> urls = classLoader.getResources(resourceName);\n \n         while (urls.hasMoreElements()) {",
                "raw_url": "https://github.com/apache/cxf/raw/403a4fb83a23b6bae60bc12eb48c357d1f822040/core/src/main/java/org/apache/cxf/common/util/PropertiesLoaderUtils.java",
                "sha": "e7c91d3f8aea39be2d40b456ac72d7d62c2d180a",
                "status": "modified"
            }
        ],
        "message": "[CXF-5822] Fixing a possible NPE in PropertiesLoaderUtils, patch from Christoph E\u00dfer applied",
        "parent": "https://github.com/apache/cxf/commit/5daca2d2bc1e771468fcad6d22c6b0db843e24cb",
        "patched_files": [
            "PropertiesLoaderUtils.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "PropertiesLoaderUtilsTest.java"
        ]
    },
    "cxf_42fa58e": {
        "bug_id": "cxf_42fa58e",
        "commit": "https://github.com/apache/cxf/commit/42fa58e77a0f85ed12c7d0b2fc97d98f77ef067a",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/42fa58e77a0f85ed12c7d0b2fc97d98f77ef067a/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java?ref=42fa58e77a0f85ed12c7d0b2fc97d98f77ef067a",
                "deletions": 1,
                "filename": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "patch": "@@ -872,7 +872,11 @@ private static XMLStreamReader findExtraNamespaces(XMLStreamReader source) {\n                 f.setAccessible(true);\n                 String ns[] = (String[])f.get(c);\n                 for (int x = 0; x < ns.length; x += 2) {\n-                    nsMap.put(ns[x], ns[x + 1]);\n+                    if (ns[x] == null) {\n+                        nsMap.put(null, ns[x + 1]);\n+                    } else {\n+                        nsMap.put(ns[x], ns[x + 1]);\n+                    }\n                 }\n             }\n         } catch (Throwable t) {",
                "raw_url": "https://github.com/apache/cxf/raw/42fa58e77a0f85ed12c7d0b2fc97d98f77ef067a/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "sha": "2fde06e2f182d7d95f72b613fd9c7554a6260ddf",
                "status": "modified"
            }
        ],
        "message": "Fix potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1298956 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/da18cfcf54dac8e0bba96b351a106a7c2f19467c",
        "patched_files": [
            "JAXBEncoderDecoder.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JAXBEncoderDecoderTest.java"
        ]
    },
    "cxf_4341325": {
        "bug_id": "cxf_4341325",
        "commit": "https://github.com/apache/cxf/commit/434132594b23cc18f36cab5c3109a4490b35883c",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/434132594b23cc18f36cab5c3109a4490b35883c/rt/rs/extensions/providers/src/main/java/org/apache/cxf/jaxrs/provider/json/JSONProvider.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/extensions/providers/src/main/java/org/apache/cxf/jaxrs/provider/json/JSONProvider.java?ref=434132594b23cc18f36cab5c3109a4490b35883c",
                "deletions": 1,
                "filename": "rt/rs/extensions/providers/src/main/java/org/apache/cxf/jaxrs/provider/json/JSONProvider.java",
                "patch": "@@ -491,7 +491,7 @@ protected XMLStreamWriter createWriter(Object actualObject, Class<?> actualClass\n         Type genericType, String enc, OutputStream os, boolean isCollection) throws Exception {\n         \n         QName qname = actualClass == Document.class ? null : getQName(actualClass, genericType, actualObject);\n-        if (ignoreNamespaces && (isCollection  || dropRootElement)) {        \n+        if (qname != null && ignoreNamespaces && (isCollection  || dropRootElement)) {        \n             qname = new QName(qname.getLocalPart());\n         }\n         if (BADGER_FISH_CONVENTION.equals(convention)) {",
                "raw_url": "https://github.com/apache/cxf/raw/434132594b23cc18f36cab5c3109a4490b35883c/rt/rs/extensions/providers/src/main/java/org/apache/cxf/jaxrs/provider/json/JSONProvider.java",
                "sha": "f9301fa3f8993580b2095726dc1a648217627b3c",
                "status": "modified"
            },
            {
                "additions": 46,
                "blob_url": "https://github.com/apache/cxf/blob/434132594b23cc18f36cab5c3109a4490b35883c/rt/rs/extensions/providers/src/test/java/org/apache/cxf/jaxrs/provider/dom4j/DOM4JProviderTest.java",
                "changes": 48,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/extensions/providers/src/test/java/org/apache/cxf/jaxrs/provider/dom4j/DOM4JProviderTest.java?ref=434132594b23cc18f36cab5c3109a4490b35883c",
                "deletions": 2,
                "filename": "rt/rs/extensions/providers/src/test/java/org/apache/cxf/jaxrs/provider/dom4j/DOM4JProviderTest.java",
                "patch": "@@ -30,6 +30,7 @@\n import org.apache.cxf.jaxrs.impl.ProvidersImpl;\n import org.apache.cxf.jaxrs.provider.ProviderFactory;\n import org.apache.cxf.jaxrs.provider.ServerProviderFactory;\n+import org.apache.cxf.jaxrs.provider.json.JSONProvider;\n import org.apache.cxf.message.Exchange;\n import org.apache.cxf.message.ExchangeImpl;\n import org.apache.cxf.message.Message;\n@@ -48,9 +49,10 @@ public void testReadXML() throws Exception {\n         // starts with the xml PI\n         assertTrue(str.contains(\"<a/>\") || str.contains(\"<a></a>\"));\n     }\n-    \n     private org.dom4j.Document readXML() throws Exception {\n-        final String xml = \"<a/>\";\n+        return readXML(\"<a/>\");\n+    }\n+    private org.dom4j.Document readXML(final String xml) throws Exception {\n         DOM4JProvider p = new DOM4JProvider();\n         p.setProviders(new ProvidersImpl(createMessage()));\n         org.dom4j.Document dom = p.readFrom(org.dom4j.Document.class, org.dom4j.Document.class, \n@@ -102,6 +104,21 @@ public void testWriteJSON() throws Exception {\n         assertEquals(\"{\\\"a\\\":\\\"\\\"}\", str);\n     }\n     \n+    @Test\n+    public void testWriteJSONDropRoot() throws Exception {\n+        org.dom4j.Document dom = readXML(\"<root><a/></root>\");\n+        DOM4JProvider p = new DOM4JProvider();\n+        p.setProviders(new ProvidersImpl(createMessageWithJSONProvider()));\n+        \n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        p.writeTo(dom, org.dom4j.Document.class, org.dom4j.Document.class, \n+                   new Annotation[]{}, MediaType.APPLICATION_JSON_TYPE, new MetadataMap<String, Object>(),\n+                   bos);\n+        String str = bos.toString();\n+        // starts with the xml PI\n+        assertEquals(\"{\\\"a\\\":\\\"\\\"}\", str);\n+    }\n+    \n     private Message createMessage() {\n         ProviderFactory factory = ServerProviderFactory.getInstance();\n         Message m = new MessageImpl();\n@@ -124,4 +141,31 @@ private Message createMessage() {\n         e.put(Endpoint.class, endpoint);\n         return m;\n     }\n+    \n+    private Message createMessageWithJSONProvider() {\n+        ProviderFactory factory = ServerProviderFactory.getInstance();\n+        JSONProvider<Object> provider = new JSONProvider<Object>();\n+        provider.setDropRootElement(true);\n+        provider.setIgnoreNamespaces(true);\n+        factory.registerUserProvider(provider);\n+        Message m = new MessageImpl();\n+        m.put(\"org.apache.cxf.http.case_insensitive_queries\", false);\n+        Exchange e = new ExchangeImpl();\n+        m.setExchange(e);\n+        e.setInMessage(m);\n+        Endpoint endpoint = EasyMock.createMock(Endpoint.class);\n+        endpoint.getEndpointInfo();\n+        EasyMock.expectLastCall().andReturn(null).anyTimes();\n+        endpoint.get(Application.class.getName());\n+        EasyMock.expectLastCall().andReturn(null);\n+        endpoint.size();\n+        EasyMock.expectLastCall().andReturn(0).anyTimes();\n+        endpoint.isEmpty();\n+        EasyMock.expectLastCall().andReturn(true).anyTimes();\n+        endpoint.get(ServerProviderFactory.class.getName());\n+        EasyMock.expectLastCall().andReturn(factory).anyTimes();\n+        EasyMock.replay(endpoint);\n+        e.put(Endpoint.class, endpoint);\n+        return m;\n+    }\n }",
                "raw_url": "https://github.com/apache/cxf/raw/434132594b23cc18f36cab5c3109a4490b35883c/rt/rs/extensions/providers/src/test/java/org/apache/cxf/jaxrs/provider/dom4j/DOM4JProviderTest.java",
                "sha": "818f6ce924ddd77421507b5c59d55e273e52f812",
                "status": "modified"
            }
        ],
        "message": "[CXF-4967] Fixing NPE in JSONProvider\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1468490 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/40c49c0fbb290f8dc75b9d60ee2555c20c2c8791",
        "patched_files": [
            "DOM4JProvider.java",
            "JSONProvider.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "DOM4JProviderTest.java",
            "JSONProviderTest.java"
        ]
    },
    "cxf_43bbff0": {
        "bug_id": "cxf_43bbff0",
        "commit": "https://github.com/apache/cxf/commit/43bbff0f7bfe1e0b4cc81acc890a92c11e6529d0",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/43bbff0f7bfe1e0b4cc81acc890a92c11e6529d0/rt/ws/policy/src/main/java/org/apache/cxf/ws/policy/AbstractPolicyInterceptor.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/policy/src/main/java/org/apache/cxf/ws/policy/AbstractPolicyInterceptor.java?ref=43bbff0f7bfe1e0b4cc81acc890a92c11e6529d0",
                "deletions": 1,
                "filename": "rt/ws/policy/src/main/java/org/apache/cxf/ws/policy/AbstractPolicyInterceptor.java",
                "patch": "@@ -67,7 +67,7 @@ protected void getTransportAssertions(Message message) {\n     \n     protected BindingFaultInfo getBindingFaultInfo(Message msg, Exception ex, BindingOperationInfo boi) {\n         BindingFaultInfo bfi = msg.get(BindingFaultInfo.class);        \n-        if (null == bfi) {\n+        if (null == bfi && ex != null) {\n             Throwable cause = ex.getCause();\n             if (null == cause) {\n                 return null;",
                "raw_url": "https://github.com/apache/cxf/raw/43bbff0f7bfe1e0b4cc81acc890a92c11e6529d0/rt/ws/policy/src/main/java/org/apache/cxf/ws/policy/AbstractPolicyInterceptor.java",
                "sha": "3b2ce1c8c4ec0e6b04c6401cbaafd597aeb9e4a1",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cxf/blob/43bbff0f7bfe1e0b4cc81acc890a92c11e6529d0/rt/ws/policy/src/main/java/org/apache/cxf/ws/policy/PolicyVerificationInFaultInterceptor.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/policy/src/main/java/org/apache/cxf/ws/policy/PolicyVerificationInFaultInterceptor.java?ref=43bbff0f7bfe1e0b4cc81acc890a92c11e6529d0",
                "deletions": 1,
                "filename": "rt/ws/policy/src/main/java/org/apache/cxf/ws/policy/PolicyVerificationInFaultInterceptor.java",
                "patch": "@@ -90,7 +90,6 @@ protected void handle(Message message) {\n         if (null == ex) {\n             ex = exchange.get(Exception.class);\n         }\n-        assert null != ex;\n         \n         BindingFaultInfo bfi = getBindingFaultInfo(message, ex, boi);\n         if (null == bfi) {",
                "raw_url": "https://github.com/apache/cxf/raw/43bbff0f7bfe1e0b4cc81acc890a92c11e6529d0/rt/ws/policy/src/main/java/org/apache/cxf/ws/policy/PolicyVerificationInFaultInterceptor.java",
                "sha": "dcbea0b1b87595b6a8f918b8caf10b4825d505b6",
                "status": "modified"
            }
        ],
        "message": "Add an NPE guard\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@888105 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/05fcdc46f1d9af25e3b91b196deb20298804fbe4",
        "patched_files": [
            "PolicyVerificationInFaultInterceptor.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "PolicyVerificationInFaultInterceptorTest.java"
        ]
    },
    "cxf_46192d6": {
        "bug_id": "cxf_46192d6",
        "commit": "https://github.com/apache/cxf/commit/46192d68f0d906cdbbd8f045417e20e7027f8349",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/46192d68f0d906cdbbd8f045417e20e7027f8349/rt/core/src/main/java/org/apache/cxf/service/factory/Messages.properties",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/main/java/org/apache/cxf/service/factory/Messages.properties?ref=46192d68f0d906cdbbd8f045417e20e7027f8349",
                "deletions": 0,
                "filename": "rt/core/src/main/java/org/apache/cxf/service/factory/Messages.properties",
                "patch": "@@ -34,5 +34,6 @@ JAXWS_ANNOTATION_FOUND=A JAX-WS Annotation was found on {0} while using the Simp\n XSD_VALIDATION_ERROR= Error in W3C XML Schema associated with service: {0}\n COULD_NOT_UNWRAP=Could not unwrap Operation {0} to match method \"{1}\"\n NO_WSDL_PROVIDED=WSDL is required for services created from class {0}, but no WSDL location specified. \n+NO_WSDL_NO_SERVICE_CLASS_PROVIDED=No valid WSDL {0} nor service class is specified.\n NO_FAULT_PART = Could not find a fault part for {0}. The fault message must have a single part.\n INVALID_BARE_METHOD= Method {0} is configured as BARE but there are more than one parameters with wrong @Webparam annotated or without @WebParam annotated.",
                "raw_url": "https://github.com/apache/cxf/raw/46192d68f0d906cdbbd8f045417e20e7027f8349/rt/core/src/main/java/org/apache/cxf/service/factory/Messages.properties",
                "sha": "5d2d561538b2a30853af33855bd2593c8a0957e4",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/46192d68f0d906cdbbd8f045417e20e7027f8349/rt/core/src/main/java/org/apache/cxf/service/factory/ReflectionServiceFactoryBean.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/main/java/org/apache/cxf/service/factory/ReflectionServiceFactoryBean.java?ref=46192d68f0d906cdbbd8f045417e20e7027f8349",
                "deletions": 1,
                "filename": "rt/core/src/main/java/org/apache/cxf/service/factory/ReflectionServiceFactoryBean.java",
                "patch": "@@ -536,8 +536,10 @@ protected void initializeServiceModel() {\n \n         if (isFromWsdl()) {\n             buildServiceFromWSDL(wsdlurl);\n-        } else {\n+        } else if (getServiceClass() != null) {\n             buildServiceFromClass();\n+        } else {\n+            throw new ServiceConstructionException(new Message(\"NO_WSDL_NO_SERVICE_CLASS_PROVIDED\", LOG, wsdlurl));\n         }\n \n         if (isValidate()) {",
                "raw_url": "https://github.com/apache/cxf/raw/46192d68f0d906cdbbd8f045417e20e7027f8349/rt/core/src/main/java/org/apache/cxf/service/factory/ReflectionServiceFactoryBean.java",
                "sha": "53f68feef3b4fa000e843d3273c4329eb432f5d5",
                "status": "modified"
            },
            {
                "additions": 76,
                "blob_url": "https://github.com/apache/cxf/blob/46192d68f0d906cdbbd8f045417e20e7027f8349/rt/core/src/test/java/org/apache/cxf/service/factory/ReflectionServiceFactorBeanTest.java",
                "changes": 76,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/test/java/org/apache/cxf/service/factory/ReflectionServiceFactorBeanTest.java?ref=46192d68f0d906cdbbd8f045417e20e7027f8349",
                "deletions": 0,
                "filename": "rt/core/src/test/java/org/apache/cxf/service/factory/ReflectionServiceFactorBeanTest.java",
                "patch": "@@ -0,0 +1,76 @@\n+/**\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements. See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership. The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License. You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied. See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+package org.apache.cxf.service.factory;\r\n+\r\n+import javax.wsdl.WSDLException;\r\n+import javax.xml.namespace.QName;\r\n+\r\n+import org.apache.cxf.Bus;\r\n+import org.apache.cxf.wsdl.WSDLManager;\r\n+import org.easymock.EasyMock;\r\n+import org.easymock.IMocksControl;\r\n+\r\n+import org.junit.After;\r\n+import org.junit.Assert;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+/**\r\n+ * \r\n+ */\r\n+public class ReflectionServiceFactorBeanTest extends Assert {\r\n+    protected IMocksControl control;\r\n+    \r\n+    @Before\r\n+    public void setUp() throws Exception {\r\n+        control = EasyMock.createNiceControl();\r\n+    }\r\n+    \r\n+    @After \r\n+    public void tearDown() throws Exception {\r\n+        control.verify();\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void testEmptyWsdlAndNoServiceClass() throws Exception {\r\n+        final String dummyWsdl = \"target/dummy.wsdl\";\r\n+        ReflectionServiceFactoryBean bean = new ReflectionServiceFactoryBean();\r\n+        Bus bus = control.createMock(Bus.class);\r\n+        \r\n+        WSDLManager wsdlmanager = control.createMock(WSDLManager.class);\r\n+        EasyMock.expect(bus.getExtension(WSDLManager.class)).andReturn(wsdlmanager);\r\n+        EasyMock.expect(wsdlmanager.getDefinition(dummyWsdl))\r\n+            .andThrow(new WSDLException(\"PARSER_ERROR\", \"Problem parsing '\" + dummyWsdl + \"'.\"));\r\n+        EasyMock.expect(bus.getExtension(FactoryBeanListenerManager.class)).andReturn(null);\r\n+        \r\n+        control.replay();\r\n+        \r\n+        bean.setWsdlURL(dummyWsdl);\r\n+        bean.setServiceName(new QName(\"http://cxf.apache.org/hello_world_soap_http\", \"GreeterService\"));\r\n+        bean.setBus(bus);\r\n+        \r\n+        try {\r\n+            bean.create();\r\n+            fail(\"no valid wsdl nor service class specified\");\r\n+        } catch (ServiceConstructionException e) {\r\n+            // ignore\r\n+        }\r\n+    }\r\n+}\r",
                "raw_url": "https://github.com/apache/cxf/raw/46192d68f0d906cdbbd8f045417e20e7027f8349/rt/core/src/test/java/org/apache/cxf/service/factory/ReflectionServiceFactorBeanTest.java",
                "sha": "39ed27adc2d23c30f8a360f4a0c107346aecb52e",
                "status": "added"
            }
        ],
        "message": "[CXF-4922] NPE is thrown at EP creation when no service class specified and the provided wsdl not loaded\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1460691 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/b89dddd7e351b2867a537ceda150e6f6d0728900",
        "patched_files": [
            "ReflectionServiceFactoryBean.java",
            "Messages.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "ReflectionServiceFactorBeanTest.java"
        ]
    },
    "cxf_4a8be43": {
        "bug_id": "cxf_4a8be43",
        "commit": "https://github.com/apache/cxf/commit/4a8be430434f089138f6f06a83bb24294119b03c",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cxf/blob/4a8be430434f089138f6f06a83bb24294119b03c/rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/AbstractTypeCreator.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/AbstractTypeCreator.java?ref=4a8be430434f089138f6f06a83bb24294119b03c",
                "deletions": 3,
                "filename": "rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/AbstractTypeCreator.java",
                "patch": "@@ -22,6 +22,7 @@\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n import java.lang.reflect.Type;\n+import java.lang.reflect.TypeVariable;\n import java.util.Collection;\n import java.util.Map;\n \n@@ -103,12 +104,14 @@ public TypeClassInfo createBasicClassInfo(Type type) {\n     }\n \n     public AegisType createTypeForClass(TypeClassInfo info) {\n-\n+        \n         Class javaClass = TypeUtil.getTypeRelatedClass(info.getType());\n         AegisType result = null;\n         boolean newType = true;\n-\n-        if (info.getAegisTypeClass() != null) {\n+        if (info.getType() instanceof TypeVariable) {\n+            //it's the generic type\n+            result = getOrCreateGenericType(info);\n+        } else if (info.getAegisTypeClass() != null) {\n             result = createUserType(info);\n         } else if (isArray(javaClass)) {\n             result = createArrayType(info);",
                "raw_url": "https://github.com/apache/cxf/raw/4a8be430434f089138f6f06a83bb24294119b03c/rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/AbstractTypeCreator.java",
                "sha": "ce229cb2b24573e8c72c7ce23c809e809fd3c7c6",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/cxf/blob/4a8be430434f089138f6f06a83bb24294119b03c/systests/databinding/src/test/java/org/apache/cxf/systest/aegis/AegisClientServerTest.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/databinding/src/test/java/org/apache/cxf/systest/aegis/AegisClientServerTest.java?ref=4a8be430434f089138f6f06a83bb24294119b03c",
                "deletions": 0,
                "filename": "systests/databinding/src/test/java/org/apache/cxf/systest/aegis/AegisClientServerTest.java",
                "patch": "@@ -22,6 +22,7 @@\n \n import java.lang.reflect.Method;\n import java.net.URL;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n@@ -178,6 +179,21 @@ public void testComplexMapResult() throws Exception {\n         assertEquals(result.toString(), \"{key1={1=3}}\");\n     }\n     \n+    @Test\n+    public void testGenericCollection() throws Exception {\n+        AegisDatabinding aegisBinding = new AegisDatabinding();\n+        JaxWsProxyFactoryBean proxyFactory = new JaxWsProxyFactoryBean();\n+        proxyFactory.setDataBinding(aegisBinding);\n+        proxyFactory.setServiceClass(SportsService.class);\n+        proxyFactory.setAddress(\"http://localhost:\" + PORT + \"/jaxwsAndAegisSports\");\n+        proxyFactory.getInInterceptors().add(new LoggingInInterceptor());\n+        proxyFactory.getOutInterceptors().add(new LoggingOutInterceptor());\n+        SportsService service = (SportsService) proxyFactory.create();\n+        List<String> list = new ArrayList<String>();\n+        list.add(\"ffang\");\n+        String ret = service.getGeneric(list);\n+        assertEquals(ret, \"ffang\");\n+    }\n           \n     @Test\n     public void testDynamicClient() throws Exception {",
                "raw_url": "https://github.com/apache/cxf/raw/4a8be430434f089138f6f06a83bb24294119b03c/systests/databinding/src/test/java/org/apache/cxf/systest/aegis/AegisClientServerTest.java",
                "sha": "10d3576d03a714c867bd47e3bbfd7ee7a55015b9",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/4a8be430434f089138f6f06a83bb24294119b03c/systests/databinding/src/test/java/org/apache/cxf/systest/aegis/SportsService.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/databinding/src/test/java/org/apache/cxf/systest/aegis/SportsService.java?ref=4a8be430434f089138f6f06a83bb24294119b03c",
                "deletions": 0,
                "filename": "systests/databinding/src/test/java/org/apache/cxf/systest/aegis/SportsService.java",
                "patch": "@@ -43,4 +43,6 @@\n     }\n \n     Map<String, Map<Integer, Integer>> testComplexMapResult();\n+    \n+    <T> T getGeneric(Collection<T> collection);\n }",
                "raw_url": "https://github.com/apache/cxf/raw/4a8be430434f089138f6f06a83bb24294119b03c/systests/databinding/src/test/java/org/apache/cxf/systest/aegis/SportsService.java",
                "sha": "445cb8d2a7382b7d0cab31282b9dfc77611554a4",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cxf/blob/4a8be430434f089138f6f06a83bb24294119b03c/systests/databinding/src/test/java/org/apache/cxf/systest/aegis/SportsServiceImpl.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/databinding/src/test/java/org/apache/cxf/systest/aegis/SportsServiceImpl.java?ref=4a8be430434f089138f6f06a83bb24294119b03c",
                "deletions": 0,
                "filename": "systests/databinding/src/test/java/org/apache/cxf/systest/aegis/SportsServiceImpl.java",
                "patch": "@@ -22,6 +22,7 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n \n@@ -60,5 +61,16 @@ public BeanWithCharacter getCharBean() {\n         return result;\n \n     }\n+\n+   \n+    public <T> T getGeneric(Collection<T> collection) {\n+        Iterator<T> iter = collection.iterator();\n+        \n+        T ret = null;\n+        if (iter.hasNext()) {\n+            ret = iter.next();\n+        }\n+        return ret;\n+    }\n       \n }",
                "raw_url": "https://github.com/apache/cxf/raw/4a8be430434f089138f6f06a83bb24294119b03c/systests/databinding/src/test/java/org/apache/cxf/systest/aegis/SportsServiceImpl.java",
                "sha": "6b0480777ed15decaed58ee9fb6f1c917017ae2a",
                "status": "modified"
            }
        ],
        "message": "[CXF-3527]NPE while use generic in collections with aegis databinding\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1127829 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/c021eb8e1e9aa37a23b1265fe1e6d0c63bc1e70b",
        "patched_files": [
            "SportsServiceImpl.java",
            "SportsService.java",
            "AbstractTypeCreator.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "AegisClientServerTest.java"
        ]
    },
    "cxf_4bf7f16": {
        "bug_id": "cxf_4bf7f16",
        "commit": "https://github.com/apache/cxf/commit/4bf7f16cf04d8863ec6fbaf2caf0c5894acad1f0",
        "file": [
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/cxf/blob/4bf7f16cf04d8863ec6fbaf2caf0c5894acad1f0/rt/core/src/main/java/org/apache/cxf/bus/CXFBusImpl.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/main/java/org/apache/cxf/bus/CXFBusImpl.java?ref=4bf7f16cf04d8863ec6fbaf2caf0c5894acad1f0",
                "deletions": 0,
                "filename": "rt/core/src/main/java/org/apache/cxf/bus/CXFBusImpl.java",
                "patch": "@@ -20,6 +20,7 @@\n package org.apache.cxf.bus;\n \n import java.util.Collection;\n+import java.util.List;\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.CopyOnWriteArrayList;\n@@ -90,6 +91,9 @@ public void setId(String i) {\n         Object obj = extensions.get(extensionType);\n         if (obj == null) {\n             ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n+            if (loc == null) {\n+                loc = createConfiguredBeanLocator();\n+            }\n             if (loc != null) {\n                 //force loading\n                 Collection<?> objs = loc.getBeansOfType(extensionType);\n@@ -107,6 +111,33 @@ public void setId(String i) {\n         return null;\n     }\n     \n+    protected synchronized ConfiguredBeanLocator createConfiguredBeanLocator() {\n+        ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n+        if (loc == null) {\n+            loc = new ConfiguredBeanLocator() {\n+                public List<String> getBeanNamesOfType(Class<?> type) {\n+                    return null;\n+                }\n+                public <T> Collection<? extends T> getBeansOfType(Class<T> type) {\n+                    return null;\n+                }\n+                public <T> T getBeanOfType(String name, Class<T> type) {\n+                    return null;\n+                }\n+                public <T> boolean loadBeansOfType(Class<T> type, BeanLoaderListener<T> listener) {\n+                    return false;\n+                }\n+                public boolean hasConfiguredPropertyValue(String beanName, \n+                                                          String propertyName,\n+                                                          String value) {\n+                    return false;\n+                }\n+            };\n+            this.setExtension(loc, ConfiguredBeanLocator.class);\n+        }\n+        return loc;\n+    }\n+\n     public <T> void setExtension(T extension, Class<T> extensionType) {\n         extensions.put(extensionType, extension);\n     }",
                "raw_url": "https://github.com/apache/cxf/raw/4bf7f16cf04d8863ec6fbaf2caf0c5894acad1f0/rt/core/src/main/java/org/apache/cxf/bus/CXFBusImpl.java",
                "sha": "9454015831571a40d3b30c61f0046d4a10327c11",
                "status": "modified"
            },
            {
                "additions": 60,
                "blob_url": "https://github.com/apache/cxf/blob/4bf7f16cf04d8863ec6fbaf2caf0c5894acad1f0/rt/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java",
                "changes": 73,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java?ref=4bf7f16cf04d8863ec6fbaf2caf0c5894acad1f0",
                "deletions": 13,
                "filename": "rt/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java",
                "patch": "@@ -18,7 +18,10 @@\n  */\n package org.apache.cxf.bus.extension;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n \n import org.apache.cxf.binding.BindingFactory;\n@@ -27,6 +30,7 @@\n import org.apache.cxf.bus.BusState;\n import org.apache.cxf.bus.CXFBusImpl;\n import org.apache.cxf.buslifecycle.BusLifeCycleManager;\n+import org.apache.cxf.configuration.ConfiguredBeanLocator;\n import org.apache.cxf.configuration.Configurer;\n import org.apache.cxf.configuration.NullConfigurer;\n import org.apache.cxf.resource.DefaultResourceManager;\n@@ -52,7 +56,7 @@\n     \n     public static final String BUS_PROPERTY_NAME = \"bus\";\n     private static final String BUS_ID_PROPERTY_NAME = \"org.apache.cxf.bus.id\";\n-    \n+    private final ExtensionManagerImpl extensionManager;\n     \n     public ExtensionManagerBus(Map<Class, Object> e, Map<String, Object> properties) {\n         super(e);\n@@ -88,11 +92,11 @@ public ExtensionManagerBus(Map<Class, Object> e, Map<String, Object> properties)\n         \n         extensions.put(ResourceManager.class, resourceManager);\n \n-        ExtensionManagerImpl em = new ExtensionManagerImpl(new String[0],\n-                                                           Thread.currentThread().getContextClassLoader(),\n-                                                           extensions,\n-                                                           resourceManager, \n-                                                           this);\n+        extensionManager = new ExtensionManagerImpl(new String[0],\n+                                                    Thread.currentThread().getContextClassLoader(),\n+                                                    extensions,\n+                                                    resourceManager, \n+                                                    this);\n                                   \n         setState(BusState.INITIAL);\n         \n@@ -104,33 +108,76 @@ public ExtensionManagerBus(Map<Class, Object> e, Map<String, Object> properties)\n         DestinationFactoryManager dfm = this.getExtension(DestinationFactoryManager.class);\n         if (null == dfm) {\n             dfm = new DestinationFactoryManagerImpl(\n-                new DeferredMap<DestinationFactory>(em, DestinationFactory.class),\n+                new DeferredMap<DestinationFactory>(extensionManager,\n+                        DestinationFactory.class),\n                 this);\n         }\n \n         ConduitInitiatorManager cfm = this.getExtension(ConduitInitiatorManager.class);\n         if (null == cfm) {\n-            cfm = new ConduitInitiatorManagerImpl(new DeferredMap<ConduitInitiator>(em, \n+            cfm = new ConduitInitiatorManagerImpl(new DeferredMap<ConduitInitiator>(extensionManager, \n                 ConduitInitiator.class), this);\n         }\n         \n         BindingFactoryManager bfm = this.getExtension(BindingFactoryManager.class);\n         if (null == bfm) {\n-            bfm = new BindingFactoryManagerImpl(new DeferredMap<BindingFactory>(em, BindingFactory.class),\n+            bfm = new BindingFactoryManagerImpl(new DeferredMap<BindingFactory>(extensionManager,\n+                                                    BindingFactory.class),\n                                                 this);\n             extensions.put(BindingFactoryManager.class, bfm);\n         }\n-        em.load(new String[] {ExtensionManagerImpl.BUS_EXTENSION_RESOURCE,\n-                              ExtensionManagerImpl.BUS_EXTENSION_RESOURCE_COMPAT});\n+        extensionManager.load(new String[] {\n+            ExtensionManagerImpl.BUS_EXTENSION_RESOURCE,\n+            ExtensionManagerImpl.BUS_EXTENSION_RESOURCE_COMPAT});\n         \n         \n-        this.setExtension(em, ExtensionManager.class);\n+        this.setExtension(extensionManager, ExtensionManager.class);\n     }\n \n     public ExtensionManagerBus() {\n         this(null, null);\n     }\n-    \n+    protected synchronized ConfiguredBeanLocator createConfiguredBeanLocator() {\n+        ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n+        if (loc == null) {\n+            loc = new ConfiguredBeanLocator() {\n+                public List<String> getBeanNamesOfType(Class<?> type) {\n+                    return null;\n+                }\n+                public <T> Collection<? extends T> getBeansOfType(Class<T> type) {\n+                    extensionManager.activateAllByType(type);\n+                    List<T> lst = new ArrayList<T>();\n+                    for (Object o : extensions.values()) {\n+                        if (type.isInstance(o)) {\n+                            lst.add(type.cast(o));\n+                        }\n+                    }\n+                    return lst;\n+                }\n+                public <T> T getBeanOfType(String name, Class<T> type) {\n+                    T t = extensionManager.getExtension(name, type);\n+                    if (t != null) {\n+                        return t;\n+                    }\n+                    extensionManager.activateAllByType(type);\n+                    return type.cast(extensions.get(type));\n+                }\n+                public <T> boolean loadBeansOfType(Class<T> type, BeanLoaderListener<T> listener) {\n+                    int s = extensions.size();\n+                    extensionManager.activateAllByType(type);\n+                    return s != extensions.size();\n+                }\n+                public boolean hasConfiguredPropertyValue(String beanName, \n+                                                          String propertyName,\n+                                                          String value) {\n+                    return false;\n+                }\n+            };\n+            this.setExtension(loc, ConfiguredBeanLocator.class);\n+        }\n+        return loc;\n+    }\n+\n     private String getBusId(Map<String, Object> properties) {\n \n         String busId = null;",
                "raw_url": "https://github.com/apache/cxf/raw/4bf7f16cf04d8863ec6fbaf2caf0c5894acad1f0/rt/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java",
                "sha": "b056f0dc4316fcd061f2adbe062e3ca78af73d3a",
                "status": "modified"
            }
        ],
        "message": "[CXF-2927] Create a ConfiguredBeanLocator if there isn't one to make\nsure we don't get NPE's\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1005222 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/a37f4aaad4d95c83d75c78a07529ba4a3fa8f4fd",
        "patched_files": [
            "CXFBusImpl.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "CXFBusImplTest.java"
        ]
    },
    "cxf_4e1149c": {
        "bug_id": "cxf_4e1149c",
        "commit": "https://github.com/apache/cxf/commit/4e1149ce5ee48723719305c68e00ec6f2d1e475e",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cxf/blob/4e1149ce5ee48723719305c68e00ec6f2d1e475e/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java?ref=4e1149ce5ee48723719305c68e00ec6f2d1e475e",
                "deletions": 5,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java",
                "patch": "@@ -1010,12 +1010,15 @@ private static boolean isServletApiContext(String name) {\n         } else if (SERVLET_CONFIG_CLASS_NAME.equals(name)) {\n             proxyClassName = \"org.apache.cxf.jaxrs.impl.tl.ThreadLocalServletConfig\";\n         }\n-        try {\n-            return (ThreadLocalProxy<?>)ClassLoaderUtils.loadClass(proxyClassName, InjectionUtils.class)\n-                .newInstance();\n-        } catch (Throwable t) {\n-            throw new RuntimeException(t);\n+        if (proxyClassName != null) {\n+            try {\n+                return (ThreadLocalProxy<?>)ClassLoaderUtils.loadClass(proxyClassName, InjectionUtils.class)\n+                    .newInstance();\n+            } catch (Throwable t) {\n+                throw new RuntimeException(t);\n+            }\n         }\n+        return null;\n     }\n     \n     public static Method getGetterFromSetter(Method setter) throws Exception {",
                "raw_url": "https://github.com/apache/cxf/raw/4e1149ce5ee48723719305c68e00ec6f2d1e475e/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java",
                "sha": "94911297a403f36cc154aab091e76e0fbecd292b",
                "status": "modified"
            }
        ],
        "message": "[CXF-6480] Avoiding NPE",
        "parent": "https://github.com/apache/cxf/commit/81bc682a409806567fc3485157e184e72feaf086",
        "patched_files": [
            "InjectionUtils.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "InjectionUtilsTest.java"
        ]
    },
    "cxf_5036637": {
        "bug_id": "cxf_5036637",
        "commit": "https://github.com/apache/cxf/commit/503663709c991b26d28d41a3689f5ed56cdda1d6",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cxf/blob/503663709c991b26d28d41a3689f5ed56cdda1d6/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/ClientProxyImpl.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/ClientProxyImpl.java?ref=503663709c991b26d28d41a3689f5ed56cdda1d6",
                "deletions": 3,
                "filename": "rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/ClientProxyImpl.java",
                "patch": "@@ -166,7 +166,7 @@ public Object invoke(Object o, Method m, Object[] params) throws Throwable {\n         \n         List<Object> pathParams = getPathParamValues(m, params, types, beanParamsList, ori);\n         \n-        int bodyIndex = getBodyIndex(types, ori);\n+        int bodyIndex = getBodyIndex(types, ori, params);\n         \n         UriBuilder builder = getCurrentBuilder().clone(); \n         if (isRoot) {\n@@ -205,13 +205,16 @@ public Object invoke(Object o, Method m, Object[] params) throws Throwable {\n         \n         headers.putAll(paramHeaders);\n         setRequestHeaders(headers, ori, types.containsKey(ParameterType.FORM), \n-            bodyIndex == -1 ? null : params[bodyIndex].getClass(), m.getReturnType());\n+            bodyIndex == -1 || params[bodyIndex] == null ? null : params[bodyIndex].getClass(), m.getReturnType());\n         \n         getState().setTemplates(getTemplateParametersMap(ori.getURITemplate(), pathParams));\n         \n         Object body = null;\n         if (bodyIndex != -1) {\n             body = params[bodyIndex];\n+            if (body == null) {\n+                bodyIndex = -1;\n+            }\n         } else if (types.containsKey(ParameterType.FORM))  {\n             body = handleForm(m, params, types, beanParamsList);\n         } else if (types.containsKey(ParameterType.REQUEST_BODY))  {\n@@ -275,7 +278,8 @@ private static boolean isIgnorableParameter(Method m, Parameter p) {\n     }\n     \n     private static int getBodyIndex(MultivaluedMap<ParameterType, Parameter> map, \n-                                    OperationResourceInfo ori) {\n+                                    OperationResourceInfo ori,\n+                                    Object[] params) {\n         List<Parameter> list = map.get(ParameterType.REQUEST_BODY);\n         int index = list == null || list.size() > 1 ? -1 : list.get(0).getIndex();\n         if (ori.isSubResourceLocator() && index != -1) {",
                "raw_url": "https://github.com/apache/cxf/raw/503663709c991b26d28d41a3689f5ed56cdda1d6/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/ClientProxyImpl.java",
                "sha": "d72854832440383ad7d4d5045a67473097f8641a",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cxf/blob/503663709c991b26d28d41a3689f5ed56cdda1d6/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/BookStore.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/BookStore.java?ref=503663709c991b26d28d41a3689f5ed56cdda1d6",
                "deletions": 2,
                "filename": "systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/BookStore.java",
                "patch": "@@ -562,9 +562,11 @@ public Response outfault() {\n     @Path(\"/collectionBook\")\n     @Produces({\"application/xml\", \"application/json\" })\n     @Consumes({\"application/xml\", \"application/json\" })\n-    public List<Book> postBookGetCollection(Book book) throws Exception {\n+    public List<Book> postBookGetCollection(@Nullable Book book) throws Exception {\n         List<Book> list = new ArrayList<Book>();\n-        list.add(book);\n+        if (book != null) {\n+            list.add(book);\n+        }\n         return list;\n     }\n     ",
                "raw_url": "https://github.com/apache/cxf/raw/503663709c991b26d28d41a3689f5ed56cdda1d6/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/BookStore.java",
                "sha": "af4bdc660f92668399c3e09e2a5d22108c5858b5",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cxf/blob/503663709c991b26d28d41a3689f5ed56cdda1d6/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/JAXRSClientServerBookTest.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/JAXRSClientServerBookTest.java?ref=503663709c991b26d28d41a3689f5ed56cdda1d6",
                "deletions": 0,
                "filename": "systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/JAXRSClientServerBookTest.java",
                "patch": "@@ -619,6 +619,17 @@ public void testPostCollectionOfBooksWebClient() throws Exception {\n         assertEquals(200, wc.getResponse().getStatus());\n     }\n     \n+    @Test\n+    public void testPostNullGetEmptyCollectionProxy() throws Exception {\n+        \n+        String endpointAddress = \"http://localhost:\" + PORT; \n+        BookStore bs = JAXRSClientFactory.create(endpointAddress, BookStore.class);\n+        List<Book> books = bs.postBookGetCollection(null);\n+        assertNotNull(books);\n+        assertEquals(0, books.size());\n+        \n+    }\n+    \n     @Test\n     public void testPostObjectGetCollection() throws Exception {\n         ",
                "raw_url": "https://github.com/apache/cxf/raw/503663709c991b26d28d41a3689f5ed56cdda1d6/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/JAXRSClientServerBookTest.java",
                "sha": "c2f355c2e4c99c9d3d6fb5e7a97785f70d695714",
                "status": "modified"
            }
        ],
        "message": "[CXF-5749] Avoiding NPE if client proxy is given null body parameter",
        "parent": "https://github.com/apache/cxf/commit/0cab9af902645eb9b72b3225c8271afa6002684f",
        "patched_files": [
            "BookStore.java",
            "ClientProxyImpl.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JAXRSClientServerBookTest.java"
        ]
    },
    "cxf_508ed23": {
        "bug_id": "cxf_508ed23",
        "commit": "https://github.com/apache/cxf/commit/508ed233f535fb4f6187a7369aa4360599b27361",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/508ed233f535fb4f6187a7369aa4360599b27361/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/ServiceImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/ServiceImpl.java?ref=508ed233f535fb4f6187a7369aa4360599b27361",
                "deletions": 1,
                "filename": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/ServiceImpl.java",
                "patch": "@@ -270,7 +270,9 @@ private JaxWsClientEndpointImpl getJaxwsEndpoint(QName portName, AbstractService\n         \n         //When the dispatch is created from EPR, the EPR's address will be set in portInfo\n         PortInfoImpl portInfo = getPortInfo(portName);\n-        if (portInfo != null && !portInfo.getAddress().equals(ei.getAddress())) {\n+        if (portInfo != null\n+            && portInfo.getAddress() != null \n+            && !portInfo.getAddress().equals(ei.getAddress())) {\n             ei.setAddress(portInfo.getAddress());\n         }\n ",
                "raw_url": "https://github.com/apache/cxf/raw/508ed233f535fb4f6187a7369aa4360599b27361/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/ServiceImpl.java",
                "sha": "df224063199e41d4479e8d28c451794ec4446fd5",
                "status": "modified"
            }
        ],
        "message": "[CXF-5476] Add an NPE guard\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1559242 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/1f60c6b3d49aa037c87c50fb1595e99448384695",
        "patched_files": [
            "ServiceImpl.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "ServiceImplTest.java",
            "TestServiceImpl.java"
        ]
    },
    "cxf_51814b3": {
        "bug_id": "cxf_51814b3",
        "commit": "https://github.com/apache/cxf/commit/51814b35896eb9143c62990a95d60d510a8d48db",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/51814b35896eb9143c62990a95d60d510a8d48db/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/WebClient.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/WebClient.java?ref=51814b35896eb9143c62990a95d60d510a8d48db",
                "deletions": 2,
                "filename": "rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/WebClient.java",
                "patch": "@@ -1443,8 +1443,8 @@ private void setEntityHeaders(Entity<?> entity) {\n         public <T> Future<T> method(String name, Entity<?> entity, InvocationCallback<T> callback) {\n             WebClient.this.setEntityHeaders(entity);\n             return doInvokeAsyncCallback(name, \n-                                         entity.getEntity(), \n-                                         entity.getEntity().getClass(), \n+                                         entity == null ? null : entity.getEntity(), \n+                                         entity == null ? null : entity.getEntity().getClass(),\n                                          null, \n                                          callback);\n         }",
                "raw_url": "https://github.com/apache/cxf/raw/51814b35896eb9143c62990a95d60d510a8d48db/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/WebClient.java",
                "sha": "812e204c419d0cae2a153974b4e537a92530ce96",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/cxf/blob/51814b35896eb9143c62990a95d60d510a8d48db/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/spec/ClientImpl.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/spec/ClientImpl.java?ref=51814b35896eb9143c62990a95d60d510a8d48db",
                "deletions": 7,
                "filename": "rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/spec/ClientImpl.java",
                "patch": "@@ -33,6 +33,7 @@\n import javax.ws.rs.client.WebTarget;\n import javax.ws.rs.core.Configurable;\n import javax.ws.rs.core.Configuration;\n+import javax.ws.rs.core.Feature;\n import javax.ws.rs.core.Link;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.UriBuilder;\n@@ -71,7 +72,12 @@ public void close() {\n     @Override\n     public Builder invocation(Link link) {\n         checkClosed();\n-        return target(link.getUriBuilder()).request();\n+        Builder builder = target(link.getUriBuilder()).request();\n+        String type = link.getType();\n+        if (type != null) {\n+            builder.accept(type);\n+        }\n+        return builder;\n     }\n \n     @Override\n@@ -205,12 +211,14 @@ public Builder request() {\n             List<Object> providers = new LinkedList<Object>();\n             Configuration cfg = configImpl.getConfiguration();\n             for (Object p : cfg.getInstances()) {\n-                Map<Class<?>, Integer> contracts = cfg.getContracts(p.getClass());\n-                if (contracts == null || contracts.isEmpty()) {\n-                    providers.add(p);\n-                } else {\n-                    providers.add(\n-                        new FilterProviderInfo<Object>(p, pf.getBus(), contracts));\n+                if (!(p instanceof Feature)) {\n+                    Map<Class<?>, Integer> contracts = cfg.getContracts(p.getClass());\n+                    if (contracts == null || contracts.isEmpty()) {\n+                        providers.add(p);\n+                    } else {\n+                        providers.add(\n+                            new FilterProviderInfo<Object>(p, pf.getBus(), contracts));\n+                    }\n                 }\n             }\n             ",
                "raw_url": "https://github.com/apache/cxf/raw/51814b35896eb9143c62990a95d60d510a8d48db/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/spec/ClientImpl.java",
                "sha": "d4c4b0d37269a47d1c749cdab5fb777b8054a3b6",
                "status": "modified"
            }
        ],
        "message": "[CXF-5135] Adding a missing NPE guard to AsyncInvokerImpl\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1520597 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/19e99e219c74326ce6edc30a0b69a0bc45ce85d8",
        "patched_files": [
            "ClientImpl.java",
            "WebClient.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "WebClientTest.java",
            "ClientImplTest.java"
        ]
    },
    "cxf_53d69d2": {
        "bug_id": "cxf_53d69d2",
        "commit": "https://github.com/apache/cxf/commit/53d69d2e5a7b31a292f0365b0c70a3ad804adb48",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/53d69d2e5a7b31a292f0365b0c70a3ad804adb48/api/src/main/java/org/apache/cxf/databinding/AbstractDataBinding.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/api/src/main/java/org/apache/cxf/databinding/AbstractDataBinding.java?ref=53d69d2e5a7b31a292f0365b0c70a3ad804adb48",
                "deletions": 1,
                "filename": "api/src/main/java/org/apache/cxf/databinding/AbstractDataBinding.java",
                "patch": "@@ -84,7 +84,7 @@ public XmlSchema addSchemaDocument(ServiceInfo serviceInfo, SchemaCollection col\n         \n         SchemaInfo schemaInfo = serviceInfo.getSchema(ns);\n         if (schemaInfo != null && (systemId == null && schemaInfo.getSystemId() == null \n-            || systemId != null && schemaInfo.getSystemId().equalsIgnoreCase(systemId))) {\n+            || systemId != null && systemId.equalsIgnoreCase(schemaInfo.getSystemId()))) {\n             return schemaInfo.getSchema();\n         }\n         ",
                "raw_url": "https://github.com/apache/cxf/raw/53d69d2e5a7b31a292f0365b0c70a3ad804adb48/api/src/main/java/org/apache/cxf/databinding/AbstractDataBinding.java",
                "sha": "39dca99fcdda5adc95185707f8cd6248d1af9319",
                "status": "modified"
            }
        ],
        "message": "Yet another update to avoid a possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@702248 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/9524b0db1bbf781be26e814ed922aaafcda69314",
        "patched_files": [
            "AbstractDataBinding.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "AbstractDataBindingTest.java"
        ]
    },
    "cxf_569b033": {
        "bug_id": "cxf_569b033",
        "commit": "https://github.com/apache/cxf/commit/569b0336ee0e2ac30a977d297b5368dd37585468",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cxf/blob/569b0336ee0e2ac30a977d297b5368dd37585468/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/AbstractJAXBProvider.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/AbstractJAXBProvider.java?ref=569b0336ee0e2ac30a977d297b5368dd37585468",
                "deletions": 23,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/AbstractJAXBProvider.java",
                "patch": "@@ -23,7 +23,6 @@\n import java.io.OutputStream;\n import java.io.PrintWriter;\n import java.io.StringWriter;\n-import java.io.UnsupportedEncodingException;\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Array;\n import java.lang.reflect.Type;\n@@ -44,7 +43,6 @@\n import javax.ws.rs.WebApplicationException;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.MultivaluedMap;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.ext.ContextResolver;\n import javax.ws.rs.ext.MessageBodyReader;\n@@ -92,7 +90,6 @@\n     private static final String JAXB_DEFAULT_NAMESPACE = \"##default\";\n     private static final String JAXB_DEFAULT_NAME = \"##default\";\n     \n-    private static final String CHARSET_PARAMETER = \"charset\";\n     private static Map<String, JAXBContext> packageContexts = new WeakHashMap<String, JAXBContext>();\n     private static Map<Class<?>, JAXBContext> classContexts = new WeakHashMap<Class<?>, JAXBContext>();\n    \n@@ -443,27 +440,7 @@ protected Marshaller createMarshaller(Object obj, Class<?> cls, Type genericType\n         return marshaller;\n     }\n     \n-    protected String getEncoding(MediaType mt, MultivaluedMap<String, Object> headers) {\n-        String enc = mt.getParameters().get(CHARSET_PARAMETER);\n-        if (enc == null) {\n-            return null;\n-        }\n-        try {\n-            \"0\".getBytes(enc);\n-            return enc;\n-        } catch (UnsupportedEncodingException ex) {\n-            String message = new org.apache.cxf.common.i18n.Message(\"UNSUPPORTED_ENCODING\", \n-                                 BUNDLE, enc).toString();\n-            LOG.warning(message);\n-            headers.putSingle(HttpHeaders.CONTENT_TYPE, \n-                JAXRSUtils.removeMediaTypeParameter(mt, CHARSET_PARAMETER) \n-                + ';' + CHARSET_PARAMETER + \"=UTF-8\");\n-        }\n-        return null;\n-    }\n         \n-\n-    \n     protected Class<?> getActualType(Class<?> type, Type genericType, Annotation[] anns) {\n         Class<?> theType = null;\n         if (JAXBElement.class.isAssignableFrom(type)) {",
                "raw_url": "https://github.com/apache/cxf/raw/569b0336ee0e2ac30a977d297b5368dd37585468/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/AbstractJAXBProvider.java",
                "sha": "38624bb8ee900b75ecd6538b54d8a15453d92aef",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/569b0336ee0e2ac30a977d297b5368dd37585468/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/JAXBElementProvider.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/JAXBElementProvider.java?ref=569b0336ee0e2ac30a977d297b5368dd37585468",
                "deletions": 1,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/JAXBElementProvider.java",
                "patch": "@@ -55,6 +55,7 @@\n import org.apache.cxf.helpers.CastUtils;\n import org.apache.cxf.jaxb.NamespaceMapper;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.apache.cxf.jaxrs.utils.HttpUtils;\n import org.apache.cxf.jaxrs.utils.InjectionUtils;\n import org.apache.cxf.jaxrs.utils.schemas.SchemaHandler;\n import org.apache.cxf.message.Attachment;\n@@ -230,7 +231,7 @@ public void writeTo(Object obj, Class<?> cls, Type genericType, Annotation[] ann\n         try {\n             Object actualObject = checkAdapter(obj, anns, true);\n             Class<?> actualClass = obj != actualObject ? actualObject.getClass() : cls;\n-            String encoding = getEncoding(m, headers);\n+            String encoding = HttpUtils.getSetEncoding(m, headers, null);\n             if (InjectionUtils.isSupportedCollectionOrArray(actualClass)) {\n                 actualClass = InjectionUtils.getActualType(genericType);\n                 marshalCollection(cls, actualObject, actualClass, genericType, encoding, os, m);",
                "raw_url": "https://github.com/apache/cxf/raw/569b0336ee0e2ac30a977d297b5368dd37585468/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/JAXBElementProvider.java",
                "sha": "7f7b4427a84ecf200c1f22fc1ab8c754b91315a5",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/569b0336ee0e2ac30a977d297b5368dd37585468/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/JSONProvider.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/JSONProvider.java?ref=569b0336ee0e2ac30a977d297b5368dd37585468",
                "deletions": 4,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/JSONProvider.java",
                "patch": "@@ -51,6 +51,7 @@\n import javax.xml.stream.XMLStreamWriter;\n \n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.apache.cxf.jaxrs.utils.HttpUtils;\n import org.apache.cxf.jaxrs.utils.InjectionUtils;\n import org.apache.cxf.jaxrs.utils.schemas.SchemaHandler;\n \n@@ -258,10 +259,8 @@ public void writeTo(Object obj, Class<?> cls, Type genericType, Annotation[] ann\n             if (cls == genericType) {\n                 genericType = actualClass;\n             }\n-            String encoding = getEncoding(m, headers);\n-            if (encoding == null) {\n-                encoding = \"UTF-8\";\n-            }\n+            String encoding = HttpUtils.getSetEncoding(m, headers, \"UTF-8\");\n+            \n             if (InjectionUtils.isSupportedCollectionOrArray(actualClass)) {\n                 actualClass = InjectionUtils.getActualType(genericType);\n                 marshalCollection(cls, actualObject, actualClass, genericType, encoding, os, m);",
                "raw_url": "https://github.com/apache/cxf/raw/569b0336ee0e2ac30a977d297b5368dd37585468/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/JSONProvider.java",
                "sha": "6f10d453555ee510db730de958d15cdfdd75683a",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cxf/blob/569b0336ee0e2ac30a977d297b5368dd37585468/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/Messages.properties",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/Messages.properties?ref=569b0336ee0e2ac30a977d297b5368dd37585468",
                "deletions": 1,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/Messages.properties",
                "patch": "@@ -19,7 +19,6 @@\n #\n #\n JAXB_EXCEPTION=JAXBException occurred : {0}\n-UNSUPPORTED_ENCODING=Unsupported encoding : {0}, defaulting to UTF-8\n NO_COLLECTION_ROOT=No collection name is provided\n NO_MSG_WRITER =.No message body writer found for class : {0}.\n EMPTY_BODY=Message body is empty",
                "raw_url": "https://github.com/apache/cxf/raw/569b0336ee0e2ac30a977d297b5368dd37585468/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/Messages.properties",
                "sha": "329a7e86025cf99ce8f8306473d725a0e7d894bc",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/569b0336ee0e2ac30a977d297b5368dd37585468/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/PrimitiveTextProvider.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/PrimitiveTextProvider.java?ref=569b0336ee0e2ac30a977d297b5368dd37585468",
                "deletions": 1,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/PrimitiveTextProvider.java",
                "patch": "@@ -31,6 +31,7 @@\n \n import org.apache.cxf.helpers.IOUtils;\n import org.apache.cxf.jaxrs.model.ParameterType;\n+import org.apache.cxf.jaxrs.utils.HttpUtils;\n import org.apache.cxf.jaxrs.utils.InjectionUtils;\n \n public class PrimitiveTextProvider \n@@ -65,7 +66,8 @@ public boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotat\n     public void writeTo(Object obj, Class<?> type, Type genType, Annotation[] anns, \n                         MediaType mt, MultivaluedMap<String, Object> headers,\n                         OutputStream os) throws IOException {\n-        os.write(obj.toString().getBytes(\"UTF-8\"));\n+        String encoding = HttpUtils.getSetEncoding(mt, headers, \"UTF-8\");\n+        os.write(obj.toString().getBytes(encoding));\n     }\n \n }",
                "raw_url": "https://github.com/apache/cxf/raw/569b0336ee0e2ac30a977d297b5368dd37585468/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/PrimitiveTextProvider.java",
                "sha": "ddcd8274766470d08190a821cdf939a2e15590e8",
                "status": "modified"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/cxf/blob/569b0336ee0e2ac30a977d297b5368dd37585468/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/HttpUtils.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/HttpUtils.java?ref=569b0336ee0e2ac30a977d297b5368dd37585468",
                "deletions": 2,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/HttpUtils.java",
                "patch": "@@ -28,15 +28,21 @@\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n+import java.util.ResourceBundle;\n import java.util.TimeZone;\n+import java.util.logging.Logger;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n import javax.ws.rs.core.PathSegment;\n import javax.ws.rs.core.Response;\n \n+import org.apache.cxf.common.i18n.BundleUtils;\n+import org.apache.cxf.common.logging.LogUtils;\n import org.apache.cxf.common.util.UrlUtils;\n import org.apache.cxf.jaxrs.impl.HttpHeadersImpl;\n import org.apache.cxf.jaxrs.impl.PathSegmentImpl;\n@@ -47,10 +53,14 @@\n \n public final class HttpUtils {\n     \n+    private static final ResourceBundle BUNDLE = BundleUtils.getBundle(HttpUtils.class);\n+    private static final Logger LOG = LogUtils.getL7dLogger(HttpUtils.class);\n+    \n     private static final String LOCAL_IP_ADDRESS = \"127.0.0.1\";\n     private static final String LOCAL_HOST = \"localhost\";\n     private static final Pattern ENCODE_PATTERN = Pattern.compile(\"%[0-9a-fA-F][0-9a-fA-F]\");\n-    \n+    private static final String CHARSET_PARAMETER = \"charset\";\n+        \n     private HttpUtils() {\n     }\n     \n@@ -244,5 +254,25 @@ public static String fromPathSegment(PathSegment ps) {\n         }\n         return Response.Status.BAD_REQUEST;\n     }\n-    \n+ \n+    public static String getSetEncoding(MediaType mt, MultivaluedMap<String, Object> headers,\n+                                        String defaultEncoding) {\n+        String enc = mt.getParameters().get(CHARSET_PARAMETER);\n+        if (enc == null) {\n+            return defaultEncoding;\n+        }\n+        try {\n+            \"0\".getBytes(enc);\n+            return enc;\n+        } catch (UnsupportedEncodingException ex) {\n+            String message = new org.apache.cxf.common.i18n.Message(\"UNSUPPORTED_ENCODING\", \n+                                 BUNDLE, enc, defaultEncoding).toString();\n+            LOG.warning(message);\n+            headers.putSingle(HttpHeaders.CONTENT_TYPE, \n+                JAXRSUtils.removeMediaTypeParameter(mt, CHARSET_PARAMETER) \n+                + ';' + CHARSET_PARAMETER + \"=\" \n+                + (defaultEncoding == null ? \"UTF-8\" : defaultEncoding));\n+        }\n+        return defaultEncoding;\n+    }\n }",
                "raw_url": "https://github.com/apache/cxf/raw/569b0336ee0e2ac30a977d297b5368dd37585468/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/HttpUtils.java",
                "sha": "ba53d0fff8eb98e4ed9352ce906d9681379dd8f8",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/569b0336ee0e2ac30a977d297b5368dd37585468/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java?ref=569b0336ee0e2ac30a977d297b5368dd37585468",
                "deletions": 0,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java",
                "patch": "@@ -831,6 +831,9 @@ public static void fillInValuesFromBean(Object bean, String baseName,\n                 }\n                 \n                 Object value = extractFromMethod(bean, m);\n+                if (value == null) {\n+                    continue;\n+                }\n                 if (isPrimitive(value.getClass())) {\n                     values.putSingle(propertyName, value);\n                 } else if (isSupportedCollectionOrArray(value.getClass())) {",
                "raw_url": "https://github.com/apache/cxf/raw/569b0336ee0e2ac30a977d297b5368dd37585468/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java",
                "sha": "0319dfa5f13337b3278759809de1c9ac275b9c6b",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/569b0336ee0e2ac30a977d297b5368dd37585468/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/Messages.properties",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/Messages.properties?ref=569b0336ee0e2ac30a977d297b5368dd37585468",
                "deletions": 1,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/Messages.properties",
                "patch": "@@ -40,4 +40,5 @@ CRI_SELECTED_POSSIBLY=Resource class {0} may get selected, request path : {0}, r\n CRI_SELECTED=Resource class {0} has been selected, request path : {0}, resource class @Path : {1}\n OPER_NO_MATCH=No method match, method name : {0}, request path : {1}, method @Path : {2}, HTTP Method : {3}, method HTTP Method : {4}, ContentType : {5}, method @Consumes : {6}, Accept : {7}, method @Produces : {8}.\n MULTTIPART_ID_NOT_FOUND=No multipart with content id {0} found, request content type : {1}\n-WRONG_FORM_MEDIA_TYPE=An application/x-www-form-urlencoded form request is expected but the request media type is {0}. Consider removing @FormParam annotations.    \n\\ No newline at end of file\n+WRONG_FORM_MEDIA_TYPE=An application/x-www-form-urlencoded form request is expected but the request media type is {0}. Consider removing @FormParam annotations.\n+UNSUPPORTED_ENCODING=Unsupported encoding : {0}, defaulting to {1}    \n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cxf/raw/569b0336ee0e2ac30a977d297b5368dd37585468/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/Messages.properties",
                "sha": "0752a7c30f38bb4e61d8793426e92150e04f949e",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/cxf/blob/569b0336ee0e2ac30a977d297b5368dd37585468/rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/provider/PrimitiveTextProviderTest.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/provider/PrimitiveTextProviderTest.java?ref=569b0336ee0e2ac30a977d297b5368dd37585468",
                "deletions": 2,
                "filename": "rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/provider/PrimitiveTextProviderTest.java",
                "patch": "@@ -23,9 +23,13 @@\n import java.io.ByteArrayOutputStream;\n import java.util.Arrays;\n \n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n import javax.ws.rs.ext.MessageBodyReader;\n import javax.ws.rs.ext.MessageBodyWriter;\n \n+import org.apache.cxf.jaxrs.impl.MetadataMap;\n+\n import org.junit.Assert;\n import org.junit.Test;\n \n@@ -84,13 +88,28 @@ public void testReadBoolean() throws Exception {\n     public void testWriteBoolean() throws Exception {\n         MessageBodyWriter p = new PrimitiveTextProvider();\n         ByteArrayOutputStream os = new ByteArrayOutputStream();\n-        p.writeTo(Boolean.TRUE, null, null, null, null, null, os);\n+        p.writeTo(Boolean.TRUE, null, null, null, MediaType.TEXT_PLAIN_TYPE, null, os);\n         assertTrue(Arrays.equals(new String(\"true\").getBytes(), os.toByteArray()));\n         \n         os = new ByteArrayOutputStream();\n         \n         final boolean value = true;\n-        p.writeTo(value, null, null, null, null, null, os);\n+        p.writeTo(value, null, null, null, MediaType.TEXT_PLAIN_TYPE, null, os);\n         assertTrue(Arrays.equals(new String(\"true\").getBytes(), os.toByteArray()));\n     }\n+    \n+    \n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void testWriteStringISO() throws Exception {\n+        MessageBodyWriter p = new PrimitiveTextProvider();\n+        ByteArrayOutputStream os = new ByteArrayOutputStream();\n+        MultivaluedMap<String, Object> headers = new MetadataMap<String, Object>();\n+        p.writeTo(\"Hello, my name is F\ufffdlix Agn\ufffds\", \n+                  String.class, String.class, null, MediaType.valueOf(\"text/plain;charset=ISO-8859-1\"),\n+                  headers, os);\n+        assertEquals(\"Hello, my name is F\ufffdlix Agn\ufffds\", new String(os.toByteArray()));\n+    }\n+    \n+        \n }",
                "raw_url": "https://github.com/apache/cxf/raw/569b0336ee0e2ac30a977d297b5368dd37585468/rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/provider/PrimitiveTextProviderTest.java",
                "sha": "3378955e9a69bb7ae86cdd4d691d6eee4c8912c9",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cxf/blob/569b0336ee0e2ac30a977d297b5368dd37585468/rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/utils/InjectionUtilsTest.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/utils/InjectionUtilsTest.java?ref=569b0336ee0e2ac30a977d297b5368dd37585468",
                "deletions": 0,
                "filename": "rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/utils/InjectionUtilsTest.java",
                "patch": "@@ -100,6 +100,8 @@ public void testExtractValuesFromBean() {\n         private Long b;\n         private List<String> c;\n         private CustomerBean2 d;\n+        private String e; \n+        \n         public void setA(String aString) {\n             this.a = aString;\n         }\n@@ -125,6 +127,13 @@ public CustomerBean2 getD() {\n             return d;\n         }\n         \n+        public void setE(String e) {\n+            this.e = e;\n+        }\n+        public String getE() {\n+            return e;\n+        }\n+        \n     }\n     \n     static class CustomerBean2 {",
                "raw_url": "https://github.com/apache/cxf/raw/569b0336ee0e2ac30a977d297b5368dd37585468/rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/utils/InjectionUtilsTest.java",
                "sha": "a86697f117932e067952fde5ab4a1260e92edd4d",
                "status": "modified"
            }
        ],
        "message": "CXF-2784,CXF-2787: fixing NPE to do with  extracting values from parameter beans, updating primitives provider to check for custom charsets\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@939012 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/762a579fe54f0688dd0bd19116dcda0c65076cfa",
        "patched_files": [
            "JSONProvider.java",
            "PrimitiveTextProvider.java",
            "Messages.java",
            "AbstractJAXBProvider.java",
            "JAXBElementProvider.java",
            "HttpUtils.java",
            "InjectionUtils.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "PrimitiveTextProviderTest.java",
            "JSONProviderTest.java",
            "InjectionUtilsTest.java",
            "JAXBElementProviderTest.java",
            "HttpUtilsTest.java"
        ]
    },
    "cxf_56a44e0": {
        "bug_id": "cxf_56a44e0",
        "commit": "https://github.com/apache/cxf/commit/56a44e02e49f1d5281799ac57370b03772620cc8",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/56a44e02e49f1d5281799ac57370b03772620cc8/rt/transports/http-netty/netty-server/src/main/java/org/apache/cxf/transport/http/netty/server/NettyHttpDestination.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http-netty/netty-server/src/main/java/org/apache/cxf/transport/http/netty/server/NettyHttpDestination.java?ref=56a44e02e49f1d5281799ac57370b03772620cc8",
                "deletions": 2,
                "filename": "rt/transports/http-netty/netty-server/src/main/java/org/apache/cxf/transport/http/netty/server/NettyHttpDestination.java",
                "patch": "@@ -196,13 +196,13 @@ protected void serviceRequest(final ServletContext context,\n \n         if (inMessage == null) {\n \n+            ExchangeImpl exchange = new ExchangeImpl();\n             inMessage = new MessageImpl();\n+            exchange.setInMessage(inMessage);\n             setupMessage(inMessage, context, req, resp);\n \n             ((MessageImpl) inMessage).setDestination(this);\n \n-            ExchangeImpl exchange = new ExchangeImpl();\n-            exchange.setInMessage(inMessage);\n             exchange.setSession(new HTTPSession(req));\n         }\n ",
                "raw_url": "https://github.com/apache/cxf/raw/56a44e02e49f1d5281799ac57370b03772620cc8/rt/transports/http-netty/netty-server/src/main/java/org/apache/cxf/transport/http/netty/server/NettyHttpDestination.java",
                "sha": "0995b9ce8de56e05842432abb446b88d324c518f",
                "status": "modified"
            }
        ],
        "message": "Fix NPE on server side\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1502082 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/6a825d6f00ee51a58effb6bc07339f62bb3ae67c",
        "patched_files": [
            "NettyHttpDestination.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "NettyHttpDestinationTest.java"
        ]
    },
    "cxf_57019cd": {
        "bug_id": "cxf_57019cd",
        "commit": "https://github.com/apache/cxf/commit/57019cdfceffb176c9bd005eff0b50cdb358c5d6",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/57019cdfceffb176c9bd005eff0b50cdb358c5d6/rt/javascript/src/main/java/org/apache/cxf/javascript/service/ServiceJavascriptBuilder.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/javascript/src/main/java/org/apache/cxf/javascript/service/ServiceJavascriptBuilder.java?ref=57019cdfceffb176c9bd005eff0b50cdb358c5d6",
                "deletions": 1,
                "filename": "rt/javascript/src/main/java/org/apache/cxf/javascript/service/ServiceJavascriptBuilder.java",
                "patch": "@@ -740,7 +740,8 @@ private void getElementsForParts(MessageInfo message, List<ParticleInfo> element\n                         if (element.getSchemaTypeName() != null) {\n                             element.setSchemaType(xmlSchemaCollection\n                                                   .getTypeByQName(element.getSchemaTypeName()));\n-                        } else if (element.getRef().getTargetQName() != null) {\n+                        } else if (element.getRef().getTargetQName() != null\n+                            && element.getRef().getTarget().getSchemaTypeName() != null) {\n                             element = element.getRef().getTarget();\n                             element.setSchemaType(xmlSchemaCollection\n                                                   .getTypeByQName(element.getSchemaTypeName()));",
                "raw_url": "https://github.com/apache/cxf/raw/57019cdfceffb176c9bd005eff0b50cdb358c5d6/rt/javascript/src/main/java/org/apache/cxf/javascript/service/ServiceJavascriptBuilder.java",
                "sha": "7779531daa4743cd51b6567842078bf148c13876",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/cxf/blob/57019cdfceffb176c9bd005eff0b50cdb358c5d6/tools/wsdlto/frontend/javascript/src/test/java/org/apache/cxf/tools/wsdlto/javascript/WSDLToJavaScriptTest.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/wsdlto/frontend/javascript/src/test/java/org/apache/cxf/tools/wsdlto/javascript/WSDLToJavaScriptTest.java?ref=57019cdfceffb176c9bd005eff0b50cdb358c5d6",
                "deletions": 1,
                "filename": "tools/wsdlto/frontend/javascript/src/test/java/org/apache/cxf/tools/wsdlto/javascript/WSDLToJavaScriptTest.java",
                "patch": "@@ -53,6 +53,25 @@ public void testGeneration() throws Exception {\n         String javascript = IOUtils.readStringFromStream(fis);\n         assertTrue(javascript.contains(\"xmlns:murble='http://apache.org/hello_world_soap_http'\"));\n     }\n-    \n+   \n+    @Test\n+    public void testCXF3891() throws Exception {\n+        JavaScriptContainer container = new JavaScriptContainer(null);\n+\n+        ToolContext context = new ToolContext();\n+        context.put(ToolConstants.CFG_WSDLURL, getLocation(\"hello_world_ref.wsdl\"));\n+        context.put(ToolConstants.CFG_OUTPUTDIR, output.toString()); \n+        String[] prefixes = new String[1];\n+        prefixes[0] = \"http://apache.org/hello_world_soap_http=murble\";\n+        context.put(ToolConstants.CFG_JSPACKAGEPREFIX, prefixes);\n+        container.setContext(context); \n+        container.execute();\n+        // now we really want to check some results.\n+        File resultFile = new File(output, \"SOAPService.js\");\n+        assertTrue(resultFile.canRead());\n+        FileInputStream fis = new FileInputStream(resultFile);\n+        String javascript = IOUtils.readStringFromStream(fis);\n+        assertTrue(javascript.contains(\"xmlns:murble='http://apache.org/hello_world_soap_http'\"));\n+    }\n    \n }",
                "raw_url": "https://github.com/apache/cxf/raw/57019cdfceffb176c9bd005eff0b50cdb358c5d6/tools/wsdlto/frontend/javascript/src/test/java/org/apache/cxf/tools/wsdlto/javascript/WSDLToJavaScriptTest.java",
                "sha": "15af8697b08bc2c9b71af21ded29247143728876",
                "status": "modified"
            },
            {
                "additions": 80,
                "blob_url": "https://github.com/apache/cxf/blob/57019cdfceffb176c9bd005eff0b50cdb358c5d6/tools/wsdlto/frontend/javascript/src/test/resources/org/apache/cxf/tools/wsdlto/javascript/hello_world_ref.wsdl",
                "changes": 80,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/wsdlto/frontend/javascript/src/test/resources/org/apache/cxf/tools/wsdlto/javascript/hello_world_ref.wsdl?ref=57019cdfceffb176c9bd005eff0b50cdb358c5d6",
                "deletions": 0,
                "filename": "tools/wsdlto/frontend/javascript/src/test/resources/org/apache/cxf/tools/wsdlto/javascript/hello_world_ref.wsdl",
                "patch": "@@ -0,0 +1,80 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements. See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership. The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License. You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied. See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<wsdl:definitions xmlns=\"http://schemas.xmlsoap.org/wsdl/\"\n+      xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\"\n+      xmlns:tns=\"http://apache.org/hello_world_soap_http\"\n+      xmlns:x1=\"http://apache.org/hello_world_soap_http/types\"\n+      xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\"\n+      xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n+      targetNamespace=\"http://apache.org/hello_world_soap_http\" name=\"HelloWorld\">\n+    <wsdl:types>\n+        <schema targetNamespace=\"http://apache.org/hello_world_soap_http/types\" xmlns=\"http://www.w3.org/2001/XMLSchema\" xmlns:x1=\"http://apache.org/hello_world_soap_http/types\" elementFormDefault=\"qualified\">\n+            <element name=\"sayHi\">\n+                <complexType/>\n+            </element>\n+            <element name=\"sayHiResponse\">\n+                <complexType>\n+                    <sequence>\n+                        <element ref=\"x1:responseType\"/>\n+                    </sequence>\n+                </complexType>\n+            </element>\n+            <element name=\"responseType\">\n+                <complexType>\n+                    <sequence>\n+                        <element name=\"message\" type=\"string\"/>\n+                    </sequence>\n+                </complexType>\n+            </element>\n+        </schema>\n+    </wsdl:types>\n+    <wsdl:message name=\"sayHiRequest\">\n+        <wsdl:part name=\"in\" element=\"x1:sayHi\"/>\n+    </wsdl:message>\n+    <wsdl:message name=\"sayHiResponse\">\n+        <wsdl:part name=\"out\" element=\"x1:sayHiResponse\"/>\n+    </wsdl:message>\n+    <wsdl:portType name=\"Greeter\">\n+        <wsdl:operation name=\"sayHi\">\n+            <wsdl:input name=\"sayHiRequest\" message=\"tns:sayHiRequest\"/>\n+            <wsdl:output name=\"sayHiResponse\" message=\"tns:sayHiResponse\"/>\n+        </wsdl:operation>\n+    </wsdl:portType>\n+\n+    <wsdl:binding name=\"Greeter_SOAPBinding\" type=\"tns:Greeter\">\n+        <soap:binding style=\"document\" transport=\"http://schemas.xmlsoap.org/soap/http\"/>\n+        <wsdl:operation name=\"sayHi\">\n+            <soap:operation style=\"document\"/>\n+            <wsdl:input>\n+                <soap:body use=\"literal\"/>\n+            </wsdl:input>\n+            <wsdl:output>\n+                <soap:body use=\"literal\"/>\n+            </wsdl:output>\n+        </wsdl:operation>\n+    </wsdl:binding>\n+\n+    <wsdl:service name=\"SOAPService\">\n+        <wsdl:port name=\"SoapPort\" binding=\"tns:Greeter_SOAPBinding\">\n+            <soap:address location=\"http://localhost:9000/SoapContext/SoapPort\"/>\n+        </wsdl:port>\n+    </wsdl:service>\n+</wsdl:definitions>\n+",
                "raw_url": "https://github.com/apache/cxf/raw/57019cdfceffb176c9bd005eff0b50cdb358c5d6/tools/wsdlto/frontend/javascript/src/test/resources/org/apache/cxf/tools/wsdlto/javascript/hello_world_ref.wsdl",
                "sha": "77f039c3a54f61d2b370e0042e5de8fbe5e95559",
                "status": "added"
            }
        ],
        "message": "[CXF-3891] wsdl2js NPE's with element references to an element with an\nanonymous type\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1210614 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/16e66827d5ab2445459e2a62cf2b5bdbe0f09af0",
        "patched_files": [
            "WSDLToJavaScript.java",
            "hello_world_ref.java",
            "ServiceJavascriptBuilder.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "WSDLToJavaScriptTest.java"
        ]
    },
    "cxf_58209cc": {
        "bug_id": "cxf_58209cc",
        "commit": "https://github.com/apache/cxf/commit/58209cc29f33cd1a6cd7ceee8110e3ed2299a2bf",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cxf/blob/58209cc29f33cd1a6cd7ceee8110e3ed2299a2bf/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/interceptor/CheckFaultInterceptor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/interceptor/CheckFaultInterceptor.java?ref=58209cc29f33cd1a6cd7ceee8110e3ed2299a2bf",
                "deletions": 0,
                "filename": "rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/interceptor/CheckFaultInterceptor.java",
                "patch": "@@ -54,6 +54,10 @@ public void handleMessage(SoapMessage message) {\n                 && xmlReader.hasNext()) {\n                 x = xmlReader.next();\n             }\n+            if (!xmlReader.hasNext()) {\n+                //end of document, just return\n+                return;\n+            }\n         } catch (XMLStreamException e) {\n             throw new SoapFault(new Message(\"XML_STREAM_EXC\", LOG), e, \n                                 message.getVersion().getSender());",
                "raw_url": "https://github.com/apache/cxf/raw/58209cc29f33cd1a6cd7ceee8110e3ed2299a2bf/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/interceptor/CheckFaultInterceptor.java",
                "sha": "5abf67e192d41bc9f0011e74c22d3b47e8932d67",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cxf/blob/58209cc29f33cd1a6cd7ceee8110e3ed2299a2bf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/interceptor/JAXRSInInterceptor.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/interceptor/JAXRSInInterceptor.java?ref=58209cc29f33cd1a6cd7ceee8110e3ed2299a2bf",
                "deletions": 2,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/interceptor/JAXRSInInterceptor.java",
                "patch": "@@ -134,6 +134,7 @@ private void processRequest(Message message) {\n             throw new WebApplicationException(404);\n         }\n \n+        message.getExchange().put(ROOT_RESOURCE_CLASS, resource);\n \n         List<ProviderInfo<RequestHandler>> shs = \n             ProviderFactory.getInstance().getRequestHandlers();\n@@ -144,6 +145,11 @@ private void processRequest(Message message) {\n                 acceptTypes = (String)message.get(Message.ACCEPT_CONTENT_TYPE);\n                 List<MediaType> acceptContentTypes = JAXRSUtils.sortMediaTypes(acceptTypes);\n                 message.getExchange().put(Message.ACCEPT_CONTENT_TYPE, acceptContentTypes);\n+                OperationResourceInfo ori = \n+                    JAXRSUtils.findTargetMethod(resource, values.getFirst(URITemplate.FINAL_MATCH_GROUP), \n+                                               httpMethod, values, requestContentType, acceptContentTypes);\n+                message.getExchange().put(OperationResourceInfo.class, ori);\n+\n                 return;\n             }\n         }\n@@ -152,8 +158,6 @@ private void processRequest(Message message) {\n         List<MediaType> acceptContentTypes = JAXRSUtils.sortMediaTypes(acceptTypes);\n         message.getExchange().put(Message.ACCEPT_CONTENT_TYPE, acceptContentTypes);\n         \n-        message.getExchange().put(ROOT_RESOURCE_CLASS, resource);\n-        \n         LOG.fine(\"Request path is: \" + path);\n         LOG.fine(\"Request HTTP method is: \" + httpMethod);\n         LOG.fine(\"Request contentType is: \" + requestContentType);",
                "raw_url": "https://github.com/apache/cxf/raw/58209cc29f33cd1a6cd7ceee8110e3ed2299a2bf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/interceptor/JAXRSInInterceptor.java",
                "sha": "8bfa7faa79dacb798d74b2c1481177a2f82546d6",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/58209cc29f33cd1a6cd7ceee8110e3ed2299a2bf/rt/frontend/simple/src/main/java/org/apache/cxf/service/factory/ReflectionServiceFactoryBean.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/simple/src/main/java/org/apache/cxf/service/factory/ReflectionServiceFactoryBean.java?ref=58209cc29f33cd1a6cd7ceee8110e3ed2299a2bf",
                "deletions": 1,
                "filename": "rt/frontend/simple/src/main/java/org/apache/cxf/service/factory/ReflectionServiceFactoryBean.java",
                "patch": "@@ -615,7 +615,8 @@ protected boolean initializeClassInfo(OperationInfo o, Method method, List<Strin\n         Class paramType = method.getReturnType();\n         Type genericType = method.getGenericReturnType();\n \n-        if (!initializeParameter(o, method, -1, paramType, genericType)) {\n+        if (o.hasOutput()\n+            && !initializeParameter(o, method, -1, paramType, genericType)) {\n             return false;\n         }\n ",
                "raw_url": "https://github.com/apache/cxf/raw/58209cc29f33cd1a6cd7ceee8110e3ed2299a2bf/rt/frontend/simple/src/main/java/org/apache/cxf/service/factory/ReflectionServiceFactoryBean.java",
                "sha": "cf255f0cfd9106383469e0d9fee96f333c04c908",
                "status": "modified"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/cxf/blob/58209cc29f33cd1a6cd7ceee8110e3ed2299a2bf/rt/frontend/simple/src/test/java/org/apache/cxf/service/factory/RountripTest.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/simple/src/test/java/org/apache/cxf/service/factory/RountripTest.java?ref=58209cc29f33cd1a6cd7ceee8110e3ed2299a2bf",
                "deletions": 0,
                "filename": "rt/frontend/simple/src/test/java/org/apache/cxf/service/factory/RountripTest.java",
                "patch": "@@ -18,12 +18,16 @@\n  */\n package org.apache.cxf.service.factory;\n \n+import javax.xml.namespace.QName;\n+\n import org.apache.cxf.endpoint.ClientImpl;\n import org.apache.cxf.frontend.ClientFactoryBean;\n import org.apache.cxf.frontend.ClientProxyFactoryBean;\n import org.apache.cxf.frontend.ServerFactoryBean;\n import org.apache.cxf.interceptor.LoggingInInterceptor;\n import org.apache.cxf.interceptor.LoggingOutInterceptor;\n+import org.apache.hello_world_doc_lit.Greeter;\n+import org.apache.hello_world_doc_lit.GreeterImplDoc;\n import org.junit.Test;\n \n public class RountripTest extends AbstractSimpleFrontendTest {\n@@ -34,6 +38,7 @@ public void testServerFactoryBean() throws Exception {\n         svrBean.setAddress(\"http://localhost/Hello\");\n         svrBean.setTransportId(\"http://schemas.xmlsoap.org/soap/http\");\n         svrBean.setServiceBean(new HelloServiceImpl());\n+        svrBean.setServiceClass(HelloService.class);        \n         svrBean.setBus(getBus());\n         \n         svrBean.create();\n@@ -53,5 +58,23 @@ public void testServerFactoryBean() throws Exception {\n         c.getInInterceptors().add(new LoggingInInterceptor());\n         \n         assertEquals(\"hello\", client.sayHello());\n+        assertEquals(\"hello\", client.echo(\"hello\"));\n+    }\n+\n+    @Test\n+    public void testOneWay() throws Exception {\n+        ServerFactoryBean svrBean = new ServerFactoryBean();\n+        svrBean.setAddress(\"http://localhost/Hello2\");\n+        svrBean.setTransportId(\"http://schemas.xmlsoap.org/soap/http\");\n+        svrBean.setServiceBean(new GreeterImplDoc());\n+        svrBean.setServiceClass(Greeter.class);\n+        svrBean.setEndpointName(new QName(\"http://apache.org/hello_world_doc_lit\",\n+                                        \"SoapPort\"));\n+        svrBean.setServiceName(new QName(\"http://apache.org/hello_world_doc_lit\",\n+                                         \"SOAPService\"));\n+        svrBean.setWsdlLocation(\"testutils/hello_world_doc_lit.wsdl\");\n+        svrBean.setBus(getBus());\n+        \n+        svrBean.create();\n     }\n }",
                "raw_url": "https://github.com/apache/cxf/raw/58209cc29f33cd1a6cd7ceee8110e3ed2299a2bf/rt/frontend/simple/src/test/java/org/apache/cxf/service/factory/RountripTest.java",
                "sha": "4a922ad24083b775eeb27c51e8618df71d995c64",
                "status": "modified"
            }
        ],
        "message": "[CXF-1657, CXF-1737] Fix bug with on-ways in wsdl causing simple frontend to NPE and possible problem in checking for faults with an empty message\nAlso make sure OperationResourceInfo thing is set in JAXRS\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@684099 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/0a85e211c03d1db80c040e57966cfd49e6800f0a",
        "patched_files": [
            "ReflectionServiceFactoryBean.java",
            "JAXRSInInterceptor.java",
            "CheckFaultInterceptor.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "RountripTest.java"
        ]
    },
    "cxf_5921df3": {
        "bug_id": "cxf_5921df3",
        "commit": "https://github.com/apache/cxf/commit/5921df37ec1452772b9506151c6091420e6e36ca",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/5921df37ec1452772b9506151c6091420e6e36ca/common/common/src/main/java/org/apache/cxf/common/xmlschema/SchemaCollection.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/common/common/src/main/java/org/apache/cxf/common/xmlschema/SchemaCollection.java?ref=5921df37ec1452772b9506151c6091420e6e36ca",
                "deletions": 1,
                "filename": "common/common/src/main/java/org/apache/cxf/common/xmlschema/SchemaCollection.java",
                "patch": "@@ -215,7 +215,7 @@ public void setSchemaResolver(URIResolver schemaResolver) {\n      */\n     public XmlSchema getSchemaByTargetNamespace(String namespaceURI) {\n         for (XmlSchema schema : schemaCollection.getXmlSchemas()) {\n-            if (schema.getTargetNamespace().equals(namespaceURI)) {\n+            if (namespaceURI.equals(schema.getTargetNamespace())) {\n                 return schema;\n             }\n         }",
                "raw_url": "https://github.com/apache/cxf/raw/5921df37ec1452772b9506151c6091420e6e36ca/common/common/src/main/java/org/apache/cxf/common/xmlschema/SchemaCollection.java",
                "sha": "c64d08fcab118d4ddcad9aaa56acef8b24e38690",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cxf/blob/5921df37ec1452772b9506151c6091420e6e36ca/tools/wsdlto/frontend/javascript/src/test/java/org/apache/cxf/tools/wsdlto/javascript/WSDLToJavaScriptTest.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/wsdlto/frontend/javascript/src/test/java/org/apache/cxf/tools/wsdlto/javascript/WSDLToJavaScriptTest.java?ref=5921df37ec1452772b9506151c6091420e6e36ca",
                "deletions": 0,
                "filename": "tools/wsdlto/frontend/javascript/src/test/java/org/apache/cxf/tools/wsdlto/javascript/WSDLToJavaScriptTest.java",
                "patch": "@@ -53,4 +53,16 @@ public void testGeneration() throws Exception {\n         String javascript = IOUtils.readStringFromStream(fis);\n         assertTrue(javascript.contains(\"xmlns:murble='http://apache.org/hello_world_soap_http'\"));\n     }\n+    \n+    // just run with a minimum of fuss.\n+    @Test\n+    public void testGeneration2() throws Exception {\n+        JavaScriptContainer container = new JavaScriptContainer(null);\n+\n+        ToolContext context = new ToolContext();\n+        context.put(ToolConstants.CFG_WSDLURL, \"/tmp/tmp.wsdl\");\n+        context.put(ToolConstants.CFG_OUTPUTDIR, output.toString()); \n+        container.setContext(context); \n+        container.execute();\n+    }\n }",
                "raw_url": "https://github.com/apache/cxf/raw/5921df37ec1452772b9506151c6091420e6e36ca/tools/wsdlto/frontend/javascript/src/test/java/org/apache/cxf/tools/wsdlto/javascript/WSDLToJavaScriptTest.java",
                "sha": "9f42e5f02b9ce7daf5775aac9c4d285a2c2a5df9",
                "status": "modified"
            }
        ],
        "message": "[CXF-2731] Add a NPE guard in wsdl2js\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@933086 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/4915507daf5df1f479e1698755b1cf04bbdc4d16",
        "patched_files": [
            "WSDLToJavaScript.java",
            "SchemaCollection.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "WSDLToJavaScriptTest.java"
        ]
    },
    "cxf_5a67729": {
        "bug_id": "cxf_5a67729",
        "commit": "https://github.com/apache/cxf/commit/5a67729bef8110bd9a61fa026a3e7bca09864dec",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cxf/blob/5a67729bef8110bd9a61fa026a3e7bca09864dec/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/CXFServlet.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/CXFServlet.java?ref=5a67729bef8110bd9a61fa026a3e7bca09864dec",
                "deletions": 2,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/CXFServlet.java",
                "patch": "@@ -118,7 +118,12 @@ private void updateContext(ServletConfig servletConfig, ApplicationContext ctx)\n             ctx = bus.getExtension(BusApplicationContext.class);\n         } else {\n             LOG.info(\"LOAD_BUS_WITH_APPLICATION_CONTEXT\");\n-            bus = new SpringBusFactory(ctx).createBus();\n+            inRefresh = true;\n+            try {\n+                bus = new SpringBusFactory(ctx).createBus();\n+            } finally {\n+                inRefresh = false;\n+            }\n         }        \n         \n         ResourceManager resourceManager = bus.getExtension(ResourceManager.class);\n@@ -175,7 +180,7 @@ public void destroy() {\n     }\n \n     public void onApplicationEvent(ApplicationEvent event) {\n-        if (!inRefresh && event instanceof ContextRefreshedEvent) {\n+        if (!inRefresh && event instanceof ContextRefreshedEvent && getServletConfig() != null) {\n             //need to re-do the bus/controller stuff\n             try {\n                 inRefresh = true;",
                "raw_url": "https://github.com/apache/cxf/raw/5a67729bef8110bd9a61fa026a3e7bca09864dec/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/CXFServlet.java",
                "sha": "a5b24209d8131c53c439b5d6b29432b648f3c068",
                "status": "modified"
            }
        ],
        "message": "[CXF-2620] Add some guards to prevent NPE with certain use cases and\nSpring 3.\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@900875 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/85bb4855c1521a72d72115fdb4fc2a91fae2ea0b",
        "patched_files": [
            "CXFServlet.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "CXFServletTest.java"
        ]
    },
    "cxf_5c2d098": {
        "bug_id": "cxf_5c2d098",
        "commit": "https://github.com/apache/cxf/commit/5c2d0981036a9c26e935b4748489d8898583d70c",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/5c2d0981036a9c26e935b4748489d8898583d70c/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/swagger/Swagger2Feature.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/swagger/Swagger2Feature.java?ref=5c2d0981036a9c26e935b4748489d8898583d70c",
                "deletions": 1,
                "filename": "rt/rs/description/src/main/java/org/apache/cxf/jaxrs/swagger/Swagger2Feature.java",
                "patch": "@@ -25,6 +25,7 @@\n import java.util.List;\n import java.util.Set;\n \n+import javax.servlet.ServletContext;\n import javax.ws.rs.container.ContainerRequestContext;\n import javax.ws.rs.container.ContainerRequestFilter;\n import javax.ws.rs.container.PreMatching;\n@@ -174,7 +175,8 @@ public void filter(ContainerRequestContext requestContext) throws IOException {\n \n         @Override\n         public void filter(ContainerRequestContext requestContext) throws IOException {\n-            if (mc.getServletContext().getAttribute(ReaderConfig.class.getName()) == null) {\n+            ServletContext servletContext = mc.getServletContext();\n+            if (servletContext != null && servletContext.getAttribute(ReaderConfig.class.getName()) == null) {\n                 if (mc.getServletConfig() != null\n                     && Boolean.valueOf(mc.getServletConfig().getInitParameter(\"scan.all.resources\"))) {\n                     addReaderConfig(mc.getServletConfig().getInitParameter(\"ignore.routes\"));",
                "raw_url": "https://github.com/apache/cxf/raw/5c2d0981036a9c26e935b4748489d8898583d70c/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/swagger/Swagger2Feature.java",
                "sha": "7a68622c64750092ff747383adf76fbbfceedd72",
                "status": "modified"
            }
        ],
        "message": "CXF-6601: avoid NPE",
        "parent": "https://github.com/apache/cxf/commit/cb2160fee6782b8638477ae7af5ad4cd82d6b88f",
        "patched_files": [
            "Swagger2Feature.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "Swagger2FeatureTest.java"
        ]
    },
    "cxf_5cf43ce": {
        "bug_id": "cxf_5cf43ce",
        "commit": "https://github.com/apache/cxf/commit/5cf43ce7bebe7cccbbb75e6ef2c8421eb6838b2f",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cxf/blob/5cf43ce7bebe7cccbbb75e6ef2c8421eb6838b2f/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/AbstractOAuthDataProvider.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/AbstractOAuthDataProvider.java?ref=5cf43ce7bebe7cccbbb75e6ef2c8421eb6838b2f",
                "deletions": 1,
                "filename": "rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/AbstractOAuthDataProvider.java",
                "patch": "@@ -51,7 +51,10 @@ public void removeAccessToken(ServerAccessToken token) throws OAuthServiceExcept\n     @Override\n     public ServerAccessToken refreshAccessToken(Client client, String refreshTokenKey,\n                                                 List<String> restrictedScopes) throws OAuthServiceException {\n-        RefreshToken oldRefreshToken = revokeRefreshAndAccessTokens(client, refreshTokenKey); \n+        RefreshToken oldRefreshToken = revokeRefreshAndAccessTokens(client, refreshTokenKey);\n+        if (oldRefreshToken == null) {\n+            throw new OAuthServiceException(OAuthConstants.ACCESS_DENIED);\n+        }\n         return doRefreshAccessToken(client, oldRefreshToken, restrictedScopes);\n         \n     }",
                "raw_url": "https://github.com/apache/cxf/raw/5cf43ce7bebe7cccbbb75e6ef2c8421eb6838b2f/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/AbstractOAuthDataProvider.java",
                "sha": "accd4af3de283b3113b9211f3edc5dc618adedea",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/5cf43ce7bebe7cccbbb75e6ef2c8421eb6838b2f/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/DefaultEncryptingOAuthDataProvider.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/DefaultEncryptingOAuthDataProvider.java?ref=5cf43ce7bebe7cccbbb75e6ef2c8421eb6838b2f",
                "deletions": 1,
                "filename": "rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/DefaultEncryptingOAuthDataProvider.java",
                "patch": "@@ -109,7 +109,11 @@ protected void saveRefreshToken(ServerAccessToken at, RefreshToken refreshToken)\n     @Override\n     protected RefreshToken revokeRefreshToken(Client client, String refreshTokenKey) {\n         refreshTokens.remove(refreshTokenKey);\n-        return ModelEncryptionSupport.decryptRefreshToken(this, refreshTokenKey, key);\n+        try {\n+            return ModelEncryptionSupport.decryptRefreshToken(this, refreshTokenKey, key);\n+        } catch (SecurityException ex) {\n+            throw new OAuthServiceException(OAuthConstants.ACCESS_DENIED, ex);\n+        }\n     }\n \n     private void encryptAccessToken(ServerAccessToken token) {",
                "raw_url": "https://github.com/apache/cxf/raw/5cf43ce7bebe7cccbbb75e6ef2c8421eb6838b2f/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/DefaultEncryptingOAuthDataProvider.java",
                "sha": "d033b1f3f0a8e853e05d8854f6ef5b884a12c10d",
                "status": "modified"
            }
        ],
        "message": "[CXF-6559] Avoiding NPE in AbstractOAuthDataProvider.refreshAccessToken",
        "parent": "https://github.com/apache/cxf/commit/abcffd0649d9a0467dd3ed7a4a3c561712ef4c0c",
        "patched_files": [
            "AbstractOAuthDataProvider.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "AbstractOAuthDataProviderTest.java"
        ]
    },
    "cxf_5f80039": {
        "bug_id": "cxf_5f80039",
        "commit": "https://github.com/apache/cxf/commit/5f800397146f994e32b6f71b5afd9088d0cd1500",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/5f800397146f994e32b6f71b5afd9088d0cd1500/common/common/src/main/java/org/apache/cxf/staxutils/StaxUtils.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/common/common/src/main/java/org/apache/cxf/staxutils/StaxUtils.java?ref=5f800397146f994e32b6f71b5afd9088d0cd1500",
                "deletions": 1,
                "filename": "common/common/src/main/java/org/apache/cxf/staxutils/StaxUtils.java",
                "patch": "@@ -784,7 +784,9 @@ public static void writeNode(Node n, XMLStreamWriter writer, boolean repairing)\n         }\n         case Node.DOCUMENT_TYPE_NODE:\n             try {\n-                writer.writeDTD(((DocumentType)n).getTextContent());\n+                if (((DocumentType)n).getTextContent() != null) {\n+                    writer.writeDTD(((DocumentType)n).getTextContent());\n+                }\n             } catch (UnsupportedOperationException ex) {\n                 //can we ignore?  DOM writers really don't allow this\n                 //as there isn't a way to write a DTD in dom",
                "raw_url": "https://github.com/apache/cxf/raw/5f800397146f994e32b6f71b5afd9088d0cd1500/common/common/src/main/java/org/apache/cxf/staxutils/StaxUtils.java",
                "sha": "0eb0281015278d13759172a6433e844325032271",
                "status": "modified"
            }
        ],
        "message": "[CXF-2919] Add an NPE guard\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@984454 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/6b5fe08a131a9addd80f6b2ccf3f198d650b6a37",
        "patched_files": [
            "StaxUtils.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "StaxUtilsTest.java"
        ]
    },
    "cxf_60148ec": {
        "bug_id": "cxf_60148ec",
        "commit": "https://github.com/apache/cxf/commit/60148ecdde0ee79aa2c495650668a936fddb361b",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/60148ecdde0ee79aa2c495650668a936fddb361b/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/soap/RetransmissionQueueImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/soap/RetransmissionQueueImpl.java?ref=60148ecdde0ee79aa2c495650668a936fddb361b",
                "deletions": 3,
                "filename": "rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/soap/RetransmissionQueueImpl.java",
                "patch": "@@ -131,9 +131,9 @@ public void purgeAcknowledged(SourceSequence seq) {\n                         purged.add(m);\n                     }\n                 }\n-            }\n-            if (sequenceCandidates.isEmpty()) {\n-                candidates.remove(seq.getIdentifier().getValue());\n+                if (sequenceCandidates.isEmpty()) {\n+                    candidates.remove(seq.getIdentifier().getValue());\n+                }\n             }\n             LOG.fine(\"Completed purging resend candidates.\");\n         }",
                "raw_url": "https://github.com/apache/cxf/raw/60148ecdde0ee79aa2c495650668a936fddb361b/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/soap/RetransmissionQueueImpl.java",
                "sha": "8d1e00e44650c9810dc586cc43890b8265b4a534",
                "status": "modified"
            }
        ],
        "message": "[CXF-2317] Fix for NPE in RetransmissionQueueImpl - fix from Guillaume\nPorcher applied.\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@789528 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/55076a9b869b53918a21b8a3c139aaf3ff4daf1f",
        "patched_files": [
            "RetransmissionQueueImpl.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "RetransmissionQueueImplTest.java"
        ]
    },
    "cxf_6113feb": {
        "bug_id": "cxf_6113feb",
        "commit": "https://github.com/apache/cxf/commit/6113febb17a728296d08667ce207aa5ee40d7c4a",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/6113febb17a728296d08667ce207aa5ee40d7c4a/core/src/main/java/org/apache/cxf/message/MessageUtils.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/message/MessageUtils.java?ref=6113febb17a728296d08667ce207aa5ee40d7c4a",
                "deletions": 3,
                "filename": "core/src/main/java/org/apache/cxf/message/MessageUtils.java",
                "patch": "@@ -124,9 +124,11 @@ public static boolean isTrue(Object value) {\n     }\n     \n     public static boolean getContextualBoolean(Message m, String key, boolean defaultValue) {\n-        Object o = m.getContextualProperty(key);\n-        if (o != null) {\n-            return PropertyUtils.isTrue(o);\n+        if (m != null) {\n+            Object o = m.getContextualProperty(key);\n+            if (o != null) {\n+                return PropertyUtils.isTrue(o);\n+            }\n         }\n         return defaultValue;\n     }",
                "raw_url": "https://github.com/apache/cxf/raw/6113febb17a728296d08667ce207aa5ee40d7c4a/core/src/main/java/org/apache/cxf/message/MessageUtils.java",
                "sha": "d964070131c019a8be61981621485cb01240abef",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/6113febb17a728296d08667ce207aa5ee40d7c4a/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseConstants.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseConstants.java?ref=6113febb17a728296d08667ce207aa5ee40d7c4a",
                "deletions": 0,
                "filename": "rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseConstants.java",
                "patch": "@@ -94,6 +94,11 @@\n      */\n     public static final String RSSEC_KEY_STORE_FILE = \"rs.security.keystore.file\";\n     \n+    /**\n+     * The KeyStore Object.\n+     */\n+    public static final String RSSEC_KEY_STORE= \"rs.security.keystore\";\n+    \n     /**\n      * A reference to a PrivateKeyPasswordProvider instance used to retrieve passwords to access keys.\n      */",
                "raw_url": "https://github.com/apache/cxf/raw/6113febb17a728296d08667ce207aa5ee40d7c4a/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseConstants.java",
                "sha": "cf9f90a069c65536040a3e1f392b47dfc0f220f2",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/cxf/blob/6113febb17a728296d08667ce207aa5ee40d7c4a/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java?ref=6113febb17a728296d08667ce207aa5ee40d7c4a",
                "deletions": 16,
                "filename": "rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
                "patch": "@@ -139,8 +139,6 @@ private static String getMessageProperty(Message m, String keyStoreLocPropPrefer\n     private static PrivateKey loadPrivateKey(KeyStore keyStore, \n                                             Message m,\n                                             Properties props, \n-                                            Bus bus, \n-                                            PrivateKeyPasswordProvider provider,\n                                             KeyOperation keyOper,\n                                             String alias) {\n         \n@@ -149,8 +147,11 @@ private static PrivateKey loadPrivateKey(KeyStore keyStore,\n         if (theAlias != null) {\n             props.put(JoseConstants.RSSEC_KEY_STORE_ALIAS, theAlias);\n         }\n-        char[] keyPswdChars = provider != null ? provider.getPassword(props) \n-            : keyPswd != null ? keyPswd.toCharArray() : null;    \n+        char[] keyPswdChars = keyPswd != null ? keyPswd.toCharArray() : null;\n+        if (keyPswdChars == null) {\n+            PrivateKeyPasswordProvider provider = loadPasswordProvider(m, props, keyOper);\n+            keyPswdChars = provider != null ? provider.getPassword(props) : null;\n+        }\n         return CryptoUtils.loadPrivateKey(keyStore, keyPswdChars, theAlias);\n     }\n     \n@@ -174,7 +175,7 @@ public static String getKeyId(Message m, Properties props,\n                                   KeyOperation keyOper) {\n         String kid = null;\n         String altPropertyName = null;\n-        if (keyOper != null) {\n+        if (keyOper != null && m != null) {\n             if (keyOper == KeyOperation.ENCRYPT || keyOper == KeyOperation.DECRYPT) {\n                 altPropertyName = preferredPropertyName + \".jwe\";\n             } else if (keyOper == KeyOperation.SIGN || keyOper == KeyOperation.VERIFY) {\n@@ -216,21 +217,25 @@ public static PrivateKey loadPrivateKey(Message m, Properties props, KeyOperatio\n         KeyStore keyStore = loadPersistKeyStore(m, props);\n         return loadPrivateKey(keyStore, m, props, keyOper, null);\n     }\n-    private static PrivateKey loadPrivateKey(KeyStore keyStore, Message m, Properties props, KeyOperation keyOper, \n-                                                String alias) {\n-        Bus bus = m.getExchange().getBus();\n-        PrivateKeyPasswordProvider cb = loadPasswordProvider(m, props, keyOper);\n-        return loadPrivateKey(keyStore, m, props, bus, cb, keyOper, alias);\n-    }\n     public static KeyStore loadPersistKeyStore(Message m, Properties props) {\n-        if (!props.containsKey(JoseConstants.RSSEC_KEY_STORE_FILE)) {\n-            LOG.warning(\"No keystore file has been configured\");\n-            throw new JoseException(\"No keystore file has been configured\");\n+        KeyStore keyStore = null;\n+        if (props.containsKey(JoseConstants.RSSEC_KEY_STORE)) {\n+            keyStore = (KeyStore)props.get(JoseConstants.RSSEC_KEY_STORE);\n+        }\n+        \n+        if (keyStore == null) {\n+            if (!props.containsKey(JoseConstants.RSSEC_KEY_STORE_FILE)) {\n+                LOG.warning(\"No keystore file has been configured\");\n+                throw new JoseException(\"No keystore file has been configured\");\n+            }\n+            keyStore = (KeyStore)m.getExchange().get(props.get(JoseConstants.RSSEC_KEY_STORE_FILE));\n         }\n-        KeyStore keyStore = (KeyStore)m.getExchange().get(props.get(JoseConstants.RSSEC_KEY_STORE_FILE));\n+        \n         if (keyStore == null) {\n             keyStore = loadKeyStore(props, m.getExchange().getBus());\n-            m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n+            if (m != null) {\n+                m.getExchange().put((String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE), keyStore);\n+            }\n         }\n         return keyStore;\n     }",
                "raw_url": "https://github.com/apache/cxf/raw/6113febb17a728296d08667ce207aa5ee40d7c4a/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/KeyManagementUtils.java",
                "sha": "2ca6e805849404d220f1373bc5ca6342c9036ebe",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/6113febb17a728296d08667ce207aa5ee40d7c4a/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java?ref=6113febb17a728296d08667ce207aa5ee40d7c4a",
                "deletions": 1,
                "filename": "rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
                "patch": "@@ -261,7 +261,7 @@ public static boolean validateCriticalHeaders(JoseHeaders headers) {\n         //TODO: validate JWS specific constraints\n         return JoseUtils.validateCriticalHeaders(headers);\n     }\n-    private static JwsSignatureProvider loadSignatureProvider(Message m, \n+    public static JwsSignatureProvider loadSignatureProvider(Message m, \n                                                               Properties props,\n                                                               JoseHeaders headers,\n                                                               boolean ignoreNullProvider) {",
                "raw_url": "https://github.com/apache/cxf/raw/6113febb17a728296d08667ce207aa5ee40d7c4a/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jws/JwsUtils.java",
                "sha": "0bce50e39eb8627069f658477051199d2e9afbdc",
                "status": "modified"
            },
            {
                "additions": 96,
                "blob_url": "https://github.com/apache/cxf/blob/6113febb17a728296d08667ce207aa5ee40d7c4a/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/jwt/JWTTokenProvider.java",
                "changes": 115,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/jwt/JWTTokenProvider.java?ref=6113febb17a728296d08667ce207aa5ee40d7c4a",
                "deletions": 19,
                "filename": "services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/jwt/JWTTokenProvider.java",
                "patch": "@@ -19,24 +19,37 @@\n \n package org.apache.cxf.sts.token.provider.jwt;\n \n+import java.security.KeyStore;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Properties;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n \n+import javax.security.auth.callback.CallbackHandler;\n+\n import org.apache.cxf.common.logging.LogUtils;\n+import org.apache.cxf.message.Message;\n+import org.apache.cxf.phase.PhaseInterceptorChain;\n import org.apache.cxf.rs.security.jose.common.JoseConstants;\n+import org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm;\n import org.apache.cxf.rs.security.jose.jws.JwsJwtCompactProducer;\n+import org.apache.cxf.rs.security.jose.jws.JwsSignatureProvider;\n+import org.apache.cxf.rs.security.jose.jws.JwsUtils;\n import org.apache.cxf.rs.security.jose.jwt.JwtClaims;\n import org.apache.cxf.rs.security.jose.jwt.JwtToken;\n+import org.apache.cxf.sts.STSPropertiesMBean;\n+import org.apache.cxf.sts.SignatureProperties;\n import org.apache.cxf.sts.request.TokenRequirements;\n import org.apache.cxf.sts.token.provider.TokenProvider;\n import org.apache.cxf.sts.token.provider.TokenProviderParameters;\n import org.apache.cxf.sts.token.provider.TokenProviderResponse;\n import org.apache.cxf.sts.token.realm.SAMLRealm;\n import org.apache.cxf.ws.security.sts.provider.STSException;\n+import org.apache.wss4j.common.crypto.Crypto;\n+import org.apache.wss4j.common.crypto.Merlin;\n+import org.apache.wss4j.common.ext.WSPasswordCallback;\n \n /**\n  * A TokenProvider implementation that provides a JWT Token.\n@@ -85,13 +98,6 @@ public TokenProviderResponse createToken(TokenProviderParameters tokenParameters\n         \n         JwtClaims claims = jwtClaimsProvider.getJwtClaims(jwtClaimsProviderParameters);\n         \n-        /*\n-        if (signToken) {\n-            STSPropertiesMBean stsProperties = tokenParameters.getStsProperties();\n-            signToken(assertion, samlRealm, stsProperties, tokenParameters.getKeyRequirements());\n-        }\n-        */\n-        \n         try {\n             /*\n             Document doc = DOMUtils.createDocument();\n@@ -120,12 +126,8 @@ public TokenProviderResponse createToken(TokenProviderParameters tokenParameters\n             \n             JwtToken token = new JwtToken(claims);\n             \n-            Properties signingProperties = new Properties();\n-            signingProperties.put(JoseConstants.RSSEC_SIGNATURE_ALGORITHM, \"none\");\n-            \n-            JwsJwtCompactProducer jws = new JwsJwtCompactProducer(token);\n-            jws.setSignatureProperties(signingProperties);\n-            String tokenData = jws.getSignedEncodedJws();\n+            String tokenData = signToken(token, null, tokenParameters.getStsProperties(), \n+                      tokenParameters.getTokenRequirements());\n             \n             TokenProviderResponse response = new TokenProviderResponse();\n             response.setToken(tokenData);\n@@ -139,12 +141,6 @@ public TokenProviderResponse createToken(TokenProviderParameters tokenParameters\n                 response.setExpires(new Date(claims.getExpiryTime() * 1000L));\n             }\n             \n-            /*response.setEntropy(entropyBytes);\n-            if (keySize > 0) {\n-                response.setKeySize(keySize);\n-            }\n-            response.setComputedKey(computedKey);\n-            */\n             LOG.fine(\"JWT Token successfully created\");\n             return response;\n         } catch (Exception e) {\n@@ -192,4 +188,85 @@ public void setJwtClaimsProvider(JWTClaimsProvider jwtClaimsProvider) {\n         this.jwtClaimsProvider = jwtClaimsProvider;\n     }\n     \n+    private String signToken(\n+        JwtToken token, \n+        SAMLRealm samlRealm,\n+        STSPropertiesMBean stsProperties,\n+        TokenRequirements tokenRequirements\n+    ) throws Exception {\n+        \n+        Properties signingProperties = new Properties();\n+        \n+        if (signToken) {\n+            // Initialise signature objects with defaults of STSPropertiesMBean\n+            Crypto signatureCrypto = stsProperties.getSignatureCrypto();\n+            CallbackHandler callbackHandler = stsProperties.getCallbackHandler();\n+            SignatureProperties signatureProperties = stsProperties.getSignatureProperties();\n+            String alias = stsProperties.getSignatureUsername();\n+\n+            if (samlRealm != null) {\n+                // If SignatureCrypto configured in realm then\n+                // callbackhandler and alias of STSPropertiesMBean is ignored\n+                if (samlRealm.getSignatureCrypto() != null) {\n+                    LOG.fine(\"SAMLRealm signature keystore used\");\n+                    signatureCrypto = samlRealm.getSignatureCrypto();\n+                    callbackHandler = samlRealm.getCallbackHandler();\n+                    alias = samlRealm.getSignatureAlias();\n+                }\n+                // SignatureProperties can be defined independently of SignatureCrypto\n+                if (samlRealm.getSignatureProperties() != null) {\n+                    signatureProperties = samlRealm.getSignatureProperties();\n+                }\n+            }\n+\n+            // Get the signature algorithm to use - for now we don't allow the client to ask\n+            // for a particular signature algorithm, as with SAML\n+            String signatureAlgorithm = signatureProperties.getSignatureAlgorithm();\n+            try {\n+                SignatureAlgorithm.getAlgorithm(signatureAlgorithm);\n+            } catch (IllegalArgumentException ex) {\n+                signatureAlgorithm = SignatureAlgorithm.RS256.name();\n+            }\n+\n+            // If alias not defined, get the default of the SignatureCrypto\n+            if ((alias == null || \"\".equals(alias)) && (signatureCrypto != null)) {\n+                alias = signatureCrypto.getDefaultX509Identifier();\n+                if (LOG.isLoggable(Level.FINE)) {\n+                    LOG.fine(\"Signature alias is null so using default alias: \" + alias);\n+                }\n+            }\n+            // Get the password\n+            WSPasswordCallback[] cb = {new WSPasswordCallback(alias, WSPasswordCallback.SIGNATURE)};\n+            callbackHandler.handle(cb);\n+            String password = cb[0].getPassword();\n+\n+            signingProperties.put(JoseConstants.RSSEC_SIGNATURE_ALGORITHM, signatureAlgorithm);\n+            signingProperties.put(JoseConstants.RSSEC_KEY_STORE_ALIAS, alias);\n+            signingProperties.put(JoseConstants.RSSEC_KEY_PSWD, password);\n+            \n+            if (!(signatureCrypto instanceof Merlin)) {\n+                throw new STSException(\"Can't get the keystore\", STSException.REQUEST_FAILED);\n+            }\n+            KeyStore keystore = ((Merlin)signatureCrypto).getKeyStore();\n+            signingProperties.put(JoseConstants.RSSEC_KEY_STORE, keystore);\n+            \n+            JwsJwtCompactProducer jws = new JwsJwtCompactProducer(token);\n+            jws.setSignatureProperties(signingProperties);\n+            \n+            Message m = PhaseInterceptorChain.getCurrentMessage();\n+            JwsSignatureProvider sigProvider = \n+                JwsUtils.loadSignatureProvider(m, signingProperties, token.getJwsHeaders(), false);\n+            token.getJwsHeaders().setSignatureAlgorithm(sigProvider.getAlgorithm());\n+            \n+            return jws.signWith(sigProvider);\n+        } else {\n+            signingProperties.put(JoseConstants.RSSEC_SIGNATURE_ALGORITHM, \"none\");\n+            \n+            JwsJwtCompactProducer jws = new JwsJwtCompactProducer(token);\n+            jws.setSignatureProperties(signingProperties);\n+            return jws.getSignedEncodedJws();\n+        }\n+        \n+    }\n+\n }",
                "raw_url": "https://github.com/apache/cxf/raw/6113febb17a728296d08667ce207aa5ee40d7c4a/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/jwt/JWTTokenProvider.java",
                "sha": "573788bbd255097eafe774bc9dfecac050012dd9",
                "status": "modified"
            },
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/cxf/blob/6113febb17a728296d08667ce207aa5ee40d7c4a/services/sts/sts-core/src/test/java/org/apache/cxf/sts/token/provider/JWTTokenProviderTest.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/services/sts/sts-core/src/test/java/org/apache/cxf/sts/token/provider/JWTTokenProviderTest.java?ref=6113febb17a728296d08667ce207aa5ee40d7c4a",
                "deletions": 0,
                "filename": "services/sts/sts-core/src/test/java/org/apache/cxf/sts/token/provider/JWTTokenProviderTest.java",
                "patch": "@@ -18,11 +18,13 @@\n  */\n package org.apache.cxf.sts.token.provider;\n \n+import java.security.cert.X509Certificate;\n import java.util.Properties;\n \n import org.apache.cxf.jaxws.context.WebServiceContextImpl;\n import org.apache.cxf.jaxws.context.WrappedMessageContext;\n import org.apache.cxf.message.MessageImpl;\n+import org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm;\n import org.apache.cxf.rs.security.jose.jws.JwsJwtCompactConsumer;\n import org.apache.cxf.rs.security.jose.jwt.JwtConstants;\n import org.apache.cxf.rs.security.jose.jwt.JwtToken;\n@@ -36,6 +38,7 @@\n import org.apache.cxf.ws.security.tokenstore.TokenStore;\n import org.apache.wss4j.common.crypto.Crypto;\n import org.apache.wss4j.common.crypto.CryptoFactory;\n+import org.apache.wss4j.common.crypto.CryptoType;\n import org.apache.wss4j.common.ext.WSSecurityException;\n import org.apache.wss4j.common.principal.CustomTokenPrincipal;\n import org.junit.Assert;\n@@ -50,6 +53,7 @@\n     @org.junit.Test\n     public void testCreateUnsignedJWT() throws Exception {\n         TokenProvider jwtTokenProvider = new JWTTokenProvider();\n+        ((JWTTokenProvider)jwtTokenProvider).setSignToken(false);\n         \n         TokenProviderParameters providerParameters = createProviderParameters();\n         \n@@ -73,6 +77,42 @@ public void testCreateUnsignedJWT() throws Exception {\n                             jwt.getClaim(JwtConstants.CLAIM_EXPIRY));\n     }\n     \n+    @org.junit.Test\n+    public void testCreateSignedJWT() throws Exception {\n+        TokenProvider jwtTokenProvider = new JWTTokenProvider();\n+        ((JWTTokenProvider)jwtTokenProvider).setSignToken(true);\n+        \n+        TokenProviderParameters providerParameters = createProviderParameters();\n+        \n+        assertTrue(jwtTokenProvider.canHandleToken(JWTTokenProvider.JWT_TOKEN_TYPE));\n+        TokenProviderResponse providerResponse = jwtTokenProvider.createToken(providerParameters);\n+        assertTrue(providerResponse != null);\n+        assertTrue(providerResponse.getToken() != null && providerResponse.getTokenId() != null);\n+\n+        String token = (String)providerResponse.getToken();\n+        assertNotNull(token);\n+        assertTrue(token.split(\"\\\\.\").length == 3);\n+        \n+        // Validate the token\n+        JwsJwtCompactConsumer jwtConsumer = new JwsJwtCompactConsumer(token);\n+        JwtToken jwt = jwtConsumer.getJwtToken();\n+        Assert.assertEquals(\"alice\", jwt.getClaim(JwtConstants.CLAIM_SUBJECT));\n+        Assert.assertEquals(providerResponse.getTokenId(), jwt.getClaim(JwtConstants.CLAIM_JWT_ID));\n+        Assert.assertEquals(providerResponse.getCreated().getTime() / 1000L, \n+                            jwt.getClaim(JwtConstants.CLAIM_ISSUED_AT));\n+        Assert.assertEquals(providerResponse.getExpires().getTime() / 1000L, \n+                            jwt.getClaim(JwtConstants.CLAIM_EXPIRY));\n+        \n+        // Verify Signature\n+        Crypto crypto = providerParameters.getStsProperties().getSignatureCrypto();\n+        CryptoType cryptoType = new CryptoType(CryptoType.TYPE.ALIAS);\n+        cryptoType.setAlias(providerParameters.getStsProperties().getSignatureUsername());\n+        X509Certificate[] certs = crypto.getX509Certificates(cryptoType);\n+        assertNotNull(certs);\n+        \n+        assertTrue(jwtConsumer.verifySignatureWith(certs[0], SignatureAlgorithm.RS256));\n+    }\n+    \n     private TokenProviderParameters createProviderParameters() throws WSSecurityException {\n         TokenProviderParameters parameters = new TokenProviderParameters();\n         ",
                "raw_url": "https://github.com/apache/cxf/raw/6113febb17a728296d08667ce207aa5ee40d7c4a/services/sts/sts-core/src/test/java/org/apache/cxf/sts/token/provider/JWTTokenProviderTest.java",
                "sha": "aed28ef096694f4f0c3864e2f960076fc9079a75",
                "status": "modified"
            }
        ],
        "message": "Adding the ability to sign JWT tokens in the STS plus some NPE fixes",
        "parent": "https://github.com/apache/cxf/commit/bb4ddb5be95d3ce415bab2aec290ff09a3a572f6",
        "patched_files": [
            "MessageUtils.java",
            "JWTTokenProvider.java",
            "JoseConstants.java",
            "JwsUtils.java",
            "KeyManagementUtils.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JWTTokenProviderTest.java",
            "JwsUtilsTest.java"
        ]
    },
    "cxf_618a9e8": {
        "bug_id": "cxf_618a9e8",
        "commit": "https://github.com/apache/cxf/commit/618a9e85dc08432d33b76471b2723dfcdf26542c",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/618a9e85dc08432d33b76471b2723dfcdf26542c/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/saaj/SAAJInInterceptor.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/saaj/SAAJInInterceptor.java?ref=618a9e85dc08432d33b76471b2723dfcdf26542c",
                "deletions": 1,
                "filename": "rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/saaj/SAAJInInterceptor.java",
                "patch": "@@ -127,7 +127,8 @@ public void handleMessage(SoapMessage message) throws Fault {\n                 if (fault.getRole() != null) {\n                     soapFault.setFaultActor(fault.getRole());\n                 }\n-                if (fault.getDetail() != null) {\n+                if (fault.getDetail() != null\n+                    && fault.getDetail().getFirstChild() != null) {\n                     soapFault.addDetail().appendChild(\n                         soapMessage.getSOAPPart().importNode(\n                             fault.getDetail().getFirstChild(), true));",
                "raw_url": "https://github.com/apache/cxf/raw/618a9e85dc08432d33b76471b2723dfcdf26542c/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/saaj/SAAJInInterceptor.java",
                "sha": "335eeb42daf291775bf395d977af83339cdc7710",
                "status": "modified"
            }
        ],
        "message": "Fix for NPE in SAAJInInterceptor when FaultDetail is not populated\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@734666 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/5623e9d5a532e8d1b29d030a6cbe2a86edc6ac44",
        "patched_files": [
            "SAAJInInterceptor.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "SAAJInInterceptorTest.java"
        ]
    },
    "cxf_61b1305": {
        "bug_id": "cxf_61b1305",
        "commit": "https://github.com/apache/cxf/commit/61b13052c3e38491f46792ed607105c9d1f92b55",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cxf/blob/61b13052c3e38491f46792ed607105c9d1f92b55/rt/transports/jms/src/main/java/org/apache/cxf/transport/jms/JMSDestination.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/jms/src/main/java/org/apache/cxf/transport/jms/JMSDestination.java?ref=61b13052c3e38491f46792ed607105c9d1f92b55",
                "deletions": 2,
                "filename": "rt/transports/jms/src/main/java/org/apache/cxf/transport/jms/JMSDestination.java",
                "patch": "@@ -218,8 +218,10 @@ public void onMessage(javax.jms.Message message, Session session) {\n             // handle the incoming message\n             incomingObserver.onMessage(inMessage);\n             \n-            inMessage = inMessage.getExchange().getInMessage();\n-            \n+            if (inMessage.getExchange() != null \n+                && inMessage.getExchange().getInMessage() != null) {\n+                inMessage = inMessage.getExchange().getInMessage();\n+            }\n             //need to propagate any exceptions back to Spring container \n             //so transactions can occur\n             if (inMessage.getContent(Exception.class) != null && session != null) {",
                "raw_url": "https://github.com/apache/cxf/raw/61b13052c3e38491f46792ed607105c9d1f92b55/rt/transports/jms/src/main/java/org/apache/cxf/transport/jms/JMSDestination.java",
                "sha": "55662d63fb86c235823c94b346d12a57689c083e",
                "status": "modified"
            }
        ],
        "message": "Add some NPE guards\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@951549 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/5f620de8b0952a2a4d1d44d33848508e6462b839",
        "patched_files": [
            "JMSDestination.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JMSDestinationTest.java"
        ]
    },
    "cxf_61e60c1": {
        "bug_id": "cxf_61e60c1",
        "commit": "https://github.com/apache/cxf/commit/61e60c186ca17b89e407622ccfec9771484dd418",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cxf/blob/61e60c186ca17b89e407622ccfec9771484dd418/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/DefaultLogEventMapper.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/DefaultLogEventMapper.java?ref=61e60c186ca17b89e407622ccfec9771484dd418",
                "deletions": 5,
                "filename": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/DefaultLogEventMapper.java",
                "patch": "@@ -19,6 +19,7 @@\n package org.apache.cxf.ext.logging.event;\n \n import java.security.AccessController;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n@@ -126,17 +127,19 @@ private String getJAASPrincipal() {\n     }\n \n     private Map<String, String> getHeaders(Message message) {\n-        Map<String, List<String>> headers = CastUtils.cast((Map<?, ?>)message.get(Message.PROTOCOL_HEADERS));\n+        Map<String, List<Object>> headers = CastUtils.cast((Map<?, ?>)message.get(Message.PROTOCOL_HEADERS));\n         Map<String, String> result = new HashMap<>();\n         if (headers == null) {\n             return result;\n         }\n-        for (Map.Entry<String, List<String>> entry : headers.entrySet()) {\n+        for (Map.Entry<String, List<Object>> entry : headers.entrySet()) {\n             if (entry.getValue().size() == 1) {\n-                result.put(entry.getKey(), entry.getValue().get(0));\n+                Object value = entry.getValue().get(0);\n+                if (value != null) {\n+                    result.put(entry.getKey(), value.toString());\n+                }\n             } else {\n-                String[] valueAr = entry.getValue().toArray(new String[] {});\n-                result.put(entry.getKey(), valueAr.toString());\n+                result.put(entry.getKey(), Arrays.deepToString(entry.getValue().toArray()));\n             }\n         }\n         return result;",
                "raw_url": "https://github.com/apache/cxf/raw/61e60c186ca17b89e407622ccfec9771484dd418/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/DefaultLogEventMapper.java",
                "sha": "d76e5ac9033a43820285676a2b3e1b96f7191a00",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/61e60c186ca17b89e407622ccfec9771484dd418/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/JAXRSClientServerBookTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/JAXRSClientServerBookTest.java?ref=61e60c186ca17b89e407622ccfec9771484dd418",
                "deletions": 1,
                "filename": "systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/JAXRSClientServerBookTest.java",
                "patch": "@@ -1078,8 +1078,10 @@ public void testWebApplicationException() throws Exception {\n \n     @Test\n     public void testAddBookProxyResponse() {\n-        BookStore store = JAXRSClientFactory.create(\"http://localhost:\" + PORT, BookStore.class);\n         Book b = new Book(\"CXF rocks\", 123L);\n+        \n+        System.out.println(Arrays.deepToString(Arrays.asList(b, b).toArray()));\n+        BookStore store = JAXRSClientFactory.create(\"http://localhost:\" + PORT, BookStore.class);\n         Response r = store.addBook(b);\n         assertNotNull(r);\n         InputStream is = (InputStream)r.getEntity();",
                "raw_url": "https://github.com/apache/cxf/raw/61e60c186ca17b89e407622ccfec9771484dd418/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/JAXRSClientServerBookTest.java",
                "sha": "e41b3b3b5974b6c03b9d5577dcf1568c6e2846f6",
                "status": "modified"
            }
        ],
        "message": "Avoiding NPEs in the logging feature given that headers can be non Strings on the out flow especially for JAXRS",
        "parent": "https://github.com/apache/cxf/commit/04d160cad1a27bb4cc694077125c6ea742647d3d",
        "patched_files": [
            "DefaultLogEventMapper.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JAXRSClientServerBookTest.java",
            "DefaultLogEventMapperTest.java"
        ]
    },
    "cxf_621e3a7": {
        "bug_id": "cxf_621e3a7",
        "commit": "https://github.com/apache/cxf/commit/621e3a79914e33ebfa9f0ad1124f5c3e9ea07abf",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/621e3a79914e33ebfa9f0ad1124f5c3e9ea07abf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/interceptor/JAXRSDefaultFaultOutInterceptor.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/interceptor/JAXRSDefaultFaultOutInterceptor.java?ref=621e3a79914e33ebfa9f0ad1124f5c3e9ea07abf",
                "deletions": 0,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/interceptor/JAXRSDefaultFaultOutInterceptor.java",
                "patch": "@@ -58,6 +58,9 @@ public void handleMessage(Message message) throws Fault {\n         if (r != null) {\n             JAXRSUtils.setMessageContentType(message, r);\n             message.setContent(List.class, new MessageContentsList(r));\n+            if (message.getExchange().getOutMessage() == null && message.getExchange().getOutFaultMessage() != null) {\n+                message.getExchange().setOutMessage(message.getExchange().getOutFaultMessage());\n+            }\n             new JAXRSOutInterceptor().handleMessage(message);\n             return;\n         }",
                "raw_url": "https://github.com/apache/cxf/raw/621e3a79914e33ebfa9f0ad1124f5c3e9ea07abf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/interceptor/JAXRSDefaultFaultOutInterceptor.java",
                "sha": "c2b5309bb1a75ad8ba3002d3ae6d7abb59505746",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cxf/blob/621e3a79914e33ebfa9f0ad1124f5c3e9ea07abf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/validation/ValidationExceptionMapper.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/validation/ValidationExceptionMapper.java?ref=621e3a79914e33ebfa9f0ad1124f5c3e9ea07abf",
                "deletions": 11,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/validation/ValidationExceptionMapper.java",
                "patch": "@@ -29,6 +29,7 @@\n import javax.ws.rs.ext.Provider;\n \n import org.apache.cxf.common.logging.LogUtils;\n+import org.apache.cxf.jaxrs.utils.JAXRSUtils;\n import org.apache.cxf.validation.ResponseConstraintViolationException;\n \n @Provider\n@@ -37,27 +38,22 @@\n     \n     @Override\n     public Response toResponse(ValidationException exception) {\n+        Response.Status errorStatus = Response.Status.INTERNAL_SERVER_ERROR;\n         if (exception instanceof ConstraintViolationException) { \n             \n             final ConstraintViolationException constraint = (ConstraintViolationException) exception;\n-            final boolean isResponseException = constraint instanceof ResponseConstraintViolationException;\n-                        \n+            \n             for (final ConstraintViolation< ? > violation: constraint.getConstraintViolations()) {\n                 LOG.log(Level.WARNING, \n                     violation.getRootBeanClass().getSimpleName() \n                     + \".\" + violation.getPropertyPath() \n                     + \": \" + violation.getMessage());\n             }\n             \n-            if (isResponseException) {\n-                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();\n+            if (!(constraint instanceof ResponseConstraintViolationException)) {\n+                errorStatus = Response.Status.BAD_REQUEST;\n             }\n-            \n-            return Response.status(Response.Status.BAD_REQUEST).build();\n-        } else {\n-            return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();\n-        }\n-        \n-        \n+        } \n+        return JAXRSUtils.toResponse(errorStatus);\n     }\n }",
                "raw_url": "https://github.com/apache/cxf/raw/621e3a79914e33ebfa9f0ad1124f5c3e9ea07abf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/validation/ValidationExceptionMapper.java",
                "sha": "b15ad0be8175970dbc1d974067736a7c5d840a57",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cxf/blob/621e3a79914e33ebfa9f0ad1124f5c3e9ea07abf/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/validation/JAXRSClientServerValidationTest.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/validation/JAXRSClientServerValidationTest.java?ref=621e3a79914e33ebfa9f0ad1124f5c3e9ea07abf",
                "deletions": 1,
                "filename": "systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/validation/JAXRSClientServerValidationTest.java",
                "patch": "@@ -21,6 +21,7 @@\n import java.util.Arrays;\n import java.util.Collections;\n \n+import javax.validation.ValidationException;\n import javax.ws.rs.core.Form;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n@@ -30,11 +31,13 @@\n import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;\n import org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider;\n import org.apache.cxf.jaxrs.model.AbstractResourceInfo;\n+import org.apache.cxf.jaxrs.utils.JAXRSUtils;\n import org.apache.cxf.jaxrs.validation.JAXRSBeanValidationInInterceptor;\n import org.apache.cxf.jaxrs.validation.JAXRSBeanValidationOutInterceptor;\n import org.apache.cxf.jaxrs.validation.JAXRSParameterNameProvider;\n import org.apache.cxf.jaxrs.validation.ValidationExceptionMapper;\n import org.apache.cxf.message.Message;\n+import org.apache.cxf.systest.jaxrs.Book;\n import org.apache.cxf.testutil.common.AbstractBusTestServerBase;\n import org.apache.cxf.validation.BeanValidationInInterceptor;\n import org.apache.cxf.validation.BeanValidationProvider;\n@@ -54,7 +57,14 @@ protected void run() {\n             sf.setResourceClasses(BookStoreWithValidation.class);\n             sf.setResourceProvider(BookStoreWithValidation.class, \n                 new SingletonResourceProvider(new BookStoreWithValidation()));\n-            sf.setProvider(new ValidationExceptionMapper());\n+            sf.setProvider(new ValidationExceptionMapper() {\n+                @Override\n+                public Response toResponse(ValidationException exception) {\n+                    Response r = super.toResponse(exception);\n+                    return JAXRSUtils.toResponseBuilder(\n+                        r.getStatus()).type(\"application/xml\").entity(new Book(\"Validation\", 123L)).build();\n+                }\n+            });\n \n             sf.setAddress(\"http://localhost:\" + PORT + \"/\");\n             BeanValidationInInterceptor in = new JAXRSBeanValidationInInterceptor();",
                "raw_url": "https://github.com/apache/cxf/raw/621e3a79914e33ebfa9f0ad1124f5c3e9ea07abf/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/validation/JAXRSClientServerValidationTest.java",
                "sha": "507f4c4aabbc5770c0aacf45fba41ba14a4d680d",
                "status": "modified"
            }
        ],
        "message": "[CXF-5966] Fixing NPE",
        "parent": "https://github.com/apache/cxf/commit/5d9af8f90f82f913681409d6a8ab13f2b1c12652",
        "patched_files": [
            "ValidationExceptionMapper.java",
            "JAXRSDefaultFaultOutInterceptor.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JAXRSClientServerValidationTest.java"
        ]
    },
    "cxf_65f119d": {
        "bug_id": "cxf_65f119d",
        "commit": "https://github.com/apache/cxf/commit/65f119d0904b25690600fd70fd751462cbd5113f",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/65f119d0904b25690600fd70fd751462cbd5113f/systests/uncategorized/pom.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/uncategorized/pom.xml?ref=65f119d0904b25690600fd70fd751462cbd5113f",
                "deletions": 0,
                "filename": "systests/uncategorized/pom.xml",
                "patch": "@@ -60,6 +60,9 @@\n                                 <frontEnd>cxf</frontEnd>\n                             </defaultOptions>\n                             <wsdlOptions>\n+                                <wsdlOption>\n+                                    <wsdl>${basedir}/src/test/resources/DoubleItLogical.wsdl</wsdl>\n+                                </wsdlOption>\n                                 <wsdlOption>\n                                     <wsdl>${basedir}/src/test/resources/wsdl_systest/hello_world_corba.wsdl</wsdl>\n                                 </wsdlOption>",
                "raw_url": "https://github.com/apache/cxf/raw/65f119d0904b25690600fd70fd751462cbd5113f/systests/uncategorized/pom.xml",
                "sha": "5cb5e943e2023ddf61c9db7a83da9e5a38b8e210",
                "status": "modified"
            },
            {
                "additions": 44,
                "blob_url": "https://github.com/apache/cxf/blob/65f119d0904b25690600fd70fd751462cbd5113f/systests/uncategorized/src/test/java/org/apache/cxf/systest/soap/DummyService.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/uncategorized/src/test/java/org/apache/cxf/systest/soap/DummyService.java?ref=65f119d0904b25690600fd70fd751462cbd5113f",
                "deletions": 0,
                "filename": "systests/uncategorized/src/test/java/org/apache/cxf/systest/soap/DummyService.java",
                "patch": "@@ -0,0 +1,44 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.systest.soap;\n+\n+\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+\n+/**\n+ * A dummy JAX-RS service that just echoes back a SOAP Body\n+ */\n+@Path(\"/\")\n+public class DummyService {\n+\n+    public DummyService() {\n+    }\n+\n+    @POST\n+    @Produces({\"text/xml\"})\n+    public String echoText() {\n+        return \"<soap:Envelope xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"><soap:Header></soap:Header>\"\n+            + \"<soap:Body /></soap:Envelope>\";\n+    }\n+}\n+\n+",
                "raw_url": "https://github.com/apache/cxf/raw/65f119d0904b25690600fd70fd751462cbd5113f/systests/uncategorized/src/test/java/org/apache/cxf/systest/soap/DummyService.java",
                "sha": "6f4c8cd62e17a5224cca660ced25666c739d26bf",
                "status": "added"
            },
            {
                "additions": 47,
                "blob_url": "https://github.com/apache/cxf/blob/65f119d0904b25690600fd70fd751462cbd5113f/systests/uncategorized/src/test/java/org/apache/cxf/systest/soap/EmptySOAPBodyServer.java",
                "changes": 47,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/uncategorized/src/test/java/org/apache/cxf/systest/soap/EmptySOAPBodyServer.java?ref=65f119d0904b25690600fd70fd751462cbd5113f",
                "deletions": 0,
                "filename": "systests/uncategorized/src/test/java/org/apache/cxf/systest/soap/EmptySOAPBodyServer.java",
                "patch": "@@ -0,0 +1,47 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.systest.soap;\n+\n+import java.net.URL;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.BusFactory;\n+import org.apache.cxf.bus.spring.SpringBusFactory;\n+import org.apache.cxf.testutil.common.AbstractBusTestServerBase;\n+\n+public class EmptySOAPBodyServer extends AbstractBusTestServerBase {\n+\n+    public EmptySOAPBodyServer() {\n+\n+    }\n+\n+    protected void run()  {\n+        URL busFile = EmptySOAPBodyServer.class.getResource(\"server.xml\");\n+        Bus busLocal = new SpringBusFactory().createBus(busFile);\n+        BusFactory.setDefaultBus(busLocal);\n+        setBus(busLocal);\n+\n+        try {\n+            new EmptySOAPBodyServer();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/cxf/raw/65f119d0904b25690600fd70fd751462cbd5113f/systests/uncategorized/src/test/java/org/apache/cxf/systest/soap/EmptySOAPBodyServer.java",
                "sha": "f7bba4ddd369cbc507809b1596493fa0df84d3c4",
                "status": "added"
            },
            {
                "additions": 84,
                "blob_url": "https://github.com/apache/cxf/blob/65f119d0904b25690600fd70fd751462cbd5113f/systests/uncategorized/src/test/java/org/apache/cxf/systest/soap/EmptySOAPBodyTest.java",
                "changes": 84,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/uncategorized/src/test/java/org/apache/cxf/systest/soap/EmptySOAPBodyTest.java?ref=65f119d0904b25690600fd70fd751462cbd5113f",
                "deletions": 0,
                "filename": "systests/uncategorized/src/test/java/org/apache/cxf/systest/soap/EmptySOAPBodyTest.java",
                "patch": "@@ -0,0 +1,84 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.systest.soap;\n+\n+import java.net.URL;\n+\n+import javax.xml.namespace.QName;\n+import javax.xml.ws.Service;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.BusFactory;\n+import org.apache.cxf.bus.spring.SpringBusFactory;\n+import org.apache.cxf.testutil.common.AbstractBusClientServerTestBase;\n+import org.example.contract.doubleit.DoubleItPortType;\n+\n+import org.junit.BeforeClass;\n+\n+/**\n+ * Test what happens when we make an invocation and get back an empty SOAP Body (see CXF-7653)\n+ */\n+@org.junit.Ignore(\"Ignoring this until CXF-7653 is resolved\")\n+public class EmptySOAPBodyTest extends AbstractBusClientServerTestBase {\n+    static final String PORT = allocatePort(EmptySOAPBodyServer.class);\n+\n+    private static final String NAMESPACE = \"http://www.example.org/contract/DoubleIt\";\n+    private static final QName SERVICE_QNAME = new QName(NAMESPACE, \"DoubleItService\");\n+\n+    @BeforeClass\n+    public static void startServers() throws Exception {\n+        assertTrue(\n+            \"Server failed to launch\",\n+            // run the server in the same process\n+            // set this to false to fork\n+            launchServer(EmptySOAPBodyServer.class, true)\n+        );\n+    }\n+\n+    @org.junit.AfterClass\n+    public static void cleanup() throws Exception {\n+        stopAllServers();\n+    }\n+\n+    @org.junit.Test\n+    public void testPlaintext() throws Exception {\n+\n+        SpringBusFactory bf = new SpringBusFactory();\n+        URL busFile = EmptySOAPBodyTest.class.getResource(\"client.xml\");\n+\n+        Bus bus = bf.createBus(busFile.toString());\n+        BusFactory.setDefaultBus(bus);\n+        BusFactory.setThreadDefaultBus(bus);\n+\n+        URL wsdl = EmptySOAPBodyTest.class.getResource(\"DoubleIt.wsdl\");\n+        Service service = Service.create(wsdl, SERVICE_QNAME);\n+        QName portQName = new QName(NAMESPACE, \"DoubleItPlaintextPort\");\n+        DoubleItPortType port =\n+                service.getPort(portQName, DoubleItPortType.class);\n+        updateAddressPort(port, PORT);\n+\n+        port.doubleIt(25);\n+\n+        ((java.io.Closeable)port).close();\n+\n+        bus.shutdown(true);\n+    }\n+\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cxf/raw/65f119d0904b25690600fd70fd751462cbd5113f/systests/uncategorized/src/test/java/org/apache/cxf/systest/soap/EmptySOAPBodyTest.java",
                "sha": "2cc103d276c700acc4ff3b6940e449443a2dbfb1",
                "status": "added"
            },
            {
                "additions": 142,
                "blob_url": "https://github.com/apache/cxf/blob/65f119d0904b25690600fd70fd751462cbd5113f/systests/uncategorized/src/test/resources/DoubleItLogical.wsdl",
                "changes": 142,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/uncategorized/src/test/resources/DoubleItLogical.wsdl?ref=65f119d0904b25690600fd70fd751462cbd5113f",
                "deletions": 0,
                "filename": "systests/uncategorized/src/test/resources/DoubleItLogical.wsdl",
                "patch": "@@ -0,0 +1,142 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements. See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership. The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License. You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied. See the License for the\n+ specific language governing permissions and limitations\n+ under the License.\n+-->\n+<wsdl:definitions xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\" xmlns:di=\"http://www.example.org/schema/DoubleIt\" xmlns:tns=\"http://www.example.org/contract/DoubleIt\" xmlns:wsp=\"http://www.w3.org/ns/ws-policy\" xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" xmlns:wsam=\"http://www.w3.org/2007/05/addressing/metadata\" xmlns:sp=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\" xmlns:t=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512\" xmlns:wsaw=\"http://www.w3.org/2005/08/addressing\" xmlns:wsx=\"http://schemas.xmlsoap.org/ws/2004/09/mex\" xmlns:xmime=\"http://www.w3.org/2005/05/xmlmime\" name=\"DoubleIt\" targetNamespace=\"http://www.example.org/contract/DoubleIt\">\n+    <!-- Replaced for wsp: http://schemas.xmlsoap.org/ws/2004/09/policy -->\n+    <wsdl:types>\n+        <xsd:schema targetNamespace=\"http://www.example.org/schema/DoubleIt\">\n+            <xsd:element name=\"DoubleIt\">\n+                <xsd:complexType>\n+                    <xsd:sequence>\n+                        <xsd:element name=\"numberToDouble\" type=\"xsd:int\"/>\n+                    </xsd:sequence>\n+                </xsd:complexType>\n+            </xsd:element>\n+            <xsd:element name=\"DoubleIt2\">\n+                <xsd:complexType>\n+                    <xsd:sequence>\n+                        <xsd:element name=\"numberToDouble\" type=\"xsd:int\"/>\n+                    </xsd:sequence>\n+                </xsd:complexType>\n+            </xsd:element>\n+            <xsd:element name=\"DoubleIt3\">\n+                <xsd:complexType>\n+                    <xsd:sequence>\n+                        <xsd:element name=\"numberToDouble\" type=\"xsd:int\"/>\n+                    </xsd:sequence>\n+                </xsd:complexType>\n+            </xsd:element>\n+            <xsd:element name=\"DoubleIt4\">\n+                <xsd:complexType>\n+                    <xsd:sequence>\n+                        <xsd:element name=\"numberToDouble\" type=\"xsd:int\"/>\n+                        <xsd:element name=\"ImageData\" type=\"xsd:base64Binary\"\n+                            xmime:expectedContentTypes=\"application/octet-stream\"/>\n+                    </xsd:sequence>\n+                </xsd:complexType>\n+            </xsd:element>\n+            <xsd:element name=\"DoubleItResponse\">\n+                <xsd:complexType>\n+                    <xsd:sequence>\n+                        <xsd:element name=\"doubledNumber\" type=\"xsd:int\"/>\n+                    </xsd:sequence>\n+                </xsd:complexType>\n+            </xsd:element>\n+            <xsd:element name=\"DoubleItHeader\" type=\"xsd:int\"/>\n+            <xsd:element name=\"DoubleItFault\">\n+                <xsd:complexType>\n+                    <xsd:sequence>\n+                        <xsd:element name=\"minor\" type=\"xsd:short\"/>\n+                        <xsd:element name=\"major\" type=\"xsd:short\"/>\n+                    </xsd:sequence>\n+                </xsd:complexType>\n+            </xsd:element>\n+        </xsd:schema>\n+    </wsdl:types>\n+    <wsdl:message name=\"DoubleItRequest\">\n+        <wsdl:part element=\"di:DoubleIt\" name=\"parameters\"/>\n+    </wsdl:message>\n+    <wsdl:message name=\"DoubleIt2Request\">\n+        <wsdl:part element=\"di:DoubleIt2\" name=\"parameters\"/>\n+    </wsdl:message>\n+    <wsdl:message name=\"DoubleIt3Request\">\n+        <wsdl:part element=\"di:DoubleIt3\" name=\"parameters\"/>\n+        <wsdl:part name=\"attachment\" type=\"xsd:base64Binary\"/>\n+    </wsdl:message>\n+    <wsdl:message name=\"DoubleIt4Request\">\n+        <wsdl:part element=\"di:DoubleIt4\" name=\"parameters\"/>\n+    </wsdl:message>\n+    <wsdl:message name=\"DoubleItRequestHeader\">\n+        <wsdl:part element=\"di:DoubleIt\" name=\"parameters\"/>\n+        <wsdl:part element=\"di:DoubleItHeader\" name=\"header\"/>\n+    </wsdl:message>\n+    <wsdl:message name=\"DoubleItResponse\">\n+        <wsdl:part element=\"di:DoubleItResponse\" name=\"parameters\"/>\n+    </wsdl:message>\n+    <wsdl:message name=\"DoubleIt2Response\">\n+        <wsdl:part element=\"di:DoubleItResponse\" name=\"parameters\"/>\n+    </wsdl:message>\n+    <wsdl:message name=\"DoubleIt3Response\">\n+        <wsdl:part element=\"di:DoubleItResponse\" name=\"parameters\"/>\n+    </wsdl:message>\n+    <wsdl:message name=\"DoubleIt4Response\">\n+        <wsdl:part element=\"di:DoubleItResponse\" name=\"parameters\"/>\n+    </wsdl:message>\n+    <wsdl:message name=\"DoubleItFault\">\n+        <wsdl:part element=\"di:DoubleItFault\" name=\"DoubleItFault\"/>\n+    </wsdl:message>\n+    <wsdl:portType name=\"DoubleItPortType\">\n+        <wsdl:operation name=\"DoubleIt\">\n+            <wsdl:input message=\"tns:DoubleItRequest\"/>\n+            <wsdl:output message=\"tns:DoubleItResponse\"/>\n+            <wsdl:fault message=\"tns:DoubleItFault\" name=\"DoubleItFault\"/>\n+        </wsdl:operation>\n+    </wsdl:portType>\n+    <wsdl:portType name=\"DoubleItPortTypeHeader\">\n+        <wsdl:operation name=\"DoubleIt\">\n+            <wsdl:input message=\"tns:DoubleItRequestHeader\"/>\n+            <wsdl:output message=\"tns:DoubleItResponse\"/>\n+        </wsdl:operation>\n+    </wsdl:portType>\n+    <wsdl:portType name=\"DoubleItPortType2\">\n+        <wsdl:operation name=\"DoubleIt\">\n+            <wsdl:input message=\"tns:DoubleItRequest\"/>\n+            <wsdl:output message=\"tns:DoubleItResponse\"/>\n+            <wsdl:fault message=\"tns:DoubleItFault\" name=\"DoubleItFault\"/>\n+        </wsdl:operation>\n+        <wsdl:operation name=\"DoubleIt2\">\n+            <wsdl:input message=\"tns:DoubleIt2Request\"/>\n+            <wsdl:output message=\"tns:DoubleIt2Response\"/>\n+        </wsdl:operation>\n+    </wsdl:portType>\n+    <wsdl:portType name=\"DoubleItSwaPortType\">\n+        <wsdl:operation name=\"DoubleIt3\">\n+            <wsdl:input message=\"tns:DoubleIt3Request\"/>\n+            <wsdl:output message=\"tns:DoubleIt3Response\"/>\n+            <wsdl:fault message=\"tns:DoubleItFault\" name=\"DoubleItFault\"/>\n+        </wsdl:operation>\n+    </wsdl:portType>\n+    <wsdl:portType name=\"DoubleItMtomPortType\">\n+        <wsdl:operation name=\"DoubleIt4\">\n+            <wsdl:input message=\"tns:DoubleIt4Request\"/>\n+            <wsdl:output message=\"tns:DoubleIt4Response\"/>\n+            <wsdl:fault message=\"tns:DoubleItFault\" name=\"DoubleItFault\"/>\n+        </wsdl:operation>\n+    </wsdl:portType>\n+</wsdl:definitions>",
                "raw_url": "https://github.com/apache/cxf/raw/65f119d0904b25690600fd70fd751462cbd5113f/systests/uncategorized/src/test/resources/DoubleItLogical.wsdl",
                "sha": "768ac76b4f9a4cdf49e915c497e53a9d5d4090c4",
                "status": "added"
            },
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/cxf/blob/65f119d0904b25690600fd70fd751462cbd5113f/systests/uncategorized/src/test/resources/org/apache/cxf/systest/soap/DoubleIt.wsdl",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/uncategorized/src/test/resources/org/apache/cxf/systest/soap/DoubleIt.wsdl?ref=65f119d0904b25690600fd70fd751462cbd5113f",
                "deletions": 0,
                "filename": "systests/uncategorized/src/test/resources/org/apache/cxf/systest/soap/DoubleIt.wsdl",
                "patch": "@@ -0,0 +1,42 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements. See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership. The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License. You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied. See the License for the\n+ specific language governing permissions and limitations\n+ under the License.\n+-->\n+<wsdl:definitions xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap12/\" xmlns:tns=\"http://www.example.org/contract/DoubleIt\" xmlns:wsp=\"http://www.w3.org/ns/ws-policy\" xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" xmlns:wsaws=\"http://www.w3.org/2005/08/addressing\" xmlns:sp=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\" xmlns:sp13=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200802\" name=\"DoubleIt\" targetNamespace=\"http://www.example.org/contract/DoubleIt\">\n+    <wsdl:import location=\"src/test/resources/DoubleItLogical.wsdl\" namespace=\"http://www.example.org/contract/DoubleIt\"/>\n+    <wsdl:binding name=\"DoubleItPlaintextBinding\" type=\"tns:DoubleItPortType\">\n+        <soap:binding style=\"document\" transport=\"http://schemas.xmlsoap.org/soap/http\"/>\n+        <wsdl:operation name=\"DoubleIt\">\n+            <soap:operation soapAction=\"\"/>\n+            <wsdl:input>\n+                <soap:body use=\"literal\"/>\n+            </wsdl:input>\n+            <wsdl:output>\n+                <soap:body use=\"literal\"/>\n+            </wsdl:output>\n+            <wsdl:fault name=\"DoubleItFault\">\n+                <soap:body use=\"literal\" name=\"DoubleItFault\"/>\n+            </wsdl:fault>\n+        </wsdl:operation>\n+    </wsdl:binding>\n+    <wsdl:service name=\"DoubleItService\">\n+        <wsdl:port name=\"DoubleItPlaintextPort\" binding=\"tns:DoubleItPlaintextBinding\">\n+            <soap:address location=\"http://localhost:9009/doubleit\"/>\n+        </wsdl:port>\n+    </wsdl:service>\n+ </wsdl:definitions>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cxf/raw/65f119d0904b25690600fd70fd751462cbd5113f/systests/uncategorized/src/test/resources/org/apache/cxf/systest/soap/DoubleIt.wsdl",
                "sha": "f52b6a1488d336178c5d28da6d0473e2cc56e49f",
                "status": "added"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/cxf/blob/65f119d0904b25690600fd70fd751462cbd5113f/systests/uncategorized/src/test/resources/org/apache/cxf/systest/soap/client.xml",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/uncategorized/src/test/resources/org/apache/cxf/systest/soap/client.xml?ref=65f119d0904b25690600fd70fd751462cbd5113f",
                "deletions": 0,
                "filename": "systests/uncategorized/src/test/resources/org/apache/cxf/systest/soap/client.xml",
                "patch": "@@ -0,0 +1,33 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements. See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership. The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License. You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied. See the License for the\n+ specific language governing permissions and limitations\n+ under the License.\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:http=\"http://cxf.apache.org/transports/http/configuration\" xmlns:jaxws=\"http://cxf.apache.org/jaxws\" xmlns:cxf=\"http://cxf.apache.org/core\" xmlns:p=\"http://cxf.apache.org/policy\" xmlns:sec=\"http://cxf.apache.org/configuration/security\" xsi:schemaLocation=\"           http://www.springframework.org/schema/beans           http://www.springframework.org/schema/beans/spring-beans-4.2.xsd           http://cxf.apache.org/jaxws                           http://cxf.apache.org/schemas/jaxws.xsd           http://cxf.apache.org/transports/http/configuration   http://cxf.apache.org/schemas/configuration/http-conf.xsd           http://cxf.apache.org/configuration/security          http://cxf.apache.org/schemas/configuration/security.xsd           http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd           http://cxf.apache.org/policy http://cxf.apache.org/schemas/policy.xsd\">\n+    <cxf:bus>\n+        <cxf:features>\n+            <p:policies/>\n+            <cxf:logging/>\n+        </cxf:features>\n+    </cxf:bus>\n+    \n+    <jaxws:client name=\"{http://www.example.org/contract/DoubleIt}DoubleItPlaintextPort\" createdFromAPI=\"true\">\n+        <jaxws:properties>\n+        </jaxws:properties>\n+    </jaxws:client>\n+  \n+</beans>",
                "raw_url": "https://github.com/apache/cxf/raw/65f119d0904b25690600fd70fd751462cbd5113f/systests/uncategorized/src/test/resources/org/apache/cxf/systest/soap/client.xml",
                "sha": "de56172ff231696185481f9a8befe6e753928582",
                "status": "added"
            },
            {
                "additions": 51,
                "blob_url": "https://github.com/apache/cxf/blob/65f119d0904b25690600fd70fd751462cbd5113f/systests/uncategorized/src/test/resources/org/apache/cxf/systest/soap/server.xml",
                "changes": 51,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/uncategorized/src/test/resources/org/apache/cxf/systest/soap/server.xml?ref=65f119d0904b25690600fd70fd751462cbd5113f",
                "deletions": 0,
                "filename": "systests/uncategorized/src/test/resources/org/apache/cxf/systest/soap/server.xml",
                "patch": "@@ -0,0 +1,51 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements. See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership. The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License. You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied. See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\" \n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n+    xmlns:http=\"http://cxf.apache.org/transports/http/configuration\" \n+    xmlns:httpj=\"http://cxf.apache.org/transports/http-jetty/configuration\" \n+    xmlns:sec=\"http://cxf.apache.org/configuration/security\" \n+    xmlns:cxf=\"http://cxf.apache.org/core\" \n+    xmlns:jaxrs=\"http://cxf.apache.org/jaxrs\" \n+    xmlns:util=\"http://www.springframework.org/schema/util\"\n+    xsi:schemaLocation=\"http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd\n+             http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd\n+             http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd\n+             http://www.springframework.org/schema/util  http://www.springframework.org/schema/util/spring-util-4.2.xsd\n+             http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd\n+             http://cxf.apache.org/transports/http-jetty/configuration http://cxf.apache.org/schemas/configuration/http-jetty.xsd \n+             http://cxf.apache.org/configuration/security http://cxf.apache.org/schemas/configuration/security.xsd\">\n+    <bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"/>\n+    <cxf:bus>\n+        <cxf:features>\n+            <cxf:logging/>\n+        </cxf:features>\n+    </cxf:bus>\n+\n+   <bean id=\"serviceBean\" class=\"org.apache.cxf.systest.soap.DummyService\"/>\n+   \n+   <jaxrs:server \n+       address=\"http://localhost:${testutil.ports.soap.EmptySOAPBodyServer}/doubleit\">\n+       <jaxrs:serviceBeans>\n+           <ref bean=\"serviceBean\"/>\n+       </jaxrs:serviceBeans>\n+   </jaxrs:server>\n+\n+</beans>",
                "raw_url": "https://github.com/apache/cxf/raw/65f119d0904b25690600fd70fd751462cbd5113f/systests/uncategorized/src/test/resources/org/apache/cxf/systest/soap/server.xml",
                "sha": "0ddc86d80490c0830e486993e1ecad84bc9c593e",
                "status": "added"
            }
        ],
        "message": "CXF-7653 - Adding an @Ignore'd test that reproduces the NPE",
        "parent": "https://github.com/apache/cxf/commit/30a6e5b5091d8feabb1eb8e27c08016b2c34b48c",
        "patched_files": [
            "DoubleItLogical.java",
            "client.java",
            "pom.java",
            "DoubleIt.java",
            "DummyService.java",
            "server.java",
            "EmptySOAPBodyServer.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "EmptySOAPBodyTest.java"
        ]
    },
    "cxf_67f5bef": {
        "bug_id": "cxf_67f5bef",
        "commit": "https://github.com/apache/cxf/commit/67f5befafa7b9aeb831451dbccd3a7e8993b456d",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/67f5befafa7b9aeb831451dbccd3a7e8993b456d/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java?ref=67f5befafa7b9aeb831451dbccd3a7e8993b456d",
                "deletions": 2,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java",
                "patch": "@@ -238,10 +238,10 @@ public int getLength() {\n \n     public URI getLocation() {\n         Object header = metadata.getFirst(HttpHeaders.LOCATION);\n-        if (header == null) {\n+        if (header == null && outMessage != null) {\n             header = outMessage.get(Message.REQUEST_URI);\n         }\n-        return header == null || header instanceof URI ? (URI)header\n+        return header == null || header instanceof URI ? (URI) header\n             : URI.create(header.toString());\n     }\n ",
                "raw_url": "https://github.com/apache/cxf/raw/67f5befafa7b9aeb831451dbccd3a7e8993b456d/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java",
                "sha": "d23ce98f0eb54852d00def6d0117cd8aa1846d8f",
                "status": "modified"
            }
        ],
        "message": "Prevent NPE when outMessage is null",
        "parent": "https://github.com/apache/cxf/commit/f0b60da47e8a1430444551daf970c820101f516a",
        "patched_files": [
            "ResponseImpl.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "ResponseImplTest.java"
        ]
    },
    "cxf_6bef2d4": {
        "bug_id": "cxf_6bef2d4",
        "commit": "https://github.com/apache/cxf/commit/6bef2d486db4fbee62e94861272ed4825714f215",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/6bef2d486db4fbee62e94861272ed4825714f215/api/src/main/java/org/apache/cxf/tools/common/ToolConstants.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/api/src/main/java/org/apache/cxf/tools/common/ToolConstants.java?ref=6bef2d486db4fbee62e94861272ed4825714f215",
                "deletions": 0,
                "filename": "api/src/main/java/org/apache/cxf/tools/common/ToolConstants.java",
                "patch": "@@ -40,6 +40,7 @@\n     public static final String CFG_OUTPUTFILE = \"outputfile\";\n     public static final String CFG_WSDLURL = \"wsdlurl\";\n     public static final String CFG_WSDLLOCATION = \"wsdlLocation\";\n+    public static final String CFG_WSDLLIST = \"wsdlList\";\n     public static final String CFG_NAMESPACE = \"namespace\";\n     public static final String CFG_VERBOSE = \"verbose\";\n     public static final String CFG_PORT = \"port\";",
                "raw_url": "https://github.com/apache/cxf/raw/6bef2d486db4fbee62e94861272ed4825714f215/api/src/main/java/org/apache/cxf/tools/common/ToolConstants.java",
                "sha": "2366574945158dee59a3dfe92cd6d979da96fb66",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/cxf/blob/6bef2d486db4fbee62e94861272ed4825714f215/maven-plugins/codegen-plugin/src/main/java/org/apache/cxf/maven_plugin/Option.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/maven-plugins/codegen-plugin/src/main/java/org/apache/cxf/maven_plugin/Option.java?ref=6bef2d486db4fbee62e94861272ed4825714f215",
                "deletions": 0,
                "filename": "maven-plugins/codegen-plugin/src/main/java/org/apache/cxf/maven_plugin/Option.java",
                "patch": "@@ -89,6 +89,12 @@\n      */\n     String wsdlLocation = DEFAULT_WSDL_LOCATION;\n \n+    /**\n+     * Specifies that the wsdlurl contains a plain text, new line delimited,\n+     * list of wsdlurls instead of the wsdl itself.\n+     */\n+    boolean wsdlList;\n+\n     /**\n      * Specifies the frontend. Default is JAXWS. Currently supports only JAXWS frontend.\n      */\n@@ -213,6 +219,14 @@ public boolean isSetWsdlLocation() {\n         return !DEFAULT_WSDL_LOCATION.equals(wsdlLocation);\n     }\n \n+    public boolean isWsdlList() {\n+        return wsdlList;\n+    }\n+\n+    public void setWsdlList(boolean wsdlList) {\n+        this.wsdlList = wsdlList;\n+    }\n+\n     public String getFrontEnd() {\n         return frontEnd;\n     }",
                "raw_url": "https://github.com/apache/cxf/raw/6bef2d486db4fbee62e94861272ed4825714f215/maven-plugins/codegen-plugin/src/main/java/org/apache/cxf/maven_plugin/Option.java",
                "sha": "cab9be1d5ee06992d2efddb3a7cbf0a0ade90beb",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/6bef2d486db4fbee62e94861272ed4825714f215/maven-plugins/codegen-plugin/src/main/java/org/apache/cxf/maven_plugin/WSDL2JavaMojo.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/maven-plugins/codegen-plugin/src/main/java/org/apache/cxf/maven_plugin/WSDL2JavaMojo.java?ref=6bef2d486db4fbee62e94861272ed4825714f215",
                "deletions": 0,
                "filename": "maven-plugins/codegen-plugin/src/main/java/org/apache/cxf/maven_plugin/WSDL2JavaMojo.java",
                "patch": "@@ -459,6 +459,9 @@ private void processWsdl(WsdlOption wsdlOption) throws MojoExecutionException {\n             list.add(\"-wsdlLocation\");\n             list.add(wsdlOption.getWsdlLocation() == null ? \"\" : wsdlOption.getWsdlLocation());\n         }\n+        if (wsdlOption.isWsdlList()) {\n+            list.add(\"-wsdlList\");\n+        }\n         if (getLog().isDebugEnabled() && !list.contains(\"-verbose\")) {\n             list.add(\"-verbose\");            \n         }",
                "raw_url": "https://github.com/apache/cxf/raw/6bef2d486db4fbee62e94861272ed4825714f215/maven-plugins/codegen-plugin/src/main/java/org/apache/cxf/maven_plugin/WSDL2JavaMojo.java",
                "sha": "f113b2b9092dec1d37b71c847e1cf664dbc71217",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/cxf/blob/6bef2d486db4fbee62e94861272ed4825714f215/rt/core/src/main/java/org/apache/cxf/interceptor/LoggingInInterceptor.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/main/java/org/apache/cxf/interceptor/LoggingInInterceptor.java?ref=6bef2d486db4fbee62e94861272ed4825714f215",
                "deletions": 2,
                "filename": "rt/core/src/main/java/org/apache/cxf/interceptor/LoggingInInterceptor.java",
                "patch": "@@ -83,6 +83,18 @@ public void handleMessage(Message message) throws Fault {\n         }\n     }\n \n+    /**\n+     * Transform the string before display. The implementation in this class \n+     * does nothing. Override this method if you want to change the contents of the \n+     * logged message before it is delivered to the output. \n+     * For example, you can use this to mask out sensitive information.\n+     * @param originalLogString the raw log message.\n+     * @return transformed data\n+     */\n+    protected String transform(String originalLogString) {\n+        return originalLogString;\n+    } \n+\n     private void logging(Message message) throws Fault {\n         String id = (String)message.getExchange().get(LoggingMessage.ID_KEY);\n         if (id == null) {\n@@ -139,9 +151,9 @@ private void logging(Message message) throws Fault {\n         }\n \n         if (writer != null) {\n-            writer.println(buffer.toString());\n+            writer.println(transform(buffer.toString()));\n         } else if (LOG.isLoggable(Level.INFO)) {\n-            LOG.info(buffer.toString());\n+            LOG.info(transform(buffer.toString()));\n         }\n     }\n }",
                "raw_url": "https://github.com/apache/cxf/raw/6bef2d486db4fbee62e94861272ed4825714f215/rt/core/src/main/java/org/apache/cxf/interceptor/LoggingInInterceptor.java",
                "sha": "7154840571e9cf17cc6f2a92e15d71708c4f8850",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cxf/blob/6bef2d486db4fbee62e94861272ed4825714f215/rt/databinding/jaxb/src/main/java/org/apache/cxf/endpoint/dynamic/DynamicClientFactory.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/databinding/jaxb/src/main/java/org/apache/cxf/endpoint/dynamic/DynamicClientFactory.java?ref=6bef2d486db4fbee62e94861272ed4825714f215",
                "deletions": 1,
                "filename": "rt/databinding/jaxb/src/main/java/org/apache/cxf/endpoint/dynamic/DynamicClientFactory.java",
                "patch": "@@ -561,10 +561,16 @@ static void setupClasspath(StringBuilder classPath, ClassLoader classLoader)\n                 }\n                 for (URL url : urls) {\n                     if (url.getProtocol().startsWith(\"file\")) {\n-                        File file; \n+                        File file;\n+                        if (url.toURI().getPath() == null) {\n+                            continue;\n+                        }\n                         try { \n                             file = new File(url.toURI().getPath()); \n                         } catch (URISyntaxException urise) { \n+                            if (url.getPath() == null) {\n+                                continue;\n+                            }\n                             file = new File(url.getPath()); \n                         } \n ",
                "raw_url": "https://github.com/apache/cxf/raw/6bef2d486db4fbee62e94861272ed4825714f215/rt/databinding/jaxb/src/main/java/org/apache/cxf/endpoint/dynamic/DynamicClientFactory.java",
                "sha": "99b5f45dac81e668c67eed83c80449cac435d167",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cxf/blob/6bef2d486db4fbee62e94861272ed4825714f215/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java?ref=6bef2d486db4fbee62e94861272ed4825714f215",
                "deletions": 0,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java",
                "patch": "@@ -306,9 +306,16 @@ protected void generateUnformattedServiceList(HttpServletRequest request,\n         if (!isHideServiceList) {\n             List<ServletDestination> destinations = getServletDestinations();\n \n+            boolean renderWsdlList = \"true\".equals(request.getParameter(\"wsdlList\"));\n+            \n             for (ServletDestination sd : destinations) {\n                 String address = sd.getEndpointInfo().getAddress();\n                 response.getWriter().write(address);\n+                \n+                if (renderWsdlList) {\n+                    response.getWriter().write(\"?wsdl\");\n+                }\n+                \n                 response.getWriter().write('\\n');\n             }\n         }",
                "raw_url": "https://github.com/apache/cxf/raw/6bef2d486db4fbee62e94861272ed4825714f215/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java",
                "sha": "d0f78218aee9919c2aae3a33b7cbda66b181524b",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/cxf/blob/6bef2d486db4fbee62e94861272ed4825714f215/tools/common/src/main/java/org/apache/cxf/tools/common/ToolContext.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/common/src/main/java/org/apache/cxf/tools/common/ToolContext.java?ref=6bef2d486db4fbee62e94861272ed4825714f215",
                "deletions": 1,
                "filename": "tools/common/src/main/java/org/apache/cxf/tools/common/ToolContext.java",
                "patch": "@@ -97,7 +97,7 @@ public boolean containsKey(String key) {\n     public Object get(String key) {\n         return (paramMap == null) ? null : paramMap.get(key);\n     }\n-\n+    \n     public Object get(String key, Object defaultValue) {\n         if (!optionSet(key)) {\n             return defaultValue;\n@@ -263,4 +263,28 @@ public QName getQName(String key, String defaultNamespace) {\n     public boolean isPackageNameChanged() {\n         return packageNameChanged;\n     }\n+    \n+    /**\n+     * This method attempts to do a deep copy of items which may change in this ToolContext.\n+     * The intent of this is to be able to take a snapshot of the state of the ToolContext\n+     * after it's initialised so we can run a tool multiple times with the same setup\n+     * while not having the state preserved between multiple runs. I didn't want \n+     * to call this clone() as it neither does a deep nor shallow copy. It does a mix\n+     * based on my best guess at what changes and what doesn't.\n+     */\n+    public ToolContext makeCopy() {\n+        ToolContext newCopy = new ToolContext();\n+        \n+        newCopy.javaModel = javaModel;\n+        newCopy.paramMap = new HashMap<String, Object>(paramMap);\n+        newCopy.packageName = packageName;\n+        newCopy.packageNameChanged = packageNameChanged;\n+        newCopy.namespacePackageMap = new HashMap<String, String>(namespacePackageMap);\n+        newCopy.excludeNamespacePackageMap = new HashMap<String, String>(excludeNamespacePackageMap);\n+        newCopy.jaxbBindingFiles = new ArrayList<InputSource>(jaxbBindingFiles);\n+        newCopy.excludePkgList = new ArrayList<String>(excludePkgList);\n+        newCopy.excludeFileList = new ArrayList<String>(excludeFileList);\n+        \n+        return newCopy;\n+    }    \n }",
                "raw_url": "https://github.com/apache/cxf/raw/6bef2d486db4fbee62e94861272ed4825714f215/tools/common/src/main/java/org/apache/cxf/tools/common/ToolContext.java",
                "sha": "ce4f65d999f4d2fe0656c2d3e83a34661925ddfd",
                "status": "modified"
            },
            {
                "additions": 128,
                "blob_url": "https://github.com/apache/cxf/blob/6bef2d486db4fbee62e94861272ed4825714f215/tools/wsdlto/core/src/main/java/org/apache/cxf/tools/wsdlto/WSDLToJavaContainer.java",
                "changes": 220,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/wsdlto/core/src/main/java/org/apache/cxf/tools/wsdlto/WSDLToJavaContainer.java?ref=6bef2d486db4fbee62e94861272ed4825714f215",
                "deletions": 92,
                "filename": "tools/wsdlto/core/src/main/java/org/apache/cxf/tools/wsdlto/WSDLToJavaContainer.java",
                "patch": "@@ -19,9 +19,11 @@\n \n package org.apache.cxf.tools.wsdlto;\n \n+import java.io.BufferedReader;\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.util.ArrayList;\n@@ -91,115 +93,149 @@ public WSDLToJavaContainer(String name, ToolSpec toolspec) throws Exception {\n         return WSDLConstants.getVersion(version);\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     public void execute() throws ToolException {\n-        if (!hasInfoOption()) {\n-            // TODO: After runtime support w3c EPR mapping ,this will be removed\n-            //context.put(ToolConstants.CFG_NO_ADDRESS_BINDING, \n-            //            ToolConstants.CFG_NO_ADDRESS_BINDING);\n-            buildToolContext();\n-            validate(context);\n-            FrontEndProfile frontend = context.get(FrontEndProfile.class);\n-\n-            if (frontend == null) {\n-                throw new ToolException(new Message(\"FOUND_NO_FRONTEND\", LOG));\n-            }\n+        if (hasInfoOption()) {\n+            return;\n+        }\n \n-            WSDLConstants.WSDLVersion version = getWSDLVersion();\n-\n-            String wsdlURL = (String)context.get(ToolConstants.CFG_WSDLURL);\n-            List<ServiceInfo> serviceList = (List<ServiceInfo>)context.get(ToolConstants.SERVICE_LIST);\n-            if (serviceList == null) {\n-                serviceList = new ArrayList<ServiceInfo>();\n-\n-                // Build the ServiceModel from the WSDLModel\n-                if (version == WSDLConstants.WSDLVersion.WSDL11) {\n-                    AbstractWSDLBuilder<Definition> builder = (AbstractWSDLBuilder<Definition>)frontend\n-                        .getWSDLBuilder();\n-                    builder.setContext(context);\n-                    builder.setBus(getBus());\n-                    context.put(Bus.class, getBus());\n-                    wsdlURL = URIParserUtil.getAbsoluteURI(wsdlURL);\n-                    builder.build(wsdlURL);\n-                    builder.customize();\n-                    Definition definition = builder.getWSDLModel();\n-\n-                    context.put(Definition.class, definition);\n-\n-                    builder.validate(definition);\n-\n-                    WSDLServiceBuilder serviceBuilder = new WSDLServiceBuilder(getBus());\n-                    serviceBuilder.setIgnoreUnknownBindings(true);\n-                    String serviceName = (String)context.get(ToolConstants.CFG_SERVICENAME);\n-\n-                    if (serviceName != null) {\n-                        List<ServiceInfo> services = serviceBuilder\n-                            .buildServices(definition, getServiceQName(definition));\n-                        serviceList.addAll(services);\n-                    } else if (definition.getServices().size() > 0) {\n-                        serviceList = serviceBuilder.buildServices(definition);\n-                    } else {\n-                        serviceList = serviceBuilder.buildMockServices(definition);\n-                    }\n+        buildToolContext();\n+        \n+        boolean isWsdlList = context.optionSet(ToolConstants.CFG_WSDLLIST);\n \n-                } else {\n-                    // TODO: wsdl2.0 support\n+        if (isWsdlList) {\n+            try {\n+                ToolContext initialContextState = context.makeCopy();\n+                String wsdlURL = (String)context.get(ToolConstants.CFG_WSDLURL);\n+                wsdlURL = URIParserUtil.getAbsoluteURI(wsdlURL);\n+\n+                URL url = new URL(wsdlURL);\n+                InputStream is = (InputStream)url.getContent();\n+                BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n+                String tempLine = null;\n+                while ((tempLine = reader.readLine()) != null) {                    \n+                    ToolContext freshContext = initialContextState.makeCopy();\n+                    freshContext.put(ToolConstants.CFG_WSDLURL, tempLine);\n+                    setContext(freshContext);\n+                    buildToolContext();\n+                    \n+                    processWsdl();\n                 }\n-            }\n-            context.put(ToolConstants.SERVICE_LIST, serviceList);\n-            \n-            Map<String, InterfaceInfo> interfaces = new LinkedHashMap<String, InterfaceInfo>();\n-\n-            ServiceInfo service0 = serviceList.get(0);\n-            SchemaCollection schemaCollection = service0.getXmlSchemaCollection();\n-            context.put(ToolConstants.XML_SCHEMA_COLLECTION, schemaCollection);\n-            \n-            context.put(ToolConstants.PORTTYPE_MAP, interfaces);\n-            context.put(ClassCollector.class, new ClassCollector());\n-            Processor processor = frontend.getProcessor();\n-            if (processor instanceof ClassNameProcessor) {\n-                processor.setEnvironment(context);\n-                for (ServiceInfo service : serviceList) {\n-\n-                    context.put(ServiceInfo.class, service);\n-\n-                    ((ClassNameProcessor)processor).processClassNames();\n-\n-                    context.put(ServiceInfo.class, null);\n+            } catch (IOException e) {\n+                throw new ToolException(e);\n+            }       \n+        } else {\n+            processWsdl();\n+        }\n+    }\n+\n+    private void processWsdl() {\n+        // TODO: After runtime support w3c EPR mapping ,this will be removed\n+        //context.put(ToolConstants.CFG_NO_ADDRESS_BINDING, \n+        //            ToolConstants.CFG_NO_ADDRESS_BINDING);\n+        validate(context);\n+        FrontEndProfile frontend = context.get(FrontEndProfile.class);\n+\n+        if (frontend == null) {\n+            throw new ToolException(new Message(\"FOUND_NO_FRONTEND\", LOG));\n+        }\n+\n+        WSDLConstants.WSDLVersion version = getWSDLVersion();\n+\n+        String wsdlURL = (String)context.get(ToolConstants.CFG_WSDLURL);\n+\n+        @SuppressWarnings(\"unchecked\")\n+        List<ServiceInfo> serviceList = (List<ServiceInfo>)context.get(ToolConstants.SERVICE_LIST);\n+        if (serviceList == null) {\n+            serviceList = new ArrayList<ServiceInfo>();\n+\n+            // Build the ServiceModel from the WSDLModel\n+            if (version == WSDLConstants.WSDLVersion.WSDL11) {\n+                @SuppressWarnings(\"unchecked\")\n+                AbstractWSDLBuilder<Definition> builder = (AbstractWSDLBuilder<Definition>)frontend\n+                    .getWSDLBuilder();\n+                builder.setContext(context);\n+                builder.setBus(getBus());\n+                context.put(Bus.class, getBus());\n+                wsdlURL = URIParserUtil.getAbsoluteURI(wsdlURL);\n+                builder.build(wsdlURL);\n+                builder.customize();\n+                Definition definition = builder.getWSDLModel();\n+\n+                context.put(Definition.class, definition);\n+\n+                builder.validate(definition);\n+\n+                WSDLServiceBuilder serviceBuilder = new WSDLServiceBuilder(getBus());\n+                serviceBuilder.setIgnoreUnknownBindings(true);\n+                String serviceName = (String)context.get(ToolConstants.CFG_SERVICENAME);\n+\n+                if (serviceName != null) {\n+                    List<ServiceInfo> services = serviceBuilder\n+                        .buildServices(definition, getServiceQName(definition));\n+                    serviceList.addAll(services);\n+                } else if (definition.getServices().size() > 0) {\n+                    serviceList = serviceBuilder.buildServices(definition);\n+                } else {\n+                    serviceList = serviceBuilder.buildMockServices(definition);\n                 }\n+\n+            } else {\n+                // TODO: wsdl2.0 support\n             }\n-            generateTypes();\n+        }\n+        context.put(ToolConstants.SERVICE_LIST, serviceList);\n+        \n+        Map<String, InterfaceInfo> interfaces = new LinkedHashMap<String, InterfaceInfo>();\n \n+        ServiceInfo service0 = serviceList.get(0);\n+        SchemaCollection schemaCollection = service0.getXmlSchemaCollection();\n+        context.put(ToolConstants.XML_SCHEMA_COLLECTION, schemaCollection);\n+        \n+        context.put(ToolConstants.PORTTYPE_MAP, interfaces);\n+        context.put(ClassCollector.class, new ClassCollector());\n+        Processor processor = frontend.getProcessor();\n+        if (processor instanceof ClassNameProcessor) {\n+            processor.setEnvironment(context);\n             for (ServiceInfo service : serviceList) {\n \n                 context.put(ServiceInfo.class, service);\n \n-                validate(service);\n+                ((ClassNameProcessor)processor).processClassNames();\n \n-                // Build the JavaModel from the ServiceModel\n-                processor.setEnvironment(context);\n-                processor.process();\n+                context.put(ServiceInfo.class, null);\n+            }\n+        }\n+        generateTypes();\n \n-                if (!isSuppressCodeGen()) {\n-                    // Generate artifacts\n-                    for (FrontEndGenerator generator : frontend.getGenerators()) {\n-                        generator.generate(context);\n-                    }\n+        for (ServiceInfo service : serviceList) {\n+\n+            context.put(ServiceInfo.class, service);\n+\n+            validate(service);\n+\n+            // Build the JavaModel from the ServiceModel\n+            processor.setEnvironment(context);\n+            processor.process();\n+\n+            if (!isSuppressCodeGen()) {\n+                // Generate artifacts\n+                for (FrontEndGenerator generator : frontend.getGenerators()) {\n+                    generator.generate(context);\n                 }\n             }\n-            context.remove(ToolConstants.SERVICE_LIST);\n+        }\n+        context.remove(ToolConstants.SERVICE_LIST);\n \n-            // Build projects: compile classes and copy resources etc.\n-            if (context.optionSet(ToolConstants.CFG_COMPILE)) {\n-                new ClassUtils().compile(context);\n-            }\n+        // Build projects: compile classes and copy resources etc.\n+        if (context.optionSet(ToolConstants.CFG_COMPILE)) {\n+            new ClassUtils().compile(context);\n+        }\n \n-            if (context.isExcludeNamespaceEnabled()) {\n-                try {\n-                    removeExcludeFiles();\n-                } catch (IOException e) {\n-                    throw new ToolException(e);\n-                }\n+        if (context.isExcludeNamespaceEnabled()) {\n+            try {\n+                removeExcludeFiles();\n+            } catch (IOException e) {\n+                throw new ToolException(e);\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/cxf/raw/6bef2d486db4fbee62e94861272ed4825714f215/tools/wsdlto/core/src/main/java/org/apache/cxf/tools/wsdlto/WSDLToJavaContainer.java",
                "sha": "44556ded1061893653b8211953a60d1568355c80",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cxf/blob/6bef2d486db4fbee62e94861272ed4825714f215/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/jaxws-toolspec.xml",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/jaxws-toolspec.xml?ref=6bef2d486db4fbee62e94861272ed4825714f215",
                "deletions": 0,
                "filename": "tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/jaxws-toolspec.xml",
                "patch": "@@ -315,6 +315,16 @@ Examples:\n                 <switch>q</switch>\n             </option>\n \n+\t        <option id=\"wsdlList\" maxOccurs=\"1\">\n+\t            <annotation>\n+\t                Indicates the wsdlurl is a plain text list of wsdlurls that are new line delimited.\n+\t                As an example the wsdlurl might point to \n+\t                http://127.0.0.1:8080/context_path/ws?formatted=false&amp;wsdlList=true on a cxf \n+\t                server. \n+\t            </annotation>\n+\t            <switch>wsdlList</switch>\n+\t        </option>\n+\n         </optionGroup>\n         <argument id=\"wsdlurl\" minOccurs=\"1\" maxOccurs=\"1\">\n             <annotation>",
                "raw_url": "https://github.com/apache/cxf/raw/6bef2d486db4fbee62e94861272ed4825714f215/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/jaxws-toolspec.xml",
                "sha": "e776aa888bc3412cb0b984ccc7d87c7bb89babc4",
                "status": "modified"
            }
        ],
        "message": "[CXF-2177, CXF-2174, CXF-2175] Patches from Juan Uys, Ted Leung applied\nAdd NPE check to DynamicClient\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@766763 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/dbd8b8cd20a3e867d8db40f8eb2b4eba9d4147a9",
        "patched_files": [
            "WSDLToJavaContainer.java",
            "LoggingInInterceptor.java",
            "ServletController.java",
            "ToolContext.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "ServletControllerTest.java",
            "LoggingInInterceptorTest.java",
            "WSDLToJavaContainerTest.java",
            "ToolContextTest.java"
        ]
    },
    "cxf_6c37922": {
        "bug_id": "cxf_6c37922",
        "commit": "https://github.com/apache/cxf/commit/6c37922c1eee2bc78c576bd69ba32221b60c2d7b",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/6c37922c1eee2bc78c576bd69ba32221b60c2d7b/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/EndpointImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/EndpointImpl.java?ref=6c37922c1eee2bc78c576bd69ba32221b60c2d7b",
                "deletions": 1,
                "filename": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/EndpointImpl.java",
                "patch": "@@ -447,7 +447,11 @@ public String getWsdlLocation() {\n     }\n \n     public void setWsdlLocation(String wsdlLocation) {\n-        this.wsdlLocation = new String(wsdlLocation);\n+        if (wsdlLocation != null) {\n+            this.wsdlLocation = new String(wsdlLocation);\n+        } else {\n+            this.wsdlLocation = null;\n+        }\n     }\n \n     public void setBindingUri(String binding) {",
                "raw_url": "https://github.com/apache/cxf/raw/6c37922c1eee2bc78c576bd69ba32221b60c2d7b/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/EndpointImpl.java",
                "sha": "32a06061c8c397cceaed07e4f2b1a7b4e13c32ea",
                "status": "modified"
            }
        ],
        "message": "Fix a NPE I introduced.\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@790642 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/45457cdea89522772888fafc7d8fed9de4d50def",
        "patched_files": [
            "EndpointImpl.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "TestEndpointImpl.java",
            "EndpointImplTest.java"
        ]
    },
    "cxf_6d7d8eb": {
        "bug_id": "cxf_6d7d8eb",
        "commit": "https://github.com/apache/cxf/commit/6d7d8eb39c6fdd1323bf50b410302e48240d0a3a",
        "file": [
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/cxf/blob/6d7d8eb39c6fdd1323bf50b410302e48240d0a3a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/LinkBuilderImpl.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/LinkBuilderImpl.java?ref=6d7d8eb39c6fdd1323bf50b410302e48240d0a3a",
                "deletions": 3,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/LinkBuilderImpl.java",
                "patch": "@@ -74,12 +74,25 @@ public Builder link(Link link) {\n \n     @Override\n     public Builder link(String link) {\n+        \n+        link = link.trim();\n+        if (link.length() > 1 && link.startsWith(\"<\")) {\n+            int index = link.indexOf(\">\", 1);\n+            if (index != -1) {\n+                String uri = link.substring(1, index);\n+                ub = UriBuilder.fromUri(uri);\n+                if (index + 1 == link.length()) {\n+                    link = \"\";\n+                } else {\n+                    link = link.substring(index + 1);\n+                }\n+            }\n+        }\n+        \n         String[] tokens = StringUtils.split(link, \";\");\n         for (String token : tokens) {\n             String theToken = token.trim();\n-            if (theToken.startsWith(\"<\") && theToken.endsWith(\">\")) {\n-                ub = UriBuilder.fromUri(theToken.substring(1, theToken.length() - 1));\n-            } else {\n+            if (!theToken.isEmpty()) {\n                 int i = theToken.indexOf('=');\n                 if (i != -1) {\n                     String name = theToken.substring(0, i);",
                "raw_url": "https://github.com/apache/cxf/raw/6d7d8eb39c6fdd1323bf50b410302e48240d0a3a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/LinkBuilderImpl.java",
                "sha": "d35a2edf554804c64658161d5f5a66a009decd3e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/6d7d8eb39c6fdd1323bf50b410302e48240d0a3a/rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/impl/LinkBuilderImplTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/impl/LinkBuilderImplTest.java?ref=6d7d8eb39c6fdd1323bf50b410302e48240d0a3a",
                "deletions": 1,
                "filename": "rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/impl/LinkBuilderImplTest.java",
                "patch": "@@ -41,7 +41,7 @@ public void testBuild() throws Exception {\n     }\n     \n     @Test\n-    public void testbBuildObjects() throws Exception {\n+    public void testBuildObjects() throws Exception {\n         StringBuilder path1 = new StringBuilder().append(\"p1\");\n         ByteArrayInputStream path2 = new ByteArrayInputStream(\"p2\".getBytes()) {\n             @Override",
                "raw_url": "https://github.com/apache/cxf/raw/6d7d8eb39c6fdd1323bf50b410302e48240d0a3a/rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/impl/LinkBuilderImplTest.java",
                "sha": "70920cc2531ff55c9e20cbb49c9a45303bc95af9",
                "status": "modified"
            }
        ],
        "message": "[CXF-6664] Fixing NPE based on the input from with the help from Michael Krenn",
        "parent": "https://github.com/apache/cxf/commit/1c092b9b3b0d438e4e5d44d44b5942cb406f8ade",
        "patched_files": [
            "LinkBuilderImpl.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "LinkBuilderImplTest.java"
        ]
    },
    "cxf_6e022e2": {
        "bug_id": "cxf_6e022e2",
        "commit": "https://github.com/apache/cxf/commit/6e022e235449c0167f3700b6579d261586d87055",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/6e022e235449c0167f3700b6579d261586d87055/api/src/main/java/org/apache/cxf/staxutils/StaxUtils.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/api/src/main/java/org/apache/cxf/staxutils/StaxUtils.java?ref=6e022e235449c0167f3700b6579d261586d87055",
                "deletions": 0,
                "filename": "api/src/main/java/org/apache/cxf/staxutils/StaxUtils.java",
                "patch": "@@ -738,6 +738,9 @@ private static void writeStartElement(XMLStreamReader reader, XMLStreamWriter wr\n             if (nsPrefix == null) {\n                 nsPrefix = \"\";\n             }\n+            if (nsURI == null) {\n+                nsURI = \"\";\n+            }\n             if (nsPrefix.length() == 0) {\n                 writer.writeDefaultNamespace(nsURI);\n                 writer.setDefaultNamespace(nsURI);",
                "raw_url": "https://github.com/apache/cxf/raw/6e022e235449c0167f3700b6579d261586d87055/api/src/main/java/org/apache/cxf/staxutils/StaxUtils.java",
                "sha": "151e61d934d1799cbefb6a0b57a683d5d9c14d99",
                "status": "modified"
            }
        ],
        "message": "[CXF-5004] NPE at StaxUtils.copy for empty namespaces under JDK's XMLStreamReader\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1479735 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/74a52d0fe68a7a84f44cdc4583ed8b1ef2036b42",
        "patched_files": [
            "StaxUtils.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "StaxUtilsTest.java"
        ]
    },
    "cxf_6f20b90": {
        "bug_id": "cxf_6f20b90",
        "commit": "https://github.com/apache/cxf/commit/6f20b90588f1371b8a0edfdf05cfeb266aaf0b9d",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cxf/blob/6f20b90588f1371b8a0edfdf05cfeb266aaf0b9d/rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLServiceUtils.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLServiceUtils.java?ref=6f20b90588f1371b8a0edfdf05cfeb266aaf0b9d",
                "deletions": 1,
                "filename": "rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLServiceUtils.java",
                "patch": "@@ -41,7 +41,10 @@ public static BindingFactory getBindingFactory(Binding binding, Bus bus, StringB\n                 sb.delete(0, sb.length());\n                 sb.append(ext.getElementType().getNamespaceURI());\n                 try {\n-                    factory = bus.getExtension(BindingFactoryManager.class).getBindingFactory(sb.toString());\n+                    BindingFactoryManager manager = bus.getExtension(BindingFactoryManager.class);\n+                    if (manager != null) {\n+                        factory = manager.getBindingFactory(sb.toString());\n+                    }\n                 } catch (BusException e) {\n                     // ignore, we'll use a generic BindingInfo\n                 }",
                "raw_url": "https://github.com/apache/cxf/raw/6f20b90588f1371b8a0edfdf05cfeb266aaf0b9d/rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLServiceUtils.java",
                "sha": "8922fbe18eba1516aca9f3c22c7a22d81a52482c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/6f20b90588f1371b8a0edfdf05cfeb266aaf0b9d/rt/databinding/jaxb/src/test/java/org/apache/cxf/jaxb/JAXBDataBindingTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/databinding/jaxb/src/test/java/org/apache/cxf/jaxb/JAXBDataBindingTest.java?ref=6f20b90588f1371b8a0edfdf05cfeb266aaf0b9d",
                "deletions": 1,
                "filename": "rt/databinding/jaxb/src/test/java/org/apache/cxf/jaxb/JAXBDataBindingTest.java",
                "patch": "@@ -97,7 +97,7 @@ public void setUp() throws Exception {\n         bindingFactoryManager = control.createMock(BindingFactoryManager.class);\n         destinationFactoryManager = control.createMock(DestinationFactoryManager.class);\n         \n-        EasyMock.expect(bus.getExtension(BindingFactoryManager.class)).andReturn(bindingFactoryManager);\n+        EasyMock.expect(bus.getExtension(BindingFactoryManager.class)).andStubReturn(bindingFactoryManager);\n         EasyMock.expect(bus.getExtension(DestinationFactoryManager.class))\n             .andStubReturn(destinationFactoryManager);\n ",
                "raw_url": "https://github.com/apache/cxf/raw/6f20b90588f1371b8a0edfdf05cfeb266aaf0b9d/rt/databinding/jaxb/src/test/java/org/apache/cxf/jaxb/JAXBDataBindingTest.java",
                "sha": "c038842e109c9940ec64ecba1c12954d89bac1d3",
                "status": "modified"
            }
        ],
        "message": "Fixed the NPE WSDLServiceUtils\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1410201 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/3e58bca03394f60c4a453c41c7bed14700129529",
        "patched_files": [
            "JAXBDataBinding.java",
            "WSDLServiceUtils.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JAXBDataBindingTest.java"
        ]
    },
    "cxf_6f4efc4": {
        "bug_id": "cxf_6f4efc4",
        "commit": "https://github.com/apache/cxf/commit/6f4efc41aa5018582a798e0bc889e41a18a1fb89",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/6f4efc41aa5018582a798e0bc889e41a18a1fb89/common/common/src/main/java/org/apache/cxf/helpers/WSDLHelper.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/common/common/src/main/java/org/apache/cxf/helpers/WSDLHelper.java?ref=6f4efc41aa5018582a798e0bc889e41a18a1fb89",
                "deletions": 2,
                "filename": "common/common/src/main/java/org/apache/cxf/helpers/WSDLHelper.java",
                "patch": "@@ -97,7 +97,7 @@ public Map getParts(Operation operation, boolean out) {\n     public List<Part> getInMessageParts(Operation operation) {\n         Input input = operation.getInput();\n         List<Part> partsList = new ArrayList<Part>();\n-        if (input != null) {\n+        if (input != null && input.getMessage() != null) {\n             Iterator ite = input.getMessage().getParts().values().iterator();\n             while (ite.hasNext()) {\n                 partsList.add((Part)ite.next());\n@@ -109,7 +109,7 @@ public Map getParts(Operation operation, boolean out) {\n     public List<Part> getOutMessageParts(Operation operation) {\n         Output output = operation.getOutput();\n         List<Part> partsList = new ArrayList<Part>();\n-        if (output != null) {\n+        if (output != null && output.getMessage() != null) {\n             Iterator ite = output.getMessage().getParts().values().iterator();\n             while (ite.hasNext()) {\n                 partsList.add((Part)ite.next());",
                "raw_url": "https://github.com/apache/cxf/raw/6f4efc41aa5018582a798e0bc889e41a18a1fb89/common/common/src/main/java/org/apache/cxf/helpers/WSDLHelper.java",
                "sha": "fcf7098ab845ce2065b38ccb14bf6ccf5e8f8235",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cxf/blob/6f4efc41aa5018582a798e0bc889e41a18a1fb89/parent/pom.xml",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/parent/pom.xml?ref=6f4efc41aa5018582a798e0bc889e41a18a1fb89",
                "deletions": 6,
                "filename": "parent/pom.xml",
                "patch": "@@ -474,12 +474,6 @@\n                 <groupId>com.sun.xml.parsers</groupId>\n                 <artifactId>jaxp-ri</artifactId>\n                 <version>1.4.2</version>\n-                <exclusions>\n-                    <exclusion>\n-                        <groupId>javax.xml.parsers</groupId>\n-                        <artifactId>jaxp-api</artifactId>\n-                    </exclusion>\n-                </exclusions>\n             </dependency>\n             <dependency>\n                 <groupId>org.apache.servicemix</groupId>",
                "raw_url": "https://github.com/apache/cxf/raw/6f4efc41aa5018582a798e0bc889e41a18a1fb89/parent/pom.xml",
                "sha": "06e7a942da530742ccb998bc1b7bfbc04ff2c3ae",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/6f4efc41aa5018582a798e0bc889e41a18a1fb89/rt/javascript/src/test/java/org/apache/cxf/javascript/GreeterClientTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/javascript/src/test/java/org/apache/cxf/javascript/GreeterClientTest.java?ref=6f4efc41aa5018582a798e0bc889e41a18a1fb89",
                "deletions": 2,
                "filename": "rt/javascript/src/test/java/org/apache/cxf/javascript/GreeterClientTest.java",
                "patch": "@@ -58,7 +58,7 @@ private Void sayHiCaller(Context context) {\n             testUtilities.rhinoCallConvert(\"sayHiTest\", Notifier.class, \n                                            testUtilities.javaToJS(getAddress()));\n         \n-        boolean notified = notifier.waitForJavascript(1000 * 10);\n+        boolean notified = notifier.waitForJavascript(1000 * 15);\n         assertTrue(notified);\n         Integer errorStatus = testUtilities.rhinoEvaluateConvert(\"globalErrorStatus\", Integer.class);\n         assertNull(errorStatus);\n@@ -86,7 +86,7 @@ private Void sayHiClosureCaller(Context context) {\n             testUtilities.rhinoCallConvert(\"requestClosureTest\", CountDownNotifier.class, \n                                            testUtilities.javaToJS(getAddress()));\n         \n-        boolean notified = notifier.waitForJavascript(1000 * 10);\n+        boolean notified = notifier.waitForJavascript(1000 * 15);\n         assertTrue(notified);\n         Integer errorStatus = testUtilities.rhinoEvaluateConvert(\"globalErrorStatus\", Integer.class);\n         assertNull(errorStatus);",
                "raw_url": "https://github.com/apache/cxf/raw/6f4efc41aa5018582a798e0bc889e41a18a1fb89/rt/javascript/src/test/java/org/apache/cxf/javascript/GreeterClientTest.java",
                "sha": "a208147f60334af7d92651fdb88d6243072d03bb",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/6f4efc41aa5018582a798e0bc889e41a18a1fb89/tools/validator/src/test/java/org/apache/cxf/tools/validator/WSDLValidationTest.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/validator/src/test/java/org/apache/cxf/tools/validator/WSDLValidationTest.java?ref=6f4efc41aa5018582a798e0bc889e41a18a1fb89",
                "deletions": 1,
                "filename": "tools/validator/src/test/java/org/apache/cxf/tools/validator/WSDLValidationTest.java",
                "patch": "@@ -87,7 +87,8 @@ public void testValidateReferenceError() throws Exception {\n         String error = getStdErr();\n         if (StaxUtils.isWoodstox()) {\n             // sjsxp doesn't report locations.\n-            assertTrue(error.indexOf(\"[147,3]\") != -1);\n+            assertTrue(\"error message does not contain [147,3]. error message: \"\n+                + error, error.indexOf(\"[147,3]\") != -1);\n         }\n         assertTrue(error.indexOf(\"Caused by {http://apache.org/hello_world_soap_http}\"\n                                        + \"[binding:Greeter_SOAPBinding1] not exist.\") != -1);",
                "raw_url": "https://github.com/apache/cxf/raw/6f4efc41aa5018582a798e0bc889e41a18a1fb89/tools/validator/src/test/java/org/apache/cxf/tools/validator/WSDLValidationTest.java",
                "sha": "922a1b4aaf30edab563f48795b5b0e6182dc82b7",
                "status": "modified"
            }
        ],
        "message": "[CXF-2341] Remove exclusion of jaxp-api which is needed when using ibm jdk 5.\nAlso, added a null check to avoid a NullPointerException seen when running\nthe WSDLValidationTest.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@794892 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/57f2bc80760d8bed16d84d1341d10e48add23ff7",
        "patched_files": [
            "WSDLHelper.java",
            "pom.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "WSDLValidationTest.java",
            "GreeterClientTest.java"
        ]
    },
    "cxf_6f947b7": {
        "bug_id": "cxf_6f947b7",
        "commit": "https://github.com/apache/cxf/commit/6f947b7a3e5c935500c949cc5648f7a6a0e94288",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/cxf/blob/6f947b7a3e5c935500c949cc5648f7a6a0e94288/api/src/main/java/org/apache/cxf/common/util/ASMHelper.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/api/src/main/java/org/apache/cxf/common/util/ASMHelper.java?ref=6f947b7a3e5c935500c949cc5648f7a6a0e94288",
                "deletions": 0,
                "filename": "api/src/main/java/org/apache/cxf/common/util/ASMHelper.java",
                "patch": "@@ -38,6 +38,7 @@\n public class ASMHelper {\n     protected static final Map<Class<?>, String> PRIMITIVE_MAP = new HashMap<Class<?>, String>();\n     protected static final Map<Class<?>, String> NONPRIMITIVE_MAP = new HashMap<Class<?>, String>();\n+    protected static final Map<Class<?>, Integer> PRIMITIVE_ZERO_MAP = new HashMap<Class<?>, Integer>();\n     \n     protected static final Map<Class<?>, WeakReference<TypeHelperClassLoader>> LOADER_MAP \n         = new WeakIdentityHashMap<Class<?>, WeakReference<TypeHelperClassLoader>>();\n@@ -135,6 +136,11 @@ private static void tryClass(String s) {\n         public static int IFNONNULL = 0;\n         public static int SIPUSH = 0;\n         public static int INVOKESTATIC = 0;\n+        public static int ICONST_0;\n+        public static int LCONST_0;\n+        public static int FCONST_0;\n+        public static int DCONST_0;\n+        \n         //CHECKSTYLE:ON\n         static {\n             try {\n@@ -147,6 +153,15 @@ private static void tryClass(String s) {\n             } catch (Throwable e) {\n                 //ignore\n             }\n+            \n+            PRIMITIVE_ZERO_MAP.put(Byte.TYPE, Opcodes.ICONST_0);\n+            PRIMITIVE_ZERO_MAP.put(Boolean.TYPE, Opcodes.ICONST_0);\n+            PRIMITIVE_ZERO_MAP.put(Long.TYPE, Opcodes.LCONST_0);\n+            PRIMITIVE_ZERO_MAP.put(Integer.TYPE, Opcodes.ICONST_0);\n+            PRIMITIVE_ZERO_MAP.put(Short.TYPE, Opcodes.ICONST_0);\n+            PRIMITIVE_ZERO_MAP.put(Character.TYPE, Opcodes.ICONST_0);\n+            PRIMITIVE_ZERO_MAP.put(Float.TYPE, Opcodes.FCONST_0);\n+            PRIMITIVE_ZERO_MAP.put(Double.TYPE, Opcodes.DCONST_0);\n         }\n     }\n     ",
                "raw_url": "https://github.com/apache/cxf/raw/6f947b7a3e5c935500c949cc5648f7a6a0e94288/api/src/main/java/org/apache/cxf/common/util/ASMHelper.java",
                "sha": "c86a43bc86210e7d2c5efc311ca8a96e2a7af103",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/cxf/blob/6f947b7a3e5c935500c949cc5648f7a6a0e94288/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/WrapperHelperCompiler.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/WrapperHelperCompiler.java?ref=6f947b7a3e5c935500c949cc5648f7a6a0e94288",
                "deletions": 4,
                "filename": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/WrapperHelperCompiler.java",
                "patch": "@@ -38,7 +38,6 @@\n     final Object objectFactory;\n     final ClassWriter cw;\n \n-    \n     private WrapperHelperCompiler(Class<?> wrapperType,\n                                   Method setMethods[],\n                                   Method getMethods[],\n@@ -260,22 +259,39 @@ private boolean addCreateWrapperObject(String newClassName,\n                 \n                 if (tp.isPrimitive()) {\n                     mv.visitTypeInsn(Opcodes.CHECKCAST, NONPRIMITIVE_MAP.get(tp));\n+                    Label l45 = createLabel();\n+                    Label l46 = createLabel();\n+                    mv.visitInsn(Opcodes.DUP);\n+                    mv.visitJumpInsn(Opcodes.IFNULL, l45);\n                     mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, NONPRIMITIVE_MAP.get(tp), \n                                        tp.getName() + \"Value\", \"()\" + PRIMITIVE_MAP.get(tp));\n+                    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,\n+                                       periodToSlashes(wrapperType.getName()),\n+                                       setMethods[x].getName(), \"(\" + getClassCode(tp) + \")V\");\n+                    mv.visitJumpInsn(Opcodes.GOTO, l46);\n+                    mv.visitLabel(l45);\n+                    mv.visitInsn(Opcodes.POP);\n+                    mv.visitLabel(l46);\n                 } else if (JAXBElement.class.isAssignableFrom(tp)) {\n                     mv.visitTypeInsn(Opcodes.CHECKCAST,\n                                      periodToSlashes(jaxbMethods[x].getParameterTypes()[0].getName()));\n                     mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, periodToSlashes(objectFactoryClass.getName()),\n                                        jaxbMethods[x].getName(),\n                                        getMethodSignature(jaxbMethods[x]));\n+                    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,\n+                                       periodToSlashes(wrapperType.getName()),\n+                                       setMethods[x].getName(), \"(\" + getClassCode(tp) + \")V\");\n                 } else if (tp.isArray()) { \n                     mv.visitTypeInsn(Opcodes.CHECKCAST, getClassCode(tp));\n+                    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,\n+                                       periodToSlashes(wrapperType.getName()),\n+                                       setMethods[x].getName(), \"(\" + getClassCode(tp) + \")V\");\n                 } else {\n                     mv.visitTypeInsn(Opcodes.CHECKCAST, periodToSlashes(tp.getName()));\n+                    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,\n+                                       periodToSlashes(wrapperType.getName()),\n+                                       setMethods[x].getName(), \"(\" + getClassCode(tp) + \")V\");\n                 }\n-                mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,\n-                                   periodToSlashes(wrapperType.getName()),\n-                                   setMethods[x].getName(), \"(\" + getClassCode(tp) + \")V\");\n             }\n         }\n         ",
                "raw_url": "https://github.com/apache/cxf/raw/6f947b7a3e5c935500c949cc5648f7a6a0e94288/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/WrapperHelperCompiler.java",
                "sha": "17124c9841d1818c6251041d5507b633df68414c",
                "status": "modified"
            }
        ],
        "message": "[CXF-5147] Don't NPE if using a primitive for a holder. If null, don't call the setter so whatever is the default in the wrapper object would end up being used. (basically, same behavior as when a BARE method is used)\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1508965 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/0e48353c50960afc28bfa7afba0a7e2e5e06eb99",
        "patched_files": [
            "ASMHelper.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "ASMHelperTest.java"
        ]
    },
    "cxf_7043ded": {
        "bug_id": "cxf_7043ded",
        "commit": "https://github.com/apache/cxf/commit/7043ded41dc7484a9c47b38888a191ee70802c11",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cxf/blob/7043ded41dc7484a9c47b38888a191ee70802c11/core/src/main/java/org/apache/cxf/common/classloader/ClassLoaderUtils.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/common/classloader/ClassLoaderUtils.java?ref=7043ded41dc7484a9c47b38888a191ee70802c11",
                "deletions": 11,
                "filename": "core/src/main/java/org/apache/cxf/common/classloader/ClassLoaderUtils.java",
                "patch": "@@ -89,11 +89,10 @@ public static ClassLoader getURLClassLoader(\n      * @param callingClass The Class object of the calling object\n      */\n     public static URL getResource(String resourceName, Class<?> callingClass) {\n-        URL url = Thread.currentThread().getContextClassLoader().getResource(resourceName);\n+        URL url = getContextClassLoader().getResource(resourceName);\n         if (url == null && resourceName.startsWith(\"/\")) {\n             //certain classloaders need it without the leading /\n-            url = Thread.currentThread().getContextClassLoader()\n-                .getResource(resourceName.substring(1));\n+            url = getContextClassLoader().getResource(resourceName.substring(1));\n         }\n \n         ClassLoader cluClassloader = ClassLoaderUtils.class.getClassLoader();\n@@ -151,16 +150,14 @@ public URL nextElement() {\n \n         };\n         try {\n-            urls = Thread.currentThread().getContextClassLoader()\n-                .getResources(resourceName);\n+            urls = getContextClassLoader().getResources(resourceName);\n         } catch (IOException e) {\n             //ignore\n         }\n         if (!urls.hasMoreElements() && resourceName.startsWith(\"/\")) {\n             //certain classloaders need it without the leading /\n             try {\n-                urls = Thread.currentThread().getContextClassLoader()\n-                    .getResources(resourceName.substring(1));\n+                urls = getContextClassLoader().getResources(resourceName.substring(1));\n             } catch (IOException e) {\n                 // ignore\n             }\n@@ -295,16 +292,18 @@ public static InputStream getResourceAsStream(String resourceName, Class<?> call\n         }\n     }\n \n-    private static ClassLoader getContextClassLoader() {\n+    static ClassLoader getContextClassLoader() {\n         final SecurityManager sm = System.getSecurityManager();\n         if (sm != null) {\n             return AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {\n                 public ClassLoader run() {\n-                    return Thread.currentThread().getContextClassLoader();\n+                    ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+                    return loader != null ? loader : ClassLoader.getSystemClassLoader();\n                 }\n             });\n-        }\n-        return Thread.currentThread().getContextClassLoader();\n+        } \n+        ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        return loader != null ? loader : ClassLoader.getSystemClassLoader();\n     }\n \n     private static ClassLoader getClassLoader(final Class<?> clazz) {",
                "raw_url": "https://github.com/apache/cxf/raw/7043ded41dc7484a9c47b38888a191ee70802c11/core/src/main/java/org/apache/cxf/common/classloader/ClassLoaderUtils.java",
                "sha": "ce39516665045aa3258e348837d06c6f7bfa7a7a",
                "status": "modified"
            },
            {
                "additions": 79,
                "blob_url": "https://github.com/apache/cxf/blob/7043ded41dc7484a9c47b38888a191ee70802c11/core/src/test/java/org/apache/cxf/common/classloader/ClassLoaderUtilsTest.java",
                "changes": 79,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/test/java/org/apache/cxf/common/classloader/ClassLoaderUtilsTest.java?ref=7043ded41dc7484a9c47b38888a191ee70802c11",
                "deletions": 0,
                "filename": "core/src/test/java/org/apache/cxf/common/classloader/ClassLoaderUtilsTest.java",
                "patch": "@@ -0,0 +1,79 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.classloader;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class ClassLoaderUtilsTest extends Assert {\n+\n+    private static void setTCCL(ClassLoader loader) {\n+        Thread.currentThread().setContextClassLoader(loader);\n+    }\n+\n+    /**\n+     * This test confirms that the expected thread context classloader\n+     * is returned from the getContextClassLoader method.\n+     */\n+    @Test\n+    public void getContextClassLoader() throws MalformedURLException {\n+        final ClassLoader nullLoader = null;\n+        final ClassLoader jvmAppLoader = ClassLoader.getSystemClassLoader();\n+        final ClassLoader jvmExtLoader = jvmAppLoader.getParent();\n+        final ClassLoader testClassLoader = ClassLoaderUtilsTest.class.getClassLoader();\n+        final ClassLoader clildLoader = new URLClassLoader(new URL[]{new URL(\"file:/.\")});\n+        final ClassLoader previousTCCL = Thread.currentThread().getContextClassLoader();\n+\n+        try {\n+            // TCCL = null\n+            setTCCL(nullLoader);\n+            assertEquals(\"TCCL == null; wrong loader returned; expected JVM App loader\", \n+                         jvmAppLoader, ClassLoaderUtils.getContextClassLoader());\n+\n+            // TCCL = JVM App CL\n+            setTCCL(jvmAppLoader);\n+            assertEquals(\"TCCL == JVM App loader; wrong loader returned; expected JVM App loader\",\n+                         jvmAppLoader, ClassLoaderUtils.getContextClassLoader());\n+\n+            // TCCL = JVM Ext CL\n+            setTCCL(jvmExtLoader);\n+            assertEquals(\"TCCL == JVM Ext loader; wrong loader returned; expected JVM Ext loader\",\n+                         jvmExtLoader, ClassLoaderUtils.getContextClassLoader());\n+\n+            // TCCL = This test class loader (which is likely also the JVM App CL)\n+            setTCCL(testClassLoader);\n+            assertEquals(\"TCCL == this test laoder; wrong loader returned; expected JVM App loader\",\n+                         testClassLoader, ClassLoaderUtils.getContextClassLoader());\n+\n+            // TCCL = a random child classloader\n+            setTCCL(clildLoader);\n+            assertEquals(\"TCCL == random child loader, wrong loader returned; expected child of test class loader\",\n+                         clildLoader, ClassLoaderUtils.getContextClassLoader());\n+\n+        } finally {\n+            // reset the TCCL for other tests\n+            setTCCL(previousTCCL);\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/cxf/raw/7043ded41dc7484a9c47b38888a191ee70802c11/core/src/test/java/org/apache/cxf/common/classloader/ClassLoaderUtilsTest.java",
                "sha": "8e1fa18032393f5e0c77454897fd91c044c1ff7f",
                "status": "added"
            }
        ],
        "message": "CXF-7349: Resolve NPE when TCCL is null",
        "parent": "https://github.com/apache/cxf/commit/cb14bf9ac392a7936aff08d7e54dd12720f8e733",
        "patched_files": [
            "ClassLoaderUtils.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "ClassLoaderUtilsTest.java"
        ]
    },
    "cxf_7050fa4": {
        "bug_id": "cxf_7050fa4",
        "commit": "https://github.com/apache/cxf/commit/7050fa40a6a5359b308ff43e3d2430cb9ad80b8d",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/7050fa40a6a5359b308ff43e3d2430cb9ad80b8d/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/client/AbstractClient.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/client/AbstractClient.java?ref=7050fa40a6a5359b308ff43e3d2430cb9ad80b8d",
                "deletions": 0,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/client/AbstractClient.java",
                "patch": "@@ -674,6 +674,9 @@ private void addMatrixOrQueryToBuilder(UriBuilder ub,\n     \n     \n     protected String convertParamValue(Object pValue) {\n+        if (pValue == null) {\n+            return null;\n+        }\n         Class<?> pClass = pValue.getClass();\n         if (pClass == String.class || pClass.isPrimitive()) {\n             return pValue.toString();",
                "raw_url": "https://github.com/apache/cxf/raw/7050fa40a6a5359b308ff43e3d2430cb9ad80b8d/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/client/AbstractClient.java",
                "sha": "70ab9eefc64c283004748ef4b8162b069c95cb5a",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cxf/blob/7050fa40a6a5359b308ff43e3d2430cb9ad80b8d/rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/client/WebClientTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/client/WebClientTest.java?ref=7050fa40a6a5359b308ff43e3d2430cb9ad80b8d",
                "deletions": 0,
                "filename": "rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/client/WebClientTest.java",
                "patch": "@@ -62,6 +62,12 @@ public void testEncoding() {\n         assertEquals(\"http://foo/bar+%20%2B;a=value+%20?b=bv%2B+%2B\", u.toString());\n     }\n     \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testNullPath() {\n+        WebClient.create(\"http://foo\").path(null);\n+        fail(\"Exception expected\");\n+    }\n+    \n     @Test\n     public void testExistingAsteriscs() {\n         URI u = WebClient.create(\"http://foo/*\").getCurrentURI();",
                "raw_url": "https://github.com/apache/cxf/raw/7050fa40a6a5359b308ff43e3d2430cb9ad80b8d/rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/client/WebClientTest.java",
                "sha": "9dc7b917af0681bfdee075f02d48a871a6572990",
                "status": "modified"
            }
        ],
        "message": "[CXF-4770] Adding NPE guard to make sure IllegalArgumentException is thrown\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1436887 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/98758817124cc348bcb6553591ff157cdc1cf747",
        "patched_files": [
            "AbstractClient.java",
            "WebClient.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "WebClientTest.java"
        ]
    },
    "cxf_73ad9a8": {
        "bug_id": "cxf_73ad9a8",
        "commit": "https://github.com/apache/cxf/commit/73ad9a853d999d7f60039e482c182c79a1d57a09",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/73ad9a853d999d7f60039e482c182c79a1d57a09/core/src/main/java/org/apache/cxf/endpoint/ClientImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/endpoint/ClientImpl.java?ref=73ad9a853d999d7f60039e482c182c79a1d57a09",
                "deletions": 1,
                "filename": "core/src/main/java/org/apache/cxf/endpoint/ClientImpl.java",
                "patch": "@@ -699,7 +699,9 @@ protected void setParameters(Object[] params, Message message) {\n     }\n \n     public void onMessage(Message message) {\n-\n+        if (bus == null) {\n+            throw new IllegalStateException(\"Message received on a Client that has been closed or destroyed.\");\n+        }\n         Endpoint endpoint = message.getExchange().getEndpoint();\n         if (endpoint == null) {\n             // in this case correlation will occur outside the transport,",
                "raw_url": "https://github.com/apache/cxf/raw/73ad9a853d999d7f60039e482c182c79a1d57a09/core/src/main/java/org/apache/cxf/endpoint/ClientImpl.java",
                "sha": "9114c66f130924948b0b12902bc6a9a707bc951c",
                "status": "modified"
            }
        ],
        "message": "[CXF-6070] Instead of NPE, throw a more meaningful exception.",
        "parent": "https://github.com/apache/cxf/commit/5e06ba0c4970700477484bd2409a226aa9ec7f0a",
        "patched_files": [
            "ClientImpl.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "ClientImplTest.java"
        ]
    },
    "cxf_793eebe": {
        "bug_id": "cxf_793eebe",
        "commit": "https://github.com/apache/cxf/commit/793eebe60d3f934bdaf009f24a392e68c5ab4630",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/793eebe60d3f934bdaf009f24a392e68c5ab4630/rt/transports/websocket/src/main/java/org/apache/cxf/transport/websocket/WebSocketTransportFactory.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/websocket/src/main/java/org/apache/cxf/transport/websocket/WebSocketTransportFactory.java?ref=793eebe60d3f934bdaf009f24a392e68c5ab4630",
                "deletions": 0,
                "filename": "rt/transports/websocket/src/main/java/org/apache/cxf/transport/websocket/WebSocketTransportFactory.java",
                "patch": "@@ -134,6 +134,11 @@ public Destination getDestination(EndpointInfo endpointInfo, Bus bus) throws IOE\n             AbstractHTTPDestination d = registry.getDestinationForPath(endpointInfo.getAddress());\n             if (d == null) {\n                 d = factory.createDestination(endpointInfo, bus, registry);\n+                if (d == null) {\n+                    String error = \"No destination available. The CXF websocket transport needs either the \"\n+                        + \"Jetty WebSocket or Atmosphere dependencies to be available\";\n+                    throw new IOException(error); \n+                }\n                 registry.addDestination(d);\n                 configure(bus, d);\n                 d.finalizeConfig();",
                "raw_url": "https://github.com/apache/cxf/raw/793eebe60d3f934bdaf009f24a392e68c5ab4630/rt/transports/websocket/src/main/java/org/apache/cxf/transport/websocket/WebSocketTransportFactory.java",
                "sha": "b1da5390fba66d81411fafaa5259fcb4f0c18289",
                "status": "modified"
            }
        ],
        "message": "Avoid a NPE in websocket transport",
        "parent": "https://github.com/apache/cxf/commit/fbf69824d551605272fad67cc0bbc60a93fb52d7",
        "patched_files": [
            "WebSocketTransportFactory.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "WebSocketTransportFactoryTest.java"
        ]
    },
    "cxf_79b4284": {
        "bug_id": "cxf_79b4284",
        "commit": "https://github.com/apache/cxf/commit/79b4284ca030d868f1594d66cb747aca13fc5ffd",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cxf/blob/79b4284ca030d868f1594d66cb747aca13fc5ffd/rt/core/src/main/java/org/apache/cxf/interceptor/URIMappingInterceptor.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/main/java/org/apache/cxf/interceptor/URIMappingInterceptor.java?ref=79b4284ca030d868f1594d66cb747aca13fc5ffd",
                "deletions": 5,
                "filename": "rt/core/src/main/java/org/apache/cxf/interceptor/URIMappingInterceptor.java",
                "patch": "@@ -337,13 +337,12 @@ private String uriDecode(String query) {\n         return queries;\n     }\n     \n-    private String getBasePath(Message message) {\n-        return (String)message.get(Message.BASE_PATH);        \n-    }\n-    \n     private String getRest(Message message) {\n         String path = (String)message.get(Message.PATH_INFO);\n-        String basePath = getBasePath(message);        \n+        String basePath = (String)message.get(Message.BASE_PATH);\n+        if (basePath == null) {\n+            basePath = \"/\";\n+        }\n         return StringUtils.diff(path, basePath);        \n     }\n     ",
                "raw_url": "https://github.com/apache/cxf/raw/79b4284ca030d868f1594d66cb747aca13fc5ffd/rt/core/src/main/java/org/apache/cxf/interceptor/URIMappingInterceptor.java",
                "sha": "40acfaefa4c938338f60089bbe2b1777c4572047",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/79b4284ca030d868f1594d66cb747aca13fc5ffd/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java?ref=79b4284ca030d868f1594d66cb747aca13fc5ffd",
                "deletions": 0,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java",
                "patch": "@@ -93,6 +93,9 @@ protected synchronized void updateDests(HttpServletRequest request) {\n                 && d2.getAddress() != null\n                 && d2.getAddress().getAddress() != null) {\n                 ad = d2.getAddress().getAddress().getValue();\n+                if (ad == null) {\n+                    ad = \"/\";\n+                }\n             }\n             if (ad != null \n                 && (ad.equals(path)",
                "raw_url": "https://github.com/apache/cxf/raw/79b4284ca030d868f1594d66cb747aca13fc5ffd/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java",
                "sha": "b4137d4918058c380d3f7316e92310da10d87d57",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/79b4284ca030d868f1594d66cb747aca13fc5ffd/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletDestination.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletDestination.java?ref=79b4284ca030d868f1594d66cb747aca13fc5ffd",
                "deletions": 0,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletDestination.java",
                "patch": "@@ -100,6 +100,9 @@ public void invoke(final ServletConfig config,\n     protected String getBasePath(String contextPath) throws IOException {\n         \n         String address = getAddress().getAddress().getValue();\n+        if (address == null) {\n+            return contextPath;\n+        }\n         if (address.startsWith(\"http\")) {\n             return URI.create(address).getPath();\n         }",
                "raw_url": "https://github.com/apache/cxf/raw/79b4284ca030d868f1594d66cb747aca13fc5ffd/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletDestination.java",
                "sha": "b9cd64de2ad23b50b99aeafecb7923e87ee696a6",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cxf/blob/79b4284ca030d868f1594d66cb747aca13fc5ffd/systests/transports/src/test/java/org/apache/cxf/systest/servlet/NoSpringServletClientTest.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/transports/src/test/java/org/apache/cxf/systest/servlet/NoSpringServletClientTest.java?ref=79b4284ca030d868f1594d66cb747aca13fc5ffd",
                "deletions": 3,
                "filename": "systests/transports/src/test/java/org/apache/cxf/systest/servlet/NoSpringServletClientTest.java",
                "patch": "@@ -20,6 +20,9 @@\n \n import java.lang.reflect.UndeclaredThrowableException;\n import java.net.URL;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n import javax.xml.namespace.QName;\n \n import com.meterware.httpunit.WebConversation;\n@@ -75,10 +78,16 @@ public void testHelloService() throws Exception {\n     @Test\n     public void testGetServiceList() throws Exception {\n         WebConversation client = new WebConversation();\n-        WebResponse res = client.getResponse(serviceURL);\n+        WebResponse res = client.getResponse(serviceURL + \"/services\");\n         WebLink[] links = res.getLinks();\n-        assertEquals(\"There should get two links for the service\", 2, links.length);\n-        assertEquals(serviceURL + \"Greeter?wsdl\", links[0].getURLString());\n+        Set<String> s = new HashSet<String>();\n+        for (WebLink l : links) {\n+            s.add(l.getURLString());\n+        }\n+        assertEquals(\"There should be 3 links for the service\", 3, links.length);\n+        assertTrue(s.contains(serviceURL + \"Greeter?wsdl\"));\n+        assertTrue(s.contains(serviceURL + \"Hello?wsdl\"));\n+        assertTrue(s.contains(serviceURL + \"?wsdl\"));\n         assertEquals(\"text/html\", res.getContentType());\n     }\n }",
                "raw_url": "https://github.com/apache/cxf/raw/79b4284ca030d868f1594d66cb747aca13fc5ffd/systests/transports/src/test/java/org/apache/cxf/systest/servlet/NoSpringServletClientTest.java",
                "sha": "7e3b6e4fbcfe26df8b4ed6d55a597b492582c656",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/79b4284ca030d868f1594d66cb747aca13fc5ffd/systests/transports/src/test/java/org/apache/cxf/systest/servlet/NoSpringServletServer.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/transports/src/test/java/org/apache/cxf/systest/servlet/NoSpringServletServer.java?ref=79b4284ca030d868f1594d66cb747aca13fc5ffd",
                "deletions": 0,
                "filename": "systests/transports/src/test/java/org/apache/cxf/systest/servlet/NoSpringServletServer.java",
                "patch": "@@ -22,6 +22,7 @@\n \n import org.apache.cxf.Bus;\n import org.apache.cxf.BusFactory;\n+import org.apache.cxf.jaxws.EndpointImpl;\n import org.apache.cxf.testutil.common.AbstractBusTestServerBase;\n import org.apache.cxf.transport.servlet.CXFNonSpringServlet;\n import org.apache.hello_world_soap_http.GreeterImpl;\n@@ -63,6 +64,8 @@ protected void run() {\n             Endpoint.publish(\"/Greeter\", impl);\n             HelloImpl helloImpl = new HelloImpl();\n             Endpoint.publish(\"/Hello\", helloImpl);\n+            \n+            ((EndpointImpl)Endpoint.create(helloImpl)).publish();\n \n         } catch (Exception e) {\n             throw new RuntimeException(e);",
                "raw_url": "https://github.com/apache/cxf/raw/79b4284ca030d868f1594d66cb747aca13fc5ffd/systests/transports/src/test/java/org/apache/cxf/systest/servlet/NoSpringServletServer.java",
                "sha": "ad7bb5ef65d9071087b9b20e0cf020edd3f155b2",
                "status": "modified"
            }
        ],
        "message": "[CXF-3082] Make EndpointImpl.publish() work correctly without throwing\nthe NPE on the get of the service list and wsdl\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1026341 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/c4215e1c7c3dc35005e913e5c6a994c48019fc3e",
        "patched_files": [
            "URIMappingInterceptor.java",
            "ServletDestination.java",
            "ServletController.java",
            "NoSpringServletServer.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "ServletControllerTest.java",
            "NoSpringServletClientTest.java"
        ]
    },
    "cxf_7b402ed": {
        "bug_id": "cxf_7b402ed",
        "commit": "https://github.com/apache/cxf/commit/7b402ed31b2971671543d465b32ad27995c9d941",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/7b402ed31b2971671543d465b32ad27995c9d941/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceFactoryBean.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceFactoryBean.java?ref=7b402ed31b2971671543d465b32ad27995c9d941",
                "deletions": 0,
                "filename": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceFactoryBean.java",
                "patch": "@@ -50,6 +50,7 @@\n import javax.xml.ws.soap.SOAPBinding;\n \n import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+import org.apache.cxf.common.i18n.Message;\n import org.apache.cxf.common.logging.LogUtils;\n import org.apache.cxf.common.util.PackageUtils;\n import org.apache.cxf.common.util.StringUtils;\n@@ -185,6 +186,10 @@ private void loadWSFeatureAnnotation(Class<?> serviceClass, Class<?> implementor\n \n     @Override\n     public void setServiceClass(Class<?> serviceClass) {\n+        if (serviceClass == null) {\n+            Message message = new Message(\"SERVICECLASS_MUST_BE_SET\", LOG);\n+            throw new ServiceConstructionException(message);\n+        }\n         setJaxWsImplementorInfo(new JaxWsImplementorInfo(serviceClass));\n         super.setServiceClass(getJaxWsImplementorInfo().getEndpointClass());\n     }",
                "raw_url": "https://github.com/apache/cxf/raw/7b402ed31b2971671543d465b32ad27995c9d941/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceFactoryBean.java",
                "sha": "63d6711535cae88f8ba1f9fb8e284de9258ed826",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/7b402ed31b2971671543d465b32ad27995c9d941/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/Messages.properties",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/Messages.properties?ref=7b402ed31b2971671543d465b32ad27995c9d941",
                "deletions": 0,
                "filename": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/Messages.properties",
                "patch": "@@ -28,3 +28,4 @@ COULD_NOT_FIND_ENDPOINT = Could not find endpoint named {0}.  Possible values ar\n SOAPBinding_MESSAGE_RPC= JAX-WS SOAPBinding annotation with Style of RPC found on method {0}. This is not supported.\n INVALID_REQUEST_WRAPPER = @RequestWrapper class {0} is the same as the actual parameter {1}.  This is likely not to work. \n INVALID_RESPONSE_WRAPPER = @ResponseWrapper class {0} is the same as the actual return class {1}.  This is likely not to work. \n+SERVICECLASS_MUST_BE_SET = serviceClass must be set to a valid service interface or class\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cxf/raw/7b402ed31b2971671543d465b32ad27995c9d941/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/Messages.properties",
                "sha": "0bed8cf4e8112b348081806c999826e80f9276e7",
                "status": "modified"
            }
        ],
        "message": "CXF-2476 Throw meaningfull exception instead of NullpointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@826181 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/4bf328ae55f5877ca538386d6e0892af0a7a57a3",
        "patched_files": [
            "JaxWsServiceFactoryBean.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JaxWsServiceFactoryBeanTest.java"
        ]
    },
    "cxf_7b78b8b": {
        "bug_id": "cxf_7b78b8b",
        "commit": "https://github.com/apache/cxf/commit/7b78b8b49f5ee85231b9a966689f2fff9531782c",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cxf/blob/7b78b8b49f5ee85231b9a966689f2fff9531782c/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceFactoryBean.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceFactoryBean.java?ref=7b78b8b49f5ee85231b9a966689f2fff9531782c",
                "deletions": 4,
                "filename": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceFactoryBean.java",
                "patch": "@@ -544,10 +544,12 @@ private void buildWSAActions(OperationInfo operation, Method method) {\n                                                        inputAction);\n             operation.getInput().addExtensionAttribute(JAXWSAConstants.WSAW_ACTION_QNAME,\n                                                        inputAction);\n-            operation.getOutput().addExtensionAttribute(JAXWSAConstants.WSAM_ACTION_QNAME,\n-                                                       computeAction(operation, \"Response\"));\n-            operation.getOutput().addExtensionAttribute(JAXWSAConstants.WSAW_ACTION_QNAME,\n-                                                        computeAction(operation, \"Response\"));\n+            if (operation.getOutput() != null) {\n+                operation.getOutput().addExtensionAttribute(JAXWSAConstants.WSAM_ACTION_QNAME,\n+                                                            computeAction(operation, \"Response\"));\n+                operation.getOutput().addExtensionAttribute(JAXWSAConstants.WSAW_ACTION_QNAME,\n+                                                            computeAction(operation, \"Response\"));\n+            }\n \n         } else {\n             MessageInfo input = operation.getInput();",
                "raw_url": "https://github.com/apache/cxf/raw/7b78b8b49f5ee85231b9a966689f2fff9531782c/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceFactoryBean.java",
                "sha": "769293e1cb5077dfa510a106ecea51caec015d40",
                "status": "modified"
            }
        ],
        "message": "[CXF-3560] Add NPE guard when WS-A is used with one-ways\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1132857 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/3f3785001bd5d672ef926773d7464df4ee53e359",
        "patched_files": [
            "JaxWsServiceFactoryBean.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JaxWsServiceFactoryBeanTest.java"
        ]
    },
    "cxf_842729f": {
        "bug_id": "cxf_842729f",
        "commit": "https://github.com/apache/cxf/commit/842729f78df0ca634d8a3a2aedd42ff57a8269a3",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/842729f78df0ca634d8a3a2aedd42ff57a8269a3/common/common/src/main/java/org/apache/cxf/resource/URIResolver.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/common/common/src/main/java/org/apache/cxf/resource/URIResolver.java?ref=842729f78df0ca634d8a3a2aedd42ff57a8269a3",
                "deletions": 1,
                "filename": "common/common/src/main/java/org/apache/cxf/resource/URIResolver.java",
                "patch": "@@ -205,7 +205,7 @@ private void tryFileSystem(String baseUriStr, String uriStr) throws IOException,\n             // do nothing\n         }\n \n-        if (is == null && baseUriStr.startsWith(\"classpath:\")) {\n+        if (is == null && baseUriStr != null && baseUriStr.startsWith(\"classpath:\")) {\n             tryClasspath(baseUriStr + uriStr);\n         }\n         if (is == null && uri != null && \"file\".equals(uri.getScheme())) {",
                "raw_url": "https://github.com/apache/cxf/raw/842729f78df0ca634d8a3a2aedd42ff57a8269a3/common/common/src/main/java/org/apache/cxf/resource/URIResolver.java",
                "sha": "9d625261067463b7e073f79d2b2237aa133c931d",
                "status": "modified"
            }
        ],
        "message": "Add NPE guard\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@831417 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/2c040aebc0ffdb599c2ff3dc3b9e8a4c8fa952ee",
        "patched_files": [
            "URIResolver.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "URIResolverTest.java"
        ]
    },
    "cxf_84f47cf": {
        "bug_id": "cxf_84f47cf",
        "commit": "https://github.com/apache/cxf/commit/84f47cf7fb535dc2eb1258e68fc1068c2f0b5178",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/84f47cf7fb535dc2eb1258e68fc1068c2f0b5178/rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLServiceBuilder.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLServiceBuilder.java?ref=84f47cf7fb535dc2eb1258e68fc1068c2f0b5178",
                "deletions": 2,
                "filename": "rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLServiceBuilder.java",
                "patch": "@@ -754,8 +754,8 @@ private static boolean isWrappableSequence(XmlSchemaComplexType type, String nam\n                     MessagePartInfo mpi = wrapper.addMessagePart(new QName(namespaceURI, el.getName()));\n                     mpi.setTypeQName(el.getSchemaTypeName());\n                     mpi.setElement(true);\n-                    mpi.setConcreteName(el.getWireName());\n                     mpi.setElementQName(el.getWireName());\n+                    mpi.setConcreteName(el.getWireName());\n                     mpi.setXmlSchema(el);\n                 } else if (el.getRef().getTargetQName() != null) {\n                     MessagePartInfo mpi = wrapper.addMessagePart(el.getRef().getTargetQName());\n@@ -771,8 +771,8 @@ private static boolean isWrappableSequence(XmlSchemaComplexType type, String nam\n                 } else {\n                     // anonymous type\n                     MessagePartInfo mpi = wrapper.addMessagePart(new QName(namespaceURI, el.getName()));\n-                    mpi.setConcreteName(el.getWireName());\n                     mpi.setElementQName(mpi.getName());\n+                    mpi.setConcreteName(el.getWireName());\n                     mpi.setElement(true);\n                     mpi.setXmlSchema(el);\n                 }",
                "raw_url": "https://github.com/apache/cxf/raw/84f47cf7fb535dc2eb1258e68fc1068c2f0b5178/rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLServiceBuilder.java",
                "sha": "57cd519b64ae56c5f1fb22226c5b9a5ad433c9d1",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cxf/blob/84f47cf7fb535dc2eb1258e68fc1068c2f0b5178/systests/ws-specs/src/test/resources/wsdl_systest_wsspec/DoubleIt.wsdl",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/ws-specs/src/test/resources/wsdl_systest_wsspec/DoubleIt.wsdl?ref=84f47cf7fb535dc2eb1258e68fc1068c2f0b5178",
                "deletions": 1,
                "filename": "systests/ws-specs/src/test/resources/wsdl_systest_wsspec/DoubleIt.wsdl",
                "patch": "@@ -25,7 +25,13 @@\n \t\t\t<xsd:element name=\"DoubleIt\">\n \t\t\t\t<xsd:complexType>\n \t\t\t\t\t<xsd:sequence>\n-\t\t\t\t\t\t<xsd:element name=\"numberToDouble\" type=\"xsd:integer\" />\n+\t\t\t\t\t\t<xsd:element name=\"numberToDouble\">\n+                            <xsd:simpleType>\n+\t\t\t\t\t\t\t\t<xsd:restriction base=\"xsd:integer\">\n+\t\t\t\t\t\t\t\t\t<xsd:minInclusive value=\"0\"/>\n+\t\t\t\t\t\t\t\t</xsd:restriction>\n+\t\t\t\t\t\t\t</xsd:simpleType>\n+                        </xsd:element>\n \t\t\t\t\t</xsd:sequence>\n \t\t\t\t</xsd:complexType>\n \t\t\t</xsd:element>",
                "raw_url": "https://github.com/apache/cxf/raw/84f47cf7fb535dc2eb1258e68fc1068c2f0b5178/systests/ws-specs/src/test/resources/wsdl_systest_wsspec/DoubleIt.wsdl",
                "sha": "0a520bad07009746519b50ed54fdb71b7b080ca7",
                "status": "modified"
            }
        ],
        "message": "[CXF-3197] Fix NPE in wsdl2java when unwrapping elements that have\nanonymous types.\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1050156 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/7db203192dc4ae77fbc1f7feca40ed0a45e47946",
        "patched_files": [
            "WSDLServiceBuilder.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "WSDLServiceBuilderTest.java"
        ]
    },
    "cxf_87d67b9": {
        "bug_id": "cxf_87d67b9",
        "commit": "https://github.com/apache/cxf/commit/87d67b928b87adb1e60eb817d1718f405cbc7e3c",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cxf/blob/87d67b928b87adb1e60eb817d1718f405cbc7e3c/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/soap/RetransmissionQueueImpl.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/soap/RetransmissionQueueImpl.java?ref=87d67b928b87adb1e60eb817d1718f405cbc7e3c",
                "deletions": 17,
                "filename": "rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/soap/RetransmissionQueueImpl.java",
                "patch": "@@ -19,13 +19,11 @@\n \n package org.apache.cxf.ws.rm.soap;\n \n-import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n import java.net.ConnectException;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.Date;\n import java.util.HashMap;\n@@ -390,7 +388,7 @@ private void serverResend(Message message) throws RMException {\n         }\n         \n         final String address = to.getValue();\n-        LOG.fine(\"Resending to address: \" + address);\n+        LOG.log(Level.FINE, \"Resending to address: {0}\", address);\n         final ProtocolVariation protocol = RMContextUtils.getProtocolVariation(message);\n         final Endpoint reliableEndpoint = manager.getReliableEndpoint(message).getEndpoint(protocol);\n \n@@ -455,15 +453,10 @@ private void resend(Conduit c, Message message) {\n             }\n             CachedOutputStream content = (CachedOutputStream)message\n                 .get(RMMessageConstants.SAVED_CONTENT);\n-            InputStream bis = null;\n             if (null == content) {\n-                byte[] savedbytes = message.getContent(byte[].class);\n-                bis = new ByteArrayInputStream(savedbytes); \n-                if (LOG.isLoggable(Level.FINE)) {\n-                    LOG.fine(\"Using saved byte array: \" + Arrays.toString(savedbytes));\n-                }\n+                LOG.log(Level.WARNING, \"Assuming the message has been acknowledged and released, skipping resend.\");\n             } else {\n-                bis = content.getInputStream();\n+                InputStream bis = content.getInputStream();\n                 if (LOG.isLoggable(Level.FINE)) {\n                     if (content.size() < 65536) {\n                         LOG.fine(\"Using saved output stream: \" \n@@ -472,17 +465,17 @@ private void resend(Conduit c, Message message) {\n                         LOG.fine(\"Using saved output stream: ...\");                        \n                     }\n                 }\n-            }\n \n-            // copy saved output stream to new output stream in chunks of 1024\n-            IOUtils.copyAndCloseInput(bis, os);\n-            os.flush();\n-            // closing the conduit this way will close the underlining stream that is os.\n-            c.close(message);\n+                // copy saved output stream to new output stream in chunks of 1024\n+                IOUtils.copyAndCloseInput(bis, os);\n+                os.flush();\n+                // closing the conduit this way will close the underlining stream that is os.\n+                c.close(message);\n+            }\n         } catch (ConnectException ex) {\n             //ignore, we'll just resent again later\n         } catch (IOException ex) {\n-            LOG.log(Level.SEVERE, \"RESEND_FAILED_MSG\", ex);\n+            LOG.log(Level.WARNING, \"RESEND_FAILED_MSG\", ex);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/cxf/raw/87d67b928b87adb1e60eb817d1718f405cbc7e3c/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/soap/RetransmissionQueueImpl.java",
                "sha": "c096128ce7fbec6147fb1ce6698a023e3d9f4ace",
                "status": "modified"
            }
        ],
        "message": "[CXF-5546] NPE may be thrown and logged during WS-RM's retransmission\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1565162 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/0bfee67fff799ffa7845873a4190676763c1c1ea",
        "patched_files": [
            "RetransmissionQueueImpl.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "RetransmissionQueueImplTest.java"
        ]
    },
    "cxf_883461c": {
        "bug_id": "cxf_883461c",
        "commit": "https://github.com/apache/cxf/commit/883461c7fa6743b7fa5a587f16aadd92a037fb8f",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/883461c7fa6743b7fa5a587f16aadd92a037fb8f/api/src/main/java/org/apache/cxf/phase/PhaseInterceptorChain.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/api/src/main/java/org/apache/cxf/phase/PhaseInterceptorChain.java?ref=883461c7fa6743b7fa5a587f16aadd92a037fb8f",
                "deletions": 1,
                "filename": "api/src/main/java/org/apache/cxf/phase/PhaseInterceptorChain.java",
                "patch": "@@ -297,12 +297,14 @@ public synchronized boolean doIntercept(Message message) {\n                         }\n     \n                         message.setContent(Exception.class, ex);\n+                        boolean isOneWay = false;\n                         if (message.getExchange() != null) {\n                             message.getExchange().put(Exception.class, ex);\n+                            isOneWay = message.getExchange().isOneWay();\n                         }                    \n                         unwind(message);\n                         \n-                        if (faultObserver != null && !message.getExchange().isOneWay()) {\n+                        if (faultObserver != null && !isOneWay) {\n                             faultObserver.onMessage(message);\n                         }\n                     }",
                "raw_url": "https://github.com/apache/cxf/raw/883461c7fa6743b7fa5a587f16aadd92a037fb8f/api/src/main/java/org/apache/cxf/phase/PhaseInterceptorChain.java",
                "sha": "eb4815aaaa7ff77b5d10ec727a2ac20aaf2fefd8",
                "status": "modified"
            }
        ],
        "message": "Add an NPE guard\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@891037 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/5b409868efb18b954c3880148d721c7ceabc6bcf",
        "patched_files": [
            "PhaseInterceptorChain.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "PhaseInterceptorChainTest.java"
        ]
    },
    "cxf_8aa2857": {
        "bug_id": "cxf_8aa2857",
        "commit": "https://github.com/apache/cxf/commit/8aa2857dfb2a04431461f75eb1338da3a8df7776",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cxf/blob/8aa2857dfb2a04431461f75eb1338da3a8df7776/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceConfiguration.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceConfiguration.java?ref=8aa2857dfb2a04431461f75eb1338da3a8df7776",
                "deletions": 5,
                "filename": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceConfiguration.java",
                "patch": "@@ -844,11 +844,13 @@ public Boolean isWrapperPartQualified(MessagePartInfo mpi) {\n     \n     public Long getWrapperPartMinOccurs(MessagePartInfo mpi) {\n         Annotation[] a = (Annotation[])mpi.getProperty(ReflectionServiceFactoryBean.PARAM_ANNOTATION);\n-        for (Annotation a2 : a) {\n-            if (a2 instanceof XmlElement) {\n-                XmlElement e = (XmlElement)a2;\n-                if (e.required()) {\n-                    return 1L;\n+        if (a != null) {\n+            for (Annotation a2 : a) {\n+                if (a2 instanceof XmlElement) {\n+                    XmlElement e = (XmlElement)a2;\n+                    if (e.required()) {\n+                        return 1L;\n+                    }\n                 }\n             }\n         }",
                "raw_url": "https://github.com/apache/cxf/raw/8aa2857dfb2a04431461f75eb1338da3a8df7776/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceConfiguration.java",
                "sha": "81e2d0200a4bbfc44b2b66beeb852d3f5a5b18a0",
                "status": "modified"
            }
        ],
        "message": "[CXF-3069] Adding NPE guard to getWrapperPartMinOccurs method\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1027509 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/93b280e2353cc9477db7918c06812c30443ea071",
        "patched_files": [
            "JaxWsServiceConfiguration.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JaxWsServiceConfigurationTest.java"
        ]
    },
    "cxf_8c138e0": {
        "bug_id": "cxf_8c138e0",
        "commit": "https://github.com/apache/cxf/commit/8c138e03557e85601a5f2a4a10905eda5673590f",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cxf/blob/8c138e03557e85601a5f2a4a10905eda5673590f/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPDestination.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPDestination.java?ref=8c138e03557e85601a5f2a4a10905eda5673590f",
                "deletions": 2,
                "filename": "rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPDestination.java",
                "patch": "@@ -51,6 +51,7 @@\n import org.apache.cxf.transport.http.DestinationRegistry;\n import org.apache.cxf.transport.http_jetty.continuations.JettyContinuationProvider;\n import org.apache.cxf.transport.https.CertConstraintsJaxBUtils;\n+import org.apache.cxf.transports.http.configuration.HTTPServerPolicy;\n import org.eclipse.jetty.http.Generator;\n import org.eclipse.jetty.io.AbstractConnection;\n import org.eclipse.jetty.server.AbstractHttpConnection.Output;\n@@ -242,8 +243,9 @@ protected void doService(ServletContext context,\n                 setHeadFalse(c);\n             }\n         }\n-        if (getServer().isSetRedirectURL()) {\n-            resp.sendRedirect(getServer().getRedirectURL());\n+        HTTPServerPolicy sp = getServer();\n+        if (sp.isSetRedirectURL()) {\n+            resp.sendRedirect(sp.getRedirectURL());\n             resp.flushBuffer();\n             baseRequest.setHandled(true);\n             return;",
                "raw_url": "https://github.com/apache/cxf/raw/8c138e03557e85601a5f2a4a10905eda5673590f/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPDestination.java",
                "sha": "703b552396e88f3f5eb08f7e9e65f6e9c24e2dc3",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/cxf/blob/8c138e03557e85601a5f2a4a10905eda5673590f/rt/transports/http/src/main/java/org/apache/cxf/transport/http/AbstractHTTPDestination.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/http/AbstractHTTPDestination.java?ref=8c138e03557e85601a5f2a4a10905eda5673590f",
                "deletions": 12,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/http/AbstractHTTPDestination.java",
                "patch": "@@ -111,7 +111,7 @@\n     protected final String path;\n \n     // Configuration values\n-    protected HTTPServerPolicy serverPolicy;\n+    protected volatile HTTPServerPolicy serverPolicy;\n     protected String contextMatchStrategy = \"stem\";\n     protected boolean fixedParameterOrder;\n     protected boolean multiplexWithAddress;\n@@ -513,18 +513,28 @@ private void initConfig() {\n         cproviderFactory = bus.getExtension(ContinuationProviderFactory.class);\n     }\n \n-    private void calcServerPolicy(Message m) {\n+    private synchronized HTTPServerPolicy calcServerPolicyInternal(Message m) {\n+        HTTPServerPolicy sp = serverPolicy;\n         if (!serverPolicyCalced) {\n             PolicyDataEngine pde = bus.getExtension(PolicyDataEngine.class);\n             if (pde != null) {\n-                serverPolicy = pde.getServerEndpointPolicy(m, endpointInfo, this, new ServerPolicyCalculator());\n+                sp = pde.getServerEndpointPolicy(m, endpointInfo, this, new ServerPolicyCalculator());\n             }\n-            if (null == serverPolicy) {\n-                serverPolicy = endpointInfo.getTraversedExtensor(\n+            if (null == sp) {\n+                sp = endpointInfo.getTraversedExtensor(\n                         new HTTPServerPolicy(), HTTPServerPolicy.class);\n             }\n+            serverPolicy = sp;\n+            serverPolicyCalced = true;\n+        }\n+        return sp;\n+    }\n+    private HTTPServerPolicy calcServerPolicy(Message m) {\n+        HTTPServerPolicy sp = serverPolicy;\n+        if (!serverPolicyCalced) {\n+            sp = calcServerPolicyInternal(m);\n         }\n-        serverPolicyCalced = true;\n+        return sp;\n     }\n     \n     /**\n@@ -581,9 +591,9 @@ protected OutputStream flushHeaders(Message outMessage, boolean getStream) throw\n         }\n \n         cacheInput(outMessage);\n-        calcServerPolicy(outMessage);\n-        if (serverPolicy != null) {\n-            new Headers(outMessage).setFromServerPolicy(serverPolicy);\n+        HTTPServerPolicy sp = calcServerPolicy(outMessage);\n+        if (sp != null) {\n+            new Headers(outMessage).setFromServerPolicy(sp);\n         }\n \n         OutputStream responseStream = null;\n@@ -879,8 +889,7 @@ public void setMultiplexWithAddress(boolean multiplexWithAddress) {\n     }\n \n     public HTTPServerPolicy getServer() {\n-        calcServerPolicy(null);\n-        return serverPolicy;\n+        return calcServerPolicy(null);\n     }\n \n     public void setServer(HTTPServerPolicy server) {\n@@ -892,7 +901,7 @@ public void setServer(HTTPServerPolicy server) {\n     \n     public void assertMessage(Message message) {\n         PolicyDataEngine pde = bus.getExtension(PolicyDataEngine.class);\n-        pde.assertMessage(message, serverPolicy, new ServerPolicyCalculator());\n+        pde.assertMessage(message, calcServerPolicy(message), new ServerPolicyCalculator());\n     }\n \n     public boolean canAssert(QName type) {",
                "raw_url": "https://github.com/apache/cxf/raw/8c138e03557e85601a5f2a4a10905eda5673590f/rt/transports/http/src/main/java/org/apache/cxf/transport/http/AbstractHTTPDestination.java",
                "sha": "62367c5bdf18baa186c5609192b2cae8f5f18282",
                "status": "modified"
            }
        ],
        "message": "Fix a startup race condition that could lead to a NPE",
        "parent": "https://github.com/apache/cxf/commit/8b457fda0421ed5594a9e5e19349e265c5b1fbf8",
        "patched_files": [
            "JettyHTTPDestination.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JettyHTTPDestinationTest.java"
        ]
    },
    "cxf_8c8ed16": {
        "bug_id": "cxf_8c8ed16",
        "commit": "https://github.com/apache/cxf/commit/8c8ed16605a2d7468da380155e9aa4c4bbd62031",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/8c8ed16605a2d7468da380155e9aa4c4bbd62031/core/src/main/java/org/apache/cxf/common/util/crypto/CryptoUtils.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/common/util/crypto/CryptoUtils.java?ref=8c8ed16605a2d7468da380155e9aa4c4bbd62031",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/cxf/common/util/crypto/CryptoUtils.java",
                "patch": "@@ -637,6 +637,9 @@ public static Certificate loadCertificate(InputStream storeLocation, char[] stor\n     }\n     public static Certificate loadCertificate(KeyStore keyStore, String alias) {\n         try {\n+            if (!keyStore.containsAlias(alias)) {\n+                throw new SecurityException(\"No alias exists in the keystore for the given alias: \" + alias);\n+            }\n             return keyStore.getCertificate(alias);\n         } catch (Exception ex) { \n             throw new SecurityException(ex);",
                "raw_url": "https://github.com/apache/cxf/raw/8c8ed16605a2d7468da380155e9aa4c4bbd62031/core/src/main/java/org/apache/cxf/common/util/crypto/CryptoUtils.java",
                "sha": "5495fbc18fdad9b3d6dd7c9792972548682925b7",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE if the keystore does not contain the given alias",
        "parent": "https://github.com/apache/cxf/commit/e4feffb6f13fd5ba1c8c76bb2301d2d1a13fd43a",
        "patched_files": [
            "CryptoUtils.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "CryptoUtilsTest.java"
        ]
    },
    "cxf_8d0fefa": {
        "bug_id": "cxf_8d0fefa",
        "commit": "https://github.com/apache/cxf/commit/8d0fefa3990b902776741e631fdb1fe53c350c6f",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/8d0fefa3990b902776741e631fdb1fe53c350c6f/api/src/main/java/org/apache/cxf/interceptor/ServiceInvokerInterceptor.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/api/src/main/java/org/apache/cxf/interceptor/ServiceInvokerInterceptor.java?ref=8d0fefa3990b902776741e631fdb1fe53c350c6f",
                "deletions": 1,
                "filename": "api/src/main/java/org/apache/cxf/interceptor/ServiceInvokerInterceptor.java",
                "patch": "@@ -88,7 +88,8 @@ public void run() {\n         };\n         \n         Executor executor = getExecutor(endpoint);\n-        if (exchange.get(Executor.class) == executor) {\n+        Executor executor2 = exchange.get(Executor.class);\n+        if (executor2 == executor || executor == null) {\n             // already executing on the appropriate executor\n             invocation.run();\n         } else {",
                "raw_url": "https://github.com/apache/cxf/raw/8d0fefa3990b902776741e631fdb1fe53c350c6f/api/src/main/java/org/apache/cxf/interceptor/ServiceInvokerInterceptor.java",
                "sha": "5c4a6d5de8241edbda11477ea5bd993afcb78d32",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cxf/blob/8d0fefa3990b902776741e631fdb1fe53c350c6f/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/JAXRSServiceImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/JAXRSServiceImpl.java?ref=8d0fefa3990b902776741e631fdb1fe53c350c6f",
                "deletions": 2,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/JAXRSServiceImpl.java",
                "patch": "@@ -50,7 +50,6 @@\n import org.apache.cxf.service.model.MessagePartInfo;\n import org.apache.cxf.service.model.OperationInfo;\n import org.apache.cxf.service.model.ServiceInfo;\n-import org.apache.cxf.workqueue.SynchronousExecutor;\n \n /**\n  * The CXF Service implementation which is used \n@@ -74,7 +73,6 @@ public JAXRSServiceImpl(String address, QName qname) {\n \n     public JAXRSServiceImpl(List<ClassResourceInfo> cri, QName qname) {\n         this.classResourceInfos = cri;\n-        executor = SynchronousExecutor.getInstance();    \n         this.serviceName = qname;\n     }\n     ",
                "raw_url": "https://github.com/apache/cxf/raw/8d0fefa3990b902776741e631fdb1fe53c350c6f/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/JAXRSServiceImpl.java",
                "sha": "24508220582799081c8fd1d5b6eaf41b103d6338",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cxf/blob/8d0fefa3990b902776741e631fdb1fe53c350c6f/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/Proxy.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/Proxy.java?ref=8d0fefa3990b902776741e631fdb1fe53c350c6f",
                "deletions": 1,
                "filename": "rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/Proxy.java",
                "patch": "@@ -22,6 +22,7 @@\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.concurrent.Executor;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n \n@@ -41,6 +42,7 @@\n import org.apache.cxf.service.model.InterfaceInfo;\n import org.apache.cxf.service.model.OperationInfo;\n import org.apache.cxf.transport.Conduit;\n+import org.apache.cxf.workqueue.SynchronousExecutor;\n import org.apache.cxf.ws.addressing.AttributedURIType;\n import org.apache.cxf.ws.addressing.EndpointReferenceType;\n import org.apache.cxf.ws.addressing.RelatesToType;\n@@ -169,7 +171,11 @@ public void run() {\n                     }\n                 }\n             };\n-            reliableEndpoint.getApplicationEndpoint().getExecutor().execute(r);\n+            Executor ex = reliableEndpoint.getApplicationEndpoint().getExecutor();\n+            if (ex == null) {\n+                ex = SynchronousExecutor.getInstance();\n+            }\n+            ex.execute(r);\n             return null;\n         }\n         ",
                "raw_url": "https://github.com/apache/cxf/raw/8d0fefa3990b902776741e631fdb1fe53c350c6f/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/Proxy.java",
                "sha": "28d3bd1f073dd52976f6c87d839aad8ceb5af999",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cxf/blob/8d0fefa3990b902776741e631fdb1fe53c350c6f/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/soap/RetransmissionQueueImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/soap/RetransmissionQueueImpl.java?ref=8d0fefa3990b902776741e631fdb1fe53c350c6f",
                "deletions": 1,
                "filename": "rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/soap/RetransmissionQueueImpl.java",
                "patch": "@@ -49,6 +49,7 @@\n import org.apache.cxf.service.model.EndpointInfo;\n import org.apache.cxf.transport.Conduit;\n import org.apache.cxf.transport.MessageObserver;\n+import org.apache.cxf.workqueue.SynchronousExecutor;\n import org.apache.cxf.ws.addressing.AddressingProperties;\n import org.apache.cxf.ws.addressing.AttributedURIType;\n import org.apache.cxf.ws.addressing.EndpointReferenceType;\n@@ -527,7 +528,11 @@ protected void initiate(boolean requestAcknowledge) {\n             Executor executor = ep.getExecutor();\n             if (null == executor) {\n                 executor = ep.getService().getExecutor();\n-                LOG.log(Level.FINE, \"Using service executor {0}\", executor.getClass().getName());\n+                if (executor == null) {\n+                    executor = SynchronousExecutor.getInstance();\n+                } else {\n+                    LOG.log(Level.FINE, \"Using service executor {0}\", executor.getClass().getName());\n+                }\n             } else {\n                 LOG.log(Level.FINE, \"Using endpoint executor {0}\", executor.getClass().getName());\n             }",
                "raw_url": "https://github.com/apache/cxf/raw/8d0fefa3990b902776741e631fdb1fe53c350c6f/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/soap/RetransmissionQueueImpl.java",
                "sha": "42601cafa2a7e2d5572ef1384c625248d68f528c",
                "status": "modified"
            }
        ],
        "message": "[CXF-4312] Similar issue on the server side about having an executor set\nby default.   Not needed if the rest of the code guards against NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1337293 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/eb8928278f16bc9ae4384ef6b2b03befab62e92c",
        "patched_files": [
            "RetransmissionQueueImpl.java",
            "ServiceInvokerInterceptor.java",
            "Proxy.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "RetransmissionQueueImplTest.java",
            "ServiceInvokerInterceptorTest.java",
            "ProxyTest.java"
        ]
    },
    "cxf_8f12a15": {
        "bug_id": "cxf_8f12a15",
        "commit": "https://github.com/apache/cxf/commit/8f12a150b8902c59a96d7cde90ac833628aa0dd8",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/8f12a150b8902c59a96d7cde90ac833628aa0dd8/core/src/main/java/org/apache/cxf/endpoint/ClientImpl.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/endpoint/ClientImpl.java?ref=8f12a150b8902c59a96d7cde90ac833628aa0dd8",
                "deletions": 3,
                "filename": "core/src/main/java/org/apache/cxf/endpoint/ClientImpl.java",
                "patch": "@@ -325,7 +325,9 @@ public void setThreadLocalRequestContext(boolean b) {\n         try {\n             return invoke(oi, params, context, exchange);\n         } finally {\n-            responseContext.put(Thread.currentThread(), resp);\n+            if (responseContext != null) {\n+                responseContext.put(Thread.currentThread(), resp);\n+            }\n         }\n     }\n     public Object[] invoke(BindingOperationInfo oi,\n@@ -336,7 +338,7 @@ public void setThreadLocalRequestContext(boolean b) {\n         } finally {\n             if (context != null) {\n                 Map<String, Object> resp = CastUtils.cast((Map<?, ?>)context.get(RESPONSE_CONTEXT));\n-                if (resp != null) {\n+                if (resp != null && responseContext != null) {\n                     responseContext.put(Thread.currentThread(), resp);\n                 }\n             }\n@@ -811,7 +813,7 @@ public void onMessage(Message message) {\n                                                                 .getOutMessage()\n                                                                 .get(Message.INVOCATION_CONTEXT));\n                 resCtx = CastUtils.cast((Map<?, ?>)resCtx.get(RESPONSE_CONTEXT));\n-                if (resCtx != null) {\n+                if (resCtx != null && responseContext != null) {\n                     responseContext.put(Thread.currentThread(), resCtx);\n                 }\n                 try {",
                "raw_url": "https://github.com/apache/cxf/raw/8f12a150b8902c59a96d7cde90ac833628aa0dd8/core/src/main/java/org/apache/cxf/endpoint/ClientImpl.java",
                "sha": "775170cfcad6ae530fa9ce995613865948357da2",
                "status": "modified"
            }
        ],
        "message": "[CXF-6092] Add a couple NPE guards",
        "parent": "https://github.com/apache/cxf/commit/7845fa85e7640bad0e7bd42d1a2ac77873def0ac",
        "patched_files": [
            "ClientImpl.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "ClientImplTest.java"
        ]
    },
    "cxf_916e9d3": {
        "bug_id": "cxf_916e9d3",
        "commit": "https://github.com/apache/cxf/commit/916e9d345fcec4211c57b0955b51020b6dc2376b",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/916e9d345fcec4211c57b0955b51020b6dc2376b/tools/common/src/main/java/org/apache/cxf/tools/common/ToolContext.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/common/src/main/java/org/apache/cxf/tools/common/ToolContext.java?ref=916e9d345fcec4211c57b0955b51020b6dc2376b",
                "deletions": 0,
                "filename": "tools/common/src/main/java/org/apache/cxf/tools/common/ToolContext.java",
                "patch": "@@ -200,6 +200,9 @@ public String getPackageName() {\n     }\n \n     public String mapPackageName(String ns) {\n+        if (ns == null) {\n+            ns = \"\";\n+        }\n         if (hasNamespace(ns)) {\n             return mapNamespaceToPackageName(ns);\n         } else {",
                "raw_url": "https://github.com/apache/cxf/raw/916e9d345fcec4211c57b0955b51020b6dc2376b/tools/common/src/main/java/org/apache/cxf/tools/common/ToolContext.java",
                "sha": "406816dc068010b053905772ca086dc6148def59",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/916e9d345fcec4211c57b0955b51020b6dc2376b/tools/common/src/main/java/org/apache/cxf/tools/util/URIParserUtil.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/common/src/main/java/org/apache/cxf/tools/util/URIParserUtil.java?ref=916e9d345fcec4211c57b0955b51020b6dc2376b",
                "deletions": 1,
                "filename": "tools/common/src/main/java/org/apache/cxf/tools/util/URIParserUtil.java",
                "patch": "@@ -90,7 +90,7 @@ public static String getPackageName(String nameSpaceURI) {\n \n         List<String> tokens = tokenize(nameSpaceURI, \"/: \");\n         if (tokens.size() == 0) {\n-            return null;\n+            return \"cxf\"; \n         }\n \n         if (tokens.size() > 1) {",
                "raw_url": "https://github.com/apache/cxf/raw/916e9d345fcec4211c57b0955b51020b6dc2376b/tools/common/src/main/java/org/apache/cxf/tools/util/URIParserUtil.java",
                "sha": "927c06824c3da0255f15bd25c0f113252264a44d",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/916e9d345fcec4211c57b0955b51020b6dc2376b/tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBDataBinding.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBDataBinding.java?ref=916e9d345fcec4211c57b0955b51020b6dc2376b",
                "deletions": 1,
                "filename": "tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBDataBinding.java",
                "patch": "@@ -481,7 +481,7 @@ private boolean addedToClassCollector(String packageName) {\n         Collection<String> files = classCollector.getGeneratedFileInfo();\n         for (String file : files) {\n             int dotIndex = file.lastIndexOf(\".\");\n-            String sub = dotIndex == -1 ? \"\" : file.substring(0, dotIndex - 1);\n+            String sub = dotIndex <= 0 ? \"\" : file.substring(0, dotIndex - 1);\n             if (sub.equals(packageName)) {\n                 return true;\n             }",
                "raw_url": "https://github.com/apache/cxf/raw/916e9d345fcec4211c57b0955b51020b6dc2376b/tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBDataBinding.java",
                "sha": "f9a377ea86e8a917eecd78e76fbe6fdf3ff480fb",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/916e9d345fcec4211c57b0955b51020b6dc2376b/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/processor/internal/mapper/InterfaceMapper.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/processor/internal/mapper/InterfaceMapper.java?ref=916e9d345fcec4211c57b0955b51020b6dc2376b",
                "deletions": 0,
                "filename": "tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/processor/internal/mapper/InterfaceMapper.java",
                "patch": "@@ -36,6 +36,7 @@ public InterfaceMapper(ToolContext c) {\n     public JavaInterface map(InterfaceInfo interfaceInfo) {\n         JavaInterface intf = new JavaInterface();\n         String namespace = interfaceInfo.getName().getNamespaceURI();\n+\n         String packageName = ProcessorUtil.parsePackageName(namespace, context.mapPackageName(namespace));\n         \n         String loc = (String)context.get(ToolConstants.CFG_WSDLLOCATION);",
                "raw_url": "https://github.com/apache/cxf/raw/916e9d345fcec4211c57b0955b51020b6dc2376b/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/processor/internal/mapper/InterfaceMapper.java",
                "sha": "26336737c22b120df15e61ad621a26b12c72805b",
                "status": "modified"
            }
        ],
        "message": "[CXF-2431] If the wsdl doesn't have a targetnamespace defined, at least\ntry to do something and not NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@821216 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/c44bc1059aed6d1649b3db18b90d4495b6025181",
        "patched_files": [
            "JAXBDataBinding.java",
            "InterfaceMapper.java",
            "URIParserUtil.java",
            "ToolContext.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "URIParserUtilTest.java",
            "ToolContextTest.java",
            "InterfaceMapperTest.java",
            "JAXBDataBindingTest.java"
        ]
    },
    "cxf_9192b48": {
        "bug_id": "cxf_9192b48",
        "commit": "https://github.com/apache/cxf/commit/9192b48919f1ff2c07c6e20f8382a1c8b1fd19b7",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/9192b48919f1ff2c07c6e20f8382a1c8b1fd19b7/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBDataBinding.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBDataBinding.java?ref=9192b48919f1ff2c07c6e20f8382a1c8b1fd19b7",
                "deletions": 0,
                "filename": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBDataBinding.java",
                "patch": "@@ -126,6 +126,7 @@ public synchronized Node getNode() {\n                     src.setPublicId(publicId);\n                     Document doc = StaxUtils.read(src);\n                     setNode(doc);\n+                    nd = super.getNode();\n                 } catch (Exception ex) {\n                     throw new RuntimeException(ex);\n                 }",
                "raw_url": "https://github.com/apache/cxf/raw/9192b48919f1ff2c07c6e20f8382a1c8b1fd19b7/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBDataBinding.java",
                "sha": "e81a359f646193dc8233ca2a575ec239c229f8f2",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in some tests with j5\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1332490 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/f8d2b65c5e3eb5444cfce2257e705e092bf7b3b0",
        "patched_files": [
            "JAXBDataBinding.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JAXBDataBindingTest.java"
        ]
    },
    "cxf_9283d10": {
        "bug_id": "cxf_9283d10",
        "commit": "https://github.com/apache/cxf/commit/9283d10adb87d00e68b49444a3d2222469770bf8",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cxf/blob/9283d10adb87d00e68b49444a3d2222469770bf8/rt/transports/http/src/main/java/org/apache/cxf/transport/http/Headers.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/http/Headers.java?ref=9283d10adb87d00e68b49444a3d2222469770bf8",
                "deletions": 2,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/http/Headers.java",
                "patch": "@@ -435,12 +435,18 @@ protected void copyToResponse(HttpServletResponse response) {\n             \n             if (addHeaders || HTTP_HEADERS_SINGLE_VALUE_ONLY.contains(header)) {\n                 for (int i = 0; i < headerList.size(); i++) {\n-                    response.addHeader(header, headerObjectToString(headerList.get(i)));\n+                    Object headerObject = headerList.get(i);\n+                    if (headerObject != null) {\n+                        response.addHeader(header, headerObjectToString(headerObject));\n+                    }\n                 }\n             } else {\n                 StringBuilder sb = new StringBuilder();\n                 for (int i = 0; i < headerList.size(); i++) {\n-                    sb.append(headerObjectToString(headerList.get(i)));\n+                    Object headerObject = headerList.get(i);\n+                    if (headerObject != null) {\n+                        sb.append(headerObjectToString(headerObject));\n+                    }\n                     \n                     if (i + 1 < headerList.size()) {\n                         sb.append(',');",
                "raw_url": "https://github.com/apache/cxf/raw/9283d10adb87d00e68b49444a3d2222469770bf8/rt/transports/http/src/main/java/org/apache/cxf/transport/http/Headers.java",
                "sha": "620deb1b8382d613786ad2dd5c0b3d9ac6503f72",
                "status": "modified"
            }
        ],
        "message": "Adding NPE guards to HTTP Headers utility, thanks to Raman Malisetti",
        "parent": "https://github.com/apache/cxf/commit/0aa08eec65301d329efce12da8e98cf0c3d3112e",
        "patched_files": [
            "Headers.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "HeadersTest.java"
        ]
    },
    "cxf_92a726a": {
        "bug_id": "cxf_92a726a",
        "commit": "https://github.com/apache/cxf/commit/92a726ac642728322f795668708b0d8ea1e70653",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cxf/blob/92a726ac642728322f795668708b0d8ea1e70653/rt/ws/security/src/main/java/org/apache/cxf/ws/security/sts/provider/SecurityTokenServiceProvider.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/security/src/main/java/org/apache/cxf/ws/security/sts/provider/SecurityTokenServiceProvider.java?ref=92a726ac642728322f795668708b0d8ea1e70653",
                "deletions": 2,
                "filename": "rt/ws/security/src/main/java/org/apache/cxf/ws/security/sts/provider/SecurityTokenServiceProvider.java",
                "patch": "@@ -227,10 +227,12 @@ public Source invoke(Source request) {\n         } catch (Exception e) {\n             try {\n                 SOAPFault fault = soapFactory.createFault();\n-                if (e.getMessage() == null) {\n+                if (e.getMessage() != null) {\n+                    fault.setFaultString(e.getMessage());\n+                } else if (e.getCause() != null && e.getCause().getMessage() != null) {\n                     fault.setFaultString(e.getCause().getMessage());\n                 } else {\n-                    fault.setFaultString(e.getMessage());\n+                    fault.setFaultString(\"Internal STS error\");\n                 }\n                 Detail detail = fault.addDetail();\n                 detail = fault.getDetail();",
                "raw_url": "https://github.com/apache/cxf/raw/92a726ac642728322f795668708b0d8ea1e70653/rt/ws/security/src/main/java/org/apache/cxf/ws/security/sts/provider/SecurityTokenServiceProvider.java",
                "sha": "1ad1bd52bc930cabf0bafe0b509b06a0cbc4251a",
                "status": "modified"
            }
        ],
        "message": "Avoiding a NPE in the STS when creating a fault caused by a NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1133899 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/c1eea3f31b047a8e69605e7196b67cd5be101ff6",
        "patched_files": [
            "SecurityTokenServiceProvider.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "SecurityTokenServiceProviderTest.java"
        ]
    },
    "cxf_92ae40b": {
        "bug_id": "cxf_92ae40b",
        "commit": "https://github.com/apache/cxf/commit/92ae40b38620bfe45463d07d728f31f3a1dea4fb",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cxf/blob/92ae40b38620bfe45463d07d728f31f3a1dea4fb/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java?ref=92ae40b38620bfe45463d07d728f31f3a1dea4fb",
                "deletions": 0,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java",
                "patch": "@@ -276,6 +276,12 @@ private void renderStyleSheet(HttpServletRequest request,\n                 transport.getDestinations());\n         Collections.sort(destinations, new Comparator<ServletDestination>() {\n             public int compare(ServletDestination o1, ServletDestination o2) {\n+                if (o1.getEndpointInfo().getInterface() == null) {\n+                    return -1;\n+                }\n+                if (o2.getEndpointInfo().getInterface() == null) {\n+                    return 1;\n+                }\n                 return o1.getEndpointInfo().getInterface().getName()\n                         .getLocalPart().compareTo(\n                                 o2.getEndpointInfo().getInterface().getName()",
                "raw_url": "https://github.com/apache/cxf/raw/92ae40b38620bfe45463d07d728f31f3a1dea4fb/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java",
                "sha": "96673e32f916e5e94aae4787edbe2a722cee2a23",
                "status": "modified"
            }
        ],
        "message": "Fixing NPE caused by JAXRS endpoints\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@763200 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/c338c36cf06ecdf7dbfae62ed253e1366b0b645d",
        "patched_files": [
            "ServletController.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "ServletControllerTest.java"
        ]
    },
    "cxf_9469be2": {
        "bug_id": "cxf_9469be2",
        "commit": "https://github.com/apache/cxf/commit/9469be2decdf115f4fe6b16e0d1465a62da8dc07",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/9469be2decdf115f4fe6b16e0d1465a62da8dc07/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/AsyncResponseImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/AsyncResponseImpl.java?ref=9469be2decdf115f4fe6b16e0d1465a62da8dc07",
                "deletions": 0,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/AsyncResponseImpl.java",
                "patch": "@@ -176,6 +176,8 @@ public void setTimeoutHandler(TimeoutHandler handler) {\n                 extraCallbacks[i] = callbacks[i].newInstance();\n             }\n             return register(callback.newInstance(), extraCallbacks);    \n+        } catch (NullPointerException e) {\n+            throw e;\n         } catch (Throwable t) {\n             return Collections.emptyMap();\n         }",
                "raw_url": "https://github.com/apache/cxf/raw/9469be2decdf115f4fe6b16e0d1465a62da8dc07/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/AsyncResponseImpl.java",
                "sha": "c21e52823fc756019baec30174feb86a2f266990",
                "status": "modified"
            }
        ],
        "message": "[CXF-6388] Rethrowing NPE from AsyncResponseImpl, patch from Iris Ding applied",
        "parent": "https://github.com/apache/cxf/commit/3913cbf504bb863e48ed5fcff25edc06e25f52c0",
        "patched_files": [
            "AsyncResponseImpl.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "AsyncResponseImplTest.java"
        ]
    },
    "cxf_954128c": {
        "bug_id": "cxf_954128c",
        "commit": "https://github.com/apache/cxf/commit/954128c80854bc166fd30cace425e1270265c7e4",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cxf/blob/954128c80854bc166fd30cace425e1270265c7e4/common/common/src/main/java/org/apache/cxf/staxutils/StaxUtils.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/common/common/src/main/java/org/apache/cxf/staxutils/StaxUtils.java?ref=954128c80854bc166fd30cace425e1270265c7e4",
                "deletions": 6,
                "filename": "common/common/src/main/java/org/apache/cxf/staxutils/StaxUtils.java",
                "patch": "@@ -743,15 +743,19 @@ public static Document read(XMLStreamReader reader) throws XMLStreamException {\n     }\n     public static Document read(XMLStreamReader reader, boolean recordLoc) throws XMLStreamException {\n         Document doc = DOMUtils.createDocument();\n-        doc.setDocumentURI(new String(reader.getLocation().getSystemId()));\n+        if (reader.getLocation().getSystemId() != null) {\n+            doc.setDocumentURI(new String(reader.getLocation().getSystemId()));\n+        }\n         readDocElements(doc, doc, reader, true, recordLoc);\n         return doc;\n     }\n     \n     public static Document read(DocumentBuilder builder, XMLStreamReader reader, boolean repairing) \n         throws XMLStreamException {\n         Document doc = builder.newDocument();\n-        doc.setDocumentURI(new String(reader.getLocation().getSystemId()));\n+        if (reader.getLocation().getSystemId() != null) {\n+            doc.setDocumentURI(new String(reader.getLocation().getSystemId()));\n+        }\n         readDocElements(doc, reader, repairing);\n         return doc;\n     }\n@@ -944,16 +948,18 @@ private static void declare(Element node, String uri, String prefix) {\n         node.setAttributeNodeNS(attr);\n     }\n     public static XMLStreamReader createXMLStreamReader(InputSource src) {\n+        String sysId = src.getSystemId() == null ? null : new String(src.getSystemId());\n+        String pubId = src.getPublicId() == null ? null : new String(src.getPublicId());\n         if (src.getByteStream() != null) {\n             if (src.getEncoding() == null) {\n-                StreamSource ss = new StreamSource(src.getByteStream(), src.getSystemId());\n-                ss.setPublicId(src.getPublicId());\n+                StreamSource ss = new StreamSource(src.getByteStream(), sysId);\n+                ss.setPublicId(pubId);\n                 return createXMLStreamReader(ss);\n             }\n             return createXMLStreamReader(src.getByteStream(), src.getEncoding());\n         } else if (src.getCharacterStream() != null) {\n-            StreamSource ss = new StreamSource(src.getCharacterStream(), src.getSystemId());\n-            ss.setPublicId(src.getPublicId());\n+            StreamSource ss = new StreamSource(src.getCharacterStream(), sysId);\n+            ss.setPublicId(pubId);\n             return createXMLStreamReader(ss);\n         }\n         throw new IllegalArgumentException(\"InputSource must have a ByteStream or CharacterStream\");",
                "raw_url": "https://github.com/apache/cxf/raw/954128c80854bc166fd30cace425e1270265c7e4/common/common/src/main/java/org/apache/cxf/staxutils/StaxUtils.java",
                "sha": "71ad706c816a8360224c15f22bd56f26a7f8911a",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/954128c80854bc166fd30cace425e1270265c7e4/rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLManagerImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLManagerImpl.java?ref=954128c80854bc166fd30cace425e1270265c7e4",
                "deletions": 1,
                "filename": "rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLManagerImpl.java",
                "patch": "@@ -222,7 +222,9 @@ private Definition loadDefinition(String url) throws WSDLException {\n         Document doc;\n         try {\n             doc = StaxUtils.read(StaxUtils.createXMLStreamReader(src), true);\n-            doc.setDocumentURI(new String(src.getSystemId()));\n+            if (src.getSystemId() != null) {\n+                doc.setDocumentURI(new String(src.getSystemId()));\n+            }\n         } catch (Exception e) {\n             throw new WSDLException(WSDLException.PARSER_ERROR, e.getMessage(), e);\n         }",
                "raw_url": "https://github.com/apache/cxf/raw/954128c80854bc166fd30cace425e1270265c7e4/rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLManagerImpl.java",
                "sha": "9e548333b6cf2419e59f46a54075fe3b638594a7",
                "status": "modified"
            }
        ],
        "message": "Add some NPE checks\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@835615 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/7ce6c7559e346fb03d83e2a704d0e3e01d5313a5",
        "patched_files": [
            "StaxUtils.java",
            "WSDLManagerImpl.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "StaxUtilsTest.java",
            "WSDLManagerImplTest.java"
        ]
    },
    "cxf_95d6cfc": {
        "bug_id": "cxf_95d6cfc",
        "commit": "https://github.com/apache/cxf/commit/95d6cfcd27d16d37497875125a1a0c6aa276fcd5",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cxf/blob/95d6cfcd27d16d37497875125a1a0c6aa276fcd5/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/Servant.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/Servant.java?ref=95d6cfcd27d16d37497875125a1a0c6aa276fcd5",
                "deletions": 7,
                "filename": "rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/Servant.java",
                "patch": "@@ -214,13 +214,14 @@ public void createSequenceResponse(CreateSequenceResponseType createResponse,\n         Identifier offeredId = reliableEndpoint.getProxy().getOfferedIdentifier();\n         if (null != offeredId) {\n             AcceptType accept = createResponse.getAccept();\n-            assert null != accept;\n-            Destination dest = reliableEndpoint.getDestination();\n-            String address = accept.getAcksTo().getAddress().getValue();\n-            if (!RMUtils.getAddressingConstants().getNoneURI().equals(address)) {\n-                DestinationSequence ds =  new DestinationSequence(offeredId, accept.getAcksTo(), dest,\n-                    protocol);\n-                dest.addSequence(ds);\n+            if (accept != null) {\n+                Destination dest = reliableEndpoint.getDestination();\n+                String address = accept.getAcksTo().getAddress().getValue();\n+                if (!RMUtils.getAddressingConstants().getNoneURI().equals(address)) {\n+                    DestinationSequence ds =  new DestinationSequence(offeredId, accept.getAcksTo(), dest,\n+                                                                      protocol);\n+                    dest.addSequence(ds);\n+                }\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/cxf/raw/95d6cfcd27d16d37497875125a1a0c6aa276fcd5/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/Servant.java",
                "sha": "96d86b3795cf18121af4ceaf76456aaa9959cb2e",
                "status": "modified"
            }
        ],
        "message": "[CXF-5725] Fix NPE when no Accept for Offer",
        "parent": "https://github.com/apache/cxf/commit/021646df45517d2c06680e20da050f8ebe424a26",
        "patched_files": [
            "Servant.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "ServantTest.java"
        ]
    },
    "cxf_96133bc": {
        "bug_id": "cxf_96133bc",
        "commit": "https://github.com/apache/cxf/commit/96133bca4298b740f8fa46830854f7a5329fe8f3",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/96133bca4298b740f8fa46830854f7a5329fe8f3/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java?ref=96133bca4298b740f8fa46830854f7a5329fe8f3",
                "deletions": 3,
                "filename": "rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
                "patch": "@@ -245,7 +245,7 @@ public static JsonWebKeys loadPublicJwkSet(Message m, Properties props) {\n     public static JsonWebKeys loadJwkSet(Message m, Properties props, PrivateKeyPasswordProvider cb) {\n         String key = (String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE);\n         JsonWebKeys jwkSet = null;\n-        if (key != null) {\n+        if (key != null && m != null) {\n             Object jwkSetProp = m.getExchange().get(key);\n             if (jwkSetProp != null && !(jwkSetProp instanceof JsonWebKeys)) {\n                 throw new JwkException(\"Unexpected key store class: \" + jwkSetProp.getClass().getName());\n@@ -254,8 +254,8 @@ public static JsonWebKeys loadJwkSet(Message m, Properties props, PrivateKeyPass\n             }\n         }\n         if (jwkSet == null) {\n-            jwkSet = loadJwkSet(props, m.getExchange().getBus(), cb);\n-            if (key != null) {\n+            jwkSet = loadJwkSet(props, m != null ? m.getExchange().getBus() : null, cb);\n+            if (key != null && m != null) {\n                 m.getExchange().put(key, jwkSet);\n             }\n         }",
                "raw_url": "https://github.com/apache/cxf/raw/96133bca4298b740f8fa46830854f7a5329fe8f3/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
                "sha": "6b7132589625c5e8c4a4c6660641a2da0e97f94b",
                "status": "modified"
            }
        ],
        "message": "[CXF-7721] Adding few NPE guards",
        "parent": "https://github.com/apache/cxf/commit/278d9185150d743ff4b411d070b023e8758d372e",
        "patched_files": [
            "JwkUtils.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JwkUtilsTest.java"
        ]
    },
    "cxf_9726201": {
        "bug_id": "cxf_9726201",
        "commit": "https://github.com/apache/cxf/commit/9726201a36691afaf02dcaf19974b13b1f9efbbb",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/9726201a36691afaf02dcaf19974b13b1f9efbbb/rt/core/src/main/java/org/apache/cxf/wsdl11/Messages.properties",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/main/java/org/apache/cxf/wsdl11/Messages.properties?ref=9726201a36691afaf02dcaf19974b13b1f9efbbb",
                "deletions": 0,
                "filename": "rt/core/src/main/java/org/apache/cxf/wsdl11/Messages.properties",
                "patch": "@@ -30,4 +30,5 @@ FAIL_TO_CREATE_WSDL_DEFINITION = Fail to create wsdl definition from : {0}\\r\\nCa\n MISSING_DESTINATION_FACTORY = Cannot find the destination factory, check the port //wsdl:port[@name=''{0}'']\n MISSING_SERVICE= No definition of service {0} in the WSDL.\n WSDL4J_BAD_ELEMENT_PART= Part {0} defined as element {1} which is not in the schema.\n+PART_NO_NAME_NO_TYPE= Part {0} defined with no element and no type.\n NO_MESSAGE=No {0} message was found for operation {1} and input named {2}.  Check the wsdl for errors.",
                "raw_url": "https://github.com/apache/cxf/raw/9726201a36691afaf02dcaf19974b13b1f9efbbb/rt/core/src/main/java/org/apache/cxf/wsdl11/Messages.properties",
                "sha": "cafcd1f18ddd89dd40733d5ade2ace118b3ac6df",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cxf/blob/9726201a36691afaf02dcaf19974b13b1f9efbbb/rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLServiceBuilder.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLServiceBuilder.java?ref=9726201a36691afaf02dcaf19974b13b1f9efbbb",
                "deletions": 1,
                "filename": "rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLServiceBuilder.java",
                "patch": "@@ -797,7 +797,7 @@ private void buildMessage(AbstractMessageContainer minfo, Message msg) {\n                 pi.setTypeQName(part.getTypeName());\n                 pi.setElement(false);\n                 pi.setXmlSchema(schemas.getTypeByQName(part.getTypeName()));\n-            } else {\n+            } else if (part.getElementName() != null) {\n                 pi.setElementQName(part.getElementName());\n                 XmlSchemaElement schemaElement = schemas.getElementByQName(part.getElementName());\n                 if (null == schemaElement) {\n@@ -810,6 +810,13 @@ private void buildMessage(AbstractMessageContainer minfo, Message msg) {\n                 }\n                 pi.setElement(true);\n                 pi.setXmlSchema(schemaElement);\n+            } else {\n+                org.apache.cxf.common.i18n.Message errorMessage = \n+                    new org.apache.cxf.common.i18n.Message(\"PART_NO_NAME_NO_TYPE\",\n+                                                           LOG,\n+                                                           part.getName());\n+                throw new WSDLRuntimeException(errorMessage);\n+                \n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/cxf/raw/9726201a36691afaf02dcaf19974b13b1f9efbbb/rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLServiceBuilder.java",
                "sha": "8fde3cd1812d6aa1249e61830a341fe14b77f5e5",
                "status": "modified"
            }
        ],
        "message": "Change NPE to Runtime error for part with no content. CXF-2438.\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@816778 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/b105ccd46daf966ef00a76cf9911ad72c7718646",
        "patched_files": [
            "WSDLServiceBuilder.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "WSDLServiceBuilderTest.java"
        ]
    },
    "cxf_98db1cd": {
        "bug_id": "cxf_98db1cd",
        "commit": "https://github.com/apache/cxf/commit/98db1cd54046d06fd4ae7ea66d96d24c9d7a3dee",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/98db1cd54046d06fd4ae7ea66d96d24c9d7a3dee/rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java?ref=98db1cd54046d06fd4ae7ea66d96d24c9d7a3dee",
                "deletions": 1,
                "filename": "rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java",
                "patch": "@@ -377,7 +377,7 @@ public int copyFrom(InputStream in) throws IOException {\n         \n         @Override\n         public void close() throws IOException {\n-            if (!chunking) {\n+            if (!chunking && wrappedStream != null) {\n                 CachedOutputStream out = (CachedOutputStream)wrappedStream;\n                 this.basicEntity.setContentLength(out.size());\n                 wrappedStream = null;",
                "raw_url": "https://github.com/apache/cxf/raw/98db1cd54046d06fd4ae7ea66d96d24c9d7a3dee/rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java",
                "sha": "e555c1ac94983a111128b8756ab4588514780c6d",
                "status": "modified"
            }
        ],
        "message": "Fix NPE on GET requests\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1518297 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/e560cfeee66f238d232e7d7073b6adea991c66fc",
        "patched_files": [
            "AsyncHTTPConduit.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "AsyncHTTPConduitTest.java"
        ]
    },
    "cxf_9976b77": {
        "bug_id": "cxf_9976b77",
        "commit": "https://github.com/apache/cxf/commit/9976b7737d766c931a0143fd4a828205c62be179",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/cxf/blob/9976b7737d766c931a0143fd4a828205c62be179/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/client/AbstractClient.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/client/AbstractClient.java?ref=9976b7737d766c931a0143fd4a828205c62be179",
                "deletions": 9,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/client/AbstractClient.java",
                "patch": "@@ -73,7 +73,7 @@\n  * Common proxy and http-centric client implementation\n  *\n  */\n-public class AbstractClient implements Client, InvocationHandlerAware {\n+public class AbstractClient implements Client {\n     private static final Logger LOG = LogUtils.getL7dLogger(AbstractClient.class);\n     private static final ResourceBundle BUNDLE = BundleUtils.getBundle(AbstractClient.class);\n \n@@ -369,13 +369,20 @@ protected void writeBody(Object o, Message m, Class<?> cls, Type type, Annotatio\n     }\n     \n     @SuppressWarnings(\"unchecked\")\n-    protected Object readBody(Response r, HttpURLConnection conn, Message inMessage, \n-                              Class<?> cls, Type type, Annotation[] anns) {\n+    protected Object readBody(Response r, HttpURLConnection conn, Message inMessage, Class<?> cls, \n+                              Type type, Annotation[] anns) {\n \n+        InputStream inputStream = (InputStream)r.getEntity();\n+        if (inputStream == null) {\n+            return cls == Response.class ? cls : null;\n+        }\n         try {\n             int status = conn.getResponseCode();\n             if (status < 200 || status == 204 || status > 300) {\n-                return null;\n+                Object length = r.getMetadata().getFirst(HttpHeaders.CONTENT_LENGTH);\n+                if (length == null || Integer.parseInt(length.toString()) == 0) {\n+                    return cls == Response.class ? cls : null;\n+                }\n             }\n         } catch (IOException ex) {\n             // won't happen at this stage\n@@ -392,8 +399,7 @@ protected Object readBody(Response r, HttpURLConnection conn, Message inMessage,\n         if (mbr != null) {\n             try {\n                 return mbr.readFrom(cls, type, anns, contentType, \n-                       new MetadataMap<String, Object>(r.getMetadata(), true, true), \n-                       (InputStream)r.getEntity());\n+                       new MetadataMap<String, Object>(r.getMetadata(), true, true), inputStream);\n             } catch (Exception ex) {\n                 throw new WebApplicationException();\n             }\n@@ -569,9 +575,7 @@ public void onMessage(Message m) {\n         \n     }\n \n-    public Object getInvocationHandler() {\n-        return this;\n-    }\n+    \n \n \n }",
                "raw_url": "https://github.com/apache/cxf/raw/9976b7737d766c931a0143fd4a828205c62be179/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/client/AbstractClient.java",
                "sha": "9ce9b3ad0f7917dc52ed126018c978ef10cb79d0",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/9976b7737d766c931a0143fd4a828205c62be179/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/client/ClientProxyImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/client/ClientProxyImpl.java?ref=9976b7737d766c931a0143fd4a828205c62be179",
                "deletions": 1,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/client/ClientProxyImpl.java",
                "patch": "@@ -62,7 +62,7 @@\n  * Proxy-based client implementation\n  *\n  */\n-public class ClientProxyImpl extends AbstractClient implements InvocationHandler {\n+public class ClientProxyImpl extends AbstractClient implements InvocationHandlerAware, InvocationHandler {\n \n     private static final Logger LOG = LogUtils.getL7dLogger(ClientProxyImpl.class);\n     private static final ResourceBundle BUNDLE = BundleUtils.getBundle(ClientProxyImpl.class);\n@@ -407,6 +407,10 @@ protected Object handleResponse(HttpURLConnection connect, Message outMessage, O\n                         method.getGenericReturnType(), method.getDeclaredAnnotations());\n     }\n \n+    public Object getInvocationHandler() {\n+        return this;\n+    }\n+    \n     protected static void reportInvalidResourceMethod(Method m, String name) {\n         org.apache.cxf.common.i18n.Message errorMsg = \n             new org.apache.cxf.common.i18n.Message(name, ",
                "raw_url": "https://github.com/apache/cxf/raw/9976b7737d766c931a0143fd4a828205c62be179/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/client/ClientProxyImpl.java",
                "sha": "afd8f3dc5be4954bcc5d4f99c292ddc0fe730d5b",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cxf/blob/9976b7737d766c931a0143fd4a828205c62be179/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/client/WebClient.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/client/WebClient.java?ref=9976b7737d766c931a0143fd4a828205c62be179",
                "deletions": 0,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/client/WebClient.java",
                "patch": "@@ -36,6 +36,7 @@\n import javax.ws.rs.core.PathSegment;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.Response.ResponseBuilder;\n+import javax.ws.rs.core.UriBuilder;\n \n import org.apache.cxf.Bus;\n import org.apache.cxf.bus.spring.SpringBusFactory;\n@@ -303,6 +304,17 @@ public WebClient path(Object path) {\n         return this;\n     }\n     \n+    /**\n+     * Updates the current URI path with path segment which may contain template variables\n+     * @param path new relative path segment\n+     * @param values template variable values\n+     * @return updated WebClient\n+     */\n+    public WebClient path(String path, Object... values) {\n+        URI u = UriBuilder.fromUri(URI.create(\"http://tempuri\")).path(path).buildFromEncoded(values);\n+        return path(u.getRawPath());\n+    }\n+    \n     /**\n      * Updates the current URI query parameters\n      * @param name query name",
                "raw_url": "https://github.com/apache/cxf/raw/9976b7737d766c931a0143fd4a828205c62be179/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/client/WebClient.java",
                "sha": "568a486cf17a5bf428accbcb1765354276b063c5",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/9976b7737d766c931a0143fd4a828205c62be179/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/HttpHeadersImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/HttpHeadersImpl.java?ref=9976b7737d766c931a0143fd4a828205c62be179",
                "deletions": 1,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/HttpHeadersImpl.java",
                "patch": "@@ -123,7 +123,7 @@ public MediaType getMediaType() {\n \n     private List<String> getListValues(String headerName) {\n         List<String> values = headers.get(headerName);\n-        if (values == null || values.isEmpty()) {\n+        if (values == null || values.isEmpty() || values.get(0) == null) {\n             return Collections.emptyList();\n         }\n         if (HttpUtils.isDateRelatedHeader(headerName)) {",
                "raw_url": "https://github.com/apache/cxf/raw/9976b7737d766c931a0143fd4a828205c62be179/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/HttpHeadersImpl.java",
                "sha": "9b7f95fb1535ec0843bc95355ef4575028cee2a1",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cxf/blob/9976b7737d766c931a0143fd4a828205c62be179/rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/client/WebClientTest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/client/WebClientTest.java?ref=9976b7737d766c931a0143fd4a828205c62be179",
                "deletions": 0,
                "filename": "rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/client/WebClientTest.java",
                "patch": "@@ -133,4 +133,14 @@ public void testBack() {\n         assertEquals(URI.create(\"http://foo\"), wc.getCurrentURI());\n     }\n     \n+    @Test\n+    public void testPathWithTemplates() {\n+        WebClient wc = WebClient.create(URI.create(\"http://foo\"));\n+        assertEquals(URI.create(\"http://foo\"), wc.getBaseURI());\n+        assertEquals(URI.create(\"http://foo\"), wc.getCurrentURI());\n+        \n+        wc.path(\"{bar}/{foo}\", 1, 2);\n+        assertEquals(URI.create(\"http://foo\"), wc.getBaseURI());\n+        assertEquals(URI.create(\"http://foo/1/2\"), wc.getCurrentURI());\n+    }\n }",
                "raw_url": "https://github.com/apache/cxf/raw/9976b7737d766c931a0143fd4a828205c62be179/rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/client/WebClientTest.java",
                "sha": "a693c557cc82d200fab531243627eb4f719df376",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/9976b7737d766c931a0143fd4a828205c62be179/systests/src/test/java/org/apache/cxf/systest/jaxrs/JAXRSSoapBookTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/src/test/java/org/apache/cxf/systest/jaxrs/JAXRSSoapBookTest.java?ref=9976b7737d766c931a0143fd4a828205c62be179",
                "deletions": 2,
                "filename": "systests/src/test/java/org/apache/cxf/systest/jaxrs/JAXRSSoapBookTest.java",
                "patch": "@@ -476,7 +476,7 @@ public void handleMessage(Message message) throws Fault {\n     }\n     \n     @Ignore\n-    private class TestFeature extends AbstractFeature {\n+    public class TestFeature extends AbstractFeature {\n         private TestInterceptor testInterceptor;\n \n         @Override\n@@ -491,7 +491,7 @@ protected boolean handleMessageCalled() {\n     }\n  \n     @Ignore\n-    private class TestInterceptor extends AbstractPhaseInterceptor<Message> {\n+    public class TestInterceptor extends AbstractPhaseInterceptor<Message> {\n         private boolean handleMessageCalled;\n         public TestInterceptor() {\n             this(Phase.PRE_STREAM);",
                "raw_url": "https://github.com/apache/cxf/raw/9976b7737d766c931a0143fd4a828205c62be179/systests/src/test/java/org/apache/cxf/systest/jaxrs/JAXRSSoapBookTest.java",
                "sha": "486ee2956717143ea442b46831e590488901dbb9",
                "status": "modified"
            }
        ],
        "message": "JAX-RS : adding WebClient.path() which can deal with templates, updating AbstractClient.readBody to return null only if Content-Length is 0 or absent, fixing HTTPHeadersImpl NPE issue\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@790868 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/63be5fbdfcfd34e5ef6dbf83e7d64592693ff0d9",
        "patched_files": [
            "ClientProxyImpl.java",
            "WebClient.java",
            "AbstractClient.java",
            "HttpHeadersImpl.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "WebClientTest.java",
            "JAXRSSoapBookTest.java",
            "HttpHeadersImplTest.java"
        ]
    },
    "cxf_9b52e41": {
        "bug_id": "cxf_9b52e41",
        "commit": "https://github.com/apache/cxf/commit/9b52e410b42e45ad240f71080dbd671e18843b38",
        "file": [
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/cxf/blob/9b52e410b42e45ad240f71080dbd671e18843b38/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/tl/ThreadLocalMessageContext.java",
                "changes": 59,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/tl/ThreadLocalMessageContext.java?ref=9b52e410b42e45ad240f71080dbd671e18843b38",
                "deletions": 17,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/tl/ThreadLocalMessageContext.java",
                "patch": "@@ -30,70 +30,95 @@\n import javax.ws.rs.ext.Providers;\n \n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.apache.cxf.jaxrs.ext.MessageContextImpl;\n+import org.apache.cxf.jaxrs.utils.JAXRSUtils;\n+import org.apache.cxf.message.Message;\n \n public class ThreadLocalMessageContext extends AbstractThreadLocalProxy<MessageContext> \n     implements MessageContext {\n \n     public Object get(Object key) {\n-        return get() != null ? get().get(key) : null;\n+        MessageContext mc = getCurrentMessageContext();\n+        return mc != null ? mc.get(key) : null;\n     }\n     \n     public <T> T getContext(Class<T> contextClass) {\n-        return get() != null ? get().getContext(contextClass) : null;\n+        MessageContext mc = getCurrentMessageContext();\n+        return mc != null ? mc.getContext(contextClass) : null;\n     }\n \n     public HttpHeaders getHttpHeaders() {\n-        return get() != null ? get().getHttpHeaders() : null;\n+        MessageContext mc = getCurrentMessageContext();\n+        return mc != null ? mc.getHttpHeaders() : null;\n     }\n \n     public HttpServletRequest getHttpServletRequest() {\n-        return get() != null ? get().getHttpServletRequest() : null;\n+        MessageContext mc = getCurrentMessageContext();\n+        return mc != null ? mc.getHttpServletRequest() : null;\n     }\n \n     public HttpServletResponse getHttpServletResponse() {\n-        return get() != null ? get().getHttpServletResponse() : null;\n+        MessageContext mc = getCurrentMessageContext();\n+        return mc != null ? mc.getHttpServletResponse() : null;\n     }\n \n     public Providers getProviders() {\n-        return get() != null ? get().getProviders() : null;\n+        MessageContext mc = getCurrentMessageContext();\n+        return mc != null ? mc.getProviders() : null;\n     }\n \n     public SecurityContext getSecurityContext() {\n-        return get() != null ? get().getSecurityContext() : null;\n+        MessageContext mc = getCurrentMessageContext();\n+        return mc != null ? mc.getSecurityContext() : null;\n     }\n \n     public ServletConfig getServletConfig() {\n-        return get() != null ? get().getServletConfig() : null;\n+        MessageContext mc = getCurrentMessageContext();\n+        return mc != null ? mc.getServletConfig() : null;\n     }\n \n     public ServletContext getServletContext() {\n-        return get() != null ? get().getServletContext() : null;\n+        MessageContext mc = getCurrentMessageContext();\n+        return mc != null ? mc.getServletContext() : null;\n     }\n \n     public UriInfo getUriInfo() {\n-        return get() != null ? get().getUriInfo() : null;\n+        MessageContext mc = getCurrentMessageContext();\n+        return mc != null ? mc.getUriInfo() : null;\n     }\n \n     public Request getRequest() {\n-        return get() != null ? get().getRequest() : null;\n+        MessageContext mc = getCurrentMessageContext();\n+        return mc != null ? mc.getRequest() : null;\n     }\n \n     public void put(Object key, Object value) {\n-        if (get() != null) {\n-            get().put(key, value);\n+        MessageContext mc = getCurrentMessageContext();\n+        if (mc != null) {\n+            mc.put(key, value);\n         }\n     }\n \n     public <T, E> T getResolver(Class<T> resolverClass, Class<E> resolveClazz) {\n-        return get() != null ? get().getResolver(resolverClass, resolveClazz) : null;\n+        MessageContext mc = getCurrentMessageContext();\n+        return mc != null ? mc.getResolver(resolverClass, resolveClazz) : null;\n     }\n \n     public <T> T getContent(Class<T> format) {\n-        return get() != null ? get().getContent(format) : null;\n+        MessageContext mc = getCurrentMessageContext();\n+        return mc != null ? mc.getContent(format) : null;\n     }\n \n     public Object getContextualProperty(Object key) {\n-        return get() != null ? get().getContextualProperty(key) : null;\n+        MessageContext mc = getCurrentMessageContext();\n+        return mc != null ? mc.getContextualProperty(key) : null;\n+    }\n+    private MessageContext getCurrentMessageContext() {\n+        MessageContext mc = get();\n+        return mc != null ? mc : getMessageContextImpl();\n+    }\n+    private MessageContext getMessageContextImpl() {\n+        Message m = JAXRSUtils.getCurrentMessage();\n+        return m != null ? new MessageContextImpl(m) : null;\n     }\n-\n }",
                "raw_url": "https://github.com/apache/cxf/raw/9b52e410b42e45ad240f71080dbd671e18843b38/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/tl/ThreadLocalMessageContext.java",
                "sha": "bd926fd3df94a08b47740040d3a2dad1c31628ff",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/cxf/blob/9b52e410b42e45ad240f71080dbd671e18843b38/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/tl/ThreadLocalProviders.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/tl/ThreadLocalProviders.java?ref=9b52e410b42e45ad240f71080dbd671e18843b38",
                "deletions": 4,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/tl/ThreadLocalProviders.java",
                "patch": "@@ -29,29 +29,45 @@\n import javax.ws.rs.ext.MessageBodyWriter;\n import javax.ws.rs.ext.Providers;\n \n+import org.apache.cxf.jaxrs.impl.ProvidersImpl;\n+import org.apache.cxf.jaxrs.utils.JAXRSUtils;\n+import org.apache.cxf.message.Message;\n+\n public class ThreadLocalProviders extends AbstractThreadLocalProxy<Providers>\n        implements Providers {\n \n     public <T> MessageBodyReader<T> getMessageBodyReader(Class<T> type, \n                                                          Type genericType, \n                                                          Annotation[] annotations,\n                                                          MediaType mediaType) {\n-        return get().getMessageBodyReader(type, genericType, annotations, mediaType);\n+        Providers p = getCurrentProviders();\n+        return p != null ? p.getMessageBodyReader(type, genericType, annotations, mediaType) : null;\n     }\n \n     public <T> MessageBodyWriter<T> getMessageBodyWriter(Class<T> type, \n                                                          Type genericType, \n                                                          Annotation[] annotations,\n                                                          MediaType mediaType) {\n-        return get().getMessageBodyWriter(type, genericType, annotations, mediaType);\n+        Providers p = getCurrentProviders();\n+        return p != null ? p.getMessageBodyWriter(type, genericType, annotations, mediaType) : null;\n     }\n \n     public <T> ContextResolver<T> getContextResolver(Class<T> contextType, MediaType mediaType) {\n-        return get().getContextResolver(contextType, mediaType);\n+        Providers p = getCurrentProviders();\n+        return p != null ? p.getContextResolver(contextType, mediaType) : null;\n     }\n \n     public <T extends Throwable> ExceptionMapper<T> getExceptionMapper(Class<T> type) {\n-        return get().getExceptionMapper(type);\n+        Providers p = getCurrentProviders();\n+        return p != null ? p.getExceptionMapper(type) : null;\n     }\n \n+    private Providers getCurrentProviders() {\n+        Providers p = get();\n+        return p != null ? p : getProvidersImpl();\n+    }\n+    private Providers getProvidersImpl() {\n+        Message m = JAXRSUtils.getCurrentMessage();\n+        return m != null ? new ProvidersImpl(JAXRSUtils.getContextMessage(m)) : null;\n+    }\n }",
                "raw_url": "https://github.com/apache/cxf/raw/9b52e410b42e45ad240f71080dbd671e18843b38/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/tl/ThreadLocalProviders.java",
                "sha": "bf195852795fa175a1405331b726d22075011b7a",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cxf/blob/9b52e410b42e45ad240f71080dbd671e18843b38/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java?ref=9b52e410b42e45ad240f71080dbd671e18843b38",
                "deletions": 2,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java",
                "patch": "@@ -1062,12 +1062,18 @@ public static Object createBeanParamValue(Message m, Class<?> clazz, OperationRe\n         return instance;\n     }\n     \n-    public static <T> T createContextValue(Message m, Type genericType, Class<T> clazz) {\n- \n+    public static Message getContextMessage(Message m) {\n+        \n         Message contextMessage = m.getExchange() != null ? m.getExchange().getInMessage() : m;\n         if (contextMessage == null && !PropertyUtils.isTrue(m.get(Message.INBOUND_MESSAGE))) {\n             contextMessage = m;\n         }\n+        return contextMessage;\n+    }\n+    \n+    public static <T> T createContextValue(Message m, Type genericType, Class<T> clazz) {\n+ \n+        Message contextMessage = getContextMessage(m);\n         Object o = null;\n         if (UriInfo.class.isAssignableFrom(clazz)) {\n             o = createUriInfo(contextMessage);",
                "raw_url": "https://github.com/apache/cxf/raw/9b52e410b42e45ad240f71080dbd671e18843b38/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java",
                "sha": "d4d64cd079de9b482f385c2b3fbf0be8e048e411",
                "status": "modified"
            }
        ],
        "message": "[CXF-6593] Protecting against NPE if TL contexts are refreshed",
        "parent": "https://github.com/apache/cxf/commit/c9ec28df42e815b0771964fdae96b7ecb2e2281b",
        "patched_files": [
            "JAXRSUtils.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JAXRSUtilsTest.java"
        ]
    },
    "cxf_9c52875": {
        "bug_id": "cxf_9c52875",
        "commit": "https://github.com/apache/cxf/commit/9c52875306e5c844955df424895374614191effa",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/9c52875306e5c844955df424895374614191effa/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/DefaultSubjectProvider.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/DefaultSubjectProvider.java?ref=9c52875306e5c844955df424895374614191effa",
                "deletions": 0,
                "filename": "services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/DefaultSubjectProvider.java",
                "patch": "@@ -110,6 +110,11 @@ public SubjectBean getSubject(\n             principal = providerParameters.getPrincipal();\n         }\n         \n+        if (principal == null) {\n+            LOG.fine(\"Error in getting principal\");\n+            throw new STSException(\"Error in getting principal\", STSException.REQUEST_FAILED);\n+        }\n+        \n         SubjectBean subjectBean = \n             new SubjectBean(principal.getName(), subjectNameQualifier, confirmationMethod);\n         LOG.fine(\"Creating new subject with principal name: \" + principal.getName());",
                "raw_url": "https://github.com/apache/cxf/raw/9c52875306e5c844955df424895374614191effa/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/DefaultSubjectProvider.java",
                "sha": "b874d79eba9b6a01b385d5ca4df2d2a6814b5858",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cxf/blob/9c52875306e5c844955df424895374614191effa/services/sts/sts-war/pom.xml",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/services/sts/sts-war/pom.xml?ref=9c52875306e5c844955df424895374614191effa",
                "deletions": 2,
                "filename": "services/sts/sts-war/pom.xml",
                "patch": "@@ -1,5 +1,5 @@\n <!--\n-  Licensed to the Apache Software Foundation (ASF) under one\n+  Licensed to the Apache Soft Foundation (ASF) under one\n   or more contributor license agreements. See the NOTICE file\n   distributed with this work for additional information\n   regarding copyright ownership. The ASF licenses this file\n@@ -10,7 +10,7 @@\n   http://www.apache.org/licenses/LICENSE-2.0\n  \n   Unless required by applicable law or agreed to in writing,\n-  software distributed under the License is distributed on an\n+  softwwareare distributed under the License is distributed on an\n   \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n   KIND, either express or implied. See the License for the\n   specific language governing permissions and limitations\n@@ -72,6 +72,10 @@\n            <artifactId>hazelcast</artifactId>\n            <version>${cxf.hazelcast.version}</version>\n         </dependency> \n+        <dependency>\n+           <groupId>org.springframework</groupId>\n+           <artifactId>spring-web</artifactId>\n+        </dependency> \n \n     </dependencies>\n ",
                "raw_url": "https://github.com/apache/cxf/raw/9c52875306e5c844955df424895374614191effa/services/sts/sts-war/pom.xml",
                "sha": "4b6ed6e61583e7316fe372edd4b90a0d038bf69d",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/9c52875306e5c844955df424895374614191effa/services/sts/sts-war/src/main/webapp/WEB-INF/cxf-transport.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/services/sts/sts-war/src/main/webapp/WEB-INF/cxf-transport.xml?ref=9c52875306e5c844955df424895374614191effa",
                "deletions": 0,
                "filename": "services/sts/sts-war/src/main/webapp/WEB-INF/cxf-transport.xml",
                "patch": "@@ -47,6 +47,7 @@\n \n \t<bean id=\"transportIssueDelegate\" class=\"org.apache.cxf.sts.operation.TokenIssueOperation\">\n \t\t<property name=\"tokenProviders\" ref=\"transportTokenProviders\" />\n+\t\t<property name=\"tokenValidators\" ref=\"transportTokenValidators\" />\n \t\t<property name=\"services\" ref=\"transportService\" />\n \t\t<property name=\"stsProperties\" ref=\"transportSTSProperties\" />\n \t</bean>",
                "raw_url": "https://github.com/apache/cxf/raw/9c52875306e5c844955df424895374614191effa/services/sts/sts-war/src/main/webapp/WEB-INF/cxf-transport.xml",
                "sha": "a478e97a380d2cb7883bf55d4497adadc921fc30",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/cxf/blob/9c52875306e5c844955df424895374614191effa/services/sts/systests/basic/src/test/java/org/apache/cxf/systest/sts/username_onbehalfof/UsernameOnBehalfOfTest.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/services/sts/systests/basic/src/test/java/org/apache/cxf/systest/sts/username_onbehalfof/UsernameOnBehalfOfTest.java?ref=9c52875306e5c844955df424895374614191effa",
                "deletions": 4,
                "filename": "services/sts/systests/basic/src/test/java/org/apache/cxf/systest/sts/username_onbehalfof/UsernameOnBehalfOfTest.java",
                "patch": "@@ -84,6 +84,10 @@ public static void cleanup() {\n \n     @org.junit.Test\n     public void testUsernameOnBehalfOf() throws Exception {\n+        // Only run these tests for the standalone scenario.\n+        if (!standalone) {\n+            return;\n+        }\n \n         SpringBusFactory bf = new SpringBusFactory();\n         URL busFile = UsernameOnBehalfOfTest.class.getResource(\"cxf-client.xml\");\n@@ -131,7 +135,11 @@ public void testUsernameOnBehalfOf() throws Exception {\n      */\n     @org.junit.Test\n     public void testUsernameOnBehalfOfCaching() throws Exception {\n-\n+        // Only run these tests for the standalone scenario.\n+        if (!standalone) {\n+            return;\n+        }\n+        \n         SpringBusFactory bf = new SpringBusFactory();\n         URL busFile = UsernameOnBehalfOfTest.class.getResource(\"cxf-client.xml\");\n \n@@ -220,7 +228,11 @@ public void testUsernameOnBehalfOfCaching() throws Exception {\n      */\n     @org.junit.Test\n     public void testDifferentUsersCaching() throws Exception {\n-\n+        // Only run these tests for the standalone scenario.\n+        if (!standalone) {\n+            return;\n+        }\n+        \n         SpringBusFactory bf = new SpringBusFactory();\n         URL busFile = UsernameOnBehalfOfTest.class.getResource(\"cxf-client.xml\");\n \n@@ -310,7 +322,11 @@ public void testDifferentUsersCaching() throws Exception {\n      */\n     @org.junit.Test\n     public void testAppliesToCaching() throws Exception {\n-\n+        // Only run these tests for the standalone scenario.\n+        if (!standalone) {\n+            return;\n+        }\n+        \n         SpringBusFactory bf = new SpringBusFactory();\n         URL busFile = UsernameOnBehalfOfTest.class.getResource(\"cxf-client.xml\");\n \n@@ -401,7 +417,11 @@ public void testAppliesToCaching() throws Exception {\n      */\n     @org.junit.Test\n     public void testNoAppliesToCaching() throws Exception {\n-\n+        // Only run these tests for the standalone scenario.\n+        if (!standalone) {\n+            return;\n+        }\n+        \n         SpringBusFactory bf = new SpringBusFactory();\n         URL busFile = UsernameOnBehalfOfTest.class.getResource(\"cxf-client.xml\");\n ",
                "raw_url": "https://github.com/apache/cxf/raw/9c52875306e5c844955df424895374614191effa/services/sts/systests/basic/src/test/java/org/apache/cxf/systest/sts/username_onbehalfof/UsernameOnBehalfOfTest.java",
                "sha": "b83229a3fc37e06c5bfc24deb7571fe96cd6e39a",
                "status": "modified"
            }
        ],
        "message": "Fixed sts-war systests + added a NPE guard in the sts-core\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1325714 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/a7d1cadf7ab3e87e0e25e799bb546ce3a79ddfce",
        "patched_files": [
            "cxf-transport.java",
            "pom.java",
            "DefaultSubjectProvider.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "UsernameOnBehalfOfTest.java"
        ]
    },
    "cxf_9c5b14d": {
        "bug_id": "cxf_9c5b14d",
        "commit": "https://github.com/apache/cxf/commit/9c5b14dbc284cfccc3fa590fb729d9f11c91bc16",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cxf/blob/9c5b14dbc284cfccc3fa590fb729d9f11c91bc16/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/client/OAuthClientUtils.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/client/OAuthClientUtils.java?ref=9c5b14dbc284cfccc3fa590fb729d9f11c91bc16",
                "deletions": 0,
                "filename": "rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/client/OAuthClientUtils.java",
                "patch": "@@ -275,6 +275,10 @@ public static ClientAccessToken getAccessToken(WebClient accessTokenService,\n                                                    boolean setAuthorizationHeader) \n         throws OAuthServiceException {    \n         \n+        if (accessTokenService == null) {\n+            throw new OAuthServiceException(OAuthConstants.SERVER_ERROR);\n+        }\n+        \n         Form form = new Form(grant.toMap());\n         if (extraParams != null) {\n             for (Map.Entry<String, String> entry : extraParams.entrySet()) {",
                "raw_url": "https://github.com/apache/cxf/raw/9c5b14dbc284cfccc3fa590fb729d9f11c91bc16/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/client/OAuthClientUtils.java",
                "sha": "3f42117d317e3647d8811e0e3118b57250b1f6b4",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/9c5b14dbc284cfccc3fa590fb729d9f11c91bc16/rt/rs/security/sso/oidc/src/main/java/org/apache/cxf/rs/security/oidc/rp/OidcClientCodeRequestFilter.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/security/sso/oidc/src/main/java/org/apache/cxf/rs/security/oidc/rp/OidcClientCodeRequestFilter.java?ref=9c5b14dbc284cfccc3fa590fb729d9f11c91bc16",
                "deletions": 0,
                "filename": "rt/rs/security/sso/oidc/src/main/java/org/apache/cxf/rs/security/oidc/rp/OidcClientCodeRequestFilter.java",
                "patch": "@@ -72,6 +72,9 @@ protected ClientTokenContext createTokenContext(ContainerRequestContext rc,\n         }\n         OidcClientTokenContextImpl ctx = new OidcClientTokenContextImpl();\n         if (at != null) {\n+            if (idTokenReader == null) {\n+                throw new OAuthServiceException(OAuthConstants.SERVER_ERROR);\n+            }\n             IdToken idToken = idTokenReader.getIdToken(at, \n                                   requestParams.getFirst(OAuthConstants.AUTHORIZATION_CODE_VALUE),\n                                   getConsumer());",
                "raw_url": "https://github.com/apache/cxf/raw/9c5b14dbc284cfccc3fa590fb729d9f11c91bc16/rt/rs/security/sso/oidc/src/main/java/org/apache/cxf/rs/security/oidc/rp/OidcClientCodeRequestFilter.java",
                "sha": "015be15cbe86780a32fede207ccc1b88f10d78f2",
                "status": "modified"
            }
        ],
        "message": "Some NPE fixes",
        "parent": "https://github.com/apache/cxf/commit/9b130539041164a95bd70cb5711473c0417fadaa",
        "patched_files": [
            "OAuthClientUtils.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "OAuthClientUtilsTest.java"
        ]
    },
    "cxf_9e6b5d9": {
        "bug_id": "cxf_9e6b5d9",
        "commit": "https://github.com/apache/cxf/commit/9e6b5d97cf2180a4f5694ba84866d0fe878f0479",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cxf/blob/9e6b5d97cf2180a4f5694ba84866d0fe878f0479/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/JPAOAuthDataProvider.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/JPAOAuthDataProvider.java?ref=9e6b5d97cf2180a4f5694ba84866d0fe878f0479",
                "deletions": 6,
                "filename": "rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/JPAOAuthDataProvider.java",
                "patch": "@@ -263,12 +263,14 @@ public Void execute(EntityManager em) {\n                 }\n                 serverToken.setScopes(perms);\n \n-                UserSubject sub = em.find(UserSubject.class, serverToken.getSubject().getLogin());\n-                if (sub == null) {\n-                    em.persist(serverToken.getSubject());\n-                } else {\n-                    sub = em.merge(serverToken.getSubject());\n-                    serverToken.setSubject(sub);\n+                if (serverToken.getSubject() != null) {\n+                    UserSubject sub = em.find(UserSubject.class, serverToken.getSubject().getLogin());\n+                    if (sub == null) {\n+                        em.persist(serverToken.getSubject());\n+                    } else {\n+                        sub = serverToken.getSubject();\n+                        serverToken.setSubject(sub);\n+                    }\n                 }\n                 // ensure we have a managed association\n                 // (needed for OpenJPA : InvalidStateException: Encountered unmanaged object)",
                "raw_url": "https://github.com/apache/cxf/raw/9e6b5d97cf2180a4f5694ba84866d0fe878f0479/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/JPAOAuthDataProvider.java",
                "sha": "859e2b1deeb28a647d27200fc90c3934d8288db1",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/cxf/blob/9e6b5d97cf2180a4f5694ba84866d0fe878f0479/rt/rs/security/oauth-parent/oauth2/src/test/java/org/apache/cxf/rs/security/oauth2/provider/JPAOAuthDataProviderTest.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/security/oauth-parent/oauth2/src/test/java/org/apache/cxf/rs/security/oauth2/provider/JPAOAuthDataProviderTest.java?ref=9e6b5d97cf2180a4f5694ba84866d0fe878f0479",
                "deletions": 0,
                "filename": "rt/rs/security/oauth-parent/oauth2/src/test/java/org/apache/cxf/rs/security/oauth2/provider/JPAOAuthDataProviderTest.java",
                "patch": "@@ -176,6 +176,27 @@ public void testAddGetDeleteAccessToken2() {\n         assertEquals(0, tokens.size());\n     }\n \n+    @Test\n+    public void testAddGetDeleteAccessTokenWithNullSubject() {\n+        Client c = addClient(\"102\", \"bob\");\n+\n+        AccessTokenRegistration atr = new AccessTokenRegistration();\n+        atr.setClient(c);\n+        atr.setApprovedScope(Collections.singletonList(\"a\"));\n+        atr.setSubject(null);\n+\n+        getProvider().createAccessToken(atr);\n+        List<ServerAccessToken> tokens = getProvider().getAccessTokens(c, null);\n+        assertNotNull(tokens);\n+        assertEquals(1, tokens.size());\n+\n+        getProvider().removeClient(c.getClientId());\n+\n+        tokens = getProvider().getAccessTokens(c, null);\n+        assertNotNull(tokens);\n+        assertEquals(0, tokens.size());\n+    }\n+\n     @Test\n     public void testAddGetDeleteRefreshToken() {\n         Client c = addClient(\"101\", \"bob\");",
                "raw_url": "https://github.com/apache/cxf/raw/9e6b5d97cf2180a4f5694ba84866d0fe878f0479/rt/rs/security/oauth-parent/oauth2/src/test/java/org/apache/cxf/rs/security/oauth2/provider/JPAOAuthDataProviderTest.java",
                "sha": "25da9e26b91944ea368d4ad5ea17a40c724a0b1f",
                "status": "modified"
            }
        ],
        "message": "CXF-7264: NPE on OAuth RO/CC flows using JPA",
        "parent": "https://github.com/apache/cxf/commit/cd782fef123d2147a6f5cb04fb6cdfe8cf0ac81a",
        "patched_files": [
            "JPAOAuthDataProvider.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JPAOAuthDataProviderTest.java"
        ]
    },
    "cxf_9ef9bc3": {
        "bug_id": "cxf_9ef9bc3",
        "commit": "https://github.com/apache/cxf/commit/9ef9bc3fdc96ab9b22a3c890cae2d120acb8dbb6",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cxf/blob/9ef9bc3fdc96ab9b22a3c890cae2d120acb8dbb6/tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBDataBinding.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBDataBinding.java?ref=9ef9bc3fdc96ab9b22a3c890cae2d120acb8dbb6",
                "deletions": 6,
                "filename": "tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBDataBinding.java",
                "patch": "@@ -984,14 +984,18 @@ public LSInput resolveResource(String type,\n                                            String systemId,\n                                            String baseURI) {\n                 String s = JAXBDataBinding.mapSchemaLocation(systemId, baseURI, catalog);\n-                //System.out.println(namespaceURI + \" \" + systemId + \" \" + baseURI + \" \" + s);\n+                LOG.fine(\"validating: \" + namespaceURI + \" \" + systemId + \" \" + baseURI + \" \" + s);\n                 if (s == null) {\n                     XmlSchema sc = schemaCollection.getSchemaByTargetNamespace(namespaceURI);\n-                    StringWriter writer = new StringWriter();\n-                    sc.write(writer);\n-                    InputSource src = new InputSource(new StringReader(writer.toString()));\n-                    src.setSystemId(sc.getSourceURI());\n-                    return new LSInputSAXWrapper(src);\n+                    if (sc != null) {\n+                        StringWriter writer = new StringWriter();\n+                        sc.write(writer);\n+                        InputSource src = new InputSource(new StringReader(writer.toString()));\n+                        src.setSystemId(sc.getSourceURI());\n+                        return new LSInputSAXWrapper(src);\n+                    } else {\n+                        throw new ToolException(\"Schema not found for namespace: \" + namespaceURI);\n+                    }\n                 }\n                 return new LSInputSAXWrapper(new InputSource(s));\n             }",
                "raw_url": "https://github.com/apache/cxf/raw/9ef9bc3fdc96ab9b22a3c890cae2d120acb8dbb6/tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBDataBinding.java",
                "sha": "7e57dc60c5b7c1932581c4a5834aca01d4560396",
                "status": "modified"
            }
        ],
        "message": "[CXF-7454] fixed NullPointerException during wsdl validation",
        "parent": "https://github.com/apache/cxf/commit/a7126b66417fd51cbe42f850a5cf8abd6b7e9e02",
        "patched_files": [
            "JAXBDataBinding.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JAXBDataBindingTest.java"
        ]
    },
    "cxf_a027a3c": {
        "bug_id": "cxf_a027a3c",
        "commit": "https://github.com/apache/cxf/commit/a027a3c87b4eda59c04b8580eaf80332c8d553d3",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cxf/blob/a027a3c87b4eda59c04b8580eaf80332c8d553d3/systests/src/test/java/org/apache/cxf/systest/jaxrs/JAXRSSoapBookTest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/src/test/java/org/apache/cxf/systest/jaxrs/JAXRSSoapBookTest.java?ref=a027a3c87b4eda59c04b8580eaf80332c8d553d3",
                "deletions": 3,
                "filename": "systests/src/test/java/org/apache/cxf/systest/jaxrs/JAXRSSoapBookTest.java",
                "patch": "@@ -64,15 +64,15 @@ public static void startServers() throws Exception {\n     @Test\n     public void testGetAll() throws Exception {\n         \n-        InputStream in = getRestInputStream(\"http://localhost:9092/test/services/rest2/myRestService\");\n+        InputStream in = getHttpInputStream(\"http://localhost:9092/test/services/rest2/myRestService\");\n         assertEquals(\"0\", getStringFromInputStream(in));\n                 \n     }\n     \n     @Test\n     public void testGetBook123() throws Exception {\n         \n-        InputStream in = getRestInputStream(\"http://localhost:9092/test/services/rest/bookstore/123\");\n+        InputStream in = getHttpInputStream(\"http://localhost:9092/test/services/rest/bookstore/123\");\n         \n         InputStream expected = getClass().getResourceAsStream(\"resources/expected_get_book123.txt\");\n         assertEquals(getStringFromInputStream(expected), getStringFromInputStream(in));\n@@ -331,6 +331,10 @@ public void testGetBookSoap() throws Exception {\n         BookStoreJaxrsJaxws store = service.getBookPort();\n         Book book = store.getBook(new Long(123));\n         assertEquals(\"id is wrong\", book.getId(), 123);\n+        \n+        String listings = \n+            getStringFromInputStream(getHttpInputStream(\"http://localhost:9092/test/services\"));\n+        assertNotNull(listings);\n     }\n \n     private String getStringFromInputStream(InputStream in) throws Exception {        \n@@ -341,7 +345,7 @@ private String getStringFromInputStream(InputStream in) throws Exception {\n         return bos.getOut().toString();        \n     }\n \n-    private InputStream getRestInputStream(String endpointAddress) throws Exception {\n+    private InputStream getHttpInputStream(String endpointAddress) throws Exception {\n         URL url = new URL(endpointAddress);\n         \n         URLConnection connect = url.openConnection();",
                "raw_url": "https://github.com/apache/cxf/raw/a027a3c87b4eda59c04b8580eaf80332c8d553d3/systests/src/test/java/org/apache/cxf/systest/jaxrs/JAXRSSoapBookTest.java",
                "sha": "31862d091bf92f3dc787de573147dd5052cf11dc",
                "status": "modified"
            }
        ],
        "message": "Fixing NPE caused by JAXRS endpoints\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@763246 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/92ae40b38620bfe45463d07d728f31f3a1dea4fb",
        "patched_files": [],
        "repo": "cxf",
        "unit_tests": [
            "JAXRSSoapBookTest.java"
        ]
    },
    "cxf_a49acbd": {
        "bug_id": "cxf_a49acbd",
        "commit": "https://github.com/apache/cxf/commit/a49acbdff65435b2addc0e01fd13040c229516ee",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/a49acbdff65435b2addc0e01fd13040c229516ee/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/DestinationSequence.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/DestinationSequence.java?ref=a49acbdff65435b2addc0e01fd13040c229516ee",
                "deletions": 2,
                "filename": "rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/DestinationSequence.java",
                "patch": "@@ -401,15 +401,15 @@ String getCorrelationID() {\n     void scheduleAcknowledgement(long acknowledgementInterval) {  \n         AcksPolicyType ap = destination.getManager().getDestinationPolicy().getAcksPolicy();\n  \n-        if (acknowledgementInterval > 0 && getMonitor().getMPM() >= ap.getIntraMessageThreshold()) {\n+        if (acknowledgementInterval > 0 && getMonitor().getMPM() >= (ap == null ? 10 : ap.getIntraMessageThreshold())) {\n             LOG.fine(\"Schedule deferred acknowledgment\");\n             scheduleDeferredAcknowledgement(acknowledgementInterval);\n         } else {\n             LOG.fine(\"Schedule immediate acknowledgment\");\n             scheduleImmediateAcknowledgement();\n             \n             destination.getManager().getTimer().schedule(\n-                new ImmediateFallbackAcknowledgment(), ap.getImmediaAcksTimeout());\n+                new ImmediateFallbackAcknowledgment(), ap == null ? 1000L : ap.getImmediaAcksTimeout());\n            \n         }\n     }",
                "raw_url": "https://github.com/apache/cxf/raw/a49acbdff65435b2addc0e01fd13040c229516ee/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/DestinationSequence.java",
                "sha": "103b380c8409749484aad7587aeed49eb8d77c31",
                "status": "modified"
            }
        ],
        "message": "[CXF-4964] NPE is thrown when WS-RM's destination has no ackPolicy configured\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1468436 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/4318942cb10e3454de5d084646a9ee199bad54e6",
        "patched_files": [
            "DestinationSequence.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "DestinationSequenceTest.java"
        ]
    },
    "cxf_a6598ee": {
        "bug_id": "cxf_a6598ee",
        "commit": "https://github.com/apache/cxf/commit/a6598eebe4a8e737efd9ac42424e0589fda8e1c9",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/a6598eebe4a8e737efd9ac42424e0589fda8e1c9/core/src/main/java/org/apache/cxf/service/model/EndpointInfo.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/service/model/EndpointInfo.java?ref=a6598eebe4a8e737efd9ac42424e0589fda8e1c9",
                "deletions": 1,
                "filename": "core/src/main/java/org/apache/cxf/service/model/EndpointInfo.java",
                "patch": "@@ -89,7 +89,7 @@ public void setBinding(BindingInfo b) {\n     }    \n     \n     public String getAddress() {\n-        return (null != address) ? address.getAddress().getValue() : null;\n+        return (null != address && null != address.getAddress()) ? address.getAddress().getValue() : null;\n     }\n     \n     public void setAddress(String addr) {",
                "raw_url": "https://github.com/apache/cxf/raw/a6598eebe4a8e737efd9ac42424e0589fda8e1c9/core/src/main/java/org/apache/cxf/service/model/EndpointInfo.java",
                "sha": "64a0d77e38f5ef3c6bbf4e233ae14daaa1e9eb66",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/a6598eebe4a8e737efd9ac42424e0589fda8e1c9/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/EndpointImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/EndpointImpl.java?ref=a6598eebe4a8e737efd9ac42424e0589fda8e1c9",
                "deletions": 1,
                "filename": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/EndpointImpl.java",
                "patch": "@@ -338,7 +338,7 @@ protected void doPublish(String addr) {\n             serv = getServer(addr);\n             if (addr != null) {            \n                 EndpointInfo endpointInfo = serv.getEndpoint().getEndpointInfo();\n-                if (!endpointInfo.getAddress().contains(addr)) {\n+                if (endpointInfo.getAddress() == null || !endpointInfo.getAddress().contains(addr)) {\n                     endpointInfo.setAddress(addr);\n                 }\n                 if (publishedEndpointUrl != null) {",
                "raw_url": "https://github.com/apache/cxf/raw/a6598eebe4a8e737efd9ac42424e0589fda8e1c9/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/EndpointImpl.java",
                "sha": "793f6ba83e007263bbddeef2d62eb153ce87f7f8",
                "status": "modified"
            }
        ],
        "message": "[CXF-6257] Creating and Endpoint using JAX-WS API, getting the binding and then publishing causes a NullPointerException",
        "parent": "https://github.com/apache/cxf/commit/74aea1227832d3000f2f9fe61d7cc3bcb8a60a79",
        "patched_files": [
            "EndpointImpl.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "TestEndpointImpl.java",
            "EndpointImplTest.java"
        ]
    },
    "cxf_a7b9dca": {
        "bug_id": "cxf_a7b9dca",
        "commit": "https://github.com/apache/cxf/commit/a7b9dca144ca76f4ad62a05310cc298447aa2572",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/a7b9dca144ca76f4ad62a05310cc298447aa2572/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/JCacheOAuthDataProvider.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/JCacheOAuthDataProvider.java?ref=a7b9dca144ca76f4ad62a05310cc298447aa2572",
                "deletions": 1,
                "filename": "rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/JCacheOAuthDataProvider.java",
                "patch": "@@ -186,7 +186,9 @@ protected void saveRefreshToken(RefreshToken refreshToken) {\n     @Override\n     protected void linkRefreshTokenToAccessToken(RefreshToken rt, ServerAccessToken at) {\n         super.linkRefreshTokenToAccessToken(rt,  at);\n-        accessTokenCache.replace(at.getTokenKey(), at);\n+        if (!isStoreJwtTokenKeyOnly()) {\n+            accessTokenCache.replace(at.getTokenKey(), at);\n+        }\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/cxf/raw/a7b9dca144ca76f4ad62a05310cc298447aa2572/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/JCacheOAuthDataProvider.java",
                "sha": "a583e70a5bf5e0ede768c1874038c856bb51bd8f",
                "status": "modified"
            }
        ],
        "message": "CXF-7913 - Fixing another NPE with JCache",
        "parent": "https://github.com/apache/cxf/commit/ad27755270c649ab64f2cec0d3768772ef68fc1f",
        "patched_files": [
            "JCacheOAuthDataProvider.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JCacheOAuthDataProviderTest.java"
        ]
    },
    "cxf_aa6c635": {
        "bug_id": "cxf_aa6c635",
        "commit": "https://github.com/apache/cxf/commit/aa6c635cffccc826f29f7c4a883ac7cb72389109",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/aa6c635cffccc826f29f7c4a883ac7cb72389109/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java?ref=aa6c635cffccc826f29f7c4a883ac7cb72389109",
                "deletions": 0,
                "filename": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "patch": "@@ -302,6 +302,9 @@ private static void writeArrayObject(Marshaller marshaller,\n                                          Object mObj) throws Fault, JAXBException {\n         // Have to handle this ourselves.... which really\n         // sucks.... but what can we do?\n+        if (mObj == null) {\n+            return;\n+        }\n         Object objArray;\n         Class cls = null;\n         if (mObj instanceof List) {",
                "raw_url": "https://github.com/apache/cxf/raw/aa6c635cffccc826f29f7c4a883ac7cb72389109/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "sha": "ac34d369e617851e7a9681dbf9da285527c6be73",
                "status": "modified"
            }
        ],
        "message": "[CXF-2329] Add NPE guard\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@790637 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/619ab527acc1eb240007e287718d3edf6450b9d9",
        "patched_files": [
            "JAXBEncoderDecoder.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JAXBEncoderDecoderTest.java"
        ]
    },
    "cxf_ab7b0a3": {
        "bug_id": "cxf_ab7b0a3",
        "commit": "https://github.com/apache/cxf/commit/ab7b0a3b12090969d543126132bfbbe6a7d75eaa",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/ab7b0a3b12090969d543126132bfbbe6a7d75eaa/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java?ref=ab7b0a3b12090969d543126132bfbbe6a7d75eaa",
                "deletions": 1,
                "filename": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "patch": "@@ -873,7 +873,7 @@ private static XMLStreamReader findExtraNamespaces(XMLStreamReader source) {\n                 String ns[] = (String[])f.get(c);\n                 for (int x = 0; x < ns.length; x += 2) {\n                     if (ns[x] == null) {\n-                        nsMap.put(null, ns[x + 1]);\n+                        nsMap.put(\"\", ns[x + 1]);\n                     } else {\n                         nsMap.put(ns[x], ns[x + 1]);\n                     }",
                "raw_url": "https://github.com/apache/cxf/raw/ab7b0a3b12090969d543126132bfbbe6a7d75eaa/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "sha": "ee39b2ed87926f2fa349fbe3e83ace63763f4b51",
                "status": "modified"
            }
        ],
        "message": "Once again, fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1301201 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/a6d28c13d01c1690e6268784222acdd6b3b3268f",
        "patched_files": [
            "JAXBEncoderDecoder.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JAXBEncoderDecoderTest.java"
        ]
    },
    "cxf_ad336ad": {
        "bug_id": "cxf_ad336ad",
        "commit": "https://github.com/apache/cxf/commit/ad336ad8db4d7c842a6ce8f9ac3253c269c9ef09",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cxf/blob/ad336ad8db4d7c842a6ce8f9ac3253c269c9ef09/tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBDataBinding.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBDataBinding.java?ref=ad336ad8db4d7c842a6ce8f9ac3253c269c9ef09",
                "deletions": 4,
                "filename": "tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBDataBinding.java",
                "patch": "@@ -362,10 +362,12 @@ public String getWrappedElementType(QName wrapperElement, QName item) {\n         Mapping mapping = rawJaxbModelGenCode.get(wrapperElement);\n         if (mapping != null) {\n             List<? extends Property> propList = mapping.getWrapperStyleDrilldown();\n-            for (Property pro : propList) {\n-                if (pro.elementName().getNamespaceURI().equals(item.getNamespaceURI())\n-                    && pro.elementName().getLocalPart().equals(item.getLocalPart())) {\n-                    return pro.type().fullName();\n+            if (propList != null) {\n+                for (Property pro : propList) {\n+                    if (pro.elementName().getNamespaceURI().equals(item.getNamespaceURI())\n+                        && pro.elementName().getLocalPart().equals(item.getLocalPart())) {\n+                        return pro.type().fullName();\n+                    }\n                 }\n             }\n         }",
                "raw_url": "https://github.com/apache/cxf/raw/ad336ad8db4d7c842a6ce8f9ac3253c269c9ef09/tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBDataBinding.java",
                "sha": "1f785e2d3e55c37cb38780265aa0ec9dcfbef3ad",
                "status": "modified"
            }
        ],
        "message": "Add a guard NPE check\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@657922 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/fc5e74356d476b7fc4ff86507544a6aa477a25bb",
        "patched_files": [
            "JAXBDataBinding.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JAXBDataBindingTest.java"
        ]
    },
    "cxf_ad37213": {
        "bug_id": "cxf_ad37213",
        "commit": "https://github.com/apache/cxf/commit/ad37213c3e8dc849ddc6ed7fab0e3eccf1421a8b",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/ad37213c3e8dc849ddc6ed7fab0e3eccf1421a8b/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/soap/RMSoapInterceptor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/soap/RMSoapInterceptor.java?ref=ad37213c3e8dc849ddc6ed7fab0e3eccf1421a8b",
                "deletions": 2,
                "filename": "rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/soap/RMSoapInterceptor.java",
                "patch": "@@ -282,11 +282,11 @@ public void decodeHeaders(SoapMessage message, List<Header> headers, RMPropertie\n                                 wsauri = maps.getNamespaceURI();\n                             }\n                             ProtocolVariation protocol = ProtocolVariation.findVariant(rmUri, wsauri);\n-                            codec = protocol.getCodec();\n-                            if (codec == null) {\n+                            if (protocol == null) {\n                                 LOG.log(Level.WARNING, \"NAMESPACE_ERROR_MSG\", wsauri); \n                                 break;\n                             }\n+                            codec = protocol.getCodec();\n                         }\n                         String localName = elem.getLocalName();\n                         LOG.log(Level.FINE, \"decoding RM header {0}\", localName);",
                "raw_url": "https://github.com/apache/cxf/raw/ad37213c3e8dc849ddc6ed7fab0e3eccf1421a8b/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/soap/RMSoapInterceptor.java",
                "sha": "f510f282469a0b5b230de9a0bb7da7b01d4baf1a",
                "status": "modified"
            },
            {
                "additions": 48,
                "blob_url": "https://github.com/apache/cxf/blob/ad37213c3e8dc849ddc6ed7fab0e3eccf1421a8b/rt/ws/rm/src/test/java/org/apache/cxf/ws/rm/ProtocolVariationTest.java",
                "changes": 48,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/rm/src/test/java/org/apache/cxf/ws/rm/ProtocolVariationTest.java?ref=ad37213c3e8dc849ddc6ed7fab0e3eccf1421a8b",
                "deletions": 0,
                "filename": "rt/ws/rm/src/test/java/org/apache/cxf/ws/rm/ProtocolVariationTest.java",
                "patch": "@@ -0,0 +1,48 @@\n+/**\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements. See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership. The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License. You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied. See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+package org.apache.cxf.ws.rm;\r\n+\r\n+import junit.framework.Assert;\r\n+\r\n+import org.apache.cxf.ws.addressing.Names;\r\n+import org.apache.cxf.ws.addressing.VersionTransformer.Names200408;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+/**\r\n+ * \r\n+ */\r\n+public class ProtocolVariationTest extends Assert {\r\n+\r\n+    @Test\r\n+    public void testFindVariant() {\r\n+        // valid combinations\r\n+        assertNotNull(ProtocolVariation.findVariant(\r\n+                          RM10Constants.NAMESPACE_URI, Names200408.WSA_NAMESPACE_NAME));\r\n+        assertNotNull(ProtocolVariation.findVariant(\r\n+                          RM10Constants.NAMESPACE_URI, Names.WSA_NAMESPACE_NAME));\r\n+        assertNotNull(ProtocolVariation.findVariant(\r\n+                          RM11Constants.NAMESPACE_URI, Names.WSA_NAMESPACE_NAME));\r\n+        \r\n+        // invalid combinations \r\n+        assertNull(ProtocolVariation.findVariant(\r\n+                          RM11Constants.NAMESPACE_URI, Names200408.WSA_NAMESPACE_NAME));\r\n+    }\r\n+}\r",
                "raw_url": "https://github.com/apache/cxf/raw/ad37213c3e8dc849ddc6ed7fab0e3eccf1421a8b/rt/ws/rm/src/test/java/org/apache/cxf/ws/rm/ProtocolVariationTest.java",
                "sha": "c2d3c0d9c922622d8d24337cfbefab097ee14b52",
                "status": "added"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/cxf/blob/ad37213c3e8dc849ddc6ed7fab0e3eccf1421a8b/systests/ws-specs/src/test/java/org/apache/cxf/systest/ws/rm/ProtocolVariationsTest.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/ws-specs/src/test/java/org/apache/cxf/systest/ws/rm/ProtocolVariationsTest.java?ref=ad37213c3e8dc849ddc6ed7fab0e3eccf1421a8b",
                "deletions": 0,
                "filename": "systests/ws-specs/src/test/java/org/apache/cxf/systest/ws/rm/ProtocolVariationsTest.java",
                "patch": "@@ -50,6 +50,7 @@\n import org.apache.cxf.ws.rm.RM10Constants;\n import org.apache.cxf.ws.rm.RM11Constants;\n import org.apache.cxf.ws.rm.RMConstants;\n+import org.apache.cxf.ws.rm.RMException;\n import org.apache.cxf.ws.rm.RMManager;\n \n import org.junit.After;\n@@ -161,6 +162,29 @@ public void testRM11() throws Exception {\n         verifyTwowayNonAnonymous(Names.WSA_NAMESPACE_NAME, RM11Constants.INSTANCE);\n     }\n     \n+    @Test\n+    public void testInvalidRM11WSA200408() throws Exception {\n+        init(\"org/apache/cxf/systest/ws/rm/rminterceptors.xml\", false);\n+        \n+        // WS-RM 1.1, but using the WS-A 1.0 namespace\n+        Client client = ClientProxy.getClient(greeter);\n+        client.getRequestContext().put(RMManager.WSRM_VERSION_PROPERTY, RM11Constants.NAMESPACE_URI);\n+        client.getRequestContext().put(RMManager.WSRM_WSA_VERSION_PROPERTY, Names200408.WSA_NAMESPACE_NAME);\n+\n+        try {\n+            greeter.greetMe(\"one\");\n+            fail(\"invalid namespace combination\");\n+        } catch (Exception e) {\n+            assertTrue(e.getCause() instanceof RMException);\n+            // verify a partial error text match to exclude an unexpected exception\n+            // (see UNSUPPORTED_NAMESPACE in Messages.properties)\n+            final String text = Names200408.WSA_NAMESPACE_NAME + \" is not supported\";\n+            assertTrue(e.getCause().getMessage() != null \n+                       && e.getCause().getMessage().indexOf(text) > 0);\n+        }\n+        \n+    }\n+    \n     @Test\n     public void testDefaultDecoupled() throws Exception {\n         init(\"org/apache/cxf/systest/ws/rm/rminterceptors.xml\", true);",
                "raw_url": "https://github.com/apache/cxf/raw/ad37213c3e8dc849ddc6ed7fab0e3eccf1421a8b/systests/ws-specs/src/test/java/org/apache/cxf/systest/ws/rm/ProtocolVariationsTest.java",
                "sha": "42aaf57e9ab50cd9cc1069e47123d14f9f6c96ce",
                "status": "modified"
            }
        ],
        "message": "[CXF-4023] invalid ProtocolVariant causes NullPointerException in RMSoapInterceptor\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1245572 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/6a2001fb1d7df3e2afa92586a3b169f9888f2a99",
        "patched_files": [
            "RMSoapInterceptor.java",
            "ProtocolVariation.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "ProtocolVariationsTest.java",
            "ProtocolVariationTest.java"
        ]
    },
    "cxf_ad78062": {
        "bug_id": "cxf_ad78062",
        "commit": "https://github.com/apache/cxf/commit/ad780627db2d70008192506df55bdf4649c8fc8a",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cxf/blob/ad780627db2d70008192506df55bdf4649c8fc8a/rt/databinding/jaxb/src/main/java/org/apache/cxf/endpoint/dynamic/DynamicClientFactory.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/databinding/jaxb/src/main/java/org/apache/cxf/endpoint/dynamic/DynamicClientFactory.java?ref=ad780627db2d70008192506df55bdf4649c8fc8a",
                "deletions": 1,
                "filename": "rt/databinding/jaxb/src/main/java/org/apache/cxf/endpoint/dynamic/DynamicClientFactory.java",
                "patch": "@@ -364,7 +364,10 @@ static void addClasspathFromManifest(StringBuilder classPath, File file)\n         throws URISyntaxException, IOException {\n         \n         JarFile jar = new JarFile(file);\n-        Attributes attr = jar.getManifest().getMainAttributes();\n+        Attributes attr = null;\n+        if (jar.getManifest() != null) {\n+            attr = jar.getManifest().getMainAttributes();\n+        }\n         if (attr != null) {\n             String cp = attr.getValue(\"Class-Path\");\n             while (cp != null) {",
                "raw_url": "https://github.com/apache/cxf/raw/ad780627db2d70008192506df55bdf4649c8fc8a/rt/databinding/jaxb/src/main/java/org/apache/cxf/endpoint/dynamic/DynamicClientFactory.java",
                "sha": "e081acebd3fed0939a542d56c2d8ff9bffa68a85",
                "status": "modified"
            },
            {
                "additions": 45,
                "blob_url": "https://github.com/apache/cxf/blob/ad780627db2d70008192506df55bdf4649c8fc8a/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/customization/CustomizationParser.java",
                "changes": 91,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/customization/CustomizationParser.java?ref=ad780627db2d70008192506df55bdf4649c8fc8a",
                "deletions": 46,
                "filename": "tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/customization/CustomizationParser.java",
                "patch": "@@ -50,6 +50,7 @@\n import org.apache.cxf.helpers.MapNamespaceContext;\n import org.apache.cxf.helpers.XMLUtils;\n import org.apache.cxf.resource.URIResolver;\n+import org.apache.cxf.staxutils.StaxUtils;\n import org.apache.cxf.tools.common.ToolConstants;\n import org.apache.cxf.tools.common.ToolContext;\n import org.apache.cxf.tools.common.ToolException;\n@@ -184,15 +185,28 @@ private void buildHandlerChains() {\n     private Node[] getAnnotationNodes(final Node node) {\n         Node[] nodes = new Node[2];\n \n-        Node annotationNode = nodeSelector.queryNode(node, \"//xsd:annotation\");\n-\n+        Node annotationNode = node.getFirstChild();\n+        while (annotationNode != null) {\n+            if (\"annotation\".equals(annotationNode.getLocalName())\n+                && ToolConstants.SCHEMA_URI.equals(annotationNode.getNamespaceURI())) {\n+                break;\n+            }\n+            annotationNode = annotationNode.getNextSibling();\n+        }\n         if (annotationNode == null) {\n             annotationNode = node.getOwnerDocument().createElementNS(ToolConstants.SCHEMA_URI, \"annotation\");\n         }\n \n         nodes[0] = annotationNode;\n \n-        Node appinfoNode = nodeSelector.queryNode(annotationNode, \"//xsd:appinfo\");\n+        Node appinfoNode = annotationNode.getFirstChild();\n+        while (appinfoNode != null) {\n+            if (\"appinfo\".equals(appinfoNode.getLocalName())\n+                && ToolConstants.SCHEMA_URI.equals(appinfoNode.getNamespaceURI())) {\n+                break;\n+            }\n+            appinfoNode = appinfoNode.getNextSibling();\n+        }\n \n         if (appinfoNode == null) {\n             appinfoNode = node.getOwnerDocument().createElementNS(ToolConstants.SCHEMA_URI, \"appinfo\");\n@@ -211,32 +225,32 @@ private void appendJaxbVersion(final Element schemaElement) {\n     }\n \n     protected void copyAllJaxbDeclarations(final Node schemaNode, final Element jaxwsBindingNode) {\n-        Element jaxbBindingElement = getJaxbBindingElement(jaxwsBindingNode);\n         appendJaxbVersion((Element)schemaNode);\n-        if (jaxbBindingElement != null) {\n-            NodeList nlist = nodeSelector.queryNodes(schemaNode, jaxbBindingElement.getAttribute(\"node\"));\n-            for (int i = 0; i < nlist.getLength(); i++) {\n-                Node node = nlist.item(i);\n-                copyAllJaxbDeclarations(node, jaxbBindingElement);\n-            }\n-            return;\n-        }\n \n         Node[] embededNodes = getAnnotationNodes(schemaNode);\n         Node annotationNode = embededNodes[0];\n         Node appinfoNode = embededNodes[1];\n-\n-        NodeList childNodes = jaxwsBindingNode.getChildNodes();\n-        for (int i = 0; i < childNodes.getLength(); i++) {\n-            Node childNode = childNodes.item(i);\n-            if (!isJaxbBindings(childNode) || isJaxbBindingsElement(childNode)) {\n+        \n+        for (Node childNode = jaxwsBindingNode.getFirstChild();\n+            childNode != null;\n+            childNode = childNode.getNextSibling()) {\n+            if (!isJaxbBindings(childNode)) {\n                 continue;\n             }\n-\n-            final Node jaxbNode = childNode;\n-\n-            Node cloneNode = ProcessorUtil.cloneNode(schemaNode.getOwnerDocument(), jaxbNode, true);\n-            appinfoNode.appendChild(cloneNode);\n+            \n+            Element childEl = (Element)childNode;\n+            if (isJaxbBindingsElement(childEl)) {\n+                NodeList nlist = nodeSelector.queryNodes(schemaNode, childEl.getAttribute(\"node\"));\n+                for (int i = 0; i < nlist.getLength(); i++) {\n+                    Node node = nlist.item(i);\n+                    copyAllJaxbDeclarations(node, childEl);\n+                }\n+            } else {\n+                final Node jaxbNode = childEl;\n+                Node cloneNode = ProcessorUtil.cloneNode(schemaNode.getOwnerDocument(), jaxbNode, true);\n+                appinfoNode.appendChild(cloneNode);\n+                childNode = childNode.getNextSibling();\n+            }\n         }\n \n         if (schemaNode.getChildNodes().getLength() > 0) {\n@@ -283,12 +297,9 @@ protected void internalizeBinding(Element bindings, Element targetNode, String e\n         }\n \n         Element[] children = getChildElements(bindings, ToolConstants.NS_JAXWS_BINDINGS);\n-        for (int i = 0; i < children.length; i++) {\n-            if (children[i].getNodeType() == Node.ELEMENT_NODE) {\n-                internalizeBinding(children[i], targetNode, expression);\n-            }\n+        for (Element child : children) {\n+            internalizeBinding(child, targetNode, expression);\n         }\n-\n     }\n \n     private void copyBindingsToWsdl(Node node, Node bindings, MapNamespaceContext ctx) {\n@@ -365,9 +376,7 @@ private boolean isGlobaleBindings(Element binding) {\n \n     private Element[] getChildElements(Element parent, String nsUri) {\n         List<Element> a = new ArrayList<Element>();\n-        NodeList children = parent.getChildNodes();\n-        for (int i = 0; i < children.getLength(); i++) {\n-            Node item = children.item(i);\n+        for (Node item = parent.getFirstChild(); item != null; item = item.getNextSibling()) {\n             if (!(item instanceof Element)) {\n                 continue;\n             }\n@@ -379,10 +388,6 @@ private boolean isGlobaleBindings(Element binding) {\n     }\n \n     private void addBinding(String bindingFile) throws XMLStreamException {\n-        InputSource is = new InputSource(bindingFile);\n-        XMLStreamReader reader = StAXUtil.createFreshXMLStreamReader(is);\n-\n-        StAXUtil.toStartTag(reader);\n \n         Element root = null;\n         try {\n@@ -392,6 +397,8 @@ private void addBinding(String bindingFile) throws XMLStreamException {\n             Message msg = new Message(\"CAN_NOT_READ_AS_ELEMENT\", LOG, new Object[] {bindingFile});\n             throw new ToolException(msg, e1);\n         }\n+        XMLStreamReader reader = StaxUtils.createXMLStreamReader(root);\n+        StAXUtil.toStartTag(reader);\n         if (isValidJaxwsBindingFile(bindingFile, reader)) {\n \n             String wsdlLocation = root.getAttribute(\"wsdlLocation\");\n@@ -441,7 +448,7 @@ private void addBinding(String bindingFile) throws XMLStreamException {\n                 }\n                 jaxbBindings.add(tmpIns);\n             } else {\n-                jaxbBindings.add(is);\n+                jaxbBindings.add(new InputSource(bindingFile));\n             }\n \n         } else {\n@@ -549,18 +556,10 @@ private boolean isJaxbBindingsElement(Node bindings) {\n         return \"bindings\".equals(bindings.getLocalName());\n     }\n \n-    protected Element getJaxbBindingElement(final Element bindings) {\n-        NodeList list = bindings.getElementsByTagNameNS(ToolConstants.NS_JAXB_BINDINGS, \"bindings\");\n-        if (list.getLength() > 0) {\n-            return (Element)list.item(0);\n-        }\n-        return null;\n-    }\n-\n     protected boolean hasJaxbBindingDeclaration(Node bindings) {\n-        NodeList childNodes = bindings.getChildNodes();\n-        for (int i = 0; i < childNodes.getLength(); i++) {\n-            Node childNode = childNodes.item(i);\n+        for (Node childNode = bindings.getFirstChild();\n+            childNode != null;\n+            childNode = childNode.getNextSibling()) {\n             if (isJaxbBindings(childNode)) {\n                 return true;\n             }",
                "raw_url": "https://github.com/apache/cxf/raw/ad780627db2d70008192506df55bdf4649c8fc8a/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/customization/CustomizationParser.java",
                "sha": "4523a69c6bfad4a1229cbcab3fd356b81be59069",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cxf/blob/ad780627db2d70008192506df55bdf4649c8fc8a/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/customization/JAXWSBindingParser.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/customization/JAXWSBindingParser.java?ref=ad780627db2d70008192506df55bdf4649c8fc8a",
                "deletions": 25,
                "filename": "tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/customization/JAXWSBindingParser.java",
                "patch": "@@ -62,8 +62,8 @@ public JAXWSBinding parse(Class parentType, Element element, String namespace) t\n     }\n \n     void parseElement(JAXWSBinding jaxwsBinding, Element element) {\n-        NodeList children = element.getChildNodes();\n-        if (children != null && children.getLength() == 0) {\n+        Node child = element.getFirstChild();\n+        if (child == null) {\n             // global binding\n             if (isAsyncElement(element)) {\n                 jaxwsBinding.setEnableAsyncMapping(getNodeValue(element));\n@@ -78,33 +78,20 @@ void parseElement(JAXWSBinding jaxwsBinding, Element element) {\n             if (isWrapperStyle(element)) {\n                 jaxwsBinding.setEnableWrapperStyle(getNodeValue(element));\n             }\n-        }\n-\n-        if (children != null && children.getLength() > 0) {\n+        } else {\n             // other binding\n-            for (int i = 0; i < children.getLength(); i++) {\n-                Node child = children.item(i);\n-\n+            while (child != null) {\n                 if (isAsyncElement(child)) {\n                     jaxwsBinding.setEnableAsyncMapping(getNodeValue(child));\n-                }\n-                if (isMIMEElement(child)) {\n+                } else if (isMIMEElement(child)) {\n                     jaxwsBinding.setEnableMime(getNodeValue(child));\n-                }\n-\n-                if (isWrapperStyle(child)) {\n+                } else if (isWrapperStyle(child)) {\n                     jaxwsBinding.setEnableWrapperStyle(getNodeValue(child));\n-                }\n-\n-                if (isPackageElement(child)) {\n+                } else if (isPackageElement(child)) {\n                     jaxwsBinding.setPackage(getPackageName(child));\n-                }\n-\n-                if (isJAXWSMethodElement(child)) {\n+                } else if (isJAXWSMethodElement(child)) {\n                     jaxwsBinding.setMethodName(getMethodName(child));\n-                }\n-\n-                if (isJAXWSParameterElement(child)) {\n+                } else if (isJAXWSParameterElement(child)) {\n                     Element childElement = (Element)child;\n                     String partPath = \"//\" +  childElement.getAttribute(\"part\");\n                     Node node = queryXPathNode(element.getOwnerDocument().getDocumentElement(), partPath);\n@@ -121,9 +108,7 @@ void parseElement(JAXWSBinding jaxwsBinding, Element element) {\n                     String elementName = childElement.getAttribute(\"childElementName\");\n                     JAXWSParameter jpara = new JAXWSParameter(messageName, elementName, name);\n                     jaxwsBinding.setJaxwsPara(jpara);\n-                }\n-\n-                if (isJAXWSClass(child)) {\n+                } else if (isJAXWSClass(child)) {\n                     Element childElement = (Element)child;\n                     String clzName = childElement.getAttribute(\"name\");\n                     String javadoc = \"\";\n@@ -136,6 +121,7 @@ void parseElement(JAXWSBinding jaxwsBinding, Element element) {\n                     JAXWSClass jaxwsClass = new JAXWSClass(clzName, javadoc);\n                     jaxwsBinding.setJaxwsClass(jaxwsClass);\n                 }\n+                child = child.getNextSibling();\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/cxf/raw/ad780627db2d70008192506df55bdf4649c8fc8a/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/customization/JAXWSBindingParser.java",
                "sha": "8c5b0fb4dfc76f1b685300979684493304df46e0",
                "status": "modified"
            }
        ],
        "message": "[CXF-1565, CXF-1567] Fix problems with NPE in DynamicClientFactory as well as a bunch of issues with JAXB binding files\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@652869 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/43f948d67fc06275ce3ae92631db6b8f81a216ae",
        "patched_files": [
            "CustomizationParser.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "CustomizationParserTest.java"
        ]
    },
    "cxf_ad87849": {
        "bug_id": "cxf_ad87849",
        "commit": "https://github.com/apache/cxf/commit/ad878493fc7f4c272f4d98649df57530837fbef0",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cxf/blob/ad878493fc7f4c272f4d98649df57530837fbef0/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriBuilderImpl.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriBuilderImpl.java?ref=ad878493fc7f4c272f4d98649df57530837fbef0",
                "deletions": 1,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriBuilderImpl.java",
                "patch": "@@ -162,8 +162,14 @@ public URI buildFromEncoded(Object... values) throws IllegalArgumentException, U\n         // is promising unfortunatley it causes the loss of encoded reserved values such as +,\n         // which might cause problems if consumers do rely on URLEncoder which would turn '+' into\n         // ' ' or would break the contract in when query parameters are expected to have %2B \n-        \n+        if (values == null) {\n+            throw new IllegalArgumentException(\"Template parameter values are set to null\");\n+        }\n         for (int i = 0; i < values.length; i++) {\n+            if (values[i] == null) {\n+                throw new IllegalArgumentException(\"Template parameter value is set to null\");\n+            }\n+            \n             values[i] = HttpUtils.encodePartiallyEncoded(values[i].toString(), false);\n         }\n         return doBuild(true, values);",
                "raw_url": "https://github.com/apache/cxf/raw/ad878493fc7f4c272f4d98649df57530837fbef0/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriBuilderImpl.java",
                "sha": "cacb602bc88a5ded2d1ab6c4bf51f6ef8a00690e",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cxf/blob/ad878493fc7f4c272f4d98649df57530837fbef0/rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/impl/UriBuilderImplTest.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/impl/UriBuilderImplTest.java?ref=ad878493fc7f4c272f4d98649df57530837fbef0",
                "deletions": 0,
                "filename": "rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/impl/UriBuilderImplTest.java",
                "patch": "@@ -126,6 +126,18 @@ public void testPathTrailingSlash() throws Exception {\n         assertEquals(\"URI is not built correctly\", \"http://bar/\", newUri.toString());\n     }\n     \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testNullPathWithBuildEncoded() throws Exception {\n+        URI uri = new URI(\"http://bar\");\n+        new UriBuilderImpl(uri).path(\"{bar}\").buildFromEncoded((Object[])null);\n+    }\n+    \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testNullPathWithBuildEncoded2() throws Exception {\n+        URI uri = new URI(\"http://bar\");\n+        new UriBuilderImpl(uri).path(\"{bar}\").buildFromEncoded(new Object[] {null});\n+    }\n+    \n     @Test\n     public void testPathTrailingSlash2() throws Exception {\n         URI uri = new URI(\"http://bar\");",
                "raw_url": "https://github.com/apache/cxf/raw/ad878493fc7f4c272f4d98649df57530837fbef0/rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/impl/UriBuilderImplTest.java",
                "sha": "30748bab2354161253e6ebf6c0e882df8612a9b0",
                "status": "modified"
            }
        ],
        "message": "[CXF-2887] Fixing NPE in UriBuilderImpl\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@966026 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/06eacb1fb02934d0c73e73d84201d63737423098",
        "patched_files": [
            "UriBuilderImpl.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "UriBuilderImplTest.java"
        ]
    },
    "cxf_ad922b4": {
        "bug_id": "cxf_ad922b4",
        "commit": "https://github.com/apache/cxf/commit/ad922b47519632d7a0442524f24752f2f2dd84c1",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/ad922b47519632d7a0442524f24752f2f2dd84c1/rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionFactory.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionFactory.java?ref=ad922b47519632d7a0442524f24752f2f2dd84c1",
                "deletions": 5,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionFactory.java",
                "patch": "@@ -161,12 +161,12 @@ protected synchronized void decorateWithTLS(TLSClientParameters tlsClientParamet\n                 .getInstance(protocol, provider);\n             ctx.getClientSessionContext().setSessionTimeout(tlsClientParameters.getSslCacheTimeout());\n             KeyManager[] keyManagers = tlsClientParameters.getKeyManagers();\n-            if (tlsClientParameters.getCertAlias() != null) {\n-                getKeyManagersWithCertAlias(tlsClientParameters, keyManagers);\n-            }            \n             if (keyManagers == null) {\n                 keyManagers = SSLUtils.getDefaultKeyStoreManagers(LOG);\n-            }            \n+            }\n+            if (tlsClientParameters.getCertAlias() != null) {\n+                getKeyManagersWithCertAlias(tlsClientParameters, keyManagers);\n+            }\n             ctx.init(keyManagers, tlsClientParameters.getTrustManagers(),\n                      tlsClientParameters.getSecureRandom());\n \n@@ -258,7 +258,7 @@ protected void addLogHandler(Handler handler) {\n     \n     protected void getKeyManagersWithCertAlias(TLSClientParameters tlsClientParameters,\n                                                KeyManager[] keyManagers) throws GeneralSecurityException {\n-        if (tlsClientParameters.getCertAlias() != null) {\n+        if (tlsClientParameters.getCertAlias() != null && keyManagers != null) {\n             for (int idx = 0; idx < keyManagers.length; idx++) {\n                 if (keyManagers[idx] instanceof X509KeyManager\n                     && !(keyManagers[idx] instanceof AliasedX509ExtendedKeyManager)) {",
                "raw_url": "https://github.com/apache/cxf/raw/ad922b47519632d7a0442524f24752f2f2dd84c1/rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionFactory.java",
                "sha": "a8c3494a8c8273776168b697bc20b1404c5e3087",
                "status": "modified"
            },
            {
                "additions": 128,
                "blob_url": "https://github.com/apache/cxf/blob/ad922b47519632d7a0442524f24752f2f2dd84c1/rt/transports/http/src/test/java/org/apache/cxf/transport/https/HttpsURLConnectionFactoryTest.java",
                "changes": 128,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/test/java/org/apache/cxf/transport/https/HttpsURLConnectionFactoryTest.java?ref=ad922b47519632d7a0442524f24752f2f2dd84c1",
                "deletions": 0,
                "filename": "rt/transports/http/src/test/java/org/apache/cxf/transport/https/HttpsURLConnectionFactoryTest.java",
                "patch": "@@ -0,0 +1,128 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.transport.https;\n+\n+import java.lang.reflect.Field;\n+import javax.net.ssl.HttpsURLConnection;\n+\n+import org.apache.cxf.common.util.ReflectionUtil;\n+import org.apache.cxf.configuration.jsse.SSLUtils;\n+import org.apache.cxf.configuration.jsse.TLSClientParameters;\n+import org.easymock.EasyMock;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class HttpsURLConnectionFactoryTest {\n+\n+    @Test\n+    public void noExplicitKeystoreNoCertAlias() throws Exception {\n+        clearDefaults();\n+        System.clearProperty(\"javax.net.ssl.keyStore\");\n+        System.clearProperty(\"javax.net.ssl.keyStorePassword\");\n+\n+        HttpsURLConnectionFactory factory = new HttpsURLConnectionFactory();\n+        Assert.assertNull(factory.socketFactory);\n+\n+        TLSClientParameters tlsClientParams = new TLSClientParameters();\n+        tlsClientParams.setUseHttpsURLConnectionDefaultSslSocketFactory(false);\n+\n+        HttpsURLConnection conn = EasyMock.createMock(HttpsURLConnection.class);\n+\n+        try {\n+            factory.decorateWithTLS(tlsClientParams, conn);\n+        } catch (NullPointerException e) {\n+            Assert.fail(\"should not fail with NullPointerException\");\n+        }\n+    }\n+\n+    @Test\n+    public void noExplicitKeystoreWithCertAlias() throws Exception {\n+        clearDefaults();\n+        System.clearProperty(\"javax.net.ssl.keyStore\");\n+        System.clearProperty(\"javax.net.ssl.keyStorePassword\");\n+\n+        HttpsURLConnectionFactory factory = new HttpsURLConnectionFactory();\n+        Assert.assertNull(factory.socketFactory);\n+\n+        TLSClientParameters tlsClientParams = new TLSClientParameters();\n+        tlsClientParams.setUseHttpsURLConnectionDefaultSslSocketFactory(false);\n+        tlsClientParams.setCertAlias(\"someAlias\");\n+\n+        HttpsURLConnection conn = EasyMock.createMock(HttpsURLConnection.class);\n+\n+        try {\n+            factory.decorateWithTLS(tlsClientParams, conn);\n+        } catch (NullPointerException e) {\n+            Assert.fail(\"should not fail with NullPointerException\");\n+        }\n+    }\n+\n+    @Test\n+    public void defaultKeystoreNoCertAlias() throws Exception {\n+        clearDefaults();\n+        String keystorePath = getClass().getResource(\"resources/defaultkeystore2\").getPath();\n+        System.setProperty(\"javax.net.ssl.keyStore\", keystorePath);\n+        System.setProperty(\"javax.net.ssl.keyStorePassword\", \"123456\");\n+\n+        HttpsURLConnectionFactory factory = new HttpsURLConnectionFactory();\n+        Assert.assertNull(factory.socketFactory);\n+\n+        TLSClientParameters tlsClientParams = new TLSClientParameters();\n+        tlsClientParams.setUseHttpsURLConnectionDefaultSslSocketFactory(false);\n+\n+        HttpsURLConnection conn = EasyMock.createMock(HttpsURLConnection.class);\n+\n+        try {\n+            factory.decorateWithTLS(tlsClientParams, conn);\n+        } catch (NullPointerException e) {\n+            Assert.fail(\"should not fail with NullPointerException\");\n+        }\n+    }\n+\n+    @Test\n+    public void defaultKeystoreWithCertAlias() throws Exception {\n+        clearDefaults();\n+        String keystorePath = getClass().getResource(\"resources/defaultkeystore2\").getPath();\n+        System.setProperty(\"javax.net.ssl.keyStore\", keystorePath);\n+        System.setProperty(\"javax.net.ssl.keyStorePassword\", \"123456\");\n+\n+        HttpsURLConnectionFactory factory = new HttpsURLConnectionFactory();\n+        Assert.assertNull(factory.socketFactory);\n+\n+        TLSClientParameters tlsClientParams = new TLSClientParameters();\n+        tlsClientParams.setUseHttpsURLConnectionDefaultSslSocketFactory(false);\n+        tlsClientParams.setCertAlias(\"someAlias\");\n+\n+        HttpsURLConnection conn = EasyMock.createMock(HttpsURLConnection.class);\n+\n+        try {\n+            factory.decorateWithTLS(tlsClientParams, conn);\n+        } catch (NullPointerException e) {\n+            Assert.fail(\"should not fail with NullPointerException\");\n+        }\n+    }\n+\n+    private void clearDefaults() throws IllegalAccessException {\n+        Field defaultManagers = ReflectionUtil.getDeclaredField(SSLUtils.class, \"defaultManagers\");\n+        ReflectionUtil.setAccessible(defaultManagers);\n+\n+        defaultManagers.set(SSLUtils.class, null);\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cxf/raw/ad922b47519632d7a0442524f24752f2f2dd84c1/rt/transports/http/src/test/java/org/apache/cxf/transport/https/HttpsURLConnectionFactoryTest.java",
                "sha": "0a7a17cf7f237e2369d205033df14354a577fdbd",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cxf/blob/ad922b47519632d7a0442524f24752f2f2dd84c1/rt/transports/http/src/test/java/org/apache/cxf/transport/https/resources/defaultkeystore2",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/test/java/org/apache/cxf/transport/https/resources/defaultkeystore2?ref=ad922b47519632d7a0442524f24752f2f2dd84c1",
                "deletions": 0,
                "filename": "rt/transports/http/src/test/java/org/apache/cxf/transport/https/resources/defaultkeystore2",
                "raw_url": "https://github.com/apache/cxf/raw/ad922b47519632d7a0442524f24752f2f2dd84c1/rt/transports/http/src/test/java/org/apache/cxf/transport/https/resources/defaultkeystore2",
                "sha": "195e1f32c3e05ef68006878c571744fc4667e1e0",
                "status": "added"
            }
        ],
        "message": "[CXF-6359] - NullPointerException when certAlias specified but no keyManagers are configured. Thanks to Tom Pasierb for the patch",
        "parent": "https://github.com/apache/cxf/commit/7d9db664a2f29310e42eef6f92a9066cb205bdba",
        "patched_files": [
            "defaultkeystore2.java",
            "HttpsURLConnectionFactory.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "HttpsURLConnectionFactoryTest.java"
        ]
    },
    "cxf_aec5212": {
        "bug_id": "cxf_aec5212",
        "commit": "https://github.com/apache/cxf/commit/aec5212a93eaea503b916d92ff6167609ab73e63",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/aec5212a93eaea503b916d92ff6167609ab73e63/rt/transports/jms/src/main/java/org/apache/cxf/transport/jms/JMSConduit.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/jms/src/main/java/org/apache/cxf/transport/jms/JMSConduit.java?ref=aec5212a93eaea503b916d92ff6167609ab73e63",
                "deletions": 2,
                "filename": "rt/transports/jms/src/main/java/org/apache/cxf/transport/jms/JMSConduit.java",
                "patch": "@@ -191,10 +191,10 @@ public void sendExchange(final Exchange exchange, final Object request) {\n                 }\n                 correlationMap.remove(correlationId);\n             }\n+            exchange.setInMessage(inMessage);\n             if (incomingObserver != null) {\n                 incomingObserver.onMessage(inMessage);\n-            }\n-            exchange.setInMessage(inMessage);\n+            }      \n         }\n     }\n ",
                "raw_url": "https://github.com/apache/cxf/raw/aec5212a93eaea503b916d92ff6167609ab73e63/rt/transports/jms/src/main/java/org/apache/cxf/transport/jms/JMSConduit.java",
                "sha": "4561b6fa042e11298e6d0569e2d2f18d4fb068f4",
                "status": "modified"
            }
        ],
        "message": "Fix for broken build NullpointerException in ClientImpl\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@700308 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/3f742349af9b52d001c27ee19dd708b615cec9fb",
        "patched_files": [
            "JMSConduit.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JMSConduitTest.java"
        ]
    },
    "cxf_afb8131": {
        "bug_id": "cxf_afb8131",
        "commit": "https://github.com/apache/cxf/commit/afb813100c5a27dea58ec4a62f74c8959fb44e58",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/afb813100c5a27dea58ec4a62f74c8959fb44e58/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyhandlers/TransportBindingHandler.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyhandlers/TransportBindingHandler.java?ref=afb813100c5a27dea58ec4a62f74c8959fb44e58",
                "deletions": 1,
                "filename": "rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyhandlers/TransportBindingHandler.java",
                "patch": "@@ -62,6 +62,7 @@\n import org.apache.ws.security.WSEncryptionPart;\n import org.apache.ws.security.WSPasswordCallback;\n import org.apache.ws.security.WSSConfig;\n+import org.apache.ws.security.WSSecurityException;\n import org.apache.ws.security.components.crypto.Crypto;\n import org.apache.ws.security.conversation.ConversationConstants;\n import org.apache.ws.security.message.WSSecDKSign;\n@@ -281,7 +282,6 @@ private void handleEndorsingToken(\n         if (token instanceof IssuedToken\n             || token instanceof SecureConversationToken\n             || token instanceof SecurityContextToken\n-            || token instanceof KeyValueToken\n             || token instanceof KerberosToken) {\n             addSig(\n                 signatureValues, \n@@ -387,6 +387,10 @@ private void handleEndorsingToken(\n         boolean tokenIncluded = false;\n         // Get the issued token\n         SecurityToken secTok = getSecurityToken();\n+        if (secTok == null) {\n+            LOG.fine(\"The retrieved SecurityToken was null\");\n+            throw new WSSecurityException(\"The retrieved SecurityToken was null\");\n+        }\n         \n         if (includeToken(token.getInclusion())) {\n             //Add the token",
                "raw_url": "https://github.com/apache/cxf/raw/afb813100c5a27dea58ec4a62f74c8959fb44e58/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyhandlers/TransportBindingHandler.java",
                "sha": "f77fd35bcfd2e9fe8f4267ad1ed9d9afb03d50af",
                "status": "modified"
            },
            {
                "additions": 47,
                "blob_url": "https://github.com/apache/cxf/blob/afb813100c5a27dea58ec4a62f74c8959fb44e58/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/AbstractSupportingTokenPolicyValidator.java",
                "changes": 53,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/AbstractSupportingTokenPolicyValidator.java?ref=afb813100c5a27dea58ec4a62f74c8959fb44e58",
                "deletions": 6,
                "filename": "rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/AbstractSupportingTokenPolicyValidator.java",
                "patch": "@@ -19,6 +19,7 @@\n \n package org.apache.cxf.ws.security.wss4j.policyvalidators;\n \n+import java.security.PublicKey;\n import java.security.cert.X509Certificate;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -299,6 +300,40 @@ protected boolean processX509Tokens() {\n         return true;\n     }\n     \n+    /**\n+     * Process KeyValue Tokens.\n+     */\n+    protected boolean processKeyValueTokens() {\n+        List<WSSecurityEngineResult> tokenResults = new ArrayList<WSSecurityEngineResult>();\n+        for (WSSecurityEngineResult wser : signedResults) {\n+            PublicKey publicKey = \n+                (PublicKey)wser.get(WSSecurityEngineResult.TAG_PUBLIC_KEY);\n+            if (publicKey != null) {\n+                tokenResults.add(wser);\n+            }\n+        }\n+        \n+        if (tokenResults.isEmpty()) {\n+            return false;\n+        }\n+        \n+        if (signed && !areTokensSigned(tokenResults)) {\n+            return false;\n+        }\n+        if (encrypted && !areTokensEncrypted(tokenResults)) {\n+            return false;\n+        }\n+        if (endorsed && !checkEndorsed(tokenResults)) {\n+            return false;\n+        }\n+        \n+        if (!validateSignedEncryptedPolicies(tokenResults)) {\n+            return false;\n+        }\n+        \n+        return true;\n+    }\n+    \n     /**\n      * Validate (SignedParts|SignedElements|EncryptedParts|EncryptedElements) policies of this\n      * SupportingToken.\n@@ -447,7 +482,7 @@ private boolean areTokensSigned(List<WSSecurityEngineResult> tokens) {\n         if (!isTLSInUse()) {\n             for (WSSecurityEngineResult wser : tokens) {\n                 Element tokenElement = (Element)wser.get(WSSecurityEngineResult.TAG_TOKEN_ELEMENT);\n-                if (!isTokenSigned(tokenElement)) {\n+                if (tokenElement == null || !isTokenSigned(tokenElement)) {\n                     return false;\n                 }\n             }\n@@ -462,7 +497,7 @@ private boolean areTokensEncrypted(List<WSSecurityEngineResult> tokens) {\n         if (!isTLSInUse()) {\n             for (WSSecurityEngineResult wser : tokens) {\n                 Element tokenElement = (Element)wser.get(WSSecurityEngineResult.TAG_TOKEN_ELEMENT);\n-                if (!isTokenEncrypted(tokenElement)) {\n+                if (tokenElement == null || !isTokenEncrypted(tokenElement)) {\n                     return false;\n                 }\n             }\n@@ -538,6 +573,8 @@ private boolean checkSignatureOrEncryptionResult(\n             Integer actInt = (Integer)token.get(WSSecurityEngineResult.TAG_ACTION);\n             BinarySecurity binarySecurity = \n                 (BinarySecurity)token.get(WSSecurityEngineResult.TAG_BINARY_SECURITY_TOKEN);\n+            PublicKey publicKey = \n+                (PublicKey)token.get(WSSecurityEngineResult.TAG_PUBLIC_KEY);\n             if (binarySecurity instanceof X509Security\n                 || binarySecurity instanceof PKIPathSecurity) {\n                 X509Certificate foundCert = \n@@ -560,14 +597,18 @@ private boolean checkSignatureOrEncryptionResult(\n                         return true;\n                     }\n                 }\n-            } else {\n-                byte[] foundSecret = (byte[])token.get(WSSecurityEngineResult.TAG_SECRET);\n-                if (foundSecret != null && Arrays.equals(foundSecret, secret)) {\n+            } else if (publicKey != null) {\n+                PublicKey foundPublicKey = \n+                    (PublicKey)token.get(WSSecurityEngineResult.TAG_PUBLIC_KEY);\n+                if (publicKey.equals(foundPublicKey)) {\n                     return true;\n                 }\n+            } else {\n+                byte[] foundSecret = (byte[])token.get(WSSecurityEngineResult.TAG_SECRET);\n                 byte[] derivedKey = \n                     (byte[])token.get(WSSecurityEngineResult.TAG_ENCRYPTED_EPHEMERAL_KEY);\n-                if (derivedKey != null && Arrays.equals(derivedKey, secret)) {\n+                if ((foundSecret != null && Arrays.equals(foundSecret, secret))\n+                    || (derivedKey != null && Arrays.equals(derivedKey, secret))) {\n                     return true;\n                 }\n             }",
                "raw_url": "https://github.com/apache/cxf/raw/afb813100c5a27dea58ec4a62f74c8959fb44e58/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/AbstractSupportingTokenPolicyValidator.java",
                "sha": "f9af3349f20be3658447b1f25da496e730c10a41",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/afb813100c5a27dea58ec4a62f74c8959fb44e58/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/ConcreteSupportingTokenPolicyValidator.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/ConcreteSupportingTokenPolicyValidator.java?ref=afb813100c5a27dea58ec4a62f74c8959fb44e58",
                "deletions": 0,
                "filename": "rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/ConcreteSupportingTokenPolicyValidator.java",
                "patch": "@@ -29,6 +29,7 @@\n import org.apache.cxf.ws.security.policy.SPConstants;\n import org.apache.cxf.ws.security.policy.model.IssuedToken;\n import org.apache.cxf.ws.security.policy.model.KerberosToken;\n+import org.apache.cxf.ws.security.policy.model.KeyValueToken;\n import org.apache.cxf.ws.security.policy.model.SamlToken;\n import org.apache.cxf.ws.security.policy.model.SecurityContextToken;\n import org.apache.cxf.ws.security.policy.model.SupportingToken;\n@@ -98,6 +99,10 @@ public boolean validatePolicy(\n                     if (!processX509Tokens()) {\n                         processingFailed = true;\n                     }\n+                } else if (token instanceof KeyValueToken) {\n+                    if (!processKeyValueTokens()) {\n+                        processingFailed = true;\n+                    }\n                 } else if (token instanceof SecurityContextToken) {\n                     if (!processSCTokens()) {\n                         processingFailed = true;",
                "raw_url": "https://github.com/apache/cxf/raw/afb813100c5a27dea58ec4a62f74c8959fb44e58/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/ConcreteSupportingTokenPolicyValidator.java",
                "sha": "b51589557ed888410b0e8b6c482194a57c9fe2a7",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/afb813100c5a27dea58ec4a62f74c8959fb44e58/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/EncryptedTokenPolicyValidator.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/EncryptedTokenPolicyValidator.java?ref=afb813100c5a27dea58ec4a62f74c8959fb44e58",
                "deletions": 0,
                "filename": "rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/EncryptedTokenPolicyValidator.java",
                "patch": "@@ -29,6 +29,7 @@\n import org.apache.cxf.ws.security.policy.SPConstants;\n import org.apache.cxf.ws.security.policy.model.IssuedToken;\n import org.apache.cxf.ws.security.policy.model.KerberosToken;\n+import org.apache.cxf.ws.security.policy.model.KeyValueToken;\n import org.apache.cxf.ws.security.policy.model.SamlToken;\n import org.apache.cxf.ws.security.policy.model.SecurityContextToken;\n import org.apache.cxf.ws.security.policy.model.SupportingToken;\n@@ -94,6 +95,10 @@ public boolean validatePolicy(\n                     if (!processX509Tokens()) {\n                         processingFailed = true;\n                     }\n+                } else if (token instanceof KeyValueToken) {\n+                    if (!processKeyValueTokens()) {\n+                        processingFailed = true;\n+                    }\n                 } else if (token instanceof SecurityContextToken) {\n                     if (!processSCTokens()) {\n                         processingFailed = true;",
                "raw_url": "https://github.com/apache/cxf/raw/afb813100c5a27dea58ec4a62f74c8959fb44e58/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/EncryptedTokenPolicyValidator.java",
                "sha": "bc218478e00638e75668aa3d91d73d6cd00a0b5c",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/afb813100c5a27dea58ec4a62f74c8959fb44e58/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/EndorsingEncryptedTokenPolicyValidator.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/EndorsingEncryptedTokenPolicyValidator.java?ref=afb813100c5a27dea58ec4a62f74c8959fb44e58",
                "deletions": 0,
                "filename": "rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/EndorsingEncryptedTokenPolicyValidator.java",
                "patch": "@@ -29,6 +29,7 @@\n import org.apache.cxf.ws.security.policy.SPConstants;\n import org.apache.cxf.ws.security.policy.model.IssuedToken;\n import org.apache.cxf.ws.security.policy.model.KerberosToken;\n+import org.apache.cxf.ws.security.policy.model.KeyValueToken;\n import org.apache.cxf.ws.security.policy.model.SamlToken;\n import org.apache.cxf.ws.security.policy.model.SecurityContextToken;\n import org.apache.cxf.ws.security.policy.model.SupportingToken;\n@@ -94,6 +95,10 @@ public boolean validatePolicy(\n                     if (!processX509Tokens()) {\n                         processingFailed = true;\n                     }\n+                } else if (token instanceof KeyValueToken) {\n+                    if (!processKeyValueTokens()) {\n+                        processingFailed = true;\n+                    }\n                 } else if (token instanceof UsernameToken) {\n                     if (!processUsernameTokens()) {\n                         processingFailed = true;",
                "raw_url": "https://github.com/apache/cxf/raw/afb813100c5a27dea58ec4a62f74c8959fb44e58/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/EndorsingEncryptedTokenPolicyValidator.java",
                "sha": "344b0aa4bc0b2ac61acd8833c4a9408d7d94025c",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/afb813100c5a27dea58ec4a62f74c8959fb44e58/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/EndorsingTokenPolicyValidator.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/EndorsingTokenPolicyValidator.java?ref=afb813100c5a27dea58ec4a62f74c8959fb44e58",
                "deletions": 0,
                "filename": "rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/EndorsingTokenPolicyValidator.java",
                "patch": "@@ -29,6 +29,7 @@\n import org.apache.cxf.ws.security.policy.SPConstants;\n import org.apache.cxf.ws.security.policy.model.IssuedToken;\n import org.apache.cxf.ws.security.policy.model.KerberosToken;\n+import org.apache.cxf.ws.security.policy.model.KeyValueToken;\n import org.apache.cxf.ws.security.policy.model.SamlToken;\n import org.apache.cxf.ws.security.policy.model.SecurityContextToken;\n import org.apache.cxf.ws.security.policy.model.SupportingToken;\n@@ -93,6 +94,10 @@ public boolean validatePolicy(\n                     if (!processX509Tokens()) {\n                         processingFailed = true;\n                     }\n+                } else if (token instanceof KeyValueToken) {\n+                    if (!processKeyValueTokens()) {\n+                        processingFailed = true;\n+                    }\n                 } else if (token instanceof UsernameToken) {\n                     if (!processUsernameTokens()) {\n                         processingFailed = true;",
                "raw_url": "https://github.com/apache/cxf/raw/afb813100c5a27dea58ec4a62f74c8959fb44e58/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/EndorsingTokenPolicyValidator.java",
                "sha": "d99509c6887e6c5061e4bd2c9e092e163572c4dd",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/afb813100c5a27dea58ec4a62f74c8959fb44e58/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/SignedEncryptedTokenPolicyValidator.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/SignedEncryptedTokenPolicyValidator.java?ref=afb813100c5a27dea58ec4a62f74c8959fb44e58",
                "deletions": 0,
                "filename": "rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/SignedEncryptedTokenPolicyValidator.java",
                "patch": "@@ -29,6 +29,7 @@\n import org.apache.cxf.ws.security.policy.SPConstants;\n import org.apache.cxf.ws.security.policy.model.IssuedToken;\n import org.apache.cxf.ws.security.policy.model.KerberosToken;\n+import org.apache.cxf.ws.security.policy.model.KeyValueToken;\n import org.apache.cxf.ws.security.policy.model.SamlToken;\n import org.apache.cxf.ws.security.policy.model.SecurityContextToken;\n import org.apache.cxf.ws.security.policy.model.SupportingToken;\n@@ -95,6 +96,10 @@ public boolean validatePolicy(\n                     if (!processX509Tokens()) {\n                         processingFailed = true;\n                     }\n+                } else if (token instanceof KeyValueToken) {\n+                    if (!processKeyValueTokens()) {\n+                        processingFailed = true;\n+                    }\n                 } else if (token instanceof SecurityContextToken) {\n                     if (!processSCTokens()) {\n                         processingFailed = true;",
                "raw_url": "https://github.com/apache/cxf/raw/afb813100c5a27dea58ec4a62f74c8959fb44e58/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/SignedEncryptedTokenPolicyValidator.java",
                "sha": "0b292b09500b9b2e4b7d6c7835f2195408312b1d",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/afb813100c5a27dea58ec4a62f74c8959fb44e58/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/SignedEndorsingEncryptedTokenPolicyValidator.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/SignedEndorsingEncryptedTokenPolicyValidator.java?ref=afb813100c5a27dea58ec4a62f74c8959fb44e58",
                "deletions": 0,
                "filename": "rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/SignedEndorsingEncryptedTokenPolicyValidator.java",
                "patch": "@@ -29,6 +29,7 @@\n import org.apache.cxf.ws.security.policy.SPConstants;\n import org.apache.cxf.ws.security.policy.model.IssuedToken;\n import org.apache.cxf.ws.security.policy.model.KerberosToken;\n+import org.apache.cxf.ws.security.policy.model.KeyValueToken;\n import org.apache.cxf.ws.security.policy.model.SamlToken;\n import org.apache.cxf.ws.security.policy.model.SecurityContextToken;\n import org.apache.cxf.ws.security.policy.model.SupportingToken;\n@@ -99,6 +100,10 @@ public boolean validatePolicy(\n                     if (!processX509Tokens()) {\n                         processingFailed = true;\n                     }\n+                } else if (token instanceof KeyValueToken) {\n+                    if (!processKeyValueTokens()) {\n+                        processingFailed = true;\n+                    }\n                 } else if (token instanceof UsernameToken) {\n                     if (!processUsernameTokens()) {\n                         processingFailed = true;",
                "raw_url": "https://github.com/apache/cxf/raw/afb813100c5a27dea58ec4a62f74c8959fb44e58/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/SignedEndorsingEncryptedTokenPolicyValidator.java",
                "sha": "489c739b26996f49235c1b22444164bc3b35d294",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/afb813100c5a27dea58ec4a62f74c8959fb44e58/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/SignedEndorsingTokenPolicyValidator.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/SignedEndorsingTokenPolicyValidator.java?ref=afb813100c5a27dea58ec4a62f74c8959fb44e58",
                "deletions": 0,
                "filename": "rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/SignedEndorsingTokenPolicyValidator.java",
                "patch": "@@ -29,6 +29,7 @@\n import org.apache.cxf.ws.security.policy.SPConstants;\n import org.apache.cxf.ws.security.policy.model.IssuedToken;\n import org.apache.cxf.ws.security.policy.model.KerberosToken;\n+import org.apache.cxf.ws.security.policy.model.KeyValueToken;\n import org.apache.cxf.ws.security.policy.model.SamlToken;\n import org.apache.cxf.ws.security.policy.model.SecurityContextToken;\n import org.apache.cxf.ws.security.policy.model.SupportingToken;\n@@ -97,6 +98,10 @@ public boolean validatePolicy(\n                     if (!processX509Tokens()) {\n                         processingFailed = true;\n                     }\n+                } else if (token instanceof KeyValueToken) {\n+                    if (!processKeyValueTokens()) {\n+                        processingFailed = true;\n+                    }\n                 } else if (token instanceof UsernameToken) {\n                     if (!processUsernameTokens()) {\n                         processingFailed = true;",
                "raw_url": "https://github.com/apache/cxf/raw/afb813100c5a27dea58ec4a62f74c8959fb44e58/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/SignedEndorsingTokenPolicyValidator.java",
                "sha": "4f9886f300f6090ed7c530c106180fde8374650c",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/afb813100c5a27dea58ec4a62f74c8959fb44e58/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/SignedTokenPolicyValidator.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/SignedTokenPolicyValidator.java?ref=afb813100c5a27dea58ec4a62f74c8959fb44e58",
                "deletions": 0,
                "filename": "rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/SignedTokenPolicyValidator.java",
                "patch": "@@ -29,6 +29,7 @@\n import org.apache.cxf.ws.security.policy.SPConstants;\n import org.apache.cxf.ws.security.policy.model.IssuedToken;\n import org.apache.cxf.ws.security.policy.model.KerberosToken;\n+import org.apache.cxf.ws.security.policy.model.KeyValueToken;\n import org.apache.cxf.ws.security.policy.model.SamlToken;\n import org.apache.cxf.ws.security.policy.model.SecurityContextToken;\n import org.apache.cxf.ws.security.policy.model.SupportingToken;\n@@ -98,6 +99,10 @@ public boolean validatePolicy(\n                     if (!processX509Tokens()) {\n                         processingFailed = true;\n                     }\n+                } else if (token instanceof KeyValueToken) {\n+                    if (!processKeyValueTokens()) {\n+                        processingFailed = true;\n+                    }\n                 } else if (token instanceof SecurityContextToken) {\n                     if (!processSCTokens()) {\n                         processingFailed = true;",
                "raw_url": "https://github.com/apache/cxf/raw/afb813100c5a27dea58ec4a62f74c8959fb44e58/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/SignedTokenPolicyValidator.java",
                "sha": "a1543a04790e57cc5f281ae17c3ff68279751154",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/cxf/blob/afb813100c5a27dea58ec4a62f74c8959fb44e58/systests/ws-security/src/test/java/org/apache/cxf/systest/ws/x509/X509TokenTest.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/ws-security/src/test/java/org/apache/cxf/systest/ws/x509/X509TokenTest.java?ref=afb813100c5a27dea58ec4a62f74c8959fb44e58",
                "deletions": 0,
                "filename": "systests/ws-security/src/test/java/org/apache/cxf/systest/ws/x509/X509TokenTest.java",
                "patch": "@@ -488,6 +488,30 @@ public void testTransportSupportingSigned() throws Exception {\n         x509Port.doubleIt(25);\n     }\n     \n+    @org.junit.Test\n+    public void testTransportKVT() throws Exception {\n+        if (!unrestrictedPoliciesInstalled) {\n+            return;\n+        }\n+\n+        SpringBusFactory bf = new SpringBusFactory();\n+        URL busFile = X509TokenTest.class.getResource(\"client/client.xml\");\n+\n+        Bus bus = bf.createBus(busFile.toString());\n+        SpringBusFactory.setDefaultBus(bus);\n+        SpringBusFactory.setThreadDefaultBus(bus);\n+\n+        URL wsdl = X509TokenTest.class.getResource(\"DoubleItX509.wsdl\");\n+        Service service = Service.create(wsdl, SERVICE_QNAME);\n+        QName portQName = new QName(NAMESPACE, \"DoubleItTransportKVTPort\");\n+        DoubleItPortType x509Port = \n+                service.getPort(portQName, DoubleItPortType.class);\n+        updateAddressPort(x509Port, PORT2);\n+        x509Port.doubleIt(25);\n+        \n+        bus.shutdown(true);\n+    }\n+    \n     private boolean checkUnrestrictedPoliciesInstalled() {\n         try {\n             byte[] data = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07};",
                "raw_url": "https://github.com/apache/cxf/raw/afb813100c5a27dea58ec4a62f74c8959fb44e58/systests/ws-security/src/test/java/org/apache/cxf/systest/ws/x509/X509TokenTest.java",
                "sha": "eec7606c09f90c1f32f05350ed63edf49e2327e2",
                "status": "modified"
            },
            {
                "additions": 60,
                "blob_url": "https://github.com/apache/cxf/blob/afb813100c5a27dea58ec4a62f74c8959fb44e58/systests/ws-security/src/test/resources/org/apache/cxf/systest/ws/x509/DoubleItX509.wsdl",
                "changes": 60,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/ws-security/src/test/resources/org/apache/cxf/systest/ws/x509/DoubleItX509.wsdl?ref=afb813100c5a27dea58ec4a62f74c8959fb44e58",
                "deletions": 0,
                "filename": "systests/ws-security/src/test/resources/org/apache/cxf/systest/ws/x509/DoubleItX509.wsdl",
                "patch": "@@ -275,6 +275,23 @@\n             </wsdl:fault>\n         </wsdl:operation>\n     </wsdl:binding>\n+    <wsdl:binding name=\"DoubleItTransportKVTBinding\" type=\"tns:DoubleItPortType\">\n+        <wsp:PolicyReference URI=\"#DoubleItTransportKVTPolicy\" />\n+        <soap:binding style=\"document\"\n+            transport=\"http://schemas.xmlsoap.org/soap/http\" />\n+        <wsdl:operation name=\"DoubleIt\">\n+            <soap:operation soapAction=\"\" />\n+            <wsdl:input>\n+                <soap:body use=\"literal\" />\n+            </wsdl:input>\n+            <wsdl:output>\n+                <soap:body use=\"literal\" />\n+            </wsdl:output>\n+            <wsdl:fault name=\"DoubleItFault\">\n+                <soap:body use=\"literal\" name=\"DoubleItFault\" />\n+            </wsdl:fault>\n+        </wsdl:operation>\n+    </wsdl:binding>\n     \n     <wsdl:service name=\"DoubleItService\">\n         <wsdl:port name=\"DoubleItKeyIdentifierPort\" binding=\"tns:DoubleItKeyIdentifierBinding\">\n@@ -326,6 +343,10 @@\n                    binding=\"tns:DoubleItTransportSupportingSignedBinding\">\n             <soap:address location=\"https://localhost:9002/DoubleItX509TransportSupportingSigned\" />\n         </wsdl:port>\n+        <wsdl:port name=\"DoubleItTransportKVTPort\" \n+                   binding=\"tns:DoubleItTransportKVTBinding\">\n+            <soap:address location=\"https://localhost:9002/DoubleItX509TransportKVT\" />\n+        </wsdl:port>\n     </wsdl:service>\n \n     <wsp:Policy wsu:Id=\"DoubleItKeyIdentifierPolicy\">\n@@ -846,6 +867,45 @@\n         </wsp:ExactlyOne>\n     </wsp:Policy>\n     \n+    <wsp:Policy wsu:Id=\"DoubleItTransportKVTPolicy\">\n+        <wsp:ExactlyOne>\n+            <wsp:All>\n+                <sp:TransportBinding>\n+                    <wsp:Policy>\n+                        <sp:TransportToken>\n+                            <wsp:Policy>\n+                                <sp:HttpsToken>\n+                                    <wsp:Policy/>\n+                                </sp:HttpsToken>\n+                            </wsp:Policy>\n+                        </sp:TransportToken>\n+                        <sp:Layout>\n+                            <wsp:Policy>\n+                                <sp:Lax />\n+                            </wsp:Policy>\n+                        </sp:Layout>\n+                        <sp:IncludeTimestamp />\n+                        <sp:AlgorithmSuite>\n+                            <wsp:Policy>\n+                                <sp:Basic128 />\n+                            </wsp:Policy>\n+                        </sp:AlgorithmSuite>\n+                    </wsp:Policy>\n+                </sp:TransportBinding>\n+                <sp:EndorsingSupportingTokens>\n+                   <wsp:Policy>\n+                        <sp:KeyValueToken\n+                           sp:IncludeToken=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/Never\">\n+                           <wsp:Policy>\n+                              <sp:RsaKeyValue />\n+                           </wsp:Policy>\n+                        </sp:KeyValueToken>\n+                    </wsp:Policy>\n+                </sp:EndorsingSupportingTokens>\n+            </wsp:All>\n+        </wsp:ExactlyOne>\n+    </wsp:Policy>\n+    \n     \n     <wsp:Policy wsu:Id=\"DoubleItBinding_DoubleIt_Input_Policy\">\n       <wsp:ExactlyOne>",
                "raw_url": "https://github.com/apache/cxf/raw/afb813100c5a27dea58ec4a62f74c8959fb44e58/systests/ws-security/src/test/resources/org/apache/cxf/systest/ws/x509/DoubleItX509.wsdl",
                "sha": "29250fdcdf8cc75be7d88d3ff165fdd084cad01c",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cxf/blob/afb813100c5a27dea58ec4a62f74c8959fb44e58/systests/ws-security/src/test/resources/org/apache/cxf/systest/ws/x509/client/client.xml",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/ws-security/src/test/resources/org/apache/cxf/systest/ws/x509/client/client.xml?ref=afb813100c5a27dea58ec4a62f74c8959fb44e58",
                "deletions": 0,
                "filename": "systests/ws-security/src/test/resources/org/apache/cxf/systest/ws/x509/client/client.xml",
                "patch": "@@ -222,6 +222,17 @@\n        </jaxws:properties>\n     </jaxws:client>\n     \n+    <jaxws:client name=\"{http://www.example.org/contract/DoubleIt}DoubleItTransportKVTPort\" \n+                  createdFromAPI=\"true\">\n+       <jaxws:properties>\n+           <entry key=\"ws-security.signature.properties\" \n+                  value=\"org/apache/cxf/systest/ws/wssec10/client/alice.properties\"/> \n+           <entry key=\"ws-security.signature.username\" value=\"alice\"/>\n+           <entry key=\"ws-security.callback-handler\" \n+                  value=\"org.apache.cxf.systest.ws.wssec10.client.KeystorePasswordCallback\"/>\n+       </jaxws:properties>\n+    </jaxws:client>\n+    \n     <http:conduit name=\"https://localhost:.*\">\n         <http:tlsClientParameters disableCNCheck=\"true\">\n             <sec:trustManagers>",
                "raw_url": "https://github.com/apache/cxf/raw/afb813100c5a27dea58ec4a62f74c8959fb44e58/systests/ws-security/src/test/resources/org/apache/cxf/systest/ws/x509/client/client.xml",
                "sha": "77a745c382010803122a9f418d617671cb43990a",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/cxf/blob/afb813100c5a27dea58ec4a62f74c8959fb44e58/systests/ws-security/src/test/resources/org/apache/cxf/systest/ws/x509/server/server.xml",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/ws-security/src/test/resources/org/apache/cxf/systest/ws/x509/server/server.xml?ref=afb813100c5a27dea58ec4a62f74c8959fb44e58",
                "deletions": 0,
                "filename": "systests/ws-security/src/test/resources/org/apache/cxf/systest/ws/x509/server/server.xml",
                "patch": "@@ -364,4 +364,22 @@\n      \n     </jaxws:endpoint> \n     \n+    <jaxws:endpoint \n+       id=\"TransportKVT\"\n+       address=\"https://localhost:${testutil.ports.Server.2}/DoubleItX509TransportKVT\" \n+       serviceName=\"s:DoubleItService\"\n+       endpointName=\"s:DoubleItTransportKVTPort\"\n+       xmlns:s=\"http://www.example.org/contract/DoubleIt\"\n+       implementor=\"org.apache.cxf.systest.ws.common.DoubleItImpl\"\n+       wsdlLocation=\"org/apache/cxf/systest/ws/x509/DoubleItX509.wsdl\"\n+       depends-on=\"tls-settings\">\n+        \n+       <jaxws:properties>\n+          <entry key=\"ws-security.encryption.properties\" \n+                  value=\"org/apache/cxf/systest/ws/wssec10/client/alice.properties\"/> \n+          <entry key=\"ws-security.is-bsp-compliant\" value=\"false\"/>\n+       </jaxws:properties> \n+     \n+    </jaxws:endpoint> \n+    \n </beans>",
                "raw_url": "https://github.com/apache/cxf/raw/afb813100c5a27dea58ec4a62f74c8959fb44e58/systests/ws-security/src/test/resources/org/apache/cxf/systest/ws/x509/server/server.xml",
                "sha": "ea91e7cb4dfe88bf9f6cb154bc0a994aebf19d05",
                "status": "modified"
            }
        ],
        "message": "[CXF-4357][CXF-4358] - Support KeyValueTokens via the Transport binding\n - Also fixed \"NullPointerException in the TransportBindingHandler\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1346342 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/38043b6b2ba4b5dbae82b5272c00e5f7cc870e56",
        "patched_files": [
            "EndorsingEncryptedTokenPolicyValidator.java",
            "SignedEndorsingTokenPolicyValidator.java",
            "EncryptedTokenPolicyValidator.java",
            "AbstractSupportingTokenPolicyValidator.java",
            "SignedTokenPolicyValidator.java",
            "client.java",
            "server.java",
            "SignedEncryptedTokenPolicyValidator.java",
            "DoubleItX509.java",
            "ConcreteSupportingTokenPolicyValidator.java",
            "TransportBindingHandler.java",
            "EndorsingTokenPolicyValidator.java",
            "SignedEndorsingEncryptedTokenPolicyValidator.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "X509TokenTest.java"
        ]
    },
    "cxf_affd57f": {
        "bug_id": "cxf_affd57f",
        "commit": "https://github.com/apache/cxf/commit/affd57f78aeee0ac0b065ced1f549e9a94f9c5ca",
        "file": [
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/cxf/blob/affd57f78aeee0ac0b065ced1f549e9a94f9c5ca/rt/core/src/main/java/org/apache/cxf/databinding/source/XMLStreamDataReader.java",
                "changes": 61,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/main/java/org/apache/cxf/databinding/source/XMLStreamDataReader.java?ref=affd57f78aeee0ac0b065ced1f549e9a94f9c5ca",
                "deletions": 30,
                "filename": "rt/core/src/main/java/org/apache/cxf/databinding/source/XMLStreamDataReader.java",
                "patch": "@@ -53,40 +53,41 @@ public Object read(MessagePartInfo part, XMLStreamReader input) {\n     }\n \n     public Object read(QName name, XMLStreamReader input, Class type) {\n-        if (SAXSource.class.isAssignableFrom(type)) {\n-            try {\n-                CachedOutputStream out = new CachedOutputStream();\n+        if (type != null) {\n+            if (SAXSource.class.isAssignableFrom(type)) {\n                 try {\n-                    XMLStreamWriter xsw = StaxUtils.createXMLStreamWriter(out);\n-                    StaxUtils.copy(input, xsw);\n-                    xsw.close();\n-                    return new SAXSource(new InputSource(out.getInputStream()));\n-                } finally {\n-                    out.close();\n+                    CachedOutputStream out = new CachedOutputStream();\n+                    try {\n+                        XMLStreamWriter xsw = StaxUtils.createXMLStreamWriter(out);\n+                        StaxUtils.copy(input, xsw);\n+                        xsw.close();\n+                        return new SAXSource(new InputSource(out.getInputStream()));\n+                    } finally {\n+                        out.close();\n+                    }\n+                } catch (IOException e) {\n+                    throw new Fault(new Message(\"COULD_NOT_READ_XML_STREAM\", LOG), e);\n+                } catch (XMLStreamException e) {\n+                    throw new Fault(new Message(\"COULD_NOT_READ_XML_STREAM\", LOG), e);\n                 }\n-            } catch (IOException e) {\n-                throw new Fault(new Message(\"COULD_NOT_READ_XML_STREAM\", LOG), e);\n-            } catch (XMLStreamException e) {\n-                throw new Fault(new Message(\"COULD_NOT_READ_XML_STREAM\", LOG), e);\n-            }\n-        } else if (StreamSource.class.isAssignableFrom(type)) {\n-            try {\n-                CachedOutputStream out = new CachedOutputStream();\n+            } else if (StreamSource.class.isAssignableFrom(type)) {\n                 try {\n-                    XMLStreamWriter xsw = StaxUtils.createXMLStreamWriter(out);\n-                    StaxUtils.copy(input, xsw);\n-                    xsw.close();\n-                    return new StreamSource(out.getInputStream());\n-                } finally {\n-                    out.close();\n+                    CachedOutputStream out = new CachedOutputStream();\n+                    try {\n+                        XMLStreamWriter xsw = StaxUtils.createXMLStreamWriter(out);\n+                        StaxUtils.copy(input, xsw);\n+                        xsw.close();\n+                        return new StreamSource(out.getInputStream());\n+                    } finally {\n+                        out.close();\n+                    }\n+                } catch (IOException e) {\n+                    throw new Fault(new Message(\"COULD_NOT_READ_XML_STREAM\", LOG), e);\n+                } catch (XMLStreamException e) {\n+                    throw new Fault(new Message(\"COULD_NOT_READ_XML_STREAM\", LOG), e);\n                 }\n-            } catch (IOException e) {\n-                throw new Fault(new Message(\"COULD_NOT_READ_XML_STREAM\", LOG), e);\n-            } catch (XMLStreamException e) {\n-                throw new Fault(new Message(\"COULD_NOT_READ_XML_STREAM\", LOG), e);\n-            }\n-        } \n-        \n+            } \n+        }\n         return read(input);\n     }\n ",
                "raw_url": "https://github.com/apache/cxf/raw/affd57f78aeee0ac0b065ced1f549e9a94f9c5ca/rt/core/src/main/java/org/apache/cxf/databinding/source/XMLStreamDataReader.java",
                "sha": "4832fcb1edd5961135b5dde44b66f750cd321ece",
                "status": "modified"
            }
        ],
        "message": "Don't NPE if type is null\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@725839 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/782216612d60c2f6ffe29c92f103dbda46453444",
        "patched_files": [
            "XMLStreamDataReader.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "XMLStreamDataReaderTest.java"
        ]
    },
    "cxf_b4f34d0": {
        "bug_id": "cxf_b4f34d0",
        "commit": "https://github.com/apache/cxf/commit/b4f34d03b2a244f9b97918d6ca33f532079e8dcb",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cxf/blob/b4f34d03b2a244f9b97918d6ca33f532079e8dcb/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java?ref=b4f34d03b2a244f9b97918d6ca33f532079e8dcb",
                "deletions": 1,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java",
                "patch": "@@ -1473,7 +1473,12 @@ protected boolean redirectRetransmit() throws IOException {\n         protected boolean authorizationRetransmit() throws IOException {\n             Message m = new MessageImpl();\n             updateResponseHeaders(m);\n-            HttpAuthHeader authHeader = new HttpAuthHeader(Headers.getSetProtocolHeaders(m).get(\"WWW-Authenticate\"));\n+            List<String> authHeaderValues = Headers.getSetProtocolHeaders(m).get(\"WWW-Authenticate\");\n+            if (authHeaderValues == null) {\n+                LOG.warning(\"WWW-Authenticate response header is not set\");\n+                return false;\n+            }\n+            HttpAuthHeader authHeader = new HttpAuthHeader(authHeaderValues);\n             URI currentURI = url;\n             String realm = authHeader.getRealm();\n             detectAuthorizationLoop(getConduitName(), outMessage, currentURI, realm);",
                "raw_url": "https://github.com/apache/cxf/raw/b4f34d03b2a244f9b97918d6ca33f532079e8dcb/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java",
                "sha": "c5f6fddd49a5d4a1b313d3d3bd594bad4034a3ef",
                "status": "modified"
            }
        ],
        "message": "[CXF-6408] Preventing NPE",
        "parent": "https://github.com/apache/cxf/commit/50b4ccf167d73fc547a0567f49cdffe41e68cb9a",
        "patched_files": [
            "HTTPConduit.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "HTTPConduitTest.java"
        ]
    },
    "cxf_b875cec": {
        "bug_id": "cxf_b875cec",
        "commit": "https://github.com/apache/cxf/commit/b875cecedb449c764de9c6669dd6d7d80e146f23",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/b875cecedb449c764de9c6669dd6d7d80e146f23/core/src/main/java/org/apache/cxf/helpers/IOUtils.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/helpers/IOUtils.java?ref=b875cecedb449c764de9c6669dd6d7d80e146f23",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/cxf/helpers/IOUtils.java",
                "patch": "@@ -142,6 +142,9 @@ public static String newStringFromBytes(byte[] bytes, int start, int length) {\n \n     public static int copy(final InputStream input, final OutputStream output)\n         throws IOException {\n+        if (input == null) {\n+            return 0;\n+        }\n         if (output instanceof CopyingOutputStream) {\n             return ((CopyingOutputStream)output).copyFrom(input);\n         }",
                "raw_url": "https://github.com/apache/cxf/raw/b875cecedb449c764de9c6669dd6d7d80e146f23/core/src/main/java/org/apache/cxf/helpers/IOUtils.java",
                "sha": "5c4d18969505269119ad4080430a1b2440df71af",
                "status": "modified"
            }
        ],
        "message": "[CXF-6463] Preventing NPE if InputStream is null",
        "parent": "https://github.com/apache/cxf/commit/b97598447f52f1ae627ae2b06c98d2dd99abf539",
        "patched_files": [
            "IOUtils.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "IOUtilsTest.java"
        ]
    },
    "cxf_ba2db0b": {
        "bug_id": "cxf_ba2db0b",
        "commit": "https://github.com/apache/cxf/commit/ba2db0b4691f6ebc83ce41d3b73a77ef9d929793",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/ba2db0b4691f6ebc83ce41d3b73a77ef9d929793/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/processor/internal/ServiceProcessor.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/processor/internal/ServiceProcessor.java?ref=ba2db0b4691f6ebc83ce41d3b73a77ef9d929793",
                "deletions": 1,
                "filename": "tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/processor/internal/ServiceProcessor.java",
                "patch": "@@ -204,7 +204,8 @@ private void processService(JavaModel model) throws ToolException {\n                         name = name.substring(name.lastIndexOf('.') + 1);\n                     }\n                 }\n-                if (serviceBinding2.getJaxwsClass().getComments() != null) {\n+                if (serviceBinding2.getJaxwsClass() != null\n+                    && serviceBinding2.getJaxwsClass().getComments() != null) {\n                     jaxwsBinding.setClassJavaDoc(serviceBinding2.getJaxwsClass().getComments());\n                 }\n                 if (!serviceBinding2.getPackageJavaDoc().equals(\"\")) {",
                "raw_url": "https://github.com/apache/cxf/raw/ba2db0b4691f6ebc83ce41d3b73a77ef9d929793/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/processor/internal/ServiceProcessor.java",
                "sha": "92503938f560267ff0e26fe5c35b620f431a48a8",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cxf/blob/ba2db0b4691f6ebc83ce41d3b73a77ef9d929793/tools/wsdlto/test/src/test/java/org/apache/cxf/tools/wsdlto/jaxws/CodeGenBugTest.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/wsdlto/test/src/test/java/org/apache/cxf/tools/wsdlto/jaxws/CodeGenBugTest.java?ref=ba2db0b4691f6ebc83ce41d3b73a77ef9d929793",
                "deletions": 0,
                "filename": "tools/wsdlto/test/src/test/java/org/apache/cxf/tools/wsdlto/jaxws/CodeGenBugTest.java",
                "patch": "@@ -1176,4 +1176,16 @@ public void testCXF4128() throws Exception {\n             fail(\"shouldn't get exception\");\n         }\n     }\n+    \n+    @Test\n+    public void testCXF4452() throws Exception {\n+        try {\n+            env.put(ToolConstants.CFG_WSDLURL, getLocation(\"/wsdl2java_wsdl/hello_world.wsdl\"));\n+            env.put(ToolConstants.CFG_BINDING, getLocation(\"/wsdl2java_wsdl/cxf4452/binding.xml\"));\n+            processor.setContext(env);\n+            processor.execute();\n+        } catch (Exception e) {\n+            fail(\"shouldn't get exception\");\n+        }\n+    }\n }",
                "raw_url": "https://github.com/apache/cxf/raw/ba2db0b4691f6ebc83ce41d3b73a77ef9d929793/tools/wsdlto/test/src/test/java/org/apache/cxf/tools/wsdlto/jaxws/CodeGenBugTest.java",
                "sha": "c5b24a516a04909cd5ae99dacf80694e474496e9",
                "status": "modified"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/cxf/blob/ba2db0b4691f6ebc83ce41d3b73a77ef9d929793/tools/wsdlto/test/src/test/resources/wsdl2java_wsdl/cxf4452/binding.xml",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/wsdlto/test/src/test/resources/wsdl2java_wsdl/cxf4452/binding.xml?ref=ba2db0b4691f6ebc83ce41d3b73a77ef9d929793",
                "deletions": 0,
                "filename": "tools/wsdlto/test/src/test/resources/wsdl2java_wsdl/cxf4452/binding.xml",
                "patch": "@@ -0,0 +1,23 @@\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements. See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership. The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License. You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied. See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+-->\n+<bindings wsdlLocation=\"../hello_world.wsdl\" xmlns=\"http://java.sun.com/xml/ns/jaxws\" xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\">\n+<bindings node=\"wsdl:definitions/wsdl:service[@name='SOAPService']\">\n+<package name=\"cxf4452.binding.test\"/>\n+</bindings>\n+</bindings>",
                "raw_url": "https://github.com/apache/cxf/raw/ba2db0b4691f6ebc83ce41d3b73a77ef9d929793/tools/wsdlto/test/src/test/resources/wsdl2java_wsdl/cxf4452/binding.xml",
                "sha": "a7ec7dc92f16a5547d0d69ebaf23807c43539905",
                "status": "added"
            }
        ],
        "message": "[CXF-4452]NullPointerException when trying to customize the package name for a service definition without customizing the class name.\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1370687 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/2bc939a7f5af22f0ed9ea3d81ea93ec33630a6f6",
        "patched_files": [
            "binding.java",
            "ServiceProcessor.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "CodeGenBugTest.java"
        ]
    },
    "cxf_bb1e056": {
        "bug_id": "cxf_bb1e056",
        "commit": "https://github.com/apache/cxf/commit/bb1e05690f88ea3a4781bd7939c68c8c0495517c",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/bb1e05690f88ea3a4781bd7939c68c8c0495517c/rt/security-saml/src/main/java/org/apache/cxf/rt/security/saml/interceptor/WSS4JBasicAuthValidator.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/security-saml/src/main/java/org/apache/cxf/rt/security/saml/interceptor/WSS4JBasicAuthValidator.java?ref=bb1e05690f88ea3a4781bd7939c68c8c0495517c",
                "deletions": 1,
                "filename": "rt/security-saml/src/main/java/org/apache/cxf/rt/security/saml/interceptor/WSS4JBasicAuthValidator.java",
                "patch": "@@ -48,7 +48,7 @@\n /**\n  * An abstract class containing some functionality to validate a username + password received\n  * via HTTP Basic Authentication via a WSS4J Validator (and hence JAAS, the STS, etc.). It can\n- * be subclasses and used as a CXF interceptor or else via a JAX-RS ContainerRequestFilter.\n+ * be subclassed and used as a CXF interceptor or else via a JAX-RS ContainerRequestFilter.\n  */\n public abstract class WSS4JBasicAuthValidator {\n ",
                "raw_url": "https://github.com/apache/cxf/raw/bb1e05690f88ea3a4781bd7939c68c8c0495517c/rt/security-saml/src/main/java/org/apache/cxf/rt/security/saml/interceptor/WSS4JBasicAuthValidator.java",
                "sha": "00a6227c5f535f4150ac94307689d9310310f5a7",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cxf/blob/bb1e05690f88ea3a4781bd7939c68c8c0495517c/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/jwt/JWTTokenProvider.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/jwt/JWTTokenProvider.java?ref=bb1e05690f88ea3a4781bd7939c68c8c0495517c",
                "deletions": 3,
                "filename": "services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/jwt/JWTTokenProvider.java",
                "patch": "@@ -245,9 +245,12 @@ private String signToken(\n                 }\n             }\n             // Get the password\n-            WSPasswordCallback[] cb = {new WSPasswordCallback(alias, WSPasswordCallback.SIGNATURE)};\n-            callbackHandler.handle(cb);\n-            String password = cb[0].getPassword();\n+            String password = null;\n+            if (callbackHandler != null) {\n+                WSPasswordCallback[] cb = {new WSPasswordCallback(alias, WSPasswordCallback.SIGNATURE)};\n+                callbackHandler.handle(cb);\n+                password = cb[0].getPassword();\n+            }\n \n             Properties signingProperties = new Properties();\n ",
                "raw_url": "https://github.com/apache/cxf/raw/bb1e05690f88ea3a4781bd7939c68c8c0495517c/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/jwt/JWTTokenProvider.java",
                "sha": "9119a0ce79b6d28c191c3ba975b5d8aad5953ee5",
                "status": "modified"
            }
        ],
        "message": "NPE fix",
        "parent": "https://github.com/apache/cxf/commit/3fc5e29018ca32c14f82ced1f07678c4bf35bfea",
        "patched_files": [
            "JWTTokenProvider.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JWTTokenProviderTest.java"
        ]
    },
    "cxf_bb42285": {
        "bug_id": "cxf_bb42285",
        "commit": "https://github.com/apache/cxf/commit/bb42285dce2af51edf4f90985a50b6eed5a77015",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/bb42285dce2af51edf4f90985a50b6eed5a77015/rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/soap/MAPCodec.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/soap/MAPCodec.java?ref=bb42285dce2af51edf4f90985a50b6eed5a77015",
                "deletions": 2,
                "filename": "rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/soap/MAPCodec.java",
                "patch": "@@ -826,8 +826,9 @@ private void restoreExchange(SoapMessage message, AddressingProperties maps) {\n                                           \"org.apache.cxf.ws.addressing.MAPAggregator.addressingDisabled\",\n                                           false)) {\n                     //see if it can directly be correlated with the out message:\n-                    AddressingProperties outp = ContextUtils.retrieveMAPs(message.getExchange().getOutMessage(),\n-                                                                          false, true, false);\n+                    Message outmsg = message.getExchange().getOutMessage();\n+                    AddressingProperties outp = outmsg != null \n+                        ? ContextUtils.retrieveMAPs(outmsg, false, true, false) : null;\n                     if (outp == null \n                         || !outp.getMessageID().getValue().equals(maps.getRelatesTo().getValue())) {\n                         LOG.log(Level.WARNING, \"CORRELATION_FAILURE_MSG\");",
                "raw_url": "https://github.com/apache/cxf/raw/bb42285dce2af51edf4f90985a50b6eed5a77015/rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/soap/MAPCodec.java",
                "sha": "fb229afa58515c8e51321b056eff94816f2f3d68",
                "status": "modified"
            }
        ],
        "message": "[CXF-5057] NPE at the decoupled endpoint when receving a response messge with unknown identifier\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1489942 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/90c163306e79d9f2d38c094ac6b8996fc7c62bcc",
        "patched_files": [
            "MAPCodec.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "MAPCodecTest.java"
        ]
    },
    "cxf_bbcbac0": {
        "bug_id": "cxf_bbcbac0",
        "commit": "https://github.com/apache/cxf/commit/bbcbac00dd7a1bf5f0c68f9a77dae1497d969167",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cxf/blob/bbcbac00dd7a1bf5f0c68f9a77dae1497d969167/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/CryptoCoverageChecker.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/CryptoCoverageChecker.java?ref=bbcbac00dd7a1bf5f0c68f9a77dae1497d969167",
                "deletions": 0,
                "filename": "rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/CryptoCoverageChecker.java",
                "patch": "@@ -116,6 +116,10 @@ public void handleMessage(SoapMessage message) throws Fault {\n             // return\n         }\n         \n+        if (message.getContent(SOAPMessage.class) == null) {\n+            throw new SoapFault(\"Error obtaining SOAP document\", Fault.FAULT_CODE_CLIENT);\n+        }\n+        \n         Element documentElement = null;\n         try {\n             SOAPMessage saajDoc = message.getContent(SOAPMessage.class);",
                "raw_url": "https://github.com/apache/cxf/raw/bbcbac00dd7a1bf5f0c68f9a77dae1497d969167/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/CryptoCoverageChecker.java",
                "sha": "b5a0d972ea88cfadaca4c390a70ca2dfeacc5e9a",
                "status": "modified"
            }
        ],
        "message": "NPE fix",
        "parent": "https://github.com/apache/cxf/commit/4c9cc32f7bba136b3970c91f15a7f24c94c94c89",
        "patched_files": [
            "CryptoCoverageChecker.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "CryptoCoverageCheckerTest.java"
        ]
    },
    "cxf_c1a43f2": {
        "bug_id": "cxf_c1a43f2",
        "commit": "https://github.com/apache/cxf/commit/c1a43f2e6593c7dbf3b7a40e6533e37fee2ef9a9",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cxf/blob/c1a43f2e6593c7dbf3b7a40e6533e37fee2ef9a9/rt/transports/websocket/src/main/java/org/apache/cxf/transport/websocket/ahc/AhcWebSocketConduit.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/websocket/src/main/java/org/apache/cxf/transport/websocket/ahc/AhcWebSocketConduit.java?ref=c1a43f2e6593c7dbf3b7a40e6533e37fee2ef9a9",
                "deletions": 1,
                "filename": "rt/transports/websocket/src/main/java/org/apache/cxf/transport/websocket/ahc/AhcWebSocketConduit.java",
                "patch": "@@ -447,7 +447,15 @@ private String readLine() {\n         }\n \n         private int length(Object o) {\n-            return o instanceof char[] ? ((String)o).length() : (o instanceof byte[] ? ((byte[])o).length : 0);\n+            if (o instanceof String) {\n+                return ((String)o).length();\n+            } else if (o instanceof char[]) {\n+                return ((char[])o).length;\n+            } else if (o instanceof byte[]) {\n+                return ((byte[])o).length;\n+            } else {\n+                return 0;\n+            }\n         }\n \n         private int getchar(Object o, int p) {",
                "raw_url": "https://github.com/apache/cxf/raw/c1a43f2e6593c7dbf3b7a40e6533e37fee2ef9a9/rt/transports/websocket/src/main/java/org/apache/cxf/transport/websocket/ahc/AhcWebSocketConduit.java",
                "sha": "897b0d1a3d5e1f25d50056eb843a63a89509c168",
                "status": "modified"
            },
            {
                "additions": 72,
                "blob_url": "https://github.com/apache/cxf/blob/c1a43f2e6593c7dbf3b7a40e6533e37fee2ef9a9/rt/transports/websocket/src/test/java/org/apache/cxf/transport/websocket/ahc/AhcWebSocketConduitTest.java",
                "changes": 72,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/websocket/src/test/java/org/apache/cxf/transport/websocket/ahc/AhcWebSocketConduitTest.java?ref=c1a43f2e6593c7dbf3b7a40e6533e37fee2ef9a9",
                "deletions": 0,
                "filename": "rt/transports/websocket/src/test/java/org/apache/cxf/transport/websocket/ahc/AhcWebSocketConduitTest.java",
                "patch": "@@ -0,0 +1,72 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.transport.websocket.ahc;\n+\n+import org.apache.cxf.transport.websocket.WebSocketConstants;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * \n+ */\n+public class AhcWebSocketConduitTest extends Assert {\n+    private static final String TEST_RESPONSE1 = \n+        \"200\\r\\nresponseId: 59610eed-d9de-4692-96d4-bb95a36c41ea\\r\\nContent-Type: text/plain\\r\\n\\r\\nHola!\";\n+    private static final String TEST_RESPONSE2 = \n+        \"responseId: 59610eed-d9de-4692-96d4-bb95a36c41ea\\r\\n\\r\\nNada!\";\n+\n+    @Test\n+    public void testResponseParsing() throws Exception {\n+\n+        // with all the headers using type string\n+        AhcWebSocketConduit.Response resp = \n+            new AhcWebSocketConduit.Response(WebSocketConstants.DEFAULT_RESPONSE_ID_KEY, TEST_RESPONSE1);\n+        assertEquals(200, resp.getStatusCode());\n+        assertEquals(\"59610eed-d9de-4692-96d4-bb95a36c41ea\", resp.getId());\n+        assertEquals(\"text/plain\", resp.getContentType());\n+        assertTrue(resp.getEntity() instanceof String);\n+        assertEquals(\"Hola!\", resp.getEntity());\n+\n+        // with all the heaers using type byte[]\n+        resp = new AhcWebSocketConduit.Response(WebSocketConstants.DEFAULT_RESPONSE_ID_KEY, TEST_RESPONSE1.getBytes());\n+        assertEquals(200, resp.getStatusCode());\n+        assertEquals(\"59610eed-d9de-4692-96d4-bb95a36c41ea\", resp.getId());\n+        assertEquals(\"text/plain\", resp.getContentType());\n+        assertTrue(resp.getEntity() instanceof byte[]);\n+        assertEquals(\"Hola!\", resp.getTextEntity());\n+\n+        // with only the id header using type String\n+        resp = new AhcWebSocketConduit.Response(WebSocketConstants.DEFAULT_RESPONSE_ID_KEY, TEST_RESPONSE2);\n+        assertEquals(0, resp.getStatusCode());\n+        assertEquals(\"59610eed-d9de-4692-96d4-bb95a36c41ea\", resp.getId());\n+        assertNull(resp.getContentType());\n+        assertTrue(resp.getEntity() instanceof String);\n+        assertEquals(\"Nada!\", resp.getEntity());\n+\n+        // with only the id header using type byte[]\n+        resp = new AhcWebSocketConduit.Response(WebSocketConstants.DEFAULT_RESPONSE_ID_KEY, TEST_RESPONSE2.getBytes());\n+        assertEquals(0, resp.getStatusCode());\n+        assertEquals(\"59610eed-d9de-4692-96d4-bb95a36c41ea\", resp.getId());\n+        assertNull(resp.getContentType());\n+        assertTrue(resp.getEntity() instanceof byte[]);\n+        assertEquals(\"Nada!\", resp.getTextEntity());\n+    }\n+}",
                "raw_url": "https://github.com/apache/cxf/raw/c1a43f2e6593c7dbf3b7a40e6533e37fee2ef9a9/rt/transports/websocket/src/test/java/org/apache/cxf/transport/websocket/ahc/AhcWebSocketConduitTest.java",
                "sha": "5508fbd9cfbbd95ebe366165cb3bfea6d975599b",
                "status": "added"
            }
        ],
        "message": "[CXF-6250] WebSocket conduit fails to process String based responses and throws NPE",
        "parent": "https://github.com/apache/cxf/commit/daac77b18e2693ef4ad424937aedc764229a63ee",
        "patched_files": [
            "AhcWebSocketConduit.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "AhcWebSocketConduitTest.java"
        ]
    },
    "cxf_c2c1a6b": {
        "bug_id": "cxf_c2c1a6b",
        "commit": "https://github.com/apache/cxf/commit/c2c1a6ba6ff3610be0efeadbe70fb98109f32b73",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cxf/blob/c2c1a6ba6ff3610be0efeadbe70fb98109f32b73/api/src/main/java/org/apache/cxf/service/model/ServiceModelUtil.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/api/src/main/java/org/apache/cxf/service/model/ServiceModelUtil.java?ref=c2c1a6ba6ff3610be0efeadbe70fb98109f32b73",
                "deletions": 0,
                "filename": "api/src/main/java/org/apache/cxf/service/model/ServiceModelUtil.java",
                "patch": "@@ -183,4 +183,16 @@ public static EndpointInfo findBestEndpointInfo(QName qn, List<ServiceInfo> serv\n \n         return best;\n     }\n+    \n+    public static QName getServiceQName(EndpointInfo ei) {\n+        InterfaceInfo ii = ei.getInterface();\n+        if (ii != null) {\n+            return ii.getName();\n+        } else if (ei.getService() != null) {\n+            return ei.getService().getName();\n+        } else {\n+            return ei.getName();\n+        }\n+        \n+    }\n }",
                "raw_url": "https://github.com/apache/cxf/raw/c2c1a6ba6ff3610be0efeadbe70fb98109f32b73/api/src/main/java/org/apache/cxf/service/model/ServiceModelUtil.java",
                "sha": "663a925bb9e0c13ee6d913c85e0a091f11a464d4",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/c2c1a6ba6ff3610be0efeadbe70fb98109f32b73/services/ws-discovery/ws-discovery-api/src/main/java/org/apache/cxf/ws/discovery/internal/WSDiscoveryServiceImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/services/ws-discovery/ws-discovery-api/src/main/java/org/apache/cxf/ws/discovery/internal/WSDiscoveryServiceImpl.java?ref=c2c1a6ba6ff3610be0efeadbe70fb98109f32b73",
                "deletions": 1,
                "filename": "services/ws-discovery/ws-discovery-api/src/main/java/org/apache/cxf/ws/discovery/internal/WSDiscoveryServiceImpl.java",
                "patch": "@@ -55,6 +55,7 @@\n import org.apache.cxf.common.jaxb.JAXBContextCache;\n import org.apache.cxf.common.util.StringUtils;\n import org.apache.cxf.endpoint.Server;\n+import org.apache.cxf.service.model.ServiceModelUtil;\n import org.apache.cxf.staxutils.StaxUtils;\n import org.apache.cxf.staxutils.transform.InTransformReader;\n import org.apache.cxf.ws.discovery.WSDiscoveryClient;\n@@ -123,7 +124,10 @@ public void serverStarted(Server server) {\n         HelloType ht = new HelloType();\n         ht.setScopes(new ScopesType());\n         ht.setMetadataVersion(1);\n-        ht.getTypes().add(server.getEndpoint().getEndpointInfo().getInterface().getName());\n+        \n+        QName sn = ServiceModelUtil.getServiceQName(server.getEndpoint().getEndpointInfo());\n+        ht.getTypes().add(sn);\n+        \n         Object o = server.getEndpoint().get(\"ws-discovery-scopes\");\n         if (o != null) {\n             setScopes(ht, o);",
                "raw_url": "https://github.com/apache/cxf/raw/c2c1a6ba6ff3610be0efeadbe70fb98109f32b73/services/ws-discovery/ws-discovery-api/src/main/java/org/apache/cxf/ws/discovery/internal/WSDiscoveryServiceImpl.java",
                "sha": "5017e7d03e7c7a3435aa099363196e5c1af88546",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cxf/blob/c2c1a6ba6ff3610be0efeadbe70fb98109f32b73/services/ws-discovery/ws-discovery-api/src/main/java/org/apache/cxf/ws/discovery/listeners/WSDiscoveryServerListener.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/services/ws-discovery/ws-discovery-api/src/main/java/org/apache/cxf/ws/discovery/listeners/WSDiscoveryServerListener.java?ref=c2c1a6ba6ff3610be0efeadbe70fb98109f32b73",
                "deletions": 16,
                "filename": "services/ws-discovery/ws-discovery-api/src/main/java/org/apache/cxf/ws/discovery/listeners/WSDiscoveryServerListener.java",
                "patch": "@@ -25,14 +25,16 @@\n import org.apache.cxf.BusFactory;\n import org.apache.cxf.endpoint.Server;\n import org.apache.cxf.endpoint.ServerLifeCycleListener;\n-import org.apache.cxf.service.model.EndpointInfo;\n-import org.apache.cxf.service.model.InterfaceInfo;\n+import org.apache.cxf.service.model.ServiceModelUtil;\n import org.apache.cxf.ws.discovery.internal.WSDiscoveryServiceImpl;\n \n /**\n  * \n  */\n public class WSDiscoveryServerListener implements ServerLifeCycleListener {\n+    private static final String WS_DISCOVERY_SERVICE_NS = \n+        \"http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01\";\n+    \n     final Bus bus;\n     volatile WSDiscoveryServiceImpl service;\n \n@@ -65,31 +67,22 @@ private static WSDiscoveryServiceImpl getStaticService() {\n     }\n \n     public void startServer(Server server) {\n-        QName sn = getServiceQName(server);\n-        if (\"http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01\".equals(sn.getNamespaceURI())) {\n+        if (isWsDiscoveryServer(server)) {\n             return;\n         }\n         getService().serverStarted(server);\n     }\n \n     public void stopServer(Server server) {\n-        QName sn = getServiceQName(server);\n-        if (\"http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01\".equals(sn.getNamespaceURI())) {\n+        if (isWsDiscoveryServer(server)) {\n             return;\n         }\n         getService().serverStopped(server);\n     }\n     \n-    private QName getServiceQName(Server server) {\n-        EndpointInfo ei = server.getEndpoint().getEndpointInfo();\n-        InterfaceInfo ii = ei.getInterface();\n-        if (ii != null) {\n-            return ii.getName();\n-        } else if (ei.getService() != null) {\n-            return ei.getService().getName();\n-        } else {\n-            return ei.getName();\n-        }\n+    private boolean isWsDiscoveryServer(Server server) {\n+        QName sn = ServiceModelUtil.getServiceQName(server.getEndpoint().getEndpointInfo());\n+        return WS_DISCOVERY_SERVICE_NS.equals(sn.getNamespaceURI());\n     }\n     \n }",
                "raw_url": "https://github.com/apache/cxf/raw/c2c1a6ba6ff3610be0efeadbe70fb98109f32b73/services/ws-discovery/ws-discovery-api/src/main/java/org/apache/cxf/ws/discovery/listeners/WSDiscoveryServerListener.java",
                "sha": "c018e880b3c46005ed8b3bbed890ca739390f19a",
                "status": "modified"
            }
        ],
        "message": "[CXF-4767] Fixing one more NPE when JAX-RS endpoints register with WS-Discovery service\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1440922 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/5f4f7d25cd0cfdb34193d99e4cee5a4f446aa3a9",
        "patched_files": [
            "ServiceModelUtil.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "ServiceModelUtilTest.java"
        ]
    },
    "cxf_c2e8ddb": {
        "bug_id": "cxf_c2e8ddb",
        "commit": "https://github.com/apache/cxf/commit/c2e8ddb5b1f3f83971f0ed4b5c9d72629e11285b",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cxf/blob/c2e8ddb5b1f3f83971f0ed4b5c9d72629e11285b/rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLServiceBuilder.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLServiceBuilder.java?ref=c2e8ddb5b1f3f83971f0ed4b5c9d72629e11285b",
                "deletions": 0,
                "filename": "rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLServiceBuilder.java",
                "patch": "@@ -265,6 +265,14 @@ public ServiceInfo buildMockService(Definition def, PortType p) {\n         for (Port port : cast(serv.getPorts().values(), Port.class)) {\n             Binding binding = port.getBinding();\n             PortType bindingPt = binding.getPortType();\n+            if (bindingPt == null) {\n+                org.apache.cxf.common.i18n.Message msg = new \n+                org.apache.cxf.common.i18n.Message(\"BINDING_MISSING_TYPE\",\n+                                                   LOG,\n+                                                   binding.getQName());\n+                throw new WSDLRuntimeException(msg);\n+            }\n+\n             //TODO: wsdl4j's bug. if there is recursive import,\n             //wsdl4j can not get operation input message\n             PortType pt = def.getPortType(bindingPt.getQName());",
                "raw_url": "https://github.com/apache/cxf/raw/c2e8ddb5b1f3f83971f0ed4b5c9d72629e11285b/rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLServiceBuilder.java",
                "sha": "f6d4ac447607507a6e1a32b23ab57d1bb8e7287a",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/cxf/blob/c2e8ddb5b1f3f83971f0ed4b5c9d72629e11285b/tools/wsdlto/test/src/test/java/org/apache/cxf/tools/wsdlto/jaxws/CodeGenBugTest.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/wsdlto/test/src/test/java/org/apache/cxf/tools/wsdlto/jaxws/CodeGenBugTest.java?ref=c2e8ddb5b1f3f83971f0ed4b5c9d72629e11285b",
                "deletions": 0,
                "filename": "tools/wsdlto/test/src/test/java/org/apache/cxf/tools/wsdlto/jaxws/CodeGenBugTest.java",
                "patch": "@@ -40,11 +40,27 @@\n import org.apache.cxf.tools.wsdlto.AbstractCodeGenTest;\n import org.apache.cxf.tools.wsdlto.WSDLToJava;\n import org.apache.cxf.tools.wsdlto.frontend.jaxws.validator.UniqueBodyValidator;\n+import org.apache.cxf.wsdl11.WSDLRuntimeException;\n+\n import org.junit.Test;\n import org.mortbay.jetty.Server;\n import org.mortbay.jetty.handler.ResourceHandler;\n \n public class CodeGenBugTest extends AbstractCodeGenTest {\n+    \n+    \n+    @Test\n+    public void testCXF1969() throws Exception {\n+        env.put(ToolConstants.CFG_WSDLURL, \n+                getLocation(\"/wsdl2java_wsdl/cxf1969/report_incident.wsdl\"));\n+        processor.setContext(env);\n+        \n+        try {\n+            processor.execute();\n+        } catch (WSDLRuntimeException wrex) {\n+            assertEquals(\"BINDING_MISSING_TYPE\", wrex.getMessage());\n+        }  \n+    }\n \n     @Test\n     // Test for CXF-1678",
                "raw_url": "https://github.com/apache/cxf/raw/c2e8ddb5b1f3f83971f0ed4b5c9d72629e11285b/tools/wsdlto/test/src/test/java/org/apache/cxf/tools/wsdlto/jaxws/CodeGenBugTest.java",
                "sha": "ade095bc1c0a4913809f6ce06831fdbd244c9b16",
                "status": "modified"
            },
            {
                "additions": 75,
                "blob_url": "https://github.com/apache/cxf/blob/c2e8ddb5b1f3f83971f0ed4b5c9d72629e11285b/tools/wsdlto/test/src/test/resources/wsdl2java_wsdl/cxf1969/report_incident.wsdl",
                "changes": 75,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/wsdlto/test/src/test/resources/wsdl2java_wsdl/cxf1969/report_incident.wsdl?ref=c2e8ddb5b1f3f83971f0ed4b5c9d72629e11285b",
                "deletions": 0,
                "filename": "tools/wsdlto/test/src/test/resources/wsdl2java_wsdl/cxf1969/report_incident.wsdl",
                "patch": "@@ -0,0 +1,75 @@\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n+<wsdl:definitions xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\"\r\n+\txmlns:tns=\"http://reportincident.example.camel.apache.org\"\r\n+\txmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\r\n+\txmlns:http=\"http://schemas.xmlsoap.org/wsdl/http/\"\r\n+\txmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\"\r\n+\ttargetNamespace=\"http://reportincident.example.camel.apache.org\">\r\n+\r\n+    <!-- Type definitions for input- and output parameters for webservice -->\r\n+    <wsdl:types>\r\n+        <xs:schema targetNamespace=\"http://reportincident.example.camel.apache.org\">\r\n+            <xs:element name=\"inputReportIncident\">\r\n+                <xs:complexType name=\"inputReportIncident\">\r\n+                    <xs:sequence>\r\n+                        <xs:element type=\"xs:string\" name=\"incidentId\"/>\r\n+                        <xs:element type=\"xs:string\" name=\"incidentDate\"/>\r\n+                        <xs:element type=\"xs:string\" name=\"givenName\"/>\r\n+                        <xs:element type=\"xs:string\" name=\"familyName\"/>\r\n+                        <xs:element type=\"xs:string\" name=\"summary\"/>\r\n+                        <xs:element type=\"xs:string\" name=\"details\"/>\r\n+                        <xs:element type=\"xs:string\" name=\"email\"/>\r\n+                        <xs:element type=\"xs:string\" name=\"phone\"/>\r\n+                    </xs:sequence>\r\n+                </xs:complexType>\r\n+            </xs:element>\r\n+            <xs:element name=\"outputReportIncident\">\r\n+                <xs:complexType name=\"outputReportIncident\">\r\n+                    <xs:sequence>\r\n+                        <xs:element type=\"xs:string\" name=\"code\"/>\r\n+                    </xs:sequence>\r\n+                </xs:complexType>\r\n+            </xs:element>\r\n+        </xs:schema>\r\n+    </wsdl:types>\r\n+\r\n+    <!-- Message definitions for input and output -->\r\n+    <wsdl:message name=\"inputReportIncident\">\r\n+        <wsdl:part name=\"in\" element=\"tns:inputReportIncident\"/>\r\n+    </wsdl:message>\r\n+    <wsdl:message name=\"outputReportIncident\">\r\n+        <wsdl:part name=\"out\" element=\"tns:outputReportIncident\"/>\r\n+    </wsdl:message>\r\n+\r\n+    <!-- Port (interface) definitions -->\r\n+    <wsdl:portType name=\"ReportIncidentEndpoint\">\r\n+        <wsdl:operation name=\"ReportIncident\">\r\n+            <wsdl:input message=\"tns:inputReportIncident\"/>\r\n+            <wsdl:output message=\"tns:outputReportIncident\"/>\r\n+        </wsdl:operation>\r\n+    </wsdl:portType>\r\n+\r\n+    <!-- Port bindings to transports and encoding - HTTP, document literal encoding is used -->\r\n+    <wsdl:binding name=\"ReportIncidentBinding\">\r\n+        <soap:binding transport=\"http://schemas.xmlsoap.org/soap/http\"/>\r\n+        <wsdl:operation name=\"ReportIncident\">\r\n+            <soap:operation\r\n+                    soapAction=\"http://reportincident.example.camel.apache.org/ReportIncident\"\r\n+                    style=\"document\"/>\r\n+            <wsdl:input>\r\n+                <soap:body parts=\"in\" use=\"literal\"/>\r\n+            </wsdl:input>\r\n+            <wsdl:output>\r\n+                <soap:body parts=\"out\" use=\"literal\"/>\r\n+            </wsdl:output>\r\n+        </wsdl:operation>\r\n+    </wsdl:binding>\r\n+\r\n+    <!-- Service definition -->\r\n+    <wsdl:service name=\"ReportIncidentEndpointService\">\r\n+        <wsdl:port name=\"ReportIncidentService\" binding=\"tns:ReportIncidentBinding\">\r\n+            <soap:address location=\"http://localhost:8080/part-five/webservices/incident\"/>\r\n+        </wsdl:port>\r\n+    </wsdl:service>\r\n+\r\n+</wsdl:definitions>\r",
                "raw_url": "https://github.com/apache/cxf/raw/c2e8ddb5b1f3f83971f0ed4b5c9d72629e11285b/tools/wsdlto/test/src/test/resources/wsdl2java_wsdl/cxf1969/report_incident.wsdl",
                "sha": "102910ad7351e22b6f217d521ba35bdbc2c82b6c",
                "status": "added"
            }
        ],
        "message": "CXF-1969 wsdl2java - NPE when wsdl has a missing attribute\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@736352 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/37dd5455220d5e678b533dbe53f1b97568eee84e",
        "patched_files": [
            "WSDLServiceBuilder.java",
            "report_incident.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "WSDLServiceBuilderTest.java",
            "CodeGenBugTest.java"
        ]
    },
    "cxf_c32136c": {
        "bug_id": "cxf_c32136c",
        "commit": "https://github.com/apache/cxf/commit/c32136c0bb980d152954eca44f6b8f06e84bd913",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/c32136c0bb980d152954eca44f6b8f06e84bd913/core/src/main/java/org/apache/cxf/service/model/ServiceModelUtil.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/service/model/ServiceModelUtil.java?ref=c32136c0bb980d152954eca44f6b8f06e84bd913",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/cxf/service/model/ServiceModelUtil.java",
                "patch": "@@ -52,6 +52,9 @@ public static String getTargetNamespace(Exchange exchange) {\n \n     public static BindingOperationInfo getOperation(Exchange exchange, String opName) {\n         Endpoint ep = exchange.get(Endpoint.class);\n+        if (ep == null) {\n+            return null;\n+        }\n         BindingInfo service = ep.getEndpointInfo().getBinding();\n \n         for (BindingOperationInfo b : service.getOperations()) {",
                "raw_url": "https://github.com/apache/cxf/raw/c32136c0bb980d152954eca44f6b8f06e84bd913/core/src/main/java/org/apache/cxf/service/model/ServiceModelUtil.java",
                "sha": "d3fe66e92999c1d6c122cb5731f8c1ff167cb4ad",
                "status": "modified"
            }
        ],
        "message": "added npe guard",
        "parent": "https://github.com/apache/cxf/commit/2f0b3e38212674883d610cfcfbd76b901bd3d997",
        "patched_files": [
            "ServiceModelUtil.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "ServiceModelUtilTest.java"
        ]
    },
    "cxf_c496780": {
        "bug_id": "cxf_c496780",
        "commit": "https://github.com/apache/cxf/commit/c4967804c45d220350a017473ccf2bdbef788efa",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/c4967804c45d220350a017473ccf2bdbef788efa/common/schemas/src/main/resources/schemas/wsdl/ws-addr-wsdl.xjb",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/common/schemas/src/main/resources/schemas/wsdl/ws-addr-wsdl.xjb?ref=c4967804c45d220350a017473ccf2bdbef788efa",
                "deletions": 1,
                "filename": "common/schemas/src/main/resources/schemas/wsdl/ws-addr-wsdl.xjb",
                "patch": "@@ -28,6 +28,6 @@\n         </jaxb:schemaBindings>\n     </jaxb:bindings>\n     <jaxb:bindings schemaLocation=\"ws-addr-wsdl.xsd\" node=\"/xs:schema/xs:element[@name='UsingAddressing']\">\n-      <jaxb:class ref=\"org.apache.cxf.ws.addressing.wsdl.UsingAddressingImpl\"/>\n+      <jaxb:class ref=\"org.apache.cxf.ws.addressing.wsdl.UsingAddressing\"/>\n     </jaxb:bindings>\n </jaxb:bindings>",
                "raw_url": "https://github.com/apache/cxf/raw/c4967804c45d220350a017473ccf2bdbef788efa/common/schemas/src/main/resources/schemas/wsdl/ws-addr-wsdl.xjb",
                "sha": "1ba982c0f6432d618f00075e1d2724ea068094bb",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/c4967804c45d220350a017473ccf2bdbef788efa/rt/core/src/main/java/org/apache/cxf/transport/http/QueryMessages.properties",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/main/java/org/apache/cxf/transport/http/QueryMessages.properties?ref=c4967804c45d220350a017473ccf2bdbef788efa",
                "deletions": 0,
                "filename": "rt/core/src/main/java/org/apache/cxf/transport/http/QueryMessages.properties",
                "patch": "@@ -19,3 +19,5 @@\n #\n #\n COULD_NOT_PROVIDE_WSDL = Exception occurred while trying to process {0}\n+WSDL_NOT_FOUND = Could not find wsdl {0}\n+SCHEMA_NOT_FOUND = Could not find xsd {0}",
                "raw_url": "https://github.com/apache/cxf/raw/c4967804c45d220350a017473ccf2bdbef788efa/rt/core/src/main/java/org/apache/cxf/transport/http/QueryMessages.properties",
                "sha": "8969ba3d6872f1c27cd96cd0579f5a92c310bb9d",
                "status": "modified"
            },
            {
                "additions": 51,
                "blob_url": "https://github.com/apache/cxf/blob/c4967804c45d220350a017473ccf2bdbef788efa/rt/core/src/main/java/org/apache/cxf/transport/http/WSDLQueryHandler.java",
                "changes": 84,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/main/java/org/apache/cxf/transport/http/WSDLQueryHandler.java?ref=c4967804c45d220350a017473ccf2bdbef788efa",
                "deletions": 33,
                "filename": "rt/core/src/main/java/org/apache/cxf/transport/http/WSDLQueryHandler.java",
                "patch": "@@ -145,7 +145,12 @@ public void writeResponse(String baseUri, String ctxUri,\n                     String wsdl2 = resolveWithCatalogs(OASISCatalogManager.getCatalogManager(bus),\n                                                        wsdl,\n                                                        base);\n-                    def = mp.get(wsdl2);\n+                    if (wsdl2 != null) {\n+                        def = mp.get(wsdl2);\n+                    }\n+                }\n+                if (def == null) {\n+                    throw new WSDLQueryException(new Message(\"WSDL_NOT_FOUND\", LOG, wsdl), null);\n                 }\n                 \n                 synchronized (def) {\n@@ -168,7 +173,12 @@ public void writeResponse(String baseUri, String ctxUri,\n                     String xsd2 = resolveWithCatalogs(OASISCatalogManager.getCatalogManager(bus),\n                                                        xsd,\n                                                        base);\n-                    si = smp.get(xsd2);\n+                    if (xsd2 != null) { \n+                        si = smp.get(xsd2);\n+                    }\n+                }\n+                if (si == null) {\n+                    throw new WSDLQueryException(new Message(\"SCHEMA_NOT_FOUND\", LOG, wsdl), null);\n                 }\n                 \n                 String uri = si.getReferencedSchema().getDocumentBaseURI();\n@@ -185,37 +195,7 @@ public void writeResponse(String baseUri, String ctxUri,\n                 doc = XMLUtils.getParser().parse(src);\n             }\n             \n-            NodeList nl = doc.getDocumentElement()\n-                .getElementsByTagNameNS(\"http://www.w3.org/2001/XMLSchema\",\n-                                        \"import\");\n-            for (int x = 0; x < nl.getLength(); x++) {\n-                Element el = (Element)nl.item(x);\n-                String sl = el.getAttribute(\"schemaLocation\");\n-                if (smp.containsKey(sl)) {\n-                    el.setAttribute(\"schemaLocation\", base + \"?xsd=\" + sl);\n-                }\n-            }\n-            nl = doc.getDocumentElement()\n-                .getElementsByTagNameNS(\"http://www.w3.org/2001/XMLSchema\",\n-                                        \"include\");\n-            for (int x = 0; x < nl.getLength(); x++) {\n-                Element el = (Element)nl.item(x);\n-                String sl = el.getAttribute(\"schemaLocation\");\n-                if (smp.containsKey(sl)) {\n-                    el.setAttribute(\"schemaLocation\", base + \"?xsd=\" + sl);\n-                }\n-            }\n-            nl = doc.getDocumentElement()\n-                .getElementsByTagNameNS(\"http://schemas.xmlsoap.org/wsdl/\",\n-                                    \"import\");\n-            for (int x = 0; x < nl.getLength(); x++) {\n-                Element el = (Element)nl.item(x);\n-                String sl = el.getAttribute(\"location\");\n-                if (mp.containsKey(sl)) {\n-                    el.setAttribute(\"location\", base + \"?wsdl=\" + sl);\n-                }\n-            }\n-            doc.setXmlStandalone(true);\n+            updateDoc(doc, base, mp, smp);\n             String enc = doc.getXmlEncoding();\n             if (enc == null) {\n                 enc = \"utf-8\";\n@@ -225,12 +205,50 @@ public void writeResponse(String baseUri, String ctxUri,\n                                                                      enc);\n             StaxUtils.writeNode(doc, writer, true);\n             writer.flush();\n+        } catch (WSDLQueryException wex) {\n+            throw wex;\n         } catch (Exception wex) {\n             throw new WSDLQueryException(new Message(\"COULD_NOT_PROVIDE_WSDL\",\n                                                      LOG,\n                                                      baseUri), wex);\n         }\n     }\n+    \n+    private void updateDoc(Document doc, String base,\n+                           Map<String, Definition> mp,\n+                           Map<String, SchemaReference> smp) {\n+        NodeList nl = doc.getDocumentElement()\n+            .getElementsByTagNameNS(\"http://www.w3.org/2001/XMLSchema\",\n+                                    \"import\");\n+        for (int x = 0; x < nl.getLength(); x++) {\n+            Element el = (Element)nl.item(x);\n+            String sl = el.getAttribute(\"schemaLocation\");\n+            if (smp.containsKey(sl)) {\n+                el.setAttribute(\"schemaLocation\", base + \"?xsd=\" + sl);\n+            }\n+        }\n+        nl = doc.getDocumentElement()\n+            .getElementsByTagNameNS(\"http://www.w3.org/2001/XMLSchema\",\n+                                    \"include\");\n+        for (int x = 0; x < nl.getLength(); x++) {\n+            Element el = (Element)nl.item(x);\n+            String sl = el.getAttribute(\"schemaLocation\");\n+            if (smp.containsKey(sl)) {\n+                el.setAttribute(\"schemaLocation\", base + \"?xsd=\" + sl);\n+            }\n+        }\n+        nl = doc.getDocumentElement()\n+            .getElementsByTagNameNS(\"http://schemas.xmlsoap.org/wsdl/\",\n+                                \"import\");\n+        for (int x = 0; x < nl.getLength(); x++) {\n+            Element el = (Element)nl.item(x);\n+            String sl = el.getAttribute(\"location\");\n+            if (mp.containsKey(sl)) {\n+                el.setAttribute(\"location\", base + \"?wsdl=\" + sl);\n+            }\n+        }\n+        doc.setXmlStandalone(true);\n+    }\n \n     static String resolveWithCatalogs(OASISCatalogManager catalogs, String start, String base) {\n         String resolvedSchemaLocation = null;",
                "raw_url": "https://github.com/apache/cxf/raw/c4967804c45d220350a017473ccf2bdbef788efa/rt/core/src/main/java/org/apache/cxf/transport/http/WSDLQueryHandler.java",
                "sha": "f9b558515de127ac5034502ae36082b055fa52b8",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/c4967804c45d220350a017473ccf2bdbef788efa/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPDestination.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPDestination.java?ref=c4967804c45d220350a017473ccf2bdbef788efa",
                "deletions": 0,
                "filename": "rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPDestination.java",
                "patch": "@@ -230,6 +230,11 @@ protected void doService(ServletContext context,\n                             qh.writeResponse(requestURL, pathInfo, endpointInfo, resp.getOutputStream());\n                         } catch (Exception ex) {\n                             LOG.log(Level.WARNING, \"writeResponse failed: \", ex);\n+                            try {\n+                                resp.sendError(500, ex.getMessage());\n+                            } catch (IOException ioe) {\n+                                //ignore\n+                            }\n                         }\n                         endpointInfo.setAddress(oldAddress);\n                         resp.getOutputStream().flush();                     ",
                "raw_url": "https://github.com/apache/cxf/raw/c4967804c45d220350a017473ccf2bdbef788efa/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPDestination.java",
                "sha": "d6105e821fda49b90f36ab715a3f07ca9d429f83",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cxf/blob/c4967804c45d220350a017473ccf2bdbef788efa/systests/src/test/java/org/apache/cxf/systest/http/PublishedEndpointUrlTest.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/src/test/java/org/apache/cxf/systest/http/PublishedEndpointUrlTest.java?ref=c4967804c45d220350a017473ccf2bdbef788efa",
                "deletions": 0,
                "filename": "systests/src/test/java/org/apache/cxf/systest/http/PublishedEndpointUrlTest.java",
                "patch": "@@ -18,6 +18,8 @@\n  */\n package org.apache.cxf.systest.http;\n \n+import java.net.HttpURLConnection;\n+import java.net.URL;\n import java.util.Collection;\n import java.util.List;\n \n@@ -55,6 +57,11 @@ public void testPublishedEndpointUrl() throws Exception {\n \n         WSDLReader wsdlReader = WSDLFactory.newInstance().newWSDLReader();\n         wsdlReader.setFeature(\"javax.wsdl.verbose\", false);\n+        \n+        URL url = new URL(svrFactory.getAddress() + \"?wsdl=1\");\n+        HttpURLConnection connect = (HttpURLConnection)url.openConnection();\n+        assertEquals(500, connect.getResponseCode());\n+        \n         Definition wsdl = wsdlReader.readWSDL(svrFactory.getAddress() + \"?wsdl\");\n         assertNotNull(wsdl);\n         ",
                "raw_url": "https://github.com/apache/cxf/raw/c4967804c45d220350a017473ccf2bdbef788efa/systests/src/test/java/org/apache/cxf/systest/http/PublishedEndpointUrlTest.java",
                "sha": "af67f72125deee6cc88e268351346b6655bf1927",
                "status": "modified"
            }
        ],
        "message": "[CXF-1644] Return a real error message if the wsdl/schema isn't found in the maps instead of a NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@667197 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/8c2287729186511f1c97ea968352552368ff1825",
        "patched_files": [
            "ws-addr-wsdl.java",
            "JettyHTTPDestination.java",
            "WSDLQueryHandler.java",
            "QueryMessages.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JettyHTTPDestinationTest.java",
            "PublishedEndpointUrlTest.java"
        ]
    },
    "cxf_c6ec599": {
        "bug_id": "cxf_c6ec599",
        "commit": "https://github.com/apache/cxf/commit/c6ec599873a67cccae0a75270900c1cbec2cd796",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/c6ec599873a67cccae0a75270900c1cbec2cd796/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/SAMLSSOResponseValidator.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/SAMLSSOResponseValidator.java?ref=c6ec599873a67cccae0a75270900c1cbec2cd796",
                "deletions": 1,
                "filename": "rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/SAMLSSOResponseValidator.java",
                "patch": "@@ -172,7 +172,7 @@ private void validateIssuer(org.opensaml.saml.saml2.core.Issuer issuer) throws W\n         }\n \n         // Issuer value must match (be contained in) Issuer IDP\n-        if (enforceKnownIssuer && !issuerIDP.startsWith(issuer.getValue())) {\n+        if (enforceKnownIssuer && (issuer.getValue() == null || !issuerIDP.startsWith(issuer.getValue()))) {\n             LOG.fine(\"Issuer value: \" + issuer.getValue() + \" does not match issuer IDP: \"\n                 + issuerIDP);\n             throw new WSSecurityException(WSSecurityException.ErrorCode.FAILURE, \"invalidSAMLsecurity\");",
                "raw_url": "https://github.com/apache/cxf/raw/c6ec599873a67cccae0a75270900c1cbec2cd796/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/SAMLSSOResponseValidator.java",
                "sha": "0e70836423db9d3b5a035d2985271b546837d41f",
                "status": "modified"
            }
        ],
        "message": "NPE fix if a SAML Issuer is null",
        "parent": "https://github.com/apache/cxf/commit/b62ea11153d17a5849ef4242842f22ca996ce2a1",
        "patched_files": [
            "SAMLSSOResponseValidator.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "SAMLSSOResponseValidatorTest.java"
        ]
    },
    "cxf_c786610": {
        "bug_id": "cxf_c786610",
        "commit": "https://github.com/apache/cxf/commit/c786610bcc187d8a350437c4d01a59fc5d8d0cae",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/c786610bcc187d8a350437c4d01a59fc5d8d0cae/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/EndpointImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/EndpointImpl.java?ref=c786610bcc187d8a350437c4d01a59fc5d8d0cae",
                "deletions": 1,
                "filename": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/EndpointImpl.java",
                "patch": "@@ -337,7 +337,7 @@ protected void doPublish(String addr) {\n                 if (!endpointInfo.getAddress().contains(addr)) {\n                     endpointInfo.setAddress(addr);\n                 }\n-                if (publishedEndpointUrl != null) {\n+                if (publishedEndpointUrl != null && wsdlLocation != null) {\n                     endpointInfo.setProperty(WSDLGetUtils.PUBLISHED_ENDPOINT_URL, publishedEndpointUrl);\n                     //early update the publishedEndpointUrl so that endpoints in the same app sharing the same wsdl\n                     //do not require all of them to be queried for wsdl before the wsdl is finally fully updated",
                "raw_url": "https://github.com/apache/cxf/raw/c786610bcc187d8a350437c4d01a59fc5d8d0cae/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/EndpointImpl.java",
                "sha": "88e93a1b620188f76f0a39a416222e1d04cac36e",
                "status": "modified"
            }
        ],
        "message": "[CXF-4856] Fix a NPE for java first cases.\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1450880 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/df3da6f92d4159380b0ddf7dbb9e174e00cdd51b",
        "patched_files": [
            "EndpointImpl.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "TestEndpointImpl.java",
            "EndpointImplTest.java"
        ]
    },
    "cxf_cdc55cd": {
        "bug_id": "cxf_cdc55cd",
        "commit": "https://github.com/apache/cxf/commit/cdc55cd46959d896a2e0e471a03a4733b1662394",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/cdc55cd46959d896a2e0e471a03a4733b1662394/rt/transports/http/src/main/java/org/apache/cxf/transport/http/Headers.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/http/Headers.java?ref=cdc55cd46959d896a2e0e471a03a4733b1662394",
                "deletions": 1,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/http/Headers.java",
                "patch": "@@ -277,7 +277,8 @@ void logProtocolHeaders(Level level) {\n         for (String header : headers.keySet()) {\n             List<?> headerList = headers.get(header);\n             for (Object value : headerList) {\n-                LOG.log(level, header + \": \" + value.toString());\n+                LOG.log(level, header + \": \" \n+                    + (value == null ? \"<null>\" : value.toString()));\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/cxf/raw/cdc55cd46959d896a2e0e471a03a4733b1662394/rt/transports/http/src/main/java/org/apache/cxf/transport/http/Headers.java",
                "sha": "6c8dacdf71c66e78bcdd64a6a9ef0b91d4174804",
                "status": "modified"
            }
        ],
        "message": "[CXF-6058] NPE guard in Header logging",
        "parent": "https://github.com/apache/cxf/commit/5cf72fee49149c746897611aa63134db62181778",
        "patched_files": [
            "Headers.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "HeadersTest.java"
        ]
    },
    "cxf_d2be1f3": {
        "bug_id": "cxf_d2be1f3",
        "commit": "https://github.com/apache/cxf/commit/d2be1f3b07e27675f8e53fac1adade3b223e9751",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/d2be1f3b07e27675f8e53fac1adade3b223e9751/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java?ref=d2be1f3b07e27675f8e53fac1adade3b223e9751",
                "deletions": 1,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java",
                "patch": "@@ -187,7 +187,7 @@ public boolean invoke(HttpServletRequest request, HttpServletResponse res, boole\n                     }\n                 }\n             }\n-            if (d != null) {\n+            if (d != null && d.getMessageObserver() != null) {\n                 Bus bus = d.getBus();\n                 ClassLoaderHolder orig = null;\n                 try {",
                "raw_url": "https://github.com/apache/cxf/raw/d2be1f3b07e27675f8e53fac1adade3b223e9751/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java",
                "sha": "dbd59ad17b7ade7efd36c69f85fa06d1357ece02",
                "status": "modified"
            }
        ],
        "message": "[CXF-6979] Avoid NPE",
        "parent": "https://github.com/apache/cxf/commit/87b4ca4362ea7a0e7b45d1589027045c6e3a552e",
        "patched_files": [
            "ServletController.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "ServletControllerTest.java"
        ]
    },
    "cxf_d45de9c": {
        "bug_id": "cxf_d45de9c",
        "commit": "https://github.com/apache/cxf/commit/d45de9c2548f38798954016faa6ac207257ad12c",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cxf/blob/d45de9c2548f38798954016faa6ac207257ad12c/rt/ws/policy/src/main/java/org/apache/cxf/ws/policy/EndpointPolicyImpl.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/policy/src/main/java/org/apache/cxf/ws/policy/EndpointPolicyImpl.java?ref=d45de9c2548f38798954016faa6ac207257ad12c",
                "deletions": 1,
                "filename": "rt/ws/policy/src/main/java/org/apache/cxf/ws/policy/EndpointPolicyImpl.java",
                "patch": "@@ -21,6 +21,7 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.Iterator;\n import java.util.LinkedHashSet;\n import java.util.List;\n@@ -158,7 +159,12 @@ void initializePolicy() {\n     void chooseAlternative(Message m) {\n         Collection<Assertion> alternative = null;\n         if (requestor) {\n-            alternative = engine.getAlternativeSelector().selectAlternative(policy, engine, assertor, null, m);\n+            if (engine.isEnabled()) {\n+                alternative = engine.getAlternativeSelector().selectAlternative(policy, engine, assertor, null, m);\n+            } else {\n+                // use an empty list to avoid getting NPE\n+                alternative = Collections.emptyList();\n+            }\n         } else {\n             alternative = getSupportedAlternatives(m);\n         }",
                "raw_url": "https://github.com/apache/cxf/raw/d45de9c2548f38798954016faa6ac207257ad12c/rt/ws/policy/src/main/java/org/apache/cxf/ws/policy/EndpointPolicyImpl.java",
                "sha": "7a8bad5d8f024e04bae6104af071c9563e12bdc3",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/cxf/blob/d45de9c2548f38798954016faa6ac207257ad12c/rt/ws/policy/src/test/java/org/apache/cxf/ws/policy/EndpointPolicyImplTest.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/policy/src/test/java/org/apache/cxf/ws/policy/EndpointPolicyImplTest.java?ref=d45de9c2548f38798954016faa6ac207257ad12c",
                "deletions": 0,
                "filename": "rt/ws/policy/src/test/java/org/apache/cxf/ws/policy/EndpointPolicyImplTest.java",
                "patch": "@@ -166,6 +166,7 @@ public void testChooseAlternative() {\n         EndpointPolicyImpl epi = new EndpointPolicyImpl(null, engine, true, assertor);\n         epi.setPolicy(policy);\n \n+        EasyMock.expect(engine.isEnabled()).andReturn(true).anyTimes();\n         EasyMock.expect(engine.getAlternativeSelector()).andReturn(selector);\n         EasyMock.expect(selector.selectAlternative(policy, engine, assertor, null, m)).andReturn(null);\n \n@@ -179,6 +180,7 @@ public void testChooseAlternative() {\n         control.verify();\n \n         control.reset();\n+        EasyMock.expect(engine.isEnabled()).andReturn(true).anyTimes();\n         EasyMock.expect(engine.getAlternativeSelector()).andReturn(selector);\n         Collection<Assertion> alternative = new ArrayList<Assertion>();\n         EasyMock.expect(selector.selectAlternative(policy, engine, assertor, null, m)).andReturn(alternative);\n@@ -187,6 +189,20 @@ public void testChooseAlternative() {\n         Collection<Assertion> choice = epi.getChosenAlternative();\n         assertSame(choice, alternative);\n         control.verify();\n+\n+        control.reset();\n+        EasyMock.expect(engine.isEnabled()).andReturn(false).anyTimes();\n+        EasyMock.expect(engine.getAlternativeSelector()).andReturn(null).anyTimes();\n+        control.replay();\n+        try {\n+            epi.chooseAlternative(m);\n+        } catch (Exception ex) {\n+            // no NPE expected\n+            fail(\"No Exception expected: \" + ex);\n+        }\n+        choice = epi.getChosenAlternative();\n+        assertTrue(\"not an empty list\", choice != null && choice.isEmpty());\n+        control.verify();\n     }\n \n     private MessageImpl createMessage() {",
                "raw_url": "https://github.com/apache/cxf/raw/d45de9c2548f38798954016faa6ac207257ad12c/rt/ws/policy/src/test/java/org/apache/cxf/ws/policy/EndpointPolicyImplTest.java",
                "sha": "42dc83b71b5b110e819b642693f22be359e1d491",
                "status": "modified"
            }
        ],
        "message": "[CXF-5878] Disabling policy engine causes NPE",
        "parent": "https://github.com/apache/cxf/commit/d391d9371d8505c7774308c4fbbb9bc57ffd34a6",
        "patched_files": [
            "EndpointPolicyImpl.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "EndpointPolicyImplTest.java"
        ]
    },
    "cxf_d4de0ce": {
        "bug_id": "cxf_d4de0ce",
        "commit": "https://github.com/apache/cxf/commit/d4de0ced8b53599229a7a3e43ad3bb5cf70b401b",
        "file": [
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/cxf/blob/d4de0ced8b53599229a7a3e43ad3bb5cf70b401b/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/DefaultLogEventMapper.java",
                "changes": 78,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/DefaultLogEventMapper.java?ref=d4de0ced8b53599229a7a3e43ad3bb5cf70b401b",
                "deletions": 40,
                "filename": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/DefaultLogEventMapper.java",
                "patch": "@@ -29,7 +29,6 @@\n import java.util.UUID;\n \n import javax.security.auth.Subject;\n-import javax.xml.namespace.QName;\n import javax.xml.stream.XMLStreamReader;\n \n import org.apache.cxf.binding.Binding;\n@@ -70,19 +69,10 @@ public LogEvent map(Message message) {\n             }\n         }\n \n-        String encoding = (String)message.get(Message.ENCODING);\n+        event.setEncoding(safeGet(message, Message.ENCODING));\n+        event.setHttpMethod(safeGet(message, Message.HTTP_REQUEST_METHOD));\n+        event.setContentType(safeGet(message, Message.CONTENT_TYPE));\n \n-        if (encoding != null) {\n-            event.setEncoding(encoding);\n-        }\n-        String httpMethod = (String)message.get(Message.HTTP_REQUEST_METHOD);\n-        if (httpMethod != null) {\n-            event.setHttpMethod(httpMethod);\n-        }\n-        String ct = (String)message.get(Message.CONTENT_TYPE);\n-        if (ct != null) {\n-            event.setContentType(ct);\n-        }\n         Map<String, String> headerMap = getHeaders(message);\n         event.setHeaders(headerMap);\n \n@@ -138,6 +128,9 @@ private String getJAASPrincipal() {\n     private Map<String, String> getHeaders(Message message) {\n         Map<String, List<String>> headers = CastUtils.cast((Map<?, ?>)message.get(Message.PROTOCOL_HEADERS));\n         Map<String, String> result = new HashMap<>();\n+        if (headers == null) {\n+            return result;\n+        }\n         for (Map.Entry<String, List<String>> entry : headers.entrySet()) {\n             if (entry.getValue().size() == 1) {\n                 result.put(entry.getKey(), entry.getValue().get(0));\n@@ -150,10 +143,10 @@ private String getJAASPrincipal() {\n     }\n \n     private String getUri(Message message) {\n-        String uri = (String)message.get(Message.REQUEST_URL);\n+        String uri = safeGet(message, Message.REQUEST_URL);\n         if (uri == null) {\n-            String address = (String)message.get(Message.ENDPOINT_ADDRESS);\n-            uri = (String)message.get(Message.REQUEST_URI);\n+            String address = safeGet(message, Message.ENDPOINT_ADDRESS);\n+            uri = safeGet(message, Message.REQUEST_URI);\n             if (uri != null && uri.startsWith(\"/\")) {\n                 if (address != null && !address.startsWith(uri)) {\n                     if (address.endsWith(\"/\") && address.length() > 1) {\n@@ -165,7 +158,7 @@ private String getUri(Message message) {\n                 uri = address;\n             }\n         }\n-        String query = (String)message.get(Message.QUERY_STRING);\n+        String query = safeGet(message, Message.QUERY_STRING);\n         if (query != null) {\n             return uri + \"?\" + query;\n         } else {\n@@ -174,7 +167,7 @@ private String getUri(Message message) {\n     }\n \n     private boolean isBinaryContent(Message message) {\n-        String contentType = (String)message.get(Message.CONTENT_TYPE);\n+        String contentType = safeGet(message, Message.CONTENT_TYPE);\n         return contentType != null && BINARY_CONTENT_MEDIA_TYPES.contains(contentType);\n     }\n \n@@ -228,13 +221,12 @@ private String getOperationName(Message message) {\n     }\n \n     private BindingOperationInfo getOperationFromContent(Message message) {\n-        BindingOperationInfo boi = null;\n         XMLStreamReader xmlReader = message.getContent(XMLStreamReader.class);\n-        if (null != xmlReader) {\n-            QName qName = xmlReader.getName();\n-            boi = ServiceModelUtil.getOperation(message.getExchange(), qName);\n+        if (xmlReader != null) {\n+            return ServiceModelUtil.getOperation(message.getExchange(), xmlReader.getName());\n+        } else {\n+            return null;\n         }\n-        return boi;\n     }\n \n     private Message getEffectiveMessage(Message message) {\n@@ -249,23 +241,30 @@ private Message getEffectiveMessage(Message message) {\n \n     private String getRestOperationName(Message curMessage) {\n         Message message = getEffectiveMessage(curMessage);\n-        if (message.containsKey(Message.HTTP_REQUEST_METHOD)) {\n-            String httpMethod = message.get(Message.HTTP_REQUEST_METHOD).toString();\n-\n-            String path = \"\";\n-            if (message.containsKey(Message.REQUEST_URI)) {\n-                String requestUri = message.get(Message.REQUEST_URI).toString();\n-                int baseUriLength = (message.containsKey(Message.BASE_PATH)) ? message.get(Message.BASE_PATH)\n-                    .toString().length() : 0;\n-                path = requestUri.substring(baseUriLength);\n-                if (path.isEmpty()) {\n-                    path = \"/\";\n-                }\n-            }\n+        String httpMethod = safeGet(message, Message.HTTP_REQUEST_METHOD);\n+        if (httpMethod == null) {\n+            return \"\";\n+        }\n \n-            return new StringBuffer().append(httpMethod).append('[').append(path).append(']').toString();\n+        String path = \"\";\n+        String requestUri = safeGet(message, Message.REQUEST_URI);\n+        if (requestUri != null) {\n+            String basePath = safeGet(message, Message.BASE_PATH);\n+            int baseUriLength = (basePath != null) ? basePath.length() : 0;\n+            path = requestUri.substring(baseUriLength);\n+            if (path.isEmpty()) {\n+                path = \"/\";\n+            }\n+        }\n+        return new StringBuffer().append(httpMethod).append('[').append(path).append(']').toString();\n+    }\n+    \n+    private String safeGet(Message message, String key) {\n+        if (!message.containsKey(key)) {\n+            return null;\n         }\n-        return \"\";\n+        Object value = message.get(key);\n+        return (value instanceof String) ? value.toString() : null;\n     }\n \n     /**\n@@ -317,7 +316,6 @@ private void setEpInfo(Message message, final LogEvent event) {\n         EndpointInfo endpoint = getEPInfo(message);\n         event.setPortName(endpoint.getName());\n         event.setPortTypeName(endpoint.getName());\n-        event.setOperationName(getRestOperationName(message));\n         String opName = isSOAPMessage(message) ? getOperationName(message) : getRestOperationName(message);\n         event.setOperationName(opName);\n         if (endpoint.getService() != null) {\n@@ -333,7 +331,7 @@ private void setServiceInfo(ServiceInfo service, LogEvent event) {\n \n     private EndpointInfo getEPInfo(Message message) {\n         Endpoint ep = message.getExchange().getEndpoint();\n-        return (ep == null) ? null : ep.getEndpointInfo();\n+        return (ep == null) ? new EndpointInfo() : ep.getEndpointInfo();\n     }\n \n }",
                "raw_url": "https://github.com/apache/cxf/raw/d4de0ced8b53599229a7a3e43ad3bb5cf70b401b/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/DefaultLogEventMapper.java",
                "sha": "a9fe043526a2b4c38b4a12a5804f00c6a8a54fcb",
                "status": "modified"
            },
            {
                "additions": 85,
                "blob_url": "https://github.com/apache/cxf/blob/d4de0ced8b53599229a7a3e43ad3bb5cf70b401b/rt/features/logging/src/test/java/org/apache/cxf/ext/logging/DefaultLogEventMapperTest.java",
                "changes": 85,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/features/logging/src/test/java/org/apache/cxf/ext/logging/DefaultLogEventMapperTest.java?ref=d4de0ced8b53599229a7a3e43ad3bb5cf70b401b",
                "deletions": 0,
                "filename": "rt/features/logging/src/test/java/org/apache/cxf/ext/logging/DefaultLogEventMapperTest.java",
                "patch": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.ext.logging;\n+\n+import javax.xml.namespace.QName;\n+\n+import org.apache.cxf.binding.Binding;\n+import org.apache.cxf.binding.soap.SoapBinding;\n+import org.apache.cxf.ext.logging.event.DefaultLogEventMapper;\n+import org.apache.cxf.ext.logging.event.LogEvent;\n+import org.apache.cxf.message.Exchange;\n+import org.apache.cxf.message.ExchangeImpl;\n+import org.apache.cxf.message.Message;\n+import org.apache.cxf.message.MessageImpl;\n+import org.apache.cxf.service.model.BindingInfo;\n+import org.apache.cxf.service.model.BindingOperationInfo;\n+import org.apache.cxf.service.model.OperationInfo;\n+import org.apache.cxf.service.model.ServiceInfo;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class DefaultLogEventMapperTest {\n+\n+    @Test\n+    public void testRest() {\n+        DefaultLogEventMapper mapper = new DefaultLogEventMapper();\n+        Message message = new MessageImpl();\n+        message.put(Message.HTTP_REQUEST_METHOD, \"GET\");\n+        message.put(Message.REQUEST_URI, \"test\");\n+        Exchange exchange = new ExchangeImpl();\n+        message.setExchange(exchange);\n+        LogEvent event = mapper.map(message);\n+        Assert.assertEquals(\"GET[test]\", event.getOperationName());\n+    }\n+    \n+    /**\n+     * Test for NPE described in CXF-6436\n+     */\n+    @Test\n+    public void testNullValues() {\n+        DefaultLogEventMapper mapper = new DefaultLogEventMapper();\n+        Message message = new MessageImpl();\n+        message.put(Message.HTTP_REQUEST_METHOD, null);\n+        message.put(Message.REQUEST_URI, null);\n+        Exchange exchange = new ExchangeImpl();\n+        message.setExchange(exchange);\n+        LogEvent event = mapper.map(message);\n+        Assert.assertEquals(\"\", event.getOperationName());\n+    }\n+    \n+    @Test\n+    public void testSoap() {\n+        DefaultLogEventMapper mapper = new DefaultLogEventMapper();\n+        Message message = new MessageImpl();\n+        ExchangeImpl exchange = new ExchangeImpl();\n+        ServiceInfo service = new ServiceInfo();\n+        BindingInfo info = new BindingInfo(service, \"bindingId\");\n+        SoapBinding value = new SoapBinding(info);\n+        exchange.put(Binding.class, value);\n+        OperationInfo opInfo = new OperationInfo();\n+        opInfo.setName(new QName(\"http://my\", \"Operation\"));\n+        BindingOperationInfo boi = new BindingOperationInfo(info, opInfo);\n+        exchange.put(BindingOperationInfo.class, boi);\n+        message.setExchange(exchange);\n+        LogEvent event = mapper.map(message);\n+        Assert.assertEquals(\"{http://my}Operation\", event.getOperationName());\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cxf/raw/d4de0ced8b53599229a7a3e43ad3bb5cf70b401b/rt/features/logging/src/test/java/org/apache/cxf/ext/logging/DefaultLogEventMapperTest.java",
                "sha": "0d64e649fe4a06fc6d06df0ee2384ff22f528c45",
                "status": "added"
            }
        ],
        "message": "[CXF-6436] Fix for NPE",
        "parent": "https://github.com/apache/cxf/commit/dcaf6ecd5cc41abcce85b7cfa86e65ee01b36ebd",
        "patched_files": [
            "DefaultLogEventMapper.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "DefaultLogEventMapperTest.java"
        ]
    },
    "cxf_d5eca29": {
        "bug_id": "cxf_d5eca29",
        "commit": "https://github.com/apache/cxf/commit/d5eca298b744a4bf7fb73a96b08191ed92b0098a",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cxf/blob/d5eca298b744a4bf7fb73a96b08191ed92b0098a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriBuilderImpl.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriBuilderImpl.java?ref=d5eca298b744a4bf7fb73a96b08191ed92b0098a",
                "deletions": 5,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriBuilderImpl.java",
                "patch": "@@ -550,12 +550,14 @@ public UriBuilder segment(String... segments) throws IllegalArgumentException {\n      */\n     private List<String> toStringList(Object... values) throws IllegalArgumentException {\n         List<String> list = new ArrayList<String>();\n-        for (int i = 0; i < values.length; i++) {\n-            Object value = values[i];\n-            if (value == null) {\n-                throw new IllegalArgumentException(\"Null value on \" + i + \" position\");\n+        if (values != null) {\n+            for (int i = 0; i < values.length; i++) {\n+                Object value = values[i];\n+                if (value == null) {\n+                    throw new IllegalArgumentException(\"Null value on \" + i + \" position\");\n+                }\n+                list.add(value.toString());\n             }\n-            list.add(value.toString());\n         }\n         if (list.isEmpty()) {\n             list.add(\"\");",
                "raw_url": "https://github.com/apache/cxf/raw/d5eca298b744a4bf7fb73a96b08191ed92b0098a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriBuilderImpl.java",
                "sha": "498123c1b888a9cb18d104a35e12e3ab49955c9d",
                "status": "modified"
            }
        ],
        "message": "Add an NPE guard\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@984493 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/706f7a0a7d321df669a40b8a3cc7d6e3687377e2",
        "patched_files": [
            "UriBuilderImpl.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "UriBuilderImplTest.java"
        ]
    },
    "cxf_d721bd1": {
        "bug_id": "cxf_d721bd1",
        "commit": "https://github.com/apache/cxf/commit/d721bd15440cdacd94f5835ecfe513db891262cf",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cxf/blob/d721bd15440cdacd94f5835ecfe513db891262cf/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/customization/CustomizationParser.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/customization/CustomizationParser.java?ref=d721bd15440cdacd94f5835ecfe513db891262cf",
                "deletions": 1,
                "filename": "tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/customization/CustomizationParser.java",
                "patch": "@@ -300,7 +300,6 @@ protected void copyAllJaxbDeclarations(final Node schemaNode, final Element jaxw\n                     }\n                 }\n                 appinfoNode.appendChild(cloneNode);\n-                childNode = childNode.getNextSibling();\n             }\n         }\n         ",
                "raw_url": "https://github.com/apache/cxf/raw/d721bd15440cdacd94f5835ecfe513db891262cf/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/customization/CustomizationParser.java",
                "sha": "73520106bfceab18966694425ccb6f009918efc8",
                "status": "modified"
            }
        ],
        "message": "[CXF-5862] Make sure we don't skip binding nodes in the binding file\nFixes a potential NPE if there are an odd number of binding nodes",
        "parent": "https://github.com/apache/cxf/commit/3bf3d07c954536d099274ebf1c5690e84ff3a423",
        "patched_files": [
            "CustomizationParser.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "CustomizationParserTest.java"
        ]
    },
    "cxf_d809b56": {
        "bug_id": "cxf_d809b56",
        "commit": "https://github.com/apache/cxf/commit/d809b56b8ea82abf98ea82f09d66f92b4b5a0b17",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cxf/blob/d809b56b8ea82abf98ea82f09d66f92b4b5a0b17/rt/core/src/main/java/org/apache/cxf/attachment/AttachmentSerializer.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/main/java/org/apache/cxf/attachment/AttachmentSerializer.java?ref=d809b56b8ea82abf98ea82f09d66f92b4b5a0b17",
                "deletions": 6,
                "filename": "rt/core/src/main/java/org/apache/cxf/attachment/AttachmentSerializer.java",
                "patch": "@@ -124,13 +124,16 @@ private void writeHeaders(String contentType, String attachmentId, Writer writer\n \n         writer.write(\"Content-Transfer-Encoding: binary\\r\\n\");\n \n-        writer.write(\"Content-ID: <\");\n-        if (attachmentId.charAt(0) == '<'\n-            && attachmentId.charAt(attachmentId.length() - 1) == '>') {\n-            attachmentId = attachmentId.substring(1, attachmentId.length() - 1);\n+        if (attachmentId != null) {\n+            writer.write(\"Content-ID: <\");\n+            if (attachmentId.charAt(0) == '<'\n+                && attachmentId.charAt(attachmentId.length() - 1) == '>') {\n+                attachmentId = attachmentId.substring(1, attachmentId.length() - 1);\n+            }\n+            writer.write(URLDecoder.decode(attachmentId, \"UTF-8\"));\n+            writer.write(\">\\r\\n\");\n         }\n-        writer.write(URLDecoder.decode(attachmentId, \"UTF-8\"));\n-        writer.write(\">\\r\\n\\r\\n\");\n+        writer.write(\"\\r\\n\");\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/cxf/raw/d809b56b8ea82abf98ea82f09d66f92b4b5a0b17/rt/core/src/main/java/org/apache/cxf/attachment/AttachmentSerializer.java",
                "sha": "7e2cdec47dc732cdb78adc625f060853db053078",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/d809b56b8ea82abf98ea82f09d66f92b4b5a0b17/rt/core/src/main/java/org/apache/cxf/interceptor/AttachmentOutInterceptor.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/main/java/org/apache/cxf/interceptor/AttachmentOutInterceptor.java?ref=d809b56b8ea82abf98ea82f09d66f92b4b5a0b17",
                "deletions": 1,
                "filename": "rt/core/src/main/java/org/apache/cxf/interceptor/AttachmentOutInterceptor.java",
                "patch": "@@ -47,7 +47,8 @@ public void handleMessage(Message message) {\n         // by declaring the Object.\n         Object prop = message.getContextualProperty(org.apache.cxf.message.Message.MTOM_ENABLED); \n         boolean mtomEnabled = MessageUtils.isTrue(prop);\n-        boolean writeAtts = MessageUtils.isTrue(message.getContextualProperty(WRITE_ATTACHMENTS));\n+        boolean writeAtts = MessageUtils.isTrue(message.getContextualProperty(WRITE_ATTACHMENTS))\n+            || (message.getAttachments() != null && !message.getAttachments().isEmpty());\n         \n         if (!mtomEnabled && !writeAtts) {\n             return;",
                "raw_url": "https://github.com/apache/cxf/raw/d809b56b8ea82abf98ea82f09d66f92b4b5a0b17/rt/core/src/main/java/org/apache/cxf/interceptor/AttachmentOutInterceptor.java",
                "sha": "488923aca7a32bbfc85dd191142e4e00924b7e15",
                "status": "modified"
            }
        ],
        "message": "If message has attachments, force into mime mode\nIf attachment doesn't have an ID, be OK with that.  Don't NPE.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@773693 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/e094214559f768a10078d4a0b67347130915fc4e",
        "patched_files": [
            "AttachmentSerializer.java",
            "AttachmentOutInterceptor.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "AttachmentSerializerTest.java",
            "TestAttachmentOutInterceptor.java"
        ]
    },
    "cxf_d99c9ad": {
        "bug_id": "cxf_d99c9ad",
        "commit": "https://github.com/apache/cxf/commit/d99c9ad353894b95b6ae866a7e63b9dbb8a0665c",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/d99c9ad353894b95b6ae866a7e63b9dbb8a0665c/rt/rs/extensions/json-basic/src/main/java/org/apache/cxf/jaxrs/json/basic/JsonMapObjectReaderWriter.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/extensions/json-basic/src/main/java/org/apache/cxf/jaxrs/json/basic/JsonMapObjectReaderWriter.java?ref=d99c9ad353894b95b6ae866a7e63b9dbb8a0665c",
                "deletions": 0,
                "filename": "rt/rs/extensions/json-basic/src/main/java/org/apache/cxf/jaxrs/json/basic/JsonMapObjectReaderWriter.java",
                "patch": "@@ -305,6 +305,9 @@ public Output append(String str) {\n         @Override\n         public Output append(String str) {\n             try {\n+                if (str == null) {\n+                    str = \"null\";\n+                }\n                 os.write(StringUtils.toBytesUTF8(str));\n             } catch (IOException ex) {\n                 throw new RuntimeException(ex);",
                "raw_url": "https://github.com/apache/cxf/raw/d99c9ad353894b95b6ae866a7e63b9dbb8a0665c/rt/rs/extensions/json-basic/src/main/java/org/apache/cxf/jaxrs/json/basic/JsonMapObjectReaderWriter.java",
                "sha": "abf6eefe565da5a940fdf9c2e9555388f4d291ef",
                "status": "modified"
            }
        ],
        "message": "Completing the NPE checking code in the basic json writer",
        "parent": "https://github.com/apache/cxf/commit/4dcf5120561ba5b11bf9493c931889c591cf36e0",
        "patched_files": [
            "JsonMapObjectReaderWriter.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JsonMapObjectReaderWriterTest.java"
        ]
    },
    "cxf_d9c0c2f": {
        "bug_id": "cxf_d9c0c2f",
        "commit": "https://github.com/apache/cxf/commit/d9c0c2ffb468315c9e538736ac8e731782209640",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cxf/blob/d9c0c2ffb468315c9e538736ac8e731782209640/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/Utils.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/Utils.java?ref=d9c0c2ffb468315c9e538736ac8e731782209640",
                "deletions": 6,
                "filename": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/Utils.java",
                "patch": "@@ -266,12 +266,15 @@ static XmlJavaTypeAdapter getFieldXJTA(final Field f) {\n             adapter = f.getType().getAnnotation(XmlJavaTypeAdapter.class);\n         }\n         if (adapter == null) {\n-            XmlJavaTypeAdapters adapters = f.getDeclaringClass().getPackage().getAnnotation(XmlJavaTypeAdapters.class);\n-            if (adapters != null) {\n-                for (XmlJavaTypeAdapter candidate : adapters.value()) {\n-                    if (candidate != null && candidate.type().equals(f.getType())) {\n-                        adapter = candidate;\n-                        break;\n+            Package packageDeclaration = f.getDeclaringClass().getPackage();\n+            if (packageDeclaration != null) {\n+                XmlJavaTypeAdapters adapters = packageDeclaration.getAnnotation(XmlJavaTypeAdapters.class);\n+                if (adapters != null) {\n+                    for (XmlJavaTypeAdapter candidate : adapters.value()) {\n+                        if (candidate != null && candidate.type().equals(f.getType())) {\n+                            adapter = candidate;\n+                            break;\n+                        }\n                     }\n                 }\n             }",
                "raw_url": "https://github.com/apache/cxf/raw/d9c0c2ffb468315c9e538736ac8e731782209640/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/Utils.java",
                "sha": "05e4da90ed666bcc221b1c2ebee1a7aa1316c9b1",
                "status": "modified"
            }
        ],
        "message": "[CXF-7947] avoid NPE for classes in default package",
        "parent": "https://github.com/apache/cxf/commit/a6978c675d99ed3e317f37ea8f9885004369ff7a",
        "patched_files": [
            "Utils.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "UtilsTest.java",
            "TestUtils.java"
        ]
    },
    "cxf_da963ab": {
        "bug_id": "cxf_da963ab",
        "commit": "https://github.com/apache/cxf/commit/da963ab6e038f28d5d8bdfcf8371774a4365f904",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/da963ab6e038f28d5d8bdfcf8371774a4365f904/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPServerEngine.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPServerEngine.java?ref=da963ab6e038f28d5d8bdfcf8371774a4365f904",
                "deletions": 1,
                "filename": "rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPServerEngine.java",
                "patch": "@@ -385,6 +385,9 @@ public synchronized void addServant(URL url, JettyHTTPHandler handler) {\n         if (shouldCheckUrl(handler.getBus())) {\n             checkRegistedContext(url);\n         }\n+        if (contexts == null) {\n+            contexts = new ContextHandlerCollection();\n+        }\n         \n         SecurityHandler securityHandler = null;\n         if (server == null) {\n@@ -454,7 +457,6 @@ public synchronized void addServant(URL url, JettyHTTPHandler handler) {\n                     }\n                 }\n             }\n-            contexts = new ContextHandlerCollection();\n             /*\n              * handlerCollection may be null here if is only one handler to deal with.\n              * Which in turn implies that there can't be a 'defaultHander' to deal with.",
                "raw_url": "https://github.com/apache/cxf/raw/da963ab6e038f28d5d8bdfcf8371774a4365f904/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPServerEngine.java",
                "sha": "df0e23a5a34576a72c5fab183c0a17ceb776e53b",
                "status": "modified"
            }
        ],
        "message": "[CXF-6402] preventing NPE in JettyHTTPServerEngine",
        "parent": "https://github.com/apache/cxf/commit/88a7cd850f0471d6e51f9045bf01f775a905cbf2",
        "patched_files": [
            "JettyHTTPServerEngine.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JettyHTTPServerEngineTest.java"
        ]
    },
    "cxf_dae6055": {
        "bug_id": "cxf_dae6055",
        "commit": "https://github.com/apache/cxf/commit/dae60556e28d22a4e0231099178e6e1ad4f68126",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/dae60556e28d22a4e0231099178e6e1ad4f68126/rt/ws/policy/src/main/java/org/apache/cxf/ws/policy/WSPolicyFeature.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/policy/src/main/java/org/apache/cxf/ws/policy/WSPolicyFeature.java?ref=dae60556e28d22a4e0231099178e6e1ad4f68126",
                "deletions": 1,
                "filename": "rt/ws/policy/src/main/java/org/apache/cxf/ws/policy/WSPolicyFeature.java",
                "patch": "@@ -233,7 +233,7 @@ Policy resolveReference(PolicyReference ref, PolicyBuilder builder, Bus bus, Des\n     \n     Policy resolveLocal(PolicyReference ref, final Bus bus, DescriptionInfo i) {\n         String uri = ref.getURI().substring(1);\n-        String absoluteURI = i.getBaseURI() + uri;\n+        String absoluteURI = i == null ? uri : i.getBaseURI() + uri;\n         PolicyRegistry registry = bus.getExtension(PolicyEngine.class).getRegistry();\n         Policy resolved = registry.lookup(absoluteURI);\n         if (null != resolved) {",
                "raw_url": "https://github.com/apache/cxf/raw/dae60556e28d22a4e0231099178e6e1ad4f68126/rt/ws/policy/src/main/java/org/apache/cxf/ws/policy/WSPolicyFeature.java",
                "sha": "0bb53a84ca8f903fc820ffa176afacf7de9af96f",
                "status": "modified"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/cxf/blob/dae60556e28d22a4e0231099178e6e1ad4f68126/systests/ws-rm/src/test/java/org/apache/cxf/systest/ws/rm/BasicDocEndpoint.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/ws-rm/src/test/java/org/apache/cxf/systest/ws/rm/BasicDocEndpoint.java?ref=dae60556e28d22a4e0231099178e6e1ad4f68126",
                "deletions": 0,
                "filename": "systests/ws-rm/src/test/java/org/apache/cxf/systest/ws/rm/BasicDocEndpoint.java",
                "patch": "@@ -0,0 +1,29 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.systest.ws.rm;\n+\n+import javax.jws.WebMethod;\n+import javax.jws.WebService;\n+\n+@WebService(name = \"RMEndpoint\", targetNamespace = \"http://cxf.apache.org/wsrm\")\n+public interface BasicDocEndpoint {\n+    @WebMethod\n+    String echo(String arg0);\n+\n+}",
                "raw_url": "https://github.com/apache/cxf/raw/dae60556e28d22a4e0231099178e6e1ad4f68126/systests/ws-rm/src/test/java/org/apache/cxf/systest/ws/rm/BasicDocEndpoint.java",
                "sha": "b7848be9ffdb084e76b3a8eb7397b8427e94697f",
                "status": "added"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/cxf/blob/dae60556e28d22a4e0231099178e6e1ad4f68126/systests/ws-rm/src/test/java/org/apache/cxf/systest/ws/rm/BasicDocEndpointImpl.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/ws-rm/src/test/java/org/apache/cxf/systest/ws/rm/BasicDocEndpointImpl.java?ref=dae60556e28d22a4e0231099178e6e1ad4f68126",
                "deletions": 0,
                "filename": "systests/ws-rm/src/test/java/org/apache/cxf/systest/ws/rm/BasicDocEndpointImpl.java",
                "patch": "@@ -0,0 +1,30 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.systest.ws.rm;\n+\n+import javax.jws.WebMethod;\n+import javax.jws.WebService;\n+\n+@WebService(name = \"RMEndpoint\", targetNamespace = \"http://cxf.apache.org/wsrm\", serviceName = \"RMService\")\n+public class BasicDocEndpointImpl implements BasicDocEndpoint {\n+    @WebMethod\n+    public String echo(String input) {\n+        return input;\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cxf/raw/dae60556e28d22a4e0231099178e6e1ad4f68126/systests/ws-rm/src/test/java/org/apache/cxf/systest/ws/rm/BasicDocEndpointImpl.java",
                "sha": "6e7952d4c3d4b1171c59cc89daf13b62cb0ba845",
                "status": "added"
            },
            {
                "additions": 52,
                "blob_url": "https://github.com/apache/cxf/blob/dae60556e28d22a4e0231099178e6e1ad4f68126/systests/ws-rm/src/test/java/org/apache/cxf/systest/ws/rm/WSRMPolicyResolveTest.java",
                "changes": 52,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/ws-rm/src/test/java/org/apache/cxf/systest/ws/rm/WSRMPolicyResolveTest.java?ref=dae60556e28d22a4e0231099178e6e1ad4f68126",
                "deletions": 0,
                "filename": "systests/ws-rm/src/test/java/org/apache/cxf/systest/ws/rm/WSRMPolicyResolveTest.java",
                "patch": "@@ -0,0 +1,52 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.systest.ws.rm;\n+\n+\n+import org.apache.cxf.test.AbstractCXFSpringTest;\n+import org.apache.cxf.testutil.common.TestUtil;\n+\n+import org.junit.Test;\n+\n+import org.springframework.context.support.GenericApplicationContext;\n+\n+\n+\n+//CXF-4875\n+public class WSRMPolicyResolveTest extends AbstractCXFSpringTest {\n+    public static final String PORT = TestUtil.getPortNumber(WSRMPolicyResolveTest.class);\n+    /** {@inheritDoc}*/\n+    @Override\n+    protected void additionalSpringConfiguration(GenericApplicationContext context) throws Exception {\n+    }\n+    \n+    @Test\n+    public void testHello() throws Exception {\n+        BasicDocEndpoint port = getApplicationContext().getBean(\"TestClient\",\n+                  BasicDocEndpoint.class);\n+        Object retObj = port.echo(\"Hello\");\n+        assertEquals(\"Hello\", retObj);\n+    }\n+\n+    /** {@inheritDoc}*/\n+    @Override\n+    protected String[] getConfigLocations() {\n+        return new String[] {\"classpath:/org/apache/cxf/systest/ws/rm/wsrm-policy-resolve.xml\" };\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cxf/raw/dae60556e28d22a4e0231099178e6e1ad4f68126/systests/ws-rm/src/test/java/org/apache/cxf/systest/ws/rm/WSRMPolicyResolveTest.java",
                "sha": "6907c678e87785200129e851d85eab78f027bfba",
                "status": "added"
            },
            {
                "additions": 44,
                "blob_url": "https://github.com/apache/cxf/blob/dae60556e28d22a4e0231099178e6e1ad4f68126/systests/ws-rm/src/test/java/org/apache/cxf/systest/ws/rm/wsrm-policy-resolve.xml",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/ws-rm/src/test/java/org/apache/cxf/systest/ws/rm/wsrm-policy-resolve.xml?ref=dae60556e28d22a4e0231099178e6e1ad4f68126",
                "deletions": 0,
                "filename": "systests/ws-rm/src/test/java/org/apache/cxf/systest/ws/rm/wsrm-policy-resolve.xml",
                "patch": "@@ -0,0 +1,44 @@\n+<beans xmlns='http://www.springframework.org/schema/beans'\n+\txmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:beans='http://www.springframework.org/schema/beans'\n+\txmlns:jaxws='http://cxf.apache.org/jaxws' xmlns:p=\"http://cxf.apache.org/policy\"\n+\txsi:schemaLocation='http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd\n+  http://cxf.apache.org/policy http://cxf.apache.org/schemas/policy.xsd \n+  http://www.w3.org/2006/07/ws-policy http://www.w3.org/2006/07/ws-policy.xsd \n+  http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd'>\n+\t<bean\n+\t\tclass=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\" />\n+\t<wsp:Policy wsu:Id=\"RM\" xmlns:wsp=\"http://www.w3.org/2006/07/ws-policy\"\n+\t\txmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\">\n+\t\t<wsam:Addressing xmlns:wsam=\"http://www.w3.org/2007/02/addressing/metadata\">\n+\t\t\t<wsp:Policy />\n+\t\t</wsam:Addressing>\n+\t\t<wsrmp:RMAssertion xmlns:wsrmp=\"http://schemas.xmlsoap.org/ws/2005/02/rm/policy\">\n+\t\t\t<wsrmp:BaseRetransmissionInterval\n+\t\t\t\tMilliseconds=\"10000\" />\n+\t\t</wsrmp:RMAssertion>\n+\t</wsp:Policy>\n+\n+\t<jaxws:endpoint id='RMService'\n+\t\taddress=\"http://localhost:${testutil.ports.WSRMPolicyResolveTest}/wsrmPolicyResolve\"\n+\t\timplementor='org.apache.cxf.systest.ws.rm.BasicDocEndpointImpl'>\n+\t\t<jaxws:features>\n+\t\t\t<p:policies>\n+\t\t\t\t<wsp:PolicyReference URI=\"#RM\"\n+\t\t\t\t\txmlns:wsp=\"http://www.w3.org/2006/07/ws-policy\" />\n+\t\t\t</p:policies>\n+\t\t</jaxws:features>\n+\t</jaxws:endpoint>\n+\n+\t<jaxws:client id=\"TestClient\"\n+\t\tserviceClass=\"org.apache.cxf.systest.ws.rm.BasicDocEndpoint\"\n+\t\taddress=\"http://localhost:${testutil.ports.WSRMPolicyResolveTest}/wsrmPolicyResolve\">\n+\t\t<jaxws:features>\n+\t\t\t<p:policies>\n+\t\t\t\t<wsp:PolicyReference URI=\"#RM\"\n+\t\t\t\t\txmlns:wsp=\"http://www.w3.org/2006/07/ws-policy\" />\n+\t\t\t</p:policies>\n+\t\t</jaxws:features>\n+\t</jaxws:client>\n+\n+\n+</beans>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cxf/raw/dae60556e28d22a4e0231099178e6e1ad4f68126/systests/ws-rm/src/test/java/org/apache/cxf/systest/ws/rm/wsrm-policy-resolve.xml",
                "sha": "ce33d9678ffc7ca2022f1fd58a4f0b5d706a5e40",
                "status": "added"
            }
        ],
        "message": "[CXF-4875]:Fix NPE when resolve the wsrm policy\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1454984 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/53fde8767c4614b2cdd2d410ed723eb0f870f715",
        "patched_files": [
            "WSPolicyFeature.java",
            "BasicDocEndpoint.java",
            "wsrm-policy-resolve.java",
            "BasicDocEndpointImpl.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "WSRMPolicyResolveTest.java"
        ]
    },
    "cxf_db470d7": {
        "bug_id": "cxf_db470d7",
        "commit": "https://github.com/apache/cxf/commit/db470d74ba946246428168d3c50c60ff0116cbe6",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cxf/blob/db470d74ba946246428168d3c50c60ff0116cbe6/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/SoapBindingFactory.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/SoapBindingFactory.java?ref=db470d74ba946246428168d3c50c60ff0116cbe6",
                "deletions": 0,
                "filename": "rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/SoapBindingFactory.java",
                "patch": "@@ -495,6 +495,12 @@ protected void addMessageFromBinding(ExtensibilityElement ext, BindingOperationI\n \n         ServiceInfo serviceInfo = bop.getBinding().getService();\n \n+        if (header != null && header.getMessage() == null) {\n+            throw new RuntimeException(\"Problem with WSDL: soap:header element\" \n+                + \" for operation \" + bop.getName() + \" under binding \" + bop.getBinding().getName()\n+                + \" does not contain a valid message attribute.\");\n+        }\n+        \n         if (header != null && serviceInfo.getMessage(header.getMessage()) == null) {\n             Definition def = (Definition)serviceInfo.getProperty(WSDLServiceBuilder.WSDL_DEFINITION);\n             SchemaCollection schemas = serviceInfo.getXmlSchemaCollection();",
                "raw_url": "https://github.com/apache/cxf/raw/db470d74ba946246428168d3c50c60ff0116cbe6/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/SoapBindingFactory.java",
                "sha": "1319936973ab7462c322a46405189f6683a5b839",
                "status": "modified"
            }
        ],
        "message": "[CXF-5793] A better error message than an NPE if the \"message\" attribute isn't there.",
        "parent": "https://github.com/apache/cxf/commit/1900e1f4ace53bc112c16f36d846f25905daab4c",
        "patched_files": [
            "SoapBindingFactory.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "SoapBindingFactoryTest.java"
        ]
    },
    "cxf_ddc01a1": {
        "bug_id": "cxf_ddc01a1",
        "commit": "https://github.com/apache/cxf/commit/ddc01a185658418ce8b68ebf5e1a57c1a7de06ce",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cxf/blob/ddc01a185658418ce8b68ebf5e1a57c1a7de06ce/core/src/main/java/org/apache/cxf/attachment/AttachmentUtil.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/attachment/AttachmentUtil.java?ref=ddc01a185658418ce8b68ebf5e1a57c1a7de06ce",
                "deletions": 1,
                "filename": "core/src/main/java/org/apache/cxf/attachment/AttachmentUtil.java",
                "patch": "@@ -199,7 +199,12 @@ public static String createContentID(String ns) throws UnsupportedEncodingExcept\n         if (ns != null && (ns.length() > 0)) {\n             try {\n                 URI uri = new URI(ns);\n-                cid = uri.getHost();\n+                String host = uri.getHost();\n+                if (host != null) {\n+                    cid = host;\n+                } else {\n+                    cid = ns;\n+                }\n             } catch (Exception e) {\n                 cid = ns;\n             }",
                "raw_url": "https://github.com/apache/cxf/raw/ddc01a185658418ce8b68ebf5e1a57c1a7de06ce/core/src/main/java/org/apache/cxf/attachment/AttachmentUtil.java",
                "sha": "18b198f4dbcfe0e70eb41288426dec4495b1cb3e",
                "status": "modified"
            }
        ],
        "message": "[CXF-6517] Avoiding NPE",
        "parent": "https://github.com/apache/cxf/commit/0696b166015543a1b2ad9c165dd00e27fea8dd18",
        "patched_files": [
            "AttachmentUtil.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "AttachmentUtilTest.java"
        ]
    },
    "cxf_de813c5": {
        "bug_id": "cxf_de813c5",
        "commit": "https://github.com/apache/cxf/commit/de813c5b37dab65320d7b4cccd45232abb54d207",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cxf/blob/de813c5b37dab65320d7b4cccd45232abb54d207/rt/core/src/main/java/org/apache/cxf/transport/DestinationFactoryManagerImpl.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/main/java/org/apache/cxf/transport/DestinationFactoryManagerImpl.java?ref=de813c5b37dab65320d7b4cccd45232abb54d207",
                "deletions": 7,
                "filename": "rt/core/src/main/java/org/apache/cxf/transport/DestinationFactoryManagerImpl.java",
                "patch": "@@ -68,19 +68,19 @@ public void setMapProvider(MapProvider<String, DestinationFactory> mapProvider)\n     public void setBus(Bus b) {\n         bus = b;\n     }\n-    \n+\n     @PostConstruct\n     public void register() {\n         if (null != bus) {\n             bus.setExtension(this, DestinationFactoryManager.class);\n         }\n     }\n-    \n+\n \n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.cxf.bus.DestinationFactoryManager#registerDestinationFactory(java.lang.String,\n      *      org.apache.cxf.transports.DestinationFactory)\n      */\n@@ -90,7 +90,7 @@ public void registerDestinationFactory(String namespace, DestinationFactory fact\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.cxf.bus.DestinationFactoryManager#deregisterDestinationFactory(java.lang.String)\n      */\n     public void deregisterDestinationFactory(String namespace) {\n@@ -99,14 +99,14 @@ public void deregisterDestinationFactory(String namespace) {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.cxf.bus.DestinationFactoryManager#DestinationFactory(java.lang.String)\n      */\n     /**\n      * Returns the conduit initiator for the given namespace, constructing it\n      * (and storing in the cache for future reference) if necessary, using its\n      * list of factory classname to namespace mappings.\n-     * \n+     *\n      * @param namespace the namespace.\n      */\n     public DestinationFactory getDestinationFactory(String namespace) throws BusException {\n@@ -123,6 +123,10 @@ public void shutdown() {\n     }\n \n     public DestinationFactory getDestinationFactoryForUri(String uri) {\n+        //If the uri is related path or has no protocol prefix , we will set it to be http\n+        if (uri.startsWith(\"/\") || uri.indexOf(\":\") < 0) {\n+            uri = \"http://\" + uri;\n+        }\n         //first attempt the ones already registered\n         for (Map.Entry<String, DestinationFactory> df : destinationFactories.entrySet()) {\n             for (String prefix : df.getValue().getUriPrefixes()) {\n@@ -142,7 +146,7 @@ public DestinationFactory getDestinationFactoryForUri(String uri) {\n                 }\n             }\n         }\n-        \n+\n         return null;\n     }\n ",
                "raw_url": "https://github.com/apache/cxf/raw/de813c5b37dab65320d7b4cccd45232abb54d207/rt/core/src/main/java/org/apache/cxf/transport/DestinationFactoryManagerImpl.java",
                "sha": "f737a2fd8cbcf870b4a8b94cc360df360717410e",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cxf/blob/de813c5b37dab65320d7b4cccd45232abb54d207/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletContextResourceResolver.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletContextResourceResolver.java?ref=de813c5b37dab65320d7b4cccd45232abb54d207",
                "deletions": 8,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletContextResourceResolver.java",
                "patch": "@@ -37,11 +37,11 @@\n public class ServletContextResourceResolver implements ResourceResolver {\n     ServletContext servletContext;\n     Map<String, URL> urlMap = new ConcurrentHashMap<String, URL>();\n-    \n+\n     public ServletContextResourceResolver(ServletContext sc) {\n         servletContext = sc;\n     }\n-    \n+\n \n     public final InputStream getAsStream(final String string) {\n         if (urlMap.containsKey(string)) {\n@@ -55,19 +55,21 @@ public final InputStream getAsStream(final String string) {\n     }\n \n     public final <T> T resolve(final String entryName, final Class<T> clz) {\n-        \n+\n         Object obj = null;\n         try {\n-            InitialContext ic = new InitialContext();\n-            obj = ic.lookup(entryName);\n+            if (entryName != null) {\n+                InitialContext ic = new InitialContext();\n+                obj = ic.lookup(entryName);\n+            }\n         } catch (NamingException e) {\n             //do nothing\n         }\n-        \n+\n         if (obj != null && clz.isInstance(obj)) {\n             return clz.cast(obj);\n         }\n-        \n+\n         if (clz.isAssignableFrom(URL.class)) {\n             if (urlMap.containsKey(entryName)) {\n                 return clz.cast(urlMap.get(entryName));\n@@ -92,7 +94,7 @@ public final InputStream getAsStream(final String string) {\n             }\n         } else if (clz.isAssignableFrom(InputStream.class)) {\n             return clz.cast(getAsStream(entryName));\n-        }        \n+        }\n         return null;\n     }\n }",
                "raw_url": "https://github.com/apache/cxf/raw/de813c5b37dab65320d7b4cccd45232abb54d207/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletContextResourceResolver.java",
                "sha": "f3fb34a054e3da6a5bfc8f4a0548ad338b2e3ca1",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/cxf/blob/de813c5b37dab65320d7b4cccd45232abb54d207/systests/src/test/java/org/apache/cxf/systest/servlet/NoSpringServletClientTest.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/src/test/java/org/apache/cxf/systest/servlet/NoSpringServletClientTest.java?ref=de813c5b37dab65320d7b4cccd45232abb54d207",
                "deletions": 5,
                "filename": "systests/src/test/java/org/apache/cxf/systest/servlet/NoSpringServletClientTest.java",
                "patch": "@@ -26,6 +26,8 @@\n import com.meterware.httpunit.WebLink;\n import com.meterware.httpunit.WebResponse;\n \n+import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;\n+import org.apache.cxf.systest.jaxws.Hello;\n import org.apache.cxf.testutil.common.AbstractBusClientServerTestBase;\n import org.apache.hello_world_soap_http.Greeter;\n import org.apache.hello_world_soap_http.SOAPService;\n@@ -41,11 +43,11 @@\n     public static void startServers() throws Exception {\n         assertTrue(\"server did not launch correctly\", launchServer(NoSpringServletServer.class));\n     }\n-    \n+\n     @Test\n     public void testBasicConnection() throws Exception {\n         SOAPService service = new SOAPService(new URL(serviceURL + \"Greeter?wsdl\"));\n-        Greeter greeter = service.getPort(portName, Greeter.class);        \n+        Greeter greeter = service.getPort(portName, Greeter.class);\n         try {\n             String reply = greeter.greetMe(\"test\");\n             assertNotNull(\"no response received from service\", reply);\n@@ -57,14 +59,25 @@ public void testBasicConnection() throws Exception {\n             throw (Exception)ex.getCause();\n         }\n     }\n-    \n+\n+    @Test\n+    public void testHelloService() throws Exception {\n+        JaxWsProxyFactoryBean cpfb = new JaxWsProxyFactoryBean();\n+        String address = serviceURL + \"Hello\";\n+        cpfb.setServiceClass(Hello.class);\n+        cpfb.setAddress(address);\n+        Hello hello = (Hello) cpfb.create();\n+        String reply = hello.sayHi(\" Willem\");\n+        assertEquals(\"Get the wrongreply \", reply, \"get Willem\");\n+    }\n+\n     @Test\n     public void testGetServiceList() throws Exception {\n         WebConversation client = new WebConversation();\n         WebResponse res = client.getResponse(serviceURL);\n         WebLink[] links = res.getLinks();\n-        assertEquals(\"There should get two links for the service\", 1, links.length);\n-        assertEquals(serviceURL + \"Greeter?wsdl\", links[0].getURLString()); \n+        assertEquals(\"There should get two links for the service\", 2, links.length);\n+        assertEquals(serviceURL + \"Greeter?wsdl\", links[0].getURLString());\n         assertEquals(\"text/html\", res.getContentType());\n     }\n }",
                "raw_url": "https://github.com/apache/cxf/raw/de813c5b37dab65320d7b4cccd45232abb54d207/systests/src/test/java/org/apache/cxf/systest/servlet/NoSpringServletClientTest.java",
                "sha": "9189d0237074444292ae72d7333ceaca477a2ce9",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cxf/blob/de813c5b37dab65320d7b4cccd45232abb54d207/systests/src/test/java/org/apache/cxf/systest/servlet/NoSpringServletServer.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/systests/src/test/java/org/apache/cxf/systest/servlet/NoSpringServletServer.java?ref=de813c5b37dab65320d7b4cccd45232abb54d207",
                "deletions": 8,
                "filename": "systests/src/test/java/org/apache/cxf/systest/servlet/NoSpringServletServer.java",
                "patch": "@@ -22,10 +22,10 @@\n \n import org.apache.cxf.Bus;\n import org.apache.cxf.BusFactory;\n+import org.apache.cxf.systest.jaxws.HelloImpl;\n import org.apache.cxf.testutil.common.AbstractBusTestServerBase;\n import org.apache.cxf.transport.servlet.CXFNonSpringServlet;\n import org.apache.hello_world_soap_http.GreeterImpl;\n-\n import org.mortbay.jetty.Server;\n import org.mortbay.jetty.handler.ContextHandlerCollection;\n import org.mortbay.jetty.servlet.Context;\n@@ -42,22 +42,25 @@ protected void run() {\n             httpServer = new Server(9000);\n             ContextHandlerCollection contexts = new ContextHandlerCollection();\n             httpServer.setHandler(contexts);\n-            \n+\n             Context root = new Context(contexts, \"/\", Context.SESSIONS);\n-            \n+\n             CXFNonSpringServlet cxf = new CXFNonSpringServlet();\n             ServletHolder servlet = new ServletHolder(cxf);\n             servlet.setName(\"soap\");\n             servlet.setForcedPath(\"soap\");\n             root.addServlet(servlet, \"/soap/*\");\n-            \n+\n             httpServer.start();\n-            \n+\n             Bus bus = cxf.getBus();\n             setBus(bus);\n             BusFactory.setDefaultBus(bus);\n             GreeterImpl impl = new GreeterImpl();\n             Endpoint.publish(\"/Greeter\", impl);\n+            HelloImpl helloImpl = new HelloImpl();\n+            Endpoint.publish(\"/Hello\", helloImpl);\n+\n         } catch (Exception e) {\n             throw new RuntimeException(e);\n         } finally {\n@@ -69,13 +72,13 @@ protected void run() {\n             }\n         }\n     }\n-    \n+\n     public void tearDown() throws Exception {\n         if (httpServer != null) {\n             httpServer.stop();\n-        }    \n+        }\n     }\n-    \n+\n     public static void main(String[] args) {\n         try {\n             NoSpringServletServer s = new NoSpringServletServer();",
                "raw_url": "https://github.com/apache/cxf/raw/de813c5b37dab65320d7b4cccd45232abb54d207/systests/src/test/java/org/apache/cxf/systest/servlet/NoSpringServletServer.java",
                "sha": "40f296f30768d611f8b50e93e523d8fdbbf7e731",
                "status": "modified"
            }
        ],
        "message": "CXF-1741 Fixed the NPE when publish the code first service in NoSpringServlet\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@684397 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/58209cc29f33cd1a6cd7ceee8110e3ed2299a2bf",
        "patched_files": [
            "DestinationFactoryManagerImpl.java",
            "NoSpringServletServer.java",
            "ServletContextResourceResolver.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "NoSpringServletClientTest.java"
        ]
    },
    "cxf_de9c7ec": {
        "bug_id": "cxf_de9c7ec",
        "commit": "https://github.com/apache/cxf/commit/de9c7ecd7a4d205aa26d893889235468797e87bb",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/de9c7ecd7a4d205aa26d893889235468797e87bb/rt/transports/http/src/main/java/org/apache/cxf/transport/http/Headers.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/http/Headers.java?ref=de9c7ecd7a4d205aa26d893889235468797e87bb",
                "deletions": 1,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/http/Headers.java",
                "patch": "@@ -373,7 +373,7 @@ public void setProtocolHeadersInConnection(HttpURLConnection connection) throws\n     public String determineContentType() {\n         String ct = null;\n         List<Object> ctList = CastUtils.cast(headers.get(Message.CONTENT_TYPE));\n-        if (ctList != null && ctList.size() == 1) {\n+        if (ctList != null && ctList.size() == 1 && ctList.get(0) != null) {\n             ct = ctList.get(0).toString();\n         } else {\n             ct  = (String)message.get(Message.CONTENT_TYPE);",
                "raw_url": "https://github.com/apache/cxf/raw/de9c7ecd7a4d205aa26d893889235468797e87bb/rt/transports/http/src/main/java/org/apache/cxf/transport/http/Headers.java",
                "sha": "8aecbd384ec633f04f65aa001acd8b8c69e1d73b",
                "status": "modified"
            },
            {
                "additions": 47,
                "blob_url": "https://github.com/apache/cxf/blob/de9c7ecd7a4d205aa26d893889235468797e87bb/rt/transports/http/src/test/java/org/apache/cxf/transport/http/HeadersTest.java",
                "changes": 60,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/test/java/org/apache/cxf/transport/http/HeadersTest.java?ref=de9c7ecd7a4d205aa26d893889235468797e87bb",
                "deletions": 13,
                "filename": "rt/transports/http/src/test/java/org/apache/cxf/transport/http/HeadersTest.java",
                "patch": "@@ -36,29 +36,17 @@\n import org.easymock.EasyMock;\n import org.easymock.IMocksControl;\n \n-import org.junit.AfterClass;\n import org.junit.Assert;\n-import org.junit.BeforeClass;\n import org.junit.Test;\n \n /**\n  *\n  */\n public class HeadersTest extends Assert {\n-    private static IMocksControl control;\n-\n-    @BeforeClass\n-    public static void setUpClass() {\n-        control = EasyMock.createNiceControl();\n-    }\n-\n-    @AfterClass\n-    public static void tearDown() {\n-        control.verify();\n-    }\n \n     @Test\n     public void setHeadersTest() throws Exception {\n+        IMocksControl control = EasyMock.createNiceControl();\n         String[] headerNames = {\"Content-Type\", \"authorization\", \"soapAction\"};\n         String[] headerValues = {\"text/xml\", \"Basic Zm9vOmJhcg==\", \"foo\"};\n         Map<String, List<String>> inmap = new HashMap<String, List<String>>();\n@@ -102,6 +90,7 @@ public void setHeadersTest() throws Exception {\n         assertEquals(\"unexpected header\", protocolHeaders.get(\"SOAPACTION\").get(0), headerValues[2]);\n         assertEquals(\"unexpected header\", protocolHeaders.get(\"soapAction\").get(0), headerValues[2]);\n \n+        control.verify();\n     }\n \n     @Test\n@@ -173,4 +162,49 @@ public void close() throws SecurityException {\n \n         Headers.logProtocolHeaders(logger, Level.INFO, headerMap, false);\n     }\n+\n+    @Test\n+    public void nullContentTypeTest() {\n+        IMocksControl control = EasyMock.createNiceControl();\n+\n+        Message message = new MessageImpl();\n+\n+        // first check - content-type==null in message, nothing specified in request\n+        // expect that determineContentType will return the default value of text/xml\n+        message.put(Message.CONTENT_TYPE, null);\n+        Headers headers = new Headers(message);\n+        assertEquals(\"Unexpected content-type determined - expected text/xml\", \"text/xml\", \n+                     headers.determineContentType());\n+\n+        // second check - null specified in request, valid content-type specified in message\n+        // expect that determineContentType returns the content-type specified in the message\n+        HttpServletRequest req = control.createMock(HttpServletRequest.class);\n+        EasyMock.expect(req.getHeaderNames()).andReturn(Collections.emptyEnumeration());\n+        EasyMock.expect(req.getContentType()).andReturn(null).anyTimes();\n+        control.replay();\n+        message = new MessageImpl();\n+        message.put(Message.CONTENT_TYPE, \"application/json\");\n+        headers = new Headers(message);\n+        headers.copyFromRequest(req);\n+        assertEquals(\"Unexpected content-type determined - expected application/json\", \"application/json\", \n+                     headers.determineContentType());\n+\n+        control.verify();\n+\n+        // third check - content-type==null in message, null in request\n+        // expect that determineContentType returns the default value of text/xml\n+        control = EasyMock.createNiceControl();\n+        req = control.createMock(HttpServletRequest.class);\n+        EasyMock.expect(req.getHeaderNames()).andReturn(Collections.emptyEnumeration());\n+        EasyMock.expect(req.getContentType()).andReturn(null).anyTimes();\n+        control.replay();\n+        message = new MessageImpl();\n+        message.put(Message.CONTENT_TYPE, null);\n+        headers = new Headers(message);\n+        headers.copyFromRequest(req);\n+        assertEquals(\"Unexpected content-type determined - expected text/xml\", \"text/xml\", \n+                     headers.determineContentType());\n+\n+        control.verify();\n+    }\n }",
                "raw_url": "https://github.com/apache/cxf/raw/de9c7ecd7a4d205aa26d893889235468797e87bb/rt/transports/http/src/test/java/org/apache/cxf/transport/http/HeadersTest.java",
                "sha": "bcb4228d56a21ff178dfcadfcfa3313679c11657",
                "status": "modified"
            }
        ],
        "message": "[CXF-7174] Avoid NPE when content-type not set in http request, patch from Andy McCright applied, This closes #213",
        "parent": "https://github.com/apache/cxf/commit/45bc2219b761e671973acf297e0f37a1b8934c6c",
        "patched_files": [
            "Headers.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "HeadersTest.java"
        ]
    },
    "cxf_df376f9": {
        "bug_id": "cxf_df376f9",
        "commit": "https://github.com/apache/cxf/commit/df376f99fae456687fdab8a13d2f561f683d57b8",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cxf/blob/df376f99fae456687fdab8a13d2f561f683d57b8/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java?ref=df376f99fae456687fdab8a13d2f561f683d57b8",
                "deletions": 2,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java",
                "patch": "@@ -89,8 +89,14 @@ protected synchronized void updateDests(HttpServletRequest request) {\n         for (String path : paths) {\n             ServletDestination d2 = transport.getDestinationForPath(path);\n             String ad = d2.getEndpointInfo().getAddress();\n-            if (ad.equals(path)\n-                || ad.equals(lastBase + path)) {\n+            if (ad == null \n+                && d2.getAddress() != null\n+                && d2.getAddress().getAddress() != null) {\n+                ad = d2.getAddress().getAddress().getValue();\n+            }\n+            if (ad != null \n+                && (ad.equals(path)\n+                || ad.equals(lastBase + path))) {\n                 d2.getEndpointInfo().setAddress(base + path);\n                 if (d2.getEndpointInfo().getExtensor(AddressType.class) != null) {\n                     d2.getEndpointInfo().getExtensor(AddressType.class).setLocation(base + path);",
                "raw_url": "https://github.com/apache/cxf/raw/df376f99fae456687fdab8a13d2f561f683d57b8/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java",
                "sha": "2922c1b34136e76c2a74e0c25c8eb4da8aab529b",
                "status": "modified"
            }
        ],
        "message": "[CXF-2551] Add some NPE checks into the ServletController\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@889067 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/cf56eefa916ca15924e275ae737cd77a4b8b57f5",
        "patched_files": [
            "ServletController.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "ServletControllerTest.java"
        ]
    },
    "cxf_dfb24e2": {
        "bug_id": "cxf_dfb24e2",
        "commit": "https://github.com/apache/cxf/commit/dfb24e2c6eecbdf96e2c241360843afa01b12eec",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/dfb24e2c6eecbdf96e2c241360843afa01b12eec/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPTransportFactory.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPTransportFactory.java?ref=dfb24e2c6eecbdf96e2c241360843afa01b12eec",
                "deletions": 0,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPTransportFactory.java",
                "patch": "@@ -255,6 +255,9 @@ public Conduit getConduit(\n     }\n     \n     public Destination getDestination(EndpointInfo endpointInfo) throws IOException {\n+        if (endpointInfo == null) {\n+            throw new IllegalArgumentException(\"EndpointInfo cannot be null\");\n+        }\n         AbstractHTTPDestination d = registry.getDestinationForPath(endpointInfo.getAddress());\n         if (d == null) {\n             HttpDestinationFactory jettyFactory = bus.getExtension(HttpDestinationFactory.class);",
                "raw_url": "https://github.com/apache/cxf/raw/dfb24e2c6eecbdf96e2c241360843afa01b12eec/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPTransportFactory.java",
                "sha": "a0fca0d588c636d280ae827e5d473d88f5b6bfe9",
                "status": "modified"
            }
        ],
        "message": "Add an NPE guard\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1152083 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/7c4a15ff6d03feb8ff652d3d058ba25c063e540b",
        "patched_files": [
            "HTTPTransportFactory.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "HTTPTransportFactoryTest.java"
        ]
    },
    "cxf_e4ddb0a": {
        "bug_id": "cxf_e4ddb0a",
        "commit": "https://github.com/apache/cxf/commit/e4ddb0a149edfbf95cbf427d4d1ba63d8a4ab6b9",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/e4ddb0a149edfbf95cbf427d4d1ba63d8a4ab6b9/tools/corba/src/main/java/org/apache/cxf/tools/corba/processors/idl/ConstVisitor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/corba/src/main/java/org/apache/cxf/tools/corba/processors/idl/ConstVisitor.java?ref=e4ddb0a149edfbf95cbf427d4d1ba63d8a4ab6b9",
                "deletions": 1,
                "filename": "tools/corba/src/main/java/org/apache/cxf/tools/corba/processors/idl/ConstVisitor.java",
                "patch": "@@ -93,7 +93,9 @@ public void visit(AST constNode) {\n         } else if (ScopedNameVisitor.accept(getScope(), definition, schema, constTypeNode, wsdlVisitor)) {\n             visitor = new ScopedNameVisitor(getScope(), definition, schema, wsdlVisitor);            \n         }\n-        \n+        if (visitor == null) {\n+            throw new RuntimeException(\"can't resolve type for const \" + constNameNode.getText());\n+        }\n         visitor.visit(constTypeNode);                \n         XmlSchemaType constSchemaType = visitor.getSchemaType();\n         CorbaTypeImpl constCorbaType = visitor.getCorbaType();        ",
                "raw_url": "https://github.com/apache/cxf/raw/e4ddb0a149edfbf95cbf427d4d1ba63d8a4ab6b9/tools/corba/src/main/java/org/apache/cxf/tools/corba/processors/idl/ConstVisitor.java",
                "sha": "4e290f69f5788583aea6e22add540daa55640121",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/cxf/blob/e4ddb0a149edfbf95cbf427d4d1ba63d8a4ab6b9/tools/corba/src/test/java/org/apache/cxf/tools/corba/IDLToWSDLTest.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/corba/src/test/java/org/apache/cxf/tools/corba/IDLToWSDLTest.java?ref=e4ddb0a149edfbf95cbf427d4d1ba63d8a4ab6b9",
                "deletions": 0,
                "filename": "tools/corba/src/test/java/org/apache/cxf/tools/corba/IDLToWSDLTest.java",
                "patch": "@@ -378,4 +378,21 @@ public void testDuplicateTypeGeneration() throws Exception {\n         doTestGeneratedWsdl(expected, actual);\n     }\n \n+    public void testUndefinedTypeRef() throws Exception {\n+        File input = new File(getClass().getResource(\"/idl/ReferUndefinedType.idl\").toURI());\n+        File include1Dir = new File(getClass().getResource(\"/idl\").toURI());\n+               \n+        String[] args = new String[] {\"-ow\", \"ExternalInterfaceRef.wsdl\",\n+                                      \"-o\", output.toString(),\n+                                      \"-I\", include1Dir.toString(),\n+                                      \"-verbose\",\n+                                      input.toString()\n+        };\n+        try {\n+            IDLToWSDL.run(args);\n+            fail(\"should throw a RuntimeException\");\n+        } catch (Exception e) {\n+            assertTrue(e.getMessage().indexOf(\"can't resolve type for const myConst\") >= 0);\n+        }\n+    }\n }",
                "raw_url": "https://github.com/apache/cxf/raw/e4ddb0a149edfbf95cbf427d4d1ba63d8a4ab6b9/tools/corba/src/test/java/org/apache/cxf/tools/corba/IDLToWSDLTest.java",
                "sha": "f5d7e2b6800c4e801d123a0c27caf01f2c7999f3",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/cxf/blob/e4ddb0a149edfbf95cbf427d4d1ba63d8a4ab6b9/tools/corba/src/test/resources/idl/ReferUndefinedType.idl",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/corba/src/test/resources/idl/ReferUndefinedType.idl?ref=e4ddb0a149edfbf95cbf427d4d1ba63d8a4ab6b9",
                "deletions": 0,
                "filename": "tools/corba/src/test/resources/idl/ReferUndefinedType.idl",
                "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#ifndef EXTERNAL_INTTERFACE_REF_IDL\n+#define EXTERNAL_INTTERFACE_REF_IDL\n+\n+#include \"PragmaPrefix.idl\"\n+\n+module ReferUndefinedType {\n+\n+  \n+  const Test2::NoThisType myConst = 1;\n+};\n+#endif",
                "raw_url": "https://github.com/apache/cxf/raw/e4ddb0a149edfbf95cbf427d4d1ba63d8a4ab6b9/tools/corba/src/test/resources/idl/ReferUndefinedType.idl",
                "sha": "c7898198e2c37deb9aa3de6c5f9b1562e0c8810c",
                "status": "added"
            }
        ],
        "message": "[CXF-3303]idl2wsdl fails with NPE if a type cannot be resolved\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1070799 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/194c101e4a5a37036f36daa96387e7069f7c912b",
        "patched_files": [
            "ReferUndefinedType.java",
            "ConstVisitor.java",
            "IDLToWSDL.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "IDLToWSDLTest.java"
        ]
    },
    "cxf_e67f2cf": {
        "bug_id": "cxf_e67f2cf",
        "commit": "https://github.com/apache/cxf/commit/e67f2cfc12b55b06632b1e0e733a91a09a0a734d",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/e67f2cfc12b55b06632b1e0e733a91a09a0a734d/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java?ref=e67f2cfc12b55b06632b1e0e733a91a09a0a734d",
                "deletions": 1,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java",
                "patch": "@@ -1693,7 +1693,7 @@ protected void makeTrustDecision() throws IOException {\n                 } catch (UntrustedURLConnectionIOException untrustedEx) {\n                     if (LOG.isLoggable(Level.FINE)) {\n                         LOG.log(Level.FINE, \"Trust Decider \"\n-                            + trustDecider.getLogicalName()\n+                            + trustDecider != null ? trustDecider.getLogicalName() : decider2.getLogicalName()\n                             + \" considers Conduit \"\n                             + conduitName \n                             + \" untrusted.\", untrustedEx);",
                "raw_url": "https://github.com/apache/cxf/raw/e67f2cfc12b55b06632b1e0e733a91a09a0a734d/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java",
                "sha": "fd69a5efb98c1f179e0a11358c2652fae8a03b26",
                "status": "modified"
            }
        ],
        "message": "[CXF-4803]NPE is thrown while enabling fine log level in TrustDecisionUtil if MessageTrustDecider from message context is used\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1442016 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/c738276bea35237efedc8b6c35dfaef0aa604ad3",
        "patched_files": [
            "HTTPConduit.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "HTTPConduitTest.java"
        ]
    },
    "cxf_e7013ba": {
        "bug_id": "cxf_e7013ba",
        "commit": "https://github.com/apache/cxf/commit/e7013ba82626938bbfe4c62d5c0823b3a182fbb4",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/e7013ba82626938bbfe4c62d5c0823b3a182fbb4/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ProviderFactory.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ProviderFactory.java?ref=e7013ba82626938bbfe4c62d5c0823b3a182fbb4",
                "deletions": 1,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ProviderFactory.java",
                "patch": "@@ -1003,7 +1003,7 @@ protected static int compareClasses(Class<?> expectedCls, Object o1, Object o2)\n                 Class<?> actualType = InjectionUtils.getActualType(genericSuperType);\n                 if (expectedClass == actualType) {\n                     return new Type[]{genericSuperType};\n-                } else if (expectedClass.isAssignableFrom(actualType)) {\n+                } else if (actualType != null && expectedClass.isAssignableFrom(actualType)) {\n                     return new Type[]{};    \n                 }\n             }",
                "raw_url": "https://github.com/apache/cxf/raw/e7013ba82626938bbfe4c62d5c0823b3a182fbb4/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ProviderFactory.java",
                "sha": "2f180e7350387887686400d7ee325a579b38b783",
                "status": "modified"
            }
        ],
        "message": "[CXF-5348] Preventing NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1563198 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/743852fad0f04bbdcd060d3f0bc3f592a132d3d6",
        "patched_files": [
            "ProviderFactory.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "ProviderFactoryTest.java"
        ]
    },
    "cxf_e74b62f": {
        "bug_id": "cxf_e74b62f",
        "commit": "https://github.com/apache/cxf/commit/e74b62fa7554f68ecf46eb1f578500fedcc65e41",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cxf/blob/e74b62fa7554f68ecf46eb1f578500fedcc65e41/api/src/main/java/org/apache/cxf/common/util/ReflectionUtil.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/api/src/main/java/org/apache/cxf/common/util/ReflectionUtil.java?ref=e74b62fa7554f68ecf46eb1f578500fedcc65e41",
                "deletions": 8,
                "filename": "api/src/main/java/org/apache/cxf/common/util/ReflectionUtil.java",
                "patch": "@@ -202,17 +202,17 @@ private static String getPackageName(String clzName) {\n         }\n         \n         if (springBeanUtilsDescriptorFetcher != null) {\n-            PropertyDescriptor[] descriptors = null;\n             if (propertyDescriptors != null) {\n-                descriptors = new PropertyDescriptor[propertyDescriptors.length];\n+                List<PropertyDescriptor> descriptors = new ArrayList<PropertyDescriptor>(propertyDescriptors.length);\n                 for (int i = 0; i < propertyDescriptors.length; i++) {\n                     PropertyDescriptor propertyDescriptor = propertyDescriptors[i];\n                     try {\n-                        descriptors[i] = \n-                            (PropertyDescriptor)\n-                            springBeanUtilsDescriptorFetcher.invoke(null,\n-                                                                    beanClass, \n-                                                                    propertyDescriptor.getName());\n+                        propertyDescriptor = (PropertyDescriptor)springBeanUtilsDescriptorFetcher.invoke(null,\n+                                                                                     beanClass, \n+                                                                                     propertyDescriptor.getName());\n+                        if (propertyDescriptor != null) {\n+                            descriptors.add(propertyDescriptor);\n+                        }\n                     } catch (IllegalArgumentException e) {\n                         throw new RuntimeException(e);\n                     } catch (IllegalAccessException e) {\n@@ -221,8 +221,9 @@ private static String getPackageName(String clzName) {\n                         throw new RuntimeException(e);\n                     } \n                 }\n+                return descriptors.toArray(new PropertyDescriptor[descriptors.size()]);\n             }\n-            return descriptors;\n+            return null;\n         } else {\n             return beanInfo.getPropertyDescriptors();\n         }",
                "raw_url": "https://github.com/apache/cxf/raw/e74b62fa7554f68ecf46eb1f578500fedcc65e41/api/src/main/java/org/apache/cxf/common/util/ReflectionUtil.java",
                "sha": "bd42dc0418c51a73a193a0c26230037dae1bd709",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/e74b62fa7554f68ecf46eb1f578500fedcc65e41/rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/AbstractTypeCreator.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/AbstractTypeCreator.java?ref=e74b62fa7554f68ecf46eb1f578500fedcc65e41",
                "deletions": 0,
                "filename": "rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/AbstractTypeCreator.java",
                "patch": "@@ -132,6 +132,9 @@ public AegisType createTypeForClass(TypeClassInfo info) {\n                 if (info.getTypeName() != null) {\n                     type = getTypeMapping().getType(info.getTypeName());\n                 }\n+                if (type == null) {\n+                    type = getTypeMapping().getType(javaClass);\n+                }\n                 if (type == null) {\n                     type = createDefaultType(info);\n                 } else {",
                "raw_url": "https://github.com/apache/cxf/raw/e74b62fa7554f68ecf46eb1f578500fedcc65e41/rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/AbstractTypeCreator.java",
                "sha": "a273675f72572aa72ba41896a5e588319bd67252",
                "status": "modified"
            },
            {
                "additions": 135,
                "blob_url": "https://github.com/apache/cxf/blob/e74b62fa7554f68ecf46eb1f578500fedcc65e41/rt/databinding/aegis/src/test/java/org/apache/cxf/aegis/type/java5/ClassTest.java",
                "changes": 135,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/databinding/aegis/src/test/java/org/apache/cxf/aegis/type/java5/ClassTest.java?ref=e74b62fa7554f68ecf46eb1f578500fedcc65e41",
                "deletions": 0,
                "filename": "rt/databinding/aegis/src/test/java/org/apache/cxf/aegis/type/java5/ClassTest.java",
                "patch": "@@ -0,0 +1,135 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.aegis.type.java5;\n+\n+import java.io.Serializable;\n+\n+import javax.xml.namespace.QName;\n+\n+import org.w3c.dom.Document;\n+\n+import org.apache.cxf.aegis.AbstractAegisTest;\n+import org.apache.cxf.aegis.AegisContext;\n+import org.apache.cxf.aegis.Context;\n+import org.apache.cxf.aegis.DatabindingException;\n+import org.apache.cxf.aegis.databinding.AegisDatabinding;\n+import org.apache.cxf.aegis.type.AegisType;\n+import org.apache.cxf.aegis.type.basic.StringType;\n+import org.apache.cxf.aegis.xml.MessageReader;\n+import org.apache.cxf.aegis.xml.MessageWriter;\n+import org.apache.cxf.common.util.XMLSchemaQNames;\n+import org.apache.cxf.endpoint.Server;\n+import org.apache.cxf.frontend.ServerFactoryBean;\n+import org.apache.cxf.staxutils.StaxUtils;\n+import org.apache.ws.commons.schema.XmlSchema;\n+import org.apache.ws.commons.schema.XmlSchemaSimpleType;\n+import org.apache.ws.commons.schema.XmlSchemaSimpleTypeRestriction;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ClassTest extends AbstractAegisTest {\n+    Server server;\n+\n+    @Before\n+    public void startServer() throws Exception {\n+        AegisContext context = new AegisContext();\n+        context.initialize();\n+        context.getTypeMapping().register(new ClassAsStringType());\n+        \n+        ServerFactoryBean b = new ServerFactoryBean();\n+        b.setDataBinding(new AegisDatabinding(context));\n+        b.setServiceClass(GenericsService.class);\n+        b.setAddress(\"local://GenericsService\");\n+        server = b.create();\n+    }\n+    @After\n+    public void stopServer() {\n+        server.stop();\n+        server.destroy();\n+        server = null;\n+    }\n+\n+    @Test\n+    public void testType() throws Exception {\n+        Document doc = getWSDLDocument(\"GenericsService\");\n+        assertNotNull(doc);\n+        this.assertValidBoolean(\"//xsd:simpleType[@name='class']/xsd:restriction\", doc.getDocumentElement());\n+    }\n+\n+    public static class GenericsService {\n+\n+        public <T extends Serializable> T createInstance(Class<T> type)\n+            throws InstantiationException, IllegalAccessException {\n+            return type.newInstance();\n+        }\n+    }\n+    \n+    \n+    public static class ClassAsStringType extends AegisType {\n+        \n+        public static final QName CLASS_AS_STRING_TYPE_QNAME \n+            = new QName(\"http://cxf.apache.org/my/class/test\", \"class\");\n+             \n+        private StringType stringType;\n+             \n+        public ClassAsStringType() {\n+            stringType = new StringType();\n+            super.setTypeClass(Class.class);\n+            super.setSchemaType(CLASS_AS_STRING_TYPE_QNAME);\n+        }\n+         \n+        public Object readObject(MessageReader reader, Context context)\n+            throws DatabindingException {\n+            String className = (String) stringType.readObject(reader, context);\n+            Class<?> cls = null;\n+            try {\n+                context.getClass().getClassLoader().loadClass(className);\n+            } catch (ClassNotFoundException x) {\n+                throw new DatabindingException(\"Unable to dynamically load class '\"\n+                    + className + \"'\", x);\n+            }\n+            return cls;\n+        }\n+         \n+        public void writeObject(Object object, MessageWriter writer, Context context) \n+            throws DatabindingException {\n+            if (object == null) {\n+                stringType.writeObject(null, writer, context);\n+            } else {\n+                Class<?> cls = (Class<?>) object;\n+                stringType.writeObject(cls.getName(), writer, context);\n+            }\n+        }\n+        public void writeSchema(XmlSchema root) {\n+            XmlSchemaSimpleType xst = new XmlSchemaSimpleType(root, true);\n+            xst.setName(\"class\");\n+            \n+            XmlSchemaSimpleTypeRestriction content = new XmlSchemaSimpleTypeRestriction();\n+            content.setBaseTypeName(XMLSchemaQNames.XSD_STRING);\n+            xst.setContent(content);\n+        }\n+                 \n+        public boolean usesUtilityTypes() {\n+            return true;\n+        }\n+    }    \n+\n+}",
                "raw_url": "https://github.com/apache/cxf/raw/e74b62fa7554f68ecf46eb1f578500fedcc65e41/rt/databinding/aegis/src/test/java/org/apache/cxf/aegis/type/java5/ClassTest.java",
                "sha": "4c9843b47f44096e552311cee442765f2dc5ce8e",
                "status": "added"
            }
        ],
        "message": "[CXF-3613] Update to show how to use Class as a param/type with Aegis\nFix potential NPE via a null in the PropertyDescriptor[]\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1401880 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/84ec3a8e9b0735b9b6d40222848fe288b19c7a03",
        "patched_files": [
            "AbstractTypeCreator.java",
            "ReflectionUtil.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "ClassTest.java"
        ]
    },
    "cxf_e848fc3": {
        "bug_id": "cxf_e848fc3",
        "commit": "https://github.com/apache/cxf/commit/e848fc3499b3deb95ff5e0c5a6e80867f5c903f2",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/e848fc3499b3deb95ff5e0c5a6e80867f5c903f2/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/SoapBindingFactory.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/SoapBindingFactory.java?ref=e848fc3499b3deb95ff5e0c5a6e80867f5c903f2",
                "deletions": 2,
                "filename": "rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/SoapBindingFactory.java",
                "patch": "@@ -208,8 +208,9 @@ public BindingInfo createBindingInfo(ServiceInfo si, String bindingid, Object co\n \n     private void createSoapBinding(final SoapBindingInfo bi) throws WSDLException {\n         boolean isSoap12 = bi.getSoapVersion() instanceof Soap12;\n-        ExtensionRegistry extensionRegistry = getBus().getExtension(WSDLManager.class)\n-            .getExtensionRegistry();\n+        Bus bs = getBus();\n+        WSDLManager m = bs.getExtension(WSDLManager.class);\n+        ExtensionRegistry extensionRegistry = m.getExtensionRegistry();\n \n         SoapBinding soapBinding = SOAPBindingUtil.createSoapBinding(extensionRegistry, isSoap12);\n         soapBinding.setStyle(bi.getStyle());",
                "raw_url": "https://github.com/apache/cxf/raw/e848fc3499b3deb95ff5e0c5a6e80867f5c903f2/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/SoapBindingFactory.java",
                "sha": "8ffabb679c37e8029a37396af845d673cffc40d1",
                "status": "modified"
            }
        ],
        "message": "Split line into 3 to try and debug which part is causing the NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@922913 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/287fbe1a653a12f90cb7d324ac83ed848ef13589",
        "patched_files": [
            "SoapBindingFactory.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "SoapBindingFactoryTest.java"
        ]
    },
    "cxf_e855e8f": {
        "bug_id": "cxf_e855e8f",
        "commit": "https://github.com/apache/cxf/commit/e855e8f139fdff2fb397e45ee0df9a7e70378a59",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cxf/blob/e855e8f139fdff2fb397e45ee0df9a7e70378a59/api/src/main/java/org/apache/cxf/message/Message.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/api/src/main/java/org/apache/cxf/message/Message.java?ref=e855e8f139fdff2fb397e45ee0df9a7e70378a59",
                "deletions": 0,
                "filename": "api/src/main/java/org/apache/cxf/message/Message.java",
                "patch": "@@ -69,6 +69,12 @@\n     String PARTIAL_RESPONSE_MESSAGE = \"org.apache.cxf.partial.response\";\n     String EMPTY_PARTIAL_RESPONSE_MESSAGE = \"org.apache.cxf.partial.response.empty\";\n     String ONE_WAY_REQUEST = \"OnewayRequest\";\n+\n+    /**\n+     * Boolean property specifying if oneWay response must be processed.\n+     */\n+    String PROCESS_ONEWAY_REPONSE = \"org.apache.cxf.transport.processOneWayResponse\";\n+    \n     \n     String ROBUST_ONEWAY = \"org.apache.cxf.oneway.robust\";\n     ",
                "raw_url": "https://github.com/apache/cxf/raw/e855e8f139fdff2fb397e45ee0df9a7e70378a59/api/src/main/java/org/apache/cxf/message/Message.java",
                "sha": "449cbce3f05c89d557dd124f7d9fe4dabb40e12a",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/cxf/blob/e855e8f139fdff2fb397e45ee0df9a7e70378a59/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java?ref=e855e8f139fdff2fb397e45ee0df9a7e70378a59",
                "deletions": 2,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java",
                "patch": "@@ -18,7 +18,6 @@\n  */\n package org.apache.cxf.transport.http;\n \n-\n import java.beans.PropertyChangeEvent;\n import java.beans.PropertyChangeListener;\n import java.io.ByteArrayInputStream;\n@@ -1564,6 +1563,15 @@ private boolean isOneway(Exchange exchange) {\n             return exchange != null && exchange.isOneWay();\n         }\n         \n+        private boolean doProcessResponse(Message message) {\n+            // 1. Not oneWay\n+            if (!isOneway(message.getExchange())) {\n+                return true;\n+            }\n+            // 2. Context property\n+            return MessageUtils.getContextualBoolean(message, Message.PROCESS_ONEWAY_REPONSE, false);\n+        }\n+\n         protected void handleResponseInternal() throws IOException {\n             Exchange exchange = outMessage.getExchange();\n             int responseCode = connection.getResponseCode();\n@@ -1590,7 +1598,7 @@ protected void handleResponseInternal() throws IOException {\n             if (isOneway(exchange) \n                 || HttpURLConnection.HTTP_ACCEPTED == responseCode) {\n                 in = ChunkedUtil.getPartialResponse(connection, responseCode);\n-                if (in == null) {\n+                if ((in == null) || (!doProcessResponse(outMessage))) {\n                     // oneway operation or decoupled MEP without \n                     // partial response\n                     connection.getInputStream().close();\n@@ -1603,6 +1611,9 @@ protected void handleResponseInternal() throws IOException {\n                             cc.handleResponse(null, null);\n                         }\n                     }\n+                    if (in != null) {\n+                        in.close();\n+                    }\n                     return;\n                 }\n             } else {",
                "raw_url": "https://github.com/apache/cxf/raw/e855e8f139fdff2fb397e45ee0df9a7e70378a59/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java",
                "sha": "4fce16c1f3e9672d51ddd317c622430f7cfff5d2",
                "status": "modified"
            },
            {
                "additions": 45,
                "blob_url": "https://github.com/apache/cxf/blob/e855e8f139fdff2fb397e45ee0df9a7e70378a59/rt/transports/http/src/test/java/org/apache/cxf/transport/http/HTTPConduitURLEasyMockTest.java",
                "changes": 72,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/test/java/org/apache/cxf/transport/http/HTTPConduitURLEasyMockTest.java?ref=e855e8f139fdff2fb397e45ee0df9a7e70378a59",
                "deletions": 27,
                "filename": "rt/transports/http/src/test/java/org/apache/cxf/transport/http/HTTPConduitURLEasyMockTest.java",
                "patch": "@@ -48,7 +48,6 @@\n import org.apache.cxf.ws.addressing.EndpointReferenceType;\n import org.easymock.EasyMock;\n import org.easymock.IMocksControl;\n-\n import org.junit.After;\n import org.junit.AfterClass;\n import org.junit.Assert;\n@@ -61,7 +60,7 @@\n public class HTTPConduitURLEasyMockTest extends Assert {\n     private static String oldHttpProxyHost;\n \n-    private enum ResponseStyle { NONE, BACK_CHANNEL, BACK_CHANNEL_ERROR, DECOUPLED };\n+    private enum ResponseStyle { NONE, BACK_CHANNEL, BACK_CHANNEL_ERROR, DECOUPLED, ONEWAY_NONE };\n     private enum ResponseDelimiter { LENGTH, CHUNKED, EOF };\n \n     private static final String NOWHERE = \"http://nada.nothing.nowhere.null/\";\n@@ -212,12 +211,13 @@ public void testSendHttpGetConnection() throws Exception {\n     }\n \n     @Test\n-    public void testSendOnewayChunkedEmptyPartialResponse() \n+    public void testSendOnewayChunkedEmptyPartialResponseProcessResponse() \n         throws Exception {\n         control = EasyMock.createNiceControl();\n         HTTPConduit conduit = setUpConduit(true, false);\n         Message message = new MessageImpl();\n         conduit.prepare(message);\n+        message.put(Message.PROCESS_ONEWAY_REPONSE, Boolean.TRUE);\n         verifySentMessage(conduit, \n                           message, \n                           ResponseStyle.NONE,\n@@ -226,7 +226,23 @@ public void testSendOnewayChunkedEmptyPartialResponse()\n                           \"POST\");\n         finalVerify();\n     }\n-    \n+\n+    @Test\n+    public void testSendOnewayDoNotProcessResponse() \n+        throws Exception {\n+        control = EasyMock.createNiceControl();\n+        HTTPConduit conduit = setUpConduit(true, false);\n+        Message message = new MessageImpl();\n+        conduit.prepare(message);\n+        verifySentMessage(conduit, \n+                          message, \n+                          ResponseStyle.ONEWAY_NONE,\n+                          ResponseDelimiter.CHUNKED,\n+                          true,  // empty response\n+                          \"POST\");\n+        finalVerify();\n+    }\n+\n     @Test\n     public void testSendTwowayDecoupledEmptyPartialResponse() \n         throws Exception {\n@@ -266,9 +282,9 @@ private void setUpOneway(Message message) {\n         Exchange exchange = control.createMock(Exchange.class);\n         message.setExchange(exchange);\n         exchange.isOneWay();\n-        EasyMock.expectLastCall().andReturn(true);\n+        EasyMock.expectLastCall().andReturn(true).anyTimes();\n         exchange.isSynchronous();\n-        EasyMock.expectLastCall().andReturn(true);\n+        EasyMock.expectLastCall().andReturn(true).anyTimes();\n         exchange.isEmpty();\n         EasyMock.expectLastCall().andReturn(true).anyTimes();\n     }\n@@ -425,33 +441,35 @@ private void verifySentMessage(HTTPConduit conduit,\n             EasyMock.expectLastCall();\n         }\n         \n-        if (style == ResponseStyle.NONE) {\n+        if ((style == ResponseStyle.NONE) || (style == ResponseStyle.ONEWAY_NONE)) {\n             setUpOneway(message);\n         }\n         \n         connection.getRequestMethod();\n         EasyMock.expectLastCall().andReturn(method).anyTimes();\n-        verifyHandleResponse(style, delimiter, conduit);\n+        verifyHandleResponse(style, delimiter, emptyResponse, conduit);\n \n         control.replay();\n         \n         wrappedOS.flush();\n         wrappedOS.flush();\n         wrappedOS.close();\n \n-        assertNotNull(\"expected in message\", inMessage);\n-        Map<?, ?> headerMap = (Map<?, ?>) inMessage.get(Message.PROTOCOL_HEADERS);\n-        assertEquals(\"unexpected response headers\", headerMap.size(), 0);\n-        Integer expectedResponseCode = getResponseCode(style);\n-        assertEquals(\"unexpected response code\",\n-                     expectedResponseCode,\n-                     inMessage.get(Message.RESPONSE_CODE));\n-        if (!emptyResponse) {\n-            assertTrue(\"unexpected content formats\",\n-                       inMessage.getContentFormats().contains(InputStream.class));\n-            InputStream content = inMessage.getContent(InputStream.class);\n-            if (!(content instanceof PushbackInputStream)) {\n-                assertSame(\"unexpected content\", is, content);            \n+        if (style != ResponseStyle.ONEWAY_NONE) {\n+            assertNotNull(\"expected in message\", inMessage);\n+            Map<?, ?> headerMap = (Map<?, ?>) inMessage.get(Message.PROTOCOL_HEADERS);\n+            assertEquals(\"unexpected response headers\", headerMap.size(), 0);\n+            Integer expectedResponseCode = getResponseCode(style);\n+            assertEquals(\"unexpected response code\",\n+                         expectedResponseCode,\n+                         inMessage.get(Message.RESPONSE_CODE));\n+            if (!emptyResponse) {\n+                assertTrue(\"unexpected content formats\",\n+                           inMessage.getContentFormats().contains(InputStream.class));\n+                InputStream content = inMessage.getContent(InputStream.class);\n+                if (!(content instanceof PushbackInputStream)) {\n+                    assertSame(\"unexpected content\", is, content);            \n+                }\n             }\n         }\n         \n@@ -505,11 +523,6 @@ private OutputStream verifyRequestHeaders(Message message, boolean expectHeaders\n         return wrappedOS;\n     }\n     \n-    private void verifyHandleResponse(ResponseStyle style, ResponseDelimiter delimiter, HTTPConduit conduit) \n-        throws IOException {\n-        verifyHandleResponse(style, delimiter, false, conduit);\n-    }\n-    \n     private void verifyHandleResponse(ResponseStyle style, \n                                       ResponseDelimiter delimiter,\n                                       boolean emptyResponse,\n@@ -560,7 +573,12 @@ private void verifyHandleResponse(ResponseStyle style,\n         case BACK_CHANNEL_ERROR:\n             connection.getErrorStream();\n             EasyMock.expectLastCall().andReturn(null);\n-            break;    \n+            break; \n+            \n+        case ONEWAY_NONE:\n+            is.close();\n+            EasyMock.expectLastCall();\n+            break;\n             \n         default:\n             break;",
                "raw_url": "https://github.com/apache/cxf/raw/e855e8f139fdff2fb397e45ee0df9a7e70378a59/rt/transports/http/src/test/java/org/apache/cxf/transport/http/HTTPConduitURLEasyMockTest.java",
                "sha": "46c1e9095f49b10ab1383cc3991232afc9c42915",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/e855e8f139fdff2fb397e45ee0df9a7e70378a59/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/RMOutInterceptor.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/RMOutInterceptor.java?ref=e855e8f139fdff2fb397e45ee0df9a7e70378a59",
                "deletions": 0,
                "filename": "rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/RMOutInterceptor.java",
                "patch": "@@ -117,6 +117,11 @@ protected void handle(Message msg) throws SequenceFault, RMException {\n             RMContextUtils.storeRMProperties(msg, rmpsOut, true);\n         }\n         \n+        // Activate process response for oneWay\n+        if (msg.getExchange().isOneWay()) {\n+            msg.getExchange().put(Message.PROCESS_ONEWAY_REPONSE, true);\n+        }\n+        \n         RMProperties rmpsIn = null;\n         Identifier inSeqId = null;\n         long inMessageNumber = 0;",
                "raw_url": "https://github.com/apache/cxf/raw/e855e8f139fdff2fb397e45ee0df9a7e70378a59/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/RMOutInterceptor.java",
                "sha": "e765ad839b4f9a72d7f2c74d45dda6f1f6cf77c8",
                "status": "modified"
            }
        ],
        "message": "[CXF-4248] DocLiteralInInterceptor throws NPE if oneWay operation sends non-empty response\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1342527 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/64d6a8a70a04eab2dc480502857a00b7785c95c9",
        "patched_files": [
            "Message.java",
            "HTTPConduit.java",
            "RMOutInterceptor.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "MessageTest.java",
            "RMOutInterceptorTest.java",
            "HTTPConduitURLEasyMockTest.java",
            "HTTPConduitTest.java"
        ]
    },
    "cxf_ecbbda4": {
        "bug_id": "cxf_ecbbda4",
        "commit": "https://github.com/apache/cxf/commit/ecbbda410dbe6e36b1cd425d07ad3c8756c5c2e4",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/ecbbda410dbe6e36b1cd425d07ad3c8756c5c2e4/rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/ContextUtils.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/ContextUtils.java?ref=ecbbda410dbe6e36b1cd425d07ad3c8756c5c2e4",
                "deletions": 1,
                "filename": "rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/ContextUtils.java",
                "patch": "@@ -918,7 +918,7 @@ public static String getAction(Extensible ext) {\n         if (o instanceof QName) {\n             return ((QName)o).getLocalPart();\n         }\n-        return o.toString();\n+        return o == null ? null : o.toString();\n     }\n     public static EndpointReferenceType getNoneEndpointReference() {\n         return NONE_ENDPOINT_REFERENCE;",
                "raw_url": "https://github.com/apache/cxf/raw/ecbbda410dbe6e36b1cd425d07ad3c8756c5c2e4/rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/ContextUtils.java",
                "sha": "d13b35c8a595133e302ce12ca372944f1667730b",
                "status": "modified"
            }
        ],
        "message": "[CXF-3871] avoid NPE at getAction in wsa ContextUtils.getAction\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1187370 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/1fe19dc206aab805f40d671d0b39e672d1bdb400",
        "patched_files": [
            "ContextUtils.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "ContextUtilsTest.java"
        ]
    },
    "cxf_eea01bb": {
        "bug_id": "cxf_eea01bb",
        "commit": "https://github.com/apache/cxf/commit/eea01bbe70a1b1f472fdd63c363d1f15e550b1bc",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/eea01bbe70a1b1f472fdd63c363d1f15e550b1bc/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/FormEncodingProvider.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/FormEncodingProvider.java?ref=eea01bbe70a1b1f472fdd63c363d1f15e550b1bc",
                "deletions": 0,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/FormEncodingProvider.java",
                "patch": "@@ -89,6 +89,9 @@ public Object readFrom(\n         Class<Object> clazz, Type genericType, Annotation[] annotations, MediaType mt, \n         MultivaluedMap<String, String> headers, InputStream is) \n         throws IOException {\n+        if (is == null) {\n+            return null;\n+        }\n         try {\n             if (mt.isCompatible(MediaType.MULTIPART_FORM_DATA_TYPE)) {\n                 MultipartBody body = AttachmentUtils.getMultipartBody(mc);",
                "raw_url": "https://github.com/apache/cxf/raw/eea01bbe70a1b1f472fdd63c363d1f15e550b1bc/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/FormEncodingProvider.java",
                "sha": "2389322778a7f0a653287e7db323541767930103",
                "status": "modified"
            }
        ],
        "message": "[CXF-3821] Adding an NPE guard to FormEncodingProvider\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1175951 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/5af4066acba87bae5687ff5f50e573cc5808e777",
        "patched_files": [
            "FormEncodingProvider.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "FormEncodingProviderTest.java"
        ]
    },
    "cxf_f1593e4": {
        "bug_id": "cxf_f1593e4",
        "commit": "https://github.com/apache/cxf/commit/f1593e4d3ab856611f419f3948252ccfd4b09fa0",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/f1593e4d3ab856611f419f3948252ccfd4b09fa0/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java?ref=f1593e4d3ab856611f419f3948252ccfd4b09fa0",
                "deletions": 1,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java",
                "patch": "@@ -1259,7 +1259,7 @@ protected void retransmit(String newURL) throws IOException {\n \n             // If this is a GET method we must not touch the output\n             // stream as this automagically turns the request into a POST.\n-            if (getMethod().equals(\"GET\")) {\n+            if (getMethod().equals(\"GET\") || cachedStream == null) {\n                 handleNoOutput();\n                 return;\n             }",
                "raw_url": "https://github.com/apache/cxf/raw/f1593e4d3ab856611f419f3948252ccfd4b09fa0/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java",
                "sha": "8314c1403a7305f3e06a821505fc8d86587ca7e7",
                "status": "modified"
            }
        ],
        "message": "Adding a cached stream NPE check to HttpConduit",
        "parent": "https://github.com/apache/cxf/commit/ceb04f964e0772389b7a773114c282769ba913a3",
        "patched_files": [
            "HTTPConduit.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "HTTPConduitTest.java"
        ]
    },
    "cxf_f20c924": {
        "bug_id": "cxf_f20c924",
        "commit": "https://github.com/apache/cxf/commit/f20c924442a8f5055dd7021f03eb364b675052b0",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/f20c924442a8f5055dd7021f03eb364b675052b0/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceFactoryBean.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceFactoryBean.java?ref=f20c924442a8f5055dd7021f03eb364b675052b0",
                "deletions": 2,
                "filename": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceFactoryBean.java",
                "patch": "@@ -579,15 +579,15 @@ private void buildWSAActions(OperationInfo operation, Method method) {\n             if (faultActions != null && faultActions.length > 0 && operation.getFaults() != null) {\n                 for (FaultAction faultAction : faultActions) {\n                     FaultInfo faultInfo = getFaultInfo(operation, faultAction.className());\n-                    if (!StringUtils.isEmpty(faultAction.value())) {\n+                    if (faultInfo != null && !StringUtils.isEmpty(faultAction.value())) {\n                         faultInfo.addExtensionAttribute(JAXWSAConstants.WSAW_ACTION_QNAME, faultAction\n                             .value());\n                         faultInfo.addExtensionAttribute(JAXWSAConstants.WSAM_ACTION_QNAME, faultAction\n                             .value());\n                     }\n                     if (operation.isUnwrappedCapable()) {\n                         faultInfo = getFaultInfo(operation.getUnwrappedOperation(), faultAction.className());\n-                        if (!StringUtils.isEmpty(faultAction.value())) {\n+                        if (faultInfo != null && !StringUtils.isEmpty(faultAction.value())) {\n                             faultInfo.addExtensionAttribute(JAXWSAConstants.WSAW_ACTION_QNAME, faultAction\n                                 .value());\n                             faultInfo.addExtensionAttribute(JAXWSAConstants.WSAM_ACTION_QNAME, faultAction",
                "raw_url": "https://github.com/apache/cxf/raw/f20c924442a8f5055dd7021f03eb364b675052b0/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceFactoryBean.java",
                "sha": "bdf15404d180d1d7fc750ea03d5b5679086276fb",
                "status": "modified"
            }
        ],
        "message": "[CXF-4493]add NPE guard when FaultAction is used with OneWay\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1380132 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/b7138cc714b0c7e92ec3983e107c69d50f7ac338",
        "patched_files": [
            "JaxWsServiceFactoryBean.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JaxWsServiceFactoryBeanTest.java"
        ]
    },
    "cxf_f227e61": {
        "bug_id": "cxf_f227e61",
        "commit": "https://github.com/apache/cxf/commit/f227e61764874c882068d74c301b59a553d61574",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cxf/blob/f227e61764874c882068d74c301b59a553d61574/tools/validator/src/main/java/org/apache/cxf/tools/validator/internal/WSDLRefValidator.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/validator/src/main/java/org/apache/cxf/tools/validator/internal/WSDLRefValidator.java?ref=f227e61764874c882068d74c301b59a553d61574",
                "deletions": 3,
                "filename": "tools/validator/src/main/java/org/apache/cxf/tools/validator/internal/WSDLRefValidator.java",
                "patch": "@@ -247,7 +247,7 @@ public boolean isValid() {\n                                                   vNode.getPlainText()));\n                 }\n             }\n-        } catch (ToolException e) {\n+        } catch (Exception e) {\n             this.vResults.addError(e.getMessage());\n             return false;\n         }\n@@ -393,7 +393,7 @@ private void addWarning(String warningMsg) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    private void collectValidationPoints() {\n+    private void collectValidationPoints() throws Exception {\n         if (services.size() == 0) {\n             LOG.log(Level.WARNING, \"WSDL document \" \n                     + this.definition.getDocumentBaseURI() + \" does not define any services\");\n@@ -407,14 +407,20 @@ private void collectValidationPoints() {\n         collectValidationPointsForMessages();\n     }\n \n-    private void collectValidationPointsForBindings() {\n+    private void collectValidationPointsForBindings() throws Exception {\n         Map<QName, XNode> vBindingNodes = new HashMap<QName, XNode>();\n         for (Service service : services.values()) {\n             vBindingNodes.putAll(getBindings(service));\n         }\n \n         for (QName bName : vBindingNodes.keySet()) {\n             Binding binding = this.definition.getBinding(bName);\n+            if (binding == null) {\n+                LOG.log(Level.SEVERE, bName.toString() \n+                        + \" is not correct, please check that the correct namespace is being used\");\n+                throw new Exception(bName.toString() \n+                        + \" is not correct, please check that the correct namespace is being used\");\n+            }\n             XNode vBindingNode = getXNode(binding);\n             vBindingNode.setFailurePoint(vBindingNodes.get(bName));\n             vNodes.add(vBindingNode);",
                "raw_url": "https://github.com/apache/cxf/raw/f227e61764874c882068d74c301b59a553d61574/tools/validator/src/main/java/org/apache/cxf/tools/validator/internal/WSDLRefValidator.java",
                "sha": "5dca9193c067bf3c745347802127a08930b70c6d",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/cxf/blob/f227e61764874c882068d74c301b59a553d61574/tools/wsdlto/test/src/test/java/org/apache/cxf/tools/wsdlto/jaxws/CodeGenBugTest.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/wsdlto/test/src/test/java/org/apache/cxf/tools/wsdlto/jaxws/CodeGenBugTest.java?ref=f227e61764874c882068d74c301b59a553d61574",
                "deletions": 0,
                "filename": "tools/wsdlto/test/src/test/java/org/apache/cxf/tools/wsdlto/jaxws/CodeGenBugTest.java",
                "patch": "@@ -1041,5 +1041,18 @@ public void testCXF1048() throws Exception {\n         assertEquals(\"GreeterSOAPService\", webServiceAnn.serviceName());\n         assertEquals(\"PingSoapPort\", webServiceAnn.portName());\n     }\n+\n+    \n+    @Test\n+    public void testCXF1694() throws Exception {\n+\n+        try {\n+            env.put(ToolConstants.CFG_WSDLURL, getLocation(\"/wsdl2java_wsdl/cxf1694/test.wsdl\"));\n+            processor.setContext(env);\n+            processor.execute();\n+        } catch (Exception ex) {\n+            assertTrue(ex.getMessage().contains(\"{http://child/}Binding is not correct\"));\n+        }\n+    }\n     \n }",
                "raw_url": "https://github.com/apache/cxf/raw/f227e61764874c882068d74c301b59a553d61574/tools/wsdlto/test/src/test/java/org/apache/cxf/tools/wsdlto/jaxws/CodeGenBugTest.java",
                "sha": "9acf67652515c341a3f8e1df5557f28dc6c810cd",
                "status": "modified"
            },
            {
                "additions": 39,
                "blob_url": "https://github.com/apache/cxf/blob/f227e61764874c882068d74c301b59a553d61574/tools/wsdlto/test/src/test/resources/wsdl2java_wsdl/cxf1694/child.wsdl",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/wsdlto/test/src/test/resources/wsdl2java_wsdl/cxf1694/child.wsdl?ref=f227e61764874c882068d74c301b59a553d61574",
                "deletions": 0,
                "filename": "tools/wsdlto/test/src/test/resources/wsdl2java_wsdl/cxf1694/child.wsdl",
                "patch": "@@ -0,0 +1,39 @@\n+<wsdl:definitions name=\"Child\"\r\n+  xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\"\r\n+  xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\"\r\n+  xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\r\n+  xmlns:tns=\"http://child/\"\r\n+  xmlns:xsd=\"http://child/xsd\"\r\n+  targetNamespace=\"http://child/\">\r\n+  <wsdl:types>\r\n+    <xs:schema targetNamespace=\"http://child/xsd\">\r\n+      <xs:element name=\"Message\">\r\n+        <xs:complexType>\r\n+          <xs:sequence/>\r\n+        </xs:complexType>\r\n+      </xs:element>\r\n+    </xs:schema>\r\n+  </wsdl:types>\r\n+  <wsdl:message name=\"Message\">\r\n+    <wsdl:part name=\"msg\" element=\"xsd:Message\"/>\r\n+  </wsdl:message>\r\n+  <wsdl:portType name=\"PortType\">\r\n+    <wsdl:operation name=\"Operation\">\r\n+      <wsdl:input message=\"tns:Message\"/>\r\n+    </wsdl:operation>\r\n+  </wsdl:portType>\r\n+  <wsdl:binding name=\"Binding\" type=\"tns:PortType\">\r\n+        <soap:binding style=\"document\" transport=\"http://schemas.xmlsoap.org/soap/http\" />\r\n+    <wsdl:operation name=\"Operation\">\r\n+      <soap:operation style=\"document\"/>\r\n+      <wsdl:input>\r\n+        <soap:body use=\"literal\"/>\r\n+      </wsdl:input>\r\n+    </wsdl:operation>\r\n+  </wsdl:binding>\r\n+  <wsdl:service name=\"Service\">\r\n+        <wsdl:port name=\"Port\" binding=\"tns:Binding\">\r\n+            <soap:address location=\"http://localhost/service\" />\r\n+        </wsdl:port>\r\n+  </wsdl:service>\r\n+</wsdl:definitions>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cxf/raw/f227e61764874c882068d74c301b59a553d61574/tools/wsdlto/test/src/test/resources/wsdl2java_wsdl/cxf1694/child.wsdl",
                "sha": "728af270d86c9f2d9cf387f7c6d99adb6c585529",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/f227e61764874c882068d74c301b59a553d61574/tools/wsdlto/test/src/test/resources/wsdl2java_wsdl/cxf1694/test.wsdl",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/wsdlto/test/src/test/resources/wsdl2java_wsdl/cxf1694/test.wsdl?ref=f227e61764874c882068d74c301b59a553d61574",
                "deletions": 0,
                "filename": "tools/wsdlto/test/src/test/resources/wsdl2java_wsdl/cxf1694/test.wsdl",
                "patch": "@@ -0,0 +1,3 @@\n+<wsdl:definitions xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\" name=\"Parent\">\r\n+    <wsdl:import namespace=\"http://incorrect-namespace\" location=\"child.wsdl\" />\r\n+</wsdl:definitions>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cxf/raw/f227e61764874c882068d74c301b59a553d61574/tools/wsdlto/test/src/test/resources/wsdl2java_wsdl/cxf1694/test.wsdl",
                "sha": "9aaa96929f3af48a138ed0660b7811c40b7a6648",
                "status": "added"
            }
        ],
        "message": "Fix for https://issues.apache.org/jira/browse/CXF-1694\nNPE with invalid wsld:impor\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@688735 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/5823c88f598b3f0588cef0ce87f5d06bd399b0f4",
        "patched_files": [
            "child.java",
            "test.java",
            "WSDLRefValidator.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "WSDLRefValidatorTest.java",
            "CodeGenBugTest.java"
        ]
    },
    "cxf_f58500e": {
        "bug_id": "cxf_f58500e",
        "commit": "https://github.com/apache/cxf/commit/f58500e38c69850d6ac62192ea843ae2a5119418",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/f58500e38c69850d6ac62192ea843ae2a5119418/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java?ref=f58500e38c69850d6ac62192ea843ae2a5119418",
                "deletions": 1,
                "filename": "core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java",
                "patch": "@@ -1565,7 +1565,7 @@ public static void setNoEscapeHandler(final Marshaller marshaller) {\n     public static void setEscapeHandler(Marshaller marshaller, Object escapeHandler) {\n         try {\n             String postFix = getPostfix(marshaller.getClass());\n-            if (postFix != null) {\n+            if (postFix != null && escapeHandler != null) {\n                 marshaller.setProperty(\"com.sun.xml\" + postFix + \".bind.characterEscapeHandler\", escapeHandler);\n             }\n         } catch (PropertyException e) {",
                "raw_url": "https://github.com/apache/cxf/raw/f58500e38c69850d6ac62192ea843ae2a5119418/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java",
                "sha": "09107f560a3014dd15db977dc1070d02acef373c",
                "status": "modified"
            }
        ],
        "message": "[CXF-7905]add NPE guard for escapeHandler",
        "parent": "https://github.com/apache/cxf/commit/b11ba45f602ee0986cabd2020deb7e56b4f39bc5",
        "patched_files": [
            "JAXBUtils.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JAXBUtilsTest.java"
        ]
    },
    "cxf_f75fa59": {
        "bug_id": "cxf_f75fa59",
        "commit": "https://github.com/apache/cxf/commit/f75fa599c12005fd8541dbfe783882a334366307",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/f75fa599c12005fd8541dbfe783882a334366307/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java?ref=f75fa599c12005fd8541dbfe783882a334366307",
                "deletions": 1,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java",
                "patch": "@@ -385,7 +385,7 @@ public Link getLink(String relation) {\n         } \n         \n         throw new IllegalStateException(\"The entity is not backed by an input stream, entity class is : \"\n-            + entity != null ? entity.getClass().getName() : null);\n+            + (entity != null ? entity.getClass().getName() : null));\n         \n     }\n     ",
                "raw_url": "https://github.com/apache/cxf/raw/f75fa599c12005fd8541dbfe783882a334366307/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java",
                "sha": "51ff48dec7f8035b5c358b33c651a28d8d5c71fb",
                "status": "modified"
            }
        ],
        "message": "[CXF-5795] Prevening misleading NPE",
        "parent": "https://github.com/apache/cxf/commit/5885d6be3fdb3b9b38a4d9d753e927424f20096c",
        "patched_files": [
            "ResponseImpl.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "ResponseImplTest.java"
        ]
    },
    "cxf_fbbcf94": {
        "bug_id": "cxf_fbbcf94",
        "commit": "https://github.com/apache/cxf/commit/fbbcf945ad9d10b4fb16c8722de77b1f4c62db44",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/fbbcf945ad9d10b4fb16c8722de77b1f4c62db44/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/JCacheOAuthDataProvider.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/JCacheOAuthDataProvider.java?ref=fbbcf945ad9d10b4fb16c8722de77b1f4c62db44",
                "deletions": 1,
                "filename": "rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/JCacheOAuthDataProvider.java",
                "patch": "@@ -151,7 +151,11 @@ public ServerAccessToken getAccessToken(String accessTokenKey) throws OAuthServi\n \n     @Override\n     protected void doRevokeAccessToken(ServerAccessToken at) {\n-        accessTokenCache.remove(at.getTokenKey());\n+        if (isUseJwtFormatForAccessTokens() && isStoreJwtTokenKeyOnly()) {\n+            jwtAccessTokenCache.remove(at.getTokenKey());\n+        } else {\n+            accessTokenCache.remove(at.getTokenKey());\n+        }\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/cxf/raw/fbbcf945ad9d10b4fb16c8722de77b1f4c62db44/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/JCacheOAuthDataProvider.java",
                "sha": "0b006b5dabd87f4f77d62fd2bfd82124c42e90d5",
                "status": "modified"
            }
        ],
        "message": "CXF-7913 - NPE in OAuth 2.0 JCacheOAuthDataProvider with isStoreJwtTokenKeyOnly",
        "parent": "https://github.com/apache/cxf/commit/7eb08b4e9136bc0bd50a7d23cc392e5cd5501f0c",
        "patched_files": [
            "JCacheOAuthDataProvider.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "JCacheOAuthDataProviderTest.java"
        ]
    },
    "cxf_fd70825": {
        "bug_id": "cxf_fd70825",
        "commit": "https://github.com/apache/cxf/commit/fd70825a59214b8e78a8ef75d5b956d17fa11267",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/fd70825a59214b8e78a8ef75d5b956d17fa11267/rt/rs/extensions/providers/src/main/java/org/apache/cxf/jaxrs/provider/atom/AtomPojoProvider.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/extensions/providers/src/main/java/org/apache/cxf/jaxrs/provider/atom/AtomPojoProvider.java?ref=fd70825a59214b8e78a8ef75d5b956d17fa11267",
                "deletions": 2,
                "filename": "rt/rs/extensions/providers/src/main/java/org/apache/cxf/jaxrs/provider/atom/AtomPojoProvider.java",
                "patch": "@@ -286,7 +286,7 @@ private String getCollectionMethod(Map<String, String> map, Class<?> pojoClass)\n         return null;\n     }\n     \n-    private <T> T getAtomElementHandler(Map<String, T> handlers, Class<?> pojoClass) {\n+    protected <T> T getAtomElementHandler(Map<String, T> handlers, Class<?> pojoClass) {\n         T handler = getAtomElementHandlerSuperClass(handlers, pojoClass);\n         if (handler == null) {\n             Class<?>[] interfaces = pojoClass.getInterfaces();\n@@ -301,7 +301,7 @@ private String getCollectionMethod(Map<String, String> map, Class<?> pojoClass)\n     }\n     \n     private <T> T getAtomElementHandlerSuperClass(Map<String, T> handlers, Class<?> pojoClass) {\n-        if (pojoClass == Object.class) {\n+        if (pojoClass == null || pojoClass == Object.class) {\n             return null;\n         }\n         T handler = handlers.get(pojoClass.getName());",
                "raw_url": "https://github.com/apache/cxf/raw/fd70825a59214b8e78a8ef75d5b956d17fa11267/rt/rs/extensions/providers/src/main/java/org/apache/cxf/jaxrs/provider/atom/AtomPojoProvider.java",
                "sha": "1e9586fe34be168eb3e8edf7f1a9e1d63bf7e7b7",
                "status": "modified"
            }
        ],
        "message": "AtomPojoProvider will throw NPE if interface classes are used\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1422958 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/af72503cfd4f4d503168248524155c8b1b3c8a57",
        "patched_files": [
            "AtomPojoProvider.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "AtomPojoProviderTest.java"
        ]
    },
    "cxf_ff2a279": {
        "bug_id": "cxf_ff2a279",
        "commit": "https://github.com/apache/cxf/commit/ff2a2793ea253a1cd45ea30507cbfc87b879fcf8",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/ff2a2793ea253a1cd45ea30507cbfc87b879fcf8/core/src/main/java/org/apache/cxf/staxutils/transform/InTransformReader.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/staxutils/transform/InTransformReader.java?ref=ff2a2793ea253a1cd45ea30507cbfc87b879fcf8",
                "deletions": 1,
                "filename": "core/src/main/java/org/apache/cxf/staxutils/transform/InTransformReader.java",
                "patch": "@@ -139,7 +139,7 @@ public int next() throws XMLStreamException {\n             if (null != appendProp && !replaceContent) {\n                 // handle one of the four append modes\n                 handleAppendMode(expected, appendProp);\n-            } else if (replaceContent) {\n+            } else if (null != appendProp && replaceContent) {\n                 replaceText = appendProp.getText();\n                 if (doDebug) {\n                     LOG.fine(\"replacing content with \" + replaceText);",
                "raw_url": "https://github.com/apache/cxf/raw/ff2a2793ea253a1cd45ea30507cbfc87b879fcf8/core/src/main/java/org/apache/cxf/staxutils/transform/InTransformReader.java",
                "sha": "aee34fd0f39ebed557bcd0239c9bf02d7ed04b3f",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/ff2a2793ea253a1cd45ea30507cbfc87b879fcf8/core/src/main/java/org/apache/cxf/staxutils/transform/OutTransformWriter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/staxutils/transform/OutTransformWriter.java?ref=ff2a2793ea253a1cd45ea30507cbfc87b879fcf8",
                "deletions": 1,
                "filename": "core/src/main/java/org/apache/cxf/staxutils/transform/OutTransformWriter.java",
                "patch": "@@ -242,7 +242,7 @@ public void writeStartElement(String prefix, String local, String uri) throws XM\n                     super.writeEndElement();\n                 }\n             }\n-        } else if (replaceContent) {\n+        } else if (null != appendProp && replaceContent) {\n             //\n             replaceText = appendProp.getText();\n         } else if (dropped) {",
                "raw_url": "https://github.com/apache/cxf/raw/ff2a2793ea253a1cd45ea30507cbfc87b879fcf8/core/src/main/java/org/apache/cxf/staxutils/transform/OutTransformWriter.java",
                "sha": "ec7fa8ce671ce30b54bf0f6e6aa5bceabb58d105",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/ff2a2793ea253a1cd45ea30507cbfc87b879fcf8/core/src/main/java/org/apache/cxf/ws/addressing/VersionTransformer.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/ws/addressing/VersionTransformer.java?ref=ff2a2793ea253a1cd45ea30507cbfc87b879fcf8",
                "deletions": 2,
                "filename": "core/src/main/java/org/apache/cxf/ws/addressing/VersionTransformer.java",
                "patch": "@@ -184,7 +184,7 @@ public static AttributedURIType convert(org.apache.cxf.ws.addressing.v200403.Att\n             exposed.setServiceName(serviceName);\n         }\n         String portLocalName = EndpointReferenceUtils.getPortName(internal);\n-        if (portLocalName != null) {\n+        if (portLocalName != null && serviceQName != null) {\n             String namespace = serviceQName.getNamespaceURI() != null\n                                ? serviceQName.getNamespaceURI()\n                                : Names.WSDL_INSTANCE_NAMESPACE_NAME;\n@@ -221,7 +221,7 @@ public static AttributedURIType convert(org.apache.cxf.ws.addressing.v200403.Att\n             exposed.setServiceName(serviceName);\n         }\n         String portLocalName = EndpointReferenceUtils.getPortName(internal);\n-        if (portLocalName != null) {\n+        if (portLocalName != null && serviceQName != null) {\n             String namespace = serviceQName.getNamespaceURI() != null\n                 ? serviceQName.getNamespaceURI() : Names.WSDL_INSTANCE_NAMESPACE_NAME;\n             QName portQName = new QName(namespace, portLocalName);",
                "raw_url": "https://github.com/apache/cxf/raw/ff2a2793ea253a1cd45ea30507cbfc87b879fcf8/core/src/main/java/org/apache/cxf/ws/addressing/VersionTransformer.java",
                "sha": "1fdca0b8ee00e57459c350ead5038c397b9eafae",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/ff2a2793ea253a1cd45ea30507cbfc87b879fcf8/integration/jca/src/test/java/org/apache/cxf/jca/core/resourceadapter/UriHandlerInitTest.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/integration/jca/src/test/java/org/apache/cxf/jca/core/resourceadapter/UriHandlerInitTest.java?ref=ff2a2793ea253a1cd45ea30507cbfc87b879fcf8",
                "deletions": 8,
                "filename": "integration/jca/src/test/java/org/apache/cxf/jca/core/resourceadapter/UriHandlerInitTest.java",
                "patch": "@@ -46,15 +46,8 @@ public void testAppendToProp() {\n                              + newValue.length(), newValue.length(), len);\n \n             } finally {\n-                if (origVal != null) {\n-                    properties.put(PROP_NAME, origVal);\n-                }\n+                properties.put(PROP_NAME, origVal);\n             }\n         }\n     }\n-\n-\n-\n-\n-\n }",
                "raw_url": "https://github.com/apache/cxf/raw/ff2a2793ea253a1cd45ea30507cbfc87b879fcf8/integration/jca/src/test/java/org/apache/cxf/jca/core/resourceadapter/UriHandlerInitTest.java",
                "sha": "ab7b7ee05ef5526ef6eb62fbedde57cedaffa038",
                "status": "modified"
            }
        ],
        "message": "Add some NPE checks",
        "parent": "https://github.com/apache/cxf/commit/dd2ef496df36ef8967b5274c0a5928f5594469be",
        "patched_files": [
            "OutTransformWriter.java",
            "VersionTransformer.java",
            "UriHandlerInit.java",
            "InTransformReader.java"
        ],
        "repo": "cxf",
        "unit_tests": [
            "InTransformReaderTest.java",
            "OutTransformWriterTest.java",
            "UriHandlerInitTest.java"
        ]
    }
}