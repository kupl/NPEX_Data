{
    "manifoldcf-integration-solr-5.x_02d8046": {
        "bug_id": "manifoldcf-integration-solr-5.x_02d8046",
        "commit": "https://github.com/apache/manifoldcf-integration-solr-5.x/commit/02d8046042700a29c3aff2a6151227e45cf2cca6",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/02d8046042700a29c3aff2a6151227e45cf2cca6/solr/src/java/org/apache/solr/core/QuerySenderListener.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/solr/src/java/org/apache/solr/core/QuerySenderListener.java?ref=02d8046042700a29c3aff2a6151227e45cf2cca6",
                "deletions": 1,
                "filename": "solr/src/java/org/apache/solr/core/QuerySenderListener.java",
                "patch": "@@ -41,7 +41,9 @@ public QuerySenderListener(SolrCore core) {\n   public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n     final SolrIndexSearcher searcher = newSearcher;\n     log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n-    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n+    List<NamedList> allLists = (List<NamedList>)args.get(\"queries\");\n+    if (allLists == null) return;\n+    for (NamedList nlst : allLists) {\n       SolrQueryRequest req = null;\n \n       try {",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/02d8046042700a29c3aff2a6151227e45cf2cca6/solr/src/java/org/apache/solr/core/QuerySenderListener.java",
                "sha": "d363005df56bb92f57c6e9448409a8c4b6689eed",
                "status": "modified"
            },
            {
                "additions": 79,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/02d8046042700a29c3aff2a6151227e45cf2cca6/solr/src/test-files/solr/conf/solrconfig-querysender-noquery.xml",
                "changes": 79,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/solr/src/test-files/solr/conf/solrconfig-querysender-noquery.xml?ref=02d8046042700a29c3aff2a6151227e45cf2cca6",
                "deletions": 0,
                "filename": "solr/src/test-files/solr/conf/solrconfig-querysender-noquery.xml",
                "patch": "@@ -0,0 +1,79 @@\n+<?xml version=\"1.0\" ?>\n+\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one or more\n+ contributor license agreements.  See the NOTICE file distributed with\n+ this work for additional information regarding copyright ownership.\n+ The ASF licenses this file to You under the Apache License, Version 2.0\n+ (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+\n+     http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+-->\n+\n+<!-- $Id: solrconfig-querysender.xml 1048886 2010-12-14 01:10:52Z hossman $\n+     $Source$\n+     $Name$\n+  -->\n+\n+<config>\n+  <luceneMatchVersion>${tests.luceneMatchVersion:LUCENE_CURRENT}</luceneMatchVersion>\n+    <!--  The DirectoryFactory to use for indexes.\n+        solr.StandardDirectoryFactory, the default, is filesystem based.\n+        solr.RAMDirectoryFactory is memory based and not persistent. -->\n+  <directoryFactory name=\"DirectoryFactory\" class=\"${solr.directoryFactory:solr.RAMDirectoryFactory}\"/>\n+  \n+  <updateHandler class=\"solr.DirectUpdateHandler2\">\n+    <listener event=\"postCommit\" \n+              class=\"org.apache.solr.core.MockEventListener\" />\n+    <listener event=\"postOptimize\" \n+              class=\"org.apache.solr.core.MockEventListener\" />\n+  </updateHandler>\n+  \n+  <query>\n+  \n+  \n+    <!-- a newSearcher event is fired whenever a new searcher is being prepared\n+         and there is a current searcher handling requests (aka registered). -->\n+    <!-- QuerySenderListener takes an array of NamedList and executes a\n+         local query request for each NamedList in sequence. -->\n+    <listener event=\"newSearcher\" class=\"solr.QuerySenderListener\">\n+      <!--\n+      <arr name=\"queries\">\n+        <lst> <str name=\"q\">solr</str> <str name=\"start\">0</str> <str name=\"rows\">10</str> <str name=\"qt\">mock</str></lst>\n+        <lst> <str name=\"q\">rocks</str> <str name=\"start\">0</str> <str name=\"rows\">10</str> <str name=\"qt\">mock</str></lst>\n+      </arr>\n+      -->\n+    </listener>\n+    <listener event=\"newSearcher\"\n+              class=\"org.apache.solr.core.MockEventListener\" />\n+\n+\n+    <!-- a firstSearcher event is fired whenever a new searcher is being\n+         prepared but there is no current registered searcher to handle\n+         requests or to gain prewarming data from. -->\n+    <listener event=\"firstSearcher\" class=\"solr.QuerySenderListener\">\n+      <!--\n+      <arr name=\"queries\">\n+        <lst> <str name=\"q\">fast_warm</str> <str name=\"start\">0</str> <str name=\"rows\">10</str>\n+          <str name=\"qt\">mock</str>\n+        </lst>\n+      </arr>\n+      -->\n+    </listener>\n+    <listener event=\"firstSearcher\"\n+              class=\"org.apache.solr.core.MockEventListener\" />\n+\n+  \n+  </query>\n+  <requestHandler name=\"mock\" class=\"org.apache.solr.core.MockQuerySenderListenerReqHandler\" default=\"true\">\n+    <!-- default values for query parameters -->\n+\n+  </requestHandler>\n+</config>",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/02d8046042700a29c3aff2a6151227e45cf2cca6/solr/src/test-files/solr/conf/solrconfig-querysender-noquery.xml",
                "sha": "206350d360313a7309d441b82d000d5b388a8794",
                "status": "added"
            },
            {
                "additions": 90,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/02d8046042700a29c3aff2a6151227e45cf2cca6/solr/src/test/org/apache/solr/core/TestQuerySenderNoQuery.java",
                "changes": 90,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/solr/src/test/org/apache/solr/core/TestQuerySenderNoQuery.java?ref=02d8046042700a29c3aff2a6151227e45cf2cca6",
                "deletions": 0,
                "filename": "solr/src/test/org/apache/solr/core/TestQuerySenderNoQuery.java",
                "patch": "@@ -0,0 +1,90 @@\n+package org.apache.solr.core;\n+\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import org.apache.lucene.store.Directory;\n+import org.apache.solr.SolrTestCaseJ4;\n+import org.apache.solr.common.params.EventParams;\n+import org.apache.solr.search.SolrIndexSearcher;\n+import org.apache.solr.search.TestExtendedDismaxParser;\n+import org.apache.solr.util.RefCounted;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class TestQuerySenderNoQuery extends SolrTestCaseJ4 {\n+\n+  // number of instances configured in the solrconfig.xml\n+  private static final int EXPECTED_MOCK_LISTENER_INSTANCES = 4;\n+\n+  private static int preInitMockListenerCount = 0;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws Exception {\n+    // record current value prior to core initialization\n+    // so we can verify the correct number of instances later\n+    // NOTE: this won't work properly if concurrent tests run\n+    // in the same VM\n+    preInitMockListenerCount = MockEventListener.getCreateCount();\n+\n+    initCore(\"solrconfig-querysender-noquery.xml\",\"schema.xml\");\n+  }\n+\n+  public void testListenerCreationCounts() {\n+    SolrCore core = h.getCore();\n+\n+    assertEquals(\"Unexpected number of listeners created\",\n+                 EXPECTED_MOCK_LISTENER_INSTANCES,\n+                 MockEventListener.getCreateCount() - preInitMockListenerCount);\n+  }\n+\n+  @Test\n+  public void testRequestHandlerRegistry() {\n+    // property values defined in build.xml\n+    SolrCore core = h.getCore();\n+\n+    assertEquals( 2, core.firstSearcherListeners.size() );\n+    assertEquals( 2, core.newSearcherListeners.size() );\n+  }\n+\n+  // Determine that when the query lists are commented out of both new and\n+  // first searchers in the config, we don't throw an NPE\n+  @Test\n+  public void testSearcherEvents() throws Exception {\n+    SolrCore core = h.getCore();\n+    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n+    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n+    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n+\n+    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n+    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n+    SolrIndexSearcher dummy = null;\n+    qsl.newSearcher(currentSearcher, dummy);//test first Searcher (since param is null)\n+    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n+    assertNotNull(\"Mock is null\", mock);\n+    assertNull(\"Req (firstsearcher) is not null\", mock.req);\n+\n+    Directory dir = currentSearcher.getIndexReader().directory();\n+    SolrIndexSearcher newSearcher = new SolrIndexSearcher(core, core.getSchema(), \"testQuerySenderNoQuery\", dir, true, false);\n+\n+    qsl.newSearcher(newSearcher, currentSearcher); // get newSearcher.\n+    assertNull(\"Req (newsearcher) is not null\", mock.req);\n+    newSearcher.close();\n+    currentSearcherRef.decref();\n+  }\n+\n+}",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/02d8046042700a29c3aff2a6151227e45cf2cca6/solr/src/test/org/apache/solr/core/TestQuerySenderNoQuery.java",
                "sha": "b23e4bdde5f3185a952de8cc7d917a5a2e7868ed",
                "status": "added"
            }
        ],
        "message": "Solr-2598 (Commenting out the <arr name=\"queries\"> section in firstSearcher generates an NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1137092 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/manifoldcf-integration-solr-5.x/commit/f844694f5b78f67b85544d76720e151f1eef288f",
        "patched_files": [
            "QuerySenderListener.java",
            "solrconfig-querysender-noquery.java"
        ],
        "repo": "manifoldcf-integration-solr-5.x",
        "unit_tests": [
            "TestQuerySenderNoQuery.java"
        ]
    },
    "manifoldcf-integration-solr-5.x_3d77673": {
        "bug_id": "manifoldcf-integration-solr-5.x_3d77673",
        "commit": "https://github.com/apache/manifoldcf-integration-solr-5.x/commit/3d77673fd2e6d6b0a2bba32f89a390d927d41d3f",
        "file": [
            {
                "additions": 48,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/3d77673fd2e6d6b0a2bba32f89a390d927d41d3f/solr/contrib/dataimporthandler-extras/src/test/org/apache/solr/handler/dataimport/TestTikaEntityProcessor.java",
                "changes": 66,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/solr/contrib/dataimporthandler-extras/src/test/org/apache/solr/handler/dataimport/TestTikaEntityProcessor.java?ref=3d77673fd2e6d6b0a2bba32f89a390d927d41d3f",
                "deletions": 18,
                "filename": "solr/contrib/dataimporthandler-extras/src/test/org/apache/solr/handler/dataimport/TestTikaEntityProcessor.java",
                "patch": "@@ -18,36 +18,66 @@\n \n import org.junit.BeforeClass;\n import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.InputSource;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n \n /**Testcase for TikaEntityProcessor\n  *\n- * @since solr 1.5 \n+ * @since solr 3.1\n  */\n public class TestTikaEntityProcessor extends AbstractDataImportHandlerTestCase {\n+  private String conf =\n+  \"<dataConfig>\" +\n+  \"  <dataSource type=\\\"BinFileDataSource\\\"/>\" +\n+  \"  <document>\" +\n+  \"    <entity processor=\\\"TikaEntityProcessor\\\" url=\\\"\" + getFile(\"solr-word.pdf\").getAbsolutePath() + \"\\\" >\" +\n+  \"      <field column=\\\"Author\\\" meta=\\\"true\\\" name=\\\"author\\\"/>\" +\n+  \"      <field column=\\\"title\\\" meta=\\\"true\\\" name=\\\"title\\\"/>\" +\n+  \"      <field column=\\\"text\\\"/>\" +\n+  \"     </entity>\" +\n+  \"  </document>\" +\n+  \"</dataConfig>\";\n+\n+  private String[] tests = {\n+      \"//*[@numFound='1']\"\n+      ,\"//str[@name='author'][.='Grant Ingersoll']\"\n+      ,\"//str[@name='title'][.='solr-word']\"\n+      ,\"//str[@name='text']\"\n+  };\n+\n+\n   @BeforeClass\n   public static void beforeClass() throws Exception {\n     initCore(\"dataimport-solrconfig.xml\", \"dataimport-schema-no-unique-key.xml\", getFile(\"solr-dihextras\").getAbsolutePath());\n   }\n \n   @Test\n   public void testIndexingWithTikaEntityProcessor() throws Exception {\n-    String conf =\n-            \"<dataConfig>\" +\n-                    \"  <dataSource type=\\\"BinFileDataSource\\\"/>\" +\n-                    \"  <document>\" +\n-                    \"    <entity processor=\\\"TikaEntityProcessor\\\" url=\\\"\" + getFile(\"solr-word.pdf\").getAbsolutePath() + \"\\\" >\" +\n-                    \"      <field column=\\\"Author\\\" meta=\\\"true\\\" name=\\\"author\\\"/>\" +\n-                    \"      <field column=\\\"title\\\" meta=\\\"true\\\" name=\\\"title\\\"/>\" +\n-                    \"      <field column=\\\"text\\\"/>\" +\n-                    \"     </entity>\" +\n-                    \"  </document>\" +\n-                    \"</dataConfig>\";\n     runFullImport(conf);\n-    assertQ(req(\"*:*\")\n-            ,\"//*[@numFound='1']\"\n-            ,\"//str[@name='author'][.='Grant Ingersoll']\"\n-            ,\"//str[@name='title'][.='solr-word']\"\n-            ,\"//str[@name='text']\"\n-            );\n+    assertQ(req(\"*:*\"), tests );\n   }\n+\n+  @Test\n+  public void testIndexingWithTikaEntityProcessorThreaded() throws Exception {\n+    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+    Document doc = builder.parse(new InputSource(new StringReader(conf)));\n+    ((Element) doc.getElementsByTagName(\"entity\").item(0)).setAttribute(\"threads\", \"1\");\n+    Transformer trans = TransformerFactory.newInstance().newTransformer();\n+    StringWriter writer = new StringWriter();\n+    trans.transform(new DOMSource(doc), new StreamResult(writer));\n+\n+    runFullImport(writer.toString());\n+    assertQ(req(\"*:*\"), tests );\n+  }\n+\n }",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/3d77673fd2e6d6b0a2bba32f89a390d927d41d3f/solr/contrib/dataimporthandler-extras/src/test/org/apache/solr/handler/dataimport/TestTikaEntityProcessor.java",
                "sha": "7912c5f92d844d6bd060ce05ec0882a03255c38f",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/3d77673fd2e6d6b0a2bba32f89a390d927d41d3f/solr/contrib/dataimporthandler/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/solr/contrib/dataimporthandler/CHANGES.txt?ref=3d77673fd2e6d6b0a2bba32f89a390d927d41d3f",
                "deletions": 0,
                "filename": "solr/contrib/dataimporthandler/CHANGES.txt",
                "patch": "@@ -18,6 +18,7 @@ Bug Fixes\n ----------------------\n * SOLR-2644: When using threads=2 the default logging is set too high (Bill Bell via shalin)\n * SOLR-2492: DIH does not commit if only deletes are processed (James Dyer via shalin)\n+* SOLR-2186: DataImportHandler's multi-threaded option throws NPE (Lance Norskog, Frank Wesemann, shalin)\n \n ==================  3.3.0 ==================\n ",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/3d77673fd2e6d6b0a2bba32f89a390d927d41d3f/solr/contrib/dataimporthandler/CHANGES.txt",
                "sha": "150a15c7e56b9a1036cbb7e6e5479cc1538eea5b",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/3d77673fd2e6d6b0a2bba32f89a390d927d41d3f/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ContextImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ContextImpl.java?ref=3d77673fd2e6d6b0a2bba32f89a390d927d41d3f",
                "deletions": 1,
                "filename": "solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ContextImpl.java",
                "patch": "@@ -33,7 +33,7 @@\n  * @since solr 1.3\n  */\n public class ContextImpl extends Context {\n-  private DataConfig.Entity entity;\n+  protected DataConfig.Entity entity;\n \n   private ContextImpl parent;\n ",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/3d77673fd2e6d6b0a2bba32f89a390d927d41d3f/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ContextImpl.java",
                "sha": "1b32005ff6902d4840eb64b634e05c17d80bc704",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/3d77673fd2e6d6b0a2bba32f89a390d927d41d3f/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ThreadedContext.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ThreadedContext.java?ref=3d77673fd2e6d6b0a2bba32f89a390d927d41d3f",
                "deletions": 2,
                "filename": "solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ThreadedContext.java",
                "patch": "@@ -28,7 +28,7 @@\n \n   public ThreadedContext(DocBuilder.EntityRunner entityRunner, DocBuilder docBuilder) {\n     super(entityRunner.entity,\n-            null,//to be fethed realtime\n+            null,//to be fetched realtime\n             null,\n             null,\n             docBuilder.session,\n@@ -75,7 +75,7 @@ private void checkLimited() {\n   @Override\n   public String getResolvedEntityAttribute(String name) {\n     checkLimited();\n-    return super.getResolvedEntityAttribute(name);\n+    return entity == null ? null : getVariableResolver().replaceTokens(entity.allAttributes.get(name));\n   }\n \n   @Override",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/3d77673fd2e6d6b0a2bba32f89a390d927d41d3f/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ThreadedContext.java",
                "sha": "0386e76f1a67685ee6a02f4f4bd3c26eb175a349",
                "status": "modified"
            }
        ],
        "message": "SOLR-2186 -- DataImportHandler's multi-threaded option throws NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1147023 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/manifoldcf-integration-solr-5.x/commit/a4fb2868cc9faa058ad1ceb8d7a7da4479e736b1",
        "patched_files": [
            "CHANGES.java",
            "ThreadedContext.java",
            "ContextImpl.java"
        ],
        "repo": "manifoldcf-integration-solr-5.x",
        "unit_tests": [
            "TestTikaEntityProcessor.java"
        ]
    },
    "manifoldcf-integration-solr-5.x_48fe173": {
        "bug_id": "manifoldcf-integration-solr-5.x_48fe173",
        "commit": "https://github.com/apache/manifoldcf-integration-solr-5.x/commit/48fe173ff5a7480b361e0f674c8202103d35b497",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/48fe173ff5a7480b361e0f674c8202103d35b497/lucene/CHANGES.txt",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/lucene/CHANGES.txt?ref=48fe173ff5a7480b361e0f674c8202103d35b497",
                "deletions": 0,
                "filename": "lucene/CHANGES.txt",
                "patch": "@@ -474,6 +474,9 @@ New features\n   to wrap any other Analyzer and provide the same functionality as\n   MaxFieldLength provided on IndexWriter.  This patch also fixes a bug\n   in the offset calculation in CharTokenizer. (Uwe Schindler, Shai Erera)\n+\n+* LUCENE-2526: Don't throw NPE from MultiPhraseQuery.toString when\n+  it's empty.  (Ross Woolf via Mike McCandless)\n   \n Optimizations\n ",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/48fe173ff5a7480b361e0f674c8202103d35b497/lucene/CHANGES.txt",
                "sha": "4279fffb43acfa1eae5cbb7738938c053b715daf",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/48fe173ff5a7480b361e0f674c8202103d35b497/lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.java?ref=48fe173ff5a7480b361e0f674c8202103d35b497",
                "deletions": 1,
                "filename": "lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.java",
                "patch": "@@ -336,7 +336,7 @@ public Weight createWeight(Searcher searcher) throws IOException {\n   @Override\n   public final String toString(String f) {\n     StringBuilder buffer = new StringBuilder();\n-    if (!field.equals(f)) {\n+    if (field == null || !field.equals(f)) {\n       buffer.append(field);\n       buffer.append(\":\");\n     }",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/48fe173ff5a7480b361e0f674c8202103d35b497/lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.java",
                "sha": "330089c805299b4312fb0bc1f0a680f03456bd9a",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/48fe173ff5a7480b361e0f674c8202103d35b497/lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery.java?ref=48fe173ff5a7480b361e0f674c8202103d35b497",
                "deletions": 0,
                "filename": "lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery.java",
                "patch": "@@ -263,4 +263,9 @@ private void add(String s, String type, IndexWriter writer) throws IOException {\n     writer.addDocument(doc);\n   }\n \n+  // LUCENE-2526\n+  public void testEmptyToString() {\n+    new MultiPhraseQuery().toString();\n+  }\n+\n }",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/48fe173ff5a7480b361e0f674c8202103d35b497/lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery.java",
                "sha": "c10d4fee86b921b049d18720b188070273b397d2",
                "status": "modified"
            }
        ],
        "message": "LUCENE-2526: don't throw NPE from MultiPhraseQuery.toString if it has no terms\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@960367 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/manifoldcf-integration-solr-5.x/commit/fd40ad7b7c037ce558f6dda0e3b640530696be95",
        "patched_files": [
            "CHANGES.java",
            "MultiPhraseQuery.java"
        ],
        "repo": "manifoldcf-integration-solr-5.x",
        "unit_tests": [
            "TestMultiPhraseQuery.java"
        ]
    },
    "manifoldcf-integration-solr-5.x_5c4438a": {
        "bug_id": "manifoldcf-integration-solr-5.x_5c4438a",
        "commit": "https://github.com/apache/manifoldcf-integration-solr-5.x/commit/5c4438a67b6d4e0c5bb85e727d1d3fe2b961253a",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/5c4438a67b6d4e0c5bb85e727d1d3fe2b961253a/solr/CHANGES.txt",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/solr/CHANGES.txt?ref=5c4438a67b6d4e0c5bb85e727d1d3fe2b961253a",
                "deletions": 0,
                "filename": "solr/CHANGES.txt",
                "patch": "@@ -342,6 +342,8 @@ Bug Fixes\n   could commit too frequently and could block adds until a new seaercher was\n   registered. (yonik)\n \n+* SOLR-2726: Fixed NullPointerException when using spellcheck.q with Suggester.\n+  (Bernd Fehling, valentin via rmuir)\n \n  Other Changes\n ----------------------",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/5c4438a67b6d4e0c5bb85e727d1d3fe2b961253a/solr/CHANGES.txt",
                "sha": "4358217495aeea2529a4adf11980ed1428080f65",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/5c4438a67b6d4e0c5bb85e727d1d3fe2b961253a/solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker.java?ref=5c4438a67b6d4e0c5bb85e727d1d3fe2b961253a",
                "deletions": 16,
                "filename": "solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker.java",
                "patch": "@@ -68,14 +68,11 @@\n   public static final String INDEX_DIR = \"spellcheckIndexDir\";\n   public static final String ACCURACY = \"accuracy\";\n   public static final String STRING_DISTANCE = \"distanceMeasure\";\n-  public static final String FIELD_TYPE = \"fieldType\";\n   public static final String COMPARATOR_CLASS = \"comparatorClass\";\n \n   public static final String SCORE_COMP = \"score\";\n   public static final String FREQ_COMP = \"freq\";\n \n-  protected String field;\n-  protected String fieldTypeName;\n   protected org.apache.lucene.search.spell.SpellChecker spellChecker;\n \n   protected String sourceLocation;\n@@ -117,7 +114,6 @@ public String init(NamedList config, SolrCore core) {\n     } else {\n       comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n     }\n-    field = (String) config.get(FIELD);\n     String strDistanceName = (String)config.get(STRING_DISTANCE);\n     if (strDistanceName != null) {\n       sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n@@ -140,18 +136,6 @@ public String init(NamedList config, SolrCore core) {\n                 \"Unparseable accuracy given for dictionary: \" + name, e);\n       }\n     }\n-    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n-      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n-    }\n-    fieldTypeName = (String) config.get(FIELD_TYPE);\n-    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n-      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n-      analyzer = fieldType.getQueryAnalyzer();\n-    }\n-    if (analyzer == null)   {\n-      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n-      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n-    }\n     return name;\n   }\n   ",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/5c4438a67b6d4e0c5bb85e727d1d3fe2b961253a/solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker.java",
                "sha": "efd42b6ab25cf56f307eb27c3cbae79b9bb6a7d1",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/5c4438a67b6d4e0c5bb85e727d1d3fe2b961253a/solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker.java?ref=5c4438a67b6d4e0c5bb85e727d1d3fe2b961253a",
                "deletions": 19,
                "filename": "solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker.java",
                "patch": "@@ -67,8 +67,6 @@\n   public static final String COMPARATOR_CLASS = AbstractLuceneSpellChecker.COMPARATOR_CLASS;\n   public static final String SCORE_COMP = AbstractLuceneSpellChecker.SCORE_COMP;\n   public static final String FREQ_COMP = AbstractLuceneSpellChecker.FREQ_COMP;\n-  public static final String FIELD = AbstractLuceneSpellChecker.FIELD;\n-  public static final String FIELD_TYPE = AbstractLuceneSpellChecker.FIELD_TYPE;\n   public static final String STRING_DISTANCE = AbstractLuceneSpellChecker.STRING_DISTANCE;\n   public static final String ACCURACY = AbstractLuceneSpellChecker.ACCURACY;\n   public static final String THRESHOLD_TOKEN_FREQUENCY = IndexBasedSpellChecker.THRESHOLD_TOKEN_FREQUENCY;\n@@ -94,8 +92,6 @@\n   public static final float DEFAULT_MAXQUERYFREQUENCY = 0.01f;\n   \n   private DirectSpellChecker checker = new DirectSpellChecker();\n-  private String field;\n-  private String fieldTypeName;\n   \n   @Override\n   public String init(NamedList config, SolrCore core) {\n@@ -118,21 +114,6 @@ else if (compClass.equalsIgnoreCase(FREQ_COMP))\n     if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n       sd = (StringDistance) core.getResourceLoader().newInstance(distClass);\n \n-    field = (String) config.get(FIELD);\n-    // setup analyzer for field\n-    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n-      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n-    }\n-    fieldTypeName = (String) config.get(FIELD_TYPE);\n-    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n-      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n-      analyzer = fieldType.getQueryAnalyzer();\n-    }\n-    if (analyzer == null)   {\n-      LOG.info(\"Using WhitespaceAnalyzer for dictionary: \" + name);\n-      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n-    }\n-    \n     float minAccuracy = DEFAULT_ACCURACY;\n     Float accuracy = (Float) config.get(ACCURACY);\n     if (accuracy != null)",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/5c4438a67b6d4e0c5bb85e727d1d3fe2b961253a/solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker.java",
                "sha": "b047522647d30592bd43e845c57e9327710d0d22",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/5c4438a67b6d4e0c5bb85e727d1d3fe2b961253a/solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker.java?ref=5c4438a67b6d4e0c5bb85e727d1d3fe2b961253a",
                "deletions": 0,
                "filename": "solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker.java",
                "patch": "@@ -17,8 +17,10 @@\n  */\n \n import org.apache.lucene.analysis.Analyzer;\n+import org.apache.lucene.analysis.core.WhitespaceAnalyzer;\n import org.apache.solr.common.util.NamedList;\n import org.apache.solr.core.SolrCore;\n+import org.apache.solr.schema.FieldType;\n import org.apache.solr.search.SolrIndexSearcher;\n \n import java.io.IOException;\n@@ -35,15 +37,31 @@\n public abstract class SolrSpellChecker {\n   public static final String DICTIONARY_NAME = \"name\";\n   public static final String DEFAULT_DICTIONARY_NAME = \"default\";\n+  public static final String FIELD = \"field\";\n+  public static final String FIELD_TYPE = \"fieldType\";\n   /** Dictionary name */\n   protected String name;\n   protected Analyzer analyzer;\n+  protected String field;\n+  protected String fieldTypeName;\n \n   public String init(NamedList config, SolrCore core) {\n     name = (String) config.get(DICTIONARY_NAME);\n     if (name == null) {\n       name = DEFAULT_DICTIONARY_NAME;\n     }\n+    field = (String)config.get(FIELD);\n+    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n+      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n+    }\n+    fieldTypeName = (String) config.get(FIELD_TYPE);\n+    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n+      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n+      analyzer = fieldType.getQueryAnalyzer();\n+    }\n+    if (analyzer == null)   {\n+      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n+    }\n     return name;\n   }\n   ",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/5c4438a67b6d4e0c5bb85e727d1d3fe2b961253a/solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker.java",
                "sha": "a115303d0e5683d6166f80bf7501f878abb32236",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/5c4438a67b6d4e0c5bb85e727d1d3fe2b961253a/solr/core/src/java/org/apache/solr/spelling/suggest/Suggester.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/solr/core/src/java/org/apache/solr/spelling/suggest/Suggester.java?ref=5c4438a67b6d4e0c5bb85e727d1d3fe2b961253a",
                "deletions": 4,
                "filename": "solr/core/src/java/org/apache/solr/spelling/suggest/Suggester.java",
                "patch": "@@ -51,8 +51,6 @@\n    * current IndexReader.\n    */\n   public static final String LOCATION = \"sourceLocation\";\n-  /** Field to use as the source of terms if using IndexReader. */\n-  public static final String FIELD = \"field\";\n   /** Fully-qualified class of the {@link Lookup} implementation. */\n   public static final String LOOKUP_IMPL = \"lookupImpl\";\n   /**\n@@ -68,7 +66,6 @@\n   \n   protected String sourceLocation;\n   protected File storeDir;\n-  protected String field;\n   protected float threshold;\n   protected Dictionary dictionary;\n   protected IndexReader reader;\n@@ -83,7 +80,6 @@ public String init(NamedList config, SolrCore core) {\n     threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n             : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n     sourceLocation = (String) config.get(LOCATION);\n-    field = (String)config.get(FIELD);\n     lookupImpl = (String)config.get(LOOKUP_IMPL);\n \n     // support the old classnames without -Factory for config file backwards compatibility.",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/5c4438a67b6d4e0c5bb85e727d1d3fe2b961253a/solr/core/src/java/org/apache/solr/spelling/suggest/Suggester.java",
                "sha": "c19b8d3cae9386fe8657df4f7d402513fa79ccfe",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/5c4438a67b6d4e0c5bb85e727d1d3fe2b961253a/solr/core/src/test/org/apache/solr/spelling/suggest/SuggesterTest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/solr/core/src/test/org/apache/solr/spelling/suggest/SuggesterTest.java?ref=5c4438a67b6d4e0c5bb85e727d1d3fe2b961253a",
                "deletions": 0,
                "filename": "solr/core/src/test/org/apache/solr/spelling/suggest/SuggesterTest.java",
                "patch": "@@ -21,6 +21,7 @@\n \n import org.apache.solr.SolrTestCaseJ4;\n import org.apache.solr.common.params.SpellingParams;\n+import org.apache.solr.common.util.NamedList;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n@@ -95,4 +96,13 @@ public void testRebuild() throws Exception {\n     assertQ(req(\"qt\", requestUri, \"q\", \"ac\", SpellingParams.SPELLCHECK_COUNT, \"2\", SpellingParams.SPELLCHECK_ONLY_MORE_POPULAR, \"true\"),\n       \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='ac']/int[@name='numFound'][.='2']\");\n   }\n+  \n+  // SOLR-2726\n+  public void testAnalyzer() throws Exception {\n+    Suggester suggester = new Suggester();\n+    NamedList params = new NamedList();\n+    params.add(\"lookupImpl\", \"org.apache.solr.spelling.suggest.tst.TSTLookupFactory\");\n+    suggester.init(params, h.getCore());\n+    assertTrue(suggester.getQueryAnalyzer() != null);\n+  }\n }",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/5c4438a67b6d4e0c5bb85e727d1d3fe2b961253a/solr/core/src/test/org/apache/solr/spelling/suggest/SuggesterTest.java",
                "sha": "600c598a745e87b73b6543a4bc86c671a64173d3",
                "status": "modified"
            }
        ],
        "message": "SOLR-2726: Fixed NullPointerException when using spellcheck.q with Suggester\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1171597 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/manifoldcf-integration-solr-5.x/commit/1a45ef00a9dcb4e7e2b7da6cbd492273562758e0",
        "patched_files": [
            "CHANGES.java",
            "SolrSpellChecker.java",
            "AbstractLuceneSpellChecker.java",
            "DirectSolrSpellChecker.java",
            "Suggester.java"
        ],
        "repo": "manifoldcf-integration-solr-5.x",
        "unit_tests": [
            "SuggesterTest.java"
        ]
    },
    "manifoldcf-integration-solr-5.x_5eacef9": {
        "bug_id": "manifoldcf-integration-solr-5.x_5eacef9",
        "commit": "https://github.com/apache/manifoldcf-integration-solr-5.x/commit/5eacef9247b54596f6bc2bd13b0abf928f391af5",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/5eacef9247b54596f6bc2bd13b0abf928f391af5/lucene/contrib/CHANGES.txt",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/lucene/contrib/CHANGES.txt?ref=5eacef9247b54596f6bc2bd13b0abf928f391af5",
                "deletions": 1,
                "filename": "lucene/contrib/CHANGES.txt",
                "patch": "@@ -45,7 +45,10 @@ API Changes\n \n ======================= Lucene 3.x (not yet released) =======================\n \n-(No changes)\n+Bug fixes\n+\n+ * LUCENE-3026: SmartChineseAnalyzer's WordTokenFilter threw NullPointerException\n+   on sentences longer than 32,767 characters.  (wangzhenghang via Robert Muir)\n \n ======================= Lucene 3.1.0 =======================\n ",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/5eacef9247b54596f6bc2bd13b0abf928f391af5/lucene/contrib/CHANGES.txt",
                "sha": "ee5eddd829fdae7c3ca34d0bf1f8a369e446dca0",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/5eacef9247b54596f6bc2bd13b0abf928f391af5/modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph.java?ref=5eacef9247b54596f6bc2bd13b0abf928f391af5",
                "deletions": 1,
                "filename": "modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph.java",
                "patch": "@@ -75,7 +75,7 @@ public int getMaxStart() {\n     List<SegToken> result = new ArrayList<SegToken>();\n     int s = -1, count = 0, size = tokenListTable.size();\n     List<SegToken> tokenList;\n-    short index = 0;\n+    int index = 0;\n     while (count < size) {\n       if (isStartExist(s)) {\n         tokenList = tokenListTable.get(s);",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/5eacef9247b54596f6bc2bd13b0abf928f391af5/modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph.java",
                "sha": "f7b40d54c5ba2074615edfa1b553b517a960637d",
                "status": "modified"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/5eacef9247b54596f6bc2bd13b0abf928f391af5/modules/analysis/smartcn/src/test/org/apache/lucene/analysis/cn/smart/TestSmartChineseAnalyzer.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/modules/analysis/smartcn/src/test/org/apache/lucene/analysis/cn/smart/TestSmartChineseAnalyzer.java?ref=5eacef9247b54596f6bc2bd13b0abf928f391af5",
                "deletions": 0,
                "filename": "modules/analysis/smartcn/src/test/org/apache/lucene/analysis/cn/smart/TestSmartChineseAnalyzer.java",
                "patch": "@@ -17,8 +17,11 @@\n \n package org.apache.lucene.analysis.cn.smart;\n \n+import java.io.StringReader;\n+\n import org.apache.lucene.analysis.BaseTokenStreamTestCase;\n import org.apache.lucene.analysis.Analyzer;\n+import org.apache.lucene.analysis.TokenStream;\n import org.apache.lucene.util.Version;\n \n public class TestSmartChineseAnalyzer extends BaseTokenStreamTestCase {\n@@ -166,4 +169,30 @@ public void testReusableTokenStream() throws Exception {\n         new int[] { 0, 1, 3, 4, 6, 7 },\n         new int[] { 1, 3, 4, 6, 7, 9 });\n   }\n+  \n+  // LUCENE-3026\n+  public void testLargeDocument() throws Exception {\n+    StringBuilder sb = new StringBuilder();\n+    for (int i = 0; i < 5000; i++) {\n+      sb.append(\"\u6211\u8d2d\u4e70\u4e86\u9053\u5177\u548c\u670d\u88c5\u3002\");\n+    }\n+    Analyzer analyzer = new SmartChineseAnalyzer(TEST_VERSION_CURRENT);\n+    TokenStream stream = analyzer.reusableTokenStream(\"\", new StringReader(sb.toString()));\n+    stream.reset();\n+    while (stream.incrementToken()) {\n+    }\n+  }\n+  \n+  // LUCENE-3026\n+  public void testLargeSentence() throws Exception {\n+    StringBuilder sb = new StringBuilder();\n+    for (int i = 0; i < 5000; i++) {\n+      sb.append(\"\u6211\u8d2d\u4e70\u4e86\u9053\u5177\u548c\u670d\u88c5\");\n+    }\n+    Analyzer analyzer = new SmartChineseAnalyzer(TEST_VERSION_CURRENT);\n+    TokenStream stream = analyzer.reusableTokenStream(\"\", new StringReader(sb.toString()));\n+    stream.reset();\n+    while (stream.incrementToken()) {\n+    }\n+  }\n }",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/5eacef9247b54596f6bc2bd13b0abf928f391af5/modules/analysis/smartcn/src/test/org/apache/lucene/analysis/cn/smart/TestSmartChineseAnalyzer.java",
                "sha": "6c61d45d27b2d38bd18ff3fcae010e86b993489b",
                "status": "modified"
            }
        ],
        "message": "LUCENE-3026: SmartChineseAnalyzer's WordTokenFilter threw NullPointerException on sentences longer than 32,767 characters\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1092328 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/manifoldcf-integration-solr-5.x/commit/aaa3dc45f7ef0d5d44fd1ce2c70dfca248866d16",
        "patched_files": [
            "CHANGES.java",
            "SegGraph.java"
        ],
        "repo": "manifoldcf-integration-solr-5.x",
        "unit_tests": [
            "TestSmartChineseAnalyzer.java"
        ]
    },
    "manifoldcf-integration-solr-5.x_82315e8": {
        "bug_id": "manifoldcf-integration-solr-5.x_82315e8",
        "commit": "https://github.com/apache/manifoldcf-integration-solr-5.x/commit/82315e8b1b36076948769fd01611aa977b303d05",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/82315e8b1b36076948769fd01611aa977b303d05/modules/suggest/src/java/org/apache/lucene/search/spell/DirectSpellChecker.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/modules/suggest/src/java/org/apache/lucene/search/spell/DirectSpellChecker.java?ref=82315e8b1b36076948769fd01611aa977b303d05",
                "deletions": 1,
                "filename": "modules/suggest/src/java/org/apache/lucene/search/spell/DirectSpellChecker.java",
                "patch": "@@ -28,6 +28,7 @@\n import org.apache.lucene.index.IndexReader;\n import org.apache.lucene.index.MultiFields;\n import org.apache.lucene.index.Term;\n+import org.apache.lucene.index.Terms;\n import org.apache.lucene.search.FuzzyTermsEnum;\n import org.apache.lucene.search.BoostAttribute;\n import org.apache.lucene.search.MaxNonCompetitiveBoostAttribute;\n@@ -395,7 +396,11 @@ public void setDistance(StringDistance distance) {\n     AttributeSource atts = new AttributeSource();\n     MaxNonCompetitiveBoostAttribute maxBoostAtt =\n       atts.addAttribute(MaxNonCompetitiveBoostAttribute.class);\n-    FuzzyTermsEnum e = new FuzzyTermsEnum(MultiFields.getTerms(ir, term.field()).iterator(), atts, term, editDistance, Math.max(minPrefix, editDistance-1));\n+    Terms terms = MultiFields.getTerms(ir, term.field());\n+    if (terms == null) {\n+      return Collections.emptyList();\n+    }\n+    FuzzyTermsEnum e = new FuzzyTermsEnum(terms.iterator(), atts, term, editDistance, Math.max(minPrefix, editDistance-1));\n     final PriorityQueue<ScoreTerm> stQueue = new PriorityQueue<ScoreTerm>();\n     \n     BytesRef queryTerm = new BytesRef(term.text());",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/82315e8b1b36076948769fd01611aa977b303d05/modules/suggest/src/java/org/apache/lucene/search/spell/DirectSpellChecker.java",
                "sha": "36804eed92a63cfbe97e6f9b0b9ee32f7aa43905",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/82315e8b1b36076948769fd01611aa977b303d05/modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker.java?ref=82315e8b1b36076948769fd01611aa977b303d05",
                "deletions": 0,
                "filename": "modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker.java",
                "patch": "@@ -141,4 +141,25 @@ public void testOptions() throws Exception {\n     writer.close();\n     dir.close();\n   }\n+  \n+  public void testBogusField() throws Exception {\n+    DirectSpellChecker spellChecker = new DirectSpellChecker();\n+    Directory dir = newDirectory();\n+    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n+        new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n+\n+    for (int i = 0; i < 20; i++) {\n+      Document doc = new Document();\n+      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n+      writer.addDocument(doc);\n+    }\n+\n+    IndexReader ir = writer.getReader();\n+\n+    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"bogusFieldBogusField\", \"fvie\"), 2, ir, false);\n+    assertEquals(0, similar.length);\n+    ir.close();\n+    writer.close();\n+    dir.close();\n+  }\n }",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/82315e8b1b36076948769fd01611aa977b303d05/modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker.java",
                "sha": "6685af41ba302b6844e8e3c422b71cd0f062ef49",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/82315e8b1b36076948769fd01611aa977b303d05/modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker.java?ref=82315e8b1b36076948769fd01611aa977b303d05",
                "deletions": 0,
                "filename": "modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker.java",
                "patch": "@@ -136,6 +136,20 @@ public void testComparator() throws Exception {\n       compareSP.close();\n     compIdx.close();\n   }\n+  \n+  public void testBogusField() throws Exception {\n+    IndexReader r = IndexReader.open(userindex, true);\n+    Directory compIdx = newDirectory();\n+    SpellChecker compareSP = new SpellCheckerMock(compIdx, new LevensteinDistance(), new SuggestWordFrequencyComparator());\n+    addwords(r, compareSP, \"field3\");\n+\n+    String[] similar = compareSP.suggestSimilar(\"fvie\", 2, r, \"bogusFieldBogusField\", false);\n+    assertEquals(0, similar.length);\n+    r.close();\n+    if (!compareSP.isClosed())\n+      compareSP.close();\n+    compIdx.close();\n+  }\n \n   private void checkCommonSuggestions(IndexReader r) throws IOException {\n     String[] similar = spellChecker.suggestSimilar(\"fvie\", 2);",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/82315e8b1b36076948769fd01611aa977b303d05/modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker.java",
                "sha": "8da6cd4466aaf2b58639364af995c59a1f21bae9",
                "status": "modified"
            }
        ],
        "message": "LUCENE-3351: DirectSpellChecker throws NPE if field doesn't exist\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1152669 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/manifoldcf-integration-solr-5.x/commit/6340317e89b2e8f41b63f40f9dc257996a2837fa",
        "patched_files": [
            "DirectSpellChecker.java"
        ],
        "repo": "manifoldcf-integration-solr-5.x",
        "unit_tests": [
            "TestDirectSpellChecker.java",
            "TestSpellChecker.java"
        ]
    },
    "manifoldcf-integration-solr-5.x_9181c06": {
        "bug_id": "manifoldcf-integration-solr-5.x_9181c06",
        "commit": "https://github.com/apache/manifoldcf-integration-solr-5.x/commit/9181c066588a174c13a29476e6c6e95a1801c83e",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/9181c066588a174c13a29476e6c6e95a1801c83e/lucene/CHANGES.txt",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/lucene/CHANGES.txt?ref=9181c066588a174c13a29476e6c6e95a1801c83e",
                "deletions": 0,
                "filename": "lucene/CHANGES.txt",
                "patch": "@@ -406,6 +406,9 @@ Bug fixes\n   lock (previously we only released on IOException).  (Tamas Cservenak\n   via Mike McCandless)\n \n+* LUCENE-2478: Fix CachingWrapperFilter to not throw NPE when\n+  Filter.getDocIdSet() returns null.  (Uwe Schindler, Daniel Noll)\n+\n New features\n \n * LUCENE-2128: Parallelized fetching document frequencies during weight",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/9181c066588a174c13a29476e6c6e95a1801c83e/lucene/CHANGES.txt",
                "sha": "df46c4a8fddd4e3c10f028070c7a682d1e9c93f4",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/9181c066588a174c13a29476e6c6e95a1801c83e/lucene/src/java/org/apache/lucene/search/CachingWrapperFilter.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/lucene/src/java/org/apache/lucene/search/CachingWrapperFilter.java?ref=9181c066588a174c13a29476e6c6e95a1801c83e",
                "deletions": 1,
                "filename": "lucene/src/java/org/apache/lucene/search/CachingWrapperFilter.java",
                "patch": "@@ -53,7 +53,10 @@ public CachingWrapperFilter(Filter filter) {\n    *  an {@link OpenBitSetDISI}.\n    */\n   protected DocIdSet docIdSetToCache(DocIdSet docIdSet, IndexReader reader) throws IOException {\n-    if (docIdSet.isCacheable()) {\n+    if (docIdSet == null) {\n+      // this is better than returning null, as the nonnull result can be cached\n+      return DocIdSet.EMPTY_DOCIDSET;\n+    } else if (docIdSet.isCacheable()) {\n       return docIdSet;\n     } else {\n       final DocIdSetIterator it = docIdSet.iterator();",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/9181c066588a174c13a29476e6c6e95a1801c83e/lucene/src/java/org/apache/lucene/search/CachingWrapperFilter.java",
                "sha": "5e277e1b6ccacea9aaa37b06bd277c0c8641bb1d",
                "status": "modified"
            },
            {
                "additions": 49,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/9181c066588a174c13a29476e6c6e95a1801c83e/lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter.java",
                "changes": 49,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter.java?ref=9181c066588a174c13a29476e6c6e95a1801c83e",
                "deletions": 0,
                "filename": "lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter.java",
                "patch": "@@ -57,6 +57,55 @@ public void testCachingWorks() throws Exception {\n     reader.close();\n   }\n   \n+  public void testNullDocIdSet() throws Exception {\n+    Directory dir = new RAMDirectory();\n+    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n+        TEST_VERSION_CURRENT, new MockAnalyzer()));\n+    writer.close();\n+\n+    IndexReader reader = IndexReader.open(dir, true);\n+\n+    final Filter filter = new Filter() {\n+      @Override\n+      public DocIdSet getDocIdSet(IndexReader reader) {\n+        return null;\n+      }\n+    };\n+    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n+\n+    // the caching filter should return the empty set constant\n+    assertSame(DocIdSet.EMPTY_DOCIDSET, cacher.getDocIdSet(reader));\n+    \n+    reader.close();\n+  }\n+  \n+  public void testNullDocIdSetIterator() throws Exception {\n+    Directory dir = new RAMDirectory();\n+    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n+        TEST_VERSION_CURRENT, new MockAnalyzer()));\n+    writer.close();\n+\n+    IndexReader reader = IndexReader.open(dir, true);\n+\n+    final Filter filter = new Filter() {\n+      @Override\n+      public DocIdSet getDocIdSet(IndexReader reader) {\n+        return new DocIdSet() {\n+          @Override\n+          public DocIdSetIterator iterator() {\n+            return null;\n+          }\n+        };\n+      }\n+    };\n+    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n+\n+    // the caching filter should return the empty set constant\n+    assertSame(DocIdSet.EMPTY_DOCIDSET, cacher.getDocIdSet(reader));\n+    \n+    reader.close();\n+  }\n+  \n   private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n     final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n     final DocIdSet originalSet = filter.getDocIdSet(reader);",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/9181c066588a174c13a29476e6c6e95a1801c83e/lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter.java",
                "sha": "96738e0ca7a6cc4f58e913fd78810814e340d85b",
                "status": "modified"
            }
        ],
        "message": "LUCENE-2478: Fix CachingWrapperFilter to not throw NPE when Filter.getDocIdSet() returns null\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@948429 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/manifoldcf-integration-solr-5.x/commit/728f7c24c17f2801e41d2681e63eba15811aaa0f",
        "patched_files": [
            "CHANGES.java",
            "CachingWrapperFilter.java"
        ],
        "repo": "manifoldcf-integration-solr-5.x",
        "unit_tests": [
            "TestCachingWrapperFilter.java"
        ]
    },
    "manifoldcf-integration-solr-5.x_bffb5b5": {
        "bug_id": "manifoldcf-integration-solr-5.x_bffb5b5",
        "commit": "https://github.com/apache/manifoldcf-integration-solr-5.x/commit/bffb5b537ff719f485e74df22a3f342b6963aeaa",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/bffb5b537ff719f485e74df22a3f342b6963aeaa/solr/CHANGES.txt",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/solr/CHANGES.txt?ref=bffb5b537ff719f485e74df22a3f342b6963aeaa",
                "deletions": 0,
                "filename": "solr/CHANGES.txt",
                "patch": "@@ -679,6 +679,13 @@ Bug Fixes\n   DocumentAnalysisRequestHandler to respect charset from XML file and only\n   use HTTP header's \"Content-Type\" as a \"hint\". (Uwe Schindler)\n \n+* SOLR-1191: resolve DataImportHandler deltaQuery column against pk when pk\n+  has a prefix (e.g. pk=\"book.id\" deltaQuery=\"select id from ...\"). More\n+  useful error reporting when no match found (previously failed with a\n+  NullPointerException in log and no clear user feedback). (gthb via yonik)\n+\n+\n+\n Other Changes\n ----------------------\n ",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/bffb5b537ff719f485e74df22a3f342b6963aeaa/solr/CHANGES.txt",
                "sha": "455fd961047f4122a1ebe2db2c35da1fd3d97064",
                "status": "modified"
            },
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/bffb5b537ff719f485e74df22a3f342b6963aeaa/solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder.java?ref=bffb5b537ff719f485e74df22a3f342b6963aeaa",
                "deletions": 3,
                "filename": "solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder.java",
                "patch": "@@ -318,7 +318,11 @@ private void deleteAll(Set<Map<String, Object>> deletedKeys) {\n       String keyName = root.isDocRoot ? root.getPk() : root.getSchemaPk();\n       Object key = map.get(keyName);\n       if(key == null) {\n-        LOG.warn(\"no key was available for deleteted pk query. keyName = \" + keyName);\n+        keyName = findMatchingPkColumn(keyName, map);\n+        key = map.get(keyName);\n+      }\n+      if(key == null) {\n+        LOG.warn(\"no key was available for deleted pk query. keyName = \" + keyName);\n         continue;\n       }\n       writer.deleteDoc(key);\n@@ -816,6 +820,28 @@ private EntityProcessorWrapper getEntityProcessor(DataConfig.Entity entity) {\n     return entity.processor = new EntityProcessorWrapper(entityProcessor, this);\n   }\n \n+  private String findMatchingPkColumn(String pk, Map<String, Object> row) {\n+    if (row.containsKey(pk))\n+      throw new IllegalArgumentException(\n+        String.format(\"deltaQuery returned a row with null for primary key %s\", pk));\n+    String resolvedPk = null;\n+    for (String columnName : row.keySet()) {\n+      if (columnName.endsWith(\".\" + pk) || pk.endsWith(\".\" + columnName)) {\n+        if (resolvedPk != null)\n+          throw new IllegalArgumentException(\n+            String.format(\n+              \"deltaQuery has more than one column (%s and %s) that might resolve to declared primary key pk='%s'\",\n+              resolvedPk, columnName, pk));\n+        resolvedPk = columnName;\n+      }\n+    }\n+    if (resolvedPk == null)\n+      throw new IllegalArgumentException(\n+        String.format(\"deltaQuery has no column to resolve to declared primary key pk='%s'\", pk));\n+    LOG.info(String.format(\"Resolving deltaQuery column '%s' to match entity's declared pk '%s'\", resolvedPk, pk));\n+    return resolvedPk;\n+  }\n+\n   /**\n    * <p> Collects unique keys of all Solr documents for whom one or more source tables have been changed since the last\n    * indexed time. </p> <p> Note: In our definition, unique key of Solr document is the primary key of the top level\n@@ -852,13 +878,20 @@ private EntityProcessorWrapper getEntityProcessor(DataConfig.Entity entity) {\n     Map<String, Map<String, Object>> deltaSet = new HashMap<String, Map<String, Object>>();\n     LOG.info(\"Running ModifiedRowKey() for Entity: \" + entity.name);\n     //get the modified rows in this entity\n+    String pk = entity.getPk();\n     while (true) {\n       Map<String, Object> row = entityProcessor.nextModifiedRowKey();\n \n       if (row == null)\n         break;\n \n-      deltaSet.put(row.get(entity.getPk()).toString(), row);\n+      Object pkValue = row.get(pk);\n+      if (pkValue == null) {\n+        pk = findMatchingPkColumn(pk, row);\n+        pkValue = row.get(pk);\n+      }\n+\n+      deltaSet.put(pkValue.toString(), row);\n       importStatistics.rowsCount.incrementAndGet();\n       // check for abort\n       if (stop.get())\n@@ -873,8 +906,14 @@ private EntityProcessorWrapper getEntityProcessor(DataConfig.Entity entity) {\n \n       deletedSet.add(row);\n       \n+      Object pkValue = row.get(pk);\n+      if (pkValue == null) {\n+        pk = findMatchingPkColumn(pk, row);\n+        pkValue = row.get(pk);\n+      }\n+\n       // Remove deleted rows from the delta rows\n-      String deletedRowPk = row.get(entity.getPk()).toString();\n+      String deletedRowPk = pkValue.toString();\n       if (deltaSet.containsKey(deletedRowPk)) {\n         deltaSet.remove(deletedRowPk);\n       }",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/bffb5b537ff719f485e74df22a3f342b6963aeaa/solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder.java",
                "sha": "858d688976ec2c68ef18b595c201a43a3cd3dd2f",
                "status": "modified"
            },
            {
                "additions": 145,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/bffb5b537ff719f485e74df22a3f342b6963aeaa/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDeltaPrefixedPk.java",
                "changes": 145,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDeltaPrefixedPk.java?ref=bffb5b537ff719f485e74df22a3f342b6963aeaa",
                "deletions": 0,
                "filename": "solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDeltaPrefixedPk.java",
                "patch": "@@ -0,0 +1,145 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.handler.dataimport;\n+\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.*;\n+\n+/**\n+ * <p>\n+ * Test for SqlEntityProcessorDelta verifying fix for SOLR-1191\n+ * </p>\n+ * \n+ *\n+ * @version $Id$\n+ * @since solr 3.1\n+ */\n+public class TestSqlEntityProcessorDeltaPrefixedPk extends AbstractDataImportHandlerTestCase {\n+  private static final String FULLIMPORT_QUERY = \"select * from x\";\n+\n+  private static final String DELTA_QUERY = \"select id from x where last_modified > NOW\";\n+\n+  private static final String DELETED_PK_QUERY = \"select id from x where last_modified > NOW AND deleted='true'\";\n+\n+  private static final String dataConfig_delta =\n+    \"<dataConfig>\" +\n+    \"  <dataSource  type=\\\"MockDataSource\\\"/>\\n\" +\n+    \"  <document>\\n\" +\n+    \"    <entity name=\\\"x\\\" transformer=\\\"TemplateTransformer\\\" pk=\\\"x.id\\\"\" +\n+    \"            query=\\\"\" + FULLIMPORT_QUERY + \"\\\"\" +\n+    \"            deletedPkQuery=\\\"\" + DELETED_PK_QUERY + \"\\\"\" +\n+    \"            deltaImportQuery=\\\"select * from x where id='${dih.delta.id}'\\\"\" +\n+    \"            deltaQuery=\\\"\" + DELTA_QUERY + \"\\\">\\n\" +\n+    \"      <field column=\\\"id\\\" name=\\\"id\\\"/>\\n\" +\n+    \"      <field column=\\\"desc\\\" name=\\\"desc\\\"/>\\n\" +\n+    \"    </entity>\\n\" +\n+    \"  </document>\\n\" +\n+    \"</dataConfig>\\n\";\n+  \n+  private static final List EMPTY_LIST = Collections.EMPTY_LIST;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws Exception {\n+    initCore(\"dataimport-solrconfig.xml\", \"dataimport-schema.xml\");\n+  }\n+\n+  @Before @Override\n+  public void setUp() throws Exception {\n+    super.setUp();\n+    clearIndex();\n+    assertU(commit());\n+    //Logger.getLogger(\"\").setLevel(Level.ALL);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private void add1document() throws Exception {\n+    List row = new ArrayList();\n+    row.add(createMap(\"id\", \"1\", \"desc\", \"bar\"));\n+    MockDataSource.setIterator(FULLIMPORT_QUERY, row.iterator());\n+\n+    runFullImport(dataConfig_delta);\n+\n+    assertQ(req(\"*:* OR add1document\"), \"//*[@numFound='1']\");\n+    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n+    assertQ(req(\"desc:bar\"), \"//*[@numFound='1']\");\n+  }\n+\n+  @Test\n+  @SuppressWarnings(\"unchecked\")\n+  public void testDeltaImport_deleteResolvesUnprefixedPk() throws Exception {\n+    add1document();\n+    MockDataSource.clearCache();\n+    List deletedRows = new ArrayList();\n+    deletedRows.add(createMap(\"id\", \"1\"));\n+    MockDataSource.setIterator(DELETED_PK_QUERY, deletedRows.iterator());\n+    MockDataSource.setIterator(DELTA_QUERY, EMPTY_LIST.iterator());\n+    runDeltaImport(dataConfig_delta);\n+\n+    assertQ(req(\"*:* OR testDeltaImport_deleteResolvesUnprefixedPk\"), \"//*[@numFound='0']\");\n+  }\n+\n+  @Test\n+  @SuppressWarnings(\"unchecked\")\n+  public void testDeltaImport_replace_resolvesUnprefixedPk() throws Exception {\n+    add1document();\n+    MockDataSource.clearCache();\n+    List deltaRows = new ArrayList();\n+    deltaRows.add(createMap(\"id\", \"1\"));\n+    MockDataSource.setIterator(DELTA_QUERY, deltaRows.iterator());\n+    MockDataSource.setIterator(DELETED_PK_QUERY, EMPTY_LIST.iterator());\n+    List rows = new ArrayList();\n+    rows.add(createMap(\"id\", \"1\", \"desc\", \"baz\"));\n+    MockDataSource.setIterator(\"select * from x where id='1'\", rows.iterator());\n+\n+    runDeltaImport(dataConfig_delta);\n+\n+    assertQ(req(\"*:* OR testDeltaImport_replace_resolvesUnprefixedPk\"), \"//*[@numFound='1']\");\n+    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n+    assertQ(req(\"desc:bar\"), \"//*[@numFound='0']\");\n+    assertQ(req(\"desc:baz\"), \"//*[@numFound='1']\");\n+  }\n+\n+  @Test\n+  @SuppressWarnings(\"unchecked\")\n+  public void testDeltaImport_addResolvesUnprefixedPk() throws Exception {\n+    add1document();\n+    MockDataSource.clearCache();\n+\n+    List deltaRows = new ArrayList();\n+    deltaRows.add(createMap(\"id\", \"2\"));\n+    MockDataSource.setIterator(DELTA_QUERY, deltaRows.iterator());\n+\n+    List rows = new ArrayList();\n+    rows.add(createMap(\"id\", \"2\", \"desc\", \"xyzzy\"));\n+    MockDataSource.setIterator(\"select * from x where id='2'\", rows.iterator());\n+\n+    runDeltaImport(dataConfig_delta);\n+\n+    assertQ(req(\"*:* OR testDeltaImport_addResolvesUnprefixedPk\"), \"//*[@numFound='2']\");\n+    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n+    assertQ(req(\"id:2\"), \"//*[@numFound='1']\");\n+    assertQ(req(\"desc:bar\"), \"//*[@numFound='1']\");\n+    assertQ(req(\"desc:xyzzy\"), \"//*[@numFound='1']\");\n+  }\n+\n+}",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/bffb5b537ff719f485e74df22a3f342b6963aeaa/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDeltaPrefixedPk.java",
                "sha": "51fc50b9f1a88718a3b339c35e47309a667cc09f",
                "status": "added"
            }
        ],
        "message": "SOLR-1191: fix DIH deltaQyery when pk has prefix, change NPE to better error reporting\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1071435 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/manifoldcf-integration-solr-5.x/commit/4019ab5f5050a99296cdc1c79cf12792c2c32f49",
        "patched_files": [
            "CHANGES.java",
            "DocBuilder.java"
        ],
        "repo": "manifoldcf-integration-solr-5.x",
        "unit_tests": [
            "TestSqlEntityProcessorDeltaPrefixedPk.java"
        ]
    },
    "manifoldcf-integration-solr-5.x_eb2bff0": {
        "bug_id": "manifoldcf-integration-solr-5.x_eb2bff0",
        "commit": "https://github.com/apache/manifoldcf-integration-solr-5.x/commit/eb2bff05d171851cd7920723436b36554bad5b65",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/eb2bff05d171851cd7920723436b36554bad5b65/lucene/src/java/org/apache/lucene/search/function/OrdFieldSource.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/lucene/src/java/org/apache/lucene/search/function/OrdFieldSource.java?ref=eb2bff05d171851cd7920723436b36554bad5b65",
                "deletions": 1,
                "filename": "lucene/src/java/org/apache/lucene/search/function/OrdFieldSource.java",
                "patch": "@@ -99,7 +99,9 @@ Object getInnerArray() {\n   /*(non-Javadoc) @see java.lang.Object#equals(java.lang.Object) */\n   @Override\n   public boolean equals(Object o) {\n-    if (o.getClass() !=  OrdFieldSource.class) return false;\n+    if (o == this) return true;\n+    if (o == null) return false;\n+    if (o.getClass() != OrdFieldSource.class) return false;\n     OrdFieldSource other = (OrdFieldSource)o;\n     return this.field.equals(other.field);\n   }",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/eb2bff05d171851cd7920723436b36554bad5b65/lucene/src/java/org/apache/lucene/search/function/OrdFieldSource.java",
                "sha": "4a23a1c5d9e43497afe1d1f0bdf1aae9104aced1",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/eb2bff05d171851cd7920723436b36554bad5b65/lucene/src/java/org/apache/lucene/search/function/ReverseOrdFieldSource.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/lucene/src/java/org/apache/lucene/search/function/ReverseOrdFieldSource.java?ref=eb2bff05d171851cd7920723436b36554bad5b65",
                "deletions": 1,
                "filename": "lucene/src/java/org/apache/lucene/search/function/ReverseOrdFieldSource.java",
                "patch": "@@ -107,7 +107,9 @@ Object getInnerArray() {\n   /*(non-Javadoc) @see java.lang.Object#equals(java.lang.Object) */\n   @Override\n   public boolean equals(Object o) {\n-    if (o.getClass() !=  ReverseOrdFieldSource.class) return false;\n+    if (o == this) return true;\n+    if (o == null) return false;\n+    if (o.getClass() != ReverseOrdFieldSource.class) return false;\n     ReverseOrdFieldSource other = (ReverseOrdFieldSource)o;\n     return this.field.equals(other.field); \n   }",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/eb2bff05d171851cd7920723436b36554bad5b65/lucene/src/java/org/apache/lucene/search/function/ReverseOrdFieldSource.java",
                "sha": "bb01ca4a4b5703c9a96eeb33858704ac24e2c223",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/eb2bff05d171851cd7920723436b36554bad5b65/lucene/src/test/org/apache/lucene/search/function/TestOrdValues.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/lucene/src/test/org/apache/lucene/search/function/TestOrdValues.java?ref=eb2bff05d171851cd7920723436b36554bad5b65",
                "deletions": 0,
                "filename": "lucene/src/test/org/apache/lucene/search/function/TestOrdValues.java",
                "patch": "@@ -253,5 +253,14 @@ private void doTestCaching(String field, boolean inOrder) throws CorruptIndexExc\n   private String testName() {\n     return getClass().getName() + \".\" + getName();\n   }\n+  \n+  // LUCENE-1250\n+  public void testEqualsNull() throws Exception {\n+    OrdFieldSource ofs = new OrdFieldSource(\"f\");\n+    assertFalse(ofs.equals(null));\n+    \n+    ReverseOrdFieldSource rofs = new ReverseOrdFieldSource(\"f\");\n+    assertFalse(rofs.equals(null));\n+  }\n \n }",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/eb2bff05d171851cd7920723436b36554bad5b65/lucene/src/test/org/apache/lucene/search/function/TestOrdValues.java",
                "sha": "07b07f1c317c9725c82d2449b58a0a3c3c040943",
                "status": "modified"
            }
        ],
        "message": "LUCENE-1250: fix equals() to check for null and not fail on NPE (trunk)\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1063272 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/manifoldcf-integration-solr-5.x/commit/11d15941b9889a458aed091a1cc41539a2ea3ab9",
        "patched_files": [
            "OrdFieldSource.java",
            "ReverseOrdFieldSource.java"
        ],
        "repo": "manifoldcf-integration-solr-5.x",
        "unit_tests": [
            "TestOrdValues.java"
        ]
    },
    "manifoldcf-integration-solr-5.x_ef8b6da": {
        "bug_id": "manifoldcf-integration-solr-5.x_ef8b6da",
        "commit": "https://github.com/apache/manifoldcf-integration-solr-5.x/commit/ef8b6da23b8a15f0344cb8e0876c86c4c9e9ace8",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/ef8b6da23b8a15f0344cb8e0876c86c4c9e9ace8/lucene/src/java/org/apache/lucene/index/SnapshotDeletionPolicy.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/lucene/src/java/org/apache/lucene/index/SnapshotDeletionPolicy.java?ref=ef8b6da23b8a15f0344cb8e0876c86c4c9e9ace8",
                "deletions": 0,
                "filename": "lucene/src/java/org/apache/lucene/index/SnapshotDeletionPolicy.java",
                "patch": "@@ -71,6 +71,10 @@ public synchronized void onCommit(List<? extends IndexCommit> commits) throws IO\n    *  consume an extra 1X of your total index size, until\n    *  you release the snapshot. */\n   public synchronized IndexCommit snapshot() {\n+    if (lastCommit == null) {\n+      throw new IllegalStateException(\"no index commits to snapshot !\");\n+    }\n+    \n     if (snapshot == null)\n       snapshot = lastCommit.getSegmentsFileName();\n     else",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/ef8b6da23b8a15f0344cb8e0876c86c4c9e9ace8/lucene/src/java/org/apache/lucene/index/SnapshotDeletionPolicy.java",
                "sha": "e067e70ecf17cb39048bd6e23e43b5d48ad8db10",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/ef8b6da23b8a15f0344cb8e0876c86c4c9e9ace8/lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy.java?ref=ef8b6da23b8a15f0344cb8e0876c86c4c9e9ace8",
                "deletions": 7,
                "filename": "lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy.java",
                "patch": "@@ -1,6 +1,4 @@\n-package org.apache.lucene;\n-// Intentionally not in org.apache.lucene.index, to assert\n-// that we do not require any package private access.\n+package org.apache.lucene.index;\n \n /**\n  * Licensed to the Apache Software Foundation (ASF) under one or more\n@@ -19,6 +17,8 @@\n  * limitations under the License.\n  */\n \n+import static org.junit.Assert.*;\n+\n import java.util.Collection;\n import java.io.File;\n import java.io.IOException;\n@@ -34,21 +34,22 @@\n import org.apache.lucene.index.IndexWriterConfig;\n import org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy;\n import org.apache.lucene.index.IndexWriter;\n-import org.apache.lucene.index.TestIndexWriter;\n import org.apache.lucene.index.SnapshotDeletionPolicy;\n+import org.apache.lucene.util.LuceneTestCaseJ4;\n import org.apache.lucene.util.ThreadInterruptedException;\n-import org.apache.lucene.util.LuceneTestCase;\n import org.apache.lucene.util._TestUtil;\n+import org.junit.Test;\n \n //\n // This was developed for Lucene In Action,\n // http://lucenebook.com\n //\n \n-public class TestSnapshotDeletionPolicy extends LuceneTestCase {\n+public class TestSnapshotDeletionPolicy extends LuceneTestCaseJ4 {\n   \n   public static final String INDEX_PATH = \"test.snapshots\";\n \n+  @Test\n   public void testSnapshotDeletionPolicy() throws Exception {\n     File dir = _TestUtil.getTempDir(INDEX_PATH);\n     try {\n@@ -64,6 +65,7 @@ public void testSnapshotDeletionPolicy() throws Exception {\n     dir2.close();\n   }\n \n+  @Test\n   public void testReuseAcrossWriters() throws Exception {\n     Directory dir = new MockRAMDirectory();\n \n@@ -235,5 +237,13 @@ private void readFile(Directory dir, String name) throws Exception {\n       input.close();\n     }\n   }\n+  \n+  @Test(expected=IllegalStateException.class)\n+  public void testNoCommits() throws Exception {\n+    // Tests that if there were no commits when snapshot() is called, then\n+    // IllegalStateException is thrown rather than NPE.\n+    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n+    sdp.snapshot();\n+  }\n+  \n }\n-",
                "previous_filename": "lucene/src/test/org/apache/lucene/TestSnapshotDeletionPolicy.java",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/ef8b6da23b8a15f0344cb8e0876c86c4c9e9ace8/lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy.java",
                "sha": "9e9464364e01fdbc9f9cf30141224de2fd68a789",
                "status": "renamed"
            }
        ],
        "message": "LUCENE-2397: SnapshotDeletionPolicy.snapshot() throws NPE if no commits happened\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@935522 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/manifoldcf-integration-solr-5.x/commit/5b046f5f9418437459bc08c8809beaa5044cd47f",
        "patched_files": [
            "SnapshotDeletionPolicy.java"
        ],
        "repo": "manifoldcf-integration-solr-5.x",
        "unit_tests": [
            "TestSnapshotDeletionPolicy.java"
        ]
    },
    "manifoldcf-integration-solr-5.x_f4f7f62": {
        "bug_id": "manifoldcf-integration-solr-5.x_f4f7f62",
        "commit": "https://github.com/apache/manifoldcf-integration-solr-5.x/commit/f4f7f62ddb734fab29e19bc3acec782d97045adc",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/f4f7f62ddb734fab29e19bc3acec782d97045adc/lucene/CHANGES.txt",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/lucene/CHANGES.txt?ref=f4f7f62ddb734fab29e19bc3acec782d97045adc",
                "deletions": 0,
                "filename": "lucene/CHANGES.txt",
                "patch": "@@ -481,6 +481,10 @@ Bug fixes\n   files when a mergedSegmentWarmer is set on IndexWriter.  (Mike\n   McCandless)\n \n+* LUCENE-2496: Don't throw NPE if IndexWriter is opened with CREATE on\n+  a prior (corrupt) index missing its segments_N file.  (Mike\n+  McCandless)\n+\n New features\n \n * LUCENE-2128: Parallelized fetching document frequencies during weight",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/f4f7f62ddb734fab29e19bc3acec782d97045adc/lucene/CHANGES.txt",
                "sha": "cf623a3abaeb100ea6290f87605025ba027efc86",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/f4f7f62ddb734fab29e19bc3acec782d97045adc/lucene/src/java/org/apache/lucene/index/IndexFileDeleter.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/lucene/src/java/org/apache/lucene/index/IndexFileDeleter.java?ref=f4f7f62ddb734fab29e19bc3acec782d97045adc",
                "deletions": 9,
                "filename": "lucene/src/java/org/apache/lucene/index/IndexFileDeleter.java",
                "patch": "@@ -134,8 +134,10 @@ public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, Segment\n     this.docWriter = docWriter;\n     this.infoStream = infoStream;\n \n+    final String currentSegmentsFile = segmentInfos.getCurrentSegmentFileName();\n+\n     if (infoStream != null)\n-      message(\"init: current segments file is \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\"; deletionPolicy=\" + policy);\n+      message(\"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n \n     this.policy = policy;\n     this.directory = directory;\n@@ -146,7 +148,6 @@ public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, Segment\n     indexFilenameFilter = new IndexFileNameFilter(codecs);\n     \n     CommitPoint currentCommitPoint = null;\n-    boolean seenIndexFiles = false;\n     String[] files = null;\n     try {\n       files = directory.listAll();\n@@ -158,7 +159,6 @@ public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, Segment\n     for (String fileName : files) {\n \n       if ((indexFilenameFilter.accept(null, fileName)) && !fileName.endsWith(\"write.lock\") && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n-        seenIndexFiles = true;\n         \n         // Add this file to refCounts with initial count 0:\n         getRefCount(fileName);\n@@ -201,10 +201,7 @@ public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, Segment\n       }\n     }\n \n-    // If we haven't seen any Lucene files, then currentCommitPoint is expected\n-    // to be null, because it means it's a fresh Directory. Therefore it cannot\n-    // be any NFS cache issues - so just ignore.\n-    if (currentCommitPoint == null && seenIndexFiles) {\n+    if (currentCommitPoint == null && currentSegmentsFile != null) {\n       // We did not in fact see the segments_N file\n       // corresponding to the segmentInfos that was passed\n       // in.  Yet, it must exist, because our caller holds\n@@ -214,7 +211,7 @@ public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, Segment\n       // try now to explicitly open this commit point:\n       SegmentInfos sis = new SegmentInfos();\n       try {\n-        sis.read(directory, segmentInfos.getCurrentSegmentFileName(), codecs);\n+        sis.read(directory, currentSegmentsFile, codecs);\n       } catch (IOException e) {\n         throw new CorruptIndexException(\"failed to locate current segments_N file\");\n       }\n@@ -244,7 +241,7 @@ public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, Segment\n \n     // Finally, give policy a chance to remove things on\n     // startup:\n-    if (seenIndexFiles) {\n+    if (currentSegmentsFile != null) {\n       policy.onInit(commits);\n     }\n ",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/f4f7f62ddb734fab29e19bc3acec782d97045adc/lucene/src/java/org/apache/lucene/index/IndexFileDeleter.java",
                "sha": "5b5c9d2f800e4feda57adebe7f9da42623c62d10",
                "status": "modified"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/blob/f4f7f62ddb734fab29e19bc3acec782d97045adc/lucene/src/test/org/apache/lucene/index/TestIndexWriter.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/manifoldcf-integration-solr-5.x/contents/lucene/src/test/org/apache/lucene/index/TestIndexWriter.java?ref=f4f7f62ddb734fab29e19bc3acec782d97045adc",
                "deletions": 1,
                "filename": "lucene/src/test/org/apache/lucene/index/TestIndexWriter.java",
                "patch": "@@ -4954,5 +4954,32 @@ public void testEmptyDirRollback() throws Exception {\n     writer.close();\n     assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n   }\n-  \n+\n+  public void testNoSegmentFile() throws IOException {\n+    File tempDir = _TestUtil.getTempDir(\"noSegmentFile\");\n+    try {\n+      Directory dir = FSDirectory.open(tempDir);\n+      dir.setLockFactory(new NoLockFactory());\n+      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n+                                                                 TEST_VERSION_CURRENT, new MockAnalyzer())\n+                                      .setMaxBufferedDocs(2));\n+\n+      Document doc = new Document();\n+      doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n+      w.addDocument(doc);\n+      w.addDocument(doc);\n+      String[] files = dir.listAll();\n+      for(String file : files) {\n+        System.out.println(\"file=\" + file);\n+      }\n+      IndexWriter w2 = new IndexWriter(dir, new IndexWriterConfig(\n+                                                                  TEST_VERSION_CURRENT, new MockAnalyzer())\n+                                       .setMaxBufferedDocs(2).setOpenMode(OpenMode.CREATE));\n+\n+      w2.close();\n+      dir.close();\n+    } finally {\n+      _TestUtil.rmDir(tempDir);\n+    }\n+  }\n }",
                "raw_url": "https://github.com/apache/manifoldcf-integration-solr-5.x/raw/f4f7f62ddb734fab29e19bc3acec782d97045adc/lucene/src/test/org/apache/lucene/index/TestIndexWriter.java",
                "sha": "a3d12032b1f433f3f10ebc579635054b378bd1a2",
                "status": "modified"
            }
        ],
        "message": "LUCENE-2496: don't throw NPE on trying to CREATE over a corrupt index\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@953628 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/manifoldcf-integration-solr-5.x/commit/e0df325f4da162f8e8272c3b4ecfe18af5fc4430",
        "patched_files": [
            "CHANGES.java",
            "IndexFileDeleter.java"
        ],
        "repo": "manifoldcf-integration-solr-5.x",
        "unit_tests": [
            "TestIndexWriter.java"
        ]
    }
}